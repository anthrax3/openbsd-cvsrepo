head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.12
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2014.07.10.13.53.11;	author miod;	state Exp;
branches;
next	1.6;
commitid	kwuftJ7GCMdBJPFx;

1.6
date	2014.05.04.22.26.33;	author jim;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.01.22.58.58;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.08.08.03.15;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.12.02.18.39;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.00;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.16;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.36.11;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.41.59;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.13;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove empty sections and references to des_modes(7) which we don't have.
@
text
@=pod

=head1 NAME

d2i_RSAPublicKey, i2d_RSAPublicKey, d2i_RSAPrivateKey, i2d_RSAPrivateKey,
d2i_RSA_PUBKEY, i2d_RSA_PUBKEY, i2d_Netscape_RSA,
d2i_Netscape_RSA - RSA public and private key encoding functions.

=head1 SYNOPSIS

 #include <openssl/rsa.h>
 #include <openssl/x509.h>

 RSA * d2i_RSAPublicKey(RSA **a, const unsigned char **pp, long length);

 int i2d_RSAPublicKey(RSA *a, unsigned char **pp);

 RSA * d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);

 int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);

 RSA * d2i_RSAPrivateKey(RSA **a, const unsigned char **pp, long length);

 int i2d_RSAPrivateKey(RSA *a, unsigned char **pp);

 int i2d_Netscape_RSA(RSA *a, unsigned char **pp, int (*cb)());

 RSA * d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length, int (*cb)());

=head1 DESCRIPTION

d2i_RSAPublicKey() and i2d_RSAPublicKey() decode and encode a PKCS#1
RSAPublicKey structure.

d2i_RSA_PUBKEY() and i2d_RSA_PUBKEY() decode and encode an RSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.

d2i_RSAPrivateKey(), i2d_RSAPrivateKey() decode and encode a PKCS#1
RSAPrivateKey structure.

d2i_Netscape_RSA(), i2d_Netscape_RSA() decode and encode an RSA private key in
NET format.

The usage of all of these functions is similar to the d2i_X509() and
i2d_X509() described in the L<d2i_X509(3)|d2i_X509(3)> manual page.

=head1 NOTES

The B<RSA> structure passed to the private key encoding functions should have
all the PKCS#1 private key components present.

The data encoded by the private key functions is unencrypted and therefore
offers no private key security.

The NET format functions are present to provide compatibility with certain very
old software. This format has some severe security weaknesses and should be
avoided if possible.

=head1 SEE ALSO

L<d2i_X509(3)|d2i_X509(3)>

=cut
@


1.6
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@a62 4
=head1 HISTORY

TBA

@


1.5
log
@Remove trailing whitespace.

fine jmc@@
@
text
@d32 2
a33 2
d2i_RSAPublicKey() and i2d_RSAPublicKey() decode and encode a PKCS#1 RSAPublicKey
structure.
d38 2
a39 2
d2i_RSAPrivateKey(), i2d_RSAPrivateKey() decode and encode a PKCS#1 RSAPrivateKey
structure.
@


1.4
log
@resolve conflicts, fix local changes
@
text
@d52 2
a53 2
The data encoded by the private key functions is unencrypted and therefore 
offers no private key security. 
@


1.3
log
@merge 0.9.7d
@
text
@d14 1
a14 1
 RSA * d2i_RSAPublicKey(RSA **a, unsigned char **pp, long length);
d18 1
a18 1
 RSA * d2i_RSA_PUBKEY(RSA **a, unsigned char **pp, long length);
d22 1
a22 1
 RSA * d2i_RSAPrivateKey(RSA **a, unsigned char **pp, long length);
d28 1
a28 1
 RSA * d2i_Netscape_RSA(RSA **a, unsigned char **pp, long length, int (*cb)());
@


1.2
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d12 1
d35 2
a36 2
d2i_RSA_PUKEY() and i2d_RSA_PUKEY() decode and encode an RSA public key using a
SubjectPublicKeyInfo (certificate public key) structure.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d5 3
a7 1
d2i_RSAPublicKey, i2d_RSAPublicKey, d2i_RSAPrivateKey, i2d_RSAPrivateKey, i2d_Netscape_RSA, d2i_Netscape_RSA - ...
d17 4
d31 19
a49 1
...
d51 2
a52 1
=head1 RETURN VALUES
d54 3
a56 1
...
d60 1
a60 1
...
d64 1
a64 1
...
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@d5 1
a5 3
d2i_RSAPublicKey, i2d_RSAPublicKey, d2i_RSAPrivateKey, i2d_RSAPrivateKey,
d2i_RSA_PUBKEY, i2d_RSA_PUBKEY, i2d_Netscape_RSA,
d2i_Netscape_RSA - RSA public and private key encoding functions.
a14 4
 RSA * d2i_RSA_PUBKEY(RSA **a, unsigned char **pp, long length);

 int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);

d25 1
a25 19
d2i_RSAPublicKey() and i2d_RSAPublicKey() decode and encode a PKCS#1 RSAPublicKey
structure.

d2i_RSA_PUKEY() and i2d_RSA_PUKEY() decode and encode an RSA public key using a
SubjectPublicKeyInfo (certificate public key) structure.

d2i_RSAPrivateKey(), i2d_RSAPrivateKey() decode and encode a PKCS#1 RSAPrivateKey
structure.

d2i_Netscape_RSA(), i2d_Netscape_RSA() decode and encode an RSA private key in
NET format.

The usage of all of these functions is similar to the d2i_X509() and
i2d_X509() described in the L<d2i_X509(3)|d2i_X509(3)> manual page.

=head1 NOTES

The B<RSA> structure passed to the private key encoding functions should have
all the PKCS#1 private key components present.
d27 1
a27 2
The data encoded by the private key functions is unencrypted and therefore 
offers no private key security. 
d29 1
a29 3
The NET format functions are present to provide compatibility with certain very
old software. This format has some severe security weaknesses and should be
avoided if possible.
d33 1
a33 1
L<d2i_X509(3)|d2i_X509(3)>
d37 1
a37 1
TBA
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@a11 1
 #include <openssl/x509.h>
d34 2
a35 2
d2i_RSA_PUBKEY() and i2d_RSA_PUBKEY() decode and encode an RSA public key using
a SubjectPublicKeyInfo (certificate public key) structure.
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d14 1
a14 1
 RSA * d2i_RSAPublicKey(RSA **a, const unsigned char **pp, long length);
d18 1
a18 1
 RSA * d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
d22 1
a22 1
 RSA * d2i_RSAPrivateKey(RSA **a, const unsigned char **pp, long length);
d28 1
a28 1
 RSA * d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length, int (*cb)());
@


