head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.0.44
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.40
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.42
	OPENBSD_4_6_BASE:1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.0.38
	OPENBSD_4_5_BASE:1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.36
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.34
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.32
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.30
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.28
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.26
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.24
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.1.0.22
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.20
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.18
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.16
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.11.11.21.15.15;	author schwarze;	state dead;
branches;
next	1.3;
commitid	gq146bCRMufdDTDJ;

1.3
date	2014.05.04.22.26.33;	author jim;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.01.22.58.58;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.55;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.16;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.13;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Convert five more manuals from POD to mdoc.
I found drafts of these in my tree, probably originally from
Max Fillinger, that just needed minor polishing.
@
text
@=pod

=head1 NAME

CRYPTO_set_ex_data, CRYPTO_get_ex_data - internal application specific data
functions

=head1 SYNOPSIS

 #include <openssl/crypto.h>

 int CRYPTO_set_ex_data(CRYPTO_EX_DATA *r, int idx, void *arg);

 void *CRYPTO_get_ex_data(CRYPTO_EX_DATA *r, int idx);

=head1 DESCRIPTION

Several OpenSSL structures can have application specific data attached to them.
These functions are used internally by OpenSSL to manipulate application
specific data attached to a specific structure.

These functions should only be used by applications to manipulate
B<CRYPTO_EX_DATA> structures passed to the B<new_func()>, B<free_func()> and
B<dup_func()> callbacks: as passed to B<RSA_get_ex_new_index()> for example.

B<CRYPTO_set_ex_data()> is used to set application specific data, the data is
supplied in the B<arg> parameter and its precise meaning is up to the
application.

B<CRYPTO_get_ex_data()> is used to retrieve application specific data. The data
is returned to the application, this will be the same value as supplied to
a previous B<CRYPTO_set_ex_data()> call.

=head1 RETURN VALUES

B<CRYPTO_set_ex_data()> returns 1 on success or 0 on failure.

B<CRYPTO_get_ex_data()> returns the application data or 0 on failure. 0 may
also be valid application data but currently it can only fail if given an
invalid B<idx> parameter.

On failure an error code can be obtained from
L<ERR_get_error(3)|ERR_get_error(3)>.

=head1 SEE ALSO

L<RSA_get_ex_new_index(3)|RSA_get_ex_new_index(3)>,
L<DSA_get_ex_new_index(3)|DSA_get_ex_new_index(3)>,
L<DH_get_ex_new_index(3)|DH_get_ex_new_index(3)>

=head1 HISTORY

CRYPTO_set_ex_data() and CRYPTO_get_ex_data() have been available since SSLeay
0.9.0.

=cut
@


1.3
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@@


1.2
log
@resolve conflicts, fix local changes
@
text
@d5 2
a6 1
CRYPTO_set_ex_data, CRYPTO_get_ex_data - internal application specific data functions
d38 3
a40 3
B<CRYPTO_get_ex_data()> returns the application data or 0 on failure. 0 may also
be valid application data but currently it can only fail if given an invalid B<idx>
parameter.
d42 2
a43 1
On failure an error code can be obtained from L<ERR_get_error(3)|ERR_get_error(3)>.
d53 2
a54 1
CRYPTO_set_ex_data() and CRYPTO_get_ex_data() have been available since SSLeay 0.9.0.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d9 2
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@a8 2
 #include <openssl/crypto.h>

@


