head	1.6;
access;
symbols
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2015.05.24.15.44.52;	author schwarze;	state dead;
branches;
next	1.5;
commitid	7bZmNPBhXN2wVT6b;

1.5
date	2014.07.13.15.41.33;	author miod;	state Exp;
branches;
next	1.4;
commitid	sJDGmkisPvS2dBBo;

1.4
date	2014.07.08.20.26.05;	author miod;	state Exp;
branches;
next	1.3;
commitid	r2eeSdyIRifR5Qmk;

1.3
date	2014.07.08.20.24.50;	author miod;	state Exp;
branches;
next	1.2;
commitid	9CvrPWp3WJfP47kZ;

1.2
date	2014.05.04.22.26.32;	author jim;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.16.09.50.10;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Maximilian dot Fillinger at uni-duesseldorf dot de
starts helping with the pod2mdoc(1)-based conversion
of LibreSSL crypto manuals from perlpod(1) to mdoc(7).
Here comes the first file, slightly tweaked by me.
@
text
@=pod

=head1 NAME

BUF_MEM_new, BUF_MEM_free, BUF_MEM_grow, BUF_strdup - simple
character arrays structure

=head1 SYNOPSIS

 #include <openssl/buffer.h>

 BUF_MEM *BUF_MEM_new(void);

 void	BUF_MEM_free(BUF_MEM *a);

 int	BUF_MEM_grow(BUF_MEM *str, size_t len);

 char *	BUF_strdup(const char *str);

=head1 DESCRIPTION

The buffer library handles simple character arrays. Buffers are used for
various purposes in the library, most notably memory BIOs.

The library uses the BUF_MEM structure defined in buffer.h:

 typedef struct buf_mem_st
 {
        size_t length;     /* current number of bytes */
        char *data;
        size_t max;        /* size of buffer */
 } BUF_MEM;

B<length> is the current size of the buffer in bytes, B<max> is the amount of
memory allocated to the buffer. There are three functions which handle these
and one "miscellaneous" function.

BUF_MEM_new() allocates a new buffer of zero size.

BUF_MEM_free() frees up an already existing buffer. The data is zeroed
before freeing up in case the buffer contains sensitive data.

BUF_MEM_grow() changes the size of an already existing buffer to
B<len>. Any data already in the buffer is preserved if it increases in
size.

BUF_strdup() copies a null terminated string into a block of allocated memory
and returns a pointer to the allocated block. Unlike the system strdup()
function, BUF_strdup() will accept a NULL argument and will return NULL in
that case. Its use in new programes is discouraged.

The memory allocated from BUF_strdup() should be freed up using the
free() function.

=head1 RETURN VALUES

BUF_MEM_new() returns the buffer or NULL on error.

BUF_MEM_free() has no return value.

BUF_MEM_grow() returns zero on error or the new size (i.e. B<len>).

=head1 SEE ALSO

L<bio(3)|bio(3)>

=head1 HISTORY

BUF_MEM_new(), BUF_MEM_free() and BUF_MEM_grow() are available in all
versions of SSLeay and OpenSSL. BUF_strdup() was added in SSLeay 0.8.

=cut
@


1.5
log
@Warn about the use of BUF_strdup.
@
text
@@


1.4
log
@Do not suggest using BUF_strdup() preferably to strdup() for fallacious
reasons.
@
text
@d48 3
a50 1
and returns a pointer to the allocated block.
d53 1
a53 1
OPENSSL_free() function.
@


1.3
log
@Match the current state of the code.
@
text
@d48 1
a48 4
and returns a pointer to the allocated block.  Unlike the standard C library
strdup() this function uses OPENSSL_malloc() and so should be used in
preference to the standard library strdup() because it can be used for memory
leak checking or replacing the malloc() function.
@


1.2
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@d16 1
a16 1
 int	BUF_MEM_grow(BUF_MEM *str, int len);
d29 1
a29 1
        int length;     /* current number of bytes */
d31 1
a31 1
        int max;        /* size of buffer */
@


1.1
log
@Sync the list of man pages for libcrypto, explicity rename conflicting
pages instead of doing it in the Makefiles and move a libssl page where
it belongs.

ok miod@@
@
text
@d47 5
a51 5
BUF_strdup() copies a null terminated string into a block of allocated
memory and returns a pointer to the allocated block.
Unlike the standard C library strdup() this function uses OPENSSL_malloc() and so
should be used in preference to the standard library strdup() because it can
be used for memory leak checking or replacing the malloc() function.
d53 2
a54 2
The memory allocated from BUF_strdup() should be freed up using the OPENSSL_free()
function.
@

