head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.5;
commitid	HnbXxsegngek41U2;

1.5
date	2014.07.09.17.56.43;	author miod;	state Exp;
branches;
next	1.4;
commitid	XgZtb7UreenCb5yR;

1.4
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.59;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.45;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the libssl/src directory
@
text
@=pod

=head1 NAME

RAND_set_rand_method, RAND_get_rand_method, RAND_SSLeay - select RAND method

=head1 SYNOPSIS

 #include <openssl/rand.h>

 void RAND_set_rand_method(const RAND_METHOD *meth);

 const RAND_METHOD *RAND_get_rand_method(void);

 RAND_METHOD *RAND_SSLeay(void);

=head1 DESCRIPTION

These functions used to allow for the random number generator functions
to be replaced by arbitrary code.

They are kept for ABI compatibility but are no longer functional, and
should not be used in new programs.

=head1 SEE ALSO

L<rand(3)|rand(3)>

=head1 HISTORY

RAND_set_rand_method(), RAND_get_rand_method() and RAND_SSLeay() are
available in all versions of OpenSSL.

In the engine version of version 0.9.6, RAND_set_rand_method() was altered to
take an ENGINE pointer as its argument. As of version 0.9.7, that has been
reverted as the ENGINE API transparently overrides RAND defaults if used,
otherwise RAND API functions work as before. RAND_set_rand_engine() was also
introduced in version 0.9.7.

=cut
@


1.5
log
@Update to match the current state of crypto/rand, and remove MLINKS for
RAND_event and RAND_screen.
@
text
@@


1.4
log
@resolve conflicts
@
text
@d19 2
a20 5
A B<RAND_METHOD> specifies the functions that OpenSSL uses for random number
generation. By modifying the method, alternative implementations such as
hardware RNGs may be used. IMPORTANT: See the NOTES section for important
information about how these RAND API functions are affected by the use of
B<ENGINE> API calls.
d22 2
a23 42
Initially, the default RAND_METHOD is the OpenSSL internal implementation, as
returned by RAND_SSLeay().

RAND_set_default_method() makes B<meth> the method for PRNG use. B<NB>: This is
true only whilst no ENGINE has been set as a default for RAND, so this function
is no longer recommended.

RAND_get_default_method() returns a pointer to the current RAND_METHOD.
However, the meaningfulness of this result is dependent on whether the ENGINE
API is being used, so this function is no longer recommended.

=head1 THE RAND_METHOD STRUCTURE

 typedef struct rand_meth_st
 {
        void (*seed)(const void *buf, int num);
        int (*bytes)(unsigned char *buf, int num);
        void (*cleanup)(void);
        void (*add)(const void *buf, int num, int entropy);
        int (*pseudorand)(unsigned char *buf, int num);
	int (*status)(void);
 } RAND_METHOD;

The components point to the implementation of RAND_seed(),
RAND_bytes(), RAND_cleanup(), RAND_add(), RAND_pseudo_rand()
and RAND_status().
Each component may be NULL if the function is not implemented.

=head1 RETURN VALUES

RAND_set_rand_method() returns no value. RAND_get_rand_method() and
RAND_SSLeay() return pointers to the respective methods.

=head1 NOTES

As of version 0.9.7, RAND_METHOD implementations are grouped together with other
algorithmic APIs (eg. RSA_METHOD, EVP_CIPHER, etc) in B<ENGINE> modules. If a
default ENGINE is specified for RAND functionality using an ENGINE API function,
that will override any RAND defaults set using the RAND API (ie.
RAND_set_rand_method()). For this reason, the ENGINE API is the recommended way
to control default implementations for use in RAND and other cryptographic
algorithms.
d27 1
a27 1
L<rand(3)|rand(3)>, L<engine(3)|engine(3)>
@


1.3
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d33 1
a33 1
However, the meaningfulness of this result is dependant on whether the ENGINE
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d11 1
a11 1
 void RAND_set_rand_method(RAND_METHOD *meth);
d13 1
a13 1
 RAND_METHOD *RAND_get_rand_method(void);
d19 16
a34 8
A B<RAND_METHOD> specifies the functions that OpenSSL uses for random
number generation. By modifying the method, alternative
implementations such as hardware RNGs may be used.  Initially, the
default is to use the OpenSSL internal implementation. RAND_SSLeay()
returns a pointer to that method.

RAND_set_rand_method() sets the RAND method to B<meth>.
RAND_get_rand_method() returns a pointer to the current method.
d58 10
d70 1
a70 1
L<rand(3)|rand(3)>
d76 6
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d37 1
d41 2
a42 1
RAND_bytes(), RAND_cleanup(), RAND_add() and RAND_pseudo_rand().
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a36 1
	int (*status)(void);
d40 1
a40 2
RAND_bytes(), RAND_cleanup(), RAND_add(), RAND_pseudo_rand()
and RAND_status().
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d11 1
a11 1
 void RAND_set_rand_method(const RAND_METHOD *meth);
d13 1
a13 1
 const RAND_METHOD *RAND_get_rand_method(void);
d19 8
a26 16
A B<RAND_METHOD> specifies the functions that OpenSSL uses for random number
generation. By modifying the method, alternative implementations such as
hardware RNGs may be used. IMPORTANT: See the NOTES section for important
information about how these RAND API functions are affected by the use of
B<ENGINE> API calls.

Initially, the default RAND_METHOD is the OpenSSL internal implementation, as
returned by RAND_SSLeay().

RAND_set_default_method() makes B<meth> the method for PRNG use. B<NB>: This is
true only whilst no ENGINE has been set as a default for RAND, so this function
is no longer recommended.

RAND_get_default_method() returns a pointer to the current RAND_METHOD.
However, the meaningfulness of this result is dependant on whether the ENGINE
API is being used, so this function is no longer recommended.
a49 10
=head1 NOTES

As of version 0.9.7, RAND_METHOD implementations are grouped together with other
algorithmic APIs (eg. RSA_METHOD, EVP_CIPHER, etc) in B<ENGINE> modules. If a
default ENGINE is specified for RAND functionality using an ENGINE API function,
that will override any RAND defaults set using the RAND API (ie.
RAND_set_rand_method()). For this reason, the ENGINE API is the recommended way
to control default implementations for use in RAND and other cryptographic
algorithms.

d52 1
a52 1
L<rand(3)|rand(3)>, L<engine(3)|engine(3)>
a57 6

In the engine version of version 0.9.6, RAND_set_rand_method() was altered to
take an ENGINE pointer as its argument. As of version 0.9.7, that has been
reverted as the ENGINE API transparently overrides RAND defaults if used,
otherwise RAND API functions work as before. RAND_set_rand_engine() was also
introduced in version 0.9.7.
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d33 1
a33 1
However, the meaningfulness of this result is dependent on whether the ENGINE
@


