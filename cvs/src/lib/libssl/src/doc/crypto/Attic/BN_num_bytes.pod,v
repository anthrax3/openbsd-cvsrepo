head	1.3;
access;
symbols
	OPENBSD_5_6:1.2.0.40
	OPENBSD_5_6_BASE:1.2
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.2.0.38
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.34
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.32
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.2.0.26
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.24
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.2.0.22
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.1.0.22
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.20
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.18
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.16
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.14
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.12
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.10
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.8
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.02.23.17.43.24;	author schwarze;	state dead;
branches;
next	1.2;
commitid	YTrWDOlpO82FZm6K;

1.2
date	2005.04.29.05.39.29;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.55;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.16;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.04.29.05.37.22;	author djm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fourth batch of perlpod(1) to mdoc(7) conversion
@
text
@=pod

=head1 NAME

BN_num_bits, BN_num_bytes, BN_num_bits_word - get BIGNUM size

=head1 SYNOPSIS

 #include <openssl/bn.h>

 int BN_num_bytes(const BIGNUM *a);

 int BN_num_bits(const BIGNUM *a);

 int BN_num_bits_word(BN_ULONG w);

=head1 DESCRIPTION

BN_num_bytes() returns the size of a B<BIGNUM> in bytes.

BN_num_bits_word() returns the number of significant bits in a word.
If we take 0x00000432 as an example, it returns 11, not 16, not 32.
Basically, except for a zero, it returns I<floor(log2(w))+1>.

BN_num_bits() returns the number of significant bits in a B<BIGNUM>,
following the same principle as BN_num_bits_word().

BN_num_bytes() is a macro.

=head1 RETURN VALUES

The size.

=head1 NOTES

Some have tried using BN_num_bits() on individual numbers in RSA keys,
DH keys and DSA keys, and found that they don't always come up with
the number of bits they expected (something like 512, 1024, 2048,
...).  This is because generating a number with some specific number
of bits doesn't always set the highest bits, thereby making the number
of I<significant> bits a little lower.  If you want to know the "key
size" of such a key, either use functions like RSA_size(), DH_size()
and DSA_size(), or use BN_num_bytes() and multiply with 8 (although
there's no real guarantee that will match the "key size", just a lot
more probability).

=head1 SEE ALSO

L<bn(3)|bn(3)>, L<DH_size(3)|DH_size(3)>, L<DSA_size(3)|DSA_size(3)>,
L<RSA_size(3)|RSA_size(3)>

=head1 HISTORY

BN_num_bytes(), BN_num_bits() and BN_num_bits_word() are available in
all versions of SSLeay and OpenSSL.

=cut
@


1.2
log
@resolve conflicts
@
text
@@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d19 8
a26 2
These functions return the size of a B<BIGNUM> in bytes or bits,
and the size of an unsigned integer in bits.
d34 13
d49 2
a50 1
L<bn(3)|bn(3)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d19 2
a20 8
BN_num_bytes() returns the size of a B<BIGNUM> in bytes.

BN_num_bits_word() returns the number of significant bits in a word.
If we take 0x00000432 as an example, it returns 11, not 16, not 32.
Basically, except for a zero, it returns I<floor(log2(w))+1>.

BN_num_bits() returns the number of significant bits in a B<BIGNUM>,
following the same principle as BN_num_bits_word().
a27 13
=head1 NOTES

Some have tried using BN_num_bits() on individual numbers in RSA keys,
DH keys and DSA keys, and found that they don't always come up with
the number of bits they expected (something like 512, 1024, 2048,
...).  This is because generating a number with some specific number
of bits doesn't always set the highest bits, thereby making the number
of I<significant> bits a little lower.  If you want to know the "key
size" of such a key, either use functions like RSA_size(), DH_size()
and DSA_size(), or use BN_num_bytes() and multiply with 8 (although
there's no real guarantee that will match the "key size", just a lot
more probability).

d30 1
a30 2
L<bn(3)|bn(3)>, L<DH_size(3)|DH_size(3)>, L<DSA_size(3)|DSA_size(3)>,
L<RSA_size(3)|RSA_size(3)>
@


