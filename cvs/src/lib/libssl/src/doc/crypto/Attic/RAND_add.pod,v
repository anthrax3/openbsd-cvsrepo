head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.1
	OPENBSD_5_5:1.2.0.60
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.56
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.54
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.2.0.50
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.52
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.2.0.48
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.46
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.2.0.44
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.40
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.42
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.2.0.38
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.36
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.34
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.32
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.30
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.28
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.26
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.24
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.2.0.22
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.20
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.5;
commitid	HnbXxsegngek41U2;

1.5
date	2014.07.09.17.56.43;	author miod;	state Exp;
branches;
next	1.4;
commitid	XgZtb7UreenCb5yR;

1.4
date	2014.06.28.20.24.55;	author jca;	state Exp;
branches;
next	1.3;
commitid	YfrygzLGF0nHhjAh;

1.3
date	2014.04.15.16.52.50;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.12.58;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the libssl/src directory
@
text
@=pod

=head1 NAME

RAND_add, RAND_seed, RAND_status - add entropy to the PRNG (DEPRECATED)

=head1 SYNOPSIS

 #include <openssl/rand.h>

 void RAND_seed(const void *buf, int num);

 void RAND_add(const void *buf, int num, double entropy);

 int  RAND_status(void);

=head1 DESCRIPTION

These functions used to allow for the state of the random number generator
to be controlled by external sources.

They are kept for ABI compatibility but are no longer functional, and
should not be used in new programs.

=head1 SEE ALSO

L<rand(3)|rand(3)>,
L<RAND_load_file(3)|RAND_load_file(3)>, L<RAND_cleanup(3)|RAND_cleanup(3)>

=cut
@


1.5
log
@Update to match the current state of crypto/rand, and remove MLINKS for
RAND_event and RAND_screen.
@
text
@@


1.4
log
@Add a missing word.
@
text
@d27 1
a27 1
L<rand(3)|rand(3)>, L<RAND_egd(3)|RAND_egd(3)>,
@


1.3
log
@Replace the old OpenSSL PRNG by direct use of arc4random_buf(), keeping the
existing RAND interfaces unchanged.

All interfaces allowing external feed or seed of the RNG (either from a file
or a local entropy gathering daemon) are kept for ABI compatibility, but are
no longer do anything.

While the OpenSSL PRNG was required 15+ years ago when many systems lacked
proper entropy collection, things have evolved and one can reasonably assume
it is better to use the kernel (system global) entropy pool rather than trying
to build one's own and having to compensate for thread scheduling...

<RANT>
Whoever thought that RAND_screen(), feeding the PRNG with the contents of the
local workstation's display, under Win32, was a smart idea, ought to be banned
from security programming.
</RANT>

ok beck@@ deraadt@@ tedu@@
@
text
@d23 1
a23 1
should not used in new programs.
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d5 1
a5 2
RAND_add, RAND_seed, RAND_status, RAND_event, RAND_screen - add
entropy to the PRNG
a16 3
 int  RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);
 void RAND_screen(void);

d19 2
a20 40
RAND_add() mixes the B<num> bytes at B<buf> into the PRNG state. Thus,
if the data at B<buf> are unpredictable to an adversary, this
increases the uncertainty about the state and makes the PRNG output
less predictable. Suitable input comes from user interaction (random
key presses, mouse movements) and certain hardware events. The
B<entropy> argument is (the lower bound of) an estimate of how much
randomness is contained in B<buf>, measured in bytes. Details about
sources of randomness and how to estimate their entropy can be found
in the literature, e.g. RFC 1750.

RAND_add() may be called with sensitive data such as user entered
passwords. The seed values cannot be recovered from the PRNG output.

OpenSSL makes sure that the PRNG state is unique for each thread. On
systems that provide C</dev/urandom>, the randomness device is used
to seed the PRNG transparently. However, on all other systems, the
application is responsible for seeding the PRNG by calling RAND_add(),
L<RAND_egd(3)|RAND_egd(3)>
or L<RAND_load_file(3)|RAND_load_file(3)>.

RAND_seed() is equivalent to RAND_add() when B<num == entropy>.

RAND_event() collects the entropy from Windows events such as mouse
movements and other user interaction. It should be called with the
B<iMsg>, B<wParam> and B<lParam> arguments of I<all> messages sent to
the window procedure. It will estimate the entropy contained in the
event message (if any), and add it to the PRNG. The program can then
process the messages as usual.

The RAND_screen() function is available for the convenience of Windows
programmers. It adds the current contents of the screen to the PRNG.
For applications that can catch Windows events, seeding the PRNG by
calling RAND_event() is a significantly better source of
randomness. It should be noted that both methods cannot be used on
servers that run without user interaction.

=head1 RETURN VALUES

RAND_status() and RAND_event() return 1 if the PRNG has been seeded
with enough data, 0 otherwise.
d22 2
a23 1
The other functions do not return values.
a28 6

=head1 HISTORY

RAND_seed() and RAND_screen() are available in all versions of SSLeay
and OpenSSL. RAND_add() and RAND_status() have been added in OpenSSL
0.9.5, RAND_event() in OpenSSL 0.9.5a.
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d5 2
a6 1
RAND_add, RAND_seed, RAND_screen - add entropy to the PRNG
d18 1
d45 7
d54 4
a57 4
For applications that can catch Windows events, seeding the PRNG with
the parameters of B<WM_MOUSEMOVE> events is a significantly better
source of randomness. It should be noted that both methods cannot be
used on servers that run without user interaction.
d61 2
a62 2
RAND_status() returns 1 if the PRNG has been seeded with enough data,
0 otherwise.
d75 1
a75 1
0.9.5.
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d5 1
a5 2
RAND_add, RAND_seed, RAND_status, RAND_event, RAND_screen - add
entropy to the PRNG
a16 1
 int  RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);
a42 7
RAND_event() collects the entropy from Windows events such as mouse
movements and other user interaction. It should be called with the
B<iMsg>, B<wParam> and B<lParam> arguments of I<all> messages sent to
the window procedure. It will estimate the entropy contained in the
event message (if any), and add it to the PRNG. The program can then
process the messages as usual.

d45 4
a48 4
For applications that can catch Windows events, seeding the PRNG by
calling RAND_event() is a significantly better source of
randomness. It should be noted that both methods cannot be used on
servers that run without user interaction.
d52 2
a53 2
RAND_status() and RAND_event() return 1 if the PRNG has been seeded
with enough data, 0 otherwise.
d66 1
a66 1
0.9.5, RAND_event() in OpenSSL 0.9.5a.
@


