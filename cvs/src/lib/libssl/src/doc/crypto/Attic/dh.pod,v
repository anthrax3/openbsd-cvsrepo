head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.3
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.3.0.50
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.46
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.44
	OPENBSD_5_3_BASE:1.3
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.3.0.40
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.42
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.3.0.38
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.36
	OPENBSD_4_9_BASE:1.3
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.3.0.34
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.30
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.32
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.3.0.28
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.26
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.24
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.22
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.20
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.18
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.16
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2016.09.03.11.33.40;	author beck;	state dead;
branches;
next	1.5;
commitid	HnbXxsegngek41U2;

1.5
date	2014.05.04.22.26.33;	author jim;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.14.11.18.03;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.31;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.00;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.17;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.51.50;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the libssl/src directory
@
text
@=pod

=head1 NAME

dh - Diffie-Hellman key agreement

=head1 SYNOPSIS

 #include <openssl/dh.h>
 #include <openssl/engine.h>

 DH *	DH_new(void);
 void	DH_free(DH *dh);

 int	DH_size(const DH *dh);

 DH *	DH_generate_parameters(int prime_len, int generator,
		void (*callback)(int, int, void *), void *cb_arg);
 int	DH_check(const DH *dh, int *codes);

 int	DH_generate_key(DH *dh);
 int	DH_compute_key(unsigned char *key, BIGNUM *pub_key, DH *dh);

 void DH_set_default_method(const DH_METHOD *meth);
 const DH_METHOD *DH_get_default_method(void);
 int DH_set_method(DH *dh, const DH_METHOD *meth);
 DH *DH_new_method(ENGINE *engine);
 const DH_METHOD *DH_OpenSSL(void);

 int DH_get_ex_new_index(long argl, char *argp, int (*new_func)(),
	     int (*dup_func)(), void (*free_func)());
 int DH_set_ex_data(DH *d, int idx, char *arg);
 char *DH_get_ex_data(DH *d, int idx);

 DH *	d2i_DHparams(DH **a, unsigned char **pp, long length);
 int	i2d_DHparams(const DH *a, unsigned char **pp);

 int	DHparams_print_fp(FILE *fp, const DH *x);
 int	DHparams_print(BIO *bp, const DH *x);

=head1 DESCRIPTION

These functions implement the Diffie-Hellman key agreement protocol.  The
generation of shared DH parameters is described in
L<DH_generate_parameters(3)|DH_generate_parameters(3)>;
L<DH_generate_key(3)|DH_generate_key(3)> describes how to perform a key
agreement.

The B<DH> structure consists of several BIGNUM components.

 struct
        {
        BIGNUM *p;		// prime number (shared)
        BIGNUM *g;		// generator of Z_p (shared)
        BIGNUM *priv_key;	// private DH value x
        BIGNUM *pub_key;	// public DH value g^x
        // ...
        };
 DH

Note that DH keys may use non-standard B<DH_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DH
structure elements directly and instead use API functions to query or
modify keys.

=head1 SEE ALSO

L<dhparam(1)|dhparam(1)>, L<bn(3)|bn(3)>, L<dsa(3)|dsa(3)>, L<err(3)|err(3)>,
L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>, L<engine(3)|engine(3)>,
L<DH_set_method(3)|DH_set_method(3)>, L<DH_new(3)|DH_new(3)>,
L<DH_get_ex_new_index(3)|DH_get_ex_new_index(3)>,
L<DH_generate_parameters(3)|DH_generate_parameters(3)>,
L<DH_compute_key(3)|DH_compute_key(3)>, L<d2i_DHparams(3)|d2i_DHparams(3)>,
L<RSA_print(3)|RSA_print(3)>

=cut
@


1.5
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@@


1.4
log
@Remove trailing whitespace.

fine jmc@@
@
text
@d43 5
a47 4
These functions implement the Diffie-Hellman key agreement protocol.
The generation of shared DH parameters is described in
L<DH_generate_parameters(3)|DH_generate_parameters(3)>; L<DH_generate_key(3)|DH_generate_key(3)> describes how
to perform a key agreement.
@


1.3
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d76 1
a76 1
L<RSA_print(3)|RSA_print(3)> 
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d15 1
a15 1
 int	DH_size(DH *dh);
d19 1
a19 1
 int	DH_check(DH *dh, int *codes);
d24 3
a26 3
 void DH_set_default_openssl_method(DH_METHOD *meth);
 DH_METHOD *DH_get_default_openssl_method(void);
 int DH_set_method(DH *dh, ENGINE *engine);
d28 1
a28 1
 DH_METHOD *DH_OpenSSL(void);
d36 1
a36 1
 int	i2d_DHparams(DH *a, unsigned char **pp);
d38 2
a39 2
 int	DHparams_print_fp(FILE *fp, DH *x);
 int	DHparams_print(BIO *bp, DH *x);
d60 8
d71 3
a73 2
L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>, L<DH_set_method(3)|DH_set_method(3)>,
L<DH_new(3)|DH_new(3)>, L<DH_get_ex_new_index(3)|DH_get_ex_new_index(3)>,
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d10 1
d24 4
a27 4
 void DH_set_default_method(DH_METHOD *meth);
 DH_METHOD *DH_get_default_method(void);
 DH_METHOD *DH_set_method(DH *dh, DH_METHOD *meth);
 DH *DH_new_method(DH_METHOD *meth);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a9 1
 #include <openssl/engine.h>
d23 4
a26 4
 void DH_set_default_openssl_method(DH_METHOD *meth);
 DH_METHOD *DH_get_default_openssl_method(void);
 int DH_set_method(DH *dh, ENGINE *engine);
 DH *DH_new_method(ENGINE *engine);
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d15 1
a15 1
 int	DH_size(const DH *dh);
d19 1
a19 1
 int	DH_check(const DH *dh, int *codes);
d24 3
a26 3
 void DH_set_default_method(const DH_METHOD *meth);
 const DH_METHOD *DH_get_default_method(void);
 int DH_set_method(DH *dh, const DH_METHOD *meth);
d28 1
a28 1
 const DH_METHOD *DH_OpenSSL(void);
d36 1
a36 1
 int	i2d_DHparams(const DH *a, unsigned char **pp);
d38 2
a39 2
 int	DHparams_print_fp(FILE *fp, const DH *x);
 int	DHparams_print(BIO *bp, const DH *x);
a59 8
Note that DH keys may use non-standard B<DH_METHOD> implementations,
either directly or by the use of B<ENGINE> modules. In some cases (eg. an
ENGINE providing support for hardware-embedded keys), these BIGNUM values
will not be used by the implementation or may be used for alternative data
storage. For this reason, applications should generally avoid using DH
structure elements directly and instead use API functions to query or
modify keys.

d63 2
a64 3
L<rand(3)|rand(3)>, L<rsa(3)|rsa(3)>, L<engine(3)|engine(3)>,
L<DH_set_method(3)|DH_set_method(3)>, L<DH_new(3)|DH_new(3)>,
L<DH_get_ex_new_index(3)|DH_get_ex_new_index(3)>,
@


