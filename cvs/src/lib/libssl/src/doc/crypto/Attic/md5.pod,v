head	1.5;
access;
symbols
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.4.0.24
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.32
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.30
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.28
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.26
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.24
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.22
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.20
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.3.0.18
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2014.04.16.09.50.10;	author mpi;	state dead;
branches;
next	1.4;

1.4
date	2008.09.06.12.17.53;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.31;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.03.19.27.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.13.01;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Sync the list of man pages for libcrypto, explicity rename conflicting
pages instead of doing it in the Makefiles and move a libssl page where
it belongs.

ok miod@@
@
text
@=pod

=head1 NAME

MD2, MD4, MD5, MD2_Init, MD2_Update, MD2_Final, MD4_Init, MD4_Update,
MD4_Final, MD5_Init, MD5_Update, MD5_Final - MD2, MD4, and MD5 hash functions

=head1 SYNOPSIS

 #include <openssl/md2.h>

 unsigned char *MD2(const unsigned char *d, unsigned long n,
                  unsigned char *md);

 int MD2_Init(MD2_CTX *c);
 int MD2_Update(MD2_CTX *c, const unsigned char *data,
                  unsigned long len);
 int MD2_Final(unsigned char *md, MD2_CTX *c);


 #include <openssl/md4.h>

 unsigned char *MD4(const unsigned char *d, unsigned long n,
                  unsigned char *md);

 int MD4_Init(MD4_CTX *c);
 int MD4_Update(MD4_CTX *c, const void *data,
                  unsigned long len);
 int MD4_Final(unsigned char *md, MD4_CTX *c);


 #include <openssl/md5.h>

 unsigned char *MD5(const unsigned char *d, unsigned long n,
                  unsigned char *md);

 int MD5_Init(MD5_CTX *c);
 int MD5_Update(MD5_CTX *c, const void *data,
                  unsigned long len);
 int MD5_Final(unsigned char *md, MD5_CTX *c);

=head1 DESCRIPTION

MD2, MD4, and MD5 are cryptographic hash functions with a 128 bit output.

MD2(), MD4(), and MD5() compute the MD2, MD4, and MD5 message digest
of the B<n> bytes at B<d> and place it in B<md> (which must have space
for MD2_DIGEST_LENGTH == MD4_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16
bytes of output). If B<md> is NULL, the digest is placed in a static
array.

The following functions may be used if the message is not completely
stored in memory:

MD2_Init() initializes a B<MD2_CTX> structure.

MD2_Update() can be called repeatedly with chunks of the message to
be hashed (B<len> bytes at B<data>).

MD2_Final() places the message digest in B<md>, which must have space
for MD2_DIGEST_LENGTH == 16 bytes of output, and erases the B<MD2_CTX>.

MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and
MD5_Final() are analogous using an B<MD4_CTX> and B<MD5_CTX> structure.

Applications should use the higher level functions
L<EVP_DigestInit(3)|EVP_DigestInit(3)>
etc. instead of calling the hash functions directly.

=head1 NOTE

MD2, MD4, and MD5 are recommended only for compatibility with existing
applications. In new applications, SHA-1 or RIPEMD-160 should be
preferred.

=head1 RETURN VALUES

MD2(), MD4(), and MD5() return pointers to the hash value. 

MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(),
MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for
success, 0 otherwise.

=head1 CONFORMING TO

RFC 1319, RFC 1320, RFC 1321

=head1 SEE ALSO

L<sha(3)|sha(3)>, L<ripemd(3)|ripemd(3)>, L<EVP_DigestInit(3)|EVP_DigestInit(3)>

=head1 HISTORY

MD2(), MD2_Init(), MD2_Update() MD2_Final(), MD5(), MD5_Init(),
MD5_Update() and MD5_Final() are available in all versions of SSLeay
and OpenSSL.

MD4(), MD4_Init(), and MD4_Update() are available in OpenSSL 0.9.6 and
above.

=cut
@


1.4
log
@resolve conflicts
@
text
@@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d15 2
a16 2
 void MD2_Init(MD2_CTX *c);
 void MD2_Update(MD2_CTX *c, const unsigned char *data,
d18 1
a18 1
 void MD2_Final(unsigned char *md, MD2_CTX *c);
d26 2
a27 2
 void MD4_Init(MD4_CTX *c);
 void MD4_Update(MD4_CTX *c, const void *data,
d29 1
a29 1
 void MD4_Final(unsigned char *md, MD4_CTX *c);
d37 2
a38 2
 void MD5_Init(MD5_CTX *c);
 void MD5_Update(MD5_CTX *c, const void *data,
d40 1
a40 1
 void MD5_Final(unsigned char *md, MD5_CTX *c);
d81 2
a82 2
MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() do not return
values.
@


1.2
log
@correct Xr to where we actually install the man pages
@
text
@d5 2
a6 2
MD2, MD5, MD2_Init, MD2_Update, MD2_Final, MD5_Init, MD5_Update,
MD5_Final - MD2 and MD5 hash functions
d21 11
d44 1
a44 1
MD2 and MD5 are cryptographic hash functions with a 128 bit output.
d46 5
a50 4
MD2() and MD5() compute the MD2 and MD5 message digest of the B<n>
bytes at B<d> and place it in B<md> (which must have space for
MD2_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16 bytes of output). If
B<md> is NULL, the digest is placed in a static array.
d63 2
a64 2
MD5_Init(), MD5_Update() and MD5_Final() are analogous using an
B<MD5_CTX> structure.
d72 1
a72 1
MD2 and MD5 are recommended only for compatibility with existing
d78 1
a78 1
MD2() and MD5() return pointers to the hash value. 
d80 3
a82 2
MD2_Init(), MD2_Update() MD2_Final(), MD5_Init(), MD5_Update() and
MD5_Final() do not return values.
d86 1
a86 1
RFC 1319, RFC 1321
d90 1
a90 1
L<SHA1(3)|SHA1(3)>, L<RIPEMD160(3)|RIPEMD160(3)>, L<EVP_DigestInit(3)|EVP_DigestInit(3)>
d97 3
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d77 1
a77 1
L<sha(3)|sha(3)>, L<ripemd(3)|ripemd(3)>, L<EVP_DigestInit(3)|EVP_DigestInit(3)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d5 2
a6 2
MD2, MD4, MD5, MD2_Init, MD2_Update, MD2_Final, MD4_Init, MD4_Update,
MD4_Final, MD5_Init, MD5_Update, MD5_Final - MD2, MD4, and MD5 hash functions
a20 11
 #include <openssl/md4.h>

 unsigned char *MD4(const unsigned char *d, unsigned long n,
                  unsigned char *md);

 void MD4_Init(MD4_CTX *c);
 void MD4_Update(MD4_CTX *c, const void *data,
                  unsigned long len);
 void MD4_Final(unsigned char *md, MD4_CTX *c);


d33 1
a33 1
MD2, MD4, and MD5 are cryptographic hash functions with a 128 bit output.
d35 4
a38 5
MD2(), MD4(), and MD5() compute the MD2, MD4, and MD5 message digest
of the B<n> bytes at B<d> and place it in B<md> (which must have space
for MD2_DIGEST_LENGTH == MD4_DIGEST_LENGTH == MD5_DIGEST_LENGTH == 16
bytes of output). If B<md> is NULL, the digest is placed in a static
array.
d51 2
a52 2
MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and
MD5_Final() are analogous using an B<MD4_CTX> and B<MD5_CTX> structure.
d60 1
a60 1
MD2, MD4, and MD5 are recommended only for compatibility with existing
d66 1
a66 1
MD2(), MD4(), and MD5() return pointers to the hash value. 
d68 2
a69 3
MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(),
MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() do not return
values.
d73 1
a73 1
RFC 1319, RFC 1320, RFC 1321
a83 3

MD4(), MD4_Init(), and MD4_Update() are available in OpenSSL 0.9.6 and
above.
@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@d15 2
a16 2
 int MD2_Init(MD2_CTX *c);
 int MD2_Update(MD2_CTX *c, const unsigned char *data,
d18 1
a18 1
 int MD2_Final(unsigned char *md, MD2_CTX *c);
d26 2
a27 2
 int MD4_Init(MD4_CTX *c);
 int MD4_Update(MD4_CTX *c, const void *data,
d29 1
a29 1
 int MD4_Final(unsigned char *md, MD4_CTX *c);
d37 2
a38 2
 int MD5_Init(MD5_CTX *c);
 int MD5_Update(MD5_CTX *c, const void *data,
d40 1
a40 1
 int MD5_Final(unsigned char *md, MD5_CTX *c);
d81 2
a82 2
MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for
success, 0 otherwise.
@


