head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	butholakala:1.1
	openssl_1_0_1_g:1.1.1.1
	OPENBSD_5_5:1.1.0.56
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.52
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.50
	OPENBSD_5_3_BASE:1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.0.46
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.48
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.0.44
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.42
	OPENBSD_4_9_BASE:1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.0.40
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.36
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.38
	OPENBSD_4_6_BASE:1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.0.34
	OPENBSD_4_5_BASE:1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.32
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.30
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.28
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.26
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.24
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.22
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.20
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.1.0.18
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.16
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.14
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.12
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.10
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.8
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.02.14.14.09.01;	author schwarze;	state dead;
branches;
next	1.5;
commitid	uSGRsfGS6ehpZRFi;

1.5
date	2014.07.11.16.18.14;	author miod;	state Exp;
branches;
next	1.4;
commitid	KFr43un1Uq8AaqNL;

1.4
date	2014.07.10.14.14.04;	author miod;	state Exp;
branches;
next	1.3;
commitid	VVoKhghxvV7qSanI;

1.3
date	2014.07.10.13.53.11;	author miod;	state Exp;
branches;
next	1.2;
commitid	kwuftJ7GCMdBJPFx;

1.2
date	2014.05.04.22.26.32;	author jim;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.58.25;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.15;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@second batch of perlpod(1) to mdoc(7) conversion
@
text
@=pod

=head1 NAME

BIO_find_type, BIO_next, BIO_method_type - BIO chain traversal

=head1 SYNOPSIS

 #include <openssl/bio.h>

 BIO *	BIO_find_type(BIO *b,int bio_type);
 BIO *	BIO_next(BIO *b);

 #define BIO_method_type(b)		((b)->method->type)

 #define BIO_TYPE_NONE		0
 #define BIO_TYPE_MEM		(1|0x0400)
 #define BIO_TYPE_FILE		(2|0x0400)

 #define BIO_TYPE_FD		(4|0x0400|0x0100)
 #define BIO_TYPE_SOCKET		(5|0x0400|0x0100)
 #define BIO_TYPE_NULL		(6|0x0400)
 #define BIO_TYPE_SSL		(7|0x0200)
 #define BIO_TYPE_MD		(8|0x0200)
 #define BIO_TYPE_BUFFER		(9|0x0200)
 #define BIO_TYPE_CIPHER		(10|0x0200)
 #define BIO_TYPE_BASE64		(11|0x0200)
 #define BIO_TYPE_CONNECT	(12|0x0400|0x0100)
 #define BIO_TYPE_ACCEPT		(13|0x0400|0x0100)
 #define BIO_TYPE_PROXY_CLIENT	(14|0x0200)
 #define BIO_TYPE_PROXY_SERVER	(15|0x0200)
 #define BIO_TYPE_NBIO_TEST	(16|0x0200)
 #define BIO_TYPE_NULL_FILTER	(17|0x0200)
 #define BIO_TYPE_BER		(18|0x0200)
 #define BIO_TYPE_BIO		(19|0x0400)

 #define BIO_TYPE_DESCRIPTOR	0x0100
 #define BIO_TYPE_FILTER		0x0200
 #define BIO_TYPE_SOURCE_SINK	0x0400

=head1 DESCRIPTION

The BIO_find_type() searches for a BIO of a given type in a chain, starting
at BIO B<b>. If B<type> is a specific type (such as BIO_TYPE_MEM) then a search
is made for a BIO of that type. If B<type> is a general type (such as
B<BIO_TYPE_SOURCE_SINK>) then the next matching BIO of the given general type is
searched for. BIO_find_type() returns the next matching BIO or NULL if none is
found.

Note: not all the B<BIO_TYPE_*> types above have corresponding BIO
implementations.

BIO_next() returns the next BIO in a chain. It can be used to traverse all BIOs
in a chain or used in conjunction with BIO_find_type() to find all BIOs of a
certain type.

BIO_method_type() returns the type of a BIO.

=head1 RETURN VALUES

BIO_find_type() returns a matching BIO or NULL for no match.

BIO_next() returns the next BIO in a chain.

BIO_method_type() returns the type of the BIO B<b>.

=head1 NOTES

BIO_next() was added to OpenSSL 0.9.6 to provide a 'clean' way to traverse a BIO
chain or find multiple matches using BIO_find_type(). Previous versions had to
use:

 next = bio->next_bio;

=head1 BUGS

BIO_find_type() in OpenSSL 0.9.5a and earlier could not be safely passed a
NULL pointer for the B<b> argument.

=head1 EXAMPLE

Traverse a chain looking for digest BIOs:

 BIO *btmp;
 btmp = in_bio;	/* in_bio is chain to search through */

 do {
 	btmp = BIO_find_type(btmp, BIO_TYPE_MD);
	if (btmp == NULL)
		break;	/* Not found */
	/* btmp is a digest BIO, do something with it ...*/
	...

	btmp = BIO_next(btmp);
 } while(btmp);

=cut
@


1.5
log
@Huge documentation update for libcrypto and libssl, mostly from Matt Caswell,
Jeff Trawick, Jean-Paul Calderone, Michal Bozon, Jeffrey Walton and Rich Salz,
via OpenSSL trunk (with some parts not applying to us, such as SSLv2 support,
at least partially removed).
@
text
@@


1.4
log
@Try and fix the horrible coding style of the example code snippets.
@
text
@d5 1
a5 1
BIO_find_type, BIO_next - BIO chain traversal
@


1.3
log
@Remove empty sections and references to des_modes(7) which we don't have.
@
text
@d89 2
a90 1
	if(btmp == NULL) break;	/* Not found */
d92 1
a92 1
   	...
@


1.2
log
@Improve line wrapping for lines exceeding 80 chars.

ok jmc@@
@
text
@d96 1
a96 4

=head1 SEE ALSO

TBA
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d50 2
a51 1
Note: not all the B<BIO_TYPE_*> types above have corresponding BIO implementations.
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@

