head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	butholakala:1.8
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.13
date	2015.11.11.22.14.40;	author jmc;	state Exp;
branches;
next	1.12;
commitid	eNNq8UNxWW0rsWWg;

1.12
date	2015.06.20.01.07.25;	author doug;	state Exp;
branches;
next	1.11;
commitid	odUD1eZ4N02tuzg5;

1.11
date	2014.07.11.16.18.14;	author miod;	state Exp;
branches;
next	1.10;
commitid	KFr43un1Uq8AaqNL;

1.10
date	2014.07.09.17.36.58;	author miod;	state Exp;
branches;
next	1.9;
commitid	brDBcUcQnqLshLYA;

1.9
date	2014.05.04.21.46.36;	author jim;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.13.15.25.34;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.58;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.29.05.39.29;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.16.31.56;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.19;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.58.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.16.04.59.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.15.06.18.47;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.18;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.43.17;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.23;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.14;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@add missing functions to NAME, or otherwise correct the mlink
entry for them;

feedback/ok schwarze
@
text
@=pod

=head1 NAME

EVP_SignInit, EVP_SignUpdate, EVP_SignFinal, EVP_PKEY_size
- EVP signing functions

=head1 SYNOPSIS

 #include <openssl/evp.h>

 int EVP_SignInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
 int EVP_SignUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);
 int EVP_SignFinal(EVP_MD_CTX *ctx,unsigned char *sig,unsigned int *s, EVP_PKEY *pkey);

 void EVP_SignInit(EVP_MD_CTX *ctx, const EVP_MD *type);

 int EVP_PKEY_size(EVP_PKEY *pkey);

=head1 DESCRIPTION

The EVP signature routines are a high level interface to digital
signatures.

EVP_SignInit_ex() sets up signing context B<ctx> to use digest
B<type> from ENGINE B<impl>. B<ctx> must be initialized with
EVP_MD_CTX_init() before calling this function.

EVP_SignUpdate() hashes B<cnt> bytes of data at B<d> into the
signature context B<ctx>. This function can be called several times on the
same B<ctx> to include additional data.

EVP_SignFinal() signs the data in B<ctx> using the private key B<pkey> and
places the signature in B<sig>. B<sig> must be at least EVP_PKEY_size(pkey)
bytes in size. B<s> is an OUT parameter, and not used as an IN parameter.
The number of bytes of data written (i.e. the length of the signature)
will be written to the integer at B<s>, at most EVP_PKEY_size(pkey) bytes
will be written.

EVP_SignInit() initializes a signing context B<ctx> to use the default
implementation of digest B<type>.

EVP_PKEY_size() returns the maximum size of a signature in bytes. The actual
signature returned by EVP_SignFinal() may be smaller.

=head1 RETURN VALUES

EVP_SignInit_ex(), EVP_SignUpdate() and EVP_SignFinal() return 1
for success and 0 for failure.

EVP_PKEY_size() returns the maximum size of a signature in bytes.

The error codes can be obtained by L<ERR_get_error(3)|ERR_get_error(3)>.

=head1 NOTES

The B<EVP> interface to digital signatures should almost always be used in
preference to the low level interfaces. This is because the code then becomes
transparent to the algorithm used and much more flexible.

Due to the link between message digests and public key algorithms the correct
digest algorithm must be used with the correct public key type. A list of
algorithms and associated public key algorithms appears in
L<EVP_DigestInit(3)|EVP_DigestInit(3)>.

The call to EVP_SignFinal() internally finalizes a copy of the digest context.
This means that calls to EVP_SignUpdate() and EVP_SignFinal() can be called
later to digest and sign additional data.

Since only a copy of the digest context is ever finalized the context must
be cleaned up after use by calling EVP_MD_CTX_cleanup() or a memory leak
will occur.

=head1 BUGS

Older versions of this documentation wrongly stated that calls to
EVP_SignUpdate() could not be made after calling EVP_SignFinal().

Since the private key is passed in the call to EVP_SignFinal() any error
relating to the private key (for example an unsuitable key and digest
combination) will not be indicated until after potentially large amounts of
data have been passed through EVP_SignUpdate().

It is not possible to change the signing parameters using these function.

The previous two bugs are fixed in the newer EVP_SignDigest*() function.

=head1 SEE ALSO

L<EVP_VerifyInit(3)|EVP_VerifyInit(3)>,
L<EVP_DigestInit(3)|EVP_DigestInit(3)>, L<err(3)|err(3)>,
L<evp(3)|evp(3)>, L<hmac(3)|hmac(3)>, L<md2(3)|md2(3)>,
L<md5(3)|md5(3)>, L<ripemd(3)|ripemd(3)>,
L<sha(3)|sha(3)>, L<dgst(1)|dgst(1)>

=head1 HISTORY

EVP_SignInit(), EVP_SignUpdate() and EVP_SignFinal() are
available in all versions of SSLeay and OpenSSL.

EVP_SignInit_ex() was added in OpenSSL 0.9.7.

=cut
@


1.12
log
@Remove obsolete MDC-2DES from libcrypto.

ok deraadt@@ jsing@@ miod@@
@
text
@d5 2
a6 1
EVP_SignInit, EVP_SignUpdate, EVP_SignFinal - EVP signing functions
@


1.11
log
@Huge documentation update for libcrypto and libssl, mostly from Matt Caswell,
Jeff Trawick, Jean-Paul Calderone, Michal Bozon, Jeffrey Walton and Rich Salz,
via OpenSSL trunk (with some parts not applying to us, such as SSLv2 support,
at least partially removed).
@
text
@d92 1
a92 1
L<md5(3)|md5(3)>, L<mdc2(3)|mdc2(3)>, L<ripemd(3)|ripemd(3)>,
@


1.10
log
@Remove mention that the PRNG needs to be seeded before invoking some
functions.
@
text
@d33 5
a37 3
places the signature in B<sig>. The number of bytes of data written (i.e. the
length of the signature) will be written to the integer at B<s>, at most
EVP_PKEY_size(pkey) bytes will be written.
@


1.9
log
@Remove trailing whitespace.

fine jmc@@
@
text
@a62 4
When signing with DSA private keys the random number generator must be seeded
or the operation will fail. The random number generator does not need to be
seeded for RSA signatures.

@


1.8
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d35 1
a35 1
EVP_PKEY_size(pkey) bytes will be written. 
d60 1
a60 1
algorithms and associated public key algorithms appears in 
d77 1
a77 1
Older versions of this documentation wrongly stated that calls to 
@


1.7
log
@resolve conflicts, fix local changes
@
text
@d92 4
a95 4
L<EVP_DigestInit(3)|EVP_DigestInit(3)>, L<ERR_get_error(3)|ERR_get_error(3)>,
L<evp(3)|evp(3)>, L<HMAC(3)|HMAC(3)>, L<MD2(3)|MD2(3)>,
L<MD5(3)|MD5(3)>, L<MDC2(3)|MDC2(3)>, L<RIPEMD(3)|RIPEMD(3)>,
L<SHA1(3)|SHA1(3)>, L<digest(1)|digest(1)>
@


1.6
log
@resolve conflicts
@
text
@d80 9
@


1.5
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d32 4
a35 5
EVP_SignFinal() signs the data in B<ctx> using the private key B<pkey>
and places the signature in B<sig>. If the B<s> parameter is not NULL
then the number of bytes of data written (i.e. the length of the signature)
will be written to the integer at B<s>, at most EVP_PKEY_size(pkey) bytes
will be written. 
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d94 1
a94 1
EVP_SignInit_ex() was added in OpenSSL 0.9.7
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d11 4
a15 2
 void EVP_SignUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);
 int EVP_SignFinal(EVP_MD_CTX *ctx,unsigned char *sig,unsigned int *s, EVP_PKEY *pkey);
d24 3
a26 3
EVP_SignInit() initializes a signing context B<ctx> to using digest
B<type>: this will typically be supplied by a function such as
EVP_sha1().
d36 4
a39 3
will be written.  After calling EVP_SignFinal() no additional calls to
EVP_SignUpdate() can be made, but EVP_SignInit() can be called to initialize
a new signature operation.
d46 2
a47 3
EVP_SignInit() and EVP_SignUpdate() do not return values.

EVP_SignFinal() returns 1 for success and 0 for failure.
d68 8
d78 2
a79 3
Several of the functions do not return values: maybe they should. Although the
internal digest operations will never fail some future hardware based operations
might.
d93 2
@


1.2
log
@link to correct renamed pages
@
text
@d22 1
a22 1
EVP_SignInit() initialises a signing context B<ctx> to using digest
d27 1
a27 1
signature context B<ctx>. This funtion can be called several times on the
d35 1
a35 1
EVP_SignUpdate() can be made, but EVP_SignInit() can be called to initialiase
@


1.1
log
@OpenSSL 0.9.5a merge
@
text
@d75 4
a78 4
L<EVP_DigestInit(3)|EVP_DigestInit(3)>, L<err(3)|err(3)>,
L<evp(3)|evp(3)>, L<hmac(3)|hmac(3)>, L<md2(3)|md2(3)>,
L<md5(3)|md5(3)>, L<mdc2(3)|mdc2(3)>, L<ripemd(3)|ripemd(3)>,
L<sha(3)|sha(3)>, L<digest(1)|digest(1)>
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d11 2
a12 2
 int EVP_SignInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
 int EVP_SignUpdate(EVP_MD_CTX *ctx, const void *d, unsigned int cnt);
a14 2
 void EVP_SignInit(EVP_MD_CTX *ctx, const EVP_MD *type);

d22 3
a24 3
EVP_SignInit_ex() sets up signing context B<ctx> to use digest
B<type> from ENGINE B<impl>. B<ctx> must be initialized with
EVP_MD_CTX_init() before calling this function.
d27 1
a27 1
signature context B<ctx>. This function can be called several times on the
d34 3
a36 4
will be written. 

EVP_SignInit() initializes a signing context B<ctx> to use the default
implementation of digest B<type>.
d43 3
a45 2
EVP_SignInit_ex(), EVP_SignUpdate() and EVP_SignFinal() return 1
for success and 0 for failure.
a65 8
The call to EVP_SignFinal() internally finalizes a copy of the digest context.
This means that calls to EVP_SignUpdate() and EVP_SignFinal() can be called
later to digest and sign additional data.

Since only a copy of the digest context is ever finalized the context must
be cleaned up after use by calling EVP_MD_CTX_cleanup() or a memory leak
will occur.

d68 3
a70 2
Older versions of this documentation wrongly stated that calls to 
EVP_SignUpdate() could not be made after calling EVP_SignFinal().
a83 2

EVP_SignInit_ex() was added in OpenSSL 0.9.7
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d87 1
a87 1
L<sha(3)|sha(3)>, L<dgst(1)|dgst(1)>
d94 1
a94 1
EVP_SignInit_ex() was added in OpenSSL 0.9.7.
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d32 5
a36 4
EVP_SignFinal() signs the data in B<ctx> using the private key B<pkey> and
places the signature in B<sig>. The number of bytes of data written (i.e. the
length of the signature) will be written to the integer at B<s>, at most
EVP_PKEY_size(pkey) bytes will be written. 
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a79 9
Since the private key is passed in the call to EVP_SignFinal() any error
relating to the private key (for example an unsuitable key and digest
combination) will not be indicated until after potentially large amounts of
data have been passed through EVP_SignUpdate().

It is not possible to change the signing parameters using these function.

The previous two bugs are fixed in the newer EVP_SignDigest*() function.

@


