head	1.5;
access;
symbols
	butholakala:1.3
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.3.0.60
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.56
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.54
	OPENBSD_5_3_BASE:1.3
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.3.0.50
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.52
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.3.0.48
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.46
	OPENBSD_4_9_BASE:1.3
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.3.0.44
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.40
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.42
	OPENBSD_4_6_BASE:1.3
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.3.0.38
	OPENBSD_4_5_BASE:1.3
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.3
	OPENBSD_4_4:1.3.0.36
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.34
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.32
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.30
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.28
	OPENBSD_4_0_BASE:1.3
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.16.18.35.15;	author tedu;	state dead;
branches;
next	1.4;

1.4
date	2014.04.13.20.37.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.12.25;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.36.56;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.14;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.05;	author markus;	state Exp;
branches;
next	;


desc
@@


1.5
log
@quoth the readme:
NOTE: Don't expect any of these programs to work with current
OpenSSL releases, or even with later SSLeay releases.
ok miod
@
text
@/* NOCW */
/* cc -o ssdemo -I../include selfsign.c ../libcrypto.a */

#include <stdio.h>
#include <stdlib.h>

#include <openssl/pem.h>
#include <openssl/conf.h>
#include <openssl/x509v3.h>

int mkit(X509 **x509p, EVP_PKEY **pkeyp, int bits, int serial, int days);

int main()
	{
	BIO *bio_err;
	X509 *x509=NULL;
	EVP_PKEY *pkey=NULL;

	CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);

	bio_err=BIO_new_fp(stderr, BIO_NOCLOSE);

	mkit(&x509,&pkey,512,0,365);

	RSA_print_fp(stdout,pkey->pkey.rsa,0);
	X509_print_fp(stdout,x509);

	PEM_write_PrivateKey(stdout,pkey,NULL,NULL,0,NULL, NULL);
	PEM_write_X509(stdout,x509);

	X509_free(x509);
	EVP_PKEY_free(pkey);

#ifdef CUSTOM_EXT
	/* Only needed if we add objects or custom extensions */
	X509V3_EXT_cleanup();
	OBJ_cleanup();
#endif

	CRYPTO_mem_leaks(bio_err);
	BIO_free(bio_err);
	return(0);
	}

static void callback(p, n, arg)
int p;
int n;
void *arg;
	{
	char c='B';

	if (p == 0) c='.';
	if (p == 1) c='+';
	if (p == 2) c='*';
	if (p == 3) c='\n';
	fputc(c,stderr);
	}

int mkit(x509p,pkeyp,bits,serial,days)
X509 **x509p;
EVP_PKEY **pkeyp;
int bits;
int serial;
int days;
	{
	X509 *x;
	EVP_PKEY *pk;
	RSA *rsa;
	X509_NAME *name=NULL;
	X509_NAME_ENTRY *ne=NULL;
	X509_EXTENSION *ex=NULL;

	
	if ((pkeyp == NULL) || (*pkeyp == NULL))
		{
		if ((pk=EVP_PKEY_new()) == NULL)
			{
			abort(); 
			return(0);
			}
		}
	else
		pk= *pkeyp;

	if ((x509p == NULL) || (*x509p == NULL))
		{
		if ((x=X509_new()) == NULL)
			goto err;
		}
	else
		x= *x509p;

	rsa=RSA_generate_key(bits,RSA_F4,callback,NULL);
	if (!EVP_PKEY_assign_RSA(pk,rsa))
		{
		abort();
		goto err;
		}
	rsa=NULL;

	X509_set_version(x,3);
	ASN1_INTEGER_set(X509_get_serialNumber(x),serial);
	X509_gmtime_adj(X509_get_notBefore(x),0);
	X509_gmtime_adj(X509_get_notAfter(x),(long)60*60*24*days);
	X509_set_pubkey(x,pk);

	name=X509_get_subject_name(x);

	/* This function creates and adds the entry, working out the
	 * correct string type and performing checks on its length.
	 * Normally we'd check the return value for errors...
	 */
	X509_NAME_add_entry_by_txt(name,"C",
				MBSTRING_ASC, "UK", -1, -1, 0);
	X509_NAME_add_entry_by_txt(name,"CN",
				MBSTRING_ASC, "OpenSSL Group", -1, -1, 0);

	X509_set_issuer_name(x,name);

	/* Add extension using V3 code: we can set the config file as NULL
	 * because we wont reference any other sections. We can also set
         * the context to NULL because none of these extensions below will need
	 * to access it.
	 */

	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_cert_type, "server");
	X509_add_ext(x,ex,-1);
	X509_EXTENSION_free(ex);

	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_comment,
						"example comment extension");
	X509_add_ext(x,ex,-1);
	X509_EXTENSION_free(ex);

	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_ssl_server_name,
							"www.openssl.org");

	X509_add_ext(x,ex,-1);
	X509_EXTENSION_free(ex);

#if 0
	/* might want something like this too.... */
	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_basic_constraints,
							"critical,CA:TRUE");


	X509_add_ext(x,ex,-1);
	X509_EXTENSION_free(ex);
#endif

#ifdef CUSTOM_EXT
	/* Maybe even add our own extension based on existing */
	{
		int nid;
		nid = OBJ_create("1.2.3.4", "MyAlias", "My Test Alias Extension");
		X509V3_EXT_add_alias(nid, NID_netscape_comment);
		ex = X509V3_EXT_conf_nid(NULL, NULL, nid,
						"example comment alias");
		X509_add_ext(x,ex,-1);
		X509_EXTENSION_free(ex);
	}
#endif
	
	if (!X509_sign(x,pk,EVP_md5()))
		goto err;

	*x509p=x;
	*pkeyp=pk;
	return(1);
err:
	return(0);
	}
@


1.4
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d45 1
a45 9
#ifdef WIN16
#  define MS_CALLBACK   _far _loadds
#  define MS_FAR        _far
#else
#  define MS_CALLBACK
#  define MS_FAR
#endif

static void MS_CALLBACK callback(p, n, arg)
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d21 1
a21 4
	X509V3_add_standard_extensions();

	if ((bio_err=BIO_new(BIO_s_file())) != NULL)
		BIO_set_fp(bio_err,stderr,BIO_NOCLOSE);
d28 1
a28 1
	PEM_write_RSAPrivateKey(stdout,pkey->pkey.rsa,NULL,NULL,0,NULL);
a32 1
	BIO_free(bio_err);
d34 2
d37 2
d41 1
d115 1
a115 1
	name=X509_NAME_new();
d117 8
a124 7
	ne=X509_NAME_ENTRY_create_by_NID(NULL,NID_countryName,
		V_ASN1_APP_CHOOSE,"AU",-1);
	X509_NAME_add_entry(name,ne,0,0);

	X509_NAME_ENTRY_create_by_NID(&ne,NID_commonName,
		V_ASN1_APP_CHOOSE,"Eric Young",-1);
	X509_NAME_add_entry(name,ne,1,0);
a125 4
	/* finished with structure */
	X509_NAME_ENTRY_free(ne);

	X509_set_subject_name(x,name);
a127 3
	/* finished with structure */
	X509_NAME_free(name);

d136 1
d141 1
d147 1
d156 14
@


1.1
log
@Initial revision
@
text
@d7 3
a9 7
#include "buffer.h"
#include "crypto.h"
#include "objects.h"
#include "asn1.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"
d21 1
a21 1
	X509v3_add_netscape_extensions();
d38 1
a38 1
	X509_cleanup_extensions();
d52 1
a52 1
static void MS_CALLBACK callback(p, n)
d55 1
a75 1
	char *s;
a78 1
	ASN1_OCTET_STRING *data=NULL;
d100 1
a100 1
	rsa=RSA_generate_key(bits,RSA_F4,callback);
d133 11
a143 3
	data=X509v3_pack_string(NULL,V_ASN1_BIT_STRING,
		"\001",1);
	ex=X509_EXTENSION_create_by_NID(NULL,NID_netscape_cert_type,0,data);
d146 3
a148 3
	X509v3_pack_string(&data,V_ASN1_IA5STRING,
		"example comment extension",-1);
	X509_EXTENSION_create_by_NID(&ex,NID_netscape_comment,0,data);
d151 6
a156 3
	X509v3_pack_string(&data,V_ASN1_BIT_STRING,
		"www.cryptsoft.com",-1);
	X509_EXTENSION_create_by_NID(&ex,NID_netscape_ssl_server_name,0,data);
d158 1
a159 3
	X509_EXTENSION_free(ex);
	ASN1_OCTET_STRING_free(data);

a168 4
			 



@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d7 7
a13 3
#include <openssl/pem.h>
#include <openssl/conf.h>
#include <openssl/x509v3.h>
d25 4
a28 1
	bio_err=BIO_new_fp(stderr, BIO_NOCLOSE);
d35 1
a35 1
	PEM_write_PrivateKey(stdout,pkey,NULL,NULL,0,NULL, NULL);
d40 1
d42 1
a42 5
#ifdef CUSTOM_EXT
	/* Only needed if we add objects or custom extensions */
	X509V3_EXT_cleanup();
	OBJ_cleanup();
#endif
a44 1
	BIO_free(bio_err);
d56 1
a56 1
static void MS_CALLBACK callback(p, n, arg)
a58 1
void *arg;
d79 1
d83 1
d105 1
a105 1
	rsa=RSA_generate_key(bits,RSA_F4,callback,NULL);
d119 9
a127 1
	name=X509_get_subject_name(x);
d129 2
a130 8
	/* This function creates and adds the entry, working out the
	 * correct string type and performing checks on its length.
	 * Normally we'd check the return value for errors...
	 */
	X509_NAME_add_entry_by_txt(name,"C",
				MBSTRING_ASC, "UK", -1, -1, 0);
	X509_NAME_add_entry_by_txt(name,"CN",
				MBSTRING_ASC, "OpenSSL Group", -1, -1, 0);
d132 1
d135 2
a136 5
	/* Add extension using V3 code: we can set the config file as NULL
	 * because we wont reference any other sections. We can also set
         * the context to NULL because none of these extensions below will need
	 * to access it.
	 */
d138 3
a140 1
	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_cert_type, "server");
a141 1
	X509_EXTENSION_free(ex);
d143 3
a145 2
	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_comment,
						"example comment extension");
a146 4
	X509_EXTENSION_free(ex);

	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_netscape_ssl_server_name,
							"www.openssl.org");
d148 3
d152 1
d154 1
a155 23
#if 0
	/* might want something like this too.... */
	ex = X509V3_EXT_conf_nid(NULL, NULL, NID_basic_constraints,
							"critical,CA:TRUE");


	X509_add_ext(x,ex,-1);
	X509_EXTENSION_free(ex);
#endif

#ifdef CUSTOM_EXT
	/* Maybe even add our own extension based on existing */
	{
		int nid;
		nid = OBJ_create("1.2.3.4", "MyAlias", "My Test Alias Extension");
		X509V3_EXT_add_alias(nid, NID_netscape_comment);
		ex = X509V3_EXT_conf_nid(NULL, NULL, nid,
						"example comment alias");
		X509_add_ext(x,ex,-1);
		X509_EXTENSION_free(ex);
	}
#endif
	
d165 4
@

