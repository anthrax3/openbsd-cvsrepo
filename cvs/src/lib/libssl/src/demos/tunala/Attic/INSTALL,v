head	1.2;
access;
symbols
	butholakala:1.1
	openssl_1_0_1_g:1.1.1.1
	OPENBSD_5_5:1.1.0.50
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.46
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.44
	OPENBSD_5_3_BASE:1.1
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.1.0.40
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.42
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.1.0.38
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.36
	OPENBSD_4_9_BASE:1.1
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.1.0.34
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.30
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.32
	OPENBSD_4_6_BASE:1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.04.16.18.35.15;	author tedu;	state dead;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.18;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.07;	author markus;	state Exp;
branches;
next	;


desc
@@


1.2
log
@quoth the readme:
NOTE: Don't expect any of these programs to work with current
OpenSSL releases, or even with later SSLeay releases.
ok miod
@
text
@There are two ways to build this code;

(1) Manually

(2) Using all-singing all-dancing (all-confusing) autotools, ie. autoconf,
automake, and their little friends (autoheader, etc).

=================
Building Manually
=================

There is a basic "Makefile" in this directory that gets moved out of the way and
ignored when building with autoconf et al. This Makefile is suitable for
building tunala on Linux using gcc. Any other platform probably requires some
tweaking. Here are the various bits you might need to do if you want to build
this way and the default Makefile isn't sufficient;

* Compiler: Edit the "CC" definition in Makefile

* Headers, features: tunala.h controls what happens in the non-autoconf world.
  It, by default, assumes the system has *everything* (except autoconf's
  "config.h") so if a target system is missing something it must define the
  appropriate "NO_***" symbols in CFLAGS. These include;

  - NO_HAVE_UNISTD_H, NO_HAVE_FCNTL_H, NO_HAVE_LIMITS_H
    Indicates the compiling system doesn't have (or need) these header files.
  - NO_HAVE_STRSTR, NO_HAVE_STRTOUL
    Indicates the compiling system doesn't have these functions. Replacements
    are compiled and used in breakage.c
  - NO_HAVE_SELECT, NO_HAVE_SOCKET
    Pointless symbols - these indicate select() and/or socket() are missing in
    which case the program won't compile anyway.

  If you want to specify any of these, add them with "-D" prefixed to each in
  the CFLAGS definition in Makefile.

* Compilation flags: edit DEBUG_FLAGS and/or CFLAGS directly to control the
  flags passed to the compiler. This can also be used to change the degree of
  optimisation.

* Linker flags: some systems (eg. Solaris) require extra linker flags such as;
  -ldl, -lsocket, -lnsl, etc. If unsure, bring up the man page for whichever
  function is "undefined" when the linker fails - that usually indicates what
  you need to add. Make changes to the LINK_FLAGS symbol.

* Linker command: if a different linker syntax or even a different program is
  required to link, edit the linker line directly in the "tunala:" target
  definition - it currently assumes the "CC" (compiler) program is used to link.

======================
Building Automagically
======================

Automagic building is handled courtesy of autoconf, automake, etc. There are in
fact two steps required to build, and only the first has to be done on a system
with these tools installed (and if I was prepared to bloat out the CVS
repository, I could store these extra files, but I'm not).

First step: "autogunk.sh"
-------------------------

The "./autogunk.sh" script will call all the necessary autotool commands to
create missing files and run automake and autoconf. The result is that a
"./configure" script should be generated and a "Makefile.in" generated from the
supplied "Makefile.am". NB: This script also moves the "manual" Makefile (see
above) out of the way and calls it "Makefile.plain" - the "ungunk" script
reverses this to leave the directory it was previously.

Once "ungunk" has been run, the resulting directory should be able to build on
other systems without autoconf, automake, or libtool. Which is what the second
step describes;

Second step: "./configure"
--------------------------

The second step is to run the generated "./configure" script to create a
config.h header for your system and to generate a "Makefile" (generated from
"Makefile.in") tweaked to compile on your system. This is the standard sort of
thing you see in GNU packages, for example, and the standard tricks also work.
Eg. to override "configure"'s choice of compiler, set the CC environment
variable prior to running configure, eg.

    CC=gcc ./configure

would cause "gcc" to be used even if there is an otherwise preferable (to
autoconf) native compiler on your system.

After this run "make" and it should build the "tunala" executable.

Notes
-----

- Some versions of autoconf (or automake?) generate a Makefile syntax that gives
  trouble to some "make" programs on some systems (eg. OpenBSD). If this
  happens, either build 'Manually' (see above) or use "gmake" instead of "make".
  I don't like this either but like even less the idea of sifting into all the
  script magic crud that's involved.

- On a solaris system I tried, the "configure" script specified some broken
  compiler flags in the resulting Makefile that don't even get echoed to
  stdout/err when the error happens (evil!). If this happens, go into the
  generated Makefile, find the two affected targets ("%.o:" and "%.lo"), and
  remove the offending hidden option in the $(COMPILE) line all the sludge after
  the two first lines of script (ie. after the "echo" and the "COMPILE" lines).
  NB: This will probably only function if "--disable-shared" was used, otherwise
  who knows what would result ...

@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@

