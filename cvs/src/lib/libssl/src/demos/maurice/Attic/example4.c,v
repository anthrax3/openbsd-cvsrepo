head	1.3;
access;
symbols
	butholakala:1.2
	openssl_1_0_1_g:1.1.1.2
	OPENBSD_5_5:1.2.0.62
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.58
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.56
	OPENBSD_5_3_BASE:1.2
	openssl_1_0_1_c:1.1.1.2
	OPENBSD_5_2:1.2.0.52
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.54
	openssl_1_0_0_f:1.1.1.2
	openssl_1_0_0_e:1.1.1.2
	OPENBSD_5_0:1.2.0.50
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.48
	OPENBSD_4_9_BASE:1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.2.0.46
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.42
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.44
	OPENBSD_4_6_BASE:1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.2.0.40
	OPENBSD_4_5_BASE:1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.2
	OPENBSD_4_4:1.2.0.38
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.36
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.34
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.32
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.30
	OPENBSD_4_0_BASE:1.2
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.2.0.28
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.26
	OPENBSD_3_8_BASE:1.2
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.2.0.24
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.22
	OPENBSD_3_6_BASE:1.2
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.2.0.20
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.18
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.04.16.18.35.15;	author tedu;	state dead;
branches;
next	1.2;

1.2
date	99.09.29.04.36.57;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.15;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.15;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.51.06;	author markus;	state Exp;
branches;
next	;


desc
@@


1.3
log
@quoth the readme:
NOTE: Don't expect any of these programs to work with current
OpenSSL releases, or even with later SSLeay releases.
ok miod
@
text
@/* NOCW */
/*
        Please read the README file for condition of use, before
        using this software.

        Maurice Gittens  <mgittens@@gits.nl>   January 1997

*/

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <openssl/evp.h>

#define STDIN     	0
#define STDOUT    	1
#define BUFLEN	  	512 

static const char *usage = "Usage: example4 [-d]\n";

void do_encode(void);
void do_decode(void);

int main(int argc, char *argv[])
{
	if ((argc == 1))	
	{
		do_encode();
	}	
	else if ((argc == 2) && !strcmp(argv[1],"-d"))
	{
		do_decode();
	}
	else
	{
		fprintf(stderr,"%s", usage);
		exit(1);
	}

	return 0;		
}

void do_encode()
{
	char buf[BUFLEN];
	char ebuf[BUFLEN+24];
	unsigned int ebuflen;
	EVP_ENCODE_CTX ectx;
        
	EVP_EncodeInit(&ectx);

	while(1)
	{
		int readlen = read(STDIN, buf, sizeof(buf));
	
		if (readlen <= 0)
		{
			if (!readlen)
			   break;
			else
			{
				perror("read");
				exit(1);
			}
		}

		EVP_EncodeUpdate(&ectx, ebuf, &ebuflen, buf, readlen);

		write(STDOUT, ebuf, ebuflen);
	}

        EVP_EncodeFinal(&ectx, ebuf, &ebuflen); 

	write(STDOUT, ebuf, ebuflen);
}

void do_decode()
{
 	char buf[BUFLEN];
 	char ebuf[BUFLEN+24];
	unsigned int ebuflen;
	EVP_ENCODE_CTX ectx;
        
	EVP_DecodeInit(&ectx);

	while(1)
	{
		int readlen = read(STDIN, buf, sizeof(buf));
		int rc;	
	
		if (readlen <= 0)
		{
			if (!readlen)
			   break;
			else
			{
				perror("read");
				exit(1);
			}
		}

		rc = EVP_DecodeUpdate(&ectx, ebuf, &ebuflen, buf, readlen);
		if (rc <= 0)
		{
			if (!rc)
			{
				write(STDOUT, ebuf, ebuflen);
				break;
			}

			fprintf(stderr, "Error: decoding message\n");
			return;
		}

		write(STDOUT, ebuf, ebuflen);
	}

        EVP_DecodeFinal(&ectx, ebuf, &ebuflen); 

	write(STDOUT, ebuf, ebuflen); 
}

@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d11 1
d14 1
a14 1
#include <evp.h>
d48 1
a48 1
	unsigned int ebuflen, rc;
d82 1
a82 1
	unsigned int ebuflen, rc;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a10 1
#include <unistd.h>
d13 1
a13 1
#include <openssl/evp.h>
d47 1
a47 1
	unsigned int ebuflen;
d81 1
a81 1
	unsigned int ebuflen;
@

