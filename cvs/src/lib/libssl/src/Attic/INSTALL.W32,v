head	1.15;
access;
symbols
	butholakala:1.14
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.13.0.12
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.15
date	2014.04.13.16.13.01;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2014.04.13.15.25.20;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.03.02.34.28;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2010.10.01.22.58.41;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.29.05.39.10;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.11.22.15.18;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.34;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.10.16.31.53;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.03.21.43.59;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.08;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.56.50;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.07.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.10;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.25;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.33.19;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.13;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.10.06;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.36.57;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.37;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.00;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2011.11.03.02.32.05;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.29;	author miod;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Irrelevant.
@
text
@ 
 INSTALLATION ON THE WIN32 PLATFORM
 ----------------------------------

 [Instructions for building for Windows CE can be found in INSTALL.WCE]
 [Instructions for building for Win64 can be found in INSTALL.W64]

 Here are a few comments about building OpenSSL for Win32 environments,
 such as Windows NT and Windows 9x. It should be noted though that
 Windows 9x are not ordinarily tested. Its mention merely means that we
 attempt to maintain certain programming discipline and pay attention
 to backward compatibility issues, in other words it's kind of expected
 to work on Windows 9x, but no regression tests are actually performed.

 On additional note newer OpenSSL versions are compiled and linked with
 Winsock 2. This means that minimum OS requirement was elevated to NT 4
 and Windows 98 [there is Winsock 2 update for Windows 95 though].

 - you need Perl for Win32.  Unless you will build on Cygwin, you will need
   ActiveState Perl, available from http://www.activestate.com/ActivePerl.

 - one of the following C compilers:

  * Visual C++
  * Borland C
  * GNU C (Cygwin or MinGW)

- Netwide Assembler, a.k.a. NASM, available from http://nasm.sourceforge.net/
  is required if you intend to utilize assembler modules. Note that NASM
  is now the only supported assembler.

 If you are compiling from a tarball or a Git snapshot then the Win32 files
 may well be not up to date. This may mean that some "tweaking" is required to
 get it all to work. See the trouble shooting section later on for if (when?)
 it goes wrong.

 Visual C++
 ----------

 If you want to compile in the assembly language routines with Visual
 C++, then you will need already mentioned Netwide Assembler binary,
 nasmw.exe or nasm.exe, to be available on your %PATH%.

 Firstly you should run Configure with platform VC-WIN32:

 > perl Configure VC-WIN32 --prefix=c:\some\openssl\dir

 Where the prefix argument specifies where OpenSSL will be installed to.

 Next you need to build the Makefiles and optionally the assembly
 language files:

 - If you are using NASM then run:

   > ms\do_nasm

 - If you don't want to use the assembly language files at all then run:

   > perl Configure VC-WIN32 no-asm --prefix=c:/some/openssl/dir
   > ms\do_ms

 If you get errors about things not having numbers assigned then check the
 troubleshooting section: you probably won't be able to compile it as it
 stands.

 Then from the VC++ environment at a prompt do:

 > nmake -f ms\ntdll.mak

 If all is well it should compile and you will have some DLLs and
 executables in out32dll. If you want to try the tests then do:
 
 > nmake -f ms\ntdll.mak test


 To install OpenSSL to the specified location do:

 > nmake -f ms\ntdll.mak install

 Tweaks:

 There are various changes you can make to the Win32 compile
 environment. By default the library is not compiled with debugging
 symbols. If you use the platform debug-VC-WIN32 instead of VC-WIN32
 then debugging symbols will be compiled in.

 By default in 1.0.0 OpenSSL will compile builtin ENGINES into the
 separate shared librariesy. If you specify the "enable-static-engine"
 option on the command line to Configure the shared library build
 (ms\ntdll.mak) will compile the engines into libeay32.dll instead.

 The default Win32 environment is to leave out any Windows NT specific
 features.

 If you want to enable the NT specific features of OpenSSL (currently
 only the logging BIO) follow the instructions above but call the batch
 file do_nt.bat instead of do_ms.bat.

 You can also build a static version of the library using the Makefile
 ms\nt.mak


 Borland C++ builder 5
 ---------------------

 * Configure for building with Borland Builder:
   > perl Configure BC-32

 * Create the appropriate makefile
   > ms\do_nasm

 * Build
   > make -f ms\bcb.mak

 Borland C++ builder 3 and 4
 ---------------------------

 * Setup PATH. First must be GNU make then bcb4/bin 

 * Run ms\bcb4.bat

 * Run make:
   > make -f bcb.mak

 GNU C (Cygwin)
 --------------

 Cygwin implements a Posix/Unix runtime system (cygwin1.dll) on top of
 Win32 subsystem and provides a bash shell and GNU tools environment.
 Consequently, a make of OpenSSL with Cygwin is virtually identical to
 Unix procedure. It is also possible to create Win32 binaries that only
 use the Microsoft C runtime system (msvcrt.dll or crtdll.dll) using
 MinGW. MinGW can be used in the Cygwin development environment or in a
 standalone setup as described in the following section.

 To build OpenSSL using Cygwin:

 * Install Cygwin (see http://cygwin.com/)

 * Install Perl and ensure it is in the path. Both Cygwin perl
   (5.6.1-2 or newer) and ActivePerl work.

 * Run the Cygwin bash shell

 * $ tar zxvf openssl-x.x.x.tar.gz
   $ cd openssl-x.x.x

   To build the Cygwin version of OpenSSL:

   $ ./config
   [...]
   $ make
   [...]
   $ make test
   $ make install

   This will create a default install in /usr/local/ssl.

   To build the MinGW version (native Windows) in Cygwin:

   $ ./Configure mingw
   [...]
   $ make
   [...]
   $ make test
   $ make install

 Cygwin Notes:

 "make test" and normal file operations may fail in directories
 mounted as text (i.e. mount -t c:\somewhere /home) due to Cygwin
 stripping of carriage returns. To avoid this ensure that a binary
 mount is used, e.g. mount -b c:\somewhere /home.

 "bc" is not provided in older Cygwin distribution.  This causes a
 non-fatal error in "make test" but is otherwise harmless.  If
 desired and needed, GNU bc can be built with Cygwin without change.

 GNU C (MinGW/MSYS)
 -------------

 * Compiler and shell environment installation:

   MinGW and MSYS are available from http://www.mingw.org/, both are
   required. Run the installers and do whatever magic they say it takes
   to start MSYS bash shell with GNU tools on its PATH.

   N.B. Since source tar-ball can contain symbolic links, it's essential
   that you use accompanying MSYS tar to unpack the source. It will
   either handle them in one way or another or fail to extract them,
   which does the trick too. Latter means that you may safely ignore all
   "cannot create symlink" messages, as they will be "re-created" at
   configure stage by copying corresponding files. Alternative programs
   were observed to create empty files instead, which results in build
   failure.

 * Compile OpenSSL:

   $ ./config
   [...]
   $ make
   [...]
   $ make test

   This will create the library and binaries in root source directory
   and openssl.exe application in apps directory.

   It is also possible to cross-compile it on Linux by configuring
   with './Configure --cross-compile-prefix=i386-mingw32- mingw ...'.
   'make test' is naturally not applicable then.

   libcrypto.a and libssl.a are the static libraries. To use the DLLs,
   link with libeay32.a and libssl32.a instead.

   See troubleshooting if you get error messages about functions not
   having a number assigned.

 Installation
 ------------

 If you used the Cygwin procedure above, you have already installed and
 can skip this section.  For all other procedures, there's currently no real
 installation procedure for Win32.  There are, however, some suggestions:

    - do nothing.  The include files are found in the inc32/ subdirectory,
      all binaries are found in out32dll/ or out32/ depending if you built
      dynamic or static libraries.

    - do as is written in INSTALL.Win32 that comes with modssl:

	$ md c:\openssl 
	$ md c:\openssl\bin
	$ md c:\openssl\lib
	$ md c:\openssl\include
	$ md c:\openssl\include\openssl
	$ copy /b inc32\openssl\*       c:\openssl\include\openssl
	$ copy /b out32dll\ssleay32.lib c:\openssl\lib
	$ copy /b out32dll\libeay32.lib c:\openssl\lib
	$ copy /b out32dll\ssleay32.dll c:\openssl\bin
	$ copy /b out32dll\libeay32.dll c:\openssl\bin
	$ copy /b out32dll\openssl.exe  c:\openssl\bin

      Of course, you can choose another device than c:.  C: is used here
      because that's usually the first (and often only) harddisk device.
      Note: in the modssl INSTALL.Win32, p: is used rather than c:.


 Troubleshooting
 ---------------

 Since the Win32 build is only occasionally tested it may not always compile
 cleanly.  If you get an error about functions not having numbers assigned
 when you run ms\do_ms then this means the Win32 ordinal files are not up to
 date. You can do:

 > perl util\mkdef.pl crypto ssl update

 then ms\do_XXX should not give a warning any more. However the numbers that
 get assigned by this technique may not match those that eventually get
 assigned in the Git tree: so anything linked against this version of the
 library may need to be recompiled.

 If you get errors about unresolved symbols there are several possible
 causes.

 If this happens when the DLL is being linked and you have disabled some
 ciphers then it is possible the DEF file generator hasn't removed all
 the disabled symbols: the easiest solution is to edit the DEF files manually
 to delete them. The DEF files are ms\libeay32.def ms\ssleay32.def.

 Another cause is if you missed or ignored the errors about missing numbers
 mentioned above.

 If you get warnings in the code then the compilation will halt.

 The default Makefile for Win32 halts whenever any warnings occur. Since VC++
 has its own ideas about warnings which don't always match up to other
 environments this can happen. The best fix is to edit the file with the
 warning in and fix it. Alternatively you can turn off the halt on warnings by
 editing the CFLAG line in the Makefile and deleting the /WX option.

 You might get compilation errors. Again you will have to fix these or report
 them.

 One final comment about compiling applications linked to the OpenSSL library.
 If you don't use the multithreaded DLL runtime library (/MD option) your
 program will almost certainly crash because malloc gets confused -- the
 OpenSSL DLLs are statically linked to one version, the application must
 not use a different one.  You might be able to work around such problems
 by adding CRYPTO_malloc_init() to your program before any calls to the
 OpenSSL libraries: This tells the OpenSSL libraries to use the same
 malloc(), free() and realloc() as the application.  However there are many
 standard library functions used by OpenSSL that call malloc() internally
 (e.g. fopen()), and OpenSSL cannot change these; so in general you cannot
 rely on CRYPTO_malloc_init() solving your problem, and you should
 consistently use the multithreaded library.

 Linking your application
 ------------------------

 If you link with static OpenSSL libraries [those built with ms/nt.mak],
 then you're expected to additionally link your application with
 WS2_32.LIB, ADVAPI32.LIB, GDI32.LIB and USER32.LIB. Those developing
 non-interactive service applications might feel concerned about linking
 with the latter two, as they are justly associated with interactive
 desktop, which is not available to service processes. The toolkit is
 designed to detect in which context it's currently executed, GUI,
 console app or service, and act accordingly, namely whether or not to
 actually make GUI calls. Additionally those who wish to
 /DELAYLOAD:GDI32.DLL and /DELAYLOAD:USER32.DLL and actually keep them
 off service process should consider implementing and exporting from
 .exe image in question own _OPENSSL_isservice not relying on USER32.DLL.
 E.g., on Windows Vista and later you could:

	__declspec(dllexport) __cdecl BOOL _OPENSSL_isservice(void)
	{   DWORD sess;
	    if (ProcessIdToSessionId(GetCurrentProcessId(),&sess))
	        return sess==0;
	    return FALSE;
	}

 If you link with OpenSSL .DLLs, then you're expected to include into
 your application code small "shim" snippet, which provides glue between
 OpenSSL BIO layer and your compiler run-time. Look up OPENSSL_Applink
 reference page for further details.
@


1.14
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@@


1.13
log
@openssl-1.0.0e: resolve conflicts
@
text
@d32 1
a32 1
 If you are compiling from a tarball or a CVS snapshot then the Win32 files
d260 1
a260 1
 assigned in the CVS tree: so anything linked against this version of the
@


1.12
log
@resolve conflicts, fix local changes
@
text
@d188 9
d309 12
a320 1
 actually make GUI calls.
@


1.11
log
@resolve conflicts
@
text
@d8 10
a17 3
 Heres a few comments about building OpenSSL in Windows environments.  Most
 of this is tested on Win32 but it may also work in Win 3.1 with some
 modification.
d19 2
a20 2
 You need Perl for Win32.  Unless you will build on Cygwin, you will need
 ActiveState Perl, available from http://www.activestate.com/ActivePerl.
d22 1
a22 1
 and one of the following C compilers:
d28 4
d40 3
a42 22
 If you want to compile in the assembly language routines with Visual C++ then
 you will need an assembler. This is worth doing because it will result in
 faster code: for example it will typically result in a 2 times speedup in the
 RSA routines. Currently the following assemblers are supported:

  * Microsoft MASM (aka "ml")
  * Free Netwide Assembler NASM.

 MASM is distributed with most versions of VC++. For the versions where it is
 not included in VC++, it is also distributed with some Microsoft DDKs, for
 example the Windows NT 4.0 DDK and the Windows 98 DDK. If you do not have
 either of these DDKs then you can just download the binaries for the Windows
 98 DDK and extract and rename the two files XXXXXml.exe and XXXXXml.err, to
 ml.exe and ml.err and install somewhere on your PATH. Both DDKs can be
 downloaded from the Microsoft developers site www.msdn.com.

 NASM is freely available. Version 0.98 was used during testing: other versions
 may also work. It is available from many places, see for example:
 http://www.kernel.org/pub/software/devel/nasm/binaries/win32/
 The NASM binary nasmw.exe needs to be installed anywhere on your PATH.

 Firstly you should run Configure:
d44 1
a44 1
 > perl Configure VC-WIN32 --prefix=c:/some/openssl/dir
d46 1
a46 1
Where the prefix argument specifies where OpenSSL will be installed to.
d48 1
a48 2
 Next you need to build the Makefiles and optionally the assembly language
 files:
d50 2
a51 3
 - If you are using MASM then run:

   > ms\do_masm
d59 1
d70 2
a71 2
 If all is well it should compile and you will have some DLLs and executables
 in out32dll. If you want to try the tests then do:
d76 1
a76 1
To install OpenSSL to the specified location do:
d78 1
a78 1
> nmake -f ms\ntdll.mak install
d82 9
a90 11
 There are various changes you can make to the Win32 compile environment. By
 default the library is not compiled with debugging symbols. If you add 'debug'
 to the mk1mf.pl lines in the do_* batch file then debugging symbols will be
 compiled in. Note that mk1mf.pl expects the platform to be the last argument
 on the command line, so 'debug' must appear before that, as all other options.


 By default in 0.9.8 OpenSSL will compile builtin ENGINES into the libeay32.dll
 shared library. If you specify the "no-static-engine" option on the command
 line to Configure the shared library build (ms\ntdll.mak) will compile the
 engines as separate DLLs.
d95 3
a97 3
 If you want to enable the NT specific features of OpenSSL (currently only the
 logging BIO) follow the instructions above but call the batch file do_nt.bat
 instead of do_ms.bat.
a102 1

d128 7
a134 11
 Cygwin provides a bash shell and GNU tools environment running
 on NT 4.0, Windows 9x, Windows ME, Windows 2000, and Windows XP.
 Consequently, a make of OpenSSL with Cygwin is closer to a GNU
 bash environment such as Linux than to other the other Win32
 makes.

 Cygwin implements a Posix/Unix runtime system (cygwin1.dll).
 It is also possible to create Win32 binaries that only use the
 Microsoft C runtime system (msvcrt.dll or crtdll.dll) using
 MinGW. MinGW can be used in the Cygwin development environment
 or in a standalone setup as described in the following section.
d179 1
a179 1
 GNU C (MinGW)
d182 1
a182 1
 * Compiler installation:
d184 3
a186 3
   MinGW is available from http://www.mingw.org. Run the installer and
   set the MinGW bin directory to the PATH in "System Properties" or
   autoexec.bat.
d190 5
a194 1
   > ms\mingw32
d196 6
a201 4
   This will create the library and binaries in out. In case any problems
   occur, try
   > ms\mingw32 no-asm
   instead.
d206 2
a207 8
   See troubleshooting if you get error messages about functions not having
   a number assigned.

 * You can now try the tests:

   > cd out
   > ..\ms\test

d294 1
a294 1
 WSOCK32.LIB, ADVAPI32.LIB, GDI32.LIB and USER32.LIB. Those developing
d296 5
a300 5
 with latter two, as they are justly associated with interactive desktop,
 which is not available to service processes. The toolkit is designed
 to detect in which context it's currently executed, GUI, console app
 or service, and act accordingly, namely whether or not to actually make
 GUI calls.
@


1.10
log
@resolve conflicts
@
text
@d6 1
d50 1
a50 2
 Firstly you should run Configure (to build a FIPS-certified variant of
 OpenSSL, add the option "fips"):
d52 3
a54 1
 > perl Configure VC-WIN32
d57 1
a57 1
 files (to build a FIPS-certified variant of OpenSSL, add the argument "fips"):
d82 6
a87 2
 > cd out32dll
 > ..\ms\test
d97 6
d113 2
d118 1
a118 2
 * Configure for building with Borland Builder (to build a FIPS-certified
   variant of OpenSSL, add the option "fips"):
d121 1
a121 2
 * Create the appropriate makefile (to build a FIPS-certified variant of
   OpenSSL, add the argument "fips")
a211 2
   If you want to build a FIPS-certified variant of OpenSSL, add the argument
   "fips"
d304 18
@


1.9
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d49 2
a50 1
 Firstly you should run Configure:
d55 1
a55 1
 files:
d104 2
a105 1
 * Configure for building with Borland Builder:
d108 2
a109 1
 * Create the appropriate makefile
d200 2
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d228 1
a228 1
	$ copy /b inc32\*               c:\openssl\include\openssl
@


1.7
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d5 2
a12 1
 For Cygwin users, there's more info in the Cygwin section.
d18 9
a26 1
  * GNU C (Mingw32 or Cygwin)
d36 7
a42 6
 MASM was at one point distributed with VC++. It is now distributed with some
 Microsoft DDKs, for example the Windows NT 4.0 DDK and the Windows 98 DDK. If
 you do not have either of these DDKs then you can just download the binaries
 for the Windows 98 DDK and extract and rename the two files XXXXXml.exe and
 XXXXXml.err, to ml.exe and ml.err and install somewhere on your PATH. Both
 DDKs can be downloaded from the Microsoft developers site www.msdn.com.
a48 8
 If you are compiling from a tarball or a CVS snapshot then the Win32 files
 may well be not up to date. This may mean that some "tweaking" is required to
 get it all to work. See the trouble shooting section later on for if (when?)
 it goes wrong.

 Visual C++
 ----------

d87 2
a88 1
 compiled in.
a121 33
 GNU C (Mingw32)
 ---------------

 To build OpenSSL, you need the Mingw32 package and GNU make.

 * Compiler installation:

   Mingw32 is available from <ftp://ftp.xraylith.wisc.edu/pub/khan/
   gnu-win32/mingw32/gcc-2.95.2/gcc-2.95.2-msvcrt.exe>. Extract it
   to a directory such as C:\gcc-2.95.2 and add c:\gcc-2.95.2\bin to
   the PATH environment variable in "System Properties"; or edit and
   run C:\gcc-2.95.2\mingw32.bat to set the PATH.

 * Compile OpenSSL:

   > ms\mingw32

   This will create the library and binaries in out. In case any problems
   occur, try
   > ms\mingw32 no-asm
   instead.

   libcrypto.a and libssl.a are the static libraries. To use the DLLs,
   link with libeay32.a and libssl32.a instead.

   See troubleshooting if you get error messages about functions not having
   a number assigned.

 * You can now try the tests:

   > cd out
   > ..\ms\test

d128 8
a135 4
 bash environment such as Linux than to other W32 makes which are
 based on a single makefile approach. Cygwin implements Posix/Unix
 calls through cygwin1.dll, and is contrasted to Mingw32 which links
 dynamically to msvcrt.dll or crtdll.dll.
d141 2
a142 3
 * Install Perl and ensure it is in the path (recent Cygwin perl 
   (version 5.6.1-2 of the latter has been reported to work) or
   ActivePerl)
d148 3
d158 10
a167 1
 This will create a default install in /usr/local/ssl.
d179 29
@


1.6
log
@sync these files with openssl-0.9.7-beta1, too
@
text
@d97 12
d155 7
a161 7
 Cygwin provides a bash shell and GNU tools environment running on
 NT 4.0, Windows 9x and Windows 2000. Consequently, a make of OpenSSL
 with Cygwin is closer to a GNU bash environment such as Linux rather
 than other W32 makes that are based on a single makefile approach.
 Cygwin implements Posix/Unix calls through cygwin1.dll, and is
 contrasted to Mingw32 which links dynamically to msvcrt.dll or
 crtdll.dll.
d165 1
a165 1
 * Install Cygwin (see http://sourceware.cygnus.com/cygwin)
d191 1
a191 5
 As of version 1.1.1 Cygwin is relatively unstable in its handling
 of cr/lf issues. These make procedures succeeded with versions 1.1 and
 the snapshot 20000524 (Slow!).

 "bc" is not provided in the Cygwin distribution.  This causes a
d193 1
a193 1
 desired, GNU bc can be built with Cygwin without change.
@


1.5
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@d122 1
a122 2
   > perl Configure Mingw32
   > ms\mw.bat
d124 4
a127 1
   This will create the library and binaries in out.
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d115 4
a118 4
   gnu-win32/mingw32/gcc-2.95.2/gcc-2.95.2-msvcrt.exe>. GNU make is at
   <ftp://agnes.dida.physik.uni-essen.de/home/janjaap/mingw32/binaries/
   make-3.76.1.zip>. Install both of them in C:\egcs-1.1.2 and run
   C:\egcs-1.1.2\mingw32.bat to set the PATH.
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d5 2
a6 2
 Heres a few comments about building OpenSSL in Windows environments. Most of
 this is tested on Win32 but it may also work in Win 3.1 with some
d9 4
a12 1
 You need Perl for Win32 (available from http://www.activestate.com/ActivePerl)
d17 1
a17 1
  * GNU C (Mingw32 or Cygwin32)
d84 1
a84 1
 to the mk1mk.pl lines in the do_* batch file then debugging symbols will be
d138 2
a139 2
 GNU C (CygWin32)
 ---------------
d141 1
a141 1
 CygWin32 provides a bash shell and GNU tools environment running on
d143 1
a143 1
 with CygWin is closer to a GNU bash environment such as Linux rather
d145 1
a145 1
 CygWin32 implements Posix/Unix calls through cygwin1.dll, and is
d149 1
a149 1
 To build OpenSSL using CygWin32:
d151 1
a151 1
 * Install CygWin32 (see http://sourceware.cygnus.com/cygwin)
d153 3
a155 1
 * Install Perl and ensure it is in the path
d157 1
a157 1
 * Run the CygWin bash shell
d161 1
a161 1
   $ ./Configure no-threads CygWin32
d170 1
a170 1
 CygWin32 Notes:
d173 1
a173 1
 mounted as text (i.e. mount -t c:\somewhere /home) due to CygWin
d177 1
a177 1
 As of version 1.1.1 CygWin32 is relatively unstable in its handling
d181 1
a181 1
 "bc" is not provided in the CygWin32 distribution.  This causes a
d183 1
a183 1
 desired, GNU bc can be built with CygWin32 without change.
d189 3
a191 2
 There's currently no real installation procedure for Win32.  There are,
 however, some suggestions:
d263 1
a263 1
 rely on CYRPTO_malloc_init() solving your problem, and you should
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d111 2
a112 2
   Mingw32 is available from <ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/
   mingw32/egcs-1.1.2/egcs-1.1.2-mingw32.zip>. GNU make is at
d134 75
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d7 1
a7 1
 modification.  See the end of this file for Eric's original comments.
d24 6
a29 4
 MASM was I believe distributed in the past with VC++ and it is also part of
 the MSDN SDKs. It is no longer distributed as part of VC++ and can be hard
 to get hold of. It can be purchased: see Microsoft's site for details at:
 http://www.microsoft.com/
d64 1
a64 1
 troubleshooting section: you probably wont be able to compile it as it
d150 2
a151 3
 If you get errors about unresolved externals then this means that either you
 didn't read the note above about functions not having numbers assigned or
 someone forgot to add a function to the header file.
d153 7
a159 2
 In this latter case check out the header file to see if the function is
 defined in the header file.
d174 10
a183 156
 program will almost certainly crash: see the original SSLeay description
 below for more details.

--------------------------------------------------------------------------------
The orignal Windows build instructions from SSLeay follow. 
Note: some of this may be out of date and no longer applicable. In particular
the Crypto_malloc_init() comment appears to be wrong: you always need to use
the same runtime library as the DLL itself.
--------------------------------------------------------------------------------

The Microsoft World.

The good news, to build SSLeay for the Microsft World

Windows 3.1 DLL's
perl Configure VC-WIN16
nmake -f ms\w31dll.mak

Windows NT/95 DLL's
perl Configure VC-WIN32
nmake -f ms\ntdll.mak

Now the bad news
All builds were done using Microsofts Visual C++ 1.52c and [45].x.
If you are a borland person, you are probably going to have to help me
finish the stuff in util/pl/BC*pl

All builds were made under Windows NT - this means long filenames, so
you may have problems under Windows 3.1 but probably not under 95.

Because file pointers don't work in DLL's under Windows 3.1 (well at
least stdin/stdout don't and I don't like having to differentiate
between these and other file pointers), I now use the BIO file-pointer
module, which needs to be linked into your application.  You can either
use the memory buffer BIO for IO, or compile bss_file.c into your
application, it is in the apps directory and is just a copy of
crypto/buffer/bss_file.c with #define APPS_WIN16 added.
I have not yet automated the makefile to automatically copy it into 'out'
for a win 3.1 build....

All callbacks passed into SSLeay for Windows 3.1 need to be of type
_far _loadds.

I don't support building with the pascal calling convention.

The DLL and static builds are large memory model.

To build static libraries for NT/95 or win 3.1

perl util/mk1mf.pl VC-WIN32 > mf-stat.nt
perl util/mk1mf.pl VC-WIN16 > mf-stat.w31
for DLL's
perl util/mk1mf.pl dll VC-WIN32	> mf-dll.nt
perl util/mk1mf.pl dll VC-WIN16 > mf-dll.w31

Again you will notice that if you dont have perl, you cannot do this.

Now the next importaint issue.  Running Configure!
I have small assember code files for critical big number library operation
in crypto/bn/asm.  There is, asm code, object files and uuencode
object files.  They are
x86nt32.asm	- 32bit flat memory model assember - suitable Win32
x86w16.asm	- 16bit assember - used in the msdos build.
x86w32.asm	- 32bit assember, win 3.1 segments, used for win16 build.

If you feel compelled to build the 16bit maths routines in the windows 3.1
build,
perl Configure VC-W31-16
perl util/mk1mf.pl dll VC-W31-16 > mf-dll.w31

If you hate assember and don't want anything to do with it,
perl util/mk1mf.pl no-asm VC-WIN16 > mf-dll.w31
will work for any of the makefile generations.

There are more options to mk1mf.pl but these all leave the temporary
files in 'tmp' and the output files in 'out' by default.

The NT build is done for console mode.

The Windows 3.1 version of SSLeay uses quickwin, the interface is ugly
but it is better than nothing.  If you want ugly, try doing anything
that involves getting a password.  I decided to be ugly instead of
echoing characters.  For Windows 3.1 I would just sugest using the
msdos version of the ssleay application for command line work.
The QuickWin build is primarily for testing.

For both NT and Windows 3.1, I have not written the code so that
s_client, s_server can take input from the keyboard.  You can happily
start applications up in separate windows, watch them handshake, and then sit
there for-ever.  I have not had the time to get this working, and I've
been able to test things from a unix box to the NT box :-).
Try running ssleay s_server on the windows box
(with either -cert ../apps/server.pem -www)
and run ssleay s_time from another window.
This often stuffs up on Windows 3.1, but I'm not worried since this is
probably a problem with my demo applications, not the libraries.

After a build of one of the version of microsoft SSLeay,
'cd ms' and then run 'test'.  This should check everything out and
even does a trial run of generating certificates.
'test.bat' requires that perl be install, you be in the ms directory
(not the test directory, thats for unix so stay out :-) and that the
build output directory be ../out 

On a last note, you will probably get division by zero errors and
stuff after a build.  This is due to your own inability to follow
instructions :-).

The reasons for the problem is probably one of the following.

1)	You did not run Configure.  This is critical for windows 3.1 when
	using assember.  The values in crypto/bn/bn.h must match the
	ones requred for the assember code.  (remember that if you
	edit crypto/bn/bn.h by hand, it will be clobered the next time
	you run Configure by the contents of crypto/bn/bn.org).
	SSLeay version -o will list the compile options.
	For VC-WIN32 you need bn(64,32) or bn(32,32)
	For VC-W31-32/VC-WIN16 you need bn(32,32)
	For VC-W31-16 you need bn(32,16) or bn(16,16)
	For VC-MSDOS you need bn(32,16) or bn(16,16).

	The first number will be 2 times bigger than the second if
	BN_LLONG is defined in bn.h and the size of the second number
	depends on the 'bits' defined at the start of bn.h.  Have a
	look, it's all reasonably clear.
	If you want to start messing with 8 bit builds and things like
	that, build without the assember by re-generating a makefile
	via 'perl util/mk1mf.pl no-asm'.
2)	You tried to build under MS-DOS or Windows 3.1 using the /G3
	option.  Don't.  It is buggy (thats why you just got that
	error) and unless you want to work out which optimising flag
	to turn off, I'm not going to help you :-).  I also noticed
	that code often ran slower when compiled with /G3.
3)	Under NT/95, malloc goes stupid.  You are probably linking with
	the wrong library, there are problems if you mix the threaded
	and non-threaded libraries (due to the DLL being staticly
	linked with one and the applicaion using another.

Well hopefully thats most of the MS issues handled, see you in ssl-users :-).

eric 30-Aug-1996

SSLeay 0.6.5
For Windows 95/NT, add CRYPTO_malloc_init() to your program before any
calls to the SSLeay libraries.  This function will insert callbacks so that
the SSLeay libraries will use the same malloc(), free() and realloc() as
your application so 'problem 3)' mentioned above will go away.

There is now DES assember for Windows NT/95.  The file is
crypto/des/asm/win32.asm and replaces crypto/des/des_enc.c in the build.

There is also Blowfish assember for Windows NT/95.  The file is
crypto/bf/asm/win32.asm and replaces crypto/bf/bf_enc.c in the build.

eric 25-Jun-1997

@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d5 3
a7 7
 Heres a few comments about building OpenSSL in Windows environments.  Most
 of this is tested on Win32 but it may also work in Win 3.1 with some
 modification.

 You need Perl for Win32.  Unless you will build on Cygwin, you will need
 ActiveState Perl, available from http://www.activestate.com/ActivePerl.
 For Cygwin users, there's more info in the Cygwin section.
d9 1
d14 1
a14 1
  * GNU C (Mingw32 or Cygwin)
d24 4
a27 6
 MASM was at one point distributed with VC++. It is now distributed with some
 Microsoft DDKs, for example the Windows NT 4.0 DDK and the Windows 98 DDK. If
 you do not have either of these DDKs then you can just download the binaries
 for the Windows 98 DDK and extract and rename the two files XXXXXml.exe and
 XXXXXml.err, to ml.exe and ml.err and install somewhere on your PATH. Both
 DDKs can be downloaded from the Microsoft developers site www.msdn.com.
d62 1
a62 1
 troubleshooting section: you probably won't be able to compile it as it
d79 1
a79 1
 to the mk1mf.pl lines in the do_* batch file then debugging symbols will be
d109 5
a113 5
   Mingw32 is available from <ftp://ftp.xraylith.wisc.edu/pub/khan/
   gnu-win32/mingw32/gcc-2.95.2/gcc-2.95.2-msvcrt.exe>. Extract it
   to a directory such as C:\gcc-2.95.2 and add c:\gcc-2.95.2\bin to
   the PATH environment variable in "System Properties"; or edit and
   run C:\gcc-2.95.2\mingw32.bat to set the PATH.
d117 2
a118 1
   > ms\mingw32
d120 1
a120 4
   This will create the library and binaries in out. In case any problems
   occur, try
   > ms\mingw32 no-asm
   instead.
a132 78
 GNU C (Cygwin)
 --------------

 Cygwin provides a bash shell and GNU tools environment running on
 NT 4.0, Windows 9x and Windows 2000. Consequently, a make of OpenSSL
 with Cygwin is closer to a GNU bash environment such as Linux rather
 than other W32 makes that are based on a single makefile approach.
 Cygwin implements Posix/Unix calls through cygwin1.dll, and is
 contrasted to Mingw32 which links dynamically to msvcrt.dll or
 crtdll.dll.

 To build OpenSSL using Cygwin:

 * Install Cygwin (see http://sourceware.cygnus.com/cygwin)

 * Install Perl and ensure it is in the path (recent Cygwin perl 
   (version 5.6.1-2 of the latter has been reported to work) or
   ActivePerl)

 * Run the Cygwin bash shell

 * $ tar zxvf openssl-x.x.x.tar.gz
   $ cd openssl-x.x.x
   $ ./config
   [...]
   $ make
   [...]
   $ make test
   $ make install

 This will create a default install in /usr/local/ssl.

 Cygwin Notes:

 "make test" and normal file operations may fail in directories
 mounted as text (i.e. mount -t c:\somewhere /home) due to Cygwin
 stripping of carriage returns. To avoid this ensure that a binary
 mount is used, e.g. mount -b c:\somewhere /home.

 As of version 1.1.1 Cygwin is relatively unstable in its handling
 of cr/lf issues. These make procedures succeeded with versions 1.1 and
 the snapshot 20000524 (Slow!).

 "bc" is not provided in the Cygwin distribution.  This causes a
 non-fatal error in "make test" but is otherwise harmless.  If
 desired, GNU bc can be built with Cygwin without change.


 Installation
 ------------

 If you used the Cygwin procedure above, you have already installed and
 can skip this section.  For all other procedures, there's currently no real
 installation procedure for Win32.  There are, however, some suggestions:

    - do nothing.  The include files are found in the inc32/ subdirectory,
      all binaries are found in out32dll/ or out32/ depending if you built
      dynamic or static libraries.

    - do as is written in INSTALL.Win32 that comes with modssl:

	$ md c:\openssl 
	$ md c:\openssl\bin
	$ md c:\openssl\lib
	$ md c:\openssl\include
	$ md c:\openssl\include\openssl
	$ copy /b inc32\*               c:\openssl\include\openssl
	$ copy /b out32dll\ssleay32.lib c:\openssl\lib
	$ copy /b out32dll\libeay32.lib c:\openssl\lib
	$ copy /b out32dll\ssleay32.dll c:\openssl\bin
	$ copy /b out32dll\libeay32.dll c:\openssl\bin
	$ copy /b out32dll\openssl.exe  c:\openssl\bin

      Of course, you can choose another device than c:.  C: is used here
      because that's usually the first (and often only) harddisk device.
      Note: in the modssl INSTALL.Win32, p: is used rather than c:.


d148 3
a150 2
 If you get errors about unresolved symbols there are several possible
 causes.
d152 2
a153 7
 If this happens when the DLL is being linked and you have disabled some
 ciphers then it is possible the DEF file generator hasn't removed all
 the disabled symbols: the easiest solution is to edit the DEF files manually
 to delete them. The DEF files are ms\libeay32.def ms\ssleay32.def.

 Another cause is if you missed or ignored the errors about missing numbers
 mentioned above.
d168 156
a323 10
 program will almost certainly crash because malloc gets confused -- the
 OpenSSL DLLs are statically linked to one version, the application must
 not use a different one.  You might be able to work around such problems
 by adding CRYPTO_malloc_init() to your program before any calls to the
 OpenSSL libraries: This tells the OpenSSL libraries to use the same
 malloc(), free() and realloc() as the application.  However there are many
 standard library functions used by OpenSSL that call malloc() internally
 (e.g. fopen()), and OpenSSL cannot change these; so in general you cannot
 rely on CRYPTO_malloc_init() solving your problem, and you should
 consistently use the multithreaded library.
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@a96 12
 Borland C++ builder 5
 ---------------------

 * Configure for building with Borland Builder:
   > perl Configure BC-32

 * Create the appropriate makefile
   > ms\do_nasm

 * Build
   > make -f ms\bcb.mak

d143 7
a149 7
 Cygwin provides a bash shell and GNU tools environment running
 on NT 4.0, Windows 9x, Windows ME, Windows 2000, and Windows XP.
 Consequently, a make of OpenSSL with Cygwin is closer to a GNU
 bash environment such as Linux than to other W32 makes which are
 based on a single makefile approach. Cygwin implements Posix/Unix
 calls through cygwin1.dll, and is contrasted to Mingw32 which links
 dynamically to msvcrt.dll or crtdll.dll.
d153 1
a153 1
 * Install Cygwin (see http://cygwin.com/)
d179 5
a183 1
 "bc" is not provided in older Cygwin distribution.  This causes a
d185 1
a185 1
 desired and needed, GNU bc can be built with Cygwin without change.
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a4 2
 [Instructions for building for Windows CE can be found in INSTALL.WCE]

d11 1
d17 1
a17 9
  * GNU C (Cygwin or MinGW)

 If you are compiling from a tarball or a CVS snapshot then the Win32 files
 may well be not up to date. This may mean that some "tweaking" is required to
 get it all to work. See the trouble shooting section later on for if (when?)
 it goes wrong.

 Visual C++
 ----------
d27 6
a32 7
 MASM is distributed with most versions of VC++. For the versions where it is
 not included in VC++, it is also distributed with some Microsoft DDKs, for
 example the Windows NT 4.0 DDK and the Windows 98 DDK. If you do not have
 either of these DDKs then you can just download the binaries for the Windows
 98 DDK and extract and rename the two files XXXXXml.exe and XXXXXml.err, to
 ml.exe and ml.err and install somewhere on your PATH. Both DDKs can be
 downloaded from the Microsoft developers site www.msdn.com.
d39 8
d85 1
a85 2
 compiled in. Note that mk1mf.pl expects the platform to be the last argument
 on the command line, so 'debug' must appear before that, as all other options.
d119 33
d158 4
a161 8
 bash environment such as Linux than to other the other Win32
 makes.

 Cygwin implements a Posix/Unix runtime system (cygwin1.dll).
 It is also possible to create Win32 binaries that only use the
 Microsoft C runtime system (msvcrt.dll or crtdll.dll) using
 MinGW. MinGW can be used in the Cygwin development environment
 or in a standalone setup as described in the following section.
d167 3
a169 2
 * Install Perl and ensure it is in the path. Both Cygwin perl
   (5.6.1-2 or newer) and ActivePerl work.
a174 3

   To build the Cygwin version of OpenSSL:

d182 1
a182 10
   This will create a default install in /usr/local/ssl.

   To build the MinGW version (native Windows) in Cygwin:

   $ ./Configure mingw
   [...]
   $ make
   [...]
   $ make test
   $ make install
a193 29

 GNU C (MinGW)
 -------------

 * Compiler installation:

   MinGW is available from http://www.mingw.org. Run the installer and
   set the MinGW bin directory to the PATH in "System Properties" or
   autoexec.bat.

 * Compile OpenSSL:

   > ms\mingw32

   This will create the library and binaries in out. In case any problems
   occur, try
   > ms\mingw32 no-asm
   instead.

   libcrypto.a and libssl.a are the static libraries. To use the DLLs,
   link with libeay32.a and libssl32.a instead.

   See troubleshooting if you get error messages about functions not having
   a number assigned.

 * You can now try the tests:

   > cd out
   > ..\ms\test
@


1.1.1.4
log
@import 0.9.7c
@
text
@d228 1
a228 1
	$ copy /b inc32\openssl\*       c:\openssl\include\openssl
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d49 1
a49 2
 Firstly you should run Configure (to build a FIPS-certified variant of
 OpenSSL, add the option "fips"):
d54 1
a54 1
 files (to build a FIPS-certified variant of OpenSSL, add the argument "fips"):
d103 1
a103 2
 * Configure for building with Borland Builder (to build a FIPS-certified
   variant of OpenSSL, add the option "fips"):
d106 1
a106 2
 * Create the appropriate makefile (to build a FIPS-certified variant of
   OpenSSL, add the argument "fips")
a196 2
   If you want to build a FIPS-certified variant of OpenSSL, add the argument
   "fips"
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@a5 1
 [Instructions for building for Win64 can be found in INSTALL.W64]
d49 2
a50 1
 Firstly you should run Configure:
d52 1
a52 3
 > perl Configure VC-WIN32 --prefix=c:/some/openssl/dir

Where the prefix argument specifies where OpenSSL will be installed to.
d55 1
a55 1
 files:
d80 2
a81 6
 > nmake -f ms\ntdll.mak test


To install OpenSSL to the specified location do:

> nmake -f ms\ntdll.mak install
a90 6

 By default in 0.9.8 OpenSSL will compile builtin ENGINES into the libeay32.dll
 shared library. If you specify the "no-static-engine" option on the command
 line to Configure the shared library build (ms\ntdll.mak) will compile the
 engines as separate DLLs.

a100 2


d104 2
a105 1
 * Configure for building with Borland Builder:
d108 2
a109 1
 * Create the appropriate makefile
d200 2
a293 18

 Linking your application
 ------------------------

 If you link with static OpenSSL libraries [those built with ms/nt.mak],
 then you're expected to additionally link your application with
 WSOCK32.LIB, ADVAPI32.LIB, GDI32.LIB and USER32.LIB. Those developing
 non-interactive service applications might feel concerned about linking
 with latter two, as they are justly associated with interactive desktop,
 which is not available to service processes. The toolkit is designed
 to detect in which context it's currently executed, GUI, console app
 or service, and act accordingly, namely whether or not to actually make
 GUI calls.

 If you link with OpenSSL .DLLs, then you're expected to include into
 your application code small "shim" snippet, which provides glue between
 OpenSSL BIO layer and your compiler run-time. Look up OPENSSL_Applink
 reference page for further details.
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d8 3
a10 10
 Here are a few comments about building OpenSSL for Win32 environments,
 such as Windows NT and Windows 9x. It should be noted though that
 Windows 9x are not ordinarily tested. Its mention merely means that we
 attempt to maintain certain programming discipline and pay attention
 to backward compatibility issues, in other words it's kind of expected
 to work on Windows 9x, but no regression tests are actually performed.

 On additional note newer OpenSSL versions are compiled and linked with
 Winsock 2. This means that minimum OS requirement was elevated to NT 4
 and Windows 98 [there is Winsock 2 update for Windows 95 though].
d12 2
a13 2
 - you need Perl for Win32.  Unless you will build on Cygwin, you will need
   ActiveState Perl, available from http://www.activestate.com/ActivePerl.
d15 1
a15 1
 - one of the following C compilers:
a20 4
- Netwide Assembler, a.k.a. NASM, available from http://nasm.sourceforge.net/
  is required if you intend to utilize assembler modules. Note that NASM
  is now the only supported assembler.

d29 22
a50 3
 If you want to compile in the assembly language routines with Visual
 C++, then you will need already mentioned Netwide Assembler binary,
 nasmw.exe or nasm.exe, to be available on your %PATH%.
d52 1
a52 1
 Firstly you should run Configure with platform VC-WIN32:
d54 1
a54 1
 > perl Configure VC-WIN32 --prefix=c:\some\openssl\dir
d56 2
a57 1
 Where the prefix argument specifies where OpenSSL will be installed to.
d59 3
a61 2
 Next you need to build the Makefiles and optionally the assembly
 language files:
a68 1
   > perl Configure VC-WIN32 no-asm --prefix=c:/some/openssl/dir
d79 2
a80 2
 If all is well it should compile and you will have some DLLs and
 executables in out32dll. If you want to try the tests then do:
d85 1
a85 1
 To install OpenSSL to the specified location do:
d87 1
a87 1
 > nmake -f ms\ntdll.mak install
d91 11
a101 9
 There are various changes you can make to the Win32 compile
 environment. By default the library is not compiled with debugging
 symbols. If you use the platform debug-VC-WIN32 instead of VC-WIN32
 then debugging symbols will be compiled in.

 By default in 1.0.0 OpenSSL will compile builtin ENGINES into the
 separate shared librariesy. If you specify the "enable-static-engine"
 option on the command line to Configure the shared library build
 (ms\ntdll.mak) will compile the engines into libeay32.dll instead.
d106 3
a108 3
 If you want to enable the NT specific features of OpenSSL (currently
 only the logging BIO) follow the instructions above but call the batch
 file do_nt.bat instead of do_ms.bat.
d114 1
d140 11
a150 7
 Cygwin implements a Posix/Unix runtime system (cygwin1.dll) on top of
 Win32 subsystem and provides a bash shell and GNU tools environment.
 Consequently, a make of OpenSSL with Cygwin is virtually identical to
 Unix procedure. It is also possible to create Win32 binaries that only
 use the Microsoft C runtime system (msvcrt.dll or crtdll.dll) using
 MinGW. MinGW can be used in the Cygwin development environment or in a
 standalone setup as described in the following section.
d195 1
a195 1
 GNU C (MinGW/MSYS)
d198 1
a198 1
 * Compiler and shell environment installation:
d200 3
a202 3
   MinGW and MSYS are available from http://www.mingw.org/, both are
   required. Run the installers and do whatever magic they say it takes
   to start MSYS bash shell with GNU tools on its PATH.
d206 1
a206 5
   $ ./config
   [...]
   $ make
   [...]
   $ make test
d208 4
a211 6
   This will create the library and binaries in root source directory
   and openssl.exe application in apps directory.

   It is also possible to cross-compile it on Linux by configuring
   with './Configure --cross-compile-prefix=i386-mingw32- mingw ...'.
   'make test' is naturally not applicable then.
d216 8
a223 2
   See troubleshooting if you get error messages about functions not
   having a number assigned.
d310 1
a310 1
 WS2_32.LIB, ADVAPI32.LIB, GDI32.LIB and USER32.LIB. Those developing
d312 5
a316 5
 with the latter two, as they are justly associated with interactive
 desktop, which is not available to service processes. The toolkit is
 designed to detect in which context it's currently executed, GUI,
 console app or service, and act accordingly, namely whether or not to
 actually make GUI calls.
@


1.1.1.8
log
@import OpenSSL 1.0.0e
@
text
@a187 9
   N.B. Since source tar-ball can contain symbolic links, it's essential
   that you use accompanying MSYS tar to unpack the source. It will
   either handle them in one way or another or fail to extract them,
   which does the trick too. Latter means that you may safely ignore all
   "cannot create symlink" messages, as they will be "re-created" at
   configure stage by copying corresponding files. Alternative programs
   were observed to create empty files instead, which results in build
   failure.

d300 1
a300 12
 actually make GUI calls. Additionally those who wish to
 /DELAYLOAD:GDI32.DLL and /DELAYLOAD:USER32.DLL and actually keep them
 off service process should consider implementing and exporting from
 .exe image in question own _OPENSSL_isservice not relying on USER32.DLL.
 E.g., on Windows Vista and later you could:

	__declspec(dllexport) __cdecl BOOL _OPENSSL_isservice(void)
	{   DWORD sess;
	    if (ProcessIdToSessionId(GetCurrentProcessId(),&sess))
	        return sess==0;
	    return FALSE;
	}
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@d32 1
a32 1
 If you are compiling from a tarball or a Git snapshot then the Win32 files
d260 1
a260 1
 assigned in the Git tree: so anything linked against this version of the
@


