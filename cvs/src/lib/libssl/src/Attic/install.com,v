head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2014.04.13.15.25.20;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.28;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.41;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.10;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.53;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.07.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.12;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.25;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.33.29;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.36.57;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.37;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.00;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.05;	author djm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@$! INSTALL.COM -- Installs the files in a given directory tree
$!
$! Author: Richard Levitte <richard@@levitte.org>
$! Time of creation: 22-MAY-1998 10:13
$!
$! P1  root of the directory tree
$! P2  "64" for 64-bit pointers.
$!
$!
$! Announce/identify.
$!
$ proc = f$environment( "procedure")
$ write sys$output "@@@@@@ "+ -
   f$parse( proc, , , "name")+ f$parse( proc, , , "type")
$!
$ def_orig = f$environment( "default")
$ on error then goto tidy
$ on control_c then goto tidy
$!
$ if (p1 .eqs. "")
$ then
$   write sys$output "First argument missing."
$   write sys$output -
     "It should be the directory where you want things installed."
$   exit
$ endif
$!
$ if (f$getsyi("cpu") .lt. 128)
$ then
$   arch = "VAX"
$ else
$   arch = f$edit( f$getsyi( "arch_name"), "upcase")
$   if (arch .eqs. "") then arch = "UNK"
$ endif
$!
$ archd = arch
$!
$ if (p2 .nes. "")
$ then
$   if (p2 .eqs. "64")
$   then
$     archd = arch+ "_64"
$   else
$     if (p2 .nes. "32")
$     then
$       write sys$output "Second argument invalid."
$       write sys$output "It should be "32", "64", or nothing."
$       exit
$     endif
$   endif
$ endif
$!
$ root = f$parse( p1, "[]A.;0", , , "syntax_only, no_conceal") - "A.;0"
$ root_dev = f$parse( root, , , "device", "syntax_only")
$ root_dir = f$parse( root, , , "directory", "syntax_only") -
		   - ".][000000" - "[000000." - "][" - "[" - "]"
$ root = root_dev + "[" + root_dir
$!
$ define /nolog wrk_sslroot 'root'.] /trans=conc
$ define /nolog wrk_sslcerts wrk_sslroot:[certs]
$ define /nolog wrk_sslinclude wrk_sslroot:[include]
$ define /nolog wrk_ssllib wrk_sslroot:[lib]
$ define /nolog wrk_sslprivate wrk_sslroot:[private]
$ define /nolog wrk_sslxexe wrk_sslroot:['archd'_exe]
$ define /nolog wrk_sslxlib wrk_sslroot:['arch'_lib]
$!
$! Exhibit the destination directory.
$!
$ write sys$output "   Installing to (WRK_SSLROOT) ="
$ write sys$output "    ''f$trnlnm( "wrk_sslroot")'"
$ write sys$output ""
$!
$ if f$parse("wrk_sslroot:[000000]") .eqs. "" then -
   create /directory /log wrk_sslroot:[000000]
$ if f$parse("wrk_sslxexe:") .eqs. "" then -
   create /directory /log wrk_sslxexe:
$ if f$parse("wrk_sslxlib:") .eqs. "" then -
   create /directory /log wrk_sslxlib:
$ if f$parse("wrk_ssllib:") .eqs. "" then -
   create /directory /log wrk_ssllib:
$ if f$parse("wrk_sslinclude:") .eqs. "" then -
   create /directory /log wrk_sslinclude:
$ if f$parse("wrk_sslcerts:") .eqs. "" then -
   create /directory /log wrk_sslcerts:
$ if f$parse("wrk_sslprivate:") .eqs. "" then -
   create /directory /log wrk_sslprivate:
$ if f$parse("wrk_sslroot:[VMS]") .EQS. "" THEN -
   create /directory /log wrk_sslroot:[VMS]
$!
$ sdirs := CRYPTO, SSL, APPS, VMS !!!, RSAREF, TEST, TOOLS
$ exheader := e_os2.h
$!
$ copy /protection = w:re 'exheader' wrk_sslinclude: /log
$!
$ i = 0
$ loop_sdirs: 
$   d = f$edit( f$element(i, ",", sdirs), "trim")
$   i = i + 1
$   if d .eqs. "," then goto loop_sdirs_end
$   write sys$output "Installing ", d, " files."
$   set default [.'d']
$   @@ install-'d'.com 'root'] 'p2'
$   set default 'def_orig'
$ goto loop_sdirs
$ loop_sdirs_end:
$!
$ write sys$output ""
$ write sys$output "	Installation done!"
$ write sys$output ""
$ if (f$search( root+ "...]*.*;-1") .nes. "")
$ then
$   write sys$output "	You might want to purge ", root, "...]"
$   write sys$output ""
$ endif
$!
$ tidy:
$!
$ set default 'def_orig'
$!
$ call deass wrk_sslroot
$ call deass wrk_sslcerts
$ call deass wrk_sslinclude
$ call deass wrk_ssllib
$ call deass wrk_sslprivate
$ call deass wrk_sslxexe
$ call deass wrk_sslxlib
$!
$ exit
$!
$ deass: subroutine
$ if (f$trnlnm( p1, "LNM$PROCESS") .nes. "")
$ then
$   deassign /process 'p1'
$ endif
$ endsubroutine
$!
@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@@


1.7
log
@resolve conflicts, fix local changes
@
text
@d6 2
a7 1
$! P1	root of the directory tree
d9 47
a55 23
$	DEF_ORIG = F$ENVIRONMENT( "DEFAULT")
$	ON ERROR THEN GOTO TIDY
$	ON CONTROL_C THEN GOTO TIDY
$
$	IF P1 .EQS. ""
$	THEN
$	    WRITE SYS$OUTPUT "First argument missing."
$	    WRITE SYS$OUTPUT -
		  "It Should be the directory where you want things installed."
$	    EXIT
$	ENDIF
$
$	IF (F$GETSYI("CPU").LT.128)
$	THEN
$	    ARCH := VAX
$	ELSE
$	    ARCH = F$EDIT( F$GETSYI( "ARCH_NAME"), "UPCASE")
$	    IF (ARCH .EQS. "") THEN ARCH = "UNK"
$	ENDIF
$
$	ROOT = F$PARSE(P1,"[]A.;0",,,"SYNTAX_ONLY,NO_CONCEAL") - "A.;0"
$	ROOT_DEV = F$PARSE(ROOT,,,"DEVICE","SYNTAX_ONLY")
$	ROOT_DIR = F$PARSE(ROOT,,,"DIRECTORY","SYNTAX_ONLY") -
d57 9
a65 10
$	ROOT = ROOT_DEV + "[" + ROOT_DIR
$
$	DEFINE/NOLOG WRK_SSLROOT 'ROOT'.] /TRANS=CONC
$	DEFINE/NOLOG WRK_SSLXLIB WRK_SSLROOT:['ARCH'_LIB]
$	DEFINE/NOLOG WRK_SSLLIB WRK_SSLROOT:[LIB]
$	DEFINE/NOLOG WRK_SSLINCLUDE WRK_SSLROOT:[INCLUDE]
$	DEFINE/NOLOG WRK_SSLXEXE WRK_SSLROOT:['ARCH'_EXE]
$	DEFINE/NOLOG WRK_SSLCERTS WRK_SSLROOT:[CERTS]
$	DEFINE/NOLOG WRK_SSLPRIVATE WRK_SSLROOT:[PRIVATE]
$
d69 68
a136 57
$	WRITE SYS$OUTPUT "   Installing to (WRK_SSLROOT) ="
$	WRITE SYS$OUTPUT "    ''f$trnlnm( "WRK_SSLROOT")'"
$	WRITE SYS$OUTPUT ""
$
$	IF F$PARSE("WRK_SSLROOT:[000000]") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLROOT:[000000]
$	IF F$PARSE("WRK_SSLXEXE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLXEXE:
$	IF F$PARSE("WRK_SSLXLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLXLIB:
$	IF F$PARSE("WRK_SSLLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLLIB:
$	IF F$PARSE("WRK_SSLINCLUDE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLINCLUDE:
$	IF F$PARSE("WRK_SSLCERTS:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLCERTS:
$	IF F$PARSE("WRK_SSLPRIVATE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLPRIVATE:
$	IF F$PARSE("WRK_SSLROOT:[VMS]") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLROOT:[VMS]
$
$	SDIRS := CRYPTO,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
$	EXHEADER := e_os2.h
$
$	COPY 'EXHEADER' WRK_SSLINCLUDE: /LOG
$	SET FILE/PROT=WORLD:RE WRK_SSLINCLUDE:'EXHEADER'
$
$	I = 0
$ LOOP_SDIRS: 
$	D = F$ELEMENT(I, ",", SDIRS)
$	I = I + 1
$	IF D .EQS. "," THEN GOTO LOOP_SDIRS_END
$	WRITE SYS$OUTPUT "Installing ",D," files."
$	SET DEFAULT [.'D']
$	@@INSTALL 'ROOT']
$	SET DEFAULT [-]
$	GOTO LOOP_SDIRS
$ LOOP_SDIRS_END:
$
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "	Installation done!"
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "	You might want to purge ",ROOT,"...]"
$	WRITE SYS$OUTPUT ""
$
$ TIDY:
$	SET DEFAULT 'DEF_ORIG'
$
$	DEASSIGN WRK_SSLROOT
$	DEASSIGN WRK_SSLXLIB
$	DEASSIGN WRK_SSLLIB
$	DEASSIGN WRK_SSLINCLUDE
$	DEASSIGN WRK_SSLXEXE
$	DEASSIGN WRK_SSLCERTS
$	DEASSIGN WRK_SSLPRIVATE
$
$	EXIT
@


1.6
log
@resolve conflicts
@
text
@d8 4
d15 2
a16 1
$	    WRITE SYS$OUTPUT "Should be the directory where you want things installed."
d20 7
a26 2
$	ARCH = "AXP"
$	IF F$GETSYI("CPU") .LT. 128 THEN ARCH = "VAX"
d35 1
a35 2
$	DEFINE/NOLOG WRK_SSLVLIB WRK_SSLROOT:[VAX_LIB]
$	DEFINE/NOLOG WRK_SSLALIB WRK_SSLROOT:[ALPHA_LIB]
d38 1
a38 2
$	DEFINE/NOLOG WRK_SSLVEXE WRK_SSLROOT:[VAX_EXE]
$	DEFINE/NOLOG WRK_SSLAEXE WRK_SSLROOT:[ALPHA_EXE]
d42 7
d51 4
a54 8
$	IF F$PARSE("WRK_SSLVEXE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLVEXE:
$	IF F$PARSE("WRK_SSLAEXE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLAEXE:
$	IF F$PARSE("WRK_SSLVLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLVLIB:
$	IF F$PARSE("WRK_SSLALIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLALIB:
d84 9
d94 1
a94 2
$	DEASSIGN WRK_SSLVLIB
$	DEASSIGN WRK_SSLALIB
d97 1
a97 2
$	DEASSIGN WRK_SSLVEXE
$	DEASSIGN WRK_SSLAEXE
a99 6
$
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "	Installation done!"
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "	You might want to purge ",ROOT,"...]"
$	WRITE SYS$OUTPUT ""
@


1.5
log
@resolve conflicts
@
text
@d55 1
a55 1
$	DIRS := CRYPTO,FIPS,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
d62 2
a63 2
$ LOOP_DIRS: 
$	D = F$ELEMENT(I, ",", DIRS)
d65 1
a65 1
$	IF D .EQS. "," THEN GOTO LOOP_DIRS_END
d70 2
a71 2
$	GOTO LOOP_DIRS
$ LOOP_DIRS_END:
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d55 1
a55 1
$	SDIRS := CRYPTO,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
d62 2
a63 2
$ LOOP_SDIRS: 
$	D = F$ELEMENT(I, ",", SDIRS)
d65 1
a65 1
$	IF D .EQS. "," THEN GOTO LOOP_SDIRS_END
d70 2
a71 2
$	GOTO LOOP_SDIRS
$ LOOP_SDIRS_END:
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d55 1
a55 1
$	SDIRS := CRYPTO,SSL,RSAREF,APPS,VMS!,TEST,TOOLS
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d56 1
a56 1
$	EXHEADER := e_os.h,e_os2.h
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d59 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d56 1
a56 1
$	EXHEADER := e_os2.h
a58 1
$	SET FILE/PROT=WORLD:RE WRK_SSLINCLUDE:'EXHEADER'
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d55 1
a55 1
$	SDIRS := CRYPTO,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d55 1
a55 1
$	DIRS := CRYPTO,FIPS,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
d62 2
a63 2
$ LOOP_DIRS: 
$	D = F$ELEMENT(I, ",", DIRS)
d65 1
a65 1
$	IF D .EQS. "," THEN GOTO LOOP_DIRS_END
d70 2
a71 2
$	GOTO LOOP_DIRS
$ LOOP_DIRS_END:
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d55 1
a55 1
$	SDIRS := CRYPTO,SSL,APPS,VMS!,RSAREF,TEST,TOOLS
d62 2
a63 2
$ LOOP_SDIRS: 
$	D = F$ELEMENT(I, ",", SDIRS)
d65 1
a65 1
$	IF D .EQS. "," THEN GOTO LOOP_SDIRS_END
d70 2
a71 2
$	GOTO LOOP_SDIRS
$ LOOP_SDIRS_END:
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a7 4
$	DEF_ORIG = F$ENVIRONMENT( "DEFAULT")
$	ON ERROR THEN GOTO TIDY
$	ON CONTROL_C THEN GOTO TIDY
$
d11 1
a11 2
$	    WRITE SYS$OUTPUT -
		  "It Should be the directory where you want things installed."
d15 2
a16 7
$	IF (F$GETSYI("CPU").LT.128)
$	THEN
$	    ARCH := VAX
$	ELSE
$	    ARCH = F$EDIT( F$GETSYI( "ARCH_NAME"), "UPCASE")
$	    IF (ARCH .EQS. "") THEN ARCH = "UNK"
$	ENDIF
d25 2
a26 1
$	DEFINE/NOLOG WRK_SSLXLIB WRK_SSLROOT:['ARCH'_LIB]
d29 2
a30 1
$	DEFINE/NOLOG WRK_SSLXEXE WRK_SSLROOT:['ARCH'_EXE]
a33 7
$!
$! Exhibit the destination directory.
$!
$	WRITE SYS$OUTPUT "   Installing to (WRK_SSLROOT) ="
$	WRITE SYS$OUTPUT "    ''f$trnlnm( "WRK_SSLROOT")'"
$	WRITE SYS$OUTPUT ""
$
d36 8
a43 4
$	IF F$PARSE("WRK_SSLXEXE:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLXEXE:
$	IF F$PARSE("WRK_SSLXLIB:") .EQS. "" THEN -
	   CREATE/DIR/LOG WRK_SSLXLIB:
d73 10
a87 11
$
$ TIDY:
$	SET DEFAULT 'DEF_ORIG'
$
$	DEASSIGN WRK_SSLROOT
$	DEASSIGN WRK_SSLXLIB
$	DEASSIGN WRK_SSLLIB
$	DEASSIGN WRK_SSLINCLUDE
$	DEASSIGN WRK_SSLXEXE
$	DEASSIGN WRK_SSLCERTS
$	DEASSIGN WRK_SSLPRIVATE
@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d6 1
a6 2
$! P1  root of the directory tree
$! P2  "64" for 64-bit pointers.
d8 23
a30 47
$!
$! Announce/identify.
$!
$ proc = f$environment( "procedure")
$ write sys$output "@@@@@@ "+ -
   f$parse( proc, , , "name")+ f$parse( proc, , , "type")
$!
$ def_orig = f$environment( "default")
$ on error then goto tidy
$ on control_c then goto tidy
$!
$ if (p1 .eqs. "")
$ then
$   write sys$output "First argument missing."
$   write sys$output -
     "It should be the directory where you want things installed."
$   exit
$ endif
$!
$ if (f$getsyi("cpu") .lt. 128)
$ then
$   arch = "VAX"
$ else
$   arch = f$edit( f$getsyi( "arch_name"), "upcase")
$   if (arch .eqs. "") then arch = "UNK"
$ endif
$!
$ archd = arch
$!
$ if (p2 .nes. "")
$ then
$   if (p2 .eqs. "64")
$   then
$     archd = arch+ "_64"
$   else
$     if (p2 .nes. "32")
$     then
$       write sys$output "Second argument invalid."
$       write sys$output "It should be "32", "64", or nothing."
$       exit
$     endif
$   endif
$ endif
$!
$ root = f$parse( p1, "[]A.;0", , , "syntax_only, no_conceal") - "A.;0"
$ root_dev = f$parse( root, , , "device", "syntax_only")
$ root_dir = f$parse( root, , , "directory", "syntax_only") -
d32 10
a41 9
$ root = root_dev + "[" + root_dir
$!
$ define /nolog wrk_sslroot 'root'.] /trans=conc
$ define /nolog wrk_sslcerts wrk_sslroot:[certs]
$ define /nolog wrk_sslinclude wrk_sslroot:[include]
$ define /nolog wrk_ssllib wrk_sslroot:[lib]
$ define /nolog wrk_sslprivate wrk_sslroot:[private]
$ define /nolog wrk_sslxexe wrk_sslroot:['archd'_exe]
$ define /nolog wrk_sslxlib wrk_sslroot:['arch'_lib]
d45 57
a101 68
$ write sys$output "   Installing to (WRK_SSLROOT) ="
$ write sys$output "    ''f$trnlnm( "wrk_sslroot")'"
$ write sys$output ""
$!
$ if f$parse("wrk_sslroot:[000000]") .eqs. "" then -
   create /directory /log wrk_sslroot:[000000]
$ if f$parse("wrk_sslxexe:") .eqs. "" then -
   create /directory /log wrk_sslxexe:
$ if f$parse("wrk_sslxlib:") .eqs. "" then -
   create /directory /log wrk_sslxlib:
$ if f$parse("wrk_ssllib:") .eqs. "" then -
   create /directory /log wrk_ssllib:
$ if f$parse("wrk_sslinclude:") .eqs. "" then -
   create /directory /log wrk_sslinclude:
$ if f$parse("wrk_sslcerts:") .eqs. "" then -
   create /directory /log wrk_sslcerts:
$ if f$parse("wrk_sslprivate:") .eqs. "" then -
   create /directory /log wrk_sslprivate:
$ if f$parse("wrk_sslroot:[VMS]") .EQS. "" THEN -
   create /directory /log wrk_sslroot:[VMS]
$!
$ sdirs := CRYPTO, SSL, APPS, VMS !!!, RSAREF, TEST, TOOLS
$ exheader := e_os2.h
$!
$ copy /protection = w:re 'exheader' wrk_sslinclude: /log
$!
$ i = 0
$ loop_sdirs: 
$   d = f$edit( f$element(i, ",", sdirs), "trim")
$   i = i + 1
$   if d .eqs. "," then goto loop_sdirs_end
$   write sys$output "Installing ", d, " files."
$   set default [.'d']
$   @@ install-'d'.com 'root'] 'p2'
$   set default 'def_orig'
$ goto loop_sdirs
$ loop_sdirs_end:
$!
$ write sys$output ""
$ write sys$output "	Installation done!"
$ write sys$output ""
$ if (f$search( root+ "...]*.*;-1") .nes. "")
$ then
$   write sys$output "	You might want to purge ", root, "...]"
$   write sys$output ""
$ endif
$!
$ tidy:
$!
$ set default 'def_orig'
$!
$ call deass wrk_sslroot
$ call deass wrk_sslcerts
$ call deass wrk_sslinclude
$ call deass wrk_ssllib
$ call deass wrk_sslprivate
$ call deass wrk_sslxexe
$ call deass wrk_sslxlib
$!
$ exit
$!
$ deass: subroutine
$ if (f$trnlnm( p1, "LNM$PROCESS") .nes. "")
$ then
$   deassign /process 'p1'
$ endif
$ endsubroutine
$!
@


