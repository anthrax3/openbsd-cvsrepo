head	1.2;
access;
symbols
	OPENBSD_3_1:1.1.0.12
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2002.09.03.10.49.48;	author markus;	state dead;
branches;
next	1.1;

1.1
date	99.09.29.04.37.14;	author beck;	state Exp;
branches;
next	;


desc
@@


1.2
log
@unused files, perl subdir not part of OpenSSL 0.9.7
@
text
@##
##  OpenSSL.pm
##

package OpenSSL;

require 5.000;
use Exporter;
use DynaLoader;

@@ISA    = qw(Exporter DynaLoader);
@@EXPORT = qw();

$VERSION = '0.94';
bootstrap OpenSSL;

@@OpenSSL::BN::ISA        = qw(OpenSSL::ERR);
@@OpenSSL::MD::ISA        = qw(OpenSSL::ERR);
@@OpenSSL::Cipher::ISA    = qw(OpenSSL::ERR);
@@OpenSSL::SSL::CTX::ISA  = qw(OpenSSL::ERR);
@@OpenSSL::BIO::ISA       = qw(OpenSSL::ERR);
@@OpenSSL::SSL::ISA       = qw(OpenSSL::ERR);

@@BN::ISA                 = qw(OpenSSL::BN);
@@MD::ISA                 = qw(OpenSSL::MD);
@@Cipher::ISA             = qw(OpenSSL::Cipher);
@@SSL::ISA                = qw(OpenSSL::SSL);
@@SSL::CTX::ISA           = qw(OpenSSL::SSL::CTX);
@@BIO::ISA                = qw(OpenSSL::BIO);

@@OpenSSL::MD::names = qw(
    md2 md5 sha sha1 ripemd160 mdc2
);

@@OpenSSL::Cipher::names = qw(
    des-ecb des-cfb des-ofb des-cbc
    des-ede des-ede-cfb des-ede-ofb des-ede-cbc
    des-ede3 des-ede3-cfb des-ede3-ofb des-ede3-cbc
    desx-cbc rc4 rc4-40
    idea-ecb idea-cfb idea-ofb idea-cbc
    rc2-ecb rc2-cbc rc2-40-cbc rc2-cfb rc2-ofb
    bf-ecb bf-cfb bf-ofb bf-cbc
    cast5-ecb cast5-cfb cast5-ofb cast5-cbc
    rc5-ecb rc5-cfb rc5-ofb rc5-cbc
);

sub OpenSSL::SSL::CTX::new_ssl { 
    OpenSSL::SSL::new($_[0]);
}

sub OpenSSL::ERR::error {
    my($o) = @@_;
    my($s, $ret);

    while (($s = $o->get_error()) != 0) {
        $ret.=$s."\n";
    }
    return($ret);
}

@@OpenSSL::Cipher::aliases = qw(
    des desx des3 idea rc2 bf cast
);

package OpenSSL::BN;

sub bnfix { 
    (ref($_[0]) ne "OpenSSL::BN") ? OpenSSL::BN::dec2bn($_[0]) : $_[0]; 
}

use overload
"="    => sub { dup($_[0]); },
"+"    => sub { add($_[0],$_[1]); },
"-"    => sub { ($_[1],$_[0])=($_[0],$_[1]) if $_[2]; OpenSSL::BN::sub($_[0],$_[1]); },
"*"    => sub { mul($_[0],$_[1]); },
"**"   => sub { ($_[1],$_[0])=($_[0],$_[1]) if $_[2]; OpenSSL::BN::exp($_[0],$_[1]); },
"/"    => sub { ($_[1],$_[0])=($_[0],$_[1]) if $_[2]; (div($_[0],$_[1]))[0]; },
"%"    => sub { ($_[1],$_[0])=($_[0],$_[1]) if $_[2]; mod($_[0],$_[1]); },
"<<"   => sub { lshift($_[0],$_[1]); },
">>"   => sub { rshift($_[0],$_[1]); },
"<=>"  => sub { OpenSSL::BN::cmp($_[0],$_[1]); },
'""'   => sub { bn2dec($_[0]); },
'0+'   => sub { dec2bn($_[0]); },
"bool" => sub { ref($_[0]) eq "OpenSSL::BN"; };

sub OpenSSL::BIO::do_accept { 
    OpenSSL::BIO::do_handshake(@@_);
}

1;
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@@

