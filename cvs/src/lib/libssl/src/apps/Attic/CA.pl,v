head	1.7;
access;
symbols
	openssl_1_0_1_c:1.1.1.8
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	openssh_1_0_0_a:1.1.1.8
	openssl_0_9_8_k:1.1.1.8
	openssl_0_9_8_j:1.1.1.8
	openssl_0_9_8_h:1.1.1.8
	openssl_0_9_7j:1.1.1.7
	openssl:1.1.1
	OPENSSL_0_9_7G:1.1.1.6
	OPENSSL_0_9_7D:1.1.1.5
	OPENSSL_0_9_7C:1.1.1.4
	OPENSSL_0_9_7B:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2002.08.30.10.24.16;	author markus;	state dead;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.26.22.15.48;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.52;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.13;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.29;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.34.03;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.17;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.10.24;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.20.41.28;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.04.29.05.36.58;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.06.27.05.05.29;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove generated files and generated symlinks (in make clean)
@
text
@#!/usr/bin/perl
#
# CA - wrapper around ca to make it easier to use ... basically ca requires
#      some setup stuff to be done before you can use it and this makes
#      things easier between now and when Eric is convinced to fix it :-)
#
# CA -newca ... will setup the right stuff
# CA -newreq[-nodes] ... will generate a certificate request 
# CA -sign ... will sign the generated request and output 
#
# At the end of that grab newreq.pem and newcert.pem (one has the key 
# and the other the certificate) and cat them together and that is what
# you want/need ... I'll make even this a little cleaner later.
#
#
# 12-Jan-96 tjh    Added more things ... including CA -signcert which
#                  converts a certificate to a request and then signs it.
# 10-Jan-96 eay    Fixed a few more bugs and added the SSLEAY_CONFIG
#		   environment variable so this can be driven from
#		   a script.
# 25-Jul-96 eay    Cleaned up filenames some more.
# 11-Jun-96 eay    Fixed a few filename missmatches.
# 03-May-96 eay    Modified to use 'ssleay cmd' instead of 'cmd'.
# 18-Apr-96 tjh    Original hacking
#
# Tim Hudson
# tjh@@cryptsoft.com
#

# 27-Apr-98 snh    Translation into perl, fix existing CA bug.
#
#
# Steve Henson
# shenson@@bigfoot.com

# default openssl.cnf file has setup as per the following
# demoCA ... where everything is stored

$SSLEAY_CONFIG=$ENV{"SSLEAY_CONFIG"};
$DAYS="-days 365";
$REQ="openssl req $SSLEAY_CONFIG";
$CA="openssl ca $SSLEAY_CONFIG";
$VERIFY="openssl verify";
$X509="openssl x509";
$PKCS12="openssl pkcs12";

$CATOP="./demoCA";
$CAKEY="cakey.pem";
$CACERT="cacert.pem";

$DIRMODE = 0777;

$RET = 0;

foreach (@@ARGV) {
	if ( /^(-\?|-h|-help)$/ ) {
	    print STDERR "usage: CA -newcert|-newreq|newreq-nodes|-newca|-sign|-verify\n";
	    exit 0;
	} elsif (/^-newcert$/) {
	    # create a certificate
	    system ("$REQ -new -x509 -keyout newreq.pem -out newreq.pem $DAYS");
	    $RET=$?;
	    print "Certificate (and private key) is in newreq.pem\n"
	} elsif (/^-newreq$/) {
	    # create a certificate request
	    system ("$REQ -new -keyout newreq.pem -out newreq.pem $DAYS");
	    $RET=$?;
	    print "Request (and private key) is in newreq.pem\n";
	} elsif (/^-newreq-nodes$/) {
	    # create a certificate request
	    system ("$REQ -new -nodes -keyout newreq.pem -out newreq.pem $DAYS");
	    $RET=$?;
	    print "Request (and private key) is in newreq.pem\n";
	} elsif (/^-newca$/) {
		# if explicitly asked for or it doesn't exist then setup the
		# directory structure that Eric likes to manage things 
	    $NEW="1";
	    if ( "$NEW" || ! -f "${CATOP}/serial" ) {
		# create the directory hierarchy
		mkdir $CATOP, $DIRMODE;
		mkdir "${CATOP}/certs", $DIRMODE;
		mkdir "${CATOP}/crl", $DIRMODE ;
		mkdir "${CATOP}/newcerts", $DIRMODE;
		mkdir "${CATOP}/private", $DIRMODE;
		open OUT, ">${CATOP}/serial";
		print OUT "01\n";
		close OUT;
		open OUT, ">${CATOP}/index.txt";
		close OUT;
	    }
	    if ( ! -f "${CATOP}/private/$CAKEY" ) {
		print "CA certificate filename (or enter to create)\n";
		$FILE = <STDIN>;

		chop $FILE;

		# ask user for existing CA certificate
		if ($FILE) {
		    cp_pem($FILE,"${CATOP}/private/$CAKEY", "PRIVATE");
		    cp_pem($FILE,"${CATOP}/$CACERT", "CERTIFICATE");
		    $RET=$?;
		} else {
		    print "Making CA certificate ...\n";
		    system ("$REQ -new -x509 -keyout " .
			"${CATOP}/private/$CAKEY -out ${CATOP}/$CACERT $DAYS");
		    $RET=$?;
		}
	    }
	} elsif (/^-pkcs12$/) {
	    my $cname = $ARGV[1];
	    $cname = "My Certificate" unless defined $cname;
	    system ("$PKCS12 -in newcert.pem -inkey newreq.pem " .
			"-certfile ${CATOP}/$CACERT -out newcert.p12 " .
			"-export -name \"$cname\"");
	    $RET=$?;
	    exit $RET;
	} elsif (/^-xsign$/) {
	    system ("$CA -policy policy_anything -infiles newreq.pem");
	    $RET=$?;
	} elsif (/^(-sign|-signreq)$/) {
	    system ("$CA -policy policy_anything -out newcert.pem " .
							"-infiles newreq.pem");
	    $RET=$?;
	    print "Signed certificate is in newcert.pem\n";
	} elsif (/^(-signCA)$/) {
	    system ("$CA -policy policy_anything -out newcert.pem " .
					"-extensions v3_ca -infiles newreq.pem");
	    $RET=$?;
	    print "Signed CA certificate is in newcert.pem\n";
	} elsif (/^-signcert$/) {
	    system ("$X509 -x509toreq -in newreq.pem -signkey newreq.pem " .
								"-out tmp.pem");
	    system ("$CA -policy policy_anything -out newcert.pem " .
							"-infiles tmp.pem");
	    $RET = $?;
	    print "Signed certificate is in newcert.pem\n";
	} elsif (/^-verify$/) {
	    if (shift) {
		foreach $j (@@ARGV) {
		    system ("$VERIFY -CAfile $CATOP/$CACERT $j");
		    $RET=$? if ($? != 0);
		}
		exit $RET;
	    } else {
		    system ("$VERIFY -CAfile $CATOP/$CACERT newcert.pem");
		    $RET=$?;
	    	    exit 0;
	    }
	} else {
	    print STDERR "Unknown arg $_\n";
	    print STDERR "usage: CA -newcert|-newreq|newreq-nodes|-newca|-sign|-verify\n";
	    exit 1;
	}
}

exit $RET;

sub cp_pem {
my ($infile, $outfile, $bound) = @@_;
open IN, $infile;
open OUT, ">$outfile";
my $flag = 0;
while (<IN>) {
	$flag = 1 if (/^-----BEGIN.*$bound/) ;
	print OUT $_ if ($flag);
	if (/^-----END.*$bound/) {
		close IN;
		close OUT;
		return;
	}
}
}

@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@@


1.5
log
@Use correct interpreters
@
text
@d8 1
a8 1
# CA -newreq ... will generate a certificate request 
d57 1
a57 1
	    print STDERR "usage: CA -newcert|-newreq|-newca|-sign|-verify\n";
d69 5
d151 1
a151 1
	    print STDERR "usage: CA -newcert|-newreq|-newca|-sign|-verify\n";
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
@


1.3
log
@OpenSSL 0.9.5a merge
@
text
@d39 1
d120 5
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d1 1
a1 1
#!/sw/bin/perl
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
d44 1
d69 1
a69 1
		# if explictly asked for or it doesn't exist then setup the
d103 8
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d1 1
a1 1
#!/usr/bin/perl
d8 1
a8 1
# CA -newreq[-nodes] ... will generate a certificate request 
a38 1
$SSLEAY_CONFIG=$ENV{"SSLEAY_CONFIG"};
a43 1
$PKCS12="openssl pkcs12";
d55 1
a55 1
	    print STDERR "usage: CA -newcert|-newreq|-newreq-nodes|-newca|-sign|-verify\n";
a66 5
	} elsif (/^-newreq-nodes$/) {
	    # create a certificate request
	    system ("$REQ -new -nodes -keyout newreq.pem -out newreq.pem $DAYS");
	    $RET=$?;
	    print "Request (and private key) is in newreq.pem\n";
d68 1
a68 1
		# if explicitly asked for or it doesn't exist then setup the
a101 8
	} elsif (/^-pkcs12$/) {
	    my $cname = $ARGV[1];
	    $cname = "My Certificate" unless defined $cname;
	    system ("$PKCS12 -in newcert.pem -inkey newreq.pem " .
			"-certfile ${CATOP}/$CACERT -out newcert.p12 " .
			"-export -name \"$cname\"");
	    $RET=$?;
	    exit $RET;
a109 5
	} elsif (/^(-signCA)$/) {
	    system ("$CA -policy policy_anything -out newcert.pem " .
					"-extensions v3_ca -infiles newreq.pem");
	    $RET=$?;
	    print "Signed CA certificate is in newcert.pem\n";
d131 1
a131 1
	    print STDERR "usage: CA -newcert|-newreq|-newreq-nodes|-newca|-sign|-verify\n";
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d1 1
a1 1
#!/usr/local/bin/perl5
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
@


1.1.1.4
log
@import 0.9.7c
@
text
@d1 1
a1 1
#!/usr/bin/perl
@


1.1.1.5
log
@import openssl-0.9.7d
@
text
@d1 1
a1 1
#!/usr/local/bin/perl
@


1.1.1.6
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d1 1
a1 1
#!/usr/bin/perl
a38 8
my $openssl;
if(defined $ENV{OPENSSL}) {
	$openssl = $ENV{OPENSSL};
} else {
	$openssl = "openssl";
	$ENV{OPENSSL} = $openssl;
}

d41 5
a45 5
$REQ="$openssl req $SSLEAY_CONFIG";
$CA="$openssl ca $SSLEAY_CONFIG";
$VERIFY="$openssl verify";
$X509="$openssl x509";
$PKCS12="$openssl pkcs12";
d85 3
a107 4
	    }
	    if (! -f "${CATOP}/serial" ) {
		system ("$X509 -in ${CATOP}/$CACERT -noout "
			. "-next_serial -out ${CATOP}/serial");
@


1.1.1.7
log
@import of openssl-0.9.7j
@
text
@d69 1
a69 1
	    system ("$REQ -new -x509 -keyout newkey.pem -out newcert.pem $DAYS");
d71 1
a71 1
	    print "Certificate is in newcert.pem, private key is in newkey.pem\n"
d74 1
a74 1
	    system ("$REQ -new -keyout newkey.pem -out newreq.pem $DAYS");
d76 1
a76 1
	    print "Request is in newreq.pem, private key is in newkey.pem\n";
d79 1
a79 1
	    system ("$REQ -new -nodes -keyout newkey.pem -out newreq.pem $DAYS");
d81 1
a81 1
	    print "Request is in newreq.pem, private key is in newkey.pem\n";
d121 1
a121 1
	    system ("$PKCS12 -in newcert.pem -inkey newkey.pem " .
a124 1
	    print "PKCS #12 file is in newcert.p12\n";
@


1.1.1.8
log
@import of OpenSSL 0.9.8h
@
text
@d48 1
a48 2
$DAYS="-days 365";	# 1 year
$CADAYS="-days 1095";	# 3 years
a56 1
$CAREQ="careq.pem";
a94 3
		open OUT, ">${CATOP}/crlnumber";
		print OUT "01\n";
		close OUT;
d109 2
a110 7
		    system ("$REQ -new -keyout " .
			"${CATOP}/private/$CAKEY -out ${CATOP}/$CAREQ");
		    system ("$CA -create_serial " .
			"-out ${CATOP}/$CACERT $CADAYS -batch " . 
			"-keyfile ${CATOP}/private/$CAKEY -selfsign " .
			"-extensions v3_ca " .
			"-infiles ${CATOP}/$CAREQ ");
d113 4
@


