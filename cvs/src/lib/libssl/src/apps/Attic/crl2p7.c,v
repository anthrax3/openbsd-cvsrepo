head	1.21;
access;
symbols
	OPENBSD_5_6:1.20.0.4
	OPENBSD_5_6_BASE:1.20
	butholakala:1.7
	openssl_1_0_1_g:1.1.1.4
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	openssl_1_0_1_c:1.1.1.4
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	openssl_1_0_0_f:1.1.1.4
	openssl_1_0_0_e:1.1.1.4
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.20;
commitid	7A7DObXgY4Fni8xJ;

1.20
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	EB0l28piqIRSpBUh;

1.19
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.22.13.32.17;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.16.16.55.21;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.54;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.17;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: crl2p7.c,v 1.20 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* This was written by Gordon Chaffee <chaffee@@plateau.cs.berkeley.edu>
 * and donated 'to the cause' along with lots and lots of other fixes to
 * the library. */

#include <sys/types.h>

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/pkcs7.h>
#include <openssl/x509.h>

static int add_certs_from_file(STACK_OF(X509) * stack, char *certfile);

/* -inform arg	- input format - default PEM (DER or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 */

int crl2pkcs7_main(int, char **);

int
crl2pkcs7_main(int argc, char **argv)
{
	int i, badops = 0;
	BIO *in = NULL, *out = NULL;
	int informat, outformat;
	char *infile, *outfile, *prog, *certfile;
	PKCS7 *p7 = NULL;
	PKCS7_SIGNED *p7s = NULL;
	X509_CRL *crl = NULL;
	STACK_OF(OPENSSL_STRING) * certflst = NULL;
	STACK_OF(X509_CRL) * crl_stack = NULL;
	STACK_OF(X509) * cert_stack = NULL;
	int ret = 1, nocrl = 0;

	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-nocrl") == 0) {
			nocrl = 1;
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-certfile") == 0) {
			if (--argc < 1)
				goto bad;
			if (!certflst)
				certflst = sk_OPENSSL_STRING_new_null();
			sk_OPENSSL_STRING_push(certflst, *(++argv));
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg    input format - DER or PEM\n");
		BIO_printf(bio_err, " -outform arg   output format - DER or PEM\n");
		BIO_printf(bio_err, " -in arg        input file\n");
		BIO_printf(bio_err, " -out arg       output file\n");
		BIO_printf(bio_err, " -certfile arg  certificates file of chain to a trusted CA\n");
		BIO_printf(bio_err, "                (can be used more than once)\n");
		BIO_printf(bio_err, " -nocrl         no crl to load, just certs from '-certfile'\n");
		ret = 1;
		goto end;
	}
	ERR_load_crypto_strings();

	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (!nocrl) {
		if (infile == NULL)
			BIO_set_fp(in, stdin, BIO_NOCLOSE);
		else {
			if (BIO_read_filename(in, infile) <= 0) {
				perror(infile);
				goto end;
			}
		}

		if (informat == FORMAT_ASN1)
			crl = d2i_X509_CRL_bio(in, NULL);
		else if (informat == FORMAT_PEM)
			crl = PEM_read_bio_X509_CRL(in, NULL, NULL, NULL);
		else {
			BIO_printf(bio_err,
			    "bad input format specified for input crl\n");
			goto end;
		}
		if (crl == NULL) {
			BIO_printf(bio_err, "unable to load CRL\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if ((p7 = PKCS7_new()) == NULL)
		goto end;
	if ((p7s = PKCS7_SIGNED_new()) == NULL)
		goto end;
	p7->type = OBJ_nid2obj(NID_pkcs7_signed);
	p7->d.sign = p7s;
	p7s->contents->type = OBJ_nid2obj(NID_pkcs7_data);

	if (!ASN1_INTEGER_set(p7s->version, 1))
		goto end;
	if ((crl_stack = sk_X509_CRL_new_null()) == NULL)
		goto end;
	p7s->crl = crl_stack;
	if (crl != NULL) {
		sk_X509_CRL_push(crl_stack, crl);
		crl = NULL;	/* now part of p7 for freeing */
	}
	if ((cert_stack = sk_X509_new_null()) == NULL)
		goto end;
	p7s->cert = cert_stack;

	if (certflst)
		for (i = 0; i < sk_OPENSSL_STRING_num(certflst); i++) {
			certfile = sk_OPENSSL_STRING_value(certflst, i);
			if (add_certs_from_file(cert_stack, certfile) < 0) {
				BIO_printf(bio_err,
				    "error loading certificates\n");
				ERR_print_errors(bio_err);
				goto end;
			}
		}

	sk_OPENSSL_STRING_free(certflst);

	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	if (outformat == FORMAT_ASN1)
		i = i2d_PKCS7_bio(out, p7);
	else if (outformat == FORMAT_PEM)
		i = PEM_write_bio_PKCS7(out, p7);
	else {
		BIO_printf(bio_err,
		    "bad output format specified for outfile\n");
		goto end;
	}
	if (!i) {
		BIO_printf(bio_err, "unable to write pkcs7 object\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	ret = 0;

end:
	if (in != NULL)
		BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (p7 != NULL)
		PKCS7_free(p7);
	if (crl != NULL)
		X509_CRL_free(crl);


	return (ret);
}

/*
 *----------------------------------------------------------------------
 * int add_certs_from_file
 *
 *	Read a list of certificates to be checked from a file.
 *
 * Results:
 *	number of certs added if successful, -1 if not.
 *----------------------------------------------------------------------
 */
static int
add_certs_from_file(STACK_OF(X509) * stack, char *certfile)
{
	BIO *in = NULL;
	int count = 0;
	int ret = -1;
	STACK_OF(X509_INFO) * sk = NULL;
	X509_INFO *xi;

	in = BIO_new(BIO_s_file());
	if ((in == NULL) || (BIO_read_filename(in, certfile) <= 0)) {
		BIO_printf(bio_err, "error opening the file, %s\n", certfile);
		goto end;
	}
	/* This loads from a file, a stack of x509/crl/pkey sets */
	sk = PEM_X509_INFO_read_bio(in, NULL, NULL, NULL);
	if (sk == NULL) {
		BIO_printf(bio_err, "error reading the file, %s\n", certfile);
		goto end;
	}
	/* scan over it and pull out the CRL's */
	while (sk_X509_INFO_num(sk)) {
		xi = sk_X509_INFO_shift(sk);
		if (xi->x509 != NULL) {
			sk_X509_push(stack, xi->x509);
			xi->x509 = NULL;
			count++;
		}
		X509_INFO_free(xi);
	}

	ret = count;

end:
	/* never need to free x */
	if (in != NULL)
		BIO_free(in);
	if (sk != NULL)
		sk_X509_INFO_free(sk);
	return (ret);
}
@


1.20
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: crl2p7.c,v 1.19 2014/06/12 15:49:27 deraadt Exp $ */
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d260 1
a260 1
	
@


1.18
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/crl2p7.c */
@


1.17
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a101 2
	signal(SIGPIPE, SIG_IGN);

@


1.16
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d63 2
d67 1
a67 1
#include <sys/types.h>
d69 1
d72 3
a75 3
#include <openssl/pkcs7.h>
#include <openssl/pem.h>
#include <openssl/objects.h>
@


1.15
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a100 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.14
log
@More KNF.
@
text
@d99 1
a99 1
	apps_startup();
d263 1
a263 1
	apps_shutdown();
@


1.13
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d184 2
a185 1
			BIO_printf(bio_err, "bad input format specified for input crl\n");
d219 2
a220 1
				BIO_printf(bio_err, "error loading certificates\n");
d242 2
a243 1
		BIO_printf(bio_err, "bad output format specified for outfile\n");
@


1.12
log
@KaboomNF
@
text
@a74 2
#undef PROG
#define PROG	crl2pkcs7_main
d82 1
a82 1
int MAIN(int, char **);
d85 1
a85 1
MAIN(int argc, char **argv)
@


1.11
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d74 1
a74 1
static int add_certs_from_file(STACK_OF(X509) *stack, char *certfile);
d96 3
a98 3
	STACK_OF(OPENSSL_STRING) *certflst = NULL;
	STACK_OF(X509_CRL) *crl_stack = NULL;
	STACK_OF(X509) *cert_stack = NULL;
d105 1
a105 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d127 1
a127 1
			infile= *(++argv);
d133 1
a133 1
			outfile= *(++argv);
d137 3
a139 2
			if (!certflst) certflst = sk_OPENSSL_STRING_new_null();
				sk_OPENSSL_STRING_push(certflst, *(++argv));
a162 1

a170 1

a194 1

d210 1
a210 1
		crl=NULL; /* now part of p7 for freeing */
a211 1

d216 8
a223 6
	if (certflst) for (i = 0; i < sk_OPENSSL_STRING_num(certflst); i++) {
		certfile = sk_OPENSSL_STRING_value(certflst, i);
		if (add_certs_from_file(cert_stack, certfile) < 0) {
			BIO_printf(bio_err, "error loading certificates\n");
			ERR_print_errors(bio_err);
			goto end;
a224 1
	}
d263 1
a263 1
	return(ret);
d277 1
a277 1
add_certs_from_file(STACK_OF(X509) *stack, char *certfile)
d282 1
a282 1
	STACK_OF(X509_INFO) *sk = NULL;
a289 1

a295 1

@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d265 1
a265 1
	OPENSSL_EXIT(ret);
@


1.9
log
@Initial KNF.
@
text
@d212 1
a212 1
		crl=NULL; /* now part of p7 for OPENSSL_freeing */
d314 1
a314 1
	/* never need to OPENSSL_free x */
@


1.8
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d86 7
a92 6
int MAIN(int argc, char **argv)
	{
	int i,badops=0;
	BIO *in=NULL,*out=NULL;
	int informat,outformat;
	char *infile,*outfile,*prog,*certfile;
d95 5
a99 5
	X509_CRL *crl=NULL;
	STACK_OF(OPENSSL_STRING) *certflst=NULL;
	STACK_OF(X509_CRL) *crl_stack=NULL;
	STACK_OF(X509) *cert_stack=NULL;
	int ret=1,nocrl=0;
d104 2
a105 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d107 4
a110 4
	infile=NULL;
	outfile=NULL;
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d112 1
a112 1
	prog=argv[0];
d115 12
a126 15
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d128 5
a132 8
			}
		else if (strcmp(*argv,"-nocrl") == 0)
			{
			nocrl=1;
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d134 8
a141 11
			}
		else if (strcmp(*argv,"-certfile") == 0)
			{
			if (--argc < 1) goto bad;
			if(!certflst) certflst = sk_OPENSSL_STRING_new_null();
			sk_OPENSSL_STRING_push(certflst,*(++argv));
			}
		else
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d143 1
a143 1
			}
d146 1
a146 1
		}
d148 1
a148 2
	if (badops)
		{
d150 9
a158 9
		BIO_printf(bio_err,"%s [options] <infile >outfile\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg    input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg   output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg        input file\n");
		BIO_printf(bio_err," -out arg       output file\n");
		BIO_printf(bio_err," -certfile arg  certificates file of chain to a trusted CA\n");
		BIO_printf(bio_err,"                (can be used more than once)\n");
		BIO_printf(bio_err," -nocrl         no crl to load, just certs from '-certfile'\n");
d161 1
a161 1
		}
d165 3
a167 4
	in=BIO_new(BIO_s_file());
	out=BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL))
		{
d170 1
a170 1
		}
d172 1
a172 2
	if (!nocrl)
		{
d174 3
a176 5
			BIO_set_fp(in,stdin,BIO_NOCLOSE);
		else
			{
			if (BIO_read_filename(in,infile) <= 0)
				{
a178 1
				}
d180 1
d182 2
a183 2
		if 	(informat == FORMAT_ASN1)
			crl=d2i_X509_CRL_bio(in,NULL);
d185 3
a187 3
			crl=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
		else	{
			BIO_printf(bio_err,"bad input format specified for input crl\n");
d189 3
a191 4
			}
		if (crl == NULL)
			{
			BIO_printf(bio_err,"unable to load CRL\n");
a193 1
			}
d195 17
a211 13
	
	if ((p7=PKCS7_new()) == NULL) goto end;
	if ((p7s=PKCS7_SIGNED_new()) == NULL) goto end;
	p7->type=OBJ_nid2obj(NID_pkcs7_signed);
	p7->d.sign=p7s;
	p7s->contents->type=OBJ_nid2obj(NID_pkcs7_data);

	if (!ASN1_INTEGER_set(p7s->version,1)) goto end;
	if ((crl_stack=sk_X509_CRL_new_null()) == NULL) goto end;
	p7s->crl=crl_stack;
	if (crl != NULL)
		{
		sk_X509_CRL_push(crl_stack,crl);
d213 1
a213 1
		}
d215 3
a217 2
	if ((cert_stack=sk_X509_new_null()) == NULL) goto end;
	p7s->cert=cert_stack;
d219 1
a219 1
	if(certflst) for(i = 0; i < sk_OPENSSL_STRING_num(certflst); i++) {
d221 1
a221 2
		if (add_certs_from_file(cert_stack,certfile) < 0)
			{
d225 1
a225 1
			}
d230 4
a233 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a235 1
			}
d237 1
d239 2
a240 2
	if 	(outformat == FORMAT_ASN1)
		i=i2d_PKCS7_bio(out,p7);
d242 3
a244 3
		i=PEM_write_bio_PKCS7(out,p7);
	else	{
		BIO_printf(bio_err,"bad output format specified for outfile\n");
d246 3
a248 4
		}
	if (!i)
		{
		BIO_printf(bio_err,"unable to write pkcs7 object\n");
d251 3
a253 2
		}
	ret=0;
d255 8
a262 4
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (p7 != NULL) PKCS7_free(p7);
	if (crl != NULL) X509_CRL_free(crl);
d266 1
a266 1
	}
d278 7
a284 6
static int add_certs_from_file(STACK_OF(X509) *stack, char *certfile)
	{
	BIO *in=NULL;
	int count=0;
	int ret= -1;
	STACK_OF(X509_INFO) *sk=NULL;
d287 3
a289 4
	in=BIO_new(BIO_s_file());
	if ((in == NULL) || (BIO_read_filename(in,certfile) <= 0))
		{
		BIO_printf(bio_err,"error opening the file, %s\n",certfile);
d291 1
a291 1
		}
d294 1
a294 1
	sk=PEM_X509_INFO_read_bio(in,NULL,NULL,NULL);
d296 1
a296 1
		BIO_printf(bio_err,"error reading the file, %s\n",certfile);
d301 5
a305 7
	while (sk_X509_INFO_num(sk))
		{
		xi=sk_X509_INFO_shift(sk);
		if (xi->x509 != NULL)
			{
			sk_X509_push(stack,xi->x509);
			xi->x509=NULL;
d307 1
a307 1
			}
d309 3
a311 1
		}
a312 1
	ret=count;
d314 7
a320 6
 	/* never need to OPENSSL_free x */
	if (in != NULL) BIO_free(in);
	if (sk != NULL) sk_X509_INFO_free(sk);
	return(ret);
	}

@


1.7
log
@resolve conflicts, fix local changes
@
text
@a243 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@a65 1
#include <sys/stat.h>
d95 1
a95 1
	STACK *certflst=NULL;
d143 2
a144 2
			if(!certflst) certflst = sk_new_null();
			sk_push(certflst,*(++argv));
d229 2
a230 2
	if(certflst) for(i = 0; i < sk_num(certflst); i++) {
		certfile = sk_value(certflst, i);
d239 1
a239 1
	sk_free(certflst);
a296 1
	struct stat st;
a301 6

	if ((stat(certfile,&st) != 0))
		{
		BIO_printf(bio_err,"unable to load the file, %s\n",certfile);
		goto end;
		}
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d283 1
a283 1
	EXIT(ret);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d169 2
a170 1
		EXIT(1);
d245 1
a245 1
#ifdef VMS
d282 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d144 1
a144 1
			if(!certflst) certflst = sk_new(NULL);
d218 1
a218 1
	if ((crl_stack=sk_X509_CRL_new(NULL)) == NULL) goto end;
d223 1
a223 1
		crl=NULL; /* now part of p7 for Freeing */
d226 1
a226 1
	if ((cert_stack=sk_X509_new(NULL)) == NULL) goto end;
d242 1
d244 7
d277 1
a277 1
	if (out != NULL) BIO_free(out);
d338 1
a338 1
 	/* never need to Free x */
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d79 1
a79 1
/* -inform arg	- input format - default PEM (one of DER, TXT or PEM)
d85 2
d162 2
a163 2
		BIO_printf(bio_err," -inform arg    input format - one of DER TXT PEM\n");
		BIO_printf(bio_err," -outform arg   output format - one of DER TXT PEM\n");
@


1.1
log
@Initial revision
@
text
@d68 6
a73 12
#include "err.h"
#include "evp.h"
#include "x509.h"
#include "pkcs7.h"
#include "pem.h"
#include "objects.h"

#ifndef NOPROTO
static int add_certs_from_file(STACK *stack, char *certfile);
#else
static int add_certs_from_file();
#endif
d75 1
d85 1
a85 3
int MAIN(argc, argv)
int argc;
char **argv;
d94 3
a96 2
	STACK *crl_stack=NULL;
	STACK *cert_stack=NULL;
a108 1
	certfile=NULL;
d142 2
a143 1
			certfile= *(++argv);
d162 1
a162 1
		BIO_printf(bio_err," -in arg        inout file\n");
d165 1
d196 1
a196 1
			crl=PEM_read_bio_X509_CRL(in,NULL,NULL);
d216 1
a216 1
	if ((crl_stack=sk_new(NULL)) == NULL) goto end;
d220 1
a220 1
		sk_push(crl_stack,(char *)crl);
d224 1
a224 1
	if ((cert_stack=sk_new(NULL)) == NULL) goto end;
d227 2
a228 2
	if (certfile != NULL) 
		{
d231 1
a231 1
			BIO_printf(bio_err,"error loading certificates\n");
d235 3
a237 1
		}
d284 1
a284 3
static int add_certs_from_file(stack,certfile)
STACK *stack;
char *certfile;
d290 1
a290 1
	STACK *sk=NULL;
d295 1
a295 1
		BIO_printf(bio_err,"unable to file the file, %s\n",certfile);
d302 1
d307 5
a311 2
	sk=PEM_X509_INFO_read_bio(in,NULL,NULL);
	if (sk == NULL) goto end;
d314 1
a314 1
	while (sk_num(sk))
d316 1
a316 1
		xi=(X509_INFO *)sk_shift(sk);
d319 1
a319 1
			sk_push(stack,(char *)xi->x509);
d330 1
a330 1
	if (sk != NULL) sk_free(sk);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d68 12
a79 6
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pkcs7.h>
#include <openssl/pem.h>
#include <openssl/objects.h>
a80 1
static int add_certs_from_file(STACK_OF(X509) *stack, char *certfile);
d84 1
a84 1
/* -inform arg	- input format - default PEM (DER or PEM)
d90 3
a92 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
d101 2
a102 3
	STACK *certflst=NULL;
	STACK_OF(X509_CRL) *crl_stack=NULL;
	STACK_OF(X509) *cert_stack=NULL;
d115 1
d149 1
a149 2
			if(!certflst) certflst = sk_new_null();
			sk_push(certflst,*(++argv));
d166 3
a168 3
		BIO_printf(bio_err," -inform arg    input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg   output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg        input file\n");
a170 1
		BIO_printf(bio_err,"                (can be used more than once)\n");
d172 1
a172 2
		ret = 1;
		goto end;
d201 1
a201 1
			crl=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
d221 1
a221 1
	if ((crl_stack=sk_X509_CRL_new_null()) == NULL) goto end;
d225 2
a226 2
		sk_X509_CRL_push(crl_stack,crl);
		crl=NULL; /* now part of p7 for OPENSSL_freeing */
d229 1
a229 1
	if ((cert_stack=sk_X509_new_null()) == NULL) goto end;
d232 2
a233 2
	if(certflst) for(i = 0; i < sk_num(certflst); i++) {
		certfile = sk_value(certflst, i);
d236 1
a236 1
			BIO_printf(bio_err, "error loading certificates\n");
d240 1
a240 3
	}

	sk_free(certflst);
a242 1
		{
a243 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d270 1
a270 1
	if (out != NULL) BIO_free_all(out);
a273 1
	apps_shutdown();
d287 3
a289 1
static int add_certs_from_file(STACK_OF(X509) *stack, char *certfile)
d295 1
a295 1
	STACK_OF(X509_INFO) *sk=NULL;
d300 1
a300 1
		BIO_printf(bio_err,"unable to load the file, %s\n",certfile);
a306 1
		BIO_printf(bio_err,"error opening the file, %s\n",certfile);
d311 2
a312 5
	sk=PEM_X509_INFO_read_bio(in,NULL,NULL,NULL);
	if (sk == NULL) {
		BIO_printf(bio_err,"error reading the file, %s\n",certfile);
		goto end;
	}
d315 1
a315 1
	while (sk_X509_INFO_num(sk))
d317 1
a317 1
		xi=sk_X509_INFO_shift(sk);
d320 1
a320 1
			sk_X509_push(stack,xi->x509);
d329 1
a329 1
 	/* never need to OPENSSL_free x */
d331 1
a331 1
	if (sk != NULL) sk_X509_INFO_free(sk);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d283 1
a283 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@d66 1
d96 1
a96 1
	STACK_OF(OPENSSL_STRING) *certflst=NULL;
d144 2
a145 2
			if(!certflst) certflst = sk_OPENSSL_STRING_new_null();
			sk_OPENSSL_STRING_push(certflst,*(++argv));
d230 2
a231 2
	if(certflst) for(i = 0; i < sk_OPENSSL_STRING_num(certflst); i++) {
		certfile = sk_OPENSSL_STRING_value(certflst, i);
d240 1
a240 1
	sk_OPENSSL_STRING_free(certflst);
d298 1
d304 6
@


