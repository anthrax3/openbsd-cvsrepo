head	1.36;
access;
symbols
	OPENBSD_5_6:1.35.0.4
	OPENBSD_5_6_BASE:1.35
	butholakala:1.16
	openssl_1_0_1_g:1.1.1.12
	OPENBSD_5_5:1.15.0.8
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	openssl_1_0_1_c:1.1.1.11
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	openssl_1_0_0_f:1.1.1.10
	openssl_1_0_0_e:1.1.1.10
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	openssh_1_0_0_a:1.1.1.10
	OPENBSD_4_8:1.13.0.8
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	openssl_0_9_8_k:1.1.1.9
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	openssl_0_9_8_j:1.1.1.9
	openssl_0_9_8_h:1.1.1.8
	pre_openssl_0_9_8h:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	openssl_0_9_7j:1.1.1.7
	openssl:1.1.1
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENSSL_0_9_7G:1.1.1.7
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENSSL_0_9_7D:1.1.1.6
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.5
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENSSL_0_9_7B:1.1.1.5
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.4
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.35;
commitid	7A7DObXgY4Fni8xJ;

1.35
date	2014.07.11.09.24.44;	author beck;	state Exp;
branches;
next	1.34;
commitid	cCGiAdDteN08GytD;

1.34
date	2014.07.09.09.06.58;	author bcook;	state Exp;
branches;
next	1.33;
commitid	wo9E4ACdFuC7DqQu;

1.33
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	mJUVYpkFBZ0Zv2bG;

1.32
date	2014.05.26.13.55.24;	author jsing;	state Exp;
branches;
next	1.31;

1.31
date	2014.05.23.16.15.52;	author jsing;	state Exp;
branches;
next	1.30;

1.30
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.29;

1.29
date	2014.05.07.21.32.19;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2014.04.25.14.08.32;	author jsing;	state Exp;
branches;
next	1.27;

1.27
date	2014.04.25.14.00.15;	author jsing;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.25.13.55.25;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.22.12.43.34;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.19.16.46.08;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.19.16.31.51;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.18.14.37.41;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.17.22.44.34;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.17.21.11.28;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.16.15.57.43;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.12.15.18;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.29.05.39.15;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.10.16.31.53;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.21.01.49.11;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.53;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.10;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.10;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.34.09;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.09.12.20.42.31;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.05.11.21.34.16;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.20.41.27;	author markus;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.04.29.05.36.58;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.01.09.12.13.48;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.10.01.22.54.00;	author djm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2012.10.13.21.23.31;	author djm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: apps.h,v 1.35 2014/07/11 09:24:44 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#ifndef HEADER_APPS_H
#define HEADER_APPS_H

#include <openssl/opensslconf.h>

#include <openssl/bio.h>
#include <openssl/conf.h>
#include <openssl/lhash.h>
#include <openssl/ossl_typ.h>
#include <openssl/txt_db.h>
#include <openssl/x509.h>

#ifndef OPENSSL_NO_ENGINE
#include <openssl/engine.h>
#endif

#ifndef OPENSSL_NO_OCSP
#include <openssl/ocsp.h>
#endif

extern CONF *config;
extern char *default_config_file;
extern BIO *bio_err;

typedef struct args_st {
	char **data;
	int count;
} ARGS;

#define PW_MIN_LENGTH 4
typedef struct pw_cb_data {
	const void *password;
	const char *prompt_info;
} PW_CB_DATA;

int password_callback(char *buf, int bufsiz, int verify, void *cb_data);

int setup_ui_method(void);
void destroy_ui_method(void);

int should_retry(int i);
int args_from_file(char *file, int *argc, char **argv[]);
int str2fmt(char *s);
void program_name(char *in, char *out, int size);
int chopup_args(ARGS *arg, char *buf, int *argc, char **argv[]);
#ifdef HEADER_X509_H
int dump_cert_text(BIO *out, X509 *x);
void print_name(BIO *out, const char *title, X509_NAME *nm,
    unsigned long lflags);
#endif
int set_cert_ex(unsigned long *flags, const char *arg);
int set_name_ex(unsigned long *flags, const char *arg);
int set_ext_copy(int *copy_type, const char *arg);
int copy_extensions(X509 *x, X509_REQ *req, int copy_type);
int app_passwd(BIO *err, char *arg1, char *arg2, char **pass1, char **pass2);
int add_oid_section(BIO *err, CONF *conf);
X509 *load_cert(BIO *err, const char *file, int format,
    const char *pass, ENGINE *e, const char *cert_descrip);
EVP_PKEY *load_key(BIO *err, const char *file, int format, int maybe_stdin,
    const char *pass, ENGINE *e, const char *key_descrip);
EVP_PKEY *load_pubkey(BIO *err, const char *file, int format, int maybe_stdin,
    const char *pass, ENGINE *e, const char *key_descrip);
STACK_OF(X509) *load_certs(BIO *err, const char *file, int format,
    const char *pass, ENGINE *e, const char *cert_descrip);
STACK_OF(X509_CRL) *load_crls(BIO *err, const char *file, int format,
    const char *pass, ENGINE *e, const char *cert_descrip);
X509_STORE *setup_verify(BIO *bp, char *CAfile, char *CApath);
#ifndef OPENSSL_NO_ENGINE
ENGINE *setup_engine(BIO *err, const char *engine, int debug);
#endif

#ifndef OPENSSL_NO_OCSP
OCSP_RESPONSE *process_responder(BIO *err, OCSP_REQUEST *req,
    char *host, char *path, char *port, int use_ssl,
    STACK_OF(CONF_VALUE) *headers, int req_timeout);
#endif

int load_config(BIO *err, CONF *cnf);
char *make_config_name(void);

/* Functions defined in ca.c and also used in ocsp.c */
int unpack_revinfo(ASN1_TIME **prevtm, int *preason, ASN1_OBJECT **phold,
    ASN1_GENERALIZEDTIME **pinvtm, const char *str);

#define DB_type         0
#define DB_exp_date     1
#define DB_rev_date     2
#define DB_serial       3       /* index - unique */
#define DB_file         4
#define DB_name         5       /* index - unique when active and not disabled */
#define DB_NUMBER       6

#define DB_TYPE_REV	'R'
#define DB_TYPE_EXP	'E'
#define DB_TYPE_VAL	'V'

typedef struct db_attr_st {
	int unique_subject;
} DB_ATTR;
typedef struct ca_db_st {
	DB_ATTR attributes;
	TXT_DB *db;
} CA_DB;

BIGNUM *load_serial(char *serialfile, int create, ASN1_INTEGER **retai);
int save_serial(char *serialfile, char *suffix, BIGNUM *serial,
    ASN1_INTEGER **retai);
int rotate_serial(char *serialfile, char *new_suffix, char *old_suffix);
int rand_serial(BIGNUM *b, ASN1_INTEGER *ai);
CA_DB *load_index(char *dbfile, DB_ATTR *dbattr);
int index_index(CA_DB *db);
int save_index(const char *dbfile, const char *suffix, CA_DB *db);
int rotate_index(const char *dbfile, const char *new_suffix,
    const char *old_suffix);
void free_index(CA_DB *db);
#define index_name_cmp_noconst(a, b) \
	index_name_cmp((const OPENSSL_CSTRING *)CHECKED_PTR_OF(OPENSSL_STRING, a), \
	(const OPENSSL_CSTRING *)CHECKED_PTR_OF(OPENSSL_STRING, b))
int index_name_cmp(const OPENSSL_CSTRING *a, const OPENSSL_CSTRING *b);
int parse_yesno(const char *str, int def);

X509_NAME *parse_name(char *str, long chtype, int multirdn);
int args_verify(char ***pargs, int *pargc, int *badarg, BIO *err,
    X509_VERIFY_PARAM **pm);
void policies_print(BIO *out, X509_STORE_CTX *ctx);
int bio_to_mem(unsigned char **out, int maxlen, BIO *in);
int pkey_ctrl_string(EVP_PKEY_CTX *ctx, char *value);
int init_gen_str(BIO *err, EVP_PKEY_CTX **pctx, const char *algname, ENGINE *e,
    int do_param);
int do_X509_sign(BIO *err, X509 *x, EVP_PKEY *pkey, const EVP_MD *md,
    STACK_OF(OPENSSL_STRING) *sigopts);
int do_X509_REQ_sign(BIO *err, X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md,
    STACK_OF(OPENSSL_STRING) *sigopts);
int do_X509_CRL_sign(BIO *err, X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md,
    STACK_OF(OPENSSL_STRING) *sigopts);

#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
unsigned char *next_protos_parse(unsigned short *outlen, const char *in);
#endif  /* !OPENSSL_NO_TLSEXT && !OPENSSL_NO_NEXTPROTONEG */

#define FORMAT_UNDEF    0
#define FORMAT_ASN1     1
#define FORMAT_TEXT     2
#define FORMAT_PEM      3
#define FORMAT_NETSCAPE 4
#define FORMAT_PKCS12   5
#define FORMAT_SMIME    6
#define FORMAT_ENGINE   7
#define FORMAT_IISSGC	8	/* XXX this stupid macro helps us to avoid
				 * adding yet another param to load_*key() */
#define FORMAT_PEMRSA	9	/* PEM RSAPubicKey format */
#define FORMAT_ASN1RSA	10	/* DER RSAPubicKey format */
#define FORMAT_MSBLOB	11	/* MS Key blob format */
#define FORMAT_PVK	12	/* MS PVK file format */

#define EXT_COPY_NONE	0
#define EXT_COPY_ADD	1
#define EXT_COPY_ALL	2

#define NETSCAPE_CERT_HDR	"certificate"

#define APP_PASS_LEN	1024

#define SERIAL_RAND_BITS	64

int app_isdir(const char *);

#define TM_START	0
#define TM_STOP		1
double app_tminterval (int stop, int usertime);

#define OPENSSL_NO_SSL_INTERN

#endif
@


1.35
log
@Remove the PSK code. We don't need to drag around this
baggage.
ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: apps.h,v 1.34 2014/07/09 09:06:58 bcook Exp $ */
@


1.34
log
@Remove typecasts on password_callback.

Rather than casting password_callback to the correct function pointer
signature at every call site, change it to match the signature instead.

ok miod@@ deraadt@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: apps.h,v 1.33 2014/06/12 15:49:27 deraadt Exp $ */
a246 3
#ifndef OPENSSL_NO_PSK
extern char *psk_key;
#endif
@


1.33
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d147 1
a147 1
int password_callback(char *buf, int bufsiz, int verify, PW_CB_DATA *cb_data);
@


1.32
log
@There is no need to include <openssl/e_os2.h> here, except for the fact
that it brings in <openssl/opensslconf.h>, so just do that instead
(currently via apps.h).
@
text
@d1 1
a1 1
/* apps/apps.h */
@


1.31
log
@Stop pulling signal.h into apps.h - just include it from openssl.c where
it is needed.
@
text
@d115 2
a118 1
#include <openssl/e_os2.h>
@


1.30
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a114 2
#include <signal.h>

@


1.29
log
@less than jpake
@
text
@d115 4
a119 2
#include <openssl/bio.h>
#include <openssl/x509.h>
d121 1
a121 1
#include <openssl/conf.h>
d123 2
d128 1
a131 1
#include <openssl/ossl_typ.h>
a135 2

#include <signal.h>
@


1.28
log
@Fold in the zlib_cleanup macro.
@
text
@a248 4
#ifndef OPENSSL_NO_JPAKE
void jpake_client_auth(BIO *out, BIO *conn, const char *secret);
void jpake_server_auth(BIO *out, BIO *conn, const char *secret);
#endif
@


1.27
log
@do_pipe_sig is now only used in openssl.c - just call signal() directly
from there instead and ditch the macro.
@
text
@a134 6
#ifdef OPENSSL_NO_COMP
#define zlib_cleanup()
#else
#define zlib_cleanup() COMP_zlib_cleanup()
#endif

@


1.26
log
@The apps_{startup,shutdown} macro mess is now only used in openssl.c -
reduce the macro to two functions and just call them instead.

ok miod@@
@
text
@a134 2
#define do_pipe_sig()	signal(SIGPIPE,SIG_IGN)

@


1.25
log
@More KNF.
@
text
@a142 30
#if !defined(OPENSSL_C)
#  define apps_startup() \
		do_pipe_sig()
#  define apps_shutdown()
#else
#  ifndef OPENSSL_NO_ENGINE
#    define apps_startup() \
			do { do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
#    define apps_shutdown() \
			do { CONF_modules_unload(1); destroy_ui_method(); \
			OBJ_cleanup(); EVP_cleanup(); ENGINE_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_thread_state(NULL); \
			RAND_cleanup(); \
			ERR_free_strings(); zlib_cleanup();} while(0)
#  else
#    define apps_startup() \
			do { do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			setup_ui_method(); } while(0)
#    define apps_shutdown() \
			do { CONF_modules_unload(1); destroy_ui_method(); \
			OBJ_cleanup(); EVP_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_thread_state(NULL); \
			RAND_cleanup(); \
			ERR_free_strings(); zlib_cleanup(); } while(0)
#  endif
#endif

@


1.24
log
@remove the openssl_fdset wrapper, and a variety of VMS'ism's like
crazy (void *) casts all over the place
ok beck jsing
@
text
@d184 1
a184 3
int
password_callback(char *buf, int bufsiz, int verify,
PW_CB_DATA *cb_data);
d196 2
a197 1
void print_name(BIO *out, const char *title, X509_NAME *nm, unsigned long lflags);
d254 2
a255 1
int save_serial(char *serialfile, char *suffix, BIGNUM *serial, ASN1_INTEGER **retai);
d261 2
a262 1
int rotate_index(const char *dbfile, const char *new_suffix, const char *old_suffix);
@


1.23
log
@ReadFile() and GetStdHandle() are not very POSIX.
ok beck jsing
@
text
@a172 2
#  define openssl_fdset(a,b) FD_SET(a, b)

@


1.22
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a322 2
int raw_read_stdin(void *, int);
int raw_write_stdout(const void *, int);
@


1.21
log
@Put the final pieces from e_os.h in the required places, and remove it.
"dance on it's grave" says beck
ok guenther beck
@
text
@a128 8
int app_RAND_load_file(const char *file, BIO *bio_e, int dont_warn);
int app_RAND_write_file(const char *file, BIO *bio_e);
/* When `file' is NULL, use defaults.
 * `bio_e' is for error messages. */
void app_RAND_allow_write_file(void);
long app_RAND_load_files(char *file); /* `file' is a list of files to read,
                                       * separated by ':'. The string is destroyed! */

@


1.20
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d115 1
a115 2
#include "e_os.h"

d135 1
a135 3
                                       * separated by LIST_SEPARATOR_CHAR
                                       * (see e_os.h).  The string is
                                       * destroyed! */
@


1.19
log
@Make MONOLITH the default and only option

ok deraadt
@
text
@a139 1
#define MAIN(a,v)	PROG(a,v)
@


1.18
log
@OpenBSD isn't NetWare or Windows, and it has SIGPIPE.

ok lteo miod
@
text
@a139 14
#ifndef MONOLITH

#define MAIN(a,v)	main(a,v)

#ifndef NON_MAIN
CONF *config = NULL;
BIO *bio_err = NULL;
#else
extern CONF *config;
extern BIO *bio_err;
#endif

#else

a144 2
#endif

d155 1
a155 1
#if defined(MONOLITH) && !defined(OPENSSL_C)
@


1.17
log
@First pass for KNF.
@
text
@a160 1
#ifndef OPENSSL_SYS_NETWARE
a161 1
#endif
a162 1
#ifdef SIGPIPE
a163 3
#else
#define do_pipe_sig()
#endif
a200 3
#ifdef OPENSSL_SYSNAME_WIN32
#  define openssl_fdset(a,b) FD_SET((unsigned int)a, b)
#else
a201 2
#endif

@


1.16
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d145 2
a146 2
CONF *config=NULL;
BIO *bio_err=NULL;
d172 1
a172 1
#define zlib_cleanup() 
d214 1
a214 2
typedef struct args_st
	{
d217 1
a217 1
	} ARGS;
d220 1
a220 2
typedef struct pw_cb_data
	{
d223 1
a223 1
	} PW_CB_DATA;
d225 3
a227 2
int password_callback(char *buf, int bufsiz, int verify,
	PW_CB_DATA *cb_data);
d235 2
a236 2
void program_name(char *in,char *out,int size);
int chopup_args(ARGS *arg,char *buf, int *argc, char **argv[]);
d248 1
a248 1
	const char *pass, ENGINE *e, const char *cert_descrip);
d250 1
a250 1
	const char *pass, ENGINE *e, const char *key_descrip);
d252 1
a252 1
	const char *pass, ENGINE *e, const char *key_descrip);
d254 1
a254 1
	const char *pass, ENGINE *e, const char *cert_descrip);
d256 1
a256 1
	const char *pass, ENGINE *e, const char *cert_descrip);
d264 2
a265 3
			char *host, char *path, char *port, int use_ssl,
			STACK_OF(CONF_VALUE) *headers,
			int req_timeout);
d273 1
a273 1
			ASN1_GENERALIZEDTIME **pinvtm, const char *str);
d279 1
a279 1
#define DB_file         4       
d287 1
a287 2
typedef struct db_attr_st
	{
d289 2
a290 3
	} DB_ATTR;
typedef struct ca_db_st
	{
d293 1
a293 1
	} CA_DB;
d311 2
a312 2
int args_verify(char ***pargs, int *pargc,
			int *badarg, BIO *err, X509_VERIFY_PARAM **pm);
d316 2
a317 2
int init_gen_str(BIO *err, EVP_PKEY_CTX **pctx,
			const char *algname, ENGINE *e, int do_param);
d319 1
a319 1
			STACK_OF(OPENSSL_STRING) *sigopts);
d321 1
a321 1
			STACK_OF(OPENSSL_STRING) *sigopts);
d323 1
a323 1
			STACK_OF(OPENSSL_STRING) *sigopts);
d362 2
a363 2
int raw_read_stdin(void *,int);
int raw_write_stdout(const void *,int);
d367 1
a367 1
double app_tminterval (int stop,int usertime);
@


1.15
log
@resolve conflicts
@
text
@d191 1
d202 1
@


1.14
log
@resolve conflicts, fix local changes
@
text
@d320 6
d334 4
d370 3
@


1.13
log
@resolve conflicts
@
text
@a139 5
#ifdef OPENSSL_SYS_WIN32
#define rename(from,to) WIN32_rename((from),(to))
int WIN32_rename(const char *oldname,const char *newname);
#endif

a146 1
int in_FIPS_mode=0;
a149 1
extern int in_FIPS_mode;
a157 1
extern int in_FIPS_mode;
d171 6
d183 2
a184 10
#    if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
     defined(OPENSSL_SYS_WIN32)
#      ifdef _O_BINARY
#        define apps_startup() \
			do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
#      else
#        define apps_startup() \
			do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
a186 7
#      endif
#    else
#      define apps_startup() \
			do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
			ERR_load_crypto_strings(); ENGINE_load_builtin_engines(); \
			setup_ui_method(); } while(0)
#    endif
d189 3
a191 3
			EVP_cleanup(); ENGINE_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
			ERR_free_strings(); } while(0)
d193 2
a194 10
#    if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
     defined(OPENSSL_SYS_WIN32)
#      ifdef _O_BINARY
#        define apps_startup() \
			do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			setup_ui_method(); } while(0)
#      else
#        define apps_startup() \
			do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
a196 7
#      endif
#    else
#      define apps_startup() \
			do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
			ERR_load_crypto_strings(); \
			setup_ui_method(); } while(0)
#    endif
d199 3
a201 3
			EVP_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
			ERR_free_strings(); } while(0)
d211 1
d254 2
d264 1
d306 4
a309 1
int index_name_cmp(const char **a, const char **b);
d316 7
d338 4
d353 7
@


1.12
log
@resolve conflicts
@
text
@d152 1
d156 1
d165 1
d341 4
@


1.11
log
@resolve conflicts
@
text
@a116 1
#include <openssl/buffer.h>
a117 1
#include <openssl/crypto.h>
d125 3
d142 1
a142 1
int WIN32_rename(char *oldname,char *newname);
a151 1
int in_FIPS_mode=0;
a154 1
extern int in_FIPS_mode;
a162 1
extern int in_FIPS_mode;
d166 1
d168 1
d234 6
d266 1
a266 1
void print_name(BIO *out, char *title, X509_NAME *nm, unsigned long lflags);
d287 6
d298 1
a298 1
			ASN1_GENERALIZEDTIME **pinvtm, char *str);
d328 2
a329 2
int save_index(char *dbfile, char *suffix, CA_DB *db);
int rotate_index(char *dbfile, char *new_suffix, char *old_suffix);
d332 1
d334 4
a337 1
X509_NAME *do_subject(char *str, long chtype);
@


1.10
log
@merge 0.9.7d
@
text
@a143 6
/* VMS below version 7.0 doesn't have strcasecmp() */
#ifdef OPENSSL_SYS_VMS
#define strcasecmp(str1,str2) VMS_strcasecmp((str1),(str2))
int VMS_strcasecmp(const char *str1, const char *str2);
#endif

d151 1
d155 1
d164 1
d313 1
d341 2
@


1.9
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d290 32
a321 1
int make_serial_index(TXT_DB *db);
@


1.8
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d124 1
d126 1
d144 6
d155 1
d158 1
d184 15
a198 3
#  if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
   defined(OPENSSL_SYS_WIN32)
#    ifdef _O_BINARY
d200 23
a222 3
		do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
		ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
d225 3
a227 3
		do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
		ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
d229 5
a233 5
#  else
#    define apps_startup() \
		do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
		ERR_load_crypto_strings(); ENGINE_load_builtin_engines(); \
		setup_ui_method(); } while(0)
a234 5
#  define apps_shutdown() \
		do { CONF_modules_unload(1); destroy_ui_method(); \
		EVP_cleanup(); ENGINE_cleanup(); \
		CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
		ERR_free_strings(); } while(0)
d280 1
d282 1
d285 1
@


1.7
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d236 1
a236 1
EVP_PKEY *load_key(BIO *err, const char *file, int format,
d238 1
a238 1
EVP_PKEY *load_pubkey(BIO *err, const char *file, int format,
@


1.6
log
@Merge openssl-0.9.7-stable-SNAP-20020519
@
text
@a136 4
#ifdef OPENSSL_NO_STDIO
BIO_METHOD *BIO_s_file();
#endif

d216 2
a217 2
int setup_ui_method();
void destroy_ui_method();
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d256 2
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d58 53
d115 1
a115 1
#include "openssl/e_os.h"
d123 3
d137 1
a137 1
#ifdef NO_STDIO
d141 1
a141 1
#ifdef WIN32
d159 1
a159 1
extern LHASH *config;
d174 3
a176 1
#  define apps_startup()	do_pipe_sig()
d178 2
a179 1
#  if defined(MSDOS) || defined(WIN16) || defined(WIN32)
d182 3
a184 2
		_fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		SSLeay_add_all_algorithms()
d187 3
a189 2
		_fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		SSLeay_add_all_algorithms()
d192 4
a195 1
#    define apps_startup()	do_pipe_sig(); SSLeay_add_all_algorithms();
d197 5
d210 13
d232 1
d234 2
d237 18
a254 5
int add_oid_section(BIO *err, LHASH *conf);
X509 *load_cert(BIO *err, char *file, int format);
EVP_PKEY *load_key(BIO *err, char *file, int format, char *pass);
EVP_PKEY *load_pubkey(BIO *err, char *file, int format);
STACK_OF(X509) *load_certs(BIO *err, char *file, int format);
d263 7
a269 2
/* Since this is currently inofficial, let's give it a high number */
#define FORMAT_ENGINE   127
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 2
a102 1
#include <openssl/conf.h>
d148 1
d150 1
d152 6
d163 6
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d67 11
a77 1
#include "progs.h"
d116 1
a116 1
#if defined(MONOLITH) && !defined(SSLEAY)
d145 4
d154 2
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
#include "e_os.h"
d64 3
a66 3
#include "buffer.h"
#include "bio.h"
#include "crypto.h"
d91 1
a91 1
#include "conf.h"
d125 2
a126 2
        {
        char **data;
d128 1
a128 1
        } ARGS;
a129 1
#ifndef NOPROTO
a134 8
#else
int should_retry();
int args_from_file();
int str2fmt();
void program_name();
int chopup_args();
#endif

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d64 4
a67 19
#include <openssl/buffer.h>
#include <openssl/bio.h>
#include <openssl/crypto.h>
#include <openssl/x509.h>
#include <openssl/lhash.h>
#include <openssl/conf.h>
#include <openssl/txt_db.h>
#include <openssl/engine.h>
#include <openssl/ossl_typ.h>

int app_RAND_load_file(const char *file, BIO *bio_e, int dont_warn);
int app_RAND_write_file(const char *file, BIO *bio_e);
/* When `file' is NULL, use defaults.
 * `bio_e' is for error messages. */
void app_RAND_allow_write_file(void);
long app_RAND_load_files(char *file); /* `file' is a list of files to read,
                                       * separated by LIST_SEPARATOR_CHAR
                                       * (see e_os.h).  The string is
                                       * destroyed! */
d69 1
a69 1
#ifdef OPENSSL_NO_STDIO
d73 1
a73 1
#ifdef OPENSSL_SYS_WIN32
d91 2
a92 1
extern CONF *config;
d106 2
a107 4
#if defined(MONOLITH) && !defined(OPENSSL_C)
#  define apps_startup() \
		do_pipe_sig()
#  define apps_shutdown()
d109 1
a109 2
#  if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
   defined(OPENSSL_SYS_WIN32)
d112 2
a113 3
		do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
		ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
d116 2
a117 3
		do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
		ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
		ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
d120 1
a120 4
#    define apps_startup() \
		do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
		ERR_load_crypto_strings(); ENGINE_load_builtin_engines(); \
		setup_ui_method(); } while(0)
a121 5
#  define apps_shutdown() \
		do { CONF_modules_unload(1); destroy_ui_method(); \
		EVP_cleanup(); ENGINE_cleanup(); \
		CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
		ERR_free_strings(); } while(0)
d125 2
a126 2
	{
	char **data;
d128 1
a128 14
	} ARGS;

#define PW_MIN_LENGTH 4
typedef struct pw_cb_data
	{
	const void *password;
	const char *prompt_info;
	} PW_CB_DATA;

int password_callback(char *buf, int bufsiz, int verify,
	PW_CB_DATA *cb_data);

int setup_ui_method();
void destroy_ui_method();
d130 1
d136 7
a142 29
#ifdef HEADER_X509_H
int dump_cert_text(BIO *out, X509 *x);
void print_name(BIO *out, char *title, X509_NAME *nm, unsigned long lflags);
#endif
int set_cert_ex(unsigned long *flags, const char *arg);
int set_name_ex(unsigned long *flags, const char *arg);
int set_ext_copy(int *copy_type, const char *arg);
int copy_extensions(X509 *x, X509_REQ *req, int copy_type);
int app_passwd(BIO *err, char *arg1, char *arg2, char **pass1, char **pass2);
int add_oid_section(BIO *err, CONF *conf);
X509 *load_cert(BIO *err, const char *file, int format,
	const char *pass, ENGINE *e, const char *cert_descrip);
EVP_PKEY *load_key(BIO *err, const char *file, int format,
	const char *pass, ENGINE *e, const char *key_descrip);
EVP_PKEY *load_pubkey(BIO *err, const char *file, int format,
	const char *pass, ENGINE *e, const char *key_descrip);
STACK_OF(X509) *load_certs(BIO *err, const char *file, int format,
	const char *pass, ENGINE *e, const char *cert_descrip);
X509_STORE *setup_verify(BIO *bp, char *CAfile, char *CApath);
ENGINE *setup_engine(BIO *err, const char *engine, int debug);

int load_config(BIO *err, CONF *cnf);

/* Functions defined in ca.c and also used in ocsp.c */
int unpack_revinfo(ASN1_TIME **prevtm, int *preason, ASN1_OBJECT **phold,
			ASN1_GENERALIZEDTIME **pinvtm, char *str);
int make_serial_index(TXT_DB *db);

X509_NAME *do_subject(char *str, long chtype);
a148 13
#define FORMAT_PKCS12   5
#define FORMAT_SMIME    6
#define FORMAT_ENGINE   7
#define FORMAT_IISSGC	8	/* XXX this stupid macro helps us to avoid
				 * adding yet another param to load_*key() */

#define EXT_COPY_NONE	0
#define EXT_COPY_ADD	1
#define EXT_COPY_ALL	2

#define NETSCAPE_CERT_HDR	"certificate"

#define APP_PASS_LEN	1024
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@d137 4
d220 2
a221 2
int setup_ui_method(void);
void destroy_ui_method(void);
@


1.1.1.4
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d236 1
a236 1
EVP_PKEY *load_key(BIO *err, const char *file, int format, int maybe_stdin,
d238 1
a238 1
EVP_PKEY *load_pubkey(BIO *err, const char *file, int format, int maybe_stdin,
@


1.1.1.5
log
@import 0.9.7b (without idea and rc5)
@
text
@a123 1
#ifndef OPENSSL_NO_ENGINE
a124 1
#endif
a141 6
/* VMS below version 7.0 doesn't have strcasecmp() */
#ifdef OPENSSL_SYS_VMS
#define strcasecmp(str1,str2) VMS_strcasecmp((str1),(str2))
int VMS_strcasecmp(const char *str1, const char *str2);
#endif

a146 1
CONF *config=NULL;
a148 1
extern CONF *config;
d174 7
a180 14
#  ifndef OPENSSL_NO_ENGINE
#    if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
     defined(OPENSSL_SYS_WIN32)
#      ifdef _O_BINARY
#        define apps_startup() \
			do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
#      else
#        define apps_startup() \
			do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			ENGINE_load_builtin_engines(); setup_ui_method(); } while(0)
#      endif
d183 3
a185 3
			do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
			ERR_load_crypto_strings(); ENGINE_load_builtin_engines(); \
			setup_ui_method(); } while(0)
a186 5
#    define apps_shutdown() \
			do { CONF_modules_unload(1); destroy_ui_method(); \
			EVP_cleanup(); ENGINE_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
			ERR_free_strings(); } while(0)
d188 4
a191 24
#    if defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_WIN16) || \
     defined(OPENSSL_SYS_WIN32)
#      ifdef _O_BINARY
#        define apps_startup() \
			do { _fmode=_O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			setup_ui_method(); } while(0)
#      else
#        define apps_startup() \
			do { _fmode=O_BINARY; do_pipe_sig(); CRYPTO_malloc_init(); \
			ERR_load_crypto_strings(); OpenSSL_add_all_algorithms(); \
			setup_ui_method(); } while(0)
#      endif
#    else
#      define apps_startup() \
			do { do_pipe_sig(); OpenSSL_add_all_algorithms(); \
			ERR_load_crypto_strings(); \
			setup_ui_method(); } while(0)
#    endif
#    define apps_shutdown() \
			do { CONF_modules_unload(1); destroy_ui_method(); \
			EVP_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_state(0); \
			ERR_free_strings(); } while(0)
d193 5
a242 1
#ifndef OPENSSL_NO_ENGINE
a243 1
#endif
a245 1
char *make_config_name(void);
@


1.1.1.6
log
@import openssl-0.9.7d
@
text
@d290 1
a290 32

#define DB_type         0
#define DB_exp_date     1
#define DB_rev_date     2
#define DB_serial       3       /* index - unique */
#define DB_file         4       
#define DB_name         5       /* index - unique when active and not disabled */
#define DB_NUMBER       6

#define DB_TYPE_REV	'R'
#define DB_TYPE_EXP	'E'
#define DB_TYPE_VAL	'V'

typedef struct db_attr_st
	{
	int unique_subject;
	} DB_ATTR;
typedef struct ca_db_st
	{
	DB_ATTR attributes;
	TXT_DB *db;
	} CA_DB;

BIGNUM *load_serial(char *serialfile, int create, ASN1_INTEGER **retai);
int save_serial(char *serialfile, char *suffix, BIGNUM *serial, ASN1_INTEGER **retai);
int rotate_serial(char *serialfile, char *new_suffix, char *old_suffix);
CA_DB *load_index(char *dbfile, DB_ATTR *dbattr);
int index_index(CA_DB *db);
int save_index(char *dbfile, char *suffix, CA_DB *db);
int rotate_index(char *dbfile, char *new_suffix, char *old_suffix);
void free_index(CA_DB *db);
int index_name_cmp(const char **a, const char **b);
@


1.1.1.7
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d144 6
a156 1
int in_FIPS_mode=0;
a159 1
extern int in_FIPS_mode;
a167 1
extern int in_FIPS_mode;
a315 1
int rand_serial(BIGNUM *b, ASN1_INTEGER *ai);
a342 2

#define SERIAL_RAND_BITS	64
@


1.1.1.8
log
@import of OpenSSL 0.9.8h
@
text
@d117 1
d119 1
a126 3
#ifndef OPENSSL_NO_OCSP
#include <openssl/ocsp.h>
#endif
d141 1
a141 1
int WIN32_rename(const char *oldname,const char *newname);
d151 1
d155 1
d164 1
a167 1
#ifndef OPENSSL_SYS_NETWARE
a168 1
#endif
a233 6
#ifdef OPENSSL_SYSNAME_WIN32
#  define openssl_fdset(a,b) FD_SET((unsigned int)a, b)
#else
#  define openssl_fdset(a,b) FD_SET(a, b)
#endif

d260 1
a260 1
void print_name(BIO *out, const char *title, X509_NAME *nm, unsigned long lflags);
a280 6
#ifndef OPENSSL_NO_OCSP
OCSP_RESPONSE *process_responder(BIO *err, OCSP_REQUEST *req,
			char *host, char *path, char *port, int use_ssl,
			int req_timeout);
#endif

d286 1
a286 1
			ASN1_GENERALIZEDTIME **pinvtm, const char *str);
d316 2
a317 2
int save_index(const char *dbfile, const char *suffix, CA_DB *db);
int rotate_index(const char *dbfile, const char *new_suffix, const char *old_suffix);
a319 1
int parse_yesno(const char *str, int def);
d321 1
a321 4
X509_NAME *parse_name(char *str, long chtype, int multirdn);
int args_verify(char ***pargs, int *pargc,
			int *badarg, BIO *err, X509_VERIFY_PARAM **pm);
void policies_print(BIO *out, X509_STORE_CTX *ctx);
@


1.1.1.9
log
@import openssl-0.9.8j
@
text
@a151 1
int in_FIPS_mode=0;
a154 1
extern int in_FIPS_mode;
a162 1
extern int in_FIPS_mode;
a337 4
#ifndef OPENSSL_NO_JPAKE
void jpake_client_auth(BIO *out, BIO *conn, const char *secret);
void jpake_server_auth(BIO *out, BIO *conn, const char *secret);
#endif
@


1.1.1.10
log
@import OpenSSL-1.0.0a
@
text
@d140 5
d152 1
d156 1
d165 1
a178 6
#ifdef OPENSSL_NO_COMP
#define zlib_cleanup() 
#else
#define zlib_cleanup() COMP_zlib_cleanup()
#endif

d185 10
a194 2
#    define apps_startup() \
			do { do_pipe_sig(); CRYPTO_malloc_init(); \
d197 7
d206 3
a208 3
			OBJ_cleanup(); EVP_cleanup(); ENGINE_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_thread_state(NULL); \
			ERR_free_strings(); zlib_cleanup();} while(0)
d210 10
a219 2
#    define apps_startup() \
			do { do_pipe_sig(); CRYPTO_malloc_init(); \
d222 7
d231 3
a233 3
			OBJ_cleanup(); EVP_cleanup(); \
			CRYPTO_cleanup_all_ex_data(); ERR_remove_thread_state(NULL); \
			ERR_free_strings(); zlib_cleanup(); } while(0)
a242 1

a284 2
STACK_OF(X509_CRL) *load_crls(BIO *err, const char *file, int format,
	const char *pass, ENGINE *e, const char *cert_descrip);
a292 1
			STACK_OF(CONF_VALUE) *headers,
d334 1
a334 4
#define index_name_cmp_noconst(a, b) \
	index_name_cmp((const OPENSSL_CSTRING *)CHECKED_PTR_OF(OPENSSL_STRING, a), \
	(const OPENSSL_CSTRING *)CHECKED_PTR_OF(OPENSSL_STRING, b))
int index_name_cmp(const OPENSSL_CSTRING *a, const OPENSSL_CSTRING *b);
a340 7
int bio_to_mem(unsigned char **out, int maxlen, BIO *in);
int pkey_ctrl_string(EVP_PKEY_CTX *ctx, char *value);
int init_gen_str(BIO *err, EVP_PKEY_CTX **pctx,
			const char *algname, ENGINE *e, int do_param);
#ifndef OPENSSL_NO_PSK
extern char *psk_key;
#endif
a355 4
#define FORMAT_PEMRSA	9	/* PEM RSAPubicKey format */
#define FORMAT_ASN1RSA	10	/* DER RSAPubicKey format */
#define FORMAT_MSBLOB	11	/* MS Key blob format */
#define FORMAT_PVK	12	/* MS PVK file format */
a366 7
int app_isdir(const char *);
int raw_read_stdin(void *,int);
int raw_write_stdout(const void *,int);

#define TM_START	0
#define TM_STOP		1
double app_tminterval (int stop,int usertime);
@


1.1.1.11
log
@import OpenSSL-1.0.1c
@
text
@a319 6
int do_X509_sign(BIO *err, X509 *x, EVP_PKEY *pkey, const EVP_MD *md,
			STACK_OF(OPENSSL_STRING) *sigopts);
int do_X509_REQ_sign(BIO *err, X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md,
			STACK_OF(OPENSSL_STRING) *sigopts);
int do_X509_CRL_sign(BIO *err, X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md,
			STACK_OF(OPENSSL_STRING) *sigopts);
a327 4
#if !defined(OPENSSL_NO_TLSEXT) && !defined(OPENSSL_NO_NEXTPROTONEG)
unsigned char *next_protos_parse(unsigned short *outlen, const char *in);
#endif  /* !OPENSSL_NO_TLSEXT && !OPENSSL_NO_NEXTPROTONEG */

a359 3

#define OPENSSL_NO_SSL_INTERN

@


1.1.1.12
log
@Import OpenSSL 1.0.1g
@
text
@a190 1
			RAND_cleanup(); \
a200 1
			RAND_cleanup(); \
@


