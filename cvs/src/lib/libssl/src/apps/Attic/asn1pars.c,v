head	1.28;
access;
symbols
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	butholakala:1.14
	openssl_1_0_1_g:1.1.1.10
	OPENBSD_5_5:1.14.0.12
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.8
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.6
	OPENBSD_5_3_BASE:1.14
	openssl_1_0_1_c:1.1.1.10
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	openssl_1_0_0_f:1.1.1.10
	openssl_1_0_0_e:1.1.1.10
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	openssh_1_0_0_a:1.1.1.9
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	openssl_0_9_8_k:1.1.1.8
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	openssl_0_9_8_j:1.1.1.8
	openssl_0_9_8_h:1.1.1.7
	pre_openssl_0_9_8h:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	openssl_0_9_7j:1.1.1.6
	openssl:1.1.1
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.27;
commitid	7A7DObXgY4Fni8xJ;

1.27
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	EB0l28piqIRSpBUh;

1.26
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.25;
commitid	0NuggCO2WJOZj8Kh;

1.25
date	2014.06.28.04.39.41;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	gGtvlhTlvaxlmOBo;

1.24
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	mJUVYpkFBZ0Zv2bG;

1.23
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.16.16.47.20;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.09.12.15.18;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.27.05.06.54;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.29.05.39.15;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.03.45.33;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.53;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.06;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.06;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.06;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.28;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.16;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.27;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.36.58;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.06.27.05.05.29;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.01.09.12.13.48;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2010.10.01.22.54.00;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: asn1pars.c,v 1.27 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* A nice addition from Dr Stephen Henson <steve@@openssl.org> to
 * add the -strparse option which parses nested binary structures
 */

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

/* -inform arg	- input format - default PEM (DER or PEM)
 * -in arg	- input file - default stdin
 * -i		- indent the details by depth
 * -offset	- where in the file to start
 * -length	- how many bytes to use
 * -oid file	- extra oid description file
 */

int asn1parse_main(int, char **);

static int do_generate(BIO * bio, char *genstr, char *genconf, BUF_MEM * buf);

int
asn1parse_main(int argc, char **argv)
{
	int i, badops = 0, offset = 0, ret = 1, j;
	unsigned int length = 0;
	long num, tmplen;
	BIO *in = NULL, *out = NULL, *b64 = NULL, *derout = NULL;
	int informat, indent = 0, noout = 0, dump = 0;
	char *infile = NULL, *str = NULL, *prog, *oidfile = NULL, *derfile = NULL;
	char *genstr = NULL, *genconf = NULL;
	const char *errstr = NULL;
	unsigned char *tmpbuf;
	const unsigned char *ctmpbuf;
	BUF_MEM *buf = NULL;
	STACK_OF(OPENSSL_STRING) * osk = NULL;
	ASN1_TYPE *at = NULL;

	informat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	if ((osk = sk_OPENSSL_STRING_new_null()) == NULL) {
		BIO_printf(bio_err, "Memory allocation failure\n");
		goto end;
	}
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			derfile = *(++argv);
		} else if (strcmp(*argv, "-i") == 0) {
			indent = 1;
		} else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-oid") == 0) {
			if (--argc < 1)
				goto bad;
			oidfile = *(++argv);
		} else if (strcmp(*argv, "-offset") == 0) {
			if (--argc < 1)
				goto bad;
			offset = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else if (strcmp(*argv, "-length") == 0) {
			if (--argc < 1)
				goto bad;
			length = strtonum(*(++argv), 1, UINT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else if (strcmp(*argv, "-dump") == 0) {
			dump = -1;
		} else if (strcmp(*argv, "-dlimit") == 0) {
			if (--argc < 1)
				goto bad;
			dump = strtonum(*(++argv), 1, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else if (strcmp(*argv, "-strparse") == 0) {
			if (--argc < 1)
				goto bad;
			sk_OPENSSL_STRING_push(osk, *(++argv));
		} else if (strcmp(*argv, "-genstr") == 0) {
			if (--argc < 1)
				goto bad;
			genstr = *(++argv);
		} else if (strcmp(*argv, "-genconf") == 0) {
			if (--argc < 1)
				goto bad;
			genconf = *(++argv);
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg   input format - one of DER PEM\n");
		BIO_printf(bio_err, " -in arg       input file\n");
		BIO_printf(bio_err, " -out arg      output file (output format is always DER\n");
		BIO_printf(bio_err, " -noout arg    don't produce any output\n");
		BIO_printf(bio_err, " -offset arg   offset into file\n");
		BIO_printf(bio_err, " -length arg   length of section in file\n");
		BIO_printf(bio_err, " -i            indent entries\n");
		BIO_printf(bio_err, " -dump         dump unknown data in hex form\n");
		BIO_printf(bio_err, " -dlimit arg   dump the first arg bytes of unknown data in hex form\n");
		BIO_printf(bio_err, " -oid file     file of extra oid definitions\n");
		BIO_printf(bio_err, " -strparse offset\n");
		BIO_printf(bio_err, "               a series of these can be used to 'dig' into multiple\n");
		BIO_printf(bio_err, "               ASN1 blob wrappings\n");
		BIO_printf(bio_err, " -genstr str   string to generate ASN1 structure from\n");
		BIO_printf(bio_err, " -genconf file file to generate ASN1 structure from\n");
		goto end;
	}
	ERR_load_crypto_strings();

	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	BIO_set_fp(out, stdout, BIO_NOCLOSE | BIO_FP_TEXT);

	if (oidfile != NULL) {
		if (BIO_read_filename(in, oidfile) <= 0) {
			BIO_printf(bio_err, "problems opening %s\n", oidfile);
			ERR_print_errors(bio_err);
			goto end;
		}
		OBJ_create_objects(in);
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}

	if (derfile) {
		if (!(derout = BIO_new_file(derfile, "wb"))) {
			BIO_printf(bio_err, "problems opening %s\n", derfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if ((buf = BUF_MEM_new()) == NULL)
		goto end;
	if (!BUF_MEM_grow(buf, BUFSIZ * 8))
		goto end;	/* Pre-allocate :-) */

	if (genstr || genconf) {
		num = do_generate(bio_err, genstr, genconf, buf);
		if (num < 0) {
			ERR_print_errors(bio_err);
			goto end;
		}
	} else {

		if (informat == FORMAT_PEM) {
			BIO *tmp;

			if ((b64 = BIO_new(BIO_f_base64())) == NULL)
				goto end;
			BIO_push(b64, in);
			tmp = in;
			in = b64;
			b64 = tmp;
		}
		num = 0;
		for (;;) {
			if (!BUF_MEM_grow(buf, (int) num + BUFSIZ))
				goto end;
			i = BIO_read(in, &(buf->data[num]), BUFSIZ);
			if (i <= 0)
				break;
			num += i;
		}
	}
	str = buf->data;

	/* If any structs to parse go through in sequence */

	if (sk_OPENSSL_STRING_num(osk)) {
		tmpbuf = (unsigned char *) str;
		tmplen = num;
		for (i = 0; i < sk_OPENSSL_STRING_num(osk); i++) {
			ASN1_TYPE *atmp;
			int typ;
			j = strtonum(sk_OPENSSL_STRING_value(osk, i),
			    1, INT_MAX, &errstr);
			if (errstr) {
				BIO_printf(bio_err,
				    "'%s' is an invalid number: %s\n",
				    sk_OPENSSL_STRING_value(osk, i), errstr);
				continue;
			}
			tmpbuf += j;
			tmplen -= j;
			atmp = at;
			ctmpbuf = tmpbuf;
			at = d2i_ASN1_TYPE(NULL, &ctmpbuf, tmplen);
			ASN1_TYPE_free(atmp);
			if (!at) {
				BIO_printf(bio_err, "Error parsing structure\n");
				ERR_print_errors(bio_err);
				goto end;
			}
			typ = ASN1_TYPE_get(at);
			if ((typ == V_ASN1_OBJECT) ||
			    (typ == V_ASN1_NULL)) {
				BIO_printf(bio_err, "Can't parse %s type\n",
				    typ == V_ASN1_NULL ? "NULL" : "OBJECT");
				ERR_print_errors(bio_err);
				goto end;
			}
			/* hmm... this is a little evil but it works */
			tmpbuf = at->value.asn1_string->data;
			tmplen = at->value.asn1_string->length;
		}
		str = (char *) tmpbuf;
		num = tmplen;
	}
	if (offset >= num) {
		BIO_printf(bio_err, "Error: offset too large\n");
		goto end;
	}
	num -= offset;

	if ((length == 0) || ((long) length > num))
		length = (unsigned int) num;
	if (derout) {
		if (BIO_write(derout, str + offset, length) != (int) length) {
			BIO_printf(bio_err, "Error writing output\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (!noout &&
	    !ASN1_parse_dump(out, (unsigned char *) &(str[offset]), length,
		indent, dump)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	ret = 0;
end:
	BIO_free(derout);
	if (in != NULL)
		BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (b64 != NULL)
		BIO_free(b64);
	if (ret != 0)
		ERR_print_errors(bio_err);
	if (buf != NULL)
		BUF_MEM_free(buf);
	if (at != NULL)
		ASN1_TYPE_free(at);
	if (osk != NULL)
		sk_OPENSSL_STRING_free(osk);
	OBJ_cleanup();

	return (ret);
}

static int
do_generate(BIO * bio, char *genstr, char *genconf, BUF_MEM * buf)
{
	CONF *cnf = NULL;
	int len;
	long errline;
	unsigned char *p;
	ASN1_TYPE *atyp = NULL;

	if (genconf) {
		cnf = NCONF_new(NULL);
		if (!NCONF_load(cnf, genconf, &errline))
			goto conferr;
		if (!genstr)
			genstr = NCONF_get_string(cnf, "default", "asn1");
		if (!genstr) {
			BIO_printf(bio, "Can't find 'asn1' in '%s'\n", genconf);
			goto err;
		}
	}
	atyp = ASN1_generate_nconf(genstr, cnf);
	NCONF_free(cnf);
	cnf = NULL;

	if (!atyp)
		return -1;

	len = i2d_ASN1_TYPE(atyp, NULL);

	if (len <= 0)
		goto err;

	if (!BUF_MEM_grow(buf, len))
		goto err;

	p = (unsigned char *) buf->data;

	i2d_ASN1_TYPE(atyp, &p);

	ASN1_TYPE_free(atyp);
	return len;

conferr:

	if (errline > 0)
		BIO_printf(bio, "Error on line %ld of config file '%s'\n",
		    errline, genconf);
	else
		BIO_printf(bio, "Error loading config file '%s'\n", genconf);

err:
	NCONF_free(cnf);
	ASN1_TYPE_free(atyp);

	return -1;

}
@


1.27
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: asn1pars.c,v 1.26 2014/07/12 17:54:31 jsing Exp $ */
@


1.26
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: asn1pars.c,v 1.25 2014/06/28 04:39:41 deraadt Exp $ */
d346 1
a346 1
	
@


1.25
log
@Use strtonum() instead of atoi(), and then impose what are we think
are the current range checks.  Help from millert and lteo.  Please test
now that it is deployed and let us know if any numbers are off..
ok lteo
@
text
@d1 1
a1 1
/* $OpenBSD: asn1pars.c,v 1.24 2014/06/12 15:49:27 deraadt Exp $ */
a104 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.24
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d65 1
d97 1
d140 3
a142 1
			offset = atoi(*(++argv));
d146 2
a147 2
			length = atoi(*(++argv));
			if (length == 0)
d154 2
a155 2
			dump = atoi(*(++argv));
			if (dump <= 0)
d276 3
a278 2
			j = atoi(sk_OPENSSL_STRING_value(osk, i));
			if (j == 0) {
d280 2
a281 2
				    "'%s' is an invalid number\n",
				    sk_OPENSSL_STRING_value(osk, i));
@


1.23
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/asn1pars.c */
@


1.22
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a103 2
	signal(SIGPIPE, SIG_IGN);

@


1.21
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d66 1
d68 1
d71 1
a72 1
#include <openssl/pem.h>
a80 1

@


1.20
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a104 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.19
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d103 1
a103 1
	apps_startup();
d349 1
a349 1
	apps_shutdown();
@


1.18
log
@KaboomNF
@
text
@a79 2
#undef PROG
#define PROG	asn1parse_main
d81 1
a81 1
int MAIN(int, char **);
d86 1
a86 1
MAIN(int argc, char **argv)
@


1.17
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d85 1
a85 1
static int do_generate(BIO *bio, char *genstr, char *genconf, BUF_MEM *buf);
d100 1
a100 1
	STACK_OF(OPENSSL_STRING) *osk = NULL;
d109 1
a109 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d129 1
a129 1
			infile= *(++argv);
d133 1
a133 1
			derfile= *(++argv);
d136 3
a138 3
		} else
			if (strcmp(*argv, "-noout") == 0) noout = 1;
			else if (strcmp(*argv, "-oid") == 0) {
d141 1
a141 1
			oidfile= *(++argv);
d167 1
a167 1
			genstr= *(++argv);
d171 1
a171 1
			genconf= *(++argv);
a201 1

d210 1
a210 1
	BIO_set_fp(out, stdout, BIO_NOCLOSE|BIO_FP_TEXT);
a219 1

a235 1

d239 1
a239 1
		goto end; /* Pre-allocate :-) */
a258 1

d261 1
a261 1
			if (!BUF_MEM_grow(buf, (int)num + BUFSIZ))
d274 1
a274 1
		tmpbuf = (unsigned char *)str;
d309 1
a309 1
		str = (char *)tmpbuf;
a311 1

a315 1

d318 2
a319 2
	if ((length == 0) || ((long)length > num))
		length = (unsigned int)num;
d321 1
a321 1
		if (BIO_write(derout, str + offset, length) != (int)length) {
d328 1
a328 1
	    !ASN1_parse_dump(out, (unsigned char *)&(str[offset]), length,
d352 1
a352 1
	return(ret);
d356 1
a356 1
do_generate(BIO *bio, char *genstr, char *genconf, BUF_MEM *buf)
a374 1

d390 1
a390 1
	p = (unsigned char *)buf->data;
d397 1
a397 1
	conferr:
d405 1
a405 1
	err:
@


1.16
log
@Initial KNF.
@
text
@d358 1
a358 1
	OPENSSL_EXIT(ret);
@


1.15
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d59 1
a59 1
/* A nice addition from Dr Stephen Henson <steve@@openssl.org> to 
d87 10
a96 9
int MAIN(int argc, char **argv)
	{
	int i,badops=0,offset=0,ret=1,j;
	unsigned int length=0;
	long num,tmplen;
	BIO *in=NULL,*out=NULL,*b64=NULL, *derout = NULL;
	int informat,indent=0, noout = 0, dump = 0;
	char *infile=NULL,*str=NULL,*prog,*oidfile=NULL, *derfile=NULL;
	char *genstr=NULL, *genconf=NULL;
d99 3
a101 3
	BUF_MEM *buf=NULL;
	STACK_OF(OPENSSL_STRING) *osk=NULL;
	ASN1_TYPE *at=NULL;
d103 1
a103 1
	informat=FORMAT_PEM;
d108 2
a109 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d114 1
a114 1
	prog=argv[0];
d117 2
a118 3
	if ((osk=sk_OPENSSL_STRING_new_null()) == NULL)
		{
		BIO_printf(bio_err,"Memory allocation failure\n");
d120 9
a128 11
		}
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d130 3
a132 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d134 7
a140 9
			}
		else if (strcmp(*argv,"-i") == 0)
			{
			indent=1;
			}
		else if (strcmp(*argv,"-noout") == 0) noout = 1;
		else if (strcmp(*argv,"-oid") == 0)
			{
			if (--argc < 1) goto bad;
d142 25
a166 30
			}
		else if (strcmp(*argv,"-offset") == 0)
			{
			if (--argc < 1) goto bad;
			offset= atoi(*(++argv));
			}
		else if (strcmp(*argv,"-length") == 0)
			{
			if (--argc < 1) goto bad;
			length= atoi(*(++argv));
			if (length == 0) goto bad;
			}
		else if (strcmp(*argv,"-dump") == 0)
			{
			dump= -1;
			}
		else if (strcmp(*argv,"-dlimit") == 0)
			{
			if (--argc < 1) goto bad;
			dump= atoi(*(++argv));
			if (dump <= 0) goto bad;
			}
		else if (strcmp(*argv,"-strparse") == 0)
			{
			if (--argc < 1) goto bad;
			sk_OPENSSL_STRING_push(osk,*(++argv));
			}
		else if (strcmp(*argv,"-genstr") == 0)
			{
			if (--argc < 1) goto bad;
d168 3
a170 4
			}
		else if (strcmp(*argv,"-genconf") == 0)
			{
			if (--argc < 1) goto bad;
d172 3
a174 5
			}
		else
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d176 1
a176 1
			}
d179 1
a179 1
		}
d181 1
a181 2
	if (badops)
		{
d183 17
a199 17
		BIO_printf(bio_err,"%s [options] <infile\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg   input format - one of DER PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file (output format is always DER\n");
		BIO_printf(bio_err," -noout arg    don't produce any output\n");
		BIO_printf(bio_err," -offset arg   offset into file\n");
		BIO_printf(bio_err," -length arg   length of section in file\n");
		BIO_printf(bio_err," -i            indent entries\n");
		BIO_printf(bio_err," -dump         dump unknown data in hex form\n");
		BIO_printf(bio_err," -dlimit arg   dump the first arg bytes of unknown data in hex form\n");
		BIO_printf(bio_err," -oid file     file of extra oid definitions\n");
		BIO_printf(bio_err," -strparse offset\n");
		BIO_printf(bio_err,"               a series of these can be used to 'dig' into multiple\n");
		BIO_printf(bio_err,"               ASN1 blob wrappings\n");
		BIO_printf(bio_err," -genstr str   string to generate ASN1 structure from\n");
		BIO_printf(bio_err," -genconf file file to generate ASN1 structure from\n");
d201 1
a201 1
		}
d205 3
a207 4
	in=BIO_new(BIO_s_file());
	out=BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL))
		{
d210 2
a211 2
		}
	BIO_set_fp(out,stdout,BIO_NOCLOSE|BIO_FP_TEXT);
d213 3
a215 5
	if (oidfile != NULL)
		{
		if (BIO_read_filename(in,oidfile) <= 0)
			{
			BIO_printf(bio_err,"problems opening %s\n",oidfile);
d218 1
a218 1
			}
d220 1
a220 1
		}
d223 3
a225 5
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
a227 1
			}
d229 1
d232 2
a233 2
		if(!(derout = BIO_new_file(derfile, "wb"))) {
			BIO_printf(bio_err,"problems opening %s\n",derfile);
d239 4
a242 2
	if ((buf=BUF_MEM_new()) == NULL) goto end;
	if (!BUF_MEM_grow(buf,BUFSIZ*8)) goto end; /* Pre-allocate :-) */
d244 1
a244 2
	if (genstr || genconf)
		{
d246 1
a246 2
		if (num < 0)
			{
a248 1
			}
d250 1
d252 1
a252 5
	else
		{

		if (informat == FORMAT_PEM)
			{
d255 1
a255 1
			if ((b64=BIO_new(BIO_f_base64())) == NULL)
d257 5
a261 5
			BIO_push(b64,in);
			tmp=in;
			in=b64;
			b64=tmp;
			}
d263 8
a270 8
		num=0;
		for (;;)
			{
			if (!BUF_MEM_grow(buf,(int)num+BUFSIZ)) goto end;
			i=BIO_read(in,&(buf->data[num]),BUFSIZ);
			if (i <= 0) break;
			num+=i;
			}
d272 2
a273 1
	str=buf->data;
d277 4
a280 6
	if (sk_OPENSSL_STRING_num(osk))
		{
		tmpbuf=(unsigned char *)str;
		tmplen=num;
		for (i=0; i<sk_OPENSSL_STRING_num(osk); i++)
			{
d283 5
a287 4
			j=atoi(sk_OPENSSL_STRING_value(osk,i));
			if (j == 0)
				{
				BIO_printf(bio_err,"'%s' is an invalid number\n",sk_OPENSSL_STRING_value(osk,i));
d289 3
a291 3
				}
			tmpbuf+=j;
			tmplen-=j;
d294 1
a294 1
			at = d2i_ASN1_TYPE(NULL,&ctmpbuf,tmplen);
d296 2
a297 3
			if(!at)
				{
				BIO_printf(bio_err,"Error parsing structure\n");
d300 1
a300 1
				}
d302 2
a303 3
			if ((typ == V_ASN1_OBJECT)
				|| (typ == V_ASN1_NULL))
				{
d305 1
a305 1
					typ == V_ASN1_NULL ? "NULL" : "OBJECT");
d308 1
a308 1
				}
d310 2
a311 5
			tmpbuf=at->value.asn1_string->data;
			tmplen=at->value.asn1_string->length;
			}
		str=(char *)tmpbuf;
		num=tmplen;
d313 3
d317 1
a317 2
	if (offset >= num)
		{
d320 1
a320 1
		}
d324 4
a327 3
	if ((length == 0) || ((long)length > num)) length=(unsigned int)num;
	if(derout) {
		if(BIO_write(derout, str + offset, length) != (int)length) {
d334 2
a335 3
	    !ASN1_parse_dump(out,(unsigned char *)&(str[offset]),length,
		    indent,dump))
		{
d338 2
a339 2
		}
	ret=0;
d342 6
a347 3
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (b64 != NULL) BIO_free(b64);
d350 6
a355 3
	if (buf != NULL) BUF_MEM_free(buf);
	if (at != NULL) ASN1_TYPE_free(at);
	if (osk != NULL) sk_OPENSSL_STRING_free(osk);
d359 1
a359 1
	}
d361 3
a363 2
static int do_generate(BIO *bio, char *genstr, char *genconf, BUF_MEM *buf)
	{
d370 1
a370 2
	if (genconf)
		{
d376 1
a376 2
		if (!genstr)
			{
a378 1
			}
d380 1
d394 1
a394 1
	if (!BUF_MEM_grow(buf,len))
d397 1
a397 1
	p=(unsigned char *)buf->data;
d408 1
a408 1
							errline, genconf);
d418 1
a418 1
	}
@


1.14
log
@openssl-1.0.0e: resolve conflicts
@
text
@a226 6
#ifdef OPENSSL_SYS_VMS
	{
	BIO *tmpbio = BIO_new(BIO_f_linebuffer());
	out = BIO_push(tmpbio, out);
	}
#endif
@


1.13
log
@resolve conflicts, fix local changes
@
text
@d411 1
@


1.12
log
@resolve conflicts
@
text
@d99 1
a99 1
	STACK *osk=NULL;
d116 1
a116 1
	if ((osk=sk_new_null()) == NULL)
d172 1
a172 1
			sk_push(osk,*(++argv));
d305 1
a305 1
	if (sk_num(osk))
d309 1
a309 1
		for (i=0; i<sk_num(osk); i++)
d313 1
a313 1
			j=atoi(sk_value(osk,i));
d316 1
a316 1
				BIO_printf(bio_err,"'%s' is an invalid number\n",sk_value(osk,i));
d381 1
a381 1
	if (osk != NULL) sk_free(osk);
@


1.11
log
@resolve conflicts
@
text
@d59 1
a59 1
/* A nice addition from Dr Stephen Henson <shenson@@bigfoot.com> to 
@


1.10
log
@resolve conflicts
@
text
@d85 2
d95 1
d97 1
d174 10
d212 2
d267 1
a267 1
	if (informat == FORMAT_PEM)
d269 4
a272 3
		BIO *tmp;

		if ((b64=BIO_new(BIO_f_base64())) == NULL)
d274 1
a274 4
		BIO_push(b64,in);
		tmp=in;
		in=b64;
		b64=tmp;
d277 23
a299 7
	num=0;
	for (;;)
		{
		if (!BUF_MEM_grow(buf,(int)num+BUFSIZ)) goto end;
		i=BIO_read(in,&(buf->data[num]),BUFSIZ);
		if (i <= 0) break;
		num+=i;
d311 1
a312 1
			ASN1_TYPE *atmp;
d322 2
a323 1
			at = d2i_ASN1_TYPE(NULL,&tmpbuf,tmplen);
d387 58
@


1.9
log
@resolve conflicts
@
text
@d185 1
a185 1
		BIO_printf(bio_err," -inform arg   input format - one of DER TXT PEM\n");
@


1.8
log
@merge 0.9.7d
@
text
@d281 1
d297 9
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d307 9
a315 1
	if (length == 0) length=(unsigned int)num;
@


1.6
log
@Merge OpenSSL 0.9.7-stable-20020605,
correctly autogenerate obj_mac.h
@
text
@d335 1
a335 1
	EXIT(ret);
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d187 1
a187 1
		BIO_printf(bio_err," -out arg      output file\n");
a197 1
		BIO_printf(bio_err," -out filename output DER encoding to file\n");
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d106 3
d212 1
a212 1
#ifdef VMS
d335 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d91 1
a91 1
	int informat,indent=0, noout = 0;
d111 1
a111 1
		BIO_printf(bio_err,"Malloc failure\n");
d152 10
d189 2
d209 6
d314 2
a315 1
	    !ASN1_parse(out,(unsigned char *)&(str[offset]),length,indent))
d324 1
a324 1
	if (out != NULL) BIO_free(out);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d77 1
a77 1
 * -oid file	- extra oid decription file
d83 2
d91 1
a91 1
	int informat,indent=0;
d135 1
d174 2
d177 1
a177 1
		BIO_printf(bio_err," -length arg   lenth of section in file\n");
d295 2
a296 1
	if (!ASN1_parse(out,(unsigned char *)&(str[offset]),length,indent))
@


1.1
log
@Initial revision
@
text
@d59 4
d67 4
a70 9
#include "err.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"

#define FORMAT_UNDEF	0
#define FORMAT_ASN1	1
#define FORMAT_TEXT	2
#define FORMAT_PEM	3
d83 1
a83 3
int MAIN(argc, argv)
int argc;
char **argv;
d85 1
a85 1
	int i,badops=0,offset=0,ret=1;
d87 2
a88 2
	long num;
	BIO *in=NULL,*out=NULL,*b64=NULL;
d90 2
a91 1
	char *infile=NULL,*str=NULL,*prog,*oidfile=NULL;
d93 2
d107 5
d124 5
d149 5
d170 1
a170 1
		BIO_printf(bio_err," -in arg       inout file\n");
d175 4
d215 8
d248 34
d283 7
d297 1
d304 2
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 4
/* A nice addition from Dr Stephen Henson <shenson@@bigfoot.com> to 
 * add the -strparse option which parses nested binary structures
 */

d63 9
a71 4
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
d78 1
a78 1
 * -oid file	- extra oid description file
d84 3
a86 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
d88 1
a88 1
	int i,badops=0,offset=0,ret=1,j;
d90 4
a93 5
	long num,tmplen;
	BIO *in=NULL,*out=NULL,*b64=NULL, *derout = NULL;
	int informat,indent=0, noout = 0, dump = 0;
	char *infile=NULL,*str=NULL,*prog,*oidfile=NULL, *derfile=NULL;
	unsigned char *tmpbuf;
a94 2
	STACK *osk=NULL;
	ASN1_TYPE *at=NULL;
a103 3
	if (!load_config(bio_err, NULL))
		goto end;

a106 5
	if ((osk=sk_new_null()) == NULL)
		{
		BIO_printf(bio_err,"Memory allocation failure\n");
		goto end;
		}
a118 5
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
			derfile= *(++argv);
			}
a122 1
		else if (strcmp(*argv,"-noout") == 0) noout = 1;
a138 15
		else if (strcmp(*argv,"-dump") == 0)
			{
			dump= -1;
			}
		else if (strcmp(*argv,"-dlimit") == 0)
			{
			if (--argc < 1) goto bad;
			dump= atoi(*(++argv));
			if (dump <= 0) goto bad;
			}
		else if (strcmp(*argv,"-strparse") == 0)
			{
			if (--argc < 1) goto bad;
			sk_push(osk,*(++argv));
			}
d155 1
a155 3
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file (output format is always DER\n");
		BIO_printf(bio_err," -noout arg    don't produce any output\n");
d157 1
a157 1
		BIO_printf(bio_err," -length arg   length of section in file\n");
a158 2
		BIO_printf(bio_err," -dump         dump unknown data in hex form\n");
		BIO_printf(bio_err," -dlimit arg   dump the first arg bytes of unknown data in hex form\n");
a159 3
		BIO_printf(bio_err," -strparse offset\n");
		BIO_printf(bio_err,"               a series of these can be used to 'dig' into multiple\n");
		BIO_printf(bio_err,"               ASN1 blob wrappings\n");
a172 6
#ifdef OPENSSL_SYS_VMS
	{
	BIO *tmpbio = BIO_new(BIO_f_linebuffer());
	out = BIO_push(tmpbio, out);
	}
#endif
a195 8
	if (derfile) {
		if(!(derout = BIO_new_file(derfile, "wb"))) {
			BIO_printf(bio_err,"problems opening %s\n",derfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	}

a220 34
	/* If any structs to parse go through in sequence */

	if (sk_num(osk))
		{
		tmpbuf=(unsigned char *)str;
		tmplen=num;
		for (i=0; i<sk_num(osk); i++)
			{
			ASN1_TYPE *atmp;
			j=atoi(sk_value(osk,i));
			if (j == 0)
				{
				BIO_printf(bio_err,"'%s' is an invalid number\n",sk_value(osk,i));
				continue;
				}
			tmpbuf+=j;
			tmplen-=j;
			atmp = at;
			at = d2i_ASN1_TYPE(NULL,&tmpbuf,tmplen);
			ASN1_TYPE_free(atmp);
			if(!at)
				{
				BIO_printf(bio_err,"Error parsing structure\n");
				ERR_print_errors(bio_err);
				goto end;
				}
			/* hmm... this is a little evil but it works */
			tmpbuf=at->value.asn1_string->data;
			tmplen=at->value.asn1_string->length;
			}
		str=(char *)tmpbuf;
		num=tmplen;
		}

d222 1
a222 10
	if(derout) {
		if(BIO_write(derout, str + offset, length) != (int)length) {
			BIO_printf(bio_err, "Error writing output\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (!noout &&
	    !ASN1_parse_dump(out,(unsigned char *)&(str[offset]),length,
		    indent,dump))
a228 1
	BIO_free(derout);
d230 1
a230 1
	if (out != NULL) BIO_free_all(out);
a234 2
	if (at != NULL) ASN1_TYPE_free(at);
	if (osk != NULL) sk_free(osk);
a235 1
	apps_shutdown();
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d335 1
a335 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@d307 1
a307 9
	if (offset >= num)
		{
		BIO_printf(bio_err, "Error: offset too large\n");
		goto end;
		}

	num -= offset;

	if ((length == 0) || ((long)length > num)) length=(unsigned int)num;
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a280 1
			int typ;
a295 9
				ERR_print_errors(bio_err);
				goto end;
				}
			typ = ASN1_TYPE_get(at);
			if ((typ == V_ASN1_OBJECT)
				|| (typ == V_ASN1_NULL))
				{
				BIO_printf(bio_err, "Can't parse %s type\n",
					typ == V_ASN1_NULL ? "NULL" : "OBJECT");
@


1.1.1.6
log
@import of openssl-0.9.7j
@
text
@d185 1
a185 1
		BIO_printf(bio_err," -inform arg   input format - one of DER PEM\n");
@


1.1.1.7
log
@import of OpenSSL 0.9.8h
@
text
@a84 2
static int do_generate(BIO *bio, char *genstr, char *genconf, BUF_MEM *buf);

a92 1
	char *genstr=NULL, *genconf=NULL;
a93 1
	const unsigned char *ctmpbuf;
a169 10
		else if (strcmp(*argv,"-genstr") == 0)
			{
			if (--argc < 1) goto bad;
			genstr= *(++argv);
			}
		else if (strcmp(*argv,"-genconf") == 0)
			{
			if (--argc < 1) goto bad;
			genconf= *(++argv);
			}
a197 2
		BIO_printf(bio_err," -genstr str   string to generate ASN1 structure from\n");
		BIO_printf(bio_err," -genconf file file to generate ASN1 structure from\n");
d251 1
a251 1
	if (genstr || genconf)
d253 3
a255 4
		num = do_generate(bio_err, genstr, genconf, buf);
		if (num < 0)
			{
			ERR_print_errors(bio_err);
d257 4
a260 1
			}
d263 7
a269 23
	else
		{

		if (informat == FORMAT_PEM)
			{
			BIO *tmp;

			if ((b64=BIO_new(BIO_f_base64())) == NULL)
				goto end;
			BIO_push(b64,in);
			tmp=in;
			in=b64;
			b64=tmp;
			}

		num=0;
		for (;;)
			{
			if (!BUF_MEM_grow(buf,(int)num+BUFSIZ)) goto end;
			i=BIO_read(in,&(buf->data[num]),BUFSIZ);
			if (i <= 0) break;
			num+=i;
			}
d281 1
a282 1
			int typ;
d292 1
a292 2
			ctmpbuf = tmpbuf;
			at = d2i_ASN1_TYPE(NULL,&ctmpbuf,tmplen);
a355 58
static int do_generate(BIO *bio, char *genstr, char *genconf, BUF_MEM *buf)
	{
	CONF *cnf = NULL;
	int len;
	long errline;
	unsigned char *p;
	ASN1_TYPE *atyp = NULL;

	if (genconf)
		{
		cnf = NCONF_new(NULL);
		if (!NCONF_load(cnf, genconf, &errline))
			goto conferr;
		if (!genstr)
			genstr = NCONF_get_string(cnf, "default", "asn1");
		if (!genstr)
			{
			BIO_printf(bio, "Can't find 'asn1' in '%s'\n", genconf);
			goto err;
			}
		}

	atyp = ASN1_generate_nconf(genstr, cnf);
	NCONF_free(cnf);

	if (!atyp)
		return -1;

	len = i2d_ASN1_TYPE(atyp, NULL);

	if (len <= 0)
		goto err;

	if (!BUF_MEM_grow(buf,len))
		goto err;

	p=(unsigned char *)buf->data;

	i2d_ASN1_TYPE(atyp, &p);

	ASN1_TYPE_free(atyp);
	return len;

	conferr:

	if (errline > 0)
		BIO_printf(bio, "Error on line %ld of config file '%s'\n",
							errline, genconf);
	else
		BIO_printf(bio, "Error loading config file '%s'\n", genconf);

	err:
	NCONF_free(cnf);
	ASN1_TYPE_free(atyp);

	return -1;

	}
@


1.1.1.8
log
@import openssl-0.9.8j
@
text
@d59 1
a59 1
/* A nice addition from Dr Stephen Henson <steve@@openssl.org> to 
@


1.1.1.9
log
@import OpenSSL-1.0.0a
@
text
@d99 1
a99 1
	STACK_OF(OPENSSL_STRING) *osk=NULL;
d116 1
a116 1
	if ((osk=sk_OPENSSL_STRING_new_null()) == NULL)
d172 1
a172 1
			sk_OPENSSL_STRING_push(osk,*(++argv));
d305 1
a305 1
	if (sk_OPENSSL_STRING_num(osk))
d309 1
a309 1
		for (i=0; i<sk_OPENSSL_STRING_num(osk); i++)
d313 1
a313 1
			j=atoi(sk_OPENSSL_STRING_value(osk,i));
d316 1
a316 1
				BIO_printf(bio_err,"'%s' is an invalid number\n",sk_OPENSSL_STRING_value(osk,i));
d381 1
a381 1
	if (osk != NULL) sk_OPENSSL_STRING_free(osk);
@


1.1.1.10
log
@import OpenSSL 1.0.0e
@
text
@a410 1
	cnf = NULL;
@


