head	1.30;
access;
symbols
	OPENBSD_5_6:1.29.0.4
	OPENBSD_5_6_BASE:1.29
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.29;
commitid	7A7DObXgY4Fni8xJ;

1.29
date	2014.07.25.06.05.31;	author doug;	state Exp;
branches;
next	1.28;
commitid	DnBLYuKKjvrWeH3R;

1.28
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	EB0l28piqIRSpBUh;

1.27
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.26;
commitid	0NuggCO2WJOZj8Kh;

1.26
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.25;
commitid	ivoCf1icUxmbGXSc;

1.25
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	mJUVYpkFBZ0Zv2bG;

1.24
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.17.15.45.50;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.15.12.00;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.17.04.13;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.05.21.36.38;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.55;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.18;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: dsa.c,v 1.29 2014/07/25 06:05:31 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

/* -inform arg	- input format - default PEM (one of DER, NET or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 * -des		- encrypt output if PEM format with DES in cbc mode
 * -des3	- encrypt output if PEM format
 * -idea	- encrypt output if PEM format
 * -aes128	- encrypt output if PEM format
 * -aes192	- encrypt output if PEM format
 * -aes256	- encrypt output if PEM format
 * -camellia128 - encrypt output if PEM format
 * -camellia192 - encrypt output if PEM format
 * -camellia256 - encrypt output if PEM format
 * -seed        - encrypt output if PEM format
 * -text	- print a text version
 * -modulus	- print the DSA public key
 */

int dsa_main(int, char **);

int
dsa_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	int ret = 1;
	DSA *dsa = NULL;
	int i, badops = 0;
	const EVP_CIPHER *enc = NULL;
	BIO *in = NULL, *out = NULL;
	int informat, outformat, text = 0, noout = 0;
	int pubin = 0, pubout = 0;
	char *infile, *outfile, *prog;
#ifndef OPENSSL_NO_ENGINE
	char *engine;
#endif
	char *passargin = NULL, *passargout = NULL;
	char *passin = NULL, *passout = NULL;
	int modulus = 0;

	int pvk_encr = 2;

#ifndef OPENSSL_NO_ENGINE
	engine = NULL;
#endif
	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passin") == 0) {
			if (--argc < 1)
				goto bad;
			passargin = *(++argv);
		} else if (strcmp(*argv, "-passout") == 0) {
			if (--argc < 1)
				goto bad;
			passargout = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-pvk-strong") == 0)
			pvk_encr = 2;
		else if (strcmp(*argv, "-pvk-weak") == 0)
			pvk_encr = 1;
		else if (strcmp(*argv, "-pvk-none") == 0)
			pvk_encr = 0;
		else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-modulus") == 0)
			modulus = 1;
		else if (strcmp(*argv, "-pubin") == 0)
			pubin = 1;
		else if (strcmp(*argv, "-pubout") == 0)
			pubout = 1;
		else if ((enc = EVP_get_cipherbyname(&(argv[0][1]))) == NULL) {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg     input format - DER or PEM\n");
		BIO_printf(bio_err, " -outform arg    output format - DER or PEM\n");
		BIO_printf(bio_err, " -in arg         input file\n");
		BIO_printf(bio_err, " -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err, " -out arg        output file\n");
		BIO_printf(bio_err, " -passout arg    output file pass phrase source\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e       use engine e, possibly a hardware device.\n");
#endif
		BIO_printf(bio_err, " -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err, " -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err, " -idea           encrypt PEM output with cbc idea\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err, " -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc aes\n");
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err, " -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc camellia\n");
#endif
		BIO_printf(bio_err, " -text           print the key in text\n");
		BIO_printf(bio_err, " -noout          don't print key out\n");
		BIO_printf(bio_err, " -modulus        print the DSA public value\n");
		goto end;
	}
	ERR_load_crypto_strings();

#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}
	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}

	BIO_printf(bio_err, "read DSA key\n");

	{
		EVP_PKEY *pkey;

		if (pubin)
			pkey = load_pubkey(bio_err, infile, informat, 1,
			    passin, e, "Public Key");
		else
			pkey = load_key(bio_err, infile, informat, 1,
			    passin, e, "Private Key");

		if (pkey) {
			dsa = EVP_PKEY_get1_DSA(pkey);
			EVP_PKEY_free(pkey);
		}
	}
	if (dsa == NULL) {
		BIO_printf(bio_err, "unable to load Key\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	if (text) {
		if (!DSA_print(out, dsa, 0)) {
			perror(outfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (modulus) {
		fprintf(stdout, "Public Key=");
		BN_print(out, dsa->pub_key);
		fprintf(stdout, "\n");
	}
	if (noout)
		goto end;
	BIO_printf(bio_err, "writing DSA key\n");
	if (outformat == FORMAT_ASN1) {
		if (pubin || pubout)
			i = i2d_DSA_PUBKEY_bio(out, dsa);
		else
			i = i2d_DSAPrivateKey_bio(out, dsa);
	} else if (outformat == FORMAT_PEM) {
		if (pubin || pubout)
			i = PEM_write_bio_DSA_PUBKEY(out, dsa);
		else
			i = PEM_write_bio_DSAPrivateKey(out, dsa, enc,
			    NULL, 0, NULL, passout);
#if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_RC4)
	} else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {
		EVP_PKEY *pk;
		pk = EVP_PKEY_new();
		EVP_PKEY_set1_DSA(pk, dsa);
		if (outformat == FORMAT_PVK)
			i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);
		else if (pubin || pubout)
			i = i2b_PublicKey_bio(out, pk);
		else
			i = i2b_PrivateKey_bio(out, pk);
		EVP_PKEY_free(pk);
#endif
	} else {
		BIO_printf(bio_err, "bad output format specified for outfile\n");
		goto end;
	}
	if (i <= 0) {
		BIO_printf(bio_err, "unable to write private key\n");
		ERR_print_errors(bio_err);
	} else
		ret = 0;
end:
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (dsa != NULL)
		DSA_free(dsa);
	free(passin);
	free(passout);

	return (ret);
}
@


1.29
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa.c,v 1.28 2014/07/14 00:35:10 deraadt Exp $ */
@


1.28
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: dsa.c,v 1.27 2014/07/12 17:54:31 jsing Exp $ */
d323 1
a323 2
	if (in != NULL)
		BIO_free(in);
@


1.27
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsa.c,v 1.26 2014/07/09 21:02:35 tedu Exp $ */
d331 1
a331 1
	
@


1.26
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: dsa.c,v 1.25 2014/06/12 15:49:27 deraadt Exp $ */
a116 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.25
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a60 1
#ifndef OPENSSL_NO_DSA
a336 1
#endif
@


1.24
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/dsa.c */
@


1.23
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a118 2
	signal(SIGPIPE, SIG_IGN);

@


1.22
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d335 2
a336 4
	if (passin)
		free(passin);
	if (passout)
		free(passout);
@


1.21
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d59 2
a60 1
#include <openssl/opensslconf.h>/* for OPENSSL_NO_DSA */
d62 1
d65 1
d67 1
a67 1
#include <time.h>
d69 1
d71 2
a73 1
#include <openssl/dsa.h>
d75 1
a76 3
#include <openssl/pem.h>
#include <openssl/bn.h>

@


1.20
log
@deleted seed some time ago
@
text
@a117 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.19
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a219 3
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err, " -seed           encrypt PEM output with cbc seed\n");
#endif
@


1.18
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d116 1
a116 1
	apps_startup();
d343 1
a343 1
	apps_shutdown();
@


1.17
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a345 6
#else				/* !OPENSSL_NO_DSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.16
log
@KaboomNF
@
text
@a73 2
#undef PROG
#define PROG	dsa_main
d93 1
a93 1
int MAIN(int, char **);
d96 1
a96 1
MAIN(int argc, char **argv)
@


1.15
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d59 1
a59 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
d122 1
a122 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d150 2
a151 3
			infile= *(++argv);
		}
		else if (strcmp(*argv, "-out") == 0) {
d154 1
a154 1
			outfile= *(++argv);
d158 1
a158 1
			passargin= *(++argv);
d162 1
a162 1
			passargout= *(++argv);
d168 1
a168 1
			engine= *(++argv);
a229 1

a239 1

a245 1

d258 1
a258 1
		EVP_PKEY	*pkey;
a276 1

a292 1

a297 1

d346 1
a346 1
	return(ret);
d348 1
a348 1
#else /* !OPENSSL_NO_DSA */
d350 1
a350 1
# if PEDANTIC
d352 1
a352 1
# endif
@


1.14
log
@More KNF.
@
text
@d353 1
a353 1
	OPENSSL_EXIT(ret);
@


1.13
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d269 1
a269 1
		    passin, e, "Private Key");
d291 1
a291 1
	if (text)
d293 4
a296 3
		perror(outfile);
		ERR_print_errors(bio_err);
		goto end;
d342 11
a352 6
	if (in != NULL) BIO_free(in);
		if (out != NULL) BIO_free_all(out);
		if (dsa != NULL) DSA_free(dsa);
		if (passin) free(passin);
		if (passout) free(passout);
		apps_shutdown();
@


1.12
log
@Initial KNF.
@
text
@d344 2
a345 2
		if (passin) OPENSSL_free(passin);
		if (passout) OPENSSL_free(passout);
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d97 3
a99 2
int MAIN(int argc, char **argv)
	{
d101 6
a106 6
	int ret=1;
	DSA *dsa=NULL;
	int i,badops=0;
	const EVP_CIPHER *enc=NULL;
	BIO *in=NULL,*out=NULL;
	int informat,outformat,text=0,noout=0;
d108 1
a108 1
	char *infile,*outfile,*prog;
d114 1
a114 1
	int modulus=0;
d121 2
a122 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d128 1
a128 1
	engine=NULL;
d130 4
a133 4
	infile=NULL;
	outfile=NULL;
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d135 1
a135 1
	prog=argv[0];
d138 12
a149 15
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d151 4
a154 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d156 3
a158 4
			}
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
d160 3
a162 4
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
d164 1
a164 1
			}
d166 3
a168 3
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
d170 1
a170 1
			}
d172 19
a190 20
		else if (strcmp(*argv,"-pvk-strong") == 0)
			pvk_encr=2;
		else if (strcmp(*argv,"-pvk-weak") == 0)
			pvk_encr=1;
		else if (strcmp(*argv,"-pvk-none") == 0)
			pvk_encr=0;
		else if (strcmp(*argv,"-noout") == 0)
			noout=1;
		else if (strcmp(*argv,"-text") == 0)
			text=1;
		else if (strcmp(*argv,"-modulus") == 0)
			modulus=1;
		else if (strcmp(*argv,"-pubin") == 0)
			pubin=1;
		else if (strcmp(*argv,"-pubout") == 0)
			pubout=1;
		else if ((enc=EVP_get_cipherbyname(&(argv[0][1]))) == NULL)
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d192 1
a192 1
			}
d195 1
a195 1
		}
d197 1
a197 2
	if (badops)
		{
d199 8
a206 8
		BIO_printf(bio_err,"%s [options] <infile >outfile\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg     input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg    output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg         input file\n");
		BIO_printf(bio_err," -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err," -out arg        output file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
d208 1
a208 1
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
d210 2
a211 2
		BIO_printf(bio_err," -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
d213 1
a213 1
		BIO_printf(bio_err," -idea           encrypt PEM output with cbc idea\n");
d216 2
a217 2
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d220 2
a221 2
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
d224 1
a224 1
		BIO_printf(bio_err," -seed           encrypt PEM output with cbc seed\n");
d226 3
a228 3
		BIO_printf(bio_err," -text           print the key in text\n");
		BIO_printf(bio_err," -noout          don't print key out\n");
		BIO_printf(bio_err," -modulus        print the DSA public value\n");
d230 1
a230 1
		}
d235 1
a235 1
        e = setup_engine(bio_err, engine, 0);
d238 1
a238 1
	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
d243 3
a245 4
	in=BIO_new(BIO_s_file());
	out=BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL))
		{
d248 1
a248 1
		}
d251 3
a253 5
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
a255 1
			}
d257 1
d259 1
a259 1
	BIO_printf(bio_err,"read DSA key\n");
d261 1
a261 1
		{
d266 1
a266 1
				passin, e, "Public Key");
d269 1
a269 1
				passin, e, "Private Key");
d271 1
a271 2
		if (pkey)
			{
a273 1
			}
d275 3
a277 3
	if (dsa == NULL)
		{
		BIO_printf(bio_err,"unable to load Key\n");
d280 1
a280 1
		}
d282 4
a285 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a287 1
			}
d289 1
d291 6
a296 7
	if (text) 
		if (!DSA_print(out,dsa,0))
			{
			perror(outfile);
			ERR_print_errors(bio_err);
			goto end;
			}
d298 5
a302 6
	if (modulus)
		{
		fprintf(stdout,"Public Key=");
		BN_print(out,dsa->pub_key);
		fprintf(stdout,"\n");
		}
d304 8
a311 5
	if (noout) goto end;
	BIO_printf(bio_err,"writing DSA key\n");
	if 	(outformat == FORMAT_ASN1) {
		if(pubin || pubout) i=i2d_DSA_PUBKEY_bio(out,dsa);
		else i=i2d_DSAPrivateKey_bio(out,dsa);
d313 5
a317 4
		if(pubin || pubout)
			i=PEM_write_bio_DSA_PUBKEY(out,dsa);
		else i=PEM_write_bio_DSAPrivateKey(out,dsa,enc,
							NULL,0,NULL, passout);
d332 1
a332 1
		BIO_printf(bio_err,"bad output format specified for outfile\n");
d334 3
a336 4
		}
	if (i <= 0)
		{
		BIO_printf(bio_err,"unable to write private key\n");
d338 2
a339 3
		}
	else
		ret=0;
d341 6
a346 6
	if(in != NULL) BIO_free(in);
	if(out != NULL) BIO_free_all(out);
	if(dsa != NULL) DSA_free(dsa);
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
	apps_shutdown();
d348 1
a348 1
	}
d352 1
a352 1
static void *dummy=&dummy;
@


1.10
log
@resolve conflicts, fix local changes
@
text
@a295 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d115 2
d176 6
d249 1
d251 1
a251 1
	if (out == NULL)
d257 11
d269 2
a270 1
	{
d272 1
d280 6
a285 4
		if (pkey != NULL)
		dsa = pkey == NULL ? NULL : EVP_PKEY_get1_DSA(pkey);
		EVP_PKEY_free(pkey);
	}
d337 13
d354 1
a354 1
	if (!i)
d370 6
@


1.8
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@a98 1
#ifndef OPENSSL_NO_ENGINE
a99 1
#endif
@


1.7
log
@resolve conflicts
@
text
@a242 1
	in=BIO_new(BIO_s_file());
d244 1
a244 1
	if ((in == NULL) || (out == NULL))
d250 9
a258 10
	if (infile == NULL)
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
			perror(infile);
			goto end;
			}
		}
d260 4
a263 12
	BIO_printf(bio_err,"read DSA key\n");
	if	(informat == FORMAT_ASN1) {
		if(pubin) dsa=d2i_DSA_PUBKEY_bio(in,NULL);
		else dsa=d2i_DSAPrivateKey_bio(in,NULL);
	} else if (informat == FORMAT_PEM) {
		if(pubin) dsa=PEM_read_bio_DSA_PUBKEY(in,NULL, NULL, NULL);
		else dsa=PEM_read_bio_DSAPrivateKey(in,NULL,NULL,passin);
	} else
		{
		BIO_printf(bio_err,"bad input format specified for key\n");
		goto end;
		}
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 1
d72 1
d87 4
d218 7
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d93 1
d95 1
d103 4
a106 1
	char *infile,*outfile,*prog,*engine;
d120 1
d122 1
d163 1
d169 1
d201 1
d203 1
d221 1
d223 1
d330 1
a330 1
	EXIT(ret);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_DSA
a70 1
#include <openssl/engine.h>
d82 3
d112 3
d195 1
a195 1
#ifndef NO_IDEA
d198 4
d210 1
a210 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d258 1
a258 1
#ifdef VMS
d316 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d71 1
d91 1
d99 1
a99 1
	char *infile,*outfile,*prog;
d110 1
d151 5
d187 1
d201 18
d263 1
d265 7
d319 1
a319 1
	if(out != NULL) BIO_free(out);
d321 2
a322 2
	if(passin) Free(passin);
	if(passout) Free(passout);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d86 2
d96 1
d98 2
d138 10
d154 4
d173 8
a180 6
		BIO_printf(bio_err," -inform arg   input format - one of DER NET PEM\n");
		BIO_printf(bio_err," -outform arg  output format - one of DER NET PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file\n");
		BIO_printf(bio_err," -des          encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3         encrypt PEM output with ede cbc des using 168 bit key\n");
d182 1
a182 1
		BIO_printf(bio_err," -idea         encrypt PEM output with cbc idea\n");
d184 3
a186 3
		BIO_printf(bio_err," -text         print the key in text\n");
		BIO_printf(bio_err," -noout        don't print key out\n");
		BIO_printf(bio_err," -modulus      print the DSA public value\n");
d192 5
d216 8
a223 6
	BIO_printf(bio_err,"read DSA private key\n");
	if	(informat == FORMAT_ASN1)
		dsa=d2i_DSAPrivateKey_bio(in,NULL);
	else if (informat == FORMAT_PEM)
		dsa=PEM_read_bio_DSAPrivateKey(in,NULL,NULL,NULL);
	else
d230 1
a230 1
		BIO_printf(bio_err,"unable to load Private Key\n");
d262 10
a271 6
	BIO_printf(bio_err,"writing DSA private key\n");
	if 	(outformat == FORMAT_ASN1)
		i=i2d_DSAPrivateKey_bio(out,dsa);
	else if (outformat == FORMAT_PEM)
		i=PEM_write_bio_DSAPrivateKey(out,dsa,enc,NULL,0,NULL,NULL);
	else	{
d283 5
a287 3
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free(out);
	if (dsa != NULL) DSA_free(dsa);
@


1.1
log
@Initial revision
@
text
@d59 1
d65 6
a70 6
#include "bio.h"
#include "err.h"
#include "dsa.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"
d86 1
a86 3
int MAIN(argc, argv)
int argc;
char **argv;
d91 1
a91 1
	EVP_CIPHER *enc=NULL;
d156 1
a156 1
		BIO_printf(bio_err," -in arg       inout file\n");
d194 1
a194 1
		dsa=PEM_read_bio_DSAPrivateKey(in,NULL,NULL);
d238 1
a238 1
		i=PEM_write_bio_DSAPrivateKey(out,dsa,enc,NULL,0,NULL);
d256 1
a256 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_DSA
d64 6
a69 6
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/dsa.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
a80 3
 * -aes128	- encrypt output if PEM format
 * -aes192	- encrypt output if PEM format
 * -aes256	- encrypt output if PEM format
d85 3
a87 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
a88 1
	ENGINE *e = NULL;
d92 1
a92 1
	const EVP_CIPHER *enc=NULL;
d95 1
a95 4
	int pubin = 0, pubout = 0;
	char *infile,*outfile,*prog,*engine;
	char *passargin = NULL, *passargout = NULL;
	char *passin = NULL, *passout = NULL;
a103 4
	if (!load_config(bio_err, NULL))
		goto end;

	engine=NULL;
a133 15
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
			passargin= *(++argv);
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
			passargout= *(++argv);
			}
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
a139 4
		else if (strcmp(*argv,"-pubin") == 0)
			pubin=1;
		else if (strcmp(*argv,"-pubout") == 0)
			pubout=1;
d155 8
a162 15
		BIO_printf(bio_err," -inform arg     input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg    output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg         input file\n");
		BIO_printf(bio_err," -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err," -out arg        output file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err," -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err," -idea           encrypt PEM output with cbc idea\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d164 3
a166 3
		BIO_printf(bio_err," -text           print the key in text\n");
		BIO_printf(bio_err," -noout          don't print key out\n");
		BIO_printf(bio_err," -modulus        print the DSA public value\n");
a171 7
        e = setup_engine(bio_err, engine, 0);

	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}

d191 6
a196 8
	BIO_printf(bio_err,"read DSA key\n");
	if	(informat == FORMAT_ASN1) {
		if(pubin) dsa=d2i_DSA_PUBKEY_bio(in,NULL);
		else dsa=d2i_DSAPrivateKey_bio(in,NULL);
	} else if (informat == FORMAT_PEM) {
		if(pubin) dsa=PEM_read_bio_DSA_PUBKEY(in,NULL, NULL, NULL);
		else dsa=PEM_read_bio_DSAPrivateKey(in,NULL,NULL,passin);
	} else
d203 1
a203 1
		BIO_printf(bio_err,"unable to load Key\n");
a208 1
		{
a209 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d235 6
a240 10
	BIO_printf(bio_err,"writing DSA key\n");
	if 	(outformat == FORMAT_ASN1) {
		if(pubin || pubout) i=i2d_DSA_PUBKEY_bio(out,dsa);
		else i=i2d_DSAPrivateKey_bio(out,dsa);
	} else if (outformat == FORMAT_PEM) {
		if(pubin || pubout)
			i=PEM_write_bio_DSA_PUBKEY(out,dsa);
		else i=PEM_write_bio_DSAPrivateKey(out,dsa,enc,
							NULL,0,NULL, passout);
	} else {
d252 3
a254 6
	if(in != NULL) BIO_free(in);
	if(out != NULL) BIO_free_all(out);
	if(dsa != NULL) DSA_free(dsa);
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
	apps_shutdown();
d257 1
a257 1
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a92 1
#ifndef OPENSSL_NO_ENGINE
a93 1
#endif
d101 1
a101 4
	char *infile,*outfile,*prog;
#ifndef OPENSSL_NO_ENGINE
	char *engine;
#endif
a114 1
#ifndef OPENSSL_NO_ENGINE
a115 1
#endif
a155 1
#ifndef OPENSSL_NO_ENGINE
a160 1
#endif
a191 1
#ifndef OPENSSL_NO_ENGINE
a192 1
#endif
a209 1
#ifndef OPENSSL_NO_ENGINE
a210 1
#endif
d317 1
a317 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a58 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
a70 1
#include <openssl/bn.h>
a84 4
 * -camellia128 - encrypt output if PEM format
 * -camellia192 - encrypt output if PEM format
 * -camellia256 - encrypt output if PEM format
 * -seed        - encrypt output if PEM format
a211 7
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
#endif
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err," -seed           encrypt PEM output with cbc seed\n");
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d99 1
d101 1
d243 1
d245 1
a245 1
	if (out == NULL)
d251 11
d263 11
a273 13
	{
		EVP_PKEY	*pkey;
		if (pubin)
			pkey = load_pubkey(bio_err, infile, informat, 1,
				passin, e, "Public Key");
		else
			pkey = load_key(bio_err, infile, informat, 1,
				passin, e, "Private Key");

		if (pkey != NULL)
		dsa = pkey == NULL ? NULL : EVP_PKEY_get1_DSA(pkey);
		EVP_PKEY_free(pkey);
	}
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a114 2
	int pvk_encr = 2;

a173 6
		else if (strcmp(*argv,"-pvk-strong") == 0)
			pvk_encr=2;
		else if (strcmp(*argv,"-pvk-weak") == 0)
			pvk_encr=1;
		else if (strcmp(*argv,"-pvk-none") == 0)
			pvk_encr=0;
a240 1
	in=BIO_new(BIO_s_file());
d242 1
a242 1
	if ((in == NULL) || (out == NULL))
a247 11
	if (infile == NULL)
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
			perror(infile);
			goto end;
			}
		}

d249 1
a249 2

		{
a250 1

d258 4
a261 6
		if (pkey)
			{
			dsa = EVP_PKEY_get1_DSA(pkey);
			EVP_PKEY_free(pkey);
			}
		}
a312 13
#if !defined(OPENSSL_NO_RSA) && !defined(OPENSSL_NO_RC4)
	} else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {
		EVP_PKEY *pk;
		pk = EVP_PKEY_new();
		EVP_PKEY_set1_DSA(pk, dsa);
		if (outformat == FORMAT_PVK)
			i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);
		else if (pubin || pubout)
			i = i2b_PublicKey_bio(out, pk);
		else
			i = i2b_PrivateKey_bio(out, pk);
		EVP_PKEY_free(pk);
#endif
d317 1
a317 1
	if (i <= 0)
a332 6
#else /* !OPENSSL_NO_DSA */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


