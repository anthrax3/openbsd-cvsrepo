head	1.28;
access;
symbols
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.27;
commitid	7A7DObXgY4Fni8xJ;

1.27
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	EB0l28piqIRSpBUh;

1.26
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.25;
commitid	0NuggCO2WJOZj8Kh;

1.25
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.24;
commitid	ivoCf1icUxmbGXSc;

1.24
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	mJUVYpkFBZ0Zv2bG;

1.23
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	2nvnQBrv22dLtvTt;

1.22
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.17.15.45.50;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.04.17.17;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.56.58;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.18;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.35;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.12.20.43.00;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.34.23;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: rsa.c,v 1.27 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>

/* -inform arg	- input format - default PEM (one of DER, NET or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 * -des		- encrypt output if PEM format with DES in cbc mode
 * -des3	- encrypt output if PEM format
 * -idea	- encrypt output if PEM format
 * -seed	- encrypt output if PEM format
 * -aes128	- encrypt output if PEM format
 * -aes192	- encrypt output if PEM format
 * -aes256	- encrypt output if PEM format
 * -camellia128 - encrypt output if PEM format
 * -camellia192 - encrypt output if PEM format
 * -camellia256 - encrypt output if PEM format
 * -text	- print a text version
 * -modulus	- print the RSA key modulus
 * -check	- verify key consistency
 * -pubin	- Expect a public key in input file.
 * -pubout	- Output a public key.
 */

int rsa_main(int, char **);

int
rsa_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	int ret = 1;
	RSA *rsa = NULL;
	int i, badops = 0, sgckey = 0;
	const EVP_CIPHER *enc = NULL;
	BIO *out = NULL;
	int informat, outformat, text = 0, check = 0, noout = 0;
	int pubin = 0, pubout = 0;
	char *infile, *outfile, *prog;
	char *passargin = NULL, *passargout = NULL;
	char *passin = NULL, *passout = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	int modulus = 0;

	int pvk_encr = 2;

	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passin") == 0) {
			if (--argc < 1)
				goto bad;
			passargin = *(++argv);
		} else if (strcmp(*argv, "-passout") == 0) {
			if (--argc < 1)
				goto bad;
			passargout = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-sgckey") == 0)
			sgckey = 1;
		else if (strcmp(*argv, "-pubin") == 0)
			pubin = 1;
		else if (strcmp(*argv, "-pubout") == 0)
			pubout = 1;
		else if (strcmp(*argv, "-RSAPublicKey_in") == 0)
			pubin = 2;
		else if (strcmp(*argv, "-RSAPublicKey_out") == 0)
			pubout = 2;
		else if (strcmp(*argv, "-pvk-strong") == 0)
			pvk_encr = 2;
		else if (strcmp(*argv, "-pvk-weak") == 0)
			pvk_encr = 1;
		else if (strcmp(*argv, "-pvk-none") == 0)
			pvk_encr = 0;
		else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-modulus") == 0)
			modulus = 1;
		else if (strcmp(*argv, "-check") == 0)
			check = 1;
		else if ((enc = EVP_get_cipherbyname(&(argv[0][1]))) == NULL) {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg     input format - one of DER NET PEM\n");
		BIO_printf(bio_err, " -outform arg    output format - one of DER NET PEM\n");
		BIO_printf(bio_err, " -in arg         input file\n");
		BIO_printf(bio_err, " -sgckey         Use IIS SGC key format\n");
		BIO_printf(bio_err, " -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err, " -out arg        output file\n");
		BIO_printf(bio_err, " -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err, " -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err, " -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err, " -idea           encrypt PEM output with cbc idea\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err, " -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc aes\n");
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err, " -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc camellia\n");
#endif
		BIO_printf(bio_err, " -text           print the key in text\n");
		BIO_printf(bio_err, " -noout          don't print key out\n");
		BIO_printf(bio_err, " -modulus        print the RSA key modulus\n");
		BIO_printf(bio_err, " -check          verify key consistency\n");
		BIO_printf(bio_err, " -pubin          expect a public key in input file\n");
		BIO_printf(bio_err, " -pubout         output a public key\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e       use engine e, possibly a hardware device.\n");
#endif
		goto end;
	}
	ERR_load_crypto_strings();

#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}
	if (check && pubin) {
		BIO_printf(bio_err, "Only private keys can be checked\n");
		goto end;
	}
	out = BIO_new(BIO_s_file());

	{
		EVP_PKEY *pkey;

		if (pubin) {
			int tmpformat = -1;
			if (pubin == 2) {
				if (informat == FORMAT_PEM)
					tmpformat = FORMAT_PEMRSA;
				else if (informat == FORMAT_ASN1)
					tmpformat = FORMAT_ASN1RSA;
			} else if (informat == FORMAT_NETSCAPE && sgckey)
				tmpformat = FORMAT_IISSGC;
			else
				tmpformat = informat;

			pkey = load_pubkey(bio_err, infile, tmpformat, 1,
			    passin, e, "Public Key");
		} else
			pkey = load_key(bio_err, infile,
			    (informat == FORMAT_NETSCAPE && sgckey ?
				FORMAT_IISSGC : informat), 1,
			    passin, e, "Private Key");

		if (pkey != NULL)
			rsa = EVP_PKEY_get1_RSA(pkey);
		EVP_PKEY_free(pkey);
	}

	if (rsa == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	if (text)
		if (!RSA_print(out, rsa, 0)) {
			perror(outfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	if (modulus) {
		BIO_printf(out, "Modulus=");
		BN_print(out, rsa->n);
		BIO_printf(out, "\n");
	}
	if (check) {
		int r = RSA_check_key(rsa);

		if (r == 1)
			BIO_printf(out, "RSA key ok\n");
		else if (r == 0) {
			unsigned long err;

			while ((err = ERR_peek_error()) != 0 &&
			    ERR_GET_LIB(err) == ERR_LIB_RSA &&
			    ERR_GET_FUNC(err) == RSA_F_RSA_CHECK_KEY &&
			    ERR_GET_REASON(err) != ERR_R_MALLOC_FAILURE) {
				BIO_printf(out, "RSA key error: %s\n", ERR_reason_error_string(err));
				ERR_get_error();	/* remove e from error
							 * stack */
			}
		}
		if (r == -1 || ERR_peek_error() != 0) {	/* should happen only if
							 * r == -1 */
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (noout) {
		ret = 0;
		goto end;
	}
	BIO_printf(bio_err, "writing RSA key\n");
	if (outformat == FORMAT_ASN1) {
		if (pubout || pubin) {
			if (pubout == 2)
				i = i2d_RSAPublicKey_bio(out, rsa);
			else
				i = i2d_RSA_PUBKEY_bio(out, rsa);
		} else
			i = i2d_RSAPrivateKey_bio(out, rsa);
	}
#ifndef OPENSSL_NO_RC4
	else if (outformat == FORMAT_NETSCAPE) {
		unsigned char *p, *pp;
		int size;

		i = 1;
		size = i2d_RSA_NET(rsa, NULL, NULL, sgckey);
		if ((p = malloc(size)) == NULL) {
			BIO_printf(bio_err, "Memory allocation failure\n");
			goto end;
		}
		pp = p;
		i2d_RSA_NET(rsa, &p, NULL, sgckey);
		BIO_write(out, (char *) pp, size);
		free(pp);
	}
#endif
	else if (outformat == FORMAT_PEM) {
		if (pubout || pubin) {
			if (pubout == 2)
				i = PEM_write_bio_RSAPublicKey(out, rsa);
			else
				i = PEM_write_bio_RSA_PUBKEY(out, rsa);
		} else
			i = PEM_write_bio_RSAPrivateKey(out, rsa,
			    enc, NULL, 0, NULL, passout);
#if !defined(OPENSSL_NO_DSA) && !defined(OPENSSL_NO_RC4)
	} else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {
		EVP_PKEY *pk;
		pk = EVP_PKEY_new();
		EVP_PKEY_set1_RSA(pk, rsa);
		if (outformat == FORMAT_PVK)
			i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);
		else if (pubin || pubout)
			i = i2b_PublicKey_bio(out, pk);
		else
			i = i2b_PrivateKey_bio(out, pk);
		EVP_PKEY_free(pk);
#endif
	} else {
		BIO_printf(bio_err, "bad output format specified for outfile\n");
		goto end;
	}
	if (i <= 0) {
		BIO_printf(bio_err, "unable to write key\n");
		ERR_print_errors(bio_err);
	} else
		ret = 0;
end:
	if (out != NULL)
		BIO_free_all(out);
	if (rsa != NULL)
		RSA_free(rsa);
	free(passin);
	free(passout);

	return (ret);
}
@


1.27
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.26 2014/07/12 17:54:31 jsing Exp $ */
@


1.26
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.25 2014/07/09 21:02:35 tedu Exp $ */
d100 1
a100 1
int 
d390 1
a390 1
	
@


1.25
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: rsa.c,v 1.24 2014/06/12 15:49:27 deraadt Exp $ */
a119 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.24
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a60 1
#ifndef OPENSSL_NO_RSA
a395 1
#endif
@


1.23
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* apps/rsa.c */
@


1.22
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d346 1
a346 1
		if ((p = (unsigned char *) malloc(size)) == NULL) {
@


1.21
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a121 2
	signal(SIGPIPE, SIG_IGN);

@


1.20
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d394 2
a395 4
	if (passin)
		free(passin);
	if (passout)
		free(passout);
@


1.19
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d60 1
d62 1
d67 1
d69 1
d71 1
d73 2
a75 1
#include <openssl/evp.h>
a76 3
#include <openssl/pem.h>
#include <openssl/bn.h>

@


1.18
log
@deleted seed some time ago
@
text
@a120 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.17
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a217 3
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err, " -seed           encrypt PEM output with cbc seed\n");
#endif
@


1.16
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d119 1
a119 1
	apps_startup();
d402 1
a402 1
	apps_shutdown();
@


1.15
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a404 6
#else				/* !OPENSSL_NO_RSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.14
log
@KaboomNF
@
text
@a73 2
#undef PROG
#define PROG	rsa_main
d96 1
a96 1
int MAIN(int, char **);
d99 1
a99 1
MAIN(int argc, char **argv)
@


1.13
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d100 3
a102 2
int MAIN(int argc, char **argv)
	{
d104 6
a109 6
	int ret=1;
	RSA *rsa=NULL;
	int i,badops=0, sgckey=0;
	const EVP_CIPHER *enc=NULL;
	BIO *out=NULL;
	int informat,outformat,text=0,check=0,noout=0;
d111 1
a111 1
	char *infile,*outfile,*prog;
d115 1
a115 1
	char *engine=NULL;
d117 1
a117 1
	int modulus=0;
d124 2
a125 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d130 4
a133 4
	infile=NULL;
	outfile=NULL;
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d135 1
a135 1
	prog=argv[0];
d138 26
a163 32
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
			infile= *(++argv);
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
			outfile= *(++argv);
			}
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
			passargin= *(++argv);
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
			passargout= *(++argv);
			}
d165 5
a169 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d171 7
a177 7
		else if (strcmp(*argv,"-sgckey") == 0)
			sgckey=1;
		else if (strcmp(*argv,"-pubin") == 0)
			pubin=1;
		else if (strcmp(*argv,"-pubout") == 0)
			pubout=1;
		else if (strcmp(*argv,"-RSAPublicKey_in") == 0)
d179 1
a179 1
		else if (strcmp(*argv,"-RSAPublicKey_out") == 0)
d181 17
a197 18
		else if (strcmp(*argv,"-pvk-strong") == 0)
			pvk_encr=2;
		else if (strcmp(*argv,"-pvk-weak") == 0)
			pvk_encr=1;
		else if (strcmp(*argv,"-pvk-none") == 0)
			pvk_encr=0;
		else if (strcmp(*argv,"-noout") == 0)
			noout=1;
		else if (strcmp(*argv,"-text") == 0)
			text=1;
		else if (strcmp(*argv,"-modulus") == 0)
			modulus=1;
		else if (strcmp(*argv,"-check") == 0)
			check=1;
		else if ((enc=EVP_get_cipherbyname(&(argv[0][1]))) == NULL)
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d199 1
a199 1
			}
d202 1
a202 1
		}
d204 1
a204 2
	if (badops)
		{
d206 11
a216 11
		BIO_printf(bio_err,"%s [options] <infile >outfile\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg     input format - one of DER NET PEM\n");
		BIO_printf(bio_err," -outform arg    output format - one of DER NET PEM\n");
		BIO_printf(bio_err," -in arg         input file\n");
		BIO_printf(bio_err," -sgckey         Use IIS SGC key format\n");
		BIO_printf(bio_err," -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err," -out arg        output file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err," -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
d218 1
a218 1
		BIO_printf(bio_err," -idea           encrypt PEM output with cbc idea\n");
d221 1
a221 1
		BIO_printf(bio_err," -seed           encrypt PEM output with cbc seed\n");
d224 2
a225 2
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d228 2
a229 2
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
d231 6
a236 6
		BIO_printf(bio_err," -text           print the key in text\n");
		BIO_printf(bio_err," -noout          don't print key out\n");
		BIO_printf(bio_err," -modulus        print the RSA key modulus\n");
		BIO_printf(bio_err," -check          verify key consistency\n");
		BIO_printf(bio_err," -pubin          expect a public key in input file\n");
		BIO_printf(bio_err," -pubout         output a public key\n");
d238 1
a238 1
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
d241 1
a241 2
		}

d245 1
a245 1
        e = setup_engine(bio_err, engine, 0);
d248 1
a248 1
	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
d252 1
a252 2

	if(check && pubin) {
d256 1
a256 2

	out=BIO_new(BIO_s_file());
d259 1
a259 1
		EVP_PKEY	*pkey;
d261 3
a263 5
		if (pubin)
			{
			int tmpformat=-1;
			if (pubin == 2)
				{
d268 1
a268 2
				}
			else if (informat == FORMAT_NETSCAPE && sgckey)
d272 1
a272 1
					
d274 2
a275 3
				passin, e, "Public Key");
			}
		else
d277 3
a279 3
				(informat == FORMAT_NETSCAPE && sgckey ?
					FORMAT_IISSGC : informat), 1,
				passin, e, "Private Key");
d286 1
a286 2
	if (rsa == NULL)
		{
d289 5
a293 10
		}

	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a295 1
			}
d297 1
d299 2
a300 3
	if (text) 
		if (!RSA_print(out,rsa,0))
			{
a303 7
			}

	if (modulus)
		{
		BIO_printf(out,"Modulus=");
		BN_print(out,rsa->n);
		BIO_printf(out,"\n");
d305 6
a310 3

	if (check)
		{
d314 2
a315 3
			BIO_printf(out,"RSA key ok\n");
		else if (r == 0)
			{
d319 3
a321 4
				ERR_GET_LIB(err) == ERR_LIB_RSA &&
				ERR_GET_FUNC(err) == RSA_F_RSA_CHECK_KEY &&
				ERR_GET_REASON(err) != ERR_R_MALLOC_FAILURE)
				{
d323 2
a324 2
				ERR_get_error(); /* remove e from error stack */
				}
d326 3
a328 3
		
		if (r == -1 || ERR_peek_error() != 0) /* should happen only if r == -1 */
			{
a330 1
			}
d332 2
a333 3
		
	if (noout)
		{
d336 4
a339 5
		}
	BIO_printf(bio_err,"writing RSA key\n");
	if 	(outformat == FORMAT_ASN1) {
		if(pubout || pubin) 
			{
d341 1
a341 1
				i=i2d_RSAPublicKey_bio(out,rsa);
d343 3
a345 3
				i=i2d_RSA_PUBKEY_bio(out,rsa);
			}
		else i=i2d_RSAPrivateKey_bio(out,rsa);
d348 2
a349 3
	else if (outformat == FORMAT_NETSCAPE)
		{
		unsigned char *p,*pp;
d352 4
a355 5
		i=1;
		size=i2d_RSA_NET(rsa,NULL,NULL, sgckey);
		if ((p=(unsigned char *)malloc(size)) == NULL)
			{
			BIO_printf(bio_err,"Memory allocation failure\n");
d357 4
a360 4
			}
		pp=p;
		i2d_RSA_NET(rsa,&p,NULL, sgckey);
		BIO_write(out,(char *)pp,size);
d362 1
a362 1
		}
d365 1
a365 2
		if(pubout || pubin)
			{
d367 1
a367 1
		    		i=PEM_write_bio_RSAPublicKey(out,rsa);
d369 4
a372 4
		    		i=PEM_write_bio_RSA_PUBKEY(out,rsa);
			}
		else i=PEM_write_bio_RSAPrivateKey(out,rsa,
						enc,NULL,0,NULL,passout);
d386 2
a387 2
	} else	{
		BIO_printf(bio_err,"bad output format specified for outfile\n");
d389 3
a391 4
		}
	if (i <= 0)
		{
		BIO_printf(bio_err,"unable to write key\n");
d393 2
a394 3
		}
	else
		ret=0;
d396 8
a403 4
	if(out != NULL) BIO_free_all(out);
	if(rsa != NULL) RSA_free(rsa);
	if(passin) free(passin);
	if(passout) free(passout);
d405 3
a407 3
	return(ret);
	}
#else /* !OPENSSL_NO_RSA */
d409 3
a411 3
# if PEDANTIC
static void *dummy=&dummy;
# endif
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d436 1
a436 1
	OPENSSL_EXIT(ret);
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d385 1
a385 1
		if ((p=(unsigned char *)OPENSSL_malloc(size)) == NULL)
d393 1
a393 1
		OPENSSL_free(pp);
d433 2
a434 2
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@a308 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d118 2
d182 10
d272 15
a286 3
			pkey = load_pubkey(bio_err, infile,
				(informat == FORMAT_NETSCAPE && sgckey ?
					FORMAT_IISSGC : informat), 1,
d288 1
d296 1
a296 1
		rsa = pkey == NULL ? NULL : EVP_PKEY_get1_RSA(pkey);
d374 7
a380 1
		if(pubout || pubin) i=i2d_RSA_PUBKEY_bio(out,rsa);
d404 6
a409 1
		    i=PEM_write_bio_RSA_PUBKEY(out,rsa);
d412 13
d429 1
a429 1
	if (!i)
@


1.8
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 1
d72 1
d84 1
d88 3
d215 3
d222 4
d323 1
a323 1
			long err;
@


1.7
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d107 1
d109 1
d161 1
d167 1
d219 1
d221 1
d227 1
d229 1
d380 1
a380 1
	EXIT(ret);
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d241 1
a241 1
					FORMAT_IISSGC : informat),
d246 1
a246 1
					FORMAT_IISSGC : informat),
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RSA
a70 1
#include <openssl/engine.h>
d82 3
d101 1
a101 1
	BIO *in=NULL,*out=NULL;
d116 3
d202 1
a202 1
#ifndef NO_IDEA
d205 4
d221 1
a221 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
a232 1
	in=BIO_new(BIO_s_file());
a233 5
	if ((in == NULL) || (out == NULL))
		{
		ERR_print_errors(bio_err);
		goto end;
		}
d235 2
a236 10
	if (infile == NULL)
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
			perror(infile);
			goto end;
			}
		}
d238 14
a251 4
	BIO_printf(bio_err,"read RSA key\n");
	if	(informat == FORMAT_ASN1) {
		if (pubin) rsa=d2i_RSA_PUBKEY_bio(in,NULL);
		else rsa=d2i_RSAPrivateKey_bio(in,NULL);
d253 1
a253 36
#ifndef NO_RC4
	else if (informat == FORMAT_NETSCAPE)
		{
		BUF_MEM *buf=NULL;
		unsigned char *p;
		int size=0;

		buf=BUF_MEM_new();
		for (;;)
			{
			if ((buf == NULL) || (!BUF_MEM_grow(buf,size+1024*10)))
				goto end;
			i=BIO_read(in,&(buf->data[size]),1024*10);
			size+=i;
			if (i == 0) break;
			if (i < 0)
				{
				perror("reading private key");
				BUF_MEM_free(buf);
				goto end;
				}
			}
		p=(unsigned char *)buf->data;
		rsa=d2i_RSA_NET(NULL,&p,(long)size,NULL, sgckey);
		BUF_MEM_free(buf);
		}
#endif
	else if (informat == FORMAT_PEM) {
		if(pubin) rsa=PEM_read_bio_RSA_PUBKEY(in,NULL,NULL,NULL);
		else rsa=PEM_read_bio_RSAPrivateKey(in,NULL, NULL,passin);
	}
	else
		{
		BIO_printf(bio_err,"bad input format specified for key\n");
		goto end;
		}
a255 1
		BIO_printf(bio_err,"unable to load key\n");
d263 1
a263 1
#ifdef VMS
d302 1
a302 1
			long e;
d304 4
a307 4
			while ((e = ERR_peek_error()) != 0 &&
				ERR_GET_LIB(e) == ERR_LIB_RSA &&
				ERR_GET_FUNC(e) == RSA_F_RSA_CHECK_KEY &&
				ERR_GET_REASON(e) != ERR_R_MALLOC_FAILURE)
d309 1
a309 1
				BIO_printf(out, "RSA key error: %s\n", ERR_reason_error_string(e));
d331 1
a331 1
#ifndef NO_RC4
a366 1
	if(in != NULL) BIO_free(in);
d371 1
d374 1
a374 1
#else /* !NO_RSA */
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d71 1
d94 1
d97 1
a97 1
	int i,badops=0;
d105 1
d154 7
d191 1
d206 1
d212 18
d287 1
a287 1
		rsa=d2i_Netscape_RSA(NULL,&p,(long)size,NULL);
d308 1
d310 7
d385 2
a386 2
		size=i2d_Netscape_RSA(rsa,NULL,NULL);
		if ((p=(unsigned char *)Malloc(size)) == NULL)
d388 1
a388 1
			BIO_printf(bio_err,"Malloc failure\n");
d392 1
a392 1
		i2d_Netscape_RSA(rsa,&p,NULL);
d394 1
a394 1
		Free(pp);
d415 1
a415 1
	if(out != NULL) BIO_free(out);
d417 2
a418 2
	if(passin) Free(passin);
	if(passout) Free(passout);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@a181 1
		BIO_printf(bio_err," -in arg         input file\n");
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d85 2
d89 2
d99 1
d101 2
d141 14
d178 9
a186 6
		BIO_printf(bio_err," -inform arg   input format - one of DER NET PEM\n");
		BIO_printf(bio_err," -outform arg  output format - one of DER NET PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file\n");
		BIO_printf(bio_err," -des          encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3         encrypt PEM output with ede cbc des using 168 bit key\n");
d188 1
a188 1
		BIO_printf(bio_err," -idea         encrypt PEM output with cbc idea\n");
d190 6
a195 4
		BIO_printf(bio_err," -text         print the key in text\n");
		BIO_printf(bio_err," -noout        don't print key out\n");
		BIO_printf(bio_err," -modulus      print the RSA key modulus\n");
		BIO_printf(bio_err," -check        verify key consistency\n");
d201 10
d230 5
a234 3
	BIO_printf(bio_err,"read RSA private key\n");
	if	(informat == FORMAT_ASN1)
		rsa=d2i_RSAPrivateKey_bio(in,NULL);
d258 1
a258 1
		rsa=(RSA *)d2i_Netscape_RSA(NULL,&p,(long)size,NULL);
d262 4
a265 2
	else if (informat == FORMAT_PEM)
		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,NULL,NULL);
d273 1
a273 1
		BIO_printf(bio_err,"unable to load Private Key\n");
d299 1
a299 1
		fprintf(stdout,"Modulus=");
d301 1
a301 1
		fprintf(stdout,"\n");
d331 10
a340 4
	if (noout) goto end;
	BIO_printf(bio_err,"writing RSA private key\n");
	if 	(outformat == FORMAT_ASN1)
		i=i2d_RSAPrivateKey_bio(out,rsa);
d360 6
a365 3
	else if (outformat == FORMAT_PEM)
		i=PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,NULL,NULL);
	else	{
d371 1
a371 1
		BIO_printf(bio_err,"unable to write private key\n");
d377 5
a381 3
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free(out);
	if (rsa != NULL) RSA_free(rsa);
d384 6
@


1.1
log
@Initial revision
@
text
@d59 1
d65 6
a70 6
#include "bio.h"
#include "err.h"
#include "rsa.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"
d84 1
d87 1
a87 3
int MAIN(argc, argv)
int argc;
char **argv;
d92 1
a92 1
	EVP_CIPHER *enc=NULL;
d94 1
a94 1
	int informat,outformat,text=0,noout=0;
d140 2
d159 1
a159 1
		BIO_printf(bio_err," -in arg       inout file\n");
d169 1
d225 1
a225 1
		rsa=PEM_read_bio_RSAPrivateKey(in,NULL,NULL);
d264 27
d315 1
a315 1
		i=PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,NULL);
d333 1
a333 1

@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d64 6
a69 6
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
a80 3
 * -aes128	- encrypt output if PEM format
 * -aes192	- encrypt output if PEM format
 * -aes256	- encrypt output if PEM format
a82 3
 * -check	- verify key consistency
 * -pubin	- Expect a public key in input file.
 * -pubout	- Output a public key.
d85 3
a87 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
a88 1
	ENGINE *e = NULL;
d91 4
a94 5
	int i,badops=0, sgckey=0;
	const EVP_CIPHER *enc=NULL;
	BIO *out=NULL;
	int informat,outformat,text=0,check=0,noout=0;
	int pubin = 0, pubout = 0;
a95 3
	char *passargin = NULL, *passargout = NULL;
	char *passin = NULL, *passout = NULL;
	char *engine=NULL;
a103 3
	if (!load_config(bio_err, NULL))
		goto end;

a133 21
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
			passargin= *(++argv);
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
			passargout= *(++argv);
			}
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
		else if (strcmp(*argv,"-sgckey") == 0)
			sgckey=1;
		else if (strcmp(*argv,"-pubin") == 0)
			pubin=1;
		else if (strcmp(*argv,"-pubout") == 0)
			pubout=1;
a139 2
		else if (strcmp(*argv,"-check") == 0)
			check=1;
d155 8
a162 15
		BIO_printf(bio_err," -inform arg     input format - one of DER NET PEM\n");
		BIO_printf(bio_err," -outform arg    output format - one of DER NET PEM\n");
		BIO_printf(bio_err," -in arg         input file\n");
		BIO_printf(bio_err," -sgckey         Use IIS SGC key format\n");
		BIO_printf(bio_err," -passin arg     input file pass phrase source\n");
		BIO_printf(bio_err," -out arg        output file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err," -des            encrypt PEM output with cbc des\n");
		BIO_printf(bio_err," -des3           encrypt PEM output with ede cbc des using 168 bit key\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err," -idea           encrypt PEM output with cbc idea\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d164 3
a166 7
		BIO_printf(bio_err," -text           print the key in text\n");
		BIO_printf(bio_err," -noout          don't print key out\n");
		BIO_printf(bio_err," -modulus        print the RSA key modulus\n");
		BIO_printf(bio_err," -check          verify key consistency\n");
		BIO_printf(bio_err," -pubin          expect a public key in input file\n");
		BIO_printf(bio_err," -pubout         output a public key\n");
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
d172 7
a178 1
        e = setup_engine(bio_err, engine, 0);
d180 10
a189 4
	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}
d191 35
a225 2
	if(check && pubin) {
		BIO_printf(bio_err, "Only private keys can be checked\n");
d227 1
a227 23
	}

	out=BIO_new(BIO_s_file());

	{
		EVP_PKEY	*pkey;

		if (pubin)
			pkey = load_pubkey(bio_err, infile,
				(informat == FORMAT_NETSCAPE && sgckey ?
					FORMAT_IISSGC : informat),
				passin, e, "Public Key");
		else
			pkey = load_key(bio_err, infile,
				(informat == FORMAT_NETSCAPE && sgckey ?
					FORMAT_IISSGC : informat),
				passin, e, "Private Key");

		if (pkey != NULL)
		rsa = pkey == NULL ? NULL : EVP_PKEY_get1_RSA(pkey);
		EVP_PKEY_free(pkey);
	}

d230 1
a235 1
		{
a236 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d256 1
a256 1
		BIO_printf(out,"Modulus=");
d258 1
a258 1
		BIO_printf(out,"\n");
d261 5
a265 38
	if (check)
		{
		int r = RSA_check_key(rsa);

		if (r == 1)
			BIO_printf(out,"RSA key ok\n");
		else if (r == 0)
			{
			long err;

			while ((err = ERR_peek_error()) != 0 &&
				ERR_GET_LIB(err) == ERR_LIB_RSA &&
				ERR_GET_FUNC(err) == RSA_F_RSA_CHECK_KEY &&
				ERR_GET_REASON(err) != ERR_R_MALLOC_FAILURE)
				{
				BIO_printf(out, "RSA key error: %s\n", ERR_reason_error_string(err));
				ERR_get_error(); /* remove e from error stack */
				}
			}
		
		if (r == -1 || ERR_peek_error() != 0) /* should happen only if r == -1 */
			{
			ERR_print_errors(bio_err);
			goto end;
			}
		}
		
	if (noout)
		{
		ret = 0;
		goto end;
		}
	BIO_printf(bio_err,"writing RSA key\n");
	if 	(outformat == FORMAT_ASN1) {
		if(pubout || pubin) i=i2d_RSA_PUBKEY_bio(out,rsa);
		else i=i2d_RSAPrivateKey_bio(out,rsa);
	}
#ifndef OPENSSL_NO_RC4
d272 2
a273 2
		size=i2d_RSA_NET(rsa,NULL,NULL, sgckey);
		if ((p=(unsigned char *)OPENSSL_malloc(size)) == NULL)
d275 1
a275 1
			BIO_printf(bio_err,"Memory allocation failure\n");
d279 1
a279 1
		i2d_RSA_NET(rsa,&p,NULL, sgckey);
d281 1
a281 1
		OPENSSL_free(pp);
d284 3
a286 6
	else if (outformat == FORMAT_PEM) {
		if(pubout || pubin)
		    i=PEM_write_bio_RSA_PUBKEY(out,rsa);
		else i=PEM_write_bio_RSAPrivateKey(out,rsa,
						enc,NULL,0,NULL,passout);
	} else	{
d292 1
a292 1
		BIO_printf(bio_err,"unable to write key\n");
d298 3
a300 5
	if(out != NULL) BIO_free_all(out);
	if(rsa != NULL) RSA_free(rsa);
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
	apps_shutdown();
a302 1
#else /* !OPENSSL_NO_RSA */
a303 5
# if PEDANTIC
static void *dummy=&dummy;
# endif

#endif
@


1.1.1.3
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d241 1
a241 1
					FORMAT_IISSGC : informat), 1,
d246 1
a246 1
					FORMAT_IISSGC : informat), 1,
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a106 1
#ifndef OPENSSL_NO_ENGINE
a107 1
#endif
a158 1
#ifndef OPENSSL_NO_ENGINE
a163 1
#endif
a214 1
#ifndef OPENSSL_NO_ENGINE
a215 1
#endif
a220 1
#ifndef OPENSSL_NO_ENGINE
a221 1
#endif
d372 1
a372 1
	OPENSSL_EXIT(ret);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a58 1
#include <openssl/opensslconf.h>
a70 1
#include <openssl/bn.h>
a81 1
 * -seed	- encrypt output if PEM format
a84 3
 * -camellia128 - encrypt output if PEM format
 * -camellia192 - encrypt output if PEM format
 * -camellia256 - encrypt output if PEM format
a208 3
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err," -seed           encrypt PEM output with cbc seed\n");
#endif
a212 4
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
#endif
d310 1
a310 1
			unsigned long err;
@


1.1.1.6
log
@import OpenSSL-1.0.0a
@
text
@a117 2
	int pvk_encr = 2;

a179 10
		else if (strcmp(*argv,"-RSAPublicKey_in") == 0)
			pubin = 2;
		else if (strcmp(*argv,"-RSAPublicKey_out") == 0)
			pubout = 2;
		else if (strcmp(*argv,"-pvk-strong") == 0)
			pvk_encr=2;
		else if (strcmp(*argv,"-pvk-weak") == 0)
			pvk_encr=1;
		else if (strcmp(*argv,"-pvk-none") == 0)
			pvk_encr=0;
d260 3
a262 15
			{
			int tmpformat=-1;
			if (pubin == 2)
				{
				if (informat == FORMAT_PEM)
					tmpformat = FORMAT_PEMRSA;
				else if (informat == FORMAT_ASN1)
					tmpformat = FORMAT_ASN1RSA;
				}
			else if (informat == FORMAT_NETSCAPE && sgckey)
				tmpformat = FORMAT_IISSGC;
			else
				tmpformat = informat;
					
			pkey = load_pubkey(bio_err, infile, tmpformat, 1,
a263 1
			}
d271 1
a271 1
			rsa = EVP_PKEY_get1_RSA(pkey);
d349 1
a349 7
		if(pubout || pubin) 
			{
			if (pubout == 2)
				i=i2d_RSAPublicKey_bio(out,rsa);
			else
				i=i2d_RSA_PUBKEY_bio(out,rsa);
			}
d373 1
a373 6
			{
			if (pubout == 2)
		    		i=PEM_write_bio_RSAPublicKey(out,rsa);
			else
		    		i=PEM_write_bio_RSA_PUBKEY(out,rsa);
			}
a375 13
#if !defined(OPENSSL_NO_DSA) && !defined(OPENSSL_NO_RC4)
	} else if (outformat == FORMAT_MSBLOB || outformat == FORMAT_PVK) {
		EVP_PKEY *pk;
		pk = EVP_PKEY_new();
		EVP_PKEY_set1_RSA(pk, rsa);
		if (outformat == FORMAT_PVK)
			i = i2b_PVK_bio(out, pk, pvk_encr, 0, passout);
		else if (pubin || pubout)
			i = i2b_PublicKey_bio(out, pk);
		else
			i = i2b_PrivateKey_bio(out, pk);
		EVP_PKEY_free(pk);
#endif
d380 1
a380 1
	if (i <= 0)
@


