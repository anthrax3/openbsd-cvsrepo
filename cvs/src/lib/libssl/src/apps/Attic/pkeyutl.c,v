head	1.15;
access;
symbols
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.12
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.8
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.6
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.2
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.4
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.6
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.14;
commitid	7A7DObXgY4Fni8xJ;

1.14
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	EB0l28piqIRSpBUh;

1.13
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.12;
commitid	0NuggCO2WJOZj8Kh;

1.12
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	mJUVYpkFBZ0Zv2bG;

1.11
date	2014.05.22.21.12.14;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.04.33.09;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.06.06.30.00;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.06.06.30.00;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: pkeyutl.c,v 1.14 2014/07/14 00:35:10 deraadt Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2006.
 */
/* ====================================================================
 * Copyright (c) 2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>

#define KEY_PRIVKEY	1
#define KEY_PUBKEY	2
#define KEY_CERT	3

static void usage(void);

static EVP_PKEY_CTX *init_ctx(int *pkeysize,
    char *keyfile, int keyform, int key_type,
    char *passargin, int pkey_op, ENGINE * e);

static int setup_peer(BIO * err, EVP_PKEY_CTX * ctx, int peerform,
    const char *file);

static int do_keyop(EVP_PKEY_CTX * ctx, int pkey_op,
    unsigned char *out, size_t * poutlen,
    unsigned char *in, size_t inlen);

int pkeyutl_main(int argc, char **);

int
pkeyutl_main(int argc, char **argv)
{
	BIO *in = NULL, *out = NULL;
	char *infile = NULL, *outfile = NULL, *sigfile = NULL;
	ENGINE *e = NULL;
	int pkey_op = EVP_PKEY_OP_SIGN, key_type = KEY_PRIVKEY;
	int keyform = FORMAT_PEM, peerform = FORMAT_PEM;
	char badarg = 0, rev = 0;
	char hexdump = 0, asn1parse = 0;
	EVP_PKEY_CTX *ctx = NULL;
	char *passargin = NULL;
	int keysize = -1;

	unsigned char *buf_in = NULL, *buf_out = NULL, *sig = NULL;
	size_t buf_outlen;
	int buf_inlen = 0, siglen = -1;

	int ret = 1, rv = -1;

	argc--;
	argv++;

	ERR_load_crypto_strings();
	OpenSSL_add_all_algorithms();

	while (argc >= 1) {
		if (!strcmp(*argv, "-in")) {
			if (--argc < 1)
				badarg = 1;
			else
				infile = *(++argv);
		} else if (!strcmp(*argv, "-out")) {
			if (--argc < 1)
				badarg = 1;
			else
				outfile = *(++argv);
		} else if (!strcmp(*argv, "-sigfile")) {
			if (--argc < 1)
				badarg = 1;
			else
				sigfile = *(++argv);
		} else if (!strcmp(*argv, "-inkey")) {
			if (--argc < 1)
				badarg = 1;
			else {
				ctx = init_ctx(&keysize,
				    *(++argv), keyform, key_type,
				    passargin, pkey_op, e);
				if (!ctx) {
					BIO_puts(bio_err,
					    "Error initializing context\n");
					ERR_print_errors(bio_err);
					badarg = 1;
				}
			}
		} else if (!strcmp(*argv, "-peerkey")) {
			if (--argc < 1)
				badarg = 1;
			else if (!setup_peer(bio_err, ctx, peerform, *(++argv)))
				badarg = 1;
		} else if (!strcmp(*argv, "-passin")) {
			if (--argc < 1)
				badarg = 1;
			else
				passargin = *(++argv);
		} else if (strcmp(*argv, "-peerform") == 0) {
			if (--argc < 1)
				badarg = 1;
			else
				peerform = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-keyform") == 0) {
			if (--argc < 1)
				badarg = 1;
			else
				keyform = str2fmt(*(++argv));
		}
#ifndef OPENSSL_NO_ENGINE
		else if (!strcmp(*argv, "-engine")) {
			if (--argc < 1)
				badarg = 1;
			else
				e = setup_engine(bio_err, *(++argv), 0);
		}
#endif
		else if (!strcmp(*argv, "-pubin"))
			key_type = KEY_PUBKEY;
		else if (!strcmp(*argv, "-certin"))
			key_type = KEY_CERT;
		else if (!strcmp(*argv, "-asn1parse"))
			asn1parse = 1;
		else if (!strcmp(*argv, "-hexdump"))
			hexdump = 1;
		else if (!strcmp(*argv, "-sign"))
			pkey_op = EVP_PKEY_OP_SIGN;
		else if (!strcmp(*argv, "-verify"))
			pkey_op = EVP_PKEY_OP_VERIFY;
		else if (!strcmp(*argv, "-verifyrecover"))
			pkey_op = EVP_PKEY_OP_VERIFYRECOVER;
		else if (!strcmp(*argv, "-rev"))
			rev = 1;
		else if (!strcmp(*argv, "-encrypt"))
			pkey_op = EVP_PKEY_OP_ENCRYPT;
		else if (!strcmp(*argv, "-decrypt"))
			pkey_op = EVP_PKEY_OP_DECRYPT;
		else if (!strcmp(*argv, "-derive"))
			pkey_op = EVP_PKEY_OP_DERIVE;
		else if (strcmp(*argv, "-pkeyopt") == 0) {
			if (--argc < 1)
				badarg = 1;
			else if (!ctx) {
				BIO_puts(bio_err,
				    "-pkeyopt command before -inkey\n");
				badarg = 1;
			} else if (pkey_ctrl_string(ctx, *(++argv)) <= 0) {
				BIO_puts(bio_err, "parameter setting error\n");
				ERR_print_errors(bio_err);
				goto end;
			}
		} else
			badarg = 1;
		if (badarg) {
			usage();
			goto end;
		}
		argc--;
		argv++;
	}

	if (!ctx) {
		usage();
		goto end;
	}
	if (sigfile && (pkey_op != EVP_PKEY_OP_VERIFY)) {
		BIO_puts(bio_err, "Signature file specified for non verify\n");
		goto end;
	}
	if (!sigfile && (pkey_op == EVP_PKEY_OP_VERIFY)) {
		BIO_puts(bio_err, "No signature file specified for verify\n");
		goto end;
	}

	if (pkey_op != EVP_PKEY_OP_DERIVE) {
		if (infile) {
			if (!(in = BIO_new_file(infile, "rb"))) {
				BIO_puts(bio_err,
				    "Error Opening Input File\n");
				ERR_print_errors(bio_err);
				goto end;
			}
		} else
			in = BIO_new_fp(stdin, BIO_NOCLOSE);
	}
	if (outfile) {
		if (!(out = BIO_new_file(outfile, "wb"))) {
			BIO_printf(bio_err, "Error Creating Output File\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	} else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
	}

	if (sigfile) {
		BIO *sigbio = BIO_new_file(sigfile, "rb");
		if (!sigbio) {
			BIO_printf(bio_err, "Can't open signature file %s\n",
			    sigfile);
			goto end;
		}
		siglen = bio_to_mem(&sig, keysize * 10, sigbio);
		BIO_free(sigbio);
		if (siglen <= 0) {
			BIO_printf(bio_err, "Error reading signature data\n");
			goto end;
		}
	}
	if (in) {
		/* Read the input data */
		buf_inlen = bio_to_mem(&buf_in, keysize * 10, in);
		if (buf_inlen <= 0) {
			BIO_printf(bio_err, "Error reading input Data\n");
			exit(1);
		}
		if (rev) {
			size_t i;
			unsigned char ctmp;
			size_t l = (size_t) buf_inlen;
			for (i = 0; i < l / 2; i++) {
				ctmp = buf_in[i];
				buf_in[i] = buf_in[l - 1 - i];
				buf_in[l - 1 - i] = ctmp;
			}
		}
	}
	if (pkey_op == EVP_PKEY_OP_VERIFY) {
		rv = EVP_PKEY_verify(ctx, sig, (size_t) siglen,
		    buf_in, (size_t) buf_inlen);
		if (rv == 0)
			BIO_puts(out, "Signature Verification Failure\n");
		else if (rv == 1)
			BIO_puts(out, "Signature Verified Successfully\n");
		if (rv >= 0)
			goto end;
	} else {
		rv = do_keyop(ctx, pkey_op, NULL, (size_t *) & buf_outlen,
		    buf_in, (size_t) buf_inlen);
		if (rv > 0) {
			buf_out = malloc(buf_outlen);
			if (!buf_out)
				rv = -1;
			else
				rv = do_keyop(ctx, pkey_op,
				    buf_out, (size_t *) & buf_outlen,
				    buf_in, (size_t) buf_inlen);
		}
	}

	if (rv <= 0) {
		BIO_printf(bio_err, "Public Key operation error\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	ret = 0;
	if (asn1parse) {
		if (!ASN1_parse_dump(out, buf_out, buf_outlen, 1, -1))
			ERR_print_errors(bio_err);
	} else if (hexdump)
		BIO_dump(out, (char *) buf_out, buf_outlen);
	else
		BIO_write(out, buf_out, buf_outlen);

end:
	if (ctx)
		EVP_PKEY_CTX_free(ctx);
	BIO_free(in);
	BIO_free_all(out);
	free(buf_in);
	free(buf_out);
	free(sig);

	return ret;
}

static void
usage()
{
	BIO_printf(bio_err, "Usage: pkeyutl [options]\n");
	BIO_printf(bio_err, "-in file        input file\n");
	BIO_printf(bio_err, "-out file       output file\n");
	BIO_printf(bio_err, "-sigfile file signature file (verify operation only)\n");
	BIO_printf(bio_err, "-inkey file     input key\n");
	BIO_printf(bio_err, "-keyform arg    private key format - default PEM\n");
	BIO_printf(bio_err, "-pubin          input is a public key\n");
	BIO_printf(bio_err, "-certin         input is a certificate carrying a public key\n");
	BIO_printf(bio_err, "-pkeyopt X:Y    public key options\n");
	BIO_printf(bio_err, "-sign           sign with private key\n");
	BIO_printf(bio_err, "-verify         verify with public key\n");
	BIO_printf(bio_err, "-verifyrecover  verify with public key, recover original data\n");
	BIO_printf(bio_err, "-encrypt        encrypt with public key\n");
	BIO_printf(bio_err, "-decrypt        decrypt with private key\n");
	BIO_printf(bio_err, "-derive         derive shared secret\n");
	BIO_printf(bio_err, "-hexdump        hex dump output\n");
#ifndef OPENSSL_NO_ENGINE
	BIO_printf(bio_err, "-engine e       use engine e, possibly a hardware device.\n");
#endif
	BIO_printf(bio_err, "-passin arg     pass phrase source\n");

}

static EVP_PKEY_CTX *
init_ctx(int *pkeysize,
    char *keyfile, int keyform, int key_type,
    char *passargin, int pkey_op, ENGINE * e)
{
	EVP_PKEY *pkey = NULL;
	EVP_PKEY_CTX *ctx = NULL;
	char *passin = NULL;
	int rv = -1;
	X509 *x;
	if (((pkey_op == EVP_PKEY_OP_SIGN) || (pkey_op == EVP_PKEY_OP_DECRYPT)
		|| (pkey_op == EVP_PKEY_OP_DERIVE))
	    && (key_type != KEY_PRIVKEY)) {
		BIO_printf(bio_err, "A private key is needed for this operation\n");
		goto end;
	}
	if (!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}
	switch (key_type) {
	case KEY_PRIVKEY:
		pkey = load_key(bio_err, keyfile, keyform, 0,
		    passin, e, "Private Key");
		break;

	case KEY_PUBKEY:
		pkey = load_pubkey(bio_err, keyfile, keyform, 0,
		    NULL, e, "Public Key");
		break;

	case KEY_CERT:
		x = load_cert(bio_err, keyfile, keyform,
		    NULL, e, "Certificate");
		if (x) {
			pkey = X509_get_pubkey(x);
			X509_free(x);
		}
		break;

	}

	*pkeysize = EVP_PKEY_size(pkey);

	if (!pkey)
		goto end;

	ctx = EVP_PKEY_CTX_new(pkey, e);

	EVP_PKEY_free(pkey);

	if (!ctx)
		goto end;

	switch (pkey_op) {
	case EVP_PKEY_OP_SIGN:
		rv = EVP_PKEY_sign_init(ctx);
		break;

	case EVP_PKEY_OP_VERIFY:
		rv = EVP_PKEY_verify_init(ctx);
		break;

	case EVP_PKEY_OP_VERIFYRECOVER:
		rv = EVP_PKEY_verify_recover_init(ctx);
		break;

	case EVP_PKEY_OP_ENCRYPT:
		rv = EVP_PKEY_encrypt_init(ctx);
		break;

	case EVP_PKEY_OP_DECRYPT:
		rv = EVP_PKEY_decrypt_init(ctx);
		break;

	case EVP_PKEY_OP_DERIVE:
		rv = EVP_PKEY_derive_init(ctx);
		break;
	}

	if (rv <= 0) {
		EVP_PKEY_CTX_free(ctx);
		ctx = NULL;
	}
end:

	free(passin);

	return ctx;


}

static int
setup_peer(BIO * err, EVP_PKEY_CTX * ctx, int peerform,
    const char *file)
{
	EVP_PKEY *peer = NULL;
	int ret;
	if (!ctx) {
		BIO_puts(err, "-peerkey command before -inkey\n");
		return 0;
	}
	peer = load_pubkey(bio_err, file, peerform, 0, NULL, NULL, "Peer Key");

	if (!peer) {
		BIO_printf(bio_err, "Error reading peer key %s\n", file);
		ERR_print_errors(err);
		return 0;
	}
	ret = EVP_PKEY_derive_set_peer(ctx, peer);

	EVP_PKEY_free(peer);
	if (ret <= 0)
		ERR_print_errors(err);
	return ret;
}

static int
do_keyop(EVP_PKEY_CTX * ctx, int pkey_op,
    unsigned char *out, size_t * poutlen,
    unsigned char *in, size_t inlen)
{
	int rv = 0;
	switch (pkey_op) {
	case EVP_PKEY_OP_VERIFYRECOVER:
		rv = EVP_PKEY_verify_recover(ctx, out, poutlen, in, inlen);
		break;

	case EVP_PKEY_OP_SIGN:
		rv = EVP_PKEY_sign(ctx, out, poutlen, in, inlen);
		break;

	case EVP_PKEY_OP_ENCRYPT:
		rv = EVP_PKEY_encrypt(ctx, out, poutlen, in, inlen);
		break;

	case EVP_PKEY_OP_DECRYPT:
		rv = EVP_PKEY_decrypt(ctx, out, poutlen, in, inlen);
		break;

	case EVP_PKEY_OP_DERIVE:
		rv = EVP_PKEY_derive(ctx, out, poutlen);
		break;

	}
	return rv;
}
@


1.14
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: pkeyutl.c,v 1.13 2014/07/12 17:54:31 jsing Exp $ */
@


1.13
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pkeyutl.c,v 1.12 2014/06/12 15:49:27 deraadt Exp $ */
d86 1
a86 1
int 
d330 1
a330 1
static void 
d449 1
a449 1
static int 
d474 1
a474 1
static int 
@


1.12
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a107 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.11
log
@if (x) free(x) -> free(x); semantic patch generated with coccinelle, carefully
eyeballed before applying. Contributed by Cyril Roelandt on tech@@
@
text
@d1 1
@


1.10
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@d444 1
a444 2
	if (passin)
		free(passin);
@


1.9
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d325 4
a328 6
	if (buf_in)
		free(buf_in);
	if (buf_out)
		free(buf_out);
	if (sig)
		free(sig);
@


1.8
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d58 1
d61 1
a61 1
#include <string.h>
d63 1
a64 1
#include <openssl/evp.h>
a70 2


@


1.7
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a108 3
	if (!bio_err)
		bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);

d111 1
@


1.6
log
@whitespace normalization
@
text
@a231 2
/* FIXME: seed PRNG only if needed */
	app_RAND_load_file(NULL, bio_err, 0);
@


1.5
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d73 1
a73 2
static EVP_PKEY_CTX *
init_ctx(int *pkeysize,
d77 1
a77 2
static int 
setup_peer(BIO * err, EVP_PKEY_CTX * ctx, int peerform,
d80 1
a80 2
static int 
do_keyop(EVP_PKEY_CTX * ctx, int pkey_op,
@


1.4
log
@KaboomNF
@
text
@a70 1
#undef PROG
a71 1
#define PROG pkeyutl_main
d87 1
a87 1
int MAIN(int argc, char **);
d90 1
a90 1
MAIN(int argc, char **argv)
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d75 13
a87 10
static EVP_PKEY_CTX *init_ctx(int *pkeysize,
				char *keyfile, int keyform, int key_type,
				char *passargin, int pkey_op, ENGINE *e);

static int setup_peer(BIO *err, EVP_PKEY_CTX *ctx, int peerform,
							const char *file);

static int do_keyop(EVP_PKEY_CTX *ctx, int pkey_op,
		unsigned char *out, size_t *poutlen,
		unsigned char *in, size_t inlen);
d91 2
a92 1
int MAIN(int argc, char **argv)
d114 2
a115 1
	if(!bio_err) bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);
d121 13
a133 20
	
	while(argc >= 1)
		{
		if (!strcmp(*argv,"-in"))
			{
			if (--argc < 1) badarg = 1;
                        else infile= *(++argv);
			}
		else if (!strcmp(*argv,"-out"))
			{
			if (--argc < 1) badarg = 1;
			else outfile= *(++argv);
			}
		else if (!strcmp(*argv,"-sigfile"))
			{
			if (--argc < 1) badarg = 1;
			else sigfile= *(++argv);
			}
		else if(!strcmp(*argv, "-inkey"))
			{
d137 5
a141 1
				{
d143 3
a145 4
						*(++argv), keyform, key_type,
						passargin, pkey_op, e);
				if (!ctx)
					{
d147 1
a147 1
						"Error initializing context\n");
a149 1
					}
d152 1
a152 2
		else if (!strcmp(*argv,"-peerkey"))
			{
d157 16
a172 16
			}
		else if (!strcmp(*argv,"-passin"))
			{
			if (--argc < 1) badarg = 1;
			else passargin= *(++argv);
			}
		else if (strcmp(*argv,"-peerform") == 0)
			{
			if (--argc < 1) badarg = 1;
			else peerform=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-keyform") == 0)
			{
			if (--argc < 1) badarg = 1;
			else keyform=str2fmt(*(++argv));
			}
d174 1
a174 2
		else if(!strcmp(*argv, "-engine"))
			{
d179 1
a179 1
			}
d181 1
a181 1
		else if(!strcmp(*argv, "-pubin"))
d183 1
a183 1
		else if(!strcmp(*argv, "-certin"))
d185 1
a185 1
		else if(!strcmp(*argv, "-asn1parse"))
d187 1
a187 1
		else if(!strcmp(*argv, "-hexdump"))
d189 1
a189 1
		else if(!strcmp(*argv, "-sign"))
d191 1
a191 1
		else if(!strcmp(*argv, "-verify"))
d193 1
a193 1
		else if(!strcmp(*argv, "-verifyrecover"))
d195 1
a195 1
		else if(!strcmp(*argv, "-rev"))
d197 1
a197 1
		else if(!strcmp(*argv, "-encrypt"))
d199 1
a199 1
		else if(!strcmp(*argv, "-decrypt"))
d201 1
a201 1
		else if(!strcmp(*argv, "-derive"))
d203 1
a203 2
		else if (strcmp(*argv,"-pkeyopt") == 0)
			{
d206 1
a206 2
			else if (!ctx)
				{
d208 1
a208 1
					"-pkeyopt command before -inkey\n");
d210 1
a210 3
				}
			else if (pkey_ctrl_string(ctx, *(++argv)) <= 0)
				{
a213 1
				}
d215 3
a217 3
		else badarg = 1;
		if(badarg)
			{
d220 1
a220 1
			}
d223 1
a223 1
		}
d225 1
a225 2
	if (!ctx)
		{
d228 2
a229 4
		}

	if (sigfile && (pkey_op != EVP_PKEY_OP_VERIFY))
		{
d232 2
a233 4
		}

	if (!sigfile && (pkey_op == EVP_PKEY_OP_VERIFY))
		{
d236 1
a236 2
		}

d240 3
a242 6
	if (pkey_op != EVP_PKEY_OP_DERIVE)
		{
		if(infile)
			{
			if(!(in = BIO_new_file(infile, "rb")))
				{
d244 2
a245 2
					"Error Opening Input File\n");
				ERR_print_errors(bio_err);	
a246 1
				}
d248 1
a248 1
		else
d250 3
a252 6
		}

	if(outfile)
		{
		if(!(out = BIO_new_file(outfile, "wb")))
			{
d254 1
a254 1
			ERR_print_errors(bio_err);	
a255 1
			}
d257 1
a257 2
	else
		{
d261 1
a261 2
	if (sigfile)
		{
d263 1
a263 2
		if (!sigbio)
			{
d265 1
a265 1
								sigfile);
d267 1
a267 1
			}
d270 1
a270 2
		if (siglen <= 0)
			{
a272 1
			}
d274 2
a275 3
	
	if (in)
		{
d278 1
a278 2
		if(buf_inlen <= 0)
			{
d281 2
a282 3
			}
		if(rev)
			{
d285 2
a286 3
			size_t l = (size_t)buf_inlen;
			for(i = 0; i < l/2; i++)
				{
a289 1
				}
d292 4
a295 5

	if(pkey_op == EVP_PKEY_OP_VERIFY)
		{
		rv  = EVP_PKEY_verify(ctx, sig, (size_t)siglen,
				      buf_in, (size_t)buf_inlen);
d302 4
a305 7
		}
	else
		{	
		rv = do_keyop(ctx, pkey_op, NULL, (size_t *)&buf_outlen,
			      buf_in, (size_t)buf_inlen);
		if (rv > 0)
			{
d311 2
a312 3
						buf_out, (size_t *)&buf_outlen,
						buf_in, (size_t)buf_inlen);
			}
d314 1
d316 1
a316 2
	if(rv <= 0)
		{
d320 1
a320 1
		}
d322 2
a323 3
	if(asn1parse)
		{
		if(!ASN1_parse_dump(out, buf_out, buf_outlen, 1, -1))
d325 2
a326 3
		}
	else if(hexdump)
		BIO_dump(out, (char *)buf_out, buf_outlen);
d330 1
a330 1
	end:
d344 2
a345 1
static void usage()
d370 5
a374 4
static EVP_PKEY_CTX *init_ctx(int *pkeysize,
				char *keyfile, int keyform, int key_type,
				char *passargin, int pkey_op, ENGINE *e)
	{
d380 1
a380 1
	if(((pkey_op == EVP_PKEY_OP_SIGN) || (pkey_op == EVP_PKEY_OP_DECRYPT) 
d382 1
a382 2
		&& (key_type != KEY_PRIVKEY))
		{
d385 2
a386 3
		}
	if(!app_passwd(bio_err, passargin, NULL, &passin, NULL))
		{
d389 3
a391 4
		}
	switch(key_type)
		{
		case KEY_PRIVKEY:
d393 1
a393 1
			passin, e, "Private Key");
d396 1
a396 1
		case KEY_PUBKEY:
d398 1
a398 1
			NULL, e, "Public Key");
d401 1
a401 1
		case KEY_CERT:
d403 2
a404 3
			NULL, e, "Certificate");
		if(x)
			{
d407 1
a407 1
			}
d410 1
a410 1
		}
d424 2
a425 3
	switch(pkey_op)
		{
		case EVP_PKEY_OP_SIGN:
d429 1
a429 1
		case EVP_PKEY_OP_VERIFY:
d433 1
a433 1
		case EVP_PKEY_OP_VERIFYRECOVER:
d437 1
a437 1
		case EVP_PKEY_OP_ENCRYPT:
d441 1
a441 1
		case EVP_PKEY_OP_DECRYPT:
d445 1
a445 1
		case EVP_PKEY_OP_DERIVE:
d448 1
a448 1
		}
d450 1
a450 2
	if (rv <= 0)
		{
d453 2
a454 3
		}

	end:
d462 1
a462 1
	}
d464 4
a467 3
static int setup_peer(BIO *err, EVP_PKEY_CTX *ctx, int peerform,
							const char *file)
	{
d470 1
a470 2
	if (!ctx)
		{
d473 1
a473 2
		}
		
d476 1
a476 2
	if (!peer)
		{
d480 1
a480 2
		}

d487 1
a487 1
	}
d489 5
a493 4
static int do_keyop(EVP_PKEY_CTX *ctx, int pkey_op,
		unsigned char *out, size_t *poutlen,
		unsigned char *in, size_t inlen)
	{
d495 3
a497 4
	switch(pkey_op)
		{
		case EVP_PKEY_OP_VERIFYRECOVER:
		rv  = EVP_PKEY_verify_recover(ctx, out, poutlen, in, inlen);
d500 2
a501 2
		case EVP_PKEY_OP_SIGN:
		rv  = EVP_PKEY_sign(ctx, out, poutlen, in, inlen);
d504 2
a505 2
		case EVP_PKEY_OP_ENCRYPT:
		rv  = EVP_PKEY_encrypt(ctx, out, poutlen, in, inlen);
d508 3
a510 3
		case EVP_PKEY_OP_DECRYPT:
		rv  = EVP_PKEY_decrypt(ctx, out, poutlen, in, inlen);
		break; 
d512 2
a513 2
		case EVP_PKEY_OP_DERIVE:
		rv  = EVP_PKEY_derive(ctx, out, poutlen);
d516 1
a516 1
		}
d518 1
a518 1
	}
@


1.2
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d341 1
a341 1
			buf_out = OPENSSL_malloc(buf_outlen);
d374 1
a374 1
		OPENSSL_free(buf_in);
d376 1
a376 1
		OPENSSL_free(buf_out);
d378 1
a378 1
		OPENSSL_free(sig);
d500 1
a500 1
		OPENSSL_free(passin);
@


1.1
log
@Initial revision
@
text
@d122 1
a122 1
                        infile= *(++argv);
d127 1
a127 1
			outfile= *(++argv);
d132 1
a132 1
			sigfile= *(++argv);
d162 1
a162 1
			passargin= *(++argv);
d167 1
a167 1
			peerform=str2fmt(*(++argv));
d172 1
a172 1
			keyform=str2fmt(*(++argv));
a280 6
#ifdef OPENSSL_SYS_VMS
		{
		    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		    out = BIO_push(tmpbio, out);
		}
#endif
d387 1
a387 1
	BIO_printf(bio_err, "-signature file signature file (verify operation only)\n");
@


1.1.1.1
log
@import of OpenSSL 0.9.8k
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@d393 1
a393 1
	BIO_printf(bio_err, "-sigfile file signature file (verify operation only)\n");
@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d122 1
a122 1
                        else infile= *(++argv);
d127 1
a127 1
			else outfile= *(++argv);
d132 1
a132 1
			else sigfile= *(++argv);
d162 1
a162 1
			else passargin= *(++argv);
d167 1
a167 1
			else peerform=str2fmt(*(++argv));
d172 1
a172 1
			else keyform=str2fmt(*(++argv));
@


