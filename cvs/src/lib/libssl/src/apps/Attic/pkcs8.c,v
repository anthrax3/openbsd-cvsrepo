head	1.22;
access;
symbols
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENSSL_0_9_7G:1.1.1.5
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.22
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.21;
commitid	7A7DObXgY4Fni8xJ;

1.21
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	EB0l28piqIRSpBUh;

1.20
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.19;
commitid	0NuggCO2WJOZj8Kh;

1.19
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.29.05.39.16;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.11.22.15.18;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.56.57;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.08.12;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.35.17;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.34;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.42.56;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.22;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.11.21.10.48;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.04.29.05.36.59;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: pkcs8.c,v 1.21 2014/07/14 00:35:10 deraadt Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999-2004.
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/pkcs12.h>

int pkcs8_main(int, char **);

int
pkcs8_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	char **args, *infile = NULL, *outfile = NULL;
	char *passargin = NULL, *passargout = NULL;
	BIO *in = NULL, *out = NULL;
	int topk8 = 0;
	int pbe_nid = -1;
	const EVP_CIPHER *cipher = NULL;
	int iter = PKCS12_DEFAULT_ITER;
	int informat, outformat;
	int p8_broken = PKCS8_OK;
	int nocrypt = 0;
	X509_SIG *p8 = NULL;
	PKCS8_PRIV_KEY_INFO *p8inf = NULL;
	EVP_PKEY *pkey = NULL;
	char pass[50], *passin = NULL, *passout = NULL, *p8pass = NULL;
	int badarg = 0;
	int ret = 1;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif

	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	ERR_load_crypto_strings();
	OpenSSL_add_all_algorithms();
	args = argv + 1;
	while (!badarg && *args && *args[0] == '-') {
		if (!strcmp(*args, "-v2")) {
			if (args[1]) {
				args++;
				cipher = EVP_get_cipherbyname(*args);
				if (!cipher) {
					BIO_printf(bio_err,
					    "Unknown cipher %s\n", *args);
					badarg = 1;
				}
			} else
				badarg = 1;
		} else if (!strcmp(*args, "-v1")) {
			if (args[1]) {
				args++;
				pbe_nid = OBJ_txt2nid(*args);
				if (pbe_nid == NID_undef) {
					BIO_printf(bio_err,
					    "Unknown PBE algorithm %s\n", *args);
					badarg = 1;
				}
			} else
				badarg = 1;
		} else if (!strcmp(*args, "-inform")) {
			if (args[1]) {
				args++;
				informat = str2fmt(*args);
			} else
				badarg = 1;
		} else if (!strcmp(*args, "-outform")) {
			if (args[1]) {
				args++;
				outformat = str2fmt(*args);
			} else
				badarg = 1;
		} else if (!strcmp(*args, "-topk8"))
			topk8 = 1;
		else if (!strcmp(*args, "-noiter"))
			iter = 1;
		else if (!strcmp(*args, "-nocrypt"))
			nocrypt = 1;
		else if (!strcmp(*args, "-nooct"))
			p8_broken = PKCS8_NO_OCTET;
		else if (!strcmp(*args, "-nsdb"))
			p8_broken = PKCS8_NS_DB;
		else if (!strcmp(*args, "-embed"))
			p8_broken = PKCS8_EMBEDDED_PARAM;
		else if (!strcmp(*args, "-passin")) {
			if (!args[1])
				goto bad;
			passargin = *(++args);
		} else if (!strcmp(*args, "-passout")) {
			if (!args[1])
				goto bad;
			passargout = *(++args);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*args, "-engine") == 0) {
			if (!args[1])
				goto bad;
			engine = *(++args);
		}
#endif
		else if (!strcmp(*args, "-in")) {
			if (args[1]) {
				args++;
				infile = *args;
			} else
				badarg = 1;
		} else if (!strcmp(*args, "-out")) {
			if (args[1]) {
				args++;
				outfile = *args;
			} else
				badarg = 1;
		} else
			badarg = 1;
		args++;
	}

	if (badarg) {
bad:
		BIO_printf(bio_err, "Usage pkcs8 [options]\n");
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, "-in file        input file\n");
		BIO_printf(bio_err, "-inform X       input format (DER or PEM)\n");
		BIO_printf(bio_err, "-passin arg     input file pass phrase source\n");
		BIO_printf(bio_err, "-outform X      output format (DER or PEM)\n");
		BIO_printf(bio_err, "-out file       output file\n");
		BIO_printf(bio_err, "-passout arg    output file pass phrase source\n");
		BIO_printf(bio_err, "-topk8          output PKCS8 file\n");
		BIO_printf(bio_err, "-nooct          use (nonstandard) no octet format\n");
		BIO_printf(bio_err, "-embed          use (nonstandard) embedded DSA parameters format\n");
		BIO_printf(bio_err, "-nsdb           use (nonstandard) DSA Netscape DB format\n");
		BIO_printf(bio_err, "-noiter         use 1 as iteration count\n");
		BIO_printf(bio_err, "-nocrypt        use or expect unencrypted private key\n");
		BIO_printf(bio_err, "-v2 alg         use PKCS#5 v2.0 and cipher \"alg\"\n");
		BIO_printf(bio_err, "-v1 obj         use PKCS#5 v1.5 and cipher \"alg\"\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e       use engine e, possibly a hardware device.\n");
#endif
		goto end;
	}
#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}
	if ((pbe_nid == -1) && !cipher)
		pbe_nid = NID_pbeWithMD5AndDES_CBC;

	if (infile) {
		if (!(in = BIO_new_file(infile, "rb"))) {
			BIO_printf(bio_err,
			    "Can't open input file %s\n", infile);
			goto end;
		}
	} else
		in = BIO_new_fp(stdin, BIO_NOCLOSE);

	if (outfile) {
		if (!(out = BIO_new_file(outfile, "wb"))) {
			BIO_printf(bio_err,
			    "Can't open output file %s\n", outfile);
			goto end;
		}
	} else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
	}
	if (topk8) {
		pkey = load_key(bio_err, infile, informat, 1,
		    passin, e, "key");
		if (!pkey)
			goto end;
		if (!(p8inf = EVP_PKEY2PKCS8_broken(pkey, p8_broken))) {
			BIO_printf(bio_err, "Error converting key\n");
			ERR_print_errors(bio_err);
			goto end;
		}
		if (nocrypt) {
			if (outformat == FORMAT_PEM)
				PEM_write_bio_PKCS8_PRIV_KEY_INFO(out, p8inf);
			else if (outformat == FORMAT_ASN1)
				i2d_PKCS8_PRIV_KEY_INFO_bio(out, p8inf);
			else {
				BIO_printf(bio_err, "Bad format specified for key\n");
				goto end;
			}
		} else {
			if (passout)
				p8pass = passout;
			else {
				p8pass = pass;
				if (EVP_read_pw_string(pass, sizeof pass, "Enter Encryption Password:", 1))
					goto end;
			}
			if (!(p8 = PKCS8_encrypt(pbe_nid, cipher,
				    p8pass, strlen(p8pass),
				    NULL, 0, iter, p8inf))) {
				BIO_printf(bio_err, "Error encrypting key\n");
				ERR_print_errors(bio_err);
				goto end;
			}
			if (outformat == FORMAT_PEM)
				PEM_write_bio_PKCS8(out, p8);
			else if (outformat == FORMAT_ASN1)
				i2d_PKCS8_bio(out, p8);
			else {
				BIO_printf(bio_err, "Bad format specified for key\n");
				goto end;
			}
		}

		ret = 0;
		goto end;
	}
	if (nocrypt) {
		if (informat == FORMAT_PEM)
			p8inf = PEM_read_bio_PKCS8_PRIV_KEY_INFO(in, NULL, NULL, NULL);
		else if (informat == FORMAT_ASN1)
			p8inf = d2i_PKCS8_PRIV_KEY_INFO_bio(in, NULL);
		else {
			BIO_printf(bio_err, "Bad format specified for key\n");
			goto end;
		}
	} else {
		if (informat == FORMAT_PEM)
			p8 = PEM_read_bio_PKCS8(in, NULL, NULL, NULL);
		else if (informat == FORMAT_ASN1)
			p8 = d2i_PKCS8_bio(in, NULL);
		else {
			BIO_printf(bio_err, "Bad format specified for key\n");
			goto end;
		}

		if (!p8) {
			BIO_printf(bio_err, "Error reading key\n");
			ERR_print_errors(bio_err);
			goto end;
		}
		if (passin)
			p8pass = passin;
		else {
			p8pass = pass;
			EVP_read_pw_string(pass, sizeof pass, "Enter Password:", 0);
		}
		p8inf = PKCS8_decrypt(p8, p8pass, strlen(p8pass));
	}

	if (!p8inf) {
		BIO_printf(bio_err, "Error decrypting key\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (!(pkey = EVP_PKCS82PKEY(p8inf))) {
		BIO_printf(bio_err, "Error converting key\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (p8inf->broken) {
		BIO_printf(bio_err, "Warning: broken key encoding: ");
		switch (p8inf->broken) {
		case PKCS8_NO_OCTET:
			BIO_printf(bio_err, "No Octet String in PrivateKey\n");
			break;

		case PKCS8_EMBEDDED_PARAM:
			BIO_printf(bio_err, "DSA parameters included in PrivateKey\n");
			break;

		case PKCS8_NS_DB:
			BIO_printf(bio_err, "DSA public key include in PrivateKey\n");
			break;

		case PKCS8_NEG_PRIVKEY:
			BIO_printf(bio_err, "DSA private key value is negative\n");
			break;

		default:
			BIO_printf(bio_err, "Unknown broken type\n");
			break;
		}
	}
	if (outformat == FORMAT_PEM)
		PEM_write_bio_PrivateKey(out, pkey, NULL, NULL, 0, NULL, passout);
	else if (outformat == FORMAT_ASN1)
		i2d_PrivateKey_bio(out, pkey);
	else {
		BIO_printf(bio_err, "Bad format specified for key\n");
		goto end;
	}
	ret = 0;

end:
	X509_SIG_free(p8);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
	EVP_PKEY_free(pkey);
	BIO_free_all(out);
	BIO_free(in);
	free(passin);
	free(passout);

	return ret;
}
@


1.21
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: pkcs8.c,v 1.20 2014/07/12 17:54:31 jsing Exp $ */
@


1.20
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: pkcs8.c,v 1.19 2014/06/12 15:49:27 deraadt Exp $ */
d71 1
a71 1
int 
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a93 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.18
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@d1 1
a1 1
/* pkcs8.c */
@


1.17
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d366 2
a367 4
	if (passin)
		free(passin);
	if (passout)
		free(passout);
@


1.16
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d58 1
d61 1
d63 1
a63 1
#include <openssl/pem.h>
d66 1
a67 1

@


1.15
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a92 3
	if (bio_err == NULL)
		bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);

@


1.14
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a263 1
			app_RAND_load_file(NULL, bio_err, 0);
a270 1
			app_RAND_write_file(NULL, bio_err);
@


1.13
log
@KaboomNF
@
text
@a65 1
#define PROG pkcs8_main
d67 1
a67 1
int MAIN(int, char **);
d70 1
a70 1
MAIN(int argc, char **argv)
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d70 3
a72 2
int MAIN(int argc, char **argv)
	{
d86 1
a86 1
	EVP_PKEY *pkey=NULL;
d91 1
a91 1
	char *engine=NULL;
d94 2
a95 1
	if (bio_err == NULL) bio_err = BIO_new_fp (stderr, BIO_NOCLOSE);
d100 2
a101 2
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d106 3
a108 6
	while (!badarg && *args && *args[0] == '-')
		{
		if (!strcmp(*args,"-v2"))
			{
			if (args[1])
				{
d110 2
a111 3
				cipher=EVP_get_cipherbyname(*args);
				if (!cipher)
					{
d113 1
a113 1
						 "Unknown cipher %s\n", *args);
a114 1
					}
d116 1
a116 1
			else
d118 2
a119 5
			}
		else if (!strcmp(*args,"-v1"))
			{
			if (args[1])
				{
d121 2
a122 3
				pbe_nid=OBJ_txt2nid(*args);
				if (pbe_nid == NID_undef)
					{
d124 1
a124 1
						 "Unknown PBE algorithm %s\n", *args);
a125 1
					}
d127 1
a127 1
			else
d129 2
a130 5
			}
		else if (!strcmp(*args,"-inform"))
			{
			if (args[1])
				{
d132 5
a136 8
				informat=str2fmt(*args);
				}
			else badarg = 1;
			}
		else if (!strcmp(*args,"-outform"))
			{
			if (args[1])
				{
d138 4
a141 5
				outformat=str2fmt(*args);
				}
			else badarg = 1;
			}
		else if (!strcmp (*args, "-topk8"))
d143 1
a143 1
		else if (!strcmp (*args, "-noiter"))
d145 1
a145 1
		else if (!strcmp (*args, "-nocrypt"))
d147 1
a147 1
		else if (!strcmp (*args, "-nooct"))
d149 1
a149 1
		else if (!strcmp (*args, "-nsdb"))
d151 1
a151 1
		else if (!strcmp (*args, "-embed"))
d153 9
a161 10
		else if (!strcmp(*args,"-passin"))
			{
			if (!args[1]) goto bad;
			passargin= *(++args);
			}
		else if (!strcmp(*args,"-passout"))
			{
			if (!args[1]) goto bad;
			passargout= *(++args);
			}
d163 5
a167 5
		else if (strcmp(*args,"-engine") == 0)
			{
			if (!args[1]) goto bad;
			engine= *(++args);
			}
d169 2
a170 4
		else if (!strcmp (*args, "-in"))
			{
			if (args[1])
				{
d173 4
a176 7
				}
			else badarg = 1;
			}
		else if (!strcmp (*args, "-out"))
			{
			if (args[1])
				{
d179 4
a182 4
				}
			else badarg = 1;
			}
		else badarg = 1;
d184 1
a184 1
		}
d186 2
a187 3
	if (badarg)
		{
		bad:
d205 1
a205 1
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
d208 1
a208 2
		}

d210 1
a210 1
        e = setup_engine(bio_err, engine, 0);
d213 1
a213 2
	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout))
		{
d216 1
a216 2
		}

d220 2
a221 4
	if (infile)
		{
		if (!(in = BIO_new_file(infile, "rb")))
			{
d223 1
a223 1
				 "Can't open input file %s\n", infile);
a224 1
			}
d226 2
a227 2
	else
		in = BIO_new_fp (stdin, BIO_NOCLOSE);
d229 2
a230 4
	if (outfile)
		{
		if (!(out = BIO_new_file (outfile, "wb")))
			{
d232 1
a232 1
				 "Can't open output file %s\n", outfile);
a233 1
			}
d235 4
a238 6
	else
		{
		out = BIO_new_fp (stdout, BIO_NOCLOSE);
		}
	if (topk8)
		{
d240 1
a240 1
			passin, e, "key");
d243 1
a243 2
		if (!(p8inf = EVP_PKEY2PKCS8_broken(pkey, p8_broken)))
			{
d247 3
a249 4
			}
		if (nocrypt)
			{
			if (outformat == FORMAT_PEM) 
d253 1
a253 2
			else
				{
a255 1
				}
d257 1
a257 2
		else
			{
d260 1
a260 2
			else
				{
d264 1
a264 1
				}
d267 2
a268 3
					p8pass, strlen(p8pass),
					NULL, 0, iter, p8inf)))
				{
d272 1
a272 1
				}
d274 1
a274 1
			if (outformat == FORMAT_PEM) 
d278 1
a278 2
			else
				{
a280 1
				}
d282 1
d286 4
a289 6
		}

	if (nocrypt)
		{
		if (informat == FORMAT_PEM) 
			p8inf = PEM_read_bio_PKCS8_PRIV_KEY_INFO(in,NULL,NULL, NULL);
d292 1
a292 2
		else
			{
a294 1
			}
d296 2
a297 3
	else
		{
		if (informat == FORMAT_PEM) 
d301 1
a301 2
		else
			{
d304 1
a304 1
			}
d306 2
a307 3
		if (!p8)
			{
			BIO_printf (bio_err, "Error reading key\n");
d310 1
a310 1
			}
d313 1
a313 2
		else
			{
d316 1
a316 1
			}
d318 1
a318 1
		}
d320 1
a320 2
	if (!p8inf)
		{
d324 2
a325 4
		}

	if (!(pkey = EVP_PKCS82PKEY(p8inf)))
		{
d329 2
a330 4
		}
	
	if (p8inf->broken)
		{
d332 2
a333 3
		switch (p8inf->broken)
			{
			case PKCS8_NO_OCTET:
d337 1
a337 1
			case PKCS8_EMBEDDED_PARAM:
d341 1
a341 1
			case PKCS8_NS_DB:
d345 1
a345 1
			case PKCS8_NEG_PRIVKEY:
d349 1
a349 1
			default:
d354 1
a354 2
	
	if (outformat == FORMAT_PEM) 
d358 1
a358 2
	else
		{
d360 2
a361 2
			goto end;
		}
d364 1
a364 1
	end:
d376 1
a376 1
	}
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d428 1
a428 1
		OPENSSL_free(passin);
d430 1
a430 1
		OPENSSL_free(passout);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@a268 6
#ifdef OPENSSL_SYS_VMS
			{
			BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			out = BIO_push(tmpbio, out);
			}
#endif
@


1.9
log
@resolve conflicts
@
text
@d83 2
a84 2
	X509_SIG *p8;
	PKCS8_PRIV_KEY_INFO *p8inf;
d88 1
d229 1
a229 1
		return 1;
d239 1
a239 1
		return 1;
d251 1
a251 1
			return (1);
d263 1
a263 1
			return (1);
a277 1
		BIO_free(in); /* Not needed in this section */
d281 1
a281 4
			{
			BIO_free_all(out);
			return 1;
			}
d286 1
a286 3
			EVP_PKEY_free(pkey);
			BIO_free_all(out);
			return 1;
d297 1
a297 4
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
				return (1);
d308 1
a308 6
					{
					PKCS8_PRIV_KEY_INFO_free(p8inf);
					EVP_PKEY_free(pkey);
					BIO_free_all(out);
					return (1);
					}
d317 1
a317 4
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
				return (1);
d327 1
a327 4
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
				return (1);
a328 1
			X509_SIG_free(p8);
d331 2
a332 8
		PKCS8_PRIV_KEY_INFO_free (p8inf);
		EVP_PKEY_free(pkey);
		BIO_free_all(out);
		if (passin)
			OPENSSL_free(passin);
		if (passout)
			OPENSSL_free(passout);
		return (0);
d344 1
a344 1
			return (1);
d356 1
a356 1
			return (1);
d363 1
a363 1
			return (1);
a372 1
		X509_SIG_free(p8);
d379 1
a379 1
		return (1);
d386 1
a386 1
		return (1);
d406 4
a415 1
	PKCS8_PRIV_KEY_INFO_free(p8inf);
d423 1
a423 1
			return (1);
d425 1
d428 2
d438 1
a438 1
	return (0);
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@merge 0.9.7c; minor bugsfixes;
API addition: ERR_release_err_state_table
[make includes before you build libssl/libcrypto]
@
text
@d3 1
a3 1
 * project 1999.
d71 1
a71 1
{
d103 6
a108 3
	while (!badarg && *args && *args[0] == '-') {
		if (!strcmp(*args,"-v2")) {
			if (args[1]) {
d111 2
a112 1
				if(!cipher) {
d116 1
d118 7
a124 3
			} else badarg = 1;
		} else if (!strcmp(*args,"-v1")) {
			if (args[1]) {
d127 2
a128 1
				if(pbe_nid == NID_undef) {
d132 1
d134 7
a140 3
			} else badarg = 1;
		} else if (!strcmp(*args,"-inform")) {
			if (args[1]) {
d143 7
a149 3
			} else badarg = 1;
		} else if (!strcmp(*args,"-outform")) {
			if (args[1]) {
d152 15
a166 7
			} else badarg = 1;
		} else if (!strcmp (*args, "-topk8")) topk8 = 1;
		else if (!strcmp (*args, "-noiter")) iter = 1;
		else if (!strcmp (*args, "-nocrypt")) nocrypt = 1;
		else if (!strcmp (*args, "-nooct")) p8_broken = PKCS8_NO_OCTET;
		else if (!strcmp (*args, "-nsdb")) p8_broken = PKCS8_NS_DB;
		else if (!strcmp (*args, "-embed")) p8_broken = PKCS8_EMBEDDED_PARAM;
d184 4
a187 2
		else if (!strcmp (*args, "-in")) {
			if (args[1]) {
d190 7
a196 3
			} else badarg = 1;
		} else if (!strcmp (*args, "-out")) {
			if (args[1]) {
d199 4
a202 2
			} else badarg = 1;
		} else badarg = 1;
d204 1
a204 1
	}
d206 2
a207 1
	if (badarg) {
d228 2
a229 2
		return (1);
	}
d235 2
a236 1
	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
d238 2
a239 2
		return (1);
	}
d241 2
a242 1
	if ((pbe_nid == -1) && !cipher) pbe_nid = NID_pbeWithMD5AndDES_CBC;
d244 4
a247 2
	if (infile) {
		if (!(in = BIO_new_file(infile, "rb"))) {
d251 1
d253 2
a254 1
	} else in = BIO_new_fp (stdin, BIO_NOCLOSE);
d256 4
a259 2
	if (outfile) {
		if (!(out = BIO_new_file (outfile, "wb"))) {
d263 1
d265 2
a266 1
	} else {
d269 1
a269 1
		{
d272 2
a274 2
#endif
	}
d280 7
a286 4
		if (!pkey) {
			return (1);
		}
		if (!(p8inf = EVP_PKEY2PKCS8_broken(pkey, p8_broken))) {
d289 7
a295 4
			return (1);
		}
		if(nocrypt) {
			if(outformat == FORMAT_PEM) 
d297 1
a297 1
			else if(outformat == FORMAT_ASN1)
d299 2
a300 1
			else {
d302 3
d306 1
d308 6
a313 3
		} else {
			if(passout) p8pass = passout;
			else {
d316 4
d321 2
a322 1
			}
d326 2
a327 1
					NULL, 0, iter, p8inf))) {
d330 3
d334 1
a334 1
			}
d336 1
a336 1
			if(outformat == FORMAT_PEM) 
d338 1
a338 1
			else if(outformat == FORMAT_ASN1)
d340 2
a341 1
			else {
d343 3
d347 2
d350 1
a350 2
			X509_SIG_free(p8);
		}
d354 4
a357 2
		if(passin) OPENSSL_free(passin);
		if(passout) OPENSSL_free(passout);
d359 1
a359 1
	}
d361 3
a363 2
	if(nocrypt) {
		if(informat == FORMAT_PEM) 
d365 1
a365 1
		else if(informat == FORMAT_ASN1)
d367 2
a368 1
		else {
d371 1
d373 3
a375 2
	} else {
		if(informat == FORMAT_PEM) 
d377 1
a377 1
		else if(informat == FORMAT_ASN1)
d379 2
a380 1
		else {
d383 1
a383 1
		}
d385 2
a386 1
		if (!p8) {
d390 5
a394 3
		}
		if(passin) p8pass = passin;
		else {
d397 1
a397 1
		}
d400 1
a400 1
	}
d402 2
a403 1
	if (!p8inf) {
d407 1
a407 1
	}
d409 2
a410 1
	if (!(pkey = EVP_PKCS82PKEY(p8inf))) {
d414 1
a414 1
	}
d416 2
a417 1
	if (p8inf->broken) {
d419 2
a420 1
		switch (p8inf->broken) {
d440 1
a440 1
	if(outformat == FORMAT_PEM) 
d442 1
a442 1
	else if(outformat == FORMAT_ASN1)
d444 2
a445 1
	else {
d448 1
a448 1
	}
d454 4
a457 2
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
d460 1
a460 1
}
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d238 1
a238 1
			BIO_printf(bio_err, "Error converting key\n", outfile);
d262 1
a262 2
				BIO_printf(bio_err, "Error encrypting key\n",
								 outfile);
d305 1
a305 1
			BIO_printf (bio_err, "Error reading key\n", outfile);
d319 1
a319 1
		BIO_printf(bio_err, "Error decrypting key\n", outfile);
d325 1
a325 1
		BIO_printf(bio_err, "Error converting key\n", outfile);
@


1.5
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@a65 1
#include "apps.h"
d88 1
d90 1
d150 1
d156 1
d189 1
d191 1
d195 1
d197 1
d255 2
a256 1
				EVP_read_pw_string(pass, 50, "Enter Encryption Password:", 1);
d313 1
a313 1
			EVP_read_pw_string(pass, 50, "Enter Password:", 0);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d225 2
a226 1
		pkey = load_key(bio_err, infile, informat, passin, e, "key");
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@a64 1
#include <openssl/engine.h>
d86 1
a86 1
	EVP_PKEY *pkey;
d93 3
d190 1
a190 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			return (1);
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			return (1);
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d215 1
a215 1
#ifdef VMS
d222 4
a225 9
	if (topk8) {
		if(informat == FORMAT_PEM)
			pkey = PEM_read_bio_PrivateKey(in, NULL, NULL, passin);
		else if(informat == FORMAT_ASN1)
			pkey = d2i_PrivateKey_bio(in, NULL);
		else {
			BIO_printf(bio_err, "Bad format specified for key\n");
			return (1);
		}
a226 2
			BIO_printf(bio_err, "Error reading key\n", outfile);
			ERR_print_errors(bio_err);
a228 1
		BIO_free(in);
d306 1
a306 1
		p8inf = M_PKCS8_decrypt(p8, p8pass, strlen(p8pass));
d353 1
@


1.2
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d65 1
d74 1
d90 2
d93 1
d96 1
d147 5
d184 1
d188 18
d227 9
a235 2
	} else out = BIO_new_fp (stdout, BIO_NOCLOSE);

d293 3
a295 3
		BIO_free(out);
		if(passin) Free(passin);
		if(passout) Free(passout);
d376 1
a376 1
	BIO_free(out);
d378 2
a379 2
	if(passin) Free(passin);
	if(passout) Free(passout);
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d60 1
d69 1
d74 1
d86 1
a86 1
	char pass[50];
d92 1
a92 1
	SSLeay_add_all_algorithms();
d105 10
d129 12
d156 22
a177 11
		BIO_printf (bio_err, "Usage pkcs8 [options]\n");
		BIO_printf (bio_err, "where options are\n");
		BIO_printf (bio_err, "-in file   input file\n");
		BIO_printf (bio_err, "-inform X  input format (DER or PEM)\n");
		BIO_printf (bio_err, "-outform X output format (DER or PEM)\n");
		BIO_printf (bio_err, "-out file  output file\n");
		BIO_printf (bio_err, "-topk8     output PKCS8 file\n");
		BIO_printf (bio_err, "-nooct     use (broken) no octet form\n");
		BIO_printf (bio_err, "-noiter    use 1 as iteration count\n");
		BIO_printf (bio_err, "-nocrypt   use or expect unencrypted private key\n");
		BIO_printf (bio_err, "-v2 alg    use PKCS#5 v2.0 and cipher \"alg\"\n");
d184 2
a185 2
		if (!(in = BIO_new_file (infile, "rb"))) {
			BIO_printf (bio_err,
d193 1
a193 1
			BIO_printf (bio_err,
d200 10
a209 2
		if (!(pkey = PEM_read_bio_PrivateKey(in, NULL, NULL, NULL))) {
			BIO_printf (bio_err, "Error reading key\n", outfile);
d214 2
a215 2
		if (!(p8inf = EVP_PKEY2PKCS8(pkey))) {
			BIO_printf (bio_err, "Error converting key\n", outfile);
a218 1
		PKCS8_set_broken(p8inf, p8_broken);
d229 6
a234 1
			EVP_read_pw_string(pass, 50, "Enter Encryption Password:", 1);
d236 1
a236 1
					pass, strlen(pass),
d238 1
a238 1
				BIO_printf (bio_err, "Error encrypting key\n",
d243 1
d245 1
a245 1
				PEM_write_bio_PKCS8 (out, p8);
d257 2
d286 6
a291 2
		EVP_read_pw_string(pass, 50, "Enter Password:", 0);
		p8inf = M_PKCS8_decrypt(p8, pass, strlen(pass));
d311 9
a319 1
			BIO_printf(bio_err, "No Octet String\n");
d329 8
a336 2

	PEM_write_bio_PrivateKey(out, pkey, NULL, NULL, 0, NULL, NULL);
d341 2
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a59 1
#include "apps.h"
a67 1
int MAIN(int, char **);
a70 1
	ENGINE *e = NULL;
a71 1
	char *passargin = NULL, *passargout = NULL;
d82 2
a83 2
	EVP_PKEY *pkey=NULL;
	char pass[50], *passin = NULL, *passout = NULL, *p8pass = NULL;
a84 2
	char *engine=NULL;

a85 4

	if (!load_config(bio_err, NULL))
		goto end;

a87 1

d89 1
a89 1
	OpenSSL_add_all_algorithms();
a101 10
		} else if (!strcmp(*args,"-v1")) {
			if (args[1]) {
				args++;
				pbe_nid=OBJ_txt2nid(*args);
				if(pbe_nid == NID_undef) {
					BIO_printf(bio_err,
						 "Unknown PBE algorithm %s\n", *args);
					badarg = 1;
				}
			} else badarg = 1;
a115 17
		else if (!strcmp (*args, "-nsdb")) p8_broken = PKCS8_NS_DB;
		else if (!strcmp (*args, "-embed")) p8_broken = PKCS8_EMBEDDED_PARAM;
		else if (!strcmp(*args,"-passin"))
			{
			if (!args[1]) goto bad;
			passargin= *(++args);
			}
		else if (!strcmp(*args,"-passout"))
			{
			if (!args[1]) goto bad;
			passargout= *(++args);
			}
		else if (strcmp(*args,"-engine") == 0)
			{
			if (!args[1]) goto bad;
			engine= *(++args);
			}
d131 11
a141 25
		bad:
		BIO_printf(bio_err, "Usage pkcs8 [options]\n");
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, "-in file        input file\n");
		BIO_printf(bio_err, "-inform X       input format (DER or PEM)\n");
		BIO_printf(bio_err, "-passin arg     input file pass phrase source\n");
		BIO_printf(bio_err, "-outform X      output format (DER or PEM)\n");
		BIO_printf(bio_err, "-out file       output file\n");
		BIO_printf(bio_err, "-passout arg    output file pass phrase source\n");
		BIO_printf(bio_err, "-topk8          output PKCS8 file\n");
		BIO_printf(bio_err, "-nooct          use (nonstandard) no octet format\n");
		BIO_printf(bio_err, "-embed          use (nonstandard) embedded DSA parameters format\n");
		BIO_printf(bio_err, "-nsdb           use (nonstandard) DSA Netscape DB format\n");
		BIO_printf(bio_err, "-noiter         use 1 as iteration count\n");
		BIO_printf(bio_err, "-nocrypt        use or expect unencrypted private key\n");
		BIO_printf(bio_err, "-v2 alg         use PKCS#5 v2.0 and cipher \"alg\"\n");
		BIO_printf(bio_err, "-v1 obj         use PKCS#5 v1.5 and cipher \"alg\"\n");
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
		return (1);
	}

        e = setup_engine(bio_err, engine, 0);

	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
d148 2
a149 2
		if (!(in = BIO_new_file(infile, "rb"))) {
			BIO_printf(bio_err,
d157 1
a157 1
			BIO_printf(bio_err,
d161 6
a166 14
	} else {
		out = BIO_new_fp (stdout, BIO_NOCLOSE);
#ifdef OPENSSL_SYS_VMS
		{
			BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			out = BIO_push(tmpbio, out);
		}
#endif
	}
	if (topk8)
		{
		BIO_free(in); /* Not needed in this section */
		pkey = load_key(bio_err, infile, informat, passin, e, "key");
		if (!pkey) {
d169 3
a171 2
		if (!(p8inf = EVP_PKEY2PKCS8_broken(pkey, p8_broken))) {
			BIO_printf(bio_err, "Error converting key\n", outfile);
d175 1
d186 1
a186 6
			if(passout) p8pass = passout;
			else {
				p8pass = pass;
				EVP_read_pw_string(pass, 50, "Enter Encryption Password:", 1);
			}
			app_RAND_load_file(NULL, bio_err, 0);
d188 1
a188 1
					p8pass, strlen(p8pass),
d190 1
a190 1
				BIO_printf(bio_err, "Error encrypting key\n",
a194 1
			app_RAND_write_file(NULL, bio_err);
d196 1
a196 1
				PEM_write_bio_PKCS8(out, p8);
d207 1
a207 3
		BIO_free_all(out);
		if(passin) OPENSSL_free(passin);
		if(passout) OPENSSL_free(passout);
d235 2
a236 6
		if(passin) p8pass = passin;
		else {
			p8pass = pass;
			EVP_read_pw_string(pass, 50, "Enter Password:", 0);
		}
		p8inf = PKCS8_decrypt(p8, p8pass, strlen(p8pass));
d256 1
a256 9
			BIO_printf(bio_err, "No Octet String in PrivateKey\n");
			break;

			case PKCS8_EMBEDDED_PARAM:
			BIO_printf(bio_err, "DSA parameters included in PrivateKey\n");
			break;

			case PKCS8_NS_DB:
			BIO_printf(bio_err, "DSA public key include in PrivateKey\n");
a265 8
	if(outformat == FORMAT_PEM) 
		PEM_write_bio_PrivateKey(out, pkey, NULL, NULL, 0, NULL, passout);
	else if(outformat == FORMAT_ASN1)
		i2d_PrivateKey_bio(out, pkey);
	else {
		BIO_printf(bio_err, "Bad format specified for key\n");
			return (1);
	}
d267 2
a268 1
	end:
d270 1
a270 1
	BIO_free_all(out);
a271 2
	if(passin) OPENSSL_free(passin);
	if(passout) OPENSSL_free(passout);
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d225 1
a225 2
		pkey = load_key(bio_err, infile, informat, 1,
			passin, e, "key");
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d66 1
a88 1
#ifndef OPENSSL_NO_ENGINE
a89 1
#endif
a148 1
#ifndef OPENSSL_NO_ENGINE
a153 1
#endif
a185 1
#ifndef OPENSSL_NO_ENGINE
a186 1
#endif
a189 1
#ifndef OPENSSL_NO_ENGINE
a190 1
#endif
d248 1
a248 2
				if (EVP_read_pw_string(pass, sizeof pass, "Enter Encryption Password:", 1))
					return (1);
d305 1
a305 1
			EVP_read_pw_string(pass, sizeof pass, "Enter Password:", 0);
@


1.1.1.4
log
@import 0.9.7c
@
text
@d238 1
a238 1
			BIO_printf(bio_err, "Error converting key\n");
d262 2
a263 1
				BIO_printf(bio_err, "Error encrypting key\n");
d306 1
a306 1
			BIO_printf (bio_err, "Error reading key\n");
d320 1
a320 1
		BIO_printf(bio_err, "Error decrypting key\n");
d326 1
a326 1
		BIO_printf(bio_err, "Error converting key\n");
@


1.1.1.5
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d3 1
a3 1
 * project 1999-2004.
d71 1
a71 1
	{
d103 3
a105 6
	while (!badarg && *args && *args[0] == '-')
		{
		if (!strcmp(*args,"-v2"))
			{
			if (args[1])
				{
d108 1
a108 2
				if (!cipher)
					{
a111 1
					}
d113 3
a115 7
			else
				badarg = 1;
			}
		else if (!strcmp(*args,"-v1"))
			{
			if (args[1])
				{
d118 1
a118 2
				if (pbe_nid == NID_undef)
					{
a121 1
					}
d123 3
a125 7
			else
				badarg = 1;
			}
		else if (!strcmp(*args,"-inform"))
			{
			if (args[1])
				{
d128 3
a130 7
				}
			else badarg = 1;
			}
		else if (!strcmp(*args,"-outform"))
			{
			if (args[1])
				{
d133 7
a139 15
				}
			else badarg = 1;
			}
		else if (!strcmp (*args, "-topk8"))
			topk8 = 1;
		else if (!strcmp (*args, "-noiter"))
			iter = 1;
		else if (!strcmp (*args, "-nocrypt"))
			nocrypt = 1;
		else if (!strcmp (*args, "-nooct"))
			p8_broken = PKCS8_NO_OCTET;
		else if (!strcmp (*args, "-nsdb"))
			p8_broken = PKCS8_NS_DB;
		else if (!strcmp (*args, "-embed"))
			p8_broken = PKCS8_EMBEDDED_PARAM;
d157 2
a158 4
		else if (!strcmp (*args, "-in"))
			{
			if (args[1])
				{
d161 3
a163 7
				}
			else badarg = 1;
			}
		else if (!strcmp (*args, "-out"))
			{
			if (args[1])
				{
d166 2
a167 4
				}
			else badarg = 1;
			}
		else badarg = 1;
d169 1
a169 1
		}
d171 1
a171 2
	if (badarg)
		{
d192 2
a193 2
		return 1;
		}
d199 1
a199 2
	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout))
		{
d201 2
a202 2
		return 1;
		}
d204 1
a204 2
	if ((pbe_nid == -1) && !cipher)
		pbe_nid = NID_pbeWithMD5AndDES_CBC;
d206 2
a207 4
	if (infile)
		{
		if (!(in = BIO_new_file(infile, "rb")))
			{
a210 1
			}
d212 1
a212 2
	else
		in = BIO_new_fp (stdin, BIO_NOCLOSE);
d214 2
a215 4
	if (outfile)
		{
		if (!(out = BIO_new_file (outfile, "wb")))
			{
a218 1
			}
d220 1
a220 2
	else
		{
d223 1
a223 1
			{
d226 1
a226 1
			}
d228 1
a228 1
		}
d234 4
a237 7
		if (!pkey)
			{
			BIO_free_all(out);
			return 1;
			}
		if (!(p8inf = EVP_PKEY2PKCS8_broken(pkey, p8_broken)))
			{
d240 4
a243 7
			EVP_PKEY_free(pkey);
			BIO_free_all(out);
			return 1;
			}
		if (nocrypt)
			{
			if (outformat == FORMAT_PEM) 
d245 1
a245 1
			else if (outformat == FORMAT_ASN1)
d247 1
a247 2
			else
				{
a248 3
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
a249 1
				}
d251 3
a253 6
		else
			{
			if (passout)
				p8pass = passout;
			else
				{
a255 4
					{
					PKCS8_PRIV_KEY_INFO_free(p8inf);
					EVP_PKEY_free(pkey);
					BIO_free_all(out);
d257 1
a257 2
					}
				}
d261 1
a261 2
					NULL, 0, iter, p8inf)))
				{
a263 3
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
d265 1
a265 1
				}
d267 1
a267 1
			if (outformat == FORMAT_PEM) 
d269 1
a269 1
			else if (outformat == FORMAT_ASN1)
d271 1
a271 2
			else
				{
a272 3
				PKCS8_PRIV_KEY_INFO_free(p8inf);
				EVP_PKEY_free(pkey);
				BIO_free_all(out);
d274 1
a274 1
				}
d276 1
a276 2
			}

d280 2
a281 4
		if (passin)
			OPENSSL_free(passin);
		if (passout)
			OPENSSL_free(passout);
d283 1
a283 1
		}
d285 2
a286 3
	if (nocrypt)
		{
		if (informat == FORMAT_PEM) 
d288 1
a288 1
		else if (informat == FORMAT_ASN1)
d290 1
a290 2
		else
			{
a292 1
			}
d294 2
a295 3
	else
		{
		if (informat == FORMAT_PEM) 
d297 1
a297 1
		else if (informat == FORMAT_ASN1)
d299 1
a299 2
		else
			{
d302 1
a302 1
			}
d304 1
a304 2
		if (!p8)
			{
d308 3
a310 5
			}
		if (passin)
			p8pass = passin;
		else
			{
d313 1
a313 1
			}
d316 1
a316 1
		}
d318 1
a318 2
	if (!p8inf)
		{
d322 1
a322 1
		}
d324 1
a324 2
	if (!(pkey = EVP_PKCS82PKEY(p8inf)))
		{
d328 1
a328 1
		}
d330 1
a330 2
	if (p8inf->broken)
		{
d332 1
a332 2
		switch (p8inf->broken)
			{
d352 1
a352 1
	if (outformat == FORMAT_PEM) 
d354 1
a354 1
	else if (outformat == FORMAT_ASN1)
d356 1
a356 2
	else
		{
d359 1
a359 1
		}
d365 2
a366 4
	if (passin)
		OPENSSL_free(passin);
	if (passout)
		OPENSSL_free(passout);
d369 1
a369 1
	}
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d83 2
a84 2
	X509_SIG *p8 = NULL;
	PKCS8_PRIV_KEY_INFO *p8inf = NULL;
a87 1
	int ret = 1;
d228 1
a228 1
		goto end;
d238 1
a238 1
		goto end;
d250 1
a250 1
			goto end;
d262 1
a262 1
			goto end;
d277 1
d281 4
a284 1
			goto end;
d289 3
a291 1
			goto end;
d302 4
a305 1
				goto end;
d316 6
a321 1
					goto end;
d330 4
a333 1
				goto end;
d343 4
a346 1
				goto end;
d348 1
d351 8
a358 2
		ret = 0;
		goto end;
d370 1
a370 1
			goto end;
d382 1
a382 1
			goto end;
d389 1
a389 1
			goto end;
d399 1
d406 1
a406 1
		goto end;
d413 1
a413 1
		goto end;
a432 4
			case PKCS8_NEG_PRIVKEY:
			BIO_printf(bio_err, "DSA private key value is negative\n");
			break;

d439 1
d447 1
a447 1
			goto end;
a448 1
	ret = 0;
a450 2
	X509_SIG_free(p8);
	PKCS8_PRIV_KEY_INFO_free(p8inf);
d459 1
a459 1
	return ret;
@


