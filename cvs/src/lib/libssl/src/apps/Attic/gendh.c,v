head	1.29;
access;
symbols
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.28;
commitid	7A7DObXgY4Fni8xJ;

1.28
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	EB0l28piqIRSpBUh;

1.27
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.26;
commitid	0NuggCO2WJOZj8Kh;

1.26
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	mJUVYpkFBZ0Zv2bG;

1.25
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.24;
commitid	IqYoI5gjfSomu7k2;

1.24
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.24.12.39.02;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.09.38.42;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.15.43.33;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.20.37.11;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.56.56;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.19;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: gendh.c,v 1.28 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>

/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif

#ifndef OPENSSL_NO_DH

#include <sys/types.h>
#include <sys/stat.h>

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
#include <openssl/x509.h>

#define DEFBITS	512

static int dh_cb(int p, int n, BN_GENCB * cb);

int gendh_main(int, char **);

int
gendh_main(int argc, char **argv)
{
	BN_GENCB cb;
	DH *dh = NULL;
	int ret = 1, num = DEFBITS;
	int g = 2;
	char *outfile = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	BIO *out = NULL;

	BN_GENCB_set(&cb, dh_cb, bio_err);

	argv++;
	argc--;
	for (;;) {
		if (argc <= 0)
			break;
		if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-2") == 0)
			g = 2;
		/*
		 * else if (strcmp(*argv,"-3") == 0) g=3;
		 */
		else if (strcmp(*argv, "-5") == 0)
			g = 5;
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else
			break;
		argv++;
		argc--;
	}
	if ((argc >= 1) && ((sscanf(*argv, "%d", &num) == 0) || (num < 0))) {
bad:
		BIO_printf(bio_err, "usage: gendh [args] [numbits]\n");
		BIO_printf(bio_err, " -out file - output the key to 'file\n");
		BIO_printf(bio_err, " -2        - use 2 as the generator value\n");
		/*
		 * BIO_printf(bio_err," -3        - use 3 as the generator
		 * value\n");
		 */
		BIO_printf(bio_err, " -5        - use 5 as the generator value\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e - use engine e, possibly a hardware device.\n");
#endif
		goto end;
	}
#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	out = BIO_new(BIO_s_file());
	if (out == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	BIO_printf(bio_err, "Generating DH parameters, %d bit long safe prime, generator %d\n", num, g);
	BIO_printf(bio_err, "This is going to take a long time\n");

	if (((dh = DH_new()) == NULL) || !DH_generate_parameters_ex(dh, num, g, &cb))
		goto end;

	if (!PEM_write_bio_DHparams(out, dh))
		goto end;
	ret = 0;
end:
	if (ret != 0)
		ERR_print_errors(bio_err);
	if (out != NULL)
		BIO_free_all(out);
	if (dh != NULL)
		DH_free(dh);

	return (ret);
}

static int
dh_cb(int p, int n, BN_GENCB * cb)
{
	char c = '*';

	if (p == 0)
		c = '.';
	if (p == 1)
		c = '+';
	if (p == 2)
		c = '*';
	if (p == 3)
		c = '\n';
	BIO_write(cb->arg, &c, 1);
	(void) BIO_flush(cb->arg);
	return 1;
}
#endif
@


1.28
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: gendh.c,v 1.27 2014/07/12 17:54:31 jsing Exp $ */
@


1.27
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gendh.c,v 1.26 2014/06/12 15:49:27 deraadt Exp $ */
d183 1
a183 1
	
@


1.26
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a104 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.25
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d1 1
a1 2
/* apps/gendh.c */
/* obsoleted by dhparam.c */
@


1.24
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@a99 1
	char *inrand = NULL;
d133 1
a133 5
		else if (strcmp(*argv, "-rand") == 0) {
			if (--argc < 1)
				goto bad;
			inrand = *(++argv);
		} else
a150 3
		BIO_printf(bio_err, " -rand file:file:...\n");
		BIO_printf(bio_err, "           - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err, "             the random number generator\n");
@


1.23
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a105 2
	signal(SIGPIPE, SIG_IGN);

@


1.22
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d61 1
d69 4
d75 1
a75 2
#include <sys/types.h>
#include <sys/stat.h>
d77 1
a78 2
#include <openssl/rand.h>
#include <openssl/err.h>
d81 3
a84 1
#include <openssl/pem.h>
@


1.21
log
@unifdef -U LINT
@
text
@a103 3
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);
@


1.20
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a213 3
#ifdef LINT
	p = n;
#endif
@


1.19
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d101 1
a101 1
	apps_startup();
d195 1
a195 1
	apps_shutdown();
@


1.18
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a218 6
#else				/* !OPENSSL_NO_DH */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.17
log
@simplify file:file:... stuff
@
text
@a178 7
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL) {
		BIO_printf(bio_err, "warning, not much extra random data, consider using the -rand option\n");
	}
	if (inrand != NULL)
		BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
		    app_RAND_load_files(inrand));

a183 2

	app_RAND_write_file(NULL, bio_err);
@


1.16
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d156 1
a156 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", ':', ':');
@


1.15
log
@KaboomNF
@
text
@a81 2
#undef PROG
#define PROG gendh_main
d85 1
a85 1
int MAIN(int, char **);
d88 1
a88 1
MAIN(int argc, char **argv)
@


1.14
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d85 1
a85 1
static int dh_cb(int p, int n, BN_GENCB *cb);
d108 1
a108 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d121 1
a121 1
			outfile= *(++argv);
d124 3
a126 2
	/*	else if (strcmp(*argv,"-3") == 0)
			g=3; */
d133 1
a133 1
			engine= *(++argv);
d139 1
a139 1
			inrand= *(++argv);
d145 1
a145 1
	if ((argc >= 1) && ((sscanf(*argv, "%d",&num) == 0) || (num < 0))) {
d150 4
a153 1
		/*	BIO_printf(bio_err," -3        - use 3 as the generator value\n"); */
a162 1

a171 1

d188 1
a188 1
	BIO_printf(bio_err, "Generating DH parameters, %d bit long safe prime, generator %d\n",num,g);
d207 1
a207 1
	return(ret);
d211 1
a211 1
dh_cb(int p, int n, BN_GENCB *cb)
d224 1
a224 1
	(void)BIO_flush(cb->arg);
d230 1
a230 1
#else /* !OPENSSL_NO_DH */
d232 1
a232 1
# if PEDANTIC
d234 1
a234 1
# endif
@


1.13
log
@Initial KNF.
@
text
@d154 1
a154 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d205 1
a205 1
	OPENSSL_EXIT(ret);
@


1.12
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d9 1
a9 1
 * 
d16 1
a16 1
 * 
d23 1
a23 1
 * 
d38 1
a38 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d41 1
a41 1
 * 
d53 1
a53 1
 * 
d89 3
a91 2
int MAIN(int argc, char **argv)
	{
d93 5
a97 5
	DH *dh=NULL;
	int ret=1,num=DEFBITS;
	int g=2;
	char *outfile=NULL;
	char *inrand=NULL;
d99 1
a99 1
	char *engine=NULL;
d101 1
a101 1
	BIO *out=NULL;
d107 2
a108 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d115 6
a120 6
	for (;;)
		{
		if (argc <= 0) break;
		if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d122 2
a123 3
			}
		else if (strcmp(*argv,"-2") == 0)
			g=2;
d126 2
a127 2
		else if (strcmp(*argv,"-5") == 0)
			g=5;
d129 3
a131 3
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
d133 1
a133 1
			}
d135 3
a137 3
		else if (strcmp(*argv,"-rand") == 0)
			{
			if (--argc < 1) goto bad;
d139 1
a139 2
			}
		else
d143 2
a144 3
		}
	if ((argc >= 1) && ((sscanf(*argv,"%d",&num) == 0) || (num < 0)))
		{
d146 5
a150 5
		BIO_printf(bio_err,"usage: gendh [args] [numbits]\n");
		BIO_printf(bio_err," -out file - output the key to 'file\n");
		BIO_printf(bio_err," -2        - use 2 as the generator value\n");
	/*	BIO_printf(bio_err," -3        - use 3 as the generator value\n"); */
		BIO_printf(bio_err," -5        - use 5 as the generator value\n");
d152 1
a152 1
		BIO_printf(bio_err," -engine e - use engine e, possibly a hardware device.\n");
d154 3
a156 3
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err,"           - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"             the random number generator\n");
d158 2
a159 2
		}
		
d161 1
a161 1
        setup_engine(bio_err, engine, 0);
d164 2
a165 3
	out=BIO_new(BIO_s_file());
	if (out == NULL)
		{
d168 1
a168 1
		}
d170 4
a173 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a175 1
			}
d177 1
d179 3
a181 4
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
		{
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
		}
d183 2
a184 2
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d186 2
a187 2
	BIO_printf(bio_err,"Generating DH parameters, %d bit long safe prime, generator %d\n",num,g);
	BIO_printf(bio_err,"This is going to take a long time\n");
d189 1
a189 1
	if(((dh = DH_new()) == NULL) || !DH_generate_parameters_ex(dh, num, g, &cb))
d191 1
a191 1
		
d194 1
a194 1
	if (!PEM_write_bio_DHparams(out,dh))
d196 1
a196 1
	ret=0;
d200 4
a203 2
	if (out != NULL) BIO_free_all(out);
	if (dh != NULL) DH_free(dh);
d206 1
a206 1
	}
d208 14
a221 9
static int dh_cb(int p, int n, BN_GENCB *cb)
	{
	char c='*';

	if (p == 0) c='.';
	if (p == 1) c='+';
	if (p == 2) c='*';
	if (p == 3) c='\n';
	BIO_write(cb->arg,&c,1);
d224 1
a224 1
	p=n;
d227 1
a227 1
	}
d231 1
a231 1
static void *dummy=&dummy;
@


1.11
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@a175 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@d85 1
a85 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb);
d220 1
a220 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb)
@


1.9
log
@resolve conflicts, fix local changes
@
text
@a91 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d163 1
a163 1
        e = setup_engine(bio_err, engine, 0);
@


1.8
log
@resolve conflicts
@
text
@d238 6
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d60 7
d85 1
a85 1
static void MS_CALLBACK dh_cb(int p, int n, void *arg);
d91 1
d107 1
d205 3
a207 1
	dh=DH_generate_parameters(num,g,dh_cb,bio_err);
a208 2
	if (dh == NULL) goto end;

d223 1
a223 1
static void MS_CALLBACK dh_cb(int p, int n, void *arg)
d231 2
a232 2
	BIO_write((BIO *)arg,&c,1);
	(void)BIO_flush((BIO *)arg);
d236 1
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d84 1
d86 1
d92 1
d94 1
d122 1
d128 1
d147 1
d149 1
d156 1
d158 1
d211 1
a211 1
	EXIT(ret);
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d60 1
a60 1
#ifndef NO_DH
a72 1
#include <openssl/engine.h>
d99 3
d148 1
a148 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d160 1
a160 1
#ifdef VMS
d200 1
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d73 1
d85 1
d91 1
d116 5
d136 4
a139 3
		BIO_printf(bio_err," -2    use 2 as the generator value\n");
	/*	BIO_printf(bio_err," -3    use 3 as the generator value\n"); */
		BIO_printf(bio_err," -5    use 5 as the generator value\n");
d146 18
d172 1
d174 7
d212 1
a212 1
	if (out != NULL) BIO_free(out);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d2 1
d131 1
a131 1
		BIO_printf(bio_err," -rand file:file:...\n");
d163 1
a163 1
	BIO_printf(bio_err,"Generating DH parameters, %d bit long strong prime, generator of %d\n",num,g);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d78 3
a80 1
static long dh_load_rand(char *names);
a82 1
	char buffer[200];
d87 1
a87 1
	char *inrand=NULL,*randfile;
d154 2
a155 5
	randfile=RAND_file_name(buffer,200);
	if ((randfile == NULL)|| !RAND_load_file(randfile,1024L*1024L))
		BIO_printf(bio_err,"unable to load 'random state'\n");

	if (inrand == NULL)
d157 2
a158 2
	else
		{
d160 1
a160 2
			dh_load_rand(inrand));
		}
d168 1
a168 4
	if (randfile == NULL)
		BIO_printf(bio_err,"unable to write 'random state'\n");
	else
		RAND_write_file(randfile);
a193 22
	}

static long dh_load_rand(char *name)
	{
	char *p,*n;
	int last;
	long tot=0;

	for (;;)
		{
		last=0;
		for (p=name; ((*p != '\0') && (*p != LIST_SEPARATOR_CHAR)); p++);
		if (*p == '\0') last=1;
		*p='\0';
		n=name;
		name=p+1;
		if (*n == '\0') break;

		tot+=RAND_load_file(n,1);
		if (last) break;
		}
	return(tot);
@


1.1
log
@Initial revision
@
text
@d59 1
d65 7
a71 7
#include "bio.h"
#include "rand.h"
#include "err.h"
#include "bn.h"
#include "dh.h"
#include "x509.h"
#include "pem.h"
d77 1
a77 2
#ifndef NOPROTO
static void MS_CALLBACK dh_cb(int p, int n, char *arg);
d79 1
a79 8
#else
static void MS_CALLBACK dh_cb();
static long dh_load_rand();
#endif

int MAIN(argc, argv)
int argc;
char **argv;
d167 1
a167 1
	dh=DH_generate_parameters(num,g,dh_cb,(char *)bio_err);
d187 1
a187 4
static void MS_CALLBACK dh_cb(p,n,arg)
int p;
int n;
char *arg;
d196 1
a196 1
	BIO_flush((BIO *)arg);
d202 1
a202 2
static long dh_load_rand(name)
char *name;
d223 1
a223 2


@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a1 1
/* obsoleted by dhparam.c */
a58 1
#ifndef OPENSSL_NO_DH
d64 7
a70 7
#include <openssl/bio.h>
#include <openssl/rand.h>
#include <openssl/err.h>
#include <openssl/bn.h>
#include <openssl/dh.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
d76 7
a82 3
static void MS_CALLBACK dh_cb(int p, int n, void *arg);

int MAIN(int, char **);
d84 3
a86 1
int MAIN(int argc, char **argv)
d88 1
a88 1
	ENGINE *e = NULL;
d93 1
a93 2
	char *inrand=NULL;
	char *engine=NULL;
a101 3
	if (!load_config(bio_err, NULL))
		goto end;

a117 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d133 4
a136 5
		BIO_printf(bio_err," -2        - use 2 as the generator value\n");
	/*	BIO_printf(bio_err," -3        - use 3 as the generator value\n"); */
		BIO_printf(bio_err," -5        - use 5 as the generator value\n");
		BIO_printf(bio_err," -engine e - use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
a141 2
        e = setup_engine(bio_err, engine, 0);

a149 1
		{
a150 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d160 7
a166 1
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
d168 2
a169 1
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
a170 3
	if (inrand != NULL)
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d172 1
a172 1
	BIO_printf(bio_err,"Generating DH parameters, %d bit long safe prime, generator %d\n",num,g);
d174 1
a174 1
	dh=DH_generate_parameters(num,g,dh_cb,bio_err);
d178 4
a181 1
	app_RAND_write_file(NULL, bio_err);
d189 1
a189 1
	if (out != NULL) BIO_free_all(out);
a190 1
	apps_shutdown();
d194 4
a197 1
static void MS_CALLBACK dh_cb(int p, int n, void *arg)
d206 1
a206 1
	(void)BIO_flush((BIO *)arg);
d211 25
a235 1
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a83 1
#ifndef OPENSSL_NO_ENGINE
a84 1
#endif
a89 1
#ifndef OPENSSL_NO_ENGINE
a90 1
#endif
a117 1
#ifndef OPENSSL_NO_ENGINE
a122 1
#endif
a140 1
#ifndef OPENSSL_NO_ENGINE
a141 1
#endif
a147 1
#ifndef OPENSSL_NO_ENGINE
a148 1
#endif
d201 1
a201 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a59 7
#include <openssl/opensslconf.h>
/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif

d78 1
a78 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb);
a83 1
	BN_GENCB cb;
a98 1
	BN_GENCB_set(&cb, dh_cb, bio_err);
d196 3
a199 3
	if(((dh = DH_new()) == NULL) || !DH_generate_parameters_ex(dh, num, g, &cb))
		goto end;
		
d214 1
a214 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb)
d222 2
a223 2
	BIO_write(cb->arg,&c,1);
	(void)BIO_flush(cb->arg);
a226 1
	return 1;
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a237 6
#else /* !OPENSSL_NO_DH */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d92 3
d166 1
a166 1
        setup_engine(bio_err, engine, 0);
@


