head	1.36;
access;
symbols
	OPENBSD_5_6:1.35.0.4
	OPENBSD_5_6_BASE:1.35
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.35;
commitid	7A7DObXgY4Fni8xJ;

1.35
date	2014.07.25.06.05.31;	author doug;	state Exp;
branches;
next	1.34;
commitid	DnBLYuKKjvrWeH3R;

1.34
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	EB0l28piqIRSpBUh;

1.33
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.32;
commitid	0NuggCO2WJOZj8Kh;

1.32
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.31;
commitid	ivoCf1icUxmbGXSc;

1.31
date	2014.06.29.18.26.26;	author logan;	state Exp;
branches;
next	1.30;
commitid	8plDKxfvBe0Z3591;

1.30
date	2014.06.28.04.39.41;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	gGtvlhTlvaxlmOBo;

1.29
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	mJUVYpkFBZ0Zv2bG;

1.28
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	2nvnQBrv22dLtvTt;

1.27
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.26;
commitid	IqYoI5gjfSomu7k2;

1.26
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2014.05.18.16.26.02;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.24.12.39.02;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.17.04.13;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.20.37.11;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.22.00.02.49;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.55;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.08;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.18;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: dsaparam.c,v 1.35 2014/07/25 06:05:31 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */

/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/dsa.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

/* -inform arg	- input format - default PEM (DER or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 * -noout
 * -text
 * -C
 * -noout
 * -genkey
 *  #ifdef GENCB_TEST
 * -timebomb n  - interrupt keygen after <n> seconds
 *  #endif
 */

#ifdef GENCB_TEST

static int stop_keygen_flag = 0;

static void
timebomb_sigalarm(int foo)
{
	stop_keygen_flag = 1;
}

#endif

static int dsa_cb(int p, int n, BN_GENCB * cb);

int dsaparam_main(int, char **);

int
dsaparam_main(int argc, char **argv)
{
	DSA *dsa = NULL;
	int i, badops = 0, text = 0;
	BIO *in = NULL, *out = NULL;
	int informat, outformat, noout = 0, C = 0, ret = 1;
	char *infile, *outfile, *prog;
	int numbits = -1, num, genkey = 0;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
#ifdef GENCB_TEST
	const char *errstr = NULL;
	int timebomb = 0;
#endif

	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
#ifdef GENCB_TEST
		else if (strcmp(*argv, "-timebomb") == 0) {
			if (--argc < 1)
				goto bad;
			timebomb = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		}
#endif
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-C") == 0)
			C = 1;
		else if (strcmp(*argv, "-genkey") == 0) {
			genkey = 1;
		} else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (sscanf(*argv, "%d", &num) == 1) {
			/* generate a key */
			numbits = num;
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] [bits] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg   input format - DER or PEM\n");
		BIO_printf(bio_err, " -outform arg  output format - DER or PEM\n");
		BIO_printf(bio_err, " -in arg       input file\n");
		BIO_printf(bio_err, " -out arg      output file\n");
		BIO_printf(bio_err, " -text         print as text\n");
		BIO_printf(bio_err, " -C            Output C code\n");
		BIO_printf(bio_err, " -noout        no output\n");
		BIO_printf(bio_err, " -genkey       generate a DSA key\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e     use engine e, possibly a hardware device.\n");
#endif
#ifdef GENCB_TEST
		BIO_printf(bio_err, " -timebomb n   interrupt keygen after <n> seconds\n");
#endif
		BIO_printf(bio_err, " number        number of bits to use for generating private key\n");
		goto end;
	}
	ERR_load_crypto_strings();

	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	if (numbits > 0) {
		BN_GENCB cb;
		BN_GENCB_set(&cb, dsa_cb, bio_err);
		dsa = DSA_new();
		if (!dsa) {
			BIO_printf(bio_err, "Error allocating DSA object\n");
			goto end;
		}
		BIO_printf(bio_err, "Generating DSA parameters, %d bit long prime\n", num);
		BIO_printf(bio_err, "This could take some time\n");
#ifdef GENCB_TEST
		if (timebomb > 0) {
			struct sigaction act;
			act.sa_handler = timebomb_sigalarm;
			act.sa_flags = 0;
			BIO_printf(bio_err, "(though I'll stop it if not done within %d secs)\n",
			    timebomb);
			if (sigaction(SIGALRM, &act, NULL) != 0) {
				BIO_printf(bio_err, "Error, couldn't set SIGALRM handler\n");
				goto end;
			}
			alarm(timebomb);
		}
#endif
		if (!DSA_generate_parameters_ex(dsa, num, NULL, 0, NULL, NULL, &cb)) {
#ifdef GENCB_TEST
			if (stop_keygen_flag) {
				BIO_printf(bio_err, "DSA key generation time-stopped\n");
				/* This is an asked-for behaviour! */
				ret = 0;
				goto end;
			}
#endif
			ERR_print_errors(bio_err);
			BIO_printf(bio_err, "Error, DSA key generation failed\n");
			goto end;
		}
	} else if (informat == FORMAT_ASN1)
		dsa = d2i_DSAparams_bio(in, NULL);
	else if (informat == FORMAT_PEM)
		dsa = PEM_read_bio_DSAparams(in, NULL, NULL, NULL);
	else {
		BIO_printf(bio_err, "bad input format specified\n");
		goto end;
	}
	if (dsa == NULL) {
		BIO_printf(bio_err, "unable to load DSA parameters\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (text) {
		DSAparams_print(out, dsa);
	}
	if (C) {
		unsigned char *data;
		int l, len, bits_p;

		len = BN_num_bytes(dsa->p);
		bits_p = BN_num_bits(dsa->p);
		data = malloc(len + 20);
		if (data == NULL) {
			perror("malloc");
			goto end;
		}
		l = BN_bn2bin(dsa->p, data);
		printf("static unsigned char dsa%d_p[] = {", bits_p);
		for (i = 0; i < l; i++) {
			if ((i % 12) == 0)
				printf("\n\t");
			printf("0x%02X, ", data[i]);
		}
		printf("\n\t};\n");

		l = BN_bn2bin(dsa->q, data);
		printf("static unsigned char dsa%d_q[] = {", bits_p);
		for (i = 0; i < l; i++) {
			if ((i % 12) == 0)
				printf("\n\t");
			printf("0x%02X, ", data[i]);
		}
		printf("\n\t};\n");

		l = BN_bn2bin(dsa->g, data);
		printf("static unsigned char dsa%d_g[] = {", bits_p);
		for (i = 0; i < l; i++) {
			if ((i % 12) == 0)
				printf("\n\t");
			printf("0x%02X, ", data[i]);
		}
		free(data);
		printf("\n\t};\n\n");

		printf("DSA *get_dsa%d()\n\t{\n", bits_p);
		printf("\tDSA *dsa;\n\n");
		printf("\tif ((dsa = DSA_new()) == NULL) return(NULL);\n");
		printf("\tdsa->p = BN_bin2bn(dsa%d_p, sizeof(dsa%d_p), NULL);\n",
		    bits_p, bits_p);
		printf("\tdsa->q = BN_bin2bn(dsa%d_q, sizeof(dsa%d_q), NULL);\n",
		    bits_p, bits_p);
		printf("\tdsa->g = BN_bin2bn(dsa%d_g, sizeof(dsa%d_g), NULL);\n",
		    bits_p, bits_p);
		printf("\tif ((dsa->p == NULL) || (dsa->q == NULL) || (dsa->g == NULL))\n");
		printf("\t\t{ DSA_free(dsa); return(NULL); }\n");
		printf("\treturn(dsa);\n\t}\n");
	}
	if (!noout) {
		if (outformat == FORMAT_ASN1)
			i = i2d_DSAparams_bio(out, dsa);
		else if (outformat == FORMAT_PEM)
			i = PEM_write_bio_DSAparams(out, dsa);
		else {
			BIO_printf(bio_err, "bad output format specified for outfile\n");
			goto end;
		}
		if (!i) {
			BIO_printf(bio_err, "unable to write DSA parameters\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (genkey) {
		DSA *dsakey;

		if ((dsakey = DSAparams_dup(dsa)) == NULL)
			goto end;
		if (!DSA_generate_key(dsakey)) {
			ERR_print_errors(bio_err);
			DSA_free(dsakey);
			goto end;
		}
		if (outformat == FORMAT_ASN1)
			i = i2d_DSAPrivateKey_bio(out, dsakey);
		else if (outformat == FORMAT_PEM)
			i = PEM_write_bio_DSAPrivateKey(out, dsakey, NULL, NULL, 0, NULL, NULL);
		else {
			BIO_printf(bio_err, "bad output format specified for outfile\n");
			DSA_free(dsakey);
			goto end;
		}
		DSA_free(dsakey);
	}
	ret = 0;

end:
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (dsa != NULL)
		DSA_free(dsa);

	return (ret);
}

static int
dsa_cb(int p, int n, BN_GENCB * cb)
{
	char c = '*';

	if (p == 0)
		c = '.';
	if (p == 1)
		c = '+';
	if (p == 2)
		c = '*';
	if (p == 3)
		c = '\n';
	BIO_write(cb->arg, &c, 1);
	(void) BIO_flush(cb->arg);
#ifdef GENCB_TEST
	if (stop_keygen_flag)
		return 0;
#endif
	return 1;
}
@


1.35
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.34 2014/07/14 00:35:10 deraadt Exp $ */
@


1.34
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.33 2014/07/12 17:54:31 jsing Exp $ */
d385 1
a385 2
	if (in != NULL)
		BIO_free(in);
@


1.33
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.32 2014/07/09 21:02:35 tedu Exp $ */
d391 1
a391 1
	
@


1.32
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.31 2014/06/29 18:26:26 logan Exp $ */
a127 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.31
log
@Free "data" when it's no longer in use.

(Thanks to Brent Cook)

OK from jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.30 2014/06/28 04:39:41 deraadt Exp $ */
a66 1
#ifndef OPENSSL_NO_DSA
a418 1
#endif
@


1.30
log
@Use strtonum() instead of atoi(), and then impose what are we think
are the current range checks.  Help from millert and lteo.  Please test
now that it is deployed and let us know if any numbers are off..
ok lteo
@
text
@d1 1
a1 1
/* $OpenBSD: dsaparam.c,v 1.29 2014/06/12 15:49:27 deraadt Exp $ */
d334 1
@


1.29
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d126 1
d170 3
a172 1
			timebomb = atoi(*(++argv));
@


1.28
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* apps/dsaparam.c */
@


1.27
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d301 1
a301 1
		data = (unsigned char *) malloc(len + 20);
@


1.26
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d120 1
a120 1
	char *infile, *outfile, *prog, *inrand = NULL;
a177 4
		} else if (strcmp(*argv, "-rand") == 0) {
			if (--argc < 1)
				goto bad;
			inrand = *(++argv);
a203 1
		BIO_printf(bio_err, " -rand         files to use for random number input\n");
@


1.25
log
@Remove unused include.
@
text
@a128 2
	signal(SIGPIPE, SIG_IGN);

@


1.24
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a68 1
#include <assert.h>
@


1.23
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d59 2
a60 1
#include <openssl/opensslconf.h>/* for OPENSSL_NO_DSA */
d68 1
d72 1
d74 1
a74 1
#include <string.h>
d76 1
d78 1
a79 1
#include <openssl/bn.h>
d81 1
a82 2
#include <openssl/pem.h>

@


1.22
log
@unifdef -U LINT
@
text
@a128 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.21
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a418 3
#ifdef LINT
	p = n;
#endif
@


1.20
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d127 1
a127 1
	apps_startup();
d400 1
a400 1
	apps_shutdown();
@


1.19
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a427 6
#else				/* !OPENSSL_NO_DSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.18
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a119 1
	int need_rand = 0;
a181 1
			need_rand = 1;
a185 1
			need_rand = 1;
a190 1
			need_rand = 1;
a250 6
	if (need_rand) {
		app_RAND_load_file(NULL, bio_err, (inrand != NULL));
		if (inrand != NULL)
			BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
			    app_RAND_load_files(inrand));
	}
a253 1
		assert(need_rand);
a372 1
		assert(need_rand);
a390 2
	if (need_rand)
		app_RAND_write_file(NULL, bio_err);
@


1.17
log
@KaboomNF
@
text
@a79 2
#undef PROG
#define PROG	dsaparam_main
d109 1
a109 1
int MAIN(int, char **);
d112 1
a112 1
MAIN(int argc, char **argv)
@


1.16
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d59 1
a59 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
d109 1
a109 1
static int dsa_cb(int p, int n, BN_GENCB *cb);
d134 1
a134 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d159 1
a159 1
			infile= *(++argv);
d163 1
a163 1
			outfile= *(++argv);
d189 1
a189 1
			inrand= *(++argv);
a227 1

a235 1

a262 1

a313 1

a316 1

d323 1
a323 1
		data = (unsigned char *)malloc(len + 20);
a367 1

d417 1
a417 1
	return(ret);
d421 1
a421 1
dsa_cb(int p, int n, BN_GENCB *cb)
d434 1
a434 1
	(void)BIO_flush(cb->arg);
d444 1
a444 1
#else /* !OPENSSL_NO_DSA */
d446 1
a446 1
# if PEDANTIC
d448 1
a448 1
# endif
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d423 1
a423 1
	OPENSSL_EXIT(ret);
@


1.14
log
@Initial KNF.
@
text
@d328 1
a328 1
		data = (unsigned char *)OPENSSL_malloc(len + 20);
d330 1
a330 1
			perror("OPENSSL_malloc");
@


1.13
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d101 3
a103 2
static void timebomb_sigalarm(int foo)
	{
d105 1
a105 1
	}
d113 10
a122 9
int MAIN(int argc, char **argv)
	{
	DSA *dsa=NULL;
	int i,badops=0,text=0;
	BIO *in=NULL,*out=NULL;
	int informat,outformat,noout=0,C=0,ret=1;
	char *infile,*outfile,*prog,*inrand=NULL;
	int numbits= -1,num,genkey=0;
	int need_rand=0;
d124 1
a124 1
	char *engine=NULL;
d127 1
a127 1
	int timebomb=0;
d133 2
a134 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d139 4
a142 4
	infile=NULL;
	outfile=NULL;
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d144 1
a144 1
	prog=argv[0];
d147 12
a158 15
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d160 3
a162 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d164 1
a164 1
			}
d166 3
a168 3
		else if(strcmp(*argv, "-engine") == 0)
			{
			if (--argc < 1) goto bad;
d170 1
a170 1
			}
d173 3
a175 3
		else if(strcmp(*argv, "-timebomb") == 0)
			{
			if (--argc < 1) goto bad;
d177 1
a177 1
			}
d179 10
a188 12
		else if (strcmp(*argv,"-text") == 0)
			text=1;
		else if (strcmp(*argv,"-C") == 0)
			C=1;
		else if (strcmp(*argv,"-genkey") == 0)
			{
			genkey=1;
			need_rand=1;
			}
		else if (strcmp(*argv,"-rand") == 0)
			{
			if (--argc < 1) goto bad;
d190 4
a193 6
			need_rand=1;
			}
		else if (strcmp(*argv,"-noout") == 0)
			noout=1;
		else if (sscanf(*argv,"%d",&num) == 1)
			{
d195 5
a199 7
			numbits=num;
			need_rand=1;
			}
		else
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d201 1
a201 1
			}
d204 1
a204 1
		}
d206 1
a206 2
	if (badops)
		{
d208 11
a218 11
		BIO_printf(bio_err,"%s [options] [bits] <infile >outfile\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg   input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg  output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file\n");
		BIO_printf(bio_err," -text         print as text\n");
		BIO_printf(bio_err," -C            Output C code\n");
		BIO_printf(bio_err," -noout        no output\n");
		BIO_printf(bio_err," -genkey       generate a DSA key\n");
		BIO_printf(bio_err," -rand         files to use for random number input\n");
d220 1
a220 1
		BIO_printf(bio_err," -engine e     use engine e, possibly a hardware device.\n");
d223 1
a223 1
		BIO_printf(bio_err," -timebomb n   interrupt keygen after <n> seconds\n");
d225 1
a225 1
		BIO_printf(bio_err," number        number of bits to use for generating private key\n");
d227 1
a227 1
		}
d231 3
a233 4
	in=BIO_new(BIO_s_file());
	out=BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL))
		{
d236 1
a236 1
		}
d239 3
a241 5
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
a243 1
			}
d245 5
a249 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a251 1
			}
d253 1
d256 1
a256 1
        setup_engine(bio_err, engine, 0);
d259 1
a259 2
	if (need_rand)
		{
d262 3
a264 3
			BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
				app_RAND_load_files(inrand));
		}
d266 1
a266 2
	if (numbits > 0)
		{
d271 2
a272 3
		if(!dsa)
			{
			BIO_printf(bio_err,"Error allocating DSA object\n");
d274 3
a276 3
			}
		BIO_printf(bio_err,"Generating DSA parameters, %d bit long prime\n",num);
	        BIO_printf(bio_err,"This could take some time\n");
d278 9
a286 11
		if(timebomb > 0)
	{
		struct sigaction act;
		act.sa_handler = timebomb_sigalarm;
		act.sa_flags = 0;
		BIO_printf(bio_err,"(though I'll stop it if not done within %d secs)\n",
				timebomb);
		if(sigaction(SIGALRM, &act, NULL) != 0)
			{
			BIO_printf(bio_err,"Error, couldn't set SIGALRM handler\n");
			goto end;
d288 2
a289 2
		alarm(timebomb);
	}
d291 1
a291 2
	        if(!DSA_generate_parameters_ex(dsa,num,NULL,0,NULL,NULL, &cb))
			{
d293 2
a294 3
			if(stop_keygen_flag)
				{
				BIO_printf(bio_err,"DSA key generation time-stopped\n");
d298 1
a298 1
				}
d301 1
a301 1
			BIO_printf(bio_err,"Error, DSA key generation failed\n");
a302 1
			}
d304 2
a305 2
	else if	(informat == FORMAT_ASN1)
		dsa=d2i_DSAparams_bio(in,NULL);
d307 3
a309 4
		dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL);
	else
		{
		BIO_printf(bio_err,"bad input format specified\n");
d311 3
a313 4
		}
	if (dsa == NULL)
		{
		BIO_printf(bio_err,"unable to load DSA parameters\n");
d316 5
a320 1
		}
d322 1
a322 7
	if (text)
		{
		DSAparams_print(out,dsa);
		}
	
	if (C)
		{
d324 1
a324 1
		int l,len,bits_p;
d326 4
a329 5
		len=BN_num_bytes(dsa->p);
		bits_p=BN_num_bits(dsa->p);
		data=(unsigned char *)OPENSSL_malloc(len+20);
		if (data == NULL)
			{
d332 8
a339 8
			}
		l=BN_bn2bin(dsa->p,data);
		printf("static unsigned char dsa%d_p[]={",bits_p);
		for (i=0; i<l; i++)
			{
			if ((i%12) == 0) printf("\n\t");
			printf("0x%02X,",data[i]);
			}
d342 7
a348 7
		l=BN_bn2bin(dsa->q,data);
		printf("static unsigned char dsa%d_q[]={",bits_p);
		for (i=0; i<l; i++)
			{
			if ((i%12) == 0) printf("\n\t");
			printf("0x%02X,",data[i]);
			}
d351 7
a357 7
		l=BN_bn2bin(dsa->g,data);
		printf("static unsigned char dsa%d_g[]={",bits_p);
		for (i=0; i<l; i++)
			{
			if ((i%12) == 0) printf("\n\t");
			printf("0x%02X,",data[i]);
			}
d360 1
a360 1
		printf("DSA *get_dsa%d()\n\t{\n",bits_p);
d362 7
a368 7
		printf("\tif ((dsa=DSA_new()) == NULL) return(NULL);\n");
		printf("\tdsa->p=BN_bin2bn(dsa%d_p,sizeof(dsa%d_p),NULL);\n",
			bits_p,bits_p);
		printf("\tdsa->q=BN_bin2bn(dsa%d_q,sizeof(dsa%d_q),NULL);\n",
			bits_p,bits_p);
		printf("\tdsa->g=BN_bin2bn(dsa%d_g,sizeof(dsa%d_g),NULL);\n",
			bits_p,bits_p);
d372 1
a372 2
		}

d374 3
a376 4
	if (!noout)
		{
		if 	(outformat == FORMAT_ASN1)
			i=i2d_DSAparams_bio(out,dsa);
d378 3
a380 3
			i=PEM_write_bio_DSAparams(out,dsa);
		else	{
			BIO_printf(bio_err,"bad output format specified for outfile\n");
d382 3
a384 4
			}
		if (!i)
			{
			BIO_printf(bio_err,"unable to write DSA parameters\n");
a386 1
			}
d388 2
a389 2
	if (genkey)
		{
d393 3
a395 3
		if ((dsakey=DSAparams_dup(dsa)) == NULL) goto end;
		if (!DSA_generate_key(dsakey))
			{
d399 3
a401 3
			}
		if 	(outformat == FORMAT_ASN1)
			i=i2d_DSAPrivateKey_bio(out,dsakey);
d403 3
a405 3
			i=PEM_write_bio_DSAPrivateKey(out,dsakey,NULL,NULL,0,NULL,NULL);
		else	{
			BIO_printf(bio_err,"bad output format specified for outfile\n");
d408 1
a408 1
			}
d410 1
a410 1
		}
d413 2
a414 1
	ret=0;
d416 6
a421 3
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (dsa != NULL) DSA_free(dsa);
d424 1
a424 1
	}
d426 14
a439 9
static int dsa_cb(int p, int n, BN_GENCB *cb)
	{
	char c='*';

	if (p == 0) c='.';
	if (p == 1) c='+';
	if (p == 2) c='*';
	if (p == 3) c='\n';
	BIO_write(cb->arg,&c,1);
d442 1
a442 1
	p=n;
d445 1
a445 1
	if(stop_keygen_flag)
d449 1
a449 1
	}
d453 1
a453 1
static void *dummy=&dummy;
@


1.12
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@a260 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.11
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d108 1
a108 1
static int MS_CALLBACK dsa_cb(int p, int n, BN_GENCB *cb);
d461 1
a461 1
static int MS_CALLBACK dsa_cb(int p, int n, BN_GENCB *cb)
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@d329 1
d433 6
a438 1
		if (!DSA_generate_key(dsakey)) goto end;
d445 1
@


1.9
log
@resolve conflicts, fix local changes
@
text
@a113 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d278 1
a278 1
        e = setup_engine(bio_err, engine, 0);
d357 1
a357 1
		int l,len,bits_p,bits_q,bits_g;
a360 2
		bits_q=BN_num_bits(dsa->q);
		bits_g=BN_num_bits(dsa->g);
@


1.8
log
@resolve conflicts
@
text
@d478 6
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 7
d92 3
d97 12
a108 1
static void MS_CALLBACK dsa_cb(int p, int n, void *arg);
d127 3
d177 7
d234 3
d294 2
d297 6
d305 30
a334 1
	        dsa=DSA_generate_parameters(num,NULL,0,NULL,NULL, dsa_cb,bio_err);
d459 1
a459 1
static void MS_CALLBACK dsa_cb(int p, int n, void *arg)
d467 2
a468 2
	BIO_write(arg,&c,1);
	(void)BIO_flush(arg);
d472 5
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d93 1
d95 1
d103 1
d105 1
d146 1
d152 1
d200 1
d202 1
d246 1
d248 1
d385 1
a385 1
	EXIT(ret);
@


1.5
log
@openssl-engine-0.9.6a merge
@
text
@d59 1
a59 1
#ifndef NO_DSA
a71 1
#include <openssl/engine.h>
d98 1
a98 1
	char *infile,*outfile,*prog,*inrand=NULL,*engine=NULL;
d101 1
d109 3
d142 5
d189 1
a189 1
		BIO_printf(bio_err," -text         print the key in text\n");
d192 1
d194 1
d222 1
a222 1
#ifdef VMS
d238 2
d374 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d316 1
a316 1
		printf("\t\treturn(NULL);\n");
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d72 1
d94 1
d99 1
a99 1
	char *infile,*outfile,*prog,*inrand=NULL;
d210 1
d212 7
d273 1
a273 1
		data=(unsigned char *)Malloc(len+20);
d276 1
a276 1
			perror("Malloc");
d360 1
a360 1
	if (out != NULL) BIO_free(out);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d60 1
a68 1
#include <openssl/rand.h>
d76 1
a76 1
/* -inform arg	- input format - default PEM (one of DER, TXT or PEM)
d87 4
a90 1
static void MS_CALLBACK dsa_cb(int p, int n, char *arg);
d99 1
a99 1
	char buffer[200],*randfile=NULL;
d142 1
d144 2
d150 1
d158 1
d175 2
a176 2
		BIO_printf(bio_err," -inform arg   input format - one of DER TXT PEM\n");
		BIO_printf(bio_err," -outform arg  output format - one of DER TXT PEM\n");
d179 1
a179 1
		BIO_printf(bio_err," -text         check the DSA parameters\n");
d218 8
d228 1
a228 3
		randfile=RAND_file_name(buffer,200);
		RAND_load_file(randfile,1024L*1024L);

d231 1
a231 2
	        dsa=DSA_generate_parameters(num,NULL,0,NULL,NULL,
			dsa_cb,(char *)bio_err);
d323 1
a323 1
			BIO_printf(bio_err,"unable to write DSA paramaters\n");
d332 1
d345 2
d355 1
a355 1
static void MS_CALLBACK dsa_cb(int p, int n, char *arg)
d363 2
a364 2
	BIO_write((BIO *)arg,&c,1);
	(void)BIO_flush((BIO *)arg);
@


1.1
log
@Initial revision
@
text
@d59 1
d65 7
a71 7
#include "bio.h"
#include "err.h"
#include "bn.h"
#include "rand.h"
#include "dsa.h"
#include "x509.h"
#include "pem.h"
d84 1
a86 1
#ifndef NOPROTO
d88 1
a88 7
#else
static void MS_CALLBACK dsa_cb();
#endif

int MAIN(argc, argv)
int argc;
char **argv;
d95 1
a95 1
	int numbits= -1,num;
d138 2
d169 1
a169 1
		BIO_printf(bio_err," -in arg       inout file\n");
d223 1
a223 1
		dsa=PEM_read_bio_DSAparams(in,NULL,NULL);
d315 16
d339 1
a339 4
static void MS_CALLBACK dsa_cb(p, n, arg)
int p;
int n;
char *arg;
d348 1
a348 1
	BIO_flush((BIO *)arg);
d353 1
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 2
#ifndef OPENSSL_NO_DSA
#include <assert.h>
d64 7
a70 6
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
d75 1
a75 1
/* -inform arg	- input format - default PEM (DER or PEM)
a82 1
 * -genkey
d85 5
a89 3
static void MS_CALLBACK dsa_cb(int p, int n, void *arg);

int MAIN(int, char **);
d91 3
a93 1
int MAIN(int argc, char **argv)
a94 1
	ENGINE *e = NULL;
d100 2
a101 3
	int numbits= -1,num,genkey=0;
	int need_rand=0;
	char *engine=NULL;
a108 3
	if (!load_config(bio_err, NULL))
		goto end;

a138 5
		else if(strcmp(*argv, "-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine = *(++argv);
			}
a142 5
		else if (strcmp(*argv,"-genkey") == 0)
			{
			genkey=1;
			need_rand=1;
			}
a146 1
			need_rand=1;
a153 1
			need_rand=1;
d170 3
a172 3
		BIO_printf(bio_err," -inform arg   input format - DER or PEM\n");
		BIO_printf(bio_err," -outform arg  output format - DER or PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
d174 1
a174 1
		BIO_printf(bio_err," -text         print as text\n");
a176 1
		BIO_printf(bio_err," -genkey       generate a DSA key\n");
a177 1
		BIO_printf(bio_err," -engine e     use engine e, possibly a hardware device.\n");
a202 1
		{
a203 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d213 1
a213 3
        e = setup_engine(bio_err, engine, 0);

	if (need_rand)
d215 2
a216 5
		app_RAND_load_file(NULL, bio_err, (inrand != NULL));
		if (inrand != NULL)
			BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
				app_RAND_load_files(inrand));
		}
a217 3
	if (numbits > 0)
		{
		assert(need_rand);
d220 2
a221 1
	        dsa=DSA_generate_parameters(num,NULL,0,NULL,NULL, dsa_cb,bio_err);
d226 1
a226 1
		dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL);
d253 1
a253 1
		data=(unsigned char *)OPENSSL_malloc(len+20);
d256 1
a256 1
			perror("OPENSSL_malloc");
d296 1
a296 1
		printf("\t\t{ DSA_free(dsa); return(NULL); }\n");
d313 1
a313 1
			BIO_printf(bio_err,"unable to write DSA parameters\n");
a317 19
	if (genkey)
		{
		DSA *dsakey;

		assert(need_rand);
		if ((dsakey=DSAparams_dup(dsa)) == NULL) goto end;
		if (!DSA_generate_key(dsakey)) goto end;
		if 	(outformat == FORMAT_ASN1)
			i=i2d_DSAPrivateKey_bio(out,dsakey);
		else if (outformat == FORMAT_PEM)
			i=PEM_write_bio_DSAPrivateKey(out,dsakey,NULL,NULL,0,NULL,NULL);
		else	{
			BIO_printf(bio_err,"bad output format specified for outfile\n");
			goto end;
			}
		DSA_free(dsakey);
		}
	if (need_rand)
		app_RAND_write_file(NULL, bio_err);
d321 1
a321 1
	if (out != NULL) BIO_free_all(out);
a322 1
	apps_shutdown();
d326 4
a329 1
static void MS_CALLBACK dsa_cb(int p, int n, void *arg)
d337 2
a338 2
	BIO_write(arg,&c,1);
	(void)BIO_flush(arg);
a342 1
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a92 1
#ifndef OPENSSL_NO_ENGINE
a93 1
#endif
a100 1
#ifndef OPENSSL_NO_ENGINE
a101 1
#endif
a141 1
#ifndef OPENSSL_NO_ENGINE
a146 1
#endif
a193 1
#ifndef OPENSSL_NO_ENGINE
a194 1
#endif
a237 1
#ifndef OPENSSL_NO_ENGINE
a238 1
#endif
d375 1
a375 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a58 7
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif

a84 3
 *  #ifdef GENCB_TEST
 * -timebomb n  - interrupt keygen after <n> seconds
 *  #endif
d87 1
a87 12
#ifdef GENCB_TEST

static int stop_keygen_flag = 0;

static void timebomb_sigalarm(int foo)
	{
	stop_keygen_flag = 1;
	}

#endif

static int MS_CALLBACK dsa_cb(int p, int n, BN_GENCB *cb);
a105 3
#ifdef GENCB_TEST
	int timebomb=0;
#endif
a152 7
#ifdef GENCB_TEST
		else if(strcmp(*argv, "-timebomb") == 0)
			{
			if (--argc < 1) goto bad;
			timebomb = atoi(*(++argv));
			}
#endif
a202 3
#ifdef GENCB_TEST
		BIO_printf(bio_err," -timebomb n   interrupt keygen after <n> seconds\n");
#endif
a259 2
		BN_GENCB cb;
		BN_GENCB_set(&cb, dsa_cb, bio_err);
a260 6
		dsa = DSA_new();
		if(!dsa)
			{
			BIO_printf(bio_err,"Error allocating DSA object\n");
			goto end;
			}
d263 1
a263 30
#ifdef GENCB_TEST
		if(timebomb > 0)
	{
		struct sigaction act;
		act.sa_handler = timebomb_sigalarm;
		act.sa_flags = 0;
		BIO_printf(bio_err,"(though I'll stop it if not done within %d secs)\n",
				timebomb);
		if(sigaction(SIGALRM, &act, NULL) != 0)
			{
			BIO_printf(bio_err,"Error, couldn't set SIGALRM handler\n");
			goto end;
			}
		alarm(timebomb);
	}
#endif
	        if(!DSA_generate_parameters_ex(dsa,num,NULL,0,NULL,NULL, &cb))
			{
#ifdef GENCB_TEST
			if(stop_keygen_flag)
				{
				BIO_printf(bio_err,"DSA key generation time-stopped\n");
				/* This is an asked-for behaviour! */
				ret = 0;
				goto end;
				}
#endif
			BIO_printf(bio_err,"Error, DSA key generation failed\n");
			goto end;
			}
d388 1
a388 1
static int MS_CALLBACK dsa_cb(int p, int n, BN_GENCB *cb)
d396 2
a397 2
	BIO_write(cb->arg,&c,1);
	(void)BIO_flush(cb->arg);
a400 5
#ifdef GENCB_TEST
	if(stop_keygen_flag)
		return 0;
#endif
	return 1;
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a477 6
#else /* !OPENSSL_NO_DSA */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d114 3
d281 1
a281 1
        setup_engine(bio_err, engine, 0);
d360 1
a360 1
		int l,len,bits_p;
d364 2
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@a328 1
			ERR_print_errors(bio_err);
d432 1
a432 6
		if (!DSA_generate_key(dsakey))
			{
			ERR_print_errors(bio_err);
			DSA_free(dsakey);
			goto end;
			}
a438 1
			DSA_free(dsakey);
@


