head	1.28;
access;
symbols
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.27;
commitid	7A7DObXgY4Fni8xJ;

1.27
date	2014.08.24.14.55.23;	author jsing;	state Exp;
branches;
next	1.26;
commitid	s7YswUTosXrEK8Kh;

1.26
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	EB0l28piqIRSpBUh;

1.25
date	2014.07.12.19.31.21;	author jsing;	state Exp;
branches;
next	1.24;
commitid	X84oGf60c5Z5Yd6T;

1.24
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.23;
commitid	0NuggCO2WJOZj8Kh;

1.23
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	mJUVYpkFBZ0Zv2bG;

1.22
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.24.04.36.08;	author lteo;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.22.14.54.13;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.22.13.32.17;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.16.55.21;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.15.21.47.56;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.54;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.06;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.06;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.17;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.10.13.21.23.32;	author djm;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: ciphers.c,v 1.27 2014/08/24 14:55:23 jsing Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/ssl.h>

static const char *ciphers_usage[] = {
	"usage: ciphers args\n",
	" -v          - verbose mode, a textual listing of the SSL/TLS ciphers in OpenSSL\n",
	" -V          - even more verbose\n",
	" -ssl3       - SSL3 mode\n",
	" -tls1       - TLS1 mode\n",
	NULL
};

int ciphers_main(int, char **);

int
ciphers_main(int argc, char **argv)
{
	int ret = 1, i;
	int verbose = 0, Verbose = 0;
	const char **pp;
	const char *p;
	int badops = 0;
	SSL_CTX *ctx = NULL;
	SSL *ssl = NULL;
	char *ciphers = NULL;
	const SSL_METHOD *meth = NULL;
	STACK_OF(SSL_CIPHER) * sk;
	BIO *STDout = NULL;
	char *desc;

	meth = SSLv3_server_method();

	STDout = BIO_new_fp(stdout, BIO_NOCLOSE);

	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-v") == 0)
			verbose = 1;
		else if (strcmp(*argv, "-V") == 0)
			verbose = Verbose = 1;
		else if (strcmp(*argv, "-ssl3") == 0)
			meth = SSLv3_client_method();
		else if (strcmp(*argv, "-tls1") == 0)
			meth = TLSv1_client_method();
		else if ((strncmp(*argv, "-h", 2) == 0) ||
		    (strcmp(*argv, "-?") == 0)) {
			badops = 1;
			break;
		} else {
			ciphers = *argv;
		}
		argc--;
		argv++;
	}

	if (badops) {
		for (pp = ciphers_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err, "%s", *pp);
		goto end;
	}

	ctx = SSL_CTX_new(meth);
	if (ctx == NULL)
		goto err;
	if (ciphers != NULL) {
		if (!SSL_CTX_set_cipher_list(ctx, ciphers)) {
			BIO_printf(bio_err, "Error in cipher list\n");
			goto err;
		}
	}
	ssl = SSL_new(ctx);
	if (ssl == NULL)
		goto err;

	if (!verbose) {
		for (i = 0; ; i++) {
			p = SSL_get_cipher_list(ssl, i);
			if (p == NULL)
				break;
			if (i != 0)
				BIO_printf(STDout, ":");
			BIO_printf(STDout, "%s", p);
		}
		BIO_printf(STDout, "\n");
	} else {		/* verbose */
		sk = SSL_get_ciphers(ssl);

		for (i = 0; i < sk_SSL_CIPHER_num(sk); i++) {
			SSL_CIPHER *c;

			c = sk_SSL_CIPHER_value(sk, i);

			if (Verbose) {
				unsigned long id = SSL_CIPHER_get_id(c);
				int id0 = (int) (id >> 24);
				int id1 = (int) ((id >> 16) & 0xffL);
				int id2 = (int) ((id >> 8) & 0xffL);
				int id3 = (int) (id & 0xffL);

				if ((id & 0xff000000L) == 0x02000000L)
					BIO_printf(STDout, "     0x%02X,0x%02X,0x%02X - ", id1, id2, id3);	/* SSL2 cipher */
				else if ((id & 0xff000000L) == 0x03000000L)
					BIO_printf(STDout, "          0x%02X,0x%02X - ", id2, id3);	/* SSL3 cipher */
				else
					BIO_printf(STDout, "0x%02X,0x%02X,0x%02X,0x%02X - ", id0, id1, id2, id3);	/* whatever */
			}
			desc = SSL_CIPHER_description(c, NULL, 0);
			BIO_puts(STDout, desc);
			if (strcmp(desc, "OPENSSL_malloc Error") != 0)
				free(desc);
		}
	}

	ret = 0;
	if (0) {
err:
		ERR_print_errors(bio_err);
	}

end:
	if (ctx != NULL)
		SSL_CTX_free(ctx);
	if (ssl != NULL)
		SSL_free(ssl);
	if (STDout != NULL)
		BIO_free_all(STDout);

	return (ret);
}
@


1.27
log
@Let SSL_CIPHER_description() allocate the buffer for the description,
rather than passing in a fixed size buffer.

This is yet another example of a horribly designed API - if the given
buffer is NULL then SSL_CIPHER_description() allocates one for us (great!),
which we then need to free (no problem). However, if this allocation fails
it returns a pointer to a static string "OPENSSL_malloc Error" - obviously
bad things happen if we call free() with this pointer.

Unfortunately, there is no way of knowing that the function failed, other
than comparing the returned string against the string literal - so do that
before calling free()...

Joint work with beck@@ during g2k14.
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.26 2014/07/14 00:35:10 deraadt Exp $ */
@


1.26
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.25 2014/07/12 19:31:21 jsing Exp $ */
a91 1
	char buf[512];
d93 1
d172 4
a175 2
			BIO_puts(STDout,
			    SSL_CIPHER_description(c, buf, sizeof buf));
@


1.25
log
@In openssl_startup(), call SSL_library_init() and SSL_load_error_strings().
This allows us to remove the ERR_load_crypto_strings() call, along with
the various SSL_load_error_strings() and OpenSSL_add_ssl_algorithms()
calls scattered around the place.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.24 2014/07/12 17:54:31 jsing Exp $ */
d190 1
a190 1
	
@


1.24
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ciphers.c,v 1.23 2014/06/12 15:49:27 deraadt Exp $ */
a125 1
	OpenSSL_add_ssl_algorithms();
a139 1

a179 1
		SSL_load_error_strings();
@


1.23
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a97 2
	if (!load_config(bio_err, NULL))
		goto end;
@


1.22
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/ciphers.c */
@


1.21
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a96 2
	signal(SIGPIPE, SIG_IGN);

@


1.20
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d62 1
d64 1
a66 1

@


1.19
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a97 2
	if (bio_err == NULL)
		bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);
@


1.18
log
@Support for the -ssl2 option has been removed, so remove it from usage
as well ("openssl ciphers -h").

"sure" miod@@
@
text
@d96 1
a96 1
	apps_startup();
d198 1
a198 1
	apps_shutdown();
@


1.17
log
@Nuke the last of the windows related defines from the openssl apps.

ok deraadt@@
@
text
@a70 1
	" -ssl2       - SSL2 mode\n",
@


1.16
log
@More KNF.
@
text
@a61 3
#ifdef OPENSSL_NO_STDIO
#define APPS_WIN16
#endif
@


1.15
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d152 1
a152 1
		for (i = 0;; i++) {
d183 2
a184 1
			BIO_puts(STDout, SSL_CIPHER_description(c, buf, sizeof buf));
d194 1
@


1.14
log
@KaboomNF
@
text
@a68 2
#undef PROG
#define PROG	ciphers_main
d80 1
a80 1
int MAIN(int, char **);
d83 1
a83 1
MAIN(int argc, char **argv)
@


1.13
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d96 1
a96 1
	STACK_OF(SSL_CIPHER) *sk;
d126 1
a126 1
			ciphers= *argv;
a136 1

d154 1
a154 1
		for (i = 0; ; i++) {
d163 1
a163 3
	}
	else /* verbose */
	{
d173 4
a176 4
				int id0 = (int)(id >> 24);
				int id1 = (int)((id >> 16) & 0xffL);
				int id2 = (int)((id >> 8) & 0xffL);
				int id3 = (int)(id & 0xffL);
d179 1
a179 1
					BIO_printf(STDout, "     0x%02X,0x%02X,0x%02X - ", id1, id2, id3); /* SSL2 cipher */
d181 1
a181 1
					BIO_printf(STDout, "          0x%02X,0x%02X - ", id2, id3); /* SSL3 cipher */
d183 1
a183 1
					BIO_printf(STDout, "0x%02X,0x%02X,0x%02X,0x%02X - ", id0, id1, id2, id3); /* whatever */
a184 1

d203 1
a203 1
	return(ret);
@


1.12
log
@Initial KNF.
@
text
@d207 1
a207 1
	OPENSSL_EXIT(ret);
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 8
a79 8
static const char *ciphers_usage[]={
"usage: ciphers args\n",
" -v          - verbose mode, a textual listing of the SSL/TLS ciphers in OpenSSL\n",
" -V          - even more verbose\n",
" -ssl2       - SSL2 mode\n",
" -ssl3       - SSL3 mode\n",
" -tls1       - TLS1 mode\n",
NULL
d84 5
a88 4
int MAIN(int argc, char **argv)
	{
	int ret=1,i;
	int verbose=0,Verbose=0;
d91 5
a95 5
	int badops=0;
	SSL_CTX *ctx=NULL;
	SSL *ssl=NULL;
	char *ciphers=NULL;
	const SSL_METHOD *meth=NULL;
d98 1
a98 1
	BIO *STDout=NULL;
d100 1
a100 1
	meth=SSLv3_server_method();
d105 2
a106 2
		bio_err=BIO_new_fp(stderr,BIO_NOCLOSE);
	STDout=BIO_new_fp(stdout,BIO_NOCLOSE);
d112 12
a123 14
	while (argc >= 1)
		{
		if (strcmp(*argv,"-v") == 0)
			verbose=1;
		else if (strcmp(*argv,"-V") == 0)
			verbose=Verbose=1;
		else if (strcmp(*argv,"-ssl3") == 0)
			meth=SSLv3_client_method();
		else if (strcmp(*argv,"-tls1") == 0)
			meth=TLSv1_client_method();
		else if ((strncmp(*argv,"-h",2) == 0) ||
			 (strcmp(*argv,"-?") == 0))
			{
			badops=1;
d125 1
a125 3
			}
		else
			{
d127 1
a127 1
			}
d130 1
a130 1
		}
d132 3
a134 4
	if (badops)
		{
		for (pp=ciphers_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err,"%s",*pp);
d136 1
a136 1
		}
d140 3
a142 2
	ctx=SSL_CTX_new(meth);
	if (ctx == NULL) goto err;
d144 1
a144 1
		if(!SSL_CTX_set_cipher_list(ctx,ciphers)) {
d149 3
a151 2
	ssl=SSL_new(ctx);
	if (ssl == NULL) goto err;
d154 8
a161 10
	if (!verbose)
		{
		for (i=0; ; i++)
			{
			p=SSL_get_cipher_list(ssl,i);
			if (p == NULL) break;
			if (i != 0) BIO_printf(STDout,":");
			BIO_printf(STDout,"%s",p);
			}
		BIO_printf(STDout,"\n");
d163 2
d166 2
a167 2
		{
		sk=SSL_get_ciphers(ssl);
d169 1
a169 2
		for (i=0; i<sk_SSL_CIPHER_num(sk); i++)
			{
d172 3
a174 4
			c = sk_SSL_CIPHER_value(sk,i);
			
			if (Verbose)
				{
d180 1
a180 1
				
d187 1
a187 1
				}
d189 1
a189 2
			BIO_puts(STDout,SSL_CIPHER_description(c,buf,sizeof buf));
			}
d191 1
d193 2
a194 3
	ret=0;
	if (0)
		{
d198 1
a198 1
		}
d200 6
a205 3
	if (ctx != NULL) SSL_CTX_free(ctx);
	if (ssl != NULL) SSL_free(ssl);
	if (STDout != NULL) BIO_free_all(STDout);
d208 1
a208 2
	}

@


1.10
log
@remove ssl2 support even more completely.
in the process, always include ssl3 and tls1, we don't need config options
for them. when the time comes to expire ssl3, it will be with an ax.
checked by miod
@
text
@a105 6
#ifdef OPENSSL_SYS_VMS
	{
	BIO *tmpbio = BIO_new(BIO_f_linebuffer());
	STDout = BIO_push(tmpbio, STDout);
	}
#endif
@


1.9
log
@resolve conflicts
@
text
@a98 3
#if !defined(OPENSSL_NO_SSL2) && !defined(OPENSSL_NO_SSL3)
	meth=SSLv23_server_method();
#elif !defined(OPENSSL_NO_SSL3)
a99 3
#elif !defined(OPENSSL_NO_SSL2)
	meth=SSLv2_server_method();
#endif
a122 5
#ifndef OPENSSL_NO_SSL2
		else if (strcmp(*argv,"-ssl2") == 0)
			meth=SSLv2_client_method();
#endif
#ifndef OPENSSL_NO_SSL3
a124 2
#endif
#ifndef OPENSSL_NO_TLS1
a126 1
#endif
@


1.8
log
@resolve conflicts, fix local changes
@
text
@d199 1
a199 1
				unsigned long id = c->id;
@


1.7
log
@resolve conflicts
@
text
@d74 2
a75 1
" -v          - verbose mode, a textual listing of the ciphers in SSLeay\n",
d87 1
a87 1
	int verbose=0;
d94 1
a94 1
	SSL_METHOD *meth=NULL;
d118 2
d127 2
d187 1
a187 1
	else
d193 21
a213 3
			BIO_puts(STDout,SSL_CIPHER_description(
				sk_SSL_CIPHER_value(sk,i),
				buf,sizeof buf));
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d72 1
a72 1
static char *ciphers_usage[]={
d87 1
a87 1
	char **pp;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d190 1
a190 1
				buf,512));
d206 1
a206 1
	EXIT(ret);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d62 1
a62 1
#ifdef NO_STDIO
d98 1
a98 1
#if !defined(NO_SSL2) && !defined(NO_SSL3)
d100 1
a100 1
#elif !defined(NO_SSL3)
d102 1
a102 1
#elif !defined(NO_SSL2)
d111 1
a111 1
#ifdef VMS
d124 1
a124 1
#ifndef NO_SSL2
d128 1
a128 1
#ifndef NO_SSL3
d132 1
a132 1
#ifndef NO_TLS1
d153 1
a153 1
			BIO_printf(bio_err,*pp);
d205 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d77 1
d111 6
d132 4
d204 1
a204 1
	if (STDout != NULL) BIO_free(STDout);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a68 4
#if defined(NO_RSA) && !defined(NO_SSL2)
#define NO_SSL2
#endif

d80 2
d146 1
a146 1
	SSLeay_add_ssl_algorithms();
d150 6
a155 2
	if (ciphers != NULL)
		SSL_CTX_set_cipher_list(ctx,ciphers);
@


1.1
log
@Initial revision
@
text
@d66 6
a71 2
#include "err.h"
#include "ssl.h"
d84 1
a84 3
int MAIN(argc, argv)
int argc;
char **argv;
d88 2
a89 1
	char **pp,*p;
d95 1
a95 1
	STACK *sk;
d173 1
a173 1
		for (i=0; i<sk_num(sk); i++)
d176 1
a176 1
				(SSL_CIPHER *)sk_value(sk,i),
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d62 1
a62 1
#ifdef OPENSSL_NO_STDIO
d66 2
a67 2
#include <openssl/err.h>
#include <openssl/ssl.h>
a76 1
" -tls1       - TLS1 mode\n",
d80 3
a82 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
d86 1
a86 2
	char **pp;
	const char *p;
d92 1
a92 1
	STACK_OF(SSL_CIPHER) *sk;
d96 1
a96 1
#if !defined(OPENSSL_NO_SSL2) && !defined(OPENSSL_NO_SSL3)
d98 1
a98 1
#elif !defined(OPENSSL_NO_SSL3)
d100 1
a100 1
#elif !defined(OPENSSL_NO_SSL2)
a108 6
#ifdef OPENSSL_SYS_VMS
	{
	BIO *tmpbio = BIO_new(BIO_f_linebuffer());
	STDout = BIO_push(tmpbio, STDout);
	}
#endif
d116 1
a116 1
#ifndef OPENSSL_NO_SSL2
d120 1
a120 1
#ifndef OPENSSL_NO_SSL3
a123 4
#ifndef OPENSSL_NO_TLS1
		else if (strcmp(*argv,"-tls1") == 0)
			meth=TLSv1_client_method();
#endif
d141 1
a141 1
			BIO_printf(bio_err,"%s",*pp);
d145 1
a145 1
	OpenSSL_add_ssl_algorithms();
d149 2
a150 6
	if (ciphers != NULL) {
		if(!SSL_CTX_set_cipher_list(ctx,ciphers)) {
			BIO_printf(bio_err, "Error in cipher list\n");
			goto err;
		}
	}
d170 1
a170 1
		for (i=0; i<sk_SSL_CIPHER_num(sk); i++)
d173 1
a173 1
				sk_SSL_CIPHER_value(sk,i),
d188 1
a188 2
	if (STDout != NULL) BIO_free_all(STDout);
	apps_shutdown();
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@d190 1
a190 1
				buf,sizeof buf));
d206 1
a206 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d72 1
a72 1
static const char *ciphers_usage[]={
d87 1
a87 1
	const char **pp;
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@d74 1
a74 2
" -v          - verbose mode, a textual listing of the SSL/TLS ciphers in OpenSSL\n",
" -V          - even more verbose\n",
d86 1
a86 1
	int verbose=0,Verbose=0;
d93 1
a93 1
	const SSL_METHOD *meth=NULL;
a116 2
	if (!load_config(bio_err, NULL))
		goto end;
a123 2
		else if (strcmp(*argv,"-V") == 0)
			verbose=Verbose=1;
d182 1
a182 1
	else /* verbose */
d188 3
a190 21
			SSL_CIPHER *c;

			c = sk_SSL_CIPHER_value(sk,i);
			
			if (Verbose)
				{
				unsigned long id = c->id;
				int id0 = (int)(id >> 24);
				int id1 = (int)((id >> 16) & 0xffL);
				int id2 = (int)((id >> 8) & 0xffL);
				int id3 = (int)(id & 0xffL);
				
				if ((id & 0xff000000L) == 0x02000000L)
					BIO_printf(STDout, "     0x%02X,0x%02X,0x%02X - ", id1, id2, id3); /* SSL2 cipher */
				else if ((id & 0xff000000L) == 0x03000000L)
					BIO_printf(STDout, "          0x%02X,0x%02X - ", id2, id3); /* SSL3 cipher */
				else
					BIO_printf(STDout, "0x%02X,0x%02X,0x%02X,0x%02X - ", id0, id1, id2, id3); /* whatever */
				}

			BIO_puts(STDout,SSL_CIPHER_description(c,buf,sizeof buf));
@


1.1.1.6
log
@import OpenSSL-1.0.1c
@
text
@d199 1
a199 1
				unsigned long id = SSL_CIPHER_get_id(c);
@


