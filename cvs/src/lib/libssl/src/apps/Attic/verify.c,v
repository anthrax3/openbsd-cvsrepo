head	1.27;
access;
symbols
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	butholakala:1.12
	openssl_1_0_1_g:1.1.1.9
	OPENBSD_5_5:1.11.0.8
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.26;
commitid	7A7DObXgY4Fni8xJ;

1.26
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	EB0l28piqIRSpBUh;

1.25
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.24;
commitid	0NuggCO2WJOZj8Kh;

1.24
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	mJUVYpkFBZ0Zv2bG;

1.23
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.22.14.05.40;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.04.33.09;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.04.17.17;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.02.45.27;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.21.55.07;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.20.37.11;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.16;	author djm;	state Exp;
branches
	1.7.12.1
	1.7.14.1;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.59;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.20;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.10;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.10;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.38;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.25;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.00;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2012.10.13.21.23.33;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;

1.7.12.1
date	2009.01.09.11.40.48;	author djm;	state Exp;
branches;
next	;

1.7.14.1
date	2009.01.09.11.40.32;	author djm;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: verify.c,v 1.26 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

static int cb(int ok, X509_STORE_CTX * ctx);
static int check(X509_STORE * ctx, char *file, STACK_OF(X509) * uchain,
    STACK_OF(X509) * tchain, STACK_OF(X509_CRL) * crls, ENGINE * e);
static int v_verbose = 0, vflags = 0;

int verify_main(int, char **);

int
verify_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	int i, ret = 1, badarg = 0;
	char *CApath = NULL, *CAfile = NULL;
	char *untfile = NULL, *trustfile = NULL, *crlfile = NULL;
	STACK_OF(X509) * untrusted = NULL, *trusted = NULL;
	STACK_OF(X509_CRL) * crls = NULL;
	X509_STORE *cert_ctx = NULL;
	X509_LOOKUP *lookup = NULL;
	X509_VERIFY_PARAM *vpm = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif

	cert_ctx = X509_STORE_new();
	if (cert_ctx == NULL)
		goto end;
	X509_STORE_set_verify_cb(cert_ctx, cb);

	ERR_load_crypto_strings();

	argc--;
	argv++;
	for (;;) {
		if (argc >= 1) {
			if (strcmp(*argv, "-CApath") == 0) {
				if (argc-- < 1)
					goto end;
				CApath = *(++argv);
			} else if (strcmp(*argv, "-CAfile") == 0) {
				if (argc-- < 1)
					goto end;
				CAfile = *(++argv);
			} else if (args_verify(&argv, &argc, &badarg, bio_err,
			    &vpm)) {
				if (badarg)
					goto end;
				continue;
			} else if (strcmp(*argv, "-untrusted") == 0) {
				if (argc-- < 1)
					goto end;
				untfile = *(++argv);
			} else if (strcmp(*argv, "-trusted") == 0) {
				if (argc-- < 1)
					goto end;
				trustfile = *(++argv);
			} else if (strcmp(*argv, "-CRLfile") == 0) {
				if (argc-- < 1)
					goto end;
				crlfile = *(++argv);
			}
#ifndef OPENSSL_NO_ENGINE
			else if (strcmp(*argv, "-engine") == 0) {
				if (--argc < 1)
					goto end;
				engine = *(++argv);
			}
#endif
			else if (strcmp(*argv, "-help") == 0)
				goto end;
			else if (strcmp(*argv, "-verbose") == 0)
				v_verbose = 1;
			else if (argv[0][0] == '-')
				goto end;
			else
				break;
			argc--;
			argv++;
		} else
			break;
	}

#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (vpm)
		X509_STORE_set1_param(cert_ctx, vpm);

	lookup = X509_STORE_add_lookup(cert_ctx, X509_LOOKUP_file());
	if (lookup == NULL)
		abort();
	if (CAfile) {
		i = X509_LOOKUP_load_file(lookup, CAfile, X509_FILETYPE_PEM);
		if (!i) {
			BIO_printf(bio_err, "Error loading file %s\n", CAfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	} else
		X509_LOOKUP_load_file(lookup, NULL, X509_FILETYPE_DEFAULT);

	lookup = X509_STORE_add_lookup(cert_ctx, X509_LOOKUP_hash_dir());
	if (lookup == NULL)
		abort();
	if (CApath) {
		i = X509_LOOKUP_add_dir(lookup, CApath, X509_FILETYPE_PEM);
		if (!i) {
			BIO_printf(bio_err, "Error loading directory %s\n", CApath);
			ERR_print_errors(bio_err);
			goto end;
		}
	} else
		X509_LOOKUP_add_dir(lookup, NULL, X509_FILETYPE_DEFAULT);

	ERR_clear_error();

	if (untfile) {
		untrusted = load_certs(bio_err, untfile, FORMAT_PEM,
		    NULL, e, "untrusted certificates");
		if (!untrusted)
			goto end;
	}
	if (trustfile) {
		trusted = load_certs(bio_err, trustfile, FORMAT_PEM,
		    NULL, e, "trusted certificates");
		if (!trusted)
			goto end;
	}
	if (crlfile) {
		crls = load_crls(bio_err, crlfile, FORMAT_PEM,
		    NULL, e, "other CRLs");
		if (!crls)
			goto end;
	}
	ret = 0;
	if (argc < 1) {
		if (1 != check(cert_ctx, NULL, untrusted, trusted, crls, e))
			ret = -1;
	} else {
		for (i = 0; i < argc; i++)
			if (1 != check(cert_ctx, argv[i], untrusted, trusted,
			    crls, e))
				ret = -1;
	}

end:
	if (ret == 1) {
		BIO_printf(bio_err, "usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-crl_check]");
		BIO_printf(bio_err, " [-attime timestamp]");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " [-engine e]");
#endif
		BIO_printf(bio_err, " cert1 cert2 ...\n");

		BIO_printf(bio_err, "recognized usages:\n");
		for (i = 0; i < X509_PURPOSE_get_count(); i++) {
			X509_PURPOSE *ptmp;
			ptmp = X509_PURPOSE_get0(i);
			BIO_printf(bio_err, "\t%-10s\t%s\n",
			    X509_PURPOSE_get0_sname(ptmp),
			    X509_PURPOSE_get0_name(ptmp));
		}
	}
	if (vpm)
		X509_VERIFY_PARAM_free(vpm);
	if (cert_ctx != NULL)
		X509_STORE_free(cert_ctx);
	sk_X509_pop_free(untrusted, X509_free);
	sk_X509_pop_free(trusted, X509_free);
	sk_X509_CRL_pop_free(crls, X509_CRL_free);

	return (ret < 0 ? 2 : ret);
}

static int
check(X509_STORE * ctx, char *file, STACK_OF(X509) * uchain,
    STACK_OF(X509) * tchain, STACK_OF(X509_CRL) * crls, ENGINE * e)
{
	X509 *x = NULL;
	int i = 0, ret = 0;
	X509_STORE_CTX *csc;

	x = load_cert(bio_err, file, FORMAT_PEM, NULL, e, "certificate file");
	if (x == NULL)
		goto end;
	fprintf(stdout, "%s: ", (file == NULL) ? "stdin" : file);

	csc = X509_STORE_CTX_new();
	if (csc == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	X509_STORE_set_flags(ctx, vflags);
	if (!X509_STORE_CTX_init(csc, ctx, x, uchain)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (tchain)
		X509_STORE_CTX_trusted_stack(csc, tchain);
	if (crls)
		X509_STORE_CTX_set0_crls(csc, crls);
	i = X509_verify_cert(csc);
	X509_STORE_CTX_free(csc);

	ret = 0;

end:
	if (i > 0) {
		fprintf(stdout, "OK\n");
		ret = 1;
	} else
		ERR_print_errors(bio_err);
	if (x != NULL)
		X509_free(x);

	return (ret);
}

static int
cb(int ok, X509_STORE_CTX * ctx)
{
	int cert_error = X509_STORE_CTX_get_error(ctx);
	X509 *current_cert = X509_STORE_CTX_get_current_cert(ctx);

	if (!ok) {
		if (current_cert) {
			X509_NAME_print_ex_fp(stdout,
			    X509_get_subject_name(current_cert),
			    0, XN_FLAG_ONELINE);
			printf("\n");
		}
		printf("%serror %d at %d depth lookup:%s\n",
		    X509_STORE_CTX_get0_parent_ctx(ctx) ? "[CRL path]" : "",
		    cert_error,
		    X509_STORE_CTX_get_error_depth(ctx),
		    X509_verify_cert_error_string(cert_error));
		switch (cert_error) {
		case X509_V_ERR_NO_EXPLICIT_POLICY:
			policies_print(NULL, ctx);
		case X509_V_ERR_CERT_HAS_EXPIRED:

			/*
			 * since we are just checking the certificates, it is
			 * ok if they are self signed. But we should still
			 * warn the user.
			 */

		case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
			/* Continue after extension errors too */
		case X509_V_ERR_INVALID_CA:
		case X509_V_ERR_INVALID_NON_CA:
		case X509_V_ERR_PATH_LENGTH_EXCEEDED:
		case X509_V_ERR_INVALID_PURPOSE:
		case X509_V_ERR_CRL_HAS_EXPIRED:
		case X509_V_ERR_CRL_NOT_YET_VALID:
		case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:
			ok = 1;

		}

		return ok;

	}
	if (cert_error == X509_V_OK && ok == 2)
		policies_print(NULL, ctx);
	if (!v_verbose)
		ERR_clear_error();
	return (ok);
}
@


1.26
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: verify.c,v 1.25 2014/07/12 17:54:31 jsing Exp $ */
@


1.25
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: verify.c,v 1.24 2014/06/12 15:49:27 deraadt Exp $ */
d241 1
a241 1
	
@


1.24
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a99 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.23
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/verify.c */
@


1.22
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a100 2
	signal(SIGPIPE, SIG_IGN);

@


1.21
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d62 1
d64 1
d67 1
a69 2
#include <openssl/pem.h>

@


1.20
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a101 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.19
log
@More KNF.
@
text
@d100 1
a100 1
	apps_startup();
d249 1
a249 1
	apps_shutdown();
@


1.18
log
@whitespace normalization
@
text
@d71 2
a72 3
static int check(X509_STORE * ctx, char *file,
    STACK_OF(X509) * uchain, STACK_OF(X509) * tchain,
    STACK_OF(X509_CRL) * crls, ENGINE * e);
d122 1
a122 1
				&vpm)) {
d219 2
a220 1
			if (1 != check(cert_ctx, argv[i], untrusted, trusted, crls, e))
d253 3
a255 4
static int 
check(X509_STORE * ctx, char *file,
    STACK_OF(X509) * uchain, STACK_OF(X509) * tchain,
    STACK_OF(X509_CRL) * crls, ENGINE * e)
d284 1
d297 1
a297 1
static int 
@


1.17
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d71 1
a71 2
static int 
check(X509_STORE * ctx, char *file,
d74 1
a74 1
	static int v_verbose = 0, vflags = 0;
d76 1
a76 1
	int verify_main(int, char **);
d78 2
a79 1
	int verify_main(int argc, char **argv)
@


1.16
log
@KaboomNF
@
text
@a68 2
#undef PROG
#define PROG	verify_main
d77 1
a77 1
	int MAIN(int, char **);
d79 1
a79 1
	int MAIN(int argc, char **argv)
@


1.15
log
@oops, exit vs return; spotted by matthew
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d72 6
a77 5
static int cb(int ok, X509_STORE_CTX *ctx);
static int check(X509_STORE *ctx, char *file,
		STACK_OF(X509) *uchain, STACK_OF(X509) *tchain,
		STACK_OF(X509_CRL) *crls, ENGINE *e);
static int v_verbose=0, vflags = 0;
d79 1
a79 1
int MAIN(int, char **);
d81 2
a82 2
int MAIN(int argc, char **argv)
	{
d84 2
a85 2
	int i,ret=1, badarg = 0;
	char *CApath=NULL,*CAfile=NULL;
d87 4
a90 4
	STACK_OF(X509) *untrusted = NULL, *trusted = NULL;
	STACK_OF(X509_CRL) *crls = NULL;
	X509_STORE *cert_ctx=NULL;
	X509_LOOKUP *lookup=NULL;
d93 1
a93 1
	char *engine=NULL;
d96 4
a99 3
	cert_ctx=X509_STORE_new();
	if (cert_ctx == NULL) goto end;
	X509_STORE_set_verify_cb(cert_ctx,cb);
d106 2
a107 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d114 12
a125 17
	for (;;)
		{
		if (argc >= 1)
			{
			if (strcmp(*argv,"-CApath") == 0)
				{
				if (argc-- < 1) goto end;
				CApath= *(++argv);
				}
			else if (strcmp(*argv,"-CAfile") == 0)
				{
				if (argc-- < 1) goto end;
				CAfile= *(++argv);
				}
			else if (args_verify(&argv, &argc, &badarg, bio_err,
									&vpm))
				{
d129 13
a141 16
				}
			else if (strcmp(*argv,"-untrusted") == 0)
				{
				if (argc-- < 1) goto end;
				untfile= *(++argv);
				}
			else if (strcmp(*argv,"-trusted") == 0)
				{
				if (argc-- < 1) goto end;
				trustfile= *(++argv);
				}
			else if (strcmp(*argv,"-CRLfile") == 0)
				{
				if (argc-- < 1) goto end;
				crlfile= *(++argv);
				}
d143 5
a147 5
			else if (strcmp(*argv,"-engine") == 0)
				{
				if (--argc < 1) goto end;
				engine= *(++argv);
				}
d149 1
a149 1
			else if (strcmp(*argv,"-help") == 0)
d151 2
a152 2
			else if (strcmp(*argv,"-verbose") == 0)
				v_verbose=1;
d159 1
a159 2
			}
		else
d161 1
a161 1
		}
d164 1
a164 1
        e = setup_engine(bio_err, engine, 0);
d170 3
a172 2
	lookup=X509_STORE_add_lookup(cert_ctx,X509_LOOKUP_file());
	if (lookup == NULL) abort();
d174 2
a175 2
		i=X509_LOOKUP_load_file(lookup,CAfile,X509_FILETYPE_PEM);
		if(!i) {
d180 6
a185 4
	} else X509_LOOKUP_load_file(lookup,NULL,X509_FILETYPE_DEFAULT);
		
	lookup=X509_STORE_add_lookup(cert_ctx,X509_LOOKUP_hash_dir());
	if (lookup == NULL) abort();
d187 2
a188 2
		i=X509_LOOKUP_add_dir(lookup,CApath,X509_FILETYPE_PEM);
		if(!i) {
d193 2
a194 1
	} else X509_LOOKUP_add_dir(lookup,NULL,X509_FILETYPE_DEFAULT);
d198 1
a198 2
	if(untfile)
		{
d200 2
a201 2
					NULL, e, "untrusted certificates");
		if(!untrusted)
d203 2
a204 4
		}

	if(trustfile)
		{
d206 2
a207 2
					NULL, e, "trusted certificates");
		if(!trusted)
d209 2
a210 4
		}

	if(crlfile)
		{
d212 2
a213 2
					NULL, e, "other CRLs");
		if(!crls)
d215 1
a215 2
		}

d217 1
a217 2
	if (argc < 1)
		{ 
d220 3
a222 5
		}
	else
		{
		for (i=0; i<argc; i++)
			if (1 != check(cert_ctx,argv[i], untrusted, trusted, crls, e))
d224 1
a224 1
		}
d228 2
a229 2
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-crl_check]");
		BIO_printf(bio_err," [-attime timestamp]");
d231 1
a231 1
		BIO_printf(bio_err," [-engine e]");
d233 1
a233 1
		BIO_printf(bio_err," cert1 cert2 ...\n");
d235 2
a236 3
		BIO_printf(bio_err,"recognized usages:\n");
		for(i = 0; i < X509_PURPOSE_get_count(); i++)
			{
d240 3
a242 3
				   X509_PURPOSE_get0_sname(ptmp),
				   X509_PURPOSE_get0_name(ptmp));
			}
d244 4
a247 2
	if (vpm) X509_VERIFY_PARAM_free(vpm);
	if (cert_ctx != NULL) X509_STORE_free(cert_ctx);
d252 2
a253 2
	return(ret < 0 ? 2 : ret);
	}
d255 7
a261 6
static int check(X509_STORE *ctx, char *file,
		STACK_OF(X509) *uchain, STACK_OF(X509) *tchain,
		STACK_OF(X509_CRL) *crls, ENGINE *e)
	{
	X509 *x=NULL;
	int i=0,ret=0;
d267 1
a267 1
	fprintf(stdout,"%s: ",(file == NULL)?"stdin":file);
d270 1
a270 2
	if (csc == NULL)
		{
d273 1
a273 1
		}
d275 1
a275 2
	if(!X509_STORE_CTX_init(csc,ctx,x,uchain))
		{
d278 3
a280 2
		}
	if(tchain) X509_STORE_CTX_trusted_stack(csc, tchain);
d283 1
a283 1
	i=X509_verify_cert(csc);
d286 1
a286 1
	ret=0;
d288 4
a291 6
	if (i > 0)
		{
		fprintf(stdout,"OK\n");
		ret=1;
		}
	else
d293 2
a294 1
	if (x != NULL) X509_free(x);
d296 2
a297 2
	return(ret);
	}
d299 3
a301 2
static int cb(int ok, X509_STORE_CTX *ctx)
	{
d305 2
a306 4
	if (!ok)
		{
		if (current_cert)
			{
d308 2
a309 2
				X509_get_subject_name(current_cert),
				0, XN_FLAG_ONELINE);
d311 1
a311 1
			}
d313 13
a325 13
			X509_STORE_CTX_get0_parent_ctx(ctx) ? "[CRL path]" : "",
			cert_error,
			X509_STORE_CTX_get_error_depth(ctx),
			X509_verify_cert_error_string(cert_error));
		switch(cert_error)
			{
			case X509_V_ERR_NO_EXPLICIT_POLICY:
				policies_print(NULL, ctx);
			case X509_V_ERR_CERT_HAS_EXPIRED:

			/* since we are just checking the certificates, it is
			 * ok if they are self signed. But we should still warn
			 * the user.
d328 1
a328 1
			case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
d330 7
a336 7
			case X509_V_ERR_INVALID_CA:
			case X509_V_ERR_INVALID_NON_CA:
			case X509_V_ERR_PATH_LENGTH_EXCEEDED:
			case X509_V_ERR_INVALID_PURPOSE:
			case X509_V_ERR_CRL_HAS_EXPIRED:
			case X509_V_ERR_CRL_NOT_YET_VALID:
			case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:
d339 1
a339 1
			}
d343 1
a343 1
		}
d348 2
a349 2
	return(ok);
	}
@


1.14
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d263 1
a263 1
	exit(ret < 0 ? 2 : ret);
@


1.13
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@d263 1
a263 1
	OPENSSL_EXIT(ret < 0 ? 2 : ret);
@


1.12
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d72 1
a72 1
static int MS_CALLBACK cb(int ok, X509_STORE_CTX *ctx);
d311 1
a311 1
static int MS_CALLBACK cb(int ok, X509_STORE_CTX *ctx)
@


1.11
log
@resolve conflicts
@
text
@d225 6
a230 1
	if (argc < 1) check(cert_ctx, NULL, untrusted, trusted, crls, e);
d232 1
d234 4
a237 2
			check(cert_ctx,argv[i], untrusted, trusted, crls, e);
	ret=0;
d246 1
d248 2
a249 1
		for(i = 0; i < X509_PURPOSE_get_count(); i++) {
d252 4
a255 3
			BIO_printf(bio_err, "\t%-10s\t%s\n", X509_PURPOSE_get0_sname(ptmp),
								X509_PURPOSE_get0_name(ptmp));
		}
d263 1
a263 1
	OPENSSL_EXIT(ret);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@d233 1
@


1.9
log
@resolve conflicts
@
text
@d73 3
a75 2
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose, ENGINE *e);
static STACK_OF(X509) *load_untrusted(char *file);
a83 1
	int purpose = -1;
d85 1
a85 1
	char *untfile = NULL, *trustfile = NULL;
d87 1
d97 1
a97 1
	X509_STORE_set_verify_cb_func(cert_ctx,cb);
d143 5
d201 13
a213 4
	if(untfile) {
		if(!(untrusted = load_untrusted(untfile))) {
			BIO_printf(bio_err, "Error loading untrusted file %s\n", untfile);
			ERR_print_errors(bio_err);
a215 1
	}
d217 5
a221 4
	if(trustfile) {
		if(!(trusted = load_untrusted(trustfile))) {
			BIO_printf(bio_err, "Error loading untrusted file %s\n", trustfile);
			ERR_print_errors(bio_err);
a223 1
	}
d225 1
a225 1
	if (argc < 1) check(cert_ctx, NULL, untrusted, trusted, purpose, e);
d228 1
a228 1
			check(cert_ctx,argv[i], untrusted, trusted, purpose, e);
d249 1
d254 3
a256 1
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose, ENGINE *e)
d280 2
a281 1
	if(purpose >= 0) X509_STORE_CTX_set_purpose(csc, purpose);
a298 46
static STACK_OF(X509) *load_untrusted(char *certfile)
{
	STACK_OF(X509_INFO) *sk=NULL;
	STACK_OF(X509) *stack=NULL, *ret=NULL;
	BIO *in=NULL;
	X509_INFO *xi;

	if(!(stack = sk_X509_new_null())) {
		BIO_printf(bio_err,"memory allocation failure\n");
		goto end;
	}

	if(!(in=BIO_new_file(certfile, "r"))) {
		BIO_printf(bio_err,"error opening the file, %s\n",certfile);
		goto end;
	}

	/* This loads from a file, a stack of x509/crl/pkey sets */
	if(!(sk=PEM_X509_INFO_read_bio(in,NULL,NULL,NULL))) {
		BIO_printf(bio_err,"error reading the file, %s\n",certfile);
		goto end;
	}

	/* scan over it and pull out the certs */
	while (sk_X509_INFO_num(sk))
		{
		xi=sk_X509_INFO_shift(sk);
		if (xi->x509 != NULL)
			{
			sk_X509_push(stack,xi->x509);
			xi->x509=NULL;
			}
		X509_INFO_free(xi);
		}
	if(!sk_X509_num(stack)) {
		BIO_printf(bio_err,"no certificates in file, %s\n",certfile);
		sk_X509_free(stack);
		goto end;
	}
	ret=stack;
end:
	BIO_free(in);
	sk_X509_INFO_free(sk);
	return(ret);
	}

d301 2
a302 1
	char buf[256];
d306 13
a318 1
		if (ctx->current_cert)
d320 20
a339 4
			X509_NAME_oneline(
				X509_get_subject_name(ctx->current_cert),buf,
				sizeof buf);
			printf("%s\n",buf);
a340 18
		printf("error %d at %d depth lookup:%s\n",ctx->error,
			ctx->error_depth,
			X509_verify_cert_error_string(ctx->error));
		if (ctx->error == X509_V_ERR_CERT_HAS_EXPIRED) ok=1;
		/* since we are just checking the certificates, it is
		 * ok if they are self signed. But we should still warn
		 * the user.
 		 */
		if (ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) ok=1;
		/* Continue after extension errors too */
		if (ctx->error == X509_V_ERR_INVALID_CA) ok=1;
		if (ctx->error == X509_V_ERR_INVALID_NON_CA) ok=1;
		if (ctx->error == X509_V_ERR_PATH_LENGTH_EXCEEDED) ok=1;
		if (ctx->error == X509_V_ERR_INVALID_PURPOSE) ok=1;
		if (ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) ok=1;
		if (ctx->error == X509_V_ERR_CRL_HAS_EXPIRED) ok=1;
		if (ctx->error == X509_V_ERR_CRL_NOT_YET_VALID) ok=1;
		if (ctx->error == X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION) ok=1;
a341 2
		if (ctx->error == X509_V_ERR_NO_EXPLICIT_POLICY)
			policies_print(NULL, ctx);
d345 1
a345 1
	if ((ctx->error == X509_V_OK) && (ok == 2))
@


1.8
log
@resolve conflicts
@
text
@d269 1
a269 1
	if (i)
a369 1

@


1.7
log
@resolve conflicts
@
text
@d82 1
a82 1
	int i,ret=1;
d89 1
d125 2
a126 1
			else if (strcmp(*argv,"-purpose") == 0)
d128 1
a128 6
				X509_PURPOSE *xptmp;
				if (argc-- < 1) goto end;
				i = X509_PURPOSE_get_by_sname(*(++argv));
				if(i < 0)
					{
					BIO_printf(bio_err, "unrecognized purpose\n");
d130 1
a130 3
					}
				xptmp = X509_PURPOSE_get0(i);
				purpose = X509_PURPOSE_get_id(xptmp);
a150 8
			else if (strcmp(*argv,"-ignore_critical") == 0)
				vflags |= X509_V_FLAG_IGNORE_CRITICAL;
			else if (strcmp(*argv,"-issuer_checks") == 0)
				vflags |= X509_V_FLAG_CB_ISSUER_CHECK;
			else if (strcmp(*argv,"-crl_check") == 0)
				vflags |= X509_V_FLAG_CRL_CHECK;
			else if (strcmp(*argv,"-crl_check_all") == 0)
				vflags |= X509_V_FLAG_CRL_CHECK|X509_V_FLAG_CRL_CHECK_ALL;
d168 3
d231 1
d333 3
a335 1
		X509_NAME_oneline(
d338 2
a339 1
		printf("%s\n",buf);
d358 5
d364 2
@


1.7.12.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d278 1
a278 1
	if (i > 0)
d369 1
@


1.7.14.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d278 1
a278 1
	if (i > 0)
d369 1
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d357 1
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d89 1
d91 1
d147 1
d153 1
d177 1
d179 1
d228 5
a232 1
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-crl_check] [-engine e] cert1 cert2 ...\n");
d245 1
a245 1
	EXIT(ret);
d343 2
a344 1
				X509_get_subject_name(ctx->current_cert),buf,256);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@a67 1
#include <openssl/engine.h>
d73 1
a73 1
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose);
d75 1
a75 1
static int v_verbose=0, issuer_checks = 0;
d103 3
d152 2
d155 5
a159 1
				issuer_checks=1;
d173 1
a173 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d215 1
a215 1
	if (argc < 1) check(cert_ctx, NULL, untrusted, trusted, purpose);
d218 1
a218 1
			check(cert_ctx,argv[i], untrusted, trusted, purpose);
d222 1
a222 1
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-engine e] cert1 cert2 ...\n");
d234 1
d238 1
a238 1
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose)
a240 1
	BIO *in=NULL;
d244 2
a245 4
	in=BIO_new(BIO_s_file());
	if (in == NULL)
		{
		ERR_print_errors(bio_err);
d247 1
a247 1
		}
d249 2
a250 3
	if (file == NULL)
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
a251 12
		if (BIO_read_filename(in,file) <= 0)
			{
			perror(file);
			goto end;
			}
		}

	x=PEM_read_bio_X509(in,NULL,NULL,NULL);
	if (x == NULL)
		{
		fprintf(stdout,"%s: unable to load certificate file\n",
			(file == NULL)?"stdin":file);
d255 2
a256 4
	fprintf(stdout,"%s: ",(file == NULL)?"stdin":file);

	csc = X509_STORE_CTX_new();
	if (csc == NULL)
a260 1
	X509_STORE_CTX_init(csc,ctx,x,uchain);
a262 2
	if(issuer_checks)
		X509_STORE_CTX_set_flags(csc, X509_V_FLAG_CB_ISSUER_CHECK);
a275 1
	if (in != NULL) BIO_free(in);
d349 3
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d68 1
d74 1
a74 1
static int check(X509_STORE *ctx,char *file, STACK_OF(X509)*other, int purpose);
d76 1
a76 1
static int v_verbose=0;
d82 1
d86 2
a87 2
	char *untfile = NULL;
	STACK_OF(X509) *untrusted = NULL;
d90 1
d138 10
d150 2
d165 18
d215 9
a223 1
	if (argc < 1) check(cert_ctx, NULL, untrusted, purpose);
d226 1
a226 1
			check(cert_ctx,argv[i], untrusted, purpose);
d230 1
a230 1
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] cert1 cert2 ...\n");
d241 1
d245 1
a245 1
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, int purpose)
d287 1
d289 2
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d66 1
d73 2
a74 1
static int check(X509_STORE *ctx,char *file);
d77 2
d82 1
d84 2
d117 18
d152 8
a159 2
	if (!X509_LOOKUP_load_file(lookup,CAfile,X509_FILETYPE_PEM))
		X509_LOOKUP_load_file(lookup,NULL,X509_FILETYPE_DEFAULT);
d163 8
a170 2
	if (!X509_LOOKUP_add_dir(lookup,CApath,X509_FILETYPE_PEM))
		X509_LOOKUP_add_dir(lookup,NULL,X509_FILETYPE_DEFAULT);
d172 1
d174 9
a182 2
	ERR_clear_error();
	if (argc < 1) check(cert_ctx,NULL);
d185 1
a185 1
			check(cert_ctx,argv[i]);
d188 1
a188 1
	if (ret == 1)
d190 8
d199 1
d203 1
a203 1
static int check(X509_STORE *ctx, char *file)
d208 1
a208 1
	X509_STORE_CTX csc;
d238 10
a247 3
	X509_STORE_CTX_init(&csc,ctx,x,NULL);
	i=X509_verify_cert(&csc);
	X509_STORE_CTX_cleanup(&csc);
d264 46
d316 7
d324 9
a332 14
		 * ok if they are self signed. */
		if (ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT)
			ok=1;
		else
			{
			X509_NAME_oneline(
				X509_get_subject_name(ctx->current_cert),buf,256);
			printf("%s\n",buf);
			printf("error %d at %d depth lookup:%s\n",ctx->error,
				ctx->error_depth,
				X509_verify_cert_error_string(ctx->error));
			if (ctx->error == X509_V_ERR_CERT_HAS_EXPIRED)
				ok=1;
			}
@


1.1
log
@Initial revision
@
text
@d63 4
a66 4
#include "bio.h"
#include "err.h"
#include "x509.h"
#include "pem.h"
a70 1
#ifndef NOPROTO
a72 5
#else
static int MS_CALLBACK cb();
static int check();
#endif

d75 1
a75 3
int MAIN(argc, argv)
int argc;
char **argv;
d136 1
d149 1
a149 3
static int check(ctx,file)
X509_STORE *ctx;
char *file;
d174 1
a174 1
	x=PEM_read_bio_X509(in,NULL,NULL);
d203 1
a203 3
static int MS_CALLBACK cb(ok,ctx)
int ok;
X509_STORE_CTX *ctx;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 4
a66 5
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/pem.h>
d71 1
d73 11
a83 7
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose, ENGINE *e);
static STACK_OF(X509) *load_untrusted(char *file);
static int v_verbose=0, vflags = 0;

int MAIN(int, char **);

int MAIN(int argc, char **argv)
a84 1
	ENGINE *e = NULL;
a85 1
	int purpose = -1;
a86 2
	char *untfile = NULL, *trustfile = NULL;
	STACK_OF(X509) *untrusted = NULL, *trusted = NULL;
a88 1
	char *engine=NULL;
a101 3
	if (!load_config(bio_err, NULL))
		goto end;

a117 28
			else if (strcmp(*argv,"-purpose") == 0)
				{
				X509_PURPOSE *xptmp;
				if (argc-- < 1) goto end;
				i = X509_PURPOSE_get_by_sname(*(++argv));
				if(i < 0)
					{
					BIO_printf(bio_err, "unrecognized purpose\n");
					goto end;
					}
				xptmp = X509_PURPOSE_get0(i);
				purpose = X509_PURPOSE_get_id(xptmp);
				}
			else if (strcmp(*argv,"-untrusted") == 0)
				{
				if (argc-- < 1) goto end;
				untfile= *(++argv);
				}
			else if (strcmp(*argv,"-trusted") == 0)
				{
				if (argc-- < 1) goto end;
				trustfile= *(++argv);
				}
			else if (strcmp(*argv,"-engine") == 0)
				{
				if (--argc < 1) goto end;
				engine= *(++argv);
				}
a119 8
			else if (strcmp(*argv,"-ignore_critical") == 0)
				vflags |= X509_V_FLAG_IGNORE_CRITICAL;
			else if (strcmp(*argv,"-issuer_checks") == 0)
				vflags |= X509_V_FLAG_CB_ISSUER_CHECK;
			else if (strcmp(*argv,"-crl_check") == 0)
				vflags |= X509_V_FLAG_CRL_CHECK;
			else if (strcmp(*argv,"-crl_check_all") == 0)
				vflags |= X509_V_FLAG_CRL_CHECK|X509_V_FLAG_CRL_CHECK_ALL;
a132 2
        e = setup_engine(bio_err, engine, 0);

d135 2
a136 8
	if (CAfile) {
		i=X509_LOOKUP_load_file(lookup,CAfile,X509_FILETYPE_PEM);
		if(!i) {
			BIO_printf(bio_err, "Error loading file %s\n", CAfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	} else X509_LOOKUP_load_file(lookup,NULL,X509_FILETYPE_DEFAULT);
d140 2
a141 10
	if (CApath) {
		i=X509_LOOKUP_add_dir(lookup,CApath,X509_FILETYPE_PEM);
		if(!i) {
			BIO_printf(bio_err, "Error loading directory %s\n", CApath);
			ERR_print_errors(bio_err);
			goto end;
		}
	} else X509_LOOKUP_add_dir(lookup,NULL,X509_FILETYPE_DEFAULT);

	ERR_clear_error();
a142 15
	if(untfile) {
		if(!(untrusted = load_untrusted(untfile))) {
			BIO_printf(bio_err, "Error loading untrusted file %s\n", untfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	}

	if(trustfile) {
		if(!(trusted = load_untrusted(trustfile))) {
			BIO_printf(bio_err, "Error loading untrusted file %s\n", trustfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	}
d144 1
a144 1
	if (argc < 1) check(cert_ctx, NULL, untrusted, trusted, purpose, e);
d147 1
a147 1
			check(cert_ctx,argv[i], untrusted, trusted, purpose, e);
d150 2
a151 10
	if (ret == 1) {
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-crl_check] [-engine e] cert1 cert2 ...\n");
		BIO_printf(bio_err,"recognized usages:\n");
		for(i = 0; i < X509_PURPOSE_get_count(); i++) {
			X509_PURPOSE *ptmp;
			ptmp = X509_PURPOSE_get0(i);
			BIO_printf(bio_err, "\t%-10s\t%s\n", X509_PURPOSE_get0_sname(ptmp),
								X509_PURPOSE_get0_name(ptmp));
		}
	}
a152 3
	sk_X509_pop_free(untrusted, X509_free);
	sk_X509_pop_free(trusted, X509_free);
	apps_shutdown();
d156 3
a158 1
static int check(X509_STORE *ctx, char *file, STACK_OF(X509) *uchain, STACK_OF(X509) *tchain, int purpose, ENGINE *e)
d161 1
d163 1
a163 1
	X509_STORE_CTX *csc;
d165 4
a168 2
	x = load_cert(bio_err, file, FORMAT_PEM, NULL, e, "certificate file");
	if (x == NULL)
d170 1
a170 1
	fprintf(stdout,"%s: ",(file == NULL)?"stdin":file);
d172 3
a174 2
	csc = X509_STORE_CTX_new();
	if (csc == NULL)
d176 5
a180 2
		ERR_print_errors(bio_err);
		goto end;
d182 3
a184 2
	X509_STORE_set_flags(ctx, vflags);
	if(!X509_STORE_CTX_init(csc,ctx,x,uchain))
d186 2
d191 5
a195 4
	if(tchain) X509_STORE_CTX_trusted_stack(csc, tchain);
	if(purpose >= 0) X509_STORE_CTX_set_purpose(csc, purpose);
	i=X509_verify_cert(csc);
	X509_STORE_CTX_free(csc);
d207 1
d212 3
a214 47
static STACK_OF(X509) *load_untrusted(char *certfile)
{
	STACK_OF(X509_INFO) *sk=NULL;
	STACK_OF(X509) *stack=NULL, *ret=NULL;
	BIO *in=NULL;
	X509_INFO *xi;

	if(!(stack = sk_X509_new_null())) {
		BIO_printf(bio_err,"memory allocation failure\n");
		goto end;
	}

	if(!(in=BIO_new_file(certfile, "r"))) {
		BIO_printf(bio_err,"error opening the file, %s\n",certfile);
		goto end;
	}

	/* This loads from a file, a stack of x509/crl/pkey sets */
	if(!(sk=PEM_X509_INFO_read_bio(in,NULL,NULL,NULL))) {
		BIO_printf(bio_err,"error reading the file, %s\n",certfile);
		goto end;
	}

	/* scan over it and pull out the certs */
	while (sk_X509_INFO_num(sk))
		{
		xi=sk_X509_INFO_shift(sk);
		if (xi->x509 != NULL)
			{
			sk_X509_push(stack,xi->x509);
			xi->x509=NULL;
			}
		X509_INFO_free(xi);
		}
	if(!sk_X509_num(stack)) {
		BIO_printf(bio_err,"no certificates in file, %s\n",certfile);
		sk_X509_free(stack);
		goto end;
	}
	ret=stack;
end:
	BIO_free(in);
	sk_X509_INFO_free(sk);
	return(ret);
	}

static int MS_CALLBACK cb(int ok, X509_STORE_CTX *ctx)
d220 7
a226 1
		X509_NAME_oneline(
d228 7
a234 18
		printf("%s\n",buf);
		printf("error %d at %d depth lookup:%s\n",ctx->error,
			ctx->error_depth,
			X509_verify_cert_error_string(ctx->error));
		if (ctx->error == X509_V_ERR_CERT_HAS_EXPIRED) ok=1;
		/* since we are just checking the certificates, it is
		 * ok if they are self signed. But we should still warn
		 * the user.
 		 */
		if (ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) ok=1;
		/* Continue after extension errors too */
		if (ctx->error == X509_V_ERR_INVALID_CA) ok=1;
		if (ctx->error == X509_V_ERR_PATH_LENGTH_EXCEEDED) ok=1;
		if (ctx->error == X509_V_ERR_INVALID_PURPOSE) ok=1;
		if (ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT) ok=1;
		if (ctx->error == X509_V_ERR_CRL_HAS_EXPIRED) ok=1;
		if (ctx->error == X509_V_ERR_CRL_NOT_YET_VALID) ok=1;
		if (ctx->error == X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION) ok=1;
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a88 1
#ifndef OPENSSL_NO_ENGINE
a89 1
#endif
a144 1
#ifndef OPENSSL_NO_ENGINE
a149 1
#endif
a172 1
#ifndef OPENSSL_NO_ENGINE
a173 1
#endif
d222 1
a222 5
		BIO_printf(bio_err,"usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose purpose] [-crl_check]");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err," [-engine e]");
#endif
		BIO_printf(bio_err," cert1 cert2 ...\n");
d235 1
a235 1
	OPENSSL_EXIT(ret);
d333 1
a333 2
				X509_get_subject_name(ctx->current_cert),buf,
				sizeof buf);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a356 1
		if (ctx->error == X509_V_ERR_INVALID_NON_CA) ok=1;
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d82 1
a82 1
	int i,ret=1, badarg = 0;
a88 1
	X509_VERIFY_PARAM *vpm = NULL;
d124 1
a124 2
			else if (args_verify(&argv, &argc, &badarg, bio_err,
									&vpm))
d126 6
a131 1
				if (badarg)
d133 3
a135 1
				continue;
d156 8
a180 3
	if (vpm)
		X509_STORE_set1_param(cert_ctx, vpm);

a240 1
	if (vpm) X509_VERIFY_PARAM_free(vpm);
d342 1
a342 3
		if (ctx->current_cert)
			{
			X509_NAME_oneline(
d345 1
a345 2
			printf("%s\n",buf);
			}
a363 5

		if (ctx->error == X509_V_ERR_NO_EXPLICIT_POLICY)
			policies_print(NULL, ctx);
		return ok;

a364 2
	if ((ctx->error == X509_V_OK) && (ok == 2))
		policies_print(NULL, ctx);
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d269 1
a269 1
	if (i > 0)
d370 1
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d73 2
a74 3
static int check(X509_STORE *ctx, char *file,
		STACK_OF(X509) *uchain, STACK_OF(X509) *tchain,
		STACK_OF(X509_CRL) *crls, ENGINE *e);
d83 1
d85 1
a85 1
	char *untfile = NULL, *trustfile = NULL, *crlfile = NULL;
a86 1
	STACK_OF(X509_CRL) *crls = NULL;
d96 1
a96 1
	X509_STORE_set_verify_cb(cert_ctx,cb);
a141 5
			else if (strcmp(*argv,"-CRLfile") == 0)
				{
				if (argc-- < 1) goto end;
				crlfile= *(++argv);
				}
d195 4
a198 5
	if(untfile)
		{
		untrusted = load_certs(bio_err, untfile, FORMAT_PEM,
					NULL, e, "untrusted certificates");
		if(!untrusted)
d201 1
d203 4
a206 5
	if(trustfile)
		{
		trusted = load_certs(bio_err, trustfile, FORMAT_PEM,
					NULL, e, "trusted certificates");
		if(!trusted)
d209 1
d211 1
a211 9
	if(crlfile)
		{
		crls = load_crls(bio_err, crlfile, FORMAT_PEM,
					NULL, e, "other CRLs");
		if(!crls)
			goto end;
		}

	if (argc < 1) check(cert_ctx, NULL, untrusted, trusted, crls, e);
d214 1
a214 1
			check(cert_ctx,argv[i], untrusted, trusted, crls, e);
a234 1
	sk_X509_CRL_pop_free(crls, X509_CRL_free);
d239 1
a239 3
static int check(X509_STORE *ctx, char *file,
		STACK_OF(X509) *uchain, STACK_OF(X509) *tchain,
		STACK_OF(X509_CRL) *crls, ENGINE *e)
d263 1
a263 2
	if (crls)
		X509_STORE_CTX_set0_crls(csc, crls);
d281 46
d329 1
a329 2
	int cert_error = X509_STORE_CTX_get_error(ctx);
	X509 *current_cert = X509_STORE_CTX_get_current_cert(ctx);
d333 1
a333 13
		if (current_cert)
			{
			X509_NAME_print_ex_fp(stdout,
				X509_get_subject_name(current_cert),
				0, XN_FLAG_ONELINE);
			printf("\n");
			}
		printf("%serror %d at %d depth lookup:%s\n",
			X509_STORE_CTX_get0_parent_ctx(ctx) ? "[CRL path]" : "",
			cert_error,
			X509_STORE_CTX_get_error_depth(ctx),
			X509_verify_cert_error_string(cert_error));
		switch(cert_error)
d335 4
a338 20
			case X509_V_ERR_NO_EXPLICIT_POLICY:
				policies_print(NULL, ctx);
			case X509_V_ERR_CERT_HAS_EXPIRED:

			/* since we are just checking the certificates, it is
			 * ok if they are self signed. But we should still warn
			 * the user.
			 */

			case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:
			/* Continue after extension errors too */
			case X509_V_ERR_INVALID_CA:
			case X509_V_ERR_INVALID_NON_CA:
			case X509_V_ERR_PATH_LENGTH_EXCEEDED:
			case X509_V_ERR_INVALID_PURPOSE:
			case X509_V_ERR_CRL_HAS_EXPIRED:
			case X509_V_ERR_CRL_NOT_YET_VALID:
			case X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION:
			ok = 1;

d340 18
d359 2
d364 1
a364 1
	if (cert_error == X509_V_OK && ok == 2)
@


1.1.1.8
log
@import OpenSSL-1.0.1c
@
text
@a232 1
		BIO_printf(bio_err," [-attime timestamp]");
@


1.1.1.9
log
@Import OpenSSL 1.0.1g
@
text
@d225 1
a225 6
	ret = 0;
	if (argc < 1)
		{ 
		if (1 != check(cert_ctx, NULL, untrusted, trusted, crls, e))
			ret = -1;
		}
a226 1
		{
d228 2
a229 4
			if (1 != check(cert_ctx,argv[i], untrusted, trusted, crls, e))
				ret = -1;
		}

a237 1

d239 1
a239 2
		for(i = 0; i < X509_PURPOSE_get_count(); i++)
			{
d242 3
a244 4
			BIO_printf(bio_err, "\t%-10s\t%s\n",
				   X509_PURPOSE_get0_sname(ptmp),
				   X509_PURPOSE_get0_name(ptmp));
			}
d252 1
a252 1
	OPENSSL_EXIT(ret < 0 ? 2 : ret);
@


