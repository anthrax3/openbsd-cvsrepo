head	1.35;
access;
symbols
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	butholakala:1.11
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.3
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.35
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.34;
commitid	7A7DObXgY4Fni8xJ;

1.34
date	2014.07.25.06.05.31;	author doug;	state Exp;
branches;
next	1.33;
commitid	DnBLYuKKjvrWeH3R;

1.33
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	EB0l28piqIRSpBUh;

1.32
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.31;
commitid	0NuggCO2WJOZj8Kh;

1.31
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.30;
commitid	ivoCf1icUxmbGXSc;

1.30
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	mJUVYpkFBZ0Zv2bG;

1.29
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	2nvnQBrv22dLtvTt;

1.28
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.27;
commitid	IqYoI5gjfSomu7k2;

1.27
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.26;

1.26
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.24.12.39.02;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.09.38.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.15.17.22;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.17.04.13;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.20.37.11;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.14.19.56.05;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.56.55;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.08;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.18;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: dhparam.c,v 1.34 2014/07/25 06:05:31 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DH */

#ifndef OPENSSL_NO_DH

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/dh.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

#include <openssl/dsa.h>

#define DEFBITS	512

/* -inform arg	- input format - default PEM (DER or PEM)
 * -outform arg - output format - default PEM
 * -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 * -dsaparam  - read or generate DSA parameters, convert to DH
 * -check	- check the parameters are ok
 * -noout
 * -text
 * -C
 */

static int dh_cb(int p, int n, BN_GENCB * cb);

int dhparam_main(int, char **);

int
dhparam_main(int argc, char **argv)
{
	DH *dh = NULL;
	int i, badops = 0, text = 0;
	int dsaparam = 0;
	BIO *in = NULL, *out = NULL;
	int informat, outformat, check = 0, noout = 0, C = 0, ret = 1;
	char *infile, *outfile, *prog;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	int num = 0, g = 0;

	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-check") == 0)
			check = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-dsaparam") == 0)
			dsaparam = 1;
		else if (strcmp(*argv, "-C") == 0)
			C = 1;
		else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-2") == 0)
			g = 2;
		else if (strcmp(*argv, "-5") == 0)
			g = 5;
		else if (((sscanf(*argv, "%d", &num) == 0) || (num <= 0)))
			goto bad;
		argv++;
		argc--;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] [numbits]\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg   input format - one of DER PEM\n");
		BIO_printf(bio_err, " -outform arg  output format - one of DER PEM\n");
		BIO_printf(bio_err, " -in arg       input file\n");
		BIO_printf(bio_err, " -out arg      output file\n");
		BIO_printf(bio_err, " -dsaparam     read or generate DSA parameters, convert to DH\n");
		BIO_printf(bio_err, " -check        check the DH parameters\n");
		BIO_printf(bio_err, " -text         print a text form of the DH parameters\n");
		BIO_printf(bio_err, " -C            Output C code\n");
		BIO_printf(bio_err, " -2            generate parameters using  2 as the generator value\n");
		BIO_printf(bio_err, " -5            generate parameters using  5 as the generator value\n");
		BIO_printf(bio_err, " numbits       number of bits in to generate (default 512)\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e     use engine e, possibly a hardware device.\n");
#endif
		BIO_printf(bio_err, " -noout        no output\n");
		goto end;
	}
	ERR_load_crypto_strings();

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	if (g && !num)
		num = DEFBITS;

	if (dsaparam) {
		if (g) {
			BIO_printf(bio_err, "generator may not be chosen for DSA parameters\n");
			goto end;
		}
	} else
	{
		/* DH parameters */
		if (num && !g)
			g = 2;
	}

	if (num) {

		BN_GENCB cb;
		BN_GENCB_set(&cb, dh_cb, bio_err);
		if (dsaparam) {
			DSA *dsa = DSA_new();

			BIO_printf(bio_err, "Generating DSA parameters, %d bit long prime\n", num);
			if (!dsa || !DSA_generate_parameters_ex(dsa, num,
				NULL, 0, NULL, NULL, &cb)) {
				if (dsa)
					DSA_free(dsa);
				ERR_print_errors(bio_err);
				goto end;
			}
			dh = DSA_dup_DH(dsa);
			DSA_free(dsa);
			if (dh == NULL) {
				ERR_print_errors(bio_err);
				goto end;
			}
		} else
		{
			dh = DH_new();
			BIO_printf(bio_err, "Generating DH parameters, %d bit long safe prime, generator %d\n", num, g);
			BIO_printf(bio_err, "This is going to take a long time\n");
			if (!dh || !DH_generate_parameters_ex(dh, num, g, &cb)) {
				ERR_print_errors(bio_err);
				goto end;
			}
		}
	} else {

		in = BIO_new(BIO_s_file());
		if (in == NULL) {
			ERR_print_errors(bio_err);
			goto end;
		}
		if (infile == NULL)
			BIO_set_fp(in, stdin, BIO_NOCLOSE);
		else {
			if (BIO_read_filename(in, infile) <= 0) {
				perror(infile);
				goto end;
			}
		}

		if (informat != FORMAT_ASN1 && informat != FORMAT_PEM) {
			BIO_printf(bio_err, "bad input format specified\n");
			goto end;
		}
		if (dsaparam) {
			DSA *dsa;

			if (informat == FORMAT_ASN1)
				dsa = d2i_DSAparams_bio(in, NULL);
			else	/* informat == FORMAT_PEM */
				dsa = PEM_read_bio_DSAparams(in, NULL, NULL, NULL);

			if (dsa == NULL) {
				BIO_printf(bio_err, "unable to load DSA parameters\n");
				ERR_print_errors(bio_err);
				goto end;
			}
			dh = DSA_dup_DH(dsa);
			DSA_free(dsa);
			if (dh == NULL) {
				ERR_print_errors(bio_err);
				goto end;
			}
		} else
		{
			if (informat == FORMAT_ASN1)
				dh = d2i_DHparams_bio(in, NULL);
			else	/* informat == FORMAT_PEM */
				dh = PEM_read_bio_DHparams(in, NULL, NULL, NULL);

			if (dh == NULL) {
				BIO_printf(bio_err, "unable to load DH parameters\n");
				ERR_print_errors(bio_err);
				goto end;
			}
		}

		/* dh != NULL */
	}

	out = BIO_new(BIO_s_file());
	if (out == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}


	if (text) {
		DHparams_print(out, dh);
	}
	if (check) {
		if (!DH_check(dh, &i)) {
			ERR_print_errors(bio_err);
			goto end;
		}
		if (i & DH_CHECK_P_NOT_PRIME)
			printf("p value is not prime\n");
		if (i & DH_CHECK_P_NOT_SAFE_PRIME)
			printf("p value is not a safe prime\n");
		if (i & DH_UNABLE_TO_CHECK_GENERATOR)
			printf("unable to check the generator value\n");
		if (i & DH_NOT_SUITABLE_GENERATOR)
			printf("the g value is not a generator\n");
		if (i == 0)
			printf("DH parameters appear to be ok.\n");
	}
	if (C) {
		unsigned char *data;
		int len, l, bits;

		len = BN_num_bytes(dh->p);
		bits = BN_num_bits(dh->p);
		data = malloc(len);
		if (data == NULL) {
			perror("malloc");
			goto end;
		}
		printf("#ifndef HEADER_DH_H\n"
		    "#include <openssl/dh.h>\n"
		    "#endif\n");
		printf("DH *get_dh%d()\n\t{\n", bits);

		l = BN_bn2bin(dh->p, data);
		printf("\tstatic unsigned char dh%d_p[] = {", bits);
		for (i = 0; i < l; i++) {
			if ((i % 12) == 0)
				printf("\n\t\t");
			printf("0x%02X, ", data[i]);
		}
		printf("\n\t\t};\n");

		l = BN_bn2bin(dh->g, data);
		printf("\tstatic unsigned char dh%d_g[] = {", bits);
		for (i = 0; i < l; i++) {
			if ((i % 12) == 0)
				printf("\n\t\t");
			printf("0x%02X, ", data[i]);
		}
		printf("\n\t\t};\n");

		printf("\tDH *dh;\n\n");
		printf("\tif ((dh = DH_new()) == NULL) return(NULL);\n");
		printf("\tdh->p = BN_bin2bn(dh%d_p, sizeof(dh%d_p), NULL);\n",
		    bits, bits);
		printf("\tdh->g = BN_bin2bn(dh%d_g, sizeof(dh%d_g), NULL);\n",
		    bits, bits);
		printf("\tif ((dh->p == NULL) || (dh->g == NULL))\n");
		printf("\t\t{ DH_free(dh); return(NULL); }\n");
		if (dh->length)
			printf("\tdh->length = %ld;\n", dh->length);
		printf("\treturn(dh);\n\t}\n");
		free(data);
	}
	if (!noout) {
		if (outformat == FORMAT_ASN1)
			i = i2d_DHparams_bio(out, dh);
		else if (outformat == FORMAT_PEM)
			i = PEM_write_bio_DHparams(out, dh);
		else {
			BIO_printf(bio_err, "bad output format specified for outfile\n");
			goto end;
		}
		if (!i) {
			BIO_printf(bio_err, "unable to write DH parameters\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	ret = 0;

end:
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (dh != NULL)
		DH_free(dh);

	return (ret);
}

/* dh_cb is identical to dsa_cb in apps/dsaparam.c */
static int
dh_cb(int p, int n, BN_GENCB * cb)
{
	char c = '*';

	if (p == 0)
		c = '.';
	if (p == 1)
		c = '+';
	if (p == 2)
		c = '*';
	if (p == 3)
		c = '\n';
	BIO_write(cb->arg, &c, 1);
	(void) BIO_flush(cb->arg);
	return 1;
}

#endif
@


1.34
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dhparam.c,v 1.33 2014/07/14 00:35:10 deraadt Exp $ */
@


1.33
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: dhparam.c,v 1.32 2014/07/12 17:54:31 jsing Exp $ */
d444 1
a444 2
	if (in != NULL)
		BIO_free(in);
@


1.32
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dhparam.c,v 1.31 2014/07/09 21:02:35 tedu Exp $ */
d450 1
a450 1
	
@


1.31
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: dhparam.c,v 1.30 2014/06/12 15:49:27 deraadt Exp $ */
a161 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.30
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a129 1
#ifndef OPENSSL_NO_DSA
a130 1
#endif
a153 1
#ifndef OPENSSL_NO_DSA
a154 1
#endif
a202 1
#ifndef OPENSSL_NO_DSA
a204 1
#endif
a226 1
#ifndef OPENSSL_NO_DSA
a227 1
#endif
a248 1
#ifndef OPENSSL_NO_DSA
a254 1
#endif
a264 1
#ifndef OPENSSL_NO_DSA
a282 1
#endif
a311 1
#ifndef OPENSSL_NO_DSA
a331 1
#endif
@


1.29
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* apps/dhparam.c */
@


1.28
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d402 1
a402 1
		data = (unsigned char *) malloc(len);
@


1.27
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@a161 1
	char *inrand = NULL;
d219 1
a219 5
		else if (strcmp(*argv, "-rand") == 0) {
			if (--argc < 1)
				goto bad;
			inrand = *(++argv);
		} else if (((sscanf(*argv, "%d", &num) == 0) || (num <= 0)))
a244 3
		BIO_printf(bio_err, " -rand file:file:...\n");
		BIO_printf(bio_err, "               - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err, "               the random number generator\n");
@


1.26
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a167 2
	signal(SIGPIPE, SIG_IGN);

@


1.25
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d112 2
a113 1
#include <openssl/opensslconf.h>/* for OPENSSL_NO_DH */
d115 1
d118 1
d120 1
a120 1
#include <string.h>
d122 1
d124 1
a125 1
#include <openssl/bn.h>
d127 1
a128 1
#include <openssl/pem.h>
a132 1

@


1.24
log
@unifdef -U LINT
@
text
@a166 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.23
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a497 3
#ifdef LINT
	p = n;
#endif
@


1.22
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d165 1
a165 1
	apps_startup();
d478 1
a478 1
	apps_shutdown();
@


1.21
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a503 6
#else				/* !OPENSSL_NO_DH */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.20
log
@simplify file:file:... stuff
@
text
@a285 7
		if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL) {
			BIO_printf(bio_err, "warning, not much extra random data, consider using the -rand option\n");
		}
		if (inrand != NULL)
			BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
			    app_RAND_load_files(inrand));

a314 2

		app_RAND_write_file(NULL, bio_err);
@


1.19
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d253 1
a253 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", ':', ':');
@


1.18
log
@KaboomNF
@
text
@a129 2
#undef PROG
#define PROG	dhparam_main
d146 1
a146 1
int MAIN(int, char **);
d149 1
a149 1
MAIN(int argc, char **argv)
@


1.17
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d112 1
a112 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DH */
d146 1
a146 1
static int dh_cb(int p, int n, BN_GENCB *cb);
d171 1
a171 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d196 1
a196 1
			infile= *(++argv);
d200 1
a200 1
			outfile= *(++argv);
d206 1
a206 1
			engine= *(++argv);
d228 2
a229 3
			inrand= *(++argv);
		}
		else if (((sscanf(*argv, "%d", &num) == 0) || (num <= 0)))
a260 1

d301 1
a301 1
			    NULL, 0, NULL, NULL, &cb)) {
a306 1

a345 1

d352 1
a352 1
			else /* informat == FORMAT_PEM */
a359 1

d371 1
a371 1
			else /* informat == FORMAT_PEM */
a401 1

d424 1
a424 1
		data = (unsigned char *)malloc(len);
a464 1

d470 1
a470 1
		else	{
d490 1
a490 1
	return(ret);
d495 1
a495 1
dh_cb(int p, int n, BN_GENCB *cb)
d508 1
a508 1
	(void)BIO_flush(cb->arg);
d515 1
a515 1
#else /* !OPENSSL_NO_DH */
d517 1
a517 1
# if PEDANTIC
d519 1
a519 1
# endif
@


1.16
log
@More KNF.
@
text
@d256 1
a256 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d497 1
a497 1
	OPENSSL_EXIT(ret);
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d303 4
a306 3
				    NULL, 0, NULL, NULL, &cb)) {
				if (dsa) DSA_free(dsa);
					ERR_print_errors(bio_err);
@


1.14
log
@Initial KNF.
@
text
@d429 1
a429 1
		data = (unsigned char *)OPENSSL_malloc(len);
d431 1
a431 1
			perror("OPENSSL_malloc");
d468 1
a468 1
		OPENSSL_free(data);
@


1.13
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d150 5
a154 4
int MAIN(int argc, char **argv)
	{
	DH *dh=NULL;
	int i,badops=0,text=0;
d156 1
a156 1
	int dsaparam=0;
d158 4
a161 4
	BIO *in=NULL,*out=NULL;
	int informat,outformat,check=0,noout=0,C=0,ret=1;
	char *infile,*outfile,*prog;
	char *inrand=NULL;
d163 1
a163 1
	char *engine=NULL;
d170 2
a171 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d176 4
a179 4
	infile=NULL;
	outfile=NULL;
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d181 1
a181 1
	prog=argv[0];
d184 12
a195 15
	while (argc >= 1)
		{
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d197 3
a199 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d201 1
a201 1
			}
d203 3
a205 3
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
d207 1
a207 1
			}
d209 4
a212 4
		else if (strcmp(*argv,"-check") == 0)
			check=1;
		else if (strcmp(*argv,"-text") == 0)
			text=1;
d214 2
a215 2
		else if (strcmp(*argv,"-dsaparam") == 0)
			dsaparam=1;
d217 11
a227 11
		else if (strcmp(*argv,"-C") == 0)
			C=1;
		else if (strcmp(*argv,"-noout") == 0)
			noout=1;
		else if (strcmp(*argv,"-2") == 0)
			g=2;
		else if (strcmp(*argv,"-5") == 0)
			g=5;
		else if (strcmp(*argv,"-rand") == 0)
			{
			if (--argc < 1) goto bad;
d229 2
a230 2
			}
		else if (((sscanf(*argv,"%d",&num) == 0) || (num <= 0)))
d234 1
a234 1
		}
d236 1
a236 2
	if (badops)
		{
d238 6
a243 6
		BIO_printf(bio_err,"%s [options] [numbits]\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -inform arg   input format - one of DER PEM\n");
		BIO_printf(bio_err," -outform arg  output format - one of DER PEM\n");
		BIO_printf(bio_err," -in arg       input file\n");
		BIO_printf(bio_err," -out arg      output file\n");
d245 1
a245 1
		BIO_printf(bio_err," -dsaparam     read or generate DSA parameters, convert to DH\n");
d247 6
a252 6
		BIO_printf(bio_err," -check        check the DH parameters\n");
		BIO_printf(bio_err," -text         print a text form of the DH parameters\n");
		BIO_printf(bio_err," -C            Output C code\n");
		BIO_printf(bio_err," -2            generate parameters using  2 as the generator value\n");
		BIO_printf(bio_err," -5            generate parameters using  5 as the generator value\n");
		BIO_printf(bio_err," numbits       number of bits in to generate (default 512)\n");
d254 1
a254 1
		BIO_printf(bio_err," -engine e     use engine e, possibly a hardware device.\n");
d256 4
a259 4
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err,"               - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"               the random number generator\n");
		BIO_printf(bio_err," -noout        no output\n");
d261 1
a261 1
		}
d266 1
a266 1
        setup_engine(bio_err, engine, 0);
d273 2
a274 4
	if (dsaparam)
		{
		if (g)
			{
a276 1
			}
d278 1
a278 1
	else
d280 1
a280 1
		{
d284 1
a284 1
		}
d286 1
a286 1
	if(num) {
d290 3
a292 4
		if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
			{
			BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
			}
d294 2
a295 2
			BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
				app_RAND_load_files(inrand));
d298 1
a298 2
		if (dsaparam)
			{
d300 6
a305 7
			
			BIO_printf(bio_err,"Generating DSA parameters, %d bit long prime\n",num);
			if(!dsa || !DSA_generate_parameters_ex(dsa, num,
						NULL, 0, NULL, NULL, &cb))
				{
				if(dsa) DSA_free(dsa);
				ERR_print_errors(bio_err);
d307 1
a307 1
				}
d311 1
a311 2
			if (dh == NULL)
				{
a313 1
				}
d315 1
a315 1
		else
d317 1
a317 1
			{
d319 3
a321 4
			BIO_printf(bio_err,"Generating DH parameters, %d bit long safe prime, generator %d\n",num,g);
			BIO_printf(bio_err,"This is going to take a long time\n");
			if(!dh || !DH_generate_parameters_ex(dh, num, g, &cb))
				{
a323 1
				}
d325 1
d330 2
a331 3
		in=BIO_new(BIO_s_file());
		if (in == NULL)
			{
d334 1
a334 1
			}
d336 3
a338 5
			BIO_set_fp(in,stdin,BIO_NOCLOSE);
		else
			{
			if (BIO_read_filename(in,infile) <= 0)
				{
a340 1
				}
d342 1
d344 2
a345 3
		if	(informat != FORMAT_ASN1 && informat != FORMAT_PEM)
			{
			BIO_printf(bio_err,"bad input format specified\n");
d347 1
a347 1
			}
d350 1
a350 2
		if (dsaparam)
			{
d352 1
a352 1
			
d354 1
a354 1
				dsa=d2i_DSAparams_bio(in,NULL);
d356 4
a359 5
				dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL);
			
			if (dsa == NULL)
				{
				BIO_printf(bio_err,"unable to load DSA parameters\n");
d362 2
a363 2
				}
			
d366 1
a366 2
			if (dh == NULL)
				{
a368 1
				}
d370 1
a370 1
		else
d372 1
a372 1
			{
d374 1
a374 1
				dh=d2i_DHparams_bio(in,NULL);
d376 4
a379 5
				dh=PEM_read_bio_DHparams(in,NULL,NULL,NULL);
			
			if (dh == NULL)
				{
				BIO_printf(bio_err,"unable to load DH parameters\n");
a381 1
				}
d383 2
a384 1
		
d387 3
a389 4
	
	out=BIO_new(BIO_s_file());
	if (out == NULL)
		{
d392 5
a396 9
		}
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a398 1
			}
d400 2
d403 3
d407 2
a408 9
	if (text)
		{
		DHparams_print(out,dh);
		}
	
	if (check)
		{
		if (!DH_check(dh,&i))
			{
d411 1
a411 1
			}
d422 2
a423 3
		}
	if (C)
		{
d425 1
a425 1
		int len,l,bits;
d427 4
a430 5
		len=BN_num_bytes(dh->p);
		bits=BN_num_bits(dh->p);
		data=(unsigned char *)OPENSSL_malloc(len);
		if (data == NULL)
			{
d433 1
a433 1
			}
d435 11
a445 11
		       "#include <openssl/dh.h>\n"
		       "#endif\n");
		printf("DH *get_dh%d()\n\t{\n",bits);

		l=BN_bn2bin(dh->p,data);
		printf("\tstatic unsigned char dh%d_p[]={",bits);
		for (i=0; i<l; i++)
			{
			if ((i%12) == 0) printf("\n\t\t");
			printf("0x%02X,",data[i]);
			}
d448 7
a454 7
		l=BN_bn2bin(dh->g,data);
		printf("\tstatic unsigned char dh%d_g[]={",bits);
		for (i=0; i<l; i++)
			{
			if ((i%12) == 0) printf("\n\t\t");
			printf("0x%02X,",data[i]);
			}
d458 5
a462 5
		printf("\tif ((dh=DH_new()) == NULL) return(NULL);\n");
		printf("\tdh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p),NULL);\n",
			bits,bits);
		printf("\tdh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g),NULL);\n",
			bits,bits);
d469 1
a469 1
		}
d471 3
a473 5

	if (!noout)
		{
		if 	(outformat == FORMAT_ASN1)
			i=i2d_DHparams_bio(out,dh);
d475 1
a475 1
			i=PEM_write_bio_DHparams(out,dh);
d477 1
a477 1
			BIO_printf(bio_err,"bad output format specified for outfile\n");
d479 3
a481 4
			}
		if (!i)
			{
			BIO_printf(bio_err,"unable to write DH parameters\n");
a483 1
			}
d485 3
a487 1
	ret=0;
d489 6
a494 3
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (dh != NULL) DH_free(dh);
d497 1
a497 1
	}
d500 14
a513 9
static int dh_cb(int p, int n, BN_GENCB *cb)
	{
	char c='*';

	if (p == 0) c='.';
	if (p == 1) c='+';
	if (p == 2) c='*';
	if (p == 3) c='\n';
	BIO_write(cb->arg,&c,1);
d516 1
a516 1
	p=n;
d519 1
a519 1
	}
d524 1
a524 1
static void *dummy=&dummy;
@


1.12
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@a418 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.11
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d146 1
a146 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb);
d537 1
a537 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb)
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@a334 1
				if(dh) DH_free(dh);
@


1.9
log
@resolve conflicts, fix local changes
@
text
@a151 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d270 1
a270 1
        e = setup_engine(bio_err, engine, 0);
@


1.8
log
@resolve conflicts
@
text
@d557 6
@


1.7
log
@resolve conflicts
@
text
@d508 1
a508 1
			printf("\tdh->length = %d;\n", dh->length);
@


1.6
log
@Fix printf format string. ok markus@@
@
text
@d112 1
d146 1
a146 1
static void MS_CALLBACK dh_cb(int p, int n, void *arg);
d298 2
d311 1
a311 1
			DSA *dsa;
d314 2
a315 2
			dsa = DSA_generate_parameters(num, NULL, 0, NULL, NULL, dh_cb, bio_err);
			if (dsa == NULL)
d317 1
d333 1
d336 1
a336 3
			dh=DH_generate_parameters(num,g,dh_cb,bio_err);
			
			if (dh == NULL)
d338 1
d541 1
a541 1
static void MS_CALLBACK dh_cb(int p, int n, void *arg)
d549 2
a550 2
	BIO_write((BIO *)arg,&c,1);
	(void)BIO_flush((BIO *)arg);
d554 1
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d504 1
a504 1
			printf("\tdh->length = %ld;\n", dh->length);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d151 1
d153 1
d162 4
a165 1
	char *inrand=NULL,*engine=NULL;
d207 1
d213 1
d259 1
d261 1
d271 1
d273 1
d533 1
a533 1
	EXIT(ret);
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@d112 1
a112 1
#ifndef NO_DH
a123 1
#include <openssl/engine.h>
d125 1
a125 1
#ifndef NO_DSA
d154 1
a154 1
#ifndef NO_DSA
d169 3
d211 1
a211 1
#ifndef NO_DSA
d243 1
a243 1
#ifndef NO_DSA
d262 1
a262 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d267 1
a267 1
#ifndef NO_DSA
d294 1
a294 1
#ifndef NO_DSA
d355 1
a355 1
#ifndef NO_DSA
d408 1
a408 1
#ifdef VMS
d493 1
a493 1
			printf("\tdh->length = %d;\n", dh->length);
d521 1
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d124 1
d152 1
d161 1
a161 1
	char *inrand=NULL;
d200 5
d250 1
d260 18
d314 1
a314 1
	        dsa = DSA_generate_parameters(num, NULL, 0, NULL, NULL, dh_cb, bio_err);
d420 1
d422 7
d469 1
a469 1
		data=(unsigned char *)Malloc(len);
d472 1
a472 1
			perror("Malloc");
d509 1
a509 1
		Free(data);
d533 1
a533 1
	if (out != NULL) BIO_free(out);
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d58 53
d125 4
d138 1
d153 3
d202 4
d234 3
d243 1
a243 1
		BIO_printf(bio_err," -rand file:file:...\n");
d252 19
a270 2
	if(g && !num) num = DEFBITS;
	else if(num && !g) g = 2;
d282 4
a285 3
		BIO_printf(bio_err,"Generating DH parameters, %d bit long strong prime, generator of %d\n",num,g);
		BIO_printf(bio_err,"This is going to take a long time\n");
		dh=DH_generate_parameters(num,g,dh_cb,bio_err);
d287 29
a315 1
		if (dh == NULL) goto end;
d337 1
a337 5
		if	(informat == FORMAT_ASN1)
			dh=d2i_DHparams_bio(in,NULL);
		else if (informat == FORMAT_PEM)
			dh=PEM_read_bio_DHparams(in,NULL,NULL,NULL);
		else
d342 28
a369 1
		if (dh == NULL)
d371 11
a381 3
			BIO_printf(bio_err,"unable to load DH parameters\n");
			ERR_print_errors(bio_err);
			goto end;
d383 2
a384 1

d386 1
a386 1

a403 1
	
d419 2
a420 2
		if (i & DH_CHECK_P_NOT_STRONG_PRIME)
			printf("p value is not a strong prime\n");
d441 5
d447 1
a447 1
		printf("static unsigned char dh%d_p[]={",bits);
d450 1
a450 1
			if ((i%12) == 0) printf("\n\t");
d453 1
a453 1
		printf("\n\t};\n");
d456 1
a456 1
		printf("static unsigned char dh%d_g[]={",bits);
d459 1
a459 1
			if ((i%12) == 0) printf("\n\t");
d462 1
a462 1
		printf("\n\t};\n\n");
a463 1
		printf("DH *get_dh%d()\n\t{\n",bits);
d471 3
a473 1
		printf("\t\treturn(NULL);\n");
d504 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a57 53
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
d59 1
a59 1
#ifndef OPENSSL_NO_DH
a71 4
#ifndef OPENSSL_NO_DSA
#include <openssl/dsa.h>
#endif

a80 1
 * -dsaparam  - read or generate DSA parameters, convert to DH
a92 1
	ENGINE *e = NULL;
a94 3
#ifndef OPENSSL_NO_DSA
	int dsaparam=0;
#endif
d98 1
a98 1
	char *inrand=NULL,*engine=NULL;
a106 3
	if (!load_config(bio_err, NULL))
		goto end;

a136 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
a140 4
#ifndef OPENSSL_NO_DSA
		else if (strcmp(*argv,"-dsaparam") == 0)
			dsaparam=1;
#endif
a168 3
#ifndef OPENSSL_NO_DSA
		BIO_printf(bio_err," -dsaparam     read or generate DSA parameters, convert to DH\n");
#endif
d175 1
a175 2
		BIO_printf(bio_err," -engine e     use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d184 2
a185 21
        e = setup_engine(bio_err, engine, 0);

	if (g && !num)
		num = DEFBITS;

#ifndef OPENSSL_NO_DSA
	if (dsaparam)
		{
		if (g)
			{
			BIO_printf(bio_err, "generator may not be chosen for DSA parameters\n");
			goto end;
			}
		}
	else
#endif
		{
		/* DH parameters */
		if (num && !g)
			g = 2;
		}
d197 3
a199 27
#ifndef OPENSSL_NO_DSA
		if (dsaparam)
			{
			DSA *dsa;
			
			BIO_printf(bio_err,"Generating DSA parameters, %d bit long prime\n",num);
			dsa = DSA_generate_parameters(num, NULL, 0, NULL, NULL, dh_cb, bio_err);
			if (dsa == NULL)
				{
				ERR_print_errors(bio_err);
				goto end;
				}

			dh = DSA_dup_DH(dsa);
			DSA_free(dsa);
			if (dh == NULL)
				{
				ERR_print_errors(bio_err);
				goto end;
				}
			}
		else
#endif
			{
			BIO_printf(bio_err,"Generating DH parameters, %d bit long safe prime, generator %d\n",num,g);
			BIO_printf(bio_err,"This is going to take a long time\n");
			dh=DH_generate_parameters(num,g,dh_cb,bio_err);
d201 1
a201 6
			if (dh == NULL)
				{
				ERR_print_errors(bio_err);
				goto end;
				}
			}
d223 5
a227 1
		if	(informat != FORMAT_ASN1 && informat != FORMAT_PEM)
d232 1
a232 3

#ifndef OPENSSL_NO_DSA
		if (dsaparam)
d234 3
a236 21
			DSA *dsa;
			
			if (informat == FORMAT_ASN1)
				dsa=d2i_DSAparams_bio(in,NULL);
			else /* informat == FORMAT_PEM */
				dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL);
			
			if (dsa == NULL)
				{
				BIO_printf(bio_err,"unable to load DSA parameters\n");
				ERR_print_errors(bio_err);
				goto end;
				}
			
			dh = DSA_dup_DH(dsa);
			DSA_free(dsa);
			if (dh == NULL)
				{
				ERR_print_errors(bio_err);
				goto end;
				}
d238 1
a238 17
		else
#endif
			{
			if (informat == FORMAT_ASN1)
				dh=d2i_DHparams_bio(in,NULL);
			else /* informat == FORMAT_PEM */
				dh=PEM_read_bio_DHparams(in,NULL,NULL,NULL);
			
			if (dh == NULL)
				{
				BIO_printf(bio_err,"unable to load DH parameters\n");
				ERR_print_errors(bio_err);
				goto end;
				}
			}
		
		/* dh != NULL */
d240 1
a240 1
	
a247 1
		{
a248 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d258 1
d274 2
a275 2
		if (i & DH_CHECK_P_NOT_SAFE_PRIME)
			printf("p value is not a safe prime\n");
d290 1
a290 1
		data=(unsigned char *)OPENSSL_malloc(len);
d293 1
a293 1
			perror("OPENSSL_malloc");
a295 5
		printf("#ifndef HEADER_DH_H\n"
		       "#include <openssl/dh.h>\n"
		       "#endif\n");
		printf("DH *get_dh%d()\n\t{\n",bits);

d297 1
a297 1
		printf("\tstatic unsigned char dh%d_p[]={",bits);
d300 1
a300 1
			if ((i%12) == 0) printf("\n\t\t");
d303 1
a303 1
		printf("\n\t\t};\n");
d306 1
a306 1
		printf("\tstatic unsigned char dh%d_g[]={",bits);
d309 1
a309 1
			if ((i%12) == 0) printf("\n\t\t");
d312 1
a312 1
		printf("\n\t\t};\n");
d314 1
d322 1
a322 3
		printf("\t\t{ DH_free(dh); return(NULL); }\n");
		if (dh->length)
			printf("\tdh->length = %ld;\n", dh->length);
d324 1
a324 1
		OPENSSL_free(data);
d348 1
a348 1
	if (out != NULL) BIO_free_all(out);
a349 1
	apps_shutdown();
a352 1
/* dh_cb is identical to dsa_cb in apps/dsaparam.c */
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a150 1
#ifndef OPENSSL_NO_ENGINE
a151 1
#endif
d160 1
a160 4
	char *inrand=NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine=NULL;
#endif
a201 1
#ifndef OPENSSL_NO_ENGINE
a206 1
#endif
a251 1
#ifndef OPENSSL_NO_ENGINE
a252 1
#endif
a261 1
#ifndef OPENSSL_NO_ENGINE
a262 1
#endif
d522 1
a522 1
	OPENSSL_EXIT(ret);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@a111 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DH */
d145 1
a145 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb);
a296 2
		BN_GENCB cb;
		BN_GENCB_set(&cb, dh_cb, bio_err);
d308 1
a308 1
			DSA *dsa = DSA_new();
d311 2
a312 2
			if(!dsa || !DSA_generate_parameters_ex(dsa, num,
						NULL, 0, NULL, NULL, &cb))
a313 1
				if(dsa) DSA_free(dsa);
a328 1
			dh = DH_new();
d331 3
a333 1
			if(!dh || !DH_generate_parameters_ex(dh, num, g, &cb))
a334 1
				if(dh) DH_free(dh);
d537 1
a537 1
static int MS_CALLBACK dh_cb(int p, int n, BN_GENCB *cb)
d545 2
a546 2
	BIO_write(cb->arg,&c,1);
	(void)BIO_flush(cb->arg);
a549 1
	return 1;
@


1.1.1.4
log
@import OpenSSL-1.0.0a
@
text
@a556 6
#else /* !OPENSSL_NO_DH */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d152 3
d273 1
a273 1
        setup_engine(bio_err, engine, 0);
@


1.1.1.6
log
@Import OpenSSL 1.0.1g
@
text
@d335 1
@


