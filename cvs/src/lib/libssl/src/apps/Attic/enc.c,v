head	1.40;
access;
symbols
	OPENBSD_5_6:1.39.0.4
	OPENBSD_5_6_BASE:1.39
	butholakala:1.17
	openssl_1_0_1_g:1.1.1.12
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	openssl_1_0_1_c:1.1.1.12
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	openssl_1_0_0_f:1.1.1.11
	openssl_1_0_0_e:1.1.1.11
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	openssh_1_0_0_a:1.1.1.10
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	openssl_0_9_8_k:1.1.1.9
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	openssl_0_9_8_j:1.1.1.8
	openssl_0_9_8_h:1.1.1.7
	pre_openssl_0_9_8h:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	openssl_0_9_7j:1.1.1.6
	openssl:1.1.1
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENSSL_0_9_7G:1.1.1.6
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENSSL_0_9_7D:1.1.1.5
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENSSL_0_9_7C:1.1.1.4
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENSSL_0_9_7B:1.1.1.4
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.3
	OPENSSL_0_9_7_BETA3:1.1.1.3
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.40
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.39;
commitid	7A7DObXgY4Fni8xJ;

1.39
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.38;
commitid	DnBLYuKKjvrWeH3R;

1.38
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	EB0l28piqIRSpBUh;

1.37
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.36;
commitid	0NuggCO2WJOZj8Kh;

1.36
date	2014.06.29.18.22.10;	author logan;	state Exp;
branches;
next	1.35;
commitid	TpTDtxKVRTUEoRFX;

1.35
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	mJUVYpkFBZ0Zv2bG;

1.34
date	2014.06.07.14.41.56;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	2nvnQBrv22dLtvTt;

1.33
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.32;

1.32
date	2014.05.19.12.18.23;	author jsing;	state Exp;
branches;
next	1.31;

1.31
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.30;

1.30
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.29;

1.29
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.28;

1.28
date	2014.05.03.16.03.54;	author jsing;	state Exp;
branches;
next	1.27;

1.27
date	2014.05.02.17.06.46;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.19.16.18.22;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.19.11.46.39;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.15.16.21.04;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.13.21.25.12;	author djm;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.29.05.39.15;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.04.06.55.14;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.10.16.31.53;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.01.19.51.16;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.55;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.09.05.22.34.22;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.05.11.21.34.19;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.04.07.20.41.28;	author markus;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.04.29.05.36.59;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.04.06.06.30.00;	author djm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2012.10.13.21.23.32;	author djm;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: enc.c,v 1.39 2014/07/25 06:05:32 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/comp.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
#include <openssl/x509.h>

int set_hex(char *in, unsigned char *out, int size);

#define SIZE	(512)
#define BSIZE	(8*1024)
#define	PROG	enc_main

static void
show_ciphers(const OBJ_NAME * name, void *bio_)
{
	BIO *bio = bio_;
	static int n;

	if (!islower((unsigned char) *name->name))
		return;

	BIO_printf(bio, "-%-25s", name->name);
	if (++n == 3) {
		BIO_printf(bio, "\n");
		n = 0;
	} else
		BIO_printf(bio, " ");
}

int enc_main(int, char **);

int
enc_main(int argc, char **argv)
{
	static const char magic[] = "Salted__";
	char mbuf[sizeof magic - 1];
	char *strbuf = NULL;
	unsigned char *buff = NULL, *bufsize = NULL;
	int bsize = BSIZE, verbose = 0;
	int ret = 1, inl;
	int nopad = 0;
	unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
	unsigned char salt[PKCS5_SALT_LEN];
	char *str = NULL, *passarg = NULL, *pass = NULL;
	char *hkey = NULL, *hiv = NULL, *hsalt = NULL;
	char *md = NULL;
	int enc = 1, printkey = 0, i, base64 = 0;
#ifdef ZLIB
	int do_zlib = 0;
	BIO *bzl = NULL;
#endif
	int debug = 0, olb64 = 0, nosalt = 0;
	const EVP_CIPHER *cipher = NULL, *c;
	EVP_CIPHER_CTX *ctx = NULL;
	char *inf = NULL, *outf = NULL;
	BIO *in = NULL, *out = NULL, *b64 = NULL, *benc = NULL, *rbio = NULL,
	*wbio = NULL;
#define PROG_NAME_SIZE  39
	char pname[PROG_NAME_SIZE + 1];
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	const EVP_MD *dgst = NULL;

	/* first check the program name */
	program_name(argv[0], pname, sizeof pname);
	if (strcmp(pname, "base64") == 0)
		base64 = 1;
#ifdef ZLIB
	if (strcmp(pname, "zlib") == 0)
		do_zlib = 1;
#endif

	cipher = EVP_get_cipherbyname(pname);
#ifdef ZLIB
	if (!do_zlib && !base64 && (cipher == NULL)
	    && (strcmp(pname, "enc") != 0))
#else
	if (!base64 && (cipher == NULL) && (strcmp(pname, "enc") != 0))
#endif
	{
		BIO_printf(bio_err, "%s is an unknown cipher\n", pname);
		goto bad;
	}
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-e") == 0)
			enc = 1;
		else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			inf = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outf = *(++argv);
		} else if (strcmp(*argv, "-pass") == 0) {
			if (--argc < 1)
				goto bad;
			passarg = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-d") == 0)
			enc = 0;
		else if (strcmp(*argv, "-p") == 0)
			printkey = 1;
		else if (strcmp(*argv, "-v") == 0)
			verbose = 1;
		else if (strcmp(*argv, "-nopad") == 0)
			nopad = 1;
		else if (strcmp(*argv, "-salt") == 0)
			nosalt = 0;
		else if (strcmp(*argv, "-nosalt") == 0)
			nosalt = 1;
		else if (strcmp(*argv, "-debug") == 0)
			debug = 1;
		else if (strcmp(*argv, "-P") == 0)
			printkey = 2;
		else if (strcmp(*argv, "-A") == 0)
			olb64 = 1;
		else if (strcmp(*argv, "-a") == 0)
			base64 = 1;
		else if (strcmp(*argv, "-base64") == 0)
			base64 = 1;
#ifdef ZLIB
		else if (strcmp(*argv, "-z") == 0)
			do_zlib = 1;
#endif
		else if (strcmp(*argv, "-bufsize") == 0) {
			if (--argc < 1)
				goto bad;
			bufsize = (unsigned char *) *(++argv);
		} else if (strcmp(*argv, "-k") == 0) {
			if (--argc < 1)
				goto bad;
			str = *(++argv);
		} else if (strcmp(*argv, "-kfile") == 0) {
			static char buf[128];
			FILE *infile;
			char *file;

			if (--argc < 1)
				goto bad;
			file = *(++argv);
			infile = fopen(file, "r");
			if (infile == NULL) {
				BIO_printf(bio_err, "unable to read key from '%s'\n",
				    file);
				goto bad;
			}
			buf[0] = '\0';
			if (!fgets(buf, sizeof buf, infile)) {
				BIO_printf(bio_err, "unable to read key from '%s'\n",
				    file);
				fclose(infile);
				goto bad;
			}
			fclose(infile);
			i = strlen(buf);
			if ((i > 0) &&
			    ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
				buf[--i] = '\0';
			if ((i > 0) &&
			    ((buf[i - 1] == '\n') || (buf[i - 1] == '\r')))
				buf[--i] = '\0';
			if (i < 1) {
				BIO_printf(bio_err, "zero length password\n");
				goto bad;
			}
			str = buf;
		} else if (strcmp(*argv, "-K") == 0) {
			if (--argc < 1)
				goto bad;
			hkey = *(++argv);
		} else if (strcmp(*argv, "-S") == 0) {
			if (--argc < 1)
				goto bad;
			hsalt = *(++argv);
		} else if (strcmp(*argv, "-iv") == 0) {
			if (--argc < 1)
				goto bad;
			hiv = *(++argv);
		} else if (strcmp(*argv, "-md") == 0) {
			if (--argc < 1)
				goto bad;
			md = *(++argv);
		} else if ((argv[0][0] == '-') &&
		    ((c = EVP_get_cipherbyname(&(argv[0][1]))) != NULL)) {
			cipher = c;
		} else if (strcmp(*argv, "-none") == 0)
			cipher = NULL;
		else {
			BIO_printf(bio_err, "unknown option '%s'\n", *argv);
	bad:
			BIO_printf(bio_err, "options are\n");
			BIO_printf(bio_err, "%-14s input file\n", "-in <file>");
			BIO_printf(bio_err, "%-14s output file\n", "-out <file>");
			BIO_printf(bio_err, "%-14s pass phrase source\n", "-pass <arg>");
			BIO_printf(bio_err, "%-14s encrypt\n", "-e");
			BIO_printf(bio_err, "%-14s decrypt\n", "-d");
			BIO_printf(bio_err, "%-14s base64 encode/decode, depending on encryption flag\n", "-a/-base64");
			BIO_printf(bio_err, "%-14s passphrase is the next argument\n", "-k");
			BIO_printf(bio_err, "%-14s passphrase is the first line of the file argument\n", "-kfile");
			BIO_printf(bio_err, "%-14s the next argument is the md to use to create a key\n", "-md");
			BIO_printf(bio_err, "%-14s   from a passphrase.  One of md2, md5, sha or sha1\n", "");
			BIO_printf(bio_err, "%-14s salt in hex is the next argument\n", "-S");
			BIO_printf(bio_err, "%-14s key/iv in hex is the next argument\n", "-K/-iv");
			BIO_printf(bio_err, "%-14s print the iv/key (then exit if -P)\n", "-[pP]");
			BIO_printf(bio_err, "%-14s buffer size\n", "-bufsize <n>");
			BIO_printf(bio_err, "%-14s disable standard block padding\n", "-nopad");
#ifndef OPENSSL_NO_ENGINE
			BIO_printf(bio_err, "%-14s use engine e, possibly a hardware device.\n", "-engine e");
#endif

			BIO_printf(bio_err, "Cipher Types\n");
			OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,
			    show_ciphers,
			    bio_err);
			BIO_printf(bio_err, "\n");

			goto end;
		}
		argc--;
		argv++;
	}

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	if (md && (dgst = EVP_get_digestbyname(md)) == NULL) {
		BIO_printf(bio_err, "%s is an unsupported message digest type\n", md);
		goto end;
	}
	if (dgst == NULL) {
		dgst = EVP_md5();
	}
	if (bufsize != NULL) {
		unsigned long n;

		for (n = 0; *bufsize; bufsize++) {
			i = *bufsize;
			if ((i <= '9') && (i >= '0'))
				n = n * 10 + i - '0';
			else if (i == 'k') {
				n *= 1024;
				bufsize++;
				break;
			}
		}
		if (*bufsize != '\0') {
			BIO_printf(bio_err, "invalid 'bufsize' specified.\n");
			goto end;
		}
		/* It must be large enough for a base64 encoded line */
		if (base64 && n < 80)
			n = 80;

		bsize = (int) n;
		if (verbose)
			BIO_printf(bio_err, "bufsize=%d\n", bsize);
	}
	strbuf = malloc(SIZE);
	buff = malloc(EVP_ENCODE_LENGTH(bsize));
	if ((buff == NULL) || (strbuf == NULL)) {
		BIO_printf(bio_err, "malloc failure %ld\n", (long) EVP_ENCODE_LENGTH(bsize));
		goto end;
	}
	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (debug) {
		BIO_set_callback(in, BIO_debug_callback);
		BIO_set_callback(out, BIO_debug_callback);
		BIO_set_callback_arg(in, (char *) bio_err);
		BIO_set_callback_arg(out, (char *) bio_err);
	}
	if (inf == NULL) {
		if (bufsize != NULL)
			setvbuf(stdin, (char *) NULL, _IONBF, 0);
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	} else {
		if (BIO_read_filename(in, inf) <= 0) {
			perror(inf);
			goto end;
		}
	}

	if (!str && passarg) {
		if (!app_passwd(bio_err, passarg, NULL, &pass, NULL)) {
			BIO_printf(bio_err, "Error getting password\n");
			goto end;
		}
		str = pass;
	}
	if ((str == NULL) && (cipher != NULL) && (hkey == NULL)) {
		for (;;) {
			char buf[200];
			int ret;

			ret = snprintf(buf, sizeof buf, "enter %s %s password:",
			    OBJ_nid2ln(EVP_CIPHER_nid(cipher)),
			    (enc) ? "encryption" : "decryption");
			if (ret == -1 || ret >= sizeof buf) {
				BIO_printf(bio_err, "Password prompt too long\n");
				goto end;
			}
			strbuf[0] = '\0';
			i = EVP_read_pw_string((char *) strbuf, SIZE, buf, enc);
			if (i == 0) {
				if (strbuf[0] == '\0') {
					ret = 1;
					goto end;
				}
				str = strbuf;
				break;
			}
			if (i < 0) {
				BIO_printf(bio_err, "bad password read\n");
				goto end;
			}
		}
	}
	if (outf == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
		if (bufsize != NULL)
			setvbuf(stdout, (char *) NULL, _IONBF, 0);
	} else {
		if (BIO_write_filename(out, outf) <= 0) {
			perror(outf);
			goto end;
		}
	}

	rbio = in;
	wbio = out;

#ifdef ZLIB

	if (do_zlib) {
		if ((bzl = BIO_new(BIO_f_zlib())) == NULL)
			goto end;
		if (enc)
			wbio = BIO_push(bzl, wbio);
		else
			rbio = BIO_push(bzl, rbio);
	}
#endif

	if (base64) {
		if ((b64 = BIO_new(BIO_f_base64())) == NULL)
			goto end;
		if (debug) {
			BIO_set_callback(b64, BIO_debug_callback);
			BIO_set_callback_arg(b64, (char *) bio_err);
		}
		if (olb64)
			BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
		if (enc)
			wbio = BIO_push(b64, wbio);
		else
			rbio = BIO_push(b64, rbio);
	}
	if (cipher != NULL) {
		/*
		 * Note that str is NULL if a key was passed on the command
		 * line, so we get no salt in that case. Is this a bug?
		 */
		if (str != NULL) {
			/*
			 * Salt handling: if encrypting generate a salt and
			 * write to output BIO. If decrypting read salt from
			 * input BIO.
			 */
			unsigned char *sptr;
			if (nosalt)
				sptr = NULL;
			else {
				if (enc) {
					if (hsalt) {
						if (!set_hex(hsalt, salt, sizeof salt)) {
							BIO_printf(bio_err,
							    "invalid hex salt value\n");
							goto end;
						}
					} else if (RAND_pseudo_bytes(salt, sizeof salt) < 0)
						goto end;
					/*
					 * If -P option then don't bother
					 * writing
					 */
					if ((printkey != 2)
					    && (BIO_write(wbio, magic,
						    sizeof magic - 1) != sizeof magic - 1
						|| BIO_write(wbio,
						    (char *) salt,
						    sizeof salt) != sizeof salt)) {
						BIO_printf(bio_err, "error writing output file\n");
						goto end;
					}
				} else if (BIO_read(rbio, mbuf, sizeof mbuf) != sizeof mbuf
					    || BIO_read(rbio,
						(unsigned char *) salt,
					sizeof salt) != sizeof salt) {
					BIO_printf(bio_err, "error reading input file\n");
					goto end;
				} else if (memcmp(mbuf, magic, sizeof magic - 1)) {
					BIO_printf(bio_err, "bad magic number\n");
					goto end;
				}
				sptr = salt;
			}

			EVP_BytesToKey(cipher, dgst, sptr,
			    (unsigned char *) str,
			    strlen(str), 1, key, iv);
			/*
			 * zero the complete buffer or the string passed from
			 * the command line bug picked up by Larry J. Hughes
			 * Jr. <hughes@@indiana.edu>
			 */
			if (str == strbuf)
				OPENSSL_cleanse(str, SIZE);
			else
				OPENSSL_cleanse(str, strlen(str));
		}
		if ((hiv != NULL) && !set_hex(hiv, iv, sizeof iv)) {
			BIO_printf(bio_err, "invalid hex iv value\n");
			goto end;
		}
		if ((hiv == NULL) && (str == NULL)
		    && EVP_CIPHER_iv_length(cipher) != 0) {
			/*
			 * No IV was explicitly set and no IV was generated
			 * during EVP_BytesToKey. Hence the IV is undefined,
			 * making correct decryption impossible.
			 */
			BIO_printf(bio_err, "iv undefined\n");
			goto end;
		}
		if ((hkey != NULL) && !set_hex(hkey, key, sizeof key)) {
			BIO_printf(bio_err, "invalid hex key value\n");
			goto end;
		}
		if ((benc = BIO_new(BIO_f_cipher())) == NULL)
			goto end;

		/*
		 * Since we may be changing parameters work on the encryption
		 * context rather than calling BIO_set_cipher().
		 */

		BIO_get_cipher_ctx(benc, &ctx);

		if (!EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, enc)) {
			BIO_printf(bio_err, "Error setting cipher %s\n",
			    EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
		}
		if (nopad)
			EVP_CIPHER_CTX_set_padding(ctx, 0);

		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc)) {
			BIO_printf(bio_err, "Error setting cipher %s\n",
			    EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
		}
		if (debug) {
			BIO_set_callback(benc, BIO_debug_callback);
			BIO_set_callback_arg(benc, (char *) bio_err);
		}
		if (printkey) {
			if (!nosalt) {
				printf("salt=");
				for (i = 0; i < (int) sizeof(salt); i++)
					printf("%02X", salt[i]);
				printf("\n");
			}
			if (cipher->key_len > 0) {
				printf("key=");
				for (i = 0; i < cipher->key_len; i++)
					printf("%02X", key[i]);
				printf("\n");
			}
			if (cipher->iv_len > 0) {
				printf("iv =");
				for (i = 0; i < cipher->iv_len; i++)
					printf("%02X", iv[i]);
				printf("\n");
			}
			if (printkey == 2) {
				ret = 0;
				goto end;
			}
		}
	}
	/* Only encrypt/decrypt as we write the file */
	if (benc != NULL)
		wbio = BIO_push(benc, wbio);

	for (;;) {
		inl = BIO_read(rbio, (char *) buff, bsize);
		if (inl <= 0)
			break;
		if (BIO_write(wbio, (char *) buff, inl) != inl) {
			BIO_printf(bio_err, "error writing output file\n");
			goto end;
		}
	}
	if (!BIO_flush(wbio)) {
		BIO_printf(bio_err, "bad decrypt\n");
		goto end;
	}
	ret = 0;
	if (verbose) {
		BIO_printf(bio_err, "bytes read   :%8ld\n", BIO_number_read(in));
		BIO_printf(bio_err, "bytes written:%8ld\n", BIO_number_written(out));
	}
end:
	ERR_print_errors(bio_err);
	free(strbuf);
	free(buff);
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	BIO_free(benc);
	BIO_free(b64);
#ifdef ZLIB
	BIO_free(bzl);
#endif
	free(pass);

	return (ret);
}

int
set_hex(char *in, unsigned char *out, int size)
{
	int i, n;
	unsigned char j;

	n = strlen(in);
	if (n > (size * 2)) {
		BIO_printf(bio_err, "hex string is too long\n");
		return (0);
	}
	memset(out, 0, size);
	for (i = 0; i < n; i++) {
		j = (unsigned char) *in;
		*(in++) = '\0';
		if (j == 0)
			break;
		if ((j >= '0') && (j <= '9'))
			j -= '0';
		else if ((j >= 'A') && (j <= 'F'))
			j = j - 'A' + 10;
		else if ((j >= 'a') && (j <= 'f'))
			j = j - 'a' + 10;
		else {
			BIO_printf(bio_err, "non-hex digit\n");
			return (0);
		}
		if (i & 1)
			out[i / 2] |= j;
		else
			out[i / 2] = (j << 4);
	}
	return (1);
}
@


1.39
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.38 2014/07/14 00:35:10 deraadt Exp $ */
@


1.38
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.37 2014/07/12 17:54:31 jsing Exp $ */
d603 1
a603 2
	if (in != NULL)
		BIO_free(in);
d606 2
a607 4
	if (benc != NULL)
		BIO_free(benc);
	if (b64 != NULL)
		BIO_free(b64);
d609 1
a609 2
	if (bzl != NULL)
		BIO_free(bzl);
@


1.37
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.36 2014/06/29 18:22:10 logan Exp $ */
d81 1
a81 1
static void 
d100 1
a100 1
int 
d616 1
a616 1
	
d620 1
a620 1
int 
@


1.36
log
@Fix file descriptor leak

(Thanks to Brent Cook)

OK from jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: enc.c,v 1.35 2014/06/12 15:49:27 deraadt Exp $ */
a131 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.35
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d233 1
@


1.34
log
@malloc() result does not need a cast.
ok miod
@
text
@d1 1
a1 1
/* apps/enc.c */
@


1.33
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d341 1
a341 1
	buff = (unsigned char *) malloc(EVP_ENCODE_LENGTH(bsize));
@


1.32
log
@More whack-a-mole^Wfips.

ok miod@@
@
text
@a132 2
	signal(SIGPIPE, SIG_IGN);

@


1.31
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a131 1
	int non_fips_allow = 0;
d266 1
a266 3
		} else if (strcmp(*argv, "-non-fips-allow") == 0)
			non_fips_allow = 1;
		else if ((argv[0][0] == '-') &&
a535 4

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
			    EVP_CIPH_FLAG_NON_FIPS_ALLOW);
@


1.30
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d612 2
a613 4
	if (strbuf != NULL)
		free(strbuf);
	if (buff != NULL)
		free(buff);
d626 1
a626 2
	if (pass)
		free(pass);
@


1.29
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d59 1
d63 1
d65 1
d67 1
d71 2
a73 4
#include <openssl/rand.h>
#include <openssl/pem.h>
#include <openssl/comp.h>
#include <ctype.h>
@


1.28
log
@Nuke more defines - we have setvbuf() and _IONBF.

ok deraadt@@
@
text
@a133 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.27
log
@remove crazy #undefs; ok jsing
@
text
@a365 1
#ifndef OPENSSL_NO_SETVBUF_IONBF
a367 1
#endif				/* ndef OPENSSL_NO_SETVBUF_IONBF */
a412 1
#ifndef OPENSSL_NO_SETVBUF_IONBF
a414 1
#endif				/* ndef OPENSSL_NO_SETVBUF_IONBF */
@


1.26
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a73 2
#undef SIZE
#undef BSIZE
@


1.25
log
@truncation check some snprintf calls (over-cautiously in case)
ok jsing beck
@
text
@d134 1
a134 1
	apps_startup();
d638 1
a638 1
	apps_shutdown();
@


1.24
log
@We'll interpret a (void) cast on snprintf() to mean it's been verified that
truncation is either desirable, not an issue, or is detected and handled later

ok deraadt@@
@
text
@d390 1
d392 1
a392 1
			snprintf(buf, sizeof buf, "enter %s %s password:",
d395 4
@


1.23
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d391 1
a391 1
			(void) snprintf(buf, sizeof buf, "enter %s %s password:",
@


1.22
log
@KaboomNF
@
text
@a75 1
#undef PROG
d98 1
a98 1
int MAIN(int, char **);
d101 1
a101 1
MAIN(int argc, char **argv)
@


1.21
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d73 1
a73 1
int set_hex(char *in,unsigned char *out,int size);
d82 4
a85 3
static void show_ciphers(const OBJ_NAME *name,void *bio_)
	{
	BIO *bio=bio_;
d88 1
a88 1
	if(!islower((unsigned char)*name->name))
d91 7
a97 9
	BIO_printf(bio,"-%-25s",name->name);
	if(++n == 3)
		{
		BIO_printf(bio,"\n");
		n=0;
		}
	else
		BIO_printf(bio," ");
	}
d101 9
a109 8
int MAIN(int argc, char **argv)
	{
	static const char magic[]="Salted__";
	char mbuf[sizeof magic-1];
	char *strbuf=NULL;
	unsigned char *buff=NULL,*bufsize=NULL;
	int bsize=BSIZE,verbose=0;
	int ret=1,inl;
d111 1
a111 1
	unsigned char key[EVP_MAX_KEY_LENGTH],iv[EVP_MAX_IV_LENGTH];
d113 4
a116 4
	char *str=NULL, *passarg = NULL, *pass = NULL;
	char *hkey=NULL,*hiv=NULL,*hsalt = NULL;
	char *md=NULL;
	int enc=1,printkey=0,i,base64=0;
d118 1
a118 1
	int do_zlib=0;
d121 2
a122 2
	int debug=0,olb64=0,nosalt=0;
	const EVP_CIPHER *cipher=NULL,*c;
d124 3
a126 2
	char *inf=NULL,*outf=NULL;
	BIO *in=NULL,*out=NULL,*b64=NULL,*benc=NULL,*rbio=NULL,*wbio=NULL;
d128 1
a128 1
	char pname[PROG_NAME_SIZE+1];
d132 1
a132 1
	const EVP_MD *dgst=NULL;
d138 2
a139 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d145 3
a147 3
	program_name(argv[0],pname,sizeof pname);
	if (strcmp(pname,"base64") == 0)
		base64=1;
d149 2
a150 2
	if (strcmp(pname,"zlib") == 0)
		do_zlib=1;
d153 1
a153 1
	cipher=EVP_get_cipherbyname(pname);
d156 1
a156 1
				&& (strcmp(pname,"enc") != 0))
d158 1
a158 1
	if (!base64 && (cipher == NULL) && (strcmp(pname,"enc") != 0))
d160 2
a161 2
		{
		BIO_printf(bio_err,"%s is an unknown cipher\n",pname);
d163 1
a163 2
		}

d166 16
a181 19
	while (argc >= 1)
		{
		if	(strcmp(*argv,"-e") == 0)
			enc=1;
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
			inf= *(++argv);
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
			outf= *(++argv);
			}
		else if (strcmp(*argv,"-pass") == 0)
			{
			if (--argc < 1) goto bad;
			passarg= *(++argv);
			}
d183 5
a187 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d189 22
a210 22
		else if	(strcmp(*argv,"-d") == 0)
			enc=0;
		else if	(strcmp(*argv,"-p") == 0)
			printkey=1;
		else if	(strcmp(*argv,"-v") == 0)
			verbose=1;
		else if	(strcmp(*argv,"-nopad") == 0)
			nopad=1;
		else if	(strcmp(*argv,"-salt") == 0)
			nosalt=0;
		else if	(strcmp(*argv,"-nosalt") == 0)
			nosalt=1;
		else if	(strcmp(*argv,"-debug") == 0)
			debug=1;
		else if	(strcmp(*argv,"-P") == 0)
			printkey=2;
		else if	(strcmp(*argv,"-A") == 0)
			olb64=1;
		else if	(strcmp(*argv,"-a") == 0)
			base64=1;
		else if	(strcmp(*argv,"-base64") == 0)
			base64=1;
d212 2
a213 2
		else if	(strcmp(*argv,"-z") == 0)
			do_zlib=1;
d215 9
a223 12
		else if (strcmp(*argv,"-bufsize") == 0)
			{
			if (--argc < 1) goto bad;
			bufsize=(unsigned char *)*(++argv);
			}
		else if (strcmp(*argv,"-k") == 0)
			{
			if (--argc < 1) goto bad;
			str= *(++argv);
			}
		else if (strcmp(*argv,"-kfile") == 0)
			{
d228 7
a234 7
			if (--argc < 1) goto bad;
			file= *(++argv);
			infile=fopen(file,"r");
			if (infile == NULL)
				{
				BIO_printf(bio_err,"unable to read key from '%s'\n",
					file);
d236 5
a240 6
				}
			buf[0]='\0';
			if (!fgets(buf,sizeof buf,infile))
				{
				BIO_printf(bio_err,"unable to read key from '%s'\n",
					file);
d242 1
a242 1
				}
d244 1
a244 1
			i=strlen(buf);
d246 2
a247 2
				((buf[i-1] == '\n') || (buf[i-1] == '\r')))
				buf[--i]='\0';
d249 4
a252 5
				((buf[i-1] == '\n') || (buf[i-1] == '\r')))
				buf[--i]='\0';
			if (i < 1)
				{
				BIO_printf(bio_err,"zero length password\n");
a253 2
				}
			str=buf;
d255 18
a272 21
		else if (strcmp(*argv,"-K") == 0)
			{
			if (--argc < 1) goto bad;
			hkey= *(++argv);
			}
		else if (strcmp(*argv,"-S") == 0)
			{
			if (--argc < 1) goto bad;
			hsalt= *(++argv);
			}
		else if (strcmp(*argv,"-iv") == 0)
			{
			if (--argc < 1) goto bad;
			hiv= *(++argv);
			}
		else if (strcmp(*argv,"-md") == 0)
			{
			if (--argc < 1) goto bad;
			md= *(++argv);
			}
		else if (strcmp(*argv,"-non-fips-allow") == 0)
d274 24
a297 27
		else if	((argv[0][0] == '-') &&
			((c=EVP_get_cipherbyname(&(argv[0][1]))) != NULL))
			{
			cipher=c;
			}
		else if (strcmp(*argv,"-none") == 0)
			cipher=NULL;
		else
			{
			BIO_printf(bio_err,"unknown option '%s'\n",*argv);
bad:
			BIO_printf(bio_err,"options are\n");
			BIO_printf(bio_err,"%-14s input file\n","-in <file>");
			BIO_printf(bio_err,"%-14s output file\n","-out <file>");
			BIO_printf(bio_err,"%-14s pass phrase source\n","-pass <arg>");
			BIO_printf(bio_err,"%-14s encrypt\n","-e");
			BIO_printf(bio_err,"%-14s decrypt\n","-d");
			BIO_printf(bio_err,"%-14s base64 encode/decode, depending on encryption flag\n","-a/-base64");
			BIO_printf(bio_err,"%-14s passphrase is the next argument\n","-k");
			BIO_printf(bio_err,"%-14s passphrase is the first line of the file argument\n","-kfile");
			BIO_printf(bio_err,"%-14s the next argument is the md to use to create a key\n","-md");
			BIO_printf(bio_err,"%-14s   from a passphrase.  One of md2, md5, sha or sha1\n","");
			BIO_printf(bio_err,"%-14s salt in hex is the next argument\n","-S");
			BIO_printf(bio_err,"%-14s key/iv in hex is the next argument\n","-K/-iv");
			BIO_printf(bio_err,"%-14s print the iv/key (then exit if -P)\n","-[pP]");
			BIO_printf(bio_err,"%-14s buffer size\n","-bufsize <n>");
			BIO_printf(bio_err,"%-14s disable standard block padding\n","-nopad");
d299 1
a299 1
			BIO_printf(bio_err,"%-14s use engine e, possibly a hardware device.\n","-engine e");
d302 1
a302 1
			BIO_printf(bio_err,"Cipher Types\n");
d304 3
a306 3
					       show_ciphers,
					       bio_err);
			BIO_printf(bio_err,"\n");
d309 1
a309 1
			}
d312 1
a312 1
		}
d315 1
a315 1
        setup_engine(bio_err, engine, 0);
d318 2
a319 3
	if (md && (dgst=EVP_get_digestbyname(md)) == NULL)
		{
		BIO_printf(bio_err,"%s is an unsupported message digest type\n",md);
d321 2
a322 4
		}

	if (dgst == NULL)
		{
d324 2
a325 4
		}

	if (bufsize != NULL)
		{
d328 2
a329 3
		for (n=0; *bufsize; bufsize++)
			{
			i= *bufsize;
d331 3
a333 4
				n=n*10+i-'0';
			else if (i == 'k')
				{
				n*=1024;
a335 1
				}
d337 3
a339 3
		if (*bufsize != '\0')
			{
			BIO_printf(bio_err,"invalid 'bufsize' specified.\n");
d341 1
a341 2
			}

d343 2
a344 1
		if (base64 && n < 80) n=80;
d346 8
a353 9
		bsize=(int)n;
		if (verbose) BIO_printf(bio_err,"bufsize=%d\n",bsize);
		}

	strbuf=malloc(SIZE);
	buff=(unsigned char *)malloc(EVP_ENCODE_LENGTH(bsize));
	if ((buff == NULL) || (strbuf == NULL))
		{
		BIO_printf(bio_err,"malloc failure %ld\n",(long)EVP_ENCODE_LENGTH(bsize));
d355 4
a358 6
		}

	in=BIO_new(BIO_s_file());
	out=BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL))
		{
d361 8
a368 11
		}
	if (debug)
		{
		BIO_set_callback(in,BIO_debug_callback);
		BIO_set_callback(out,BIO_debug_callback);
		BIO_set_callback_arg(in,(char *)bio_err);
		BIO_set_callback_arg(out,(char *)bio_err);
		}

	if (inf == NULL)
	        {
d371 5
a375 8
			setvbuf(stdin, (char *)NULL, _IONBF, 0);
#endif /* ndef OPENSSL_NO_SETVBUF_IONBF */
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	        }
	else
		{
		if (BIO_read_filename(in,inf) <= 0)
			{
a377 1
			}
d379 1
d381 2
a382 2
	if(!str && passarg) {
		if(!app_passwd(bio_err, passarg, NULL, &pass, NULL)) {
d388 2
a389 5

	if ((str == NULL) && (cipher != NULL) && (hkey == NULL))
		{
		for (;;)
			{
d392 8
a399 10
			(void) snprintf(buf,sizeof buf,"enter %s %s password:",
				     OBJ_nid2ln(EVP_CIPHER_nid(cipher)),
				     (enc)?"encryption":"decryption");
			strbuf[0]='\0';
			i=EVP_read_pw_string((char *)strbuf,SIZE,buf,enc);
			if (i == 0)
				{
				if (strbuf[0] == '\0')
					{
					ret=1;
d401 2
a402 2
					}
				str=strbuf;
d404 3
a406 4
				}
			if (i < 0)
				{
				BIO_printf(bio_err,"bad password read\n");
a407 1
				}
d410 3
a412 5


	if (outf == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
d415 4
a418 7
			setvbuf(stdout, (char *)NULL, _IONBF, 0);
#endif /* ndef OPENSSL_NO_SETVBUF_IONBF */
		}
	else
		{
		if (BIO_write_filename(out,outf) <= 0)
			{
a420 1
			}
d422 1
d424 2
a425 2
	rbio=in;
	wbio=out;
d429 2
a430 3
	if (do_zlib)
		{
		if ((bzl=BIO_new(BIO_f_zlib())) == NULL)
d433 1
a433 1
			wbio=BIO_push(bzl,wbio);
d435 2
a436 2
			rbio=BIO_push(bzl,rbio);
		}
d439 7
a445 9
	if (base64)
		{
		if ((b64=BIO_new(BIO_f_base64())) == NULL)
			goto end;
		if (debug)
			{
			BIO_set_callback(b64,BIO_debug_callback);
			BIO_set_callback_arg(b64,(char *)bio_err);
			}
d447 1
a447 1
			BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);
d449 1
a449 1
			wbio=BIO_push(b64,wbio);
d451 5
a455 6
			rbio=BIO_push(b64,rbio);
		}

	if (cipher != NULL)
		{
		/* Note that str is NULL if a key was passed on the command
d458 3
a460 3
		if (str != NULL)
			{
			/* Salt handling: if encrypting generate a salt and
d465 2
a466 1
			if(nosalt) sptr = NULL;
d468 3
a470 3
				if(enc) {
					if(hsalt) {
						if(!set_hex(hsalt,salt,sizeof salt)) {
d472 1
a472 1
								"invalid hex salt value\n");
d477 11
a487 8
					/* If -P option then don't bother writing */
					if((printkey != 2)
					   && (BIO_write(wbio,magic,
							 sizeof magic-1) != sizeof magic-1
					       || BIO_write(wbio,
							    (char *)salt,
							    sizeof salt) != sizeof salt)) {
						BIO_printf(bio_err,"error writing output file\n");
d490 8
a497 5
				} else if(BIO_read(rbio,mbuf,sizeof mbuf) != sizeof mbuf
					  || BIO_read(rbio,
						      (unsigned char *)salt,
				    sizeof salt) != sizeof salt) {
					BIO_printf(bio_err,"error reading input file\n");
a498 3
				} else if(memcmp(mbuf,magic,sizeof magic-1)) {
				    BIO_printf(bio_err,"bad magic number\n");
				    goto end;
a499 1

d503 8
a510 7
			EVP_BytesToKey(cipher,dgst,sptr,
				(unsigned char *)str,
				strlen(str),1,key,iv);
			/* zero the complete buffer or the string
			 * passed from the command line
			 * bug picked up by
			 * Larry J. Hughes Jr. <hughes@@indiana.edu> */
d512 1
a512 1
				OPENSSL_cleanse(str,SIZE);
d514 4
a517 5
				OPENSSL_cleanse(str,strlen(str));
			}
		if ((hiv != NULL) && !set_hex(hiv,iv,sizeof iv))
			{
			BIO_printf(bio_err,"invalid hex iv value\n");
d519 1
a519 1
			}
d521 3
a523 3
		    && EVP_CIPHER_iv_length(cipher) != 0)
			{
			/* No IV was explicitly set and no IV was generated
d525 2
a526 1
			 * making correct decryption impossible. */
d529 3
a531 4
			}
		if ((hkey != NULL) && !set_hex(hkey,key,sizeof key))
			{
			BIO_printf(bio_err,"invalid hex key value\n");
d533 2
a534 3
			}

		if ((benc=BIO_new(BIO_f_cipher())) == NULL)
d537 2
a538 1
		/* Since we may be changing parameters work on the encryption
d546 1
a546 1
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);
d548 1
a548 2
		if (!EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, enc))
			{
d550 1
a550 1
				EVP_CIPHER_name(cipher));
d553 1
a553 2
			}

d557 1
a557 2
		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc))
			{
d559 1
a559 1
				EVP_CIPHER_name(cipher));
d562 7
a568 12
			}

		if (debug)
			{
			BIO_set_callback(benc,BIO_debug_callback);
			BIO_set_callback_arg(benc,(char *)bio_err);
			}

		if (printkey)
			{
			if (!nosalt)
				{
d570 2
a571 2
				for (i=0; i<(int)sizeof(salt); i++)
					printf("%02X",salt[i]);
d573 2
a574 3
				}
			if (cipher->key_len > 0)
				{
d576 2
a577 2
				for (i=0; i<cipher->key_len; i++)
					printf("%02X",key[i]);
d579 2
a580 3
				}
			if (cipher->iv_len > 0)
				{
d582 2
a583 2
				for (i=0; i<cipher->iv_len; i++)
					printf("%02X",iv[i]);
d585 3
a587 4
				}
			if (printkey == 2)
				{
				ret=0;
a588 1
				}
d591 1
a591 1

d594 1
a594 1
		wbio=BIO_push(benc,wbio);
d596 6
a601 7
	for (;;)
		{
		inl=BIO_read(rbio,(char *)buff,bsize);
		if (inl <= 0) break;
		if (BIO_write(wbio,(char *)buff,inl) != inl)
			{
			BIO_printf(bio_err,"error writing output file\n");
a602 1
			}
d604 3
a606 3
	if (!BIO_flush(wbio))
		{
		BIO_printf(bio_err,"bad decrypt\n");
d608 6
a613 8
		}

	ret=0;
	if (verbose)
		{
		BIO_printf(bio_err,"bytes read   :%8ld\n",BIO_number_read(in));
		BIO_printf(bio_err,"bytes written:%8ld\n",BIO_number_written(out));
		}
d616 12
a627 6
	if (strbuf != NULL) free(strbuf);
	if (buff != NULL) free(buff);
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (benc != NULL) BIO_free(benc);
	if (b64 != NULL) BIO_free(b64);
d629 2
a630 1
	if (bzl != NULL) BIO_free(bzl);
d632 2
a633 1
	if(pass) free(pass);
d635 2
a636 2
	return(ret);
	}
d638 4
a641 3
int set_hex(char *in, unsigned char *out, int size)
	{
	int i,n;
d644 11
a654 12
	n=strlen(in);
	if (n > (size*2))
		{
		BIO_printf(bio_err,"hex string is too long\n");
		return(0);
		}
	memset(out,0,size);
	for (i=0; i<n; i++)
		{
		j=(unsigned char)*in;
		*(in++)='\0';
		if (j == 0) break;
d656 1
a656 1
			j-='0';
d658 1
a658 1
			j=j-'A'+10;
d660 7
a666 1
			j=j-'a'+10;
d668 1
a668 10
			{
			BIO_printf(bio_err,"non-hex digit\n");
			return(0);
			}
		if (i&1)
			out[i/2]|=j;
		else
			out[i/2]=(j<<4);
		}
	return(1);
d670 2
@


1.20
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d689 1
a689 1
	OPENSSL_EXIT(ret);
@


1.19
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d374 2
a375 2
	strbuf=OPENSSL_malloc(SIZE);
	buff=(unsigned char *)OPENSSL_malloc(EVP_ENCODE_LENGTH(bsize));
d378 1
a378 1
		BIO_printf(bio_err,"OPENSSL_malloc failure %ld\n",(long)EVP_ENCODE_LENGTH(bsize));
d678 2
a679 2
	if (strbuf != NULL) OPENSSL_free(strbuf);
	if (buff != NULL) OPENSSL_free(buff);
d687 1
a687 1
	if(pass) OPENSSL_free(pass);
@


1.18
log
@Part 1 of eliminating BIO_snprintf(). This fixes mechanical conversions
where the return value is ignored changing to (void) snprintf.
ok deraadt@@
@
text
@a458 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.17
log
@resolve conflicts
@
text
@d428 1
a428 1
			BIO_snprintf(buf,sizeof buf,"enter %s %s password:",
@


1.16
log
@openssl-1.0.0e: resolve conflicts
@
text
@d132 1
d285 2
d595 5
@


1.15
log
@resolve conflicts, fix local changes
@
text
@a103 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d328 1
a328 1
        e = setup_engine(bio_err, engine, 0);
d396 1
d399 1
d452 1
d455 1
@


1.14
log
@resolve conflicts
@
text
@d70 1
d120 4
a134 1
	int non_fips_allow = 0;
d149 4
d155 4
d160 1
d216 4
d246 6
a251 1
			fgets(buf,sizeof buf,infile);
a286 2
		else if (strcmp(*argv,"-non-fips-allow") == 0)
			non_fips_allow = 1;
d309 1
d313 1
d342 1
a342 4
		if (in_FIPS_mode)
			dgst = EVP_sha1();
		else
			dgst = EVP_md5();
d474 13
a590 5

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);

d681 3
@


1.13
log
@resolve conflicts
@
text
@d536 2
a537 1
		if ((hiv == NULL) && (str == NULL))
@


1.12
log
@resolve conflicts
@
text
@d130 1
d265 2
d320 4
a323 1
		dgst = EVP_md5();
d558 5
@


1.11
log
@resolve conflicts
@
text
@a129 1
	int non_fips_allow = 0;
a263 2
		else if (strcmp(*argv,"-non-fips-allow") == 0)
			non_fips_allow = 1;
d317 1
a317 4
		if (in_FIPS_mode)
			dgst = EVP_sha1();
		else
			dgst = EVP_md5();
d343 1
a343 1
		if (n < 80) n=80;
d368 2
a369 2
		BIO_set_callback_arg(in,bio_err);
		BIO_set_callback_arg(out,bio_err);
d373 3
d377 1
d428 2
d456 1
a456 1
			BIO_set_callback_arg(b64,bio_err);
d555 1
a555 13
					EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
			}

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);

		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc))
			{
			BIO_printf(bio_err, "Error setting cipher %s\n",
					EVP_CIPHER_name(cipher));
d566 1
a566 1
					EVP_CIPHER_name(cipher));
d574 1
a574 1
			BIO_set_callback_arg(benc,bio_err);
d582 1
a582 1
				for (i=0; i<sizeof salt; i++)
@


1.10
log
@merge 0.9.7d
@
text
@d117 1
d121 1
d129 2
d260 7
d285 4
a288 2
			BIO_printf(bio_err,"%-14s key is the next argument\n","-k");
			BIO_printf(bio_err,"%-14s key is the first line of the file argument\n","-kfile");
d312 14
d513 1
a513 1
			EVP_BytesToKey(cipher,EVP_md5(),sptr,
d546 26
a571 1
		BIO_set_cipher(benc,cipher,key,iv,enc);
d573 3
d577 4
a580 3
			EVP_CIPHER_CTX *ctx;
			BIO_get_cipher_ctx(benc, &ctx);
			EVP_CIPHER_CTX_set_padding(ctx, 0);
d582 1
@


1.9
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d376 3
a378 3
			snprintf(buf,sizeof buf,"enter %s %s password:",
				OBJ_nid2ln(EVP_CIPHER_nid(cipher)),
				(enc)?"encryption":"decryption");
@


1.8
log
@more strcpy & sprintf murder; ho ok
@
text
@d103 1
d105 1
d107 1
a107 1
	char mbuf[8];	/* should be 1 smaller than magic */
d124 1
d126 1
d138 1
a138 1
	program_name(argv[0],pname,PROG_NAME_SIZE);
d170 1
d176 1
d225 1
a225 1
			fgets(buf,128,infile);
d279 1
d281 1
d295 1
d297 1
d455 1
a455 1
						if(!set_hex(hsalt,salt,PKCS5_SALT_LEN)) {
d460 1
a460 1
					} else if (RAND_pseudo_bytes(salt, PKCS5_SALT_LEN) < 0)
d468 1
a468 1
							    PKCS5_SALT_LEN) != PKCS5_SALT_LEN)) {
d475 1
a475 1
				    PKCS5_SALT_LEN) != PKCS5_SALT_LEN) {
d494 1
a494 1
				memset(str,0,SIZE);
d496 1
a496 1
				memset(str,0,strlen(str));
d537 1
a537 1
				for (i=0; i<PKCS5_SALT_LEN; i++)
d599 1
a599 1
	EXIT(ret);
@


1.7
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d366 1
a366 1
			sprintf(buf,"enter %s %s password:",
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d81 1
a81 1
void show_ciphers(const OBJ_NAME *name,void *bio_)
@


1.5
log
@merge openssl 0.9.6b-engine

Note that this is a maintenence release, API's appear *not* to have changed.
As such, I have only increased the minor number on these libraries
@
text
@a68 3
#ifndef NO_MD5
#include <openssl/md5.h>
#endif
d70 1
a70 1
#include <openssl/engine.h>
d81 18
d110 2
a111 1
	unsigned char key[24],iv[MD5_DIGEST_LENGTH];
d120 2
a121 2
#define PROG_NAME_SIZE  16
	char pname[PROG_NAME_SIZE];
d130 3
d177 2
d276 4
a279 16
			BIO_printf(bio_err,"des     : 56 bit key DES encryption\n");
			BIO_printf(bio_err,"des_ede :112 bit key ede DES encryption\n");
			BIO_printf(bio_err,"des_ede3:168 bit key ede DES encryption\n");
#ifndef NO_IDEA
			BIO_printf(bio_err,"idea    :128 bit key IDEA encryption\n");
#endif
#ifndef NO_RC4
			BIO_printf(bio_err,"rc2     :128 bit key RC2 encryption\n");
#endif
#ifndef NO_BF
			BIO_printf(bio_err,"bf      :128 bit key Blowfish encryption\n");
#endif
#ifndef NO_RC4
			BIO_printf(bio_err," -%-5s :128 bit key RC4 encryption\n",
				LN_rc4);
#endif
a280 48
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_des_ecb,LN_des_cbc,
				LN_des_cfb64,LN_des_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n",
				"des", LN_des_cbc);

			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_des_ede,LN_des_ede_cbc,
				LN_des_ede_cfb64,LN_des_ede_ofb64);
			BIO_printf(bio_err," -desx -none\n");


			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_des_ede3,LN_des_ede3_cbc,
				LN_des_ede3_cfb64,LN_des_ede3_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n",
				"des3", LN_des_ede3_cbc);

#ifndef NO_IDEA
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_idea_ecb, LN_idea_cbc,
				LN_idea_cfb64, LN_idea_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n","idea",LN_idea_cbc);
#endif
#ifndef NO_RC2
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_rc2_ecb, LN_rc2_cbc,
				LN_rc2_cfb64, LN_rc2_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n","rc2", LN_rc2_cbc);
#endif
#ifndef NO_BF
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_bf_ecb, LN_bf_cbc,
				LN_bf_cfb64, LN_bf_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n","bf", LN_bf_cbc);
#endif
#ifndef NO_CAST
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_cast5_ecb, LN_cast5_cbc,
				LN_cast5_cfb64, LN_cast5_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n","cast", LN_cast5_cbc);
#endif
#ifndef NO_RC5
			BIO_printf(bio_err," -%-12s -%-12s -%-12s -%-12s",
				LN_rc5_ecb, LN_rc5_cbc,
				LN_rc5_cfb64, LN_rc5_ofb64);
			BIO_printf(bio_err," -%-4s (%s)\n","rc5", LN_rc5_cbc);
#endif
d287 1
a287 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d393 1
a393 1
#ifdef VMS
d431 3
d488 1
a488 1
		if ((hiv != NULL) && !set_hex(hiv,iv,8))
d501 1
a501 1
		if ((hkey != NULL) && !set_hex(hkey,key,24))
d510 6
d588 1
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d545 8
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d73 1
d88 1
d106 1
d147 5
d252 1
d326 18
d373 2
a374 2
	strbuf=Malloc(SIZE);
	buff=(unsigned char *)Malloc(EVP_ENCODE_LENGTH(bsize));
d377 1
a377 1
		BIO_printf(bio_err,"Malloc failure %ld\n",(long)EVP_ENCODE_LENGTH(bsize));
d446 1
d448 7
d619 2
a620 2
	if (strbuf != NULL) Free(strbuf);
	if (buff != NULL) Free(buff);
d622 1
a622 1
	if (out != NULL) BIO_free(out);
d625 1
a625 1
	if(pass) Free(pass);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d68 1
d83 2
d87 2
d94 3
a96 2
	char *str=NULL;
	char *hkey=NULL,*hiv=NULL;
d98 1
a98 1
	int debug=0,olb64=0;
d139 5
d150 5
a154 2
		else if	((strcmp(*argv,"-debug") == 0) ||
			 (strcmp(*argv,"-d") == 0))
d211 5
d234 2
a235 1
			BIO_printf(bio_err,"%-14s output fileencrypt\n","-out <file>");
d256 1
a256 1
			BIO_printf(bio_err,"bf      :128 bit key BlowFish encryption\n");
d380 8
d417 32
d453 41
a493 1
			EVP_BytesToKey(cipher,EVP_md5(),NULL,
d527 7
a555 32

	if (outf == NULL)
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
	else
		{
		if (BIO_write_filename(out,outf) <= 0)
			{
			perror(outf);
			goto end;
			}
		}

	rbio=in;
	wbio=out;

	if (base64)
		{
		if ((b64=BIO_new(BIO_f_base64())) == NULL)
			goto end;
		if (debug)
			{
			BIO_set_callback(b64,BIO_debug_callback);
			BIO_set_callback_arg(b64,bio_err);
			}
		if (olb64)
			BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);
		if (enc)
			wbio=BIO_push(b64,wbio);
		else
			rbio=BIO_push(b64,rbio);
		}

d583 1
d590 1
@


1.1
log
@Initial revision
@
text
@d63 7
a69 7
#include "bio.h"
#include "err.h"
#include "evp.h"
#include "objects.h"
#include "x509.h"
#ifdef NO_MD5
#include "md5.h"
d71 1
a71 1
#include "pem.h"
a72 1
#ifndef NOPROTO
a73 4
#else
int set_hex();
#endif

d82 1
a82 3
int MAIN(argc,argv)
int argc;
char **argv;
d93 1
a93 1
	EVP_CIPHER *cipher=NULL,*c;
d97 1
a97 1
        char pname[PROG_NAME_SIZE];
d106 1
a106 1
        program_name(argv[0],pname,PROG_NAME_SIZE);
d235 1
a235 1
#ifndef NO_BLOWFISH
d273 1
a273 1
#ifndef NO_BLOWFISH
d279 1
a279 1
#ifndef NO_BLOWFISH
d285 1
a285 1
#ifndef NO_BLOWFISH
d517 1
a517 4
int set_hex(in,out,size)
char *in;
unsigned char *out;
int size;
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 9
a71 8
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/objects.h>
#include <openssl/x509.h>
#include <openssl/rand.h>
#include <openssl/pem.h>
#include <ctype.h>
d73 1
d75 4
d87 3
a89 1
void show_ciphers(const OBJ_NAME *name,void *bio_)
a90 23
	BIO *bio=bio_;
	static int n;

	if(!islower((unsigned char)*name->name))
		return;

	BIO_printf(bio,"-%-25s",name->name);
	if(++n == 3)
		{
		BIO_printf(bio,"\n");
		n=0;
		}
	else
		BIO_printf(bio," ");
	}

int MAIN(int, char **);

int MAIN(int argc, char **argv)
	{
	ENGINE *e = NULL;
	static const char magic[]="Salted__";
	char mbuf[8];	/* should be 1 smaller than magic */
d95 3
a97 5
	int nopad = 0;
	unsigned char key[EVP_MAX_KEY_LENGTH],iv[EVP_MAX_IV_LENGTH];
	unsigned char salt[PKCS5_SALT_LEN];
	char *str=NULL, *passarg = NULL, *pass = NULL;
	char *hkey=NULL,*hiv=NULL,*hsalt = NULL;
d99 2
a100 2
	int debug=0,olb64=0,nosalt=0;
	const EVP_CIPHER *cipher=NULL,*c;
d103 2
a104 3
#define PROG_NAME_SIZE  39
	char pname[PROG_NAME_SIZE+1];
	char *engine = NULL;
a111 3
	if (!load_config(bio_err, NULL))
		goto end;

d113 1
a113 1
	program_name(argv[0],pname,PROG_NAME_SIZE);
a139 10
		else if (strcmp(*argv,"-pass") == 0)
			{
			if (--argc < 1) goto bad;
			passarg= *(++argv);
			}
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d146 2
a147 7
		else if	(strcmp(*argv,"-nopad") == 0)
			nopad=1;
		else if	(strcmp(*argv,"-salt") == 0)
			nosalt=0;
		else if	(strcmp(*argv,"-nosalt") == 0)
			nosalt=1;
		else if	(strcmp(*argv,"-debug") == 0)
a203 5
		else if (strcmp(*argv,"-S") == 0)
			{
			if (--argc < 1) goto bad;
			hsalt= *(++argv);
			}
d222 1
a222 2
			BIO_printf(bio_err,"%-14s output file\n","-out <file>");
			BIO_printf(bio_err,"%-14s pass phrase source\n","-pass <arg>");
a230 1
			BIO_printf(bio_err,"%-14s use engine e, possibly a hardware device.\n","-engine e");
d233 16
a248 4
			OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,
					       show_ciphers,
					       bio_err);
			BIO_printf(bio_err,"\n");
d250 48
a303 2
        e = setup_engine(bio_err, engine, 0);

d333 2
a334 2
	strbuf=OPENSSL_malloc(SIZE);
	buff=(unsigned char *)OPENSSL_malloc(EVP_ENCODE_LENGTH(bsize));
d337 1
a337 1
		BIO_printf(bio_err,"OPENSSL_malloc failure %ld\n",(long)EVP_ENCODE_LENGTH(bsize));
a366 8
	if(!str && passarg) {
		if(!app_passwd(bio_err, passarg, NULL, &pass, NULL)) {
			BIO_printf(bio_err, "Error getting password\n");
			goto end;
		}
		str = pass;
	}

a395 40

	if (outf == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
	else
		{
		if (BIO_write_filename(out,outf) <= 0)
			{
			perror(outf);
			goto end;
			}
		}

	rbio=in;
	wbio=out;

	if (base64)
		{
		if ((b64=BIO_new(BIO_f_base64())) == NULL)
			goto end;
		if (debug)
			{
			BIO_set_callback(b64,BIO_debug_callback);
			BIO_set_callback_arg(b64,bio_err);
			}
		if (olb64)
			BIO_set_flags(b64,BIO_FLAGS_BASE64_NO_NL);
		if (enc)
			wbio=BIO_push(b64,wbio);
		else
			rbio=BIO_push(b64,rbio);
		}

a397 3
		/* Note that str is NULL if a key was passed on the command
		 * line, so we get no salt in that case. Is this a bug?
		 */
d400 1
a400 41
			/* Salt handling: if encrypting generate a salt and
			 * write to output BIO. If decrypting read salt from
			 * input BIO.
			 */
			unsigned char *sptr;
			if(nosalt) sptr = NULL;
			else {
				if(enc) {
					if(hsalt) {
						if(!set_hex(hsalt,salt,PKCS5_SALT_LEN)) {
							BIO_printf(bio_err,
								"invalid hex salt value\n");
							goto end;
						}
					} else if (RAND_pseudo_bytes(salt, PKCS5_SALT_LEN) < 0)
						goto end;
					/* If -P option then don't bother writing */
					if((printkey != 2)
					   && (BIO_write(wbio,magic,
							 sizeof magic-1) != sizeof magic-1
					       || BIO_write(wbio,
							    (char *)salt,
							    PKCS5_SALT_LEN) != PKCS5_SALT_LEN)) {
						BIO_printf(bio_err,"error writing output file\n");
						goto end;
					}
				} else if(BIO_read(rbio,mbuf,sizeof mbuf) != sizeof mbuf
					  || BIO_read(rbio,
						      (unsigned char *)salt,
				    PKCS5_SALT_LEN) != PKCS5_SALT_LEN) {
					BIO_printf(bio_err,"error reading input file\n");
					goto end;
				} else if(memcmp(mbuf,magic,sizeof magic-1)) {
				    BIO_printf(bio_err,"bad magic number\n");
				    goto end;
				}

				sptr = salt;
			}

			EVP_BytesToKey(cipher,EVP_md5(),sptr,
d412 1
a412 1
		if ((hiv != NULL) && !set_hex(hiv,iv,sizeof iv))
d417 1
a417 9
		if ((hiv == NULL) && (str == NULL))
			{
			/* No IV was explicitly set and no IV was generated
			 * during EVP_BytesToKey. Hence the IV is undefined,
			 * making correct decryption impossible. */
			BIO_printf(bio_err, "iv undefined\n");
			goto end;
			}
		if ((hkey != NULL) && !set_hex(hkey,key,sizeof key))
a425 6
		if (nopad)
			{
			EVP_CIPHER_CTX *ctx;
			BIO_get_cipher_ctx(benc, &ctx);
			EVP_CIPHER_CTX_set_padding(ctx, 0);
			}
a433 7
			if (!nosalt)
				{
				printf("salt=");
				for (i=0; i<PKCS5_SALT_LEN; i++)
					printf("%02X",salt[i]);
				printf("\n");
				}
d456 32
d515 2
a516 3
	ERR_print_errors(bio_err);
	if (strbuf != NULL) OPENSSL_free(strbuf);
	if (buff != NULL) OPENSSL_free(buff);
d518 1
a518 1
	if (out != NULL) BIO_free_all(out);
a520 2
	if(pass) OPENSSL_free(pass);
	apps_shutdown();
d524 4
a527 1
int set_hex(char *in, unsigned char *out, int size)
@


1.1.1.3
log
@import openssl-0.9.7-beta3
@
text
@d81 1
a81 1
static void show_ciphers(const OBJ_NAME *name,void *bio_)
@


1.1.1.4
log
@import 0.9.7b (without idea and rc5)
@
text
@a102 1
#ifndef OPENSSL_NO_ENGINE
a103 1
#endif
d105 1
a105 1
	char mbuf[sizeof magic-1];
a121 1
#ifndef OPENSSL_NO_ENGINE
a122 1
#endif
d134 1
a134 1
	program_name(argv[0],pname,sizeof pname);
a165 1
#ifndef OPENSSL_NO_ENGINE
a170 1
#endif
d219 1
a219 1
			fgets(buf,sizeof buf,infile);
a272 1
#ifndef OPENSSL_NO_ENGINE
a273 1
#endif
a286 1
#ifndef OPENSSL_NO_ENGINE
a287 1
#endif
d445 1
a445 1
						if(!set_hex(hsalt,salt,sizeof salt)) {
d450 1
a450 1
					} else if (RAND_pseudo_bytes(salt, sizeof salt) < 0)
d458 1
a458 1
							    sizeof salt) != sizeof salt)) {
d465 1
a465 1
				    sizeof salt) != sizeof salt) {
d484 1
a484 1
				OPENSSL_cleanse(str,SIZE);
d486 1
a486 1
				OPENSSL_cleanse(str,strlen(str));
d527 1
a527 1
				for (i=0; i<sizeof salt; i++)
d589 1
a589 1
	OPENSSL_EXIT(ret);
@


1.1.1.5
log
@import openssl-0.9.7d
@
text
@d376 3
a378 3
			BIO_snprintf(buf,sizeof buf,"enter %s %s password:",
				     OBJ_nid2ln(EVP_CIPHER_nid(cipher)),
				     (enc)?"encryption":"decryption");
@


1.1.1.6
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a116 1
	char *md=NULL;
a119 1
	EVP_CIPHER_CTX *ctx = NULL;
a126 2
	const EVP_MD *dgst=NULL;
	int non_fips_allow = 0;
a255 7
		else if (strcmp(*argv,"-md") == 0)
			{
			if (--argc < 1) goto bad;
			md= *(++argv);
			}
		else if (strcmp(*argv,"-non-fips-allow") == 0)
			non_fips_allow = 1;
d274 2
a275 4
			BIO_printf(bio_err,"%-14s passphrase is the next argument\n","-k");
			BIO_printf(bio_err,"%-14s passphrase is the first line of the file argument\n","-kfile");
			BIO_printf(bio_err,"%-14s the next argument is the md to use to create a key\n","-md");
			BIO_printf(bio_err,"%-14s   from a passphrase.  One of md2, md5, sha or sha1\n","");
a298 14
	if (md && (dgst=EVP_get_digestbyname(md)) == NULL)
		{
		BIO_printf(bio_err,"%s is an unsupported message digest type\n",md);
		goto end;
		}

	if (dgst == NULL)
		{
		if (in_FIPS_mode)
			dgst = EVP_sha1();
		else
			dgst = EVP_md5();
		}

d486 1
a486 1
			EVP_BytesToKey(cipher,dgst,sptr,
d519 2
a520 7

		/* Since we may be changing parameters work on the encryption
		 * context rather than calling BIO_set_cipher().
		 */

		BIO_get_cipher_ctx(benc, &ctx);
		if (!EVP_CipherInit_ex(ctx, cipher, NULL, NULL, NULL, enc))
d522 2
a523 19
			BIO_printf(bio_err, "Error setting cipher %s\n",
					EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
			}

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);

		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc))
			{
			BIO_printf(bio_err, "Error setting cipher %s\n",
					EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
			}

		if (nopad)
a524 7

		if (!EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, enc))
			{
			BIO_printf(bio_err, "Error setting cipher %s\n",
					EVP_CIPHER_name(cipher));
			ERR_print_errors(bio_err);
			goto end;
a525 1

@


1.1.1.7
log
@import of OpenSSL 0.9.8h
@
text
@d130 1
d265 2
d320 4
a323 1
		dgst = EVP_md5();
d349 1
a349 1
		if (base64 && n < 80) n=80;
d374 2
a375 2
		BIO_set_callback_arg(in,(char *)bio_err);
		BIO_set_callback_arg(out,(char *)bio_err);
a378 3
	        {
		if (bufsize != NULL)
			setvbuf(stdin, (char *)NULL, _IONBF, 0);
a379 1
	        }
a429 2
		if (bufsize != NULL)
			setvbuf(stdout, (char *)NULL, _IONBF, 0);
d456 1
a456 1
			BIO_set_callback_arg(b64,(char *)bio_err);
d555 13
a567 1
				EVP_CIPHER_name(cipher));
d578 1
a578 1
				EVP_CIPHER_name(cipher));
d586 1
a586 1
			BIO_set_callback_arg(benc,(char *)bio_err);
d594 1
a594 1
				for (i=0; i<(int)sizeof(salt); i++)
@


1.1.1.8
log
@import openssl-0.9.8j
@
text
@a129 1
	int non_fips_allow = 0;
a263 2
		else if (strcmp(*argv,"-non-fips-allow") == 0)
			non_fips_allow = 1;
d317 1
a317 4
		if (in_FIPS_mode)
			dgst = EVP_sha1();
		else
			dgst = EVP_md5();
a551 5

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);

@


1.1.1.9
log
@import of OpenSSL 0.9.8k
@
text
@d536 1
a536 2
		if ((hiv == NULL) && (str == NULL)
		    && EVP_CIPHER_iv_length(cipher) != 0)
@


1.1.1.10
log
@import OpenSSL-1.0.0a
@
text
@a69 1
#include <openssl/comp.h>
a118 4
#ifdef ZLIB
	int do_zlib=0;
	BIO *bzl = NULL;
#endif
d130 1
a144 4
#ifdef ZLIB
	if (strcmp(pname,"zlib") == 0)
		do_zlib=1;
#endif
a146 4
#ifdef ZLIB
	if (!do_zlib && !base64 && (cipher == NULL)
				&& (strcmp(pname,"enc") != 0))
#else
a147 1
#endif
a202 4
#ifdef ZLIB
		else if	(strcmp(*argv,"-z") == 0)
			do_zlib=1;
#endif
d229 1
a229 6
			if (!fgets(buf,sizeof buf,infile))
				{
				BIO_printf(bio_err,"unable to read key from '%s'\n",
					file);
				goto bad;
				}
d265 2
a288 1
			BIO_printf(bio_err,"%-14s salt in hex is the next argument\n","-S");
a291 1
			BIO_printf(bio_err,"%-14s disable standard block padding\n","-nopad");
d320 4
a323 1
		dgst = EVP_md5();
a454 13
#ifdef ZLIB

	if (do_zlib)
		{
		if ((bzl=BIO_new(BIO_f_zlib())) == NULL)
			goto end;
		if (enc)
			wbio=BIO_push(bzl,wbio);
		else
			rbio=BIO_push(bzl,rbio);
		}
#endif

d559 5
a653 3
#ifdef ZLIB
	if (bzl != NULL) BIO_free(bzl);
#endif
@


1.1.1.11
log
@import OpenSSL 1.0.0e
@
text
@d104 3
d331 1
a331 1
        setup_engine(bio_err, engine, 0);
a398 1
#ifndef OPENSSL_NO_SETVBUF_IONBF
a400 1
#endif /* ndef OPENSSL_NO_SETVBUF_IONBF */
a452 1
#ifndef OPENSSL_NO_SETVBUF_IONBF
a454 1
#endif /* ndef OPENSSL_NO_SETVBUF_IONBF */
@


1.1.1.12
log
@import OpenSSL-1.0.1c
@
text
@a131 1
	int non_fips_allow = 0;
a283 2
		else if (strcmp(*argv,"-non-fips-allow") == 0)
			non_fips_allow = 1;
a591 5

		if (non_fips_allow)
			EVP_CIPHER_CTX_set_flags(ctx,
				EVP_CIPH_FLAG_NON_FIPS_ALLOW);

@


