head	1.13;
access;
symbols
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.16
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.12
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.6
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.8
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	openssh_1_0_0_a:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	openssl_0_9_8_k:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	openssl_0_9_8_j:1.1.1.2
	openssl_0_9_8_h:1.1.1.2
	pre_openssl_0_9_8h:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	OPENSSL_0_9_7G:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.12;
commitid	7A7DObXgY4Fni8xJ;

1.12
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	EB0l28piqIRSpBUh;

1.11
date	2014.06.28.04.39.41;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	gGtvlhTlvaxlmOBo;

1.10
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	mJUVYpkFBZ0Zv2bG;

1.9
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.29.05.36.59;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.04.29.05.36.59;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: prime.c,v 1.12 2014/07/14 00:35:10 deraadt Exp $ */
/* ====================================================================
 * Copyright (c) 2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <string.h>
#include <limits.h>

#include "apps.h"

#include <openssl/bn.h>

int prime_main(int, char **);

int
prime_main(int argc, char **argv)
{
	int hex = 0;
	int checks = 20;
	int generate = 0;
	int bits = 0;
	int safe = 0;
	BIGNUM *bn = NULL;
	const char *errstr = NULL;
	BIO *bio_out;

	--argc;
	++argv;
	while (argc >= 1 && **argv == '-') {
		if (!strcmp(*argv, "-hex"))
			hex = 1;
		else if (!strcmp(*argv, "-generate"))
			generate = 1;
		else if (!strcmp(*argv, "-bits")) {
			if (--argc < 1)
				goto bad;
			else
				bits = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else if (!strcmp(*argv, "-safe"))
			safe = 1;
		else if (!strcmp(*argv, "-checks")) {
			if (--argc < 1)
				goto bad;
			else
				checks = strtonum(*(++argv), 0, INT_MAX, &errstr);
			if (errstr)
				goto bad;
		} else {
			BIO_printf(bio_err, "Unknown option '%s'\n", *argv);
			goto bad;
		}
		--argc;
		++argv;
	}

	if (argv[0] == NULL && !generate) {
		BIO_printf(bio_err, "No prime specified\n");
		goto bad;
	}
	if ((bio_out = BIO_new(BIO_s_file())) != NULL) {
		BIO_set_fp(bio_out, stdout, BIO_NOCLOSE);
	}
	if (generate) {
		char *s;

		if (!bits) {
			BIO_printf(bio_err, "Specifiy the number of bits.\n");
			return 1;
		}
		bn = BN_new();
		BN_generate_prime_ex(bn, bits, safe, NULL, NULL, NULL);
		s = hex ? BN_bn2hex(bn) : BN_bn2dec(bn);
		BIO_printf(bio_out, "%s\n", s);
		free(s);
	} else {
		if (hex)
			BN_hex2bn(&bn, argv[0]);
		else
			BN_dec2bn(&bn, argv[0]);

		BN_print(bio_out, bn);
		BIO_printf(bio_out, " is %sprime\n",
		    BN_is_prime_ex(bn, checks, NULL, NULL) ? "" : "not ");
	}

	BN_free(bn);
	BIO_free_all(bio_out);

	return 0;

bad:
	if (errstr)
		BIO_printf(bio_err, "invalid argument %s: %s\n", *argv, errstr);
	else {
		BIO_printf(bio_err, "options are\n");
		BIO_printf(bio_err, "%-14s hex\n", "-hex");
		BIO_printf(bio_err, "%-14s number of checks\n", "-checks <n>");
	}
	return 1;
}
@


1.12
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: prime.c,v 1.11 2014/06/28 04:39:41 deraadt Exp $ */
@


1.11
log
@Use strtonum() instead of atoi(), and then impose what are we think
are the current range checks.  Help from millert and lteo.  Please test
now that it is deployed and let us know if any numbers are off..
ok lteo
@
text
@d1 1
a1 1
/* $OpenBSD: prime.c,v 1.10 2014/06/12 15:49:27 deraadt Exp $ */
d60 1
a60 1
int 
@


1.10
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d52 1
d69 1
d79 1
a79 1
		else if (!strcmp(*argv, "-bits"))
d83 4
a86 2
				bits = atoi(*++argv);
		else if (!strcmp(*argv, "-safe"))
d88 1
a88 1
		else if (!strcmp(*argv, "-checks"))
d92 4
a95 2
				checks = atoi(*++argv);
		else {
d139 7
a145 3
	BIO_printf(bio_err, "options are\n");
	BIO_printf(bio_err, "%-14s hex\n", "-hex");
	BIO_printf(bio_err, "%-14s number of checks\n", "-checks <n>");
@


1.9
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
@


1.8
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a68 2
	signal(SIGPIPE, SIG_IGN);

@


1.7
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d53 1
a54 2


@


1.6
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a71 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.5
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d70 1
a70 1
	apps_startup();
@


1.4
log
@KaboomNF
@
text
@a55 2
#undef PROG
#define PROG prime_main
d57 1
a57 1
int MAIN(int, char **);
d60 1
a60 1
MAIN(int argc, char **argv)
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer. 
d61 17
a77 41
int MAIN(int argc, char **argv)
    {
    int hex=0;
    int checks=20;
    int generate=0;
    int bits=0;
    int safe=0;
    BIGNUM *bn=NULL;
    BIO *bio_out;

    apps_startup();

    if (bio_err == NULL)
	if ((bio_err=BIO_new(BIO_s_file())) != NULL)
	    BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);

    --argc;
    ++argv;
    while (argc >= 1 && **argv == '-')
	{
	if(!strcmp(*argv,"-hex"))
	    hex=1;
	else if(!strcmp(*argv,"-generate"))
	    generate=1;
	else if(!strcmp(*argv,"-bits"))
	    if(--argc < 1)
		goto bad;
	    else
		bits=atoi(*++argv);
	else if(!strcmp(*argv,"-safe"))
	    safe=1;
	else if(!strcmp(*argv,"-checks"))
	    if(--argc < 1)
		goto bad;
	    else
		checks=atoi(*++argv);
	else
	    {
	    BIO_printf(bio_err,"Unknown option '%s'\n",*argv);
	    goto bad;
	    }
d80 23
d105 3
a107 4
    if (argv[0] == NULL && !generate)
	{
	BIO_printf(bio_err,"No prime specified\n");
	goto bad;
d109 2
a110 4

    if ((bio_out=BIO_new(BIO_s_file())) != NULL)
	{
	BIO_set_fp(bio_out,stdout,BIO_NOCLOSE);
d112 2
d115 18
a132 25
    if(generate)
	{
	char *s;

	if(!bits)
	    {
	    BIO_printf(bio_err,"Specifiy the number of bits.\n");
	    return 1;
	    }
	bn=BN_new();
	BN_generate_prime_ex(bn,bits,safe,NULL,NULL,NULL);
	s=hex ? BN_bn2hex(bn) : BN_bn2dec(bn);
	BIO_printf(bio_out,"%s\n",s);
	free(s);
	}
    else
	{
	if(hex)
	    BN_hex2bn(&bn,argv[0]);
	else
	    BN_dec2bn(&bn,argv[0]);

	BN_print(bio_out,bn);
	BIO_printf(bio_out," is %sprime\n",
		   BN_is_prime_ex(bn,checks,NULL,NULL) ? "" : "not ");
d135 2
a136 2
    BN_free(bn);
    BIO_free_all(bio_out);
d138 1
a138 1
    return 0;
d140 6
a145 6
    bad:
    BIO_printf(bio_err,"options are\n");
    BIO_printf(bio_err,"%-14s hex\n","-hex");
    BIO_printf(bio_err,"%-14s number of checks\n","-checks <n>");
    return 1;
    }
@


1.2
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d130 1
a130 1
	OPENSSL_free(s);
@


1.1
log
@Initial revision
@
text
@d59 2
d65 3
d83 9
d106 1
a106 1
    if (argv[0] == NULL)
d112 1
a112 1
   if ((bio_out=BIO_new(BIO_s_file())) != NULL)
d115 7
a121 1
#ifdef OPENSSL_SYS_VMS
d123 2
a124 2
	    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
	    bio_out = BIO_push(tmpbio, bio_out);
d126 5
a130 1
#endif
a131 3

    if(hex)
	BN_hex2bn(&bn,argv[0]);
d133 5
a137 1
	BN_dec2bn(&bn,argv[0]);
d139 4
a142 3
    BN_print(bio_out,bn);
    BIO_printf(bio_out," is %sprime\n",
	       BN_is_prime(bn,checks,NULL,NULL,NULL) ? "" : "not ");
@


1.1.1.1
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@@


1.1.1.2
log
@import of OpenSSL 0.9.8h
@
text
@a58 2
int MAIN(int, char **);

d116 1
a116 1
	       BN_is_prime_ex(bn,checks,NULL,NULL) ? "" : "not ");
@


1.1.1.3
log
@import OpenSSL-1.0.0a
@
text
@a64 3
    int generate=0;
    int bits=0;
    int safe=0;
a79 9
	else if(!strcmp(*argv,"-generate"))
	    generate=1;
	else if(!strcmp(*argv,"-bits"))
	    if(--argc < 1)
		goto bad;
	    else
		bits=atoi(*++argv);
	else if(!strcmp(*argv,"-safe"))
	    safe=1;
d94 1
a94 1
    if (argv[0] == NULL && !generate)
d100 1
a100 1
    if ((bio_out=BIO_new(BIO_s_file())) != NULL)
d111 2
a112 15
    if(generate)
	{
	char *s;

	if(!bits)
	    {
	    BIO_printf(bio_err,"Specifiy the number of bits.\n");
	    return 1;
	    }
	bn=BN_new();
	BN_generate_prime_ex(bn,bits,safe,NULL,NULL,NULL);
	s=hex ? BN_bn2hex(bn) : BN_bn2dec(bn);
	BIO_printf(bio_out,"%s\n",s);
	OPENSSL_free(s);
	}
d114 1
a114 5
	{
	if(hex)
	    BN_hex2bn(&bn,argv[0]);
	else
	    BN_dec2bn(&bn,argv[0]);
d116 3
a118 4
	BN_print(bio_out,bn);
	BIO_printf(bio_out," is %sprime\n",
		   BN_is_prime_ex(bn,checks,NULL,NULL) ? "" : "not ");
	}
@


