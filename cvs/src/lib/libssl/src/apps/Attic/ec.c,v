head	1.18;
access;
symbols
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	butholakala:1.1.1.3
	openssl_1_0_1_g:1.1.1.3
	OPENSSL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.12
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.8
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.6
	OPENBSD_5_3_BASE:1.1.1.3
	openssl_1_0_1_c:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.2
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.4
	openssl_1_0_0_f:1.1.1.3
	openssl_1_0_0_e:1.1.1.3
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	openssh_1_0_0_a:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	openssl:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.17;
commitid	7A7DObXgY4Fni8xJ;

1.17
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.16;
commitid	DnBLYuKKjvrWeH3R;

1.16
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	EB0l28piqIRSpBUh;

1.15
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.14;
commitid	0NuggCO2WJOZj8Kh;

1.14
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	mJUVYpkFBZ0Zv2bG;

1.13
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.17.15.30.56;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: ec.c,v 1.17 2014/07/25 06:05:32 doug Exp $ */
/*
 * Written by Nils Larsch for the OpenSSL project.
 */
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_EC

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>

/* -inform arg    - input format - default PEM (one of DER, NET or PEM)
 * -outform arg   - output format - default PEM
 * -in arg        - input file - default stdin
 * -out arg       - output file - default stdout
 * -des           - encrypt output if PEM format with DES in cbc mode
 * -text          - print a text version
 * -param_out     - print the elliptic curve parameters
 * -conv_form arg - specifies the point encoding form
 * -param_enc arg - specifies the parameter encoding
 */

int ec_main(int, char **);

int
ec_main(int argc, char **argv)
{
	int ret = 1;
	EC_KEY *eckey = NULL;
	const EC_GROUP *group;
	int i, badops = 0;
	const EVP_CIPHER *enc = NULL;
	BIO *in = NULL, *out = NULL;
	int informat, outformat, text = 0, noout = 0;
	int pubin = 0, pubout = 0, param_out = 0;
	char *infile, *outfile, *prog, *engine;
	char *passargin = NULL, *passargout = NULL;
	char *passin = NULL, *passout = NULL;
	point_conversion_form_t form = POINT_CONVERSION_UNCOMPRESSED;
	int new_form = 0;
	int asn1_flag = OPENSSL_EC_NAMED_CURVE;
	int new_asn1_flag = 0;

	engine = NULL;
	infile = NULL;
	outfile = NULL;
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passin") == 0) {
			if (--argc < 1)
				goto bad;
			passargin = *(++argv);
		} else if (strcmp(*argv, "-passout") == 0) {
			if (--argc < 1)
				goto bad;
			passargout = *(++argv);
		} else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		} else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-conv_form") == 0) {
			if (--argc < 1)
				goto bad;
			++argv;
			new_form = 1;
			if (strcmp(*argv, "compressed") == 0)
				form = POINT_CONVERSION_COMPRESSED;
			else if (strcmp(*argv, "uncompressed") == 0)
				form = POINT_CONVERSION_UNCOMPRESSED;
			else if (strcmp(*argv, "hybrid") == 0)
				form = POINT_CONVERSION_HYBRID;
			else
				goto bad;
		} else if (strcmp(*argv, "-param_enc") == 0) {
			if (--argc < 1)
				goto bad;
			++argv;
			new_asn1_flag = 1;
			if (strcmp(*argv, "named_curve") == 0)
				asn1_flag = OPENSSL_EC_NAMED_CURVE;
			else if (strcmp(*argv, "explicit") == 0)
				asn1_flag = 0;
			else
				goto bad;
		} else if (strcmp(*argv, "-param_out") == 0)
			param_out = 1;
		else if (strcmp(*argv, "-pubin") == 0)
			pubin = 1;
		else if (strcmp(*argv, "-pubout") == 0)
			pubout = 1;
		else if ((enc = EVP_get_cipherbyname(&(argv[0][1]))) == NULL) {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options] <infile >outfile\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -inform arg     input format - "
		    "DER or PEM\n");
		BIO_printf(bio_err, " -outform arg    output format - "
		    "DER or PEM\n");
		BIO_printf(bio_err, " -in arg         input file\n");
		BIO_printf(bio_err, " -passin arg     input file pass "
		    "phrase source\n");
		BIO_printf(bio_err, " -out arg        output file\n");
		BIO_printf(bio_err, " -passout arg    output file pass "
		    "phrase source\n");
		BIO_printf(bio_err, " -engine e       use engine e, "
		    "possibly a hardware device.\n");
		BIO_printf(bio_err, " -des            encrypt PEM output, "
		    "instead of 'des' every other \n"
		    "                 cipher "
		    "supported by OpenSSL can be used\n");
		BIO_printf(bio_err, " -text           print the key\n");
		BIO_printf(bio_err, " -noout          don't print key out\n");
		BIO_printf(bio_err, " -param_out      print the elliptic "
		    "curve parameters\n");
		BIO_printf(bio_err, " -conv_form arg  specifies the "
		    "point conversion form \n");
		BIO_printf(bio_err, "                 possible values:"
		    " compressed\n");
		BIO_printf(bio_err, "                                 "
		    " uncompressed (default)\n");
		BIO_printf(bio_err, "                                  "
		    " hybrid\n");
		BIO_printf(bio_err, " -param_enc arg  specifies the way"
		    " the ec parameters are encoded\n");
		BIO_printf(bio_err, "                 in the asn1 der "
		    "encoding\n");
		BIO_printf(bio_err, "                 possible values:"
		    " named_curve (default)\n");
		BIO_printf(bio_err, "                                  "
		    "explicit\n");
		goto end;
	}
	ERR_load_crypto_strings();

#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	if (!app_passwd(bio_err, passargin, passargout, &passin, &passout)) {
		BIO_printf(bio_err, "Error getting passwords\n");
		goto end;
	}
	in = BIO_new(BIO_s_file());
	out = BIO_new(BIO_s_file());
	if ((in == NULL) || (out == NULL)) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}

	BIO_printf(bio_err, "read EC key\n");
	if (informat == FORMAT_ASN1) {
		if (pubin)
			eckey = d2i_EC_PUBKEY_bio(in, NULL);
		else
			eckey = d2i_ECPrivateKey_bio(in, NULL);
	} else if (informat == FORMAT_PEM) {
		if (pubin)
			eckey = PEM_read_bio_EC_PUBKEY(in, NULL, NULL,
			    NULL);
		else
			eckey = PEM_read_bio_ECPrivateKey(in, NULL, NULL,
			    passin);
	} else {
		BIO_printf(bio_err, "bad input format specified for key\n");
		goto end;
	}
	if (eckey == NULL) {
		BIO_printf(bio_err, "unable to load Key\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	group = EC_KEY_get0_group(eckey);

	if (new_form)
		EC_KEY_set_conv_form(eckey, form);

	if (new_asn1_flag)
		EC_KEY_set_asn1_flag(eckey, asn1_flag);

	if (text)
		if (!EC_KEY_print(out, eckey, 0)) {
			perror(outfile);
			ERR_print_errors(bio_err);
			goto end;
		}
	if (noout) {
		ret = 0;
		goto end;
	}
	BIO_printf(bio_err, "writing EC key\n");
	if (outformat == FORMAT_ASN1) {
		if (param_out)
			i = i2d_ECPKParameters_bio(out, group);
		else if (pubin || pubout)
			i = i2d_EC_PUBKEY_bio(out, eckey);
		else
			i = i2d_ECPrivateKey_bio(out, eckey);
	} else if (outformat == FORMAT_PEM) {
		if (param_out)
			i = PEM_write_bio_ECPKParameters(out, group);
		else if (pubin || pubout)
			i = PEM_write_bio_EC_PUBKEY(out, eckey);
		else
			i = PEM_write_bio_ECPrivateKey(out, eckey, enc,
			    NULL, 0, NULL, passout);
	} else {
		BIO_printf(bio_err, "bad output format specified for "
		    "outfile\n");
		goto end;
	}

	if (!i) {
		BIO_printf(bio_err, "unable to write private key\n");
		ERR_print_errors(bio_err);
	} else
		ret = 0;
end:
	BIO_free(in);
	if (out)
		BIO_free_all(out);
	if (eckey)
		EC_KEY_free(eckey);
	free(passin);
	free(passout);

	return (ret);
}
#endif
@


1.17
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec.c,v 1.16 2014/07/14 00:35:10 deraadt Exp $ */
@


1.16
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: ec.c,v 1.15 2014/07/12 17:54:31 jsing Exp $ */
d331 1
a331 2
	if (in)
		BIO_free(in);
@


1.15
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: ec.c,v 1.14 2014/06/12 15:49:27 deraadt Exp $ */
d339 1
a339 1
	
@


1.14
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a104 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.13
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/ec.c */
@


1.12
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a105 2
	signal(SIGPIPE, SIG_IGN);

@


1.11
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d342 2
a343 4
	if (passin)
		free(passin);
	if (passout)
		free(passout);
@


1.10
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d60 1
d62 1
d66 1
d68 1
a72 1

@


1.9
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a104 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.8
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d103 1
a103 1
	apps_startup();
d347 1
a347 1
	apps_shutdown();
@


1.7
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a349 6
#else				/* !OPENSSL_NO_EC */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.6
log
@KaboomNF
@
text
@a69 2
#undef PROG
#define PROG	ec_main
d82 1
a82 1
int MAIN(int, char **);
d85 1
a85 1
MAIN(int argc, char **argv)
@


1.5
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d89 2
a90 2
	int 	ret = 1;
	EC_KEY 	*eckey = NULL;
d92 1
a92 1
	int 	i, badops = 0;
d94 6
a99 6
	BIO 	*in = NULL, *out = NULL;
	int 	informat, outformat, text = 0, noout = 0;
	int  	pubin = 0, pubout = 0, param_out = 0;
	char 	*infile, *outfile, *prog, *engine;
	char 	*passargin = NULL, *passargout = NULL;
	char 	*passin = NULL, *passout = NULL;
d101 3
a103 3
	int	new_form = 0;
	int	asn1_flag = OPENSSL_EC_NAMED_CURVE;
	int 	new_asn1_flag = 0;
d109 1
a109 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d135 1
a135 1
			infile= *(++argv);
d139 1
a139 1
			outfile= *(++argv);
d143 1
a143 1
			passargin= *(++argv);
d147 1
a147 1
			passargout= *(++argv);
d151 1
a151 1
			engine= *(++argv);
d212 2
a213 2
		"instead of 'des' every other \n"
		"                 cipher "
a236 1

a246 1

a252 1

a283 1

a306 1

a310 1

d326 1
a326 1
		    NULL, 0, NULL, passout);
d350 1
a350 1
	return(ret);
d352 1
a352 1
#else /* !OPENSSL_NO_EC */
d354 1
a354 1
# if PEDANTIC
d356 1
a356 1
# endif
@


1.4
log
@Initial KNF.
@
text
@d356 1
a356 1
	OPENSSL_EXIT(ret);
@


1.3
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d86 2
a87 1
int MAIN(int argc, char **argv)
d95 1
a95 1
	int 	informat, outformat, text=0, noout=0;
d108 1
a108 1
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
d123 12
a134 15
	while (argc >= 1)
		{
		if (strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d136 3
a138 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d140 3
a142 4
			}
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
d144 3
a146 4
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
d148 3
a150 4
			}
		else if (strcmp(*argv, "-engine") == 0)
			{
			if (--argc < 1) goto bad;
d152 1
a152 2
			}
		else if (strcmp(*argv, "-noout") == 0)
d156 1
a156 2
		else if (strcmp(*argv, "-conv_form") == 0)
			{
d169 1
a169 3
			}
		else if (strcmp(*argv, "-param_enc") == 0)
			{
d180 1
a180 2
			}
		else if (strcmp(*argv, "-param_out") == 0)
d183 1
a183 1
			pubin=1;
d185 2
a186 3
			pubout=1;
		else if ((enc=EVP_get_cipherbyname(&(argv[0][1]))) == NULL)
			{
d188 1
a188 1
			badops=1;
d190 1
a190 1
			}
d193 1
a193 1
		}
d195 1
a195 2
	if (badops)
		{
d200 1
a200 1
				"DER or PEM\n");
d202 1
a202 1
				"DER or PEM\n");
d205 1
a205 1
				"phrase source\n");
d208 1
a208 1
				"phrase source\n");
d210 1
a210 1
				"possibly a hardware device.\n");
d212 3
a214 3
				"instead of 'des' every other \n"
				"                 cipher "
				"supported by OpenSSL can be used\n");
d218 1
a218 1
				"curve parameters\n");
d220 1
a220 1
				"point conversion form \n");
d222 1
a222 1
				" compressed\n");
d224 1
a224 1
				" uncompressed (default)\n");
d226 1
a226 1
				" hybrid\n");
d228 1
a228 1
				" the ec parameters are encoded\n");
d230 1
a230 1
				"encoding\n");
d232 3
a234 3
				" named_curve (default)\n");
		BIO_printf(bio_err,"                                  "
				"explicit\n");
d236 1
a236 1
		}
d241 1
a241 1
        setup_engine(bio_err, engine, 0);
d244 1
a244 2
	if(!app_passwd(bio_err, passargin, passargout, &passin, &passout)) 
		{
d247 1
a247 1
		}
d251 1
a251 2
	if ((in == NULL) || (out == NULL))
		{
d254 1
a254 1
		}
d258 2
a259 4
	else
		{
		if (BIO_read_filename(in, infile) <= 0)
			{
a261 1
			}
d263 1
d266 2
a267 3
	if (informat == FORMAT_ASN1) 
		{
		if (pubin) 
d269 1
a269 1
		else 
d271 5
a275 7
		} 
	else if (informat == FORMAT_PEM) 
		{
		if (pubin) 
			eckey = PEM_read_bio_EC_PUBKEY(in, NULL, NULL, 
				NULL);
		else 
d277 2
a278 4
				passin);
		} 
	else
		{
d281 3
a283 4
		}
	if (eckey == NULL)
		{
		BIO_printf(bio_err,"unable to load Key\n");
d286 1
a286 1
		}
d288 1
a288 2
	if (outfile == NULL)
		{
d290 2
a291 5
		}
	else
		{
		if (BIO_write_filename(out, outfile) <= 0)
			{
a293 1
			}
d295 1
d305 2
a306 3
	if (text) 
		if (!EC_KEY_print(out, eckey, 0))
			{
d310 1
a310 1
			}
d312 1
a312 2
	if (noout) 
		{
d315 1
a315 1
		}
d318 1
a318 2
	if (outformat == FORMAT_ASN1) 
		{
d321 1
a321 1
		else if (pubin || pubout) 
d323 1
a323 1
		else 
d325 1
a325 3
		} 
	else if (outformat == FORMAT_PEM) 
		{
d330 1
a330 1
		else 
d332 2
a333 4
						NULL, 0, NULL, passout);
		} 
	else 
		{
d335 1
a335 1
			"outfile\n");
d337 1
a337 1
		}
d339 1
a339 2
	if (!i)
		{
d342 2
a343 3
		}
	else
		ret=0;
d361 1
a361 1
static void *dummy=&dummy;
@


1.2
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d388 1
a388 1
		OPENSSL_free(passin);
d390 1
a390 1
		OPENSSL_free(passout);
@


1.1
log
@Initial revision
@
text
@a87 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE 	*e = NULL;
#endif
d254 1
a254 1
        e = setup_engine(bio_err, engine, 0);
a313 6
#ifdef OPENSSL_SYS_VMS
			{
			BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			out = BIO_push(tmpbio, out);
			}
#endif
d394 6
@


1.1.1.1
log
@import of OpenSSL 0.9.8h
@
text
@@


1.1.1.2
log
@import OpenSSL-1.0.0a
@
text
@a402 6
#else /* !OPENSSL_NO_EC */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


1.1.1.3
log
@import OpenSSL 1.0.0e
@
text
@d88 3
d257 1
a257 1
        setup_engine(bio_err, engine, 0);
@


