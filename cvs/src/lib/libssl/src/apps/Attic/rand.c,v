head	1.23;
access;
symbols
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.8
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.7.0.10
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.8
	OPENBSD_4_9_BASE:1.7
	openssh_1_0_0_a:1.1.1.4
	OPENBSD_4_8:1.7.0.6
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.3
	openssl_0_9_8_h:1.1.1.3
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.2
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.2
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.23
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.22;
commitid	7A7DObXgY4Fni8xJ;

1.22
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	EB0l28piqIRSpBUh;

1.21
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.20;
commitid	0NuggCO2WJOZj8Kh;

1.20
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	mJUVYpkFBZ0Zv2bG;

1.19
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.18;
commitid	IqYoI5gjfSomu7k2;

1.18
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.09.38.42;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.06.06.33.20;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.14.08.56.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.56.57;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.15.06.18.30;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.34;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.05.11.21.34.22;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.04.06.06.30.00;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: rand.c,v 1.22 2014/07/14 00:35:10 deraadt Exp $ */
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <ctype.h>
#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/rand.h>

/* -out file         - write to file
 * -base64           - base64 encode output
 * -hex              - hex encode output
 * num               - write 'num' bytes
 */

int rand_main(int, char **);

int
rand_main(int argc, char **argv)
{
	int i, r, ret = 1;
	int badopt;
	char *outfile = NULL;
	int base64 = 0;
	int hex = 0;
	BIO *out = NULL;
	int num = -1;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif

	badopt = 0;
	i = 0;
	while (!badopt && argv[++i] != NULL) {
		if (strcmp(argv[i], "-out") == 0) {
			if ((argv[i + 1] != NULL) && (outfile == NULL))
				outfile = argv[++i];
			else
				badopt = 1;
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(argv[i], "-engine") == 0) {
			if ((argv[i + 1] != NULL) && (engine == NULL))
				engine = argv[++i];
			else
				badopt = 1;
		}
#endif
		else if (strcmp(argv[i], "-base64") == 0) {
			if (!base64)
				base64 = 1;
			else
				badopt = 1;
		} else if (strcmp(argv[i], "-hex") == 0) {
			if (!hex)
				hex = 1;
			else
				badopt = 1;
		} else if (isdigit((unsigned char) argv[i][0])) {
			if (num < 0) {
				r = sscanf(argv[i], "%d", &num);
				if (r == 0 || num < 0)
					badopt = 1;
			} else
				badopt = 1;
		} else
			badopt = 1;
	}

	if (hex && base64)
		badopt = 1;

	if (num < 0)
		badopt = 1;

	if (badopt) {
		BIO_printf(bio_err, "Usage: rand [options] num\n");
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, "-out file             - write to file\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, "-engine e             - use engine e, possibly a hardware device.\n");
#endif
		BIO_printf(bio_err, "-base64               - base64 encode output\n");
		BIO_printf(bio_err, "-hex                  - hex encode output\n");
		goto err;
	}
#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	out = BIO_new(BIO_s_file());
	if (out == NULL)
		goto err;
	if (outfile != NULL)
		r = BIO_write_filename(out, outfile);
	else {
		r = BIO_set_fp(out, stdout, BIO_NOCLOSE | BIO_FP_TEXT);
	}
	if (r <= 0)
		goto err;

	if (base64) {
		BIO *b64 = BIO_new(BIO_f_base64());
		if (b64 == NULL)
			goto err;
		out = BIO_push(b64, out);
	}
	while (num > 0) {
		unsigned char buf[4096];
		int chunk;

		chunk = num;
		if (chunk > (int) sizeof(buf))
			chunk = sizeof buf;
		r = RAND_bytes(buf, chunk);
		if (r <= 0)
			goto err;
		if (!hex)
			BIO_write(out, buf, chunk);
		else {
			for (i = 0; i < chunk; i++)
				BIO_printf(out, "%02x", buf[i]);
		}
		num -= chunk;
	}
	if (hex)
		BIO_puts(out, "\n");
	(void) BIO_flush(out);

	ret = 0;

err:
	ERR_print_errors(bio_err);
	if (out)
		BIO_free_all(out);

	return (ret);
}
@


1.22
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.21 2014/07/12 17:54:31 jsing Exp $ */
@


1.21
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rand.c,v 1.20 2014/06/12 15:49:27 deraadt Exp $ */
d74 1
a74 1
int 
d192 1
a192 1
	
@


1.20
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a86 3

	if (!load_config(bio_err, NULL))
		goto err;
@


1.19
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d1 1
a1 1
/* apps/rand.c */
@


1.18
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@a66 1
 * -rand file:file   - PRNG seed files
a79 1
	char *inrand = NULL;
d108 1
a108 6
		else if (strcmp(argv[i], "-rand") == 0) {
			if ((argv[i + 1] != NULL) && (inrand == NULL))
				inrand = argv[++i];
			else
				badopt = 1;
		} else if (strcmp(argv[i], "-base64") == 0) {
a141 1
		BIO_printf(bio_err, "-rand file:file:... - seed PRNG from files\n");
@


1.17
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a89 2
	signal(SIGPIPE, SIG_IGN);

@


1.16
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@a55 2
#include "apps.h"

d60 2
a64 1

@


1.15
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a92 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.14
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@d91 1
a91 1
	apps_startup();
d210 1
a210 1
	apps_shutdown();
@


1.13
log
@simplify file:file:... stuff
@
text
@a164 5
	app_RAND_load_file(NULL, bio_err, (inrand != NULL));
	if (inrand != NULL)
		BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
		    app_RAND_load_files(inrand));

a203 1
	app_RAND_write_file(NULL, bio_err);
@


1.12
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d156 1
a156 1
		BIO_printf(bio_err, "-rand file%cfile%c... - seed PRNG from files\n", ':', ':');
@


1.11
log
@KaboomNF
@
text
@a65 2
#undef PROG
#define PROG rand_main
d74 1
a74 1
int MAIN(int, char **);
d77 1
a77 1
MAIN(int argc, char **argv)
@


1.10
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d10 1
a10 1
 *    notice, this list of conditions and the following disclaimer. 
d78 3
a80 2
int MAIN(int argc, char **argv)
	{
d90 1
a90 1
	char *engine=NULL;
d97 1
a97 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d104 3
a106 5
	while (!badopt && argv[++i] != NULL)
		{
		if (strcmp(argv[i], "-out") == 0)
			{
			if ((argv[i+1] != NULL) && (outfile == NULL))
d110 1
a110 1
			}
d112 2
a113 3
		else if (strcmp(argv[i], "-engine") == 0)
			{
			if ((argv[i+1] != NULL) && (engine == NULL))
d117 1
a117 1
			}
d119 2
a120 3
		else if (strcmp(argv[i], "-rand") == 0)
			{
			if ((argv[i+1] != NULL) && (inrand == NULL))
d124 1
a124 3
			}
		else if (strcmp(argv[i], "-base64") == 0)
			{
d129 1
a129 3
			}
		else if (strcmp(argv[i], "-hex") == 0)
			{
d134 2
a135 5
			}
		else if (isdigit((unsigned char)argv[i][0]))
			{
			if (num < 0)
				{
d139 1
a139 2
				}
			else
d141 1
a141 2
			}
		else
d143 1
a143 1
		}
d150 2
a151 3
	
	if (badopt) 
		{
d162 1
a162 2
		}

d164 1
a164 1
        setup_engine(bio_err, engine, 0);
d169 2
a170 2
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d177 1
a177 2
	else
		{
d179 1
a179 1
		}
d183 1
a183 2
	if (base64)
		{
d188 2
a189 4
		}
	
	while (num > 0) 
		{
d194 1
a194 1
		if (chunk > (int)sizeof(buf))
d199 1
a199 1
		if (!hex) 
d201 1
a201 2
		else
			{
d204 1
a204 1
			}
d206 1
a206 1
		}
d209 1
a209 1
	(void)BIO_flush(out);
d213 1
a213 1
	
d219 2
a220 2
	return(ret);
	}
@


1.9
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d171 1
a171 1
		BIO_printf(bio_err, "-rand file%cfile%c... - seed PRNG from files\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d238 1
a238 1
	OPENSSL_EXIT(ret);
@


1.8
log
@openssl-1.0.0e: resolve conflicts
@
text
@a193 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.7
log
@resolve conflicts
@
text
@a79 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d178 1
a178 1
        e = setup_engine(bio_err, engine, 0);
@


1.6
log
@resolve conflicts
@
text
@d71 2
a72 2
 * -base64           - encode output
 * -hex		     - hex encode output
d175 1
a175 1
		BIO_printf(bio_err, "-base64               - encode output\n");
d228 2
a229 2
		else {
			int i;
d232 1
a232 1
		}
d235 2
@


1.5
log
@Add a -hex option to 'rand' to output hexadecimal output.
ok djm@@ miod@@, man page help from jmc@@.
@
text
@d221 1
a221 1
		if (chunk > sizeof buf)
d235 1
a235 1
	BIO_flush(out);
@


1.4
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d72 1
d88 1
d138 7
d160 3
d176 1
d226 7
a232 1
		BIO_write(out, buf, chunk);
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d79 1
d81 1
d89 1
d91 1
d113 1
d121 1
d159 1
d161 1
d167 1
d169 1
d226 1
a226 1
	EXIT(ret);
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d2 53
a64 1
#include <openssl/engine.h>
d95 3
d109 1
a109 1
		if (strcmp(argv[i], "-engine") == 0)
d153 1
a153 1
		BIO_printf(bio_err," -engine e             - use engine e, possibly a hardware device.\n");
d159 1
a159 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto err;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto err;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d174 1
a174 1
#ifdef VMS
d215 1
@


1.1
log
@OpenSSL 0.9.5a merge
@
text
@d12 1
d27 1
d35 1
d54 7
d75 1
a75 1
		else if (isdigit(argv[i][0]))
d97 4
a100 3
		BIO_printf(bio_err, "-out file            - write to file\n");
		BIO_printf(bio_err, "-rand file%cfile%c...  - seed PRNG from files\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err, "-base64              - encode output\n");
d104 18
d133 1
d135 7
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a1 53
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
a25 1
	ENGINE *e = NULL;
a32 1
	char *engine=NULL;
a39 3
	if (!load_config(bio_err, NULL))
		goto err;

a50 7
		else if (strcmp(argv[i], "-engine") == 0)
			{
			if ((argv[i+1] != NULL) && (engine == NULL))
				engine = argv[++i];
			else
				badopt = 1;
			}
d65 1
a65 1
		else if (isdigit((unsigned char)argv[i][0]))
d87 3
a89 4
		BIO_printf(bio_err, "-out file             - write to file\n");
		BIO_printf(bio_err, "-engine e             - use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err, "-rand file%cfile%c... - seed PRNG from files\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err, "-base64               - encode output\n");
a92 2
        e = setup_engine(bio_err, engine, 0);

a103 1
		{
a104 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
a138 1
	apps_shutdown();
@


1.1.1.2
log
@import 0.9.7b (without idea and rc5)
@
text
@a78 1
#ifndef OPENSSL_NO_ENGINE
a79 1
#endif
a86 1
#ifndef OPENSSL_NO_ENGINE
a87 1
#endif
a108 1
#ifndef OPENSSL_NO_ENGINE
a115 1
#endif
a152 1
#ifndef OPENSSL_NO_ENGINE
a153 1
#endif
a158 1
#ifndef OPENSSL_NO_ENGINE
a159 1
#endif
d216 1
a216 1
	OPENSSL_EXIT(ret);
@


1.1.1.3
log
@import of OpenSSL 0.9.8h
@
text
@d208 1
a208 1
		if (chunk > (int)sizeof(buf))
d216 1
a216 1
	(void)BIO_flush(out);
@


1.1.1.4
log
@import of OpenSSL 0.9.8k
@
text
@d71 1
a71 2
 * -base64           - base64 encode output
 * -hex              - hex encode output
a86 1
	int hex = 0;
a135 7
		else if (strcmp(argv[i], "-hex") == 0)
			{
			if (!hex)
				hex = 1;
			else
				badopt = 1;
			}
a150 3
	if (hex && base64)
		badopt = 1;

d163 1
a163 2
		BIO_printf(bio_err, "-base64               - base64 encode output\n");
		BIO_printf(bio_err, "-hex                  - hex encode output\n");
d213 1
a213 7
		if (!hex) 
			BIO_write(out, buf, chunk);
		else
			{
			for (i = 0; i < chunk; i++)
				BIO_printf(out, "%02x", buf[i]);
			}
a215 2
	if (hex)
		BIO_puts(out, "\n");
@


1.1.1.5
log
@import OpenSSL 1.0.0e
@
text
@d80 3
d181 1
a181 1
        setup_engine(bio_err, engine, 0);
@


