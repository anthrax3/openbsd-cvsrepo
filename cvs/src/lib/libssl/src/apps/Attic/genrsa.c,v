head	1.38;
access;
symbols
	OPENBSD_5_6:1.37.0.4
	OPENBSD_5_6_BASE:1.37
	butholakala:1.12
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.11.0.16
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.11.0.6
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.38
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.37;
commitid	7A7DObXgY4Fni8xJ;

1.37
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.36;
commitid	EB0l28piqIRSpBUh;

1.36
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.35;
commitid	0NuggCO2WJOZj8Kh;

1.35
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.34;
commitid	ivoCf1icUxmbGXSc;

1.34
date	2014.07.09.09.06.58;	author bcook;	state Exp;
branches;
next	1.33;
commitid	wo9E4ACdFuC7DqQu;

1.33
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	mJUVYpkFBZ0Zv2bG;

1.32
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.31;
commitid	IqYoI5gjfSomu7k2;

1.31
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.30;

1.30
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.29;

1.29
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.28;

1.28
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.27;

1.27
date	2014.05.17.15.45.50;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2014.05.17.12.12.05;	author sthen;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.24.21.31.00;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2014.04.24.12.39.02;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.18.09.38.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.17.15.43.33;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.13.20.37.11;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.27.05.06.54;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.56.56;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.10;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.32;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.20;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.29;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.38
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: genrsa.c,v 1.37 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>

/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif


#include <sys/types.h>
#include <sys/stat.h>

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
#include <openssl/rsa.h>
#include <openssl/x509.h>

#define DEFBITS	2048

static int genrsa_cb(int p, int n, BN_GENCB * cb);

int genrsa_main(int, char **);

int
genrsa_main(int argc, char **argv)
{
	BN_GENCB cb;
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
	int ret = 1;
	int i, num = DEFBITS;
	long l;
	const EVP_CIPHER *enc = NULL;
	unsigned long f4 = RSA_F4;
	char *outfile = NULL;
	char *passargout = NULL, *passout = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	BIO *out = NULL;
	BIGNUM *bn = BN_new();
	RSA *rsa = NULL;

	if (!bn)
		goto err;

	BN_GENCB_set(&cb, genrsa_cb, bio_err);

	if ((out = BIO_new(BIO_s_file())) == NULL) {
		BIO_printf(bio_err, "unable to create BIO for output\n");
		goto err;
	}
	argv++;
	argc--;
	for (;;) {
		if (argc <= 0)
			break;
		if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-3") == 0)
			f4 = 3;
		else if (strcmp(*argv, "-F4") == 0 || strcmp(*argv, "-f4") == 0)
			f4 = RSA_F4;
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
#ifndef OPENSSL_NO_DES
		else if (strcmp(*argv, "-des") == 0)
			enc = EVP_des_cbc();
		else if (strcmp(*argv, "-des3") == 0)
			enc = EVP_des_ede3_cbc();
#endif
#ifndef OPENSSL_NO_IDEA
		else if (strcmp(*argv, "-idea") == 0)
			enc = EVP_idea_cbc();
#endif
#ifndef OPENSSL_NO_AES
		else if (strcmp(*argv, "-aes128") == 0)
			enc = EVP_aes_128_cbc();
		else if (strcmp(*argv, "-aes192") == 0)
			enc = EVP_aes_192_cbc();
		else if (strcmp(*argv, "-aes256") == 0)
			enc = EVP_aes_256_cbc();
#endif
#ifndef OPENSSL_NO_CAMELLIA
		else if (strcmp(*argv, "-camellia128") == 0)
			enc = EVP_camellia_128_cbc();
		else if (strcmp(*argv, "-camellia192") == 0)
			enc = EVP_camellia_192_cbc();
		else if (strcmp(*argv, "-camellia256") == 0)
			enc = EVP_camellia_256_cbc();
#endif
		else if (strcmp(*argv, "-passout") == 0) {
			if (--argc < 1)
				goto bad;
			passargout = *(++argv);
		} else
			break;
		argv++;
		argc--;
	}
	if ((argc >= 1) && ((sscanf(*argv, "%d", &num) == 0) || (num < 0))) {
bad:
		BIO_printf(bio_err, "usage: genrsa [args] [numbits]\n");
		BIO_printf(bio_err, " -des            encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err, " -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err, " -idea           encrypt the generated key with IDEA in cbc mode\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err, " -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc aes\n");
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err, " -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc camellia\n");
#endif
		BIO_printf(bio_err, " -out file       output the key to 'file\n");
		BIO_printf(bio_err, " -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err, " -f4             use F4 (0x10001) for the E value\n");
		BIO_printf(bio_err, " -3              use 3 for the E value\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e       use engine e, possibly a hardware device.\n");
#endif
		goto err;
	}
	ERR_load_crypto_strings();

	if (!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto err;
	}
#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto err;
		}
	}

	BIO_printf(bio_err, "Generating RSA private key, %d bit long modulus\n",
	    num);
#ifdef OPENSSL_NO_ENGINE
	rsa = RSA_new();
#else
	rsa = RSA_new_method(e);
#endif
	if (!rsa)
		goto err;

	if (!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
		goto err;

	/*
	 * We need to do the following for when the base number size is <
	 * long, esp windows 3.1 :-(.
	 */
	l = 0L;
	for (i = 0; i < rsa->e->top; i++) {
#ifndef _LP64
		l <<= BN_BITS4;
		l <<= BN_BITS4;
#endif
		l += rsa->e->d[i];
	}
	BIO_printf(bio_err, "e is %ld (0x%lX)\n", l, l);
	{
		PW_CB_DATA cb_data;
		cb_data.password = passout;
		cb_data.prompt_info = outfile;
		if (!PEM_write_bio_RSAPrivateKey(out, rsa, enc, NULL, 0,
			password_callback, &cb_data))
			goto err;
	}

	ret = 0;
err:
	if (bn)
		BN_free(bn);
	if (rsa)
		RSA_free(rsa);
	if (out)
		BIO_free_all(out);
	free(passout);
	if (ret != 0)
		ERR_print_errors(bio_err);

	return (ret);
}

static int
genrsa_cb(int p, int n, BN_GENCB * cb)
{
	char c = '*';

	if (p == 0)
		c = '.';
	if (p == 1)
		c = '+';
	if (p == 2)
		c = '*';
	if (p == 3)
		c = '\n';
	BIO_write(cb->arg, &c, 1);
	(void) BIO_flush(cb->arg);
	return 1;
}
@


1.37
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: genrsa.c,v 1.36 2014/07/12 17:54:31 jsing Exp $ */
@


1.36
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: genrsa.c,v 1.35 2014/07/09 21:02:35 tedu Exp $ */
d266 1
a266 1
	
@


1.35
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: genrsa.c,v 1.34 2014/07/09 09:06:58 bcook Exp $ */
a115 3

	if (!load_config(bio_err, NULL))
		goto err;
@


1.34
log
@Remove typecasts on password_callback.

Rather than casting password_callback to the correct function pointer
signature at every call site, change it to match the signature instead.

ok miod@@ deraadt@@ tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: genrsa.c,v 1.33 2014/06/12 15:49:27 deraadt Exp $ */
a66 1
#ifndef OPENSSL_NO_RSA
a289 1
#endif
@


1.33
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d255 1
a255 1
			(pem_password_cb *) password_callback, &cb_data))
@


1.32
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d1 1
a1 1
/* apps/genrsa.c */
@


1.31
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@a108 1
	char *inrand = NULL;
a144 5
		else if (strcmp(*argv, "-rand") == 0) {
			if (--argc < 1)
				goto bad;
			inrand = *(++argv);
		}
a202 3
		BIO_printf(bio_err, " -rand file:file:...\n");
		BIO_printf(bio_err, "                 load the file (or the files in the directory) into\n");
		BIO_printf(bio_err, "                 the random number generator\n");
@


1.30
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a116 1
	signal(SIGPIPE, SIG_IGN);
@


1.29
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d277 1
a277 2
	if (passout)
		free(passout);
@


1.28
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d60 1
d68 4
d74 1
a74 2
#include <sys/types.h>
#include <sys/stat.h>
d76 1
d78 1
a79 2
#include <openssl/bn.h>
#include <openssl/rsa.h>
a80 1
#include <openssl/x509.h>
d83 2
@


1.27
log
@deleted seed some time ago
@
text
@a114 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

d117 1
@


1.26
log
@switch RSA key generation default to 2048 bits (matching ssh); ok miod@@
@
text
@a159 4
#ifndef OPENSSL_NO_SEED
		else if (strcmp(*argv, "-seed") == 0)
			enc = EVP_seed_cbc();
#endif
a191 4
#endif
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err, " -seed\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc seed\n");
@


1.25
log
@Try to clean the maze of <openssl/bn.h> defines regarding the BN internals.

The intent of this change is to only keep support for two kind of architectures:
- those with 32-bit int and long, and 64-bit long long, where
  ``long * long -> long long'' multiplication routines are available.
- those with 64-bit int and long, and no 128-bit long long type.

This gets rid of the SIXTY_FOUR_BIT_LONG, SIXTY_FOUR_BIT (not the same!),
THIRTY_TWO_BIT, SIXTEEN_BIT and EIGHT_BIT defines.

After this change, the types and defines are as follows:

arch:           64bit           32bit           rationale
BN_LLONG        undefined       defined         defined if l * l -> ll
BN_ULLONG       undefined       u long long     result of BN_LONG * BN_LONG
BN_ULONG        u long          u int           native register size
BN_LONG         long            int             the same, signed
BN_BITS         128             64              size of 2*BN_ULONG in bits
BN_BYTES        8               4               size of 2*BN_ULONG in bytes
BN_BITS2        64              32              BN_BITS / 2

Tested on various 32-bit and 64-bit OpenBSD systems of various endianness.
@
text
@d81 1
a81 1
#define DEFBITS	1024
@


1.24
log
@unifdef -U LINT
@
text
@d259 1
a259 1
#ifndef SIXTY_FOUR_BIT
@


1.23
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a305 3
#ifdef LINT
	p = n;
#endif
@


1.22
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d112 1
a112 1
	apps_startup();
d287 1
a287 1
	apps_shutdown();
@


1.21
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a310 6
#else				/* !OPENSSL_NO_RSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.20
log
@simplify file:file:... stuff
@
text
@a239 8
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL &&
	    !RAND_status()) {
		BIO_printf(bio_err, "warning, not much extra random data, consider using the -rand option\n");
	}
	if (inrand != NULL)
		BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
		    app_RAND_load_files(inrand));

a251 2

	app_RAND_write_file(NULL, bio_err);
@


1.19
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d216 1
a216 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", ':', ':');
@


1.18
log
@KaboomNF
@
text
@a81 2
#undef PROG
#define PROG genrsa_main
d85 1
a85 1
int MAIN(int, char **);
d88 1
a88 1
MAIN(int argc, char **argv)
@


1.17
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d85 1
a85 1
static int genrsa_cb(int p, int n, BN_GENCB *cb);
d111 2
a112 1
	if (!bn) goto err;
d114 1
a114 1
		apps_startup();
d119 1
a119 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
a126 1

d135 1
a135 1
			outfile= *(++argv);
d138 1
a138 1
		else if (strcmp(*argv, "-F4") == 0 || strcmp(*argv,"-f4") == 0)
d144 1
a144 1
			engine= *(++argv);
d150 1
a150 1
			inrand= *(++argv);
d185 1
a185 1
			passargout= *(++argv);
d191 1
a191 1
	if ((argc >= 1) && ((sscanf(*argv, "%d",&num) == 0) || (num < 0))) {
a222 1

a228 1

d265 4
a268 2
	/* We need to do the following for when the base number size is <
	 * long, esp windows 3.1 :-(. */
d272 2
a273 2
		l<<=BN_BITS4;
		l<<=BN_BITS4;
d277 1
a277 1
	BIO_printf(bio_err, "e is %ld (0x%lX)\n",l,l);
d283 1
a283 1
			    (pem_password_cb *)password_callback, &cb_data))
d295 4
a298 3
	if (passout) free(passout);
		if (ret != 0)
			ERR_print_errors(bio_err);
d300 1
a300 1
	return(ret);
d304 1
a304 1
genrsa_cb(int p, int n, BN_GENCB *cb)
d317 1
a317 1
	(void)BIO_flush(cb->arg);
d323 1
a323 1
#else /* !OPENSSL_NO_RSA */
d325 1
a325 1
# if PEDANTIC
d327 1
a327 1
# endif
@


1.16
log
@Initial KNF.
@
text
@d218 1
a218 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d299 1
a299 1
	OPENSSL_EXIT(ret);
@


1.15
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d89 3
a91 2
int MAIN(int argc, char **argv)
	{
d96 2
a97 2
	int ret=1;
	int i,num=DEFBITS;
d99 3
a101 3
	const EVP_CIPHER *enc=NULL;
	unsigned long f4=RSA_F4;
	char *outfile=NULL;
d104 1
a104 1
	char *engine=NULL;
d106 2
a107 2
	char *inrand=NULL;
	BIO *out=NULL;
d111 1
a111 1
	if(!bn) goto err;
d113 1
a113 1
	apps_startup();
d117 2
a118 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d122 2
a123 3
	if ((out=BIO_new(BIO_s_file())) == NULL)
		{
		BIO_printf(bio_err,"unable to create BIO for output\n");
d125 1
a125 1
		}
d129 6
a134 6
	for (;;)
		{
		if (argc <= 0) break;
		if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d136 4
a139 5
			}
		else if (strcmp(*argv,"-3") == 0)
			f4=3;
		else if (strcmp(*argv,"-F4") == 0 || strcmp(*argv,"-f4") == 0)
			f4=RSA_F4;
d141 3
a143 3
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
d145 1
a145 1
			}
d147 3
a149 3
		else if (strcmp(*argv,"-rand") == 0)
			{
			if (--argc < 1) goto bad;
d151 1
a151 1
			}
d153 4
a156 4
		else if (strcmp(*argv,"-des") == 0)
			enc=EVP_des_cbc();
		else if (strcmp(*argv,"-des3") == 0)
			enc=EVP_des_ede3_cbc();
d159 2
a160 2
		else if (strcmp(*argv,"-idea") == 0)
			enc=EVP_idea_cbc();
d163 2
a164 2
		else if (strcmp(*argv,"-seed") == 0)
			enc=EVP_seed_cbc();
d167 6
a172 6
		else if (strcmp(*argv,"-aes128") == 0)
			enc=EVP_aes_128_cbc();
		else if (strcmp(*argv,"-aes192") == 0)
			enc=EVP_aes_192_cbc();
		else if (strcmp(*argv,"-aes256") == 0)
			enc=EVP_aes_256_cbc();
d175 10
a184 10
		else if (strcmp(*argv,"-camellia128") == 0)
			enc=EVP_camellia_128_cbc();
		else if (strcmp(*argv,"-camellia192") == 0)
			enc=EVP_camellia_192_cbc();
		else if (strcmp(*argv,"-camellia256") == 0)
			enc=EVP_camellia_256_cbc();
#endif
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
d186 1
a186 2
			}
		else
d190 2
a191 3
		}
	if ((argc >= 1) && ((sscanf(*argv,"%d",&num) == 0) || (num < 0)))
		{
d193 3
a195 3
		BIO_printf(bio_err,"usage: genrsa [args] [numbits]\n");
		BIO_printf(bio_err," -des            encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err," -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
d197 1
a197 1
		BIO_printf(bio_err," -idea           encrypt the generated key with IDEA in cbc mode\n");
d200 2
a201 2
		BIO_printf(bio_err," -seed\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc seed\n");
d204 2
a205 2
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d208 2
a209 2
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
d211 4
a214 4
		BIO_printf(bio_err," -out file       output the key to 'file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err," -f4             use F4 (0x10001) for the E value\n");
		BIO_printf(bio_err," -3              use 3 for the E value\n");
d216 1
a216 1
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
d218 3
a220 3
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err,"                 load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"                 the random number generator\n");
d222 2
a223 2
		}
		
d226 1
a226 1
	if(!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
d232 1
a232 1
        e = setup_engine(bio_err, engine, 0);
d235 4
a238 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a240 1
			}
d242 1
d244 4
a247 5
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL
		&& !RAND_status())
		{
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
		}
d249 2
a250 2
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d252 2
a253 2
	BIO_printf(bio_err,"Generating RSA private key, %d bit long modulus\n",
		num);
d262 1
a262 1
	if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
d264 1
a264 1
		
d269 2
a270 3
	l=0L;
	for (i=0; i<rsa->e->top; i++)
		{
d275 3
a277 3
		l+=rsa->e->d[i];
		}
	BIO_printf(bio_err,"e is %ld (0x%lX)\n",l,l);
d279 6
a284 6
	PW_CB_DATA cb_data;
	cb_data.password = passout;
	cb_data.prompt_info = outfile;
	if (!PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,
		(pem_password_cb *)password_callback,&cb_data))
		goto err;
d287 1
a287 1
	ret=0;
d289 9
a297 6
	if (bn) BN_free(bn);
	if (rsa) RSA_free(rsa);
	if (out) BIO_free_all(out);
	if(passout) free(passout);
	if (ret != 0)
		ERR_print_errors(bio_err);
d300 1
a300 1
	}
d302 14
a315 9
static int genrsa_cb(int p, int n, BN_GENCB *cb)
	{
	char c='*';

	if (p == 0) c='.';
	if (p == 1) c='+';
	if (p == 2) c='*';
	if (p == 3) c='\n';
	BIO_write(cb->arg,&c,1);
d318 1
a318 1
	p=n;
d321 1
a321 1
	}
d325 1
a325 1
static void *dummy=&dummy;
@


1.14
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d301 1
a301 1
	if(passout) OPENSSL_free(passout);
@


1.13
log
@remove more cases of MS_STATIC, MS_CALLBACK, and MS_FAR.  Did you
know that MS_STATIC doesn't mean it is static?  How far can lies
and half-truths be layered?  I wonder if anyone got fooled, and
actually returned a pointer..
ok beck
@
text
@a240 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.12
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@d85 1
a85 1
static int MS_CALLBACK genrsa_cb(int p, int n, BN_GENCB *cb);
d314 1
a314 1
static int MS_CALLBACK genrsa_cb(int p, int n, BN_GENCB *cb)
@


1.11
log
@resolve conflicts, fix local changes
@
text
@d81 1
a81 1
#define DEFBITS	512
@


1.10
log
@resolve conflicts
@
text
@a97 1
	int use_x931 = 0;
d108 1
a108 1
	RSA *rsa = RSA_new();
d110 1
a110 1
	if(!bn || !rsa) goto err;
a140 2
		else if (strcmp(*argv,"-x931") == 0)
			use_x931 = 1;
d268 7
d276 1
a276 11
	if (use_x931)
		{
		BIGNUM *pubexp;
		pubexp = BN_new();
		if (!BN_set_word(pubexp, f4))
			goto err;
		if (!RSA_X931_generate_key_ex(rsa, num, pubexp, &cb))
			goto err;
		BN_free(pubexp);
		}
	else if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
@


1.9
log
@resolve conflicts
@
text
@d98 1
d142 2
d272 11
a282 1
	if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
@


1.8
log
@resolve conflicts
@
text
@d59 7
d85 1
a85 1
static void MS_CALLBACK genrsa_cb(int p, int n, void *arg);
d91 1
a95 1
	RSA *rsa=NULL;
a97 3
#ifdef OPENSSL_FIPS
	int use_x931 = 0;
#endif
d107 4
d113 1
a140 4
#ifdef OPENSSL_FIPS
		else if (strcmp(*argv,"-x931") == 0)
			use_x931 = 1;
#endif
d163 4
d175 8
d202 4
d210 4
d268 3
a270 12
#ifdef OPENSSL_FIPS
	if (use_x931)
		{
		BIGNUM *pubexp;
		pubexp = BN_new();
		BN_set_word(pubexp, f4);
		rsa = RSA_X931_generate_key(num, pubexp, genrsa_cb, bio_err);
		BN_free(pubexp);
		}
	else
#endif
		rsa=RSA_generate_key(num,f4,genrsa_cb,bio_err);
a273 7
	if (rsa == NULL)
		{
		BIO_printf(bio_err, "Key Generation error\n");

		goto err;
		}
	
d297 3
a299 2
	if (rsa != NULL) RSA_free(rsa);
	if (out != NULL) BIO_free_all(out);
d307 1
a307 1
static void MS_CALLBACK genrsa_cb(int p, int n, void *arg)
d315 2
a316 2
	BIO_write((BIO *)arg,&c,1);
	(void)BIO_flush((BIO *)arg);
d320 1
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d91 3
d132 4
d243 12
a254 1
	rsa=RSA_generate_key(num,f4,genrsa_cb,bio_err);
d258 6
a263 1
	if (rsa == NULL) goto err;
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d84 1
d86 1
d95 1
d97 1
d129 1
d135 1
d186 1
d188 1
d202 1
d204 1
d271 1
a271 1
	EXIT(ret);
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_RSA
d72 1
a72 1
#include <openssl/engine.h>
d89 1
a89 1
	EVP_CIPHER *enc=NULL;
d102 3
d135 1
a135 1
#ifndef NO_DES
d141 1
a141 1
#ifndef NO_IDEA
d145 8
d169 1
a169 1
#ifndef NO_IDEA
d172 4
d194 1
a194 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto err;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto err;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d199 1
a199 1
#ifdef VMS
d244 6
a249 1
	if (!PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,NULL, passout))
d251 1
d260 1
d278 1
a278 1
#else /* !NO_RSA */
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d72 1
d84 1
d93 1
d120 1
a120 1
		else if (strcmp(*argv,"-F4") == 0)
d122 5
d165 1
d179 18
d198 1
d200 7
d216 2
a217 1
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
d251 2
a252 2
	if (out != NULL) BIO_free(out);
	if(passout) Free(passout);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d157 1
a157 1
		BIO_printf(bio_err," -rand file:file:...\n");
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a65 1
#include <openssl/rand.h>
d78 3
a80 1
static long gr_load_rand(char *names);
a83 1
	char buffer[200];
d86 1
a86 1
	long rnum=0,l;
d90 2
a91 1
	char *inrand=NULL,*randfile;
d101 1
a101 1
		BIO_printf(bio_err,"unable to creat BIO for output\n");
d134 5
d148 2
a149 2
		BIO_printf(bio_err," -des      - encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err," -des3     - encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
d151 1
a151 1
		BIO_printf(bio_err," -idea     - encrypt the generated key with IDEA in cbc mode\n");
d153 4
a156 3
		BIO_printf(bio_err," -out file - output the key to 'file\n");
		BIO_printf(bio_err," -f4       - use F4 (0x10001) for the E value\n");
		BIO_printf(bio_err," -3        - use 3 for the E value\n");
d158 2
a159 2
		BIO_printf(bio_err,"           - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"             the random number generator\n");
d164 6
d181 1
a181 9
#ifdef WINDOWS
	BIO_printf(bio_err,"Loading 'screen' into random state -");
	BIO_flush(bio_err);
	RAND_screen();
	BIO_printf(bio_err," done\n");
#endif
	randfile=RAND_file_name(buffer,200);
	if ((randfile == NULL) ||
		 !(rnum=(long)RAND_load_file(randfile,1024L*1024L)))
d183 1
a183 1
		BIO_printf(bio_err,"unable to load 'random state'\n");
d185 3
a187 14

	if (inrand == NULL)
		{
		if (rnum == 0)
			{
			BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
			}
		}
	else
		{
		rnum+=gr_load_rand(inrand);
		}
	if (rnum != 0)
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",rnum);
d193 1
a193 4
	if (randfile == NULL)
		BIO_printf(bio_err,"unable to write 'random state'\n");
	else
		RAND_write_file(randfile);
d197 1
a197 1
	/* We need to do the folloing for when the base number size is <
d209 1
a209 1
	if (!PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,NULL,NULL))
d216 1
d236 1
d238 3
a240 15
static long gr_load_rand(char *name)
	{
	char *p,*n;
	int last;
	long tot=0;

	for (;;)
		{
		last=0;
		for (p=name; ((*p != '\0') && (*p != LIST_SEPARATOR_CHAR)); p++);
		if (*p == '\0') last=1;
		*p='\0';
		n=name;
		name=p+1;
		if (*n == '\0') break;
a241 5
		tot+=RAND_load_file(n,1024L*1024L);
		if (last) break;
		}
	return(tot);
	}
@


1.1
log
@Initial revision
@
text
@d59 1
d65 8
a72 8
#include "bio.h"
#include "rand.h"
#include "err.h"
#include "bn.h"
#include "rsa.h"
#include "evp.h"
#include "x509.h"
#include "pem.h"
d78 1
a78 2
#ifndef NOPROTO
static void MS_CALLBACK genrsa_cb(int p, int n, char *arg);
d80 1
a80 8
#else
static void MS_CALLBACK genrsa_cb();
static long gr_load_rand();
#endif

int MAIN(argc, argv)
int argc;
char **argv;
d197 1
a197 1
	rsa=RSA_generate_key(num,f4,genrsa_cb,(char *)bio_err);
d218 1
a218 1
	if (!PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,NULL))
d230 1
a230 4
static void MS_CALLBACK genrsa_cb(p, n, arg)
int p;
int n;
char *arg;
d239 1
a239 1
	BIO_flush((BIO *)arg);
d245 1
a245 2
static long gr_load_rand(name)
char *name;
d266 1
a266 2


@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_RSA
d64 8
a71 8
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/bn.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
d77 7
a83 3
static void MS_CALLBACK genrsa_cb(int p, int n, void *arg);

int MAIN(int, char **);
d85 3
a87 1
int MAIN(int argc, char **argv)
a88 1
	ENGINE *e = NULL;
d90 1
d93 2
a94 2
	long l;
	const EVP_CIPHER *enc=NULL;
d97 1
a97 3
	char *passargout = NULL, *passout = NULL;
	char *engine=NULL;
	char *inrand=NULL;
a104 3

	if (!load_config(bio_err, NULL))
		goto err;
d107 1
a107 1
		BIO_printf(bio_err,"unable to create BIO for output\n");
d123 1
a123 1
		else if (strcmp(*argv,"-F4") == 0 || strcmp(*argv,"-f4") == 0)
a124 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d130 1
a130 1
#ifndef OPENSSL_NO_DES
d136 1
a136 1
#ifndef OPENSSL_NO_IDEA
a139 13
#ifndef OPENSSL_NO_AES
		else if (strcmp(*argv,"-aes128") == 0)
			enc=EVP_aes_128_cbc();
		else if (strcmp(*argv,"-aes192") == 0)
			enc=EVP_aes_192_cbc();
		else if (strcmp(*argv,"-aes256") == 0)
			enc=EVP_aes_256_cbc();
#endif
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
			passargout= *(++argv);
			}
d149 11
a159 17
		BIO_printf(bio_err," -des            encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err," -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err," -idea           encrypt the generated key with IDEA in cbc mode\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
#endif
		BIO_printf(bio_err," -out file       output the key to 'file\n");
		BIO_printf(bio_err," -passout arg    output file pass phrase source\n");
		BIO_printf(bio_err," -f4             use F4 (0x10001) for the E value\n");
		BIO_printf(bio_err," -3              use 3 for the E value\n");
		BIO_printf(bio_err," -engine e       use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err,"                 load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"                 the random number generator\n");
a163 8

	if(!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto err;
	}

        e = setup_engine(bio_err, engine, 0);

a164 1
		{
a165 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d175 9
a183 2
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL
		&& !RAND_status())
d185 1
a185 1
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
d187 14
a200 3
	if (inrand != NULL)
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d204 1
a204 1
	rsa=RSA_generate_key(num,f4,genrsa_cb,bio_err);
d206 4
a209 1
	app_RAND_write_file(NULL, bio_err);
d213 1
a213 1
	/* We need to do the following for when the base number size is <
d225 1
a225 6
	{
	PW_CB_DATA cb_data;
	cb_data.password = passout;
	cb_data.prompt_info = outfile;
	if (!PEM_write_bio_RSAPrivateKey(out,rsa,enc,NULL,0,
		(pem_password_cb *)password_callback,&cb_data))
a226 1
	}
d231 1
a231 2
	if (out != NULL) BIO_free_all(out);
	if(passout) OPENSSL_free(passout);
a233 1
	apps_shutdown();
d237 4
a240 1
static void MS_CALLBACK genrsa_cb(int p, int n, void *arg)
d249 1
a249 1
	(void)BIO_flush((BIO *)arg);
a253 1
#else /* !OPENSSL_NO_RSA */
d255 23
a277 3
# if PEDANTIC
static void *dummy=&dummy;
# endif
a278 1
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a83 1
#ifndef OPENSSL_NO_ENGINE
a84 1
#endif
a92 1
#ifndef OPENSSL_NO_ENGINE
a93 1
#endif
a124 1
#ifndef OPENSSL_NO_ENGINE
a129 1
#endif
a179 1
#ifndef OPENSSL_NO_ENGINE
a180 1
#endif
a193 1
#ifndef OPENSSL_NO_ENGINE
a194 1
#endif
d261 1
a261 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@a90 3
#ifdef OPENSSL_FIPS
	int use_x931 = 0;
#endif
a128 4
#ifdef OPENSSL_FIPS
		else if (strcmp(*argv,"-x931") == 0)
			use_x931 = 1;
#endif
d236 1
a236 12
#ifdef OPENSSL_FIPS
	if (use_x931)
		{
		BIGNUM *pubexp;
		pubexp = BN_new();
		BN_set_word(pubexp, f4);
		rsa = RSA_X931_generate_key(num, pubexp, genrsa_cb, bio_err);
		BN_free(pubexp);
		}
	else
#endif
		rsa=RSA_generate_key(num,f4,genrsa_cb,bio_err);
d240 1
a240 6
	if (rsa == NULL)
		{
		BIO_printf(bio_err, "Key Generation error\n");

		goto err;
		}
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@a58 7
#include <openssl/opensslconf.h>
/* Until the key-gen callbacks are modified to use newer prototypes, we allow
 * deprecated functions for openssl-internal code */
#ifdef OPENSSL_NO_DEPRECATED
#undef OPENSSL_NO_DEPRECATED
#endif

d78 1
a78 1
static int MS_CALLBACK genrsa_cb(int p, int n, BN_GENCB *cb);
a83 1
	BN_GENCB cb;
d88 1
d91 3
a102 4
	BIGNUM *bn = BN_new();
	RSA *rsa = RSA_new();

	if(!bn || !rsa) goto err;
a104 1
	BN_GENCB_set(&cb, genrsa_cb, bio_err);
d132 4
a157 4
#ifndef OPENSSL_NO_SEED
		else if (strcmp(*argv,"-seed") == 0)
			enc=EVP_seed_cbc();
#endif
a165 8
#ifndef OPENSSL_NO_CAMELLIA
		else if (strcmp(*argv,"-camellia128") == 0)
			enc=EVP_camellia_128_cbc();
		else if (strcmp(*argv,"-camellia192") == 0)
			enc=EVP_camellia_192_cbc();
		else if (strcmp(*argv,"-camellia256") == 0)
			enc=EVP_camellia_256_cbc();
#endif
a184 4
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err," -seed\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc seed\n");
#endif
a188 4
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
#endif
d243 12
a254 3

	if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
		goto err;
d258 7
d288 2
a289 3
	if (bn) BN_free(bn);
	if (rsa) RSA_free(rsa);
	if (out) BIO_free_all(out);
d297 1
a297 1
static int MS_CALLBACK genrsa_cb(int p, int n, BN_GENCB *cb)
d305 2
a306 2
	BIO_write(cb->arg,&c,1);
	(void)BIO_flush(cb->arg);
a309 1
	return 1;
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a97 1
	int use_x931 = 0;
a140 2
		else if (strcmp(*argv,"-x931") == 0)
			use_x931 = 1;
d269 1
a269 11
	if (use_x931)
		{
		BIGNUM *pubexp;
		pubexp = BN_new();
		if (!BN_set_word(pubexp, f4))
			goto err;
		if (!RSA_X931_generate_key_ex(rsa, num, pubexp, &cb))
			goto err;
		BN_free(pubexp);
		}
	else if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d98 1
d109 1
a109 1
	RSA *rsa = NULL;
d111 1
a111 1
	if(!bn) goto err;
d142 2
a270 7
#ifdef OPENSSL_NO_ENGINE
	rsa = RSA_new();
#else
	rsa = RSA_new_method(e);
#endif
	if (!rsa)
		goto err;
d272 11
a282 1
	if(!BN_set_word(bn, f4) || !RSA_generate_key_ex(rsa, num, bn, &cb))
@


1.1.1.8
log
@Import OpenSSL 1.0.1g
@
text
@d81 1
a81 1
#define DEFBITS	1024
@


