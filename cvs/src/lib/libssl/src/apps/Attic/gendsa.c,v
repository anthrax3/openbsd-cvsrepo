head	1.32;
access;
symbols
	OPENBSD_5_6:1.31.0.4
	OPENBSD_5_6_BASE:1.31
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.10.0.12
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.4
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.4
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.31;
commitid	7A7DObXgY4Fni8xJ;

1.31
date	2014.07.25.06.05.32;	author doug;	state Exp;
branches;
next	1.30;
commitid	DnBLYuKKjvrWeH3R;

1.30
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	EB0l28piqIRSpBUh;

1.29
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.28;
commitid	0NuggCO2WJOZj8Kh;

1.28
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.27;
commitid	ivoCf1icUxmbGXSc;

1.27
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	mJUVYpkFBZ0Zv2bG;

1.26
date	2014.06.02.16.23.18;	author jsing;	state Exp;
branches;
next	1.25;
commitid	IqYoI5gjfSomu7k2;

1.25
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.17.15.45.50;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.18.09.38.42;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.15.43.33;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.03.02.34.32;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.01.22.58.50;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.02.56.56;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.16;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.08;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.31;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.19;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2011.11.03.02.32.06;	author djm;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: gendsa.c,v 1.31 2014/07/25 06:05:32 doug Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */


#include <sys/types.h>
#include <sys/stat.h>

#include <stdio.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

#define DEFBITS	512

int gendsa_main(int, char **);

int
gendsa_main(int argc, char **argv)
{
	DSA *dsa = NULL;
	int ret = 1;
	char *outfile = NULL;
	char *dsaparams = NULL;
	char *passargout = NULL, *passout = NULL;
	BIO *out = NULL, *in = NULL;
	const EVP_CIPHER *enc = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif

	argv++;
	argc--;
	for (;;) {
		if (argc <= 0)
			break;
		if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passout") == 0) {
			if (--argc < 1)
				goto bad;
			passargout = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-") == 0)
			goto bad;
#ifndef OPENSSL_NO_DES
		else if (strcmp(*argv, "-des") == 0)
			enc = EVP_des_cbc();
		else if (strcmp(*argv, "-des3") == 0)
			enc = EVP_des_ede3_cbc();
#endif
#ifndef OPENSSL_NO_IDEA
		else if (strcmp(*argv, "-idea") == 0)
			enc = EVP_idea_cbc();
#endif
#ifndef OPENSSL_NO_AES
		else if (strcmp(*argv, "-aes128") == 0)
			enc = EVP_aes_128_cbc();
		else if (strcmp(*argv, "-aes192") == 0)
			enc = EVP_aes_192_cbc();
		else if (strcmp(*argv, "-aes256") == 0)
			enc = EVP_aes_256_cbc();
#endif
#ifndef OPENSSL_NO_CAMELLIA
		else if (strcmp(*argv, "-camellia128") == 0)
			enc = EVP_camellia_128_cbc();
		else if (strcmp(*argv, "-camellia192") == 0)
			enc = EVP_camellia_192_cbc();
		else if (strcmp(*argv, "-camellia256") == 0)
			enc = EVP_camellia_256_cbc();
#endif
		else if (**argv != '-' && dsaparams == NULL) {
			dsaparams = *argv;
		} else
			goto bad;
		argv++;
		argc--;
	}

	if (dsaparams == NULL) {
bad:
		BIO_printf(bio_err, "usage: gendsa [args] dsaparam-file\n");
		BIO_printf(bio_err, " -out file - output the key to 'file'\n");
#ifndef OPENSSL_NO_DES
		BIO_printf(bio_err, " -des      - encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err, " -des3     - encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
#endif
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err, " -idea     - encrypt the generated key with IDEA in cbc mode\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err, " -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc aes\n");
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err, " -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc camellia\n");
#endif
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e - use engine e, possibly a hardware device.\n");
#endif
		BIO_printf(bio_err, " dsaparam-file\n");
		BIO_printf(bio_err, "           - a DSA parameter file as generated by the dsaparam command\n");
		goto end;
	}
#ifndef OPENSSL_NO_ENGINE
	setup_engine(bio_err, engine, 0);
#endif

	if (!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}
	in = BIO_new(BIO_s_file());
	if (!(BIO_read_filename(in, dsaparams))) {
		perror(dsaparams);
		goto end;
	}
	if ((dsa = PEM_read_bio_DSAparams(in, NULL, NULL, NULL)) == NULL) {
		BIO_printf(bio_err, "unable to load DSA parameter file\n");
		goto end;
	}
	BIO_free(in);
	in = NULL;

	out = BIO_new(BIO_s_file());
	if (out == NULL)
		goto end;

	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	BIO_printf(bio_err, "Generating DSA key, %d bits\n",
	    BN_num_bits(dsa->p));
	if (!DSA_generate_key(dsa))
		goto end;

	if (!PEM_write_bio_DSAPrivateKey(out, dsa, enc, NULL, 0, NULL, passout))
		goto end;
	ret = 0;
end:
	if (ret != 0)
		ERR_print_errors(bio_err);
	BIO_free(in);
	if (out != NULL)
		BIO_free_all(out);
	if (dsa != NULL)
		DSA_free(dsa);
	free(passout);

	return (ret);
}
@


1.31
log
@BIO_free() returns immediately when the sole input is NULL.
Remove unnecessary NULL check.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gendsa.c,v 1.30 2014/07/14 00:35:10 deraadt Exp $ */
@


1.30
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: gendsa.c,v 1.29 2014/07/12 17:54:31 jsing Exp $ */
d222 1
a222 2
	if (in != NULL)
		BIO_free(in);
@


1.29
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: gendsa.c,v 1.28 2014/07/09 21:02:35 tedu Exp $ */
d229 1
a229 1
	
@


1.28
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: gendsa.c,v 1.27 2014/06/12 15:49:27 deraadt Exp $ */
a93 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.27
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a60 1
#ifndef OPENSSL_NO_DSA
a234 1
#endif
@


1.26
log
@Stop pretending that openssl(1) applications support the -rand option.
The underlying code has long been removed, making this a no-op.

If your random subsystem actually requires that you seed it from a file,
then you really should go and buy a new random subsystem that was built
after 1990.

Diff from Brent Cook.

ok deraadt@@
@
text
@d1 1
a1 1
/* apps/gendsa.c */
@


1.25
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d88 1
a88 1
	char *inrand = NULL, *dsaparams = NULL;
d120 1
a120 5
		else if (strcmp(*argv, "-rand") == 0) {
			if (--argc < 1)
				goto bad;
			inrand = *(++argv);
		} else if (strcmp(*argv, "-") == 0)
a177 3
		BIO_printf(bio_err, " -rand file:file:...\n");
		BIO_printf(bio_err, "           - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err, "             the random number generator\n");
@


1.24
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a95 2
	signal(SIGPIPE, SIG_IGN);

@


1.23
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d241 1
a241 2
	if (passout)
		free(passout);
@


1.22
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d59 2
a60 1
#include <openssl/opensslconf.h>/* for OPENSSL_NO_DSA */
d62 4
d68 1
a68 2
#include <sys/types.h>
#include <sys/stat.h>
d70 1
a71 1
#include <openssl/err.h>
d74 2
a76 1
#include <openssl/pem.h>
@


1.21
log
@deleted seed some time ago
@
text
@a92 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.20
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a136 4
#ifndef OPENSSL_NO_SEED
		else if (strcmp(*argv, "-seed") == 0)
			enc = EVP_seed_cbc();
#endif
a170 4
#endif
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err, " -seed\n");
		BIO_printf(bio_err, "                 encrypt PEM output with cbc seed\n");
@


1.19
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@d91 1
a91 1
	apps_startup();
d250 1
a250 1
	apps_shutdown();
@


1.18
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a252 6
#else				/* !OPENSSL_NO_DSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.17
log
@simplify file:file:... stuff
@
text
@a230 7
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL) {
		BIO_printf(bio_err, "warning, not much extra random data, consider using the -rand option\n");
	}
	if (inrand != NULL)
		BIO_printf(bio_err, "%ld semi-random bytes loaded\n",
		    app_RAND_load_files(inrand));

a234 2

	app_RAND_write_file(NULL, bio_err);
@


1.16
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d191 1
a191 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", ':', ':');
@


1.15
log
@KaboomNF
@
text
@a73 2
#undef PROG
#define PROG gendsa_main
d75 1
a75 1
int MAIN(int, char **);
d78 1
a78 1
MAIN(int argc, char **argv)
@


1.14
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d59 1
a59 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
d97 1
a97 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d110 1
a110 1
			outfile= *(++argv);
d114 1
a114 1
			passargout= *(++argv);
d120 1
a120 1
			engine= *(++argv);
d126 1
a126 1
			inrand= *(++argv);
a199 1

a207 2


a212 1

d262 1
a262 1
	return(ret);
d264 1
a264 1
#else /* !OPENSSL_NO_DSA */
d266 1
a266 1
# if PEDANTIC
d268 1
a268 1
# endif
@


1.13
log
@Initial KNF.
@
text
@d193 1
a193 1
		BIO_printf(bio_err, " -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
d266 1
a266 1
	OPENSSL_EXIT(ret);
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d79 7
a85 6
int MAIN(int argc, char **argv)
	{
	DSA *dsa=NULL;
	int ret=1;
	char *outfile=NULL;
	char *inrand=NULL,*dsaparams=NULL;
d87 2
a88 2
	BIO *out=NULL,*in=NULL;
	const EVP_CIPHER *enc=NULL;
d90 1
a90 1
	char *engine=NULL;
d96 2
a97 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d104 6
a109 6
	for (;;)
		{
		if (argc <= 0) break;
		if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d111 3
a113 4
			}
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
d115 1
a115 1
			}
d117 3
a119 3
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
d121 1
a121 1
			}
d123 3
a125 3
		else if (strcmp(*argv,"-rand") == 0)
			{
			if (--argc < 1) goto bad;
d127 1
a127 2
			}
		else if (strcmp(*argv,"-") == 0)
d130 4
a133 4
		else if (strcmp(*argv,"-des") == 0)
			enc=EVP_des_cbc();
		else if (strcmp(*argv,"-des3") == 0)
			enc=EVP_des_ede3_cbc();
d136 2
a137 2
		else if (strcmp(*argv,"-idea") == 0)
			enc=EVP_idea_cbc();
d140 2
a141 2
		else if (strcmp(*argv,"-seed") == 0)
			enc=EVP_seed_cbc();
d144 6
a149 6
		else if (strcmp(*argv,"-aes128") == 0)
			enc=EVP_aes_128_cbc();
		else if (strcmp(*argv,"-aes192") == 0)
			enc=EVP_aes_192_cbc();
		else if (strcmp(*argv,"-aes256") == 0)
			enc=EVP_aes_256_cbc();
d152 6
a157 6
		else if (strcmp(*argv,"-camellia128") == 0)
			enc=EVP_camellia_128_cbc();
		else if (strcmp(*argv,"-camellia192") == 0)
			enc=EVP_camellia_192_cbc();
		else if (strcmp(*argv,"-camellia256") == 0)
			enc=EVP_camellia_256_cbc();
d159 1
a159 2
		else if (**argv != '-' && dsaparams == NULL)
			{
d161 1
a161 2
			}
		else
d165 1
a165 1
		}
d167 1
a167 2
	if (dsaparams == NULL)
		{
d169 2
a170 2
		BIO_printf(bio_err,"usage: gendsa [args] dsaparam-file\n");
		BIO_printf(bio_err," -out file - output the key to 'file'\n");
d172 2
a173 2
		BIO_printf(bio_err," -des      - encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err," -des3     - encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
d176 1
a176 1
		BIO_printf(bio_err," -idea     - encrypt the generated key with IDEA in cbc mode\n");
d179 2
a180 2
		BIO_printf(bio_err," -seed\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc seed\n");
d183 2
a184 2
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
d187 2
a188 2
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
d191 1
a191 1
		BIO_printf(bio_err," -engine e - use engine e, possibly a hardware device.\n");
d193 5
a197 5
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
		BIO_printf(bio_err,"           - load the file (or the files in the directory) into\n");
		BIO_printf(bio_err,"             the random number generator\n");
		BIO_printf(bio_err," dsaparam-file\n");
		BIO_printf(bio_err,"           - a DSA parameter file as generated by the dsaparam command\n");
d199 1
a199 1
		}
d202 1
a202 1
        setup_engine(bio_err, engine, 0);
d205 1
a205 1
	if(!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
d211 2
a212 3
	in=BIO_new(BIO_s_file());
	if (!(BIO_read_filename(in,dsaparams)))
		{
d215 1
a215 1
		}
d217 2
a218 3
	if ((dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL)) == NULL)
		{
		BIO_printf(bio_err,"unable to load DSA parameter file\n");
d220 1
a220 1
		}
d223 9
a231 12
		
	out=BIO_new(BIO_s_file());
	if (out == NULL) goto end;

	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a233 1
			}
d235 1
d237 3
a239 4
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
		{
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
		}
d241 2
a242 2
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d244 4
a247 3
	BIO_printf(bio_err,"Generating DSA key, %d bits\n",
							BN_num_bits(dsa->p));
	if (!DSA_generate_key(dsa)) goto end;
d251 1
a251 1
	if (!PEM_write_bio_DSAPrivateKey(out,dsa,enc,NULL,0,NULL, passout))
d253 1
a253 1
	ret=0;
d257 8
a264 4
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
	if (dsa != NULL) DSA_free(dsa);
	if(passout) free(passout);
d267 1
a267 1
	}
d271 1
a271 1
static void *dummy=&dummy;
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d269 1
a269 1
	if(passout) OPENSSL_free(passout);
@


1.10
log
@openssl-1.0.0e: resolve conflicts
@
text
@a235 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.9
log
@resolve conflicts, fix local changes
@
text
@a80 3
#ifndef OPENSSL_NO_ENGINE
	ENGINE *e = NULL;
#endif
d206 1
a206 1
        e = setup_engine(bio_err, engine, 0);
@


1.8
log
@resolve conflicts
@
text
@d282 6
@


1.7
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d59 1
d143 4
d155 8
d185 4
d192 4
@


1.6
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d80 1
d82 1
d90 1
d92 1
d118 1
d124 1
d176 1
d178 1
d187 1
d189 1
d259 1
a259 1
	EXIT(ret);
@


1.5
log
@openssl-engine-0.9.6 merge
@
text
@d59 1
a59 1
#ifndef NO_DSA
a70 1
#include <openssl/engine.h>
d87 1
a87 1
	EVP_CIPHER *enc=NULL;
d96 3
d126 1
a126 1
#ifndef NO_DES
d132 1
a132 1
#ifndef NO_IDEA
d136 8
d159 1
a159 1
#ifndef NO_DES
d163 1
a163 1
#ifndef NO_IDEA
d166 4
d179 1
a179 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d208 1
a208 1
#ifdef VMS
d248 1
@


1.4
log
@OpenSSL 0.9.5a merge
@
text
@d71 1
d81 1
d89 1
d112 5
d156 1
d165 18
d208 1
d210 7
d247 1
a247 1
	if (out != NULL) BIO_free(out);
d249 1
a249 1
	if(passout) Free(passout);
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d148 1
a148 1
		BIO_printf(bio_err," -rand file:file:...\n");
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@a65 1
#include <openssl/rand.h>
d76 2
a77 1
static long dsa_load_rand(char *names);
a79 1
	char buffer[200];
d83 2
a84 1
	char *inrand=NULL,*randfile,*dsaparams=NULL;
d104 5
d156 6
d175 1
d191 2
a192 5
	randfile=RAND_file_name(buffer,200);
	if ((randfile == NULL)|| !RAND_load_file(randfile,1024L*1024L))
		BIO_printf(bio_err,"unable to load 'random state'\n");

	if (inrand == NULL)
d194 2
a195 2
	else
		{
d197 1
a197 2
			dsa_load_rand(inrand));
		}
d203 1
a203 4
	if (randfile == NULL)
		BIO_printf(bio_err,"unable to write 'random state'\n");
	else
		RAND_write_file(randfile);
d205 1
a205 1
	if (!PEM_write_bio_DSAPrivateKey(out,dsa,enc,NULL,0,NULL,NULL))
d211 1
d214 1
a215 22
	}

static long dsa_load_rand(char *name)
	{
	char *p,*n;
	int last;
	long tot=0;

	for (;;)
		{
		last=0;
		for (p=name; ((*p != '\0') && (*p != LIST_SEPARATOR_CHAR)); p++);
		if (*p == '\0') last=1;
		*p='\0';
		n=name;
		name=p+1;
		if (*n == '\0') break;

		tot+=RAND_load_file(n,1);
		if (last) break;
		}
	return(tot);
@


1.1
log
@Initial revision
@
text
@d59 1
d65 7
a71 7
#include "bio.h"
#include "rand.h"
#include "err.h"
#include "bn.h"
#include "dsa.h"
#include "x509.h"
#include "pem.h"
a76 1
#ifndef NOPROTO
d78 1
a78 7
#else
static long dsa_load_rand();
#endif

int MAIN(argc, argv)
int argc;
char **argv;
d82 1
a82 1
	int ret=1,num=DEFBITS;
d86 1
d111 11
a121 1
		else if (dsaparams == NULL)
d123 1
a123 1
			dsaparams= *argv;
d134 9
a142 2
		BIO_printf(bio_err,"usage: gendsa [args] [numbits]\n");
		BIO_printf(bio_err," -out file - output the key to 'file\n");
d146 2
d152 1
a152 1
	if (!(BIO_read_filename(in,"dsaparams")))
d158 1
a158 1
	if ((dsa=PEM_read_bio_DSAparams(in,NULL,NULL)) == NULL)
d191 2
a192 2
	BIO_printf(bio_err,"Generating DSA parameters, %d bit long prime\n",num);
	BIO_printf(bio_err,"This could take some time\n");
d200 1
a200 1
	if (!PEM_write_bio_DSAPrivateKey(out,dsa,EVP_des_ede3_cbc(),NULL,0,NULL))
d211 1
a211 2
static long dsa_load_rand(name)
char *name;
d232 1
a232 2


@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@a58 1
#ifndef OPENSSL_NO_DSA
d64 7
a70 6
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/bn.h>
#include <openssl/dsa.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
d76 5
a80 1
int MAIN(int, char **);
d82 3
a84 1
int MAIN(int argc, char **argv)
d86 1
a86 1
	ENGINE *e = NULL;
d88 1
a88 1
	int ret=1;
d90 1
a90 2
	char *inrand=NULL,*dsaparams=NULL;
	char *passargout = NULL, *passout = NULL;
a91 2
	const EVP_CIPHER *enc=NULL;
	char *engine=NULL;
a98 3
	if (!load_config(bio_err, NULL))
		goto end;

a108 10
		else if (strcmp(*argv,"-passout") == 0)
			{
			if (--argc < 1) goto bad;
			passargout= *(++argv);
			}
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d116 1
a116 19
#ifndef OPENSSL_NO_DES
		else if (strcmp(*argv,"-des") == 0)
			enc=EVP_des_cbc();
		else if (strcmp(*argv,"-des3") == 0)
			enc=EVP_des_ede3_cbc();
#endif
#ifndef OPENSSL_NO_IDEA
		else if (strcmp(*argv,"-idea") == 0)
			enc=EVP_idea_cbc();
#endif
#ifndef OPENSSL_NO_AES
		else if (strcmp(*argv,"-aes128") == 0)
			enc=EVP_aes_128_cbc();
		else if (strcmp(*argv,"-aes192") == 0)
			enc=EVP_aes_192_cbc();
		else if (strcmp(*argv,"-aes256") == 0)
			enc=EVP_aes_256_cbc();
#endif
		else if (**argv != '-' && dsaparams == NULL)
d118 1
a118 1
			dsaparams = *argv;
d129 3
a131 15
		BIO_printf(bio_err,"usage: gendsa [args] dsaparam-file\n");
		BIO_printf(bio_err," -out file - output the key to 'file'\n");
#ifndef OPENSSL_NO_DES
		BIO_printf(bio_err," -des      - encrypt the generated key with DES in cbc mode\n");
		BIO_printf(bio_err," -des3     - encrypt the generated key with DES in ede cbc mode (168 bit key)\n");
#endif
#ifndef OPENSSL_NO_IDEA
		BIO_printf(bio_err," -idea     - encrypt the generated key with IDEA in cbc mode\n");
#endif
#ifndef OPENSSL_NO_AES
		BIO_printf(bio_err," -aes128, -aes192, -aes256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc aes\n");
#endif
		BIO_printf(bio_err," -engine e - use engine e, possibly a hardware device.\n");
		BIO_printf(bio_err," -rand file%cfile%c...\n", LIST_SEPARATOR_CHAR, LIST_SEPARATOR_CHAR);
a133 2
		BIO_printf(bio_err," dsaparam-file\n");
		BIO_printf(bio_err,"           - a DSA parameter file as generated by the dsaparam command\n");
a136 8
        e = setup_engine(bio_err, engine, 0);

	if(!app_passwd(bio_err, NULL, passargout, NULL, &passout)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}


d138 1
a138 1
	if (!(BIO_read_filename(in,dsaparams)))
d144 1
a144 1
	if ((dsa=PEM_read_bio_DSAparams(in,NULL,NULL,NULL)) == NULL)
a149 1
	in = NULL;
a154 1
		{
a155 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
d165 7
a171 1
	if (!app_RAND_load_file(NULL, bio_err, 1) && inrand == NULL)
d173 2
a174 1
		BIO_printf(bio_err,"warning, not much extra random data, consider using the -rand option\n");
a175 3
	if (inrand != NULL)
		BIO_printf(bio_err,"%ld semi-random bytes loaded\n",
			app_RAND_load_files(inrand));
d177 2
a178 2
	BIO_printf(bio_err,"Generating DSA key, %d bits\n",
							BN_num_bits(dsa->p));
d181 4
a184 1
	app_RAND_write_file(NULL, bio_err);
d186 1
a186 1
	if (!PEM_write_bio_DSAPrivateKey(out,dsa,enc,NULL,0,NULL, passout))
d192 1
a192 2
	if (in != NULL) BIO_free(in);
	if (out != NULL) BIO_free_all(out);
a193 2
	if(passout) OPENSSL_free(passout);
	apps_shutdown();
d196 25
a220 1
#endif
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a79 1
#ifndef OPENSSL_NO_ENGINE
a80 1
#endif
a87 1
#ifndef OPENSSL_NO_ENGINE
a88 1
#endif
a113 1
#ifndef OPENSSL_NO_ENGINE
a118 1
#endif
a169 1
#ifndef OPENSSL_NO_ENGINE
a170 1
#endif
a178 1
#ifndef OPENSSL_NO_ENGINE
a179 1
#endif
d249 1
a249 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@a58 1
#include <openssl/opensslconf.h>	/* for OPENSSL_NO_DSA */
a141 4
#ifndef OPENSSL_NO_SEED
		else if (strcmp(*argv,"-seed") == 0)
			enc=EVP_seed_cbc();
#endif
a149 8
#ifndef OPENSSL_NO_CAMELLIA
		else if (strcmp(*argv,"-camellia128") == 0)
			enc=EVP_camellia_128_cbc();
		else if (strcmp(*argv,"-camellia192") == 0)
			enc=EVP_camellia_192_cbc();
		else if (strcmp(*argv,"-camellia256") == 0)
			enc=EVP_camellia_256_cbc();
#endif
a171 4
#ifndef OPENSSL_NO_SEED
		BIO_printf(bio_err," -seed\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc seed\n");
#endif
a174 4
#endif
#ifndef OPENSSL_NO_CAMELLIA
		BIO_printf(bio_err," -camellia128, -camellia192, -camellia256\n");
		BIO_printf(bio_err,"                 encrypt PEM output with cbc camellia\n");
@


1.1.1.5
log
@import OpenSSL-1.0.0a
@
text
@a281 6
#else /* !OPENSSL_NO_DSA */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


1.1.1.6
log
@import OpenSSL 1.0.0e
@
text
@d81 3
d209 1
a209 1
        setup_engine(bio_err, engine, 0);
@


