head	1.25;
access;
symbols
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.8
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	openssl_1_0_1_c:1.1.1.8
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	openssl_1_0_0_f:1.1.1.8
	openssl_1_0_0_e:1.1.1.8
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	openssh_1_0_0_a:1.1.1.8
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.7
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.7
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.4
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.25
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.24;
commitid	7A7DObXgY4Fni8xJ;

1.24
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	EB0l28piqIRSpBUh;

1.23
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.22;
commitid	0NuggCO2WJOZj8Kh;

1.22
date	2014.07.09.21.02.35;	author tedu;	state Exp;
branches;
next	1.21;
commitid	ivoCf1icUxmbGXSc;

1.21
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	mJUVYpkFBZ0Zv2bG;

1.20
date	2014.05.29.21.07.42;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.23.19.09.48;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.19.54.57;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.04.17.17;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.01.22.58.51;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.27.05.06.54;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.08.08.03.12;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.00.02.50;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.12.15.02.56.58;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.35;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.43.01;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.23;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.20.41.30;	author markus;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.29;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.10.01.22.54.01;	author djm;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: rsautl.c,v 1.24 2014/07/14 00:35:10 deraadt Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 2000.
 */
/* ====================================================================
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <openssl/opensslconf.h>


#include <string.h>

#include "apps.h"

#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>

#define RSA_SIGN 	1
#define RSA_VERIFY 	2
#define RSA_ENCRYPT 	3
#define RSA_DECRYPT 	4

#define KEY_PRIVKEY	1
#define KEY_PUBKEY	2
#define KEY_CERT	3

static void usage(void);

int rsautl_main(int argc, char **);

int
rsautl_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	BIO *in = NULL, *out = NULL;
	char *infile = NULL, *outfile = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif
	char *keyfile = NULL;
	char rsa_mode = RSA_VERIFY, key_type = KEY_PRIVKEY;
	int keyform = FORMAT_PEM;
	char need_priv = 0, badarg = 0, rev = 0;
	char hexdump = 0, asn1parse = 0;
	X509 *x;
	EVP_PKEY *pkey = NULL;
	RSA *rsa = NULL;
	unsigned char *rsa_in = NULL, *rsa_out = NULL, pad;
	char *passargin = NULL, *passin = NULL;
	int rsa_inlen, rsa_outlen = 0;
	int keysize;

	int ret = 1;

	argc--;
	argv++;

	ERR_load_crypto_strings();
	OpenSSL_add_all_algorithms();
	pad = RSA_PKCS1_PADDING;

	while (argc >= 1) {
		if (!strcmp(*argv, "-in")) {
			if (--argc < 1)
				badarg = 1;
			else
				infile = *(++argv);
		} else if (!strcmp(*argv, "-out")) {
			if (--argc < 1)
				badarg = 1;
			else
				outfile = *(++argv);
		} else if (!strcmp(*argv, "-inkey")) {
			if (--argc < 1)
				badarg = 1;
			else
				keyfile = *(++argv);
		} else if (!strcmp(*argv, "-passin")) {
			if (--argc < 1)
				badarg = 1;
			else
				passargin = *(++argv);
		} else if (strcmp(*argv, "-keyform") == 0) {
			if (--argc < 1)
				badarg = 1;
			else
				keyform = str2fmt(*(++argv));
#ifndef OPENSSL_NO_ENGINE
		} else if (!strcmp(*argv, "-engine")) {
			if (--argc < 1)
				badarg = 1;
			else
				engine = *(++argv);
#endif
		} else if (!strcmp(*argv, "-pubin")) {
			key_type = KEY_PUBKEY;
		} else if (!strcmp(*argv, "-certin")) {
			key_type = KEY_CERT;
		} else if (!strcmp(*argv, "-asn1parse"))
			asn1parse = 1;
		else if (!strcmp(*argv, "-hexdump"))
			hexdump = 1;
		else if (!strcmp(*argv, "-raw"))
			pad = RSA_NO_PADDING;
		else if (!strcmp(*argv, "-oaep"))
			pad = RSA_PKCS1_OAEP_PADDING;
		else if (!strcmp(*argv, "-ssl"))
			pad = RSA_SSLV23_PADDING;
		else if (!strcmp(*argv, "-pkcs"))
			pad = RSA_PKCS1_PADDING;
		else if (!strcmp(*argv, "-x931"))
			pad = RSA_X931_PADDING;
		else if (!strcmp(*argv, "-sign")) {
			rsa_mode = RSA_SIGN;
			need_priv = 1;
		} else if (!strcmp(*argv, "-verify"))
			rsa_mode = RSA_VERIFY;
		else if (!strcmp(*argv, "-rev"))
			rev = 1;
		else if (!strcmp(*argv, "-encrypt"))
			rsa_mode = RSA_ENCRYPT;
		else if (!strcmp(*argv, "-decrypt")) {
			rsa_mode = RSA_DECRYPT;
			need_priv = 1;
		} else
			badarg = 1;
		if (badarg) {
			usage();
			goto end;
		}
		argc--;
		argv++;
	}

	if (need_priv && (key_type != KEY_PRIVKEY)) {
		BIO_printf(bio_err, "A private key is needed for this operation\n");
		goto end;
	}
#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif
	if (!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}

	switch (key_type) {
	case KEY_PRIVKEY:
		pkey = load_key(bio_err, keyfile, keyform, 0,
		    passin, e, "Private Key");
		break;

	case KEY_PUBKEY:
		pkey = load_pubkey(bio_err, keyfile, keyform, 0,
		    NULL, e, "Public Key");
		break;

	case KEY_CERT:
		x = load_cert(bio_err, keyfile, keyform,
		    NULL, e, "Certificate");
		if (x) {
			pkey = X509_get_pubkey(x);
			X509_free(x);
		}
		break;
	}

	if (!pkey) {
		return 1;
	}
	rsa = EVP_PKEY_get1_RSA(pkey);
	EVP_PKEY_free(pkey);

	if (!rsa) {
		BIO_printf(bio_err, "Error getting RSA key\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile) {
		if (!(in = BIO_new_file(infile, "rb"))) {
			BIO_printf(bio_err, "Error Reading Input File\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	} else
		in = BIO_new_fp(stdin, BIO_NOCLOSE);

	if (outfile) {
		if (!(out = BIO_new_file(outfile, "wb"))) {
			BIO_printf(bio_err, "Error Reading Output File\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	} else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
	}

	keysize = RSA_size(rsa);

	rsa_in = reallocarray(NULL, keysize, 2);
	rsa_out = malloc(keysize);

	/* Read the input data */
	rsa_inlen = BIO_read(in, rsa_in, keysize * 2);
	if (rsa_inlen <= 0) {
		BIO_printf(bio_err, "Error reading input Data\n");
		exit(1);
	}
	if (rev) {
		int i;
		unsigned char ctmp;
		for (i = 0; i < rsa_inlen / 2; i++) {
			ctmp = rsa_in[i];
			rsa_in[i] = rsa_in[rsa_inlen - 1 - i];
			rsa_in[rsa_inlen - 1 - i] = ctmp;
		}
	}
	switch (rsa_mode) {

	case RSA_VERIFY:
		rsa_outlen = RSA_public_decrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
		break;

	case RSA_SIGN:
		rsa_outlen = RSA_private_encrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
		break;

	case RSA_ENCRYPT:
		rsa_outlen = RSA_public_encrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
		break;

	case RSA_DECRYPT:
		rsa_outlen = RSA_private_decrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
		break;

	}

	if (rsa_outlen <= 0) {
		BIO_printf(bio_err, "RSA operation error\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	ret = 0;
	if (asn1parse) {
		if (!ASN1_parse_dump(out, rsa_out, rsa_outlen, 1, -1)) {
			ERR_print_errors(bio_err);
		}
	} else if (hexdump)
		BIO_dump(out, (char *) rsa_out, rsa_outlen);
	else
		BIO_write(out, rsa_out, rsa_outlen);

end:
	RSA_free(rsa);
	BIO_free(in);
	BIO_free_all(out);
	free(rsa_in);
	free(rsa_out);
	free(passin);

	return ret;
}

static void
usage()
{
	BIO_printf(bio_err, "Usage: rsautl [options]\n");
	BIO_printf(bio_err, "-in file        input file\n");
	BIO_printf(bio_err, "-out file       output file\n");
	BIO_printf(bio_err, "-inkey file     input key\n");
	BIO_printf(bio_err, "-keyform arg    private key format - default PEM\n");
	BIO_printf(bio_err, "-pubin          input is an RSA public\n");
	BIO_printf(bio_err, "-certin         input is a certificate carrying an RSA public key\n");
	BIO_printf(bio_err, "-ssl            use SSL v2 padding\n");
	BIO_printf(bio_err, "-raw            use no padding\n");
	BIO_printf(bio_err, "-pkcs           use PKCS#1 v1.5 padding (default)\n");
	BIO_printf(bio_err, "-oaep           use PKCS#1 OAEP\n");
	BIO_printf(bio_err, "-sign           sign with private key\n");
	BIO_printf(bio_err, "-verify         verify with public key\n");
	BIO_printf(bio_err, "-encrypt        encrypt with public key\n");
	BIO_printf(bio_err, "-decrypt        decrypt with private key\n");
	BIO_printf(bio_err, "-hexdump        hex dump output\n");
#ifndef OPENSSL_NO_ENGINE
	BIO_printf(bio_err, "-engine e       use engine e, possibly a hardware device.\n");
	BIO_printf(bio_err, "-passin arg    pass phrase source\n");
#endif

}

@


1.24
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: rsautl.c,v 1.23 2014/07/12 17:54:31 jsing Exp $ */
@


1.23
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rsautl.c,v 1.22 2014/07/09 21:02:35 tedu Exp $ */
d83 1
a83 1
int 
d316 1
a316 1
static void 
@


1.22
log
@unifdef a whole bunch of NO RSA/DSA/ECDH defines i deleted from libssl
@
text
@d1 1
a1 1
/* $OpenBSD: rsautl.c,v 1.21 2014/06/12 15:49:27 deraadt Exp $ */
a108 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.21
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a60 1
#ifndef OPENSSL_NO_RSA
a344 1
#endif
@


1.20
log
@convert 53 malloc(a*b) to reallocarray(NULL, a, b).  that is 53
potential integer overflows easily changed into an allocation return
of NULL, with errno nicely set if need be.  checks for an allocations
returning NULL are commonplace, or if the object is dereferenced
(quite normal) will result in a nice fault which can be detected &
repaired properly.
ok tedu
@
text
@d1 1
a1 1
/* rsautl.c */
@


1.19
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@d256 1
a256 1
	rsa_in = malloc(keysize * 2);
@


1.18
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d308 1
d313 4
a316 6
	if (rsa_in)
		free(rsa_in);
	if (rsa_out)
		free(rsa_out);
	if (passin)
		free(passin);
@


1.17
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d60 1
d63 2
d66 1
a66 1
#include <string.h>
a80 2


@


1.16
log
@Unifdef -UPEDANTIC. ok beck@@ tedu@@
@
text
@a109 3
	if (!bio_err)
		bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);

d112 1
@


1.15
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@a347 6
#else				/* !OPENSSL_NO_RSA */

#if PEDANTIC
static void *dummy = &dummy;
#endif

@


1.14
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@a202 2
/* FIXME: seed PRNG only if needed */
	app_RAND_load_file(NULL, bio_err, 0);
@


1.13
log
@KaboomNF
@
text
@a78 1
#undef PROG
a79 1
#define PROG rsautl_main
d81 1
a81 1
int MAIN(int argc, char **);
d84 1
a84 1
MAIN(int argc, char **argv)
@


1.12
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d13 1
a13 1
 *    notice, this list of conditions and the following disclaimer. 
d85 2
a86 1
int MAIN(int argc, char **argv)
d112 2
a113 1
	if(!bio_err) bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);
d120 3
a122 4
	
	while(argc >= 1)
	{
		if (!strcmp(*argv,"-in")) {
d126 2
a127 2
				infile= *(++argv);
		} else if (!strcmp(*argv,"-out")) {
d131 2
a132 2
				outfile= *(++argv);
		} else if(!strcmp(*argv, "-inkey")) {
d137 1
a137 1
		} else if (!strcmp(*argv,"-passin")) {
d141 2
a142 2
				passargin= *(++argv);
		} else if (strcmp(*argv,"-keyform") == 0) {
d146 1
a146 1
				keyform=str2fmt(*(++argv));
d148 1
a148 1
		} else if(!strcmp(*argv, "-engine")) {
d154 1
a154 1
		} else if(!strcmp(*argv, "-pubin")) {
d156 1
a156 1
		} else if(!strcmp(*argv, "-certin")) {
d158 15
a172 9
		} 
		else if(!strcmp(*argv, "-asn1parse")) asn1parse = 1;
		else if(!strcmp(*argv, "-hexdump")) hexdump = 1;
		else if(!strcmp(*argv, "-raw")) pad = RSA_NO_PADDING;
		else if(!strcmp(*argv, "-oaep")) pad = RSA_PKCS1_OAEP_PADDING;
		else if(!strcmp(*argv, "-ssl")) pad = RSA_SSLV23_PADDING;
		else if(!strcmp(*argv, "-pkcs")) pad = RSA_PKCS1_PADDING;
		else if(!strcmp(*argv, "-x931")) pad = RSA_X931_PADDING;
		else if(!strcmp(*argv, "-sign")) {
d175 7
a181 4
		} else if(!strcmp(*argv, "-verify")) rsa_mode = RSA_VERIFY;
		else if(!strcmp(*argv, "-rev")) rev = 1;
		else if(!strcmp(*argv, "-encrypt")) rsa_mode = RSA_ENCRYPT;
		else if(!strcmp(*argv, "-decrypt")) {
d184 3
a186 2
		} else badarg = 1;
		if(badarg) {
d194 1
a194 1
	if(need_priv && (key_type != KEY_PRIVKEY)) {
a197 1

d199 1
a199 1
        e = setup_engine(bio_err, engine, 0);
d201 1
a201 1
	if(!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
a204 1

d207 3
a209 3
	
	switch(key_type) {
		case KEY_PRIVKEY:
d211 1
a211 1
			passin, e, "Private Key");
d214 1
a214 1
		case KEY_PUBKEY:
d216 1
a216 1
			NULL, e, "Public Key");
d219 1
a219 1
		case KEY_CERT:
d221 2
a222 2
			NULL, e, "Certificate");
		if(x) {
d229 1
a229 1
	if(!pkey) {
a231 1

d235 1
a235 1
	if(!rsa) {
d240 2
a241 4


	if(infile) {
		if(!(in = BIO_new_file(infile, "rb"))) {
d243 1
a243 1
			ERR_print_errors(bio_err);	
d246 2
a247 1
	} else in = BIO_new_fp(stdin, BIO_NOCLOSE);
d249 2
a250 2
	if(outfile) {
		if(!(out = BIO_new_file(outfile, "wb"))) {
d252 1
a252 1
			ERR_print_errors(bio_err);	
d266 1
a266 1
	if(rsa_inlen <= 0) {
d270 1
a270 1
	if(rev) {
d273 1
a273 1
		for(i = 0; i < rsa_inlen/2; i++) {
d279 1
a279 1
	switch(rsa_mode) {
d281 2
a282 2
		case RSA_VERIFY:
			rsa_outlen  = RSA_public_decrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
d285 2
a286 2
		case RSA_SIGN:
			rsa_outlen  = RSA_private_encrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
d289 2
a290 2
		case RSA_ENCRYPT:
			rsa_outlen  = RSA_public_encrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
d293 2
a294 2
		case RSA_DECRYPT:
			rsa_outlen  = RSA_private_decrypt(rsa_inlen, rsa_in, rsa_out, rsa, pad);
d299 1
a299 1
	if(rsa_outlen <= 0) {
d305 2
a306 2
	if(asn1parse) {
		if(!ASN1_parse_dump(out, rsa_out, rsa_outlen, 1, -1)) {
d309 5
a313 3
	} else if(hexdump) BIO_dump(out, (char *)rsa_out, rsa_outlen);
	else BIO_write(out, rsa_out, rsa_outlen);
	end:
d317 6
a322 3
	if(rsa_in) free(rsa_in);
	if(rsa_out) free(rsa_out);
	if(passin) free(passin);
d326 2
a327 1
static void usage()
d347 1
a347 1
	BIO_printf (bio_err, "-passin arg    pass phrase source\n");
d352 1
a352 1
#else /* !OPENSSL_NO_RSA */
d354 3
a356 3
# if PEDANTIC
static void *dummy=&dummy;
# endif
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d254 2
a255 2
	rsa_in = OPENSSL_malloc(keysize * 2);
	rsa_out = OPENSSL_malloc(keysize);
d308 3
a310 3
	if(rsa_in) OPENSSL_free(rsa_in);
	if(rsa_out) OPENSSL_free(rsa_out);
	if(passin) OPENSSL_free(passin);
@


1.10
log
@resolve conflicts, fix local changes
@
text
@a249 6
#ifdef OPENSSL_SYS_VMS
		{
		    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		    out = BIO_push(tmpbio, out);
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d345 6
@


1.8
log
@resolve conflicts
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
@


1.7
log
@resolve conflicts
@
text
@d6 1
a6 1
 * Copyright (c) 2000-2005 The OpenSSL Project.  All rights reserved.
d59 1
d66 1
d122 4
a125 2
			if (--argc < 1) badarg = 1;
                        infile= *(++argv);
d127 4
a130 2
			if (--argc < 1) badarg = 1;
			outfile= *(++argv);
d132 4
a135 2
			if (--argc < 1) badarg = 1;
			keyfile = *(++argv);
d137 4
a140 2
			if (--argc < 1) badarg = 1;
			passargin= *(++argv);
d142 4
a145 2
			if (--argc < 1) badarg = 1;
			keyform=str2fmt(*(++argv));
d148 4
a151 2
			if (--argc < 1) badarg = 1;
			engine = *(++argv);
@


1.6
log
@merge 0.9.7d
@
text
@d6 1
a6 1
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
d150 1
@


1.5
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d100 1
d128 3
d176 4
d187 1
a187 1
			NULL, e, "Private Key");
d301 1
d325 1
@


1.4
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d88 1
d90 1
d130 1
d134 1
d169 1
d171 1
d314 1
d316 1
@


1.3
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d172 1
a172 1
		pkey = load_key(bio_err, keyfile, keyform,
d177 1
a177 1
		pkey = load_pubkey(bio_err, keyfile, keyform,
@


1.2
log
@openssl-engine-0.9.6a merge
@
text
@d59 1
a59 1
#ifndef NO_RSA
a64 1
#include <openssl/engine.h>
d88 1
a99 1
	char *engine=NULL;
d107 3
d125 3
d165 1
a165 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d172 2
a173 1
		pkey = load_key(bio_err, keyfile, keyform, NULL);
d177 2
a178 1
		pkey = load_pubkey(bio_err, keyfile, keyform);
d182 2
a183 1
		x = load_cert(bio_err, keyfile, keyform);
a191 1
		BIO_printf(bio_err, "Error loading key\n");
d221 1
a221 1
#ifdef VMS
d296 1
a298 1
	BIO_printf(bio_err, "-engine e       use engine e, possibly a hardware device.\n");
d308 2
@


1.1
log
@openssl-engine-0.9.6 merge
@
text
@d58 3
d319 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a57 3

#ifndef OPENSSL_NO_RSA

d62 1
a85 1
	char *engine = NULL;
d97 1
a104 3

	if (!load_config(bio_err, NULL))
		goto end;
a119 3
		} else if (strcmp(*argv,"-keyform") == 0) {
			if (--argc < 1) badarg = 1;
			keyform=str2fmt(*(++argv));
d157 17
a173 1
        e = setup_engine(bio_err, engine, 0);
d180 1
a180 2
		pkey = load_key(bio_err, keyfile, keyform,
			NULL, e, "Private Key");
d184 1
a184 2
		pkey = load_pubkey(bio_err, keyfile, keyform,
			NULL, e, "Public Key");
d188 1
a188 2
		x = load_cert(bio_err, keyfile, keyform,
			NULL, e, "Certificate");
d197 1
d227 1
a227 1
#ifdef OPENSSL_SYS_VMS
a301 1
	BIO_printf(bio_err, "-keyform arg    private key format - default PEM\n");
d304 1
a313 2
	BIO_printf(bio_err, "-engine e       use engine e, possibly a hardware device.\n");

a315 1
#endif
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d172 1
a172 1
		pkey = load_key(bio_err, keyfile, keyform, 0,
d177 1
a177 1
		pkey = load_pubkey(bio_err, keyfile, keyform, 0,
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a87 1
#ifndef OPENSSL_NO_ENGINE
a88 1
#endif
a127 1
#ifndef OPENSSL_NO_ENGINE
a130 1
#endif
a164 1
#ifndef OPENSSL_NO_ENGINE
a165 1
#endif
a307 1
#ifndef OPENSSL_NO_ENGINE
a308 1
#endif
@


1.1.1.4
log
@import openssl-0.9.7d
@
text
@a99 1
	char *passargin = NULL, *passin = NULL;
a126 3
		} else if (!strcmp(*argv,"-passin")) {
			if (--argc < 1) badarg = 1;
			passargin= *(++argv);
a171 4
	if(!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}
d179 1
a179 1
			passin, e, "Private Key");
a292 1
	if(passin) OPENSSL_free(passin);
a315 1
	BIO_printf (bio_err, "-passin arg    pass phrase source\n");
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@d6 1
a6 1
 * Copyright (c) 2000-2005 The OpenSSL Project.  All rights reserved.
a149 1
		else if(!strcmp(*argv, "-x931")) pad = RSA_X931_PADDING;
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d6 1
a6 1
 * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.
a58 1
#include <openssl/opensslconf.h>
a64 1
#include <openssl/rsa.h>
d120 2
a121 4
			if (--argc < 1)
				badarg = 1;
			else
				infile= *(++argv);
d123 2
a124 4
			if (--argc < 1)
				badarg = 1;
			else
				outfile= *(++argv);
d126 2
a127 4
			if (--argc < 1)
				badarg = 1;
			else
				keyfile = *(++argv);
d129 2
a130 4
			if (--argc < 1)
				badarg = 1;
			else
				passargin= *(++argv);
d132 2
a133 4
			if (--argc < 1)
				badarg = 1;
			else
				keyform=str2fmt(*(++argv));
d136 2
a137 4
			if (--argc < 1)
				badarg = 1;
			else
				engine = *(++argv);
@


1.1.1.7
log
@import openssl-0.9.8j
@
text
@d2 1
a2 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
@


1.1.1.8
log
@import OpenSSL-1.0.0a
@
text
@a344 6
#else /* !OPENSSL_NO_RSA */

# if PEDANTIC
static void *dummy=&dummy;
# endif

@


