head	1.26;
access;
symbols
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	butholakala:1.10
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.9.0.24
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.20
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.18
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.9.0.14
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.9.0.12
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.2
	OPENSSL:1.1.1
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.25;
commitid	7A7DObXgY4Fni8xJ;

1.25
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	EB0l28piqIRSpBUh;

1.24
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.23;
commitid	0NuggCO2WJOZj8Kh;

1.23
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	mJUVYpkFBZ0Zv2bG;

1.22
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2014.05.02.17.06.46;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.04.22.13.32.17;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.04.18.04.17.16;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.04.18.02.45.58;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.16.16.55.21;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.13.15.25.28;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.06.12.17.47;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2005.04.29.05.39.15;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.02.56.54;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.11.08.07;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.04.35.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.13.07;	author ryker;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.12.49.30;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.17;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.36.58;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.38;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.13.48;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.04.13.15.16.32;	author miod;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: crl.c,v 1.25 2014/07/14 00:35:10 deraadt Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>

#define	POSTFIX	".rvk"

static const char *crl_usage[] = {
	"usage: crl args\n",
	"\n",
	" -inform arg     - input format - default PEM (DER or PEM)\n",
	" -outform arg    - output format - default PEM\n",
	" -text           - print out a text format version\n",
	" -in arg         - input file - default stdin\n",
	" -out arg        - output file - default stdout\n",
	" -hash           - print hash value\n",
#ifndef OPENSSL_NO_MD5
	" -hash_old       - print old-style (MD5) hash value\n",
#endif
	" -fingerprint    - print the crl fingerprint\n",
	" -issuer         - print issuer DN\n",
	" -lastupdate     - lastUpdate field\n",
	" -nextupdate     - nextUpdate field\n",
	" -crlnumber      - print CRL number\n",
	" -noout          - no CRL output\n",
	" -CAfile  name   - verify CRL using certificates in file \"name\"\n",
	" -CApath  dir    - verify CRL using certificates in \"dir\"\n",
	" -nameopt arg    - various certificate name options\n",
	NULL
};

static X509_CRL *load_crl(char *file, int format);
static BIO *bio_out = NULL;

int crl_main(int, char **);

int
crl_main(int argc, char **argv)
{
	unsigned long nmflag = 0;
	X509_CRL *x = NULL;
	char *CAfile = NULL, *CApath = NULL;
	int ret = 1, i, num, badops = 0;
	BIO *out = NULL;
	int informat, outformat;
	char *infile = NULL, *outfile = NULL;
	int hash = 0, issuer = 0, lastupdate = 0, nextupdate = 0, noout = 0,
	    text = 0;
#ifndef OPENSSL_NO_MD5
	int hash_old = 0;
#endif
	int fingerprint = 0, crlnumber = 0;
	const char **pp;
	X509_STORE *store = NULL;
	X509_STORE_CTX ctx;
	X509_LOOKUP *lookup = NULL;
	X509_OBJECT xobj;
	EVP_PKEY *pkey;
	int do_ver = 0;
	const EVP_MD *md_alg, *digest = EVP_sha1();

	if (bio_out == NULL)
		if ((bio_out = BIO_new(BIO_s_file())) != NULL) {
			BIO_set_fp(bio_out, stdout, BIO_NOCLOSE);
		}
	informat = FORMAT_PEM;
	outformat = FORMAT_PEM;

	argc--;
	argv++;
	num = 0;
	while (argc >= 1) {
#ifdef undef
		if (strcmp(*argv, "-p") == 0) {
			if (--argc < 1)
				goto bad;
			if (!args_from_file(++argv, Nargc, Nargv)) {
				goto end;
			}
		}
#endif
		if (strcmp(*argv, "-inform") == 0) {
			if (--argc < 1)
				goto bad;
			informat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-outform") == 0) {
			if (--argc < 1)
				goto bad;
			outformat = str2fmt(*(++argv));
		} else if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-CApath") == 0) {
			if (--argc < 1)
				goto bad;
			CApath = *(++argv);
			do_ver = 1;
		} else if (strcmp(*argv, "-CAfile") == 0) {
			if (--argc < 1)
				goto bad;
			CAfile = *(++argv);
			do_ver = 1;
		} else if (strcmp(*argv, "-verify") == 0)
			do_ver = 1;
		else if (strcmp(*argv, "-text") == 0)
			text = 1;
		else if (strcmp(*argv, "-hash") == 0)
			hash = ++num;
#ifndef OPENSSL_NO_MD5
		else if (strcmp(*argv, "-hash_old") == 0)
			hash_old = ++num;
#endif
		else if (strcmp(*argv, "-nameopt") == 0) {
			if (--argc < 1)
				goto bad;
			if (!set_name_ex(&nmflag, *(++argv)))
				goto bad;
		} else if (strcmp(*argv, "-issuer") == 0)
			issuer = ++num;
		else if (strcmp(*argv, "-lastupdate") == 0)
			lastupdate = ++num;
		else if (strcmp(*argv, "-nextupdate") == 0)
			nextupdate = ++num;
		else if (strcmp(*argv, "-noout") == 0)
			noout = ++num;
		else if (strcmp(*argv, "-fingerprint") == 0)
			fingerprint = ++num;
		else if (strcmp(*argv, "-crlnumber") == 0)
			crlnumber = ++num;
		else if ((md_alg = EVP_get_digestbyname(*argv + 1))) {
			/* ok */
			digest = md_alg;
		} else {
			BIO_printf(bio_err, "unknown option %s\n", *argv);
			badops = 1;
			break;
		}
		argc--;
		argv++;
	}

	if (badops) {
bad:
		for (pp = crl_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err, "%s", *pp);
		goto end;
	}
	ERR_load_crypto_strings();
	x = load_crl(infile, informat);
	if (x == NULL) {
		goto end;
	}
	if (do_ver) {
		store = X509_STORE_new();
		lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());
		if (lookup == NULL)
			goto end;
		if (!X509_LOOKUP_load_file(lookup, CAfile, X509_FILETYPE_PEM))
			X509_LOOKUP_load_file(lookup, NULL,
			    X509_FILETYPE_DEFAULT);

		lookup = X509_STORE_add_lookup(store, X509_LOOKUP_hash_dir());
		if (lookup == NULL)
			goto end;
		if (!X509_LOOKUP_add_dir(lookup, CApath, X509_FILETYPE_PEM))
			X509_LOOKUP_add_dir(lookup, NULL,
			    X509_FILETYPE_DEFAULT);
		ERR_clear_error();

		if (!X509_STORE_CTX_init(&ctx, store, NULL, NULL)) {
			BIO_printf(bio_err,
			    "Error initialising X509 store\n");
			goto end;
		}
		i = X509_STORE_get_by_subject(&ctx, X509_LU_X509,
		    X509_CRL_get_issuer(x), &xobj);
		if (i <= 0) {
			BIO_printf(bio_err,
			    "Error getting CRL issuer certificate\n");
			goto end;
		}
		pkey = X509_get_pubkey(xobj.data.x509);
		X509_OBJECT_free_contents(&xobj);
		if (!pkey) {
			BIO_printf(bio_err,
			    "Error getting CRL issuer public key\n");
			goto end;
		}
		i = X509_CRL_verify(x, pkey);
		EVP_PKEY_free(pkey);
		if (i < 0)
			goto end;
		if (i == 0)
			BIO_printf(bio_err, "verify failure\n");
		else
			BIO_printf(bio_err, "verify OK\n");
	}
	if (num) {
		for (i = 1; i <= num; i++) {
			if (issuer == i) {
				print_name(bio_out, "issuer=",
				    X509_CRL_get_issuer(x), nmflag);
			}
			if (crlnumber == i) {
				ASN1_INTEGER *crlnum;
				crlnum = X509_CRL_get_ext_d2i(x,
				    NID_crl_number, NULL, NULL);
				BIO_printf(bio_out, "crlNumber=");
				if (crlnum) {
					i2a_ASN1_INTEGER(bio_out, crlnum);
					ASN1_INTEGER_free(crlnum);
				} else
					BIO_puts(bio_out, "<NONE>");
				BIO_printf(bio_out, "\n");
			}
			if (hash == i) {
				BIO_printf(bio_out, "%08lx\n",
				    X509_NAME_hash(X509_CRL_get_issuer(x)));
			}
#ifndef OPENSSL_NO_MD5
			if (hash_old == i) {
				BIO_printf(bio_out, "%08lx\n",
				    X509_NAME_hash_old(X509_CRL_get_issuer(x)));
			}
#endif
			if (lastupdate == i) {
				BIO_printf(bio_out, "lastUpdate=");
				ASN1_TIME_print(bio_out,
				    X509_CRL_get_lastUpdate(x));
				BIO_printf(bio_out, "\n");
			}
			if (nextupdate == i) {
				BIO_printf(bio_out, "nextUpdate=");
				if (X509_CRL_get_nextUpdate(x))
					ASN1_TIME_print(bio_out,
					    X509_CRL_get_nextUpdate(x));
				else
					BIO_printf(bio_out, "NONE");
				BIO_printf(bio_out, "\n");
			}
			if (fingerprint == i) {
				int j;
				unsigned int n;
				unsigned char md[EVP_MAX_MD_SIZE];

				if (!X509_CRL_digest(x, digest, md, &n)) {
					BIO_printf(bio_err, "out of memory\n");
					goto end;
				}
				BIO_printf(bio_out, "%s Fingerprint=",
				    OBJ_nid2sn(EVP_MD_type(digest)));
				for (j = 0; j < (int) n; j++) {
					BIO_printf(bio_out, "%02X%c", md[j],
					    (j + 1 == (int)n) ? '\n' : ':');
				}
			}
		}
	}
	out = BIO_new(BIO_s_file());
	if (out == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile == NULL) {
		BIO_set_fp(out, stdout, BIO_NOCLOSE);
	} else {
		if (BIO_write_filename(out, outfile) <= 0) {
			perror(outfile);
			goto end;
		}
	}

	if (text)
		X509_CRL_print(out, x);

	if (noout) {
		ret = 0;
		goto end;
	}
	if (outformat == FORMAT_ASN1)
		i = (int) i2d_X509_CRL_bio(out, x);
	else if (outformat == FORMAT_PEM)
		i = PEM_write_bio_X509_CRL(out, x);
	else {
		BIO_printf(bio_err,
		    "bad output format specified for outfile\n");
		goto end;
	}
	if (!i) {
		BIO_printf(bio_err, "unable to write CRL\n");
		goto end;
	}
	ret = 0;

end:
	BIO_free_all(out);
	BIO_free_all(bio_out);
	bio_out = NULL;
	X509_CRL_free(x);
	if (store) {
		X509_STORE_CTX_cleanup(&ctx);
		X509_STORE_free(store);
	}

	return (ret);
}

static X509_CRL *
load_crl(char *infile, int format)
{
	X509_CRL *x = NULL;
	BIO *in = NULL;

	in = BIO_new(BIO_s_file());
	if (in == NULL) {
		ERR_print_errors(bio_err);
		goto end;
	}
	if (infile == NULL)
		BIO_set_fp(in, stdin, BIO_NOCLOSE);
	else {
		if (BIO_read_filename(in, infile) <= 0) {
			perror(infile);
			goto end;
		}
	}
	if (format == FORMAT_ASN1)
		x = d2i_X509_CRL_bio(in, NULL);
	else if (format == FORMAT_PEM)
		x = PEM_read_bio_X509_CRL(in, NULL, NULL, NULL);
	else {
		BIO_printf(bio_err,
		    "bad input format specified for input crl\n");
		goto end;
	}
	if (x == NULL) {
		BIO_printf(bio_err, "unable to load CRL\n");
		ERR_print_errors(bio_err);
		goto end;
	}

end:
	BIO_free(in);
	return (x);
}
@


1.25
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.24 2014/07/12 17:54:31 jsing Exp $ */
@


1.24
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: crl.c,v 1.23 2014/06/12 15:49:27 deraadt Exp $ */
d374 1
a374 1
	
@


1.23
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a125 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.22
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 1
/* apps/crl.c */
@


1.21
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@a126 2
	signal(SIGPIPE, SIG_IGN);

@


1.20
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d62 1
d64 1
d67 1
a69 2
#include <openssl/pem.h>

@


1.19
log
@remove crazy #undefs; ok jsing
@
text
@a127 4
	if (bio_err == NULL)
		if ((bio_err = BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE | BIO_FP_TEXT);

@


1.18
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a69 1
#undef POSTFIX
@


1.17
log
@More KNF.
@
text
@d127 1
a127 1
	apps_startup();
d383 1
a383 1
	apps_shutdown();
@


1.16
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d113 1
a113 1
	 text = 0;
d238 2
a239 1
			X509_LOOKUP_load_file(lookup, NULL, X509_FILETYPE_DEFAULT);
d245 2
a246 1
			X509_LOOKUP_add_dir(lookup, NULL, X509_FILETYPE_DEFAULT);
d280 2
a281 1
				print_name(bio_out, "issuer=", X509_CRL_get_issuer(x), nmflag);
d285 2
a286 2
				crlnum = X509_CRL_get_ext_d2i(x, NID_crl_number,
				    NULL, NULL);
d302 1
a302 2
				    X509_NAME_hash_old(
					X509_CRL_get_issuer(x)));
d333 1
a333 1
					    (j + 1 == (int) n) ? '\n' : ':');
d364 2
a365 1
		BIO_printf(bio_err, "bad output format specified for outfile\n");
d411 2
a412 1
		BIO_printf(bio_err, "bad input format specified for input crl\n");
d420 1
@


1.15
log
@unterminated comment
@
text
@a68 2
#undef PROG
#define PROG	crl_main
d100 1
a100 1
int MAIN(int, char **);
d103 1
a103 1
MAIN(int argc, char **argv)
@


1.14
log
@KaboomNF
@
text
@d155 1
a155 1
			} */
@


1.13
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d114 2
a115 1
	int hash = 0, issuer = 0, lastupdate = 0, nextupdate = 0, noout = 0, text = 0;
d133 1
a133 1
			BIO_set_fp(bio_err, stderr, BIO_NOCLOSE|BIO_FP_TEXT);
d140 2
a141 3
		BIO_set_fp(bio_out, stdout, BIO_NOCLOSE);
	}

d153 3
a155 1
			if (!args_from_file(++argv,Nargc,Nargv)) { goto end; }*/
d169 1
a169 1
			infile= *(++argv);
d173 1
a173 1
			outfile= *(++argv);
d189 1
a189 1
			hash= ++num;
d192 1
a192 1
			hash_old= ++num;
d200 1
a200 1
			issuer= ++num;
d202 1
a202 1
			lastupdate= ++num;
d204 1
a204 1
			nextupdate= ++num;
d206 1
a206 1
			noout= ++num;
d208 1
a208 1
			fingerprint= ++num;
d210 1
a210 1
			crlnumber= ++num;
a228 1

a233 1

a253 1

a276 1

d301 2
a302 2
				X509_NAME_hash_old(
				    X509_CRL_get_issuer(x)));
d331 1
a331 1
				for (j = 0; j < (int)n; j++) {
d333 1
a333 1
					    (j + 1 == (int)n) ? '\n' : ':');
a337 1

a342 1

a358 1

d360 1
a360 1
		i = (int)i2d_X509_CRL_bio(out, x);
d383 1
a383 1
	return(ret);
a396 1

a417 1

@


1.12
log
@Initial KNF.
@
text
@d388 1
a388 1
	OPENSSL_EXIT(ret);
@


1.11
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d75 9
a83 9
static const char *crl_usage[]={
"usage: crl args\n",
"\n",
" -inform arg     - input format - default PEM (DER or PEM)\n",
" -outform arg    - output format - default PEM\n",
" -text           - print out a text format version\n",
" -in arg         - input file - default stdin\n",
" -out arg        - output file - default stdout\n",
" -hash           - print hash value\n",
d85 1
a85 1
" -hash_old       - print old-style (MD5) hash value\n",
d87 10
a96 10
" -fingerprint    - print the crl fingerprint\n",
" -issuer         - print issuer DN\n",
" -lastupdate     - lastUpdate field\n",
" -nextupdate     - nextUpdate field\n",
" -crlnumber      - print CRL number\n",
" -noout          - no CRL output\n",
" -CAfile  name   - verify CRL using certificates in file \"name\"\n",
" -CApath  dir    - verify CRL using certificates in \"dir\"\n",
" -nameopt arg    - various certificate name options\n",
NULL
d100 1
a100 1
static BIO *bio_out=NULL;
d104 3
a106 2
int MAIN(int argc, char **argv)
	{
d108 1
a108 1
	X509_CRL *x=NULL;
d110 5
a114 5
	int ret=1,i,num,badops=0;
	BIO *out=NULL;
	int informat,outformat;
	char *infile=NULL,*outfile=NULL;
	int hash=0,issuer=0,lastupdate=0,nextupdate=0,noout=0,text=0;
d116 1
a116 1
       int hash_old=0;
d126 1
a126 1
	const EVP_MD *md_alg,*digest=EVP_sha1();
d131 2
a132 2
		if ((bio_err=BIO_new(BIO_s_file())) != NULL)
			BIO_set_fp(bio_err,stderr,BIO_NOCLOSE|BIO_FP_TEXT);
d138 3
a140 4
		if ((bio_out=BIO_new(BIO_s_file())) != NULL)
			{
			BIO_set_fp(bio_out,stdout,BIO_NOCLOSE);
			}
d142 2
a143 2
	informat=FORMAT_PEM;
	outformat=FORMAT_PEM;
d147 2
a148 3
	num=0;
	while (argc >= 1)
		{
d150 3
a152 3
		if	(strcmp(*argv,"-p") == 0)
			{
			if (--argc < 1) goto bad;
d154 1
a154 1
			}
d156 11
a166 13
		if 	(strcmp(*argv,"-inform") == 0)
			{
			if (--argc < 1) goto bad;
			informat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-outform") == 0)
			{
			if (--argc < 1) goto bad;
			outformat=str2fmt(*(++argv));
			}
		else if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
d168 3
a170 4
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
d172 3
a174 4
			}
		else if (strcmp(*argv,"-CApath") == 0)
			{
			if (--argc < 1) goto bad;
d177 3
a179 4
			}
		else if (strcmp(*argv,"-CAfile") == 0)
			{
			if (--argc < 1) goto bad;
d182 1
a182 2
			}
		else if (strcmp(*argv,"-verify") == 0)
d184 1
a184 1
		else if (strcmp(*argv,"-text") == 0)
d186 1
a186 1
		else if (strcmp(*argv,"-hash") == 0)
d189 1
a189 1
		else if (strcmp(*argv,"-hash_old") == 0)
d192 6
a197 6
		else if (strcmp(*argv,"-nameopt") == 0)
			{
			if (--argc < 1) goto bad;
			if (!set_name_ex(&nmflag, *(++argv))) goto bad;
			}
		else if (strcmp(*argv,"-issuer") == 0)
d199 1
a199 1
		else if (strcmp(*argv,"-lastupdate") == 0)
d201 1
a201 1
		else if (strcmp(*argv,"-nextupdate") == 0)
d203 1
a203 1
		else if (strcmp(*argv,"-noout") == 0)
d205 1
a205 1
		else if (strcmp(*argv,"-fingerprint") == 0)
d207 1
a207 1
		else if (strcmp(*argv,"-crlnumber") == 0)
d209 1
a209 2
		else if ((md_alg=EVP_get_digestbyname(*argv + 1)))
			{
d211 4
a214 6
			digest=md_alg;
			}
		else
			{
			BIO_printf(bio_err,"unknown option %s\n",*argv);
			badops=1;
d216 1
a216 1
			}
d219 1
a219 1
		}
d221 1
a221 2
	if (badops)
		{
d223 2
a224 2
		for (pp=crl_usage; (*pp != NULL); pp++)
			BIO_printf(bio_err,"%s",*pp);
d226 1
a226 1
		}
d229 4
a232 2
	x=load_crl(infile,informat);
	if (x == NULL) { goto end; }
d234 1
a234 1
	if(do_ver) {
d236 11
a246 9
		lookup=X509_STORE_add_lookup(store,X509_LOOKUP_file());
		if (lookup == NULL) goto end;
		if (!X509_LOOKUP_load_file(lookup,CAfile,X509_FILETYPE_PEM))
			X509_LOOKUP_load_file(lookup,NULL,X509_FILETYPE_DEFAULT);
			
		lookup=X509_STORE_add_lookup(store,X509_LOOKUP_hash_dir());
		if (lookup == NULL) goto end;
		if (!X509_LOOKUP_add_dir(lookup,CApath,X509_FILETYPE_PEM))
			X509_LOOKUP_add_dir(lookup,NULL,X509_FILETYPE_DEFAULT);
d249 1
a249 1
		if(!X509_STORE_CTX_init(&ctx, store, NULL, NULL)) {
d251 1
a251 1
				"Error initialising X509 store\n");
d255 3
a257 3
		i = X509_STORE_get_by_subject(&ctx, X509_LU_X509, 
					X509_CRL_get_issuer(x), &xobj);
		if(i <= 0) {
d259 1
a259 1
				"Error getting CRL issuer certificate\n");
d264 1
a264 1
		if(!pkey) {
d266 1
a266 1
				"Error getting CRL issuer public key\n");
d271 6
a276 3
		if(i < 0) goto end;
		if(i == 0) BIO_printf(bio_err, "verify failure\n");
		else BIO_printf(bio_err, "verify OK\n");
d279 3
a281 6
	if (num)
		{
		for (i=1; i<=num; i++)
			{
			if (issuer == i)
				{
d283 2
a284 3
				}
			if (crlnumber == i)
				{
d287 3
a289 4
							      NULL, NULL);
				BIO_printf(bio_out,"crlNumber=");
				if (crlnum)
					{
d292 1
a292 2
					}
				else
d294 6
a299 7
				BIO_printf(bio_out,"\n");
				}
			if (hash == i)
				{
				BIO_printf(bio_out,"%08lx\n",
					X509_NAME_hash(X509_CRL_get_issuer(x)));
				}
d301 5
a305 6
			if (hash_old == i)
				{
				BIO_printf(bio_out,"%08lx\n",
					X509_NAME_hash_old(
						X509_CRL_get_issuer(x)));
				}
d307 2
a308 3
			if (lastupdate == i)
				{
				BIO_printf(bio_out,"lastUpdate=");
d310 6
a315 7
						X509_CRL_get_lastUpdate(x));
				BIO_printf(bio_out,"\n");
				}
			if (nextupdate == i)
				{
				BIO_printf(bio_out,"nextUpdate=");
				if (X509_CRL_get_nextUpdate(x)) 
d317 1
a317 1
						X509_CRL_get_nextUpdate(x));
d319 4
a322 5
					BIO_printf(bio_out,"NONE");
				BIO_printf(bio_out,"\n");
				}
			if (fingerprint == i)
				{
d327 2
a328 3
				if (!X509_CRL_digest(x,digest,md,&n))
					{
					BIO_printf(bio_err,"out of memory\n");
d330 6
a335 9
					}
				BIO_printf(bio_out,"%s Fingerprint=",
						OBJ_nid2sn(EVP_MD_type(digest)));
				for (j=0; j<(int)n; j++)
					{
					BIO_printf(bio_out,"%02X%c",md[j],
						(j+1 == (int)n)
						?'\n':':');
					}
d339 1
d341 2
a342 3
	out=BIO_new(BIO_s_file());
	if (out == NULL)
		{
d345 1
a345 1
		}
d347 4
a350 8
	if (outfile == NULL)
		{
		BIO_set_fp(out,stdout,BIO_NOCLOSE);
		}
	else
		{
		if (BIO_write_filename(out,outfile) <= 0)
			{
a352 1
			}
d354 1
d356 2
a357 1
	if (text) X509_CRL_print(out, x);
d359 1
a359 2
	if (noout) 
		{
d362 1
a362 1
		}
d364 2
a365 2
	if 	(outformat == FORMAT_ASN1)
		i=(int)i2d_X509_CRL_bio(out,x);
d367 7
a373 4
		i=PEM_write_bio_X509_CRL(out,x);
	else	
		{
		BIO_printf(bio_err,"bad output format specified for outfile\n");
d375 3
a377 3
		}
	if (!i) { BIO_printf(bio_err,"unable to write CRL\n"); goto end; }
	ret=0;
d381 1
a381 1
	bio_out=NULL;
d383 1
a383 1
	if(store) {
d389 7
a395 1
	}
d397 2
a398 8
static X509_CRL *load_crl(char *infile, int format)
	{
	X509_CRL *x=NULL;
	BIO *in=NULL;

	in=BIO_new(BIO_s_file());
	if (in == NULL)
		{
d401 1
a401 1
		}
d404 3
a406 5
		BIO_set_fp(in,stdin,BIO_NOCLOSE);
	else
		{
		if (BIO_read_filename(in,infile) <= 0)
			{
a408 1
			}
d410 3
a412 2
	if 	(format == FORMAT_ASN1)
		x=d2i_X509_CRL_bio(in,NULL);
d414 3
a416 3
		x=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
	else	{
		BIO_printf(bio_err,"bad input format specified for input crl\n");
d418 3
a420 4
		}
	if (x == NULL)
		{
		BIO_printf(bio_err,"unable to load CRL\n");
d423 2
a424 2
		}
	
d427 2
a428 3
	return(x);
	}

@


1.10
log
@Merge conflicts; remove MacOS, Netware, OS/2, VMS and Windows build machinery.
@
text
@a139 6
#ifdef OPENSSL_SYS_VMS
			{
			BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			bio_out = BIO_push(tmpbio, bio_out);
			}
#endif
a368 6
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
@


1.9
log
@resolve conflicts
@
text
@d84 3
d114 3
d201 4
d317 8
@


1.8
log
@resolve conflicts
@
text
@d88 1
d111 1
a111 1
	int fingerprint = 0;
d210 2
d287 15
a301 1

@


1.7
log
@resolve conflicts
@
text
@d75 1
a75 1
static char *crl_usage[]={
d111 1
a111 1
	char **pp;
d118 1
a118 1
	const EVP_MD *md_alg,*digest=EVP_md5();
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d358 5
a362 1
	if (noout) goto end;
@


1.5
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d84 1
d381 1
a381 1
	EXIT(ret);
@


1.4
log
@openssl-engine-0.9.6 merge
@
text
@d90 1
d101 1
d110 1
a110 1
	char **pp,buf[256];
d125 3
d132 1
a132 1
#ifdef VMS
d193 5
d227 1
a227 1
			BIO_printf(bio_err,*pp);
d248 5
a252 1
		X509_STORE_CTX_init(&ctx, store, NULL, NULL);
d281 1
a281 3
				X509_NAME_oneline(X509_CRL_get_issuer(x),
								buf,256);
				BIO_printf(bio_out,"issuer= %s\n",buf);
d339 1
a339 1
#ifdef VMS
d379 1
@


1.3
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d107 1
d115 1
d125 1
d127 7
d196 7
d294 20
d325 1
d327 7
d359 2
a360 2
	BIO_free(out);
	BIO_free(bio_out);
@


1.2
log
@OpenSSL 0.9.4 merge
@
text
@d78 1
a78 1
" -inform arg     - input format - default PEM (one of DER, TXT or PEM)\n",
d88 2
d96 2
d101 1
d108 6
d160 14
a204 1
	X509V3_add_standard_extensions();
d208 36
d250 2
a251 1
				X509_NAME_oneline(x->crl->issuer,buf,256);
d258 1
a258 1
					X509_NAME_hash(x->crl->issuer));
d263 2
a264 1
				ASN1_TIME_print(bio_out,x->crl->lastUpdate);
d270 3
a272 2
				if (x->crl->nextUpdate != NULL)
					ASN1_TIME_print(bio_out,x->crl->nextUpdate);
d316 1
d318 4
a321 1
	X509V3_EXT_cleanup();
@


1.1
log
@Initial revision
@
text
@d63 5
a67 4
#include "bio.h"
#include "err.h"
#include "x509.h"
#include "pem.h"
a74 5
#define FORMAT_UNDEF	0
#define FORMAT_ASN1	1
#define FORMAT_TEXT	2
#define FORMAT_PEM	3

a90 1
#ifndef NOPROTO
a91 4
#else
static X509_CRL *load_crl();
#endif

d94 1
a94 3
int MAIN(argc, argv)
int argc;
char **argv;
d101 1
a101 1
	int hash=0,issuer=0,lastupdate=0,nextupdate=0,noout=0;
a138 4
		else if (strcmp(*argv,"-text") == 0)
			{
			outformat=FORMAT_TEXT;
			}
d149 2
a170 8
	if (outformat == FORMAT_TEXT)
		{
		num=0;
		issuer= ++num;
		lastupdate= ++num;
		nextupdate= ++num;
		}

d180 1
d191 1
a191 1
				fprintf(stdout,"issuer= %s\n",buf);
d196 1
a196 1
				fprintf(stdout,"%08lx\n",
d201 3
a203 3
				fprintf(stdout,"lastUpdate=");
				ASN1_UTCTIME_print(bio_out,x->crl->lastUpdate);
				fprintf(stdout,"\n");
d207 1
a207 1
				fprintf(stdout,"nextUpdate=");
d209 1
a209 1
					ASN1_UTCTIME_print(bio_out,x->crl->nextUpdate);
d211 2
a212 2
					fprintf(stdout,"NONE");
				fprintf(stdout,"\n");
a216 2
	if (noout) goto end;

d235 4
a242 17
	else if (outformat == FORMAT_TEXT)
		{
		X509_REVOKED *r;
		STACK *sk;

		sk=sk_dup(x->crl->revoked);
		while ((r=(X509_REVOKED *)sk_pop(sk)) != NULL)
			{
			fprintf(stdout,"revoked: serialNumber=");
			i2a_ASN1_INTEGER(out,r->serialNumber);
			fprintf(stdout," revocationDate=");
			ASN1_UTCTIME_print(bio_out,r->revocationDate);
			fprintf(stdout,"\n");
			}
		sk_free(sk);
		i=1;
		}
d251 4
a254 3
	if (out != NULL) BIO_free(out);
	if (bio_out != NULL) BIO_free(bio_out);
	if (x != NULL) X509_CRL_free(x);
d258 1
a258 3
static X509_CRL *load_crl(infile, format)
char *infile;
int format;
d283 1
a283 1
		x=PEM_read_bio_X509_CRL(in,NULL,NULL);
d296 1
a296 1
	if (in != NULL) BIO_free(in);
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta1
@
text
@d63 4
a66 5
#include <openssl/bio.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/pem.h>
d74 5
d82 1
a82 1
" -inform arg     - input format - default PEM (DER or PEM)\n",
a91 3
" -CAfile  name   - verify CRL using certificates in file \"name\"\n",
" -CApath  dir    - verify CRL using certificates in \"dir\"\n",
" -nameopt arg    - various certificate name options\n",
d95 1
d97 4
d103 3
a105 3
int MAIN(int, char **);

int MAIN(int argc, char **argv)
a106 1
	unsigned long nmflag = 0;
a107 1
	char *CAfile = NULL, *CApath = NULL;
d112 2
a113 10
	int hash=0,issuer=0,lastupdate=0,nextupdate=0,noout=0,text=0;
	int fingerprint = 0;
	char **pp;
	X509_STORE *store = NULL;
	X509_STORE_CTX ctx;
	X509_LOOKUP *lookup = NULL;
	X509_OBJECT xobj;
	EVP_PKEY *pkey;
	int do_ver = 0;
	const EVP_MD *md_alg,*digest=EVP_md5();
a120 3
	if (!load_config(bio_err, NULL))
		goto end;

a122 1
			{
a123 7
#ifdef OPENSSL_SYS_VMS
			{
			BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			bio_out = BIO_push(tmpbio, bio_out);
			}
#endif
			}
d150 4
a163 16
		else if (strcmp(*argv,"-CApath") == 0)
			{
			if (--argc < 1) goto bad;
			CApath = *(++argv);
			do_ver = 1;
			}
		else if (strcmp(*argv,"-CAfile") == 0)
			{
			if (--argc < 1) goto bad;
			CAfile = *(++argv);
			do_ver = 1;
			}
		else if (strcmp(*argv,"-verify") == 0)
			do_ver = 1;
		else if (strcmp(*argv,"-text") == 0)
			text = 1;
a165 5
		else if (strcmp(*argv,"-nameopt") == 0)
			{
			if (--argc < 1) goto bad;
			if (!set_name_ex(&nmflag, *(++argv))) goto bad;
			}
a173 7
		else if (strcmp(*argv,"-fingerprint") == 0)
			fingerprint= ++num;
		else if ((md_alg=EVP_get_digestbyname(*argv + 1)))
			{
			/* ok */
			digest=md_alg;
			}
d184 8
d196 1
a196 1
			BIO_printf(bio_err,"%s",*pp);
a203 40
	if(do_ver) {
		store = X509_STORE_new();
		lookup=X509_STORE_add_lookup(store,X509_LOOKUP_file());
		if (lookup == NULL) goto end;
		if (!X509_LOOKUP_load_file(lookup,CAfile,X509_FILETYPE_PEM))
			X509_LOOKUP_load_file(lookup,NULL,X509_FILETYPE_DEFAULT);
			
		lookup=X509_STORE_add_lookup(store,X509_LOOKUP_hash_dir());
		if (lookup == NULL) goto end;
		if (!X509_LOOKUP_add_dir(lookup,CApath,X509_FILETYPE_PEM))
			X509_LOOKUP_add_dir(lookup,NULL,X509_FILETYPE_DEFAULT);
		ERR_clear_error();

		if(!X509_STORE_CTX_init(&ctx, store, NULL, NULL)) {
			BIO_printf(bio_err,
				"Error initialising X509 store\n");
			goto end;
		}

		i = X509_STORE_get_by_subject(&ctx, X509_LU_X509, 
					X509_CRL_get_issuer(x), &xobj);
		if(i <= 0) {
			BIO_printf(bio_err,
				"Error getting CRL issuer certificate\n");
			goto end;
		}
		pkey = X509_get_pubkey(xobj.data.x509);
		X509_OBJECT_free_contents(&xobj);
		if(!pkey) {
			BIO_printf(bio_err,
				"Error getting CRL issuer public key\n");
			goto end;
		}
		i = X509_CRL_verify(x, pkey);
		EVP_PKEY_free(pkey);
		if(i < 0) goto end;
		if(i == 0) BIO_printf(bio_err, "verify failure\n");
		else BIO_printf(bio_err, "verify OK\n");
	}

d210 2
a211 1
				print_name(bio_out, "issuer=", X509_CRL_get_issuer(x), nmflag);
d216 2
a217 2
				BIO_printf(bio_out,"%08lx\n",
					X509_NAME_hash(X509_CRL_get_issuer(x)));
d221 3
a223 4
				BIO_printf(bio_out,"lastUpdate=");
				ASN1_TIME_print(bio_out,
						X509_CRL_get_lastUpdate(x));
				BIO_printf(bio_out,"\n");
d227 3
a229 4
				BIO_printf(bio_out,"nextUpdate=");
				if (X509_CRL_get_nextUpdate(x)) 
					ASN1_TIME_print(bio_out,
						X509_CRL_get_nextUpdate(x));
d231 2
a232 22
					BIO_printf(bio_out,"NONE");
				BIO_printf(bio_out,"\n");
				}
			if (fingerprint == i)
				{
				int j;
				unsigned int n;
				unsigned char md[EVP_MAX_MD_SIZE];

				if (!X509_CRL_digest(x,digest,md,&n))
					{
					BIO_printf(bio_err,"out of memory\n");
					goto end;
					}
				BIO_printf(bio_out,"%s Fingerprint=",
						OBJ_nid2sn(EVP_MD_type(digest)));
				for (j=0; j<(int)n; j++)
					{
					BIO_printf(bio_out,"%02X%c",md[j],
						(j+1 == (int)n)
						?'\n':':');
					}
d237 2
a246 1
		{
a247 7
#ifdef OPENSSL_SYS_VMS
		{
		BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		out = BIO_push(tmpbio, out);
		}
#endif
		}
a256 4
	if (text) X509_CRL_print(out, x);

	if (noout) goto end;

d261 17
d286 3
a288 9
	BIO_free_all(out);
	BIO_free_all(bio_out);
	bio_out=NULL;
	X509_CRL_free(x);
	if(store) {
		X509_STORE_CTX_cleanup(&ctx);
		X509_STORE_free(store);
	}
	apps_shutdown();
d292 3
a294 1
static X509_CRL *load_crl(char *infile, int format)
d319 1
a319 1
		x=PEM_read_bio_X509_CRL(in,NULL,NULL,NULL);
d332 1
a332 1
	BIO_free(in);
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a83 1
" -fingerprint    - print the crl fingerprint\n",
d380 1
a380 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d358 1
a358 5
	if (noout) 
		{
		ret = 0;
		goto end;
		}
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d75 1
a75 1
static const char *crl_usage[]={
d111 1
a111 1
	const char **pp;
d118 1
a118 1
	const EVP_MD *md_alg,*digest=EVP_sha1();
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@a87 1
" -crlnumber      - print CRL number\n",
d110 1
a110 1
	int fingerprint = 0, crlnumber = 0;
a208 2
		else if (strcmp(*argv,"-crlnumber") == 0)
			crlnumber= ++num;
d284 1
a284 15
			if (crlnumber == i)
				{
				ASN1_INTEGER *crlnum;
				crlnum = X509_CRL_get_ext_d2i(x, NID_crl_number,
							      NULL, NULL);
				BIO_printf(bio_out,"crlNumber=");
				if (crlnum)
					{
					i2a_ASN1_INTEGER(bio_out, crlnum);
					ASN1_INTEGER_free(crlnum);
					}
				else
					BIO_puts(bio_out, "<NONE>");
				BIO_printf(bio_out,"\n");
				}
@


1.1.1.7
log
@Import OpenSSL 1.0.1g
@
text
@a83 3
#ifndef OPENSSL_NO_MD5
" -hash_old       - print old-style (MD5) hash value\n",
#endif
a110 3
#ifndef OPENSSL_NO_MD5
       int hash_old=0;
#endif
a194 4
#ifndef OPENSSL_NO_MD5
		else if (strcmp(*argv,"-hash_old") == 0)
			hash_old= ++num;
#endif
a306 8
#ifndef OPENSSL_NO_MD5
			if (hash_old == i)
				{
				BIO_printf(bio_out,"%08lx\n",
					X509_NAME_hash_old(
						X509_CRL_get_issuer(x)));
				}
#endif
@


