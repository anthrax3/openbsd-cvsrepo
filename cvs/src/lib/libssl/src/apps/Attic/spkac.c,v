head	1.23;
access;
symbols
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	butholakala:1.8
	openssl_1_0_1_g:1.1.1.5
	OPENBSD_5_5:1.8.0.24
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	openssl_1_0_1_c:1.1.1.5
	OPENBSD_5_2:1.8.0.14
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	openssl_1_0_0_f:1.1.1.5
	openssl_1_0_0_e:1.1.1.5
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	openssh_1_0_0_a:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.5
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.5
	openssl_0_9_8_h:1.1.1.4
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.3
	openssl:1.1.1
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENSSL_0_9_7C:1.1.1.3
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENSSL_0_9_7B:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.23
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.22;
commitid	7A7DObXgY4Fni8xJ;

1.22
date	2014.07.22.06.55.22;	author guenther;	state Exp;
branches;
next	1.21;
commitid	IhQGoOzJBn2V22T4;

1.21
date	2014.07.14.00.35.10;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	EB0l28piqIRSpBUh;

1.20
date	2014.07.12.17.54.31;	author jsing;	state Exp;
branches;
next	1.19;
commitid	0NuggCO2WJOZj8Kh;

1.19
date	2014.06.12.15.49.27;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	mJUVYpkFBZ0Zv2bG;

1.18
date	2014.05.23.16.10.02;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2014.05.19.12.13.30;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.18.16.21.03;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2014.05.18.11.36.24;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.24.12.22.22;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.18.04.17.17;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2014.04.18.02.45.27;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2014.04.17.20.58.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.17.13.37.48;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.16.02.14.27;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.19;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.48;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.12.02.18.35;	author markus;	state Exp;
branches
	1.6.20.1
	1.6.22.1;
next	1.5;

1.5
date	2002.09.14.11.18.02;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.02.56.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.30;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.15;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.37;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.12.20.43.16;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.05.11.21.34.24;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.06.12.15.39;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.01.09.12.13.49;	author djm;	state Exp;
branches;
next	;

1.6.20.1
date	2009.01.09.11.40.48;	author djm;	state Exp;
branches;
next	;

1.6.22.1
date	2009.01.09.11.40.32;	author djm;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@/* $OpenBSD: spkac.c,v 1.22 2014/07/22 06:55:22 guenther Exp $ */
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
 * project 1999. Based on an original idea by Massimiliano Pala
 * (madwolf@@openca.org).
 */
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "apps.h"

#include <openssl/bio.h>
#include <openssl/conf.h>
#include <openssl/err.h>
#include <openssl/evp.h>
#include <openssl/lhash.h>
#include <openssl/pem.h>
#include <openssl/x509.h>

/* -in arg	- input file - default stdin
 * -out arg	- output file - default stdout
 */

int spkac_main(int, char **);

int
spkac_main(int argc, char **argv)
{
	ENGINE *e = NULL;
	int i, badops = 0, ret = 1;
	BIO *in = NULL, *out = NULL;
	int verify = 0, noout = 0, pubkey = 0;
	char *infile = NULL, *outfile = NULL, *prog;
	char *passargin = NULL, *passin = NULL;
	const char *spkac = "SPKAC", *spksect = "default";
	char *spkstr = NULL;
	char *challenge = NULL, *keyfile = NULL;
	CONF *conf = NULL;
	NETSCAPE_SPKI *spki = NULL;
	EVP_PKEY *pkey = NULL;
#ifndef OPENSSL_NO_ENGINE
	char *engine = NULL;
#endif

	prog = argv[0];
	argc--;
	argv++;
	while (argc >= 1) {
		if (strcmp(*argv, "-in") == 0) {
			if (--argc < 1)
				goto bad;
			infile = *(++argv);
		} else if (strcmp(*argv, "-out") == 0) {
			if (--argc < 1)
				goto bad;
			outfile = *(++argv);
		} else if (strcmp(*argv, "-passin") == 0) {
			if (--argc < 1)
				goto bad;
			passargin = *(++argv);
		} else if (strcmp(*argv, "-key") == 0) {
			if (--argc < 1)
				goto bad;
			keyfile = *(++argv);
		} else if (strcmp(*argv, "-challenge") == 0) {
			if (--argc < 1)
				goto bad;
			challenge = *(++argv);
		} else if (strcmp(*argv, "-spkac") == 0) {
			if (--argc < 1)
				goto bad;
			spkac = *(++argv);
		} else if (strcmp(*argv, "-spksect") == 0) {
			if (--argc < 1)
				goto bad;
			spksect = *(++argv);
		}
#ifndef OPENSSL_NO_ENGINE
		else if (strcmp(*argv, "-engine") == 0) {
			if (--argc < 1)
				goto bad;
			engine = *(++argv);
		}
#endif
		else if (strcmp(*argv, "-noout") == 0)
			noout = 1;
		else if (strcmp(*argv, "-pubkey") == 0)
			pubkey = 1;
		else if (strcmp(*argv, "-verify") == 0)
			verify = 1;
		else
			badops = 1;
		argc--;
		argv++;
	}

	if (badops) {
bad:
		BIO_printf(bio_err, "%s [options]\n", prog);
		BIO_printf(bio_err, "where options are\n");
		BIO_printf(bio_err, " -in arg        input file\n");
		BIO_printf(bio_err, " -out arg       output file\n");
		BIO_printf(bio_err, " -key arg       create SPKAC using private key\n");
		BIO_printf(bio_err, " -passin arg    input file pass phrase source\n");
		BIO_printf(bio_err, " -challenge arg challenge string\n");
		BIO_printf(bio_err, " -spkac arg     alternative SPKAC name\n");
		BIO_printf(bio_err, " -noout         don't print SPKAC\n");
		BIO_printf(bio_err, " -pubkey        output public key\n");
		BIO_printf(bio_err, " -verify        verify SPKAC signature\n");
#ifndef OPENSSL_NO_ENGINE
		BIO_printf(bio_err, " -engine e      use engine e, possibly a hardware device.\n");
#endif
		goto end;
	}
	ERR_load_crypto_strings();
	if (!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
		BIO_printf(bio_err, "Error getting password\n");
		goto end;
	}
#ifndef OPENSSL_NO_ENGINE
	e = setup_engine(bio_err, engine, 0);
#endif

	if (keyfile) {
		pkey = load_key(bio_err,
		    strcmp(keyfile, "-") ? keyfile : NULL,
		    FORMAT_PEM, 1, passin, e, "private key");
		if (!pkey) {
			goto end;
		}
		spki = NETSCAPE_SPKI_new();
		if (challenge)
			ASN1_STRING_set(spki->spkac->challenge,
			    challenge, (int) strlen(challenge));
		NETSCAPE_SPKI_set_pubkey(spki, pkey);
		NETSCAPE_SPKI_sign(spki, pkey, EVP_md5());
		spkstr = NETSCAPE_SPKI_b64_encode(spki);
		if (spkstr == NULL) {
			BIO_printf(bio_err, "Error encoding SPKAC\n");
			ERR_print_errors(bio_err);
			goto end;
		}

		if (outfile)
			out = BIO_new_file(outfile, "w");
		else
			out = BIO_new_fp(stdout, BIO_NOCLOSE);

		if (!out) {
			BIO_printf(bio_err, "Error opening output file\n");
			ERR_print_errors(bio_err);
		} else {
			BIO_printf(out, "SPKAC=%s\n", spkstr);
			ret = 0;
		}
		free(spkstr);
		goto end;
	}
	if (infile)
		in = BIO_new_file(infile, "r");
	else
		in = BIO_new_fp(stdin, BIO_NOCLOSE);

	if (!in) {
		BIO_printf(bio_err, "Error opening input file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	conf = NCONF_new(NULL);
	i = NCONF_load_bio(conf, in, NULL);

	if (!i) {
		BIO_printf(bio_err, "Error parsing config file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	spkstr = NCONF_get_string(conf, spksect, spkac);

	if (!spkstr) {
		BIO_printf(bio_err, "Can't find SPKAC called \"%s\"\n", spkac);
		ERR_print_errors(bio_err);
		goto end;
	}
	spki = NETSCAPE_SPKI_b64_decode(spkstr, -1);

	if (!spki) {
		BIO_printf(bio_err, "Error loading SPKAC\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (outfile)
		out = BIO_new_file(outfile, "w");
	else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
	}

	if (!out) {
		BIO_printf(bio_err, "Error opening output file\n");
		ERR_print_errors(bio_err);
		goto end;
	}
	if (!noout)
		NETSCAPE_SPKI_print(out, spki);
	pkey = NETSCAPE_SPKI_get_pubkey(spki);
	if (verify) {
		i = NETSCAPE_SPKI_verify(spki, pkey);
		if (i > 0)
			BIO_printf(bio_err, "Signature OK\n");
		else {
			BIO_printf(bio_err, "Signature Failure\n");
			ERR_print_errors(bio_err);
			goto end;
		}
	}
	if (pubkey)
		PEM_write_bio_PUBKEY(out, pkey);

	ret = 0;

end:
	NCONF_free(conf);
	NETSCAPE_SPKI_free(spki);
	BIO_free(in);
	BIO_free_all(out);
	EVP_PKEY_free(pkey);
	free(passin);

	return (ret);
}
@


1.22
log
@Handle failure of NETSCAPE_SPKI_b64_encode() and don't leak memory
when BIO_new_{file,fp}() fails.

inspired by a diff from logan@@  ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.21 2014/07/14 00:35:10 deraadt Exp $ */
@


1.21
log
@whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.20 2014/07/12 17:54:31 jsing Exp $ */
d193 5
d201 1
a201 1
		else {
a202 1
		}
d207 3
a209 1
			goto end;
a210 1
		BIO_printf(out, "SPKAC=%s\n", spkstr);
a211 1
		ret = 0;
@


1.20
log
@openssl(1) is only built as a single monolithic binary, so just call
load_config() once when we start.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: spkac.c,v 1.19 2014/06/12 15:49:27 deraadt Exp $ */
d81 1
a81 1
int 
d278 1
a278 1
	
@


1.19
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a98 3

	if (!load_config(bio_err, NULL))
		goto end;
@


1.18
log
@Calling signal once to ignore SIGPIPE is sufficient - we do not need to do
this again in each app.

ok miod@@
@
text
@d1 1
a1 2
/* apps/spkac.c */

@


1.17
log
@It is perfectly valid to call free(NULL), so stop checking for non-NULL
before calling free - of some course parts of the code already did this.
@
text
@a100 2
	signal(SIGPIPE, SIG_IGN);

@


1.16
log
@Group and sort includes.

Currently "apps.h" needs to be included before any of the openssl headers
and there are several cases where the code depends on headers that are
included by something included by apps.h...

More untangling saved for later on.
@
text
@d283 1
a283 2
	if (passin)
		free(passin);
@


1.15
log
@bio_err is initialised in main, hence there is no need to initialise it
in each application (since there is no longer a non-monolithic mode).

In typical OpenSSL fashion, the code is inconsistent and there are multiple
ways that bio_err was initialised - none of them actually checked to see if
the initialisation actually succeeded. Additionally, it is worth noting
that in at least two cases bio_err was also being used before it would have
been initialised.

ok miod@@
@
text
@d60 1
d65 1
d67 1
d73 1
a74 2
#include <openssl/pem.h>

@


1.14
log
@When OPENSSL_C is not defined, apps_startup becomes a
signal(SIGPIPE, SIG_IGN) and apps_shutdown is a no-op. So just do that
instead.

ok beck@@
@
text
@a100 3
	if (!bio_err)
		bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);

@


1.13
log
@Remove MAIN and PROG defines now that we do not compile non-monolithic.

ok tedu@@
@
text
@d99 1
a99 1
	apps_startup();
d286 1
a286 1
	apps_shutdown();
@


1.12
log
@KaboomNF
@
text
@a72 2
#undef PROG
#define PROG	spkac_main
d78 1
a78 1
int MAIN(int, char **);
d81 1
a81 1
MAIN(int argc, char **argv)
@


1.11
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d15 1
a15 1
 *    notice, this list of conditions and the following disclaimer. 
d82 3
a84 2
int MAIN(int argc, char **argv)
	{
d86 4
a89 4
	int i,badops=0, ret = 1;
	BIO *in = NULL,*out = NULL;
	int verify=0,noout=0,pubkey=0;
	char *infile = NULL,*outfile = NULL,*prog;
d98 1
a98 1
	char *engine=NULL;
d103 2
a104 1
	if (!bio_err) bio_err = BIO_new_fp(stderr, BIO_NOCLOSE);
d109 1
a109 1
	prog=argv[0];
d112 30
a141 37
	while (argc >= 1)
		{
		if (strcmp(*argv,"-in") == 0)
			{
			if (--argc < 1) goto bad;
			infile= *(++argv);
			}
		else if (strcmp(*argv,"-out") == 0)
			{
			if (--argc < 1) goto bad;
			outfile= *(++argv);
			}
		else if (strcmp(*argv,"-passin") == 0)
			{
			if (--argc < 1) goto bad;
			passargin= *(++argv);
			}
		else if (strcmp(*argv,"-key") == 0)
			{
			if (--argc < 1) goto bad;
			keyfile= *(++argv);
			}
		else if (strcmp(*argv,"-challenge") == 0)
			{
			if (--argc < 1) goto bad;
			challenge= *(++argv);
			}
		else if (strcmp(*argv,"-spkac") == 0)
			{
			if (--argc < 1) goto bad;
			spkac= *(++argv);
			}
		else if (strcmp(*argv,"-spksect") == 0)
			{
			if (--argc < 1) goto bad;
			spksect= *(++argv);
			}
d143 5
a147 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
d149 8
a156 7
		else if (strcmp(*argv,"-noout") == 0)
			noout=1;
		else if (strcmp(*argv,"-pubkey") == 0)
			pubkey=1;
		else if (strcmp(*argv,"-verify") == 0)
			verify=1;
		else badops = 1;
d159 1
a159 1
		}
d161 1
a161 2
	if (badops)
		{
d163 11
a173 11
		BIO_printf(bio_err,"%s [options]\n",prog);
		BIO_printf(bio_err,"where options are\n");
		BIO_printf(bio_err," -in arg        input file\n");
		BIO_printf(bio_err," -out arg       output file\n");
		BIO_printf(bio_err," -key arg       create SPKAC using private key\n");
		BIO_printf(bio_err," -passin arg    input file pass phrase source\n");
		BIO_printf(bio_err," -challenge arg challenge string\n");
		BIO_printf(bio_err," -spkac arg     alternative SPKAC name\n");
		BIO_printf(bio_err," -noout         don't print SPKAC\n");
		BIO_printf(bio_err," -pubkey        output public key\n");
		BIO_printf(bio_err," -verify        verify SPKAC signature\n");
d175 1
a175 1
		BIO_printf(bio_err," -engine e      use engine e, possibly a hardware device.\n");
d178 1
a178 2
		}

d180 1
a180 1
	if(!app_passwd(bio_err, passargin, NULL, &passin, NULL)) {
a183 1

d185 1
a185 1
        e = setup_engine(bio_err, engine, 0);
d188 1
a188 1
	if(keyfile) {
d190 3
a192 3
				strcmp(keyfile, "-") ? keyfile : NULL,
				FORMAT_PEM, 1, passin, e, "private key");
		if(!pkey) {
d196 3
a198 2
		if(challenge) ASN1_STRING_set(spki->spkac->challenge,
						 challenge, (int)strlen(challenge));
d203 2
a204 1
		if (outfile) out = BIO_new_file(outfile, "w");
d209 1
a209 1
		if(!out) {
d219 4
d224 1
a224 6
	

	if (infile) in = BIO_new_file(infile, "r");
	else in = BIO_new_fp(stdin, BIO_NOCLOSE);

	if(!in) {
a228 1

d232 1
a232 1
	if(!i) {
d237 1
d239 1
a239 3
	spkstr = NCONF_get_string(conf, spksect, spkac);
		
	if(!spkstr) {
d244 1
d246 1
a246 3
	spki = NETSCAPE_SPKI_b64_decode(spkstr, -1);
	
	if(!spki) {
d251 2
a252 2

	if (outfile) out = BIO_new_file(outfile, "w");
d257 1
a257 1
	if(!out) {
d262 2
a263 2

	if(!noout) NETSCAPE_SPKI_print(out, spki);
d265 1
a265 1
	if(verify) {
d267 2
a268 1
		if (i > 0) BIO_printf(bio_err, "Signature OK\n");
d275 2
a276 1
	if(pubkey) PEM_write_bio_PUBKEY(out, pkey);
d286 2
a287 1
	if(passin) free(passin);
d289 2
a290 2
	return(ret);
	}
@


1.10
log
@Change library to use intrinsic memory allocation functions instead of
OPENSSL_foo wrappers. This changes:
OPENSSL_malloc->malloc
OPENSSL_free->free
OPENSSL_relloc->realloc
OPENSSL_freeFunc->free
@
text
@d295 1
a295 1
	OPENSSL_EXIT(ret);
@


1.9
log
@spray the apps directory with anti-VMS napalm.
so that its lovecraftian horror is not forever lost, i reproduce below
a comment from the deleted code.

        /* 2011-03-22 SMS.
         * If we have 32-bit pointers everywhere, then we're safe, and
         * we bypass this mess, as on non-VMS systems.  (See ARGV,
         * above.)
         * Problem 1: Compaq/HP C before V7.3 always used 32-bit
         * pointers for argv[].
         * Fix 1: For a 32-bit argv[], when we're using 64-bit pointers
         * everywhere else, we always allocate and use a 64-bit
         * duplicate of argv[].
         * Problem 2: Compaq/HP C V7.3 (Alpha, IA64) before ECO1 failed
         * to NULL-terminate a 64-bit argv[].  (As this was written, the
         * compiler ECO was available only on IA64.)
         * Fix 2: Unless advised not to (VMS_TRUST_ARGV), we test a
         * 64-bit argv[argc] for NULL, and, if necessary, use a
         * (properly) NULL-terminated (64-bit) duplicate of argv[].
         * The same code is used in either case to duplicate argv[].
         * Some of these decisions could be handled in preprocessing,
         * but the code tends to get even uglier, and the penalty for
         * deciding at compile- or run-time is tiny.
         */
@
text
@d220 1
a220 1
		OPENSSL_free(spkstr);
d293 1
a293 1
	if(passin) OPENSSL_free(passin);
@


1.8
log
@resolve conflicts
@
text
@a211 6
#ifdef OPENSSL_SYS_VMS
			{
			    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			    out = BIO_push(tmpbio, out);
			}
#endif
a263 6
#ifdef OPENSSL_SYS_VMS
		{
		    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		    out = BIO_push(tmpbio, out);
		}
#endif
@


1.7
log
@resolve conflicts
@
text
@d3 1
a3 1
/* Written by Dr Stephen N Henson (shenson@@bigfoot.com) for the OpenSSL
d288 1
a288 1
		if(i) BIO_printf(bio_err, "Signature OK\n");
@


1.6
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d90 2
a91 1
	char *spkac = "SPKAC", *spksect = "default", *spkstr = NULL;
d204 1
a204 1
						 challenge, strlen(challenge));
@


1.6.20.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d287 1
a287 1
		if (i > 0) BIO_printf(bio_err, "Signature OK\n");
@


1.6.22.1
log
@Fix CVE-2008-5077: Incorrect checks for malformed signatures
@
text
@d287 1
a287 1
		if (i > 0) BIO_printf(bio_err, "Signature OK\n");
@


1.5
log
@merge with openssl-0.9.7-stable-SNAP-20020911,
new minor for libcrypto (_X509_REQ_print_ex)
tested by miod@@, pb@@
@
text
@d95 1
d97 1
d146 1
d152 1
d178 1
d180 1
d190 1
d192 1
d306 1
a306 1
	EXIT(ret);
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d189 1
a189 1
				FORMAT_PEM, passin, e, "private key");
@


1.3
log
@openssl-engine-0.9.6 merge
@
text
@a71 1
#include <openssl/engine.h>
d86 1
a86 1
	BIO *in = NULL,*out = NULL, *key = NULL;
d92 1
a92 1
	LHASH *conf = NULL;
d101 3
d184 1
a184 17
	if (engine != NULL)
		{
		if((e = ENGINE_by_id(engine)) == NULL)
			{
			BIO_printf(bio_err,"invalid engine \"%s\"\n",
				engine);
			goto end;
			}
		if(!ENGINE_set_default(e, ENGINE_METHOD_ALL))
			{
			BIO_printf(bio_err,"can't use that engine\n");
			goto end;
			}
		BIO_printf(bio_err,"engine \"%s\" set.\n", engine);
		/* Free our "structural" reference. */
		ENGINE_free(e);
		}
d187 3
a189 8
		if(strcmp(keyfile, "-")) key = BIO_new_file(keyfile, "r");
		else key = BIO_new_fp(stdin, BIO_NOCLOSE);
		if(!key) {
			BIO_printf(bio_err, "Error opening key file\n");
			ERR_print_errors(bio_err);
			goto end;
		}
		pkey = PEM_read_bio_PrivateKey(key, NULL, NULL, passin);
a190 2
			BIO_printf(bio_err, "Error reading private key\n");
			ERR_print_errors(bio_err);
d203 1
a203 1
#ifdef VMS
d233 2
a234 1
	conf = CONF_load_bio(NULL, in, NULL);
d236 1
a236 1
	if(!conf) {
d242 1
a242 1
	spkstr = CONF_get_string(conf, spksect, spkac);
d261 1
a261 1
#ifdef VMS
d291 1
a291 1
	CONF_free(conf);
a294 1
	BIO_free(key);
d297 1
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d72 1
d85 1
d96 1
d142 5
d172 1
d182 18
d222 9
a230 1
		else out = BIO_new_fp(stdout, BIO_NOCLOSE);
d238 1
a238 1
		Free(spkstr);
d279 9
a287 1
	else out = BIO_new_fp(stdout, BIO_NOCLOSE);
d314 1
a314 1
	BIO_free(out);
d317 1
a317 1
	if(passin) Free(passin);
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d66 1
d69 1
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a65 1
#include <openssl/conf.h>
a67 1
#include <openssl/lhash.h>
a81 1
	ENGINE *e = NULL;
d83 1
a83 1
	BIO *in = NULL,*out = NULL;
d89 1
a89 1
	CONF *conf = NULL;
a91 1
	char *engine=NULL;
a96 3
	if (!load_config(bio_err, NULL))
		goto end;

a136 5
		else if (strcmp(*argv,"-engine") == 0)
			{
			if (--argc < 1) goto bad;
			engine= *(++argv);
			}
a161 1
		BIO_printf(bio_err," -engine e      use engine e, possibly a hardware device.\n");
a170 2
        e = setup_engine(bio_err, engine, 0);

d172 8
a179 3
		pkey = load_key(bio_err,
				strcmp(keyfile, "-") ? keyfile : NULL,
				FORMAT_PEM, passin, e, "private key");
d181 2
d193 1
a193 9
		else {
			out = BIO_new_fp(stdout, BIO_NOCLOSE);
#ifdef OPENSSL_SYS_VMS
			{
			    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
			    out = BIO_push(tmpbio, out);
			}
#endif
		}
d201 1
a201 1
		OPENSSL_free(spkstr);
d217 1
a217 2
	conf = NCONF_new(NULL);
	i = NCONF_load_bio(conf, in, NULL);
d219 1
a219 1
	if(!i) {
d225 1
a225 1
	spkstr = NCONF_get_string(conf, spksect, spkac);
d242 1
a242 9
	else {
		out = BIO_new_fp(stdout, BIO_NOCLOSE);
#ifdef OPENSSL_SYS_VMS
		{
		    BIO *tmpbio = BIO_new(BIO_f_linebuffer());
		    out = BIO_push(tmpbio, out);
		}
#endif
	}
d266 1
a266 1
	NCONF_free(conf);
d269 2
a270 1
	BIO_free_all(out);
d272 1
a272 2
	if(passin) OPENSSL_free(passin);
	apps_shutdown();
@


1.1.1.2
log
@import openssl-0.9.7-stable-SNAP-20020911 (without idea)
@
text
@d189 1
a189 1
				FORMAT_PEM, 1, passin, e, "private key");
@


1.1.1.3
log
@import 0.9.7b (without idea and rc5)
@
text
@a94 1
#ifndef OPENSSL_NO_ENGINE
a95 1
#endif
a143 1
#ifndef OPENSSL_NO_ENGINE
a148 1
#endif
a173 1
#ifndef OPENSSL_NO_ENGINE
a174 1
#endif
a183 1
#ifndef OPENSSL_NO_ENGINE
a184 1
#endif
d298 1
a298 1
	OPENSSL_EXIT(ret);
@


1.1.1.4
log
@import of OpenSSL 0.9.8h
@
text
@d90 1
a90 2
	const char *spkac = "SPKAC", *spksect = "default";
	char *spkstr = NULL;
d203 1
a203 1
						 challenge, (int)strlen(challenge));
@


1.1.1.5
log
@import openssl-0.9.8j
@
text
@d3 1
a3 1
/* Written by Dr Stephen N Henson (steve@@openssl.org) for the OpenSSL
d288 1
a288 1
		if (i > 0) BIO_printf(bio_err, "Signature OK\n");
@


