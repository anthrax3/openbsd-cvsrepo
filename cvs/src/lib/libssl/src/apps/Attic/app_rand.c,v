head	1.10;
access;
symbols
	butholakala:1.4
	openssl_1_0_1_g:1.1.1.1
	OPENBSD_5_5:1.4.0.50
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.46
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.44
	OPENBSD_5_3_BASE:1.4
	openssl_1_0_1_c:1.1.1.1
	OPENBSD_5_2:1.4.0.40
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.42
	openssl_1_0_0_f:1.1.1.1
	openssl_1_0_0_e:1.1.1.1
	OPENBSD_5_0:1.4.0.38
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.36
	OPENBSD_4_9_BASE:1.4
	openssh_1_0_0_a:1.1.1.1
	OPENBSD_4_8:1.4.0.34
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.32
	OPENBSD_4_6_BASE:1.4
	openssl_0_9_8_k:1.1.1.1
	OPENBSD_4_5:1.4.0.28
	OPENBSD_4_5_BASE:1.4
	openssl_0_9_8_j:1.1.1.1
	openssl_0_9_8_h:1.1.1.1
	pre_openssl_0_9_8h:1.4
	OPENBSD_4_4:1.4.0.26
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.24
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.22
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.20
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.18
	OPENBSD_4_0_BASE:1.4
	openssl_0_9_7j:1.1.1.1
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.1
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.1
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.1
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.1
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.1
	OPENSSL_0_9_7_BETA3:1.1.1.1
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2014.04.18.19.54.57;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2014.04.18.13.13.50;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.02.45.26;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.17.20.58.07;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.16.16.34.09;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.16.02.50.09;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.15.02.29.09;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.02.49;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.15.06.18.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.19.11.08.05;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.49.28;	author markus;	state Exp;
branches;
next	;


desc
@@


1.10
log
@$HOME/.rnd will never be a good source of entropy. ok beck
@
text
@/* apps/app_rand.c */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */

#define NON_MAIN
#include "apps.h"
#undef NON_MAIN
#include <openssl/bio.h>
#include <openssl/rand.h>


static int seeded = 0;

int
app_RAND_load_file(const char *file, BIO * bio_e, int dont_warn)
{
	int consider_randfile = (file == NULL);
	char buffer[200];


	if (file == NULL)
		file = RAND_file_name(buffer, sizeof buffer);
	if (file == NULL || !RAND_load_file(file, -1)) {
		if (RAND_status() == 0) {
			if (!dont_warn) {
				BIO_printf(bio_e, "unable to load 'random state'\n");
				BIO_printf(bio_e, "This means that the random number generator has not been seeded\n");
				BIO_printf(bio_e, "with much random data.\n");
				if (consider_randfile) {	/* explanation does not
								 * apply when a file is
								 * explicitly named */
					BIO_printf(bio_e, "Consider setting the RANDFILE environment variable to point at a file that\n");
					BIO_printf(bio_e, "'random' data can be kept in (the file will be overwritten).\n");
				}
			}
			return 0;
		}
	}
	seeded = 1;
	return 1;
}

long
app_RAND_load_files(char *name)
{
	char *p, *n;
	int last;
	long tot = 0;

	for (;;) {
		last = 0;
		for (p = name;
		    ((*p != '\0') && (*p != ':')); p++);
		if (*p == '\0')
			last = 1;
		*p = '\0';
		n = name;
		name = p + 1;
		if (*n == '\0')
			break;

		tot += RAND_load_file(n, -1);
		if (last)
			break;
	}
	if (tot > 512)
		app_RAND_allow_write_file();
	return (tot);
}

int
app_RAND_write_file(const char *file, BIO * bio_e)
{
	char buffer[200];

	if (!seeded)
		/*
		 * If we did not manage to read the seed file, we should not
		 * write a low-entropy seed file back -- it would suppress a
		 * crucial warning the next time we want to use it.
		 */
		return 0;

	if (file == NULL)
		file = RAND_file_name(buffer, sizeof buffer);
	if (file == NULL || !RAND_write_file(file)) {
		BIO_printf(bio_e, "unable to write 'random state'\n");
		return 0;
	}
	return 1;
}

void
app_RAND_allow_write_file(void)
{
	seeded = 1;
}
@


1.9
log
@egd support is too dangerous to leave where somebody might find it.
ok deraadt.
@
text
@@


1.8
log
@KaboomNF
@
text
@a119 1
static int egdsocket = 0;
a129 8
	else if (RAND_egd(file) > 0) {
		/*
		 * we try if the given filename is an EGD socket. if it is,
		 * we don't write anything back to the file.
		 */
		egdsocket = 1;
		return 1;
	}
a155 1
	int egd;
d169 1
a169 5
		egd = RAND_egd(n);
		if (egd > 0)
			tot += egd;
		else
			tot += RAND_load_file(n, -1);
d183 1
a183 1
	if (egdsocket || !seeded)
@


1.7
log
@Mostly gut e_os.h:
USE_SOCKETS is unrelated to using sockets, but just pulls in .h files.  It
makes every file buy a kitchen sink, because 11 files forgot to.
EXIT() is really exit(), a gentle surprise
but... OPENSSL_EXIT() is really just return(), because noone compiles the
openssl command non-monolithic anymore
@
text
@d123 1
a123 1
app_RAND_load_file(const char *file, BIO *bio_e, int dont_warn)
d132 4
a135 2
		/* we try if the given filename is an EGD socket.
		   if it is, we don't write anything back to the file. */
d145 3
a147 2
				if (consider_randfile) /* explanation does not apply when a file is explicitly named */
				{
d171 2
a172 2
			if (*p == '\0')
				last = 1;
d193 1
a193 1
app_RAND_write_file(const char *file, BIO *bio_e)
d198 5
a202 4
		/* If we did not manage to read the seed file,
		 * we should not write a low-entropy seed file back --
		 * it would suppress a crucial warning the next time
		 * we want to use it. */
@


1.6
log
@More KNF.
@
text
@d167 1
a167 1
		    ((*p != '\0') && (*p != LIST_SEPARATOR_CHAR)); p++);
@


1.5
log
@first round of unifdef hammering
@
text
@d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d122 3
a124 2
int app_RAND_load_file(const char *file, BIO *bio_e, int dont_warn)
	{
d127 1
a127 1
	
d131 1
a131 2
	else if (RAND_egd(file) > 0)
		{
d136 8
a143 6
		}
	if (file == NULL || !RAND_load_file(file, -1))
		{
		if (RAND_status() == 0)
			{
			if (!dont_warn)
d145 2
a146 8
				BIO_printf(bio_e,"unable to load 'random state'\n");
				BIO_printf(bio_e,"This means that the random number generator has not been seeded\n");
				BIO_printf(bio_e,"with much random data.\n");
				if (consider_randfile) /* explanation does not apply when a file is explicitly named */
					{
					BIO_printf(bio_e,"Consider setting the RANDFILE environment variable to point at a file that\n");
					BIO_printf(bio_e,"'random' data can be kept in (the file will be overwritten).\n");
					}
d148 1
a149 1
			}
d151 1
d154 1
a154 1
	}
d156 4
a159 3
long app_RAND_load_files(char *name)
	{
	char *p,*n;
d161 1
a161 1
	long tot=0;
a162 10
	
	for (;;)
		{
		last=0;
		for (p=name; ((*p != '\0') && (*p != LIST_SEPARATOR_CHAR)); p++);
		if (*p == '\0') last=1;
		*p='\0';
		n=name;
		name=p+1;
		if (*n == '\0') break;
d164 13
a176 1
		egd=RAND_egd(n);
d178 1
a178 1
			tot+=egd;
d180 4
a183 3
			tot+=RAND_load_file(n,-1);
		if (last) break;
		}
d186 2
a187 2
	return(tot);
	}
d189 3
a191 2
int app_RAND_write_file(const char *file, BIO *bio_e)
	{
d193 1
a193 1
	
d203 2
a204 3
	if (file == NULL || !RAND_write_file(file))
		{
		BIO_printf(bio_e,"unable to write 'random state'\n");
d206 1
a206 1
		}
d208 1
a208 1
	}
d210 3
a212 2
void app_RAND_allow_write_file(void)
	{
d214 1
a214 1
	}
@


1.4
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@a126 6
#ifdef OPENSSL_SYS_WINDOWS
	BIO_printf(bio_e,"Loading 'screen' into random state -");
	BIO_flush(bio_e);
	RAND_screen();
	BIO_printf(bio_e," done\n");
#endif
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d127 1
a127 1
#ifdef WINDOWS
d145 1
a145 1
		if (RAND_status() == 0 && !dont_warn)
d147 1
a147 4
			BIO_printf(bio_e,"unable to load 'random state'\n");
			BIO_printf(bio_e,"This means that the random number generator has not been seeded\n");
			BIO_printf(bio_e,"with much random data.\n");
			if (consider_randfile) /* explanation does not apply when a file is explicitly named */
d149 8
a156 2
				BIO_printf(bio_e,"Consider setting the RANDFILE environment variable to point at a file that\n");
				BIO_printf(bio_e,"'random' data can be kept in (the file will be overwritten).\n");
d158 1
a159 1
		return 0;
@


1.2
log
@OpenSSL 0.9.5a merge
@
text
@d180 4
a183 2
		if (egd > 0) tot+=egd;
		tot+=RAND_load_file(n,-1);
@


1.1
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d59 1
a59 1
 * Copyright (c) 1998-1999 The OpenSSL Project.  All rights reserved.
d112 1
d114 1
d167 1
a167 1
    int egd;
d179 1
a179 1
        egd=RAND_egd(n);
d181 1
a181 1
		tot+=RAND_load_file(n,1024L*1024L);
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@d59 1
a59 1
 * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.
a111 1
#define NON_MAIN
a112 1
#undef NON_MAIN
d125 1
a125 1
#ifdef OPENSSL_SYS_WINDOWS
d143 1
a143 1
		if (RAND_status() == 0)
d145 4
a148 1
			if (!dont_warn)
d150 2
a151 8
				BIO_printf(bio_e,"unable to load 'random state'\n");
				BIO_printf(bio_e,"This means that the random number generator has not been seeded\n");
				BIO_printf(bio_e,"with much random data.\n");
				if (consider_randfile) /* explanation does not apply when a file is explicitly named */
					{
					BIO_printf(bio_e,"Consider setting the RANDFILE environment variable to point at a file that\n");
					BIO_printf(bio_e,"'random' data can be kept in (the file will be overwritten).\n");
					}
a152 1
			return 0;
d154 1
d165 1
a165 1
	int egd;
d177 3
a179 5
		egd=RAND_egd(n);
		if (egd > 0)
			tot+=egd;
		else
			tot+=RAND_load_file(n,-1);
@


