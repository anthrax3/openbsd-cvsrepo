head	1.7;
access;
symbols
	butholakala:1.6
	openssl_1_0_1_g:1.1.1.6
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	openssl_1_0_1_c:1.1.1.6
	OPENBSD_5_2:1.6.0.14
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.16
	openssl_1_0_0_f:1.1.1.6
	openssl_1_0_0_e:1.1.1.6
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	openssh_1_0_0_a:1.1.1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.6
	pre_openssl_0_9_8h:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	openssl_0_9_7j:1.1.1.5
	openssl:1.1.1
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENSSL_0_9_7G:1.1.1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENSSL_0_9_7D:1.1.1.3
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.15.21.34.05;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.29.05.39.33;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.08.08.03.15;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.15.02.29.21;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.51;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.45.21;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.20.42.12;	author markus;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.04.29.05.37.32;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.06.27.05.05.40;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.06.12.15.53;	author djm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@    $infile="/home/eay/ssl/SSLeay/MINFO";
I wonder when these scripts were last used...
@
text
@#!/usr/local/bin/perl
#
# OS2-EMX.pl - for EMX GCC on OS/2
#

$o='/';
$cp='cp';
$rm='rm -f';

$preamble = "SHELL=sh\n";

# C compiler stuff

$cc='gcc';
$cflags="-DL_ENDIAN -O3 -fomit-frame-pointer -m486 -Zmtd -Wall ";
$cflags.="-Zomf " if $shlib;
$shl_cflag="-Zdll";

if ($debug) { 
	$cflags.="-g "; 
}

$obj=$shlib ? '.obj' : '.o';
$ofile='-o ';

# EXE linking stuff
$link='${CC}';
$lflags='${CFLAGS} -Zbsd-signals -s';
$efile='-o ';
$exep='.exe';
$ex_libs="-lsocket";

# static library stuff
$mklib='ar r';
$mlflags='';
$ranlib="ar s";
$plib='';
$libp=$shlib ? ".lib" : ".a";
$shlibp=$shlib ? ".dll" : ".a";
$lfile='';

$asm=$shlib ? 'as -Zomf' : 'as';
$afile='-o ';
$bn_asm_obj="";
$bn_asm_src="";
$des_enc_obj="";
$des_enc_src="";
$bf_enc_obj="";
$bf_enc_src="";

if (!$no_asm)
	{
	$bn_asm_obj="crypto/bn/asm/bn-os2$obj crypto/bn/asm/co-os2$obj";
	$bn_asm_src="crypto/bn/asm/bn-os2.asm crypto/bn/asm/co-os2.asm";
	$des_enc_obj="crypto/des/asm/d-os2$obj crypto/des/asm/y-os2$obj";
	$des_enc_src="crypto/des/asm/d-os2.asm crypto/des/asm/y-os2.asm";
	$bf_enc_obj="crypto/bf/asm/b-os2$obj";
	$bf_enc_src="crypto/bf/asm/b-os2.asm";
	$cast_enc_obj="crypto/cast/asm/c-os2$obj";
	$cast_enc_src="crypto/cast/asm/c-os2.asm";
	$rc4_enc_obj="crypto/rc4/asm/r4-os2$obj";
	$rc4_enc_src="crypto/rc4/asm/r4-os2.asm";
	$rc5_enc_obj="crypto/rc5/asm/r5-os2$obj";
	$rc5_enc_src="crypto/rc5/asm/r5-os2.asm";
	$md5_asm_obj="crypto/md5/asm/m5-os2$obj";
	$md5_asm_src="crypto/md5/asm/m5-os2.asm";
	$sha1_asm_obj="crypto/sha/asm/s1-os2$obj";
	$sha1_asm_src="crypto/sha/asm/s1-os2.asm";
	$rmd160_asm_obj="crypto/ripemd/asm/rm-os2$obj";
	$rmd160_asm_src="crypto/ripemd/asm/rm-os2.asm";
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DOPENSSL_BN_ASM_PART_WORDS";
	}

if ($shlib)
	{
	$mlflags.=" $lflags -Zdll";
	$lib_cflag=" -D_DLL";
	$out_def="out_dll";
	$tmp_def="tmp_dll";
	}

sub do_lib_rule
	{
	local($obj,$target,$name,$shlib)=@@_;
	local($ret,$_,$Name);

	$target =~ s/\//$o/g if $o ne '/';
	$target="$target";
	($Name=$name) =~ tr/a-z/A-Z/;

	$ret.="$target: \$(${Name}OBJ)\n";
	if (!$shlib) 
		{
		$ret.="\t\$(RM) $target\n";
		$ret.="\t\$(MKLIB) $target \$(${Name}OBJ)\n";
		$ret.="\t\$(RANLIB) $target\n\n";
		}
	else
		{
		local($ex)=($target =~ /O_SSL/)?' $(L_CRYPTO)':'';
		$ex.=' -lsocket';
		$ret.="\t\$(LINK) \$(SHLIB_CFLAGS) \$(MLFLAGS) $efile$target \$(SHLIB_EX_OBJ) \$(${Name}OBJ) $ex os2/${Name}.def\n";
		$ret.="\temximp -o $out_def/$name.a os2/${Name}.def\n";
		$ret.="\temximp -o $out_def/$name.lib os2/${Name}.def\n\n";
		}
	}

sub do_link_rule
	{
	local($target,$files,$dep_libs,$libs)=@@_;
	local($ret,$_);
	
	$file =~ s/\//$o/g if $o ne '/';
	$n=&bname($target);
	$ret.="$target: $files $dep_libs\n";
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n\n";
	return($ret);
	}

1;
@


1.6
log
@resolve conflicts
@
text
@@


1.5
log
@resolve conflicts
@
text
@d51 1
a51 1
if (!$no_asm && !$fips)
d110 1
a110 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d116 1
a116 6
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.4
log
@resolve conflicts
@
text
@d71 1
@


1.3
log
@merge 0.9.7d
@
text
@d51 1
a51 1
if (!$no_asm)
d109 1
a109 1
	local($target,$files,$dep_libs,$libs)=@@_;
d115 6
a120 1
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n\n";
@


1.2
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d6 2
a7 2
$o='\\';
$cp='copy';
d10 2
d53 18
a70 18
	$bn_asm_obj="crypto\\bn\\asm\\bn-os2$obj crypto\\bn\\asm\\co-os2$obj";
	$bn_asm_src="crypto\\bn\\asm\\bn-os2.asm crypto\\bn\\asm\\co-os2.asm";
	$des_enc_obj="crypto\\des\\asm\\d-os2$obj crypto\\des\\asm\\y-os2$obj";
	$des_enc_src="crypto\\des\\asm\\d-os2.asm crypto\\des\\asm\\y-os2.asm";
	$bf_enc_obj="crypto\\bf\\asm\\b-os2$obj";
	$bf_enc_src="crypto\\bf\\asm\\b-os2.asm";
	$cast_enc_obj="crypto\\cast\\asm\\c-os2$obj";
	$cast_enc_src="crypto\\cast\\asm\\c-os2.asm";
	$rc4_enc_obj="crypto\\rc4\\asm\\r4-os2$obj";
	$rc4_enc_src="crypto\\rc4\\asm\\r4-os2.asm";
	$rc5_enc_obj="crypto\\rc5\\asm\\r5-os2$obj";
	$rc5_enc_src="crypto\\rc5\\asm\\r5-os2.asm";
	$md5_asm_obj="crypto\\md5\\asm\\m5-os2$obj";
	$md5_asm_src="crypto\\md5\\asm\\m5-os2.asm";
	$sha1_asm_obj="crypto\\sha\\asm\\s1-os2$obj";
	$sha1_asm_src="crypto\\sha\\asm\\s1-os2.asm";
	$rmd160_asm_obj="crypto\\ripemd\\asm\\rm-os2$obj";
	$rmd160_asm_src="crypto\\ripemd\\asm\\rm-os2.asm";
@


1.1
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d13 3
a15 1
$cflags="-DL_ENDIAN -O3 -fomit-frame-pointer -m486 -Zmt -Wall ";
d21 1
a21 1
$obj='.o';
d26 1
a26 1
$lflags='${CFLAGS} -Zbsd-signals';
d35 3
a37 3
$plib='lib';
$libp=".a";
$shlibp=".a";
d40 1
a40 1
$asm='as';
d51 26
a76 18
	$bn_asm_obj='crypto\bn\asm\bn-os2.o crypto\bn\asm\co-os2.o';
	$bn_asm_src='crypto\bn\asm\bn-os2.asm crypto\bn\asm\co-os2.asm';
	$des_enc_obj='crypto\des\asm\d-os2.o crypto\des\asm\y-os2.o';
	$des_enc_src='crypto\des\asm\d-os2.asm crypto\des\asm\y-os2.asm';
	$bf_enc_obj='crypto\bf\asm\b-os2.o';
	$bf_enc_src='crypto\bf\asm\b-os2.asm';
	$cast_enc_obj='crypto\cast\asm\c-os2.o';
	$cast_enc_src='crypto\cast\asm\c-os2.asm';
	$rc4_enc_obj='crypto\rc4\asm\r4-os2.o';
	$rc4_enc_src='crypto\rc4\asm\r4-os2.asm';
	$rc5_enc_obj='crypto\rc5\asm\r5-os2.o';
	$rc5_enc_src='crypto\rc5\asm\r5-os2.asm';
	$md5_asm_obj='crypto\md5\asm\m5-os2.o';
	$md5_asm_src='crypto\md5\asm\m5-os2.asm';
	$sha1_asm_obj='crypto\sha\asm\s1-os2.o';
	$sha1_asm_src='crypto\sha\asm\s1-os2.asm';
	$rmd160_asm_obj='crypto\ripemd\asm\rm-os2.o';
	$rmd160_asm_src='crypto\ripemd\asm\rm-os2.asm';
d89 14
a102 3
	$ret.="\t\$(RM) $target\n";
	$ret.="\t\$(MKLIB) $target \$(${Name}OBJ)\n";
	$ret.="\t\$(RANLIB) $target\n\n";
d113 1
a113 1
	$ret.="\t\$(LINK) ${efile}$target \$(LFLAGS) $files $libs\n\n";
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d13 1
a13 3
$cflags="-DL_ENDIAN -O3 -fomit-frame-pointer -m486 -Zmtd -Wall ";
$cflags.="-Zomf " if $shlib;
$shl_cflag="-Zdll";
d19 1
a19 1
$obj=$shlib ? '.obj' : '.o';
d24 1
a24 1
$lflags='${CFLAGS} -Zbsd-signals -s';
d33 3
a35 3
$plib='';
$libp=$shlib ? ".lib" : ".a";
$shlibp=$shlib ? ".dll" : ".a";
d38 1
a38 1
$asm=$shlib ? 'as -Zomf' : 'as';
d49 18
a66 26
	$bn_asm_obj="crypto\\bn\\asm\\bn-os2$obj crypto\\bn\\asm\\co-os2$obj";
	$bn_asm_src="crypto\\bn\\asm\\bn-os2.asm crypto\\bn\\asm\\co-os2.asm";
	$des_enc_obj="crypto\\des\\asm\\d-os2$obj crypto\\des\\asm\\y-os2$obj";
	$des_enc_src="crypto\\des\\asm\\d-os2.asm crypto\\des\\asm\\y-os2.asm";
	$bf_enc_obj="crypto\\bf\\asm\\b-os2$obj";
	$bf_enc_src="crypto\\bf\\asm\\b-os2.asm";
	$cast_enc_obj="crypto\\cast\\asm\\c-os2$obj";
	$cast_enc_src="crypto\\cast\\asm\\c-os2.asm";
	$rc4_enc_obj="crypto\\rc4\\asm\\r4-os2$obj";
	$rc4_enc_src="crypto\\rc4\\asm\\r4-os2.asm";
	$rc5_enc_obj="crypto\\rc5\\asm\\r5-os2$obj";
	$rc5_enc_src="crypto\\rc5\\asm\\r5-os2.asm";
	$md5_asm_obj="crypto\\md5\\asm\\m5-os2$obj";
	$md5_asm_src="crypto\\md5\\asm\\m5-os2.asm";
	$sha1_asm_obj="crypto\\sha\\asm\\s1-os2$obj";
	$sha1_asm_src="crypto\\sha\\asm\\s1-os2.asm";
	$rmd160_asm_obj="crypto\\ripemd\\asm\\rm-os2$obj";
	$rmd160_asm_src="crypto\\ripemd\\asm\\rm-os2.asm";
	}

if ($shlib)
	{
	$mlflags.=" $lflags -Zdll";
	$lib_cflag=" -D_DLL";
	$out_def="out_dll";
	$tmp_def="tmp_dll";
d79 3
a81 14
	if (!$shlib) 
		{
		$ret.="\t\$(RM) $target\n";
		$ret.="\t\$(MKLIB) $target \$(${Name}OBJ)\n";
		$ret.="\t\$(RANLIB) $target\n\n";
		}
	else
		{
		local($ex)=($target =~ /O_SSL/)?' $(L_CRYPTO)':'';
		$ex.=' -lsocket';
		$ret.="\t\$(LINK) \$(SHLIB_CFLAGS) \$(MLFLAGS) $efile$target \$(SHLIB_EX_OBJ) \$(${Name}OBJ) $ex os2/${Name}.def\n";
		$ret.="\temximp -o $out_def/$name.a os2/${Name}.def\n";
		$ret.="\temximp -o $out_def/$name.lib os2/${Name}.def\n\n";
		}
d92 1
a92 1
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n\n";
@


1.1.1.3
log
@import openssl-0.9.7d
@
text
@d6 2
a7 2
$o='/';
$cp='cp';
a9 2
$preamble = "SHELL=sh\n";

d51 18
a68 18
	$bn_asm_obj="crypto/bn/asm/bn-os2$obj crypto/bn/asm/co-os2$obj";
	$bn_asm_src="crypto/bn/asm/bn-os2.asm crypto/bn/asm/co-os2.asm";
	$des_enc_obj="crypto/des/asm/d-os2$obj crypto/des/asm/y-os2$obj";
	$des_enc_src="crypto/des/asm/d-os2.asm crypto/des/asm/y-os2.asm";
	$bf_enc_obj="crypto/bf/asm/b-os2$obj";
	$bf_enc_src="crypto/bf/asm/b-os2.asm";
	$cast_enc_obj="crypto/cast/asm/c-os2$obj";
	$cast_enc_src="crypto/cast/asm/c-os2.asm";
	$rc4_enc_obj="crypto/rc4/asm/r4-os2$obj";
	$rc4_enc_src="crypto/rc4/asm/r4-os2.asm";
	$rc5_enc_obj="crypto/rc5/asm/r5-os2$obj";
	$rc5_enc_src="crypto/rc5/asm/r5-os2.asm";
	$md5_asm_obj="crypto/md5/asm/m5-os2$obj";
	$md5_asm_src="crypto/md5/asm/m5-os2.asm";
	$sha1_asm_obj="crypto/sha/asm/s1-os2$obj";
	$sha1_asm_src="crypto/sha/asm/s1-os2.asm";
	$rmd160_asm_obj="crypto/ripemd/asm/rm-os2$obj";
	$rmd160_asm_src="crypto/ripemd/asm/rm-os2.asm";
@


1.1.1.4
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@d51 1
a51 1
if (!$no_asm && !$fips)
d109 1
a109 1
	local($target,$files,$dep_libs,$libs,$sha1file,$openssl)=@@_;
d115 1
a115 6
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n";
	if (defined $sha1file)
		{
		$ret.="\t$openssl sha1 -hmac etaonrishdlcupfm -binary $target > $sha1file";
		}
	$ret.="\n";
@


1.1.1.5
log
@import of openssl-0.9.7j
@
text
@a70 1
	$cflags.=" -DBN_ASM -DMD5_ASM -DSHA1_ASM -DOPENSSL_BN_ASM_PART_WORDS";
@


1.1.1.6
log
@import of OpenSSL 0.9.8h
@
text
@d51 1
a51 1
if (!$no_asm)
d110 1
a110 1
	local($target,$files,$dep_libs,$libs)=@@_;
d116 6
a121 1
	$ret.="\t\$(LINK) ${efile}$target \$(CFLAG) \$(LFLAGS) $files $libs\n\n";
@


