head	1.10;
access;
symbols
	butholakala:1.9
	openssl_1_0_1_g:1.1.1.7
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	openssl_1_0_1_c:1.1.1.7
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	openssl_1_0_0_f:1.1.1.7
	openssl_1_0_0_e:1.1.1.7
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	openssh_1_0_0_a:1.1.1.7
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	openssl_0_9_8_k:1.1.1.6
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	openssl_0_9_8_j:1.1.1.6
	openssl_0_9_8_h:1.1.1.5
	pre_openssl_0_9_8h:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	openssl_0_9_7j:1.1.1.4
	openssl:1.1.1
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENSSL_0_9_7G:1.1.1.3
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENSSL_0_9_7D:1.1.1.2
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENSSL_0_9_7C:1.1.1.2
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENSSL_0_9_7B:1.1.1.2
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENSSL_0_9_7_STABLE_SNAP_20020911:1.1.1.2
	OPENSSL_0_9_7_BETA3:1.1.1.2
	OPENSSL_0_9_7_BETA1:1.1.1.1
	OPENSSL:1.1.1
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2014.04.17.19.20.52;	author afresh1;	state dead;
branches;
next	1.9;

1.9
date	2010.10.01.22.59.01;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.09.12.15.52;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.12.17.54;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.27.05.07.03;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.29.05.39.33;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.16.31.57;	author markus;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.22.00.03.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.02.58.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.04.37.41;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.09.05.12.51.50;	author markus;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.09.05.22.45.16;	author markus;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.04.29.05.37.32;	author djm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.06.27.05.05.40;	author djm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.06.12.15.53;	author djm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.01.09.12.14.09;	author djm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.10.01.22.54.18;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove unused ssl utils

This code is the reason perl has a name as a write only language.

ok deraadt miod
@
text
@#!/usr/local/bin/perl

# mklink.pl

# The first command line argument is a non-empty relative path
# specifying the "from" directory.
# Each other argument is a file name not containing / and
# names a file in the current directory.
#
# For each of these files, we create in the "from" directory a link
# of the same name pointing to the local file.
#
# We assume that the directory structure is a tree, i.e. that it does
# not contain symbolic links and that the parent of / is never referenced.
# Apart from this, this script should be able to handle even the most
# pathological cases.

use Cwd;

my $from = shift;
my @@files = @@ARGV;

my @@from_path = split(/[\\\/]/, $from);
my $pwd = getcwd();
chomp($pwd);
my @@pwd_path = split(/[\\\/]/, $pwd);

my @@to_path = ();

my $dirname;
foreach $dirname (@@from_path) {

    # In this loop, @@to_path always is a relative path from
    # @@pwd_path (interpreted is an absolute path) to the original pwd.

    # At the end, @@from_path (as a relative path from the original pwd)
    # designates the same directory as the absolute path @@pwd_path,
    # which means that @@to_path then is a path from there to the original pwd.

    next if ($dirname eq "" || $dirname eq ".");

    if ($dirname eq "..") {
	@@to_path = (pop(@@pwd_path), @@to_path);
    } else {
	@@to_path = ("..", @@to_path);
	push(@@pwd_path, $dirname);
    }
}

my $to = join('/', @@to_path);

my $file;
$symlink_exists=eval {symlink("",""); 1};
if ($^O eq "msys") { $symlink_exists=0 };
foreach $file (@@files) {
    my $err = "";
    if ($symlink_exists) {
	unlink "$from/$file";
	symlink("$to/$file", "$from/$file") or $err = " [$!]";
    } else {
	unlink "$from/$file"; 
	open (OLD, "<$file") or die "Can't open $file: $!";
	open (NEW, ">$from/$file") or die "Can't open $from/$file: $!";
	binmode(OLD);
	binmode(NEW);
	while (<OLD>) {
	    print NEW $_;
	}
	close (OLD) or die "Can't close $file: $!";
	close (NEW) or die "Can't close $from/$file: $!";
    }
    print $file . " => $from/$file$err\n";
}
@


1.9
log
@resolve conflicts, fix local changes
@
text
@@


1.8
log
@resolve conflicts
@
text
@d18 1
a18 10
my $pwd;
eval 'use Cwd;';
if ($@@)
	{
	$pwd = `pwd`;
	}
else
	{
	$pwd = getcwd();
	}
d24 1
d54 1
@


1.7
log
@resolve conflicts
@
text
@d18 10
a27 1
use Cwd;
a32 1
my $pwd = getcwd();
@


1.6
log
@resolve conflicts
@
text
@a16 1
#
@


1.5
log
@resolve conflicts
@
text
@d17 3
d25 2
a26 2
my $pwd = `pwd`;
chop($pwd);
@


1.4
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d55 1
@


1.3
log
@openssl-engine-0.9.6a merge
@
text
@d21 1
a21 1
my @@from_path = split(/\//, $from);
d24 1
a24 1
my @@pwd_path = split(/\//, $pwd);
d57 10
a66 1
	system ("cp", "$file", "$from/$file") and $err = " [$!]";
@


1.2
log
@openssl-engine-0.9.6 merge
@
text
@d51 1
d54 5
a58 1
    symlink("$to/$file", "$from/$file") or $err = " [$!]";
@


1.1
log
@OpenSSL 0.9.4 merge
@
text
@d52 3
a54 3
#    print "ln -s $to/$file $from/$file\n";
    symlink("$to/$file", "$from/$file");
    print $file . " => $from/$file\n";
@


1.1.1.1
log
@import openssl-0.9.7-beta1
@
text
@a50 1
$symlink_exists=eval {symlink("",""); 1};
d52 3
a54 7
    my $err = "";
    if ($symlink_exists) {
	symlink("$to/$file", "$from/$file") or $err = " [$!]";
    } else {
	system ("cp", "$file", "$from/$file") and $err = " [$!]";
    }
    print $file . " => $from/$file$err\n";
@


1.1.1.2
log
@import openssl-0.9.7-beta3
@
text
@d21 1
a21 1
my @@from_path = split(/[\\\/]/, $from);
d24 1
a24 1
my @@pwd_path = split(/[\\\/]/, $pwd);
d57 1
a57 10
	unlink "$from/$file"; 
	open (OLD, "<$file") or die "Can't open $file: $!";
	open (NEW, ">$from/$file") or die "Can't open $from/$file: $!";
	binmode(OLD);
	binmode(NEW);
	while (<OLD>) {
	    print NEW $_;
	}
	close (OLD) or die "Can't close $file: $!";
	close (NEW) or die "Can't close $from/$file: $!";
@


1.1.1.3
log
@import of openssl-0.9.7g; tested on platforms from alpha to zaurus, ok deraadt@@
@
text
@a54 1
	unlink "$from/$file";
@


1.1.1.4
log
@import of openssl-0.9.7j
@
text
@a16 3
#

use Cwd;
d22 2
a23 2
my $pwd = getcwd();
chomp($pwd);
@


1.1.1.5
log
@import of OpenSSL 0.9.8h
@
text
@d17 1
@


1.1.1.6
log
@import openssl-0.9.8j
@
text
@d18 1
a18 10
my $pwd;
eval 'use Cwd;';
if ($@@)
	{
	$pwd = `pwd`;
	}
else
	{
	$pwd = getcwd();
	}
d24 1
@


1.1.1.7
log
@import OpenSSL-1.0.0a
@
text
@d18 10
a27 1
use Cwd;
a32 1
my $pwd = getcwd();
a61 1
if ($^O eq "msys") { $symlink_exists=0 };
@


