head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21;
locks; strict;
comment	@ * @;


1.22
date	2017.08.27.02.58.04;	author doug;	state Exp;
branches;
next	1.21;
commitid	ikdPaeGDYdNSGQfX;

1.21
date	2017.02.07.02.08.38;	author beck;	state Exp;
branches;
next	1.20;
commitid	xH3OeartUDKSlAnB;

1.20
date	2017.01.26.12.16.13;	author beck;	state Exp;
branches;
next	1.19;
commitid	lb4UTPLS9Casn2PL;

1.19
date	2017.01.26.10.40.21;	author beck;	state Exp;
branches;
next	1.18;
commitid	Bi1VygMenL4YtCp7;

1.18
date	2017.01.24.15.04.12;	author jsing;	state Exp;
branches;
next	1.17;
commitid	aMjlYSO7tAuwLGon;

1.17
date	2017.01.23.06.45.30;	author beck;	state Exp;
branches;
next	1.16;
commitid	grTXB43OAHDwwKOU;

1.16
date	2017.01.23.05.13.02;	author jsing;	state Exp;
branches;
next	1.15;
commitid	XWcFqNClp2MoKERU;

1.15
date	2015.07.31.00.35.06;	author doug;	state Exp;
branches;
next	1.14;
commitid	7Kd2QUoijbWpz7QJ;

1.14
date	2015.07.17.17.36.24;	author doug;	state Exp;
branches;
next	1.13;
commitid	4A1FZfzbj7GfvPA4;

1.13
date	2015.07.15.21.52.02;	author beck;	state Exp;
branches;
next	1.12;
commitid	jJhmu7uxSvJIDi81;

1.12
date	2015.07.14.03.38.26;	author doug;	state Exp;
branches;
next	1.11;
commitid	ClU0QmPPkFs7NYjp;

1.11
date	2014.12.14.15.30.50;	author jsing;	state Exp;
branches;
next	1.10;
commitid	XNZawfRSWvnVv1VS;

1.10
date	2014.11.27.16.07.33;	author jsing;	state Exp;
branches;
next	1.9;
commitid	aLRPRTr9Z1ajZjoz;

1.9
date	2014.11.16.14.12.47;	author jsing;	state Exp;
branches;
next	1.8;
commitid	M3pvHgIFoWUHNqJn;

1.8
date	2014.07.14.08.21.47;	author miod;	state Exp;
branches;
next	1.7;
commitid	GADMAz9p0gLu0ofq;

1.7
date	2014.06.29.12.25.47;	author jsing;	state Exp;
branches;
next	1.6;
commitid	i80mwlNVWRjO4t6V;

1.6
date	2014.06.28.18.05.27;	author logan;	state Exp;
branches;
next	1.5;
commitid	dRQZgfA4BZ9lfMmd;

1.5
date	2014.06.12.15.49.31;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	mJUVYpkFBZ0Zv2bG;

1.4
date	2014.05.30.14.30.50;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.19.08.52.32;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.14.14.16.33;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.13.21.23.49;	author djm;	state Exp;
branches
	1.1.1.1.4.1
	1.1.1.1.8.1;
next	1.1.1.2;

1.1.1.2
date	2014.04.13.15.16.36;	author miod;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	2014.10.19.16.21.56;	author tedu;	state Exp;
branches;
next	;
commitid	GrEje0Z4TDO3Yx0d;

1.1.1.1.8.1
date	2014.10.19.16.21.04;	author tedu;	state Exp;
branches;
next	;
commitid	P1Mj4xFbkJxaKkV0;


desc
@@


1.22
log
@Rewrite SRTP extension using CBB/CBS and the new extension framework.

input + ok beck@@, jsing@@
@
text
@/* $OpenBSD: d1_srtp.c,v 1.21 2017/02/07 02:08:38 beck Exp $ */
/* Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@@cryptsoft.com).
 *
 */
/*
 * DTLS code by Eric Rescorla <ekr@@rtfm.com>
 *
 * Copyright (C) 2006, Network Resonance, Inc.
 * Copyright (C) 2011, RTFM, Inc.
 */

#include <stdio.h>

#include <openssl/objects.h>

#include "ssl_locl.h"

#ifndef OPENSSL_NO_SRTP

#include "bytestring.h"
#include "srtp.h"

static SRTP_PROTECTION_PROFILE srtp_known_profiles[] = {
	{
		"SRTP_AES128_CM_SHA1_80",
		SRTP_AES128_CM_SHA1_80,
	},
	{
		"SRTP_AES128_CM_SHA1_32",
		SRTP_AES128_CM_SHA1_32,
	},
	{0}
};

int
srtp_find_profile_by_name(char *profile_name, SRTP_PROTECTION_PROFILE **pptr,
    unsigned len)
{
	SRTP_PROTECTION_PROFILE *p;

	p = srtp_known_profiles;
	while (p->name) {
		if ((len == strlen(p->name)) &&
		    !strncmp(p->name, profile_name, len)) {
			*pptr = p;
			return 0;
		}

		p++;
	}

	return 1;
}

int
srtp_find_profile_by_num(unsigned profile_num, SRTP_PROTECTION_PROFILE **pptr)
{
	SRTP_PROTECTION_PROFILE *p;

	p = srtp_known_profiles;
	while (p->name) {
		if (p->id == profile_num) {
			*pptr = p;
			return 0;
		}
		p++;
	}

	return 1;
}

static int
ssl_ctx_make_profiles(const char *profiles_string,
    STACK_OF(SRTP_PROTECTION_PROFILE) **out)
{
	STACK_OF(SRTP_PROTECTION_PROFILE) *profiles;

	char *col;
	char *ptr = (char *)profiles_string;

	SRTP_PROTECTION_PROFILE *p;

	if (!(profiles = sk_SRTP_PROTECTION_PROFILE_new_null())) {
		SSLerrorx(SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES);
		return 1;
	}

	do {
		col = strchr(ptr, ':');

		if (!srtp_find_profile_by_name(ptr, &p,
		    col ? col - ptr : (int)strlen(ptr))) {
			sk_SRTP_PROTECTION_PROFILE_push(profiles, p);
		} else {
			SSLerrorx(SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
			sk_SRTP_PROTECTION_PROFILE_free(profiles);
			return 1;
		}

		if (col)
			ptr = col + 1;
	} while (col);

	*out = profiles;

	return 0;
}

int
SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles)
{
	return ssl_ctx_make_profiles(profiles, &ctx->internal->srtp_profiles);
}

int
SSL_set_tlsext_use_srtp(SSL *s, const char *profiles)
{
	return ssl_ctx_make_profiles(profiles, &s->internal->srtp_profiles);
}


STACK_OF(SRTP_PROTECTION_PROFILE) *
SSL_get_srtp_profiles(SSL *s)
{
	if (s != NULL) {
		if (s->internal->srtp_profiles != NULL) {
			return s->internal->srtp_profiles;
		} else if ((s->ctx != NULL) &&
		    (s->ctx->internal->srtp_profiles != NULL)) {
			return s->ctx->internal->srtp_profiles;
		}
	}

	return NULL;
}

SRTP_PROTECTION_PROFILE *
SSL_get_selected_srtp_profile(SSL *s)
{
	return s->internal->srtp_profile;
}

#endif
@


1.21
log
@Change SSLerror() back to taking two args, with the first one being an SSL *.
Make a table of "function codes" which maps the internal state of the SSL *
to something like a useful name so in a typical error in the connection you
know in what sort of place in the handshake things happened. (instead of
by arcane function name).
Add SSLerrorx() for when we don't have an SSL *
ok jsing@@ after us both being prodded by bluhm@@ to make it not terrible
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.20 2017/01/26 12:16:13 beck Exp $ */
d141 2
a142 2
static int
find_profile_by_name(char *profile_name, SRTP_PROTECTION_PROFILE **pptr,
d161 2
a162 2
static int
find_profile_by_num(unsigned profile_num, SRTP_PROTECTION_PROFILE **pptr)
d197 1
a197 1
		if (!find_profile_by_name(ptr, &p,
a246 208
}

/* Note: this function returns 0 length if there are no
   profiles specified */
int
ssl_add_clienthello_use_srtp_ext(SSL *s, unsigned char *p, int *len, int maxlen)
{
	int ct = 0;
	int i;
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt = 0;
	SRTP_PROTECTION_PROFILE *prof;

	clnt = SSL_get_srtp_profiles(s);

	ct = sk_SRTP_PROTECTION_PROFILE_num(clnt); /* -1 if clnt == 0 */

	if (p) {
		if (ct == 0) {
			SSLerror(s, SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
			return 1;
		}

		if ((2 + ct * 2 + 1) > maxlen) {
			SSLerror(s, SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
			return 1;
		}

		/* Add the length */
		s2n(ct * 2, p);
		for (i = 0; i < ct; i++) {
			prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);
			s2n(prof->id, p);
		}

		/* Add an empty use_mki value */
		*p++ = 0;
	}

	*len = 2 + ct*2 + 1;

	return 0;
}


int
ssl_parse_clienthello_use_srtp_ext(SSL *s, const unsigned char *d, int len,
    int *al)
{
	SRTP_PROTECTION_PROFILE *cprof, *sprof;
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt = 0, *srvr;
	int i, j;
	int ret = 1;
	uint16_t id;
	CBS cbs, ciphers, mki;

	if (len < 0) {
		SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		goto done;
	}

	CBS_init(&cbs, d, len);
	/* Pull off the cipher suite list */
	if (!CBS_get_u16_length_prefixed(&cbs, &ciphers) ||
	    CBS_len(&ciphers) % 2) {
		SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		goto done;
	}

	clnt = sk_SRTP_PROTECTION_PROFILE_new_null();

	while (CBS_len(&ciphers) > 0) {
		if (!CBS_get_u16(&ciphers, &id)) {
			SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
			*al = SSL_AD_DECODE_ERROR;
			goto done;
		}

		if (!find_profile_by_num(id, &cprof))
			sk_SRTP_PROTECTION_PROFILE_push(clnt, cprof);
		else
			; /* Ignore */
	}

	/* Extract the MKI value as a sanity check, but discard it for now. */
	if (!CBS_get_u8_length_prefixed(&cbs, &mki) ||
	    CBS_len(&cbs) != 0) {
		SSLerror(s, SSL_R_BAD_SRTP_MKI_VALUE);
		*al = SSL_AD_DECODE_ERROR;
		goto done;
	}

	srvr = SSL_get_srtp_profiles(s);

	/*
	 * Pick our most preferred profile. If no profiles have been
	 * configured then the outer loop doesn't run
	 * (sk_SRTP_PROTECTION_PROFILE_num() = -1)
	 * and so we just return without doing anything.
	 */
	for (i = 0; i < sk_SRTP_PROTECTION_PROFILE_num(srvr); i++) {
		sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);

		for (j = 0; j < sk_SRTP_PROTECTION_PROFILE_num(clnt); j++) {
			cprof = sk_SRTP_PROTECTION_PROFILE_value(clnt, j);

			if (cprof->id == sprof->id) {
				s->internal->srtp_profile = sprof;
				*al = 0;
				ret = 0;
				goto done;
			}
		}
	}

	ret = 0;

done:
	sk_SRTP_PROTECTION_PROFILE_free(clnt);

	return ret;
}

int
ssl_add_serverhello_use_srtp_ext(SSL *s, unsigned char *p, int *len, int maxlen)
{
	if (p) {
		if (maxlen < 5) {
			SSLerror(s, SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
			return 1;
		}

		if (s->internal->srtp_profile == 0) {
			SSLerror(s, SSL_R_USE_SRTP_NOT_NEGOTIATED);
			return 1;
		}
		s2n(2, p);
		s2n(s->internal->srtp_profile->id, p);
		*p++ = 0;
	}
	*len = 5;

	return 0;
}


int
ssl_parse_serverhello_use_srtp_ext(SSL *s, const unsigned char *d, int len, int *al)
{
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt;
	SRTP_PROTECTION_PROFILE *prof;
	int i;
	uint16_t id;
	CBS cbs, profile_ids, mki;

	if (len < 0) {
		SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		return 1;
	}

	CBS_init(&cbs, d, len);

	/*
	 * As per RFC 5764 section 4.1.1, server response MUST be a single
	 * profile id.
	 */
	if (!CBS_get_u16_length_prefixed(&cbs, &profile_ids) ||
	    !CBS_get_u16(&profile_ids, &id) || CBS_len(&profile_ids) != 0) {
		SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		return 1;
	}

	/* Must be no MKI, since we never offer one. */
	if (!CBS_get_u8_length_prefixed(&cbs, &mki) || CBS_len(&mki) != 0) {
		SSLerror(s, SSL_R_BAD_SRTP_MKI_VALUE);
		*al = SSL_AD_ILLEGAL_PARAMETER;
		return 1;
	}

	clnt = SSL_get_srtp_profiles(s);

	/* Throw an error if the server gave us an unsolicited extension. */
	if (clnt == NULL) {
		SSLerror(s, SSL_R_NO_SRTP_PROFILES);
		*al = SSL_AD_DECODE_ERROR;
		return 1;
	}

	/*
	 * Check to see if the server gave us something we support
	 * (and presumably offered).
	 */
	for (i = 0; i < sk_SRTP_PROTECTION_PROFILE_num(clnt); i++) {
		prof = sk_SRTP_PROTECTION_PROFILE_value(clnt, i);

		if (prof->id == id) {
			s->internal->srtp_profile = prof;
			*al = 0;
			return 0;
		}
	}

	SSLerror(s, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
	*al = SSL_AD_DECODE_ERROR;
	return 1;
@


1.20
log
@Finish the fallout of the SSLerr->SSLerror cleanup to get rid of the ugly
line wraps that resulted
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.19 2017/01/26 10:40:21 beck Exp $ */
d190 1
a190 1
		SSLerror(SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES);
d201 1
a201 1
			SSLerror(SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
d265 1
a265 1
			SSLerror(SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
d270 1
a270 1
			SSLerror(SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d303 1
a303 1
		SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d312 1
a312 1
		SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d321 1
a321 1
			SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d335 1
a335 1
		SSLerror(SSL_R_BAD_SRTP_MKI_VALUE);
d376 1
a376 1
			SSLerror(SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d381 1
a381 1
			SSLerror(SSL_R_USE_SRTP_NOT_NEGOTIATED);
d404 1
a404 1
		SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d417 1
a417 1
		SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d424 1
a424 1
		SSLerror(SSL_R_BAD_SRTP_MKI_VALUE);
d433 1
a433 1
		SSLerror(SSL_R_NO_SRTP_PROFILES);
d452 1
a452 1
	SSLerror(SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
@


1.19
log
@Send the error function codes to rot in the depths of hell where they belong
We leave a single funciton code (0xFFF) to say "SSL_internal" so the public
API will not break, and we replace all internal use of the two argument
SSL_err() with the internal only SSL_error() that only takes a reason code.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.18 2017/01/24 15:04:12 jsing Exp $ */
d190 1
a190 2
		SSLerror(
		    SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES);
d201 1
a201 2
			SSLerror(
			    SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
d265 1
a265 2
			SSLerror(
			    SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
d270 1
a270 2
			SSLerror(
			    SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d303 1
a303 2
		SSLerror(
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d312 1
a312 2
		SSLerror(
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d321 1
a321 2
			SSLerror(
			    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d335 1
a335 2
		SSLerror(
		    SSL_R_BAD_SRTP_MKI_VALUE);
d376 1
a376 2
			SSLerror(
			    SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d381 1
a381 2
			SSLerror(
			    SSL_R_USE_SRTP_NOT_NEGOTIATED);
d404 1
a404 2
		SSLerror(
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d417 1
a417 2
		SSLerror(
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d424 1
a424 2
		SSLerror(
		    SSL_R_BAD_SRTP_MKI_VALUE);
d433 1
a433 2
		SSLerror(
		    SSL_R_NO_SRTP_PROFILES);
d452 1
a452 2
	SSLerror(
	    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
@


1.18
log
@sk_free() checks for NULL so do not bother doing it from the callers.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.17 2017/01/23 06:45:30 beck Exp $ */
d190 1
a190 1
		SSLerr(SSL_F_SSL_CTX_MAKE_PROFILES,
d202 1
a202 1
			SSLerr(SSL_F_SSL_CTX_MAKE_PROFILES,
d267 1
a267 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT,
d273 1
a273 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT,
d307 1
a307 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
d317 1
a317 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
d327 1
a327 1
			SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
d342 1
a342 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
d384 1
a384 1
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT,
d390 1
a390 1
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT,
d414 1
a414 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,
d428 1
a428 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,
d436 1
a436 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,
d446 1
a446 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,
d466 1
a466 1
	SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,
@


1.17
log
@Move a large part of ssl_st into internal, so we can see what squeals.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.16 2017/01/23 05:13:02 jsing Exp $ */
d374 1
a374 2
	if (clnt)
		sk_SRTP_PROTECTION_PROFILE_free(clnt);
@


1.16
log
@Move most of the fields in SSL_CTX to internal - the ones that remain are
known to be in use.

ok beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.15 2015/07/31 00:35:06 doug Exp $ */
d226 1
a226 1
	return ssl_ctx_make_profiles(profiles, &s->srtp_profiles);
d234 2
a235 2
		if (s->srtp_profiles != NULL) {
			return s->srtp_profiles;
d248 1
a248 1
	return s->srtp_profile;
d363 1
a363 1
				s->srtp_profile = sprof;
d390 1
a390 1
		if (s->srtp_profile == 0) {
d396 1
a396 1
		s2n(s->srtp_profile->id, p);
d461 1
a461 1
			s->srtp_profile = prof;
@


1.15
log
@Fix SRTP parsing.

jsing@@ noticed that during the CBS conversion, an extra CBS_len
comparison was introduced.  It should be 0 after extracting MKI.

ok jsing@@ bcook@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.14 2015/07/17 17:36:24 doug Exp $ */
d220 1
a220 1
	return ssl_ctx_make_profiles(profiles, &ctx->srtp_profiles);
d237 2
a238 2
		    (s->ctx->srtp_profiles != NULL)) {
			return s->ctx->srtp_profiles;
@


1.14
log
@Convert ssl_parse_serverhello_use_srtp_ext to CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.13 2015/07/15 21:52:02 beck Exp $ */
d316 1
a316 2
	    CBS_len(&ciphers) % 2 ||
	    CBS_len(&cbs) != 0) {
@


1.13
log
@test for n<0 before use in CBS_init - mostly to shut up coverity.
reluctant ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.12 2015/07/14 03:38:26 doug Exp $ */
d407 1
a407 1
ssl_parse_serverhello_use_srtp_ext(SSL *s, unsigned char *d, int len, int *al)
a410 1
	unsigned id;
d412 2
a413 1
	int ct;
d415 1
a415 1
	if (len != 5) {
d422 8
a429 2
	n2s(d, ct);
	if (ct != 2) {
d436 2
a437 3
	n2s(d, id);
	if (*d) {
		/* Must be no MKI, since we never offer one. */
@


1.12
log
@Convert ssl_parse_clienthello_use_srtp_ext to CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.11 2014/12/14 15:30:50 jsing Exp $ */
d306 7
a313 1

d315 1
a315 2
	if (len < 0 ||
	    !CBS_get_u16_length_prefixed(&cbs, &ciphers) ||
@


1.11
log
@Remove trailing whitespace.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.10 2014/11/27 16:07:33 jsing Exp $ */
d126 1
a128 1

d296 2
a297 1
ssl_parse_clienthello_use_srtp_ext(SSL *s, unsigned char *d, int len, int *al)
a300 2
	int ct;
	int mki_len;
a301 1
	int id;
d303 2
d306 1
a306 19
	/* Length value + the MKI length */
	if (len < 3) {
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		goto done;
	}

	/* Pull off the length of the cipher suite list */
	n2s(d, ct);
	len -= 2;

	/* Check that it is even */
	if (ct % 2) {
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,
		    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al = SSL_AD_DECODE_ERROR;
		goto done;
	}
d308 5
a312 2
	/* Check that lengths are consistent */
	if (len < (ct + 1)) {
a318 1

d321 7
a327 4
	while (ct) {
		n2s(d, id);
		ct -= 2;
		len -= 2;
d329 1
a329 1
		if (!find_profile_by_num(id, &cprof)) {
d331 1
a331 1
		} else {
a332 1
		}
d336 2
a337 5
	mki_len = *d;
	d++;
	len--;

	if (mki_len != len) {
@


1.10
log
@Avoid a double-free in an error path.

Reported by Felix Groebert of the Google Security Team.

ok beck@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.9 2014/11/16 14:12:47 jsing Exp $ */
d8 1
a8 1
 * 
d15 1
a15 1
 * 
d22 1
a22 1
 * 
d37 1
a37 1
 * 4. If you include any Windows specific code (or a derivative thereof) from 
d40 1
a40 1
 * 
d52 1
a52 1
 * 
d66 1
a66 1
 *    notice, this list of conditions and the following disclaimer. 
d251 1
a251 1
/* Note: this function returns 0 length if there are no 
@


1.9
log
@Sort and group includes.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.8 2014/07/14 08:21:47 miod Exp $ */
a357 1
		sk_SRTP_PROTECTION_PROFILE_free(clnt);
@


1.8
log
@Fix memory leak upon error in ssl_parse_clienthello_use_srtp_ext().
From BoringSSL.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.7 2014/06/29 12:25:47 jsing Exp $ */
d119 1
d121 1
@


1.7
log
@More KNF.
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.6 2014/06/28 18:05:27 logan Exp $ */
d302 1
a302 1
	int ret;
d309 1
a309 1
		return 1;
d321 1
a321 1
		return 1;
d329 1
a329 1
		return 1;
d357 1
a357 1
		return 1;
@


1.6
log
@Fix 2 memory leaks.

(Thanks to Brent Cook)

OK from tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: d1_srtp.c,v 1.5 2014/06/12 15:49:31 deraadt Exp $ */
d127 1
a127 1
static SRTP_PROTECTION_PROFILE srtp_known_profiles[]= {
d188 2
a189 1
		SSLerr(SSL_F_SSL_CTX_MAKE_PROFILES, SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES);
d200 2
a201 1
			SSLerr(SSL_F_SSL_CTX_MAKE_PROFILES, SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
d208 1
a208 1
		} while (col);
d265 2
a266 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT, SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
d271 2
a272 1
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT, SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d306 2
a307 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d318 2
a319 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d326 2
a327 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d347 1
a347 1
	/* Now extract the MKI value as a sanity check, but discard it for now */
d353 2
a354 1
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_MKI_VALUE);
d362 6
a367 4
	/* Pick our most preferred profile. If no profiles have been
	 configured then the outer loop doesn't run 
	 (sk_SRTP_PROTECTION_PROFILE_num() = -1)
	 and so we just return without doing anything */
d397 2
a398 1
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT, SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d403 2
a404 1
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT, SSL_R_USE_SRTP_NOT_NEGOTIATED);
d420 2
a425 3
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt;
	SRTP_PROTECTION_PROFILE *prof;

d427 2
a428 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d435 2
a436 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
d442 4
a445 3
	if (*d)  /* Must be no MKI, since we never offer one */
	{
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_MKI_VALUE);
d452 1
a452 1
	/* Throw an error if the server gave us an unsolicited extension */
d454 2
a455 1
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, SSL_R_NO_SRTP_PROFILES);
d460 4
a463 3
	/* Check to see if the server gave us something we support
	   (and presumably offered)
	*/
d474 2
a475 1
	SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT, SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
@


1.5
log
@tags as requested by miod and tedu
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d200 1
d348 1
@


1.4
log
@remove some #if 0 code. we don't need any more reminders that we're using
a not quite appropriate data structure. ok jsing
@
text
@d1 1
a1 1
/* ssl/t1_lib.c */
@


1.3
log
@More KNF and style consistency tweaks
@
text
@a135 10
#if 0
	{
		"SRTP_NULL_SHA1_80",
		SRTP_NULL_SHA1_80,
	},
	{
		"SRTP_NULL_SHA1_32",
		SRTP_NULL_SHA1_32,
	},
#endif
@


1.2
log
@First pass at applying KNF to the OpenSSL code, which almost makes it
readable. This pass is whitespace only and can readily be verified using
tr and md5.
@
text
@d112 5
a116 5
  DTLS code by Eric Rescorla <ekr@@rtfm.com>

  Copyright (C) 2006, Network Resonance, Inc.
  Copyright (C) 2011, RTFM, Inc.
*/
d235 2
a236 2
STACK_OF(SRTP_PROTECTION_PROFILE)
*SSL_get_srtp_profiles(SSL *s)
d250 2
a251 2
SRTP_PROTECTION_PROFILE
*SSL_get_selected_srtp_profile(SSL *s)
@


1.1
log
@Initial revision
@
text
@a117 2
#ifndef OPENSSL_NO_SRTP

d121 3
d127 9
a135 10
static SRTP_PROTECTION_PROFILE srtp_known_profiles[]=
    {
    {
    "SRTP_AES128_CM_SHA1_80",
    SRTP_AES128_CM_SHA1_80,
    },
    {
    "SRTP_AES128_CM_SHA1_32",
    SRTP_AES128_CM_SHA1_32,
    },
d137 8
a144 8
    {
    "SRTP_NULL_SHA1_80",
    SRTP_NULL_SHA1_80,
    },
    {
    "SRTP_NULL_SHA1_32",
    SRTP_NULL_SHA1_32,
    },
d146 2
a147 2
    {0}
    };
d149 4
a152 3
static int find_profile_by_name(char *profile_name,
				SRTP_PROTECTION_PROFILE **pptr,unsigned len)
	{
d155 5
a159 7
	p=srtp_known_profiles;
	while(p->name)
		{
		if((len == strlen(p->name)) && !strncmp(p->name,profile_name,
							len))
			{
			*pptr=p;
d161 1
a161 1
			}
d164 1
a164 1
		}
d167 1
a167 1
	}
d169 3
a171 3
static int find_profile_by_num(unsigned profile_num,
			       SRTP_PROTECTION_PROFILE **pptr)
	{
d174 4
a177 6
	p=srtp_known_profiles;
	while(p->name)
		{
		if(p->id == profile_num)
			{
			*pptr=p;
d179 1
a179 1
			}
d181 1
a181 1
		}
d184 1
a184 1
	}
d186 4
a189 2
static int ssl_ctx_make_profiles(const char *profiles_string,STACK_OF(SRTP_PROTECTION_PROFILE) **out)
	{
d193 2
a194 2
	char *ptr=(char *)profiles_string;
    
d197 1
a197 2
	if(!(profiles=sk_SRTP_PROTECTION_PROFILE_new_null()))
		{
d200 11
a211 15
    
	do
		{
		col=strchr(ptr,':');

		if(!find_profile_by_name(ptr,&p,
					 col ? col-ptr : (int)strlen(ptr)))
			{
			sk_SRTP_PROTECTION_PROFILE_push(profiles,p);
			}
		else
			{
			SSLerr(SSL_F_SSL_CTX_MAKE_PROFILES,SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE);
			return 1;
			}
d213 2
a214 1
		if(col) ptr=col+1;
d217 2
a218 2
	*out=profiles;
    
d220 1
a220 6
	}
    
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx,const char *profiles)
	{
	return ssl_ctx_make_profiles(profiles,&ctx->srtp_profiles);
	}
d222 18
a239 12
int SSL_set_tlsext_use_srtp(SSL *s,const char *profiles)
	{
	return ssl_ctx_make_profiles(profiles,&s->srtp_profiles);
	}


STACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *s)
	{
	if(s != NULL)
		{
		if(s->srtp_profiles != NULL)
			{
d241 2
a242 4
			}
		else if((s->ctx != NULL) &&
			(s->ctx->srtp_profiles != NULL))
			{
a243 1
			}
d245 1
d248 1
a248 1
	}
d250 3
a252 2
SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s)
	{
d254 1
a254 1
	}
d258 4
a261 3
int ssl_add_clienthello_use_srtp_ext(SSL *s, unsigned char *p, int *len, int maxlen)
	{
	int ct=0;
d263 1
a263 1
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt=0;
d265 8
a272 9
    
	clnt=SSL_get_srtp_profiles(s);    
	ct=sk_SRTP_PROTECTION_PROFILE_num(clnt); /* -1 if clnt == 0 */

	if(p)
		{
		if(ct==0)
			{
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT,SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST);
d274 1
a274 1
			}
d276 2
a277 3
		if((2 + ct*2 + 1) > maxlen)
			{
			SSLerr(SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT,SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d279 8
a286 1
			}
d288 3
a290 7
                /* Add the length */
                s2n(ct * 2, p);
		for(i=0;i<ct;i++)
			{
			prof=sk_SRTP_PROTECTION_PROFILE_value(clnt,i);
			s2n(prof->id,p);
			}
d292 1
a292 3
                /* Add an empty use_mki value */
                *p++ = 0;
		}
a293 2
	*len=2 + ct*2 + 1;
    
d295 1
a295 1
	}
d298 8
a305 7
int ssl_parse_clienthello_use_srtp_ext(SSL *s, unsigned char *d, int len,int *al)
	{
	SRTP_PROTECTION_PROFILE *cprof,*sprof;
	STACK_OF(SRTP_PROTECTION_PROFILE) *clnt=0,*srvr;
        int ct;
        int mki_len;
	int i,j;
d309 4
a312 5
         /* Length value + the MKI length */
        if(len < 3)
		{            
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al=SSL_AD_DECODE_ERROR;
d314 1
a314 1
                }
d316 8
a323 9
        /* Pull off the length of the cipher suite list */
        n2s(d, ct);
        len -= 2;
        
        /* Check that it is even */
	if(ct%2)
		{
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al=SSL_AD_DECODE_ERROR;
d325 6
a330 7
		}
        
        /* Check that lengths are consistent */
	if(len < (ct + 1)) 
		{
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al=SSL_AD_DECODE_ERROR;
d332 2
a333 1
		}
d335 1
a335 2
        
	clnt=sk_SRTP_PROTECTION_PROFILE_new_null();
d337 8
a344 12
	while(ct)
		{
		n2s(d,id);
		ct-=2;
                len-=2;

		if(!find_profile_by_num(id,&cprof))
			{
			sk_SRTP_PROTECTION_PROFILE_push(clnt,cprof);
			}
		else
			{
a345 1
			}
d347 1
d349 8
a356 8
        /* Now extract the MKI value as a sanity check, but discard it for now */
        mki_len = *d;
        d++; len--;

        if (mki_len != len)
		{
		SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_MKI_VALUE);
		*al=SSL_AD_DECODE_ERROR;
d358 1
a358 1
		}
d360 1
a360 1
	srvr=SSL_get_srtp_profiles(s);
d366 10
a375 13
	for(i=0;i<sk_SRTP_PROTECTION_PROFILE_num(srvr);i++)
		{
		sprof=sk_SRTP_PROTECTION_PROFILE_value(srvr,i);

		for(j=0;j<sk_SRTP_PROTECTION_PROFILE_num(clnt);j++)
			{
			cprof=sk_SRTP_PROTECTION_PROFILE_value(clnt,j);
            
			if(cprof->id==sprof->id)
				{
				s->srtp_profile=sprof;
				*al=0;
				ret=0;
a376 1
				}
d379 3
a382 2
	ret=0;
    
d384 2
a385 1
	if(clnt) sk_SRTP_PROTECTION_PROFILE_free(clnt);
d388 1
a388 1
	}
d390 6
a395 7
int ssl_add_serverhello_use_srtp_ext(SSL *s, unsigned char *p, int *len, int maxlen)
	{
	if(p)
		{
		if(maxlen < 5)
			{
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT,SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG);
d397 1
a397 1
			}
d399 2
a400 3
		if(s->srtp_profile==0)
			{
			SSLerr(SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT,SSL_R_USE_SRTP_NOT_NEGOTIATED);
a401 4
			}
                s2n(2, p);
		s2n(s->srtp_profile->id,p);
                *p++ = 0;
d403 6
a408 2
	*len=5;
    
d410 2
a411 2
	}
    
d413 3
a415 2
int ssl_parse_serverhello_use_srtp_ext(SSL *s, unsigned char *d, int len,int *al)
	{
d418 1
a418 1
        int ct;
d423 3
a425 4
	if(len!=5)
		{
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al=SSL_AD_DECODE_ERROR;
d427 1
a427 1
		}
d429 4
a432 5
        n2s(d, ct);
	if(ct!=2)
		{
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
		*al=SSL_AD_DECODE_ERROR;
d434 1
a434 1
		}
d436 5
a440 5
	n2s(d,id);
        if (*d)  /* Must be no MKI, since we never offer one */
		{
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_MKI_VALUE);
		*al=SSL_AD_ILLEGAL_PARAMETER;
d442 1
a442 1
		}
d444 1
a444 1
	clnt=SSL_get_srtp_profiles(s);
d447 3
a449 4
	if (clnt == NULL)
		{
		SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,SSL_R_NO_SRTP_PROFILES);
		*al=SSL_AD_DECODE_ERROR;
d451 2
a452 2
		}
    
d456 6
a461 8
	for(i=0;i<sk_SRTP_PROTECTION_PROFILE_num(clnt);i++)
		{
		prof=sk_SRTP_PROTECTION_PROFILE_value(clnt,i);
	    
		if(prof->id == id)
			{
			s->srtp_profile=prof;
			*al=0;
a462 1
			}
d464 1
d466 2
a467 2
	SSLerr(SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT,SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);
	*al=SSL_AD_DECODE_ERROR;
d469 1
a469 2
	}

@


1.1.1.1
log
@import OpenSSL-1.0.1c
@
text
@@


1.1.1.1.4.1
log
@fix two remotely triggerable memory leaks.
tested by jasper
@
text
@a215 1
			sk_SRTP_PROTECTION_PROFILE_free(profiles);
@


1.1.1.1.8.1
log
@fix two remotely triggerable memory leaks.
tested by jasper
@
text
@a215 1
			sk_SRTP_PROTECTION_PROFILE_free(profiles);
@


1.1.1.2
log
@Import OpenSSL 1.0.1g
@
text
@d118 2
a122 3

#ifndef OPENSSL_NO_SRTP

@

