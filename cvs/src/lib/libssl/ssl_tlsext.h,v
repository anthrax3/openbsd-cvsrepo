head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2017.08.27.02.58.04;	author doug;	state Exp;
branches;
next	1.9;
commitid	ikdPaeGDYdNSGQfX;

1.9
date	2017.08.26.20.23.46;	author doug;	state Exp;
branches;
next	1.8;
commitid	7yl9FdUfOogV9Ilm;

1.8
date	2017.08.12.23.38.12;	author beck;	state Exp;
branches;
next	1.7;
commitid	nf7XqEb1xZGamypS;

1.7
date	2017.08.12.21.47.59;	author jsing;	state Exp;
branches;
next	1.6;
commitid	0tuLS2iOujDRqysz;

1.6
date	2017.08.12.21.17.03;	author doug;	state Exp;
branches;
next	1.5;
commitid	zXf2la0VWuLJRKNS;

1.5
date	2017.08.11.20.14.13;	author doug;	state Exp;
branches;
next	1.4;
commitid	JFBUwmGr1qV7bgbV;

1.4
date	2017.08.11.06.30.41;	author jsing;	state Exp;
branches;
next	1.3;
commitid	GH6IzNxlTHY9hDOk;

1.3
date	2017.08.11.05.06.34;	author doug;	state Exp;
branches;
next	1.2;
commitid	d4zLZL34eKazbGrN;

1.2
date	2017.07.24.17.10.31;	author jsing;	state Exp;
branches;
next	1.1;
commitid	R1xjgozDDdxwLxCa;

1.1
date	2017.07.16.18.14.37;	author jsing;	state Exp;
branches;
next	;
commitid	x7hgjU5VqATSUFb2;


desc
@@


1.10
log
@Rewrite SRTP extension using CBB/CBS and the new extension framework.

input + ok beck@@, jsing@@
@
text
@/* $OpenBSD: ssl_tlsext.h,v 1.9 2017/08/26 20:23:46 doug Exp $ */
/*
 * Copyright (c) 2016, 2017 Joel Sing <jsing@@openbsd.org>
 * Copyright (c) 2017 Doug Hogan <doug@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

int tlsext_alpn_clienthello_needs(SSL *s);
int tlsext_alpn_clienthello_build(SSL *s, CBB *cbb);
int tlsext_alpn_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_alpn_serverhello_needs(SSL *s);
int tlsext_alpn_serverhello_build(SSL *s, CBB *cbb);
int tlsext_alpn_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_ri_clienthello_needs(SSL *s);
int tlsext_ri_clienthello_build(SSL *s, CBB *cbb);
int tlsext_ri_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_ri_serverhello_needs(SSL *s);
int tlsext_ri_serverhello_build(SSL *s, CBB *cbb);
int tlsext_ri_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_sigalgs_clienthello_needs(SSL *s);
int tlsext_sigalgs_clienthello_build(SSL *s, CBB *cbb);
int tlsext_sigalgs_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_sigalgs_serverhello_needs(SSL *s);
int tlsext_sigalgs_serverhello_build(SSL *s, CBB *cbb);
int tlsext_sigalgs_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_sni_clienthello_needs(SSL *s);
int tlsext_sni_clienthello_build(SSL *s, CBB *cbb);
int tlsext_sni_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_sni_serverhello_needs(SSL *s);
int tlsext_sni_serverhello_build(SSL *s, CBB *cbb);
int tlsext_sni_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_ec_clienthello_needs(SSL *s);
int tlsext_ec_clienthello_build(SSL *s, CBB *cbb);
int tlsext_ec_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_ec_serverhello_needs(SSL *s);
int tlsext_ec_serverhello_build(SSL *s, CBB *cbb);
int tlsext_ec_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_ecpf_clienthello_needs(SSL *s);
int tlsext_ecpf_clienthello_build(SSL *s, CBB *cbb);
int tlsext_ecpf_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_ecpf_serverhello_needs(SSL *s);
int tlsext_ecpf_serverhello_build(SSL *s, CBB *cbb);
int tlsext_ecpf_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_ocsp_clienthello_needs(SSL *s);
int tlsext_ocsp_clienthello_build(SSL *s, CBB *cbb);
int tlsext_ocsp_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_ocsp_serverhello_needs(SSL *s);
int tlsext_ocsp_serverhello_build(SSL *s, CBB *cbb);
int tlsext_ocsp_serverhello_parse(SSL *s, CBS *cbs, int *alert);

int tlsext_sessionticket_clienthello_needs(SSL *s);
int tlsext_sessionticket_clienthello_build(SSL *s, CBB *cbb);
int tlsext_sessionticket_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_sessionticket_serverhello_needs(SSL *s);
int tlsext_sessionticket_serverhello_build(SSL *s, CBB *cbb);
int tlsext_sessionticket_serverhello_parse(SSL *s, CBS *cbs, int *alert);

#ifndef OPENSSL_NO_SRTP
int tlsext_srtp_clienthello_needs(SSL *s);
int tlsext_srtp_clienthello_build(SSL *s, CBB *cbb);
int tlsext_srtp_clienthello_parse(SSL *s, CBS *cbs, int *alert);
int tlsext_srtp_serverhello_needs(SSL *s);
int tlsext_srtp_serverhello_build(SSL *s, CBB *cbb);
int tlsext_srtp_serverhello_parse(SSL *s, CBS *cbs, int *alert);
#endif

int tlsext_clienthello_build(SSL *s, CBB *cbb);
int tlsext_clienthello_parse_one(SSL *s, CBS *cbs, uint16_t tlsext_type,
    int *alert);

int tlsext_serverhello_build(SSL *s, CBB *cbb);
int tlsext_serverhello_parse_one(SSL *s, CBS *cbs, uint16_t tlsext_type,
    int *alert);
@


1.9
log
@Rewrite ALPN extension using CBB/CBS and the new extension framework.

ok bcook@@ beck@@
input + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.8 2017/08/12 23:38:12 beck Exp $ */
d74 9
@


1.8
log
@Rewrite the TLS status request extension to use the new TLS extension framework.
ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.7 2017/08/12 21:47:59 jsing Exp $ */
d18 7
@


1.7
log
@Convert TLS signature algorithms extension handling to the new framework.

ok beck@@ doug@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.6 2017/08/12 21:17:03 doug Exp $ */
d53 7
@


1.6
log
@Rewrite session ticket TLS extension handling using CBB/CBS and the new
extension framework.

ok jsing@@ beck@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.5 2017/08/11 20:14:13 doug Exp $ */
d25 7
@


1.5
log
@Rewrite EllipticCurves TLS extension handling using CBB/CBS and the new
extension framework.

input + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.4 2017/08/11 06:30:41 jsing Exp $ */
d47 6
@


1.4
log
@Add doug@@'s copyright since he just added code to these two files.
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.3 2017/08/11 05:06:34 doug Exp $ */
d33 7
d46 1
@


1.3
log
@Rewrite the ECPointFormats TLS extension handling using CBB/CBS and the
new extension framework.

input + ok jsing@@
@
text
@d1 1
a1 1
/* $OpenBSD: ssl_tlsext.h,v 1.2 2017/07/24 17:10:31 jsing Exp $ */
d4 1
@


1.2
log
@Rewrite the TLS Renegotiation Indication extension handling using CBB/CBS
and the new extension framework.

Feedback from doug@@

ok inoguchi@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d31 7
@


1.1
log
@Start rewriting TLS extension handling.

Introduce a TLS extension handling framework that has per-extension type
functions to determine if an extension is needed, to build the extension
data and parse the extension data. This is somewhat analogous to BoringSSL,
however these build and parse functions are intentionally symetrical. The
framework is hooked into the existing TLS handling code in such a way that
we can gradual convert the extension handling code.

Convert the TLS Server Name Indication extension to the new framework,
while rewriting it to use CBB/CBS and be more strict in the process.

Discussed with beck@@

ok inoguchi@@
@
text
@d18 7
@

