head	1.65;
access;
symbols
	OPENBSD_5_5:1.64.0.6
	OPENBSD_5_5_BASE:1.64
	OPENBSD_5_4:1.64.0.2
	OPENBSD_5_4_BASE:1.64
	OPENBSD_5_3:1.63.0.2
	OPENBSD_5_3_BASE:1.63
	OPENBSD_5_2:1.60.0.6
	OPENBSD_5_2_BASE:1.60
	OPENBSD_5_1_BASE:1.60
	OPENBSD_5_1:1.60.0.4
	OPENBSD_5_0:1.60.0.2
	OPENBSD_5_0_BASE:1.60
	OPENBSD_4_9:1.58.0.2
	OPENBSD_4_9_BASE:1.58
	OPENBSD_4_8:1.53.0.2
	OPENBSD_4_8_BASE:1.53
	OPENBSD_4_7:1.52.0.2
	OPENBSD_4_7_BASE:1.52
	OPENBSD_4_6:1.51.0.6
	OPENBSD_4_6_BASE:1.51
	OPENBSD_4_5:1.51.0.2
	OPENBSD_4_5_BASE:1.51
	pre_openssl_0_9_8h:1.46
	OPENBSD_4_4:1.46.0.8
	OPENBSD_4_4_BASE:1.46
	OPENBSD_4_3:1.46.0.6
	OPENBSD_4_3_BASE:1.46
	OPENBSD_4_2:1.46.0.4
	OPENBSD_4_2_BASE:1.46
	OPENBSD_4_1:1.46.0.2
	OPENBSD_4_1_BASE:1.46
	OPENBSD_4_0:1.45.0.2
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.44.0.2
	OPENBSD_3_9_BASE:1.44
	OPENBSD_3_8:1.43.0.2
	OPENBSD_3_8_BASE:1.43
	OPENBSD_3_7:1.37.0.2
	OPENBSD_3_7_BASE:1.37
	OPENBSD_3_6:1.36.0.4
	OPENBSD_3_6_BASE:1.36
	OPENBSD_3_5:1.36.0.2
	OPENBSD_3_5_BASE:1.36
	OPENBSD_3_4:1.31.0.2
	OPENBSD_3_4_BASE:1.31
	OPENBSD_3_3:1.29.0.2
	OPENBSD_3_3_BASE:1.29
	OPENBSD_3_2:1.28.0.2
	OPENBSD_3_2_BASE:1.28
	OPENBSD_3_1:1.17.0.4
	OPENBSD_3_1_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	SSLeay_0_9_0b:1.1.1.1
	SSLeay:1.1.1;
locks; strict;
comment	@# @;


1.65
date	2014.04.11.22.51.53;	author miod;	state dead;
branches;
next	1.64;

1.64
date	2013.07.13.16.34.43;	author miod;	state Exp;
branches;
next	1.63;

1.63
date	2013.01.26.06.10.22;	author djm;	state Exp;
branches;
next	1.62;

1.62
date	2012.10.13.21.31.50;	author djm;	state Exp;
branches;
next	1.61;

1.61
date	2012.08.02.13.38.39;	author okan;	state Exp;
branches;
next	1.60;

1.60
date	2011.07.08.21.30.10;	author mpf;	state Exp;
branches;
next	1.59;

1.59
date	2011.07.08.01.37.54;	author mpf;	state Exp;
branches;
next	1.58;

1.58
date	2010.10.07.10.49.39;	author djm;	state Exp;
branches;
next	1.57;

1.57
date	2010.10.06.22.57.46;	author djm;	state Exp;
branches;
next	1.56;

1.56
date	2010.10.04.19.15.40;	author naddy;	state Exp;
branches;
next	1.55;

1.55
date	2010.10.02.07.42.02;	author djm;	state Exp;
branches;
next	1.54;

1.54
date	2010.10.01.23.01.54;	author djm;	state Exp;
branches;
next	1.53;

1.53
date	2010.07.01.17.44.57;	author thib;	state Exp;
branches;
next	1.52;

1.52
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.51;

1.51
date	2009.01.09.12.16.52;	author djm;	state Exp;
branches;
next	1.50;

1.50
date	2009.01.05.21.36.37;	author djm;	state Exp;
branches;
next	1.49;

1.49
date	2008.09.08.07.23.38;	author djm;	state Exp;
branches;
next	1.48;

1.48
date	2008.09.07.19.22.21;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2008.09.06.12.20.07;	author djm;	state Exp;
branches;
next	1.46;

1.46
date	2006.10.14.19.43.57;	author drahn;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.27.05.07.47;	author djm;	state Exp;
branches;
next	1.44;

1.44
date	2005.11.24.20.49.21;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2005.05.10.14.03.22;	author markus;	state Exp;
branches;
next	1.42;

1.42
date	2005.04.29.07.54.15;	author djm;	state Exp;
branches;
next	1.41;

1.41
date	2005.04.29.05.42.05;	author djm;	state Exp;
branches;
next	1.40;

1.40
date	2005.04.01.08.15.52;	author markus;	state Exp;
branches;
next	1.39;

1.39
date	2005.03.30.13.33.01;	author markus;	state Exp;
branches;
next	1.38;

1.38
date	2005.03.30.13.08.02;	author markus;	state Exp;
branches;
next	1.37;

1.37
date	2005.02.07.20.34.54;	author beck;	state Exp;
branches;
next	1.36;

1.36
date	2004.02.27.17.36.13;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2004.01.29.03.05.33;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.23.17.02.25;	author hshoexer;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.19.21.06.45;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2003.11.18.12.39.05;	author markus;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.02.08.45.58;	author markus;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.12.02.18.34;	author markus;	state Exp;
branches;
next	1.29;

1.29
date	2003.01.31.14.05.35;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2002.09.26.11.39.50;	author markus;	state Exp;
branches;
next	1.27;

1.27
date	2002.09.10.16.31.53;	author markus;	state Exp;
branches;
next	1.26;

1.26
date	2002.09.05.22.12.11;	author markus;	state Exp;
branches;
next	1.25;

1.25
date	2002.09.03.18.59.55;	author markus;	state Exp;
branches;
next	1.24;

1.24
date	2002.09.03.13.00.25;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.31.00.24.20;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2002.08.31.00.21.26;	author markus;	state Exp;
branches;
next	1.21;

1.21
date	2002.07.11.23.45.01;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2002.07.11.20.31.16;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.15.02.29.08;	author beck;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.15.01.49.03;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.22.00.02.45;	author beck;	state Exp;
branches
	1.17.2.1
	1.17.4.1;
next	1.16;

1.16
date	2000.12.16.08.14.00;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.15.02.56.47;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.13.21.31.29;	author hugh;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.25.01.25.13;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.20.14.52.39;	author ho;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.19.11.07.35;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	99.10.10.21.32.02;	author maja;	state Exp;
branches;
next	1.9;

1.9
date	99.09.29.04.35.07;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	98.11.29.23.29.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.11.18.23.30.36;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	98.10.12.05.26.12;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	98.10.08.21.11.31;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	98.10.08.17.51.48;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	98.10.08.17.32.00;	author marc;	state Exp;
branches;
next	1.2;

1.2
date	98.10.06.17.55.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.05.20.12.29;	author ryker;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.05.20.12.29;	author ryker;	state Exp;
branches;
next	;

1.17.2.1
date	2002.09.27.18.10.37;	author miod;	state Exp;
branches;
next	;

1.17.4.1
date	2002.09.26.22.08.25;	author jason;	state Exp;
branches;
next	;


desc
@@


1.65
log
@Move build machinery for libcrypto from libssl/crypto to libcrypto, as well
as configuration files; split manpages and .pc files between libcrypto and
libssl.
No functional change, only there to make engineering easier, and libcrypto
sources are still found in libssl/src/crypto at the moment.

ok reyk@@, also discussed with deraadt@@ beck@@ and the usual crypto suspects.
@
text
@# $OpenBSD: Makefile,v 1.64 2013/07/13 16:34:43 miod Exp $

LIB=	crypto

SSLEAYDIST=	src
SSL_SRC=	${.CURDIR}/../${SSLEAYDIST}
LCRYPTO_SRC=	${SSL_SRC}/crypto

# arm and sh default to little endian, mips defaults to big endian
.if ${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
    ${MACHINE_ARCH} == "arm" || ${MACHINE_ARCH} == "i386" || \
    ${MACHINE_ARCH} == "mips64el" || ${MACHINE_ARCH} == "sh" || \
    ${MACHINE_ARCH} == "vax"
CFLAGS+= -DL_ENDIAN
.else
CFLAGS+= -DB_ENDIAN
.endif 

.include <bsd.own.mk>		# for 'NOPIC' definition
.if !defined(NOPIC)
CFLAGS+= -DDSO_DLFCN -DHAVE_DLFCN_H
.endif

.if ${MACHINE_ARCH} == "sparc"
PICFLAG=-fPIC
.endif

CFLAGS+= -DTERMIOS -DANSI_SOURCE -DNO_ERR -DNO_WINDOWS_BRAINDEATH
# Hardware engines
CFLAGS+= -DOPENSSL_NO_HW_4758_CCA
CFLAGS+= -DOPENSSL_NO_HW_AEP
CFLAGS+= -DOPENSSL_NO_HW_ATALLA
CFLAGS+= -DOPENSSL_NO_CAPIENG
CFLAGS+= -DOPENSSL_NO_HW_CSWIFT
CFLAGS+= -DOPENSSL_NO_HW_NCIPHER
CFLAGS+= -DOPENSSL_NO_HW_NURON
CFLAGS+= -DOPENSSL_NO_HW_PADLOCK # XXX enable this?
CFLAGS+= -DOPENSSL_NO_HW_SUREWARE
CFLAGS+= -DOPENSSL_NO_HW_UBSEC

CFLAGS+= -I${.CURDIR}/../${SSLEAYDIST}
CFLAGS+= -I${LCRYPTO_SRC}
CFLAGS+= -I${LCRYPTO_SRC}/modes -I${LCRYPTO_SRC}/asn1 -I${LCRYPTO_SRC}/evp

# crypto/
SRCS+= cryptlib.c mem.c mem_dbg.c cversion.c ex_data.c cpt_err.c
SRCS+= ebcdic.c uid.c o_time.c o_str.c o_dir.c o_fips.c o_init.c fips_ers.c

# aes/
SRCS+= aes_misc.c aes_ecb.c aes_cfb.c aes_ofb.c
SRCS+= aes_ctr.c aes_ige.c aes_wrap.c

# asn1/
SRCS+= a_object.c a_bitstr.c a_utctm.c a_gentm.c a_time.c a_int.c a_octet.c
SRCS+= a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c
SRCS+= a_enum.c a_utf8.c a_sign.c a_digest.c a_verify.c a_mbstr.c a_strex.c
SRCS+= x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_bignum.c
SRCS+= x_long.c x_name.c x_x509.c x_x509a.c x_crl.c x_info.c x_spki.c nsseq.c
SRCS+= x_nx509.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c
SRCS+= t_req.c t_x509.c t_x509a.c t_crl.c t_pkey.c t_spki.c t_bitst.c
SRCS+= tasn_new.c tasn_fre.c tasn_enc.c tasn_dec.c tasn_utl.c tasn_typ.c
SRCS+= tasn_prn.c ameth_lib.c
SRCS+= f_int.c f_string.c n_pkey.c
SRCS+= f_enum.c x_pkey.c a_bool.c x_exten.c bio_asn1.c bio_ndef.c asn_mime.c
SRCS+= asn1_gen.c asn1_par.c asn1_lib.c asn1_err.c a_bytes.c a_strnid.c
SRCS+= evp_asn1.c asn_pack.c p5_pbe.c p5_pbev2.c p8_pkey.c asn_moid.c

# bf/
SRCS+= bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c

# bio/
SRCS+= bio_lib.c bio_cb.c bio_err.c
SRCS+= bss_mem.c bss_null.c bss_fd.c
SRCS+= bss_file.c bss_sock.c bss_conn.c
SRCS+= bf_null.c bf_buff.c b_print.c b_dump.c
SRCS+= b_sock.c bss_acpt.c bf_nbio.c bss_log.c bss_bio.c
SRCS+= bss_dgram.c

# bn/
SRCS+= bn_add.c bn_div.c bn_exp.c bn_lib.c bn_ctx.c bn_mul.c bn_mod.c
SRCS+= bn_print.c bn_rand.c bn_shift.c bn_word.c bn_blind.c
SRCS+= bn_kron.c bn_sqrt.c bn_gcd.c bn_prime.c bn_err.c bn_sqr.c
SRCS+= bn_recp.c bn_mont.c bn_mpi.c bn_exp2.c bn_gf2m.c bn_nist.c
SRCS+= bn_depr.c bn_const.c bn_x931p.c

# buffer/
SRCS+= buffer.c buf_err.c buf_str.c

# camellia/
#SRCS+= cmll_ecb.c cmll_ofb.c cmll_cfb.c cmll_ctr.c cmll_utl.c

# cast/
SRCS+= c_skey.c c_ecb.c c_enc.c c_cfb64.c c_ofb64.c

# cmac/
SRCS+= cmac.c cm_ameth.c cm_pmeth.c

# cms/
#SRCS+= cms_lib.c cms_asn1.c cms_att.c cms_io.c cms_smime.c cms_err.c
#SRCS+= cms_sd.c cms_dd.c cms_cd.c cms_env.c cms_enc.c cms_ess.c
#SRCS+= cms_pwri.c

# comp/
SRCS+= comp_lib.c comp_err.c c_rle.c c_zlib.c

# conf/
SRCS+= conf_err.c conf_lib.c conf_api.c conf_def.c conf_mod.c
SRCS+= conf_mall.c conf_sap.c

# des/
SRCS+= cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c 
SRCS+= ecb3_enc.c ecb_enc.c  enc_read.c enc_writ.c
SRCS+= fcrypt.c ofb64enc.c ofb_enc.c  pcbc_enc.c
SRCS+= qud_cksm.c rand_key.c rpc_enc.c  set_key.c xcbc_enc.c
SRCS+= str2key.c  cfb64ede.c ofb64ede.c ede_cbcm_enc.c des_old.c des_old2.c
SRCS+= read2pwd.c

# dh/
SRCS+= dh_asn1.c dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_depr.c
SRCS+= dh_ameth.c dh_pmeth.c dh_prn.c

# dsa/
SRCS+= dsa_gen.c dsa_key.c dsa_lib.c dsa_asn1.c dsa_vrf.c dsa_sign.c
SRCS+= dsa_err.c dsa_ossl.c dsa_depr.c dsa_ameth.c dsa_pmeth.c dsa_prn.c

# dso/
SRCS+= dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+= dso_openssl.c dso_win32.c dso_vms.c dso_beos.c

# ec/
SRCS+= ec_lib.c ecp_smpl.c ecp_mont.c ecp_nist.c ec_cvt.c ec_mult.c
SRCS+= ec_err.c ec_curve.c ec_check.c ec_print.c ec_asn1.c ec_key.c
SRCS+= ec2_smpl.c ec2_mult.c ec_ameth.c ec_pmeth.c eck_prn.c
SRCS+= ecp_nistp224.c ecp_nistp256.c ecp_nistp521.c ecp_nistputil.c
SRCS+= ecp_oct.c ec2_oct.c ec_oct.c

# ecdh/
SRCS+= ech_lib.c ech_ossl.c ech_key.c ech_err.c

# ecdsa/
SRCS+= ecs_lib.c ecs_asn1.c ecs_ossl.c ecs_sign.c ecs_vrf.c ecs_err.c

# engine/
SRCS+= eng_err.c eng_lib.c eng_list.c eng_init.c eng_ctrl.c
SRCS+= eng_table.c eng_pkey.c eng_fat.c eng_all.c
SRCS+= tb_rsa.c tb_dsa.c tb_ecdsa.c tb_dh.c tb_ecdh.c tb_rand.c tb_store.c
SRCS+= tb_cipher.c tb_digest.c tb_pkmeth.c tb_asnmth.c
SRCS+= eng_openssl.c eng_cnf.c eng_dyn.c hw_cryptodev.c
SRCS+= eng_rsax.c eng_rdrand.c
# XXX unnecessary? handled in EVP now...
# SRCS+= eng_aesni.c # local addition

# err/
SRCS+= err.c err_all.c err_prn.c

# evp/
SRCS+= encode.c digest.c evp_enc.c evp_key.c evp_acnf.c
SRCS+= e_des.c e_bf.c e_idea.c e_des3.c e_camellia.c
SRCS+= e_rc4.c e_aes.c names.c e_seed.c
SRCS+= e_xcbc_d.c e_rc2.c e_cast.c e_rc5.c
SRCS+= m_null.c m_md2.c m_md4.c m_md5.c m_sha.c m_sha1.c m_wp.c
SRCS+= m_dss.c m_dss1.c m_mdc2.c m_ripemd.c m_ecdsa.c
SRCS+= p_open.c p_seal.c p_sign.c p_verify.c p_lib.c p_enc.c p_dec.c
SRCS+= bio_md.c bio_b64.c bio_enc.c evp_err.c e_null.c
SRCS+= c_all.c c_allc.c c_alld.c evp_lib.c bio_ok.c
SRCS+= evp_pkey.c evp_pbe.c p5_crpt.c p5_crpt2.c
SRCS+= e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c evp_fips.c
SRCS+= e_aes_cbc_hmac_sha1.c e_rc4_hmac_md5.c

# hmac/
SRCS+= hmac.c hm_ameth.c hm_pmeth.c

# idea/
SRCS+= i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c

# jpake/
#SRCS+= jpake.c jpake_err.c

# krb5/
SRCS+= krb5_asn.c

# lhash/
SRCS+= lhash.c lh_stats.c

# md2
##SRCS+= md2_dgst.c md2_one.c

# md4/
SRCS+= md4_dgst.c md4_one.c

# md5/
SRCS+= md5_dgst.c md5_one.c

# mdc2/
SRCS+= mdc2dgst.c mdc2_one.c

# modes/
SRCS+= cbc128.c ctr128.c cts128.c cfb128.c ofb128.c gcm128.c ccm128.c xts128.c

# objects/
SRCS+= o_names.c obj_dat.c obj_lib.c obj_err.c obj_xref.c

# ocsp/
SRCS+= ocsp_asn.c ocsp_ext.c ocsp_ht.c ocsp_lib.c ocsp_cl.c
SRCS+= ocsp_srv.c ocsp_prn.c ocsp_vfy.c ocsp_err.c

# pem/
SRCS+= pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_all.c pem_err.c
SRCS+= pem_x509.c pem_xaux.c pem_oth.c pem_pk8.c pem_pkey.c pvkfmt.c

# pkcs12/
SRCS+= p12_add.c p12_asn.c p12_attr.c p12_crpt.c p12_crt.c p12_decr.c
SRCS+= p12_init.c p12_key.c p12_kiss.c p12_mutl.c
SRCS+= p12_utl.c p12_npas.c pk12err.c p12_p8d.c p12_p8e.c

# pkcs7/
SRCS+= pk7_asn1.c pk7_lib.c pkcs7err.c pk7_doit.c pk7_smime.c pk7_attr.c
SRCS+= pk7_mime.c bio_pk7.c

# pqueue/
SRCS+= pqueue.c

# rand/
SRCS+= md_rand.c randfile.c rand_lib.c rand_err.c rand_egd.c
SRCS+= rand_win.c rand_unix.c rand_os2.c rand_nw.c

# rc2/
SRCS+= rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c rc2ofb64.c

# rc4/
SRCS+= rc4_utl.c

# rc5/
#SRCS+= rc5_skey.c rc5_ecb.c rc5cfb64.c rc5ofb64.c

# ripemd/
SRCS+= rmd_dgst.c rmd_one.c

# rsa/
SRCS+= rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c rsa_saos.c rsa_err.c
SRCS+= rsa_pk1.c rsa_ssl.c rsa_none.c rsa_oaep.c rsa_chk.c rsa_null.c
SRCS+= rsa_pss.c rsa_x931.c rsa_asn1.c rsa_depr.c rsa_ameth.c rsa_prn.c
SRCS+= rsa_pmeth.c rsa_crpt.c

# seed/
#SRCS+= seed.c seed_ecb.c seed_cbc.c seed_cfb.c seed_ofb.c

# sha/
SRCS+= sha_dgst.c sha1dgst.c sha_one.c sha1_one.c sha256.c sha512.c

# srp/
#SRCS+= srp_lib.c srp_vfy.c

# stack/
SRCS+= stack.c

# store/
#SRCS+= str_err.c str_lib.c str_meth.c str_mem.c

# ts/
SRCS+= ts_err.c ts_req_utils.c ts_req_print.c ts_rsp_utils.c ts_rsp_print.c
SRCS+= ts_rsp_sign.c ts_rsp_verify.c ts_verify_ctx.c ts_lib.c ts_conf.c
SRCS+= ts_asn1.c

# txt_db/
SRCS+=txt_db.c

# ui/
SRCS+= ui_err.c ui_lib.c ui_openssl.c ui_util.c ui_compat.c

# whrlpool/
SRCS+= wp_dgst.c

# x509/
SRCS+= x509_def.c x509_d2.c x509_r2x.c x509_cmp.c
SRCS+= x509_obj.c x509_req.c x509spki.c x509_vfy.c
SRCS+= x509_set.c x509cset.c x509rset.c x509_err.c
SRCS+= x509name.c x509_v3.c x509_ext.c x509_att.c
SRCS+= x509type.c x509_lu.c x_all.c x509_txt.c
SRCS+= x509_trs.c by_file.c by_dir.c x509_vpm.c

# x509v3/
SRCS+= v3_bcons.c v3_bitst.c v3_conf.c v3_extku.c v3_ia5.c v3_lib.c
SRCS+= v3_prn.c v3_utl.c v3err.c v3_genn.c v3_alt.c v3_skey.c v3_akey.c v3_pku.c
SRCS+= v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c
SRCS+= v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c
SRCS+= pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c
SRCS+= v3_asid.c v3_addr.c

.PATH:	${.CURDIR}/arch/${MACHINE_CPU} \
	${LCRYPTO_SRC} \
	${LCRYPTO_SRC}/aes \
	${LCRYPTO_SRC}/asn1 \
	${LCRYPTO_SRC}/bf \
	${LCRYPTO_SRC}/bio \
	${LCRYPTO_SRC}/bn \
	${LCRYPTO_SRC}/bn/asm \
	${LCRYPTO_SRC}/buffer \
	${LCRYPTO_SRC}/camellia \
	${LCRYPTO_SRC}/cast \
	${LCRYPTO_SRC}/cmac \
	${LCRYPTO_SRC}/cms \
	${LCRYPTO_SRC}/comp \
	${LCRYPTO_SRC}/conf \
	${LCRYPTO_SRC}/des \
	${LCRYPTO_SRC}/dh \
	${LCRYPTO_SRC}/dsa \
	${LCRYPTO_SRC}/dso \
	${LCRYPTO_SRC}/ec \
	${LCRYPTO_SRC}/ecdh \
	${LCRYPTO_SRC}/ecdsa \
	${LCRYPTO_SRC}/engine \
	${LCRYPTO_SRC}/err \
	${LCRYPTO_SRC}/evp \
	${LCRYPTO_SRC}/md2 \
	${LCRYPTO_SRC}/hmac \
	${LCRYPTO_SRC}/idea \
	${LCRYPTO_SRC}/jpake \
	${LCRYPTO_SRC}/krb5 \
	${LCRYPTO_SRC}/lhash \
	${LCRYPTO_SRC}/md4 \
	${LCRYPTO_SRC}/md5 \
	${LCRYPTO_SRC}/mdc2 \
	${LCRYPTO_SRC}/modes \
	${LCRYPTO_SRC}/objects \
	${LCRYPTO_SRC}/ocsp \
	${LCRYPTO_SRC}/pem \
	${LCRYPTO_SRC}/perlasm \
	${LCRYPTO_SRC}/pkcs12 \
	${LCRYPTO_SRC}/pkcs7 \
	${LCRYPTO_SRC}/pqueue \
	${LCRYPTO_SRC}/rand \
	${LCRYPTO_SRC}/rc2 \
	${LCRYPTO_SRC}/rc4 \
	${LCRYPTO_SRC}/rc5 \
	${LCRYPTO_SRC}/ripemd \
	${LCRYPTO_SRC}/rsa \
	${LCRYPTO_SRC}/seed \
	${LCRYPTO_SRC}/sha \
	${LCRYPTO_SRC}/stack \
	${LCRYPTO_SRC}/store \
	${LCRYPTO_SRC}/threads \
	${LCRYPTO_SRC}/ts \
	${LCRYPTO_SRC}/txt_db \
	${LCRYPTO_SRC}/ui \
	${LCRYPTO_SRC}/whrlpool \
	${LCRYPTO_SRC}/x509 \
	${LCRYPTO_SRC}/x509v3

HDRS=\
	e_os.h \
	e_os2.h \
	crypto/aes/aes.h \
	crypto/asn1/asn1.h \
	crypto/asn1/asn1_mac.h \
	crypto/asn1/asn1t.h \
	crypto/bf/blowfish.h \
	crypto/bio/bio.h \
	crypto/bn/bn.h \
	crypto/buffer/buffer.h \
	crypto/camellia/camellia.h \
	crypto/cast/cast.h \
	crypto/cmac/cmac.h \
	crypto/cms/cms.h \
	crypto/comp/comp.h \
	crypto/conf/conf.h \
	crypto/conf/conf_api.h \
	crypto/crypto.h \
	crypto/des/des.h \
	crypto/des/des_old.h \
	crypto/dh/dh.h \
	crypto/dsa/dsa.h \
	crypto/dso/dso.h \
	crypto/ebcdic.h \
	crypto/ec/ec.h \
	crypto/ecdh/ecdh.h \
	crypto/ecdsa/ecdsa.h \
	crypto/engine/engine.h \
	crypto/err/err.h \
	crypto/evp/evp.h \
	crypto/hmac/hmac.h \
	crypto/idea/idea.h \
	crypto/krb5/krb5_asn.h \
	crypto/lhash/lhash.h \
	crypto/md2/md2.h \
	crypto/md4/md4.h \
	crypto/md5/md5.h \
	crypto/mdc2/mdc2.h \
	crypto/modes/modes.h \
	crypto/objects/objects.h \
	crypto/ocsp/ocsp.h \
	crypto/opensslv.h \
	crypto/ossl_typ.h \
	crypto/pem/pem.h \
	crypto/pem/pem2.h \
	crypto/pkcs12/pkcs12.h \
	crypto/pkcs7/pkcs7.h \
	crypto/pqueue/pqueue.h \
	crypto/rand/rand.h \
	crypto/rc2/rc2.h \
	crypto/rc4/rc4.h \
	crypto/rc5/rc5.h \
	crypto/ripemd/ripemd.h \
	crypto/rsa/rsa.h \
	crypto/seed/seed.h \
	crypto/sha/sha.h \
	crypto/srp/srp.h \
	crypto/stack/safestack.h \
	crypto/stack/stack.h \
	crypto/store/store.h \
	crypto/symhacks.h \
	crypto/ts/ts.h \
	crypto/txt_db/txt_db.h \
	crypto/ui/ui.h \
	crypto/ui/ui_compat.h \
	crypto/whrlpool/whrlpool.h \
	crypto/x509/x509.h \
	crypto/x509/x509_vfy.h \
	crypto/x509v3/x509v3.h

HDRS_GEN=\
	${.CURDIR}/arch/${MACHINE_CPU}/opensslconf.h \
	${.OBJDIR}/obj_mac.h

includes: obj_mac.h
	@@test -d ${DESTDIR}/usr/include/openssl || \
	    mkdir ${DESTDIR}/usr/include/openssl
	@@cd ${SSL_SRC}; \
	for i in $(HDRS); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done; \
	for i in $(HDRS_GEN); do \
	    j="cmp -s $$i ${DESTDIR}/usr/include/openssl/`basename $$i` || \
	    ${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 $$i\
		${DESTDIR}/usr/include/openssl"; \
	    echo $$j; \
	    eval "$$j"; \
	done;

# generated
CFLAGS+= -I${.OBJDIR}

GENERATED=obj_mac.h obj_dat.h
CLEANFILES=${GENERATED} obj_mac.num.tmp
SSL_OBJECTS=${SSL_SRC}/crypto/objects

obj_mac.h: ${SSL_OBJECTS}/objects.h ${SSL_OBJECTS}/obj_mac.num ${SSL_OBJECTS}/objects.txt
	cat ${SSL_OBJECTS}/obj_mac.num > obj_mac.num.tmp
	/usr/bin/perl ${SSL_OBJECTS}/objects.pl ${SSL_OBJECTS}/objects.txt obj_mac.num.tmp obj_mac.h

obj_dat.h: obj_mac.h
	/usr/bin/perl ${SSL_OBJECTS}/obj_dat.pl obj_mac.h obj_dat.h

.if (${MACHINE_ARCH} == "i386")
SRCS+= wp_block.c
SRCS+= bf_cbc.c	
CFLAGS+= -DOPENSSL_BN_ASM_PART_WORDS
CFLAGS+= -DOPENSSL_IA32_SSE2
CFLAGS+= -DOPENSSL_BN_ASM_MONT
CFLAGS+= -DOPENSSL_BN_ASM_GF2m
CFLAGS+= -DSHA1_ASM
CFLAGS+= -DSHA256_ASM
CFLAGS+= -DSHA512_ASM
CFLAGS+= -DMD5_ASM
CFLAGS+= -DRMD160_ASM
CFLAGS+= -DAES_ASM
CFLAGS+= -DVPAES_ASM
CFLAGS+= -DWHIRLPOOL_ASM
CFLAGS+= -DGHASH_ASM
CFLAGS+= -DOPENSSL_CPUID_OBJ
SSLASM=\
	aes aes-586 \
	aes vpaes-x86 \
	aes aesni-x86 \
	bf bf-586 \
	bn bn-586 \
	bn co-586 \
	bn x86-mont \
	bn x86-gf2m \
	des crypt586 \
	des des-586 \
	md5 md5-586 \
	modes ghash-x86 \
	rc4 rc4-586 \
	ripemd rmd-586 \
	sha sha1-586 \
	sha sha256-586 \
	sha sha512-586 \
	whrlpool wp-mmx
.for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl ${LCRYPTO_SRC}/perlasm/x86gas.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm -I${LCRYPTO_SRC}/${dir}/asm \
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl \
		    openbsd-elf ${CFLAGS} 386 ${PICFLAG} > ${.TARGET}
.endfor
SRCS+=	x86cpuid.S
GENERATED+=x86cpuid.S
x86cpuid.S: ${LCRYPTO_SRC}/x86cpuid.pl ${LCRYPTO_SRC}/perlasm/x86gas.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm ${LCRYPTO_SRC}/x86cpuid.pl \
		openbsd-elf ${CFLAGS} 386 ${PICFLAG} > ${.TARGET}
.elif (${MACHINE_ARCH} == "amd64")
SRCS+= bf_enc.c des_enc.c fcrypt_b.c
SRCS+= x86_64-gcc.c
CFLAGS+= -DOPENSSL_CPUID_OBJ
CFLAGS+= -DOPENSSL_IA32_SSE2
CFLAGS+= -DOPENSSL_BN_ASM_MONT
CFLAGS+= -DOPENSSL_BN_ASM_MONT5
CFLAGS+= -DOPENSSL_BN_ASM_GF2m
CFLAGS+= -DSHA1_ASM
CFLAGS+= -DSHA256_ASM
CFLAGS+= -DSHA512_ASM
CFLAGS+= -DMD5_ASM
CFLAGS+= -DAES_ASM
CFLAGS+= -DVPAES_ASM
CFLAGS+= -DBSAES_ASM
CFLAGS+= -DWHIRLPOOL_ASM
CFLAGS+= -DGHASH_ASM
SSLASM=\
	aes aes-x86_64 \
	aes aesni-x86_64 \
	aes aesni-sha1-x86_64 \
	aes bsaes-x86_64 \
	aes vpaes-x86_64 \
	bn x86_64-mont \
	bn x86_64-mont5 \
	bn x86_64-gf2m \
	bn modexp512-x86_64 \
	md5 md5-x86_64 \
	modes ghash-x86_64 \
	rc4 rc4-x86_64 \
	rc4 rc4-md5-x86_64 \
	sha sha1-x86_64 \
	whrlpool wp-x86_64
.for dir f in ${SSLASM}
SRCS+=	${f}.S
GENERATED+=${f}.S
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./asm/${f}.pl openbsd-elf) > ${.TARGET}
.endfor
SRCS+=	x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
GENERATED+=x86_64cpuid.S sha256-x86_64.S sha512-x86_64.S
x86_64cpuid.S: ${LCRYPTO_SRC}/x86_64cpuid.pl
	(cd ${LCRYPTO_SRC}/${dir} ; \
		/usr/bin/perl ./x86_64cpuid.pl) > ${.TARGET}
sha256-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
sha512-x86_64.S: ${LCRYPTO_SRC}/sha/asm/sha512-x86_64.pl
	cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET}
.else
# XXX lots more asm we can turn on for other platforms. Shouldn't require
# major cranks.
CFLAGS+=-DOPENSSL_NO_ASM
SRCS+= mem_clr.c
SRCS+= aes_core.c aes_cbc.c 
SRCS+= bf_enc.c
SRCS+= bn_asm.c
SRCS+= des_enc.c fcrypt_b.c
SRCS+= rc4_enc.c rc4_skey.c
#SRCS+= rc5_enc.c 
SRCS+= wp_block.c
.endif

all beforedepend: ${GENERATED}

.include <bsd.lib.mk>
@


1.64
log
@Remove no longer needed vax CFLAGS workarounds.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.63 2013/01/26 06:10:22 djm Exp $
@


1.63
log
@remove ACSS, crank libcrypto major; ok markus@@ deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.62 2012/10/13 21:31:50 djm Exp $
a456 12

.if (${MACHINE_ARCH} == "vax")
# egcs bombs optimising these files
a_strnid.o:
	${CC} ${CFLAGS} -O0 ${CPPFLAGS} -c ${.IMPSRC}
a_strnid.po:           
	${CC} ${CFLAGS} -O0 ${CPPFLAGS} -c ${.IMPSRC} -o $@@
des_enc.o:             
	${CC} ${CFLAGS} -O1 ${CPPFLAGS} -c ${.IMPSRC}
des_enc.po:            
	${CC} ${CFLAGS} -O1 ${CPPFLAGS} -c ${.IMPSRC} -o $@@
.endif  
@


1.62
log
@Makefile and header changes for OpenSSL-1.0.1c

major cranks
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.60 2011/07/08 21:30:10 mpf Exp $
a48 3
# acss/
SRCS+=	acss_skey.c acss_enc.c

a168 1
SRCS+= e_acss.c # Local addition
a291 1
	${LCRYPTO_SRC}/acss \
a352 1
	crypto/acss/acss.h \
@


1.61
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@a28 8
# Patented algorithms
CFLAGS+= -DOPENSSL_NO_IDEA
CFLAGS+= -DOPENSSL_NO_RC5
CFLAGS+= -DOPENSSL_NO_KRB5
# NB. MDC2 is off patent now, we can add it whenever we want to
CFLAGS+= -DOPENSSL_NO_MDC2
CFLAGS+= -DOPENSSL_NO_GOST

d43 1
a43 1
CFLAGS+= -I${LCRYPTO_SRC}/asn1 -I${LCRYPTO_SRC}/evp
d47 1
a47 1
SRCS+= ebcdic.c uid.c o_time.c o_str.c o_dir.c
d53 2
a54 1
SRCS+= aes_misc.c aes_ecb.c aes_cfb.c aes_ofb.c aes_ctr.c aes_ige.c aes_wrap.c
d87 1
a87 1
SRCS+= bn_depr.c bn_const.c
d90 1
a90 1
SRCS+= buffer.c buf_err.c
d93 1
a93 1
#SRCS+= cmll_ecb.c cmll_ofb.c cmll_cfb.c cmll_ctr.c
d98 3
d104 1
d137 2
d152 3
a154 1
SRCS+= eng_aesni.c # local addition
d170 2
a171 1
SRCS+= e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c
d178 1
a178 1
#SRCS+= i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c
d199 1
a199 1
#SRCS+= mdc2dgst.c mdc2_one.c
d202 1
a202 1
SRCS+= cbc128.c ctr128.c cts128.c cfb128.c ofb128.c
d234 3
d238 1
a238 1
#SRCS+= rc5_skey.c rc5_ecb.c rc5_enc.c rc5cfb64.c rc5ofb64.c
d247 1
a247 1
SRCS+= rsa_pmeth.c
d255 3
d306 1
d369 1
d413 1
d478 5
a482 2
CFLAGS+= -DAES_ASM
CFLAGS+= -DMD5_ASM
d486 1
d488 4
a491 3
CFLAGS+= -DOPENBSD_DES_ASM
CFLAGS+= -DOPENSSL_BN_ASM_PART_WORDS
CFLAGS+= -DOPENSSL_BN_ASM_MONT
a492 4
CFLAGS+= -DWHIRLPOOL_ASM
CFLAGS+= -DOPENSSL_IA32_SSE2
# XXX bad relocation in CAST ASM code leads to TEXTREL for shared libcrypto
#CFLAGS+= -DOPENBSD_CAST_ASM
d495 2
d501 1
d505 1
a524 1
SRCS+= bf_cbc.c	
d526 1
a526 1
SRCS+= bf_enc.c des_enc.c 
d528 5
a532 3
SRCS+= fcrypt_b.c
CFLAGS+= -DAES_ASM
CFLAGS+= -DMD5_ASM
d536 4
a539 2
CFLAGS+= -DOPENSSL_CPUID_OBJ
CFLAGS+= -DOPENSSL_BN_ASM_MONT
d541 1
d545 3
d549 3
d553 1
d555 1
d577 2
a578 1
# XXX ppccpuid.pl
d581 1
a581 1
SRCS+= aes_core.c aes_cbc.c
d586 1
@


1.60
log
@No need to set CFLAGS+=-DOPENSSL_IA32_SSE2 on amd64. Nothing uses it.
Small test by marco@@ and md5 /usr/lib/libcrypto.so.19.0 agrees.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.59 2011/07/08 01:37:54 mpf Exp $
a3 1
WANTLINT=
@


1.59
log
@Pass CFLAGS (which contains -DOPENSSL_IA32_SSE2) to the perlasm
build on i386.  This enables SSE2 optimizations for bignum multiplications,
Montgomery multiplications and sha512.
This speeds up Diffie-Hellman operations in isakmpd and iked quite
a bit.  OK djm@@, markus@@, mikeb@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.58 2010/10/07 10:49:39 djm Exp $
a522 1
CFLAGS+= -DOPENSSL_IA32_SSE2
@


1.58
log
@OpenSSL grows another undocumented header, apparently needed on armish
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.57 2010/10/06 22:57:46 djm Exp $
d503 1
a503 1
		    openbsd-elf 386 ${PICFLAG} > ${.TARGET}
d509 1
a509 1
		openbsd-elf 386 ${PICFLAG} > ${.TARGET}
@


1.57
log
@More OpenSSL fixes:

- Update local engines for the EVP API change (len u_int => size_t)
- Use hw_cryptodev.c instead of eng_cryptodev.c
- Make x86_64-xlate.pl always write to the output file and not stdout,
  fixing "make -j" builds (spotted by naddy@@)

ok naddy@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.56 2010/10/04 19:15:40 naddy Exp $
d348 1
@


1.56
log
@Our make already uses sh -e when executing commands.
Revert the "set -e" additions and kill unneeded subshells.  ok djm@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.55 2010/10/02 07:42:02 djm Exp $
d153 1
a153 1
SRCS+= eng_openssl.c eng_cnf.c eng_dyn.c eng_cryptodev.c
@


1.55
log
@percolate up errors from perl asm scripts, correctly enable SHA-256 asm on
amd64
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.54 2010/10/01 23:01:54 djm Exp $
d535 1
a535 1
	(set -e ; cd ${LCRYPTO_SRC}/${dir} ; \
d541 1
a541 1
	(set -e ; cd ${LCRYPTO_SRC}/${dir} ; \
d544 2
a545 2
	(set -e ; cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET})
d547 2
a548 2
	(set -e ; cd ${LCRYPTO_SRC}/sha/asm ; \
		/usr/bin/perl ./sha512-x86_64.pl ${.OBJDIR}/${.TARGET})
@


1.54
log
@update supporting files, crank library majors
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.53 2010/07/01 17:44:57 thib Exp $
d517 1
d535 1
a535 1
	(cd ${LCRYPTO_SRC}/${dir} ; \
d538 2
a539 2
SRCS+=	x86_64cpuid.S
GENERATED+=x86_64cpuid.S
d541 2
a542 1
	(cd ${LCRYPTO_SRC}/${dir} ; /usr/bin/perl ./x86_64cpuid.pl) > ${.TARGET}
d544 1
a544 1
	(cd ${LCRYPTO_SRC}/sha/asm ; \
d547 1
a547 1
	(cd ${LCRYPTO_SRC}/sha/asm ; \
a548 2
SRCS+=	sha256-x86_64.S sha512-x86_64.S
GENERATED+=sha256-x86_64.S sha512-x86_64.S
@


1.53
log
@oops. Missed this from my aes-ni commit.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.51 2009/01/09 12:16:52 djm Exp $
a8 1
FIPS_SRC=	${SSL_SRC}/fips
d34 1
d36 1
d52 7
a58 9
SRCS+= o_time.c o_dir.c o_init.c fips_err.c
SRCS+=	cryptlib.c dyn_lck.c ex_data.c cpt_err.c mem.c mem_dbg.c mem_clr.c
SRCS+=	tmdiff.c cversion.c uid.c
SRCS+=	md2_dgst.c md2_one.c 					
SRCS+=	md5_dgst.c md5_one.c 					
SRCS+=	sha_dgst.c sha1dgst.c sha_one.c sha1_one.c sha256.c sha512.c
#SRCS+=	mdc2dgst.c mdc2_one.c					
SRCS+=	hmac.c							
SRCS+=	rmd_dgst.c rmd_one.c				
d60 132
a191 63
SRCS+=	aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c
SRCS+=	aes_ige.c aes_wrap.c
SRCS+=	cbc_cksm.c cbc_enc.c cfb64enc.c cfb_enc.c \
	ecb3_enc.c ecb_enc.c enc_read.c enc_writ.c \
	ofb64enc.c ofb_enc.c pcbc_enc.c \
	qud_cksm.c rand_key.c rpc_enc.c set_key.c \
	des_lib.c des_enc.c des_old2.c fcrypt_b.c \
	fcrypt.c xcbc_enc.c ede_cbcm_enc.c \
	str2key.c cfb64ede.c ofb64ede.c \
	des_old.c read2pwd.c
SRCS+=	rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c
SRCS+=	rc2ofb64.c							
#SRCS+=	rc5_skey.c rc5_ecb.c rc5cfb64.c rc5cfb64.c 	
#SRCS+=	rc5ofb64.c rc5_enc.c
#SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c		
#SRCS+=	i_skey.c							
SRCS+=	bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c
SRCS+=	c_skey.c c_ecb.c c_cfb64.c c_ofb64.c c_enc.c	
SRCS+=	bn_add.c bn_div.c bn_exp.c bn_lib.c bn_mul.c
SRCS+=	bn_print.c bn_rand.c bn_shift.c
SRCS+=	bn_word.c bn_blind.c bn_gcd.c bn_prime.c bn_err.c
SRCS+=	bn_sqr.c bn_recp.c bn_mont.c bn_mpi.c bn_mod.c
SRCS+=	bn_exp2.c bn_ctx.c bn_opt.c
SRCS+=	bn_sqrt.c bn_kron.c bn_x931p.c bn_const.c bn_depr.c bn_gf2m.c bn_nist.c
#SRCS+=	camellia.c cmll_cbc.c cmll_cfb.c cmll_ctr.c
#SRCS+=	cmll_ecb.c cmll_misc.c cmll_ofb.cq
#SRCS+=	cms_asn1.c cms_att.c cms_cd.c cms_dd.c cms_enc.c cms_env.c
#SRCS+=	cms_err.c cms_ess.c cms_io.c cms_lib.c cms_sd.c cms_smime.c
SRCS+=	rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c
SRCS+=	rsa_saos.c rsa_err.c rsa_pk1.c rsa_ssl.c
SRCS+=	rsa_none.c rsa_chk.c rsa_oaep.c rsa_null.c rsa_asn1.c
SRCS+=	rsa_pss.c rsa_x931.c rsa_x931g.c rsa_depr.c rsa_eng.c
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_vrf.c 	
SRCS+=	dsa_sign.c dsa_err.c dsa_asn1.c dsa_ossl.c dsa_depr.c dsa_utl.c
SRCS+=	dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_asn1.c dh_depr.c
SRCS+=	ec_cvt.c ec_lib.c ecp_mont.c ecp_recp.c
SRCS+=	ec_err.c ec_mult.c ecp_nist.c ecp_smpl.c
SRCS+=	ec2_mult.c ec2_smpl.c ec_asn1.c ec_check.c ec_curve.c
SRCS+=	ec_key.c ec_print.c
SRCS+=	ech_err.c ech_key.c ech_lib.c ech_ossl.c
SRCS+=	ecs_asn1.c ecs_err.c ecs_lib.c ecs_ossl.c ecs_sign.c ecs_vrf.c
SRCS+=	buffer.c buf_str.c buf_err.c				
SRCS+=	bio_lib.c bio_cb.c bio_err.c bss_mem.c
SRCS+=	bss_null.c bss_fd.c bss_file.c bss_sock.c	
SRCS+=	bss_conn.c bf_null.c bf_buff.c 
SRCS+=	b_print.c b_dump.c b_sock.c bss_acpt.c 		
SRCS+=	bf_nbio.c bss_bio.c bss_log.c bss_dgram.c
SRCS+=	stack.c							
SRCS+=	lhash.c lh_stats.c					
SRCS+=	md_rand.c randfile.c rand_lib.c	rand_egd.c rand_eng.c
SRCS+=   rand_err.c rand_unix.c
SRCS+=	err.c err_def.c err_all.c err_prn.c err_str.c err_bio.c
SRCS+=	obj_dat.c obj_lib.c obj_err.c o_names.c
SRCS+= bio_b64.c e_bf.c m_sha.c p_open.c
SRCS+= bio_enc.c e_cast.c e_xcbc_d.c m_dss.c m_sha1.c p_seal.c
SRCS+= bio_md.c e_des.c encode.c m_dss1.c names.c p_sign.c
SRCS+= bio_ok.c e_des3.c dig_eng.c evp_enc.c m_md2.c p_verify.c m_ecdsa.c
#SRCS+= e_camellia.c e_seed.c
SRCS+= c_all.c evp_err.c evp_acnf.c evp_cnf.c m_md4.c p5_crpt.c e_old.c
SRCS+= c_allc.c evp_key.c m_md5.c p5_crpt2.c
SRCS+= c_alld.c e_null.c evp_lib.c p_dec.c
SRCS+= digest.c e_rc2.c enc_min.c evp_pbe.c m_null.c p_enc.c
SRCS+= e_acss.c e_aes.c e_rc4.c evp_pkey.c m_ripemd.c p_lib.c
d193 95
a287 76
SRCS+=	pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_pkey.c	
SRCS+=	pem_all.c pem_err.c pem_x509.c pem_pk8.c pem_oth.c pem_xaux.c
SRCS+=	ui_err.c ui_lib.c ui_openssl.c ui_compat.c ui_util.c
SRCS+= a_bitstr.c a_mbstr.c a_utctm.c f_enum.c t_bitst.c x_name.c
SRCS+= a_bool.c a_meth.c a_utf8.c f_int.c t_crl.c tasn_typ.c x_pkey.c
SRCS+= a_bytes.c a_object.c a_verify.c f_string.c t_pkey.c tasn_utl.c x_pubkey.c
SRCS+= a_d2i_fp.c a_octet.c asn1_err.c i2d_pr.c t_req.c x_algor.c x_req.c
SRCS+= a_digest.c a_print.c asn1_lib.c i2d_pu.c t_spki.c x_attrib.c x_sig.c
SRCS+= a_dup.c a_set.c asn1_par.c n_pkey.c t_x509.c x_bignum.c x_spki.c
SRCS+= a_enum.c a_sign.c asn_pack.c nsseq.c t_x509a.c x_val.c
SRCS+= a_gentm.c a_strex.c d2i_pr.c p5_pbe.c tasn_dec.c x_crl.c x_x509.c
SRCS+= a_hdr.c a_strnid.c d2i_pu.c p5_pbev2.c tasn_enc.c x_exten.c x_x509a.c
SRCS+= a_i2d_fp.c a_time.c evp_asn1.c tasn_fre.c x_info.c
SRCS+= a_int.c a_type.c p8_pkey.c tasn_new.c x_long.c asn_moid.c
SRCS+= asn1_gen.c asn_mime.c
SRCS+= x509_d2.c x509_lu.c x509_set.c x509_vfy.c x509spki.c by_dir.c
SRCS+= x509_def.c x509_obj.c x509_trs.c x509cset.c x509type.c by_file.c
SRCS+= x509_att.c x509_err.c x509_r2x.c x509_txt.c x509name.c x_all.c
SRCS+= x509_cmp.c x509_ext.c x509_req.c x509_v3.c x509rset.c
SRCS+= x509_vpm.c
SRCS+=	v3_akey.c v3_alt.c v3_bcons.c v3_bitst.c v3_conf.c v3_cpols.c
SRCS+=	v3_crld.c v3_enum.c v3_extku.c v3_genn.c v3_ia5.c v3_int.c
SRCS+=	v3_lib.c v3_pku.c v3_prn.c v3_skey.c v3_sxnet.c v3_utl.c
SRCS+=	v3err.c v3_info.c v3_purp.c v3_ocsp.c v3_akeya.c v3_pci.c v3_pcia.c
SRCS+=	pcy_cache.c pcy_data.c pcy_int.h pcy_lib.c pcy_map.c pcy_node.c
SRCS+=	pcy_tree.c v3_addr.c v3_asid.c v3_ncons.c v3_pcons.c v3_pmaps.c
SRCS+=	conf_err.c conf_lib.c conf_def.c conf_api.c conf_mod.c conf_mall.c
SRCS+=	conf_sap.c
SRCS+=	txt_db.c							
SRCS+= pk7_lib.c pkcs7err.c
SRCS+= pk7_asn1.c pk7_doit.c pk7_mime.c 
SRCS+= pk7_attr.c pk7_smime.c
SRCS+=	c_rle.c c_zlib.c comp_lib.c comp_err.c
SRCS+=	p12_add.c p12_crpt.c p12_init.c p12_mutl.c p12_p8e.c
SRCS+=	p12_asn.c p12_crt.c p12_key.c p12_npas.c p12_utl.c
SRCS+=	p12_attr.c p12_decr.c p12_kiss.c p12_p8d.c pk12err.c
SRCS+= eng_all.c eng_openssl.c eng_ctrl.c eng_pkey.c eng_aesni.c
SRCS+= eng_dyn.c eng_table.c tb_cipher.c tb_store.c eng_err.c tb_rsa.c
SRCS+= tb_ecdh.c tb_ecdsa.c
SRCS+= hw_cryptodev.c eng_cnf.c
SRCS+= tb_dh.c eng_fat.c tb_digest.c eng_init.c
SRCS+= tb_dsa.c eng_lib.c tb_rand.c eng_list.c
SRCS+= dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c
SRCS+= dso_openssl.c dso_win32.c dso_vms.c
SRCS+= ocsp_asn.c ocsp_err.c ocsp_ht.c ocsp_prn.c ocsp_vfy.c
SRCS+= ocsp_cl.c ocsp_ext.c ocsp_lib.c ocsp_srv.c
SRCS+=	pqueue.c
#SRCS+=	seed.c seed_cbc.c seed_cfb.c seed_ecb.c seed_ofb.c
SRCS+=	str_err.c str_lib.c str_mem.c str_meth.c
# Only used when -DOPENSSL_FIPS is set
#SRCS+= fips.c fips_err_wrapper.c
#SRCS+= fips_aes_core.c fips_aes_selftest.c
#SRCS+= fips_des_enc.c fips_des_selftest.c fips_set_key.c
#SRCS+= fips_dh_check.c fips_dh_gen.c fips_dh_key.c
#SRCS+= fips_dsa_ossl.c fips_dsa_gen.c fips_dsa_selftest.c
#SRCS+= fips_rand.c
#SRCS+= fips_rsa_eay.c fips_rsa_gen.c fips_rsa_selftest.c
#SRCS+= fips_sha1dgst.c fips_sha1_selftest.c

.PATH:	${LCRYPTO_SRC}/md2 ${LCRYPTO_SRC}/md5 ${LCRYPTO_SRC}/sha \
	${LCRYPTO_SRC}/mdc2 ${LCRYPTO_SRC}/hmac ${LCRYPTO_SRC}/ripemd \
	${LCRYPTO_SRC}/des ${LCRYPTO_SRC}/rc2 ${LCRYPTO_SRC}/rc4 \
	${LCRYPTO_SRC}/rc5 ${LCRYPTO_SRC}/idea ${LCRYPTO_SRC}/bf \
	${LCRYPTO_SRC}/cast ${LCRYPTO_SRC}/bn ${LCRYPTO_SRC}/rsa \
	${LCRYPTO_SRC}/dsa ${LCRYPTO_SRC}/dh ${LCRYPTO_SRC}/buffer \
	${LCRYPTO_SRC}/bio ${LCRYPTO_SRC}/stack ${LCRYPTO_SRC}/lhash \
	${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
	${LCRYPTO_SRC}/evp ${LCRYPTO_SRC}/pem ${LCRYPTO_SRC}/asn1 \
	${LCRYPTO_SRC}/asn1 ${LCRYPTO_SRC}/x509 ${LCRYPTO_SRC}/conf \
	${LCRYPTO_SRC}/pkcs7 ${LCRYPTO_SRC}/x509v3 ${LCRYPTO_SRC}/pkcs12 \
	${LCRYPTO_SRC}/comp ${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}/md4 \
	${LCRYPTO_SRC}/engine ${LCRYPTO_SRC}/dso ${LCRYPTO_SRC}/ui \
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes \
	${LCRYPTO_SRC}/camellia ${LCRYPTO_SRC}/seed ${LCRYPTO_SRC}/cms \
	${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/ecdh ${LCRYPTO_SRC}/ecdsa \
	${LCRYPTO_SRC}/pqueue ${LCRYPTO_SRC}/store \
d289 6
a294 1
	${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_CPU} \
d296 50
a345 2
	${FIPS_SRC}/ ${FIPS_SRC}/aes ${FIPS_SRC}/des ${FIPS_SRC}/dh \
	${FIPS_SRC}/dsa ${FIPS_SRC}/rand ${FIPS_SRC}/rsa ${FIPS_SRC}/sha1
d348 1
d379 1
d385 1
a393 1
	crypto/pqueue/pq_compat.h \
d407 1
a407 1
	crypto/tmdiff.h \
d411 1
d414 1
a414 4
	crypto/x509v3/x509v3.h \
	e_os2.h \
	fips/fips.h \
	fips/rand/fips_rand.h 
d466 1
a466 1
SRCS+=	rc4_skey.c
d470 2
d477 2
d486 1
a486 1
	bn mo-586 \
d492 4
a495 1
	sha sha1-586
d499 1
a499 1
${f}.S: ${LCRYPTO_SRC}/${dir}/asm/${f}.pl ${LCRYPTO_SRC}/perlasm/x86unix.pl
d501 2
a502 1
		${LCRYPTO_SRC}/${dir}/asm/${f}.pl openbsd-elf 386 > ${.TARGET}
d506 3
a508 3
x86cpuid.S: ${LCRYPTO_SRC}/x86cpuid.pl
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm \
		${LCRYPTO_SRC}/x86cpuid.pl openbsd-elf 386 > ${.TARGET}
d511 1
a511 2
SRCS+= aes_core.c aes_cbc.c
SRCS+= bf_enc.c
d513 2
a514 1
#CFLAGS+= -DAES_ASM # XXX ASM implementation SEGVs with MALLOC_OPTIONS=AFGJPRX
d517 1
d519 3
d523 2
d529 1
a529 1
	aes aesni-x86_64
d534 2
a535 1
	(cd ${LCRYPTO_SRC}/${dir} ; /usr/bin/perl ./asm/${f}.pl) > ${.TARGET}
d541 8
d550 1
d552 1
d554 1
a554 1
SRCS+= bf_enc.c	
d556 1
d558 1
@


1.52
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d161 1
a161 1
SRCS+= eng_all.c eng_openssl.c eng_ctrl.c eng_pkey.c
d374 2
a375 1
	sha sha1-x86_64
@


1.51
log
@adjust Makefile and crank major for openssl-0.9.8j
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.50 2009/01/05 21:36:37 djm Exp $
d11 5
a15 3
.if ${MACHINE_ARCH} == "i386" || ${MACHINE_ARCH} == "arm" || \
    ${MACHINE_ARCH} == "vax" || ${MACHINE_ARCH} == "amd64" || \
    ${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "sh"
d202 1
a202 1
	${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_ARCH} \
d277 1
a277 1
	${.CURDIR}/arch/${MACHINE_ARCH}/opensslconf.h \
@


1.50
log
@update to openssl-0.9.8i; tested by several, especially krw@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.49 2008/09/08 07:23:38 djm Exp $
d49 2
a50 2
SRCS+= o_time.c o_dir.c
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c mem_dbg.c mem_clr.c
d65 1
a65 1
	des_enc.c des_old2.c fcrypt_b.c \
d81 1
a81 1
SRCS+=	bn_exp2.c bn_ctx.c
d90 1
a90 1
SRCS+=	rsa_pss.c rsa_x931.c rsa_depr.c
d92 1
a92 1
SRCS+=	dsa_sign.c dsa_err.c dsa_asn1.c dsa_ossl.c dsa_depr.c
d100 1
a100 1
SRCS+=	buffer.c buf_err.c				
d108 3
a110 2
SRCS+=	md_rand.c randfile.c rand_lib.c	rand_egd.c rand_err.c rand_unix.c
SRCS+=	err.c err_all.c err_prn.c				
d115 1
a115 1
SRCS+= bio_ok.c e_des3.c evp_enc.c m_md2.c p_verify.c m_ecdsa.c
d117 1
a117 1
SRCS+= c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c e_old.c
d120 1
a120 1
SRCS+= digest.c e_rc2.c evp_pbe.c m_null.c p_enc.c
@


1.49
log
@turn off CAST assembler code (i.e. use C implementation) as it has bad
relocations that lead to libcrypto.so being marked TEXTREL;
linker-fu from drahn@@ "go ahead" deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.48 2008/09/07 19:22:21 deraadt Exp $
d39 1
d311 1
a311 1
# egcs bombs optimising this file on vax
@


1.48
log
@sparc now requires this bloated library to be -fPIC
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.47 2008/09/06 12:20:07 djm Exp $
a327 1
CFLAGS+= -DOPENBSD_CAST_ASM
d331 2
a338 1
	cast cast-586 \
@


1.47
log
@remerge local tweaks, update per-arch configuration headers, update
Makefiles, crank shlib_version
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.46 2006/10/14 19:43:57 drahn Exp $
d22 4
@


1.46
log
@architecture sh (landisk) is little endian.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2006/06/27 05:07:47 djm Exp $
d24 5
a28 2
CFLAGS+= -DOPENSSL_NO_IDEA -DTERMIOS -DANSI_SOURCE -DNO_ERR -DOPENSSL_NO_ASM
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5
d30 12
a41 4
CFLAGS+= -DNO_WINDOWS_BRAINDEATH
CFLAGS+= -DOPENSSL_NO_HW_CSWIFT -DOPENSSL_NO_HW_NCIPHER -DOPENSSL_NO_HW_ATALLA
CFLAGS+= -DOPENSSL_NO_HW_NURON -DOPENSSL_NO_HW_UBSEC -DOPENSSL_NO_HW_AEP
CFLAGS+= -DOPENSSL_NO_HW_SUREWARE -DOPENSSL_NO_HW_4758_CCA
d44 1
a44 1
SRCS+= o_time.c
d49 1
a49 1
SRCS+=	sha_dgst.c sha1dgst.c sha_one.c sha1_one.c	
d54 2
a55 1
SRCS+= aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c
a65 1
SRCS+=	rc4_skey.c
d72 2
a73 2
SRCS+=	bn_add.c bn_div.c bn_exp.c bn_lib.c
SRCS+=	bn_mul.c bn_print.c bn_rand.c bn_shift.c
d77 5
a81 1
SRCS+=	bn_sqrt.c bn_kron.c bn_x931p.c
d85 1
a85 1
SRCS+=	rsa_pss.c rsa_x931.c
d87 8
a94 2
SRCS+=	dsa_sign.c dsa_err.c dsa_asn1.c dsa_ossl.c
SRCS+=	dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_asn1.c
d96 1
a96 1
SRCS+=	bio_lib.c bio_cb.c bio_err.c bss_mem.c 		
d100 1
a100 1
SRCS+=	bf_nbio.c bss_bio.c bss_log.c
d109 2
a110 1
SRCS+= bio_ok.c e_des3.c evp_enc.c m_md2.c p_verify.c
d130 2
a131 1
SRCS+=a_int.c a_type.c p8_pkey.c tasn_new.c x_long.c asn_moid.c
d136 1
d141 2
d154 2
a155 1
SRCS+= eng_dyn.c eng_table.c tb_cipher.c eng_err.c tb_rsa.c
d163 3
a165 3
SRCS+= ec_cvt.c ec_lib.c ecp_mont.c ecp_recp.c
SRCS+= ec_err.c ec_mult.c ecp_nist.c ecp_smpl.c

d190 3
d209 1
d211 1
d223 2
d243 2
d251 1
d255 1
d318 1
d323 1
d325 3
a327 1
CFLAGS+= -DOPENBSD_DES_ASM
d333 1
d335 1
d348 5
d354 2
a355 9
.else
.if (${MACHINE_ARCH} == "vax")
SRCS+= aes_core.c
SRCS+= bf_enc.c
SRCS+= bn_asm_vax.S
SRCS+= rc4_enc.c	
.else
.if (${MACHINE_ARCH} == "amd64")
SRCS+= aes_core.c
d358 19
a376 1
SRCS+= rc4_enc.c	
d378 2
a379 1
SRCS+= aes_core.c
d382 1
a382 3
SRCS+= rc4_enc.c	
.endif
.endif
@


1.45
log
@crank shlib_version
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2006/05/17 06:20:20 djm Exp $
d13 1
a13 1
    ${MACHINE_ARCH} == "alpha"
@


1.44
log
@use WANTLINT= (on all architectures)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2005/05/10 14:03:22 markus Exp $
d66 1
a66 1
SRCS+=	bn_sqrt.c bn_kron.c
d70 1
@


1.43
log
@import i386 AES asm code from openssl.org; ok and help with testing djm@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2005/04/29 07:54:15 djm Exp $
d4 1
@


1.42
log
@typo; from grunk AT pestilenz.org via markus@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2005/04/29 05:42:05 djm Exp $
d42 1
a42 1
SRCS+= aes_cbc.c aes_cfb.c aes_ctr.c aes_ecb.c aes_ofb.c aes_misc.c aes_core.c
d278 1
d285 1
d305 1
d311 1
d316 1
@


1.41
log
@adjust for new files in 0.9.7g
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.40 2005/04/01 08:15:52 markus Exp $
a129 1
SRCs+= tb_rsa.c
@


1.40
log
@re-enable DSO_DLFCN on shared lib architectures; ok deraadt
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.39 2005/03/30 13:33:01 markus Exp $
d8 1
d87 1
a87 1
SRCS+= c_all.c evp_err.c evp_acnf.c m_md4.c p5_crpt.c
d114 1
a114 1
SRCS+=	v3err.c v3_info.c v3_purp.c v3_ocsp.c v3_akeya.c
d138 10
d161 2
a162 1
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes ${LCRYPTO_SRC} \
d164 3
a166 1
	${LCRYPTO_SRC}/bn/asm
d225 3
a227 1
	e_os2.h
@


1.39
log
@backout last commit for now..
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.37 2005/02/07 20:34:54 beck Exp $
d17 5
d23 1
a23 1
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5 -DSO_DLFCN -DHAVE_DLFCN_H 
@


1.38
log
@enable openssl DSO (typo, it's -DDSO_DLFCN not -DSO_DLFCN); Douglas Santos
@
text
@d18 1
a18 1
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5 -DDSO_DLFCN -DHAVE_DLFCN_H 
@


1.37
log
@For amd64, build the bn routines in libcrypto with the amd64 specific
x86_64-gcc.c replacement for the generic bn_asm.c. Seems to give a
two to threefold speedup for rsa on amd64.
ok millert@@, hshoexer@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.36 2004/02/27 17:36:13 deraadt Exp $
d18 1
a18 1
CFLAGS+= -DOPENSSL_NO_RC5 -DOPENSSL_NO_KRB5 -DSO_DLFCN -DHAVE_DLFCN_H 
@


1.36
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2004/01/29 03:05:33 deraadt Exp $
d146 2
a147 1
	${LCRYPTO_SRC}/acss ${.CURDIR}/arch/${MACHINE_ARCH}
d287 5
d295 1
@


1.35
log
@cleanup byte order detection per arch a bit; mickey ok
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2004/01/23 17:02:25 hshoexer Exp $
d10 1
a10 1
    ${MACHINE_ARCH} == "vax" || ${MACHINE_ARCH} == "x86_64" || \
@


1.34
log
@enable acss.
ok @@deraadt @@markus

Also bump minor version.
ok @@deraadt
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2003/11/19 21:06:45 millert Exp $
d9 3
a11 1
.if ${MACHINE_ARCH} == "i386"
a13 9
.if ${MACHINE_ARCH} == "mips"
CFLAGS+= -DL_ENDIAN
.else
.if ${MACHINE_ARCH} == "vax"
CFLAGS+= -DL_ENDIAN
.else
.if ${MACHINE_ARCH} == "alpha"
# no ENDIAN stuff defined for alpha
.else
a14 3
.endif
.endif
.endif
@


1.33
log
@Break up the colon-separated path to -I into two -I args so the tree
can build with perl 5.8.2.  Ok markus@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2003/11/18 12:39:05 markus Exp $
d45 1
d95 1
a95 1
SRCS+= e_aes.c e_rc4.c evp_pkey.c m_ripemd.c p_lib.c
d156 1
a156 1
	${.CURDIR}/arch/${MACHINE_ARCH}
d159 1
@


1.32
log
@use bn_asm_vax.S (from netbsd); test + ok by miod
use asm code for i386, except for the CBC code, because
it is not clean PIC code.
add <machime/asm.h> support to x86unix.pl
tested by: nick (on 30386), henning, djm, tedu, jmc and more;
no shlib minor crank necessary, only internal symbols changed.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2003/06/02 08:45:58 markus Exp $
d284 1
a284 1
	/usr/bin/perl -I${LCRYPTO_SRC}/perlasm:${LCRYPTO_SRC}/${dir}/asm \
@


1.31
log
@swap /usr/include/openssl and /usr/include/ssl, clean up the Makefiles
get rid old include files; with itojun@@ and tdeval@@; ok itojun@@, deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2003/05/12 02:18:34 markus Exp $
d56 1
a56 1
SRCS+=	rc4_skey.c rc4_enc.c
d61 1
a61 1
SRCS+=	bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c bf_enc.c		
d66 1
a66 1
SRCS+=	bn_sqr.c bn_recp.c bn_mont.c bn_mpi.c bn_asm.c bn_mod.c
d154 2
a155 1
	${LCRYPTO_SRC}/ocsp ${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes ${LCRYPTO_SRC}
d263 36
@


1.30
log
@merge 0.9.7b with local changes; crank majors for libssl/libcrypto
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2003/01/31 14:05:35 deraadt Exp $
d219 3
a221 2
	@@test -d ${DESTDIR}/usr/include/ssl || mkdir ${DESTDIR}/usr/include/ssl
	@@d=`mktemp -d /tmp/libsslXXXXXXXXXX`; \
d223 5
a227 8
		f=`basename $$i`; \
		j="sed 's/<openssl/<ssl/' \
		       ${SSL_SRC}/$$i >$$d/$$f && \
		(cmp -s $$d/$$f ${DESTDIR}/usr/include/ssl/$$f || \
		${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 \
			   $$d/$$f ${DESTDIR}/usr/include/ssl)"; \
		echo $$j; \
		eval "$$j"; \
d230 6
a235 10
		f=`basename $$i`; \
		j="sed 's/<openssl/<ssl/' \
		       $$i >$$d/$$f && \
		(cmp -s $$d/$$f ${DESTDIR}/usr/include/ssl/$$f || \
		${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 \
			   $$d/$$f ${DESTDIR}/usr/include/ssl)"; \
		echo $$j; \
		eval "$$j"; \
	done; \
	rm -rf $$d
@


1.29
log
@we do not need that mess of -I
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2002/09/26 11:39:50 markus Exp $
d37 2
a38 1
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c mem_dbg.c tmdiff.c cversion.c uid.c
@


1.28
log
@remove MDC2; patents
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2002/09/10 16:31:53 markus Exp $
a37 1
CFLAGS+= -I${LCRYPTO_SRC}/md2
a38 1
CFLAGS+= -I${LCRYPTO_SRC}/md5
a39 1
CFLAGS+= -I${LCRYPTO_SRC}/sha
a40 1
#CFLAGS+= -I${LCRYPTO_SRC}/mdc2
a41 1
CFLAGS+= -I${LCRYPTO_SRC}/hmac
a42 1
CFLAGS+= -I${LCRYPTO_SRC}/ripemd
a43 1
CFLAGS+= -I${LCRYPTO_SRC}/aes
a44 1
CFLAGS+= -I${LCRYPTO_SRC}/des
a52 1
CFLAGS+= -I${LCRYPTO_SRC}/rc2
a54 1
CFLAGS+= -I${LCRYPTO_SRC}/rc4
a55 1
#CFLAGS+= -I${LCRYPTO_SRC}/rc5
a57 1
#CFLAGS+= -I${LCRYPTO_SRC}/idea
a59 1
CFLAGS+= -I${LCRYPTO_SRC}/bf
a60 1
CFLAGS+= -I${LCRYPTO_SRC}/cast
a61 1
CFLAGS+= -I${LCRYPTO_SRC}/bn
a67 1
CFLAGS+= -I${LCRYPTO_SRC}/rsa
a70 1
CFLAGS+= -I${LCRYPTO_SRC}/dsa
a72 1
CFLAGS+= -I${LCRYPTO_SRC}/dh
a73 1
CFLAGS+= -I${LCRYPTO_SRC}/buffer
a74 1
CFLAGS+= -I${LCRYPTO_SRC}/bio
a79 1
CFLAGS+= -I${LCRYPTO_SRC}/stack
a80 1
CFLAGS+= -I${LCRYPTO_SRC}/lhash
a81 1
CFLAGS+= -I${LCRYPTO_SRC}/rand
a82 1
CFLAGS+= -I${LCRYPTO_SRC}/err
a83 1
CFLAGS+= -I${LCRYPTO_SRC}/objects
a84 1
CFLAGS+= -I${LCRYPTO_SRC}/evp
a93 1
CFLAGS+= -I${LCRYPTO_SRC}/md4
a94 1
CFLAGS+= -I${LCRYPTO_SRC}/pem
a96 1
CFLAGS+= -I${LCRYPTO_SRC}/ui
a97 1
CFLAGS+= -I${LCRYPTO_SRC}/asn1
a108 1
CFLAGS+= -I${LCRYPTO_SRC}/x509
a112 1
CFLAGS+= -I${LCRYPTO_SRC}/x509v3
a116 1
CFLAGS+= -I${LCRYPTO_SRC}/conf
a118 1
CFLAGS+= -I${LCRYPTO_SRC}/txt_db
a119 1
CFLAGS+= -I${LCRYPTO_SRC}/pkcs7
a122 1
CFLAGS+= -I${LCRYPTO_SRC}/comp
a123 1
CFLAGS+= -I${LCRYPTO_SRC}/pkcs12
a126 1
CFLAGS+= -I${LCRYPTO_SRC}/engine
a132 1
CFLAGS+= -I${LCRYPTO_SRC}/dso
a134 1
CFLAGS+= -I${LCRYPTO_SRC}/oscp
a136 1
CFLAGS+= -I${LCRYPTO_SRC}/ec
@


1.27
log
@merge openssl-0.9.7-beta3, tested on vax by miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2002/09/05 22:12:11 markus Exp $
d29 1
d44 2
a45 2
CFLAGS+= -I${LCRYPTO_SRC}/mdc2
SRCS+=	mdc2dgst.c mdc2_one.c					
d117 1
a117 1
SRCS+= c_alld.c e_null.c evp_lib.c m_mdc2.c p_dec.c
@


1.26
log
@merge with 0.9.7-beta1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2002/09/03 18:59:55 markus Exp $
d54 1
a54 1
	fcrypt.c ofb64enc.c ofb_enc.c pcbc_enc.c \
d56 1
a56 1
	des_enc.c des_old.c fcrypt_b.c \
d114 1
a114 1
SRCS+= c_all.c evp_err.c m_md4.c p5_crpt.c
d150 1
d158 1
a158 1
SRCS+=	c_rle.c c_zlib.c comp_lib.c
@


1.25
log
@build OpenSSL without symlink trees:
* manpage related things moved to src/libssl/man/Makefile
* there are now 3 obj directories src/libssl/{crypto,ssl,man}/ instead
  of one single src/libssl/obj
* instead of running Configure (with generates lots of symlinks, and
  opensslconf.h) this patch stores pre-computed opensslconf.h files
  in src/libssl/crypto/arch
* requires a make includes before the library can be built
* libssl and libcrypto can be build separately
  (e.g. cd src/libssl/ssl && make obj && make)
* make depend is now supported
* no more symlink trees
tested by miod@@ and fries@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2002/08/30 15:08:11 markus Exp $
d32 1
a32 1
CFLAGS+= -DOPENSSL_NO_HW_SUREWARE
d285 1
a285 1
CLEANFILES=${GENERATED}
d288 4
a291 2
obj_mac.h: ${SSL_OBJECTS}/objects.h
	/usr/bin/perl ${SSL_OBJECTS}/objects.pl ${SSL_OBJECTS}/objects.txt ${SSL_OBJECTS}/obj_mac.num obj_mac.h
@


1.24
log
@evp_test.o should not be included in libcrypto (it defines _main !!)
no version change for the shared libs; ok deraadt@@
@
text
@d1 1
d5 3
a7 4
SSLEAYDIST= src

LCRYPTO_SRC= ${.CURDIR}/../${SSLEAYDIST}/crypto
LCRYPTO_INC= ${.CURDIR}/../${SSLEAYDIST}/include
a35 1
CFLAGS+= -I${LCRYPTO_INC}
a178 11

HDRS=	asn1.h asn1_mac.h bio.h blowfish.h bn.h buffer.h cast.h \
	comp.h conf.h conf_api.h crypto.h des.h dh.h dsa.h dso.h \
	e_os2.h ebcdic.h engine.h err.h evp.h hmac.h idea.h lhash.h \
	md2.h md4.h md5.h mdc2.h obj_mac.h objects.h opensslconf.h \
	opensslv.h pem.h pem2.h pkcs12.h pkcs7.h rand.h rc2.h rc4.h \
	rc5.h ripemd.h rsa.h safestack.h sha.h \
	stack.h symhacks.h tmdiff.h txt_db.h x509.h \
	x509_vfy.h x509v3.h asn1t.h des_old.h ossl_typ.h \
	ui.h ui_compat.h aes.h ec.h ocsp.h

d194 63
a256 1
includes:
d259 11
a269 1
	cd ${LCRYPTO_INC}/openssl; for i in $(HDRS); do \
d272 1
a272 1
		       ${LCRYPTO_INC}/openssl/$$i >$$d/$$f && \
d280 26
@


1.23
log
@ssl headers are already installed for libssl
@
text
@d111 1
a111 1
SRCS+= bio_b64.c e_bf.c evp_test.c m_sha.c p_open.c
@


1.22
log
@don't install e_os.h (it's private)
remove duplicate headers, trailing whitespace
@
text
@d186 2
a187 2
	rc5.h ripemd.h rsa.h safestack.h sha.h ssl.h ssl2.h ssl23.h \
	ssl3.h stack.h symhacks.h tls1.h tmdiff.h txt_db.h x509.h \
@


1.21
log
@clean
@
text
@d188 1
a188 1
	x509_vfy.h ossl_typ.h x509v3.h asn1t.h des_old.h ossl_typ.h \
a190 3
SRC_HDRS= e_os.h


a218 10
	cd ${LCRYPTO_SRC}/../; for i in $(SRC_HDRS); do \
		f=`basename $$i`; \
		j="sed 's/<openssl/<ssl/' \
		       ${LCRYPTO_SRC}/../$$i >$$d/$$f && \
		(cmp -s $$d/$$f ${DESTDIR}/usr/include/ssl/$$f || \
		${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} -m 444 \
			   $$d/$$f ${DESTDIR}/usr/include/ssl)"; \
		echo $$j; \
		eval "$$j"; \
	done; \
a220 1

a221 1

@


1.20
log
@Disable support for the other hardware accelerators.  No need to crank the
major because these interfaces are really not exported (or used).
@
text
@d53 4
a56 4
SRCS+=	cbc_cksm.c cbc_enc.c  cfb64enc.c cfb_enc.c  \
	ecb3_enc.c ecb_enc.c  enc_read.c enc_writ.c \
	fcrypt.c ofb64enc.c ofb_enc.c  pcbc_enc.c \
	qud_cksm.c rand_key.c rpc_enc.c  set_key.c  \
d59 1
a59 1
	str2key.c  cfb64ede.c ofb64ede.c \
d111 9
a119 9
SRCS+= bio_b64.c    e_bf.c   evp_test.c   m_sha.c      p_open.c
SRCS+= bio_enc.c    e_cast.c     e_xcbc_d.c   m_dss.c      m_sha1.c     p_seal.c
SRCS+= bio_md.c     e_des.c      encode.c     m_dss1.c     names.c      p_sign.c
SRCS+= bio_ok.c     e_des3.c     evp_enc.c    m_md2.c     p_verify.c
SRCS+= c_all.c      evp_err.c    m_md4.c      p5_crpt.c
SRCS+= c_allc.c     evp_key.c    m_md5.c      p5_crpt2.c
SRCS+= c_alld.c     e_null.c     evp_lib.c    m_mdc2.c     p_dec.c
SRCS+= digest.c     e_rc2.c      evp_pbe.c    m_null.c     p_enc.c
SRCS+= e_aes.c      e_rc4.c      evp_pkey.c   m_ripemd.c   p_lib.c
d128 10
a137 10
SRCS+= a_bitstr.c a_mbstr.c  a_utctm.c  f_enum.c   t_bitst.c  x_name.c
SRCS+= a_bool.c   a_meth.c   a_utf8.c   f_int.c    t_crl.c    tasn_typ.c x_pkey.c
SRCS+= a_bytes.c  a_object.c a_verify.c f_string.c t_pkey.c   tasn_utl.c x_pubkey.c
SRCS+= a_d2i_fp.c a_octet.c  asn1_err.c i2d_pr.c   t_req.c    x_algor.c  x_req.c
SRCS+= a_digest.c a_print.c  asn1_lib.c i2d_pu.c   t_spki.c   x_attrib.c x_sig.c
SRCS+= a_dup.c    a_set.c    asn1_par.c n_pkey.c   t_x509.c   x_bignum.c x_spki.c
SRCS+= a_enum.c   a_sign.c   asn_pack.c nsseq.c    t_x509a.c  x_val.c
SRCS+= a_gentm.c  a_strex.c  d2i_pr.c   p5_pbe.c   tasn_dec.c x_crl.c    x_x509.c
SRCS+= a_hdr.c    a_strnid.c d2i_pu.c   p5_pbev2.c tasn_enc.c x_exten.c  x_x509a.c
SRCS+= a_i2d_fp.c a_time.c   evp_asn1.c  tasn_fre.c x_info.c
d140 1
a140 1
SRCS+= x509_d2.c  x509_lu.c  x509_set.c x509_vfy.c x509spki.c by_dir.c
d143 1
a143 1
SRCS+= x509_cmp.c x509_ext.c x509_req.c x509_v3.c  x509rset.c
d154 3
a156 3
SRCS+= pk7_lib.c    pkcs7err.c
SRCS+= pk7_asn1.c   pk7_doit.c   pk7_mime.c  
SRCS+= pk7_attr.c   pk7_smime.c
d160 3
a162 3
SRCS+=	p12_add.c  p12_crpt.c p12_init.c p12_mutl.c p12_p8e.c
SRCS+=	p12_asn.c  p12_crt.c  p12_key.c  p12_npas.c p12_utl.c
SRCS+=	p12_attr.c p12_decr.c p12_kiss.c p12_p8d.c  pk12err.c
d174 2
a175 2
SRCS+= ocsp_asn.c ocsp_err.c ocsp_ht.c  ocsp_prn.c ocsp_vfy.c
SRCS+= ocsp_cl.c  ocsp_ext.c ocsp_lib.c ocsp_srv.c
d177 2
a178 2
SRCS+= ec_cvt.c   ec_lib.c   ecp_mont.c ecp_recp.c
SRCS+= ec_err.c   ec_mult.c  ecp_nist.c ecp_smpl.c
d181 9
a189 73

#HDRS= asn1.h dh.h md5.h rc4.h stack.h asn1_mac.h dsa.h mdc2.h rc5.h	\
#      tls1.h bio.h e_os.h objects.h ripemd.h tmdiff.h blowfish.h	\
#      e_os2.h opensslconf.h rsa.h txt_db.h bn.h ebcdic.h opensslv.h	\
#      rsaref.h x509.h buffer.h err.h pem.h safestack.h x509_vfy.h	\
#      cast.h evp.h pem2.h sha.h x509v3.h comp.h hmac.h pkcs12.h ssl.h	\
#      conf.h idea.h pkcs7.h ssl2.h crypto.h lhash.h rand.h ssl23.h	\
#      des.h md2.h rc2.h ssl3.h

HDRS= asn1.h \
asn1_mac.h  \
bio.h \
blowfish.h \
bn.h \
buffer.h \
cast.h \
comp.h \
conf.h \
conf_api.h \
crypto.h \
des.h \
dh.h \
dsa.h \
dso.h \
e_os2.h \
ebcdic.h \
engine.h \
err.h \
evp.h \
hmac.h \
idea.h \
lhash.h \
md2.h \
md4.h \
md5.h \
mdc2.h \
obj_mac.h \
objects.h \
opensslconf.h \
opensslv.h \
pem.h \
pem2.h \
pkcs12.h \
pkcs7.h \
rand.h \
rc2.h \
rc4.h \
rc5.h \
ripemd.h \
rsa.h \
safestack.h \
sha.h \
ssl.h \
ssl2.h \
ssl23.h \
ssl3.h \
stack.h \
symhacks.h \
tls1.h \
tmdiff.h \
txt_db.h \
x509.h \
x509_vfy.h \
ossl_typ.h \
x509v3.h \
asn1t.h \
des_old.h \
ossl_typ.h \
ui.h \
ui_compat.h \
aes.h \
ec.h \
ocsp.h
d194 14
a207 14

.PATH:	${LCRYPTO_SRC}/md2 ${LCRYPTO_SRC}/md5 ${LCRYPTO_SRC}/sha ${LCRYPTO_SRC}/mdc2	\
	${LCRYPTO_SRC}/hmac ${LCRYPTO_SRC}/ripemd ${LCRYPTO_SRC}/des  ${LCRYPTO_SRC}/rc2 \
	${LCRYPTO_SRC}/rc4 ${LCRYPTO_SRC}/rc5 ${LCRYPTO_SRC}/idea ${LCRYPTO_SRC}/bf    \
	${LCRYPTO_SRC}/cast ${LCRYPTO_SRC}/bn  ${LCRYPTO_SRC}/rsa ${LCRYPTO_SRC}/dsa   \
	${LCRYPTO_SRC}/dh ${LCRYPTO_SRC}/buffer ${LCRYPTO_SRC}/bio ${LCRYPTO_SRC}/stack \
	${LCRYPTO_SRC}/lhash ${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
	${LCRYPTO_SRC}/evp ${LCRYPTO_SRC}/pem ${LCRYPTO_SRC}/asn1  ${LCRYPTO_SRC}/asn1 \
	${LCRYPTO_SRC}/x509 ${LCRYPTO_SRC}/conf txt_db/txt_db.c ${LCRYPTO_SRC}/pkcs7 \
	${LCRYPTO_SRC}/x509v3 ${LCRYPTO_SRC}/pkcs12 ${LCRYPTO_SRC}/comp \
	${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}/md4 ${LCRYPTO_SRC}/engine \
	${LCRYPTO_SRC}/dso ${LCRYPTO_SRC}/ui ${LCRYPTO_SRC}/ocsp \
	${LCRYPTO_SRC}/ec ${LCRYPTO_SRC}/aes ${LCRYPTO_SRC}

@


1.19
log
@OpenSSL 0.9.7 stable 2002 05 08 merge
@
text
@d30 3
d164 5
a168 5
SRCS+= eng_all.c eng_openssl.c hw_openbsd_dev_crypto.c eng_ctrl.c eng_pkey.c
SRCS+= hw_ubsec.c eng_dyn.c eng_table.c tb_cipher.c eng_err.c tb_rsa.c hw_aep.c
SRCS+= hw_sureware.c hw_cryptodev.c eng_cnf.c
SRCS+= tb_dh.c eng_fat.c hw_atalla.c tb_digest.c eng_init.c hw_cswift.c 
SRCS+= tb_dsa.c eng_lib.c hw_ncipher.c tb_rand.c eng_list.c  hw_nuron.c
@


1.18
log
@OpenSSL 0.9.7
@
text
@d4 1
a4 1
SSLEAYDIST= openssl
@


1.17
log
@openssl-engine-0.9.6a merge
@
text
@d4 1
a4 1
SSLEAYDIST= src
d10 1
a10 1
CFLAGS+= -DL_ENDIAN -DBN_ASM
d27 3
a29 2
CFLAGS+= -DNO_IDEA -DTERMIOS -DANSI_SOURCE -DNO_ERR -DNO_WINDOWS_BRAINDEATH
CFLAGS+= -DNO_RC5
d32 1
d47 2
d53 2
a54 2
	qud_cksm.c rand_key.c read_pwd.c rpc_enc.c  set_key.c  \
	des_enc.c fcrypt_b.c read2pwd.c \
d56 2
a57 1
	str2key.c  cfb64ede.c ofb64ede.c supp.c
d77 1
a77 2
SRCS+=	bn_sqr.c bn_recp.c bn_mont.c bn_mpi.c bn_asm.c 
#SRCS+=	bn_comba.c d.c exp.c
d79 1
d83 1
a83 1
SRCS+=	rsa_none.c rsa_chk.c rsa_oaep.c rsa_null.c
d88 1
a88 1
SRCS+=	dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c	
d102 1
a102 1
SRCS+=	md_rand.c randfile.c rand_lib.c	rand_egd.c rand_err.c rand_win.c
d108 9
a116 7
SRCS+= bio_b64.c bio_enc.c bio_md.c bio_ok.c c_all.c c_allc.c c_alld.c
SRCS+= digest.c e_bf.c e_cast.c e_des.c e_des3.c
SRCS+= e_null.c e_rc2.c e_rc4.c e_xcbc_d.c encode.c evp_enc.c
SRCS+= evp_err.c evp_key.c evp_lib.c evp_pbe.c evp_pkey.c m_dss.c
SRCS+= m_dss1.c m_md2.c m_md4.c m_md5.c m_mdc2.c m_null.c m_ripemd.c
SRCS+= m_sha.c m_sha1.c names.c p5_crpt.c p5_crpt2.c p_dec.c p_enc.c
SRCS+= p_lib.c p_open.c p_seal.c p_sign.c p_verify.c
d120 4
a123 2
SRCS+=	pem_sign.c pem_seal.c pem_info.c pem_lib.c	
SRCS+=	pem_all.c pem_err.c 
d125 11
a135 21
SRCS+=	a_object.c a_bitstr.c a_utctm.c a_int.c	
SRCS+=	a_octet.c a_print.c a_type.c a_set.c	
SRCS+=	a_dup.c a_d2i_fp.c a_i2d_fp.c a_sign.c	
SRCS+=	a_digest.c a_verify.c x_algor.c x_val.c	
SRCS+=	x_pubkey.c x_sig.c x_req.c x_attrib.c	
SRCS+=	x_name.c x_cinf.c x_x509.c x_crl.c		
SRCS+=	x_info.c x_spki.c d2i_r_pr.c i2d_r_pr.c	
SRCS+=	d2i_r_pu.c i2d_r_pu.c d2i_s_pr.c i2d_s_pr.c	
SRCS+=	d2i_s_pu.c i2d_s_pu.c d2i_pu.c d2i_pr.c 	
SRCS+=	i2d_pu.c i2d_pr.c t_req.c t_x509.c 		
SRCS+=	t_pkey.c p7_i_s.c p7_signi.c p7_signd.c	
SRCS+=	p7_recip.c p7_enc_c.c p7_evp.c p7_dgst.c	
SRCS+=	p7_s_e.c p7_enc.c p7_lib.c f_int.c 		
SRCS+=	f_string.c i2d_dhp.c i2d_dsap.c d2i_dhp.c	
SRCS+=	d2i_dsap.c n_pkey.c a_hdr.c x_pkey.c 	
SRCS+=	a_bool.c x_exten.c asn1_par.c asn1_lib.c	
SRCS+=	asn1_err.c a_meth.c a_bytes.c evp_asn1.c
SRCS+=	a_enum.c a_gentm.c a_time.c a_utf8.c a_vis.c 
SRCS+=	asn_pack.c f_enum.c nsseq.c p5_pbe.c p5_pbev2.c 
SRCS+=	p8_pkey.c t_crl.c a_meth.c a_null.c a_strnid.c a_mbstr.c
SRCS+=	t_bitst.c t_spki.c t_x509a.c x_x509a.c a_strex.c
d137 4
a140 5
SRCS+=	x509_def.c x509_d2.c x509_r2x.c x509_cmp.c	
SRCS+=	x509_obj.c x509_req.c x509_vfy.c x509_set.c	
SRCS+=	x509rset.c x509_err.c x509name.c x509_v3.c	
SRCS+=	x509_ext.c x509type.c x509_lu.c	x509_trs.c x509spki.c
SRCS+=	x_all.c x509_txt.c by_file.c by_dir.c x509_att.c
d145 1
a145 1
SRCS+=	v3err.c v3_info.c v3_purp.c
d147 1
a147 1
SRCS+=	conf_err.c conf_lib.c conf_def.c conf_api.c cnf_save.c
d151 3
a153 1
SRCS+=	pk7_lib.c pkcs7err.c pk7_doit.c pk7_attr.c pk7_mime.c pk7_smime.c
d155 1
a155 1
SRCS+=	c_rle.c c_zlib.c comp_err.c comp_lib.c
d157 3
a159 3
SRCS+=	p12_add.c p12_attr.c p12_bags.c p12_crpt.c p12_crt.c
SRCS+=	p12_decr.c p12_init.c p12_key.c p12_kiss.c p12_lib.c p12_mac.c
SRCS+=	p12_mutl.c p12_sbag.c p12_utl.c pk12err.c p12_npas.c
d161 6
a166 2
SRCS+= engine_err.c engine_lib.c engine_list.c engine_openssl.c
SRCS+= hw_ncipher.c hw_atalla.c hw_cswift.c
d170 7
a201 1
e_os.h \
a227 1
rsaref.h \
d241 13
a253 1
x509v3.h
d261 1
a261 1
   	${LCRYPTO_SRC}/lhash ${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
d266 3
a268 1
	${LCRYPTO_SRC}/dso ${LCRYPTO_SRC}
d277 10
@


1.17.2.1
log
@Disable the engine stuff
@
text
@a28 1
CFLAGS+= -DNO_HW_CSWIFT -DNO_HW_NCIPHER -DNO_HW_ATALLA
d162 1
a162 1
#SRCS+= hw_ncipher.c hw_atalla.c hw_cswift.c
@


1.17.4.1
log
@Disable the engine stuff
@
text
@a28 1
CFLAGS+= -DNO_HW_CSWIFT -DNO_HW_NCIPHER -DNO_HW_ATALLA
d162 1
a162 1
#SRCS+= hw_ncipher.c hw_atalla.c hw_cswift.c
@


1.16
log
@add in forgotten dso stuff.
@
text
@d32 1
a32 1
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c mem_dbg.c tmdiff.c cversion.c
@


1.15
log
@openssl-engine-0.9.6 merge
@
text
@d163 3
d244 2
a245 1
	${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}/md4 ${LCRYPTO_SRC}/engine ${LCRYPTO_SRC}
@


1.14
log
@vax support; checked by beck.
@
text
@d97 1
a97 1
SRCS+=	md_rand.c randfile.c rand_lib.c	rand_egd.c rand_err.c
d103 9
a111 15
SRCS+=	encode.c digest.c evp_enc.c evp_key.c 		
SRCS+=	e_ecb_d.c e_cbc_d.c e_cfb_d.c e_ofb_d.c		
SRCS+=	e_ecb_i.c e_cbc_i.c e_cfb_i.c e_ofb_i.c		
SRCS+=	e_ecb_3d.c e_cbc_3d.c e_rc4.c names.c		
SRCS+=	e_cfb_3d.c e_ofb_3d.c e_xcbc_d.c e_ecb_r2.c	
SRCS+=	e_cbc_r2.c e_cfb_r2.c e_ofb_r2.c e_ecb_bf.c	
SRCS+=	e_cbc_bf.c e_cfb_bf.c e_ofb_bf.c e_ecb_c.c	
SRCS+=	e_cbc_c.c e_cfb_c.c e_ofb_c.c e_ecb_r5.c	
SRCS+=	e_cbc_r5.c e_cfb_r5.c e_ofb_r5.c m_null.c	
SRCS+=	m_md2.c m_md5.c m_sha.c m_sha1.c m_dss.c	
SRCS+=	m_dss1.c m_mdc2.c m_ripemd.c p_open.c 		
SRCS+=	p_seal.c p_sign.c p_verify.c p_lib.c p_enc.c
SRCS+=	p_dec.c bio_md.c bio_b64.c bio_enc.c		
SRCS+=	evp_err.c e_null.c c_all.c c_allc.c c_alld.c evp_lib.c
SRCS+=	bio_ok.c evp_pbe.c evp_pkey.c p5_crpt.c p5_crpt2.c
d136 1
a136 2
#SRCS+=	p8_key.c t_bitst.c t_spki.c t_x509a.c x_x509a.c
SRCS+=	t_bitst.c t_spki.c t_x509a.c x_x509a.c
d149 1
a149 1
SRCS+=	conf.c conf_err.c					
d160 3
d164 66
a229 7
HDRS= asn1.h dh.h md5.h rc4.h stack.h asn1_mac.h dsa.h mdc2.h rc5.h	\
      tls1.h bio.h e_os.h objects.h ripemd.h tmdiff.h blowfish.h	\
      e_os2.h opensslconf.h rsa.h txt_db.h bn.h ebcdic.h opensslv.h	\
      rsaref.h x509.h buffer.h err.h pem.h safestack.h x509_vfy.h	\
      cast.h evp.h pem2.h sha.h x509v3.h comp.h hmac.h pkcs12.h ssl.h	\
      conf.h idea.h pkcs7.h ssl2.h crypto.h lhash.h rand.h ssl23.h	\
      des.h md2.h rc2.h ssl3.h
d241 1
a241 1
	${LCRYPTO_SRC}/txt_db ${LCRYPTO_SRC}
@


1.13
log
@omit RC5
@
text
@d15 3
d22 1
@


1.12
log
@x509_att.c that was left out.
@
text
@d24 1
d54 3
a56 3
CFLAGS+= -I${LCRYPTO_SRC}/rc5
SRCS+=	rc5_skey.c rc5_ecb.c rc5cfb64.c rc5cfb64.c 	
SRCS+=	rc5ofb64.c rc5_enc.c
@


1.11
log
@OpenSSL 0.9.5 merge

*warning* this bumps shared lib minors for libssl and libcrypto from 2.1 to 2.2
if you are using the ssl26 packages for ssh and other things to work you will
need to get new ones (see ~beck/libsslsnap/<arch>) on cvs or ~beck/src-patent.tar.gz on cvs
@
text
@d144 1
a144 1
SRCS+=	x_all.c x509_txt.c by_file.c by_dir.c	
@


1.10
log
@Make mips compile. -moj
@
text
@d27 1
a27 1
SRCS+=	cryptlib.c ex_data.c cpt_err.c mem.c tmdiff.c cversion.c
d69 1
a69 1
SRCS+=	bn_exp2.c
d73 1
a73 1
SRCS+=	rsa_none.c rsa_chk.c rsa_oaep.c
d76 1
a76 1
SRCS+=	dsa_sign.c dsa_err.c dsa_asn1.c					
d92 1
a92 1
SRCS+=	md_rand.c randfile.c rand_lib.c					
d111 1
a111 1
SRCS+=	evp_err.c e_null.c c_all.c evp_lib.c
d136 3
a138 1
SRCS+=	p8_pkey.c t_crl.c
d143 1
a143 1
SRCS+=	x509_ext.c x509type.c x509_lu.c	
d149 1
a149 1
SRCS+=	v3err.c
d155 1
a155 1
SRCS+=	pk7_lib.c pkcs7err.c pk7_doit.c 
d161 1
a161 1
SRCS+=	p12_mutl.c p12_sbag.c p12_utl.c pk12err.c
@


1.9
log
@OpenSSL 0.9.4 merge
@
text
@d12 1
a12 4
.if ${MACHINE_ARCH} == "arc"
CFLAGS+= -DL_ENDIAN
.else
.if ${MACHINE_ARCH} == "pmax"
a18 1
.endif
@


1.8
log
@create ${DESTDIR}/usr/include/ssl if it does not exist.  This is needed because the mtree is done after "make includes"
@
text
@d7 1
d27 1
a27 1
CFLAGS+= -DNO_IDEA -DTERMIOS -DANSI_SOURCE 
d30 2
a31 1
SRCS+=	cryptlib.c mem.c cversion.c ex_data.c cpt_err.c			
d50 1
a50 1
	fcrypt.c xcbc_enc.c \
d53 1
a53 1
SRCS+=	rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c 	
d60 3
a62 3
CFLAGS+= -I${LCRYPTO_SRC}/idea
SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c		
SRCS+=	i_skey.c							
d68 2
a69 2
SRCS+=	bn_add.c bn_div.c bn_exp.c bn_lib.c bn_mod.c	
SRCS+=	bn_mul.c bn_print.c bn_rand.c bn_shift.c bn_sub.c
d71 3
a73 2
SRCS+=	bn_sqr.c bn_recp.c bn_mont.c bn_mpi.c		
SRCS+=	bn_mulw.c 
d75 3
a77 3
SRCS+=	rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c 	
SRCS+=	rsa_saos.c rsa_err.c rsa_pk1.c rsa_ssl.c 	
SRCS+=	rsa_none.c							
d80 1
a80 1
SRCS+=	dsa_sign.c dsa_err.c 					
d90 1
a90 1
SRCS+=	bf_nbio.c							
d96 1
a96 1
SRCS+=	md_rand.c randfile.c					
d100 1
a100 1
SRCS+=	obj_dat.c obj_lib.c obj_err.c
d116 1
d119 1
a119 1
SRCS+=	pem_all.c pem_err.c					
d137 4
a140 1
SRCS+=	asn1_err.c a_meth.c a_bytes.c evp_asn1.c	
d145 1
a145 1
SRCS+=	x509_ext.c x509pack.c x509type.c x509_lu.c	
d147 5
a151 1
SRCS+=	v3_net.c v3_x509.c					
d157 15
a171 1
SRCS+=	pk7_lib.c pkcs7err.c pk7_doit.c
a172 7
HDRS= 	asn1/asn1.h asn1/asn1_mac.h bf/blowfish.h bio/bio.h \
	bn/bn.h buffer/buffer.h cast/cast.h conf/conf.h des/des.h dh/dh.h \
	dsa/dsa.h err/err.h evp/evp.h hmac/hmac.h idea/idea.h lhash/lhash.h \
	md2/md2.h md5/md5.h mdc2/mdc2.h objects/objects.h pem/pem.h \
	pkcs7/pkcs7.h rand/rand.h rc2/rc2.h rc4/rc4.h rc5/rc5.h \
	ripemd/ripemd.h rsa/rsa.h sha/sha.h stack/stack.h txt_db/txt_db.h \
	x509/x509.h x509/x509_vfy.h crypto.h cryptall.h ../e_os.h
d182 1
d188 1
a188 1
	cd ${LCRYPTO_SRC}; for i in $(HDRS); do \
d190 2
a191 2
		j="sed 's/#include \"\\([^\"]*\\)\"/#include <ssl\\/\\1>/' \
		       ${LCRYPTO_SRC}/$$i >$$d/$$f && \
@


1.7
log
@"foo.h" -> <ssl/foo.h> in ssl includes, so we do not need -I/usr/include/ssl
and we won't be bothered by nameclashes with application headers
@
text
@d167 1
@


1.6
log
@*UNTESTED* Makefile and configure changes that may work with pmax and arc.
*These need to be tested by someone who has one!!*
@
text
@d167 6
a172 3
	@@cd ${LCRYPTO_SRC}; for i in $(HDRS); do \
		j="cmp -s ${LCRYPTO_SRC}/$$i \
		${DESTDIR}/usr/include/ssl/`basename $$i` || \
d174 1
a174 1
		${LCRYPTO_SRC}/$$i ${DESTDIR}/usr/include/ssl"; \
d177 2
a178 1
	done
@


1.5
log
@Fix static non-bn-asm builds. Need this file.
@
text
@d11 6
d23 2
@


1.4
log
@back out previous change.  Theo says:
marc, this is wrong.
mtree builds that directory.  we never do mkdir's in makefiles.
You also should not have modified ANY of those Makefiles, since they are
part of the ssl distribution.  please undo this change.

And I say: developers, be sure to do a mkdir /usr/include/ssl before
a bake build as include files are installed as the 2nd step.
@
text
@d62 1
@


1.3
log
@create /usr/include/ssl before trying to copy files into it.
If you've had a recent build fail check /usr/include/ssl.
if it is a file instead of a directory remove it and try again
after updating with these changes.
@
text
@d152 1
a152 1
	${LCRYPTO_SRC}/lhash ${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
a157 1
	@@install -d -o ${BINOWN} -g ${BINGRP} -m 755 ${DESTDIR}/usr/include/ssl
@


1.2
log
@Fix makefile problems - Don't use SSLeay style include link farm to
build - get includes from where they really live.
@
text
@d152 1
a152 1
   	${LCRYPTO_SRC}/lhash ${LCRYPTO_SRC}/rand ${LCRYPTO_SRC}/err ${LCRYPTO_SRC}/objects \
d158 1
@


1.1
log
@Initial revision
@
text
@a6 1
SSLEAY_INC= ${.CURDIR}/../${SSLEAYDIST}/include
d19 1
a19 1
CFLAGS+= -I${SSLEAY_INC}
d145 1
a145 1
	x509/x509.h x509/x509_vfy.h crypto.h cryptall.h ../include/e_os.h
@


1.1.1.1
log
@Import of SSLeay-0.9.0b with RSA and IDEA stubbed + OpenBSD build
functionality for shared libs.

Note that routines such as sslv2_init and friends that use RSA will
not work due to lack of RSA in this library.

Needs documentation and help from ports for easy upgrade to full
functionality where legally possible.
@
text
@@
