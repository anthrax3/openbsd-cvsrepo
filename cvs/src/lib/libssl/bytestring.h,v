head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15;
locks; strict;
comment	@ * @;


1.15
date	2016.11.04.18.28.58;	author guenther;	state Exp;
branches;
next	1.14;
commitid	ZlRy5iKYWHc9l7Fq;

1.14
date	2015.06.19.00.23.36;	author doug;	state Exp;
branches;
next	1.13;
commitid	heMIbMqD4xbmFliW;

1.13
date	2015.06.18.23.25.07;	author doug;	state Exp;
branches;
next	1.12;
commitid	wlVTUhjr83mtmDYB;

1.12
date	2015.06.17.07.25.56;	author doug;	state Exp;
branches;
next	1.11;
commitid	msX3P9Gy1gjN9sEP;

1.11
date	2015.06.17.07.06.22;	author doug;	state Exp;
branches;
next	1.10;
commitid	2qX1wLnbymkZlDxx;

1.10
date	2015.06.17.07.00.22;	author doug;	state Exp;
branches;
next	1.9;
commitid	dv5rWD5UDvtC0GAC;

1.9
date	2015.06.16.06.37.58;	author doug;	state Exp;
branches;
next	1.8;
commitid	WgdxVRW6Pa7qLDpc;

1.8
date	2015.06.16.06.11.39;	author doug;	state Exp;
branches;
next	1.7;
commitid	03CUhw46TFpAbd6U;

1.7
date	2015.06.15.07.35.49;	author doug;	state Exp;
branches;
next	1.6;
commitid	68o5eAoKat9FWIFX;

1.6
date	2015.06.13.09.02.45;	author doug;	state Exp;
branches;
next	1.5;
commitid	ECJQcqEahEFaNcrQ;

1.5
date	2015.04.29.02.11.09;	author doug;	state Exp;
branches;
next	1.4;
commitid	YxLXEnlmS97vPGJ1;

1.4
date	2015.02.07.06.10.32;	author doug;	state Exp;
branches;
next	1.3;
commitid	C6aBAxrhmc1ZdrMc;

1.3
date	2015.02.07.02.02.28;	author doug;	state Exp;
branches;
next	1.2;
commitid	BsXRW341qVwQyQfX;

1.2
date	2015.02.06.22.22.33;	author doug;	state Exp;
branches;
next	1.1;
commitid	I6v8UUW6Pnk2wCv3;

1.1
date	2015.02.06.09.36.16;	author doug;	state Exp;
branches;
next	;
commitid	t6BPqtyhmeNgetxc;


desc
@@


1.15
log
@Add an explict list of exported symbols with just the functions
declared in the public headers, and use __{BEGIN,END}_HIDDEN_DECLS
in the internal headers to optimize internal functions

ok jsing@@
@
text
@/*	$OpenBSD: bytestring.h,v 1.14 2015/06/19 00:23:36 doug Exp $	*/
/*
 * Copyright (c) 2014, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#ifndef OPENSSL_HEADER_BYTESTRING_H
#define OPENSSL_HEADER_BYTESTRING_H

#include <sys/types.h>
#include <stdint.h>

#include <openssl/opensslconf.h>

__BEGIN_HIDDEN_DECLS

/*
 * Bytestrings are used for parsing and building TLS and ASN.1 messages.
 *
 * A "CBS" (CRYPTO ByteString) represents a string of bytes in memory and
 * provides utility functions for safely parsing length-prefixed structures
 * like TLS and ASN.1 from it.
 *
 * A "CBB" (CRYPTO ByteBuilder) is a memory buffer that grows as needed and
 * provides utility functions for building length-prefixed messages.
 */

/* CRYPTO ByteString */
typedef struct cbs_st {
	const uint8_t *data;
	size_t initial_len;
	size_t len;
} CBS;

/*
 * CBS_init sets |cbs| to point to |data|. It does not take ownership of
 * |data|.
 */
void CBS_init(CBS *cbs, const uint8_t *data, size_t len);

/*
 * CBS_skip advances |cbs| by |len| bytes. It returns one on success and zero
 * otherwise.
 */
int CBS_skip(CBS *cbs, size_t len);

/*
 * CBS_data returns a pointer to the contents of |cbs|.
 */
const uint8_t *CBS_data(const CBS *cbs);

/*
 * CBS_len returns the number of bytes remaining in |cbs|.
 */
size_t CBS_len(const CBS *cbs);

/*
 * CBS_offset returns the current offset into the original data of |cbs|.
 */
size_t CBS_offset(const CBS *cbs);

/*
 * CBS_stow copies the current contents of |cbs| into |*out_ptr| and
 * |*out_len|. If |*out_ptr| is not NULL, the contents are freed with
 * free. It returns one on success and zero on allocation failure. On
 * success, |*out_ptr| should be freed with free. If |cbs| is empty,
 * |*out_ptr| will be NULL.
 */
int CBS_stow(const CBS *cbs, uint8_t **out_ptr, size_t *out_len);

/*
 * CBS_strdup copies the current contents of |cbs| into |*out_ptr| as a
 * NUL-terminated C string. If |*out_ptr| is not NULL, the contents are freed
 * with free. It returns one on success and zero on allocation
 * failure. On success, |*out_ptr| should be freed with free.
 *
 * NOTE: If |cbs| contains NUL bytes, the string will be truncated. Call
 * |CBS_contains_zero_byte(cbs)| to check for NUL bytes.
 */
int CBS_strdup(const CBS *cbs, char **out_ptr);

/*
 * CBS_write_bytes writes all of the remaining data from |cbs| into |dst|
 * if it is at most |dst_len| bytes.  If |copied| is not NULL, it will be set
 * to the amount copied. It returns one on success and zero otherwise.
 */
int CBS_write_bytes(const CBS *cbs, uint8_t *dst, size_t dst_len,
    size_t *copied);

/*
 * CBS_contains_zero_byte returns one if the current contents of |cbs| contains
 * a NUL byte and zero otherwise.
 */
int CBS_contains_zero_byte(const CBS *cbs);

/*
 * CBS_mem_equal compares the current contents of |cbs| with the |len| bytes
 * starting at |data|. If they're equal, it returns one, otherwise zero. If the
 * lengths match, it uses a constant-time comparison.
 */
int CBS_mem_equal(const CBS *cbs, const uint8_t *data, size_t len);

/*
 * CBS_get_u8 sets |*out| to the next uint8_t from |cbs| and advances |cbs|. It
 * returns one on success and zero on error.
 */
int CBS_get_u8(CBS *cbs, uint8_t *out);

/*
 * CBS_get_u16 sets |*out| to the next, big-endian uint16_t from |cbs| and
 * advances |cbs|. It returns one on success and zero on error.
 */
int CBS_get_u16(CBS *cbs, uint16_t *out);

/*
 * CBS_get_u24 sets |*out| to the next, big-endian 24-bit value from |cbs| and
 * advances |cbs|. It returns one on success and zero on error.
 */
int CBS_get_u24(CBS *cbs, uint32_t *out);

/*
 * CBS_get_u32 sets |*out| to the next, big-endian uint32_t value from |cbs|
 * and advances |cbs|. It returns one on success and zero on error.
 */
int CBS_get_u32(CBS *cbs, uint32_t *out);

/*
 * CBS_get_bytes sets |*out| to the next |len| bytes from |cbs| and advances
 * |cbs|. It returns one on success and zero on error.
 */
int CBS_get_bytes(CBS *cbs, CBS *out, size_t len);

/*
 * CBS_get_u8_length_prefixed sets |*out| to the contents of an 8-bit,
 * length-prefixed value from |cbs| and advances |cbs| over it. It returns one
 * on success and zero on error.
 */
int CBS_get_u8_length_prefixed(CBS *cbs, CBS *out);

/*
 * CBS_get_u16_length_prefixed sets |*out| to the contents of a 16-bit,
 * big-endian, length-prefixed value from |cbs| and advances |cbs| over it. It
 * returns one on success and zero on error.
 */
int CBS_get_u16_length_prefixed(CBS *cbs, CBS *out);

/*
 * CBS_get_u24_length_prefixed sets |*out| to the contents of a 24-bit,
 * big-endian, length-prefixed value from |cbs| and advances |cbs| over it. It
 * returns one on success and zero on error.
 */
int CBS_get_u24_length_prefixed(CBS *cbs, CBS *out);


/* Parsing ASN.1 */

/*
 * While an identifier can be multiple octets, this library only handles the
 * single octet variety currently.  This limits support up to tag number 30
 * since tag number 31 is a reserved value to indicate multiple octets.
 */

/* Bits 8 and 7: class tag type: See X.690 section 8.1.2.2. */
#define CBS_ASN1_UNIVERSAL		0x00
#define CBS_ASN1_APPLICATION		0x40
#define CBS_ASN1_CONTEXT_SPECIFIC	0x80
#define CBS_ASN1_PRIVATE		0xc0

/* Bit 6: Primitive or constructed: See X.690 section 8.1.2.3. */
#define CBS_ASN1_PRIMITIVE	0x00
#define CBS_ASN1_CONSTRUCTED	0x20

/*
 * Bits 5 to 1 are the tag number.  See X.680 section 8.6 for tag numbers of
 * the universal class.
 */

/*
 * Common universal identifier octets.
 * See X.690 section 8.1 and X.680 section 8.6 for universal tag numbers.
 *
 * Note: These definitions are the cause of some of the strange behavior in
 * CBS's bs_ber.c.
 *
 * In BER, it is the sender's option to use primitive or constructed for
 * bitstring (X.690 section 8.6.1) and octetstring (X.690 section 8.7.1).
 *
 * In DER, bitstring and octetstring are required to be primitive
 * (X.690 section 10.2).
 */
#define CBS_ASN1_BOOLEAN     (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0x1)
#define CBS_ASN1_INTEGER     (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0x2)
#define CBS_ASN1_BITSTRING   (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0x3)
#define CBS_ASN1_OCTETSTRING (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0x4)
#define CBS_ASN1_OBJECT      (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0x6)
#define CBS_ASN1_ENUMERATED  (CBS_ASN1_UNIVERSAL | CBS_ASN1_PRIMITIVE | 0xa)
#define CBS_ASN1_SEQUENCE    (CBS_ASN1_UNIVERSAL | CBS_ASN1_CONSTRUCTED | 0x10)
#define CBS_ASN1_SET         (CBS_ASN1_UNIVERSAL | CBS_ASN1_CONSTRUCTED | 0x11)

/*
 * CBS_get_asn1 sets |*out| to the contents of DER-encoded, ASN.1 element (not
 * including tag and length bytes) and advances |cbs| over it. The ASN.1
 * element must match |tag_value|. It returns one on success and zero
 * on error.
 *
 * Tag numbers greater than 30 are not supported (i.e. short form only).
 */
int CBS_get_asn1(CBS *cbs, CBS *out, unsigned int tag_value);

/*
 * CBS_get_asn1_element acts like |CBS_get_asn1| but |out| will include the
 * ASN.1 header bytes too.
 */
int CBS_get_asn1_element(CBS *cbs, CBS *out, unsigned int tag_value);

/*
 * CBS_peek_asn1_tag looks ahead at the next ASN.1 tag and returns one
 * if the next ASN.1 element on |cbs| would have tag |tag_value|. If
 * |cbs| is empty or the tag does not match, it returns zero. Note: if
 * it returns one, CBS_get_asn1 may still fail if the rest of the
 * element is malformed.
 */
int CBS_peek_asn1_tag(const CBS *cbs, unsigned int tag_value);

/*
 * CBS_get_any_asn1_element sets |*out| to contain the next ASN.1 element from
 * |*cbs| (including header bytes) and advances |*cbs|. It sets |*out_tag| to
 * the tag number and |*out_header_len| to the length of the ASN.1 header.
 * Each of |out|, |out_tag|, and |out_header_len| may be NULL to ignore
 * the value.
 *
 * Tag numbers greater than 30 are not supported (i.e. short form only).
 */
int CBS_get_any_asn1_element(CBS *cbs, CBS *out, unsigned int *out_tag,
    size_t *out_header_len);

/*
 * CBS_get_asn1_uint64 gets an ASN.1 INTEGER from |cbs| using |CBS_get_asn1|
 * and sets |*out| to its value. It returns one on success and zero on error,
 * where error includes the integer being negative, or too large to represent
 * in 64 bits.
 */
int CBS_get_asn1_uint64(CBS *cbs, uint64_t *out);

/*
 * CBS_get_optional_asn1 gets an optional explicitly-tagged element
 * from |cbs| tagged with |tag| and sets |*out| to its contents. If
 * present, it sets |*out_present| to one, otherwise zero. It returns
 * one on success, whether or not the element was present, and zero on
 * decode failure.
 */
int CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present,
    unsigned int tag);

/*
 * CBS_get_optional_asn1_octet_string gets an optional
 * explicitly-tagged OCTET STRING from |cbs|. If present, it sets
 * |*out| to the string and |*out_present| to one. Otherwise, it sets
 * |*out| to empty and |*out_present| to zero. |out_present| may be
 * NULL. It returns one on success, whether or not the element was
 * present, and zero on decode failure.
 */
int CBS_get_optional_asn1_octet_string(CBS *cbs, CBS *out, int *out_present,
    unsigned int tag);

/*
 * CBS_get_optional_asn1_uint64 gets an optional explicitly-tagged
 * INTEGER from |cbs|. If present, it sets |*out| to the
 * value. Otherwise, it sets |*out| to |default_value|. It returns one
 * on success, whether or not the element was present, and zero on
 * decode failure.
 */
int CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out, unsigned int tag,
    uint64_t default_value);

/*
 * CBS_get_optional_asn1_bool gets an optional, explicitly-tagged BOOLEAN from
 * |cbs|. If present, it sets |*out| to either zero or one, based on the
 * boolean. Otherwise, it sets |*out| to |default_value|. It returns one on
 * success, whether or not the element was present, and zero on decode
 * failure.
 */
int CBS_get_optional_asn1_bool(CBS *cbs, int *out, unsigned int tag,
    int default_value);


/*
 * CRYPTO ByteBuilder.
 *
 * |CBB| objects allow one to build length-prefixed serialisations. A |CBB|
 * object is associated with a buffer and new buffers are created with
 * |CBB_init|. Several |CBB| objects can point at the same buffer when a
 * length-prefix is pending, however only a single |CBB| can be 'current' at
 * any one time. For example, if one calls |CBB_add_u8_length_prefixed| then
 * the new |CBB| points at the same buffer as the original. But if the original
 * |CBB| is used then the length prefix is written out and the new |CBB| must
 * not be used again.
 *
 * If one needs to force a length prefix to be written out because a |CBB| is
 * going out of scope, use |CBB_flush|.
 */

struct cbb_buffer_st {
	uint8_t *buf;

	/* The number of valid bytes. */
	size_t len;

	/* The size of buf. */
	size_t cap;

	/*
	 * One iff |buf| is owned by this object. If not then |buf| cannot be
	 * resized.
	 */
	char can_resize;
};

typedef struct cbb_st {
	struct cbb_buffer_st *base;

	/*
	 * offset is the offset from the start of |base->buf| to the position of any
	 * pending length-prefix.
	 */
	size_t offset;

	/* child points to a child CBB if a length-prefix is pending. */
	struct cbb_st *child;

	/*
	 * pending_len_len contains the number of bytes in a pending length-prefix,
	 * or zero if no length-prefix is pending.
	 */
	uint8_t pending_len_len;

	char pending_is_asn1;

	/*
	 * is_top_level is true iff this is a top-level |CBB| (as opposed to a child
	 * |CBB|). Top-level objects are valid arguments for |CBB_finish|.
	 */
	char is_top_level;
} CBB;

/*
 * CBB_init initialises |cbb| with |initial_capacity|. Since a |CBB| grows as
 * needed, the |initial_capacity| is just a hint. It returns one on success or
 * zero on error.
 */
int CBB_init(CBB *cbb, size_t initial_capacity);

/*
 * CBB_init_fixed initialises |cbb| to write to |len| bytes at |buf|. Since
 * |buf| cannot grow, trying to write more than |len| bytes will cause CBB
 * functions to fail. It returns one on success or zero on error.
 */
int CBB_init_fixed(CBB *cbb, uint8_t *buf, size_t len);

/*
 * CBB_cleanup frees all resources owned by |cbb| and other |CBB| objects
 * writing to the same buffer. This should be used in an error case where a
 * serialisation is abandoned.
 */
void CBB_cleanup(CBB *cbb);

/*
 * CBB_finish completes any pending length prefix and sets |*out_data| to a
 * malloced buffer and |*out_len| to the length of that buffer. The caller
 * takes ownership of the buffer and, unless the buffer was fixed with
 * |CBB_init_fixed|, must call |free| when done.
 *
 * It can only be called on a "top level" |CBB|, i.e. one initialised with
 * |CBB_init| or |CBB_init_fixed|. It returns one on success and zero on
 * error.
 */
int CBB_finish(CBB *cbb, uint8_t **out_data, size_t *out_len);

/*
 * CBB_flush causes any pending length prefixes to be written out and any child
 * |CBB| objects of |cbb| to be invalidated. It returns one on success or zero
 * on error.
 */
int CBB_flush(CBB *cbb);

/*
 * CBB_add_u8_length_prefixed sets |*out_contents| to a new child of |cbb|. The
 * data written to |*out_contents| will be prefixed in |cbb| with an 8-bit
 * length. It returns one on success or zero on error.
 */
int CBB_add_u8_length_prefixed(CBB *cbb, CBB *out_contents);

/*
 * CBB_add_u16_length_prefixed sets |*out_contents| to a new child of |cbb|.
 * The data written to |*out_contents| will be prefixed in |cbb| with a 16-bit,
 * big-endian length. It returns one on success or zero on error.
 */
int CBB_add_u16_length_prefixed(CBB *cbb, CBB *out_contents);

/*
 * CBB_add_u24_length_prefixed sets |*out_contents| to a new child of |cbb|.
 * The data written to |*out_contents| will be prefixed in |cbb| with a 24-bit,
 * big-endian length. It returns one on success or zero on error.
 */
int CBB_add_u24_length_prefixed(CBB *cbb, CBB *out_contents);

/*
 * CBB_add_asn sets |*out_contents| to a |CBB| into which the contents of an
 * ASN.1 object can be written. The |tag| argument will be used as the tag for
 * the object. Passing in |tag| number 31 will return in an error since only
 * single octet identifiers are supported. It returns one on success or zero
 * on error.
 */
int CBB_add_asn1(CBB *cbb, CBB *out_contents, unsigned int tag);

/*
 * CBB_add_bytes appends |len| bytes from |data| to |cbb|. It returns one on
 * success and zero otherwise.
 */
int CBB_add_bytes(CBB *cbb, const uint8_t *data, size_t len);

/*
 * CBB_add_space appends |len| bytes to |cbb| and sets |*out_data| to point to
 * the beginning of that space. The caller must then write |len| bytes of
 * actual contents to |*out_data|. It returns one on success and zero
 * otherwise.
 */
int CBB_add_space(CBB *cbb, uint8_t **out_data, size_t len);

/*
 * CBB_add_u8 appends an 8-bit number from |value| to |cbb|. It returns one on
 * success and zero otherwise.
 */
int CBB_add_u8(CBB *cbb, size_t value);

/*
 * CBB_add_u8 appends a 16-bit, big-endian number from |value| to |cbb|. It
 * returns one on success and zero otherwise.
 */
int CBB_add_u16(CBB *cbb, size_t value);

/*
 * CBB_add_u24 appends a 24-bit, big-endian number from |value| to |cbb|. It
 * returns one on success and zero otherwise.
 */
int CBB_add_u24(CBB *cbb, size_t value);

/*
 * CBB_add_asn1_uint64 writes an ASN.1 INTEGER into |cbb| using |CBB_add_asn1|
 * and writes |value| in its contents. It returns one on success and zero on
 * error.
 */
int CBB_add_asn1_uint64(CBB *cbb, uint64_t value);

#ifdef LIBRESSL_INTERNAL
/*
 * CBS_dup sets |out| to point to cbs's |data| and |len|.  It results in two
 * CBS that point to the same buffer.
 */
void CBS_dup(const CBS *cbs, CBS *out);

/*
 * cbs_get_any_asn1_element sets |*out| to contain the next ASN.1 element from
 * |*cbs| (including header bytes) and advances |*cbs|. It sets |*out_tag| to
 * the tag number and |*out_header_len| to the length of the ASN.1 header. If
 * strict mode is disabled and the element has indefinite length then |*out|
 * will only contain the header. Each of |out|, |out_tag|, and
 * |out_header_len| may be NULL to ignore the value.
 *
 * Tag numbers greater than 30 are not supported (i.e. short form only).
 */
int cbs_get_any_asn1_element_internal(CBS *cbs, CBS *out, unsigned int *out_tag,
    size_t *out_header_len, int strict);

/*
 * CBS_asn1_indefinite_to_definite reads an ASN.1 structure from |in|. If it
 * finds indefinite-length elements that otherwise appear to be valid DER, it
 * attempts to convert the DER-like data to DER and sets |*out| and
 * |*out_length| to describe a malloced buffer containing the DER data.
 * Additionally, |*in| will be advanced over the ASN.1 data.
 *
 * If it doesn't find any indefinite-length elements then it sets |*out| to
 * NULL and |*in| is unmodified.
 *
 * This is NOT a conversion from BER to DER.  There are many restrictions when
 * dealing with DER data.  This is only concerned with one: indefinite vs.
 * definite form. However, this suffices to handle the PKCS#7 and PKCS#12 output
 * from NSS.
 *
 * It returns one on success and zero otherwise.
 */
int CBS_asn1_indefinite_to_definite(CBS *in, uint8_t **out, size_t *out_len);
#endif /* LIBRESSL_INTERNAL */

__END_HIDDEN_DECLS 

#endif  /* OPENSSL_HEADER_BYTESTRING_H */
@


1.14
log
@Add CBS_dup() to initialize a new CBS with the same values.

This is useful for when you need to check the data ahead and then continue
on from the same spot.

input + ok jsing@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.13 2015/06/18 23:25:07 doug Exp $	*/
a19 4
#if defined(__cplusplus)
extern "C" {
#endif

d25 2
d505 1
a505 3
#if defined(__cplusplus)
}  /* extern C */
#endif
@


1.13
log
@Extend the input types for CBB_add_*() to help catch bugs.

While the previous types were correct, they can silently accept bad data
via truncation or signed conversion.  We now take size_t as input for
CBB_add_u*() and do a range check.

discussed with deraadt@@
input + ok jsing@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.12 2015/06/17 07:25:56 doug Exp $	*/
d468 6
@


1.12
log
@Use explicit int in bs_cbs.c.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.11 2015/06/17 07:06:22 doug Exp $	*/
d426 1
a426 1
int CBB_add_asn1(CBB *cbb, CBB *out_contents, uint8_t tag);
d446 1
a446 1
int CBB_add_u8(CBB *cbb, uint8_t value);
d452 1
a452 1
int CBB_add_u16(CBB *cbb, uint16_t value);
d458 1
a458 1
int CBB_add_u24(CBB *cbb, uint32_t value);
@


1.11
log
@Add CBS_write_bytes() to copy the remaining CBS bytes to the caller.

This is a common operation when dealing with CBS.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.10 2015/06/17 07:00:22 doug Exp $	*/
d220 1
a220 1
int CBS_get_asn1(CBS *cbs, CBS *out, unsigned tag_value);
d226 1
a226 1
int CBS_get_asn1_element(CBS *cbs, CBS *out, unsigned tag_value);
d235 1
a235 1
int CBS_peek_asn1_tag(const CBS *cbs, unsigned tag_value);
d246 1
a246 1
int CBS_get_any_asn1_element(CBS *cbs, CBS *out, unsigned *out_tag,
d264 2
a265 1
int CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present, unsigned tag);
d276 1
a276 1
    unsigned tag);
d285 1
a285 1
int CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out, unsigned tag,
d295 1
a295 1
int CBS_get_optional_asn1_bool(CBS *cbs, int *out, unsigned tag,
d478 1
a478 1
int cbs_get_any_asn1_element_internal(CBS *cbs, CBS *out, unsigned *out_tag,
@


1.10
log
@Add a new function CBS_offset() to report the current offset in the data.

"why not" miod@@, sure jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.9 2015/06/16 06:37:58 doug Exp $	*/
d93 8
@


1.9
log
@Be more strict about BER and DER terminology.

bs_ber.c does not convert BER to DER.  It's a hack to convert a DER-like
encoding with one violation (indefinite form) to strict DER.  Rename
the functions to reflect this.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.8 2015/06/16 06:11:39 doug Exp $	*/
d43 1
d68 5
@


1.8
log
@Simplify cbs_get_any_asn1_element_internal based on comments from jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.7 2015/06/15 07:35:49 doug Exp $	*/
d467 5
a471 4
 * CBS_asn1_ber_to_der reads an ASN.1 structure from |in|. If it finds
 * indefinite-length elements then it attempts to convert the BER data to DER
 * and sets |*out| and |*out_length| to describe a malloced buffer containing
 * the DER data. Additionally, |*in| will be advanced over the ASN.1 data.
d476 3
a478 3
 * A sufficiently complex ASN.1 structure will break this function because it's
 * not possible to generically convert BER to DER without knowledge of the
 * structure itself. However, this sufficies to handle the PKCS#7 and #12 output
d483 1
a483 1
int CBS_asn1_ber_to_der(CBS *in, uint8_t **out, size_t *out_len);
@


1.7
log
@Make CBS_get_any_asn1_element() more compliant with DER encoding.

CBS_get_any_asn1_element violates DER encoding by allowing indefinite
form.  All callers except bs_ber.c expect DER encoding.  The callers
must check to see if it was indefinite or not.

Rather than exposing all callers to this behavior,
cbs_get_any_asn1_element_internal() allows specifying whether you want to
allow the normally forbidden indefinite form.  This is used by
CBS_get_any_asn1_element() for strict DER encoding and by a new static
function in bs_ber.c for the relaxed version.

While I was here, I added comments to differentiate between ASN.1
restrictions and CBS limitations.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.6 2015/06/13 09:02:45 doug Exp $	*/
d454 1
a454 1
 * CBS_get_any_asn1_element sets |*out| to contain the next ASN.1 element from
@


1.6
log
@Add comments about how the CBS constants are constructed.

Also, introduce a few more #defines to make it obvious.

ok miod@@ jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.5 2015/04/29 02:11:09 doug Exp $	*/
d226 2
a227 3
 * the tag number and |*out_header_len| to the length of the ASN.1 header. If
 * the element has indefinite length then |*out| will only contain the
 * header. Each of |out|, |out_tag|, and |out_header_len| may be NULL to ignore
d453 13
@


1.5
log
@Add whitespace and replace OPENSSL_free with free in documentation.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.4 2015/02/07 06:10:32 doug Exp $	*/
d155 20
a174 8
#define CBS_ASN1_BOOLEAN 0x1
#define CBS_ASN1_INTEGER 0x2
#define CBS_ASN1_BITSTRING 0x3
#define CBS_ASN1_OCTETSTRING 0x4
#define CBS_ASN1_OBJECT 0x6
#define CBS_ASN1_ENUMERATED 0xa
#define CBS_ASN1_SEQUENCE (0x10 | CBS_ASN1_CONSTRUCTED)
#define CBS_ASN1_SET (0x11 | CBS_ASN1_CONSTRUCTED)
d176 21
a196 2
#define CBS_ASN1_CONSTRUCTED 0x20
#define CBS_ASN1_CONTEXT_SPECIFIC 0x80
@


1.4
log
@Don't allow tag number 31 in CBB_add_asn1().

Tag 31 is invalid for a short form identifier octet (single byte).
KNF a little more.

Based on BoringSSL commit 5ba305643f55d37a3e45e8388a36d50c1b2d4ff5

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.3 2015/02/07 02:02:28 doug Exp $	*/
d71 2
a72 2
 * OPENSSL_free. It returns one on success and zero on allocation failure. On
 * success, |*out_ptr| should be freed with OPENSSL_free. If |cbs| is empty,
d80 2
a81 2
 * with OPENSSL_free. It returns one on success and zero on allocation
 * failure. On success, |*out_ptr| should be freed with OPENSSL_free.
d338 1
a338 1
 * |CBB_init_fixed|, must call |OPENSSL_free| when done.
@


1.3
log
@Fix typo and ASN.1 tag number range comment in bytestring.h.

CBS_get_asn1() and CBS_get_any_asn1_element() only support the single
byte ASN.1 identifier octets (aka short form tags).  Tag number 31 is
the start of the multi-byte long form per X.690 section 8.1.2.4.

From BoringSSL commit 2683af70e73f116e14db2bca6290fa4a010a2ee4

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.2 2015/02/06 22:22:33 doug Exp $	*/
d377 3
a379 1
 * the object. It returns one on success or zero on error.
@


1.2
log
@KNF bytestring files.

I checked that this doesn't change anything.  Compiled with clang using
-Wno-pointer-sign -g0  to reduce the differences.  Only difference in the
asm is due to assert(0) line number changes in bs_cbs.c and bs_cbb.c.

miod is ok with the general process.
@
text
@d1 1
a1 1
/*	$OpenBSD: bytestring.h,v 1.1 2015/02/06 09:36:16 doug Exp $	*/
d59 1
a59 1
 * CBS_data returns a pointer to the contains of |cbs|.
d173 1
a173 1
 * Tag numbers greater than 31 are not supported.
d200 1
a200 1
 * Tag numbers greater than 31 are not supported.
@


1.1
log
@Import BoringSSL's crypto bytestring and crypto bytebuilder APIs.

This is imported with as few changes as possible for the initial commit.
I removed OPENSSL_EXPORT, replaced OPENSSL_malloc() etc with malloc()
and changed a few header includes.

BoringSSL has this as part of their public API.  We're leaving it internal
to libssl for now.

Based on BoringSSL's CBB/CBS API as of commit
c5cc15b4f5b1d6e9b9112cb8d30205a638aa2c54.

input + ok jsing@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 2
a30 1
/* Bytestrings are used for parsing and building TLS and ASN.1 messages.
d37 2
a38 2
 * provides utility functions for building length-prefixed messages. */

a40 1

d42 2
a43 2
  const uint8_t *data;
  size_t len;
d46 4
a49 2
/* CBS_init sets |cbs| to point to |data|. It does not take ownership of
 * |data|. */
d52 4
a55 2
/* CBS_skip advances |cbs| by |len| bytes. It returns one on success and zero
 * otherwise. */
d58 3
a60 1
/* CBS_data returns a pointer to the contains of |cbs|. */
d63 3
a65 1
/* CBS_len returns the number of bytes remaining in |cbs|. */
d68 2
a69 1
/* CBS_stow copies the current contents of |cbs| into |*out_ptr| and
d73 2
a74 1
 * |*out_ptr| will be NULL. */
d77 2
a78 1
/* CBS_strdup copies the current contents of |cbs| into |*out_ptr| as a
d84 2
a85 1
 * |CBS_contains_zero_byte(cbs)| to check for NUL bytes. */
d88 4
a91 2
/* CBS_contains_zero_byte returns one if the current contents of |cbs| contains
 * a NUL byte and zero otherwise. */
d94 2
a95 1
/* CBS_mem_equal compares the current contents of |cbs| with the |len| bytes
d97 3
a99 3
 * lengths match, it uses a constant-time comparison. */
int CBS_mem_equal(const CBS *cbs, const uint8_t *data,
                                 size_t len);
d101 4
a104 2
/* CBS_get_u8 sets |*out| to the next uint8_t from |cbs| and advances |cbs|. It
 * returns one on success and zero on error. */
d107 4
a110 2
/* CBS_get_u16 sets |*out| to the next, big-endian uint16_t from |cbs| and
 * advances |cbs|. It returns one on success and zero on error. */
d113 4
a116 2
/* CBS_get_u24 sets |*out| to the next, big-endian 24-bit value from |cbs| and
 * advances |cbs|. It returns one on success and zero on error. */
d119 4
a122 2
/* CBS_get_u32 sets |*out| to the next, big-endian uint32_t value from |cbs|
 * and advances |cbs|. It returns one on success and zero on error. */
d125 4
a128 2
/* CBS_get_bytes sets |*out| to the next |len| bytes from |cbs| and advances
 * |cbs|. It returns one on success and zero on error. */
d131 2
a132 1
/* CBS_get_u8_length_prefixed sets |*out| to the contents of an 8-bit,
d134 2
a135 1
 * on success and zero on error. */
d138 2
a139 1
/* CBS_get_u16_length_prefixed sets |*out| to the contents of a 16-bit,
d141 2
a142 1
 * returns one on success and zero on error. */
d145 2
a146 1
/* CBS_get_u24_length_prefixed sets |*out| to the contents of a 24-bit,
d148 2
a149 1
 * returns one on success and zero on error. */
d167 2
a168 1
/* CBS_get_asn1 sets |*out| to the contents of DER-encoded, ASN.1 element (not
d173 2
a174 1
 * Tag numbers greater than 31 are not supported. */
d177 4
a180 2
/* CBS_get_asn1_element acts like |CBS_get_asn1| but |out| will include the
 * ASN.1 header bytes too. */
d183 2
a184 1
/* CBS_peek_asn1_tag looks ahead at the next ASN.1 tag and returns one
d188 2
a189 1
 * element is malformed. */
d192 2
a193 1
/* CBS_get_any_asn1_element sets |*out| to contain the next ASN.1 element from
d200 4
a203 4
 * Tag numbers greater than 31 are not supported. */
int CBS_get_any_asn1_element(CBS *cbs, CBS *out,
                                            unsigned *out_tag,
                                            size_t *out_header_len);
d205 2
a206 1
/* CBS_get_asn1_uint64 gets an ASN.1 INTEGER from |cbs| using |CBS_get_asn1|
d209 2
a210 1
 * in 64 bits. */
d213 2
a214 1
/* CBS_get_optional_asn1 gets an optional explicitly-tagged element
d218 3
a220 3
 * decode failure. */
int CBS_get_optional_asn1(CBS *cbs, CBS *out, int *out_present,
                                         unsigned tag);
d222 2
a223 1
/* CBS_get_optional_asn1_octet_string gets an optional
d228 4
a231 4
 * present, and zero on decode failure. */
int CBS_get_optional_asn1_octet_string(CBS *cbs, CBS *out,
                                                      int *out_present,
                                                      unsigned tag);
d233 2
a234 1
/* CBS_get_optional_asn1_uint64 gets an optional explicitly-tagged
d238 4
a241 4
 * decode failure. */
int CBS_get_optional_asn1_uint64(CBS *cbs, uint64_t *out,
                                                unsigned tag,
                                                uint64_t default_value);
d243 2
a244 1
/* CBS_get_optional_asn1_bool gets an optional, explicitly-tagged BOOLEAN from
d248 2
a249 1
 * failure. */
d251 1
a251 1
                                              int default_value);
d254 2
a255 1
/* CRYPTO ByteBuilder.
d267 2
a268 1
 * going out of scope, use |CBB_flush|. */
d271 13
a283 5
  uint8_t *buf;
  size_t len;      /* The number of valid bytes. */
  size_t cap;      /* The size of buf. */
  char can_resize; /* One iff |buf| is owned by this object. If not then |buf|
                      cannot be resized. */
d287 24
a310 13
  struct cbb_buffer_st *base;
  /* offset is the offset from the start of |base->buf| to the position of any
   * pending length-prefix. */
  size_t offset;
  /* child points to a child CBB if a length-prefix is pending. */
  struct cbb_st *child;
  /* pending_len_len contains the number of bytes in a pending length-prefix,
   * or zero if no length-prefix is pending. */
  uint8_t pending_len_len;
  char pending_is_asn1;
  /* is_top_level is true iff this is a top-level |CBB| (as opposed to a child
   * |CBB|). Top-level objects are valid arguments for |CBB_finish|. */
  char is_top_level;
d313 2
a314 1
/* CBB_init initialises |cbb| with |initial_capacity|. Since a |CBB| grows as
d316 2
a317 1
 * zero on error. */
d320 2
a321 1
/* CBB_init_fixed initialises |cbb| to write to |len| bytes at |buf|. Since
d323 2
a324 1
 * functions to fail. It returns one on success or zero on error. */
d327 2
a328 1
/* CBB_cleanup frees all resources owned by |cbb| and other |CBB| objects
d330 2
a331 1
 * serialisation is abandoned. */
d334 2
a335 1
/* CBB_finish completes any pending length prefix and sets |*out_data| to a
d342 2
a343 1
 * error. */
d346 2
a347 1
/* CBB_flush causes any pending length prefixes to be written out and any child
d349 2
a350 1
 * on error. */
d353 2
a354 1
/* CBB_add_u8_length_prefixed sets |*out_contents| to a new child of |cbb|. The
d356 2
a357 1
 * length. It returns one on success or zero on error. */
d360 2
a361 1
/* CBB_add_u16_length_prefixed sets |*out_contents| to a new child of |cbb|.
d363 2
a364 1
 * big-endian length. It returns one on success or zero on error. */
d367 2
a368 1
/* CBB_add_u24_length_prefixed sets |*out_contents| to a new child of |cbb|.
d370 2
a371 1
 * big-endian length. It returns one on success or zero on error. */
d374 2
a375 1
/* CBB_add_asn sets |*out_contents| to a |CBB| into which the contents of an
d377 2
a378 1
 * the object. It returns one on success or zero on error. */
d381 4
a384 2
/* CBB_add_bytes appends |len| bytes from |data| to |cbb|. It returns one on
 * success and zero otherwise. */
d387 2
a388 1
/* CBB_add_space appends |len| bytes to |cbb| and sets |*out_data| to point to
d391 2
a392 1
 * otherwise. */
d395 4
a398 2
/* CBB_add_u8 appends an 8-bit number from |value| to |cbb|. It returns one on
 * success and zero otherwise. */
d401 4
a404 2
/* CBB_add_u8 appends a 16-bit, big-endian number from |value| to |cbb|. It
 * returns one on success and zero otherwise. */
d407 4
a410 2
/* CBB_add_u24 appends a 24-bit, big-endian number from |value| to |cbb|. It
 * returns one on success and zero otherwise. */
d413 2
a414 1
/* CBB_add_asn1_uint64 writes an ASN.1 INTEGER into |cbb| using |CBB_add_asn1|
d416 2
a417 1
 * error. */
d421 2
a422 1
/* CBS_asn1_ber_to_der reads an ASN.1 structure from |in|. If it finds
d435 2
a436 1
 * It returns one on success and zero otherwise. */
@

