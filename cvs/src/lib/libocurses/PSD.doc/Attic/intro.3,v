head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.50
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.42
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.46
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.44
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.40
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.18
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2015.11.14.23.56.50;	author deraadt;	state dead;
branches;
next	1.4;
commitid	BrKaQHWTbuUdYB4P;

1.4
date	2003.10.22.08.17.48;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.20.18.42;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.02.27.21.57.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.06.06.23;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@libocurses can go to the Attic.  last consumer of it was ramdisk more(1)
conceptual ok guenther millert nicm
@
text
@.\" Copyright (c) 1980, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)intro.3	8.1 (Berkeley) 6/4/93
.\"
.sh 1 Usage
.pp
This is a description of how to actually use the screen package.
For simplicity, we assume all updating, reading, etc.
is applied to
.Vn stdscr , 
although a different window can of course be specified.
.sh 2 "Initialization"
.pp
In order to use the screen package,
the routines must know about terminal characteristics,
and the space for
.Vn curscr
and
.Vn stdscr
must be allocated.
These functions are performed by
.Fn initscr .
Since it must allocate space for the windows,
it can overflow core when attempting to do so.
On this rather rare occasion,
.Fn initscr
returns ERR.
.Fn initscr
must
.bi always
be called before any of the routines which affect windows are used.
If it is not,
the program will core dump as soon as either
.Vn curscr
or
.Vn stdscr
are referenced.
However, it is usually best to wait to call it
until after you are sure you will need it,
like after checking for startup errors.
Terminal status changing routines
like
.Fn nl
and
.Fn cbreak
should be called after
.Fn initscr .
.pp
After the initial window allocation done by 
.Fn initscr ,
specific window characteristics can be set.
Scrolling can be enabled by calling
.Fn scrollok .
If you want the cursor to be left after the last change, use
.Fn leaveok .
If this isn't done,
.Fn refresh
will move the cursor to the window's current \*y after updating it.
Additional windows can be created by using the functions
.Fn newwin
and
.Fn subwin .
.Fn delwin
allows you to delete an existing window.
The variables
.Vn LINES
and
.Vn COLS
control the size of the terminal.  They are initially implicitly set by 
.Fn initscr ,
but can be altered explicitly by the user followed by a call to 
.Fn initscr .
Note that any call to 
.Fn initscr ,
will always delete any existing
.Vn stdscr
and/or
.Vn curscr
before creating new ones so this change is best done before the initial call to
.Fn initscr .
.pp
.sh 2 "Output"
.pp
The basic functions
used to change what will go on a window are
.Fn addch
and
.Fn move .
.Fn addch
adds a character at the current \*y,
returning ERR if it would cause the window to illegally scroll,
.i i.e. ,
printing a character in the lower right-hand corner
of a terminal which automatically scrolls
if scrolling is not allowed.
.Fn move
changes the current \*y to whatever you want them to be.
It returns ERR if you try to move off the window.
As mentioned above, you can combine the two into
.Fn mvaddch
to do both things in one call.
.pp
The other output functions 
(such as
.Fn addstr
and
.Fn printw )
all call
.Fn addch
to add characters to the window.
.pp
After a change has been made to the window,
you must call 
.Fn refresh .
when you want the portion of the terminal covered by the window
to reflect the change.
In order to optimize finding changes,
.Fn refresh
assumes that any part of the window not changed
since the last
.Fn refresh
of that window has not been changed on the terminal,
.i i.e. ,
that you have not refreshed a portion of the terminal
with an overlapping window.
If this is not the case,
the routines
.Fn touchwin ,
.Fn touchline ,
and
.Fn touchoverlap
are provided to make it look like a desired part of window has been changed,
thus forcing
.Fn refresh
to check that whole subsection of the terminal for changes.
.pp
If you call
.Fn wrefresh
with
.Vn curscr ,
it will make the screen look like the image of 
.Vn curscr .
This is useful for implementing a command
which would redraw the screen in case it got messed up.
.sh 2 Input
.pp
Input is essentially a mirror image of output.
The complementary function to
.Fn addch
is
.Fn getch
which,
if echo is set,
will call
.Fn addch
to echo the character.
Since the screen package needs to know what is on the terminal at all times,
if characters are to be echoed,
the tty must be in raw or cbreak mode.
If it is not,
.Fn getch
sets it to be cbreak,
and then reads in the character.
.sh 2 "Termination"
.pp
In order to perform certain optimizations,
and, 
on some terminals,
to work at all,
some things must be done
before the screen routines start up.
These functions are performed in
.Fn getttmode
and
.Fn setterm ,
which are called by
.Fn initscr .
In order to clean up after the routines,
the routine
.Fn endwin
is provided.
It restores tty modes to what they were
when
.Fn initscr
was first called.
The terminal state module uses the variable 
.Vn curses_termios
to save the original terminal state which is then restored upon a call to 
.Fn endwin .
Thus,
anytime after the call to initscr,
.Fn endwin
should be called before exiting.  Note however, that 
.Fn endwin 
should always be called 
.b before
the final calls to
.Fn delwin ,
which free the storage of the windows.
@


1.4
log
@typos from Jared Yanovich, improved by Tom Cosgrove,
and a couple from myself.
@
text
@@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d89 1
a89 1
allows you to delete an exisiting window.
@


1.2
log
@make function names the correct case
@
text
@d12 1
a12 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Install ncurses as -lcurses and <curses.h>
Install BSD curses library as -locurses and <ocurses.h>
@
text
@d57 1
a57 1
.Fn Initscr
d92 1
a92 1
.Fn Delwin
d118 1
a118 1
.Fn Addch
d125 1
a125 1
.Fn Move
@

