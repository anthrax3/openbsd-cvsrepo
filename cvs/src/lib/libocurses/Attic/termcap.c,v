head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.40
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.38
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.34
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.32
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2015.11.14.23.56.50;	author deraadt;	state dead;
branches;
next	1.10;
commitid	BrKaQHWTbuUdYB4P;

1.10
date	2015.01.16.16.48.51;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	0DYulI8hhujBHMcR;

1.9
date	2005.08.14.17.15.19;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.20.18.42;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.04.18.39.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.09.22.01.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.02.04.10.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.11.19.17.07.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.11.04.21.21.24;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.10.08.04.31.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.07.23.21.10.28;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@libocurses can go to the Attic.  last consumer of it was ramdisk more(1)
conceptual ok guenther millert nicm
@
text
@/*	$OpenBSD: termcap.c,v 1.10 2015/01/16 16:48:51 deraadt Exp $	*/
/*	$NetBSD: termcap.c,v 1.7 1995/06/05 19:45:52 pk Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#define	PBUFSIZ		512	/* max length of filename path */
#define	PVECSIZ		32	/* max number of names in path */

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <curses.h>
#include "pathnames.h"

/*
 * termcap - routines for dealing with the terminal capability data base
 *
 * BUG:		Should use a "last" pointer in tbuf, so that searching
 *		for capabilities alphabetically would not be a n**2/2
 *		process when large numbers of capabilities are given.
 * Note:	If we add a last pointer now we will screw up the
 *		tc capability. We really should compile termcap.
 *
 * Essentially all the work here is scanning and decoding escapes
 * in string capabilities.  We don't use stdio because the editor
 * doesn't, and because living w/o it is not hard.
 */

static	char *tbuf;	/* termcap buffer */

/*
 * Get an entry for terminal name in buffer bp from the termcap file.
 */
int
tgetent(bp, name)
	char *bp, *name;
{
	register char *p;
	register char *cp;
	char  *dummy;
	char **fname;
	char  *home;
	int    i;
	char   pathbuf[PATH_MAX];	/* holds raw path of filenames */
	char  *pathvec[PVECSIZ];	/* to point to names in pathbuf */
	char **pvec;			/* holds usable tail of path vector */
	char  *termpath;

	fname = pathvec;
	pvec = pathvec;
	tbuf = bp;

	cp = issetugid() ? NULL : getenv("TERMCAP");
	/*
	 * TERMCAP can have one of two things in it. It can be the name
	 * of a file to use instead of /usr/share/misc/termcap. In this
	 * case it better start with a "/". Or it can be an entry to use
	 * so we don't have to read the file. In this case it has to
	 * already have the newlines crunched out.  If TERMCAP does not
	 * hold a file name then a path of names is searched instead.
	 * The path is found in the TERMPATH variable, or becomes
	 * "$HOME/.termcap /usr/share/misc/termcap" if no TERMPATH exists.
	 */
	if (cp == NULL) {
		strlcpy(pathbuf, _PATH_TERMCAP, sizeof(pathbuf));
	} else if (!cp || *cp != '/') { /* TERMCAP holds an entry */
		if ((termpath = getenv("TERMPATH")) != NULL)
			strlcpy(pathbuf, termpath, sizeof(pathbuf));
		else if ((home = getenv("HOME")) == NULL || *home == '\0' ||
		    snprintf(pathbuf, sizeof(pathbuf), "%s/%s", home,
		    _PATH_DEF) >= sizeof(pathbuf))
			strlcpy(pathbuf, _PATH_DEF, sizeof(pathbuf));
	} else {		/* user-defined path in TERMCAP */
		/* still can be tokenized */
		strlcpy(pathbuf, cp, sizeof(pathbuf));
	}
	*fname++ = pathbuf;	/* tokenize path into vector of names */

	/* split pathbuf into a vector of paths */
	p = pathbuf;
	while (*++p)
		if (*p == ' ' || *p == ':') {
			*p = '\0';
			while (*++p)
				if (*p != ' ' && *p != ':')
					break;
			if (*p == '\0')
				break;
			*fname++ = p;
			if (fname >= pathvec + PVECSIZ) {
				fname--;
				break;
			}
		}
	*fname = (char *) 0;			/* mark end of vector */
	if (cp && *cp && *cp != '/')
		if (cgetset(cp) < 0)
			return (-2);

	dummy = NULL;
	i = cgetent(&dummy, pathvec, name);
	
	if (i == 0 && bp != NULL) {
		strlcpy(bp, dummy, 1024);
		if ((cp = strrchr(bp, ':')) != NULL)
			if (cp[1] != '\0')
				cp[1] = '\0';
	}
	else if (i == 0 && bp == NULL)
		tbuf = dummy;
	else if (dummy != NULL)
		free(dummy);

	/* no tc reference loop return code in libterm XXX */
	if (i == -3)
		return (-1);
	return (i + 1);
}

/*
 * Return the (numeric) option id.
 * Numeric options look like
 *	li#80
 * i.e. the option string is separated from the numeric value by
 * a # character.  If the option is not found we return -1.
 * Note that we handle octal numbers beginning with 0.
 */
int
tgetnum(id)
	char *id;
{
	long num;

	if (cgetnum(tbuf, id, &num) == 0)
		return (num);
	else
		return (-1);
}

/*
 * Handle a flag option.
 * Flag options are given "naked", i.e. followed by a : or the end
 * of the buffer.  Return 1 if we find the option, or 0 if it is
 * not given.
 */
int
tgetflag(id)
	char *id;
{
	return (cgetcap(tbuf, id, ':') != NULL);
}

/*
 * Get a string valued option.
 * These are given as
 *	cl=^Z
 * Much decoding is done on the strings, and the strings are
 * placed in area, which is a ref parameter which is updated.
 * No checking on area overflow.
 */
char *
tgetstr(id, area)
	char *id, **area;
{
	char ids[3];
	char *s;
	int i;
	
	/*
	 * XXX
	 * This is for all the boneheaded programs that relied on tgetstr
	 * to look only at the first 2 characters of the string passed...
	 */
	*ids = *id;
	ids[1] = id[1];
	ids[2] = '\0';

	if ((i = cgetstr(tbuf, ids, &s)) < 0)
		return NULL;
	
	strlcpy(*area, s, 1024);
	*area += i + 1;
	return (s);
}
@


1.10
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.9 2005/08/14 17:15:19 espie Exp $	*/
@


1.9
log
@zap sccsid, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.8 2003/06/02 20:18:42 millert Exp $	*/
a35 1
#include <sys/param.h>
d41 1
d74 1
a74 1
	char   pathbuf[MAXPATHLEN];	/* holds raw path of filenames */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.7 2003/04/04 18:39:12 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)termcap.c	8.1 (Berkeley) 6/4/93";
#else
static char rcsid[] = "$OpenBSD: termcap.c,v 1.7 2003/04/04 18:39:12 millert Exp $";
#endif
#endif /* not lint */
@


1.7
log
@use strlcpy/snprintf; deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.6 2000/10/09 22:01:26 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.6 2000/10/09 22:01:26 millert Exp $";
@


1.6
log
@Don't call cgetset() on $TERMCAP.  There are no known problems (that I am
aware of) wrt termcap parsing but it is better to be on the safe side.
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.5 2000/08/02 04:10:46 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.5 2000/08/02 04:10:46 millert Exp $";
d111 4
a114 11
		else {
			if ((home = getenv("HOME")) != NULL && *home != '\0' &&
			    strlen(home) + sizeof(_PATH_DEF) <
			    sizeof(pathbuf)) {
				sprintf(pathbuf, "%s/%s", home,
				    _PATH_DEF);
			} else {
				strlcpy(pathbuf, _PATH_DEF,
				    sizeof(pathbuf));
			}
		}
d223 1
a223 1
	strcpy(*area, s);
@


1.5
log
@$HOME paranoia: never use getenv("HOME") w/o checking for NULL and non-zero
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.4 1998/11/19 17:07:14 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.4 1998/11/19 17:07:14 millert Exp $";
d95 1
a95 1
	cp = getenv("TERMCAP");
d106 1
a106 1
	if (issetugid()) {
d108 1
a108 1
	} else if (!cp || *cp != '/') { /* no TERMCAP or it holds an entry */
@


1.4
log
@For issetugid case, only ignore $TERMCAP if it is a path
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.3 1998/11/04 21:21:24 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.3 1998/11/04 21:21:24 millert Exp $";
d112 1
a112 1
			if ((home = getenv("HOME")) != NULL &&
@


1.3
log
@Some -Wall and use strlcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.2 1998/10/08 04:31:29 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.2 1998/10/08 04:31:29 millert Exp $";
d95 25
a119 26
	if (!issetugid()) {
		cp = getenv("TERMCAP");
		/*
		 * TERMCAP can have one of two things in it. It can be the name
		 * of a file to use instead of /usr/share/misc/termcap. In this
		 * case it better start with a "/". Or it can be an entry to
		 * use so we don't have to read the file. In this case it
		 * has to already have the newlines crunched out.  If TERMCAP
		 * does not hold a file name then a path of names is searched
		 * instead.  The path is found in the TERMPATH variable, or
		 * becomes "$HOME/.termcap /usr/share/misc/termcap" if no
		 * TERMPATH exists.
		 */
		if (!cp || *cp != '/') { /* no TERMCAP or it holds an entry */
			if ((termpath = getenv("TERMPATH")) != NULL)
				strlcpy(pathbuf, termpath, sizeof(pathbuf));
			else {
				if ((home = getenv("HOME")) != NULL &&
				    strlen(home) + sizeof(_PATH_DEF) <
				    sizeof(pathbuf)) {
					sprintf(pathbuf, "%s/%s", home,
					    _PATH_DEF);
				} else {
					strlcpy(pathbuf, _PATH_DEF,
					    sizeof(pathbuf));
				}
a120 3
		} else {		/* user-defined path in TERMCAP */
			/* still can be tokenized */
			strlcpy(pathbuf, cp, sizeof(pathbuf));
d122 3
a124 1
		*fname++ = pathbuf;	/* tokenize path into vector of names */
d126 1
@


1.2
log
@ignore $TERMCAP if issetugid()
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.1 1998/07/23 21:10:28 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.1 1998/07/23 21:10:28 millert Exp $";
d53 1
a93 1
	p = pathbuf;
d110 1
a110 1
				strncpy(pathbuf, termpath, sizeof(pathbuf) - 1);
d112 9
a120 12
				if ((home = getenv("HOME")) != NULL) {
					/* set up default */
					/* $HOME first */
					strncpy(pathbuf, home, sizeof(pathbuf) -
					    1 - strlen(_PATH_DEF) - 1);
					pathbuf[sizeof(pathbuf) - 1 -
					    strlen(_PATH_DEF) - 1] = '\0';
					p += strlen(pathbuf);	/* path, looking in */
					*p++ = '/';
				}	/* if no $HOME look in current dir */
				strncpy(p, _PATH_DEF, sizeof(pathbuf) -1 -
				    (p - pathbuf));
d122 1
a122 1
		} else {		/* user-defined name in TERMCAP */
d124 1
a124 1
			strncpy(pathbuf, cp, sizeof(pathbuf) - 1);
a125 2
		pathbuf[sizeof(pathbuf) - 1] = '\0';

d128 3
d154 1
a154 2
		strncpy(bp, dummy, 1023);
		bp[1023] = '\0';
@


1.1
log
@unified libtermcap/libocurses
@
text
@d1 1
a1 1
/*	$OpenBSD: termcap.c,v 1.9 1997/12/16 04:11:59 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: termcap.c,v 1.9 1997/12/16 04:11:59 millert Exp $";
d94 34
a127 27
	cp = getenv("TERMCAP");
	/*
	 * TERMCAP can have one of two things in it. It can be the name
	 * of a file to use instead of /usr/share/misc/termcap. In this
	 * case it better start with a "/". Or it can be an entry to
	 * use so we don't have to read the file. In this case it
	 * has to already have the newlines crunched out.  If TERMCAP
	 * does not hold a file name then a path of names is searched
	 * instead.  The path is found in the TERMPATH variable, or becomes
	 * "$HOME/.termcap /usr/share/misc/termcap" if no TERMPATH exists.
	 */
	if (!cp || *cp != '/') {	/* no TERMCAP or it holds an entry */
		if ((termpath = getenv("TERMPATH")) != NULL)
			strncpy(pathbuf, termpath, sizeof(pathbuf) - 1);
		else {
			if ((home = getenv("HOME")) != NULL) {
				/* set up default */
				/* $HOME first */
				strncpy(pathbuf, home, sizeof(pathbuf) - 1 -
				    strlen(_PATH_DEF) - 1);
				pathbuf[sizeof(pathbuf) - 1 -
				    strlen(_PATH_DEF) - 1] = '\0';
				p += strlen(pathbuf);	/* path, looking in */
				*p++ = '/';
			}	/* if no $HOME look in current directory */
			strncpy(p, _PATH_DEF, sizeof(pathbuf) -1 -
			    (p - pathbuf));
d129 3
a132 5
	else				/* user-defined name in TERMCAP */
		strncpy(pathbuf, cp, sizeof(pathbuf) - 1); /* still can be tokenized */
	pathbuf[sizeof(pathbuf) - 1] = '\0';

	*fname++ = pathbuf;	/* tokenize path into vector of names */
@

