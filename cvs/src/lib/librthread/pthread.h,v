head	1.4;
access;
symbols
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2017.09.05.02.40.54;	author guenther;	state Exp;
branches;
next	1.3;
commitid	5DW3WOQF0YGGx8lJ;

1.3
date	2016.04.15.21.06.23;	author guenther;	state Exp;
branches;
next	1.2;
commitid	6s1qZAx6LAoPwyLN;

1.2
date	2016.04.15.17.54.17;	author tedu;	state Exp;
branches;
next	1.1;
commitid	umGhJIHgJSbCXeBU;

1.1
date	2016.04.02.19.56.53;	author guenther;	state Exp;
branches;
next	;
commitid	8mfZyQLsoIGIAaFG;


desc
@@


1.4
log
@Move mutex, condvar, and thread-specific data routes, pthread_once, and
pthread_exit from libpthread to libc, along with low-level bits to
support them.  Major bump to both libc and libpthread.

Requested by libressl team.  Ports testing by naddy@@
ok kettenis@@
@
text
@/*	$OpenBSD: pthread.h,v 1.3 2016/04/15 21:06:23 guenther Exp $	*/
/*
 * Copyright (c) 2016 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _LIBPTHREAD_PTHREAD_H_
#define	_LIBPTHREAD_PTHREAD_H_

#include_next <pthread.h>

/*
 * Functions with PROTO_NORMAL() here MUST have matching
 * DEF_STD() or DEF_NONSTD() in the file where they are defined!
 */

PROTO_STD_DEPRECATED(pthread_attr_destroy);
PROTO_STD_DEPRECATED(pthread_attr_getdetachstate);
PROTO_STD_DEPRECATED(pthread_attr_getguardsize);
PROTO_STD_DEPRECATED(pthread_attr_getinheritsched);
PROTO_STD_DEPRECATED(pthread_attr_getschedparam);
PROTO_STD_DEPRECATED(pthread_attr_getschedpolicy);
PROTO_STD_DEPRECATED(pthread_attr_getscope);
PROTO_STD_DEPRECATED(pthread_attr_getstack);
PROTO_STD_DEPRECATED(pthread_attr_getstacksize);
PROTO_STD_DEPRECATED(pthread_attr_init);
PROTO_STD_DEPRECATED(pthread_attr_setdetachstate);
PROTO_STD_DEPRECATED(pthread_attr_setguardsize);
PROTO_STD_DEPRECATED(pthread_attr_setinheritsched);
PROTO_STD_DEPRECATED(pthread_attr_setschedparam);
PROTO_STD_DEPRECATED(pthread_attr_setschedpolicy);
PROTO_STD_DEPRECATED(pthread_attr_setscope);
PROTO_STD_DEPRECATED(pthread_attr_setstack);
PROTO_STD_DEPRECATED(pthread_attr_setstacksize);
PROTO_STD_DEPRECATED(pthread_barrier_destroy);
PROTO_STD_DEPRECATED(pthread_barrier_init);
PROTO_STD_DEPRECATED(pthread_barrier_wait);
PROTO_STD_DEPRECATED(pthread_barrierattr_destroy);
PROTO_STD_DEPRECATED(pthread_barrierattr_getpshared);
PROTO_STD_DEPRECATED(pthread_barrierattr_init);
PROTO_STD_DEPRECATED(pthread_barrierattr_setpshared);
PROTO_STD_DEPRECATED(pthread_cancel);
PROTO_STD_DEPRECATED(pthread_cleanup_pop);
PROTO_STD_DEPRECATED(pthread_cleanup_push);
PROTO_STD_DEPRECATED(pthread_condattr_getclock);
PROTO_STD_DEPRECATED(pthread_condattr_setclock);
PROTO_STD_DEPRECATED(pthread_create);
PROTO_STD_DEPRECATED(pthread_detach);
PROTO_STD_DEPRECATED(pthread_getconcurrency);
PROTO_STD_DEPRECATED(pthread_getcpuclockid);
PROTO_STD_DEPRECATED(pthread_getschedparam);
PROTO_STD_DEPRECATED(pthread_join);
PROTO_STD_DEPRECATED(pthread_kill);
PROTO_STD_DEPRECATED(pthread_mutex_getprioceiling);
PROTO_STD_DEPRECATED(pthread_mutex_setprioceiling);
PROTO_STD_DEPRECATED(pthread_mutexattr_destroy);
PROTO_STD_DEPRECATED(pthread_mutexattr_getprioceiling);
PROTO_STD_DEPRECATED(pthread_mutexattr_getprotocol);
PROTO_STD_DEPRECATED(pthread_mutexattr_gettype);
PROTO_STD_DEPRECATED(pthread_mutexattr_init);
PROTO_STD_DEPRECATED(pthread_mutexattr_setprioceiling);
PROTO_STD_DEPRECATED(pthread_mutexattr_setprotocol);
PROTO_STD_DEPRECATED(pthread_mutexattr_settype);
PROTO_STD_DEPRECATED(pthread_rwlock_destroy);
PROTO_NORMAL(pthread_rwlock_init);
PROTO_STD_DEPRECATED(pthread_rwlock_rdlock);
PROTO_STD_DEPRECATED(pthread_rwlock_timedrdlock);
PROTO_STD_DEPRECATED(pthread_rwlock_timedwrlock);
PROTO_STD_DEPRECATED(pthread_rwlock_tryrdlock);
PROTO_STD_DEPRECATED(pthread_rwlock_trywrlock);
PROTO_STD_DEPRECATED(pthread_rwlock_unlock);
PROTO_STD_DEPRECATED(pthread_rwlock_wrlock);
PROTO_STD_DEPRECATED(pthread_rwlockattr_destroy);
PROTO_STD_DEPRECATED(pthread_rwlockattr_getpshared);
PROTO_STD_DEPRECATED(pthread_rwlockattr_init);
PROTO_STD_DEPRECATED(pthread_rwlockattr_setpshared);
PROTO_NORMAL(pthread_setcancelstate);
PROTO_STD_DEPRECATED(pthread_setcanceltype);
PROTO_STD_DEPRECATED(pthread_setconcurrency);
PROTO_STD_DEPRECATED(pthread_setschedparam);
PROTO_STD_DEPRECATED(pthread_spin_destroy);
PROTO_STD_DEPRECATED(pthread_spin_init);
PROTO_STD_DEPRECATED(pthread_spin_lock);
PROTO_STD_DEPRECATED(pthread_spin_trylock);
PROTO_STD_DEPRECATED(pthread_spin_unlock);
PROTO_STD_DEPRECATED(pthread_testcancel);

/*
 * Obsolete, non-portable
 */
PROTO_DEPRECATED(pthread_setprio);
PROTO_DEPRECATED(pthread_getprio);
PROTO_DEPRECATED(pthread_attr_getstackaddr);
PROTO_NORMAL(pthread_attr_setstackaddr);
PROTO_DEPRECATED(pthread_yield);

#endif /* !_LIBPTHREAD_PTHREAD_H_ */
@


1.3
log
@Document PROTO_NORMAL requires matching DEF_{,NON}STD
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread.h,v 1.2 2016/04/15 17:54:17 tedu Exp $	*/
a55 7
PROTO_NORMAL(pthread_cond_broadcast);
PROTO_NORMAL(pthread_cond_destroy);
PROTO_NORMAL(pthread_cond_init);
PROTO_NORMAL(pthread_cond_signal);
PROTO_STD_DEPRECATED(pthread_cond_timedwait);
PROTO_NORMAL(pthread_cond_wait);
PROTO_STD_DEPRECATED(pthread_condattr_destroy);
a56 1
PROTO_STD_DEPRECATED(pthread_condattr_init);
a59 2
PROTO_STD_DEPRECATED(pthread_equal);
PROTO_NORMAL(pthread_exit);
a62 1
PROTO_NORMAL(pthread_getspecific);
a63 2
PROTO_NORMAL(pthread_key_create);
PROTO_STD_DEPRECATED(pthread_key_delete);
a64 1
PROTO_NORMAL(pthread_mutex_destroy);
a65 2
PROTO_NORMAL(pthread_mutex_init);
PROTO_NORMAL(pthread_mutex_lock);
a66 3
PROTO_STD_DEPRECATED(pthread_mutex_timedlock);
PROTO_STD_DEPRECATED(pthread_mutex_trylock);
PROTO_NORMAL(pthread_mutex_unlock);
a74 1
PROTO_STD_DEPRECATED(pthread_once);
a87 1
PROTO_NORMAL(pthread_self);
a91 1
PROTO_NORMAL(pthread_setspecific);
@


1.2
log
@make pthread_barrier_wait behave more like it does on other platforms.
from Kari Tristan Helgason
@
text
@d1 1
a1 1
/*	$OpenBSD: pthread.h,v 1.1 2016/04/02 19:56:53 guenther Exp $	*/
d22 5
@


1.1
log
@Wrap <pthread.h> and <pthread_np.h> to eliminate PLT entries for internal
references.  Use _thread_pagesize for the semaphore mmap size instead of
calling getpagesize() each time.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
PROTO_STD_DEPRECATED(pthread_cond_signal);
@

