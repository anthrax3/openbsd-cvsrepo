head	1.43;
access;
symbols
	OPENBSD_6_0:1.43.0.2
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.40.0.2
	OPENBSD_5_9_BASE:1.40
	OPENBSD_5_8:1.40.0.4
	OPENBSD_5_8_BASE:1.40
	OPENBSD_5_7:1.39.0.2
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.39.0.4
	OPENBSD_5_6_BASE:1.39
	OPENBSD_5_5:1.37.0.4
	OPENBSD_5_5_BASE:1.37
	OPENBSD_5_4:1.36.0.2
	OPENBSD_5_4_BASE:1.36
	OPENBSD_5_3:1.34.0.2
	OPENBSD_5_3_BASE:1.34
	OPENBSD_5_2:1.30.0.2
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9;
locks; strict;
comment	@# @;


1.43
date	2016.06.01.04.34.18;	author tedu;	state Exp;
branches;
next	1.42;
commitid	ErT5LRO9WOsX4PgD;

1.42
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.41;
commitid	d9R7VGw9CHTkwXE1;

1.41
date	2016.04.02.19.56.53;	author guenther;	state Exp;
branches;
next	1.40;
commitid	8mfZyQLsoIGIAaFG;

1.40
date	2015.05.19.20.50.06;	author guenther;	state Exp;
branches;
next	1.39;
commitid	9XB6auZflgiDfN67;

1.39
date	2014.07.16.20.02.17;	author okan;	state Exp;
branches;
next	1.38;
commitid	Fyv0hIvHU3jMAgMT;

1.38
date	2014.07.10.13.46.30;	author guenther;	state Exp;
branches;
next	1.37;
commitid	uRBDKFI6PMPqyipz;

1.37
date	2013.08.06.19.11.53;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2013.07.05.21.29.51;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2012.11.22.19.10.27;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2012.09.12.09.19.54;	author haesbaert;	state Exp;
branches;
next	1.32;

1.32
date	2012.08.15.18.08.22;	author matthew;	state Exp;
branches;
next	1.31;

1.31
date	2012.08.02.13.38.39;	author okan;	state Exp;
branches;
next	1.30;

1.30
date	2012.05.03.09.07.17;	author pirofti;	state Exp;
branches;
next	1.29;

1.29
date	2012.04.11.10.18.46;	author pirofti;	state Exp;
branches;
next	1.28;

1.28
date	2012.03.22.00.44.55;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2012.02.23.04.43.06;	author guenther;	state Exp;
branches;
next	1.26;

1.26
date	2012.02.19.04.53.37;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2012.02.18.16.24.02;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2012.02.15.06.48.40;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2012.01.04.17.43.34;	author mpi;	state Exp;
branches;
next	1.22;

1.22
date	2011.12.22.00.42.07;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2011.12.21.23.59.03;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2011.12.21.00.49.47;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2011.12.05.04.02.03;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.27.04.12.43;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.06.12.15.51;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.03.20.49.00;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.27.19.42.24;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.21.16.05.48;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2009.02.20.01.31.46;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2009.02.20.01.19.06;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.05.21.06.11;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.05.04.06.48;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.04.19.48.52;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.01.19.32.30;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.31.21.40.43;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.29.20.34.22;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.25.00.47.07;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.07.03.18.39;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.03.18.36.40;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.03.18.16.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.43
log
@implicit function declaration is the error we really want, not the
annoying strict prototypes
@
text
@#	$OpenBSD: Makefile,v 1.42 2016/05/07 19:05:22 guenther Exp $

LIB=pthread
LIBCSRCDIR=	${.CURDIR}/../libc

CFLAGS+=-Wall -g -Werror -Wshadow
CFLAGS+=-Werror-implicit-function-declaration
CFLAGS+=-Wsign-compare
CFLAGS+=-I${.CURDIR} -include namespace.h \
	-I${LIBCSRCDIR}/arch/${MACHINE_CPU} -I${LIBCSRCDIR}/include
CDIAGFLAGS=
LDADD = -Wl,-znodelete

.if defined(NOPIC)
CFLAGS+=-DNO_PIC
.endif

VERSION_SCRIPT= ${.CURDIR}/Symbols.map

.PATH: ${.CURDIR}/arch/${MACHINE_CPU}
SRCS=	rthread.c \
	rthread_attr.c \
	rthread_barrier.c \
	rthread_barrier_attr.c \
	rthread_condattr.c \
	rthread_debug.c \
	rthread_file.c \
	rthread_fork.c \
	rthread_getcpuclockid.c \
	rthread_libc.c \
	rthread_mutex_prio.c \
	rthread_mutexattr.c \
	rthread_np.c \
	rthread_once.c \
	rthread_rwlock.c \
	rthread_rwlockattr.c \
	rthread_sched.c \
	rthread_sem.c \
	rthread_sig.c \
	rthread_stack.c \
	rthread_spin_lock.c \
	rthread_sync.c \
	rthread_tls.c \
	sched_prio.c

OBJS+= _atomic_lock.o

SRCDIR= ${.CURDIR}/../libpthread
.include "${SRCDIR}/include/Makefile.inc"
.include "${SRCDIR}/man/Makefile.inc"
.include <bsd.lib.mk>

${OBJS} ${GOBJS} ${POBJS} ${SOBJS} ${DOBJS}: ${.CURDIR}/namespace.h
@


1.42
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.41 2016/04/02 19:56:53 guenther Exp $
d7 1
a7 1
CFLAGS+=-Wmissing-prototypes -Wstrict-prototypes
@


1.41
log
@Wrap <pthread.h> and <pthread_np.h> to eliminate PLT entries for internal
references.  Use _thread_pagesize for the semaphore mmap size instead of
calling getpagesize() each time.

ok beck@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.40 2015/05/19 20:50:06 guenther Exp $
d12 1
a12 1
LDADD = -Wl,-znodelete,-zinitfirst,-znodlopen
d18 2
a24 1
	rthread_cancel.c \
d46 1
a46 1
OBJS+= _atomic_lock.o cerror.o
@


1.40
log
@Instead of testing for __ELF__ and/or vax, leave out the bits for interfacing
with ld.so locking whenever building NOPIC

pointless use of __ELF__ noted by brad@@
ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.39 2014/07/16 20:02:17 okan Exp $
d9 2
a10 1
CFLAGS+=-I${LIBCSRCDIR}/arch/${MACHINE_CPU} -I${LIBCSRCDIR}/include
d51 2
@


1.39
log
@zap trailing newlines; "go for it" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.38 2014/07/10 13:46:30 guenther Exp $
d12 4
@


1.38
log
@__tfork_thread is in libc, so move the manpage over too

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.37 2013/08/06 19:11:53 miod Exp $
a45 1

@


1.37
log
@Remove support for COMPILER_VERSION == gcc2.
Change the logic depending upon COMPILER_VERSION everywhere, to assume gcc4
is the norm and to explicitely test for gcc3 when a different behaviour
is required.
No functional change intended. Be sure to `make install' in share/mk before
attempting to do anything.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2013/07/05 21:29:51 miod Exp $
a40 3

MAN+=	__tfork_thread.3
MLINKS+=__tfork_thread.3 __tfork.2
@


1.36
log
@ELF_TOOLCHAIN bye bye.
@
text
@d1 1
a1 4
#	$OpenBSD: Makefile,v 1.35 2013/06/17 19:11:54 guenther Exp $

# For ``COMPILER_VERSION''
.include <bsd.own.mk>
d7 1
a7 4
.if ${COMPILER_VERSION:L} == "gcc4" || ${COMPILER_VERSION:L} == "gcc3"
CFLAGS+=-Wmissing-prototypes
.endif
CFLAGS+=-Wstrict-prototypes
@


1.35
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2012/11/22 19:10:27 miod Exp $
d3 1
a3 1
# For ``COMPILER_VERSION'' and ``ELF_TOOLCHAIN''
d10 1
a10 2
.if ${COMPILER_VERSION:L} == "gcc4" || \
    (${COMPILER_VERSION:L} == "gcc3" && ${ELF_TOOLCHAIN:L} == "yes")
@


1.34
log
@Do not pass -Wmissing-prototypes when building on a non-ELF platform with
gcc 3 as the compiler. The way constructors are built triggers this warning,
which is fatal because of -Werror. ok espie@@ guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2012/09/12 09:19:54 haesbaert Exp $
d30 1
@


1.33
log
@Define empty CDIAGFLAGS for programs that use Werror.
Makes "make build" build with WARNINGS=Yes on amd64.

ok espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2012/08/15 18:08:22 matthew Exp $
d3 1
a3 1
# For ``COMPILER_VERSION''
d10 2
a11 1
.if ${COMPILER_VERSION:L} == "gcc3" || ${COMPILER_VERSION:L} == "gcc4"
@


1.32
log
@A couple small but long anticipated changes:

  - Link libpthread.so with -znodlopen.  Because libpthread overrides
    the weak symbols in libc, we can't allow it to be dynamically
    loaded or else libc's weak symbols might have already been
    resolved by ld.so.  (Also, major bump because this is technically
    a backwards incompat change in behavior, although dlopen()ing
    libpthread never really worked.)

  - Link libc.so with -nodefaultlibs -lgcc.  This ensures that libc
    doesn't try to link against itself (which ld.so wouldn't like).

  - Change GCC 4 to link shared objects with -lpthread and -lc as
    appropriate, now that there's no issues with doing so.  This means
    that it's no longer necessary to patch software to use -pthread
    instead of -lpthread.  (Ports tree rejoice!)

Also, to preemptively answer this question: No, this does not
eliminate the need for LD_PRELOAD=libpthread.so.  That's a separate
issue that won't be resolved until we eliminate libc's weak symbols.

Discussed extensively on email and icb over the past few months.
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2012/08/02 13:38:39 okan Exp $
d16 1
@


1.31
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2012/05/03 09:07:17 pirofti Exp $
d16 1
a16 1
LDADD = -Wl,-znodelete,-zinitfirst
@


1.30
log
@Add pthread spinlock support.

Implementation, documentation and naive regression tests for:
- pthread_spin_init()
- pthread_spin_destroy()
- pthread_spin_lock()
- pthread_spin_trylock()
- pthread_spin_unlock()

Implementation okay guenther@@, documentation okay jmc@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2012/04/11 10:18:46 pirofti Exp $
a6 2
WANTLINT=
LINTFLAGS=-z
@


1.29
log
@Add pthread barrier support.

Implementation and documentation for:
 - pthread_barrier_init()
 - pthread_barrier_destroy()
 - pthread_barrier_wait()
 - pthread_barrierattr_init()
 - pthread_barrierattr_destroy()
 - pthread_barrierattr_getpshared()
 - pthread_barrierattr_setpshared()

Currently only private barriers are supported.

Okay guenther@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2012/03/22 00:44:55 guenther Exp $
d41 1
@


1.28
log
@Move __tfork_thread() from rthreads (libpthread) to libc so that
it can be used for not-strictly-threading purposes

ok matthew@@ kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2012/02/23 04:43:06 guenther Exp $
d23 2
@


1.27
log
@Add pthread_condattr_{get,set}clock(), requested by aja@@
Add pthread_mutex_timedlock(), requested by dcoppa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2012/02/19 04:53:37 guenther Exp $
d43 1
a43 1
OBJS+= _atomic_lock.o rfork_thread.o cerror.o
@


1.26
log
@Extend miod's fix CFLAGS fix to all gcc2 platforms (suggested by Tobias
Ulmer).  Only pull in bsd.lib.mk once to avoid linking objects twice
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2012/02/18 16:24:02 miod Exp $
d21 21
a41 6
SRCS= rthread.c rthread_attr.c rthread_sched.c rthread_sync.c rthread_tls.c \
	rthread_sig.c rthread_np.c rthread_debug.c rthread_stack.c \
	rthread_libc.c rthread_fork.c rthread_file.c sched_prio.c \
	rthread_cancel.c rthread_mutexattr.c rthread_once.c \
	rthread_rwlock.c rthread_rwlockattr.c rthread_mutex_prio.c \
	rthread_sem.c
@


1.25
log
@Work around compiler confusion while building rthread.o on vax.
@
text
@d1 4
a4 1
#	$OpenBSD: Makefile,v 1.24 2012/02/15 06:48:40 guenther Exp $
d12 1
a12 1
.if "${MACHINE_ARCH}" != "vax"
a31 1
.include <bsd.lib.mk>
@


1.24
log
@Nothing important, just switching from pthreads to rthreads
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2012/01/04 17:43:34 mpi Exp $
d9 5
a13 1
CFLAGS+=-Wstrict-prototypes -Wmissing-prototypes -Wsign-compare
@


1.23
log
@Split out the semaphore functions.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2011/12/22 00:42:07 guenther Exp $
d3 1
a3 1
LIB=rthread
d25 1
d27 3
d31 1
@


1.22
log
@Add pthread_mutex_{get,set}prioceiling()
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2011/12/21 23:59:03 guenther Exp $
d18 2
a19 1
	rthread_rwlock.c rthread_rwlockattr.c rthread_mutex_prio.c
@


1.21
log
@Split out the pthread_rwlock* and pthread_once() functions from rthread_sync.c
to new files rthread_rwlock.c, rthread_rwlockattr.c, and rthread_once.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2011/12/21 00:49:47 guenther Exp $
d18 1
a18 1
	rthread_rwlock.c rthread_rwlockattr.c
@


1.20
log
@Split out the pthread_mutexattr_* functions from rthread_sync.c to
new file rthread_mutexattr.c.  Add basic implementations of
pthread_mutexattr_{set,get}{protocol,prioceiling}

Requested by aja
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2011/12/05 04:02:03 guenther Exp $
d17 2
a18 1
	rthread_cancel.c rthread_mutexattr.c
@


1.19
log
@Implement cancelation for the basic syscall cancelation points,
using previously allocated SIGTHR to interrupt in-process syscalls
and fixing the spelling of "cancelled" along the way.
Modeled on FreeBSD's libthr
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2011/11/27 04:12:43 guenther Exp $
d17 1
a17 1
	rthread_cancel.c
@


1.18
log
@Set the initfirst and nodelete flags on the shared library, in anticipation
of support in ld.so
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2011/11/06 12:15:51 guenther Exp $
d16 2
a17 1
	rthread_libc.c rthread_fork.c rthread_file.c sched_prio.c
@


1.17
log
@Copy support for sched_get_priority_{min,max} from libpthread.
Requested by many to ease substitution of librthread for libpthread
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2011/10/17 06:39:20 guenther Exp $
d11 1
@


1.16
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2010/02/03 20:49:00 miod Exp $
d15 1
a15 1
	rthread_libc.c rthread_fork.c rthread_file.c
@


1.15
log
@Use MACHINE_CPU instead of MACHINE_ARCH to pick the correct machine dependent
files or directories when applicable.
The inspiration and name of MACHINE_CPU come from NetBSD, although the way to
provide it to Makefiles is completely different.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.14 2009/11/27 19:42:24 guenther Exp $
d10 1
a10 1
CFLAGS+=-I${LIBCSRCDIR}/include
d17 4
a20 1
OBJS+= _atomic_lock.o rfork_thread.o
@


1.14
log
@Change threxit() to take a pointer to a pid_t to zero out from the
kernel so that librthread can detect when a thread is completely
done with its stack without need a kqueue.  The dying thread moves
itself to a GC list, other threads scan the GC list on pthread_create()
and pthread_join() and free the stack and handle once the thread's
thread id is zeroed.

"get it in" deraadt@@, tedu@@, cheers by others
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2009/10/21 16:05:48 guenther Exp $
d12 1
a12 1
.PATH: ${.CURDIR}/arch/${MACHINE_ARCH}
@


1.13
log
@Add f*lockfile() routines to librthread

ok kurt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2009/02/20 01:31:46 tedu Exp $
d15 1
a15 1
	rthread_reaper.c rthread_libc.c rthread_fork.c rthread_file.c
@


1.12
log
@apparently all the other libraries get linted, so I'll just have to live with it
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2009/02/20 01:19:06 tedu Exp $
d15 1
a15 1
	rthread_reaper.c rthread_libc.c rthread_fork.c
@


1.11
log
@the lint warnings are more annoying than anything else.  we already have a full set of warnings from the compiler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2008/06/05 21:06:11 kurt Exp $
d4 1
a4 1
#WANTLINT=
@


1.10
log
@- Add fork/vfork wrapper functions to reset state in the child process.
- Make an effort to protect important libc and ld.so critical areas during
the fork(2)/vfork(2) sys call.
- Add pthread_atfork(3) implementation based on Daniel Eischen's code.

Original diff by Philip Guenther <guenther at gmail.com> with some
additions and refinements by me. Positive test report from brad@@ with
many kde apps. fork(2) and pthread_atfork(3) pthread regresses pass.
okay tedu@@, kettenis@@, marc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2006/01/05 04:06:48 marc Exp $
d4 1
a4 1
WANTLINT=
@


1.9
log
@
add -Wstrict-prototypes -Wmissing-prototypes -Wsign-compare
Minor tweaks to compile with the above, primarily in fixing
the conflicts between semaphore.h and rthread.h
"i like the additional warnings" tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2006/01/04 19:48:52 otto Exp $
d15 1
a15 1
	rthread_reaper.c rthread_libc.c
@


1.8
log
@Cleanup struct pthread and stack after thread exits. This version does
not use a separate reaper thread. ok tedu@@ marc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2006/01/01 19:32:30 marc Exp $
d6 2
d9 2
d15 1
a15 1
	rthread_reaper.c
@


1.7
log
@
thread stack handling changes.  Add guard zones and allow stack
size (and guard zone size) to be set using pthread_attr.   Guard
zones are specified in bytes, but implemented in terms of a
page size.

OK Otto@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/12/31 21:40:43 marc Exp $
d10 2
a11 1
	rthread_sig.c rthread_np.c rthread_debug.c rthread_stack.c
@


1.6
log
@
Add "print debug foo" function safe to use in signal handlers, example:
_rthread_debug(3, "foo = %s", foo);
where output is to stderr and will only be printed if the current
debug level is >= 3.   Messages with a debug level of 0 are always
printed.  The level can be set from the environment (not enabled yet)
or with gdb by modifying variable _rthread_debug_level.
"Fine with me" -Otto
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/12/29 20:34:22 otto Exp $
d10 1
a10 1
	rthread_sig.c rthread_np.c rthread_debug.c
@


1.5
log
@Put the existing _np functions into separate file; introduce
pthread_stackseg_np(), from existing pthread lib.
discussed with tedu@@ ok marc@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/12/25 00:47:07 tedu Exp $
d4 2
d10 1
a10 1
	rthread_sig.c rthread_np.c
@


1.4
log
@remove silly alpha comment
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2005/12/07 03:18:39 tedu Exp $
d7 3
a9 1
SRCS= rthread.c rthread_attr.c rthread_sched.c rthread_sync.c rthread_tls.c rthread_sig.c
@


1.3
log
@add the posix semaphore functions.  this lets vlc work.
ok brad
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2005/12/03 18:36:40 tedu Exp $
d8 1
a8 1
OBJS+= _atomic_lock.o rfork_thread.o # .S on alpha
@


1.2
log
@rcs for the makefile
@
text
@d1 1
a1 1
#	$OpenBSD$
d4 1
a4 1
CFLAGS+=-Wall -g -Werror
@


1.1
log
@add userland thread library.  incomplete, but functional
@
text
@d1 2
@

