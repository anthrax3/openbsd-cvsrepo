head	1.25;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@ * @;


1.25
date	2016.09.04.10.13.35;	author akfaew;	state Exp;
branches;
next	1.24;
commitid	tPNEomz2X1xlRc3u;

1.24
date	2016.09.03.16.44.20;	author akfaew;	state Exp;
branches;
next	1.23;
commitid	A8DISbEBB3jwsSL3;

1.23
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	1.22;
commitid	d9R7VGw9CHTkwXE1;

1.22
date	2016.04.02.19.56.53;	author guenther;	state Exp;
branches;
next	1.21;
commitid	8mfZyQLsoIGIAaFG;

1.21
date	2015.12.10.13.02.24;	author tedu;	state Exp;
branches;
next	1.20;
commitid	jXlPiWvF4ULgEEjw;

1.20
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	0DYulI8hhujBHMcR;

1.19
date	2014.06.27.23.21.47;	author matthew;	state Exp;
branches;
next	1.18;
commitid	HiQDW0mZR2gG0byE;

1.18
date	2013.12.11.16.24.16;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2013.12.08.19.04.07;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2013.11.26.11.24.43;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.22.07.48.41;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.11.21.17.43.57;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.20.23.18.17;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2013.11.20.03.16.39;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2013.11.20.03.04.29;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2013.11.18.23.10.48;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.01.23.06.26;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2012.03.03.11.09.19;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.03.10.02.26;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.02.08.07.43;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.04.21.01.25;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.04.17.59.28;	author mpi;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.04.17.43.34;	author mpi;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Get rid of ticket support, replace "struct _spinlock" with "_atomic_lock_t".

ok tedu@@
@
text
@/*	$OpenBSD: rthread_sem.c,v 1.24 2016/09/03 16:44:20 akfaew Exp $ */
/*
 * Copyright (c) 2004,2005,2013 Ted Unangst <tedu@@openbsd.org>
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <errno.h>
#include <fcntl.h>
#include <sha2.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <pthread.h>

#include "rthread.h"
#include "cancel.h"		/* in libc/include */

#define SHARED_IDENT ((void *)-1)

/* SHA256_DIGEST_STRING_LENGTH includes nul */
/* "/tmp/" + sha256 + ".sem" */
#define SEM_PATH_SIZE (5 + SHA256_DIGEST_STRING_LENGTH + 4)

/* long enough to be hard to guess */
#define SEM_RANDOM_NAME_LEN	10

/*
 * Size of memory to be mmap()'ed by named semaphores.
 * Should be >= SEM_PATH_SIZE and page-aligned.
 */
#define SEM_MMAP_SIZE	_thread_pagesize

/*
 * Internal implementation of semaphores
 */
int
_sem_wait(sem_t sem, int tryonly, const struct timespec *abstime,
    int *delayed_cancel)
{
	void *ident = (void *)&sem->waitcount;
	int r;

	if (sem->shared)
		ident = SHARED_IDENT;

	_spinlock(&sem->lock);
	if (sem->value) {
		sem->value--;
		r = 0;
	} else if (tryonly) {
		r = EAGAIN;
	} else {
		sem->waitcount++;
		do {
			r = __thrsleep(ident, CLOCK_REALTIME, abstime,
			    &sem->lock, delayed_cancel);
			_spinlock(&sem->lock);
			/* ignore interruptions other than cancelation */
			if (r == EINTR && (delayed_cancel == NULL ||
			    *delayed_cancel == 0))
				r = 0;
		} while (r == 0 && sem->value == 0);
		sem->waitcount--;
		if (r == 0)
			sem->value--;
	}
	_spinunlock(&sem->lock);
	return (r);
}

/* always increment count */
int
_sem_post(sem_t sem)
{
	void *ident = (void *)&sem->waitcount;
	int rv = 0;

	if (sem->shared)
		ident = SHARED_IDENT;

	_spinlock(&sem->lock);
	sem->value++;
	if (sem->waitcount) {
		__thrwakeup(ident, 1);
		rv = 1;
	}
	_spinunlock(&sem->lock);
	return (rv);
}

/*
 * exported semaphores
 */
int
sem_init(sem_t *semp, int pshared, unsigned int value)
{
	sem_t sem;

	if (value > SEM_VALUE_MAX) {
		errno = EINVAL;
		return (-1);
	}

	if (pshared) {
		errno = EPERM;
		return (-1);
#ifdef notyet
		char name[SEM_RANDOM_NAME_LEN];
		sem_t *sempshared;
		int i;

		for (;;) {
			for (i = 0; i < SEM_RANDOM_NAME_LEN - 1; i++)
				name[i] = arc4random_uniform(255) + 1;
			name[SEM_RANDOM_NAME_LEN - 1] = '\0';
			sempshared = sem_open(name, O_CREAT | O_EXCL, 0, value);
			if (sempshared != SEM_FAILED)
				break;
			if (errno == EEXIST)
				continue;
			if (errno != EPERM)
				errno = ENOSPC;
			return (-1);
		}

		/* unnamed semaphore should not be opened twice */
		if (sem_unlink(name) == -1) {
			sem_close(sempshared);
			errno = ENOSPC;
			return (-1);
		}

		*semp = *sempshared;
		free(sempshared);
		return (0);
#endif
	}

	sem = calloc(1, sizeof(*sem));
	if (!sem) {
		errno = ENOSPC;
		return (-1);
	}
	sem->lock = _SPINLOCK_UNLOCKED;
	sem->value = value;
	*semp = sem;

	return (0);
}

int
sem_destroy(sem_t *semp)
{
	sem_t sem;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	if (sem->waitcount) {
#define MSG "sem_destroy on semaphore with waiters!\n"
		write(2, MSG, sizeof(MSG) - 1);
#undef MSG
		errno = EBUSY;
		return (-1);
	}

	*semp = NULL;
	if (sem->shared)
		munmap(sem, SEM_MMAP_SIZE);
	else
		free(sem);

	return (0);
}

int
sem_getvalue(sem_t *semp, int *sval)
{
	sem_t sem;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	_spinlock(&sem->lock);
	*sval = sem->value;
	_spinunlock(&sem->lock);

	return (0);
}

int
sem_post(sem_t *semp)
{
	sem_t sem;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	_sem_post(sem);

	return (0);
}

int
sem_wait(sem_t *semp)
{
	struct tib *tib = TIB_GET();
	pthread_t self;
	sem_t sem;
	int r;
	PREP_CANCEL_POINT(tib);

	if (!_threads_ready)
		_rthread_init();
	self = tib->tib_thread;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	ENTER_DELAYED_CANCEL_POINT(tib, self);
	r = _sem_wait(sem, 0, NULL, &self->delayed_cancel);
	LEAVE_CANCEL_POINT_INNER(tib, r);

	if (r) {
		errno = r;
		return (-1);
	}

	return (0);
}

int
sem_timedwait(sem_t *semp, const struct timespec *abstime)
{
	struct tib *tib = TIB_GET();
	pthread_t self;
	sem_t sem;
	int r;
	PREP_CANCEL_POINT(tib);

	if (!_threads_ready)
		_rthread_init();
	self = tib->tib_thread;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	ENTER_DELAYED_CANCEL_POINT(tib, self);
	r = _sem_wait(sem, 0, abstime, &self->delayed_cancel);
	LEAVE_CANCEL_POINT_INNER(tib, r);

	if (r) {
		errno = r == EWOULDBLOCK ? ETIMEDOUT : r;
		return (-1);
	}

	return (0);
}

int
sem_trywait(sem_t *semp)
{
	sem_t sem;
	int r;

	if (!semp || !(sem = *semp)) {
		errno = EINVAL;
		return (-1);
	}

	r = _sem_wait(sem, 1, NULL, NULL);

	if (r) {
		errno = r;
		return (-1);
	}

	return (0);
}


static void
makesempath(const char *origpath, char *sempath, size_t len)
{
	char buf[SHA256_DIGEST_STRING_LENGTH];

	SHA256Data(origpath, strlen(origpath), buf);
	snprintf(sempath, len, "/tmp/%s.sem", buf);
}

sem_t *
sem_open(const char *name, int oflag, ...)
{
	char sempath[SEM_PATH_SIZE];
	struct stat sb;
	sem_t sem, *semp;
	unsigned int value = 0;
	int created = 0, fd;

	if (!_threads_ready)
		_rthread_init();

	if (oflag & ~(O_CREAT | O_EXCL)) {
		errno = EINVAL;
		return (SEM_FAILED);
	}

	if (oflag & O_CREAT) {
		va_list ap;
		va_start(ap, oflag);
		/* 3rd parameter mode is not used */
		va_arg(ap, mode_t);
		value = va_arg(ap, unsigned);
		va_end(ap);

		if (value > SEM_VALUE_MAX) {
			errno = EINVAL;
			return (SEM_FAILED);
		}
	}

	makesempath(name, sempath, sizeof(sempath));
	fd = open(sempath, O_RDWR | O_NOFOLLOW | oflag, 0600);
	if (fd == -1)
		return (SEM_FAILED);
	if (fstat(fd, &sb) == -1 || !S_ISREG(sb.st_mode)) {
		close(fd);
		errno = EINVAL;
		return (SEM_FAILED);
	}
	if (sb.st_uid != geteuid()) {
		close(fd);
		errno = EPERM;
		return (SEM_FAILED);
	}
	if (sb.st_size != (off_t)SEM_MMAP_SIZE) {
		if (!(oflag & O_CREAT)) {
			close(fd);
			errno = EINVAL;
			return (SEM_FAILED);
		}
		if (sb.st_size != 0) {
			close(fd);
			errno = EINVAL;
			return (SEM_FAILED);
		}
		if (ftruncate(fd, SEM_MMAP_SIZE) == -1) {
			close(fd);
			errno = EINVAL;
			return (SEM_FAILED);
		}

		created = 1;
	}
	sem = mmap(NULL, SEM_MMAP_SIZE, PROT_READ | PROT_WRITE,
	    MAP_SHARED, fd, 0);
	close(fd);
	if (sem == MAP_FAILED) {
		errno = EINVAL;
		return (SEM_FAILED);
	}
	semp = malloc(sizeof(*semp));
	if (!semp) {
		munmap(sem, SEM_MMAP_SIZE);
		errno = ENOSPC;
		return (SEM_FAILED);
	}
	if (created) {
		sem->lock = _SPINLOCK_UNLOCKED;
		sem->value = value;
		sem->shared = 1;
	}
	*semp = sem;

	return (semp);
}

int
sem_close(sem_t *semp)
{
	sem_t sem;

	if (!semp || !(sem = *semp) || !sem->shared) {
		errno = EINVAL;
		return (-1);
	}

	*semp = NULL;
	munmap(sem, SEM_MMAP_SIZE);
	free(semp);

	return (0);
}

int
sem_unlink(const char *name)
{
	char sempath[SEM_PATH_SIZE];

	makesempath(name, sempath, sizeof(sempath));
	return (unlink(sempath));
}
@


1.24
log
@Remove _USING_TICKETS, it's defined as 0. No functional change.

ok tedu@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.23 2016/05/07 19:05:22 guenther Exp $ */
d75 1
a75 1
			    &sem->lock.ticket, delayed_cancel);
d163 1
a163 1
	sem->lock = _SPINLOCK_UNLOCKED_ASSIGN;
d398 1
a398 1
		sem->lock = _SPINLOCK_UNLOCKED_ASSIGN;
@


1.23
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.22 2016/04/02 19:56:53 guenther Exp $ */
d74 2
a75 3
			r = __thrsleep(ident, CLOCK_REALTIME |
			    _USING_TICKETS, abstime, &sem->lock.ticket,
			    delayed_cancel);
@


1.22
log
@Wrap <pthread.h> and <pthread_np.h> to eliminate PLT entries for internal
references.  Use _thread_pagesize for the semaphore mmap size instead of
calling getpagesize() each time.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.21 2015/12/10 13:02:24 tedu Exp $ */
d35 1
d233 2
a234 1
	pthread_t self = pthread_self();
d237 5
d248 1
a248 1
	_enter_delayed_cancel(self);
d250 1
a250 1
	_leave_delayed_cancel(self, r);
d263 2
a264 1
	pthread_t self = pthread_self();
d267 5
d278 1
a278 1
	_enter_delayed_cancel(self);
d280 1
a280 1
	_leave_delayed_cancel(self, r);
d329 3
@


1.21
log
@use geteuid to allow root to communicate with others.
report from Jeunder Yu
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.20 2015/01/16 16:48:52 deraadt Exp $ */
d49 1
a49 1
#define SEM_MMAP_SIZE	getpagesize()
d350 1
a350 1
	if (sb.st_size != SEM_MMAP_SIZE) {
@


1.20
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.19 2014/06/27 23:21:47 matthew Exp $ */
d345 1
a345 1
	if (sb.st_uid != getuid()) {
@


1.19
log
@Fix mmap() flag usage: explicitly specify MAP_PRIVATE and drop useless
MAP_FILE and MAP_HASSEMAPHORE flags.

Discussed with deraadt, tedu, and kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.18 2013/12/11 16:24:16 tedu Exp $ */
d18 1
a18 1
#include <sys/param.h>
@


1.18
log
@revert to return EPERM for sem_init pshared until it really works
reported by zhuk
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.17 2013/12/08 19:04:07 fgsch Exp $ */
d370 1
a370 1
	    MAP_FILE | MAP_SHARED | MAP_HASSEMAPHORE, fd, 0);
@


1.17
log
@Reduce the random name length when sem_init is called with pshared
following what is recommended for mkstemp. This reduces the number of calls
to sched_yield considerably.
tedu@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.17 2013/11/26 11:24:43 fgsch Exp $ */
d116 1
a116 3
	char name[SEM_RANDOM_NAME_LEN];
	sem_t sem, *sempshared;
	int i;
d124 7
d155 1
@


1.16
log
@Remove unused var and include.  Fix errno values as per spec.
NULL semaphore in sem_close().  Minor cosmetic changes.
tedu@@ zhuk@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.15 2013/11/22 07:48:41 deraadt Exp $ */
d43 1
a43 1
#define SEM_RANDOM_NAME_LEN	160
@


1.15
log
@don't use PAGE_SIZE, it is not portable.  Ted can polish this after
if he wants, but let us get the tree building.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.14 2013/11/21 17:43:57 tedu Exp $ */
a22 1
#include <err.h>
d116 1
d118 1
a118 2
	int i, oerrno;
	char name[SEM_RANDOM_NAME_LEN];
d120 1
a120 1
	if (!semp) {
d126 1
a126 1
		while (1) {
d130 2
a131 2
			sempshared = sem_open(name, O_CREAT|O_EXCL);
			if (sempshared)
d135 1
a135 1
			if (errno != EINVAL && errno != EPERM)
a141 1
			oerrno = errno;
d143 1
a143 1
			errno = oerrno;
d147 1
a147 3
		sem = *sempshared;
		sem->value = value;
		*semp = sem;
a151 5
	if (value > SEM_VALUE_MAX) {
		errno = EINVAL;
		return (-1);
	}

d307 3
a309 5
	int created = 0, fd, oerrno;
	sem_t sem;
	sem_t *semp = SEM_FAILED;
	mode_t unusedmode;
	unsigned value = 0;
d313 1
a313 1
		return (semp);
d319 2
a320 1
		unusedmode = va_arg(ap, mode_t);
d323 5
d333 1
a333 1
		return (semp);
d337 1
a337 1
		return (semp);
d342 1
a342 1
		return (semp);
d348 1
a348 1
			return (semp);
d353 1
a353 1
			return (semp);
a355 1
			oerrno = errno;
d357 2
a358 3
			errno = oerrno;
			/* XXX can set errno to EIO, ENOTDIR... */
			return (semp);
d360 1
a364 1
	oerrno = errno;
d367 2
a368 2
		errno = oerrno;
		return (semp);
a369 5
	if (created) {
		sem->lock = _SPINLOCK_UNLOCKED_ASSIGN;
		sem->value = value;
	}
	sem->shared = 1;
a371 1
		free(semp);
d376 5
d396 1
@


1.14
log
@handle the fourth vararg value to sem_open
ok zhuk and presumably fgsch who just sent me a similar diff
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.13 2013/11/20 23:18:17 tedu Exp $ */
d50 1
a50 1
#define SEM_MMAP_SIZE	PAGE_SIZE
@


1.13
log
@shared semaphore fixes. first, eliminate the sem inside a sem indirection.
it's not needed (mindless holdover from earlier prototype). everything is
simpler and sem_init shared semaphores even work now (confirmed by sthen).
correct the einval checks to not deref a pointer before the null check.
in sem_open, if we created the semaphore, we need to initialize the spinlock.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.12 2013/11/20 03:16:39 tedu Exp $ */
d27 1
d319 2
d327 8
d377 1
a377 1
	if (created)
d379 2
d398 1
a398 1
	
@


1.12
log
@oops, forgot about unnamed shared sems
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.11 2013/11/20 03:04:29 tedu Exp $ */
d61 1
a61 2
	if (sem->shared) {
		sem = sem->shared;
a62 1
	}
d97 1
a97 2
	if (sem->shared) {
		sem = sem->shared;
a98 1
	}
d118 6
a123 1
	char name[SEM_RANDOM_NAME_LEN];    
a148 1
		free(sempshared);
d151 1
d177 1
a177 1
	if (!semp || !*semp) {
a180 1
	sem = *semp;
d190 1
d192 3
a194 4
		munmap(sem->shared, SEM_MMAP_SIZE);

	*semp = NULL;
	free(sem);
d202 1
a202 1
	sem_t sem = *semp;
d204 1
a204 1
	if (!semp || !*semp) {
a208 3
	if (sem->shared)
		sem = sem->shared;

d219 1
a219 1
	sem_t sem = *semp;
d221 1
a221 1
	if (!semp || !*semp) {
a233 1
	sem_t sem = *semp;
d235 1
d238 1
a238 1
	if (!semp || !*semp) {
a257 1
	sem_t sem = *semp;
d259 1
d262 1
a262 1
	if (!semp || !*semp) {
d282 1
a282 1
	sem_t sem = *semp;
d285 1
a285 1
	if (!semp || !*semp) {
d315 2
a316 2
	int fd, oerrno;
	sem_t sem, shared;
d338 11
a348 1
	if (sb.st_size < SEM_MMAP_SIZE) {
d356 1
d358 1
a358 1
	shared = mmap(NULL, SEM_MMAP_SIZE, PROT_READ | PROT_WRITE,
d362 1
a362 1
	if (shared == MAP_FAILED) {
d366 3
d370 1
a370 3
	sem = calloc(1, sizeof(*sem));
	if (!semp || !sem) {
		free(sem);
d372 1
a372 1
		munmap(shared, SEM_MMAP_SIZE);
a376 1
	sem->shared = shared;
d384 6
a389 1
	sem_t sem = *semp;
d391 1
a391 2
	munmap(sem->shared, SEM_MMAP_SIZE);
	free(sem);
a404 1

@


1.11
log
@zhuk and i have slightly different styles. unify and consistify
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.10 2013/11/18 23:10:48 tedu Exp $ */
d189 3
@


1.10
log
@interprocess semaphores ala sem_open. mostly following in the pattern
of shm_open. with some additions and fixes from zhuk.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.9 2013/06/01 23:06:26 tedu Exp $ */
d130 1
a130 1
			if (sempshared) {
a131 1
			}
a189 6
	if (sem->shared)
		if (munmap(sem->shared, SEM_MMAP_SIZE) == -1) {
			warn("sem_destroy: someone borked shared memory");
			abort();
		}

d321 1
a321 1
		return semp;
d327 1
a327 1
		return semp;
d331 1
a331 1
		return semp;
d336 1
a336 1
		return semp;
d338 1
a338 1
	if (sb.st_size < SEM_MMAP_SIZE)
d344 1
a344 1
			return semp;
d346 1
d353 1
a353 1
		return semp;
d362 1
a362 1
		return SEM_FAILED;
d367 1
a367 1
	return semp;
d375 1
a375 4
	if (munmap(sem->shared, SEM_MMAP_SIZE) == -1) {
		warn("sem_close: someone borked shared memory");
		abort();
	}
d388 1
a388 1
	return unlink(sempath);
@


1.9
log
@something's not quite right yet. ticket locks result in more CPU usage
and spinning in kernel. partially back out, but in a way that makes going
forward again easy.
seen by ajacoutot
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.8 2013/06/01 20:47:40 tedu Exp $ */
d3 1
a3 1
 * Copyright (c) 2004,2005 Ted Unangst <tedu@@openbsd.org>
d18 4
d23 4
d28 2
a30 1
#include <errno.h>
d36 15
d58 1
d61 5
d75 1
a75 1
			r = __thrsleep(&sem->waitcount, CLOCK_REALTIME |
d96 1
d99 5
d107 1
a107 1
		__thrwakeup(&sem->waitcount, 1);
d120 3
a122 1
	sem_t sem;
d125 28
a152 2
		errno = EPERM;
		return (-1);
d175 2
d181 1
d183 1
a183 1
	if ((*semp)->waitcount) {
d190 7
a196 1
	free(*semp);
d198 1
d213 3
d307 10
a316 1
/* ARGSUSED */
d318 1
a318 1
sem_open(const char *name __unused, int oflag __unused, ...)
d320 54
a373 2
	errno = ENOSYS;
	return (SEM_FAILED);
a375 1
/* ARGSUSED */
d377 1
a377 1
sem_close(sem_t *sem __unused)
d379 10
a388 2
	errno = ENOSYS;
	return (-1);
a390 1
/* ARGSUSED */
d392 1
a392 1
sem_unlink(const char *name __unused)
d394 4
a397 2
	errno = ENOSYS;
	return (-1);
@


1.8
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.7 2012/03/03 11:09:19 guenther Exp $ */
d45 3
a47 2
			r = __thrsleep(&sem->waitcount, CLOCK_REALTIME | 0x8,
			    abstime, &sem->lock.ready, delayed_cancel);
@


1.7
log
@sem_timedwait() should return ETIMEDOUT instead of EWOULDBLOCK on timeout
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.6 2012/03/03 10:02:26 guenther Exp $ */
d45 2
a46 2
			r = __thrsleep(&sem->waitcount, CLOCK_REALTIME,
			    abstime, &sem->lock, delayed_cancel);
d100 1
a100 1
	sem->lock = _SPINLOCK_UNLOCKED;
@


1.6
log
@Add sem_timewait() and fix sem_wait()'s handling of signals, so
that it resumes waiting unless the thread was canceled.  As part
of this, change the internal _sem_wait() function to return zero
on success and an errno value on failure instead of 1 on success
and zero on failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.5 2012/03/02 08:07:43 guenther Exp $ */
d201 1
a201 1
		errno = r;
@


1.5
log
@_SPINLOCK_UNLOCKED isn't zero everywhere (*cough*hppa*cough*), so
sem_init() can't assume that calloc will leave the embedded spinlock
in the unlocked state

ok miod@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.4 2012/01/17 02:34:18 guenther Exp $ */
d31 2
a32 1
_sem_wait(sem_t sem, int tryonly, int *delayed_cancel)
d39 1
a39 1
		r = 1;
d41 1
a41 1
		r = 0;
d45 2
a46 2
			r = __thrsleep(&sem->waitcount, 0, NULL, &sem->lock,
			    delayed_cancel) == 0;
d48 5
a52 1
		} while (r && sem->value == 0);
d54 1
a54 1
		if (r)
d173 31
a203 2
	r = _sem_wait(sem, 0, &self->delayed_cancel);
	_leave_delayed_cancel(self, !r);
d212 1
a212 1
	int rv;
d219 1
a219 1
	rv = _sem_wait(sem, 1, NULL);
d221 2
a222 2
	if (!rv) {
		errno = EAGAIN;
@


1.4
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sem.c,v 1.3 2012/01/04 21:01:25 guenther Exp $ */
d95 1
@


1.3
log
@Fix $OpenBSD tag
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d31 1
a31 1
_sem_wait(sem_t sem, int tryonly)
d33 1
d36 6
a41 15
	return (_sem_waitl(sem, tryonly, 0, NULL));
}

int
_sem_waitl(sem_t sem, int tryonly, clockid_t clock_id,
    const struct timespec *abstime)
{
	int do_sleep;

again:
	if (sem->value == 0) {
		if (tryonly) {
			_spinunlock(&sem->lock);
			return (0);
		}
d43 5
a47 11
		do_sleep = 1;
	} else {
		sem->value--;
		do_sleep = 0;
	}

	if (do_sleep) {
		if (thrsleep(sem, clock_id, abstime, &sem->lock) == -1 &&
		    errno == EWOULDBLOCK)
			return (0);
		_spinlock(&sem->lock);
d49 2
a50 1
		goto again;
d53 1
a53 1
	return (1);
d65 1
a65 17
		thrwakeup(sem, 1);
		rv = 1;
	}
	_spinunlock(&sem->lock);
	return (rv);
}

/* only increment count if a waiter */
int
_sem_wakeup(sem_t sem)
{
	int rv = 0;

	_spinlock(&sem->lock);
	if (sem->waitcount) {
		sem->value++;
		thrwakeup(sem, 1);
a71 15

int
_sem_wakeall(sem_t sem)
{
	int rv;

	_spinlock(&sem->lock);
	rv = sem->waitcount;
	sem->value += rv;
	thrwakeup(sem, 0);
	_spinunlock(&sem->lock);

	return (rv);
}

d158 2
d166 3
a168 1
	_sem_wait(sem, 0);
d184 1
a184 1
	rv = _sem_wait(sem, 1);
d194 1
d196 1
a196 1
sem_open(const char *name, int oflag, ...)
d202 1
d204 1
a204 1
sem_close(sem_t *sem)
d210 1
d212 1
a212 1
sem_unlink(const char *name)
@


1.2
log
@Add some sanity checks, set errno accordingly to POSIX and add the named
semaphore stubs already provided by libpthread. We may move them in their
own file in the future when we figure out a real implementation.

Discussed with and looks ok to guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD */
@


1.1
log
@Split out the semaphore functions.

ok guenther@@
@
text
@d129 5
d135 2
a136 1
	if (!sem)
d138 1
d148 5
a152 2
	if (!*semp)
		return (EINVAL);
d157 2
a158 1
		return (EBUSY);
d171 5
d188 5
d203 5
d219 5
d232 21
@

