head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2016.09.01.10.41.02;	author otto;	state Exp;
branches;
next	1.1;
commitid	HatwrthzJhfQpDr7;

1.1
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	;
commitid	d9R7VGw9CHTkwXE1;


desc
@@


1.2
log
@Less lock contention by using more pools for mult-threaded programs.
tested by many (thanks!) ok tedu, guenther@@
@
text
@/*	$OpenBSD: rthread_cb.h,v 1.1 2016/05/07 19:05:22 guenther Exp $ */
/*
 * Copyright (c) 2016 Philip Guenther <guenther@@openbsd.org>
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>

__BEGIN_HIDDEN_DECLS
pid_t	_thread_fork(void);
pid_t	_thread_vfork(void);
void	_thread_flockfile(FILE *);
int	_thread_ftrylockfile(FILE *);
void	_thread_funlockfile(FILE *);
void	_thread_malloc_lock(int);
void	_thread_malloc_unlock(int);
void	_thread_atexit_lock(void);
void	_thread_atexit_unlock(void);
void	_thread_atfork_lock(void);
void	_thread_atfork_unlock(void);
void	_thread_arc4_lock(void);
void	_thread_arc4_unlock(void);
void	_thread_mutex_lock(void **);
void	_thread_mutex_unlock(void **);
void	_thread_mutex_destroy(void **);
void	_thread_tag_lock(void **);
void	_thread_tag_unlock(void **);
void	*_thread_tag_storage(void **, void *, size_t, void *);
__END_HIDDEN_DECLS
@


1.1
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d27 2
a28 2
void	_thread_malloc_lock(void);
void	_thread_malloc_unlock(void);
@

