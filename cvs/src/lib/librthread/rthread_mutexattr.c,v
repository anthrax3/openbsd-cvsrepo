head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.14
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.16
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.12
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2012.04.13.13.50.37;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2012.02.15.04.58.42;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.21.00.49.47;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Use PTHREAD_MUTEX_DEFAULT in static init and mutexattr_init. If the
default mutex type changes to NORMAL, when there is an uninitialized
mutex provided to unlock, allow it to succeed similar to an unlocked
mutex. For other cases abort instead of segfault. okay guenther@@
@
text
@/*	$OpenBSD: rthread_mutexattr.c,v 1.2 2012/02/15 04:58:42 guenther Exp $ */
/*
 * Copyright (c) 2004,2005 Ted Unangst <tedu@@openbsd.org>
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Mutex attributes
 */


#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

#include <pthread.h>
#include <pthread_np.h>

#include "rthread.h"

int
pthread_mutexattr_init(pthread_mutexattr_t *attrp)
{
	pthread_mutexattr_t attr;

	attr = calloc(1, sizeof(*attr));
	if (!attr)
		return (errno);
	attr->ma_type = PTHREAD_MUTEX_DEFAULT;
	*attrp = attr;

	return (0);
}

int
pthread_mutexattr_destroy(pthread_mutexattr_t *attrp)
{
	free(*attrp);
	*attrp = NULL;

	return (0);
}

int
pthread_mutexattr_settype(pthread_mutexattr_t *attrp, int type)
{
	if (type < PTHREAD_MUTEX_ERRORCHECK || type >= PTHREAD_MUTEX_TYPE_MAX)
		return (EINVAL);
	(*attrp)->ma_type = type;
	return (0);
}

int
pthread_mutexattr_gettype(pthread_mutexattr_t *attrp, int *type)
{
	*type = (*attrp)->ma_type;
	return (0);
}

int
pthread_mutexattr_setprotocol(pthread_mutexattr_t *attrp, int protocol)
{
	if (protocol < PTHREAD_PRIO_NONE || protocol > PTHREAD_PRIO_PROTECT)
		return (EINVAL);
	(*attrp)->ma_protocol = protocol;
	return (0);
}

int
pthread_mutexattr_getprotocol(pthread_mutexattr_t *attrp, int *protocol)
{
	*protocol = (*attrp)->ma_protocol;
	return (0);
}

int
pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attrp, int prioceiling)
{
	if (prioceiling < PTHREAD_MIN_PRIORITY || 
	    prioceiling > PTHREAD_MAX_PRIORITY)
		return (EINVAL);
	(*attrp)->ma_prioceiling = prioceiling;
	return (0);
}

int
pthread_mutexattr_getprioceiling(pthread_mutexattr_t *attrp, int *prioceiling)
{
	*prioceiling = (*attrp)->ma_prioceiling;
	return (0);
}

int
pthread_mutexattr_getkind_np(pthread_mutexattr_t attrp)
{
	int	ret;

	if (attrp == NULL)
		ret = EINVAL;
	else
		ret = attrp->ma_type;

        return(ret);
}

int
pthread_mutexattr_setkind_np(pthread_mutexattr_t *attrp, int kind)
{
	int	ret;

	if (attrp == NULL || *attrp == NULL ||
	    kind < PTHREAD_MUTEX_ERRORCHECK || kind >= PTHREAD_MUTEX_TYPE_MAX)
		ret = EINVAL;
	else {
		(*attrp)->ma_type = kind;
		ret = 0;
	}

	return (ret);
}
@


1.2
log
@Add pthread_rwlockattr_{get,set}pshared() and
pthread_mutexattr_{get,set}kind_np()

tweaked diff from brad
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_mutexattr.c,v 1.1 2011/12/21 00:49:47 guenther Exp $ */
d41 1
a41 1
	attr->ma_type = PTHREAD_MUTEX_ERRORCHECK;
@


1.1
log
@Split out the pthread_mutexattr_* functions from rthread_sync.c to
new file rthread_mutexattr.c.  Add basic implementations of
pthread_mutexattr_{set,get}{protocol,prioceiling}

Requested by aja
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sync.c,v 1.25 2011/11/06 11:48:59 guenther Exp $ */
d29 1
d105 28
@

