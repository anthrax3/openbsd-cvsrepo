head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2014.06.23.00.43.15;	author guenther;	state Exp;
branches;
next	1.1;
commitid	OqxnELhoIDSxMtWW;

1.1
date	2011.12.22.00.42.07;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove unintended statement from my copyright block
@
text
@/*	$OpenBSD: rthread_mutex_prio.c,v 1.1 2011/12/22 00:42:07 guenther Exp $ */
/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


#include <errno.h>

#include <pthread.h>
#include "rthread.h"

int
pthread_mutex_getprioceiling(pthread_mutex_t *mutexp, int *prioceiling)
{
	pthread_mutex_t mutex = *mutexp;

	if (mutex->prioceiling == -1)
		return (EINVAL);
	*prioceiling = mutex->prioceiling;

	return (0);
}

int
pthread_mutex_setprioceiling(pthread_mutex_t *mutexp, int prioceiling,
    int *old_ceiling)
{
	pthread_mutex_t mutex = *mutexp;
	int ret;

	if (mutex->prioceiling == -1 ||
	    prioceiling < PTHREAD_MIN_PRIORITY ||
	    prioceiling > PTHREAD_MAX_PRIORITY) {
		ret = EINVAL;
	} else if ((ret = pthread_mutex_lock(mutexp)) == 0) {
		*old_ceiling = mutex->prioceiling;
		mutex->prioceiling = prioceiling;
		pthread_mutex_unlock(mutexp);
	}

	return (ret);
}
@


1.1
log
@Add pthread_mutex_{get,set}prioceiling()
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a3 1
 * All Rights Reserved.
@

