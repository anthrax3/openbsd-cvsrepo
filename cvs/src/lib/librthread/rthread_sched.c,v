head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.12
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.7.0.24
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.22
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.20
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.16
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7;
locks; strict;
comment	@ * @;


1.13
date	2015.04.29.06.01.37;	author guenther;	state Exp;
branches;
next	1.12;
commitid	KgxdDBMASll0o49H;

1.12
date	2012.03.22.15.26.04;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.21.01.42.02;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2012.02.19.02.07.48;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.28.04.59.31;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.06.11.48.59;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.06.09.49.16;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.02.20.48.04;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.31.08.51.20;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.04.05.55;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.19.06.47.40;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.03.18.17.55;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.03.18.16.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Delete the duplicated sched_{policy,param} members from the internal struct
pthread and instead use the values from the embedded struct pthread_attr.
For bonus points, pay attention to the sched_inherit attribute and possibly
set the values from the parent thread.

Problem noted by natano of bitrig.
@
text
@/*	$OpenBSD: rthread_sched.c,v 1.12 2012/03/22 15:26:04 kurt Exp $ */
/*
 * Copyright (c) 2004,2005 Ted Unangst <tedu@@openbsd.org>
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * scheduling routines
 */

#include <unistd.h>
#include <signal.h>
#include <errno.h>

#include <pthread.h>
#include <pthread_np.h>

#include "rthread.h"

int
pthread_getschedparam(pthread_t thread, int *policy,
    struct sched_param *param)
{
	*policy = thread->attr.sched_policy;
	if (param)
		*param = thread->attr.sched_param;

	return (0);
}

int
pthread_setschedparam(pthread_t thread, int policy,
    const struct sched_param *param)
{
	/* XXX return ENOTSUP for SCHED_{FIFO,RR}? */
	if (policy != SCHED_OTHER && policy != SCHED_FIFO &&
	    policy != SCHED_RR)
		return (EINVAL);
	thread->attr.sched_policy = policy;
	if (param)
		thread->attr.sched_param = *param;

	return (0);
}

int
pthread_attr_getschedparam(const pthread_attr_t *attrp,
    struct sched_param *param)
{
	*param = (*attrp)->sched_param;

	return (0);
}

int
pthread_attr_setschedparam(pthread_attr_t *attrp,
    const struct sched_param *param)
{
	(*attrp)->sched_param = *param;

	return (0);
}

int
pthread_attr_getschedpolicy(const pthread_attr_t *attrp, int *policy)
{
	*policy = (*attrp)->sched_policy;

	return (0);
}

int
pthread_attr_setschedpolicy(pthread_attr_t *attrp, int policy)
{
	/* XXX return ENOTSUP for SCHED_{FIFO,RR}? */
	if (policy != SCHED_OTHER && policy != SCHED_FIFO &&
	    policy != SCHED_RR)
		return (EINVAL);
	(*attrp)->sched_policy = policy;

	return (0);
}

int
pthread_attr_getinheritsched(const pthread_attr_t *attrp, int *inherit)
{
	*inherit = (*attrp)->sched_inherit;

	return (0);
}

int
pthread_attr_setinheritsched(pthread_attr_t *attrp, int inherit)
{
	if (inherit != PTHREAD_INHERIT_SCHED &&
	    inherit != PTHREAD_EXPLICIT_SCHED)
		return (EINVAL);
	(*attrp)->sched_inherit = inherit;

	return (0);
}

int
pthread_getprio(pthread_t thread)
{
	return (thread->attr.sched_param.sched_priority);
}

int
pthread_setprio(pthread_t thread, int priority)
{
	thread->attr.sched_param.sched_priority = priority;

	return (0);
}

void
pthread_yield(void)
{
	sched_yield();
}

@


1.12
log
@Remove pthread_suspend* and related functions. This is part of the
rthreads major library bump from last night. okay kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.11 2012/02/21 01:42:02 guenther Exp $ */
d35 1
a35 1
	*policy = thread->sched_policy;
d37 1
a37 1
		*param = thread->sched_param;
d50 1
a50 1
	thread->sched_policy = policy;
d52 1
a52 1
		thread->sched_param = *param;
d58 2
a59 1
pthread_attr_getschedparam(const pthread_attr_t *attrp, struct sched_param *param)
d67 2
a68 1
pthread_attr_setschedparam(pthread_attr_t *attrp, const struct sched_param *param)
d117 1
a117 1
	return (thread->sched_param.sched_priority);
d123 1
a123 1
	thread->sched_param.sched_priority = priority;
@


1.11
log
@Make pthread_suspend_np() and pthread_resume_np() simply fail instead
of doing the Wrong Thing.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.10 2012/02/19 02:07:48 guenther Exp $ */
a129 49
}

int
pthread_suspend_np(pthread_t thread)
{
	int errn = 0;

	if (thread == pthread_self())
		return (EDEADLK);

	/* XXX unimplemented */
	errn = ENOTSUP;
	return (errn);
}

void
pthread_suspend_all_np(void)
{
	pthread_t t;
	pthread_t self = pthread_self();

	_spinlock(&_thread_lock);
	LIST_FOREACH(t, &_thread_list, threads)
		if (t != self)
			pthread_suspend_np(t);
	_spinunlock(&_thread_lock);
}

int
pthread_resume_np(pthread_t thread)
{
	int errn = 0;

	/* XXX unimplemented */
	errn = ENOTSUP;
	return (errn);
}

void
pthread_resume_all_np(void)
{
	pthread_t t;
	pthread_t self = pthread_self();

	_spinlock(&_thread_lock);
	LIST_FOREACH(t, &_thread_list, threads)
		if (t != self)
			pthread_resume_np(t);
	_spinunlock(&_thread_lock);
@


1.10
log
@Validate in pthread_attr_set{scope,sched{param,policy},inheritsched}()
the requested new value
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.9 2011/12/28 04:59:31 guenther Exp $ */
d139 3
a141 7
	/*
	 * XXX Avoid a bug in current signal handling by refusing to
	 * suspend the main thread.
	 */
	if (thread != &_initial_thread)
		if (kill(thread->tid, SIGSTOP) == -1)
			errn = errno;
d163 2
a164 3
	/* XXX check if really suspended? */
	if (kill(thread->tid, SIGCONT) == -1)
		errn = errno;
@


1.9
log
@pthread_self() may be much cheaper and never more expensive than getthrid()
so prefer it for identifying the current thread
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.8 2011/11/06 11:48:59 guenther Exp $ */
d46 4
d84 4
d104 3
@


1.8
log
@Move <machine/spinlock.h> into rthread.h; strip out unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.7 2006/01/06 09:49:16 otto Exp $ */
d126 1
a126 1
	if (thread->tid == getthrid())
d132 1
a132 1
	if (thread->tid != _initial_thread.tid)
d142 1
a142 1
	pid_t me = getthrid();
d146 1
a146 1
		if (t->tid != me)
d166 1
a166 1
	pid_t me = getthrid();
d170 1
a170 1
		if (t->tid != me)
@


1.7
log
@When suspending, check the tid of the arg, not of ourselves, doh
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.6 2006/01/02 20:48:04 otto Exp $ */
a21 7
#include <sys/param.h>
#include <sys/mman.h>
#include <sys/wait.h>

#include <machine/spinlock.h>

#include <stdlib.h>
a23 2
#include <stdio.h>
#include <string.h>
@


1.6
log
@Don't call pthread_self()->tid when getthrid() will do fine.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.5 2005/12/31 08:51:20 otto Exp $ */
d141 1
a141 1
	if (pthread_main_np() == 0)
@


1.5
log
@Implement suspend/resume and creation of initially suspended threads.
With this, java seems to be operational.  Also make threads_ready
non-static, which is needed for an upcoming diff.  ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.4 2005/12/30 04:05:55 tedu Exp $ */
d135 1
a135 1
	if (thread->tid == pthread_self()->tid)
@


1.4
log
@prototype all the thread syscalls in rthread.h for now.
update for new thrwakeup that takes a count argument
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.3 2005/12/19 06:47:40 tedu Exp $ */
d36 1
d129 55
@


1.3
log
@update copyright to 2005
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.2 2005/12/03 18:17:55 tedu Exp $ */
a37 2

int sched_yield(void);
@


1.2
log
@syscall is actually sched_yield now, as millert suggested
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_sched.c,v 1.1 2005/12/03 18:16:19 tedu Exp $ */
d3 1
a3 1
 * Copyright (c) 2004 Ted Unangst <tedu@@openbsd.org>
@


1.1
log
@add userland thread library.  incomplete, but functional
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d39 1
a39 1
int yield(void);
d128 1
a128 8
	yield();
}
int
sched_yield(void)
{
	yield();

	return (0);
@

