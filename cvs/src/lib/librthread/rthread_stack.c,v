head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.14
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2016.09.04.10.13.35;	author akfaew;	state Exp;
branches;
next	1.15;
commitid	tPNEomz2X1xlRc3u;

1.15
date	2016.09.01.10.56.46;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	HzJta88xKCDy1q89;

1.14
date	2015.01.24.10.35.33;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	GcZWmn28qX2hyH98;

1.13
date	2015.01.16.16.48.52;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	0DYulI8hhujBHMcR;

1.12
date	2014.06.27.23.21.47;	author matthew;	state Exp;
branches;
next	1.11;
commitid	HiQDW0mZR2gG0byE;

1.11
date	2013.12.18.16.42.08;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.21.21.59.31;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.04.21.56.51;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.19.04.54.40;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2012.02.18.21.12.09;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.06.11.48.59;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.26.21.40.05;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.27.02.41.24;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.08.15.16;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.01.19.32.30;	author marc;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Get rid of ticket support, replace "struct _spinlock" with "_atomic_lock_t".

ok tedu@@
@
text
@/* $OpenBSD: rthread_stack.c,v 1.15 2016/09/01 10:56:46 deraadt Exp $ */

/* PUBLIC DOMAIN: No Rights Reserved. Marco S Hyman <marc@@snafu.org> */

#include <sys/param.h>
#include <sys/mman.h>

#include <errno.h>
#include <pthread.h>
#include <stdint.h>
#include <stdlib.h>
#include <unistd.h>

#include "rthread.h"

/*
 * Follow uthread's example and keep around stacks that have default
 * attributes for possible reuse.
 */
static SLIST_HEAD(, stack) def_stacks = SLIST_HEAD_INITIALIZER(head);
static _atomic_lock_t def_stacks_lock = _SPINLOCK_UNLOCKED;

struct stack *
_rthread_alloc_stack(pthread_t thread)
{
	struct stack *stack;
	u_int32_t rnd;
	caddr_t base;
	caddr_t guard;
	size_t size;
	size_t guardsize;

	/* if the request uses the defaults, try to reuse one */
	if (thread->attr.stack_addr == NULL &&
	    thread->attr.stack_size == RTHREAD_STACK_SIZE_DEF &&
	    thread->attr.guard_size == _rthread_attr_default.guard_size) {
		_spinlock(&def_stacks_lock);
		stack = SLIST_FIRST(&def_stacks);
		if (stack != NULL) {
			SLIST_REMOVE_HEAD(&def_stacks, link);
			_spinunlock(&def_stacks_lock);
			return (stack);
		}
		_spinunlock(&def_stacks_lock);
	}

	/* allocate the stack struct that we'll return */
	stack = malloc(sizeof(*stack));
	if (stack == NULL)
		return (NULL);

	/* Smaller the stack, smaller the random bias */
	if (thread->attr.stack_size > _thread_pagesize)
		rnd = arc4random() & (_thread_pagesize - 1);
	else if (thread->attr.stack_size == _thread_pagesize)
		rnd = arc4random() & (_thread_pagesize / 16 - 1);
	else
		rnd = 0;
	rnd &= ~_STACKALIGNBYTES;

	/* If a stack address was provided, just fill in the details */
	if (thread->attr.stack_addr != NULL) {
		stack->base = base = thread->attr.stack_addr;
		stack->len  = thread->attr.stack_size;
#ifdef MACHINE_STACK_GROWS_UP
		stack->sp = base + rnd;
#else
		stack->sp = base + thread->attr.stack_size - rnd;
#endif
		/*
		 * This impossible guardsize marks this stack as
		 * application allocated so it won't be freed or
		 * cached by _rthread_free_stack()
		 */
		stack->guardsize = 1;
		return (stack);
	}

	/* round up the requested sizes up to full pages */
	size = ROUND_TO_PAGE(thread->attr.stack_size);
	guardsize = ROUND_TO_PAGE(thread->attr.guard_size);

	/* check for overflow */
	if (size < thread->attr.stack_size ||
	    guardsize < thread->attr.guard_size ||
	    SIZE_MAX - size < guardsize) {
		free(stack);
		errno = EINVAL;
		return (NULL);
	}
	size += guardsize;

	/* actually allocate the real stack */
	base = mmap(NULL, size, PROT_READ | PROT_WRITE,
	    MAP_PRIVATE | MAP_ANON, -1, 0);
	if (base == MAP_FAILED) {
		free(stack);
		return (NULL);
	}

#ifdef MACHINE_STACK_GROWS_UP
	guard = base + size - guardsize;
	stack->sp = base + rnd;
#else
	guard = base;
	stack->sp = base + size - rnd;
#endif

	/* memory protect the guard region */
	if (guardsize != 0 && mprotect(guard, guardsize, PROT_NONE) == -1) {
		munmap(base, size);
		free(stack);
		return (NULL);
	}

	stack->base = base;
	stack->guardsize = guardsize;
	stack->len = size;
	return (stack);
}

void
_rthread_free_stack(struct stack *stack)
{
	if (stack->len == RTHREAD_STACK_SIZE_DEF + stack->guardsize &&
	    stack->guardsize == _rthread_attr_default.guard_size) {
		_spinlock(&def_stacks_lock);
		SLIST_INSERT_HEAD(&def_stacks, stack, link);
		_spinunlock(&def_stacks_lock);
	} else {
		/* unmap the storage unless it was application allocated */
		if (stack->guardsize != 1)
			munmap(stack->base, stack->len);
		free(stack);
	}
}
@


1.15
log
@delete wrong cvs $ tags
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.14 2015/01/24 10:35:33 kettenis Exp $ */
d21 1
a21 1
static struct _spinlock def_stacks_lock = _SPINLOCK_UNLOCKED;
a136 1

@


1.14
log
@Add back <sys/param.h>; it's needed for MACHINE_STACK_GROWS_UP.

ok millert@@, tobiasu@@
@
text
@d1 1
a1 2
/* $OpenBSD: rthread_stack.c,v 1.13 2015/01/16 16:48:52 deraadt Exp $ */
/* $snafu: rthread_stack.c,v 1.12 2005/01/11 02:45:28 marc Exp $ */
@


1.13
log
@Move to the <limits.h> universe.
review by millert, binary checking process with doug, concept with guenther
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.12 2014/06/27 23:21:47 matthew Exp $ */
d6 1
@


1.12
log
@Fix mmap() flag usage: explicitly specify MAP_PRIVATE and drop useless
MAP_FILE and MAP_HASSEMAPHORE flags.

Discussed with deraadt, tedu, and kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.11 2013/12/18 16:42:08 deraadt Exp $ */
a5 1
#include <sys/param.h>
@


1.11
log
@Provide a random stackgrap on pthread frames.  Use _STACKALIGNBYTES to
ensure the frames are aligned correctly. Discussed at length with guenther
and kettenis
ok kettenis, this is the right first step
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.10 2013/06/01 20:47:40 tedu Exp $ */
d95 2
a96 1
	base = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_ANON, -1, 0);
@


1.10
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.9 2013/03/21 21:59:31 deraadt Exp $ */
d28 1
d53 9
d67 1
a67 1
		stack->sp = base;
d69 1
a69 1
		stack->sp = base + thread->attr.stack_size;
d103 1
a103 1
	stack->sp = base;
d106 1
a106 1
	stack->sp = base + size;
@


1.9
log
@Do not need machine/param.h
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.8 2012/08/04 21:56:51 guenther Exp $ */
d22 1
a22 1
static _spinlock_lock_t def_stacks_lock = _SPINLOCK_UNLOCKED;
@


1.8
log
@Fix caching of stacks allocated with the default attributes.

based on a diff from Christian Schulte (cs at schulte.it)
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.7 2012/02/19 04:54:40 guenther Exp $ */
d6 1
a6 1
#include <sys/types.h>
a7 2

#include <machine/param.h>
@


1.7
log
@Use 'base' as an intermediate char* variable to avoid void* arithmetic
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.6 2012/02/18 21:12:09 guenther Exp $ */
d36 1
a36 1
	if (thread->attr.stack_addr != NULL &&
d41 5
a45 1
		if (stack != NULL)
a46 2
		if (stack != NULL)
			return (stack);
d117 1
a117 1
	if (stack->len == RTHREAD_STACK_SIZE_DEF &&
@


1.6
log
@Fix the handling of the stackaddr, stacksize, and guardsize attributes:
don't try to merge values, round the sizes separately, and don't try to
unmap application-supplied stacks.
Copy from uthread the caching of default-sized stacks.
Have pthread_attr_init() and pthread_create() get the default attributes
from staticly allocated pthread_attr_t.
Cache the pagesize in _rthread_init() and provide a macro for rounding to it

based on suggestions from kettenis@@ and tedu@@, ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.5 2011/11/06 11:48:59 guenther Exp $ */
d54 1
a54 1
		stack->base = thread->attr.stack_addr;
d57 1
a57 1
		stack->sp = thread->attr.stack_addr;
d59 1
a59 1
		stack->sp = thread->attr.stack_addr + thread->attr.stack_size;
@


1.5
log
@Move <machine/spinlock.h> into rthread.h; strip out unnecessary #includes
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.4 2010/05/26 21:40:05 guenther Exp $ */
d13 1
d19 7
a31 2
	caddr_t start = NULL;
	size_t pgsz;
d33 1
d35 11
a45 25
	/* guard pages are forced to a multiple of the page size */
	pgsz = sysconf(_SC_PAGESIZE);
	if (pgsz == (size_t)-1)
		return NULL;

	/* figure out the actual requested size, including guard size */
	size = thread->attr.stack_size + thread->attr.guard_size;
	size += pgsz - 1;
	size &= ~(pgsz - 1);

	/*
	 * Allocate some stack space unless an address was provided.
	 * A provided address is ASSUMED to be correct with respect to
	 * alignment constraints.
	 */
	if (size > thread->attr.guard_size) {
		if (thread->attr.stack_addr)
			base = thread->attr.stack_addr;
		else {
			base = mmap(NULL, size, PROT_READ | PROT_WRITE,
				    MAP_ANON, -1, 0);
			if (base == MAP_FAILED)
				return (NULL);
		}
		/* memory protect the guard region */
d47 9
d57 1
a57 2
		guard = base + size - thread->attr.guard_size;
		start = base;
d59 1
a59 2
		guard = base;
		start = base + size;
d61 6
a66 16
		if (mprotect(guard, thread->attr.guard_size, PROT_NONE) == -1) {
			munmap(base, size);
			return (NULL);
		}

		/* wrap up the info in a struct stack and return it */
		stack = malloc(sizeof(*stack));
		if (!stack) {
			munmap(base, size);
			return (NULL);
		}
		stack->sp = start;
		stack->base = base;
		stack->guard = guard;
		stack->guardsize = thread->attr.guard_size;
		stack->len = size;
d69 41
a109 2
	errno = EINVAL;
	return (NULL);
d115 11
a125 2
	munmap(stack->base, stack->len);
	free(stack);
@


1.4
log
@If the stack size attribute isn't larger than the guard-page size
attribute then make pthread_create() return EINVAL instead of whatever
was in errno on entry (possibly making it appear it succeeded when it
really failed).  Encountered by Jung (moorang at gmail.com).
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.3 2006/10/27 02:41:24 tedu Exp $ */
a9 1
#include <machine/spinlock.h>
@


1.3
log
@two comment typos from tbert
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.2 2006/01/05 08:15:16 otto Exp $ */
d12 1
d80 1
@


1.2
log
@Remove redundant mprotect() calls (we're unmapping the region anyway)
and check user stack for proper alignment.  ok tedu@@ marc@@
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_stack.c,v 1.1 2006/01/01 19:32:30 marc Exp $ */
d39 1
a39 1
	 * Allocate some stack space unless and address was provided.
@


1.1
log
@
thread stack handling changes.  Add guard zones and allow stack
size (and guard zone size) to be set using pthread_attr.   Guard
zones are specified in bytes, but implemented in terms of a
page size.

OK Otto@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a68 2
			mprotect(guard, thread->attr.guard_size,
				 PROT_EXEC | PROT_READ | PROT_WRITE);
a84 2
	mprotect(stack->guard, stack->guardsize,
		 PROT_EXEC | PROT_READ | PROT_WRITE);
@

