head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2017.09.05.02.40.54;	author guenther;	state Exp;
branches;
next	1.3;
commitid	5DW3WOQF0YGGx8lJ;

1.3
date	2017.02.27.07.15.22;	author guenther;	state Exp;
branches;
next	1.2;
commitid	Sk8mz9rwI7JFM5HO;

1.2
date	2016.05.20.03.41.44;	author guenther;	state Exp;
branches;
next	1.1;
commitid	yuPerOdQnVKQd3qo;

1.1
date	2016.05.07.19.05.22;	author guenther;	state Exp;
branches;
next	;
commitid	d9R7VGw9CHTkwXE1;


desc
@@


1.4
log
@Move mutex, condvar, and thread-specific data routes, pthread_once, and
pthread_exit from libpthread to libc, along with low-level bits to
support them.  Major bump to both libc and libpthread.

Requested by libressl team.  Ports testing by naddy@@
ok kettenis@@
@
text
@{
	global:
		/* pthread implementation */
		pthread_attr_destroy;
		pthread_attr_getdetachstate;
		pthread_attr_getguardsize;
		pthread_attr_getinheritsched;
		pthread_attr_getschedparam;
		pthread_attr_getschedpolicy;
		pthread_attr_getscope;
		pthread_attr_getstack;
		pthread_attr_getstackaddr;
		pthread_attr_getstacksize;
		pthread_attr_init;
		pthread_attr_setdetachstate;
		pthread_attr_setguardsize;
		pthread_attr_setinheritsched;
		pthread_attr_setschedparam;
		pthread_attr_setschedpolicy;
		pthread_attr_setscope;
		pthread_attr_setstack;
		pthread_attr_setstackaddr;
		pthread_attr_setstacksize;
		pthread_barrier_destroy;
		pthread_barrier_init;
		pthread_barrier_wait;
		pthread_barrierattr_destroy;
		pthread_barrierattr_getpshared;
		pthread_barrierattr_init;
		pthread_barrierattr_setpshared;
		pthread_cancel;
		pthread_cleanup_pop;
		pthread_cleanup_push;
		pthread_create;
		pthread_detach;
		pthread_getconcurrency;
		pthread_getcpuclockid;
		pthread_getprio;
		pthread_getschedparam;
		pthread_join;
		pthread_kill;
		pthread_main_np;
		pthread_mutex_getprioceiling;
		pthread_mutex_setprioceiling;
		pthread_mutexattr_destroy;
		pthread_mutexattr_getkind_np;
		pthread_mutexattr_getprioceiling;
		pthread_mutexattr_getprotocol;
		pthread_mutexattr_gettype;
		pthread_mutexattr_init;
		pthread_mutexattr_setkind_np;
		pthread_mutexattr_setprioceiling;
		pthread_mutexattr_setprotocol;
		pthread_mutexattr_settype;
		pthread_rwlock_destroy;
		pthread_rwlock_init;
		pthread_rwlock_rdlock;
		pthread_rwlock_timedrdlock;
		pthread_rwlock_timedwrlock;
		pthread_rwlock_tryrdlock;
		pthread_rwlock_trywrlock;
		pthread_rwlock_unlock;
		pthread_rwlock_wrlock;
		pthread_rwlockattr_destroy;
		pthread_rwlockattr_getpshared;
		pthread_rwlockattr_init;
		pthread_rwlockattr_setpshared;
		pthread_set_name_np;
		pthread_setcancelstate;
		pthread_setcanceltype;
		pthread_setconcurrency;
		pthread_setprio;
		pthread_setschedparam;
		pthread_spin_destroy;
		pthread_spin_init;
		pthread_spin_lock;
		pthread_spin_trylock;
		pthread_spin_unlock;
		pthread_stackseg_np;
		pthread_testcancel;
		pthread_yield;
		sched_get_priority_max;
		sched_get_priority_min;
		sem_close;
		sem_destroy;
		sem_getvalue;
		sem_init;
		sem_open;
		sem_post;
		sem_timedwait;
		sem_trywait;
		sem_unlink;
		sem_wait;
		sigwait;

		/* used for debugging & regress */
		_thread_dump_info;

		_dlctl;
	local:
		*;
};
@


1.3
log
@RELRO means the __{got,plt}_{start,end} symbols are superfluous

ok kettenis@@
@
text
@a2 9
		/* symbols that no one should be using currently */
		_init;
		_fini;
		__data_start;
		__bss_start;
		_edata;
		_end;
		__end;

a33 10
		pthread_cond_broadcast;
		pthread_cond_destroy;
		pthread_cond_init;
		pthread_cond_signal;
		pthread_cond_timedwait;
		pthread_cond_wait;
		pthread_condattr_destroy;
		pthread_condattr_getclock;
		pthread_condattr_init;
		pthread_condattr_setclock;
a35 2
		pthread_equal;
		pthread_exit;
a39 1
		pthread_getspecific;
a40 2
		pthread_key_create;
		pthread_key_delete;
a42 1
		pthread_mutex_destroy;
a43 2
		pthread_mutex_init;
		pthread_mutex_lock;
a44 3
		pthread_mutex_timedlock;
		pthread_mutex_trylock;
		pthread_mutex_unlock;
a54 1
		pthread_once;
a67 1
		pthread_self;
a73 1
		pthread_setspecific;
a97 3

		/* other overrides of libc */
		_atomic_lock;
@


1.2
log
@Delete the _SDA_BASE and _SDA2_BASE symbols: they're unnecessary in
shared libraries...and I misspelled them anyway
@
text
@a11 6
		/* needed by ld.so until we switch to RELRO */
		__got_start;
		__got_end;
		__plt_start;
		__plt_end;

@


1.1
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@a10 2
		_SDA2_BASE;
		_SDA_BASE;
@

