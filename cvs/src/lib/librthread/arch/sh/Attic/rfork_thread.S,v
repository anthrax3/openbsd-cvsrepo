head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.0.18
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.16
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.14
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.12
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.03.22.01.10.48;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.24.18.21.34;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tfork_thread has been moved to libc
@
text
@/*	$OpenBSD: rfork_thread.S,v 1.3 2012/01/17 02:34:18 guenther Exp $	*/

/*
 * Copyright (c) 2007 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice, this permission notice, and the disclaimer below
 * appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "../../../libc/arch/sh/SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
 *			r4			r5		   r6		r7
 */
ENTRY(__tfork_thread)
	mov.l	.LSYS___tfork, r0
	.word	0xc380		/* trapa #0x80 */
	bf	9f

	tst	r0, r0
	bt	1f

	/*
	 * In parent process: just return.
	 */
	rts
	 nop

1:
	/*
	 * In child process: switch stack, invoke function, then exit.
	 */
	mov	r5, sp
	jsr	@@r6
	 mov	r7, r4

	mov.l	.LSYS___threxit, r0
	.word	0xc380		/* trapa #0x80 */

9:
	/*
	 * System call failure.
	 */
	JUMP_CERROR

	.align 2
.LSYS___tfork:	.long SYS___tfork
.LSYS___threxit:	.long SYS___threxit

	SET_ENTRY_SIZE(__tfork_thread)
@


1.3
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.2 2011/10/17 06:39:20 guenther Exp $	*/
@


1.2
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.1 2007/03/24 18:21:34 miod Exp $	*/
d48 1
a48 1
	mov.l	.LSYS_threxit, r0
d59 1
a59 1
.LSYS_threxit:	.long SYS_threxit
@


1.1
log
@rfork sh bits.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 2
a24 2
 * int rfork_thread(int flags, void *stack, void (*func)(void *), void *arg);
 *			r4	     r5		   r6			r7
d26 2
a27 2
ENTRY(rfork_thread)
	mov.l	.LSYS_rfork, r0
d58 1
a58 1
.LSYS_rfork:	.long SYS_rfork
d61 1
a61 1
	SET_ENTRY_SIZE(rfork_thread)
@

