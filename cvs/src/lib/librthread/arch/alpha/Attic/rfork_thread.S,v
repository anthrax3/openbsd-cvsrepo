head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2012.03.22.01.10.48;	author guenther;	state dead;
branches;
next	1.4;

1.4
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.25.00.21.59;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.25.00.13.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@tfork_thread has been moved to libc
@
text
@/*	$OpenBSD: rfork_thread.S,v 1.4 2012/01/17 02:34:18 guenther Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include  "../../../libc/arch/alpha/SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
 */
LEAF(__tfork_thread,0)
	/* a0 = flags, a1 = stack, a2 = func, a3 = arg */
	mov	a3, a5
	CALLSYS_ERROR(__tfork)

	beq	v0, 1f

	/*
	 * In parent process: just return.
	 */
	RET

1:
	/*
	 * In child process: switch stack, invoke function, then exit.
	 */
	mov	a1, sp		/* stack */
	mov	a5, a0		/* arg */
	mov	a2, pv		/* func */
	jsr	ra, (pv)

	mov	zero, a0
	CALLSYS_NOERROR(__threxit)
	
END(__tfork_thread)
@


1.4
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.3 2011/10/17 06:39:20 guenther Exp $	*/
@


1.3
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.2 2005/12/25 00:21:59 miod Exp $	*/
d55 1
a55 1
	CALLSYS_NOERROR(threxit)
@


1.2
log
@A better implementation which does not use the caller's stack and thus is not
raceable.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
 * int rfork_thread(int flags, void *stack, void (*func)(void *), void *arg);
d33 1
a33 1
LEAF(rfork_thread,0)
d36 1
a36 1
	CALLSYS_ERROR(rfork)
d57 1
a57 1
END(rfork_thread)
@


1.1
log
@add rfork_thread for alpha, from kudo takashi
@
text
@d1 2
a2 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2005 KUDO Takashi <takashi@@crazyhack.net>
d6 8
a13 3
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
d15 11
a25 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d28 1
a28 2
#include <machine/asm.h>
#include "../../../libc/arch/alpha/SYS.h"
a30 1
 *                        a0           a1            a2                  a3
d33 4
a36 8
	.globl	rfork_thread
	.ent	rfork_thread
rfork_thread:
	LDGP(pv)
	lda	sp, -16(sp)
	stq	ra, 0(sp)
	.frame	sp, 16, ra
	.prologue 1
d38 1
a38 2
	CALLSYS_ERROR(rfork)
	beq 	v0, 1f
d40 3
a42 3
	/* parent process */
	ldq	ra, 0(sp)
	lda	sp, 16(sp)
d46 12
a57 8
	/* child process */
	mov	a1, sp		/* setup stack */
	mov	a3, a0		
	jsr	ra, (a2), 0	/* funcall func(arg) */
	LDGP(ra)

	CALLSYS_ERROR(threxit)
	.end	rfork_thread
@

