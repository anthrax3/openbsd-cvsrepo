head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.05.11.21.52.49;	author deraadt;	state dead;
branches;
next	1.2;
commitid	VpgRpYXqYSJy4P7J;

1.2
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.13.14.38.22;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/* $OpenBSD: _atomic_lock.c,v 1.2 2013/06/01 20:47:40 tedu Exp $ */
/*
 * Copyright (c) 2005 Marco Peereboom <marco@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/spinlock.h>
#ifdef DIAGNOSTIC
#include <stdio.h>
#include <stdlib.h>
#endif

int
_atomic_lock(volatile _atomic_lock_t *lock)
{
	volatile _atomic_lock_t old;

#ifdef DIAGNOSTIC
	if ((unsigned long)lock & 0xf) {
		printf("lock not 16 byte aligned\n");
		abort();
	}
#endif

	asm volatile ("ldcw 0(%2), %0"
		     : "=&r" (old), "+m" (lock)
		     : "r" (lock));

	return (old == _ATOMIC_LOCK_LOCKED);
}
@


1.2
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.1 2012/04/13 14:38:22 jsing Exp $ */
@


1.1
log
@Provide _atomic_lock() and __cerror() for hppa64. Makes hppa64 build again.
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.5 2006/01/05 22:33:23 marc Exp $ */
d18 1
a18 1
#include <spinlock.h>
d25 1
a25 1
_atomic_lock(volatile _spinlock_lock_t *lock)
d27 1
a27 1
	volatile _spinlock_lock_t old;
d40 1
a40 1
	return (old == _SPINLOCK_LOCKED);
@

