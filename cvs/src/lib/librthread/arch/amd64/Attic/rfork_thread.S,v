head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2012.03.22.01.10.48;	author guenther;	state dead;
branches;
next	1.6;

1.6
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.13.01.07.01;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.24.19.47.35;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.25.00.36.29;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.03.18.16.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@tfork_thread has been moved to libc
@
text
@/*	$OpenBSD: rfork_thread.S,v 1.6 2012/01/17 02:34:18 guenther Exp $ */
/*-
 * Copyright (c) 2000 Peter Wemm <peter@@FreeBSD.org>
 * Copyright (c) 2003 Alan L. Cox <alc@@cs.rice.edu>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/asm.h>
#if 0
__FBSDID("$FreeBSD: /repoman/r/ncvs/src/lib/libc/amd64/gen/rfork_thread.S,v 1.1 2003/10/13 20:32:33 alc Exp $");
#endif

/*
 * With thanks to John Dyson for the original version of this.
 */

#include "../../../libc/arch/amd64/SYS.h"

/*
 *                %rdi   %rsi        %rdx       %rcx
 * __tfork_thread(param, stack_addr, start_fnc, start_arg);
 *
 * param:		Argument to pass to the actual kernel call.
 * stack_addr:		Top of stack for thread.
 * start_fnc:		Address of thread function to call in child.
 * start_arg:		Argument to pass to the thread function in child.
 */

ENTRY(__tfork_thread)
	movq	%rdx, %r8
	movq	%rcx, %r9

	/*
	 * Prepare and execute the thread creation syscall
	 */
	movl	$SYS___tfork, %eax
	syscall
	jb 	2f

	/*
	 * Check to see if we are in the parent or child
	 */
	cmpl	$0, %edx
	jnz	1f
	ret

	/*
	 * If we are in the child (new thread), then
	 * set-up the call to the internal subroutine.  If it
	 * returns, then call __threxit.
	 */
1:
	movq	%rsi, %rsp
	movq	%r9, %rdi
	call	*%r8

	/*
	 * Thread exit system call
	 */
	movl	$SYS___threxit, %eax
	xorl	%edi, %edi
	syscall

	/*
	 * Branch here if the thread creation fails:
	 */
2:
#ifdef PIC
	movq	PIC_GOT(CERROR), %rcx
	jmp	*%rcx
#else
	jmp	CERROR
#endif
@


1.6
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.5 2011/10/17 06:39:20 guenther Exp $ */
@


1.5
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.4 2011/10/13 01:07:01 guenther Exp $ */
d71 1
a71 1
	 * returns, then call threxit.
d81 1
a81 1
	movl	$SYS_threxit, %eax
@


1.4
log
@Convert rfork_thread() from int$80 to syscall.
Tune the asm slightly to avoid using the stack and use smaller instructions.
Pass threxit() a NULL pointer.

seemed okay to kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.3 2009/09/24 19:47:35 guenther Exp $ */
d41 2
a42 2
 *              %edi   %rsi        %rdx       %rcx
 * rfork_thread(flags, stack_addr, start_fnc, start_arg);
d44 1
a44 1
 * flags:		Flags to rfork system call.  See rfork(2).
d50 1
a50 1
ENTRY(rfork_thread)
d57 1
a57 1
	movl	$SYS_rfork, %eax
@


1.3
log
@rfork_thread() lacked PIC handling for CERROR, resulting in a text relocation

ok kettenis@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.2 2005/12/25 00:36:29 tedu Exp $ */
d51 2
a52 4
	pushq	%rbx
	pushq	%r12
	movq	%rdx, %rbx
	movq	%rcx, %r12
d57 2
a58 2
	movq	$SYS_rfork, %rax
	int	$0x80
a65 2
	popq	%r12
	popq	%rbx
d71 1
a71 1
	 * returns, then call __exit.
d75 2
a76 3
	movq	%r12, %rdi 
	call	*%rbx
	movl	%eax, %edi
d79 1
a79 1
	 * Exit system call
d81 3
a83 2
	movq	$SYS_threxit, %rax
	int	$0x80
a88 2
	popq	%r12
	popq	%rbx
@


1.2
log
@if the start routine returns (never happens), call the right threxit syscall
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.1 2005/12/03 18:16:19 tedu Exp $ */
d95 4
d100 1
@


1.1
log
@add userland thread library.  incomplete, but functional
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d86 1
a86 5
#ifdef SYS_exit
	movq	$SYS_exit, %rax
#else
	movq	$SYS_sys_exit, %rax
#endif
@

