head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.16
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.14
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2014.03.18.22.36.30;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.02.23.29.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.22.33.24;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.23.18.50.23;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.4 2013/06/01 20:47:40 tedu Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Atomic lock for m68k
 */

#include <machine/spinlock.h>

int
_atomic_lock(volatile _atomic_lock_t *lock)
{
	_atomic_lock_t old;

	/*
	 * The Compare And Swap instruction (mc68020 and above)
	 * compares its first operand with the memory addressed by
	 * the third. If they are the same value, the second operand
	 * is stored at the address. Otherwise the 1st operand (register)
	 * is loaded with the contents of the 3rd operand.
	 *
	 *      old = 0;
	 *	CAS(old, 1, *lock);
	 *	if (old == 1) { lock was acquired }
	 *
	 * From the MC68030 User's Manual (Motorola), page `3-13':
	 *    CAS Dc,Du,<ea>:
	 *	(<ea> - Dc) -> cc;
	 *	if Z then Du -> <ea>
	 *	else      <ea> -> Dc;
	 */
	old = _ATOMIC_LOCK_UNLOCKED;
	__asm__("casl %0, %2, %1" : "=d" (old), "=m" (*lock)
				  : "d" (_ATOMIC_LOCK_LOCKED),
				    "0" (old),  "1" (*lock)
				  : "cc");
	return (old != _ATOMIC_LOCK_UNLOCKED);
}
@


1.4
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2008/10/02 23:29:26 deraadt Exp $	*/
@


1.3
log
@the license on this is PD; david leonard says so
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2006/01/05 22:33:24 marc Exp $	*/
d8 1
a8 1
#include <spinlock.h>
d11 1
a11 1
_atomic_lock(volatile _spinlock_lock_t *lock)
d13 1
a13 1
	_spinlock_lock_t old;
d32 1
a32 1
	old = _SPINLOCK_UNLOCKED;
d34 1
a34 1
				  : "d" (_SPINLOCK_LOCKED),
d37 1
a37 1
	return (old != _SPINLOCK_UNLOCKED);
@


1.2
log
@
Use the system include <spinlock.h> to get the proper function
prototype for _atomic_lock
@
text
@d1 3
a3 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 2005/12/23 18:50:23 miod Exp $	*/
@


1.1
log
@m68k support code for librthread; atomic lock routine borrowed from the
existing libpthread code.
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.6 2002/10/11 19:08:41 marc Exp $	*/
d6 1
a6 1
#include "spinlock.h"
@

