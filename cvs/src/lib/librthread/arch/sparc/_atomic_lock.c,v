head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.13.05.41.06;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.02.23.29.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.22.33.24;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.25.16.00.02;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.4 2011/10/13 05:41:06 guenther Exp $	*/
/* David Leonard, <d@@csee.uq.edu.au>. Public domain. */

/*
 * Atomic lock for sparc
 */
 
#include <machine/spinlock.h>

int
_atomic_lock(volatile _atomic_lock_t * lock)
{
	_atomic_lock_t old;

	/*
	 *  "  ldstub  [address], reg_rd
	 * 
	 *  The atomic load-store instructions copy a byte from memory
	 *  into r[rd]m then rewrite the addressed byte in memory to all
	 *  ones [_ATOMIC_LOCK_LOCKED]. The operation is performed
	 *  atomically, that is, without allowing intervening interrupts
	 *  or deferred traps. In a multiprocessor system, two or more
	 *  processors executing atomic load-store unsigned byte [...]
	 *  addressing the same byte [...] simultaneously are guaranteed
	 *  to execute them in an undefined, but serial order."
	 *    - p101, The SPARC Architecture Manual (version 8) Prentice-Hall
	 *
	 * "LDSTUB loads a byte value from memory to a register and writes
	 *  the value FF_16 into the addressed byte atomically. LDSTUB
	 *  is the classic test-and-set instruction. Like SWAP, it has
	 *  a consensus number of two and so cannot resolve more than
	 *  two contending processes in a wait-free fashion."
	 *    - p129, The SPARC Architecture Manual (version 9) Prentice-Hall
	 *  (See also section J.6 (spinlocks))
	 *
	 * (No change to the condition codes are documented.)
	 */
	__asm__("ldstub [%1], %0" : "=&r" (old) : "r" (lock) : "memory");

	return (old == _ATOMIC_LOCK_LOCKED);
}
@


1.4
log
@Deal with the horror that is gcc asm constraints by copying the
known good version of ldstub in the kernel.  (It's finally in, aja!)

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2008/10/02 23:29:26 deraadt Exp $	*/
d8 1
a8 1
#include <spinlock.h>
d11 1
a11 1
_atomic_lock(volatile _spinlock_lock_t * lock)
d13 1
a13 1
	_spinlock_lock_t old;
d20 1
a20 1
	 *  ones [_SPINLOCK_LOCKED]. The operation is performed
d40 1
a40 1
	return (old == _SPINLOCK_LOCKED);
@


1.3
log
@the license on this is PD; david leonard says so
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2006/01/05 22:33:24 marc Exp $	*/
d38 1
a38 3
	__asm__("ldstub %0,%1"
		: "=m" (*lock), "=r" (old)
		: "0" (*lock));
@


1.2
log
@
Use the system include <spinlock.h> to get the proper function
prototype for _atomic_lock
@
text
@d1 3
a3 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 2005/12/25 16:00:02 miod Exp $	*/
@


1.1
log
@sparc support code for librthread (_atomic_lock yanked from existing
libpthread code).
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.8 2003/01/31 22:10:53 deraadt Exp $	*/
d6 1
a6 1
#include <machine/spinlock.h>
@

