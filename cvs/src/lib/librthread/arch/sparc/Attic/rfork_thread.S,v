head	1.4;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.0.24
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.22
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.20
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.16
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.18
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.14
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.12
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.10
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.8
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.03.22.01.10.48;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.25.16.00.02;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tfork_thread has been moved to libc
@
text
@/*	$OpenBSD: rfork_thread.S,v 1.3 2012/01/17 02:34:18 guenther Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "../../../libc/arch/sparc/SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
 */
ENTRY(__tfork_thread)
	mov	%o1, %o4	/* save stack */

	/*
	 * We can not invoke __tfork as a G2-style system call since we want
	 * different return paths.
	 */
	mov	SYS___tfork, %g1
	t	ST_SYSCALL
	bcs	9f
	 nop

	cmp	%o0, 0
	be	1f
	 nop

	/*
	 * In parent process: just return.
	 */
	retl
	 nop

1:
	/*
	 * In child process: switch stack, invoke function, then exit.
	 * Don't forget to allocate room for a window save on the new
	 * stack!
	 */
	sub	%g0, %g0, %fp
	sub	%o4, 96, %sp	/* stack */
	call	%o2		/* func */
	 mov	%o3, %o0	/* arg */

	mov	SYS___threxit, %g1
	clr	%o0
	t	ST_SYSCALL	/* will not return */

9:
	/*
	 * System call failure.
	 */
	ERROR()
@


1.3
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.2 2011/10/17 06:39:20 guenther Exp $	*/
@


1.2
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.1 2005/12/25 16:00:02 miod Exp $	*/
d66 1
a66 1
	mov	SYS_threxit, %g1
@


1.1
log
@sparc support code for librthread (_atomic_lock yanked from existing
libpthread code).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
 * int rfork_thread(int flags, void *stack, void (*func)(void *), void *arg);
d33 1
a33 1
ENTRY(rfork_thread)
d37 1
a37 1
	 * We can not invoke rfork as a G2-style system call since we want
d39 2
a40 2
	  */
	mov	SYS_rfork, %g1
d61 2
a62 1
	sub	%o4, 64, %sp	/* stack */
@

