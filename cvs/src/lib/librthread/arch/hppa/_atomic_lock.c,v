head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.14
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.10
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.12
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.8
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.26
	OPENBSD_5_0:1.5.0.24
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.22
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.20
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.16
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.18
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.7
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.03.14.42.33;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.05.22.33.23;	author marc;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.19.21.30.10;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.17.05.28.59;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.16.14.29.28;	author mickey;	state dead;
branches;
next	1.1;

1.1
date	2005.12.14.17.21.01;	author marco;	state Exp;
branches;
next	;


desc
@@


1.7
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@/* $OpenBSD: _atomic_lock.c,v 1.6 2012/03/03 14:42:33 miod Exp $ */
/*
 * Copyright (c) 2005 Marco Peereboom <marco@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/spinlock.h>
#ifdef DIAGNOSTIC
#include <stdio.h>
#include <stdlib.h>
#endif

int
_atomic_lock(volatile _atomic_lock_t *lock)
{
	volatile _atomic_lock_t old;

#ifdef DIAGNOSTIC
	if ((unsigned long)lock & 0xf) {
		printf("lock not 16 byte aligned\n");
		abort();
	}
#endif

	asm volatile ("ldcws 0(%2),%0"
		     : "=&r" (old), "+m" (lock)
		     : "r" (lock));

	return (old == _ATOMIC_LOCK_LOCKED);
}
@


1.6
log
@Sync the assembly statements with <machine/lock.h> for consistency.
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.5 2006/01/05 22:33:23 marc Exp $ */
d18 1
a18 1
#include <spinlock.h>
d25 1
a25 1
_atomic_lock(volatile _spinlock_lock_t *lock)
d27 1
a27 1
	volatile _spinlock_lock_t old;
d40 1
a40 1
	return (old == _SPINLOCK_LOCKED);
@


1.5
log
@
Use the system include <spinlock.h> to get the proper function
prototype for _atomic_lock
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.4 2005/12/19 21:30:10 marco Exp $ */
d19 4
d27 1
a27 1
	_spinlock_lock_t old;
d36 3
a38 3
	asm volatile ("ldcw %1,%0"
		     : "=r" (old), "=m" (*lock)
		     : "m" (*lock));
@


1.4
log
@Fix hppa ldcw alignment issue.

Help deraadt, tedu, kettenis
Ok tedu, kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.3 2005/12/17 05:28:59 marco Exp $ */
d18 1
a18 1
#include <machine/spinlock.h>
@


1.3
log
@sure it is not perfect, but at least we can compile rthreads on hppa.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d21 1
a21 1
_atomic_lock(register volatile _spinlock_lock_t *lock)
d25 7
d36 1
a36 1
	return (old == _SPINLOCK_UNLOCKED);
@


1.2
log
@boolshit
@
text
@d1 1
a1 1
/* $OpenBSD: _atomic_lock.c,v 1.1 2005/12/14 17:21:01 marco Exp $ */
@


1.1
log
@Add locking primitive for hppa. ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@

