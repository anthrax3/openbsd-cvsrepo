head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.26
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2017.01.05.16.52.42;	author patrick;	state Exp;
branches;
next	1.7;
commitid	n8fQ9ojYTFj2DBZ5;

1.7
date	2016.04.09.06.03.48;	author jsg;	state Exp;
branches;
next	1.6;
commitid	DJ2AtgRmazNhBBCz;

1.6
date	2013.08.28.19.26.05;	author patrick;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.02.19.08.09;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.23.20.49.55;	author patrick;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.22.33.23;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.14.19.42.25;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Now that all non-ARMv7 platforms are gone, tedu the legacy atomic
locking code.

ok kettenis@@
@
text
@/*	$OpenBSD: _atomic_lock.c,v 1.7 2016/04/09 06:03:48 jsg Exp $	*/

/*
 * Copyright (c) 2004 Dale Rahn. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/*
 * Atomic lock for arm
 */

#include <sys/types.h>
#include <machine/spinlock.h>

int
_atomic_lock(volatile _atomic_lock_t *lock)
{
	_atomic_lock_t old = 0;
	uint32_t scratch = 0;

	__asm__("1: ldrex %0, [%1]      \n"
		"   strex %2, %3, [%1]  \n"
		"   cmp %2, #0          \n"
		"   bne 1b              \n"
		"   dmb sy              \n"
		: "+r" (old), "+r" (lock), "+r" (scratch)
		: "r" (_ATOMIC_LOCK_LOCKED));

	return (old != _ATOMIC_LOCK_UNLOCKED);
}
@


1.7
log
@replace 0xf57ff05f with dmb sy
spotted by guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.6 2013/08/28 19:26:05 patrick Exp $	*/
d37 2
a38 1
	_atomic_lock_t old;
a39 3
#ifdef ARM_V7PLUS_LOCKS
	uint32_t scratch = 0;
	old = 0;
a46 4
#else
	__asm__("swp %0, %2, [%1]"
		: "=r" (old), "=r" (lock)
		: "r" (_ATOMIC_LOCK_LOCKED), "1" (lock) );
a47 1
#endif
@


1.6
log
@Following the ARM manuals and cookbooks, ldrex/strex don't have implicit
barriers.  Therefore it is required to add a memory berrier, so that
it is ensured that all observers observed the change.

ok rapha@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.5 2013/06/02 19:08:09 maja Exp $	*/
d46 1
a46 1
		"   .long 0xf57ff05f    \n" /* XXX: use dmb */
@


1.5
log
@Make arm compile again. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.4 2013/06/01 20:47:40 tedu Exp $	*/
d46 1
@


1.4
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.3 2013/01/23 20:49:55 patrick Exp $	*/
d31 1
@


1.3
log
@ARMv7 doesn't support the atomic SWP instruction anymore. Use the atomic
load and store instructions instead.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2006/01/05 22:33:23 marc Exp $	*/
d31 1
a31 1
#include <spinlock.h>
d34 1
a34 1
_atomic_lock(volatile _spinlock_lock_t *lock)
d36 1
a36 1
	_spinlock_lock_t old;
d46 1
a46 1
		: "r" (_SPINLOCK_LOCKED));
d50 1
a50 1
		: "r" (_SPINLOCK_LOCKED), "1" (lock) );
d53 1
a53 1
	return (old != _SPINLOCK_UNLOCKED);
@


1.2
log
@
Use the system include <spinlock.h> to get the proper function
prototype for _atomic_lock
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.1 2005/12/14 19:42:25 drahn Exp $	*/
d38 10
d52 1
@


1.1
log
@Initial versions of arm code, in-tree development (not yet working).
@
text
@d1 1
a1 1
/*	$OpenBSD: _atomic_lock.c,v 1.2 2004/02/09 15:27:12 drahn Exp $	*/
d31 1
a31 1
#include "spinlock.h"
@

