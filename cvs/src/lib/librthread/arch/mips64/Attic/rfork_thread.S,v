head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.0.24
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.22
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.20
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.16
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.18
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.14
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.12
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.10
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.8
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2012.03.22.01.10.48;	author guenther;	state dead;
branches;
next	1.4;

1.4
date	2012.02.17.18.02.18;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.24.12.01.26;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@tfork_thread has been moved to libc
@
text
@/*	$OpenBSD: rfork_thread.S,v 1.4 2012/02/17 18:02:18 miod Exp $	*/

/*
 * Copyright (c) 2005, Miodrag Vallat
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "../../../libc/arch/mips64/SYS.h"

/*
 * int __tfork_thread(const struct __tfork *param, void *stack, void (*func)(void *), void *arg);
 */
FRAMESZ=4*REGSZ
GPOFF=FRAMESZ-2*REGSZ
LEAF(__tfork_thread, FRAMESZ)
	/* a0 = param, a1 = stack, a2 = func, a3 = arg */
	PTR_SUBU sp, FRAMESZ
	SETUP_GP64(GPOFF, _C_LABEL(__tfork_thread))
	.set	reorder

	move	t0, a1		/* stack */
	move	t1, a3		/* arg */

	__DO_SYSCALL(__tfork)
	bnez	a3, 9f

	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ

	beqz	v0, 1f

	/*
	 * In parent process: just return.
	 */
	j	ra

1:
	/*
	 * In child process: switch stack, invoke function, then exit.
	 */

	move	sp, t0		/* stack */
	move	t9, a2		/* func */
	move	a0, t1		/* arg */
	move	v0, zero
	jal	ra, t9

	move	a0, zero
	__DO_SYSCALL(__threxit)

9:
	/*
	 * System call failure.
	 */
	LA	t9, CERROR

	RESTORE_GP64
	PTR_ADDU sp, FRAMESZ
	jr	t9
END(__tfork_thread)
@


1.4
log
@Allow librthread to build on mips64.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.3 2012/01/17 02:34:18 guenther Exp $	*/
@


1.3
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.2 2011/10/17 06:39:20 guenther Exp $	*/
d33 7
a39 4
LEAF(__tfork_thread, 32)
	/* a0 = flags, a1 = stack, a2 = func, a3 = arg */
	PTR_SUBU sp, 32
	SETUP_GP64(16, _C_LABEL(__tfork_thread))
d48 1
a48 1
	PTR_ADDU sp, 32
a55 1
	 nop
d65 1
a66 1
	 move	v0, zero
d75 1
a75 1
	LA	t9, _C_LABEL(cerror)
d78 1
a78 1
	PTR_ADDU sp, 32
a79 1
	 nop
@


1.2
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfork_thread.S,v 1.1 2005/12/24 12:01:26 miod Exp $	*/
d67 1
a67 1
	__DO_SYSCALL(threxit)
@


1.1
log
@mips64 support code for librthread (_atomic_lock yanked from existing
libpthread code).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
 * int rfork_thread(int flags, void *stack, void (*func)(void *), void *arg);
d33 1
a33 1
LEAF(rfork_thread, 32)
d36 1
a36 1
	SETUP_GP64(16, _C_LABEL(rfork_thread))
d41 1
a41 1
	__DO_SYSCALL(rfork)
d79 1
a79 1
END(rfork_thread)
@

