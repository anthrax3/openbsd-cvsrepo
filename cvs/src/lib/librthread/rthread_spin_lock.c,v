head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.14
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.10
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.09.04.10.13.35;	author akfaew;	state Exp;
branches;
next	1.3;
commitid	tPNEomz2X1xlRc3u;

1.3
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.06.10.01.18;	author pirofti;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.03.09.07.17;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Get rid of ticket support, replace "struct _spinlock" with "_atomic_lock_t".

ok tedu@@
@
text
@/*	$OpenBSD: rthread_spin_lock.c,v 1.3 2013/06/01 20:47:40 tedu Exp $	*/
/*
 * Copyright (c) 2012 Paul Irofti <pirofti@@openbsd.org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <stdlib.h>

#include <pthread.h>

#include "rthread.h"

int
pthread_spin_init(pthread_spinlock_t *lock, int pshared)
{
	pthread_spinlock_t l = NULL;

	if (lock == NULL)
		return (EINVAL);

	if (pshared != PTHREAD_PROCESS_PRIVATE)
		return (ENOTSUP);

	l = calloc(1, sizeof *l);
	if (l == NULL)
		return (ENOMEM);

	l->lock = _SPINLOCK_UNLOCKED;
	*lock = l;
	return (0);
}

int
pthread_spin_destroy(pthread_spinlock_t *lock)
{
	if (lock == NULL || *lock == NULL)
		return (EINVAL);

	if ((*lock)->owner != NULL)
		return (EBUSY);

	free(*lock);
	*lock = NULL;
	return (0);
}

int
pthread_spin_trylock(pthread_spinlock_t *lock)
{
	pthread_t self = pthread_self();
	pthread_spinlock_t l;

	if (lock == NULL || *lock == NULL)
		return (EINVAL);

	l = *lock;

	if (l->owner == self)
		return (EDEADLK);
	if (!_spinlocktry(&l->lock))
		return (EBUSY);

	l->owner = self;
	return (0);
}

int
pthread_spin_lock(pthread_spinlock_t *lock)
{
	pthread_t self = pthread_self();
	pthread_spinlock_t l;

	if (lock == NULL || *lock == NULL)
		return (EINVAL);

	l = *lock;

	if (l->owner == self)
		return (EDEADLK);

	_spinlock(&l->lock);
	l->owner = self;
	return (0);
}

int
pthread_spin_unlock(pthread_spinlock_t *lock)
{
	pthread_t self = pthread_self();
	pthread_spinlock_t l;

	if (lock == NULL || *lock == NULL)
		return (EINVAL);

	l = *lock;

	if (l->owner != self)
		return (EPERM);

	l->owner = NULL;
	_spinunlock(&l->lock);
	return (0);
}
@


1.3
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_spin_lock.c,v 1.2 2012/05/06 10:01:18 pirofti Exp $	*/
d40 1
a40 1
	l->lock = _SPINLOCK_UNLOCKED_ASSIGN;
@


1.2
log
@Style nits from Brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_spin_lock.c,v 1.1 2012/05/03 09:07:17 pirofti Exp $	*/
d40 1
a40 1
	l->lock = _SPINLOCK_UNLOCKED;
d72 1
a72 1
	if (_atomic_lock(&l->lock))
@


1.1
log
@Add pthread spinlock support.

Implementation, documentation and naive regression tests for:
- pthread_spin_init()
- pthread_spin_destroy()
- pthread_spin_lock()
- pthread_spin_trylock()
- pthread_spin_unlock()

Implementation okay guenther@@, documentation okay jmc@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
a30 1
	if (lock == NULL) {
d32 2
a33 2
	}
	if (pshared != PTHREAD_PROCESS_PRIVATE) {
d35 1
a35 2
	}
	
d37 1
a37 1
	if (l == NULL) {
d39 1
a39 1
	}
d48 1
a48 1
	if (lock == NULL || *lock == NULL) {
d50 2
a51 2
	}
	if ((*lock)->owner != NULL) {
a52 1
	}
d65 1
a65 1
	if (lock == NULL || *lock == NULL) {
d67 1
a67 1
	}
d69 2
a70 1
	if (l->owner == self) {
d72 1
a72 2
	}
	if (_atomic_lock(&l->lock)) {
d74 1
a74 1
	}
d85 1
a85 1
	if (lock == NULL || *lock == NULL) {
d87 1
a87 1
	}
d89 2
a90 1
	if (l->owner == self) {
d92 1
a92 1
	}
d104 1
a104 1
	if (lock == NULL || *lock == NULL) {
d106 1
a106 1
	}
d108 2
a109 1
	if (l->owner != self) {
d111 1
a111 1
	}
@

