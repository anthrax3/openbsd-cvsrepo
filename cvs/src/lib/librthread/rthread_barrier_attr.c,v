head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.24
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.22
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.14
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2012.04.23.08.30.33;	author pirofti;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.11.10.18.46;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Honor subsystem style.

`Visual inspection looks ok' kurt@@.

>From Brad
@
text
@/*	$OpenBSD: rthread_barrier_attr.c,v 1.1 2012/04/11 10:18:46 pirofti Exp $	*/
/*
 * Copyright (c) 2012 Paul Irofti <pirofti@@openbsd.org>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <stdlib.h>

#include <pthread.h>

#include "rthread.h"

int
pthread_barrierattr_init(pthread_barrierattr_t *attr)
{
	if (attr == NULL)
		return (EINVAL);

	*attr = calloc(1, sizeof **attr);
	if (*attr == NULL)
		return (ENOMEM);

	(*attr)->pshared = PTHREAD_PROCESS_PRIVATE;

	return (0);
}

int
pthread_barrierattr_destroy(pthread_barrierattr_t *attr)
{
	if (attr == NULL || *attr == NULL)
		return (EINVAL);

	free(*attr);
	return (0);
}

int
pthread_barrierattr_getpshared(pthread_barrierattr_t *attr, int *pshared)
{
	if (attr == NULL || *attr == NULL)
		return (EINVAL);

	*pshared = (*attr)->pshared;

	return (0);
}

int
pthread_barrierattr_setpshared(pthread_barrierattr_t *attr, int pshared)
{
	if (attr == NULL || *attr == NULL)
		return (EINVAL);

	if (pshared != PTHREAD_PROCESS_PRIVATE)
		return (ENOTSUP);

	(*attr)->pshared = pshared;

	return (0);
}
@


1.1
log
@Add pthread barrier support.

Implementation and documentation for:
 - pthread_barrier_init()
 - pthread_barrier_destroy()
 - pthread_barrier_wait()
 - pthread_barrierattr_init()
 - pthread_barrierattr_destroy()
 - pthread_barrierattr_getpshared()
 - pthread_barrierattr_setpshared()

Currently only private barriers are supported.

Okay guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 2
a29 3
	if (attr == NULL) {
		return EINVAL;
	}
d32 2
a33 3
	if (*attr == NULL) {
		return ENOMEM;
	}
d37 1
a37 1
	return 0;
d43 3
a45 3
	if (attr == NULL || *attr == NULL) {
		return EINVAL;
	}
d47 1
a47 1
	return 0;
d53 3
a55 3
	if (attr == NULL || *attr == NULL) {
		return EINVAL;
	}
d57 2
a58 1
	return 0;
d64 5
a68 7
	if (attr == NULL || *attr == NULL) {
		return EINVAL;
	}

	if (pshared != PTHREAD_PROCESS_PRIVATE) {
		return ENOTSUP;
	}
d72 1
a72 1
	return 0;
@

