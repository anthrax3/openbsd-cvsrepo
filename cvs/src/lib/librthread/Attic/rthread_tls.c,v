head	1.19;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.8
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.10
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.6
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.4
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.10
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10;
locks; strict;
comment	@ * @;


1.19
date	2017.09.05.02.40.54;	author guenther;	state dead;
branches;
next	1.18;
commitid	5DW3WOQF0YGGx8lJ;

1.18
date	2016.09.04.10.13.35;	author akfaew;	state Exp;
branches;
next	1.17;
commitid	tPNEomz2X1xlRc3u;

1.17
date	2016.04.02.19.56.53;	author guenther;	state Exp;
branches;
next	1.16;
commitid	8mfZyQLsoIGIAaFG;

1.16
date	2013.11.02.22.37.17;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2013.07.30.16.19.33;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2013.06.01.20.47.40;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2011.11.06.11.48.59;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2011.07.05.00.23.40;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.13.05.42.46;	author kevlo;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.22.20.48.57;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.06.49.48;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.19.06.47.40;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.19.05.13.44;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.18.01.35.06;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.14.05.42.07;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.14.05.38.31;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.14.04.01.44;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.07.02.56.59;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.03.18.16.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Move mutex, condvar, and thread-specific data routes, pthread_once, and
pthread_exit from libpthread to libc, along with low-level bits to
support them.  Major bump to both libc and libpthread.

Requested by libressl team.  Ports testing by naddy@@
ok kettenis@@
@
text
@/*	$OpenBSD: rthread_tls.c,v 1.18 2016/09/04 10:13:35 akfaew Exp $ */
/*
 * Copyright (c) 2004,2005 Ted Unangst <tedu@@openbsd.org>
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * thread specific storage
 */

#include <stdlib.h>
#include <errno.h>

#include <pthread.h>

#include "rthread.h"

static struct rthread_key rkeys[PTHREAD_KEYS_MAX];
static _atomic_lock_t rkeyslock = _SPINLOCK_UNLOCKED;

int
pthread_key_create(pthread_key_t *key, void (*destructor)(void*))
{
	static int hint;
	int i;

	_spinlock(&rkeyslock);
	if (rkeys[hint].used) {
		for (i = 0; i < PTHREAD_KEYS_MAX; i++) {
			if (!rkeys[i].used)
				break;
		}
		if (i == PTHREAD_KEYS_MAX) {
			_spinunlock(&rkeyslock);
			return (EAGAIN);
		}
		hint = i;
	}
	rkeys[hint].used = 1;
	rkeys[hint].destructor = destructor;

	*key = hint++;
	if (hint >= PTHREAD_KEYS_MAX)
		hint = 0;
	_spinunlock(&rkeyslock);

	return (0);
}
DEF_STD(pthread_key_create);

int
pthread_key_delete(pthread_key_t key)
{
	pthread_t thread;
	struct rthread_storage *rs;
	int rv = 0;

	if (key < 0 || key >= PTHREAD_KEYS_MAX)
		return (EINVAL);

	_spinlock(&rkeyslock);
	if (!rkeys[key].used) {
		rv = EINVAL;
		goto out;
	}

	rkeys[key].used = 0;
	rkeys[key].destructor = NULL;
	_spinlock(&_thread_lock);
	LIST_FOREACH(thread, &_thread_list, threads) {
		for (rs = thread->local_storage; rs; rs = rs->next) {
			if (rs->keyid == key)
				rs->data = NULL;
		}
	}
	_spinunlock(&_thread_lock);

out:
	_spinunlock(&rkeyslock);
	return (rv);
}

static struct rthread_storage *
_rthread_findstorage(pthread_key_t key)
{
	struct rthread_storage *rs;
	pthread_t self;

	if (!rkeys[key].used) {
		rs = NULL;
		goto out;
	}

	self = pthread_self();

	for (rs = self->local_storage; rs; rs = rs->next) {
		if (rs->keyid == key)
			break;
	}
	if (!rs) {
		rs = calloc(1, sizeof(*rs));
		if (!rs)
			goto out;
		rs->keyid = key;
		rs->data = NULL;
		rs->next = self->local_storage;
		self->local_storage = rs;
	}

out:
	return (rs);
}

void *
pthread_getspecific(pthread_key_t key)
{
	struct rthread_storage *rs;

	if (key < 0 || key >= PTHREAD_KEYS_MAX)
		return (NULL);

	rs = _rthread_findstorage(key);
	if (!rs)
		return (NULL);

	return (rs->data);
}
DEF_STD(pthread_getspecific);

int
pthread_setspecific(pthread_key_t key, const void *data)
{
	struct rthread_storage *rs;

	if (key < 0 || key >= PTHREAD_KEYS_MAX)
		return (EINVAL);

	rs = _rthread_findstorage(key);
	if (!rs)
		return (ENOMEM);
	rs->data = (void *)data;

	return (0);
}
DEF_STD(pthread_setspecific);

void
_rthread_tls_destructors(pthread_t thread)
{
	struct rthread_storage *rs;
	int i;

	_spinlock(&rkeyslock);
	for (i = 0; i < PTHREAD_DESTRUCTOR_ITERATIONS; i++) {
		for (rs = thread->local_storage; rs; rs = rs->next) {
			if (!rs->data)
				continue;
			if (rkeys[rs->keyid].destructor) {
				void (*destructor)(void *) =
				    rkeys[rs->keyid].destructor;
				void *data = rs->data;
				rs->data = NULL;
				_spinunlock(&rkeyslock);
				destructor(data);
				_spinlock(&rkeyslock);
			}
		}
	}
	for (rs = thread->local_storage; rs; rs = thread->local_storage) {
		thread->local_storage = rs->next;
		free(rs);
	}
	_spinunlock(&rkeyslock);
}
@


1.18
log
@Get rid of ticket support, replace "struct _spinlock" with "_atomic_lock_t".

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.17 2016/04/02 19:56:53 guenther Exp $ */
@


1.17
log
@Wrap <pthread.h> and <pthread_np.h> to eliminate PLT entries for internal
references.  Use _thread_pagesize for the semaphore mmap size instead of
calling getpagesize() each time.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.16 2013/11/02 22:37:17 tedu Exp $ */
d30 1
a30 1
static struct _spinlock rkeyslock = _SPINLOCK_UNLOCKED;
@


1.16
log
@remove unnecessary spinlock that slowed down pthread_getspecific.
original report and fix provided by John Carr. ok guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.15 2013/07/30 16:19:33 guenther Exp $ */
d60 1
d139 1
d156 1
@


1.15
log
@Free the list used for tracking the pthread_{get,set}specific()
data after calling all the destructors.

noted by kettenis@@
diff by tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.14 2013/06/01 20:47:40 tedu Exp $ */
a98 1
	_spinlock(&rkeyslock);
a120 1
	_spinunlock(&rkeyslock);
d170 1
a171 1
				rs->data = NULL;
@


1.14
log
@cleanup and consolidate the spinlock_lock (what a name!) code.
it's now atomic_lock to better reflect its usage, and librthread now
features a new spinlock that's really a ticket lock.
thrlseep can handle both types of lock via a flag in the clock arg.
(temp back compat hack)
remove some old stuff that's accumulated along the way and no longer used.
some feedback from dlg, who is concerned with all things ticket lock.
(you need to boot a new kernel before installing librthread)
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.13 2011/11/06 11:48:59 guenther Exp $ */
d178 4
@


1.13
log
@Move <machine/spinlock.h> into rthread.h; strip out unnecessary #includes
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.12 2011/07/05 00:23:40 tedu Exp $ */
d30 1
a30 1
static _spinlock_lock_t rkeyslock = _SPINLOCK_UNLOCKED;
@


1.12
log
@fix a few bugs in the thread specific data functions
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.11 2008/10/13 05:42:46 kevlo Exp $ */
a21 6
#include <sys/param.h>
#include <sys/mman.h>
#include <sys/wait.h>

#include <machine/spinlock.h>

a22 4
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
@


1.11
log
@use calloc() instead of malloc() and memset()

"look good" tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.10 2005/12/22 20:48:57 brad Exp $ */
d74 3
d78 1
a78 1
	if (!rkeys[key].used)
d82 5
d89 10
d100 1
a100 2

	return (0);
d109 6
d124 1
a124 1
			return (NULL);
d131 2
d141 3
d155 3
@


1.10
log
@add a missing underscore to the function name rthread_tls_destructors().
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.9 2005/12/22 06:49:48 tedu Exp $ */
d99 1
a99 1
		rs = malloc(sizeof(*rs));
a101 1
		memset(rs, 0, sizeof(*rs));
@


1.9
log
@more consistently use _rthread prefix for all not meant to be exported
interfaces that aren't static, and a few that are but which will change
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.8 2005/12/19 06:47:40 tedu Exp $ */
d138 1
a138 1
rthread_tls_destructors(pthread_t thread)
@


1.8
log
@update copyright to 2005
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.7 2005/12/19 05:13:44 tedu Exp $ */
d87 1
a87 1
rthread_findstorage(pthread_key_t key)
d117 1
a117 1
	rs = rthread_findstorage(key);
d129 1
a129 1
	rs = rthread_findstorage(key);
@


1.7
log
@sanity check for key_delete was missing !
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.6 2005/12/18 01:35:06 tedu Exp $ */
d3 1
a3 1
 * Copyright (c) 2004 Ted Unangst <tedu@@openbsd.org>
@


1.6
log
@initialize all spinlocks to _SPINLOCK_UNLOCKED
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.5 2005/12/14 05:42:07 tedu Exp $ */
d75 1
a75 1
	if (rkeys[key].used)
@


1.5
log
@the beatings will continue until morale improves
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.4 2005/12/14 05:38:31 tedu Exp $ */
d40 1
a40 1
static _spinlock_lock_t rkeyslock;
@


1.4
log
@there should be a lock around the tls key table
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.3 2005/12/14 04:01:44 tedu Exp $ */
d74 3
@


1.3
log
@change keys to use table instead of list, makes a sane destructor implementation
possible
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.2 2005/12/07 02:56:59 tedu Exp $ */
d40 1
d48 1
d54 2
a55 1
		if (i == PTHREAD_KEYS_MAX)
d57 1
d66 1
d75 1
d78 1
d140 1
d146 4
a149 1
				rkeys[rs->keyid].destructor(rs->data);
d151 2
d156 1
@


1.2
log
@malloc the right size, and memset after malloc
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_tls.c,v 1.1 2005/12/03 18:16:19 tedu Exp $ */
d39 1
a39 1
struct rthread_key *rthread_key_list;
d44 2
a45 2
	static int last_key;
	struct rthread_key *rkey;
d47 11
a57 1
	last_key++;
d59 3
a61 10
	rkey = malloc(sizeof(*rkey));
	if (!rkey)
		return (errno);
	memset(rkey, 0, sizeof(*rkey));
	rkey->keyid = last_key;
	rkey->destructor = destructor;
	rkey->next = rthread_key_list;
	rthread_key_list = rkey;
	
	*key = last_key;
d70 3
d125 18
@


1.1
log
@add userland thread library.  incomplete, but functional
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d49 1
a49 1
	rkey = malloc(sizeof(*key));
d52 1
d86 1
@

