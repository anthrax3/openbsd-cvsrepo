head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@ * @;


1.11
date	2016.05.07.19.05.22;	author guenther;	state dead;
branches;
next	1.10;
commitid	d9R7VGw9CHTkwXE1;

1.10
date	2015.10.15.16.38.04;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	N57dTt7fg0rgYJ1q;

1.9
date	2014.08.31.20.23.10;	author guenther;	state Exp;
branches;
next	1.8;
commitid	fzxbkcZqNIBa9TOj;

1.8
date	2013.10.04.03.31.16;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2013.04.29.17.06.20;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2012.04.17.15.10.11;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.22.01.11.47;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.04.05.46.38;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.27.17.36.59;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.05.04.02.03;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/* $OpenBSD: rthread_cancel.c,v 1.10 2015/10/15 16:38:04 deraadt Exp $ */
/* $snafu: libc_tag.c,v 1.4 2004/11/30 07:00:06 marc Exp $ */

/* PUBLIC DOMAIN: No Rights Reserved. Marco S Hyman <marc@@snafu.org> */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/msg.h>
#include <sys/mman.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/resource.h>
#include <sys/uio.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <poll.h>
#include <signal.h>
#include <stdarg.h>
#include <termios.h>
#include <unistd.h>

#include <pthread.h>
#include <stdlib.h>
#include <string.h>

#include "thread_private.h"	/* in libc/include */

#include "rthread.h"

/*
 * If you add anything here, make sure to add it to the list in the
 * pthread_testcancel(3) manpage too.
 */

int	_thread_sys_accept(int, struct sockaddr *, socklen_t *);
int	_thread_sys_accept4(int, struct sockaddr *, socklen_t *, int);
int	_thread_sys_close(int);
int	_thread_sys_closefrom(int);
int	_thread_sys_connect(int, const struct sockaddr *, socklen_t);
int	_thread_sys_fcntl(int, int, ...);
int	_thread_sys_fsync(int);
int	_thread_sys_msgrcv(int, void *, size_t, long, int);
int	_thread_sys_msgsnd(int, const void *, size_t, int);
int	_thread_sys_msync(void *, size_t, int);
int	_thread_sys_nanosleep(const struct timespec *, struct timespec *);
int	_thread_sys_open(const char *, int, ...);
int	_thread_sys_openat(int, const char *, int, ...);
int	_thread_sys_poll(struct pollfd *, nfds_t, int);
int	_thread_sys_ppoll(struct pollfd *, nfds_t, const struct timespec *,
	    const sigset_t *);
ssize_t	_thread_sys_pread(int, void *, size_t, off_t);
ssize_t	_thread_sys_preadv(int, const struct iovec *, int, off_t);
int	_thread_sys_pselect(int, fd_set *, fd_set *, fd_set *,
	    const struct timespec *, const sigset_t *);
ssize_t	_thread_sys_pwrite(int, const void *, size_t, off_t);
ssize_t	_thread_sys_pwritev(int, const struct iovec *, int, off_t);
ssize_t	_thread_sys_read(int, void *, size_t);
ssize_t	_thread_sys_readv(int, const struct iovec *, int);
ssize_t	_thread_sys_recvfrom(int, void *, size_t, int, struct sockaddr *,
	    socklen_t *);
ssize_t	_thread_sys_recvmsg(int, struct msghdr *, int);
int	_thread_sys_select(int, fd_set *, fd_set *, fd_set *,
	    struct timeval *);
ssize_t	_thread_sys_sendmsg(int, const struct msghdr *, int);
ssize_t	_thread_sys_sendto(int, const void *, size_t, int,
	    const struct sockaddr *, socklen_t);
int	_thread_sys_sigsuspend(const sigset_t *);
pid_t	_thread_sys_wait4(pid_t, int *, int, struct rusage *);
ssize_t	_thread_sys_write(int, const void *, size_t);
ssize_t	_thread_sys_writev(int, const struct iovec *, int);

void
_enter_cancel(pthread_t self)
{
	if (self->flags & THREAD_CANCEL_ENABLE) {
		self->cancel_point++;
		if (IS_CANCELED(self))
			pthread_exit(PTHREAD_CANCELED);
	}
}

void
_leave_cancel(pthread_t self)
{
	if (self->flags & THREAD_CANCEL_ENABLE) 
		self->cancel_point--;
}

void
_enter_delayed_cancel(pthread_t self)
{
	if (self->flags & THREAD_CANCEL_ENABLE) {
		self->delayed_cancel = 0;
		self->cancel_point++;
		if (IS_CANCELED(self))
			pthread_exit(PTHREAD_CANCELED);
		_rthread_setflag(self, THREAD_CANCEL_DELAY);
	}
}

void
_leave_delayed_cancel(pthread_t self, int can_cancel)
{
	if (self->flags & THREAD_CANCEL_ENABLE) {
		if (self->flags & THREAD_CANCEL_DELAY) {
			self->cancel_point--;
			_rthread_clearflag(self, THREAD_CANCEL_DELAY);
		}
		if (IS_CANCELED(self) && can_cancel)
			pthread_exit(PTHREAD_CANCELED);
		self->delayed_cancel = 0;
	}
}

int
accept(int fd, struct sockaddr *addr, socklen_t *addrlen)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_accept(fd, addr, addrlen);
	_leave_cancel(self);
	return (rv);
}

int
accept4(int fd, struct sockaddr *addr, socklen_t *addrlen, int flags)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_accept4(fd, addr, addrlen, flags);
	_leave_cancel(self);
	return (rv);
}

#if 0
aio_suspend()			/* don't have yet */
clock_nanosleep()		/* don't have yet */
#endif

int
close(int fd)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_close(fd);
	_leave_cancel(self);
	return (rv);
}


int
closefrom(int fd)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_closefrom(fd);
	_leave_cancel(self);
	return (rv);
}

int
connect(int fd, const struct sockaddr *addr, socklen_t addrlen)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_connect(fd, addr, addrlen);
	_leave_cancel(self);
	return (rv);
}

#if 0
creat()				/* built on open() */
#endif

int
fcntl(int fd, int cmd, ...)
{
	va_list ap;
	int rv;

	va_start(ap, cmd);
	switch (cmd) {
	case F_DUPFD:
	case F_DUPFD_CLOEXEC:
	case F_SETFD:
	case F_SETFL:
	case F_SETOWN:
		rv = _thread_sys_fcntl(fd, cmd, va_arg(ap, int));
		break;
	case F_GETFD:
	case F_GETFL:
	case F_GETOWN:
	case F_ISATTY:
		rv = _thread_sys_fcntl(fd, cmd);
		break;
	case F_GETLK:
	case F_SETLK:
		rv = _thread_sys_fcntl(fd, cmd, va_arg(ap, struct flock *));
		break;
	case F_SETLKW:
	{
		pthread_t self = pthread_self();

		_enter_cancel(self);
		rv = _thread_sys_fcntl(fd, cmd, va_arg(ap, struct flock *));
		_leave_cancel(self);
		break;
	}
	default:	/* should never happen? */
		rv = _thread_sys_fcntl(fd, cmd, va_arg(ap, void *));
		break;
	}
	va_end(ap);
	return (rv);
}

#if 0
fdatasync()			/* built on fsync() */
#endif

int
fsync(int fd)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_fsync(fd);
	_leave_cancel(self);
	return (rv);
}

#if 0
getmsg()			/* don't have: dumb STREAMS stuff */
getpmsg()			/* don't have: dumb STREAMS stuff */
lockf()				/* built on fcntl() */
mq_receive()			/* don't have yet */
mq_send()			/* don't have yet */
mq_timedreceive()		/* don't have yet */
mq_timedsend()			/* don't have yet */
#endif

int
msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv =  _thread_sys_msgrcv(msqid, msgp, msgsz, msgtyp, msgflg);
	_leave_cancel(self);
	return (rv);
}

int
msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv =  _thread_sys_msgsnd(msqid, msgp, msgsz, msgflg);
	_leave_cancel(self);
	return (rv);
}

int
msync(void *addr, size_t len, int flags)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv =  _thread_sys_msync(addr, len, flags);
	_leave_cancel(self);
	return (rv);
}

int
nanosleep(const struct timespec *rqtp, struct timespec *rmtp)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_nanosleep(rqtp, rmtp);
	_leave_cancel(self);
	return (rv);
}

int
open(const char *path, int flags, ...)
{
	pthread_t self = pthread_self();

	va_list ap;
	mode_t mode = 0;
	int rv;

	if (flags & O_CREAT) {
		va_start(ap, flags);
		mode = va_arg(ap, int);
		va_end(ap);
	}
	_enter_cancel(self);
	rv = _thread_sys_open(path, flags, mode);
	_leave_cancel(self);
	return (rv);
}


int
openat(int fd, const char *path, int flags, ...)
{
	pthread_t self = pthread_self();

	va_list ap;
	mode_t mode = 0;
	int rv;

	if (flags & O_CREAT) {
		va_start(ap, flags);
		mode = va_arg(ap, int);
		va_end(ap);
	}
	_enter_cancel(self);
	rv = _thread_sys_openat(fd, path, flags, mode);
	_leave_cancel(self);
	return (rv);
}

#if 0
pause()				/* built on sigsuspend() */
#endif

int
poll(struct pollfd *fds, nfds_t nfds, int timeout)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_poll(fds, nfds, timeout);
	_leave_cancel(self);
	return (rv);
}

int
ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *timeout,
    const sigset_t *sigmask)
{
	pthread_t self = pthread_self();
	sigset_t set;
	int rv;

	if (sigmask != NULL && sigismember(sigmask, SIGTHR)) {
		set = *sigmask;
		sigdelset(&set, SIGTHR);
		sigmask = &set;
	}

	_enter_cancel(self);
	rv = _thread_sys_ppoll(fds, nfds, timeout, sigmask);
	_leave_cancel(self);
	return (rv);
}

ssize_t
pread(int fd, void *buf, size_t nbytes, off_t offset)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_pread(fd, buf, nbytes, offset);
	_leave_cancel(self);
	return (rv);
}

ssize_t
preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_preadv(fd, iov, iovcnt, offset);
	_leave_cancel(self);
	return (rv);
}

int
pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
    const struct timespec *timeout, const sigset_t *sigmask)
{
	pthread_t self = pthread_self();
	sigset_t set;
	int rv;

	if (sigmask != NULL && sigismember(sigmask, SIGTHR)) {
		set = *sigmask;
		sigdelset(&set, SIGTHR);
		sigmask = &set;
	}

	_enter_cancel(self);
	rv = _thread_sys_pselect(nfds, readfds, writefds, exceptfds, timeout,
	    sigmask);
	_leave_cancel(self);
	return (rv);
}

#if 0
putmsg()			/* don't have: dumb STREAMS stuff */
putpmsg()			/* don't have: dumb STREAMS stuff */
#endif

ssize_t
pwrite(int fd, const void *buf, size_t nbytes, off_t offset)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_pwrite(fd, buf, nbytes, offset);
	_leave_cancel(self);
	return (rv);
}

ssize_t
pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_pwritev(fd, iov, iovcnt, offset);
	_leave_cancel(self);
	return (rv);
}

ssize_t
read(int fd, void *buf, size_t nbytes)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_read(fd, buf, nbytes);
	_leave_cancel(self);
	return (rv);
}

ssize_t
readv(int fd, const struct iovec *iov, int iovcnt)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_readv(fd, iov, iovcnt);
	_leave_cancel(self);
	return (rv);
}

#if 0
recv()				/* built on recvfrom() */
#endif

ssize_t
recvfrom(int fd, void *buf, size_t len, int flags, struct sockaddr *addr,
    socklen_t *addrlen)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_recvfrom(fd, buf, len, flags, addr, addrlen);
	_leave_cancel(self);
	return (rv);
}

ssize_t
recvmsg(int fd, struct msghdr *msg, int flags)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_recvmsg(fd, msg, flags);
	_leave_cancel(self);
	return (rv);
}

int
select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
    struct timeval *timeout)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = _thread_sys_select(nfds, readfds, writefds, exceptfds, timeout);
	_leave_cancel(self);
	return (rv);
}

#if 0
sem_timedwait()			/* in rthread_sem.c */
sem_wait()			/* in rthread_sem.c */
send()				/* built on sendto() */
#endif

ssize_t
sendmsg(int fd, const struct msghdr *msg, int flags)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_sendmsg(fd, msg, flags);
	_leave_cancel(self);
	return (rv);
}

ssize_t
sendto(int fd, const void *msg, size_t len, int flags,
    const struct sockaddr *to, socklen_t tolen)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_sendto(fd, msg, len, flags, to, tolen);
	_leave_cancel(self);
	return (rv);
}


int
sigsuspend(const sigset_t *sigmask)
{
	pthread_t self = pthread_self();
	sigset_t set = *sigmask;
	int rv;

	sigdelset(&set, SIGTHR);
	_enter_cancel(self);
	rv = _thread_sys_sigsuspend(&set);
	_leave_cancel(self);
	return (rv);
}

#if 0
sigtimedwait()			/* don't have yet */
sigwait()			/* in rthread_sig.c */
sigwaitinfo()			/* don't have yet */
sleep()				/* built on nanosleep() */
system()			/* built on wait4()? XXX */
#endif

int
tcdrain(int fd)
{
	pthread_t self = pthread_self();
	int rv;

	_enter_cancel(self);
	rv = ioctl(fd, TIOCDRAIN, 0);
	_leave_cancel(self);
	return (rv);
}

#if 0
wait()				/* built on wait4() */
waitid()			/* don't have yet */
waitpid()			/* built on wait4() */
#endif

pid_t
wait4(pid_t wpid, int *status, int options, struct rusage *rusage)
{
	pthread_t self = pthread_self();
	pid_t rv;

	_enter_cancel(self);
	rv = _thread_sys_wait4(wpid, status, options, rusage);
	_leave_cancel(self);
	return (rv);
}

ssize_t
write(int fd, const void *buf, size_t nbytes)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_write(fd, buf, nbytes);
	_leave_cancel(self);
	return (rv);
}

ssize_t
writev(int fd, const struct iovec *iov, int iovcnt)
{
	pthread_t self = pthread_self();
	ssize_t rv;

	_enter_cancel(self);
	rv = _thread_sys_writev(fd, iov, iovcnt);
	_leave_cancel(self);
	return (rv);
}
@


1.10
log
@Handle F_ISATTY in the fcntl() stub as well
ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.9 2014/08/31 20:23:10 guenther Exp $ */
@


1.9
log
@accept4() should be a cancellation point.
Update the list in the pthread_testcancel(3) manpage: several were missing.

noted by miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.8 2013/10/04 03:31:16 guenther Exp $ */
d203 1
@


1.8
log
@_thread_sys_tcdrain() doesn't exist and isn't used
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.7 2013/04/29 17:06:20 matthew Exp $ */
d30 5
d36 1
d123 12
@


1.7
log
@Extend P_SIGSUSPEND handling in userret() to properly restore the
sigmask even if there are no pending signals under the temporary
sigmask.

Refactor existing select() and poll() system calls to introduce the
pselect() and ppoll() system calls.

Add rthread wrappers for pselect() and ppoll().  While there, update
cancellation point comments to reflect recent fdatasync() addition.

Minor bumps for libc and librthread due to new symbols.

ok guenther, millert, deraadt, jmc
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.6 2012/04/17 15:10:11 miod Exp $ */
a61 1
int	_thread_sys_tcdrain(int);
@


1.6
log
@Remove "#define _POSIX_THREADS" line before include <pthread.h>.
The latter contains "#define _POSIX_THREADS 1" which makes gcc 2.95 complain.
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.5 2012/03/22 01:11:47 guenther Exp $ */
d43 2
d47 2
d210 1
a210 1
fdatasync()			/* don't have yet */
d340 20
d384 21
a405 1
pselect()			/* don't have yet */
@


1.5
log
@closefrom() should be a cancellation point
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.4 2012/01/17 02:34:18 guenther Exp $ */
a4 2

#define _POSIX_THREADS
@


1.4
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.3 2012/01/04 05:46:38 guenther Exp $ */
d34 1
d137 13
d459 1
a459 1
sem_timedwait()			/* don't have yet */
@


1.3
log
@Delete some parameter names and extra semicolons that slipped through
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.2 2011/12/27 17:36:59 guenther Exp $ */
d69 1
a69 2
		if ((self->flags & (THREAD_CANCELED | THREAD_DYING)) ==
		    THREAD_CANCELED)
d81 25
d446 1
a446 1
sem_wait()			/* don't have yet */
@


1.2
log
@Don't let applications block, wait for, or handle SIGTHR, as the
thread library uses it internally for cancellation.
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_cancel.c,v 1.1 2011/12/05 04:02:03 guenther Exp $ */
d51 2
a52 2
	    socklen_t *);;
ssize_t	_thread_sys_recvmsg(int, struct msghdr *msg, int);;
d54 2
a55 2
	    struct timeval *);;
ssize_t	_thread_sys_sendmsg(int, const struct msghdr *msg, int);;
@


1.1
log
@Implement cancelation for the basic syscall cancelation points,
using previously allocated SIGTHR to interrupt in-process syscalls
and fixing the spelling of "cancelled" along the way.
Modeled on FreeBSD's libthr
@
text
@d1 1
a1 1
/* $OpenBSD: rthread_libc.c,v 1.8 2011/11/06 11:48:59 guenther Exp $ */
d456 1
d459 1
d461 1
a461 1
	rv = _thread_sys_sigsuspend(sigmask);
@

