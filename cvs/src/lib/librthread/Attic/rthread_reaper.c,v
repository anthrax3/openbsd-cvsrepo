head	1.4;
access;
symbols
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2009.11.27.19.42.24;	author guenther;	state dead;
branches;
next	1.3;

1.3
date	2007.04.10.17.39.21;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.10.17.25.08;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.04.19.48.52;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Change threxit() to take a pointer to a pid_t to zero out from the
kernel so that librthread can detect when a thread is completely
done with its stack without need a kqueue.  The dying thread moves
itself to a GC list, other threads scan the GC list on pthread_create()
and pthread_join() and free the stack and handle once the thread's
thread id is zeroed.

"get it in" deraadt@@, tedu@@, cheers by others
@
text
@/*	$OpenBSD: rthread_reaper.c,v 1.3 2007/04/10 17:39:21 tedu Exp $	*/
/*
 * Copyright (c) 2006 Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/event.h>

#include <errno.h>

#include <machine/spinlock.h>
#include <pthread.h>

#include "rthread.h"

int _rthread_kq;

void
_rthread_add_to_reaper(pid_t t, struct stack *s)
{
	struct kevent kc;
	int n;

	_rthread_debug(1, "Adding %d to reaper\n", t);
	EV_SET(&kc, t, EVFILT_PROC, EV_ADD|EV_CLEAR, NOTE_EXIT, 0, s);
	n = kevent(_rthread_kq, &kc, 1, NULL, 0, NULL);
	if (n == -1)
		_rthread_debug(0, "_rthread_add_to_reaper(): kevent %d\n", errno);
}

/* ARGSUSED */
void
_rthread_reaper(void)
{
	struct kevent ke;
	int  n;
	struct timespec t;

	t.tv_sec = 0;
	t.tv_nsec = 0;

	for (;;) {
		n = kevent(_rthread_kq, NULL, 0, &ke, 1, &t);
		if (n == -1)
			_rthread_debug(0, "_rthread_reaper(): kevent %d\n", errno);
		else if (n == 0)
			break;
		else {
			_rthread_debug(1, "_rthread_reaper(): %d died\n",
			    ke.ident);
			/* XXX check error conditions */
			_rthread_free_stack(ke.udata);
		}

	}
}
@


1.3
log
@when kevent fails, the errno is a lot more interesting to print than -1
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_reaper.c,v 1.2 2007/04/10 17:25:08 tedu Exp $	*/
@


1.2
log
@new lines in error messages
@
text
@d1 1
a1 1
/*	$OpenBSD: rthread_reaper.c,v 1.1 2006/01/04 19:48:52 otto Exp $	*/
d21 2
d39 2
a40 2
	if (n)
		_rthread_debug(0, "_rthread_add_to_reaper(): kevent %d\n", n);
d56 2
a57 2
		if (n < 0)
			_rthread_debug(0, "_rthread_reaper(): kevent %d\n", n);
@


1.1
log
@Cleanup struct pthread and stack after thread exits. This version does
not use a separate reaper thread. ok tedu@@ marc@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 1
		_rthread_debug(0, "_rthread_add_to_reaper(): kevent %d", n);
d55 1
a55 1
			_rthread_debug(0, "_rthread_reaper(): kevent %d", n);
@

