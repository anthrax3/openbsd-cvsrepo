head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2;
locks; strict;
comment	@ * @;


1.7
date	2016.05.07.19.05.22;	author guenther;	state dead;
branches;
next	1.6;
commitid	d9R7VGw9CHTkwXE1;

1.6
date	2013.02.15.22.01.24;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2013.02.14.03.38.15;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.18.21.43.28;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.08.15.24.06;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.19.07.18.17;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.17.06.39.20;	author guenther;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@/*	$OpenBSD: tcb.h,v 1.6 2013/02/15 22:01:24 guenther Exp $	*/
/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _TCB_H_
#define _TCB_H_

/*
 * We define the structure for the TCB, plus three macros:
 *	TCB_THREAD()
 *		Expands to a pointer-to-pthread rvalue that points
 *		to this thread's struct pthread
 *	TCB_ERRNOPTR()
 *		Expands to a pointer-to-int lvalue that points to
 *		this thread's errno
 *	TCB_INIT(tcb, thread, errnoptr)
 *		Expands to a code to initialize the TCB pointed to by
 *		its first argument
 *
 * <machine/tcb.h> must define the TLS_VARIANT macro.  If it defines
 * that to 1, then may also defined the macro
 *	THREAD_ERRNOPTR_OFFSET
 *		Byte offset in struct pthread of the pointer to the
 *		thread's errno
 *
 * By default, we get and set the TCB pointer for a thread using the
 * __get_tcb() and __set_tcb() syscalls.  If there's a faster way to do
 * either of those, <machine/tcb.h> should define the macros
 *	TCB_SET(tcb)
 *		Set the TCB pointer for this thread
 *	TCB_GET()
 *		Return the TCB pointer for this thread
 * If it defines TCB_GET, then it must also define:
 *	TCB_GET_MEMBER(member)
 *		Return the pointer in the 'member' slot in the TCB
 */

#include <machine/tcb.h>

#include <stddef.h>

struct pthread;

void	*__get_tcb(void);
void	__set_tcb(void *);

#ifdef TCB_GET_MEMBER
#define TCB_THREAD()	((struct pthread *)TCB_GET_MEMBER(tcb_thread))
#else
#define TCB_THREAD()	\
		(((struct thread_control_block *)__get_tcb())->tcb_thread)
#endif


#if TLS_VARIANT == 1
/*
 * Small TCB, with TLS data after the TCB.
 * Errno pointer stored in struct pthread
 */

struct thread_control_block {
	void	*tcb_dtv;		/* internal to the runtime linker */
	struct	pthread *tcb_thread;
};

#ifndef THREAD_ERRNOPTR_OFFSET
# define THREAD_ERRNOPTR_OFFSET	offsetof(struct pthread, errno_ptr)
#endif
#define __ERRNOPTR(thread)	\
	(((int **)(thread))[THREAD_ERRNOPTR_OFFSET / sizeof(int *)])
#define TCB_ERRNOPTR()	\
	__ERRNOPTR(TCB_THREAD())
#define	TCB_INIT(tcb, thread, errnoptr)			\
	do {						\
		(tcb)->tcb_dtv = 0;			\
		(tcb)->tcb_thread = (thread);		\
		__ERRNOPTR(thread) = (errnoptr);	\
	} while (0)


#elif TLS_VARIANT == 2
/*
 * Large TCB, with TLS data before the TCB (i.e., negative offsets)
 * Errno pointer stored in the TCB
 */

struct thread_control_block {
	struct	thread_control_block *__tcb_self;
	void	*tcb_dtv;		/* internal to the runtime linker */
	struct	pthread *tcb_thread;
	int	*__tcb_errno;
};

#ifdef TCB_GET_MEMBER
#define TCB_ERRNOPTR()	((int *)TCB_GET_MEMBER(__tcb_errno))
#else
#define TCB_ERRNOPTR()	\
		(((struct thread_control_block *)__get_tcb())->__tcb_errno)
#endif
#define	TCB_INIT(tcb, thread, errnoptr)			\
	do {						\
		(tcb)->__tcb_self = (tcb);		\
		(tcb)->tcb_dtv = 0;			\
		(tcb)->tcb_thread = (thread);		\
		(tcb)->__tcb_errno = (errnoptr);	\
	} while (0)


#else
# error "unknown TLS variant"
#endif


/* If there isn't a better way, use the default */
#ifndef	TCB_SET
#define	TCB_SET(tcb)	__set_tcb(tcb)
#endif

#if 0
void *_rtld_allocate_tls(void *, size_t, size_t);
void _rtld_free_tls(void *, size_t, size_t);
#else
/*
 * XXX Until we have these in ld.so and support __thread, just use
 * malloc/free.  The main thread's TCB cannot be allocated or freed with these.
 */
#define	_rtld_allocate_tls(old, size, align)	malloc(size)
#define	_rtld_free_tls(old, size, align)	free(old)
#endif

#endif /* _TCB_H_ */
@


1.6
log
@Revert previous diff: sparc and sparc64 don't set the TCB to NULL in exec, yet,
and vax doesn't support symbols that are both weak and undefined (yet?).

sparc issue diagnosed by kettenis@@, vax problem found by todd@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.5 2013/02/14 03:38:15 guenther Exp $	*/
@


1.5
log
@Make libpthread compatible with an ld.so that does TCB allocation:
if the initial thread already has a TCB then don't override it, and
if the _dl_allocate_tls() and _dl_free_tls() symbols exist then use
them instead of malloc/free

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.4 2012/02/18 21:43:28 fgsch Exp $	*/
d88 1
d116 1
d132 4
d137 2
a138 2
 * Functions that will eventually be provided by ld.so for allocating 
 * and freeing TCBs
d140 3
a142 2
void	*_dl_allocate_tls(void *);
void	_dl_free_tls(void *);
@


1.4
log
@id tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a87 1
		(tcb)->tcb_dtv = 0;			\
a114 1
		(tcb)->tcb_dtv = 0;			\
a129 4
#if 0
void *_rtld_allocate_tls(void *, size_t, size_t);
void _rtld_free_tls(void *, size_t, size_t);
#else
d131 2
a132 2
 * XXX Until we have these in ld.so and support __thread, just use
 * malloc/free.  The main thread's TCB cannot be allocated or freed with these.
d134 2
a135 3
#define	_rtld_allocate_tls(old, size, align)	malloc(size)
#define	_rtld_free_tls(old, size, align)	free(old)
#endif
@


1.3
log
@Include <stddef.h> to make sure offsetof() is defined.

ok guenther@@
@
text
@d1 1
@


1.2
log
@Remove some blatant lies.  Provide a variant 1 archs with a default
value for THREAD_ERRNOPTR_OFFSET (can't be used from ASM or ld.so, but
it lets things compile as we fill things in)
@
text
@d52 2
@


1.1
log
@Use __tfork, __get_tcb, and __set_tcb to have a real TCB and per-thread
errno.  The ASM bits for _cerror are sketchy or missing for some archs
but that can be corrected in-tree.
@
text
@d33 1
a33 1
 * that to 1, then it must also defined the macro
d67 1
a67 1
 * Small TCB, with TLS data after the TCB.  Used on IA64 and PowerPC
d76 3
a93 1
 * Used everywhere but IA64 and PowerPC
@

