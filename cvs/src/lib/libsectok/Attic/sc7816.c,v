head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.30
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.26
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.28
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.24
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8;
locks; strict;
comment	@ * @;


1.10
date	2010.10.17.08.45.17;	author djm;	state dead;
branches;
next	1.9;

1.9
date	2003.04.02.22.57.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.02.17.02.05;	author rees;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.30.20.05.39;	author rees;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.02.20.07.08;	author rees;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.26.16.26.14;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.12.19.35.25;	author rees;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.08.15.04.04;	author rees;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.07.16.10.00;	author rees;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.07.15.17.33;	author rees;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove libsectok; it hasn't been updated in years and doesn't work
with the current generation of tokens; ok markus@@ deraadt@@
@
text
@/* $Id: sc7816.c,v 1.9 2003/04/02 22:57:51 deraadt Exp $ */

/*
copyright 2000
the regents of the university of michigan
all rights reserved

permission is granted to use, copy, create derivative works
and redistribute this software and such derivative works
for any purpose, so long as the name of the university of
michigan is not used in any advertising or publicity
pertaining to the use or distribution of this software
without specific, written prior authorization.  if the
above copyright notice or any other identification of the
university of michigan is included in any copy of any
portion of this software, then the disclaimer below must
also be included.

this software is provided as is, without representation
from the university of michigan as to its fitness for any
purpose, and without warranty by the university of
michigan of any kind, either express or implied, including
without limitation the implied warranties of
merchantability and fitness for a particular purpose. the
regents of the university of michigan shall not be liable
for any damages, including special, indirect, incidental, or
consequential damages, with respect to any claim arising
out of or in connection with the use of the software, even
if it has been or is hereafter advised of the possibility of
such damages.
*/

/*
 * sc7816 library for use with pc/sc ifd drivers
 *
 * Jim Rees
 * Mukesh Agrawal
 * University of Michigan CITI, August 2000
 */

#ifdef __palmos__
#include <Common.h>
#include <System/SysAll.h>
#include <System/Unix/unix_stdlib.h>
#include <System/Unix/unix_string.h>
#include <UI/UIAll.h>
#include "field.h"
#else
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#endif

#ifdef SCPERF
#define SCPERF_FIRST_APPEARANCE
#endif /* SCPERF */

#include "sectok.h"
#include "sc7816.h"

char *scerrtab[] = {
    "ok",
    "no such tty",
    "out of memory",
    "timeout",
    "slag!",
    "card type not supported",
    "no card in reader",
    "not implemented",
    "error loading driver",
    "communications error",
    "reader not open",
    "unknown error",
};

int
scxopen(int rn, int flags, int *ep, char *config_path, char *driver_path)
{
    int r, sw;

    flags ^= STONOWAIT;

    r = sectok_xopen(rn, flags, config_path, driver_path, &sw);

    if (ep) {
	if (sectok_r1(sw) == 0x06)
	    *ep = sectok_r2(sw);
	else
	    *ep = SCECOMM;
    }

    return r;
}

int
scopen(int rn, int flags, int *ep)
{
    return scxopen(rn, flags, ep, NULL, NULL);
}

int
scclose(int fd)
{
    return sectok_close(fd);
}

int
sccardpresent(int fd)
{
    return sectok_cardpresent(fd);
}

int
scxreset(int fd, int flags, unsigned char *atr, int *ep)
{
    int r, sw;

    r = sectok_reset(fd, flags, atr, &sw);

    if (ep) {
	if (sectok_swOK(sw))
	    *ep = SCEOK;
	else if (sectok_r1(sw) == 0x06)
	    *ep = sectok_r2(sw);
	else
	    *ep = SCESLAG;
    }

    return r;
}

int
screset(int fd, unsigned char *atr, int *ep)
{
    return scxreset(fd, 0, atr, ep);
}

int
scrw(int fd, int cla, int ins, int p1, int p2, int ilen, unsigned char *ibuf, int olen, unsigned char *obuf, int *sw1p, int *sw2p)
{
    int n, sw;

    n = sectok_apdu(fd, cla, ins, p1, p2, ilen, ibuf, olen, obuf, &sw);
    *sw1p = sectok_r1(sw);
    *sw2p = sectok_r2(sw);
    return n;
}

int
scwrite(int fd, int cla, int ins, int p1, int p2, int p3, unsigned char *buf, int *sw1p, int *sw2p)
{
    int rv;
#ifdef SCPERF
    char *scperf_buf;

    scperf_buf = malloc (64);

    snprintf (scperf_buf, 64, "scwrite (ins %02x, p3 %02x) start", ins, p3);
    SetTime(scperf_buf);
#endif /* SCPERF */
    rv = scrw(fd, cla, ins, p1, p2, p3, buf, 0, NULL, sw1p, sw2p);

#ifdef SCPERF
    SetTime("scwrite() end");
#endif /* SCPERF */
    return (rv >= 0) ? p3 : -1;
}

int
scread(int fd, int cla, int ins, int p1, int p2, int p3, unsigned char *buf, int *sw1p, int *sw2p)
{
    int rv;
#ifdef SCPERF
    char *scperf_buf;

    scperf_buf = malloc (64);

    snprintf (scperf_buf, 64, "scread (ins %02x, p3 %02x) start", ins, p3);
    SetTime(scperf_buf);
#endif /* SCPERF */
    rv = scrw(fd, cla, ins, p1, p2, 0, NULL, p3, buf, sw1p, sw2p);

#ifdef SCPERF
    SetTime("scread() end");
#endif /* SCPERF */
    return rv;
}

#ifndef __palmos__
int
parse_input(char *ibuf, unsigned char *obuf, int olen)
{
    return sectok_parse_input(ibuf, obuf, olen);
}

int
get_input(FILE *f, unsigned char *obuf, int omin, int olen)
{
    return sectok_get_input(f, obuf, omin, olen);
}
#endif

void
print_r1r2(int r1, int r2)
{
    printf("%s\n", get_r1r2s(r1, r2));
}

char *
get_r1r2s(int r1, int r2)
{
    return sectok_get_sw(sectok_mksw(r1, r2));
}

#ifndef __palmos__
int
fdump_reply(FILE *f, unsigned char *p, int n, int r1, int r2)
{
    return sectok_fdump_reply(f, p, n, sectok_mksw(r1, r2));
}

int
dump_reply(unsigned char *p, int n, int r1, int r2)
{
    return sectok_fdump_reply(stdout, p, n, sectok_mksw(r1, r2));
}
#endif
@


1.9
log
@the obvious simple snprintf changes
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.8 2001/08/02 17:02:05 rees Exp $ */
@


1.8
log
@stdio.h is evil on PalmOS
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.3 2001/08/02 16:41:32 rees Exp $ */
d159 1
a159 1
    sprintf (scperf_buf, "scwrite (ins %02x, p3 %02x) start", ins, p3);
d179 1
a179 1
    sprintf (scperf_buf, "scread (ins %02x, p3 %02x) start", ins, p3);
@


1.7
log
@PalmOS mods
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.2 2001/07/30 20:02:08 rees Exp $ */
a50 1
#endif
d53 1
@


1.6
log
@separate sectok from sc7816 and give each its own include file
change status word to a single word instead of two bytes
add sc7816 layer for backward compatibility
other minor changes
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.5 2001/06/26 16:26:14 deraadt Exp $ */
d41 8
d51 1
@


1.5
log
@compile cleanly
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.4 2001/06/12 19:35:25 rees Exp $ */
a40 2
#include <sys/types.h>
#include <sys/time.h>
a44 1
#include <dlfcn.h>
d51 1
a51 34
#include "ifdhandler.h"

#define MAX_READERS 32
#define N_DEFAULT_READERS 4

#ifdef DL_READERS
static char defaultConfigFilePath[] = "/etc/reader.conf";
static char defaultDriverPath[] = "/usr/local/pcsc/lib/libtodos_ag.so";

int DBUpdateReaders(char *readerconf, int (callback) (int rn, unsigned long channelId, char *driverFile));

/* the callback for DBUpdateReaders */
int addReader(int rn, unsigned long channelID, char *driverFile);
void *lookupSym(void *handle, char *name);
#endif

int openReader(int readerNum, int flags);

typedef struct {
    unsigned long 	channelID;
    char 		*driverPath;
    unsigned int	driverLoaded;
    /* for now, i'm only worry about the "bare essentials" */
    u_long		(*open)(unsigned long channelID);
    u_long		(*close)(void);
    u_long		(*data)(struct SCARD_IO_HEADER junk,
				unsigned char *cmdData, unsigned long cmdLen,
				unsigned char *respData, unsigned long *respLen,
				struct SCARD_IO_HEADER *moreJunk);
    u_long		(*power)(unsigned long command);
    u_long		(*getcapa)(unsigned long selector, unsigned char *buffer);
    u_long		(*setcapa)(unsigned long selector, unsigned char *buffer);
    u_long		(*cardpresent)(void);
} readerInfo;
a67 22
unsigned int numReaders;
readerInfo readers[MAX_READERS];

/* NI, 11/1/2000 : Now the body of scopen() is in scxopen() to allow
   specifing a path to the config file or the driver.  scopen() is
   an entry function for scxopen() to maintain backward compatibility. */
int
scopen(int ttyn, int flags, int *ep)
{
    return scxopen (ttyn, flags, ep, NULL, NULL);
}

/*
  if (config_path != NULL and driver_name != NULL) error;
  if (config_path != NULL) use reader.conf there;
  if (driver_path != NULL) use the specified driver;
  if (config_path == NULL and driver_path == NULL) use /etc/reader.conf;

  Note that the config file is read only once, and drivers are only loaded once,
  so config_path and driver_path are ignored on subsequent calls.
*/

d69 1
a69 1
scxopen(int ttyn, int flags, int *ep, char *config_path, char *driver_path)
d71 1
a71 27
    int r = 0;

#ifdef SCPERF
    SetTime ("scopen() start");
#endif /* SCPERF */

    if (ttyn < 0 || ttyn >= MAX_READERS) {
	r = SCENOTTY;
	goto out;
    }

#ifdef DL_READERS
    if (driver_path) {
	/* caller specified a particular driver path to use */
	if (config_path) {
	    /* but also specified a config file, which is an error. */
	    r = SCECNFFILES;
	    goto out;
	}
	if (!readers[ttyn].driverPath) {
	    /* need a driver */
	    if (addReader(ttyn, (0x10000 + ttyn), driver_path) < 0) {
		r = SCEDRVR;
		goto out;
	    }
	}
    }
d73 1
a73 20
    if (numReaders == 0) {
	/* no drivers; read the config file */
	if (!config_path)
	    config_path = defaultConfigFilePath;
	if (DBUpdateReaders(config_path, addReader) < 0) {
	    int i;

	    if (config_path != defaultConfigFilePath) {
		/* Something wrong with caller's config file path. */
		r = SCEDRVR;
		goto out;
	    }
	    /* This usually means there is no reader.conf.  Supply defaults. */
	    for (i = 0; i < N_DEFAULT_READERS; i++)
		addReader(i, (0x10000 | i), defaultDriverPath);
	}
    }
#else
    numReaders = N_DEFAULT_READERS;
#endif
d75 1
a75 1
    r = openReader(ttyn, flags);
d77 5
a81 4
    if (!r && (flags & SCODSR)) {
	/* Wait for card present */
	while (!sccardpresent(ttyn))
	    sleep(1);
d84 1
a84 8
 out:
#ifdef SCPERF
    SetTime ("scopen() end");
#endif /* SCPERF */

    if (ep)
	*ep = r;
    return r ? -1 : ttyn;
d88 1
a88 1
openReader(int readerNum, int flags)
d90 1
a90 71
    readerInfo *reader;

#ifdef DEBUG
    fprintf(stderr, "openReader %d\n", readerNum);
#endif

    if (readerNum < 0 || readerNum >= MAX_READERS)
	return SCEDRVR;
    reader = &readers[readerNum];

    if (!reader->driverLoaded) {
#ifdef DL_READERS
	void *libHandle;

	if (!reader->driverPath)
	    return SCEDRVR;
	libHandle = dlopen(reader->driverPath, RTLD_LAZY);
	if (!libHandle) {
#ifdef DEBUG
	    fprintf(stderr, "%s: %s\n", reader->driverPath, dlerror());
#endif
	    return SCEDRVR;
	}
	reader->open = lookupSym(libHandle, "IO_Create_Channel");
	if (reader->open == NULL)
	    return SCEDRVR;

	reader->close = lookupSym(libHandle, "IO_Close_Channel");
	if (reader->close == NULL)
	    return SCEDRVR;

	reader->data = lookupSym(libHandle, "IFD_Transmit_to_ICC");
	if (reader->data == NULL)
	    return SCEDRVR;

	reader->power = lookupSym(libHandle, "IFD_Power_ICC");
	if (reader->power == NULL)
	    return SCEDRVR;

	reader->getcapa = lookupSym(libHandle, "IFD_Get_Capabilities");
	if (reader->getcapa == NULL)
	    return SCEDRVR;

	reader->setcapa = lookupSym(libHandle, "IFD_Set_Capabilities");
	if (reader->setcapa == NULL)
	    return SCEDRVR;

	reader->cardpresent = lookupSym(libHandle, "IFD_Is_ICC_Present");
#else /* DL_READERS */
	reader->open = IO_Create_Channel;
	reader->close = IO_Close_Channel;
	reader->data = IFD_Transmit_to_ICC;
	reader->power = IFD_Power_ICC;
	reader->getcapa = IFD_Get_Capabilities;
	reader->setcapa = IFD_Set_Capabilities;
	reader->cardpresent = IFD_Is_ICC_Present;
	reader->channelID = (0x10000 | readerNum);
#endif /* DL_READERS */

	reader->driverLoaded = 1;
    }

    /* send flags to the driver */
    reader->setcapa(SCTAG_OPEN_FLAGS, (u_char *)&flags);
    /* if this returns an error, setcapa is not supported in this driver,
       but that's OK. */

    if (reader->open(reader->channelID))
	return SCECOMM;
    else
	return 0;
d94 1
a94 1
scclose(int ttyn)
d96 1
a96 11
    readerInfo *reader = &readers[ttyn];

    if (ttyn < 0 || ttyn >= MAX_READERS)
	return -1;

    reader = &readers[ttyn];

    if (!reader->driverLoaded)
	return -1;

    return (reader->close()) ? -1 : 0;
d100 1
a100 1
sccardpresent(int ttyn)
d102 1
a102 12
    readerInfo *reader = &readers[ttyn];
    unsigned long v;

    if (!reader->driverLoaded)
	return 0;

    if (reader->cardpresent)
	v = reader->cardpresent();
    else if (reader->getcapa(SCTAG_IFD_CARDPRESENT, (unsigned char *) &v))
	return 1;

    return (v == IFD_ICC_PRESENT || v == 0) ? 1 : 0;
d106 1
a106 1
scxreset(int ttyn, int flags, unsigned char *atr, int *ep)
d108 1
a108 17
    readerInfo *reader = &readers[ttyn];
    int n = 0, r = SCEOK;
    struct scparam param;

#ifdef SCPERF
    SetTime ("scxreset() start");
#endif /* SCPERF */

    if (!reader->driverLoaded) {
	r = SCECLOSED;
	goto out;
    }

    if (!sccardpresent(ttyn)) {
	r = SCENOCARD;
	goto out;
    }
d110 1
a110 20
    /* send flags to the driver */
    reader->setcapa(SCTAG_RESET_FLAGS, (u_char *)&flags);
    /* if this returns an error, setcapa is not supported in this driver,
       but that's OK. */

    if (reader->power(IFD_RESET)) {
#ifdef DEBUG
	fprintf(stderr, "power failed!\n");
#endif
	r = SCESLAG;
	goto out;
    }

    if (atr && reader->getcapa(TAG_IFD_ATR, atr)) {
#ifdef DEBUG
	fprintf(stderr, "reset failed!\n");
#endif
	r = SCESLAG;
	goto out;
    }
d112 7
a118 8
    if (reader->getcapa(SCTAG_IFD_ATRLEN, (unsigned char *) &n) || n <= 0) {
	/* can't get atr len, take a wild guess */
	if (atr) {
	    for (n = MAX_ATR_SIZE - 1; !atr[n]; n--)
		;
	    n--;
	} else
	    n = MAX_ATR_SIZE;
d121 1
a121 12
    if (flags & SCRV)
	parse_atr(-1, flags, atr, n, &param);

 out:
    if (ep)
	*ep = r;

#ifdef SCPERF
    SetTime ("scxreset() end");
#endif /* SCPERF */

    return n;
d125 1
a125 1
screset(int ttyn, unsigned char *atr, int *ep)
d127 1
a127 1
    return scxreset(ttyn, 0, atr, ep);
d131 1
a131 1
scrw(int ttyn, int cla, int ins, int p1, int p2, int ilen, unsigned char *ibuf, int olen, unsigned char *obuf, int *sw1p, int *sw2p)
d133 1
a133 52
    unsigned char cmd[6+255], rsp[255+2];
    unsigned long n;
    int le;
    readerInfo *reader = &readers[ttyn];
    struct SCARD_IO_HEADER garbage;

    if (reader->driverLoaded == 0)
	return SCECLOSED;

    cmd[0] = cla;
    cmd[1] = ins;
    cmd[2] = p1;
    cmd[3] = p2;

    ilen &= 0xff;
    le = (255 < olen) ? 255 : olen;

    if (ilen && ibuf) {
	/* Send "in" data */
	cmd[4] = ilen;
	memcpy(&cmd[5], ibuf, ilen);
	ilen += 5;
	if (le)
	    cmd[ilen++] = le;
	n = obuf ? sizeof rsp : 2;
	if (reader->data(garbage, cmd, ilen, rsp, &n, NULL) || n < 2)
	    return -1;
	if (rsp[n-2] == 0x61 && olen && obuf) {
	    /* Response available; get it (driver should do this but some don't) */
	    cmd[1] = 0xc0;
	    cmd[2] = cmd[3] = 0;
	    cmd[4] = rsp[n-1];
	    n = sizeof rsp;
	    if (reader->data(garbage, cmd, 5, rsp, &n, NULL))
		return -1;
	}
    } else {
	/* Get "out" data */
	cmd[4] = olen;
	n = sizeof rsp;
	if (reader->data(garbage, cmd, 5, rsp, &n, NULL))
	    return -1;
    }

    if (n >= 2) {
	*sw1p = rsp[n-2];
	*sw2p = rsp[n-1];
	n -= 2;
    }

    if (n && olen)
	memcpy(obuf, rsp, (n < olen) ? n : olen);
d135 3
d142 1
a142 1
scwrite(int ttyn, int cla, int ins, int p1, int p2, int p3, unsigned char *buf, int *sw1p, int *sw2p)
d153 1
a153 1
    rv = scrw(ttyn, cla, ins, p1, p2, p3, buf, 0, NULL, sw1p, sw2p);
d162 1
a162 1
scread(int ttyn, int cla, int ins, int p1, int p2, int p3, unsigned char *buf, int *sw1p, int *sw2p)
d173 1
a173 1
    rv = scrw(ttyn, cla, ins, p1, p2, 0, NULL, p3, buf, sw1p, sw2p);
d181 1
a181 1
#ifdef DL_READERS
d183 1
a183 1
addReader(int rn, unsigned long channelID, char *driverFile)
d185 2
a186 1
    readerInfo *reader;
d188 6
a193 2
    if (rn < 0 || rn >= MAX_READERS)
	return -1;
d195 5
a199 1
    reader = &readers[rn];
d201 5
a205 2
    if (reader->driverPath)
	return -1;
d207 5
a211 5
    reader->channelID = channelID;
    reader->driverPath = strdup(driverFile);
    reader->driverLoaded = 0;
    numReaders++;
    return 0;
d214 2
a215 2
void *
lookupSym(void *handle, char *name)
d217 2
a218 9
#ifdef __linux__
    return dlsym(handle, name);
#elif __sun
    return dlsym(handle, name);
#else
    char undername[32];

    sprintf(undername, "_%s", name);
    return dlsym(handle, undername);
a219 2
}
#endif /* DL_READERS */
@


1.4
log
@import latest from CITI:
only load drivers once
This actually "shouldn't" affect OpenBSD because it's only for DL_READERS
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.23 2001/06/11 18:35:23 rees Exp $ */
d129 1
a129 1
    int i, r = 0;
d162 2
a198 1
    void *libHandle;
d211 2
@


1.3
log
@Move copyright notice to top of file
@
text
@d1 1
a1 1
/* $Id: sc7816.c,v 1.22 2001/06/08 14:51:12 rees Exp $ */
d57 1
d61 1
d63 1
a63 1
int DBUpdateReaders(char *readerconf, void (callback) (char *name, unsigned long channelId, char *driverFile));
d66 1
a66 1
void addReader(char *name, unsigned long channelID, char *driverFile);
a116 2
  NI:

d121 3
d125 1
d127 1
a127 2
scxopen(int ttyn, int flags, int *ep,
	char *config_path, char *driver_path)
d129 1
a129 5
    int i, r;
#ifdef DL_READERS
    static char todos_driver_path[] = "/usr/local/pcsc/lib/libtodos_ag.so";
    char *configFilePath = defaultConfigFilePath;
#endif
d135 5
d141 13
a153 23
    if (config_path != NULL && driver_path != NULL) {
	/* both config path and driver path are
	   specified.  thus conflict. */
	return SCECNFFILES;
    }
    else if (config_path != NULL) {
	/* config file specified */
	configFilePath = config_path;
    }
    else if (driver_path != NULL) {
	/* driver path is specified */
	numReaders = 0;
	
	addReader(NULL, 0x10000, driver_path);
	addReader(NULL, 0x10001, driver_path);

	goto open_readers;
    }

    for (i = 0; i < numReaders; i++) {
	if (readers[i].driverPath) {
	    free(readers[i].driverPath);
	    readers[i].driverPath = NULL;
a155 1
    numReaders = 0;
d157 14
a170 4
    if (DBUpdateReaders(configFilePath, addReader) < 0) {
	/* This usually means there is no reader.conf.  Supply a default. */
	addReader(NULL, 0x10000, todos_driver_path);
	addReader(NULL, 0x10001, todos_driver_path);
d173 1
a173 1
    numReaders = 4;
a175 1
 open_readers:
a176 2
    if (ep)
	*ep = r;
d184 1
d189 2
d204 1
a204 1
    if (readerNum < 0 || readerNum >= numReaders)
d270 1
a270 1
scclose(int readerNum)
d272 1
a272 1
    readerInfo *reader = &readers[readerNum];
d274 6
a279 1
    if (reader->driverLoaded == 0)
d313 1
a313 1
    if (reader->driverLoaded == 0) {
d474 2
a475 2
void
addReader(char *name, unsigned long channelID, char *driverFile)
d479 4
a482 2
    if (numReaders >= MAX_READERS)
	return;
d484 2
a485 1
    reader = &readers[numReaders++];
d490 2
@


1.2
log
@fix compiler warnings
@
text
@d1 32
a35 2
 * See copyright notice at end of file
 *
a39 1
static char *rcsid = "$Id: sc7816.c,v 1.21 2001/06/07 16:09:21 rees Exp $";
a435 5

    /* Ihis does not free scperf.  It looks like memory leak ...
       and it is, but it is actually the right behavior.
       print_time() will print the messages later, so the buffer
       must be there. */
a455 5

    /* Ihis does not free scperf.  It looks like memory leak ...
       and it is, but it is actually the right behavior.
       print_time() will print the messages later, so the buffer
       must be there. */
a495 30

/*
copyright 2000
the regents of the university of michigan
all rights reserved

permission is granted to use, copy, create derivative works
and redistribute this software and such derivative works
for any purpose, so long as the name of the university of
michigan is not used in any advertising or publicity
pertaining to the use or distribution of this software
without specific, written prior authorization.  if the
above copyright notice or any other identification of the
university of michigan is included in any copy of any
portion of this software, then the disclaimer below must
also be included.

this software is provided as is, without representation
from the university of michigan as to its fitness for any
purpose, and without warranty by the university of
michigan of any kind, either express or implied, including
without limitation the implied warranties of
merchantability and fitness for a particular purpose. the
regents of the university of michigan shall not be liable
for any damages, including special, indirect, incidental, or
consequential damages, with respect to any claim arising
out of or in connection with the use of the software, even
if it has been or is hereafter advised of the possibility of
such damages.
*/
@


1.1
log
@libsectok for secure tokens (smartcard, iButton, etc)
@
text
@d10 1
a10 1
static char *rcsid = "$Id: sc7816.c,v 1.20 2001/06/06 22:45:53 rees Exp $";
d14 2
@

