head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.26
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.3
date	2011.07.20.21.02.51;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.20.19.28.33;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.08.19.25.31;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- Make constants const.
- Fix aliasing issue in s_frexpf.c;  spotted by gcc.  Many other
ones were fixed in NetBSD long ago, but this one was forgotten.  It
looks like recently they fixed it too.
@
text
@/*	$OpenBSD: s_cacosl.c,v 1.2 2011/07/20 19:28:33 martynas Exp $	*/

/*
 * Copyright (c) 2008 Stephen L. Moshier <steve@@moshier.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*							cacosl()
 *
 *	Complex circular arc cosine
 *
 *
 *
 * SYNOPSIS:
 *
 * long double complex cacosl();
 * long double complex z, w;
 *
 * w = cacosl( z );
 *
 *
 *
 * DESCRIPTION:
 *
 *
 * w = arccos z  =  PI/2 - arcsin z.
 *
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    DEC       -10,+10      5200      1.6e-15      2.8e-16
 *    IEEE      -10,+10     30000      1.8e-14      2.2e-15
 */

#include <complex.h>
#include <math.h>

static const long double PIO2L = 1.570796326794896619231321691639751442098585L;

long double complex
cacosl(long double complex z)
{
	long double complex w;

	w = casinl(z);
	w = (PIO2L - creall(w)) - cimagl(w) * I;
	return (w);
}
@


1.2
log
@For intermediate computations use single or extended counterparts
where appropriate, to avoid precision loss.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_cacosl.c,v 1.1 2011/07/08 19:25:31 martynas Exp $	*/
d53 1
a53 1
static long double PIO2L = 1.570796326794896619231321691639751442098585L;
@


1.1
log
@Finalize work on complex math routines, now that we have the
extended-precision support.  Mostly from Cephes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
	w = (PIO2L - creal(w)) - cimag(w) * I;
@

