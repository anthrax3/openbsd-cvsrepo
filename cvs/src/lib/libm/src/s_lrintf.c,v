head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.1.0.18
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.16
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.12
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.14
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.10
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.8
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.6
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.4
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.5;
commitid	Lp8bnB2xK76nGFvJ;

1.5
date	2011.04.20.21.32.59;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.17.13.59.54;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.10.20.42.09;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.11.25.14;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.25.20.25.41;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_lrintf.c,v 1.5 2011/04/20 21:32:59 martynas Exp $	*/
/* $NetBSD: lrintf.c,v 1.3 2004/10/13 15:18:32 drochner Exp $ */

/*-
 * Copyright (c) 2004
 *	Matthias Drochner. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/limits.h>
#include <math.h>
#include <ieeefp.h>
#include <machine/ieee.h>
#include "math_private.h"

#ifndef LRINTNAME
#define LRINTNAME lrintf
#define RESTYPE long int
#define RESTYPE_MIN LONG_MIN
#define RESTYPE_MAX LONG_MAX
#endif

#define RESTYPE_BITS (sizeof(RESTYPE) * 8)

static const float
TWO23[2]={
  8.3886080000e+06, /* 0x4b000000 */
 -8.3886080000e+06, /* 0xcb000000 */
};

RESTYPE
LRINTNAME(float x)
{
	u_int32_t i0;
	int e, s, shift;
	RESTYPE res;

	GET_FLOAT_WORD(i0, x);
	e = i0 >> SNG_FRACBITS;
	s = e >> SNG_EXPBITS;
	e = (e & 0xff) - SNG_EXP_BIAS;

	/* 1.0 x 2^31 (or 2^63) is already too large */
	if (e >= (int)RESTYPE_BITS - 1)
		return (s ? RESTYPE_MIN : RESTYPE_MAX); /* ??? unspecified */

	/* >= 2^23 is already an exact integer */
	if (e < SNG_FRACBITS) {
		volatile float t = x;	/* clip extra precision */
		/* round, using current direction */
		t += TWO23[s];
		t -= TWO23[s];
		x = t;
	}

	GET_FLOAT_WORD(i0, x);
	e = ((i0 >> SNG_FRACBITS) & 0xff) - SNG_EXP_BIAS;
	i0 &= 0x7fffff;
	i0 |= (1 << SNG_FRACBITS);

	if (e < 0)
		return (0);

	shift = e - SNG_FRACBITS;
	if (shift >=0)
		res = (shift < RESTYPE_BITS ? (RESTYPE)i0 << shift : 0);
	else
		res = (shift > -RESTYPE_BITS ? (RESTYPE)i0 >> -shift : 0);

	return (s ? -res : res);
}
DEF_STD(LRINTNAME);
@


1.5
log
@Trick GCC optimizer into clipping any extra precision by making w
volatile;  a similar hack was already being used in lrintf().

This will make rint and {,l}lrint family functions actually work;
i.e. on m68k rintf(8.6F) was 8.625.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrintf.c,v 1.4 2011/04/17 13:59:54 martynas Exp $	*/
d93 1
@


1.4
log
@The {,l}lround{,f} implementations are based on {,l}lrint{,f},
therefore affected by the same bugs I've fixed a week ago.

The high part was being clipped for all exponents greater or equal
to 52.  Fix this to use RESTYPE_BITS instead;  also make the code
consistent.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrintf.c,v 1.3 2011/04/10 20:42:09 martynas Exp $	*/
d70 1
a70 1
		volatile float t = x; /* work around gcc problem */
@


1.3
log
@The {,l}lrint{,f} functions avoid to shift results by more than 31
bits, because "behavior is implementation defined in this case".
However, this is wrong;  behavior is undefined if the right operand
is greater than or equal to the width of the promoted left operand.

This broke {,l}lrint{,f} (64-bit architectures), and llrint{,f}
(32-bit architectures) where results are actually 64-bit values.
The high part was clipped for all exponents greater or equal to 52.

Fix this to use RESTYPE_BITS instead;  {,l}lrint{,f} are now able
to pass our regression tests, and I think are right now.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrintf.c,v 1.2 2011/04/10 11:25:14 martynas Exp $	*/
d89 1
a89 1
		res = (shift > -RESTYPE_BITS ? i0 >> -shift : 0);
@


1.2
log
@The assumption that |1.0 * 2^exp| = 0, exp < -1 cannot be made when
we round towards -inf or +inf.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrintf.c,v 1.1 2006/09/25 20:25:41 kettenis Exp $	*/
d87 1
a87 1
		res = (shift < 32 ? (RESTYPE)i0 << shift : 0);
d89 1
a89 1
		res = (shift > -32 ? i0 >> -shift : 0);
@


1.1
log
@Move llrint.c, llrintf.c, lrint.c and lrintf.c to s_llrint.c, s_llrintf.c,
s_lrint.c and s_lrintf.c, and add i387-specific assembler versions.

ok deraadt@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lrintf.c,v 1.2 2005/11/17 20:51:56 otto Exp $	*/
a63 3
	/* 1.0 x 2^-1 is the smallest number which can be rounded to 1 */
	if (e < -1)
		return (0);
d81 3
@

