head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2015.08.12.19.19.12;	author naddy;	state Exp;
branches;
next	1.2;
commitid	miS3rng0kAlueSHo;

1.2
date	2011.07.25.16.20.09;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.06.00.02.42;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix a case where ceill() returns 1.0L: in the x86 extended precision format
the fraction part has no implicit bit
ok deraadt@@
@
text
@/* @@(#)s_ceil.c 5.1 93/09/24 */
/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 */

/*
 * ceill(x)
 * Return x rounded toward -inf to integral value
 * Method:
 *	Bit twiddling.
 * Exception:
 *	Inexact flag raised if x not equal to ceil(x).
 */

#include <math.h>

#include "math_private.h"

static const long double huge = 1.0e4930L;

long double
ceill(long double x)
{
	int32_t i1,jj0;
	u_int32_t i,j,se,i0,sx;
	GET_LDOUBLE_WORDS(se,i0,i1,x);
	sx = (se>>15)&1;
	jj0 = (se&0x7fff)-0x3fff;
	if(jj0<31) {
	    if(jj0<0) {	/* raise inexact if x != 0 */
		if(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */
		    if(sx) {se=0x8000;i0=0;i1=0;}
		    else if((i0|i1)!=0) { se=0x3fff;i0=0x80000000;i1=0;}
		}
	    } else {
		i = (0x7fffffff)>>jj0;
		if(((i0&i)|i1)==0) return x; /* x is integral */
		if(huge+x>0.0) {	/* raise inexact flag */
		    if(sx==0) {
			if (jj0>0 && (i0+(0x80000000>>jj0))>i0)
			  i0+=0x80000000>>jj0;
			else
			  {
			    i = 0x7fffffff;
			    ++se;
			  }
		    }
		    i0 &= (~i); i1=0;
		}
	    }
	} else if (jj0>62) {
	    if(jj0==0x4000) return x+x;	/* inf or NaN */
	    else return x;		/* x is integral */
	} else {
	    i = ((u_int32_t)(0xffffffff))>>(jj0-31);
	    if((i1&i)==0) return x;	/* x is integral */
	    if(huge+x>0.0) {		/* raise inexact flag */
		if(sx==0) {
		    if(jj0==31) i0+=1;
		    else {
			j = i1 + (1<<(63-jj0));
			if(j<i1) i0+=1;	/* got a carry */
			i1 = j;
		    }
		}
		i1 &= (~i);
	    }
	}
	SET_LDOUBLE_WORDS(x,se,i0,i1);
	return x;
}
@


1.2
log
@Make huge constants actually long, so they don't overflow and become
infinite.
@
text
@d40 1
a40 1
		    else if((i0|i1)!=0) { se=0x3fff;i0=0;i1=0;}
@


1.1
log
@Finalize work on the math library.  It's time to do this monster
commit, and deal with problems (if any) in tree.

Note that this adds the following functions.  Ports with hacks might
need adjustments.

nexttoward(3), fma(3), nexttowardf(3), fmaf(3), acoshl(3), asinhl(3),
atanhl(3), coshl(3), sinhl(3), tanhl(3), expl(3), expm1l(3), logl(3),
log10l(3), log1pl(3), log2l(3), modfl(3), cbrtl(3), hypotl(3),
powl(3), erfl(3), erfcl(3), lgammal(3), tgammal(3), ceill(3),
floorl(3), lrintl(3), llrintl(3), roundl(3), lroundl(3), llroundl(3),
truncl(3), fmodl(3), remainderl(3), remquol(3), nextafterl(3),
nexttowardl(3), fmal(3).

With this commit, our library implements all functionality required
by C99.  Documentation bits will follow.
@
text
@d26 1
a26 1
static const long double huge = 1.0e4930;
d31 1
a31 1
	int32_t i1,j0;
d35 3
a37 3
	j0 = (se&0x7fff)-0x3fff;
	if(j0<31) {
	    if(j0<0) {	/* raise inexact if x != 0 */
d43 1
a43 1
		i = (0x7fffffff)>>j0;
d47 2
a48 2
			if (j0>0 && (i0+(0x80000000>>j0))>i0)
			  i0+=0x80000000>>j0;
d58 2
a59 2
	} else if (j0>62) {
	    if(j0==0x4000) return x+x;	/* inf or NaN */
d62 1
a62 1
	    i = ((u_int32_t)(0xffffffff))>>(j0-31);
d66 1
a66 1
		    if(j0==31) i0+=1;
d68 1
a68 1
			j = i1 + (1<<(63-j0));
@

