head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.01.20.23.19.07;	author krw;	state Exp;
branches;
next	1.7;
commitid	R9YDwHsbuEglhVP9;

1.7
date	2016.09.12.19.47.03;	author guenther;	state Exp;
branches;
next	1.6;
commitid	Lp8bnB2xK76nGFvJ;

1.6
date	2015.07.19.17.31.47;	author martynas;	state Exp;
branches;
next	1.5;
commitid	1vabi0LLlZzYHVTA;

1.5
date	2014.06.05.08.21.30;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	gJDduSkjgmBCOSON;

1.4
date	2013.11.12.21.07.28;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.05.23.20.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.06.00.02.42;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Implement gcc suggestion of extra parentheses. No functional change.

ok guenther@@
@
text
@/* @@(#)s_nextafter.c 5.1 93/09/24 */
/*
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 */

/* IEEE functions
 *	nextafterl(x,y)
 *	return the next machine floating-point number of x in the
 *	direction toward y.
 *   Special cases:
 */

#include <math.h>

#include "math_private.h"

long double
nextafterl(long double x, long double y)
{
	int32_t hx,hy,ix,iy;
	u_int32_t lx,ly;
	int32_t esx,esy;

	GET_LDOUBLE_WORDS(esx,hx,lx,x);
	GET_LDOUBLE_WORDS(esy,hy,ly,y);
	ix = esx&0x7fff;		/* |x| */
	iy = esy&0x7fff;		/* |y| */

	if (((ix==0x7fff)&&(((hx&0x7fffffff)|lx)!=0)) ||   /* x is nan */
	    ((iy==0x7fff)&&(((hy&0x7fffffff)|ly)!=0)))     /* y is nan */
	   return x+y;
	if(x==y) return y;		/* x=y, return y */
	if((ix|hx|lx)==0) {			/* x == 0 */
	    volatile long double u;
	    SET_LDOUBLE_WORDS(x,esy&0x8000,0,1);/* return +-minsubnormal */
	    u = x;
	    u = u * u;				/* raise underflow flag */
	    return x;
	}
	if(esx>=0) {			/* x > 0 */
	    if(esx>esy||((esx==esy) && (hx>hy||((hx==hy)&&(lx>ly))))) {
	      /* x > y, x -= ulp */
		if(lx==0) {
		    if ((hx&0x7fffffff)==0) esx -= 1;
		    hx = (hx - 1) | (hx & 0x80000000);
		}
		lx -= 1;
	    } else {				/* x < y, x += ulp */
		lx += 1;
		if(lx==0) {
		    hx = (hx + 1) | (hx & 0x80000000);
		    if ((hx&0x7fffffff)==0) esx += 1;
		}
	    }
	} else {				/* x < 0 */
	    if(esy>=0||(esx>esy||((esx==esy)&&(hx>hy||((hx==hy)&&(lx>ly)))))){
	      /* x < y, x -= ulp */
		if(lx==0) {
		    if ((hx&0x7fffffff)==0) esx -= 1;
		    hx = (hx - 1) | (hx & 0x80000000);
		}
		lx -= 1;
	    } else {				/* x > y, x += ulp */
		lx += 1;
		if(lx==0) {
		    hx = (hx + 1) | (hx & 0x80000000);
		    if ((hx&0x7fffffff)==0) esx += 1;
		}
	    }
	}
	esy = esx&0x7fff;
	if(esy==0x7fff) return x+x;		/* overflow  */
	if(esy==0) {
	    volatile long double u = x*x;	/* underflow */
	    if(u==x) {
		SET_LDOUBLE_WORDS(x,esx,hx,lx);
		return x;
	    }
	}
	SET_LDOUBLE_WORDS(x,esx,hx,lx);
	return x;
}
DEF_STD(nextafterl);
MAKE_UNUSED_CLONE(nexttowardl, nextafterl);
@


1.7
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@d36 2
a37 2
	if (((ix==0x7fff)&&((hx&0x7fffffff|lx)!=0)) ||   /* x is nan */
	    ((iy==0x7fff)&&((hy&0x7fffffff|ly)!=0)))     /* y is nan */
@


1.6
log
@Make exponents of x and y signed and fix esx and esy
comparisons.  The offending input in gfortran's round_4.f90 was
nextafterl(0.10000000000000000000135525271560688L, -INFINITY) which
caused an ulp addition rather than subtraction.
Reported by John Marino @@ DragonFlyBSD.
@
text
@d90 2
a91 2

__strong_alias(nexttowardl, nextafterl);
@


1.5
log
@Extended precision floating-point numbers have an explicit integer part bit.
Correctly account for this bit, otherwise we'll get the wrong result for some
inputs.

ok martynas@@, daniel@@
@
text
@d28 2
a29 1
	u_int32_t lx,ly,esx,esy;
d47 2
a48 2
	if(esx<0x8000) {			/* x > 0 */
	    if(ix>iy||((ix==iy) && (hx>hy||((hx==hy)&&(lx>ly))))) {
d63 1
a63 1
	    if(esy>=0||(ix>iy||((ix==iy)&&(hx>hy||((hx==hy)&&(lx>ly)))))){
@


1.4
log
@Trick the compiler that volatile temporary is used while raising
the underflow.
@
text
@d35 2
a36 2
	if (((ix==0x7fff)&&((hx|lx)!=0)) ||   /* x is nan */
	    ((iy==0x7fff)&&((hy|ly)!=0)))     /* y is nan */
d50 2
a51 2
		    if (hx==0) esx -= 1;
		    hx -= 1;
d57 2
a58 3
		    hx += 1;
		    if (hx==0)
			esx += 1;
d65 2
a66 2
		    if (hx==0) esx -= 1;
		    hx -= 1;
d72 2
a73 2
		    hx += 1;
		    if (hx==0) esx += 1;
@


1.3
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d82 4
@


1.2
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d87 1
a87 1
__weak_alias(nexttowardl, nextafterl);
@


1.1
log
@Finalize work on the math library.  It's time to do this monster
commit, and deal with problems (if any) in tree.

Note that this adds the following functions.  Ports with hacks might
need adjustments.

nexttoward(3), fma(3), nexttowardf(3), fmaf(3), acoshl(3), asinhl(3),
atanhl(3), coshl(3), sinhl(3), tanhl(3), expl(3), expm1l(3), logl(3),
log10l(3), log1pl(3), log2l(3), modfl(3), cbrtl(3), hypotl(3),
powl(3), erfl(3), erfcl(3), lgammal(3), tgammal(3), ceill(3),
floorl(3), lrintl(3), llrintl(3), roundl(3), lroundl(3), llroundl(3),
truncl(3), fmodl(3), remainderl(3), remquol(3), nextafterl(3),
nexttowardl(3), fmal(3).

With this commit, our library implements all functionality required
by C99.  Documentation bits will follow.
@
text
@a19 1
#include <sys/cdefs.h>
@

