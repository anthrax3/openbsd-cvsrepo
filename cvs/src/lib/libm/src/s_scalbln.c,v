head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.32
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.28
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.24
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.26
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.22
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.20
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2009.07.25.11.38.10;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@int is big enough to fully represent exponents of all supported fp
formats.  which even for 80-bit & 128-bit long doubles is only 15
bits.  therefore, scalbln, scalblnf, scalblnl are essentially the
same as scalbn, scalbnf, scalbnl with bounds checking so that
LONG_MIN..INT_MIN, and INT_MAX..LONG_MAX ranges properly raise
exceptions & yield correct values.  looks good to millert@@
@
text
@/*	$OpenBSD$	*/

/*
 * Written by Martynas Venckus.  Public domain
 */

#include <limits.h>
#include <math.h>

double
scalbln(double x, long n)
{
	if (n < INT_MIN)
		return scalbn(x, INT_MIN);
	else if (n > INT_MAX)
		return scalbn(x, INT_MAX);
	else
		return scalbn(x, (int)n);
}

float
scalblnf(float x, long n)
{
	if (n < INT_MIN)
		return scalbnf(x, INT_MIN);
	else if (n > INT_MAX)
		return scalbnf(x, INT_MAX);
	else
		return scalbnf(x, (int)n);
}

long double
scalblnl(long double x, long n)
{
	if (n < INT_MIN)
		return scalbnl(x, INT_MIN);
	else if (n > INT_MAX)
		return scalbnl(x, INT_MAX);
	else
		return scalbnl(x, (int)n);
}

@
