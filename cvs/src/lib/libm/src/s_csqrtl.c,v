head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.3;
commitid	Lp8bnB2xK76nGFvJ;

1.3
date	2015.12.18.12.10.30;	author shadchin;	state Exp;
branches;
next	1.2;
commitid	JA2k8S09hHot8xRi;

1.2
date	2011.07.20.19.28.33;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.08.19.25.31;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_csqrtl.c,v 1.3 2015/12/18 12:10:30 shadchin Exp $	*/

/*
 * Copyright (c) 2008 Stephen L. Moshier <steve@@moshier.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*							csqrtl()
 *
 *	Complex square root
 *
 *
 *
 * SYNOPSIS:
 *
 * long double complex csqrtl();
 * long double complex z, w;
 *
 * w = csqrtl( z );
 *
 *
 *
 * DESCRIPTION:
 *
 *
 * If z = x + iy,  r = |z|, then
 *
 *                       1/2
 * Re w  =  [ (r + x)/2 ]   ,
 *
 *                       1/2
 * Im w  =  [ (r - x)/2 ]   .
 *
 * Cancellation error in r-x or r+x is avoided by using the
 * identity  2 Re w Im w  =  y.
 *
 * Note that -w is also a square root of z.  The root chosen
 * is always in the right half plane and Im w has the same sign as y.
 *
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    IEEE      -10,+10     500000      1.1e-19     3.0e-20
 *
 */

#include <complex.h>
#include <math.h>

long double complex
csqrtl(long double complex z)
{
	long double complex w;
	long double x, y, r, t, scale;

	x = creall(z);
	y = cimagl(z);

	if (y == 0.0L) {
		if (x < 0.0L) {
			w = 0.0L + copysign(sqrtl(-x), y) * I;
			return (w);
		}
		else {
			w = sqrtl(x) + 0.0L * I;
			return (w);
		}
	}

	if (x == 0.0L) {
		r = fabsl(y);
		r = sqrtl(0.5L * r);
		if (y > 0.0L)
			w = r + r * I;
		else
			w = r - r * I;
		return (w);
	}

	/* Rescale to avoid internal overflow or underflow.  */
	if ((fabsl(x) > 4.0L) || (fabsl(y) > 4.0L)) {
		x *= 0.25L;
		y *= 0.25L;
		scale = 2.0L;
	}
	else {
#if 1
		x *= 7.3786976294838206464e19;  /* 2^66 */
		y *= 7.3786976294838206464e19;
		scale = 1.16415321826934814453125e-10;  /* 2^-33 */
#else
		x *= 4.0L;
		y *= 4.0L;
		scale = 0.5L;
#endif
	}
	w = x + y * I;
	r = cabsl(w);
	if (x > 0) {
		t = sqrtl(0.5L * r + 0.5L * x);
		r = scale * fabsl((0.5L * y) / t);
		t *= scale;
	}
	else {
		r = sqrtl(0.5L * r - 0.5L * x);
		t = scale * fabsl((0.5L * y) / r);
		r *= scale;
	}
	if (y < 0)
		w = t - r * I;
	else
		w = t + r * I;
	return (w);
}
DEF_STD(csqrtl);
@


1.3
log
@Fix behavior csqrt, should be
 csqrt(conj(z)) == conj(csqrt(z))

Before
 csqrt(-4.0 + -0.0i) = 0.0 + 2.0j
but should be
 csqrt(-4.0 + -0.0i) = 0.0 - 2.0j

ok tb@@, also discussed with daniel@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_csqrtl.c,v 1.2 2011/07/20 19:28:33 martynas Exp $	*/
d129 1
@


1.2
log
@For intermediate computations use single or extended counterparts
where appropriate, to avoid precision loss.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_csqrtl.c,v 1.1 2011/07/08 19:25:31 martynas Exp $	*/
d75 1
a75 1
			w = 0.0L + sqrtl(-x) * I;
@


1.1
log
@Finalize work on complex math routines, now that we have the
extended-precision support.  Mostly from Cephes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 2
a71 2
	x = creal(z);
	y = cimag(z);
@

