head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.4;
commitid	Lp8bnB2xK76nGFvJ;

1.4
date	2015.12.18.12.17.44;	author shadchin;	state Exp;
branches;
next	1.3;
commitid	9ArpvJr7Tl81U3YG;

1.3
date	2011.07.20.21.02.51;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.20.19.28.33;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.08.19.25.31;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_casinl.c,v 1.4 2015/12/18 12:17:44 shadchin Exp $	*/

/*
 * Copyright (c) 2008 Stephen L. Moshier <steve@@moshier.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*							casinl()
 *
 *	Complex circular arc sine
 *
 *
 *
 * SYNOPSIS:
 *
 * long double complex casinl();
 * long double complex z, w;
 *
 * w = casinl( z );
 *
 *
 *
 * DESCRIPTION:
 *
 * Inverse complex sine:
 *
 *                               2
 * w = -i clog( iz + csqrt( 1 - z ) ).
 *
 *
 * ACCURACY:
 *
 *                      Relative error:
 * arithmetic   domain     # trials      peak         rms
 *    DEC       -10,+10     10100       2.1e-15     3.4e-16
 *    IEEE      -10,+10     30000       2.2e-14     2.7e-15
 * Larger relative error can be observed for z near zero.
 * Also tested by csin(casin(z)) = z.
 */

#include <complex.h>
#include <float.h>
#include <math.h>

#if	LDBL_MANT_DIG == 64
static const long double MACHEPL= 5.42101086242752217003726400434970855712890625E-20L;
#elif	LDBL_MANT_DIG == 113
static const long double MACHEPL = 9.629649721936179265279889712924636592690508e-35L;
#endif

static const long double PIO2L = 1.570796326794896619231321691639751442098585L;

long double complex
casinl(long double complex z)
{
	long double complex w;
	long double x, y, b;
	static long double complex ca, ct, zz, z2;

	x = creall(z);
	y = cimagl(z);

#if 0
	if (y == 0.0L) {
		if (fabsl(x) > 1.0L) {
			w = PIO2L + 0.0L * I;
			/*mtherr( "casinl", DOMAIN );*/
		}
		else {
			w = asinl(x) + 0.0L * I;
		}
		return (w);
	}
#endif

	/* Power series expansion */
	b = cabsl(z);
	if (b < 0.125L) {
		long double complex sum;
		long double n, cn;

		z2 = (x - y) * (x + y) + (2.0L * x * y) * I;
		cn = 1.0L;
		n = 1.0L;
		ca = x + y * I;
		sum = x + y * I;
		do {
			ct = z2 * ca;
			ca = ct;

			cn *= n;
			n += 1.0L;
			cn /= n;
			n += 1.0L;
			b = cn/n;

			ct *= b;
			sum += ct;
			b = cabsl(ct);
		}

		while (b > MACHEPL);
		w = sum;
		return w;
	}

	ca = x + y * I;
	ct = ca * I;	/* iz */
	/* sqrt(1 - z*z) */
	/* cmul(&ca, &ca, &zz) */
	/* x * x  -  y * y */
	zz = (x - y) * (x + y) + (2.0L * x * y) * I;
	zz = 1.0L - creall(zz) - cimagl(zz) * I;
	z2 = csqrtl(zz);

	zz = ct + z2;
	zz = clogl(zz);
	/* multiply by 1/i = -i */
	w = zz * (-1.0L * I);
	return (w);
}
DEF_STD(casinl);
@


1.4
log
@Fix wrong answer if the imaginary part is zero.
NetBSD also turn off this piece of code.

ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_casinl.c,v 1.3 2011/07/20 21:02:51 martynas Exp $	*/
d133 1
@


1.3
log
@- Make constants const.
- Fix aliasing issue in s_frexpf.c;  spotted by gcc.  Many other
ones were fixed in NetBSD long ago, but this one was forgotten.  It
looks like recently they fixed it too.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_casinl.c,v 1.2 2011/07/20 19:28:33 martynas Exp $	*/
d74 1
d85 1
@


1.2
log
@For intermediate computations use single or extended counterparts
where appropriate, to avoid precision loss.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_casinl.c,v 1.1 2011/07/08 19:25:31 martynas Exp $	*/
d57 1
a57 1
static long double MACHEPL= 5.42101086242752217003726400434970855712890625E-20L;
d59 1
a59 1
static long double MACHEPL = 9.629649721936179265279889712924636592690508e-35L;
d62 1
a62 1
static long double PIO2L = 1.570796326794896619231321691639751442098585L;
@


1.1
log
@Finalize work on complex math routines, now that we have the
extended-precision support.  Mostly from Cephes.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 2
a72 2
	x = creal(z);
	y = cimag(z);
d122 1
a122 1
	zz = 1.0L - creal(zz) - cimag(zz) * I;
@

