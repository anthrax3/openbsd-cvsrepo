head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.10;
commitid	Lp8bnB2xK76nGFvJ;

1.10
date	2013.11.12.18.28.02;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.03.04.46.36;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2013.01.13.03.45.00;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2012.12.05.23.20.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.30.18.34.38;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.10.01.08.24;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.11.19.18.12;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.07.20.36.09;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_fmax.c,v 1.10 2013/11/12 18:28:02 martynas Exp $	*/
/*-
 * Copyright (c) 2004 David Schultz <das@@FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <float.h>
#include <math.h>

double
fmax(double x, double y)
{
	/* Check for NaNs to avoid raising spurious exceptions. */
	if (isnan(x))
		return (y);
	if (isnan(y))
		return (x);

	/* Handle comparisons of signed zeroes. */
	if (signbit(x) != signbit(y)) {
		if (signbit(x))
			return (y);
		else
			return (x);
	}

	return (x > y ? x : y);
}
DEF_STD(fmax);
LDBL_MAYBE_UNUSED_CLONE(fmax);
@


1.10
log
@Add explicit braces to avoid ambiguous else.  Pointed out by theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.9 2013/07/03 04:46:36 espie Exp $	*/
d50 2
a51 4

#if	LDBL_MANT_DIG == DBL_MANT_DIG
__strong_alias(fmaxl, fmax);
#endif	/* LDBL_MANT_DIG == DBL_MANT_DIG */
@


1.9
log
@test LDBL_MANT_DIG == DBL_MANT_DIG instead of hardcoding 53.
-> test becomes meaningful on vax
No actual change, no bump
okay martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.8 2013/03/28 18:09:38 martynas Exp $	*/
d41 1
a41 1
	if (signbit(x) != signbit(y))
d46 1
@


1.8
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.7 2013/01/13 03:45:00 martynas Exp $	*/
d50 1
a50 1
#if	LDBL_MANT_DIG == 53
d52 1
a52 1
#endif	/* LDBL_MANT_DIG == 53 */
@


1.7
log
@Get rid of the very ugly lint workarounds: LINTLIBRARY, PROTOLIB,
and a few empty files for lint to chew on.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.6 2012/12/05 23:20:04 deraadt Exp $	*/
d51 1
a51 1
__weak_alias(fmaxl, fmax);
@


1.6
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.5 2011/05/30 18:34:38 martynas Exp $	*/
a27 2
/* LINTLIBRARY */

a50 4
#ifdef	lint
/* PROTOLIB1 */
long double fmaxl(long double, long double);
#else	/* lint */
a51 1
#endif	/* lint */
@


1.5
log
@Trick lint into recording the right prototypes in the llib-lm.ln
database on platforms without extended-precision floating-point
support.

Seems like a reasonable approach to millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.4 2008/12/10 01:08:24 martynas Exp $	*/
a29 1
#include <sys/cdefs.h>
@


1.4
log
@use sys/cdefs.h;  pointed out by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.3 2008/12/09 20:00:35 martynas Exp $	*/
d28 2
d53 5
a57 2
#if LDBL_MANT_DIG == 53
#ifdef __weak_alias
d59 2
a60 2
#endif /* __weak_alias */
#endif /* LDBL_MANT_DIG == 53 */
@


1.3
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.2 2008/09/11 19:18:12 martynas Exp $	*/
d28 1
a28 1
#include <machine/cdefs.h>
@


1.2
log
@- make much more readable: don't reimplement isnan, signbit each
time we need them
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_fmax.c,v 1.1 2008/09/07 20:36:09 martynas Exp $	*/
d28 2
d50 6
@


1.1
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a27 2
#include <sys/types.h>
#include <machine/ieee.h>
a32 3
	struct ieee_double *px = (struct ieee_double *)&x;
	struct ieee_double *py = (struct ieee_double *)&y;

d34 1
a34 2
	if (px->dbl_exp == DBL_EXP_INFNAN &&
	    (px->dbl_frach | px->dbl_fracl) != 0)
d36 1
a36 2
	if (py->dbl_exp == DBL_EXP_INFNAN &&
	    (py->dbl_frach | py->dbl_fracl) != 0)
d40 5
a44 6
	if (px->dbl_sign != py->dbl_sign &&
	    px->dbl_sign == 1)
		return (y);
	if (px->dbl_sign != py->dbl_sign &&
	    px->dbl_sign == 0)
		return (x);
@

