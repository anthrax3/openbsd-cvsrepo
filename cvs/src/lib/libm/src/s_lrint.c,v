head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.2
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.14
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.1.0.18
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.16
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.12
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.14
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.10
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.8
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.6
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.4
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.10;
commitid	Lp8bnB2xK76nGFvJ;

1.10
date	2013.07.03.04.46.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.13.03.45.00;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.06.00.02.42;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.20.21.32.59;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.17.13.59.54;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.10.20.42.09;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.10.11.35.01;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.10.11.25.14;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.25.20.25.41;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_lrint.c,v 1.10 2013/07/03 04:46:36 espie Exp $	*/
/* $NetBSD: lrint.c,v 1.3 2004/10/13 15:18:32 drochner Exp $ */

/*-
 * Copyright (c) 2004
 *	Matthias Drochner. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/limits.h>
#include <float.h>
#include <math.h>
#include <ieeefp.h>
#include <machine/ieee.h>

#include "math_private.h"

#ifndef LRINTNAME
#define LRINTNAME lrint
#define RESTYPE long int
#define RESTYPE_MIN LONG_MIN
#define RESTYPE_MAX LONG_MAX
#endif

#define RESTYPE_BITS (sizeof(RESTYPE) * 8)

static const double
TWO52[2]={
  4.50359962737049600000e+15, /* 0x43300000, 0x00000000 */
 -4.50359962737049600000e+15, /* 0xC3300000, 0x00000000 */
};

RESTYPE
LRINTNAME(double x)
{
	u_int32_t i0, i1;
	int e, s, shift;
	RESTYPE res;

	GET_HIGH_WORD(i0, x);
	e = i0 >> DBL_FRACHBITS;
	s = e >> DBL_EXPBITS;
	e = (e & 0x7ff) - DBL_EXP_BIAS;

	/* 1.0 x 2^31 (or 2^63) is already too large */
	if (e >= (int)RESTYPE_BITS - 1)
		return (s ? RESTYPE_MIN : RESTYPE_MAX); /* ??? unspecified */

	/* >= 2^52 is already an exact integer */
	if (e < DBL_FRACBITS) {
		volatile double t = x;	/* clip extra precision */
		/* round, using current direction */
		t += TWO52[s];
		t -= TWO52[s];
		x = t;
	}

	EXTRACT_WORDS(i0, i1, x);
	e = ((i0 >> DBL_FRACHBITS) & 0x7ff) - DBL_EXP_BIAS;
	i0 &= 0xfffff;
	i0 |= (1 << DBL_FRACHBITS);

	if (e < 0)
		return (0);

	shift = e - DBL_FRACBITS;
	if (shift >=0)
		res = (shift < RESTYPE_BITS ? (RESTYPE)i1 << shift : 0);
	else
		res = (shift > -RESTYPE_BITS ? (RESTYPE)i1 >> -shift : 0);
	shift += 32;
	if (shift >=0)
		res |= (shift < RESTYPE_BITS ? (RESTYPE)i0 << shift : 0);
	else
		res |= (shift > -RESTYPE_BITS ? (RESTYPE)i0 >> -shift : 0);

	return (s ? -res : res);
}
DEF_STD(LRINTNAME);
LDBL_MAYBE_CLONE(LRINTNAME);
@


1.10
log
@test LDBL_MANT_DIG == DBL_MANT_DIG instead of hardcoding 53.
-> test becomes meaningful on vax
No actual change, no bump
okay martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.9 2013/03/28 18:09:38 martynas Exp $	*/
d100 2
a101 4

#if	LDBL_MANT_DIG == DBL_MANT_DIG
__strong_alias(lrintl, lrint);
#endif	/* LDBL_MANT_DIG == DBL_MANT_DIG */
@


1.9
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.8 2013/01/13 03:45:00 martynas Exp $	*/
d101 1
a101 1
#if	LDBL_MANT_DIG == 53
d103 1
a103 1
#endif	/* LDBL_MANT_DIG == 53 */
@


1.8
log
@Get rid of the very ugly lint workarounds: LINTLIBRARY, PROTOLIB,
and a few empty files for lint to chew on.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.7 2011/07/06 00:02:42 martynas Exp $	*/
d102 1
a102 1
__weak_alias(lrintl, lrint);
@


1.7
log
@Finalize work on the math library.  It's time to do this monster
commit, and deal with problems (if any) in tree.

Note that this adds the following functions.  Ports with hacks might
need adjustments.

nexttoward(3), fma(3), nexttowardf(3), fmaf(3), acoshl(3), asinhl(3),
atanhl(3), coshl(3), sinhl(3), tanhl(3), expl(3), expm1l(3), logl(3),
log10l(3), log1pl(3), log2l(3), modfl(3), cbrtl(3), hypotl(3),
powl(3), erfl(3), erfcl(3), lgammal(3), tgammal(3), ceill(3),
floorl(3), lrintl(3), llrintl(3), roundl(3), lroundl(3), llroundl(3),
truncl(3), fmodl(3), remainderl(3), remquol(3), nextafterl(3),
nexttowardl(3), fmal(3).

With this commit, our library implements all functionality required
by C99.  Documentation bits will follow.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.6 2011/04/20 21:32:59 martynas Exp $	*/
a29 2
/* LINTLIBRARY */

a101 4
#ifdef	lint
/* PROTOLIB1 */
long int lrintl(long double);
#else	/* lint */
a102 1
#endif	/* lint */
@


1.6
log
@Trick GCC optimizer into clipping any extra precision by making w
volatile;  a similar hack was already being used in lrintf().

This will make rint and {,l}lrint family functions actually work;
i.e. on m68k rintf(8.6F) was 8.625.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.5 2011/04/17 13:59:54 martynas Exp $	*/
d30 2
d34 1
d38 1
d102 9
@


1.5
log
@The {,l}lround{,f} implementations are based on {,l}lrint{,f},
therefore affected by the same bugs I've fixed a week ago.

The high part was being clipped for all exponents greater or equal
to 52.  Fix this to use RESTYPE_BITS instead;  also make the code
consistent.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.4 2011/04/10 20:42:09 martynas Exp $	*/
d70 1
d72 3
a74 2
		x += TWO52[s];
		x -= TWO52[s];
@


1.4
log
@The {,l}lrint{,f} functions avoid to shift results by more than 31
bits, because "behavior is implementation defined in this case".
However, this is wrong;  behavior is undefined if the right operand
is greater than or equal to the width of the promoted left operand.

This broke {,l}lrint{,f} (64-bit architectures), and llrint{,f}
(32-bit architectures) where results are actually 64-bit values.
The high part was clipped for all exponents greater or equal to 52.

Fix this to use RESTYPE_BITS instead;  {,l}lrint{,f} are now able
to pass our regression tests, and I think are right now.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.3 2011/04/10 11:35:01 martynas Exp $	*/
d87 1
a87 1
		res = (shift > -RESTYPE_BITS ? i1 >> -shift : 0);
d92 1
a92 1
		res |= (shift > -RESTYPE_BITS ? i0 >> -shift : 0);
@


1.3
log
@20 -> DBL_FRACHBITS
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.2 2011/04/10 11:25:14 martynas Exp $	*/
d85 1
a85 1
		res = (shift < 32 ? (RESTYPE)i1 << shift : 0);
d87 1
a87 1
		res = (shift > -32 ? i1 >> -shift : 0);
d90 1
a90 1
		res |= (shift < 32 ? (RESTYPE)i0 << shift : 0);
d92 1
a92 1
		res |= (shift > -32 ? i0 >> -shift : 0);
@


1.2
log
@The assumption that |1.0 * 2^exp| = 0, exp < -1 cannot be made when
we round towards -inf or +inf.
@
text
@d1 1
a1 1
/*	$OpenBSD: s_lrint.c,v 1.1 2006/09/25 20:25:41 kettenis Exp $	*/
d60 1
a60 1
	e = i0 >> 20;
d76 1
a76 1
	e = ((i0 >> 20) & 0x7ff) - DBL_EXP_BIAS;
d78 1
a78 1
	i0 |= (1 << 20);
@


1.1
log
@Move llrint.c, llrintf.c, lrint.c and lrintf.c to s_llrint.c, s_llrintf.c,
s_lrint.c and s_lrintf.c, and add i387-specific assembler versions.

ok deraadt@@, otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lrint.c,v 1.1 2005/11/17 20:07:40 otto Exp $	*/
a63 3
	/* 1.0 x 2^-1 is the smallest number which can be rounded to 1 */
	if (e < -1)
		return (0);
d79 3
@

