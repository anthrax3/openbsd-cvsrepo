head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.07.15.18.05.14;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2009.07.25.11.38.10;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@use some generic code on vax, to do round/roundf/scalbln...
suggested by martynas@@

okay miod@@

(just rearranges the !vax makefile, no compile change there)
@
text
@/*	$OpenBSD: n_scalbln.c,v 1.1 2009/07/25 11:38:10 martynas Exp $	*/

/*
 * Written by Martynas Venckus.  Public domain
 */

#include <limits.h>
#include <math.h>

double
scalbln(double x, long n)
{
	if (n < INT_MIN)
		return scalbn(x, INT_MIN);
	else if (n > INT_MAX)
		return scalbn(x, INT_MAX);
	else
		return scalbn(x, (int)n);
}

long double
scalblnl(long double x, long n)
{
	if (n < INT_MIN)
		return scalbnl(x, INT_MIN);
	else if (n > INT_MAX)
		return scalbnl(x, INT_MAX);
	else
		return scalbnl(x, (int)n);
}

@


1.1
log
@int is big enough to fully represent exponents of all supported fp
formats.  which even for 80-bit & 128-bit long doubles is only 15
bits.  therefore, scalbln, scalblnf, scalblnl are essentially the
same as scalbn, scalbnf, scalbnl with bounds checking so that
LONG_MIN..INT_MIN, and INT_MAX..LONG_MAX ranges properly raise
exceptions & yield correct values.  looks good to millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

