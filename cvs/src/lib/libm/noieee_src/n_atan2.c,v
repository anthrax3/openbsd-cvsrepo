head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.18.0.14
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.10
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.12
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.8
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.19;
commitid	Lp8bnB2xK76nGFvJ;

1.19
date	2016.09.12.04.39.47;	author guenther;	state Exp;
branches;
next	1.18;
commitid	yu8HfTXRTrrv8b2W;

1.18
date	2013.07.15.04.08.26;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.13.03.44.59;	author martynas;	state Exp;
branches;
next	1.15;

1.15
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.30.18.34.38;	author martynas;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.29;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.11.20.03.21;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.10.01.08.24;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.17.15.36.28;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.21.08.26.19;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.22.43.36;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.22.20.56;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.15.57.59;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.11.12.41.13;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.10.12.17.44;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: n_atan2.c,v 1.19 2016/09/12 04:39:47 guenther Exp $	*/
/*	$NetBSD: n_atan2.c,v 1.1 1995/10/10 23:36:37 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* ATAN2(Y,X)
 * RETURN ARG (X+iY)
 * DOUBLE PRECISION (VAX D format 56 bits, IEEE DOUBLE 53 BITS)
 * CODED IN C BY K.C. NG, 1/8/85;
 * REVISED BY K.C. NG on 2/7/85, 2/13/85, 3/7/85, 3/30/85, 6/29/85.
 *
 * Required system supported functions :
 *	copysign(x,y)
 *	scalbn(x,y)
 *	logb(x)
 *
 * Method :
 *	1. Reduce y to positive by atan2(y,x)=-atan2(-y,x).
 *	2. Reduce x to positive by (if x and y are unexceptional):
 *		ARG (x+iy) = arctan(y/x)   	   ... if x > 0,
 *		ARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,
 *	3. According to the integer k=4t+0.25 truncated , t=y/x, the argument
 *	   is further reduced to one of the following intervals and the
 *	   arctangent of y/x is evaluated by the corresponding formula:
 *
 *         [0,7/16]	   atan(y/x) = t - t^3*(a1+t^2*(a2+...(a10+t^2*a11)...)
 *	   [7/16,11/16]    atan(y/x) = atan(1/2) + atan( (y-x/2)/(x+y/2) )
 *	   [11/16.19/16]   atan(y/x) = atan( 1 ) + atan( (y-x)/(x+y) )
 *	   [19/16,39/16]   atan(y/x) = atan(3/2) + atan( (y-1.5x)/(x+1.5y) )
 *	   [39/16,INF]     atan(y/x) = atan(INF) + atan( -x/y )
 *
 * Special cases:
 * Notations: atan2(y,x) == ARG (x+iy) == ARG(x,y).
 *
 *	ARG( NAN , (anything) ) is NaN;
 *	ARG( (anything), NaN ) is NaN;
 *	ARG(+(anything but NaN), +-0) is +-0  ;
 *	ARG(-(anything but NaN), +-0) is +-PI ;
 *	ARG( 0, +-(anything but 0 and NaN) ) is +-PI/2;
 *	ARG( +INF,+-(anything but INF and NaN) ) is +-0 ;
 *	ARG( -INF,+-(anything but INF and NaN) ) is +-PI;
 *	ARG( +INF,+-INF ) is +-PI/4 ;
 *	ARG( -INF,+-INF ) is +-3PI/4;
 *	ARG( (anything but,0,NaN, and INF),+-INF ) is +-PI/2;
 *
 * Accuracy:
 *	atan2(y,x) returns (PI/pi) * the exact ARG (x+iy) nearly rounded,
 *	where
 *
 *	in decimal:
 *		pi = 3.141592653589793 23846264338327 .....
 *    53 bits   PI = 3.141592653589793 115997963 ..... ,
 *    56 bits   PI = 3.141592653589793 227020265 ..... ,
 *
 *	in hexadecimal:
 *		pi = 3.243F6A8885A308D313198A2E....
 *    53 bits   PI = 3.243F6A8885A30  =  2 * 1.921FB54442D18	error=.276ulps
 *    56 bits   PI = 3.243F6A8885A308 =  4 * .C90FDAA22168C2    error=.206ulps
 *
 *	In a test run with 356,000 random argument on [-1,1] * [-1,1] on a
 *	VAX, the maximum observed error was 1.41 ulps (units of the last place)
 *	compared with (PI/pi)*(the exact ARG(x+iy)).
 *
 * Note:
 *	We use machine PI (the true pi rounded) in place of the actual
 *	value of pi for all the trig and inverse trig functions. In general,
 *	if trig is one of sin, cos, tan, then computed trig(y) returns the
 *	exact trig(y*pi/PI) nearly rounded; correspondingly, computed arctrig
 *	returns the exact arctrig(y)*PI/pi nearly rounded. These guarantee the
 *	trig functions have period PI, and trig(arctrig(x)) returns x for
 *	all critical values x.
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following constants.
 * The decimal values may be used, provided that the compiler will convert
 * from decimal to binary accurately enough to produce the hexadecimal values
 * shown.
 */

#include <math.h>

#include "mathimpl.h"

static const double athfhi = 4.6364760900080611433E-1;
static const double athflo = 1.9338828231967579916E-19;
static const double PIo4 = 7.8539816339744830676E-1;
static const double at1fhi = 9.8279372324732906796E-1;
static const double at1flo = -3.5540295636764633916E-18;
static const double PIo2 = 1.5707963267948966135E0;
static const double PI = 3.1415926535897932270E0;
static const double a1 = 3.3333333333333473730E-1;
static const double a2 = -2.0000000000017730678E-1;
static const double a3 = 1.4285714286694640301E-1;
static const double a4 = -1.1111111135032672795E-1;
static const double a5 = 9.0909091380563043783E-2;
static const double a6 = -7.6922954286089459397E-2;
static const double a7 = 6.6663180891693915586E-2;
static const double a8 = -5.8772703698290408927E-2;
static const double a9 = 5.2170707402812969804E-2;
static const double a10 = -4.4895863157820361210E-2;
static const double a11 = 3.3006147437343875094E-2;
static const double a12 = -1.4614844866464185439E-2;

float
atan2f(float x, float y)
{
	return (float)atan2((double)x, (double)y);
}

double
atan2(double y, double x)
{
	static const double zero=0, one=1, small=1.0E-9, big=1.0E18;
	double t,z,signy,signx,hi,lo;
	int k,m;

    /* if x or y is NAN */
	if (isnan(x))
		return (x);
	if (isnan(y))
		return (y);

    /* copy down the sign of y and x */
	signy = copysign(one,y) ;
	signx = copysign(one,x) ;

    /* if x is 1.0, goto begin */
	if(x==1) { y=copysign(y,one); t=y; if(isfinite(t)) goto begin;}

    /* when y = 0 */
	if(y==zero) return((signx==one)?y:copysign(PI,signy));

    /* when x = 0 */
	if(x==zero) return(copysign(PIo2,signy));

    /* when x is INF */
	if(!isfinite(x))
	    if(!isfinite(y))
		return(copysign((signx==one)?PIo4:3*PIo4,signy));
	    else
		return(copysign((signx==one)?zero:PI,signy));

    /* when y is INF */
	if(!isfinite(y)) return(copysign(PIo2,signy));

    /* compute y/x */
	x=copysign(x,one);
	y=copysign(y,one);
	if((m=(k=logb(y))-logb(x)) > 60) t=big+big;
	    else if(m < -80 ) t=y/x;
	    else { t = y/x ; y = scalbn(y,-k); x=scalbn(x,-k); }

    /* begin argument reduction */
begin:
	if (t < 2.4375) {

	/* truncate 4(t+1/16) to integer for branching */
	    k = 4 * (t+0.0625);
	    switch (k) {

	    /* t is in [0,7/16] */
	    case 0:
	    case 1:
		if (t < small) {
			if (big + small > 0.0)	/* raise inexact flag */
				return (copysign((signx>zero)?t:PI-t,signy));
		}

		hi = zero;  lo = zero;  break;

	    /* t is in [7/16,11/16] */
	    case 2:
		hi = athfhi; lo = athflo;
		z = x+x;
		t = ( (y+y) - x ) / ( z +  y ); break;

	    /* t is in [11/16,19/16] */
	    case 3:
	    case 4:
		hi = PIo4; lo = zero;
		t = ( y - x ) / ( x + y ); break;

	    /* t is in [19/16,39/16] */
	    default:
		hi = at1fhi; lo = at1flo;
		z = y-x; y=y+y+y; t = x+x;
		t = ( (z+z)-x ) / ( t + y ); break;
	    }
	}
	/* end of if (t < 2.4375) */

	else
	{
	    hi = PIo2; lo = zero;

	    /* t is in [2.4375, big] */
	    if (t <= big)  t = - x / y;

	    /* t is in [big, INF] */
	    else {
		if (big + small > 0.0)	/* raise inexact flag */
			t = zero;
	    }
	}
    /* end of argument reduction */

    /* compute atan(t) for t in [-.4375, .4375] */
	z = t*t;
#if defined(__vax__)
	z = t*(z*(a1+z*(a2+z*(a3+z*(a4+z*(a5+z*(a6+z*(a7+z*(a8+
			z*(a9+z*(a10+z*(a11+z*a12))))))))))));
#else	/* defined(__vax__) */
	z = t*(z*(a1+z*(a2+z*(a3+z*(a4+z*(a5+z*(a6+z*(a7+z*(a8+
			z*(a9+z*(a10+z*a11)))))))))));
#endif	/* defined(__vax__) */
	z = lo - z; z += t; z += hi;

	return(copysign((signx>zero)?z:PI-z,signy));
}
DEF_STD(atan2);
LDBL_CLONE(atan2);
@


1.19
log
@Per fpclassify(3): isinff(), isnanf(), finite(), and finitef() are deprecated
in favor of isinf(), isnan(), and isfinite().

ok tb@@ martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.18 2013/07/15 04:08:26 espie Exp $	*/
d246 2
a247 2

__strong_alias(atan2l, atan2);
@


1.18
log
@bring reference C code that's not compiled in synch with asm code
okay martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.17 2013/03/28 18:09:38 martynas Exp $	*/
d154 1
a154 1
	if(x==1) { y=copysign(y,one); t=y; if(finite(t)) goto begin;}
d163 2
a164 2
	if(!finite(x))
	    if(!finite(y))
d170 1
a170 1
	if(!finite(y)) return(copysign(PIo2,signy));
@


1.17
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.16 2013/01/13 03:44:59 martynas Exp $	*/
d129 6
@


1.16
log
@Get rid of the very ugly lint workarounds: LINTLIBRARY, PROTOLIB,
and a few empty files for lint to chew on.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.15 2012/12/05 23:20:03 deraadt Exp $	*/
d241 1
a241 1
__weak_alias(atan2l, atan2);
@


1.15
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.14 2011/05/30 18:34:38 martynas Exp $	*/
a105 2
/* LINTLIBRARY */

a240 4
#ifdef	lint
/* PROTOLIB1 */
long double atan2l(long double, long double);
#else	/* lint */
a241 1
#endif	/* lint */
@


1.14
log
@Trick lint into recording the right prototypes in the llib-lm.ln
database on platforms without extended-precision floating-point
support.

Seems like a reasonable approach to millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.13 2009/10/27 23:59:29 deraadt Exp $	*/
a107 1
#include <sys/cdefs.h>
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.12 2009/04/11 20:03:21 martynas Exp $	*/
d106 2
d244 4
a247 1
#ifdef __weak_alias
d249 1
a249 1
#endif /* __weak_alias */
@


1.12
log
@in the old days compiler could not convert decimal constants
accurately, hence the tricks in libm, using machine representation
of constants.  remove kludges and switch to use decimal constants,
much simplifying the code.  since, the compiler converts them
accurately.  generated values match on vaxfp
discussed with millert@@, and miod@@
testing todd@@, and myself
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.11 2008/12/10 01:08:24 martynas Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)atan2.c	8.1 (Berkeley) 6/4/93";
#endif /* not lint */
@


1.11
log
@use sys/cdefs.h;  pointed out by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.10 2008/12/09 20:00:35 martynas Exp $	*/
d115 19
a133 60
vc(athfhi, 4.6364760900080611433E-1  ,6338,3fed,da7b,2b0d,  -1, .ED63382B0DDA7B)
vc(athflo, 1.9338828231967579916E-19 ,5005,2164,92c0,9cfe, -62, .E450059CFE92C0)
vc(PIo4,   7.8539816339744830676E-1  ,0fda,4049,68c2,a221,   0, .C90FDAA22168C2)
vc(at1fhi, 9.8279372324732906796E-1  ,985e,407b,b4d9,940f,   0, .FB985E940FB4D9)
vc(at1flo,-3.5540295636764633916E-18 ,1edc,a383,eaea,34d6, -57,-.831EDC34D6EAEA)
vc(PIo2,   1.5707963267948966135E0   ,0fda,40c9,68c2,a221,   1, .C90FDAA22168C2)
vc(PI,     3.1415926535897932270E0   ,0fda,4149,68c2,a221,   2, .C90FDAA22168C2)
vc(a1,     3.3333333333333473730E-1  ,aaaa,3faa,ab75,aaaa,  -1, .AAAAAAAAAAAB75)
vc(a2,    -2.0000000000017730678E-1  ,cccc,bf4c,946e,cccd,  -2,-.CCCCCCCCCD946E)
vc(a3,     1.4285714286694640301E-1  ,4924,3f12,4262,9274,  -2, .92492492744262)
vc(a4,    -1.1111111135032672795E-1  ,8e38,bee3,6292,ebc6,  -3,-.E38E38EBC66292)
vc(a5,     9.0909091380563043783E-2  ,2e8b,3eba,d70c,b31b,  -3, .BA2E8BB31BD70C)
vc(a6,    -7.6922954286089459397E-2  ,89c8,be9d,7f18,27c3,  -3,-.9D89C827C37F18)
vc(a7,     6.6663180891693915586E-2  ,86b4,3e88,9e58,ae37,  -3, .8886B4AE379E58)
vc(a8,    -5.8772703698290408927E-2  ,bba5,be70,a942,8481,  -4,-.F0BBA58481A942)
vc(a9,     5.2170707402812969804E-2  ,b0f3,3e55,13ab,a1ab,  -4, .D5B0F3A1AB13AB)
vc(a10,   -4.4895863157820361210E-2  ,e4b9,be37,048f,7fd1,  -4,-.B7E4B97FD1048F)
vc(a11,    3.3006147437343875094E-2  ,3174,3e07,2d87,3cf7,  -4, .8731743CF72D87)
vc(a12,   -1.4614844866464185439E-2  ,731a,bd6f,76d9,2f34,  -6,-.EF731A2F3476D9)

ic(athfhi, 4.6364760900080609352E-1  ,  -2,  1.DAC670561BB4F)
ic(athflo, 4.6249969567426939759E-18 , -58,  1.5543B8F253271)
ic(PIo4,   7.8539816339744827900E-1  ,  -1,  1.921FB54442D18)
ic(at1fhi, 9.8279372324732905408E-1  ,  -1,  1.F730BD281F69B)
ic(at1flo,-2.4407677060164810007E-17 , -56, -1.C23DFEFEAE6B5)
ic(PIo2,   1.5707963267948965580E0   ,   0,  1.921FB54442D18)
ic(PI,     3.1415926535897931160E0   ,   1,  1.921FB54442D18)
ic(a1,     3.3333333333333942106E-1  ,  -2,  1.55555555555C3)
ic(a2,    -1.9999999999979536924E-1  ,  -3, -1.9999999997CCD)
ic(a3,     1.4285714278004377209E-1  ,  -3,  1.24924921EC1D7)
ic(a4,    -1.1111110579344973814E-1  ,  -4, -1.C71C7059AF280)
ic(a5,     9.0908906105474668324E-2  ,  -4,  1.745CE5AA35DB2)
ic(a6,    -7.6919217767468239799E-2  ,  -4, -1.3B0FA54BEC400)
ic(a7,     6.6614695906082474486E-2  ,  -4,  1.10DA924597FFF)
ic(a8,    -5.8358371008508623523E-2  ,  -5, -1.DE125FDDBD793)
ic(a9,     4.9850617156082015213E-2  ,  -5,  1.9860524BDD807)
ic(a10,   -3.6700606902093604877E-2  ,  -5, -1.2CA6C04C6937A)
ic(a11,    1.6438029044759730479E-2  ,  -6,  1.0D52174A1BB54)

#ifdef vccast
#define	athfhi	vccast(athfhi)
#define	athflo	vccast(athflo)
#define	PIo4	vccast(PIo4)
#define	at1fhi	vccast(at1fhi)
#define	at1flo	vccast(at1flo)
#define	PIo2	vccast(PIo2)
#define	PI	vccast(PI)
#define	a1	vccast(a1)
#define	a2	vccast(a2)
#define	a3	vccast(a3)
#define	a4	vccast(a4)
#define	a5	vccast(a5)
#define	a6	vccast(a6)
#define	a7	vccast(a7)
#define	a8	vccast(a8)
#define	a9	vccast(a9)
#define	a10	vccast(a10)
#define	a11	vccast(a11)
#define	a12	vccast(a12)
#endif
@


1.10
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.9 2008/07/17 15:36:28 martynas Exp $	*/
d110 1
a110 1
#include <machine/cdefs.h>
@


1.9
log
@properly raise inexact;  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.8 2008/06/21 08:26:19 martynas Exp $	*/
d110 3
a112 1
#include "math.h"
d286 4
@


1.8
log
@cleaning up, no functional changes
- no support for National 32000, removing ns32000/national ifdefs maze
- remove tahoe defs
- ansify
looks fine to millert@@;  who also noticed rint removal
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.c,v 1.7 2008/06/12 22:43:36 martynas Exp $	*/
d228 4
a231 3
		if (t < small)
		    { big + small ;  /* raise inexact flag */
		      return (copysign((signx>zero)?t:PI-t,signy)); }
d264 4
a267 3
	    else
	      { big+small;	/* raise inexact flag */
		t = zero; }
@


1.7
log
@spacing, add rcs ids, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d174 2
a175 2
double atan2(y,x)
double  y,x;
d271 1
a271 1
#if defined(__vax__)||defined(tahoe)
d274 1
a274 1
#else	/* defined(__vax__)||defined(tahoe) */
d277 1
a277 1
#endif	/* defined(__vax__)||defined(tahoe) */
@


1.6
log
@some cleanup for noieee_src, as asked by millert@@: remove fictional
includes, include math.h where needed and remove redundant declarations
ok millert@@
@
text
@d1 2
a2 1
/*      $NetBSD: n_atan2.c,v 1.1 1995/10/10 23:36:37 ragge Exp $        */
d39 1
a39 1
 * CODED IN C BY K.C. NG, 1/8/85; 
d46 1
a46 1
 *	
d49 1
a49 1
 *	2. Reduce x to positive by (if x and y are unexceptional): 
d52 2
a53 2
 *	3. According to the integer k=4t+0.25 truncated , t=y/x, the argument 
 *	   is further reduced to one of the following intervals and the 
d77 1
a77 1
 *	atan2(y,x) returns (PI/pi) * the exact ARG (x+iy) nearly rounded, 
d81 1
a81 1
 *		pi = 3.141592653589793 23846264338327 ..... 
d83 1
a83 1
 *    56 bits   PI = 3.141592653589793 227020265 ..... ,  
d89 1
a89 1
 *	
d96 4
a99 4
 *	value of pi for all the trig and inverse trig functions. In general, 
 *	if trig is one of sin, cos, tan, then computed trig(y) returns the 
 *	exact trig(y*pi/PI) nearly rounded; correspondingly, computed arctrig 
 *	returns the exact arctrig(y)*PI/pi nearly rounded. These guarantee the 
d102 1
a102 1
 *	
d176 1
a176 1
{  
d188 2
a189 2
	signy = copysign(one,y) ;  
	signx = copysign(one,x) ;  
d199 1
a199 1
	    
d202 1
a202 1
	    if(!finite(y)) 
d211 3
a213 3
	x=copysign(x,one); 
	y=copysign(y,one); 
	if((m=(k=logb(y))-logb(x)) > 60) t=big+big; 
d219 1
a219 1
	if (t < 2.4375) {		 
d226 1
a226 1
	    case 0:                    
d228 1
a228 1
		if (t < small) 
d235 1
a235 1
	    case 2:                    
d241 1
a241 1
	    case 3:                    
d247 1
a247 1
	    default:                   
d255 1
a255 1
	else                           
d263 1
a263 1
	    else          
@


1.5
log
@- no need for ifdef dance (21), we have isnan, finite for vax
- TEST_FMOD doesn't belong here, remove
- remove ifdef _ANSI_SOURCE and assume it's default
ok millert@@
@
text
@d109 1
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@a178 1
#if !defined(__vax__)&&!defined(tahoe)
d180 4
a183 2
	if(x!=x) return(x); if(y!=y) return(y);
#endif	/* !defined(__vax__)&&!defined(tahoe) */
@


1.3
log
@scalb() in vax libm is in fact scalbn(), so change the symbol name.
Only affects vax, which has no shared libraries, so no version change
needed for libm.
Someone with enough math skills ought to code a real scalb() on a rainy day...
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@^vax^__vax__
@
text
@d47 1
a47 1
 *	scalb(x,y)
d216 1
a216 1
	    else { t = y/x ; y = scalb(y,-k); x=scalb(x,-k); }
@


1.1
log
@Initial revision
@
text
@d183 1
a183 1
#if !defined(vax)&&!defined(tahoe)
d186 1
a186 1
#endif	/* !defined(vax)&&!defined(tahoe) */
d272 1
a272 1
#if defined(vax)||defined(tahoe)
d275 1
a275 1
#else	/* defined(vax)||defined(tahoe) */
d278 1
a278 1
#endif	/* defined(vax)||defined(tahoe) */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
