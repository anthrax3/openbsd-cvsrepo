head	1.21;
access;
symbols
	OPENBSD_6_0:1.19.0.14
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.10
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.12
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.8
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.6
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.20;
commitid	Lp8bnB2xK76nGFvJ;

1.20
date	2016.09.12.04.39.47;	author guenther;	state Exp;
branches;
next	1.19;
commitid	yu8HfTXRTrrv8b2W;

1.19
date	2013.07.05.05.44.10;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.07.05.05.41.09;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.13.03.44.59;	author martynas;	state Exp;
branches;
next	1.15;

1.15
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.30.18.34.38;	author martynas;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.29;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.11.20.03.21;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.08.21.58.28;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.10.01.08.24;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.25.17.49.31;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.21.08.26.19;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.22.43.36;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.22.20.56;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.12.15.57.59;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.10.12.17.45;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: n_floor.c,v 1.20 2016/09/12 04:39:47 guenther Exp $	*/
/*	$NetBSD: n_floor.c,v 1.1 1995/10/10 23:36:48 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <math.h>

#include "mathimpl.h"

static const double L = 36028797018963968.0E0;	/* 2**55 */
static const float F = 8388608E0f;		/* 2**23 */

/*
 * floor(x) := the largest integer no larger than x;
 * ceil(x) := -floor(-x), for all real x.
 *
 * Note: Inexact will be signaled if x is not an integer, as is
 *	customary for IEEE 754.  No other signal can be emitted.
 */
double
floor(double x)
{
	volatile double y;

	if (isnan(x) ||	x >= L)		/* already an even integer */
		return x;
	else if (x < (double)0)
		return -ceil(-x);
	else {			/* now 0 <= x < L */
		y = L+x;		/* destructive store must be forced */
		y -= L;			/* an integer, and |x-y| < 1 */
		return x < y ? y-(double)1 : y;
	}
}
DEF_STD(floor);
LDBL_CLONE(floor);

double
ceil(double x)
{
	volatile double y;

	if (isnan(x) ||	x >= L)		/* already an even integer */
		return x;
	else if (x < (double)0)
		return -floor(-x);
	else {			/* now 0 <= x < L */
		y = L+x;		/* destructive store must be forced */
		y -= L;			/* an integer, and |x-y| < 1 */
		return x > y ? y+(double)1 : y;
	}
}
DEF_STD(ceil);
LDBL_UNUSED_CLONE(ceil);

float
floorf(float x)
{
	volatile float y;

	if (isnan(x) || x >= F)		/* already an even integer */
		return x;
	else if (x < (float)0)
		return -ceilf(-x);
	else {			/* now 0 <= x < F */
		y = F+x;		/* destructive store must be forced */
		y -= F;			/* an integer, and |x-y| < 1 */
		return x < y ? y-(float)1 : y;
	}
}
DEF_STD(floorf);

float
ceilf(float x)
{
	volatile float y;

	if (isnan(x) || x >= F)		/* already an even integer */
		return x;
	else if (x < (float)0)
		return -floorf(-x);
	else {			/* now 0 <= x < F */
		y = F+x;		/* destructive store must be forced */
		y -= F;			/* an integer, and |x-y| < 1 */
		return x > y ? y+(float)1 : y;
	}
}
DEF_STD(ceilf);

/*
 * algorithm for rint(x) in pseudo-pascal form ...
 *
 * real rint(x): real x;
 *	... delivers integer nearest x in direction of prevailing rounding
 *	... mode
 * const	L = (last consecutive integer)/2
 * 	  = 2**55; for VAX D
 * 	  = 2**52; for IEEE 754 Double
 * real	s,t;
 * begin
 * 	if isnan(x) then return x;		... NaN
 * 	if |x| >= L then return x;		... already an integer
 * 	s := copysign(L,x);
 * 	t := x + s;				... = (x+s) rounded to integer
 * 	return t - s
 * end;
 *
 * Note: Inexact will be signaled if x is not an integer, as is
 *	customary for IEEE 754.  No other signal can be emitted.
 */
double
rint(double x)
{
	double s;
	volatile double t;
	const double one = 1.0;

	if (isnan(x))
		return (x);

	if (copysign(x, one) >= L)	/* already an integer */
		return (x);

	s = copysign(L,x);
	t = x + s;				/* x+s rounded to integer */
	return (t - s);
}
DEF_STD(rint);
LDBL_CLONE(rint);

float
rintf(float x)
{
	float s;
	volatile float t;
	const float one = 1.0f;

	if (isnan(x))
		return (x);

	if (copysignf(x, one) >= F)	/* already an integer */
		return (x);

	s = copysignf(F,x);
	t = x + s;				/* x+s rounded to integer */
	return (t - s);
}
DEF_STD(rintf);
@


1.20
log
@Per fpclassify(3): isinff(), isnanf(), finite(), and finitef() are deprecated
in favor of isinf(), isnan(), and isfinite().

ok tb@@ martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.19 2013/07/05 05:44:10 espie Exp $	*/
d61 2
a62 2

__strong_alias(floorl, floor);
d79 2
a80 2

__strong_alias(ceill, ceil);
d97 1
d114 2
d154 2
a155 2

__strong_alias(rintl, rint);
d174 1
a174 1

@


1.19
log
@... and gain rintf by using the same technique, along with aliases for
ceill/floorl
okay martynas@@, checked for build by miod@@ as well.
(note that these don't require bumps, as vax has no shared libraries...)
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.17 2013/03/28 18:09:38 martynas Exp $	*/
d87 1
a87 1
	if (isnanf(x) || x >= F)	/* already an even integer */
d103 1
a103 1
	if (isnanf(x) || x >= F)	/* already an even integer */
d161 1
a161 1
	if (isnanf(x))
@


1.18
log
@implement floorf and ceilf: same technique as floor and ceil, just with
appropriate constant to the mantissa size (and document what L is along
the way).

okay martynas@@, tested by miod@@ for results
@
text
@d62 2
d80 2
d153 19
@


1.17
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.16 2013/01/13 03:44:59 martynas Exp $	*/
d36 2
a37 1
static const double L = 36028797018963968.0E0;
d78 31
@


1.16
log
@Get rid of the very ugly lint workarounds: LINTLIBRARY, PROTOLIB,
and a few empty files for lint to chew on.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.15 2012/12/05 23:20:03 deraadt Exp $	*/
d116 1
a116 1
__weak_alias(rintl, rint);
@


1.15
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.14 2011/05/30 18:34:38 martynas Exp $	*/
a31 2
/* LINTLIBRARY */

a115 4
#ifdef	lint
/* PROTOLIB1 */
long double rintl(long double);
#else	/* lint */
a116 1
#endif	/* lint */
@


1.14
log
@Trick lint into recording the right prototypes in the llib-lm.ln
database on platforms without extended-precision floating-point
support.

Seems like a reasonable approach to millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.13 2009/10/27 23:59:29 deraadt Exp $	*/
a33 1
#include <sys/cdefs.h>
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.12 2009/04/11 20:03:21 martynas Exp $	*/
d32 2
d119 4
a122 1
#ifdef __weak_alias    
d124 1
a124 1
#endif /* __weak_alias */
@


1.12
log
@in the old days compiler could not convert decimal constants
accurately, hence the tricks in libm, using machine representation
of constants.  remove kludges and switch to use decimal constants,
much simplifying the code.  since, the compiler converts them
accurately.  generated values match on vaxfp
discussed with millert@@, and miod@@
testing todd@@, and myself
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.11 2009/04/08 21:58:28 martynas Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)floor.c	8.1 (Berkeley) 6/4/93";
#endif /* not lint */
@


1.11
log
@fix hexadecimal constant that was wrong;  and confused with ieee.  ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.10 2008/12/10 01:08:24 martynas Exp $	*/
d41 1
a41 7
vc(L, 36028797018963968.0E0 ,0000,5c00,0000,0000, 55, 1.0) /* 2**55 */

ic(L, 4503599627370496.0E0, 52, 1.0)			  /* 2**52 */

#ifdef vccast
#define	L	vccast(L)
#endif
@


1.10
log
@use sys/cdefs.h;  pointed out by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.9 2008/12/09 20:00:35 martynas Exp $	*/
d41 1
a41 1
vc(L, 4503599627370496.0E0 ,0000,5c00,0000,0000, 55, 1.0) /* 2**55 */
@


1.9
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.8 2008/06/25 17:49:31 martynas Exp $	*/
d36 1
a36 1
#include <machine/cdefs.h>
@


1.8
log
@- expressions such as x != x and x == x are prone to errors and
ugly, when we have isnan and isinf
- no need to check for _IEEE, when checking for not-a-number
- remove some impossible checks
- while here, drem->remainder, as drem is just an obsolete alias
now
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.7 2008/06/21 08:26:19 martynas Exp $	*/
d36 3
a38 1
#include "math.h"
d126 4
@


1.7
log
@cleaning up, no functional changes
- no support for National 32000, removing ns32000/national ifdefs maze
- remove tahoe defs
- ansify
looks fine to millert@@;  who also noticed rint removal
@
text
@d1 1
a1 1
/*	$OpenBSD: n_floor.c,v 1.6 2008/06/12 22:43:36 martynas Exp $	*/
d97 1
a97 1
 * 	if x != x then return x;		... NaN
@


1.6
log
@spacing, add rcs ids, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 1
a55 2
floor(x)
double x;
d71 1
a71 2
ceil(x)
double x;
a85 1
#ifndef ns32000			/* rint() is in ./NATIONAL/support.s */
d108 1
a108 2
rint(x)
double x;
a123 1
#endif	/* not national */
@


1.5
log
@some cleanup for noieee_src, as asked by millert@@: remove fictional
includes, include math.h where needed and remove redundant declarations
ok millert@@
@
text
@d1 2
a2 1
/*      $NetBSD: n_floor.c,v 1.1 1995/10/10 23:36:48 ragge Exp $ */
@


1.4
log
@- no need for ifdef dance (21), we have isnan, finite for vax
- TEST_FMOD doesn't belong here, remove
- remove ifdef _ANSI_SOURCE and assume it's default
ok millert@@
@
text
@d35 1
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d58 1
a58 5
	if (
#if !defined(__vax__)&&!defined(tahoe)
		x != x ||	/* NaN */
#endif	/* !defined(__vax__)&&!defined(tahoe) */
		x >= L)		/* already an even integer */
d75 1
a75 5
	if (
#if !defined(__vax__)&&!defined(tahoe)
		x != x ||	/* NaN */
#endif	/* !defined(__vax__)&&!defined(tahoe) */
		x >= L)		/* already an even integer */
d116 1
a116 2
#if !defined(__vax__)&&!defined(tahoe)
	if (x != x)				/* NaN */
d118 4
a121 3
#endif	/* !defined(__vax__)&&!defined(tahoe) */
	if (copysign(x,one) >= L)		/* already an integer */
	    return (x);
@


1.2
log
@^vax^__vax__
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial revision
@
text
@d63 1
a63 1
#if !defined(vax)&&!defined(tahoe)
d65 1
a65 1
#endif	/* !defined(vax)&&!defined(tahoe) */
d84 1
a84 1
#if !defined(vax)&&!defined(tahoe)
d86 1
a86 1
#endif	/* !defined(vax)&&!defined(tahoe) */
d128 1
a128 1
#if !defined(vax)&&!defined(tahoe)
d131 1
a131 1
#endif	/* !defined(vax)&&!defined(tahoe) */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
