head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.28
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.24
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.26
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.4
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.11;
commitid	Lp8bnB2xK76nGFvJ;

1.11
date	2016.09.12.04.39.47;	author guenther;	state Exp;
branches;
next	1.10;
commitid	yu8HfTXRTrrv8b2W;

1.10
date	2009.10.27.23.59.29;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.11.20.03.21;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.21.08.26.19;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.22.20.56;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.15.57.59;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.11.20.53.27;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.11.12.41.13;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.10.12.17.45;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: n_exp.c,v 1.11 2016/09/12 04:39:47 guenther Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* EXP(X)
 * RETURN THE EXPONENTIAL OF X
 * DOUBLE PRECISION (IEEE 53 bits, VAX D FORMAT 56 BITS)
 * CODED IN C BY K.C. NG, 1/19/85;
 * REVISED BY K.C. NG on 2/6/85, 2/15/85, 3/7/85, 3/24/85, 4/16/85, 6/14/86.
 *
 * Required system supported functions:
 *	scalbn(x,n)
 *	copysign(x,y)
 *	isfinite(x)
 *
 * Method:
 *	1. Argument Reduction: given the input x, find r and integer k such
 *	   that
 *	                   x = k*ln2 + r,  |r| <= 0.5*ln2 .
 *	   r will be represented as r := z+c for better accuracy.
 *
 *	2. Compute exp(r) by
 *
 *		exp(r) = 1 + r + r*R1/(2-R1),
 *	   where
 *		R1 = x - x^2*(p1+x^2*(p2+x^2*(p3+x^2*(p4+p5*x^2)))).
 *
 *	3. exp(x) = 2^k * exp(r) .
 *
 * Special cases:
 *	exp(INF) is INF, exp(NaN) is NaN;
 *	exp(-INF)=  0;
 *	for finite argument, only exp(0)=1 is exact.
 *
 * Accuracy:
 *	exp(x) returns the exponential of x nearly rounded. In a test run
 *	with 1,156,000 random arguments on a VAX, the maximum observed
 *	error was 0.869 ulps (units in the last place).
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following constants.
 * The decimal values may be used, provided that the compiler will convert
 * from decimal to binary accurately enough to produce the hexadecimal values
 * shown.
 */

#include "math.h"
#include "mathimpl.h"

static const double ln2hi = 6.9314718055829871446E-1;
static const double ln2lo = 1.6465949582897081279E-12;
static const double lnhuge = 9.4961163736712506989E1;
static const double lntiny = -9.5654310917272452386E1;
static const double invln2 = 1.4426950408889634148E0;
static const double p1 = 1.6666666666666602251E-1;
static const double p2 = -2.7777777777015591216E-3;
static const double p3 = 6.6137563214379341918E-5;
static const double p4 = -1.6533902205465250480E-6;
static const double p5 = 4.1381367970572387085E-8;

double
exp(double x)
{
	double z, hi, lo, c;
	int k;

	if (isnan(x))
		return (x);

	if( x <= lnhuge ) {
		if( x >= lntiny ) {

		    /* argument reduction : x --> x - k*ln2 */

			k=invln2*x+copysign(0.5,x);	/* k=NINT(x/ln2) */

		    /* express x-k*ln2 as hi-lo and let x=hi-lo rounded */

			hi=x-k*ln2hi;
			x=hi-(lo=k*ln2lo);

		    /* return 2^k*[1+x+x*c/(2+c)]  */
			z=x*x;
			c= x - z*(p1+z*(p2+z*(p3+z*(p4+z*p5))));
			return  scalbn(1.0+(hi-(lo-(x*c)/(2.0-c))),k);

		}
		/* end of x > lntiny */

		else
		     /* exp(-big#) underflows to zero */
		     if(isfinite(x))  return(scalbn(1.0,-5000));

		     /* exp(-INF) is zero */
		     else return(0.0);
	}
	/* end of x < lnhuge */

	else
	/* exp(INF) is INF, exp(+big#) overflows to INF */
	    return( isfinite(x) ?  scalbn(1.0,5000)  : x);
}
DEF_STD(exp);

/* returns exp(r = x + c) for |c| < |x| with no overlap.  */

double
__exp__D(double x, double c)
{
	double z, hi, lo;
	int k;

	if (isnan(x))
		return (x);

	if ( x <= lnhuge ) {
		if ( x >= lntiny ) {

		    /* argument reduction : x --> x - k*ln2 */
			z = invln2*x;
			k = z + copysign(.5, x);

		    /* express (x+c)-k*ln2 as hi-lo and let x=hi-lo rounded */

			hi=(x-k*ln2hi);			/* Exact. */
			x= hi - (lo = k*ln2lo-c);
		    /* return 2^k*[1+x+x*c/(2+c)]  */
			z=x*x;
			c= x - z*(p1+z*(p2+z*(p3+z*(p4+z*p5))));
			c = (x*c)/(2.0-c);

			return  scalbn(1.+(hi-(lo - c)), k);
		}
		/* end of x > lntiny */

		else
		     /* exp(-big#) underflows to zero */
		     if(isfinite(x))  return(scalbn(1.0,-5000));

		     /* exp(-INF) is zero */
		     else return(0.0);
	}
	/* end of x < lnhuge */

	else
	/* exp(INF) is INF, exp(+big#) overflows to INF */
	    return( isfinite(x) ?  scalbn(1.0,5000)  : x);
}
@


1.11
log
@Per fpclassify(3): isinff(), isnanf(), finite(), and finitef() are deprecated
in favor of isinf(), isnan(), and isfinite().

ok tb@@ martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.10 2009/10/27 23:59:29 deraadt Exp $	*/
d129 1
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.9 2009/04/11 20:03:21 martynas Exp $	*/
d40 1
a40 1
 *	finite(x)
d118 1
a118 1
		     if(finite(x))  return(scalbn(1.0,-5000));
d127 1
a127 1
	    return( finite(x) ?  scalbn(1.0,5000)  : x);
d163 1
a163 1
		     if(finite(x))  return(scalbn(1.0,-5000));
d172 1
a172 1
	    return( finite(x) ?  scalbn(1.0,5000)  : x);
@


1.9
log
@in the old days compiler could not convert decimal constants
accurately, hence the tricks in libm, using machine representation
of constants.  remove kludges and switch to use decimal constants,
much simplifying the code.  since, the compiler converts them
accurately.  generated values match on vaxfp
discussed with millert@@, and miod@@
testing todd@@, and myself
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.8 2008/06/21 08:26:19 martynas Exp $	*/
a29 4

#ifndef lint
static char sccsid[] = "@@(#)exp.c	8.1 (Berkeley) 6/4/93";
#endif /* not lint */
@


1.8
log
@cleaning up, no functional changes
- no support for National 32000, removing ns32000/national ifdefs maze
- remove tahoe defs
- ansify
looks fine to millert@@;  who also noticed rint removal
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.7 2008/06/12 22:20:56 martynas Exp $	*/
d80 10
a89 34
vc(ln2hi,  6.9314718055829871446E-1  ,7217,4031,0000,f7d0,   0, .B17217F7D00000)
vc(ln2lo,  1.6465949582897081279E-12 ,bcd5,2ce7,d9cc,e4f1, -39, .E7BCD5E4F1D9CC)
vc(lnhuge, 9.4961163736712506989E1   ,ec1d,43bd,9010,a73e,   7, .BDEC1DA73E9010)
vc(lntiny,-9.5654310917272452386E1   ,4f01,c3bf,33af,d72e,   7,-.BF4F01D72E33AF)
vc(invln2, 1.4426950408889634148E0   ,aa3b,40b8,17f1,295c,   1, .B8AA3B295C17F1)
vc(p1,     1.6666666666666602251E-1  ,aaaa,3f2a,a9f1,aaaa,  -2, .AAAAAAAAAAA9F1)
vc(p2,    -2.7777777777015591216E-3  ,0b60,bc36,ec94,b5f5,  -8,-.B60B60B5F5EC94)
vc(p3,     6.6137563214379341918E-5  ,b355,398a,f15f,792e, -13, .8AB355792EF15F)
vc(p4,    -1.6533902205465250480E-6  ,ea0e,b6dd,5f84,2e93, -19,-.DDEA0E2E935F84)
vc(p5,     4.1381367970572387085E-8  ,bb4b,3431,2683,95f5, -24, .B1BB4B95F52683)

#ifdef vccast
#define    ln2hi    vccast(ln2hi)
#define    ln2lo    vccast(ln2lo)
#define   lnhuge    vccast(lnhuge)
#define   lntiny    vccast(lntiny)
#define   invln2    vccast(invln2)
#define       p1    vccast(p1)
#define       p2    vccast(p2)
#define       p3    vccast(p3)
#define       p4    vccast(p4)
#define       p5    vccast(p5)
#endif

ic(p1,     1.6666666666666601904E-1,  -3,  1.555555555553E)
ic(p2,    -2.7777777777015593384E-3,  -9, -1.6C16C16BEBD93)
ic(p3,     6.6137563214379343612E-5, -14,  1.1566AAF25DE2C)
ic(p4,    -1.6533902205465251539E-6, -20, -1.BBD41C5D26BF1)
ic(p5,     4.1381367970572384604E-8, -25,  1.6376972BEA4D0)
ic(ln2hi,  6.9314718036912381649E-1,  -1,  1.62E42FEE00000)
ic(ln2lo,  1.9082149292705877000E-10,-33,  1.A39EF35793C76)
ic(lnhuge, 7.1602103751842355450E2,    9,  1.6602B15B7ECF2)
ic(lntiny,-7.5137154372698068983E2,    9, -1.77AF8EBEAE354)
ic(invln2, 1.4426950408889633870E0,    0,  1.71547652B82FE)
@


1.7
log
@some cleanup for noieee_src, as asked by millert@@: remove fictional
includes, include math.h where needed and remove redundant declarations
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.6 2008/06/12 15:57:59 martynas Exp $	*/
d115 2
a116 1
double exp(double x)
d160 2
a161 1
double __exp__D(double x, double c)
@


1.6
log
@- no need for ifdef dance (21), we have isnan, finite for vax
- TEST_FMOD doesn't belong here, remove
- remove ifdef _ANSI_SOURCE and assume it's default
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_exp.c,v 1.5 2008/06/11 20:53:27 martynas Exp $	*/
d77 1
@


1.5
log
@- on non-ieee, rename gamma to tgamma, the 'true' gamma
- make gamma an alias of lgamma
- on ieee, add tgamma, based on gamma from non-ieee
- fixes for tgamma/lgamma/exp/log, esp. special cases (some from
freebsd);  properly raise invalid fp operations on vax
- also some general cleanup, ansification, man page (which was ok
jmc@@)
- bump minor
this makes some ports using tgamma possible;  also consistifies
behavior across openbsd/ieee and openbsd/non-ieee, and other operating
systems
much thanks sthen@@, johan@@, steven@@, Simon Kuhnle, Wiktor Izdebski
for testing
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 3
a121 3
#if !defined(__vax__)&&!defined(tahoe)
	if(x!=x) return(x);	/* x is NaN */
#endif	/* !defined(__vax__)&&!defined(tahoe) */
d163 3
a165 3
#if !defined(__vax__)&&!defined(tahoe)
	if (x!=x) return(x);	/* x is NaN */
#endif	/* !defined(__vax__)&&!defined(tahoe) */
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*      $NetBSD: n_exp.c,v 1.1 1995/10/10 23:36:44 ragge Exp $ */
d38 1
a38 1
 * CODED IN C BY K.C. NG, 1/19/85; 
d42 2
a43 2
 *	scalbn(x,n)	
 *	copysign(x,y)	
d47 1
a47 1
 *	1. Argument Reduction: given the input x, find r and integer k such 
d49 1
a49 1
 *	                   x = k*ln2 + r,  |r| <= 0.5*ln2 .  
d52 1
a52 1
 *	2. Compute exp(r) by 
d114 1
a114 2
double exp(x)
double x;
d116 1
a116 1
	double  z,hi,lo,c;
d142 1
a142 1
		else 
d151 1
a151 1
	else 
d158 1
a158 2
double __exp__D(x, c)
double x, c;
d160 1
a160 1
	double  z,hi,lo, t;
d186 1
a186 1
		else 
d195 1
a195 1
	else 
@


1.3
log
@scalb() in vax libm is in fact scalbn(), so change the symbol name.
Only affects vax, which has no shared libraries, so no version change
needed for libm.
Someone with enough math skills ought to code a real scalb() on a rainy day...
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@^vax^__vax__
@
text
@d46 1
a46 1
 *	scalb(x,n)	
d142 1
a142 1
			return  scalb(1.0+(hi-(lo-(x*c)/(2.0-c))),k);
d149 1
a149 1
		     if(finite(x))  return(scalb(1.0,-5000));
d158 1
a158 1
	    return( finite(x) ?  scalb(1.0,5000)  : x);
d188 1
a188 1
			return  scalb(1.+(hi-(lo - c)), k);
d194 1
a194 1
		     if(finite(x))  return(scalb(1.0,-5000));
d203 1
a203 1
	    return( finite(x) ?  scalb(1.0,5000)  : x);
@


1.1
log
@Initial revision
@
text
@d124 1
a124 1
#if !defined(vax)&&!defined(tahoe)
d126 1
a126 1
#endif	/* !defined(vax)&&!defined(tahoe) */
d169 1
a169 1
#if !defined(vax)&&!defined(tahoe)
d171 1
a171 1
#endif	/* !defined(vax)&&!defined(tahoe) */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
