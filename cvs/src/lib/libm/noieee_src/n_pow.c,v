head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.28
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.24
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.12.04.39.47;	author guenther;	state Exp;
branches;
next	1.12;
commitid	yu8HfTXRTrrv8b2W;

1.12
date	2009.10.27.23.59.29;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.05.02.12.43;	author martynas;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.25.17.49.31;	author martynas;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.21.08.26.19;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.12.22.43.36;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.22.20.56;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.15.57.59;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.11.12.41.13;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.10.12.17.47;	author hugh;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.52;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.52;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Per fpclassify(3): isinff(), isnanf(), finite(), and finitef() are deprecated
in favor of isinf(), isnan(), and isfinite().

ok tb@@ martynas@@
@
text
@/*	$OpenBSD: n_pow.c,v 1.12 2009/10/27 23:59:29 deraadt Exp $	*/
/*	$NetBSD: n_pow.c,v 1.1 1995/10/10 23:37:02 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* POW(X,Y)
 * RETURN X**Y
 * DOUBLE PRECISION (VAX D format 56 bits, IEEE DOUBLE 53 BITS)
 * CODED IN C BY K.C. NG, 1/8/85;
 * REVISED BY K.C. NG on 7/10/85.
 * KERNEL pow_P() REPLACED BY P. McILROY 7/22/92.
 * Required system supported functions:
 *      scalbn(x,n)
 *      logb(x)
 *	copysign(x,y)
 *	isfinite(x)
 *	remainder(x,y)
 *
 * Required kernel functions:
 *	exp__D(a,c)			exp(a + c) for |a| << |c|
 *	struct d_double dlog(x)		r.a + r.b, |r.b| < |r.a|
 *
 * Method
 *	1. Compute and return log(x) in three pieces:
 *		log(x) = n*ln2 + hi + lo,
 *	   where n is an integer.
 *	2. Perform y*log(x) by simulating muti-precision arithmetic and
 *	   return the answer in three pieces:
 *		y*log(x) = m*ln2 + hi + lo,
 *	   where m is an integer.
 *	3. Return x**y = exp(y*log(x))
 *		= 2^m * ( exp(hi+lo) ).
 *
 * Special cases:
 *	(anything) ** 0  is 1 ;
 *	(anything) ** 1  is itself;
 *	(anything) ** NaN is NaN;
 *	NaN ** (anything except 0) is NaN;
 *	+(anything > 1) ** +INF is +INF;
 *	-(anything > 1) ** +INF is NaN;
 *	+-(anything > 1) ** -INF is +0;
 *	+-(anything < 1) ** +INF is +0;
 *	+(anything < 1) ** -INF is +INF;
 *	-(anything < 1) ** -INF is NaN;
 *	+-1 ** +-INF is NaN and signal INVALID;
 *	+0 ** +(anything except 0, NaN)  is +0;
 *	-0 ** +(anything except 0, NaN, odd integer)  is +0;
 *	+0 ** -(anything except 0, NaN)  is +INF and signal DIV-BY-ZERO;
 *	-0 ** -(anything except 0, NaN, odd integer)  is +INF with signal;
 *	-0 ** (odd integer) = -( +0 ** (odd integer) );
 *	+INF ** +(anything except 0,NaN) is +INF;
 *	+INF ** -(anything except 0,NaN) is +0;
 *	-INF ** (odd integer) = -( +INF ** (odd integer) );
 *	-INF ** (even integer) = ( +INF ** (even integer) );
 *	-INF ** -(anything except integer,NaN) is NaN with signal;
 *	-(x=anything) ** (k=integer) is (-1)**k * (x ** k);
 *	-(anything except 0) ** (non-integer) is NaN with signal;
 *
 * Accuracy:
 *	pow(x,y) returns x**y nearly rounded. In particular, on a SUN, a VAX,
 *	and a Zilog Z8000,
 *			pow(integer,integer)
 *	always returns the correct integer provided it is representable.
 *	In a test run with 100,000 random arguments with 0 < x, y < 20.0
 *	on a VAX, the maximum observed error was 1.79 ulps (units in the
 *	last place).
 *
 * Constants :
 * The hexadecimal values are the intended ones for the following constants.
 * The decimal values may be used, provided that the compiler will convert
 * from decimal to binary accurately enough to produce the hexadecimal values
 * shown.
 */

#include <errno.h>
#include <math.h>

#include "mathimpl.h"

#if defined(__vax__)
#define TRUNC(x)	x = (double) (float) x
#define _IEEE		0
#else
#define _IEEE		1
#define endian		(((*(int *) &one)) ? 1 : 0)
#define TRUNC(x) 	*(((int *) &x)+endian) &= 0xf8000000
#define infnan(x)	0.0
#endif		/* defined(__vax__) */

static const double zero=0.0, one=1.0, two=2.0, negone= -1.0;

static double pow_P(double, double);

double
pow(double x, double y)
{
	double t;
	if (y==zero)
		return (one);
	else if (y==one || isnan(x))
		return (x);		/* if x is NaN or y=1 */
	else if (isnan(y))		/* if y is NaN */
		return (y);
	else if (!isfinite(y))		/* if y is INF */
		if ((t=fabs(x))==one)	/* +-1 ** +-INF is NaN */
			return (y - y);
		else if (t>one)
			return ((y<0)? zero : ((x<zero)? y-y : y));
		else
			return ((y>0)? zero : ((x<0)? y-y : -y));
	else if (y==two)
		return (x*x);
	else if (y==negone)
		return (one/x);
    /* x > 0, x == +0 */
	else if (copysign(one, x) == one)
		return (pow_P(x, y));

    /* sign(x)= -1 */
	/* if y is an even integer */
	else if ( (t=remainder(y,two)) == zero)
		return (pow_P(-x, y));

	/* if y is an odd integer */
	else if (copysign(t,one) == one)
		return (-pow_P(-x, y));

	/* Henceforth y is not an integer */
	else if (x==zero)	/* x is -0 */
		return ((y>zero)? -x : one/(-x));
	else if (_IEEE)
		return (zero/zero);
	else
		return (infnan(EDOM));
}
/* kernel function for x >= 0 */
static double
pow_P(double x, double y)
{
	struct Double s, t;
	double  huge = 1e300, tiny = 1e-300;

	if (x == zero)
		if (y > zero)
			return (zero);
		else if (_IEEE)
			return (huge*huge);
		else
			return (infnan(ERANGE));
	if (x == one)
		return (one);
	if (!isfinite(x))
		if (y < zero)
			return (zero);
		else if (_IEEE)
			return (huge*huge);
		else
			return (infnan(ERANGE));
	if (y >= 7e18)		/* infinity */
		if (x < 1)
			return(tiny*tiny);
		else if (_IEEE)
			return (huge*huge);
		else
			return (infnan(ERANGE));

	/* Return exp(y*log(x)), using simulated extended */
	/* precision for the log and the multiply.	  */

	s = __log__D(x);
	t.a = y;
	TRUNC(t.a);
	t.b = y - t.a;
	t.b = s.b*y + t.b*s.a;
	t.a *= s.a;
	s.a = t.a + t.b;
	s.b = (t.a - s.a) + t.b;
	return (__exp__D(s.a, s.b));
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: n_pow.c,v 1.11 2009/04/05 02:12:43 martynas Exp $	*/
d42 1
a42 1
 *	finite(x)
d130 1
a130 1
	else if (!finite(y))		/* if y is INF */
d178 1
a178 1
	if (!finite(x))
@


1.11
log
@const static -> static const;  since it's deprecated per C99.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_pow.c,v 1.10 2008/06/25 17:49:31 martynas Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)pow.c	8.1 (Berkeley) 6/4/93";
#endif /* not lint */
@


1.10
log
@- expressions such as x != x and x == x are prone to errors and
ugly, when we have isnan and isinf
- no need to check for _IEEE, when checking for not-a-number
- remove some impossible checks
- while here, drem->remainder, as drem is just an obsolete alias
now
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_pow.c,v 1.9 2008/06/21 08:26:19 martynas Exp $	*/
d120 1
a120 1
const static double zero=0.0, one=1.0, two=2.0, negone= -1.0;
@


1.9
log
@cleaning up, no functional changes
- no support for National 32000, removing ns32000/national ifdefs maze
- remove tahoe defs
- ansify
looks fine to millert@@;  who also noticed rint removal
@
text
@d1 1
a1 1
/*	$OpenBSD: n_pow.c,v 1.8 2008/06/12 22:43:36 martynas Exp $	*/
d47 1
a47 1
 *	drem(x,y)
d130 1
a130 1
	else if (y==one || (_IEEE && x != x))
d132 1
a132 1
	else if (_IEEE && y!=y)		/* if y is NaN */
d151 1
a151 1
	else if ( (t=drem(y,two)) == zero)
@


1.8
log
@spacing, add rcs ids, no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d110 1
a110 1
#if (defined(__vax__) || defined(tahoe))
d118 1
a118 1
#endif		/* vax or tahoe */
d124 2
a125 2
double pow(x,y)
double x,y;
@


1.7
log
@some cleanup for noieee_src, as asked by millert@@: remove fictional
includes, include math.h where needed and remove redundant declarations
ok millert@@
@
text
@d1 2
a2 1
/*      $NetBSD: n_pow.c,v 1.1 1995/10/10 23:37:02 ragge Exp $ */
d36 2
a37 2
/* POW(X,Y)  
 * RETURN X**Y 
d39 1
a39 1
 * CODED IN C BY K.C. NG, 1/8/85; 
d43 4
a46 4
 *      scalbn(x,n)      
 *      logb(x)         
 *	copysign(x,y)	
 *	finite(x)	
d57 1
a57 1
 *	2. Perform y*log(x) by simulating muti-precision arithmetic and 
d95 1
a95 1
 *	on a VAX, the maximum observed error was 1.79 ulps (units in the 
d124 1
a124 1
double pow(x,y)  	
@


1.6
log
@- no need for ifdef dance (21), we have isnan, finite for vax
- TEST_FMOD doesn't belong here, remove
- remove ifdef _ANSI_SOURCE and assume it's default
ok millert@@
@
text
@d169 2
a170 2
	struct Double s, t, __log__D();
	double  __exp__D(), huge = 1e300, tiny = 1e-300;
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@a166 1
#ifdef _ANSI_SOURCE
a167 3
#else
pow_P(x, y) double x, y;
#endif
@


1.4
log
@scalb() in vax libm is in fact scalbn(), so change the symbol name.
Only affects vax, which has no shared libraries, so no version change
needed for libm.
Someone with enough math skills ought to code a real scalb() on a rainy day...
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d46 1
a46 1
 *      scalb(x,n)      
@


1.2
log
@^vax^__vax__
@
text
@d125 1
a125 1
static double pow_P __P((double, double));
@


1.1
log
@Initial revision
@
text
@d113 1
a113 1
#if (defined(vax) || defined(tahoe))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
