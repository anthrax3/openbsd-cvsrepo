head	1.34;
access;
symbols
	OPENBSD_6_2:1.34.0.4
	OPENBSD_6_2_BASE:1.34
	OPENBSD_6_1:1.34.0.6
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.2
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.29.0.4
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.6
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.28.0.6
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.4
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.27.0.2
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.25.0.6
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.20.0.6
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.12
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.10
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.8
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.6
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.34
date	2016.06.01.13.43.54;	author tb;	state Exp;
branches;
next	1.33;
commitid	dfy03L8bxPOFsTZi;

1.33
date	2016.04.26.19.49.22;	author tb;	state Exp;
branches;
next	1.32;
commitid	xVDfgDPuad87Upq8;

1.32
date	2016.03.12.18.15.20;	author tb;	state Exp;
branches;
next	1.31;
commitid	C7Cvbg9KG8Wsuit8;

1.31
date	2016.03.10.22.29.38;	author tb;	state Exp;
branches;
next	1.30;
commitid	bdzXSKP3UzBxvCb8;

1.30
date	2016.03.10.11.45.37;	author jmc;	state Exp;
branches;
next	1.29;
commitid	ObhLkDxIm4cyWdyG;

1.29
date	2015.01.15.19.06.31;	author schwarze;	state Exp;
branches;
next	1.28;
commitid	dven8mWEy4wx3j1c;

1.28
date	2013.11.03.18.28.27;	author martynas;	state Exp;
branches;
next	1.27;

1.27
date	2013.07.17.05.42.11;	author schwarze;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.05.03.40.26;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2012.01.14.14.57.44;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.07.01.34.52;	author martynas;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.07.00.54.16;	author martynas;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.19.26.14;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2009.10.24.10.06.02;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.12.00.10.26;	author martynas;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.30.08.02.35;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.29.21.57.13;	author martynas;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.31.19.19.35;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.10.42.43;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.20.09.17.51;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.08.09.09.45;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.27.04.44.46;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.27.01.07.43;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.15.02.15.28;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.14.21.31.46;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.02.00.29.49;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	99.07.09.13.35.26;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	99.07.07.10.50.06;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.07.01.00.06.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.05.16.19.55.59;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	97.04.05.04.18.48;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.10.28.00.56.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Use \(mi instead of - for the mathematical minus sign as recommended by
mandoc_char(7).  While there, use some spacing around the arithmetic
operations to make the more complicated formulas a bit easier to read.

looks good to kettenis, no objection from schwarze
@
text
@.\"	$OpenBSD: exp.3,v 1.33 2016/04/26 19:49:22 tb Exp $
.\"
.\" Copyright (c) 1985, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     from: @@(#)exp.3	6.12 (Berkeley) 7/31/91
.\"
.Dd $Mdocdate: April 26 2016 $
.Dt EXP 3
.Os
.Sh NAME
.Nm exp ,
.Nm expf ,
.Nm expl ,
.Nm exp2 ,
.Nm exp2f ,
.Nm exp2l ,
.Nm expm1 ,
.Nm expm1f ,
.Nm expm1l ,
.Nm log ,
.Nm logf ,
.Nm logl ,
.Nm log2 ,
.Nm log2f ,
.Nm log2l ,
.Nm log10 ,
.Nm log10f ,
.Nm log10l ,
.Nm log1p ,
.Nm log1pf ,
.Nm log1pl ,
.Nm pow ,
.Nm powf ,
.Nm powl
.Nd exponential, logarithm, power functions
.Sh SYNOPSIS
.In math.h
.Ft double
.Fn exp "double x"
.Ft float
.Fn expf "float x"
.Ft long double
.Fn expl "long double x"
.Ft double
.Fn exp2 "double x"
.Ft float
.Fn exp2f "float x"
.Ft long double
.Fn exp2l "long double x"
.Ft double
.Fn expm1 "double x"
.Ft float
.Fn expm1f "float x"
.Ft long double
.Fn expm1l "long double x"
.Ft double
.Fn log "double x"
.Ft float
.Fn logf "float x"
.Ft long double
.Fn logl "long double x"
.Ft double
.Fn log2 "double x"
.Ft float
.Fn log2f "float x"
.Ft long double
.Fn log2l "long double x"
.Ft double
.Fn log10 "double x"
.Ft float
.Fn log10f "float x"
.Ft long double
.Fn log10l "long double x"
.Ft double
.Fn log1p "double x"
.Ft float
.Fn log1pf "float x"
.Ft long double
.Fn log1pl "long double x"
.Ft double
.Fn pow "double x" "double y"
.Ft float
.Fn powf "float x" "float y"
.Ft long double
.Fn powl "long double x" "long double y"
.Sh DESCRIPTION
The
.Fn exp
function computes the base
.Ms e
exponential value of the given argument
.Fa x .
The
.Fn expf
function is a single precision version of
.Fn exp .
The
.Fn expl
function is an extended precision version of
.Fn exp .
.Pp
The
.Fn exp2
function computes the base 2 exponential of the given argument
.Fa x .
The
.Fn exp2f
function is a single precision version of
.Fn exp2 .
The
.Fn exp2l
function is an extended precision version of
.Fn exp2 .
.Pp
The
.Fn expm1
function computes the value exp(x) \(mi 1 accurately even for tiny argument
.Fa x .
The
.Fn expm1f
function is a single precision version of
.Fn expm1 .
The
.Fn expm1l
function is an extended precision version of
.Fn expm1 .
.Pp
The
.Fn log
function computes the value of the natural logarithm of argument
.Fa x .
The
.Fn logf
function is a single precision version of
.Fn log .
The
.Fn logl
function is an extended precision version of
.Fn log .
.Pp
The
.Fn log2
function computes the value of the logarithm of argument
.Fa x
to base 2.
The
.Fn log2f
function is a single precision version of
.Fn log2 .
The
.Fn log2l
function is an extended precision version of
.Fn log2 .
.Pp
The
.Fn log10
function computes the value of the logarithm of argument
.Fa x
to base 10.
The
.Fn log10f
function is a single precision version of
.Fn log10 .
The
.Fn log10l
function is an extended precision version of
.Fn log10 .
.Pp
The
.Fn log1p
function computes
the value of log(1 + x) accurately even for tiny argument
.Fa x .
The
.Fn log1pf
function is a single precision version of
.Fn log1p .
The
.Fn log1pl
function is an extended precision version of
.Fn log1p .
.Pp
The
.Fn pow
function computes the value of
.Ar x
to the exponent
.Ar y .
The
.Fn powf
function is a single precision version of
.Fn pow .
The
.Fn powl
function is an extended precision version of
.Fn pow .
.Sh RETURN VALUES
These functions will return the appropriate computation unless an error
occurs or an argument is out of range.
The functions
.Fn exp ,
.Fn expm1
and
.Fn pow
detect if the computed value will overflow
and set the global variable
.Va errno
to
.Er ERANGE .
The function
.Fn pow x y
checks to see if
.Fa x
< 0 and
.Fa y
is not an integer, in the event this is true,
the global variable
.Va errno
is set to
.Er EDOM .
.Sh ERRORS (due to Roundoff etc.)
exp(x), log(x), expm1(x) and log1p(x) are accurate to within
an
.Em ulp ,
and log10(x) to within about 2
.Em ulps ;
an
.Em ulp
is one
.Em Unit
in the
.Em Last
.Em Place .
The error in
.Fn pow x y
is below about 2
.Em ulps
when its
magnitude is moderate, but increases as
.Fn pow x y
approaches
the over/underflow thresholds until almost as many bits could be
lost as are occupied by the floating\-point format's exponent
field; that is 11 bits for IEEE 754 Double.
No such drastic loss has been exposed by testing; the worst
errors observed have been below 300
.Em ulps
for IEEE 754 Double.
Moderate values of
.Fn pow
are accurate enough that
.Fn pow integer integer
is exact until it is bigger than 2**53 for IEEE 754.
.Sh NOTES
The functions exp(x) \(mi 1 and log(1 + x) are called
expm1 and logp1 in BASIC on the Hewlett\-Packard HP-71B
and APPLE Macintosh, EXP1 and LN1 in Pascal, exp1 and log1 in C
on APPLE Macintoshes, where they have been provided to make
sure financial calculations of ((1 + x)**n \(mi 1) / x, namely
expm1(n * log1p(x)) / x, will be accurate when x is tiny.
They also provide accurate inverse hyperbolic functions.
.Pp
The function
.Fn pow x 0
returns x**0 = 1 for all x including x = 0 and infinity.
Previous implementations of
.Fn pow
may have defined x**0 to be undefined in some or all of these cases.
Here are reasons for returning x**0 = 1 always:
.Bl -enum -width indent
.It
Any program that already tests whether x is zero (or
infinite or NaN) before computing x**0 cannot care
whether 0**0 = 1 or not.
Any program that depends upon 0**0 to be invalid is dubious anyway since that
expression's meaning and, if invalid, its consequences
vary from one computer system to another.
.It
Some Algebra texts (e.g., Sigler's) define x**0 = 1 for
all x, including x = 0.
This is compatible with the convention that accepts a[0]
as the value of polynomial
.Bd -literal -offset indent
p(x) = a[0]*x**0 + a[1]*x**1 + a[2]*x**2 +...+ a[n]*x**n
.Ed
.Pp
at x = 0 rather than reject a[0]*0**0 as invalid.
.It
Analysts will accept 0**0 = 1 despite that x**y can
approach anything or nothing as x and y approach 0
independently.
The reason for setting 0**0 = 1 anyway is this:
.Bd -filled -offset indent
If x(z) and y(z) are
.Em any
functions analytic (expandable
in power series) in z around z = 0, and if there
x(0) = y(0) = 0, then x(z)**y(z) \(-> 1 as z \(-> 0.
.Ed
.It
If 0**0 = 1, then infinity**0 = 1/0**0 = 1 too; and
then NaN**0 = 1 too because x**0 = 1 for all finite
and infinite x, i.e., independently of x.
.El
.Sh SEE ALSO
.Xr fpclassify 3 ,
.Xr ilogb 3
.Sh HISTORY
The
.Fn exp
and
.Fn log
functions first appeared in
.At v1 ;
.Fn pow
in
.At v3 ;
.Fn log10
in
.At v7 ;
.Fn log1p
and
.Fn expm1
in
.Bx 4.3 .
@


1.33
log
@Remove predefined strings from libm pages.

With lots of help, input and tweaks and finally ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.32 2016/03/12 18:15:20 tb Exp $
d32 1
a32 1
.Dd $Mdocdate: March 12 2016 $
d142 1
a142 1
function computes the value exp(x)\-1 accurately even for tiny argument
d197 1
a197 1
the value of log(1+x) accurately even for tiny argument
d280 1
a280 1
The functions exp(x)\-1 and log(1+x) are called
d284 2
a285 2
sure financial calculations of ((1+x)**n\-1)/x, namely
expm1(n*log1p(x))/x, will be accurate when x is tiny.
@


1.32
log
@Fix markup problem introduced in the previous commit. Solution and
explanations provided by schwarze@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.31 2016/03/10 22:29:38 tb Exp $
d32 1
a32 1
.Dd $Mdocdate: March 10 2016 $
d285 1
a285 1
expm1(n\(**log1p(x))/x, will be accurate when x is tiny.
d290 1
a290 5
returns x**0 = 1 for all x including x = 0 and
.if n \
\*(If.
.if t \
\(if.
d298 1
a298 1
infinite or \*(Na) before computing x**0 cannot care
d309 1
a309 1
p(x) = a[0]\(**x**0 + a[1]\(**x**1 + a[2]\(**x**2 +...+ a[n]\(**x**n
d312 1
a312 1
at x = 0 rather than reject a[0]\(**0**0 as invalid.
d326 2
a327 6
If 0**0 = 1, then
.if n \
\*(If**0 = 1/0**0 = 1 too; and
.if t \
\(if**0 = 1/0**0 = 1 too; and
then \*(Na**0 = 1 too because x**0 = 1 for all finite
d331 1
@


1.31
log
@Remove VAX-specific bits of libm manpages.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.30 2016/03/10 11:45:37 jmc Exp $
d290 1
a290 1
returns x**0 = 1 for all x including x = 0,
d292 1
a292 1
\*(If
d294 1
a294 2
\(if
.Ns .
@


1.30
log
@remove Xr to infnan, a trickily hidden (from me anyway) vax page;
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.29 2015/01/15 19:06:31 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: January 15 2015 $
d230 2
a231 2
detect if the computed value will overflow,
set the global variable
d234 1
a234 2
.Er ERANGE
and cause a reserved operand fault on a VAX or Tahoe.
d245 1
a245 14
.Er EDOM
and on the VAX and Tahoe generate a reserved operand fault.
On a VAX and Tahoe,
.Va errno
is set to
.Er EDOM
and the reserved operand is returned
by log unless
.Fa x
> 0, by
.Fn log1p
unless
.Fa x
> \-1.
d269 1
a269 3
field; that is 8 bits for
.Dq VAX D
and 11 bits for IEEE 754 Double.
d271 1
a271 5
errors observed have been below 20
.Em ulps
for
.Dq VAX D ,
300
d278 1
a278 2
is exact until it is bigger than 2**56 on a VAX,
2**53 for IEEE 754.
d295 1
a295 4
(not found on a VAX),
and
.Em \*(Na
(the reserved operand on a VAX).
@


1.29
log
@remove .Tn; from Jan Stary <hans at stare dot cz>
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.28 2013/11/03 18:28:27 martynas Exp $
d32 1
a32 1
.Dd $Mdocdate: November 3 2013 $
d364 1
a364 2
.Xr ilogb 3 ,
.Xr infnan 3
@


1.28
log
@NaN -> \*(Na
{infinity, inf} -> \*(If
OK jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.27 2013/07/17 05:42:11 schwarze Exp $
d32 1
a32 1
.Dd $Mdocdate: July 17 2013 $
d235 1
a235 4
and cause a reserved operand fault on a
.Tn VAX
or
.Tn Tahoe .
d247 2
a248 9
and on the
.Tn VAX
and
.Tn Tahoe
generate a reserved operand fault.
On a
.Tn VAX
and
.Tn Tahoe ,
d284 1
a284 1
.Tn "VAX D"
d290 1
a290 1
.Tn "VAX D" ,
d293 1
a293 3
for
.Tn IEEE
754 Double.
d298 2
a299 5
is exact until it is bigger than 2**56 on a
.Tn VAX ,
2**53 for
.Tn IEEE
754.
d302 3
a304 14
expm1 and logp1 in
.Tn BASIC
on the Hewlett\-Packard
.Tn HP Ns \-71B
and
.Tn APPLE
Macintosh,
.Tn EXP1
and
.Tn LN1
in Pascal, exp1 and log1 in C
on
.Tn APPLE
Macintoshes, where they have been provided to make
d316 1
a316 2
(not found on a
.Tn VAX ) ,
d319 4
a322 5
(the reserved
operand on a
.Tn VAX ) .
Previous implementations of pow may
have defined x**0 to be undefined in some or all of these cases.
@


1.27
log
@more library history
facts checked by sobrado@@
style tweaks and ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.26 2013/06/05 03:40:26 tedu Exp $
d32 1
a32 1
.Dd $Mdocdate: June 5 2013 $
d339 1
a339 1
Infinity
d345 1
a345 1
.Em NaN
d385 1
a385 1
infinity**0 = 1/0**0 = 1 too; and
@


1.26
log
@use fancy .In macro for includes. from Jan Klemkow. ok jmc schwarze
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.25 2012/01/14 14:57:44 espie Exp $
d32 1
a32 1
.Dd $Mdocdate: January 14 2012 $
d395 3
a397 2
A
.Fn exp ,
d399 2
a400 1
and
d402 2
a403 4
functions
appeared in
.At v6 .
A
d405 2
a406 4
function
appeared in
.At v7 .
The
d410 1
a410 1
functions appeared in
@


1.25
log
@many ways to get a log2... clue newbs.

okay jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.24 2011/07/07 01:34:52 martynas Exp $
d32 1
a32 1
.Dd $Mdocdate: July 7 2011 $
d62 1
a62 1
.Fd #include <math.h>
@


1.24
log
@Remove references to math(3).
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.23 2011/07/07 00:54:16 martynas Exp $
d392 1
@


1.23
log
@Document extended-precision routines.
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.22 2009/10/27 19:26:14 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: October 27 2009 $
d392 1
a392 2
.Xr infnan 3 ,
.Xr math 3
@


1.22
log
@reorder the log functions slightly; from thomas pfaff
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.21 2009/10/24 10:06:02 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: October 24 2009 $
d38 1
d44 1
d47 1
d50 1
d53 1
d56 1
d58 2
a59 1
.Nm powf
d67 2
d79 2
d85 2
d91 2
d97 2
d103 2
d109 2
d122 4
d148 4
d161 4
d175 4
d189 4
d203 4
d217 4
@


1.21
log
@document log2() and log2f(); from thomas pfaff
ok otto millert martynas
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.20 2008/12/12 00:10:26 martynas Exp $
d32 1
a32 1
.Dd $Mdocdate: December 12 2008 $
d134 1
a134 1
.Fn log10
d137 1
a137 1
to base 10.
d139 1
a139 1
.Fn log10f
d141 1
a141 1
.Fn log10 .
d144 1
a144 1
.Fn log2
d147 1
a147 1
to base 2.
d149 1
a149 1
.Fn log2f
d151 1
a151 1
.Fn log2 .
@


1.20
log
@document and mlink long double functions.  ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.19 2008/07/30 08:02:35 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: July 30 2008 $
d45 2
d75 4
d142 10
@


1.19
log
@various markup/grammar fixes for previous, and a missing MLINK
for remquof.3;
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.18 2008/07/29 21:57:13 martynas Exp $
d32 1
a32 1
.Dd $Mdocdate: July 29 2008 $
d40 1
d62 2
d103 4
@


1.18
log
@describe exp2, exp2f and mlink them
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.17 2007/05/31 19:19:35 jmc Exp $
d32 1
a32 1
.Dd $Mdocdate: May 31 2007 $
d96 1
a96 1
.Fa x .  
d98 1
a98 1
.Fn exp2f  
@


1.17
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.16 2003/06/02 20:18:41 millert Exp $
d32 1
a32 1
.Dd $Mdocdate$
d38 2
d58 4
d84 3
a86 1
function computes the exponential value of the given argument
d92 9
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.15 2003/06/02 10:42:43 jmc Exp $
d32 1
a32 1
.Dd July 31, 1991
@


1.15
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.14 2003/05/20 09:17:51 jmc Exp $
d14 1
a14 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@- typos
- new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.13 2003/05/08 09:09:45 jmc Exp $
a136 45
.Sh ERRORS (due to Roundoff etc.)
exp(x), log(x), expm1(x) and log1p(x) are accurate to within
an
.Em ulp ,
and log10(x) to within about 2
.Em ulps ;
an
.Em ulp
is one
.Em Unit
in the
.Em Last
.Em Place .
The error in
.Fn pow x y
is below about 2
.Em ulps
when its
magnitude is moderate, but increases as
.Fn pow x y
approaches
the over/underflow thresholds until almost as many bits could be
lost as are occupied by the floating\-point format's exponent
field; that is 8 bits for
.Tn "VAX D"
and 11 bits for IEEE 754 Double.
No such drastic loss has been exposed by testing; the worst
errors observed have been below 20
.Em ulps
for
.Tn "VAX D" ,
300
.Em ulps
for
.Tn IEEE
754 Double.
Moderate values of
.Fn pow
are accurate enough that
.Fn pow integer integer
is exact until it is bigger than 2**56 on a
.Tn VAX ,
2**53 for
.Tn IEEE
754.
d185 45
@


1.13
log
@ERROR -> ERRORS in .Sh, as per mdoc template.
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.12 2003/02/27 04:44:46 jason Exp $
d86 1
a86 1
function is a single precision version of 
d192 2
a193 1
.Va errno to
d263 4
a266 3
.Tn VAX ) .  Previous implementations of pow may
have defined x**0 to be undefined in some or all of these
cases.  Here are reasons for returning x**0 = 1 always:
d271 2
a272 2
whether 0**0 = 1 or not. Any program that depends
upon 0**0 to be invalid is dubious anyway since that
@


1.12
log
@another pass at cleaning
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.11 2003/02/27 01:07:43 jason Exp $
d137 1
a137 1
.Sh ERROR (due to Roundoff etc.)
@


1.11
log
@describe *f in terms of the double precision version (more of this to come...  after dinner).
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.10 2000/04/15 02:15:28 aaron Exp $
d129 1
a129 2
computes the value
of
@


1.10
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.9 2000/03/14 21:31:46 aaron Exp $
d84 4
d93 4
d102 4
d112 4
d122 4
d134 4
@


1.9
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 2
a2 1
.\"	$OpenBSD: exp.3,v 1.8 2000/03/02 00:29:49 todd Exp $
d93 1
a93 1
.Fa x.
@


1.8
log
@$OpenBSD$
@
text
@d1 1
a1 1
.\"	$OpenBSD: exp.3,v 1.7 1999/07/09 13:35:26 aaron Exp $
d250 1
a250 1
Some Algebra texts (e.g. Sigler's) define x**0 = 1 for
@


1.7
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a33 1
.\"	$Id: exp.3,v 1.6 1999/07/07 10:50:06 aaron Exp $
@


1.6
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d33 1
a33 1
.\"	$Id: exp.3,v 1.5 1999/07/01 00:06:40 deraadt Exp $
d91 1
a91 1
function computes the value of the natural logarithm of argument 
d114 1
a114 1
exp(x), log(x), expm1(x) and log1p(x) are accurate to within 
d247 1
a247 1
expression's meaning and, if invalid, its consequences 
d250 1
a250 1
Some Algebra texts (e.g. Sigler's) define x**0 = 1 for 
d268 1
a268 1
in power series) in z around z = 0, and if there 
@


1.5
log
@provide MLINKS for "f" versions, and make sure they show up in whatis.db
@
text
@d33 1
a33 1
.\"	$Id: exp.3,v 1.4 1999/05/16 19:55:59 alex Exp $
d37 1
a37 1
.Os 
@


1.4
log
@Cleanup xrefs under SEE ALSO.  Specifically:

  - Sort xrefs by section, and then alphabetically.
  - Add missing commas between xref items.
  - Remove commas from the last xref entry.
  - Remove duplicate entries.
@
text
@d33 1
a33 1
.\"	$Id: exp.3,v 1.3 1997/04/05 04:18:48 tholo Exp $
d40 1
d42 1
d44 1
d46 1
d48 3
a50 1
.Nm pow
@


1.3
log
@From NetBSD PR/3405: Krister Walfridsson <cato@@ulysses.df.lth.se>: Various
typos; since we compile with POSIX libm, we should not xref matherr(3), and
describe the errno settings.
@
text
@d33 1
a33 1
.\"	$Id: exp.3,v 1.2 1995/10/28 00:56:52 deraadt Exp $
d275 2
a276 2
.Xr math 3 ,
.Xr infnan 3
@


1.2
log
@update from NetBSD
@
text
@d33 1
a33 1
.\"	$Id: exp.3,v 1.9 1995/04/27 18:21:43 jtc Exp $
d37 1
a37 1
.Os BSD 4
d71 1
a71 1
.Fn powf "float x" float y"
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
