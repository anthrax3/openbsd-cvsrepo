head	1.26;
access;
symbols
	OPENBSD_4_9:1.25.0.6
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.25.0.4
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.24.0.8
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.4
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.2
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.22.0.4
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.2
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.21.0.2
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.20.0.12
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.10
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.8
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.6
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.4
	OPENBSD_3_6_BASE:1.20
	OPENBSD_3_5:1.20.0.2
	OPENBSD_3_5_BASE:1.20
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.9.0.12
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.10
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.26
date	2011.07.07.01.20.24;	author martynas;	state dead;
branches;
next	1.25;

1.25
date	2010.02.20.20.37.51;	author schwarze;	state Exp;
branches;
next	1.24;

1.24
date	2008.07.29.22.12.29;	author martynas;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.16.10.15.16;	author martynas;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.31.19.19.36;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.06.20.51.17;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2004.01.23.23.08.46;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.21.20.11.56;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.10.42.43;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.05.18.44.43;	author jason;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.30.06.19.36;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.28.09.51.33;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.01.21.10.53;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.28.20.38.09;	author jason;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.28.20.32.02;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.28.19.43.28;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.12.21.48.04;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.02.00.29.50;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	99.08.16.23.26.02;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.02.27.12.19.34;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.09.26.01.27.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.03.17.38.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.02.06.42.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.28.00.56.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Remove math(3).  OK theo.
@
text
@.\"	$OpenBSD: math.3,v 1.25 2010/02/20 20:37:51 schwarze Exp $
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	from: @@(#)math.3	6.10 (Berkeley) 5/6/91
.\"
.Dd $Mdocdate: February 20 2010 $
.Dt MATH 3
.Os
.Sh NAME
.Nm math
.Nd introduction to mathematical library functions
.Sh DESCRIPTION
These functions constitute the C math library,
.Em libm .
The link editor searches this library under the
.Dq -lm
option.
Declarations for these functions may be obtained from the include file
.Aq Pa math.h .
.Sh LIST OF FUNCTIONS
.Bl -column "copysign(3)" "inverse trigonometric function" "ULPs"
.It \fIName\fP Ta \fIDescription\fP Ta "\fIULPs\fP"
.It acos(3) Ta "inverse trigonometric function" Ta 3
.It acosh(3) Ta "inverse hyperbolic function" Ta 3
.It asin(3) Ta "inverse trigonometric function" Ta 3
.It asinh(3) Ta "inverse hyperbolic function" Ta 3
.It atan(3) Ta "inverse trigonometric function" Ta 1
.It atan2(3) Ta "inverse trigonometric function" Ta 2
.It atanh(3) Ta "inverse hyperbolic function" Ta 3
.It cabs(3) Ta "complex absolute value" Ta 1
.It cbrt(3) Ta "cube root" Ta 1
.It ceil(3) Ta "integer no less than" Ta 0
.It copysign(3) Ta "copy sign bit" Ta 0
.It cos(3) Ta "trigonometric function" Ta 1
.It cosh(3) Ta "hyperbolic function" Ta 3
.It erf(3) Ta "error function" Ta 1
.It erfc(3) Ta "complementary error function" Ta 1
.It exp(3) Ta "exponential" Ta 1
.It expm1(3) Ta "exp(x)-1" Ta 1
.It fabs(3) Ta "absolute value" Ta 0
.It floor(3) Ta "integer no greater than" Ta 0
.It fmod(3) Ta "remainder" Ta 0
.It fpclassify(3) Ta "classify real floating type" Ta 0
.It hypot(3) Ta "Euclidean distance" Ta 1
.It ilogb(3) Ta "exponent extraction" Ta 0
.It isfinite(3) Ta "test for finite value" Ta 0
.It isinf(3) Ta "check for infinity" Ta 0
.It isnan(3) Ta "check for not-a-number" Ta 0
.It isnormal(3) Ta "test for normal value" Ta 0
.It j0(3) Ta "Bessel function" Ta ???
.It j1(3) Ta "Bessel function" Ta ???
.It jn(3) Ta "Bessel function" Ta ???
.It lgamma(3) Ta "log gamma function" Ta 1
.It log(3) Ta "natural logarithm" Ta 1
.It log10(3) Ta "logarithm to base 10" Ta 3
.It log1p(3) Ta "log(1+x)" Ta 1
.It nan(3) Ta "generate NaN" Ta 0
.It nextafter(3) Ta "next representable number" Ta 0
.It pow(3) Ta "exponential x**y" Ta 60-500
.It remainder(3) Ta "remainder" Ta 0
.It remquo(3) Ta "remainder" Ta 0
.It rint(3) Ta "round to nearest integer" Ta 0
.It round(3) Ta "round to nearest integer" Ta 0
.It scalbn(3) Ta "exponent adjustment" Ta 0
.It signbit(3) Ta "test sign" Ta 0
.It sin(3) Ta "trigonometric function" Ta 1
.It sinh(3) Ta "hyperbolic function" Ta 3
.It sqrt(3) Ta "square root" Ta 1
.It tan(3) Ta "trigonometric function" Ta 3
.It tanh(3) Ta "hyperbolic function" Ta 3
.It tgamma(3) Ta "gamma function" Ta 4
.It trunc(3) Ta "nearest integral value" Ta 3
.It y0(3) Ta "Bessel function" Ta ???
.It y1(3) Ta "Bessel function" Ta ???
.It yn(3) Ta "Bessel function" Ta ???
.El
.Sh NOTES
In
.Bx 4.3 ,
distributed from the University of California
in late 1985, most of the foregoing functions come in two
versions, one for the double-precision
.Dq D
format in the
.Tn DEC VAX-11
family of computers, another for double-precision
arithmetic conforming to
.St -ieee754 .
The two versions behave very
similarly, as should be expected from programs more accurate
and robust than was the norm when
.Ux
was born.
For
instance, the programs are accurate to within the number of
.Em ulp Ns s
tabulated above; a
.Em ulp
is one
.Em U Ns nit
in the
.Em L Ns ast
.Em P Ns lace .
The functions have been cured of anomalies that
afflicted the older math library in which incidents like
the following had been reported:
.Bd -unfilled -offset indent
sqrt(-1.0) = 0.0 and log(-1.0) = -1.7e38.
cos(1.0e-11) \*(Gt cos(0.0) \*(Gt 1.0.
pow(x,1.0) \*(Ne x when x = 2.0, 3.0, 4.0, ..., 9.0.
pow(-1.0,1.0e10) trapped on Integer Overflow.
sqrt(1.0e30) and sqrt(1.0e-30) were very slow.
.Ed
.Pp
However, the two versions do differ in ways that have to be
explained, to which end the following notes are provided.
.Ss DEC VAX-11 D_floating-point:
This is the format for which the original math library
was developed, and to which this manual is still principally
dedicated.
It is
.Em the
double-precision format for the PDP-11
and the earlier VAX-11 machines; VAX-11s after 1983 were
provided with an optional
.Dq G
format closer to the
.Tn IEEE
double-precision format.
The earlier
.Tn DEC MicroVAXs
have no D format, only G double-precision.
(Why? Why not?)
.Pp
Properties of D_floating-point:
.Bl -tag -width "Precision:" -offset indent -compact
.It Wordsize:
64 bits, 8 bytes.
.It Radix:
Binary.
.It Precision:
56 significant bits, roughly 17 significant decimal digits.
If x and x' are consecutive positive D_floating-point
numbers (they differ by 1 \fIulp\fR), then
.Li 1.3e-17 \*(Lt 0.5**56 \*(Lt (x'-x)/x \*(Le 0.5**55 \*(Lt 2.8e-17.
.It Range:
Overflow threshold = 2.0**127 = 1.7e38.
.br
Underflow threshold = 0.5**128 = 2.9e-39.
.br
NOTE: THIS RANGE IS COMPARATIVELY NARROW.
.br
Overflow customarily stops computation.
.br
Underflow is customarily flushed quietly to zero.
.br
CAUTION:
.Bd -filled -offset indent -compact
It is possible to have x \*(Ne y and yet x-y = 0 because of underflow.
Similarly x \*(Gt y \*(Gt 0 cannot prevent either x\(**y = 0
or y/x = 0 from happening without warning.
.Ed
.It Zero is represented ambiguously.
Although 2**55 different representations of zero are accepted by
the hardware, only the obvious representation is ever produced.
There is no -0 on a VAX.
.It \*(If is not part of the VAX architecture.
.It Reserved operands:
Of the 2**55 that the hardware
recognizes, only one of them is ever produced.
Any floating-point operation upon a reserved
operand, even a MOVF or MOVD, customarily stops
computation, so they are not much used.
.It Exceptions:
Divisions by zero and operations that
overflow are invalid operations that customarily
stop computation or, in earlier machines, produce
reserved operands that will stop computation.
.It Rounding:
Every rational operation (+, -, \(**, /) on a
VAX (but not necessarily on a PDP-11), if not an
over/underflow nor division by zero, is rounded to
within half a \fIulp\fR, and when the rounding error is
exactly half a \fIulp\fR then rounding is away from 0.
.El
.Pp
Except for its narrow range, D_floating-point is one of the
better computer arithmetics designed in the 1960's.
Its properties are reflected fairly faithfully in the elementary
functions for a VAX distributed in
.Bx 4.3 .
They over/underflow only if their results have to lie out of range
or very nearly so, and then they behave much as any rational
arithmetic operation that over/underflowed would behave.
Similarly, expressions like log(0) and atanh(1) behave
like 1/0; and sqrt(-3) and acos(3) behave like 0/0;
they all produce reserved operands and/or stop computation!
The situation is described in more detail in manual pages.
.Bd -filled -offset indent
\fIThis response seems excessively punitive, so it is destined
to be replaced at some time in the foreseeable future by a
more flexible but still uniform scheme being developed to
handle all floating-point arithmetic exceptions neatly.
See
.Xr infnan 3
for the present state of affairs.\fR
.Ed
.Pp
How do the functions in
.Bx 4.3 's
new
.Em libm
for UNIX compare with their counterparts in
.Tn DEC's VAX/VMS
library?
Some of the
.Tn VMS
functions are a little faster, some are
a little more accurate, some are more puritanical about
exceptions (like pow(0.0,0.0) and atan2(0.0,0.0)),
and most occupy much more memory than their counterparts in
.Em libm .
The
.Tn VMS
implementations interpolate in large table to achieve
speed and accuracy; the
.Em libm
implementations use tricky formulas compact enough that all of them may some
day fit into a ROM.
.Pp
More importantly,
.Tn DEC
considers the
.Tn VMS
implementation proprietary and guards it zealously against unauthorized use.
In contrast, the
.Em libm
included in
.Bx 4.3
is freely distributable;
it may be copied freely provided their provenance is always
acknowledged.
Therefore, no user of
.Ux
on a machine whose arithmetic resembles VAX D_floating-point need use
anything worse than the new
.Em libm .
.Ss IEEE STANDARD 754 Floating-Point Arithmetic:
This is the most widely adopted standard for computer arithmetic.
VLSI chips that conform to some version of that standard have been
produced by a host of manufacturers, among them:
.Pp
.Bl -column -offset indent -compact "Intel i8070, i80287" "Western Electric (AT&T) WE32106"
.It "Intel i8087, i80287" Ta "National Semiconductor 32081"
.It "Motorola 68881" Ta "Weitek WTL-1032, ... , -1165"
.It "Zilog Z8070" Ta "Western Electric (AT&T) WE32106"
.El
.Pp
Other implementations range from software, done thoroughly
for the Apple Macintosh, through VLSI in the Hewlett-Packard
9000 series, to the ELXSI 6400 running ECL at 3 Megaflops.
Several other companies have adopted the formats of
.St -ieee754
without, alas, adhering to the standard's method
of handling rounding and exceptions such as over/underflow.
The
.Tn DEC VAX
G_floating-point format is very similar to
.St -ieee754
Double format.
It is so similar that the C programs for the
.Tn IEEE
versions of most of the elementary functions listed
above could easily be converted to run on a
.Tn MicroVAX ,
though nobody has volunteered to do that yet.
.Pp
The code in
.Bx 4.3 's
.Em libm
for machines that conform to
.St -ieee754
is intended primarily for the National Semi. 32081 and WTL 1164/65.
To use this code with the Intel or Zilog chips, or with the Apple
Macintosh or ELXSI 6400, is to forego the use of better code
provided (perhaps for free) by those companies and designed by some
of the authors of the code above.
Except for
.Fn atan ,
.Fn cabs ,
.Fn cbrt ,
.Fn erf ,
.Fn erfc ,
.Fn hypot ,
.Fn j0-jn ,
.Fn lgamma ,
.Fn pow
and
.Fn y0
-
.Fn yn ,
the Motorola 68881 has all the functions in
.Em libm
on chip, and is faster and more accurate to boot;
it, Apple, the i8087, Z8070 and WE32106 all use 64 significant bits.
The main virtue of
.Bx 4.3 's
.Em libm
is that it is freely distributable;
it may be copied freely provided its provenance is always acknowledged.
Therefore no user of
.Ux
on a machine that conforms to
.St -ieee754
need use anything worse than the new
.Em libm .
.Pp
Properties of
.St -ieee754
Double-Precision:
.Bl -tag -width "Precision:" -offset indent -compact
.It Wordsize:
64 bits, 8 bytes.
.It Radix:
Binary.
.It Precision:
53 significant bits, roughly equivalent to 16 significant decimals.
.br
If x and x' are consecutive positive Double-Precision
numbers (they differ by 1 \fIulp\fR, then
.br
.Li 1.1e-16 \*(Lt 0.5**53 \*(Lt (x'-x)/x \*(Le 0.5**52 \*(Lt 2.3e-16.
.It Range:
Overflow threshold = 2.0**1024 = 1.8e308
.br
Underflow threshold = 0.5**1022 = 2.2e-308
.br
Overflow goes by default to a signed \*(If.
.br
Underflow is
.Em Gradual ,
rounding to the nearest integer multiple of 0.5**1074 = 4.9e-324.
.It Zero is represented ambiguously as +0 or -0.
Its sign transforms correctly through multiplication or
division, and is preserved by addition of zeros
with like signs; but x-x yields +0 for every
finite x.
The only operations that reveal zero's
sign are division by zero and copysign(x,\*(Pm0).
In particular, comparison (x \*(Gt y, x \*(Ge y, etc.)
cannot be affected by the sign of zero; but if
finite x = y then \*(If \&= 1/(x-y) \*(Ne -1/(y-x) = -\*(If.
.It \*(If is signed.
It persists when added to itself or to any finite number.
Its sign transforms correctly through multiplication and division, and
(finite)/\*(Pm\*(If \0=\0\*(Pm0 (nonzero)/0 = \*(Pm\*(If.
But \*(If-\*(If, \*(If\(**0 and \*(If/\*(If are, like 0/0 and sqrt(-3),
invalid operations that produce \*(Na.
.It Reserved operands:
There are 2**53-2 of them, all
called \*(Na (\fIN\fRot \fIa N\fRumber).
Some, called Signaling \*(Nas, trap any floating-point operation
performed upon them; they are used to mark missing or uninitialized values,
or nonexistent elements of arrays.
The rest are Quiet \*(Nas; they are the default results of Invalid Operations,
and propagate through subsequent arithmetic operations.
If x \*(Ne x then x is \*(Na; every other predicate
(x \*(Gt y, x = y, x \*(Lt y, ...) is FALSE if \*(Na is involved.
.br
.Bl -tag -width "NOTE:" -compact
.It NOTE:
Trichotomy is violated by \*(Na.
Besides being FALSE, predicates that entail ordered
comparison, rather than mere (in)equality,
signal Invalid Operation when \*(Na is involved.
.El
.It Rounding:
Every algebraic operation (+, -, \(**, /, sqrt)
is rounded by default to within half a \fIulp\fR, and
when the rounding error is exactly half a \fIulp\fR then
the rounded value's least significant bit is zero.
This kind of rounding is usually the best kind,
sometimes provably so.
For instance, for every
x = 1.0, 2.0, 3.0, 4.0, ..., 2.0**52, we find
(x/3.0)\(**3.0 == x and (x/10.0)\(**10.0 == x and ...
despite that both the quotients and the products
have been rounded.
Only rounding like
.St -ieee754
can do that.
But no single kind of rounding can be
proved best for every circumstance, so
.St -ieee754
provides rounding towards zero or towards +\*(If or
towards -\*(If at the programmer's discretion.
The same kinds of rounding are specified for
Binary-Decimal Conversions, at least for magnitudes
between roughly 1.0e-10 and 1.0e37.
.It Exceptions:
.St -ieee754
recognizes five kinds of floating-point exceptions,
listed below in declining order of probable importance.
.Bl -column -offset indent -compact "Invalid Operation" "Gradual Underflow"
.It Em Exception Ta Em Default Result
.It "Invalid Operation" Ta "\*(Na, or FALSE"
.It "Overflow" Ta "\*(Pm\*(If"
.It "Divide by Zero" Ta "\*(Pm\*(If"
.It "Underflow" Ta "Gradual Underflow"
.It "Inexact" Ta "Rounded value"
.El
NOTE: An Exception is not an Error unless handled
badly.
What makes a class of exceptions exceptional
is that no single default response can be satisfactory
in every instance.
On the other hand, if a default
response will serve most instances satisfactorily,
the unsatisfactory instances cannot justify aborting
computation every time the exception occurs.
.El
.Pp
For each kind of floating-point exception,
.St -ieee754
provides a
.Em flag
that is raised each time its exception
is signaled, and stays raised until the program resets it.
Programs may also test, save and restore a flag.
Thus,
.St -ieee754
provides three ways by which programs may cope with exceptions for
which the default result might be unsatisfactory:
.Bl -tag -width XXX
.It 1)
Test for a condition that might cause an exception
later, and branch to avoid the exception.
.It 2)
Test a flag to see whether an exception has occurred
since the program last reset its flag.
.It 3)
Test a result to see whether it is a value that only
an exception could have produced.
.Pp
CAUTION: The only reliable ways to discover
whether Underflow has occurred are to test whether
products or quotients lie closer to zero than the
underflow threshold, or to test the Underflow
flag.
(Sums and differences cannot underflow in
.St -ieee754 ;
if x \*(Ne y then x-y is correct to
full precision and certainly nonzero regardless of
how tiny it may be.)
Products and quotients that underflow gradually can lose accuracy gradually
without vanishing, so comparing them with zero (as one might on a
.Tn VAX )
will not reveal the loss.
Fortunately, if a gradually underflowed value is
destined to be added to something bigger than the
underflow threshold, as is almost always the case,
digits lost to gradual underflow will not be missed
because they would have been rounded off anyway.
So gradual underflows are usually \fIprovably\fR ignorable.
The same cannot be said of underflows flushed to 0.
.El
.Pp
At the option of an implementor conforming to
.St -ieee754 ,
other ways to cope with exceptions may be provided:
.Bl -tag -width XXX
.It 4)
ABORT.
This mechanism classifies an exception in
advance as an incident to be handled by means
traditionally associated with error-handling
statements like "ON ERROR GO TO ...".
Different languages offer different forms of this statement,
but most share the following characteristics:
.Bl -dash
.It
No means is provided to substitute a value for
the offending operation's result and resume
computation from what may be the middle of an
expression.
An exceptional result is abandoned.
.It
In a subprogram that lacks an error-handling
statement, an exception causes the subprogram to
abort within whatever program called it, and so
on back up the chain of calling subprograms until
an error-handling statement is encountered or the
whole task is aborted and memory is dumped.
.El
.It 5)
STOP.
This mechanism, requiring an interactive debugging environment, is more
for the programmer than the program.
It classifies an exception in advance as a symptom of a programmer's error;
the exception suspends execution as near as it can to the offending operation
so that the programmer can look around to see how it happened.
Often times the first several exceptions turn out to be quite
unexceptionable, so the programmer ought ideally
to be able to resume execution after each one as if
execution had not been stopped.
.It 6)
\&... Other ways lie beyond the scope of this document.
.El
.Pp
The crucial problem for exception handling is the problem of
Scope, and the problem's solution is understood, but not
enough manpower was available to implement it fully in time
to be distributed in
.Bx 4.3 's
.Em libm .
Ideally, each elementary function should act as if it were indivisible,
or atomic, in the sense that ...
.Bl -tag -width Ds -offset XXXX
.It i)
No exception should be signaled that is not deserved by
the data supplied to that function.
.It ii)
Any exception signaled should be identified with that
function rather than with one of its subroutines.
.It iii)
The internal behavior of an atomic function should not
be disrupted when a calling program changes from
one to another of the five or so ways of handling
exceptions listed above, although the definition
of the function may be correlated intentionally
with exception handling.
.El
.Pp
Ideally, every programmer should be able to
.Em conveniently
turn a debugged subprogram into one that appears atomic to its users.
But simulating all three characteristics of an atomic function is still
a tedious affair, entailing hosts of tests and saves-restores;
work is under way to ameliorate the inconvenience.
.Pp
Meanwhile, the functions in
.Em libm
are only approximately atomic.
They signal no inappropriate exception except possibly:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Over/Underflow
when a result, if properly computed, might have lain barely within range, and
.It Inexact in \fIcabs\fR, \fIcbrt\fR, \fIhypot\fR, \fIlog10\fR and \fIpow\fR
when it happens to be exact, thanks to fortuitous cancellation of errors.
.El
.Pp
Otherwise:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It Invalid Operation is signaled only when
any result but \*(Na would probably be misleading.
.It Overflow is signaled only when
the exact result would be finite but beyond the overflow threshold.
.It Divide-by-Zero is signaled only when
a function takes exactly infinite values at finite operands.
.It Underflow is signaled only when
the exact result would be nonzero but tinier than the underflow threshold.
.It Inexact is signaled only when
greater range or precision would be needed to represent the exact result.
.El
.Pp
Properties of
.St -ieee754
Single-Precision:
.Bl -tag -width "Precision:" -offset indent -compact
.It Wordsize:
32 bits, 4 bytes.
.It Radix:
Binary.
.It Precision:
24 significant bits, roughly equivalent to 7 significant decimals.
.br
If x and x' are consecutive positive Double-Precision
numbers (they differ by 1 \fIulp\fR, then
.br
.Li 6.0e-8 \*(Lt 0.5**24 \*(Lt (x'-x)/x \*(Le 0.5**23 \*(Lt 1.2e-7.
.It Range:
Overflow threshold = 2.0**128 = 3.4e38.
.br
Underflow threshold = 0.5**126 = 1.2e-38
.br
Overflow goes by default to a signed \*(If.
.br
Underflow is
.Em Gradual ,
rounding to the nearest integer multiple of 0.5**149 = 1.4e-45.
.It Zero is represented ambiguously as +0 or -0.
Its sign transforms correctly through multiplication or
division, and is preserved by addition of zeros
with like signs; but x-x yields +0 for every
finite x.
The only operations that reveal zero's
sign are division by zero and copysign(x,\*(Pm0).
In particular, comparison (x \*(Gt y, x \*(Ge y, etc.)
cannot be affected by the sign of zero; but if
finite x = y then \*(If \&= 1/(x-y) \*(Ne -1/(y-x) = -\*(If.
.It \*(If is signed.
It persists when added to itself or to any finite number.
Its sign transforms correctly through multiplication and division, and
(finite)/\*(Pm\*(If \0=\0\*(Pm0 (nonzero)/0 = \*(Pm\*(If.
But \*(If-\*(If, \*(If\(**0 and \*(If/\*(If are, like 0/0 and sqrt(-3),
invalid operations that produce \*(Na.
.It Reserved operands:
There are 2**24-2 of them, all
called \*(Na (\fIN\fRot \fIa N\fRumber).
Some, called Signaling \*(Nas, trap any floating-point operation
performed upon them; they are used to mark missing or uninitialized values,
or nonexistent elements of arrays.
The rest are Quiet \*(Nas; they are the default results of Invalid Operations,
and propagate through subsequent arithmetic operations.
If x \*(Ne x then x is \*(Na; every other predicate
(x \*(Gt y, x = y, x \*(Lt y, ...) is FALSE if \*(Na is involved.
.br
.Bl -tag -width "NOTE:" -compact
.It NOTE:
Trichotomy is violated by \*(Na.
Besides being FALSE, predicates that entail ordered
comparison, rather than mere (in)equality,
signal Invalid Operation when \*(Na is involved.
.El
.It Rounding:
Every algebraic operation (+, -, \(**, /, sqrt)
is rounded by default to within half a \fIulp\fR, and
when the rounding error is exactly half a \fIulp\fR then
the rounded value's least significant bit is zero.
This kind of rounding is usually the best kind,
sometimes provably so.
For instance, for every
x = 1.0, 2.0, 3.0, 4.0, ..., 2.0**52, we find
(x/3.0)\(**3.0 == x and (x/10.0)\(**10.0 == x and ...
despite that both the quotients and the products
have been rounded.
Only rounding like
.St -ieee754
can do that.
But no single kind of rounding can be
proved best for every circumstance, so
.St -ieee754
provides rounding towards zero or towards +\*(If or
towards -\*(If at the programmer's discretion.
The same kinds of rounding are specified for
Binary-Decimal Conversions, at least for magnitudes
between roughly 1.0e-10 and 1.0e37.
.It Exceptions:
.St -ieee754
recognizes five kinds of floating-point exceptions,
listed below in declining order of probable importance.
.Bl -column -offset indent -compact "Invalid Operation" "Gradual Underflow"
.It Em Exception Ta Em Default Result
.It "Invalid Operation" Ta "\*(Na, or FALSE"
.It "Overflow" Ta "\*(Pm\*(If"
.It "Divide by Zero" Ta "\*(Pm\*(If"
.It "Underflow" Ta "Gradual Underflow"
.It "Inexact" Ta "Rounded value"
.El
NOTE: An Exception is not an Error unless handled
badly.
What makes a class of exceptions exceptional
is that no single default response can be satisfactory
in every instance.
On the other hand, if a default
response will serve most instances satisfactorily,
the unsatisfactory instances cannot justify aborting
computation every time the exception occurs.
.El
.Sh SEE ALSO
An explanation of
.St -ieee754
and its proposed extension p854
was published in the
.Tn IEEE
magazine MICRO in August 1984 under
the title "A Proposed Radix- and Word-length-independent
Standard for Floating-point Arithmetic" by W. J. Cody et al.
The manuals for Pascal, C and BASIC on the Apple Macintosh
document the features of
.St -ieee754
pretty well.
Articles in the
.Tn IEEE
magazine COMPUTER vol. 14 no. 3 (Mar. 1981), and in the
.Tn ACM SIGNUM
Newsletter Special Issue of Oct. 1979, may be helpful although they pertain to
superseded drafts of the standard.
.Sh BUGS
When signals are appropriate, they are emitted by certain
operations within
.Em libm ,
so a subroutine-trace may be needed to identify the function with its
signal in case method 5) above is in use.
All the code in
.Em libm
takes the
.St -ieee754
defaults for granted; this means that a decision to
trap all divisions by zero could disrupt a function that would
otherwise get a correct result despite division by zero.
@


1.25
log
@Multiple issues were killing the build with mandoc(1), thus:
 * do not use low-level roff macros like .if and .ds
 * add the missing .Os to the preamble
 * move unqualified text out of .Bl

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.24 2008/07/29 22:12:29 martynas Exp $
d31 1
a31 1
.Dd $Mdocdate: July 29 2008 $
@


1.24
log
@add descriptions for fpclassify, isfinite, isnormal, nan, remquo,
signbit
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.23 2008/06/16 10:15:16 martynas Exp $
d31 1
a31 5
.if n \
.ds Si sig.
.if t \
.ds Si significant
.Dd $Mdocdate: June 16 2008 $
d33 1
d167 1
a167 1
56 \*(Si bits, roughly 17 \*(Si decimal digits.
d330 1
a330 1
it, Apple, the i8087, Z8070 and WE32106 all use 64 \*(Si bits.
d352 1
a352 1
53 \*(Si bits, roughly equivalent to 16 \*(Si decimals.
d403 1
a403 5
Every algebraic operation (+, -, \(**, /,
.if n \
sqrt)
.if t \
\(sr)
d406 1
a406 1
the rounded value's least \*(Si bit is zero.
d492 1
a492 1
.Bl -tag -width XXX
d496 1
d602 1
a602 1
24 \*(Si bits, roughly equivalent to 7 \*(Si decimals.
d653 1
a653 5
Every algebraic operation (+, -, \(**, /,
.if n \
sqrt)
.if t \
\(sr)
d656 1
a656 1
the rounded value's least \*(Si bit is zero.
@


1.23
log
@- update list of functions.  add functions that have been added in
the past years, including round, trunc, fmod, tgamma, finite
- add missing ulp values
- better descriptions for isnan/isinf
- sort
- remove man page column.  we have mlinks so just mention man pages
directly
"yeah, that's the way to go" jmc@@;  ok millert@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.22 2007/05/31 19:19:36 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate: May 31 2007 $
a68 1
.It finite(3) Ta "test for finite value" Ta 0
d71 1
d74 1
d77 1
d85 1
d89 1
d93 1
@


1.22
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.21 2007/02/06 20:51:17 jmc Exp $
d35 1
a35 1
.Dd $Mdocdate$
d49 50
a98 44
.Bl -column "copysign" "lgamma(3)" "inverse trigonometric function" "ULPs"
.It \fIName\fP Ta \fIManual\fP Ta \fIDescription\fP Ta "\fIULPs\fP"
.It acos Ta acos(3) Ta "inverse trigonometric function" Ta 3
.It acosh Ta acosh(3) Ta "inverse hyperbolic function" Ta 3
.It asin Ta asin(3) Ta "inverse trigonometric function" Ta 3
.It asinh Ta asinh(3) Ta "inverse hyperbolic function" Ta 3
.It atan Ta tan(3) Ta "inverse trigonometric function" Ta 1
.It atanh Ta atanh(3) Ta "inverse hyperbolic function" Ta 3
.It atan2 Ta tan2(3) Ta "inverse trigonometric function" Ta 2
.It cabs Ta hypot(3) Ta "complex absolute value" Ta 1
.It cbrt Ta sqrt(3) Ta "cube root" Ta 1
.It ceil Ta floor(3) Ta "integer no less than" Ta 0
.It copysign Ta ieee(3) Ta "copy sign bit" Ta 0
.It cos Ta sin(3) Ta "trigonometric function" Ta 1
.It cosh Ta sinh(3) Ta "hyperbolic function" Ta 3
.It erf Ta erf(3) Ta "error function" Ta ???
.It erfc Ta erf(3) Ta "complementary error function" Ta ???
.It exp Ta exp(3) Ta "exponential" Ta 1
.It expm1 Ta exp(3) Ta "exp(x)-1" Ta 1
.It fabs Ta fabs(3) Ta "absolute value" Ta 0
.It floor Ta floor(3) Ta "integer no greater than" Ta 0
.It hypot Ta hypot(3) Ta "Euclidean distance" Ta 1
.It ilogb Ta ieee(3) Ta "exponent extraction" Ta 0
.It isinf Ta isinf(3) Ta "check exceptions"
.It isnan Ta isnan(3) Ta "check exceptions"
.It j0 Ta j0(3) Ta "Bessel function" Ta ???
.It j1 Ta j0(3) Ta "Bessel function" Ta ???
.It jn Ta j0(3) Ta "Bessel function" Ta ???
.It lgamma Ta lgamma(3) Ta "log gamma function" Ta ???
.It log Ta exp(3) Ta "natural logarithm" Ta 1
.It log10 Ta exp(3) Ta "logarithm to base 10" Ta 3
.It log1p Ta exp(3) Ta "log(1+x)" Ta 1
.It pow Ta exp(3) Ta "exponential x**y" Ta 60-500
.It remainder Ta ieee(3) Ta "remainder" Ta 0
.It rint Ta rint(3) Ta "round to nearest integer" Ta 0
.It scalbn Ta ieee(3) Ta "exponent adjustment" Ta 0
.It sin Ta sin(3) Ta "trigonometric function" Ta 1
.It sinh Ta sinh(3) Ta "hyperbolic function" Ta 3
.It sqrt Ta sqrt(3) Ta "square root" Ta 1
.It tan Ta tan(3) Ta "trigonometric function" Ta 3
.It tanh Ta tanh(3) Ta "hyperbolic function" Ta 3
.It y0 Ta j0(3) Ta "Bessel function" Ta ???
.It y1 Ta j0(3) Ta "Bessel function" Ta ???
.It yn Ta j0(3) Ta "Bessel function" Ta ???
@


1.21
log
@various cleanup:
- escapes for < and >
- fix some dodgy .Bd
- add a little vertical space
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.20 2004/01/23 23:08:46 jmc Exp $
d35 1
a35 1
.Dd May 6, 1991
@


1.20
log
@`Ns' implies `No', so `Ns No' -> `Ns'; (even simpler in adduser(8))
discussed with todd@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.19 2003/10/21 20:11:56 jmc Exp $
d124 1
a124 1
.Bd -unfilled -compact -offset indent
d126 1
a126 1
cos(1.0e-11) > cos(0.0) > 1.0.
d131 1
d162 1
a162 1
.Li 1.3e-17 < 0.5**56 < (x'-x)/x \*(Le 0.5**55 < 2.8e-17.
d177 1
a177 1
Similarly x > y > 0 cannot prevent either x\(**y = 0
a264 1
.Pp
d269 1
d275 1
d349 1
a349 1
.Li 1.1e-16 < 0.5**53 < (x'-x)/x \*(Le 0.5**52 < 2.3e-16.
d367 1
a367 1
In particular, comparison (x > y, x \*(Ge y, etc.)
d385 1
a385 1
(x > y, x = y, x < y, ...) is FALSE if \*(Na is involved.
d465 1
a465 1
.Bd -filled
a486 1
.Ed
a487 1
.Pp
d565 1
d572 1
d574 1
d602 1
a602 1
.Li 6.0e-8 < 0.5**24 < (x'-x)/x \*(Le 0.5**23 < 1.2e-7.
d620 1
a620 1
In particular, comparison (x > y, x \*(Ge y, etc.)
d638 1
a638 1
(x > y, x = y, x < y, ...) is FALSE if \*(Na is involved.
@


1.19
log
@hypot: uppercase Euclidean; new sentence new line
math: constrast -> contrast

from Jared Yanovich
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.18 2003/06/02 20:18:41 millert Exp $
d117 1
a117 1
.Em U Ns No nit
d119 2
a120 2
.Em L Ns No ast
.Em P Ns No lace .
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.17 2003/06/02 10:42:43 jmc Exp $
d252 1
a252 1
In constrast, the
@


1.17
log
@section reorder;
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.16 2003/05/05 18:44:43 jason Exp $
d13 1
a13 5
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@add properties of single precision IEE754
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.15 2003/04/30 06:19:36 jmc Exp $
a696 13
.Sh BUGS
When signals are appropriate, they are emitted by certain
operations within
.Em libm ,
so a subroutine-trace may be needed to identify the function with its
signal in case method 5) above is in use.
All the code in
.Em libm
takes the
.St -ieee754
defaults for granted; this means that a decision to
trap all divisions by zero could disrupt a function that would
otherwise get a correct result despite division by zero.
d716 13
@


1.15
log
@removed unused .Bd macro;
ok jason@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.14 2003/03/28 09:51:33 jmc Exp $
d587 109
@


1.14
log
@Bessel functions;
also little cleanup in math(3); whitespace and new lines;

ok jason@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.13 2003/03/01 21:10:53 millert Exp $
a162 1
.Bd -offset indent
@


1.13
log
@Use mdoc strings for !=, +-, >= and <=
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.12 2003/02/28 20:38:09 jason Exp $
d78 3
a80 3
.It j0 Ta j0(3) Ta "bessel function" Ta ???
.It j1 Ta j0(3) Ta "bessel function" Ta ???
.It jn Ta j0(3) Ta "bessel function" Ta ???
d94 3
a96 3
.It y0 Ta j0(3) Ta "bessel function" Ta ???
.It y1 Ta j0(3) Ta "bessel function" Ta ???
.It yn Ta j0(3) Ta "bessel function" Ta ???
d153 1
a153 1
(Why?  Why not?)
d156 1
a156 1
.Bl -tag -width "Precision:"  -offset indent -compact
d172 1
a172 1
NOTE:  THIS RANGE IS COMPARATIVELY NARROW.
d190 1
a190 1
of the 2**55 that the hardware
d201 1
a201 1
Every rational operation  (+, -, \(**, /) on a
d275 1
a275 1
.It "Intel i8087, i80287" Ta "National Semiconductor  32081"
d367 2
a368 1
finite x.  The only operations that reveal zero's
d436 3
a438 2
NOTE:  An Exception is not an Error unless handled
badly.  What makes a class of exceptions exceptional
d440 2
a441 1
in every instance.  On the other hand, if a default
d468 1
a468 1
.Bd -filled 
d473 2
a474 1
flag.  (Sums and differences cannot underflow in
@


1.12
log
@.Xr the right pages
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.11 2003/02/28 20:32:02 jason Exp $
d131 1
a131 1
pow(x,1.0) != x when x = 2.0, 3.0, 4.0, ..., 9.0.
d166 1
a166 1
.Li 1.3e-17 < 0.5**56 < (x'-x)/x \(<= 0.5**55 < 2.8e-17.
d180 1
a180 1
It is possible to have x != y and yet x-y = 0 because of underflow.
d352 1
a352 1
.Li 1.1e-16 < 0.5**53 < (x'-x)/x \(<= 0.5**52 < 2.3e-16.
d368 2
a369 2
sign are division by zero and copysign(x,\(+-0).
In particular, comparison (x > y, x \(>= y, etc.)
d375 1
a375 1
(finite)/\(+-\*(If \0=\0\(+-0 (nonzero)/0 = \(+- \*(If.
d430 2
a431 2
.It "Overflow" Ta "\(+-\*(If"
.It "Divide by Zero" Ta "\(+-\*(If"
@


1.11
log
@No need to waffle this much... s/roughly like/roughly
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.10 2003/02/28 19:43:28 millert Exp $
d55 3
a57 3
.It acos Ta sin(3) Ta "inverse trigonometric function" Ta 3
.It acosh Ta asinh(3) Ta "inverse hyperbolic function" Ta 3
.It asin Ta sin(3) Ta "inverse trigonometric function" Ta 3
d59 3
a61 3
.It atan Ta sin(3) Ta "inverse trigonometric function" Ta 1
.It atanh Ta asinh(3) Ta "inverse hyperbolic function" Ta 3
.It atan2 Ta sin(3) Ta "inverse trigonometric function" Ta 2
d72 1
a72 1
.It fabs Ta floor(3) Ta "absolute value" Ta 0
a77 2
.It isinff Ta isinff(3) Ta "check exceptions"
.It isnanf Ta isnanf(3) Ta "check exceptions"
d87 1
a87 1
.It rint Ta floor(3) Ta "round to nearest integer" Ta 0
d92 2
a93 2
.It tan Ta sin(3) Ta "trigonometric function" Ta 3
.It tanh Ta sinh(3) Ta "hyperbolic function" Ta 3
@


1.10
log
@Convert to mdoc and make some very minor updates.  Someone with libm clues
could do a lot of good here.
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.9 2000/04/12 21:48:04 aaron Exp $
d164 1
a164 1
56 \*(Si bits, roughly like 17 \*(Si decimals.
@


1.9
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.8 2000/03/02 00:29:50 todd Exp $
d35 10
a44 13
.TH MATH 3 "May 6, 1991"
.UC 4
.ds up \fIulp\fR
.ds nn \fINaN\fR
.de If
.if n \\
\\$1Infinity\\$2
.if t \\
\\$1\\(if\\$2
..
.SH NAME
math \- introduction to mathematical library functions
.SH DESCRIPTION
d46 4
a49 2
.I libm.
The link editor searches this library under the \*(lq\-lm\*(rq option.
d51 53
a103 56
.RI < math.h >.
.SH "LIST OF FUNCTIONS"
.sp 2
.nf
.ta \w'copysign'u+2n +\w'infnan.3m'u+10n +\w'inverse trigonometric func'u
\fIName\fP	\fIAppears on Page\fP	\fIDescription\fP	\fIError Bound (ULPs)\fP
.ta \w'copysign'u+4n +\w'infnan.3m'u+4n +\w'inverse trigonometric function'u+6nC
.sp 5p
acos	sin.3m	inverse trigonometric function	3
acosh	asinh.3m	inverse hyperbolic function	3
asin	sin.3m	inverse trigonometric function	3
asinh	asinh.3m	inverse hyperbolic function	3
atan	sin.3m	inverse trigonometric function	1
atanh	asinh.3m	inverse hyperbolic function	3
atan2	sin.3m	inverse trigonometric function	2
cabs	hypot.3m	complex absolute value	1
cbrt	sqrt.3m	cube root	1
ceil	floor.3m	integer no less than	0
copysign	ieee.3m	copy sign bit	0
cos	sin.3m	trigonometric function	1
cosh	sinh.3m	hyperbolic function	3
erf	erf.3m	error function	???
erfc	erf.3m	complementary error function	???
exp	exp.3m	exponential	1
expm1	exp.3m	exp(x)\-1	1
fabs	floor.3m	absolute value	0
floor	floor.3m	integer no greater than	0
hypot	hypot.3m	Euclidean distance	1
ilogb	ieee.3m	exponent extraction	0
isinf	isinf.3	check exceptions
isnan	isnan.3	check exceptions
isinff	isinff.3	check exceptions
isnanf	isnanf.3	check exceptions
j0	j0.3m	bessel function	???
j1	j0.3m	bessel function	???
jn	j0.3m	bessel function	???
lgamma	lgamma.3m	log gamma function; (formerly gamma.3m)
log	exp.3m	natural logarithm	1
log10	exp.3m	logarithm to base 10	3
log1p	exp.3m	log(1+x)	1
pow	exp.3m	exponential x**y	60\-500
remainder	ieee.3m	remainder	0
rint	floor.3m	round to nearest integer	0
scalbn	ieee.3m	exponent adjustment	0
sin	sin.3m	trigonometric function	1
sinh	sinh.3m	hyperbolic function	3
sqrt	sqrt.3m	square root	1
tan	sin.3m	trigonometric function	3
tanh	sinh.3m	hyperbolic function	3
y0	j0.3m	bessel function	???
y1	j0.3m	bessel function	???
yn	j0.3m	bessel function	???
.ta
.fi
.SH NOTES
In 4.3 BSD, distributed from the University of California
d105 8
a112 4
versions, one for the double\-precision "D" format in the
DEC VAX\-11 family of computers, another for double\-precision
arithmetic conforming to the IEEE Standard 754 for Binary
Floating\-Point Arithmetic.  The two versions behave very
d114 15
a128 5
and robust than was the norm when UNIX was born.  For
instance, the programs are accurate to within the numbers
of \*(ups tabulated above; an \*(up is one \fIU\fRnit in the \fIL\fRast
\fIP\fRlace.  And the programs have been cured of anomalies that
afflicted the older math library \fIlibm\fR in which incidents like
d130 41
a170 2
.RS
sqrt(\-1.0) = 0.0 and log(\-1.0) = \-1.7e38.
d172 1
a172 1
cos(1.0e\-11) > cos(0.0) > 1.0.
d174 1
a174 8
pow(x,1.0)
.if n \
!=
.if t \
\(!=
x when x = 2.0, 3.0, 4.0, ..., 9.0.
.br
pow(\-1.0,1.0e10) trapped on Integer Overflow.
a175 44
sqrt(1.0e30) and sqrt(1.0e\-30) were very slow.
.RE
However the two versions do differ in ways that have to be
explained, to which end the following notes are provided.
.PP
\fBDEC VAX\-11 D_floating\-point:\fR
.PP
This is the format for which the original math library \fIlibm\fR
was developed, and to which this manual is still principally
dedicated.  It is \fIthe\fR double\-precision format for the PDP\-11
and the earlier VAX\-11 machines; VAX\-11s after 1983 were
provided with an optional "G" format closer to the IEEE
double\-precision format.  The earlier DEC MicroVAXs have no
D format, only G double\-precision. (Why?  Why not?)
.PP
Properties of D_floating\-point:
.RS
Wordsize: 64 bits, 8 bytes.  Radix: Binary.
.br
Precision: 56
.if n \
sig.
.if t \
significant
bits, roughly like 17
.if n \
sig.
.if t \
significant
decimals.
.RS
If x and x' are consecutive positive D_floating\-point
numbers (they differ by 1 \*(up), then
.br
1.3e\-17 < 0.5**56 < (x'\-x)/x \(<= 0.5**55 < 2.8e\-17.
.RE
.nf
.ta \w'Range:'u+1n +\w'Underflow threshold'u+1n +\w'= 2.0**127'u+1n
Range:	Overflow threshold	= 2.0**127	= 1.7e38.
	Underflow threshold	= 0.5**128	= 2.9e\-39.
	NOTE:  THIS RANGE IS COMPARATIVELY NARROW.
.ta
.fi
.RS
d181 6
a186 14
.RS
It is possible to have x
.if n \
!=
.if t \
\(!=
y and yet
x\-y = 0 because of underflow.  Similarly
x > y > 0 cannot prevent either x\(**y = 0
or  y/x = 0 from happening without warning.
.RE
.RE
Zero is represented ambiguously.
.RS
d189 3
a191 7
There is no \-0 on a VAX.
.RE
.If
is not part of the VAX architecture.
.br
Reserved operands:
.RS
d194 1
a194 1
Any floating\-point operation upon a reserved
d197 1
a197 3
.RE
Exceptions:
.RS
d202 3
a204 5
.RE
Rounding:
.RS
Every rational operation  (+, \-, \(**, /) on a
VAX (but not necessarily on a PDP\-11), if not an
d206 5
a210 6
within half an \*(up, and when the rounding error is
exactly half an \*(up then rounding is away from 0.
.RE
.RE
.PP
Except for its narrow range, D_floating\-point is one of the
d213 2
a214 1
functions for a VAX distributed in 4.3 BSD.
d219 1
a219 1
like 1/0; and sqrt(\-3) and acos(3) behave like 0/0;
d222 1
a222 2
.RS
.ll -0.5i
d226 16
a241 8
handle all floating\-point arithmetic exceptions neatly.
See infnan(3M) for the present state of affairs.\fR
.ll +0.5i
.RE
.PP
How do the functions in 4.3 BSD's new \fIlibm\fR for UNIX
compare with their counterparts in DEC's VAX/VMS library?
Some of the VMS functions are a little faster, some are
d245 29
a273 18
\fIlibm\fR.
The VMS codes interpolate in large table to achieve
speed and accuracy; the \fIlibm\fR codes use tricky formulas
compact enough that all of them may some day fit into a ROM.
.PP
More important, DEC regards the VMS codes as proprietary
and guards them zealously against unauthorized use.  But the
\fIlibm\fR codes in 4.3 BSD are intended for the public domain;
they may be copied freely provided their provenance is always
acknowledged, and provided users assist the authors in their
researches by reporting experience with the codes.
Therefore no user of UNIX on a machine whose arithmetic resembles
VAX D_floating\-point need use anything worse than the new \fIlibm\fR.
.PP
\fBIEEE STANDARD 754 Floating\-Point Arithmetic:\fR
.PP
This standard is on its way to becoming more widely adopted
than any other design for computer arithmetic.
d275 6
a280 8
produced by a host of manufacturers, among them ...
.nf
.ta 0.5i +\w'Intel i8070, i80287'u+6n
	Intel i8087, i80287	National Semiconductor  32081
	Motorola 68881	Weitek WTL-1032, ... , -1165
	Zilog Z8070	Western Electric (AT&T) WE32106.
.ta
.fi
d282 1
a282 1
in the Apple Macintosh, through VLSI in the Hewlett\-Packard
d284 82
a365 71
Several other companies have adopted the formats
of IEEE 754 without, alas, adhering to the standard's way
of handling rounding and exceptions like over/underflow.
The DEC VAX G_floating\-point format is very similar to the IEEE
754 Double format, so similar that the C programs for the
IEEE versions of most of the elementary functions listed
above could easily be converted to run on a MicroVAX, though
nobody has volunteered to do that yet.
.PP
The codes in 4.3 BSD's \fIlibm\fR for machines that conform to
IEEE 754 are intended primarily for the National Semi. 32081
and WTL 1164/65.  To use these codes with the Intel or Zilog
chips, or with the Apple Macintosh or ELXSI 6400, is to
forego the use of better codes provided (perhaps freely) by
those companies and designed by some of the authors of the
codes above.
Except for \fIatan\fR, \fIcabs\fR, \fIcbrt\fR, \fIerf\fR,
\fIerfc\fR, \fIhypot\fR, \fIj0\-jn\fR, \fIlgamma\fR, \fIpow\fR
and \fIy0\-yn\fR,
the Motorola 68881 has all the functions in \fIlibm\fR on chip,
and faster and more accurate;
it, Apple, the i8087, Z8070 and WE32106 all use 64
.if n \
sig.
.if t \
significant
bits.
The main virtue of 4.3 BSD's
\fIlibm\fR codes is that they are intended for the public domain;
they may be copied freely provided their provenance is always
acknowledged, and provided users assist the authors in their
researches by reporting experience with the codes.
Therefore no user of UNIX on a machine that conforms to
IEEE 754 need use anything worse than the new \fIlibm\fR.
.PP
Properties of IEEE 754 Double\-Precision:
.RS
Wordsize: 64 bits, 8 bytes.  Radix: Binary.
.br
Precision: 53
.if n \
sig.
.if t \
significant
bits, roughly like 16
.if n \
sig.
.if t \
significant
decimals.
.RS
If x and x' are consecutive positive Double\-Precision
numbers (they differ by 1 \*(up), then
.br
1.1e\-16 < 0.5**53 < (x'\-x)/x \(<= 0.5**52 < 2.3e\-16.
.RE
.nf
.ta \w'Range:'u+1n +\w'Underflow threshold'u+1n +\w'= 2.0**1024'u+1n
Range:	Overflow threshold	= 2.0**1024	= 1.8e308
	Underflow threshold	= 0.5**1022	= 2.2e\-308
.ta
.fi
.RS
Overflow goes by default to a signed
.If "" .
.br
Underflow is \fIGradual,\fR rounding to the nearest
integer multiple of 0.5**1074 = 4.9e\-324.
.RE
Zero is represented ambiguously as +0 or \-0.
.RS
d368 1
a368 1
with like signs; but x\-x yields +0 for every
d373 21
a393 47
finite x = y then
.If
\&= 1/(x\-y)
.if n \
!=
.if t \
\(!=
\-1/(y\-x) =
.If \- .
.RE
.If
is signed.
.RS
it persists when added to itself
or to any finite number.  Its sign transforms
correctly through multiplication and division, and
.If (finite)/\(+- \0=\0\(+-0
(nonzero)/0 =
.If \(+- .
But
.if n \
Infinity\-Infinity, Infinity\(**0 and Infinity/Infinity
.if t \
\(if\-\(if, \(if\(**0 and \(if/\(if
are, like 0/0 and sqrt(\-3),
invalid operations that produce \*(nn. ...
.RE
Reserved operands:
.RS
there are 2**53\-2 of them, all
called \*(nn (\fIN\fRot \fIa N\fRumber).
Some, called Signaling \*(nns, trap any floating\-point operation
performed upon them; they are used to mark missing
or uninitialized values, or nonexistent elements
of arrays.  The rest are Quiet \*(nns; they are
the default results of Invalid Operations, and
propagate through subsequent arithmetic operations.
If x
.if n \
!=
.if t \
\(!=
x then x is \*(nn; every other predicate
(x > y, x = y, x < y, ...) is FALSE if \*(nn is involved.
.br
NOTE: Trichotomy is violated by \*(nn.
.RS
d396 4
a399 6
signal Invalid Operation when \*(nn is involved.
.RE
.RE
Rounding:
.RS
Every algebraic operation (+, \-, \(**, /,
d404 3
a406 3
is rounded by default to within half an \*(up, and
when the rounding error is exactly half an \*(up then
the rounded value's least significant bit is zero.
d408 2
a409 1
sometimes provably so; for instance, for every
d413 15
a427 15
have been rounded.  Only rounding like IEEE 754
can do that.  But no single kind of rounding can be
proved best for every circumstance, so IEEE 754
provides rounding towards zero or towards
.If +
or towards
.If \-
at the programmer's option.  And the
same kinds of rounding are specified for
Binary\-Decimal Conversions, at least for magnitudes
between roughly 1.0e\-10 and 1.0e37.
.RE
Exceptions:
.RS
IEEE 754 recognizes five kinds of floating\-point exceptions,
d429 8
a436 17
.RS
.nf
.ta \w'Invalid Operation'u+6n +\w'Gradual Underflow'u+2n
Exception	Default Result
.sp 0.5
Invalid Operation	\*(nn, or FALSE
.if n \{\
Overflow	\(+-Infinity
Divide by Zero	\(+-Infinity \}
.if t \{\
Overflow	\(+-\(if
Divide by Zero	\(+-\(if \}
Underflow	Gradual Underflow
Inexact	Rounded value
.ta
.fi
.RE
d444 15
a458 10
.RE
.PP
For each kind of floating\-point exception, IEEE 754
provides a Flag that is raised each time its exception
is signaled, and stays raised until the program resets
it.  Programs may also test, save and restore a flag.
Thus, IEEE 754 provides three ways by which programs
may cope with exceptions for which the default result
might be unsatisfactory:
.IP 1) \w'\0\0\0\0'u
d461 1
a461 1
.IP 2) \w'\0\0\0\0'u
d464 1
a464 1
.IP 3) \w'\0\0\0\0'u
d467 1
a467 1
.RS
d473 2
a474 6
IEEE 754; if x
.if n \
!=
.if t \
\(!=
y then x\-y is correct to
d476 5
a480 4
how tiny it may be.)  Products and quotients that
underflow gradually can lose accuracy gradually
without vanishing, so comparing them with zero
(as one might on a VAX) will not reveal the loss.
d488 6
a493 3
.RE
.PP
At the option of an implementor conforming to IEEE 754,
d495 3
a497 2
.IP 4) \w'\0\0\0\0'u
ABORT.  This mechanism classifies an exception in
d499 3
a501 3
traditionally associated with error\-handling
statements like "ON ERROR GO TO ...".  Different
languages offer different forms of this statement,
d503 2
a504 1
.IP \(em \w'\0\0\0\0'u
d508 4
a511 3
expression.  An exceptional result is abandoned.
.IP \(em \w'\0\0\0\0'u
In a subprogram that lacks an error\-handling
d515 1
a515 1
an error\-handling statement is encountered or the
d517 9
a525 9
.IP 5) \w'\0\0\0\0'u
STOP.  This mechanism, requiring an interactive
debugging environment, is more for the programmer
than the program.  It classifies an exception in
advance as a symptom of a programmer's error; the
exception suspends execution as near as it can to
the offending operation so that the programmer can
look around to see how it happened.  Quite often
the first several exceptions turn out to be quite
d529 1
a529 1
.IP 6) \w'\0\0\0\0'u
d531 2
a532 2
.RE
.PP
d536 7
a542 4
to be distributed in 4.3 BSD's \fIlibm\fR.  Ideally, each
elementary function should act as if it were indivisible, or
atomic, in the sense that ...
.IP i) \w'iii)'u+2n
d545 1
a545 1
.IP ii) \w'iii)'u+2n
d548 1
a548 1
.IP iii) \w'iii)'u+2n
d555 15
a569 14
.PP
Ideally, every programmer should be able \fIconveniently\fR to
turn a debugged subprogram into one that appears atomic to
its users.  But simulating all three characteristics of an
atomic function is still a tedious affair, entailing hosts
of tests and saves\-restores; work is under way to ameliorate
the inconvenience.
.PP
Meanwhile, the functions in \fIlibm\fR are only approximately
atomic.  They signal no inappropriate exception except
possibly ...
.RS
Over/Underflow
.RS
d571 1
a571 3
.RE
Inexact in \fIcabs\fR, \fIcbrt\fR, \fIhypot\fR, \fIlog10\fR and \fIpow\fR
.RS
d573 6
a578 10
.RE
.RE
Otherwise, ...
.RS
Invalid Operation is signaled only when
.RS
any result but \*(nn would probably be misleading.
.RE
Overflow is signaled only when
.RS
d580 1
a580 3
.RE
Divide\-by\-Zero is signaled only when
.RS
d582 1
a582 3
.RE
Underflow is signaled only when
.RS
d584 1
a584 3
.RE
Inexact is signaled only when
.RS
d586 2
a587 3
.RE
.RE
.SH BUGS
d589 20
a608 11
operations within the codes, so a subroutine\-trace may be
needed to identify the function with its signal in case
method 5) above is in use.  And the codes all take the
IEEE 754 defaults for granted; this means that a decision to
trap all divisions by zero could disrupt a code that would
otherwise get correct results despite division by zero.
.SH SEE ALSO
An explanation of IEEE 754 and its proposed extension p854
was published in the IEEE magazine MICRO in August 1984 under
the title "A Proposed Radix\- and Word\-length\-independent
Standard for Floating\-point Arithmetic" by W. J. Cody et al.
d610 8
a617 4
document the features of IEEE 754 pretty well.
Articles in the IEEE magazine COMPUTER vol. 14 no. 3 (Mar.
1981), and in the ACM SIGNUM Newsletter Special Issue of
Oct. 1979, may be helpful although they pertain to
@


1.8
log
@$OpenBSD$
@
text
@d1 1
a1 1
.\"	$OpenBSD: math.3,v 1.7 1999/08/16 23:26:02 deraadt Exp $
d383 1
a383 1
But 
@


1.7
log
@point at isinff and isnanf
@
text
@d1 1
a33 1
.\"	$Id: math.3,v 1.6 1998/02/27 12:19:34 deraadt Exp $
@


1.6
log
@section 3 not 3M
@
text
@d33 1
a33 1
.\"	$Id: math.3,v 1.5 1997/09/26 01:27:10 millert Exp $
d83 2
@


1.5
log
@Remove reference to non-existent fortran man pages.
maximum entropy <entropy@@tardis.bernstein.com>
@
text
@d33 1
a33 1
.\"	$Id: math.3,v 1.4 1997/07/03 17:38:54 deraadt Exp $
d35 1
a35 1
.TH MATH 3M "May 6, 1991"
@


1.4
log
@pretty
@
text
@d33 1
a33 1
.\"	$Id: math.3,v 1.3 1997/06/02 06:42:22 deraadt Exp $
a52 1
The Fortran math library is described in ``man 3f intro''.
@


1.3
log
@fix; jonb@@metronet.com
@
text
@d33 1
a33 1
.\"	$Id: math.3,v 1.2 1995/10/28 00:56:58 deraadt Exp $
d450 1
a450 3
.tc \(ru
		
.tc
@


1.2
log
@update from NetBSD
@
text
@d33 1
a33 1
.\"	$Id: math.3,v 1.4 1994/02/25 19:43:56 jtc Exp $
d82 2
a83 1
infnan	infnan.3m	signals exceptions
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

