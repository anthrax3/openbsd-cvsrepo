head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.09.12.19.47.01;	author guenther;	state Exp;
branches;
next	1.9;
commitid	Lp8bnB2xK76nGFvJ;

1.9
date	2015.01.20.04.41.01;	author krw;	state Exp;
branches;
next	1.8;
commitid	4iV7KHZz26Tut4Vx;

1.8
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.23.15.28.16;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.05.12.01.14;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.16.19.17.33;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.11.15.16.52;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.22.21.34.56;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: s_ceil.c,v 1.9 2015/01/20 04:41:01 krw Exp $	*/
/*
 * Written by Michael Shalayeff. Public Domain
 */

#include <sys/types.h>
#include <machine/ieeefp.h>
#include "math.h"

double
ceil(double x)
{
	u_int64_t ofpsr, fpsr;

	__asm__ volatile("fstds %%fr0,0(%0)" :: "r" (&ofpsr) : "memory");
	fpsr = (ofpsr & ~((u_int64_t)FP_RM << (9 + 32))) |
	    ((u_int64_t)FP_RP << (9 + 32));
	__asm__ volatile("fldds 0(%0), %%fr0" :: "r" (&fpsr) : "memory");

	__asm__ volatile("frnd,dbl %0,%0" : "+f" (x));

	__asm__ volatile("fldds 0(%0), %%fr0" :: "r" (&ofpsr) : "memory");
	return (x);
}
DEF_STD(ceil);
LDBL_UNUSED_CLONE(ceil);
@


1.9
log
@Missing $OpenBSD$'s.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 2
a26 2

__strong_alias(ceill, ceil);
@


1.8
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
@


1.7
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d14 1
a14 1
	__asm__ __volatile__("fstds %%fr0,0(%0)" :: "r" (&ofpsr) : "memory");
d17 1
a17 1
	__asm__ __volatile__("fldds 0(%0), %%fr0" :: "r" (&fpsr) : "memory");
d19 1
a19 1
	__asm__ __volatile__("frnd,dbl %0,%0" : "+f" (x));
d21 1
a21 1
	__asm__ __volatile__("fldds 0(%0), %%fr0" :: "r" (&ofpsr) : "memory");
@


1.6
log
@Aliases for extended precision were missed on a few functions on hppa.
Reported by Brad, thanks!
@
text
@d25 1
a25 1
__weak_alias(ceill, ceil);
@


1.5
log
@Tweak inline asm to prevent gcc4 from optimizing away crucial bits of it.

ok miod@@
@
text
@d24 2
@


1.4
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d14 1
a14 1
	__asm__ __volatile__("fstds %%fr0,0(%1)" : "=m" (ofpsr) : "r" (&ofpsr));
d17 1
a17 1
	__asm__ __volatile__("fldds 0(%0), %%fr0" :: "r" (&fpsr));
d21 1
a21 1
	__asm__ __volatile__("fldds 0(%0), %%fr0" :: "r" (&ofpsr));
@


1.3
log
@fpr0 is recommended to be operated in full 64bits, although seemed to work otherwise, fix it
@
text
@a4 4
#if defined(LIBM_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: s_ceil.c,v 1.2 2002/09/11 15:16:52 mickey Exp $";
#endif

@


1.2
log
@these are not libm private and fix the rintf pasting error
@
text
@d6 1
a6 1
static char rcsid[] = "$OpenBSD: s_ceil.c,v 1.1 2002/05/22 21:34:56 mickey Exp $";
d16 1
a16 1
	u_int32_t ofpsr, fpsr;
d18 4
a21 3
	__asm__ __volatile__("fstw %%fr0,0(%1)" : "=m" (ofpsr) : "r" (&ofpsr));
	fpsr = (ofpsr & ~0x600) | (FP_RP << 9);
	__asm__ __volatile__("fldw 0(%0), %%fr0" :: "r" (&fpsr));
d25 1
a25 1
	__asm__ __volatile__("fldw 0(%0), %%fr0" :: "r" (&ofpsr));
@


1.1
log
@add reminder and roundings
@
text
@d6 1
a6 1
static char rcsid[] = "$OpenBSD$";
d14 1
a14 1
__ieee754_ceil(double x)
@

