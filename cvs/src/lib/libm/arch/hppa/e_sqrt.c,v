head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.09.12.19.47.01;	author guenther;	state Exp;
branches;
next	1.11;
commitid	Lp8bnB2xK76nGFvJ;

1.11
date	2015.01.20.04.41.01;	author krw;	state Exp;
branches;
next	1.10;
commitid	4iV7KHZz26Tut4Vx;

1.10
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.13.03.44.59;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2012.12.05.23.20.02;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.30.18.34.38;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.27.23.59.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.10.01.08.24;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.07.20.36.08;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.22.20.55.56;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: e_sqrt.c,v 1.11 2015/01/20 04:41:01 krw Exp $	*/
/*
 * Written by Michael Shalayeff. Public Domain
 */

#include <float.h>
#include <math.h>

double
sqrt(double x)
{
	__asm__ volatile ("fsqrt,dbl %0, %0" : "+f" (x));
	return (x);
}
DEF_STD(sqrt);
LDBL_CLONE(sqrt);
@


1.11
log
@Missing $OpenBSD$'s.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d15 2
a16 2

__strong_alias(sqrtl, sqrt);
@


1.10
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
@


1.9
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d11 1
a11 1
	__asm__ __volatile__ ("fsqrt,dbl %0, %0" : "+f" (x));
@


1.8
log
@Get rid of the very ugly lint workarounds: LINTLIBRARY, PROTOLIB,
and a few empty files for lint to chew on.
@
text
@d15 1
a15 1
__weak_alias(sqrtl, sqrt);
@


1.7
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@a4 2
/* LINTLIBRARY */

a14 4
#ifdef	lint
/* PROTOLIB1 */
long double sqrtl(long double);
#else	/* lint */
a15 1
#endif	/* lint */
@


1.6
log
@Trick lint into recording the right prototypes in the llib-lm.ln
database on platforms without extended-precision floating-point
support.

Seems like a reasonable approach to millert@@.
@
text
@a6 1
#include <sys/cdefs.h>
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d5 2
d18 4
a21 2
#if LDBL_MANT_DIG == 53
#ifdef __weak_alias
d23 1
a23 2
#endif /* __weak_alias */
#endif /* LDBL_MANT_DIG == 53 */
@


1.4
log
@use sys/cdefs.h;  pointed out by theo
@
text
@a4 4
#if defined(LIBM_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: e_sqrt.c,v 1.3 2008/12/09 20:00:35 martynas Exp $";
#endif

@


1.3
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d6 1
a6 1
static char rcsid[] = "$OpenBSD: e_sqrt.c,v 1.2 2008/09/07 20:36:08 martynas Exp $";
d9 1
a9 1
#include <machine/cdefs.h>
@


1.2
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d6 1
a6 1
static char rcsid[] = "$OpenBSD: e_sqrt.c,v 1.1 2002/05/22 20:55:56 mickey Exp $";
d9 3
a11 1
#include "math.h"
d19 6
@


1.1
log
@md sqrt() implementation
@
text
@d6 1
a6 1
static char rcsid[] = "$OpenBSD$";
d12 1
a12 1
__ieee754_sqrt(double x)
@

