head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.12.19.47.01;	author guenther;	state Exp;
branches;
next	1.4;
commitid	Lp8bnB2xK76nGFvJ;

1.4
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.21.20.40.54;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: fenv.c,v 1.4 2014/04/18 15:09:52 guenther Exp $	*/

/*
 * Copyright (c) 2011 Martynas Venckus <martynas@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <fenv.h>

union u {
	unsigned long long fpsr;
	unsigned int bits[2];
};

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 */
fenv_t __fe_dfl_env = 0;

/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	volatile union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Clear the requested floating-point exceptions */
	u.bits[0] &= ~(excepts << _MASK_SHIFT);

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (0);
}
DEF_STD(feclearexcept);

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated by
 * the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	volatile union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Store the results in flagp */
	*flagp = (u.bits[0] >> _MASK_SHIFT) & excepts;

	return (0);
}

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 */
int
feraiseexcept(int excepts)
{
	volatile double d;

	excepts &= FE_ALL_EXCEPT;

	/*
	 * With a compiler that supports the FENV_ACCESS pragma
	 * properly, simple expressions like '0.0 / 0.0' should
	 * be sufficient to generate traps.  Unfortunately, we
	 * need to bring a volatile variable into the equation
	 * to prevent incorrect optimizations.
	 */
	if (excepts & FE_INVALID) {
		d = 0.0;
		d = 0.0 / d;
	}
	if (excepts & FE_DIVBYZERO) {
		d = 0.0;
		d = 1.0 / d;
	}
	if (excepts & FE_OVERFLOW) {
		d = 0x1.ffp1023;
		d *= 2.0;
	}
	if (excepts & FE_UNDERFLOW) {
		d = 0x1p-1022;
		d /= 0x1p1023;
	}
	if (excepts & FE_INEXACT) {
		d = 0x1p-1022;
		d += 1.0;
	}
	__asm__ volatile ("fldd 0(%%sr0,%%sp), %0" : "=f" (d));

	return (0);
}
DEF_STD(feraiseexcept);

/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	volatile union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Set the requested status flags */
	u.bits[0] &= ~(excepts << _MASK_SHIFT);
	u.bits[0] |= (*flagp & excepts) << _MASK_SHIFT;

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (0);
}
DEF_STD(fesetexceptflag);

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	volatile union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	return ((u.bits[0] >> _MASK_SHIFT) & excepts);
}
DEF_STD(fetestexcept);

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	return (u.bits[0] & _ROUND_MASK);
}
DEF_STD(fegetround);

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	volatile union u u;

	/* Check whether requested rounding direction is supported */
	if (round & ~_ROUND_MASK)
		return (-1);

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Set the rounding direction */
	u.bits[0] &= ~_ROUND_MASK;
	u.bits[0] |= round;

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (0);
}
DEF_STD(fesetround);

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	*envp = u.bits[0];

	return (0);
}
DEF_STD(fegetenv);

/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	*envp = u.bits[0];

	/* Clear exception flags in FPSR */
	u.bits[0] &= ~(FE_ALL_EXCEPT << _MASK_SHIFT);

	/* Mask all exceptions */
	u.bits[0] &= ~FE_ALL_EXCEPT;
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (0);
}
DEF_STD(feholdexcept);

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Set the requested flags */
	u.bits[0] &= ~(FE_ALL_EXCEPT | _ROUND_MASK |
	    (FE_ALL_EXCEPT << _MASK_SHIFT));
	u.bits[0] |= *envp & (FE_ALL_EXCEPT | _ROUND_MASK |
	    (FE_ALL_EXCEPT << _MASK_SHIFT));

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (0);
}
DEF_STD(fesetenv);

/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	/* Install new floating-point environment */
	fesetenv(envp);

	/* Raise any previously accumulated exceptions */
	feraiseexcept(u.bits[0] >> _MASK_SHIFT);

	return (0);
}
DEF_STD(feupdateenv);

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	volatile union u u;
	unsigned int omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	omask = u.bits[0] & FE_ALL_EXCEPT;
	u.bits[0] |= mask;

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (omask);

}

int
fedisableexcept(int mask)
{
	volatile union u u;
	unsigned int omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	omask = u.bits[0] & FE_ALL_EXCEPT;
	u.bits[0] &= ~mask;

	/* Load the floating-point status register */
	__asm__ volatile ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));

	return (omask);
}

int
fegetexcept(void)
{
	volatile union u u;

	/* Store the current floating-point status register */
	__asm__ volatile ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
	    "r" (&u.fpsr));

	return (u.bits[0] & FE_ALL_EXCEPT);
}
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2012/12/05 23:20:02 deraadt Exp $	*/
d60 1
d126 1
d153 1
d173 1
d189 1
d218 1
d237 1
d265 1
d295 1
d322 1
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/28 17:34:23 martynas Exp $	*/
d49 1
a49 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d56 1
a56 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d74 1
a74 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d121 1
a121 1
	__asm__ __volatile__ ("fldd 0(%%sr0,%%sp), %0" : "=f" (d));
d139 1
a139 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d147 1
a147 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d165 1
a165 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d180 1
a180 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d201 1
a201 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d209 1
a209 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d224 1
a224 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d244 1
a244 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d254 1
a254 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d273 1
a273 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d283 1
a283 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d302 1
a302 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d326 1
a326 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d333 1
a333 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d348 1
a348 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
d355 1
a355 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&u.fpsr));
d366 1
a366 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (u.fpsr) :
@


1.2
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/21 20:40:54 martynas Exp $	*/
a17 2

#include <sys/cdefs.h>
@


1.1
log
@fenv for hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/20 22:27:59 martynas Exp $	*/
d23 5
d46 1
a46 1
	volatile unsigned int fpsr[2];
d51 2
a52 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d55 1
a55 1
	fpsr[0] &= ~excepts;
d58 1
a58 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d71 1
a71 1
	volatile unsigned int fpsr[2];
d76 2
a77 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d80 1
a80 1
	*flagp = fpsr[0] & excepts;
d136 1
a136 1
	volatile unsigned int fpsr[2];
d141 2
a142 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d145 2
a146 2
	fpsr[0] &= ~excepts;
	fpsr[0] |= *flagp & excepts;
d149 1
a149 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d162 1
a162 1
	volatile unsigned int fpsr[2];
d167 2
a168 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d170 1
a170 1
	return (fpsr[0] & excepts);
d179 1
a179 1
	volatile unsigned int fpsr[2];
d181 3
a183 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d185 1
a185 1
	return (fpsr[0] & _ROUND_MASK);
d196 1
a196 1
	volatile unsigned int fpsr[2];
d203 2
a204 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d206 3
a208 5
	/*
	 * Set the rounding direction
	 */
	fpsr[0] &= ~_ROUND_MASK;
	fpsr[0] |= round;
d211 1
a211 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d223 1
a223 1
	volatile unsigned int fpsr[2];
d226 2
a227 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d229 1
a229 1
	*envp = fpsr[0];
d243 1
a243 1
	volatile unsigned int fpsr[2];
d246 2
a247 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d249 1
a249 1
	*envp = fpsr[0];
d252 1
a252 1
	fpsr[0] &= ~FE_ALL_EXCEPT;
d255 2
a256 2
	fpsr[0] &= ~((unsigned int)FE_ALL_EXCEPT >> _EMASK_SHIFT);
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d272 1
a272 1
	volatile unsigned int fpsr[2];
d275 2
a276 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d279 4
a282 4
	fpsr[0] &= ~(((unsigned int)FE_ALL_EXCEPT >> _EMASK_SHIFT) |
	    _ROUND_MASK | FE_ALL_EXCEPT);
	fpsr[0] |= *envp & (((unsigned int)FE_ALL_EXCEPT >> _EMASK_SHIFT) |
	    _ROUND_MASK | FE_ALL_EXCEPT);
d285 1
a285 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d301 1
a301 1
	volatile unsigned int fpsr[2];
d304 2
a305 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d311 1
a311 1
	feraiseexcept(fpsr[0]);
d322 1
a322 1
	volatile unsigned int fpsr[2];
d328 2
a329 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d331 2
a332 2
	omask = (fpsr[0] << _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpsr[0] |= (unsigned int)mask >> _EMASK_SHIFT;
d335 1
a335 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d344 1
a344 1
	volatile unsigned int fpsr[2];
d350 2
a351 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d353 2
a354 2
	omask = (fpsr[0] << _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpsr[0] &= ~((unsigned int)mask >> _EMASK_SHIFT);
d357 1
a357 1
	__asm__ __volatile__ ("fldd 0(%0), %%fr0" : : "r" (&fpsr));
d365 1
a365 1
	volatile unsigned int fpsr[2];
d368 2
a369 1
	__asm__ __volatile__ ("fstd %%fr0, 0(%1)" : "=m" (fpsr) : "r" (&fpsr));
d371 1
a371 1
	return ((fpsr[0] << _EMASK_SHIFT) & FE_ALL_EXCEPT);
@

