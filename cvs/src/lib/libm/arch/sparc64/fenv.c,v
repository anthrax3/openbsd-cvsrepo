head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.5;
commitid	Lp8bnB2xK76nGFvJ;

1.5
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.25.21.04.29;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.24.00.35.22;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: fenv.c,v 1.5 2014/04/18 15:09:52 guenther Exp $	*/
/*	$NetBSD: fenv.c,v 1.1 2011/01/31 00:19:33 christos Exp $	*/

/*-
 * Copyright (c) 2004-2005 David Schultz <das@@FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 */

#include <fenv.h>

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 */
fenv_t __fe_dfl_env = 0;

/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	fexcept_t r;

	excepts &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	r &= ~excepts;

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (r));

	return 0;
}
DEF_STD(feclearexcept);

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated
 * by the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	fexcept_t r;

	excepts &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	*flagp = r & excepts;

	return 0;
}


/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	fexcept_t r;

	excepts &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	r &= ~excepts;
	r |= *flagp & excepts;

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (r));

	return 0;
}
DEF_STD(fesetexceptflag);

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 *
 * The order in which these floating-point exceptions are raised is unspecified
 * (by the standard).
 */
int
feraiseexcept(int excepts)
{
	volatile double d;

	excepts &= FE_ALL_EXCEPT;

	/*
	 * With a compiler that supports the FENV_ACCESS pragma properly, simple
	 * expressions like '0.0 / 0.0' should be sufficient to generate traps.
	 * Unfortunately, we need to bring a volatile variable into the equation
	 * to prevent incorrect optimizations.
	 */
	if (excepts & FE_INVALID) {
		d = 0.0;
		d = 0.0 / d;
	}
	if (excepts & FE_DIVBYZERO) {
		d = 0.0;
		d = 1.0 / d;
	}
	if (excepts & FE_OVERFLOW) {
		d = 0x1.ffp1023;
		d *= 2.0;
	}
	if (excepts & FE_UNDERFLOW) {
		d = 0x1p-1022;
		d /= 0x1p1023;
	}
	if (excepts & FE_INEXACT) {
		d = 0x1p-1022;
		d += 1.0;
	}

	return 0;
}
DEF_STD(feraiseexcept);

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	fexcept_t r;

	excepts &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	return r & excepts;
}
DEF_STD(fetestexcept);

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	fenv_t r;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	return (r >> _ROUND_SHIFT) & _ROUND_MASK;
}
DEF_STD(fegetround);

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	fenv_t r;

	if (round & ~_ROUND_MASK)
		return -1;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	r &= ~(_ROUND_MASK << _ROUND_SHIFT);
	r |= round << _ROUND_SHIFT;

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (r));

	return 0;
}
DEF_STD(fesetround);

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (*envp));

	return 0;
}
DEF_STD(fegetenv);


/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	fenv_t r;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	*envp = r;
	r &= ~(FE_ALL_EXCEPT | (FE_ALL_EXCEPT << _MASK_SHIFT));

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (r));

	return 0;
}
DEF_STD(feholdexcept);

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (*envp));

	return 0;
}
DEF_STD(fesetenv);


/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	fexcept_t r;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (*envp));

	feraiseexcept(r & FE_ALL_EXCEPT);

	return 0;
}
DEF_STD(feupdateenv);

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	fenv_t old_r, new_r;

	mask &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (old_r));

	new_r = old_r | (mask << _MASK_SHIFT);

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (new_r));

	return (old_r >> _MASK_SHIFT) & FE_ALL_EXCEPT;
}

int
fedisableexcept(int mask)
{
	fenv_t old_r, new_r;

	mask &= FE_ALL_EXCEPT;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (old_r));

	new_r = old_r & ~(mask << _MASK_SHIFT);

	/* Load floating-point state register */
	__asm__ volatile ("ldx %0, %%fsr" : : "m" (new_r));

	return (old_r >> _MASK_SHIFT) & FE_ALL_EXCEPT;
}

int
fegetexcept(void)
{
	fenv_t r;

	/* Save floating-point state register */
	__asm__ volatile ("stx %%fsr, %0" : "=m" (r));

	return (r & (FE_ALL_EXCEPT << _MASK_SHIFT)) >> _MASK_SHIFT;
}
@


1.5
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.4 2012/12/05 23:20:03 deraadt Exp $	*/
d62 1
d108 1
d153 1
d172 1
d187 1
d213 1
d227 1
d252 1
d270 1
d296 1
@


1.4
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2011/04/28 17:34:23 martynas Exp $	*/
d53 1
a53 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d58 1
a58 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (r));
d76 1
a76 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d97 1
a97 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d103 1
a103 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (r));
d165 1
a165 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d179 1
a179 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d198 1
a198 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d204 1
a204 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (r));
d217 1
a217 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (*envp));
d235 1
a235 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d241 1
a241 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (r));
d258 1
a258 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (*envp));
d278 1
a278 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
d281 1
a281 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (*envp));
d299 1
a299 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (old_r));
d304 1
a304 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (new_r));
d317 1
a317 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (old_r));
d322 1
a322 1
	__asm__ __volatile__ ("ldx %0, %%fsr" : : "m" (new_r));
d333 1
a333 1
	__asm__ __volatile__ ("stx %%fsr, %0" : "=m" (r));
@


1.3
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/25 21:04:29 martynas Exp $	*/
a26 1
#include <sys/cdefs.h>
@


1.2
log
@fenv for sparc;  mostly cloned from sparc64
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/24 00:35:22 martynas Exp $	*/
a28 1
#include <assert.h>
a30 10
#define _DIAGASSERT(x) ((void) 0)

/* Load floating-point state register (all 64bits) */
#define	__ldxfsr(__r)	__asm__	__volatile__		\
	("ldx %0, %%fsr" : : "m" (__r))

/* Save floating-point state register (all 64bits) */
#define	__stxfsr(__r)	__asm__	__volatile__		\
	("stx %%fsr, %0" : "=m" (*(__r)))

a49 1
	int ex;
d51 4
a54 1
	_DIAGASSERT((excepts & ~FE_ALL_EXCEPT) == 0);
d56 1
a56 1
	ex = excepts & FE_ALL_EXCEPT;
d58 2
a59 3
	__stxfsr(&r);
	r &= ~ex;
	__ldxfsr(r);
a60 1
	/* Success */
a72 1
	int ex;
d74 1
a74 2
	_DIAGASSERT(flagp != NULL);
	_DIAGASSERT((excepts & ~_FE_ALL_EXCEPT) == 0);
d76 2
a77 1
	ex = excepts & FE_ALL_EXCEPT;
d79 1
a79 2
	__stxfsr(&r);
	*flagp = r & ex;
a80 1
	/* Success */
a93 1
	int ex;
d95 1
a95 2
	_DIAGASSERT(flagp != NULL);
	_DIAGASSERT((excepts & ~FE_ALL_EXCEPT) == 0);
d97 2
a98 1
	ex = excepts & FE_ALL_EXCEPT;
d100 5
a104 4
	__stxfsr(&r);
	r &= ~ex;
	r |= *flagp & ex;
	__ldxfsr(r);
a105 1
	/* Success */
a119 3
	int ex;

	_DIAGASSERT((excepts & ~FE_ALL_EXCEPT) == 0);
d121 1
a121 1
	ex = excepts & FE_ALL_EXCEPT;
d129 1
a129 1
	if (ex & FE_INVALID) {
d133 1
a133 1
	if (ex & FE_DIVBYZERO) {
d137 1
a137 1
	if (ex & FE_OVERFLOW) {
d141 1
a141 1
	if (ex & FE_UNDERFLOW) {
d145 1
a145 1
	if (ex & FE_INEXACT) {
a149 1
	/* Success */
d163 1
a163 1
	_DIAGASSERT((excepts & ~FE_ALL_EXCEPT) == 0);
d165 2
a166 1
	__stxfsr(&r);
d168 1
a168 1
	return r & (excepts & FE_ALL_EXCEPT);
d179 2
a180 1
	__stxfsr(&r);
a194 1
	_DIAGASSERT((round & ~_ROUND_MASK) == 0);
d198 3
a200 1
	__stxfsr(&r);
a202 1
	__ldxfsr(r);
d204 3
a206 1
	/* Success */
d217 2
a218 1
	_DIAGASSERT(envp != NULL);
a219 3
	__stxfsr(envp);

	/* Success */
d235 2
a236 1
	_DIAGASSERT(envp != NULL);
a237 1
	__stxfsr(&r);
d239 4
a242 2
	r &= ~(FE_ALL_EXCEPT | _ENABLE_MASK);
	__ldxfsr(r);
a243 1
	/* Success */
d258 2
a259 1
	_DIAGASSERT(envp != NULL);
a260 3
	__ldxfsr(*envp);

	/* Success */
d278 2
a279 1
	_DIAGASSERT(envp != NULL);
d281 2
a282 2
	__stxfsr(&r);
	__ldxfsr(*envp);
a283 1
	_DIAGASSERT((r & ~FE_ALL_EXCEPT) == 0);
a285 1
	/* Success */
d297 9
a305 3
	__stxfsr(&old_r);
	new_r = old_r | ((mask & FE_ALL_EXCEPT) << _FPUSW_SHIFT);
	__ldxfsr(new_r);
d307 1
a307 1
	return (old_r >> _FPUSW_SHIFT) & FE_ALL_EXCEPT;
d315 1
a315 3
	__stxfsr(&old_r);
	new_r = old_r & ~((mask & FE_ALL_EXCEPT) << _FPUSW_SHIFT);
	__ldxfsr(new_r);
d317 9
a325 1
	return (old_r >> _FPUSW_SHIFT) & FE_ALL_EXCEPT;
d333 4
a336 2
	__stxfsr(&r);
	return (r & _ENABLE_MASK) >> _FPUSW_SHIFT;
@


1.1
log
@fenv for i386, and sparc64;  from matthew@@
not reviewed yet, but it's better to track changes in cvs
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 11
@

