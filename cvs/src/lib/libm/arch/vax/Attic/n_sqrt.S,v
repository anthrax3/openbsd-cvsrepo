head	1.12;
access;
symbols
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.1.1.0.28
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.26
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.03.10.05.21.05;	author deraadt;	state dead;
branches;
next	1.11;
commitid	K03oHi07npnVMEbw;

1.11
date	2013.07.15.04.03.41;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.12.19.30.17;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.09.20.21.07;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.16.22.13.12;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.21.08.26.19;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.21.20.37.10;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.49;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@more pieces of vax
@
text
@/*	$OpenBSD: n_sqrt.S,v 1.11 2013/07/15 04:03:41 espie Exp $	*/
/*	$NetBSD: n_sqrt.S,v 1.1 1995/10/10 23:40:29 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sqrt.s	8.1 (Berkeley) 6/4/93
 */

#include <machine/asm.h>
#include <sys/errno.h>

/*
 * double
 * sqrt(double arg)   revised August 15,1982
 * if(arg<0.0) { errno = EDOM; return(<a reserved operand>); }
 * if arg is a reserved operand it is returned as it is
 * W. Kahan's magic square root
 * coded by Heidi Stettner and revised by Emile LeBlanc 8/18/82
 *
 * entry points: sqrt		double arg is on the stack
 */

ENTRY(sqrtf, 0)
	cvtfd	4(%ap),-(%sp)
	calls	$2,_C_LABEL(sqrt)
	cvtdf	%r0,%r0
	ret

STRONG_ALIAS(sqrtl,sqrt)
ENTRY(sqrt, R2|R3|R4|R5)
	movq    4(%ap),%r0
dsqrt2:	bicw3	$0x807f,%r0,%r2	# check exponent of input
	jeql	noexp		# biased exponent is zero -> 0.0 or reserved
	bsbb	__libm_dsqrt_r5
noexp:	ret

/* **************************** internal procedure */

_ALTENTRY(__libm_dsqrt_r5)	/* ENTRY POINT FOR cdabs and cdsqrt	*/
				/* returns double square root scaled by	*/
				/* 2^r6	*/

	movd	%r0,%r4
	jleq	nonpos		# argument is not positive
	movzwl	%r4,%r2
	ashl	$-1,%r2,%r0
	addw2	$0x203c,%r0	# r0 has magic initial approximation
/*
 * Do two steps of Heron's rule
 * ((arg/guess) + guess) / 2 = better guess
 */
	divf3	%r0,%r4,%r2
	addf2	%r2,%r0
	subw2	$0x80,%r0	# divide by two

	divf3	%r0,%r4,%r2
	addf2	%r2,%r0
	subw2	$0x80,%r0	# divide by two

/* Scale argument and approximation to prevent over/underflow */

	bicw3	$0x807f,%r4,%r1
	subw2	$0x4080,%r1		# r1 contains scaling factor
	subw2	%r1,%r4
	movl	%r0,%r2
	subw2	%r1,%r2

/* Cubic step
 *
 * b = a + 2*a*(n-a*a)/(n+3*a*a) where b is better approximation,
 * a is approximation, and n is the original argument.
 * (let s be scale factor in the following comments)
 */
	clrl	%r1
	clrl	%r3
	muld2	%r0,%r2			# r2:r3 = a*a/s
	subd2	%r2,%r4			# r4:r5 = n/s - a*a/s
	addw2	$0x100,%r2		# r2:r3 = 4*a*a/s
	addd2	%r4,%r2			# r2:r3 = n/s + 3*a*a/s
	muld2	%r0,%r4			# r4:r5 = a*n/s - a*a*a/s
	divd2	%r2,%r4			# r4:r5 = a*(n-a*a)/(n+3*a*a)
	addw2	$0x80,%r4		# r4:r5 = 2*a*(n-a*a)/(n+3*a*a)
	addd2	%r4,%r0			# r0:r1 = a + 2*a*(n-a*a)/(n+3*a*a)
	rsb				# DONE!
nonpos:
	jneq	negarg
	ret			# argument and root are zero
negarg:
	pushl	$EDOM
	calls	$1,_C_LABEL(infnan)	# generate the reserved op fault
	ret
@


1.11
log
@add some missing asm functions to vax: long double as aliases to double,
and float functions by cvtfd/cvtdf (like in netbsd)

scalbnf will have to wait, as it's more complicated...
brings vax in line with the rest.

okay miod@@/martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.10 2013/07/05 21:10:50 miod Exp $	*/
@


1.10
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.9 2013/03/28 18:09:38 martynas Exp $	*/
d47 6
@


1.9
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.8 2008/12/12 19:30:17 martynas Exp $	*/
d50 2
a51 2
	movq    4(ap),r0
dsqrt2:	bicw3	$0x807f,r0,r2	# check exponent of input
d62 1
a62 1
	movd	r0,r4
d64 3
a66 3
	movzwl	r4,r2
	ashl	$-1,r2,r0
	addw2	$0x203c,r0	# r0 has magic initial approximation
d71 7
a77 7
	divf3	r0,r4,r2
	addf2	r2,r0
	subw2	$0x80,r0	# divide by two

	divf3	r0,r4,r2
	addf2	r2,r0
	subw2	$0x80,r0	# divide by two
d81 5
a85 5
	bicw3	$0x807f,r4,r1
	subw2	$0x4080,r1		# r1 contains scaling factor
	subw2	r1,r4
	movl	r0,r2
	subw2	r1,r2
d93 10
a102 10
	clrl	r1
	clrl	r3
	muld2	r0,r2			# r2:r3 = a*a/s
	subd2	r2,r4			# r4:r5 = n/s - a*a/s
	addw2	$0x100,r2		# r2:r3 = 4*a*a/s
	addd2	r4,r2			# r2:r3 = n/s + 3*a*a/s
	muld2	r0,r4			# r4:r5 = a*n/s - a*a*a/s
	divd2	r2,r4			# r4:r5 = a*(n-a*a)/(n+3*a*a)
	addw2	$0x80,r4		# r4:r5 = 2*a*(n-a*a)/(n+3*a*a)
	addd2	r4,r0			# r0:r1 = a + 2*a*(n-a*a)/(n+3*a*a)
@


1.8
log
@space
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.7 2008/12/09 20:21:07 martynas Exp $	*/
d48 1
a48 1
WEAK_ALIAS(sqrtl,sqrt)
@


1.7
log
@alias fabsl to fabs on these archs
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.6 2008/12/09 20:00:35 martynas Exp $	*/
d48 1
a48 1
WEAK_ALIAS(sqrtl, sqrt)
@


1.6
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.5 2008/09/16 22:13:12 martynas Exp $	*/
d48 1
a48 3
.weak sqrtl
	sqrtl = sqrt

@


1.5
log
@remove d_cbrt, dcbrt, d_sqrt.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.4 2008/06/21 08:26:19 martynas Exp $	*/
d47 4
@


1.4
log
@cleaning up, no functional changes
- no support for National 32000, removing ns32000/national ifdefs maze
- remove tahoe defs
- ansify
looks fine to millert@@;  who also noticed rint removal
@
text
@d1 1
a1 1
/*	$OpenBSD: n_sqrt.S,v 1.3 2008/05/21 20:37:10 miod Exp $	*/
d45 1
a45 2
 * entry points:d_sqrt		address of double arg is on the stack
 *		sqrt		double arg is on the stack
a46 3
ENTRY(d_sqrt, R2|R3|R4|R5)
	movq	*4(ap),r0
	jmp  	dsqrt2
@


1.3
log
@Use proper *ENTRY macros with symbolic register save masks, sprinkle
_C_LABEL and _ASM_LABEL, and add $OpenBSD$ RCS Ids.

Include <sys/errno.h> and use its values directly, instead of using .set
directives (which grow the individual .o files even)

Also, replace `$' in internal (but non static) symbols with `_', and prefix
those with `__'.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 2
a39 2
 * double sqrt(arg)   revised August 15,1982
 * double arg;
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
d34 3
d40 1
a40 1
 * if(arg<0.0) { _errno = EDOM; return(<a reserved operand>); }
d45 2
a46 2
 * entry points:_d_sqrt		address of double arg is on the stack
 *		_sqrt		double arg is on the stack
d48 1
a48 9
	.text
	.align	1
	.globl	_sqrt
	.globl	_d_sqrt
	.globl	libm$dsqrt_r5
	.set	EDOM,33

_d_sqrt:
	.word	0x003c          # save r5,r4,r3,r2
d51 1
a51 2
_sqrt:
	.word	0x003c          # save r5,r4,r3,r2
d55 1
a55 1
	bsbb	libm$dsqrt_r5
d60 1
a60 1
libm$dsqrt_r5:			/* ENTRY POINT FOR cdabs and cdsqrt	*/
d111 1
a111 1
	calls	$1,_infnan	# generate the reserved op fault
@


1.1
log
@Initial revision
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
