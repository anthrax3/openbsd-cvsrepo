head	1.5;
access;
symbols
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2016.03.10.05.21.05;	author deraadt;	state dead;
branches;
next	1.4;
commitid	K03oHi07npnVMEbw;

1.4
date	2013.07.15.18.50.32;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.15.04.03.41;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.07.22.25.53;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@more pieces of vax
@
text
@/*	$OpenBSD: n_hypot.S,v 1.4 2013/07/15 18:50:32 miod Exp $	*/
/*	$NetBSD: n_cabs.S,v 1.1 1995/10/10 23:40:26 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cabs.s	8.1 (Berkeley) 6/4/93
 */

#include <machine/asm.h>

/*
 * double precision complex absolute value
 * CABS by W. Kahan, 9/7/80.
 * Revised for reserved operands by E. LeBlanc, 8/18/82
 * argument for complex absolute value by reference, *4(ap)
 * argument for cabs and hypot (C fcns) by value, 4(ap)
 * output is in r0:r1 (error less than 0.86 ulps)
 */

/*	entry for c functions cabs and hypot */
ENTRY(hypotf, 0)
	cvtfd	8(%ap),-(%sp)
	cvtfd	4(%ap),-(%sp)
	calls	$4,_C_LABEL(hypot)
	cvtdf	%r0,%r0
	ret

STRONG_ALIAS(hypotl, hypot)

ENTRY(hypot, 0x8000|R2|R3|R4|R5|R6)	# enable floating overflow
	movq	4(%ap),%r0	# r0:1 = x
	movq	12(%ap),%r2	# r2:3 = y
	bicw3	$0x7f,%r0,%r4	# r4 has signed biased exp of x
	cmpw	$0x8000,%r4
	jeql	return		# x is a reserved operand, so return it
	bicw3	$0x7f,%r2,%r5	# r5 has signed biased exp of y
	cmpw	$0x8000,%r5
	jneq	cont		/* y isn't a reserved operand */
	movq	%r2,%r0		/* return y if it's reserved */
	ret

cont:
	bsbb	regs_set	# r0:1 = dsqrt(x^2+y^2)/2^r6
	addw2	%r6,%r0		# unscaled cdabs in r0:1
	jvc	return		# unless it overflows
	subw2	$0x80,%r0	# halve r0 to get meaningful overflow
	addd2	%r0,%r0		# overflow; r0 is half of true abs value
return:
	ret

#if 0	/* apparently not used */
_ALTENTRY(__libm_cdabs_r6)	# ENTRY POINT for cdsqrt
				# calculates a scaled (factor in r6)
				# complex absolute value

	movq	(%r4)+,%r0	# r0:r1 = x via indirect addressing
	movq	(%r4),%r2	# r2:r3 = y via indirect addressing

	bicw3	$0x7f,%r0,%r5	# r5 has signed biased exp of x
	cmpw	$0x8000,%r5
	jeql	cdreserved	# x is a reserved operand
	bicw3	$0x7f,%r2,%r5	# r5 has signed biased exp of y
	cmpw	$0x8000,%r5
	jneq	regs_set	/* y isn't a reserved operand either? */

cdreserved:
	movl	*4(%ap),%r4	# r4 -> (u,v), if x or y is reserved
	movq	%r0,(%r4)+	# copy u and v as is and return
	movq	%r2,(%r4)	# (again addressing is indirect)
	ret
#endif

regs_set:
	bicw2	$0x8000,%r0	# r0:r1 = dabs(x)
	bicw2	$0x8000,%r2	# r2:r3 = dabs(y)
	cmpw	%r0,%r2
	jgeq	ordered
	movq	%r0,%r4
	movq	%r2,%r0
	movq	%r4,%r2		# force y's exp <= x's exp
ordered:
	bicw3	$0x7f,%r0,%r6	# r6 = exponent(x) + bias(129)
	jeql	retsb		# if x = y = 0 then cdabs(x,y) = 0
	subw2	$0x4780,%r6	# r6 = exponent(x) - 14
	subw2	%r6,%r0		# 2^14 <= scaled x < 2^15
	bitw	$0xff80,%r2
	jeql	retsb		# if y = 0 return dabs(x)
	subw2	%r6,%r2
	cmpw	$0x3780,%r2	# if scaled y < 2^-18
	jgtr	retsb		#   return dabs(x)
	emodd	%r0,$0,%r0,%r4,%r0 # r4 + r0:1 = scaled x^2
	emodd	%r2,$0,%r2,%r5,%r2 # r5 + r2:3 = scaled y^2
	addd2	%r2,%r0
	addl2	%r5,%r4
	cvtld	%r4,%r2
	addd2	%r2,%r0		# r0:1 = scaled x^2 + y^2
	jmp	__libm_dsqrt_r5	# r0:1 = dsqrt(x^2+y^2)/2^r6
retsb:
	rsb			# error < 0.86 ulp
@


1.4
log
@Fix atan2f() and hypotf() by actually converting both their arguments to the
larger type and passing them both the the double routine.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_hypot.S,v 1.3 2013/07/15 04:03:41 espie Exp $	*/
@


1.3
log
@add some missing asm functions to vax: long double as aliases to double,
and float functions by cvtfd/cvtdf (like in netbsd)

scalbnf will have to wait, as it's more complicated...
brings vax in line with the rest.

okay miod@@/martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_hypot.S,v 1.2 2013/07/05 21:10:50 miod Exp $	*/
d47 1
d49 1
a49 1
	calls	$2,_C_LABEL(hypot)
@


1.2
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_hypot.S,v 1.1 2008/10/07 22:25:53 martynas Exp $	*/
d46 8
a53 2
	.text
	_ALIGN_TEXT
@


1.1
log
@- noieee_src: adapt complex versions of the functions it already
supports (which is all, except the float ones)
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_cabs.S,v 1.4 2008/09/13 21:25:40 martynas Exp $	*/
d49 4
a52 4
	movq	4(ap),r0	# r0:1 = x
	movq	12(ap),r2	# r2:3 = y
	bicw3	$0x7f,r0,r4	# r4 has signed biased exp of x
	cmpw	$0x8000,r4
d54 2
a55 2
	bicw3	$0x7f,r2,r5	# r5 has signed biased exp of y
	cmpw	$0x8000,r5
d57 1
a57 1
	movq	r2,r0		/* return y if it's reserved */
d62 1
a62 1
	addw2	r6,r0		# unscaled cdabs in r0:1
d64 2
a65 2
	subw2	$0x80,r0	# halve r0 to get meaningful overflow
	addd2	r0,r0		# overflow; r0 is half of true abs value
d74 2
a75 2
	movq	(r4)+,r0	# r0:r1 = x via indirect addressing
	movq	(r4),r2		# r2:r3 = y via indirect addressing
d77 2
a78 2
	bicw3	$0x7f,r0,r5	# r5 has signed biased exp of x
	cmpw	$0x8000,r5
d80 2
a81 2
	bicw3	$0x7f,r2,r5	# r5 has signed biased exp of y
	cmpw	$0x8000,r5
d85 3
a87 3
	movl	*4(ap),r4	# r4 -> (u,v), if x or y is reserved
	movq	r0,(r4)+	# copy u and v as is and return
	movq	r2,(r4)		# (again addressing is indirect)
d92 3
a94 3
	bicw2	$0x8000,r0	# r0:r1 = dabs(x)
	bicw2	$0x8000,r2	# r2:r3 = dabs(y)
	cmpw	r0,r2
d96 3
a98 3
	movq	r0,r4
	movq	r2,r0
	movq	r4,r2		# force y's exp <= x's exp
d100 1
a100 1
	bicw3	$0x7f,r0,r6	# r6 = exponent(x) + bias(129)
d102 3
a104 3
	subw2	$0x4780,r6	# r6 = exponent(x) - 14
	subw2	r6,r0		# 2^14 <= scaled x < 2^15
	bitw	$0xff80,r2
d106 2
a107 2
	subw2	r6,r2
	cmpw	$0x3780,r2	# if scaled y < 2^-18
d109 6
a114 6
	emodd	r0,$0,r0,r4,r0	# r4 + r0:1 = scaled x^2
	emodd	r2,$0,r2,r5,r2	# r5 + r2:3 = scaled y^2
	addd2	r2,r0
	addl2	r5,r4
	cvtld	r4,r2
	addd2	r2,r0		# r0:1 = scaled x^2 + y^2
@

