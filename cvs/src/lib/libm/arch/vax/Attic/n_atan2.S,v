head	1.11;
access;
symbols
	OPENBSD_5_9:1.10.0.10
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.1.1.0.28
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.26
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2016.03.10.05.21.05;	author deraadt;	state dead;
branches;
next	1.10;
commitid	K03oHi07npnVMEbw;

1.10
date	2013.07.15.18.50.32;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.15.04.03.41;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.07.05.21.10.50;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.28.18.09.38;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.12.19.30.17;	author martynas;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.09.20.21.07;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.09.20.00.35;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.21.20.37.10;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.20.18.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.42.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.42.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@more pieces of vax
@
text
@/*	$OpenBSD: n_atan2.S,v 1.10 2013/07/15 18:50:32 miod Exp $	*/
/*	$NetBSD: n_atan2.S,v 1.1 1995/10/10 23:40:25 ragge Exp $	*/
/*
 * Copyright (c) 1985, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)atan2.s	8.1 (Berkeley) 6/4/93
 */

#include <machine/asm.h>

/*
 * ATAN2(Y,X)
 * RETURN ARG (X+iY)
 * VAX D FORMAT (56 BITS PRECISION)
 * CODED IN VAX ASSEMBLY LANGUAGE BY K.C. NG, 4/16/85; 
 *
 *	
 * Method :
 *	1. Reduce y to positive by atan2(y,x)=-atan2(-y,x).
 *	2. Reduce x to positive by (if x and y are unexceptional): 
 *		ARG (x+iy) = arctan(y/x)   	   ... if x > 0,
 *		ARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,
 *	3. According to the integer k=4t+0.25 truncated , t=y/x, the argument 
 *	   is further reduced to one of the following intervals and the 
 *	   arctangent of y/x is evaluated by the corresponding formula:
 *
 *          [0,7/16]	   atan(y/x) = t - t^3*(a1+t^2*(a2+...(a10+t^2*a11)...)
 *	   [7/16,11/16]    atan(y/x) = atan(1/2) + atan( (y-x/2)/(x+y/2) )
 *	   [11/16.19/16]   atan(y/x) = atan( 1 ) + atan( (y-x)/(x+y) )
 *	   [19/16,39/16]   atan(y/x) = atan(3/2) + atan( (y-1.5x)/(x+1.5y) )
 *	   [39/16,INF]     atan(y/x) = atan(INF) + atan( -x/y )
 *
 * Special cases:
 * Notations: atan2(y,x) == ARG (x+iy) == ARG(x,y).
 *
 *	ARG( NAN , (anything) ) is NaN;
 *	ARG( (anything), NaN ) is NaN;
 *	ARG(+(anything but NaN), +-0) is +-0  ;
 *	ARG(-(anything but NaN), +-0) is +-PI ;
 *	ARG( 0, +-(anything but 0 and NaN) ) is +-PI/2;
 *	ARG( +INF,+-(anything but INF and NaN) ) is +-0 ;
 *	ARG( -INF,+-(anything but INF and NaN) ) is +-PI;
 *	ARG( +INF,+-INF ) is +-PI/4 ;
 *	ARG( -INF,+-INF ) is +-3PI/4;
 *	ARG( (anything but,0,NaN, and INF),+-INF ) is +-PI/2;
 *
 * Accuracy:
 *	atan2(y,x) returns the exact ARG(x+iy) nearly rounded. 
 */

ENTRY(atan2f, 0)
	cvtfd	8(%ap),-(%sp)
	cvtfd	4(%ap),-(%sp)
	calls	$4,_C_LABEL(atan2)
	cvtdf	%r0,%r0
	ret
	
STRONG_ALIAS(atan2l,atan2)
ENTRY(atan2, R2|R3|R4|R5|R6|R7|R8|R9|R10|R11)
	movq	4(%ap),%r2		# r2 = y
	movq	12(%ap),%r4		# r4 = x
	bicw3	$0x7f,%r2,%r0
	bicw3	$0x7f,%r4,%r1
	cmpw	%r0,$0x8000		# y is the reserved operand
	jeql	resop
	cmpw	%r1,$0x8000		# x is the reserved operand
	jeql	resop
	subl2	$8,%sp
	bicw3	$0x7fff,%r2,-4(%fp)	# copy y sign bit to -4(fp)
	bicw3	$0x7fff,%r4,-8(%fp)	# copy x sign bit to -8(fp)
	cmpd	%r4,$0x4080		# x = 1.0 ?
	bneq	xnot1
	movq	%r2,%r0
	bicw2	$0x8000,%r0		# t = |y|
	movq	%r0,%r2			# y = |y|
	brb	begin
xnot1:
	bicw3	$0x807f,%r2,%r11	# yexp
	jeql	yeq0			# if y=0 goto yeq0
	bicw3	$0x807f,%r4,%r10	# xexp
	jeql	pio2			# if x=0 goto pio2
	subw2	%r10,%r11		# k = yexp - xexp
	cmpw	%r11,$0x2000		# k >= 64 (exp) ?
	jgeq	pio2			# atan2 = +-pi/2
	divd3	%r4,%r2,%r0		# t = y/x  never overflow
	bicw2	$0x8000,%r0		# t > 0
	bicw2	$0xff80,%r2		# clear the exponent of y
	bicw2	$0xff80,%r4		# clear the exponent of x
	bisw2	$0x4080,%r2		# normalize y to [1,2)
	bisw2	$0x4080,%r4		# normalize x to [1,2)
	subw2	%r11,%r4		# scale x so that yexp-xexp=k
begin:
	cmpw	%r0,$0x411c		# t : 39/16
	jgeq	L50
	addl3	$0x180,%r0,%r10		# 8*t
	cvtrfl	%r10,%r10		# [8*t] rounded to int
	ashl	$-1,%r10,%r10		# [8*t]/2
	casel	%r10,$0,$4
L1:
	.word	L20-L1
	.word	L20-L1
	.word	L30-L1
	.word	L40-L1
	.word	L40-L1
L10:
	movq	$0xb4d9940f985e407b,%r6	# Hi=.98279372324732906796d0
	movq	$0x21b1879a3bc2a2fc,%r8	# Lo=-.17092002525602665777d-17
	subd3	%r4,%r2,%r0		# y-x
	addw2	$0x80,%r0		# 2(y-x)
	subd2	%r4,%r0			# 2(y-x)-x
	addw2	$0x80,%r4		# 2x
	movq	%r2,%r10
	addw2	$0x80,%r10		# 2y
	addd2	%r10,%r2		# 3y
	addd2	%r4,%r2			# 3y+2x
	divd2	%r2,%r0			# (2y-3x)/(2x+3y)
	brw	L60
L20:
	cmpw	%r0,$0x3280		# t : 2**(-28)
	jlss	L80
	clrq	%r6			# Hi=r6=0, Lo=r8=0
	clrq	%r8
	brw	L60
L30:
	movq	$0xda7b2b0d63383fed,%r6	# Hi=.46364760900080611433d0
	movq	$0xf0ea17b2bf912295,%r8	# Lo=.10147340032515978826d-17
	movq	%r2,%r0
	addw2	$0x80,%r0		# 2y
	subd2	%r4,%r0			# 2y-x
	addw2	$0x80,%r4		# 2x
	addd2	%r2,%r4			# 2x+y
	divd2	%r4,%r0			# (2y-x)/(2x+y)
	brb	L60
L50:
	movq	$0x68c2a2210fda40c9,%r6	# Hi=1.5707963267948966135d1
	movq	$0x06e0145c26332326,%r8	# Lo=.22517417741562176079d-17
	cmpw	%r0,$0x5100		# y : 2**57
	bgeq	L90
	divd3	%r2,%r4,%r0
	bisw2	$0x8000,%r0 		# -x/y
	brb	L60
L40:
	movq	$0x68c2a2210fda4049,%r6	# Hi=.78539816339744830676d0
	movq	$0x06e0145c263322a6,%r8	# Lo=.11258708870781088040d-17
	subd3	%r4,%r2,%r0		# y-x
	addd2	%r4,%r2			# y+x
	divd2	%r2,%r0			# (y-x)/(y+x)
L60:
	movq	%r0,%r10
	muld2	%r0,%r0
	polyd	%r0,$12,ptable
	muld2	%r10,%r0
	subd2	%r0,%r8
	addd3	%r8,%r10,%r0
	addd2	%r6,%r0
L80:
	movw	-8(%fp),%r2
	bneq	pim
	bisw2	-4(%fp),%r0		# return sign(y)*r0
	ret
L90:					# x >= 2**25 
	movq	%r6,%r0
	brb	L80
pim:
	subd3	%r0,$0x68c2a2210fda4149,%r0	# pi-t
	bisw2	-4(%fp),%r0
	ret
yeq0:
	movw	-8(%fp),%r2
	beql	zero			# if sign(x)=1 return pi
	movq	$0x68c2a2210fda4149,%r0	# pi=3.1415926535897932270d1
	ret
zero:
	clrq	%r0			# return 0
	ret
pio2:
	movq	$0x68c2a2210fda40c9,%r0	# pi/2=1.5707963267948966135d1
	bisw2	-4(%fp),%r0		# return sign(y)*pi/2
	ret
resop:
	movq	$0x8000,%r0		# propagate the reserved operand
	ret
	.align 2
ptable:
	.quad	0xb50f5ce96e7abd60
	.quad	0x51e44a42c1073e02
	.quad	0x3487e3289643be35
	.quad	0xdb62066dffba3e54
	.quad	0xcf8e2d5199abbe70
	.quad	0x26f39cb884883e88
	.quad	0x135117d18998be9d
	.quad	0x602ce9742e883eba
	.quad	0xa35ad0be8e38bee3
	.quad	0xffac922249243f12
	.quad	0x7f14ccccccccbf4c
	.quad	0xaa8faaaaaaaa3faa
	.quad	0x0000000000000000
@


1.10
log
@Fix atan2f() and hypotf() by actually converting both their arguments to the
larger type and passing them both the the double routine.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.9 2013/07/15 04:03:41 espie Exp $	*/
@


1.9
log
@add some missing asm functions to vax: long double as aliases to double,
and float functions by cvtfd/cvtdf (like in netbsd)

scalbnf will have to wait, as it's more complicated...
brings vax in line with the rest.

okay miod@@/martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.8 2013/07/05 21:10:50 miod Exp $	*/
d77 1
d79 1
a79 1
	calls	$2,_C_LABEL(atan2)
@


1.8
log
@VAX ELF userland bits. Consists mostly of register prefix additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.7 2013/03/28 18:09:38 martynas Exp $	*/
d76 6
@


1.7
log
@Switch libc and libm to use strong aliases rather than weak aliases
where appropriate.  Among other things makes the symbols consistent
across all architectures (notably where ldbl mantissa is 53 bits).

While at it, kill unused LINTLIBRARY/PROTOLIB1 cruft which was there
to trick lint into recording the right prototypes for aliased
functions.  Most of the work done at the awesome n2k13 hackathon.

Agreed by kettenis@@, guenther@@, matthew@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.6 2008/12/12 19:30:17 martynas Exp $	*/
d78 5
a82 5
	movq	4(ap),r2		# r2 = y
	movq	12(ap),r4		# r4 = x
	bicw3	$0x7f,r2,r0
	bicw3	$0x7f,r4,r1
	cmpw	r0,$0x8000		# y is the reserved operand
d84 1
a84 1
	cmpw	r1,$0x8000		# x is the reserved operand
d86 4
a89 4
	subl2	$8,sp
	bicw3	$0x7fff,r2,-4(fp)	# copy y sign bit to -4(fp)
	bicw3	$0x7fff,r4,-8(fp)	# copy x sign bit to -8(fp)
	cmpd	r4,$0x4080		# x = 1.0 ?	
d91 3
a93 3
	movq	r2,r0
	bicw2	$0x8000,r0		# t = |y|
	movq	r0,r2			# y = |y|
d96 1
a96 1
	bicw3	$0x807f,r2,r11		# yexp
d98 1
a98 1
	bicw3	$0x807f,r4,r10		# xexp
d100 2
a101 2
	subw2	r10,r11			# k = yexp - xexp
	cmpw	r11,$0x2000		# k >= 64 (exp) ?
d103 7
a109 7
	divd3	r4,r2,r0		# t = y/x  never overflow
	bicw2	$0x8000,r0		# t > 0
	bicw2	$0xff80,r2		# clear the exponent of y
	bicw2	$0xff80,r4		# clear the exponent of x
	bisw2	$0x4080,r2		# normalize y to [1,2)
	bisw2	$0x4080,r4		# normalize x to [1,2)
	subw2	r11,r4			# scale x so that yexp-xexp=k
d111 1
a111 1
	cmpw	r0,$0x411c		# t : 39/16
d113 5
a117 5
	addl3	$0x180,r0,r10		# 8*t
	cvtrfl	r10,r10			# [8*t] rounded to int
	ashl	$-1,r10,r10		# [8*t]/2
	casel	r10,$0,$4
L1:	
d123 12
a134 12
L10:	
	movq	$0xb4d9940f985e407b,r6	# Hi=.98279372324732906796d0
	movq	$0x21b1879a3bc2a2fc,r8	# Lo=-.17092002525602665777d-17
	subd3	r4,r2,r0		# y-x
	addw2	$0x80,r0		# 2(y-x)
	subd2	r4,r0			# 2(y-x)-x
	addw2	$0x80,r4		# 2x	
	movq	r2,r10
	addw2	$0x80,r10		# 2y
	addd2	r10,r2			# 3y
	addd2	r4,r2			# 3y+2x
	divd2	r2,r0			# (2y-3x)/(2x+3y)
d136 2
a137 2
L20:	
	cmpw	r0,$0x3280		# t : 2**(-28)
d139 2
a140 2
	clrq	r6			# Hi=r6=0, Lo=r8=0
	clrq	r8
d142 9
a150 9
L30:	
	movq	$0xda7b2b0d63383fed,r6	# Hi=.46364760900080611433d0
	movq	$0xf0ea17b2bf912295,r8	# Lo=.10147340032515978826d-17
	movq	r2,r0
	addw2	$0x80,r0		# 2y
	subd2	r4,r0			# 2y-x
	addw2	$0x80,r4		# 2x
	addd2	r2,r4			# 2x+y
	divd2	r4,r0 			# (2y-x)/(2x+y)
d152 4
a155 4
L50:	
	movq	$0x68c2a2210fda40c9,r6	# Hi=1.5707963267948966135d1
	movq	$0x06e0145c26332326,r8	# Lo=.22517417741562176079d-17
	cmpw	r0,$0x5100		# y : 2**57
d157 2
a158 2
	divd3	r2,r4,r0
	bisw2	$0x8000,r0 		# -x/y
d160 16
a175 16
L40:	
	movq	$0x68c2a2210fda4049,r6	# Hi=.78539816339744830676d0
	movq	$0x06e0145c263322a6,r8	# Lo=.11258708870781088040d-17
	subd3	r4,r2,r0		# y-x
	addd2	r4,r2			# y+x
	divd2	r2,r0			# (y-x)/(y+x)
L60:	
	movq	r0,r10
	muld2	r0,r0
	polyd	r0,$12,ptable
	muld2	r10,r0
	subd2	r0,r8
	addd3	r8,r10,r0
	addd2	r6,r0
L80:	
	movw	-8(fp),r2
d177 1
a177 1
	bisw2	-4(fp),r0		# return sign(y)*r0
d180 1
a180 1
	movq	r6,r0
d183 2
a184 2
	subd3	r0,$0x68c2a2210fda4149,r0	# pi-t
	bisw2	-4(fp),r0
d187 1
a187 1
	movw	-8(fp),r2		
d189 1
a189 1
	movq	$0x68c2a2210fda4149,r0	# pi=3.1415926535897932270d1
d192 1
a192 1
	clrq	r0			# return 0
d195 2
a196 2
	movq	$0x68c2a2210fda40c9,r0	# pi/2=1.5707963267948966135d1
	bisw2	-4(fp),r0		# return sign(y)*pi/2
d199 1
a199 1
	movq	$0x8000,r0		# propagate the reserved operand
@


1.6
log
@space
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.5 2008/12/09 20:21:07 martynas Exp $	*/
d76 1
a76 1
WEAK_ALIAS(atan2l,atan2)
@


1.5
log
@alias fabsl to fabs on these archs
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.4 2008/12/09 20:00:35 martynas Exp $	*/
d76 1
a76 1
WEAK_ALIAS(atan2l, atan2)
@


1.4
log
@- 80-bit and quad precision trigonometric and other most
important functions: acosl, asinl, atanl, atan2l, cosl,
sinl, tanl, exp2l, frexpl, ilogbl, ldexpl, logbl, scalbnl,
fabsl, hypotl, powl, sqrtl, rintl, copysignl, nanl, fdiml,
fmaxl, fminl.  mostly taken from freebsd, needed alot of
changes to adapt.  note, these are all c versions;  and are
quite slow when architectures have, e.g. sqrt.  assembly
versions will be added afterwards
- make them .weak/__weak_alias to the double precision
versions on other archs
- no need to have two finites.  finite() and finitef() are
non-standard 3BSD obsolete versions of isfinite.  remove
from libm.  make them weak_alias in libc to __isfinite and
__isfinitef instead.  similarly make 3BSD obsolete versions
of isinf, isinff, isnan, isnanf weak_aliases to C99's
__isinf, __isinff, __isnan, __isnanf
- remove unused infinity.c.  the c library has infinities
for each supported platform
- use STRICT_ASSIGN cast hack for _kernel_rem_pio2, so that
the double version has a chance of working on i386 with
extra precision
- avoid storing multiple copies of the pi/2 array, since
it won't vary
- bump major due to removed finite/finitef.  although they
will be in libc, which anything is linked to, minor bump
might be enough
ok millert@@.   tested by sthen@@, jsg@@, ajacoutot@@, kili@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: n_atan2.S,v 1.3 2008/05/21 20:37:10 miod Exp $	*/
d76 1
a76 3
.weak atan2l
	atan2l = atan2

@


1.3
log
@Use proper *ENTRY macros with symbolic register save masks, sprinkle
_C_LABEL and _ASM_LABEL, and add $OpenBSD$ RCS Ids.

Include <sys/errno.h> and use its values directly, instead of using .set
directives (which grow the individual .o files even)

Also, replace `$' in internal (but non static) symbols with `_', and prefix
those with `__'.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 3
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
d34 2
d76 1
a76 5
	.text
	.align 1
	.globl	_atan2
_atan2 :
	.word	0x0ff4
@


1.1
log
@Initial revision
@
text
@d14 1
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
