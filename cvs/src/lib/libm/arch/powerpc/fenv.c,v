head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.4;
commitid	Lp8bnB2xK76nGFvJ;

1.4
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.25.20.34.09;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: fenv.c,v 1.4 2014/04/18 15:09:52 guenther Exp $	*/

/*
 * Copyright (c) 2011 Martynas Venckus <martynas@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <fenv.h>

union u {
	unsigned long long fpscr;
	unsigned int bits[2];
};

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 */
fenv_t __fe_dfl_env = 0;

/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	union u u;
	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	/* Clear the requested floating-point exceptions */
	u.bits[1] &= ~excepts;
	if (excepts & FE_INVALID)
		u.bits[1] &= ~_FE_INVALID_ALL;

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (0);
}
DEF_STD(feclearexcept);

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated by
 * the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	/* Store the results in flagp */
	*flagp = u.bits[1] & excepts;

	return (0);
}

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 */
int
feraiseexcept(int excepts)
{
	excepts &= FE_ALL_EXCEPT;

	fesetexceptflag((fexcept_t *)&excepts, excepts);

	return (0);
}
DEF_STD(feraiseexcept);

/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	/* Set the requested status flags */
	u.bits[1] &= ~excepts;
	u.bits[1] |= *flagp & excepts;
	if (excepts & FE_INVALID) {
		if (*flagp & FE_INVALID)
			u.bits[1] |= _FE_INVALID_SOFT;
		else
			u.bits[1] &= ~_FE_INVALID_ALL;
	}

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (0);
}
DEF_STD(fesetexceptflag);

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	union u u;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	return (u.bits[1] & excepts);
}
DEF_STD(fetestexcept);

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	union u u;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	return (u.bits[1] & _ROUND_MASK);
}
DEF_STD(fegetround);

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	union u u;

	/* Check whether requested rounding direction is supported */
	if (round & ~_ROUND_MASK)
		return (-1);

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	/* Set the rounding direction */
	u.bits[1] &= ~_ROUND_MASK;
	u.bits[1] |= round;

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (0);
}
DEF_STD(fesetround);

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	union u u;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	*envp = u.bits[1];

	return (0);
}
DEF_STD(fegetenv);

/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	union u u;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	*envp = u.bits[1];

	/* Clear exception flags in FPSCR */
	u.bits[1] &= ~(FE_ALL_EXCEPT | _FE_INVALID_ALL);

	/* Mask all exceptions */
	u.bits[1] &= ~(FE_ALL_EXCEPT >> _MASK_SHIFT);
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (0);
}
DEF_STD(feholdexcept);

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	union u u;

	u.bits[0] = 0;
	u.bits[1] = *envp;

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (0);
}
DEF_STD(fesetenv);

/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	union u u;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	/* Install new floating-point environment */
	fesetenv(envp);

	/* Raise any previously accumulated exceptions */
	feraiseexcept(u.bits[1]);

	return (0);
}
DEF_STD(feupdateenv);

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	union u u;
	unsigned int omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	omask = (u.bits[1] << _MASK_SHIFT) & FE_ALL_EXCEPT;
	u.bits[1] |= mask >> _MASK_SHIFT;

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (omask);

}

int
fedisableexcept(int mask)
{
	union u u;
	unsigned int omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	omask = (u.bits[1] << _MASK_SHIFT) & FE_ALL_EXCEPT;
	u.bits[1] &= ~(mask >> _MASK_SHIFT);

	/* Load the floating-point status and control register */
	__asm__ volatile ("mtfsf 0xff,%0" :: "f" (u.fpscr));

	return (omask);
}

int
fegetexcept(void)
{
	union u u;

	/* Store the current floating-point status and control register */
	__asm__ volatile ("mffs %0" : "=f" (u.fpscr));

	return ((u.bits[1] << _MASK_SHIFT) & FE_ALL_EXCEPT);
}
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2012/12/05 23:20:03 deraadt Exp $	*/
d60 1
d96 1
d128 1
d147 1
d162 1
d190 1
d208 1
d235 1
d258 1
d284 1
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/28 17:34:23 martynas Exp $	*/
d48 1
a48 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d56 1
a56 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d74 1
a74 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d109 1
a109 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d122 1
a122 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d140 1
a140 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d154 1
a154 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d174 1
a174 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d181 1
a181 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d196 1
a196 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d215 1
a215 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d224 1
a224 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d246 1
a246 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d265 1
a265 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d288 1
a288 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d294 1
a294 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d309 1
a309 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
d315 1
a315 1
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (u.fpscr));
d326 1
a326 1
	__asm__ __volatile__ ("mffs %0" : "=f" (u.fpscr));
@


1.2
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/25 20:34:09 martynas Exp $	*/
a17 2

#include <sys/cdefs.h>
@


1.1
log
@fenv for powerpc
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/21 20:40:54 martynas Exp $	*/
d23 5
d46 1
a46 4
	struct {
		unsigned int bits[2];
	} fpscr;

d49 2
a50 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d53 1
a53 1
	fpscr.bits[1] &= ~excepts;
d55 1
a55 1
		fpscr.bits[1] &= ~_FE_INVALID_ALL;
d57 2
a58 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d71 1
a71 3
	struct {
		unsigned int bits[2];
	} fpscr;
d75 2
a76 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr.bits));
d79 1
a79 1
	*flagp = fpscr.bits[1] & excepts;
d106 1
a106 3
	struct {
		unsigned int bits[2];
	} fpscr;
d110 2
a111 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d114 2
a115 2
	fpscr.bits[1] &= ~excepts;
	fpscr.bits[1] |= *flagp & excepts;
d118 1
a118 1
			fpscr.bits[1] |= _FE_INVALID_SOFT;
d120 1
a120 1
			fpscr.bits[1] &= ~_FE_INVALID_ALL;
d123 2
a124 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d137 1
a137 3
	struct {
		unsigned int bits[2];
	} fpscr;
d141 2
a142 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr.bits));
d144 1
a144 1
	return (fpscr.bits[1] & excepts);
d153 1
a153 3
	struct {
		unsigned int bits[2];
	} fpscr;
d155 2
a156 1
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d158 1
a158 1
	return (fpscr.bits[1] & _ROUND_MASK);
d169 1
a169 3
	struct {
		unsigned int bits[2];
	} fpscr;
d175 2
a176 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d178 3
a180 5
	/*
	 * Set the rounding direction
	 */
	fpscr.bits[1] &= ~_ROUND_MASK;
	fpscr.bits[1] |= round;
d182 2
a183 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d195 1
a195 3
	struct {
		unsigned int bits[2];
	} fpscr;
d197 2
a198 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d200 1
a200 1
	*envp = fpscr.bits[1];
d214 1
a214 3
	struct {
		unsigned int bits[2];
	} fpscr;
d216 2
a217 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d219 1
a219 1
	*envp = fpscr.bits[1];
d222 1
a222 1
	fpscr.bits[1] &= ~(FE_ALL_EXCEPT | _FE_INVALID_ALL);
d225 2
a226 2
	fpscr.bits[1] &= ~(FE_ALL_EXCEPT >> _EMASK_SHIFT);
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d242 1
a242 3
	struct {
		unsigned int bits[2];
	} fpscr;
d244 2
a245 2
	fpscr.bits[0] = 0;
	fpscr.bits[1] = *envp;
d247 2
a248 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d264 1
a264 3
	struct {
		unsigned int bits[2];
	} fpscr;
d266 2
a267 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr.bits));
d273 1
a273 1
	feraiseexcept(fpscr.bits[1]);
d284 1
a284 3
	struct {
		unsigned int bits[2];
	} fpscr;
d289 2
a290 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d292 2
a293 2
	omask = (fpscr.bits[1] << _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpscr.bits[1] |= mask >> _EMASK_SHIFT;
d295 2
a296 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d305 1
a305 3
	struct {
		unsigned int bits[2];
	} fpscr;
d310 2
a311 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d313 2
a314 2
	omask = (fpscr.bits[1] << _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpscr.bits[1] &= ~(mask >> _EMASK_SHIFT);
d316 2
a317 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("mtfsf 0xff,%0" :: "f" (fpscr));
d325 1
a325 3
	struct {
		unsigned int bits[2];
	} fpscr;
d327 2
a328 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("mffs %0" : "=f" (fpscr));
d330 1
a330 1
	return ((fpscr.bits[1] << _EMASK_SHIFT) & FE_ALL_EXCEPT);
@

