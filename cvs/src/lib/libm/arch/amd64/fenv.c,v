head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.12.19.47.01;	author guenther;	state Exp;
branches;
next	1.4;
commitid	Lp8bnB2xK76nGFvJ;

1.4
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.21.21.12.55;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: fenv.c,v 1.4 2014/04/18 15:09:52 guenther Exp $	*/
/*	$NetBSD: fenv.c,v 1.1 2010/07/31 21:47:53 joerg Exp $	*/

/*-
 * Copyright (c) 2004-2005 David Schultz <das (at) FreeBSD.ORG>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <fenv.h>
#include <machine/fpu.h>

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 *
 * x87 fpu registers are 16bit wide. The upper bits, 31-16, are marked as
 * RESERVED.
 */
fenv_t __fe_dfl_env = {
	{
		0xffff0000 | __INITIAL_NPXCW__,	/* Control word register */
		0xffff0000,			/* Status word register */
		0xffffffff,			/* Tag word register */
		{
			0x00000000,
			0x00000000,
			0x00000000,
			0xffff0000
		}
	},
	__INITIAL_MXCSR__			/* MXCSR register */
};


/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	fenv_t fenv;
	unsigned int mxcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current x87 floating-point environment */
	__asm__ volatile ("fnstenv %0" : "=m" (fenv));

	/* Clear the requested floating-point exceptions */
	fenv.__x87.__status &= ~excepts;

	/* Load the x87 floating-point environent */
	__asm__ volatile ("fldenv %0" : : "m" (fenv));

	/* Same for SSE environment */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));
	mxcsr &= ~excepts;
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (0);
}
DEF_STD(feclearexcept);

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated by
 * the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	unsigned short status;
	unsigned int mxcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current x87 status register */
	__asm__ volatile ("fnstsw %0" : "=am" (status));

	/* Store the MXCSR register */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));

	/* Store the results in flagp */
	*flagp = (status | mxcsr) & excepts;

	return (0);
}

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 *
 * The standard explicitly allows us to execute an instruction that has the
 * exception as a side effect, but we choose to manipulate the status register
 * directly.
 *
 * The validation of input is being deferred to fesetexceptflag().
 */
int
feraiseexcept(int excepts)
{
	excepts &= FE_ALL_EXCEPT;

	fesetexceptflag((fexcept_t *)&excepts, excepts);
	__asm__ volatile ("fwait");

	return (0);
}
DEF_STD(feraiseexcept);

/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	fenv_t fenv;
	unsigned int mxcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current x87 floating-point environment */
	__asm__ volatile ("fnstenv %0" : "=m" (fenv));

	/* Set the requested status flags */
	fenv.__x87.__status &= ~excepts;
	fenv.__x87.__status |= *flagp & excepts;

	/* Load the x87 floating-point environent */
	__asm__ volatile ("fldenv %0" : : "m" (fenv));

	/* Same for SSE environment */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));
	mxcsr &= ~excepts;
	mxcsr |= *flagp & excepts;
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (0);
}
DEF_STD(fesetexceptflag);

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	unsigned short status;
	unsigned int mxcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current x87 status register */
	__asm__ volatile ("fnstsw %0" : "=am" (status));

	/* Store the MXCSR register state */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));

	return ((status | mxcsr) & excepts);
}
DEF_STD(fetestexcept);

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	unsigned short control;

	/*
	 * We assume that the x87 and the SSE unit agree on the
	 * rounding mode.  Reading the control word on the x87 turns
	 * out to be about 5 times faster than reading it on the SSE
	 * unit on an Opteron 244.
	 */
	__asm__ volatile ("fnstcw %0" : "=m" (control));

	return (control & _X87_ROUND_MASK);
}
DEF_STD(fegetround);

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	unsigned short control;
	unsigned int mxcsr;

	/* Check whether requested rounding direction is supported */
	if (round & ~_X87_ROUND_MASK)
		return (-1);

	/* Store the current x87 control word register */
	__asm__ volatile ("fnstcw %0" : "=m" (control));

	/* Set the rounding direction */
	control &= ~_X87_ROUND_MASK;
	control |= round;

	/* Load the x87 control word register */
	__asm__ volatile ("fldcw %0" : : "m" (control));

	/* Same for the SSE environment */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));
	mxcsr &= ~(_X87_ROUND_MASK << _SSE_ROUND_SHIFT);
	mxcsr |= round << _SSE_ROUND_SHIFT;
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (0);
}
DEF_STD(fesetround);

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	/* Store the current x87 floating-point environment */
	__asm__ volatile ("fnstenv %0" : "=m" (*envp));

	/* Store the MXCSR register state */
	__asm__ volatile ("stmxcsr %0" : "=m" (envp->__mxcsr));

	/*
	 * When an FNSTENV instruction is executed, all pending exceptions are
	 * essentially lost (either the x87 FPU status register is cleared or
	 * all exceptions are masked).
	 *
	 * 8.6 X87 FPU EXCEPTION SYNCHRONIZATION -
	 * Intel(R) 64 and IA-32 Architectures Softare Developer's Manual - Vol1
	 */
	__asm__ volatile ("fldcw %0" : : "m" (envp->__x87.__control));

	return (0);
}
DEF_STD(fegetenv);

/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	unsigned int mxcsr;

	/* Store the current x87 floating-point environment */
	__asm__ volatile ("fnstenv %0" : "=m" (*envp));

	/* Clear all exception flags in FPU */
	__asm__ volatile ("fnclex");

	/* Store the MXCSR register state */
	__asm__ volatile ("stmxcsr %0" : "=m" (envp->__mxcsr));

	/* Clear exception flags in MXCSR */
	mxcsr = envp->__mxcsr;
	mxcsr &= ~FE_ALL_EXCEPT;

	/* Mask all exceptions */
	mxcsr |= FE_ALL_EXCEPT << _SSE_MASK_SHIFT;

	/* Store the MXCSR register */
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (0);
}
DEF_STD(feholdexcept);

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	/* Load the x87 floating-point environent */
	__asm__ volatile ("fldenv %0" : : "m" (*envp));

	/* Store the MXCSR register */
	__asm__ volatile ("ldmxcsr %0" : : "m" (envp->__mxcsr));

	return (0);
}
DEF_STD(fesetenv);

/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	unsigned short status;
	unsigned int mxcsr;

	/* Store the x87 status register */
	__asm__ volatile ("fnstsw %0" : "=am" (status));

	/* Store the MXCSR register */
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));

	/* Install new floating-point environment */
	fesetenv(envp);

	/* Raise any previously accumulated exceptions */
	feraiseexcept(status | mxcsr);

	return (0);
}
DEF_STD(feupdateenv);

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	unsigned int mxcsr, omask;
	unsigned short control;

	mask &= FE_ALL_EXCEPT;

	__asm__ volatile ("fnstcw %0" : "=m" (control));
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));

	omask = ~(control | (mxcsr >> _SSE_MASK_SHIFT)) & FE_ALL_EXCEPT;
	control &= ~mask;
	__asm__ volatile ("fldcw %0" : : "m" (control));

	mxcsr &= ~(mask << _SSE_MASK_SHIFT);
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (omask);
}

int
fedisableexcept(int mask)
{
	unsigned int mxcsr, omask;
	unsigned short control;

	mask &= FE_ALL_EXCEPT;

	__asm__ volatile ("fnstcw %0" : "=m" (control));
	__asm__ volatile ("stmxcsr %0" : "=m" (mxcsr));

	omask = ~(control | (mxcsr >> _SSE_MASK_SHIFT)) & FE_ALL_EXCEPT;
	control |= mask;
	__asm__ volatile ("fldcw %0" : : "m" (control));

	mxcsr |= mask << _SSE_MASK_SHIFT;
	__asm__ volatile ("ldmxcsr %0" : : "m" (mxcsr));

	return (omask);
}

int
fegetexcept(void)
{
	unsigned short control;

	/*
	 * We assume that the masks for the x87 and the SSE unit are
	 * the same.
	 */
	__asm__ volatile ("fnstcw %0" : "=m" (control));

	return (~control & FE_ALL_EXCEPT);
}
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2012/12/05 23:20:02 deraadt Exp $	*/
d89 1
d136 1
d169 1
d192 1
d212 1
d247 1
d274 1
d308 1
d329 1
d359 1
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/28 17:34:23 martynas Exp $	*/
d74 1
a74 1
	__asm__ __volatile__ ("fnstenv %0" : "=m" (fenv));
d80 1
a80 1
	__asm__ __volatile__ ("fldenv %0" : : "m" (fenv));
d83 1
a83 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d85 1
a85 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d104 1
a104 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (status));
d107 1
a107 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d131 1
a131 1
	__asm__ __volatile__ ("fwait");
d150 1
a150 1
	__asm__ __volatile__ ("fnstenv %0" : "=m" (fenv));
d157 1
a157 1
	__asm__ __volatile__ ("fldenv %0" : : "m" (fenv));
d160 1
a160 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d163 1
a163 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d182 1
a182 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (status));
d185 1
a185 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d204 1
a204 1
	__asm__ __volatile__ ("fnstcw %0" : "=m" (control));
d225 1
a225 1
	__asm__ __volatile__ ("fnstcw %0" : "=m" (control));
d232 1
a232 1
	__asm__ __volatile__ ("fldcw %0" : : "m" (control));
d235 1
a235 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d238 1
a238 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d251 1
a251 1
	__asm__ __volatile__ ("fnstenv %0" : "=m" (*envp));
d254 1
a254 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (envp->__mxcsr));
d264 1
a264 1
	__asm__ __volatile__ ("fldcw %0" : : "m" (envp->__x87.__control));
d281 1
a281 1
	__asm__ __volatile__ ("fnstenv %0" : "=m" (*envp));
d284 1
a284 1
	__asm__ __volatile__ ("fnclex");
d287 1
a287 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (envp->__mxcsr));
d297 1
a297 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d314 1
a314 1
	__asm__ __volatile__ ("fldenv %0" : : "m" (*envp));
d317 1
a317 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (envp->__mxcsr));
d337 1
a337 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (status));
d340 1
a340 1
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d362 2
a363 2
	__asm__ __volatile__ ("fnstcw %0" : "=m" (control));
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d367 1
a367 1
	__asm__ __volatile__ ("fldcw %0" : : "m" (control));
d370 1
a370 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d383 2
a384 2
	__asm__ __volatile__ ("fnstcw %0" : "=m" (control));
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));
d388 1
a388 1
	__asm__ __volatile__ ("fldcw %0" : : "m" (control));
d391 1
a391 1
	__asm__ __volatile__ ("ldmxcsr %0" : : "m" (mxcsr));
d405 1
a405 1
	__asm__ __volatile__ ("fnstcw %0" : "=m" (control));
@


1.2
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/21 21:12:55 martynas Exp $	*/
d30 1
a30 1
#include <sys/cdefs.h>
a31 2

#include <fenv.h>
@


1.1
log
@fenv for amd64;  from matthew@@
feedback & ok guenther@@, matthew@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $NetBSD: fenv.c,v 1.1 2010/07/31 21:47:53 joerg Exp $ */
d56 2
a57 2
			0xffff0000,
		},
d100 1
a100 1
	unsigned short x87_status;
d106 1
a106 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (x87_status));
d112 1
a112 1
	*flagp = (x87_status | mxcsr) & excepts;
d178 1
a178 1
	unsigned short x87_status;
d184 1
a184 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (x87_status));
d189 1
a189 1
	return ((x87_status | mxcsr) & excepts);
a198 1
	unsigned int mxcsr;
d201 4
a204 4
	 * We check both the x87 floating-point unit _and_ the SSE unit.
	 * Normally, those two must agree with respect to each other. If they
	 * don't, it's not our fault and the result is non-determinable, in
	 * which case POSIX says that a negative value should be returned.
a206 6
	__asm__ __volatile__ ("stmxcsr %0" : "=m" (mxcsr));

	if ((control & _X87_ROUND_MASK)
	    != ((mxcsr & _SSE_ROUND_MASK) >> 3)) {
		return (-1);
	}
d226 1
a226 1
	/* Store the current x87 control word register  */
d229 1
a229 4
	/*
	 * Set the rounding direction
	 * Rounding Control is bits 10-11, so shift appropriately
	 */
d236 1
a236 4
	/*
	 * Same for the SSE environment
	 * Rounding Control is bits 13-14, so shift appropriately
	 */
d238 2
a239 2
	mxcsr &= ~_SSE_ROUND_MASK;
	mxcsr |= (round << _SSE_ROUND_SHIFT);
d291 1
a291 1
	/* Clear exception flags in MXCSR XXX */
d296 1
a296 1
	mxcsr |= FE_ALL_EXCEPT << _SSE_EMASK_SHIFT;
d298 1
d335 1
a335 1
	unsigned short x87_status;
d339 1
a339 1
	__asm__ __volatile__ ("fnstsw %0" : "=am" (x87_status));
d348 1
a348 1
	feraiseexcept(x87_status | mxcsr);
d367 1
a367 1
	omask = ~(control | (mxcsr >> _SSE_EMASK_SHIFT)) & FE_ALL_EXCEPT;
d371 1
a371 1
	mxcsr &= ~(mask << _SSE_EMASK_SHIFT);
a374 1

d388 1
a388 1
	omask = ~(control | (mxcsr >> _SSE_EMASK_SHIFT)) & FE_ALL_EXCEPT;
d392 1
a392 1
	mxcsr |= mask << _SSE_EMASK_SHIFT;
@

