head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2014.03.18.22.36.30;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2013.02.02.13.29.14;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.20.22.27.59;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: fenv.c,v 1.4 2013/02/02 13:29:14 miod Exp $	*/

/*
 * Copyright (c) 2011 Martynas Venckus <martynas@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <fenv.h>

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 */
fenv_t __fe_dfl_env = {
	0x00000000,				/* Control register */
	0x00000000				/* Status register */
};

/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	unsigned int fpsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fpsr));

	/* Clear the requested floating-point exceptions */
	fpsr &= ~excepts;

	/* Load the floating-point status register */
	__asm__ __volatile__ ("fmovel %0, %%fpsr" : : "dm" (fpsr));

	return (0);
}

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated by
 * the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	unsigned int fpsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fpsr));

	/* Store the results in flagp */
	*flagp = fpsr & excepts;

	return (0);
}

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 */
int
feraiseexcept(int excepts)
{
	volatile double d;

	excepts &= FE_ALL_EXCEPT;

	/*
	 * With a compiler that supports the FENV_ACCESS pragma
	 * properly, simple expressions like '0.0 / 0.0' should
	 * be sufficient to generate traps.  Unfortunately, we
	 * need to bring a volatile variable into the equation
	 * to prevent incorrect optimizations.
	 */
	if (excepts & FE_INVALID) {
		d = 0.0;
		d = 0.0 / d;
	}
	if (excepts & FE_DIVBYZERO) {
		d = 0.0;
		d = 1.0 / d;
	}
	if (excepts & FE_OVERFLOW) {
		d = 0x1.ffp1023;
		d *= 2.0;
	}
	if (excepts & FE_UNDERFLOW) {
		d = 0x1p-1022;
		d /= 0x1p1023;
	}
	if (excepts & FE_INEXACT) {
		d = 0x1p-1022;
		d += 1.0;
	}
	__asm__ __volatile__ ("fnop");

	return (0);
}

/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	unsigned int fpsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fpsr));

	/* Set the requested status flags */
	fpsr &= ~excepts;
	fpsr |= *flagp & excepts;

	/* Load the floating-point status register */
	__asm__ __volatile__ ("fmovel %0, %%fpsr" : : "dm" (fpsr));

	return (0);
}

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	unsigned int fpsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point status register */
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fpsr));

	return (fpsr & excepts);
}

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	unsigned int fpcr;

	/* Store the current floating-point control register */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fpcr));

	return (fpcr & _ROUND_MASK);
}

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	unsigned int fpcr;

	/* Check whether requested rounding direction is supported */
	if (round & ~_ROUND_MASK)
		return (-1);

	/* Store the current floating-point control register */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fpcr));

	/* Set the rounding direction */
	fpcr &= ~_ROUND_MASK;
	fpcr |= round;

	/* Load the floating-point control register */
	__asm__ __volatile__ ("fmovel %0, %%fpcr" : : "dm" (fpcr));

	return (0);
}

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	/* Store the current floating-point control and status registers */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (envp->__control));
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (envp->__status));

	return (0);
}

/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	unsigned int fpsr, fpcr;

	/* Store the current floating-point control and status registers */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (envp->__control));
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (envp->__status));

	/* Clear exception flags in FPSR */
	fpsr = envp->__status;
	fpsr &= ~FE_ALL_EXCEPT;
	__asm__ __volatile__ ("fmovel %0, %%fpsr" : : "dm" (fpsr));

	/* Mask all exceptions */
	fpcr = envp->__control;
	fpcr &= ~(FE_ALL_EXCEPT << _MASK_SHIFT);
	__asm__ __volatile__ ("fmovel %0, %%fpcr" : : "dm" (fpcr));

	return (0);
}

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	fenv_t fenv;

	/* Store the current floating-point control and status registers */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fenv.__control));
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fenv.__status));

	/* Set the requested control flags */
	fenv.__control &= ~((FE_ALL_EXCEPT << _MASK_SHIFT) | _ROUND_MASK);
	fenv.__control |= envp->__control & ((FE_ALL_EXCEPT << _MASK_SHIFT) |
	    _ROUND_MASK);

	/* Set the requested status flags */
	fenv.__status &= ~FE_ALL_EXCEPT;
	fenv.__status |= envp->__status & FE_ALL_EXCEPT;

	/* Load the floating-point control and status registers */
	__asm__ __volatile__ ("fmovel %0, %%fpcr" : : "dm" (fenv.__control));
	__asm__ __volatile__ ("fmovel %0, %%fpsr" : : "dm" (fenv.__status));

	return (0);
}

/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	unsigned int fpsr;

	/* Store the current floating-point status register */
	__asm__ __volatile__ ("fmovel %%fpsr, %0" : "=dm" (fpsr));

	/* Install new floating-point environment */
	fesetenv(envp);

	/* Raise any previously accumulated exceptions */
	feraiseexcept(fpsr);

	return (0);
}

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	unsigned int fpcr, omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point control register */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fpcr));

	omask = (fpcr >> _MASK_SHIFT) & FE_ALL_EXCEPT;
	fpcr |= mask << _MASK_SHIFT;

	/* Load the floating-point control register */
	__asm__ __volatile__ ("fmovel %0, %%fpcr" : : "dm" (fpcr));

	return (omask);

}

int
fedisableexcept(int mask)
{
	unsigned int fpcr, omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point control register */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fpcr));

	omask = (fpcr >> _MASK_SHIFT) & FE_ALL_EXCEPT;
	fpcr &= ~(mask << _MASK_SHIFT);

	/* Load the floating-point control register */
	__asm__ __volatile__ ("fmovel %0, %%fpcr" : : "dm" (fpcr));

	return (omask);
}

int
fegetexcept(void)
{
	unsigned int fpcr;

	/* Store the current floating-point control register */
	__asm__ __volatile__ ("fmovel %%fpcr, %0" : "=dm" (fpcr));

	return ((fpcr >> _MASK_SHIFT) & FE_ALL_EXCEPT);
}
@


1.4
log
@Userland bits for m68k/ELF. Mostly addition of register prefixes to the
assembler instructions, and cope with the few changes in return values
location.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2012/12/05 23:20:03 deraadt Exp $	*/
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/28 17:34:23 martynas Exp $	*/
d47 1
a47 1
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fpsr));
d53 1
a53 1
	__asm__ __volatile__ ("fmovel %0, fpsr" : : "dm" (fpsr));
d71 1
a71 1
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fpsr));
d135 1
a135 1
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fpsr));
d142 1
a142 1
	__asm__ __volatile__ ("fmovel %0, fpsr" : : "dm" (fpsr));
d160 1
a160 1
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fpsr));
d174 1
a174 1
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fpcr));
d194 1
a194 1
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fpcr));
d201 1
a201 1
	__asm__ __volatile__ ("fmovel %0, fpcr" : : "dm" (fpcr));
d214 2
a215 2
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (envp->__control));
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (envp->__status));
d232 2
a233 2
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (envp->__control));
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (envp->__status));
d238 1
a238 1
	__asm__ __volatile__ ("fmovel %0, fpsr" : : "dm" (fpsr));
d243 1
a243 1
	__asm__ __volatile__ ("fmovel %0, fpcr" : : "dm" (fpcr));
d262 2
a263 2
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fenv.__control));
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fenv.__status));
d275 2
a276 2
	__asm__ __volatile__ ("fmovel %0, fpcr" : : "dm" (fenv.__control));
	__asm__ __volatile__ ("fmovel %0, fpsr" : : "dm" (fenv.__status));
d295 1
a295 1
	__asm__ __volatile__ ("fmovel fpsr, %0" : "=dm" (fpsr));
d317 1
a317 1
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fpcr));
d323 1
a323 1
	__asm__ __volatile__ ("fmovel %0, fpcr" : : "dm" (fpcr));
d337 1
a337 1
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fpcr));
d343 1
a343 1
	__asm__ __volatile__ ("fmovel %0, fpcr" : : "dm" (fpcr));
d354 1
a354 1
	__asm__ __volatile__ ("fmovel fpcr, %0" : "=dm" (fpcr));
@


1.2
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/20 22:27:59 martynas Exp $	*/
a17 2

#include <sys/cdefs.h>
@


1.1
log
@fenv for m68k
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 2
a34 2
	0x00000000,			/* Control register */
	0x00000000			/* Status register */
d175 1
d198 1
a198 3
	/*
	 * Set the rounding direction
	 */
d244 1
a244 1
	fpcr &= ~(FE_ALL_EXCEPT << _EMASK_SHIFT);
d268 2
a269 2
	fenv.__control &= ~((FE_ALL_EXCEPT << _EMASK_SHIFT) | _ROUND_MASK);
	fenv.__control |= envp->__control & ((FE_ALL_EXCEPT << _EMASK_SHIFT) |
d276 1
a276 1
	/* Load the current floating-point control and status registers */
d321 2
a322 2
	omask = (fpcr >> _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpcr |= mask << _EMASK_SHIFT;
d341 2
a342 2
	omask = (fpcr >> _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpcr &= ~(mask << _EMASK_SHIFT);
d358 1
a358 1
	return ((fpcr >> _EMASK_SHIFT) & FE_ALL_EXCEPT);
@

