head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.09.12.19.47.02;	author guenther;	state Exp;
branches;
next	1.4;
commitid	Lp8bnB2xK76nGFvJ;

1.4
date	2014.04.18.15.09.52;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.05.23.20.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.17.34.23;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.26.21.14.07;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Reduce libm's exports and make internal calls go direct.
All dependencies on libc are now via reserved/standardized names.

ok kettenis@@ millert@@ deraadt@@
@
text
@/*	$OpenBSD: fenv.c,v 1.4 2014/04/18 15:09:52 guenther Exp $	*/

/*
 * Copyright (c) 2011 Martynas Venckus <martynas@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <fenv.h>

/*
 * The following constant represents the default floating-point environment
 * (that is, the one installed at program startup) and has type pointer to
 * const-qualified fenv_t.
 *
 * It can be used as an argument to the functions within the <fenv.h> header
 * that manage the floating-point environment, namely fesetenv() and
 * feupdateenv().
 */
fenv_t __fe_dfl_env = 0;

/*
 * The feclearexcept() function clears the supported floating-point exceptions
 * represented by `excepts'.
 */
int
feclearexcept(int excepts)
{
	unsigned int fcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	/* Clear the requested floating-point exceptions */
	fcsr &= ~excepts;

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (0);
}
DEF_STD(feclearexcept);

/*
 * The fegetexceptflag() function stores an implementation-defined
 * representation of the states of the floating-point status flags indicated by
 * the argument excepts in the object pointed to by the argument flagp.
 */
int
fegetexceptflag(fexcept_t *flagp, int excepts)
{
	unsigned int fcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	/* Store the results in flagp */
	*flagp = fcsr & excepts;

	return (0);
}

/*
 * The feraiseexcept() function raises the supported floating-point exceptions
 * represented by the argument `excepts'.
 */
int
feraiseexcept(int excepts)
{
	unsigned int fcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	fcsr |= excepts | (excepts << 10);

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (0);
}
DEF_STD(feraiseexcept);

/*
 * This function sets the floating-point status flags indicated by the argument
 * `excepts' to the states stored in the object pointed to by `flagp'. It does
 * NOT raise any floating-point exceptions, but only sets the state of the flags.
 */
int
fesetexceptflag(const fexcept_t *flagp, int excepts)
{
	unsigned int fcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	/* Set the requested status flags */
	fcsr &= ~excepts;
	fcsr |= *flagp & excepts;

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (0);
}
DEF_STD(fesetexceptflag);

/*
 * The fetestexcept() function determines which of a specified subset of the
 * floating-point exception flags are currently set. The `excepts' argument
 * specifies the floating-point status flags to be queried.
 */
int
fetestexcept(int excepts)
{
	unsigned int fcsr;

	excepts &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	return (fcsr & excepts);
}
DEF_STD(fetestexcept);

/*
 * The fegetround() function gets the current rounding direction.
 */
int
fegetround(void)
{
	unsigned int fcsr;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	return (fcsr & _ROUND_MASK);
}
DEF_STD(fegetround);

/*
 * The fesetround() function establishes the rounding direction represented by
 * its argument `round'. If the argument is not equal to the value of a rounding
 * direction macro, the rounding direction is not changed.
 */
int
fesetround(int round)
{
	unsigned int fcsr;

	/* Check whether requested rounding direction is supported */
	if (round & ~_ROUND_MASK)
		return (-1);

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	/* Set the rounding direction */
	fcsr &= ~_ROUND_MASK;
	fcsr |= round;

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (0);
}
DEF_STD(fesetround);

/*
 * The fegetenv() function attempts to store the current floating-point
 * environment in the object pointed to by envp.
 */
int
fegetenv(fenv_t *envp)
{
	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (*envp));

	return (0);
}
DEF_STD(fegetenv);

/*
 * The feholdexcept() function saves the current floating-point environment
 * in the object pointed to by envp, clears the floating-point status flags, and
 * then installs a non-stop (continue on floating-point exceptions) mode, if
 * available, for all floating-point exceptions.
 */
int
feholdexcept(fenv_t *envp)
{
	unsigned int fcsr;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (*envp));

	/* Clear exception flags in FCSR */
	fcsr = *envp;
	fcsr &= ~FE_ALL_EXCEPT;

	/* Mask all exceptions */
	fcsr &= ~(FE_ALL_EXCEPT << _MASK_SHIFT);
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (0);
}
DEF_STD(feholdexcept);

/*
 * The fesetenv() function attempts to establish the floating-point environment
 * represented by the object pointed to by envp. The argument `envp' points
 * to an object set by a call to fegetenv() or feholdexcept(), or equal a
 * floating-point environment macro. The fesetenv() function does not raise
 * floating-point exceptions, but only installs the state of the floating-point
 * status flags represented through its argument.
 */
int
fesetenv(const fenv_t *envp)
{
	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (*envp));

	return (0);
}
DEF_STD(fesetenv);

/*
 * The feupdateenv() function saves the currently raised floating-point
 * exceptions in its automatic storage, installs the floating-point environment
 * represented by the object pointed to by `envp', and then raises the saved
 * floating-point exceptions. The argument `envp' shall point to an object set
 * by a call to feholdexcept() or fegetenv(), or equal a floating-point
 * environment macro.
 */
int
feupdateenv(const fenv_t *envp)
{
	unsigned int fcsr;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	/* Install new floating-point environment */
	fesetenv(envp);

	/* Raise any previously accumulated exceptions */
	feraiseexcept(fcsr);

	return (0);
}
DEF_STD(feupdateenv);

/*
 * The following functions are extentions to the standard
 */
int
feenableexcept(int mask)
{
	unsigned int fcsr, omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	omask = (fcsr >> _MASK_SHIFT) & FE_ALL_EXCEPT;
	fcsr |= mask << _MASK_SHIFT;

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (omask);

}

int
fedisableexcept(int mask)
{
	unsigned int fcsr, omask;

	mask &= FE_ALL_EXCEPT;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	omask = (fcsr >> _MASK_SHIFT) & FE_ALL_EXCEPT;
	fcsr &= ~(mask << _MASK_SHIFT);

	/* Load the floating-point control and status register */
	__asm__ volatile ("ctc1 %0, $31" : : "r" (fcsr));

	return (omask);
}

int
fegetexcept(void)
{
	unsigned int fcsr;

	/* Store the current floating-point control and status register */
	__asm__ volatile ("cfc1 %0, $31" : "=r" (fcsr));

	return ((fcsr >> _MASK_SHIFT) & FE_ALL_EXCEPT);
}
@


1.4
log
@It's been a quarter century: we can assume volatile is present with that name.
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.3 2012/12/05 23:20:03 deraadt Exp $	*/
d54 1
d98 1
d124 1
d143 1
d158 1
d186 1
d200 1
d226 1
d244 1
d270 1
@


1.3
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.2 2011/04/28 17:34:23 martynas Exp $	*/
d44 1
a44 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d50 1
a50 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d68 1
a68 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d88 1
a88 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d93 1
a93 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d111 1
a111 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d118 1
a118 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d136 1
a136 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d150 1
a150 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d170 1
a170 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d177 1
a177 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d190 1
a190 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (*envp));
d207 1
a207 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (*envp));
d215 1
a215 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d232 1
a232 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (*envp));
d251 1
a251 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d273 1
a273 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d279 1
a279 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d293 1
a293 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
d299 1
a299 1
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fcsr));
d310 1
a310 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fcsr));
@


1.2
log
@fenv improvements and cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/26 21:14:07 martynas Exp $	*/
a17 2

#include <sys/cdefs.h>
@


1.1
log
@fenv for mips64
@
text
@d1 1
a1 1
/*	$OpenBSD: fenv.c,v 1.1 2011/04/21 20:40:54 martynas Exp $	*/
d41 1
a41 1
	unsigned int fpscr;
d45 2
a46 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d49 1
a49 1
	fpscr &= ~excepts;
d51 2
a52 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d65 1
a65 1
	unsigned int fpscr;
d69 2
a70 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d73 1
a73 1
	*flagp = fpscr & excepts;
d85 1
a85 1
	unsigned int fpscr;
d89 2
a90 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d92 1
a92 1
	fpscr |= excepts | (excepts << 10);
d94 2
a95 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d108 1
a108 1
	unsigned int fpscr;
d112 2
a113 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d116 2
a117 2
	fpscr &= ~excepts;
	fpscr |= *flagp & excepts;
d119 2
a120 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d133 1
a133 1
	unsigned int fpscr;
d137 2
a138 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d140 1
a140 1
	return (fpscr & excepts);
d149 1
a149 1
	unsigned int fpscr;
d151 2
a152 1
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d154 1
a154 1
	return (fpscr & _ROUND_MASK);
d165 1
a165 1
	unsigned int fpscr;
d171 2
a172 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d174 3
a176 5
	/*
	 * Set the rounding direction
	 */
	fpscr &= ~_ROUND_MASK;
	fpscr |= round;
d178 2
a179 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d191 1
a191 1
	/* Store the current floating-point status register */
d206 1
a206 1
	unsigned int fpscr;
d208 1
a208 1
	/* Store the current floating-point status register */
d211 3
a213 3
	/* Clear exception flags in FPSR */
	fpscr = *envp;
	fpscr &= ~FE_ALL_EXCEPT;
d216 2
a217 2
	fpscr &= ~(FE_ALL_EXCEPT << _EMASK_SHIFT);
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d233 1
a233 1
	/* Load the floating-point status register */
d250 1
a250 1
	unsigned int fpscr;
d252 2
a253 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d259 1
a259 1
	feraiseexcept(fpscr);
d270 1
a270 1
	unsigned int fpscr, omask;
d274 2
a275 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d277 2
a278 2
	omask = (fpscr >> _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpscr |= mask << _EMASK_SHIFT;
d280 2
a281 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d290 1
a290 1
	unsigned int fpscr, omask;
d294 2
a295 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d297 2
a298 2
	omask = (fpscr >> _EMASK_SHIFT) & FE_ALL_EXCEPT;
	fpscr &= ~(mask << _EMASK_SHIFT);
d300 2
a301 2
	/* Load the floating-point status register */
	__asm__ __volatile__ ("ctc1 %0, $31" : : "r" (fpscr));
d309 1
a309 1
	unsigned int fpscr;
d311 2
a312 2
	/* Store the current floating-point status register */
	__asm__ __volatile__ ("cfc1 %0, $31" : "=r" (fpscr));
d314 1
a314 1
	return ((fpscr >> _EMASK_SHIFT) & FE_ALL_EXCEPT);
@

