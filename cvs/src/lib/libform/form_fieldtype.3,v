head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.26
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.12
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.10
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	ncurses:1.1.1;
locks; strict;
comment	@.\" @;


1.12
date	2015.11.14.01.35.38;	author jmc;	state Exp;
branches;
next	1.11;
commitid	QPckV5zpa4aG1OxK;

1.11
date	2010.01.12.23.22.07;	author nicm;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.16.08.48.27;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.08.22.47.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.24.04.06.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.22.03.30.53;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.17.04.14.36;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.24.02.37.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.12.03.05.46.32;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.12.03.05.40.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.26.04.01.05;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.02.21.37.53;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.06.02.21.37.53;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@update the NAME section; ok nicm schwarze
@
text
@'\" t
.\" $OpenBSD: form_fieldtype.3,v 1.11 2010/01/12 23:22:07 nicm Exp $
.\"
.\"***************************************************************************
.\" Copyright (c) 1998-2003,2006 Free Software Foundation, Inc.              *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: form_fieldtype.3,v 1.11 2010/01/12 23:22:07 nicm Exp $
.TH form_fieldtype 3 ""
.SH NAME
\fBnew_fieldtype\fR, \fBfree_fieldtype\fR,
\fBset_fieldtype_arg\fR, \fBset_fieldtype_choice\fR,
\fBlink_fieldtype\fR - define validation-field types
.SH SYNOPSIS
\fB#include <form.h>\fR
.br
FIELDTYPE *new_fieldtype(
    bool (* const field_check)(FIELD *, const void *),
    bool (* const char_check)(int, const void *));
.br
int free_fieldtype(FIELDTYPE *fieldtype);
.br
int set_fieldtype_arg(
    FIELDTYPE *fieldtype,
    void *(* const make_arg)(va_list *),
    void *(* const copy_arg)(const void *),
    void  (* const free_arg)(void *));
.br
int set_fieldtype_choice(
    FIELDTYPE *fieldtype,
    bool (* const next_choice)(FIELD *, const void *),
    bool (* const prev_choice)(FIELD *, const void *));
.br
FIELDTYPE *link_fieldtype(FIELDTYPE *type1,
                          FIELDTYPE *type2);
.br
.SH DESCRIPTION
The function \fBnew_fieldtype\fR creates a new field type usable for data
validation.  You supply it with \fIfield_check\fR, a predicate to check the
validity of an entered data string whenever the user attempts to leave a field.
The (FIELD *) argument is passed in so the validation predicate can see the
field's buffer, sizes and other attributes; the second argument is an
argument-block structure, about which more below.
.PP
You also supply \fBnew_fieldtype\fR with \fIchar_check\fR,
a function to validate input characters as they are entered; it will be passed
the character to be checked and a pointer to an argument-block structure.
.PP
The function \fBfree_fieldtype\fR frees the space allocated for a given
validation type.
.PP
The function \fBset_fieldtype_arg\fR associates three storage-management functions
with a field type.
The \fImake_arg\fR function is automatically applied to the
list of arguments you give \fBset_field_type\fR when attaching validation
to a field; its job is to bundle these into an allocated argument-block
object which can later be passed to validation predicated.
The other two hook arguments should copy and free argument-block structures.
They will be used by the forms-driver code.
You must supply the \fImake_arg\fR function,
the other two are optional, you may supply NULL for them.
In this case it is assumed
that \fImake_arg\fR does not allocate memory but simply loads the
argument into a single scalar value.
.PP
The function \fBlink_fieldtype\fR creates
a new field type from the two given types.
They are connected by an logical 'OR'.
.PP
The form driver requests \fBREQ_NEXT_CHOICE\fR and \fBREQ_PREV_CHOICE\fR assume
that the possible values of a field form an ordered set, and provide the forms
user with a way to move through the set.
The \fBset_fieldtype_choice\fR
function allows forms programmers to define successor and predecessor functions
for the field type.
These functions take the field pointer and an
argument-block structure as arguments.
.SH RETURN VALUE
The pointer-valued routines return NULL on error.
They set errno according to their success:
.TP 5
.B E_OK
The routine succeeded.
.TP 5
.B E_BAD_ARGUMENT
Routine detected an incorrect or out-of-range argument.
.TP 5
.B E_SYSTEM_ERROR
System error occurred, e.g., malloc failure.
.PP
The integer-valued routines return one of the following codes on
error:
.TP 5
.B E_OK
The routine succeeded.
.TP 5
.B E_BAD_ARGUMENT
Routine detected an incorrect or out-of-range argument.
.TP 5
.B E_CONNECTED
The field is already connected to a form.
.TP 5
.B E_CURRENT
The field is the current field.
.TP 5
.B E_SYSTEM_ERROR
System error occurred (see \fBerrno\fR).
.SH SEE ALSO
\fBcurses\fR(3), \fBform\fR(3).
.SH NOTES
The header file \fB<form.h>\fR automatically includes the header file
\fB<curses.h>\fR.
.PP
All of the \fB(char *)\fR arguments of these functions should actually be
\fB(void *)\fR.  The type has been left uncorrected for strict compatibility
with System V.
.SH PORTABILITY
These routines emulate the System V forms library.  They were not supported on
Version 7 or BSD versions.
.SH AUTHORS
Juergen Pfeifer.  Manual pages and adaptation for new curses by Eric
S. Raymond.
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
@


1.11
log
@Update to ncurses 5.7, with local changes reapplied.

This is around eight years worth of changes (previously we were around ncurses
5.2), too many to list - many bug fixes and also a few new functions.

A major bump for libcurses, libpanel, libform and libmenu.

ok deraadt
@
text
@d2 1
a2 1
.\" $OpenBSD$
d32 1
a32 1
.\" $Id: form_fieldtype.3x,v 1.14 2006/11/04 17:12:00 tom Exp $
d35 3
a37 1
\fBform_fieldtype\fR - define validation-field types
@


1.10
log
@typos;

diffs passed on to curses people.
@
text
@d2 1
a2 1
.\" $OpenBSD: form_fieldtype.3,v 1.9 2000/10/08 22:47:08 millert Exp $
d5 1
a5 1
.\" Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *
d32 1
a32 1
.\" $From: form_fieldtype.3x,v 1.8 2000/07/15 22:02:03 tom Exp $
d52 1
a52 1
    FIELDTYPE *fieldtype
d66 1
a66 1

d70 1
a70 1

d73 4
a76 3

The function \fBset_fieldtype\fR associates three storage-management functions
with a field type.  The \fImak_arg\fR function is automatically applied to the
d79 7
a85 5
object which can later be passed to validation predicated.  The other two
hook arguments should copy and free argument-block structures.  They will
be used by the forms-driver code. You must supply the \fImak_arg\fR function,
the other two are optional, you may supply NULL for them. In this case it
is assumed that \fImak_arg\fR doesn't allocate memory but simply loads the
d87 5
a91 1

d94 2
a95 1
user with a way to move through the set.  The \fBset_fieldtype_choice\fR
d97 2
a98 1
for the field type.  These functions take the field pointer and an
d102 11
a112 1

d116 1
a116 1
\fBE_OK\fR
d119 1
a119 4
\fBE_SYSTEM_ERROR\fR
System error occurred (see \fBerrno\fR).
.TP 5
\fBE_BAD_ARGUMENT\fR
d122 1
a122 1
\fBE_CONNECTED\fR
d124 6
d135 1
a135 1

@


1.9
log
@update to ncurses-5.1-20001007
@
text
@d2 1
a2 1
.\" $OpenBSD: form_fieldtype.3,v 1.8 2000/07/24 04:06:11 millert Exp $
d62 1
a62 1
validity of an entered data string whenever the user attempt to leave a field.
d82 1
a82 1
is assumed, that \fImak_arg\fR doesn't allocate memory but simply loads the
@


1.8
log
@Update to ncurses-5.1-20000722
@
text
@d2 1
a2 1
.\" $OpenBSD: form_fieldtype.3,v 1.7 1999/01/22 03:30:53 millert Exp $
d32 1
a32 1
.\" $From: From: form_fieldtype.3x,v 1.8 2000/07/15 22:02:03 tom Exp $
@


1.7
log
@cosmetic man page changes from latest ncurses
@
text
@d2 1
a2 1
.\" $OpenBSD: form_fieldtype.3,v 1.6 1998/09/17 04:14:36 millert Exp $
d5 1
a5 1
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
d32 2
a33 2
.\" $From: form_fieldtype.3x,v 1.7 1998/11/29 01:07:16 Rick.Ohnemus Exp $
.TH form_field 3 ""
@


1.6
log
@ncurses-4.2-980912
@
text
@d2 1
a2 1
.\" $OpenBSD: form_fieldtype.3,v 1.5 1998/07/24 02:37:13 millert Exp $
d32 1
a32 1
.\" $From: form_fieldtype.3x,v 1.6 1998/08/27 21:21:04 Rick.Ohnemus Exp $
d56 1
a56 1
FIELDTYPE *link_fieldtype(FIELDTYPE *type1, 
d58 1
a58 1
.br 
d74 1
a74 1
The function \fBset_fieldtype\fR associates three storage-management functions 
d77 1
a77 1
to a field; its job is to bundle these into an allocated argument-block 
@


1.5
log
@libform from ncurses-4.2-980718
@
text
@d1 2
a2 1
.\" $OpenBSD$
d32 1
a32 2
.\" $From: form_fieldtype.3x,v 1.5 1998/03/11 21:12:53 juergen Exp $
'\" t
@


1.4
log
@3X -> 3
@
text
@d1 31
a32 1
.\" $OpenBSD: form_fieldtype.3,v 1.3 1997/12/03 05:40:06 millert Exp $
d56 1
a56 1
FIELDTYPE *link_fieldtype(FIELDTYPE *type1,
d58 1
a58 1
.br
d74 1
a74 1
The function \fBset_fieldtype\fR associates three storage-management functions
d77 1
a77 1
to a field; its job is to bundle these into an allocated argument-block
@


1.3
log
@Merge of ncurses-4.1-971129
@
text
@a0 1
.\" $OpenBSD$
d2 2
a3 1
.TH form_field 3X ""
d79 1
a79 1
\fBcurses\fR(3X), \fBform\fR(3X).
@


1.2
log
@libform from ncurses 4.1.  Post 4.1 patches to be applied in a separate commit.
@
text
@d1 1
d26 1
a26 1
FIELDTYPE *link_fieldtype(FIELDTYPE *type1, 
d28 1
a28 1
.br 
d44 1
a44 1
The function \fBset_fieldtype\fR associates three storage-management functions 
d47 1
a47 1
to a field; its job is to bundle these into an allocated argument-block 
d50 4
a53 1
be used by the forms-driver code.
@


1.1
log
@Initial revision
@
text
@d8 3
a10 2
FIELDTYPE *new_fieldtype(int (*field_check)(FIELD *, char *),
                         int (*char_check)(int, char *));
d14 5
a18 4
in set_fieldtype_arg(FIELDTYPE *fieldtype
                     char *(*mak_arg)(va_list *),
                     char *(*copy_arg)(char *),
                     void (*free_arg)(char *));
d20 4
a23 5
in set_fieldtype_choice(FIELDTYPE *fieldtype
                        int (*next_choice)(FIELD *, char *),
                        int (*prev_choice)(FIELD *, char *));
.br
FIELDTYPE *link_fieldtype(FIELDYPE *type1, FIELDTYPE *type2);
d25 3
d32 1
a32 1
Thhe (FIELD *) argument is passed in so the validation predicate can see the
d58 1
a58 1
The character-pointer-valued routines return NULL on error.
@


1.1.1.1
log
@SYSV-style form library; from ncurses
@
text
@@
