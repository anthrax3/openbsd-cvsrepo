head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.14
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.10
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.8
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.6
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.5.0.28
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.26
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.24
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.22
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.20
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.18
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.16
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.14
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.12
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@# @;


1.13
date	2014.07.14.09.04.02;	author deraadt;	state dead;
branches;
next	1.12;
commitid	YUSo98CdDPeK0I4d;

1.12
date	2011.04.22.06.08.14;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2011.03.17.16.43.51;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2010.11.26.08.09.35;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.17.13.43.19;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.26.20.56.03;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.22.00.41.59;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.21.22.53.45;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	99.09.03.18.11.48;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.07.25.19.32.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.07.20.16.51.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.07.15.14.31.52;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	99.07.06.07.55.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@rc.{local,securelevel,shutdown} become examples.  If versions of them
are created in /etc, they are executed (they used to be sourced) to
avoid polluting the rc variable space.  The powerdown= and securelevel=
features are removed; they are likely only used by 2 people.  the
secureleve is now always raised; this is the only sensible default.
ok ajacoutot
@
text
@#	$OpenBSD: rc.shutdown,v 1.12 2011/04/22 06:08:14 ajacoutot Exp $
#
# If it exists, this script is run at system-shutdown by reboot(8),
# halt(8).  If the architecture supports keyboard requested halting,
# it is also run by init(8) when such an event happens.
#

powerdown=NO	# set to YES for powerdown

# Add your local shutdown actions here.
@


1.12
log
@Move the rc.d(8) bits from rc.{local,shutdown} directly into /etc/rc.
By default, rc.{local,shutdown} don't output anything anymore.

original idea from schwarze@@
discussed with deraadt@@ and no objection from millert@@
ok schwarze@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.11 2011/03/17 16:43:51 robert Exp $
@


1.11
log
@- introduce the INRC environment variable so that rc.subr(8) knows if it
  gets called from rc.local or rc.shutdown
- notify the user if a given operation was successfull or not by appending
  the (ok) or (failed) strings to the end of the daemon name
- hide stdout and stdin unless RC_DEBUG=1 is set, otherwise all the function
  names will be printed out and all output sent to stdin or stdout
- since from now on rc.subr is taking care of printing out the daemon names
  on startup, we don't need to do this from rc.{local,shutdown} anymore

brainkilling work done by me and ajacoutot@@, ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.10 2010/11/26 08:09:35 ajacoutot Exp $
a9 8
echo -n 'stopping local daemons:'

while [ -n "${rc_scripts}" ]; do
	_r=${rc_scripts##* }
	rc_scripts=${rc_scripts%%*( )${_r}}
	[ -x /etc/rc.d/${_r} ] && /etc/rc.d/${_r} stop
done

a10 2

echo '.'
@


1.10
log
@Do like in rc.local and print the daemon name before running rc_stop.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.9 2010/11/17 13:43:19 ajacoutot Exp $
d15 1
a15 1
	[ -x /etc/rc.d/${_r} ] && echo -n " ${_r}" && /etc/rc.d/${_r} stop
@


1.9
log
@Consistency and remove the >50 spaces after 'do'...

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.8 2010/10/26 20:56:03 robert Exp $
d15 1
a15 1
	[ -x /etc/rc.d/${_r} ] && /etc/rc.d/${_r} stop && echo -n " ${_r}"
@


1.8
log
@Add a simple 'rc' system to base in order to start/stop/restart/reload
services installed by the ports system (for now).
It only uses pgrep/pkill to handle these processes. A manual page will
come later.

'put it in' deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.7 2006/06/22 00:41:59 deraadt Exp $
d12 1
a12 1
while [ -n "$rc_scripts" ]; do                                                       
@


1.7
log
@ok there is a good reason not to do this yet
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.5 1999/09/03 18:11:48 deraadt Exp $
d10 11
a20 3
#
# Your shell code goes here
#
@


1.6
log
@make powerdown the default; discussed with jason
@
text
@d8 1
a8 1
powerdown=YES	# or NO, if you wanted to halt without powering down
@


1.5
log
@have shutdown code run /etc/rc with arg of "shutdown"; rc.shutdown becomes  completely admin-editable
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.4 1999/07/25 19:32:17 deraadt Exp $
d8 1
a8 1
powerdown=NO	# set to YES for powerdown
@


1.4
log
@silence chmod too, for non-writeable /var; fries
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.3 1999/07/20 16:51:04 deraadt Exp $
d4 2
a5 3
# halt(8).
# If the architecture supports keyboard requested halting, it is also
# run by init(8) when such an event happens.
d8 1
a8 5
echo /etc/rc.shutdown in progress...

# save part of our entropy pool for reuse on reboot
dd if=/dev/urandom of=/var/db/host.random bs=1024 count=64 >/dev/null 2>&1
chmod 600 /var/db/host.random >/dev/null 2>&1
a12 4


echo shutdown complete.
exit 0		# An exit code of 2 will cause init(8) to attempt powerdown.
@


1.3
log
@do not use -n with user-edited section between
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.2 1999/07/15 14:31:52 provos Exp $
d13 1
a13 1
chmod 600 /var/db/host.random
@


1.2
log
@move /etc/host.random to /var/db for readonly /, save the entropy state
into /var/db/host.random at shutdown time, so we can make use of it
during reboot to seed our random pool. ok millert@@ angelos@@ niklas@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.shutdown,v 1.1 1999/07/06 07:55:03 deraadt Exp $
d9 1
a9 1
echo -n /etc/rc.shutdown in progress...
d20 1
a20 1
echo done.
@


1.1
log
@your basic rc.shutdown file
@
text
@d1 1
a1 1
#	$OpenBSD$
d10 4
@

