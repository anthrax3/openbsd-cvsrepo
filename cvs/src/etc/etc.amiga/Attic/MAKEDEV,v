head	1.72;
access;
symbols
	OPENBSD_3_2:1.67.0.2
	OPENBSD_3_2_BASE:1.67
	OPENBSD_3_1:1.64.0.2
	OPENBSD_3_1_BASE:1.64
	OPENBSD_3_0:1.50.0.2
	OPENBSD_3_0_BASE:1.50
	OPENBSD_2_9:1.46.0.2
	OPENBSD_2_9_BASE:1.46
	OPENBSD_2_8:1.45.0.2
	OPENBSD_2_8_BASE:1.45
	OPENBSD_2_7:1.44.0.2
	OPENBSD_2_7_BASE:1.44
	OPENBSD_2_6:1.43.0.2
	OPENBSD_2_6_BASE:1.43
	OPENBSD_2_5:1.41.0.2
	OPENBSD_2_5_BASE:1.41
	OPENBSD_2_4:1.39.0.2
	OPENBSD_2_4_BASE:1.39
	OPENBSD_2_3:1.33.0.2
	OPENBSD_2_3_BASE:1.33
	OPENBSD_2_2:1.29.0.2
	OPENBSD_2_2_BASE:1.29
	OPENBSD_2_1:1.24.0.2
	OPENBSD_2_1_BASE:1.24
	OPENBSD_2_0:1.14.0.2
	OPENBSD_2_0_BASE:1.14
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.72
date	2002.12.31.16.35.35;	author miod;	state dead;
branches;
next	1.71;

1.71
date	2002.12.05.04.38.22;	author kjc;	state Exp;
branches;
next	1.70;

1.70
date	2002.12.05.04.33.23;	author kjc;	state Exp;
branches;
next	1.69;

1.69
date	2002.12.05.03.00.26;	author kjc;	state Exp;
branches;
next	1.68;

1.68
date	2002.10.16.15.49.07;	author todd;	state Exp;
branches;
next	1.67;

1.67
date	2002.06.18.00.56.04;	author fgsch;	state Exp;
branches;
next	1.66;

1.66
date	2002.06.09.05.58.38;	author todd;	state Exp;
branches;
next	1.65;

1.65
date	2002.05.16.21.12.21;	author miod;	state Exp;
branches;
next	1.64;

1.64
date	2002.03.31.21.51.38;	author fgsch;	state Exp;
branches;
next	1.63;

1.63
date	2002.02.25.05.20.37;	author todd;	state Exp;
branches;
next	1.62;

1.62
date	2002.02.21.18.34.11;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2002.02.21.13.44.12;	author todd;	state Exp;
branches;
next	1.60;

1.60
date	2002.02.21.13.19.06;	author todd;	state Exp;
branches;
next	1.59;

1.59
date	2002.02.19.21.06.00;	author todd;	state Exp;
branches;
next	1.58;

1.58
date	2002.02.17.05.14.54;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2002.02.15.21.16.02;	author todd;	state Exp;
branches;
next	1.56;

1.56
date	2002.02.14.17.46.15;	author todd;	state Exp;
branches;
next	1.55;

1.55
date	2002.02.14.05.55.08;	author todd;	state Exp;
branches;
next	1.54;

1.54
date	2002.02.14.04.43.08;	author todd;	state Exp;
branches;
next	1.53;

1.53
date	2002.02.14.04.39.56;	author todd;	state Exp;
branches;
next	1.52;

1.52
date	2002.02.13.20.07.38;	author todd;	state Exp;
branches;
next	1.51;

1.51
date	2002.02.09.17.01.40;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2001.06.28.02.58.53;	author kjc;	state Exp;
branches;
next	1.49;

1.49
date	2001.06.25.03.19.47;	author kjell;	state Exp;
branches;
next	1.48;

1.48
date	2001.06.24.23.35.57;	author kjell;	state Exp;
branches;
next	1.47;

1.47
date	2001.05.30.02.11.12;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2001.04.10.03.03.50;	author brad;	state Exp;
branches;
next	1.45;

1.45
date	2000.09.03.14.46.45;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2000.03.22.07.34.27;	author niklas;	state Exp;
branches;
next	1.43;

1.43
date	99.08.20.17.00.33;	author downsj;	state Exp;
branches;
next	1.42;

1.42
date	99.07.30.18.49.35;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	98.11.25.04.58.53;	author millert;	state Exp;
branches;
next	1.40;

1.40
date	98.11.19.08.18.56;	author dugsong;	state Exp;
branches;
next	1.39;

1.39
date	98.10.15.21.24.52;	author art;	state Exp;
branches;
next	1.38;

1.38
date	98.09.25.11.11.58;	author todd;	state Exp;
branches;
next	1.37;

1.37
date	98.09.25.10.22.15;	author todd;	state Exp;
branches;
next	1.36;

1.36
date	98.09.15.10.23.21;	author pattonme;	state Exp;
branches;
next	1.35;

1.35
date	98.08.24.05.49.55;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	98.08.24.05.30.07;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	98.02.22.23.35.37;	author niklas;	state Exp;
branches;
next	1.32;

1.32
date	98.01.26.04.19.35;	author dgregor;	state Exp;
branches;
next	1.31;

1.31
date	98.01.09.18.00.08;	author niklas;	state Exp;
branches;
next	1.30;

1.30
date	97.12.08.21.27.37;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	97.10.16.07.29.56;	author niklas;	state Exp;
branches;
next	1.28;

1.28
date	97.10.07.22.10.55;	author niklas;	state Exp;
branches;
next	1.27;

1.27
date	97.09.16.06.00.51;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	97.09.07.20.29.08;	author dgregor;	state Exp;
branches;
next	1.25;

1.25
date	97.06.15.09.30.28;	author niklas;	state Exp;
branches;
next	1.24;

1.24
date	97.05.16.20.11.01;	author niklas;	state Exp;
branches;
next	1.23;

1.23
date	97.05.14.15.41.07;	author niklas;	state Exp;
branches;
next	1.22;

1.22
date	97.05.13.16.21.48;	author niklas;	state Exp;
branches;
next	1.21;

1.21
date	97.05.13.05.34.48;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	97.05.02.08.21.55;	author niklas;	state Exp;
branches;
next	1.19;

1.19
date	97.04.23.20.38.59;	author gvf;	state Exp;
branches;
next	1.18;

1.18
date	96.12.14.18.23.50;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	96.11.26.05.22.31;	author kstailey;	state Exp;
branches;
next	1.16;

1.16
date	96.10.17.18.55.26;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	96.10.12.21.09.04;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	96.09.18.22.03.38;	author deraadt;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	96.08.29.13.22.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.08.28.08.55.20;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	96.08.23.18.26.29;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	96.07.28.09.00.11;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.07.15.14.59.07;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	96.05.27.07.51.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.05.09.06.55.51;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.04.23.03.18.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.03.28.18.24.37;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.01.07.07.41.15;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	95.12.15.02.33.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.27.23.58.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.37.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.37.58;	author deraadt;	state Exp;
branches;
next	;

1.14.2.1
date	96.10.12.21.10.33;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.72
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.11 2002/12/05 04:30:21 kjc Exp 
#	OpenBSD: MAKEDEV.mi,v 1.53 2002/12/05 04:30:21 kjc Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
#
#
# Copyright (c) 2001,2002 Todd T. Fries <todd@@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
# Disks:
#	ramdisk	devices needed for install floppies
#	sd*	SCSI disks
#	rd*	"rd" pseudo-disks
#	ccd*	concatenated disk devices
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
# Console ports:
#	ttye*	ite bitmapped consoles
# Pointing devices:
#	mouse*	Amiga mice
# Terminal ports:
#	tty0*	NS16x50 serial ports
#	ttyA*	mfc serial ports
#	ttyB*	ISA COM ports
# Pseudo terminals:
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
# Printers:
#	par*	motherboard parallel port
#	lpt*	IEEE 1284 centronics printer
#	lpa*	interruptless lp
# Special purpose devices:
#	grf*	Motherboard bitmapped video.
#	kbd	keyboard (provides events, for X11)
#	joy*	joystick driver
#	kbd	Amiga keyboard
#	view*	generic interface to graphic displays
#	aconf	autoconfig information (not yet)
#	lkm	loadable kernel modules interface
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	pf*	Packet Filter
#	ss*	SCSI scanners
#	uk*	SCSI Unknown device
#	*random	inkernel random data source
#	audio*	audio device
#	xfs*	XFS filesystem devices
#	ch*	SCSI media changer
#	fd	makes fd/* for the fdescfs
#	systrace*	system call tracing device
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

trunc()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std kbd pty0 tty00 ttyA0 ttyA1 ttyB0 ttyB1
	R ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	R cd0 cd1 sd0 sd1 sd2 sd3 st0 st1
	R fd0 fd1 wd0 wd1 rd0 random
	;;

std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 21 0
	M stdout	c 21 1
	M stderr	c 21 2
	M ksyms		c 42 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	M reload	c 2 20 600
	;;

ttyA[01])
	M ttyA$U c 17 $U 660 dialer uucp
	M ttyM$U c 17 $(($U+128)) 660 dialer uucp
	;;

par*)
	case $U in
	0)
		M par$U c 11 $U 600
		;;
	*)
		echo bad unit for par in: $i
		;;
	esac
	;;

ttye*)
	case $U in
	0|1|2|3|4|5|6)
		M ttye$U c 13 $U 600
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

grf*)
	case $U in
	0|1|2|3|4|5|6)
		M grf$U c 10 $U
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
# for those that need it, also make overlay and image devices:
	case $U in
	4)
		M grfov$U c 10 $(($U+16)) 600
		M grfim$U c 10 $(($U+32)) 600
		;;
	esac
	;;

mouse*)
	case $U in
	0|1)
		M mouse$U c 15 $U
		if [ $U = 0 ]
		then
			MKlist="$MKlist;rm -f mouse; ln -s mouse$U mouse"
		fi
		;;
	*)
		echo bad unit for mouse in: $i
		;;
	esac
	;;

view*)
	case $U in
	00|01|02|03|04|05|06|07|08|09)
		M view$U c 16 $U
		;;
	*)
		echo bad unit for view in: $i
		;;
	esac
	;;

ttyB*)
	M ttyB$U c 32 $U 660 dialer uucp
	M cuaB$U c 32 $(($U+128)) 660 dialer uucp
	;;

systrace)
	M systrace c 50 0 644
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 21 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

ch*)
	M ch$U c 40 $U 660 operator
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

audio*)
	M sound$U	c 39 $U
	M mixer$U	c 39 $(($U+16))
	M audio$U	c 39 $(($U+128))
	M audioctl$U	c 39 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 35 $n 644
		n=$(($n+1))
	done
	;;

uk*)
	M uk$U c 36 $U 640 operator
	;;

ss*)
	M ss$U c 25 $(($U*16)) 640 operator
	M nss$U c 25 $(($(($U*16))+1)) 640 operator
	M enss$U c 25 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

pf*)
	M pf c 34 0 600
	;;

tun*)
	M tun$U c 23 $U 600
	;;

bpf*)
	M bpf$U c 22 $U 600
	;;

lkm)
	M lkm c 24 0 640 kmem
	;;

joy*)
	M joy$U c 43 $U 666
	;;

kbd)
	M kbd c 14 0 600 
	;;

lpt*|lpa*)
	case $i in
	lpt*) n=lpt f=0;;
	lpa*) n=lpa f=128;;
	esac
	M $n$U c 33 $(($U+$f)) 600
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

tty0*)
	M tty$U c 12 $U 660 dialer uucp
	M cua$U c 12 $(($U+128)) 660 dialer uucp
	;;

vnd*)
	dodisk vnd $U 6 19 $U 0
	dodisk svnd $U 6 19 $U 128
	;;

cd*)
	dodisk2 cd $U 7 9 $U 0 8
	;;

rd*)
	dodisk2 rd $U 16 41 $U 0
	;;

fd*)
	case $U in 0|1|2|3)
	M fd${U}a b 2 $(($U*16)) 640 operator
	M fd${U}b b 2 $(($(($U*16))+1)) 640 operator
	M rfd${U}a c 18 $(($U*16)) 640 operator
	M rfd${U}b c 18 $(($(($U*16))+1)) 640 operator;;
	*) echo bad unit for floppy disk in: $i;;
	esac
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 5 $n 660 operator
		M ${pre}rst$U	c 20 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R sd5 sd6 sd7 sd8 sd9 cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0
	R bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2
	R xfs0 ss0 ss1 ch0 local kbd mouse0 mouse1 par0 grf0 grf1 grf2
	R grf3 grf4 grf5 grf6 audio0 uk0 random joy0 joy1 lpa0 lpa1
	R lpa2 lpt0 lpt1 lpt2 lkm ttye0 ttye1 ttye2 ttye3 ttye4 ttye5
	R ttye6 tty00 tty01 tty02 tty03 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4
	R ttyA0 ttyA1 pf systrace fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3 std
	R st0 st1 fd
	;;

wd*|sd*|ccd*)
	case $i in
	wd*) dodisk wd $U 0 37 $U 0;;
	sd*) dodisk sd $U 4 8 $U 0;;
	ccd*) dodisk ccd $U 8 7 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
@


1.71
log
@redo "make allarchs".
@
text
@@


1.70
log
@replace MAKEDEVs by auto-generated ones.
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.10 2002/10/16 15:48:31 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.52 2002/10/16 15:48:31 todd Exp 
@


1.69
log
@remove altq entries. altq is now handled through pf.
ok, deraadt@@
@
text
@d445 2
a446 2
	R ttyA0 ttyA1 pf systrace fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3
	R std st0 st1 fd
@


1.68
log
@sync
@
text
@a79 1
#	altq/	ALTQ control interface
a304 8
altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c 52 $U 644
		U=$(($U+1))
	done
	;;

d445 1
a445 1
	R ttyA0 ttyA1 pf altq systrace fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3
@


1.67
log
@regen.
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.9 2002/06/09 06:15:14 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.49 2002/06/18 00:53:45 fgsch Exp 
@


1.66
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.8 2002/05/16 21:11:20 miod Exp 
#	OpenBSD: MAKEDEV.mi,v 1.47 2002/06/09 04:19:15 todd Exp 
@


1.65
log
@Regen.
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.46 2002/05/16 16:18:44 provos Exp 
a9 1
#	$OpenBSD$
d270 1
a270 1
		then 
@


1.64
log
@regen. some of these were missed previously.
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.7 2002/02/21 18:36:55 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.42 2002/03/31 21:49:12 fgsch Exp 
d83 1
d297 4
d455 2
a456 2
	R ttyA0 ttyA1 pf altq fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3 std st0
	R st1 fd
@


1.63
log
@random typo fix; ok deraadt@@
@
text
@d6 3
a8 3
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.5 2002/02/14 13:29:20 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.41 2002/02/25 01:10:26 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.6 2002/02/14 05:50:37 todd Exp 
@


1.62
log
@Remove uncommited garbage.  I am sorry, but this was just not tested. It
crashes sh, EVEN after that possible fix.  It appears to overflow the
ramdisk _before_ it dumps core.  Noone was shown these changes.  They were
just tossed in.  This is not a development process that will work, so I
am just backing out all the changes in the last 24 hours.
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.36 2002/02/19 21:05:10 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
d10 1
a10 1
#	$OpenBSD: MAKEDEV,v 1.59 2002/02/19 21:06:00 todd Exp $
d447 1
a447 1
	R grf3 grf4 grf5 grf6 audio0 uk0 rndrandom joy0 joy1 lpa0 lpa1
@


1.61
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.6 2002/02/21 13:04:18 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.38 2002/02/21 13:41:55 todd Exp 
d10 1
a10 1
#	$OpenBSD$
a82 1
#	view*	generic interface to graphic displays
d443 9
a451 10
	R ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 ttyB5 ttyB6 ttyB7 ttyB8 ttyB9
	R view00 view01 view02 view03 view04 view05 ccd0 ccd1 ccd2
	R ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8
	R sd9 cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0 ss0 ss1 ch0
	R local kbd mouse0 mouse1 par0 grf0 grf1 grf2 grf3 grf4 grf5
	R grf6 audio0 uk1 uk0 random joy0 joy1 lpa0 lpa1 lpa2 lpt0
	R lpt1 lpt2 lkm ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	R tty00 tty01 tty02 tty03 ttyA0 ttyA1 pf altq fd0 fd1 fd2 fd3
	R wd0 wd1 wd2 wd3 std st0 st1 fd
@


1.60
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.37 2002/02/21 13:03:00 todd Exp 
d450 1
a450 1
	R grf6 audio0 uk1 uk0 rndrandom joy0 joy1 lpa0 lpa1 lpa2 lpt0
@


1.59
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.5 2002/02/14 13:29:20 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.36 2002/02/19 21:05:10 todd Exp 
d83 1
d444 10
a453 9
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R sd5 sd6 sd7 sd8 sd9 cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0
	R bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2
	R xfs0 ss0 ss1 ch0 local kbd mouse0 mouse1 par0 grf0 grf1 grf2
	R grf3 grf4 grf5 grf6 audio0 uk0 rndrandom joy0 joy1 lpa0 lpa1
	R lpa2 lpt0 lpt1 lpt2 lkm ttye0 ttye1 ttye2 ttye3 ttye4 ttye5
	R ttye6 tty00 tty01 tty02 tty03 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4
	R ttyA0 ttyA1 pf altq fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3 std st0
	R st1 fd
@


1.58
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.34 2002/02/17 05:14:30 deraadt Exp 
@


1.57
log
@sync
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.32 2002/02/15 21:13:47 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.6 2002/02/14 05:50:37 todd Exp 
d12 1
a12 1
# Copyright (c) 2001 Todd T. Fries <todd@@OpenBSD.org>
d44 1
a44 1
#	rd*	"ramdisk" pseudo-disks
@


1.56
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.31 2002/02/14 17:44:38 todd Exp 
d443 5
a447 2
	R local kbd mouse0 mouse1 par0 grf0 grf1 grf2 grf3 grf4 grf5
	R grf6 audio0 xfs0 ss0 ss1 uk0 rndrandom joy0 joy1 lpa0 lpa1
d449 3
a451 6
	R ttye6 tty00 tty01 tty02 tty03 ttyA0 ttyA1 pf altq tun0 tun1
	R tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	R fd0 fd1 fd2 fd3 wd0 wd1 wd2 wd3 rd0 ccd0 ccd1 ccd2 ccd3 vnd0
	R vnd1 vnd2 vnd3 std cd0 cd1 ch0 st0 st1 pty0 pty1 pty2 fd sd0
	R sd1 sd2 sd3 sd4 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 sd5 sd6 sd7
	R sd8 sd9
@


1.55
log
@sync (only comments with commas effected)
@
text
@d6 2
a7 2
#	OpenBSD: etc.amiga/MAKEDEV.md,v 1.4 2002/02/09 16:59:50 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.29 2002/02/14 05:38:22 todd Exp 
d343 3
a345 1
	M ss$U c 25 $U 440 operator
d383 6
a388 19
	case $U in
	0) off=0 name=p;;
	1) off=16 name=q;;
	2) off=32 name=r;;
	3) off=48 name=s;;
	4) off=64 name=t;;
	5) off=80 name=u;;
	6) off=96 name=v;;
	7) off=112 name=w;;
	8) off=128 name=x;;
	9) off=144 name=y;;
	10) off=160 name=z;;
	11) off=176 name=P;;
	12) off=192 name=Q;;
	13) off=206 name=R;;
	14) off=224 name=S;;
	15) off=240 name=T;;
	*) echo bad unit for pty in: $i; continue;;
	esac
d393 1
@


1.54
log
@sync
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.28 2002/02/14 04:41:32 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.5 2002/01/23 06:02:19 todd Exp 
d46 1
a46 1
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
@


1.53
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.27 2002/02/14 04:37:15 todd Exp 
d459 3
a461 3
	R vnd1 vnd2 vnd3 std cd0 cd1 ch0 st0 st1 pty0 pty1 fd sd0 sd1
	R sd2 sd3 sd4 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 sd5 sd6 sd7 sd8
	R sd9
@


1.52
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.26 2002/02/10 21:52:30 deraadt Exp 
@


1.51
log
@sync, and update, to make "ramdisk" target disk
@
text
@a1 2
#	$OpenBSD: MAKEDEV,v 1.50 2001/06/28 02:58:53 kjc Exp $
#	$NetBSD: MAKEDEV,v 1.21 1996/05/19 21:03:49 veego Exp $
d3 10
a12 1
# Copyright (c) 1990 The Regents of the University of California.
d20 2
a21 10
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
d23 10
a32 16
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#	from:
#	hp300/MAKEDEV (1/15/94), from:
#	@@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
a36 2
#	fd	makes fd/* for the fdescfs.
#	ramdisk	devices needed for install floppies
a38 1
#
a40 1
#
d42 1
a42 1
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
d44 3
a48 3
#	ccd*	concatenated disk devices
#	wd*	ISA "winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#
a50 1
#
a52 1
#
d54 1
a54 1
#	tty00	standard serial port.
a56 1
#
d58 2
a59 2
#	pty*	set of 16 master and slave pseudo terminals
#
d62 1
a62 1
#	lpt*	stock lp
a63 1
#
d65 3
a67 3
#	grf*	custom chip (grf0), Retina Z2/Z3 (grf1/grf2),
#		Cirrus boards (grf3), A2410 (grf4) video or
#		CyberVision 64 (grf5)
d69 1
a69 1
#	view*	generic interface to graphic displays.
d74 1
d77 11
a87 8
#	*random	inkernal random data source
#	audio*	one unit of the audio device. Unit 0 is custom chip audio.
#	joy*	amiga joysticks
#	altq	ALTQ control interface

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77
d89 1
a89 16
# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
d92 7
a98 7
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
d101 2
a102 1
trunc ()
d108 4
a111 1
	echo ${arg1#$arg2}
d113 1
d118 4
a121 3
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
d123 3
a125 2
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
d127 10
a136 2
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
d138 3
a140 2
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
d142 45
a186 1
	echo $arg1
d189 3
a191 1
for i
d193 2
a194 3

unit=`unt $i`
[ "$unit" ] || unit=0
a196 14
all)
	sh $this std fd st0 st1 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	sh $this mouse0 mouse1 joy0 joy1 tty00 ttyA0 ttyA1
	sh $this ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 ttyB5 ttyB6 ttyB7 ttyB8 ttyB9
	sh $this grf0 grf1 grf2 grf3 grf4 grf5 grf6
	sh $this kbd sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9
	sh $this vnd0 vnd1 vnd2 vnd3 vnd4 vnd5 vnd6 cd0 cd1 fd0 fd1 fd2 fd3
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this view00 view01 view02 view03 view04 view05 pty0 pty1
	sh $this lpa0 lpa1 lpt0 lpt1 lpt2
	sh $this ccd0 ccd1 ccd2 ccd3 wd0 wd1 ch0 uk0 uk1
	sh $this pf tun0 tun1 par0 lkm ss0 random audio0 xfs0 altq local
	;;

d198 4
a201 4
	sh $this std kbd pty0 tty00 ttyA0 ttyA1 ttyB0 ttyB1
	sh $this ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	sh $this cd0 cd1 sd0 sd1 sd2 sd3 st0 st1
	sh $this fd0 fd1 wd0 wd1 rd0 random
d205 18
a222 250
	rm -f console drum kmem mem reload null zero tty
	rm -f klog stdin stdout stderr ksyms
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chown root.kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chown root.kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chown root.kmem mem
	mknod reload		c 2 20	; chmod 600 reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	mknod ksyms		c 42 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	(cd fd && i=0 && while [ $i -lt 64 ]; do
		mknod $i c 21 $i
		i=$(($i+1))
		done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

st*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	st*) name=st; blk=5; chr=20;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	b $blk `expr $unit '*' 16 + 0`
		mknod n${name}${unit}	b $blk `expr $unit '*' 16 + 1`
		mknod e${name}${unit}	b $blk `expr $unit '*' 16 + 2`
		mknod en${name}${unit}	b $blk `expr $unit '*' 16 + 3`
		mknod r${name}${unit}	c $chr `expr $unit '*' 16 + 0`
		mknod nr${name}${unit}	c $chr `expr $unit '*' 16 + 1`
		mknod er${name}${unit}	c $chr `expr $unit '*' 16 + 2`
		mknod enr${name}${unit}	c $chr `expr $unit '*' 16 + 3`
		chown root.operator ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		chmod 660 ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	umask 77
	;;

fd*)
	umask 2 ; unit=`expr $i : '.*[^0-9]\([0-9]*\)'`
	rm -f fd$unit? rfd$unit?
	case $unit in
	0|1|2|3)
		mknod fd${unit}a b 2 `expr $unit '*' 16`
		mknod fd${unit}b b 2 `expr $unit '*' 16 + 1`
		mknod rfd${unit}a c 18 `expr $unit '*' 16`
		mknod rfd${unit}b c 18 `expr $unit '*' 16 + 1`
		chown root.operator fd$unit? rfd$unit?
		chmod 640 fd$unit? rfd$unit?
		;;
	*)
		echo bad unit for floppy disk in: $i
		;;
	esac
	umask 77
	;;

sd*|ccd*|wd*|rd*)
	umask 2 ; unit=`expr $i : '.*[^0-9]\([0-9]*\)'`
	case $i in
	sd*) name=sd; blk=4; chr=8;;
	rd*) name=rd; blk=16; chr=41;;
	ccd*) name=ccd; blk=8; chr=7;;
	wd*) name=wd; blk=0; chr=37;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + 2`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + 2`
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + 1`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + 1`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

vnd*)
	umask 2 ; unit=`expr $i : 'vnd\(.*\)'`
	for name in vnd svnd; do
		blk=6; chr=19;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + $off + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + $off + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + $off + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + $off + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + $off + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + $off + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + $off + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + $off + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + $off + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + $off + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + $off + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + $off + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + $off + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + $off + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + $off + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + $off + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + $off + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + $off + 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
	umask 77
	;;

ch*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	ch*) name=ch;  chr=40;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.operator $name$unit
	chmod 660 $name$unit
	umask 77
	;;

cd*)
	umask 2 ; unit=`expr $i : '.*cd\(.*\)'`
	case $i in
	cd*) name=cd; blk=7; chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a   b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}c   b $blk `expr $unit '*' 8 + 2`
		mknod r${name}${unit}a  c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}c  c $chr `expr $unit '*' 8 + 2`
		chown root.operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

tty0*|ttyA*)
	type=`expr $i : 'tty\(.\).'`
	unit=`expr $i : 'tty.\(.\)'`
	rm -f ser${unit}
	case $type in
	0)	case $unit in
		0)	
			rm -f tty0${unit} cua0${unit}
			mknod tty0${unit} c 12 0
			mknod cua0${unit} c 12 128
			chown uucp.dialer tty0${unit} cua0${unit}
			chmod 660 tty0${unit} cua0${unit}
			;;
		*)
			echo bad unit for tty0 in: $i
			;;
		esac
		;;
	A)	case $unit in
		0|1)
			rm -f ttyA${unit} ttyM${unit}
			mknod ttyA${unit} c 17 $unit
			mknod ttyM${unit} c 17 `expr 128 + $unit`
			chown uucp.dialer ttyA${unit} ttyM${unit}
			chmod 660 ttyA${unit} ttyM${unit}
			;;
		*)
			echo bad unit for ttyA in: $i
			;;
		esac
		;;
	*)
		echo bad type for tty in: $i
		;;
	esac
d226 1
a226 3
	unit=`expr $i : 'par\(.*\)'`
	rm -f par${unit}
	case $unit in
d228 1
a228 1
		mknod par${unit} c 11 ${unit}
a235 1

d237 1
a237 4
	unit=`expr $i : 'ttye\(.*\)'`
	rm -f ttye${unit}
	rm -f ite*
	case $unit in
d239 1
a239 1
		mknod ttye${unit} c 13 ${unit}
d248 1
a248 3
	unit=`expr $i : 'grf\(.*\)'`
	rm -f grf${unit}
	case $unit in
d250 1
a250 1
		mknod grf${unit} c 10 ${unit}; chmod 666 grf${unit}
d257 1
a257 2
	rm -f grfov${unit} grfim${unit}
	case $unit in
d259 2
a260 4
		unitov=`expr $unit + 16`
		unitim=`expr $unit + 32`
		mknod grfov${unit} c 10 ${unitov}; chmod 666 grf${unit}
		mknod grfim${unit} c 10 ${unitim}; chmod 666 grf${unit}
d266 1
a266 3
	unit=`expr $i : 'mouse\(.*\)'`
	rm -f mouse${unit}
	case $unit in
d268 2
a269 2
		mknod mouse${unit} c 15 ${unit}; chmod 666 mouse${unit}
		if [ $unit = 0 ]
d271 1
a271 1
			rm -f mouse; ln -s mouse${unit} mouse
d280 4
a283 6
joy*)
	unit=`expr $i : 'joy\(.*\)'`
	rm -f joy${unit}
	case $unit in
	0|1)
		mknod joy${unit} c 43 ${unit}; chmod 666 mouse${unit}
d286 1
a286 1
		echo bad unit for joy in: $i
d290 18
a307 3
kbd)
	rm -f kbd
	mknod kbd c 14 0
d310 3
d314 2
a315 11
view*)
	unit=`expr $i : 'view\(.*\)'`
	rm -f view${unit}
	case $unit in
	00|01|02|03|04|05|06|07|08|09)
		mknod view${unit} c 16 ${unit}; chmod 666 view${unit}
		;;
	*)
		echo bad unit for view in: $i
		;;
	esac
d318 9
a326 36
pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
                do
                        nam=$name`hex $n`
                        rm -f {tty,pty}$nam
                        mknod tty$nam c 4 "$(( $offset + $n ))"
                        mknod pty$nam c 5 "$(( $offset + $n ))"
                        n="$(( $n + 1 ))"
                done
		umask 77
		;;
	esac
d329 7
a335 5
bpf*)
	unit=`expr $i : 'bpf\(.*\)'`
	rm -f bpf$unit
	mknod bpf$unit c 22 $unit
	chown root.wheel bpf$unit
d338 2
a339 5
pf)
	rm -f pf
	mknod pf c 34 0
	chown root.wheel pf
	chmod 600 pf
d342 4
a345 7
ttyB*)
	unit=`expr $i : '....\(.*\)'`
	rm -f ttyB$unit cuaB$unit
	mknod ttyB$unit c 32 $unit
	mknod cuaB$unit c 32 `expr $unit + 128`
	chown uucp.dialer ttyB$unit cuaB$unit
	chmod 660 ttyB$unit cuaB$unit
d348 2
a349 9
lpt*|lpa*)
	unit=`expr $i : '...\(.*\)'`
	case $i in
	lpt*) name=lpt; flags=0;;
	lpa*) name=lpa; flags=128;;
	esac
	rm -f $name$unit
	mknod $name$unit c 33 `expr $unit + $flags`
	chown root.wheel $name$unit
d353 5
a357 5
	unit=`expr $i : 'tun\(.*\)'`
	rm -f tun$unit
	mknod tun$unit c 23 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
d361 10
a370 5
        rm -f lkm
        mknod lkm c 24 0
        chown root.kmem lkm
        chmod 640 lkm
        ;;
d372 6
a377 9
ss*)
	unit=`expr $i : 'ss\(.*\)'`
	rm -f ss$unit
	mknod ss$unit c 25 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
d380 29
d410 3
a412 9
random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 35 0
	mknod srandom c 35 1
	mknod urandom c 35 2
	mknod prandom c 35 3
	mknod arandom c 35 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
d415 3
a417 6
uk*)
	unit=`expr $i : 'uk\(.*\)'`
	rm -f uk$unit
	mknod uk$unit c 36 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
d420 3
a422 18
audio*)
        major=39
        audio=audio$unit
        sound=sound$unit
        mixer=mixer$unit
        audioctl=audioctl$unit
        rm -f $audio $sound $mixer $audioctl                             
        mknod $sound    c $major $unit
        mknod $audio    c $major $(($unit + 128))
        mknod $mixer    c $major $(($unit + 16))
        mknod $audioctl c $major $(($unit + 192))
        chown root.wheel $audio $sound $mixer $audioctl
        chmod 666 $audio $sound $mixer $audioctl
        [ -e audio ] || ln -s $audio audio
        [ -e mixer ] || ln -s $mixer mixer
        [ -e sound ] || ln -s $sound sound
        [ -e audioctl ] || ln -s $audioctl audioctl
        ;;
d424 3
d428 8
a435 5
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
d438 7
a444 10
altq)
	mkdir -p altq
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 52 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
d449 21
a469 3
	umask 0
	test -s MAKEDEV.local && sh $this.local
	umask 77
d477 31
@


1.50
log
@add an entry for ALTQ.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.49 2001/06/25 03:19:47 kjell Exp $
d45 1
a45 1
#	floppy	devices needed for install floppies
d176 1
a176 1
floppy|ramdisk)
@


1.49
log
@add pf device on all architectures.
fix my previously bogus MAKEDEVs.
If you used pf on a non-i386. the major device number has changed,
and you'll need to recreate /dev/pf
ok theo
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.48 2001/06/24 23:35:57 kjell Exp $
d94 1
d173 1
a173 1
	sh $this pf tun0 tun1 par0 lkm ss0 random audio0 xfs0 local
d678 13
@


1.48
log
@Add the pf device for the shiny new packet filter
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.47 2001/05/30 02:11:12 deraadt Exp $
d581 1
a581 1
	mknod pf c 73 0
@


1.47
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.46 2001/04/10 03:03:50 brad Exp $
d172 1
a172 1
	sh $this tun0 tun1 par0 lkm ss0 random audio0 xfs0 local
d577 7
@


1.46
log
@keep naming of audio devices consistent across all archs that have audio
support.
--
Ok'd by: deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.45 2000/09/03 14:46:45 espie Exp $
a88 1
#	ipf	IP filter
d170 1
a170 1
	sh $this lpa0 lpa1 lpt0 lpt1 lpt2 ipl
d184 1
a184 1
	rm -f klog stdin stdout stderr ipf ksyms
a196 1
	mknod ipf		c 34 0	; chmod 444 ipf
a596 9
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 34 0
	mknod ipnat c 34 1
	mknod ipstate c 34 2
	mknod ipauth c 34 3
	chown root.wheel ipl ipnat ipstate ipauth
@


1.45
log
@Loose ends for amiga joy device:
MAKEDEV entry and manpage.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.44 2000/03/22 07:34:27 niklas Exp $
d657 5
a661 7
        unit=${i#audio}                                               
        audio=audio$unit                                                
        sound=sound$unit                             
        mixer=mixer$unit                                         
        major=39                                
        audioctl=audioctl$unit                                       
        if [ "$unit" = "" ]; then unit=0; fi
d663 1
a663 1
        mknod $sound    c $major $(($unit + 0))
d669 4
@


1.44
log
@operator should have perms to write and change tapes.  ch* is still missing
in some MAKEDEVs, will see to them in a separate commit.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.43 1999/08/20 17:00:33 downsj Exp $
d94 1
d164 1
a164 1
	sh $this mouse0 mouse1 tty00 ttyA0 ttyA1
d505 12
@


1.43
log
@Change the default serial port device and /var/spool/lock permissions.
/var/spool/lock becomes uucp.dialer, mode 1775, and serial devices
become uucp.dialer, mode 660.

(A couple of "dead" MAKEDEVs have been updated because they conformed the
the old permission scheme, while others have not because they didn't.)
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.42 1999/07/30 18:49:35 deraadt Exp $
d234 1
a234 1
		chmod 640 ${name}${unit} n${name}${unit} \
d373 1
a373 1
	chmod 640 $name$unit
@


1.42
log
@no more acd
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.41 1998/11/25 04:58:53 millert Exp $
d409 2
a410 1
			chown uucp.wheel tty0${unit} cua0${unit}
d422 2
a423 1
			chown uucp.wheel ttyA${unit} ttyM${unit}
d573 2
a574 1
	chown uucp.wheel ttyB$unit cuaB$unit
@


1.41
log
@remove bogus comment about pty use; chris@@sefl.satelnet.org
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.40 1998/11/19 08:18:56 dugsong Exp $
a58 1
#	acd*	ISA ATAPI cdrom drives
d171 1
a171 1
	sh $this ccd0 ccd1 ccd2 ccd3 wd0 wd1 acd0 ch0 uk0 uk1
d179 1
a179 1
	sh $this fd0 fd1 wd0 wd1 acd0 rd0 random
d377 1
a377 1
cd*|acd*)
a380 1
	acd*) name=acd; blk=15; chr=38;;
@


1.40
log
@add support for more ptys
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.39 1998/10/15 21:24:52 art Exp $
a529 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
@


1.39
log
@add missing entries for xfs in all
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.38 1998/09/25 11:11:58 todd Exp $
d532 11
d546 1
a546 1
	0|1|2|3|4)
@


1.38
log
@sync
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.36 1998/09/15 10:23:21 pattonme Exp $
d173 1
a173 1
	sh $this tun0 tun1 par0 lkm ss0 random audio0 local
@


1.37
log
@add xfs
@
text
@a1 1
#
d36 1
d53 1
a53 1
#	fd*	Floppy disks
d92 1
a92 1
#	uk*	unknown SCSI
@


1.36
log
@Added definition for ipauth, a new piece for IPFilter v3.2.9
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.35 1998/08/24 05:49:55 millert Exp $
d42 2
a43 2
#	all	makes all known devices, including local devices,
#		Tries to make the ``standard'' number of each.
d54 2
a55 2
#	sd*	SCSI disks, includes flopticals
#	cd*	SCSI cdrom discs
d57 1
a57 1
#	ccd*	concatenated disk driver
d59 1
a59 1
#	acd*	ISA ATAPI CD-ROM
d77 2
a78 2
#	lpt*	ISA lp
#	lpa*	interruptless ISA lp
d87 1
a87 1
#	lkm	loadable kernel modules interface.
d93 2
a94 2
#	*random	random data source
#       audio*  one unit of the audio device. Unit 0 is custom chip audio.
d96 2
a97 1
PATH=/sbin:/bin:/usr/sbin:/usr/bin
d100 15
d118 1
a118 1
		[0-9]) echo -n $1 ;;
d127 27
d157 4
d163 11
a173 11
	sh MAKEDEV std fd st0 st1 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	sh MAKEDEV mouse0 mouse1 tty00 ttyA0 ttyA1
	sh MAKEDEV ttyB0 ttyB1 ttyB2 ttyB3 ttyB4 ttyB5 ttyB6 ttyB7 ttyB8 ttyB9
	sh MAKEDEV grf0 grf1 grf2 grf3 grf4 grf5 grf6
	sh MAKEDEV kbd sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9
	sh MAKEDEV vnd0 vnd1 vnd2 vnd3 vnd4 vnd5 vnd6 cd0 cd1 fd0 fd1 fd2 fd3
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh MAKEDEV view00 view01 view02 view03 view04 view05 pty0 pty1
	sh MAKEDEV lpa0 lpa1 lpt0 lpt1 lpt2 ipl
	sh MAKEDEV ccd0 ccd1 ccd2 ccd3 wd0 wd1 acd0 ch0 uk0 uk1
	sh MAKEDEV tun0 tun1 par0 lkm ss0 random audio0 local
d177 4
a180 4
	sh MAKEDEV std kbd pty0 tty00 ttyA0 ttyA1 ttyB0 ttyB1
	sh MAKEDEV ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 ttye6
	sh MAKEDEV cd0 cd1 sd0 sd1 sd2 sd3 st0 st1
	sh MAKEDEV fd0 fd1 wd0 wd1 acd0 rd0 random
d649 8
d659 1
a659 1
	test -s MAKEDEV.local && sh MAKEDEV.local
@


1.35
log
@remove ksyms in std entry like other std things
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.34 1998/08/24 05:30:07 millert Exp $
d531 1
a531 1
	rm -f ipl ipnat ipstate 
d535 2
a536 1
	chown root.wheel ipl ipnat ipstate
@


1.34
log
@Add support for /dev/ksyms to arch-specific files
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.33 1998/02/22 23:35:37 niklas Exp $
d138 1
a138 1
	rm -f klog stdin stdout stderr ipf
@


1.33
log
@Make cua device instead of ttym
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.32 1998/01/26 04:19:35 dgregor Exp $
d152 1
@


1.32
log
@Add /dev/ipnat and /dev/ipstate for IPF 3.2.3
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.31 1998/01/09 18:00:08 niklas Exp $
d360 1
a360 1
			rm -f tty0${unit} ttym${unit}
d362 2
a363 2
			mknod ttym${unit} c 12 128
			chown uucp.wheel tty0${unit} ttym${unit}
@


1.31
log
@Create /dev/grf6 in the all rule
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.30 1997/12/08 21:27:37 mickey Exp $
d530 1
a530 1
	rm -f ipl
d532 3
a534 1
	chown root.wheel ipl
@


1.30
log
@fix chN (N > 0) problem
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.29 1997/10/16 07:29:56 niklas Exp $
d119 1
a119 1
	sh MAKEDEV grf0 grf1 grf2 grf3 grf4 grf5
@


1.29
log
@Oops wrong major for audio
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.28 1997/10/07 22:10:55 niklas Exp $
d324 1
a324 1
	mknod $name$unit	c $chr `expr $unit '*' 16 + 0`
@


1.28
log
@Audio stuff from NetBSD
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.27 1997/09/16 06:00:51 deraadt Exp $
d586 1
a586 1
        major=41                                
@


1.27
log
@10 bpf devices
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.26 1997/09/07 20:29:08 dgregor Exp $
d94 1
d126 1
a126 1
	sh MAKEDEV tun0 tun1 par0 lkm ss0 random local
d580 17
@


1.26
log
@In pty* rule:\n	Change 'rm -rf' to 'rm -f'\n	Fix {pty,tty}$n -> {pty,tty}$nam
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.25 1997/06/15 09:30:28 niklas Exp $
d121 1
a121 1
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3
@


1.25
log
@Add ttye6, bug noticed by Ulrich Flegel
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.24 1997/05/16 20:11:01 niklas Exp $
d492 1
a492 1
                        rm -rf {tty,pty}$n
@


1.24
log
@Alias ramdisk with floppy, trim floppy /dev and add rd device case.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.23 1997/05/14 15:41:07 niklas Exp $
d115 4
a118 3
	sh MAKEDEV std fd st0 st1 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 mouse0
	sh MAKEDEV mouse1 tty00 ttyA0 ttyA1 ttyB0 ttyB1 ttyB2 ttyB3 ttyB4
	sh MAKEDEV ttyB5 ttyB6 ttyB7 ttyB8 ttyB9 grf0 grf1 grf2 grf3 grf4 grf5
@


1.23
log
@Make svnd nodes too, please test this on your port
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.22 1997/05/13 16:21:48 niklas Exp $
d127 2
a128 3
floppy)
	sh MAKEDEV std kbd pty0 tty00 ttyA0 ttyA1 ttyB0 ttyB1 tun0 tun1
	sh MAKEDEV grf0 grf1 grf2 grf3 grf4 grf5 grf6
d130 2
a131 2
	sh MAKEDEV cd0 cd1 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 st0 st1
	sh MAKEDEV fd0 fd1 fd2 fd3 wd0 wd1 acd0
d216 1
a216 1
sd*|ccd*|wd*)
d220 1
@


1.22
log
@Remove printf dep. use hex() instead
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.21 1997/05/13 05:34:48 millert Exp $
d217 1
a217 1
sd*|vnd*|ccd*|wd*)
a220 1
	vnd*) name=vnd; blk=6; chr=19;;
d266 47
@


1.21
log
@Only run MAKEDEV.local if it exists.  Avoids an error message
during installs where there is no MAKEDEV.local.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.20 1997/05/02 08:21:55 niklas Exp $
d97 14
d441 9
a449 7
		(i=0; while [ $i -lt 16 ]; do
			eval `printf "rm -f tty%s%x; mknod tty%s%x c 4 %d; \
			    rm -f pty%s%x; mknod pty%s%x c 5 %d" $name $i \
			    $name $i $offset $name $i $name $i $offset`
			offset=$(($offset+1))
			i=$(($i+1))
			done)
@


1.20
log
@Add missing ch* device creation case.  Remove ipl & ipf before recreating
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.18 1996/12/14 18:23:50 millert Exp $
d519 1
a519 1
	sh MAKEDEV.local
@


1.19
log
@Fix vnd nodes.
@
text
@d123 1
a123 1
	rm -f klog stdin stdout stderr
d256 12
d466 1
@


1.18
log
@/dev/fd should be owned by root.wheel
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.17 1996/11/26 05:22:31 kstailey Exp $
a215 2
		if [ $name != cd -a $name != vnd ]
		then
a245 1
		fi
@


1.17
log
@adjust scanner stanza to match the other MAKEDEVs
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.16 1996/10/17 18:55:26 niklas Exp $
d146 1
a146 1
	chown -R bin.bin fd
@


1.16
log
@add devices to all & floppy case.  Fix acd device creation
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.15 1996/10/12 21:09:04 niklas Exp $
d91 1
a91 1
#	ss*	SCSI scanner
d480 5
a484 2
	chmod 600 ss$unit
	chown root.wheel ss$unit
d486 1
@


1.15
log
@Fix typo in ttyB case
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.14 1996/09/18 22:03:38 deraadt Exp $
d101 1
a101 1
	sh MAKEDEV std fd st0 ttye0 ttye1 ttye2 ttye3 ttye4 ttye5 mouse0
d104 4
a107 3
	sh MAKEDEV kbd sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 vnd0 vnd1 vnd2
	sh MAKEDEV vnd3 vnd4 view00 view01 view02 view03 view04 view05 pty0 
	sh MAKEDEV vnd5 vnd6 cd0 fd0 fd1 fd2 fd3 bpf0 bpf1 bpf2 bpf3
d109 1
a109 1
	sh MAKEDEV ccd0 ccd1 ccd2 ccd3
d114 1
a114 1
	sh MAKEDEV std kbd pty0 tty00 ttyA0 ttyA1 tun0 tun1
d117 2
a118 2
	sh MAKEDEV cd0 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 st0
	sh MAKEDEV fd0 fd1 fd2 fd3 
d260 1
a260 1
	umask 2 ; unit=`expr $i : '..\(.*\)'`
@


1.14
log
@do not use chgrp
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.13 1996/08/29 13:22:22 deraadt Exp $
d437 1
a437 1
	unit=`expr $i : '...\(.*\)'`
@


1.14.2.1
log
@Pullup: Fix typo in ttyB case
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.15 1996/10/12 21:09:04 niklas Exp $
d437 1
a437 1
	unit=`expr $i : '....\(.*\)'`
@


1.13
log
@support cua devices on the com.c driver
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.12 1996/08/28 08:55:20 deraadt Exp $
d124 3
a126 3
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
d167 1
a167 1
		chgrp operator ${name}${unit} n${name}${unit} \
d192 1
a192 1
		chgrp operator fd$unit? rfd$unit?
d248 1
a248 1
		chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
d271 1
a271 1
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
d291 1
a291 1
			chown uucp:wheel tty0${unit} ttym${unit}
d303 1
a303 1
			chown uucp:wheel ttyA${unit} ttyM${unit}
d471 1
a471 1
        chown root:kmem lkm
@


1.12
log
@fix all random device node entry stuff
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.11 1996/08/23 18:26:29 niklas Exp $
d70 1
a70 2
#	com*	ISA COM ports			(XXX)
#	ttyB*	alias for ISA COM ports, this is what the system really wants
d436 1
a436 1
com*|ttyB*)					# (XXX -- com should die)
d438 4
a441 3
	rm -f com$unit tty$unit
	mknod tty$unit c 32 $unit
	chown uucp.wheel tty$unit
@


1.11
log
@Addition of acd and wd + fixed ss major.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.10 1996/07/28 09:00:11 deraadt Exp $
d94 1
a94 1
#	*rnd	random data source
d110 1
a110 1
	sh MAKEDEV tun0 tun1 par0 lkm ss0 rnd local
d483 9
a491 8
rnd|srnd|urnd|prnd)
	rm -f rnd urnd srnd prnd
	mknod  rnd c 35 0
	mknod srnd c 35 1
	mknod urnd c 35 2
	mknod prnd c 35 3
	chown root.wheel rnd srnd urnd prnd
	chmod 644 rnd srnd urnd prnd
@


1.10
log
@root for reload
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.9 1996/07/15 14:59:07 mickey Exp $
d58 2
d203 1
a203 1
sd*|vnd*|ccd*)
d209 1
d259 1
a259 1
cd*)
d263 1
d478 1
a478 1
	mknod ss$unit c 35 $unit
@


1.9
log
@ad rnd devices.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.8 1996/05/27 07:51:23 deraadt Exp $
d126 1
a126 1
	mknod reload		c 2 20	; chmod 640 mem ; chgrp kmem mem
@


1.8
log
@sync
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.5 1996/03/28 18:24:37 niklas Exp $
d91 2
d108 1
a108 1
	sh MAKEDEV tun0 tun1 par0 lkm ss0 local
d477 18
@


1.7
log
@Add ISA devices, renumber ipf device, add SCSI scanner device.
@
text
@d4 1
a4 1
#	$NetBSD: MAKEDEV,v 1.20 1996/04/13 01:02:18 veego Exp $
d111 2
a112 2
	sh MAKEDEV grf0 grf1 grf2 grf3 grf4 grf5
	sh MAKEDEV ttye0 ttye1 ttye2 ttye3 ttye4 ttye5
d330 1
a330 1
	0|1|2|3|4|5)
d343 1
a343 1
	0|1|2|3|4|5)
@


1.6
log
@sync with netbsd 960418
@
text
@d68 2
d76 2
d89 2
d99 2
a100 1
	sh MAKEDEV mouse1 tty00 ttyA0 ttyA1 grf0 grf1 grf2 grf3 grf4 grf5
d103 2
a104 1
	sh MAKEDEV vnd5 vnd6 cd0 fd0 fd1 fd2 fd3 bpf0 bpf1 bpf2 bpf3 ipl
d106 1
a106 1
	sh MAKEDEV tun0 tun1 par0 lkm local
d132 1
d431 18
d450 1
a450 1
	mknod ipl c 32 0
d468 8
@


1.5
log
@From NetBSD: merge of 960317
@
text
@d3 2
a4 2
#	$OpenBSD$
#	$NetBSD: MAKEDEV,v 1.19 1996/03/02 13:58:04 veego Exp $
d254 1
a254 1
		mknod ${name}${unit}d   b $blk `expr $unit '*' 8 + 3`
d256 1
@


1.4
log
@created devices for the IP filter log on all architectures
@
text
@d3 2
a4 1
#	$NetBSD: MAKEDEV,v 1.18 1995/11/28 05:40:18 jtc Exp $
d92 2
a93 2
	sh MAKEDEV std fd st0 ttye0 ttye1 ttye2 ttye3 ttye4 mouse0 mouse1
	sh MAKEDEV tty00 ttyA0 ttyA1 grf0 grf1 grf2 grf3 grf4 grf5
d103 2
a104 1
	sh MAKEDEV grf0 grf1 grf2 grf3 grf4 grf5 ttye0 ttye1 ttye2 ttye3 ttye4
d320 1
a320 1
	0|1|2|3|4)
@


1.3
log
@update from netbsd
@
text
@d95 1
a95 1
	sh MAKEDEV vnd5 vnd6 cd0 fd0 fd1 fd2 fd3 bpf0 bpf1 bpf2 bpf3
d417 5
@


1.2
log
@update from NetBSD
@
text
@d3 1
a3 1
#	$NetBSD: MAKEDEV,v 1.17.2.1 1995/10/20 10:30:08 chopps Exp $
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#	$NetBSD: MAKEDEV,v 1.17 1995/10/09 02:23:07 chopps Exp $
d336 10
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
