head	1.54;
access;
symbols
	OPENBSD_2_9:1.43.0.2
	OPENBSD_2_9_BASE:1.43
	OPENBSD_2_8:1.34.0.2
	OPENBSD_2_8_BASE:1.34
	OPENBSD_2_7:1.29.0.2
	OPENBSD_2_7_BASE:1.29
	OPENBSD_2_6:1.27.0.2
	OPENBSD_2_6_BASE:1.27
	OPENBSD_2_5:1.26.0.2
	OPENBSD_2_5_BASE:1.26
	OPENBSD_2_4:1.24.0.2
	OPENBSD_2_4_BASE:1.24
	OPENBSD_2_3:1.15.0.2
	OPENBSD_2_3_BASE:1.15
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	powerpc_1:1.1.1.1;
locks; strict;
comment	@# @;


1.54
date	2001.09.01.16.13.47;	author drahn;	state dead;
branches;
next	1.53;

1.53
date	2001.07.05.02.54.07;	author mickey;	state Exp;
branches;
next	1.52;

1.52
date	2001.07.01.10.52.13;	author dhartmei;	state Exp;
branches;
next	1.51;

1.51
date	2001.06.28.02.58.56;	author kjc;	state Exp;
branches;
next	1.50;

1.50
date	2001.06.26.07.04.17;	author drahn;	state Exp;
branches;
next	1.49;

1.49
date	2001.06.24.23.36.08;	author kjell;	state Exp;
branches;
next	1.48;

1.48
date	2001.06.24.04.23.51;	author matthieu;	state Exp;
branches;
next	1.47;

1.47
date	2001.06.23.03.34.34;	author matthieu;	state Exp;
branches;
next	1.46;

1.46
date	2001.06.23.02.29.30;	author drahn;	state Exp;
branches;
next	1.45;

1.45
date	2001.06.17.06.40.50;	author brad;	state Exp;
branches;
next	1.44;

1.44
date	2001.05.30.02.11.24;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2001.04.10.03.03.52;	author brad;	state Exp;
branches;
next	1.42;

1.42
date	2001.03.29.19.57.35;	author drahn;	state Exp;
branches;
next	1.41;

1.41
date	2001.03.25.06.27.18;	author drahn;	state Exp;
branches;
next	1.40;

1.40
date	2001.03.03.06.09.25;	author drahn;	state Exp;
branches;
next	1.39;

1.39
date	2001.02.13.14.21.33;	author drahn;	state Exp;
branches;
next	1.38;

1.38
date	2001.02.05.01.42.49;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2001.01.30.23.58.50;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2001.01.30.08.34.09;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2001.01.30.03.02.21;	author drahn;	state Exp;
branches;
next	1.34;

1.34
date	2000.10.13.21.31.15;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2000.10.03.03.50.34;	author rahnds;	state Exp;
branches;
next	1.32;

1.32
date	2000.09.10.16.39.42;	author rahnds;	state Exp;
branches;
next	1.31;

1.31
date	2000.09.07.01.35.16;	author rahnds;	state Exp;
branches;
next	1.30;

1.30
date	2000.09.06.02.54.26;	author rahnds;	state Exp;
branches;
next	1.29;

1.29
date	2000.03.22.07.34.30;	author niklas;	state Exp;
branches;
next	1.28;

1.28
date	2000.02.03.03.06.54;	author rahnds;	state Exp;
branches;
next	1.27;

1.27
date	99.08.20.17.00.37;	author downsj;	state Exp;
branches;
next	1.26;

1.26
date	98.11.25.04.58.55;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	98.11.19.08.18.58;	author dugsong;	state Exp;
branches;
next	1.24;

1.24
date	98.10.15.21.24.53;	author art;	state Exp;
branches;
next	1.23;

1.23
date	98.10.10.06.25.20;	author rahnds;	state Exp;
branches;
next	1.22;

1.22
date	98.09.27.04.26.52;	author rahnds;	state Exp;
branches;
next	1.21;

1.21
date	98.09.25.11.51.46;	author todd;	state Exp;
branches;
next	1.20;

1.20
date	98.09.24.04.26.10;	author rahnds;	state Exp;
branches;
next	1.19;

1.19
date	98.09.16.04.18.11;	author rahnds;	state Exp;
branches;
next	1.18;

1.18
date	98.09.16.04.04.38;	author rahnds;	state Exp;
branches;
next	1.17;

1.17
date	98.07.19.00.16.16;	author rahnds;	state Exp;
branches;
next	1.16;

1.16
date	98.05.29.04.22.18;	author rahnds;	state Exp;
branches;
next	1.15;

1.15
date	98.04.06.20.17.16;	author pefo;	state Exp;
branches;
next	1.14;

1.14
date	97.12.08.21.27.42;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	97.10.13.14.45.06;	author pefo;	state Exp;
branches;
next	1.12;

1.12
date	97.09.16.06.01.03;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.09.07.20.29.14;	author dgregor;	state Exp;
branches;
next	1.10;

1.10
date	97.05.14.15.41.20;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.05.13.05.34.57;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.05.11.02.18.42;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.05.11.02.14.05;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.05.05.16.40.50;	author rahnds;	state Exp;
branches;
next	1.5;

1.5
date	97.04.18.20.25.07;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	97.02.18.16.10.26;	author rahnds;	state Exp;
branches;
next	1.3;

1.3
date	97.02.06.04.36.38;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	97.01.09.04.24.39;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	96.12.21.20.41.17;	author rahnds;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.21.20.41.17;	author rahnds;	state Exp;
branches;
next	;


desc
@@


1.54
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Files moved from etc/etc.powerpc to etc/etc.macppc
@
text
@#!/bin/sh -
#	$OpenBSD: MAKEDEV,v 1.53 2001/07/05 02:54:07 mickey Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	from: @@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#	$NetBSD: MAKEDEV,v 1.17 1996/02/03 15:02:42 briggs Exp $ 
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	fd	makes fd/* for the fdescfs.
#	local	configuration specific devices
#	ramdisk	makes all devices for a ramdisk kernel
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	wd*	IDE disks
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	rd*	"ramdisk" pseudo-disks
#	ccd*	concatenated disk devices
#	raid*	RAIDframe disk devices
#
# Terminal ports:
#	ttyC*	wscons
#	tty*	standard built-in serial ports (2)
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd* wscons keyboard events
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Graphics devices:
#	grf*	custom chip (grf0), Retina Z2/Z3 (grf1/grf2),
#		Cirrus boards (grf3), A2410 (grf4) video or
#		CyberVision 64 (grf5)
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	urio*	Diamond Multimedia Rio 500
#	ugen*	Generic device
#	utty*	Serial ports
#
# Special purpose devices:
#	audio*  audio
#	ch*	SCSI media changer
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	lkm	loadable kernel modules interface
#	*random	inkernal random data source
#	altq	ALTQ control interface
#	iop	I2O controller device
#

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
{
	case $1 in
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
	esac
}
trunc ()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	echo ${arg1#$arg2}
}
unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
	done
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
	done
	echo $arg1
}

for i
do

unit=`unt $i`
[ "$unit" ] || unit=0

case $i in

all)
	sh $this std fd
	sh $this wd0 wd1 wd2 wd3 
	sh $this sd0 sd1 sd2 sd3 st0 st1 cd0 cd1
	sh $this vnd0 vnd1 vnd2 vnd3
	sh $this ccd0 ccd1 ccd2 ccd3
	sh $this raid0 raid1 raid2 raid3
	sh $this rd0
	sh $this ttyC0 ttyCcfg
	sh $this tty00 tty01 tty02 tty03 pty0 pty1
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this pf tun0 tun1 tun2 tun3
	sh $this audio0
	sh $this random uk0 uk1 ss0 ss1
	sh $this wscons
	sh $this pci
	sh $this lkm xfs0 altq
	sh $this usbs
	sh $this iop0 iop1
	sh $this local
	;;

ramdisk)
	sh $this std
	sh $this wd0 wd1 wd2 wd3 
	sh $this sd0 sd1 sd2 sd3 sd4 st0 st1 cd0 cd1
	sh $this rd0
	sh $this random
	sh $this bpf0
	sh $this tty00 tty01 pty0
	sh $this wscons
	;;

std)
	rm -f console drum kmem mem reload zero null tty
	rm -f klog stdin stdout stderr ksyms
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod reload		c 2 20	; chmod 640 reload ; chgrp kmem reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	mknod ksyms		c 43 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

iop*)
	rm -f iop$unit
	mknod iop$unit c 73 $unit
	chown root.wheel iop$unit
	chmod 660 iop$unit
	;;

usbs)
	sh $this usb0 usb1
	sh $this uhid0 uhid1 uhid2 uhid3
	sh $this ulpt0 ulpt1
	sh $this urio0
	sh $this utty0 utty1
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 21 $n; n="$(( $n + 1 ))"; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

sd*|wd*|ccd*|ofdisk*|raid*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	sd*) name=sd;		blk=2;	chr=8;;
	wd*) name=wd;		blk=0;	chr=11;;
	ofdisk*) name=ofdisk;	blk=4;	chr=13;;
	ccd*) name=ccd; 	blk=16;	chr=18;;
	raid*) name=raid;	blk=19;	chr=54;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6|7|8|9)
		mknod ${name}${unit}a	b $blk $(( $unit * 16 + 0 ))
		mknod ${name}${unit}b	b $blk $(( $unit * 16 + 1 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 16 + 2 ))
		mknod ${name}${unit}d	b $blk $(( $unit * 16 + 3 ))
		mknod ${name}${unit}e	b $blk $(( $unit * 16 + 4 ))
		mknod ${name}${unit}f	b $blk $(( $unit * 16 + 5 ))
		mknod ${name}${unit}g	b $blk $(( $unit * 16 + 6 ))
		mknod ${name}${unit}h	b $blk $(( $unit * 16 + 7 ))
		mknod ${name}${unit}i	b $blk $(( $unit * 16 + 8 ))
		mknod ${name}${unit}j	b $blk $(( $unit * 16 + 9 ))
		mknod ${name}${unit}k	b $blk $(( $unit * 16 + 10 ))
		mknod ${name}${unit}l	b $blk $(( $unit * 16 + 11 ))
		mknod ${name}${unit}m	b $blk $(( $unit * 16 + 12 ))
		mknod ${name}${unit}n	b $blk $(( $unit * 16 + 13 ))
		mknod ${name}${unit}o	b $blk $(( $unit * 16 + 14 ))
		mknod ${name}${unit}p	b $blk $(( $unit * 16 + 15 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 16 + 0 ))
		mknod r${name}${unit}b	c $chr $(( $unit * 16 + 1 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 16 + 2 ))
		mknod r${name}${unit}d	c $chr $(( $unit * 16 + 3 ))
		mknod r${name}${unit}e	c $chr $(( $unit * 16 + 4 ))
		mknod r${name}${unit}f	c $chr $(( $unit * 16 + 5 ))
		mknod r${name}${unit}g	c $chr $(( $unit * 16 + 6 ))
		mknod r${name}${unit}h	c $chr $(( $unit * 16 + 7 ))
		mknod r${name}${unit}i	c $chr $(( $unit * 16 + 8 ))
		mknod r${name}${unit}j	c $chr $(( $unit * 16 + 9 ))
		mknod r${name}${unit}k	c $chr $(( $unit * 16 + 10 ))
		mknod r${name}${unit}l	c $chr $(( $unit * 16 + 11 ))
		mknod r${name}${unit}m	c $chr $(( $unit * 16 + 12 ))
		mknod r${name}${unit}n	c $chr $(( $unit * 16 + 13 ))
		mknod r${name}${unit}o	c $chr $(( $unit * 16 + 14 ))
		mknod r${name}${unit}p	c $chr $(( $unit * 16 + 15 ))
		chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

vnd*)
	umask 2 ; unit=${i##*[a-z]}
	for name in vnd svnd; do
		blk=14; chr=19;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk $(( $unit * 16 + $off + 0 ))
		mknod ${name}${unit}b	b $blk $(( $unit * 16 + $off + 1 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 16 + $off + 2 ))
		mknod ${name}${unit}d	b $blk $(( $unit * 16 + $off + 3 ))
		mknod ${name}${unit}e	b $blk $(( $unit * 16 + $off + 4 ))
		mknod ${name}${unit}f	b $blk $(( $unit * 16 + $off + 5 ))
		mknod ${name}${unit}g	b $blk $(( $unit * 16 + $off + 6 ))
		mknod ${name}${unit}h	b $blk $(( $unit * 16 + $off + 7 ))
		mknod ${name}${unit}i	b $blk $(( $unit * 16 + $off + 8 ))
		mknod ${name}${unit}j	b $blk $(( $unit * 16 + $off + 9 ))
		mknod ${name}${unit}k	b $blk $(( $unit * 16 + $off + 10 ))
		mknod ${name}${unit}l	b $blk $(( $unit * 16 + $off + 11 ))
		mknod ${name}${unit}m	b $blk $(( $unit * 16 + $off + 12 ))
		mknod ${name}${unit}n	b $blk $(( $unit * 16 + $off + 13 ))
		mknod ${name}${unit}o	b $blk $(( $unit * 16 + $off + 14 ))
		mknod ${name}${unit}p	b $blk $(( $unit * 16 + $off + 15 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 16 + $off + 0 ))
		mknod r${name}${unit}b	c $chr $(( $unit * 16 + $off + 1 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 16 + $off + 2 ))
		mknod r${name}${unit}d	c $chr $(( $unit * 16 + $off + 3 ))
		mknod r${name}${unit}e	c $chr $(( $unit * 16 + $off + 4 ))
		mknod r${name}${unit}f	c $chr $(( $unit * 16 + $off + 5 ))
		mknod r${name}${unit}g	c $chr $(( $unit * 16 + $off + 6 ))
		mknod r${name}${unit}h	c $chr $(( $unit * 16 + $off + 7 ))
		mknod r${name}${unit}i	c $chr $(( $unit * 16 + $off + 8 ))
		mknod r${name}${unit}j	c $chr $(( $unit * 16 + $off + 9 ))
		mknod r${name}${unit}k	c $chr $(( $unit * 16 + $off + 10 ))
		mknod r${name}${unit}l	c $chr $(( $unit * 16 + $off + 11 ))
		mknod r${name}${unit}m	c $chr $(( $unit * 16 + $off + 12 ))
		mknod r${name}${unit}n	c $chr $(( $unit * 16 + $off + 13 ))
		mknod r${name}${unit}o	c $chr $(( $unit * 16 + $off + 14 ))
		mknod r${name}${unit}p	c $chr $(( $unit * 16 + $off + 15 ))
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
	umask 77
	;;

tty0*)
	unit=${i##tty0}
	rm -f tty0$unit cua0$unit
	mknod tty0$unit c 7 $unit
	mknod cua0$unit c 7 `expr $unit + 128`
	chown uucp.dialer tty0$unit cua0$unit
	chmod 660 tty0$unit cua0$unit
	;;

pty*)
	class=${i##*[a-z]}
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
		do
			nam=$name`hex $n`
			rm -f {tty,pty}$nam
			mknod tty$nam c 4 $(( $offset + $n ))
			mknod pty$nam c 5 $(( $offset + $n ))
			n="$(( $n + 1 ))"
		done
		umask 77
		;;
	esac
	;;

st*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	st*) name=st;  chr=20; blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	b $blk $(( $unit * 16 + 0 ))
		mknod n${name}${unit}	b $blk $(( $unit * 16 + 1 ))
		mknod e${name}${unit}	b $blk $(( $unit * 16 + 2 ))
		mknod en${name}${unit}	b $blk $(( $unit * 16 + 3 ))
		mknod r${name}${unit}	c $chr $(( $unit * 16 + 0 ))
		mknod nr${name}${unit}	c $chr $(( $unit * 16 + 1 ))
		mknod er${name}${unit}	c $chr $(( $unit * 16 + 2 ))
		mknod enr${name}${unit}	c $chr $(( $unit * 16 + 3 ))
		chown root.operator ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		chmod 660 ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit} 
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	umask 77
	;;

ch*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	ch*) name=ch;  chr=10;;
	esac
	rm -f $name$unit
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	c $chr $unit
		chown root.operator ${name}${unit}
		chmod 660 ${name}${unit}
		;;
	*)
		echo bad unit for media changer in: $i
		;;
	esac
	umask 77
	;;

cd*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	cd*) name=cd; blk=3; chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a	b $blk $(( $unit * 8 + 0 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 8 + 2 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 8 + 0 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 8 + 2 ))
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

audio*)
	major=44
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	audioctl=audioctl$unit
	rm -f $sound $audio $mixer $audioctl
	mknod $sound    c $major $unit
	mknod $audio    c $major $(( $unit + 128 ))
	mknod $mixer    c $major $(( $unit + 16 ))
	mknod $audioctl c $major $(( $unit + 192 ))
	chown root.wheel $audio $sound $mixer $audioctl
	chmod 666 $audio $sound $mixer $audioctl
	[ -e audio ] || ln -s $audio audio
	[ -e mixer ] || ln -s $mixer mixer
	[ -e sound ] || ln -s $sound sound
	[ -e audioctl ] || ln -s $audioctl audioctl
	;;

usb*)
	rm -f usb$unit
	mknod usb$unit c 61 $unit
	chown root.wheel usb$unit
	chmod 660 usb$unit
	;;

uhid*)
	rm -f uhid$unit
	mknod uhid$unit c 62 $unit
	chown root.wheel uhid$unit
	chmod 660 uhid$unit
	;;

ugen*)
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		rm -f ugen$unit.$j
		mknod ugen$unit.$j c 63 $(( $unit * 16 + $j ))
		chown root.wheel ugen$unit.$j
		chmod 660 ugen$unit.$j
	done
	;;

ulpt*)
	rm -f ulpt$unit
	mknod ulpt$unit c 64 $unit
	chown root.wheel ulpt$unit
	chmod 660 ulpt$unit
	;;

urio*)
	rm -f urio$unit
	mknod urio$unit c 65 $unit
	chown root.wheel urio$unit
	chmod 660 urio$unit
	;;

utty*)
	rm -f utty$unit
	mknod utty$unit c 66 $unit
	chown root.wheel utty$unit
	chmod 660 utty$unit
	;;

 
ttyCcfg)
	major=67
	minor=255
	rm -f ttyCcfg
	mknod ttyCcfg c $major $minor  
	chown root.wheel ttyCcfg
        ;;

ttyC*)
	type=C
	unit=${i##ttyC}
	major=67
	minor=$unit
        rm -f tty$type$unit
        mknod tty$type$unit c $major $minor
        chown root.wheel tty$type$unit
        ;;

bpf*)
	unit=${i##*[a-z]}
	rm -f bpf${unit}
	mknod bpf${unit} c 22 ${unit}
	chown root.wheel bpf${unit}
	;;

pf)
	rm -f pf
	mknod pf c 39 0
	chown root.wheel pf
	chmod 600 pf
	;;

tun*)
	unit=${i##*[a-z]}
	rm -f tun$unit
	mknod tun$unit c 23 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
	;;

rd*)
	blk=17; chr=17;
	umask 2 ; unit=${i##*[a-z]}
	rm -f rd${unit}a rd${unit}c rrd${unit}a rrd${unit}c
	mknod rd${unit}a b ${blk} $(( $unit * 16 + 0 ))
	mknod rd${unit}c b ${blk} $(( $unit * 16 + 2 ))
	mknod rrd${unit}a c ${chr} $(( $unit * 16 + 0 ))
	mknod rrd${unit}c c ${chr} $(( $unit * 16 + 2 ))
	chown root.operator rd${unit}[ac] rrd${unit}[ac]
	chmod 640 rd${unit}[ac] rrd${unit}[ac]
	umask 77
	;;

lkm)
	rm -f lkm
	mknod lkm c 24 0
	chown root.kmem lkm
	chmod 640 lkm
	;;

pci*)
	rm -f pci
	mknod pci c 71 0
	chown root.kmem pci
	chmod 664 pci
	;;

random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 40 0
	mknod srandom c 40 1
	mknod urandom c 40 2
	mknod prandom c 40 3
	mknod arandom c 40 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
	;;
uk*)
	unit=${i##*[a-z]}
	rm -f uk$unit
	mknod uk$unit c 41 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
	;;

ss*)
	unit=${i##*[a-z]}
	rm -f ss$unit
	mknod ss$unit c 42 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
	;;
wscons)
	sh $this wskbd0 wskbd1 wskbd2 wskbd3
	sh $this wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $this ttyCcfg
	sh $this wsmux
	;;
wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 70 0
	mknod wskbd c 70 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
	;;

wskbd*)
	unit=${i##*[a-z]}
	rm -f wskbd${unit} 
	mknod wskbd${unit} c 68 ${unit}
	# XXX
	chmod 660 wskbd${unit}
	chown root.wheel wskbd${unit}
	;;
wsmouse*)
	unit=${i##*[a-z]}
	rm -f wsmouse${unit} 
	mknod wsmouse${unit} c 69 ${unit}
	# XXX
	chmod 660 wsmouse${unit}
	chown root.wheel wsmouse${unit}
	;;

xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
	;;

altq)
	mkdir -p altq
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 72 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
	done
	;;

local)
	umask 0
	test -s MAKEDEV.local && sh $this.local
	;;

*)
	echo $i: unknown device
esac
done

@


1.53
log
@create iop0, iop1
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.53 2001/07/05 02:51:37 mickey Exp $
@


1.52
log
@pf is major 39 on powerpc
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.51 2001/06/28 02:58:56 kjc Exp $
d81 1
d169 1
d200 7
@


1.51
log
@add an entry for ALTQ.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.50 2001/06/26 07:04:17 drahn Exp $
d532 1
a532 1
	mknod pf c 73 0
@


1.50
log
@remove ksyms before recreating it.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.49 2001/06/24 23:36:08 kjell Exp $
d80 1
d166 1
a166 1
	sh $this lkm xfs0
d636 13
@


1.49
log
@Add the pf device for the shiny new packet filter
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.48 2001/06/24 04:23:51 matthieu Exp $
d183 1
a183 1
	rm -f klog stdin stdout stderr # ksyms
@


1.48
log
@let other read /dev/pci (so that they can call ioctl(..., PCIOCREAD, ...))
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.47 2001/06/23 03:34:34 matthieu Exp $
d160 1
a160 1
	sh $this tun0 tun1 tun2 tun3
d527 7
@


1.47
log
@add /dev/pci
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.46 2001/06/23 02:29:30 drahn Exp $
d561 1
a561 1
	chmod 660 pci
@


1.46
log
@With the addition of kernel in bootloader, ksyms now work.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.45 2001/06/17 06:40:50 brad Exp $
d164 1
d555 7
@


1.45
log
@fix audio device creation.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.44 2001/05/30 02:11:24 deraadt Exp $
d195 1
a195 1
#	mknod ksyms		c 43 0  ; chmod 640 ksyms ; chown root.kmem ksyms
@


1.44
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.43 2001/04/10 03:03:52 brad Exp $
d440 5
a444 5
	audio=audio$n
	sound=sound$n
	mixer=mixer$n
	audioctl=audioctl$n
	rm -f $audio $sound $mixer $audioctl
@


1.43
log
@keep naming of audio devices consistent across all archs that have audio
support.
--
Ok'd by: deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.42 2001/03/29 19:57:35 drahn Exp $
d156 1
a156 1
	sh $this rd0 ipl
a525 9
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 39 0
	mknod ipnat c 39 1
	mknod ipstate c 39 2
	mknod ipauth c 39 3
	chown root.wheel ipl ipnat ipstate ipauth
@


1.42
log
@Create device node for audio support.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.41 2001/03/25 06:27:18 drahn Exp $
d439 1
a439 1
	[ "$unit" = "0" ] && n= || n=$unit
a443 1
	major=44
d451 4
@


1.41
log
@Enable bpf on the ramdisk for dhcp support.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.40 2001/03/03 06:09:25 drahn Exp $
d74 1
d161 1
d436 16
@


1.40
log
@Reorder to prevent wskbd*) from matching "wskbd" when wskbd) also exists.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.39 2001/02/13 14:21:33 drahn Exp $
d173 1
@


1.39
log
@make the wscons device nodes, wscons0 did not exist.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.38 2001/02/05 01:42:49 deraadt Exp $
d577 8
a599 8
	;;

wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 69 0
	mknod wskbd c 69 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
@


1.38
log
@repair unit number calculation
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.37 2001/01/30 23:58:50 deraadt Exp $
d161 1
a161 1
	sh $this wscons0
d174 1
a174 1
	sh $this wscons0
d571 5
a575 3
wscons*)
	unit=${i##*[a-z]}
	sh $this ttyC${unit} wskbd${unit} wsmouse${unit}
d592 8
@


1.37
log
@bye bye other ttyo0 pieces; brad
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.36 2001/01/30 08:34:09 deraadt Exp $
d143 1
a143 1
unit=`unt $1`
@


1.36
log
@move console ttys around.  serial becomes tty0?, console ttyC?
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.35 2001/01/30 03:02:21 drahn Exp $
d156 1
a156 1
	sh $this ttyo0 ttyC0 ttyCcfg
a171 1
	sh $this ttyo0 
a313 14
ttyo*)
	unit=${i##*[a-z]}
	rm -f ser${unit} tty${unit} ttyo${unit}
	case ${unit} in
	0|1)
		mknod ttyo${unit} c 14 ${unit}
		chown uucp.dialer ttyo${unit}
		chmod 660 ttyo${unit}
		;;
	*)
		echo bad unit for serial tty in: $i
		;;
	esac
	;;
@


1.35
log
@support/make ttyEcfg for powerpc, wscons config node.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.35 2001/01/30 02:53:53 drahn Exp $
d48 1
a48 1
#	ttyE*	wscons
d156 1
a156 1
	sh $this ttyo0 ttyE0 ttyEcfg
d496 1
a496 1
ttyEcfg)
d499 3
a501 3
	rm -f ttyEcfg
	mknod ttyEcfg c $major $minor  
	chown root.wheel ttyEcfg
d504 3
a506 3
ttyE*)
	type=E
	unit=${i##ttyE}
d588 1
a588 1
	sh $this ttyE${unit} wskbd${unit} wsmouse${unit}
@


1.34
log
@2 sets of ptys; drahn
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.33 2000/10/03 03:50:34 rahnds Exp $
d156 1
a156 1
	sh $this ttyo0 ttyE0
d495 1
a496 1
	type=Ecfg
d498 4
a501 5
	minor=255 
	unit=${i##ttyE}
        rm -f tty$type$unit
        mknod tty$type$unit c $major $minor
        chown root.wheel tty$type$unit
@


1.33
log
@Another piece of the raid device support. Make device nodes.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.32 2000/09/10 16:39:42 rahnds Exp $
d157 1
a157 1
	sh $this tty00 tty01 tty02 tty03 pty0
@


1.32
log
@Clean up MAKEDEV with respect to wscons. wsdisplay should not exist ttyEx
is used as that device. ttyEcfg needs to be created for wscons tools.
Additional cleanup and comments.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.31 2000/09/07 01:35:16 rahnds Exp $
d45 1
d154 1
d214 1
a214 1
sd*|wd*|ccd*|ofdisk*)
d217 5
a221 4
	sd*) name=sd; blk=2; chr=8;;
	wd*) name=wd; blk=0; chr=11;;
	ofdisk*) name=ofdisk; blk=4; chr=13;;
	ccd*) name=ccd; blk=16; chr=18;;
@


1.31
log
@Add device nodev for wsdisplay, wskbd, wsmouse as required by wsconctl.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.30 2000/09/06 02:54:26 rahnds Exp $
d47 1
a47 1
#	ttye*	ite bitmapped consoles
d50 6
d159 1
a159 1
	sh $this kbd mouse
d170 1
a170 1
	sh $this ttyo0 ttyE0
d173 1
d492 10
d503 4
a506 5
		  type=E
		  unit=${i##ttyE}
	case $type in
	E)	major=67; minor=$unit ;;
	esac
a555 12
kbd)
	rm -f kbd
	mknod kbd c 29 0
	chmod 666 kbd
	;;

mouse)
	rm -f mouse
	mknod mouse c 30 0
	chmod 666 mouse
	;;

d586 1
a586 9
	sh $this wsdisplay${unit} wskbd${unit} wsmouse${unit}
	;;
wsdisplay*)
	unit=${i##*[a-z]}
	rm -f wsdisplay${unit} 
	mknod wsdisplay${unit} c 67 ${unit}
	# XXX
	chmod 660 wsdisplay${unit}
	chown root.wheel wsdisplay${unit}
@


1.30
log
@Add device nodes for USB, move the console control from openfirmware to wscons.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.29 2000/03/22 07:34:30 niklas Exp $
d580 29
@


1.29
log
@operator should have perms to write and change tapes.  ch* is still missing
in some MAKEDEVs, will see to them in a separate commit.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.28 2000/02/03 03:06:54 rahnds Exp $
d58 8
a144 2
	sh $this ofdisk0 ofdisk1 ofdisk2 ofdisk3 ofdisk4 
	sh $this ofdisk5 ofdisk6 ofdisk7 ofdisk8 ofdisk9 
d155 1
a162 1
	sh $this ofdisk0 ofdisk1 ofdisk2 ofdisk3 ofdisk4 
d187 8
d440 45
d489 1
a489 1
	E)	major=25; minor=$unit ;;
@


1.28
log
@Use the correct terminal entry for Openfirmware console.
Allows visual editors to be used.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.27 1999/08/20 17:00:37 downsj Exp $
a41 1
#	ch*	SCSI media changer
d59 1
d369 1
a369 1
		chgrp operator ${name}${unit} n${name}${unit} \
d373 1
a373 1
		chmod 640 ${name}${unit} n${name}${unit} \
d394 2
a395 2
		chgrp operator ${name}${unit}
		chmod 640 ${name}${unit}
@


1.27
log
@Change the default serial port device and /var/spool/lock permissions.
/var/spool/lock becomes uucp.dialer, mode 1775, and serial devices
become uucp.dialer, mode 660.

(A couple of "dead" MAKEDEVs have been updated because they conformed the
the old permission scheme, while others have not because they didn't.)
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.26 1998/11/25 04:58:55 millert Exp $
d39 1
d135 1
d154 1
d191 1
a191 1
sd*|ccd*|ofdisk*)
d195 1
@


1.26
log
@remove bogus comment about pty use; chris@@sefl.satelnet.org
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.25 1998/11/19 08:18:58 dugsong Exp $
d293 2
a294 1
		chown uucp.wheel ttyo${unit}
d306 2
a307 1
	chown uucp.wheel tty0$unit cua0$unit
@


1.25
log
@add support for more ptys
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.24 1998/10/15 21:24:53 art Exp $
a314 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
@


1.24
log
@add missing entries for xfs in all
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.23 1998/10/10 06:25:20 rahnds Exp $
d317 11
d331 1
a331 1
	0|1|2|3|4)
@


1.23
log
@ksyms currently does not work on powerpc, to work around
this problem, dont make the device node.
This partially has to do with the fact that the powerpc port does
not try to load symbols from the kernel image.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.22 1998/09/27 04:26:52 rahnds Exp $
d146 1
a146 1
	sh $this lkm
@


1.22
log
@add ttyE support for wscons on powerpc port.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.21 1998/09/25 11:51:46 todd Exp $
d162 1
a162 1
	rm -f klog stdin stdout stderr ksyms
d175 1
a175 1
	mknod ksyms		c 43 0  ; chmod 640 ksyms ; chown root.kmem ksyms
@


1.21
log
@add xfs
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.20 1998/09/24 04:26:10 rahnds Exp $
d140 1
a140 1
	sh $this ttyo0
d145 1
d155 1
a155 1
	sh $this ttyo0
d189 1
a189 1
	umask 2 ; unit=`expr $i : '.*[^0-9]\([0-9]*\)'`
d198 32
a229 32
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + 15`
d241 1
a241 1
	umask 2 ; unit=`expr $i : 'vnd\(.*\)'`
d249 32
a280 32
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + $off + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + $off + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + $off + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + $off + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + $off + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + $off + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + $off + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + $off + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + $off + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + $off + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + $off + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + $off + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + $off + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + $off + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + $off + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + $off + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + $off + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + $off + 15`
d288 1
a288 1
	unit=`expr $i : 'ttyo\(.*\)'`
a299 1

d301 2
a302 2
	unit=`expr $i : 'tty0\(.*\)'`
	rm -f com0$unit tty0$unit cua0$unit
a307 14
ttye*)
	unit=`expr $i : 'ttye\(.*\)'`
	rm -f ttye${unit}
	rm -f ite*
	case $unit in
	0|1)
		mknod ttye${unit} c 11 ${unit}
		;;
	*)
		echo bad unit for ttye in: $i
		;;
	esac
	;;

d309 1
a309 1
	class=`expr $i : 'pty\(.*\)'`
d327 2
a328 2
			mknod tty$nam c 4 "$(( $offset + $n ))"
			mknod pty$nam c 5 "$(( $offset + $n ))"
d337 1
a337 1
	umask 2 ; unit=`expr $i : '..\(.*\)'`
d345 8
a352 8
		mknod ${name}${unit}	b $blk `expr $unit '*' 16 + 0`
		mknod n${name}${unit}	b $blk `expr $unit '*' 16 + 1`
		mknod e${name}${unit}	b $blk `expr $unit '*' 16 + 2`
		mknod en${name}${unit}	b $blk `expr $unit '*' 16 + 3`
		mknod r${name}${unit}	c $chr `expr $unit '*' 16 + 0`
		mknod nr${name}${unit}	c $chr `expr $unit '*' 16 + 1`
		mknod er${name}${unit}	c $chr `expr $unit '*' 16 + 2`
		mknod enr${name}${unit}	c $chr `expr $unit '*' 16 + 3`
d370 1
a370 1
	umask 2 ; unit=`expr $i : '..\(.*\)'`
d389 1
a389 1
	umask 2 ; unit=`expr $i : '..\(.*\)'`
d396 4
a399 4
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
d410 11
d422 1
a422 1
	unit=`expr $i : 'bpf\(.*\)'`
d438 1
a438 1
	unit=`expr $i : 'tun\(.*\)'`
d447 1
a447 1
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
d449 4
a452 4
	mknod rd${unit}a b ${blk} `expr $unit '*' 16 + 0`
	mknod rd${unit}c b ${blk} `expr $unit '*' 16 + 2`
	mknod rrd${unit}a c ${chr} `expr $unit '*' 16 + 0`
	mknod rrd${unit}c c ${chr} `expr $unit '*' 16 + 2`
d464 13
d488 1
a488 1
	unit=`expr $i : 'uk\(.*\)'`
d496 1
a496 1
	unit=`expr $i : 'ss\(.*\)'`
d521 1
@


1.20
log
@add support for tty02 and tty03 if necessary for the system.
create the "standard" com device nodes comX, tty0X, cua0X.
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.19 1998/09/16 04:18:11 rahnds Exp $
d24 1
a24 1
#	$NetBSD: MAKEDEV,v 1.17 1996/02/03 15:02:42 briggs Exp $
d27 2
a28 3
#	all	a smattering--at least one of each except
#		fd* (unimp.) and ch*
#
d30 1
a30 1
#	fd	file descriptor device nodes
d32 1
a32 1
#	raminst	for RAM disk install
d35 1
a35 1
#	st*	scsi tapes
d38 1
a38 1
#	fd*	floppy disk drives (3 1/2") (unimp.)
d40 3
a42 3
#	cd*	SCSI compact discs
#	ch*	SCSI changers
#	vnd*	vnode pseudo-disks
d44 1
a44 1
#	ccd*	concatenated disk driver
d47 1
a47 1
#	ttye*	ite consoles
d54 3
a56 1
#	grf*	Bitmapped graphics device
d59 1
a59 1
#	bpf*	packet filter
d61 2
a62 2
#	lkm	Device to for loadable kernel modules
#	*random	inkernel random number generator
d65 2
a66 1
PATH=/sbin:/bin/:/usr/bin:/usr/sbin
d69 15
d87 1
a87 1
		[0-9]) echo -n $1 ;;
d96 27
d126 4
d133 14
a146 14
	sh MAKEDEV std fd
	sh MAKEDEV sd0 sd1 sd2 sd3 st0 st1 cd0 cd1
	sh MAKEDEV ofdisk0 ofdisk1 ofdisk2 ofdisk3 ofdisk4 
	sh MAKEDEV ofdisk5 ofdisk6 ofdisk7 ofdisk8 ofdisk9 
	sh MAKEDEV vnd0 vnd1 vnd2 vnd3
	sh MAKEDEV ccd0 ccd1 ccd2 ccd3
	sh MAKEDEV rd0 ipl
	sh MAKEDEV ttyo0
	sh MAKEDEV tty00 tty01 tty02 tty03 pty0
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh MAKEDEV tun0 tun1 tun2 tun3
	sh MAKEDEV random uk0 uk1 ss0 ss1
	sh MAKEDEV lkm
	sh MAKEDEV local
d150 7
a156 7
	sh MAKEDEV std
	sh MAKEDEV sd0 sd1 sd2 sd3 sd4 st0 st1 cd0 cd1
	sh MAKEDEV ofdisk0 ofdisk1 ofdisk2 ofdisk3 ofdisk4 
	sh MAKEDEV rd0
	sh MAKEDEV ttyo0
	sh MAKEDEV random
	sh MAKEDEV tty00 tty01 pty0
d495 6
d504 1
a504 1
	test -s MAKEDEV.local && sh MAKEDEV.local
@


1.19
log
@Create some previously missing device nodes, ksyms, uk, and ss.
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.18 1998/09/16 04:04:38 rahnds Exp $
d93 1
a93 1
	sh MAKEDEV tty00 tty01 pty0
d251 1
d254 4
a257 10
	rm -f ser${unit} tty${unit} tty0${unit}
	case ${unit} in
	0|1)
		mknod tty0${unit} c 7 ${unit}
		chown uucp.wheel tty0${unit}
		;;
	*)
		echo bad unit for serial tty in: $i
		;;
	esac
@


1.18
log
@Add ipnat devices.
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.17 1998/07/19 00:16:16 rahnds Exp $
d96 1
a96 1
	sh MAKEDEV random
d113 1
a113 1
	rm -f klog stdin stdout stderr
d126 1
d433 18
@


1.17
log
@Create device nodes for powerpc port, device existed previously, just devnodes
were missing
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.16 1998/05/29 04:22:18 rahnds Exp $
d91 1
a91 1
	sh MAKEDEV rd0
d385 9
@


1.16
log
@configuration (/etc) changes causes with the changes to ofw support in
powerpc port.
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.14 1997/12/08 21:27:42 mickey Exp $
d61 1
d96 1
d107 1
d413 10
@


1.15
log
@reality check
@
text
@d86 2
d91 1
d102 1
d104 1
d135 1
a135 1
sd*|ccd*)
d139 1
d144 1
a144 1
	0|1|2|3|4|5|6)
d234 13
@


1.14
log
@fix chN (N > 0) problem
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.13 1997/10/13 14:45:06 pefo Exp $
d345 1
a345 1
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
d347 1
a347 1
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
@


1.13
log
@Monolithic kernel
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.12 1997/09/16 06:01:03 deraadt Exp $
d325 1
a325 1
		mknod ${name}${unit}	c $chr `expr $unit '*' 16 + 0`
@


1.12
log
@10 bpf devices
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.11 1997/09/07 20:29:14 dgregor Exp $
a88 1
	sh MAKEDEV grf0 grf1 grf2 grf3 ttye0
d96 1
a96 1
raminst)
d98 1
a98 1
	sh MAKEDEV sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 st0 st1 cd0 cd1
d133 2
a134 2
	sd*) name=sd; blk=4; chr=13;;
	ccd*) name=ccd; blk=16; chr=20;;
d287 1
a287 1
	st*) name=st;  chr=14; blk=5;;
d320 1
a320 1
	ch*) name=ch;  chr=17;;
d339 1
a339 1
	cd*) name=cd; blk=6; chr=15;;
a357 13
grf*)
	unit=`expr $i : 'grf\(.*\)'`
	rm -f grf${unit}
	case ${unit} in
	0|1|2|3)
		mknod grf${unit} c 10 ${unit} ; chmod 666 grf${unit}
		;;
	*)
		echo bad unit for grf in: $i
		;;
	esac
	;;

d368 1
a368 1
	mknod tun$unit c 24 $unit
d388 1
a388 1
	mknod lkm c 25 0
@


1.11
log
@In pty* rule:\n	Change 'rm -rf' to 'rm -f'\n	Fix {pty,tty}$n -> {pty,tty}$nam
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.10 1997/05/14 15:41:20 niklas Exp $
d91 1
a91 2
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh MAKEDEV bpf8 bpf9
@


1.10
log
@Make svnd nodes too, please test this on your port
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.9 1997/05/13 05:34:57 millert Exp $
d276 1
a276 1
			rm -rf {tty,pty}$n
@


1.9
log
@Only run MAKEDEV.local if it exists.  Avoids an error message
during installs where there is no MAKEDEV.local.
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.8 1997/05/11 02:18:42 deraadt Exp $
d132 1
a132 1
sd*|vnd*|ccd*)
a135 1
	vnd*) name=vnd; blk=14; chr=19;;
d173 2
a174 2
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
d180 47
@


1.8
log
@add hex() and kill awk
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.7 1997/05/11 02:14:05 deraadt Exp $
d364 1
a364 1
	sh MAKEDEV.local
@


1.7
log
@no awk
@
text
@d2 1
a2 1
#       $OpenBSD: MAKEDEV,v 1.16 1997/05/10 23:01:47 millert Exp $
d65 14
@


1.6
log
@Before creating the rd nodes, remove the old ones.
@
text
@d2 1
d111 3
a113 4
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
	 		printf("mknod %d c 21 %d;", i, i)}'`)
	chown -R bin.bin fd
d212 9
a220 5
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("rm -f tty%s%x; mknod tty%s%x c 4 %d; \
				    rm -f pty%s%x; mknod pty%s%x c 5 %d; ", \
				    n, i, n, i, b+i, n, i, n, i, b+i); }'`
@


1.5
log
@create additional disk devices in ramdisk image.
necessary to access cdrom and other devices (currently show up as disks)
@
text
@d327 1
@


1.4
log
@create the device nodes for rd in a sane way.
create disklabel proto for ramdisk
@
text
@d85 1
a85 1
	sh MAKEDEV sd0 sd1 sd2 sd3 st0 st1 cd0 cd1
@


1.3
log
@PowerPC pieces for ramdisk (rd) changes this is adds majors,
rd_root pieces, config file to generate MINIROOT with rdroot and
MAKEDEV changes as well as adding the rd device to known device types.
@
text
@d73 1
a123 1
	rd*)  name=rd;  blk=17; chr=17;;
d322 12
@


1.2
log
@remove bpfa and bpfb, didnt know how to make device with minor of 'a' and 'b'.
@
text
@d43 1
d85 1
a85 1
	sh MAKEDEV grf0 grf1 ttye0
d121 3
a123 2
	vnd*) name=vnd; blk=8; chr=19;;
	ccd*) name=ccd; blk=9; chr=20;;
@


1.1
log
@Initial revision
@
text
@d75 1
a75 1
	sh MAKEDEV bpf8 bpf9 bpfa bpfb
@


1.1.1.1
log
@Check-in of powerpc kernel support.
NOTE: This will not work until the other pieces are checked in.
This is primarily the NetBSD powerpc port, with modifications
to support ELF.
@
text
@@
