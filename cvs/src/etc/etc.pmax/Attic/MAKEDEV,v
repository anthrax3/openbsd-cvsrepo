head	1.38;
access;
symbols
	OPENBSD_2_9:1.35.0.4
	OPENBSD_2_9_BASE:1.35
	OPENBSD_2_8:1.35.0.2
	OPENBSD_2_8_BASE:1.35
	OPENBSD_2_7:1.34.0.2
	OPENBSD_2_7_BASE:1.34
	OPENBSD_2_6:1.33.0.2
	OPENBSD_2_6_BASE:1.33
	OPENBSD_2_5:1.30.0.2
	OPENBSD_2_5_BASE:1.30
	OPENBSD_2_4:1.26.0.2
	OPENBSD_2_4_BASE:1.26
	OPENBSD_2_3:1.22.0.2
	OPENBSD_2_3_BASE:1.22
	OPENBSD_2_2:1.20.0.2
	OPENBSD_2_2_BASE:1.20
	OPENBSD_2_1:1.15.0.2
	OPENBSD_2_1_BASE:1.15
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.38
date	2001.06.24.23.47.40;	author deraadt;	state dead;
branches;
next	1.37;

1.37
date	2001.06.24.23.36.07;	author kjell;	state Exp;
branches;
next	1.36;

1.36
date	2001.05.30.02.11.23;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2000.09.13.21.09.51;	author maja;	state Exp;
branches;
next	1.34;

1.34
date	2000.03.22.07.34.29;	author niklas;	state Exp;
branches;
next	1.33;

1.33
date	99.10.07.11.18.10;	author maja;	state Exp;
branches;
next	1.32;

1.32
date	99.09.19.10.09.56;	author maja;	state Exp;
branches;
next	1.31;

1.31
date	99.08.20.17.00.37;	author downsj;	state Exp;
branches;
next	1.30;

1.30
date	98.11.25.04.58.54;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	98.11.19.08.18.57;	author dugsong;	state Exp;
branches;
next	1.28;

1.28
date	98.11.09.05.56.50;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	98.11.09.05.39.59;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	98.10.15.21.24.53;	author art;	state Exp;
branches;
next	1.25;

1.25
date	98.09.25.11.28.22;	author todd;	state Exp;
branches;
next	1.24;

1.24
date	98.09.15.10.23.23;	author pattonme;	state Exp;
branches;
next	1.23;

1.23
date	98.05.10.04.02.08;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	98.01.29.15.50.24;	author graichen;	state Exp;
branches;
next	1.21;

1.21
date	98.01.26.04.19.48;	author dgregor;	state Exp;
branches;
next	1.20;

1.20
date	97.09.16.03.03.02;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	97.09.07.20.29.13;	author dgregor;	state Exp;
branches;
next	1.18;

1.18
date	97.09.07.20.01.16;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.08.20.03.39.32;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	97.07.07.08.58.14;	author graichen;	state Exp;
branches;
next	1.15;

1.15
date	97.05.14.15.41.18;	author niklas;	state Exp;
branches;
next	1.14;

1.14
date	97.05.13.05.34.56;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	97.05.11.02.21.59;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.04.23.20.39.04;	author gvf;	state Exp;
branches;
next	1.11;

1.11
date	97.02.03.10.29.13;	author graichen;	state Exp;
branches;
next	1.10;

1.10
date	97.01.19.22.30.17;	author graichen;	state Exp;
branches;
next	1.9;

1.9
date	96.12.14.18.24.01;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	96.11.11.23.20.46;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	96.09.18.22.03.46;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.28.08.55.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.07.23.06.32.59;	author etheisen;	state Exp;
branches;
next	1.4;

1.4
date	96.07.23.06.15.19;	author etheisen;	state Exp;
branches;
next	1.3;

1.3
date	96.07.15.14.59.18;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.01.07.07.41.24;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.38.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.38
log
@bye bye
@
text
@#!/bin/sh -
#
#	$OpenBSD: MAKEDEV,v 1.37 2001/06/24 23:36:07 kjell Exp $
#	@@(#)MAKEDEV	8.1 (Berkeley) 6/9/93
#

# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	tz*	SCSI tapes, DEC TK50 cartridge tape
#
# Disks:
#	rz*	SCSI disks
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#
# Terminal ports:
#	dc*	4 channel serial interface (keyboard, mouse,modem, printer)
#	scc*	82530 serial interface
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#
# Call units:
#
# Special purpose devices:
#	bpf*	Berkeley Packet Filter
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
#
# Platform-specific devices:
#	NOTE: /dev/mouse should be a link to one of the fb*'s.
#	fb*	framebuffer device
#	*random	inkernal random data source

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
{
	case $1 in
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
	esac
}
trunc ()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	echo ${arg1#$arg2}
}
unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
	done
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
	done
	echo $arg1
}

for i
do

unit=`unt $1`
[ "$unit" ] || unit=0

case $i in

all)
	sh $this std rz0 rz1 rz2 rz3 rz4 rz5 rz6 tz0 tz1
	sh $this rz8 rz9 rz10 rz11 rz12 rz13 rz14 tz2 tz3
	sh $this pty0 vnd0 vnd1 vnd2 vnd3 ccd0 ccd1 ccd2 ccd3
#	sh $this tun0 tun1 tun2 tun3
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pf
#	sh $this lkm local
	sh $this xfs0
	sh $this fb0 fb1 fb2
	sh $this random
       ;;

raminst)
	sh $this std
	sh $this rz0 rz1 rz2 rz3 rz4 tz0 tz1 rd0 pty0
	sh $this fb0 fb1 fb2
	sh $this random
	;;

std)
	mknod console		c 0 0
	mknod drum		c 1 0	; chmod 640 drum ; chown root.kmem drum
	mknod kmem		c 3 1	; chmod 640 kmem ; chown root.kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chown root.kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod zero              c 3 12  ; chmod 666 zero
	mknod tty		c 2 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 7 0	; chmod 666 stdin
	mknod stdout		c 7 1	; chmod 666 stdout
	mknod stderr		c 7 2	; chmod 666 stderr
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 7 $n; n="$(( $n + 1 ))"; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

tz*)
	umask 0 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	tz*) chr=10;;
	esac
	case $unit in
	0|1|2|3|4|5|6)
		unit0=`expr $unit \* 16`
		unit1=`expr $unit \* 16 + 1`
		unit2=`expr $unit \* 16 + 2`
		unit3=`expr $unit \* 16 + 3`
		mknod rmt$unit c $chr $unit0
		mknod nrmt$unit c $chr $unit1
		mknod rmth$unit c $chr $unit2
		mknod nrmth$unit c $chr $unit3
		chown root.operator rmt$unit nrmt$unit rmth$unit nrmth$unit
		chmod 660 rmt$unit nrmt$unit rmth$unit nrmth$unit
		;;
	*)
		echo bad unit for tape in: $1
		;;
	esac
	umask 77
	;;

pf)
	rm -f pf
	mknod pf c 73 0
	chown root.wheel pf
	chmod 600 pf
	;;

bpf*)
	unit=`expr $i : 'bpf\(.*\)'`
	rm -f bpf$unit
	mknod bpf$unit c 12 $unit
	chmod 600 bpf$unit
	chown root.wheel bpf$unit
	;;

#tun*)
#	unit=`expr $i : 'tun\(.*\)'`
#	rm -f tun$unit
#	mknod tun$unit c 111 $unit
#	chmod 600 tun$unit
#	chown root.wheel tun$unit
#	;;
#lkm)
#	rm -f lkm
#	mknod lkm c 112 0
#	chown root.kmem lkm
#	chmod 640 lkm
#	;;

rz*|ccd*)
	umask 2 ; unit=`expr $i : '.*[dz]\(.*\)'`
	case $i in
	rz*) name=rz; blk=21; chr=56;;
	ccd*) name=ccd; blk=24; chr=87;;
	esac
	case $unit in
	0|1|2|3|4|5|6|8|9|10|11|12|13|14)
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

vnd*)
	umask 2 ; unit=`expr $i : 'vnd\(.*\)'`
	for name in vnd svnd; do
		blk=2; chr=11;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + $off + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + $off + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + $off + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + $off + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + $off + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + $off + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + $off + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + $off + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + $off + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + $off + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + $off + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + $off + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + $off + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + $off + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + $off + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + $off + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + $off + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + $off + 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
	umask 77
	;;

rd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	mknod rd${unit}a b 25 `expr $unit '*' 16 + 0`
	mknod rd${unit}c b 25 `expr $unit '*' 16 + 2`
	mknod rrd${unit}a c 92 `expr $unit '*' 16 + 0`
	mknod rrd${unit}c c 92 `expr $unit '*' 16 + 2`
	chown root.operator rd${unit}[ac] rrd${unit}[ac]
	chmod 640 rd${unit}[ac] rrd${unit}[ac]
	umask 77
	;;

dc*)
	unit=`expr $i : 'dc\(.*\)'`
	case $unit in
	0)
		mknod tty00 c 16 2
		mknod tty01 c 16 3
		chown uucp.dialer tty00 tty01
		chmod 660 tty00 tty01
		;;
	*)
		echo bad unit for dc in: $i
		;;
	esac
	;;

scc*)
	unit=`expr $i : 'scc\(.*\)'`
	case $unit in
	0)
		mknod tty00 c 17 0
		mknod tty01 c 17 2
		chown uucp.dialer tty00 tty01
		chmod 660 tty00 tty01
		;;
	*)
		echo bad unit for scc in: $i
		;;
	esac
	;;

fb*)
	unit=`expr $i : 'fb\(.*\)'`
	mknod fb$unit c 86 $unit ; chmod 666 fb$unit
	;;

pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
		do
			nam=$name`hex $n`
			rm -f {tty,pty}$nam
			mknod tty$nam c 4 "$(( $offset + $n ))"
			mknod pty$nam c 5 "$(( $offset + $n ))"
			n="$(( $n + 1 ))"
		done
		umask 77
		;;
	esac
	;;

random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 88 0
	mknod srandom c 88 1
	mknod urandom c 88 2
	mknod prandom c 88 3
	mknod arandom c 88 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
	;;

uk*)
	unit=`expr $i : 'uk\(.*\)'`
	rm -f uk$unit
	mknod uk$unit c 98 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
	;;

ss*)
	unit=`expr $i : 'ss\(.*\)'`
	rm -f ss$unit
	mknod ss$unit c 99 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
	;;
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
	;;

local)
	umask 0
	test -s MAKEDEV.local && sh $this.local
	;;

*)
	echo $i: unknown device
	;;
esac
done
@


1.37
log
@Add the pf device for the shiny new packet filter
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.36 2001/05/30 02:11:23 deraadt Exp $
@


1.36
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.35 2000/09/13 21:09:51 maja Exp $
d116 1
a116 1
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
d173 7
@


1.35
log
@Add creation of ipf devices in all. -moj
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.34 2000/03/22 07:34:29 niklas Exp $
d120 1
a120 1
	sh $this random ipl
a180 9
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 91 0
	mknod ipnat c 91 1
	mknod ipstate c 91 2
	mknod ipauth c 91 3
	chown root.wheel ipl ipnat ipstate ipauth
@


1.34
log
@operator should have perms to write and change tapes.  ch* is still missing
in some MAKEDEVs, will see to them in a separate commit.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.33 1999/10/07 11:18:10 maja Exp $
d120 1
a120 1
	sh $this random
@


1.33
log
@add random in raminst -moj
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.32 1999/09/19 10:09:56 maja Exp $
d165 2
a166 1
		chmod 666 rmt$unit nrmt$unit rmth$unit nrmth$unit
@


1.32
log
@dont call std twice from all, add call to random. random is major 88 not 89. -moj
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.31 1999/08/20 17:00:37 downsj Exp $
d127 1
@


1.31
log
@Change the default serial port device and /var/spool/lock permissions.
/var/spool/lock becomes uucp.dialer, mode 1775, and serial devices
become uucp.dialer, mode 660.

(A couple of "dead" MAKEDEVs have been updated because they conformed the
the old permission scheme, while others have not because they didn't.)
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.30 1998/11/25 04:58:54 millert Exp $
d113 1
a113 1
	sh $this std rz8 rz9 rz10 rz11 rz12 rz13 rz14 tz2 tz3
d120 1
d387 5
a391 5
	mknod  random c 89 0
	mknod srandom c 89 1
	mknod urandom c 89 2
	mknod prandom c 89 3
	mknod arandom c 89 4
@


1.30
log
@remove bogus comment about pty use; chris@@sefl.satelnet.org
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.29 1998/11/19 08:18:57 dugsong Exp $
d317 2
d332 2
@


1.29
log
@add support for more ptys
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.28 1998/11/09 05:56:50 millert Exp $
a348 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
@


1.28
log
@typo
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.27 1998/11/09 05:39:59 millert Exp $
d351 11
d365 1
a365 1
	0|1|2|3|4)
@


1.27
log
@Add ramdisk support for pmax; untested but compiles
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.26 1998/10/15 21:24:53 art Exp $
d126 1
@


1.26
log
@add missing entries for xfs in all
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.25 1998/09/25 11:28:22 todd Exp $
d122 5
d296 11
@


1.25
log
@add xfs
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.24 1998/09/15 10:23:23 pattonme Exp $
d118 1
@


1.24
log
@Added definition for ipauth, a new piece for IPFilter v3.2.9
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.23 1998/05/10 04:02:08 millert Exp $
d8 2
a9 1
#	all	all devices
d12 1
d15 1
d19 4
a22 3
#	ccd*	concatenated disk driver
# Terminal multiplexors:
#	dc*	4 channel serial interface (keyboard, mouse, modem, printer)
d24 1
d27 1
d29 1
d31 1
d33 1
a33 1
#	bpf*	packet filter
d36 1
a36 1
#	uk*	unknown SCSI
d38 1
d42 1
a42 1
#	*random	random data source
d44 2
a45 1
PATH=/sbin:/bin/:/usr/bin:/usr/sbin
d48 15
d66 1
a66 1
		[0-9]) echo -n $1 ;;
d75 27
d105 4
d112 7
a118 7
	sh MAKEDEV std rz0 rz1 rz2 rz3 rz4 rz5 rz6 tz0 tz1
	sh MAKEDEV std rz8 rz9 rz10 rz11 rz12 rz13 rz14 tz2 tz3
	sh MAKEDEV pty0 vnd0 vnd1 vnd2 vnd3 ccd0 ccd1 ccd2 ccd3
#	sh MAKEDEV tun0 tun1 tun2 tun3
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
#	sh MAKEDEV lkm local
	sh MAKEDEV fb0 fb1 fb2
d381 6
d390 1
a390 1
	test -s MAKEDEV.local && sh MAKEDEV.local
@


1.23
log
@16 partitions
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.22 1998/01/29 15:50:24 graichen Exp $
d118 1
a118 1
	rm -f ipl ipnat ipstate 
d122 2
a123 1
	chown root.wheel ipl ipnat ipstate 
@


1.22
log
@create devices for the disks/tapes on a second scsi controller (asc1)
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.21 1998/01/26 04:19:48 dgregor Exp $
d147 34
a180 18
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + 1`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + 1`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + 7`
		chown root.operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
d198 34
a231 18
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + $off + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + $off + 7`
		chown root.operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
@


1.21
log
@Add /dev/ipnat and /dev/ipstate for IPF 3.2.3
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.20 1997/09/16 03:03:02 deraadt Exp $
d57 1
d146 1
a146 1
	0|1|2|3|4|5|6)
@


1.20
log
@fix bpf nodes; someone should make sure 0-9 are on all, and rm them nicely
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.19 1997/09/07 20:29:13 dgregor Exp $
d117 1
a117 1
	rm -f ipl
d119 3
a121 1
	chown root.wheel ipl
@


1.19
log
@In pty* rule:\n	Change 'rm -rf' to 'rm -f'\n	Fix {pty,tty}$n -> {pty,tty}$nam
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.18 1997/09/07 20:01:16 deraadt Exp $
d59 1
a59 1
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3
@


1.18
log
@ttyqf/ttyv0 thing is not defunct
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.17 1997/08/20 03:39:32 millert Exp $
d250 1
a250 1
			rm -rf {tty,pty}$n
@


1.17
log
@Minor numbers for tty00 and tty01 were wrong from scc*
From maximum entropy <entropy@@tardis.bernstein.com>.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.16 1997/07/07 08:58:14 graichen Exp $
a255 3
		if [ $class = 1 ]; then
			mv ttyqf ttyv0; mv ptyqf ptyv0
		fi
@


1.16
log
@correct ipl entry to match pmax's conf.c
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.15 1997/05/14 15:41:18 niklas Exp $
d218 2
a219 2
		mknod tty00 c 17 2
		mknod tty01 c 17 3
@


1.15
log
@Make svnd nodes too, please test this on your port
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.14 1997/05/13 05:34:56 millert Exp $
d117 2
a118 1
	mknod ipl c 88 0
@


1.14
log
@Only run MAKEDEV.local if it exists.  Avoids an error message
during installs where there is no MAKEDEV.local.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.13 1997/05/11 02:21:59 deraadt Exp $
d135 1
a135 1
rz*|vnd*|vn*|ccd*)
a138 1
	vn*) name=vnd; blk=2; chr=11;;
d166 31
@


1.13
log
@hex () and kill awk
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.12 1997/04/23 20:39:04 gvf Exp $
d264 1
a264 1
	sh MAKEDEV.local
@


1.12
log
@Fix vnd nodes.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.11 1997/02/03 10:29:13 graichen Exp $
d37 14
d77 2
a78 3
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
			printf("mknod %d c 7 %d;", i, i)}'`)
d215 9
a223 5
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("mknod tty%s%x c 4 %d;" \
					"mknod pty%s%x c 5 %d; ", \
					n, i, b+i, n, i, b+i); }'`
@


1.11
log
@also create rz5 and rz6 devices on the pmax
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.10 1997/01/19 22:30:17 graichen Exp $
a132 2
		if [ $name != vnd ]
		then
a146 1
		fi
@


1.10
log
@bring MAKEDEV and disktab up to date with NetBSD (plus local changes)
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.9 1996/12/14 18:24:01 millert Exp $
d42 1
a42 1
	sh MAKEDEV std rz0 rz1 rz2 rz3 rz4 tz0 tz1
@


1.9
log
@/dev/fd should be owned by root.wheel
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.8 1996/11/11 23:20:46 kstailey Exp $
d8 1
d31 2
a32 5
#	NOTE: /dev/mouse should be a link to one of these for X windows.
#	pm*	raw interface to PMAX graphics devices
#	cfb*	raw interface to turbochannel PMAG-BA color frame buffer
#	xcfb*	raw interface to maxine graphics devices
#	mfb*	raw interface to mono graphics devices
d41 9
d186 3
a188 46
pm*)
	unit=`expr $i : 'pm\(.*\)'`
	case $unit in
	0)
		mknod pm0 c 8 0
		;;
	*)
		echo bad unit for pm in: $i
		;;
	esac
	;;

cfb*)
	unit=`expr $i : 'cfb\(.*\)'`
	case $unit in
	0)
		mknod cfb0 c 13 0
		;;
	*)
		echo bad unit for cfb in: $i
		;;
	esac
	;;

xcfb*)
	unit=`expr $i : 'xcfb\(.*\)'`
	case $unit in
	0)
		mknod xcfb0 c 14 0
		;;
	*)
		echo bad unit for xcfb in: $i
		;;
	esac
	;;

mfb*)
	unit=`expr $i : 'mfb\(.*\)'`
	case $unit in
	0)
		mknod mfb0 c 18 0
		;;
	*)
		echo bad unit for mfb in: $i
		;;
	esac
@


1.8
log
@Updates for SCSI scanner and SCSI unknown devices.
Removed MI *dev_decl() stuff that is now in sys/conf.h
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.7 1996/09/18 22:03:46 deraadt Exp $
d59 1
a59 1
	chown -R bin.bin fd
@


1.7
log
@do not use chgrp
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.6 1996/08/28 08:55:27 deraadt Exp $
d27 2
d263 19
@


1.6
log
@fix all random device node entry stuff
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.5 1996/07/23 06:32:59 etheisen Exp $
d43 3
a45 3
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 3 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chgrp kmem mem
d141 1
a141 1
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
@


1.5
log
@OpenBSD'ify
@
text
@d3 1
a3 1
#	$OpenBSD$
d33 1
a33 1
#	*rnd	random data source
d252 9
a260 8
rnd|srnd|urnd|prnd)
	rm -f rnd urnd srnd prnd
	mknod  rnd c 89 0
	mknod srnd c 89 1
	mknod urnd c 89 2
	mknod prnd c 89 3
	chown root.wheel rnd srnd urnd prnd
	chmod 644 rnd srnd urnd prnd
@


1.4
log
@Backslash continuation of literal strings causes nawk to barf.
@
text
@d3 1
@


1.3
log
@ad rnd devices.
@
text
@d240 2
a241 2
				printf("mknod tty%s%x c 4 %d; \
					mknod pty%s%x c 5 %d; ", \
@


1.2
log
@created devices for the IP filter log on all architectures
@
text
@d32 1
d249 10
@


1.1
log
@Initial revision
@
text
@d92 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
