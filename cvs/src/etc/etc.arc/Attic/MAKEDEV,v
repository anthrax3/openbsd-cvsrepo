head	1.37;
access;
symbols
	OPENBSD_2_9:1.34.0.6
	OPENBSD_2_9_BASE:1.34
	OPENBSD_2_8:1.34.0.4
	OPENBSD_2_8_BASE:1.34
	OPENBSD_2_7:1.34.0.2
	OPENBSD_2_7_BASE:1.34
	OPENBSD_2_6:1.32.0.2
	OPENBSD_2_6_BASE:1.32
	OPENBSD_2_5:1.30.0.2
	OPENBSD_2_5_BASE:1.30
	OPENBSD_2_4:1.28.0.2
	OPENBSD_2_4_BASE:1.28
	OPENBSD_2_3:1.22.0.2
	OPENBSD_2_3_BASE:1.22
	OPENBSD_2_2:1.21.0.2
	OPENBSD_2_2_BASE:1.21
	OPENBSD_2_1:1.19.0.2
	OPENBSD_2_1_BASE:1.19
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	PEFO960729:1.1.1.1
	PEFO:1.1.1;
locks; strict;
comment	@# @;


1.37
date	2001.06.24.23.47.27;	author deraadt;	state dead;
branches;
next	1.36;

1.36
date	2001.06.24.23.35.58;	author kjell;	state Exp;
branches;
next	1.35;

1.35
date	2001.05.30.02.11.13;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2000.03.22.08.08.52;	author niklas;	state Exp;
branches;
next	1.33;

1.33
date	2000.03.22.07.34.28;	author niklas;	state Exp;
branches;
next	1.32;

1.32
date	99.08.20.17.00.34;	author downsj;	state Exp;
branches;
next	1.31;

1.31
date	99.07.30.18.49.36;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	98.11.25.04.58.53;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	98.11.19.08.18.56;	author dugsong;	state Exp;
branches;
next	1.28;

1.28
date	98.09.25.11.11.58;	author todd;	state Exp;
branches;
next	1.27;

1.27
date	98.09.25.10.40.58;	author todd;	state Exp;
branches;
next	1.26;

1.26
date	98.09.15.10.23.22;	author pattonme;	state Exp;
branches;
next	1.25;

1.25
date	98.09.11.16.21.04;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	98.08.24.05.29.51;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	98.05.05.05.54.50;	author imp;	state Exp;
branches;
next	1.22;

1.22
date	98.01.26.04.19.37;	author dgregor;	state Exp;
branches;
next	1.21;

1.21
date	97.09.16.06.00.52;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.09.07.20.29.09;	author dgregor;	state Exp;
branches;
next	1.19;

1.19
date	97.05.21.18.30.50;	author pefo;	state Exp;
branches;
next	1.18;

1.18
date	97.05.18.13.42.37;	author pefo;	state Exp;
branches;
next	1.17;

1.17
date	97.05.14.18.31.15;	author niklas;	state Exp;
branches;
next	1.16;

1.16
date	97.05.14.15.41.08;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	97.05.13.05.34.49;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	97.05.11.02.18.41;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.05.04.02.03.02;	author imp;	state Exp;
branches;
next	1.12;

1.12
date	97.04.30.22.04.26;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.04.23.20.39.01;	author gvf;	state Exp;
branches;
next	1.10;

1.10
date	97.04.07.11.49.42;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.12.14.18.23.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	96.09.18.22.03.39;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.09.18.08.46.57;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	96.09.02.11.37.45;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	96.08.29.17.43.18;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.28.08.55.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.26.11.03.49;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.08.09.00.25.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.30.20.42.43;	author pefo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.07.30.20.42.43;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.37
log
@bye bye
@
text
@#!/bin/sh -
#	$OpenBSD: MAKEDEV,v 1.36 2001/06/24 23:35:58 kjell Exp $
#	@@(#)MAKEDEV	8.1 (Berkeley) 6/9/93
#

# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	makes all devices for a ramdisk kernel
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	wd*	ISA "winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	rd*	"ramdisk" pseudo-disks
#	ccd*	concatenated disk devices
#
# Console ports:
#	ttyC0	pccons
#
# Pointing devices:
#	pms*	PS/2 compatible mouse
#
# Terminal ports:
#	tty*	tty ports
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#	lpt*	stock lp
#
# Call units:
#
# Special purpose devices:
#	ch*	SCSI media changer
#	bpf*	Berkeley Packet Filter
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	joy*	joystick driver
#	*random	inkernal random data source
#
# Platform-specific devices:
#

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
{
	case $1 in
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
	esac
}
trunc ()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	echo ${arg1#$arg2}
}
unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
	done
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
	done
	echo $arg1
}

for i
do

unit=`unt $i`
[ "$unit" ] || unit=0

case $i in

all)
	sh $this std fd fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 cd0 ss0
	sh $this ccd0 ccd1 ccd2 xfs0
	sh $this vnd0 vnd1 vnd2 vnd3 tty00 tty01 tty02 tty03 pty0 pty1
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this pf tun0 tun1 tun2
	sh $this ttyC0 lpt0 pms0 random uk0 uk1 local joy0 joy1
	;;

joy*)
	unit=`expr $i : 'joy\(.*\)'`
	rm -f joy$unit
	mknod joy$unit c 26 $unit
	chown root.wheel joy$unit
	chmod 666 joy$unit
	;;

ramdisk)
	sh $this std fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 cd0 
	sh $this tty00 tty01 ttyC0 lpt0 random rd0
	;;

std)
	mknod console		c 0 0
	mknod drum		c 1 0	; chmod 640 drum ; chown root.kmem drum
	mknod kmem		c 3 1	; chmod 640 kmem ; chown root.kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chown root.kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod zero		c 3 12  ; chmod 666 zero
	mknod tty		c 2 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 7 0	; chmod 666 stdin
	mknod stdout		c 7 1	; chmod 666 stdout
	mknod stderr		c 7 2	; chmod 666 stderr
	mknod ksyms		c 35 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

ttyC*)
	unit=`expr $i : 'ttyC\(.*\)'`
	rm -f ttyC$unit
	mknod ttyC$unit c 14 $unit
	chown root.wheel ttyC$unit
	case $unit in
	0)
		rm -f pccons
		ln -s ttyC0 pccons
		;;
	esac
	;;

pms*)
	unit=`expr $i : '.ms\(.*\)'`
	unit=`expr $unit \* 2 + 1`
	case $i in
	pms*) name=pms; chr=15;;
	esac
	rm -f $name$unit
	mknod $name$unit c $chr $unit
	chown root.wheel $name$unit
	;;

fd)
	rm -rf fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 7 $n; n="$(( $n + 1 ))"; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

st*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
	case $i in
	st*) name=st; chr=10;;
	esac
	case $unit in
	0|1|2|3|4|5|6)
		unit0=`expr $unit \* 16`
		unit1=`expr $unit \* 16 + 1`
		unit2=`expr $unit \* 16 + 4`
		unit3=`expr $unit \* 16 + 5`
		mknod r${name}${unit} c $chr $unit0
		mknod nr${name}${unit} c $chr $unit1
		mknod r${name}h${unit} c $chr $unit2
		mknod nr${name}h${unit} c $chr $unit3
		chown root.operator r${name}${unit} nr${name}${unit} \
			r${name}h${unit} nr${name}h${unit}
		chmod 660 r${name}${unit} nr${name}${unit} \
			r${name}h${unit} nr${name}h${unit}
		;;
	*)
		echo bad unit for tape in: $1
		;;
	esac
	umask 77
	;;

ch*)
	umask 2
	name=ch; chr=36
	rm -f $name$unit
	mknod ${name}${unit}	c $chr $unit
	chown root.operator ${name}${unit}
	chmod 660 ${name}${unit}
	umask 77
	;;

bpf*|tun*)
	unit=`expr $i : '...\(.*\)'`
	case $i in
	bpf*) name=bpf; chr=12;;
	tun*) name=tun; chr=40;;
	esac
	rm -f $name$unit
	mknod $name$unit c $chr $unit
	chown root.wheel $name$unit
	;;

pf)
	rm -f pf
	mknod pf c 73 0
	chown root.wheel pf
	chmod 600 pf
	;;

rd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	mknod rd${unit}a b 8 `expr $unit '*' 16 + 0`
	mknod rd${unit}c b 8 `expr $unit '*' 16 + 2`
	mknod rrd${unit}a c 22 `expr $unit '*' 16 + 0`
	mknod rrd${unit}c c 22 `expr $unit '*' 16 + 2`
	chown root.operator rd${unit}[ac] rrd${unit}[ac]
	chmod 640 rd${unit}[ac] rrd${unit}[ac]
	umask 77
	;;

#lkm)
#	rm -f lkm
#	mknod lkm c 112 0
#	chown root.kmem lkm
#	chmod 640 lkm
#	;;

ccd*|fd*|sd*|wd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	case $i in
	ccd*) name=ccd; blk=6; chr=23;;
	sd*) name=sd; blk=0; chr=9;;
	fd*) name=fd; blk=7; chr=13;;
	wd*) name=wd; blk=4; chr=18;;
	esac
	rm -f $name$unit r$name$unit
	case $unit in
	0|1|2|3|4|5|6)
	    mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + 0`
	    mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + 0`
	    mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + 2`
	    mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + 2`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + 1`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + 15`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + 1`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + 15`
	    chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	    chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	    ;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

vnd*)
	umask 2 ; unit=`expr $i : 'vnd\(.*\)'`
	for name in vnd svnd; do
		blk=2; chr=11;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 16 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 16 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 16 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 16 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 16 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 16 + $off + 7`
		mknod ${name}${unit}i	b $blk `expr $unit '*' 16 + $off + 8`
		mknod ${name}${unit}j	b $blk `expr $unit '*' 16 + $off + 9`
		mknod ${name}${unit}k	b $blk `expr $unit '*' 16 + $off + 10`
		mknod ${name}${unit}l	b $blk `expr $unit '*' 16 + $off + 11`
		mknod ${name}${unit}m	b $blk `expr $unit '*' 16 + $off + 12`
		mknod ${name}${unit}n	b $blk `expr $unit '*' 16 + $off + 13`
		mknod ${name}${unit}o	b $blk `expr $unit '*' 16 + $off + 14`
		mknod ${name}${unit}p	b $blk `expr $unit '*' 16 + $off + 15`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 16 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 16 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 16 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 16 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 16 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 16 + $off + 7`
		mknod r${name}${unit}i	c $chr `expr $unit '*' 16 + $off + 8`
		mknod r${name}${unit}j	c $chr `expr $unit '*' 16 + $off + 9`
		mknod r${name}${unit}k	c $chr `expr $unit '*' 16 + $off + 10`
		mknod r${name}${unit}l	c $chr `expr $unit '*' 16 + $off + 11`
		mknod r${name}${unit}m	c $chr `expr $unit '*' 16 + $off + 12`
		mknod r${name}${unit}n	c $chr `expr $unit '*' 16 + $off + 13`
		mknod r${name}${unit}o	c $chr `expr $unit '*' 16 + $off + 14`
		mknod r${name}${unit}p	c $chr `expr $unit '*' 16 + $off + 15`
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
	umask 77
	;;

cd*)
	umask 2 ; unit=`expr $i : '.*cd\(.*\)'`
	case $i in
	cd*) name=cd; blk=3; chr=8;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a   b $blk `expr $unit '*' 16 + 0`
	mknod ${name}${unit}c   b $blk `expr $unit '*' 16 + 2`
	mknod r${name}${unit}a  c $chr `expr $unit '*' 16 + 0`
	mknod r${name}${unit}c  c $chr `expr $unit '*' 16 + 2`
	chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	umask 77
	;;

uk*)
	unit=`expr $i : 'uk\(.*\)'`
	rm -f uk$unit
	mknod uk$unit c 32 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
	;;

ss*)
	unit=`expr $i : 'ss\(.*\)'`
	rm -f ss$unit
	mknod ss$unit c 34 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
	;;

lpt*)
	unit=`expr $i : 'lpt\(.*\)'`
	rm -f lpt$unit
	mknod lpt$unit c 16 $unit
	chown root.wheel lpt$unit
	;;

tty*)
	unit=`expr $i : '...\(.*\)'`
	rm -f tty$unit cua$unit
	mknod tty$unit c 17 $unit
	mknod cua$unit c 17 `expr $unit + 128`
	chown uucp.dialer tty$unit cua$unit
	chmod 660 tty$unit cua$unit
	;;

pty*)
	class=`expr $i : 'pty\(.*\)'`
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
		do
			nam=$name`hex $n`
			rm -f {tty,pty}$nam
			mknod tty$nam c 4 "$(( $offset + $n ))"
			mknod pty$nam c 5 "$(( $offset + $n ))"
			n="$(( $n + 1 ))"
		done
		umask 77
		;;
	esac
	;;

random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 32 0
	mknod srandom c 32 1
	mknod urandom c 32 2
	mknod prandom c 32 3
	mknod arandom c 32 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
	;;
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
	;;

local)
	umask 0
	test -s MAKEDEV.local && sh $this.local
	;;

*)
	echo $i: unknown device
	;;
esac
done
@


1.36
log
@Add the pf device for the shiny new packet filter
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.35 2001/05/30 02:11:13 deraadt Exp $
@


1.35
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.34 2000/03/22 08:08:52 niklas Exp $
d125 1
a125 1
	sh $this tun0 tun1 tun2
d237 7
@


1.34
log
@ch* creation on platforms which had them in conf.c but missed them in MAKEDEV
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.33 2000/03/22 07:34:28 niklas Exp $
d125 1
a125 1
	sh $this ipl tun0 tun1 tun2
a236 9
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 31 0
	mknod ipnat c 31 1
	mknod ipstate c 31 2
	mknod ipauth c 31 3
	chown root.wheel ipl ipnat ipstate ipauth
@


1.33
log
@operator should have perms to write and change tapes.  ch* is still missing
in some MAKEDEVs, will see to them in a separate commit.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.32 1999/08/20 17:00:34 downsj Exp $
d43 1
d215 10
@


1.32
log
@Change the default serial port device and /var/spool/lock permissions.
/var/spool/lock becomes uucp.dialer, mode 1775, and serial devices
become uucp.dialer, mode 660.

(A couple of "dead" MAKEDEVs have been updated because they conformed the
the old permission scheme, while others have not because they didn't.)
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.31 1999/07/30 18:49:36 deraadt Exp $
d207 1
a207 1
		chmod 640 r${name}${unit} nr${name}${unit} \
@


1.31
log
@no more acd
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.30 1998/11/25 04:58:53 millert Exp $
d401 2
a402 1
	chown uucp.wheel tty$unit cua$unit
@


1.30
log
@remove bogus comment about pty use; chris@@sefl.satelnet.org
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.29 1998/11/19 08:18:56 dugsong Exp $
a20 1
#	acd*	ISA ATAPI cdrom drives
d120 1
a120 1
	sh $this std fd fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 acd0 cd0 ss0
d137 1
a137 1
	sh $this std fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 acd0 cd0 
d355 1
a355 1
cd*|acd*)
a358 1
	acd*) name=acd; blk=6; char=19;;
@


1.29
log
@add support for more ptys
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.28 1998/09/25 11:11:58 todd Exp $
a412 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
@


1.28
log
@sync
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.26 1998/09/15 10:23:22 pattonme Exp $
d415 11
d429 1
a429 1
	0|1|2|3|4)
@


1.27
log
@add xfs
@
text
@d17 1
a17 1
#	fd*	Floppy disks
d122 1
a122 1
	sh $this ccd0 ccd1 ccd2
@


1.26
log
@Added definition for ipauth, a new piece for IPFilter v3.2.9
@
text
@d2 1
a2 2
#
#	$OpenBSD: MAKEDEV,v 1.24 1998/08/24 05:29:51 millert Exp $
d7 2
a8 1
#	all	makes all known devices
d17 1
a17 1
#	fd*	floppy disk drives
d19 3
a21 3
#	wd*	IDE disks
#	cd*	SCSI CD rom
#	acd*	IDE CDROM.
d24 1
a24 1
#	ccd*	contatenated disk devices
d32 1
a32 1
# Terminal multiplexors:
d39 1
a39 1
#	lpt*	centronics lpt
d44 1
a44 1
#	bpf*	packet filter
d48 1
a48 1
#	*random	random data source
d53 2
a54 1
PATH=/sbin:/bin/:/usr/bin:/usr/sbin
d57 15
d75 1
a75 1
		[0-9]) echo -n $1 ;;
d84 27
d114 4
d121 6
a126 6
	sh MAKEDEV std fd fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 acd0 cd0 ss0
	sh MAKEDEV ccd0 ccd1 ccd2
	sh MAKEDEV vnd0 vnd1 vnd2 vnd3 tty00 tty01 tty02 tty03 pty0 pty1
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh MAKEDEV ipl tun0 tun1 tun2
	sh MAKEDEV ttyC0 lpt0 pms0 random uk0 uk1 local joy0 joy1
d138 2
a139 2
	sh MAKEDEV std fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 acd0 cd0 
	sh MAKEDEV tty00 tty01 ttyC0 lpt0 random rd0
d444 6
d453 1
a453 1
	test -s MAKEDEV.local && sh MAKEDEV.local
@


1.25
log
@do not make /dev/ksyms, arc does not load the symbol table yet
@
text
@d107 1
d183 1
a183 1
	rm -f ipl ipnat ipstate
d187 2
a188 1
	chown root.wheel ipl ipnat ipstate 
@


1.24
log
@Add support for /dev/ksyms to arch-specific files
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.23 1998/05/05 05:54:50 imp Exp $
a106 1
	mknod ksyms		c 35 0  ; chmod 640 ksyms ; chown root.kmem ksyms
@


1.23
log
@add joy0 and joy1
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.22 1998/01/26 04:19:37 dgregor Exp $
d107 1
@


1.22
log
@Add /dev/ipnat and /dev/ipstate for IPF 3.2.3
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.21 1997/09/16 06:00:52 deraadt Exp $
d47 1
d79 9
a87 1
	sh MAKEDEV ttyC0 lpt0 pms0 random uk0 uk1 local
@


1.21
log
@10 bpf devices
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.20 1997/09/07 20:29:09 dgregor Exp $
d173 1
a173 1
	rm -f ipl
d175 3
a177 1
	chown root.wheel ipl
@


1.20
log
@In pty* rule:\n	Change 'rm -rf' to 'rm -f'\n	Fix {pty,tty}$n -> {pty,tty}$nam
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.19 1997/05/21 18:30:50 pefo Exp $
d76 2
a77 1
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 ipl tun0 tun1 tun2
@


1.19
log
@Don't make /dev/mouse. Leave that as an exercise for X install.
Some devices where missing (not made...)
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.18 1997/05/18 13:42:37 pefo Exp $
d363 1
a363 1
			rm -rf {tty,pty}$n
@


1.18
log
@ARC ramdisk install stuff
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.17 1997/05/14 18:31:15 niklas Exp $
d8 2
d74 4
a77 2
	sh MAKEDEV vnd0 vnd1 vnd2 vnd3 tty00 tty01 pty0 pty1
	sh MAKEDEV ttyC0 lpt0 pms0 random bpf0 local
d114 1
a120 2
	rm -f mouse
	ln -s $name$unit mouse
d171 6
d195 2
a196 2
fd*|sd*|wd*)
	umask 2 ; unit=`expr $i : '..\(.*\)'`
d198 1
d309 8
@


1.17
log
@Add vnds to the all target
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.16 1997/05/14 15:41:08 niklas Exp $
d76 5
d168 11
a178 1
#	;;
@


1.16
log
@Make svnd nodes too, please test this on your port
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.15 1997/05/13 05:34:49 millert Exp $
d71 2
a72 1
	sh MAKEDEV std fd fd0 wd0 wd1 wd2 wd3 sd0 sd1 sd2 st0 acd0 cd0 ss0 tty00 tty01 pty0 pty1
@


1.15
log
@Only run MAKEDEV.local if it exists.  Avoids an error message
during installs where there is no MAKEDEV.local.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.14 1997/05/11 02:18:41 deraadt Exp $
d170 1
a170 1
fd*|sd*|vnd*|wd*)
a173 1
	vnd*) name=vnd; blk=2; chr=11;;
d219 47
@


1.14
log
@add hex() and kill awk
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.13 1997/05/04 02:03:02 imp Exp $
d306 1
a306 1
	sh MAKEDEV.local
@


1.13
log
@Add wd (IDE) and acd (atapi) devices and make them by default
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.12 1997/04/30 22:04:26 niklas Exp $
d52 14
d117 2
a118 3
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
			printf("mknod %d c 7 %d;", i, i)}'`)
d279 9
a287 5
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("rm -f tty%s%x; mknod tty%s%x c 4 %d;" \
				    "rm -f pty%s%x; mknod pty%s%x c 5 %d; ", \
				    n, i, n, i, b+i, n, i, n, i, b+i); }'`
@


1.12
log
@Recognize SCSI scanner device (and create ss0 in "all")
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.10 1997/04/07 11:49:42 deraadt Exp $
d17 1
d19 1
d57 1
a57 1
	sh MAKEDEV std fd fd0 sd0 sd1 sd2 st0 cd0 ss0 tty00 tty01 pty0 pty1
d157 1
a157 1
fd*|sd*|vnd*)
d163 1
d210 1
a210 1
cd*)
d214 1
@


1.11
log
@Fix vnd nodes.
@
text
@d55 1
a55 1
	sh MAKEDEV std fd fd0 sd0 sd1 sd2 st0 cd0 tty00 tty01 pty0 pty1
d220 11
@


1.10
log
@cd has 16 partitions, plus other misc
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.9 1996/12/14 18:23:51 millert Exp $
a168 1
	    if [ $name != vnd ]; then
a196 1
	    fi
@


1.9
log
@/dev/fd should be owned by root.wheel
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.8 1996/09/18 22:03:39 deraadt Exp $
d54 4
a57 4
all)        
        sh MAKEDEV std fd fd0 sd0 sd1 sd2 st0 cd0 tty00 tty01 pty0 pty1
        sh MAKEDEV ttyC0 lpt0 pms0 random bpf0 local
        ;;
d65 1
a65 1
	mknod zero              c 3 12  ; chmod 666 zero
d165 2
d169 1
a169 3
	    if [ $name != vnd ]
	    then
		mknod ${name}${unit}a	b $blk `expr $unit '*' 16 + 0`
a183 1
		mknod r${name}${unit}a	c $chr `expr $unit '*' 16 + 0`
d214 7
a220 7
	rm -f $name$unit? r$name$unit? 
	mknod ${name}${unit}a   b $blk `expr $unit '*' 8 + 0`
	mknod ${name}${unit}c   b $blk `expr $unit '*' 8 + 2`
	mknod r${name}${unit}a  c $chr `expr $unit '*' 8 + 0`
	mknod r${name}${unit}c  c $chr `expr $unit '*' 8 + 2`
	chown root.operator ${name}${unit}[a-h] r${name}${unit}[a-h]
	chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h] 
d223 1
a223 1
        
d254 4
a257 4
                        for (i = 0; i < 16; i++)
                                printf("rm -f tty%s%x; mknod tty%s%x c 4 %d;" \
                                    "rm -f pty%s%x; mknod pty%s%x c 5 %d; ", \
                                    n, i, n, i, b+i, n, i, n, i, b+i); }'`
@


1.8
log
@do not use chgrp
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.7 1996/09/18 08:46:57 pefo Exp $
d104 1
a104 1
	chown -R bin.bin fd
@


1.7
log
@Create all 16 partitions.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.6 1996/09/02 11:37:45 pefo Exp $
d61 3
a63 3
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 3 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chgrp kmem mem
d124 1
a124 1
		chgrp operator r${name}${unit} nr${name}${unit} \
d200 1
a200 1
	    chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
d220 1
a220 1
	chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
@


1.6
log
@mousetrap...
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.5 1996/08/29 17:43:18 deraadt Exp $
d165 4
a168 4
		mknod ${name}${unit}c	b $blk `expr $unit '*' 16 + 2`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 16 + 2`
		if [ $name != vnd ]
		then
d176 8
d191 12
a202 4
		fi
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
@


1.5
log
@support cua devices
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.4 1996/08/28 08:55:21 deraadt Exp $
d89 1
a89 1
	mms*) name=mms; chr=15;;
d94 1
@


1.4
log
@fix all random device node entry stuff
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.3 1996/08/26 11:03:49 pefo Exp $
d55 1
a55 1
        sh MAKEDEV std fd fd0 sd0 sd1 sd2 st0 cd0 tty0 tty1 pty0 pty1
d217 4
a220 3
	rm -f tty0$unit
	mknod tty0$unit c 17 $unit
	chown uucp.wheel tty0$unit
@


1.3
log
@Distance between sd/st/cd etc is now 16
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.2 1996/08/09 00:25:01 deraadt Exp $
d43 1
a43 1
#	*rnd	random data source
d56 1
a56 1
        sh MAKEDEV ttyC0 lpt0 pms0 rnd bpf0 local
d246 9
a254 8
rnd|srnd|urnd|prnd)
	rm -f rnd urnd srnd prnd
	mknod  rnd c 32 0
	mknod srnd c 32 1
	mknod urnd c 32 2
	mknod prnd c 32 3
	chown root.wheel rnd srnd urnd prnd
	chmod 644 rnd srnd urnd prnd
@


1.2
log
@console device becomes ttyC0 (ttyC0-9 for pcvt) to avoid pty conflict
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.1.1.1 1996/07/30 20:42:43 pefo Exp $
d56 1
a56 1
        sh MAKEDEV ttyC0 lpt0 pms0 rnd local
d164 2
a165 2
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + 2`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + 2`
d168 14
a181 14
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + 1`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + 1`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + 7`
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.4 1996/07/23 06:32:58 etheisen Exp $
d23 1
a23 1
#	ttyv0	pccons
d56 1
a56 1
        sh MAKEDEV ttyv0 lpt0 pms0 rnd local
d73 5
a77 5
ttyv*)
	unit=`expr $i : 'ttyv\(.*\)'`
	rm -f ttyv$unit
	mknod ttyv$unit c 14 $unit
	chown root.wheel ttyv$unit
d81 1
a81 1
		ln -s ttyv0 pccons
@


1.1.1.1
log
@Add etc files for the arc port.
@
text
@@
