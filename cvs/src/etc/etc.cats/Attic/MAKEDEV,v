head	1.39;
access;
symbols
	OPENBSD_4_1:1.35.0.2
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.31.0.2
	OPENBSD_4_0_BASE:1.31
	OPENBSD_3_9:1.28.0.2
	OPENBSD_3_9_BASE:1.28
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8;
locks; strict;
comment	@# @;


1.39
date	2007.08.01.21.23.25;	author miod;	state dead;
branches;
next	1.38;

1.38
date	2007.05.28.22.29.56;	author todd;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.27.02.00.19;	author todd;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.26.20.19.33;	author todd;	state Exp;
branches;
next	1.35;

1.35
date	2007.03.07.02.58.41;	author krw;	state Exp;
branches;
next	1.34;

1.34
date	2007.02.16.02.16.33;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2006.12.15.21.03.55;	author kettenis;	state Exp;
branches;
next	1.32;

1.32
date	2006.10.10.12.58.03;	author todd;	state Exp;
branches;
next	1.31;

1.31
date	2006.08.28.21.23.33;	author tsi;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.15.18.20.57;	author todd;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.15.02.21.30;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2005.12.27.19.03.08;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.06.06.43.58;	author otto;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.04.18.34.29;	author otto;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.04.18.12.00;	author otto;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.04.07.40.34;	author otto;	state Exp;
branches;
next	1.23;

1.23
date	2005.08.01.22.22.37;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2005.06.02.20.13.59;	author tholo;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.13.22.54.23;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2005.03.01.13.37.09;	author otto;	state Exp;
branches;
next	1.19;

1.19
date	2005.02.07.08.23.41;	author david;	state Exp;
branches;
next	1.18;

1.18
date	2005.02.07.06.24.45;	author david;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.28.18.59.42;	author danh;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.10.07.58.00;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.28.15.21.51;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.19.07.05.49;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.03.18.40.16;	author grange;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.30.08.24.11;	author grange;	state Exp;
branches;
next	1.11;

1.11
date	2004.05.29.04.08.52;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.04.11.18.15.22;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.04.11.18.06.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.12.04.54.32;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.20.19.13.48;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.16.19.05.05;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.14.17.24.58;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.13.23.35.03;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.11.21.29.31;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.10.01.35.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.01.05.27.25;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Retire OpenBSD/cats. Hardware is nice but prone to catch fire, and the firmware
is anything but useful. Nevertheless this was a very good platform to use as
an OpenBSD/*arm* starting point, but nowadays this platform is not necessary
anymore.

Somehow these CATS motherboard are just like AUI hubs, with the difference that,
when my AUI hub caught fire, 10base5 support was not removed from the networking
code.
@
text
@#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.18 2007/05/28 22:26:02 todd Exp 
#	OpenBSD: MAKEDEV.common,v 1.34 2007/05/18 14:05:33 jmc Exp 
#	OpenBSD: MAKEDEV.mi,v 1.77 2005/10/06 06:43:19 otto Exp 
#	OpenBSD: MAKEDEV.sub,v 1.14 2005/02/07 06:14:18 david Exp 
#
#
# Copyright (c) 2001-2004 Todd T. Fries <todd@@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	Ramdisk kernel devices
#	std	Standard devices
#	local	Configuration specific devices
# Disks:
#	ccd*	Concatenated disk devices
#	cd*	ATAPI and SCSI CD-ROM drives
#	ch*	SCSI media changers
#	raid*	RAIDframe disk devices
#	rd*	"rd" pseudo-disks
#	sd*	SCSI disks, including flopticals
#	vnd*	"file" pseudo-disk devices
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
# Tapes:
#	st*	SCSI tape drives
# Terminal ports:
#	tty[0-7][0-9a-f]	NS16x50 serial ports
# Pseudo terminals:
#	ptm	pty master device
#	pty*	Set of 62 master pseudo terminals
#	tty*	Set of 62 slave pseudo terminals
# Console ports:
#	wscons	Minimal wscons devices
#	ttyC-J*	wscons display devices
#	wskbd*	wscons keyboards
#	wsmouse*	wscons mice
#	wsmux	wscons keyboard/mouse mux devices
# USB devices:
#	uall	All USB devices
#	ttyU*	USB serial ports
#	ugen*	Generic USB devices
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	urio*	Diamond Multimedia Rio 500
#	usb*	Bus control devices used by usbd for attach/detach
#	uscanner*	Scanners
# Special purpose devices:
#	audio*	Audio devices
#	bio	ioctl tunnel pseudo-device
#	bktr*	Video frame grabbers
#	bpf*	Berkeley Packet Filter
#	crypto	Hardware crypto access driver
#	fd	fd/* nodes
#	iop*	I2O controller devices
#	lkm	Loadable kernel modules interface
#	pci*	PCI bus devices
#	pf*	Packet Filter
#	radio*	FM tuner devices
#	*random	In-kernel random data source
#	tun*	Network tunnel driver
#	speaker	PC speaker
#	ss*	SCSI scanners
#	systrace*	System call tracing device
#	tuner*	Tuner devices
#	uk*	Unknown SCSI devices
#	xfs*	XFS filesystem node
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

alph2d()
{
	local t="$1"
	local p="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local sub=${p%${t}*}
	echo ${#sub}
}

h2d()
{
	local s="$1"
	local f=${s%*[0-9a-f]} n=${s#[0-9a-f]*}

	echo $(($(_h2d $f)*16+ $(_h2d $n) ))
}

_h2d()
{
	case $1 in
	[0-9]) echo -n $1;;
	a) echo -n 10;;
	b) echo -n 11;;
	c) echo -n 12;;
	d) echo -n 13;;
	e) echo -n 14;;
	f) echo -n 15;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640 operator
		M r$1$2$d	c $4 $(($n+$count)) 640 operator
		let count=count+1
	done
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist[0]="rm -f"

mkl() {
	mklist[${#mklist[*]}]=";mknod -m $1 $2 $3 $4 $5"
}

M() {
	RMlist[${#RMlist[*]}]=$1
	mkl ${5-666} $1 $2 $3 $4
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist[${#MKlist[*]}]=";chown $7:$G $1"
	} || {
		case $G in
		wheel)
			[ ${#whlist[*]} = 0 ] && whlist[0]=";chgrp wheel"
			whlist[${#whlist[*]}]="$1"
		;;
		operator)
			[ ${#oplist[*]} = 0 ] && oplist[0]=";chgrp operator"
			oplist[${#oplist[*]}]="$1"
		;;
		*)
			MKlist[${#MKlist[*]}]=";chgrp $G $1";
		esac
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 7 0
	M stdout	c 7 1
	M stderr	c 7 2
	M ksyms		c 8 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	M xf86		c 2 4 600
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

uk*)
	M uk$U c 28 $U 640 operator
	;;

tuner*)
	M tuner$U c 75 $(($(($U*2))+16)) 644
	;;

systrace)
	M systrace c 50 0 644
	;;

ss*)
	M ss$U c 29 $(($U*16)) 640 operator
	M nss$U c 29 $(($(($U*16))+1)) 640 operator
	M enss$U c 29 $(($(($U*16))+3)) 640 operator
	RMlist[${#RMlist[*]}]="scan$U"
	MKlist[${#MKlist[*]}]=";umask 77;ln -s ss$U scan$U"
	;;

speaker)
	M speaker c 99 0 600
	;;

tun*)
	M tun$U c 33 $U 600
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 40 $n 644
		n=$(($n+1))
	done
	;;

radio*)
	M radio$U     c 97 $U
	MKlist[${#MKlist[*]}]=";[ -e radio ] || ln -s radio$U radio"
	;;

pf*)
	M pf c 39 0 600
	;;

pci*)
	M pci$U	c 88 $U 600
	MKlist[${#MKlist[*]}]=";[ -h pci ] || ln -sf pci0 pci"
	;;

lkm)
	M lkm c 35 0 640 _lkm
	;;

iop*)
	M iop$U c 73 $U 660
	;;

fd)
	RMlist[${#RMlist[*]}]=";mkdir -p fd;rm -f" n=0
	while [ $n -lt 64 ];do M fd/$n c 7 $n;n=$(($n+1));done
	MKlist[${#MKlist[*]}]=";chmod 555 fd"
	;;

crypto)
	M crypto c 47 0
	;;

bpf*)
	M bpf$U c 22 $U 600
	;;

bktr*)
	M bktr$U c 75 $U 644
	;;

bio)
	M bio c 52 0 600
	;;

audio*)
	M sound$U	c 36 $U
	M mixer$U	c 36 $(($U+16))
	M audio$U	c 36 $(($U+128))
	M audioctl$U	c 36 $(($U+192))
	MKlist[${#MKlist[*]}]=";[ -e audio ] || ln -s audio$U audio"
	MKlist[${#MKlist[*]}]=";[ -e mixer ] || ln -s mixer$U mixer"
	MKlist[${#MKlist[*]}]=";[ -e sound ] || ln -s sound$U sound"
	MKlist[${#MKlist[*]}]=";[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

uscanner*)
	M uscanner$U c 69 $U 660
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 64 $U 660
	;;

urio*)
	M urio$U c 67 $U 660
	;;

ulpt*)
	M ulpt$U c 66 $U 660
	;;

uhid*)
	M uhid$U c 65 $U 660
	;;

ugen*)
	n=$(($U*16))
	for j in 0{0,1,2,3,4,5,6,7,8,9} 1{0,1,2,3,4,5}
	do
		M ugen$U.$j c 70 $(($n+10#$j)) 660
	done
	;;

ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 68 $o 660 dialer uucp
	M cuaU$U c 68 $(($o+128)) 660 dialer uucp
	;;

uall)
	R ttyU0 ttyU1 ttyU2 ttyU3 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1
	R uhid2 uhid3 uscanner0 urio0 usb0 usb1 usb2 usb3 usb4 usb5
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 63 0 600
	M wskbd c 63 1 600
	;;

wsmouse*)
	M wsmouse$U c 62 $U 600
	;;

wskbd*)
	M wskbd$U c 61 $U 600
	;;

tty[C-J]*)
	U=${i##tty[C-J]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	ttyG*) n=G m=1024;;
	ttyH*) n=H m=1280;;
	ttyI*) n=I m=1536;;
	ttyJ*) n=J m=1792;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 60 $((16#$U+$m)) 600;;
	cfg) M tty${n}cfg c 60 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wskbd0 wskbd1 wskbd2
	R wskbd3 wsmux ttyCcfg ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5
	R ttyC6 ttyC7 ttyC8 ttyC9 ttyCa ttyCb
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A letters p q r s t u v w x y z P Q R S T
	set -A suffixes 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q \
	    r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X \
	    Y Z

	name=${letters[$U]}
	n=0
	while [ $n -lt 62 ]
	do
		nam=$name${suffixes[$n]}
		off=$(($U*62))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

ptm)
	M ptm c 98 0 666
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 54 $o 660 dialer uucp
	M cua$U c 54 $(($o+128)) 660 dialer uucp
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 25 $n 660 operator
		M ${pre}rst$U	c 25 $n 660 operator
		n=$(($n+1))
	done
	;;

vnd*)
	dodisk vnd $U 19 19 $U 0
	dodisk svnd $U 19 19 $U 2048
	;;

rd*)
	dodisk2 rd $U 18 18 $U 0
	;;

ch*)
	M ch$U c 27 $U 660 operator
	;;

cd*)
	dodisk2 cd $U 26 26 $U 0
	;;

local)
	test -s $T.local && sh $T.local
	;;

ramdisk)
	R pty0 rd0 cd0 cd1 st0 st1 wd0 wd1 wd2 wd3 wd4 sd0 sd1 sd2
	R sd3 sd4 tty00 tty01 bpf0 std
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bio bpf0 bpf1 bpf2 bpf3 bpf4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 xfs0 ss0 ss1 ch0 ptm local
	R wscons pci0 pci1 pci2 pci3 iop0 iop1 uall tuner0 radio0
	R speaker audio0 uk0 random lkm tty00 tty01 tty02 tty03 crypto
	R pf systrace wd0 wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0
	R st1 fd
	;;

wd*|sd*|raid*|ccd*)
	case $i in
	wd*) dodisk wd $U 16 16 $U 0;;
	sd*) dodisk sd $U 24 24 $U 0;;
	raid*) dodisk raid $U 71 71 $U 0;;
	ccd*) dodisk ccd $U 21 21 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@@"
{
echo -n ${RMlist[*]}
echo -n ${mklist[*]}
echo -n ${MKlist[*]}
echo -n ${whlist[*]}
echo ${oplist[*]}
} | if [ "$eo" = "echo" ]; then
        cat
else
	sh
fi
@


1.38
log
@sync
@
text
@@


1.37
log
@sync
@
text
@d6 1
a6 1
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.17 2007/05/27 01:50:35 todd Exp 
d67 1
d307 4
d472 1
a472 1
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
@


1.36
log
@sync
@
text
@d6 1
a6 1
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.16 2007/05/26 19:54:23 todd Exp 
a66 1
#	bio	ioctl tunnel pseudo-device
a305 4
bio)
	M bio c 52 0 600
	;;

d467 1
a467 1
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bio bpf0 bpf1 bpf2 bpf3 bpf4
@


1.35
log
@regen
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.15 2006/07/28 17:37:10 kettenis Exp 
#	OpenBSD: MAKEDEV.common,v 1.33 2007/03/07 02:51:17 krw Exp 
d26 1
d67 1
d307 4
d472 1
a472 1
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
@


1.34
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.32 2007/02/16 02:16:20 deraadt Exp 
d276 1
a276 1
	MKlist[${#MKlist[*]}]=";[ -e pci ] || ln -s pci0 pci"
@


1.33
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.31 2006/12/15 20:42:19 kettenis Exp 
@


1.32
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.30 2006/10/10 12:33:41 todd Exp 
d72 1
a72 1
#	pci	PCI bus device
d274 3
a276 2
pci)
	M pci c 88 0 600
d468 4
a471 3
	R wscons pci iop0 iop1 uall tuner0 radio0 speaker audio0 uk0
	R random lkm tty00 tty01 tty02 tty03 crypto pf systrace wd0
	R wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.31
log
@Resync MAKEDEV scripts and man pages
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.29 2006/08/28 21:04:04 tsi Exp 
d352 2
a353 2
	R ttyU0 ttyU1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R uscanner0 urio0 usb0 usb1 usb2 usb3 usb4 usb5
@


1.30
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.12 2006/03/15 02:20:28 deraadt Exp 
#	OpenBSD: MAKEDEV.common,v 1.25 2006/04/15 18:19:12 todd Exp 
d51 1
a51 1
#	ttyC-F*	wscons display devices
d275 1
a275 1
	M pci c 71 0 600
d369 2
a370 2
tty[C-F]*)
	U=${i##tty[C-F]}
d376 4
@


1.29
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.23 2005/12/27 19:02:42 miod Exp 
d456 1
a456 1
	R sd3 sd4 bpf0 std
@


1.28
log
@Regen
@
text
@d6 1
a6 1
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.11 2005/08/01 22:22:13 deraadt Exp 
a221 1
	M reload	c 2 20 640 kmem
@


1.27
log
@regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.21 2005/10/06 06:43:19 otto Exp 
d50 1
a50 1
#	ttyC0	Minimal wscons devices
d69 1
a69 1
#	fd	fd/* nodes for fdescfs
@


1.26
log
@regen
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.common,v 1.20 2005/08/01 22:22:12 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.76 2005/10/04 18:33:52 otto Exp 
d171 1
a171 2
RMlist="rm -f"
MKlist=":"
d174 1
a174 6
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
d178 1
a178 1
	RMlist="$RMlist $1"
d182 1
a182 1
		MKlist="$MKlist;chown $7:$G $1"
d185 10
a194 1
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;_lkm)g=61;;
a195 6
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
d245 2
a246 2
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
d268 1
a268 1
	MKlist="$MKlist;[ -e radio ] || ln -s radio$U radio"
d288 1
a288 1
	RMlist="mkdir -p fd;$RMlist" n=0
d290 1
a290 1
	MKlist="$MKlist;chmod 555 fd"
d310 4
a313 4
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
d485 8
a492 10
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" ]; then
	$eo "$list"
d494 1
a494 1
	echo "$list" | sh
@


1.25
log
@regen
@
text
@d8 1
a8 1
#	OpenBSD: MAKEDEV.mi,v 1.75 2005/10/04 18:11:10 otto Exp 
d154 1
a154 1
		M $1$2$d	b $3 $(($n+$count)) 640 operaror
@


1.24
log
@regen
@
text
@d8 1
a8 1
#	OpenBSD: MAKEDEV.mi,v 1.74 2005/10/04 07:39:37 otto Exp 
a150 1
	RMlist="$RMlist $1$2? r$1$2?"
d154 2
a155 2
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
a157 1
	MKlist="$MKlist;chown root:operator $1$2? r$1$2?"
@


1.23
log
@sync
@
text
@d8 1
a8 1
#	OpenBSD: MAKEDEV.mi,v 1.73 2005/02/07 06:14:18 david Exp 
a187 1
	mklist="$mklist $1"
@


1.22
log
@Regen
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.10 2005/05/13 22:53:58 miod Exp 
#	OpenBSD: MAKEDEV.common,v 1.18 2005/06/02 20:09:38 tholo Exp 
@


1.21
log
@Regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.17 2005/03/29 16:40:08 miod Exp 
@


1.20
log
@regen
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.9 2004/09/28 15:19:49 drahn Exp 
#	OpenBSD: MAKEDEV.common,v 1.16 2005/03/01 13:35:59 otto Exp 
d77 1
a77 1
#	uk*	Unknown SCSI devices
d81 1
d235 4
d255 2
a256 2
uk*)
	M uk$U c 28 $U 640 operator
d470 3
a472 3
	R wscons pci iop0 iop1 uall tuner0 radio0 audio0 uk0 random
	R lkm tty00 tty01 tty02 tty03 crypto pf systrace wd0 wd1 wd2
	R wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.19
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.15 2005/01/28 18:56:27 danh Exp 
d355 1
a355 1
	R uscanner0 urio0 usb0 usb1 usb2 usb3
@


1.18
log
@sync
@
text
@d8 2
a9 2
#	OpenBSD: MAKEDEV.mi,v 1.72 2004/02/16 18:58:53 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.13 2005/01/28 18:51:38 danh Exp 
@


1.17
log
@sync
@
text
@d103 1
a103 1
	local t="$1"  
@


1.16
log
@regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.13 2005/01/10 07:53:57 dlg Exp 
d9 1
a9 1
#	OpenBSD: MAKEDEV.sub,v 1.12 2004/02/20 19:13:01 miod Exp 
d340 1
a340 1
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
d342 1
a342 1
		M ugen$U.$j c 70 $(($n+$j)) 660
d380 1
a380 1
	[0-9a-f]) M tty$n$U c 60 $(( 16#$U + $m )) 600;;
@


1.15
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.12 2004/08/19 07:05:20 miod Exp 
d350 1
@


1.14
log
@Regen.
@
text
@d6 1
a6 1
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.8 2004/04/11 18:05:23 millert Exp 
d223 1
a223 1
	M ksyms		c 43 0 640 kmem
@


1.13
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.10 2004/06/03 18:36:59 grange Exp 
d77 1
a77 1
#	uk*	SCSI unknown devices
@


1.12
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.9 2004/05/30 08:17:17 grange Exp 
@


1.11
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.8 2004/05/29 04:07:30 deraadt Exp 
@


1.10
log
@regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.7 2004/04/11 18:14:59 millert Exp 
d354 1
a354 1
	R uscanner0 urio0 usb0 usb1
@


1.9
log
@Regen for for pty changes (62 per letter instead of just 16)
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.6 2004/04/11 18:05:22 millert Exp 
d47 2
a48 2
#	pty*	Set of 62 pseudo terminals
tty_dev
@


1.8
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.7 2004/03/12 04:54:05 deraadt Exp 
#	OpenBSD: MAKEDEV.common,v 1.4 2004/03/12 04:54:04 deraadt Exp 
d47 2
a48 2
#	pty*	Set of 16 master pseudo terminals
#	tty*	Set of 16 slave pseudo terminals
d396 6
a401 2
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
d403 1
a403 1
	while [ $n -lt 16 ]
d405 2
a406 2
		nam=$name$(hex $n)
		off=$(($U*16))
d463 4
a466 4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0 ss0 ss1 ch0 ptm
	R local wscons pci iop0 iop1 uall tuner0 radio0 audio0 uk0
	R random lkm tty00 tty01 tty02 tty03 crypto pf systrace wd0
	R wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.7
log
@Regen; except for alpha, the only changes are in comments.
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.6 2004/02/16 19:01:01 miod Exp 
#	OpenBSD: MAKEDEV.common,v 1.3 2004/02/20 19:13:01 miod Exp 
d56 1
a56 1
#	usbs	All USB devices
d352 1
a352 1
usbs)
d460 1
a460 1
	R local wscons pci iop0 iop1 usbs tuner0 radio0 audio0 uk0
@


1.6
log
@Regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.1 2004/02/16 18:58:54 miod Exp 
d9 1
a9 1
#	OpenBSD: MAKEDEV.sub,v 1.11 2004/02/16 18:58:53 miod Exp 
d34 1
a34 1
#	cd*	SCSI cdrom drives
d38 1
a38 1
#	sd*	SCSI disks
@


1.5
log
@sync
@
text
@d6 4
a9 3
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.5 2004/02/14 17:24:31 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.71 2004/02/14 17:24:30 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.10 2004/02/14 17:24:31 todd Exp 
d29 3
a31 6
#	std	standard devices
#	fd	makes fd/* for the fdescfs
#	local	configuration specific devices
#	ramdisk	makes all devices for a ramdisk kernel
# Tapes:
#	st*	SCSI tapes
d33 1
a33 2
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	sd*	SCSI disks
d35 2
a36 1
#	ch*	SCSI media changer
d38 11
a48 3
#	vnd*	"file" pseudo-disks
#	raid*	RAIDframe disk devices
#	ccd*	concatenated disk devices
d50 2
a51 2
#	ttyC0	wscons screen 0
#	ttyC-F*	wscons virtual consoles
a54 5
# Terminal ports:
#	tty[0-7][0-9a-f]	NS16x50 serial ports
# Pseudo terminals:
#	tty*	set of 16 slave pseudo terminals
#	pty*	set of 16 master pseudo terminals
d56 3
a58 1
#	usb*	Bus control devices used by usbd for attach/detach
d62 1
a62 1
#	ttyU*	Serial ports
a63 1
#	ugen*	Generic device
d65 2
a66 2
#	audio*	audio device
#	apm		power management device
d68 10
a77 4
#	tun*	network tunnel driver
#	lkm	loadable kernel modules interface
#	*random	inkernel random data source
#	uk*	SCSI Unknown device
d79 3
a81 11
#	xfs*	XFS filesystem devices
#	iop*	I2O controller device
#	pf*	Packet Filter
#	crypto	hardware crypto access driver
#	usbs	make USB devices
#	pci	PCI bus device
#	systrace*	system call tracing device
#	bktr*	video capturing
#	tuner*	tuner device
#	radio*	FM tuner device
#	ptm	pty master device
d230 2
a231 7
ptm)
	M ptm c 98 0 666
	;;

radio*)
	M radio$U     c 97 $U
	MKlist="$MKlist;[ -e radio ] || ln -s radio$U radio"
a237 4
bktr*)
	M bktr$U c 75 $U 644
	;;

a241 25
pci)
	M pci c 71 0 600
	;;

usbs)
	R ttyU0 ttyU1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R uscanner0 urio0 usb0 usb1
	;;

crypto)
	M crypto c 47 0
	;;

pf*)
	M pf c 39 0 600
	;;

iop*)
	M iop$U c 73 $U 660
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

d254 4
d267 13
d284 12
a295 2
tun*)
	M tun$U c 33 $U 600
d302 2
a303 3
apm*)
	M apm	c 25 0 644
	M apmctl	c 25 8 644
a316 8
ugen*)
	n=$(($U*16))
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		M ugen$U.$j c 70 $(($n+$j)) 660
	done
	;;

d321 3
a323 4
ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 68 $o 660 dialer uucp
d338 6
a343 3
usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 64 $U 660
d346 4
a349 16
pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
d352 3
a354 5
tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 54 $o 660 dialer uucp
	M cua$U c 54 $(($o+128)) 660 dialer uucp
d391 39
d447 2
a448 8
st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 25 $n 660 operator
		M ${pre}rst$U	c 25 $n 660 operator
		n=$(($n+1))
	done
a455 10
local)
	test -s $T.local && sh $T.local
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 7 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

d461 2
a462 2
	R random lkm tty00 tty01 tty02 tty03 apm crypto pf systrace
	R wd0 wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.4
log
@Regen.
@
text
@d6 3
a8 3
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.4 2004/02/13 23:34:21 miod Exp 
#	OpenBSD: MAKEDEV.mi,v 1.70 2004/02/13 23:34:13 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.9 2004/01/12 22:18:24 todd Exp 
d11 1
a11 1
# Copyright (c) 2001,2002,2003 Todd T. Fries <todd@@OpenBSD.org>
@


1.3
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.3 2004/02/11 21:28:14 drahn Exp 
#	OpenBSD: MAKEDEV.mi,v 1.68 2004/02/10 01:31:20 millert Exp 
a49 3
#	ttyE?	Workstation console (framebuffer & keyboard) tty emulators
#_DEV(fcom, 54)
#_DEV(com, 12)
d52 1
a52 1
#	tty*	set of 16 slave psuedo terminals
a229 8
ttyE*)
	type=E
	case $type in
	E)	major=25; minor=$unit ;;
	esac
	M tty$type$unit c $major $minor 660
	;;

d447 2
a448 2
	R pty0 ttyE0 rd0 cd0 cd1 st0 st1 wd0 wd1 wd2 wd3 wd4 sd0 sd1
	R sd2 sd3 sd4 bpf0 std
@


1.2
log
@sync
@
text
@d6 1
a6 1
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.2 2004/02/10 01:31:20 millert Exp 
d418 2
a419 2
	[0-9a-f]) M tty$n$U c 67 $(( 16#$U + $m )) 600;;
	cfg) M tty${n}cfg c 67 $((255+$m)) 600;;
@


1.1
log
@Generated MAKEDEV (sync)
@
text
@d6 2
a7 2
#	OpenBSD: etc.cats/MAKEDEV.md,v 1.1 2004/02/01 05:26:50 drahn Exp 
#	OpenBSD: MAKEDEV.mi,v 1.66 2004/01/13 15:13:14 todd Exp 
d84 1
d241 4
d475 1
a475 1
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0 ss0 ss1 ch0
a496 16
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
d505 1
a505 1
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
@

