head	1.25;
access;
symbols
	OPENBSD_5_5:1.24.0.34
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.30
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.28
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.26
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.24
	OPENBSD_5_0:1.24.0.22
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.20
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.18
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.14
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.16
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.12
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.10
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.8
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.6
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.4
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.21.0.16
	OPENBSD_3_9_BASE:1.21
	OPENBSD_3_8:1.21.0.14
	OPENBSD_3_8_BASE:1.21
	OPENBSD_3_7:1.21.0.12
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.10
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.21.0.8
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.21.0.6
	OPENBSD_3_4_BASE:1.21
	OPENBSD_3_3:1.21.0.4
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.20.0.4
	OPENBSD_3_1_BASE:1.20
	OPENBSD_3_0:1.20.0.2
	OPENBSD_3_0_BASE:1.20
	OPENBSD_2_9:1.18.0.4
	OPENBSD_2_9_BASE:1.18
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@# @;


1.25
date	2014.03.17.17.07.45;	author deraadt;	state dead;
branches;
next	1.24;

1.24
date	2006.07.30.18.02.01;	author david;	state Exp;
branches;
next	1.23;

1.23
date	2006.07.19.06.10.17;	author fkr;	state Exp;
branches;
next	1.22;

1.22
date	2006.07.12.07.46.41;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2002.06.09.06.15.15;	author todd;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.12.19.35.31;	author brian;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.02.12.24.44;	author brian;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.17.14.37.53;	author brian;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.26.18.35.05;	author brian;	state Exp;
branches;
next	1.16;

1.16
date	2000.01.23.02.25.48;	author brian;	state Exp;
branches;
next	1.15;

1.15
date	99.08.17.15.02.03;	author brian;	state Exp;
branches;
next	1.14;

1.14
date	99.07.27.23.48.38;	author brian;	state Exp;
branches;
next	1.13;

1.13
date	99.05.31.00.21.57;	author brian;	state Exp;
branches;
next	1.12;

1.12
date	99.04.27.00.25.07;	author brian;	state Exp;
branches;
next	1.11;

1.11
date	99.03.28.00.24.52;	author brian;	state Exp;
branches;
next	1.10;

1.10
date	98.11.03.23.12.09;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	98.10.03.13.12.40;	author brian;	state Exp;
branches;
next	1.8;

1.8
date	98.09.23.07.30.58;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	98.09.06.14.01.32;	author brian;	state Exp;
branches;
next	1.6;

1.6
date	98.08.31.00.26.11;	author brian;	state Exp;
branches;
next	1.5;

1.5
date	97.12.31.03.59.50;	author brian;	state Exp;
branches;
next	1.4;

1.4
date	97.12.30.23.36.08;	author brian;	state Exp;
branches;
next	1.3;

1.3
date	97.12.27.07.22.15;	author brian;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.12.10.27;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.39;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.39;	author brian;	state Exp;
branches;
next	;


desc
@@


1.25
log
@the userland ppp(9) code goes awa.  Having too much ppp choice in the
tree results in one-true-ppp not coming into existance.  This code is
essentially un-audited and quite dangerous.
ok claudio sthen
@
text
@#################################################################
#
#  	PPP  Sample Configuration File
#
#	  Originally written by Toshiharu OHNO
#
# $OpenBSD: ppp.conf.sample,v 1.24 2006/07/30 18:02:01 david Exp $
#
#################################################################

# This file is separated into sections.  Each section is named with
# a label starting in column 0 and followed directly by a ``:''.  The
# section continues until the next section.  Blank lines and lines
# beginning with ``#'' are ignored.
#
# Lines beginning with "!include" will ``include'' another file.  You
# may want to ``!include ~/.ppp.conf'' for backwards compatibility.
#

# Default setup. Always executed when PPP is invoked.
#  This section is *not* loaded by the ``load'' or ``dial'' commands.
#
#  This is the best place to specify your modem device, its DTR rate,
#  and any logging specification.  Logging specs should be done first
#  so that subsequent commands are logged.
#
default:
 set log Phase Chat LCP IPCP CCP tun command
 set device /dev/cua01
 set speed 115200
 set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"

# Client side PPP
#
#  Although the PPP protocol is a peer to peer protocol, we normally
#  consider the side that makes the connection as the client and the
#  side that receives the connection as the server.  Authentication
#  is required by the server either using a unix-style login procedure
#  or by demanding PAP or CHAP authentication from the client.
#

# An on demand example where we have dynamic IP addresses:
#  If the peer assigns us an arbitrary IP (most ISPs do this) and we
#  can't predict what their IP will be either, take a wild guess at
#  some IPs that you can't currently route to.
#
#  The /0 bit in "set ifaddr" says that we insist on 0 bits of the
#  specified IP actually being correct, therefore, the other side can assign
#  any IP numbers.
#
#  The fourth arg to "set ifaddr" makes us send "0.0.0.0" as our requested
#  IP number, forcing the peer to make the decision.
#
#  This entry also works with static IP numbers or when not in -auto mode.
#  The ``add'' line adds a `sticky' default route that will be updated if
#  and when any of the IP numbers are changed in IPCP negotiations.
#  The "set ifaddr" is required in -auto mode.
#
#  Finally, the ``enable dns'' bit tells ppp to ask the peer for the
#  nameserver addresses that should be used.  This isn't always supported
#  by the other side, but if it is, /etc/resolv.conf will automatically be
#  updated.
#
pmdemand:
 set phone 1234567
 set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp"
 set timeout 120
 set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
 add default HISADDR
 enable dns

# When we want to use PAP or CHAP instead of using a unix-style login
# procedure, we do the following.  Note, the peer suggests whether we
# should send PAP or CHAP.  By default, we send whatever we're asked for.
#
PAPorCHAPpmdemand:
 set phone 1234567
 set login
 set authname MyName
 set authkey MyKey
 set timeout 120
 set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
 add default HISADDR
 enable dns

# On demand dialup example with static IP addresses:
#  Here, the local side uses 192.244.185.226 and the remote side
#  uses 192.244.176.44.
#
#  # ppp -auto ondemand
#
#  With static IP numbers, our setup is similar to dynamic:
#  Remember, ppp.linkup is searched for a "192.244.176.44" label, then
#  a "ondemand" label, and finally the "MYADDR" label.
#
ondemand:
 set phone 1234567
 set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp"
 set timeout 120
 set ifaddr 192.244.185.226 192.244.176.44
 add default HISADDR
 enable dns

# To connect via a GPRS or UMTS device (e.g. a mobile phone or a PC Card),
# it's often necessary to set the access-point name (in this case 'internet')
# which requires quotes in the dial string. This section shows the escaping
# required. Devices that have not already authenticated the SIM card (like a
# PC Card) need to issue the "AT+CPIN=xxxx" (xxxx being the PIN for the SIM
# card) first.
# For certain devices it is necessary to adjust the baud rate (speed setting)
# and/or change the dial string to "*99***1#".
# UMTS devices often allow control of the connect mode (UMTS only, GPRS only
# or default to which is available); this can be controlled with the number
# passed to the AT+CGDCONT command and is device dependant.
# Some ISPs do special things in their IPCP session in order to negotiate
# the IP addresses; in this case it may be necessary to play with the ifaddr
# setting.
# See also: com(4), ubsa(4), ucom(4) and umodem(4)
#
mobile:
 set device /dev/cuaU0
 set dial "ABORT ERROR ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \
           \"\" ATZ OK-ATZ-OK AT+CGDCONT=1,\\\"IP\\\",\\\"internet\\\" OK \\dATD\\T TIMEOUT 40 CONNECT"
 set phone "*99#"
 set speed 115200
 set login
 set timeout 0
 set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
 add default HISADDR
 enable dns

#                          Example segments
#
# The following lines may be included as part of your configuration
# section and aren't themselves complete.  They're provided as examples
# of how to achieve different things.

examples:
# Multi-phone example.  Numbers separated by a : are used sequentially.
# Numbers separated by a | are used if the previous dial or login script
# failed.  Usually, you will prefer to use only one of | or :, but both
# are allowed.
#
    set phone 12345678|12345679:12345670|12345671
#
# Ppp can accept control instructions from the ``pppctl'' program.
# First, you must set up your control socket.  It's safest to use
# a UNIX domain socket, and watch the permissions:
#
    set server /var/tmp/internet MySecretPassword 0177
#
# Although a TCP port may be used if you want to allow control
# connections from other machines:
#
    set server 6670 MySecretpassword
#
# If you don't like ppp's builtin chat, use an external one:
#
    set login "\"!chat \\\\-f /etc/ppp/ppp.dev.chat\""
#
# If we have a ``strange'' modem that must be re-initialized when we
# hangup:
#
    set hangup "\"\" AT OK-AT-OK ATZ OK"
#
# To adjust logging withouth blasting the setting in default:
#
    set log -command +tcp/ip
#
# To see log messages on the screen in interactive mode:
#
    set log local LCP IPCP CCP
#
# If you're seeing a lot of magic number problems and failed connections,
# try this (see the man page):
#
    set openmode active 5
#
# For noisy lines, we may want to reconnect (up to 20 times) after loss
# of carrier, with 3 second delays between each attempt:
#
    set reconnect 3 20
#
# When playing server for M$ clients, tell them who our NetBIOS name
# servers are:
#
    set nbns 10.0.0.1 10.0.0.2
#
# Inform the client if they ask for our DNS IP numbers:
#
    enable dns
#
# If you don't want to tell them what's in your /etc/resolv.conf file
# with `enable dns', override the values:
#
    set dns 10.0.0.1 10.0.0.2
#
# If we're using the -alias switch, redirect ftp and http to an internal
# machine:
#
    alias port 10.0.0.2:ftp ftp
    alias port 10.0.0.2:http http
#
# or don't trust the outside at all
#
    alias deny_incoming yes
#
# I trust user brian to run ppp, so this goes in the `default' section:
#
    allow user brian
#
# But label `internet' contains passwords that even brian can't have, so
# I empty out the user access list in that section so that only root can
# have access:
#
    allow users
#
# I also may wish to set up my ppp login script so that it asks the client
# for the label they wish to use.  I may only want user ``dodgy'' to access
# their own label in direct mode:
#
dodgy:
    allow user dodgy
    allow mode direct
#
# If we don't want ICMP and DNS packets to keep the connection alive:
#
    set filter alive 0 deny icmp
    set filter alive 1 deny udp src eq 53
    set filter alive 2 deny udp dst eq 53
    set filter alive 3 permit 0 0
#
# And we don't want ICMPs to cause a dialup:
#
    set filter dial 0 deny icmp
    set filter dial 1 permit 0 0
#
# or any TCP SYN or RST packets (badly closed TCP channels):
#
    set filter dial 2 deny 0 0 tcp syn finrst
#
# Once the line's up, allow connections for ident (113), telnet (23),
# ftp (20 & 21), DNS (53), my place of work (192.244.191.0/24),
# ICMP (ping) and traceroute (>33433).
#
# Anything else is blocked by default
#
    set filter in  0 permit tcp dst eq 113
    set filter out 0 permit tcp src eq 113
    set filter in  1 permit tcp src eq 23 estab
    set filter out 1 permit tcp dst eq 23
    set filter in  2 permit tcp src eq 21 estab
    set filter out 2 permit tcp dst eq 21
    set filter in  3 permit tcp src eq 20 dst gt 1023
    set filter out 3 permit tcp dst eq 20
    set filter in  4 permit udp src eq 53
    set filter out 4 permit udp dst eq 53
    set filter in  5 permit 192.244.191.0/24 0/0
    set filter out 5 permit 0/0 192.244.191.0/24
    set filter in  6 permit icmp
    set filter out 6 permit icmp
    set filter in  7 permit udp dst gt 33433
    set filter out 7 permit udp dst gt 33433

#
# ``dodgynet'' is an example intended for an autodial configuration which
# is connecting a local network to a host on an untrusted network.
dodgynet:
    # Log link uptime
    set log Phase
    # For autoconnect only
    allow modes auto
    # Define modem device and speed
    set device /dev/cua01
    set speed 115200
    # Don't support LQR
    deny lqr
    # Remote system phone number, login and password
    set phone 0W1194
    set authname pppLogin
    set authkey MyPassword
    # Chat script to dial remote system
    set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" ATZ OK-ATZ-OK \
              ATE1Q0M0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
    # Chat script to login to remote Unix system
    set login "TIMEOUT 10 \"\" \"\" gin:--gin: \\U word: \\P"
    # Drop the link after 15 minutes of inactivity
    # Inactivity is defined by the `set filter alive' line below
    set timeout 900
    # Hard-code remote system to appear within local subnet and use proxy arp
    # to make this system the gateway
    set ifaddr 172.17.20.247 172.17.20.248 255.255.240.0
    enable proxy

    # Allow any TCP packet to keep the link alive
    set filter alive 0 permit tcp

    # Only allow dialup to be triggered by http, rlogin, rsh, telnet, ftp or
    # private TCP ports 24 and 4000
    set filter dial  0 7      0 0 tcp dst eq http
    set filter dial  1 7      0 0 tcp dst eq login
    set filter dial  2 7      0 0 tcp dst eq shell
    set filter dial  3 7      0 0 tcp dst eq telnet
    set filter dial  4 7      0 0 tcp dst eq ftp
    set filter dial  5 7      0 0 tcp dst eq 24
    set filter dial  6 deny ! 0 0 tcp dst eq 4000
    # From hosts on a couple of local subnets to the remote peer
    # If the remote host allowed IP forwarding and we wanted to use it, the
    # following rules could be split into two groups to separately validate
    # the source and destination addresses.
    set filter dial  7 permit 172.17.16.0/20  172.17.20.248
    set filter dial  8 permit 172.17.36.0/22  172.17.20.248
    set filter dial  9 permit 172.17.118.0/26 172.17.20.248
    set filter dial 10 permit 10.123.5.0/24   172.17.20.248

    # Once the link's up, limit outgoing access to the specified hosts
    set filter out  0 4      172.17.16.0/20  172.17.20.248
    set filter out  1 4      172.17.36.0/22  172.17.20.248
    set filter out  2 4      172.17.118.0/26 172.17.20.248
    set filter out  3 deny ! 10.123.5.0/24   172.17.20.248
    # Allow established TCP connections
    set filter out  4 permit 0 0 tcp estab
    # And new connections to http, rlogin, rsh, telnet, ftp and ports
    # 24 and 4000
    set filter out  5 permit 0 0 tcp dst eq http
    set filter out  6 permit 0 0 tcp dst eq login
    set filter out  7 permit 0 0 tcp dst eq shell
    set filter out  8 permit 0 0 tcp dst eq telnet
    set filter out  9 permit 0 0 tcp dst eq ftp
    set filter out 10 permit 0 0 tcp dst eq 24
    set filter out 11 permit 0 0 tcp dst eq 4000
    # And outgoing icmp
    set filter out 12 permit 0 0 icmp

    # Once the link's up, limit incoming access to the specified hosts
    set filter in   0 4      172.17.20.248  172.17.16.0/20
    set filter in   1 4      172.17.20.248  172.17.36.0/22
    set filter in   2 4      172.17.20.248  172.17.118.0/26
    set filter in   3 deny ! 172.17.20.248  10.123.5.0/24
    # Established TCP connections and non-PASV FTP
    set filter in   4 permit 0/0  0/0  tcp estab
    set filter in   5 permit 0/0  0/0  tcp src eq 20
    # Useful ICMP messages
    set filter in   6 permit 0/0  0/0  icmp src eq 3
    set filter in   7 permit 0/0  0/0  icmp src eq 4
    set filter in   8 permit 0/0  0/0  icmp src eq 11
    set filter in   9 permit 0/0  0/0  icmp src eq 12
    # Echo reply (local systems can ping the remote host)
    set filter in  10 permit 0/0  0/0  icmp src eq 0
    # And the remote host can ping the local gateway (only)
    set filter in  11 permit 0/0  172.17.20.247 icmp src eq 8


# Server side PPP
#  If you want the remote system to authenticate itself, you insist
#  that the peer uses CHAP (or PAP) with the "enable" keyword.  Both CHAP and
#  PAP are disabled by default (we usually only "enable" one of them if the
#  other side is dialing into our server).
#  When the peer authenticates itself, we use ppp.secret for verification.
#
#  Ppp is launched with:
#   # ppp -direct CHAPserver
#
#  Note:  We can supply a third field in ppp.secret specifying the IP address
#         for that user.  We can even specify a fourth field to specify the
#         ppp.link{up,down} label to use.
#
CHAPserver:
 enable chap
 enable proxy
 set ifaddr 192.244.176.44 292.244.184.31
 accept dns

# If we wish to act as a server, allowing PAP access according to
# accounts in /etc/passwd, we do this  (Without `enable passwdauth',
# you may still enter ``*'' as the users password in ppp.secret and
# ppp will look it up in the passwd database.  This is useful if you
# need to assign a special label or IP number or range):
#
PAPServerwithPASSWD:
 enable pap
 enable passwdauth
 enable proxy
 set ifaddr 192.244.176.44 292.244.184.31
 accept dns


# Example to connect using a null-modem cable:
#  The important thing here is to allow the lqr packets on both sides.
#  Without them enabled, we can't tell if the line's dropped - there
#  should always be carrier on a direct connection.
#  Here, the server sends lqr's every 10 seconds and quits if five in a
#  row fail.
#
#  Make sure you don't have "deny lqr" in your default: on the client !
#  If the peer denies LQR, we still send ECHO LQR packets at the given
#  lqrperiod interval (ppp-style-pings).
#
direct-client:
 set dial ""
 set device /dev/cua00
 set sp 115200
 set timeout 900
 set lqrperiod 10
 set log Phase Chat LQM
 set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp HELLO"
 set ifaddr 10.0.4.2 10.0.4.1
 enable lqr
 accept lqr

direct-server:
 set timeout 0
 set lqrperiod 10
 set log Phase LQM
 set ifaddr 10.0.4.1 10.0.4.2
 enable lqr
 accept lqr


# Example to connect via compuserve (who insist on 7 bits even parity
#  during the chat phase).
#
compuserve:
 set phone 1234567
 set parity even
 set login "TIMEOUT 100 \"\" \"\" Name: CIS ID: 999999,9999/go:pppconnect \
            word: XXXXXXXX PPP"
 set timeout 300
 set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
 delete ALL
 add default HISADDR


# Example for PPP over TCP.
#  We assume that inetd on tcpsrv.mynet has been
#  configured to run "ppp -direct tcp-server" when it gets a connection on
#  port 1234.  Read the man page for further details
#
#  Note, we assume we're using a binary-clean connection.  If something
#  such as `rlogin' is involved, you may need to ``set escape 0xff''
#
tcp-client:
 set device tcpsrv.mynet:1234
 set dial
 set login
 set ifaddr 10.0.5.1 10.0.4.1 255.255.255.0

tcp-server:
 set ifaddr 10.0.4.1 10.0.5.1 255.255.255.0

# If you want to test ppp, do it through a loopback:
#
# Requires a line in /etc/services:
#   ppploop 6671/tcp # loopback ppp daemon
#
# and a line in /etc/inetd.conf:
#   ppploop stream tcp nowait root /usr/sbin/ppp ppp -direct loop-in
#
loop:
 set timeout 0
 set log phase chat connect lcp ipcp command
 set device localhost:ppploop
 set dial
 set login
 set ifaddr 127.0.0.2 127.0.0.3
 set server /var/tmp/loop "" 0177

loop-in:
 set timeout 0
 set log phase lcp ipcp command
 allow mode direct

# Example of a VPN.
#  If you're going to create a tunnel through a public network, your VPN
#  should be set up something like this:
#
#  You should already have set up ssh using ssh-agent & ssh-add.
#
#
sloop:
 load loop
 # Passive mode allows ssh plenty of time to establish the connection
 set openmode passive
 set device "!ssh whatevermachine /usr/sbin/ppp -direct loop-in"

# If you wish to connect to a server that will dial back *without* using
# the ppp callback facility (rfc1570), take advantage of the fact that
# ppp doesn't look for carrier 'till `set login' is complete:
#
# Here, we expect the server to say DIALBACK then disconnect after
# we've authenticated ourselves.  When this has happened, we wait
# 60 seconds for a RING.
#
dialback:
 set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" ATZ OK-ATZ-OK \
           ATDT\\T TIMEOUT 60 CONNECT"
 set login "TIMEOUT 5 ogin:--ogin: ppp word: ppp TIMEOUT 15 DIALBACK \
           \"\" NO\\sCARRIER \"\" TIMEOUT 60 RING ATA CONNECT"

# Alternatively, if the peer is using the PPP callback protocol, use
# normal dial and login scripts and add
#
 set callback auth cbcp e.164 1234567
 set cbcp 1234567

# If we're running a ppp server that wants to only call back microsoft
# clients on numbers configured in /etc/ppp/ppp.secret (the 5th field):
#
 set callback cbcp
 set cbcp
 set log +cbcp
 set redial 3 1
 set device /dev/cua00
 set speed 115200
 set dial "TIMEOUT 10 \"\" AT OK-AT-OK ATDT\\T CONNECT"

# Or if we want to allow authenticated clients to specify their own
# callback number, use this ``set cbcp'' line instead:
#
 set cbcp *

# Multilink mode is available (rfc1990).
# To enable multilink capabilities, you must specify a MRRU.  1500 is
# a reasonable value.  To create new links, use the ``clone'' command
# to duplicate an existing link.  If you already have more than one
# link, you must specify which link you wish to run the command on via
# the ``link'' command.
#
# You can now ``dial'' specific links, or even dial all links at the
# same time.  The `dial' command may also be prefixed with a specific
# link that should do the dialing.
#
mloop:
 load loop
 set mode interactive
 set mrru 1500
 set mru 1504			# Room for the MP header
 clone 1 2 3
 link deflink remove
 # dial
 # link 2 dial
 # link 3 dial

mloop-in:
 set timeout 0
 set log tun phase
 allow mode direct
 set mrru 1500
 set mru 1504			# Room for the MP header

# A PPPoE (PPP over Ethernet) setup may look like this:
#
pppoe:
 set device "!/usr/sbin/pppoe"
 set mtu max 1492
 set mru max 1492
 set speed sync
 disable acfcomp protocomp
 deny acfcomp
@


1.24
log
@spacing
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.23 2006/07/19 06:10:17 fkr Exp $
@


1.23
log
@add information about umts devices to the comment, rename the gprs example
into mobile. discussed with and spelling by jmc@@
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.22 2006/07/12 07:46:41 jmc Exp $
d104 1
a104 1
# To connect via a GPRS or UMTS device (e.g. a mobile phone or a PC Card), 
d108 1
a108 1
# PC Card) need to issue the "AT+CPIN=xxxx" (xxxx being the PIN for the SIM 
d110 1
a110 1
# For certain devices it is necessary to adjust the baud rate (speed setting) 
d113 1
a113 1
# or default to which is available); this can be controlled with the number 
@


1.22
log
@add a gprs example; from stuart henderson
ok henning
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.21 2002/06/09 06:15:15 todd Exp $
d104 15
a118 4
# To connect via a GPRS device (e.g. a mobile phone), it's often
# necessary to set the access-point name (in this case 'internet')
# which requires quotes in the dial string. This section shows
# the escaping required.
d120 1
a120 1
gprs:
@


1.21
log
@rm trailing whitespace
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.19 2001/07/02 12:24:44 brian Exp $
d101 17
@


1.20
log
@An example of how to do PPPoE
@
text
@d283 4
a286 4
    set filter dial  7 permit 172.17.16.0/20  172.17.20.248 
    set filter dial  8 permit 172.17.36.0/22  172.17.20.248 
    set filter dial  9 permit 172.17.118.0/26 172.17.20.248 
    set filter dial 10 permit 10.123.5.0/24   172.17.20.248 
d289 4
a292 4
    set filter out  0 4      172.17.16.0/20  172.17.20.248 
    set filter out  1 4      172.17.36.0/22  172.17.20.248 
    set filter out  2 4      172.17.118.0/26 172.17.20.248 
    set filter out  3 deny ! 10.123.5.0/24   172.17.20.248 
d382 1
a382 1
 
d393 1
a393 1
#  during the chat phase).  
d439 1
a439 1
 
d513 2
a514 2
 # link 2 dial 
 # link 3 dial 
@


1.19
log
@Fix some typos; olgeni@@uli.it
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.18 2000/08/17 14:37:53 brian Exp $
a504 1

d522 10
@


1.18
log
@Use an MRU of 1504 in the MP examples to allow room for the MP header
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.17 2000/03/26 18:35:05 brian Exp $
d51 1
a51 1
#  The forth arg to "set ifaddr" makes us send "0.0.0.0" as our requested
d337 1
a337 1
#         for that user.  We can even specify a forth field to specify the
@


1.17
log
@resolf.conf -> resolv.conf; charnier@@xp11.frmug.org
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.16 2000/01/23 02:25:48 brian Exp $
d510 1
d522 1
@


1.16
log
@Correct serial device names

Submitted by: kevlo@@
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.15 1999/08/17 15:02:03 brian Exp $
d165 1
a165 1
# If you don't want to tell them what's in your /etc/resolf.conf file
@


1.15
log
@Use ``set openmode passive'' in the ssh VPN example
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.14 1999/07/27 23:48:38 brian Exp $
d29 1
a29 1
 set device /dev/cuaa1
d246 1
a246 1
    set device /dev/cuaa1
d373 1
a373 1
 set device /dev/cuaa0
d485 1
a485 1
 set device /dev/cuaa0
@


1.14
log
@Show how to use the new filter capabilities

Mostly submitted by:  Peter Jeremy <jeremyp@@gsmx07.alcatel.com.au>
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.13 1999/05/31 00:21:57 brian Exp $
d454 2
@


1.13
log
@typo; Bill Fumerola
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.12 1999/04/27 00:25:07 brian Exp $
d236 88
@


1.12
log
@Specify the ssh command to use for a VPN inline.
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.11 1999/03/28 00:24:52 brian Exp $
d38 1
a38 1
#  is required by the server either using a unix-style login proceedure
d73 1
a73 1
# proceedure, we do the following.  Note, the peer suggests whether we
@


1.11
log
@Increase the timeout and wait for ``PPP'' in the compuserve
example.

Submitted by: MALCOLM BOFF <Malcolm_Boff@@compuserve.com>
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.10 1998/11/03 23:12:09 aaron Exp $
d285 1
a285 1
 set line /dev/cuaa0
d357 5
a361 2
# If you're going to create a tunnel through a public network, your VPN
# should be set up something like this:
a362 3
# /etc/ppp/secure (which should be executable) says:
#   #! /bin/sh
#   exec ssh whatevermachine /usr/sbin/ppp -direct loop-in
d366 1
a366 1
 set device !/etc/ppp/secure
@


1.10
log
@it's -> its
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.9 1998/10/03 13:12:40 brian Exp $
d310 2
a311 2
 set login "TIMEOUT 10 \"\" \"\" Name: CIS ID: 99999,9999/go:pppconnect \
            word: XXXXXXXX"
@


1.9
log
@Show how to create a secure (ssh) VPN
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.8 1998/09/23 07:30:58 todd Exp $
d23 1
a23 1
#  This is the best place to specify your modem device, it's DTR rate,
@


1.8
log
@s/Id/OpenBSD/
@
text
@d7 1
a7 1
# $OpenBSD: ppp.conf.sample,v 1.7 1998/09/06 14:01:32 brian Exp $
d356 11
@


1.7
log
@Add a compuserve example.
Detailed by: Masahiro Sekiguchi <seki@@sysrap.cs.fujitsu.co.jp>
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.6 1998/08/31 00:26:11 brian Exp $
@


1.6
log
@ppp 1.65 -> 2.0
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.31 1998/08/07 18:44:31 brian Exp $
d302 14
@


1.5
log
@Suggest using /var/tmp for local domain `diagnostic' sockets,
rather than making a new directory.  Also, suggest 0600
permissions (mask: 0177).

Dangers noted by: Theo de Raadt <deraadt@@cvs.openbsd.org>
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.4 1997/12/30 23:36:08 brian Exp $
d28 2
a29 2
 set log Phase Chat Connect Carrier LCP IPCP CCP tun command
 set device /dev/cua01
a30 1
 deny lqr
d45 1
a45 9
#  some IPs that you can't currently route to.  Ensure that the "delete"
#  and "add" lines are also present in the pmdemand section of ppp.linkup
#  so that when we connect, things will be put straight.
#
#  This will work with static IP numbers too.  You can also use this entry
#  if you don't want on-demand dialup.  The "set ifaddr", "delete" and
#  "add" lines are required for on-demand.  Note, for dynamic IP numbers,
#  whether dialing manually or on demand, there should *always* be an entry
#  in ppp.linkup.
d54 10
d66 1
a66 1
 set login "TIMEOUT 5 ogin:--ogin: ppp word: ppp"
d69 2
a70 2
 delete ALL
 add 0 0 HISADDR
d83 2
a84 2
 delete ALL
 add 0 0 HISADDR
d92 3
a94 3
#  It is not necessary to have an entry in ppp.linkup when both IP numbers
#  are static.  Be warned though, the MYADDR: label is executed from
#  ppp.linkup if the "ondemand:" and "192.244.176.44" labels are not found.
d98 1
a98 1
 set login "TIMEOUT 5 ogin:--ogin: ppp word: ppp"
d100 3
a102 3
 set ifaddr 192.244.185.226 192.244.176.44 255.255.255.0
 delete ALL
 add 0 0 HISADDR
d118 3
a120 4
# When in -auto, -ddial, -direct or -background mode, ppp can accept
# control instructions from the ``pppctl'' program.  First, you must
# set up your control socket.  It's safest to use a UNIX domain socket,
# and watch the permissions:
d122 1
a122 1
    set server /var/tmp/internet 0177
d127 1
a127 1
    set server 6670
d147 1
a147 1
# try this (check out the FAQ):
d149 1
a149 1
    set openmode passive
d152 1
a152 1
# of carrier:
d156 2
a157 1
# When playing server for M$ clients, tell them who our name servers are:
a158 1
    set ns 10.0.0.1 10.0.0.2
d160 9
a168 1
    enable msext
d185 2
a186 1
# I empty out the user access list in that section:
d200 4
a203 4
    set afilter 0 deny icmp
    set afilter 1 deny udp src eq 53
    set afilter 2 deny udp dst eq 53
    set afilter 3 permit 0/0 0/0
d207 6
a212 2
    set dfilter 0 deny icmp
    set dfilter 1 permit 0/0 0/0
d220 16
a235 16
    set ifilter 0 permit tcp dst eq 113
    set ofilter 0 permit tcp src eq 113
    set ifilter 1 permit tcp src eq 23 estab
    set ofilter 1 permit tcp dst eq 23
    set ifilter 2 permit tcp src eq 21 estab
    set ofilter 2 permit tcp dst eq 21
    set ifilter 3 permit tcp src eq 20 dst gt 1023
    set ofilter 3 permit tcp dst eq 20
    set ifilter 4 permit udp src eq 53
    set ofilter 4 permit udp dst eq 53
    set ifilter 5 permit 192.244.191.0/24 0/0
    set ofilter 5 permit 0/0 192.244.191.0/24
    set ifilter 6 permit icmp
    set ofilter 6 permit icmp
    set ifilter 7 permit udp dst gt 33433
    set ofilter 7 permit udp dst gt 33433
d241 1
a241 1
#  PAP are disabled by default (we usually only "enable" on of them if the
d249 2
a250 1
#         for that user.
d256 1
d259 4
a262 1
# accounts in /etc/passwd, we do this:
d269 1
d276 1
a276 1
#  Here, the server sends lqr's every 10 seconds and quits if three in a
d280 2
d285 1
a285 1
 set line /dev/cua00
d287 2
a288 1
 set timeout 900 10 3
d290 1
a290 1
 set login "TIMEOUT 5 ogin:--ogin: ppp word: ppp HELLO"
d296 2
a297 1
 set timeout 900 10 3
d309 3
a315 1
 set escape 0xff
a318 1
 set escape 0xff
a334 1
 set escape 0xff
a335 1
 set openmode passive
d340 64
a403 2
 set log phase chat connect lcp ipcp command
 set escape 0xff
d405 1
@


1.4
log
@Don't suggest creating sockets in /var/run as we create
sockets as our original uid.  Suggest creating /var/ppp
with perms 1777 instead.

Pointed out by: Masafumi NAKANE <max@@wide.ad.jp>
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.3 1997/12/27 07:22:15 brian Exp $
d119 2
a120 5
# set up your control socket.  It's safest to use a UNIX domain socket
# and to keep these sockets in one place:
#    # mkdir /var/ppp
#    # chmod 1777 /var/ppp
# then create your socket there:
d122 1
a122 1
    set server /var/ppp/internet 0660
d314 1
a314 1
 set server /tmp/loop ""
@


1.3
log
@Allow (and document) execution of commands from within
our chat script.
You can now even run chat(8) - see ppp.conf.sample.
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.2 1997/12/06 12:10:27 brian Exp $
d119 5
a123 1
# set up your control socket.  It's safest to use a UNIX domain socket:
d125 1
a125 1
    set server /var/run/internet 0660
@


1.2
log
@cuaaX => cua0X: This is OpenBSD !
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.1.1.1 1997/11/23 20:27:39 brian Exp $
d127 4
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
# $Id: ppp.conf.sample,v 1.25 1997/11/18 19:21:47 brian Exp $
d29 1
a29 1
 set device /dev/cuaa1
d259 1
a259 1
 set line /dev/cuaa0
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
