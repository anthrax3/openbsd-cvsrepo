head	1.124;
access;
symbols
	OPENBSD_6_1:1.118.0.4
	OPENBSD_6_1_BASE:1.118
	OPENBSD_6_0:1.114.0.4
	OPENBSD_6_0_BASE:1.114
	OPENBSD_5_9:1.105.0.2
	OPENBSD_5_9_BASE:1.105
	OPENBSD_5_8:1.99.0.4
	OPENBSD_5_8_BASE:1.99
	OPENBSD_5_7:1.92.0.2
	OPENBSD_5_7_BASE:1.92
	OPENBSD_5_6:1.77.0.2
	OPENBSD_5_6_BASE:1.77
	OPENBSD_5_5:1.70.0.6
	OPENBSD_5_5_BASE:1.70
	OPENBSD_5_4:1.70.0.2
	OPENBSD_5_4_BASE:1.70
	OPENBSD_5_3:1.68.0.2
	OPENBSD_5_3_BASE:1.68
	OPENBSD_5_2:1.58.0.2
	OPENBSD_5_2_BASE:1.58
	OPENBSD_5_1_BASE:1.56
	OPENBSD_5_1:1.56.0.2
	OPENBSD_5_0:1.45.0.2
	OPENBSD_5_0_BASE:1.45
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20;
locks; strict;
comment	@# @;


1.124
date	2017.05.28.18.51.27;	author ajacoutot;	state Exp;
branches;
next	1.123;
commitid	xt2a1ghuEbbfgBex;

1.123
date	2017.05.28.10.12.42;	author ajacoutot;	state Exp;
branches;
next	1.122;
commitid	3ijSTLwJ6nCzsTj4;

1.122
date	2017.05.28.09.31.45;	author ajacoutot;	state Exp;
branches;
next	1.121;
commitid	nyYqmU7rDyNyl5MY;

1.121
date	2017.05.28.08.38.10;	author ajacoutot;	state Exp;
branches;
next	1.120;
commitid	XmDMjLNJg9byEjyZ;

1.120
date	2017.05.27.19.55.48;	author ajacoutot;	state Exp;
branches;
next	1.119;
commitid	WxILdqU0pr1p18v5;

1.119
date	2017.05.27.13.51.52;	author ajacoutot;	state Exp;
branches;
next	1.118;
commitid	6HzyJoXIH34lggdk;

1.118
date	2017.02.17.16.42.41;	author ajacoutot;	state Exp;
branches;
next	1.117;
commitid	zsRwzFx0zl8oBp3s;

1.117
date	2017.01.24.01.11.11;	author ajacoutot;	state Exp;
branches;
next	1.116;
commitid	eHC38MNASiBnshtI;

1.116
date	2016.09.07.13.12.42;	author ajacoutot;	state Exp;
branches;
next	1.115;
commitid	6hiFrnX4ZcAmLO84;

1.115
date	2016.08.31.08.47.11;	author ajacoutot;	state Exp;
branches;
next	1.114;
commitid	qwLYgVNN8LnCFx8P;

1.114
date	2016.05.03.08.59.29;	author otto;	state Exp;
branches;
next	1.113;
commitid	D51IiP0mOuUBC2Xi;

1.113
date	2016.04.28.09.15.16;	author ajacoutot;	state Exp;
branches;
next	1.112;
commitid	rv3NMcdzql9Xr7sI;

1.112
date	2016.04.27.17.29.50;	author ajacoutot;	state Exp;
branches;
next	1.111;
commitid	zwzlkygTudfREfiB;

1.111
date	2016.04.27.12.58.12;	author ajacoutot;	state Exp;
branches;
next	1.110;
commitid	CP0HCbKZzYCcX0uH;

1.110
date	2016.04.26.17.00.20;	author ajacoutot;	state Exp;
branches;
next	1.109;
commitid	p6Nwx3RSz1oXD1qe;

1.109
date	2016.04.26.16.59.15;	author ajacoutot;	state Exp;
branches;
next	1.108;
commitid	bVFNENWY3TiNtT5k;

1.108
date	2016.04.26.16.39.59;	author ajacoutot;	state Exp;
branches;
next	1.107;
commitid	AC0WlMo7mnq1gGOC;

1.107
date	2016.03.26.13.59.36;	author ajacoutot;	state Exp;
branches;
next	1.106;
commitid	To91fejCYz0ubKIv;

1.106
date	2016.03.26.09.21.24;	author ajacoutot;	state Exp;
branches;
next	1.105;
commitid	Y6Uvv73scyH51Zev;

1.105
date	2015.12.21.10.18.05;	author ajacoutot;	state Exp;
branches;
next	1.104;
commitid	zZcFNgmnFI171u2k;

1.104
date	2015.12.21.09.29.12;	author ajacoutot;	state Exp;
branches;
next	1.103;
commitid	m1WMprEZrDXugZWu;

1.103
date	2015.12.19.14.10.41;	author ajacoutot;	state Exp;
branches;
next	1.102;
commitid	yIaT43r3YZX4eT5O;

1.102
date	2015.12.19.11.19.17;	author ajacoutot;	state Exp;
branches;
next	1.101;
commitid	vF0xsOtvz4ZwfMQu;

1.101
date	2015.12.05.18.43.12;	author mpi;	state Exp;
branches;
next	1.100;
commitid	Hwe4NrlSqy1olQ0E;

1.100
date	2015.10.16.20.12.00;	author ajacoutot;	state Exp;
branches;
next	1.99;
commitid	muOaSyYtbu3ertgk;

1.99
date	2015.07.15.13.48.16;	author ajacoutot;	state Exp;
branches;
next	1.98;
commitid	J1qsMeQ9GQRXt8W2;

1.98
date	2015.07.15.12.26.25;	author ajacoutot;	state Exp;
branches;
next	1.97;
commitid	uw2pGb9J4vztNPWp;

1.97
date	2015.07.15.03.21.38;	author ajacoutot;	state Exp;
branches;
next	1.96;
commitid	bEER8lDNQknuGmQH;

1.96
date	2015.06.17.07.50.38;	author ajacoutot;	state Exp;
branches;
next	1.95;
commitid	nadPd0H4yDYYa5aT;

1.95
date	2015.05.02.09.36.27;	author ajacoutot;	state Exp;
branches;
next	1.94;
commitid	H5yjR0a8Hj8jhXgv;

1.94
date	2015.04.29.11.05.16;	author ajacoutot;	state Exp;
branches;
next	1.93;
commitid	e2lly82dmolgM42h;

1.93
date	2015.03.28.07.34.16;	author ajacoutot;	state Exp;
branches;
next	1.92;
commitid	0xcfivYzOQXl0bQX;

1.92
date	2015.01.02.14.44.05;	author ajacoutot;	state Exp;
branches;
next	1.91;
commitid	KuUeNmcOjSXnywol;

1.91
date	2015.01.02.08.03.28;	author ajacoutot;	state Exp;
branches;
next	1.90;
commitid	weFxhbTOQojYLdWd;

1.90
date	2014.11.17.13.52.44;	author ajacoutot;	state Exp;
branches;
next	1.89;
commitid	fJDS4PYExCokwdFY;

1.89
date	2014.08.30.20.33.27;	author ajacoutot;	state Exp;
branches;
next	1.88;
commitid	Dpo5WEpUhB0aYNsN;

1.88
date	2014.08.25.07.34.12;	author ajacoutot;	state Exp;
branches;
next	1.87;
commitid	JyDqdlQ90aWFD19F;

1.87
date	2014.08.24.17.15.24;	author ajacoutot;	state Exp;
branches;
next	1.86;
commitid	YMIFI8iVNDpKcpji;

1.86
date	2014.08.24.13.32.53;	author ajacoutot;	state Exp;
branches;
next	1.85;
commitid	EvE7WvTc2kCyUcBc;

1.85
date	2014.08.24.13.30.27;	author ajacoutot;	state Exp;
branches;
next	1.84;
commitid	Wo57dVv2IuO0XiPQ;

1.84
date	2014.08.24.13.29.16;	author ajacoutot;	state Exp;
branches;
next	1.83;
commitid	w16KiYF6lVHTBUWN;

1.83
date	2014.08.24.07.55.20;	author ajacoutot;	state Exp;
branches;
next	1.82;
commitid	jIOS7NifupPVWVJN;

1.82
date	2014.08.21.10.06.14;	author ajacoutot;	state Exp;
branches;
next	1.81;
commitid	HYmr29UAuywQli39;

1.81
date	2014.08.17.14.41.03;	author ajacoutot;	state Exp;
branches;
next	1.80;
commitid	s4vBUSWgSDmgZ1V8;

1.80
date	2014.08.11.20.24.57;	author ajacoutot;	state Exp;
branches;
next	1.79;
commitid	NgDt2Wa2VNFOSmLb;

1.79
date	2014.08.11.20.16.04;	author kili;	state Exp;
branches;
next	1.78;
commitid	Ek2OL8mnN8tkYvIj;

1.78
date	2014.08.11.13.25.23;	author ajacoutot;	state Exp;
branches;
next	1.77;
commitid	DbbGafu1EZGeFzCo;

1.77
date	2014.08.01.04.57.01;	author rpe;	state Exp;
branches;
next	1.76;
commitid	MfAqYOs3J2d2kv7E;

1.76
date	2014.07.31.14.57.41;	author ajacoutot;	state Exp;
branches;
next	1.75;
commitid	SHPnHxT43PboxmbT;

1.75
date	2014.07.30.13.18.59;	author ajacoutot;	state Exp;
branches;
next	1.74;
commitid	iUmm8VIABqiv7Sn1;

1.74
date	2014.07.12.15.32.43;	author robert;	state Exp;
branches;
next	1.73;
commitid	fRbhJ2cyWnXSRqi1;

1.73
date	2014.07.12.10.14.03;	author robert;	state Exp;
branches;
next	1.72;
commitid	bTkdeNHIIsfDwYx7;

1.72
date	2014.07.09.14.19.22;	author ajacoutot;	state Exp;
branches;
next	1.71;
commitid	y0ghT5LJiLgElOXd;

1.71
date	2014.07.09.10.59.35;	author ajacoutot;	state Exp;
branches;
next	1.70;
commitid	Zri51QZxbmdHY8Ex;

1.70
date	2013.07.11.09.34.33;	author otto;	state Exp;
branches;
next	1.69;

1.69
date	2013.04.04.06.50.44;	author zhuk;	state Exp;
branches;
next	1.68;

1.68
date	2012.11.19.07.10.59;	author ajacoutot;	state Exp;
branches;
next	1.67;

1.67
date	2012.11.18.18.54.52;	author ajacoutot;	state Exp;
branches;
next	1.66;

1.66
date	2012.11.12.08.07.53;	author ajacoutot;	state Exp;
branches;
next	1.65;

1.65
date	2012.09.13.05.55.21;	author ajacoutot;	state Exp;
branches;
next	1.64;

1.64
date	2012.09.01.07.08.37;	author ajacoutot;	state Exp;
branches;
next	1.63;

1.63
date	2012.08.21.06.38.52;	author ajacoutot;	state Exp;
branches;
next	1.62;

1.62
date	2012.08.13.10.10.07;	author ajacoutot;	state Exp;
branches;
next	1.61;

1.61
date	2012.08.13.08.08.00;	author ajacoutot;	state Exp;
branches;
next	1.60;

1.60
date	2012.08.11.17.55.58;	author ajacoutot;	state Exp;
branches;
next	1.59;

1.59
date	2012.08.04.15.30.25;	author ajacoutot;	state Exp;
branches;
next	1.58;

1.58
date	2012.07.07.10.28.07;	author ajacoutot;	state Exp;
branches;
next	1.57;

1.57
date	2012.05.30.08.19.14;	author espie;	state Exp;
branches;
next	1.56;

1.56
date	2011.11.30.08.06.02;	author ajacoutot;	state Exp;
branches;
next	1.55;

1.55
date	2011.10.15.16.05.15;	author halex;	state Exp;
branches;
next	1.54;

1.54
date	2011.10.12.23.04.02;	author schwarze;	state Exp;
branches;
next	1.53;

1.53
date	2011.10.09.16.46.55;	author schwarze;	state Exp;
branches;
next	1.52;

1.52
date	2011.10.09.08.48.53;	author ajacoutot;	state Exp;
branches;
next	1.51;

1.51
date	2011.10.07.07.26.49;	author ajacoutot;	state Exp;
branches;
next	1.50;

1.50
date	2011.10.07.07.17.25;	author ajacoutot;	state Exp;
branches;
next	1.49;

1.49
date	2011.09.25.17.55.14;	author halex;	state Exp;
branches;
next	1.48;

1.48
date	2011.09.24.17.35.15;	author ajacoutot;	state Exp;
branches;
next	1.47;

1.47
date	2011.09.22.08.15.01;	author ajacoutot;	state Exp;
branches;
next	1.46;

1.46
date	2011.09.19.20.41.50;	author robert;	state Exp;
branches;
next	1.45;

1.45
date	2011.07.31.20.22.34;	author robert;	state Exp;
branches;
next	1.44;

1.44
date	2011.07.31.20.18.45;	author robert;	state Exp;
branches;
next	1.43;

1.43
date	2011.07.23.22.41.44;	author sthen;	state Exp;
branches;
next	1.42;

1.42
date	2011.07.08.18.57.49;	author robert;	state Exp;
branches;
next	1.41;

1.41
date	2011.07.07.17.37.30;	author ajacoutot;	state Exp;
branches;
next	1.40;

1.40
date	2011.07.06.18.55.36;	author robert;	state Exp;
branches;
next	1.39;

1.39
date	2011.07.03.16.09.06;	author schwarze;	state Exp;
branches;
next	1.38;

1.38
date	2011.06.20.21.26.27;	author schwarze;	state Exp;
branches;
next	1.37;

1.37
date	2011.06.10.08.43.26;	author ajacoutot;	state Exp;
branches;
next	1.36;

1.36
date	2011.05.19.09.50.50;	author ajacoutot;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.09.15.39.22;	author schwarze;	state Exp;
branches;
next	1.34;

1.34
date	2011.04.06.17.10.38;	author robert;	state Exp;
branches;
next	1.33;

1.33
date	2011.04.06.06.09.28;	author ajacoutot;	state Exp;
branches;
next	1.32;

1.32
date	2011.04.05.13.57.57;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2011.04.05.11.47.32;	author ajacoutot;	state Exp;
branches;
next	1.30;

1.30
date	2011.03.25.10.03.26;	author ajacoutot;	state Exp;
branches;
next	1.29;

1.29
date	2011.03.24.07.28.31;	author robert;	state Exp;
branches;
next	1.28;

1.28
date	2011.03.19.19.03.57;	author ian;	state Exp;
branches;
next	1.27;

1.27
date	2011.03.17.16.43.51;	author robert;	state Exp;
branches;
next	1.26;

1.26
date	2011.03.14.11.28.44;	author ajacoutot;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.10.10.21.39;	author ajacoutot;	state Exp;
branches;
next	1.24;

1.24
date	2011.03.09.19.37.16;	author ajacoutot;	state Exp;
branches;
next	1.23;

1.23
date	2011.03.09.18.50.46;	author ajacoutot;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.09.09.10.44;	author ajacoutot;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.06.16.49.48;	author ajacoutot;	state Exp;
branches;
next	1.20;

1.20
date	2011.02.24.07.07.03;	author ajacoutot;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.05.16.04.21;	author ajacoutot;	state Exp;
branches;
next	1.18;

1.18
date	2011.01.04.16.02.24;	author ajacoutot;	state Exp;
branches;
next	1.17;

1.17
date	2010.12.29.15.28.01;	author ajacoutot;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.27.14.49.05;	author ajacoutot;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.24.10.37.24;	author ajacoutot;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.13.16.06.45;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.13.15.27.27;	author robert;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.11.12.57.21;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.11.10.15.23;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.11.09.55.37;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.10.21.25.50;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.28.21.36.45;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.28.21.03.33;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.28.15.36.37;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.27.13.34.21;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.27.13.08.53;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.27.10.27.03;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.27.08.53.21;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.26.20.56.03;	author robert;	state Exp;
branches;
next	;


desc
@@


1.124
log
@Move check later to mitigate a possible race.
@
text
@#	$OpenBSD: rc.subr,v 1.123 2017/05/28 10:12:42 ajacoutot Exp $
#
# Copyright (c) 2010, 2011, 2014-2017 Antoine Jacoutot <ajacoutot@@openbsd.org>
# Copyright (c) 2010, 2011 Ingo Schwarze <schwarze@@openbsd.org>
# Copyright (c) 2010, 2011, 2014 Robert Nagy <robert@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

_rc_actions="start stop restart reload check"
readonly _rc_actions

_rc_err() {
	[ -n "${1}" ] && echo "${1}" 1>&2
	[ -n "${2}" ] && exit "${2}" || exit 1
}

_rc_not_supported() {
	local _a _enotsup _what=${1}
	for _a in ${_rc_actions}; do
		[ "${_what}" == "restart" ] && _what="stop"
		if [ "${_what}" == "${_a}" ]; then
			eval _enotsup=\${rc_${_what}}
			break
		fi
	done
	[ X"${_enotsup}" == X"NO" ]
}

_rc_usage() {
	local _a _allsup
	for _a in ${_rc_actions}; do
		_rc_not_supported ${_a} || _allsup="${_allsup:+$_allsup|}${_a}"
	done
	_rc_err "usage: $0 [-df] ${_allsup}"
}

_rc_write_runfile() {
	[ -d ${_RC_RUNDIR} ] || mkdir -p ${_RC_RUNDIR} &&
		cat >${_RC_RUNFILE} <<EOF
daemon_class=${daemon_class}
daemon_flags=${daemon_flags}
daemon_rtable=${daemon_rtable}
daemon_timeout=${daemon_timeout}
daemon_user=${daemon_user}
pexp=${pexp}
EOF
}

_rc_rm_runfile() {
	rm -f ${_RC_RUNFILE}
}

_rc_check_name() {
	[[ $1 == +([_[:alpha:]])+(|[_[:alnum:]]) ]]
}

_rc_do() {
	if [ -n "${_RC_DEBUG}" ]; then
		echo "doing $@@" && "$@@"
	else
		"$@@" >/dev/null 2>&1
	fi
}

_rc_exit() {
	local _pfix
	[ -z "${INRC}" -o X"$1" != X"ok" ] && _pfix="($1)"
	echo ${INRC:+'-n'} "${_pfix}"
	[ X"$1" = X"ok" ] && exit 0 || exit 1
}

_rc_alarm()
{
	trap - ALRM
	kill -ALRM ${_TIMERSUB} 2>/dev/null # timer may not be running anymore
	kill $! 2>/dev/null # kill last job if it's running
}

_rc_wait() {
	local _i=0
	if [ X"$1" = X"start" ]; then # prevent hanging the boot sequence
		trap "_rc_alarm" ALRM
		while [ $_i -lt ${daemon_timeout} ]; do
			_rc_do rc_check && [ X"${rc_bg}" = X"YES" ] && break ||
				[ -z "$$" ] && break
			sleep 1
			_i=$((_i+1))
		done & wait
		pkill -ALRM -P $$
		return
	fi
	while [ $_i -lt ${daemon_timeout} ]; do
		case "$1" in
		reload)
			_rc_do rc_check && return 0 ;;
		stop)
			_rc_do rc_check || return 0 ;;
		*)
			break ;;
		esac
		sleep 1
		_i=$((_i+1))
	done
	return 1
}

_rc_quirks() {
	# special care needed for spamlogd to avoid starting it up and failing
	# all the time
	if [ X"${spamd_flags}" = X"NO" -o X"${spamd_black}" != X"NO" ]; then
		spamlogd_flags=NO
	fi

	# special care needed for pflogd to avoid starting it up and failing
	# if pf is not enabled
	if [ X"${pf}" = X"NO" ]; then
		pflogd_flags=NO
	fi

	# special care needed if nfs_server=YES to startup nfsd and mountd with
	# sane default flags
	if [ X"${nfs_server}" = X"YES" ]; then
		[ X"${nfsd_flags}" = X"NO" ] && nfsd_flags="-tun 4"
		[ X"${mountd_flags}" = X"NO" ] && mountd_flags=
	fi
}

_rc_parse_conf() {
	typeset -l _key
	local _l _rcfile _val
	set -A _allowed_keys -- \
		accounting amd_master check_quotas ipsec multicast nfs_server \
		pexp pf pkg_scripts shlib_dirs spamd_black

	[ $# -gt 0 ] || set -- /etc/rc.conf /etc/rc.conf.local
	for _rcfile; do
		[[ -f $_rcfile ]] || continue
		while IFS=' 	' read -r _l; do
			[[ $_l == [!#=]*=* ]] || continue
			_key=${_l%%*([[:blank:]])=*}
			[[ $_key == *_@@(flags|rtable|user|timeout) ]] ||
				[[ " ${_allowed_keys[*]} " == *" $_key "* ]] ||
				continue
			[[ $_key == "" ]] && continue
			_val=${_l##*([!=])=*([[:blank:]])}
			_val=${_val%%#*}
			_val=${_val%%*([[:blank:]])}
			# remove leading and trailing quotes (backwards compat)
			[[ $_val == @@(\"*\"|\'*\') ]] &&
				_val=${_val#?} _val=${_val%?}
			eval "${_key}=\${_val}"
		done < $_rcfile
	done

	_rc_do _rc_quirks
}

# return if we only want internal functions
[ -n "${FUNCS_ONLY}" ] && return

rc_start() {
	${rcexec} "${daemon} ${daemon_flags}"
}

rc_check() {
	pgrep -T "${daemon_rtable}" -q -xf "${pexp}"
}

rc_reload() {
	pkill -HUP -T "${daemon_rtable}" -xf "${pexp}"
}

rc_stop() {
	pkill -T "${daemon_rtable}" -xf "${pexp}"
}

rc_cmd() {
	local _to _n _ret

	[ -n "${1}" ] && echo "${_rc_actions}" | grep -qw -- ${1} || _rc_usage

	[ "$(id -u)" -eq 0 ] ||
		[ X"${rc_usercheck}" != X"NO" -a X"$1" = "Xcheck" ] ||
		_rc_err "$0: need root privileges"

	if _rc_not_supported $1; then
		[ -n "${INRC}" ] && exit 1
		_rc_err "$0: $1 is not supported"
	fi

	[ -n "${_RC_DEBUG}" ] || _n="-n"

	_rc_do _rc_parse_conf ${_RC_RUNFILE}

	case "$1" in
	check)
		echo $_n "${INRC:+ }${_name}"
		_rc_do rc_check && _rc_exit ok
		_rc_exit failed
		;;
	start)
		if [ X"${daemon_flags}" = X"NO" ]; then
			_rc_err "$0: need -f to force $1 since ${_name}_flags=NO"
		fi
		[ -z "${INRC}" ] && _rc_do rc_check && exit 0
		echo $_n "${INRC:+ }${_name}"
		while true; do # no real loop, only needed to break
			if type rc_pre >/dev/null; then
				_rc_do rc_pre || break
			fi
			_rc_do _rc_wait start & _TIMERSUB=$!
			trap "_rc_alarm" ALRM
			_rc_do rc_start; _ret=$?
			kill -ALRM ${_TIMERSUB}
			wait ${_TIMERSUB} 2>/dev/null # don't print Alarm clock
			[[ "${_ret}" == 142 ]] && [ X"${rc_bg}" != X"YES" ] &&
				_to="timeout"
			[[ "${_ret}" == @@(0|142) ]] && _rc_do rc_check || break
			_rc_do _rc_write_runfile
			_rc_exit ${_to:=ok}
		done
		# handle failure
		type rc_post >/dev/null && _rc_do rc_post
		_rc_do _rc_rm_runfile
		_rc_exit failed
		;;
	stop)
		_rc_do rc_check || exit 0
		echo $_n "${INRC:+ }${_name}"
		_rc_do rc_stop || _rc_exit failed
		_rc_do _rc_wait stop || _rc_exit failed
		if type rc_post >/dev/null; then
			_rc_do rc_post || _rc_exit failed
		fi
		_rc_do _rc_rm_runfile
		_rc_exit ok
		;;
	reload)
		echo $_n "${INRC:+ }${_name}"
		_rc_do rc_check && _rc_do rc_reload || _rc_exit failed
		_rc_do _rc_wait reload || _rc_exit failed
		_rc_exit ok
		;;
	restart)
		$0 ${_RC_DEBUG} ${_RC_FORCE} stop &&
			$0 ${_RC_DEBUG} ${_RC_FORCE} start
		;;
	*)
		_rc_usage
		;;
	esac
}

_name=$(basename $0)
_rc_check_name "${_name}" || _rc_err "invalid rc.d script name: ${_name}"

[ -n "${daemon}" ] || _rc_err "$0: daemon is not set"

unset _RC_DEBUG _RC_FORCE
while getopts "df" c; do
	case "$c" in
		d) _RC_DEBUG=-d;;
		f) _RC_FORCE=-f;;
		*) _rc_usage;;
	esac
done
shift $((OPTIND-1))

_RC_RUNDIR=/var/run/rc.d
_RC_RUNFILE=${_RC_RUNDIR}/${_name}

# parse /etc/rc.conf{.local} for the daemon_flags
_rc_do _rc_parse_conf

eval _rcflags=\${${_name}_flags}
eval _rcrtable=\${${_name}_rtable}
eval _rcuser=\${${_name}_user}
eval _rctimeout=\${${_name}_timeout}

# set default values; duplicated in rcctl(8)
getcap -f /etc/login.conf ${_name} 1>/dev/null 2>&1 && daemon_class=${_name} ||
	daemon_class=daemon
[ -z "${daemon_rtable}" ] && daemon_rtable=0
[ -z "${daemon_user}" ] && daemon_user=root
[ -z "${daemon_timeout}" ] && daemon_timeout=30

# use flags from the rc.d script if daemon is not enabled
[ -n "${_RC_FORCE}" -o "$1" != "start" ] && [ X"${_rcflags}" = X"NO" ] &&
	unset _rcflags

[ -n "${_rcflags}" ] && daemon_flags=${_rcflags}
[ -n "${_rcrtable}" ] && daemon_rtable=${_rcrtable}
[ -n "${_rcuser}" ] && daemon_user=${_rcuser}
[ -n "${_rctimeout}" ] && daemon_timeout=${_rctimeout}

if [ -n "${_RC_DEBUG}" ]; then
	echo -n "${_name}_flags "
	[ -n "${_rcflags}" ] || echo -n "empty, using default "
	echo ">${daemon_flags}<"
fi

readonly daemon_class
unset _rcflags _rcrtable _rcuser _rctimeout
pexp="${daemon}${daemon_flags:+ ${daemon_flags}}"
rcexec="su -l -c ${daemon_class} -s /bin/sh ${daemon_user} -c"
[ "${daemon_rtable}" -eq 0 ] ||
	rcexec="route -T ${daemon_rtable} exec ${rcexec}"
@


1.123
log
@Indent and rename var; no functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.122 2017/05/28 09:31:45 ajacoutot Exp $
a225 1
			[[ "${_ret}" == @@(0|142) ]] && _rc_do rc_check || break
d228 1
@


1.122
log
@When a daemon reaches its timeout when starting, display "timeout" instead
of "ok" so the user is warned and has a chance to fix it (most of the time
due to bogus flags). Daemons reaching the timeout without being able to
start are still marked as "failed" (which should also give a clue to the
user that some investigation is needed).

prodded by beck@@ a while ago
discussed with and ok sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.121 2017/05/28 08:38:10 ajacoutot Exp $
d159 2
a160 1
			[[ $_val == @@(\"*\"|\'*\') ]] && _val=${_val#?} _val=${_val%?}
d188 1
a188 1
	local _msg _n _ret
d228 1
a228 1
				_msg="timeout"
d230 1
a230 1
			_rc_exit ${_msg:=ok}
d316 2
a317 1
[ "${daemon_rtable}" -eq 0 ] || rcexec="route -T ${daemon_rtable} exec ${rcexec}"
@


1.121
log
@Drop useless lines continuation; no functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.120 2017/05/27 19:55:48 ajacoutot Exp $
d187 1
a187 1
	local _n _ret
d226 2
d229 1
a229 1
			_rc_exit ok
@


1.120
log
@Ok turns out we still want to keep the rc_bg variable around but we need
to know which daemon cannot background themselves (actually we want to
know the opposite, but there are much more). However, it's only needed in
_rc_wait and rc.subr still does its magic without the need to add `&'.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.119 2017/05/27 13:51:52 ajacoutot Exp $
d48 1
a48 1
	[ -d ${_RC_RUNDIR} ] || mkdir -p ${_RC_RUNDIR} && \
d151 2
a152 2
			[[ $_key == *_@@(flags|rtable|user|timeout) ]] || \
				[[ " ${_allowed_keys[*]} " == *" $_key "* ]] || \
d191 2
a192 2
	[ "$(id -u)" -eq 0 ] || \
		[ X"${rc_usercheck}" != X"NO" -a X"$1" = "Xcheck" ] || \
d239 1
a239 1
		if type rc_post >/dev/null; then \
d252 1
a252 1
		$0 ${_RC_DEBUG} ${_RC_FORCE} stop && \
d288 2
a289 2
getcap -f /etc/login.conf ${_name} 1>/dev/null 2>&1 && \
	daemon_class=${_name} || daemon_class=daemon
d295 1
a295 1
[ -n "${_RC_FORCE}" -o "$1" != "start" ] && [ X"${_rcflags}" = X"NO" ] && \
d313 1
a313 2
[ "${daemon_rtable}" -eq 0 ] || \
	rcexec="route -T ${daemon_rtable} exec ${rcexec}"
@


1.119
log
@Add an ALRM timer to cope with 2 annoying issues in rc.d(8):
- prevent a daemon from hanging the boot
(typo in your flagsm e.g. httpd_flags=-d)
- make sure we can get the status of a backgrounded daemon instead of always
returning success

Side effect of this is that we can kill a knob! rip rc_bg :-)
Ports will need love, and a second commit is coming for that.

The diff is small yet not trivial so I am committing early in the release
process in one shot so it can easily be reverted if needed. I started working on
this during g2k16 in Cambridge then finished it in Brisbane for a2k17 where
robert@@, beck@@ and sthen@@ agreed it was the correct way to go and I should move
ahead with it post 6.1.

If you see any regression, please talk to me!
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.118 2017/02/17 16:42:41 ajacoutot Exp $
d94 2
a95 1
			_rc_do rc_check && break
@


1.118
log
@Stop supporting the historical way of starting ypbind(8); that is setting
'ypbind_flags=""' when domainname is set and /var/yp/binding exists.
This can lead to inconsistent behavior at startup since /var may not be
mounted yet and /etc/rc's start_daemon() will not start ypbind.

A.K.A. make ypbind startup consistent with all other OpenBSD daemons.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.117 2017/01/24 01:11:11 ajacoutot Exp $
d3 1
a3 1
# Copyright (c) 2010, 2011, 2014-2016 Antoine Jacoutot <ajacoutot@@openbsd.org>
d82 7
d91 10
d103 1
a103 1
		reload|start)
d170 1
a170 1
	${rcexec} "${daemon} ${daemon_flags} ${_bg}"
d186 1
a186 1
	local _bg _n
a198 1
	[ X"${rc_bg}" = X"YES" ] && _bg="&"
d219 6
a224 2
			_rc_do rc_start || break
			_rc_do _rc_wait start || break
@


1.117
log
@Whitespace.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.116 2016/09/07 13:12:42 ajacoutot Exp $
a116 5
	fi

	# in case domainname is set and /var/yp/binding exists enable ypbind
	if [ X"`domainname`" != X"" -a -d /var/yp/binding ]; then
		ypbind_flags=
@


1.116
log
@Introduce an _rc_check_name() function to check the input script name so that
we don't end up with cryptic error messages.
Regex help from rpe@@
Issue reported by Anthony Coulter in rcctl(8), but better fix the root cause.

Also clarify the mage page that rc.d script name must follow ksh(1) variable
naming.

ok robert@@ sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.115 2016/08/31 08:47:11 ajacoutot Exp $
d102 1
a102 1
	if [  X"${spamd_flags}" = X"NO" -o X"${spamd_black}" != X"NO" ]; then
d204 1
a204 1
		while true; do  # no real loop, only needed to break
@


1.115
log
@use tab.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.114 2016/05/03 08:59:29 otto Exp $
d63 4
d245 3
a259 1
_name=$(basename $0)
@


1.114
log
@signal name should be first, fixes reload; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.113 2016/04/28 09:15:16 ajacoutot Exp $
d81 1
a81 1
    		case "$1" in
@


1.113
log
@Experiment on matching on the daemon_user is over. It needs more work.
portmap isn't happy with it as reported by naddy@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.112 2016/04/27 17:29:50 ajacoutot Exp $
d162 1
a162 1
	pkill -T "${daemon_rtable}" -HUP -xf "${pexp}"
@


1.112
log
@Revert the revert and match on the daemon_user again.
We'll see if something else breaks but it's the right thing to do.

discussed with robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.110 2016/04/26 17:00:20 ajacoutot Exp $
d158 1
a158 1
	pgrep -T "${daemon_rtable}" -U "${daemon_user}" -q -xf "${pexp}"
d162 1
a162 1
	pkill -T "${daemon_rtable}" -U "${daemon_user}" -HUP -xf "${pexp}"
d166 1
a166 1
	pkill -T "${daemon_rtable}" -U "${daemon_user}" -xf "${pexp}"
@


1.111
log
@Revert matching on the daemon user for now; it breaks sndiod handling which
does start as root but does not have a root master process and instead
changed its uid.

reported by deraadt@@
@
text
@d158 1
a158 1
	pgrep -T "${daemon_rtable}" -q -xf "${pexp}"
d162 1
a162 1
	pkill -T "${daemon_rtable}" -HUP -xf "${pexp}"
d166 1
a166 1
	pkill -T "${daemon_rtable}" -xf "${pexp}"
@


1.110
log
@Bump copyright.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.109 2016/04/26 16:59:15 ajacoutot Exp $
d158 1
a158 1
	pgrep -T "${daemon_rtable}" -U "${daemon_user}" -q -xf "${pexp}"
d162 1
a162 1
	pkill -T "${daemon_rtable}" -U "${daemon_user}" -HUP -xf "${pexp}"
d166 1
a166 1
	pkill -T "${daemon_rtable}" -U "${daemon_user}" -xf "${pexp}"
@


1.109
log
@Introduce rtable(4) support to rc.subr(8).
It works by adding daemon_rtable=$id in /etc/rc.conf.local.
rcctl(8) support coming in a few and so are the man pages bits.

If you want multiple instances of the same daemon running in different
routing tables, just symlink the original rc.d script.
e.g.
# cd /etc/rc.d && ln -s dhcpd dhcpd42

Then enable your daemons as such in rc.conf.local:
dhcpd_flags=
dhcpd42_flags=
dhcpd42_rtable=42

most work done by Jiri B <jirib@@devio.us>; with a few tweaks and simplifications
by yours truly
ok robert@@

... should make henning happy ;-)
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.108 2016/04/26 16:39:59 ajacoutot Exp $
d3 1
a3 1
# Copyright (c) 2010, 2011, 2014, 2015 Antoine Jacoutot <ajacoutot@@openbsd.org>
@


1.108
log
@Extend _RC_RUNFILE (/var/run/rc.d/scriptname) content with:
daemon_class, daemon_flags, daemon_timeout, daemon_user, pexp

Add "pexp" as a valid variable to _rc_parse_conf() and sort the list while here.

Besides having an easy way to see how a daemon was started exactly, it opens the
door to rdomain/rtable support in rc.d(8). We need to have as much information
on a daemon as possible if we want to target a specific rtable (using -T) and it
also makes it easier to start multiple instances of the same daemon with similar
flags as a different user...
Of course that only works with rc.d scripts *not* overwritting the default rc_*
functions.

Man page tweaks coming later.

discussed with and ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.107 2016/03/26 13:59:36 ajacoutot Exp $
d52 1
d134 1
a134 1
			[[ $_key == *_@@(flags|user|timeout) ]] || \
d158 1
a158 1
	pgrep -U "${daemon_user}" -q -xf "${pexp}"
d162 1
a162 1
	pkill -U "${daemon_user}" -HUP -xf "${pexp}"
d166 1
a166 1
	pkill -U "${daemon_user}" -xf "${pexp}"
d261 1
d268 1
d277 1
d288 1
a288 1
unset _rcflags _rcuser _rctimeout
d291 2
@


1.107
log
@Make it possible to get usage as a non-root user.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.106 2016/03/26 09:21:24 ajacoutot Exp $
d49 7
a55 7
		print -rn -- "${pexp}" > ${_RC_RUNFILE}
}

_rc_read_runfile() {
	local _new_pexp
	[ -f ${_RC_RUNFILE} ] && _new_pexp=$(< ${_RC_RUNFILE})
	[ -n "${_new_pexp}" ] && pexp="${_new_pexp}"
d124 2
a125 3
		spamd_black pf ipsec check_quotas accounting \
		multicast amd_master \
		shlib_dirs pkg_scripts nfs_server
d157 1
a157 1
	pgrep -q -xf "${pexp}"
d161 1
a161 1
	pkill -HUP -xf "${pexp}"
d165 1
a165 1
	pkill -xf "${pexp}"
d185 1
a185 1
	_rc_do _rc_read_runfile
@


1.106
log
@Handle the rc_stop=NO => rc_restart=NO case within _rc_not_supported().
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.105 2015/12/21 10:18:05 ajacoutot Exp $
d3 1
a3 1
# Copyright (c) 2010, 2011, 2014 Antoine Jacoutot <ajacoutot@@openbsd.org>
d171 2
@


1.105
log
@Revert, rc.d scripts have been fixed.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.104 2015/12/21 09:29:12 ajacoutot Exp $
d28 1
a28 1
	local _a _enotsup
d30 3
a32 2
		if [ "${1}" == "${_a}" ]; then
			eval _enotsup=\${rc_$1}
a175 4
	if _rc_not_supported start || _rc_not_supported stop; then
		rc_restart=NO
	fi

d230 1
a230 1
		$0 ${_RC_DEBUG} ${_RC_FORCE} stop &&
@


1.104
log
@Comment the wait for start until I fix the x11 managers rc.d script.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.103 2015/12/19 14:10:41 ajacoutot Exp $
d206 1
a206 1
			#_rc_do _rc_wait start || break
@


1.103
log
@After starting, unconditionally wait up to $daemon_timeout seconds to check that
the daemon is actually running (instead of only when using rc_bg).

This *may* trigger the following side effect: if a daemon starts then stops
right away (because of a config parsing issue for e.g.), then it will slow down
the boot process because rc will wait a bit before considering the start action
failed. But at least it will allow us to detect those daemons and fix them or
their rc.d(8) script.

At least as far as I can tell, all base daemons should cope with it just fine.

ok sthen@@ robert@@ on an earlier diff
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.102 2015/12/19 11:19:17 ajacoutot Exp $
d206 1
a206 1
			_rc_do _rc_wait start || break
@


1.102
log
@Tidy up _rc_wait().

ok sthen@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.101 2015/12/05 18:43:12 mpi Exp $
a204 2
			# XXX only checks the status of the return code,
			# and _not_ that the daemon is actually running
d206 1
a206 4
			if [ -n "${_bg}" ]; then
				sleep 1
				_rc_do _rc_wait start || break
			fi
@


1.101
log
@It does not make sense to insert a specific route for 224/4 when the
default one is good enough.

So merge rc.conf(8)'s 'multicast_router' and 'multicast_host' into a
single 'multicast'.  If set to YES the reject route for 224/4 is not
inserted by netstart(8).

Manual bits from jmc@@

ok henning@@, ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.100 2015/10/16 20:12:00 ajacoutot Exp $
d79 7
a85 10
		case "$1" in
			reload|start)
				_rc_do rc_check && return 0
				;;
			stop)
				_rc_do rc_check || return 0
				;;
			*)
				break
				;;
@


1.100
log
@Missing local.

ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.99 2015/07/15 13:48:16 ajacoutot Exp $
d127 1
a127 1
		multicast_host multicast_router amd_master \
@


1.99
log
@By default, require an exact match of the process name and argument list.
This allows running several instances of the same rc.d(8) script by just
linking it to different name.
e.g.
ln -s ftpproxy ftpproxy6
echo 'ftpproxy6_flags=-6' >>/etc/rc.conf.local

This is likely to break some rc.d scripts in ports. I will try and fix them all
in the next few days but I'd appreciate reports if I missed some.

ok halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.98 2015/07/15 12:26:25 ajacoutot Exp $
d124 1
a124 1
	local _l _val
@


1.98
log
@Always use the default flags when running !start.
This is necessary so that rc.d scripts launched with `-f' can be properly
stopped, checked and reloaded.

ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.97 2015/07/15 03:21:38 ajacoutot Exp $
d160 1
a160 1
	pgrep -q -f "^${pexp}"
d164 1
a164 1
	pkill -HUP -f "^${pexp}"
d168 1
a168 1
	pkill -f "^${pexp}"
@


1.97
log
@Merge comments.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.96 2015/06/17 07:50:38 ajacoutot Exp $
d279 4
a282 1
[ -n "${_RC_FORCE}" ] && [ X"${_rcflags}" = X"NO" ] && unset _rcflags
@


1.96
log
@Really make daemon_class read-only; it's set to "daemon" of a matching
login class.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.95 2015/05/02 09:36:27 ajacoutot Exp $
d273 1
a273 1
# set default values
a275 1
# duplicated in rcctl(8)
@


1.95
log
@No more pf_rules ipsec_rules.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.94 2015/04/29 11:05:16 ajacoutot Exp $
d273 1
d275 2
a276 4
	daemon_class=${_name}

# set default values; duplicated in rcctl(8)
[ -z "${daemon_class}" ] && daemon_class=daemon
@


1.94
log
@Check arguments before eval so we don't end up with a cryptic error message.
reported by jasper@@

While here: _rc_is_supported() -> _rc_not_supported()
- saves a fork
- reduces triple negation to double negation in _rc_not_supported()
- simplifie condition for rc_restart=NO
from schwarze@@

ok jasper@@ schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.93 2015/03/28 07:34:16 ajacoutot Exp $
d128 1
a128 2
		pf_rules ipsec_rules shlib_dirs pkg_scripts \
		nfs_server
@


1.93
log
@_rc_err(): only display error message if there's an actual one.
Remove an exit() statement that could never be reached.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.92 2015/01/02 14:44:05 ajacoutot Exp $
d19 3
d27 9
a35 4
_rc_is_supported() {
	local _enotsup
	eval _enotsup=\${rc_$1}
	[ X"${_enotsup}" != X"NO" ]
d40 2
a41 2
	for _a in start stop restart reload check; do
		_rc_is_supported ${_a} && _allsup="${_allsup:+$_allsup|}${_a}"
d179 1
a179 1
	if ! (_rc_is_supported start && _rc_is_supported stop); then
d183 1
a183 1
	if ! _rc_is_supported $1; then
@


1.92
log
@Fix return code of _rc_quirks().
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.91 2015/01/02 08:03:28 ajacoutot Exp $
d20 1
a20 1
	echo "$1" 1>&2
a193 1
			exit 1
@


1.91
log
@Add a comment about the default values being duplicated in rcctl(8).
discussed with schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.90 2014/11/17 13:52:44 ajacoutot Exp $
d109 3
a111 1
	[ X"`domainname`" != X"" -a -d /var/yp/binding ] && ypbind_flags=
@


1.90
log
@"reload" should fail if the service is not running in the first place.

ok robert@@ sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.89 2014/08/30 20:33:27 ajacoutot Exp $
a18 3

# Default functions and variables used by rc.d(8) scripts.

d143 1
d268 1
@


1.89
log
@Make it possible to pass a specific error code to _rc_err().

ok robert@@ schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.88 2014/08/25 07:34:12 ajacoutot Exp $
a228 1
		_rc_do rc_check || exit 0
d230 1
a230 1
		_rc_do rc_reload || _rc_exit failed
@


1.88
log
@Put _rc_err argument under quotes to respect the syntax we are passing.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.87 2014/08/24 17:15:24 ajacoutot Exp $
d24 1
a24 1
	exit 1
@


1.87
log
@Fix reversed logic.

ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.86 2014/08/24 13:32:53 ajacoutot Exp $
d23 1
a23 1
	echo $1 1>&2
@


1.86
log
@Drop uneeded parenthesis in usage().

ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.85 2014/08/24 13:30:27 ajacoutot Exp $
d282 1
a282 1
	[ -n "${_rcflags}" ] && echo -n "empty, using default "
@


1.85
log
@Drop unused variables.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.84 2014/08/24 13:29:16 ajacoutot Exp $
d38 1
a38 1
	_rc_err "usage: $0 [-df] (${_allsup})"
@


1.84
log
@In debug mode, make it clear when we are using the default flags when
none are set.

initial patch from me but reworked by schwarze@@
ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.83 2014/08/24 07:55:20 ajacoutot Exp $
d117 1
a117 1
	local _conf _i _l _val
a139 1
			_conf="${_conf} ${_key}"
@


1.83
log
@In debug mode (`-d'), only print the flags relevant to the rc.d(8) we are
calling instead of all flags which makes it very difficult to see the
information we actually need.

ok schwarze@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.81 2014/08/17 14:41:03 ajacoutot Exp $
a144 4

	if [ -n "${_RC_DEBUG}" ]; then
		echo "${_name}_flags >$(eval echo \${${_name}_flags})<"
	fi
d280 6
@


1.82
log
@Drop sanitation, _rc_parse_conf does this for us already.

ok schwarze@@
@
text
@d147 1
a147 3
		for _i in ${_conf}; do
			printf "%18s\t>$(eval echo '$'${_i})<\n" ${_i}
		done | sort -uk 1b
@


1.81
log
@When running interactively, display the output of the "check" action
(ok or failed) like we do with all other actions.

ok jung@@ rpe@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.80 2014/08/11 20:24:57 ajacoutot Exp $
a286 3
# sanitize
daemon_flags=$(printf ' %s' ${daemon_flags})
daemon_flags=${daemon_flags## }
d288 1
a288 2
unset _rcflags _rcuser

@


1.80
log
@Typo.

ok kili@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.79 2014/08/11 20:16:04 kili Exp $
d194 3
a196 1
		_rc_do rc_check
@


1.79
log
@Let _rc_parse_conf stick to parsing /etc/rc.conf and /etc/rc.conf.local
if it's invoked without parameters. It's simpler than adding adding
/etc/rc.conf and /etc/rc.conf.local parameters whereever _rc_parse_conf
is used (e.g. /etc/rc and /etc/netstart).

While here, replace a

        for foo in "$@@"; do something; done

by

        for foo; do something; done

ok aja@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.78 2014/08/11 13:25:23 ajacoutot Exp $
d124 1
a124 1
	[ $# -gt 0 ] || set -- /etc/rc.conf /etc.rc.conf.local
@


1.78
log
@Make it possible to pass arguments to _rc_parse_conf().

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.77 2014/08/01 04:57:01 rpe Exp $
d124 2
a125 1
	for _rcfile in $@@; do
d267 1
a267 1
_rc_do _rc_parse_conf /etc/rc.conf /etc/rc.conf.local
@


1.77
log
@Don't return, just skip over non existing rc.conf or rc.conf.local file.

OK ajacoutot@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.76 2014/07/31 14:57:41 ajacoutot Exp $
a117 2
	local _rcconf="/etc/rc.conf"
	local _rcconf_local="/etc/rc.conf.local"
d124 1
a124 1
	for _rcfile in $_rcconf $_rcconf_local; do
d266 1
a266 1
_rc_do _rc_parse_conf
@


1.76
log
@In debug mode, properly sort and drop duplicates so that we don't end
up with a confusing output like:
multicast_host      >NO<
<...>
multicast_host      >YES<

Also properly evaluate values _after_ running _rc_quirks() because these
can modify flags.

ok robert@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.75 2014/07/30 13:18:59 ajacoutot Exp $
d127 1
a127 1
		[[ -f $_rcfile ]] || return
@


1.75
log
@Fix evil typo (multicast_hosts -> multicast_host).
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.74 2014/07/12 15:32:43 robert Exp $
d117 1
a117 1
	local _l _val
a139 1
			[ -n "${_RC_DEBUG}" ] && printf "%18s\t>$_val<\n" $_key
d141 1
d146 6
@


1.74
log
@replace the heavy shell magic in quirks to handle backward compat with simpler
methods
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.73 2014/07/12 10:14:03 robert Exp $
d122 1
a122 1
		multicast_hosts multicast_router amd_master \
@


1.73
log
@Make rc.conf a parsed configuration file and stop sourcing it as a shell
script.
From now on rc.conf has a fixed syntax (key=val) and it is not allowed
to add anything to it besides the supported syntax, it all going to be
ignored.

discussed with and help from deraadt@@ and halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.72 2014/07/09 14:19:22 ajacoutot Exp $
a91 2
	unset mountd_flags nfsd_flags ypbind_flags

d104 9
a112 3
	: ${mountd_flags=$([ X"${nfs_server-NO}" = XYES ] || echo NO)}
	: ${nfsd_flags=$([ X"${nfs_server-NO}" = XYES ] && echo "-tun 4" || echo NO)}
	: ${ypbind_flags=$([ X"`domainname`" != X"" -a -d /var/yp/binding ] || echo NO)}
@


1.72
log
@Add a daemon_timeout variable for rc_wait().
It represents the maximum time in seconds to wait for the start, stop
and reload actions to return. Defaults to "30".
No default behavior is changed.

ok beck@@ sthen@@ jasper@@ giovanni@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.71 2014/07/09 10:59:35 ajacoutot Exp $
d5 1
a5 1
# Copyright (c) 2010, 2011 Robert Nagy <robert@@openbsd.org>
d22 1
a22 1
rc_err() {
d27 1
a27 1
rc_is_supported() {
d33 1
a33 1
rc_usage() {
d36 1
a36 1
		rc_is_supported ${_a} && _allsup="${_allsup:+$_allsup|}${_a}"
d38 1
a38 1
	rc_err "usage: $0 [-df] (${_allsup})"
d41 1
a41 1
rc_write_runfile() {
d46 1
a46 1
rc_read_runfile() {
d52 1
a52 1
rc_rm_runfile() {
d56 1
a56 17
rc_start() {
	${rcexec} "${daemon} ${daemon_flags} ${_bg}"
}

rc_check() {
	pgrep -q -f "^${pexp}"
}

rc_reload() {
	pkill -HUP -f "^${pexp}"
}

rc_stop() {
	pkill -f "^${pexp}"
}

rc_do() {
d64 1
a64 1
rc_exit() {
d71 1
a71 1
rc_wait() {
d76 1
a76 1
				rc_do rc_check && return 0
d79 1
a79 1
				rc_do rc_check || return 0
d91 71
d167 1
a167 1
		rc_err "$0: need root privileges"
d169 1
a169 1
	if ! (rc_is_supported start && rc_is_supported stop); then
d173 1
a173 1
	if ! rc_is_supported $1; then
d175 1
a175 1
		rc_err "$0: $1 is not supported"
d181 1
a181 1
	rc_do rc_read_runfile
d185 1
a185 1
		rc_do rc_check
d189 1
a189 1
			rc_err "$0: need -f to force $1 since ${_name}_flags=NO"
d192 1
a192 1
		[ -z "${INRC}" ] && rc_do rc_check && exit 0
d196 1
a196 1
				rc_do rc_pre || break
d200 1
a200 1
			rc_do rc_start || break
d203 1
a203 1
				rc_do rc_wait start || break
d205 2
a206 2
			rc_do rc_write_runfile
			rc_exit ok
d209 3
a211 3
		type rc_post >/dev/null && rc_do rc_post
		rc_do rc_rm_runfile
		rc_exit failed
d214 1
a214 1
		rc_do rc_check || exit 0
d216 2
a217 2
		rc_do rc_stop || rc_exit failed
		rc_do rc_wait stop || rc_exit failed
d219 1
a219 1
			rc_do rc_post || rc_exit failed
d221 2
a222 2
		rc_do rc_rm_runfile
		rc_exit ok
d225 1
a225 1
		rc_do rc_check || exit 0
d227 3
a229 3
		rc_do rc_reload || rc_exit failed
		rc_do rc_wait reload || rc_exit failed
		rc_exit ok
d236 1
a236 1
		rc_usage
d241 1
a241 3
. /etc/rc.conf

[ -n "${daemon}" ] || rc_err "$0: daemon is not set"
d248 1
a248 1
		*) rc_usage;;
d256 3
@


1.71
log
@White spaces.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.70 2013/07/11 09:34:33 otto Exp $
d3 1
a3 1
# Copyright (c) 2010, 2011 Antoine Jacoutot <ajacoutot@@openbsd.org>
d88 2
a89 2
	local _i=0 _w=${2:-30}
	while [ $_i -lt $_w ]; do
d206 1
d213 1
d218 1
@


1.70
log
@no double negatives in error message; ok aja@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.69 2013/04/04 06:50:44 zhuk Exp $
d211 1
a211 1
[ -z "${daemon_user}"  ] && daemon_user=root
d215 1
a215 1
[ -n "${_rcuser}"  ] && daemon_user=${_rcuser}
@


1.69
log
@Show only available actions in RC script usage messages.
Also, prettify representation of actions list a bit.

a lot of input and ok halex@@ aja@@
also ok schwarze@@
small nit spotted by marc@@
"makes a lot of sense to me" todd@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.68 2012/11/19 07:10:59 ajacoutot Exp $
d134 1
a134 1
			rc_err "$0: no $1 without -f, ${_name}_flags=NO"
@


1.68
log
@Remove useless test: rc_rm_runfile() uses rm -f which always returns 0
so we don't care if the file is present or not; also this function
should never return a failure.

ok halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.67 2012/11/18 18:54:52 ajacoutot Exp $
d27 6
d34 5
a38 1
	rc_err "usage: $0 [-df] {start|check|reload|restart|stop}"
d108 1
a108 1
	local _bg _enotsup _n
d114 5
a118 2
	eval _enotsup=\${rc_${1}}
	if [ X"${_enotsup}" = X"NO" ]; then
@


1.67
log
@Don't output "$action is not supported" when running an rc.d(8) script
from /etc/rc(8). This prevents the warning to be displayed at shutdown
time when the script has rc_stop=NO.

req. and input from fgsch@@

"go ahead" schwarze@@
input from an ok halex@@, ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.66 2012/11/12 08:07:53 ajacoutot Exp $
d43 1
a43 1
	[ -f ${_RC_RUNFILE} ] && rm -f ${_RC_RUNFILE}
@


1.66
log
@Don't check if ${local_rcconf} is defined before sourcing rc.conf but do
it unconditionally.
The only place local_rcconf could have been defined is from /etc/rc
sourcing rc.conf but then the variable is not exported so it will never
be seen by rc.subr.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.65 2012/09/13 05:55:21 ajacoutot Exp $
d105 4
a108 1
	[ X"${_enotsup}" != X"NO" ] || rc_err "$0: $1 is not supported"
@


1.65
log
@Simplify the way we call the rc.d(8) script in "restart".

ok sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.64 2012/09/01 07:08:37 ajacoutot Exp $
d170 1
a170 1
[ -z "${local_rcconf}" ] && . /etc/rc.conf
@


1.64
log
@Make '-f' only affects the "start" action.
There is no reason we couldn't reload|stop a daemon even when _flags is
set to NO.
As a bonus side effect, we can now see usage() on disabled scripts.

discussed with sthen@@ and espie@@
ok sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.63 2012/08/21 06:38:52 ajacoutot Exp $
d161 2
a162 2
		/etc/rc.d/${_name} ${_RC_DEBUG} ${_RC_FORCE} stop &&
			/etc/rc.d/${_name} ${_RC_DEBUG} ${_RC_FORCE} start
@


1.63
log
@Use the new "-q" option of pgrep(1) instead of redirecting stdout
to /dev/null.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.62 2012/08/13 10:10:07 ajacoutot Exp $
a103 9
	if [ -z "${_RC_FORCE}" ] && [ X"${daemon_flags}" = X"NO" ]
	then
		if [ -n "${_RC_DEBUG}" ]
		then
			rc_err "$0: no $1 without -f, ${_name}_flags=NO"
		fi
		exit 1
	fi

d117 4
@


1.62
log
@unset _rcflags and _rcuser so that they don't get inherited by rc.d(8)
scripts; from robert at peichaer dot org
ok halex@@

While here, put the "sanitation" commands in their own block.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.61 2012/08/13 08:08:00 ajacoutot Exp $
d51 1
a51 1
	pgrep -f "^${pexp}" >/dev/null
@


1.61
log
@Set the daemon_class as readonly as it should be (and is documented as
such).

from robert at peichaer dot org
modified after a discussion with halex@@
ok halex@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.60 2012/08/11 17:55:58 ajacoutot Exp $
d206 1
d209 3
a213 1
readonly daemon_class
@


1.60
log
@Make a couple of variables local.

from robert at peichaer dot org
ok halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.59 2012/08/04 15:30:25 ajacoutot Exp $
d210 1
@


1.59
log
@Add a new rc_usercheck variable (default to YES). When set to no, root
privilege is needed to run rc_check.
In effect this means /etc/rc.d/foobar check can now be run as a regular
user.
Discussed with robert@@ during g2k12.

ok todd@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.58 2012/07/07 10:28:07 ajacoutot Exp $
d71 1
d98 1
a98 1
	local _bg _n
@


1.58
log
@Simplify rc_wait() (no functionnal change).

initially from robert at peichaer dot org with some enhancement by halex@@
ok halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.57 2012/05/30 08:19:14 espie Exp $
d51 1
a51 1
	pkill -0 -f "^${pexp}"
d99 4
a172 2

[ $(id -u) -eq 0 ] || rc_err "$0: need root privileges"
@


1.57
log
@in -d mode, display an error message before exiting, in the case the
daemon is not active (happens often to me, as I forget which box has
which daemons).

okay ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.56 2011/11/30 08:06:02 ajacoutot Exp $
d77 2
a78 3
	i=0
	[ -n "$2" ] && w=$2 || w=30
	while [ $i -lt $w ]; do
d91 1
a91 1
		i=$((i+1))
@


1.56
log
@Fix an issue when uid != euid (e.g. when running shutdown(8) as a
regular user, member of the operator group); rm(1) was waiting for
interactive input to remove the runfiles which made no sense, so just
use `-f'.

issue spotted by weerd@@
ok weerd@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.55 2011/10/15 16:05:15 halex Exp $
d100 8
a107 1
	[ -z "${_RC_FORCE}" ] && [ X"${daemon_flags}" = X"NO" ] && exit 1
@


1.55
log
@either set or unset variables that are to be examined further on, don't
just leave them untouched

ok ajacoutot@@ sthen@@ schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.54 2011/10/12 23:04:02 schwarze Exp $
d43 1
a43 1
	[ -f ${_RC_RUNFILE} ] && rm ${_RC_RUNFILE}
@


1.54
log
@Localize _new_pexp unconditionally, or rc_read_runfile()
might pick it up from a polluted environment.
Requested by halex@@, ok ajacoutot@@ halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.53 2011/10/09 16:46:55 schwarze Exp $
d98 2
d105 2
a106 2
	[ X"${rc_bg}" = X"YES" ] && local _bg="&"
	[ -n "${_RC_DEBUG}" ] || local _n="-n"
@


1.53
log
@When the _RC_RUNFILE (by some ill chance) happened to be empty or
reading it failed, ${pexp} ended up as the empty string and the script
would send SIGTERM to init(1), which was really inconvenient.
Fix that by never allowing pexp to become empty.
My patch considerably simplified by and ok  ajacoutot@@.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.52 2011/10/09 08:48:53 ajacoutot Exp $
d37 2
a38 1
	[ -f ${_RC_RUNFILE} ] && local _new_pexp=$(< ${_RC_RUNFILE})
@


1.52
log
@Finally make it possible to restart/stop a daemon after having changed
its _flags in rc.conf(8).
When the rc.d(8) system starts a daemon, it will record its pexp under
/var/run/rc.d/rcscriptname and use that to interact with it (errors in
creating /var/run/rc.d or missing pexp file are non fatal, the framework
will just fallback to what it currently does).

deraadt@@ doesn't mind a long as it doesn't come in the way of people
manually managing their daemons.

discussed with and input from sthen@@ halex@@ robert@@ schwarze@@
ok sthen@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.51 2011/10/07 07:26:49 ajacoutot Exp $
d37 2
a38 1
	[ -f ${_RC_RUNFILE} ] && pexp=$(< ${_RC_RUNFILE})
@


1.51
log
@Check if we are root right from the start.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.50 2011/10/07 07:17:25 ajacoutot Exp $
d31 13
d104 2
d124 1
d129 1
d140 1
d177 3
@


1.50
log
@Prepend an underscore to internal variable names; this was reverted by
mistake in the previous commit.
No functionnal change.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.49 2011/09/25 17:55:14 halex Exp $
a82 3
	[ $(id -u) -eq 0 ] || \
		rc_err "$0: need root privileges"

d141 2
@


1.49
log
@revert previous and pass on the RC_DEBUG and RC_FORCE flags in the start+stop
dance on restart rather than exporting them and expose the script to a
potentially polluted environment

ok ajacoutot@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.47 2011/09/22 08:15:01 ajacoutot Exp $
d48 1
a48 1
	if [ -n "${RC_DEBUG}" ]; then
d86 1
a86 1
	[ -z "${RC_FORCE}" ] && [ X"${daemon_flags}" = X"NO" ] && exit 1
d92 1
a92 1
	[ -n "${RC_DEBUG}" ] || local _n="-n"
d105 2
d136 2
a137 2
		/etc/rc.d/${_name} ${RC_DEBUG} ${RC_FORCE} stop &&
			/etc/rc.d/${_name} ${RC_DEBUG} ${RC_FORCE} start
d149 1
a149 1
unset RC_DEBUG RC_FORCE
d152 2
a153 2
		d) RC_DEBUG=-d;;
		f) RC_FORCE=-f;;
d169 1
a169 1
[ -n "${RC_FORCE}" ] && [ X"${_rcflags}" = X"NO" ] && unset _rcflags
@


1.48
log
@Repair "restart" debug and force modes (we need to export RC_DEBUG and
RC_FORCE since "restart" calls "stop" then "start").
While here, append "_" to these variable names to make it clear they are
internal.

ok robert@@
@
text
@d48 1
a48 1
	if [ -n "${_RC_DEBUG}" ]; then
d86 1
a86 1
	[ -z "${_RC_FORCE}" ] && [ X"${daemon_flags}" = X"NO" ] && exit 1
d92 1
a92 1
	[ -n "${_RC_DEBUG}" ] || local _n="-n"
d134 2
a135 1
		/etc/rc.d/${_name} stop && /etc/rc.d/${_name} start
d147 1
d150 2
a151 2
		d) export _RC_DEBUG=1;;
		f) export _RC_FORCE=1;;
d167 1
a167 1
[ -n "${_RC_FORCE}" ] && [ X"${_rcflags}" = X"NO" ] && unset _rcflags
@


1.47
log
@Add missing "*)" case statement and make sure RC_DEBUG and RC_FORCE are
unset beforehands; prodded by halex@@

Add rc_usage().

ok halex@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.46 2011/09/19 20:41:50 robert Exp $
d48 1
a48 1
	if [ -n "${RC_DEBUG}" ]; then
d86 1
a86 1
	[ -z "${RC_FORCE}" ] && [ X"${daemon_flags}" = X"NO" ] && exit 1
d92 1
a92 1
	[ -n "${RC_DEBUG}" ] || local _n="-n"
a145 1
unset RC_DEBUG RC_FORCE
d148 2
a149 2
		d) RC_DEBUG=1;;
		f) RC_FORCE=1;;
d165 1
a165 1
[ -n "${RC_FORCE}" ] && [ X"${_rcflags}" = X"NO" ] && unset _rcflags
@


1.46
log
@Use arugments for rc script instead of environment variables to indicate
debug mode.
This commit also adds a force mode for the script to allow one to force
operations even if daemon_flags is set to NO.
In this case the sane default values will be used for each script.

e.g.: "/etc/rc.d/foo -f start" will start sshd even if it's disabled

ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.45 2011/07/31 20:22:34 robert Exp $
d27 4
d137 2
a138 1
		rc_err "usage: $0 {start|check|reload|restart|stop}"
d146 1
d151 1
@


1.45
log
@when reloading do an rc_wait instead of just an rc_check
from david@@, okay sthen@@ and input from schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.44 2011/07/31 20:18:45 robert Exp $
d82 1
a82 1
	[ X"${daemon_flags}" = X"NO" ] && exit 1
d141 8
d159 1
@


1.44
log
@redirect rc_err() output to stderr, from david@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.43 2011/07/23 22:41:44 sthen Exp $
d62 1
a62 1
			start)
d126 1
a126 1
		rc_do rc_check || rc_exit failed
@


1.43
log
@Print the daemon name before starting, and ok/failed afterwards, providing
better visual cues as to what's happening. Feedback/ok aja@@ schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.42 2011/07/08 18:57:49 robert Exp $
d23 1
a23 1
	echo $1
@


1.42
log
@add license, ok ajacoutot@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.41 2011/07/07 17:37:30 ajacoutot Exp $
d53 1
a53 1
	echo ${INRC:+'-n'} "${INRC:+ }${_name}${_pfix}"
d88 1
d96 1
d114 1
d124 1
@


1.41
log
@Fix reload:
* if we try to reload a non running daemon, just exit gracefully, like
we do for 'stop'
* add an rc_check call right after rc_reload to make sure the daemon is
still around; until now we only checked the pkill(1) return code but
that is not enough

ok robert@@
@
text
@d1 18
a18 1
#	$OpenBSD: rc.subr,v 1.40 2011/07/06 18:55:36 robert Exp $
@


1.40
log
@Add rc.d(8) script for the system daemons that are restartable.
From now on rc(8) is going to call these scripts to start them up on boot
in the same order than before.
In addition the inetd and rwhod variables in rc.conf are deprecated so that
inetd_flags and rwhod_flags should be used. The old flags are still going
to be used for some time to allow users to switch.
There are more rc modifications to come later so let's put this in so
we can base more work on this.
It is important to mention that you can still keep using rc.local just
like the way you did before, and we have no intention to remove that either.

I'd also like to thank ajacoutot@@, halex@@, sthen@@ and schwarze@@ for working
on this with me.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.39 2011/07/03 16:09:06 schwarze Exp $
d103 2
a105 1
		rc_do rc_reload || rc_exit failed
@


1.39
log
@let reload report (ok) or (failed) just like all other actions;
ajacoutot@@ and robert@@ couldn't really remember the reason to be different,
either
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.38 2011/06/20 21:26:27 schwarze Exp $
d77 1
a77 1
		rc_do rc_check && exit 0
@


1.38
log
@Refactoring for simplicity, no functional change:
* Instead of nesting subshells, perform a linear series of operations
and bail out as soon as one of them fails.
* Rename rc_print to rc_exit, let it calculate the exit code itself
and let it exit, considerably simplifying error handling; new name
suggested by sthen@@.
OK ajacoutot@@ sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.37 2011/06/10 08:43:26 ajacoutot Exp $
d103 1
a103 1
		rc_do rc_check || exit 1
d105 1
@


1.37
log
@Finally deal with background processes: "rc_cmd start" will now return
the correct code according whether the daemon did start successfully or
not.

rc_wait()
This function has been extended, first we need to pass in which mode we
are running (start or stop) and second we can pass a number of seconds
to wait (optionnal, will default to 30s).
The function will return the correct code whether we are running during
"rc_cmd start" or "rc_cmd stop".

rc_cmd() start
If we are running in background mode, then we call rc_wait with the
"start" argument.
The sleep(1) is needed to prevent a race condition where the process
will appear in the list before failing and rc_check will see it as
running. Call rc_post() when failing to prevent being left in an
inconsistent state (because rc_pre() would have run successfully)

rc_cmd() stop
We are now calling rc_wait with the "stop" argument.

"looks good" sthen@@, ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.36 2011/05/19 09:50:50 ajacoutot Exp $
d34 1
a34 2
rc_print() {
	_ret=$?
d37 1
a37 1
	return ${_ret}
d77 2
a78 2
		rc_do rc_check || \
			(
d80 1
a80 1
				rc_do rc_pre
d82 10
a91 15
			[ $? -eq 0 ] && rc_do rc_start
			[ $? -eq 0 ] && \
				if [ -n "${_bg}" ]; then
					sleep 1 && rc_do rc_wait start
				else
					: # do nothing
				fi
			[ $? -eq 0 ] && \
				rc_print ok || \
					(
					type rc_post >/dev/null && rc_do rc_post
					rc_print failed
					return 1
					)
			)
d94 5
a98 12
		if rc_do rc_check; then rc_do rc_stop || \
			( rc_print failed ) && \
			(
				rc_do rc_wait stop &&
				(
				if type rc_post >/dev/null; then \
					rc_do rc_post
				fi
				) && rc_print ok || rc_print failed
			)
		else
			return 0
d100 1
d103 2
a104 1
		rc_do rc_check && ( rc_do rc_reload || rc_print failed )
@


1.36
log
@Setting RC_DEBUG is enough, it does not need to be explicitely set to
"1".

hint from MERIGHI Marcus
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.35 2011/04/09 15:39:22 schwarze Exp $
d43 13
a55 2
	while [ $i -lt 30 ]; do
		rc_do rc_check || return 0
d83 1
d85 12
a96 2
				rc_do rc_start && \
				rc_print ok || rc_print failed
d103 1
a103 1
				rc_do rc_wait &&
@


1.35
log
@Fix multiple issues and make the code simpler and more robust:
 - As noticed by ajacoutot@@, re_format(7) does not treat '\t' as a tab,
   so some t's got stripped from daemon names.
 - The tr(1) failed to sanitize mixtures of blanks and tabs.
ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.34 2011/04/06 17:10:38 robert Exp $
d27 1
a27 1
	if [ X"${RC_DEBUG}" = X"1" ]; then
@


1.34
log
@- in case reload fails, print the failed message (from Piotr Sikora)
- (ok) is only printed while in interactive mode, but (failed) stays
  even for rc if the command fails

ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.33 2011/04/06 06:09:28 ajacoutot Exp $
d120 2
a121 1
daemon_flags=$(printf '%s\n' "${daemon_flags}" | tr -s "[:space:]" | sed 's/^[ \t]*//;s/[ \t]*$//')
@


1.33
log
@Remove leading/trailing spaces from daemon_flags.

ok schwarze@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.32 2011/04/05 13:57:57 guenther Exp $
d36 2
a37 1
	echo ${INRC:+'-n'} "${INRC:+ }${_name}($1)"
d93 1
a93 1
		rc_do rc_check && rc_do rc_reload
@


1.32
log
@Handle a daemon_flags of '-n' by using printf '%s\n' instead of echo
ok otto@@, aja@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.31 2011/04/05 11:47:32 ajacoutot Exp $
d119 1
a119 1
daemon_flags=$(printf '%s\n' "${daemon_flags}" | tr -s "[:space:]")
@


1.31
log
@Quote $daemon_flags to prevent echo(1) picking them as input flags.

from Piotr Sikora
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.30 2011/03/25 10:03:26 ajacoutot Exp $
d119 1
a119 1
daemon_flags=$(echo "${daemon_flags}" | tr -s "[:space:]")
@


1.30
log
@Bump timeout to 30s.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.29 2011/03/24 07:28:31 robert Exp $
d119 1
a119 1
daemon_flags=$(echo ${daemon_flags} | tr -s "[:space:]")
@


1.29
log
@if daemon_flags=NO is set, just exit
ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.28 2011/03/19 19:03:57 ian Exp $
d42 1
a42 1
	while [ $i -lt 5 ]; do
@


1.28
log
@Since we now use pkill -0 for "check", it must be run as root,
so remove that test condition. Commented by schwarze@@, OK ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.27 2011/03/17 16:43:51 robert Exp $
d53 2
@


1.27
log
@- introduce the INRC environment variable so that rc.subr(8) knows if it
  gets called from rc.local or rc.shutdown
- notify the user if a given operation was successfull or not by appending
  the (ok) or (failed) strings to the end of the daemon name
- hide stdout and stdin unless RC_DEBUG=1 is set, otherwise all the function
  names will be printed out and all output sent to stdin or stdout
- since from now on rc.subr is taking care of printing out the daemon names
  on startup, we don't need to do this from rc.{local,shutdown} anymore

brainkilling work done by me and ajacoutot@@, ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.26 2011/03/14 11:28:44 ajacoutot Exp $
d51 1
a51 1
	[ $(id -u) -eq 0 -o X"$1" = "Xcheck" ] || \
@


1.26
log
@Return proper codes so that we don't rc_start if rc_pre failed and we
don't rc_post if rc_stop failed.

"I agree with the direction" sthen@@
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.25 2011/03/10 10:21:39 ajacoutot Exp $
d26 24
d61 1
a61 1
		rc_check >/dev/null
d64 1
a64 1
		rc_check || \
d67 1
a67 1
				rc_pre
d69 3
a71 1
			[ $? -eq 0 ] && rc_start >/dev/null
d75 2
a76 1
		if rc_check; then rc_stop >/dev/null && \
d78 2
a79 7
			i=0
			while [ $i -lt 5 ]; do
				rc_check || break
				sleep 1
				i=$((i+1))
			done
			if [ $i -lt 5 ]; then
d81 1
a81 1
					rc_post
d83 1
a83 1
			fi
d85 2
d90 1
a90 1
		rc_check && rc_reload >/dev/null
@


1.25
log
@Add a small comment at the top to explain what this file does.
Use $() constructs as it's safer than ``.
Both req. by deraadt@@

Use pkill instead of pgrep in rc_check so that we don't need to fiddle
with redirections in reload.
prodded by schwarze@@

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.24 2011/03/09 19:37:16 ajacoutot Exp $
d40 7
a46 4
		if ! rc_check; then
			type rc_pre >/dev/null && rc_pre
			rc_start >/dev/null
		fi
d49 15
a63 8
		rc_stop >/dev/null
		i=0
		while [ $i -lt 5 ]; do
			rc_check || break
			sleep 1
			i=$((i+1))
		done
		type rc_post >/dev/null && rc_post || return 0
@


1.24
log
@Make reload and check consistent with start/stop.

ok robert@@
@
text
@d1 3
a3 1
#	$OpenBSD: rc.subr,v 1.23 2011/03/09 18:50:46 ajacoutot Exp $
d15 1
a15 1
	pgrep -f "^${pexp}"
d27 1
a27 1
	[ `id -u` -eq 0 -o X"$1" = "Xcheck" ] || \
d56 1
a56 1
		(rc_check && rc_reload) >/dev/null
d70 1
a70 1
_name=`basename $0`
d83 1
a83 1
daemon_flags=`echo ${daemon_flags} | tr -s "[:space:]"`
@


1.23
log
@Move the redirections into the rc_cmd itself instead of rc_start and
rc_stop so scripts don't need to set it.

ok sthen@@ (on a much bigger diff) robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.22 2011/03/09 09:10:44 ajacoutot Exp $
d13 1
a13 1
	pgrep -f "^${pexp}" >/dev/null
d35 1
a35 1
		rc_check
d54 1
a54 1
		rc_check && rc_reload
@


1.22
log
@Move rc_pre and rc_post out of the rc_start/rc_stop functions into the
rc_cmd start/stop actions. This way when rc.d(8) scripts override these
functions, we don't loose rc_{pre,post}.

Add a max 5 secs loop after rc_stop in the rc_cmd top action. This seems
to be a good default for returning to command line only after the daemon
has really stopped. This fixes "restart" for some daemons and allows to
properly stop some others at shutdown time.
Note that this is just a best-effort default, some daemons may need a
lot more time to shutdown but this case is usually handled in the
rc.d(8) script itself and we obviously do not want to hang the shutdown
process.

Call rc_cmd start/stop in restart and _not_ rc_start/rc_stop which can
get overriden in a script.

discussed with and inputs from sthen@@ and schwarze@@
ok sthen@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.21 2011/03/06 16:49:48 ajacoutot Exp $
d9 1
a9 1
	${rcexec} "${daemon} ${daemon_flags} >/dev/null ${_bg}"
d40 1
a40 1
			rc_start
d44 1
a44 1
		rc_stop
@


1.21
log
@Add an "rc_bg" variable that is undefined by default and allows to start
a daemon in the background.

man page tweaks from schwarze@@
discussed with an ok schwarze@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.20 2011/02/24 07:07:03 ajacoutot Exp $
a8 1
	type rc_pre >/dev/null && rc_pre
a21 1
	type rc_post >/dev/null && rc_post || return 0
d38 4
a41 1
		rc_check || rc_start
d45 7
d57 1
a57 5
		rc_stop
		while rc_check; do
			sleep 1
		done
		rc_start
@


1.20
log
@Remove daemon_shell and force the use of /bin/sh for the su(1) call.

ok robert@@ espie@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.19 2011/01/05 16:04:21 ajacoutot Exp $
d10 1
a10 1
	${rcexec} "${daemon} ${daemon_flags}" >/dev/null
d32 2
@


1.19
log
@Put the "su -c ..." command into an rcexec variable so that we can
easily use it in rc scripts instead of copying/pasting the same huge
command lines everywhere.

ok robert@@ sthen@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.18 2011/01/04 16:02:24 ajacoutot Exp $
a63 1
eval _rcshell=\${${_name}_shell}
a69 1
[ -z "${daemon_shell}" ] && daemon_shell=/bin/sh
a72 1
[ -n "${_rcshell}" ] && daemon_shell=${_rcshell}
d77 1
a77 1
rcexec="su -l -c ${daemon_class} -s ${daemon_shell} ${daemon_user} -c"
@


1.18
log
@Check for a login class that match the rc script name and if we find one
let's use it. If not, then fall back to using daemon.
While here, do some reordering.

"I like this" sthen@@, ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.17 2010/12/29 15:28:01 ajacoutot Exp $
d10 1
a10 2
	su -l -c ${daemon_class} -s ${daemon_shell} ${daemon_user} \
		-c "${daemon} ${daemon_flags}" >/dev/null
a78 1

d80 1
@


1.17
log
@After the recent changes, there is no need for an rc_conf function.
As schwarze@@ also stated, this will prevent anyone from calling it
(which would be an error) and makes it clearer that rc.subr is not just
a functions container.

No functionnal change, unless you were calling rc_conf from an rc script
which would have been wrong anyway.

ok schwarze@@ robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.16 2010/12/27 14:49:05 ajacoutot Exp $
d65 1
d67 3
a69 2
eval _rcclass=\${${_name}_class}
eval _rcshell=\${${_name}_shell}
d76 1
a77 2
[ -n "${_rcclass}" ] && daemon_class=${_rcclass}
[ -n "${_rcshell}" ] && daemon_shell=${_rcshell}
@


1.16
log
@There is no point in calling rc_conf manually from each and every rc
script; instead, rc.subr can call rc_conf itself right after reading in
rc.conf.

from schwarze@@ (committing on his behalf)
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.15 2010/12/24 10:37:24 ajacoutot Exp $
a26 23
rc_conf() {
	[ -n "${daemon}"   ] || rc_err "$0: daemon is not set"

	_name=`basename $0`
	eval _rcflags=\${${_name}_flags}
	eval _rcuser=\${${_name}_user}
	eval _rcclass=\${${_name}_class}
	eval _rcshell=\${${_name}_shell}

	[ -z "${daemon_class}" ] && daemon_class=daemon
	[ -z "${daemon_shell}" ] && daemon_shell=/bin/sh
	[ -z "${daemon_user}" ] && daemon_user=root

	[ -n "${_rcflags}" ] && daemon_flags=${_rcflags}
	[ -n "${_rcuser}"  ] && daemon_user=${_rcuser}
	[ -n "${_rcclass}" ] && daemon_class=${_rcclass}
	[ -n "${_rcshell}" ] && daemon_shell=${_rcshell}

	daemon_flags=`echo ${daemon_flags} | tr -s "[:space:]"`

	pexp="${daemon}${daemon_flags:+ ${daemon_flags}}"
}

d60 21
a80 1
rc_conf
@


1.15
log
@Fix a flaw in the rc.subr framework reported by stephan@@ where
local_rcconf would get overwritten by flags from the rc script itself.

Based on an original idea and diff from robert@@, create an rc_conf
function that we add in the rc_script after the defaults daemon*
variables.
This way we can use defaults variables names in other part of the script
(when defining a specific pexp for instance).

While here, simplify setting up the default daemon variables so that we
don't need to do any substitution in rc_start.

rc scripts must include daemon variables before calling rc_conf. All
other locally modified variables (pexp, rc_reload, local additions...)
must come after.

feedback from and works for sthen@@
ok robert@@
@
text
@d1 1
a1 3
#	$OpenBSD: rc.subr,v 1.14 2010/12/13 16:06:45 ajacoutot Exp $

[ -z "${local_rcconf}" ] && . /etc/rc.conf
d81 3
@


1.14
log
@Prefer '-l' over '-' which is deprecated.

Also noticed and agreed by eric@@
ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.13 2010/12/13 15:27:27 robert Exp $
d12 2
a13 2
	su -l -c ${daemon_class:-daemon} -s ${daemon_shell:-/bin/sh} \
		${daemon_user:-root} -c "${daemon} ${daemon_flags}" >/dev/null
d29 3
a31 1
rc_cmd() {
a32 2

	eval _enotsup=\${rc_${1}}
d38 4
a41 4
	[ X"${_enotsup}" != X"NO" ] || rc_err "$0: $1 is not supported"
	[ `id -u` -eq 0 -o X"$1" = "Xcheck" ] || \
		rc_err "$0: need root privileges"
	[ -n "${daemon}"   ] || rc_err "$0: daemon is not set"
a42 1
	[ -n "${_rcflags}" ] && daemon_flags=`echo ${_rcflags} | tr -s "[:space:]"`
d46 12
a57 2
	[ -n "${pexp}"     ] || \
		pexp="${daemon}${daemon_flags:+ ${daemon_flags}}"
@


1.13
log
@simulate a full login with su, now that the environment is fine after
the last su(1) commit
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.12 2010/12/11 12:57:21 ajacoutot Exp $
d12 1
a12 1
	su - -c ${daemon_class:-daemon} -s ${daemon_shell:-/bin/sh} \
@


1.12
log
@Make it possible to mark an rc action as unsupported by setting the
corresponding variable to NO.
e.g.
rc_reload=NO

This will save us the trouble of copying the same rc_reload() function
(or others) all over the tree.

ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.11 2010/12/11 10:15:23 ajacoutot Exp $
d12 1
a12 1
	su -c ${daemon_class:-daemon} -s ${daemon_shell:-/bin/sh} \
@


1.11
log
@Sanitise daemon_flags: remove multiple whitespaces from _rcflags.

requested by okan@@, ok robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.10 2010/12/11 09:55:37 robert Exp $
d32 1
d38 1
@


1.10
log
@Do not overwrite the settings in the rc scripts itself, so use the same
method to handle  _class, _user and _shell as we do for _flags.

discussed with and ok ajacoutot@@
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.9 2010/12/10 21:25:50 robert Exp $
d41 1
@


1.9
log
@Add support for setting _user _class and _shell for a specific daemon,
and use su to start the daemons.
By default if there is no class defined, daemon will be used. For a shell
it defaults to /bin/sh.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.8 2010/10/28 21:36:45 robert Exp $
d12 2
a13 2
	su -c ${_rcclass:-daemon} -s ${_rcshell:-/bin/sh} \
		${_rcuser:-root} -c "${daemon} ${daemon_flags}" >/dev/null
d31 1
d39 1
a39 1
	[ -n "${daemon}"  ] || rc_err "$0: daemon is not set"
d41 5
a45 1
	[ -n "${pexp}"    ] || pexp="${daemon}${daemon_flags:+ ${daemon_flags}}"
@


1.8
log
@remove my debug printf
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.7 2010/10/28 21:03:33 robert Exp $
d12 2
a13 1
	${daemon} ${daemon_flags} >/dev/null
d32 3
@


1.7
log
@After discussing with Ingo and Antoine we decided to rename
files to not include -. This way we can easily overwrite
daemon flags from rc.conf.local.
@
text
@d1 1
a1 1
#	$OpenBSD: rc.subr,v 1.6 2010/10/28 15:36:37 robert Exp $
a30 3

	echo $_rcflags
	exit
@


1.6
log
@add $
@
text
@d1 1
a1 1
#	$OpenBSD$
d29 8
a36 1
	[ `id -u` -eq 0 -o X"$1" = "Xcheck" ] || rc_err "$0: need root privileges"
d38 1
@


1.5
log
@Protect variable names, to be consistent with rc(8).

ok robert@@
@
text
@d1 2
@


1.4
log
@Remove 'status', because 'check' is what is used internally and we don't
need two functions doing the same thing, and also allow check to run as
non-root.
@
text
@d1 1
a1 1
[ -z "$local_rcconf" ] && . /etc/rc.conf
d10 1
a10 1
	$daemon $daemon_flags >/dev/null
d14 1
a14 1
	pgrep -f "^$pexp" >/dev/null
d18 1
a18 1
	pkill -HUP -f "^$pexp"
d22 1
a22 1
	pkill -f "^$pexp"
d28 2
a29 2
	[ -n "$daemon"  ] || rc_err "$0: daemon is not set"
	[ -n "$pexp"    ] || pexp="$daemon${daemon_flags:+ $daemon_flags}"
@


1.3
log
@Missing redirection to /dev/null in rc_start
@
text
@d27 1
a27 1
	[ `id -u` -eq 0 ] || rc_err "$0: need root privileges"
d32 1
a32 1
	check|status)
@


1.2
log
@quote $local_rcconf in [ ] and remove eval from rc_start()
@
text
@d10 1
a10 1
	$daemon $daemon_flags
@


1.1
log
@Add a simple 'rc' system to base in order to start/stop/restart/reload
services installed by the ports system (for now).
It only uses pgrep/pkill to handle these processes. A manual page will
come later.

'put it in' deraadt@@
@
text
@d1 1
a1 1
[ -z $local_rcconf ] && . /etc/rc.conf
d10 1
a10 1
	eval $daemon $daemon_flags
@

