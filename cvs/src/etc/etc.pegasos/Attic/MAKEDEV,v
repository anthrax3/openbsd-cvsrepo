head	1.14;
access;
symbols
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11;
locks; strict;
comment	@# @;


1.14
date	2004.05.03.15.18.19;	author drahn;	state dead;
branches;
next	1.13;

1.13
date	2004.04.11.18.15.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.11.18.06.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.12.04.54.33;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.20.19.13.49;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.16.19.05.06;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.14.17.24.58;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.13.23.35.04;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.10.02.46.22;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.10.01.31.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.05.22.23.30;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.12.23.34.54;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.31.05.02.14;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.31.03.56.54;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove OpenBSD/pegaos, this has been announced before but delayed until
the tree was stable. No point in code supporting a company which screws
its employees being in the OpenBSD tree.
@
text
@#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.8 2004/04/11 18:05:23 millert Exp 
#	OpenBSD: MAKEDEV.common,v 1.7 2004/04/11 18:14:59 millert Exp 
#	OpenBSD: MAKEDEV.mi,v 1.72 2004/02/16 18:58:53 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.12 2004/02/20 19:13:01 miod Exp 
#
#
# Copyright (c) 2001-2004 Todd T. Fries <todd@@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	Ramdisk kernel devices
#	std	Standard devices
#	local	Configuration specific devices
# Disks:
#	ccd*	Concatenated disk devices
#	cd*	ATAPI and SCSI CD-ROM drives
#	raid*	RAIDframe disk devices
#	rd*	"rd" pseudo-disks
#	sd*	SCSI disks, including flopticals
#	vnd*	"file" pseudo-disk devices
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
# Tapes:
#	ch*	SCSI media changers
#	st*	SCSI tape drives
# Terminal ports:
#	tty[0-7][0-9a-f]	NS16x50 serial ports
# Pseudo terminals:
#	ptm	pty master device
#	pty*	Set of 62 master pseudo terminals
#	tty*	Set of 62 slave pseudo terminals
# Console ports:
#	ttyC0	Minimal wscons devices
#	ttyC-F*	wscons display devices
#	wskbd*	wscons keyboards
#	wsmux	wscons keyboard/mouse mux devices
# Pointing devices:
#	wsmouse*	wscons mice
# USB devices:
#	uall	All USB devices
#	ttyU*	USB serial ports
#	ugen*	Generic USB devices
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	urio*	Diamond Multimedia Rio 500
#	usb*	Bus control devices used by usbd for attach/detach
#	uscanner*	Scanners
# Special purpose devices:
#	audio*	Audio devices
#	bktr*	Video frame grabbers
#	bpf*	Berkeley Packet Filter
#	crypto	Hardware crypto access driver
#	fd	fd/* nodes for fdescfs
#	iop*	I2O controller devices
#	lkm	Loadable kernel modules interface
#	pci	PCI bus device
#	pf*	Packet Filter
#	radio*	FM tuner devices
#	*random	In-kernel random data source
#	ss*	SCSI scanners
#	systrace*	System call tracing device
#	tun*	Network tunnel driver
#	tuner*	Tuner devices
#	uk*	SCSI unknown devices
#	xfs*	XFS filesystem node
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

alph2d()
{
	local t="$1"  
	local p="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local sub=${p%${t}*}
	echo ${#sub}
}

h2d()
{
	local s="$1"
	local f=${s%*[0-9a-f]} n=${s#[0-9a-f]*}

	echo $(($(_h2d $f)*16+ $(_h2d $n) ))
}

_h2d()
{
	case $1 in
	[0-9]) echo -n $1;;
	a) echo -n 10;;
	b) echo -n 11;;
	c) echo -n 12;;
	d) echo -n 13;;
	e) echo -n 14;;
	f) echo -n 15;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root:operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7:$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;_lkm)g=61;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 21 0
	M stdout	c 21 1
	M stderr	c 21 2
	M ksyms		c 43 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	M xf86		c 2 4 600
	M reload	c 2 20 640 kmem
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

uk*)
	M uk$U c 41 $U 640 operator
	;;

tuner*)
	M tuner$U c 75 $(($(($U*2))+16)) 644
	;;

tun*)
	M tun$U c 23 $U 600
	;;

systrace)
	M systrace c 50 0 644
	;;

ss*)
	M ss$U c 42 $(($U*16)) 640 operator
	M nss$U c 42 $(($(($U*16))+1)) 640 operator
	M enss$U c 42 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 40 $n 644
		n=$(($n+1))
	done
	;;

radio*)
	M radio$U     c 76 $U
	MKlist="$MKlist;[ -e radio ] || ln -s radio$U radio"
	;;

pf*)
	M pf c 39 0 600
	;;

pci)
	M pci c 71 0 600
	;;

lkm)
	M lkm c 24 0 640 _lkm
	;;

iop*)
	M iop$U c 73 $U 660
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 21 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

crypto)
	M crypto c 47 0
	;;

bpf*)
	M bpf$U c 22 $U 600
	;;

bktr*)
	M bktr$U c 75 $U 644
	;;

audio*)
	M sound$U	c 44 $U
	M mixer$U	c 44 $(($U+16))
	M audio$U	c 44 $(($U+128))
	M audioctl$U	c 44 $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

uscanner*)
	M uscanner$U c 74 $U 660
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 61 $U 660
	;;

urio*)
	M urio$U c 65 $U 660
	;;

ulpt*)
	M ulpt$U c 64 $U 660
	;;

uhid*)
	M uhid$U c 62 $U 660
	;;

ugen*)
	n=$(($U*16))
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		M ugen$U.$j c 63 $(($n+$j)) 660
	done
	;;

ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 66 $o 660 dialer uucp
	;;

uall)
	R ttyU0 ttyU1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R uscanner0 urio0 usb0 usb1
	;;

wsmouse*)
	M wsmouse$U c 69 $U 600
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 70 0 600
	M wskbd c 70 1 600
	;;

wskbd*)
	M wskbd$U c 68 $U 600
	;;

tty[C-F]*)
	U=${i##tty[C-F]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 67 $(( 16#$U + $m )) 600;;
	cfg) M tty${n}cfg c 67 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wskbd0 wskbd1 wskbd2
	R wskbd3 wsmux ttyCcfg ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5
	R ttyC6 ttyC7 ttyC8 ttyC9 ttyCa ttyCb
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A letters p q r s t u v w x y z P Q R S T
	set -A suffixes 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q \
	    r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X \
	    Y Z

	name=${letters[$U]}
	n=0
	while [ $n -lt 62 ]
	do
		nam=$name${suffixes[$n]}
		off=$(($U*62))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

ptm)
	M ptm c 77 0 666
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 7 $o 660 dialer uucp
	M cua$U c 7 $(($o+128)) 660 dialer uucp
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 5 $n 660 operator
		M ${pre}rst$U	c 20 $n 660 operator
		n=$(($n+1))
	done
	;;

ch*)
	M ch$U c 10 $U 660 operator
	;;

vnd*)
	dodisk vnd $U 14 19 $U 0
	dodisk svnd $U 14 19 $U 2048
	;;

rd*)
	dodisk2 rd $U 17 17 $U 0
	;;

cd*)
	dodisk2 cd $U 3 9 $U 0
	;;

local)
	test -s $T.local && sh $T.local
	;;

ramdisk)
	R pty0 rd0 cd0 cd1 st0 st1 wd0 wd1 wd2 wd3 wd4 sd0 sd1 sd2
	R sd3 sd4 bpf0 std
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R cd0 cd1 rd0 tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 xfs0 ss0 ss1 ch0 ptm local
	R wscons pci iop0 iop1 uall tuner0 radio0 audio0 uk0 random
	R lkm tty00 tty01 tty02 tty03 crypto pf systrace wd0 wd1 wd2
	R wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
	;;

wd*|sd*|raid*|ccd*)
	case $i in
	wd*) dodisk wd $U 0 11 $U 0;;
	sd*) dodisk sd $U 2 8 $U 0;;
	raid*) dodisk raid $U 19 54 $U 0;;
	ccd*) dodisk ccd $U 16 18 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@@"
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
@


1.13
log
@regen
@
text
@@


1.12
log
@Regen for for pty changes (62 per letter instead of just 16)
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.6 2004/04/11 18:05:22 millert Exp 
d47 2
a48 2
#	pty*	Set of 62 pseudo terminals
tty_dev
@


1.11
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.7 2004/03/12 04:54:05 deraadt Exp 
#	OpenBSD: MAKEDEV.common,v 1.4 2004/03/12 04:54:04 deraadt Exp 
d47 2
a48 2
#	pty*	Set of 16 master pseudo terminals
#	tty*	Set of 16 slave pseudo terminals
d397 6
a402 2
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
d404 1
a404 1
	while [ $n -lt 16 ]
d406 2
a407 2
		nam=$name$(hex $n)
		off=$(($U*16))
d464 4
a467 4
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0 ss0 ss1 ch0 ptm
	R local wscons pci iop0 iop1 uall tuner0 radio0 audio0 uk0
	R random lkm tty00 tty01 tty02 tty03 crypto pf systrace wd0
	R wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.10
log
@Regen; except for alpha, the only changes are in comments.
@
text
@d6 2
a7 2
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.6 2004/02/16 19:01:02 miod Exp 
#	OpenBSD: MAKEDEV.common,v 1.3 2004/02/20 19:13:01 miod Exp 
d57 1
a57 1
#	usbs	All USB devices
d353 1
a353 1
usbs)
d461 1
a461 1
	R local wscons pci iop0 iop1 usbs tuner0 radio0 audio0 uk0
@


1.9
log
@Regen
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.common,v 1.1 2004/02/16 18:58:54 miod Exp 
d9 1
a9 1
#	OpenBSD: MAKEDEV.sub,v 1.11 2004/02/16 18:58:53 miod Exp 
d34 1
a34 1
#	cd*	SCSI cdrom drives
d37 1
a37 1
#	sd*	SCSI disks
@


1.8
log
@sync
@
text
@d6 4
a9 3
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.5 2004/02/14 17:24:31 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.71 2004/02/14 17:24:30 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.10 2004/02/14 17:24:31 todd Exp 
d29 3
a31 6
#	std	standard devices
#	fd	makes fd/* for the fdescfs
#	local	configuration specific devices
#	ramdisk	makes all devices for a ramdisk kernel
# Tapes:
#	st*	SCSI tapes
d33 1
a33 2
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
#	sd*	SCSI disks
d35 1
a35 2
#	ch*	SCSI media changer
#	vnd*	"file" pseudo-disks
d37 6
a42 8
#	raid*	RAIDframe disk devices
#	ccd*	concatenated disk devices
# Console ports:
#	ttyC0	wscons screen 0
#	ttyC-F*	wscons virtual consoles
#	wskbd*	wscons keyboards
#	wsmouse*	wscons mice
#	wsmux	wscons keyboard/mouse mux devices
a45 2
#	tty*	set of 16 slave pseudo terminals
#	pty*	set of 16 master pseudo terminals
d47 9
d57 3
a59 1
#	usb*	Bus control devices used by usbd for attach/detach
a60 1
#	ugen*	Generic device
d63 1
a63 1
#	ttyU*	Serial ports
d66 2
a67 2
#	audio*	audio device
#	apm		power management device
d69 8
a76 4
#	tun*	network tunnel driver
#	lkm	loadable kernel modules interface
#	*random	inkernel random data source
#	uk*	SCSI Unknown device
d78 5
a82 10
#	xfs*	XFS filesystem devices
#	iop*	I2O controller device
#	pf*	Packet Filter
#	crypto	hardware crypto access driver
#	usbs	make USB devices
#	pci	PCI bus device
#	systrace*	system call tracing device
#	bktr*	video capturing
#	tuner*	tuner device
#	radio*	FM tuner device
d231 6
a236 3
radio*)
	M radio$U     c 76 $U
	MKlist="$MKlist;[ -e radio ] || ln -s radio$U radio"
d243 2
a244 2
bktr*)
	M bktr$U c 75 $U 644
a250 25
pci)
	M pci c 71 0 600
	;;

usbs)
	R ttyU0 ttyU1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
	R uscanner0 urio0 usb0 usb1
	;;

crypto)
	M crypto c 47 0
	;;

pf*)
	M pf c 39 0 600
	;;

iop*)
	M iop$U c 73 $U 660
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

a258 4
uk*)
	M uk$U c 41 $U 640 operator
	;;

d268 13
d285 12
a296 2
tun*)
	M tun$U c 23 $U 600
d303 2
a304 3
apm*)
	M apm	c 25 0 644
	M apmctl	c 25 8 644
d322 3
a324 4
ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 66 $o 660 dialer uucp
d335 4
d347 4
a350 2
uhid*)
	M uhid$U c 62 $U 660
d353 3
a355 3
usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 61 $U 660
d358 2
a359 27
ptm)
	M ptm c 77 0 666
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 4 $(($off+$n))
		M pty$nam c 5 $(($off+$n))
		n=$(($n+1))
	done
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 7 $o 660 dialer uucp
	M cua$U c 7 $(($o+128)) 660 dialer uucp
a366 4
wsmouse*)
	M wsmouse$U c 69 $U 600
	;;

d392 16
a407 2
rd*)
	dodisk2 rd $U 17 17 $U 0
d410 2
a411 3
vnd*)
	dodisk vnd $U 14 19 $U 0
	dodisk svnd $U 14 19 $U 2048
d414 5
a418 6
ch*)
	M ch$U c 10 $U 660 operator
	;;

cd*)
	dodisk2 cd $U 3 9 $U 0
d431 15
a445 3
ramdisk)
	R pty0 rd0 cd0 cd1 st0 st1 wd0 wd1 wd2 wd3 wd4 sd0 sd1 sd2
	R sd3 sd4 bpf0 std
d452 3
a454 4
fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 21 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
d462 2
a463 2
	R random lkm tty00 tty01 tty02 tty03 apm crypto pf systrace
	R wd0 wd1 wd2 wd3 raid0 raid1 raid2 raid3 std st0 st1 fd
@


1.7
log
@Regen.
@
text
@d6 3
a8 3
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.4 2004/02/13 23:34:21 miod Exp 
#	OpenBSD: MAKEDEV.mi,v 1.70 2004/02/13 23:34:13 miod Exp 
#	OpenBSD: MAKEDEV.sub,v 1.9 2004/01/12 22:18:24 todd Exp 
d11 1
a11 1
# Copyright (c) 2001,2002,2003 Todd T. Fries <todd@@OpenBSD.org>
@


1.6
log
@regen properly
@
text
@d6 2
a7 2
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.3 2004/02/10 01:31:20 millert Exp 
#	OpenBSD: MAKEDEV.mi,v 1.68 2004/02/10 01:31:20 millert Exp 
a49 1
#	ttyE?	Workstation console (framebuffer & keyboard) tty emulators
d52 1
a52 1
#	tty*	set of 16 slave psuedo terminals
a229 8
ttyE*)
	type=E
	case $type in
	E)	major=25; minor=$unit ;;
	esac
	M tty$type$unit c $major $minor 660
	;;

d447 2
a448 2
	R pty0 ttyE0 rd0 cd0 cd1 st0 st1 wd0 wd1 wd2 wd3 wd4 sd0 sd1
	R sd2 sd3 sd4 bpf0 std
@


1.5
log
@Add the ptm device to pty(4).  By opening /dev/ptm and using the PTMGET
ioctl(2), an unprivileged process may allocate a pty and have its owner
and mode set appropriately.  This means that programs such as xterm and
screen no longer need to be setuid.  Programs using the openpty()
function require zero changes and will "just work".

Designed by beck@@ and deraadt@@; changes by beck@@ with cleanup (and
a rewrite of the vnode bits) by art@@ and tweaks/bugfixes by me.
Tested by many.
@
text
@d6 2
a7 2
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.2 2004/01/12 23:32:24 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.67 2004/02/05 22:22:15 todd Exp 
@


1.4
log
@sync
@
text
@d55 1
d365 4
d473 1
a473 1
	R bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0 ss0 ss1 ch0
@


1.3
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.65 2004/01/12 22:31:34 todd Exp 
a489 16
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
d498 1
a498 1
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
@


1.2
log
@regen.
@
text
@d6 3
a8 3
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.1 2003/10/31 03:56:54 drahn Exp 
#	OpenBSD: MAKEDEV.mi,v 1.63 2003/10/15 02:01:04 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.8 2003/06/18 18:08:59 todd Exp 
d61 1
a61 1
#	utty*	Serial ports
d101 8
d260 1
a260 1
	R utty0 utty1 ugen0 ugen1 ulpt0 ulpt1 uhid0 uhid1 uhid2 uhid3
d333 4
a336 2
utty*)
	M utty$U c 66 $U 660
@


1.1
log
@OpenBSD port for the Pegasos I, pegasosppc.com heavily derived from macppc
@
text
@d6 1
a6 1
#	OpenBSD: etc.pegasos/MAKEDEV.md,v 1.1.2.1 2003/10/10 17:04:13 drahn Exp 
@

