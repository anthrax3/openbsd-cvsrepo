head	1.66;
access;
symbols
	OPENBSD_3_2:1.62.0.2
	OPENBSD_3_2_BASE:1.62
	OPENBSD_3_1:1.59.0.2
	OPENBSD_3_1_BASE:1.59
	OPENBSD_3_0:1.38.0.2
	OPENBSD_3_0_BASE:1.38
	OPENBSD_2_9:1.33.0.2
	OPENBSD_2_9_BASE:1.33
	OPENBSD_2_8:1.32.0.2
	OPENBSD_2_8_BASE:1.32
	OPENBSD_2_7:1.28.0.2
	OPENBSD_2_7_BASE:1.28
	OPENBSD_2_6:1.26.0.4
	OPENBSD_2_6_BASE:1.26
	OPENBSD_2_5:1.26.0.2
	OPENBSD_2_5_BASE:1.26
	OPENBSD_2_4:1.24.0.2
	OPENBSD_2_4_BASE:1.24
	OPENBSD_2_3:1.19.0.2
	OPENBSD_2_3_BASE:1.19
	OPENBSD_2_2:1.18.0.2
	OPENBSD_2_2_BASE:1.18
	OPENBSD_2_1:1.17.0.2
	OPENBSD_2_1_BASE:1.17
	OPENBSD_2_0:1.9.0.2
	OPENBSD_2_0_BASE:1.9
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.66
date	2002.12.31.16.35.35;	author miod;	state dead;
branches;
next	1.65;

1.65
date	2002.12.05.04.38.22;	author kjc;	state Exp;
branches;
next	1.64;

1.64
date	2002.12.05.03.00.27;	author kjc;	state Exp;
branches;
next	1.63;

1.63
date	2002.10.16.15.49.07;	author todd;	state Exp;
branches;
next	1.62;

1.62
date	2002.06.18.00.56.04;	author fgsch;	state Exp;
branches;
next	1.61;

1.61
date	2002.06.09.05.58.39;	author todd;	state Exp;
branches;
next	1.60;

1.60
date	2002.05.16.21.12.22;	author miod;	state Exp;
branches;
next	1.59;

1.59
date	2002.04.14.23.27.01;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2002.03.31.21.51.38;	author fgsch;	state Exp;
branches;
next	1.57;

1.57
date	2002.02.25.05.20.37;	author todd;	state Exp;
branches;
next	1.56;

1.56
date	2002.02.21.18.34.11;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2002.02.21.13.44.12;	author todd;	state Exp;
branches;
next	1.54;

1.54
date	2002.02.21.13.19.07;	author todd;	state Exp;
branches;
next	1.53;

1.53
date	2002.02.19.21.06.00;	author todd;	state Exp;
branches;
next	1.52;

1.52
date	2002.02.17.05.14.55;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2002.02.15.21.16.02;	author todd;	state Exp;
branches;
next	1.50;

1.50
date	2002.02.14.17.46.15;	author todd;	state Exp;
branches;
next	1.49;

1.49
date	2002.02.14.05.55.09;	author todd;	state Exp;
branches;
next	1.48;

1.48
date	2002.02.14.04.43.09;	author todd;	state Exp;
branches;
next	1.47;

1.47
date	2002.02.14.04.39.56;	author todd;	state Exp;
branches;
next	1.46;

1.46
date	2002.02.09.17.01.41;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2002.02.08.20.54.35;	author todd;	state Exp;
branches;
next	1.44;

1.44
date	2002.01.23.08.23.19;	author todd;	state Exp;
branches;
next	1.43;

1.43
date	2002.01.23.07.54.42;	author todd;	state Exp;
branches;
next	1.42;

1.42
date	2002.01.23.06.21.20;	author todd;	state Exp;
branches;
next	1.41;

1.41
date	2002.01.08.05.29.14;	author todd;	state Exp;
branches;
next	1.40;

1.40
date	2002.01.08.03.28.59;	author todd;	state Exp;
branches;
next	1.39;

1.39
date	2002.01.08.01.06.44;	author todd;	state Exp;
branches;
next	1.38;

1.38
date	2001.09.06.19.45.34;	author todd;	state Exp;
branches;
next	1.37;

1.37
date	2001.06.28.02.58.57;	author kjc;	state Exp;
branches;
next	1.36;

1.36
date	2001.06.25.03.20.20;	author kjell;	state Exp;
branches;
next	1.35;

1.35
date	2001.06.24.23.36.10;	author kjell;	state Exp;
branches;
next	1.34;

1.34
date	2001.05.30.02.11.26;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2001.02.15.01.41.49;	author todd;	state Exp;
branches;
next	1.32;

1.32
date	2000.06.21.21.16.28;	author miod;	state Exp;
branches;
next	1.31;

1.31
date	2000.06.19.01.44.56;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2000.05.22.21.04.31;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2000.05.19.23.30.37;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2000.03.22.07.34.30;	author niklas;	state Exp;
branches;
next	1.27;

1.27
date	2000.03.02.22.59.05;	author todd;	state Exp;
branches;
next	1.26;

1.26
date	98.11.25.04.58.55;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	98.11.19.08.18.58;	author dugsong;	state Exp;
branches;
next	1.24;

1.24
date	98.10.15.21.24.53;	author art;	state Exp;
branches;
next	1.23;

1.23
date	98.09.27.21.59.51;	author kstailey;	state Exp;
branches;
next	1.22;

1.22
date	98.09.27.21.58.09;	author kstailey;	state Exp;
branches;
next	1.21;

1.21
date	98.09.25.12.42.22;	author todd;	state Exp;
branches;
next	1.20;

1.20
date	98.09.15.10.23.23;	author pattonme;	state Exp;
branches;
next	1.19;

1.19
date	98.01.26.04.19.50;	author dgregor;	state Exp;
branches;
next	1.18;

1.18
date	97.09.16.03.03.03;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.05.17.19.12.03;	author kstailey;	state Exp;
branches;
next	1.16;

1.16
date	97.05.14.15.41.22;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	97.05.13.05.34.59;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	97.05.03.15.52.24;	author kstailey;	state Exp;
branches;
next	1.13;

1.13
date	97.02.22.21.09.13;	author kstailey;	state Exp;
branches;
next	1.12;

1.12
date	97.02.05.02.37.45;	author kstailey;	state Exp;
branches;
next	1.11;

1.11
date	97.01.13.00.29.28;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	96.11.11.23.51.38;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	96.09.18.22.03.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.08.28.08.55.29;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.07.15.14.59.20;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.03.28.18.24.39;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.02.17.21.33.17;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.01.07.07.41.28;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	95.12.15.02.33.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.23.15.59.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.38.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.02;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.66
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.10 2002/12/05 04:30:21 kjc Exp 
#	OpenBSD: MAKEDEV.mi,v 1.53 2002/12/05 04:30:21 kjc Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
#
#
# Copyright (c) 2001,2002 Todd T. Fries <todd@@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	SCSI tapes
# Disks:
#	sd*	SCSI disks
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#	cd*	SCSI cdrom drives
#	xy*	Xylogic 450/451 disks
#	xd*	Xylogic 753/7053 disks
# Terminal ports:
#	tty[a-z]*	Zilog 8530 Serial Port
# Pseudo terminals:
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
# Printers:
# Call units:
# Special purpose devices:
#	bwtwo*	
#	cgtwo*	
#	cgfour*	
#	bpf*	Berkeley Packet Filter
#	pf*	Packet Filter
#	tun*	network tunnel driver
#	rd*	"rd" pseudo-disks
#	*random	inkernel random data source
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
#	fd	makes fd/* for the fdescfs
#	xfs*	XFS filesystem devices
#	systrace*	system call tracing device
# XXX - Keep /usr/etc so SunOS can find chown
test -d /usr/etc && PATH=$PATH:/usr/etc

PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

trunc()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
	done
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}

M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
ramdisk)
	R std random bpf0 sd0 sd1 rd0 cd0
	;;

std)
	M console	c 0 0 600
	M tty		c 2 0
	M mem		c 3 0 640 kmem
	M kmem		c 3 1 640 kmem
	M null		c 3 2
	M zero		c 3 12
	M stdin		c 23 0
	M stdout	c 23 1
	M stderr	c 23 2
	M ksyms		c 37 0 640 kmem
	M drum		c 7 0 640 kmem
	M klog		c 16 0 600
	M kd		c 1 0 600
	M eeprom	c 3 11 640 kmem
	M mouse		c 13 0
	M fb		c 22 0
	M kbd		c 29 0
	M leds		c 3 13 644
	M vme16d16	c 3 5 600; MKlist="$MKlist;ln -s vme16d16 vme16"
	M vme24d16	c 3 6 600; MKlist="$MKlist;ln -s vme24d16 vme24"
	M vme32d16	c 3 7 600
	M vme16d32	c 3 8 600
	M vme24d32	c 3 9 600
	M vme32d32	c 3 10 600; MKlist="$MKlist;ln -s vme32d32 vme32"
	RMlist="$RMlist vme16 vme24 vme32"
	;;

systrace)
	M systrace c 86 0 644
	;;

xfs*)
	M xfs$U c 51 $U 600
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 23 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

ss*)
	M ss$U c 99 $(($U*16)) 640 operator
	M nss$U c 99 $(($(($U*16))+1)) 640 operator
	M enss$U c 99 $(($(($U*16))+3)) 640 operator
	RMlist="$RMlist scan$U"
	MKlist="$MKlist;umask 77;ln -s ss$U scan$U"
	;;

uk*)
	M uk$U c 98 $U 640 operator
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c 72 $n 644
		n=$(($n+1))
	done
	;;

rd*)
	dodisk2 rd $U 13 52 $U 0
	;;

tun*)
	M tun$U c 24 $U 600
	;;

pf*)
	M pf c 75 0 600
	;;

bpf*)
	M bpf$U c 36 $U 600
	;;

cgfour*)
	M cgfour$U c 39 $U 666
	;;

cgtwo*)
	M cgtwo$U c 31 $U 666
	;;

bwtwo*)
	M bwtwo$U c 27 $U 666
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A tbl p q r s t u v w x y z P Q R S T
	name=${tbl[$U]}
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		off=$(($U*16))
		M tty$nam c 20 $(($off+$n))
		M pty$nam c 21 $(($off+$n))
		n=$(($n+1))
	done
	;;

tty[a-z])
	u=${i#tty*}
	case $u in
	a) n=0 ;;
	b) n=1 ;;
	c) n=4 ;;
	d) n=5 ;;
	*) echo unknown tty device $i ;;
	esac
	M tty$u c 12 $n 660 dialer uucp
	;;

cd*)
	dodisk2 cd $U 18 58 $U 0
	;;

vnd*)
	dodisk vnd $U 5 19 $U 0
	dodisk svnd $U 5 19 $U 128
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 11 $n 660 operator
		M ${pre}rst$U	c 18 $n 660 operator
		n=$(($n+1))
	done
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 sd0 sd1 sd2 sd3 sd4
	R cd0 cd1 rd0 xy0 xy1 xy2 xy3 tun0 tun1 tun2 tun3 bpf0 bpf1
	R bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 pty0 pty1 pty2 xfs0
	R ss0 ss1 local cgfour0 cgtwo0 bwtwo0 uk0 random ttya ttyb
	R ttyc ttyd pf systrace xd0 xd1 xd2 xd3 std st0 st1 fd
	;;

xd*|xy*|sd*|ccd*)
	case $i in
	xd*) dodisk xd $U 10 42 $U 0;;
	xy*) dodisk xy $U 3 9 $U 0;;
	sd*) dodisk sd $U 7 17 $U 0;;
	ccd*) dodisk ccd $U 9 33 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
@


1.65
log
@redo "make allarchs".
@
text
@@


1.64
log
@remove altq entries. altq is now handled through pf.
ok, deraadt@@
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.9 2002/10/16 15:48:31 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.52 2002/10/16 15:48:31 todd Exp 
@


1.63
log
@sync
@
text
@a66 1
#	altq/	ALTQ control interface
a220 8
altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c 85 $U 644
		U=$(($U+1))
	done
	;;

d338 1
a338 1
	R ttyc ttyd pf altq systrace xd0 xd1 xd2 xd3 std st0 st1 fd
@


1.62
log
@regen.
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.8 2002/06/09 06:15:15 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.49 2002/06/18 00:53:45 fgsch Exp 
a32 1

@


1.61
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.7 2002/05/16 21:11:21 miod Exp 
#	OpenBSD: MAKEDEV.mi,v 1.47 2002/06/09 04:19:15 todd Exp 
@


1.60
log
@Regen.
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.46 2002/05/16 16:18:44 provos Exp 
a9 1
#	$OpenBSD$
d49 1
a49 1
#	tty[a-z]*	Zilog 8530 Serial Port  
@


1.59
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.6 2002/04/14 23:26:46 deraadt Exp 
#	OpenBSD: MAKEDEV.mi,v 1.43 2002/04/11 20:28:49 deraadt Exp 
d70 1
d220 4
d349 1
a349 1
	R ttyc ttyd pf altq xd0 xd1 xd2 xd3 std st0 st1 fd
@


1.58
log
@regen. some of these were missed previously.
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.5 2002/02/25 01:14:31 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.42 2002/03/31 21:49:12 fgsch Exp 
d188 1
a188 1
	R std random bpf0 sd0 sd1 rd0
d190 1
@


1.57
log
@random typo fix; ok deraadt@@
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.41 2002/02/25 01:10:26 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.6 2002/02/14 05:50:37 todd Exp 
@


1.56
log
@Remove uncommited garbage.  I am sorry, but this was just not tested. It
crashes sh, EVEN after that possible fix.  It appears to overflow the
ramdisk _before_ it dumps core.  Noone was shown these changes.  They were
just tossed in.  This is not a development process that will work, so I
am just backing out all the changes in the last 24 hours.
@
text
@d6 3
a8 3
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.2 2002/02/14 13:29:21 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.36 2002/02/19 21:05:10 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.7 2002/02/16 01:19:52 deraadt Exp 
d10 1
a10 1
#	$OpenBSD: MAKEDEV,v 1.53 2002/02/19 21:06:00 todd Exp $
d187 3
d342 1
a342 1
	R ss0 ss1 local cgfour0 cgtwo0 bwtwo0 uk0 rndrandom ttya ttyb
@


1.55
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.3 2002/02/21 13:09:03 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.38 2002/02/21 13:41:55 todd Exp 
d10 1
a10 1
#	$OpenBSD$
a186 3
ramdisk)
	R std random bpf0 sd0 sd1 rd0
	;;
d339 1
a339 1
	R ss0 ss1 local cgfour0 cgtwo0 bwtwo0 uk1 uk0 random ttya ttyb
@


1.54
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.37 2002/02/21 13:03:00 todd Exp 
d342 1
a342 1
	R ss0 ss1 local cgfour0 cgtwo0 bwtwo0 uk0 rndrandom ttya ttyb
@


1.53
log
@sync
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.2 2002/02/14 13:29:21 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.36 2002/02/19 21:05:10 todd Exp 
d187 3
@


1.52
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.34 2002/02/17 05:14:30 deraadt Exp 
@


1.51
log
@sync
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.32 2002/02/15 21:13:47 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.6 2002/02/14 05:50:37 todd Exp 
d12 1
a12 1
# Copyright (c) 2001 Todd T. Fries <todd@@OpenBSD.org>
d63 1
a63 1
#	rd*	"ramdisk" pseudo-disks
@


1.50
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.31 2002/02/14 17:44:38 todd Exp 
d34 1
d336 5
a340 5
	R local cgfour0 cgtwo0 bwtwo0 xfs0 ss0 ss1 uk0 rndrandom ttya
	R ttyb ttyc ttyd pf altq tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2
	R bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 xd0 xd1 xd2 xd3 xy0 xy1
	R xy2 xy3 rd0 ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 std cd0
	R cd1 st0 st1 pty0 pty1 pty2 fd sd0 sd1 sd2 sd3 sd4
@


1.49
log
@sync (only comments with commas effected)
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.1 2002/01/08 00:59:59 todd Exp 
#	OpenBSD: MAKEDEV.mi,v 1.29 2002/02/14 05:38:22 todd Exp 
d233 3
a235 1
	M ss$U c 99 $U 440 operator
d282 6
a287 19
	case $U in
	0) off=0 name=p;;
	1) off=16 name=q;;
	2) off=32 name=r;;
	3) off=48 name=s;;
	4) off=64 name=t;;
	5) off=80 name=u;;
	6) off=96 name=v;;
	7) off=112 name=w;;
	8) off=128 name=x;;
	9) off=144 name=y;;
	10) off=160 name=z;;
	11) off=176 name=P;;
	12) off=192 name=Q;;
	13) off=206 name=R;;
	14) off=224 name=S;;
	15) off=240 name=T;;
	*) echo bad unit for pty in: $i; continue;;
	esac
d292 1
@


1.48
log
@sync
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.28 2002/02/14 04:41:32 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.5 2002/01/23 06:02:19 todd Exp 
@


1.47
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.27 2002/02/14 04:37:15 todd Exp 
d349 1
a349 1
	R cd1 st0 st1 pty0 pty1 fd sd0 sd1 sd2 sd3 sd4
@


1.46
log
@sync, and update, to make "ramdisk" target disk
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.24 2002/02/09 16:59:50 deraadt Exp 
d81 7
a87 7
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
d90 1
d102 1
d118 1
d121 1
d133 1
d147 1
d149 6
a154 6
 [ "${mklist[$1]}" ] && {
  mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
 } || {
  mklist[$1]="mknod -m $1 $2 $3 $4 $5"
  modes="$modes $1"
 }
d156 1
d177 1
a284 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
d380 2
a381 2
			's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
			 s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
@


1.45
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.23 2002/02/08 20:26:36 todd Exp 
@


1.44
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.22 2002/01/23 08:09:30 todd Exp 
d171 1
d340 2
a341 2
	R bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9 rd0 xd0 xd1 xd2 xd3 xy0
	R xy1 xy2 xy3 ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 std cd0
@


1.43
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.20 2002/01/23 06:43:53 todd Exp 
d337 1
a337 1
	R local cgfour0 cgtwo0 bwtwo0 xfs0 ss0 uk0 rndrandom ttya
d341 1
a341 1
	R st0 pty0 fd sd0 sd1 sd2 sd3 sd4
@


1.42
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.18 2002/01/23 06:10:35 todd Exp 
@


1.41
log
@sync
@
text
@d7 2
a8 2
#	OpenBSD: MAKEDEV.mi,v 1.15 2002/01/08 05:10:38 todd Exp 
#	OpenBSD: MAKEDEV.sub,v 1.4 2002/01/07 06:54:10 todd Exp 
d337 5
a341 6
	R std fd sd0 sd1 sd2 sd3 sd4 pty0 pty1 st0 st1 cd0 cd1
	R vnd0 vnd1 vnd2 vnd3 ccd0 ccd1 ccd2 ccd3 xy0 xy1 xy2 xy3
	R xd0 xd1 xd2 xd3 rd0
	R bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	R tun0 tun1 tun2 tun3 altq pf ttya ttyb ttyc ttyd random
	R uk0 uk1 ss0 ss1 xfs0 bwtwo0 cgtwo0 cgfour0 local
d344 1
a344 1
sd*|ccd*|xd*|xy*)
d346 2
a349 2
	xd*) dodisk xd $U 10 42 $U 0;;
	xy*) dodisk xy $U 3 9 $U 0;;
@


1.40
log
@sync
@
text
@d7 1
a7 1
#	OpenBSD: MAKEDEV.mi,v 1.14 2002/01/08 03:26:04 todd Exp 
@


1.39
log
@enable sun3; ok miod@@
@
text
@d6 2
a7 2
#	OpenBSD: etc.sun3/MAKEDEV.md,v 1.23 1998/09/27 21:59:51 kst Exp 
#	OpenBSD: MAKEDEV.mi,v 1.10 2002/01/08 00:52:06 todd Exp 
d120 2
a121 1
	for d in a b c d e f g h i j k l m n o p
d342 1
a342 1
	R uk0 uk1 ss0 ss1 xfs0 bwtwo0 cgfour0 local
@


1.38
log
@populate /dev/fd/ like other archs in 'all)' target
@
text
@a1 1
#	$OpenBSD: MAKEDEV,v 1.37 2001/06/28 02:58:57 kjc Exp $
d3 10
a12 1
# Copyright (c) 1990 The Regents of the University of California.
d20 2
a21 22
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
d23 10
a32 1
#	@@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
a38 1
#
a40 1
#
d43 2
a46 1
#	rd*	"ramdisk" pseudo-disks
d48 2
a49 3
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#
d51 2
a52 2
#	pty*	set of 16 master and slave pseudo terminals
#
d54 1
a54 4
#
# Terminal ports:
#	tty[a-b]	onboard zs serial ports
#
a55 2
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
d60 1
d62 5
a66 1
#	*random	inkernal random data source
d68 91
a158 70
#	altq	ALTQ control interface

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

if ! [ "$os" ]; then
	os=OpenBSD
fi

# SunOS shell support functions
if [ "$os" = "SunOS" ]
then
PATH=$PATH:/usr/etc # SunOS has chown is /usr/etc
	add ()
	{
		expr $1 + $2
	}
	mult ()
	{
		expr $1 '*' $2
	}
	hex ()
	{
		case $1 in
			[0-9]) echo -n $1;;
			10) echo -n a;;
			11) echo -n b;;
			12) echo -n c;;
			13) echo -n d;;
			14) echo -n e;;
			15) echo -n f;;
		esac
	}
	trunc ()
	{
		expr $1 : $2'\(.*\)'
	}
	unt ()
	{
		expr $1 : '[a-z]*\([0-9]*\)[a-p]*'
	}
fi
# OpenBSD shell support functions
if [ "$os" = "OpenBSD" ]
then
	add ()	
	{
		tmp=0
		while [ "$1" ]
		do
			tmp=$(( $1 + $tmp ))
			shift
		done
		echo $tmp
	}
	mult ()
	{
		echo "$(( $1 * $2 ))"
	}
	hex ()
	{
		case $1 in
			[0-9]) echo -n $1;;
			10) echo -n a;;
			11) echo -n b;;
			12) echo -n c;;
			13) echo -n d;;
			14) echo -n e;;
			15) echo -n f;;
d160 6
d167 4
a170 30
	trunc ()
	{
		# XXX pdksh can't seem to deal with locally scoped variables
		# in ${foo#$bar} expansions
		arg1="$1"
		arg2="$2"
		echo ${arg1#$arg2}
	}
	unt ()
	{
		# XXX pdksh can't seem to deal with locally scoped variables
		# in ${foo#$bar} expansions
		arg1="$1"
		tmp="${arg1#[a-z]*}"
		while [ "$tmp" != "$arg1" ]
		do
			arg1=$tmp
			tmp="${arg1#[a-z]*}"
		done
		tmp="${arg1%*[a-z]}"
		while [ "$tmp" != "$arg1" ]
		do
			arg1=$tmp
			tmp="${arg1%*[a-z]}"
		done
		echo $arg1
	}
fi

for i
d172 2
a173 3

unit=`unt $i`
[ "$unit" ] || unit=0
d176 27
d204 6
a209 18
all)
	sh $this std fd sd0 sd1 sd2 sd3 sd4 xd0 xd1 xd2 xd3 xy0 xy1 xy2 xy3
	sh $this cd0 st0 st1 rd0
	sh $this uk0 uk1
	sh $this ss0 ss1
	sh $this pty0 vnd0 vnd1 vnd2 vnd3 pf tun0 tun1 tun2 tun3
	sh $this ccd0 ccd1 ccd2 ccd3
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this bwtwo0 cgtwo0 cgfour0
	sh $this random local
	sh $this xfs0 altq
	;;

ramdisk)
	sh $this std random
	sh $this sd0 sd1 sd2 sd3 sd4 rd0 cd0 st0 st1
#	sh $this xd0 xd1 xd2 xd3 xy0 xy1 xy2 xy3
	sh $this bpf0
d212 2
a213 32
std)
	rm -f console drum mem kmem xf86 null zero io tty klog stdin stdout stderr ksyms
	rm -f eeprom kd ttya ttyb fb mouse kbd leds
	rm -f vme16d16 vme24d16 vme32d16 vme16d32 vme24d32 vme32d32 vme16 vme24 vme32
	mknod console		c 0 0
	mknod kd		c 1 0
	mknod tty		c 2 0	; chmod 666 tty
	mknod kmem		c 3 1	; chmod 640 kmem ; chown root.kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chown root.kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod vme16d16		c 3 5	; chmod 600 vme16d16
	ln -s vme16d16 vme16
	mknod vme24d16		c 3 6	; chmod 600 vme24d16
	ln -s vme24d16 vme24
	mknod vme32d16		c 3 7	; chmod 600 vme32d16
	mknod vme16d32		c 3 8	; chmod 600 vme16d32
	mknod vme24d32		c 3 9	; chmod 600 vme24d32
	mknod vme32d32		c 3 10	; chmod 600 vme32d32
	ln -s vme32d32 vme32
	mknod zero		c 3 12	; chmod 666 zero
	mknod eeprom		c 3 11	; chmod 640 eeprom ; chown root.kmem eeprom
	mknod leds		c 3 13	; chmod 644 leds
	mknod drum		c 7 0	; chmod 640 drum ; chown root.kmem drum
	mknod klog		c 16 0	; chmod 600 klog
	mknod stdin		c 23 0	; chmod 666 stdin
	mknod stdout		c 23 1	; chmod 666 stdout
	mknod stderr		c 23 2	; chmod 666 stderr
	sh $this ttya ttyb
	mknod fb		c 22 0	; chmod 666 fb
	mknod mouse		c 13 0	; chmod 666 mouse
	mknod kbd		c 29 0	; chmod 666 kbd
	mknod ksyms		c 37 0	; chmod 640 ksyms ; chown root.kmem ksyms
d217 3
a219 7
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 23 $n; n=`add $n 1`; done )
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
d222 4
a225 3
bwtwo*)
	rm -f bwtwo$unit
	mknod bwtwo$unit	c 27 $unit; chmod 666 bwtwo$unit
d228 2
a229 3
cgtwo*)
	rm -f cgtwo$unit
	mknod cgtwo$unit	c 31 $unit; chmod 666 cgtwo$unit
d232 7
a238 3
cgfour[0-9]*)
	rm -f cgfour$unit
	mknod cgfour$unit	c 39 $unit; chmod 666 cgfour$unit
d241 2
a242 5
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
d245 2
a246 5
bpf*)
	rm -f bpf$unit
	mknod bpf$unit c 36 $unit
	chmod 600 bpf$unit
	chown root.wheel bpf$unit
d249 2
a250 5
pf)
	rm -f pf
	mknod pf c 75 0
	chown root.wheel pf
	chmod 600 pf
d253 2
a254 5
tun*)
	rm -f tun$unit
	mknod tun$unit c 24 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
d257 2
a258 37
ccd*|sd*|xd*|xy*|cd*)
	umask 2
	unit=`unt $i`
	if [ 0$unit -gt 15 ]
	then
		echo bad disk unit: $i - $unit
		exit 127
	fi
	case $i in
	ccd*) name=ccd; blk=9; chr=33;;
	sd*) name=sd; blk=7; chr=17;;
	xd*) name=xd; blk=10; chr=42;;
	xy*) name=xy; blk=3; chr=9;;
	cd*)  name=cd; blk=18; chr=58;;
	*) echo bad unit for disk in: $i;;
	esac
	if [ "$unit" = "" ]
	then
		n=0
		while [ $n -lt 32 ]
		do
			sh $this $name$n
			n=`add $n 1`
		done
	fi
	rm -f $name$unit? r$name$unit?
	minor=`mult $unit 16`
	for slice in a b c d e f g h i j k l m n o p
	do
		dev=$name$unit$slice
		mknod $dev b $blk $minor
		mknod r$dev c $chr $minor
		minor=`add $minor 1`
	done
	chown root.operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	umask 77
d261 2
a262 37
vnd*)
	umask 2
	unit=`unt $i`
	if [ 0$unit -gt 15 ]
	then
		echo bad disk unit: $i - $unit
		exit 127
	fi
	blk=5; chr=19;
	for name in vnd svnd; do
		case $name in
		vnd) off=0;;
		svnd) off=128;;
		esac
		if [ "$unit" = "" ]
		then
			n=0
			while [ $n -lt 32 ]
			do
				sh $this $name$n
				n=`add $n 1`
			done
		fi
		rm -f $name$unit? r$name$unit?
		minor=`mult $unit 16`
		minor=`add $minor $off`
		for slice in a b c d e f g h i j k l m n o p
		do
			dev=$name$unit$slice
			mknod $dev b $blk $minor
			mknod r$dev c $chr $minor
			minor=`add $minor 1`
		done
		chown root.operator $name$unit? r$name$unit?
		chmod 640 $name$unit? r$name$unit?
	done
	umask 77
d265 2
a266 10
rd*)
	umask 2 ; unit=`expr $i : '.*d\(.*\)'`
	rm -f rd${unit}* rrd${unit}*
	mknod rd${unit}a b 13 `expr $unit '*' 16 + 0`
	mknod rd${unit}c b 13 `expr $unit '*' 16 + 2`
	mknod rrd${unit}a c 52 `expr $unit '*' 16 + 0`
	mknod rrd${unit}c c 52 `expr $unit '*' 16 + 2`
	chown root.operator rd${unit}[ac] rrd${unit}[ac]
	chmod 640 rd${unit}[ac] rrd${unit}[ac]
	umask 77
d269 20
a288 4
st*)
	umask 2
	case $i in
	st*) name=st; blk=11; chr=18;;
d290 8
a297 20
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	sixt=`mult $unit 16`
	mknod $name$unit	b $blk `add $sixt 0`
	mknod n$name$unit	b $blk `add $sixt 1`
	mknod e$name$unit	b $blk `add $sixt 2`
	mknod en$name$unit	b $blk `add $sixt 3`
	mknod r$name$unit	c $chr `add $sixt 0`
	mknod nr$name$unit	c $chr `add $sixt 1`
	mknod er$name$unit	c $chr `add $sixt 2`
	mknod enr$name$unit	c $chr `add $sixt 3`
	chown root.operator $name$unit n$name$unit \
		e$name$unit en$name$unit \
		r$name$unit nr$name$unit \
		er$name$unit enr$name$unit 
	chmod 660 $name$unit n$name$unit \
		e$name$unit en$name$unit \
		r$name$unit nr$name$unit \
		er$name$unit enr$name$unit 
	umask 77
d301 2
a302 3
	unit=`expr $i : 'tty\([a-z]\)'`
	rm -f tty$unit
	case $unit in
d305 2
d309 1
a309 3
	mknod tty$unit c 12 $n
	chown uucp.dialer tty$unit
	chmod 660 tty$unit
d312 2
a313 35
pty*)
	case $unit in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
                do
                        nam=$name`hex $n`
                        rm -f {tty,pty}$nam
                        mknod tty$nam c 20 `add $offset $n`
                        mknod pty$nam c 21 `add $offset $n`
                        n=`add $n 1`
                done
		umask 77
		;;
	esac
d316 3
a318 9
random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 72 0
	mknod srandom c 72 1
	mknod urandom c 72 2
	mknod prandom c 72 3
	mknod arandom c 72 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
d321 8
a328 6
uk*)
	unit=`trunc $i uk`
	rm -f uk$unit
	mknod uk$unit c 98 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
d331 2
a332 9
ss*)
	unit=`trunc $i ss`
	rm -f ss$unit
	mknod ss$unit c 99 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
d335 7
a341 11
altq)
	mkdir -p altq
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 85 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
	done
d344 7
a350 3
local)
	umask 0
	test -s MAKEDEV.local && sh MAKEDEV.local
d352 1
d358 31
@


1.37
log
@add an entry for ALTQ.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.36 2001/06/25 03:20:20 kjell Exp $
d183 1
a183 1
	sh $this std sd0 sd1 sd2 sd3 sd4 xd0 xd1 xd2 xd3 xy0 xy1 xy2 xy3
@


1.36
log
@add pf device on all architectures.
fix my previously bogus MAKEDEVs.
If you used pf on a non-i386. the major device number has changed,
and you'll need to recreate /dev/pf
ok theo
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.35 2001/06/24 23:36:10 kjell Exp $
d73 1
d192 1
a192 1
	sh $this xfs0
d484 13
@


1.35
log
@Add the pf device for the shiny new packet filter
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.34 2001/05/30 02:11:26 deraadt Exp $
d276 1
a276 1
	mknod pf c 73 0
@


1.34
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.33 2001/02/15 01:41:49 todd Exp $
d186 1
a186 1
	sh $this pty0 vnd0 vnd1 vnd2 vnd3 tun0 tun1 tun2 tun3
d272 7
@


1.33
log
@correct perms on null
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.32 2000/06/21 21:16:28 miod Exp $
a72 1
#	ipl 	IP filter log
a188 1
	sh $this ipl
a271 9
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 75 0
	mknod ipnat c 75 1
	mknod ipstate c 75 2
	mknod ipauth c 75 3
	chown root.wheel ipl ipnat ipstate ipauth
@


1.32
log
@Add a few missing devices (/dev/vme*, for example) ; make devices for
16 slices per disk instead of 8 previously ; and tidy things a bit
@
text
@d2 1
a2 1
#	$OpenBSD$
d212 1
a212 1
	mknod null		c 3 2
@


1.31
log
@Put more devices into standard config, add ramdisk section
@
text
@d2 1
a2 3
#
#	$OpenBSD: MAKEDEV,v 1.30 2000/05/22 21:04:31 miod Exp $
#	$NetBSD: MAKEDEV,v 1.8 1996/03/03 16:54:17 thorpej Exp $
d38 2
d42 1
d45 1
d49 1
a49 1
#	xy*	Xylogics 450/451 disks
d51 1
d54 1
d57 1
d59 4
a62 1
# Call units:
d64 2
d72 2
a73 2
#	uk*	SCSI Unknown device
#	ss*	SCSI scanners
d75 1
a75 2
# XXX - Keep /usr/etc so SunOS can find chown
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/etc
d79 94
a172 2
# set this to echo for Echo-Only debugging
eo=
d174 1
a174 10
# mk name b/c major minor [mode] [group]
mk() {
	$eo rm -f $1
	$eo mknod $1 $2 $3 $4
	$eo chmod ${5-666} $1
	test -n "$6" && $eo chgrp $6 $1
	return 0
}

for arg
d177 1
a177 1
unit=`expr $arg : '[a-z][a-z]*\([0-9][0-9]*\)'`
d180 1
a180 1
case $arg in
d183 1
a183 1
	sh $this std fd sd0 sd1 sd2 sd3 sd4 xy0 xy1 xy2 xy3
d199 1
a199 1
#	sh $this xy0 xy1 xy2 xy3
d204 31
a234 22
	mk console	c 0 0 622
	mk kd		c 1 0 622
	mk tty		c 2 0

	mk mem		c 3 0 640 kmem
	mk kmem		c 3 1 640 kmem
	mk null		c 3 2
	mk eeprom	c 3 11 640 kmem
	mk zero		c 3 12
	mk drum		c 7 0 640 kmem

	mk ttya		c 12 0 666 tty
	mk ttyb		c 12 1 666 tty
	mk mouse	c 13 0
	mk klog		c 16 0 600
	mk fb		c 22 0
	mk kbd		c 29 0
	mk leds		c 3 13 644
	mk stdin        c 23 0
	mk stdout       c 23 1
	mk stderr       c 23 2
	mk ksyms        c 37 0 640 kmem
d238 29
a266 6
	mkdir fd >/dev/null 2>&1
	i=0 ; while [ $i != 64 ]
	do
		mk fd/$i c 23 $i
		i=`expr $i + 1`
	done
d270 4
a273 1
	mk bpf$unit c 36 $unit 600
d277 6
a282 4
	mk ipl c 75 0 600
	mk ipnat c 75 1 600
	mk ipstate c 75 2 600
	mk ipauth c 75 3 600
d286 134
a419 1
	mk tun$unit c 24 $unit 600
d440 1
a440 24
	*) echo bad unit for pty in: $arg;;
	esac
	for pair in 0.0 1.1 2.2 3.3 4.4 5.5 6.6 7.7 \
		8.8 9.9 a.10 b.11 c.12 d.13 e.14 f.15
	do
	(
		tmp="$IFS" ; IFS="$IFS."
		set -- $pair
		IFS="$tmp" ; unset tmp
		minor=`expr $offset + $2`
		mk tty$name$1 c 20 $minor
		mk pty$name$1 c 21 $minor
	)
	done
	;;

cd*|sd*|xy*|ccd*|rd*|vnd*)
	case $arg in
	  cd*) name=cd; blk=18; chr=58;;
	  sd*) name=sd; blk=7; chr=17;;
	  xy*) name=xy; blk=3; chr=9 ;;
	  ccd*) name=ccd; blk=9; chr=33;;
	  rd*) name=rd; blk=13; chr=52;;
	  vnd*) name=vnd; blk=5; chr=19;
d443 13
a455 2
	  0|1|2|3|4) offset=`expr $unit \* 8`;;
	  *) echo bad unit for $name in: $arg;;
a456 43
	for part in a.0 b.1 c.2 d.3 e.4 f.5 g.6 h.7
	do
	(
		tmp="$IFS" ; IFS="$IFS."
		set -- $part
		IFS="$tmp" ; unset tmp
		minor=`expr $offset + $2`
		mk  $name$unit$1 b $blk $minor 640 operator
		mk r$name$unit$1 c $chr $minor 640 operator
		if [ $name = vnd ]; then
		    sminor=`expr $minor + 128`
		    mk  s$name$unit$1 b $blk $sminor 640 operator
		    mk rs$name$unit$1 c $chr $sminor 640 operator
		fi
	)
	done
	;;

st*)
	name=st; blk=11; chr=18;
	offset=`expr $unit \* 16`;
	mk   r$name$unit c $chr `expr $offset + 0` 660 operator
	mk  nr$name$unit c $chr `expr $offset + 1` 660 operator
	mk  er$name$unit c $chr `expr $offset + 2` 660 operator
	mk enr$name$unit c $chr `expr $offset + 3` 660 operator
	;;

bwtwo*)
	mk bwtwo$unit c 27 $unit
	;;

cgtwo*)
	mk cgtwo$unit c 31 $unit
	;;

cgfour*)
	mk cgfour$unit c 39 $unit
	;;

rd*)
	mk  rd$unit b 13 $unit
#	mk rrd$unit b 13 `expr $unit + 16`
	mk rd${unit}c b 13 `expr $unit + 16`
d460 8
a467 5
	mk  random c 72 0
	mk srandom c 72 1
	mk urandom c 72 2
	mk prandom c 72 3
	mk arandom c 72 4
d471 5
a475 1
	mk uk$unit c 98 $unit 640 operator
d479 5
a483 1
	mk ss$unit c 99 $unit 440 operator
a488 4
xfs*)
	mk xfs$unit c 51 $unit 600 wheel
	;;

d491 1
a491 1
	test -s $this.local && sh $this.local
d494 1
a494 1
	echo $arg: unknown device
a495 1

@


1.30
log
@fix tty[ab] owner buglet
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.29 2000/05/19 23:30:37 miod Exp $
d46 3
a48 1
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
a59 1
#	lkm	loadable kernel modules interface
a60 1
#	rd*	"ramdisk" pseudo-disks
d91 6
a96 1
	sh $this std fd sd0 sd1 sd2 sd3 sd4 st0 st1 pty0 random ss0 uk0
d98 11
a108 1
	sh $this ipl xfs0
a252 1
	rm -f random urandom srandom prandom arandom
d272 1
a272 4
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
	chown root.wheel xfs$unit
@


1.29
log
@Add sd4 (as in sparc)
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.28 2000/03/22 07:34:30 niklas Exp $
d108 2
a109 2
	mk ttya		c 12 0 tty
	mk ttyb		c 12 1 tty
@


1.28
log
@operator should have perms to write and change tapes.  ch* is still missing
in some MAKEDEVs, will see to them in a separate commit.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.27 2000/03/02 22:59:05 todd Exp $
d91 1
a91 1
	sh $this std fd sd0 sd1 sd2 sd3 st0 st1 pty0 random ss0 uk0
@


1.27
log
@sun3 is alive, thanks to Miod Vallat <miodrag@@ifrance.com>, add ksyms.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.26 1998/11/25 04:58:55 millert Exp $
d213 4
a216 4
	mk   r$name$unit c $chr `expr $offset + 0`
	mk  nr$name$unit c $chr `expr $offset + 1`
	mk  er$name$unit c $chr `expr $offset + 2`
	mk enr$name$unit c $chr `expr $offset + 3`
@


1.26
log
@remove bogus comment about pty use; chris@@sefl.satelnet.org
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.25 1998/11/19 08:18:58 dugsong Exp $
d118 1
@


1.25
log
@add support for more ptys
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.24 1998/10/15 21:24:53 art Exp $
a149 1
# Note that telnetd, rlogind, and xterm (at least) only look at p-s.
@


1.24
log
@add missing entries for xfs in all
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.23 1998/09/27 21:59:51 kstailey Exp $
d152 11
@


1.23
log
@set group on tty devs
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.22 1998/09/27 21:58:09 kstailey Exp $
d93 1
a93 1
	sh $this ipl
@


1.22
log
@s/MAKEDEV/$this/
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.21 1998/09/25 12:42:22 todd Exp $
d108 2
a109 2
	mk ttya		c 12 0
	mk ttyb		c 12 1
@


1.21
log
@add xfs
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.20 1998/09/15 10:23:23 pattonme Exp $
d255 1
a255 1
	test -s MAKEDEV.local && sh $this.local
@


1.20
log
@Added definition for ipauth, a new piece for IPFilter v3.2.9
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.19 1998/01/26 04:19:50 dgregor Exp $
d43 1
a43 1
#	st*	? tape
d45 2
a46 2
#	sd*	Sun SCSI disks
#	fd*	Floppies
d48 1
a48 1
#	ccd*	concatenated disk driver
d54 4
a57 4
#	bwtwo*
#	cgtwo*
#	cgfour*
#	bpf*	packet filter
d60 3
a62 3
#	rd*	RAM-disk
#	*random	random data source
#	uk*	unknown SCSI
d67 1
d91 3
a93 3
	sh MAKEDEV std fd sd0 sd1 sd2 sd3 st0 st1 pty0 random ss0 uk0
	sh MAKEDEV bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh MAKEDEV ipl
d246 7
d255 1
a255 1
	test -s MAKEDEV.local && sh MAKEDEV.local
@


1.19
log
@Add /dev/ipnat and /dev/ipstate for IPF 3.2.3
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.18 1997/09/16 03:03:03 deraadt Exp $
d92 1
d136 1
@


1.18
log
@fix bpf nodes; someone should make sure 0-9 are on all, and rm them nicely
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.17 1997/05/17 19:12:03 kstailey Exp $
d133 2
@


1.17
log
@fix vnd
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.16 1997/05/14 15:41:22 niklas Exp $
d91 1
@


1.16
log
@Make svnd nodes too, please test this on your port
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.15 1997/05/13 05:34:59 millert Exp $
d162 1
a162 1
cd*|sd*|xy*|ccd*|rd*)
d169 1
d184 5
a190 31
	;;

vnd*)
	umask 2 ; unit=`expr $i : 'vnd\(.*\)'`
	for name in vnd svnd; do
		blk=5; chr=19;
		case $name in
		vnd)	off=0;;
		svnd)	off=128;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk `expr $unit '*' 8 + $off + 0`
		mknod ${name}${unit}b	b $blk `expr $unit '*' 8 + $off + 1`
		mknod ${name}${unit}c	b $blk `expr $unit '*' 8 + $off + 2`
		mknod ${name}${unit}d	b $blk `expr $unit '*' 8 + $off + 3`
		mknod ${name}${unit}e	b $blk `expr $unit '*' 8 + $off + 4`
		mknod ${name}${unit}f	b $blk `expr $unit '*' 8 + $off + 5`
		mknod ${name}${unit}g	b $blk `expr $unit '*' 8 + $off + 6`
		mknod ${name}${unit}h	b $blk `expr $unit '*' 8 + $off + 7`
		mknod r${name}${unit}a	c $chr `expr $unit '*' 8 + $off + 0`
		mknod r${name}${unit}b	c $chr `expr $unit '*' 8 + $off + 1`
		mknod r${name}${unit}c	c $chr `expr $unit '*' 8 + $off + 2`
		mknod r${name}${unit}d	c $chr `expr $unit '*' 8 + $off + 3`
		mknod r${name}${unit}e	c $chr `expr $unit '*' 8 + $off + 4`
		mknod r${name}${unit}f	c $chr `expr $unit '*' 8 + $off + 5`
		mknod r${name}${unit}g	c $chr `expr $unit '*' 8 + $off + 6`
		mknod r${name}${unit}h	c $chr `expr $unit '*' 8 + $off + 7`
		chown root.operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
	done
	umask 77
@


1.15
log
@Only run MAKEDEV.local if it exists.  Avoids an error message
during installs where there is no MAKEDEV.local.
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.14 1997/05/03 15:52:24 kstailey Exp $
d162 1
a162 1
cd*|sd*|xy*|vnd*|ccd*|rd*)
a166 1
	  vnd*) name=vnd; blk=5; chr=19;;
d185 31
@


1.14
log
@switch *random, ipl, ss* and uk* to using mk()
add rm -f to mk()
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.13 1997/02/22 21:09:13 kstailey Exp $
d237 1
a237 1
	sh MAKEDEV.local
@


1.13
log
@ramdisk now has raw version, disklabels
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.12 1997/02/05 02:37:45 kstailey Exp $
d74 1
d90 1
a90 1
      sh MAKEDEV std fd sd0 sd1 sd2 sd3 st0 st1 pty0 random ss0 uk0
d131 1
a131 2
	mknod ipl c 75 0
	chown root.wheel ipl
d217 5
a221 7
	mknod  random c 72 0
	mknod srandom c 72 1
	mknod urandom c 72 2
	mknod prandom c 72 3
	mknod arandom c 72 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
d225 1
a225 5
	unit=`expr $i : 'uk\(.*\)'`
	rm -f uk$unit
	mknod uk$unit c 98 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
d229 1
a229 5
	unit=`expr $i : 'ss\(.*\)'`
	rm -f ss$unit
	mknod ss$unit c 99 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
@


1.12
log
@fix ipl major number
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.11 1997/01/13 00:29:28 kstailey Exp $
d162 1
a162 1
cd*|sd*|xy*|vnd*|ccd*)
d169 1
@


1.11
log
@back-panel LED control device derived from code by der Mouse
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.10 1996/11/11 23:51:38 kstailey Exp $
d130 1
a130 1
	mknod ipl c 72 0
@


1.10
log
@Updates for SCSI scanner and SCSI unknown devices.
Removed MI *dev_decl() stuff that is now in sys/conf.h
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.9 1996/09/18 22:03:47 deraadt Exp $
d110 1
@


1.9
log
@do not use chgrp
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.8 1996/08/28 08:55:29 deraadt Exp $
d62 2
d89 1
a89 1
      sh MAKEDEV std fd sd0 sd1 sd2 sd3 st0 st1 pty0 random
d224 19
a252 1

@


1.8
log
@fix all random device node entry stuff
@
text
@d3 1
a3 1
#	$OpenBSD: MAKEDEV,v 1.7 1996/07/15 14:59:20 mickey Exp $
d108 3
a110 3
      mk stdin        c 23 0
      mk stdout       c 23 1
      mk stderr       c 23 2
@


1.7
log
@ad rnd devices.
@
text
@d3 1
a3 1
#	$OpenBSD$
d61 1
a61 1
#	*rnd	random data source
d87 1
a87 1
      sh MAKEDEV std fd sd0 sd1 sd2 sd3 st0 st1 pty0 rnd
d211 9
a219 8
rnd|srnd|urnd|prnd)
	rm -f rnd urnd srnd prnd
	mknod  rnd c 72 0
	mknod srnd c 72 1
	mknod urnd c 72 2
	mknod prnd c 72 3
	chown root.wheel rnd srnd urnd prnd
	chmod 644 rnd srnd urnd prnd
@


1.6
log
@From NetBSD: merge of 960317
@
text
@d61 1
d87 1
a87 1
      sh MAKEDEV std fd sd0 sd1 sd2 sd3 st0 st1 pty0
d209 10
@


1.5
log
@From netbsd:
Add fd to all; stdin, stdout, and stderr to std
@
text
@d3 3
a37 1
#	$Id: MAKEDEV,v 1.4 1996/01/07 07:41:28 dm Exp $
@


1.4
log
@created devices for the IP filter log on all architectures
@
text
@d35 1
a35 1
#	$Id: MAKEDEV,v 1.3 1995/12/15 02:33:13 deraadt Exp $
d84 1
a84 1
	sh MAKEDEV std sd0 sd1 sd2 sd3 st0 st1 pty0
d105 3
@


1.3
log
@update from netbsd
@
text
@d35 1
a35 1
#	$Id: MAKEDEV,v 1.6 1995/11/21 20:57:39 gwr Exp $
d118 5
@


1.2
log
@update from netbsd
@
text
@d35 1
a35 1
#	$Id: MAKEDEV,v 1.5.2.1 1995/11/21 21:03:28 gwr Exp $
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
#	$Id: MAKEDEV,v 1.5 1995/10/08 23:23:30 gwr Exp $
d175 1
a175 4
	case $unit in
	  0|1|2|3) offset=`expr $unit \* 16`;;
	  *) echo bad unit for $name in: $arg;;
	esac
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
