head	1.15;
access;
symbols
	OPENBSD_4_9:1.13.0.8
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@# @;


1.15
date	2011.07.07.19.16.43;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2011.04.18.16.52.11;	author thib;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.03.14.45.40;	author jj;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.01.19.44.53;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.11.07.20.46;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.06.05.57.39;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.05.03.00.27;	author kjc;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.09.05.58.39;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.30.06.46.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.21.01.41.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.14.04.58.36;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.14.04.39.56;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.02.02.37.13;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.28.02.58.56;	author kjc;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.26.22.37.36;	author smurph;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove mvmeppc; it is really rough shape.  ok drahn miod
@
text
@#!/bin/sh -
#	$OpenBSD: MAKEDEV,v 1.14 2011/04/18 16:52:11 thib Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Written and contributed by W. Jolitz 12/90
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	from: @@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#	$NetBSD: MAKEDEV,v 1.17 1996/02/03 15:02:42 briggs Exp $
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	std	standard devices
#	fd	makes fd/* for the fdescfs.
#	ramdisk	makes all devices for a ramdisk kernel
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	wd*	IDE disks
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	vnd*	"file" pseudo-disks
#	rd*	"ramdisk" pseudo-disks
#	ccd*	concatenated disk devices
#	raid*	RAIDframe disk devices
#
# Terminal ports:
#	ttyC*	wscons
#	tty*	standard built-in serial ports (2)
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd* wscons keyboard events
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Graphics devices:
#	grf*	custom chip (grf0), Retina Z2/Z3 (grf1/grf2),
#		Cirrus boards (grf3), A2410 (grf4) video or
#		CyberVision 64 (grf5)
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	urio*	Diamond Multimedia Rio 500
#	ugen*	Generic device
#	utty*	Serial ports
#
# Special purpose devices:
#	audio*  audio
#	ch*	SCSI media changer
#	bpf*	Berkeley Packet Filter
#	tun*	network tunnel driver
#	lkm	loadable kernel modules interface
#	*random	in-kernel random data source
#

PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77

# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
{
	case $1 in
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
	esac
}
trunc ()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	arg2="$2"
	echo ${arg1#$arg2}
}
unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
	done
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
	do
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
	done
	echo $arg1
}

for i
do

unit=`unt $i`
[ "$unit" ] || unit=0

case $i in

all)
	sh $this std fd
	sh $this wd0 wd1 wd2 wd3
	sh $this sd0 sd1 sd2 sd3 st0 st1 cd0 cd1
	sh $this vnd0 vnd1 vnd2 vnd3
	sh $this ccd0 ccd1 ccd2 ccd3
	sh $this raid0 raid1 raid2 raid3
	sh $this rd0
	sh $this ttyC0 ttyCcfg
	sh $this tty00 tty01 tty02 tty03 pty0 pty1
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this pf tun0 tun1 tun2 tun3
	sh $this audio0
	sh $this random uk0 uk1 ss0 ss1
	sh $this wscons
	sh $this pci
	sh $this lkm nnpfs0
	sh $this usbs
	;;

ramdisk)
	sh $this std
	sh $this wd0 wd1 wd2 wd3
	sh $this sd0 sd1 sd2 sd3 sd4 st0 st1 cd0 cd1
	sh $this rd0
	sh $this random
	sh $this bpf0
	sh $this tty00 tty01 pty0
	sh $this wscons
	;;

std)
	rm -f console drum kmem mem reload zero null tty
	rm -f klog stdin stdout stderr ksyms
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod reload		c 2 20	; chmod 640 reload ; chgrp kmem reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	mknod ksyms		c 43 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

usbs)
	sh $this usb0 usb1
	sh $this uhid0 uhid1 uhid2 uhid3
	sh $this ulpt0 ulpt1
	sh $this urio0
	sh $this utty0 utty1
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 21 $n; n="$(( $n + 1 ))"; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
	;;

sd*|wd*|ccd*|ofdisk*|raid*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	sd*) name=sd;		blk=2;	chr=8;;
	wd*) name=wd;		blk=0;	chr=11;;
	ofdisk*) name=ofdisk;	blk=4;	chr=13;;
	ccd*) name=ccd;		blk=16;	chr=18;;
	raid*) name=raid;	blk=19;	chr=54;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6|7|8|9)
		mknod ${name}${unit}a	b $blk $(( $unit * 16 + 0 ))
		mknod ${name}${unit}b	b $blk $(( $unit * 16 + 1 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 16 + 2 ))
		mknod ${name}${unit}d	b $blk $(( $unit * 16 + 3 ))
		mknod ${name}${unit}e	b $blk $(( $unit * 16 + 4 ))
		mknod ${name}${unit}f	b $blk $(( $unit * 16 + 5 ))
		mknod ${name}${unit}g	b $blk $(( $unit * 16 + 6 ))
		mknod ${name}${unit}h	b $blk $(( $unit * 16 + 7 ))
		mknod ${name}${unit}i	b $blk $(( $unit * 16 + 8 ))
		mknod ${name}${unit}j	b $blk $(( $unit * 16 + 9 ))
		mknod ${name}${unit}k	b $blk $(( $unit * 16 + 10 ))
		mknod ${name}${unit}l	b $blk $(( $unit * 16 + 11 ))
		mknod ${name}${unit}m	b $blk $(( $unit * 16 + 12 ))
		mknod ${name}${unit}n	b $blk $(( $unit * 16 + 13 ))
		mknod ${name}${unit}o	b $blk $(( $unit * 16 + 14 ))
		mknod ${name}${unit}p	b $blk $(( $unit * 16 + 15 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 16 + 0 ))
		mknod r${name}${unit}b	c $chr $(( $unit * 16 + 1 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 16 + 2 ))
		mknod r${name}${unit}d	c $chr $(( $unit * 16 + 3 ))
		mknod r${name}${unit}e	c $chr $(( $unit * 16 + 4 ))
		mknod r${name}${unit}f	c $chr $(( $unit * 16 + 5 ))
		mknod r${name}${unit}g	c $chr $(( $unit * 16 + 6 ))
		mknod r${name}${unit}h	c $chr $(( $unit * 16 + 7 ))
		mknod r${name}${unit}i	c $chr $(( $unit * 16 + 8 ))
		mknod r${name}${unit}j	c $chr $(( $unit * 16 + 9 ))
		mknod r${name}${unit}k	c $chr $(( $unit * 16 + 10 ))
		mknod r${name}${unit}l	c $chr $(( $unit * 16 + 11 ))
		mknod r${name}${unit}m	c $chr $(( $unit * 16 + 12 ))
		mknod r${name}${unit}n	c $chr $(( $unit * 16 + 13 ))
		mknod r${name}${unit}o	c $chr $(( $unit * 16 + 14 ))
		mknod r${name}${unit}p	c $chr $(( $unit * 16 + 15 ))
		chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

vnd*)
	umask 2 ; unit=${i##*[a-z]}
	blk=14; chr=19;
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(( $unit * 16 + 0 ))
	mknod ${name}${unit}b	b $blk $(( $unit * 16 + 1 ))
	mknod ${name}${unit}c	b $blk $(( $unit * 16 + 2 ))
	mknod ${name}${unit}d	b $blk $(( $unit * 16 + 3 ))
	mknod ${name}${unit}e	b $blk $(( $unit * 16 + 4 ))
	mknod ${name}${unit}f	b $blk $(( $unit * 16 + 5 ))
	mknod ${name}${unit}g	b $blk $(( $unit * 16 + 6 ))
	mknod ${name}${unit}h	b $blk $(( $unit * 16 + 7 ))
	mknod ${name}${unit}i	b $blk $(( $unit * 16 + 8 ))
	mknod ${name}${unit}j	b $blk $(( $unit * 16 + 9 ))
	mknod ${name}${unit}k	b $blk $(( $unit * 16 + 10 ))
	mknod ${name}${unit}l	b $blk $(( $unit * 16 + 11 ))
	mknod ${name}${unit}m	b $blk $(( $unit * 16 + 12 ))
	mknod ${name}${unit}n	b $blk $(( $unit * 16 + 13 ))
	mknod ${name}${unit}o	b $blk $(( $unit * 16 + 14 ))
	mknod ${name}${unit}p	b $blk $(( $unit * 16 + 15 ))
	mknod r${name}${unit}a	c $chr $(( $unit * 16 + 0 ))
	mknod r${name}${unit}b	c $chr $(( $unit * 16 + 1 ))
	mknod r${name}${unit}c	c $chr $(( $unit * 16 + 2 ))
	mknod r${name}${unit}d	c $chr $(( $unit * 16 + 3 ))
	mknod r${name}${unit}e	c $chr $(( $unit * 16 + 4 ))
	mknod r${name}${unit}f	c $chr $(( $unit * 16 + 5 ))
	mknod r${name}${unit}g	c $chr $(( $unit * 16 + 6 ))
	mknod r${name}${unit}h	c $chr $(( $unit * 16 + 7 ))
	mknod r${name}${unit}i	c $chr $(( $unit * 16 + 8 ))
	mknod r${name}${unit}j	c $chr $(( $unit * 16 + 9 ))
	mknod r${name}${unit}k	c $chr $(( $unit * 16 + 10 ))
	mknod r${name}${unit}l	c $chr $(( $unit * 16 + 11 ))
	mknod r${name}${unit}m	c $chr $(( $unit * 16 + 12 ))
	mknod r${name}${unit}n	c $chr $(( $unit * 16 + 13 ))
	mknod r${name}${unit}o	c $chr $(( $unit * 16 + 14 ))
	mknod r${name}${unit}p	c $chr $(( $unit * 16 + 15 ))
	chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	umask 77
	;;

tty0*)
	unit=${i##tty0}
	rm -f tty0$unit cua0$unit
	mknod tty0$unit c 7 $unit
	mknod cua0$unit c 7 `expr $unit + 128`
	chown uucp.dialer tty0$unit cua0$unit
	chmod 660 tty0$unit cua0$unit
	;;

pty*)
	class=${i##*[a-z]}
	case $class in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $class in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		n=0
		while [ $n -lt 16 ]
		do
			nam=$name`hex $n`
			rm -f {tty,pty}$nam
			mknod tty$nam c 4 $(( $offset + $n ))
			mknod pty$nam c 5 $(( $offset + $n ))
			n="$(( $n + 1 ))"
		done
		umask 77
		;;
	esac
	;;

st*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	st*) name=st;  chr=20; blk=5;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	b $blk $(( $unit * 16 + 0 ))
		mknod n${name}${unit}	b $blk $(( $unit * 16 + 1 ))
		mknod e${name}${unit}	b $blk $(( $unit * 16 + 2 ))
		mknod en${name}${unit}	b $blk $(( $unit * 16 + 3 ))
		mknod r${name}${unit}	c $chr $(( $unit * 16 + 0 ))
		mknod nr${name}${unit}	c $chr $(( $unit * 16 + 1 ))
		mknod er${name}${unit}	c $chr $(( $unit * 16 + 2 ))
		mknod enr${name}${unit}	c $chr $(( $unit * 16 + 3 ))
		chown root.operator ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit}
		chmod 660 ${name}${unit} n${name}${unit} \
			e$name$unit en$name$unit \
			r${name}${unit} nr${name}${unit} \
			er${name}${unit} enr${name}${unit}
		;;
	*)
		echo bad unit for tape in: $i
		;;
	esac
	umask 77
	;;

ch*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	ch*) name=ch;  chr=10;;
	esac
	rm -f $name$unit
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}	c $chr $unit
		chown root.operator ${name}${unit}
		chmod 660 ${name}${unit}
		;;
	*)
		echo bad unit for media changer in: $i
		;;
	esac
	umask 77
	;;

cd*)
	umask 2 ; unit=${i##*[a-z]}
	case $i in
	cd*) name=cd; blk=3; chr=9;;
	esac
	rm -f $name$unit? r$name$unit?
	case $unit in
	0|1|2|3|4|5|6)
		mknod ${name}${unit}a	b $blk $(( $unit * 8 + 0 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 8 + 2 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 8 + 0 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 8 + 2 ))
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

audio*)
	major=44
	audio=audio$unit
	sound=sound$unit
	mixer=mixer$unit
	audioctl=audioctl$unit
	rm -f $sound $audio $mixer $audioctl
	mknod $sound    c $major $unit
	mknod $audio    c $major $(( $unit + 128 ))
	mknod $mixer    c $major $(( $unit + 16 ))
	mknod $audioctl c $major $(( $unit + 192 ))
	chown root.wheel $audio $sound $mixer $audioctl
	chmod 666 $audio $sound $mixer $audioctl
	[ -e audio ] || ln -s $audio audio
	[ -e mixer ] || ln -s $mixer mixer
	[ -e sound ] || ln -s $sound sound
	[ -e audioctl ] || ln -s $audioctl audioctl
	;;

usb*)
	rm -f usb$unit
	mknod usb$unit c 61 $unit
	chown root.wheel usb$unit
	chmod 660 usb$unit
	;;

uhid*)
	rm -f uhid$unit
	mknod uhid$unit c 62 $unit
	chown root.wheel uhid$unit
	chmod 660 uhid$unit
	;;

ugen*)
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		rm -f ugen$unit.$j
		mknod ugen$unit.$j c 63 $(( $unit * 16 + $j ))
		chown root.wheel ugen$unit.$j
		chmod 660 ugen$unit.$j
	done
	;;

ulpt*)
	rm -f ulpt$unit
	mknod ulpt$unit c 64 $unit
	chown root.wheel ulpt$unit
	chmod 660 ulpt$unit
	;;

urio*)
	rm -f urio$unit
	mknod urio$unit c 65 $unit
	chown root.wheel urio$unit
	chmod 660 urio$unit
	;;

utty*)
	rm -f utty$unit
	mknod utty$unit c 66 $unit
	chown root.wheel utty$unit
	chmod 660 utty$unit
	;;


ttyCcfg)
	major=67
	minor=255
	rm -f ttyCcfg
	mknod ttyCcfg c $major $minor
	chown root.wheel ttyCcfg
        ;;

ttyC*)
	type=C
	unit=${i##ttyC}
	major=67
	minor=$unit
        rm -f tty$type$unit
        mknod tty$type$unit c $major $minor
        chown root.wheel tty$type$unit
        ;;

bpf*)
	unit=${i##*[a-z]}
	rm -f bpf${unit}
	mknod bpf${unit} c 22 ${unit}
	chown root.wheel bpf${unit}
	;;

pf)
	rm -f pf
	mknod pf c 39 0
	chown root.wheel pf
	chmod 600 pf
	;;

tun*)
	unit=${i##*[a-z]}
	rm -f tun$unit
	mknod tun$unit c 23 $unit
	chmod 600 tun$unit
	chown root.wheel tun$unit
	;;

rd*)
	blk=17; chr=17;
	umask 2 ; unit=${i##*[a-z]}
	rm -f rd${unit}a rd${unit}c rrd${unit}a rrd${unit}c
	mknod rd${unit}a b ${blk} $(( $unit * 16 + 0 ))
	mknod rd${unit}c b ${blk} $(( $unit * 16 + 2 ))
	mknod rrd${unit}a c ${chr} $(( $unit * 16 + 0 ))
	mknod rrd${unit}c c ${chr} $(( $unit * 16 + 2 ))
	chown root.operator rd${unit}[ac] rrd${unit}[ac]
	chmod 640 rd${unit}[ac] rrd${unit}[ac]
	umask 77
	;;

lkm)
	rm -f lkm
	mknod lkm c 24 0
	chown root._lkm lkm
	chmod 640 lkm
	;;

pci*)
	rm -f pci
	mknod pci c 71 0
	chown root.kmem pci
	chmod 664 pci
	;;

random|srandom|urandom|prandom|arandom)
	rm -f random urandom srandom prandom arandom
	mknod  random c 40 0
	mknod srandom c 40 1
	mknod urandom c 40 2
	mknod prandom c 40 3
	mknod arandom c 40 4
	chown root.wheel random srandom urandom prandom arandom
	chmod 644 random srandom urandom prandom arandom
	;;
uk*)
	unit=${i##*[a-z]}
	rm -f uk$unit
	mknod uk$unit c 41 $unit
	chown root.operator uk$unit
	chmod 640 uk$unit
	;;

ss*)
	unit=${i##*[a-z]}
	rm -f ss$unit
	mknod ss$unit c 42 $unit
	chown root.operator ss$unit
	chmod 440 ss$unit
#	backwards compatibility with older PINTs
	rm -f scan$unit
	ln -s ss$unit scan$unit
	;;
wscons)
	sh $this wskbd0 wskbd1 wskbd2 wskbd3
	sh $this wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $this ttyCcfg
	sh $this wsmux
	;;
wsmux|wsmouse|wskbd)
	rm -f wsmouse wskbd
	mknod wsmouse c 70 0
	mknod wskbd c 70 1
	chown root.wheel wsmouse wskbd
	chmod 600 wsmouse wskbd
	;;

wskbd*)
	unit=${i##*[a-z]}
	rm -f wskbd${unit}
	mknod wskbd${unit} c 68 ${unit}
	# XXX
	chmod 660 wskbd${unit}
	chown root.wheel wskbd${unit}
	;;
wsmouse*)
	unit=${i##*[a-z]}
	rm -f wsmouse${unit}
	mknod wsmouse${unit} c 69 ${unit}
	# XXX
	chmod 660 wsmouse${unit}
	chown root.wheel wsmouse${unit}
	;;

nnpfs*)
	rm -f nnpfs$unit
	mknod nnpfs$unit c 51 $unit
	chmod 600 nnpfs$unit
	chown root.wheel nnpfs$unit
	;;

*)
	echo $i: unknown device
esac
done

@


1.14
log
@Deprecate vnds in favour of svnds.

In effect, this removes the "old" vndX nodes, and renames
the svndX nodes to vndX.

Old svndX nodes will still continue to work though, for now.

Cleanup accordingly.

ok deraadt@@, todd@@
comments and ok on the man page bits from jmc@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.13 2009/06/03 14:45:40 jj Exp $
@


1.13
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.12 2005/08/01 19:44:53 jmc Exp $
d271 36
a306 42
	for name in vnd svnd; do
		blk=14; chr=19;
		case $name in
		vnd)	off=0;;
		svnd)	off=2048;;
		esac
		rm -f $name$unit? r$name$unit?
		mknod ${name}${unit}a	b $blk $(( $unit * 16 + $off + 0 ))
		mknod ${name}${unit}b	b $blk $(( $unit * 16 + $off + 1 ))
		mknod ${name}${unit}c	b $blk $(( $unit * 16 + $off + 2 ))
		mknod ${name}${unit}d	b $blk $(( $unit * 16 + $off + 3 ))
		mknod ${name}${unit}e	b $blk $(( $unit * 16 + $off + 4 ))
		mknod ${name}${unit}f	b $blk $(( $unit * 16 + $off + 5 ))
		mknod ${name}${unit}g	b $blk $(( $unit * 16 + $off + 6 ))
		mknod ${name}${unit}h	b $blk $(( $unit * 16 + $off + 7 ))
		mknod ${name}${unit}i	b $blk $(( $unit * 16 + $off + 8 ))
		mknod ${name}${unit}j	b $blk $(( $unit * 16 + $off + 9 ))
		mknod ${name}${unit}k	b $blk $(( $unit * 16 + $off + 10 ))
		mknod ${name}${unit}l	b $blk $(( $unit * 16 + $off + 11 ))
		mknod ${name}${unit}m	b $blk $(( $unit * 16 + $off + 12 ))
		mknod ${name}${unit}n	b $blk $(( $unit * 16 + $off + 13 ))
		mknod ${name}${unit}o	b $blk $(( $unit * 16 + $off + 14 ))
		mknod ${name}${unit}p	b $blk $(( $unit * 16 + $off + 15 ))
		mknod r${name}${unit}a	c $chr $(( $unit * 16 + $off + 0 ))
		mknod r${name}${unit}b	c $chr $(( $unit * 16 + $off + 1 ))
		mknod r${name}${unit}c	c $chr $(( $unit * 16 + $off + 2 ))
		mknod r${name}${unit}d	c $chr $(( $unit * 16 + $off + 3 ))
		mknod r${name}${unit}e	c $chr $(( $unit * 16 + $off + 4 ))
		mknod r${name}${unit}f	c $chr $(( $unit * 16 + $off + 5 ))
		mknod r${name}${unit}g	c $chr $(( $unit * 16 + $off + 6 ))
		mknod r${name}${unit}h	c $chr $(( $unit * 16 + $off + 7 ))
		mknod r${name}${unit}i	c $chr $(( $unit * 16 + $off + 8 ))
		mknod r${name}${unit}j	c $chr $(( $unit * 16 + $off + 9 ))
		mknod r${name}${unit}k	c $chr $(( $unit * 16 + $off + 10 ))
		mknod r${name}${unit}l	c $chr $(( $unit * 16 + $off + 11 ))
		mknod r${name}${unit}m	c $chr $(( $unit * 16 + $off + 12 ))
		mknod r${name}${unit}n	c $chr $(( $unit * 16 + $off + 13 ))
		mknod r${name}${unit}o	c $chr $(( $unit * 16 + $off + 14 ))
		mknod r${name}${unit}p	c $chr $(( $unit * 16 + $off + 15 ))
		chown root.operator ${name}${unit}[a-p] r${name}${unit}[a-p]
		chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	done
@


1.12
log
@kernal->kernel;
from netbsd pr #30872 (anonymous post);
ok deraadt@@ krw@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.11 2003/10/11 07:20:46 tedu Exp $
d164 1
a164 1
	sh $this lkm xfs0
d628 5
a632 5
xfs*)
	rm -f xfs$unit
	mknod xfs$unit c 51 $unit
	chmod 600 xfs$unit
	chown root.wheel xfs$unit
@


1.11
log
@svnd gap here too.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.10 2003/01/06 05:57:39 deraadt Exp $
d78 1
a78 1
#	*random	inkernal random data source
@


1.10
log
@sync
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.9 2002/12/05 03:00:27 kjc Exp $
d275 1
a275 1
		svnd)	off=128;;
@


1.9
log
@remove altq entries. altq is now handled through pf.
ok, deraadt@@
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.8 2002/06/09 05:58:39 todd Exp $
d558 1
a558 1
	chown root.kmem lkm
@


1.8
log
@sync
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.7 2002/05/30 06:46:13 deraadt Exp $
a78 1
#	altq	ALTQ control interface
d164 1
a164 1
	sh $this lkm xfs0 altq
a632 13
	;;

altq)
	mkdir -p altq
	chmod 755 altq
	unit=0
	for dev in altq cbq wfq afm fifoq red rio localq hfsc \
	    cdnr blue priq; do
		rm -f altq/$dev
		mknod altq/$dev c 71 $unit
		chmod 644 altq/$dev
		unit=$(($unit + 1))
	done
@


1.7
log
@space nits
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.6 2002/05/21 01:41:56 deraadt Exp $
d24 1
a24 1
#	$NetBSD: MAKEDEV,v 1.17 1996/02/03 15:02:42 briggs Exp $ 
d151 1
a151 1
	sh $this wd0 wd1 wd2 wd3 
d171 1
a171 1
	sh $this wd0 wd1 wd2 wd3 
d370 1
a370 1
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
d384 1
a384 1
			er${name}${unit} enr${name}${unit} 
d388 1
a388 1
			er${name}${unit} enr${name}${unit} 
d502 1
a502 1
 
d507 1
a507 1
	mknod ttyCcfg c $major $minor  
d614 1
a614 1
	rm -f wskbd${unit} 
d622 1
a622 1
	rm -f wsmouse${unit} 
d631 2
a632 2
	mknod xfs$unit c 51 $unit 
	chmod 600 xfs$unit 
@


1.6
log
@fake sync (not yet using MAKEDEV.md)
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.5 2002/02/14 04:58:36 todd Exp $
d222 1
a222 1
	ccd*) name=ccd; 	blk=16;	chr=18;;
@


1.5
log
@escapees; it is not yet time (but soon)
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.3 2001/07/02 02:37:13 angelos Exp $
a30 1
#	local	configuration specific devices
a166 1
	sh $this local
a646 5
	;;

local)
	umask 0
	test -s MAKEDEV.local && sh $this.local
@


1.4
log
@sync
@
text
@d2 1
a2 33
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: MAKEDEV.mi,v 1.26 2002/02/10 21:52:30 deraadt Exp 
#	OpenBSD: MAKEDEV.sub,v 1.5 2002/01/23 06:02:19 todd Exp 
#
#	$OpenBSD$
#
# Copyright (c) 2001 Todd T. Fries <todd@@OpenBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#!/bin/sh -
#	$OpenBSD: MAKEDEV.md,v 1.1 2002/02/08 20:26:36 todd Exp $
a26 1
# Device "make" file.  Valid arguments:
d30 1
a30 1
#	fd	makes fd/* for the fdescfs
d33 1
d36 1
d38 2
a39 1
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
d46 1
d48 3
a50 4
#	ttyC0	wscons screen 0
#	ttyC*	wscons virtual consoles
#	wskbd*	wscons keyboards
#	tty0*	NS16x50 serial ports
d52 5
a56 1
#	wsmouse*	wscons mice
d58 8
a65 5
#	tty*	set of 16 slave psuedo terminals
#	pty*	set of 16 master pseudo terminals
graphics_title
mac_grf_dev
_TTILE(usb)
d67 1
a67 1
uid_dev
d72 1
d74 1
a74 1
#	audio*	audio device
d79 2
a80 4
#	*random	inkernel random data source
#	altq/	ALTQ control interface
#	pf*	Packet Filter
#	usbs	make USB devices
a81 2
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0
d83 3
a85 2
# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=
d87 16
a102 1
hex()
d105 7
a111 7
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
d114 1
a114 2

trunc()
d120 1
a120 4
	case $3 in
	l)   echo ${arg2#$arg1} ;;
	r|*) echo ${arg1#$arg2} ;;
	esac
a121 1

d126 3
a128 4
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
d130 2
a131 3
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
d133 2
a134 10
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	RMlist="$RMlist $1$2? r$1$2?"
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
d136 2
a137 3
		M $1$2$d	b $3 $(($n+$count)) 640
		M r$1$2$d	c $4 $(($n+$count)) 640
		let count=count+1
d139 1
a139 1
	MKlist="$MKlist;chown root.operator $1$2? r$1$2?"
d142 5
a146 9
dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}
d148 1
a148 12
# M name b/c major minor [mode] [group]
RMlist="rm -f"
MKlist=":"

mkl() {
	[ "${mklist[$1]}" ] && {
		mklist[$1]="${mklist[$1]};mknod -m $1 $2 $3 $4 $5"
	} || {
		mklist[$1]="mknod -m $1 $2 $3 $4 $5"
		modes="$modes $1"
	}
}
d150 20
a169 20
M() {
	RMlist="$RMlist $1"
	mkl ${5-666} $1 $2 $3 $4
	mklist="$mklist $1"
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist="$MKlist;chown $7.$G $1"
	} || {
		case $G in
		wheel)g=0;;kmem)g=2;;operator)g=5;;tty)g=4;;dialer)g=117;;
		esac
		[ "${grplist[$g]}" ] && {
			grplist[$g]="${grplist[$g]} $1"
		} || {
			groups="$groups $g"
			grplist[$g]="chgrp $G $1"
		}
	}
	return 0
}
d171 10
a180 6
R() {
[ "$DEBUG" ] && set -x
for i in "$@@"
do
U=`unt $i`
[ "$U" ] || U=0
a181 1
case $i in
d183 33
a215 13
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 21 0
	M stdout	c 21 1
	M stderr	c 21 2
	M ksyms		c 43 0 640 kmem
	M drum		c 3 0 640 kmem
	M klog		c 6 0 600
	M reload	c 2 20	640 kmem
a660 228

usbs)
	R utty0 utty1 ugen0 ugen1 ulpt0 ulpt1 urio0 usb0 usb1
	;;

pf*)
	M pf c 39 0 600
	;;

altq)
	RMlist="mkdir -p altq;$RMlist"
	for d in altq cbq wfq afm fifoq red rio localq hfsc cdnr blue priq; do
		M altq/$d c major_altq_c $U 644
		U=$(($U+1))
	done
	;;

*random)
	n=0
	for pre in " " s u p a
	do
		M ${pre}random c major_rnd_c $n 644
		n=$(($n+1))
	done
	;;

lkm)
	M lkm c major_lkm_c 0 640 kmem
	;;

tun*)
	M tun$U c major_tun_c $U 600
	;;

bpf*)
	M bpf$U c major_bpf_c $U 600
	;;

ch*)
	M ch$U c major_ch_c $U 660 operator
	;;

audio*)
	M sound$U	c major_au_c $U
	M mixer$U	c major_au_c $(($U+16))
	M audio$U	c major_au_c $(($U+128))
	M audioctl$U	c major_au_c $(($U+192))
	MKlist="$MKlist;[ -e audio ] || ln -s audio$U audio"
	MKlist="$MKlist;[ -e mixer ] || ln -s mixer$U mixer"
	MKlist="$MKlist;[ -e sound ] || ln -s sound$U sound"
	MKlist="$MKlist;[ -e audioctl ] || ln -s audioctl$U audioctl"
	;;

utty*)
	M utty$U c major_utty_c $U 660
	;;

ugen*)
	n=$(($U*16))
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		M ugen$U.$j c major_ugen_c $(($n+$j)) 660
	done
	;;

urio*)
	M urio$U c major_urio_c $U 660
	;;

ulpt*)
	M ulpt$U c major_ulpt_c $U 660
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c major_usb_c $U 660
	;;

pty*)
	case $U in
	0) off=0 name=p;;
	1) off=16 name=q;;
	2) off=32 name=r;;
	3) off=48 name=s;;
	4) off=64 name=t;;
	5) off=80 name=u;;
	6) off=96 name=v;;
	7) off=112 name=w;;
	8) off=128 name=x;;
	9) off=144 name=y;;
	10) off=160 name=z;;
	11) off=176 name=P;;
	12) off=192 name=Q;;
	13) off=206 name=R;;
	14) off=224 name=S;;
	15) off=240 name=T;;
	*) echo bad unit for pty in: $i; continue;;
	esac
	n=0
	while [ $n -lt 16 ]
	do
		nam=$name$(hex $n)
		M tty$nam c major_tty_c $(($off+$n))
		M pty$nam c major_pty_c $(($off+$n))
		n=$(($n+1))
	done
	;;

wsmouse*)
	M wsmouse$U c 69 $U 600
	;;

tty0*)
	M tty$U c 7 $U 660 dialer uucp
	M cua$U c 7 $(($U+128)) 660 dialer uucp
	;;

wskbd*)
	M wskbd$U c 68 $U 600
	;;

ttyC*)
	U=${i##ttyC}
	case $U in
	[0-9a-f]) M ttyC$U c 67 $(( 16#$U )) 600;;
	cfg) M ttyCcfg c 67 255 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R ttyCcfg
	R ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5 ttyC6 ttyC7 ttyC8 ttyC9
	R ttyCa ttyCb wskbd0 wskbd1 wskbd2 wskbd3
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3
	;;

rd*)
	dodisk2 rd $U 17 17 $U 0
	;;

vnd*)
	dodisk vnd $U 14 19 $U 0
	dodisk svnd $U 14 19 $U 128
	;;

cd*)
	dodisk2 cd $U 3 9 $U 0
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}st$U	b 5 $n 660 operator
		M ${pre}rst$U	c 20 $n 660 operator
		n=$(($n+1))
	done
	;;

ramdisk)
	R std bpf0 st0 st1 cd0 cd1 sd0 sd1 sd2 sd3 sd4 wd0 wd1 wd2
	R wd3 rd0 ttyC0
	;;

local)
	test -s $T.local && sh $T.local
	;;

fd)
	RMlist="mkdir -p fd;$RMlist" n=0
	while [ $n -lt 64 ];do M fd/$n c 21 $n;n=$(($n+1));done
	MKlist="$MKlist;chmod 555 fd"
	;;

all)
	R local wscons usbs audio0 rndrandom lkm tty00 tty01 tty02
	R tty03 pf altq tun0 tun1 tun2 tun3 bpf0 bpf1 bpf2 bpf3 bpf4
	R bpf5 bpf6 bpf7 bpf8 bpf9 wd0 wd1 wd2 wd3 rd0 raid0 raid1
	R raid2 raid3 ccd0 ccd1 ccd2 ccd3 vnd0 vnd1 vnd2 vnd3 std cd0
	R cd1 ch0 st0 st1 pty0 pty1 fd sd0 sd1 sd2 sd3 sd4
	;;

wd*|sd*|raid*|ccd*)
	case $i in
	wd*) dodisk wd $U 0 11 $U 0;;
	sd*) dodisk sd $U 2 8 $U 0;;
	raid*) dodisk raid $U 19 54 $U 0;;
	ccd*) dodisk ccd $U 16 18 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@@"
if [ "$os" = "SunOS" ]; then
	eo=transform
	transform() {
		case $mode in
		600) mask=077;;
		640) mask=027;;
		660) mask=007;;
		644) mask=022;;
		666) mask=0;;
		440) mask=227;;
		esac
		echo `echo "$@@"|sed \
		    's/mknod -m \([0-9]*\) /umask '$mask';mknod /;s/-m [0-9]* //g;\
		    s/operator/5/g;s/root.kmem/root.2/g;s/root\./root:/g'`
	}
fi
list="$RMlist"
for mode in $modes; do
	list="$list;${mklist[$mode]}"
done
for group in $groups; do
	list="$list;${grplist[$group]}"
done
list="$list;$MKlist"
if [ "$eo" = "echo" -o "$eo" = "transform" ]; then
	$eo "$list"
else
	echo "$list" | sh
fi
@


1.3
log
@/dev/pf is major 39; openbsd@@davidkrause.com
@
text
@d2 33
a34 1
#	$OpenBSD: MAKEDEV,v 1.2 2001/06/28 02:58:56 kjc Exp $
d59 1
d63 1
a63 1
#	fd	makes fd/* for the fdescfs.
a65 1
#
a67 1
#
d69 1
a69 2
#	fd*	Floppy disk drives (3 1/2", 5 1/4")
#	wd*	IDE disks
a75 1
#
d77 4
a80 3
#	ttyC*	wscons
#	tty*	standard built-in serial ports (2)
#
d82 1
a82 5
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd* wscons keyboard events
#
d84 5
a88 8
#	pty*	set of 16 master and slave pseudo terminals
#
# Graphics devices:
#	grf*	custom chip (grf0), Retina Z2/Z3 (grf1/grf2),
#		Cirrus boards (grf3), A2410 (grf4) video or
#		CyberVision 64 (grf5)
#
# USB devices:
d90 1
a90 1
#	uhid*	Generic HID devices
a94 1
#
d96 1
a96 1
#	audio*  audio
d101 4
a104 2
#	*random	inkernal random data source
#	altq	ALTQ control interface
d106 2
d109 2
a110 3
PATH=/sbin:/bin:/usr/bin:/usr/sbin
this=$0
umask 77
d112 1
a112 16
# default shell support functions
add ()
{
	tmp=0
	while [ "$1" ]
	do
		tmp=$(( $1 + $tmp ))
		shift
	done
	echo $tmp
}
mult ()
{
	echo "$(( $1 * $2 ))"
}
hex ()
d115 7
a121 7
		[0-9]) echo -n $1;;
		10) echo -n a;;
		11) echo -n b;;
		12) echo -n c;;
		13) echo -n d;;
		14) echo -n e;;
		15) echo -n f;;
d124 2
a125 1
trunc ()
d131 4
a134 1
	echo ${arg1#$arg2}
d136 1
d141 4
a144 3
	arg1="$1"
	tmp="${arg1#[a-z]*}"
	while [ "$tmp" != "$arg1" ]
d146 3
a148 2
		arg1=$tmp
		tmp="${arg1#[a-z]*}"
d150 10
a159 2
	tmp="${arg1%*[a-z]}"
	while [ "$tmp" != "$arg1" ]
d161 3
a163 2
		arg1=$tmp
		tmp="${arg1%*[a-z]}"
d165 1
a165 1
	echo $arg1
d168 9
a176 2
for i
do
d178 12
a189 2
unit=`unt $i`
[ "$unit" ] || unit=0
d191 20
a210 1
case $i in
d212 6
a217 31
all)
	sh $this std fd
	sh $this wd0 wd1 wd2 wd3 
	sh $this sd0 sd1 sd2 sd3 st0 st1 cd0 cd1
	sh $this vnd0 vnd1 vnd2 vnd3
	sh $this ccd0 ccd1 ccd2 ccd3
	sh $this raid0 raid1 raid2 raid3
	sh $this rd0
	sh $this ttyC0 ttyCcfg
	sh $this tty00 tty01 tty02 tty03 pty0 pty1
	sh $this bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7 bpf8 bpf9
	sh $this pf tun0 tun1 tun2 tun3
	sh $this audio0
	sh $this random uk0 uk1 ss0 ss1
	sh $this wscons
	sh $this pci
	sh $this lkm xfs0 altq
	sh $this usbs
	sh $this local
	;;

ramdisk)
	sh $this std
	sh $this wd0 wd1 wd2 wd3 
	sh $this sd0 sd1 sd2 sd3 sd4 st0 st1 cd0 cd1
	sh $this rd0
	sh $this random
	sh $this bpf0
	sh $this tty00 tty01 pty0
	sh $this wscons
	;;
d219 1
d221 13
a233 33
	rm -f console drum kmem mem reload zero null tty
	rm -f klog stdin stdout stderr ksyms
	mknod console		c 0 0
	mknod drum		c 3 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 2 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 2 0	; chmod 640 mem ; chgrp kmem mem
	mknod reload		c 2 20	; chmod 640 reload ; chgrp kmem reload
	mknod zero		c 2 12	; chmod 666 zero
	mknod null		c 2 2	; chmod 666 null
	mknod tty		c 1 0	; chmod 666 tty
	mknod klog		c 6 0	; chmod 600 klog
	mknod stdin		c 21 0	; chmod 666 stdin
	mknod stdout		c 21 1	; chmod 666 stdout
	mknod stderr		c 21 2	; chmod 666 stderr
	mknod ksyms		c 43 0  ; chmod 640 ksyms ; chown root.kmem ksyms
	;;

usbs)
	sh $this usb0 usb1
	sh $this uhid0 uhid1 uhid2 uhid3
	sh $this ulpt0 ulpt1
	sh $this urio0
	sh $this utty0 utty1
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	(cd fd && while [ $n -lt 64 ]; do mknod $n c 21 $n; n="$(( $n + 1 ))"; done)
	chown -R root.wheel fd
	chmod 555 fd
	chmod 666 fd/*
d679 228
@


1.2
log
@add an entry for ALTQ.
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.1 2001/06/26 22:37:36 smurph Exp $
d532 1
a532 1
	mknod pf c 73 0
@


1.1
log
@Initial import for mvmeppc
@
text
@d2 1
a2 1
#	$OpenBSD: MAKEDEV,v 1.50 2001/06/26 07:04:17 drahn Exp $
d80 1
d166 1
a166 1
	sh $this lkm xfs0
d636 13
@

