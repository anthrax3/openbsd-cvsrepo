head	1.3;
access;
symbols
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	97.07.06.08.52.41;	author provos;	state dead;
branches;
next	1.2;

1.2
date	96.02.10.21.04.31;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.44;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.44;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.3
log
@obsolete.
@
text
@/* lib/des/pcbc_enc.c */
/* Copyright (C) 1995 Eric Young (eay@@mincom.oz.au)
 * All rights reserved.
 * 
 * This file is part of an SSL implementation written
 * by Eric Young (eay@@mincom.oz.au).
 * The implementation was written so as to conform with Netscapes SSL
 * specification.  This library and applications are
 * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
 * as long as the following conditions are aheared to.
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.  If this code is used in a product,
 * Eric Young should be given attribution as the author of the parts used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by Eric Young (eay@@mincom.oz.au)
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include "des_locl.h"

void des_pcbc_encrypt(input, output, length, schedule, ivec, encrypt)
des_cblock (*input);
des_cblock (*output);
long length;
des_key_schedule schedule;
des_cblock (*ivec);
int encrypt;
	{
	register unsigned long sin0,sin1,xor0,xor1,tout0,tout1;
	unsigned long tin[2];
	unsigned char *in,*out,*iv;

	in=(unsigned char *)input;
	out=(unsigned char *)output;
	iv=(unsigned char *)ivec;

	if (encrypt)
		{
		c2l(iv,xor0);
		c2l(iv,xor1);
		for (; length>0; length-=8)
			{
			if (length >= 8)
				{
				c2l(in,sin0);
				c2l(in,sin1);
				}
			else
				c2ln(in,sin0,sin1,length);
			tin[0]=sin0^xor0;
			tin[1]=sin1^xor1;
			des_encrypt((unsigned long *)tin,schedule,DES_ENCRYPT);
			tout0=tin[0];
			tout1=tin[1];
			xor0=sin0^tout0;
			xor1=sin1^tout1;
			l2c(tout0,out);
			l2c(tout1,out);
			}
		}
	else
		{
		c2l(iv,xor0); c2l(iv,xor1);
		for (; length>0; length-=8)
			{
			c2l(in,sin0);
			c2l(in,sin1);
			tin[0]=sin0;
			tin[1]=sin1;
			des_encrypt((unsigned long *)tin,schedule,DES_DECRYPT);
			tout0=tin[0]^xor0;
			tout1=tin[1]^xor1;
			if (length >= 8)
				{
				l2c(tout0,out);
				l2c(tout1,out);
				}
			else
				l2cn(tout0,tout1,out,length);
			xor0=tout0^sin0;
			xor1=tout1^sin1;
			}
		}
	tin[0]=tin[1]=0;
	sin0=sin1=xor0=xor1=tout0=tout1=0;
	}
@


1.2
log
@Upgraded to latest version of DES library
@
text
@@


1.1
log
@Initial revision
@
text
@d1 46
a46 1
/*	$Id$	*/
a47 1
/* Copyright (C) 1993 Eric Young - see README for more details */
d50 11
a60 5
int des_pcbc_encrypt(des_cblock (*input), des_cblock (*output), long int length, struct des_ks_struct *schedule, des_cblock (*ivec), int encrypt)
{
  register u_int32_t sin0,sin1,xor0,xor1,tout0,tout1;
  u_int32_t tin[2],tout[2];
  unsigned char *in,*out,*iv;
d62 3
a64 3
  in=(unsigned char *)input;
  out=(unsigned char *)output;
  iv=(unsigned char *)ivec;
d66 49
a114 47
  if (encrypt)
    {
      c2l(iv,xor0);
      c2l(iv,xor1);
      for (; length>0; length-=8)
	{
	  if (length >= 8)
	    {
	      c2l(in,sin0);
	      c2l(in,sin1);
	    }
	  else
	    c2ln(in,sin0,sin1,length);
	  tin[0]=sin0^xor0;
	  tin[1]=sin1^xor1;
	  des_encrypt(tin,tout,
		      schedule,encrypt);
	  tout0=tout[0];
	  tout1=tout[1];
	  xor0=sin0^tout[0];
	  xor1=sin1^tout[1];
	  l2c(tout0,out);
	  l2c(tout1,out);
	}
    }
  else
    {
      c2l(iv,xor0); c2l(iv,xor1);
      for (; length>0; length-=8)
	{
	  c2l(in,sin0);
	  c2l(in,sin1);
	  tin[0]=sin0;
	  tin[1]=sin1;
	  des_encrypt(tin,tout,
		      schedule,encrypt);
	  tout0=tout[0]^xor0;
	  tout1=tout[1]^xor1;
	  if (length >= 8)
	    {
	      l2c(tout0,out);
	      l2c(tout1,out);
	    }
	  else
	    l2cn(tout0,tout1,out,length);
	  xor0=tout0^sin0;
	  xor1=tout1^sin1;
a115 5
    }
  tin[0]=tin[1]=tout[0]=tout[1]=0;
  sin0=sin1=xor0=xor1=tout0=tout1=0;
  return(0);
}
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
