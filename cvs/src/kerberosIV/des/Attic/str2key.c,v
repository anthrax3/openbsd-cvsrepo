head	1.4;
access;
symbols
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	97.07.06.08.52.49;	author provos;	state dead;
branches;
next	1.3;

1.3
date	96.02.10.21.04.38;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.17.19.12.08;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.45;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.45;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.4
log
@obsolete.
@
text
@/* lib/des/str2key.c */
/* Copyright (C) 1995 Eric Young (eay@@mincom.oz.au)
 * All rights reserved.
 * 
 * This file is part of an SSL implementation written
 * by Eric Young (eay@@mincom.oz.au).
 * The implementation was written so as to conform with Netscapes SSL
 * specification.  This library and applications are
 * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
 * as long as the following conditions are aheared to.
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.  If this code is used in a product,
 * Eric Young should be given attribution as the author of the parts used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by Eric Young (eay@@mincom.oz.au)
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include "des_locl.h"

extern int des_check_key;

void des_string_to_key(str, key)
char *str;
des_cblock (*key);
	{
	des_key_schedule ks;
	int i,length;
	register unsigned char j;

	memset(key,0,8);
	length=strlen(str);
#ifdef OLD_STR_TO_KEY
	for (i=0; i<length; i++)
		(*key)[i%8]^=(str[i]<<1);
#else /* MIT COMPATIBLE */
	for (i=0; i<length; i++)
		{
		j=str[i];
		if ((i%16) < 8)
			(*key)[i%8]^=(j<<1);
		else
			{
			/* Reverse the bit order 05/05/92 eay */
			j=((j<<4)&0xf0)|((j>>4)&0x0f);
			j=((j<<2)&0xcc)|((j>>2)&0x33);
			j=((j<<1)&0xaa)|((j>>1)&0x55);
			(*key)[7-(i%8)]^=j;
			}
		}
#endif
	des_set_odd_parity((des_cblock *)key);
	i=des_check_key;
	des_check_key=0;
	des_set_key_schedule((des_cblock *)key,ks);
	des_check_key=i;
	des_cbc_cksum((des_cblock *)str,(des_cblock *)key,(long)length,ks,
		(des_cblock *)key);
	memset(ks,0,sizeof(ks));
	des_set_odd_parity((des_cblock *)key);
	}

void des_string_to_2keys(str, key1, key2)
char *str;
des_cblock (*key1);
des_cblock (*key2);
	{
	des_key_schedule ks;
	int i,length;
	register unsigned char j;

	memset(key1,0,8);
	memset(key2,0,8);
	length=strlen(str);
#ifdef OLD_STR_TO_KEY
	if (length <= 8)
		{
		for (i=0; i<length; i++)
			{
			(*key2)[i]=(*key1)[i]=(str[i]<<1);
			}
		}
	else
		{
		for (i=0; i<length; i++)
			{
			if ((i/8)&1)
				(*key2)[i%8]^=(str[i]<<1);
			else
				(*key1)[i%8]^=(str[i]<<1);
			}
		}
#else /* MIT COMPATIBLE */
	for (i=0; i<length; i++)
		{
		j=str[i];
		if ((i%32) < 16)
			{
			if ((i%16) < 8)
				(*key1)[i%8]^=(j<<1);
			else
				(*key2)[i%8]^=(j<<1);
			}
		else
			{
			j=((j<<4)&0xf0)|((j>>4)&0x0f);
			j=((j<<2)&0xcc)|((j>>2)&0x33);
			j=((j<<1)&0xaa)|((j>>1)&0x55);
			if ((i%16) < 8)
				(*key1)[7-(i%8)]^=j;
			else
				(*key2)[7-(i%8)]^=j;
			}
		}
	if (length <= 8) memcpy(key2,key1,8);
#endif
	des_set_odd_parity((des_cblock *)key1);
	des_set_odd_parity((des_cblock *)key2);
	i=des_check_key;
	des_check_key=0;
	des_set_key_schedule((des_cblock *)key1,ks);
	des_cbc_cksum((des_cblock *)str,(des_cblock *)key1,(long)length,ks,
		(des_cblock *)key1);
	des_set_key_schedule((des_cblock *)key2,ks);
	des_cbc_cksum((des_cblock *)str,(des_cblock *)key2,(long)length,ks,
		(des_cblock *)key2);
	des_check_key=i;
	memset(ks,0,sizeof(ks));
	des_set_odd_parity(key1);
	des_set_odd_parity(key2);
	}
@


1.3
log
@Upgraded to latest version of DES library
@
text
@@


1.2
log
@Change name of des_set_key to des_set_key_schedule as to not interfere with
different implementation used by multiple binaries
@
text
@d1 46
a46 1
/*	$Id: str2key.c,v 1.1.1.1 1995/12/14 06:52:45 tholo Exp $	*/
a47 1
/* Copyright (C) 1993 Eric Young - see README for more details */
d52 7
a58 5
int des_string_to_key(char *str, des_cblock (*key))
{
  des_key_schedule ks;
  int i,length;
  register unsigned char j;
d60 2
a61 2
  memset(key,0,8);
  length=strlen(str);
d63 17
a79 17
  for (i=0; i<length; i++)
    (*key)[i%8]^=(str[i]<<1);
#else  /* MIT COMPATIBLE */
  for (i=0; i<length; i++)
    {
      j=str[i];
      if ((i%16) < 8)
	(*key)[i%8]^=(j<<1);
      else
	{
	  /* Reverse the bit order 05/05/92 eay */
	  j=((j<<4)&0xf0)|((j>>4)&0x0f);
	  j=((j<<2)&0xcc)|((j>>2)&0x33);
	  j=((j<<1)&0xaa)|((j>>1)&0x55);
	  (*key)[7-(i%8)]^=j;
	}
    }
d81 6
a86 6
  des_set_odd_parity((des_cblock *)key);
  i=des_check_key;
  des_check_key=0;
  des_set_key_schedule((des_cblock *)key,ks);
  des_check_key=i;
  des_cbc_cksum((des_cblock *)str,(des_cblock *)key,(long)length,ks,
d88 2
a89 20
  memset(ks,0,sizeof(ks));
  des_set_odd_parity((des_cblock *)key);
  return(0);
}

int des_string_to_2keys(char *str, des_cblock (*key1), des_cblock (*key2))
{
  des_key_schedule ks;
  int i,length;
  register unsigned char j;

  memset(key1,0,8);
  memset(key2,0,8);
  length=strlen(str);
#ifdef OLD_STR_TO_KEY
  if (length <= 8)
    {
      for (i=0; i<length; i++)
	{
	  (*key2)[i]=(*key1)[i]=(str[i]<<1);
d91 5
a95 4
    }
  else
    {
      for (i=0; i<length; i++)
d97 48
a144 29
	  if ((i/8)&1)
	    (*key2)[i%8]^=(str[i]<<1);
	  else
	    (*key1)[i%8]^=(str[i]<<1);
	}
    }
#else  /* MIT COMPATIBLE */
  for (i=0; i<length; i++)
    {
      j=str[i];
      if ((i%32) < 16)
	{
	  if ((i%16) < 8)
	    (*key1)[i%8]^=(j<<1);
	  else
	    (*key2)[i%8]^=(j<<1);
	}
      else
	{
	  j=((j<<4)&0xf0)|((j>>4)&0x0f);
	  j=((j<<2)&0xcc)|((j>>2)&0x33);
	  j=((j<<1)&0xaa)|((j>>1)&0x55);
	  if ((i%16) < 8)
	    (*key1)[7-(i%8)]^=j;
	  else
	    (*key2)[7-(i%8)]^=j;
	}
    }
  if (length <= 8) memcpy(key2,key1,8);
d146 6
a151 6
  des_set_odd_parity((des_cblock *)key1);
  des_set_odd_parity((des_cblock *)key2);
  i=des_check_key;
  des_check_key=0;
  des_set_key_schedule((des_cblock *)key1,ks);
  des_cbc_cksum((des_cblock *)str,(des_cblock *)key1,(long)length,ks,
d153 2
a154 2
  des_set_key_schedule((des_cblock *)key2,ks);
  des_cbc_cksum((des_cblock *)str,(des_cblock *)key2,(long)length,ks,
d156 5
a160 6
  des_check_key=i;
  memset(ks,0,sizeof(ks));
  des_set_odd_parity(key1);
  des_set_odd_parity(key2);
  return(0);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d38 1
a38 1
  des_set_key((des_cblock *)key,ks);
d102 1
a102 1
  des_set_key((des_cblock *)key1,ks);
d105 1
a105 1
  des_set_key((des_cblock *)key2,ks);
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
