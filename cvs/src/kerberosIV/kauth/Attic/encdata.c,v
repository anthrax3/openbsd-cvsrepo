head	1.2;
access;
symbols
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2000.02.25.15.14.52;	author hin;	state dead;
branches;
next	1.1;

1.1
date	97.12.18.22.28.02;	author art;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: encdata.c,v 1.1 1997/12/18 22:28:02 art Exp $	*/
/* $KTH: encdata.c,v 1.9 1997/04/01 08:17:30 joda Exp $ */

/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kauth.h"

int
write_encrypted (int fd, void *buf, size_t len, des_key_schedule schedule,
		 des_cblock *session, struct sockaddr_in *me,
		 struct sockaddr_in *him)
{
    void *outbuf;
    int32_t outlen, l;
    int i;
    unsigned char tmp[4];

    outbuf = malloc(len + 30);
    if (outbuf == NULL)
	return -1;

    outlen = krb_mk_priv (buf, outbuf, len, schedule, session, me, him);
    if (outlen < 0) {
	free(outbuf);
	return -1;
    }

    l = outlen;
    for(i = 3; i >= 0; i--, l = l >> 8)
	tmp[i] = l & 0xff;
    if (krb_net_write (fd, tmp, 4) != 4 ||
	krb_net_write (fd, outbuf, outlen) != outlen) {
	free(outbuf);
	outbuf = NULL;
	return -1;
    }
     
    free(outbuf);
    outbuf = NULL;
    return 0;
}


int
read_encrypted (int fd, void *buf, size_t len, void **ret,
		des_key_schedule schedule, des_cblock *session,
		struct sockaddr_in *him, struct sockaddr_in *me)
{
    int status;
    int32_t l;
    MSG_DAT msg;
    unsigned char tmp[4];

    l = krb_net_read (fd, tmp, 4);
    if (l != 4)
	return l;
    l = (tmp[0] << 24) | (tmp[1] << 16) | (tmp[2] << 8) | tmp[3];
    if (l > len)
	return -1;
    if (krb_net_read (fd, buf, l) != l)
	return -1;
    status = krb_rd_priv (buf, l, schedule, session, him, me, &msg);
    if (status != RD_AP_OK) {
	fprintf (stderr, "read_encrypted: %s\n",
		 krb_get_err_text(status));
	return -1;
    }
    *ret  = msg.app_data;
    return  msg.app_length;
}
@


1.1
log
@kauth is a nice tool. Gets you kerberos tickets, afs-tokens and other nice
things.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

