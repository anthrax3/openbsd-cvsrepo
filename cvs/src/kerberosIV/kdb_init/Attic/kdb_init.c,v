head	1.6;
access;
symbols
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2000.02.25.15.14.56;	author hin;	state dead;
branches;
next	1.5;

1.5
date	99.08.20.11.00.32;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.11.53.50;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.17.10.50.46;	author art;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.08.43.47;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.42;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.42;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kdb_init.c,v 1.5 1999/08/20 11:00:32 art Exp $	*/
/* $KTH: kdb_init.c,v 1.23 1997/03/30 17:45:05 assar Exp $ */

/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *      of the Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */

/*
 * program to initialize the database,  reports error if database file
 * already exists. 
 */

#include "adm_locl.h"

enum ap_op {
    NULL_KEY,			/* setup null keys */
    MASTER_KEY,                 /* use master key as new key */
    RANDOM_KEY			/* choose a random key */
};

static des_cblock master_key;
static des_key_schedule master_key_schedule;

static char progname[]="kdb_init";

/* use a return code to indicate success or failure.  check the return */
/* values of the routines called by this routine. */

static int
add_principal(char *name, char *instance, enum ap_op aap_op, int maxlife)
{
    Principal principal;
    struct tm *tm;
    des_cblock new_key;

    memset(&principal, 0, sizeof(principal));
    strncpy(principal.name, name, ANAME_SZ - 1);
    principal.name[ANAME_SZ - 1] = '\0';
    strncpy(principal.instance, instance, INST_SZ - 1);
    principal.instance[INST_SZ - 1] = '\0';

    switch (aap_op) {
    case NULL_KEY:
	principal.key_low = 0;
	principal.key_high = 0;
	break;
    case RANDOM_KEY:
#ifdef NOENCRYPTION
        memset(new_key, 0, sizeof(des_cblock));
	new_key[0] = 127;
#else
	des_new_random_key(&new_key);
#endif
	kdb_encrypt_key (&new_key, &new_key, &master_key, master_key_schedule,
			 DES_ENCRYPT);
	copy_from_key(new_key, &principal.key_low, &principal.key_high);
	memset(new_key, 0, sizeof(new_key));
	break;
    case MASTER_KEY:
	memcpy(new_key, master_key, sizeof (des_cblock));
	kdb_encrypt_key (&new_key, &new_key, &master_key, master_key_schedule,
			 DES_ENCRYPT);
	copy_from_key(new_key, &principal.key_low, &principal.key_high);
	break;
    }
    principal.mod_date = time(0);
    principal.exp_date = KDBINIT_EXPDATE;
    strncpy(principal.exp_date_txt, KDBINIT_EXPDATE_TXT, DATE_SZ);

    tm = k_localtime(&principal.mod_date);
    principal.attributes = 0;
    principal.max_life = maxlife;

    principal.kdc_key_ver = 1;
    principal.key_version = 1;

    strncpy(principal.mod_name, "db_creation", ANAME_SZ - 1);
    principal.mod_name[ANAME_SZ - 1] = '\0';
    strncpy(principal.mod_instance, "", INST_SZ - 1);
    principal.mod_instance[INST_SZ - 1] = '\0';
    principal.old = 0;

    if (kerb_db_put_principal(&principal, 1) != 1)
        return -1;		/* FAIL */
    
    /* let's play it safe */
    memset(new_key, 0, sizeof (des_cblock));
    memset(&principal.key_low, 0, 4);
    memset(&principal.key_high, 0, 4);
    return 0;
}

int
main(int argc, char **argv)
{
    char    realm[REALM_SZ];
    char   *cp;
    int code;
    char *database;
    
    if (argc > 3) {
	fprintf(stderr, "Usage: %s [realm-name] [database-name]\n", progname);
	return 1;
    }
    if (argc == 3) {
	database = argv[2];
	--argc;
    } else
	database = DBM_FILE;

    /* Do this first, it'll fail if the database exists */
    if ((code = kerb_db_create(database)) != 0)
	err (1, "Couldn't create database %s", database);
    kerb_db_set_name(database);
    
    if (argc == 2)
	strncpy(realm, argv[1], REALM_SZ);
    else {
	if (krb_get_lrealm(realm, 1) != KSUCCESS) {
	    strncpy(realm, KRB_REALM, REALM_SZ - 1);
	    realm[REALM_SZ - 1] = '\0';
	}
	fprintf(stderr, "Realm name [default  %s ]: ", realm);
	if (fgets(realm, sizeof(realm), stdin) == NULL)
	    errx (1, "\nEOF reading realm");
	if ((cp = strchr(realm, '\n')))
	    *cp = '\0';
	if (!*realm)			/* no realm given */
	    if (krb_get_lrealm(realm, 1) != KSUCCESS) {
		strncpy(realm, KRB_REALM, REALM_SZ - 1);
		realm[REALM_SZ - 1] = '\0';
	    }
    }
    if (!k_isrealm(realm))
	errx (1, "Bad kerberos realm name \"%s\"", realm);
#ifndef RANDOM_MKEY
    printf("You will be prompted for the database Master Password.\n");
    printf("It is important that you NOT FORGET this password.\n");
#else
    printf("To generate a master key, please enter some random data.\n");
    printf("You do not have to remember this.\n");
#endif
    fflush(stdout);

    if (kdb_get_master_key (KDB_GET_TWICE, &master_key,
			    master_key_schedule) != 0)
	errx (1, "Couldn't read master key.");

#ifdef RANDOM_MKEY
    if(kdb_kstash(&master_key, MKEYFILE) < 0)
	err (1, "Error writing master key");
    fprintf(stderr, "Wrote master key to %s\n", MKEYFILE);
#endif

    /* Initialize non shared random sequence */
    des_init_random_number_generator(&master_key);

    /* Maximum lifetime for changepw.kerberos (kadmin) tickets, 10 minutes */
#define ADMLIFE (1 + (CLOCK_SKEW/(5*60)))

    /* Maximum lifetime for ticket granting tickets, 4 days or 21.25h */
#define TGTLIFE ((krb_life_to_time(0, 162) >= 24*60*60) ? 161 : 255)

    /* This means that default lifetimes have not been initialized */
#define DEFLIFE 255

#define NOLIFE 0

    if (
	add_principal(KERB_M_NAME, KERB_M_INST, MASTER_KEY, NOLIFE) ||
	add_principal(KERB_DEFAULT_NAME, KERB_DEFAULT_INST, NULL_KEY,DEFLIFE)||
	add_principal(KRB_TICKET_GRANTING_TICKET, realm, RANDOM_KEY, TGTLIFE)||
	add_principal(PWSERV_NAME, KRB_MASTER, RANDOM_KEY, ADMLIFE) 
	) {
      putc ('\n', stderr);
      errx (1, "couldn't initialize database.");
    }

    /* play it safe */
    memset(master_key, 0, sizeof (des_cblock));
    memset(master_key_schedule, 0, sizeof (des_key_schedule));
    return 0;
}
@


1.5
log
@the default expiration date for new databases (Jan 1 04:59:59 2000) was not
optimal.
The final (and safe) solution will come with kth-krb 0.10
@
text
@d1 1
a1 1
/*	$OpenBSD: kdb_init.c,v 1.4 1998/02/18 11:53:50 art Exp $	*/
@


1.4
log
@OpenBSD-tags and corrections of copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a78 2
    principal.exp_date = 946702799;	/* Happy new century */
    strncpy(principal.exp_date_txt, "12/31/99", DATE_SZ);
d80 2
@


1.3
log
@Even this one is kth-krb4.0.9.8 now. (with some clean-ups)
@
text
@d1 1
@


1.2
log
@Do not use hardcoded realm or host names
@
text
@d1 1
a1 1
/*	$Id: kdb_init.c,v 1.1.1.1 1995/12/14 06:52:42 tholo Exp $	*/
d5 1
a5 1
 *	of the Massachusetts Institute of Technology
d25 1
a25 2
#include <adm_locl.h>
#include <sys/param.h>
a32 1
char   *progname;
d36 2
d42 1
a42 1
add_principal(char *name, char *instance, enum ap_op aap_op)
d48 6
a53 3
    bzero(&principal, sizeof(principal));
    strncpy(principal.name, name, ANAME_SZ);
    strncpy(principal.instance, instance, INST_SZ);
d61 1
a61 1
	bzero(new_key, sizeof(des_cblock));
d68 2
a69 2
	bcopy(new_key, &principal.key_low, 4);
	bcopy(((long *) new_key) + 1, &principal.key_high, 4);
d72 1
a72 1
	bcopy (master_key, new_key, sizeof (des_cblock));
d75 1
a75 2
	bcopy(new_key, &principal.key_low, 4);
	bcopy(((long *) new_key) + 1, &principal.key_high, 4);
d84 1
a84 1
    principal.max_life = 255;
d89 4
a92 2
    strncpy(principal.mod_name, "db_creation", ANAME_SZ);
    strncpy(principal.mod_instance, "", INST_SZ);
d99 3
a101 3
    bzero (new_key, sizeof (des_cblock));
    bzero (&principal.key_low, 4);
    bzero (&principal.key_high, 4);
d108 2
a109 3
    char    admin[MAXHOSTNAMELEN];
    char    realm[REALM_SZ], defrealm[REALM_SZ];
    char   *cp, *dot;
a112 2
    progname = (cp = strrchr(*argv, '/')) ? cp + 1 : *argv;

d114 2
a115 2
	fprintf(stderr, "Usage: %s [realm-name] [database-name]\n", argv[0]);
	exit(1);
d124 2
a125 5
    if ((code = kerb_db_create(database)) != 0) {
	fprintf(stderr, "Couldn't create database: %s\n",
		strerror(code));
	exit(1);
    }
d127 1
a127 1

d131 3
a133 6
	if (krb_get_lrealm(defrealm, 1) != KSUCCESS)
	    strcpy(defrealm, "NONE");
	fprintf(stderr, "Realm name [default  %s ]: ", defrealm);
	if (fgets(realm, sizeof(realm), stdin) == NULL) {
	    fprintf(stderr, "\nEOF reading realm\n");
	    exit(1);
d135 3
d141 8
a148 7
	    strcpy(realm, defrealm);
    }
    if (!k_isrealm(realm)) {
	fprintf(stderr, "%s: Bad kerberos realm name \"%s\"\n",
		progname, realm);
	exit(1);
    }
d151 4
d157 9
a165 11
    if (kdb_get_master_key (TRUE, &master_key, master_key_schedule) != 0) {
      fprintf (stderr, "Couldn't read master key.\n");
      exit (-1);
    }

    if (krb_get_admhst(admin, realm, 1) != KSUCCESS) {
      fprintf (stderr, "Couldn't get admin server.\n");
      exit (-1);
    }
    if ((dot = strchr(admin, '.')) != NULL)
	*dot = '\0';
d170 11
d182 4
a185 4
	add_principal(KERB_M_NAME, KERB_M_INST, MASTER_KEY) ||
	add_principal(KERB_DEFAULT_NAME, KERB_DEFAULT_INST, NULL_KEY) ||
	add_principal("krbtgt", realm, RANDOM_KEY) ||
	add_principal("changepw", admin, RANDOM_KEY) 
d187 2
a188 3
	fprintf(stderr, "\n%s: couldn't initialize database.\n",
		progname);
	exit(1);
d192 3
a194 3
    bzero (master_key, sizeof (des_cblock));
    bzero (master_key_schedule, sizeof (des_key_schedule));
    exit(0);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d26 1
d104 3
a106 2
    char    realm[REALM_SZ];
    char   *cp;
d133 3
a135 1
	fprintf(stderr, "Realm name [default  %s ]: ", KRB_REALM);
d143 1
a143 1
	    strcpy(realm, KRB_REALM);
d159 7
d173 1
a173 1
	add_principal("changepw", KRB_MASTER, RANDOM_KEY) 
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
