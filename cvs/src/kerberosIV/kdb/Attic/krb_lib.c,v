head	1.7;
access;
symbols
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2000.02.25.15.14.54;	author hin;	state dead;
branches;
next	1.6;

1.6
date	98.05.15.06.10.51;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.12.12.11.29.25;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.01.08.22.43;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.11.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.16.18.48.51;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: krb_lib.c,v 1.6 1998/05/15 06:10:51 art Exp $	*/
/* $KTH: krb_lib.c,v 1.11 1997/05/07 01:36:08 assar Exp $ */

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

#include "kdb_locl.h"

#ifdef DEBUG
extern int debug;
extern char *progname;
long    kerb_debug;
#endif

static int init = 0;

/*
 * initialization routine for data base 
 */

int
kerb_init(void)
{
#ifdef DEBUG
    if (!init) {
	char *dbg = getenv("KERB_DBG");
	if (dbg)
	    sscanf(dbg, "%d", &kerb_debug);
	init = 1;
    }
#endif
    kerb_db_init();

#ifdef CACHE
    kerb_cache_init();
#endif

    /* successful init, return 0, else errcode */
    return (0);
}

/*
 * finalization routine for database -- NOTE: MUST be called by any
 * program using kerb_init.  ALSO will have to be modified to finalize
 * caches, if they're ever really implemented. 
 */

void
kerb_fini(void)
{
    kerb_db_fini();
}


int
kerb_delete_principal(char *name, char *inst)
{
    int ret;
    
    if (!init)
	kerb_init();

    ret = kerb_db_delete_principal(name, inst);
#ifdef CACHE
    if(ret == 0){
	kerb_cache_delete_principal(name, inst);
    }
#endif
    return ret;
}


/*
 * look up a principal in the cache or data base returns number of
 * principals found 
 */

int
kerb_get_principal(char *name, char *inst, Principal *principal,
		   unsigned int max, int *more)
                 		/* could have wild card */
                 		/* could have wild card */
                         
                     		/* max number of name structs to return */
                 		/* more tuples than room for */

{
    int     found = 0;
#ifdef CACHE
    static int wild = 0;
#endif
    if (!init)
	kerb_init();

#ifdef DEBUG
    if (kerb_debug & 1)
	fprintf(stderr, "\n%s: kerb_get_principal for %s %s max = %d\n",
	    progname, name, inst, max);
#endif
    
    /*
     * if this is a request including a wild card, have to go to db
     * since the cache may not be exhaustive. 
     */

    /* clear the principal area */
    memset(principal, 0, max * sizeof(Principal));

#ifdef CACHE
    /*
     * so check to see if the name contains a wildcard "*" or "?", not
     * preceeded by a backslash. 
     */
    wild = 0;
    if (index(name, '*') || index(name, '?') ||
	index(inst, '*') || index(inst, '?'))
	wild = 1;

    if (!wild) {
	/* try the cache first */
	found = kerb_cache_get_principal(name, inst, principal, max, more);
	if (found)
	    return (found);
    }
#endif
    /* If we didn't try cache, or it wasn't there, try db */
    found = kerb_db_get_principal(name, inst, principal, max, more);
    /* try to insert principal(s) into cache if it was found */
#ifdef CACHE
    if (found) {
	kerb_cache_put_principal(principal, found);
    }
#endif
    return (found);
}

/* principals */
int
kerb_put_principal(Principal *principal, unsigned int n)
                         
                   		/* number of principal structs to write */
{
    struct tm *tp;

    /* set mod date */
    principal->mod_date = time((time_t *)0);
    /* and mod date string */

    tp = k_localtime(&principal->mod_date);
    snprintf(principal->mod_date_txt,
	     sizeof(principal->mod_date_txt),
	     "%4d-%2d-%2d",
	     tp->tm_year + 1900,
	     tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
#ifdef DEBUG
    if (kerb_debug & 1) {
	int i;
	fprintf(stderr, "\nkerb_put_principal...");
	for (i = 0; i < n; i++) {
	    krb_print_principal(&principal[i]);
	}
    }
#endif
    /* write database */
    if (kerb_db_put_principal(principal, n) < 0) {
#ifdef DEBUG
	if (kerb_debug & 1)
	    fprintf(stderr, "\n%s: kerb_db_put_principal err", progname);
	/* watch out for cache */
#endif
	return -1;
    }
#ifdef CACHE
    /* write cache */
    if (!kerb_cache_put_principal(principal, n)) {
#ifdef DEBUG
	if (kerb_debug & 1)
	    fprintf(stderr, "\n%s: kerb_cache_put_principal err", progname);
#endif
	return -1;
    }
#endif
    return 0;
}

int
kerb_get_dba(char *name, char *inst, Dba *dba, unsigned int max, int *more)
                 		/* could have wild card */
                 		/* could have wild card */
                
                     		/* max number of name structs to return */
                 		/* more tuples than room for */

{
    int     found = 0;
#ifdef CACHE
    static int wild = 0;
#endif
    if (!init)
	kerb_init();

#ifdef DEBUG
    if (kerb_debug & 1)
	fprintf(stderr, "\n%s: kerb_get_dba for %s %s max = %d\n",
		progname, name, inst, max);
#endif
    /*
     * if this is a request including a wild card, have to go to db
     * since the cache may not be exhaustive. 
     */

    /* clear the dba area */
    memset(dba, 0, max * sizeof(Dba));

#ifdef CACHE
    /*
     * so check to see if the name contains a wildcard "*" or "?", not
     * preceeded by a backslash. 
     */

    wild = 0;
    if (index(name, '*') || index(name, '?') ||
	index(inst, '*') || index(inst, '?'))
	wild = 1;

    if (!wild) {
	/* try the cache first */
	found = kerb_cache_get_dba(name, inst, dba, max, more);
	if (found)
	    return (found);
    }
#endif
    /* If we didn't try cache, or it wasn't there, try db */
    found = kerb_db_get_dba(name, inst, dba, max, more);
#ifdef CACHE
    /* try to insert dba(s) into cache if it was found */
    if (found) {
	kerb_cache_put_dba(dba, found);
    }
#endif
    return found;
}
@


1.6
log
@bring up-to-date with new kth-krb (mostly cleanups)

Update some copyrights that I seemed to forget.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_lib.c,v 1.5 1997/12/12 11:29:25 art Exp $	*/
@


1.5
log
@cleanup, check pointers, fix strcpy's, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 12
d17 19
a35 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.4
log
@Another upgrade to kth-krb4-0.9.7
@
text
@d1 1
d223 1
a223 1
	    progname, name, inst, max);
d259 1
a259 1
    return (found);
@


1.3
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$Id: krb_lib.c,v 1.2 1996/09/16 18:48:51 millert Exp $	*/
d3 20
a22 19
/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
d39 1
a39 1
kerb_init()
d66 1
a66 1
kerb_fini()
d71 19
d96 7
a102 6
kerb_get_principal(name, inst, principal, max, more)
	char *name;		/* could have wild card */
	char *inst;		/* could have wild card */
	Principal *principal;
	unsigned int max;	/* max number of name structs to return */
	int *more;		/* more tuples than room for */
d124 1
a124 1
    bzero((char *) principal, max * sizeof(Principal));
d132 2
a133 2
    if (strchr(name, '*') || strchr(name, '?') ||
	strchr(inst, '*') || strchr(inst, '?'))
d156 3
a158 3
kerb_put_principal(principal, n)
	Principal *principal;
	unsigned int n;		/* number of principal structs to write */
d167 5
a171 4
    (void) snprintf(principal->mod_date_txt, sizeof(principal->mod_date_txt),
		    "%4d-%2d-%2d",
		    tp->tm_year > 1900 ? tp->tm_year : tp->tm_year + 1900,
		    tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
d204 6
a209 6
kerb_get_dba(name, inst, dba, max, more)
	char *name;		/* could have wild card */
	char *inst;		/* could have wild card */
	Dba *dba;
	unsigned int max;	/* max number of name structs to return */
	int *more;		/* more tuples than room for */
d230 1
a230 1
    bzero((char *) dba, max * sizeof(Dba));
d239 2
a240 2
    if (strchr(name, '*') || strchr(name, '?') ||
	strchr(inst, '*') || strchr(inst, '?'))
@


1.2
log
@sprintf -> snprintf paranoia
@
text
@d1 1
a1 1
/*	$Id: krb_lib.c,v 1.1.1.1 1995/12/14 06:52:36 tholo Exp $	*/
d111 2
a112 2
    if (index(name, '*') || index(name, '?') ||
	index(inst, '*') || index(inst, '?'))
d217 2
a218 2
    if (index(name, '*') || index(name, '?') ||
	index(inst, '*') || index(inst, '?'))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d146 4
a149 3
    (void) sprintf(principal->mod_date_txt, "%4d-%2d-%2d",
		   tp->tm_year > 1900 ? tp->tm_year : tp->tm_year + 1900,
		   tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
