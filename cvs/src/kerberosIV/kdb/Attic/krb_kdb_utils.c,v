head	1.6;
access;
symbols
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2000.02.25.15.14.54;	author hin;	state dead;
branches;
next	1.5;

1.5
date	99.05.07.15.40.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.05.15.06.10.50;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.12.11.29.25;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.08.22.42;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: krb_kdb_utils.c,v 1.5 1999/05/07 15:40:09 deraadt Exp $	*/
/*	$KTH: krb_kdb_utils.c,v 1.23 1997/05/02 14:29:10 assar Exp $	*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * Utility routines for Kerberos programs which directly access
 * the database.  This code was duplicated in too many places
 * before I gathered it here.
 *
 * Jon Rochlis, MIT Telecom, March 1988
 */

#include "kdb_locl.h"

#include <kdc.h>

/* always try /.k for backwards compatibility */
static char *master_key_files[] = { MKEYFILE, "/.k", NULL };

#define k_strerror(e) strerror(e)

int
kdb_new_get_master_key(des_cblock *key, des_key_schedule schedule)
{
    int kfile;
    int i;
    char buf[1024];

    char **mkey;

    for(mkey = master_key_files; *mkey; mkey++){
	kfile = open(*mkey, O_RDONLY);
	if(kfile < 0 && errno != ENOENT)
	    fprintf(stderr, "Failed to open master key file \"%s\": %s\n", 
		    *mkey,
		    k_strerror(errno));
	if(kfile >= 0)
	    break;
    }
    if(*mkey != NULL){
	int bytes;
	bytes = read(kfile, (char*)key, sizeof(des_cblock));
	close(kfile);
	if(bytes == sizeof(des_cblock)){
	    des_key_sched(key, schedule);
	    return 0;
	}
	fprintf(stderr, "Could only read %d bytes from master key file %s\n", 
		bytes, *mkey);
    }else{
	fprintf(stderr, "No master key file found.\n");
    }

  
    i=0;
    while(i < 3){
	if(des_read_pw_string(buf, sizeof(buf), "Enter master password: ", 0))
	    break;

	/* buffer now contains either an old format master key password or a
	 * new format base64 encoded master key
	 */
      
	/* try to verify as old password */
	des_string_to_key(buf, key);
	des_key_sched(key, schedule);
      
	if(kdb_verify_master_key(key, schedule, NULL) != -1){
	    memset(buf, 0, sizeof(buf));
	    return 0;
	}
      
	/* failed test, so must be base64 encoded */
      
	if(base64_decode(buf, key) == 8){
	    des_key_sched(key, schedule);
	    if(kdb_verify_master_key(key, schedule, NULL) != -1){
		memset(buf, 0, sizeof(buf));
		return 0;
	    }
	}
      
	memset(buf, 0, sizeof(buf));
	fprintf(stderr, "Failed to verify master key.\n");
	i++;
    }
  
    /* life sucks */
    fprintf(stderr, "You lose.\n");
    exit(1);
}

int kdb_new_get_new_master_key(des_cblock *key, des_key_schedule schedule, 
			       int verify)
{
#ifndef RANDOM_MKEY
    des_read_password(key, "\nEnter Kerberos master password: ", verify);
    printf ("\n");
#else
    char buf[1024];
    des_generate_random_block (key);
    des_key_sched(key, schedule);
  
    des_read_pw_string(buf, sizeof(buf), "Enter master key seed: ", 0);
    des_cbc_cksum((des_cblock*)buf, key, sizeof(buf), schedule, key);
    memset(buf, 0, sizeof(buf));
#endif
    des_key_sched(key, schedule);
    return 0;
}

int kdb_get_master_key(int prompt, des_cblock *master_key, 
		       des_key_schedule master_key_sched)
{
    int ask = (prompt == KDB_GET_TWICE);
#ifndef RANDOM_MKEY
    ask |= (prompt == KDB_GET_PROMPT);
#endif
  
    if(ask)
	kdb_new_get_new_master_key(master_key, master_key_sched, 
				   prompt == KDB_GET_TWICE);
    else
	kdb_new_get_master_key(master_key, master_key_sched);
    return 0;
}

int kdb_kstash(des_cblock *master_key, char *file)
{
    int kfile;
    kfile = open(file, O_TRUNC | O_RDWR | O_CREAT, 0600);
    if (kfile < 0) {
	return -1;
    }
    if (write(kfile, master_key, sizeof(des_cblock)) != sizeof(des_cblock)) {
	close(kfile);
	return -1;
    }
    close(kfile);
    return 0;
}

/* The old algorithm used the key schedule as the initial vector which
   was byte order depedent ... */

void
kdb_encrypt_key (des_cblock (*in), des_cblock (*out),
		 des_cblock (*master_key),
		 des_key_schedule master_key_sched, int e_d_flag)
{
#ifdef NOENCRYPTION
    memcpy(out, in, sizeof(des_cblock));
#else
    des_pcbc_encrypt(in, out, (long)sizeof(des_cblock), master_key_sched,
		     master_key, e_d_flag);
#endif
}

/* The caller is reasponsible for cleaning up the master key and sched,
   even if we can't verify the master key */

/* Returns master key version if successful, otherwise -1 */

long 
kdb_verify_master_key (des_cblock *master_key,
		       des_key_schedule master_key_sched,
		       FILE *out) /* NULL -> no output */
{
    des_cblock key_from_db;
    Principal principal_data[1];
    int n, more = 0;
    long master_key_version;

    /* lookup the master key version */
    n = kerb_get_principal(KERB_M_NAME, KERB_M_INST, principal_data,
			   1 /* only one please */, &more);
    if ((n != 1) || more) {
	if (out != (FILE *) NULL) 
	    fprintf(out,
		    "verify_master_key: %s, %d found.\n",
		    "Kerberos error on master key version lookup",
		    n);
	return (-1);
    }

    master_key_version = (long) principal_data[0].key_version;

    /* set up the master key */
    if (out != (FILE *) NULL)  /* should we punt this? */
	fprintf(out, "Current Kerberos master key version is %d.\n",
		principal_data[0].kdc_key_ver);

    /*
     * now use the master key to decrypt the key in the db, had better
     * be the same! 
     */
    copy_to_key(&principal_data[0].key_low,
		&principal_data[0].key_high,
		key_from_db);
    kdb_encrypt_key (&key_from_db, &key_from_db, 
		     master_key, master_key_sched, DES_DECRYPT);

    /* the decrypted database key had better equal the master key */
    n = memcmp(master_key, key_from_db, sizeof(master_key));
    /* this used to zero the master key here! */
    memset(key_from_db, 0, sizeof(key_from_db));
    memset(principal_data, 0, sizeof (principal_data));

    if (n && (out != (FILE *) NULL)) {
	fprintf(out, "\n\07\07verify_master_key: Invalid master key; ");
	fprintf(out, "does not match database.\n");
    }
    if(n)
	return (-1);

    if (out != (FILE *) NULL) {
	fprintf(out, "\nMaster key entered.  BEWARE!\07\07\n");
	fflush(out);
    }

    return master_key_version;
}
@


1.5
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_kdb_utils.c,v 1.4 1998/05/15 06:10:50 art Exp $	*/
@


1.4
log
@bring up-to-date with new kth-krb (mostly cleanups)

Update some copyrights that I seemed to forget.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_kdb_utils.c,v 1.3 1997/12/12 11:29:25 art Exp $	*/
d121 1
a121 1
    fprintf(stderr, "You loose.\n");
@


1.3
log
@cleanup, check pointers, fix strcpy's, etc.
@
text
@d1 14
a14 2
/*	$OpenBSD$	*/
/* $KTH: krb_kdb_utils.c,v 1.23 1997/05/02 14:29:10 assar Exp $ */
d17 19
a35 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.2
log
@Another upgrade to kth-krb4-0.9.7
@
text
@d1 1
d45 28
a72 28
  int kfile;
  int i;
  char buf[1024];

  char **mkey;

  for(mkey = master_key_files; *mkey; mkey++){
      kfile = open(*mkey, O_RDONLY);
      if(kfile < 0 && errno != ENOENT)
	  fprintf(stderr, "Failed to open master key file \"%s\": %s\n", 
		  *mkey,
		  k_strerror(errno));
      if(kfile >= 0)
	  break;
  }
  if(*mkey){
      int bytes;
      bytes = read(kfile, (char*)key, sizeof(des_cblock));
      close(kfile);
      if(bytes == sizeof(des_cblock)){
	  des_key_sched(key, schedule);
	  return 0;
      }
      fprintf(stderr, "Could only read %d bytes from master key file %s\n", 
	      bytes, *mkey);
  }else{
      fprintf(stderr, "No master key file found.\n");
  }
d75 8
a82 8
  i=0;
  while(i < 3){
      if(des_read_pw_string(buf, sizeof(buf), "Enter master password: ", 0))
	  break;

      /* buffer now contains either an old format master key password or a
       * new format base64 encoded master key
       */
d84 3
a86 3
      /* try to verify as old password */
      des_string_to_key(buf, key);
      des_key_sched(key, schedule);
d88 4
a91 4
      if(kdb_verify_master_key(key, schedule, NULL) != -1){
	  memset(buf, 0, sizeof(buf));
	  return 0;
      }
d93 1
a93 1
      /* failed test, so must be base64 encoded */
d95 7
a101 7
      if(base64_decode(buf, key) == 8){
	  des_key_sched(key, schedule);
	  if(kdb_verify_master_key(key, schedule, NULL) != -1){
	      memset(buf, 0, sizeof(buf));
	      return 0;
	  }
      }
d103 4
a106 4
      memset(buf, 0, sizeof(buf));
      fprintf(stderr, "Failed to verify master key.\n");
      i++;
  }
d108 3
a110 3
  /* life sucks */
  fprintf(stderr, "You loose.\n");
  exit(1);
d117 2
a118 2
  des_read_password(key, "\nEnter Kerberos master password: ", verify);
  printf ("\n");
d120 3
a122 3
  char buf[1024];
  des_generate_random_block (key);
  des_key_sched(key, schedule);
d124 3
a126 3
  des_read_pw_string(buf, sizeof(buf), "Enter master key seed: ", 0);
  des_cbc_cksum((des_cblock*)buf, key, sizeof(buf), schedule, key);
  memset(buf, 0, sizeof(buf));
d128 2
a129 2
  des_key_sched(key, schedule);
  return 0;
d135 1
a135 1
  int ask = (prompt == KDB_GET_TWICE);
d137 1
a137 1
  ask |= (prompt == KDB_GET_PROMPT);
d140 6
a145 6
  if(ask)
    kdb_new_get_new_master_key(master_key, master_key_sched, 
			       prompt == KDB_GET_TWICE);
  else
    kdb_new_get_master_key(master_key, master_key_sched);
  return 0;
d150 9
a158 6
  int kfile;
  kfile = open(file, O_TRUNC | O_RDWR | O_CREAT, 0600);
  if (kfile < 0) {
    return -1;
  }
  if (write(kfile, master_key, sizeof(des_cblock)) != sizeof(des_cblock)) {
d160 1
a160 4
    return -1;
  }
  close(kfile);
  return 0;
a170 1

d172 1
a172 1
  memcpy(out, in, sizeof(des_cblock));
d174 2
a175 2
  des_pcbc_encrypt(in,out,(long)sizeof(des_cblock),master_key_sched,master_key,
 	e_d_flag);
d189 51
a239 51
  des_cblock key_from_db;
  Principal principal_data[1];
  int n, more = 0;
  long master_key_version;

  /* lookup the master key version */
  n = kerb_get_principal(KERB_M_NAME, KERB_M_INST, principal_data,
			 1 /* only one please */, &more);
  if ((n != 1) || more) {
    if (out != (FILE *) NULL) 
      fprintf(out,
	      "verify_master_key: %s, %d found.\n",
	      "Kerberos error on master key version lookup",
	      n);
    return (-1);
  }

  master_key_version = (long) principal_data[0].key_version;

  /* set up the master key */
  if (out != (FILE *) NULL)  /* should we punt this? */
    fprintf(out, "Current Kerberos master key version is %d.\n",
	    principal_data[0].kdc_key_ver);

  /*
   * now use the master key to decrypt the key in the db, had better
   * be the same! 
   */
  copy_to_key(&principal_data[0].key_low,
	      &principal_data[0].key_high,
	      key_from_db);
  kdb_encrypt_key (&key_from_db, &key_from_db, 
		   master_key, master_key_sched, DES_DECRYPT);

  /* the decrypted database key had better equal the master key */
  n = memcmp(master_key, key_from_db, sizeof(master_key));
  /* this used to zero the master key here! */
  memset(key_from_db, 0, sizeof(key_from_db));
  memset(principal_data, 0, sizeof (principal_data));

  if (n && (out != (FILE *) NULL)) {
    fprintf(out, "\n\07\07verify_master_key: Invalid master key; ");
    fprintf(out, "does not match database.\n");
  }
  if(n)
    return (-1);

  if (out != (FILE *) NULL) {
    fprintf(out, "\nMaster key entered.  BEWARE!\07\07\n");
    fflush(out);
  }
d241 1
a241 1
  return (master_key_version);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d3 20
a22 19
/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
d36 7
a42 5
long 
kdb_get_master_key(prompt, master_key, master_key_sched)
	int prompt;
	des_cblock *master_key;
	struct des_ks_struct *master_key_sched;
d45 66
d112 6
a117 4
  if (prompt)  {
#ifdef NOENCRYPTION
      placebo_read_password(master_key,
			    "\nEnter Kerberos master key: ", 0);
d119 18
a136 2
      des_read_password(master_key,
			     "\nEnter Kerberos master key: ", 0);
d138 15
a152 1
      printf ("\n");
d154 1
a154 9
  else {
    kfile = open(MKEYFILE, O_RDONLY, 0600);
    if (kfile < 0) {
      /* oh, for com_err_ */
      return (-1);
    }
    if (read(kfile, (char *) master_key, 8) != 8) {
      return (-1);
    }
d156 1
d158 2
a159 5

#ifndef NOENCRYPTION
  des_key_sched(master_key,master_key_sched);
#endif
  return (0);
d166 3
a168 6
kdb_encrypt_key (in, out, master_key, master_key_sched, e_d_flag)
	des_cblock *in;
	des_cblock *out;
	des_cblock *master_key;
	struct des_ks_struct *master_key_sched;
	int e_d_flag;
d172 1
a172 1
  bcopy(in, out, sizeof(des_cblock));
d185 3
a187 4
kdb_verify_master_key (master_key, master_key_sched, out)
	des_cblock *master_key;
	struct des_ks_struct *master_key_sched;
	FILE *out;		/* setting this to non-null be do output */
d217 3
a219 2
  bcopy(&principal_data[0].key_low, key_from_db, 4);
  bcopy(&principal_data[0].key_high, ((long *) key_from_db) + 1, 4);
d224 1
a224 2
  n = bcmp((char *) master_key, (char *) key_from_db,
	   sizeof(master_key));
d226 2
a227 2
  bzero(key_from_db, sizeof(key_from_db));
  bzero(principal_data, sizeof (principal_data));
d232 2
d235 1
a235 1
  }
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
