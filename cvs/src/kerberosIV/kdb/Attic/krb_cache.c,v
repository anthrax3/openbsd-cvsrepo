head	1.6;
access;
symbols
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2000.02.25.15.14.54;	author hin;	state dead;
branches;
next	1.5;

1.5
date	98.05.15.06.10.47;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.15.17.56.23;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.12.11.29.24;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.08.22.41;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.36;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: krb_cache.c,v 1.5 1998/05/15 06:10:47 art Exp $	*/
/*	$KTH: krb_cache.c,v 1.6 1997/05/02 10:27:53 joda Exp $	*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * This is where a cache would be implemented, if it were necessary.
 */

#include "kdb_locl.h"

#ifdef DEBUG
extern int debug;
extern long kerb_debug;
#endif
static int init = 0;

/*
 * initialization routine for cache 
 */

int
kerb_cache_init(void)
{
    init = 1;
    return (0);
}

/*
 * look up a principal in the cache returns number of principals found 
 */

int
kerb_cache_get_principal(char *serv, char *inst, Principal *principal, unsigned int max)
                 		/* could have wild card */
                 		/* could have wild card */
                         
                     		/* max number of name structs to return */

{
    int found = 0;

    if (!init)
	kerb_cache_init();
#ifdef DEBUG
    if (kerb_debug & 2)
	fprintf(stderr, "cache_get_principal for %s %s max = %d\n",
		serv, inst, max);
#endif /* DEBUG */
    
#ifdef DEBUG
    if (kerb_debug & 2) {
	if (found) {
	    fprintf(stderr, "cache get %s %s found %s %s sid = %d\n",
		    serv, inst, principal->name, principal->instance);
	} else {
	    fprintf(stderr, "cache %s %s not found\n", serv,
		    inst);
	}
    }
#endif
    return found;
}

/*
 * insert/replace a principal in the cache returns number of principals
 * inserted 
 */

int
kerb_cache_put_principal(Principal *principal, unsigned int max)
                         
                     		/* max number of principal structs to
				 * insert */

{
    u_long i;
    int count = 0;

    if (!init)
	kerb_cache_init();

#ifdef DEBUG
    if (kerb_debug & 2) {
	fprintf(stderr, "kerb_cache_put_principal  max = %d",
	    max);
    }
#endif
    
    for (i = 0; i < max; i++) {
#ifdef DEBUG
	if (kerb_debug & 2)
	    fprintf(stderr, "\n %s %s",
		    principal->name, principal->instance);
#endif	
	/* DO IT */
	count++;
	principal++;
    }
    return count;
}

/*
 * look up a dba in the cache returns number of dbas found 
 */

int
kerb_cache_get_dba(char *serv, char *inst, Dba *dba, unsigned int max)
                 		/* could have wild card */
                 		/* could have wild card */
                
                     		/* max number of name structs to return */

{
    int found = 0;

    if (!init)
	kerb_cache_init();

#ifdef DEBUG
    if (kerb_debug & 2)
	fprintf(stderr, "cache_get_dba for %s %s max = %d\n",
		serv, inst, max);
#endif

#ifdef DEBUG
    if (kerb_debug & 2) {
	if (found) {
	    fprintf(stderr, "cache get %s %s found %s %s sid = %d\n",
		    serv, inst, dba->name, dba->instance);
	} else {
	    fprintf(stderr, "cache %s %s not found\n", serv, inst);
	}
    }
#endif
    return found;
}

/*
 * insert/replace a dba in the cache returns number of dbas inserted 
 */

int
kerb_cache_put_dba(Dba *dba, unsigned int max)
                
                     		/* max number of dba structs to insert */

{
    u_long  i;
    int     count = 0;

    if (!init)
	kerb_cache_init();
#ifdef DEBUG
    if (kerb_debug & 2) {
	fprintf(stderr, "kerb_cache_put_dba  max = %d", max);
    }
#endif
    for (i = 0; i < max; i++) {
#ifdef DEBUG
	if (kerb_debug & 2)
	    fprintf(stderr, "\n %s %s",
		    dba->name, dba->instance);
#endif	
	/* DO IT */
	count++;
	dba++;
    }
    return count;
}

@


1.5
log
@bring up-to-date with new kth-krb (mostly cleanups)

Update some copyrights that I seemed to forget.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_cache.c,v 1.4 1997/12/15 17:56:23 art Exp $	*/
@


1.4
log
@Upgrades, sanity checks, cleanup, etc.
@
text
@d1 14
a14 2
/*	$OpenBSD: krb_cache.c,v 1.3 1997/12/12 11:29:24 art Exp $	*/
/* $KTH: krb_cache.c,v 1.6 1997/05/02 10:27:53 joda Exp $ */
d17 19
a35 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.3
log
@cleanup, check pointers, fix strcpy's, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
    if (init == 0)
d99 1
a99 1
    if (init == 0)
d136 1
a136 1
    if (init == 0)
@


1.2
log
@Another upgrade to kth-krb4-0.9.7
@
text
@d1 1
d60 1
a60 1
    int     found = 0;
d62 1
a62 1
    if (!init)
d67 1
a67 1
	    serv, inst, max);
d74 1
a74 1
		serv, inst, principal->name, principal->instance);
d77 1
a77 1
		inst);
d81 1
a81 1
    return (found);
d96 2
a97 2
    u_long  i;
    int     count = 0;
d99 1
a99 1
    if (!init)
d134 1
a134 1
    int     found = 0;
d136 1
a136 1
    if (!init)
d142 1
a142 1
	    serv, inst, max);
d149 1
a149 1
		serv, inst, dba->name, dba->instance);
d155 1
a155 1
    return (found);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d3 20
a22 19
/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
d34 1
a34 1
static  init = 0;
d41 1
a41 1
kerb_cache_init()
d52 6
a57 5
kerb_cache_get_principal(serv, inst, principal, max)
	char *serv;		/* could have wild card */
	char *inst;		/* could have wild card */
	Principal *principal;
	unsigned int max;	/* max number of name structs to return */
d89 3
a91 3
kerb_cache_put_principal(principal, max)
	Principal *principal;
	unsigned int max;	/* max number of principal structs to
d126 6
a131 5
kerb_cache_get_dba(serv, inst, dba, max)
	char *serv;		/* could have wild card */
	char *inst;		/* could have wild card */
	Dba *dba;
	unsigned int max;	/* max number of name structs to return */
d162 3
a164 3
kerb_cache_put_dba(dba, max)
	Dba *dba;
	unsigned int max;	/* max number of dba structs to insert */
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
