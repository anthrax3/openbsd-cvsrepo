head	1.8;
access;
symbols
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2000.02.25.15.15.03;	author hin;	state dead;
branches;
next	1.7;

1.7
date	98.05.17.13.53.48;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.02.25.15.51.19;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.12.22.15.02.08;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.15.17.56.24;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.09.07.57.23;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.11.28.12.49.10;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kntoln.c,v 1.7 1998/05/17 13:53:48 art Exp $	*/
/*	$KTH: kntoln.c,v 1.8 1997/12/11 15:00:11 bg Exp $	*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * krb_kntoln converts an auth name into a local name by looking up
 * the auth name in the /etc/aname file.  The format of the aname
 * file is:
 *
 * +-----+-----+-----+-----+------+----------+-------+-------+
 * | anl | inl | rll | lnl | name | instance | realm | lname |
 * +-----+-----+-----+-----+------+----------+-------+-------+
 * | 1by | 1by | 1by | 1by | name | instance | realm | lname |
 * +-----+-----+-----+-----+------+----------+-------+-------+
 *
 * If the /etc/aname file can not be opened it will set the
 * local name to the auth name.  Thus, in this case it performs as
 * the identity function.
 *
 * The name instance and realm are passed to krb_kntoln through
 * the AUTH_DAT structure (ad).
 *
 * Now here's what it *really* does:
 *
 * Given a Kerberos name in an AUTH_DAT structure, check that the
 * instance is null, and that the realm is the same as the local
 * realm, and return the principal's name in "lname".  Return
 * KSUCCESS if all goes well, otherwise KFAILURE.
 */

#include "krb_locl.h"

int
krb_kntoln(AUTH_DAT *ad, char *lname)
{
    static char lrealm[REALM_SZ] = "";

    if (ad == NULL || lname == NULL)
      return KFAILURE;

    if (!(*lrealm) && (krb_get_lrealm(lrealm,1) == KFAILURE))
        return(KFAILURE);

    if (strcmp(ad->pinst, ""))
        return(KFAILURE);
    if (strcmp(ad->prealm, lrealm))
        return(KFAILURE);
    strncpy(lname, ad->pname, ANAME_SZ);
    lname[ANAME_SZ-1] = '\0';
    return(KSUCCESS);
}

#if 0
/* Posted to usenet by "Derrick J. Brashear" <shadow+@@andrew.cmu.edu> */

#include <krb.h>
#include <ndbm.h>
#include <stdio.h>
#include <sys/file.h>
#include <strings.h>
#include <sys/syslog.h>
#include <sys/errno.h>

extern int errno;
/*
 * antoln converts an authentication name into a local name by looking up
 * the authentication name in the /etc/aname dbm database.
 * 
 * If the /etc/aname file can not be opened it will set the 
 * local name to the principal name.  Thus, in this case it performs as 
 * the identity function.
 * 
 * The name instance and realm are passed to antoln through
 * the AUTH_DAT structure (ad).
 */

static char     lrealm[REALM_SZ] = "";

int
an_to_ln(AUTH_DAT        *ad,
	 char            *lname)
{
        static DBM *aname = NULL;
        char keyname[ANAME_SZ+INST_SZ+REALM_SZ+2];

        if(!(*lrealm) && (krb_get_lrealm(lrealm,1) == KFAILURE))
                return(KFAILURE);

        if((strcmp(ad->pinst,"") && strcmp(ad->pinst,"root")) ||
strcmp(ad->prealm,lrealm)) {
                datum val;
                datum key;
                /*
                 * Non-local name (or) non-null and non-root instance.
                 * Look up in dbm file.
                 */
                if (!aname) {
                        if ((aname = dbm_open("/etc/aname", O_RDONLY, 0))
                            == NULL) return (KFAILURE);
                }
                /* Construct dbm lookup key. */
                an_to_a(ad, keyname);
                key.dptr = keyname;
                key.dsize = strlen(keyname)+1;
                flock(dbm_dirfno(aname), LOCK_SH);
                val = dbm_fetch(aname, key);
                flock(dbm_dirfno(aname), LOCK_UN);
                if (!val.dptr) {
                  dbm_close(aname);
                  return(KFAILURE);
                }
                /* Got it! */
                strncpy(lname, val.dptr, ANAME_SZ);
		lname[ANAME_SZ-1] = '\0';
                return(KSUCCESS);
        } else{
	  strncpy(lname, ad->pname, ANAME_SZ);
	  lname[ANAME_SZ-1] = '\0';
	}
        return(KSUCCESS);
}

int
an_to_a(AUTH_DAT *ad,
        char *str)
{
        strncpy(str, ad->pname, ANAME_SZ);
	str[ANAME_SZ-1] = '\0';
        if(*ad->pinst) {
                strcat(str, ".");
                strcat(str, ad->pinst);
        }
        strcat(str, "@@");
        strcat(str, ad->prealm);
}

/*
 * Parse a string of the form "user[.instance][@@realm]" 
 * into a struct AUTH_DAT.
 */
int
a_to_an(char *str, AUTH_DAT *ad)
{
        char *buf = (char *)malloc(strlen(str)+1);
        char *rlm, *inst, *princ;

	if (buf == NULL)
	  return KFAILURE;

        if(!(*lrealm) && (krb_get_lrealm(lrealm,1) == KFAILURE)) {
                free(buf);
		buf = NULL;
                return(KFAILURE);
        }
        /* destructive string hacking is more fun.. */
        strncpy(buf, str, strlen(str)+1);
	buf[strlen(str)] = '\0';

        if (rlm = index(buf, '@@')) {
                *rlm++ = '\0';
        }
        if (inst = index(buf, '.')) {
                *inst++ = '\0';
        }
        strcpy(ad->pname, buf);
        if(inst) strcpy(ad->pinst, inst);
        else *ad->pinst = '\0';
        if (rlm) strcpy(ad->prealm, rlm);
        else strcpy(ad->prealm, lrealm);
        free(buf);
	buf = NULL;
        return(KSUCCESS);
}
#endif
@


1.7
log
@update kth-tag (the change was not incorporated because it did not affect us)
@
text
@d1 1
a1 1
/*	$OpenBSD: kntoln.c,v 1.6 1998/02/25 15:51:19 art Exp $	*/
@


1.6
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 2
a2 2
/*	$OpenBSD: kntoln.c,v 1.5 1997/12/22 15:02:08 art Exp $	*/
/* $KTH: kntoln.c,v 1.7 1997/03/23 03:53:12 joda Exp $ */
@


1.5
log
@copyright cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: kntoln.c,v 1.4 1997/12/15 17:56:24 art Exp $	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.4
log
@Upgrades, sanity checks, cleanup, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: kntoln.c,v 1.3 1997/12/09 07:57:23 art Exp $	*/
d4 5
d10 19
a28 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.3
log
@Removed one expliotable hole, one possibly exploitable hole, many buffer
overflows and lots of unchecked pointers. Tags are nice too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d162 1
a162 1
a_to_an(cahr *str, AUTH_DAT *ad)
@


1.2
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 1
d58 3
d68 2
a69 1
    strcpy(lname, ad->pname);
d99 3
a101 3
an_to_ln(ad,lname)
AUTH_DAT        *ad;
char            *lname;
d133 2
a134 1
                strcpy(lname,val.dptr);
d136 4
a139 1
        } else strcpy(lname,ad->pname);
d143 3
a145 3
an_to_a(ad, str)
        AUTH_DAT *ad;
        char *str;
d147 2
a148 1
        strcpy(str, ad->pname);
d161 2
a162 4

a_to_an(str, ad)
        AUTH_DAT *ad;
        char *str;
d167 3
d172 1
d176 2
a177 1
        strcpy(buf, str);
d191 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 7
/*
 * This software may now be redistributed outside the US.
 *
 * $Source: /usr/src/kerberosIV/lib/krb/RCS/kntoln.c,v $
 *
 * $Locker:  $
 */
d53 1
a53 3
krb_kntoln(ad, lname)
	AUTH_DAT *ad;
	char *lname;
d60 1
a60 1
    if (strcmp(ad->pinst,""))
d62 1
a62 1
    if (strcmp(ad->prealm,lrealm))
d64 1
a64 1
    (void) strcpy(lname,ad->pname);
d67 114
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

