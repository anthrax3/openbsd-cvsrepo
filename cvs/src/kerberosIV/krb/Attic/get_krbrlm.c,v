head	1.16;
access;
symbols
	OPENBSD_2_6:1.15.0.6
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.15.0.4
	OPENBSD_2_5_BASE:1.15
	OPENBSD_2_4:1.15.0.2
	OPENBSD_2_4_BASE:1.15
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2000.02.25.15.15.01;	author hin;	state dead;
branches;
next	1.15;

1.15
date	98.05.18.00.53.41;	author art;	state Exp;
branches;
next	1.14;

1.14
date	98.02.25.15.51.10;	author art;	state Exp;
branches;
next	1.13;

1.13
date	98.02.20.02.51.35;	author art;	state Exp;
branches;
next	1.12;

1.12
date	97.12.22.15.02.06;	author art;	state Exp;
branches;
next	1.11;

1.11
date	97.12.12.05.30.22;	author art;	state Exp;
branches;
next	1.10;

1.10
date	97.12.09.09.07.07;	author art;	state Exp;
branches;
next	1.9;

1.9
date	97.12.09.07.57.17;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.12.02.06.28.22;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.12.02.00.45.20;	author art;	state Exp;
branches;
next	1.6;

1.6
date	97.11.28.12.49.01;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.03.25.21.51.44;	author bitblt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.16.17.09.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.03.18.18.56;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.08.43.54;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: get_krbrlm.c,v 1.15 1998/05/18 00:53:41 art Exp $	*/
/*	$KTH: get_krbrlm.c,v 1.20 1998/03/18 13:46:51 bg Exp $		*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

#include "krb_locl.h"

/*
 * krb_get_lrealm takes a pointer to a string, and a number, n.  It fills
 * in the string, r, with the name of the nth realm specified on the
 * first line of the kerberos config file (KRB_CONF, defined in "krb.h").
 * It returns 0 (KSUCCESS) on success, and KFAILURE on failure.  If the
 * config file does not exist, and if n=1, a successful return will occur
 * with r = KRB_REALM (also defined in "krb.h").
 *
 * NOTE: for archaic & compatibility reasons, this routine will only return
 * valid results when n = 1.
 *
 * For the format of the KRB_CONF file, see comments describing the routine
 * krb_get_krbhst().
 */

static int
krb_get_lrealm_f(char *r, int n, const char *fname)
{
    FILE *f;
    int ret = KFAILURE;
    f = fopen(fname, "r");
    if(f){
	char buf[REALM_SZ];
	if(fgets(buf, sizeof(buf), f)){
	    char *p = buf + strspn(buf, " \t");
	    p[strcspn(p, " \t\r\n")] = 0;
	    p[REALM_SZ - 1] = 0;
	    strncpy(r, p, REALM_SZ);
	    r[REALM_SZ-1] = '\0';
	    if (*p != '#')
		ret = KSUCCESS;
	}
	fclose(f);
    }
    return ret;
}

static const char *no_default_realm = "NO.DEFAULT.REALM";

int
krb_get_lrealm(char *r, int n)
{
    int i;
    char file[MAXPATHLEN];
    
    if (n > 1)
	return(KFAILURE);		/* Temporary restriction */

    r[0] = '#';
    
    for (i = 0; krb_get_krbconf(i, file, sizeof(file)) == 0; i++)
	if (krb_get_lrealm_f(r, n, file) == KSUCCESS)
	    return KSUCCESS;
    
    if (r[0] == '#')
	return(KFAILURE);
    
    /* When nothing else works try default realm */
    if (n == 1) {
	char *t = krb_get_default_realm();

	if (strcmp(t, no_default_realm) == 0)
	    return KFAILURE;
	    
	strncpy (r, t, REALM_SZ - 1);
	r[REALM_SZ - 1] = '\0';

	return KSUCCESS;
    }
    else
	return(KFAILURE);
}

/* For SunOS5 compat. */
char *
krb_get_default_realm(void)
{
    static char local_realm[REALM_SZ]; /* Local kerberos realm */

    if (local_realm[0] == 0)
    {
	char *t, hostname[MAXHOSTNAMELEN];
	
	strncpy(local_realm, no_default_realm, sizeof(local_realm) - 1);
	local_realm[sizeof(local_realm) - 1] = '\0';
	
	gethostname(hostname, sizeof(hostname));
	t = krb_realmofhost(hostname);
	if (t && strcmp(t, no_default_realm) != 0) {
	    strncpy(local_realm, t, sizeof(local_realm) - 1);
	    local_realm[sizeof(local_realm) - 1] = '\0';
	}
    }

    return local_realm;
}
@


1.15
log
@update to a fresher libkrb
@
text
@d1 1
a1 1
/*	$OpenBSD: get_krbrlm.c,v 1.14 1998/02/25 15:51:10 art Exp $	*/
@


1.14
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 2
a2 2
/*	$OpenBSD: get_krbrlm.c,v 1.13 1998/02/20 02:51:35 art Exp $	*/
/* $KTH: get_krbrlm.c,v 1.16 1997/05/02 01:26:22 assar Exp $ */
d76 2
d96 1
a96 1
    /* If nothing else works try LOCALDOMAIN, if it exists */
d98 9
a106 16
	char *t, hostname[MAXHOSTNAMELEN];
	gethostname(hostname, sizeof(hostname));
	t = krb_realmofhost(hostname);
	if (t != NULL) {
	    strcpy (r, t);
	    return KSUCCESS;
	}
	t = strchr(hostname, '.');
	if (t == 0)
	    return KFAILURE;	/* No domain part, you loose */

	t++;			/* Skip leading dot and upcase the rest */
	for (; *t != '\0'; t++, r++)
	    *r = toupper(*t);
	*r = 0;
	return(KSUCCESS);
d116 15
a130 4
    static char local_realm[REALM_SZ]; /* local kerberos realm */
    if (krb_get_lrealm(local_realm, 1) != KSUCCESS){
	strncpy(local_realm, "NO.DEFAULT.REALM", REALM_SZ);
	local_realm[REALM_SZ-1] = '\0';
d132 1
@


1.13
log
@fail if you don't have /etc/kerberosIV/krb.conf
@
text
@d1 1
a1 1
/*	$OpenBSD: get_krbrlm.c,v 1.12 1997/12/22 15:02:06 art Exp $	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.12
log
@copyright cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: get_krbrlm.c,v 1.11 1997/12/12 05:30:22 art Exp $	*/
d77 2
@


1.11
log
@Another upgrade of kth-krb + many fixes of strcpys and unchecked pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: get_krbrlm.c,v 1.10 1997/12/09 09:07:07 art Exp $	*/
d4 5
d10 19
a28 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.10
log
@always those small bugs..
@
text
@d1 1
a1 1
/*	$OpenBSD: get_krbrlm.c,v 1.9 1997/12/09 07:57:17 art Exp $	*/
d67 8
a74 13
  static const char *const files[] = KRB_CNF_FILES;
  int i;
  
  const char *dir = getenv("KRBCONFDIR");

  if (n > 1)
    return(KFAILURE);		/* Temporary restriction */

  /* First try user specified file */
  if (dir != 0 && !issetugid()) {
    char fname[MAXPATHLEN];
    if(k_concat(fname, sizeof(fname), dir, "/krb.conf", NULL) == 0)
	if (krb_get_lrealm_f(r, n, fname) == KSUCCESS)
d76 2
a77 7
  }

  for (i = 0; files[i] != 0; i++)
    if (krb_get_lrealm_f(r, n, files[i]) == KSUCCESS)
      return KSUCCESS;

  if (r[0] == '#')
d79 19
a97 21

  /* If nothing else works try LOCALDOMAIN, if it exists */
  if (n == 1)
    {
      char *t, hostname[MAXHOSTNAMELEN];
      k_gethostname(hostname, sizeof(hostname));
      t = krb_realmofhost(hostname);
      if (t) {
	strncpy (r, t, REALM_SZ);
	r[REALM_SZ-1] = '\0';
	return KSUCCESS;
      }
      t = strchr(hostname, '.');
      if (t == 0)
	return KFAILURE;	/* No domain part, you loose */

      t++;			/* Skip leading dot and upcase the rest */
      for (; *t; t++, r++)
	*r = toupper(*t);
      *r = 0;
      return(KSUCCESS);
d99 2
a100 2
  else
    return(KFAILURE);
d107 6
a112 6
  static char local_realm[REALM_SZ]; /* local kerberos realm */
  if (krb_get_lrealm(local_realm, 1) != KSUCCESS){
    strncpy(local_realm, "NO.DEFAULT.REALM", REALM_SZ);
    local_realm[REALM_SZ-1] = '\0';
  }
  return local_realm;
@


1.9
log
@Removed one expliotable hole, one possibly exploitable hole, many buffer
overflows and lots of unchecked pointers. Tags are nice too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
  if (dir != 0 && getuid() != geteuid()) {
@


1.8
log
@The change art made causes infinite recursion.  This patches it until he fixes it right
@
text
@d1 1
d54 2
a55 1
	    strcpy(r, p);
d76 1
a76 1
  if (dir != 0) {
d97 2
a98 1
	strcpy (r, t);
d120 4
a123 2
  if (krb_get_lrealm(local_realm, 1) != KSUCCESS)
    strcpy(local_realm, "NO.DEFAULT.REALM");
@


1.7
log
@The disabling of kerberos should work now.
I think I will document this in the future. It was impossible to find.
@
text
@d54 2
a55 1
	    ret = KSUCCESS;
d59 1
a59 1
    return (*r == '#' ? KFAILURE : ret);
d84 3
@


1.6
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d58 1
a58 1
    return ret;
@


1.5
log
@config file paranoia
@
text
@d1 1
a1 7
/*
 * This software may now be redistributed outside the US.
 *
 * $Source: /cvs/src/kerberosIV/krb/get_krbrlm.c,v $
 *
 * $Locker:  $
 */
d30 3
a32 1
 * It returns 0 (KSUCCESS) on success, and KFAILURE on failure.
d41 2
a42 4
int
krb_get_lrealm(r, n)
	char *r;
	int n;
d44 13
a56 15
    FILE *cnffile;

    if (n > 1)
	return(KFAILURE);  /* Temporary restriction */

    if ((cnffile = fopen(KRB_CONF, "r")) == NULL) {
        char tbuf[128];
        char *tdir = NULL;
	if (issetugid() == 0) 
	   tdir = (char *) getenv("KRBCONFDIR");
        strncpy(tbuf, tdir ? tdir : "/etc", sizeof(tbuf)-1);
        tbuf[sizeof(tbuf)-1] = 0;
        strncat(tbuf, "/krb.conf", sizeof(tbuf)-strlen(tbuf));
        if ((cnffile = fopen(tbuf,"r")) == NULL)
            return(KFAILURE);
d58 2
d61 42
a102 3
    if (fscanf(cnffile,"%s",r) != 1) {
        (void) fclose(cnffile);
        return(KFAILURE);
d104 12
a115 2
    (void) fclose(cnffile);
    return(*r == '#' ? KFAILURE : KSUCCESS);
@


1.4
log
@strncat related oflows
@
text
@d57 3
a59 1
        char *tdir = (char *) getenv("KRBCONFDIR");
@


1.3
log
@Make it possible to have a commented-out local realm in krb.conf to allow
using Kerberos for remote authentication but not for local authentication
@
text
@d58 1
a58 2
        strncpy(tbuf, tdir ? tdir : "/etc", sizeof(tbuf));
        strncat(tbuf, "/krb.conf", sizeof(tbuf));
d60 1
@


1.2
log
@Do not use hardcoded realm or host names
@
text
@d70 1
a70 1
    return(KSUCCESS);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Source: /usr/src/kerberosIV/lib/krb/RCS/get_krbrlm.c,v $
d36 1
a36 3
 * It returns 0 (KSUCCESS) on success, and KFAILURE on failure.  If the
 * config file does not exist, and if n=1, a successful return will occur
 * with r = KRB_REALM (also defined in "krb.h").
d62 1
a62 6
            if (n == 1) {
                (void) strcpy(r, KRB_REALM);
                return(KSUCCESS);
            }
            else
                return(KFAILURE);
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

