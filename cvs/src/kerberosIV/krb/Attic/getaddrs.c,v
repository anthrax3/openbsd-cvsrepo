head	1.10;
access;
symbols
	OPENBSD_2_6:1.9.0.6
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.10
date	2000.02.25.15.15.02;	author hin;	state dead;
branches;
next	1.9;

1.9
date	98.08.16.20.48.37;	author art;	state Exp;
branches;
next	1.8;

1.8
date	98.07.07.19.06.50;	author art;	state Exp;
branches;
next	1.7;

1.7
date	98.05.18.00.53.42;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.03.25.21.50.13;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.12.09.20.01.38;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.12.09.14.43.58;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.09.07.57.18;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.11.29.14.07.09;	author art;	state Exp;
branches;
next	1.1;

1.1
date	97.11.28.12.49.04;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: getaddrs.c,v 1.9 1998/08/16 20:48:37 art Exp $	*/
/*	$KTH: getaddrs.c,v 1.24 1998/04/26 15:10:44 joda Exp $		*/

/*
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "krb_locl.h"

#include <sys/ioctl.h>
#include <net/if.h>
#include <sys/sockio.h>

#include <err.h>

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif /* MAX */

#ifndef MIN
#define MIN(a,b) (((a)<(b))?(a):(b))
#endif /* MIN */

/*
 * Return number and list of all local adresses.
 */

int
k_get_all_addrs (struct in_addr **l)
{
     int fd;
     char buf[BUFSIZ];
     struct ifreq ifreq;
     struct ifconf ifconf;
     int num, j;
     char *p;
     size_t sz;
     
     if (l == NULL)
	 return -1;

     fd = socket(AF_INET, SOCK_DGRAM, 0);
     if (fd < 0)
         return -1;

     ifconf.ifc_len = sizeof(buf);
     ifconf.ifc_buf = buf;
     if(ioctl(fd, SIOCGIFCONF, &ifconf) < 0)
         return -1;

     num = ifconf.ifc_len / sizeof(struct ifreq);
     *l = malloc(num * sizeof(struct in_addr));
     if(*l == NULL) {
	 close(fd);
	 return -1;
     }

     j = 0;
     ifreq.ifr_name[0] = '\0';
     for (p = ifconf.ifc_buf; p < ifconf.ifc_buf + ifconf.ifc_len; p += sz) {
          struct ifreq *ifr = (struct ifreq *)p;
	  sz = sizeof(*ifr);
	  sz = MAX(sz, sizeof(ifr->ifr_name) + ifr->ifr_addr.sa_len);

	  if(strncmp(ifreq.ifr_name, ifr->ifr_name, sizeof(ifr->ifr_name))) {
	       if(ioctl(fd, SIOCGIFFLAGS, ifr) < 0)
		   continue;
	       if (ifr->ifr_flags & IFF_UP) {
		    if(ioctl(fd, SIOCGIFADDR, ifr) < 0)
			continue;
		    (*l)[j++] = ((struct sockaddr_in *)&ifr->ifr_addr)->sin_addr;
	       }
	       ifreq = *ifr;
	  }
     }
     if (j != num) {
        struct in_addr *temp;
	if ((temp = realloc (*l, j * sizeof(struct in_addr))) == NULL) {
	    free(*l);
	    close(fd);
	    return -1;
	}
	*l = temp;
     }
     
     close(fd);
     return j;
}
@


1.9
log
@realloc correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: getaddrs.c,v 1.8 1998/07/07 19:06:50 art Exp $	*/
@


1.8
log
@upgrade libkrb to 0.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: getaddrs.c,v 1.7 1998/05/18 00:53:42 art Exp $	*/
d110 4
a113 2
     if (j != num)
	if ((*l = realloc (*l, j * sizeof(struct in_addr))) == NULL) {
d117 2
@


1.7
log
@update to a fresher libkrb
@
text
@d1 1
a1 1
/*	$OpenBSD: getaddrs.c,v 1.6 1998/03/25 21:50:13 art Exp $	*/
d66 1
a66 1
     char *inbuf = NULL;
a68 1
     int len = 8192;
d78 1
a78 1
	 return -1;
d80 4
a83 14
     while (1) {
	 ifconf.ifc_len = len;
	 ifconf.ifc_buf = inbuf = realloc(inbuf, len);
	 if (inbuf == NULL)
	       err(1, "malloc");
	 if (ioctl(fd, SIOCGIFCONF, &ifconf) < 0) {
	   close(fd);
	   free(inbuf);
	   return -1;
	 }
	 if (ifconf.ifc_len + sizeof(ifreq) < len)
	   break;
	 len *= 2;
     }
a88 1
	 free(inbuf);
d111 1
a111 2
	if ((*l = realloc (*l, j * sizeof(struct in_addr))) == NULL)
	{
a112 1
	    free(inbuf);
a115 1
     free(inbuf);
@


1.6
log
@get_ad_tkt.c : -Wall
get_host.c : "==" != "=" + -Wall
getaddrs.c : #include <err.h>
krb_locl.h : add prototypes for k_{{,v},{,v}m}concat
@
text
@d1 2
a2 2
/*	$OpenBSD: getaddrs.c,v 1.5 1997/12/09 20:01:38 deraadt Exp $	*/
/* $KTH: getaddrs.c,v 1.20 1997/11/09 06:13:32 assar Exp $ */
d5 1
a5 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d72 1
d106 1
a106 1
     for (p = ifconf.ifc_buf; p < ifconf.ifc_buf + ifconf.ifc_len;) {
d108 1
a108 1
	  size_t sz = sizeof(*ifr);
d112 2
a113 7
	       if(ioctl(fd, SIOCGIFFLAGS, ifr) < 0) {
		    close(fd);
		    free(*l);
		    *l = NULL;
		    free(inbuf);
		    return -1;
	       }
d115 2
a116 7
		    if(ioctl(fd, SIOCGIFADDR, ifr) < 0) {
			 close(fd);
			 free(*l);
			 *l = NULL;
			 free(inbuf);
			 return -1;
		    }
a120 1
	  p = p + sz;
@


1.5
log
@no, this is better
@
text
@d1 1
a1 1
/*	$OpenBSD: getaddrs.c,v 1.4 1997/12/09 14:43:58 art Exp $	*/
d47 2
@


1.4
log
@ioctl-patch for machines with many interfaces.
by Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: getaddrs.c,v 1.3 1997/12/09 07:57:18 art Exp $	*/
a85 1
	   inbuf = NULL;
a97 1
	 inbuf = NULL;
a113 1
		    inbuf = NULL;
a121 1
			 inbuf = NULL;
d133 1
a134 2
	    inbuf = NULL;
	    close(fd);
d138 1
@


1.3
log
@Removed one expliotable hole, one possibly exploitable hole, many buffer
overflows and lots of unchecked pointers. Tags are nice too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
a64 1
     char buf[BUFSIZ];
d67 1
d78 14
a91 5
     ifconf.ifc_len = sizeof(buf);
     ifconf.ifc_buf = buf;
     if(ioctl(fd, SIOCGIFCONF, &ifconf) < 0){
	 close (fd);
	 return -1;
d93 1
d97 3
a99 1
	 close (fd);
d112 2
a113 2
		    close (fd);
		    free (*l);
d115 2
d121 2
a122 2
			 close (fd);
			 free (*l);
d124 2
d137 2
d143 1
a143 1
     close (fd);
@


1.2
log
@fixed the min problem.
@
text
@d1 1
d69 3
d75 1
a75 1
	  return -1;
d79 4
a82 2
     if(ioctl(fd, SIOCGIFCONF, &ifconf) < 0)
	  return -1;
d86 2
a87 2
	  close (fd);
	  return -1;
d101 1
d108 1
d118 6
a123 1
	  *l = realloc (*l, j * sizeof(struct in_addr));
@


1.1
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d47 8
d89 1
a89 1
	  sz = max(sz, sizeof(ifr->ifr_name) + ifr->ifr_addr.sa_len);
@
