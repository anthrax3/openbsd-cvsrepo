head	1.12;
access;
symbols
	OPENBSD_2_6:1.11.0.6
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.4
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2000.02.25.15.15.02;	author hin;	state dead;
branches;
next	1.11;

1.11
date	98.05.18.00.53.44;	author art;	state Exp;
branches;
next	1.10;

1.10
date	98.02.25.15.51.15;	author art;	state Exp;
branches;
next	1.9;

1.9
date	97.12.22.15.02.07;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.12.12.05.30.23;	author art;	state Exp;
branches;
next	1.7;

1.7
date	97.12.09.07.57.19;	author art;	state Exp;
branches;
next	1.6;

1.6
date	97.11.28.12.49.05;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.03.25.21.51.45;	author bitblt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.16.17.09.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.10.14.02.27.14;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.09.20.11.52;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: getrealm.c,v 1.11 1998/05/18 00:53:44 art Exp $	*/
/*	$KTH: getrealm.c,v 1.26 1997/10/08 22:51:13 joda Exp $		*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

#include "krb_locl.h"

#define MATCH_SUBDOMAINS        0

/*
 * krb_realmofhost.
 * Given a fully-qualified domain-style primary host name,
 * return the name of the Kerberos realm for the host.
 * If the hostname contains no discernable domain, or an error occurs,
 * return the local realm name, as supplied by get_krbrlm().
 * If the hostname contains a domain, but no translation is found,
 * the hostname's domain is converted to upper-case and returned.
 *
 * The format of each line of the translation file is:
 * domain_name kerberos_realm
 * -or-
 * host_name kerberos_realm
 *
 * domain_name should be of the form .XXX.YYY (e.g. .LCS.MIT.EDU)
 * host names should be in the usual form (e.g. FOO.BAR.BAZ)
 */

/* To automagically find the correct realm of a host (without
 * krb.realms) add a text record for your domain with the name of your
 * realm, like this:
 *
 * krb4-realm	IN	TXT	FOO.SE
 *
 * The search is recursive, so you can also add entries for specific
 * hosts. To find the realm of host a.b.c, it first tries
 * krb4-realm.a.b.c, then krb4-realm.b.c and so on.
 */

static int
dns_find_realm(char *hostname, char *realm)
{
    char domain[MAXHOSTNAMELEN + sizeof("krb4-realm..")];
    char *p;
    int level = 0;
    struct dns_reply *r;
    
    p = hostname;

    while(1){
	snprintf(domain, sizeof(domain), "krb4-realm.%s.", p);
	p = strchr(p, '.');
	if(p == NULL)
	    break;
	p++;
	r = dns_lookup(domain, "TXT");
	if(r){
	    struct resource_record *rr = r->head;
	    while(rr){
		if(rr->type == T_TXT){
		    strncpy(realm, rr->u.txt, REALM_SZ);
		    realm[REALM_SZ - 1] = 0;
		    dns_free_data(r);
		    return level;
		}
		rr = rr->next;
	    }
	    dns_free_data(r);
	}
	level++;
    }
    return -1;
}


static FILE *
open_krb_realms(void)
{
    int i;
    char file[MAXPATHLEN];
    FILE *res;

    for(i = 0; krb_get_krbrealms(i, file, sizeof(file)) == 0; i++)
	if ((res = fopen(file, "r")) != NULL)
	    return res;

    return NULL;
}

static int
file_find_realm(const char *phost, const char *domain, 
		char *ret_realm, size_t ret_realm_sz)
{
    FILE *trans_file;
    char buf[1024];
    int ret = -1;
    
    if ((trans_file = open_krb_realms()) == NULL)
	return -1;

    while (fgets(buf, sizeof(buf), trans_file) != NULL) {
	char *save = NULL;
	char *tok;
	char *tmp_host;
	char *tmp_realm;

        tok = strtok_r(buf, " \t\r\n", &save);
        if(tok == NULL)
            continue;
	tmp_host = tok;
	tok = strtok_r(NULL, " \t\r\n", &save);
	if(tok == NULL)
	    continue;
	tmp_realm = tok;
	if (strcasecmp(tmp_host, phost) == 0) {
	    /* exact match of hostname, so return the realm */
	    strncpy(ret_realm, tmp_realm, ret_realm_sz);
	    ret_realm[ret_realm_sz - 1] = '\0';
	    ret = 0;
	    break;
	}
	if ((tmp_host[0] == '.') && domain) { 
	    const char *cp = domain;
	    do {
		if(strcasecmp(tmp_host, domain) == 0){
		    /* domain match, save for later */ 
		    strncpy(ret_realm, tmp_realm, ret_realm_sz);
		    ret_realm[ret_realm_sz - 1] = '\0';
		    ret = 0;
		    break;
		}
		cp = strchr(cp + 1, '.');
	    } while(MATCH_SUBDOMAINS && cp);
	}
    }
    fclose(trans_file);
    return ret;
}

char *
krb_realmofhost(const char *host)
{
    static char ret_realm[REALM_SZ];
    char *domain;
    char phost[MAXHOSTNAMELEN];
	
    krb_name_to_name(host, phost, sizeof(phost));
	
    domain = strchr(phost, '.');

    if(file_find_realm(phost, domain, ret_realm, sizeof(ret_realm)) == 0)
	return ret_realm;

    if(dns_find_realm(phost, ret_realm) >= 0)
	return ret_realm;
  
    if (domain) {
	char *cp;
	  
	strncpy(ret_realm, &domain[1], REALM_SZ);
	ret_realm[REALM_SZ - 1] = 0;
	/* Upper-case realm */
	for (cp = ret_realm; *cp; cp++)
	    *cp = toupper(*cp);
    } else {
	strncpy(ret_realm, krb_get_default_realm(), REALM_SZ); /* Wild guess */
    }
    return ret_realm;
}
@


1.11
log
@update to a fresher libkrb
@
text
@d1 1
a1 1
/*	$OpenBSD: getrealm.c,v 1.10 1998/02/25 15:51:15 art Exp $	*/
@


1.10
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 2
a2 2
/*	$OpenBSD: getrealm.c,v 1.9 1997/12/22 15:02:07 art Exp $	*/
/* $KTH: getrealm.c,v 1.26 1997/10/08 22:51:13 joda Exp $ */
d110 1
a110 1
    char file[128];
d112 1
d196 1
a196 1
	krb_get_lrealm(ret_realm, 1);
@


1.9
log
@copyright cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: getrealm.c,v 1.8 1997/12/12 05:30:23 art Exp $	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.8
log
@Another upgrade of kth-krb + many fixes of strcpys and unchecked pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: getrealm.c,v 1.7 1997/12/09 07:57:19 art Exp $	*/
d4 5
d10 19
a28 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.7
log
@Removed one expliotable hole, one possibly exploitable hole, many buffer
overflows and lots of unchecked pointers. Tags are nice too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d97 5
a101 12
  static const char *const files[] = KRB_RLM_FILES;
  FILE *res;
  int i;
  
  const char *dir = getenv("KRBCONFDIR");

  /* First try user specified file */
  if (dir != 0 && getuid() != geteuid()) {
    char fname[MAXPATHLEN];

    if(k_concat(fname, sizeof(fname), dir, "/krb.realms", NULL) == 0)
	if ((res = fopen(fname, "r")) != NULL)
a102 5
  }

  for (i = 0; files[i] != 0; i++)
    if ((res = fopen(files[i], "r")) != NULL)
      return res;
d104 1
a104 1
  return NULL;
@


1.6
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 1
d104 1
a104 1
  if (dir != 0) {
d120 2
a121 1
file_find_realm(const char *phost, const char *domain, char *ret_realm)
a124 2
    char trans_host[MAXHOSTNAMELEN];
    char trans_realm[REALM_SZ];
d130 1
a130 1
    while (fgets(buf, sizeof(buf), trans_file)) {
d132 8
a139 5
	char *tok = strtok_r(buf, " \t\r\n", &save);
	if(tok == NULL)
	    continue;
	strncpy(trans_host, tok, MAXHOSTNAMELEN);
	trans_host[MAXHOSTNAMELEN - 1] = 0;
d143 2
a144 3
	strcpy(trans_realm, tok);
	trans_realm[REALM_SZ - 1] = 0;
	if (!strcasecmp(trans_host, phost)) {
d146 2
a147 1
	    strcpy(ret_realm, trans_realm);
d151 1
a151 1
	if ((trans_host[0] == '.') && domain) { 
d154 1
a154 1
		if(strcasecmp(trans_host, domain) == 0){
d156 2
a157 1
		    strcpy(ret_realm, trans_realm);
d180 1
a180 1
    if(file_find_realm(phost, domain, ret_realm) == 0)
@


1.5
log
@config file paranoia
@
text
@d1 1
a1 7
/*
 * This software may now be redistributed outside the US.
 *
 * $Source: /cvs/src/kerberosIV/krb/getrealm.c,v $
 *
 * $Locker:  $
 */
a24 1
#include <netdb.h>
a27 5
/* for Ultrix and friends ... */
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 64
#endif

d46 10
a55 1
static char ret_realm[REALM_SZ+1];
d57 2
a58 3
char *
krb_realmofhost(host)
	char *host;
d60 26
a85 17
	char *domain;
	FILE *trans_file;
	char trans_host[MAXHOSTNAMELEN+1];
	char trans_realm[REALM_SZ+1];
	struct hostent *hp;
	int retval;

	if ((hp = gethostbyname(host)) != NULL)
		host = hp->h_name;

	domain = strchr(host, '.');

	/* prepare default */
	if (domain) {
		ret_realm[0] = '\0';
	} else {
		krb_get_lrealm(ret_realm, 1);
d87 4
d92 55
a146 10
	if ((trans_file = fopen(KRB_RLM_TRANS, "r")) == (FILE *) 0) {
	        char tbuf[128];
		char *tdir = NULL;
		if (issetugid() == 0) 
			tdir = (char *) getenv("KRBCONFDIR");
		strncpy(tbuf, tdir ? tdir : "/etc", sizeof(tbuf)-1);
		tbuf[sizeof(tbuf)-1] = '\0';
		strncat(tbuf, "/krb.realms", sizeof(tbuf) - strlen(tbuf));
		if ((trans_file = fopen(tbuf,"r")) == NULL)
                        return(ret_realm[0] ? ret_realm : NULL); /* krb_errno = KRB_NO_TRANS */
d148 8
a155 36
	while (1) {
		if ((retval = fscanf(trans_file, "%s %s",
				     trans_host, trans_realm)) != 2) {
			if (retval == EOF) {
				fclose(trans_file);
				return(ret_realm[0] ? ret_realm : NULL);
			}
			continue;	/* ignore broken lines */
		}
		trans_host[MAXHOSTNAMELEN] = '\0';
		trans_realm[REALM_SZ] = '\0';
		if (!strcasecmp(trans_host, host)) {
			/* exact match of hostname, so return the realm */
			(void) strcpy(ret_realm, trans_realm);
			fclose(trans_file);
			return(ret_realm[0] ? ret_realm : NULL);
		}
		if ((trans_host[0] == '.') && domain) { 
#if     MATCH_SUBDOMAINS
                        char *cp;
                        for (cp = domain; cp != NULL; cp = strchr(cp+1, '.')) {
                                /* this is a domain match */
                                if (!strcasecmp(trans_host, cp)) {
                                        /* domain match, save for later */
                                        (void) strcpy(ret_realm, trans_realm);
                                        continue;
                                }
                        }
#else /* MATCH_SUBDOMAINS */
			/* this is a domain match */ 
			if (!strcasecmp(trans_host, domain)) { 
				/* domain match, save for later */ 
				(void) strcpy(ret_realm, trans_realm); 
				continue; 
			} 
#endif /* MATCH_SUBDOMAINS */
d157 2
d160 34
@


1.4
log
@strncat related oflows
@
text
@d85 3
a87 1
		char *tdir = (char *) getenv("KRBCONFDIR");
@


1.3
log
@Don't default a realm name to the domain part of a host name
@
text
@d86 3
a88 3
		strncpy(tbuf, tdir ? tdir : "/etc", sizeof(tbuf));
		strncat(tbuf, "/krb.realms", sizeof(tbuf));
		tbuf[sizeof(tbuf)-1] = 0;
@


1.2
log
@Attempt to get the canonical name of a host before doing realm lookup, it
might be a CNAME which does not match anything we know about
@
text
@d78 1
a78 8
		char *cp;

		strncpy(ret_realm, &domain[1], REALM_SZ);
		ret_realm[REALM_SZ] = '\0';
		/* Upper-case realm */
		for (cp = ret_realm; *cp; cp++)
			if (islower(*cp))
				*cp = toupper(*cp);
d90 1
a90 1
                        return(ret_realm); /* krb_errno = KRB_NO_TRANS */
d97 1
a97 1
				return(ret_realm);
d107 1
a107 1
			return(ret_realm);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Source: /usr/src/kerberosIV/lib/krb/RCS/getrealm.c,v $
d31 1
d68 1
d70 3
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

