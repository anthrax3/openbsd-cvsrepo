head	1.11;
access;
symbols
	OPENBSD_2_6:1.10.0.6
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2000.02.25.15.15.01;	author hin;	state dead;
branches;
next	1.10;

1.10
date	98.07.07.19.06.49;	author art;	state Exp;
branches;
next	1.9;

1.9
date	98.02.25.15.51.09;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.12.22.15.02.05;	author art;	state Exp;
branches;
next	1.7;

1.7
date	97.12.12.05.30.21;	author art;	state Exp;
branches;
next	1.6;

1.6
date	97.12.09.07.57.16;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.11.28.12.49.00;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.08.18.03.11.21;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.11.54;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.02.05.10.06.40;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.39;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: get_in_tkt.c,v 1.10 1998/07/07 19:06:49 art Exp $	*/
/* $KTH: get_in_tkt.c,v 1.19 1997/10/03 21:51:42 joda Exp $ */ 

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
 *  Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 *  Export of this software from the United States of America is assumed
 *  to require a specific license from the United States Government.
 *  It is the responsibility of any person or organization contemplating
 *  export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

#include "krb_locl.h"

/*
 * This file contains three routines: passwd_to_key() and
 * passwd_to_afskey() converts a password into a DES key, using the
 * normal strinttokey and the AFS one, respectively, and
 * krb_get_pw_in_tkt() gets an initial ticket for a user.  
 */

/*
 * passwd_to_key() and passwd_to_afskey: given a password, return a DES key.
 */

int
passwd_to_key(char *user, char *instance, char *realm, void *passwd,
	      des_cblock *key)
{
#ifndef NOENCRYPTION
    des_string_to_key((char *)passwd, key);
#endif
    return 0;
}

int
passwd_to_5key(char *user, char *instance, char *realm, void *passwd, 
	       des_cblock *key)
{
    char *p;
    size_t len;
    len = k_mconcat (&p, 512, passwd, realm, user, instance, NULL);
    if(len == 0)
	return  -1;
    des_string_to_key(p, key);
    memset(p, 0, len);
    free(p);
    p = NULL;
    return 0;
}


int
passwd_to_afskey(char *user, char *instance, char *realm, void *passwd,
		  des_cblock *key)
{
#ifndef NOENCRYPTION
    afs_string_to_key((char *)passwd, realm, key);
#endif
    return (0);
}

/*
 * krb_get_pw_in_tkt() takes the name of the server for which the initial
 * ticket is to be obtained, the name of the principal the ticket is
 * for, the desired lifetime of the ticket, and the user's password.
 * It passes its arguments on to krb_get_in_tkt(), which contacts
 * Kerberos to get the ticket, decrypts it using the password provided,
 * and stores it away for future use.
 *
 * krb_get_pw_in_tkt() passes two additional arguments to krb_get_in_tkt():
 * the name of a routine (passwd_to_key()) to be used to get the
 * password in case the "password" argument is null and NULL for the
 * decryption procedure indicating that krb_get_in_tkt should use the 
 * default method of decrypting the response from the KDC.
 *
 * The result of the call to krb_get_in_tkt() is returned.
 */

int
krb_get_pw_in_tkt2(char *user, char *instance, char *realm, char *service,
		   char *sinstance, int life, char *password, des_cblock *key)
{
    char pword[100];		/* storage for the password */
    int code;

    /* Only request password once! */
    if (password == NULL) {
        if (des_read_pw_string(pword, sizeof(pword)-1, "Password: ", 0)){
	    memset(pword, 0, sizeof(pword));
	    return INTK_BADPW;
	}
        password = pword;
    }

    {
	KTEXT_ST as_rep;
	CREDENTIALS cred;
	int ret = 0;
	key_proc_t key_procs[] = { passwd_to_key, passwd_to_afskey, 
				   passwd_to_5key, NULL };
	key_proc_t *kp;
	
	code = krb_mk_as_req(user, instance, realm,
			     service, sinstance, life, &as_rep);
	if(code)
	    return code;
	for(kp = key_procs; *kp; kp++){
	    KTEXT_ST tmp;
	    memcpy(&tmp, &as_rep, sizeof(as_rep));
	    code = krb_decode_as_rep(user, instance, realm, service, sinstance, 
				     *kp, NULL, password, &tmp, &cred);
	    if(code == 0){
		if(key)
		    (**kp)(user, instance, realm, password, key);
		break;
	    }
	    if(code != INTK_BADPW)
		ret = code; /* this is probably a better code than
			       what code gets after this loop */
	}
	if(code)
	    return ret ? ret : code;

	code = tf_setup(&cred, user, instance);
    }
    if (password == pword)
        memset(pword, 0, sizeof(pword));
    return(code);
}

int
krb_get_pw_in_tkt(char *user, char *instance, char *realm, char *service,
                 char *sinstance, int life, char *password)
{
    return krb_get_pw_in_tkt2(user, instance, realm, 
			      service, sinstance, life, password, NULL);
}
@


1.10
log
@upgrade libkrb to 0.9.9
@
text
@d1 1
a1 1
/*	$OpenBSD: get_in_tkt.c,v 1.9 1998/02/25 15:51:09 art Exp $	*/
@


1.9
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 1
a1 1
/*	$OpenBSD: get_in_tkt.c,v 1.8 1997/12/22 15:02:05 art Exp $	*/
a162 1

@


1.8
log
@copyright cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: get_in_tkt.c,v 1.7 1997/12/12 05:30:21 art Exp $	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.7
log
@Another upgrade of kth-krb + many fixes of strcpys and unchecked pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD: get_in_tkt.c,v 1.6 1997/12/09 07:57:16 art Exp $	*/
d4 5
d10 19
a28 19
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */
@


1.6
log
@Removed one expliotable hole, one possibly exploitable hole, many buffer
overflows and lots of unchecked pointers. Tags are nice too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 2
a94 2
krb_get_pw_in_tkt(char *user, char *instance, char *realm, char *service,
		  char *sinstance, int life, char *password)
d125 3
a127 1
	    if(code == 0)
d129 1
d143 9
@


1.5
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 1
d60 1
d100 1
a100 1
    if (!password) {
@


1.4
log
@#include <string.h> not <strings.h> -- Yes, I'm a weanie...
@
text
@d1 1
a1 7
/*
 * This software may now be redistributed outside the US.
 *
 * $Source: /cvs/src/kerberosIV/krb/get_in_tkt.c,v $
 *
 * $Locker:  $
 */
d27 4
a30 4
 * This file contains two routines: passwd_to_key() converts
 * a password into a DES key (prompting for the password if
 * not supplied), and krb_get_pw_in_tkt() gets an initial ticket for
 * a user.
d34 1
a34 12
 * passwd_to_key(): given a password, return a DES key.
 * There are extra arguments here which (used to be?)
 * used by srvtab_to_key().
 *
 * If the "passwd" argument is not null, generate a DES
 * key from it, using string_to_key().
 *
 * If the "passwd" argument is null, call des_read_password()
 * to prompt for a password and then convert it into a DES key.
 *
 * In either case, the resulting key is put in the "key" argument,
 * and 0 is returned.
d37 3
a39 8
/*ARGSUSED */
static int
passwd_to_key(user, instance, realm, passwd, key)
	char *user;
	char *instance;
	char *realm;
	char *passwd;
	des_cblock *key;
d41 2
a42 8
#ifdef NOENCRYPTION
    if (!passwd)
	placebo_read_password(key, "Kerberos Password: ", 0);
#else
    if (passwd)
	des_string_to_key(passwd,key);
    else
	des_read_password(key,"Kerberos Password: ",0);
d44 16
a59 1
    return (0);
d62 4
a65 8
/*ARGSUSED */
static int
afs_passwd_to_key(user, instance, realm, passwd, key)
	char *user;
	char *instance;
	char *realm;
	char *passwd;
	des_cblock *key;
d67 3
a69 10
#ifdef NOENCRYPTION
    if (!passwd)
        placebo_read_password(key, "Kerberos Password: ", 0);
#else /* Do encyryption */
    if (passwd)
        afs_string_to_key(passwd, realm, key);
    else {
        des_read_password(key, "Kerberos Password: ", 0);
    }
#endif /* NOENCRYPTION */
d91 2
a92 8
krb_get_pw_in_tkt(user, instance, realm, service, sinstance, life, password)
	char *user;
	char *instance;
	char *realm;
	char *service;
	char *sinstance;
	int life;
	char *password;
d99 4
a102 2
        if (des_read_pw_string(pword, sizeof(pword)-1, "Kerberos Password: ", 0))
            pword[0] = '\0'; /* something wrong */
d106 25
a130 9
    code = krb_get_in_tkt(user,instance,realm,service,sinstance,life,
                          passwd_to_key, NULL, password);
    if (code != INTK_BADPW)
      goto done;

    code = krb_get_in_tkt(user,instance,realm,service,sinstance,life,
                          afs_passwd_to_key, NULL, password);
    if (code != INTK_BADPW)
      goto done;
d132 2
a133 1
  done:
d135 1
a135 1
        bzero(pword, sizeof(pword));
a137 171

#ifdef NOENCRYPTION
/*
 * $Source: /cvs/src/kerberosIV/krb/get_in_tkt.c,v $
 * $Author: millert $
 *
 * Copyright 1985, 1986, 1987, 1988 by the Massachusetts Institute
 * of Technology.
 *
 * For copying and distribution information, please see the file
 * <mit-copyright.h>.
 *
 * This routine prints the supplied string to standard
 * output as a prompt, and reads a password string without
 * echoing.
 */

#ifndef	lint
static char rcsid_read_password_c[] =
"Bones$Header: /cvs/src/kerberosIV/krb/get_in_tkt.c,v 1.3 1997/01/17 07:11:54 millert Exp $";
#endif /* lint */

#include <des.h>
#include "conf.h"

#include <stdio.h>
#include <string.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <setjmp.h>

static jmp_buf env;

static void sig_restore();
static push_signals(), pop_signals();
int placebo_read_pw_string();

/*** Routines ****************************************************** */
int
placebo_read_password(k,prompt,verify)
    des_cblock *k;
    char *prompt;
    int	verify;
{
    int ok;
    char key_string[BUFSIZ];

    if (setjmp(env)) {
	ok = -1;
	goto lose;
    }

    ok = placebo_read_pw_string(key_string, BUFSIZ, prompt, verify);
    if (ok == 0)
	bzero(k, sizeof(C_Block));

lose:
    bzero(key_string, sizeof (key_string));
    return ok;
}

/*
 * This version just returns the string, doesn't map to key.
 *
 * Returns 0 on success, non-zero on failure.
 */

int
placebo_read_pw_string(s,max,prompt,verify)
    char *s;
    int	max;
    char *prompt;
    int	verify;
{
    int ok = 0;
    char *ptr;
    
    jmp_buf old_env;
    struct sgttyb tty_state;
    char key_string[BUFSIZ];

    if (max > BUFSIZ) {
	return -1;
    }

    bcopy(old_env, env, sizeof(env));
    if (setjmp(env))
	goto lose;

    /* save terminal state*/
    if (ioctl(0,TIOCGETP,&tty_state) == -1) 
	return -1;

    push_signals();
    /* Turn off echo */
    tty_state.sg_flags &= ~ECHO;
    if (ioctl(0,TIOCSETP,&tty_state) == -1)
	return -1;
    while (!ok) {
	printf(prompt);
	fflush(stdout);
	if (!fgets(s, max, stdin)) {
	    clearerr(stdin);
	    continue;
	}
	if ((ptr = strchr(s, '\n')))
	    *ptr = '\0';
	if (verify) {
	    printf("\nVerifying, please re-enter %s",prompt);
	    fflush(stdout);
	    if (!fgets(key_string, sizeof(key_string), stdin)) {
		clearerr(stdin);
		continue;
	    }
            if ((ptr = strchr(key_string, '\n')))
	    *ptr = '\0';
	    if (strcmp(s,key_string)) {
		printf("\n\07\07Mismatch - try again\n");
		fflush(stdout);
		continue;
	    }
	}
	ok = 1;
    }

lose:
    if (!ok)
	bzero(s, max);
    printf("\n");
    /* turn echo back on */
    tty_state.sg_flags |= ECHO;
    if (ioctl(0,TIOCSETP,&tty_state))
	ok = 0;
    pop_signals();
    bcopy(env, old_env, sizeof(env));
    if (verify)
	bzero(key_string, sizeof (key_string));
    s[max-1] = 0;		/* force termination */
    return !ok;			/* return nonzero if not okay */
}

/*
 * this can be static since we should never have more than
 * one set saved....
 */
static RETSIGTYPE (*old_sigfunc[NSIG])();

static
push_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	old_sigfunc[i] = signal(i,sig_restore);
}

static
pop_signals()
{
    register i;
    for (i = 0; i < NSIG; i++)
	signal(i,old_sigfunc[i]);
}

static void
sig_restore(sig,code,scp)
    int sig,code;
    struct sigcontext *scp;
{
    longjmp(env,1);
}
#endif /* NOENCRYPTION */
@


1.3
log
@r?index -> strr?chr
@
text
@d153 1
a153 1
 * $Author: tholo $
d168 1
a168 1
"Bones$Header: /cvs/src/kerberosIV/krb/get_in_tkt.c,v 1.2 1996/02/05 10:06:40 tholo Exp $";
d175 1
a175 1
#include <strings.h>
@


1.2
log
@Let the user know he is being asked for a Kerberos ticket
@
text
@d168 1
a168 1
"Bones$Header: /cvs/src/kerberosIV/krb/get_in_tkt.c,v 1.1.1.1 1995/12/14 06:52:39 tholo Exp $";
d254 1
a254 1
	if ((ptr = index(s, '\n')))
d263 1
a263 1
            if ((ptr = index(key_string, '\n')))
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Source: /usr/src/kerberosIV/lib/krb/RCS/get_in_tkt.c,v $
d65 1
a65 1
	placebo_read_password(key, "Password: ", 0);
d70 1
a70 1
	des_read_password(key,"Password: ",0);
d86 1
a86 1
        placebo_read_password(key, "Password: ", 0);
d91 1
a91 1
        des_read_password(key, "Password: ", 0);
d129 1
a129 1
        if (des_read_pw_string(pword, sizeof(pword)-1, "Password: ", 0))
d152 2
a153 2
 * $Source: /usr/src/kerberosIV/lib/krb/RCS/get_in_tkt.c,v $
 * $Author: he $
d168 1
a168 1
"Bones$Header: /usr/src/kerberosIV/lib/krb/RCS/get_in_tkt.c,v 1.3 1995/08/10 16:26:57 he Exp $";
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

