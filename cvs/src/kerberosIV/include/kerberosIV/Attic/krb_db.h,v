head	1.5;
access;
symbols
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2000.02.25.15.14.47;	author hin;	state dead;
branches;
next	1.4;

1.4
date	98.02.25.15.50.42;	author art;	state Exp;
branches;
next	1.3;

1.3
date	98.02.18.11.53.43;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.08.22.40;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.35;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.35;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: krb_db.h,v 1.4 1998/02/25 15:50:42 art Exp $	*/
/* $KTH: krb_db.h,v 1.15 1996/12/17 20:34:32 assar Exp $ */

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 */

/*-
 * Copyright (C) 1987, 1988 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * spm		Project Athena  8/85 
 *
 * This file defines data structures for the kerberos
 * authentication/authorization database. 
 *
 * They MUST correspond to those defined in *.rel 
 */

#ifndef KRB_DB_DEFS
#define KRB_DB_DEFS

#include <stdio.h>

#define KERB_M_NAME		"K"	/* Kerberos */
#define KERB_M_INST		"M"	/* Master */
#define KERB_DEFAULT_NAME	"default"
#define KERB_DEFAULT_INST	""
#ifndef DB_DIR
#define DB_DIR			"/var/kerberos"
#endif
#ifndef DBM_FILE
#define	DBM_FILE		DB_DIR "/principal"
#endif

/* this also defines the number of queue headers */
#define KERB_DB_HASH_MODULO 64


/* Arguments to kerb_dbl_lock() */

#define KERB_DBL_EXCLUSIVE 1
#define KERB_DBL_SHARED 0

/* arguments to kerb_db_set_lockmode() */

#define KERB_DBL_BLOCKING 0
#define KERB_DBL_NONBLOCKING 1

/* arguments to kdb_get_master_key */

#define KDB_GET_PROMPT 1
#define KDB_GET_TWICE  2

/* Principal defines the structure of a principal's name */

typedef struct {
    char    name[ANAME_SZ];
    char    instance[INST_SZ];

    u_int32_t key_low;
    u_int32_t key_high;
    u_int32_t exp_date;
    char    exp_date_txt[DATE_SZ];
    u_int32_t mod_date;
    char    mod_date_txt[DATE_SZ];
    u_int16_t attributes;
    u_int8_t max_life;
    u_int8_t kdc_key_ver;
    u_int8_t key_version;

    char    mod_name[ANAME_SZ];
    char    mod_instance[INST_SZ];
    char   *old;		/* cast to (Principal *); not in db,
				 * ptr to old vals */
} Principal;

typedef struct {
    int32_t    cpu;
    int32_t    elapsed;
    int32_t    dio;
    int32_t    pfault;
    int32_t    t_stamp;
    int32_t    n_retrieve;
    int32_t    n_replace;
    int32_t    n_append;
    int32_t    n_get_stat;
    int32_t    n_put_stat;
} DB_stat;

/* Dba defines the structure of a database administrator */

typedef struct {
    char    name[ANAME_SZ];
    char    instance[INST_SZ];
    u_int16_t attributes;
    u_int32_t exp_date;
    char    exp_date_txt[DATE_SZ];
    char   *old;	/*
			 * cast to (Dba *); not in db, ptr to
			 * old vals
			 */
} Dba;

typedef int (*k_iter_proc_t)(void*, Principal*);

void copy_from_key __P((des_cblock in, u_int32_t *lo, u_int32_t *hi));
void copy_to_key __P((u_int32_t *lo, u_int32_t *hi, des_cblock out));

void kdb_encrypt_key __P((des_cblock *, des_cblock *, des_cblock *,
			  des_key_schedule, int));
int kdb_get_master_key __P((int prompt, des_cblock *master_key,
			    des_key_schedule master_key_sched));
int kdb_get_new_master_key __P((des_cblock *, des_key_schedule, int));
int kdb_kstash __P((des_cblock *, char *));
int kdb_new_get_master_key __P((des_cblock *, des_key_schedule));
int kdb_new_get_new_master_key __P((des_cblock *key, des_key_schedule schedule, int verify));
long kdb_verify_master_key __P((des_cblock *, des_key_schedule, FILE *));
long *kerb_db_begin_update __P((void));
int kerb_db_create __P((char *db_name));
int kerb_db_delete_principal (char *name, char *inst);
void kerb_db_end_update __P((long *db));
int kerb_db_get_dba __P((char *, char *, Dba *, unsigned, int *));
void kerb_db_get_stat __P((DB_stat *));
int kerb_db_iterate __P((k_iter_proc_t, void*));
int kerb_db_put_principal __P((Principal *, unsigned int));
void kerb_db_put_stat __P((DB_stat *));
int kerb_db_rename __P((char *, char *));
int kerb_db_set_lockmode __P((int));
int kerb_db_set_name __P((char *));
int kerb_db_update __P((long *db, Principal *principal, unsigned int max));
int kerb_delete_principal __P((char *name, char *inst));
void kerb_fini __P((void));
int kerb_get_dba __P((char *, char *, Dba *, unsigned int, int *));
time_t kerb_get_db_age __P((void));
int kerb_get_principal __P((char *, char *, Principal *, unsigned int, int *));
int kerb_init __P((void));
int kerb_put_principal __P((Principal *, unsigned int));

#endif /* KRB_DB_DEFS */
@


1.4
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 1
a1 1
/*	$OpenBSD: krb_db.h,v 1.3 1998/02/18 11:53:43 art Exp $	*/
@


1.3
log
@OpenBSD-tags and corrections of copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.2
log
@Another upgrade to kth-krb4-0.9.7
@
text
@d1 3
d5 5
a9 1
 * $KTH: krb_db.h,v 1.15 1996/12/17 20:34:32 assar Exp $ 
d11 4
a14 1
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology. 
d16 10
a25 2
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
d27 3
@


1.1
log
@Initial revision
@
text
@d1 7
a7 5
/*	$Id$	*/

/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
d9 1
a9 14
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */

/* spm		Project Athena  8/85 
d20 2
d26 6
d47 5
d73 1
a73 2
}
        Principal;
d86 1
a86 2
}
        DB_stat;
d100 1
a100 12
}
        Dba;

int kerb_get_principal __P((char *, char *, Principal *, unsigned int, int *));
int kerb_put_principal __P((Principal *, unsigned int));
void kerb_db_get_stat __P((DB_stat *));
void kerb_db_put_stat __P((DB_stat *));
int kerb_get_dba __P((char *, char *, Dba *, unsigned int, int *));
int kerb_db_get_dba __P(());
int kerb_init __P((void));
void kerb_fini __P((void));
time_t kerb_get_db_age __P((void));
d102 1
a102 2
void kdb_encrypt_key __P((des_cblock *, des_cblock *, des_cblock *, des_key_schedule, int));
int kerb_db_set_name __P((char *));
d104 2
a105 1
long kdb_get_master_key __P((int, des_cblock *, des_key_schedule));
d107 8
a114 1
#include <stdio.h>
d116 1
a116 1

d118 5
d124 1
a124 1
int kerb_db_iterate __P((int (*)(char *, Principal *), char *));
d127 9
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

