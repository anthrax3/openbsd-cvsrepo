head	1.5;
access;
symbols
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2000.02.25.15.14.58;	author hin;	state dead;
branches;
next	1.4;

1.4
date	98.07.13.20.08.55;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.12.05.30.16;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.11.28.12.48.47;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.51;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.51;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kinit.c,v 1.4 1998/07/13 20:08:55 art Exp $	*/
/*	$Id: kinit.c,v 1.4 1998/07/13 20:08:55 art Exp $	*/
/*      $KTH: kinit.c,v 1.15 1997/03/30 18:58:46 assar Exp $    */



/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */

/*
 * Routine to initialize user to Kerberos.  Prompts optionally for
 * user, instance and realm.  Authenticates user and gets a ticket
 * for the Kerberos ticket-granting service for future use. 
 *
 * Options are: 
 *
 *   -i[instance]
 *   -r[realm]
 *   -v[erbose]
 *   -l[ifetime]
 *   -p
 */

#include <kuser_locl.h>
#include <sys/param.h>

#define	LIFE	DEFAULT_TKT_LIFE /* lifetime of ticket in 5-minute units */
#define CHPASSLIFE 2

char progname[] = "kinit";

static void
get_input(char *s, int size, FILE *stream)
{
    char *p;

    if (fgets(s, size, stream) == NULL)
	exit(1);
    if ( (p = strchr(s, '\n')) != NULL)
	*p = '\0';
}

static void
usage(void)
{
    fprintf(stderr, "Usage: %s [-irvlp] [name]\n", progname);
    exit(1);
}

int
main(int argc, char **argv)
{
    char    aname[ANAME_SZ];
    char    inst[INST_SZ];
    char    realm[REALM_SZ];
    char    buf[MAXHOSTNAMELEN];
    char    name[MAX_K_NAME_SZ];
    char   *username = NULL;
    int     iflag, rflag, vflag, lflag, pflag, lifetime, k_errno;
    int	    i;

    *inst = *realm = '\0';
    iflag = rflag = vflag = lflag = pflag = 0;
    lifetime = LIFE;

    while (--argc) {
	if ((*++argv)[0] != '-') {
	    if (username)
		usage();
	    username = *argv;
	    continue;
	}
	for (i = 1; (*argv)[i] != '\0'; i++)
	    switch ((*argv)[i]) {
	    case 'i':		/* Instance */
		++iflag;
		continue;
	    case 'r':		/* Realm */
		++rflag;
		continue;
	    case 'v':		/* Verbose */
		++vflag;
		continue;
	    case 'l':
		++lflag;
		continue;
	    case 'p':
		++pflag;	/* chpass-tickets */
		lifetime = CHPASSLIFE;
		break;
	    default:
		usage();
	    }
    }
    if (username &&
	(k_errno = kname_parse(aname, inst, realm, username)) != KSUCCESS) {
	warnx("%s", krb_get_err_text(k_errno));
	iflag = rflag = 1;
	username = NULL;
    }
    if (gethostname(buf, sizeof(buf))) 
	errx(1, "gethostname failed");
    printf("%s (%s)\n", ORGANIZATION, buf);
    if (username) {
	printf("Kerberos Initialization for \"%s", aname);
	if (*inst)
	    printf(".%s", inst);
	if (*realm)
	    printf("@@%s", realm);
	printf("\"\n");
    } else {
	printf("Kerberos Initialization\n");
	printf("Kerberos name: ");
	get_input(name, sizeof(name), stdin);
	if (!*name)
	    return 0;
	if ((k_errno = kname_parse(aname, inst, realm, name)) != KSUCCESS )
	    errx(1, "%s", krb_get_err_text(k_errno));
    }
    /* optional instance */
    if (iflag) {
	printf("Kerberos instance: ");
	get_input(inst, sizeof(inst), stdin);
	if (!k_isinst(inst))
	    errx(1, "bad Kerberos instance format");
    }
    if (rflag) {
	printf("Kerberos realm: ");
	get_input(realm, sizeof(realm), stdin);
	if (!k_isrealm(realm))
	    errx(1, "bad Kerberos realm format");
    }
    if (lflag) {
	 printf("Kerberos ticket lifetime (minutes): ");
	 get_input(buf, sizeof(buf), stdin);
	 lifetime = atoi(buf);
	 if (lifetime < 5)
	      lifetime = 1;
	 else
	      lifetime = krb_time_to_life(0, lifetime*60);
	 /* This should be changed if the maximum ticket lifetime */
	 /* changes */
	 if (lifetime > 255)
	      lifetime = 255;
    }
    if (!*realm && krb_get_lrealm(realm, 1))
	errx(1, "krb_get_lrealm failed");
    k_errno = krb_get_pw_in_tkt(aname, inst, realm,
				pflag ? PWSERV_NAME : 
				KRB_TICKET_GRANTING_TICKET,
				pflag ? KADM_SINST  : realm,
				lifetime, 0);
    if (vflag) {
	printf("Kerberos realm %s:\n", realm);
	printf("%s\n", krb_get_err_text(k_errno));
    } else if (k_errno)
	errx(1, "%s", krb_get_err_text(k_errno));
    exit(0);
}
@


1.4
log
@use sizeof() instead of MAXHOSTNAMELEN in gethostname
@
text
@d1 2
a2 2
/*	$OpenBSD: kinit.c,v 1.3 1997/12/12 05:30:16 art Exp $	*/
/*	$Id: kinit.c,v 1.3 1997/12/12 05:30:16 art Exp $	*/
@


1.3
log
@Another upgrade of kth-krb + many fixes of strcpys and unchecked pointers.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$Id: kinit.c,v 1.2 1997/11/28 12:48:47 art Exp $	*/
d115 1
a115 1
    if (gethostname(buf, MAXHOSTNAMELEN)) 
@


1.2
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 2
a2 1
/*	$Id: kinit.c,v 1.1.1.1 1995/12/14 06:52:51 tholo Exp $	*/
d115 2
a116 2
    if (k_gethostname(buf, MAXHOSTNAMELEN)) 
	errx(1, "k_gethostname failed");
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
/*	$Id$	*/
d34 1
d41 1
d43 1
a43 1
char   *progname;
d46 1
a46 4
get_input(s, size, stream)
char *s;
int size;
FILE *stream;
d48 1
a48 1
	char *p;
d50 4
a53 4
	if (fgets(s, size, stream) == NULL)
	  exit(1);
	if ( (p = strchr(s, '\n')) != NULL)
		*p = '\0';
a55 1

d57 1
a57 1
usage()
d59 1
a59 1
    fprintf(stderr, "Usage: %s [-irvl] [name]\n", progname);
d64 1
a64 3
main(argc, argv)
    int argc;
    char   *argv[];
d70 1
d72 2
a73 3
    int     iflag, rflag, vflag, lflag, lifetime, k_errno;
    register char *cp;
    register i;
d76 1
a76 1
    iflag = rflag = vflag = lflag = 0;
a77 1
    progname = (cp = strrchr(*argv, '/')) ? cp + 1 : *argv;
d100 4
a105 1
		exit(1);
d109 2
a110 3
	(k_errno = kname_parse(aname, inst, realm, username))
	!= KSUCCESS) {
	fprintf(stderr, "%s: %s\n", progname, krb_err_txt[k_errno]);
d114 2
a115 4
    if (gethostname(buf, MAXHOSTNAMELEN)) {
	fprintf(stderr, "%s: gethostname failed\n", progname);
	exit(1);
    }
d127 5
a131 8
	get_input(aname, sizeof(aname), stdin);
	if (!*aname)
	    exit(0);
	if (!k_isname(aname)) {
	    fprintf(stderr, "%s: bad Kerberos name format\n",
		    progname);
	    exit(1);
	}
d137 2
a138 5
	if (!k_isinst(inst)) {
	    fprintf(stderr, "%s: bad Kerberos instance format\n",
		    progname);
	    exit(1);
	}
d143 2
a144 5
	if (!k_isrealm(realm)) {
	    fprintf(stderr, "%s: bad Kerberos realm format\n",
		    progname);
	    exit(1);
	}
d153 1
a153 1
	      lifetime /= krb_time_to_life(0, lifetime*60);
d159 6
a164 5
    if (!*realm && krb_get_lrealm(realm, 1)) {
	fprintf(stderr, "%s: krb_get_lrealm failed\n", progname);
	exit(1);
    }
    k_errno = krb_get_pw_in_tkt(aname, inst, realm, "krbtgt", realm,
d168 3
a170 5
	printf("%s\n", krb_err_txt[k_errno]);
    } else if (k_errno) {
	fprintf(stderr, "%s: %s\n", progname, krb_err_txt[k_errno]);
	exit(1);
    }
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
