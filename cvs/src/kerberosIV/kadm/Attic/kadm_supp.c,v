head	1.4;
access;
symbols
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2000.02.25.15.14.48;	author hin;	state dead;
branches;
next	1.3;

1.3
date	97.12.12.10.02.46;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.04.47.00;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.46;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.46;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kadm_supp.c,v 1.3 1997/12/12 10:02:46 art Exp $	*/
/* $KTH: kadm_supp.c,v 1.8 1997/05/02 10:27:58 joda Exp $ */

/* 
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */

/*
 * Support functions for Kerberos administration server & clients
 */

/*
  kadm_supp.c
  this holds the support routines for the kerberos administration server

    error: prints out a kadm error message, returns
    fatal: prints out a kadm fatal error message, exits
    prin_vals: prints out data associated with a Principal in the vals
           structure
*/

#include "kadm_locl.h"
    
/*
prin_vals:
  recieves    : a vals structure
*/
void
prin_vals(Kadm_vals *vals)
{
    printf("Info in Database for %s.%s:\n", vals->name, vals->instance);
    printf("   Max Life: %d (%s)   Exp Date: %s\n",
	   vals->max_life,
	   krb_life_to_atime(vals->max_life), 
	   asctime(k_localtime(&vals->exp_date)));
    printf("   Attribs: %.2x  key: %#lx %#lx\n",
	   vals->attributes,
	   (long)vals->key_low, (long)vals->key_high);
}

/* kadm_prin_to_vals takes a fields arguments, a Kadm_vals and a Principal,
   it copies the fields in Principal specified by fields into Kadm_vals, 
   i.e from old to new */

void
kadm_prin_to_vals(u_char *fields, Kadm_vals *new, Principal *old)
{
    if (new == NULL)
	return;

    memset(new, 0, sizeof(*new));
    if (IS_FIELD(KADM_NAME,fields)) {
	strncpy(new->name, old->name, ANAME_SZ - 1); 
	new->name[ANAME_SZ - 1] = '\0';
	SET_FIELD(KADM_NAME, new->fields);
    }
    if (IS_FIELD(KADM_INST,fields)) {
	strncpy(new->instance, old->instance, INST_SZ - 1);
	new->instance[INST_SZ - 1] = '\0';
	SET_FIELD(KADM_INST, new->fields);
    }      
    if (IS_FIELD(KADM_EXPDATE,fields)) {
	new->exp_date   = old->exp_date; 
	SET_FIELD(KADM_EXPDATE, new->fields);
    }      
    if (IS_FIELD(KADM_ATTR,fields)) {
	new->attributes = old->attributes; 
	SET_FIELD(KADM_ATTR, new->fields);
    }      
    if (IS_FIELD(KADM_MAXLIFE,fields)) {
	new->max_life   = old->max_life; 
	SET_FIELD(KADM_MAXLIFE, new->fields);
    }      
    if (IS_FIELD(KADM_DESKEY,fields)) {
	new->key_low    = old->key_low; 
	new->key_high   = old->key_high; 
	SET_FIELD(KADM_DESKEY, new->fields);
    }
}

void
kadm_vals_to_prin(u_char *fields, Principal *new, Kadm_vals *old)
{
    if (new == NULL)
	return;
    
    memset(new, 0, sizeof(*new));
    if (IS_FIELD(KADM_NAME,fields)) {
	strncpy(new->name, old->name, ANAME_SZ); 
	new->name[ANAME_SZ - 1] = '\0';
    }
    if (IS_FIELD(KADM_INST,fields)) {
	strncpy(new->instance, old->instance, INST_SZ); 
	new->instance[KADM_INST - 1] = '\0';
    }
    if (IS_FIELD(KADM_EXPDATE,fields))
	new->exp_date   = old->exp_date; 
    if (IS_FIELD(KADM_ATTR,fields))
	new->attributes = old->attributes; 
    if (IS_FIELD(KADM_MAXLIFE,fields))
	new->max_life   = old->max_life; 
    if (IS_FIELD(KADM_DESKEY,fields)) {
	new->key_low    = old->key_low; 
	new->key_high   = old->key_high; 
    }
}
@


1.3
log
@Clean up, check pointers, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@Another minimal upgrade to kth-krb4-0.9.7.
@
text
@d1 1
d48 8
a55 8
   printf("Info in Database for %s.%s:\n", vals->name, vals->instance);
   printf("   Max Life: %d (%s)   Exp Date: %s\n",
	  vals->max_life,
	  krb_life_to_atime(vals->max_life), 
	  asctime(k_localtime(&vals->exp_date)));
   printf("   Attribs: %.2x  key: %#lx %#lx\n",
	  vals->attributes,
	  (long)vals->key_low, (long)vals->key_high);
d65 31
a95 26
  memset(new, 0, sizeof(*new));
  if (IS_FIELD(KADM_NAME,fields)) {
      strncpy(new->name, old->name, ANAME_SZ); 
      SET_FIELD(KADM_NAME, new->fields);
  }
  if (IS_FIELD(KADM_INST,fields)) {
      strncpy(new->instance, old->instance, INST_SZ); 
      SET_FIELD(KADM_INST, new->fields);
  }      
  if (IS_FIELD(KADM_EXPDATE,fields)) {
      new->exp_date   = old->exp_date; 
      SET_FIELD(KADM_EXPDATE, new->fields);
  }      
  if (IS_FIELD(KADM_ATTR,fields)) {
    new->attributes = old->attributes; 
      SET_FIELD(KADM_ATTR, new->fields);
  }      
  if (IS_FIELD(KADM_MAXLIFE,fields)) {
    new->max_life   = old->max_life; 
      SET_FIELD(KADM_MAXLIFE, new->fields);
  }      
  if (IS_FIELD(KADM_DESKEY,fields)) {
    new->key_low    = old->key_low; 
    new->key_high   = old->key_high; 
    SET_FIELD(KADM_DESKEY, new->fields);
  }
d101 22
a122 16

  memset(new, 0, sizeof(*new));
  if (IS_FIELD(KADM_NAME,fields))
    strncpy(new->name, old->name, ANAME_SZ); 
  if (IS_FIELD(KADM_INST,fields))
    strncpy(new->instance, old->instance, INST_SZ); 
  if (IS_FIELD(KADM_EXPDATE,fields))
    new->exp_date   = old->exp_date; 
  if (IS_FIELD(KADM_ATTR,fields))
    new->attributes = old->attributes; 
  if (IS_FIELD(KADM_MAXLIFE,fields))
    new->max_life   = old->max_life; 
  if (IS_FIELD(KADM_DESKEY,fields)) {
    new->key_low    = old->key_low; 
    new->key_high   = old->key_high; 
  }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d3 20
a22 19
/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
d38 1
a38 1
#include "kadm_local.h"
d45 1
a45 2
prin_vals(vals)
	Kadm_vals *vals;
d52 1
a52 1
   printf("   Attribs: %.2x  key: %lu %lu\n",
a56 9
#ifdef notdef
nierror(s)
int s;
{
    printf("Kerberos admin server loses..... %s\n",error_message(s));
    return(s);
}
#endif

d62 1
a62 4
kadm_prin_to_vals(fields, new, old)
	u_char *fields;
	Kadm_vals *new;
	Principal *old;
d64 1
a64 1
  bzero((char *)new, sizeof(*new));
d66 1
a66 1
      (void) strncpy(new->name, old->name, ANAME_SZ); 
d70 1
a70 1
      (void) strncpy(new->instance, old->instance, INST_SZ); 
d93 1
a93 4
kadm_vals_to_prin(fields, new, old)
	u_char *fields;
	Principal *new;
	Kadm_vals *old;
d96 1
a96 1
  bzero((char *)new, sizeof(*new));
d98 1
a98 1
    (void) strncpy(new->name, old->name, ANAME_SZ); 
d100 1
a100 1
    (void) strncpy(new->instance, old->instance, INST_SZ); 
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
