head	1.6;
access;
symbols
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2000.02.25.15.14.48;	author hin;	state dead;
branches;
next	1.5;

1.5
date	98.08.16.02.42.06;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.12.10.02.47;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.10.10.37.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.04.46.59;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.45;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.45;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kadm_stream.c,v 1.5 1998/08/16 02:42:06 art Exp $	*/
/*	$KTH: kadm_stream.c,v 1.11 1997/05/02 10:28:05 joda Exp $	*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 *
 */

/* 
  Copyright (C) 1989 by the Massachusetts Institute of Technology

   Export of this software from the United States of America is assumed
   to require a specific license from the United States Government.
   It is the responsibility of any person or organization contemplating
   export to obtain such a license before exporting.

WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
distribute this software and its documentation for any purpose and
without fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright notice and
this permission notice appear in supporting documentation, and that
the name of M.I.T. not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.  M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is" without express
or implied warranty.

  */

/*
 * Stream conversion functions for Kerberos administration server
 */

/*
 *  kadm_stream.c
 *  this holds the stream support routines for the kerberos administration
 *  server
 *
 *   vals_to_stream: converts a vals struct to a stream for transmission
 *     internals build_field_header, vts_[string, char, long, short]
 *   stream_to_vals: converts a stream to a vals struct
 *     internals check_field_header, stv_[string, char, long, short]
 *  error: prints out a kadm error message, returns
 *  fatal: prints out a kadm fatal error message, exits
 */

#include "kadm_locl.h"

static int
build_field_header(u_char *cont, u_char **st)
             			/* container for fields data */
            			/* stream */
{
    *st = (u_char *) malloc (4);
    if (st == NULL)
	return -1;
    memcpy(*st, cont, 4);
    return 4;			/* return pointer to current stream location */
}

static int
check_field_header(u_char *st, u_char *cont, int maxlen)
           			/* stream */
             			/* container for fields data */
           
{
    if (maxlen < 4 || cont == NULL || st == NULL) 
	return(-1);
    memcpy(cont, st, 4);
    return 4;			/* return pointer to current stream location */
}

int
vts_string(char *dat, u_char **st, int loc)
          			/* a string to put on the stream */
            			/* base pointer to the stream */
        			/* offset into the stream for current data */
{
    u_char *temp;

    temp = (u_char *) realloc (*st, (unsigned) (loc + strlen(dat) + 1));
    if (temp == NULL) {
        free(*st);
	return -1;
    }
    *st = temp;

    memcpy(*st + loc, dat, strlen(dat)+1);
    return strlen(dat)+1;
}


static int
vts_short(u_int16_t dat, u_char **st, int loc)
            			/* the attributes field */
            			/* a base pointer to the stream */
        			/* offset into the stream for current data */
{
    unsigned char *p;

    p = realloc(*st, loc + 2);
    if (p == NULL) {
	abort();
    }
    p[loc] = (dat >> 8) & 0xff;
    p[loc+1] = dat & 0xff;
    *st = p;
    return 2;
}

static int
vts_char(u_char dat, u_char **st, int loc)
           			/* the attributes field */
            			/* a base pointer to the stream */
        			/* offset into the stream for current data */
{
    unsigned char *p = realloc(*st, loc + 1);
    if (p == NULL) {
	abort();
    }
    p[loc] = dat;
    *st = p;
    return 1;
}

int
vts_long(u_int32_t dat, u_char **st, int loc)
           			/* the attributes field */
            			/* a base pointer to the stream */
        			/* offset into the stream for current data */
{
    unsigned char *p = realloc(*st, loc + 4);
    if(p == NULL){
	abort();
    }
    p[loc] = (dat >> 24) & 0xff;
    p[loc+1] = (dat >> 16) & 0xff;
    p[loc+2] = (dat >> 8) & 0xff;
    p[loc+3] = dat & 0xff;
    *st = p;
    return 4;
}
    
#ifndef min
#define	min(a,b)	(a < b ? a : b)
#endif

int
stv_string(u_char *st,		/* base pointer to the stream */
	   char *dat,		/* a string to read from the stream */
	   int loc,		/* offset into the stream for current data */
	   int stlen,		/* max length of string to copy in */
	   int maxlen)		/* max length of input stream */
{
    int maxcount;			  /* max count of chars to copy */
    
    maxcount = min(maxlen - loc, stlen);
    
    if(maxcount <= 0)
	return -1;
    
    strncpy(dat, (char *)st + loc, maxcount);
    
    if (dat[maxcount - 1]) /* not null-term --> not enough room */
	return -1;
    return strlen(dat)+1;
}

static int
stv_short(u_char *st, u_int16_t *dat, int loc, int maxlen)
           			/* a base pointer to the stream */
             			/* the attributes field */
        			/* offset into the stream for current data */
           
{
    if (maxlen - loc < 2)
	return -1;
    
    *dat = (st[loc] << 8) | st[loc + 1];
    return 2;
}

int
stv_long(u_char *st, u_int32_t *dat, int loc, int maxlen)
           			/* a base pointer to the stream */
            			/* the attributes field */
        			/* offset into the stream for current data */
           			/* maximum length of st */
{
    if (maxlen - loc < 4)
	return -1;
  
    *dat = (st[loc] << 24) | (st[loc+1] << 16) | (st[loc+2] << 8) | st[loc+3];
    return 4;
}
    
static int
stv_char(u_char *st, u_char *dat, int loc, int maxlen)
           			/* a base pointer to the stream */
            			/* the attributes field */
        			/* offset into the stream for current data */
           
{
    if (maxlen - loc < 1)
	return -1;
  
    *dat = st[loc];
    return 1;
}

/* 
 *  vals_to_stream
 *    recieves    : kadm_vals *, u_char *
 *    returns     : a realloced and filled in u_char *
 *    
 *  this function creates a byte-stream representation of the kadm_vals 
 *  structure
 */

int
vals_to_stream(Kadm_vals *dt_in, u_char **dt_out)
{
    int vsloop, stsize, stsizetemp;		/* loop counter, stream size */
    
    stsize = build_field_header(dt_in->fields, dt_out);
    if (stsize < 0)
	return -1;
    
    for (vsloop=31; vsloop>=0; vsloop--)
	if (IS_FIELD(vsloop, dt_in->fields)) {
	    switch (vsloop) {
	    case KADM_NAME:
		stsizetemp = vts_string(dt_in->name, dt_out, stsize);
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    case KADM_INST:
		stsizetemp = vts_string(dt_in->instance, dt_out, stsize);
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    case KADM_EXPDATE:
		stsizetemp = vts_long(dt_in->exp_date, dt_out, stsize);
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    case KADM_ATTR:
		stsizetemp = vts_short(dt_in->attributes, dt_out, stsize);
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    case KADM_MAXLIFE:
		stsizetemp = vts_char(dt_in->max_life, dt_out, stsize);
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    case KADM_DESKEY: 
		stsizetemp = vts_long(dt_in->key_high, dt_out, stsize); 
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		stsizetemp = vts_long(dt_in->key_low, dt_out, stsize); 
		if (stsizetemp < 0)
		    return -1;
		stsize += stsizetemp;
		break;
	    default:
		break;
	    }
	}
    return(stsize);
}  

/* 
 * stream_to_vals
 *  recieves    : u_char *, kadm_vals *
 *  returns     : a kadm_vals filled in according to u_char *
 * 
 * this decodes a byte stream represntation of a vals struct into kadm_vals
 */
int
stream_to_vals(u_char *dt_in, Kadm_vals *dt_out, int maxlen)
              
                  
           				/* max length to use */
{
    int vsloop, stsize;		/* loop counter, stream size */
    int status;
    
    memset(dt_out, 0, sizeof(*dt_out));
    
    stsize = check_field_header(dt_in, dt_out->fields, maxlen);
    if (stsize < 0)
	return(-1);
    for (vsloop=31; vsloop>=0; vsloop--)
	if (IS_FIELD(vsloop,dt_out->fields))
	    switch (vsloop) {
	    case KADM_NAME:
		if ((status = stv_string(dt_in, dt_out->name, stsize,
					 sizeof(dt_out->name), maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    case KADM_INST:
		if ((status = stv_string(dt_in, dt_out->instance, stsize,
					 sizeof(dt_out->instance), maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    case KADM_EXPDATE:
		if ((status = stv_long(dt_in, &dt_out->exp_date, stsize,
				       maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    case KADM_ATTR:
		if ((status = stv_short(dt_in, &dt_out->attributes, stsize,
					maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    case KADM_MAXLIFE:
		if ((status = stv_char(dt_in, &dt_out->max_life, stsize,
				       maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    case KADM_DESKEY:
		if ((status = stv_long(dt_in, &dt_out->key_high, stsize,
				       maxlen)) < 0)
		    return(-1);
		stsize += status;
		if ((status = stv_long(dt_in, &dt_out->key_low, stsize,
				       maxlen)) < 0)
		    return(-1);
		stsize += status;
		break;
	    default:
		break;
	    }
    return stsize;
}  
@


1.5
log
@realloc fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: kadm_stream.c,v 1.4 1997/12/12 10:02:47 art Exp $	*/
@


1.4
log
@Clean up, check pointers, etc.
@
text
@d1 14
a14 2
/*	$OpenBSD$	*/
/* $KTH: kadm_stream.c,v 1.11 1997/05/02 10:28:05 joda Exp $ */
d86 5
a90 2
    *st = (u_char *) realloc (*st, (unsigned) (loc + strlen(dat) + 1));
    if (*st == NULL)
d92 3
d107 1
d109 1
a109 1
    if(p == NULL){
d125 1
a125 1
    if(p == NULL){
@


1.3
log
@do not assume min() is defined
@
text
@d1 1
d30 11
a40 10
  kadm_stream.c
  this holds the stream support routines for the kerberos administration server

    vals_to_stream: converts a vals struct to a stream for transmission
       internals build_field_header, vts_[string, char, long, short]
    stream_to_vals: converts a stream to a vals struct
       internals check_field_header, stv_[string, char, long, short]
    error: prints out a kadm error message, returns
    fatal: prints out a kadm fatal error message, exits
*/
d49 5
a53 3
  *st = (u_char *) malloc (4);
  memcpy(*st, cont, 4);
  return 4;			/* return pointer to current stream location */
d62 4
a65 4
  if (4 > maxlen)
      return(-1);
  memcpy(cont, st, 4);
  return 4;			/* return pointer to current stream location */
d74 5
a78 3
  *st = (u_char *) realloc (*st, (unsigned) (loc + strlen(dat) + 1));
  memcpy(*st + loc, dat, strlen(dat)+1);
  return strlen(dat)+1;
d143 12
a154 12
  int maxcount;				/* max count of chars to copy */

  maxcount = min(maxlen - loc, stlen);

  if(maxcount <= 0)
      return -1;

  strncpy(dat, (char *)st + loc, maxcount);

  if (dat[maxcount-1]) /* not null-term --> not enuf room */
      return(-1);
  return strlen(dat)+1;
d164 5
a168 5
  if (maxlen - loc < 2)
      return -1;
  
  *dat = (st[loc] << 8) | st[loc + 1];
  return 2;
d178 2
a179 2
  if (maxlen - loc < 4)
      return -1;
d181 2
a182 2
  *dat = (st[loc] << 24) | (st[loc+1] << 16) | (st[loc+2] << 8) | st[loc+3];
  return 4;
d192 2
a193 2
  if (maxlen - loc < 1)
      return -1;
d195 2
a196 2
  *dat = st[loc];
  return 1;
d200 8
a207 6
vals_to_stream
  recieves    : kadm_vals *, u_char *
  returns     : a realloced and filled in u_char *
     
this function creates a byte-stream representation of the kadm_vals structure
*/
d211 54
a264 30
  int vsloop, stsize;		/* loop counter, stream size */

  stsize = build_field_header(dt_in->fields, dt_out);
  for (vsloop=31; vsloop>=0; vsloop--)
    if (IS_FIELD(vsloop,dt_in->fields)) {
      switch (vsloop) {
      case KADM_NAME:
	  stsize+=vts_string(dt_in->name, dt_out, stsize);
	  break;
      case KADM_INST:
	  stsize+=vts_string(dt_in->instance, dt_out, stsize);
	  break;
      case KADM_EXPDATE:
	  stsize+=vts_long(dt_in->exp_date, dt_out, stsize);
	  break;
      case KADM_ATTR:
	  stsize+=vts_short(dt_in->attributes, dt_out, stsize);
	  break;
      case KADM_MAXLIFE:
	  stsize+=vts_char(dt_in->max_life, dt_out, stsize);
	  break;
      case KADM_DESKEY: 
	  stsize+=vts_long(dt_in->key_high, dt_out, stsize); 
	  stsize+=vts_long(dt_in->key_low, dt_out, stsize); 
	  break;
      default:
	  break;
      }
}
  return(stsize);
d268 6
a273 6
stream_to_vals
  recieves    : u_char *, kadm_vals *
  returns     : a kadm_vals filled in according to u_char *
     
this decodes a byte stream represntation of a vals struct into kadm_vals
*/
d280 55
a334 55
  int vsloop, stsize;		/* loop counter, stream size */
  int status;

  memset(dt_out, 0, sizeof(*dt_out));

  stsize = check_field_header(dt_in, dt_out->fields, maxlen);
  if (stsize < 0)
      return(-1);
  for (vsloop=31; vsloop>=0; vsloop--)
    if (IS_FIELD(vsloop,dt_out->fields))
      switch (vsloop) {
      case KADM_NAME:
	  if ((status = stv_string(dt_in, dt_out->name, stsize,
				   sizeof(dt_out->name), maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      case KADM_INST:
	  if ((status = stv_string(dt_in, dt_out->instance, stsize,
				   sizeof(dt_out->instance), maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      case KADM_EXPDATE:
	  if ((status = stv_long(dt_in, &dt_out->exp_date, stsize,
				 maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      case KADM_ATTR:
	  if ((status = stv_short(dt_in, &dt_out->attributes, stsize,
				  maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      case KADM_MAXLIFE:
	  if ((status = stv_char(dt_in, &dt_out->max_life, stsize,
				 maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      case KADM_DESKEY:
	  if ((status = stv_long(dt_in, &dt_out->key_high, stsize,
				    maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  if ((status = stv_long(dt_in, &dt_out->key_low, stsize,
				    maxlen)) < 0)
	      return(-1);
	  stsize += status;
	  break;
      default:
	  break;
      }
  return stsize;
@


1.2
log
@Another minimal upgrade to kth-krb4-0.9.7.
@
text
@d126 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d3 20
a22 19
/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
d40 1
a40 3
#include "kadm_local.h"

#define min(a,b) (((a) < (b)) ? (a) : (b))
d43 3
a45 3
build_field_header(cont, st)
	u_char *cont;		/* container for fields data */
	u_char **st;		/* stream */
d48 1
a48 1
  bcopy((char *) cont, (char *) *st, 4);
d53 4
a56 4
check_field_header(st, cont, maxlen)
	u_char *st;		/* stream */
	u_char *cont;		/* container for fields data */
	int maxlen;
d60 1
a60 1
  bcopy((char *) st, (char *) cont, 4);
d64 5
a68 5
static int
vts_string(dat, st, loc)
	char *dat;		/* a string to put on the stream */
	u_char **st;		/* base pointer to the stream */
	int loc;		/* offset into the stream for current data */
d70 2
a71 2
  *st = (u_char *) realloc ((char *)*st, (unsigned) (loc + strlen(dat) + 1));
  bcopy(dat, (char *)(*st + loc), strlen(dat)+1);
d77 14
a90 11
vts_short(dat, st, loc)
	u_int16_t dat;		/* the attributes field */
	u_char **st;		/* a base pointer to the stream */
	int loc;		/* offset into the stream for current data */
{
  u_int16_t temp;			/* to hold the net order short */

  temp = htons(dat);		/* convert to network order */
  *st = (u_char *) realloc ((char *)*st, (unsigned)(loc + sizeof(u_int16_t)));
  bcopy((char *) &temp, (char *)(*st + loc), sizeof(u_int16_t));
  return sizeof(u_int16_t);
d94 12
a105 8
vts_char(dat, st, loc)
	u_char dat;		/* the attributes field */
	u_char **st;		/* a base pointer to the stream */
	int loc;		/* offset into the stream for current data */
{
  *st = (u_char *) realloc ((char *)*st, (unsigned)(loc + sizeof(u_char)));
  (*st)[loc] = (u_char) dat;
  return 1;
d109 15
a123 11
vts_long(dat, st, loc)
	u_int32_t dat;		/* the attributes field */
	u_char **st;		/* a base pointer to the stream */
	int loc;		/* offset into the stream for current data */
{
  u_int32_t temp;			/* to hold the net order short */

  temp = htonl(dat);		/* convert to network order */
  *st = (u_char *) realloc ((char *)*st, (unsigned)(loc + sizeof(u_int32_t)));
  bcopy((char *) &temp, (char *)(*st + loc), sizeof(u_int32_t));
  return sizeof(u_int32_t);
d126 6
a131 7
static int
stv_string(st, dat, loc, stlen, maxlen)
	register u_char *st;	/* base pointer to the stream */
	char *dat;		/* a string to read from the stream */
	register int loc;	/* offset into the stream for current data */
	int stlen;		/* max length of string to copy in */
	int maxlen;		/* max length of input stream */
d137 4
a140 1
  (void) strncpy(dat, (char *)st + loc, maxcount);
d148 11
a158 14
stv_short(st, dat, loc, maxlen)
	u_char *st;		/* a base pointer to the stream */
        u_int16_t *dat;		/* the attributes field */
	int loc;		/* offset into the stream for current data */
	int maxlen;
{
  u_int16_t temp;			/* to hold the net order short */

  if (loc + sizeof(temp) > maxlen)
      return(-1);
  /*bcopy((char *)((u_long)st+(u_long)loc), (char *) &temp, sizeof(u_short));*/
  bcopy(st + loc, (char *) &temp, sizeof(temp));
  *dat = ntohs(temp);		/* convert to network order */
  return sizeof(temp);
d162 11
a172 14
stv_long(st, dat, loc, maxlen)
	u_char *st;		/* a base pointer to the stream */
	u_int32_t *dat;		/* the attributes field */
	int loc;		/* offset into the stream for current data */
	int maxlen;		/* maximum length of st */
{
  u_int32_t temp;			/* to hold the net order short */

  if (loc + sizeof(temp) > maxlen)
      return(-1);
  /*bcopy((char *)((u_long)st+(u_long)loc), (char *) &temp, sizeof(u_long));*/
  bcopy(st + loc, (char *) &temp, sizeof(temp));
  *dat = ntohl(temp);		/* convert to network order */
  return sizeof(temp);
d176 10
a185 9
stv_char(st, dat, loc, maxlen)
	u_char *st;		/* a base pointer to the stream */
	u_char *dat;		/* the attributes field */
	int loc;		/* offset into the stream for current data */
	int maxlen;
{
  if (loc + 1 > maxlen)
      return(-1);
  *dat = *(st + loc);
d197 1
a197 3
vals_to_stream(dt_in, dt_out)
	Kadm_vals *dt_in;
	u_char **dt_out;
d239 4
a242 4
stream_to_vals(dt_in, dt_out, maxlen)
	u_char *dt_in;
	Kadm_vals *dt_out;
	int maxlen;		/* max length to use */
d244 2
a245 2
  register int vsloop, stsize;		/* loop counter, stream size */
  register int status;
d247 1
a247 1
  bzero((char *) dt_out, sizeof(*dt_out));
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
