head	1.4;
access;
symbols
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	KRB4_1_1_1:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	KRB4_1_0_8:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	KRB4_1_0_4:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	KRB4_1_0_2:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.05.16.18.45.37;	author mho;	state dead;
branches;
next	1.3;

1.3
date	2002.06.08.21.49.01;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.03.10.17;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.15.35.01;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.35.01;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.08.21.07.36;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@/*
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "kuser_locl.h"
#include <kafs.h>
#include <getarg.h>

RCSID("$KTH: kdestroy.c,v 1.19 2001/02/20 23:07:55 assar Exp $");

int ticket_flag = -1;
int unlog_flag  = -1;
int quiet_flag;
int help_flag;
int version_flag;

struct getargs args[] = {
    { "quiet", 		'q',	arg_flag, 	&quiet_flag, 
      "don't print any messages" },
    { NULL, 		'f',	arg_flag, 	&quiet_flag },
    { "tickets",	't',	arg_flag,       &ticket_flag,
    "destroy tickets" },
    { "unlog",          'u',    arg_flag,       &unlog_flag,
      "destroy AFS tokens" },
    { "version", 	0,	arg_flag,	&version_flag },
    { "help",		'h',	arg_flag,	&help_flag }
};

int num_args = sizeof(args) / sizeof(args[0]);

static void
usage(int code)
{
    arg_printusage(args, num_args, NULL, "");
    exit(code);
}

int
main(int argc, char **argv)
{
    int optind = 0;
    int ret = RET_TKFIL;

    if (getarg(args, num_args, argc, argv, &optind))
	usage(1);

    if (unlog_flag == -1 && ticket_flag == -1) {
      ticket_flag = 1;
#ifdef LEGACY_KDESTROY
      unlog_flag = 0;
#else
      unlog_flag = (getenv("LEGACY_KDESTROY") != 0) ? 0 : 1;
#endif
    }
    else if (unlog_flag == -1)
      unlog_flag = 0;
    else if (ticket_flag == -1)
      ticket_flag = 0;

    if (help_flag)
	usage(0);

    if (version_flag) {
	print_version(NULL);
	exit(0);
    }
    
    if (ticket_flag)
        ret = dest_tkt();

    if (unlog_flag && k_hasafs())
	k_unlog();

    if (!quiet_flag) {
	if (ret == KSUCCESS)
	    printf("Tickets destroyed.\n");
	else if (ret == RET_TKFIL)
	    printf("No tickets to destroy.\n");
	else {
	    printf("Tickets NOT destroyed.\n");
	}
    }

    if (ret == KSUCCESS || ret == RET_TKFIL)
	return 0;
    else
	return 1;
}
@


1.3
log
@Merge krb4-1.1.1
@
text
@@


1.2
log
@set_progname/get_progname cleanup
@
text
@d38 1
a38 1
RCSID("$KTH: kdestroy.c,v 1.17 1999/12/02 16:58:36 joda Exp $");
a39 4
#ifdef LEGACY_KDESTROY
int ticket_flag = 1;
int unlog_flag  = 0;
#else
a41 1
#endif
d73 1
a73 1
    if(getarg(args, num_args, argc, argv, &optind))
d76 14
a89 1
    if(help_flag)
d92 1
a92 1
    if(version_flag) {
a96 3
    if (unlog_flag == -1 && ticket_flag == -1)
        unlog_flag = ticket_flag = 1;

@


1.1
log
@Initial revision
@
text
@a77 1
    set_progname(argv[0]);
@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@


1.1.1.2
log
@Import of krb4-1.1.1
@
text
@d38 1
a38 1
RCSID("$KTH: kdestroy.c,v 1.19 2001/02/20 23:07:55 assar Exp $");
d40 4
d46 1
d78 2
a79 2
    setprogname(argv[0]);
    if (getarg(args, num_args, argc, argv, &optind))
d82 1
a82 14
    if (unlog_flag == -1 && ticket_flag == -1) {
      ticket_flag = 1;
#ifdef LEGACY_KDESTROY
      unlog_flag = 0;
#else
      unlog_flag = (getenv("LEGACY_KDESTROY") != 0) ? 0 : 1;
#endif
    }
    else if (unlog_flag == -1)
      unlog_flag = 0;
    else if (ticket_flag == -1)
      ticket_flag = 0;

    if (help_flag)
d85 1
a85 1
    if (version_flag) {
d90 3
@

