head	1.4;
access;
symbols
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	KRB4_1_1_1:1.1.1.4
	OPENBSD_3_1:1.1.1.3.0.6
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.4
	OPENBSD_3_0_BASE:1.1.1.3
	KRB4_1_0_8:1.1.1.3
	OPENBSD_2_9:1.1.1.3.0.2
	OPENBSD_2_9_BASE:1.1.1.3
	KRB4_1_0_4:1.1.1.3
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	KRB4_1_0_2:1.1.1.2
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.05.16.18.45.34;	author mho;	state dead;
branches;
next	1.3;

1.3
date	2002.06.08.21.49.00;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.07.03.10.16;	author hin;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.15.32.39;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.32.39;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.07.11.09.05.58;	author hin;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.12.10.19.02.56;	author hin;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.06.08.21.07.18;	author hin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kip.h"

RCSID("$KTH: kipd.c,v 1.22 2001/09/17 04:42:48 assar Exp $");

static int
recv_conn (int sock, des_cblock *key, des_key_schedule schedule,
	   struct sockaddr_in *retaddr, char *user, size_t len)
{
     int status;
     KTEXT_ST ticket;
     AUTH_DAT auth;
     char instance[INST_SZ];
     struct sockaddr_in thisaddr, thataddr;
     socklen_t addrlen;
     char version[KRB_SENDAUTH_VLEN + 1];
     u_char ok = 0;
     struct passwd *passwd;

     addrlen = sizeof(thisaddr);
     if (getsockname (sock, (struct sockaddr *)&thisaddr, &addrlen) < 0 ||
	 addrlen != sizeof(thisaddr)) {
	  return 1;
     }
     addrlen = sizeof(thataddr);
     if (getpeername (sock, (struct sockaddr *)&thataddr, &addrlen) < 0 ||
	 addrlen != sizeof(thataddr)) {
	  return 1;
     }

     k_getsockinst (sock, instance, sizeof(instance));
     status = krb_recvauth (KOPT_DO_MUTUAL, sock, &ticket, "rcmd", instance,
			    &thataddr, &thisaddr, &auth, "", schedule,
			    version);
     if (status != KSUCCESS ||
	 strncmp(version, KIP_VERSION, KRB_SENDAUTH_VLEN) != 0) {
	  return 1;
     }
     passwd = k_getpwnam ("root");
     if (passwd == NULL) {
	  fatal (sock, "Cannot find root", schedule, &auth.session);
	  return 1;
     }
     if (kuserok(&auth, "root") != 0) {
	  fatal (sock, "Permission denied", schedule, &auth.session);
	  return 1;
     }
     if (write (sock, &ok, sizeof(ok)) != sizeof(ok))
	  return 1;

     snprintf (user, len, "%s%s%s@@%s", auth.pname, 
	       auth.pinst[0] != '\0' ? "." : "",
	       auth.pinst, auth.prealm);

     memcpy(key, &auth.session, sizeof(des_cblock));
     *retaddr = thataddr;
     return 0;
}

static int
doit(int sock)
{
     char msg[1024];
     char cmd[MAXPATHLEN];
     char tun_if_name[64];
     char user[MAX_K_NAME_SZ];
     struct sockaddr_in thataddr;
     des_key_schedule schedule;
     des_cblock key;
     int this, ret, ret2;

     isserver = 1;

     if (recv_conn (sock, &key, schedule, &thataddr, user, sizeof(user)))
	  return 1;
     this = tunnel_open (tun_if_name, sizeof(tun_if_name));
     if (this < 0)
	  fatal (sock, "Cannot open " _PATH_DEV TUNDEV, schedule, &key);

     strlcpy(cmd, LIBEXECDIR "/kipd-control", sizeof(cmd));

     ret = kip_exec (cmd, msg, sizeof(msg), "kipd-control",
		     "up", tun_if_name, inet_ntoa(thataddr.sin_addr), user,
		     NULL);
     if (ret) {
	 fatal (sock, msg, schedule, &key);
	 return -1;
     }

     ret = copy_packets (this, sock, TUNMTU, &key, schedule);
     
     ret2 = kip_exec (cmd,  msg, sizeof(msg), "kipd-control",
		      "down", tun_if_name, user, NULL);
     if (ret2)
	 syslog(LOG_ERR, "%s", msg);
     return ret;
}

static char *port_str		= NULL;
static int inetd_flag		= 1;
static int version_flag		= 0;
static int help_flag		= 0;

struct getargs args[] = {
    { "inetd",		'i',	arg_negative_flag,	&inetd_flag,
      "Not started from inetd" },
    { "port",		'p',	arg_string,	&port_str,	"Use this port",
      "port" },
    { "version",	0, 	arg_flag,		&version_flag },
    { "help",		0, 	arg_flag,		&help_flag }
};

static void
usage(int ret)
{
    arg_printusage (args,
		    sizeof(args) / sizeof(args[0]),
		    NULL,
		    "");
    exit (ret);
}

/*
 * kipd - receive forwarded IP
 */

int
main (int argc, char **argv)
{
    int port;
    int optind = 0;

    roken_openlog(__progname, LOG_PID|LOG_CONS, LOG_DAEMON);

    if (getarg (args, sizeof(args) / sizeof(args[0]), argc, argv,
		&optind))
	usage (1);

    if (help_flag)
	usage (0);

    if (version_flag) {
	print_version (NULL);
	return 0;
    }

    if(port_str) {
	struct servent *s = roken_getservbyname (port_str, "tcp");

	if (s)
	    port = s->s_port;
	else {
	    char *ptr;

	    port = strtol (port_str, &ptr, 10);
	    if (port == 0 && ptr == port_str)
		errx (1, "bad port `%s'", port_str);
	    port = htons(port);
	}
    } else {
	port = k_getportbyname ("kip", "tcp", htons(KIPPORT));
    }

    if (!inetd_flag)
	mini_inetd (port);

    signal (SIGCHLD, childhandler);
    return doit(STDIN_FILENO);
}
@


1.3
log
@Merge krb4-1.1.1
@
text
@@


1.2
log
@set_progname/get_progname cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: kipd.c,v 1.16.2.3 2000/10/18 20:46:45 assar Exp $");
d47 1
a47 1
     int addrlen;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d36 1
a36 12
RCSID("$KTH: kipd.c,v 1.16 1999/12/02 16:58:31 joda Exp $");

static int
fatal (int fd, char *s)
{
     u_char err = 1;

     write (fd, &err, sizeof(err));
     write (fd, s, strlen(s)+1);
     syslog(LOG_ERR, s);
     return err;
}
d40 1
a40 1
	   struct sockaddr_in *retaddr)
d72 8
a79 4
     if (passwd == NULL)
	  return fatal (sock, "Cannot find root");
     if (kuserok(&auth, "root") != 0)
	  return fatal (sock, "Permission denied");
d83 4
d95 4
d102 3
a104 1
     int this;
d106 1
a106 1
     if (recv_conn (sock, &key, schedule, &thataddr))
d108 1
a108 1
     this = tunnel_open ();
d110 43
a152 2
	  fatal (sock, "Cannot open " _PATH_DEV TUNDEV);
     return copy_packets (this, sock, TUNMTU, &key, schedule);
d162 2
a163 1
    set_progname (argv[0]);
d166 33
d200 1
a200 1
    return doit(0);
@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@


1.1.1.2
log
@Import of KTH Kerberos4 1.0.2
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 12
a47 1
RCSID("$KTH: kipd.c,v 1.16.2.2 2000/06/28 19:07:59 assar Exp $");
d51 1
a51 1
	   struct sockaddr_in *retaddr, char *user, size_t len)
d83 4
a86 8
     if (passwd == NULL) {
	  fatal (sock, "Cannot find root", schedule, &auth.session);
	  return 1;
     }
     if (kuserok(&auth, "root") != 0) {
	  fatal (sock, "Permission denied", schedule, &auth.session);
	  return 1;
     }
a89 4
     snprintf (user, len, "%s%s%s@@%s", auth.pname, 
	       auth.pinst[0] != '\0' ? "." : "",
	       auth.pinst, auth.prealm);

a97 4
     char msg[1024];
     char cmd[MAXPATHLEN];
     char tun_if_name[64];
     char user[MAX_K_NAME_SZ];
d101 1
a101 3
     int this, ret, ret2;

     isserver = 1;
d103 1
a103 1
     if (recv_conn (sock, &key, schedule, &thataddr, user, sizeof(user)))
d105 1
a105 1
     this = tunnel_open (tun_if_name, sizeof(tun_if_name));
d107 2
a108 43
	  fatal (sock, "Cannot open " _PATH_DEV TUNDEV, schedule, &key);

     strlcpy(cmd, LIBEXECDIR "kipd-control", sizeof(cmd));

     ret = kip_exec (cmd, msg, sizeof(msg), "kipd-control",
		     "up", tun_if_name, inet_ntoa(thataddr.sin_addr), user,
		     NULL);
     if (ret) {
	 fatal (sock, msg, schedule, &key);
	 return -1;
     }

     ret = copy_packets (this, sock, TUNMTU, &key, schedule);
     
     ret2 = kip_exec (cmd,  msg, sizeof(msg), "kipd-control",
		      "down", tun_if_name, user, NULL);
     if (ret2)
	 syslog(LOG_ERR, "%s", msg);
     return ret;
}

static char *port_str		= NULL;
static int inetd_flag		= 1;
static int version_flag		= 0;
static int help_flag		= 0;

struct getargs args[] = {
    { "inetd",		'i',	arg_negative_flag,	&inetd_flag,
      "Not started from inetd" },
    { "port",		'p',	arg_string,	&port_str,	"Use this port",
      "port" },
    { "version",	0, 	arg_flag,		&version_flag },
    { "help",		0, 	arg_flag,		&help_flag }
};

static void
usage(int ret)
{
    arg_printusage (args,
		    sizeof(args) / sizeof(args[0]),
		    NULL,
		    "");
    exit (ret);
d118 1
a118 2
    int port;
    int optind = 0;
a119 1
    set_progname (argv[0]);
a120 33

    if (getarg (args, sizeof(args) / sizeof(args[0]), argc, argv,
		&optind))
	usage (1);

    if (help_flag)
	usage (0);

    if (version_flag) {
	print_version (NULL);
	return 0;
    }

    if(port_str) {
	struct servent *s = roken_getservbyname (port_str, "tcp");

	if (s)
	    port = s->s_port;
	else {
	    char *ptr;

	    port = strtol (port_str, &ptr, 10);
	    if (port == 0 && ptr == port_str)
		errx (1, "bad port `%s'", port_str);
	    port = htons(port);
	}
    } else {
	port = k_getportbyname ("kip", "tcp", htons(KIPPORT));
    }

    if (!inetd_flag)
	mini_inetd (port);

d122 1
a122 1
    return doit(STDIN_FILENO);
@


1.1.1.3
log
@Import kth-krb 1.0.4, with important bugfixes.
@
text
@d36 1
a36 1
RCSID("$KTH: kipd.c,v 1.16.2.3 2000/10/18 20:46:45 assar Exp $");
d112 1
a112 1
     strlcpy(cmd, LIBEXECDIR "/kipd-control", sizeof(cmd));
@


1.1.1.4
log
@Import of krb4-1.1.1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: kipd.c,v 1.22 2001/09/17 04:42:48 assar Exp $");
d47 1
a47 1
     socklen_t addrlen;
d165 2
a166 2
    setprogname (argv[0]);
    roken_openlog(getprogname(), LOG_PID|LOG_CONS, LOG_DAEMON);
@


