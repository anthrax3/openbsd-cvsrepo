head	1.5;
access;
symbols
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	KRB4_1_1_1:1.1.1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	KRB4_1_0_8:1.1.1.1
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	KRB4_1_0_4:1.1.1.1
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	KRB4_1_0_2:1.1.1.1
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.05.16.18.45.40;	author mho;	state dead;
branches;
next	1.4;

1.4
date	2003.04.12.23.20.04;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.08.21.49.01;	author hin;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.28.05.16.53;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.25.15.35.15;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.35.15;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.08.21.07.38;	author hin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden). 
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright 
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution. 
 *
 * 3. Neither the name of the Institute nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE. 
 */

#include "krb_locl.h"

RCSID("$KTH: get_krbrlm.c,v 1.26 2001/08/28 10:14:33 assar Exp $");

/*
 * krb_get_lrealm takes a pointer to a string, and a number, n.  It fills
 * in the string, r, with the name of the nth realm specified on the
 * first line of the kerberos config file (KRB_CONF, defined in "krb.h").
 * It returns 0 (KSUCCESS) on success, and KFAILURE on failure.  If the
 * config file does not exist, and if n=1, a successful return will occur
 * with r = KRB_REALM (also defined in "krb.h").
 *
 * For the format of the KRB_CONF file, see comments describing the routine
 * krb_get_krbhst().
 */

static int
krb_get_lrealm_f(char *r, int n, const char *fname)
{
    char buf[1024];
    char *p;
    int rlen, tlen;
    FILE *f;
    int ret = KFAILURE;
    char *rstart;

    if (n < 0)
        return KFAILURE;
    if(n == 0)
	n = 1;

    f = fopen(fname, "r");
    if (f == 0)
        return KFAILURE;

    for (; n > 0; n--)
        if (fgets(buf, sizeof(buf), f) == 0)
            goto done;

    /* We now have the n:th line, remove initial white space. */
    rstart = p = buf + strspn(buf, " \t");

    /* Collect realmname. */
    rlen    = strcspn(p, " \t\n");
    if (rlen == 0 || rlen > REALM_SZ)
        goto done;		/* No realmname */

    /* Does more junk follow? */
    p += rlen;
    tlen = strspn(p, " \t\n");
    if ((rstart[0] != '#') && (p[tlen] == 0)) {
	strncpy(r, rstart, rlen);
	r[rlen] = 0;
        ret = KSUCCESS;		/* This was a realm name only line. */
    }
  done:
    fclose(f);
    return ret;
}

static const char *no_default_realm = "NO.DEFAULT.REALM";

int
krb_get_lrealm(char *r, int n)
{
    int i;
    char file[MaxPathLen];

    r[0] = '#';

    for (i = 0; krb_get_krbconf(i, file, sizeof(file)) == 0; i++)
	if (krb_get_lrealm_f(r, n, file) == KSUCCESS)
	    return KSUCCESS;

    if (r[0] == '#')
	return KFAILURE;

    /* When nothing else works try default realm */
    if (n == 1) {
      char *t = krb_get_default_realm();

      if (strcmp(t, no_default_realm) == 0)
	return KFAILURE;	/* Can't figure out default realm */

      strlcpy(r, t, REALM_SZ);
      return KSUCCESS;
    }
    else
	return KFAILURE;
}

/* Returns local realm if that can be figured out else NO.DEFAULT.REALM */
char *
krb_get_default_realm(void)
{
    static char local_realm[REALM_SZ]; /* Local kerberos realm */
    
    if (local_realm[0] == 0) {
	char *t, hostname[MaxHostNameLen];

	strlcpy(local_realm, no_default_realm, 
			sizeof(local_realm)); /* Provide default */

	gethostname(hostname, sizeof(hostname));
	t = krb_realmofhost(hostname);
	if (t && strcmp(t, no_default_realm) != 0)
	    strlcpy(local_realm, t, sizeof(local_realm));
    }
    return local_realm;
}
@


1.4
log
@string cleaning; parts by me, then parts by hin, then more parts by me.
since this is not a very important part of the source tree, and since it
does compile, i am dumping it in now.
@
text
@@


1.3
log
@Merge krb4-1.1.1
@
text
@d118 1
a118 1
      strcpy(r, t);
@


1.2
log
@Add back the OpenBSDism that a #commented realm means Kerberos is disabled.

Let's keep it in this time.
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: get_krbrlm.c,v 1.25 1999/12/02 16:58:41 joda Exp $");
d55 1
a55 1
    int nchar;
d58 1
d74 1
a74 1
    p = buf + strspn(buf, " \t");
d77 2
a78 2
    nchar    = strcspn(p, " \t\n");
    if (nchar == 0 || nchar > REALM_SZ)
a79 2
    strncpy(r, p, nchar);
    r[nchar] = 0;
d82 5
a86 3
    p += nchar;
    nchar = strspn(p, " \t\n");
    if ((r[0] != '#') && (p[nchar] == 0))
d88 1
a88 1

@


1.1
log
@Initial revision
@
text
@d85 1
a85 1
    if (p[nchar] == 0)
d101 2
d107 3
d121 1
a121 1
	return(KFAILURE);
@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@


1.1.1.2
log
@Import of krb4-1.1.1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: get_krbrlm.c,v 1.26 2001/08/28 10:14:33 assar Exp $");
d55 1
a55 1
    int rlen, tlen;
a57 1
    char *rstart;
d73 1
a73 1
    rstart = p = buf + strspn(buf, " \t");
d76 2
a77 2
    rlen    = strcspn(p, " \t\n");
    if (rlen == 0 || rlen > REALM_SZ)
d79 2
d83 3
a85 5
    p += rlen;
    tlen = strspn(p, " \t\n");
    if (p[tlen] == 0) {
	strncpy(r, rstart, rlen);
	r[rlen] = 0;
d87 1
a87 1
    }
@

