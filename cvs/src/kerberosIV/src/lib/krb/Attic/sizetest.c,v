head	1.2;
access;
symbols
	OPENBSD_3_3:1.1.1.1.0.14
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.12
	OPENBSD_3_2_BASE:1.1.1.1
	KRB4_1_1_1:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	KRB4_1_0_8:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	KRB4_1_0_4:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	KRB4_1_0_2:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.18.45.40;	author mho;	state dead;
branches;
next	1.1;

1.1
date	2000.02.25.15.35.26;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.35.26;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@#include "krb_locl.h"

RCSID("$KTH: sizetest.c,v 1.6 1998/01/01 22:29:04 assar Exp $");

static void
fatal(const char *msg)
{
  fputs(msg, stderr);
  exit(1);
}

int
main(void)
{
  if (sizeof(u_int8_t) < 1)
    fatal("sizeof(u_int8_t) is smaller than 1 byte\n");
  if (sizeof(u_int16_t) < 2)
    fatal("sizeof(u_int16_t) is smaller than 2 bytes\n");
  if (sizeof(u_int32_t) < 4)
    fatal("sizeof(u_int32_t) is smaller than 4 bytes\n");

  if (sizeof(u_int8_t) > 1)
    fputs("warning: sizeof(u_int8_t) is larger than 1 byte, "
	  "some stuff may not work properly!\n", stderr);

  {
    u_int8_t u = 1;
    int i;
    for (i = 0; u != 0 && i < 100; i++)
      u <<= 1;

    if (i < 8)
      fatal("u_int8_t is smaller than 8 bits\n");
    else if (i > 8)
      fputs("warning: u_int8_t is larger than 8 bits, "
	    "some stuff may not work properly!\n", stderr);
  }

  exit(0);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@
