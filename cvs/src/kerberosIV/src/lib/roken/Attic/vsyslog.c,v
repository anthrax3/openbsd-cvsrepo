head	1.2;
access;
symbols
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	KRB4_1_1_1:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	KRB4_1_0_8:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	KRB4_1_0_4:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	KRB4_1_0_2:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.18.45.41;	author mho;	state dead;
branches;
next	1.1;

1.1
date	2000.02.25.15.35.53;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.35.53;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.08.21.07.46;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
RCSID("$KTH: vsyslog.c,v 1.3 1999/12/02 16:58:54 joda Exp $");
#endif

#ifndef HAVE_VSYSLOG

#include <stdio.h>
#include <syslog.h>
#include <stdarg.h>

#include "roken.h"

void
vsyslog(int pri, const char *fmt, va_list ap)
{
    char *p;

    vasprintf (&p, fmt, ap);
    syslog (pri, "%s", p);
    free (p);
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@


1.1.1.2
log
@Import of krb4-1.1.1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: vsyslog.c,v 1.6 2000/05/22 22:09:25 assar Exp $");
a46 17
/*
 * the theory behind this is that we might be trying to call vsyslog
 * when there's no memory left, and we should try to be as useful as
 * possible.  And the format string should say something about what's
 * failing.
 */

static void
simple_vsyslog(int pri, const char *fmt, va_list ap)
{
    syslog (pri, "%s", fmt);
}

/*
 * do like syslog but with a `va_list'
 */

d50 5
a54 47
    char *fmt2;
    const char *p;
    char *p2;
    int saved_errno = errno;
    int fmt_len  = strlen (fmt);
    int fmt2_len = fmt_len;
    char *buf;

    fmt2 = malloc (fmt_len + 1);
    if (fmt2 == NULL) {
	simple_vsyslog (pri, fmt, ap);
	return;
    }

    for (p = fmt, p2 = fmt2; *p != '\0'; ++p) {
	if (p[0] == '%' && p[1] == 'm') {
	    const char *e = strerror (saved_errno);
	    int e_len = strlen (e);
	    char *tmp;
	    int pos;

	    pos = p2 - fmt2;
	    fmt2_len += e_len - 2;
	    tmp = realloc (fmt2, fmt2_len + 1);
	    if (tmp == NULL) {
		free (fmt2);
		simple_vsyslog (pri, fmt, ap);
		return;
	    }
	    fmt2 = tmp;
	    p2   = fmt2 + pos;
	    memmove (p2, e, e_len);
	    p2 += e_len;
	    ++p;
	} else
	    *p2++ = *p;
    }
    *p2 = '\0';

    vasprintf (&buf, fmt2, ap);
    free (fmt2);
    if (buf == NULL) {
	simple_vsyslog (pri, fmt, ap);
	return;
    }
    syslog (pri, "%s", buf);
    free (buf);
d56 1
@

