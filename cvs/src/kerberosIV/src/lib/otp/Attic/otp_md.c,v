head	1.2;
access;
symbols
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	KRB4_1_1_1:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	KRB4_1_0_8:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	KRB4_1_0_4:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	KRB4_1_0_2:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	KRB4_1_0:1.1.1.1
	KTH:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2003.05.16.18.45.40;	author mho;	state dead;
branches;
next	1.1;

1.1
date	2000.02.25.15.36.38;	author hin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.25.15.36.38;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.06.08.21.07.51;	author hin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bye, bye, kerberosIV; ok hin@@
@
text
@/*
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
RCSID("$KTH: otp_md.c,v 1.9 1999/12/02 16:58:44 joda Exp $");
#endif
#include "otp_locl.h"

#include "otp_md.h"
#include <md4.h>
#include <md5.h>
#include <sha.h>

/*
 * Compress len bytes from md into key
 */

static void
compressmd (OtpKey key, unsigned char *md, size_t len)
{
  u_char *p = key;

  memset (p, 0, OTPKEYSIZE);
  while(len) {
    *p++ ^= *md++;
    *p++ ^= *md++;
    *p++ ^= *md++;
    *p++ ^= *md++;
    len -= 4;
    if (p == key + OTPKEYSIZE)
      p = key;
  }
}

static int
otp_md_init (OtpKey key,
	     char *pwd,
	     char *seed,
	     void (*init)(void *),
	     void (*update)(void *, void *, size_t),
	     void (*finito)(void *, void *),
	     void *arg,
	     unsigned char *res,
	     size_t ressz)
{
  char *p;
  int len;

  len = strlen(pwd) + strlen(seed);
  p = malloc (len + 1);
  if (p == NULL)
    return -1;
  strcpy (p, seed);
  strlwr (p);
  strcat (p, pwd);
  (*init)(arg);
  (*update)(arg, p, len);
  (*finito)(arg, res);
  free (p);
  compressmd (key, res, ressz);
  return 0;
}

static int
otp_md_next (OtpKey key,
	     void (*init)(void *),
	     void (*update)(void *, void *, size_t),
	     void (*finito)(void *, void *),
	     void *arg,
	     unsigned char *res,
	     size_t ressz)
{
  (*init)(arg);
  (*update)(arg, key, OTPKEYSIZE);
  (*finito)(arg, res);
  compressmd (key, res, ressz);
  return 0;
}

static int
otp_md_hash (char *data,
	     size_t len,
	     void (*init)(void *),
	     void (*update)(void *, void *, size_t),
	     void (*finito)(void *, void *),
	     void *arg,
	     unsigned char *res,
	     size_t ressz)
{
  (*init)(arg);
  (*update)(arg, data, len);
  (*finito)(arg, res);
  return 0;
}

int
otp_md4_init (OtpKey key, char *pwd, char *seed)
{
  unsigned char res[16];
  struct md4 md4;

  return otp_md_init (key, pwd, seed,
		      (void (*)(void *))md4_init,
		      (void (*)(void *, void *, size_t))md4_update, 
		      (void (*)(void *, void *))md4_finito,
		      &md4, res, sizeof(res));
}

int
otp_md4_hash (char *data,
	      size_t len,
	      unsigned char *res)
{
  struct md4 md4;

  return otp_md_hash (data, len,
		      (void (*)(void *))md4_init,
		      (void (*)(void *, void *, size_t))md4_update, 
		      (void (*)(void *, void *))md4_finito,
		      &md4, res, 16);
}

int
otp_md4_next (OtpKey key)
{
  unsigned char res[16];
  struct md4 md4;

  return otp_md_next (key, 
		      (void (*)(void *))md4_init, 
		      (void (*)(void *, void *, size_t))md4_update, 
		      (void (*)(void *, void *))md4_finito,
		      &md4, res, sizeof(res));
}


int
otp_md5_init (OtpKey key, char *pwd, char *seed)
{
  unsigned char res[16];
  struct md5 md5;

  return otp_md_init (key, pwd, seed, 
		      (void (*)(void *))md5_init, 
		      (void (*)(void *, void *, size_t))md5_update, 
		      (void (*)(void *, void *))md5_finito,
		      &md5, res, sizeof(res));
}

int
otp_md5_hash (char *data,
	      size_t len,
	      unsigned char *res)
{
  struct md5 md5;

  return otp_md_hash (data, len,
		      (void (*)(void *))md5_init,
		      (void (*)(void *, void *, size_t))md5_update, 
		      (void (*)(void *, void *))md5_finito,
		      &md5, res, 16);
}

int
otp_md5_next (OtpKey key)
{
  unsigned char res[16];
  struct md5 md5;

  return otp_md_next (key, 
		      (void (*)(void *))md5_init, 
		      (void (*)(void *, void *, size_t))md5_update, 
		      (void (*)(void *, void *))md5_finito,
		      &md5, res, sizeof(res));
}

/* 
 * For histerical reasons, in the OTP definition it's said that the
 * result from SHA must be stored in little-endian order.  See
 * draft-ietf-otp-01.txt.
 */

static void
sha_finito_little_endian (struct sha *m, void *res)
{
  unsigned char tmp[20];
  unsigned char *p = res;
  int j;

  sha_finito (m, tmp);
  for (j = 0; j < 20; j += 4) {
    p[j]   = tmp[j+3];
    p[j+1] = tmp[j+2];
    p[j+2] = tmp[j+1];
    p[j+3] = tmp[j];
  }
}

int
otp_sha_init (OtpKey key, char *pwd, char *seed)
{
  unsigned char res[20];
  struct sha sha;

  return otp_md_init (key, pwd, seed, 
		      (void (*)(void *))sha_init, 
		      (void (*)(void *, void *, size_t))sha_update, 
		      (void (*)(void *, void *))sha_finito_little_endian,
		      &sha, res, sizeof(res));
}

int
otp_sha_hash (char *data,
	      size_t len,
	      unsigned char *res)
{
  struct sha sha;

  return otp_md_hash (data, len,
		      (void (*)(void *))sha_init,
		      (void (*)(void *, void *, size_t))sha_update, 
		      (void (*)(void *, void *))sha_finito_little_endian,
		      &sha, res, 20);
}

int
otp_sha_next (OtpKey key)
{
  unsigned char res[20];
  struct sha sha;

  return otp_md_next (key, 
		      (void (*)(void *))sha_init, 
		      (void (*)(void *, void *, size_t))sha_update, 
		      (void (*)(void *, void *))sha_finito_little_endian,
		      &sha, res, sizeof(res));
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Importing KTH Kerberos4 version 1.0
(art@@ ok)
@
text
@@


1.1.1.2
log
@Import of krb4-1.1.1
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$KTH: otp_md.c,v 1.15 2001/08/22 20:30:32 assar Exp $");
a40 5
#ifdef HAVE_OPENSSL
#include <openssl/md4.h>
#include <openssl/md5.h>
#include <openssl/sha.h>
#else
a43 1
#endif
d68 2
a69 2
	     const char *pwd,
	     const char *seed,
d71 2
a72 2
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
d89 1
a89 1
  (*final)(res, arg);
d98 2
a99 2
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
d106 1
a106 1
  (*final)(res, arg);
d112 1
a112 1
otp_md_hash (const char *data,
d115 2
a116 2
	     void (*update)(void *, const void *, size_t),
	     void (*final)(void *, void *),
d123 1
a123 1
  (*final)(res, arg);
d128 1
a128 1
otp_md4_init (OtpKey key, const char *pwd, const char *seed)
d131 1
a131 1
  MD4_CTX md4;
d134 3
a136 3
		      (void (*)(void *))MD4_Init,
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
d141 1
a141 1
otp_md4_hash (const char *data,
d145 1
a145 1
  MD4_CTX md4;
d148 3
a150 3
		      (void (*)(void *))MD4_Init,
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
d158 1
a158 1
  MD4_CTX md4;
d161 3
a163 3
		      (void (*)(void *))MD4_Init, 
		      (void (*)(void *, const void *, size_t))MD4_Update, 
		      (void (*)(void *, void *))MD4_Final,
d169 1
a169 1
otp_md5_init (OtpKey key, const char *pwd, const char *seed)
d172 1
a172 1
  MD5_CTX md5;
d175 3
a177 3
		      (void (*)(void *))MD5_Init, 
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
d182 1
a182 1
otp_md5_hash (const char *data,
d186 1
a186 1
  MD5_CTX md5;
d189 3
a191 3
		      (void (*)(void *))MD5_Init,
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
d199 1
a199 1
  MD5_CTX md5;
d202 3
a204 3
		      (void (*)(void *))MD5_Init, 
		      (void (*)(void *, const void *, size_t))MD5_Update, 
		      (void (*)(void *, void *))MD5_Final,
d215 1
a215 1
SHA1_Final_little_endian (void *res, SHA_CTX *m)
d221 1
a221 1
  SHA1_Final (tmp, m);
d231 1
a231 1
otp_sha_init (OtpKey key, const char *pwd, const char *seed)
d234 1
a234 1
  SHA_CTX sha1;
d237 4
a240 4
		      (void (*)(void *))SHA1_Init, 
		      (void (*)(void *, const void *, size_t))SHA1_Update, 
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, sizeof(res));
d244 1
a244 1
otp_sha_hash (const char *data,
d248 1
a248 1
  SHA_CTX sha1;
d251 4
a254 4
		      (void (*)(void *))SHA1_Init,
		      (void (*)(void *, const void *, size_t))SHA1_Update, 
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, 20);
d261 1
a261 1
  SHA_CTX sha1;
d264 4
a267 4
		      (void (*)(void *))SHA1_Init,
		      (void (*)(void *, const void *, size_t))SHA1_Update,
		      (void (*)(void *, void *))SHA1_Final_little_endian,
		      &sha1, res, sizeof(res));
@

