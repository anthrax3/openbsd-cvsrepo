head	1.11;
access;
symbols
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2000.02.25.15.14.51;	author hin;	state dead;
branches;
next	1.10;

1.10
date	99.03.19.10.43.33;	author art;	state Exp;
branches;
next	1.9;

1.9
date	99.03.04.21.56.35;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.02.15.02.57.04;	author art;	state Exp;
branches;
next	1.7;

1.7
date	98.09.23.21.25.39;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.09.18.00.58.26;	author art;	state Exp;
branches;
next	1.5;

1.5
date	98.08.12.23.49.02;	author art;	state Exp;
branches;
next	1.4;

1.4
date	97.12.12.11.46.31;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.11.28.12.48.42;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.09.16.03.18.08;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.46;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.46;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: afssys.c,v 1.10 1999/03/19 10:43:33 art Exp $	*/
/*	$KTH: afssys.c,v 1.57 1998/05/09 17:19:03 joda Exp $	*/

/*
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "kafs_locl.h"

int _kafs_debug;

int
k_pioctl(char *a_path,
	 int o_opcode,
	 struct ViceIoctl *a_paramsP,
	 int a_followSymlinks)
{
    return xfspioctl(AFSCALL_PIOCTL, a_path, o_opcode, a_paramsP,
		     a_followSymlinks);
}

int
k_afs_cell_of_file(const char *path, char *cell, int len)
{
    struct ViceIoctl parms;

    parms.in = NULL;
    parms.in_size = 0;
    parms.out = cell;
    parms.out_size = len;

    return k_pioctl((char*)path, VIOC_FILE_CELL_NAME, &parms, 1);
}

int
k_unlog(void)
{
    struct ViceIoctl parms;

    memset(&parms, 0, sizeof(parms));

    return k_pioctl(0, VIOCUNLOG, &parms, 0);
}

int
k_setpag(void)
{
    return xfspioctl(AFSCALL_SETPAG, NULL, 0, NULL, 0);
}

int
k_hasafs(void)
{
    struct ViceIoctl parms;

    bzero(&parms, sizeof(struct ViceIoctl));

    k_pioctl(NULL, VIOCSETTOK, &parms, 0);

    /*
     * An ENOSYS means failure. Anything else is success (including EINVAL).
     */

    return errno != ENOSYS;
}
@


1.10
log
@(k_hasafs): Only ENOSYS means failure. Everything else is success.
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.9 1999/03/04 21:56:35 art Exp $	*/
@


1.9
log
@DUH!  k_hasafs returns 0 if pioctl fails.
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.8 1999/02/15 02:57:04 art Exp $	*/
d92 7
a98 1
    return !k_pioctl(NULL, VIOCSETTOK, &parms, 0);
@


1.8
log
@use an empty VIOCSETTOK instead of the probe call
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.7 1998/09/23 21:25:39 art Exp $	*/
d92 1
a92 1
    return k_pioctl(NULL, VIOCSETTOK, &parms, 0);
@


1.7
log
@detect xfs when it's there
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.6 1998/09/18 00:58:26 art Exp $	*/
d88 5
a92 1
    return xfspioctl(AFSCALL_PROBE, NULL, 0, NULL, 0) == 0;
@


1.6
log
@use xfspioctl (nicer, cleaner, better)
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.5 1998/08/12 23:49:02 art Exp $	*/
d88 1
a88 1
    return xfspioctl(AFSCALL_PROBE, NULL, 0, NULL, 0) == 1;
@


1.5
log
@libkafs from kth-krb 0.9.9 with ability to use AFSDB records
@
text
@d1 1
a1 1
/*	$OpenBSD: afssys.c,v 1.4 1997/12/12 11:46:31 art Exp $	*/
a45 11
#define NO_ENTRY_POINT		0
#define SINGLE_ENTRY_POINT	1
#define MULTIPLE_ENTRY_POINT	2
#define SINGLE_ENTRY_POINT2	3
#define SINGLE_ENTRY_POINT3	4
#define AIX_ENTRY_POINTS	5
#define UNKNOWN_ENTRY_POINT	6
static int afs_entry_point = UNKNOWN_ENTRY_POINT;
static int afs_syscalls[2];


d52 2
a53 20
#ifndef NO_AFS
    switch(afs_entry_point){
#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
    case SINGLE_ENTRY_POINT:
    case SINGLE_ENTRY_POINT2:
    case SINGLE_ENTRY_POINT3:
	return syscall(afs_syscalls[0], AFSCALL_PIOCTL,
		       a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif
#if defined(AFS_PIOCTL)
    case MULTIPLE_ENTRY_POINT:
	return syscall(afs_syscalls[0],
		       a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif
    }
    
    errno = ENOSYS;
    kill(getpid(), SIGSYS);	/* You loose! */
#endif /* NO_AFS */
    return -1;
d60 1
d65 1
d73 1
d75 1
d82 1
a82 27
#ifndef NO_AFS
    switch(afs_entry_point){
#if defined(AFS_SYSCALL) || defined(AFS_SYSCALL2) || defined(AFS_SYSCALL3)
    case SINGLE_ENTRY_POINT:
    case SINGLE_ENTRY_POINT2:
    case SINGLE_ENTRY_POINT3:
	return syscall(afs_syscalls[0], AFSCALL_SETPAG);
#endif
#if defined(AFS_PIOCTL)
    case MULTIPLE_ENTRY_POINT:
	return syscall(afs_syscalls[1]);
#endif
    }
    
    errno = ENOSYS;
    kill(getpid(), SIGSYS);	/* You loose! */
#endif /* NO_AFS */
    return -1;
}

static jmp_buf catch_SIGSYS;

void
SIGSYS_handler(int sig)
{
    errno = 0;
    longjmp(catch_SIGSYS, 1);
d88 1
a88 84
    int saved_errno;
    void (*saved_func)();
    struct ViceIoctl parms;
  
    /*
     * Already checked presence of AFS syscalls?
     */
    if (afs_entry_point != UNKNOWN_ENTRY_POINT)
	return afs_entry_point != NO_ENTRY_POINT;

    /*
     * Probe kernel for AFS specific syscalls,
     * they (currently) come in two flavors.
     * If the syscall is absent we recive a SIGSYS.
     */
    afs_entry_point = NO_ENTRY_POINT;
    memset(&parms, 0, sizeof(parms));
  
    saved_errno = errno;
#ifndef NO_AFS
    saved_func = signal(SIGSYS, SIGSYS_handler);

#ifdef AFS_SYSCALL
    if (setjmp(catch_SIGSYS) == 0)
	{
	    syscall(AFS_SYSCALL, AFSCALL_PIOCTL,
		    0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    if (errno == EINVAL)
		{
		    afs_entry_point = SINGLE_ENTRY_POINT;
		    afs_syscalls[0] = AFS_SYSCALL;
		    goto done;
		}
	}
#endif /* AFS_SYSCALL */

#ifdef AFS_PIOCTL
    if (setjmp(catch_SIGSYS) == 0)
	{
	    syscall(AFS_PIOCTL,
		    0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    if (errno == EINVAL)
		{
		    afs_entry_point = MULTIPLE_ENTRY_POINT;
		    afs_syscalls[0] = AFS_PIOCTL;
		    afs_syscalls[1] = AFS_SETPAG;
		    goto done;
		}
	}
#endif /* AFS_PIOCTL */

#ifdef AFS_SYSCALL2
    if (setjmp(catch_SIGSYS) == 0)
	{
	    syscall(AFS_SYSCALL2, AFSCALL_PIOCTL,
		    0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    if (errno == EINVAL)
		{
		    afs_entry_point = SINGLE_ENTRY_POINT2;
		    afs_syscalls[0] = AFS_SYSCALL2;
		    goto done;
		}
	}
#endif /* AFS_SYSCALL */

#ifdef AFS_SYSCALL3
    if (setjmp(catch_SIGSYS) == 0)
	{
	    syscall(AFS_SYSCALL3, AFSCALL_PIOCTL,
		    0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    if (errno == EINVAL)
		{
		    afs_entry_point = SINGLE_ENTRY_POINT3;
		    afs_syscalls[0] = AFS_SYSCALL3;
		    goto done;
		}
	}
#endif /* AFS_SYSCALL */

done:
    signal(SIGSYS, saved_func);
#endif /* NO_AFS */
    errno = saved_errno;
    return afs_entry_point != NO_ENTRY_POINT;
@


1.4
log
@This should be the last cleanup for today. *yawn*
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $KTH: afssys.c,v 1.53 1997/05/04 02:30:41 assar Exp $ */
d5 1
a5 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d43 2
@


1.3
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 1
@


1.2
log
@Bring prototypes into scope
@
text
@d1 1
a1 16
/*	$Id: afssys.c,v 1.1.1.1 1995/12/14 06:52:46 tholo Exp $	*/

#include <sys/types.h>
#include <sys/ioctl.h>
#include <signal.h>
#include <setjmp.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include <kerberosIV/krb.h>
#include <kerberosIV/kafs.h>

#include "afssysdefs.h"

#define AUTH_SUPERUSER "afs"
d4 35
a38 1
 * Here only ASCII characters are relevant.
d41 1
a41 108
#define IsAsciiUpper(c) ('A' <= (c) && (c) <= 'Z')

#define ToAsciiLower(c) ((c) - 'A' + 'a')

static void
folddown(a, b)
     char *a, *b;
{
  for (; *b; a++, b++)
    if (IsAsciiUpper(*b))
      *a = ToAsciiLower(*b);
    else
      *a = *b;
  *a = '\0';
}

#if !defined(linux)		/* won't work there -- no SIGSYS, no syscall */

int
k_afsklog(realm)
	char *realm;
{
  int k_errno;
  CREDENTIALS c;
  KTEXT_ST ticket;
  char username[256];
  char krealm[REALM_SZ];

  if (!k_hasafs())
    return KSUCCESS;

  if (realm == 0 || realm[0] == 0)
    {
      k_errno = krb_get_lrealm(krealm, 0);
      if (k_errno != KSUCCESS)
	return k_errno;
      realm = krealm;
    }

  k_errno = krb_get_cred(AUTH_SUPERUSER, "", realm, &c);
  if (k_errno != KSUCCESS)
    {
      k_errno = krb_mk_req(&ticket, AUTH_SUPERUSER, "", realm, 0);
      if (k_errno == KSUCCESS)
	k_errno = krb_get_cred(AUTH_SUPERUSER, "", realm, &c);
    }

  if (k_errno == KSUCCESS)
    {
      char cell[256];
      struct ViceIoctl parms;
      struct ClearToken ct;
      int32_t sizeof_x;
      char buf[2048], *t;

      folddown(cell, realm);

      /*
       * Build a struct ClearToken
       */
      ct.AuthHandle = c.kvno;
      bcopy((char *)c.session, ct.HandShakeKey, sizeof(c.session));
      ct.ViceId = getuid();	/* is this always valid? */
      ct.BeginTimestamp = 1 + c.issue_date;
      ct.EndTimestamp = krb_life_to_time(c.issue_date, c.lifetime);

      t = buf;
      /*
       * length of secret token followed by secret token
       */
      sizeof_x = c.ticket_st.length;
      bcopy((char *)&sizeof_x, t, sizeof(sizeof_x));
      t += sizeof(sizeof_x);
      bcopy((char *)c.ticket_st.dat, t, sizeof_x);
      t += sizeof_x;
      /*
       * length of clear token followed by clear token
       */
      sizeof_x = sizeof(ct);
      bcopy((char *)&sizeof_x, t, sizeof(sizeof_x));
      t += sizeof(sizeof_x);
      bcopy((char *)&ct, t, sizeof_x);
      t += sizeof_x;

      /*
       * do *not* mark as primary cell
       */
      sizeof_x = 0;
      bcopy((char *)&sizeof_x, t, sizeof(sizeof_x));
      t += sizeof(sizeof_x);
      /*
       * follow with cell name
       */
      sizeof_x = strlen(cell) + 1;
      bcopy(cell, t, sizeof_x);
      t += sizeof_x;

      /*
       * Build argument block
       */
      parms.in = buf;
      parms.in_size = t - buf;
      parms.out = 0;
      parms.out_size = 0;
      (void) k_pioctl(0, VIOCSETTOK, &parms, 0);
    }
  return k_errno;
}
d47 3
a49 2
#define AIX_ENTRY_POINTS	4
#define UNKNOWN_ENTRY_POINT	5
d51 2
d55 29
a83 5
k_pioctl(a_path, o_opcode, a_paramsP, a_followSymlinks)
	char *a_path;
	int o_opcode;
	struct ViceIoctl *a_paramsP;
	int a_followSymlinks;
d85 6
a90 26
#ifdef AFS_SYSCALL
  if (afs_entry_point == SINGLE_ENTRY_POINT)
    return syscall(AFS_SYSCALL, AFSCALL_PIOCTL,
		   a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif

#ifdef AFS_PIOCTL
    if (afs_entry_point == MULTIPLE_ENTRY_POINT)
      return syscall(AFS_PIOCTL,
		     a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif

#ifdef AFS_SYSCALL2
  if (afs_entry_point == SINGLE_ENTRY_POINT2)
    return syscall(AFS_SYSCALL2, AFSCALL_PIOCTL,
		   a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif

#ifdef _AIX
  if (afs_entry_point == AIX_ENTRY_POINTS)
    return lpioctl(a_path, o_opcode, a_paramsP, a_followSymlinks);
#endif

  errno = ENOSYS;
  kill(getpid(), SIGSYS);	/* You loose! */
  return -1;
d94 1
a94 1
k_unlog()
d96 3
a98 3
  struct ViceIoctl parms;
  bzero((char *)&parms, sizeof(parms));
  return k_pioctl(0, VIOCUNLOG, &parms, 0);
d102 1
a102 1
k_setpag()
d104 19
a122 19
#ifdef AFS_SYSCALL
  if (afs_entry_point == SINGLE_ENTRY_POINT)
    return syscall(AFS_SYSCALL, AFSCALL_SETPAG);
#endif

#ifdef AFS_SETPAG
  if (afs_entry_point == MULTIPLE_ENTRY_POINT)
    return syscall(AFS_SETPAG);
#endif

#ifdef AFS_SYSCALL2
  if (afs_entry_point == SINGLE_ENTRY_POINT2)
    return syscall(AFS_SYSCALL2, AFSCALL_SETPAG);
#endif

#ifdef _AIX
  if (afs_entry_point == AIX_ENTRY_POINTS)
    return lsetpag();
#endif
a123 5
  errno = ENOSYS;
  kill(getpid(), SIGSYS);	/* You loose! */
  return -1;
}
#endif /* defined(linux) */
d126 2
a127 2
static void
SIGSYS_handler()
d129 2
a130 2
  errno = 0;
  longjmp(catch_SIGSYS, 1);
d134 1
a134 1
k_hasafs()
d136 3
a138 3
  int saved_errno;
  void (*saved_func)();
  struct ViceIoctl parms;
d140 13
a152 16
#if defined(linux)
  return 0;
#else
  /*
   * Already checked presence of AFS syscalls?
   */
  if (afs_entry_point != UNKNOWN_ENTRY_POINT)
    return afs_entry_point != NO_ENTRY_POINT;

  /*
   * Probe kernel for AFS specific syscalls,
   * they (currently) come in two flavors.
   * If the syscall is absent we recive a SIGSYS.
   */
  afs_entry_point = NO_ENTRY_POINT;
  bzero(&parms, sizeof(parms));
d154 3
a156 2
  saved_errno = errno;
  saved_func = signal(SIGSYS, SIGSYS_handler);
d159 1
a159 5
  if (setjmp(catch_SIGSYS) == 0)
    {
      syscall(AFS_SYSCALL, AFSCALL_PIOCTL,
	      0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (errno == EINVAL)
d161 8
a168 2
	  afs_entry_point = SINGLE_ENTRY_POINT;
	  goto done;
a169 1
    }
d173 1
a173 5
  if (setjmp(catch_SIGSYS) == 0)
    {
      syscall(AFS_PIOCTL,
	      0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (errno == EINVAL)
d175 9
a183 2
	  afs_entry_point = MULTIPLE_ENTRY_POINT;
	  goto done;
a184 1
    }
d188 1
a188 5
  if (setjmp(catch_SIGSYS) == 0)
    {
      syscall(AFS_SYSCALL2, AFSCALL_PIOCTL,
	      0, VIOCSETTOK, &parms, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (errno == EINVAL)
d190 8
a197 2
	  afs_entry_point = SINGLE_ENTRY_POINT2;
	  goto done;
a198 1
    }
d201 2
a202 5
#ifdef _AIX
  if (setjmp(catch_SIGSYS) == 0)
    {
      lpioctl(0, 0, 0, 0);
      if (errno == EINVAL)
d204 8
a211 2
	  afs_entry_point = AIX_ENTRY_POINTS;
	  goto done;
d213 1
a213 2
    }
#endif
d215 5
a219 5
 done:
  (void) signal(SIGSYS, saved_func);
  errno = saved_errno;
  return afs_entry_point != NO_ENTRY_POINT;
#endif /* linux */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d8 2
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
