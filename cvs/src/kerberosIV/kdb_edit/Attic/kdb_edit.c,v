head	1.5;
access;
symbols
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2000.02.25.15.14.55;	author hin;	state dead;
branches;
next	1.4;

1.4
date	97.12.17.10.21.26;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.08.25.23.08.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.09.16.18.48.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.42;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.42;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: kdb_edit.c,v 1.4 1997/12/17 10:21:26 art Exp $	*/
/* $KTH: kdb_edit.c,v 1.25 1997/05/07 01:34:05 assar Exp $ */

/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *      of the Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */

/*
 * This routine changes the Kerberos encryption keys for principals,
 * i.e., users or services. 
 */

/*
 * exit returns 	 0 ==> success -1 ==> error 
 */

#include "adm_locl.h"

#ifdef DEBUG
extern  kerb_debug;
#endif

#define zaptime(foo) memset((foo), 0, sizeof(*(foo)))

static int     nflag = 0;
static int     debug;

static des_cblock new_key;

static int     i, j;
static int     more;

static char    input_name[ANAME_SZ];
static char    input_instance[INST_SZ];

#define	MAX_PRINCIPAL	10
static Principal principal_data[MAX_PRINCIPAL];

static Principal old_principal;
static Principal default_princ;

static des_cblock master_key;
static des_cblock session_key;
static des_key_schedule master_key_schedule;
static char pw_str[255];
static long master_key_version;

static char progname[]="kdb_edit";

time_t
tm2time (struct tm tm, int local)
{
     time_t t;

     tm.tm_isdst = -1;

     t = mktime (&tm);

     if (!local)
       t += t - mktime (gmtime (&t));
     return t;
}

static void
Usage(void)
{
    fprintf(stderr, "Usage: %s [-n]\n", progname);
    exit(1);
}

static char *
n_gets(char *buf, int size)
{
    char *p;
    char *ret;
    ret = fgets(buf, size, stdin);
  
    if (ret && (p = strchr(buf, '\n')))
	*p = 0;
    return ret;
}


static int
change_principal(void)
{
    static char temp[255];
    int     creating = 0;
    int     editpw = 0;
    int     changed = 0;
    long    temp_long;		/* Don't change to int32_t, used by scanf */
    int     n;
    struct tm 	*tp, edate;

    fprintf(stdout, "\nPrincipal name: ");
    fflush(stdout);
    if (!n_gets(input_name, sizeof(input_name)) || *input_name == '\0')
	return 0;
    fprintf(stdout, "Instance: ");
    fflush(stdout);
    /* instance can be null */
    n_gets(input_instance, sizeof(input_instance));
    j = kerb_get_principal(input_name, input_instance, principal_data,
			   MAX_PRINCIPAL, &more);
    if (!j) {
	fprintf(stdout, "\n\07\07<Not found>, Create [y] ? ");
	fflush(stdout);
	n_gets(temp, sizeof(temp));		/* Default case should work, it didn't */
	if (temp[0] != 'y' && temp[0] != 'Y' && temp[0] != '\0')
	    return -1;
	/* make a new principal, fill in defaults */
	j = 1;
	creating = 1;
	strncpy(principal_data[0].name, input_name, ANAME_SZ - 1);
	principal_data[0].name[ANAME_SZ - 1] = '\0';
	strncpy(principal_data[0].instance, input_instance, INST_SZ - 1);
	principal_data[0].instance[INST_SZ - 1] = '\0';

	principal_data[0].old = NULL;
	principal_data[0].exp_date = default_princ.exp_date;
	if (strcmp(input_instance, "admin") == 0)
	  principal_data[0].max_life = 1 + (CLOCK_SKEW/(5*60)); /*5+5 minutes*/
	else if (strcmp(input_instance, "root") == 0)
	  principal_data[0].max_life = 96; /* 8 hours */
	else
	  principal_data[0].max_life = default_princ.max_life;
	principal_data[0].attributes = default_princ.attributes;
	principal_data[0].kdc_key_ver = (unsigned char) master_key_version;
	principal_data[0].key_version = 0; /* bumped up later */
    }
    tp = k_localtime(&principal_data[0].exp_date);
    snprintf(principal_data[0].exp_date_txt,
	     sizeof(principal_data[0].exp_date_txt),
	     "%4d-%02d-%02d",
	     tp->tm_year + 1900,
	     tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
    for (i = 0; i < j; i++) {
	for (;;) {
	    fprintf(stdout,
		    "\nPrincipal: %s, Instance: %s, kdc_key_ver: %d",
		    principal_data[i].name, principal_data[i].instance,
		    principal_data[i].kdc_key_ver);
	    fflush(stdout);
	    editpw = 1;
	    changed = 0;
	    if (!creating) {
		/*
		 * copy the existing data so we can use the old values
		 * for the qualifier clause of the replace 
		 */
		principal_data[i].old = (char *) &old_principal;
		memcpy(&old_principal, &principal_data[i],
		       sizeof(old_principal));
		printf("\nChange password [n] ? ");
		n_gets(temp, sizeof(temp));
		if (strcmp("y", temp) && strcmp("Y", temp))
		    editpw = 0;
	    }
	    /* password */
	    if (editpw) {
#ifdef NOENCRYPTION
		placebo_read_pw_string(pw_str, sizeof pw_str,
		    "\nNew Password: ", TRUE);
#else
                if(des_read_pw_string(pw_str, sizeof pw_str,
			"\nNew Password: ", TRUE))
		    continue;
#endif
		if (   strcmp(pw_str, "RANDOM") == 0
		    || strcmp(pw_str, "") == 0) {
		    printf("\nRandom password [y] ? ");
		    n_gets(temp, sizeof(temp));
		    if (!strcmp("n", temp) || !strcmp("N", temp)) {
			/* no, use literal */
#ifdef NOENCRYPTION
			memset(new_key, 0, sizeof(des_cblock));
			new_key[0] = 127;
#else
			des_string_to_key(pw_str, &new_key);
#endif
			memset(pw_str, 0, sizeof pw_str);	/* "RANDOM" */
		    } else {
#ifdef NOENCRYPTION
			memset(new_key, 0, sizeof(des_cblock));
			new_key[0] = 127;
#else
			des_new_random_key(&new_key);
#endif
			memset(pw_str, 0, sizeof pw_str);
		    }
		} else if (!strcmp(pw_str, "NULL")) {
		    printf("\nNull Key [y] ? ");
		    n_gets(temp, sizeof(temp));
		    if (!strcmp("n", temp) || !strcmp("N", temp)) {
			/* no, use literal */
#ifdef NOENCRYPTION
			memset(new_key, 0, sizeof(des_cblock));
			new_key[0] = 127;
#else
			des_string_to_key(pw_str, &new_key);
#endif
			memset(pw_str, 0, sizeof pw_str);	/* "NULL" */
		    } else {

			principal_data[i].key_low = 0;
			principal_data[i].key_high = 0;
			goto null_key;
		    }
		} else {
#ifdef NOENCRYPTION
		    memset(new_key, 0, sizeof(des_cblock));
		    new_key[0] = 127;
#else
		    des_string_to_key(pw_str, &new_key);
#endif
		    memset(pw_str, 0, sizeof pw_str);
		}

		/* seal it under the kerberos master key */
		kdb_encrypt_key (&new_key, &new_key, 
				 &master_key, master_key_schedule,
				 DES_ENCRYPT);
		copy_from_key(new_key,
			      &principal_data[i].key_low,
			      &principal_data[i].key_high);
		memset(new_key, 0, sizeof(new_key));
	null_key:
		/* set master key version */
		principal_data[i].kdc_key_ver =
		    (unsigned char) master_key_version;
		/* bump key version # */
		principal_data[i].key_version++;
		fprintf(stdout,
			"\nPrincipal's new key version = %d\n",
			principal_data[i].key_version);
		fflush(stdout);
		changed = 1;
	    }
	    /* expiration date */
	    fprintf(stdout, "Expiration date (enter yyyy-mm-dd) [ %s ] ? ",
		    principal_data[i].exp_date_txt);
	    fflush(stdout);
	    zaptime(&edate);
	    while (n_gets(temp, sizeof(temp)) && ((n = strlen(temp)) >
				  sizeof(principal_data[0].exp_date_txt))) {
	    bad_date:
		fprintf(stdout, "\07\07Date Invalid\n");
		fprintf(stdout,
			"Expiration date (enter yyyy-mm-dd) [ %s ] ? ",
			principal_data[i].exp_date_txt);
		fflush(stdout);
		zaptime(&edate);
	    }

	    if (*temp) {
		if (sscanf(temp, "%d-%d-%d", &edate.tm_year,
			      &edate.tm_mon, &edate.tm_mday) != 3)
		    goto bad_date;
		edate.tm_mon--;		/* January is 0, not 1 */
		edate.tm_hour = 23;	/* nearly midnight at the end of the */
		edate.tm_min = 59;	/* specified day */
		if (krb_check_tm (edate))
		    goto bad_date;
		edate.tm_year -= 1900;
		temp_long = tm2time (edate, 1);
		strcpy(principal_data[i].exp_date_txt, temp);
		principal_data[i].exp_date = temp_long;
		changed = 1;
	    }

	    /* maximum lifetime */
	    fprintf(stdout, "Max ticket lifetime (*5 minutes) [ %d ] ? ",
		    principal_data[i].max_life);
	    fflush(stdout);
	    while (n_gets(temp, sizeof(temp)) && *temp) {
		if (sscanf(temp, "%ld", &temp_long) != 1)
		    goto bad_life;
		if (temp_long > 255 || (temp_long < 0)) {
		bad_life:
		    fprintf(stdout, "\07\07Invalid, choose 0-255\n");
		    fprintf(stdout,
			    "Max ticket lifetime (*5 minutes) [ %d ] ? ",
			    principal_data[i].max_life);
		    fflush(stdout);
		    continue;
		}
		changed = 1;
		/* dont clobber */
		principal_data[i].max_life = (unsigned short) temp_long;
		break;
	    }

	    /* attributes */
	    fprintf(stdout, "Attributes [ %d ] ? ",
		    principal_data[i].attributes);
	    fflush(stdout);
	    while (n_gets(temp, sizeof(temp)) && *temp) {
		if (sscanf(temp, "%ld", &temp_long) != 1)
		    goto bad_att;
		if (temp_long > 65535 || (temp_long < 0)) {
		bad_att:
		    fprintf(stdout, "\07\07Invalid, choose 0-65535\n");
		    fprintf(stdout, "Attributes [ %d ] ? ",
			    principal_data[i].attributes);
		    fflush(stdout);
		    continue;
		}
		changed = 1;
		/* dont clobber */
		principal_data[i].attributes =
		    (unsigned short) temp_long;
		break;
	    }

	    /*
	     * remaining fields -- key versions and mod info, should
	     * not be directly manipulated 
	     */
	    if (changed) {
		if (kerb_put_principal(&principal_data[i], 1)) {
		    fprintf(stdout,
			"\nError updating Kerberos database");
		} else {
		    fprintf(stdout, "Edit O.K.");
		}
	    } else {
		fprintf(stdout, "Unchanged");
	    }


	    memset(&principal_data[i].key_low, 0, 4);
	    memset(&principal_data[i].key_high, 0, 4);
	    fflush(stdout);
	    break;
	}
    }
    if (more) {
	fprintf(stdout, "\nThere were more tuples found ");
	fprintf(stdout, "than there were space for");
      }
    return 1;
}

static void
cleanup(void)
{

    memset(master_key, 0, sizeof(master_key));
    memset(session_key, 0, sizeof(session_key));
    memset(master_key_schedule, 0, sizeof(master_key_schedule));
    memset(principal_data, 0, sizeof(principal_data));
    memset(new_key, 0, sizeof(new_key));
    memset(pw_str, 0, sizeof(pw_str));
}

int
main(int argc, char **argv)
{
    /* Local Declarations */

    long    n;

    while (--argc > 0 && (*++argv)[0] == '-')
	for (i = 1; argv[0][i] != '\0'; i++) {
	    switch (argv[0][i]) {

		/* debug flag */
	    case 'd':
		debug = 1;
		continue;

		/* debug flag */
#ifdef DEBUG
	    case 'l':
		kerb_debug |= 1;
		continue;
#endif
	    case 'n':		/* read MKEYFILE for master key */
		nflag = 1;
		continue;

	    default:
		warnx ("illegal flag \"%c\"", argv[0][i]);
		Usage();	/* Give message and die */
	    }
	}

    fprintf(stdout, "Opening database...\n");
    fflush(stdout);
    kerb_init();
    if (argc > 0)
	if (kerb_db_set_name(*argv) != 0)
	    errx (1, "Could not open altername database name");

    if (kdb_get_master_key ((nflag == 0) ? KDB_GET_PROMPT : 0, 
			    &master_key, master_key_schedule) != 0)
	errx (1, "Couldn't read master key.");

    if ((master_key_version = kdb_verify_master_key(&master_key,
						    master_key_schedule,
						    stdout)) < 0)
      return 1;

    /* Initialize non shared random sequence */
    des_init_random_number_generator(&master_key);

    /* lookup the default values */
    n = kerb_get_principal(KERB_DEFAULT_NAME, KERB_DEFAULT_INST,
			   &default_princ, 1, &more);
    if (n != 1)
	errx (1, "Kerberos error on default value lookup, %ld found.", n);
    fprintf(stdout, "Previous or default values are in [brackets] ,\n");
    fprintf(stdout, "enter return to leave the same, or new value.\n");

    while (change_principal()) {
    }

    cleanup();
    return 0;
}
@


1.4
log
@New kdb_edit
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3
log
@more 63 bit lossage
@
text
@d1 2
a2 1
/*	$Id: kdb_edit.c,v 1.2 1996/09/16 18:48:53 millert Exp $	*/
d6 1
a6 1
 *	of the Massachusetts Institute of Technology
d30 1
a30 1
#include <adm_locl.h>
d36 1
a36 1
#define zaptime(foo) bzero((char *)(foo), sizeof(*(foo)))
a37 2
static char    prog[32];
char   *progname = prog;
d59 17
a75 1
static int master_key_version;
d84 2
a85 8
/*
 * "fgets" where the nl is zapped afterwards.
 */
static char*
z_fgets(cp, count, fp)
	char *cp;
	int count;
	FILE *fp;
d87 5
a91 10
	int ix;
	char *p;

	if (fgets(cp, count, fp) == 0) {
		return 0;
	}
	cp[count-1] = 0;
	if ((p = strchr(cp, '\n')) == 0) {
		return 0;
	}
d93 1
a93 1
	return cp;
d104 1
a104 1
    int    temp_long;
d106 1
a106 2
    struct tm 	*tp, edate, *localtime(const time_t *);
    long 	maketime(struct tm *tp, int local);
d110 1
a110 1
    if (!z_fgets(input_name, sizeof input_name, stdin) || *input_name == '\0')
d115 1
a115 1
    z_fgets(input_instance, sizeof input_instance, stdin);
d120 2
a121 1
	z_fgets(temp, sizeof temp, stdin); /* Default case should work, it didn't */
d127 5
a131 2
	strcpy(principal_data[0].name, input_name);
	strcpy(principal_data[0].instance, input_instance);
d134 6
a139 1
	principal_data[0].max_life = default_princ.max_life;
d145 5
a149 4
    (void) snprintf(principal_data[0].exp_date_txt,
		    sizeof(principal_data[0].exp_date_txt), "%4d-%02d-%02d",
		    tp->tm_year > 1900 ? tp->tm_year : tp->tm_year + 1900,
		    tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
d156 1
d165 2
a166 2
		bcopy(&principal_data[i], &old_principal,
		      sizeof(old_principal));
d168 1
a168 1
		z_fgets(temp, sizeof temp, stdin);
a171 1
	    fflush(stdout);
d178 3
a180 2
                des_read_pw_string(pw_str, sizeof pw_str,
			"\nNew Password: ", TRUE);
d185 1
a185 1
		    z_fgets(temp, sizeof temp, stdin);
d189 1
a189 1
			bzero(new_key, sizeof(des_cblock));
d194 1
a194 1
			bzero(pw_str, sizeof pw_str);	/* "RANDOM" */
d197 1
a197 1
			bzero(new_key, sizeof(des_cblock));
d202 1
a202 1
			bzero(pw_str, sizeof pw_str);
d206 1
a206 1
		    z_fgets(temp, sizeof temp, stdin);
d210 1
a210 1
			bzero(new_key, sizeof(des_cblock));
d215 1
a215 1
			bzero(pw_str, sizeof pw_str);	/* "NULL" */
d224 1
a224 1
		    bzero(new_key, sizeof(des_cblock));
d229 1
a229 1
		    bzero(pw_str, sizeof pw_str);
d236 4
a239 4
		bcopy(new_key, &principal_data[i].key_low, 4);
		bcopy(((int *) new_key) + 1,
		    &principal_data[i].key_high, 4);
		bzero(new_key, sizeof(new_key));
d255 1
d257 2
a258 3
	    while (z_fgets(temp, sizeof temp, stdin) &&
		   ((n = strlen(temp)) >
		    sizeof(principal_data[0].exp_date_txt))) {
d264 1
a271 1
		(void) strcpy(principal_data[i].exp_date_txt, temp);
d275 1
a275 1
		if (!(principal_data[i].exp_date = maketime(&edate, 1)))
d277 4
d287 3
a289 2
	    while (z_fgets(temp, sizeof temp, stdin) && *temp) {
		if (sscanf(temp, "%d", &temp_long) != 1)
d297 1
d309 3
a311 2
	    while (z_fgets(temp, sizeof temp, stdin) && *temp) {
		if (sscanf(temp, "%d", &temp_long) != 1)
d318 1
d344 2
a345 2
	    bzero(&principal_data[i].key_low, 4);
	    bzero(&principal_data[i].key_high, 4);
d361 6
a366 6
    bzero(master_key, sizeof(master_key));
    bzero(session_key, sizeof(session_key));
    bzero(master_key_schedule, sizeof(master_key_schedule));
    bzero(principal_data, sizeof(principal_data));
    bzero(new_key, sizeof(new_key));
    bzero(pw_str, sizeof(pw_str));
d374 1
a374 1
    int		n;
a375 9
    prog[sizeof prog - 1] = '\0';	/* make sure terminated */
    strncpy(prog, argv[0], sizeof prog - 1);	/* salt away invoking
						 * program */

    /* Assume <=32 signals */
    if (NSIG > 32) {
	fprintf(stderr, "%s: more than 32 signals defined.\n", prog);
	exit(-1);
    }
d396 1
a396 2
		fprintf(stderr, "%s: illegal flag \"%c\"\n",
			progname, argv[0][i]);
d399 1
a399 1
	};
d404 7
a410 23
    if (argc > 0) {
	if (kerb_db_set_name(*argv) != 0) {
	    fprintf(stderr, "Could not open altername database name\n");
	    exit(1);
	}
    }

#ifdef	notdef
    no_core_dumps();		/* diddle signals to avoid core dumps! */

    /* ignore whatever is reasonable */
    signal(SIGHUP, SIG_IGN);
    signal(SIGINT, SIG_IGN);
    signal(SIGTSTP, SIG_IGN);

#endif

    if (kdb_get_master_key ((nflag == 0), 
			    &master_key, master_key_schedule) != 0) {
      fprintf (stdout, "Couldn't read master key.\n");
      fflush (stdout);
      exit (-1);
    }
d415 1
a415 1
      exit (-1);
d423 2
a424 6
    if (n != 1) {
	fprintf(stderr,
	     "%s: Kerberos error on default value lookup, %ld found.\n",
		progname, n);
	exit(-1);
    }
d432 1
a432 1
    exit(0);
a433 28

#if 0
static void
sig_exit(sig, code, scp)
    int     sig, code;
    struct sigcontext *scp;
{
    cleanup();
    fprintf(stderr,
	"\nSignal caught, sig = %d code = %d old pc = 0x%X \nexiting",
        sig, code, scp->sc_pc);
    exit(-1);
}

static void
no_core_dumps()
{
    signal(SIGQUIT, sig_exit);
    signal(SIGILL, sig_exit);
    signal(SIGTRAP, sig_exit);
    signal(SIGIOT, sig_exit);
    signal(SIGEMT, sig_exit);
    signal(SIGFPE, sig_exit);
    signal(SIGBUS, sig_exit);
    signal(SIGSEGV, sig_exit);
    signal(SIGSYS, sig_exit);
}
#endif
@


1.2
log
@sprintf -> snprintf paranoia
@
text
@d1 1
a1 1
/*	$Id: kdb_edit.c,v 1.1.1.1 1995/12/14 06:52:42 tholo Exp $	*/
d60 1
a60 1
static long master_key_version;
d100 1
a100 1
    long    temp_long;
d223 1
a223 1
		bcopy(((long *) new_key) + 1,
d270 1
a270 1
		if (sscanf(temp, "%ld", &temp_long) != 1)
d290 1
a290 1
		if (sscanf(temp, "%ld", &temp_long) != 1)
d352 1
a352 1
    long    n;
a357 5
    /* Assume a long is four bytes */
    if (sizeof(long) != 4) {
	fprintf(stdout, "%s: size of long is %d.\n", prog, (int)sizeof(long));
	exit(-1);
    }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d133 4
a136 3
    (void) sprintf(principal_data[0].exp_date_txt, "%4d-%02d-%02d",
		   tp->tm_year > 1900 ? tp->tm_year : tp->tm_year + 1900,
		   tp->tm_mon + 1, tp->tm_mday); /* January is 0, not 1 */
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@
