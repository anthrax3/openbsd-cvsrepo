head	1.7;
access;
symbols
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	initial:1.1.1.1
	KTH/tholo:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2000.02.25.15.14.58;	author hin;	state dead;
branches;
next	1.6;

1.6
date	98.05.18.01.24.55;	author art;	state Exp;
branches;
next	1.5;

1.5
date	98.02.25.15.51.02;	author art;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.11.53.56;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.12.12.05.30.17;	author art;	state Exp;
branches;
next	1.2;

1.2
date	97.11.28.12.48.48;	author art;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.06.52.50;	author tholo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.14.06.52.50;	author tholo;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove old KerberosIV code. (art@@ ok)
@
text
@/*	$OpenBSD: klist.c,v 1.6 1998/05/18 01:24:55 art Exp $	*/
/*	$KTH: klist.c,v 1.35 1998/05/01 05:16:33 joda Exp $	*/

/*
 * This source code is no longer held under any constraint of USA
 * `cryptographic laws' since it was exported legally.  The cryptographic
 * functions were removed from the code and a "Bones" distribution was
 * made.  A Commodity Jurisdiction Request #012-94 was filed with the
 * USA State Department, who handed it to the Commerce department.  The
 * code was determined to fall under General License GTDA under ECCN 5D96G,
 * and hence exportable.  The cryptographic interfaces were re-added by Eric
 * Young, and then KTH proceeded to maintain the code in the free world.
 */

/*-
 * Copyright (C) 1989 by the Massachusetts Institute of Technology
 *
 * Export of this software from the United States of America is assumed
 * to require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 */

/*
 * Lists your current Kerberos tickets.
 * Written by Bill Sommerfeld, MIT Project Athena.
 */

#include "kuser_locl.h"

#include <sys/ioctl.h>
#include <sys/ioccom.h>
#include <kerberosIV/kafs.h>

static int option_verbose = 0;

static char progname[]="klist";

static char *
short_date(time_t dp)
{
    char *cp;
    time_t t = (time_t)dp;

    if (t == (time_t)(-1L)) return "***  Never  *** ";
    cp = ctime(&t) + 4;
    cp[15] = '\0';
    return (cp);
}

/* prints the approximate kdc time differential as something human
   readable */
static void
print_time_diff(void)
{
    int d = abs(krb_get_kdc_time_diff());
    char buf[80];
  
    if ((option_verbose && d > 0) || d > 60) {
	unparse_time_approx (d, buf, sizeof(buf));
	printf ("Time diff:\t%s\n", buf);
    }
}

static void
display_tktfile(char *file, int tgt_test, int long_form)
{
    krb_principal pr;
    char    buf1[20], buf2[20];
    int     k_errno;
    CREDENTIALS c;
    int     header = 1;

    if ((file == NULL) && ((file = getenv("KRBTKFILE")) == NULL))
	file = TKT_FILE;

    if (long_form)
	printf("Ticket file:	%s\n", file);

    /* 
     * Since krb_get_tf_realm will return a ticket_file error, 
     * we will call tf_init and tf_close first to filter out
     * things like no ticket file.  Otherwise, the error that 
     * the user would see would be 
     * klist: can't find realm of ticket file: No ticket file (tf_util)
     * instead of
     * klist: No ticket file (tf_util)
     */

    /* Open ticket file */
    if ((k_errno = tf_init(file, R_TKT_FIL))) {
	if (!tgt_test)
	    warnx("%s", krb_get_err_text(k_errno));
	exit(1);
    }
    /* Close ticket file */
    tf_close();

    /* 
     * We must find the realm of the ticket file here before calling
     * tf_init because since the realm of the ticket file is not
     * really stored in the principal section of the file, the
     * routine we use must itself call tf_init and tf_close.
     */
    if ((k_errno = krb_get_tf_realm(file, pr.realm)) != KSUCCESS) {
	if (!tgt_test)
	    warnx("can't find realm of ticket file: %s", 
		  krb_get_err_text(k_errno));
	exit(1);
    }

    /* Open ticket file */
    if ((k_errno = tf_init(file, R_TKT_FIL))) {
	if (!tgt_test)
	    warnx("%s", krb_get_err_text(k_errno));
	exit(1);
    }
    /* Get principal name and instance */
    if ((k_errno = tf_get_pname(pr.name)) ||
	(k_errno = tf_get_pinst(pr.instance))) {
	if (!tgt_test)
	    warnx("%s", krb_get_err_text(k_errno));
	exit(1);
    }

    /* 
     * You may think that this is the obvious place to get the
     * realm of the ticket file, but it can't be done here as the
     * routine to do this must open the ticket file.  This is why 
     * it was done before tf_init.
     */
       
    if (!tgt_test && long_form)
	printf("Principal:\t%s\n", krb_unparse_name(&pr));
    print_time_diff();
    printf("\n");
    while ((k_errno = tf_get_cred(&c)) == KSUCCESS) {
	if (!tgt_test && long_form && header) {
	    printf("%-15s  %-15s  %s%s\n",
		   "  Issued", "  Expires", "  Principal", 
		   option_verbose ? " (kvno)" : "");
	    header = 0;
	}
	if (tgt_test) {
	    c.issue_date = krb_life_to_time(c.issue_date, c.lifetime);
	    if (!strcmp(c.service, KRB_TICKET_GRANTING_TICKET) &&
		!strcmp(c.instance, pr.realm)) {
		if (time(0) < c.issue_date)
		    exit(0);		/* tgt hasn't expired */
		else
		    exit(1);		/* has expired */
	    }
	    continue;			/* not a tgt */
	}
	if (long_form) {
	    struct timeval tv;

	    strcpy(buf1, short_date(c.issue_date));
	    c.issue_date = krb_life_to_time(c.issue_date, c.lifetime);
	    krb_kdctimeofday(&tv);
	    if (option_verbose || tv.tv_sec < (unsigned long) c.issue_date)
	        strcpy(buf2, short_date(c.issue_date));
	    else
	        strcpy(buf2, ">>> Expired <<<");
	    printf("%s  %s  ", buf1, buf2);
	}
	printf("%s", krb_unparse_name_long(c.service, c.instance, c.realm));
	if(long_form && option_verbose)
	  printf(" (%d)", c.kvno);
	printf("\n");
    }
    if (tgt_test)
	exit(1);			/* no tgt found */
    if (header && long_form && k_errno == EOF) {
	printf("No tickets in file.\n");
    }
}

/* adapted from getst() in librkb */
/*
 * ok_getst() takes a file descriptor, a string and a count.  It reads
 * from the file until either it has read "count" characters, or until
 * it reads a null byte.  When finished, what has been read exists in
 * the given string "s".  If "count" characters were actually read, the
 * last is changed to a null, so the returned string is always null-
 * terminated.  ok_getst() returns the number of characters read, including
 * the null terminator.
 *
 * If there is a read error, it returns -1 (like the read(2) system call)
 */

static int
ok_getst(int fd, char *s, int n)
{
    int count = n;
    int err;

    if (s == NULL)
	return -1;

    while ((err = read(fd, s, 1)) > 0 && (--count) != 0)
        if (*s++ == '\0')
            return (n - count);
    if (err < 0)
	return(-1);
    *s = '\0';
    return (n - count);
}

static void
display_tokens(void)
{
    u_int32_t i;
    unsigned char t[128];
    struct ViceIoctl parms;

    parms.in = (void *)&i;
    parms.in_size = sizeof(i);
    parms.out = (void *)t;
    parms.out_size = sizeof(t);

    for (i = 0; k_pioctl(NULL, VIOCGETTOK, &parms, 0) == 0; i++) {
        int32_t size_secret_tok, size_public_tok;
        char *cell;
	struct ClearToken ct;
	unsigned char *r = t;

	memcpy(&size_secret_tok, r, sizeof(size_secret_tok));
	/* dont bother about the secret token */
	r += size_secret_tok + sizeof(size_secret_tok);
	memcpy(&size_public_tok, r, sizeof(size_public_tok));
	r += sizeof(size_public_tok);
	memcpy(&ct, r, size_public_tok);
	r += size_public_tok;
	/* there is a int32_t with length of cellname, but we dont read it */
	r += sizeof(int32_t);
	cell = r;

	printf("%-15s  ", short_date(ct.BeginTimestamp));
	printf("%-15s  ", short_date(ct.EndTimestamp));
	if ((ct.EndTimestamp - ct.BeginTimestamp) & 1)
	  printf("User's (AFS ID %d) tokens for %s", ct.ViceId, cell);
	else
	  printf("Tokens for %s", cell);
	if (option_verbose)
	    printf(" (%d)", ct.AuthHandle);
	putchar('\n');
    }
}

static void
display_srvtab(char *file)
{
    int stab;
    char serv[SNAME_SZ];
    char inst[INST_SZ];
    char rlm[REALM_SZ];
    unsigned char key[8];
    unsigned char vno;
    int count;

    printf("Server key file:   %s\n", file);
	
    if ((stab = open(file, O_RDONLY, 0400)) < 0) {
	perror(file);
	exit(1);
    }
    printf("%-15s %-15s %-10s %s\n","Service","Instance","Realm",
	   "Key Version");
    printf("------------------------------------------------------\n");

    /* argh. getst doesn't return error codes, it silently fails */
    while (((count = ok_getst(stab, serv, SNAME_SZ)) > 0)
	   && ((count = ok_getst(stab, inst, INST_SZ)) > 0)
	   && ((count = ok_getst(stab, rlm, REALM_SZ)) > 0)) {
	if (((count = read(stab,  &vno,1)) != 1) ||
	     ((count = read(stab, key,8)) != 8)) {
	    if (count < 0)
		err(1, "reading from key file");
	    else
		errx(1, "key file truncated");
	}
	printf("%-15s %-15s %-15s %d\n",serv,inst,rlm,vno);
    }
    if (count < 0)
	warn(file);
    close(stab);
}

static void
usage(void)
{
    fprintf(stderr,
	    "Usage: %s [ -v | -s | -t ] [ -f filename ] [-tokens] [-srvtab ]\n",
	    progname);
    exit(1);
}

/* ARGSUSED */
int
main(int argc, char **argv)
{
    int     long_form = 1;
    int     tgt_test = 0;
    int     do_srvtab = 0;
    int     do_tokens = 0;
    char   *tkt_file = NULL;

    while (*(++argv) != NULL) {
	if (!strcmp(*argv, "-v")) {
	    option_verbose = 1;
	    continue;
	}
	if (!strcmp(*argv, "-s")) {
	    long_form = 0;
	    continue;
	}
	if (!strcmp(*argv, "-t")) {
	    tgt_test = 1;
	    long_form = 0;
	    continue;
	}
	if (strcmp(*argv, "-tokens") == 0
	    || strcmp(*argv, "-T") == 0) {
	    do_tokens = k_hasafs();
	    continue;
	}
	if (!strcmp(*argv, "-l")) {	/* now default */
	    continue;
	}
	if (!strncmp(*argv, "-f", 2)) {
	    if (*(++argv)) {
		tkt_file = *argv;
		continue;
	    } else
		usage();
	}
	if (!strcmp(*argv, "-srvtab")) {
		if (tkt_file == NULL)	/* if no other file spec'ed,
					   set file to default srvtab */
		    tkt_file = KEYFILE;
		do_srvtab = 1;
		continue;
	}
	usage();
    }

    if (do_srvtab)
	display_srvtab(tkt_file);
    else
	display_tktfile(tkt_file, tgt_test, long_form);
    if (long_form && do_tokens){
	printf("\nAFS tokens:\n");
	display_tokens();
    }
    exit(0);
}
@


1.6
log
@update to kth-krb4-980514
@
text
@d1 1
a1 1
/*	$OpenBSD: klist.c,v 1.5 1998/02/25 15:51:02 art Exp $	*/
@


1.5
log
@nicer copyrights explaining that we are not criminals.
@
text
@d1 2
a2 2
/*	$OpenBSD: klist.c,v 1.4 1998/02/18 11:53:56 art Exp $	*/
/* $KTH: klist.c,v 1.28 1997/05/26 17:33:50 bg Exp $ */
d63 14
d146 3
a148 1
	printf("Principal:\t%s\n\n", krb_unparse_name(&pr));
d168 2
d172 2
a173 1
	    if (time(0) < (unsigned long) c.issue_date)
@


1.4
log
@OpenBSD-tags and corrections of copyrights
@
text
@d1 1
a1 1
/*	$OpenBSD: klist.c,v 1.3 1997/12/12 05:30:17 art Exp $	*/
d5 8
a12 1
 * This software may now be redistributed outside the US.
@


1.3
log
@Another upgrade of kth-krb + many fixes of strcpys and unchecked pointers.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 10
a14 1
 * Copyright 1987, 1988 by the Massachusetts Institute of Technology. 
d16 10
a25 2
 * For copying and distribution information, please see the file
 * <mit-copyright.h>. 
d27 3
@


1.2
log
@The first big step towards a complete upgrade to kth-krb4-0.9.7
@
text
@d1 1
d25 1
a25 1
short_date(int32_t dp)
d163 5
a167 1
    while ((err = read(fd, s, 1)) > 0 && --count)
d177 1
a177 1
display_tokens()
a181 2
    struct ClearToken ct;
    int size_secret_tok, size_public_tok;
d189 1
d191 13
a203 4
	memcpy(&size_secret_tok, t, 4);
	memcpy(&size_public_tok, t + 4 + size_secret_tok, 4);
	memcpy(&ct, t + 4 + size_secret_tok + 4, size_public_tok);
	cell = t + 4 + size_secret_tok + 4 + size_public_tok + 4;
d275 1
a275 1
    while (*(++argv)) {
d318 2
a319 1
    if (long_form && do_tokens)
d321 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$Id$	*/
d3 5
a7 3
/*-
 * Copyright 1987, 1988 by the Student Information Processing Board
 *	of the Massachusetts Institute of Technology
a8 14
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for any purpose and without fee is
 * hereby granted, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation,
 * and that the names of M.I.T. and the M.I.T. S.I.P.B. not be
 * used in advertising or publicity pertaining to distribution
 * of the software without specific, written prior permission.
 * M.I.T. and the M.I.T. S.I.P.B. make no representations about
 * the suitability of this software for any purpose.  It is
 * provided "as is" without express or implied warranty.
 */

/*
d13 1
a13 1
#include <kuser_locl.h>
d15 7
a21 1
char   *whoami;			/* What was I invoked as?? */
d24 1
a24 2
short_date(dp)
    time_t *dp;
d26 2
a27 1
    register char *cp;
d29 2
a30 2
    if (*dp == (time_t)(-1L)) return "***  Never  *** ";
    cp = ctime(dp) + 4;
d36 1
a36 3
display_tktfile(file, tgt_test, long_form)
char *file;
int tgt_test, long_form;
d38 1
a38 3
    char    pname[ANAME_SZ];
    char    pinst[INST_SZ];
    char    prealm[REALM_SZ];
d63 1
a63 1
		fprintf(stderr, "%s: %s\n", whoami, krb_err_txt[k_errno]);
d67 1
a67 1
    (void) tf_close();
d75 1
a75 1
    if ((k_errno = krb_get_tf_realm(file, prealm)) != KSUCCESS) {
d77 2
a78 2
	    fprintf(stderr, "%s: can't find realm of ticket file: %s\n",
		    whoami, krb_err_txt[k_errno]);
d85 1
a85 1
		fprintf(stderr, "%s: %s\n", whoami, krb_err_txt[k_errno]);
d89 5
a93 5
    if ((k_errno = tf_get_pname(pname)) ||
	(k_errno = tf_get_pinst(pinst))) {
	    if (!tgt_test)
		    fprintf(stderr, "%s: %s\n", whoami, krb_err_txt[k_errno]);
	    exit(1);
d104 1
a104 3
	printf("Principal:\t%s%s%s%s%s\n\n", pname,
	       (pinst[0] ? "." : ""), pinst,
	       (prealm[0] ? "@@" : ""), prealm);
d107 3
a109 2
	    printf("%-15s  %-15s  %s\n",
		   "  Issued", "  Expires", "  Principal");
d114 2
a115 2
	    if (!strcmp(c.service, TICKET_GRANTING_TICKET) &&
		!strcmp(c.instance, prealm)) {
d124 1
a124 1
	    (void) strcpy(buf1, short_date(&c.issue_date));
d127 1
a127 1
	        (void) strcpy(buf2, short_date(&c.issue_date));
d129 1
a129 1
	        (void) strcpy(buf2, ">>> Expired <<< ");
d132 4
a135 3
	printf("%s%s%s%s%s\n",
	       c.service, (c.instance[0] ? "." : ""), c.instance,
	       (c.realm[0] ? "@@" : ""), c.realm);
d158 1
a158 4
ok_getst(fd, s, n)
    int fd;
    register char *s;
    int n;
d160 1
a160 1
    register count = n;
d172 34
a205 2
display_srvtab(file)
char *file;
d229 2
a230 2
	if (((count = read(stab,(char *) &vno,1)) != 1) ||
	     ((count = read(stab,(char *) key,8)) != 8)) {
d232 1
a232 1
		perror("reading from key file");
d234 1
a234 2
		fprintf(stderr, "key file truncated\n");
	    exit(1);
d239 2
a240 2
	perror(file);
    (void) close(stab);
d244 1
a244 1
usage()
d247 2
a248 1
        "Usage: %s [ -s | -t ] [ -file filename ] [ -srvtab ]\n", whoami);
d254 1
a254 3
main(argc, argv)
    int     argc;
    char  **argv;
d259 1
a260 3
    char   *cp;

    whoami = (cp = strrchr(*argv, '/')) ? cp + 1 : *argv;
d263 4
d276 5
d284 1
a284 1
	if (!strcmp(*argv, "-file")) {
d305 2
@


1.1.1.1
log
@Kerberos IV code, based on a merge of fixed code from KTH and original
4.4BSD Lite code (international edition).  Provides all functionality
from the original 4.4BSD code plus standard Kerberos elements that were
omitted in the 4.4BSD code.
@
text
@@

