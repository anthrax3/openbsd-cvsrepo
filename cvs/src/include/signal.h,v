head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.22.0.8
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.20.0.8
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.4
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.12.0.6
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.05.09.23.55.52;	author guenther;	state Exp;
branches;
next	1.24;
commitid	ulYahYCAglSNcKb7;

1.24
date	2016.02.04.22.04.34;	author millert;	state Exp;
branches;
next	1.23;
commitid	dApUhkHQHJlKlOWY;

1.23
date	2015.11.10.04.30.59;	author guenther;	state Exp;
branches;
next	1.22;
commitid	GTAoVjpQRAdNHXVz;

1.22
date	2014.07.12.02.51.52;	author guenther;	state Exp;
branches;
next	1.21;
commitid	FcUmXewR1kLG1I0x;

1.21
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.06.10.21.31.03;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.13.16.22.05;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.03.16.53.48;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.06.17.39.22;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.01.20.10.24;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.26.07.08.22;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.29.14.44.04;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.17.21.38.14;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.21.19.09.01;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.03.17.25.00;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.11.20.11.18.26;	author d;	state Exp;
branches;
next	1.3;

1.3
date	96.09.20.07.27.50;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.18.19.15.53;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Remove sigreturn declaration and the now-unused libc syscall stub
@
text
@/*	$OpenBSD: signal.h,v 1.24 2016/02/04 22:04:34 millert Exp $	*/
/*	$NetBSD: signal.h,v 1.8 1996/02/29 00:04:57 jtc Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)signal.h	8.3 (Berkeley) 3/30/94
 */

#ifndef _USER_SIGNAL_H
#define _USER_SIGNAL_H

#include <sys/signal.h>

#if __BSD_VISIBLE || __POSIX_VISIBLE || __XPG_VISIBLE
#include <sys/types.h>
#endif

__BEGIN_DECLS
#if __BSD_VISIBLE
extern const char *const sys_signame[_NSIG];
extern const char *const sys_siglist[_NSIG];
#endif

int	raise(int);
#if __BSD_VISIBLE || __POSIX_VISIBLE || __XPG_VISIBLE
#if __BSD_VISIBLE || (__XPG_VISIBLE >= 500 && __XPG_VISIBLE < 700)
void	(*bsd_signal(int, void (*)(int)))(int);
#endif
int	kill(pid_t, int);
int	sigaction(int, const struct sigaction *__restrict,
	    struct sigaction *__restrict);
int	sigaddset(sigset_t *, int);
int	sigdelset(sigset_t *, int);
int	sigemptyset(sigset_t *);
int	sigfillset(sigset_t *);
int	sigismember(const sigset_t *, int);
int	sigpending(sigset_t *);
int	sigprocmask(int, const sigset_t *__restrict, sigset_t *__restrict);
#if __POSIX_VISIBLE >= 199506
int	pthread_sigmask(int, const sigset_t *__restrict, sigset_t *__restrict);
#endif
int	sigsuspend(const sigset_t *);

#if !defined(_ANSI_LIBRARY)

extern int *__errno(void);

__only_inline int sigaddset(sigset_t *__set, int __signo)
{
	if (__signo <= 0 || __signo >= _NSIG) {
		*__errno() = 22;		/* EINVAL */
		return -1;
	}
	*__set |= (1U << ((__signo)-1));	/* sigmask(__signo) */
	return (0);
}

__only_inline int sigdelset(sigset_t *__set, int __signo)
{
	if (__signo <= 0 || __signo >= _NSIG) {
		*__errno() = 22;		/* EINVAL */
		return -1;
	}
	*__set &= ~(1U << ((__signo)-1));	/* sigmask(__signo) */
	return (0);
}

__only_inline int sigismember(const sigset_t *__set, int __signo)
{
	if (__signo <= 0 || __signo >= _NSIG) {
		*__errno() = 22;		/* EINVAL */
		return -1;
	}
	return ((*__set & (1U << ((__signo)-1))) != 0);
}

__only_inline int sigemptyset(sigset_t *__set)
{
	*__set = 0;
	return (0);
}

__only_inline int sigfillset(sigset_t *__set)
{
	*__set = ~(sigset_t)0;
	return (0);
}

#endif /* !_ANSI_LIBRARY */

#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
int	killpg(pid_t, int);
int	siginterrupt(int, int);
int	sigpause(int);
int	sigaltstack(const struct sigaltstack *__restrict,
	    struct sigaltstack *__restrict);
#if __BSD_VISIBLE
int	sigblock(int);
int	sigsetmask(int);
int	sigvec(int, struct sigvec *, struct sigvec *);
int	thrkill(pid_t _tid, int _signum, void *_tcb);
#endif
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */
#if __BSD_VISIBLE ||  __POSIX_VISIBLE >= 199309 || __XPG_VISIBLE >= 500
int	sigwait(const sigset_t *__restrict, int *__restrict);
#endif
#if __BSD_VISIBLE ||  __POSIX_VISIBLE >= 200809
void	psignal(unsigned int, const char *);
#endif
#endif /* __BSD_VISIBLE || __POSIX_VISIBLE || __XPG_VISIBLE */
__END_DECLS

#endif	/* !_USER_SIGNAL_H */
@


1.24
log
@Convert sigemptyset and sigfillset to inline functions to avoid
warnings with newer gcc versions and -Werror=unused-value.
OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.23 2015/11/10 04:30:59 guenther Exp $	*/
a124 1
int	sigreturn(struct sigcontext *);
@


1.23
log
@Split the intra-thread functionality from kill(2) into its own syscall
thrkill(2), rolling the kill(2) syscall number with the ABI change to
avoid breaking binaries during during the transition.  thrkill(2) includes
a 'tcb' argument that eliminates the need for locking in pthread_kill()
and simplifies pthread_cancel().  Switch __stack_smash_handler() to use
thrkill(2) and explicitly unblock SIGABRT.

Minor bump to both libc and libpthread: make sure you install a new kernel!

ok semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.22 2014/07/12 02:51:52 guenther Exp $	*/
d74 2
a75 1
__only_inline int sigaddset(sigset_t *__set, int __signo) {
d84 2
a85 1
__only_inline int sigdelset(sigset_t *__set, int __signo) {
d94 2
a95 1
__only_inline int sigismember(const sigset_t *__set, int __signo) {
d102 13
a115 4

/* List definitions after function declarations, or Reiser cpp gets upset. */
#define	sigemptyset(set)	(*(set) = 0, 0)
#define	sigfillset(set)		(*(set) = ~(sigset_t)0, 0)
@


1.22
log
@Welcome to 1989: assume the compiler support const
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.21 2014/03/16 18:38:30 guenther Exp $	*/
d116 1
@


1.21
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.20 2012/12/05 23:19:57 deraadt Exp $	*/
d46 2
a47 2
extern __const char *__const sys_signame[_NSIG];
extern __const char *__const sys_siglist[_NSIG];
@


1.20
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.19 2012/06/10 21:31:03 guenther Exp $	*/
d70 1
a70 1
#if !defined(_ANSI_LIBRARY) && !defined(lint)
d99 1
a99 1
#endif /* !_ANSI_LIBRARY && !lint */
@


1.19
log
@Improve standards compliance: bsd_signal() was XSI only and has been dropped
from the most recent version, use the implementation namespace for variables
in inline functions, and add __restrict as specified.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.18 2012/05/13 16:22:05 espie Exp $	*/
a37 1
#include <sys/cdefs.h>
@


1.18
log
@functions are top-level objects anyways, make that clearer.
Okay otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.17 2012/01/03 16:53:48 kettenis Exp $	*/
d53 1
d55 1
d57 2
a58 1
int	sigaction(int, const struct sigaction *, struct sigaction *);
d65 1
a65 1
int	sigprocmask(int, const sigset_t *, sigset_t *);
d67 1
a67 1
int	pthread_sigmask(int, const sigset_t *, sigset_t *);
d75 2
a76 2
__only_inline int sigaddset(sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
d80 1
a80 1
	*set |= (1U << ((signo)-1));		/* sigmask(signo) */
d84 2
a85 2
__only_inline int sigdelset(sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
d89 1
a89 1
	*set &= ~(1U << ((signo)-1));		/* sigmask(signo) */
d93 2
a94 2
__only_inline int sigismember(const sigset_t *set, int signo) {
	if (signo <= 0 || signo >= _NSIG) {
d98 1
a98 1
	return ((*set & (1U << ((signo)-1))) != 0);
d110 2
a111 1
int	sigaltstack(const struct sigaltstack *, struct sigaltstack *);
d120 1
a120 1
int	sigwait(const sigset_t *, int *);
@


1.17
log
@The prototype for pthread_sigmask(2) is supposed to live in <signal.h>
instead of <pthread.h>.

ok guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.16 2011/11/22 21:13:30 guenther Exp $	*/
d70 2
a72 2
	int *__errno(void);

a81 2
	int *__errno(void);

a90 2
	int *__errno(void);

@


1.16
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.15 2011/07/06 17:39:22 guenther Exp $	*/
d63 3
@


1.15
log
@sigset_t is unsigned, so eliminate a warning by shifting a 1U instead
of a 1 when creating signal masks.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.14 2010/10/01 20:10:24 guenther Exp $	*/
a107 2
int	sigreturn(struct sigcontext *);
int	sigstack(const struct sigstack *, struct sigstack *);
a109 1
void	psignal(unsigned int, const char *);
d111 1
d115 1
d119 3
a121 1
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */
@


1.14
log
@Now that __only_inline is in <sys/cdefs.h>, replace the local versions in
<ctype.h> and <signal.h>

ok kettenis@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.13 2010/07/26 07:08:22 kettenis Exp $	*/
d74 1
a74 1
	*set |= (1 << ((signo)-1));		/* sigmask(signo) */
d85 1
a85 1
	*set &= ~(1 << ((signo)-1));		/* sigmask(signo) */
d96 1
a96 1
	return ((*set & (1 << ((signo)-1))) != 0);
@


1.13
log
@Always force GNU inline semantics here as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.12 2008/04/29 14:44:04 kettenis Exp $	*/
d65 3
a67 7
#if defined(__GNUC__)
#  if __GNUC_PREREQ__(4, 2)
#define __SIGNAL_INLINE	extern __inline __attribute((__gnu_inline__))
#  else
#define __SIGNAL_INLINE	extern __inline
#  endif
__SIGNAL_INLINE int sigaddset(sigset_t *set, int signo) {
d78 1
a78 1
__SIGNAL_INLINE int sigdelset(sigset_t *set, int signo) {
d89 1
a89 1
__SIGNAL_INLINE int sigismember(const sigset_t *set, int signo) {
d98 1
a98 1
#endif
@


1.12
log
@Make sure sys_signame and sys_siglist are wrapped in __BEGIN_DECLS.
Needed to tell pedantic C++ compilers these symbols have 'C' linkage.

ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.11 2007/03/17 21:38:14 espie Exp $	*/
d66 1
a66 1
#  if  defined(__GNUC_STDC_INLINE__)
@


1.11
log
@allow extern inline stuff to proceed unchanged thru the mess that the
combined GCC and ISO committees managed to make out of it.

With this, gcc >= 4.3 can grok its way through it correctly.

okay kettenis@@, with some help figuring stuff out.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.10 2005/12/21 19:09:01 millert Exp $	*/
d45 1
a50 1
__BEGIN_DECLS
@


1.10
log
@Do not declare errno as extern int, set it via __errno().
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.9 2005/12/13 00:35:22 millert Exp $	*/
d66 6
a71 1
extern __inline int sigaddset(sigset_t *set, int signo) {
d82 1
a82 1
extern __inline int sigdelset(sigset_t *set, int signo) {
d93 1
a93 1
extern __inline int sigismember(const sigset_t *set, int signo) {
@


1.9
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.8 2004/05/03 17:25:00 millert Exp $	*/
d67 1
a67 1
	extern int errno;
d70 1
a70 1
		errno = 22;			/* EINVAL */
d78 1
a78 1
	extern int errno;
d81 1
a81 1
		errno = 22;			/* EINVAL */
d89 1
a89 1
	extern int errno;
d92 1
a92 1
		errno = 22;			/* EINVAL */
@


1.8
log
@XPG specifies bsd_signal(3) so make it an alias for signal(3); OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.7 2003/06/02 19:34:12 millert Exp $	*/
d38 1
d41 1
a41 1
#if !defined(_ANSI_SOURCE)
d45 1
a45 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
d52 1
a52 1
#ifndef	_ANSI_SOURCE
d103 1
a103 1
#ifndef _POSIX_SOURCE
a104 1
int	sigblock(int);
a107 1
int	sigsetmask(int);
d110 4
d115 2
a116 1
void	psignal(unsigned int, const char *);
d118 3
a120 2
#endif	/* !_POSIX_SOURCE */
#endif	/* !_ANSI_SOURCE */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.6 2002/02/19 19:39:36 millert Exp $	*/
d52 1
@


1.6
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.5 2002/02/16 21:27:17 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.4 1998/11/20 11:18:26 d Exp $	*/
d67 1
a67 1
#if defined(__GNUC__) && defined(__STDC__)
@


1.4
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3 1996/09/20 07:27:50 deraadt Exp $	*/
d54 1
a54 1
int	raise __P((int));
d56 10
a65 10
int	kill __P((pid_t, int));
int	sigaction __P((int, const struct sigaction *, struct sigaction *));
int	sigaddset __P((sigset_t *, int));
int	sigdelset __P((sigset_t *, int));
int	sigemptyset __P((sigset_t *));
int	sigfillset __P((sigset_t *));
int	sigismember __P((const sigset_t *, int));
int	sigpending __P((sigset_t *));
int	sigprocmask __P((int, const sigset_t *, sigset_t *));
int	sigsuspend __P((const sigset_t *));
d106 11
a116 11
int	killpg __P((pid_t, int));
int	sigblock __P((int));
int	siginterrupt __P((int, int));
int	sigpause __P((int));
int	sigreturn __P((struct sigcontext *));
int	sigsetmask __P((int));
int	sigstack __P((const struct sigstack *, struct sigstack *));
int	sigaltstack __P((const struct sigaltstack *, struct sigaltstack *));
int	sigvec __P((int, struct sigvec *, struct sigvec *));
void	psignal __P((unsigned int, const char *));
int	sigwait __P((const sigset_t *, int *));
@


1.3
log
@pull cdefs.h in sys/signal.h instead; improvement on netbsd pr#2712; laine@@mornignstar.com
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.2 1996/03/18 19:15:53 niklas Exp $	*/
d116 1
@


1.2
log
@From NetBSD: Add prototype for sigaltstack; from John Kohl in PR #2129
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a41 1
#include <sys/cdefs.h>
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: signal.h,v 1.7 1995/05/28 03:10:06 jtc Exp $	*/
d114 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
