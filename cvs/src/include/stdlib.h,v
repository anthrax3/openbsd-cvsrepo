head	1.72;
access;
symbols
	OPENBSD_6_2:1.72.0.4
	OPENBSD_6_2_BASE:1.72
	OPENBSD_6_1:1.68.0.4
	OPENBSD_6_1_BASE:1.68
	OPENBSD_6_0:1.65.0.6
	OPENBSD_6_0_BASE:1.65
	OPENBSD_5_9:1.65.0.2
	OPENBSD_5_9_BASE:1.65
	OPENBSD_5_8:1.65.0.4
	OPENBSD_5_8_BASE:1.65
	OPENBSD_5_7:1.64.0.2
	OPENBSD_5_7_BASE:1.64
	OPENBSD_5_6:1.59.0.4
	OPENBSD_5_6_BASE:1.59
	OPENBSD_5_5:1.56.0.4
	OPENBSD_5_5_BASE:1.56
	OPENBSD_5_4:1.52.0.2
	OPENBSD_5_4_BASE:1.52
	OPENBSD_5_3:1.51.0.2
	OPENBSD_5_3_BASE:1.51
	OPENBSD_5_2:1.50.0.2
	OPENBSD_5_2_BASE:1.50
	OPENBSD_5_1_BASE:1.49
	OPENBSD_5_1:1.49.0.4
	OPENBSD_5_0:1.49.0.2
	OPENBSD_5_0_BASE:1.49
	OPENBSD_4_9:1.47.0.4
	OPENBSD_4_9_BASE:1.47
	OPENBSD_4_8:1.47.0.2
	OPENBSD_4_8_BASE:1.47
	OPENBSD_4_7:1.46.0.2
	OPENBSD_4_7_BASE:1.46
	OPENBSD_4_6:1.46.0.4
	OPENBSD_4_6_BASE:1.46
	OPENBSD_4_5:1.45.0.2
	OPENBSD_4_5_BASE:1.45
	OPENBSD_4_4:1.44.0.2
	OPENBSD_4_4_BASE:1.44
	OPENBSD_4_3:1.40.0.2
	OPENBSD_4_3_BASE:1.40
	OPENBSD_4_2:1.39.0.4
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.39.0.2
	OPENBSD_4_1_BASE:1.39
	OPENBSD_4_0:1.38.0.2
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.37.0.2
	OPENBSD_3_9_BASE:1.37
	OPENBSD_3_8:1.34.0.2
	OPENBSD_3_8_BASE:1.34
	OPENBSD_3_7:1.32.0.4
	OPENBSD_3_7_BASE:1.32
	OPENBSD_3_6:1.32.0.2
	OPENBSD_3_6_BASE:1.32
	OPENBSD_3_5:1.29.0.2
	OPENBSD_3_5_BASE:1.29
	OPENBSD_3_4:1.28.0.2
	OPENBSD_3_4_BASE:1.28
	OPENBSD_3_3:1.24.0.2
	OPENBSD_3_3_BASE:1.24
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.12.0.6
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.4
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.72
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.71;
commitid	ngpX0SPDX30tzjDf;

1.71
date	2017.05.11.11.52.18;	author tom;	state Exp;
branches;
next	1.70;
commitid	VcRBFRejfjpn9zea;

1.70
date	2017.05.10.21.48.29;	author millert;	state Exp;
branches;
next	1.69;
commitid	7u17YeQrfhist9lO;

1.69
date	2017.04.10.05.45.02;	author otto;	state Exp;
branches;
next	1.68;
commitid	eHZQ1wx4WtC7i8dc;

1.68
date	2017.03.06.18.50.28;	author otto;	state Exp;
branches;
next	1.67;
commitid	4k4I06b1GZRfUE1R;

1.67
date	2016.09.20.21.10.22;	author fcambus;	state Exp;
branches;
next	1.66;
commitid	ztewVXC3Z6lDO377;

1.66
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.65;
commitid	mBDdb9HYWgUfDo7E;

1.65
date	2015.07.14.19.05.11;	author millert;	state Exp;
branches;
next	1.64;
commitid	yFmGb7e5HaB4lpu1;

1.64
date	2015.02.08.02.58.50;	author tedu;	state Exp;
branches;
next	1.63;
commitid	eBsU724XzpktwhMy;

1.63
date	2015.01.15.19.55.58;	author tedu;	state Exp;
branches;
next	1.62;
commitid	q52rQh62w7Uznrbs;

1.62
date	2014.12.08.21.45.19;	author deraadt;	state Exp;
branches;
next	1.61;
commitid	HpI1xDivwwEoN4ET;

1.61
date	2014.12.08.20.39.56;	author tedu;	state Exp;
branches;
next	1.60;
commitid	ZjPqKptKictwXXmf;

1.60
date	2014.08.31.02.21.18;	author guenther;	state Exp;
branches;
next	1.59;
commitid	ByaPhxsk4NZYxbFu;

1.59
date	2014.07.09.16.57.49;	author beck;	state Exp;
branches;
next	1.58;
commitid	bJbwGTsjF8lDlyhs;

1.58
date	2014.04.22.14.26.26;	author tedu;	state Exp;
branches;
next	1.57;

1.57
date	2014.04.21.13.17.32;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2013.12.28.01.51.53;	author martynas;	state Exp;
branches;
next	1.55;

1.55
date	2013.12.13.20.48.39;	author millert;	state Exp;
branches;
next	1.54;

1.54
date	2013.11.22.21.32.49;	author millert;	state Exp;
branches;
next	1.53;

1.53
date	2013.10.21.20.33.24;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2013.05.31.20.59.24;	author ajacoutot;	state Exp;
branches;
next	1.51;

1.51
date	2012.12.03.20.08.33;	author millert;	state Exp;
branches;
next	1.50;

1.50
date	2012.06.01.01.01.57;	author guenther;	state Exp;
branches;
next	1.49;

1.49
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.48;

1.48
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.47;

1.47
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	1.46;

1.46
date	2009.06.03.15.52.16;	author millert;	state Exp;
branches;
next	1.45;

1.45
date	2008.09.07.20.36.07;	author martynas;	state Exp;
branches;
next	1.44;

1.44
date	2008.06.24.06.01.33;	author otto;	state Exp;
branches;
next	1.43;

1.43
date	2008.06.20.15.21.06;	author ragge;	state Exp;
branches;
next	1.42;

1.42
date	2008.06.13.21.04.24;	author landry;	state Exp;
branches;
next	1.41;

1.41
date	2008.03.16.19.47.43;	author otto;	state Exp;
branches;
next	1.40;

1.40
date	2007.09.03.14.37.02;	author millert;	state Exp;
branches;
next	1.39;

1.39
date	2006.09.17.16.48.04;	author djm;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.31.00.41.21;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.13.17.58.09;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	2006.01.06.18.53.04;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2005.05.27.17.45.56;	author millert;	state Exp;
branches;
next	1.33;

1.33
date	2005.05.11.18.44.12;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2004.08.03.19.59.42;	author millert;	state Exp;
branches;
next	1.31;

1.31
date	2004.05.03.19.16.36;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2004.05.03.17.21.13;	author millert;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.21.19.50.39;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.26;

1.26
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2002.12.03.20.24.29;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.12.02.15.38.54;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.12.02.02.07.28;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.25.21.55.28;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.29.00.20.11;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.20.18.12.44;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.20.18.11.04;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.04.23.27.54;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.01.23.52.10;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.18.18.11.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.04.03.23.23.48;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	99.11.27.13.20.25;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	99.06.11.22.47.48;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.02.25.21.40.15;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.11.20.11.18.26;	author d;	state Exp;
branches;
next	1.7;

1.7
date	98.02.07.02.16.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.02.06.01.49.06;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.12.09.13.32.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.09.21.10.45.53;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.12.28.06.32.59;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	95.12.30.08.12.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.72
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: stdlib.h,v 1.71 2017/05/11 11:52:18 tom Exp $	*/
/*	$NetBSD: stdlib.h,v 1.25 1995/12/27 21:19:08 jtc Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)stdlib.h	5.13 (Berkeley) 6/4/91
 */

#ifndef _STDLIB_H_
#define _STDLIB_H_

#include <sys/cdefs.h>
#include <sys/_null.h>
#include <machine/_types.h>
#if __BSD_VISIBLE	/* for quad_t, etc. (XXX - use protected types) */
#include <sys/types.h>
#endif

#ifndef	_SIZE_T_DEFINED_
#define	_SIZE_T_DEFINED_
typedef	__size_t	size_t;
#endif

/* in C++, wchar_t is a built-in type */
#if !defined(_WCHAR_T_DEFINED_) && !defined(__cplusplus)
#define _WCHAR_T_DEFINED_
typedef	__wchar_t	wchar_t;
#endif

typedef struct {
	int quot;		/* quotient */
	int rem;		/* remainder */
} div_t;

typedef struct {
	long quot;		/* quotient */
	long rem;		/* remainder */
} ldiv_t;

#if __ISO_C_VISIBLE >= 1999
typedef struct {
	long long quot;		/* quotient */
	long long rem;		/* remainder */
} lldiv_t;
#endif

#if __BSD_VISIBLE
typedef struct {
	quad_t quot;		/* quotient */
	quad_t rem;		/* remainder */
} qdiv_t;
#endif

#define	EXIT_FAILURE	1
#define	EXIT_SUCCESS	0

#define	RAND_MAX	0x7fffffff

#define	MB_CUR_MAX	__mb_cur_max()

/*
 * Some header files may define an abs macro.
 * If defined, undef it to prevent a syntax error and issue a warning.
 */
#ifdef abs
#undef abs
#warning abs macro collides with abs() prototype, undefining
#endif

__BEGIN_DECLS
__dead void	 abort(void);
int	 abs(int);
int	 atexit(void (*)(void));
double	 atof(const char *);
int	 atoi(const char *);
long	 atol(const char *);
void	*bsearch(const void *, const void *, size_t, size_t,
	    int (*)(const void *, const void *));
void	*calloc(size_t, size_t);
div_t	 div(int, int);
__dead void	 exit(int);
__dead void	 _Exit(int);
void	 free(void *);
char	*getenv(const char *);
long	 labs(long);
ldiv_t	 ldiv(long, long);
void	*malloc(size_t);
#if __BSD_VISIBLE
void	freezero(void *, size_t)
		 __attribute__ ((__bounded__(__buffer__,1,2)));
void	*reallocarray(void *, size_t, size_t);
void	*recallocarray(void *, size_t, size_t, size_t);
#endif /* __BSD_VISIBLE */
void	 qsort(void *, size_t, size_t, int (*)(const void *, const void *));
int	 rand(void);
void	*realloc(void *, size_t);
void	 srand(unsigned);
void	 srand_deterministic(unsigned);
double	 strtod(const char *__restrict, char **__restrict);
float	 strtof(const char *__restrict, char **__restrict);
long	 strtol(const char *__restrict, char **__restrict, int);
long double
	 strtold(const char *__restrict, char **__restrict);
unsigned long
	 strtoul(const char *__restrict, char **__restrict, int);
int	 system(const char *);

size_t	 __mb_cur_max(void);
int	 mblen(const char *, size_t);
size_t	 mbstowcs(wchar_t *, const char *, size_t);
int	 wctomb(char *, wchar_t);
int	 mbtowc(wchar_t *, const char *, size_t);
size_t	 wcstombs(char *, const wchar_t *, size_t);

/*
 * IEEE Std 1003.1c-95, also adopted by X/Open CAE Spec Issue 5 Version 2
 */
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 199506 || defined(_REENTRANT)
int	 rand_r(unsigned int *);
#endif

#if __BSD_VISIBLE || __XPG_VISIBLE >= 400
double	 drand48(void);
double	 erand48(unsigned short[3]);
long	 jrand48(unsigned short[3]);
void	 lcong48(unsigned short[7]);
void	 lcong48_deterministic(unsigned short[7]);
long	 lrand48(void);
long	 mrand48(void);
long	 nrand48(unsigned short[3]);
unsigned short *seed48(unsigned short[3]);
unsigned short *seed48_deterministic(unsigned short[3]);
void	 srand48(long);
void	 srand48_deterministic(long);

int	 putenv(char *);
#endif

/*
 * XSI functions marked LEGACY in IEEE Std 1003.1-2001 (POSIX) and
 * removed in IEEE Std 1003.1-2008
 */
#if __BSD_VISIBLE || __XPG_VISIBLE < 700
char	*ecvt(double, int, int *, int *);
char	*fcvt(double, int, int *, int *);
char	*gcvt(double, int, char *);
#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
char	*mktemp(char *);
#endif
#endif	/* __BSD_VISIBLE || __XPG_VISIBLE < 700 */

#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
long	 a64l(const char *);
char	*l64a(long);

char	*initstate(unsigned int, char *, size_t)
		__attribute__((__bounded__ (__string__,2,3)));
long	 random(void);
char	*setstate(char *);
void	 srandom(unsigned int);
void	 srandom_deterministic(unsigned int);

char	*realpath(const char *, char *)
		__attribute__((__bounded__ (__minbytes__,2,1024)));

/*
 * XSI functions marked LEGACY in XPG5 and removed in IEEE Std 1003.1-2001
 */
#if __BSD_VISIBLE || __XPG_VISIBLE < 600
int	 ttyslot(void);
void	*valloc(size_t);		/* obsoleted by malloc() */
#endif
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */

/*
 * 4.4BSD, then XSI in XPG4.2, then added to POSIX base in IEEE Std 1003.1-2008
 */
#if __BSD_VISIBLE || __XPG_VISIBLE >= 420 || __POSIX_VISIBLE >= 200809
int	 mkstemp(char *);
#endif

/*
 * ISO C99
 */
#if __ISO_C_VISIBLE >= 1999
long long
	 atoll(const char *);
long long
	 llabs(long long);
lldiv_t
	 lldiv(long long, long long);
long long
	 strtoll(const char *__restrict, char **__restrict, int);
unsigned long long
	 strtoull(const char *__restrict, char **__restrict, int);
#endif

/*
 * The Open Group Base Specifications, Issue 6; IEEE Std 1003.1-2001 (POSIX)
 */
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200112
int	 posix_memalign(void **, size_t, size_t);
int	 setenv(const char *, const char *, int);
int	 unsetenv(const char *);
#endif
#if __XPG_VISIBLE >= 420 || __POSIX_VISIBLE >= 200112
char	*ptsname(int);
int	 grantpt(int);
int	 unlockpt(int);
#endif
#if __POSIX_VISIBLE >= 200112
int	 posix_openpt(int);
#endif

/*
 * The Open Group Base Specifications, Issue 7; IEEE Std 1003.1-2008 (POSIX)
 */
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200809
char	*mkdtemp(char *);
#endif

#if __XPG_VISIBLE >= 420 || __POSIX_VISIBLE >= 200809
int     getsubopt(char **, char * const *, char **);
#endif

/*
 * The Open Group Base Specifications, post-Issue 7
 */
#if __BSD_VISIBLE
int	mkostemp(char *, int);
#endif

#if __BSD_VISIBLE
#define alloca(n) __builtin_alloca(n)

char	*getbsize(int *, long *);
char	*cgetcap(char *, const char *, int);
int	 cgetclose(void);
int	 cgetent(char **, char **, const char *);
int	 cgetfirst(char **, char **);
int	 cgetmatch(char *, const char *);
int	 cgetnext(char **, char **);
int	 cgetnum(char *, const char *, long *);
int	 cgetset(const char *);
int	 cgetusedb(int);
int	 cgetstr(char *, const char *, char **);
int	 cgetustr(char *, const char *, char **);

int	 daemon(int, int);
char	*devname(dev_t, mode_t);
int	 getloadavg(double [], int);

const char *
	getprogname(void);
void	setprogname(const char *);

extern	 char *suboptarg;		/* getsubopt(3) external variable */

int	 mkstemps(char *, int);
int	 mkostemps(char *, int, int);

int	 heapsort(void *, size_t, size_t, int (*)(const void *, const void *));
int	 mergesort(void *, size_t, size_t, int (*)(const void *, const void *));
int	 radixsort(const unsigned char **, int, const unsigned char *,
	    unsigned);
int	 sradixsort(const unsigned char **, int, const unsigned char *,
	    unsigned);

void	 srandomdev(void);
long long
	 strtonum(const char *, long long, long long, const char **);

void	 setproctitle(const char *, ...)
	__attribute__((__format__ (__printf__, 1, 2)));

quad_t	 qabs(quad_t);
qdiv_t	 qdiv(quad_t, quad_t);
quad_t	 strtoq(const char *__restrict, char **__restrict, int);
u_quad_t strtouq(const char *__restrict, char **__restrict, int);

uint32_t arc4random(void);
uint32_t arc4random_uniform(uint32_t);
void arc4random_buf(void *, size_t)
	__attribute__((__bounded__ (__buffer__,1,2)));

#endif /* __BSD_VISIBLE */

__END_DECLS

#endif /* _STDLIB_H_ */
@


1.71
log
@arc4random_buf should be bounded buffer, not bounded string

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.70 2017/05/10 21:48:29 millert Exp $	*/
d85 1
a85 2
extern size_t	__mb_cur_max;
#define	MB_CUR_MAX	__mb_cur_max
d134 1
a134 1
/* these are currently just stubs */
@


1.70
log
@Add bounded attribute to freezero().  OK tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.69 2017/04/10 05:45:02 otto Exp $	*/
d311 1
a311 1
	__attribute__((__bounded__ (__string__,1,2)));
@


1.69
log
@Introducing freezero(3) a version of free that guarantees the process
no longer has access to the content of a memmory object. It does
this by either clearing (if the object memory remains cached) or
by calling munmap(2). ok millert@@, deraadt@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.68 2017/03/06 18:50:28 otto Exp $	*/
d116 2
a117 1
void	freezero(void *, size_t);
@


1.68
log
@Introducing recallocarray(3), a blend of calloc(3) and reallocarray(3)
with the added feature that released memory is cleared. Much input from various
developers. ok deraadt@@ tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.67 2016/09/20 21:10:22 fcambus Exp $	*/
d116 1
@


1.67
log
@Remove duplicated includes in stdlib.h and termios.h

OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.66 2016/09/09 18:12:37 millert Exp $	*/
d117 1
@


1.66
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.65 2015/07/14 19:05:11 millert Exp $	*/
a86 2

#include <sys/cdefs.h>
@


1.65
log
@The first argument to devname(3) should be dev_t, not int.
The man page was already correct.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.64 2015/02/08 02:58:50 tedu Exp $	*/
d39 1
a77 11
#endif


#ifndef	NULL
#ifdef 	__GNUG__
#define NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif
@


1.64
log
@add restrict to strtol like functions. ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.63 2015/01/15 19:55:58 tedu Exp $	*/
d286 1
a286 1
char	*devname(int, mode_t);
@


1.63
log
@we don't have an alloca() symbol anywhere in libc, don't prototype it.
instead, #define to __builtin_alloca. if that doesn't work, you're hosed.
from an old discussion about the perils of alloca. (don't use alloca!)
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.62 2014/12/08 21:45:19 deraadt Exp $	*/
d135 3
a137 3
double	 strtod(const char *, char **);
float	 strtof(const char *, char **);
long	 strtol(const char *, char **, int);
d139 1
a139 1
	 strtold(const char *, char **);
d141 1
a141 1
	 strtoul(const char *, char **, int);
d229 1
a229 1
	 strtoll(const char *, char **, int);
d231 1
a231 1
	 strtoull(const char *, char **, int);
d314 2
a315 2
quad_t	 strtoq(const char *, char **, int);
u_quad_t strtouq(const char *, char **, int);
@


1.62
log
@Change rand(), random(), drand48(), lrand48(), mrand48(), and srand48()
to returning strong random by default, source from arc4random(3).
Parameters to the seeding functions are ignored, and the subsystems remain
in strong random mode.  If you wish the standardized deterministic mode,
call srand_deterministic(), srandom_determistic(), srand48_deterministic(),
seed48_deterministic() or lcong48_deterministic() instead.
The re-entrant functions rand_r(), erand48(), nrand48(), jrand48() are
unaffected by this change and remain in deterministic mode (for now).

Verified as a good roadmap forward by auditing 8800 pieces of software.
Roughly 60 pieces of software will need adaptation to request the
deterministic mode.

Violates POSIX and C89, which violate best practice in this century.
ok guenther tedu millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.61 2014/12/08 20:39:56 tedu Exp $	*/
d270 1
a270 1
void	*alloca(size_t); 
@


1.61
log
@header changes for recent libc changes:
add siphash
delete setkey, encrypt, cfree
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.60 2014/08/31 02:21:18 guenther Exp $	*/
d134 1
d163 1
d168 1
d170 1
d197 1
@


1.60
log
@Add additional userland interfaces for setting close-on-exec on fds
when creating them: mkostemp(), mkostemps(), the 'e' mode letter for
fopen(), freopen(), fdopen(), and popen().  The close-on-exec flag will
be cleared by the action created by posix_spawn_file_actions_adddup2().

Also, add support for the C11 'x' mode letter for fopen() and freopen(),
setting O_EXCL when possibly creating files.

Note: this requires kernel support for pipe2() and dup3()!

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.59 2014/07/09 16:57:49 beck Exp $	*/
a196 2
int	 setkey(const char *);

a282 2

void	 cfree(void *);
@


1.59
log
@Clean up after arc4random u_int32_t uint32_t change
ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.58 2014/04/22 14:26:26 tedu Exp $	*/
d259 7
d295 1
@


1.58
log
@change mallocarray to reallocarray. useful in a few more situations.
malloc can, as always, be emulated via realloc(NULL).
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.57 2014/04/21 13:17:32 deraadt Exp $	*/
d308 2
a309 2
u_int32_t arc4random(void);
u_int32_t arc4random_uniform(u_int32_t);
@


1.57
log
@Introducing:      void *mallocarray(size_t nmemb, size_t size);
Like calloc(), except without the cleared-memory gaurantee
ok beck guenther, discussed for more than a year...
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.56 2013/12/28 01:51:53 martynas Exp $	*/
d128 1
a128 1
void	*mallocarray(size_t, size_t);
@


1.56
log
@Annotate a few more bounded functions: realpath(3) needs a buffer
of size at least PATH_MAX.  pread(2), pwrite(2) and readlinkat(2)
also take the buffer and the bound.  OK theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.55 2013/12/13 20:48:39 millert Exp $	*/
d127 3
@


1.55
log
@Fix typo; 200809 not 20080 for __POSIX_VISIBLE.  Noticed by jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.54 2013/11/22 21:32:49 millert Exp $	*/
d191 2
a192 1
char	*realpath(const char *, char *);
@


1.54
log
@The getopt() prototype and externs don't belong in stdlib.h.  Berkeley
moved them to unistd.h to match POSIX in 1995 but we never did.
The exception to this is getsubopt() which POSIX says should be in
stdlib.h.  The non-standard suboptarg extern remains in the BSD-only
section of stdlib.h.  Neither getsubopt() nor suboptarg belong in
unistd.h or getopt.h.  They were only there to allow us to protect
all the getopt() bits from being multiply defined.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.53 2013/10/21 20:33:24 deraadt Exp $	*/
d251 1
a251 1
#if __XPG_VISIBLE >= 420 || __POSIX_VISIBLE >= 20080
@


1.53
log
@Remove arc4random_stir() and arc4random_addrandom(), which none should
be using directly.  Well, a few rare people cloned it upstream and it
will take a bit of time for them to learn.
ok various
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.52 2013/05/31 20:59:24 ajacoutot Exp $	*/
d251 4
a280 6
#ifndef _GETOPT_DEFINED_
#define _GETOPT_DEFINED_
int	 getopt(int, char * const *, const char *);
extern	 char *optarg;			/* getopt(3) external variables */
extern	 int opterr, optind, optopt, optreset;
int	 getsubopt(char **, char * const *, char **);
a281 1
#endif /* _GETOPT_DEFINED_ */
@


1.52
log
@Add getprogname() and setprogname() to ease slackers^porters' work.
Man page adapted from FreeBSD and NetBSD.

Bump libc minor now (there will be more upcoming changes).

input from tedu@@
get it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.51 2012/12/03 20:08:33 millert Exp $	*/
a307 3
void	arc4random_stir(void);
void	arc4random_addrandom(unsigned char *, int)
	__attribute__((__bounded__ (__string__,1,2)));
@


1.51
log
@Simple emulation of POSIX pty APIs posix_openpt(), ptsname(),
grantpt() and unlockpt() using /dev/ptm.  Man pages from FreeBSD.
OK kettenis@@ deraadt@@ beck@@ ajacoutot@@ naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.50 2012/06/01 01:01:57 guenther Exp $	*/
d272 4
@


1.50
log
@Improve standards conformance: ecvt(), fcvt(), gcvt(), mktemp(), ttyslot(),
and valloc() are not in the current version, while posix_memalign() mkstemp(),
and mkdtemp() are, and setstate()'s argument has lost a bogus 'const'.

ok millert@@ jmc@@ espie@@ kettenis@@; ports build testing by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.49 2011/07/03 18:51:01 jsg Exp $	*/
d234 8
@


1.49
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.48 2011/04/06 11:39:42 miod Exp $	*/
a119 1
char	*ecvt(double, int, int *, int *);
a121 1
char	*fcvt(double, int, int *, int *);
a122 1
char	*gcvt(double, int, char *);
a126 1
int	 posix_memalign(void **, size_t, size_t);
d150 1
a150 2
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 199506 || __XPG_VISIBLE >= 500 || \
	defined(_REENTRANT)
d168 13
d188 1
a188 1
char	*setstate(const char *);
a190 3
int	 mkstemp(char *);
char	*mktemp(char *);

d195 4
a199 1

d201 1
d205 7
d230 2
a231 1
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200112 || __XPG_VISIBLE >= 600
d236 7
a273 1
char	*mkdtemp(char *);
@


1.48
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.47 2010/05/18 22:24:55 tedu Exp $	*/
d83 2
@


1.47
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.46 2009/06/03 15:52:16 millert Exp $	*/
d84 1
a84 1
#define	NULL	0L
@


1.46
log
@Make putenv(), setenv() and unsetenv() standards compliant.  The
standard explicitly disallows passing setenv a name with a '=' in
it but historic BSD behavior is to allow this but to ignore the '='
and anything after it.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.45 2008/09/07 20:36:07 martynas Exp $	*/
d128 1
@


1.45
log
@- replace dtoa w/ David's gdtoa, version 2008-03-15
- provide proper dtoa locks
- use the real strtof implementation
- add strtold, __hdtoa, __hldtoa
- add %a/%A support
- don't lose precision in printf, don't round to double anymore
- implement extended-precision versions of libc functions: fpclassify,
isnan, isinf, signbit, isnormal, isfinite, now that the ieee.h is
fixed
- separate vax versions of strtof, and __hdtoa
- add complex math support.  added functions: cacos, casin, catan,
ccos, csin, ctan, cacosh, casinh, catanh, ccosh, csinh, ctanh, cexp,
clog, cabs, cpow, csqrt, carg, cimag, conj, cproj, creal, cacosf,
casinf, catanf, ccosf, csinf, ctanf, cacoshf, casinhf, catanhf,
ccoshf, csinhf, ctanhf, cexpf, clogf, cabsf, cpowf, csqrtf, cargf,
cimagf, conjf, cprojf, crealf
- add fdim, fmax, fmin
- add log2. (adapted implementation e_log.c.  could be more acruate
& faster, but it's good enough for now)
- remove wrappers & cruft in libm, supposed to work-around mistakes
in SVID, etc.;  use ieee versions.  fixes issues in python 2.6 for
djm@@
- make _digittoint static
- proper definitions for i386, and amd64 in ieee.h
- sh, powerpc don't really have extended-precision
- add missing definitions for mips64 (quad), m{6,8}k (96-bit) float.h
for LDBL_*
- merge lead to frac for m{6,8}k, for gdtoa to work properly
- add FRAC*BITS & EXT_TO_ARRAY32 definitions in ieee.h, for hdtoa&ldtoa
to use
- add EXT_IMPLICIT_NBIT definition, which indicates implicit
normalization bit
- add regression tests for libc: fpclassify and printf
- arith.h & gd_qnan.h definitions
- update ieee.h: hppa doesn't have quad-precision, hppa64 does
- add missing prototypes to gdtoaimp
- on 64-bit platforms make sure gdtoa doesn't use a long when it
really wants an int
- etc., what i may have forgotten...
- bump libm major, due to removed&changed symbols
- no libc bump, since this is riding on djm's libc major crank from
a day ago

discussed with / requested by / testing theo, sthen@@, djm@@, jsg@@,
merdely@@, jsing@@, tedu@@, brad@@, jakemsr@@, and others.
looks good to millert@@
parts of the diff ok kettenis@@

this commit does not include:
- man page changes
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.44 2008/06/24 06:01:33 otto Exp $	*/
d167 1
a167 1
int	 putenv(const char *);
d213 1
a213 1
void	 unsetenv(const char *);
@


1.44
log
@remove recalloc; sloppy me; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.43 2008/06/20 15:21:06 ragge Exp $	*/
d135 2
@


1.43
log
@Remove obsolete (and erroneous) #if statement that caused all compilers
except for gcc to get the wrong prototype.  Ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.42 2008/06/13 21:04:24 landry Exp $	*/
a130 1
void	*recalloc(void *, size_t, size_t);
@


1.42
log
@Add strtof() to libc, some ports seem to like it. Currently it's a simple
call to strtod() with bounding check.
Discussed with pyr@@ and otto@@

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.41 2008/03/16 19:47:43 otto Exp $	*/
d216 1
a216 5
#if defined(alloca) && (alloca == __builtin_alloca) && (__GNUC__ < 2)
void  *alloca(int);     /* built-in for gcc */ 
#else 
void  *alloca(size_t); 
#endif /* __GNUC__ */ 
@


1.41
log
@diff from djm@@ committed at his request:

introduce two new APIs for requesting strong random numbers:

arc4random_buf() - fill an arbitrary memory range with random numbers

arc4random_uniform() - return a uniformly distributed random number
below
a specified upper bound, avoiding the bias that comes from a naive
"arc4random() % upper_bound" construction.

these mirror similarly-named functions in the kernel;
lots of discussion deraadt@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.40 2007/09/03 14:37:02 millert Exp $	*/
d134 1
@


1.40
log
@add recaloc(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.39 2006/09/17 16:48:04 djm Exp $	*/
d275 4
@


1.39
log
@add lldiv prototype; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.38 2006/03/31 00:41:21 deraadt Exp $	*/
d131 1
@


1.38
log
@after we changed mode_t to be an int, the devname() man page was
updated but the function itself never was; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.37 2006/01/13 17:58:09 millert Exp $	*/
d197 2
@


1.37
log
@Add lldiv(), imaxabs(), imaxdiv(), strtoimax() and strtoumax()
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.36 2006/01/06 18:53:04 millert Exp $	*/
d232 1
a232 1
char	*devname(int, int);
@


1.36
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.35 2005/12/13 00:35:22 millert Exp $	*/
d65 7
d192 1
a192 1
#if __BSD_VISIBLE || __ISO_C_VISIBLE >= 1999
@


1.35
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.34 2005/05/27 17:45:56 millert Exp $	*/
a36 1
#include <machine/ansi.h>
d39 2
a40 1
#if __BSD_VISIBLE	/* for quad_t, etc. */
d44 3
a46 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
a48 1
#ifdef	_BSD_WCHAR_T_
d50 3
a52 4
#ifndef __cplusplus
typedef	_BSD_WCHAR_T_	wchar_t;
#endif
#undef	_BSD_WCHAR_T_
@


1.34
log
@mktemp(3) et al. go in stdlib.h, not unistd.h.  While there be more
explicit about mktemp(3) in the man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.33 2005/05/11 18:44:12 espie Exp $	*/
d39 2
a40 1
#if !defined(_ANSI_SOURCE)	/* for quad_t, etc. */
d67 1
a67 1
#if !defined(_ANSI_SOURCE)
a108 1
long long atoll(const char *);
a121 2
long long
	 llabs(long long);
a122 4
char	*mkdtemp(char *);
int	 mkstemp(char *);
int	 mkstemps(char *, int);
char	*mktemp(char *);
a124 1
int	 rand_r(unsigned int *);
a128 4
long long
	 strtoll(const char *, char **, int);
long long
	 strtonum(const char *, long long, long long, const char **);
a130 2
unsigned long long
	 strtoull(const char *, char **, int);
d140 67
a206 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
a229 3
long	 a64l(const char *);
char	*l64a(long);

d236 1
a236 4
extern	 int opterr;
extern	 int optind;
extern	 int optopt;
extern	 int optreset;
d241 3
a250 6
char	*initstate(unsigned int, char *, size_t)
		__attribute__((__bounded__ (__string__,2,3)));
long	 random(void);
char	*realpath(const char *, char *);
char	*setstate(const char *);
void	 srandom(unsigned int);
d252 2
a254 3
int	 putenv(const char *);
int	 setenv(const char *, const char *, int);
void	 unsetenv(const char *);
a262 10
double	 drand48(void);
double	 erand48(unsigned short[3]);
long	 jrand48(unsigned short[3]);
void	 lcong48(unsigned short[7]);
long	 lrand48(void);
long	 mrand48(void);
long	 nrand48(unsigned short[3]);
unsigned short *seed48(unsigned short[3]);
void	 srand48(long);

d267 1
a267 1
#endif /* !_ANSI_SOURCE && !_POSIX_SOURCE */
@


1.33
log
@major abi changes:

* introduce the mbstate_t typedef.
impacts gnu libiconv, which has already been taken care of.

* Prepare for mb stuff to really exist, replace macro MB_CUR_MAX with
an external variable __mb_cur_max (impacts libX11 and various ports).

* use mbstate in all the mb <-> wchar functions with state.
* add a stub iswctype function allowing some ports to compile.

bash and gdiff are missing wcscoll, and need to be told there's no i18n
until this is fixed.

Discussed and matthieu, otto, millert, kettenis, deraadt.

Major libc bump
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.32 2004/08/03 19:59:42 millert Exp $	*/
d125 4
@


1.32
log
@Update strtonum() protor
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.31 2004/05/03 19:16:36 tedu Exp $	*/
d87 2
a88 1
#define	MB_CUR_MAX	1	/* XXX */
@


1.31
log
@strtonum prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.30 2004/05/03 17:21:13 millert Exp $	*/
d133 2
a138 2
unsigned long long
	 strtonum(const char *, long long, unsigned long long, const char **);
@


1.30
log
@Add _Exit(3) as per C99.  Discussed with espie@@ some time ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.29 2004/01/21 19:50:39 millert Exp $	*/
d137 2
@


1.29
log
@Prototype llabs(3).  Forgotten commit gathering bit rot in my tree...
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.28 2003/08/01 17:38:33 avsm Exp $	*/
d114 1
@


1.28
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.27 2003/06/26 19:34:17 avsm Exp $	*/
d120 2
@


1.27
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.25 2003/06/02 19:34:12 millert Exp $	*/
d191 2
a192 1
char	*initstate(unsigned int, char *, size_t);
d222 2
a223 1
void	arc4random_addrandom(unsigned char *, int);
@


1.26
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d191 1
a191 2
char	*initstate(unsigned int, char *, size_t)
		__attribute__((__bounded__ (__string__,2,3)));
d221 1
a221 2
void	arc4random_addrandom(unsigned char *, int)
	__attribute__((__bounded__ (__string__,1,2)));
@


1.25
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.24 2002/12/03 20:24:29 millert Exp $	*/
d191 2
a192 1
char	*initstate(unsigned int, char *, size_t);
d222 2
a223 1
void	arc4random_addrandom(unsigned char *, int);
@


1.24
log
@GNU-like getopt_long() from NetBSD with changes by me to support
getopt_long_only().  At some point this should replace the BSD
getopt(3) but we are not there yet.

While I am here add protection from the multiple getopt() definitions
due to conflicting standards.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.23 2002/12/02 15:38:54 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.23
log
@Add ecvt(), fcvt() and gcvt() for standard compliance and legacy code.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.22 2002/12/02 02:07:28 millert Exp $	*/
d176 2
d186 1
@


1.22
log
@Add prototype for atoll(3).  I must have forgotten to commit this bit
when I committed atoll(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.21 2002/10/25 21:55:28 millert Exp $	*/
d116 1
d118 1
d120 1
@


1.21
log
@NULL is now 0L so it is the same size as a pointer.
OK mickey@@ and discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.20 2002/06/29 00:20:11 millert Exp $	*/
d111 1
@


1.20
log
@Replace strtou?q() with the more standard strtou?ll(), using weak
aliases to fake up strtou?q().  espie@@ OK.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.19 2002/02/20 18:12:44 millert Exp $	*/
d82 1
a82 1
#define	NULL	0
@


1.19
log
@Revert local changes that snuck in to the last commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.18 2002/02/20 18:11:04 millert Exp $	*/
d128 2
d132 2
@


1.18
log
@Some user header files may define an abs macro which will cause a
syntax error if the #define happens before stdlib.h is included.
If abs is #defined, #undef and issue a warning.  This is similar
to what Tru64 UNIX does and is effectively the same as what happens
on Solaris (though on Solaris the real abs() is a macro).
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.17 2002/02/17 19:42:21 millert Exp $	*/
a127 2
long long
	 strtoll(const char *, char **, int);
a129 2
unsigned long long
	 strtoull(const char *, char **, int);
a167 2
#ifndef _GETOPT_DEFINED_
#define _GETOPT_DEFINED_
a175 1
#endif /* _GETOPT_DEFINED_ */
@


1.17
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.16 2002/02/16 21:27:17 millert Exp $	*/
d95 9
d128 2
d132 2
d172 2
d182 1
@


1.16
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.15 2001/11/04 23:27:54 krw Exp $	*/
d98 1
a98 1
int	 atexit __P((void (*)(void)));
d102 2
a103 2
void	*bsearch __P((const void *, const void *, size_t,
	    size_t, int (*)(const void *, const void *)));
d112 1
a112 2
void	 qsort __P((void *, size_t, size_t,
	    int (*)(const void *, const void *)));
d168 6
a173 8
int	 heapsort __P((void *, size_t, size_t,
	    int (*)(const void *, const void *)));
int	 mergesort __P((void *, size_t, size_t,
	    int (*)(const void *, const void *)));
int	 radixsort __P((const unsigned char **, int, const unsigned char *,
	    unsigned));
int	 sradixsort __P((const unsigned char **, int, const unsigned char *,
	    unsigned));
@


1.15
log
@Ghostscript port refused to build with 'printf' in the
__attribute__ statement. Using '__printf__' makes it happy.

ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.14 2001/11/01 23:52:10 miod Exp $	*/
d96 2
a97 2
__dead void	 abort __P((void));
int	 abs __P((int));
d99 3
a101 3
double	 atof __P((const char *));
int	 atoi __P((const char *));
long	 atol __P((const char *));
d104 8
a111 8
void	*calloc __P((size_t, size_t));
div_t	 div __P((int, int));
__dead void	 exit __P((int));
void	 free __P((void *));
char	*getenv __P((const char *));
long	 labs __P((long));
ldiv_t	 ldiv __P((long, long));
void	*malloc __P((size_t));
d114 6
a119 6
int	 rand __P((void));
int	 rand_r __P((unsigned int *));
void	*realloc __P((void *, size_t));
void	 srand __P((unsigned));
double	 strtod __P((const char *, char **));
long	 strtol __P((const char *, char **, int));
d121 2
a122 2
	 strtoul __P((const char *, char **, int));
int	 system __P((const char *));
d125 5
a129 5
int	 mblen __P((const char *, size_t));
size_t	 mbstowcs __P((wchar_t *, const char *, size_t));
int	 wctomb __P((char *, wchar_t));
int	 mbtowc __P((wchar_t *, const char *, size_t));
size_t	 wcstombs __P((char *, const wchar_t *, size_t));
d133 1
a133 1
void  *alloca __P((int));     /* built-in for gcc */ 
d135 1
a135 1
void  *alloca __P((size_t)); 
d138 16
a153 16
char	*getbsize __P((int *, long *));
char	*cgetcap __P((char *, const char *, int));
int	 cgetclose __P((void));
int	 cgetent __P((char **, char **, const char *));
int	 cgetfirst __P((char **, char **));
int	 cgetmatch __P((char *, const char *));
int	 cgetnext __P((char **, char **));
int	 cgetnum __P((char *, const char *, long *));
int	 cgetset __P((const char *));
int	 cgetusedb __P((int));
int	 cgetstr __P((char *, const char *, char **));
int	 cgetustr __P((char *, const char *, char **));

int	 daemon __P((int, int));
char	*devname __P((int, int));
int	 getloadavg __P((double [], int));
d155 2
a156 2
long	 a64l __P((const char *));
char	*l64a __P((long));
d158 1
a158 1
void	 cfree __P((void *));
d160 1
a160 1
int	 getopt __P((int, char * const *, const char *));
d166 1
a166 1
int	 getsubopt __P((char **, char * const *, char **));
d178 11
a188 11
char	*initstate __P((unsigned int, char *, size_t));
long	 random __P((void));
char	*realpath __P((const char *, char *));
char	*setstate __P((const char *));
void	 srandom __P((unsigned int));
void	 srandomdev __P((void));

int	 putenv __P((const char *));
int	 setenv __P((const char *, const char *, int));
void	 unsetenv __P((const char *));
void	 setproctitle __P((const char *, ...))
d191 18
a208 18
quad_t	 qabs __P((quad_t));
qdiv_t	 qdiv __P((quad_t, quad_t));
quad_t	 strtoq __P((const char *, char **, int));
u_quad_t strtouq __P((const char *, char **, int));

double	 drand48 __P((void));
double	 erand48 __P((unsigned short[3]));
long	 jrand48 __P((unsigned short[3]));
void	 lcong48 __P((unsigned short[7]));
long	 lrand48 __P((void));
long	 mrand48 __P((void));
long	 nrand48 __P((unsigned short[3]));
unsigned short *seed48 __P((unsigned short[3]));
void	 srand48 __P((long));

u_int32_t arc4random __P((void));
void	arc4random_stir __P((void));
void	arc4random_addrandom __P((unsigned char *, int));
@


1.14
log
@Mention printf-like attributes for setproctitle().
millert@@ espie@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.13 2001/06/18 18:11:12 millert Exp $	*/
d189 1
a189 1
	__attribute__((__format__ (printf, 1, 2)));
@


1.13
log
@Add new cgetusedb() function to toggle reading of .db files in getcap(3).
Needed for cap_mkdb to really DRT when given several input files or
an output file with a different name from the input file.
cvs: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.12 2000/04/03 23:23:48 millert Exp $	*/
d188 2
a189 1
void	 setproctitle __P((const char *, ...));
@


1.12
log
@Add srandomdev() from FreeBSD for use by sendmail and others.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.11 1999/11/27 13:20:25 espie Exp $	*/
d147 1
@


1.11
log
@In ANSI C++, wchar_t is a builtin. gcc 2.95.1 handles that correctly.
Redefining it as a typedef is an error, as it prevents overloading
on e.g., int/wchar_t separately.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.10 1999/06/11 22:47:48 espie Exp $	*/
d182 1
@


1.10
log
@Define NULL to be __null for C++: better quality of implementation.
__null is a magic constant of integral type that converts to a null pointer
as should be, but warns for ambiguity when used to resolved an overload
between an integral type and a pointer type.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.9 1999/02/25 21:40:15 millert Exp $	*/
d53 2
d56 1
@


1.9
log
@constify getcap(3).  This fixes a warning in libcurses and doesn't
really change the API since those parameters that was been constified
really are not modified by getcap(3) routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.8 1998/11/20 11:18:26 d Exp $	*/
d76 3
d80 1
@


1.8
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.7 1998/02/07 02:16:26 millert Exp $	*/
d132 1
a132 1
char	*cgetcap __P((char *, char *, int));
d134 1
a134 1
int	 cgetent __P((char **, char **, char *));
d136 1
a136 1
int	 cgetmatch __P((char *, char *));
d138 4
a141 4
int	 cgetnum __P((char *, char *, long *));
int	 cgetset __P((char *));
int	 cgetstr __P((char *, char *, char **));
int	 cgetustr __P((char *, char *, char **));
@


1.7
log
@More XPG4.2 --
  setstate takes a const parameter
  don't ever spew to stderr, just return NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.6 1998/02/06 01:49:06 deraadt Exp $	*/
d108 1
@


1.6
log
@size_t n in initstate(); XPG
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.5 1997/12/09 13:32:36 deraadt Exp $	*/
d169 1
a169 1
char	*initstate __P((unsigned, char *, size_t));
d172 2
a173 2
char	*setstate __P((char *));
void	 srandom __P((unsigned));
@


1.5
log
@for XPG, do not use special typedef types
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.4 1997/09/21 10:45:53 niklas Exp $	*/
d169 1
a169 1
char	*initstate __P((unsigned, char *, int));
@


1.4
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdlib.h,v 1.25 1995/12/27 21:19:08 jtc Exp $	*/
d197 1
a197 1
void	arc4random_addrandom __P((u_char *, int));
@


1.3
log
@arc4random() number generator, for use with things like RPC xid's.
@
text
@d1 1
@


1.2
log
@abort() and exit() need __dead tags in stdlib.h; mike.long@@analog.com;
netbsd pr#1845
@
text
@d193 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: stdlib.h,v 1.24 1995/03/22 01:08:31 jtc Exp $	*/
d88 1
a88 1
void	 abort __P((void));
d98 1
a98 1
void	 exit __P((int));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
