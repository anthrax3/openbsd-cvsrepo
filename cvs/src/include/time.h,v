head	1.30;
access;
symbols
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.28.0.6
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.25.0.4
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.8
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.18.0.22
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.20
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.16
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.18
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.14
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.12
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.10
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	ngpX0SPDX30tzjDf;

1.29
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.28;
commitid	mBDdb9HYWgUfDo7E;

1.28
date	2015.04.07.01.47.04;	author millert;	state Exp;
branches;
next	1.27;
commitid	WuVjttMIVorUAdZQ;

1.27
date	2015.03.17.19.31.30;	author millert;	state Exp;
branches;
next	1.26;
commitid	0y5bUkEOUrNvvJEO;

1.26
date	2015.03.15.00.41.27;	author millert;	state Exp;
branches;
next	1.25;
commitid	IbVxlqGw2UipKdDr;

1.25
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2013.04.02.05.16.14;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2012.10.01.00.21.20;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2012.05.10.19.13.12;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2012.05.07.22.34.00;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.19;

1.19
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.06.18.53.04;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.25.21.55.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.09.02.18.00;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.22.13.59.44;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.09.17.13.13.46;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	99.06.11.22.47.48;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	99.05.14.23.18.54;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.03.10.02.43.10;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.11.20.11.18.26;	author d;	state Exp;
branches;
next	1.3;

1.3
date	98.02.08.18.50.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.57;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.30
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: time.h,v 1.29 2016/09/09 18:12:37 millert Exp $	*/
/*	$NetBSD: time.h,v 1.9 1994/10/26 00:56:35 cgd Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)time.h	5.12 (Berkeley) 3/9/91
 */

#ifndef _TIME_H_
#define	_TIME_H_

#include <sys/cdefs.h>
#include <sys/_null.h>
#include <sys/_types.h>

#ifndef	_CLOCK_T_DEFINED_
#define	_CLOCK_T_DEFINED_
typedef	__clock_t	clock_t;
#endif

#ifndef	_TIME_T_DEFINED_
#define	_TIME_T_DEFINED_
typedef	__time_t	time_t;
#endif

#ifndef	_SIZE_T_DEFINED_
#define	_SIZE_T_DEFINED_
typedef	__size_t	size_t;
#endif

#if __POSIX_VISIBLE > 0 && __POSIX_VISIBLE < 200112 || __BSD_VISIBLE
/*
 * Frequency of the clock ticks reported by times().  Deprecated - use
 * sysconf(_SC_CLK_TCK) instead.  (Removed in 1003.1-2001.)
 */
#define CLK_TCK		100
#endif

#define CLOCKS_PER_SEC	100	/* frequency of ticks reported by clock().  */

#if __POSIX_VISIBLE >= 199309
#ifndef _TIMESPEC_DECLARED
#define _TIMESPEC_DECLARED
struct timespec {
	time_t	tv_sec;		/* seconds */
	long	tv_nsec;	/* and nanoseconds */
};
#endif

#include <sys/_time.h>

#ifndef	_CLOCKID_T_DEFINED_
#define	_CLOCKID_T_DEFINED_
typedef	__clockid_t	clockid_t;
#endif

#ifndef	_TIMER_T_DEFINED_
#define	_TIMER_T_DEFINED_
typedef	__timer_t	timer_t;
#endif
#endif

#if __POSIX_VISIBLE >= 200112
#ifndef	_PID_T_DEFINED_
#define	_PID_T_DEFINED_
typedef	__pid_t		pid_t;
#endif
#endif

#if __POSIX_VISIBLE >= 200809
#ifndef	_LOCALE_T_DEFINED_
#define	_LOCALE_T_DEFINED_
typedef void	*locale_t;
#endif
#endif

struct tm {
	int	tm_sec;		/* seconds after the minute [0-60] */
	int	tm_min;		/* minutes after the hour [0-59] */
	int	tm_hour;	/* hours since midnight [0-23] */
	int	tm_mday;	/* day of the month [1-31] */
	int	tm_mon;		/* months since January [0-11] */
	int	tm_year;	/* years since 1900 */
	int	tm_wday;	/* days since Sunday [0-6] */
	int	tm_yday;	/* days since January 1 [0-365] */
	int	tm_isdst;	/* Daylight Saving Time flag */
	long	tm_gmtoff;	/* offset from UTC in seconds */
	char	*tm_zone;	/* timezone abbreviation */
};

__BEGIN_DECLS
char *asctime(const struct tm *);
clock_t clock(void);
char *ctime(const time_t *);
double difftime(time_t, time_t);
struct tm *gmtime(const time_t *);
struct tm *localtime(const time_t *);
time_t mktime(struct tm *);
size_t strftime(char *__restrict, size_t, const char *__restrict,
		const struct tm *__restrict)
		__attribute__ ((__bounded__(__string__,1,2)));
time_t time(time_t *);

#if __XPG_VISIBLE >= 300
extern int daylight;
extern long timezone;
#endif
#if __XPG_VISIBLE >= 400
char *strptime(const char *__restrict, const char *__restrict,
		struct tm *__restrict);
#endif

#if __POSIX_VISIBLE >= 199506
char *asctime_r(const struct tm *__restrict, char *__restrict)
		__attribute__ ((__bounded__(__minbytes__,2,26)));
char *ctime_r(const time_t *, char *)
		__attribute__ ((__bounded__(__minbytes__,2,26)));
struct tm *gmtime_r(const time_t *__restrict, struct tm *__restrict);
struct tm *localtime_r(const time_t *__restrict, struct tm *__restrict);
#endif

#if __POSIX_VISIBLE
extern char *tzname[2];
void tzset(void);
#endif

#if __POSIX_VISIBLE >= 199309
int clock_getres(clockid_t, struct timespec *);
int clock_gettime(clockid_t, struct timespec *);
int clock_settime(clockid_t, const struct timespec *);
int nanosleep(const struct timespec *, struct timespec *);
#endif

#if __POSIX_VISIBLE >= 200112
int clock_getcpuclockid(pid_t, clockid_t *);
#endif

#if __POSIX_VISIBLE >= 200809
size_t strftime_l(char *__restrict, size_t, const char *__restrict,
		const struct tm *__restrict, locale_t)
		__attribute__ ((__bounded__(__string__,1,2)));
#endif

#if __BSD_VISIBLE
void tzsetwall(void);
time_t timelocal(struct tm *);
time_t timegm(struct tm *);
time_t timeoff(struct tm *, const long);
#endif
__END_DECLS

#endif /* !_TIME_H_ */
@


1.29
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.28 2015/04/07 01:47:04 millert Exp $	*/
d102 7
d168 6
@


1.28
log
@Remove obsolete timezone() function.
Add timezone and daylight symbols for XSI compatibility.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.27 2015/03/17 19:31:30 millert Exp $	*/
d45 1
a46 10

#ifndef	NULL
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif
#endif
@


1.27
log
@Eliminate use of TM_YEAR_BASE.  OK guenther@@ deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.26 2015/03/15 00:41:27 millert Exp $	*/
d138 4
a172 1
char *timezone(int, int);
@


1.26
log
@tzfile.h is an internal header that should never have been installed.
What's worse, the tzfile.h that gets installed is over 20 years old
and doesn't match the real tzfile.h in libc/time.  This makes the
tree safe for /usr/include/tzfile.h removal.  The TM_YEAR_BASE
define has been moved to time.h temporarily until its usage is
replaced by 1900 in the tree.  Actual removal of tzfile.h is pending
a ports build.  Based on a diff from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.25 2013/06/17 19:11:54 guenther Exp $	*/
a168 5

#ifndef TM_YEAR_BASE
#define TM_YEAR_BASE	1900
#endif

@


1.25
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.24 2013/04/02 05:16:14 guenther Exp $	*/
d169 5
@


1.24
log
@Pull in <sys/_types.h> instead of <machine/_types.h> in prep for the future

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.23 2012/10/01 00:21:20 guenther Exp $	*/
d104 7
d162 4
@


1.23
log
@More compliance fixes: hiding non-standard stuff behind __BSD_VISIBLE,
making files stand-alone, some __restrict additions.

tweaks kettenis@@; ports testing and fixes landry@@ and jasper@@
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.22 2012/05/10 19:13:12 kettenis Exp $	*/
d45 1
a45 1
#include <machine/_types.h>
@


1.22
log
@Recongnize that:

* strptime(3) was introduced in XPG 4.0
* clock_gettime(3) and friends were introduced in 1003.1b-1993
* asctime_r(3) and friends were introduced in 1003.1c-1995

and conditionally provide prototypes and associated types accordingly.
This makes our <time.h> standards compliant except for some functions that are
still missing.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.21 2012/05/07 22:34:00 kettenis Exp $	*/
d126 2
a127 1
size_t strftime(char *, size_t, const char *, const struct tm *)
d132 2
a133 1
char *strptime(const char *, const char *, struct tm *);
d137 1
a137 1
char *asctime_r(const struct tm *, char *)
d141 2
a142 2
struct tm *gmtime_r(const time_t *, struct tm *);
struct tm *localtime_r(const time_t *, struct tm *);
@


1.21
log
@Once more the people behind POSIX didn't think and put clock_gettime(2) and
friends in <time.h>.  The kernel needs access to the associated #defines, but
can't get them from <time.h>, so introduce a new header <sys/_time.h> and
include that from <time.h> for userland and <sys/time.h> for the kernel.

ok matthew@@, guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.20 2011/07/03 18:51:01 jsg Exp $	*/
d82 1
a90 1
#if __POSIX_VISIBLE >= 200112
d128 3
d132 3
a134 1
time_t time(time_t *);
d141 1
a141 1
int nanosleep(const struct timespec *, struct timespec *);
d148 1
a148 1
#if __POSIX_VISIBLE >= 200112
d152 1
@


1.20
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.19 2011/04/06 11:39:42 miod Exp $	*/
d90 14
a118 1
struct timespec;
d141 6
@


1.19
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.18 2006/01/06 18:53:04 millert Exp $	*/
d50 2
@


1.18
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.17 2005/12/13 00:35:22 millert Exp $	*/
d51 1
a51 1
#define	NULL	0L
@


1.17
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.16 2003/08/01 17:38:33 avsm Exp $	*/
d45 1
a45 1
#include <machine/ansi.h>
d55 3
a57 3
#ifdef	_BSD_CLOCK_T_
typedef	_BSD_CLOCK_T_	clock_t;
#undef	_BSD_CLOCK_T_
d60 3
a62 3
#ifdef	_BSD_TIME_T_
typedef	_BSD_TIME_T_	time_t;
#undef	_BSD_TIME_T_
d65 3
a67 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
@


1.16
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.15 2003/06/26 19:34:17 avsm Exp $	*/
d44 1
d70 17
a86 1
#define CLOCKS_PER_SEC	100
a101 2
#include <sys/cdefs.h>

d123 1
a123 2
#if !defined(_ANSI_SOURCE)
#define CLK_TCK		100
d126 1
a126 1
#endif /* not ANSI */
d128 1
a128 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
d134 1
a134 1
#endif /* neither ANSI nor POSIX */
@


1.15
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.13 2003/06/02 19:34:12 millert Exp $	*/
d96 2
a97 1
size_t strftime(char *, size_t, const char *, const struct tm *);
d100 4
a103 2
char *asctime_r(const struct tm *, char *);
char *ctime_r(const time_t *, char *);
@


1.14
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d96 1
a96 2
size_t strftime(char *, size_t, const char *, const struct tm *)
		__attribute__ ((__bounded__(__string__,1,2)));
d99 2
a100 4
char *asctime_r(const struct tm *, char *)
		__attribute__ ((__bounded__(__minbytes__,2,26)));
char *ctime_r(const time_t *, char *)
		__attribute__ ((__bounded__(__minbytes__,2,26)));
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.12 2002/10/25 21:55:28 millert Exp $	*/
d96 2
a97 1
size_t strftime(char *, size_t, const char *, const struct tm *);
d100 4
a103 2
char *asctime_r(const struct tm *, char *);
char *ctime_r(const time_t *, char *);
@


1.12
log
@NULL is now 0L so it is the same size as a pointer.
OK mickey@@ and discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.11 2002/02/16 21:27:17 millert Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.10 2001/03/09 02:18:00 millert Exp $	*/
d54 1
a54 1
#define	NULL	0
@


1.10
log
@Move nanosleep() proto to from sys/time.h to time.h where it belongs.
Problem noted by Jean-Baptiste Marchand
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.9 2000/08/22 13:59:44 millert Exp $	*/
d93 15
a107 15
char *asctime __P((const struct tm *));
clock_t clock __P((void));
char *ctime __P((const time_t *));
double difftime __P((time_t, time_t));
struct tm *gmtime __P((const time_t *));
struct tm *localtime __P((const time_t *));
time_t mktime __P((struct tm *));
size_t strftime __P((char *, size_t, const char *, const struct tm *));
char *strptime __P((const char *, const char *, struct tm *));
time_t time __P((time_t *));
char *asctime_r __P((const struct tm *, char *));
char *ctime_r __P((const time_t *, char *));
struct tm *gmtime_r __P((const time_t *, struct tm *));
struct tm *localtime_r __P((const time_t *, struct tm *));
int nanosleep __P((const struct timespec *, struct timespec *));
d112 1
a112 1
void tzset __P((void));
d116 5
a120 5
char *timezone __P((int, int));
void tzsetwall __P((void));
time_t timelocal __P((struct tm *));
time_t timegm __P((struct tm *));
time_t timeoff __P((struct tm *, const long));
@


1.9
log
@Prototype timelocal(), timegm(), and timeoff() in the non-ANSI, non-POSIX
section.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.8 1999/09/17 13:13:46 espie Exp $	*/
d92 1
d107 1
@


1.8
log
@Be thorough about NULL as __null for C++.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.7 1999/06/11 22:47:48 espie Exp $	*/
d116 3
@


1.7
log
@Define NULL to be __null for C++: better quality of implementation.
__null is a magic constant of integral type that converts to a null pointer
as should be, but warns for ambiguity when used to resolved an overload
between an integral type and a pointer type.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.6 1999/05/14 23:18:54 aaron Exp $	*/
d52 1
a52 1
#define NULL	__null
@


1.6
log
@use UTC when abbreviating Coordinated Universal Time, not CUT
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.5 1999/03/10 02:43:10 pjanzen Exp $	*/
d51 3
d55 1
@


1.5
log
@Daylight Saving Time, not savings
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.4 1998/11/20 11:18:26 d Exp $	*/
d81 1
a81 1
	long	tm_gmtoff;	/* offset from CUT in seconds */
@


1.4
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.3 1998/02/08 18:50:05 deraadt Exp $	*/
d80 1
a80 1
	int	tm_isdst;	/* Daylight Savings Time flag */
@


1.3
log
@strptime() proto; Andreas.Gunnarsson@@emw.ericsson.se
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.2 1997/09/21 10:45:57 niklas Exp $	*/
d98 4
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: time.h,v 1.9 1994/10/26 00:56:35 cgd Exp $	*/
d96 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
