head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.50
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.42
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.46
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.44
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.40
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.38
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.24
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.26
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.30.02.53.29;	author guenther;	state Exp;
branches;
next	1.9;
commitid	ZyVH79ruiyfArP3e;

1.9
date	2015.09.28.20.49.24;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	sECiWMAXyD1AiKqo;

1.8
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.16.21.54.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.04.00.17;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.15.03.56.48;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	98.08.19.05.04.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.46.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Stop publicly declaring _yp_dobind() and struct dom_binding, closing out
a rant Theo wrote 24 years ago.  Mark __ypexclude_{add,is,free}() as hidden

"get off my lawn!" deraadt@@
@
text
@/*	$OpenBSD: yp_prot.h,v 1.9 2015/09/28 20:49:24 deraadt Exp $	*/
/*	$NetBSD: yp_prot.h,v 1.6 1995/07/14 21:10:58 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _RPCSVC_YP_PROT_H_
#define _RPCSVC_YP_PROT_H_

/*
 * YPSERV PROTOCOL:
 *
 * ypserv supports the following procedures:
 *
 * YPPROC_NULL		takes (void), returns (void).
 *			called to check if server is alive.
 * YPPROC_DOMAIN	takes (char *), returns (bool_t).
 *			true if ypserv serves the named domain.
 * YPPROC_DOMAIN_NOACK	takes (char *), returns (bool_t).
 *			true if ypserv serves the named domain.
 *			used for broadcasts, does not ack if ypserv
 *			doesn't handle named domain.
 * YPPROC_MATCH		takes (struct ypreq_key), returns (struct ypresp_val)
 *			does a lookup.
 * YPPROC_FIRST		takes (struct ypreq_nokey) returns (ypresp_key_val).
 *			gets the first key/datum from the map.
 * YPPROC_NEXT		takes (struct ypreq_key) returns (ypresp_key_val).
 *			gets the next key/datum from the map.
 * YPPROC_XFR		takes (struct ypreq_xfr), returns (void).
 *			tells ypserv to check if there is a new version of
 *			the map.
 * YPPROC_CLEAR		takes (void), returns (void).
 *			tells ypserv to flush it's file cache, so that
 *			newly transferred files will get read.
 * YPPROC_ALL		takes (struct ypreq_nokey), returns (bool_t and
 *			struct ypresp_key_val).
 *			returns an array of data, with the bool_t being
 *			false on the last datum. read the source, it's
 *			convoluted.
 * YPPROC_MASTER	takes (struct ypreq_nokey), returns (ypresp_master).
 * YPPROC_ORDER		takes (struct ypreq_nokey), returns (ypresp_order).
 * YPPROC_MAPLIST	takes (char *), returns (struct ypmaplist *).
 */

#ifndef BOOL_DEFINED
typedef unsigned int bool;
#define BOOL_DEFINED
#endif


/* Program and version symbols, magic numbers */
#define YPPROG		((unsigned long)100004)
#define YPVERS		((unsigned long)2)
#define YPVERS_ORIG	((unsigned long)1)
#define YPMAXRECORD	((unsigned long)1024)
#define YPMAXDOMAIN	((unsigned long)64)
#define YPMAXMAP	((unsigned long)64)
#define YPMAXPEER	((unsigned long)256)

/*
 * I don't know if anything of sun's depends on this, or if they
 * simply defined it so that their own code wouldn't try to send
 * packets over the ethernet MTU. This YP code doesn't use it.
 */
#define YPMSGSZ		1600

#ifndef DATUM
typedef struct {
	const char	*dptr;
	int		 dsize;
} datum;
#define DATUM
#endif

struct ypmap_parms {
	const char *domain;
	const char *map;
	unsigned long ordernum;
	char *owner;
};

struct ypreq_key {
	const char *domain;
	const char *map;
	datum keydat;
};

struct ypreq_nokey {
	const char *domain;
	const char *map;
};

struct ypreq_xfr {
	struct ypmap_parms map_parms;
	unsigned long transid;
	unsigned long proto;
	unsigned short port;
};
#define ypxfr_domain	map_parms.domain
#define ypxfr_map	map_parms.map
#define ypxfr_ordernum	map_parms.ordernum
#define ypxfr_owner	map_parms.owner

struct ypresp_val {
	unsigned long status;
	datum valdat;
};

struct ypresp_key_val {
	unsigned long status;
	datum keydat;
	datum valdat;
};

struct ypresp_master {
	unsigned long status;
	char *master;
};

struct ypresp_order {
	unsigned long status;
	unsigned long ordernum;
};

struct ypresp_all {
	bool_t more;
	union {
		struct ypresp_key_val val;
	} ypresp_all_u;
};

struct ypmaplist {
	char ypml_name[YPMAXMAP + 1];
	struct ypmaplist *ypml_next;
};

struct ypresp_maplist {
	unsigned long status;
	struct ypmaplist *list;
};

/* ypserv procedure numbers */
#define YPPROC_NULL		((unsigned long)0)
#define YPPROC_DOMAIN		((unsigned long)1)
#define YPPROC_DOMAIN_NONACK	((unsigned long)2)
#define YPPROC_MATCH		((unsigned long)3)
#define YPPROC_FIRST		((unsigned long)4)
#define YPPROC_NEXT		((unsigned long)5)
#define YPPROC_XFR		((unsigned long)6)
#define YPPROC_CLEAR		((unsigned long)7)
#define YPPROC_ALL		((unsigned long)8)
#define YPPROC_MASTER		((unsigned long)9)
#define YPPROC_ORDER		((unsigned long)10)
#define YPPROC_MAPLIST		((unsigned long)11)

/* ypserv procedure return status values */
#define YP_TRUE		((unsigned long)1)	/* general purpose success code */
#define YP_NOMORE	((unsigned long)2)	/* no more entries in map */
#define YP_FALSE	((unsigned long)0)	/* general purpose failure code */
#define YP_NOMAP	((unsigned long)-1)	/* no such map in domain */
#define YP_NODOM	((unsigned long)-2)	/* domain not supported */
#define YP_NOKEY	((unsigned long)-3)	/* no such key in map */
#define YP_BADOP	((unsigned long)-4)	/* invalid operation */
#define YP_BADDB	((unsigned long)-5)	/* server data base is bad */
#define YP_YPERR	((unsigned long)-6)	/* YP server error */
#define YP_BADARGS	((unsigned long)-7)	/* request arguments bad */
#define YP_VERS		((unsigned long)-8)	/* YP server version mismatch */

/*
 * YPBIND PROTOCOL:
 *
 * ypbind supports the following procedures:
 *
 * YPBINDPROC_NULL	takes (void), returns (void).
 *			to check if ypbind is running.
 * YPBINDPROC_DOMAIN	takes (char *), returns (struct ypbind_resp).
 *			requests that ypbind start to serve the
 *			named domain (if it doesn't already)
 * YPBINDPROC_SETDOM	takes (struct ypbind_setdom), returns (void).
 *			used by ypset.
 */

#define YPBINDPROG		((unsigned long)100007)
#define YPBINDVERS		((unsigned long)2)
#define YPBINDVERS_ORIG		((unsigned long)1)

/* ypbind procedure numbers */
#define YPBINDPROC_NULL		((unsigned long)0)
#define YPBINDPROC_DOMAIN	((unsigned long)1)
#define YPBINDPROC_SETDOM	((unsigned long)2)

/* error code in ypbind_resp.ypbind_status */
enum ypbind_resptype {
	YPBIND_SUCC_VAL = 1,
	YPBIND_FAIL_VAL = 2
};

/* network order, of course */
struct ypbind_binding {
	struct in_addr	ypbind_binding_addr;
	unsigned short	ypbind_binding_port;
};

struct ypbind_resp {
	enum ypbind_resptype	ypbind_status;
	union {
		unsigned long		ypbind_error;
		struct ypbind_binding	ypbind_bindinfo;
	} ypbind_respbody;
};

/* error code in ypbind_resp.ypbind_respbody.ypbind_error */
#define YPBIND_ERR_ERR		1	/* internal error */
#define YPBIND_ERR_NOSERV	2	/* no bound server for passed domain */
#define YPBIND_ERR_RESC		3	/* system resource allocation failure */

/*
 * Request data structure for ypbind "Set domain" procedure.
 */
struct ypbind_setdom {
	char ypsetdom_domain[YPMAXDOMAIN + 1];
	struct ypbind_binding ypsetdom_binding;
	unsigned short ypsetdom_vers;
};
#define ypsetdom_addr ypsetdom_binding.ypbind_binding_addr
#define ypsetdom_port ypsetdom_binding.ypbind_binding_port

/*
 * YPPUSH PROTOCOL:
 *
 * Sun says:
 * "Protocol between clients (ypxfr, only) and yppush
 *  yppush speaks a protocol in the transient range, which
 *  is supplied to ypxfr as a command-line parameter when it
 *  is activated by ypserv."
 *
 * This protocol is not implemented, naturally, because this YP
 * implementation only does the client side.
 */
#define YPPUSHVERS		((unsigned long)1)
#define YPPUSHVERS_ORIG		((unsigned long)1)

/* yppush procedure numbers */
#define YPPUSHPROC_NULL		((unsigned long)0)
#define YPPUSHPROC_XFRRESP	((unsigned long)1)

struct yppushresp_xfr {
	unsigned long	transid;
	unsigned long	status;
};

/* yppush status value in yppushresp_xfr.status */
#define YPPUSH_SUCC	((unsigned long)1)	/* Success */
#define YPPUSH_AGE	((unsigned long)2)	/* Master's version not newer */
#define YPPUSH_NOMAP	((unsigned long)-1)	/* Can't find server for map */
#define YPPUSH_NODOM	((unsigned long)-2)	/* Domain not supported */
#define YPPUSH_RSRC	((unsigned long)-3)	/* Local resouce alloc failure */
#define YPPUSH_RPC	((unsigned long)-4)	/* RPC failure talking to server */
#define YPPUSH_MADDR	((unsigned long)-5)	/* Can't get master address */
#define YPPUSH_YPERR	((unsigned long)-6)	/* YP server/map db error */
#define YPPUSH_BADARGS	((unsigned long)-7)	/* Request arguments bad */
#define YPPUSH_DBM	((unsigned long)-8)	/* Local dbm operation failed */
#define YPPUSH_FILE	((unsigned long)-9)	/* Local file I/O operation failed */
#define YPPUSH_SKEW	((unsigned long)-10)	/* Map version skew during transfer */
#define YPPUSH_CLEAR	((unsigned long)-11)	/* Can't send "Clear" req to local ypserv */
#define YPPUSH_FORCE	((unsigned long)-12)	/* No local order number in map - use -f */
#define YPPUSH_XFRERR	((unsigned long)-13)	/* ypxfr error */
#define YPPUSH_REFUSED	((unsigned long)-14)	/* Transfer request refused by ypserv */

__BEGIN_DECLS
bool_t xdr_domainname(XDR *, char *);
bool_t xdr_peername(XDR *, char *);
bool_t xdr_datum(XDR *, datum *);
bool_t xdr_mapname(XDR *, char *);
bool_t xdr_ypreq_key(XDR *, struct ypreq_key *);
bool_t xdr_ypreq_nokey(XDR *, struct ypreq_nokey *);
bool_t xdr_yp_inaddr(XDR *, struct in_addr *);
bool_t xdr_ypbind_binding(XDR *, struct ypbind_binding *);
bool_t xdr_ypbind_resptype(XDR *, enum ypbind_resptype *);
bool_t xdr_ypstat(XDR *, enum ypbind_resptype *);
bool_t xdr_ypbind_resp(XDR *, struct ypbind_resp *);
bool_t xdr_ypresp_val(XDR *, struct ypresp_val *);
bool_t xdr_ypbind_setdom(XDR *, struct ypbind_setdom *);
bool_t xdr_ypresp_key_val(XDR *, struct ypresp_key_val *);
bool_t xdr_ypresp_all(XDR *, struct ypresp_all *);
bool_t xdr_ypresp_master(XDR *, struct ypresp_master *);
bool_t xdr_ypmaplist_str(XDR *, char *);
bool_t xdr_ypmaplist(XDR *, struct ypmaplist *);
bool_t xdr_ypresp_maplist(XDR *, struct ypresp_maplist *);
bool_t xdr_ypresp_order(XDR *, struct ypresp_order *);
__END_DECLS

#endif /* _RPCSVC_YP_PROT_H_ */
@


1.9
log
@delete xdr_ypresp_all_seq prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.8 2004/01/22 21:48:02 espie Exp $	*/
a190 23

/*
 * Sun's header file says:
 * "Domain binding data structure, used by ypclnt package and ypserv modules.
 * Users of the ypclnt package (or of this protocol) don't HAVE to know about
 * it, but it must be available to users because _yp_dobind is a public
 * interface."
 *
 * This is totally bogus! Nowhere else does Sun state that _yp_dobind() is
 * a public interface, and I don't know any reason anyone would want to call
 * it. But, just in case anyone does actually expect it to be available..
 * we provide this.. exactly as Sun wants it.
 */
struct dom_binding {
	struct dom_binding *dom_pnext;
	char dom_domain[YPMAXDOMAIN + 1];
	struct sockaddr_in dom_server_addr;
	unsigned short dom_server_port;
	int dom_socket;
	CLIENT *dom_client;
	unsigned short dom_local_port;
	long dom_vers;
};
@


1.8
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.7 2004/01/16 21:54:18 deraadt Exp $	*/
a331 1
bool_t xdr_ypresp_all_seq(XDR *, unsigned long *);
@


1.7
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.6 2003/06/02 04:00:17 deraadt Exp $	*/
d69 1
a69 1
typedef u_int bool;
d75 7
a81 7
#define YPPROG		((u_long)100004)
#define YPVERS		((u_long)2)
#define YPVERS_ORIG	((u_long)1)
#define YPMAXRECORD	((u_long)1024)
#define YPMAXDOMAIN	((u_long)64)
#define YPMAXMAP	((u_long)64)
#define YPMAXPEER	((u_long)256)
d101 1
a101 1
	u_long ordernum;
d118 3
a120 3
	u_long transid;
	u_long proto;
	u_short port;
d128 1
a128 1
	u_long status;
d133 1
a133 1
	u_long status;
d139 1
a139 1
	u_long status;
d144 2
a145 2
	u_long status;
	u_long ordernum;
d161 1
a161 1
	u_long status;
d166 12
a177 12
#define YPPROC_NULL		((u_long)0)
#define YPPROC_DOMAIN		((u_long)1)
#define YPPROC_DOMAIN_NONACK	((u_long)2)
#define YPPROC_MATCH		((u_long)3)
#define YPPROC_FIRST		((u_long)4)
#define YPPROC_NEXT		((u_long)5)
#define YPPROC_XFR		((u_long)6)
#define YPPROC_CLEAR		((u_long)7)
#define YPPROC_ALL		((u_long)8)
#define YPPROC_MASTER		((u_long)9)
#define YPPROC_ORDER		((u_long)10)
#define YPPROC_MAPLIST		((u_long)11)
d208 1
a208 1
	u_short dom_server_port;
d211 1
a211 1
	u_short dom_local_port;
d229 3
a231 3
#define YPBINDPROG		((u_long)100007)
#define YPBINDVERS		((u_long)2)
#define YPBINDVERS_ORIG		((u_long)1)
d234 3
a236 3
#define YPBINDPROC_NULL		((u_long)0)
#define YPBINDPROC_DOMAIN	((u_long)1)
#define YPBINDPROC_SETDOM	((u_long)2)
d247 1
a247 1
	u_short		ypbind_binding_port;
d253 1
a253 1
		u_long			ypbind_error;
d269 1
a269 1
	u_short ypsetdom_vers;
d286 2
a287 2
#define YPPUSHVERS		((u_long)1)
#define YPPUSHVERS_ORIG		((u_long)1)
d290 2
a291 2
#define YPPUSHPROC_NULL		((u_long)0)
#define YPPUSHPROC_XFRRESP	((u_long)1)
d294 2
a295 2
	u_long	transid;
	u_long	status;
d332 1
a332 1
bool_t xdr_ypresp_all_seq(XDR *, u_long *);
@


1.6
log
@remove terms 3 and 4 of some of my licences
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.5 2002/02/16 21:27:18 millert Exp $	*/
d35 1
a35 1
 * 
d37 1
a37 1
 * 
d39 1
a39 1
 * 			called to check if server is alive.
d41 1
a41 1
 * 			true if ypserv serves the named domain.
d43 1
a43 1
 * 			true if ypserv serves the named domain.
d47 1
a47 1
 * 			does a lookup.
d49 1
a49 1
 * 			gets the first key/datum from the map.
d51 1
a51 1
 * 			gets the next key/datum from the map.
d53 1
a53 1
 * 			tells ypserv to check if there is a new version of
d56 1
a56 1
 * 			tells ypserv to flush it's file cache, so that
d60 2
a61 2
 * 			returns an array of data, with the bool_t being
 * 			false on the last datum. read the source, it's
d180 10
a189 10
#define YP_TRUE	 	((unsigned long)1)	/* general purpose success code */
#define YP_NOMORE 	((unsigned long)2)	/* no more entries in map */
#define YP_FALSE 	((unsigned long)0)	/* general purpose failure code */
#define YP_NOMAP 	((unsigned long)-1)	/* no such map in domain */
#define YP_NODOM 	((unsigned long)-2)	/* domain not supported */
#define YP_NOKEY 	((unsigned long)-3)	/* no such key in map */
#define YP_BADOP 	((unsigned long)-4)	/* invalid operation */
#define YP_BADDB 	((unsigned long)-5)	/* server data base is bad */
#define YP_YPERR 	((unsigned long)-6)	/* YP server error */
#define YP_BADARGS 	((unsigned long)-7)	/* request arguments bad */
d198 1
a198 1
 * 
d217 1
a217 1
 * 
d228 1
a228 1
 
d276 1
a276 1
 * 
d282 1
a282 1
 * 
d301 4
a304 4
#define YPPUSH_NOMAP 	((unsigned long)-1)	/* Can't find server for map */
#define YPPUSH_NODOM 	((unsigned long)-2)	/* Domain not supported */
#define YPPUSH_RSRC 	((unsigned long)-3)	/* Local resouce alloc failure */
#define YPPUSH_RPC 	((unsigned long)-4)	/* RPC failure talking to server */
d306 2
a307 2
#define YPPUSH_YPERR 	((unsigned long)-6)	/* YP server/map db error */
#define YPPUSH_BADARGS 	((unsigned long)-7)	/* Request arguments bad */
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.4 2000/03/15 03:56:48 todd Exp $	*/
d5 1
a5 1
 * Copyright (c) 1992, 1993 Theo de Raadt <deraadt@@fsa.ca>
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Theo de Raadt.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@implimented -> implemented
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.3 1998/08/19 05:04:09 deraadt Exp $	*/
d322 21
a342 21
bool_t xdr_domainname __P((XDR *, char *));
bool_t xdr_peername __P((XDR *, char *));
bool_t xdr_datum __P((XDR *, datum *));
bool_t xdr_mapname __P((XDR *, char *));
bool_t xdr_ypreq_key __P((XDR *, struct ypreq_key *));
bool_t xdr_ypreq_nokey __P((XDR *, struct ypreq_nokey *));
bool_t xdr_yp_inaddr __P((XDR *, struct in_addr *));
bool_t xdr_ypbind_binding __P((XDR *, struct ypbind_binding *));
bool_t xdr_ypbind_resptype __P((XDR *, enum ypbind_resptype *));
bool_t xdr_ypstat __P((XDR *, enum ypbind_resptype *));
bool_t xdr_ypbind_resp __P((XDR *, struct ypbind_resp *));
bool_t xdr_ypresp_val __P((XDR *, struct ypresp_val *));
bool_t xdr_ypbind_setdom __P((XDR *, struct ypbind_setdom *));
bool_t xdr_ypresp_key_val __P((XDR *, struct ypresp_key_val *));
bool_t xdr_ypresp_all __P((XDR *, struct ypresp_all *));
bool_t xdr_ypresp_all_seq __P((XDR *, u_long *));
bool_t xdr_ypresp_master __P((XDR *, struct ypresp_master *));
bool_t xdr_ypmaplist_str __P((XDR *, char *));
bool_t xdr_ypmaplist __P((XDR *, struct ypmaplist *));
bool_t xdr_ypresp_maplist __P((XDR *, struct ypresp_maplist *));
bool_t xdr_ypresp_order __P((XDR *, struct ypresp_order *));
@


1.3
log
@make errors unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.2 1997/09/21 10:46:19 niklas Exp $	*/
d288 2
a289 2
 * This protocol is not implimented, naturally, because this YP
 * implimentation only does the client side.
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: yp_prot.h,v 1.6 1995/07/14 21:10:58 christos Exp $	*/
d185 11
a195 11
#define YP_TRUE	 	((long)1)	/* general purpose success code */
#define YP_NOMORE 	((long)2)	/* no more entries in map */
#define YP_FALSE 	((long)0)	/* general purpose failure code */
#define YP_NOMAP 	((long)-1)	/* no such map in domain */
#define YP_NODOM 	((long)-2)	/* domain not supported */
#define YP_NOKEY 	((long)-3)	/* no such key in map */
#define YP_BADOP 	((long)-4)	/* invalid operation */
#define YP_BADDB 	((long)-5)	/* server data base is bad */
#define YP_YPERR 	((long)-6)	/* YP server error */
#define YP_BADARGS 	((long)-7)	/* request arguments bad */
#define YP_VERS		((long)-8)	/* YP server version mismatch */
d304 16
a319 16
#define YPPUSH_SUCC	((long)1)	/* Success */
#define YPPUSH_AGE	((long)2)	/* Master's version not newer */
#define YPPUSH_NOMAP 	((long)-1)	/* Can't find server for map */
#define YPPUSH_NODOM 	((long)-2)	/* Domain not supported */
#define YPPUSH_RSRC 	((long)-3)	/* Local resouce alloc failure */
#define YPPUSH_RPC 	((long)-4)	/* RPC failure talking to server */
#define YPPUSH_MADDR	((long)-5)	/* Can't get master address */
#define YPPUSH_YPERR 	((long)-6)	/* YP server/map db error */
#define YPPUSH_BADARGS 	((long)-7)	/* Request arguments bad */
#define YPPUSH_DBM	((long)-8)	/* Local dbm operation failed */
#define YPPUSH_FILE	((long)-9)	/* Local file I/O operation failed */
#define YPPUSH_SKEW	((long)-10)	/* Map version skew during transfer */
#define YPPUSH_CLEAR	((long)-11)	/* Can't send "Clear" req to local ypserv */
#define YPPUSH_FORCE	((long)-12)	/* No local order number in map - use -f */
#define YPPUSH_XFRERR	((long)-13)	/* ypxfr error */
#define YPPUSH_REFUSED	((long)-14)	/* Transfer request refused by ypserv */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
