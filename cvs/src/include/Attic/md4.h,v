head	1.17;
access;
symbols
	OPENBSD_5_5:1.16.0.8
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.34
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.32
	OPENBSD_5_0:1.15.0.30
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.28
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.26
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.22
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.24
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.20
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.18
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.16
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.14
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.17
date	2014.03.23.23.27.22;	author naddy;	state dead;
branches;
next	1.16;

1.16
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.06.22.01.57.30;	author jfb;	state Exp;
branches;
next	1.14;

1.14
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.28.16.54.00;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.07.22.17.27;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.23.04.33.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.28.17.35.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.11.24.02.25.57;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.30.03.55.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.29.14.53.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.06.03.22.25.54;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove the MD4 functions.
"A collision attack published in 2007 can find collisions for full
MD4 in less than two hash operations."

ok deraadt@@, man pages ok jmc@@
@
text
@/*	$OpenBSD: md4.h,v 1.16 2012/12/05 23:19:57 deraadt Exp $	*/

/*
 * This code implements the MD4 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 * Todd C. Miller modified the MD5 code to do MD4 based on RFC 1186.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 */

#ifndef _MD4_H_
#define _MD4_H_

#define	MD4_BLOCK_LENGTH		64
#define	MD4_DIGEST_LENGTH		16
#define	MD4_DIGEST_STRING_LENGTH	(MD4_DIGEST_LENGTH * 2 + 1)

typedef struct MD4Context {
	u_int32_t state[4];			/* state */
	u_int64_t count;			/* number of bits, mod 2^64 */
	u_int8_t buffer[MD4_BLOCK_LENGTH];	/* input buffer */
} MD4_CTX;

__BEGIN_DECLS
void	 MD4Init(MD4_CTX *);
void	 MD4Update(MD4_CTX *, const u_int8_t *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
void	 MD4Pad(MD4_CTX *);
void	 MD4Final(u_int8_t [MD4_DIGEST_LENGTH], MD4_CTX *)
		__attribute__((__bounded__(__minbytes__,1,MD4_DIGEST_LENGTH)));
void	 MD4Transform(u_int32_t [4], const u_int8_t [MD4_BLOCK_LENGTH])
		__attribute__((__bounded__(__minbytes__,1,4)))
		__attribute__((__bounded__(__minbytes__,2,MD4_BLOCK_LENGTH)));
char	*MD4End(MD4_CTX *, char *)
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
char	*MD4File(const char *, char *)
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
char	*MD4FileChunk(const char *, char *, off_t, off_t)
		__attribute__((__bounded__(__minbytes__,2,MD4_DIGEST_STRING_LENGTH)));
char	*MD4Data(const u_int8_t *, size_t, char *)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,3,MD4_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif /* _MD4_H_ */
@


1.16
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.h,v 1.15 2004/06/22 01:57:30 jfb Exp $	*/
@


1.15
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.h,v 1.14 2004/05/03 17:30:14 millert Exp $	*/
a27 2

#include <sys/cdefs.h>
@


1.14
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.h,v 1.13 2004/04/29 15:51:16 millert Exp $	*/
d43 1
a43 1
char	*MD4File(char *, char *)
d45 1
a45 1
char	*MD4FileChunk(char *, char *, off_t, off_t)
@


1.13
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.h,v 1.12 2004/04/28 16:54:00 millert Exp $	*/
d35 1
d44 2
@


1.12
log
@PD md4 code derived from Colin Plumb's md5 routines.
@
text
@d1 1
a1 1
/*	$OpenBSD: md4.h,v 1.11 2003/10/07 22:17:27 avsm Exp $	*/
d40 1
a40 1
char	*MD4End(MD4_CTX *, char [MD4_DIGEST_STRING_LENGTH])
d42 1
a42 1
char	*MD4File(char *, char [MD4_DIGEST_STRING_LENGTH])
d44 1
a44 1
char	*MD4Data(const u_int8_t *, size_t, char [MD4_DIGEST_STRING_LENGTH])
@


1.11
log
@corrent __bounded__ attribute for the *Data functions, and add
__minbytes__ checks where appropriate.  tested by itojun@@

fixes PR 3505 from Janjaap van Velthooven
@
text
@d1 1
a1 6
/* MD4.H - header file for MD4C.C
 * $OpenBSD: md4.h,v 1.10 2003/08/01 17:38:33 avsm Exp $
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
   rights reserved.
d3 11
a13 16
   License to copy and use this software is granted provided that it
   is identified as the "RSA Data Security, Inc. MD4 Message-Digest
   Algorithm" in all material mentioning or referencing this software
   or this function.
   License is also granted to make and use derivative works provided
   that such works are identified as "derived from the RSA Data
   Security, Inc. MD4 Message-Digest Algorithm" in all material
   mentioning or referencing the derived work.

   RSA Data Security, Inc. makes no representations concerning either
   the merchantability of this software or the suitability of this
   software for any particular purpose. It is provided "as is"
   without express or implied warranty of any kind.

   These notices must be retained in any copies of any part of this
   documentation and/or software.
d19 4
a22 1
/* MD4 context. */
d24 3
a26 3
    u_int32_t state[4];		/* state (ABCD) */
    u_int64_t count;		/* number of bits, modulo 2^64 */
    unsigned char buffer[64];	/* input buffer */
d32 2
a33 2
void   MD4Init(MD4_CTX *);
void   MD4Update(MD4_CTX *, const unsigned char *, size_t)
d35 3
a37 3
void   MD4Final(unsigned char [16], MD4_CTX *)
		__attribute__((__bounded__(__minbytes__,1,16)));
void   MD4Transform(u_int32_t [4], const unsigned char [64])
d39 6
a44 6
		__attribute__((__bounded__(__minbytes__,2,64)));
char * MD4End(MD4_CTX *, char *)
                __attribute__((__bounded__(__minbytes__,2,33)));
char * MD4File(char *, char *)
		__attribute__((__bounded__(__minbytes__,2,33)));
char * MD4Data(const unsigned char *, size_t, char *)
d46 1
a46 1
		__attribute__((__bounded__(__minbytes__,3,33)));
@


1.10
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.9 2003/06/26 19:34:17 avsm Exp $
d40 11
a50 5
void   MD4Update(MD4_CTX *, const unsigned char *, size_t);
void   MD4Final(unsigned char [16], MD4_CTX *);
void   MD4Transform(u_int32_t [4], const unsigned char [64]);
char * MD4End(MD4_CTX *, char *);
char * MD4File(char *, char *);
d52 2
a53 1
		__attribute__((__bounded__(__string__,3,2)));
@


1.9
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.7 2002/12/23 04:33:31 millert Exp $
d45 2
a46 1
char * MD4Data(const unsigned char *, size_t, char *);
@


1.8
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d45 1
a45 2
char * MD4Data(const unsigned char *, size_t, char *)
		__attribute__((__bounded__(__string__,3,2)));
@


1.7
log
@o Ansi function headers
o Add __BEGIN_DECLS/__END_DECLS to include files
o Safe macros
o Remove useless variable assignment in the End function of *hl.c
o Some minor KNF, needs more
From Dan Weeks
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.6 2002/02/16 21:27:17 millert Exp $
d45 2
a46 1
char * MD4Data(const unsigned char *, size_t, char *);
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.5 2000/03/28 17:35:07 millert Exp $
d36 3
d46 1
@


1.5
log
@Expose MDXTransform functions to be consistent with sha1 and rmd160.
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.4 1996/11/24 02:25:57 niklas Exp $
d36 7
a42 7
void   MD4Init __P((MD4_CTX *));
void   MD4Update __P((MD4_CTX *, const unsigned char *, size_t));
void   MD4Final __P((unsigned char [16], MD4_CTX *));
void   MD4Transform __P ((u_int32_t [4], const unsigned char [64]));
char * MD4End __P((MD4_CTX *, char *));
char * MD4File __P((char *, char *));
char * MD4Data __P((const unsigned char *, size_t, char *));
@


1.4
log
@64-bit cleanup + pedantic -W flags
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.3 1996/09/30 03:55:47 millert Exp $
d39 1
@


1.3
log
@Protect prototypes with __P.
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.2 1996/09/29 14:53:09 millert Exp $
d32 1
a32 1
    u_int32_t count[2];		/* number of bits, modulo 2^64 (lsb first) */
d37 1
a37 1
void   MD4Update __P((MD4_CTX *, const unsigned char *, unsigned int));
d41 1
a41 1
char * MD4Data __P((const unsigned char *, unsigned int, char *));
@


1.2
log
@Use bittypes so we work on 64-bit machines.
@
text
@d2 1
a2 1
 * $OpenBSD: md4.h,v 1.1 1996/06/03 22:25:54 niklas Exp $
d28 1
d31 3
a33 3
  u_int32_t state[4];		/* state (ABCD) */
  u_int32_t count[2];		/* number of bits, modulo 2^64 (lsb first) */
  unsigned char buffer[64];	/* input buffer */
d36 6
a41 6
void   MD4Init(MD4_CTX *);
void   MD4Update(MD4_CTX *, const unsigned char *, unsigned int);
void   MD4Final(unsigned char [16], MD4_CTX *);
char * MD4End(MD4_CTX *, char *);
char * MD4File(char *, char *);
char * MD4Data(const unsigned char *, unsigned int, char *);
@


1.1
log
@Add md[245].h include files for use with the md support in libc, from FreeBSD
@
text
@d2 1
a2 1
 * $OpenBSD$
d30 2
a31 2
  unsigned long state[4];	/* state (ABCD) */
  unsigned long count[2];	/* number of bits, modulo 2^64 (lsb first) */
@
