head	1.12;
access;
symbols
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.28
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.26
	OPENBSD_5_0:1.9.0.24
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.05.12.19.27.24;	author espie;	state dead;
branches;
next	1.11;

1.11
date	2014.05.12.19.07.37;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.23.15.05.23;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.16.15.52.25;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.29.18.54.47;	author jaredy;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.22.20.00.16;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.02.13.27.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@these files have moved to libutil
@
text
@#ifndef OHASH_H
#define OHASH_H
/* $OpenBSD: ohash.h,v 1.11 2014/05/12 19:07:37 espie Exp $ */
/* ex:ts=8 sw=4: 
 */

/* Copyright (c) 1999, 2004 Marc Espie <espie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* Open hashing support. 
 * Open hashing was chosen because it is much lighter than other hash
 * techniques, and more efficient in most cases.
 */

/* user-visible data structure */
struct ohash_info {
	ptrdiff_t key_offset;
	void *data;	/* user data */
	void *(*calloc)(size_t, size_t, void *);
	void (*free)(void *, void *);
	void *(*alloc)(size_t, void *);
};

struct _ohash_record;

/* private structure. It's there just so you can do a sizeof */
struct ohash {
	struct _ohash_record 	*t;
	struct ohash_info 	info;
	unsigned int 		size;
	unsigned int 		total;
	unsigned int 		deleted;
};

/* For this to be tweakable, we use small primitives, and leave part of the
 * logic to the client application.  e.g., hashing is left to the client
 * application.  We also provide a simple table entry lookup that yields
 * a hashing table index (opaque) to be used in find/insert/remove.
 * The keys are stored at a known position in the client data.
 */
__BEGIN_DECLS
void ohash_init(struct ohash *, unsigned, struct ohash_info *);
void ohash_delete(struct ohash *);

unsigned int ohash_lookup_interval(struct ohash *, const char *,
	    const char *, uint32_t);
unsigned int ohash_lookup_memory(struct ohash *, const char *,
	    size_t, uint32_t)
		__attribute__ ((__bounded__(__string__,2,3)));
void *ohash_find(struct ohash *, unsigned int);
void *ohash_remove(struct ohash *, unsigned int);
void *ohash_insert(struct ohash *, unsigned int, void *);
void *ohash_first(struct ohash *, unsigned int *);
void *ohash_next(struct ohash *, unsigned int *);
unsigned int ohash_entries(struct ohash *);

void *ohash_create_entry(struct ohash_info *, const char *, const char **);
uint32_t ohash_interval(const char *, const char **);

unsigned int ohash_qlookupi(struct ohash *, const char *, const char **);
unsigned int ohash_qlookup(struct ohash *, const char *);
__END_DECLS
#endif
@


1.11
log
@tweak interface to do the right thing, after useful comments from millert@@
(mostly use a calloc function to avoid potential integer overflow)
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.10 2012/09/23 15:05:23 espie Exp $ */
@


1.10
log
@uint32_t is the integer type defined in stdint.h
u_int32_t is historical BSD stuff.
fix to match the manpage, namely #include <stdint.h> as a prerequisite.

okay millert@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.9 2006/01/16 15:52:25 espie Exp $ */
d27 1
d31 2
a32 2
	void *(*halloc)(size_t, void *);
	void (*hfree)(void *, size_t, void *);
d38 1
@


1.9
log
@use standard type uint32_t, instead of BSD-specific u_int32_t

tell user to get it through stdint.h (note old sys/types.h still works,
for now).

okay millert@@, jmc@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.8 2005/12/29 18:54:47 jaredy Exp $ */
d68 1
a68 1
u_int32_t ohash_interval(const char *, const char **);
@


1.8
log
@zap unused ohash_lookup_string declaration; ok espie
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.7 2004/06/22 20:00:16 espie Exp $ */
d56 1
a56 1
	    const char *, u_int32_t);
d58 1
a58 1
	    size_t, u_int32_t)
@


1.7
log
@Cosmetic clean-up.
Simpler licence, update copyright years, trim empty lines, ISO declarations.
okay miod@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.6 2003/08/01 17:38:33 avsm Exp $ */
a54 1
unsigned int ohash_lookup_string(struct ohash *, const char *, u_int32_t);
@


1.6
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.5 2003/06/26 19:34:17 avsm Exp $ */
d7 1
a7 2
/*
 * Copyright (c) 1999 Marc Espie.
d9 3
a11 10
 * Code written for the OpenBSD project.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d13 7
a19 11
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.5
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.3 2002/02/17 19:42:21 millert Exp $ */
d71 2
a72 1
	    size_t, u_int32_t);
@


1.4
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d71 1
a71 2
	    size_t, u_int32_t)
		__attribute__ ((__bounded__(__string__,2,3)));
@


1.3
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.2 2002/02/16 21:27:17 millert Exp $ */
d71 2
a72 1
	    size_t, u_int32_t);
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.1 2001/03/02 13:27:05 espie Exp $ */
d68 4
a71 4
unsigned int ohash_lookup_interval __P((struct ohash *, const char *, \
	const char *, u_int32_t));
unsigned int ohash_lookup_memory __P((struct ohash *, const char *, \
	size_t, u_int32_t));
@


1.1
log
@Add ohash_* functions to libc.
Ok'd deraadt@@, millert@@
@
text
@d3 1
a3 1
/* $OpenBSD: ohash.h,v 1.2 2000/06/28 10:12:49 espie Exp $ */
d42 3
a44 3
	void *(*halloc) __P((size_t, void *));
	void (*hfree) __P((void *, size_t, void *));
	void *(*alloc) __P((size_t, void *));
d64 2
a65 2
void ohash_init __P((struct ohash *, unsigned, struct ohash_info *));
void ohash_delete __P((struct ohash *));
d67 1
a67 1
unsigned int ohash_lookup_string __P((struct ohash *, const char *, u_int32_t));
d72 6
a77 6
void *ohash_find __P((struct ohash *, unsigned int));
void *ohash_remove __P((struct ohash *, unsigned int));
void *ohash_insert __P((struct ohash *, unsigned int, void *));
void *ohash_first __P((struct ohash *, unsigned int *));
void *ohash_next __P((struct ohash *, unsigned int *));
unsigned int ohash_entries __P((struct ohash *));
d79 2
a80 2
void *ohash_create_entry __P((struct ohash_info *, const char *, const char **));
u_int32_t ohash_interval __P((const char *, const char **));
d82 2
a83 2
unsigned int ohash_qlookupi __P((struct ohash *, const char *, const char **));
unsigned int ohash_qlookup __P((struct ohash *, const char *));
@

