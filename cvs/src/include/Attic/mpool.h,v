head	1.12;
access;
symbols
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.40
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.38
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.36
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.34
	OPENBSD_5_0:1.10.0.32
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.30
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.28
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.24
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.26
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.09.15.35.24;	author guenther;	state dead;
branches;
next	1.11;
commitid	b4xqztRSgDeFBXls;

1.11
date	2013.12.02.02.28.21;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.02.15.21.17.48;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.02.15.21.13.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.09.21.10.45.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.02.27.00.57.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.09.02.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Stop exporting from libc the <mpool.h> and the mpool_* API

ports scan by sthen@@
@
text
@/*	$OpenBSD: mpool.h,v 1.11 2013/12/02 02:28:21 krw Exp $	*/
/*	$NetBSD: mpool.h,v 1.7 1996/05/03 21:13:41 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mpool.h	8.4 (Berkeley) 11/2/95
 */

#ifndef _MPOOL_H_ 
#define _MPOOL_H_

#include <sys/queue.h>

/*
 * The memory pool scheme is a simple one.  Each in-memory page is referenced
 * by a bucket which is threaded in up to two of three ways.  All active pages
 * are threaded on a hash chain (hashed by page number) and an lru chain.
 * Inactive pages are threaded on a free chain.  Each reference to a memory
 * pool is handed an opaque MPOOL cookie which stores all of this information.
 */
#define	HASHSIZE	128
#define	HASHKEY(pgno)	((pgno - 1 + HASHSIZE) % HASHSIZE)

/* The BKT structures are the elements of the queues. */
typedef struct _bkt {
	TAILQ_ENTRY(_bkt) hq;		/* hash queue */
	TAILQ_ENTRY(_bkt) q;		/* lru queue */
	void    *page;			/* page */
	pgno_t   pgno;			/* page number */

#define	MPOOL_DIRTY	0x01		/* page needs to be written */
#define	MPOOL_PINNED	0x02		/* page is pinned into memory */
#define	MPOOL_INUSE	0x04		/* page address is valid */
	u_int8_t flags;			/* flags */
} BKT;

typedef struct MPOOL {
	TAILQ_HEAD(_lqh, _bkt) lqh;	/* lru queue head */
					/* hash queue array */
	TAILQ_HEAD(_hqh, _bkt) hqh[HASHSIZE];
	pgno_t	curcache;		/* current number of cached pages */
	pgno_t	maxcache;		/* max number of cached pages */
	pgno_t	npages;			/* number of pages in the file */
	unsigned long	pagesize;	/* file page size */
	int	fd;			/* file descriptor */
					/* page in conversion routine */
	void    (*pgin)(void *, pgno_t, void *);
					/* page out conversion routine */
	void    (*pgout)(void *, pgno_t, void *);
	void	*pgcookie;		/* cookie for page in/out routines */
#ifdef STATISTICS
	unsigned long	cachehit;
	unsigned long	cachemiss;
	unsigned long	pagealloc;
	unsigned long	pageflush;
	unsigned long	pageget;
	unsigned long	pagenew;
	unsigned long	pageput;
	unsigned long	pageread;
	unsigned long	pagewrite;
#endif
} MPOOL;

#define	MPOOL_IGNOREPIN	0x01		/* Ignore if the page is pinned. */
#define	MPOOL_PAGE_REQUEST	0x01	/* Allocate a new page with a
					   specific page number. */
#define	MPOOL_PAGE_NEXT		0x02	/* Allocate a new page with the next
					  page number. */

__BEGIN_DECLS
MPOOL	*mpool_open(void *, int, pgno_t, pgno_t);
void	 mpool_filter(MPOOL *, void (*)(void *, pgno_t, void *),
	    void (*)(void *, pgno_t, void *), void *);
void	*mpool_new(MPOOL *, pgno_t *, unsigned int);
void	*mpool_get(MPOOL *, pgno_t, unsigned int);
int	 mpool_delete(MPOOL *, void *);
int	 mpool_put(MPOOL *, void *, unsigned int);
int	 mpool_sync(MPOOL *);
int	 mpool_close(MPOOL *);
#ifdef STATISTICS
void	 mpool_stat(MPOOL *);
#endif
__END_DECLS

#endif
@


1.11
log
@CIRCLEQ begone.

ok miller@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.10 2004/01/22 21:48:02 espie Exp $	*/
@


1.10
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.9 2003/06/02 19:34:12 millert Exp $	*/
d52 2
a53 2
	CIRCLEQ_ENTRY(_bkt) hq;		/* hash queue */
	CIRCLEQ_ENTRY(_bkt) q;		/* lru queue */
d64 1
a64 1
	CIRCLEQ_HEAD(_lqh, _bkt) lqh;	/* lru queue head */
d66 1
a66 1
	CIRCLEQ_HEAD(_hqh, _bkt) hqh[HASHSIZE];
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.8 2002/02/17 19:42:21 millert Exp $	*/
d70 1
a70 1
	u_long	pagesize;		/* file page size */
d78 9
a86 9
	u_long	cachehit;
	u_long	cachemiss;
	u_long	pagealloc;
	u_long	pageflush;
	u_long	pageget;
	u_long	pagenew;
	u_long	pageput;
	u_long	pageread;
	u_long	pagewrite;
d100 2
a101 2
void	*mpool_new(MPOOL *, pgno_t *, u_int);
void	*mpool_get(MPOOL *, pgno_t, u_int);
d103 1
a103 1
int	 mpool_put(MPOOL *, void *, u_int);
@


1.8
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.7 2002/02/16 21:27:17 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.6 1999/02/15 21:17:48 millert Exp $	*/
d102 2
a103 2
void	 mpool_filter __P((MPOOL *, void (*)(void *, pgno_t, void *),
	    void (*)(void *, pgno_t, void *), void *));
@


1.6
log
@Update HASHKEY macro from db 1.8.6.  I didn't update that initially as I thought it related to the new hash code--it does not
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.5 1999/02/15 21:13:07 millert Exp $	*/
d77 1
a77 1
	void    (*pgin) __P((void *, pgno_t, void *));
d79 1
a79 1
	void    (*pgout) __P((void *, pgno_t, void *));
d101 1
a101 1
MPOOL	*mpool_open __P((void *, int, pgno_t, pgno_t));
d104 6
a109 6
void	*mpool_new __P((MPOOL *, pgno_t *, u_int));
void	*mpool_get __P((MPOOL *, pgno_t, u_int));
int	 mpool_delete __P((MPOOL *, void *));
int	 mpool_put __P((MPOOL *, void *, u_int));
int	 mpool_sync __P((MPOOL *));
int	 mpool_close __P((MPOOL *));
d111 1
a111 1
void	 mpool_stat __P((MPOOL *));
@


1.5
log
@missed this in the libc/db update
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.4 1997/09/21 10:45:43 niklas Exp $	*/
d52 1
a52 1
#define	HASHKEY(pgno)	((pgno - 1) % HASHSIZE)
@


1.4
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: mpool.h,v 1.7 1996/05/03 21:13:41 cgd Exp $	*/
d36 1
a36 1
 *	@@(#)mpool.h	8.2 (Berkeley) 7/14/94
d63 1
d94 6
d104 1
a104 1
void	*mpool_new __P((MPOOL *, pgno_t *));
d106 1
@


1.3
log
@Protect against multiple inclusion.
@
text
@d1 1
@


1.2
log
@db release 1.85
@
text
@d38 3
d105 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: mpool.h,v 1.6 1994/10/26 00:56:07 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1991, 1993
d35 1
a35 1
 *	@@(#)mpool.h	8.1 (Berkeley) 6/2/93
d38 2
d41 5
a45 6
 * The memory pool scheme is a simple one.  Each in memory page is referenced
 * by a bucket which is threaded in three ways.  All active pages are threaded
 * on a hash chain (hashed by the page number) and an lru chain.  Inactive
 * pages are threaded on a free chain.  Each reference to a memory pool is
 * handed an MPOOL which is the opaque cookie passed to all of the memory
 * routines.
d50 6
a55 8
/* The BKT structures are the elements of the lists. */
typedef struct BKT {
	struct BKT	*hnext;		/* next hash bucket */
	struct BKT	*hprev;		/* previous hash bucket */
	struct BKT	*cnext;		/* next free/lru bucket */
	struct BKT	*cprev;		/* previous free/lru bucket */
	void		*page;		/* page */
	pgno_t		pgno;		/* page number */
d59 1
a59 1
	unsigned long	flags;		/* flags */
a61 8
/* The BKTHDR structures are the heads of the lists. */
typedef struct BKTHDR {
	struct BKT	*hnext;		/* next hash bucket */
	struct BKT	*hprev;		/* previous hash bucket */
	struct BKT	*cnext;		/* next free/lru bucket */
	struct BKT	*cprev;		/* previous free/lru bucket */
} BKTHDR;

d63 9
a71 9
	BKTHDR	free;			/* The free list. */
	BKTHDR	lru;			/* The LRU list. */
	BKTHDR	hashtable[HASHSIZE];	/* Hashed list by page number. */
	pgno_t	curcache;		/* Current number of cached pages. */
	pgno_t	maxcache;		/* Max number of cached pages. */
	pgno_t	npages;			/* Number of pages in the file. */
	u_long	pagesize;		/* File page size. */
	int	fd;			/* File descriptor. */
					/* Page in conversion routine. */
d73 1
a73 1
					/* Page out conversion routine. */
d75 1
a75 1
	void	*pgcookie;		/* Cookie for page in/out routines. */
d77 9
a85 9
	unsigned long	cachehit;
	unsigned long	cachemiss;
	unsigned long	pagealloc;
	unsigned long	pageflush;
	unsigned long	pageget;
	unsigned long	pagenew;
	unsigned long	pageput;
	unsigned long	pageread;
	unsigned long	pagewrite;
a88 27
#ifdef __MPOOLINTERFACE_PRIVATE
/* Macros to insert/delete into/from hash chain. */
#define rmhash(bp) { \
        (bp)->hprev->hnext = (bp)->hnext; \
        (bp)->hnext->hprev = (bp)->hprev; \
}
#define inshash(bp, pg) { \
	hp = &mp->hashtable[HASHKEY(pg)]; \
        (bp)->hnext = hp->hnext; \
        (bp)->hprev = (struct BKT *)hp; \
        hp->hnext->hprev = (bp); \
        hp->hnext = (bp); \
}

/* Macros to insert/delete into/from lru and free chains. */
#define	rmchain(bp) { \
        (bp)->cprev->cnext = (bp)->cnext; \
        (bp)->cnext->cprev = (bp)->cprev; \
}
#define inschain(bp, dp) { \
        (bp)->cnext = (dp)->cnext; \
        (bp)->cprev = (struct BKT *)(dp); \
        (dp)->cnext->cprev = (bp); \
        (dp)->cnext = (bp); \
}
#endif

d90 1
a90 1
MPOOL	*mpool_open __P((DBT *, int, pgno_t, pgno_t));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
