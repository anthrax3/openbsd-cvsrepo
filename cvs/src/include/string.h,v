head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.4
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.31.0.4
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.30.0.4
	OPENBSD_6_0_BASE:1.30
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.29.0.6
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.28.0.4
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.27.0.4
	OPENBSD_5_5_BASE:1.27
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.24.0.4
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.2
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.8
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.8
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.6
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.4
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.2
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.10
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.31;
commitid	ngpX0SPDX30tzjDf;

1.31
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.30;
commitid	mBDdb9HYWgUfDo7E;

1.30
date	2015.11.20.23.40.32;	author millert;	state Exp;
branches;
next	1.29;
commitid	990uzHDPKkYeVU6d;

1.29
date	2014.08.10.02.49.24;	author guenther;	state Exp;
branches;
next	1.28;
commitid	TtFItFe7rCxYkzMM;

1.28
date	2014.06.13.02.12.17;	author matthew;	state Exp;
branches;
next	1.27;
commitid	vlLoJ3raVIYl3l4x;

1.27
date	2014.01.22.21.06.45;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2013.05.13.10.37.02;	author ajacoutot;	state Exp;
branches;
next	1.25;

1.25
date	2013.04.11.03.08.47;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2012.03.25.20.04.18;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2012.01.17.02.48.01;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.24.13.33.00;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.18.22.24.55;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.03.14.36.40;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.06.18.53.04;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.30.03.04.16;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.06.20.17.47.07;	author avsm;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.11.21.20.42.39;	author marc;	state Exp;
branches;
next	1.8;

1.8
date	2002.10.25.21.55.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.09.17.13.13.46;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.11.20.11.18.26;	author d;	state Exp;
branches;
next	1.4;

1.4
date	98.11.04.19.35.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.02.10.02.19.46;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.32
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: string.h,v 1.31 2016/09/09 18:12:37 millert Exp $	*/
/*	$NetBSD: string.h,v 1.6 1994/10/26 00:56:30 cgd Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)string.h	5.10 (Berkeley) 3/9/91
 */

#ifndef _STRING_H_
#define	_STRING_H_

#include <sys/cdefs.h>
#include <sys/_null.h>
#include <machine/_types.h>

/*
 * POSIX mandates that certain string functions not present in ISO C
 * be prototyped in strings.h.  Historically, we've included them here.
 */
#if __BSD_VISIBLE
#include <strings.h>
#endif

#ifndef	_SIZE_T_DEFINED_
#define	_SIZE_T_DEFINED_
typedef	__size_t	size_t;
#endif

#if __POSIX_VISIBLE >= 200809
#ifndef _LOCALE_T_DEFINED_
#define _LOCALE_T_DEFINED_
typedef void	*locale_t;
#endif
#endif

__BEGIN_DECLS
void	*memchr(const void *, int, size_t);
int	 memcmp(const void *, const void *, size_t);
void	*memcpy(void *__restrict, const void *__restrict, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)))
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	*memmove(void *, const void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)))
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	*memset(void *, int, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)));
char	*strcat(char *__restrict, const char *__restrict);
char	*strchr(const char *, int);
int	 strcmp(const char *, const char *);
int	 strcoll(const char *, const char *);
char	*strcpy(char *__restrict, const char *__restrict);
size_t	 strcspn(const char *, const char *);
char	*strerror(int);
size_t	 strlen(const char *);
char	*strncat(char *__restrict, const char *__restrict, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
int	 strncmp(const char *, const char *, size_t);
char	*strncpy(char *__restrict, const char *__restrict, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
char	*strpbrk(const char *, const char *);
char	*strrchr(const char *, int);
size_t	 strspn(const char *, const char *);
char	*strstr(const char *, const char *);
char	*strtok(char *__restrict, const char *__restrict);
char	*strtok_r(char *__restrict, const char *__restrict, char **__restrict);
size_t	 strxfrm(char *__restrict, const char *__restrict, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));

#if __XPG_VISIBLE
void	*memccpy(void *__restrict, const void *__restrict, int, size_t)
		__attribute__ ((__bounded__(__buffer__,1,4)));
#endif

#if __POSIX_VISIBLE >= 200112
int	 strerror_r(int, char *, size_t)
	    __attribute__ ((__bounded__(__string__,2,3)));
#endif

#if __XPG_VISIBLE >= 420 || __POSIX_VISIBLE >= 200809
char	*strdup(const char *);
#endif

#if __POSIX_VISIBLE >= 200809
char	*stpcpy(char *__restrict, const char *__restrict);
char	*stpncpy(char *__restrict, const char *__restrict, size_t);
int	 strcoll_l(const char *, const char *, locale_t);
char	*strerror_l(int, locale_t);
char	*strndup(const char *, size_t);
size_t	 strnlen(const char *, size_t);
char	*strsignal(int);
size_t	 strxfrm_l(char *__restrict, const char *__restrict, size_t, locale_t)
		__attribute__ ((__bounded__(__string__,1,3)));
#endif

#if __BSD_VISIBLE
void	 explicit_bzero(void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,2)));
void	*memmem(const void *, size_t, const void *, size_t);
void	*memrchr(const void *, int, size_t);
char	*strcasestr(const char *, const char *);
size_t	 strlcat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
void	 strmode(int, char *);
char	*strsep(char **, const char *);
int	 timingsafe_bcmp(const void *, const void *, size_t);
int	 timingsafe_memcmp(const void *, const void *, size_t);
#endif 
__END_DECLS

#endif /* _STRING_H_ */
@


1.31
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.30 2015/11/20 23:40:32 millert Exp $	*/
d55 7
d112 2
d117 2
@


1.30
log
@POSIX says that ffs(), strcasecmp(), strncasecmp(), r?index() and
the b* byte functions belong in strings.h, not string.h so break
them out of string.h into a new strings.h.  As long as there is no
POSIX or X/OPEN define in use string.h will pull in strings.h.
OK naddy@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.29 2014/08/10 02:49:24 guenther Exp $	*/
d39 1
a52 10
#endif

#ifndef	NULL
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif
@


1.29
log
@Delete duplicate conditional

diff from frantisek holop (minusf (at) obiit.org)
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.28 2014/06/13 02:12:17 matthew Exp $	*/
d41 8
a99 14
#endif

#if __XPG_VISIBLE >= 420
int	 bcmp(const void *, const void *, size_t);
void	 bcopy(const void *, void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)))
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	 bzero(void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,2)));
int	 ffs(int);
char	*index(const char *, int);
char	*rindex(const char *, int);
int	 strcasecmp(const char *, const char *);
int	 strncasecmp(const char *, const char *, size_t);
@


1.28
log
@Add timingsafe_memcmp().

ok deraadt, jmc, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.27 2014/01/22 21:06:45 tedu Exp $	*/
a121 3
#endif

#if __POSIX_VISIBLE >= 200809
@


1.27
log
@add explicit_bzero to libc. implementation subject to change, but start
the ball rolling. ok deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.26 2013/05/13 10:37:02 ajacoutot Exp $	*/
d141 1
@


1.26
log
@Add an implementation of memmem() -- from FreeBSD with some tweaks.
Requires a libc minor bump, committing now so that we have up-to-date
snapshots for the upcoming hackathon.

joint work with millert@@
man page bits ok jmc@@
input and ok millert@@, guenther@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.25 2013/04/11 03:08:47 guenther Exp $	*/
d129 2
@


1.25
log
@Add 'restrict' per POSIX, per prodding by tedu@@.  (Might permit more warnings?)
Tweak standards exposure of memchr (never) and strdup (POSIX-2008)
Remove unnecessary tests of __BSD_VISIBLE

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.24 2012/03/25 20:04:18 guenther Exp $	*/
d129 1
@


1.24
log
@strsignal() was added to POSIX-2008; strerror_r() was in the base
of POSIX-2001, without the XSI qualifier.  Adjust conditionals to match.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.23 2012/01/17 02:48:01 guenther Exp $	*/
a57 1
void	*memrchr(const void *, int, size_t);
d59 1
a59 1
void	*memcpy(void *, const void *, size_t)
d67 1
a67 1
char	*strcat(char *, const char *);
d71 1
a71 1
char	*strcpy(char *, const char *);
d75 1
a75 1
char	*strncat(char *, const char *, size_t)
d78 1
a78 1
char	*strncpy(char *, const char *, size_t)
d84 3
a86 3
char	*strtok(char *, const char *);
char	*strtok_r(char *, const char *, char **);
size_t	 strxfrm(char *, const char *, size_t)
d89 2
a90 2
#if __BSD_VISIBLE || __XPG_VISIBLE
void	*memccpy(void *, const void *, int, size_t)
d94 1
a94 1
#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
a105 1
char	*strdup(const char *);
d108 1
a108 1
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200112
d113 4
d118 2
a119 2
char	*stpcpy(char *, const char *);
char	*stpncpy(char *, const char *, size_t);
d124 1
a124 1
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200809
d129 1
@


1.23
log
@Add stpcpy() and stpncpy(), pointless crap that made it into POSIX.
Includes friendly linker warning to wake up those dumb enough to use it.

Committing for kettenis@@, who ran away to the hills after writing it
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.22 2011/07/03 18:51:01 jsg Exp $	*/
d110 1
a110 1
#if __BSD_VISIBLE || __XPG_VISIBLE >= 600
d122 4
a133 1
char	*strsignal(int);
@


1.22
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.21 2011/04/06 11:39:42 miod Exp $	*/
d116 2
@


1.21
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.20 2010/09/24 13:33:00 matthew Exp $	*/
d49 2
@


1.20
log
@Add timingsafe_bcmp(3) to libc, mention that it's already in the
kernel in kern(9), and remove it from OpenSSH.

ok deraadt@@, djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.19 2010/05/18 22:24:55 tedu Exp $	*/
d50 1
a50 1
#define	NULL	0L
@


1.19
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.18 2007/09/03 14:36:40 millert Exp $	*/
d127 1
@


1.18
log
@add memrchr(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.17 2006/01/06 18:53:04 millert Exp $	*/
d111 5
@


1.17
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.16 2005/12/13 00:35:22 millert Exp $	*/
d56 1
@


1.16
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.15 2005/03/30 03:04:16 deraadt Exp $	*/
d39 1
a39 1
#include <machine/ansi.h>
d41 3
a43 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
@


1.15
log
@strcasestr(3), a case-insensitive version of strstr(3).  already in netbsd
and freebsd, apparently written by torek, the man we never see anymore;
submitted by jcs, but he is not around right now for the libc major crank
so i sneak it in for him
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.14 2004/06/20 17:47:07 avsm Exp $	*/
d37 2
a53 2
#include <sys/cdefs.h>

a71 2
int	 strerror_r(int, char *, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
d87 6
a92 2
/* Nonstandard routines */
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
a100 2
void	*memccpy(void *, const void *, int, size_t)
		__attribute__ ((__bounded__(__buffer__,1,4)));
d103 1
d105 8
a118 1
int	 strncasecmp(const char *, const char *, size_t);
@


1.14
log
@add bounds check for src pointer in bcopy(3) as well as dest pointer,
noticed by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.13 2003/08/01 17:38:33 avsm Exp $	*/
d104 1
@


1.13
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.12 2003/06/26 19:34:17 avsm Exp $	*/
d93 1
@


1.12
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.10 2003/06/02 19:34:12 millert Exp $	*/
d57 8
a64 3
void	*memcpy(void *, const void *, size_t);
void	*memmove(void *, const void *, size_t);
void	*memset(void *, int, size_t);
d72 2
a73 1
int	 strerror_r(int, char *, size_t);
d75 2
a76 1
char	*strncat(char *, const char *, size_t);
d78 2
a79 1
char	*strncpy(char *, const char *, size_t);
d86 2
a87 1
size_t	 strxfrm(char *, const char *, size_t);
d92 4
a95 2
void	 bcopy(const void *, void *, size_t);
void	 bzero(void *, size_t);
d98 2
a99 1
void	*memccpy(void *, const void *, int, size_t);
d103 4
a106 2
size_t	 strlcat(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
@


1.11
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d57 3
a59 8
void	*memcpy(void *, const void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)))
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	*memmove(void *, const void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)))
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	*memset(void *, int, size_t)
		__attribute__ ((__bounded__(__buffer__,1,3)));
d67 1
a67 2
int	 strerror_r(int, char *, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
d69 1
a69 2
char	*strncat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
d71 1
a71 2
char	*strncpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
d78 1
a78 2
size_t	 strxfrm(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
d83 2
a84 4
void	 bcopy(const void *, void *, size_t)
		__attribute__ ((__bounded__(__buffer__,2,3)));
void	 bzero(void *, size_t)
		__attribute__ ((__bounded__(__buffer__,1,2)));
d87 1
a87 2
void	*memccpy(void *, const void *, int, size_t)
		__attribute__ ((__bounded__(__buffer__,1,4)));
d91 2
a92 4
size_t	 strlcat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.9 2002/11/21 20:42:39 marc Exp $	*/
d57 8
a64 3
void	*memcpy(void *, const void *, size_t);
void	*memmove(void *, const void *, size_t);
void	*memset(void *, int, size_t);
d72 2
a73 1
int	 strerror_r(int, char *, size_t);
d75 2
a76 1
char	*strncat(char *, const char *, size_t);
d78 2
a79 1
char	*strncpy(char *, const char *, size_t);
d86 2
a87 1
size_t	 strxfrm(char *, const char *, size_t);
d92 4
a95 2
void	 bcopy(const void *, void *, size_t);
void	 bzero(void *, size_t);
d98 2
a99 1
void	*memccpy(void *, const void *, int, size_t);
d103 4
a106 2
size_t	 strlcat(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
@


1.9
log
@add prototype for strerror_r
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.8 2002/10/25 21:55:28 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@NULL is now 0L so it is the same size as a pointer.
OK mickey@@ and discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.7 2002/02/16 21:27:17 millert Exp $	*/
d71 1
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.6 1999/09/17 13:13:46 espie Exp $	*/
d52 1
a52 1
#define	NULL	0
@


1.6
log
@Be thorough about NULL as __null for C++.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.5 1998/11/20 11:18:26 d Exp $	*/
d59 23
a81 23
void	*memchr __P((const void *, int, size_t));
int	 memcmp __P((const void *, const void *, size_t));
void	*memcpy __P((void *, const void *, size_t));
void	*memmove __P((void *, const void *, size_t));
void	*memset __P((void *, int, size_t));
char	*strcat __P((char *, const char *));
char	*strchr __P((const char *, int));
int	 strcmp __P((const char *, const char *));
int	 strcoll __P((const char *, const char *));
char	*strcpy __P((char *, const char *));
size_t	 strcspn __P((const char *, const char *));
char	*strerror __P((int));
size_t	 strlen __P((const char *));
char	*strncat __P((char *, const char *, size_t));
int	 strncmp __P((const char *, const char *, size_t));
char	*strncpy __P((char *, const char *, size_t));
char	*strpbrk __P((const char *, const char *));
char	*strrchr __P((const char *, int));
size_t	 strspn __P((const char *, const char *));
char	*strstr __P((const char *, const char *));
char	*strtok __P((char *, const char *));
char	*strtok_r __P((char *, const char *, char **));
size_t	 strxfrm __P((char *, const char *, size_t));
d85 15
a99 15
int	 bcmp __P((const void *, const void *, size_t));
void	 bcopy __P((const void *, void *, size_t));
void	 bzero __P((void *, size_t));
int	 ffs __P((int));
char	*index __P((const char *, int));
void	*memccpy __P((void *, const void *, int, size_t));
char	*rindex __P((const char *, int));
int	 strcasecmp __P((const char *, const char *));
char	*strdup __P((const char *));
size_t	 strlcat __P((char *, const char *, size_t));
size_t	 strlcpy __P((char *, const char *, size_t));
void	 strmode __P((int, char *));
int	 strncasecmp __P((const char *, const char *, size_t));
char	*strsep __P((char **, const char *));
char	*strsignal __P((int));
@


1.5
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.4 1998/11/04 19:35:48 millert Exp $	*/
d49 3
d53 1
@


1.4
log
@protos for strlcat, strlcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.3 1998/02/10 02:19:46 deraadt Exp $	*/
d76 1
@


1.3
log
@move proto to unistd.h
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.2 1997/09/21 10:45:54 niklas Exp $	*/
d89 2
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: string.h,v 1.6 1994/10/26 00:56:30 cgd Exp $	*/
a92 1
void	 swab __P((const void *, void *, size_t));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
