head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.44
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.40
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.42
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.34
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.38
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.36
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.32
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.30
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.28
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.26
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2016.09.20.18.24.55;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	mbRsoz8cI0NxxwXa;

1.6
date	2006.02.06.16.51.50;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.14.10.02.28;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.08.17.55.37;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.08.01.28.58;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.06.07.40.31;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.07.03.00.01;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Add dl_unwind_find_exidx prototype.

ok guenther@@
@
text
@/*	$OpenBSD: link_elf.h,v 1.6 2006/02/06 16:51:50 jmc Exp $	*/

/*
 * Public domain.
 */

#ifndef _LINK_ELF_H
#define _LINK_ELF_H

#include <elf_abi.h>

#ifndef DT_PROCNUM
#define DT_PROCNUM 0
#endif

/*
 * struct link_map is a part of the protocol between the debugger and
 * ld.so. ld.so may have additional fields in it's version of this
 * structure but those are ld.so private fields.
 */
struct link_map {
	caddr_t		l_addr;		/* Base address of library */
	const char	*l_name;	/* Absolute path to library */
	void		*l_ld;		/* pointer to _DYNAMIC */
	struct link_map	*l_next;
	struct link_map	*l_prev;
};

struct dl_phdr_info {
	Elf_Addr	dlpi_addr;
	const char	*dlpi_name;
	const Elf_Phdr	*dlpi_phdr;
	Elf_Half	dlpi_phnum;
};

__BEGIN_DECLS
int	dl_iterate_phdr (int (*)(struct dl_phdr_info *, size_t, void *),
	   void *);
void	*dl_unwind_find_exidx(const void *, int *);
__END_DECLS

#endif /* !_LINK_ELF_H */
@


1.6
log
@typos from alexey dobriyan;
@
text
@d1 1
a1 1
/*	$OpenBSD: link_elf.h,v 1.5 2004/10/14 10:02:28 kettenis Exp $	*/
d39 1
@


1.5
log
@Add dl_iterate_phdr() support.
ok drahn@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: link_elf.h,v 1.4 2002/09/08 17:55:37 drahn Exp $	*/
d19 1
a19 1
 * stucture but those are ld.so private fields.
@


1.4
log
@Revert this to art's orginal verstion, internal ld.so fields should not
be advertised in this header. Add a comment that this must be in sync
with ld.so. Fixes gdb shared library handing. ok pvalchev@@
@
text
@d1 1
a1 1
/*	$OpenBSD: link_elf.h,v 1.3 2002/09/08 01:28:58 deraadt Exp $	*/
d28 13
@


1.3
log
@no , at end of enum
@
text
@d1 1
a1 1
/*	$OpenBSD: link_elf.h,v 1.2 2002/08/06 07:40:31 pvalchev Exp $	*/
d4 1
a4 29
 * Copyright (c) 1996 Per Fogelstrom
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed under OpenBSD by
 *	Per Fogelstrom.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
d8 1
d16 12
a27 47
/* Structure describing a loaded shared object.  The `l_next' and `l_prev'
   members form a chain of all the shared objects loaded at startup.

   These data structures exist in space used by the run-time dynamic linker;
   modifying them may have disastrous results.  */

struct link_map
  {
    /* These first few members are part of the protocol with the debugger.
       This is the same format used in SVR4.  */

    Elf_Addr l_addr;		/* Base address shared object is loaded at.  */
    Elf_Addr l_offs;		/* Offset */
    char *l_name;		/* Absolute file name object was found in.  */
    Elf_Dyn *l_ld;		/* Dynamic section of the shared object.  */
    struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */

    /* All following members are internal to the dynamic linker.
       They may change without notice.  */

    const char *l_libname;	/* Name requested (before search).  */

    /* Indexed pointers to dynamic section.  */
    Elf_Dyn *l_info[DT_NUM + DT_PROCNUM];

    const Elf_Phdr *l_phdr;	/* Pointer to program header table in core.  */
    Elf_Word l_phnum;		/* Number of program header entries.  */
    Elf_Addr l_entry;		/* Entry point location.  */

    /* Symbol hash table.  */
    Elf_Word l_nbuckets;
    const Elf_Word *l_buckets, *l_chain;

    unsigned int l_opencount;	/* Reference count for dlopen/dlclose.  */
    enum			/* Where this object came from.  */
      {
	lt_executable,		/* The main executable program.  */
	lt_interpreter,		/* The interpreter: the dynamic linker.  */
	lt_library,		/* Library needed by main executable.  */
	lt_loaded		/* Extra run-time loaded shared object.  */
      } l_type:2;
    unsigned int l_deps_loaded:1; /* Nonzero if DT_NEEDED items loaded.  */
    unsigned int l_relocated:1;	/* Nonzero if object's relocations done.  */
    unsigned int l_init_called:1; /* Nonzero if DT_INIT function called.  */
    unsigned int l_init_running:1; /* Nonzero while DT_INIT function runs.  */
  };

@


1.2
log
@restore link_map ABI compatibility between gdb and ld.so.  this comes from
what powerpc and sparc64 had as machine/link.h in 3.1 used by gdb, and will
be needed by other ELF architectures to provide gdb solib support; ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: link_elf.h,v 1.1 2002/06/07 03:00:01 art Exp $	*/
d82 1
a82 1
	lt_loaded,		/* Extra run-time loaded shared object.  */
@


1.1
log
@split link.h into three parts. The MI parts are left in link.h
a.out stuff in link_aout.h and ELF stuff in link_elf.h.
Switch sparc64 back to MI link.h.
drahn@@ ok (powerpc will switch soon).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 29
a32 1
 * Public domain.
d35 2
d43 46
a88 11
/*
 * struct link_map is a part of the protocol between the debugger and
 * ld.so.
 */
struct link_map {
	caddr_t		l_addr;		/* Base address of library */
	const char	*l_name;	/* Absolute path to library */
	void		*l_ld;		/* pointer to _DYNAMIC */
	struct link_map	*l_next;
	struct link_map	*l_prev;
};
d90 1
@

