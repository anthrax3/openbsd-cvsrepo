head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.2
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.24.0.14
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.10
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.6
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.8
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.22.0.16
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.12
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.10
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.8
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.6
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.20.0.10
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.12
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.8
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.6
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.24;
commitid	ngpX0SPDX30tzjDf;

1.24
date	2014.05.26.01.49.36;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2010.10.01.20.10.24;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.25.15.35.29;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2007.03.17.21.38.14;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.08.05.53.00;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.02.22.37.12;	author avsm;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.15.20.01.27;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.13.15.47.24;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.10.22.00.31;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.30.21.36.05;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.29.03.02.35;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.12.15.13.53.39;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.12.14.14.26.19;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.14.02.34.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.13.23.16.38;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.13.22.39.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.11.23.01.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.04.30.05.49.21;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.28;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: ctype.h,v 1.24 2014/05/26 01:49:36 guenther Exp $	*/
/*	$NetBSD: ctype.h,v 1.14 1994/10/26 00:55:47 cgd Exp $	*/

/*
 * Copyright (c) 1989 The Regents of the University of California.
 * All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ctype.h	5.3 (Berkeley) 4/3/91
 */

#ifndef _CTYPE_H_
#define _CTYPE_H_

#include <sys/cdefs.h>

#define	_U	0x01
#define	_L	0x02
#define	_N	0x04
#define	_S	0x08
#define	_P	0x10
#define	_C	0x20
#define	_X	0x40
#define	_B	0x80

#if __POSIX_VISIBLE >= 200809
#ifndef	_LOCALE_T_DEFINED_
#define	_LOCALE_T_DEFINED_
typedef void	*locale_t;
#endif
#endif

__BEGIN_DECLS

extern const char	*_ctype_;
extern const short	*_tolower_tab_;
extern const short	*_toupper_tab_;

#if defined(__GNUC__) || defined(_ANSI_LIBRARY)
int	isalnum(int);
int	isalpha(int);
int	iscntrl(int);
int	isdigit(int);
int	isgraph(int);
int	islower(int);
int	isprint(int);
int	ispunct(int);
int	isspace(int);
int	isupper(int);
int	isxdigit(int);
int	tolower(int);
int	toupper(int);

#if __BSD_VISIBLE || __ISO_C_VISIBLE >= 1999 || __POSIX_VISIBLE > 200112 \
    || __XPG_VISIBLE > 600
int	isblank(int);
#endif

#if __BSD_VISIBLE || __XPG_VISIBLE
int	isascii(int);
int	toascii(int);
int	_tolower(int);
int	_toupper(int);
#endif /* __BSD_VISIBLE || __XPG_VISIBLE */

#if __POSIX_VISIBLE >= 200809
int	isalnum_l(int, locale_t);
int	isalpha_l(int, locale_t);
int	isblank_l(int, locale_t);
int	iscntrl_l(int, locale_t);
int	isdigit_l(int, locale_t);
int	isgraph_l(int, locale_t);
int	islower_l(int, locale_t);
int	isprint_l(int, locale_t);
int	ispunct_l(int, locale_t);
int	isspace_l(int, locale_t);
int	isupper_l(int, locale_t);
int	isxdigit_l(int, locale_t);
int	tolower_l(int, locale_t);
int	toupper_l(int, locale_t);
#endif

#endif /* __GNUC__ || _ANSI_LIBRARY */

#if !defined(_ANSI_LIBRARY) && !defined(__cplusplus)

__only_inline int isalnum(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & (_U|_L|_N)));
}

__only_inline int isalpha(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & (_U|_L)));
}

__only_inline int iscntrl(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _C));
}

__only_inline int isdigit(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _N));
}

__only_inline int isgraph(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & (_P|_U|_L|_N)));
}

__only_inline int islower(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _L));
}

__only_inline int isprint(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & (_P|_U|_L|_N|_B)));
}

__only_inline int ispunct(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _P));
}

__only_inline int isspace(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _S));
}

__only_inline int isupper(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & _U));
}

__only_inline int isxdigit(int _c)
{
	return (_c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)_c] & (_N|_X)));
}

__only_inline int tolower(int _c)
{
	if ((unsigned int)_c > 255)
		return (_c);
	return ((_tolower_tab_ + 1)[_c]);
}

__only_inline int toupper(int _c)
{
	if ((unsigned int)_c > 255)
		return (_c);
	return ((_toupper_tab_ + 1)[_c]);
}

#if __BSD_VISIBLE || __ISO_C_VISIBLE >= 1999 || __POSIX_VISIBLE > 200112 \
    || __XPG_VISIBLE > 600
__only_inline int isblank(int _c)
{
	return (_c == ' ' || _c == '\t');
}
#endif

#if __BSD_VISIBLE || __XPG_VISIBLE
__only_inline int isascii(int _c)
{
	return ((unsigned int)_c <= 0177);
}

__only_inline int toascii(int _c)
{
	return (_c & 0177);
}

__only_inline int _tolower(int _c)
{
	return (_c - 'A' + 'a');
}

__only_inline int _toupper(int _c)
{
	return (_c - 'a' + 'A');
}
#endif /* __BSD_VISIBLE || __XPG_VISIBLE */

#if __POSIX_VISIBLE >= 200809
__only_inline int
isalnum_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isalnum(_c);
}

__only_inline int
isalpha_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isalpha(_c);
}

__only_inline int
isblank_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isblank(_c);
}

__only_inline int
iscntrl_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return iscntrl(_c);
}

__only_inline int
isdigit_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isdigit(_c);
}

__only_inline int
isgraph_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isgraph(_c);
}

__only_inline int
islower_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return islower(_c);
}

__only_inline int
isprint_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isprint(_c);
}

__only_inline int
ispunct_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return ispunct(_c);
}

__only_inline int
isspace_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isspace(_c);
}

__only_inline int
isupper_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isupper(_c);
}

__only_inline int
isxdigit_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return isxdigit(_c);
}

__only_inline int
tolower_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return tolower(_c);
}

__only_inline int
toupper_l(int _c, locale_t _l __attribute__((__unused__)))
{
	return toupper(_c);
}
#endif /* __POSIX_VISIBLE >= 200809 */

#endif /* !_ANSI_LIBRARY */

__END_DECLS

#endif /* !_CTYPE_H_ */
@


1.24
log
@Can't use a variable 'c' in a standard include; rename it to '_c'

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.23 2014/03/16 18:38:30 guenther Exp $	*/
d54 7
d94 17
d113 1
a113 1
#if !defined(_ANSI_LIBRARY)
d213 86
@


1.23
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.22 2010/10/01 20:10:24 guenther Exp $	*/
d91 1
a91 1
__only_inline int isalnum(int c)
d93 1
a93 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_U|_L|_N)));
d96 1
a96 1
__only_inline int isalpha(int c)
d98 1
a98 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_U|_L)));
d101 1
a101 1
__only_inline int iscntrl(int c)
d103 1
a103 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _C));
d106 1
a106 1
__only_inline int isdigit(int c)
d108 1
a108 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _N));
d111 1
a111 1
__only_inline int isgraph(int c)
d113 1
a113 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N)));
d116 1
a116 1
__only_inline int islower(int c)
d118 1
a118 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _L));
d121 1
a121 1
__only_inline int isprint(int c)
d123 1
a123 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N|_B)));
d126 1
a126 1
__only_inline int ispunct(int c)
d128 1
a128 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _P));
d131 1
a131 1
__only_inline int isspace(int c)
d133 1
a133 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _S));
d136 1
a136 1
__only_inline int isupper(int c)
d138 1
a138 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & _U));
d141 1
a141 1
__only_inline int isxdigit(int c)
d143 1
a143 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (_N|_X)));
d146 1
a146 1
__only_inline int tolower(int c)
d148 3
a150 3
	if ((unsigned int)c > 255)
		return (c);
	return ((_tolower_tab_ + 1)[c]);
d153 1
a153 1
__only_inline int toupper(int c)
d155 3
a157 3
	if ((unsigned int)c > 255)
		return (c);
	return ((_toupper_tab_ + 1)[c]);
d162 1
a162 1
__only_inline int isblank(int c)
d164 1
a164 1
	return (c == ' ' || c == '\t');
d169 1
a169 1
__only_inline int isascii(int c)
d171 1
a171 1
	return ((unsigned int)c <= 0177);
d174 1
a174 1
__only_inline int toascii(int c)
d176 1
a176 1
	return (c & 0177);
d179 1
a179 1
__only_inline int _tolower(int c)
d181 1
a181 1
	return (c - 'A' + 'a');
d184 1
a184 1
__only_inline int _toupper(int c)
d186 1
a186 1
	return (c - 'a' + 'A');
@


1.22
log
@Now that __only_inline is in <sys/cdefs.h>, replace the local versions in
<ctype.h> and <signal.h>

ok kettenis@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.21 2010/07/25 15:35:29 kettenis Exp $	*/
d60 1
a60 1
#if defined(__GNUC__) || defined(_ANSI_LIBRARY) || defined(lint)
d87 1
a87 1
#endif /* __GNUC__ || _ANSI_LIBRARY || lint */
d89 1
a89 1
#if !defined(_ANSI_LIBRARY) && !defined(lint)
d190 1
a190 1
#endif /* !_ANSI_LIBRARY && !lint */
@


1.21
log
@When using GCC, we always want GNU inline semantics.  Fixes issues with
-Wsystem-headers and -std=c99, where GCC 4.2 would warn that it couldn't
give us C99 inline semantics.

ok guenther@@, dcoppa@@, millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.20 2007/03/17 21:38:14 espie Exp $	*/
a59 11
/* extern __inline is a GNU C extension */
#ifdef __GNUC__
#  if __GNUC_PREREQ__(4, 2)
#define	__CTYPE_INLINE	extern __inline __attribute__((__gnu_inline__))
#  else
#define	__CTYPE_INLINE	extern __inline
#  endif
#else
#define	__CTYPE_INLINE	static __inline
#endif

d91 1
a91 1
__CTYPE_INLINE int isalnum(int c)
d96 1
a96 1
__CTYPE_INLINE int isalpha(int c)
d101 1
a101 1
__CTYPE_INLINE int iscntrl(int c)
d106 1
a106 1
__CTYPE_INLINE int isdigit(int c)
d111 1
a111 1
__CTYPE_INLINE int isgraph(int c)
d116 1
a116 1
__CTYPE_INLINE int islower(int c)
d121 1
a121 1
__CTYPE_INLINE int isprint(int c)
d126 1
a126 1
__CTYPE_INLINE int ispunct(int c)
d131 1
a131 1
__CTYPE_INLINE int isspace(int c)
d136 1
a136 1
__CTYPE_INLINE int isupper(int c)
d141 1
a141 1
__CTYPE_INLINE int isxdigit(int c)
d146 1
a146 1
__CTYPE_INLINE int tolower(int c)
d153 1
a153 1
__CTYPE_INLINE int toupper(int c)
d162 1
a162 1
__CTYPE_INLINE int isblank(int c)
d169 1
a169 1
__CTYPE_INLINE int isascii(int c)
d174 1
a174 1
__CTYPE_INLINE int toascii(int c)
d179 1
a179 1
__CTYPE_INLINE int _tolower(int c)
d184 1
a184 1
__CTYPE_INLINE int _toupper(int c)
a192 2

#undef __CTYPE_INLINE
@


1.20
log
@allow extern inline stuff to proceed unchanged thru the mess that the
combined GCC and ISO committees managed to make out of it.

With this, gcc >= 4.3 can grok its way through it correctly.

okay kettenis@@, with some help figuring stuff out.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.19 2005/12/13 00:35:22 millert Exp $	*/
d62 1
a62 1
#  if defined(__GNUC_STDC_INLINE__)
@


1.19
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.18 2005/08/08 05:53:00 espie Exp $	*/
d62 3
d66 1
@


1.18
log
@activate LC_CTYPE for 8 bits locale.
Make sure tolower/toupper use the whole 8 bits.

okay deraadt@@
thanks to everyone who tested
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.17 2004/04/02 22:37:12 avsm Exp $	*/
d42 1
d82 2
a83 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
d85 3
d92 1
a92 1
#endif /* !_ANSI_SOURCE && !_POSIX_SOURCE */
d167 2
a168 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
d173 1
d175 1
d195 1
a195 1
#endif /* !_ANSI_SOURCE && !_POSIX_SOURCE */
@


1.17
log
@fix non-gnu ansi compilers by not using 'inline' but '__inline' instead.
lets tendra build again.
ok deraadt@@, pvalchev@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.16 2004/01/15 20:01:27 millert Exp $	*/
d150 1
a150 1
	if ((unsigned int)c > 0177)
d157 1
a157 1
	if ((unsigned int)c > 0177)
@


1.16
log
@If lint is defined, act like _ANSI_LIBRARY was defined.  That way
lint gets the prototypes it expects and doesn't get confused by the
inline functions.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.15 2004/01/13 15:47:24 millert Exp $	*/
d63 1
a63 1
#define	__CTYPE_INLINE	static inline
@


1.15
log
@Allow this to compile on non-gcc.  OK deraadt@@ art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.14 2003/06/10 22:00:31 millert Exp $	*/
d66 1
a66 1
#if defined(__GNUC__) || defined(_ANSI_LIBRARY)
d89 1
a89 1
#endif /* __GNUC__ || _ANSI_LIBRARY */
d91 1
a91 1
#ifndef _ANSI_LIBRARY
d189 1
a189 1
#endif /* !_ANSI_LIBRARY */
@


1.14
log
@Remove an extraneous "& 0xff" (the cast to unsigned char is sufficient).

Use "extern __inline" instead of "static __inline" since the extern
flavor behaves more like a macro (which is what we want).

OK deraadt@@ and tested on all platforms by various folks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.13 2003/06/02 19:34:12 millert Exp $	*/
d59 8
d89 2
d93 1
a93 1
extern __inline int isalnum(int c)
d98 1
a98 1
extern __inline int isalpha(int c)
d103 1
a103 1
extern __inline int iscntrl(int c)
d108 1
a108 1
extern __inline int isdigit(int c)
d113 1
a113 1
extern __inline int isgraph(int c)
d118 1
a118 1
extern __inline int islower(int c)
d123 1
a123 1
extern __inline int isprint(int c)
d128 1
a128 1
extern __inline int ispunct(int c)
d133 1
a133 1
extern __inline int isspace(int c)
d138 1
a138 1
extern __inline int isupper(int c)
d143 1
a143 1
extern __inline int isxdigit(int c)
d148 1
a148 1
extern __inline int tolower(int c)
d155 1
a155 1
extern __inline int toupper(int c)
d163 1
a163 1
extern __inline int isblank(int c)
d168 1
a168 1
extern __inline int isascii(int c)
d173 1
a173 1
extern __inline int toascii(int c)
d178 1
a178 1
extern __inline int _tolower(int c)
d183 1
a183 1
extern __inline int _toupper(int c)
d192 2
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.12 2002/12/30 21:36:05 millert Exp $	*/
d53 2
a58 2
#ifdef _ANSI_LIBRARY
__BEGIN_DECLS
d79 1
a79 2
#endif
__END_DECLS
d81 1
a81 1
#else /* !_ANSI_LIBRARY */
d83 1
a83 1
static __inline int isalnum(int c)
d85 1
a85 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L|_N)));
d88 1
a88 1
static __inline int isalpha(int c)
d90 1
a90 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L)));
d93 1
a93 1
static __inline int iscntrl(int c)
d95 1
a95 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _C));
d98 1
a98 1
static __inline int isdigit(int c)
d100 1
a100 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _N));
d103 1
a103 1
static __inline int isgraph(int c)
d105 1
a105 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N)));
d108 1
a108 1
static __inline int islower(int c)
d110 1
a110 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _L));
d113 1
a113 1
static __inline int isprint(int c)
d115 1
a115 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N|_B)));
d118 1
a118 1
static __inline int ispunct(int c)
d120 1
a120 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _P));
d123 1
a123 1
static __inline int isspace(int c)
d125 1
a125 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _S));
d128 1
a128 1
static __inline int isupper(int c)
d130 1
a130 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _U));
d133 1
a133 1
static __inline int isxdigit(int c)
d135 1
a135 1
	return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_N|_X)));
d138 1
a138 1
static __inline int tolower(int c)
d145 1
a145 1
static __inline int toupper(int c)
d152 2
a153 2
#if !defined(_ANSI_SOURCE) && !defined (_POSIX_SOURCE)
static __inline int isblank(int c)
d158 1
a158 1
static __inline int isascii(int c)
d163 1
a163 1
static __inline int toascii(int c)
d168 1
a168 1
static __inline int _tolower(int c)
d173 1
a173 1
static __inline int _toupper(int c)
d177 1
a177 1
#endif
d180 2
@


1.12
log
@Back out __EOF stuff and just use -1 in ctype.h.  This is OK since
we don't want any user defines to change how the inlined ctype
functions behave.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.11 2002/12/29 03:02:35 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Don't define EOF In ctype.h, some 3rd party code checks whether or
not EOF is defined to determine if stdio.h has been included.
Instead, use __EOF which should be OK wrt namespace safety.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.10 2002/12/15 13:53:39 millert Exp $	*/
a56 4
#ifndef	__EOF
#define	__EOF	(-1)	/* must match stdio.h */
#endif

d90 1
a90 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L|_N)));
d95 1
a95 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L)));
d100 1
a100 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _C));
d105 1
a105 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _N));
d110 1
a110 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N)));
d115 1
a115 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _L));
d120 1
a120 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N|_B)));
d125 1
a125 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _P));
d130 1
a130 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _S));
d135 1
a135 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _U));
d140 1
a140 1
	return (c == __EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_N|_X)));
@


1.10
log
@Casting to unsigned int in isfoo() causes problems on alpha and
sparc64.  Change cast back to unsigned char but do a bitwise AND
with 0xff to avoid any sign extension weirdness and to make it
impossible for us to overflow _C_ctype_.  The bitwise AND is probably
not needed and may be removed later if this does not trigger compiler bugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.9 2002/12/14 14:26:19 millert Exp $	*/
d57 3
a59 1
#define	EOF	(-1)
d94 1
a94 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L|_N)));
d99 1
a99 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_U|_L)));
d104 1
a104 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _C));
d109 1
a109 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _N));
d114 1
a114 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N)));
d119 1
a119 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _L));
d124 1
a124 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_P|_U|_L|_N|_B)));
d129 1
a129 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _P));
d134 1
a134 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _S));
d139 1
a139 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & _U));
d144 1
a144 1
	return (c == EOF ? 0 : ((_ctype_ + 1)[(unsigned char)(c & 0xff)] & (_N|_X)));
@


1.9
log
@fix typo; noticed by David Krause
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.8 2002/12/14 02:34:38 millert Exp $	*/
d92 1
a92 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_U|_L|_N));
d97 1
a97 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_U|_L));
d102 1
a102 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _C);
d107 1
a107 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _N);
d112 1
a112 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N));
d117 1
a117 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _L);
d122 1
a122 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N|_B));
d127 1
a127 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _P);
d132 1
a132 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _S);
d137 1
a137 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & _U);
d142 1
a142 1
	return (c == EOF ? 0 : (_ctype_ + 1)[(unsigned int)c] & (_N|_X));
@


1.8
log
@Instead of doing "if (c == EOF) return 0;" use the hook ('?') operator
instead to make these one-liners.  Works around a compiler bug on vax
that affects both the libc and inline versions identically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.7 2002/12/13 23:16:38 millert Exp $	*/
d137 1
a137 1
	return (c == EOF ? : (_ctype_ + 1)[(unsigned int)c] & _U);
@


1.7
log
@Less stupid check for 7-bit ascii in toupper/tolower
Remove useless check for EOF in isascii
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.6 2002/12/13 22:39:27 millert Exp $	*/
d92 1
a92 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & (_U|_L|_N));
d97 1
a97 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & (_U|_L));
d102 1
a102 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _C);
d107 1
a107 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _N);
d112 1
a112 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N));
d117 1
a117 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _L);
d122 1
a122 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & (_P|_U|_L|_N|_B));
d127 1
a127 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _P);
d132 1
a132 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _S);
d137 1
a137 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & _U);
d142 1
a142 3
	if (c == EOF)
		return (0);
	return ((_ctype_ + 1)[(unsigned int)c] & (_N|_X));
@


1.6
log
@Cast to unsigned int, not unsigned char, since what is being cast is an
int, not a char.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.5 2002/12/11 23:01:40 millert Exp $	*/
d169 1
a169 1
	if (c != (c & 0177))
d176 1
a176 1
	if (c != (c & 0177))
d189 1
a189 3
	if (c == EOF)
		return (0);
	return ((unsigned int)(c) <= 0177);
@


1.5
log
@Convert ctype.h macros into inline functions.  This fixes the issues we
currently have with the macro versions and makes the ctype.h versions
100% identical to what is in libc.
Discussed with pjanzen@@ and OK'd by deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.4 2002/02/16 21:27:17 millert Exp $	*/
d94 1
a94 1
	return ((_ctype_ + 1)[(unsigned char)c] & (_U|_L|_N));
d101 1
a101 1
	return ((_ctype_ + 1)[(unsigned char)c] & (_U|_L));
d108 1
a108 1
	return ((_ctype_ + 1)[(unsigned char)c] & _C);
d115 1
a115 1
	return ((_ctype_ + 1)[(unsigned char)c] & _N);
d122 1
a122 1
	return ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N));
d129 1
a129 1
	return ((_ctype_ + 1)[(unsigned char)c] & _L);
d136 1
a136 1
	return ((_ctype_ + 1)[(unsigned char)c] & (_P|_U|_L|_N|_B));
d143 1
a143 1
	return ((_ctype_ + 1)[(unsigned char)c] & _P);
d150 1
a150 1
	return ((_ctype_ + 1)[(unsigned char)c] & _S);
d157 1
a157 1
	return ((_ctype_ + 1)[(unsigned char)c] & _U);
d164 1
a164 1
	return ((_ctype_ + 1)[(unsigned char)c] & (_N|_X));
d169 1
a169 1
	if (c != (unsigned char) c)
d176 1
a176 1
	if (c != (unsigned char) c)
d191 1
a191 1
	return ((unsigned)(c) <= 0177);
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.3 1998/04/30 05:49:21 deraadt Exp $	*/
d57 2
d63 1
d65 13
a77 13
extern int	isalnum(int);
extern int	isalpha(int);
extern int	iscntrl(int);
extern int	isdigit(int);
extern int	isgraph(int);
extern int	islower(int);
extern int	isprint(int);
extern int	ispunct(int);
extern int	isspace(int);
extern int	isupper(int);
extern int	isxdigit(int);
extern int	tolower(int);
extern int	toupper(int);
d80 5
a84 5
extern int	isblank(int);
extern int	isascii(int);
extern int	toascii(int);
extern int	_tolower(int);
extern int	_toupper(int);
d88 92
a179 13
#define	isdigit(c)	((_ctype_ + 1)[(unsigned char)(c)] & _N)
#define	islower(c)	((_ctype_ + 1)[(unsigned char)(c)] & _L)
#define	isspace(c)	((_ctype_ + 1)[(unsigned char)(c)] & _S)
#define	ispunct(c)	((_ctype_ + 1)[(unsigned char)(c)] & _P)
#define	isupper(c)	((_ctype_ + 1)[(unsigned char)(c)] & _U)
#define	isalpha(c)	((_ctype_ + 1)[(unsigned char)(c)] & (_U|_L))
#define	isxdigit(c)	((_ctype_ + 1)[(unsigned char)(c)] & (_N|_X))
#define	isalnum(c)	((_ctype_ + 1)[(unsigned char)(c)] & (_U|_L|_N))
#define	isprint(c)	((_ctype_ + 1)[(unsigned char)(c)] & (_P|_U|_L|_N|_B))
#define	isgraph(c)	((_ctype_ + 1)[(unsigned char)(c)] & (_P|_U|_L|_N))
#define	iscntrl(c)	((_ctype_ + 1)[(unsigned char)(c)] & _C)
#define tolower(c)	((_tolower_tab_ + 1)[(unsigned char)(c)])
#define toupper(c)	((_toupper_tab_ + 1)[(unsigned char)(c)])
d182 26
a207 7
#if notyet
#define isblank(c)	((_ctype_ + 1)[(unsigned char)(c)] & _B)
#endif
#define	isascii(c)	((unsigned char)(c) <= 0177)
#define	toascii(c)	((c) & 0177)
#define _tolower(c)	((c) - 'A' + 'a')
#define _toupper(c)	((c) - 'a' + 'A')
d209 2
@


1.3
log
@make ctype macros on char 0x82 and such work
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.2 1997/09/21 10:45:28 niklas Exp $	*/
d62 13
a74 13
extern int	isalnum __P ((int));
extern int	isalpha __P ((int));
extern int	iscntrl __P ((int));
extern int	isdigit __P ((int));
extern int	isgraph __P ((int));
extern int	islower __P ((int));
extern int	isprint __P ((int));
extern int	ispunct __P ((int));
extern int	isspace __P ((int));
extern int	isupper __P ((int));
extern int	isxdigit __P ((int));
extern int	tolower __P ((int));
extern int	toupper __P ((int));
d77 5
a81 5
extern int	isblank __P ((int));
extern int	isascii __P ((int));
extern int	toascii __P ((int));
extern int	_tolower __P ((int));
extern int	_toupper __P ((int));
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: ctype.h,v 1.14 1994/10/26 00:55:47 cgd Exp $	*/
d85 13
a97 13
#define	isdigit(c)	((_ctype_ + 1)[c] & _N)
#define	islower(c)	((_ctype_ + 1)[c] & _L)
#define	isspace(c)	((_ctype_ + 1)[c] & _S)
#define	ispunct(c)	((_ctype_ + 1)[c] & _P)
#define	isupper(c)	((_ctype_ + 1)[c] & _U)
#define	isalpha(c)	((_ctype_ + 1)[c] & (_U|_L))
#define	isxdigit(c)	((_ctype_ + 1)[c] & (_N|_X))
#define	isalnum(c)	((_ctype_ + 1)[c] & (_U|_L|_N))
#define	isprint(c)	((_ctype_ + 1)[c] & (_P|_U|_L|_N|_B))
#define	isgraph(c)	((_ctype_ + 1)[c] & (_P|_U|_L|_N))
#define	iscntrl(c)	((_ctype_ + 1)[c] & _C)
#define tolower(c)	((_tolower_tab_ + 1)[c])
#define toupper(c)	((_toupper_tab_ + 1)[c])
d101 1
a101 1
#define isblank(c)	((_ctype_ + 1)[c] & _B)
d103 1
a103 1
#define	isascii(c)	((unsigned)(c) <= 0177)
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
