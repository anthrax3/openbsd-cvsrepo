head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.6
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.4
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.24.0.6
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.23.0.4
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.19.0.2
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6;
locks; strict;
comment	@ * @;


1.31
date	2017.09.05.03.16.13;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	ngpX0SPDX30tzjDf;

1.30
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.29;
commitid	mBDdb9HYWgUfDo7E;

1.29
date	2015.04.04.18.05.05;	author guenther;	state Exp;
branches;
next	1.28;
commitid	JLMS0l1gREgLc0hW;

1.28
date	2015.02.09.23.02.25;	author millert;	state Exp;
branches;
next	1.27;
commitid	mDbos27obZ9mB7e5;

1.27
date	2015.01.12.20.58.07;	author millert;	state Exp;
branches;
next	1.26;
commitid	YbdQFuLQEhxYmaI2;

1.26
date	2014.07.12.02.48.33;	author guenther;	state Exp;
branches;
next	1.25;
commitid	imCwupYcQGzgh10H;

1.25
date	2014.05.03.16.19.53;	author martynas;	state Exp;
branches;
next	1.24;

1.24
date	2013.03.28.16.37.14;	author eric;	state Exp;
branches;
next	1.23;

1.23
date	2012.06.06.16.58.02;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	2012.01.05.20.37.50;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.16.13.22.06;	author stsp;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.16.13.20.51;	author stsp;	state Exp;
branches;
next	1.19;

1.19
date	2011.07.04.04.37.34;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.17;

1.17
date	2011.06.01.16.39.07;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2011.05.28.15.16.46;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.28.17.38.46;	author stsp;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.24.08.54.02;	author stsp;	state Exp;
branches;
next	1.13;

1.13
date	2011.04.24.07.46.58;	author stsp;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.24.09.58.39;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.13.18.18.31;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.04;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.06.18.53.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.19.17.05.20;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.01.08.59.27;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.20.10.46.34;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.17.20.40.30;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.18.13.48.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.11.18.44.12;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.14.20.59.10;	author espie;	state Exp;
branches;
next	;


desc
@@


1.31
log
@New POSIX xlocale implementation written from scratch.
Complete in the sense that all POSIX *locale(3) and *_l(3) functions
are included, but in OpenBSD, we of course only really care about
LC_CTYPE and we only support ASCII and UTF-8.

With important help from kettenis@@, guenther@@, and jca@@.
Repeated testing in ports bulk builds by naddy@@.
Additional testing by jca@@, sebastia@@, dcoppa@@, and others.
OK kettenis@@ dcoppa@@, and guenther@@ on an earlier version.
Riding guenther@@'s libc/librthread major bump.
@
text
@/*	$OpenBSD: wchar.h,v 1.30 2016/09/09 18:12:37 millert Exp $	*/
/*	$NetBSD: wchar.h,v 1.16 2003/03/07 07:11:35 tshiozak Exp $	*/

/*-
 * Copyright (c)1999 Citrus Project,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1999, 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Julian Coleman.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _WCHAR_H_
#define _WCHAR_H_

#include <sys/cdefs.h>
#include <sys/_null.h>
#include <sys/_types.h>

#include <stdio.h> /* for FILE* */

#if !defined(_WCHAR_T_DEFINED_) && !defined(__cplusplus)
#define _WCHAR_T_DEFINED_
typedef	__wchar_t	wchar_t;
#endif

#ifndef	_MBSTATE_T_DEFINED_
#define	_MBSTATE_T_DEFINED_
typedef	__mbstate_t	mbstate_t;
#endif

#ifndef	_WINT_T_DEFINED_
#define	_WINT_T_DEFINED_
typedef	__wint_t	wint_t;
#endif

#ifndef	_SIZE_T_DEFINED_
#define	_SIZE_T_DEFINED_
typedef	__size_t	size_t;
#endif

#ifndef	WEOF
#define	WEOF 	((wint_t)-1)
#endif

#ifndef	WCHAR_MIN
#define	WCHAR_MIN	(-0x7fffffff - 1)
#endif
#ifndef	WCHAR_MAX
#define	WCHAR_MAX	0x7fffffff
#endif

#if __POSIX_VISIBLE >= 200809
#ifndef	_LOCALE_T_DEFINED_
#define	_LOCALE_T_DEFINED_
typedef void	*locale_t;
#endif
#endif

__BEGIN_DECLS
wint_t	btowc(int);
size_t	mbrlen(const char * __restrict, size_t, mbstate_t * __restrict);
size_t	mbrtowc(wchar_t * __restrict, const char * __restrict, size_t,
	    mbstate_t * __restrict);
int	mbsinit(const mbstate_t *);
size_t	mbsrtowcs(wchar_t * __restrict, const char ** __restrict, size_t,
	    mbstate_t * __restrict)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
size_t	wcrtomb(char * __restrict, wchar_t, mbstate_t * __restrict);
wchar_t	*wcscat(wchar_t * __restrict, const wchar_t * __restrict);
wchar_t	*wcschr(const wchar_t *, wchar_t);
int	wcscmp(const wchar_t *, const wchar_t *);
int	wcscoll(const wchar_t *, const wchar_t *);
wchar_t	*wcscpy(wchar_t * __restrict, const wchar_t * __restrict);
size_t	wcscspn(const wchar_t *, const wchar_t *);
size_t	wcslen(const wchar_t *);
wchar_t	*wcsncat(wchar_t * __restrict, const wchar_t * __restrict,
	    size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
int	wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wcsncpy(wchar_t * __restrict , const wchar_t * __restrict,
	    size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
wchar_t	*wcspbrk(const wchar_t *, const wchar_t *);
wchar_t	*wcsrchr(const wchar_t *, wchar_t);
size_t	wcsrtombs(char * __restrict, const wchar_t ** __restrict, size_t,
	    mbstate_t * __restrict)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
size_t	wcsspn(const wchar_t *, const wchar_t *);
wchar_t	*wcsstr(const wchar_t *, const wchar_t *);
wchar_t *wcstok(wchar_t * __restrict, const wchar_t * __restrict,
		     wchar_t ** __restrict);
size_t	wcsxfrm(wchar_t *, const wchar_t *, size_t);
wchar_t	*wcswcs(const wchar_t *, const wchar_t *);
wchar_t	*wmemchr(const wchar_t *, wchar_t, size_t);
int	wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemcpy(wchar_t * __restrict, const wchar_t * __restrict,
	    size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)))
		__attribute__ ((__bounded__(__wcstring__,2,3)));
wchar_t	*wmemmove(wchar_t *, const wchar_t *, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)))
		__attribute__ ((__bounded__(__wcstring__,2,3)));
wchar_t	*wmemset(wchar_t *, wchar_t, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));

int	wcswidth(const wchar_t *, size_t);
int	wctob(wint_t);
int	wcwidth(wchar_t);

double wcstod(const wchar_t * __restrict, wchar_t ** __restrict);
long int wcstol(const wchar_t * __restrict, wchar_t ** __restrict, int base);
unsigned long int wcstoul(const wchar_t * __restrict, wchar_t ** __restrict,
		int base);

#if __POSIX_VISIBLE >= 200809
FILE *open_wmemstream(wchar_t **, size_t *);

int wcscoll_l(const wchar_t *, const wchar_t *, locale_t);
wchar_t	*wcsdup(const wchar_t *);
int wcscasecmp(const wchar_t *, const wchar_t *);
int wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t);
int wcsncasecmp(const wchar_t *, const wchar_t *, size_t);
int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, locale_t);
size_t wcsxfrm_l(wchar_t *, const wchar_t *, size_t, locale_t);

size_t mbsnrtowcs(wchar_t * __restrict, const char ** __restrict, size_t,
    size_t, mbstate_t * __restrict)
		__attribute__ ((__bounded__(__wcstring__,1,4)));
size_t wcsnrtombs(char * __restrict, const wchar_t ** __restrict, size_t,
    size_t, mbstate_t * __restrict)
		__attribute__ ((__bounded__(__wcstring__,1,4)));
#endif

#if __ISO_C_VISIBLE >= 1999
float	wcstof(const wchar_t * __restrict, wchar_t ** __restrict);
long double wcstold(const wchar_t * __restrict, wchar_t ** __restrict);

struct tm;
size_t wcsftime(wchar_t * __restrict, size_t, const wchar_t *__restrict,
	const struct tm *__restrict);
#endif

#if !defined(__STRICT_ANSI__) || __ISO_C_VISIBLE >= 1999
long long int wcstoll(const wchar_t * __restrict,
	wchar_t ** __restrict, int base);
unsigned long long int wcstoull(const wchar_t * __restrict,
	wchar_t ** __restrict, int base);
#endif

wint_t ungetwc(wint_t, FILE *);
wint_t fgetwc(FILE *);
wchar_t *fgetws(wchar_t * __restrict, int, FILE * __restrict)
		__attribute__ ((__bounded__(__wcstring__,1,2)));
wint_t getwc(FILE *);
wint_t getwchar(void);
wint_t fputwc(wchar_t, FILE *);
int fputws(const wchar_t * __restrict, FILE * __restrict);
wint_t putwc(wchar_t, FILE *);
wint_t putwchar(wchar_t);

int fwide(FILE *, int);

int fwprintf(FILE * __restrict, const wchar_t * __restrict, ...);
int swprintf(wchar_t * __restrict, size_t, const wchar_t * __restrict, ...);
int vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
int vswprintf(wchar_t * __restrict, size_t, const wchar_t * __restrict,
	__va_list);
int vwprintf(const wchar_t * __restrict, __va_list);
int wprintf(const wchar_t * __restrict, ...);

int fwscanf(FILE * __restrict, const wchar_t * __restrict, ...);
int swscanf(const wchar_t * __restrict, const wchar_t * __restrict, ...);
int vfwscanf(FILE * __restrict, const wchar_t * __restrict, __va_list);
int vswscanf(const wchar_t * __restrict, const wchar_t * __restrict, __va_list);
int vwscanf(const wchar_t * __restrict, __va_list);
int wscanf(const wchar_t * __restrict, ...);

#if __BSD_VISIBLE
wchar_t *fgetwln(FILE * __restrict, size_t * __restrict);
size_t	wcslcat(wchar_t *, const wchar_t *, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
size_t	wcslcpy(wchar_t *, const wchar_t *, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
#endif

#define getwc(f) fgetwc(f)
#define getwchar() getwc(stdin)
#define putwc(wc, f) fputwc((wc), (f))
#define putwchar(wc) putwc((wc), stdout)
__END_DECLS

#endif /* !_WCHAR_H_ */
@


1.30
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.29 2015/04/04 18:05:05 guenther Exp $	*/
d99 7
d165 1
d168 1
d170 2
@


1.29
log
@gcc 2.x is dead

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.28 2015/02/09 23:02:25 millert Exp $	*/
d63 1
a64 10

#ifndef	NULL
#ifdef	__GNUG__
#define	NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif
#endif
@


1.28
log
@Protect fgetwln(), wcslcat() and wcslcpy() with __BSD_VISIBLE
OK tedu@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.27 2015/01/12 20:58:07 millert Exp $	*/
d188 1
a188 3
#if (defined(__GNUC__) && __GNUC__ >= 2 && !defined(__STRICT_ANSI__)) || \
    __ISO_C_VISIBLE >= 1999
/* LONGLONG */
a190 1
/* LONGLONG */
@


1.27
log
@Add fgetwln(3) from FreeBSD and bump libc minor revision.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.26 2014/07/12 02:48:33 guenther Exp $	*/
a154 4
size_t	wcslcat(wchar_t *, const wchar_t *, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
size_t	wcslcpy(wchar_t *, const wchar_t *, size_t)
		__attribute__ ((__bounded__(__wcstring__,1,3)));
a199 1
wchar_t *fgetwln(FILE * __restrict, size_t * __restrict);
d225 8
@


1.26
log
@Per C99, wchar.h has to forward declare struct tm
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.25 2014/05/03 16:19:53 martynas Exp $	*/
d204 1
@


1.25
log
@Annotate wide character routines so they get protected by Wbounded.
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.24 2013/03/28 16:37:14 eric Exp $	*/
d186 2
@


1.24
log
@Enable fmemopen(3) and open_{w,}memstream(3)

commiting on behalf of mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.23 2012/06/06 16:58:02 matthew Exp $	*/
d115 2
a116 1
	    mbstate_t * __restrict);
d126 2
a127 1
	    size_t);
d130 2
a131 1
	    size_t);
d135 2
a136 1
	    mbstate_t * __restrict);
d146 13
a158 6
	    size_t);
wchar_t	*wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t	*wmemset(wchar_t *, wchar_t, size_t);

size_t	wcslcat(wchar_t *, const wchar_t *, size_t);
size_t	wcslcpy(wchar_t *, const wchar_t *, size_t);
d176 2
a177 1
    size_t, mbstate_t * __restrict);
d179 2
a180 1
    size_t, mbstate_t * __restrict);
d202 2
a203 1
wchar_t *fgetws(wchar_t * __restrict, int, FILE * __restrict);
@


1.23
log
@Add support for mbsnrtowcs() and wcsnrtombs() to libc.

Bulk build test by naddy.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.22 2012/01/05 20:37:50 kettenis Exp $	*/
d158 2
@


1.22
log
@C99 says that both <wchar.h> and <stdint.h> should define WCHAR_MIN/MAX.

ok beck@@, guenther@@, millert@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.21 2011/10/16 13:22:06 stsp Exp $	*/
d161 5
@


1.21
log
@Hook wcsftime(3) to the build; committing on behalf of espie
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.20 2011/10/16 13:20:51 stsp Exp $	*/
d97 1
a97 1
#ifndef WEOF
d99 7
@


1.20
log
@Add wscanf(3) and friends. Based on our scanf(3) implementation, with wide
character support changes based on code from FreeBSD.
ok espie guenther; man page help from schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.19 2011/07/04 04:37:34 nicm Exp $	*/
d159 2
@


1.19
log
@Add wcsdup(), from NetBSD.

ok deraadt matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.18 2011/07/03 18:51:01 jsg Exp $	*/
d190 7
@


1.18
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.17 2011/06/01 16:39:07 millert Exp $	*/
d151 1
@


1.17
log
@Use __POSIX_VISIBLE not __POSIX_C_SOURCE to bracket the definitions
of wcscasecmp() and wcsncasecmp().  Noticed by naddy@@ OK espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.16 2011/05/28 15:16:46 espie Exp $	*/
d68 2
@


1.16
log
@wcs(n)casecmp support, manpage comments from jmc@@, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.15 2011/04/28 17:38:46 stsp Exp $	*/
d148 1
a148 1
#if __POSIX_C_SOURCE >= 200809L
@


1.15
log
@Bring back wprintf. We've sorted out what to do for gcc2 and gcc3.
"Yes, go ahead then" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.13 2011/04/24 07:46:58 stsp Exp $	*/
d147 5
@


1.14
log
@Back out wprintf until we've determined what to do for gcc2 and gcc3 arches.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.12 2011/04/06 11:39:42 miod Exp $	*/
d174 8
@


1.13
log
@Add fwprintf, swprintf, vfwprintf, vswprintf, vwprintf, and wprintf to libc.
Based on our vfprintf etc. implementations. Wide character parts based on
NetBSD but with lots of macros expanded. Minor bump for libc.
ok kettenis espie
@
text
@a174 8
int fwprintf(FILE * __restrict, const wchar_t * __restrict, ...);
int swprintf(wchar_t * __restrict, size_t, const wchar_t * __restrict, ...);
int vfwprintf(FILE * __restrict, const wchar_t * __restrict, __va_list);
int vswprintf(wchar_t * __restrict, size_t, const wchar_t * __restrict,
	__va_list);
int vwprintf(const wchar_t * __restrict, __va_list);
int wprintf(const wchar_t * __restrict, ...);

@


1.12
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.11 2010/07/24 09:58:39 guenther Exp $	*/
d174 8
@


1.11
log
@Don't declare wcscoll() twice
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.10 2009/01/13 18:18:31 kettenis Exp $	*/
d69 1
a69 1
#define	NULL	0L
@


1.10
log
@Add wcstof(3) and wcstold(3).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.9 2008/06/26 05:42:04 ray Exp $	*/
a140 1
int	wcscoll(const wchar_t *, const wchar_t *);
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.8 2006/01/06 18:53:04 millert Exp $	*/
d148 5
@


1.8
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.7 2005/12/19 17:05:20 millert Exp $	*/
a44 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@This piece was missed in the _FOO_SOURCE -> __FOO_VISIBLE change set.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.6 2005/07/01 08:59:27 espie Exp $	*/
d70 1
a70 1
#include <machine/ansi.h>
d82 3
a84 5
#ifdef	_BSD_WCHAR_T_
# ifndef __cplusplus
typedef	_BSD_WCHAR_T_	wchar_t;
# endif
#undef	_BSD_WCHAR_T_
d87 3
a89 3
#ifdef	_BSD_MBSTATE_T_
typedef	_BSD_MBSTATE_T_	mbstate_t;
#undef	_BSD_MBSTATE_T_
d92 3
a94 3
#ifdef	_BSD_WINT_T_
typedef	_BSD_WINT_T_	wint_t;
#undef	_BSD_WINT_T_
d97 3
a99 3
#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
@


1.6
log
@Add a few missing functions so that wctype.h/wchar.h are more or less
uptodate, namely, wcsto(u)l(l) family, wcstod, stubs from wctrans/towctrans

crank minor.

okay millert@@, jmc@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.5 2005/06/20 10:46:34 espie Exp $	*/
d158 2
a159 2
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    defined(_ISOC99_SOURCE) || (__STDC_VERSION__ - 0) > 199901L
@


1.5
log
@zap duplicate prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.4 2005/06/17 20:40:30 espie Exp $	*/
d137 1
d148 1
d151 16
a166 1
size_t	wcsxfrm(wchar_t *, const wchar_t *, size_t);
@


1.4
log
@
next citrus step.

reviewed by millert, otto, kevlo, naddy, kettenis...
libc+libstdc++ bump
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.2 2005/05/11 18:44:12 espie Exp $	*/
a136 1
size_t	wcsxfrm(wchar_t *, const wchar_t *, size_t);
@


1.3
log
@wchar_t is a native C++ type, gcc picks its definition from elsewhere,
so do not redefine it.

Found out by the quite picky fixinc in recent gcc.

okay millert@@, kettenis@@
@
text
@d149 19
@


1.2
log
@major abi changes:

* introduce the mbstate_t typedef.
impacts gnu libiconv, which has already been taken care of.

* Prepare for mb stuff to really exist, replace macro MB_CUR_MAX with
an external variable __mb_cur_max (impacts libX11 and various ports).

* use mbstate in all the mb <-> wchar functions with state.
* add a stub iswctype function allowing some ports to compile.

bash and gdiff are missing wcscoll, and need to be told there's no i18n
until this is fixed.

Discussed and matthieu, otto, millert, kettenis, deraadt.

Major libc bump
@
text
@d1 1
a1 1
/*	$OpenBSD: wchar.h,v 1.1 2005/04/14 20:59:10 espie Exp $	*/
d83 1
d85 1
@


1.1
log
@introduce some wchar functions (from citrus and an itojun@@ diff)
okay deraadt@@, cloder@@, pvalchev@@
thanks to everyone who commented on that.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 5
d107 8
d129 2
d146 1
@

