head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.22
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.18
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.20
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.12
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.16
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.22
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.20
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.16
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.18
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.16
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.06.26.21.11.41;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.31.10.53.51;	author hshoexer;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.13.17.54.30;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.15.17.31.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.10.19.47.45;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.10.14.59.01;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.19.15.48.35;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.17.16.00.34;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.25;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@half-guard the actual function prototypes.
precludes -Wredundant-declarations with multiple includes.

okay millert@@
@
text
@/*	$OpenBSD: assert.h,v 1.12 2006/01/31 10:53:51 hshoexer Exp $	*/
/*	$NetBSD: assert.h,v 1.6 1994/10/26 00:55:44 cgd Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)assert.h	8.2 (Berkeley) 1/21/94
 */

/*
 * Unlike other ANSI header files, <assert.h> may usefully be included
 * multiple times, with and without NDEBUG defined.
 */

#include <sys/cdefs.h>

#undef assert
#undef _assert

#ifdef NDEBUG
# define	assert(e)	((void)0)
# define	_assert(e)	((void)0)
#else
# define	_assert(e)	assert(e)
# if __ISO_C_VISIBLE >= 1999
#  define	assert(e)	((e) ? (void)0 : __assert2(__FILE__, __LINE__, __func__, #e))
# else
#  define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
# endif
#endif

#ifndef _ASSERT_H_
#define _ASSERT_H_
__BEGIN_DECLS
__dead void __assert(const char *, int, const char *);
__dead void __assert2(const char *, int, const char *, const char *);
__END_DECLS
#endif
@


1.12
log
@Annotate _assert()/__assert2() as __dead.
As discussed with espie@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.11 2006/01/13 17:54:30 millert Exp $	*/
d62 2
d68 1
@


1.11
log
@Include the function name in assert() output.  From espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.10 2003/07/15 17:31:18 deraadt Exp $	*/
d63 2
a64 2
void __assert(const char *, int, const char *);
void __assert2(const char *, int, const char *, const char *);
@


1.10
log
@proto _assert2()
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.9 2003/06/02 19:34:12 millert Exp $	*/
d45 2
d51 2
a52 2
#define	assert(e)	((void)0)
#define	_assert(e)	((void)0)
d54 6
a59 2
#define	_assert(e)	assert(e)
#define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
a60 2

#include <sys/cdefs.h>
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.8 2002/06/10 19:47:45 espie Exp $	*/
d60 1
@


1.8
log
@back-out header change for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.6 2002/04/19 15:48:35 deraadt Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@put back in the assert changes for ISO C 99 (put __func__ in it)
@
text
@a51 2
#include <sys/cdefs.h>

d53 2
a54 2
# define	assert(e)	((void)0)
# define	_assert(e)	((void)0)
d56 2
a57 6
# define	_assert(e)	assert(e)
# if __GNUC_PREREQ__(2, 95) || (defined(__STDC__) && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)
#  define	assert(e)	((e) ? (void)0 : __assert2(__FILE__, __LINE__, __func__, #e))
# else
#  define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
# endif
d60 1
a63 1
void __assert2(const char *, int, const char *, const char *);
@


1.6
log
@avoid cranking libc minors for another few weeks
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.4 2002/02/19 19:39:36 millert Exp $	*/
d52 2
d55 2
a56 2
#define	assert(e)	((void)0)
#define	_assert(e)	((void)0)
d58 6
a63 2
#define	_assert(e)	assert(e)
#define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
a65 1
#include <sys/cdefs.h>
d69 1
@


1.5
log
@Use __func__ in assert.
ok millert@@
@
text
@a51 2
#include <sys/cdefs.h>

d53 2
a54 2
# define	assert(e)	((void)0)
# define	_assert(e)	((void)0)
d56 2
a57 6
# define	_assert(e)	assert(e)
# if __GNUC_PREREQ__(2, 95) || (defined(__STDC__) && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L)
#  define	assert(e)	((e) ? (void)0 : __assert2(__FILE__, __LINE__, __func__, #e))
# else
#  define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
# endif
d60 1
a63 1
void __assert2(const char *, int, const char *, const char *);
@


1.4
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.3 2002/02/16 21:27:17 millert Exp $	*/
d52 2
d55 2
a56 2
#define	assert(e)	((void)0)
#define	_assert(e)	((void)0)
d58 6
a63 2
#define	_assert(e)	assert(e)
#define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, #e))
a65 1
#include <sys/cdefs.h>
d69 1
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.2 1997/09/21 10:45:25 niklas Exp $	*/
a56 1
#ifdef __STDC__
a57 3
#else	/* PCC */
#define	assert(e)	((e) ? (void)0 : __assert(__FILE__, __LINE__, "e"))
#endif
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: assert.h,v 1.6 1994/10/26 00:55:44 cgd Exp $	*/
d67 1
a67 1
void __assert __P((const char *, int, const char *));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
