head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.12
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.42
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.40
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.36
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.34
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.32
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.30
	OPENBSD_5_0:1.13.0.28
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.26
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.24
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.20
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.22
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.18
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.16
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.14
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.12
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.11.21.05.13.44;	author tedu;	state Exp;
branches;
next	1.14;
commitid	H7AJhZvkXj2g8HJk;

1.14
date	2014.11.19.22.59.50;	author tedu;	state Exp;
branches;
next	1.13;
commitid	gHTMAXQPpQD0KqdG;

1.13
date	2005.01.28.17.17.22;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.08.09.21.15.08;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.08.03.21.00.06;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.02.23.56.44;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.12.14.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.15.21.32.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.30.15.41.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.01.21.50.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.00.51.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.19.20.12.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.20.18.37.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.15
log
@change prototype for crypt_newhash. the login_cap_t is a holdover from its
pwd_gensalt origins, but a string argument works equally work and is more
friendly to consumers beyond local user accounts.
ok deraadt
@
text
@/*	$OpenBSD: login_cap.h,v 1.14 2014/11/19 22:59:50 tedu Exp $	*/

/*-
 * Copyright (c) 1995,1997 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Berkeley Software Design,
 *	Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: login_cap.h,v 2.11 1999/09/08 18:11:57 prb Exp $
 */

#ifndef _LOGIN_CAP_H_
#define _LOGIN_CAP_H_

#define	LOGIN_DEFCLASS		"default"
#define	LOGIN_DEFSTYLE		"passwd"
#define	LOGIN_DEFSERVICE	"login"
#define	LOGIN_DEFUMASK		022
#define	_PATH_LOGIN_CONF	"/etc/login.conf"
#define	_PATH_AUTHPROG		"/usr/libexec/auth/login_"

#define	LOGIN_SETGROUP		0x0001	/* Set group */
#define	LOGIN_SETLOGIN		0x0002	/* Set login */
#define	LOGIN_SETPATH		0x0004	/* Set path */
#define	LOGIN_SETPRIORITY	0x0008	/* Set priority */
#define	LOGIN_SETRESOURCES	0x0010	/* Set resource limits */
#define	LOGIN_SETUMASK		0x0020	/* Set umask */
#define	LOGIN_SETUSER		0x0040	/* Set user */
#define	LOGIN_SETENV		0x0080	/* Set environment */
#define	LOGIN_SETALL 		0x00ff	/* Set all. */

#define	BI_AUTH		"authorize"		/* Accepted authentication */
#define	BI_REJECT	"reject"		/* Rejected authentication */
#define	BI_CHALLENGE	"reject challenge"	/* Reject with a challenge */
#define	BI_SILENT	"reject silent"		/* Reject silently */
#define	BI_REMOVE	"remove"		/* remove file on error */
#define	BI_ROOTOKAY	"authorize root"	/* root authenticated */
#define	BI_SECURE	"authorize secure"	/* okay on non-secure line */
#define	BI_SETENV	"setenv"		/* set environment variable */
#define	BI_UNSETENV	"unsetenv"		/* unset environment variable */
#define	BI_VALUE	"value"			/* set local variable */
#define	BI_EXPIRED	"reject expired"	/* account expired */
#define	BI_PWEXPIRED	"reject pwexpired"	/* password expired */
#define	BI_FDPASS	"fd"			/* child is passing an fd */

/*
 * bits which can be returned by authenticate()/auth_scan()
 */
#define	AUTH_OKAY	0x01			/* user authenticated */
#define	AUTH_ROOTOKAY	0x02			/* authenticated as root */
#define	AUTH_SECURE	0x04			/* secure login */
#define	AUTH_SILENT	0x08			/* silent rejection */
#define	AUTH_CHALLENGE	0x10			/* a challenge was given */
#define	AUTH_EXPIRED	0x20			/* account expired */
#define	AUTH_PWEXPIRED	0x40			/* password expired */

#define	AUTH_ALLOW	(AUTH_OKAY | AUTH_ROOTOKAY | AUTH_SECURE)

typedef struct login_cap {
	char	*lc_class;
	char	*lc_cap;
	char	*lc_style;
} login_cap_t;

#include <sys/cdefs.h>
__BEGIN_DECLS
struct passwd;

login_cap_t *login_getclass(char *);
void	 login_close(login_cap_t *);
int	 login_getcapbool(login_cap_t *, char *, unsigned int);
quad_t	 login_getcapnum(login_cap_t *, char *, quad_t, quad_t);
quad_t	 login_getcapsize(login_cap_t *, char *, quad_t, quad_t);
char	*login_getcapstr(login_cap_t *, char *, char *, char *);
quad_t	 login_getcaptime(login_cap_t *, char *, quad_t, quad_t);
char	*login_getstyle(login_cap_t *, char *, char *);

int	secure_path(char *);
int	setclasscontext(char *, unsigned int);
int	setusercontext(login_cap_t *, struct passwd *, uid_t, unsigned int);

__END_DECLS

#endif /* _LOGIN_CAP_H_ */
@


1.14
log
@prototype for crypt_newhash(). adding it here because this is where
login_cap_t lives and i don't want to forward declare it in unistd.h
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.13 2005/01/28 17:17:22 millert Exp $	*/
a105 2

int	 crypt_newhash(const char *pass, login_cap_t *lc, char *hash, size_t hashlen);
@


1.13
log
@LOGIN_SETALL did not include LOGIN_SETENV as it should.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.12 2004/08/09 21:15:08 millert Exp $	*/
d106 2
@


1.12
log
@Support the "setenv" capability in login.conf ala FreeBSD.  Following
FreeBSD's example, a '~' in an environment variable is replaced
with the user's homedir.  A '$' is replaced by the user's login
name.  Both can be escaped with a backslash to get the literal char.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.11 2004/08/03 21:00:06 millert Exp $	*/
d55 1
a55 1
#define	LOGIN_SETALL 		0x007f	/* Set all. */
@


1.11
log
@Define BI_FDPASS for the BSD auth fd passing changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.10 2004/01/22 21:48:02 espie Exp $	*/
d54 1
@


1.10
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.9 2002/08/02 23:56:44 millert Exp $	*/
d68 1
@


1.9
log
@Change value of LOGIN_DEFSTYLE from "krb4-or-pwd" to just "passwd".
If there is no login.conf or it is corrupt we don't want to make
any assumptions about kerberos.  By request of deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.8 2002/06/03 12:14:30 deraadt Exp $	*/
d94 1
a94 1
int	 login_getcapbool(login_cap_t *, char *, u_int);
d102 2
a103 2
int	setclasscontext(char *, u_int);
int	setusercontext(login_cap_t *, struct passwd *, uid_t, u_int);
@


1.8
log
@compatiblity -> compatibility
decriptor -> descriptor
authentciated -> authenticated
transmition -> transmission
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.7 2002/02/16 21:27:17 millert Exp $	*/
d41 1
a41 1
#define	LOGIN_DEFSTYLE		"krb4-or-pwd"
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.6 2001/07/15 21:32:25 millert Exp $	*/
d72 1
a72 1
#define	AUTH_OKAY	0x01			/* user authentciated */
@


1.6
log
@Give login_cap_t a struct name so we can use forward declarations.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.5 2001/06/30 15:41:51 millert Exp $	*/
d92 12
a103 12
login_cap_t *login_getclass __P((char *));
void	 login_close __P((login_cap_t *));
int	 login_getcapbool __P((login_cap_t *, char *, u_int));
quad_t	 login_getcapnum __P((login_cap_t *, char *, quad_t, quad_t));
quad_t	 login_getcapsize __P((login_cap_t *, char *, quad_t, quad_t));
char	*login_getcapstr __P((login_cap_t *, char *, char *, char *));
quad_t	 login_getcaptime __P((login_cap_t *, char *, quad_t, quad_t));
char	*login_getstyle __P((login_cap_t *, char *, char *));

int	secure_path __P((char *));
int	setclasscontext __P((char *, u_int));
int	setusercontext __P((login_cap_t *, struct passwd *, uid_t, u_int));
@


1.5
log
@Default login style is now krb4-or-pwd, not krb-or-pwd.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.4 2001/01/01 21:50:11 millert Exp $	*/
d82 1
a82 1
typedef struct {
@


1.4
log
@Guard against multiple inclusion
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.3 2000/11/21 00:51:16 millert Exp $	*/
d41 1
a41 1
#define	LOGIN_DEFSTYLE		"krb-or-pwd"
@


1.3
log
@BSD authentication routines from BSDI.  Presently this is not used but
the login_* helper programs and other support will be committed in the
near future.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.2 2000/11/19 20:12:10 millert Exp $	*/
d37 3
d106 2
@


1.2
log
@Remove prototypes for old BSD auth functions.  New ones will live in
bsd_auth.h when BSD authentication is committed.
@
text
@d1 1
a1 1
/*	$OpenBSD: login_cap.h,v 1.1 2000/08/20 18:37:20 millert Exp $	*/
d38 1
a38 1
#define	LOGIN_DEFSTYLE		"passwd"
@


1.1
log
@login.conf code from BSDi.  This does not include the bsd auth code
which will come later.  At this stage it is primarily used for setting
resource limits.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a101 18
/*
 * Routines for authentication
 * Most of these will be deprecated in a future release
 */
int	auth_approve __P((login_cap_t *, char *, char *));
int	auth_cat __P((char *));
int	auth_check __P((char *, char *, char *, char *, int *));
void	auth_checknologin __P((login_cap_t *));
void	auth_env __P((void));
char	*auth_mkvalue __P((char *));
int	auth_response __P((char *, char *, char *, char *, int *, char *, char *));
void	auth_rmfiles __P((void));
int	auth_scan __P((int));
int	auth_script __P((char *, ...));
int	auth_script_data __P((char *, int, char *, ...));
char	*auth_value __P((char *));
int	auth_setopt __P((char *, char *));
void	auth_clropts __P((void));
@

