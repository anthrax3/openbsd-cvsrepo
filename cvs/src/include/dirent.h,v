head	1.34;
access;
symbols
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.33.0.12
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.8
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.10
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.33.0.6
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.29.0.2
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.28.0.2
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.4
	OPENBSD_5_0:1.24.0.2
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.18.0.14
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.10
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.12
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.8
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.6
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.4
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.2
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.10
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.33;
commitid	mBDdb9HYWgUfDo7E;

1.33
date	2013.12.13.18.09.27;	author zhuk;	state Exp;
branches;
next	1.32;

1.32
date	2013.08.16.08.33.20;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.02.16.14.59;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.24.17.46.58;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2012.11.29.02.15.44;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2012.03.24.01.53.51;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2012.03.22.04.11.53;	author matthew;	state Exp;
branches;
next	1.26;

1.26
date	2012.03.22.01.44.19;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2012.03.22.01.13.40;	author matthew;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.18.17.29.49;	author matthew;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.14.02.16.00;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2010.12.31.19.54.05;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.28.15.02.41;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.05.18.11.48;	author kurt;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.08.16.34.38;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.01.18.06.59;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2005.06.18.18.09.42;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.25.21.55.28;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.09.17.13.13.46;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	99.06.11.22.47.48;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	98.11.20.11.18.25;	author d;	state Exp;
branches;
next	1.3;

1.3
date	97.09.21.10.45.30;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.11.23.17.12.11;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@/*	$OpenBSD: dirent.h,v 1.33 2013/12/13 18:09:27 zhuk Exp $	*/
/*	$NetBSD: dirent.h,v 1.9 1995/03/26 20:13:37 jtc Exp $	*/

/*-
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dirent.h	8.2 (Berkeley) 7/28/94
 */

#ifndef _DIRENT_H_
#define _DIRENT_H_

#include <sys/cdefs.h>

/*
 * POSIX doesn't mandate this, but X/Open XPG 4.2 does.
 */
#if __BSD_VISIBLE || __XPG_VISIBLE >= 400
#include <sys/types.h>
#else
#include <sys/_types.h>
#endif

/*
 * The kernel defines the format of directory entries returned by 
 * the getdents(2) system call.
 */
#include <sys/dirent.h>

#if __BSD_VISIBLE || __XPG_VISIBLE
#define	d_ino		d_fileno	/* backward compatibility */
#endif

typedef struct _dirdesc DIR;

#if __BSD_VISIBLE

/* definitions for library routines operating on directories. */
#define	DIRBLKSIZ	1024

#include <sys/_null.h>

#endif /* __BSD_VISIBLE */

__BEGIN_DECLS
DIR *opendir(const char *);
#if __POSIX_VISIBLE >= 200809
DIR *fdopendir(int);
#endif
struct dirent *readdir(DIR *);
void rewinddir(DIR *);
int closedir(DIR *);
#if __BSD_VISIBLE
int getdents(int, void *, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
#endif /* __BSD_VISIBLE */
#if __XPG_VISIBLE
long telldir(DIR *);
void seekdir(DIR *, long);
#endif
#if __POSIX_VISIBLE >= 199506 || __XPG_VISIBLE >= 500
int readdir_r(DIR *__restrict, struct dirent *__restrict,
    struct dirent **__restrict);
#endif
#if __POSIX_VISIBLE >= 200809
int scandir(const char *, struct dirent ***, int (*)(const struct dirent *),
    int (*)(const struct dirent **, const struct dirent **));
int alphasort(const struct dirent **, const struct dirent **);
#elif __BSD_VISIBLE
int scandir(const char *, struct dirent ***, int (*)(struct dirent *),
    int (*)(const void *, const void *));
int alphasort(const void *, const void *);
#endif
#if __POSIX_VISIBLE >= 200809 || __XPG_VISIBLE > 600
int dirfd(DIR *);
#endif
__END_DECLS

#endif /* !_DIRENT_H_ */
@


1.33
log
@Zap some getdirentries() leftovers.

okay guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.32 2013/08/16 08:33:20 guenther Exp $	*/
d66 1
a66 9
#ifndef NULL
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif /* __GNUG__ */
#endif /* !NULL */
@


1.32
log
@Tweak the getdents() kernel prototype to use "void *"
Provide a declaration for userspace
Fix the kernel's sanity check on the buflen argument

lack of prototype pointed out by sthen@@ and landry@@
ok kettenis@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.31 2013/06/02 16:14:59 guenther Exp $	*/
a87 2
		__attribute__ ((__bounded__(__string__,2,3)));
int getdirentries(int, char *, int, off_t *)
@


1.31
log
@XPG 4 apparently exposed d_ino and ino_t.  Also, always pull in
<sys/_types.h> for the internal types

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.30 2013/03/24 17:46:58 deraadt Exp $	*/
d51 1
a51 1
 * the getdirentries(2) system call.
d87 2
@


1.30
log
@I can see no reason for #ifndef _KERNEL check in a /usr/include
(ie. non-kernel) .h file
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.29 2012/11/29 02:15:44 guenther Exp $	*/
d43 1
a43 1
#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
d45 2
@


1.29
log
@Change scandir()'s 'select' argument from
	int (*)(struct dirent *)
to
	int (*)(const struct dirent *)
to match POSIX.

ok millert@@, ports check by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.28 2012/03/24 01:53:51 guenther Exp $	*/
a75 1
#ifndef _KERNEL
a108 2

#endif /* !_KERNEL */
@


1.28
log
@Provide the old prototypes for scandir() and alphasort() for code that
requests the pre-standardized version

requested by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.27 2012/03/22 04:11:53 matthew Exp $	*/
d98 1
a98 1
int scandir(const char *, struct dirent ***, int (*)(struct dirent *),
@


1.27
log
@Make DIR a private type within libc, give it the same underlying
typedef regardless of __BSD_VISIBLE, and eliminate the dirfd() macro.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.26 2012/03/22 01:44:19 guenther Exp $	*/
d101 4
@


1.26
log
@Update alphasort() and scandir()'s argument types to match POSIX:
use "const struct dirent **" instead of "const void *".  Also, add
__restrict to readdir_r().

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.25 2012/03/22 01:13:40 matthew Exp $	*/
d57 1
a57 3
#if __BSD_VISIBLE || __XPG_VISIBLE > 600
#define	dirfd(dirp)	((dirp)->dd_fd)
#endif
a63 15
struct _telldir;
/* structure describing an open directory. */
typedef struct _dirdesc {
	int	dd_fd;		/* file descriptor associated with directory */
	long	dd_loc;		/* offset in current buffer */
	long	dd_size;	/* amount of data returned by getdirentries */
	char	*dd_buf;	/* data buffer */
	int	dd_len;		/* size of data buffer */
	off_t	dd_seek;	/* magic cookie returned by getdirentries */
	off_t	dd_rewind;	/* magic cookie for rewinding */
	int	dd_unused;	/* was flags for readdir */
	struct _telldir *dd_td; /* telldir position recording */
	void	*dd_lock;	/* mutex to protect struct */
} DIR;

d74 1
a74 5
#else /* !__BSD_VISIBLE */

typedef void *	DIR;

#endif /* !__BSD_VISIBLE */
d103 1
a103 1
int (dirfd)(DIR *);
@


1.25
log
@Add dirfd() as a function to libc per POSIX requirement; dirfd() macro
to be pruned later when DIR is made an opaque type.

ok guenther@@; prodding by brad@@ for VLC and other ports
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.24 2011/07/18 17:29:49 matthew Exp $	*/
d115 2
a116 1
int readdir_r(DIR *, struct dirent *, struct dirent **);
d118 4
a121 4
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200809
int scandir(const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *));
int alphasort(const void *, const void *);
@


1.24
log
@Expose a bunch of new functionality from POSIX 2008: openat(2),
fchmodat(2), fstatat(2), mkdirat(2), mkfifoat(2), mknodat(2),
faccessat(2), fchownat(2), linkat(2), readlinkat(2), renameat(2),
symlinkat(2), unlinkat(2), utimensat(2), futimens(2), and
fdopendir(3).

"Minor" libc bump.

Tested in a bulk build by naddy@@
Much help from guenther@@, thib@@, tedu@@, oga@@, and others.
ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.23 2011/07/14 02:16:00 deraadt Exp $	*/
d121 3
@


1.23
log
@__opendir2, DTF_NODUP, and __DTF_READALL can die.  struct dirent
dd_flags is renamed to the placeholder position dd_unused so that
we can spot "broken software" which assumes we have Jan Simon Pendry's
union mounts (we don't have them, and won't have them ever again).
__opendir2 question spotted by matthew
verified to not break ports by sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.22 2011/07/03 18:51:01 jsg Exp $	*/
d100 3
@


1.22
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.21 2011/04/06 11:39:42 miod Exp $	*/
d76 1
a76 1
	int	dd_flags;	/* flags for readdir */
a80 3
/* flags for opendir2 */
#define DTF_NODUP	0x0002	/* don't return duplicate names */

a103 1
DIR *__opendir2(const char *, int);
@


1.21
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.20 2010/12/31 19:54:05 guenther Exp $	*/
d87 2
@


1.20
log
@Standards compliance: expose dirfd with XPG7 and scandir and alphasort
with POSIX 2008

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.19 2010/10/28 15:02:41 millert Exp $	*/
d88 1
a88 1
#define	NULL	0L
@


1.19
log
@Change basep parameter of getdirentries() to be off_t *, not long *
so it works correctly with large offsets (and matches other systems).
This requires adding a new getdirentries syscall, with the old one
renamed to ogetdirentries.  All in-tree consumers of getdirentries()
have been updated.  Bump libc and libpthread major numbers.
OK and with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.18 2007/06/05 18:11:48 kurt Exp $	*/
d57 4
a80 2
#define	dirfd(dirp)	((dirp)->dd_fd)

a105 3
int scandir(const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *));
int alphasort(const void *, const void *);
d115 5
@


1.18
log
@_FD_LOCK/UNLOCK() is libpthread specific and not needed for librthread, so
isolate its usage to libpthread only and replace with generic non-static
mutex support in the one place it is needed:
 - remove _FD_LOCK/UNLOCK from lseek and ftruncate in libc and make the
   functions weak so that libpthread can override with its own new
   versions that do the locking.
 - remove _thread_fd_lock/unlock() weak functions from libc and adjust
   libpthread for the change.
 - add generic _thread_mutex_lock/unlock/destroy() weak functions in libc
   to support non-static mutexes in libc and add libpthread and librthread
   implementations for them. libc can utilize non-static mutexes via the
   new _MUTEX_LOCK/UNLOCK/DESTROY() macros. Actually these new macros can
   support both static and non-static mutexes but currently only using
   them for non-static.
 - make opendir/closedir/readdir/readdir_r/seekdir/telldir() thread-safe
   for both thread libraries by using a non-static mutex in the struct
   _dirdesc (typedef DIR), utilizing it in the *dir functions and remove
   remaining and incorrect _FD_LOCK/UNLOCK() use in libc.
 - add comments to both thread libraries to indicate libc depends on the
   current implementation of static mutex initialization. suggested by
   marc@@
 - major bump libc and libpthread due to function removal, structure
   change and weak symbol conversions.
okay marc@@, tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.17 2007/02/08 16:34:38 millert Exp $	*/
d70 2
a71 2
	long	dd_seek;	/* magic cookie returned by getdirentries */
	long	dd_rewind;	/* magic cookie for rewinding */
d107 1
a107 1
int getdirentries(int, char *, int, long *)
@


1.17
log
@g/c __DTF_READALL.  It was a flag to the internal __opendir2() but
is never set now that the unionfs support has been removed from
readdir().  OK pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.16 2006/04/01 18:06:59 otto Exp $	*/
d74 1
@


1.16
log
@- Plug huge mem leak; mostly samba was suffering.
- Fix semantics: seekdir(pos); telldir() shoud return pos. The code
that implements this will be made faster in a later commit.
- We loose documented behaviour (after closedir() the telldir()
positions are not valid anymore). This was never in Posix, and most
other systems have nothing like it.

Diff originally from Paul Thorn, rewritten by me using some FreeBSD
code.  "slap it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.15 2005/12/13 00:35:22 millert Exp $	*/
a79 1
#define __DTF_READALL	0x0008	/* everything has been read */
@


1.15
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.14 2005/06/18 18:09:42 millert Exp $	*/
d62 1
d73 1
d111 1
a111 1
long telldir(const DIR *);
@


1.14
log
@Remove remaining whiteout tentacles; OK deraadt@@ miod@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.13 2003/08/01 17:38:33 avsm Exp $	*/
d38 2
d43 1
a43 1
#ifndef _POSIX_SOURCE
d53 3
a55 3
#ifdef _POSIX_SOURCE
typedef void *	DIR;
#else
d57 1
a57 1
#define	d_ino		d_fileno	/* backward compatibility */
d85 2
a86 2
#endif
#endif
d88 1
a88 1
#endif /* _POSIX_SOURCE */
d90 1
a90 1
#ifndef _KERNEL
d92 1
a92 1
#include <sys/cdefs.h>
d94 1
d100 1
a100 1
#ifndef _POSIX_SOURCE
a101 2
long telldir(const DIR *);
void seekdir(DIR *, long);
d107 6
a112 1
#endif /* not POSIX */
d114 1
@


1.13
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.12 2003/06/26 19:34:17 avsm Exp $	*/
a74 1
#define DTF_HIDEW	0x0001	/* hide whiteout entries */
a75 1
#define DTF_REWIND	0x0004	/* rewind after reading union stack */
@


1.12
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.10 2003/06/02 19:34:12 millert Exp $	*/
d106 2
a107 1
int getdirentries(int, char *, int, long *);
@


1.11
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d106 1
a106 2
int getdirentries(int, char *, int, long *)
		__attribute__ ((__bounded__(__string__,2,3)));
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.9 2002/10/25 21:55:28 millert Exp $	*/
d106 2
a107 1
int getdirentries(int, char *, int, long *);
@


1.9
log
@NULL is now 0L so it is the same size as a pointer.
OK mickey@@ and discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.8 2002/02/17 19:42:21 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.7 2002/02/16 21:27:17 millert Exp $	*/
d88 1
a88 1
#define	NULL	0
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.6 1999/09/17 13:13:46 espie Exp $	*/
d107 2
a108 2
int scandir __P((const char *, struct dirent ***,
    int (*)(struct dirent *), int (*)(const void *, const void *)));
@


1.6
log
@Be thorough about NULL as __null for C++.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.5 1999/06/11 22:47:48 espie Exp $	*/
d99 4
a102 4
DIR *opendir __P((const char *));
struct dirent *readdir __P((DIR *));
void rewinddir __P((DIR *));
int closedir __P((DIR *));
d104 3
a106 3
DIR *__opendir2 __P((const char *, int));
long telldir __P((const DIR *));
void seekdir __P((DIR *, long));
d109 2
a110 2
int alphasort __P((const void *, const void *));
int getdirentries __P((int, char *, int, long *));
d112 1
a112 1
int readdir_r __P((DIR *, struct dirent *, struct dirent **));
@


1.5
log
@Define NULL to be __null for C++: better quality of implementation.
__null is a magic constant of integral type that converts to a null pointer
as should be, but warns for ambiguity when used to resolved an overload
between an integral type and a pointer type.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.4 1998/11/20 11:18:25 d Exp $	*/
d86 1
a86 1
#define NULL	__null
@


1.4
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.3 1997/09/21 10:45:30 niklas Exp $	*/
d85 3
d89 1
@


1.3
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: dirent.h,v 1.9 1995/03/26 20:13:37 jtc Exp $	*/
d108 1
@


1.2
log
@include sys/types.h as mandated by X/Open XPG 4.2; from agc@@sde.uts.amdahl.com; netbsd pr#1785
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d42 7
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
