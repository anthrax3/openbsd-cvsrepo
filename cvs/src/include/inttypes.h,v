head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.14
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.10
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.18
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.06.11.15.59.16;	author matthew;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.13.18.13.51;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.15.00.47.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.15.00.46.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.13.17.58.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.06.18.54.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.17.21.56.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.01.52.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.01.07.23.39.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.06.21.22.13.35;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.08.18.05.29.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Contrary to C99's advice, C++ TR1 and C++ 11 require that <inttypes.h>
and <stdint.h> should unconditionally define all of their macros
regardless of whether the __STDC_*_MACROS macros are defined.

ok guenther, espie
bulk build tested by landry
@
text
@/*	$OpenBSD: inttypes.h,v 1.10 2009/01/13 18:13:51 kettenis Exp $	*/

/*
 * Copyright (c) 1997, 2005 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_INTTYPES_H_
#define	_INTTYPES_H_

#include <sys/stdint.h>

#ifdef __cplusplus
#define __wchar_t	wchar_t
#endif

/*
 * 7.8.1 Macros for format specifiers
 *
 * Each of the following object-like macros expands to a string
 * literal containing a conversion specifier, possibly modified by
 * a prefix such as hh, h, l, or ll, suitable for use within the
 * format argument of a formatted input/output function when
 * converting the corresponding integer type.  These macro names
 * have the general form of PRI (character string literals for the
 * fprintf family) or SCN (character string literals for the fscanf
 * family), followed by the conversion specifier, followed by a
 * name corresponding to a similar typedef name.  For example,
 * PRIdFAST32 can be used in a format string to print the value of
 * an integer of type int_fast32_t.
 */

/* fprintf macros for signed integers */
#define	PRId8			"d"		/* int8_t */
#define	PRId16			"d"		/* int16_t */
#define	PRId32			"d"		/* int32_t */
#define	PRId64			"lld"		/* int64_t */

#define	PRIdLEAST8		"d"		/* int_least8_t */
#define	PRIdLEAST16		"d"		/* int_least16_t */
#define	PRIdLEAST32		"d"		/* int_least32_t */
#define	PRIdLEAST64		"lld"		/* int_least64_t */

#define	PRIdFAST8		"d"		/* int_fast8_t */
#define	PRIdFAST16		"d"		/* int_fast16_t */
#define	PRIdFAST32		"d"		/* int_fast32_t */
#define	PRIdFAST64		"lld"		/* int_fast64_t */

#define	PRIdMAX			"jd"		/* intmax_t */
#define	PRIdPTR			"ld"		/* intptr_t */

#define	PRIi8			"i"		/* int8_t */
#define	PRIi16			"i"		/* int16_t */
#define	PRIi32			"i"		/* int32_t */
#define	PRIi64			"lli"		/* int64_t */

#define	PRIiLEAST8		"i"		/* int_least8_t */
#define	PRIiLEAST16		"i"		/* int_least16_t */
#define	PRIiLEAST32		"i"		/* int_least32_t */
#define	PRIiLEAST64		"lli"		/* int_least64_t */

#define	PRIiFAST8		"i"		/* int_fast8_t */
#define	PRIiFAST16		"i"		/* int_fast16_t */
#define	PRIiFAST32		"i"		/* int_fast32_t */
#define	PRIiFAST64		"lli"		/* int_fast64_t */

#define	PRIiMAX			"ji"		/* intmax_t */
#define	PRIiPTR			"li"		/* intptr_t */

/* fprintf macros for unsigned integers */
#define	PRIo8			"o"		/* int8_t */
#define	PRIo16			"o"		/* int16_t */
#define	PRIo32			"o"		/* int32_t */
#define	PRIo64			"llo"		/* int64_t */

#define	PRIoLEAST8		"o"		/* int_least8_t */
#define	PRIoLEAST16		"o"		/* int_least16_t */
#define	PRIoLEAST32		"o"		/* int_least32_t */
#define	PRIoLEAST64		"llo"		/* int_least64_t */

#define	PRIoFAST8		"o"		/* int_fast8_t */
#define	PRIoFAST16		"o"		/* int_fast16_t */
#define	PRIoFAST32		"o"		/* int_fast32_t */
#define	PRIoFAST64		"llo"		/* int_fast64_t */

#define	PRIoMAX			"jo"		/* intmax_t */
#define	PRIoPTR			"lo"		/* intptr_t */

#define	PRIu8			"u"		/* uint8_t */
#define	PRIu16			"u"		/* uint16_t */
#define	PRIu32			"u"		/* uint32_t */
#define	PRIu64			"llu"		/* uint64_t */

#define	PRIuLEAST8		"u"		/* uint_least8_t */
#define	PRIuLEAST16		"u"		/* uint_least16_t */
#define	PRIuLEAST32		"u"		/* uint_least32_t */
#define	PRIuLEAST64		"llu"		/* uint_least64_t */

#define	PRIuFAST8		"u"		/* uint_fast8_t */
#define	PRIuFAST16		"u"		/* uint_fast16_t */
#define	PRIuFAST32		"u"		/* uint_fast32_t */
#define	PRIuFAST64		"llu"		/* uint_fast64_t */

#define	PRIuMAX			"ju"		/* uintmax_t */
#define	PRIuPTR			"lu"		/* uintptr_t */

#define	PRIx8			"x"		/* uint8_t */
#define	PRIx16			"x"		/* uint16_t */
#define	PRIx32			"x"		/* uint32_t */
#define	PRIx64			"llx"		/* uint64_t */

#define	PRIxLEAST8		"x"		/* uint_least8_t */
#define	PRIxLEAST16		"x"		/* uint_least16_t */
#define	PRIxLEAST32		"x"		/* uint_least32_t */
#define	PRIxLEAST64		"llx"		/* uint_least64_t */

#define	PRIxFAST8		"x"		/* uint_fast8_t */
#define	PRIxFAST16		"x"		/* uint_fast16_t */
#define	PRIxFAST32		"x"		/* uint_fast32_t */
#define	PRIxFAST64		"llx"		/* uint_fast64_t */

#define	PRIxMAX			"jx"		/* uintmax_t */
#define	PRIxPTR			"lx"		/* uintptr_t */

#define	PRIX8			"X"		/* uint8_t */
#define	PRIX16			"X"		/* uint16_t */
#define	PRIX32			"X"		/* uint32_t */
#define	PRIX64			"llX"		/* uint64_t */

#define	PRIXLEAST8		"X"		/* uint_least8_t */
#define	PRIXLEAST16		"X"		/* uint_least16_t */
#define	PRIXLEAST32		"X"		/* uint_least32_t */
#define	PRIXLEAST64		"llX"		/* uint_least64_t */

#define	PRIXFAST8		"X"		/* uint_fast8_t */
#define	PRIXFAST16		"X"		/* uint_fast16_t */
#define	PRIXFAST32		"X"		/* uint_fast32_t */
#define	PRIXFAST64		"llX"		/* uint_fast64_t */

#define	PRIXMAX			"jX"		/* uintmax_t */
#define	PRIXPTR			"lX"		/* uintptr_t */

/* fscanf macros for signed integers */
#define	SCNd8			"hhd"		/* int8_t */
#define	SCNd16			"hd"		/* int16_t */
#define	SCNd32			"d"		/* int32_t */
#define	SCNd64			"lld"		/* int64_t */

#define	SCNdLEAST8		"hhd"		/* int_least8_t */
#define	SCNdLEAST16		"hd"		/* int_least16_t */
#define	SCNdLEAST32		"d"		/* int_least32_t */
#define	SCNdLEAST64		"lld"		/* int_least64_t */

#define	SCNdFAST8		"hhd"		/* int_fast8_t */
#define	SCNdFAST16		"hd"		/* int_fast16_t */
#define	SCNdFAST32		"d"		/* int_fast32_t */
#define	SCNdFAST64		"lld"		/* int_fast64_t */

#define	SCNdMAX			"jd"		/* intmax_t */
#define	SCNdPTR			"ld"		/* intptr_t */

#define	SCNi8			"hhi"		/* int8_t */
#define	SCNi16			"hi"		/* int16_t */
#define	SCNi32			"i"		/* int32_t */
#define	SCNi64			"lli"		/* int64_t */

#define	SCNiLEAST8		"hhi"		/* int_least8_t */
#define	SCNiLEAST16		"hi"		/* int_least16_t */
#define	SCNiLEAST32		"i"		/* int_least32_t */
#define	SCNiLEAST64		"lli"		/* int_least64_t */

#define	SCNiFAST8		"hhi"		/* int_fast8_t */
#define	SCNiFAST16		"hi"		/* int_fast16_t */
#define	SCNiFAST32		"i"		/* int_fast32_t */
#define	SCNiFAST64		"lli"		/* int_fast64_t */

#define	SCNiMAX			"ji"		/* intmax_t */
#define	SCNiPTR			"li"		/* intptr_t */

/* fscanf macros for unsigned integers */
#define	SCNo8			"hho"		/* uint8_t */
#define	SCNo16			"ho"		/* uint16_t */
#define	SCNo32			"o"		/* uint32_t */
#define	SCNo64			"llo"		/* uint64_t */

#define	SCNoLEAST8		"hho"		/* uint_least8_t */
#define	SCNoLEAST16		"ho"		/* uint_least16_t */
#define	SCNoLEAST32		"o"		/* uint_least32_t */
#define	SCNoLEAST64		"llo"		/* uint_least64_t */

#define	SCNoFAST8		"hho"		/* uint_fast8_t */
#define	SCNoFAST16		"ho"		/* uint_fast16_t */
#define	SCNoFAST32		"o"		/* uint_fast32_t */
#define	SCNoFAST64		"llo"		/* uint_fast64_t */

#define	SCNoMAX			"jo"		/* uintmax_t */
#define	SCNoPTR			"lo"		/* uintptr_t */

#define	SCNu8			"hhu"		/* uint8_t */
#define	SCNu16			"hu"		/* uint16_t */
#define	SCNu32			"u"		/* uint32_t */
#define	SCNu64			"llu"		/* uint64_t */

#define	SCNuLEAST8		"hhu"		/* uint_least8_t */
#define	SCNuLEAST16		"hu"		/* uint_least16_t */
#define	SCNuLEAST32		"u"		/* uint_least32_t */
#define	SCNuLEAST64		"llu"		/* uint_least64_t */

#define	SCNuFAST8		"hhu"		/* uint_fast8_t */
#define	SCNuFAST16		"hu"		/* uint_fast16_t */
#define	SCNuFAST32		"u"		/* uint_fast32_t */
#define	SCNuFAST64		"llu"		/* uint_fast64_t */

#define	SCNuMAX			"ju"		/* uintmax_t */
#define	SCNuPTR			"lu"		/* uintptr_t */

#define	SCNx8			"hhx"		/* uint8_t */
#define	SCNx16			"hx"		/* uint16_t */
#define	SCNx32			"x"		/* uint32_t */
#define	SCNx64			"llx"		/* uint64_t */

#define	SCNxLEAST8		"hhx"		/* uint_least8_t */
#define	SCNxLEAST16		"hx"		/* uint_least16_t */
#define	SCNxLEAST32		"x"		/* uint_least32_t */
#define	SCNxLEAST64		"llx"		/* uint_least64_t */

#define	SCNxFAST8		"hhx"		/* uint_fast8_t */
#define	SCNxFAST16		"hx"		/* uint_fast16_t */
#define	SCNxFAST32		"x"		/* uint_fast32_t */
#define	SCNxFAST64		"llx"		/* uint_fast64_t */

#define	SCNxMAX			"jx"		/* uintmax_t */
#define	SCNxPTR			"lx"		/* uintptr_t */

typedef struct {
	intmax_t quot;		/* quotient */
	intmax_t rem;		/* remainder */
} imaxdiv_t;

__BEGIN_DECLS
intmax_t	imaxabs(intmax_t);
imaxdiv_t	imaxdiv(intmax_t, intmax_t);
intmax_t	strtoimax(const char *, char **, int);
uintmax_t	strtoumax(const char *, char **, int);
intmax_t	wcstoimax(const __wchar_t * __restrict,
		    __wchar_t ** __restrict, int);
uintmax_t	wcstoumax(const __wchar_t * __restrict,
		    __wchar_t ** __restrict, int);
__END_DECLS

#endif /* _INTTYPES_H_ */
@


1.10
log
@Add wcstoimax(3) and wcstoumax(3).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.9 2006/01/15 00:47:51 millert Exp $	*/
a27 1
#if !defined(__cplusplus) || defined(__STDC_FORMAT_MACROS)
a244 2

#endif /* __cplusplus || __STDC_FORMAT_MACROS */
@


1.9
log
@Add comments to show which printf/scanf formats match which types
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.7 2006/01/13 17:58:09 millert Exp $	*/
d24 4
d259 4
@


1.8
log
@Update {PRN,SCN}*PTR defines to match types changes
@
text
@d42 32
a73 32
#define	PRId8			"d"
#define	PRId16			"d"
#define	PRId32			"d"
#define	PRId64			"lld"

#define	PRIdLEAST8		"d"
#define	PRIdLEAST16		"d"
#define	PRIdLEAST32		"d"
#define	PRIdLEAST64		"lld"

#define	PRIdFAST8		"d"
#define	PRIdFAST16		"d"
#define	PRIdFAST32		"d"
#define	PRIdFAST64		"lld"

#define	PRIdMAX			"jd"
#define	PRIdPTR			"ld"

#define	PRIi8			"i"
#define	PRIi16			"i"
#define	PRIi32			"i"
#define	PRIi64			"lli"

#define	PRIiLEAST8		"i"
#define	PRIiLEAST16		"i"
#define	PRIiLEAST32		"i"
#define	PRIiLEAST64		"lli"

#define	PRIiFAST8		"i"
#define	PRIiFAST16		"i"
#define	PRIiFAST32		"i"
#define	PRIiFAST64		"lli"
d75 2
a76 2
#define	PRIiMAX			"ji"
#define	PRIiPTR			"li"
d79 68
a146 68
#define	PRIo8			"o"
#define	PRIo16			"o"
#define	PRIo32			"o"
#define	PRIo64			"llo"

#define	PRIoLEAST8		"o"
#define	PRIoLEAST16		"o"
#define	PRIoLEAST32		"o"
#define	PRIoLEAST64		"llo"

#define	PRIoFAST8		"o"
#define	PRIoFAST16		"o"
#define	PRIoFAST32		"o"
#define	PRIoFAST64		"llo"

#define	PRIoMAX			"jo"
#define	PRIoPTR			"lo"

#define	PRIu8			"u"
#define	PRIu16			"u"
#define	PRIu32			"u"
#define	PRIu64			"llu"

#define	PRIuLEAST8		"u"
#define	PRIuLEAST16		"u"
#define	PRIuLEAST32		"u"
#define	PRIuLEAST64		"llu"

#define	PRIuFAST8		"u"
#define	PRIuFAST16		"u"
#define	PRIuFAST32		"u"
#define	PRIuFAST64		"llu"

#define	PRIuMAX			"ju"
#define	PRIuPTR			"lu"

#define	PRIx8			"x"
#define	PRIx16			"x"
#define	PRIx32			"x"
#define	PRIx64			"llx"

#define	PRIxLEAST8		"x"
#define	PRIxLEAST16		"x"
#define	PRIxLEAST32		"x"
#define	PRIxLEAST64		"llx"

#define	PRIxFAST8		"x"
#define	PRIxFAST16		"x"
#define	PRIxFAST32		"x"
#define	PRIxFAST64		"llx"

#define	PRIxMAX			"jx"
#define	PRIxPTR			"lx"

#define	PRIX8			"X"
#define	PRIX16			"X"
#define	PRIX32			"X"
#define	PRIX64			"llX"

#define	PRIXLEAST8		"X"
#define	PRIXLEAST16		"X"
#define	PRIXLEAST32		"X"
#define	PRIXLEAST64		"llX"

#define	PRIXFAST8		"X"
#define	PRIXFAST16		"X"
#define	PRIXFAST32		"X"
#define	PRIXFAST64		"llX"
d148 2
a149 2
#define	PRIXMAX			"jX"
#define	PRIXPTR			"lX"
d152 32
a183 32
#define	SCNd8			"hhd"
#define	SCNd16			"hd"
#define	SCNd32			"d"
#define	SCNd64			"lld"

#define	SCNdLEAST8		"hhd"
#define	SCNdLEAST16		"hd"
#define	SCNdLEAST32		"d"
#define	SCNdLEAST64		"lld"

#define	SCNdFAST8		"hhd"
#define	SCNdFAST16		"hd"
#define	SCNdFAST32		"d"
#define	SCNdFAST64		"lld"

#define	SCNdMAX			"jd"
#define	SCNdPTR			"ld"

#define	SCNi8			"hhi"
#define	SCNi16			"hi"
#define	SCNi32			"i"
#define	SCNi64			"lli"

#define	SCNiLEAST8		"hhi"
#define	SCNiLEAST16		"hi"
#define	SCNiLEAST32		"i"
#define	SCNiLEAST64		"lli"

#define	SCNiFAST8		"hhi"
#define	SCNiFAST16		"hi"
#define	SCNiFAST32		"i"
#define	SCNiFAST64		"lli"
d185 2
a186 2
#define	SCNiMAX			"ji"
#define	SCNiPTR			"li"
d189 50
a238 50
#define	SCNo8			"hho"
#define	SCNo16			"ho"
#define	SCNo32			"o"
#define	SCNo64			"llo"

#define	SCNoLEAST8		"hho"
#define	SCNoLEAST16		"ho"
#define	SCNoLEAST32		"o"
#define	SCNoLEAST64		"llo"

#define	SCNoFAST8		"hho"
#define	SCNoFAST16		"ho"
#define	SCNoFAST32		"o"
#define	SCNoFAST64		"llo"

#define	SCNoMAX			"jo"
#define	SCNoPTR			"lo"

#define	SCNu8			"hhu"
#define	SCNu16			"hu"
#define	SCNu32			"u"
#define	SCNu64			"llu"

#define	SCNuLEAST8		"hhu"
#define	SCNuLEAST16		"hu"
#define	SCNuLEAST32		"u"
#define	SCNuLEAST64		"llu"

#define	SCNuFAST8		"hhu"
#define	SCNuFAST16		"hu"
#define	SCNuFAST32		"u"
#define	SCNuFAST64		"llu"

#define	SCNuMAX			"ju"
#define	SCNuPTR			"lu"

#define	SCNx8			"hhx"
#define	SCNx16			"hx"
#define	SCNx32			"x"
#define	SCNx64			"llx"

#define	SCNxLEAST8		"hhx"
#define	SCNxLEAST16		"hx"
#define	SCNxLEAST32		"x"
#define	SCNxLEAST64		"llx"

#define	SCNxFAST8		"hhx"
#define	SCNxFAST16		"hx"
#define	SCNxFAST32		"x"
#define	SCNxFAST64		"llx"
d240 2
a241 2
#define	SCNxMAX			"jx"
#define	SCNxPTR			"lx"
@


1.7
log
@Add lldiv(), imaxabs(), imaxdiv(), strtoimax() and strtoumax()
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.6 2006/01/06 18:54:25 millert Exp $	*/
a57 1
#ifdef __LP64__
a58 3
#else
#define	PRIdPTR			"d"
#endif
a75 1
#ifdef __LP64__
a76 3
#else
#define	PRIiPTR			"i"
#endif
a94 1
#ifdef __LP64__
a95 3
#else
#define	PRIoPTR			"o"
#endif
a112 1
#ifdef __LP64__
a113 3
#else
#define	PRIuPTR			"u"
#endif
a130 1
#ifdef __LP64__
a131 3
#else
#define	PRIxPTR			"x"
#endif
a148 1
#ifdef __LP64__
a149 3
#else
#define	PRIXPTR			"X"
#endif
a167 1
#ifdef __LP64__
a168 3
#else
#define	SCNdPTR			"d"
#endif
a185 1
#ifdef __LP64__
a186 3
#else
#define	SCNiPTR			"i"
#endif
a204 1
#ifdef __LP64__
a205 3
#else
#define	SCNoPTR			"o"
#endif
a222 1
#ifdef __LP64__
a223 3
#else
#define	SCNuPTR			"u"
#endif
a240 1
#ifdef __LP64__
a241 3
#else
#define	SCNxPTR			"x"
#endif
@


1.6
log
@Add real C99 stdint.h and inttypes.h based on an initial version I did in
1997 (yes, really).
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.5 2003/06/17 21:56:23 millert Exp $	*/
d289 11
a299 1
/* XXX - need to add imax/umax functions */
@


1.5
log
@Sync with share/misc/license.template and add missing DARPA credit
where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.4 2003/06/03 01:52:39 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Todd C. Miller <Todd.Miller@@courtesan.com>
d19 2
a20 2
#ifndef _INTTYPES_H_
#define _INTTYPES_H_
d22 1
a22 2
/* Machine type dependent parameters. */
#include <machine/types.h>
d24 266
a289 3
/* XXX - these really belong in <machine/types.h> (maybe create u_register_t) */
typedef long			intptr_t;
typedef unsigned long		uintptr_t;
@


1.4
log
@Use an ISC-tyle license for all my code; it is simpler and more permissive.
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.3 1999/01/07 23:39:03 millert Exp $	*/
d10 7
a16 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND TODD C. MILLER DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL TODD C. MILLER BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.3
log
@move uint*_t to machine/types.h
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.2 1998/06/21 22:13:35 millert Exp $	*/
a4 1
 * All rights reserved.
d6 3
a8 10
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d10 7
a16 10
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.2
log
@Remove the advertising clause in my old license, it impedes free use
of the code as a large number of similar clauses makes it impossible
to write an ad for a product using the code...
@
text
@d1 1
a1 1
/*	$OpenBSD: inttypes.h,v 1.1 1997/08/18 05:29:40 millert Exp $	*/
a34 10

/*
 * Fixed-size integer types as specified in XPG4.2.
 * int8_t, int16_t, int32_t, int64_t are defined in <machine/types.h>
 */

typedef u_int8_t		uint8_t;
typedef u_int16_t		uint16_t;
typedef u_int32_t		uint32_t;
typedef u_int64_t		uint64_t;
@


1.1
log
@inttypes.h as required by XPG4.2.  Nothing uses this yet and all in-tree
sources should use the BSD-style types anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d15 1
a15 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Todd C. Miller.
 * 4. The name of the author may not be used to endorse or promote products
@

