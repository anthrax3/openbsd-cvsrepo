head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.10
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.36
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.32
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.30
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.28
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.26
	OPENBSD_5_0:1.9.0.24
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2017.03.09.10.13.03;	author fcambus;	state Exp;
branches;
next	1.10;
commitid	OBRyBosIbFCvAKYB;

1.10
date	2014.04.21.11.27.34;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.06.18.53.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.30.08.50.01;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.07.03.11.31;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.05.19.27.50;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.12.02.28.11;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.28.23.43.15;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.01.21.51.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.21.00.51.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@As per style.9, prototypes should not have variable names associated
with the types.

OK jca@@
@
text
@/*	$OpenBSD: bsd_auth.h,v 1.10 2014/04/21 11:27:34 guenther Exp $	*/

/*-
 * Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Berkeley Software Design,
 *	Inc.
 * 4. The name of Berkeley Software Design, Inc.  may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN, INC. BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	BSDI $From: bsd_auth.h,v 2.3 1999/09/08 22:13:08 prb Exp $
 */

#ifndef _BSD_AUTH_H_
#define _BSD_AUTH_H_

#include <machine/_types.h>		/* for __va_list */

typedef struct auth_session_t auth_session_t;

typedef enum {
	AUTHV_ALL,
	AUTHV_CHALLENGE,
	AUTHV_CLASS,
	AUTHV_NAME,
	AUTHV_SERVICE,
	AUTHV_STYLE,
	AUTHV_INTERACTIVE
} auth_item_t;

#include <sys/cdefs.h>
__BEGIN_DECLS
struct passwd;
struct login_cap;

char	*auth_getitem(auth_session_t *, auth_item_t);
int	 auth_setitem(auth_session_t *, auth_item_t, char *);

auth_session_t *auth_open(void);
auth_session_t *auth_verify(auth_session_t *, char *, char *, ...)
		    __attribute__((__sentinel__));

auth_session_t *auth_userchallenge(char *, char *, char *, char **);
auth_session_t *auth_usercheck(char *, char *, char *, char *);

int	 auth_userresponse(auth_session_t *, char *, int);
int	 auth_userokay(char *, char *, char *, char *);
int	 auth_approval(auth_session_t *, struct login_cap *, char *, char *);

int	 auth_close(auth_session_t *);
void	 auth_clean(auth_session_t *);

char	*auth_getvalue(auth_session_t *, char *);
int	 auth_getstate(auth_session_t *);
char	*auth_challenge(auth_session_t *);
void	 auth_setenv(auth_session_t *);
void	 auth_clrenv(auth_session_t *);

void	 auth_setstate(auth_session_t *, int);
int	 auth_call(auth_session_t *, char *, ...) 
	    __attribute__((__sentinel__));

int	 auth_setdata(auth_session_t *, void *, size_t);
int	 auth_setoption(auth_session_t *, char *, char *);
int	 auth_setpwd(auth_session_t *, struct passwd *);
void	 auth_set_va_list(auth_session_t *, __va_list);

struct passwd *auth_getpwd(auth_session_t *);

quad_t	 auth_check_expire(auth_session_t *);
quad_t	 auth_check_change(auth_session_t *);

void	 auth_clroptions(auth_session_t *);
void	 auth_clroption(auth_session_t *, char *);

char	*auth_mkvalue(char *);
void	 auth_checknologin(struct login_cap *);
int	 auth_cat(char *);

__END_DECLS

#endif /* _BSD_AUTH_H_ */
@


1.10
log
@Use internal '__' names for __attributes__ in public headers
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.9 2006/01/06 18:53:04 millert Exp $	*/
d88 1
a88 1
int	 auth_setpwd(auth_session_t *, struct passwd *pwd);
@


1.9
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.8 2002/08/30 08:50:01 espie Exp $	*/
d64 1
a64 1
		    __attribute__((sentinel));
d84 1
a84 1
	    __attribute__((sentinel));
@


1.8
log
@put sentinel back in. Thx miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.6 2002/06/05 19:27:50 espie Exp $	*/
d40 2
d89 1
a89 1
void	 auth_set_va_list(auth_session_t *, _BSD_VA_LIST_);
@


1.7
log
@Backout previous change. Since it requires people to upgrade gcc, we want
to give them a larger timeslot to do that.
Requested by deraadt@@ and various people on icb or vocally.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 3
a63 1
auth_session_t *auth_verify(auth_session_t *, char *, char *, ...);
d81 2
a82 1
int	 auth_call(auth_session_t *, char *, ...);
@


1.6
log
@Use attribute((sentinel)) on functions where it makes sense.
(this will warn if they are used without a terminating NULL pointer.
Note *pointer*, very useful for arches where 0 != (void *)0, in size)

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.5 2002/03/12 02:28:11 millert Exp $	*/
d61 1
a61 3
auth_session_t *auth_verify(auth_session_t *, char *, char *, ...)
		    __attribute__((sentinel));

d79 1
a79 2
int	 auth_call(auth_session_t *, char *, ...) 
	    __attribute__((sentinel));
@


1.5
log
@Make the function prototypes line up better and add stub struct
definitions to allow bsd_auth.h to be included before login_cap.h
or pwd.h.
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.4 2002/02/16 21:27:17 millert Exp $	*/
d61 3
a63 1
auth_session_t *auth_verify(auth_session_t *, char *, char *, ...);
d81 2
a82 1
int	 auth_call(auth_session_t *, char *, ...);
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: bsd_auth.h,v 1.3 2001/01/28 23:43:15 niklas Exp $	*/
d54 2
d57 2
a58 2
char *	auth_getitem(auth_session_t *, auth_item_t);
int	auth_setitem(auth_session_t *, auth_item_t, char *);
d65 32
a96 32
int	auth_userresponse(auth_session_t *, char *, int);
int	auth_userokay(char *, char *, char *, char *);
int	auth_approval(auth_session_t *, login_cap_t *, char *, char *);

int	auth_close(auth_session_t *);
void	auth_clean(auth_session_t *);

char *	auth_getvalue(auth_session_t *, char *);
int	auth_getstate(auth_session_t *);
char *	auth_challenge(auth_session_t *);
void	auth_setenv(auth_session_t *);
void	auth_clrenv(auth_session_t *);

void	auth_setstate(auth_session_t *, int);
int	auth_call(auth_session_t *, char *, ...);

int	auth_setdata(auth_session_t *, void *, size_t);
int	auth_setoption(auth_session_t *, char *, char *);
int	auth_setpwd(auth_session_t *, struct passwd *pwd);
void	auth_set_va_list(auth_session_t *, _BSD_VA_LIST_);

struct	passwd *auth_getpwd(auth_session_t *);

quad_t	auth_check_expire(auth_session_t *);
quad_t	auth_check_change(auth_session_t *);

void	auth_clroptions(auth_session_t *);
void	auth_clroption(auth_session_t *, char *);

char *	auth_mkvalue(char *);
void	auth_checknologin(login_cap_t *);
int	auth_cat(char *);
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
a56 2
char *	auth_getitem __P((auth_session_t *, auth_item_t));
int	auth_setitem __P((auth_session_t *, auth_item_t, char *));
d58 37
a94 37
auth_session_t *auth_open __P((void));
auth_session_t *auth_verify __P((auth_session_t *, char *, char *, ...));
auth_session_t *auth_userchallenge __P((char *, char *, char *, char **));
auth_session_t *auth_usercheck __P((char *, char *, char *, char *));

int	auth_userresponse __P((auth_session_t *, char *, int));
int	auth_userokay __P((char *, char *, char *, char *));
int	auth_approval __P((auth_session_t *, login_cap_t *, char *, char *));

int	auth_close __P((auth_session_t *));
void	auth_clean __P((auth_session_t *));

char *	auth_getvalue __P((auth_session_t *, char *));
int	auth_getstate __P((auth_session_t *));
char *	auth_challenge __P((auth_session_t *));
void	auth_setenv __P((auth_session_t *));
void	auth_clrenv __P((auth_session_t *));

void	auth_setstate __P((auth_session_t *, int));
int	auth_call __P((auth_session_t *, char *, ...));

int	auth_setdata __P((auth_session_t *, void *, size_t));
int	auth_setoption __P((auth_session_t *, char *, char *));
int	auth_setpwd __P((auth_session_t *, struct passwd *pwd));
void	auth_set_va_list __P((auth_session_t *, _BSD_VA_LIST_));

struct	passwd *auth_getpwd __P((auth_session_t *));

quad_t	auth_check_expire __P((auth_session_t *));
quad_t	auth_check_change __P((auth_session_t *));

void	auth_clroptions __P((auth_session_t *));
void	auth_clroption __P((auth_session_t *, char *));

char *	auth_mkvalue __P((char *));
void	auth_checknologin __P((login_cap_t *));
int	auth_cat __P((char *));
@


1.2
log
@Guard agaist multiple inclusion
Add missing __BEGIN_DECLS and use __P macro in function prototypes
@
text
@d1 2
@


1.1
log
@BSD authentication routines from BSDI.  Presently this is not used but
the login_* helper programs and other support will be committed in the
near future.
@
text
@d35 3
d50 10
a59 2
char *	auth_getitem(auth_session_t *, auth_item_t);
int	auth_setitem(auth_session_t *, auth_item_t, char *);
d61 3
a63 4
auth_session_t *auth_open();
auth_session_t *auth_verify(auth_session_t *, char *, char *, ...);
auth_session_t *auth_userchallenge(char *, char *, char *, char **);
auth_session_t *auth_usercheck(char *, char *, char *, char *);
d65 2
a66 3
int	auth_userresponse(auth_session_t *, char *, int);
int	auth_userokay(char *, char *, char *, char *);
int	auth_approval(auth_session_t *, login_cap_t *, char *, char *);
d68 5
a72 2
int	auth_close(auth_session_t *);
void	auth_clean(auth_session_t *);
d74 2
a75 5
char *	auth_getvalue(auth_session_t *, char *);
int	auth_getstate(auth_session_t *);
char *	auth_challenge(auth_session_t *);
void	auth_setenv(auth_session_t *);
void	auth_clrenv(auth_session_t *);
d77 4
a80 2
void	auth_setstate(auth_session_t *, int);
int	auth_call(auth_session_t *, char *, ...);
d82 1
a82 4
int	auth_setdata(auth_session_t *, void *, size_t);
int	auth_setoption(auth_session_t *, char *, char *);
int	auth_setpwd(auth_session_t *, struct passwd *pwd);
void	auth_set_va_list(auth_session_t *, _BSD_VA_LIST_);
d84 2
a85 1
struct	passwd *auth_getpwd(auth_session_t *);
d87 2
a88 2
quad_t	auth_check_expire(auth_session_t *);
quad_t	auth_check_change(auth_session_t *);
d90 3
a92 2
void	auth_clroptions(auth_session_t *);
void	auth_clroption(auth_session_t *, char *);
d94 1
d96 1
a96 3
char *	auth_mkvalue(char *);
void	auth_checknologin(login_cap_t *);
int	auth_cat(char *);
@

