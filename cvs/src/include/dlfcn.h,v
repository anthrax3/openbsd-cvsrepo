head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.18
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.14
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.10
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.22
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.20
	OPENBSD_5_0:1.11.0.18
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.16
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.14
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.10
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.12
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.8
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.6
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2013.03.24.01.37.21;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.01.00.21.19;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.29.04.47.17;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.05.15.21.21;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.11.19.14.56;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.02.15.14.54;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.25.19.16.12;	author marc;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.02.22.49.59;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.31.14.04.09;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.12.09.18.10.23;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.32;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@dlerror() should not return const char *, as noted by landry
ok guenther
@
text
@/*	$OpenBSD: dlfcn.h,v 1.12 2012/10/01 00:21:19 guenther Exp $	*/
/*	$NetBSD: dlfcn.h,v 1.2 1995/06/05 19:38:00 pk Exp $	*/

/*
 * Copyright (c) 1995 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _DLFCN_H_
#define _DLFCN_H_

#include <sys/cdefs.h>

/* Values for dlopen `mode'. */
#define RTLD_LAZY	1
#define RTLD_NOW	2
#define RTLD_GLOBAL	0x100
#define RTLD_LOCAL	0x000
#define RTLD_TRACE	0x200

/*
 * Special handle arguments for dlsym().
 */
#define	RTLD_NEXT	((void *) -1)	/* Search subsequent objects. */
#define	RTLD_DEFAULT	((void *) -2)	/* Use default search algorithm. */
#define	RTLD_SELF	((void *) -3)	/* Search the caller itself. */

#if __BSD_VISIBLE

/*
 * Structure filled in by dladdr().
 */
typedef	struct dl_info {
	const char	*dli_fname;	/* Pathname of shared object. */
	void		*dli_fbase;	/* Base address of shared object. */
	const char	*dli_sname;	/* Name of nearest symbol. */
	void		*dli_saddr;	/* Address of nearest symbol. */
} Dl_info;

/*
 * dlctl() commands
 */
#define DL_GETERRNO	1
#define DL_SETSRCHPATH	x
#define DL_GETLIST	x
#define DL_GETREFCNT	x
#define DL_GETLOADADDR	x
#define DL_SETTHREADLCK	2
#define DL_SETBINDLCK	3

#define	DL_LAZY		RTLD_LAZY	/* Compat */

#endif /* __BSD_VISIBLE */


/*
 * User interface to the run-time linker.
 */
__BEGIN_DECLS
void	*dlopen(const char *, int);
int	dlclose(void *);
void	*dlsym(void *__restrict, const char *__restrict);
char	*dlerror(void);

#if __BSD_VISIBLE
int	dladdr(const void *, Dl_info *);
int	dlctl(void *, int, void *);
#endif /* __BSD_VISIBLE */

__END_DECLS

#endif /* _DLFCN_H_ */
@


1.12
log
@More compliance fixes: hiding non-standard stuff behind __BSD_VISIBLE,
making files stand-alone, some __restrict additions.

tweaks kettenis@@; ports testing and fixes landry@@ and jasper@@
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.11 2007/05/29 04:47:17 jason Exp $	*/
d88 1
a88 1
const char	*dlerror(void);
@


1.11
log
@based on a diff from Matt Provost: allow printing of ldd information
on libraries themselves.  Works by setting up the debugging flags then
calling dlopen() to do the heavy lifting.  ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.10 2007/05/05 15:21:21 drahn Exp $	*/
a38 22
/*
 * Structure filled in by dladdr().
 */
typedef	struct dl_info {
	const char	*dli_fname;	/* Pathname of shared object. */
	void		*dli_fbase;	/* Base address of shared object. */
	const char	*dli_sname;	/* Name of nearest symbol. */
	void		*dli_saddr;	/* Address of nearest symbol. */
} Dl_info;

/*
 * User interface to the run-time linker.
 */
__BEGIN_DECLS
extern void	*dlopen(const char *, int);
extern int	dlclose(void *);
extern void	*dlsym(void *, const char *);
extern int	dlctl(void *, int, void *);
extern const char	*dlerror(void);
extern int	dladdr(const void *, Dl_info *);
__END_DECLS

a43 1
#define	DL_LAZY		RTLD_LAZY	/* Compat */
d53 12
d75 21
@


1.10
log
@Provide hook so that rthreads can provide a spinlock to protect from races
in lazy binding. ok art@@, kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.9 2004/08/11 19:14:56 drahn Exp $	*/
d67 1
@


1.9
log
@add dladdr() support and add some 'standard' dlsym() support.
ok millert miod pval, grumble deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.8 2003/09/02 15:14:54 drahn Exp $	*/
d84 1
@


1.8
log
@Add defines for missing RTLD_, eg RTLD_GLOBAL and RTLD_LOCAL,
values for RTLD_GLOBAL and RTLD_LOCAL are same as solaris uses.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.7 2003/04/25 19:16:12 marc Exp $	*/
d40 10
d58 1
d67 7
@


1.7
log
@Add DL_SETTHREADLCK.   "pretty obviously safe i think" teddu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.6 2002/06/02 22:49:59 deraadt Exp $	*/
d51 5
a55 2
#define DL_LAZY		1
#define RTLD_LAZY	DL_LAZY		/* SunOS Compat */
@


1.6
log
@withough -> without
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.5 2002/02/16 21:27:17 millert Exp $	*/
d62 1
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.4 2001/05/31 14:04:09 art Exp $	*/
d20 1
a20 1
 *    derived from this software withough specific prior written permission
@


1.4
log
@correct prototype for dlerror.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.3 1999/12/09 18:10:23 espie Exp $	*/
d43 5
a47 5
extern void	*dlopen __P((const char *, int));
extern int	dlclose __P((void *));
extern void	*dlsym __P((void *, const char *));
extern int	dlctl __P((void *, int, void *));
extern const char	*dlerror __P((void));
@


1.3
log
@dlopen and dlsym take const char * parameters.
Fix prototypes, propagate const where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.2 1997/09/21 10:45:32 niklas Exp $	*/
d47 1
a47 1
extern char	*dlerror __P((void));
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: dlfcn.h,v 1.2 1995/06/05 19:38:00 pk Exp $	*/
d43 1
a43 1
extern void	*dlopen __P((char *, int));
d45 1
a45 1
extern void	*dlsym __P((void *, char *));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
