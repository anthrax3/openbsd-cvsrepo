head	1.104;
access;
symbols
	OPENBSD_6_1:1.104.0.2
	OPENBSD_6_1_BASE:1.104
	OPENBSD_6_0:1.101.0.2
	OPENBSD_6_0_BASE:1.101
	OPENBSD_5_9:1.100.0.2
	OPENBSD_5_9_BASE:1.100
	OPENBSD_5_8:1.97.0.6
	OPENBSD_5_8_BASE:1.97
	OPENBSD_5_7:1.97.0.2
	OPENBSD_5_7_BASE:1.97
	OPENBSD_5_6:1.89.0.4
	OPENBSD_5_6_BASE:1.89
	OPENBSD_5_5:1.83.0.4
	OPENBSD_5_5_BASE:1.83
	OPENBSD_5_4:1.79.0.2
	OPENBSD_5_4_BASE:1.79
	OPENBSD_5_3:1.74.0.2
	OPENBSD_5_3_BASE:1.74
	OPENBSD_5_2:1.73.0.2
	OPENBSD_5_2_BASE:1.73
	OPENBSD_5_1_BASE:1.67
	OPENBSD_5_1:1.67.0.2
	OPENBSD_5_0:1.65.0.2
	OPENBSD_5_0_BASE:1.65
	OPENBSD_4_9:1.62.0.12
	OPENBSD_4_9_BASE:1.62
	OPENBSD_4_8:1.62.0.10
	OPENBSD_4_8_BASE:1.62
	OPENBSD_4_7:1.62.0.6
	OPENBSD_4_7_BASE:1.62
	OPENBSD_4_6:1.62.0.8
	OPENBSD_4_6_BASE:1.62
	OPENBSD_4_5:1.62.0.4
	OPENBSD_4_5_BASE:1.62
	OPENBSD_4_4:1.62.0.2
	OPENBSD_4_4_BASE:1.62
	OPENBSD_4_3:1.59.0.6
	OPENBSD_4_3_BASE:1.59
	OPENBSD_4_2:1.59.0.4
	OPENBSD_4_2_BASE:1.59
	OPENBSD_4_1:1.59.0.2
	OPENBSD_4_1_BASE:1.59
	OPENBSD_4_0:1.58.0.2
	OPENBSD_4_0_BASE:1.58
	OPENBSD_3_9:1.57.0.2
	OPENBSD_3_9_BASE:1.57
	OPENBSD_3_8:1.53.0.2
	OPENBSD_3_8_BASE:1.53
	OPENBSD_3_7:1.52.0.6
	OPENBSD_3_7_BASE:1.52
	OPENBSD_3_6:1.52.0.4
	OPENBSD_3_6_BASE:1.52
	OPENBSD_3_5:1.52.0.2
	OPENBSD_3_5_BASE:1.52
	OPENBSD_3_4:1.51.0.2
	OPENBSD_3_4_BASE:1.51
	OPENBSD_3_3:1.45.0.2
	OPENBSD_3_3_BASE:1.45
	OPENBSD_3_2:1.42.0.2
	OPENBSD_3_2_BASE:1.42
	OPENBSD_3_1:1.37.0.2
	OPENBSD_3_1_BASE:1.37
	OPENBSD_3_0:1.35.0.2
	OPENBSD_3_0_BASE:1.35
	OPENBSD_2_9:1.34.0.2
	OPENBSD_2_9_BASE:1.34
	OPENBSD_2_8:1.33.0.2
	OPENBSD_2_8_BASE:1.33
	OPENBSD_2_7:1.31.0.2
	OPENBSD_2_7_BASE:1.31
	OPENBSD_2_6:1.27.0.2
	OPENBSD_2_6_BASE:1.27
	OPENBSD_2_5:1.24.0.2
	OPENBSD_2_5_BASE:1.24
	OPENBSD_2_4:1.22.0.2
	OPENBSD_2_4_BASE:1.22
	OPENBSD_2_3:1.19.0.2
	OPENBSD_2_3_BASE:1.19
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.12.0.2
	OPENBSD_2_1_BASE:1.12
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.104
date	2017.03.09.10.13.03;	author fcambus;	state Exp;
branches;
next	1.103;
commitid	OBRyBosIbFCvAKYB;

1.103
date	2016.09.12.19.36.26;	author guenther;	state Exp;
branches;
next	1.102;
commitid	tBMJ0DH2mGez8vcV;

1.102
date	2016.09.09.18.12.37;	author millert;	state Exp;
branches;
next	1.101;
commitid	mBDdb9HYWgUfDo7E;

1.101
date	2016.05.23.00.12.58;	author guenther;	state Exp;
branches;
next	1.100;
commitid	kOxgTCFrqjs080tn;

1.100
date	2015.10.09.01.26.40;	author deraadt;	state Exp;
branches;
next	1.99;
commitid	vU1HBybi5LLQYG32;

1.99
date	2015.09.09.17.56.59;	author deraadt;	state Exp;
branches;
next	1.98;
commitid	LR11yk102SoyZdKV;

1.98
date	2015.08.26.01.54.08;	author guenther;	state Exp;
branches;
next	1.97;
commitid	ZWoe9OaBBikaM1w5;

1.97
date	2014.12.13.20.42.41;	author tedu;	state Exp;
branches;
next	1.96;
commitid	wYYmoAHM5gCgkrDj;

1.96
date	2014.12.11.23.05.38;	author tedu;	state Exp;
branches;
next	1.95;
commitid	4ugFhBBgiNmXpICn;

1.95
date	2014.12.08.20.39.56;	author tedu;	state Exp;
branches;
next	1.94;
commitid	ZjPqKptKictwXXmf;

1.94
date	2014.11.21.05.13.44;	author tedu;	state Exp;
branches;
next	1.93;
commitid	H7AJhZvkXj2g8HJk;

1.93
date	2014.09.18.04.37.56;	author guenther;	state Exp;
branches;
next	1.92;
commitid	1KlJ1Pfztwy6FSNh;

1.92
date	2014.09.01.05.09.52;	author doug;	state Exp;
branches;
next	1.91;
commitid	XQe4V1YtkyCx6uWd;

1.91
date	2014.08.31.04.02.08;	author guenther;	state Exp;
branches;
next	1.90;
commitid	cqt0oliIc4YJXCZZ;

1.90
date	2014.08.31.01.42.36;	author guenther;	state Exp;
branches;
next	1.89;
commitid	zF5A8BuuSSyqaDyM;

1.89
date	2014.07.08.21.35.39;	author tedu;	state Exp;
branches;
next	1.88;
commitid	6YcC7Mr2D269XoH9;

1.88
date	2014.06.14.18.01.41;	author deraadt;	state Exp;
branches;
next	1.87;
commitid	mGZAeMJ1mGoco6ZP;

1.87
date	2014.06.13.08.26.10;	author deraadt;	state Exp;
branches;
next	1.86;
commitid	CpYJ4dq5gv2iN1W3;

1.86
date	2014.05.16.21.28.15;	author tedu;	state Exp;
branches;
next	1.85;

1.85
date	2014.04.21.11.28.26;	author guenther;	state Exp;
branches;
next	1.84;

1.84
date	2014.04.01.05.04.50;	author matthew;	state Exp;
branches;
next	1.83;

1.83
date	2013.12.28.01.51.53;	author martynas;	state Exp;
branches;
next	1.82;

1.82
date	2013.12.04.22.58.24;	author deraadt;	state Exp;
branches;
next	1.81;

1.81
date	2013.11.22.21.32.49;	author millert;	state Exp;
branches;
next	1.80;

1.80
date	2013.10.24.07.34.56;	author guenther;	state Exp;
branches;
next	1.79;

1.79
date	2013.06.17.19.11.54;	author guenther;	state Exp;
branches;
next	1.78;

1.78
date	2013.06.04.23.01.07;	author brad;	state Exp;
branches;
next	1.77;

1.77
date	2013.04.15.16.38.21;	author matthew;	state Exp;
branches;
next	1.76;

1.76
date	2013.04.11.03.09.16;	author guenther;	state Exp;
branches;
next	1.75;

1.75
date	2013.03.01.21.19.41;	author guenther;	state Exp;
branches;
next	1.74;

1.74
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.73;

1.73
date	2012.06.21.00.56.59;	author guenther;	state Exp;
branches;
next	1.72;

1.72
date	2012.05.30.19.34.30;	author matthew;	state Exp;
branches;
next	1.71;

1.71
date	2012.05.14.23.21.35;	author matthew;	state Exp;
branches;
next	1.70;

1.70
date	2012.04.12.12.33.03;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2012.04.12.11.19.34;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	2012.03.21.23.20.35;	author matthew;	state Exp;
branches;
next	1.67;

1.67
date	2012.01.13.13.16.44;	author nigel;	state Exp;
branches;
next	1.66;

1.66
date	2011.11.09.15.34.18;	author fgsch;	state Exp;
branches;
next	1.65;

1.65
date	2011.07.18.17.29.49;	author matthew;	state Exp;
branches;
next	1.64;

1.64
date	2011.07.03.18.51.01;	author jsg;	state Exp;
branches;
next	1.63;

1.63
date	2011.04.06.11.39.42;	author miod;	state Exp;
branches;
next	1.62;

1.62
date	2008.06.25.14.58.54;	author millert;	state Exp;
branches;
next	1.61;

1.61
date	2008.04.29.14.52.54;	author kurt;	state Exp;
branches;
next	1.60;

1.60
date	2008.04.24.20.43.20;	author kurt;	state Exp;
branches;
next	1.59;

1.59
date	2006.12.20.08.12.00;	author espie;	state Exp;
branches;
next	1.58;

1.58
date	2006.08.28.15.47.28;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2005.11.24.02.09.13;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2005.11.21.18.16.36;	author millert;	state Exp;
branches;
next	1.54;

1.54
date	2005.11.20.02.24.59;	author millert;	state Exp;
branches;
next	1.53;

1.53
date	2005.05.27.17.45.56;	author millert;	state Exp;
branches;
next	1.52;

1.52
date	2004.01.13.18.10.53;	author millert;	state Exp;
branches;
next	1.51;

1.51
date	2003.08.07.01.16.11;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.49;

1.49
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.48;

1.48
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.47;

1.47
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	2003.05.10.17.51.39;	author miod;	state Exp;
branches;
next	1.45;

1.45
date	2002.12.03.20.24.29;	author millert;	state Exp;
branches;
next	1.44;

1.44
date	2002.10.30.20.15.29;	author millert;	state Exp;
branches;
next	1.43;

1.43
date	2002.10.25.21.55.28;	author millert;	state Exp;
branches;
next	1.42;

1.42
date	2002.09.17.21.15.58;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2002.09.17.12.57.50;	author mickey;	state Exp;
branches;
next	1.40;

1.40
date	2002.08.30.08.24.55;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2002.06.07.03.11.31;	author miod;	state Exp;
branches;
next	1.38;

1.38
date	2002.06.05.19.27.50;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.36;

1.36
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	2001.08.07.21.34.42;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2000.12.06.17.18.43;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2000.09.12.17.30.45;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2000.07.19.19.26.04;	author mickey;	state Exp;
branches;
next	1.31;

1.31
date	2000.04.20.06.34.18;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2000.02.19.13.21.25;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2000.01.27.05.18.47;	author itojun;	state Exp;
branches;
next	1.28;

1.28
date	99.12.16.21.30.34;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	99.09.17.13.13.46;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	99.06.11.22.47.47;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	99.05.22.23.49.48;	author weingart;	state Exp;
branches;
next	1.24;

1.24
date	98.11.20.11.18.26;	author d;	state Exp;
branches;
next	1.23;

1.23
date	98.11.19.06.44.07;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	98.06.30.23.03.09;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	98.05.13.08.50.52;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	98.04.25.07.14.50;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	98.02.16.09.46.03;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	98.02.10.02.44.38;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	98.02.10.02.19.47;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	97.12.27.12.03.44;	author tholo;	state Exp;
branches;
next	1.15;

1.15
date	97.12.22.10.13.50;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.11.16.01.01.24;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	97.06.20.04.10.20;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	97.01.26.05.11.16;	author downsj;	state Exp;
branches;
next	1.11;

1.11
date	96.12.13.17.06.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.12.12.23.42.22;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.12.09.13.50.04;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	96.08.25.20.02.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.08.22.20.36.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.06.10.06.31.34;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.03.25.21.33.17;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.03.22.07.38.15;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.01.12.14.45.42;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.06.53.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.104
log
@As per style.9, prototypes should not have variable names associated
with the types.

OK jca@@
@
text
@/*	$OpenBSD: unistd.h,v 1.103 2016/09/12 19:36:26 guenther Exp $ */
/*	$NetBSD: unistd.h,v 1.26.4.1 1996/05/28 02:31:51 mrg Exp $	*/

/*-
 * Copyright (c) 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)unistd.h	5.13 (Berkeley) 6/17/91
 */

#ifndef _UNISTD_H_
#define	_UNISTD_H_

#include <sys/_null.h>
#include <sys/types.h>
#include <sys/unistd.h>

#define	STDIN_FILENO	0	/* standard input file descriptor */
#define	STDOUT_FILENO	1	/* standard output file descriptor */
#define	STDERR_FILENO	2	/* standard error file descriptor */

#if __XPG_VISIBLE || __POSIX_VISIBLE >= 200112
#define F_ULOCK         0	/* unlock locked section */
#define F_LOCK          1	/* lock a section for exclusive use */
#define F_TLOCK         2	/* test and lock a section for exclusive use */
#define F_TEST          3	/* test a section for locks by other procs */
#endif

/*
 * POSIX options and option groups we unconditionally do or don't
 * implement.  Please keep this list in alphabetical order.
 *
 * Anything which is defined as zero below **must** have an
 * implementation for the corresponding sysconf() which is able to
 * determine conclusively whether or not the feature is supported.
 * Anything which is defined as other than -1 below **must** have
 * complete headers, types, and function declarations as specified by
 * the POSIX standard; however, if the relevant sysconf() function
 * returns -1, the functions may be stubbed out.
 */
#define _POSIX_ADVISORY_INFO			(-1)
#define _POSIX_ASYNCHRONOUS_IO			(-1)
#define _POSIX_BARRIERS				200112L
#define _POSIX_CHOWN_RESTRICTED			1
#define _POSIX_CLOCK_SELECTION			(-1)
#define _POSIX_CPUTIME				200809L
#define _POSIX_FSYNC				200112L
#define _POSIX_IPV6				0
#define _POSIX_JOB_CONTROL			1
#define _POSIX_MAPPED_FILES			200112L
#define _POSIX_MEMLOCK				200112L
#define _POSIX_MEMLOCK_RANGE			200112L
#define _POSIX_MEMORY_PROTECTION		200112L
#define _POSIX_MESSAGE_PASSING			(-1)
#define _POSIX_MONOTONIC_CLOCK			200112L
#define _POSIX_NO_TRUNC				1
#define _POSIX_PRIORITIZED_IO			(-1)
#define _POSIX_PRIORITY_SCHEDULING		(-1)
#define _POSIX_RAW_SOCKETS			200112L
#define _POSIX_READER_WRITER_LOCKS		200112L
#define _POSIX_REALTIME_SIGNALS			(-1)
#define _POSIX_REGEXP				1
#define _POSIX_SAVED_IDS			1
#define _POSIX_SEMAPHORES			200112L
#define _POSIX_SHARED_MEMORY_OBJECTS		200809L
#define _POSIX_SHELL				1
#define _POSIX_SPAWN				200112L
#define _POSIX_SPIN_LOCKS			200112L
#define _POSIX_SPORADIC_SERVER			(-1)
#define _POSIX_SYNCHRONIZED_IO			(-1)
#define _POSIX_THREAD_ATTR_STACKADDR		200112L
#define _POSIX_THREAD_ATTR_STACKSIZE		200112L
#define _POSIX_THREAD_CPUTIME			200809L
#define _POSIX_THREAD_PRIO_INHERIT		(-1)
#define _POSIX_THREAD_PRIO_PROTECT		(-1)
#define _POSIX_THREAD_PRIORITY_SCHEDULING	(-1)
#define _POSIX_THREAD_PROCESS_SHARED		(-1)
#define _POSIX_THREAD_ROBUST_PRIO_INHERIT	(-1)
#define _POSIX_THREAD_ROBUST_PRIO_PROTECT	(-1)
#define _POSIX_THREAD_SAFE_FUNCTIONS		200112L
#define _POSIX_THREAD_SPORADIC_SERVER		(-1)
#define _POSIX_THREADS				200112L
#define _POSIX_TIMEOUTS				200112L
#define _POSIX_TIMERS				(-1)
#define _POSIX_TRACE				(-1)
#define _POSIX_TRACE_EVENT_FILTER		(-1)
#define _POSIX_TRACE_INHERIT			(-1)
#define _POSIX_TRACE_LOG			(-1)
#define _POSIX_TYPED_MEMORY_OBJECTS		(-1)
#define _POSIX2_C_BIND				200112L
#define _POSIX2_C_DEV				(-1) /* need C99 utility */
#define _POSIX2_CHAR_TERM			1
#define _POSIX2_FORT_DEV			(-1) /* need fort77 utility */
#define _POSIX2_FORT_RUN			(-1) /* need asa utility */
#define _POSIX2_LOCALEDEF			(-1)
#define _POSIX2_PBS				(-1)
#define _POSIX2_PBS_ACCOUNTING			(-1)
#define _POSIX2_PBS_CHECKPOINT			(-1)
#define _POSIX2_PBS_LOCATE			(-1)
#define _POSIX2_PBS_MESSAGE			(-1)
#define _POSIX2_PBS_TRACK			(-1)
#define _POSIX2_SW_DEV				200112L
#define _POSIX2_UPE				200112L
#define _POSIX_V6_ILP32_OFF32			(-1)
#define _POSIX_V6_ILP32_OFFBIG			0
#define _POSIX_V6_LP64_OFF64			0
#define _POSIX_V6_LPBIG_OFFBIG			0
#define _POSIX_V7_ILP32_OFF32			(-1)
#define _POSIX_V7_ILP32_OFFBIG			0
#define _POSIX_V7_LP64_OFF64			0
#define _POSIX_V7_LPBIG_OFFBIG			0

#define _XOPEN_CRYPT				1
#define _XOPEN_ENH_I18N				(-1) /* mandatory in XSI */
#define _XOPEN_LEGACY				(-1)
#define _XOPEN_REALTIME				(-1)
#define _XOPEN_REALTIME_THREADS			(-1)
#define _XOPEN_SHM				1
#define _XOPEN_STREAMS				(-1)
#define _XOPEN_UUCP				(-1)
#define _XOPEN_UNIX				(-1)

/* Define the POSIX.2 version we target for compliance. */
#define _POSIX2_VERSION				200809L

/* the sysconf(3) variable values are part of the ABI */

/* configurable system variables */
#define	_SC_ARG_MAX		 1
#define	_SC_CHILD_MAX		 2
#define	_SC_CLK_TCK		 3
#define	_SC_NGROUPS_MAX		 4
#define	_SC_OPEN_MAX		 5
#define	_SC_JOB_CONTROL		 6
#define	_SC_SAVED_IDS		 7
#define	_SC_VERSION		 8
#define	_SC_BC_BASE_MAX		 9
#define	_SC_BC_DIM_MAX		10
#define	_SC_BC_SCALE_MAX	11
#define	_SC_BC_STRING_MAX	12
#define	_SC_COLL_WEIGHTS_MAX	13
#define	_SC_EXPR_NEST_MAX	14
#define	_SC_LINE_MAX		15
#define	_SC_RE_DUP_MAX		16
#define	_SC_2_VERSION		17
#define	_SC_2_C_BIND		18
#define	_SC_2_C_DEV		19
#define	_SC_2_CHAR_TERM		20
#define	_SC_2_FORT_DEV		21
#define	_SC_2_FORT_RUN		22
#define	_SC_2_LOCALEDEF		23
#define	_SC_2_SW_DEV		24
#define	_SC_2_UPE		25
#define	_SC_STREAM_MAX		26
#define	_SC_TZNAME_MAX		27
#define	_SC_PAGESIZE		28
#define	_SC_PAGE_SIZE		_SC_PAGESIZE	/* 1170 compatibility */
#define	_SC_FSYNC		29
#define	_SC_XOPEN_SHM		30
#define	_SC_SEM_NSEMS_MAX	31
#define	_SC_SEM_VALUE_MAX	32
#define	_SC_HOST_NAME_MAX	33
#define	_SC_MONOTONIC_CLOCK	34
#define	_SC_2_PBS		35
#define	_SC_2_PBS_ACCOUNTING	36
#define	_SC_2_PBS_CHECKPOINT	37
#define	_SC_2_PBS_LOCATE	38
#define	_SC_2_PBS_MESSAGE	39
#define	_SC_2_PBS_TRACK		40
#define	_SC_ADVISORY_INFO	41
#define	_SC_AIO_LISTIO_MAX	42
#define	_SC_AIO_MAX		43
#define	_SC_AIO_PRIO_DELTA_MAX	44
#define	_SC_ASYNCHRONOUS_IO	45
#define	_SC_ATEXIT_MAX		46
#define	_SC_BARRIERS		47
#define	_SC_CLOCK_SELECTION	48
#define	_SC_CPUTIME		49
#define	_SC_DELAYTIMER_MAX	50
#define	_SC_IOV_MAX		51
#define	_SC_IPV6		52
#define	_SC_MAPPED_FILES	53
#define	_SC_MEMLOCK		54
#define	_SC_MEMLOCK_RANGE	55
#define	_SC_MEMORY_PROTECTION	56
#define	_SC_MESSAGE_PASSING	57
#define	_SC_MQ_OPEN_MAX		58
#define	_SC_MQ_PRIO_MAX		59
#define	_SC_PRIORITIZED_IO	60
#define	_SC_PRIORITY_SCHEDULING	61
#define	_SC_RAW_SOCKETS		62
#define	_SC_READER_WRITER_LOCKS	63
#define	_SC_REALTIME_SIGNALS	64
#define	_SC_REGEXP		65
#define	_SC_RTSIG_MAX		66
#define	_SC_SEMAPHORES		67
#define	_SC_SHARED_MEMORY_OBJECTS 68
#define	_SC_SHELL		69
#define	_SC_SIGQUEUE_MAX	70
#define	_SC_SPAWN		71
#define	_SC_SPIN_LOCKS		72
#define	_SC_SPORADIC_SERVER	73
#define	_SC_SS_REPL_MAX		74
#define	_SC_SYNCHRONIZED_IO	75
#define	_SC_SYMLOOP_MAX		76
#define	_SC_THREAD_ATTR_STACKADDR 77
#define	_SC_THREAD_ATTR_STACKSIZE 78
#define	_SC_THREAD_CPUTIME	79
#define	_SC_THREAD_DESTRUCTOR_ITERATIONS 80
#define	_SC_THREAD_KEYS_MAX	81
#define	_SC_THREAD_PRIO_INHERIT	82
#define	_SC_THREAD_PRIO_PROTECT	83
#define	_SC_THREAD_PRIORITY_SCHEDULING 84
#define	_SC_THREAD_PROCESS_SHARED 85
#define	_SC_THREAD_ROBUST_PRIO_INHERIT 86
#define	_SC_THREAD_ROBUST_PRIO_PROTECT 87
#define	_SC_THREAD_SPORADIC_SERVER 88
#define	_SC_THREAD_STACK_MIN	89
#define	_SC_THREAD_THREADS_MAX	90
#define	_SC_THREADS		91
#define	_SC_TIMEOUTS		92
#define	_SC_TIMER_MAX		93
#define	_SC_TIMERS		94
#define	_SC_TRACE		95
#define	_SC_TRACE_EVENT_FILTER	96
#define	_SC_TRACE_EVENT_NAME_MAX 97
#define	_SC_TRACE_INHERIT	98
#define	_SC_TRACE_LOG		99
#define	_SC_GETGR_R_SIZE_MAX	100
#define	_SC_GETPW_R_SIZE_MAX	101
#define	_SC_LOGIN_NAME_MAX	102
#define	_SC_THREAD_SAFE_FUNCTIONS 103
#define	_SC_TRACE_NAME_MAX      104
#define	_SC_TRACE_SYS_MAX       105
#define	_SC_TRACE_USER_EVENT_MAX 106
#define	_SC_TTY_NAME_MAX	107
#define	_SC_TYPED_MEMORY_OBJECTS 108
#define	_SC_V6_ILP32_OFF32	109
#define	_SC_V6_ILP32_OFFBIG	110
#define	_SC_V6_LP64_OFF64	111
#define	_SC_V6_LPBIG_OFFBIG	112
#define	_SC_V7_ILP32_OFF32	113
#define	_SC_V7_ILP32_OFFBIG	114
#define	_SC_V7_LP64_OFF64	115
#define	_SC_V7_LPBIG_OFFBIG	116
#define	_SC_XOPEN_CRYPT		117
#define	_SC_XOPEN_ENH_I18N	118
#define	_SC_XOPEN_LEGACY	119
#define	_SC_XOPEN_REALTIME	120
#define	_SC_XOPEN_REALTIME_THREADS 121
#define	_SC_XOPEN_STREAMS	122
#define	_SC_XOPEN_UNIX		123
#define	_SC_XOPEN_UUCP		124
#define	_SC_XOPEN_VERSION	125

#define	_SC_PHYS_PAGES		500
#define	_SC_AVPHYS_PAGES	501
#define	_SC_NPROCESSORS_CONF	502
#define	_SC_NPROCESSORS_ONLN	503

/* configurable system strings */
#define	_CS_PATH				 1
#define	_CS_POSIX_V6_ILP32_OFF32_CFLAGS		 2
#define	_CS_POSIX_V6_ILP32_OFF32_LDFLAGS	 3
#define	_CS_POSIX_V6_ILP32_OFF32_LIBS		 4
#define	_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS	 5
#define	_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS	 6
#define	_CS_POSIX_V6_ILP32_OFFBIG_LIBS		 7
#define	_CS_POSIX_V6_LP64_OFF64_CFLAGS		 8
#define	_CS_POSIX_V6_LP64_OFF64_LDFLAGS		 9
#define	_CS_POSIX_V6_LP64_OFF64_LIBS		10
#define	_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS	11
#define	_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS	12
#define	_CS_POSIX_V6_LPBIG_OFFBIG_LIBS		13
#define	_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS	14
#define	_CS_V6_ENV				15
#define	_CS_POSIX_V7_ILP32_OFF32_CFLAGS		16
#define	_CS_POSIX_V7_ILP32_OFF32_LDFLAGS	17
#define	_CS_POSIX_V7_ILP32_OFF32_LIBS		18
#define	_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS	19
#define	_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS	20
#define	_CS_POSIX_V7_ILP32_OFFBIG_LIBS		21
#define	_CS_POSIX_V7_LP64_OFF64_CFLAGS		22
#define	_CS_POSIX_V7_LP64_OFF64_LDFLAGS		23
#define	_CS_POSIX_V7_LP64_OFF64_LIBS		24
#define	_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS	25
#define	_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS	26
#define	_CS_POSIX_V7_LPBIG_OFFBIG_LIBS		27
#define	_CS_POSIX_V7_THREADS_CFLAGS		28
#define	_CS_POSIX_V7_THREADS_LDFLAGS		29
#define	_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS	30
#define	_CS_V7_ENV				31

#ifndef	_INTPTR_T_DEFINED_
#define	_INTPTR_T_DEFINED_
typedef	__intptr_t		intptr_t;
#endif

__BEGIN_DECLS
__dead void	 _exit(int);
int	 access(const char *, int);
unsigned int alarm(unsigned int);
int	 chdir(const char *);
int	 chown(const char *, uid_t, gid_t);
int	 close(int);
int	 dup(int);
int	 dup2(int, int);
int	 execl(const char *, const char *, ...) 
	    __attribute__((__sentinel__));
int	 execle(const char *, const char *, ...);
int	 execlp(const char *, const char *, ...) 
	    __attribute__((__sentinel__));
int	 execv(const char *, char *const *);
int	 execve(const char *, char *const *, char *const *);
int	 execvp(const char *, char *const *);
#if __BSD_VISIBLE
int	 execvpe(const char *, char *const *, char *const *);
#endif
pid_t	 fork(void);
long	 fpathconf(int, int);
char	*getcwd(char *, size_t)
		__attribute__((__bounded__(__string__,1,2)));
gid_t	 getegid(void);
uid_t	 geteuid(void);
gid_t	 getgid(void);
int	 getgroups(int, gid_t *);
char	*getlogin(void);
pid_t	 getpgrp(void);
pid_t	 getpid(void);
pid_t	 getppid(void);
uid_t	 getuid(void);
int	 isatty(int);
int	 link(const char *, const char *);
off_t	 lseek(int, off_t, int);
long	 pathconf(const char *, int);
int	 pause(void);
int	 pipe(int *);
ssize_t	 read(int, void *, size_t)
		__attribute__((__bounded__(__buffer__,2,3)));
int	 rmdir(const char *);
int	 setgid(gid_t);
int	 setuid(uid_t);
unsigned int sleep(unsigned int);
long	 sysconf(int);
pid_t	 tcgetpgrp(int);
int	 tcsetpgrp(int, pid_t);
char	*ttyname(int);
int	 unlink(const char *);
ssize_t	 write(int, const void *, size_t)
		__attribute__((__bounded__(__buffer__,2,3)));

#if __POSIX_VISIBLE || __XPG_VISIBLE >= 300
pid_t	 setsid(void);
int	 setpgid(pid_t, pid_t);
#endif

#if __POSIX_VISIBLE >= 199209 || __XPG_VISIBLE
size_t	 confstr(int, char *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
#ifndef _GETOPT_DEFINED_
#define _GETOPT_DEFINED_
int	 getopt(int, char * const *, const char *);
extern	 char *optarg;			/* getopt(3) external variables */
extern	 int opterr, optind, optopt, optreset;
#endif /* _GETOPT_DEFINED_ */
#endif

#if __POSIX_VISIBLE >= 199506 || __XPG_VISIBLE
int	 fsync(int);
int	 ftruncate(int, off_t);
int	 getlogin_r(char *, size_t)
		__attribute__((__bounded__(__string__,1,2)));
ssize_t	 readlink(const char * __restrict, char * __restrict, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
#endif
#if __POSIX_VISIBLE >= 199506
int	 fdatasync(int);
#endif

#if __XPG_VISIBLE || __BSD_VISIBLE
char	*crypt(const char *, const char *);
int	 fchdir(int);
int	 fchown(int, uid_t, gid_t);
long	 gethostid(void);
char	*getwd(char *)
		__attribute__ ((__bounded__(__minbytes__,1,1024)));
int	 lchown(const char *, uid_t, gid_t);
int	 mkstemp(char *);
char	*mktemp(char *);
int	 nice(int);
int	 setregid(gid_t, gid_t);
int	 setreuid(uid_t, uid_t);
void	 swab(const void *__restrict, void *__restrict, ssize_t);
void	 sync(void);
int	 truncate(const char *, off_t);
useconds_t	 ualarm(useconds_t, useconds_t);
int	 usleep(useconds_t);
pid_t	 vfork(void);
#endif

#if __POSIX_VISIBLE >= 200809 || __XPG_VISIBLE >= 420
pid_t	 getpgid(pid_t);
pid_t	 getsid(pid_t);
#endif

#if __XPG_VISIBLE >= 500
ssize_t  pread(int, void *, size_t, off_t)
		__attribute__((__bounded__(__buffer__,2,3)));
ssize_t  pwrite(int, const void *, size_t, off_t)
		__attribute__((__bounded__(__buffer__,2,3)));
int	 ttyname_r(int, char *, size_t)
	    __attribute__((__bounded__(__string__,2,3)));
#endif

#if __BSD_VISIBLE ||  __XPG_VISIBLE <= 500
/* Interfaces withdrawn by X/Open Issue 5 Version 0 */
int	 brk(void *);
int	 chroot(const char *);
int	 getdtablesize(void);
int	 getpagesize(void);
char	*getpass(const char *);
void	*sbrk(int);
#endif

#if __POSIX_VISIBLE >= 200112 || __XPG_VISIBLE >= 420
int     lockf(int, int, off_t);
#endif

#if __POSIX_VISIBLE >= 200112 || __XPG_VISIBLE >= 420 || __BSD_VISIBLE
int	 symlink(const char *, const char *);
int	 gethostname(char *, size_t)
		__attribute__ ((__bounded__(__string__,1,2)));
int	 setegid(gid_t);
int	 seteuid(uid_t);
#endif

#if __POSIX_VISIBLE >= 200809
int	faccessat(int, const char *, int, int);
int	fchownat(int, const char *, uid_t, gid_t, int);
int	linkat(int, const char *, int, const char *, int);
ssize_t	readlinkat(int, const char *, char *, size_t)
		__attribute__ ((__bounded__(__string__,3,4)));
int	symlinkat(const char *, int, const char *);
int	unlinkat(int, const char *, int);
#endif

#if __BSD_VISIBLE
int	dup3(int, int, int);
int	pipe2(int [2], int);
#endif

#if __BSD_VISIBLE
int	 acct(const char *);
int	 closefrom(int);
int	 crypt_checkpass(const char *, const char *);
int	 crypt_newhash(const char *, const char *, char *, size_t);
void	 endusershell(void);
char	*fflagstostr(u_int32_t);
int	 getdomainname(char *, size_t)
		__attribute__ ((__bounded__(__string__,1,2)));
int	 getdtablecount(void);
int	 getgrouplist(const char *, gid_t, gid_t *, int *);
mode_t	 getmode(const void *, mode_t);
int	 getresgid(gid_t *, gid_t *, gid_t *);
int	 getresuid(uid_t *, uid_t *, uid_t *);
pid_t	 getthrid(void);
char	*getusershell(void);
int	 initgroups(const char *, gid_t);
int	 issetugid(void);
char	*mkdtemp(char *);
int	 mkstemps(char *, int);
int	 nfssvc(int, void *);
int	 profil(char *, size_t, unsigned long, unsigned int)
		__attribute__ ((__bounded__(__string__,1,2)));
int	 quotactl(const char *, int, int, char *);
int	 rcmd(char **, int, const char *,
	    const char *, const char *, int *);
int	 rcmd_af(char **, int, const char *,
	    const char *, const char *, int *, int);
int	 rcmdsh(char **, int, const char *,
	    const char *, const char *, char *);
int	 reboot(int);
int	 revoke(const char *);
int	 rresvport(int *);
int	 rresvport_af(int *, int);
int	 ruserok(const char *, int, const char *, const char *);
int	 setdomainname(const char *, size_t);
int	 setgroups(int, const gid_t *);
int	 sethostid(long);
int	 sethostname(const char *, size_t);
int	 setlogin(const char *);
void	*setmode(const char *);
int	 setpgrp(pid_t _pid, pid_t _pgrp);	/* BSD compat version */
int	 setresgid(gid_t, gid_t, gid_t);
int	 setresuid(uid_t, uid_t, uid_t);
void	 setusershell(void);
int	 strtofflags(char **, u_int32_t *, u_int32_t *);
int	 swapctl(int cmd, const void *arg, int misc);
int	 syscall(int, ...);
int	 getentropy(void *, size_t);
int	 pledge(const char *, const char **);
pid_t	 __tfork_thread(const struct __tfork *, size_t, void (*)(void *),
	    void *);
#endif /* __BSD_VISIBLE */
__END_DECLS

#endif /* !_UNISTD_H_ */
@


1.103
log
@Don't declare select() in <unistd.h>

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.102 2016/09/09 18:12:37 millert Exp $ */
d525 1
a525 1
int	 pledge(const char *, const char **paths);
@


1.102
log
@Move the 10 (!) defintions of NULL to their own mini header file and
update the NULL definition for C++11.  OK deraadt@@ guenther@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.101 2016/05/23 00:12:58 guenther Exp $ */
a510 5
#ifndef _SELECT_DEFINED_
#define _SELECT_DEFINED_
struct timeval;
int	 select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
#endif
@


1.101
log
@Remove iruserok(_sa)? and __ivaliduser(sa)?

ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.100 2015/10/09 01:26:40 deraadt Exp $ */
d38 1
a316 11


#ifndef NULL
#ifdef 	__GNUG__
#define	NULL	__null
#elif defined(__cplusplus)
#define	NULL	0L
#else
#define	NULL	((void *)0)
#endif
#endif
@


1.100
log
@tame -> pledge.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.99 2015/09/09 17:56:59 deraadt Exp $ */
a502 2
int	 iruserok(u_int32_t, int, const char *, const char *);
int	 iruserok_sa(const void *, int, int, const char *, const char *);
@


1.99
log
@Move to next tame() API.  The flags are now passed as a very simple string,
which results in tame() code placements being much more recognizeable.
tame() can be moved to unistd.h and does not need cpp symbols to turn the
bits on and off.  The resulting API is a bit unexpected, but simplifies the
mapping to enabling bits in the kernel substantially.
vague ok's from various including guenther doug semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.99 2015/09/09 17:49:31 deraadt Exp $ */
d542 1
a542 1
int	 tame(const char *, const char **paths);
@


1.98
log
@Hide many (194!) symbols that nothing should be using.
Delete exect(2); it wasn't portable across archs and nothing used it.

ports test build by naddy@@
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.97 2014/12/13 20:42:41 tedu Exp $ */
d542 1
@


1.97
log
@claim posix 2008 compat. apparently people look at this and get scared
when it's really old. but no actual ports fallout in espie's build.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.96 2014/12/11 23:05:38 tedu Exp $ */
a491 1
int	 exect(const char *, char * const *, char * const *);
@


1.96
log
@update swab() to match the current posix definition. "rationale: none."
rewrite the function to be simpler as well. the compiler can unroll the
loop for us if necessary.
ok schwarze
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.95 2014/12/08 20:39:56 tedu Exp $ */
d147 1
a147 1
#define _POSIX2_VERSION				199212L
@


1.95
log
@header changes for recent libc changes:
add siphash
delete setkey, encrypt, cfree
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.94 2014/11/21 05:13:44 tedu Exp $ */
d427 1
a427 1
void	 swab(const void *, void *, size_t);
@


1.94
log
@change prototype for crypt_newhash. the login_cap_t is a holdover from its
pwd_gensalt origins, but a string argument works equally work and is more
friendly to consumers beyond local user accounts.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.93 2014/09/18 04:37:56 guenther Exp $ */
a415 1
int	 encrypt(char *, int);
a424 1
int	 setkey(const char *);
a490 2
int	 des_cipher(const char *, char *, int32_t, int);
int	 des_setkey(const char *);
@


1.93
log
@Our setpgrp() is the BSD version with two args and not the XSI
version with zero args, so it should only be visible if __BSD_VISIBLE
(and not also for __XPG_VISIBLE).  Contrawise, readlink() has been
part of base POSIX since 1995, so move to proper #if area for that.
Move crypt_checkpass() to the pure-BSD section of the file.

setpgrp() issue noted by Matti Karnaattu (mkarnaattu (at) gmail.com)
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.92 2014/09/01 05:09:52 doug Exp $ */
d492 1
@


1.92
log
@Sync readlink(2) with IEEE Std 1003.1-2008.

discussion, help and ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.91 2014/08/31 04:02:08 guenther Exp $ */
d407 2
a414 3
#if __BSD_VISIBLE
int	crypt_checkpass(const char *, const char *);
#endif
a425 2
ssize_t readlink(const char * __restrict, char * __restrict, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
a426 1
int	 setpgrp(pid_t pid, pid_t pgrp);	/* obsoleted by setpgid() */
d491 1
d538 1
@


1.91
log
@Declare and document getthrid()

indirectly prodded by krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.90 2014/08/31 01:42:36 guenther Exp $ */
d427 1
a427 1
int	 readlink(const char *, char *, size_t)
@


1.90
log
@Add additional kernel interfaces for setting close-on-exec on fds
when creating them: pipe2(), dup3(), accept4(), MSG_CMSG_CLOEXEC,
SOCK_CLOEXEC.  Includes SOCK_NONBLOCK support.

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.89 2014/07/08 21:35:39 tedu Exp $ */
d507 1
@


1.89
log
@update _POSIX2_FORT_RUN, so that sysconf(_SC_2_FORT_RUN) remains correct.
because you care. reminded by matthew.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.88 2014/06/14 18:01:41 deraadt Exp $ */
d485 5
@


1.88
log
@Change return value of getentropy() to int 0 for success.  Maximum
buffersize is enforced strictly, this supplies sufficient entropy
payload to act as seed material.  Discourage general use of this
API, but lock down this function name as the go-to for userland
PRNG seeding.  Improve documentation.
ok miod matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.87 2014/06/13 08:26:10 deraadt Exp $ */
d117 1
a117 1
#define _POSIX2_FORT_RUN			200112L
@


1.87
log
@Add new getentropy() system call.  Code and pressure from matthew.
I accepted that he's right (again) to seperate this out from heavy
sysctl API and this will simply a variety of things.  Functionname
is not used by anyone in the ports tree, so we guess we can use it.
Shocking that no application has a function called this.
ok matthew & others who pushed him to start this early on
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.86 2014/05/16 21:28:15 tedu Exp $ */
d541 1
a541 1
ssize_t	 getentropy(void *, size_t);
@


1.86
log
@add prototypes for new crypt functions
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.85 2014/04/21 11:28:26 guenther Exp $ */
d541 1
@


1.85
log
@Use internal '__' names for __attributes__ in public headers
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.84 2014/04/01 05:04:50 matthew Exp $ */
d413 3
@


1.84
log
@Define intptr_t in <unistd.h> as specified by POSIX

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.83 2013/12/28 01:51:53 martynas Exp $ */
d343 1
a343 1
	    __attribute__((sentinel));
d346 1
a346 1
	    __attribute__((sentinel));
@


1.83
log
@Annotate a few more bounded functions: realpath(3) needs a buffer
of size at least PATH_MAX.  pread(2), pwrite(2) and readlinkat(2)
also take the buffer and the bound.  OK theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.82 2013/12/04 22:58:24 deraadt Exp $ */
d326 5
@


1.82
log
@express final disapproval of the interfaces in libcompat, such as
them ftime(), gtty(), stty(), re_comp(), cuserid() and others.
Discussion and ongoing work to fix the ports tree from many, especially
naddy.
ok naddy
[There is a bit more cleanup possible after that, but this is considered
the current safe step]
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.81 2013/11/22 21:32:49 millert Exp $ */
d439 4
a442 2
ssize_t  pread(int, void *, size_t, off_t);
ssize_t  pwrite(int, const void *, size_t, off_t);
d473 2
a474 1
ssize_t	readlinkat(int, const char *, char *, size_t);
@


1.81
log
@The getopt() prototype and externs don't belong in stdlib.h.  Berkeley
moved them to unistd.h to match POSIX in 1995 but we never did.
The exception to this is getsubopt() which POSIX says should be in
stdlib.h.  The non-standard suboptarg extern remains in the BSD-only
section of stdlib.h.  Neither getsubopt() nor suboptarg belong in
unistd.h or getopt.h.  They were only there to allow us to protect
all the getopt() bits from being multiply defined.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.80 2013/10/24 07:34:56 guenther Exp $ */
a507 2
char	*re_comp(const char *);
int	 re_exec(const char *);
a525 2
int	 setrgid(gid_t);
int	 setruid(uid_t);
@


1.80
log
@Align suseconds_t with POSIX: it's the type of the tv_usec member of timeval.
Use useconds_t in the ualarm() declaration.
Bump libstdc++ major to be sure there isn't ABI issues.

ok deraadt@@ jca@@ jmc@@ millert@@
ports testing by landry@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.79 2013/06/17 19:11:54 guenther Exp $ */
a393 3
/* XXX - getsubopt does not belong here */
int	 getsubopt(char **, char * const *, char **);
extern	 char *suboptarg;		/* getsubopt(3) external variable */
@


1.79
log
@Add support for the _POSIX_CPUTIME and _POSIX_THREAD_CPUTIME options,
including CLOCK_{PROCESS,THREAD}_CPUTIME_ID constants and
{clock,pthread}_getcpuclockid() functions.

Worked out at t2k13 with help from tedu@@ and matthew@@ and testing by aja@@
ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.78 2013/06/04 23:01:07 brad Exp $ */
d431 1
a431 1
unsigned int	 ualarm(unsigned int, unsigned int);
@


1.78
log
@Enable the _POSIX_SHARED_MEMORY_OBJECTS option group now that we have shm_open / shm_unlink.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.77 2013/04/15 16:38:21 matthew Exp $ */
d69 1
a69 1
#define _POSIX_CPUTIME				(-1)
d96 1
a96 1
#define _POSIX_THREAD_CPUTIME			(-1)
@


1.77
log
@Implement fdatasync() as a wrapper around fsync()

ok guenther, deraadt, jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.76 2013/04/11 03:09:16 guenther Exp $ */
d88 1
a88 1
#define _POSIX_SHARED_MEMORY_OBJECTS		(-1)
@


1.76
log
@getpgid() and getsid() were rolled into POSIX in 2008

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.75 2013/03/01 21:19:41 guenther Exp $ */
d405 3
@


1.75
log
@Adds the (somewhat silly) _CS_V[67]_ENV and _CS_POSIX_V[67]_* defines
to <unistd.h> and confstr(3) per POSIX 1003.1-2008

Change confstr(_CS_PATH) to operate directly instead of calling sysctl(3)

ports build tested by espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.74 2012/12/05 23:19:57 deraadt Exp $ */
d433 1
a433 1
#if __XPG_VISIBLE >= 420
@


1.74
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.73 2012/06/21 00:56:59 guenther Exp $ */
d285 32
a316 1
#define	_CS_PATH		 1
@


1.73
log
@__tfork() needs to set the stack address of the new thread in the kernel,
so that it can't get a signal while still running on the parent thread's
stack.  Also, pass in sizeof(struct __tfork) to provide forward compat
when more members are added.  This is an ABI change, so switch syscall
numbers and bump lib majors this time.

ok deraadt@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.72 2012/05/30 19:34:30 matthew Exp $ */
a37 1
#include <sys/cdefs.h>
@


1.72
log
@Move the _SC_* and _CS_* configurable system variables and strings
from sys/unistd.h to unistd.h.

From Brad; ok millert and me
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.71 2012/05/14 23:21:35 matthew Exp $ */
d504 2
@


1.71
log
@More sysconf(3)-y and pathconf(3)-y goodness from Brad.
ok guenther, millert (and me); bulk build test by naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.70 2012/04/12 12:33:03 deraadt Exp $ */
d149 138
@


1.70
log
@remove rfork(); ok guenther miod
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.69 2012/04/12 11:19:34 deraadt Exp $ */
d53 96
a148 4
#if __POSIX_VISIBLE
#define _POSIX_REENTRANT_FUNCTIONS	1
#define _POSIX_THREAD_SAFE_FUNCTIONS	200112L
#endif
@


1.69
log
@prototype getdtablecount()
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.68 2012/03/21 23:20:35 matthew Exp $ */
a251 1
int	 rfork(int opts);
@


1.68
log
@Implement execvpe(3) and posix_spawn(3) and family.  Based on
FreeBSD's implementation via Frank Denis, with various cleanups and
tweaks by me.

ok deraadt@@, guenther@@; discussions and tweaks from many others
jmc@@ promises to help me further with the man pages in tree
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.67 2012/01/13 13:16:44 nigel Exp $ */
d226 1
@


1.67
log
@Replace _SELECT_DECLARED with _SELECT_DEFINED_

Ok sthen@@, millert@@, dcoppa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.66 2011/11/09 15:34:18 fgsch Exp $ */
d82 6
a87 3
int	 execv(const char *, char * const *);
int	 execve(const char *, char * const *, char * const *);
int	 execvp(const char *, char * const *);
@


1.66
log
@getcwd() buffer's length can be smaller than 1024. In that case it will
fail with errno set to ERANGE if not enough room is provided. Similar for
getlogin_r() so remove minbytes enforcement attribute.
ok kettenis@@ guenther@@ deraadt@@ on getcwd, deraadt@@ on getlogin_r.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.65 2011/07/18 17:29:49 matthew Exp $ */
d253 1
a253 1
#define _SELECT_DECLARED
@


1.65
log
@Expose a bunch of new functionality from POSIX 2008: openat(2),
fchmodat(2), fstatat(2), mkdirat(2), mkfifoat(2), mknodat(2),
faccessat(2), fchownat(2), linkat(2), readlinkat(2), renameat(2),
symlinkat(2), unlinkat(2), utimensat(2), futimens(2), and
fdopendir(3).

"Minor" libc bump.

Tested in a bulk build by naddy@@
Much help from guenther@@, thib@@, tedu@@, oga@@, and others.
ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.64 2011/07/03 18:51:01 jsg Exp $ */
d88 1
a88 2
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,1024)));
d141 1
a141 2
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,32)));
@


1.64
log
@As pointed out by Richard Guenther our definition
of NULL was incorrect for c++ compilers that aren't
gcc (or pretend to be gcc like clang).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.63 2011/04/06 11:39:42 miod Exp $ */
d204 9
@


1.63
log
@Define NULL as a void * instead of a long integer, as required by Single Unix.
Kernel and bootblocks still use the old 0L value until all the NULL abuses
in the code are fixed.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.62 2008/06/25 14:58:54 millert Exp $ */
d61 2
@


1.62
log
@Move _POSIX_THREAD_SAFE_FUNCTIONS into unistd.h and set it to 200112
now that we support all the _r functions required by POSIX 1003.1-2001.
Also define _POSIX_REENTRANT_FUNCTIONS.  OK kurt@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.61 2008/04/29 14:52:54 kurt Exp $ */
d62 1
a62 1
#define	NULL	0L
@


1.61
log
@Remove duplicate psignal(3) and sys_siglist definitions. signal.h
is the correct place for them and nothing gets them from here in
base/xenocara/ports. no objection millert@@ okay kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.60 2008/04/24 20:43:20 kurt Exp $ */
d51 5
@


1.60
log
@- correct brk(2) prototype and man page to match implementation and POSIX.
brk(2) returns an int value not a void *. brk(2) returns 0 upon success not
a pointer to the new end of memory. okay millert@@, kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.59 2006/12/20 08:12:00 espie Exp $ */
a220 1
void	 psignal(unsigned int, const char *);
a256 1
extern __const char *__const sys_siglist[]; /* XXX - also in signal.h */
@


1.59
log
@zap bogus sentinel, as noticed by dasn.
okay theo
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.58 2006/08/28 15:47:28 espie Exp $ */
d179 1
a179 1
void	 *brk(void *);
@


1.58
log
@zap argument name, okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.57 2005/12/13 00:35:22 millert Exp $ */
d72 1
a72 2
int	 execle(const char *, const char *, ...) 
	    __attribute__((sentinel));
@


1.57
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.56 2005/11/24 02:09:13 deraadt Exp $ */
d204 1
a204 1
int	 des_setkey(const char *key);
@


1.56
log
@undelete died a while back; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.55 2005/11/21 18:16:36 millert Exp $ */
d46 7
a67 3
size_t	 confstr(int, char *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
char	*cuserid(char *);
a88 3
int	 getlogin_r(char *, size_t)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,32)));
a90 1
pid_t	 getpgid(pid_t);
a91 1
pid_t	 getsid(pid_t);
a102 2
int	 setpgid(pid_t, pid_t);
pid_t	 setsid(void);
a108 2
int	 ttyname_r(int, char *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
d113 4
a116 1
#ifndef	_POSIX_SOURCE
d118 21
a138 2
/* structure timeval required for select() */
#include <sys/time.h>
d140 32
a171 5
/*
 * X/Open CAE Specification Issue 5 Version 2
 */
#if (!defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)) || \
    (_XOPEN_VERSION - 0) >= 500
d174 2
d178 23
a201 3
void	*brk(void *);
int	 chroot(const char *);
#if !defined(_XOPEN_SOURCE)
a202 2
#endif
char	*crypt(const char *, const char *);
a204 1
int	 encrypt(char *, int);
a206 2
int	 fchdir(int);
int	 fchown(int, uid_t, gid_t);
a207 2
int	 fsync(int);
int	 ftruncate(int, off_t);
a209 1
int	 getdtablesize(void);
a210 3
long	 gethostid(void);
int	 gethostname(char *, size_t)
		__attribute__ ((__bounded__(__string__,1,2)));
a211 1
int	 getpagesize(void);
a213 1
char	*getpass(const char *);
a214 2
char	*getwd(char *)
		__attribute__ ((__bounded__(__minbytes__,1,1024)));
d218 3
a220 1
int	 lchown(const char *, uid_t, gid_t);
a221 1
int	 nice(int);
a222 1
extern __const char *__const sys_siglist[];
d225 1
a233 2
int	 readlink(const char *, char *, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
d240 3
a242 5
int	 quotactl(const char *, int, int, char *);
void	*sbrk(int);

#if !defined(_XOPEN_SOURCE) && !defined(_SELECT_DEFINED_)
#define _SELECT_DEFINED_
a244 1

a245 2
int	 setegid(gid_t);
int	 seteuid(uid_t);
a248 1
int	 setkey(const char *);
a250 2
int	 setpgrp(pid_t pid, pid_t pgrp);	/* obsoleted by setpgid() */
int	 setregid(gid_t, gid_t);
a252 1
int	 setreuid(uid_t, uid_t);
a256 1
void	 swab(const void *, void *, size_t);
a257 2
int	 symlink(const char *, const char *);
void	 sync(void);
d259 2
a260 30
int	 truncate(const char *, off_t);
int	 ttyslot(void);
unsigned int	 ualarm(unsigned int, unsigned int);
int	 usleep(useconds_t);
void	*valloc(size_t);		/* obsoleted by malloc() */
pid_t	 vfork(void);
int	 issetugid(void);

#ifndef _GETOPT_DEFINED_
#define _GETOPT_DEFINED_
int	 getopt(int, char * const *, const char *);
extern	 char *optarg;			/* getopt(3) external variables */
extern	 int opterr;
extern	 int optind;
extern	 int optopt;
extern	 int optreset;
int	 getsubopt(char **, char * const *, char **);
extern	 char *suboptarg;		/* getsubopt(3) external variable */
#endif /* _GETOPT_DEFINED_ */
#endif /* !_POSIX_SOURCE */

#if (!defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE) && \
     !defined(_XOPEN_SOURCE)) || \
    (defined(_XOPEN_SOURCE) && _XOPEN_SOURCE_EXTENDED - 0 == 1)
#define F_ULOCK         0
#define F_LOCK          1
#define F_TLOCK         2
#define F_TEST          3
int     lockf(int, int, off_t);
#endif /* (!defined(_POSIX_SOURCE) && !defined(_XOPEN_SOURCE)) || ... */
@


1.55
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.54 2005/11/20 02:24:59 millert Exp $ */
a223 1
int	 undelete(const char *);
@


1.54
log
@brk() and sbrk() should use void *, not char *.  Note that sbrk()
should take intptr_t, not int, but we don't presently have intptr_t
available from unistd.h.  OK marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.53 2005/05/27 17:45:56 millert Exp $ */
d193 2
a194 1
#if !defined(_XOPEN_SOURCE)
@


1.53
log
@mktemp(3) et al. go in stdlib.h, not unistd.h.  While there be more
explicit about mktemp(3) in the man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.52 2004/01/13 18:10:53 millert Exp $ */
d133 1
a133 1
char	*brk(const char *);
d191 1
a191 1
char	*sbrk(int);
@


1.52
log
@Prototype closefrom(); tedu@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.51 2003/08/07 01:16:11 deraadt Exp $ */
a167 4
char	*mkdtemp(char *);
int	 mkstemp(char *);
int	 mkstemps(char *, int);
char	*mktemp(char *);
@


1.51
log
@des_cipher 3rd param is int32_t not long
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.50 2003/08/01 17:38:33 avsm Exp $ */
d135 3
@


1.50
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.49 2003/06/26 19:34:17 avsm Exp $ */
d136 1
a136 1
int	 des_cipher(const char *, char *, long, int);
@


1.49
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.47 2003/06/02 19:34:12 millert Exp $ */
d61 2
a62 1
size_t	 confstr(int, char *, size_t);
d77 3
a79 1
char	*getcwd(char *, size_t);
d85 3
a87 1
int	 getlogin_r(char *, size_t);
d100 2
a101 1
ssize_t	 read(int, void *, size_t);
d112 2
a113 1
int	 ttyname_r(int, char *, size_t);
d115 2
a116 1
ssize_t	 write(int, const void *, size_t);
d146 2
a147 1
int	 getdomainname(char *, size_t);
d151 2
a152 1
int	 gethostname(char *, size_t);
d159 2
a160 1
char	*getwd(char *);			/* obsoleted by getcwd() */
d173 2
a174 1
int	 profil(char *, size_t, unsigned long, unsigned int);
d183 2
a184 1
int	 readlink(const char *, char *, size_t);
@


1.48
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d61 1
a61 2
size_t	 confstr(int, char *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
d76 1
a76 3
char	*getcwd(char *, size_t)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,1024)));
d82 1
a82 3
int	 getlogin_r(char *, size_t)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,1,32)));
d95 1
a95 2
ssize_t	 read(int, void *, size_t)
		__attribute__((__bounded__(__buffer__,2,3)));
d106 1
a106 2
int	 ttyname_r(int, char *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
d108 1
a108 2
ssize_t	 write(int, const void *, size_t)
		__attribute__((__bounded__(__buffer__,2,3)));
d138 1
a138 2
int	 getdomainname(char *, size_t)
		__attribute__ ((__bounded__(__string__,1,2)));
d142 1
a142 2
int	 gethostname(char *, size_t)
		__attribute__ ((__bounded__(__string__,1,2)));
d149 1
a149 2
char	*getwd(char *)
		__attribute__ ((__bounded__(__minbytes__,1,1024)));
d162 1
a162 2
int	 profil(char *, size_t, unsigned long, unsigned int)
		__attribute__ ((__bounded__(__string__,1,2)));
d171 1
a171 2
int	 readlink(const char *, char *, size_t)
		__attribute__ ((__bounded__(__string__,2,3)));
@


1.47
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.46 2003/05/10 17:51:39 miod Exp $ */
d61 2
a62 1
size_t	 confstr(int, char *, size_t);
d77 3
a79 1
char	*getcwd(char *, size_t);
d85 3
a87 1
int	 getlogin_r(char *, size_t);
d100 2
a101 1
ssize_t	 read(int, void *, size_t);
d112 2
a113 1
int	 ttyname_r(int, char *, size_t);
d115 2
a116 1
ssize_t	 write(int, const void *, size_t);
d146 2
a147 1
int	 getdomainname(char *, size_t);
d151 2
a152 1
int	 gethostname(char *, size_t);
d159 2
a160 1
char	*getwd(char *);			/* obsoleted by getcwd() */
d173 2
a174 1
int	 profil(char *, size_t, unsigned long, unsigned int);
d183 2
a184 1
int	 readlink(const char *, char *, size_t);
@


1.46
log
@Do not let userland access the swapon system call anymore (nothing uses it
anyway).
ok deraadt@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.45 2002/12/03 20:24:29 millert Exp $ */
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.45
log
@GNU-like getopt_long() from NetBSD with changes by me to support
getopt_long_only().  At some point this should replace the BSD
getopt(3) but we are not there yet.

While I am here add protection from the multiple getopt() definitions
due to conflicting standards.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.44 2002/10/30 20:15:29 millert Exp $ */
a207 1
int	 swapon(const char *);
@


1.44
log
@Add [gs]etres[ug]id(2) syscall to libc and use it in emulating some 4.3BSD
functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.43 2002/10/25 21:55:28 millert Exp $ */
d222 2
d232 1
@


1.43
log
@NULL is now 0L so it is the same size as a pointer.
OK mickey@@ and discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.42 2002/09/17 21:15:58 deraadt Exp $ */
d149 2
d199 4
a202 2
int	 setregid(int, int);
int	 setreuid(int, int);
@


1.42
log
@uncommit, since it breaks macppc libc.  millert and miod have now said they
did NOT approve those for commit.  why did mickey feel he was ok to go
commiting a set of diffs which had not been passed around and tested by people?
we don't know.  mickey, have you got something to say for yourself?
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.40 2002/08/30 08:24:55 espie Exp $ */
d54 1
a54 1
#define	NULL		0	/* null pointer constant */
@


1.41
log
@move __syscall prototype into unistd.h (like everybody else) and avoid private protos for it everywhere; millert@@ ok
@
text
@a208 3
#if !defined(_XOPEN_SOURCE)
quad_t	 __syscall(quad_t, ...);
#endif
@


1.40
log
@Put sentinel back in.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.38 2002/06/05 19:27:50 espie Exp $ */
d209 3
@


1.39
log
@Backout previous change. Since it requires people to upgrade gcc, we want
to give them a larger timeslot to do that.
Requested by deraadt@@ and various people on icb or vocally.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 6
a74 3
int	 execl(const char *, const char *, ...);
int	 execle(const char *, const char *, ...);
int	 execlp(const char *, const char *, ...);
@


1.38
log
@Use attribute((sentinel)) on functions where it makes sense.
(this will warn if they are used without a terminating NULL pointer.
Note *pointer*, very useful for arches where 0 != (void *)0, in size)

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.37 2002/02/17 19:42:21 millert Exp $ */
d69 3
a71 6
int	 execl(const char *, const char *, ...) 
	    __attribute__((sentinel));
int	 execle(const char *, const char *, ...) 
	    __attribute__((sentinel));
int	 execlp(const char *, const char *, ...) 
	    __attribute__((sentinel));
@


1.37
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.36 2002/02/16 21:27:17 millert Exp $ */
d69 6
a74 3
int	 execl(const char *, const char *, ...);
int	 execle(const char *, const char *, ...);
int	 execlp(const char *, const char *, ...);
@


1.36
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.35 2001/08/07 21:34:42 millert Exp $ */
d162 6
a167 6
int	 rcmd __P((char **, int, const char *,
		const char *, const char *, int *));
int	 rcmd_af __P((char **, int, const char *,
		const char *, const char *, int *, int));
int	 rcmdsh __P((char **, int, const char *,
		const char *, const char *, char *));
@


1.35
log
@remove redundant __noreturn__ attributes now that __dead is sane for modern gcc
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.34 2000/12/06 17:18:43 deraadt Exp $ */
d59 51
a109 51
__dead void	 _exit __P((int));
int	 access __P((const char *, int));
unsigned int alarm __P((unsigned int));
int	 chdir __P((const char *));
int	 chown __P((const char *, uid_t, gid_t));
int	 close __P((int));
size_t	 confstr __P((int, char *, size_t));
char	*cuserid __P((char *));
int	 dup __P((int));
int	 dup2 __P((int, int));
int	 execl __P((const char *, const char *, ...));
int	 execle __P((const char *, const char *, ...));
int	 execlp __P((const char *, const char *, ...));
int	 execv __P((const char *, char * const *));
int	 execve __P((const char *, char * const *, char * const *));
int	 execvp __P((const char *, char * const *));
pid_t	 fork __P((void));
long	 fpathconf __P((int, int));
char	*getcwd __P((char *, size_t));
gid_t	 getegid __P((void));
uid_t	 geteuid __P((void));
gid_t	 getgid __P((void));
int	 getgroups __P((int, gid_t *));
char	*getlogin __P((void));
int	 getlogin_r __P((char *, size_t));
pid_t	 getpgrp __P((void));
pid_t	 getpid __P((void));
pid_t	 getpgid __P((pid_t));
pid_t	 getppid __P((void));
pid_t	 getsid __P((pid_t));
uid_t	 getuid __P((void));
int	 isatty __P((int));
int	 link __P((const char *, const char *));
off_t	 lseek __P((int, off_t, int));
long	 pathconf __P((const char *, int));
int	 pause __P((void));
int	 pipe __P((int *));
ssize_t	 read __P((int, void *, size_t));
int	 rmdir __P((const char *));
int	 setgid __P((gid_t));
int	 setpgid __P((pid_t, pid_t));
pid_t	 setsid __P((void));
int	 setuid __P((uid_t));
unsigned int sleep __P((unsigned int));
long	 sysconf __P((int));
pid_t	 tcgetpgrp __P((int));
int	 tcsetpgrp __P((int, pid_t));
char	*ttyname __P((int));
int	 ttyname_r __P((int, char *, size_t));
int	 unlink __P((const char *));
ssize_t	 write __P((int, const void *, size_t));
d121 2
a122 2
ssize_t  pread __P((int, void *, size_t, off_t));
ssize_t  pwrite __P((int, const void *, size_t, off_t));
d125 35
a159 35
int	 acct __P((const char *));
char	*brk __P((const char *));
int	 chroot __P((const char *));
char	*crypt __P((const char *, const char *));
int	 des_cipher __P((const char *, char *, long, int));
int	 des_setkey __P((const char *key));
int	 encrypt __P((char *, int));
void	 endusershell __P((void));
int	 exect __P((const char *, char * const *, char * const *));
int	 fchdir __P((int));
int	 fchown __P((int, uid_t, gid_t));
char	*fflagstostr __P((u_int32_t));
int	 fsync __P((int));
int	 ftruncate __P((int, off_t));
int	 getdomainname __P((char *, size_t));
int	 getdtablesize __P((void));
int	 getgrouplist __P((const char *, gid_t, gid_t *, int *));
long	 gethostid __P((void));
int	 gethostname __P((char *, size_t));
mode_t	 getmode __P((const void *, mode_t));
int	 getpagesize __P((void));
char	*getpass __P((const char *));
char	*getusershell __P((void));
char	*getwd __P((char *));			/* obsoleted by getcwd() */
int	 initgroups __P((const char *, gid_t));
int	 iruserok __P((u_int32_t, int, const char *, const char *));
int	 iruserok_sa __P((const void *, int, int, const char *, const char *));
int	 lchown __P((const char *, uid_t, gid_t));
char	*mkdtemp __P((char *));
int	 mkstemp __P((char *));
int	 mkstemps __P((char *, int));
char	*mktemp __P((char *));
int	 nfssvc __P((int, void *));
int	 nice __P((int));
void	 psignal __P((unsigned int, const char *));
d161 1
a161 1
int	 profil __P((char *, size_t, unsigned long, unsigned int));
d168 11
a178 11
char	*re_comp __P((const char *));
int	 re_exec __P((const char *));
int	 readlink __P((const char *, char *, size_t));
int	 reboot __P((int));
int	 revoke __P((const char *));
int	 rfork __P((int opts));
int	 rresvport __P((int *));
int	 rresvport_af __P((int *, int));
int	 ruserok __P((const char *, int, const char *, const char *));
int	 quotactl __P((const char *, int, int, char *));
char	*sbrk __P((int));
d181 1
a181 1
int	 select __P((int, fd_set *, fd_set *, fd_set *, struct timeval *));
d184 30
a213 30
int	 setdomainname __P((const char *, size_t));
int	 setegid __P((gid_t));
int	 seteuid __P((uid_t));
int	 setgroups __P((int, const gid_t *));
int	 sethostid __P((long));
int	 sethostname __P((const char *, size_t));
int	 setkey __P((const char *));
int	 setlogin __P((const char *));
void	*setmode __P((const char *));
int	 setpgrp __P((pid_t pid, pid_t pgrp));	/* obsoleted by setpgid() */
int	 setregid __P((int, int));
int	 setreuid __P((int, int));
int	 setrgid __P((gid_t));
int	 setruid __P((uid_t));
void	 setusershell __P((void));
int	 strtofflags __P((char **, u_int32_t *, u_int32_t *));
void	 swab __P((const void *, void *, size_t));
int	 swapon __P((const char *));
int	 swapctl __P((int cmd, const void *arg, int misc));
int	 symlink __P((const char *, const char *));
void	 sync __P((void));
int	 syscall __P((int, ...));
int	 truncate __P((const char *, off_t));
int	 ttyslot __P((void));
unsigned int	 ualarm __P((unsigned int, unsigned int));
int	 undelete __P((const char *));
int	 usleep __P((useconds_t));
void	*valloc __P((size_t));			/* obsoleted by malloc() */
pid_t	 vfork __P((void));
int	 issetugid __P((void));
d215 1
a215 1
int	 getopt __P((int, char * const *, const char *));
d221 1
a221 1
int	 getsubopt __P((char **, char * const *, char **));
d232 1
a232 1
int     lockf __P((int, int, off_t));
@


1.34
log
@use __x__ formats for __attribute__ arguments; guenther@@gac.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.33 2000/09/12 17:30:45 millert Exp $ */
d59 1
a59 1
__dead void	 _exit __P((int)) __attribute__((__noreturn__));
@


1.33
log
@o add missing getsid() prototype
o fix typo in getsid() that broke getsid(pid) where pid != 0
o cause getsid() and getpgid() to return EPERM if requesting the
  id of a session/process group not in the current session
o check for NULL session in getsid() for exiting processes
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.32 2000/07/19 19:26:04 mickey Exp $ */
d59 1
a59 1
__dead void	 _exit __P((int)) __attribute__((noreturn));
@


1.32
log
@from freebsd:
strtofflags/fflagstostr to convert file flags
to/from binary from/into a string as used in chflags(1).

use u_int32_t instead of u_long (as freebsd does).
increase libc minor.
millert@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.31 2000/04/20 06:34:18 deraadt Exp $ */
d88 1
@


1.31
log
@prototyping for p{read,write}{,v}
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.30 2000/02/19 13:21:25 deraadt Exp $ */
d135 1
d198 1
@


1.30
log
@swapctl 2nd arg is const
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.29 2000/01/27 05:18:47 itojun Exp $ */
d115 9
d177 2
a178 1
#ifndef _XOPEN_SOURCE
d181 1
@


1.29
log
@add IPv6-ready rcmd() friends.
	rcmd(): IPv4 only
	rcmd_af(): af independent
	ruserok(): af independent
	iruserok(): IPv4 only
	iruserok_sa(): af independent
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.28 1999/12/16 21:30:34 deraadt Exp $ */
d188 1
a188 1
int	 swapctl __P((int cmd, void *arg, int misc));
@


1.28
log
@rresvport_af() and bindresvport_af()
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.27 1999/09/17 13:13:46 espie Exp $ */
d140 1
d153 2
@


1.27
log
@Be thorough about NULL as __null for C++.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.26 1999/06/11 22:47:47 espie Exp $ */
d161 1
@


1.26
log
@Define NULL to be __null for C++: better quality of implementation.
__null is a magic constant of integral type that converts to a null pointer
as should be, but warns for ambiguity when used to resolved an overload
between an integral type and a pointer type.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.25 1999/05/22 23:49:48 weingart Exp $ */
d52 1
a52 1
#define NULL	__null
@


1.25
log
@Add swapctl(2) prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.24 1998/11/20 11:18:26 d Exp $ */
d51 3
d55 1
@


1.24
log
@Add thread-safety to libc, so that libc_r will build (on i386 at least).
All POSIX libc api now there (to P1003.1c/D10)
  (more md stuff is needed for other libc/arch/*)
  (setlogin is no longer a special syscall)
Add -pthread option to gcc (that makes it use -lc_r and -D_POSIX_THREADS).
Doc some re-entrant routines
Add libc_r to intro(3)
dig() uses some libc srcs and an extra -I was needed there.
Add more md stuff to libc_r.
Update includes for the pthreads api
Update libc_r TODO
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.23 1998/11/19 06:44:07 deraadt Exp $ */
d180 1
@


1.23
log
@add getpgid() proto; form
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.22 1998/06/30 23:03:09 deraadt Exp $ */
d79 1
d102 1
@


1.22
log
@add mkstemp(char *template, int suffixlen) interface
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.21 1998/05/13 08:50:52 deraadt Exp $ */
d81 1
@


1.21
log
@change size parameter to size_t
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.20 1998/04/25 07:14:50 deraadt Exp $ */
d136 1
@


1.20
log
@readlink() 3rd param is size_t; XPG
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.19 1998/02/16 09:46:03 deraadt Exp $ */
d121 1
a121 1
int	 getdomainname __P((char *, int));
d125 1
a125 1
int	 gethostname __P((char *, int));
d159 1
a159 1
int	 setdomainname __P((const char *, int));
d164 1
a164 1
int	 sethostname __P((const char *, int));
@


1.19
log
@be more careful for _XOPEN_SOURCE
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.18 1998/02/10 02:44:38 deraadt Exp $ */
d148 1
a148 1
int	 readlink __P((const char *, char *, int));
@


1.18
log
@more explicit protos
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.17 1998/02/10 02:19:47 deraadt Exp $ */
d141 1
a141 1
int	 profil __P((char *, size_t, u_long, u_int));
d156 1
d158 1
d181 1
a181 1
u_int	 ualarm __P((u_int, u_int));
@


1.17
log
@move proto to unistd.h
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.16 1997/12/27 12:03:44 tholo Exp $ */
d57 1
a57 1
unsigned alarm __P((unsigned));
d95 1
a95 1
unsigned sleep __P((unsigned));
@


1.16
log
@Make usleep prototype match manual page and implementation
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.15 1997/12/22 10:13:50 deraadt Exp $ */
d172 1
@


1.15
log
@add XPG4.2 lockf; kleink
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.14 1997/11/16 01:01:24 deraadt Exp $ */
d180 1
a180 1
void	 usleep __P((u_int));
@


1.14
log
@move proto to sys/stat.h; XPG4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.13 1997/06/20 04:10:20 millert Exp $ */
d194 10
@


1.13
log
@Add mkdtemp(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.12 1997/01/26 05:11:16 downsj Exp $ */
a133 1
int	 mknod __P((const char *, mode_t, dev_t));
@


1.12
log
@Add lchown() declaration.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.11 1996/12/13 17:06:23 deraadt Exp $ */
d135 1
@


1.11
log
@fix comments regarding {*path,sys}conf()
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.10 1996/12/12 23:42:22 deraadt Exp $ */
d133 1
@


1.10
log
@add quotactl
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.9 1996/12/09 13:50:04 deraadt Exp $ */
d72 1
a72 1
long	 fpathconf __P((int, int));		/* not yet */
d86 1
a86 1
long	 pathconf __P((const char *, int));	/* not yet */
d96 1
a96 1
long	 sysconf __P((int));			/* not yet */
@


1.9
log
@proto getgrouplist()
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.8 1996/08/25 20:02:43 deraadt Exp $ */
d153 1
@


1.8
log
@+issetugid
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.7 1996/08/22 20:36:59 millert Exp $ */
d123 1
@


1.7
log
@Adds rcmdsh() prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: unistd.h,v 1.6 1996/06/10 06:31:34 deraadt Exp $ */
d180 1
@


1.6
log
@iruserok() can finally safely use a u_int32_t for the ip addr
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d142 2
@


1.5
log
@initgroups(3) 2nd argument should be gid_t
@
text
@d1 2
a2 1
/*	$NetBSD: unistd.h,v 1.26 1995/11/22 23:07:19 cgd Exp $	*/
d131 1
a131 1
int	 iruserok __P((u_long, int, const char *, const char *));
@


1.4
log
@sethostid() actually do return a value
@
text
@d129 1
a129 1
int	 initgroups __P((const char *, int));
@


1.3
log
@proto rfork()
@
text
@d155 1
a155 1
void	 sethostid __P((long));
@


1.2
log
@from netbsd; profil() fixed for 64 bit
@
text
@d146 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: unistd.h,v 1.25 1995/03/19 22:51:38 mycroft Exp $	*/
d138 1
a138 1
int	 profil __P((char *, int, int, int));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
