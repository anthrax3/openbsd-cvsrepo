head	1.33;
access;
symbols
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.33.0.8
	OPENBSD_6_0_BASE:1.33
	OPENBSD_5_9:1.33.0.4
	OPENBSD_5_9_BASE:1.33
	OPENBSD_5_8:1.33.0.6
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.33.0.2
	OPENBSD_5_7_BASE:1.33
	OPENBSD_5_6:1.32.0.4
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.31.0.8
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.4
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.31.0.2
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.30.0.4
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.2
	OPENBSD_5_0:1.29.0.2
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.27.0.8
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.6
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.27.0.4
	OPENBSD_4_6_BASE:1.27
	OPENBSD_4_5:1.25.0.14
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.12
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.10
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.8
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.6
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.4
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.2
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.24.0.2
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.33
date	2015.01.18.20.29.31;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	co57ndS86mRpmZRr;

1.32
date	2014.04.28.21.38.59;	author sperreault;	state Exp;
branches;
next	1.31;

1.31
date	2012.09.15.00.47.08;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.17.02.36.55;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2011.07.07.14.25.15;	author sobrado;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.05.00.46.06;	author matthew;	state Exp;
branches;
next	1.27;

1.27
date	2009.06.02.16.47.50;	author jasper;	state Exp;
branches;
next	1.26;

1.26
date	2009.05.07.16.32.53;	author jacekm;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2005.06.08.18.32.32;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.20.22.35.32;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.17.03.57.53;	author itojun;	state Exp;
branches;
next	1.21;

1.21
date	2004.10.25.03.09.01;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2004.10.17.20.24.23;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.14.07.06.15;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.19.34.12;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.03.12.14.30;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.17.19.42.21;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.06.14.40.47;	author jakob;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.05.02.38.05;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.21.15.12.00;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.04.22.54.23;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.15.10.50.39;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.09.12.22.08;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	99.12.30.08.54.20;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	99.07.03.18.14.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.06.23.21.55.29;	author cmetz;	state Exp;
branches;
next	1.5;

1.5
date	99.06.05.23.47.07;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.05.20.58.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.03.13.19.11.49;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.02.19.19.53.13;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Stop including <sys/param.h> from <netdb.h>.  Portable software must either
include <sys/param.h> (to operate in legacy mode) or if it wishes to operate
in the POSIX world use <limits.h>
ok guenther millert doug naddy
@
text
@/*	$OpenBSD: netdb.h,v 1.32 2014/04/28 21:38:59 sperreault Exp $	*/

/*
 * ++Copyright++ 1980, 1983, 1988, 1993
 * -
 * Copyright (c) 1980, 1983, 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * -
 * Portions Copyright (c) 1993 by Digital Equipment Corporation.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies, and that
 * the name of Digital Equipment Corporation not be used in advertising or
 * publicity pertaining to distribution of the document or software without
 * specific, written prior permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT
 * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 * -
 * --Copyright--
 */

/*
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Craig Metz. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of any contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 *      @@(#)netdb.h	8.1 (Berkeley) 6/2/93
 *	$From: netdb.h,v 8.7 1996/05/09 05:59:09 vixie Exp $
 */

#ifndef _NETDB_H_
#define _NETDB_H_

#include <netinet/in.h>

#ifndef	_SOCKLEN_T_DEFINED_
#define	_SOCKLEN_T_DEFINED_
typedef	__socklen_t	socklen_t;	/* length type for network syscalls */
#endif

#define	_PATH_HEQUIV	"/etc/hosts.equiv"
#define	_PATH_HOSTS	"/etc/hosts"
#define	_PATH_NETWORKS	"/etc/networks"
#define	_PATH_PROTOCOLS	"/etc/protocols"
#define	_PATH_SERVICES	"/etc/services"

/*
 * Structures returned by network data base library.  All addresses are
 * supplied in host order, and returned in network order (suitable for
 * use in system calls).
 */
struct	hostent {
	char	*h_name;	/* official name of host */
	char	**h_aliases;	/* alias list */
	int	h_addrtype;	/* host address type */
	int	h_length;	/* length of address */
	char	**h_addr_list;	/* list of addresses from name server */
#define	h_addr	h_addr_list[0]	/* address, for backward compatibility */
};

/*
 * Assumption here is that a network number
 * fits in an in_addr_t -- probably a poor one.
 */
struct	netent {
	char		*n_name;	/* official name of net */
	char		**n_aliases;	/* alias list */
	int		n_addrtype;	/* net address type */
	in_addr_t	n_net;		/* network # */
};

struct	servent {
	char	*s_name;	/* official service name */
	char	**s_aliases;	/* alias list */
	int	s_port;		/* port # */
	char	*s_proto;	/* protocol to use */
};

struct	protoent {
	char	*p_name;	/* official protocol name */
	char	**p_aliases;	/* alias list */
	int	p_proto;	/* protocol # */
};

#if __BSD_VISIBLE || __POSIX_VISIBLE < 200809
extern int h_errno;

/*
 * Error return codes from gethostbyname() and gethostbyaddr()
 * (left in extern int h_errno).
 */

#define	NETDB_INTERNAL	-1	/* see errno */
#define	NETDB_SUCCESS	0	/* no problem */
#define	HOST_NOT_FOUND	1 /* Authoritative Answer Host not found */
#define	TRY_AGAIN	2 /* Non-Authoritative Host not found, or SERVERFAIL */
#define	NO_RECOVERY	3 /* Non recoverable errors, FORMERR, REFUSED, NOTIMP */
#define	NO_DATA		4 /* Valid name, no data record of requested type */
#define	NO_ADDRESS	NO_DATA		/* no address */
#endif /* __BSD_VISIBLE || __POSIX_VISIBLE < 200809 */

/* Values for getaddrinfo() and getnameinfo() */
#define AI_PASSIVE	1	/* socket address is intended for bind() */
#define AI_CANONNAME	2	/* request for canonical name */
#define AI_NUMERICHOST	4	/* don't ever try hostname lookup */
#define AI_EXT		8	/* enable non-portable extensions */
#define AI_NUMERICSERV	16	/* don't ever try servname lookup */
#define AI_FQDN		32	/* return the FQDN that was resolved */
#define AI_ADDRCONFIG	64	/* return configured address families only */
/* valid flags for addrinfo */
#define AI_MASK \
    (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV | AI_FQDN | \
     AI_ADDRCONFIG)

#define NI_NUMERICHOST	1	/* return the host address, not the name */
#define NI_NUMERICSERV	2	/* return the service address, not the name */
#define NI_NOFQDN	4	/* return a short name if in the local domain */
#define NI_NAMEREQD	8	/* fail if either host or service name is unknown */
#define NI_DGRAM	16	/* look up datagram service instead of stream */
/* #define NI_NUMERICSCOPE	32	 return the scope number, not the name */

#if __BSD_VISIBLE
#define NI_MAXHOST	256	/* max host name from getnameinfo (MAXHOSTNAMELEN) */
#define NI_MAXSERV	32	/* max serv. name length returned by getnameinfo */

/*
 * Scope delimit character (KAME hack)
 */
#define SCOPE_DELIMITER '%'
#endif

#define EAI_BADFLAGS	-1	/* invalid value for ai_flags */
#define EAI_NONAME	-2	/* name or service is not known */
#define EAI_AGAIN	-3	/* temporary failure in name resolution */
#define EAI_FAIL	-4	/* non-recoverable failure in name resolution */
#define EAI_NODATA	-5	/* no address associated with name */
#define EAI_FAMILY	-6	/* ai_family not supported */
#define EAI_SOCKTYPE	-7	/* ai_socktype not supported */
#define EAI_SERVICE	-8	/* service not supported for ai_socktype */
#define EAI_ADDRFAMILY	-9	/* address family for name not supported */
#define EAI_MEMORY	-10	/* memory allocation failure */
#define EAI_SYSTEM	-11	/* system error (code indicated in errno) */
#define EAI_BADHINTS	-12	/* invalid value for hints */
#define EAI_PROTOCOL	-13	/* resolved protocol is unknown */
#define EAI_OVERFLOW	-14	/* argument buffer overflow */

struct addrinfo {
	int ai_flags;		/* input flags */
	int ai_family;		/* protocol family for socket */
	int ai_socktype;	/* socket type */
	int ai_protocol;	/* protocol for socket */
	socklen_t ai_addrlen;	/* length of socket-address */
	struct sockaddr *ai_addr; /* socket-address for socket */
	char *ai_canonname;	/* canonical name for service location (iff req) */
	struct addrinfo *ai_next; /* pointer to next in list */
};
 
#if __BSD_VISIBLE
/*
 * Flags for getrrsetbyname()
 */
#define RRSET_VALIDATED		1

/*
 * Return codes for getrrsetbyname()
 */
#define ERRSET_SUCCESS		0
#define ERRSET_NOMEMORY		1
#define ERRSET_FAIL		2
#define ERRSET_INVAL		3
#define ERRSET_NONAME		4
#define ERRSET_NODATA		5

/*
 * Structures used by getrrsetbyname() and freerrset()
 */
struct rdatainfo {
	unsigned int		rdi_length;	/* length of data */
	unsigned char		*rdi_data;	/* record data */
};

struct rrsetinfo {
	unsigned int		rri_flags;	/* RRSET_VALIDATED ... */
	unsigned int		rri_rdclass;	/* class number */
	unsigned int		rri_rdtype;	/* RR type number */
	unsigned int		rri_ttl;	/* time to live */
	unsigned int		rri_nrdatas;	/* size of rdatas array */
	unsigned int		rri_nsigs;	/* size of sigs array */
	char			*rri_name;	/* canonical name */
	struct rdatainfo	*rri_rdatas;	/* individual records */
	struct rdatainfo	*rri_sigs;	/* individual signatures */
};

struct servent_data {
	void *fp;
	char **aliases;
	int maxaliases;
	int stayopen;
	char *line;
};

struct protoent_data {
	void *fp;
	char **aliases;
	int maxaliases;
	int stayopen;
	char *line;
};
#endif

__BEGIN_DECLS
void		endhostent(void);
void		endnetent(void);
void		endprotoent(void);
void		endservent(void);
#if __BSD_VISIBLE || __POSIX_VISIBLE < 200809
struct hostent	*gethostbyaddr(const void *, socklen_t, int);
struct hostent	*gethostbyname(const char *);
#endif
#if __BSD_VISIBLE
struct hostent	*gethostbyname2(const char *, int);
#endif
struct hostent	*gethostent(void);
struct netent	*getnetbyaddr(in_addr_t, int);
struct netent	*getnetbyname(const char *);
struct netent	*getnetent(void);
struct protoent	*getprotobyname(const char *);
struct protoent	*getprotobynumber(int);
struct protoent	*getprotoent(void);
struct servent	*getservbyname(const char *, const char *);
struct servent	*getservbyport(int, const char *);
struct servent	*getservent(void);
#if __BSD_VISIBLE
void		herror(const char *);
const char	*hstrerror(int);
#endif
void		sethostent(int);
/* void		sethostfile(const char *); */
void		setnetent(int);
void		setprotoent(int);
void		setservent(int);

#if __BSD_VISIBLE
void		endprotoent_r(struct protoent_data *);
void		endservent_r(struct servent_data *);
int		getprotobyname_r(const char *, struct protoent *,
		    struct protoent_data *);
int		getprotobynumber_r(int, struct protoent *,
		    struct protoent_data *);
int		getservbyname_r(const char *, const char *, struct servent *,
		    struct servent_data *);
int		getservbyport_r(int, const char *, struct servent *,
		    struct servent_data *);
int		getservent_r(struct servent *, struct servent_data *);
int		getprotoent_r(struct protoent *, struct protoent_data *);
void		setprotoent_r(int, struct protoent_data *);
void		setservent_r(int, struct servent_data *);
#endif

int		getaddrinfo(const char *, const char *,
		    const struct addrinfo *, struct addrinfo **);
void		freeaddrinfo(struct addrinfo *);
int		getnameinfo(const struct sockaddr *, socklen_t,
		    char *, size_t, char *, size_t, int);
const char	*gai_strerror(int);

#if __BSD_VISIBLE
int		getrrsetbyname(const char *, unsigned int, unsigned int, unsigned int, struct rrsetinfo **);
void		freerrset(struct rrsetinfo *);
#endif
__END_DECLS

#endif /* !_NETDB_H_ */
@


1.32
log
@Implement AI_ADDRCONFIG

This is a getaddrinfo() flag that is defined thusly in RFC 3493:

   If the AI_ADDRCONFIG flag is specified, IPv4 addresses shall be
   returned only if an IPv4 address is configured on the local system,
   and IPv6 addresses shall be returned only if an IPv6 address is
   configured on the local system.  The loopback address is not
   considered for this case as valid as a configured address.

      For example, when using the DNS, a query for AAAA records should
      occur only if the node has at least one IPv6 address configured
      (other than IPv6 loopback) and a query for A records should occur
      only if the node has at least one IPv4 address configured (other
      than the IPv4 loopback).

The flag is set by default when hints is NULL.

ok Eric Faurot, Jason McIntyre
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.31 2012/09/15 00:47:08 guenther Exp $	*/
a89 5
#include <sys/cdefs.h>

#if __BSD_VISIBLE
#include <sys/param.h>
#endif
d179 1
a179 1
#define NI_MAXHOST	MAXHOSTNAMELEN	/* max host name returned by getnameinfo */
@


1.31
log
@Improve POSIX/SUS compliance of <netdb.h>, <sys/socket.h>, and <sys/un.h>.

Much ports testing of various versions by naddy@@ and jasper@@
ok matthew@@, miller@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.30 2012/01/17 02:36:55 deraadt Exp $	*/
d170 1
d173 2
a174 1
    (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV | AI_FQDN)
@


1.30
log
@net_addrcmp() dies. found out to be a horrific function by eric
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.29 2011/07/07 14:25:15 sobrado Exp $	*/
d90 3
d94 7
a100 1
#include <sys/cdefs.h>
a107 2
extern int h_errno;

d146 3
d161 1
d179 1
d181 1
d189 1
d216 2
a217 1

a252 1
#if __BSD_VISIBLE
a273 3
#if __BSD_VISIBLE
void		endprotoent_r(struct protoent_data *);
#endif
d275 1
a275 3
#if __BSD_VISIBLE
void		endservent_r(struct servent_data *);
#endif
d278 2
d281 1
a288 7
#if __BSD_VISIBLE
int		getprotobyname_r(const char *, struct protoent *,
		    struct protoent_data *);
int		getprotobynumber_r(int, struct protoent *,
		    struct protoent_data *);
int		getprotoent_r(struct protoent *, struct protoent_data *);
#endif
a292 6
int		getservbyname_r(const char *, const char *, struct servent *,
		    struct servent_data *);
int		getservbyport_r(int, const char *, struct servent *,
		    struct servent_data *);
int		getservent_r(struct servent *, struct servent_data *);
#endif
d295 1
d300 2
d303 12
a315 3
#endif
void		setservent(int);
#if __BSD_VISIBLE
d325 2
d329 1
a330 14

/* This is nec'y to make this include file properly replace the sun version. */
#ifdef sun
#ifdef __GNU_LIBRARY__
#include <rpc/netdb.h>
#else
struct rpcent {
	char	*r_name;	/* name of server for this rpc program */
	char	**r_aliases;	/* alias list */
	int	r_number;	/* rpc program number */
};
struct rpcent	*getrpcbyname(), *getrpcbynumber(), *getrpcent();
#endif /* __GNU_LIBRARY__ */
#endif /* sun */
@


1.29
log
@fix typos; while here, improve spacing in comments.

changes to libevent and zlib headers sent to the upstream maintainers.

ok jmc@@ (for typos), millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.28 2011/04/05 00:46:06 matthew Exp $	*/
a313 1
int		net_addrcmp(struct sockaddr *, struct sockaddr *);
@


1.28
log
@Add AI_FQDN flag to getaddrinfo(3).  Prompted by discussions with djm@@
about cert checking in OpenSSH.  Man page wording tweaks thanks to
jmc@@.

ok henning@@, jmc@@; positive feedback from djm@@, ajacoutat@@

Committing now to reuse guenther@@'s libc minor bump instead of
cranking it again, as suggested by deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.27 2009/06/02 16:47:50 jasper Exp $	*/
d147 1
a147 1
#define	TRY_AGAIN	2 /* Non-Authoritive Host not found, or SERVERFAIL */
@


1.27
log
@- define EAI_OVERFLOW, as per IEEE Std 1003.1-2001(Interpretation #13)

hint from claudio@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.26 2009/05/07 16:32:53 jacekm Exp $	*/
d158 1
d161 1
a161 1
    (AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST | AI_NUMERICSERV)
@


1.26
log
@fix confusing comment; ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.25 2005/12/13 00:35:22 millert Exp $	*/
d189 1
@


1.25
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.24 2005/06/08 18:32:32 millert Exp $	*/
d150 1
a150 1
#define	NO_ADDRESS	NO_DATA		/* no address, look for MX record */
@


1.24
log
@Make gethostbyaddr() prototype match POSIX.  This means len is now
unsigned but there is no ABI change.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.23 2004/12/20 22:35:32 millert Exp $	*/
a90 3
#if (!defined(BSD)) || (BSD < 199306)
# include <sys/bitypes.h>
#endif
d236 1
a236 1
#ifndef POSIX_SOURCE
d258 1
a258 1
#ifndef POSIX_SOURCE
d262 1
a262 1
#ifndef POSIX_SOURCE
d275 1
a275 1
#ifndef POSIX_SOURCE
d285 1
a285 1
#ifndef POSIX_SOURCE
d298 1
a298 1
#ifndef POSIX_SOURCE
d302 1
a302 1
#ifndef POSIX_SOURCE
@


1.23
log
@gai_strerror() should return const char *; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.22 2004/11/17 03:57:53 itojun Exp $	*/
d268 1
a268 1
struct hostent	*gethostbyaddr(const char *, int, int);
@


1.22
log
@remove NI_WITHSCOPEID
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.21 2004/10/25 03:09:01 millert Exp $	*/
d314 1
a314 1
char		*gai_strerror(int);
@


1.21
log
@Change return value of reentrant getproto* and getserv* to match the
IBM/Digital API.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.20 2004/10/17 20:24:23 millert Exp $	*/
a169 1
#define NI_WITHSCOPEID	32	/* KAME hack: attach scopeid to host portion */
@


1.20
log
@Reentrant versions of getprotoent(3) and getservent(3).  Adapted from
changes in NetBSD by Christos.  OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.19 2004/04/14 07:06:15 itojun Exp $	*/
a240 2
struct __sFILE;

d242 1
a242 1
	struct __sFILE *fp;
d250 1
a250 1
	struct __sFILE *fp;
d280 1
a280 1
struct protoent	*getprotobyname_r(const char *, struct protoent *,
d282 1
a282 1
struct protoent	*getprotobynumber_r(int, struct protoent *,
d284 1
a284 1
struct protoent	*getprotoent_r(struct protoent *, struct protoent_data *);
d290 1
a290 1
struct servent	*getservbyname_r(const char *, const char *, struct servent *,
d292 1
a292 1
struct servent	*getservbyport_r(int, const char *, struct servent *,
d294 1
a294 1
struct servent	*getservent_r(struct servent *, struct servent_data *);
@


1.19
log
@implement RFC3493 AI_NUMERICSERV.  tedu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.18 2003/06/02 19:34:12 millert Exp $	*/
d240 20
d264 3
d268 3
d281 7
d291 7
d304 3
d308 3
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.17 2002/06/03 12:14:30 deraadt Exp $	*/
d158 1
a158 1
#define AI_NUMERICHOST	4	/* don't ever try nameservice */
d160 1
d162 2
a163 1
#define AI_MASK		(AI_PASSIVE | AI_CANONNAME | AI_NUMERICHOST)
@


1.17
log
@compatiblity -> compatibility
decriptor -> descriptor
authentciated -> authenticated
transmition -> transmission
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.16 2002/02/17 19:42:21 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.15 2002/02/16 21:27:17 millert Exp $	*/
d119 1
a119 1
#define	h_addr	h_addr_list[0]	/* address, for backward compatiblity */
@


1.15
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.14 2001/08/06 14:40:47 jakob Exp $	*/
d268 2
a269 2
int		getaddrinfo __P((const char *, const char *,
		    const struct addrinfo *, struct addrinfo **));
d271 2
a272 3
int		getnameinfo __P((const struct sockaddr *, socklen_t,
		    char *, size_t, char *, size_t,
		    int));
@


1.14
log
@add getrrsetbyname(3) - API to retrieve arbitrary DNS records
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.13 2001/06/05 02:38:05 deraadt Exp $	*/
d243 24
a266 24
void		endhostent __P((void));
void		endnetent __P((void));
void		endprotoent __P((void));
void		endservent __P((void));
struct hostent	*gethostbyaddr __P((const char *, int, int));
struct hostent	*gethostbyname __P((const char *));
struct hostent	*gethostbyname2 __P((const char *, int));
struct hostent	*gethostent __P((void));
struct netent	*getnetbyaddr __P((in_addr_t, int));
struct netent	*getnetbyname __P((const char *));
struct netent	*getnetent __P((void));
struct protoent	*getprotobyname __P((const char *));
struct protoent	*getprotobynumber __P((int));
struct protoent	*getprotoent __P((void));
struct servent	*getservbyname __P((const char *, const char *));
struct servent	*getservbyport __P((int, const char *));
struct servent	*getservent __P((void));
void		herror __P((const char *));
const char	*hstrerror __P((int));
void		sethostent __P((int));
/* void		sethostfile __P((const char *)); */
void		setnetent __P((int));
void		setprotoent __P((int));
void		setservent __P((int));
d270 1
a270 1
void		freeaddrinfo __P((struct addrinfo *));
d274 2
a275 2
char		*gai_strerror __P((int));
int		net_addrcmp __P((struct sockaddr *, struct sockaddr *));
@


1.13
log
@repair copyright notices for NRL & cmetz; cmetz
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.12 2001/02/21 15:12:00 itojun Exp $	*/
d207 35
d276 2
@


1.12
log
@change ai_addrlen to socklen_t.  now it conforms to
draft-ietf-ipngwg-rfc2553bis-03.txt.  backward compatibility concern:
- should be safe to change signed to unsigned, as we never return
  negative value.
- sizeof(int) is 4 for all archs, so there's no size change with socklen_t
  (= u_int32_t)

commented by deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.11 2000/10/04 22:54:23 espie Exp $	*/
d59 25
a83 6
 * %%% portions-copyright-cmetz-96
 * Portions of this software are Copyright 1996-1998 by Craig Metz, All Rights
 * Reserved. The Inner Net License Version 2 applies to these portions of
 * the software.
 * You should have received a copy of the license with this software. If
 * you didn't get a copy, you may request one from <license@@inner.net>.
@


1.11
log
@Remove parameter names in prototypes (always a bad idea)
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.10 2000/05/15 10:50:39 itojun Exp $	*/
d182 1
a182 1
	int ai_addrlen;		/* length of socket-address */
@


1.10
log
@correct type of 2nd argument to meet RFC2553. (this should raise no ABI
problem due to type promotion).  PR 1228.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.9 2000/02/09 12:22:08 itojun Exp $	*/
d214 7
a220 7
int		getaddrinfo __P((const char *name, const char *service,
		    const struct addrinfo *req, struct addrinfo **pai));
void		freeaddrinfo __P((struct addrinfo *ai));
int		getnameinfo __P((const struct sockaddr *sa, socklen_t addrlen,
		    char *host, size_t hostlen, char *serv, size_t servlen,
		    int flags));
char		*gai_strerror __P((int ecode));
@


1.9
log
@revise extended scoped address format support.  delimiter and the order
is changed, based on discussion in ipngwg scoped address cabal.
past code:	fe80::1@@de0
now:		de0%fe80::1
this will be in sync with next extended address format proposal
(which should be final - I don't want to make this kind of change again).
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.8 1999/12/30 08:54:20 itojun Exp $	*/
d217 1
a217 1
int		getnameinfo __P((const struct sockaddr *sa, size_t addrlen,
@


1.8
log
@replace NRL get{addr,name}info with KAME get{addr,name}info.

removed functionality:
	new code will not return AF_LOCAL addrinfo struct.
added funtionality:
	SOCK_RAW is permitted as ai_socktype (no servname allowed).
	draft-ietf-ipngwg-scopedaddr-format-00.txt
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.7 1999/07/03 18:14:51 deraadt Exp $	*/
d145 2
d161 1
a161 1
#define SCOPE_DELIMITER '@@'
@


1.7
log
@proto net_addrcmp()
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.6 1999/06/23 21:55:29 cmetz Exp $	*/
d151 1
d156 5
d172 2
@


1.6
log
@Added some protocol independent interfaces (supposedly IPv6 support APIs, but
ones that are useful for all protocols, not just IPv6).
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.5 1999/06/05 23:47:07 deraadt Exp $	*/
d152 1
a152 1
#define NI_MAXHOST	MAXHOSTNAMELEN	/* max host name length returned by getnameinfo */
d211 1
@


1.5
log
@getaddrinfo() info prototypes and such; cmetz
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.4 1997/04/05 20:58:28 millert Exp $	*/
d144 1
@


1.4
log
@Use in_addr_t not u_long.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.3 1997/03/13 19:11:49 downsj Exp $	*/
d59 9
d140 37
d202 8
@


1.3
log
@BIND 4.9.5 includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: netdb.h,v 1.2 1997/03/12 11:21:14 downsj Exp $	*/
d96 1
a96 1
 * fits in an unsigned long -- probably a poor one.
d102 1
a102 1
	unsigned long	n_net;		/* network # */
d140 1
a140 1
struct netent	*getnetbyaddr __P((unsigned long, int));
@


1.2
log
@netbsd: bind 4.9.3
@
text
@d1 2
d60 1
a60 1
 *	$Id: netdb.h,v 8.6 1995/12/03 08:31:12 vixie Exp 
d140 1
a140 1
struct netent	*getnetbyaddr __P((long, int)); /* u_long? */
@


1.1
log
@Initial revision
@
text
@d1 5
a5 5
/*	$NetBSD: netdb.h,v 1.5 1995/07/03 22:59:12 jtc Exp $	*/

/*-
 * Copyright (c) 1980, 1983, 1988 Regents of the University of California.
 * All rights reserved.
d34 2
d37 22
a58 1
 *	@@(#)netdb.h	5.15 (Berkeley) 4/3/91
d64 6
d76 2
d94 1
a94 1
 * fits in 32 bits -- probably a poor one.
d121 2
a122 2
extern int h_errno;

a128 2
#include <sys/cdefs.h>

d136 1
d148 1
a148 1
char		*hstrerror __P((int));
d155 14
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
