head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.22
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.20
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.18
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.16
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.14
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.12
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.10
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2015.09.04.23.47.09;	author daniel;	state Exp;
branches;
next	1.6;
commitid	IjaXQSJgyijL2fNX;

1.6
date	2014.03.16.18.38.30;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.24.22.17.03;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.02.14.06.16;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.02.12.55.31;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.09.24.23.09.09;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	99.09.24.22.33.10;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@These days pcc defines __GNUC__ and we don't support gcc2. Also needed
for upcoming CompCert port.

Final version of the diff is from kettenis@@ with input from jsg@@ and tedu@@.

ok kettenis@@, jsg@@, "I agree" millert@@
@
text
@/* $OpenBSD: stdbool.h,v 1.6 2014/03/16 18:38:30 guenther Exp $ */

/*
 * Written by Marc Espie, September 25, 1999
 * Public domain.
 */

#ifndef	_STDBOOL_H_
#define	_STDBOOL_H_	

#ifndef __cplusplus

#if defined(__GNUC__) || \
	(defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901)
/* Support for C99: type _Bool is already built-in. */
#define false	0
#define true	1

#else
/* `_Bool' type must promote to `int' or `unsigned int'. */
typedef enum {
	false = 0,
	true = 1
} _Bool;

/* And those constants must also be available as macros. */
#define	false	false
#define	true	true

#endif

/* User visible type `bool' is provided as a macro which may be redefined */
#define bool _Bool

#else /* __cplusplus */
#define _Bool 	bool
#define bool 	bool
#define false 	false
#define true 	true
#endif /* __cplusplus */

/* Inform that everything is fine */
#define __bool_true_false_are_defined 1

#endif /* _STDBOOL_H_ */
@


1.6
log
@lint is dead (long live the lint!), so stop using it as a cpp conditional
(namespace pollution!) or talking about its opinion on code.

ok krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: stdbool.h,v 1.5 2010/07/24 22:17:03 guenther Exp $ */
d13 3
a15 2
#if (defined(__GNUC__) && __GNUC__ >= 3) || defined(__PCC__)
/* Support for _C99: type _Bool is already built-in. */
@


1.5
log
@Teach lint about C99's _Bool and _Complex, plus some related gcc
extensions: __real__ and __imag__ operators, the use of '~' for
complex conjugation, and 'i' or 'j' as a suffix for complex constants.
While this doesn't handle folding and overflow detection for complex
constants correctly, it's good enough to make it through libm...and
found several bugs once it could do so.

"no objections" miod@@, krw@@
@
text
@d1 1
a1 1
/* $OpenBSD: stdbool.h,v 1.4 2007/10/02 14:06:16 otto Exp $ */
d13 1
a13 1
#if (defined(__GNUC__) && __GNUC__ >= 3) || defined(__PCC__) || defined(lint)
@


1.4
log
@pcc knows _Bool. ok beck@@ miod @@millert
@
text
@d1 1
a1 1
/* $OpenBSD: stdbool.h,v 1.3 2004/10/02 12:55:31 espie Exp $ */
d13 1
a13 1
#if (defined(__GNUC__) && __GNUC__ >= 3) || defined(__PCC__)
@


1.3
log
@let stdbool.h work with recent gcc, since they modified the interface,
again...


okay millert@@  a while back, needed some more paranoid testing from my
part...
@
text
@d1 1
a1 1
/* $OpenBSD: stdbool.h,v 1.2 1999/09/24 23:09:09 espie Exp $ */
d13 1
a13 1
#if defined(__GNUC__) && __GNUC__ >= 3
@


1.2
log
@Copyright...
@
text
@d1 1
a1 1
/* $OpenBSD: stdbool.h,v 1.1 1999/09/24 22:33:10 espie Exp $ */
d11 8
d29 2
d33 7
@


1.1
log
@stdbool.h conforming to C9X
@
text
@d1 7
a7 1
/* $OpenBSD$ */
@

