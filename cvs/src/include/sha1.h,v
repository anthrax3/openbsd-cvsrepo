head	1.24;
access;
symbols
	OPENBSD_6_0:1.24.0.16
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.12
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.14
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.6
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.10
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.8
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.24.0.4
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.2
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.23.0.34
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.32
	OPENBSD_5_0:1.23.0.30
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.28
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.23.0.26
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.23.0.22
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.23.0.24
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.20
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.18
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.23.0.16
	OPENBSD_4_3_BASE:1.23
	OPENBSD_4_2:1.23.0.14
	OPENBSD_4_2_BASE:1.23
	OPENBSD_4_1:1.23.0.12
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.10
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.8
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.6
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.4
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.2
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.12
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.8
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.6
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.24
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2004.06.22.01.57.30;	author jfb;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.05.17.09.45;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2004.05.03.18.05.08;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.27.15.54.56;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.07.22.17.27;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.23.04.33.31;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.02.03.03.13.18;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	97.07.15.01.54.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.07.12.20.06.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.10.23.37.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.10.22.53.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.09.30.23.27.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.30.03.55.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.09.29.18.30.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.09.29.16.13.19;	author millert;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@/*	$OpenBSD: sha1.h,v 1.23 2004/06/22 01:57:30 jfb Exp $	*/

/*
 * SHA-1 in C
 * By Steve Reid <steve@@edmweb.com>
 * 100% Public Domain
 */

#ifndef _SHA1_H
#define _SHA1_H

#define	SHA1_BLOCK_LENGTH		64
#define	SHA1_DIGEST_LENGTH		20
#define	SHA1_DIGEST_STRING_LENGTH	(SHA1_DIGEST_LENGTH * 2 + 1)

typedef struct {
    u_int32_t state[5];
    u_int64_t count;
    u_int8_t buffer[SHA1_BLOCK_LENGTH];
} SHA1_CTX;

__BEGIN_DECLS
void SHA1Init(SHA1_CTX *);
void SHA1Pad(SHA1_CTX *);
void SHA1Transform(u_int32_t [5], const u_int8_t [SHA1_BLOCK_LENGTH])
	__attribute__((__bounded__(__minbytes__,1,5)))
	__attribute__((__bounded__(__minbytes__,2,SHA1_BLOCK_LENGTH)));
void SHA1Update(SHA1_CTX *, const u_int8_t *, size_t)
	__attribute__((__bounded__(__string__,2,3)));
void SHA1Final(u_int8_t [SHA1_DIGEST_LENGTH], SHA1_CTX *)
	__attribute__((__bounded__(__minbytes__,1,SHA1_DIGEST_LENGTH)));
char *SHA1End(SHA1_CTX *, char *)
	__attribute__((__bounded__(__minbytes__,2,SHA1_DIGEST_STRING_LENGTH)));
char *SHA1File(const char *, char *)
	__attribute__((__bounded__(__minbytes__,2,SHA1_DIGEST_STRING_LENGTH)));
char *SHA1FileChunk(const char *, char *, off_t, off_t)
	__attribute__((__bounded__(__minbytes__,2,SHA1_DIGEST_STRING_LENGTH)));
char *SHA1Data(const u_int8_t *, size_t, char *)
	__attribute__((__bounded__(__string__,1,2)))
	__attribute__((__bounded__(__minbytes__,3,SHA1_DIGEST_STRING_LENGTH)));
__END_DECLS

#define HTONDIGEST(x) do {                                              \
        x[0] = htonl(x[0]);                                             \
        x[1] = htonl(x[1]);                                             \
        x[2] = htonl(x[2]);                                             \
        x[3] = htonl(x[3]);                                             \
        x[4] = htonl(x[4]); } while (0)

#define NTOHDIGEST(x) do {                                              \
        x[0] = ntohl(x[0]);                                             \
        x[1] = ntohl(x[1]);                                             \
        x[2] = ntohl(x[2]);                                             \
        x[3] = ntohl(x[3]);                                             \
        x[4] = ntohl(x[4]); } while (0)

#endif /* _SHA1_H */
@


1.23
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.22 2004/05/05 17:09:45 millert Exp $	*/
a20 2

#include <sys/cdefs.h>
@


1.22
log
@Make the 2nd arg to SHA1Transform const again and unifdef SHA1HANDSOFF.
It was defined before and there is no need to for this knob...
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.21 2004/05/03 18:05:08 millert Exp $	*/
d36 1
a36 1
char *SHA1File(char *, char *)
d38 1
a38 1
char *SHA1FileChunk(char *, char *, off_t, off_t)
@


1.21
log
@Use KNF indentation style and do some u_char -> u_int8_t conversion
I missed earlier.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.20 2004/05/03 17:30:14 millert Exp $	*/
d27 1
a27 1
void SHA1Transform(u_int32_t [5], u_int8_t [SHA1_BLOCK_LENGTH])
@


1.20
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.19 2004/04/29 15:51:16 millert Exp $	*/
d27 1
a27 1
void SHA1Transform(u_int32_t [5], const u_int8_t [SHA1_BLOCK_LENGTH])
@


1.19
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.18 2004/04/27 15:54:56 millert Exp $	*/
d26 1
d30 1
a30 1
void SHA1Update(SHA1_CTX *, const u_int8_t *, unsigned int)
d37 2
@


1.18
log
@Make the bit count u_int64_t instead of two u_int32_t.  Adapted from
changes Niklas made to the md5 code long ago.  OK hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.17 2004/04/26 19:38:12 millert Exp $	*/
d27 2
a28 2
		__attribute__((__bounded__(__minbytes__,1,5)))
		__attribute__((__bounded__(__minbytes__,2,SHA1_BLOCK_LENGTH)));
d30 1
a30 1
		__attribute__((__bounded__(__string__,2,3)));
d32 8
a39 8
		__attribute__((__bounded__(__minbytes__,1,SHA1_DIGEST_LENGTH)));
char *SHA1End(SHA1_CTX *, char [SHA1_DIGEST_STRING_LENGTH])
		__attribute__((__bounded__(__minbytes__,2,SHA1_DIGEST_STRING_LENGTH)));
char *SHA1File(char *, char [SHA1_DIGEST_STRING_LENGTH])
		__attribute__((__bounded__(__minbytes__,2,SHA1_DIGEST_STRING_LENGTH)));
char *SHA1Data(const u_int8_t *, size_t, char [SHA1_DIGEST_STRING_LENGTH])
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,3,SHA1_DIGEST_STRING_LENGTH)));
@


1.17
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.16 2004/01/22 21:48:02 espie Exp $	*/
d18 1
a18 1
    u_int32_t count[2];
d25 1
a28 1
void SHA1Init(SHA1_CTX *);
@


1.16
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.15 2003/10/07 22:17:27 avsm Exp $	*/
d12 4
d19 1
a19 1
    unsigned char buffer[64];
d25 1
a25 1
void SHA1Transform(u_int32_t [5], const unsigned char [64])
d27 1
a27 1
		__attribute__((__bounded__(__minbytes__,2,64)));
d29 1
a29 1
void SHA1Update(SHA1_CTX *, const unsigned char *, unsigned int)
d31 7
a37 7
void SHA1Final(unsigned char [20], SHA1_CTX *)
		__attribute__((__bounded__(__minbytes__,1,20)));
char *SHA1End(SHA1_CTX *, char *)
		__attribute__((__bounded__(__minbytes__,2,41)));
char *SHA1File(char *, char *)
		__attribute__((__bounded__(__minbytes__,2,41)));
char *SHA1Data(const unsigned char *, size_t, char *)
d39 1
a39 1
		__attribute__((__bounded__(__minbytes__,3,41)));
a41 2
#define SHA1_DIGESTSIZE       20
#define SHA1_BLOCKSIZE        64
@


1.15
log
@corrent __bounded__ attribute for the *Data functions, and add
__minbytes__ checks where appropriate.  tested by itojun@@

fixes PR 3505 from Janjaap van Velthooven
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.14 2003/08/01 17:38:33 avsm Exp $	*/
d15 1
a15 1
    u_char buffer[64];
d21 1
a21 1
void SHA1Transform(u_int32_t state[5], const u_char buffer[64])
d24 2
a25 2
void SHA1Init(SHA1_CTX *context);
void SHA1Update(SHA1_CTX *context, const u_char *data, u_int len)
d27 1
a27 1
void SHA1Final(u_char digest[20], SHA1_CTX *context)
d33 1
a33 1
char *SHA1Data(const u_char *, size_t, char *)
@


1.14
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.13 2003/06/26 19:34:17 avsm Exp $	*/
d21 3
a23 1
void SHA1Transform(u_int32_t state[5], const u_char buffer[64]);
d25 8
a32 4
void SHA1Update(SHA1_CTX *context, const u_char *data, u_int len);
void SHA1Final(u_char digest[20], SHA1_CTX *context);
char *SHA1End(SHA1_CTX *, char *);
char *SHA1File(char *, char *);
d34 2
a35 1
		__attribute__((__bounded__ (__string__,3,2)));
@


1.13
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.11 2002/12/23 04:33:31 millert Exp $	*/
d27 2
a28 1
char *SHA1Data(const u_char *, size_t, char *);
@


1.12
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d27 1
a27 2
char *SHA1Data(const u_char *, size_t, char *)
		__attribute__((__bounded__ (__string__,3,2)));
@


1.11
log
@o Ansi function headers
o Add __BEGIN_DECLS/__END_DECLS to include files
o Safe macros
o Remove useless variable assignment in the End function of *hl.c
o Some minor KNF, needs more
From Dan Weeks
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.10 2002/02/16 21:27:17 millert Exp $	*/
d27 2
a28 1
char *SHA1Data(const u_char *, size_t, char *);
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.9 1999/02/03 03:13:18 angelos Exp $	*/
d14 1
a14 1
    u_int32_t count[2];  
d17 4
a20 1
  
d28 1
d32 13
a44 13
#define HTONDIGEST(x) { \
      x[0] = htonl(x[0]); \
      x[1] = htonl(x[1]); \
      x[2] = htonl(x[2]); \
      x[3] = htonl(x[3]); \
      x[4] = htonl(x[4]); }

#define NTOHDIGEST(x) { \
      x[0] = ntohl(x[0]); \
      x[1] = ntohl(x[1]); \
      x[2] = ntohl(x[2]); \
      x[3] = ntohl(x[3]); \
      x[4] = ntohl(x[4]); }
@


1.9
log
@Add some useful defines (used by ssyslog).
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.8 1997/07/15 01:54:23 millert Exp $	*/
d18 7
a24 7
void SHA1Transform __P((u_int32_t state[5], const u_char buffer[64]));
void SHA1Init __P((SHA1_CTX *context));
void SHA1Update __P((SHA1_CTX *context, const u_char *data, u_int len));
void SHA1Final __P((u_char digest[20], SHA1_CTX *context));
char *SHA1End __P((SHA1_CTX *, char *));
char *SHA1File __P((char *, char *));
char *SHA1Data __P((const u_char *, size_t, char *));
@


1.8
log
@Add a missing const
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.7 1997/07/12 20:06:01 millert Exp $	*/
d25 16
@


1.7
log
@Add SHA1End, SHA1File, SHA1Data helper functions like in md5(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.6 1997/07/10 23:37:49 millert Exp $	*/
d18 1
a18 1
void SHA1Transform __P((u_int32_t state[5], u_char buffer[64]));
d20 1
a20 1
void SHA1Update __P((SHA1_CTX *context, u_char *data, u_int len));
@


1.6
log
@Be consistent wrt unsigned vs. u_*
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.5 1997/07/10 22:53:01 millert Exp $	*/
d22 3
@


1.5
log
@Different sha1 functions (taken from netinet's if_sha1.c) that
are more consistent with md4/md5 functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_sha1.h,v 1.3 1997/06/21 00:09:20 deraadt Exp $	*/
d18 4
a21 4
void SHA1Transform __P((u_int32_t state[5], unsigned char buffer[64]));
void SHA1Init __P((SHA1_CTX* context));
void SHA1Update __P((SHA1_CTX* context, unsigned char* data, unsigned int len));
void SHA1Final __P((unsigned char digest[20], SHA1_CTX* context));
@


1.4
log
@export byte swapping routine.
@
text
@d1 7
a7 8
/* --------------------------------- SHA1.H ------------------------------- */
   
/* NIST proposed Secure Hash Standard.
   
   Written 2 September 1992, Peter C. Gutmann.
   This implementation placed in the public domain.
   
   Comments to pgut1@@cs.aukuni.ac.nz */
a11 7
/* The SHA1 block size and message digest sizes, in bytes */

#define SHA1_BLOCKSIZE   64
#define SHA1_DIGESTSIZE  20

/* The structure for storing SHA1 info */

d13 9
a21 35
	u_int32_t digest[ 5 ];		/* Message digest */
	u_int32_t countLo, countHi;	/* 64-bit bit count */
	u_int32_t data[ 16 ];		/* SHA1 data buffer */
} SHA1_INFO;

/* The next def turns on the change to the algorithm introduced by NIST at
 * the behest of the NSA.  It supposedly corrects a weakness in the original
 * formulation.  Bruce Schneier described it thus in a posting to the
 * Cypherpunks mailing list on June 21, 1994 (as told to us by Steve Bellovin):
 *
 *	This is the fix to the Secure Hash Standard, NIST FIPS PUB 180:
 *
 *	     In Section 7 of FIPS 180 (page 9), the line which reads
 *
 *	     "b) For t=16 to 79 let Wt = Wt-3 XOR Wt-8 XOR Wt-14 XOR
 *	     Wt-16."
 *
 *	     is to be replaced by
 *
 *	     "b) For t=16 to 79 let Wt = S1(Wt-3 XOR Wt-8 XOR Wt-14 XOR
 *	     Wt-16)."
 *
 *	     where S1 is a left circular shift by one bit as defined in
 *	     Section 3 of FIPS 180 (page 6):
 *
 *	     S1(X) = (X<<1) OR (X>>31).
 *
 */
#define NEW_SHA1

void sha1Init __P((SHA1_INFO *));
void sha1Transform __P((SHA1_INFO *));
void sha1Final __P((SHA1_INFO *));
void sha1Update __P((SHA1_INFO *, unsigned char *, int));
void sha1ByteReverse __P((u_int32_t *, int));
@


1.3
log
@Protect prototypes with __P.
@
text
@d55 1
@


1.2
log
@Add function prototypes.
@
text
@a12 5
/* Useful defines/typedefs */

typedef unsigned char   BYTE;
typedef u_int32_t	LONG;

d21 4
a24 4
	       LONG digest[ 5 ];            /* Message digest */
	       LONG countLo, countHi;       /* 64-bit bit count */
	       LONG data[ 16 ];             /* SHA1 data buffer */
	       } SHA1_INFO;
d51 4
a54 4
void sha1Init (SHA1_INFO *);
void sha1Transform (SHA1_INFO *);
void sha1Final (SHA1_INFO *);
void sha1Update (SHA1_INFO *, BYTE *, int);
@


1.1
log
@Added sha1 (secure hash function).
@
text
@d10 3
d54 1
d56 6
a61 1
#define NEW_SHA1
@
