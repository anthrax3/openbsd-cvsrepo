head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.18
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.20
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.16
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.12
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.14
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.10
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.34
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.32
	OPENBSD_5_0:1.16.0.30
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.28
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.26
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.22
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.24
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.20
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.18
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.16
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2012.12.05.23.19.57;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2004.06.22.01.57.30;	author jfb;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.03.17.30.14;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.04.29.15.51.16;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.26.19.38.12;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.07.22.17.27;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.01.17.38.33;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.26.19.34.17;	author avsm;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.26.18.35.13;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.23.04.33.31;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.01.20.36.17;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	99.08.16.09.59.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.03.23.12.49.28;	author janjaap;	state Exp;
branches;
next	1.2;

1.2
date	97.09.21.10.45.49;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.07.17.05.36.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@/*	$OpenBSD: rmd160.h,v 1.16 2004/06/22 01:57:30 jfb Exp $	*/
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef  _RMD160_H
#define  _RMD160_H

#define	RMD160_BLOCK_LENGTH		64
#define	RMD160_DIGEST_LENGTH		20
#define	RMD160_DIGEST_STRING_LENGTH	(RMD160_DIGEST_LENGTH * 2 + 1)

/* RMD160 context. */
typedef struct RMD160Context {
	u_int32_t state[5];			/* state */
	u_int64_t count;			/* number of bits, mod 2^64 */
	u_int8_t buffer[RMD160_BLOCK_LENGTH];	/* input buffer */
} RMD160_CTX;

__BEGIN_DECLS
void	 RMD160Init(RMD160_CTX *);
void	 RMD160Transform(u_int32_t [5], const u_int8_t [RMD160_BLOCK_LENGTH])
		__attribute__((__bounded__(__minbytes__,1,5)))
		__attribute__((__bounded__(__minbytes__,2,RMD160_BLOCK_LENGTH)));
void	 RMD160Update(RMD160_CTX *, const u_int8_t *, size_t)
		__attribute__((__bounded__(__string__,2,3)));
void	 RMD160Pad(RMD160_CTX *);
void	 RMD160Final(u_int8_t [RMD160_DIGEST_LENGTH], RMD160_CTX *)
		__attribute__((__bounded__(__minbytes__,1,RMD160_DIGEST_LENGTH)));
char	*RMD160End(RMD160_CTX *, char *)
		__attribute__((__bounded__(__minbytes__,2,RMD160_DIGEST_STRING_LENGTH)));
char	*RMD160File(const char *, char *)
		__attribute__((__bounded__(__minbytes__,2,RMD160_DIGEST_STRING_LENGTH)));
char	*RMD160FileChunk(const char *, char *, off_t, off_t)
		__attribute__((__bounded__(__minbytes__,2,RMD160_DIGEST_STRING_LENGTH)));
char	*RMD160Data(const u_int8_t *, size_t, char *)
		__attribute__((__bounded__(__string__,1,2)))
		__attribute__((__bounded__(__minbytes__,3,RMD160_DIGEST_STRING_LENGTH)));
__END_DECLS

#endif  /* _RMD160_H */
@


1.16
log
@Make the `filename' parameter to HASHFile() and HASHFileChunk() const
ok pedro@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.15 2004/05/03 17:30:14 millert Exp $	*/
a37 2

#include <sys/cdefs.h>
@


1.15
log
@Add Pad and FileChunk functions for each family of hash functions.
The Pad function does padding like in Final but does not finish processing.
The FileChunk function creates a digest from a portion of a file.
Also made the length parameters consistent (and size_t).
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.14 2004/04/29 15:51:16 millert Exp $	*/
d53 1
a53 1
char	*RMD160File(char *, char *)
d55 1
a55 1
char	*RMD160FileChunk(char *, char *, off_t, off_t)
@


1.14
log
@Undo some recent prototype changes; it is legal to pass the helper
functions can take a NULL buf pointer.  They will malloc memory as
needed in this case.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.13 2004/04/26 19:38:12 millert Exp $	*/
d46 1
a46 1
void	 RMD160Update(RMD160_CTX *, const u_int8_t *, u_int32_t)
d48 1
d54 2
@


1.13
log
@Use a common source file for all the hash helper functions that
previously lived in foohl.c.  The foohl.c files are now generated
via sed, though perhaps cpp could be used in the future.

Use u_int8_t instead of unsigned char for the buffers struct fooContext.
Add constants for buffer lengths and use them in function prototypes
and the man pages.

This is basically cosmetic surgery; there should be no functional changes.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.12 2004/01/22 21:48:02 espie Exp $	*/
d50 1
a50 1
char	*RMD160End(RMD160_CTX *, char [RMD160_DIGEST_STRING_LENGTH])
d52 1
a52 1
char	*RMD160File(char *, char [RMD160_DIGEST_STRING_LENGTH])
d54 1
a54 1
char	*RMD160Data(const u_int8_t *, size_t, char [RMD160_DIGEST_STRING_LENGTH])
@


1.12
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.11 2003/10/07 22:17:27 avsm Exp $	*/
d28 4
d34 3
a36 3
	u_int32_t state[5];		/* state */
	u_int64_t count;		/* number of bits, modulo 2^64 */
	unsigned char buffer[64];	/* input buffer */
d43 1
a43 1
void	 RMD160Transform(u_int32_t [5], const unsigned char [64])
d45 2
a46 2
		__attribute__((__bounded__(__minbytes__,2,64)));
void	 RMD160Update(RMD160_CTX *, const unsigned char *, u_int32_t)
d48 7
a54 7
void	 RMD160Final(unsigned char [20], RMD160_CTX *)
		__attribute__((__bounded__(__minbytes__,1,20)));
char	*RMD160End(RMD160_CTX *, char *)
		__attribute__((__bounded__(__minbytes__,2,41)));
char	*RMD160File(char *, char *)
		__attribute__((__bounded__(__minbytes__,2,41)));
char	*RMD160Data(const unsigned char *, size_t, char *)
d56 1
a56 1
		__attribute__((__bounded__(__minbytes__,3,41)));
@


1.11
log
@corrent __bounded__ attribute for the *Data functions, and add
__minbytes__ checks where appropriate.  tested by itojun@@

fixes PR 3505 from Janjaap van Velthooven
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.10 2003/08/01 17:38:33 avsm Exp $	*/
d30 3
a32 3
	u_int32_t state[5];	/* state */
	u_int64_t count;	/* number of bits, modulo 2^64 */
	u_char buffer[64];	/* input buffer */
d39 1
a39 1
void	 RMD160Transform(u_int32_t [5], const u_char [64])
d42 1
a42 1
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t)
d44 1
a44 1
void	 RMD160Final(u_char [20], RMD160_CTX *)
d50 1
a50 1
char	*RMD160Data(const u_char *, size_t, char *)
@


1.10
log
@add __bounded__ attributes for userland headers; enabled with -Wbounded
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.9 2003/06/26 19:34:17 avsm Exp $	*/
d39 11
a49 5
void	 RMD160Transform(u_int32_t [5], const u_char [64]);
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t);
void	 RMD160Final(u_char [20], RMD160_CTX *);
char	*RMD160End(RMD160_CTX *, char *);
char	*RMD160File(char *, char *);
d51 2
a52 1
		__attribute__((__bounded__(__string__,3,2)));
@


1.9
log
@backout the __bounded__ attributes for a while; requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.7 2002/12/23 04:33:31 millert Exp $	*/
d44 2
a45 1
char	*RMD160Data(const u_char *, size_t, char *);
@


1.8
log
@Mark various standard library functions with the __bounded__ attribute.
You must have an up-to-date gcc for this!
deraadt@@ ok
@
text
@d44 1
a44 2
char	*RMD160Data(const u_char *, size_t, char *)
		__attribute__((__bounded__(__string__,3,2)));
@


1.7
log
@o Ansi function headers
o Add __BEGIN_DECLS/__END_DECLS to include files
o Safe macros
o Remove useless variable assignment in the End function of *hl.c
o Some minor KNF, needs more
From Dan Weeks
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.6 2002/02/16 21:27:17 millert Exp $	*/
d44 2
a45 1
char	*RMD160Data(const u_char *, size_t, char *);
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.5 2001/10/01 20:36:17 markus Exp $	*/
d35 3
d45 1
@


1.5
log
@new rmd160 implementation.  based on
ftp://ftp.rsasecurity.com/pub/cryptobytes/crypto3n2.pdf, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d35 7
a41 7
void	 RMD160Init __P((RMD160_CTX *));
void	 RMD160Transform __P ((u_int32_t [5], const u_char [64]));
void	 RMD160Update __P((RMD160_CTX *, const u_char *, u_int32_t));
void	 RMD160Final __P((u_char [20], RMD160_CTX *));
char	*RMD160End __P((RMD160_CTX *, char *));
char	*RMD160File __P((char *, char *));
char	*RMD160Data __P((const u_char *, size_t, char *));
@


1.4
log
@prototype mismatch for RMD160Update()
@
text
@d1 3
a3 9
/*	$OpenBSD: rmd160.h,v 1.3 1998/03/23 12:49:28 janjaap Exp $	*/

/********************************************************************\
 *
 *      FILE:     rmd160.h
 *
 *      CONTENTS: Header file for a sample C-implementation of the
 *                RIPEMD-160 hash-function. 
 *      TARGET:   any computer with an ANSI C compiler
d5 8
a12 3
 *      AUTHOR:   Antoon Bosselaers, ESAT-COSIC
 *      DATE:     1 March 1996
 *      VERSION:  1.0
d14 12
a25 6
 *      Copyright (c) Katholieke Universiteit Leuven
 *      1996, All Rights Reserved
 *
\********************************************************************/

#ifndef  _RMD160_H	/* make sure this file is read only once */
d28 5
a32 9
/********************************************************************/

/* structure definitions */

typedef struct {
	u_int32_t state[5];	/* state (ABCDE) */
	u_int32_t length[2];	/* number of bits */
	u_char	bbuffer[64];    /* overflow buffer */
	u_int32_t buflen;	/* number of chars in bbuffer */
d35 7
a41 11
/********************************************************************/

/* function prototypes */

void RMD160Init __P((RMD160_CTX *context));
void RMD160Transform __P((u_int32_t state[5], const u_int32_t block[16]));
void RMD160Update __P((RMD160_CTX *context, const u_char *data, u_int32_t nbytes));
void RMD160Final __P((u_char digest[20], RMD160_CTX *context));
char *RMD160End __P((RMD160_CTX *, char *));
char *RMD160File __P((char *, char *));
char *RMD160Data __P((const u_char *, size_t, char *));
a43 2

/*********************** end of file rmd160.h ***********************/
@


1.3
log
@teach rmd160 not to throw leftovers out the window
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.2 1997/09/21 10:45:49 niklas Exp $	*/
d40 1
a40 1
void RMD160Update __P((RMD160_CTX *context, const u_char *data, u_int nbytes));
@


1.2
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 2
a31 1
	u_int32_t buffer[16];	/* input buffer */
@


1.1
log
@mdX(3)-like interface to RIPEMD-160 hash function.  Code by
Antoon Bosselaers and massaged by me to fit the mdX(3) API.
@
text
@d1 2
@
