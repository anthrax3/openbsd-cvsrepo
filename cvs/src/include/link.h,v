head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.12
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.8
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.10
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.40
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.38
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.36
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.34
	OPENBSD_5_0:1.14.0.32
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.30
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.28
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.24
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.26
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.22
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.20
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.18
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.16
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.14
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.12
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.6
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2013.10.19.09.00.18;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.22.21.48.02;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.07.20.35.03;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.07.03.00.01;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.03.12.14.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.02.22.49.59;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.08.07.45.18;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.08.07.00.48;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.31.14.04.52;	author art;	state Exp;
branches;
next	1.5;

1.5
date	99.12.09.18.10.23;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	99.05.18.15.50.09;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	97.09.21.10.45.40;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.11.17.44.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.41.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove more knowledge of a.out and stab information from the tree.
ok miod
@
text
@/*	$OpenBSD: link.h,v 1.14 2004/01/22 21:48:02 espie Exp $	*/
/*	$NetBSD: link.h,v 1.10 1996/01/09 00:00:11 pk Exp $	*/

/*
 * Copyright (c) 1993 Paul Kranenburg
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Kranenburg.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef _LINK_H_
#define _LINK_H_

#ifdef __ELF__
#include <link_elf.h>
#endif

/*
 * A `Shared Object Descriptor' describes a shared object that is needed
 * to complete the link edit process of the object containing it.
 * A list of such objects (chained through `sod_next') is pointed at
 * by `sdt_sods' in the section_dispatch_table structure.
 */

struct sod {	/* Shared Object Descriptor */
	long		sod_name;	/* name (relative to load address) */
	unsigned int 	sod_library : 1,/* Searched for by library rules */
			sod_reserved : 31;
	short		sod_major;	/* major version number */
	short		sod_minor;	/* minor version number */
	long		sod_next;	/* next sod */
};

/*
 * `Shared Object Map's are used by the run-time link editor (ld.so) to
 * keep track of all shared objects loaded into a process' address space.
 * These structures are only used at run-time and do not occur within
 * the text or data segment of an executable or shared library.
 */
struct so_map {		/* Shared Object Map */
	caddr_t		som_addr;	/* Address at which object mapped */
	char 		*som_path;	/* Path to mmap'ed file */
	struct so_map	*som_next;	/* Next map in chain */
	struct sod	*som_sod;	/* Sod responsible for this map */
	caddr_t		som_sodbase;	/* Base address of this sod */
	unsigned int	som_write : 1;	/* Text is currently writable */
	struct _dynamic	*som_dynamic;	/* _dynamic structure */
	caddr_t		som_spd;	/* Private data */
};


/*
 *	Debug rendezvous struct. Pointer to this is set up in the
 *	target code pointed by the DT_DEBUG tag. If it is
 *	defined.
 */
struct r_debug {
	int	r_version;		/* Protocol version. */
	struct link_map *r_map;		/* Head of list of loaded objects. */

	/*
	 * This is the address of a function internal to the run-time linker,
	 * that will always be called when the linker begins to map in a
	 * library or unmap it, and again when the mapping change is complete.
	 * The debugger can set a breakpoint at this address if it wants to
	 * notice shared object mapping changes.
	 */
	unsigned long r_brk;
	enum {
		/*
		 * This state value describes the mapping change taking place
		 * when the `r_brk' address is called.
		 */
		RT_CONSISTENT,		/* Mapping change is complete.  */
		RT_ADD,			/* Adding a new object.  */
		RT_DELETE		/* Removing an object mapping.  */
	} r_state;

	unsigned long r_ldbase;		/* Base address the linker is loaded at.  */
};



/*
 * Maximum number of recognized shared object version numbers.
 */
#define MAXDEWEY	8

/*
 * Header of the hints file.
 */
struct hints_header {
	long		hh_magic;
#define HH_MAGIC	011421044151
	long		hh_version;	/* Interface version number */
#define LD_HINTS_VERSION_1	1
#define LD_HINTS_VERSION_2	2
	long		hh_hashtab;	/* Location of hash table */
	long		hh_nbucket;	/* Number of buckets in hashtab */
	long		hh_strtab;	/* Location of strings */
	long		hh_strtab_sz;	/* Size of strings */
	long		hh_ehints;	/* End of hints (max offset in file) */
	long		hh_dirlist;	/* Colon-separated list of srch dirs */
};

#define HH_BADMAG(hdr)	((hdr).hh_magic != HH_MAGIC)

/*
 * Hash table element in hints file.
 */
struct hints_bucket {
	/* namex and pathx are indices into the string table */
	int		hi_namex;		/* Library name */
	int		hi_pathx;		/* Full path */
	int		hi_dewey[MAXDEWEY];	/* The versions */
	int		hi_ndewey;		/* Number of version numbers */
#define hi_major hi_dewey[0]
#define hi_minor hi_dewey[1]
	int		hi_next;		/* Next in this bucket */
};

#define _PATH_LD_HINTS		"/var/run/ld.so.hints"

#endif /* _LINK_H_ */

@


1.14
log
@Remove unnecessary typedef usage.

u_char -> unsigned char
u_short -> unsigned short
u_long -> unsigned long
u_int -> unsigned int

okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.13 2002/09/07 20:35:03 deraadt Exp $	*/
a39 2
#else
#include <link_aout.h>
@


1.13
log
@remove , at end of enum
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.12 2002/06/07 03:00:01 art Exp $	*/
d52 6
a57 6
	long	sod_name;		/* name (relative to load address) */
	u_int	sod_library  : 1,	/* Searched for by library rules */
		sod_reserved : 31;
	short	sod_major;		/* major version number */
	short	sod_minor;		/* minor version number */
	long	sod_next;		/* next sod */
d72 1
a72 1
	u_int		som_write : 1;	/* Text is currently writable */
@


1.12
log
@split link.h into three parts. The MI parts are left in link.h
a.out stuff in link_aout.h and ELF stuff in link_elf.h.
Switch sparc64 back to MI link.h.
drahn@@ ok (powerpc will switch soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.11 2002/06/03 12:14:30 deraadt Exp $	*/
d102 1
a102 1
		RT_DELETE,		/* Removing an object mapping.  */
@


1.11
log
@compatiblity -> compatibility
decriptor -> descriptor
authentciated -> authenticated
transmition -> transmission
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.10 2002/06/02 22:49:59 deraadt Exp $	*/
a33 7
/*
 * RRS section definitions.
 *
 * The layout of some data structures defined in this header file is
 * such that we can provide compatibility with the SunOS 4.x shared
 * library scheme.
 */
d38 4
a41 3
/* XXXART - ? */
#ifndef DT_PROCNUM
#define DT_PROCNUM 0
a76 87
/*
 * Symbol description with size. This is simply an `nlist' with
 * one field (nz_size) added.
 * Used to convey size information on items in the data segment
 * of shared objects. An array of these live in the shared object's
 * text segment and is addressed by the `sdt_nzlist' field.
 */
struct nzlist {
	struct nlist	nlist;
	u_long		nz_size;
#define nz_un		nlist.n_un
#define nz_strx		nlist.n_un.n_strx
#define nz_name		nlist.n_un.n_name
#define nz_type		nlist.n_type
#define nz_value	nlist.n_value
#define nz_desc		nlist.n_desc
#define nz_other	nlist.n_other
};

#define N_AUX(p)	((p)->n_other & 0xf)
#define N_BIND(p)	(((unsigned int)(p)->n_other >> 4) & 0xf)
#define N_OTHER(r, v)	(((unsigned int)(r) << 4) | ((v) & 0xf))

#define AUX_OBJECT	1
#define AUX_FUNC	2
/*#define BIND_LOCAL	0	not used */
/*#define BIND_GLOBAL	1	not used */
#define BIND_WEAK	2


/*
 * The `section_dispatch_table' structure contains offsets to various data
 * structures needed to do run-time relocation.
 */
struct section_dispatch_table {
	struct so_map *sdt_loaded;	/* List of loaded objects */
	long	sdt_sods;		/* List of shared objects descriptors */
	long	sdt_paths;		/* Library search paths */
	long	sdt_got;		/* Global offset table */
	long	sdt_plt;		/* Procedure linkage table */
	long	sdt_rel;		/* Relocation table */
	long	sdt_hash;		/* Symbol hash table */
	long	sdt_nzlist;		/* Symbol table itself */
	long	sdt_filler2;		/* Unused (was: stab_hash) */
	long	sdt_buckets;		/* Number of hash buckets */
	long	sdt_strings;		/* Symbol strings */
	long	sdt_str_sz;		/* Size of symbol strings */
	long	sdt_text_sz;		/* Size of text area */
	long	sdt_plt_sz;		/* Size of procedure linkage table */
};

/*
 * RRS symbol hash table, addressed by `sdt_hash' in section_dispatch_table.
 * Used to quickly lookup symbols of the shared object by hashing
 * on the symbol's name. `rh_symbolnum' is the index of the symbol
 * in the shared object's symbol list (`sdt_nzlist'), `rh_next' is
 * the next symbol in the hash bucket (in case of collisions).
 */
struct rrs_hash {
	int	rh_symbolnum;		/* Symbol number */
	int	rh_next;		/* Next hash entry */
};

/*
 * `rt_symbols' is used to keep track of run-time allocated commons
 * and data items copied from shared objects.
 */
struct rt_symbol {
	struct nzlist		*rt_sp;		/* The symbol */
	struct rt_symbol	*rt_next;	/* Next in linear list */
	struct rt_symbol	*rt_link;	/* Next in bucket */
	caddr_t			rt_srcaddr;	/* Address of "master" copy */
	struct so_map		*rt_smp;	/* Originating map */
};

/*
 * Debugger interface structure.
 */
struct so_debug {
	int	dd_version;		/* Version # of interface */
	int	dd_in_debugger;		/* Set when run by debugger */
	int	dd_sym_loaded;		/* Run-time linking brought more
					   symbols into scope */
	char   	 *dd_bpt_addr;		/* Address of rtld-generated bpt */
	int	dd_bpt_shadow;		/* Original contents of bpt */
	struct rt_symbol *dd_cc;	/* Allocated commons/copied data */
};
a107 77
/*
 * Entry points into ld.so - user interface to the run-time linker.
 */
struct ld_entry {
	void	*(*dlopen)(const char *, int);
	int	(*dlclose)(void *);
	void	*(*dlsym)(void *, const char *);
	int	(*dlctl)(void *, int, void *);
	void	(*dlexit)(void);
	void	(*dlrsrvd[3])(void);
};

/*
 * This is the structure pointed at by the __DYNAMIC symbol if an
 * executable requires the attention of the run-time link editor.
 * __DYNAMIC is given the value zero if no run-time linking needs to
 * be done (it is always present in shared objects).
 * The union `d_un' provides for different versions of the dynamic
 * linking mechanism (switched on by `d_version'). The last version
 * used by Sun is 3. We leave some room here and go to version number
 * 8 for NetBSD, the main difference lying in the support for the
 * `nz_list' type of symbols.
 */

struct	_dynamic {
	int		d_version;	/* version # of this interface */
	struct so_debug	*d_debug;
	union {
		struct section_dispatch_table *d_sdt;
	} d_un;
	struct ld_entry *d_entry;	/* compat - now in crt_ldso */
};

#define LD_VERSION_SUN		(3)
#define LD_VERSION_BSD		(8)
#define LD_VERSION_NZLIST_P(v)	((v) >= 8)

#define LD_GOT(x)	((x)->d_un.d_sdt->sdt_got)
#define LD_PLT(x)	((x)->d_un.d_sdt->sdt_plt)
#define LD_REL(x)	((x)->d_un.d_sdt->sdt_rel)
#define LD_SYMBOL(x)	((x)->d_un.d_sdt->sdt_nzlist)
#define LD_HASH(x)	((x)->d_un.d_sdt->sdt_hash)
#define LD_STRINGS(x)	((x)->d_un.d_sdt->sdt_strings)
#define LD_NEED(x)	((x)->d_un.d_sdt->sdt_sods)
#define LD_BUCKETS(x)	((x)->d_un.d_sdt->sdt_buckets)
#define LD_PATHS(x)	((x)->d_un.d_sdt->sdt_paths)

#define LD_GOTSZ(x)	((x)->d_un.d_sdt->sdt_plt - (x)->d_un.d_sdt->sdt_got)
#define LD_RELSZ(x)	((x)->d_un.d_sdt->sdt_hash - (x)->d_un.d_sdt->sdt_rel)
#define LD_HASHSZ(x)	((x)->d_un.d_sdt->sdt_nzlist - (x)->d_un.d_sdt->sdt_hash)
#define LD_STABSZ(x)	((x)->d_un.d_sdt->sdt_strings - (x)->d_un.d_sdt->sdt_nzlist)
#define LD_PLTSZ(x)	((x)->d_un.d_sdt->sdt_plt_sz)
#define LD_STRSZ(x)	((x)->d_un.d_sdt->sdt_str_sz)
#define LD_TEXTSZ(x)	((x)->d_un.d_sdt->sdt_text_sz)

/*
 * Interface to ld.so
 */
struct crt_ldso {
	int		crt_ba;		/* Base address of ld.so */
	int		crt_dzfd;	/* "/dev/zero" file descriptor (SunOS) */
	int		crt_ldfd;	/* ld.so file descriptor */
	struct _dynamic	*crt_dp;	/* Main's __DYNAMIC */
	char		**crt_ep;	/* environment strings */
	caddr_t		crt_bp;		/* Breakpoint if run from debugger */
	char		*crt_prog;	/* Program name (v3) */
	char		*crt_ldso;	/* Link editor name (v4) */
	struct ld_entry	*crt_ldentry;	/* dl*() access (v4) */
};

/*
 * Version passed from crt0 to ld.so (1st argument to _rtld()).
 */
#define CRT_VERSION_SUN		1
#define CRT_VERSION_BSD_2	2
#define CRT_VERSION_BSD_3	3
#define CRT_VERSION_BSD_4	4
@


1.10
log
@withough -> without
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.9 2002/02/16 21:27:17 millert Exp $	*/
d261 1
a261 1
	int		crt_dzfd;	/* "/dev/zero" file decriptor (SunOS) */
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.8 2001/06/08 07:45:18 art Exp $	*/
d20 1
a20 1
 *    derived from this software withough specific prior written permission
@


1.8
log
@oops.
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.7 2001/06/08 07:00:48 art Exp $	*/
d205 6
a210 6
	void	*(*dlopen) __P((const char *, int));
	int	(*dlclose) __P((void *));
	void	*(*dlsym) __P((void *, const char *));
	int	(*dlctl) __P((void *, int, void *));
	void	(*dlexit) __P((void));
	void	(*dlrsrvd[3]) __P((void));
@


1.7
log
@Ooops. Add struct r_debug, from powerpc.
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.6 2001/05/31 14:04:52 art Exp $	*/
a44 2
#include <sys/exec_elf.h>

d173 1
a173 1
 *	target code pointed by the DT_MIPS_RLD_MAP tag. If it is
a175 1

d187 1
a187 1
	Elf_Addr r_brk;
d198 1
a198 1
	Elf_Addr r_ldbase;		/* Base address the linker is loaded at.  */
a199 1

@


1.6
log
@If DT_PROCNUM is not defined, assume it's 0
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.5 1999/12/09 18:10:23 espie Exp $	*/
d45 2
d172 32
@


1.5
log
@dlopen and dlsym take const char * parameters.
Fix prototypes, propagate const where applicable.
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.4 1999/05/18 15:50:09 espie Exp $	*/
d44 5
@


1.4
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.3 1997/09/21 10:45:40 niklas Exp $	*/
d170 1
a170 1
	void	*(*dlopen) __P((char *, int));
d172 1
a172 1
	void	*(*dlsym) __P((void *, char *));
@


1.3
log
@Well, as we are heading for a release people are encouraged to rebuild their
entire trees for testing anyway, I might as well do this intrusive touching
of include files now.  Added openBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: link.h,v 1.10 1996/01/09 00:00:11 pk Exp $	*/
d46 1
a46 1
 * A `Shared Object Descriptor' descibes a shared object that is needed
@


1.2
log
@from netbsd:
Define LD_HINTS_VERSION_2:
        - no longer hash on minor version number in hints file.
        - add list of ldconfig(8) search directories.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: link.h,v 1.9 1995/09/23 22:26:15 pk Exp $	*/
d257 1
d263 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
