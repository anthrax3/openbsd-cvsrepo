head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.08.10.13.35.18;	author guenther;	state Exp;
branches;
next	1.4;
commitid	0eYqP5wkLwGIcXMZ;

1.4
date	2017.04.20.16.07.52;	author visa;	state Exp;
branches;
next	1.3;
commitid	9CgPZOFcHiM9FgHe;

1.3
date	2016.05.07.19.05.21;	author guenther;	state Exp;
branches;
next	1.2;
commitid	d9R7VGw9CHTkwXE1;

1.2
date	2016.03.20.02.30.28;	author guenther;	state Exp;
branches;
next	1.1;
commitid	NBSvZnB5vLEhTQkX;

1.1
date	2015.09.14.08.16.14;	author guenther;	state Exp;
branches;
next	;
commitid	6SDgVrKiCVDNNKz2;


desc
@@


1.5
log
@fix typo in comment
@
text
@/*	$OpenBSD: tib.h,v 1.4 2017/04/20 16:07:52 visa Exp $	*/
/*
 * Copyright (c) 2011,2014 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Thread Information Block (TIB) and Thread Local Storage (TLS) handling
 * (the TCB, Thread Control Block, is part of the TIB)
 */

#ifndef	_TIB_H_
#define	_TIB_H_

#include <sys/types.h>
#include <machine/tcb.h>

#include <stddef.h>


/*
 * This header defines struct tib and at least eight macros:
 *	TLS_VARIANT
 *		Either 1 or 2  (Actually defined by <machine/tcb.h>)
 *
 *	TCB_SET(tcb)
 *		Set the TCB pointer for this thread to 'tcb'
 *
 *	TCB_GET()
 *		Return the TCB pointer for this thread
 *
 *	TCB_TO_TIB(tcb)
 *		Given a TCB pointer, return the matching TIB pointer
 *
 *	TIB_TO_TCB(tib)
 *		Given a TIB pointer, return the matching TCB pointer
 *
 *	TIB_INIT(tib, dtv, thread)
 *		Initializes a TIB for a new thread, using the supplied
 *		values for its dtv and thread pointers
 *
 *	TIB_GET()
 *		Short-hand for TCB_TO_TIB(TCB_GET())
 *
 *	TIB_EXTRA_ALIGN
 *		On TLS varaint 2 archs, what alignment is sufficient
 *		for the extra space that will be used for struct pthread?
 *
 * The following functions are provided by either ld.so (dynamic) or
 * libc (static) for allocating and freeing a common memory block that
 * will hold both the TIB and the pthread structure:
 *	_dl_allocate_tib(sizeof(struct pthread))
 *		Allocates a combined TIB and pthread memory region.
 *		The argument is the amount of space to reserve
 *		for the pthread structure.  Returns a pointer to
 *		the TIB inside the allocated block.
 *
 * 	_dl_free_tib(tib, sizeof(struct pthread))
 *		Frees a TIB and pthread block previously allocated
 *		with _dl_allocate_tib().  Must be passed the return
 *		value of that previous call.
 */

/*
 * Regarding <machine/tcb.h>:
 *  - it must define the TLS_VARIANT macro
 *  - it may define TCB_OFFSET if the TCB address in the kernel and/or
 *    register is offset from the actual TCB address.  TCB_OFFSET > 0
 *    means the kernel/register points to *after* the real data.
 *  - if there's a faster way to get or set the TCB pointer for the thread
 *    than the __{get,set}_tcb() syscalls, it should define either or both
 *    the TCB_{GET,SET} macros to do so.
 */


/* All archs but mips64 have fast TCB_GET() and don't need caching */
#ifndef	__mips64__
# define TCB_HAVE_MD_GET	1
#endif
#ifdef	TCB_SET
# define TCB_HAVE_MD_SET	1
#else
# define TCB_SET(tcb)		__set_tcb(tcb)
#endif
#ifndef TCB_OFFSET
# define TCB_OFFSET	0
#endif

/*
 * tib_cantcancel values is non-zero if the thread should skip all
 * cancellation processing
 */
#define CANCEL_DISABLED	1
#define CANCEL_DYING	2

/*
 * tib_cancel_point is non-zero if we're in a cancel point; its modified
 * by the cancel point code and read by the cancellation signal handler
 */
#define CANCEL_POINT		1
#define CANCEL_POINT_DELAYED	2


#if TLS_VARIANT == 1
/*
 * ABI specifies that the static TLS data starts two words after the
 * (notional) thread pointer, with the first of those two words being
 * the TLS dtv pointer.  The other (second) word is reserved for the
 * implementation, so we place the pointer to the thread structure there,
 * but we place our actual thread bits before the TCB, at negative offsets
 * from the TCB pointer.  Ergo, memory is laid out, low to high, as:
 *
 *	[pthread structure]
 *	TIB {
 *		...cancelation and other int-sized info...
 *		int errno
 *		void *locale
 *		TCB (- TCB_OFFSET) {
 *			void *dtv
 *			struct pthread *thread
 *		}
 *	}
 *	static TLS data
 */

struct tib {
	int	tib_thread_flags;	/* internal to libpthread */
	pid_t	tib_tid;
	int	tib_cantcancel;
	int	tib_cancel_point;
	int	tib_canceled;
	int	tib_errno;
	void	*tib_locale;
	void	*tib_dtv;		/* internal to the runtime linker */
	void	*tib_thread;
};


#elif TLS_VARIANT == 2
/*
 * ABI specifies that the static TLS data occupies the memory before
 * the TCB pointer, at negative offsets, and that on i386 and amd64
 * the word the TCB points to contains a pointer to itself.  So,
 * we place errno and our thread bits after that.  Memory is laid
 * out, low to high, as:
 *	static TLS data
 *	TIB {
 *		TCB (- TCB_OFFSET) {
 *			self pointer [i386/amd64 only]
 *			void *dtv
 *		}
 *		struct pthread *thread
 *		void *locale
 *		int errno
 *		...cancelation and other int-sized info...
 *	}
 *	[pthread structure]
 */

struct tib {
#if defined(__i386) || defined(__amd64)
	struct	tib *__tib_self;
# define __tib_tcb __tib_self
#endif
	void	*tib_dtv;		/* internal to the runtime linker */
	void	*tib_thread;
	void	*tib_locale;
	int	tib_errno;
	int	tib_canceled;
	int	tib_cancel_point;
	int	tib_cantcancel;
	pid_t	tib_tid;
	int	tib_thread_flags;	/* internal to libpthread */
#if !defined(__LP64__) && !defined(__i386)
	int	__tib_padding;		/* padding for 8byte alignment */
#endif
};

#if defined(__i386) || defined(__amd64)
# define _TIB_PREP(tib)	\
	((void)((tib)->__tib_self = (tib)))
#elif !defined(__LP64__) && !defined(__i386)
# define _TIB_PREP(tib)	((void)((tib)->__tib_padding = 0))
#endif

#define	TIB_EXTRA_ALIGN		sizeof(void *)

#else
# error "unknown TLS variant"
#endif

/* nothing to do by default */
#ifndef	_TIB_PREP
# define _TIB_PREP(tib)	((void)0)
#endif

#define	TIB_INIT(tib, dtv, thread)	do {		\
		(tib)->tib_thread	= (thread);	\
		(tib)->tib_locale	= NULL;		\
		(tib)->tib_cantcancel	= 0;		\
		(tib)->tib_cancel_point	= 0;		\
		(tib)->tib_canceled	= 0;		\
		(tib)->tib_dtv		= (dtv);	\
		(tib)->tib_errno	= 0;		\
		_TIB_PREP(tib);				\
	} while (0)

#ifndef	__tib_tcb
# define __tib_tcb		tib_dtv
#endif
#define	_TIBO_TCB		(offsetof(struct tib, __tib_tcb) + TCB_OFFSET)

#define	TCB_TO_TIB(tcb)		((struct tib *)((char *)(tcb) - _TIBO_TCB))
#define	TIB_TO_TCB(tib)		((char *)(tib) + _TIBO_TCB)
#define	TIB_GET()		TCB_TO_TIB(TCB_GET())


__BEGIN_DECLS
void	*_dl_allocate_tib(size_t _extra) __dso_public;
void	_dl_free_tib(void *_tib, size_t _extra) __dso_public;

/* The actual syscalls */
void	*__get_tcb(void);
void	__set_tcb(void *_tcb);
__END_DECLS

#endif /* _TIB_H_ */
@


1.4
log
@Get TCB address using the RDHWR instruction instead of __get_tcb().
This gives fast access to the address on systems that implement
the UserLocal register. TCB caching is still used when running
in the single-threaded mode in order not to penalize old systems.

The kernel counterpart of this change must be in place before
using this diff!

With guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tib.h,v 1.3 2016/05/07 19:05:21 guenther Exp $	*/
d101 1
a101 1
 * tib_cantcancel values is non-zero is the thread should skip all
@


1.3
log
@Use a Thread Information Block in both single and multi-threaded programs.
This stores errno, the cancelation flags, and related bits for each thread
and is allocated by ld.so or libc.a.  This is an ABI break from 5.9-stable!

Make libpthread dlopen'able by moving the cancelation wrappers into libc
and doing locking and fork/errno handling via callbacks that libpthread
registers when it first initializes.  'errno' *must* be declared via
<errno.h> now!

Clean up libpthread's symbol exports like libc.

On powerpc, offset the TIB/TCB/TLS data from the register per the ELF spec.

Testing by various, particularly sthen@@ and patrick@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tib.h,v 1.2 2016/03/20 02:30:28 guenther Exp $	*/
d87 2
a88 2
/* If <machine/tcb.h> doesn't provide a better way, then use the default */
#ifdef	TCB_GET
a89 2
#else
# define TCB_GET()		__get_tcb()
@


1.2
log
@Prepare for future ld.so/libc bump: update <tib.h> with the definitions
that will be needed and make libpthread work when ld.so/libc.a provide an
initial TIB.
@
text
@d1 1
a1 1
/*	$OpenBSD: tib.h,v 1.1 2015/09/14 08:16:14 guenther Exp $	*/
d49 1
a49 1
 *	TIB_INIT(tib, dtv)
d51 1
a51 4
 *		value for the dtv pointer
 *
 *	TIB_TO_THREAD(tib)
 *		Given a TIB pointer, return a pointer to the struct pthread
a55 3
 *	TIB_THREAD()
 *		Returns a pointer to this thread's struct pthread
 *
d63 1
a63 1
 *	_dl_allocate_tib(sizeof(struct pthread), flags)
d65 3
a67 6
 *		The first argument is the amount of space to reserve
 *		for the pthread structure; the second argument is
 *		either zero or DAT_UPDATE_CURRENT, the latter meaning
 *		this call is to update/replace the current thread's
 *		TIB.  Returns a pointer to the TIB inside the
 *		allocated block.
d71 1
a71 1
 *		with _dl_allocate_tls().  Must be passed the return
d78 3
d98 17
d122 3
a124 3
 * implementation, so we place the thread's locale there, but we place
 * our thread bits before the TCB, at negative offsets from the
 * TCB pointer.  Ergo, memory is laid out, low to high, as:
d128 1
a128 2
 *		int cancel_flags
 *		int cancel_requested
d131 1
a131 1
 *		TCB {
d140 5
a144 5
#ifdef __LP64__
	int	__tib_padding;		/* padding for 8byte alignment */
#endif
	int	tib_cancel_flags;
	int	tib_cancel;
a149 3
#ifdef __LP64__
# define _TIB_PREP(tib)	((void)((tib)->__tib_padding = 0))
#endif
a150 1
#define	_TIBO_PTHREAD		(- _ALIGN(sizeof(struct pthread)))
d161 1
a161 1
 *		TCB {
d168 1
a168 2
 *		int cancel_count_flags
 *		int cancel_requested
d182 6
a187 3
	int	tib_cancel;		/* set to request cancelation */
	int	tib_cancel_flags;
#if defined(__LP64__) || defined(__i386)
a191 2
#define	_TIBO_PTHREAD		_ALIGN(sizeof(struct tib))

d194 2
a195 2
	((void)((tib)->__tib_self = (tib), (tib)->__tib_padding = 0))
#elif defined(__LP64__)
d213 3
a215 2
		(tib)->tib_cancel_flags	= 0;		\
		(tib)->tib_cancel	= 0;		\
d224 1
a224 1
#define	_TIBO_TCB		offsetof(struct tib, __tib_tcb)
a227 1
#define	TIB_TO_THREAD(tib)	((struct pthread *)(tib)->tib_thread)
a228 1
#define	TCB_THREAD()		TIB_TO_THREAD(TIB_GET())
@


1.1
log
@Prefer the standardized <poll.h> over <sys/poll.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.5 2013/02/14 03:38:15 guenther Exp $	*/
a52 3
 *	TIB_COPY(tib, oldtib)
 *		Copies oldtib to tib, (re)initializing the internal members
 *
d94 4
a97 2
#ifndef	TCB_GET
#define	TCB_GET()	__get_tcb()
d99 4
a102 2
#ifndef	TCB_SET
#define	TCB_SET(tcb)	__set_tcb(tcb)
d115 1
a115 1
 *	pthread structure
d120 1
d123 1
a123 1
 *			void *locale
d130 3
a132 1
	int	__tib_padding		/* padding for 8byte alignment */
d136 1
d138 1
a138 1
	void	*tib_locale;
d140 3
a142 1
#define _TIB_PREP(tib)	((void)((tib)->__tib_padding = 0))
d159 1
d165 1
a165 1
 *	pthread structure
d171 1
a171 1
#define	__tib_tcb __tib_self
d174 1
d179 1
a179 1
#if !defined(__i386)
d186 2
a187 4
#if defined(__i386)
#define _TIB_PREP(tib)	((void)((tib)->__tib_self = (tib)))
#elif defined(__amd64)
#define _TIB_PREP(tib)	\
d189 2
a190 2
#else
#define _TIB_PREP(tib)	((void)((tib)->__tib_padding = 0))
d201 1
a201 1
#define	_TIB_PREP(tib)	((void)0)
d204 2
a205 1
#define	TIB_INIT(tib, dtv)	do {		\
a212 4
#define	TIB_COPY(tib, oldtib)		do {		\
		*(tib) = *(oldtib);			\
		_TIB_PREP(tib);				\
	} while (0)
d215 1
a215 1
#define	__tib_tcb		tib_dtv
d221 1
a221 4
#define	TIB_TO_THREAD(tib)	((struct pthread *)((char *)(tib) + \
				_TIBO_PTHREAD))
#define	THREAD_TO_TIB(thread)	((struct tib *)((char *)(thread) - \
				_TIBO_PTHREAD))
d223 1
a223 1
#define	TIB_THREAD()		TIB_TO_THREAD(TIB_GET())
d227 1
a227 2
void	*_dl_allocate_tib(size_t _extra, int _flags) __dso_public;
#define	DAT_UPDATE_CURRENT	1
a232 3

/* The function in libc called by crt0 to init the tcb in static processes */
void	__init_tcb(char **_envp) __dso_hidden;
@

