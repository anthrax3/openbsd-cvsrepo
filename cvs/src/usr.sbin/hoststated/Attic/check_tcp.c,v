head	1.31;
access;
symbols
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.23.0.2
	OPENBSD_4_1_BASE:1.23;
locks; strict;
comment	@ * @;


1.31
date	2007.12.07.17.27.07;	author deraadt;	state dead;
branches;
next	1.30;

1.30
date	2007.11.24.17.07.28;	author reyk;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.21.20.13.20;	author reyk;	state Exp;
branches;
next	1.28;

1.28
date	2007.11.21.13.04.42;	author reyk;	state Exp;
branches;
next	1.27;

1.27
date	2007.11.19.15.20.18;	author reyk;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.28.13.29.56;	author pyr;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.07.14.17.33;	author pyr;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.27.20.53.10;	author pyr;	state Exp;
branches;
next	1.23;

1.23
date	2007.02.22.05.58.06;	author reyk;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.08.13.32.24;	author reyk;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.07.15.13.00;	author reyk;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.07.14.54.13;	author reyk;	state Exp;
branches;
next	1.19;

1.19
date	2007.02.07.14.45.12;	author reyk;	state Exp;
branches;
next	1.18;

1.18
date	2007.02.07.14.39.45;	author reyk;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.06.10.27.33;	author reyk;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.06.10.26.13;	author pyr;	state Exp;
branches;
next	1.15;

1.15
date	2007.02.03.20.24.21;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2007.02.03.17.45.59;	author reyk;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.30.10.09.02;	author pyr;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.29.14.23.31;	author pyr;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.20.16.32.10;	author pyr;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.12.16.43.01;	author pyr;	state Exp;
branches;
next	1.9;

1.9
date	2007.01.11.18.05.08;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.09.00.45.32;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.08.17.10.23;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.25.19.05.41;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.25.18.12.14;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.16.12.42.14;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.31
log
@hoststated/hoststatectl get repository copied (and de-tagged) into
relayd/relayctl.  This is a more suitable place for a daemon that has
grown out of it's initial roots of "monitoring and redirecting services
at various layers", into one that is "a full featured proxy, which
happens to know what is up/down"
@
text
@/*	$OpenBSD: check_tcp.c,v 1.30 2007/11/24 17:07:28 reyk Exp $	*/

/*
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>

#include <net/if.h>
#include <netinet/in.h>

#include <limits.h>
#include <event.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <fnmatch.h>
#include <sha1.h>

#include <openssl/ssl.h>

#include "hoststated.h"

void	tcp_write(int, short, void *);
void	tcp_host_up(int, struct ctl_tcp_event *);
void	tcp_send_req(int, short, void *);
void	tcp_read_buf(int, short, void *);

int	check_http_code(struct ctl_tcp_event *);
int	check_http_digest(struct ctl_tcp_event *);
int	check_send_expect(struct ctl_tcp_event *);

void
check_tcp(struct ctl_tcp_event *cte)
{
	int			 s;
	int			 type;
	socklen_t		 len;
	struct timeval		 tv;
	struct linger		 lng;

	switch (cte->host->conf.ss.ss_family) {
	case AF_INET:
		((struct sockaddr_in *)&cte->host->conf.ss)->sin_port =
			cte->table->conf.port;
		break;
	case AF_INET6:
		((struct sockaddr_in6 *)&cte->host->conf.ss)->sin6_port =
			cte->table->conf.port;
		break;
	}

	len = ((struct sockaddr *)&cte->host->conf.ss)->sa_len;

	if ((s = socket(cte->host->conf.ss.ss_family, SOCK_STREAM, 0)) == -1)
		goto bad;

	bzero(&lng, sizeof(lng));
	if (setsockopt(s, SOL_SOCKET, SO_LINGER, &lng, sizeof(lng)) == -1)
		goto bad;

	type = 1;
	if (setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &type, sizeof(type)) == -1)
		goto bad;

	if (fcntl(s, F_SETFL, O_NONBLOCK) == -1)
		goto bad;

	bcopy(&cte->table->conf.timeout, &tv, sizeof(tv));
	if (connect(s, (struct sockaddr *)&cte->host->conf.ss, len) == -1) {
		if (errno != EINPROGRESS)
			goto bad;
	}

	cte->host->up = HOST_UP;
	event_set(&cte->ev, s, EV_TIMEOUT|EV_WRITE, tcp_write, cte);
	event_add(&cte->ev, &tv);
	return;

bad:
	close(s);
	cte->host->up = HOST_DOWN;
	hce_notify_done(cte->host, "check_tcp: cannot connect");
}

void
tcp_write(int s, short event, void *arg)
{
	struct ctl_tcp_event	*cte = arg;
	int			 err;
	socklen_t		 len;

	if (event == EV_TIMEOUT) {
		log_debug("tcp_write: connect timed out");
		cte->host->up = HOST_DOWN;
	} else {
		len = sizeof(err);
		if (getsockopt(s, SOL_SOCKET, SO_ERROR, &err, &len))
			fatal("tcp_write: getsockopt");
		if (err != 0)
			cte->host->up = HOST_DOWN;
		else
			cte->host->up = HOST_UP;
	}

	if (cte->host->up == HOST_UP)
		tcp_host_up(s, cte);
	else {
		close(s);
		hce_notify_done(cte->host, "tcp_write: connect failed");
	}
}

void
tcp_host_up(int s, struct ctl_tcp_event *cte)
{
	cte->s = s;

	switch (cte->table->conf.check) {
	case CHECK_TCP:
		if (cte->table->conf.flags & F_SSL)
			break;
		close(s);
		hce_notify_done(cte->host, "tcp_host_up: connect successful");
		return;
	case CHECK_HTTP_CODE:
		cte->validate_read = NULL;
		cte->validate_close = check_http_code;
		break;
	case CHECK_HTTP_DIGEST:
		cte->validate_read = NULL;
		cte->validate_close = check_http_digest;
		break;
	case CHECK_SEND_EXPECT:
		cte->validate_read = check_send_expect;
		cte->validate_close = check_send_expect;
		break;
	}

	if (cte->table->conf.flags & F_SSL) {
		ssl_transaction(cte);
		return;
	}

	if (cte->table->sendbuf != NULL) {
		cte->req = cte->table->sendbuf;
		event_again(&cte->ev, s, EV_TIMEOUT|EV_WRITE, tcp_send_req,
		    &cte->tv_start, &cte->table->conf.timeout, cte);
		return;
	}

	if ((cte->buf = buf_dynamic(SMALL_READ_BUF_SIZE, UINT_MAX)) == NULL)
		fatalx("tcp_host_up: cannot create dynamic buffer");
	event_again(&cte->ev, s, EV_TIMEOUT|EV_READ, tcp_read_buf,
	    &cte->tv_start, &cte->table->conf.timeout, cte);
}

void
tcp_send_req(int s, short event, void *arg)
{
	struct ctl_tcp_event	*cte = arg;
	int			 bs;
	int			 len;

	if (event == EV_TIMEOUT) {
		cte->host->up = HOST_DOWN;
		close(cte->s);
		hce_notify_done(cte->host, "tcp_send_req: timeout");
		return;
	}
	len = strlen(cte->req);
	do {
		bs = write(s, cte->req, len);
		if (bs == -1) {
			if (errno == EAGAIN || errno == EINTR)
				goto retry;
			log_warnx("tcp_send_req: cannot send request");
			cte->host->up = HOST_DOWN;
			close(cte->s);
			hce_notify_done(cte->host, "tcp_send_req: write");
			return;
		}
		cte->req += bs;
		len -= bs;
	} while (len > 0);

	if ((cte->buf = buf_dynamic(SMALL_READ_BUF_SIZE, UINT_MAX)) == NULL)
		fatalx("tcp_send_req: cannot create dynamic buffer");
	event_again(&cte->ev, s, EV_TIMEOUT|EV_READ, tcp_read_buf,
	    &cte->tv_start, &cte->table->conf.timeout, cte);
	return;

 retry:
	event_again(&cte->ev, s, EV_TIMEOUT|EV_WRITE, tcp_send_req,
	    &cte->tv_start, &cte->table->conf.timeout, cte);
}

void
tcp_read_buf(int s, short event, void *arg)
{
	ssize_t			 br;
	char			 rbuf[SMALL_READ_BUF_SIZE];
	struct ctl_tcp_event	*cte = arg;

	if (event == EV_TIMEOUT) {
		cte->host->up = HOST_DOWN;
		buf_free(cte->buf);
		close(s);
		hce_notify_done(cte->host, "tcp_read_buf: timeout");
		return;
	}

	bzero(rbuf, sizeof(rbuf));
	br = read(s, rbuf, sizeof(rbuf) - 1);
	switch (br) {
	case -1:
		if (errno == EAGAIN || errno == EINTR)
			goto retry;
		cte->host->up = HOST_DOWN;
		buf_free(cte->buf);
		close(cte->s);
		hce_notify_done(cte->host, "tcp_read_buf: read failed");
		return;
	case 0:
		cte->host->up = HOST_DOWN;
		(void)cte->validate_close(cte);
		close(cte->s);
		buf_free(cte->buf);
		if (cte->host->up == HOST_UP)
			hce_notify_done(cte->host,
			    "tcp_read_buf: check succeeded");
		else
			hce_notify_done(cte->host,
			    "tcp_read_buf: check failed");
		return;
	default:
		if (buf_add(cte->buf, rbuf, br) == -1)
			fatal("tcp_read_buf: buf_add error");
		if (cte->validate_read != NULL) {
			if (cte->validate_read(cte) != 0)
				goto retry;

			close(cte->s);
			buf_free(cte->buf);
			if (cte->host->up == HOST_UP)
				hce_notify_done(cte->host,
				    "tcp_read_buf: check succeeded");
			else
				hce_notify_done(cte->host,
				    "tcp_read_buf: check failed");
			return;
		}
		break; /* retry */
	}
retry:
	event_again(&cte->ev, s, EV_TIMEOUT|EV_READ, tcp_read_buf,
	    &cte->tv_start, &cte->table->conf.timeout, cte);
}

int
check_send_expect(struct ctl_tcp_event *cte)
{
	u_char	*b;

	/*
	 * ensure string is nul-terminated.
	 */
	b = buf_reserve(cte->buf, 1);
	if (b == NULL)
		fatal("out of memory");
	*b = '\0';
	if (fnmatch(cte->table->conf.exbuf, cte->buf->buf, 0) == 0) {
		cte->host->up = HOST_UP;
		return (0);
	}
	cte->host->up = HOST_UNKNOWN;

	/*
	 * go back to original position.
	 */
	cte->buf->wpos--;
	return (1);
}

int
check_http_code(struct ctl_tcp_event *cte)
{
	char		*head;
	char		 scode[4];
	const char	*estr;
	u_char		*b;
	int		 code;
	struct host	*host;

	/*
	 * ensure string is nul-terminated.
	 */
	b = buf_reserve(cte->buf, 1);
	if (b == NULL)
		fatal("out of memory");
	*b = '\0';

	head = cte->buf->buf;
	host = cte->host;
	if (strncmp(head, "HTTP/1.1 ", strlen("HTTP/1.1 ")) &&
	    strncmp(head, "HTTP/1.0 ", strlen("HTTP/1.0 "))) {
		log_debug("check_http_code: %s failed "
		    "(cannot parse HTTP version)", host->conf.name);
		host->up = HOST_DOWN;
		return (1);
	}
	head += strlen("HTTP/1.1 ");
	if (strlen(head) < 5) /* code + \r\n */ {
		host->up = HOST_DOWN;
		return (1);
	}
	(void)strlcpy(scode, head, sizeof(scode));
	code = strtonum(scode, 100, 999, &estr);
	if (estr != NULL) {
		log_debug("check_http_code: %s failed "
		    "(cannot parse HTTP code)", host->conf.name);
		host->up = HOST_DOWN;
		return (1);
	}
	if (code != cte->table->conf.retcode) {
		log_debug("check_http_code: %s failed "
		    "(invalid HTTP code returned)", host->conf.name);
		host->up = HOST_DOWN;
	} else
		host->up = HOST_UP;
	return (!(host->up == HOST_UP));
}

int
check_http_digest(struct ctl_tcp_event *cte)
{
	char		*head;
	u_char		*b;
	char		 digest[SHA1_DIGEST_STRING_LENGTH];
	struct host	*host;

	/*
	 * ensure string is nul-terminated.
	 */
	b = buf_reserve(cte->buf, 1);
	if (b == NULL)
		fatal("out of memory");
	*b = '\0';

	head = cte->buf->buf;
	host = cte->host;
	if ((head = strstr(head, "\r\n\r\n")) == NULL) {
		log_debug("check_http_digest: %s failed "
		    "(no end of headers)", host->conf.name);
		host->up = HOST_DOWN;
		return (1);
	}
	head += strlen("\r\n\r\n");

	digeststr(cte->table->conf.digest_type, head, strlen(head), digest);

	if (strcmp(cte->table->conf.digest, digest)) {
		log_warnx("check_http_digest: %s failed "
		    "(wrong digest)", host->conf.name);
		host->up = HOST_DOWN;
	} else
		host->up = HOST_UP;
	return (!(host->up == HOST_UP));
}
@


1.30
log
@sort includes, adjust to style(9)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.29 2007/11/21 20:13:20 reyk Exp $	*/
@


1.29
log
@move digest string handling into an extra function.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.28 2007/11/21 13:04:42 reyk Exp $	*/
d19 1
a19 1
#include <sys/types.h>
a21 1
#include <sys/param.h>
d23 1
a24 1
#include <net/if.h>
@


1.28
log
@allow the http digest type to be either SHA1 or MD5 determined by the
digest string length; it is compatible to any existing SHA1-only
configurations.

ok pyr@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.27 2007/11/19 15:20:18 reyk Exp $	*/
a35 1
#include <md5.h>
d377 1
a377 8
	switch (cte->table->conf.digest_type) {
	case DIGEST_SHA1:
		SHA1Data(head, strlen(head), digest);
		break;
	case DIGEST_MD5:
		MD5Data(head, strlen(head), digest);
		break;
	}
@


1.27
log
@knf (replace some ';;' with a single ';')
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.26 2007/09/28 13:29:56 pyr Exp $	*/
d36 1
d357 1
a357 1
	char		 digest[(SHA1_DIGEST_LENGTH*2)+1];
d377 9
a385 1
	SHA1Data(head, strlen(head), digest);
@


1.26
log
@Correct my mail address.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.25 2007/06/07 14:17:33 pyr Exp $	*/
d148 1
a148 1
		cte->validate_read = NULL;;
d240 1
a240 1
		return;;
@


1.25
log
@always close sockets before calling hce_notify_done.
first spotted by Paulius Bulotas <paulius+openbsd-misc at devnull.lt>.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.24 2007/05/27 20:53:10 pyr Exp $	*/
d4 1
a4 1
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@spootnik.org>
@


1.24
log
@Second step towards hoststated reload:
First split out hosts, tables and services into to structs, one that
contains the runtime fields and one (inside the runtime) that contains
mostly static fields that will be sent over the socket during reload.

Also move the demoted field of tables inside the flags field as its
just a boolean.
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.23 2007/02/22 05:58:06 reyk Exp $	*/
d184 1
d196 1
d225 1
d238 1
@


1.23
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.22 2007/02/08 13:32:24 reyk Exp $	*/
d59 1
a59 1
	switch (cte->host->ss.ss_family) {
d61 2
a62 2
		((struct sockaddr_in *)&cte->host->ss)->sin_port =
			cte->table->port;
d65 2
a66 2
		((struct sockaddr_in6 *)&cte->host->ss)->sin6_port =
			cte->table->port;
d70 1
a70 1
	len = ((struct sockaddr *)&cte->host->ss)->sa_len;
d72 1
a72 1
	if ((s = socket(cte->host->ss.ss_family, SOCK_STREAM, 0)) == -1)
d86 2
a87 2
	bcopy(&cte->table->timeout, &tv, sizeof(tv));
	if (connect(s, (struct sockaddr *)&cte->host->ss, len) == -1) {
d136 1
a136 1
	switch (cte->table->check) {
d138 1
a138 1
		if (cte->table->flags & F_SSL)
d157 1
a157 1
	if (cte->table->flags & F_SSL) {
d165 1
a165 1
		    &cte->tv_start, &cte->table->timeout, cte);
d172 1
a172 1
	    &cte->tv_start, &cte->table->timeout, cte);
d205 1
a205 1
	    &cte->tv_start, &cte->table->timeout, cte);
d210 1
a210 1
	    &cte->tv_start, &cte->table->timeout, cte);
d270 1
a270 1
	    &cte->tv_start, &cte->table->timeout, cte);
d285 1
a285 1
	if (fnmatch(cte->table->exbuf, cte->buf->buf, 0) == 0) {
d321 1
a321 1
		    "(cannot parse HTTP version)", host->name);
d334 1
a334 1
		    "(cannot parse HTTP code)", host->name);
d338 1
a338 1
	if (code != cte->table->retcode) {
d340 1
a340 1
		    "(invalid HTTP code returned)", host->name);
d367 1
a367 1
		    "(no end of headers)", host->name);
d374 1
a374 1
	if (strcmp(cte->table->digest, digest)) {
d376 1
a376 1
		    "(wrong digest)", host->name);
@


1.22
log
@carefully check some return values and make lint happier.  never pass
any truncated strings (table names/anchors/tags/...) to pf and the
kernel.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.21 2007/02/07 15:13:00 reyk Exp $	*/
d179 2
a180 2
	int		 	 bs;
	int		 	 len;
d220 1
a220 1
        if (event == EV_TIMEOUT) {
@


1.21
log
@include the host name in log_debug() messages used by check_tcp read
callbacks.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.20 2007/02/07 14:54:13 reyk Exp $	*/
d250 2
a251 1
		buf_add(cte->buf, rbuf, br);
d330 1
a330 1
	strlcpy(scode, head, sizeof(scode));
@


1.20
log
@another log_debug() removal ("nothing to write")
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.19 2007/02/07 14:45:12 reyk Exp $	*/
d305 1
d316 1
d319 3
a321 2
		log_debug("check_http_code: cannot parse HTTP version");
		cte->host->up = HOST_DOWN;
d326 1
a326 1
		cte->host->up = HOST_DOWN;
d332 3
a334 2
		log_debug("check_http_code: cannot parse HTTP code");
		cte->host->up = HOST_DOWN;
d338 3
a340 2
		log_debug("check_http_code: invalid HTTP code returned");
		cte->host->up = HOST_DOWN;
d342 2
a343 2
		cte->host->up = HOST_UP;
	return (!(cte->host->up == HOST_UP));
d349 4
a352 3
	char	*head;
	u_char	*b;
	char	 digest[(SHA1_DIGEST_LENGTH*2)+1];
d363 1
d365 3
a367 3
		log_debug("check_http_digest: host %u no end of headers",
		    cte->host->id);
		cte->host->up = HOST_DOWN;
d374 3
a376 3
		log_warnx("check_http_digest: wrong digest for host %u",
		    cte->host->id);
		cte->host->up = HOST_DOWN;
d378 2
a379 2
		cte->host->up = HOST_UP;
	return (!(cte->host->up == HOST_UP));
@


1.19
log
@more log_debug() cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.18 2007/02/07 14:39:45 reyk Exp $	*/
a168 1
	log_debug("tcp_host_up: nothing to write");
@


1.18
log
@remove superfluos log_debug() messages

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.17 2007/02/06 10:27:33 reyk Exp $	*/
a252 1
			log_debug("calling check");
@


1.17
log
@update some more debug messages and fix typos. also remove some extra
debug noise from ssl.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.16 2007/02/06 10:26:13 pyr Exp $	*/
a202 1
	log_debug("tcp_send_req: write done");
@


1.16
log
@now that check_http_code, check_http_digest and check_send_expect are
in check_tcp.c, prototype them in check_tcp.c
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.15 2007/02/03 20:24:21 reyk Exp $	*/
d127 1
a127 1
		hce_notify_done(cte->host, "connect failed");
d141 1
a141 1
		hce_notify_done(cte->host, "tcp_host_up: connect successfull");
d245 2
a246 1
			hce_notify_done(cte->host, "check succeeded");
d248 2
a249 1
			hce_notify_done(cte->host, "check failed");
d261 2
a262 1
				hce_notify_done(cte->host, "check succeeded");
d264 2
a265 1
				hce_notify_done(cte->host, "check failed");
@


1.15
log
@merge tcp-based checks into one file, no functional changes

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.14 2007/02/03 17:45:59 reyk Exp $	*/
d45 4
@


1.14
log
@remove debug message
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.13 2007/01/30 10:09:02 pyr Exp $	*/
d23 1
d26 1
d34 2
d265 103
@


1.13
log
@style changes.
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.12 2007/01/29 14:23:31 pyr Exp $	*/
a220 1
	log_debug("reading");
@


1.12
log
@Add SSL support to hoststated.
with help and OK reyk@@
with help and advice by claudio@@ and Srebrenko Sehic
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.11 2007/01/20 16:32:10 pyr Exp $	*/
d82 3
a84 2
	} else
		cte->host->up = HOST_UP;
d224 2
a225 1
	if (br == -1) {
d231 2
a232 2
		return;
	} else if (br == 0) {
d242 6
a247 6
	}
	buf_add(cte->buf, rbuf, br);
	if (cte->validate_read != NULL) {
		log_debug("calling check");
		if (cte->validate_read(cte) != 0)
			goto retry;
d249 9
a257 7
		close(cte->s);
		buf_free(cte->buf);
		if (cte->host->up == HOST_UP)
			hce_notify_done(cte->host, "check succeeded");
		else
			hce_notify_done(cte->host, "check failed");
		return;
a261 1

@


1.11
log
@when retrying a write, the position was previously not updated.
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.10 2007/01/12 16:43:01 pyr Exp $	*/
d33 2
d113 1
d129 2
d132 1
a132 1
		hce_notify_done(cte->host, "tcp_host_up: success");
d146 5
@


1.10
log
@eliminate duplicate tcp read/write code.
ok claudio@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.9 2007/01/11 18:05:08 reyk Exp $	*/
a141 1
	cte->req = cte->table->sendbuf;
d144 1
a161 1
	int		 	 pos;
a168 1
	pos = 0;
d171 1
a171 1
		bs = write(s, cte->req + pos, len);
d180 1
a180 1
		pos += bs;
@


1.9
log
@use real async events for checks and improve the non-blocking socket
usage. also modify the check_icmp code to use non-blocking raw sockets
and merge the icmp4 and icmp6 functions. some other minor changes
while i'm here.

as discussed with pyr@@ claudio@@ deraadt@@
ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.8 2007/01/09 00:45:32 deraadt Exp $	*/
d36 3
a38 1
void	tcp_host_up(int s, struct ctl_tcp_event *);
d128 4
a132 1
	case CHECK_HTTP_CODE:
d134 2
a135 2
		event_again(&cte->ev, s, EV_TIMEOUT|EV_WRITE, send_http_request,
		    &cte->tv_start, &cte->table->timeout, cte);
d138 8
a145 1
		event_again(&cte->ev, s, EV_TIMEOUT|EV_WRITE, start_send_expect,
d147 99
a245 3
		break;
	default:
		fatalx("tcp_host_up: unhandled check type");
d247 4
@


1.8
log
@adapt to rename
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.7 2007/01/08 20:46:18 reyk Exp $	*/
d74 1
d78 1
a78 1
	} else {
d80 2
a81 5
		tcp_host_up(s, cte);
		return;
	}
	bcopy(&cte->table->timeout, &tv, sizeof(tv));
	event_once(s, EV_TIMEOUT|EV_WRITE, tcp_write, cte, &tv);
d83 1
d104 1
a104 1
		if (err)
d125 1
a125 1
		hce_notify_done(cte->host, "tcp_write: success");
d129 2
a130 1
		send_http_request(cte);
d133 2
a134 1
		start_send_expect(cte);
d137 1
a137 1
		fatalx("tcp_write: unhandled check type");
@


1.7
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.6 2007/01/08 17:10:23 reyk Exp $	*/
d33 1
a33 1
#include "hostated.h"
@


1.6
log
@allow to use service names in addition to numerical port numbers in
the configuration file, eg. "real port http".

> From Pierre-Yves Ritschard (pyr at spootnik dot org)

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.5 2007/01/08 13:37:26 reyk Exp $	*/
a31 1
#include <regex.h>
@


1.5
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.4 2006/12/25 19:05:41 reyk Exp $	*/
d51 1
a51 1
			htons(cte->table->port);
d55 1
a55 1
			htons(cte->table->port);
@


1.4
log
@fix the conversion from milliseconds to struct timeval, which uses
seconds (tv_sec) and microseconds (tv_usec), but the code assumed
seconds and milliseconds...
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.3 2006/12/25 18:12:14 reyk Exp $	*/
d32 1
d122 2
d132 3
@


1.3
log
@partial rewrite of the check_* routines to use libevent everywhere
instead of nested select() calls and to handle the non-blocking
sockets properly.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
(with a little help by me)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.2 2006/12/16 12:42:14 reyk Exp $	*/
d82 1
a82 2
	tv.tv_sec = cte->table->timeout / 1000;
	tv.tv_usec = cte->table->timeout % 1000;
@


1.2
log
@knf, spacing

please note that some editors will replace tabs with multiple spaces
if you cut & paste code from other sections.  please try to keep the
tabs ;).
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
d30 1
d35 2
a36 10
int
check_tcp(struct host *host, struct table *table)
{
	int	sock;

	if ((sock = tcp_connect(host, table)) <= 0)
		return (sock);
	close(sock);
	return (HOST_UP);
}
d38 2
a39 2
int
tcp_connect(struct host *host, struct table *table)
d41 5
a45 5
	int		s;
	socklen_t	len;
	struct timeval	tv;
	struct sockaddr	sa;
	fd_set		fdset;
d47 1
a47 1
	switch (host->ss.ss_family) {
d49 2
a50 2
		((struct sockaddr_in *)&host->ss)->sin_port =
			htons(table->port);
d53 2
a54 2
		((struct sockaddr_in6 *)&host->ss)->sin6_port =
			htons(table->port);
d58 4
a61 1
	len = ((struct sockaddr *)&host->ss)->sa_len;
d63 7
a69 2
	if ((s = socket(host->ss.ss_family, SOCK_STREAM, 0)) == -1)
		fatal("check_tcp: cannot create socket");
d72 1
a72 1
		fatal("check_tcp: cannot set non blocking socket");
d74 34
a107 18
	if (connect(s, (struct sockaddr *)&host->ss, len) == -1) {
		if (errno != EINPROGRESS && errno != EWOULDBLOCK) {
			close(s);
			return (HOST_DOWN);
		}
	} else
		return (s);

	tv.tv_sec = table->timeout / 1000;
	tv.tv_usec = table->timeout % 1000;
	FD_ZERO(&fdset);
	FD_SET(s, &fdset);

	/* XXX This needs to be rewritten */
	switch (select(s + 1, NULL, &fdset, NULL, &tv)) {
	case -1:
		if (errno != EINTR)
			fatal("check_tcp: select");
d109 15
a123 2
			return (HOST_UNKNOWN);
	case 0:
d125 6
a130 1
		return (HOST_DOWN);
d132 1
a132 11
		if (getpeername(s, &sa, &len) == -1) {
			if (errno == ENOTCONN) {
				close(s);
				return (HOST_DOWN);
			} else {
				log_debug("check_tcp: unknown peername");
				close(s);
				return (HOST_UNKNOWN);
			}
		} else
			return (s);
a133 1
	return (HOST_UNKNOWN);
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d86 2
a87 1
	switch(select(s + 1, NULL, &fdset, NULL, &tv)) {
d92 1
a92 1
			return(HOST_UNKNOWN);
@

