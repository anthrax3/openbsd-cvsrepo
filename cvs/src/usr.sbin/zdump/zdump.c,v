head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.6
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9;
locks; strict;
comment	@ * @;


1.14
date	2016.03.15.19.50.48;	author millert;	state Exp;
branches;
next	1.13;
commitid	mm1knr3PswneRoCo;

1.13
date	2016.03.14.15.29.29;	author mestre;	state Exp;
branches;
next	1.12;
commitid	xTBJksz46xKpiywd;

1.12
date	2015.11.11.02.52.46;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	6fvHpVQjE6wYuHzb;

1.11
date	2015.10.12.01.40.09;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	d8Na95lxJRC0MlvM;

1.10
date	2015.04.23.05.26.33;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	OxktfeiY94FaOLO0;

1.9
date	2015.02.10.22.44.29;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	xrviDfXPeDX0rQUx;

1.8
date	2015.02.09.23.14.32;	author tedu;	state Exp;
branches;
next	1.7;
commitid	paJaQZBH3wrcxI7u;

1.7
date	2015.02.09.22.49.10;	author tedu;	state Exp;
branches;
next	1.6;
commitid	XEkEUAITlseaYgAQ;

1.6
date	2015.02.09.15.02.30;	author tedu;	state Exp;
branches;
next	1.5;
commitid	uOMEoRy8ddD0lMUq;

1.5
date	2015.02.09.13.46.22;	author tedu;	state Exp;
branches;
next	1.4;
commitid	lqdxXphiTozivn2t;

1.4
date	2015.02.09.13.39.16;	author tedu;	state Exp;
branches;
next	1.3;
commitid	dfCzFltGsoBkcZKk;

1.3
date	2015.02.09.12.52.45;	author tedu;	state Exp;
branches;
next	1.2;
commitid	a3S1e4zjb6hnLJHe;

1.2
date	2015.02.09.12.45.33;	author tedu;	state Exp;
branches;
next	1.1;
commitid	q3ipNnWcQGeq6oGG;

1.1
date	2015.02.09.12.37.47;	author tedu;	state Exp;
branches;
next	;
commitid	IrOn8khkOGvoGgaT;


desc
@@


1.14
log
@Don't warn about valid time zone abbreviations.  POSIX through 2000
says that an abbreviation cannot start with ':', and cannot contain
',', '-', '+', NUL, or a digit.  POSIX from 2001 on changes this
rule to say that an abbreviation can contain only '-', '+', and
alphanumeric characters from the portable character set in the
current locale.  To be portable to both sets of rules, an abbreviation
must therefore use only ASCII letters."  Adapted from tzcode2015f.
OK deraadt@@ mestre@@
@
text
@/*	$OpenBSD: zdump.c,v 1.13 2016/03/14 15:29:29 mestre Exp $ */
/*
** This file is in the public domain, so clarified as of
** 2009-05-17 by Arthur David Olson.
*/

/*
** This code has been made independent of the rest of the time
** conversion package to increase confidence in the verification it provides.
** You can use this code to help in verifying other implementations.
*/

#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

#define ZDUMP_LO_YEAR	(-500)
#define ZDUMP_HI_YEAR	2500

#define MAX_STRING_LENGTH	1024

#define TRUE		1
#define FALSE		0

#define SECSPERMIN	60
#define MINSPERHOUR	60
#define SECSPERHOUR	(SECSPERMIN * MINSPERHOUR)
#define HOURSPERDAY	24
#define EPOCH_YEAR	1970
#define TM_YEAR_BASE	1900
#define DAYSPERNYEAR	365

#define SECSPERDAY	((long) SECSPERHOUR * HOURSPERDAY)
#define SECSPERNYEAR	(SECSPERDAY * DAYSPERNYEAR)
#define SECSPERLYEAR	(SECSPERNYEAR + SECSPERDAY)

#define isleap(y) (((y) % 4) == 0 && (((y) % 100) != 0 || ((y) % 400) == 0))

#ifndef isleap_sum
/*
** See tzfile.h for details on isleap_sum.
*/
#define isleap_sum(a, b)	isleap((a) % 400 + (b) % 400)
#endif /* !defined isleap_sum */

extern char	**environ;
extern char	*tzname[2];
extern char 	*__progname;

time_t		absolute_min_time;
time_t		absolute_max_time;
size_t		longest;
int		warned;

static char 		*abbr(struct tm *tmp);
static void		abbrok(const char *abbrp, const char *zone);
static long		delta(struct tm *newp, struct tm *oldp);
static void		dumptime(const struct tm *tmp);
static time_t		hunt(char *name, time_t lot, time_t	hit);
static void		setabsolutes(void);
static void		show(char *zone, time_t t, int v);
static const char 	*tformat(void);
static time_t		yeartot(long y);
static void		usage(void);

static void
abbrok(const char * const abbrp, const char * const zone)
{
	const char 	*cp;
	char 		*wp;

	if (warned)
		return;
	cp = abbrp;
	wp = NULL;
	while (isascii((unsigned char)*cp) &&
	    (isalnum((unsigned char)*cp) || *cp == '-' || *cp == '+'))
		++cp;
	if (cp - abbrp < 3)
		wp = "has fewer than 3 characters";
	else if (cp - abbrp > 6)
		wp = "has more than 6 characters";
	else if (*cp)
		wp = "has characters other than ASCII alphanumerics, '-' or '+'";
	else
		return;
	fflush(stdout);
	fprintf(stderr, "%s: warning: zone \"%s\" abbreviation \"%s\" %s\n",
		__progname, zone, abbrp, wp);
	warned = TRUE;
}

static void
usage(void)
{
	fprintf(stderr, "usage: %s [-v] [-c [loyear,]hiyear] zonename ...\n",
	    __progname);
	exit(EXIT_FAILURE);
}

int
main(int argc, char *argv[])
{
	int		i, c, vflag = 0;
	char		*cutarg = NULL;
	long		cutloyear = ZDUMP_LO_YEAR;
	long		cuthiyear = ZDUMP_HI_YEAR;
	time_t		cutlotime = 0, cuthitime = 0;
	time_t		now, t, newt;
	struct tm	tm, newtm, *tmp, *newtmp;
	char		**fakeenv;

	if (pledge("stdio rpath", NULL) == -1) {
		perror("pledge");
		exit(1);
	}

	while ((c = getopt(argc, argv, "c:v")) == 'c' || c == 'v') {
		switch (c) {
		case 'v':
			vflag = 1;
			break;
		case 'c':
			cutarg = optarg;
			break;
		default:
			usage();
			break;
		}
	}
	if (c != -1 ||
	    (optind == argc - 1 && strcmp(argv[optind], "=") == 0)) {
		usage();
	}
	if (vflag) {
		if (cutarg != NULL) {
			long	lo, hi;
			char	dummy;

			if (sscanf(cutarg, "%ld%c", &hi, &dummy) == 1) {
				cuthiyear = hi;
			} else if (sscanf(cutarg, "%ld,%ld%c",
			    &lo, &hi, &dummy) == 2) {
				cutloyear = lo;
				cuthiyear = hi;
			} else {
				fprintf(stderr, "%s: wild -c argument %s\n",
				    __progname, cutarg);
				exit(EXIT_FAILURE);
			}
		}
		setabsolutes();
		cutlotime = yeartot(cutloyear);
		cuthitime = yeartot(cuthiyear);
	}
	time(&now);
	longest = 0;
	for (i = optind; i < argc; ++i)
		if (strlen(argv[i]) > longest)
			longest = strlen(argv[i]);

	{
		int	from, to;

		for (i = 0; environ[i] != NULL; ++i)
			continue;
		fakeenv = reallocarray(NULL, i + 2, sizeof *fakeenv);
		if (fakeenv == NULL ||
		    (fakeenv[0] = malloc(longest + 4)) == NULL) {
			perror(__progname);
			exit(EXIT_FAILURE);
		}
		to = 0;
		strlcpy(fakeenv[to++], "TZ=", longest + 4);
		for (from = 0; environ[from] != NULL; ++from)
			if (strncmp(environ[from], "TZ=", 3) != 0)
				fakeenv[to++] = environ[from];
		fakeenv[to] = NULL;
		environ = fakeenv;
	}
	for (i = optind; i < argc; ++i) {
		char	buf[MAX_STRING_LENGTH];

		strlcpy(&fakeenv[0][3], argv[i], longest + 1);
		if (!vflag) {
			show(argv[i], now, FALSE);
			continue;
		}
		warned = FALSE;
		t = absolute_min_time;
		show(argv[i], t, TRUE);
		t += SECSPERHOUR * HOURSPERDAY;
		show(argv[i], t, TRUE);
		if (t < cutlotime)
			t = cutlotime;
		tmp = localtime(&t);
		if (tmp != NULL) {
			tm = *tmp;
			strlcpy(buf, abbr(&tm), sizeof buf);
		}
		for ( ; ; ) {
			if (t >= cuthitime || t >= cuthitime - SECSPERHOUR * 12)
				break;
			newt = t + SECSPERHOUR * 12;
			newtmp = localtime(&newt);
			if (newtmp != NULL)
				newtm = *newtmp;
			if ((tmp == NULL || newtmp == NULL) ? (tmp != newtmp) :
			    (delta(&newtm, &tm) != (newt - t) ||
			    newtm.tm_isdst != tm.tm_isdst ||
			    strcmp(abbr(&newtm), buf) != 0)) {
				newt = hunt(argv[i], t, newt);
				newtmp = localtime(&newt);
				if (newtmp != NULL) {
					newtm = *newtmp;
					strlcpy(buf, abbr(&newtm), sizeof buf);
				}
			}
			t = newt;
			tm = newtm;
			tmp = newtmp;
		}
		t = absolute_max_time;
		t -= SECSPERHOUR * HOURSPERDAY;
		show(argv[i], t, TRUE);
		t += SECSPERHOUR * HOURSPERDAY;
		show(argv[i], t, TRUE);
	}
	if (fflush(stdout) || ferror(stdout)) {
		fprintf(stderr, "%s: ", __progname);
		perror("Error writing to standard output");
		exit(EXIT_FAILURE);
	}
	return 0;
}

static void
setabsolutes(void)
{
	time_t t = 0, t1 = 1;

	while (t < t1) {
		t = t1;
		t1 = 2 * t1 + 1;
	}

	absolute_max_time = t;
	t = -t;
	absolute_min_time = t - 1;
	if (t < absolute_min_time)
		absolute_min_time = t;
}

static time_t
yeartot(const long y)
{
	long	myy = EPOCH_YEAR, seconds;
	time_t	t = 0;

	while (myy != y) {
		if (myy < y) {
			seconds = isleap(myy) ? SECSPERLYEAR : SECSPERNYEAR;
			++myy;
			if (t > absolute_max_time - seconds) {
				t = absolute_max_time;
				break;
			}
			t += seconds;
		} else {
			--myy;
			seconds = isleap(myy) ? SECSPERLYEAR : SECSPERNYEAR;
			if (t < absolute_min_time + seconds) {
				t = absolute_min_time;
				break;
			}
			t -= seconds;
		}
	}
	return t;
}

static time_t
hunt(char *name, time_t lot, time_t hit)
{
	time_t			t;
	long			diff;
	struct tm		lotm, *lotmp;
	struct tm		tm, *tmp;
	char			loab[MAX_STRING_LENGTH];

	lotmp = localtime(&lot);
	if (lotmp != NULL) {
		lotm = *lotmp;
		strlcpy(loab, abbr(&lotm), sizeof loab);
	}
	for ( ; ; ) {
		diff = (long) (hit - lot);
		if (diff < 2)
			break;
		t = lot;
		t += diff / 2;
		if (t <= lot)
			++t;
		else if (t >= hit)
			--t;
		tmp = localtime(&t);
		if (tmp != NULL)
			tm = *tmp;
		if ((lotmp == NULL || tmp == NULL) ? (lotmp == tmp) :
		    (delta(&tm, &lotm) == (t - lot) &&
		    tm.tm_isdst == lotm.tm_isdst &&
		    strcmp(abbr(&tm), loab) == 0)) {
			lot = t;
			lotm = tm;
			lotmp = tmp;
		} else
			hit = t;
	}
	show(name, lot, TRUE);
	show(name, hit, TRUE);
	return hit;
}

/*
** Thanks to Paul Eggert for logic used in delta.
*/

static long
delta(struct tm *newp, struct tm *oldp)
{
	long	result;
	int	tmy;

	if (newp->tm_year < oldp->tm_year)
		return -delta(oldp, newp);
	result = 0;
	for (tmy = oldp->tm_year; tmy < newp->tm_year; ++tmy)
		result += DAYSPERNYEAR + isleap_sum(tmy, TM_YEAR_BASE);
	result += newp->tm_yday - oldp->tm_yday;
	result *= HOURSPERDAY;
	result += newp->tm_hour - oldp->tm_hour;
	result *= MINSPERHOUR;
	result += newp->tm_min - oldp->tm_min;
	result *= SECSPERMIN;
	result += newp->tm_sec - oldp->tm_sec;
	return result;
}

static void
show(char *zone, time_t t, int v)
{
	struct tm 	*tmp;

	printf("%-*s  ", (int) longest, zone);
	if (v) {
		tmp = gmtime(&t);
		if (tmp == NULL) {
			printf(tformat(), t);
		} else {
			dumptime(tmp);
			printf(" UTC");
		}
		printf(" = ");
	}
	tmp = localtime(&t);
	dumptime(tmp);
	if (tmp != NULL) {
		if (*abbr(tmp) != '\0')
			printf(" %s", abbr(tmp));
		if (v) {
			printf(" isdst=%d", tmp->tm_isdst);
#ifdef TM_GMTOFF
			printf(" gmtoff=%ld", tmp->TM_GMTOFF);
#endif /* defined TM_GMTOFF */
		}
	}
	printf("\n");
	if (tmp != NULL && *abbr(tmp) != '\0')
		abbrok(abbr(tmp), zone);
}

static char *
abbr(struct tm *tmp)
{
	char 		*result;
	static char	nada;

	if (tmp->tm_isdst != 0 && tmp->tm_isdst != 1)
		return &nada;
	result = tzname[tmp->tm_isdst];
	return (result == NULL) ? &nada : result;
}

/*
** The code below can fail on certain theoretical systems;
** it works on all known real-world systems as of 2004-12-30.
*/

static const char *
tformat(void)
{
	return "%lld";
}

static void
dumptime(const struct tm *timeptr)
{
	static const char wday_name[][3] = {
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
	};
	static const char mon_name[][3] = {
		"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	};
	const char	*wn, *mn;
	int		lead, trail;

	if (timeptr == NULL) {
		printf("NULL");
		return;
	}
	/*
	** The packaged versions of localtime and gmtime never put out-of-range
	** values in tm_wday or tm_mon, but since this code might be compiled
	** with other (perhaps experimental) versions, paranoia is in order.
	*/
	if (timeptr->tm_wday < 0 || timeptr->tm_wday >=
	    (int) (sizeof wday_name / sizeof wday_name[0]))
		wn = "???";
	else
		wn = wday_name[timeptr->tm_wday];
	if (timeptr->tm_mon < 0 || timeptr->tm_mon >=
	    (int) (sizeof mon_name / sizeof mon_name[0]))
		mn = "???";
	else
		mn = mon_name[timeptr->tm_mon];
	printf("%.3s %.3s%3d %.2d:%.2d:%.2d ",
	    wn, mn,
	    timeptr->tm_mday, timeptr->tm_hour,
	    timeptr->tm_min, timeptr->tm_sec);
#define DIVISOR	10
	trail = timeptr->tm_year % DIVISOR + TM_YEAR_BASE % DIVISOR;
	lead = timeptr->tm_year / DIVISOR + TM_YEAR_BASE / DIVISOR +
		trail / DIVISOR;
	trail %= DIVISOR;
	if (trail < 0 && lead > 0) {
		trail += DIVISOR;
		--lead;
	} else if (lead < 0 && trail > 0) {
		trail -= DIVISOR;
		++lead;
	}
	if (lead == 0)
		printf("%d", trail);
	else
		printf("%d%d", lead, ((trail < 0) ? -trail : trail));
}
@


1.13
log
@zdump(8) needs to read files so it needs pledge(2) rpath promise

After discussion with tb@@, deraadt@@ and millert@@, this was also OK'ed by them
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.12 2015/11/11 02:52:46 deraadt Exp $ */
d79 2
a80 1
	while (isascii((unsigned char) *cp) && isalpha((unsigned char) *cp))
d82 2
a83 4
	if (cp - abbrp == 0)
		wp = "lacks alphabetic at start";
	else if (cp - abbrp < 3)
		wp = "has fewer than 3 alphabetics";
d85 4
a88 11
		wp = "has more than 6 alphabetics";
	if (wp == NULL && (*cp == '+' || *cp == '-')) {
		++cp;
		if (isascii((unsigned char) *cp) &&
		    isdigit((unsigned char) *cp))
			if (*cp++ == '1' && *cp >= '0' && *cp <= '4')
				++cp;
		if (*cp != '\0')
			wp = "differs from POSIX standard";
	}
	if (wp == NULL)
@


1.12
log
@exit() after perror() for pledge failure.  Perhaps this got introduced
as a test idiom, either when pledge was young or during the transition
to strings.... dunno
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.11 2015/10/12 01:40:09 deraadt Exp $ */
d124 1
a124 1
	if (pledge("stdio", NULL) == -1) {
@


1.11
log
@pledge() "stdio" includes trusting open&read of the root-owned timezone
databases located at system paths (a reasonable bar had to be chosen; in
the future we can replace the interfaces, since this effort is identifying
them and placing their paths in a visble place), so this program only
needs "stdio"
ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.10 2015/04/23 05:26:33 deraadt Exp $ */
d124 1
a124 1
	if (pledge("stdio", NULL) == -1)
d126 2
@


1.10
log
@KNF and other style adjustments to make this more scrutible.
reviewed by millert
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.9 2015/02/10 22:44:29 deraadt Exp $ */
d123 3
@


1.9
log
@pounce on a reallocarray opportunity before tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.9 2015/02/10 22:41:50 deraadt Exp $ */
d13 6
a18 6
#include <ctype.h>	/* for isalpha et al. */
#include <float.h>	/* for FLT_MAX and DBL_MAX */
#include <stdio.h>	/* for stdout, stderr, perror */
#include <string.h>	/* for strlcpy */
#include <stdlib.h>	/* for exit, malloc, atoi */
#include <time.h>	/* for struct tm */
a19 1
#ifndef ZDUMP_LO_YEAR
a20 3
#endif /* !defined ZDUMP_LO_YEAR */

#ifndef ZDUMP_HI_YEAR
a21 1
#endif /* !defined ZDUMP_HI_YEAR */
a22 1
#ifndef MAX_STRING_LENGTH
a23 1
#endif /* !defined MAX_STRING_LENGTH */
a24 1
#ifndef TRUE
a25 3
#endif /* !defined TRUE */

#ifndef FALSE
a26 1
#endif /* !defined FALSE */
a27 1
#ifndef SECSPERMIN
a28 3
#endif /* !defined SECSPERMIN */

#ifndef MINSPERHOUR
a29 3
#endif /* !defined MINSPERHOUR */

#ifndef SECSPERHOUR
a30 3
#endif /* !defined SECSPERHOUR */

#ifndef HOURSPERDAY
a31 3
#endif /* !defined HOURSPERDAY */

#ifndef EPOCH_YEAR
a32 3
#endif /* !defined EPOCH_YEAR */

#ifndef TM_YEAR_BASE
d34 1
a34 1
#endif /* !defined TM_YEAR_BASE */
d36 3
a38 3
#ifndef DAYSPERNYEAR
#define DAYSPERNYEAR	365
#endif /* !defined DAYSPERNYEAR */
a39 1
#ifndef isleap
a40 1
#endif /* !defined isleap */
d49 19
a67 69
#define SECSPERDAY	((long) SECSPERHOUR * HOURSPERDAY)
#define SECSPERNYEAR	(SECSPERDAY * DAYSPERNYEAR)
#define SECSPERLYEAR	(SECSPERNYEAR + SECSPERDAY)

#define _(msgid) msgid

#ifndef TZ_DOMAIN
#define TZ_DOMAIN "tz"
#endif /* !defined TZ_DOMAIN */

extern char **	environ;
extern int	getopt(int argc, char * const argv[],
			const char * options);
extern char *	optarg;
extern int	optind;
extern char *	tzname[2];

static time_t	absolute_min_time;
static time_t	absolute_max_time;
static size_t	longest;
static char *	progname;
static int	warned;

static char *	abbr(struct tm * tmp);
static void	abbrok(const char * abbrp, const char * zone);
static long	delta(struct tm * newp, struct tm * oldp);
static void	dumptime(const struct tm * tmp);
static time_t	hunt(char * name, time_t lot, time_t	hit);
static void	setabsolutes(void);
static void	show(char * zone, time_t t, int v);
static const char *	tformat(void);
static time_t	yeartot(long y);

#ifndef TYPECHECK
#define my_localtime	localtime
#else /* !defined TYPECHECK */
static struct tm *
my_localtime(tp)
time_t *	tp;
{
	struct tm *	tmp;

	tmp = localtime(tp);
	if (tp != NULL && tmp != NULL) {
		struct tm	tm;
		time_t	t;

		tm = *tmp;
		t = mktime(&tm);
		if (t - *tp >= 1 || *tp - t >= 1) {
			fflush(stdout);
			fprintf(stderr, "\n%s: ", progname);
			fprintf(stderr, tformat(), *tp);
			fprintf(stderr, " ->");
			fprintf(stderr, " year=%d", tmp->tm_year);
			fprintf(stderr, " mon=%d", tmp->tm_mon);
			fprintf(stderr, " mday=%d", tmp->tm_mday);
			fprintf(stderr, " hour=%d", tmp->tm_hour);
			fprintf(stderr, " min=%d", tmp->tm_min);
			fprintf(stderr, " sec=%d", tmp->tm_sec);
			fprintf(stderr, " isdst=%d", tmp->tm_isdst);
			fprintf(stderr, " -> ");
			fprintf(stderr, tformat(), t);
			fprintf(stderr, "\n");
		}
	}
	return tmp;
}
#endif /* !defined TYPECHECK */
d70 1
a70 3
abbrok(abbrp, zone)
const char * const	abbrp;
const char * const	zone;
d72 2
a73 2
	const char *	cp;
	char *		wp;
d82 1
a82 1
		wp = _("lacks alphabetic at start");
d84 1
a84 1
		wp = _("has fewer than 3 alphabetics");
d86 1
a86 1
		wp = _("has more than 6 alphabetics");
d90 3
a92 3
			isdigit((unsigned char) *cp))
				if (*cp++ == '1' && *cp >= '0' && *cp <= '4')
					++cp;
d94 1
a94 1
			wp = _("differs from POSIX standard");
d99 2
a100 2
	fprintf(stderr, _("%s: warning: zone \"%s\" abbreviation \"%s\" %s\n"),
		progname, zone, abbrp, wp);
d107 2
a108 1
	fprintf(stderr, _("usage: %s [-v] [-c [loyear,]hiyear] zonename ...\n"), progname);
d113 4
a116 8
main(argc, argv)
int	argc;
char *	argv[];
{
	int		i;
	int		c;
	int		vflag;
	char *		cutarg;
d119 8
a126 18
	time_t		cutlotime;
	time_t		cuthitime;
	char **	fakeenv;
	time_t			now;
	time_t			t;
	time_t			newt;
	struct tm		tm;
	struct tm		newtm;
	struct tm *	tmp;
	struct tm *	newtmp;

	cutlotime = 0;
	cuthitime = 0;
	progname = argv[0];
	vflag = 0;
	cutarg = NULL;
	while ((c = getopt(argc, argv, "c:v")) == 'c' || c == 'v')
		if (c == 'v')
d128 5
a132 3
		else	cutarg = optarg;
	if ((c != EOF && c != -1) ||
		(optind == argc - 1 && strcmp(argv[optind], "=") == 0)) {
d134 6
d143 1
a143 2
			long	lo;
			long	hi;
d149 3
a151 3
				&lo, &hi, &dummy) == 2) {
					cutloyear = lo;
					cuthiyear = hi;
d153 2
a154 2
				fprintf(stderr, _("%s: wild -c argument %s\n"),
					progname, cutarg);
d167 1
d169 1
a169 2
		int	from;
		int	to;
d175 3
a177 3
			(fakeenv[0] = malloc(longest + 4)) == NULL) {
				perror(progname);
				exit(EXIT_FAILURE);
d188 1
a188 1
		static char	buf[MAX_STRING_LENGTH];
d202 1
a202 1
		tmp = my_localtime(&t);
d215 9
a223 10
				(delta(&newtm, &tm) != (newt - t) ||
				newtm.tm_isdst != tm.tm_isdst ||
				strcmp(abbr(&newtm), buf) != 0)) {
					newt = hunt(argv[i], t, newt);
					newtmp = localtime(&newt);
					if (newtmp != NULL) {
						newtm = *newtmp;
						strlcpy(buf, abbr(&newtm),
							sizeof buf);
					}
d236 2
a237 2
		fprintf(stderr, "%s: ", progname);
		perror(_("Error writing to standard output"));
d246 1
a246 5
	/*
	** time_t is signed.  Assume overflow wraps around.
	*/
	time_t t = 0;
	time_t t1 = 1;
d261 1
a261 2
yeartot(y)
const long	y;
d263 2
a264 3
	long	myy;
	long	seconds;
	time_t	t;
a265 2
	myy = EPOCH_YEAR;
	t = 0;
d293 2
a294 4
	struct tm		lotm;
	struct tm *	lotmp;
	struct tm		tm;
	struct tm *	tmp;
d297 1
a297 1
	lotmp = my_localtime(&lot);
d312 1
a312 1
		tmp = my_localtime(&t);
d316 8
a323 7
			(delta(&tm, &lotm) == (t - lot) &&
			tm.tm_isdst == lotm.tm_isdst &&
			strcmp(abbr(&tm), loab) == 0)) {
				lot = t;
				lotm = tm;
				lotmp = tmp;
		} else	hit = t;
d335 1
a335 3
delta(newp, oldp)
struct tm *	newp;
struct tm *	oldp;
d358 1
a358 1
	struct tm *	tmp;
d371 1
a371 1
	tmp = my_localtime(&t);
d389 1
a389 2
abbr(tmp)
struct tm *	tmp;
d391 1
a391 1
	char *	result;
d412 1
a412 2
dumptime(timeptr)
const struct tm *	timeptr;
d414 1
a414 1
	static const char	wday_name[][3] = {
d417 1
a417 1
	static const char	mon_name[][3] = {
d421 2
a422 4
	const char *	wn;
	const char *	mn;
	int		lead;
	int		trail;
d434 4
a437 3
		(int) (sizeof wday_name / sizeof wday_name[0]))
			wn = "???";
	else		wn = wday_name[timeptr->tm_wday];
d439 4
a442 3
		(int) (sizeof mon_name / sizeof mon_name[0]))
			mn = "???";
	else		mn = mon_name[timeptr->tm_mon];
d444 3
a446 3
		wn, mn,
		timeptr->tm_mday, timeptr->tm_hour,
		timeptr->tm_min, timeptr->tm_sec);
@


1.8
log
@exit() cleanup. don't have to call it in a loop.
usage() always takes the same stream and status arguments (despite a
comment indicating perhaps it shouldn't), so make it void
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.7 2015/02/09 22:49:10 tedu Exp $ */
d261 1
a261 1
		fakeenv = malloc((size_t) ((i + 2) * sizeof *fakeenv));
@


1.7
log
@remove support for floating or unsigned time_t. leave the incorrect comment
** time_t is signed.  Assume overflow wraps around.
as a warning for future generations.
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.6 2015/02/09 15:02:30 tedu Exp $ */
d187 1
a187 3
usage(stream, status)
FILE * const	stream;
const int	status;
d189 2
a190 2
	fprintf(stream, _("usage: %s [-v] [-c [loyear,]hiyear] zonename ...\n"), progname);
	exit(status);
d226 1
a226 1
			usage(stderr, EXIT_FAILURE);
d329 1
a329 3
	exit(EXIT_SUCCESS);
	/* If exit fails to exit... */
	return EXIT_FAILURE;
@


1.6
log
@uncast
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.5 2015/02/09 13:46:22 tedu Exp $ */
d339 16
a354 40
	if (0.5 == (time_t) 0.5) {
		/*
		** time_t is floating.
		*/
		if (sizeof (time_t) == sizeof (float)) {
			absolute_min_time = (time_t) -FLT_MAX;
			absolute_max_time = (time_t) FLT_MAX;
		} else if (sizeof (time_t) == sizeof (double)) {
			absolute_min_time = (time_t) -DBL_MAX;
			absolute_max_time = (time_t) DBL_MAX;
		} else {
			(void) fprintf(stderr,
_("%s: use of -v on system with floating time_t other than float or double\n"),
				progname);
			exit(EXIT_FAILURE);
		}
	} else if (0 > (time_t) -1) {
		/*
		** time_t is signed.  Assume overflow wraps around.
		*/
		time_t t = 0;
		time_t t1 = 1;

		while (t < t1) {
			t = t1;
			t1 = 2 * t1 + 1;
		}

		absolute_max_time = t;
		t = -t;
		absolute_min_time = t - 1;
		if (t < absolute_min_time)
			absolute_min_time = t;
	} else {
		/*
		** time_t is unsigned.
		*/
		absolute_min_time = 0;
		absolute_max_time = absolute_min_time - 1;
	}
d513 1
a513 17
	if (0.5 == (time_t) 0.5) {	/* floating */
		if (sizeof (time_t) > sizeof (double))
			return "%Lg";
		return "%g";
	}
	if (0 > (time_t) -1) {		/* signed */
		if (sizeof (time_t) > sizeof (long))
			return "%lld";
		if (sizeof (time_t) > sizeof (int))
			return "%ld";
		return "%d";
	}
	if (sizeof (time_t) > sizeof (unsigned long))
		return "%llu";
	if (sizeof (time_t) > sizeof (unsigned int))
		return "%lu";
	return "%u";
@


1.5
log
@remove INITIALIZE macro and do it the hard way.
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.4 2015/02/09 13:39:16 tedu Exp $ */
d129 14
a142 14
			(void) fflush(stdout);
			(void) fprintf(stderr, "\n%s: ", progname);
			(void) fprintf(stderr, tformat(), *tp);
			(void) fprintf(stderr, " ->");
			(void) fprintf(stderr, " year=%d", tmp->tm_year);
			(void) fprintf(stderr, " mon=%d", tmp->tm_mon);
			(void) fprintf(stderr, " mday=%d", tmp->tm_mday);
			(void) fprintf(stderr, " hour=%d", tmp->tm_hour);
			(void) fprintf(stderr, " min=%d", tmp->tm_min);
			(void) fprintf(stderr, " sec=%d", tmp->tm_sec);
			(void) fprintf(stderr, " isdst=%d", tmp->tm_isdst);
			(void) fprintf(stderr, " -> ");
			(void) fprintf(stderr, tformat(), t);
			(void) fprintf(stderr, "\n");
d180 2
a181 3
	(void) fflush(stdout);
	(void) fprintf(stderr,
		_("%s: warning: zone \"%s\" abbreviation \"%s\" %s\n"),
d191 1
a191 2
	(void) fprintf(stream,
_("usage: %s [-v] [-c [loyear,]hiyear] zonename ...\n"), progname);
d243 1
a243 1
(void) fprintf(stderr, _("%s: wild -c argument %s\n"),
d252 1
a252 1
	(void) time(&now);
d263 1
a263 2
		fakeenv = (char **) malloc((size_t) ((i + 2) *
			sizeof *fakeenv));
d265 3
a267 3
			(fakeenv[0] = (char *) malloc(longest + 4)) == NULL) {
					(void) perror(progname);
					exit(EXIT_FAILURE);
d327 2
a328 2
		(void) fprintf(stderr, "%s: ", progname);
		(void) perror(_("Error writing to standard output"));
d427 1
a427 1
		(void) strlcpy(loab, abbr(&lotm), sizeof loab);
d488 1
a488 1
	(void) printf("%-*s  ", (int) longest, zone);
d492 1
a492 1
			(void) printf(tformat(), t);
d495 1
a495 1
			(void) printf(" UTC");
d497 1
a497 1
		(void) printf(" = ");
d503 1
a503 1
			(void) printf(" %s", abbr(tmp));
d505 1
a505 1
			(void) printf(" isdst=%d", tmp->tm_isdst);
d507 1
a507 1
			(void) printf(" gmtoff=%ld", tmp->TM_GMTOFF);
d511 1
a511 1
	(void) printf("\n");
d573 1
a573 1
		(void) printf("NULL");
d589 1
a589 1
	(void) printf("%.3s %.3s%3d %.2d:%.2d:%.2d ",
d606 3
a608 2
		(void) printf("%d", trail);
	else	(void) printf("%d%d", lead, ((trail < 0) ? -trail : trail));
@


1.4
log
@unifdef have gettext. don't have it, won't have it.
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.3 2015/02/09 12:52:45 tedu Exp $ */
a82 25
#ifndef GNUC_or_lint
#ifdef lint
#define GNUC_or_lint
#else /* !defined lint */
#ifdef __GNUC__
#define GNUC_or_lint
#endif /* defined __GNUC__ */
#endif /* !defined lint */
#endif /* !defined GNUC_or_lint */

#ifndef INITIALIZE
#ifdef GNUC_or_lint
#define INITIALIZE(x)	((x) = 0)
#else /* !defined GNUC_or_lint */
#define INITIALIZE(x)
#endif /* !defined GNUC_or_lint */
#endif /* !defined INITIALIZE */

/*
** For the benefit of GNU folk...
** `_(MSGID)' uses the current locale's message library string for MSGID.
** The default is to use gettext if available, and use MSGID otherwise.
*/

#ifndef _
a83 1
#endif /* !defined _ */
d219 2
a220 2
	INITIALIZE(cutlotime);
	INITIALIZE(cuthitime);
@


1.3
log
@deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.2 2015/02/09 12:45:33 tedu Exp $ */
a82 8
#ifndef HAVE_GETTEXT
#define HAVE_GETTEXT 0
#endif
#if HAVE_GETTEXT
#include "locale.h"	/* for setlocale */
#include "libintl.h"
#endif /* HAVE_GETTEXT */

a107 3
#if HAVE_GETTEXT
#define _(msgid) gettext(msgid)
#else /* !HAVE_GETTEXT */
a108 1
#endif /* !HAVE_GETTEXT */
a246 7
#if HAVE_GETTEXT
	(void) setlocale(LC_ALL, "");
#ifdef TZ_DOMAINDIR
	(void) bindtextdomain(TZ_DOMAIN, TZ_DOMAINDIR);
#endif /* defined TEXTDOMAINDIR */
	(void) textdomain(TZ_DOMAIN);
#endif /* HAVE_GETTEXT */
@


1.2
log
@sort | uniq includes, and use <> instead of quotes
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.1 2015/02/09 12:37:47 tedu Exp $ */
d157 1
a157 1
	register struct tm *	tmp;
d162 1
a162 1
		register time_t	t;
d192 2
a193 2
	register const char *	cp;
	register char *		wp;
d240 9
a248 9
	register int		i;
	register int		c;
	register int		vflag;
	register char *		cutarg;
	register long		cutloyear = ZDUMP_LO_YEAR;
	register long		cuthiyear = ZDUMP_HI_YEAR;
	register time_t		cutlotime;
	register time_t		cuthitime;
	register char **	fakeenv;
d254 2
a255 2
	register struct tm *	tmp;
	register struct tm *	newtmp;
d305 2
a306 2
		register int	from;
		register int	to;
d433 3
a435 3
	register long	myy;
	register long	seconds;
	register time_t	t;
d467 1
a467 1
	register struct tm *	lotmp;
d469 1
a469 1
	register struct tm *	tmp;
d513 2
a514 2
	register long	result;
	register int	tmy;
d534 1
a534 1
	register struct tm *	tmp;
d568 1
a568 1
	register char *	result;
d606 1
a606 1
register const struct tm *	timeptr;
d615 4
a618 4
	register const char *	wn;
	register const char *	mn;
	register int		lead;
	register int		trail;
@


1.1
log
@move zic and zdump source to appropriate directories
@
text
@d1 1
a1 1
/*	$OpenBSD: zdump.c,v 1.24 2015/02/09 10:45:56 tedu Exp $ */
d13 6
a18 8
#include "stdio.h"	/* for stdout, stderr, perror */
#include "string.h"	/* for strlcpy */
#include "ctype.h"	/* for isascii, isalpha, isdigit */
#include "sys/types.h"	/* for time_t */
#include "time.h"	/* for struct tm */
#include "stdlib.h"	/* for exit, malloc, atoi */
#include "float.h"	/* for FLT_MAX and DBL_MAX */
#include "ctype.h"	/* for isalpha et al. */
@

