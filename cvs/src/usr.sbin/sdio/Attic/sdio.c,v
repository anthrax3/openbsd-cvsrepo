head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.14
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2014.10.07.04.41.13;	author deraadt;	state dead;
branches;
next	1.6;
commitid	qgvdcwefm6TdVL3P;

1.6
date	2012.01.17.15.22.11;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.17.15.15.57;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.27.04.11.28;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.26.19.19.47;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.29.01.03.45;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.28.20.26.31;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Rare to find a gem this amazing missed by tedu.
@
text
@/*	$OpenBSD: sdio.c,v 1.6 2012/01/17 15:22:11 jsing Exp $	*/

/*
 * Copyright (c) 2006 Uwe Stuehler <uwe@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <sys/ioctl.h>
#include <sys/limits.h>
#include <sys/param.h>

#include <dev/biovar.h>

#include <dev/sdmmc/sdmmcvar.h>
#include <dev/sdmmc/sdmmc_ioreg.h>

#define DEV_BIO "/dev/bio"
#define DEV_NAME "sdmmc0"

struct sdio_hdl {
	int	 bio;
	char	*devname;
	void	*cookie;
};

#define SDIO_ADDR_MAX 131072

static int	sdio_open(const char *, struct sdio_hdl **);
static void	sdio_close(struct sdio_hdl *);
static int	sdio_debug(struct sdio_hdl *, int);
static int	sdio_exec(struct sdio_hdl *, struct sdmmc_command *);
static int	sdio_command(struct sdio_hdl *, int, int, char *[]);

static int	strtoint(const char *, const char **);
static int	strtorsp(const char *, const char **);
static void	usage(void) __dead;

static int
sdio_open(const char *name, struct sdio_hdl **hdl)
{
	struct bio_locate bl;

	*hdl = malloc(sizeof **hdl);
	if (*hdl == NULL)
		err(1, NULL);

	(*hdl)->bio = open(DEV_BIO, O_RDWR);
	if ((*hdl)->bio == -1) {
		warn("unable to open %s", DEV_BIO);
		return -1;
	}

	bzero(&bl, sizeof bl);
	bl.bl_name = DEV_NAME;

	if (ioctl((*hdl)->bio, BIOCLOCATE, &bl) == -1) {
		warn("unable to locate %s", bl.bl_name);
		return -1;
	}

	(*hdl)->cookie = bl.bl_bio.bio_cookie;
	return 0;
}

static void
sdio_close(struct sdio_hdl *hdl)
{
	(void)close(hdl->bio);
	free(hdl);
}

static int
sdio_debug(struct sdio_hdl *hdl, int debug)
{
	struct bio_sdmmc_debug bctl;

	bctl.cookie = hdl->cookie;
	bctl.debug = debug;

	return ioctl(hdl->bio, SDIOCSETDEBUG, &bctl);
}

static int
sdio_exec(struct sdio_hdl *hdl, struct sdmmc_command *cmd)
{
	struct bio_sdmmc_command bcmd;

	bcopy(cmd, &bcmd.cmd, sizeof *cmd);
	bcmd.cookie = hdl->cookie;

	if (ioctl(hdl->bio, SDIOCEXECMMC, &bcmd) == -1)
		err(1, "ioctl");

	bcopy(&bcmd.cmd, cmd, sizeof *cmd);
	if (cmd->c_error) {
		errno = cmd->c_error;
		return -1;
	}
	return 0;
}

static int
sdio_command(struct sdio_hdl *hdl, int datalen, int argc, char *argv[])
{
	struct sdmmc_command cmd;
	const char *errstr;
	u_char *buf = NULL;
	int error;
	int i;

	if (argc < 3)
		errx(1, "sdio_command: wrong # args\n");

	bzero(&cmd, sizeof cmd);

	cmd.c_opcode = strtoint(argv[0], &errstr);
	if (!errstr && cmd.c_opcode > 63)
		errstr = "out of range";
	if (errstr)
		errx(1, "command index is %s: %s", argv[0]);

	cmd.c_arg = strtoint(argv[1], &errstr);
	if (errstr)
		errx(1, "command argument is %s: %s", argv[1]);

	cmd.c_flags = strtorsp(argv[2], &errstr);
	if (errstr)
		errx(1, "response type is %s: %s", argv[2]);

	argc -= 3;
	argv += 3;

	if (datalen > 0) {
		if (argc == 0)
			cmd.c_flags |= SCF_CMD_READ;

		if (argc > 0 && argc < datalen)
			errx(2, "expected %d more argument(s)",
			    datalen - argc);

		buf = (u_char *)malloc(datalen);
		if (buf == NULL)
			err(1, NULL);

		for (i = 0; argc > 0 && i < datalen; i++) {
			int ival = (u_int8_t)strtoint(argv[i], &errstr);
			if (!errstr && (ival < 0 || ival > UCHAR_MAX))
				errstr = "out of range";
			if (errstr)
				errx(1, "data byte at offset %d is %s: %s",
				    i, errstr, argv[i]);
			buf[i] = (u_int8_t)ival;
		}

		cmd.c_datalen = datalen;
		cmd.c_data = (void *)buf;
		/* XXX cmd.c_blklen = ??? */
		cmd.c_blklen = MIN(cmd.c_datalen, 512);
	}

	error = sdio_exec(hdl, &cmd);
	if (error)
		err(1, "sdio_exec");

	printf("0x%08x 0x%08x 0x%08x 0x%08x\n", (u_int)cmd.c_resp[0],
	    (u_int)cmd.c_resp[1], (u_int)cmd.c_resp[2],
	    (u_int)cmd.c_resp[3]);

	if (datalen > 0) {
		for (i = 0; argc == 0 && i < datalen; i++)
			printf("0x%02x\n", buf[i]);
		free(buf);
	}

	return 0;
}

int
main(int argc, char *argv[])
{
	struct sdio_hdl *hdl;
	const char *errstr;
	int datalen = 0;
	int dflag = 0;
	int cflag = 0;
	int c;

	while ((c = getopt(argc, argv, "cdl:")) != -1) {
		switch (c) {
		case 'c':
			cflag = 1;
			break;

		case 'd':
			dflag = 1;
			break;

		case 'l':
			datalen = strtoint(optarg, &errstr);
			if (errstr)
				errx(2, "data length is %s: %s", optarg);
			break;

		default:
			usage();
		}
	}

	argc -= optind;
	argv += optind;

	if ((cflag + dflag) != 1 ||
	    (cflag && argc < 3) ||
	    (dflag && argc != 1))
		usage();

	if (sdio_open(DEV_NAME, &hdl))
		return 1;

	if (dflag) {
		int debug = strtoint(argv[0], &errstr);
		if (errstr)
			errx(2, "argument is %s: %s", errstr, argv[0]);
		if (sdio_debug(hdl, debug))
			err(1, "unable to set debug flags");
	}

	if (cflag && sdio_command(hdl, datalen, argc, argv))
		errx(1, "unable to send command");

	sdio_close(hdl);
	return 0;
}

static int
strtoint(const char *str, const char **errstr)
{
	char *ep;
	u_long val;

	errno = 0;
	val = strtoul(str, &ep, 0);
	if (str[0] == '\0' || *ep != '\0') {
		*errstr = "not a number";
		return 0;
	}
	if (errno == ERANGE && val == ULONG_MAX) {
		*errstr = "out of range";
		return 0;
	}
	*errstr = NULL;
	return (int)val;
}

static int
strtorsp(const char *str, const char **errstr)
{
	*errstr = NULL;
	if (!strcasecmp(str, "R1"))
		return SCF_RSP_R1;
	else if (!strcasecmp(str, "R1b"))
		return SCF_RSP_R1B;
	else if (!strcasecmp(str, "R2"))
		return SCF_RSP_R2;
	else if (!strcasecmp(str, "R3"))
		return SCF_RSP_R3;
	else if (!strcasecmp(str, "R4"))
		return SCF_RSP_R4;
	else if (!strcasecmp(str, "R5"))
		return SCF_RSP_R5;
	else if (!strcasecmp(str, "R5b"))
		return SCF_RSP_R5B;
	else if (!strcasecmp(str, "R6"))
		return SCF_RSP_R6;

	*errstr = "not valid";
	return 0;
}

__dead static void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,
		"usage: %s -c index argument response_type [data ...]\n",
		__progname);
	fprintf(stderr, "\t%s -d debug_flags\n", __progname);
	exit(2);
}
@


1.6
log
@Avoid redefining DEVNAME from <dev/sdmmc/sdmmcvar.h> by renaming this one
to DEV_NAME. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdio.c,v 1.5 2012/01/17 15:15:57 jsing Exp $	*/
@


1.5
log
@Move the bio(4) cookie into a separate struct and make this struct the
first member of each ioctl data structure. This will allow for future
changes to bio(4) status handling.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdio.c,v 1.3 2007/05/26 19:19:47 uwe Exp $	*/
d37 1
a37 1
#define DEVNAME "sdmmc0"
d73 1
a73 1
	bl.bl_name = DEVNAME;
d236 1
a236 1
	if (sdio_open(DEVNAME, &hdl))
@


1.4
log
@tweaks; ok uwe
@
text
@d80 1
a80 1
	(*hdl)->cookie = bl.bl_cookie;
@


1.3
log
@Rewrite the sdio(8) tool so that it can send arbitrary MMC commands.
@
text
@d1 1
a1 1
/*	$OpenBSD: sdio.c,v 1.2 2006/11/29 01:03:45 uwe Exp $	*/
d304 4
a307 2
	fprintf(stderr, "usage:\t%s -d debug_flags\n", __progname);
	fprintf(stderr, "\t%s -c index arg resp_type [data ...]\n", __progname);
@


1.2
log
@avoid code duplication, include <dev/sdmmc/sdmmcvar.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: sdio.c,v 1.1 2006/11/28 20:26:31 uwe Exp $	*/
d24 1
d29 1
d51 1
a51 3
static int	sdio_cmd52(struct sdio_hdl *, int, int, u_int8_t *, int);
static int	sdio_cmd53(struct sdio_hdl *, int, int, u_char *, size_t,
			   int);
a52 2
int		sdio_read(struct sdio_hdl *, int, int, int *, int);
int		sdio_write(struct sdio_hdl *, int, int, int, int);
d54 1
d108 1
a109 1
	bcmd.cookie = hdl->cookie;
d122 1
a122 1
sdio_cmd52(struct sdio_hdl *hdl, int fnum, int reg, u_int8_t *data, int arg)
d125 2
a126 1
	int function;
d128 1
d130 2
a131 8
	arg &= SD_ARG_CMD52_READ | SD_ARG_CMD52_WRITE;

	arg |= (fnum & SD_ARG_CMD52_FUNC_MASK) <<
	    SD_ARG_CMD52_FUNC_SHIFT;
	arg |= (reg & SD_ARG_CMD52_REG_MASK) <<
	    SD_ARG_CMD52_REG_SHIFT;
	arg |= (*data & SD_ARG_CMD52_DATA_MASK) <<
	    SD_ARG_CMD52_DATA_SHIFT;
a133 3
	cmd.c_opcode = SD_IO_RW_DIRECT;
	cmd.c_arg = arg;
	cmd.c_flags = SCF_CMD_BC/* XXX */ | SCF_RSP_R5;
d135 38
a172 2
	if (sdio_exec(hdl, &cmd) != 0)
		return -1;
d174 5
a178 3
	*data = SD_R5_DATA(cmd.c_resp);
	return 0;
}
d180 12
a191 51
static int
sdio_cmd53(struct sdio_hdl *hdl, int fnum, int reg, u_char *data,
    size_t datalen, int arg)
{
	struct sdmmc_command cmd;
	int function;
	int error;

	arg &= SD_ARG_CMD53_READ | SD_ARG_CMD53_WRITE |
	    SD_ARG_CMD53_INCREMENT;

	arg |= (fnum & SD_ARG_CMD53_FUNC_MASK) <<
	    SD_ARG_CMD53_FUNC_SHIFT;
	arg |= (reg & SD_ARG_CMD53_REG_MASK) <<
	    SD_ARG_CMD53_REG_SHIFT;
	arg |= (datalen & SD_ARG_CMD53_LENGTH_MASK) <<
	    SD_ARG_CMD53_LENGTH_SHIFT;

	bzero(&cmd, sizeof cmd);
	cmd.c_opcode = SD_IO_RW_EXTENDED;
	cmd.c_arg = arg;
	cmd.c_flags = SCF_CMD_ADTC/* XXX */ | SCF_RSP_R5;
	cmd.c_data = data;
	cmd.c_datalen = datalen;
	cmd.c_blklen = datalen;

	if (!(arg & SD_ARG_CMD53_WRITE))
		cmd.c_flags |= SCF_CMD_READ;

	return sdio_exec(hdl, &cmd);
}

int
sdio_read(struct sdio_hdl *hdl, int fnum, int addr, int *ival, int width)
{
	u_int16_t v2 = 0;
	u_int8_t v1 = 0;
	int error;

	switch (width) {
	case 2:
		error = sdio_cmd53(hdl, fnum, addr, (u_char *)&v2, 2,
		    SD_ARG_CMD53_READ | SD_ARG_CMD53_INCREMENT);
		if (!error)
			*ival = (int)v2;
		return error;
	default:
		error = sdio_cmd52(hdl, fnum, addr, &v1, SD_ARG_CMD52_READ);
		if (!error)
			*ival = (int)v1;
		return error;
a192 1
}
d194 1
a194 15
int
sdio_write(struct sdio_hdl *hdl, int fnum, int addr, int ival, int width)
{
	u_int16_t v2 = 0;
	u_int8_t v1 = 0;

	switch (width) {
	case 2:
		v2 = (u_int16_t)ival;
		return sdio_cmd53(hdl, fnum, addr, (u_char *)&v2,
		    sizeof v2, SD_ARG_CMD53_WRITE | SD_ARG_CMD53_INCREMENT);
	default:
		v1 = (u_int8_t)ival;
		return sdio_cmd52(hdl, fnum, addr, &v1, SD_ARG_CMD52_WRITE);
	}
d202 3
a204 5
	int dflag = 0, debug;
	int rflag = 0;
	int wflag = 0;
	int fnum = 0;
	int width = 1;
d207 1
a207 1
	while ((c = getopt(argc, argv, "2d:f:rw")) != -1) {
d209 2
a210 2
		case '2':
			width = 2;
a214 4
			debug = strtoint(optarg, &errstr);
			if (errstr)
				errx(2, "argument is %s: %s",
				    errstr, optarg);
d217 2
a218 2
		case 'f':
			fnum = strtonum(optarg, 0, 7, &errstr);
d220 1
a220 10
				errx(2, "function number is %s: %s",
				    errstr, optarg);
			break;

		case 'r':
			rflag = 1;
			break;

		case 'w':
			wflag = 1;
d231 3
a233 12
	if (rflag && wflag)
		errx(2, "only one of -r or -w may be specified");

	if ((rflag || wflag) && argc < 1)
		errx(2, "address required for -r or -w");

	if (wflag && argc < 2)
		errx(2, "value required for -w");

	if ((rflag && argc != 1) || (wflag && argc != 2) ||
	    ((rflag|wflag) == 0 && argc > 0) ||
	    (rflag|wflag|dflag) == 0)
d239 2
a240 10
	if (dflag && sdio_debug(hdl, debug))
		err(1, "unable to set debug flags");

	if (rflag) {
		int addr;
		int val;

		addr = strtoint(argv[0], &errstr);
		if (!errstr && addr < 0 || addr > SDIO_ADDR_MAX)
			errstr = "out of range";
d242 3
a244 5
			errx(1, "address is %s: %s", errstr, argv[0]);

		if (sdio_read(hdl, fnum, addr, &val, width))
			err(1, "unable to read");
		printf("%u\n", (unsigned)val);
d247 2
a248 21
	if (wflag) {
		int addr;
		int val;

		addr = strtoint(argv[0], &errstr);
		if (!errstr && addr < 0 || addr > SDIO_ADDR_MAX)
			errstr = "out of range";
		if (errstr)
			errx(1, "address is %s: %s", errstr, argv[0]);

		val = strtoint(argv[1], &errstr);
		if (!errstr &&
		    ((width == 1 && (val < 0 || val > UCHAR_MAX)) ||
		     (width == 2 && (val < 0 || val > USHRT_MAX))))
			errstr = "out of range";
		if (errstr)
			errx(1, "value is %s: %s", errstr, argv[1]);

		if (sdio_write(hdl, fnum, addr, val, width))
			err(1, "unable to write");
	}
d274 25
d304 2
a305 2
	fprintf(stderr, "usage: %s [-d flags] [-f fnum] "
	    "[-r|-w addr [value]]\n", __progname);
@


1.1
log
@my small tool for debugging SD/MMC cards from the command line,
not hooked up to the build; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 2
d31 1
a31 2
#include <sys/limits.h>
#include <dev/sdmmc/sdmmcreg.h>
a32 58
#if 0
#include <dev/sdmmc/sdmmcvar.h>
#else
/* XXX */
#include <sys/queue.h>
struct sdmmc_softc;
typedef u_int32_t sdmmc_response[4];
struct sdmmc_task {
	void (*func)(void *arg);
	void *arg;
	int onqueue;
	struct sdmmc_softc *sc;
	TAILQ_ENTRY(sdmmc_task) next;
};
struct sdmmc_command {
	struct sdmmc_task c_task;	/* task queue entry */
	u_int16_t	 c_opcode;	/* SD or MMC command index */
	u_int32_t	 c_arg;		/* SD/MMC command argument */
	sdmmc_response	 c_resp;	/* response buffer */
	void		*c_data;	/* buffer to send or read into */
	int		 c_datalen;	/* length of data buffer */
	int		 c_blklen;	/* block length */
	int		 c_flags;	/* see below */
#define SCF_ITSDONE	 0x0001		/* command is complete */
#define SCF_CMD_AC	 0x0000
#define SCF_CMD_ADTC	 0x0010
#define SCF_CMD_BC	 0x0020
#define SCF_CMD_BCR	 0x0030
#define SCF_CMD_READ	 0x0040		/* read command (data expected) */
#define SCF_RSP_BSY	 0x0100
#define SCF_RSP_136	 0x0200
#define SCF_RSP_CRC	 0x0400
#define SCF_RSP_IDX	 0x0800
#define SCF_RSP_PRESENT	 0x1000
/* response types */
#define SCF_RSP_R0	 0 /* none */
#define SCF_RSP_R1	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
#define SCF_RSP_R2	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_136)
#define SCF_RSP_R3	 (SCF_RSP_PRESENT)
#define SCF_RSP_R4	 (SCF_RSP_PRESENT)
#define SCF_RSP_R5	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX)
#define SCF_RSP_R5B	 (SCF_RSP_PRESENT|SCF_RSP_CRC|SCF_RSP_IDX|SCF_RSP_BSY)
#define SCF_RSP_R6	 (SCF_RSP_PRESENT|SCF_RSP_CRC)
	int		 c_error;	/* errno value on completion */
};
struct bio_sdmmc_command {
	void *cookie;
	struct sdmmc_command cmd;
};

struct bio_sdmmc_debug {
	void *cookie;
	int debug;
};
#define SDIOCEXECMMC	_IOWR('S',0, struct bio_sdmmc_command)
#define SDIOCEXECAPP	_IOWR('S',1, struct bio_sdmmc_command)
#define SDIOCSETDEBUG	_IOWR('S',2, struct bio_sdmmc_debug)
#endif
@

