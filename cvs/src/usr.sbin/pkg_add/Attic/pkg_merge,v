head	1.22;
access;
symbols
	OPENBSD_5_0:1.21.0.6
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.4
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5;
locks; strict;
comment	@# @;


1.22
date	2011.08.26.08.46.09;	author espie;	state dead;
branches;
next	1.21;

1.21
date	2010.07.28.12.19.54;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2010.07.04.19.34.06;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.30.11.22.23;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.30.10.41.41;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.09.11.57.21;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.09.10.58.01;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2008.10.10.04.35.31;	author steven;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.06.09.36.17;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.16.09.29.37;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.02.13.59.19;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.29.11.09.29;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.24.12.52.18;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.07.14.18.04;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.29.22.56.41;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.26.16.41.08;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.26.14.45.39;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.26.12.30.16;	author espie;	state Exp;
branches;
next	;


desc
@@


1.22
log
@zap fatpackages. nobody actually uses them.
accordingly, locations do not need to track architecture.
@
text
@#! /usr/bin/perl
# Copyright (c) 2005-2007 Marc Espie <espie@@openbsd.org>
# $OpenBSD: pkg_merge,v 1.21 2010/07/28 12:19:54 espie Exp $
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::PackageLocator;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::Getopt;
use OpenBSD::Error;
use OpenBSD::Ustar;
use OpenBSD::ArcCheck;
use OpenBSD::Paths;
use OpenBSD::State;
use File::Copy;
use File::Path;

package OpenBSD::PackingElement;
sub copy_over {}

sub mark_tocopy {}

sub make_alias {}
package OpenBSD::PackingElement::FileBase;
sub mark_tocopy
{
	my ($self, $list) = @@_;
	push(@@$list, $self);
}

sub copy_over
{
	my ($self, $wrarc, $prefix, $pkg, $state) = @@_;
	my $e = $pkg->{pkg}->next;
	if (!$e->check_name($self)) {
		$state->fatal("Names don't match: #1 vs #2", 
		    $e->{name}, $self->{name});
	}
	$e->{name} = $prefix."/".$e->{name};
	$e->copy_long($wrarc);
}

sub make_alias
{
	my ($self, $wrarc, $prefix, $pkg, $alias, $state) = @@_;
	my $e = $pkg->{pkg}->next;
	if (!$e->check_name($self)) {
		$state->fatal("Names don't match: #1 vs #2", 
		    $e->{name}, $self->{name});
	}
	$e->{name} = $prefix."/".$e->{name};
	$e->alias($wrarc, "$prefix/$alias");
}

package OpenBSD::PackingElement::SpecialFile;
use File::Copy;

sub mark_tocopy
{
	my ($self, $list) = @@_;
	push(@@$list, $self);
}
sub copy_over
{
	my ($self, $wrarc, $prefix, $pkg, $state) = @@_;
	if (defined $wrarc) {
		$wrarc->destdir($pkg->{dir});
		my $e = $wrarc->prepare($self->{name});
		$e->{name} = "$prefix/".$e->{name};
		$e->write;
	}
}


package main;

sub find_equal
{
	my $list = shift;
	my $name = $list->[0]->{tocopy}->[0]->{name};
	for my $pkg (@@$list) {
		if ($pkg->{tocopy}->[0]->{name} ne $name) {
			return undef;
		}
	}
	return $name;
}

sub occurs_first_or_not
{
	my ($name, $list) = @@_;
	for my $pkg (@@$list) {
		if ($pkg->{tocopy}->[0]->{name} eq $name) {
			next;
		}
		for my $i (@@{$pkg->{tocopy}}) {
			if ($i->{name} eq $name) {
				return 0;
			}
		}
	}
	return 1;
}

sub occurs_first
{
	my $list= shift;

	for my $pkg (@@$list) {
		my $name = $pkg->{tocopy}->[0]->{name};
		if (occurs_first_or_not($name, $list)) {
			return $name;
		}
	}
	return undef;
}


my $ui = OpenBSD::State->new("pkg_merge");
$ui->{no_exports} = 1;
$ui->handle_options('o:v', '[-v] -o result pkg pkg2 ...');
my $out = $ui->opt('o');
my $verbose = $ui->opt('v');
if (!$out) {
	$ui->usage("Missing -o result");
}
if (-e $out) {
	$ui->unlink($verbose, $out);
}


if (@@ARGV < 2) {
	$ui->usage("Can't merge less than two packages");
}
my @@tomerge;

my $prefix = 'a';
my $allprefix = '';
open(my $outfh, "|-", OpenBSD::Paths->gzip, "-o", $out);

my $wrarc = OpenBSD::Ustar->new($outfh, $ui, ".");
for my $pkgname (@@ARGV) {
	my $true_package = $ui->repo->find($pkgname);
	$ui->fatal("No such package #1", $pkgname) unless $true_package;
	my $dir = $true_package->info;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);

	my $in = {
			plist => $plist,
			dir => $dir,
			prefix => $prefix,
			tocopy => [],
			pkg => $true_package
		};
	my $e = OpenBSD::PackingElement::FCONTENTS->new(CONTENTS);
	$e->copy_over($wrarc, $prefix, $true_package, $ui);
	$plist->mark_tocopy($in->{tocopy});
	push(@@tomerge, $in);
	$prefix++;
}

my $total_files = 0;
my $total_size = 0;

# For now, we assume packing-lists contain the same items.
while(1) {
	# kill empty lists
	my @@n = ();
	for my $pkg (@@tomerge) {
		if (@@{$pkg->{tocopy}} > 0) {
			push(@@n, $pkg);
		}
	}
	@@tomerge = @@n;
	if (@@tomerge == 0) {
		last;
	}
	# determine which item we want to copy (by name)
	my $name;

	# easiest case: same name all around.
	$name = find_equal(\@@tomerge);

	# second case: a name that occurs first in some lists,
	# and not in the others
	if (!defined $name) {
		$name = occurs_first(\@@tomerge);
	}

	# else, try random
	if (!defined $name) {
		$name = $tomerge[0]->{tocopy}->[0]->{name};
	}

	my $allprefix='';
	my $ref;
	my @@mergeable = ();
	# select the mergeable items
	for my $pkg (@@tomerge) {
		if ($pkg->{tocopy}->[0]->{name} eq $name) {
			push(@@mergeable, $pkg);
		}
	}

	my $all_copies = 0;
	while (@@mergeable > 0) {
		my $pkg = shift @@mergeable;
		my $ref = shift @@{$pkg->{tocopy}};
		my $copies = 0;
		my $currentprefix = $pkg->{prefix};
		my @@todo = ();
		my @@merged = ();
		for my $cmp (@@mergeable) {
		    if (defined $ref->{d} && $cmp->{tocopy}->[0]->{d}->equals($ref->{d})) {
		    	push(@@merged, $cmp);
			$currentprefix .= $cmp->{prefix};
			$copies++;
		    } else {
			    push(@@todo, $cmp);
		    }
		}
		$total_files += $copies;
		if (defined $ref->{size}) {
			$total_size += $ref->{size} * $copies;
		}
		$ref->copy_over($wrarc, $currentprefix, $pkg);
		@@mergeable = @@todo;
		$all_copies += $copies;
		for my $pkg2 (@@merged) {
			my $i = shift @@{$pkg2->{tocopy}};
			$i->make_alias($wrarc, $currentprefix, $pkg2, $name, $ui);
		}
	}
	if ($verbose) {
		if ($all_copies) {
			$ui->say("#1 (shared: #2)", $name, $all_copies);
		} else {
			$ui->say("#1", $name);
		}
	}
}
$wrarc->close;
$ui->say("Shared #1 files for #2 bytes", $total_files, $total_size) if $verbose;
@


1.21
log
@pass state to Ustar objects, use it to display those pesky error and
fatal messages.

zap $opt_x from pkg_mklocated, do things like other commands do.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_merge,v 1.20 2010/07/04 19:34:06 espie Exp $
@


1.20
log
@remove  direct prints, pass thru state.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_merge,v 1.19 2010/06/30 11:22:23 espie Exp $
d155 1
a155 1
my $wrarc = OpenBSD::Ustar->new($outfh, ".");
@


1.19
log
@modernize pkg_merge, avoid warning for link sizes.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_merge,v 1.18 2010/06/30 10:51:04 espie Exp $
d47 1
a47 1
	my ($self, $wrarc, $prefix, $pkg) = @@_;
d50 2
a51 1
		die "Names don't match: ", $e->{name}, " ", $self->{name};
d59 1
a59 1
	my ($self, $wrarc, $prefix, $pkg, $alias) = @@_;
d62 2
a63 1
		die "Names don't match: ", $e->{name}, " ", $self->{name};
d79 1
a79 1
	my ($self, $wrarc, $prefix, $pkg) = @@_;
d153 1
a153 1
open( my $outfh, "|-", OpenBSD::Paths->gzip, "-o", $out);
d170 1
a170 1
	$e->copy_over($wrarc, $prefix, $true_package);
d245 1
a245 1
			$i->make_alias($wrarc, $currentprefix, $pkg2, $name);
@


1.18
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d3 1
a3 1
# $OpenBSD$
d132 5
a136 7
$ui->usage_is('[-v] -o result pkg pkg2 ...');

our ($opt_o, $opt_v);

$ui->do_options(sub { getopts('o:v'); });

if (!defined $opt_o) {
d139 4
d144 1
a144 1
if (@@ARGV<2) {
d151 1
a151 1
open( my $outfh, "|-", OpenBSD::Paths->gzip, "-o", $opt_o);
d155 2
a156 2
	my $true_package = OpenBSD::PackageLocator->find($pkgname);
	die "No such package $pkgname" unless $true_package;
d235 3
a237 1
		$total_size += $ref->{size} * $copies;
d246 1
a246 1
	if ($opt_v) {
d248 1
a248 1
			print "$name (shared: $all_copies)\n";
d250 1
a250 1
			print $name, "\n";
d255 1
a255 1
print "Shared $total_files files for $total_size bytes\n" if $opt_v;
@


1.17
log
@whitespace cleanup
@
text
@@


1.16
log
@common pattern reuse
@
text
@d3 1
a3 1
# $OpenBSD: pkg_merge,v 1.15 2010/06/09 10:58:01 espie Exp $
@


1.15
log
@use State usage, so that I can get rid of duplicate code...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_merge,v 1.14 2010/05/10 09:17:55 espie Exp $
d136 1
a136 5
try {
	getopts('o:v');
} catchall {
	$ui->usage($_);
};
@


1.14
log
@whitespace fixes
@
text
@d3 1
a3 1
# $OpenBSD$
d28 1
d131 2
a132 1
set_usage('pkg_merge [-v] -o result pkg pkg2 ...');
d139 1
a139 1
	Usage($_);
d143 1
a143 1
	Usage "Missing -o result";
d147 1
a147 1
	Usage "Can't merge less than two packages";
@


1.13
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d4 1
a4 1
# 
d8 1
a8 1
# 
@


1.12
log
@add rcs tags

ok espie
@
text
@d19 1
@


1.11
log
@turn the checksums stored in packing elements into real objects, so that
pkg_add becomes mostly independent of the type of checksum stored.

separate md5 into an abstract OpenBSD::digest class and an md5 subclass
with specific methods to compute checksums and serialize results, and create
an sha class that does the same thing with sha256 (with a base64 serializer)
@
text
@d3 1
@


1.10
log
@use OpenBSD::Paths contents
@
text
@d224 1
a224 1
		    if (defined $ref->{md5} && $cmp->{tocopy}->[0]->{md5} eq $ref->{md5}) {
@


1.9
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d25 1
d149 1
a149 1
open( my $outfh, "|gzip -c >$opt_o");
@


1.8
log
@remove extraneous () in method call: $o->method() becomes $o->method
@
text
@d44 1
a44 1
	my $e = $pkg->{pkg}->next();
d55 1
a55 1
	my $e = $pkg->{pkg}->next();
@


1.7
log
@replace $p->visit('method') calls with $p->method
now that it works.
@
text
@d2 1
a2 1
# Copyright (c) 2005 Marc Espie <espie@@openbsd.org>
d17 1
d78 1
a78 1
		$e->write();
d154 1
a154 1
	my $dir = $true_package->info();
d249 1
a249 1
$wrarc->close();
@


1.6
log
@pass actual items to prepare_long and check_name so that we can also
verify that modes/groups/owners are correct (code to come)
@
text
@d165 1
a165 1
	$plist->visit('mark_tocopy', $in->{tocopy});
@


1.5
log
@wrapper around Ustar that replaces long names/links with LongName#/LongLink#.

The archive will unpack correctly with tar, except that those names won't
be preserved.

The wrapper checks names against the packing-list to restore the correct names
on the fly.

Put into a separate file, as it is an extension of Ustar proper, and we're
going to do more archive checking in the future.

Lots of tests by Bernd Ahlers. Comments by Tom Cosgrove.
@
text
@d44 1
a44 1
	if (!$e->check_name($self->{name})) {
d55 1
a55 1
	if (!$e->check_name($self->{name})) {
@


1.4
log
@Usage().
noticed by deraadt@@
@
text
@d23 1
d44 1
a44 1
	if ($e->{name} ne $self->{name}) {
d48 1
a48 1
	$e->copy($wrarc);
d55 1
a55 1
	if ($e->{name} ne $self->{name}) {
@


1.3
log
@Handle hard links correctly: the names need to be aliased correctly for
pkg_merging, and the names need to lose the prefix path when getting
extracted.
@
text
@d136 1
a136 1
	die "Error: must have a result name";
d140 1
a140 1
	die "Error need at least two packages to merge";
@


1.2
log
@some useful statistics about shared files and size gains.
@
text
@d31 1
d47 9
a55 2
	if (defined $wrarc) {
		$e->copy($wrarc);
d57 2
d219 1
d222 1
a222 2
			my $i = shift @@{$cmp->{tocopy}};
			$i->copy_over(undef, undef, $cmp);
d234 4
@


1.1
log
@new tool (not active yet): pkg_merge.
Can be used to merge several packages into a fat package.
Uses simple heuristics to find out a `nice' ordering for common files,
can handle semi-common prefixes.
@
text
@d115 1
a115 1
set_usage('pkg_merge -o result pkg pkg2 ...');
d117 1
a117 1
our ($opt_o);
d120 1
a120 1
	getopts('o:');
d159 3
a183 1
		print "(first)";
a188 1
		print "(random)";
a191 2
	print $name, "\n";

d202 1
d206 1
d214 1
d219 2
d223 8
d234 1
@

