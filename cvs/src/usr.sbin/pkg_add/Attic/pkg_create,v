head	1.140;
access;
symbols
	OPENBSD_4_7:1.135.0.2
	OPENBSD_4_7_BASE:1.135
	OPENBSD_4_6:1.122.0.4
	OPENBSD_4_6_BASE:1.122
	OPENBSD_4_5:1.119.0.2
	OPENBSD_4_5_BASE:1.119
	OPENBSD_4_4:1.117.0.2
	OPENBSD_4_4_BASE:1.117
	OPENBSD_4_3:1.115.0.4
	OPENBSD_4_3_BASE:1.115
	OPENBSD_4_2:1.115.0.2
	OPENBSD_4_2_BASE:1.115
	OPENBSD_4_1:1.50.0.2
	OPENBSD_4_1_BASE:1.50
	OPENBSD_4_0:1.45.0.4
	OPENBSD_4_0_BASE:1.45
	OPENBSD_3_9:1.45.0.2
	OPENBSD_3_9_BASE:1.45
	OPENBSD_3_8:1.37.0.2
	OPENBSD_3_8_BASE:1.37
	OPENBSD_3_7:1.33.0.2
	OPENBSD_3_7_BASE:1.33
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	pkgtools:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.140
date	2010.06.04.13.19.39;	author espie;	state dead;
branches;
next	1.139;

1.139
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.138;

1.138
date	2010.04.05.16.07.10;	author espie;	state Exp;
branches;
next	1.137;

1.137
date	2010.04.05.14.47.05;	author espie;	state Exp;
branches;
next	1.136;

1.136
date	2010.03.22.20.38.44;	author espie;	state Exp;
branches;
next	1.135;

1.135
date	2010.02.28.10.08.48;	author espie;	state Exp;
branches;
next	1.134;

1.134
date	2010.01.24.14.23.47;	author espie;	state Exp;
branches;
next	1.133;

1.133
date	2010.01.19.14.32.22;	author espie;	state Exp;
branches;
next	1.132;

1.132
date	2010.01.10.21.27.59;	author espie;	state Exp;
branches;
next	1.131;

1.131
date	2010.01.10.11.47.48;	author espie;	state Exp;
branches;
next	1.130;

1.130
date	2010.01.05.19.38.21;	author espie;	state Exp;
branches;
next	1.129;

1.129
date	2010.01.01.16.12.21;	author espie;	state Exp;
branches;
next	1.128;

1.128
date	2010.01.01.16.09.35;	author espie;	state Exp;
branches;
next	1.127;

1.127
date	2010.01.01.14.34.59;	author espie;	state Exp;
branches;
next	1.126;

1.126
date	2010.01.01.14.22.01;	author espie;	state Exp;
branches;
next	1.125;

1.125
date	2009.12.13.08.54.32;	author espie;	state Exp;
branches;
next	1.124;

1.124
date	2009.11.17.10.16.41;	author espie;	state Exp;
branches;
next	1.123;

1.123
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.122;

1.122
date	2009.06.10.15.44.05;	author espie;	state Exp;
branches;
next	1.121;

1.121
date	2009.04.19.14.58.32;	author espie;	state Exp;
branches;
next	1.120;

1.120
date	2009.04.14.17.53.58;	author espie;	state Exp;
branches;
next	1.119;

1.119
date	2008.10.24.16.50.27;	author espie;	state Exp;
branches;
next	1.118;

1.118
date	2008.10.06.09.36.17;	author espie;	state Exp;
branches;
next	1.117;

1.117
date	2008.06.11.09.43.25;	author espie;	state Exp;
branches;
next	1.116;

1.116
date	2008.04.07.11.02.24;	author espie;	state Exp;
branches;
next	1.115;

1.115
date	2007.06.16.09.29.37;	author espie;	state Exp;
branches;
next	1.114;

1.114
date	2007.06.14.10.16.37;	author espie;	state Exp;
branches;
next	1.113;

1.113
date	2007.06.04.18.52.01;	author espie;	state Exp;
branches;
next	1.112;

1.112
date	2007.06.04.16.33.22;	author espie;	state Exp;
branches;
next	1.111;

1.111
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.110;

1.110
date	2007.05.31.13.11.21;	author espie;	state Exp;
branches;
next	1.109;

1.109
date	2007.05.31.11.05.41;	author espie;	state Exp;
branches;
next	1.108;

1.108
date	2007.05.30.12.37.07;	author espie;	state Exp;
branches;
next	1.107;

1.107
date	2007.05.29.15.38.41;	author espie;	state Exp;
branches;
next	1.106;

1.106
date	2007.05.29.15.35.05;	author espie;	state Exp;
branches;
next	1.105;

1.105
date	2007.05.29.13.10.57;	author espie;	state Exp;
branches;
next	1.104;

1.104
date	2007.05.28.12.08.22;	author espie;	state Exp;
branches;
next	1.103;

1.103
date	2007.05.28.11.35.54;	author espie;	state Exp;
branches;
next	1.102;

1.102
date	2007.05.25.12.19.23;	author espie;	state Exp;
branches;
next	1.101;

1.101
date	2007.05.22.14.06.30;	author jmc;	state Exp;
branches;
next	1.100;

1.100
date	2007.05.22.06.48.22;	author jmc;	state Exp;
branches;
next	1.99;

1.99
date	2007.05.22.00.25.42;	author espie;	state Exp;
branches;
next	1.98;

1.98
date	2007.05.15.10.36.34;	author espie;	state Exp;
branches;
next	1.97;

1.97
date	2007.05.12.14.00.35;	author espie;	state Exp;
branches;
next	1.96;

1.96
date	2007.05.07.09.37.30;	author espie;	state Exp;
branches;
next	1.95;

1.95
date	2007.05.06.15.41.47;	author espie;	state Exp;
branches;
next	1.94;

1.94
date	2007.05.05.11.18.18;	author espie;	state Exp;
branches;
next	1.93;

1.93
date	2007.05.05.10.50.04;	author espie;	state Exp;
branches;
next	1.92;

1.92
date	2007.05.05.10.48.39;	author espie;	state Exp;
branches;
next	1.91;

1.91
date	2007.05.05.10.47.06;	author espie;	state Exp;
branches;
next	1.90;

1.90
date	2007.05.05.10.40.44;	author espie;	state Exp;
branches;
next	1.89;

1.89
date	2007.05.04.19.40.37;	author espie;	state Exp;
branches;
next	1.88;

1.88
date	2007.05.03.14.49.56;	author espie;	state Exp;
branches;
next	1.87;

1.87
date	2007.05.03.12.17.25;	author espie;	state Exp;
branches;
next	1.86;

1.86
date	2007.05.03.12.14.36;	author espie;	state Exp;
branches;
next	1.85;

1.85
date	2007.05.02.13.59.19;	author espie;	state Exp;
branches;
next	1.84;

1.84
date	2007.05.01.18.46.02;	author espie;	state Exp;
branches;
next	1.83;

1.83
date	2007.04.30.13.51.32;	author espie;	state Exp;
branches;
next	1.82;

1.82
date	2007.04.30.12.39.31;	author espie;	state Exp;
branches;
next	1.81;

1.81
date	2007.04.30.12.20.32;	author espie;	state Exp;
branches;
next	1.80;

1.80
date	2007.04.30.12.11.51;	author espie;	state Exp;
branches;
next	1.79;

1.79
date	2007.04.30.11.39.26;	author bernd;	state Exp;
branches;
next	1.78;

1.78
date	2007.04.30.11.38.30;	author espie;	state Exp;
branches;
next	1.77;

1.77
date	2007.04.30.11.23.22;	author espie;	state Exp;
branches;
next	1.76;

1.76
date	2007.04.30.11.12.54;	author espie;	state Exp;
branches;
next	1.75;

1.75
date	2007.04.30.10.52.23;	author espie;	state Exp;
branches;
next	1.74;

1.74
date	2007.04.30.10.30.50;	author espie;	state Exp;
branches;
next	1.73;

1.73
date	2007.04.30.10.26.43;	author espie;	state Exp;
branches;
next	1.72;

1.72
date	2007.04.30.10.00.50;	author espie;	state Exp;
branches;
next	1.71;

1.71
date	2007.04.30.09.53.41;	author espie;	state Exp;
branches;
next	1.70;

1.70
date	2007.04.30.09.37.36;	author espie;	state Exp;
branches;
next	1.69;

1.69
date	2007.04.30.09.34.06;	author espie;	state Exp;
branches;
next	1.68;

1.68
date	2007.04.30.09.31.25;	author espie;	state Exp;
branches;
next	1.67;

1.67
date	2007.04.30.09.30.03;	author espie;	state Exp;
branches;
next	1.66;

1.66
date	2007.04.30.09.07.16;	author espie;	state Exp;
branches;
next	1.65;

1.65
date	2007.04.30.08.43.19;	author espie;	state Exp;
branches;
next	1.64;

1.64
date	2007.04.29.12.46.18;	author espie;	state Exp;
branches;
next	1.63;

1.63
date	2007.04.29.12.31.54;	author espie;	state Exp;
branches;
next	1.62;

1.62
date	2007.04.29.12.26.32;	author espie;	state Exp;
branches;
next	1.61;

1.61
date	2007.04.29.12.06.55;	author espie;	state Exp;
branches;
next	1.60;

1.60
date	2007.04.29.11.48.00;	author espie;	state Exp;
branches;
next	1.59;

1.59
date	2007.04.29.11.47.16;	author espie;	state Exp;
branches;
next	1.58;

1.58
date	2007.04.29.11.44.42;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2007.04.29.11.35.45;	author espie;	state Exp;
branches;
next	1.56;

1.56
date	2007.04.29.11.13.27;	author espie;	state Exp;
branches;
next	1.55;

1.55
date	2007.04.29.11.12.07;	author espie;	state Exp;
branches;
next	1.54;

1.54
date	2007.04.29.11.09.29;	author espie;	state Exp;
branches;
next	1.53;

1.53
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.52;

1.52
date	2007.03.19.09.57.40;	author espie;	state Exp;
branches;
next	1.51;

1.51
date	2007.03.18.18.48.20;	author espie;	state Exp;
branches;
next	1.50;

1.50
date	2006.12.10.23.15.00;	author steven;	state Exp;
branches;
next	1.49;

1.49
date	2006.11.07.09.28.55;	author espie;	state Exp;
branches;
next	1.48;

1.48
date	2006.11.05.11.41.45;	author espie;	state Exp;
branches;
next	1.47;

1.47
date	2006.10.15.15.37.28;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2006.10.15.09.32.52;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2006.01.09.12.15.23;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2005.12.26.15.50.39;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2005.11.19.14.45.32;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2005.09.24.19.44.26;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2005.09.24.12.52.18;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2005.09.11.10.12.01;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2005.09.07.14.01.59;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2005.09.04.22.47.56;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2005.08.14.12.01.08;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2005.08.07.14.18.04;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2005.06.26.11.24.06;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2005.06.08.09.43.40;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2005.01.22.12.52.55;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.16.11.16.23;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.12.11.26.16;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.10.12.02.37;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2004.12.07.12.13.25;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2004.12.06.12.35.36;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2004.12.02.18.32.37;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.01.12.17.40;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2004.11.18.21.51.43;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2004.11.15.16.47.54;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2004.10.12.09.34.01;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2004.10.11.14.25.28;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2004.10.11.10.30.33;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2004.10.11.10.07.37;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2004.09.20.10.36.39;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.17.08.49.17;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2004.09.15.18.54.17;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.27.16.45.45;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.06.07.51.17;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.05.23.36.39;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.20.18.58.41;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.13.00.35.38;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.06.17.35.08;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.05.19.43.05;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.05.09.27.05;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.31.17.56.13;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.27.00.13.04;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.26.16.44.31;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.22.11.59.19;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.04.18.11.42;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.31.17.43.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.19.18.39.19;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.16.17.43.34;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.10.16.17.43.34;	author espie;	state Exp;
branches;
next	;


desc
@@


1.140
log
@move code around, so that commands can be used as modules.
pkg becomes the start hub, which does nothing except require the
correct module.
Saner code wrt Add/Delete, and more sharing.
@
text
@#! /usr/bin/perl
# ex:ts=8 sw=4:
# $OpenBSD: pkg_create,v 1.139 2010/05/10 09:17:55 espie Exp $
#
# Copyright (c) 2003-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::PackingList;
use OpenBSD::PackageInfo;
use OpenBSD::Getopt;
use OpenBSD::Temp;
use OpenBSD::Error;
use OpenBSD::Ustar;
use OpenBSD::ArcCheck;
use OpenBSD::Paths;
use OpenBSD::Subst;
use OpenBSD::ProgressMeter;
use File::Basename;

package OpenBSD::State;
sub new
{
	my $class = shift;
	bless {progress => OpenBSD::ProgressMeter->new,
	    errors => 0, stash => {}}, $class;
}

sub progress
{
	my $self = shift;
	return $self->{progress};
}

sub stash
{
	my ($self, $key) = @@_;
	return $self->{stash}{$key};
}

sub error
{
	my $self = shift;
	$self->{errors}++;
	$self->progress->errprint(@@_, "\n");
}

# Extra stuff needed to archive files
package OpenBSD::PackingElement;
sub create_package
{
	my ($self, $state) = @@_;

	$self->archive($state);
	if ($state->{verbose}) {
		$self->comment_create_package;
	}
}

sub pretend_to_archive
{
	my ($self, $state) = @@_;
	$self->comment_create_package;
}

sub archive {}
sub comment_create_package {}

sub print_file {}

sub avert_duplicates_and_other_checks
{
	my ($self, $state) = @@_;
	return unless $self->NoDuplicateNames;
	my $n = $self->fullname;
	if (defined $state->stash($n)) {
		$state->error("Error in packing-list: duplicate item $n");
	}
	$state->{stash}{$n} = 1;
}

sub makesum_plist
{
	my ($self, $plist, $state) = @@_;
	$self->add_object($plist);
}

sub verify_checksum
{
}

sub compute_checksum
{
	my ($self, $result, $state, $base) = @@_;
	my $name = $self->fullname;
	my $fname = $name;
	if (defined $base) {
		$fname = $base.$fname;
	}

	if (-l $fname) {
		my $value = readlink $fname;
		$result->make_symlink($value);
	} elsif (-f _) {
		my ($dev, $ino, $size) = (stat _)[0,1,7];
		if (defined $state->stash("$dev/$ino")) {
			$result->make_hardlink($state->stash("$dev/$ino"));
		} else {
			$state->{stash}{"$dev/$ino"} = $name;
			$result->add_digest($self->compute_digest($fname));
			$result->add_size($size);
		}
	} else {
		$state->error("Error in package: $fname does not exist");
	}
}

sub makesum_plist_with_base
{
	my ($self, $plist, $state, $base) = @@_;
	$self->compute_checksum($self, $state, $base);
	$self->add_object($plist);
}

sub verify_checksum_with_base
{
	my ($self, $state, $base) = @@_;
	my $check = ref($self)->new($self->name);
	$self->compute_checksum($check, $state, $base);

	for my $field (qw(symlink link size)) {  # md5
		if ((defined $check->{$field} && defined $self->{$field} &&
		    $check->{$field} ne $self->{$field}) ||
		    (defined $check->{$field} xor defined $self->{$field})) {
		    	$state->error("Error: $field inconsistency for ",
			    $self->fullname);
		}
	}
	if ((defined $check->{d} && defined $self->{d} &&
	    !$check->{d}->equals($self->{d})) ||
	    (defined $check->{d} xor defined $self->{d})) {
	    	$state->error("Error: checksum inconsistency for ",
		    $self->fullname);
	}
}


sub prepare_for_archival
{
	my ($self, $state) = @@_;

	my $o = $state->{archive}->prepare_long($self);
	if (!$o->verify_modes($self)) {
		$state->error("Modes don't match");
	}
	return $o;
}

sub copy_over
{
}
package OpenBSD::PackingElement::SpecialFile;
sub archive
{
	&OpenBSD::PackingElement::FileBase::archive;
}

sub pretend_to_archive
{
	&OpenBSD::PackingElement::FileBase::pretend_to_archive;
}

sub comment_create_package
{
	my ($self) = @@_;
	print "Adding ", $self->name, "\n";
}

sub makesum_plist
{
	my ($self, $plist, $state) = @@_;
	$self->makesum_plist_with_base($plist, $state, undef);
}

sub verify_checksum
{
	my ($self, $state) = @@_;
	$self->verify_checksum_with_base($state, undef);
}

sub prepare_for_archival
{
	my ($self, $state) = @@_;

	my $o = $state->{archive}->prepare_long($self);
	$o->{uname} = 'root';
	$o->{gname} = 'wheel';
	$o->{uid} = 0;
	$o->{gid} = 0;
	$o->{mode} &= 0555; # zap all write and suid modes
	return $o;
}

sub copy_over
{
	my ($self, $wrarc, $rdarc) = @@_;
	$wrarc->destdir($rdarc->info);
	my $e = $wrarc->prepare($self->{name});
	$e->write;
}

# override for CONTENTS: we cannot checksum this.
package OpenBSD::PackingElement::FCONTENTS;
sub makesum_plist
{
}

sub verify_checksum
{
}


package OpenBSD::PackingElement::Cwd;
sub archive
{
	my ($self, $state) = @@_;
	$state->{archive}->destdir($state->{base}."/".$self->name);
}

sub pretend_to_archive
{
	my ($self, $state) = @@_;
	$state->{archive}->destdir($state->{base}."/".$self->name);
	$self->comment_create_package;
}

sub comment_create_package
{
	my ($self) = @@_;
	print "Cwd: ", $self->name, "\n";
}

package OpenBSD::PackingElement::FileBase;

sub archive
{
	my ($self, $state) = @@_;

	my $o = $self->prepare_for_archival($state);

	$o->write unless $state->{errors};
}

sub pretend_to_archive
{
	my ($self, $state) = @@_;

	$self->prepare_for_archival($state);
	$self->comment_create_package;
}

sub comment_create_package
{
	my ($self) = @@_;
	print "Adding ", $self->name, "\n";
}

sub print_file
{
	my ($item) = @@_;
	print '@@', $item->keyword, " ", $item->fullname, "\n";
}

sub makesum_plist
{
	my ($self, $plist, $state) = @@_;
	$self->makesum_plist_with_base($plist, $state, $state->{base});
}

sub verify_checksum
{
	my ($self, $state) = @@_;
	$self->verify_checksum_with_base($state, $state->{base});
}

sub copy_over
{
	my ($self, $wrarc, $rdarc) = @@_;
	my $e = $rdarc->next;
	if (!$e->check_name($self)) {
		die "Names don't match: ", $e->{name}, " ", $self->{name};
	}
	$e->copy_long($wrarc);
}

package OpenBSD::PackingElement::InfoFile;
sub makesum_plist
{
	my ($self, $plist, $state) = @@_;
	$self->SUPER::makesum_plist($plist, $state);
	my $fname = $self->fullname;
	for (my $i = 1; ; $i++) {
		if (-e "$state->{base}/$fname-$i") {
			my $e = OpenBSD::PackingElement::File->add($plist, $self->name."-".$i);
			$e->compute_checksum($e, $state, $state->{base});
		} else {
			last;
		}
	}
}

package OpenBSD::PackingElement::Manpage;
sub makesum_plist
{
	my ($self, $plist, $state) = @@_;
	if ($state->{subst}->empty("USE_GROFF") || !$self->is_source) {
		return $self->SUPER::makesum_plist($plist, $state);
	}
	my $dest = $self->source_to_dest;
	$self->format($state->{base}, $self->cwd."/".$dest);
	my $e = OpenBSD::PackingElement::Manpage->add($plist, $dest);
	$e->compute_checksum($e, $state, $state->{base});
}

package OpenBSD::PackingElement::Depend;
sub avert_duplicates_and_other_checks
{
	my ($self, $state) = @@_;
	if (!$self->spec->is_valid) {
		$state->error("Error in packing-list: invalid \@@",
		    $self->keyword, " ", $self->stringize);
	}
	$self->SUPER::avert_duplicates_and_other_checks($state);
}

package OpenBSD::PackingElement::AskUpdate;
sub avert_duplicates_and_other_checks
{
	&OpenBSD::PackingElement::Depend::avert_duplicates_and_other_checks;
}

package OpenBSD::PackingElement::Dependency;
sub avert_duplicates_and_other_checks
{
	my ($self, $state) = @@_;

	my @@issues = OpenBSD::PackageName->from_string($self->{def})->has_issues;
	if (@@issues > 0) {
		$state->error("Error in packing-list: invalid \@@",
		    $self->keyword, " ", $self->stringize, "\n",
		    "$self->{def}: , ", join(' ', @@issues));
	}

	$self->SUPER::avert_duplicates_and_other_checks($state);
}

package OpenBSD::PackingElement::Name;
sub avert_duplicates_and_other_checks
{
	my ($self, $state) = @@_;

	my @@issues = OpenBSD::PackageName->from_string($self->name)->has_issues;
	if (@@issues > 0) {
		$state->error("Bad packagename ", $self->name, ":",
		    join(' ', @@issues));
	}
	$self->SUPER::avert_duplicates_and_other_checks($state);
}

# put together file and filename, in order to handle fragments simply
package MyFile;
sub new
{
	my ($class, $filename) = @@_;

	open(my $fh, '<', $filename) or die "Missing file $filename";

	bless { fh => $fh, name => $filename }, $class;
}

sub readline
{
	my $self = shift;
	return readline $self->{fh};
}

sub name
{
	my $self = shift;
	return $self->{name};
}

sub close
{
	my $self = shift;
	close($self->{fh});
}

package main;

my $state = OpenBSD::State->new;


my $subst = OpenBSD::Subst->new;

$state->{subst} = $subst;

our ($opt_p, $opt_f, $opt_d, $opt_v,
	$opt_s, $opt_A, $opt_L,
	$opt_M, $opt_U, $opt_P, $opt_W, $opt_n,
	$opt_B, $opt_q, $opt_Q, $opt_x);

sub deduce_name
{
	my ($o, $frag, $not) = @@_;

	my $noto = $o;
	my $nofrag = "no-$frag";

	$o =~ s/PFRAG\./PFRAG.$frag-/o or
	    $o =~ s/PLIST/PFRAG.$frag/o;

	$noto =~ s/PFRAG\./PFRAG.no-$frag-/o or
	    $noto =~ s/PLIST/PFRAG.no-$frag/o;
	unless (-e $o or -e $noto) {
		die "Missing fragments for $frag: $o and $noto don't exist";
	}
	if ($not) {
		print "Switching to $noto\n" if !defined $opt_q;
		return $noto if -e $noto;
    	} else {
		print "Switching to $o\n" if !defined $opt_q;
		return $o if -e $o;
	}
	return;
}

sub read_fragments
{
    my ($plist, $filename) = @@_;

    my $stack = [];
    push(@@$stack, MyFile->new($filename));

    return $plist->read($stack,
	sub {
		my ($stack, $cont) = @@_;
		local $_;
		while(my $file = pop @@$stack) {
			GETLINE:
			while ($_ = $file->readline) {
				if (my ($not, $frag) = m/^(\!)?\%\%(.*)\%\%$/) {
					my $def = $frag;
					if ($frag eq 'SHARED') {
						$def = 'SHARED_LIBS';
						$frag = 'shared';
					}
					if ($subst->has_fragment($def, $frag)) {
						next GETLINE if defined $not;
					} else {
						next GETLINE unless defined $not;
					}
					my $newname = deduce_name($file->name, $frag, $not);
					if (defined $newname) {
						push(@@$stack, $file);
						$file = MyFile->new($newname);
					}
					next GETLINE;
				}
				if (m/^(\@@comment\s+\$(?:Open)BSD\$)$/o) {
					$_ = '@@comment $'.'OpenBSD: '.basename($file->name).',v$';
				}
				if (m/^\@@lib\s+(.*)$/o &&
				    OpenBSD::PackingElement::Lib->parse($1)) {
				    	$state->error("Shared library without SHARED_LIBS: $_");
				}
				&$cont($subst->do($_));
			}
		}
	}
	);
}

sub add_special_file
{
	my ($plist, $name, $opt) = @@_;
	if (defined $opt) {
	    my $o = OpenBSD::PackingElement::File->add($plist, $name);
	    $subst->copy($opt, $o->fullname) if defined $o->fullname;
	}
}

sub add_description
{
	my ($plist, $name, $opt_d) = @@_;
	my $o = OpenBSD::PackingElement::FDESC->add($plist, $name);
	my $comment = $subst->value('COMMENT');
	if (defined $comment) {
		if (length $comment > 60) {
			print STDERR "Error: comment is too long\n";
			print STDERR $comment, "\n";
			print STDERR ' 'x60, "^"x (length($comment)-60), "\n";
			exit 1;
		}
	} else {
		Usage "Comment required";
	}
	if (!defined $opt_d) {
		Usage "Description required";
	}
	if (defined $o->fullname) {
	    open(my $fh, '>', $o->fullname) or die "Can't write to DESC: $!";
	    if (defined $comment) {
	    	print $fh $subst->do($comment), "\n";
	    }
	    if ($opt_d =~ /^\-(.*)$/o) {
		print $fh $1, "\n";
	    } else {
		$subst->copy_fh($opt_d, $fh);
	    }
	    if (defined $comment) {
		if ($subst->empty('MAINTAINER')) {
			Warn "no MAINTAINER\n";
		} else {
			print $fh "\n", $subst->do('Maintainer: ${MAINTAINER}'), "\n";
		}
		if (!$subst->empty('HOMEPAGE')) {
			print $fh "\n", $subst->do('WWW: ${HOMEPAGE}'), "\n";
		}
	    }
	    close($fh);
	}
}

my (@@contents, %dependencies, %wantlib, @@signature_params);

my $regen_package = 0;
my $sign_only = 0;
my ($cert, $privkey);


set_usage(
'pkg_create [-nQqvx] [-A arches] [-B pkg-destdir] [-D name[=value]]',
'[-L localbase] [-M displayfile] [-P pkg-dependency]',
'[-s x509 -s cert -s priv] [-U undisplayfile] [-W wantedlib]',
'-d desc -D COMMENT=value -f packinglist -p prefix pkg-name');

my $plist = new OpenBSD::PackingList;
try {
	getopts('p:f:d:vM:U:hs:A:L:B:D:P:W:nqQx',
	{'D' =>
		sub {
			$subst->parse_option(shift);
		},
	 'f' =>
	 	sub {
			push(@@contents, shift);
		},
	 'h' => sub {	Usage(); },
	 'P' => sub {
	 		my $d = shift;
	 		$dependencies{$d} = 1;
		},
	 'W' => sub {
	 		my $w = shift;
	 		$wantlib{$w} = 1;
		},
	 's' => sub {
	 		push(@@signature_params, shift);
		}
	});
} catchall {
	Usage($_);
};

$state->progress->setup($opt_x);
$state->{verbose} = $opt_v;

if (@@ARGV == 0) {
	$regen_package = 1;
} elsif (@@ARGV != 1) {
	if (@@contents || @@signature_params == 0) {
		Usage "Exactly one single package name is required: ",
		    join(' ', @@ARGV);
	}
}

try {

if (@@signature_params > 0) {
	if (@@signature_params != 3 || $signature_params[0] ne 'x509' ||
	    !-f $signature_params[1] || !-f $signature_params[2]) {
		Usage "Signature only works as -s x509 -s cert -s privkey";
	}
	$cert = $signature_params[1];
	$privkey = $signature_params[2];
}

if (defined $opt_Q) {
	$opt_q = 1;
}

if (!@@contents) {
	if (@@signature_params > 0) {
		$sign_only = 1;
	} else {
		Usage "Packing list required";
	}
}

my $cont = 0;
if ($regen_package) {
	if (@@contents != 1) {
		Usage "Exactly one single packing list is required";
	}
	if (-d $contents[0] && -f $contents[0].'/'.CONTENTS) {
		$plist->set_infodir($contents[0]);
		$contents[0] .= '/'.CONTENTS;
	} else {
		$plist->set_infodir(dirname($contents[0]));
	}
	$plist->fromfile($contents[0]) or
	    Fatal "Can't read packing list $contents[0]";
} elsif ($sign_only) {
	if ($opt_n) {
		Fatal "Can't pretend to sign existing packages";
	}
	for my $pkgname (@@ARGV) {
		require OpenBSD::PackageLocator;
		require OpenBSD::x509;

		my $true_package = OpenBSD::PackageLocator->find($pkgname);
		die "No such package $pkgname" unless $true_package;
		my $dir = $true_package->info;
		my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
		$plist->set_infodir($dir);
		my $sig = OpenBSD::PackingElement::DigitalSignature->new_x509;
		$sig->add_object($plist);
		$sig->{b64sig} = OpenBSD::x509::compute_signature($plist,
		    $cert, $privkey);
		$plist->save;
		my $tmp = OpenBSD::Temp::permanent_file(".", "pkg");
		open( my $outfh, "|-", OpenBSD::Paths->gzip, "-o", $tmp);

		my $wrarc = OpenBSD::Ustar->new($outfh, ".");
		$plist->copy_over($wrarc, $true_package);
		$wrarc->close;
		$true_package->wipe_info;
		unlink($plist->pkgname.".tgz");
		rename($tmp, $plist->pkgname.".tgz") or
		    die "Can't create final signed package $!";
	}
	exit(0);
} else {
	print "Creating package $ARGV[0]\n" if !(defined $opt_q) && $opt_v;
	if (!$opt_q) {
		$plist->set_infodir(OpenBSD::Temp->dir);
	}
	add_description($plist, DESC, $opt_d);
	add_special_file($plist, DISPLAY, $opt_M);
	add_special_file($plist, UNDISPLAY, $opt_U);
	if (defined $opt_p) {
		OpenBSD::PackingElement::Cwd->add($plist, $opt_p);
	} else {
		Usage "Prefix required";
	}
	for my $d (sort keys %dependencies) {
		OpenBSD::PackingElement::Dependency->add($plist, $d);
	}

	for my $w (sort keys %wantlib) {
		OpenBSD::PackingElement::Wantlib->add($plist, $w);
	}

	if (defined $opt_A) {
		OpenBSD::PackingElement::Arch->add($plist, $opt_A);
	}

	if (defined $opt_L) {
		OpenBSD::PackingElement::LocalBase->add($plist, $opt_L);
	}
	if ($ARGV[0] =~ m|([^/]+)$|o) {
		my $pkgname = $1;
		$pkgname =~ s/\.tgz$//o;
		$plist->set_pkgname($pkgname);
	}
	my $fullpkgpath = $subst->value('FULLPKGPATH');
	my $cdrom = $subst->value('PERMIT_PACKAGE_CDROM') ||
	    $subst->value('CDROM');;
	my $ftp = $subst->value('PERMIT_PACKAGE_FTP') ||
	    $subst->value('FTP');
	if (defined $fullpkgpath || defined $cdrom || defined $ftp) {
		$fullpkgpath //= '';
		$cdrom //= 'no';
		$ftp //= 'no';
		$cdrom = 'yes' if $cdrom =~ m/^yes$/io;
		$ftp = 'yes' if $ftp =~ m/^yes$/io;

		OpenBSD::PackingElement::ExtraInfo->add($plist,
		    $fullpkgpath, $cdrom, $ftp);
	} else {
		Warn "Package without FULLPKGPATH\n";
	}
	unless (defined $opt_q && defined $opt_n) {
		if ($state->progress->set_header("reading plist")) {
			$state->progress->message;
		} else {
			$| = 1;
			print "Reading plist...";
			$cont = 1;
		}
	}
	for my $contentsfile (@@contents) {
		read_fragments($plist, $contentsfile) or
		    Fatal "Can't read packing list $contentsfile";
	}
}


my $base = '/';
if (defined $opt_B) {
	$base = $opt_B;
} elsif (defined $ENV{'PKG_PREFIX'}) {
	$base = $ENV{'PKG_PREFIX'};
}

$state->{base} = $base;

unless (defined $opt_q && defined $opt_n) {
	if ($cont) {
		print "\nChecksumming...";
    	} else {
		$state->progress->set_header("checksumming");
	}
	if ($regen_package) {
		$state->progress->visit_with_count($plist, 'verify_checksum', $state);
	} else {
		my $p2 = OpenBSD::PackingList->new;
		$state->progress->visit_with_count($plist, 'makesum_plist', $p2, $state);
		$p2->set_infodir($plist->infodir);
		$plist = $p2;
	}
	if ($cont) {
		print "\n";
	}
}

if (!defined $plist->{name}) {
	$state->error("Can't write unnamed packing list");
	exit 1;
}

if (defined $opt_q) {
	if (defined $opt_Q) {
		$plist->print_file;
	} else {
		$plist->write(\*STDOUT);
	}
	exit 0 if defined $opt_n;
}

if ($plist->{deprecated}) {
	$state->error("Error: found obsolete constructs");
	exit 1;
}

$plist->avert_duplicates_and_other_checks($state);
$state->{stash} = {};

if ($state->{errors} && $subst->empty('REGRESSION_TESTING')) {
	exit 1;
}
$state->{errors} = 0;

if (defined $cert) {
	my $sig = OpenBSD::PackingElement::DigitalSignature->new_x509;
	$sig->add_object($plist);
	require OpenBSD::x509;
	$sig->{b64sig} = OpenBSD::x509::compute_signature($plist, $cert, $privkey);
	$plist->save if $regen_package;
}

my $wname;
if ($regen_package) {
	$wname = $plist->pkgname.".tgz";
} else {
	$plist->save or Fatal "Can't write packing list";
	$wname = $ARGV[0];
}

if ($opt_n) {
	$state->{archive} = OpenBSD::Ustar->new(undef, $plist->infodir);
	$plist->pretend_to_archive($state);
} else {
	print "Creating gzip'd tar ball in '$wname'\n" if $opt_v;
	my $h = sub {
		unlink $wname;
		my $caught = shift;
		$SIG{$caught} = 'DEFAULT';
		kill $caught, $$;
	};

	local $SIG{'INT'} = $h;
	local $SIG{'QUIT'} = $h;
	local $SIG{'HUP'} = $h;
	local $SIG{'KILL'} = $h;
	local $SIG{'TERM'} = $h;
	open(my $fh, "|-", OpenBSD::Paths->gzip, "-f", "-o", $wname);
	$state->{archive} = OpenBSD::Ustar->new($fh, $plist->infodir);

	if ($cont) {
		print "Archiving...";
	} else {
		$state->progress->set_header("archiving");
	}
	$state->progress->visit_with_size($plist, 'create_package', $state);
	if ($cont) {
		print "\n";
	}
	$state->progress->clear;
	$state->{archive}->close;
	if ($state->{errors}) {
		unlink($wname);
		exit(1);
	}
}
} catch {
	print STDERR "$0: $_\n";
	exit(1);
};
@


1.139
log
@whitespace fixes
@
text
@d3 1
a3 1
# $OpenBSD$
@


1.138
log
@new keyword, @@ask-update, to be used *very* sparingly (so far, only useful
for pgsql updates)
@
text
@d38 1
a38 1
	bless {progress => OpenBSD::ProgressMeter->new, 
d63 1
a63 1
sub create_package 
d148 1
a148 1
		    	$state->error("Error: $field inconsistency for ", 
d155 1
a155 1
	    	$state->error("Error: checksum inconsistency for ", 
d343 1
a343 1
		$state->error("Error in packing-list: invalid \@@", 
d362 1
a362 1
		$state->error("Error in packing-list: invalid \@@", 
d377 1
a377 1
		$state->error("Bad packagename ", $self->name, ":", 
d486 1
a486 1
				if (m/^\@@lib\s+(.*)$/o && 
d562 4
a565 4
try { 
	getopts('p:f:d:vM:U:hs:A:L:B:D:P:W:nqQx', 
	{'D' => 
		sub { 
d584 1
a584 1
	}); 
d596 1
a596 1
		Usage "Exactly one single package name is required: ", 
d604 1
a604 1
	if (@@signature_params != 3 || $signature_params[0] ne 'x509' || 
d635 1
a635 1
	$plist->fromfile($contents[0]) or 
d652 1
a652 1
		$sig->{b64sig} = OpenBSD::x509::compute_signature($plist, 
d663 1
a663 1
		rename($tmp, $plist->pkgname.".tgz") or 
d701 1
a701 1
	my $cdrom = $subst->value('PERMIT_PACKAGE_CDROM') || 
d712 1
a712 1
		OpenBSD::PackingElement::ExtraInfo->add($plist, 
d727 1
a727 1
		read_fragments($plist, $contentsfile) or 
d730 1
a730 1
} 
d795 1
a795 1
	
d809 2
a810 2
	my $h = sub { 
		unlink $wname; 
@


1.137
log
@auto-format manpages with /usr/local/bin/groff if -DUSE_GROFF=1
@
text
@d349 6
@


1.136
log
@clean up the ProgressMeter code, create a specific class if a Term
is around.
start using stuff from termcap, specifically, cleareol, and move to hp.
use the full line when we can, cram 100% if we can.
(this should flicker much less on slow terminals).

clean-up the install-and-progress bits to be in progressmeter, this removes
some code.

have pkg_create follow the same pattern as the others, with a state.
This allows us to unify error messages a bit.
@
text
@d325 13
d412 2
@


1.135
log
@ProgressMeter support.
@
text
@d31 1
d34 2
a35 4
# Extra stuff needed to archive files
package OpenBSD::PackingElement;

sub count
d37 3
a39 2
	my ($self, $total) = @@_;
	$$total++;
d42 1
a42 1
sub size
d44 2
a45 10
	my ($self, $totsize) = @@_;
	if (defined $self->{size}) {
		$$totsize += $self->{size};
	}
}
sub mark_count
{
	my ($self, $progress, $done, $count) = @@_;
	$$done++;
	$progress->show($$done, $count);
d48 1
a48 1
sub mark_progress
d50 2
a51 4
	my ($self, $progress, $done, $totsize) = @@_;
	return unless defined $self->{size};
	$$done += $self->{size};
	$progress->show($$done, $totsize);
d54 1
a54 1
sub verify_checksum_and_progress
d56 3
a58 17
	my ($self, $base, $stash, $progress, $done, $count) = @@_;
	$self->verify_checksum($base, $stash);
	$self->mark_count($progress, $done, $count);
}

sub makesum_plist_and_progress
{
	my ($self, $p2, $base, $stash, $progress, $done, $count) = @@_;
	$self->makesum_plist($p2, $base, $stash);
	$self->mark_count($progress, $done, $count);
}

sub create_package_and_progress
{
	my ($self, $arc, $base, $verbose, $progress, $done, $tot) = @@_;
	$self->mark_progress($progress, $done, $tot);
	$self->create_package($arc, $base, $verbose);
d61 2
d65 1
a65 1
	my ($self, $arc, $base, $verbose) = @@_;
d67 2
a68 2
	$self->archive($arc, $base);
	if ($verbose) {
d75 1
a75 1
	my ($self, $arc, $base) = @@_;
d86 1
a86 1
	my ($self, $allfiles) = @@_;
d89 2
a90 3
	if (defined $allfiles->{$n}) {
		print STDERR "Error in packing-list: duplicate item $n\n";
		$main::errors++;
d92 1
a92 1
	$allfiles->{$n} = 1;
d97 1
a97 1
	my ($self, $plist, $base, $stash) = @@_;
d107 1
a107 1
	my ($self, $result, $base, $stash) = @@_;
d119 2
a120 2
		if (defined $stash->{"$dev/$ino"}) {
			$result->make_hardlink($stash->{"$dev/$ino"});
d122 1
a122 1
			$stash->{"$dev/$ino"} = $name;
d127 1
a127 2
		print STDERR "Error in package: $fname does not exist\n";
		$main::errors++;
d133 2
a134 2
	my ($self, $plist, $base, $stash) = @@_;
	$self->compute_checksum($self, $base, $stash);
d140 1
a140 1
	my ($self, $base, $stash) = @@_;
d142 1
a142 1
	$self->compute_checksum($check, $base, $stash);
d148 2
a149 3
			print STDERR "Error: $field inconsistency for ", 
			    $self->fullname, "\n";
			$main::errors++;
d155 2
a156 3
		print STDERR "Error: checksum inconsistency for ", 
		    $self->fullname, "\n";
		$main::errors++;
d163 1
a163 1
	my ($self, $arc) = @@_;
d165 1
a165 1
	my $o = $arc->prepare_long($self);
d167 1
a167 1
		$main::errors++;
d194 2
a195 2
	my ($self, $plist, $base, $stash) = @@_;
	$self->makesum_plist_with_base($plist, undef, $stash);
d200 2
a201 2
	my ($self, $base, $stash) = @@_;
	$self->verify_checksum_with_base(undef, $stash);
d206 1
a206 1
	my ($self, $arc) = @@_;
d208 1
a208 1
	my $o = $arc->prepare_long($self);
d239 2
a240 2
	my ($self, $arc, $base) = @@_;
	$arc->destdir($base."/".$self->name);
d245 2
a246 2
	my ($self, $arc, $base) = @@_;
	$arc->destdir($base."/".$self->name);
d260 1
a260 1
	my ($self, $arc, $base) = @@_;
d262 1
a262 1
	my $o = $self->prepare_for_archival($arc);
d264 1
a264 1
	$o->write unless $main::errors;
d269 1
a269 1
	my ($self, $arc, $base) = @@_;
d271 1
a271 1
	$self->prepare_for_archival($arc);
d289 2
a290 2
	my ($self, $plist, $base, $stash) = @@_;
	$self->makesum_plist_with_base($plist, $base, $stash);
d295 2
a296 2
	my ($self, $base, $stash) = @@_;
	$self->verify_checksum_with_base($base, $stash);
d312 2
a313 2
	my ($self, $plist, $base, $stash) = @@_;
	$self->SUPER::makesum_plist($plist, $base, $stash);
d316 1
a316 1
		if (-e "$base/$fname-$i") {
d318 1
a318 1
			$e->compute_checksum($e, $base, $stash);
d328 1
a328 1
	my ($self, $allfiles) = @@_;
d330 2
a331 3
		print STDERR "Error in packing-list: invalid \@@", 
		    $self->keyword, " ", $self->stringize, "\n";
		$main::errors++;
d333 1
a333 1
	$self->SUPER::avert_duplicates_and_other_checks($allfiles);
d339 1
a339 1
	my ($self, $allfiles) = @@_;
d343 3
a345 4
		print STDERR "Error in packing-list: invalid \@@", 
		    $self->keyword, " ", $self->stringize, "\n";
		print STDERR "$self->{def}: ", join(' ', @@issues), "\n";
		$main::errors++;
d348 1
a348 1
	$self->SUPER::avert_duplicates_and_other_checks($allfiles);
d354 1
a354 1
	my ($self, $allfiles) = @@_;
d358 2
a359 3
		print STDERR "Bad packagename ", $self->name, ":", 
		    join(' ', @@issues), "\n";
		$main::errors++;
d361 1
a392 7
package OpenBSD::StubProgress;
sub show {}

sub set_header {}

sub clear {}

d395 1
a395 1
my $progress;
d467 1
a467 2
					Warn "Shared library without SHARED_LIBS: $_";
					$main::errors++;
a526 2
our $errors = 0;

d568 2
a569 6
if ($opt_x) {
	$progress = bless {}, "OpenBSD::StubProgress";
} else {
	require OpenBSD::ProgressMeter;
	$progress = OpenBSD::ProgressMeter->new;
}
d603 1
d696 9
d719 1
d722 4
a725 7
	my ($count, $done) = (0, 0);
	my $cont = 0;
	$plist->count(\$count);
	if (!$progress->set_header("checksumming")) {
		$| = 1;
		print "Checksumming...";
		$cont = 1;
a726 1
	$progress->show(0, $count);
d728 1
a728 1
		$plist->verify_checksum_and_progress($base, {}, $progress, \$done, $count);
d731 1
a731 1
		$plist->makesum_plist_and_progress($p2, $base, {}, $progress, \$done, $count);
d737 1
a737 1
    	}
d741 1
a741 1
	print STDERR "Can't write unnamed packing list\n";
d755 1
a755 1
	print STDERR "Error: found obsolete constructs\n";
d759 2
a760 1
$plist->avert_duplicates_and_other_checks({});
d762 1
a762 1
if ($errors && $subst->empty('REGRESSION_TESTING')) {
d765 1
a765 1
$errors = 0;
d784 2
a785 2
	my $dummy = OpenBSD::Ustar->new(undef, $plist->infodir);
	$plist->pretend_to_archive($dummy, $base);
d801 1
a801 1
	my $wrarc = OpenBSD::Ustar->new($fh, $plist->infodir);
d803 12
a814 7
	$progress->set_header("archiving");
	my ($done, $totsize) = (0, 0);
	$plist->size(\$totsize);
	$plist->create_package_and_progress($wrarc, $base, $opt_v, $progress, \$done, $totsize);
	$progress->clear;
	$wrarc->close;
	if ($errors) {
@


1.134
log
@prevent broken packagenames from creeping in.
@
text
@d36 49
d421 7
d430 3
d438 1
a438 1
	$opt_B, $opt_q, $opt_Q);
d573 1
a573 1
'pkg_create [-nQqv] [-A arches] [-B pkg-destdir] [-D name[=value]]',
d580 1
a580 1
	getopts('p:f:d:vM:U:hs:A:L:B:D:P:W:nqQ', 
d606 7
d753 9
d763 1
a763 1
		$plist->verify_checksum($base, {});
d766 1
a766 1
		$plist->makesum_plist($p2, $base, {});
d770 3
d837 5
a841 1
	$plist->create_package($wrarc, $base, $opt_v);
@


1.133
log
@simplify using LibSpec
@
text
@d314 28
@


1.132
log
@unify options a bit: use -Dname=value for defines uniformously (e.g., deprecate
-F keyword heavily).
@
text
@d302 1
a302 1
package OpenBSD::PackingElement::Dependency;
d307 2
a308 1
		print STDERR "Error in packing-list: invalid dependency: $self->{pattern}\n";
a313 13
package OpenBSD::PackingElement::Wantlib;
sub avert_duplicates_and_other_checks
{
	my ($self, $allfiles) = @@_;
	require OpenBSD::SharedLibs;

	if (!defined OpenBSD::SharedLibs::parse_spec($self->name)) {
		print STDERR "Error in packing-list: invalid wantlib: ", 
		    $self->name, "\n";
		$main::errors++;
	}
	$self->SUPER::avert_duplicates_and_other_checks($allfiles);
}
@


1.131
log
@if we make pkg_create more stringent, then we cannot create bogus
packing-lists.

Add check for libspec, and REGRESSION_TESTING
@
text
@d498 1
a498 1
'pkg_create [-nQqv] [-A arches] [-B pkg-destdir] [-D name=value]',
@


1.130
log
@refuse invalid version specs.
fix other error messages (missing \n)
@
text
@d313 14
d702 1
a702 1
if ($errors) {
d705 1
@


1.129
log
@allow CDROM/FTP for shorter versions of PERMIT_PACKAGES_*,
to encourage people to use them.
@
text
@d302 11
d462 1
a462 1
			Warn "no MAINTAINER";
d639 1
a639 1
		Warn "Package without FULLPKGPATH";
@


1.128
log
@new method fullpkgpath that accesses the default fullpkgpath.
make use of it, relax pkg_create to allow any of
FULLPKGPATH, PERMIT_PACKAGE_FTP, PERMIT_PACKAGE_CDROM
(store the others as empty).
remove warning in pkg_mklocatedb for newer perl.
@
text
@d614 4
a617 2
	my $cdrom = $subst->value('PERMIT_PACKAGE_CDROM');
	my $ftp = $subst->value('PERMIT_PACKAGE_FTP');
d620 2
a621 2
		$cdrom //= '';
		$ftp //= '';
@


1.127
log
@remove a big bunch of obsolete stuff
@
text
@d451 1
a451 1
			print STDERR "Warning: no MAINTAINER\n";
d616 4
a619 1
	if (defined $fullpkgpath && defined $cdrom && defined $ftp) {
d625 2
@


1.126
log
@always save plist
@
text
@d5 1
a5 1
# Copyright (c) 2003-2007 Marc Espie <espie@@openbsd.org>
d335 2
a336 2
our ($opt_p, $opt_f, $opt_c, $opt_d, $opt_v, $opt_i, $opt_k,
	$opt_S, $opt_s, $opt_O, $opt_A, $opt_L,
d423 1
a423 1
	my ($plist, $name, $opt_c, $opt_d) = @@_;
d433 1
a433 1
	} elsif (!defined $opt_c) {
a442 6
	    } else {
		if ($opt_c =~ /^\-(.*)$/o) {
		    print $fh $1, "\n";
		} else {
		    $subst->copy_fh($opt_c, $fh);
		}
d450 5
a454 1
	    	print $fh "\n", $subst->do('Maintainer: ${MAINTAINER}'), "\n";
d474 3
a476 3
'[-i iscript] [-k dscript] [-L localbase] [-M displayfile]',
'[-P pkg-dependency] [-p prefix] [-s x509 -s cert -s priv] [-S pkg-destdir]',
'[-U undisplayfile] [-W wantedlib] -c desc -d desc -f packinglist pkg-name');
d480 1
a480 1
	getopts('p:f:c:d:vi:k:M:U:S:hs:OA:L:B:D:P:W:nqQ', 
a525 4
if (defined $opt_O) {
	Usage "Option O is no longer supported";
}

a580 6
	if (defined $opt_i) {
		print STDERR "Warning: INSTALL scripts are deprecated\n";
	}
	if (defined $opt_k) {
		print STDERR "Warning: DEINSTALL scripts are deprecated\n";
	}
d585 1
a585 3
	add_description($plist, DESC, $opt_c, $opt_d);
	add_special_file($plist, INSTALL, $opt_i);
	add_special_file($plist, DEINSTALL, $opt_k);
a632 3
} elsif (defined $opt_S) {
	print STDERR "Warning: -S is deprecated, use -B instead\n";
	$base = $opt_S;
@


1.125
log
@force gzip to write package even if things don't compress.
@
text
@d696 1
@


1.124
log
@style nit
@
text
@d723 1
a723 1
	open(my $fh, "|-", OpenBSD::Paths->gzip, "-o", $wname);
@


1.123
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d379 1
a379 2
				if (m/^(\!)?\%\%(.*)\%\%$/o) {
					my ($not, $frag) = ($1, $2);
@


1.122
log
@zap double /, as noticed by brad
@
text
@d21 1
@


1.121
log
@synch with my new style search/location changes
It's likely there will be some fallout, but it's getting a bit too large
to keep around.
This does kill a few very old oddities as well.
@
text
@d84 1
a84 1
		$fname = "$base/$fname";
@


1.120
log
@initial implementation of package signatures, based on x509 certificates and
smime detached signatures.
@
text
@d115 1
a115 1
	my $check = ref($self)->new($self->{name});
d165 1
a165 1
	print "Adding ", $self->{name}, "\n";
d216 1
a216 1
	$arc->destdir($base."/".$self->{name});
d222 1
a222 1
	$arc->destdir($base."/".$self->{name});
d229 1
a229 1
	print "Cwd: ", $self->{name}, "\n";
d254 1
a254 1
	print "Adding ", $self->{name}, "\n";
d293 1
a293 1
			my $e = OpenBSD::PackingElement::File->add($plist, $self->{name}."-".$i);
d595 1
a595 1
		$plist->set_infodir(OpenBSD::Temp::dir());
@


1.119
log
@tweak compute_digest so that it `defaults' if invoked without a 2nd argument.
switch the default digest to sha256.

It's been there for a few weeks, all package tools cope with both formats,
now is the time for the switch.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.118 2008/10/06 09:36:17 espie Exp $
d148 3
d193 8
d275 10
d467 1
a467 1
my (@@contents, %dependencies, %wantlib);
d470 2
d477 1
a477 1
'[-P pkg-dependency] [-p prefix] [-S pkg-destdir]',
d499 3
d511 4
a514 1
	Usage "Exactly one single package name is required: ", join(' ', @@ARGV);
d519 7
a525 2
if (defined $opt_s) {
	Usage "Option s is no longer supported";
d537 5
a541 1
	Usage "Packing list required";
d556 30
d691 6
@


1.118
log
@turn the checksums stored in packing elements into real objects, so that
pkg_add becomes mostly independent of the type of checksum stored.

separate md5 into an abstract OpenBSD::digest class and an md5 subclass
with specific methods to compute checksums and serialize results, and create
an sha class that does the same thing with sha256 (with a base64 serializer)
@
text
@d3 1
a3 1
# $OpenBSD$
d96 1
a96 1
			$result->add_digest($self->compute_digest($fname, 'OpenBSD::md5'));
@


1.117
log
@defer to the packing element for computing md5
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.116 2008/04/07 11:02:24 espie Exp $
a23 1
use OpenBSD::md5;
d96 1
a96 1
			$result->add_md5($self->compute_md5($fname));
d118 1
a118 1
	for my $field (qw(symlink link md5 size)) {
d126 7
@


1.116
log
@put Subst stuff into its own library file, to reuse elsewhere.
@
text
@d3 1
a3 1
# $OpenBSD$
a78 2
use OpenBSD::md5;

d97 1
a97 1
			$result->add_md5(OpenBSD::md5::fromfile($fname));
@


1.115
log
@use OpenBSD::Paths contents
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.114 2007/06/14 10:16:37 espie Exp $
d30 1
d307 1
a307 28
my %defines;

sub dosubst
{
	local $_ = shift;
	return $_ unless m/\$/o;
	while (my ($k, $v) = each %defines) {
		s/\$\{\Q$k\E\}/$v/g;
	}
	s/\$\\/\$/go;
	return $_;
}

sub copy_subst_fh
{
	my ($srcname, $dest) = @@_;
	open my $src, '<', $srcname or die "can't open $srcname";
	local $_;
	while (<$src>) {
		print $dest dosubst($_);
	}
}
sub copy_subst
{
	my ($srcname, $destname) = @@_;
	open my $dest, '>', $destname or die "can't open $destname";
	copy_subst_fh($srcname, $dest);
}
d360 1
a360 3
					if (!defined $defines{$def}) {
						die "Error: unknown fragment $frag";
					} elsif ($defines{$def} == 1) {
d362 1
a362 1
					} elsif ($defines{$def} == 0) {
a363 2
					} else {
						die "Incorrect define for $frag";
d380 1
a380 1
				&$cont(dosubst($_));
d392 1
a392 1
	    copy_subst($opt, $o->fullname) if defined $o->fullname;
d400 1
a400 1
	my $comment = $defines{COMMENT};
d417 1
a417 1
	    	print $fh dosubst($comment), "\n";
d422 1
a422 1
		    copy_subst_fh($opt_c, $fh);
d428 1
a428 1
		copy_subst_fh($opt_d, $fh);
d431 3
a433 3
	    	print $fh "\n", dosubst('Maintainer: ${MAINTAINER}'), "\n";
	    	if (defined $defines{HOMEPAGE} && $defines{HOMEPAGE} ne '') {
			print $fh "\n", dosubst('WWW: ${HOMEPAGE}'), "\n";
d458 1
a458 9
			local $_ = shift;
			if (m/^([^=]+)\=(.*)$/o) {
				my ($k, $v) = ($1, $2);
				$v =~ s/^\'(.*)\'$/$1/;
				$v =~ s/^\"(.*)\"$/$1/;
				$defines{$k} = $v;
			} else {
				$defines{$_} = 1;
			}
d555 3
a557 3
	my $fullpkgpath = $defines{'FULLPKGPATH'};
	my $cdrom = $defines{'PERMIT_PACKAGE_CDROM'};
	my $ftp = $defines{'PERMIT_PACKAGE_FTP'};
@


1.114
log
@explicitly mark -S as deprecated, I'd love to use for something else...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.113 2007/06/04 18:52:01 espie Exp $
d29 1
d683 1
a683 1
	open(my $fh, "|gzip >$wname");
@


1.113
log
@more efficient regexps: anchor stuff at both ends, be more specific in
what matches. Get rid of $`, $', $&, which encur a performance penalty.
(not yet done on PackageName and PkgSpec).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.112 2007/06/04 16:33:22 espie Exp $
d613 1
@


1.112
log
@avoid parsing libraries by hand.
Store shared libraries in a `better' format, which will also us
to report issues more nicely.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.111 2007/06/04 14:40:39 espie Exp $
d448 2
a449 2
		if ($opt_c =~ /^\-/o) {
		    print $fh $', "\n";
d454 2
a455 2
	    if ($opt_d =~ /^\-/o) {
		print $fh $', "\n";
d488 2
a489 2
			if (m/\=/o) {
				my ($k, $v) = ($`,$');
@


1.111
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.110 2007/05/31 13:11:21 espie Exp $
d404 2
a405 1
				if (m,^\@@lib\s+.*/lib[^/]+\.so\.\d+\.\d+$,o) {
@


1.110
log
@oops, move realname up so that ::Sample sees it too.

remove last traces of MODULEs.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.109 2007/05/31 11:05:41 espie Exp $
d310 1
a310 1
	return $_ unless m/\$/;
d314 1
a314 1
	s/\$\\/\$/g;
d346 2
a347 2
	$o =~ s/PFRAG\./PFRAG.$frag-/ or
	    $o =~ s/PLIST/PFRAG.$frag/;
d349 2
a350 2
	$noto =~ s/PFRAG\./PFRAG.no-$frag-/ or
	    $noto =~ s/PLIST/PFRAG.no-$frag/;
d378 1
a378 1
				if (m/^(\!)?\%\%(.*)\%\%$/) {
d401 1
a401 1
				if (m/^(\@@comment\s+\$(?:Open)BSD\$)$/) {
d404 1
a404 1
				if (m,^\@@lib\s+.*/lib[^/]+\.so\.\d+\.\d+$,) {
d447 1
a447 1
		if ($opt_c =~ /^\-/) {
d453 1
a453 1
	    if ($opt_d =~ /^\-/) {
d487 1
a487 1
			if (m/\=/) {
d586 1
a586 1
	if ($ARGV[0] =~ m|([^/]+)$|) {
d588 1
a588 1
		$pkgname =~ s/\.tgz$//;
d595 2
a596 2
		$cdrom = 'yes' if $cdrom =~ m/^yes$/i;
		$ftp = 'yes' if $ftp =~ m/^yes$/i;
@


1.109
log
@kill REQ script directly. I'm pretty sure it doesn't quite work anyways.
Deprecate INSTALL and DEINSTALL, write out warnings in pkg_create.

Clean up some more old cruft
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.108 2007/05/30 12:37:07 espie Exp $
d336 1
a336 1
	$opt_m, $opt_M, $opt_U, $opt_P, $opt_W, $opt_n,
d483 1
a483 1
	getopts('p:f:c:d:vi:k:m:M:U:S:hs:OA:L:B:D:P:W:nqQ', 
a564 1
	add_special_file($plist, MODULE, $opt_m);
@


1.108
log
@use set_pkgname
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.107 2007/05/29 15:38:41 espie Exp $
d334 1
a334 1
our ($opt_p, $opt_f, $opt_c, $opt_d, $opt_v, $opt_i, $opt_k, $opt_r, 
d478 1
a478 1
'[-P pkg-dependency] [-p prefix] [-r rscript] [-S pkg-destdir]',
d483 1
a483 1
	getopts('p:f:c:d:vi:k:r:m:M:U:S:hs:OA:L:B:D:P:W:nqQ', 
d551 6
a563 1
	add_special_file($plist, REQUIRE, $opt_r);
@


1.107
log
@slightly more descriptive names.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.106 2007/05/29 15:35:05 espie Exp $
d585 1
a585 1
		OpenBSD::PackingElement::Name->add($plist, $pkgname);
@


1.106
log
@in checksum creation, allow $base to be undef.
This allows us to always compute checksums based on $self->fullname,
so as a result, we no longer need to pass as many parameters around.

Small negative side-effect: the method names no longer reflect reality
well, they will need renaming at some point...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.105 2007/05/29 13:10:57 espie Exp $
d106 1
a106 1
sub makesum_plist_filename
d113 1
a113 1
sub verify_checksum_filename
d162 1
a162 1
	$self->makesum_plist_filename($plist, undef, $stash);
d168 1
a168 1
	$self->verify_checksum_filename(undef, $stash);
d249 1
a249 1
	$self->makesum_plist_filename($plist, $base, $stash);
d255 1
a255 1
	$self->verify_checksum_filename($base, $stash);
@


1.105
log
@use the infodir property of packing-lists and specialfiles instead of
passing extra parameters around.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.104 2007/05/28 12:08:22 espie Exp $
d81 6
a86 2
	my ($self, $result, $base, $name, $stash) = @@_;
	my $fname = "$base/$name";
d108 2
a109 2
	my ($self, $plist, $base, $name, $stash) = @@_;
	$self->compute_checksum($self, $base, $name, $stash);
d115 1
a115 1
	my ($self, $base, $name, $stash) = @@_;
d117 1
a117 1
	$self->compute_checksum($check, $base, $name, $stash);
d123 2
a124 1
			print STDERR "Error: $field inconsistency for $name\n";
d162 1
a162 1
	$self->makesum_plist_filename($plist, $self->infodir ,$self->{name}, $stash);
d168 1
a168 1
	$self->verify_checksum_filename($self->infodir, $self->{name}, $stash);
d249 1
a249 1
	$self->makesum_plist_filename($plist, $base, $self->fullname, $stash);
d255 1
a255 1
	$self->verify_checksum_filename($base, $self->fullname, $stash);
d267 1
a267 1
			$e->compute_checksum($e, $base, "$fname-$i", $stash);
@


1.104
log
@oops, can't copy CONTENTS twice
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.103 2007/05/28 11:35:54 espie Exp $
d69 1
a69 1
	my ($self, $plist, $base, $stash, $infodir) = @@_;
d156 2
a157 2
	my ($self, $plist, $base, $stash, $infodir) = @@_;
	$self->makesum_plist_filename($plist, $infodir ,$self->{name}, $stash);
d162 2
a163 2
	my ($self, $base, $stash, $infodir) = @@_;
	$self->verify_checksum_filename($infodir, $self->{name}, $stash);
d243 1
a243 1
	my ($self, $plist, $base, $stash, $infodir) = @@_;
d249 1
a249 1
	my ($self, $base, $stash, $infodir) = @@_;
d256 1
a256 1
	my ($self, $plist, $base, $stash, $infodir) = @@_;
d412 1
a412 1
	my ($plist, $name, $infodir, $opt) = @@_;
d414 2
a415 2
	    OpenBSD::PackingElement::File->add($plist, $name);
	    copy_subst($opt, $infodir.$name) if defined $infodir;
d421 2
a422 2
	my ($plist, $name, $infodir, $opt_c, $opt_d) = @@_;
	OpenBSD::PackingElement::File->add($plist, $name);
d437 2
a438 2
	if (defined $infodir) {
	    open(my $fh, '>', $infodir.$name) or die "Can't write to DESC: $!";
a515 1
my $infodir;
d538 1
a538 1
		$infodir = $contents[0];
d541 1
a541 1
		$infodir = dirname($contents[0]);
d547 10
a556 8
	$infodir = OpenBSD::Temp::dir() unless $opt_q;
	add_description($plist, DESC, $infodir, $opt_c, $opt_d);
	add_special_file($plist, INSTALL, $infodir, $opt_i);
	add_special_file($plist, DEINSTALL, $infodir, $opt_k);
	add_special_file($plist, REQUIRE, $infodir, $opt_r);
	add_special_file($plist, DISPLAY, $infodir, $opt_M);
	add_special_file($plist, MODULE, $infodir, $opt_m);
	add_special_file($plist, UNDISPLAY, $infodir, $opt_U);
d611 1
a611 1
		$plist->verify_checksum($base, {}, $infodir);
d614 2
a615 1
		$plist->makesum_plist($p2, $base, {}, $infodir);
d650 1
a650 1
	$plist->tofile($infodir.CONTENTS) or Fatal "Can't write packing list";
d655 1
a655 1
	my $dummy = OpenBSD::Ustar->new(undef, $infodir);
d672 1
a672 1
	my $wrarc = OpenBSD::Ustar->new($fh, $infodir);
@


1.103
log
@always create packing-lists with a `contents' entry.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.102 2007/05/25 12:19:23 espie Exp $
a182 2
	my ($self, $plist, $base, $stash, $infodir) = @@_;
	$self->add_object($plist);
@


1.102
log
@move the mode checker code from pkg_create into ArcCheck, so that pkg_add
can reuse it.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.101 2007/05/22 14:06:30 jmc Exp $
a478 1
OpenBSD::PackingElement::File->add($plist, CONTENTS);
@


1.101
log
@remove duplicate -M entry from set_usage(); ok espie
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.100 2007/05/22 06:48:22 jmc Exp $
a124 1
use POSIX;
d131 2
a132 21
	if (!defined $self->{owner} && !$o->isSymLink) {
	    if ($o->{uname} ne 'root' && $o->{uname} ne 'bin') {
		    print STDERR "Error: no \@@owner for ",
			$self->fullname, " (", $o->{uname}, ")\n";
		    $main::errors++;
	    }
	}
	if (!defined $self->{group} && !$o->isSymLink) {
	    if ($o->{gname} ne 'bin' && $o->{gname} ne 'wheel') {
		    print STDERR "Warning: no \@@group for ",
			$self->fullname, " (", $o->{gname}, ")\n";
#			$main::errors++;
	    }
	}
	if (!defined $self->{mode} && $o->isFile) {
	    if (($o->{mode} & (S_ISUID | S_ISGID | S_IWOTH)) != 0) {
		    print STDERR "Error: weird mode for ", 
			$self->fullname, ": ", 
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)), "\n";
		    $main::errors++;
	    }
@


1.100
log
@remove -h from set_usage();
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.99 2007/05/22 00:25:42 espie Exp $
d494 1
a494 1
'[-i iscript] [-k dscript] [-L localbase] [-M module] [-M displayfile]',
@


1.99
log
@finish removing unused -h option
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.98 2007/05/15 10:36:34 espie Exp $
d493 1
a493 1
'pkg_create [-hnQqv] [-A arches] [-B pkg-destdir] [-D name=value]',
@


1.98
log
@make sure to give all special files to root/wheel, and strip them of write
and suid bits.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.97 2007/05/12 14:00:35 espie Exp $
d352 1
a352 1
	$opt_S, $opt_h, $opt_s, $opt_O, $opt_A, $opt_L,
d501 1
a501 1
	getopts('hp:f:c:d:vi:k:r:m:M:U:S:hs:OA:L:B:D:P:W:nqQ', 
@


1.97
log
@strip extra quotes from all defines.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.96 2007/05/07 09:37:30 espie Exp $
d184 13
@


1.96
log
@zap old unused code
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.95 2007/05/06 15:41:47 espie Exp $
a433 2
		$comment =~ s/^\"(.*)\"$/$1/ or
		$comment =~ s/^\'(.*)\'$/$1/;
d493 4
a496 1
				$defines{$`} = $';
@


1.95
log
@let pkg_create generate the correct description if the HOMEPAGE is empty.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.94 2007/05/05 11:18:18 espie Exp $
a199 2
use OpenBSD::Temp;

@


1.94
log
@set up new way to define COMMENTS, to be able to remove some stuff from
the ports' infrastructure.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.93 2007/05/05 10:50:04 espie Exp $
d467 3
a469 3
	    	print $fh "\n", dosubst('Maintainer: ${MAINTAINER}'), "\n\n";
	    	if (defined $defines{HOMEPAGE}) {
			print $fh dosubst('WWW: ${HOMEPAGE}'), "\n";
@


1.93
log
@ditch extra param to copy_subst, now that it's constant.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.92 2007/05/05 10:48:39 espie Exp $
d434 11
a444 1
	if (!defined $opt_c) {
d452 2
a453 2
	    if ($opt_c =~ /^\-/) {
		print $fh $', "\n";
d455 5
a459 1
		copy_subst_fh($opt_c, $fh);
d465 6
@


1.92
log
@use copy_subst_fh
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.91 2007/05/05 10:47:06 espie Exp $
d335 2
a336 2
	my ($srcname, $mode, $destname) = @@_;
	open my $dest, $mode, $destname or die "can't open $destname";
d426 1
a426 1
	    copy_subst($opt, '>', $infodir.$name) if defined $infodir;
@


1.91
log
@reorg tests to simplify logic
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.90 2007/05/05 10:40:44 espie Exp $
d441 1
d443 1
a443 3
		open(my $fh, '>', $infodir.$name) or die "Can't write COMMENT to DESC file: $!";
		print $fh $';
		close($fh);
d445 1
a445 1
		copy_subst($opt_c, '>', $infodir.$name);
d448 1
a448 3
		open(my $fh, '>>', $infodir.$name) or die "Can't write to DESC: $!";
		print $fh $';
		close($fh);
d450 1
a450 1
		copy_subst($opt_d, '>>', $infodir.$name);
d452 1
@


1.90
log
@split copy_subst to allow for existing filehandle.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.89 2007/05/04 19:40:37 espie Exp $
d434 1
a434 11
	if (defined $opt_c) {
	    if (defined $infodir) {
		if ($opt_c =~ /^\-/) {
		    open(my $fh, '>', $infodir.$name) or die "Can't write COMMENT to DESC file: $!";
		    print $fh $';
		    close($fh);
		} else {
		    copy_subst($opt_c, '>', $infodir.$name);
		}
	    }
	} else {
d437 17
a453 10

	if (defined $opt_d) {
	    if (defined $infodir) {
		if ($opt_d =~ /^\-/) {
		    open(my $fh, '>>', $infodir.$name) or die "Can't write to DESC: $!";
		    print $fh $';
		    close($fh);
		} else {
		    copy_subst($opt_d, '>>', $infodir.$name);
		}
a454 2
	} else {
		Usage "Description required";
@


1.89
log
@move some checks  after -q/-Q so that plists can still be printed.
problem noticed by Bernd.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.88 2007/05/03 14:49:56 espie Exp $
d324 1
a324 1
sub copy_subst
d326 1
a326 1
	my ($srcname, $mode, $destname) = @@_;
a327 1
	open my $dest, $mode, $destname or die "can't open $destname";
d332 6
@


1.88
log
@Simplify code to handle fragments by using real objects.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.87 2007/05/03 12:17:25 espie Exp $
a599 5
if ($plist->{deprecated}) {
	print STDERR "Error: found obsolete constructs\n";
	exit 1;
}
	
a610 6
$plist->avert_duplicates_and_other_checks({});

if ($errors) {
	exit 1;
}

d624 13
@


1.87
log
@fix creation of packing-list for package regeneration
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.86 2007/05/03 12:14:36 espie Exp $
a28 1
use Symbol;
d280 29
d369 4
a372 1
    return $plist->fromfile($filename,
d374 1
a374 1
		my ($fh, $cont) = @@_;
d376 1
a376 5
		my (@@fhstack, @@namestack);
		push(@@fhstack, $fh);
		push(@@namestack, $filename);
		while($fh = pop @@fhstack) {
			my $fname = pop @@namestack;
d378 1
a378 1
			while (<$fh>) {
d395 1
a395 1
					my $newname = deduce_name($fname, $frag, $not);
d397 2
a398 5
						push(@@fhstack, $fh);
						push(@@namestack, $fname);
						$fname = $newname;
						$fh = gensym;
						open($fh, '<', $fname) or die "missing file $fname";
d403 1
a403 1
					$_ = '@@comment $'.'OpenBSD: '.basename($fname).',v$';
a599 4
if ($plist->{need_modules}) {
	print STDERR "Error: some needed modules were not found\n";
	$errors++;
}
@


1.86
log
@move the fragments reading code to its own routine.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.85 2007/05/02 13:59:19 espie Exp $
d513 2
d560 4
a565 4
for my $contentsfile (@@contents) {
    read_fragments($plist, $contentsfile) or 
    	Fatal "Can't open packing list $contentsfile";
}
@


1.85
log
@remove extraneous () in method call: $o->method() becomes $o->method
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.84 2007/05/01 18:46:02 espie Exp $
d337 55
d561 2
a562 49
    $plist->fromfile($contentsfile,
	sub {
		my ($fh, $cont) = @@_;
		local $_;
		my (@@fhstack, @@namestack);
		push(@@fhstack, $fh);
		push(@@namestack, $contentsfile);
		while($fh = pop @@fhstack) {
			my $fname = pop @@namestack;
			GETLINE:
			while (<$fh>) {
				if (m/^(\!)?\%\%(.*)\%\%$/) {
					my ($not, $frag) = ($1, $2);
					my $def = $frag;
					if ($frag eq 'SHARED') {
						$def = 'SHARED_LIBS';
						$frag = 'shared';
					}
					if (!defined $defines{$def}) {
						die "Error: unknown fragment $frag";
					} elsif ($defines{$def} == 1) {
						next GETLINE if defined $not;
					} elsif ($defines{$def} == 0) {
						next GETLINE unless defined $not;
					} else {
						die "Incorrect define for $frag";
					}
					my $newname = deduce_name($fname, $frag, $not);
					if (defined $newname) {
						push(@@fhstack, $fh);
						push(@@namestack, $fname);
						$fname = $newname;
						$fh = gensym;
						open($fh, '<', $fname) or die "missing file $fname";
					}
					next GETLINE;
				}
				if (m/^(\@@comment\s+\$(?:Open)BSD\$)$/) {
					$_ = '@@comment $'.'OpenBSD: '.basename($fname).',v$';
				}
				if (m,^\@@lib\s+.*/lib[^/]+\.so\.\d+\.\d+$,) {
					Warn "Shared library without SHARED_LIBS: $_";
					$main::errors++;
				}
				&$cont(dosubst($_));
			}
		}
	}
    ) or Fatal "Can't open packing list $contentsfile";
@


1.84
log
@kill old constructs that have been deprecated since 2004.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.83 2007/04/30 13:51:32 espie Exp $
d41 1
a41 1
		$self->comment_create_package();
d48 1
a48 1
	$self->comment_create_package();
d59 2
a60 2
	return unless $self->NoDuplicateNames();
	my $n = $self->fullname();
d133 1
a133 1
	if (!defined $self->{owner} && !$o->isSymLink()) {
d136 1
a136 1
			$self->fullname(), " (", $o->{uname}, ")\n";
d140 1
a140 1
	if (!defined $self->{group} && !$o->isSymLink()) {
d143 1
a143 1
			$self->fullname(), " (", $o->{gname}, ")\n";
d147 1
a147 1
	if (!defined $self->{mode} && $o->isFile()) {
d150 1
a150 1
			$self->fullname(), ": ", 
d213 1
a213 1
	$self->comment_create_package();
d230 1
a230 1
	$o->write() unless $main::errors;
d238 1
a238 1
	$self->comment_create_package();
d250 1
a250 1
	print '@@', $item->keyword(), " ", $item->fullname(), "\n";
d256 1
a256 1
	$self->makesum_plist_filename($plist, $base, $self->fullname(), $stash);
d262 1
a262 1
	$self->verify_checksum_filename($base, $self->fullname(), $stash);
d270 1
a270 1
	my $fname = $self->fullname();
d607 1
a607 1
	$wname = $plist->pkgname().".tgz";
d634 1
a634 2
	$wrarc->pad();
	close($fh);
@


1.83
log
@don't bother trying to substitute if there's no $ in the string.
According to perl's profiler, this actually accounts for *most* of the
user time of pkg_create...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.82 2007/04/30 12:39:31 espie Exp $
a67 13
my $warned;

sub warn_once
{
	my $self = shift;
	my $k = $self->keyword;
	if (!$warned->{$k}) {
		print STDERR "Error: \@@$k is deprecated\n";
		$main::errors++;
		$warned->{$k} = 1;
	}
}

a157 18
package OpenBSD::PackingElement::PkgConflict;
sub avert_duplicates_and_other_checks
{
	shift->warn_once;
}

package OpenBSD::PackingElement::PkgDep;
sub avert_duplicates_and_other_checks
{
	shift->warn_once;
}

package OpenBSD::PackingElement::DirRm;
sub avert_duplicates_and_other_checks
{
	shift->warn_once;
}

d569 4
@


1.82
log
@simplify regen mode logic: if we don't add anything to the packing-list,
we never have to check we added nothing.

so, process -P/-W in two steps: stash we've seen them first, and add them
later. As a benefit, sort/unify them once, so that we can stash them
correctly directly.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.81 2007/04/30 12:20:32 espie Exp $
d319 1
@


1.81
log
@make creation of special files more obvious.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.80 2007/04/30 12:11:51 espie Exp $
a53 2
sub count_elements { ${$_[1]}++; }

d411 2
a412 1
my @@contents;
d441 2
a442 1
	 		OpenBSD::PackingElement::Dependency->add($plist, shift);
d445 2
a446 1
	 		OpenBSD::PackingElement::Wantlib->add($plist, shift);
d479 1
a479 3
	my $v = 0;
	$plist->count_elements(\$v);
	if ($v != 1 or @@contents != 1) {
d502 7
@


1.80
log
@All options that add special files follow the same pattern, so reuse the
same code.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.79 2007/04/30 11:39:26 bernd Exp $
d378 1
a378 1
sub add_special_files
d380 2
a381 2
	my ($plist, $infodir) = @@_;
	OpenBSD::PackingElement::File->add($plist, DESC);
d385 1
a385 1
		    open(my $fh, '>', $infodir.DESC) or die "Can't write COMMENT to DESC file: $!";
d389 1
a389 1
		    copy_subst($opt_c, '>', $infodir.DESC);
d399 1
a399 1
		    open(my $fh, '>>', $infodir.DESC) or die "Can't write to DESC: $!";
d403 1
a403 1
		    copy_subst($opt_d, '>>', $infodir.DESC);
a408 7

	add_special_file($plist, INSTALL, $infodir, $opt_i);
	add_special_file($plist, DEINSTALL, $infodir, $opt_k);
	add_special_file($plist, REQUIRE, $infodir, $opt_r);
	add_special_file($plist, DISPLAY, $infodir, $opt_M);
	add_special_file($plist, MODULE, $infodir, $opt_m);
	add_special_file($plist, UNDISPLAY, $infodir, $opt_U);
d416 1
d492 7
a498 1
	add_special_files($plist, $infodir);
@


1.79
log
@Fix prepare_for_archival().
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.78 2007/04/30 11:38:30 espie Exp $
d369 9
d410 6
a415 29

	if (defined $opt_i) {
	    OpenBSD::PackingElement::File->add($plist, INSTALL);
	    copy_subst($opt_i, '>', $infodir.INSTALL) if defined $infodir;
	}
		
	if (defined $opt_k) {
	    OpenBSD::PackingElement::File->add($plist, DEINSTALL);
	    copy_subst($opt_k, '>', $infodir.DEINSTALL) if defined $infodir;
	}

	if (defined $opt_r) {
	    OpenBSD::PackingElement::File->add($plist, REQUIRE);
	    copy_subst($opt_r, '>', $infodir.REQUIRE) if defined $infodir;
	}

	if (defined $opt_M) {
	    OpenBSD::PackingElement::File->add($plist, DISPLAY);
	    copy_subst($opt_M, '>', $infodir.DISPLAY) if defined $infodir;
	}

	if (defined $opt_m) {
	    OpenBSD::PackingElement::File->add($plist, MODULE);
	    copy_subst($opt_m, '>', $infodir.MODULE) if defined $infodir;
	}
	if (defined $opt_U) {
	    OpenBSD::PackingElement::File->add($plist, UNDISPLAY);
	    copy_subst($opt_U, '>', $infodir.UNDISPLAY) if defined $infodir;
	}
@


1.78
log
@special mode `pretend_to_archive' for -n, which does most things except
writing the package itself (includes mode verifications).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.77 2007/04/30 11:23:22 espie Exp $
d169 1
a170 1
	}
@


1.77
log
@archive special files exactly like we archive normal files. This provides
for more checks in very fishy cases (like if we end up with /var/db belonging
to the wrong person).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.76 2007/04/30 11:12:54 espie Exp $
d45 6
d197 5
d242 7
d266 8
d648 2
a649 1
	$plist->comment_create_package();
@


1.76
log
@split preparation and check into prepare_item.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.75 2007/04/30 10:52:23 espie Exp $
d135 32
d188 1
a188 3
	my ($self, $arc, $base) = @@_;
	my $o = $arc->prepare($self->{name});
	$o->write();
a237 31
use POSIX;

sub prepare_item
{
	my ($self, $arc) = @@_;

	my $o = $arc->prepare_long($self);
	if (!defined $self->{owner} && !$o->isSymLink()) {
	    if ($o->{uname} ne 'root' && $o->{uname} ne 'bin') {
		    print STDERR "Error: no \@@owner for ",
			$self->fullname(), " (", $o->{uname}, ")\n";
		    $main::errors++;
	    }
	}
	if (!defined $self->{group} && !$o->isSymLink()) {
	    if ($o->{gname} ne 'bin' && $o->{gname} ne 'wheel') {
		    print STDERR "Warning: no \@@group for ",
			$self->fullname(), " (", $o->{gname}, ")\n";
#			$main::errors++;
	    }
	}
	if (!defined $self->{mode} && $o->isFile()) {
	    if (($o->{mode} & (S_ISUID | S_ISGID | S_IWOTH)) != 0) {
		    print STDERR "Error: weird mode for ", 
			$self->fullname(), ": ", 
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)), "\n";
		    $main::errors++;
	    }
	return $o;
	}
}
d243 1
a243 1
	my $o = $self->prepare_item($arc);
@


1.75
log
@unsimplify checksum creation, fix @@link markers.
found out by bernd@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.74 2007/04/30 10:30:50 espie Exp $
d210 1
a210 1
sub archive
d212 1
a212 1
	my ($self, $arc, $base) = @@_;
d236 1
d238 8
@


1.74
log
@allow pkg_create to regen on a dirname, supply +CONTENTS automatically
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.73 2007/04/30 10:26:43 espie Exp $
d91 2
a92 1
	my ($self, $result, $fname, $stash) = @@_;
d102 1
a102 1
			$stash->{"$dev/$ino"} = $fname;
d114 2
a115 2
	my ($self, $plist, $fname, $stash) = @@_;
	$self->compute_checksum($self, $fname, $stash);
d121 1
a121 1
	my ($self, $fname, $stash) = @@_;
d123 1
a123 1
	$self->compute_checksum($check, $fname, $stash);
d129 1
a129 1
			print STDERR "Error: $field inconsistency for $fname\n";
d170 1
a170 2
	my $fname = $infodir.'/'.$self->{name};
	$self->makesum_plist_filename($plist, $fname, $stash);
d176 1
a176 2
	my $fname = $infodir.'/'.$self->{name};
	$self->verify_checksum_filename($fname, $stash);
d255 1
a255 2
	my $fname = $base.'/'.$self->fullname();
	$self->makesum_plist_filename($plist, $fname, $stash);
d261 1
a261 2
	my $fname = $base.'/'.$self->fullname();
	$self->verify_checksum_filename($fname, $stash);
d271 1
a271 2
		my $n = "$base/$fname-$i";
		if (-e $n) {
d273 1
a273 1
			$e->compute_checksum($e, $n, $stash);
@


1.73
log
@reorg main code to separate regeneration case better.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.72 2007/04/30 10:00:50 espie Exp $
d473 6
a478 1
	$infodir = dirname($contents[0]);
a563 1

@


1.72
log
@add items based on options, not on file existence.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.71 2007/04/30 09:53:41 espie Exp $
d339 63
d414 1
a450 2
$infodir = OpenBSD::Temp::dir() unless $opt_q;

d467 5
a471 11
if (defined $opt_q) {
	for my $special (info_names()) {
		if ($special eq DESC or
		    $special eq INSTALL and (defined $opt_i) or
		    $special eq DEINSTALL and (defined $opt_k) or
		    $special eq REQUIRE and (defined $opt_r) or
		    $special eq DISPLAY and (defined $opt_M) or
		    $special eq MODULE and (defined $opt_m) or
		    $special eq UNDISPLAY and (defined $opt_U)) {
			OpenBSD::PackingElement::File->add($plist, $special);
		}
d473 1
d475 5
a479 9
	OpenBSD::PackingElement::File->add($plist, DESC);
	if (defined $opt_c) {
	    if ($opt_c =~ /^\-/) {
		open(my $fh, '>', $infodir.DESC) or die "Can't write COMMENT to DESC file: $!";
		print $fh $';
		close($fh);
	    } else {
		copy_subst($opt_c, '>', $infodir.DESC);
	    }
d481 1
a481 1
		Usage "Comment required" unless $regen_package;
d484 2
a485 10
	if (defined $opt_d) {
	    if ($opt_d =~ /^\-/) {
		open(my $fh, '>>', $infodir.DESC) or die "Can't write to DESC: $!";
		print $fh $';
		close($fh);
	    } else {
		copy_subst($opt_d, '>>', $infodir.DESC);
	    }
	} else {
		Usage "Description required" unless $regen_package;
d488 2
a489 10
	print "Creating package $ARGV[0]\n" if !(defined $opt_q) && $opt_v && !$regen_package;

	if (defined $opt_i) {
	    OpenBSD::PackingElement::File->add($plist, INSTALL);
	    copy_subst($opt_i, '>', $infodir.INSTALL);
	}
		
	if (defined $opt_k) {
	    OpenBSD::PackingElement::File->add($plist, DEINSTALL);
	    copy_subst($opt_k, '>', $infodir.DEINSTALL);
d491 4
a494 4

	if (defined $opt_r) {
	    OpenBSD::PackingElement::File->add($plist, REQUIRE);
	    copy_subst($opt_r, '>', $infodir.REQUIRE);
d496 6
d503 2
a504 3
	if (defined $opt_M) {
	    OpenBSD::PackingElement::File->add($plist, DISPLAY);
	    copy_subst($opt_M, '>', $infodir.DISPLAY);
d506 1
a506 35

	if (defined $opt_m) {
	    OpenBSD::PackingElement::File->add($plist, MODULE);
	    copy_subst($opt_m, '>', $infodir.MODULE);
	}
	if (defined $opt_U) {
	    OpenBSD::PackingElement::File->add($plist, UNDISPLAY);
	    copy_subst($opt_U, '>', $infodir.UNDISPLAY);
	}

	OpenBSD::PackingElement::File->add($plist, CONTENTS);
}

if (defined $opt_p) {
	OpenBSD::PackingElement::Cwd->add($plist, $opt_p);
} elsif (!$regen_package) {
	Usage "Prefix required";
}

if (defined $opt_A) {
	OpenBSD::PackingElement::Arch->add($plist, $opt_A);
}

if (defined $opt_L) {
	OpenBSD::PackingElement::LocalBase->add($plist, $opt_L);
}

if ($regen_package) {
	my $v = 0;
	$plist->count_elements(\$v);
	if ($v != 1 || @@contents != 1) {
		Usage "Exactly one single packing list is required";
	}
	$infodir = dirname($contents[0]);
}
a559 6
if (!$plist->has('name') && $ARGV[0] =~ m|([^/]+)$|) {
	my $pkgname = $1;
	$pkgname =~ s/\.tgz$//;
	OpenBSD::PackingElement::Name->add($plist, $pkgname);
} 

a567 12
}

my $fullpkgpath = $defines{'FULLPKGPATH'};
my $cdrom = $defines{'PERMIT_PACKAGE_CDROM'};
my $ftp = $defines{'PERMIT_PACKAGE_FTP'};
if (!defined $plist->{extrainfo} && 
    defined $fullpkgpath && defined $cdrom && defined $ftp) {
	$cdrom = 'yes' if $cdrom =~ m/^yes$/i;
	$ftp = 'yes' if $ftp =~ m/^yes$/i;

	OpenBSD::PackingElement::ExtraInfo->add($plist, 
	    $fullpkgpath, $cdrom, $ftp);
@


1.71
log
@fold checksumming code for special files. As a bonus, we now check md5
on package regeneration
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.70 2007/04/30 09:37:36 espie Exp $
d418 1
d443 1
a443 1
	print "Creating package $ARGV[0]\n" if $opt_v && !$regen_package;
d446 1
d451 1
d456 1
d461 1
d466 1
d470 1
a473 4
	for my $special (info_names()) {
	    next unless -f $infodir.$special;
	    OpenBSD::PackingElement::File->add($plist, $special);
	}
@


1.70
log
@slight code reorg, no changes.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.69 2007/04/30 09:34:06 espie Exp $
d77 10
d111 1
a111 1
sub makesum_plist
d113 2
a114 1
	my ($self, $plist, $base, $stash, $infodir) = @@_;
d118 1
a118 1
sub verify_checksum
d120 12
d166 27
d257 1
a257 2
	$self->compute_checksum($self, $fname, $stash);
	$self->add_object($plist);
d264 1
a264 11
	my $check = ref($self)->new($self->{name});
	$self->compute_checksum($check, $fname, $stash);

	for my $field (qw(symlink link md5 size)) {
		if ((defined $check->{$field} && defined $self->{$field} &&
		    $check->{$field} ne $self->{$field}) ||
		    (defined $check->{$field} xor defined $self->{$field})) {
			print STDERR "Error: $field inconsistency for $fname\n";
			$main::errors++;
		}
	}
d469 1
a469 3
	    my $f = OpenBSD::PackingElement::File->add($plist, $special);
	    $f->add_md5(OpenBSD::md5::fromfile($infodir.$special));
	    $f->add_size((stat $infodir.$special)[7]);
@


1.69
log
@use more descriptive name (dir -> infodir) and pass it along to checksumming
capabilities (to be able to fold special files case in later)
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.68 2007/04/30 09:31:25 espie Exp $
a76 6
sub makesum_plist
{
	my ($self, $plist, $base, $stash, $infodir) = @@_;
	$self->add_object($plist);
}

d101 10
d143 15
a202 26
package OpenBSD::PackingElement::Cwd;
use OpenBSD::Temp;

sub archive
{
	my ($self, $arc, $base) = @@_;
	$arc->destdir($base."/".$self->{name});
}

sub comment_create_package
{
	my ($self) = @@_;
	print "Cwd: ", $self->{name}, "\n";
}

package OpenBSD::PackingElement;

sub create_checksum
{
}

sub verify_checksum
{
}

package OpenBSD::PackingElement::FileBase;
@


1.68
log
@move checksumming capabilities into base class
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.67 2007/04/30 09:30:03 espie Exp $
d79 1
a79 1
	my ($self, $plist, $base, $stash) = @@_;
d212 1
a212 1
	my ($self, $plist, $base, $stash) = @@_;
d220 1
a220 1
	my ($self, $base, $stash) = @@_;
d238 1
a238 1
	my ($self, $plist, $base, $stash) = @@_;
d353 1
a353 1
my $dir;
d355 1
a355 1
$dir = OpenBSD::Temp::dir() unless $opt_q;
d388 1
a388 1
		open(my $fh, '>', $dir.DESC) or die "Can't write COMMENT to DESC file: $!";
d392 1
a392 1
		copy_subst($opt_c, '>', $dir.DESC);
d400 1
a400 1
		open(my $fh, '>>', $dir.DESC) or die "Can't write to DESC: $!";
d404 1
a404 1
		copy_subst($opt_d, '>>', $dir.DESC);
d413 1
a413 1
	    copy_subst($opt_i, '>', $dir.INSTALL);
d417 1
a417 1
	    copy_subst($opt_k, '>', $dir.DEINSTALL);
d421 1
a421 1
	    copy_subst($opt_r, '>', $dir.REQUIRE);
d425 1
a425 1
	    copy_subst($opt_M, '>', $dir.DISPLAY);
d429 1
a429 1
	    copy_subst($opt_m, '>', $dir.MODULE);
d432 1
a432 1
	    copy_subst($opt_U, '>', $dir.UNDISPLAY);
d436 1
a436 1
	    next unless -f $dir.$special;
d438 2
a439 2
	    $f->add_md5(OpenBSD::md5::fromfile($dir.$special));
	    $f->add_size((stat $dir.$special)[7]);
d464 1
a464 1
	$dir = dirname($contents[0]);
d555 1
a555 1
		$plist->verify_checksum($base, {});
d558 1
a558 1
		$plist->makesum_plist($p2, $base, {});
d586 1
a586 1
	$plist->tofile($dir.CONTENTS) or Fatal "Can't write packing list";
d607 1
a607 1
	my $wrarc = OpenBSD::Ustar->new($fh, $dir);
@


1.67
log
@tweak args to compute_checksum slightly, pass it the explicit file name
we want to check.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.66 2007/04/30 09:07:16 espie Exp $
d83 24
a209 24
use OpenBSD::md5;

sub compute_checksum
{
	my ($self, $result, $fname, $stash) = @@_;

	if (-l $fname) {
		my $value = readlink $fname;
		$result->make_symlink($value);
	} elsif (-f _) {
		my ($dev, $ino, $size) = (stat _)[0,1,7];
		if (defined $stash->{"$dev/$ino"}) {
			$result->make_hardlink($stash->{"$dev/$ino"});
		} else {
			$stash->{"$dev/$ino"} = $fname;
			$result->add_md5(OpenBSD::md5::fromfile($fname));
			$result->add_size($size);
		}
	} else {
		print STDERR "Error in package: $fname does not exist\n";
		$main::errors++;
	}
}

@


1.66
log
@stop looking at plist's internals during makesum, simply copy the objects
over to the new plist using add_object for all objects.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.65 2007/04/30 08:43:19 espie Exp $
d190 1
a190 1
	my ($self, $result, $base, $stash) = @@_;
d192 2
a193 3
	my $fname = $self->fullname();
	if (-l "$base/$fname") {
		my $value = readlink "$base/$fname";
d201 1
a201 1
			$result->add_md5(OpenBSD::md5::fromfile("$base/$fname"));
d205 1
a205 1
		print STDERR "Error in package: $base/$fname does not exist\n";
d213 2
a214 1
	$self->compute_checksum($self, $base, $stash);
d221 1
a221 1
	my $fname = $self->fullname();
d223 1
a223 1
	$self->compute_checksum($check, $base, $stash);
d242 2
a243 1
		if (-e "$base/$fname-$i") {
d245 1
a245 1
			$e->compute_checksum($e, $base, $stash);
@


1.65
log
@add most things concerning @@ignore, since we now have ways nicer to do
things.

We still recognize @@ignore in packing-lists for now, but we don't handle
it. Not that register-plist has smart enough comparison functions that
it doesn't care about @@ignore at all...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.64 2007/04/29 12:46:18 espie Exp $
d77 6
d211 1
a211 1
sub create_checksum
d215 1
d236 1
a236 1
sub create_checksum
d239 1
a239 1
	$self->SUPER::create_checksum($plist, $base, $stash);
d243 2
a244 2
			my $file = OpenBSD::PackingElement::File->add($plist, $self->{name}."-".$i);
			$file->create_checksum($plist, $base, $stash);
a250 15
package OpenBSD::PackingList;

sub makesum
{
	my ($self, $base) = @@_;
	my $stash = {};
	my $oldlist = $self->{items};
	$self->{items} = [];
	for my $item (@@$oldlist) {
		push @@{$self->{items}}, $item;
		$self->{state}->{cwd} = $item->{cwd} if defined $item->{cwd};
		$item->create_checksum($self, $base, $stash);
	}
}

d556 3
a558 1
		$plist->makesum($base);
d561 1
@


1.64
log
@verify_checksum can be used as a normal visitor
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.63 2007/04/29 12:31:54 espie Exp $
d445 2
a446 3
	    $f->{ignore} = 1;
	    $f->{md5} = OpenBSD::md5::fromfile($dir.$special);
	    $f->{size} = (stat $dir.$special)[7];
@


1.63
log
@now that checksum creation uses OO methods, reuse the same code for
create_checksum and verify_checksum.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.61 2007/04/29 12:06:55 espie Exp $
a258 10
sub checksum
{
	my ($self, $base) = @@_;
	my $stash = {};
	for my $item (@@{$self->{items}}) {
		$self->{state}->{cwd} = $item->{cwd} if defined $item->{cwd};
		$item->verify_checksum($base, $stash);
	}
}

d563 1
a563 1
		$plist->checksum($base);
@


1.62
log
@fix recreation of packing-lists: we now have exactly one element in there.
@
text
@d182 1
a182 1
sub create_checksum
d184 2
a185 1
	my ($self, $plist, $base, $stash) = @@_;
d189 1
a189 6
		$self->make_symlink($value);
		return if $base eq '/' or $base eq '';
		if ($value =~ m/^\Q$base/) {
			print STDERR "Error in package: symlink $base/$fname refers to $value\n";
			$main::errors++;
		}
d193 1
a193 1
			$self->make_hardlink($stash->{"$dev/$ino"});
d196 2
a197 2
			$self->add_md5(OpenBSD::md5::fromfile("$base/$fname"));
			$self->add_size($size);
d200 1
a200 1
		print STDERR "Error in package: \"$base/$fname\" does not exist\n";
d205 6
d216 2
a217 16
	if (-l "$base/$fname") {
		my $value = readlink "$base/$fname";
		$check->make_symlink($value);
	} elsif (-f _) {
		my ($dev, $ino, $size) = (stat _)[0,1,7];
		if (defined $stash->{"$dev/$ino"}) {
			$check->make_hardlink($stash->{"$dev/$ino"});
		} else {
			$stash->{"$dev/$ino"} = $fname;
			$check->add_md5(OpenBSD::md5::fromfile("$base/$fname"));
			$check->add_size($size);
		}
	} else {
		print STDERR "Error in package: $base/$fname does not exist\n";
		$main::errors++;
	}
@


1.61
log
@unify some other consistency checks
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.60 2007/04/29 11:48:00 espie Exp $
d200 2
a201 2
			$self->{md5} = OpenBSD::md5::fromfile("$base/$fname");
			$self->{size} = $size;
d213 1
a213 1
	my $check = {};
d216 1
a216 1
		$check->{symlink} = $value;
d220 1
a220 1
			$check->{link} = $stash->{"$dev/$ino"};
d223 2
a224 2
			$check->{md5} = OpenBSD::md5::fromfile("$base/$fname");
			$check->{size} = $size;
d491 1
a491 1
	if ($v != 0 || @@contents != 1) {
@


1.60
log
@all of them....
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.59 2007/04/29 11:47:16 espie Exp $
d52 1
a52 1
sub avert_duplicates
d58 1
a58 1
		print STDERR "Error in packing-list: duplicate file $n\n";
d64 31
a168 12
package OpenBSD::PackingElement::DirRm;
my $warned;

sub create_checksum
{
	if (!$warned) {
		print STDERR "Error: \@@dirrm is deprecated\n";
		$warned=1;
		$main::errors++;
	}
}

d590 1
a590 1
$plist->avert_duplicates({});
a591 8
if (defined $plist->{pkgcfl}) {
	print STDERR "Error: \@@pkgcfl is obsolete, use \@@conflict instead\n";
	$errors++;
}
if (defined $plist->{pkgdep}) {
	print STDERR "\@@pkgdep is obsolete, use \@@depend instead\n";
	$errors++;
}
d593 1
a593 1
	exit(1);
@


1.59
log
@rename compute_checksum to create_checksum
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.58 2007/04/29 11:44:42 espie Exp $
d141 1
a141 1
sub compute_checksum
d152 1
a152 1
sub compute_checksum
@


1.58
log
@turn avert_duplicates into a full visitor
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.57 2007/04/29 11:35:45 espie Exp $
d163 1
a163 1
sub compute_checksum
d222 1
a222 1
sub compute_checksum
d225 1
a225 1
	$self->SUPER::compute_checksum($plist, $base, $stash);
d230 1
a230 1
			$file->compute_checksum($plist, $base, $stash);
d248 1
a248 1
		$item->compute_checksum($self, $base, $stash);
@


1.57
log
@explain how to archive special files, and turn
create_package/comment_create_package into actual visitors for more
regularity
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.56 2007/04/29 11:13:27 espie Exp $
d52 12
a261 17
sub avert_duplicates
{
	my ($self) = @@_;
	my $allfiles = {};
	for my $item (@@{$self->{items}}) {
		if ($item->NoDuplicateNames()) {
			my $n = $item->fullname();
			if (defined $allfiles->{$n}) {
				print STDERR "Error in packing-list: duplicate file $n\n";
				$main::errors++;
			}
			$allfiles->{$n} = 1;
		} 
	}
}


d571 2
a572 1
$plist->avert_duplicates();
@


1.56
log
@now we always call create_package with a valid archive.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.55 2007/04/29 11:12:07 espie Exp $
d48 1
a48 1
sub anything { ${$_[1]}++; }
d51 15
a226 16
sub create_package
{
	my ($self, $wrarc, $base, $verbose) = @@_;
	for my $item (@@{$self->{items}}) {
		$item->create_package($wrarc, $base, $verbose);
	}
}

sub comment_create_package
{
	my ($self) = @@_;
	for my $item (@@{$self->{items}}) {
		$item->comment_create_package();
	}
}

a387 2
my @@extra_files = ();

a451 1
	    push(@@extra_files, $special);
d457 1
d476 1
a476 1
	$plist->anything(\$v);
a609 2
unshift(@@extra_files, CONTENTS);

a610 3
	for my $special (@@extra_files) {
		print "Adding $special\n" unless defined $opt_q;
	}
a627 5
	for my $special (@@extra_files) {
		print "Adding $special\n" if $opt_v;
		my $o = $wrarc->prepare($special);
		$o->write();
	}
@


1.55
log
@rename archive into create_package, split its function into
archive (when the arc is defined) and comment_create_package (if verbose).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.53 2007/04/15 10:17:29 espie Exp $
d38 2
a39 3
	if (defined $arc) {
		$self->archive($arc, $base);
	}
@


1.54
log
@replace $p->visit('method') calls with $p->method
now that it works.
@
text
@d35 11
d47 2
d57 1
a57 1
	my ($self, $arc, $base, $verbose) = @@_;
d59 6
a64 8
	if (defined $arc) {
	    my $o = $arc->prepare_long($self);
	    if (!defined $self->{owner} && !$o->isSymLink()) {
		if ($o->{uname} ne 'root' && $o->{uname} ne 'bin') {
			print STDERR "Error: no \@@owner for ",
			    $self->fullname(), " (", $o->{uname}, ")\n";
			$main::errors++;
		}
d66 5
a70 4
	    if (!defined $self->{group} && !$o->isSymLink()) {
		if ($o->{gname} ne 'bin' && $o->{gname} ne 'wheel') {
			print STDERR "Warning: no \@@group for ",
			    $self->fullname(), " (", $o->{gname}, ")\n";
a71 1
		}
d73 7
a79 7
	    if (!defined $self->{mode} && $o->isFile()) {
		if (($o->{mode} & (S_ISUID | S_ISGID | S_IWOTH)) != 0) {
			print STDERR "Error: weird mode for ", 
			    $self->fullname(), ": ", 
			    sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)), "\n";
			$main::errors++;
		}
a80 4
	    $o->write() unless $main::errors;
	}
	if ($verbose) {
		print "Adding ", $self->{name}, "\n";
d82 7
d99 1
d102 8
a109 7
	my ($self, $arc, $base, $verbose) = @@_;
	if (defined $arc) {
	    $arc->destdir($base."/".$self->{name});
	}
	if ($verbose) {
		print "Cwd: ", $self->{name}, "\n";
	}
d213 1
a213 1
sub archive
d217 9
a225 1
		$item->archive($wrarc, $base, $verbose);
d620 1
a620 1
	$plist->archive(undef, $base, 1);
d643 1
a643 1
	$plist->archive($wrarc, $base, $opt_v);
@


1.53
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.52 2007/03/19 09:57:40 espie Exp $
d456 1
a456 1
	$plist->visit('anything', \$v);
d576 1
a576 1
		$plist->visit('print_file');
@


1.52
log
@make `no @@owner', `weird mode' and `@@dirrm' into errors.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.50 2006/12/10 23:15:00 steven Exp $
d5 1
a5 1
# Copyright (c) 2003-2004 Marc Espie <espie@@openbsd.org>
@


1.51
log
@handle more errors during package creation.
- if archiving discovers issues, then go into high speed mode where stuff
doesn't get written.
- in case of errors or fatal signals, make sure to remove a partially
written archive.
@
text
@d50 1
a50 1
			print STDERR "Warning: no \@@owner for ",
d52 1
d59 1
d64 1
a64 1
			print STDERR "Warning: weird mode for ", 
d67 1
d102 1
a102 1
		print STDERR "Warning: \@@dirrm is deprecated\n";
d104 1
@


1.50
log
@don't complain about uid/gid of symlinks.

"makes sense" sturm@@, "go for it" espie@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.49 2006/11/07 09:28:55 espie Exp $
a47 1
	    $o->write();
d51 1
a51 1
			$self->fullname(), " (", $o->{uname}, ")\n";
d57 1
a57 1
			$self->fullname(), " (", $o->{gname}, ")\n";
d67 1
d595 12
d618 4
@


1.49
log
@zap the stat part related to file type, only keeping the usual modes.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.48 2006/11/05 11:41:45 espie Exp $
d49 1
a49 1
	    if (!defined $self->{owner}) {
d55 1
a55 1
	    if (!defined $self->{group}) {
@


1.48
log
@warn for any weird stuff in packages.
Namely:
- anything that doesn't belong to owner root/bin, group bin/wheel
must be annotated in the packing-list.
- any file setuid, setgid, writable by others must be annotated in
the packing-list.

These warnings must be fixed. They will become errors in the near futur.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.47 2006/10/15 15:37:28 jmc Exp $
d65 1
a65 1
			    sprintf("%4o", $o->{mode}), "\n";
@


1.47
log
@tweaks;
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.46 2006/10/15 09:32:52 espie Exp $
d40 2
d49 19
@


1.46
log
@Normalize query options: make them not stop the package generation unless
-n is also mentioned. Do some devious speed tricks in case -n && -[qQ]
(forgetting to checksum files, for instance), so that it can be used for
batch jobs.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.45 2006/01/09 12:15:23 espie Exp $
d281 1
a281 1
'pkg_create [-hnvqQ] [-A arches] [-B pkg-destdir] [-D name=value]',
@


1.45
log
@avoid anything that isn't a library in warning for SHARED_LIBS.
Turn warning into a fatal error.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.44 2005/12/26 15:50:39 espie Exp $
d524 1
a524 1
if (!defined $opt_q) {
d555 1
a555 1
	exit(0);
d569 1
a569 1
		print "Adding $special\n";
@


1.44
log
@have pkg_create warn about shared libs which have a version number hardcoded
in the packing-list.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.43 2005/11/19 14:45:32 espie Exp $
d479 1
a479 1
				if (m/^\@@lib\s+.*\.so\.\d+\.\d+$/) {
d481 1
@


1.43
log
@magically complete fragment with `committed' names, solve the issue that
uncommitted ports don't register correct plists...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.42 2005/09/24 19:44:26 espie Exp $
d478 3
@


1.42
log
@Add some code to just build the packing-list even if the package won't
happen. Use -q and -Q for now, may change.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.40 2005/09/11 10:12:01 espie Exp $
d475 3
@


1.41
log
@pass actual items to prepare_long and check_name so that we can also
verify that modes/groups/owners are correct (code to come)
@
text
@d38 1
d53 6
d245 5
d266 1
a266 1
		print "Switching to $noto\n";
d269 1
a269 1
		print "Switching to $o\n";
a276 5
our ($opt_p, $opt_f, $opt_c, $opt_d, $opt_v, $opt_i, $opt_k, $opt_r, 
	$opt_S, $opt_h, $opt_s, $opt_O, $opt_A, $opt_L,
	$opt_m, $opt_M, $opt_U, $opt_P, $opt_W, $opt_n,
	$opt_B);

d281 1
a281 1
'pkg_create [-hnv] [-A arches] [-B pkg-destdir] [-D name=value]',
d288 1
a288 1
	getopts('hp:f:c:d:vi:k:r:m:M:U:S:hs:OA:L:B:D:P:W:n', 
d321 3
a323 1
my $dir = OpenBSD::Temp::dir();
d333 4
d341 14
a354 8
if (defined $opt_c) {
    if ($opt_c =~ /^\-/) {
	open(my $fh, '>', $dir.DESC) or die "Can't write COMMENT to DESC file: $!";
	print $fh $';
	close($fh);
    } else {
	copy_subst($opt_c, '>', $dir.DESC);
    }
d356 11
a366 2
	Usage "Comment required" unless $regen_package;
}
d368 11
a378 11
if (defined $opt_d) {
    if ($opt_d =~ /^\-/) {
	open(my $fh, '>>', $dir.DESC) or die "Can't write to DESC: $!";
	print $fh $';
	close($fh);
    } else {
	copy_subst($opt_d, '>>', $dir.DESC);
    }
} else {
	Usage "Description required" unless $regen_package;
}
d380 1
a380 1
print "Creating package $ARGV[0]\n" if $opt_v && !$regen_package;
d382 7
a388 7
if (defined $opt_i) {
    copy_subst($opt_i, '>', $dir.INSTALL);
}
	
if (defined $opt_k) {
    copy_subst($opt_k, '>', $dir.DEINSTALL);
}
d390 3
a392 3
if (defined $opt_r) {
    copy_subst($opt_r, '>', $dir.REQUIRE);
}
d394 3
a396 3
if (defined $opt_M) {
    copy_subst($opt_M, '>', $dir.DISPLAY);
}
d398 6
a403 6
if (defined $opt_m) {
    copy_subst($opt_m, '>', $dir.MODULE);
}
if (defined $opt_U) {
    copy_subst($opt_U, '>', $dir.UNDISPLAY);
}
d405 8
a412 8
my @@extra_files = ();
for my $special (info_names()) {
    next unless -f $dir.$special;
    push(@@extra_files, $special);
    my $f = OpenBSD::PackingElement::File->add($plist, $special);
    $f->{ignore} = 1;
    $f->{md5} = OpenBSD::md5::fromfile($dir.$special);
    $f->{size} = (stat $dir.$special)[7];
d517 6
a522 4
if ($regen_package) {
	$plist->checksum($base);
} else {
	$plist->makesum($base);
d542 8
@


1.40
log
@downgrade @@pkgdep from deprecated to actual error.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.39 2005/09/07 14:01:59 jmc Exp $
d44 1
a44 1
	    my $o = $arc->prepare_long($self->{name});
@


1.39
log
@use `pkg-name' rather than `pkgname' here, for consistency with other
pkg_* bits;

ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.38 2005/09/04 22:47:56 espie Exp $
d501 1
@


1.38
log
@* New -i interactive option, that can ask obnoxious questions.
* move the signature code to a packing-list method, prepend the pkgname.
* depend on distant listings, cache these systematically.
* cut the PKG_PATH at :/ systematically, much simpler than parsing URLs.
People should get used to trailing /s.
* let pkg_add -u actually run the update.
* check for signature in more places, for instance, let pkg_add installed_stuff
be a void operation.
* grab enough stuff during updates to check signatures, so that pkg_add -u
can report updates that are not needed right away, instead of waiting
for the more confusing `trying to update'
* beginning of @@module support.
* @@pkgpath support, including updates.
* systematically expand stems when applicable.
* use visitors systematically in pkg_info.
* pkg_info -S reports signature.
* remove hardcoding of categories in PackingList, so that future modules
will be able to expand them.
* add @@updateset and @@incompatibility keywords.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.37 2005/08/14 12:01:08 espie Exp $
d277 1
a277 1
'[-U undisplayfile] [-W wantedlib] -c desc -d desc -f packinglist pkgname');
@


1.37
log
@no reason not to record special files sizes along with md5.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.36 2005/08/07 14:18:04 espie Exp $
d267 1
a267 1
	$opt_M, $opt_U, $opt_P, $opt_W, $opt_n,
d275 1
a275 1
'[-i iscript] [-k dscript] [-L localbase] [-M displayfile]',
d281 1
a281 1
	getopts('hp:f:c:d:vi:k:r:M:U:S:hs:OA:L:B:D:P:W:n', 
d370 3
d483 5
@


1.36
log
@wrapper around Ustar that replaces long names/links with LongName#/LongLink#.

The archive will unpack correctly with tar, except that those names won't
be preserved.

The wrapper checks names against the packing-list to restore the correct names
on the fly.

Put into a separate file, as it is an extension of Ustar proper, and we're
going to do more archive checking in the future.

Lots of tests by Bernd Ahlers. Comments by Tom Cosgrove.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.35 2005/06/26 11:24:06 espie Exp $
d381 1
@


1.35
log
@switch pkg_create to built-in Ustar, no longer dependent on external tar.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.34 2005/06/08 09:43:40 espie Exp $
d28 1
d44 1
a44 1
	    my $o = $arc->prepare($self->{name});
@


1.34
log
@squeeze +COMMENT in front of +DESC.
Transparently handle both package types, until everyone has
transitionned  to new style.

Reasons for the change:
- comment and desc are never written independently
- access to comment necessitates a file read anyways.
- shaves one inode and (mostly) one block from each installed package.

Since this is /var, and there is often a lot of stuff going on in a small
partition, this helps.

Done after griping from tedu@@, okay'd pval@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.33 2005/01/22 12:52:55 espie Exp $
d27 1
a32 1
sub archive_cmd { () }
d34 1
d38 1
a38 1
sub archive_cmd
d40 8
a47 9
	my ($self, $pfh, $use_cwd) = @@_;
	my $fh = $$pfh;
	print $fh $self->{name}, "\n";
	if (@@$use_cwd != 0) {
	    my @@r = @@$use_cwd;
	    @@$use_cwd = ();
	    return @@r;
	} else {
	    return ();
d53 1
a53 2

sub archive_cmd
d55 7
a61 5
	my ($self, $pfh, $use_cwd, $dir, $base) = @@_;
	my ($fh, $fname) = OpenBSD::Temp::list($dir);
	$$pfh = $fh;
	@@$use_cwd = ("-C", $base."/".$self->{name}, "-I", $fname );
	return ();
d164 1
a164 1
sub archive_cmd
d166 1
a166 4
	my ($self, $dir, $base) = @@_;
	my $fh;
	my @@use_cwd = ();
	my @@cmd = ();
d168 1
a168 1
		push(@@cmd, $item->archive_cmd(\$fh, \@@use_cwd, $dir, $base));
a169 1
	return @@cmd;
a313 1
my $dir2 = $dir;
a480 1
	$dir2 = OpenBSD::Temp::dir();
a495 3
my @@cmd = $plist->archive_cmd($dir2, $base);


d509 1
a509 2
@@cmd = ('tar', $opt_h ? "zcfh" : "zcf", $wname, "-C", $dir, CONTENTS,
    @@extra_files, @@cmd);
d512 4
a515 2
	print join(' ', @@cmd), "\n";
	exit(0);
d518 11
a528 1
	System(@@cmd) == 0 or Fatal "tar failed";
@


1.33
log
@explicitly shows fragment names that were not found.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.32 2005/01/16 11:16:23 espie Exp $
d231 1
a231 1
	my ($srcname, $destname) = @@_;
d233 1
a233 1
	open my $dest, '>', $destname or die "can't open $destname";
d333 1
a333 1
	open(my $fh, '>', $dir.COMMENT) or die "Can't write to COMMENT: $!";
d337 1
a337 1
	copy_subst($opt_c, $dir.COMMENT);
d345 1
a345 1
	open(my $fh, '>', $dir.DESC) or die "Can't write to DESC: $!";
d349 1
a349 1
	copy_subst($opt_d, $dir.DESC);
d358 1
a358 1
    copy_subst($opt_i, $dir.INSTALL);
d362 1
a362 1
    copy_subst($opt_k, $dir.DEINSTALL);
d366 1
a366 1
    copy_subst($opt_r, $dir.REQUIRE);
d370 1
a370 1
    copy_subst($opt_M, $dir.DISPLAY);
d374 1
a374 1
    copy_subst($opt_U, $dir.UNDISPLAY);
@


1.32
log
@allow locking of database in quiet mode, where we don't display any
message.
Display the lock message on stderr anyways, so that we don't disturb
normal displays.
postpone locking after we know about -q in pkg_info's case.
Display command line if pkg_create fails, so that we can see what arguments
it found in bsd.port.mk.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.31 2004/12/12 11:26:16 espie Exp $
d253 1
a253 1
		die "Missing fragments for $frag";
@


1.31
log
@add somewhat more regular error catching code.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.30 2004/12/10 12:02:37 jmc Exp $
d312 1
a312 1
	Usage "Exactly one single package name is required";
@


1.30
log
@sync usage();
ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.29 2004/12/07 12:13:25 espie Exp $
d282 2
a283 1
eval { getopts('hp:f:c:d:vi:k:r:M:U:S:hs:OA:L:B:D:P:W:n', 
d304 4
a307 6
	}); };
if ($@@) {
	chomp($@@);
	$@@ =~ s/\s+at.*?$//;
	Usage($@@);
}
d315 1
d451 1
a451 1
    ) or die "Can't open packing list $contentsfile";
d513 1
a513 1
	$plist->tofile($dir.CONTENTS) or die "Can't write packing list";
d525 1
a525 1
	System(@@cmd) == 0 or die "tar failed";
d527 4
@


1.29
log
@do like the manpage says, don't add a @@name if we already got one.
should please aaron@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.28 2004/12/06 12:35:36 espie Exp $
d276 4
a279 5
'pkg_create [-hnv] [-A arches] [-B pkg-destdir] [-Dname=value]',
'[-i iscript] [-k dscript] [-L localbase] [-M displayfile] [-P pkg-dep]',
'[-p prefix] [-r rscript] [-S pkg-destdir] [-U undisplayfile]',
'[-W wantedlib] -c desc -d desc -f packinglist pkgname',
'pkg_create [-hnv] -f installed-packinglist');
@


1.28
log
@Usage
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.27 2004/12/02 18:32:37 espie Exp $
a392 6
if (!$regen_package && $ARGV[0] =~ m|([^/]+)$|) {
	my $pkgname = $1;
	$pkgname =~ s/\.tgz$//;
	OpenBSD::PackingElement::Name->add($plist, $pkgname);
} 

d405 1
a405 1
		Usage "Exactly one single package name is required";
d454 6
@


1.27
log
@Add quotes to unconfuse pkg_create error message.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.26 2004/12/01 12:17:40 espie Exp $
d275 7
d283 1
a283 1
getopts('p:f:c:d:vi:k:r:M:U:S:hs:OA:L:B:D:P:W:n', 
d297 1
d304 6
a309 1
	});
d314 1
a314 1
	die "Exactly one single package name is required";
d321 1
a321 1
	die "Option s is no longer supported";
d325 1
a325 1
	die "Option O is no longer supported";
d329 1
a329 1
	die "Packing list required";
d341 1
a341 1
	die "Comment required" unless $regen_package;
d353 1
a353 1
	die "Description required" unless $regen_package;
d390 1
a390 1
	die "Prefix required";
d411 1
a411 1
		die "Exactly one single package name is required";
@


1.26
log
@allow stuff to recreate a package from an installed CONTENTS: since
we have all the md5 and stuff, we just need to make sure the package is
correct (hence verify_checksum).

Add a -n option to pkg_create: this is consistent with pkg_add/pkg_delete,
and with this new verify_checksum, pkg_create can be used to check that a
package still matches its contents.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.25 2004/11/18 21:51:43 espie Exp $
d109 1
a109 1
		print STDERR "Error in package: $base/$fname does not exist\n";
@


1.25
log
@document @@wantlib, @@depend. Provide -P and -W flags to be able to specify
those on the command line instead of having to generate a separate plist.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.24 2004/11/15 16:47:54 espie Exp $
d34 2
d80 4
d114 31
d188 10
d269 1
a269 1
	$opt_M, $opt_U, $opt_P, $opt_W,
d273 1
d276 1
a276 1
getopts('p:f:c:d:vi:k:r:M:U:S:hs:OA:L:B:D:P:W:', 
d298 3
a300 1
if (@@ARGV != 1) {
d305 1
d328 1
a328 1
	die "Comment required";
d340 1
a340 1
	die "Description required";
d343 1
a343 1
print "Creating package $ARGV[0]\n" if $opt_v;
d376 1
a376 1
} else {
d380 1
a380 1
if ($ARGV[0] =~ m|([^/]+)$|) {
d394 9
d471 6
a476 1
$plist->makesum($base);
d489 1
a489 1
my @@cmd = $plist->archive_cmd($dir, $base);
a495 1
$plist->tofile($dir.CONTENTS) or die "Can't write packing list";
d497 18
a514 4
print "Creating gzip'd tar ball in '$ARGV[0]'\n" if $opt_v;
System('tar', $opt_h ? "zcfh" : "zcf", $ARGV[0], "-C", $dir, CONTENTS,
    @@extra_files, @@cmd) == 0 or
	die "tar failed";
@


1.24
log
@generate ExtraInfo from defines FULLPKGPATH, PERMIT_PACKAGE_CDROM, PERMIT_PACKAGE_FTP if none is available elsewhere.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.23 2004/10/12 09:34:01 espie Exp $
d222 1
a222 1
	$opt_M, $opt_U,
d227 2
a228 1
getopts('p:f:c:d:vi:k:r:M:U:S:hs:OA:L:B:D:', 
d241 6
a313 1
my $plist = new OpenBSD::PackingList;
d416 3
@


1.23
log
@Oops. Copy option contents BEFORE looking for them.
problem noticed by wilfried@@ as `packages don't have INSTALL anymore'
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.22 2004/10/11 14:25:28 espie Exp $
d391 13
@


1.22
log
@remove special `visiting order' when writing packing-lists.
Add implicit '.' cwd at beginning of packing-list.
so that special files get registered at front of packing-list before
any cwd occurs (and they get in the same order as stuff gets written
through tar).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.21 2004/10/11 10:30:33 espie Exp $
d287 20
a402 20

if (defined $opt_i) {
    copy_subst($opt_i, $dir.INSTALL);
}
	
if (defined $opt_k) {
    copy_subst($opt_k, $dir.DEINSTALL);
}

if (defined $opt_r) {
    copy_subst($opt_r, $dir.REQUIRE);
}

if (defined $opt_M) {
    copy_subst($opt_M, $dir.DISPLAY);
}

if (defined $opt_U) {
    copy_subst($opt_U, $dir.UNDISPLAY);
}
@


1.21
log
@add support for undisplay file, to be able to show information at pkg
removal without having to run a DEINSTALL script...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.20 2004/10/11 10:07:37 espie Exp $
d288 9
a403 9
my @@extra_files = ();
OpenBSD::PackingElement::Cwd->add($plist, '.');
for my $special (info_names()) {
    next unless -f $dir.$special;
    push(@@extra_files, $special);
    my $f = OpenBSD::PackingElement::File->add($plist, $special);
    $f->{ignore} = 1;
    $f->{md5} = OpenBSD::md5::fromfile($dir.$special);
}
@


1.20
log
@kill old MTREE option that was never implemented in the new tools anyways.
kill -C and -P options which are definitely no longer used as well.
Reorder special files so that REQUIRE is at front (and it's executed first
anyways).
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.19 2004/09/20 10:36:39 espie Exp $
d222 1
a222 1
	$opt_M,
d227 1
a227 1
getopts('p:f:c:d:vi:k:r:M:S:hs:OA:L:B:D:', 
d389 4
@


1.19
log
@error out for pkgcfl in pkg_create, but don't warn if it's found in
existing packages or installed packages. Too much noise for now.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.18 2004/09/17 08:49:17 espie Exp $
d221 1
a221 1
	$opt_S, $opt_m, $opt_h, $opt_s, $opt_O, $opt_P, $opt_C, $opt_A, $opt_L,
d227 1
a227 1
getopts('p:f:c:d:vi:k:r:M:S:m:hs:OP:C:A:L:B:D:', 
a299 13
if (defined $opt_P) {
	for my $e (split(/\s+/, $opt_P)) {
		OpenBSD::PackingElement::PkgDep->add($plist, $e);
    	}
}

if (defined $opt_C) {
	for my $e (split(/\s+/, $opt_C)) {
		OpenBSD::PackingElement::PkgConflict->add($plist, $e);
    	}

}

a389 5

if (defined $opt_m) {
    copy_subst($opt_m, $dir.MTREE_DIRS);
}

@


1.18
log
@warn for dirrm.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.17 2004/09/15 18:54:17 espie Exp $
d378 4
@


1.17
log
@Support for -Dvar=value in pkg_create:
- do the substitution for ${var}
- handle fragments %%var%% depending on value being 0 or 1.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.16 2004/08/27 16:45:45 espie Exp $
d59 11
@


1.16
log
@make sure pkg_create keeps track of cwd.
okay naddy, pvalchev, millert.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.15 2004/08/06 07:51:17 espie Exp $
d23 1
a23 1
use Getopt::Std;
d26 3
a28 1
use File::Copy;
d159 48
d209 1
a209 1
our ($opt_p, $opt_f, $opt_c, $opt_d, $opt_v, $opt_i, $opt_k, $opt_r, $opt_D,
d211 1
d213 18
a230 1
getopts('p:f:c:d:vi:k:r:D:S:m:hs:OP:C:A:L:B:');
d246 1
a246 7
if (defined $opt_f) {
	if ($opt_f eq '-') {
	    copy(\*STDIN, $dir.CONTENTS);
	} else {
	    copy($opt_f, $dir.CONTENTS);
	}
} else {
d256 1
a256 1
	copy($opt_c, $dir.COMMENT);
d268 1
a268 1
	copy($opt_d, $dir.DESC);
d310 44
a353 1
$plist->fromfile($dir.CONTENTS) or die "Can't open packing list";
d374 1
a374 1
    copy($opt_i, $dir.INSTALL);
d378 1
a378 1
    copy($opt_k, $dir.DEINSTALL);
d382 1
a382 1
    copy($opt_r, $dir.REQUIRE);
d385 2
a386 2
if (defined $opt_D) {
    copy($opt_D, $dir.DISPLAY);
d390 1
a390 1
    copy($opt_m, $dir.MTREE_DIRS);
a398 2
    # Do not record contents in itself...
    next if $special eq CONTENTS;
d411 1
a411 1
system('tar', $opt_h ? "zcfh" : "zcf", $ARGV[0], "-C", $dir, 
@


1.15
log
@unified headers, switch to smaller copyright notice.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.14 2004/08/05 23:36:39 espie Exp $
d133 1
@


1.14
log
@refactor classes in PackingElement to share more code.
- all files go through FileBase, all directories go through DirBase.
- dirclass() is used to switch classes based on final /, so that
@@sample, @@extra, and @@file  all take directories as well.
- set NoDuplicateNames() more thoroughly.
- make sure all no-default-conflict objects are correct.

compute_fullname() checks for absolute paths, allowed for @@sample and
@@extra.

lastfile only gets set for actual files.

special names like INSTALL are only checked for normal files.

add a CVSTag class for @@comment $OpenBSD$, so that these get sorted first.

Changes for make-plist rewrite:

clone() method that can create copies of all hash objects, to specialize
if needed.

add_object() method so that add() is now new() followed by add_object()
for most objects (useful for cloned objects).

Check that plist has a name in pkg_create, allowing PackingList to write
unnamed plists.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.13 2004/07/20 18:58:41 espie Exp $
d5 13
a17 22
# Copyright (c) 2003 Marc Espie.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
# PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.13
log
@support for gnu-info, with @@info keyword.
- modify pkg_create so that it will look for info-[0-9]+ and add them
to the packing-list.
- deal with installing the info file/de-installing it at pkg_add/pkg_delete
time.

tested by naddy@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.12 2004/07/13 00:35:38 espie Exp $
d41 1
a41 1
package OpenBSD::PackingElement::File;
d74 1
a74 1
package OpenBSD::PackingElement::File;
d309 4
@


1.12
log
@at pkg_create time, mark hard links with @@link, and symlinks with @@symlink,
instead of computing size and md5.
okay naddy@@, sturm@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.10 2004/07/05 19:43:05 espie Exp $
d68 1
a68 2
package OpenBSD::PackingList;
use OpenBSD::md5;
d70 1
a70 1
sub archive_cmd
a71 8
	my ($self, $dir, $base) = @@_;
	my $fh;
	my @@use_cwd = ();
	my @@cmd = ();
	for my $item (@@{$self->{items}}) {
		push(@@cmd, $item->archive_cmd(\$fh, \@@use_cwd, $dir, $base));
	}
	return @@cmd;
d74 3
d79 1
a79 1
	my ($self, $base, $stash) = @@_;
d104 30
d138 5
a142 4
	for my $item (@@{$self->{items}}) {
		if ($item->IsFile()) {
			compute_checksum($item, $base, $stash);
		}
d151 1
a151 1
		if ($item->IsFile() || $item->isa("OpenBSD::PackingElement::DirRm")) {
@


1.11
log
@commit from the wrong tree. noticed by krw@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.9 2004/07/05 09:27:05 espie Exp $
d85 1
a85 1
	my ($self, $base) = @@_;
d88 2
a90 1
		my $value = readlink "$base/$fname";
d95 9
d105 2
a106 2
		$self->{md5} = OpenBSD::md5::fromfile("$base/$fname");
		$self->{size} = (stat "$base/$fname")[7];
d113 1
d116 1
a116 1
			compute_checksum($item, $base);
@


1.10
log
@too clever, perl regexps are greedy, ensure we get the correct name.
@
text
@d85 1
a85 1
	my ($self, $base, $stash) = @@_;
d88 1
a89 2
		$self->make_symlink($value);
		return if $base eq '/' or $base eq '';
d95 2
a96 8
		my ($dev, $ino, $size) = (stat "$base/$fname")[0,1,7];
		if (defined $stash->{"$dev/$ino"}) {
			$self->make_hardlink($stash->{"$dev/$ino"});
		} else {
			$stash->{"$dev/$ino"} = $fname;
			$self->{md5} = OpenBSD::md5::fromfile("$base/$fname");
			$self->{size} = $size;
		}
a102 1
	my $stash = {};
d105 1
a105 1
			compute_checksum($item, $base, $stash);
@


1.9
log
@Still deduce a pkg-name even if there is no .tgz in the pkg-name specified
on the command-line. Problem noticed by Brad Webb.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.8 2004/01/31 17:56:13 espie Exp $
d85 1
a85 1
	my ($self, $base) = @@_;
d88 2
a90 1
		my $value = readlink "$base/$fname";
d96 8
a103 2
		$self->{md5} = OpenBSD::md5::fromfile("$base/$fname");
		$self->{size} = (stat "$base/$fname")[7];
d110 1
d113 1
a113 1
			compute_checksum($item, $base);
d201 4
a204 2
if ($ARGV[0] =~ m|([^/]+)(?:\.tgz)?$|) {
	OpenBSD::PackingElement::Name->add($plist, $1);
@


1.8
log
@pkg_create -L support, which I forgot to commit.
-B pkg-destdir, synonymous to -S, and PKG_DESTDIR support.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.7 2004/01/27 00:13:04 espie Exp $
d193 1
a193 1
if ($ARGV[0] =~ m|([^/]+)\.tgz$|) {
d195 1
a195 1
}
d207 1
@


1.7
log
@show $! in system related errors.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.6 2003/12/26 16:44:31 espie Exp $
d132 3
a134 2
	$opt_S, $opt_m, $opt_h, $opt_s, $opt_O, $opt_P, $opt_C, $opt_A);
getopts('p:f:c:d:vi:k:r:D:S:m:hs:OP:C:A:');
d213 4
d220 9
a228 1
my $base = $opt_S || '/';
@


1.6
log
@Allow storing of `arch' annotations inside packages.
Factor common method code in write, keep variations in stringize.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.5 2003/11/22 11:59:19 espie Exp $
d161 1
a161 1
	open(my $fh, '>', $dir.COMMENT) or die "Can't write to COMMENT";
d173 1
a173 1
	open(my $fh, '>', $dir.DESC) or die "Can't write to DESC";
@


1.5
log
@more packing-lists sanity checks:
- multiple dirrm
- symlinks that point inside the fake area
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.4 2003/11/04 18:11:42 espie Exp $
d132 2
a133 2
	$opt_S, $opt_m, $opt_h, $opt_s, $opt_O, $opt_P, $opt_C);
getopts('p:f:c:d:vi:k:r:D:S:m:hs:OP:C:');
d206 4
@


1.4
log
@make pkg_create aware of duplicate files in plist, which are a bad thing.

okay sturm@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.3 2003/10/31 17:43:20 espie Exp $
d87 11
a97 3
	return if -l "$base/$fname";
	$self->{md5} = OpenBSD::md5::fromfile("$base/$fname");
	$self->{size} = (stat "$base/$fname")[7];
a113 1
	my $duplicates = 0;
d115 1
a115 1
		if ($item->IsFile()) {
d119 1
a119 1
				$duplicates++;
d122 1
a122 4
		}
	}
	if ($duplicates) {
		exit(1);
d126 1
d129 2
d214 4
@


1.3
log
@upward compatible change: let md5 register as @@md5 (still grok @@comment MD5
though), and add @@size to denote file sizes in created package.

okay naddy@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.2 2003/10/19 18:39:19 espie Exp $
d102 20
d206 1
@


1.2
log
@Let @@cwd followed by no files work (for @@extra), like the old tools.
ok pval
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.1.1.1 2003/10/16 17:43:34 espie Exp $
d89 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# $OpenBSD: pkg_create,v 1.1.1.1 2003/10/16 17:16:30 espie Exp $
d44 1
a44 1
	my ($self, $pfh) = @@_;
d47 7
a53 1
	return ();
d61 1
a61 1
	my ($self, $pfh, $dir, $base) = @@_;
d64 2
a65 1
	return ("-C", $base."/".$self->{name}, "-I", $fname);
d75 1
d78 1
a78 1
		push(@@cmd, $item->archive_cmd(\$fh, $dir, $base));
@


1.1.1.1
log
@new import of my pkgtools, after a slight naming disagreement with the
Upper Management...
@
text
@@
