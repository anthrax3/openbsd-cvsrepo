head	1.43;
access;
symbols
	OPENBSD_6_1:1.43.0.10
	OPENBSD_6_1_BASE:1.43
	OPENBSD_6_0:1.43.0.12
	OPENBSD_6_0_BASE:1.43
	OPENBSD_5_9:1.43.0.6
	OPENBSD_5_9_BASE:1.43
	OPENBSD_5_8:1.43.0.8
	OPENBSD_5_8_BASE:1.43
	OPENBSD_5_7:1.43.0.2
	OPENBSD_5_7_BASE:1.43
	OPENBSD_5_6:1.43.0.4
	OPENBSD_5_6_BASE:1.43
	OPENBSD_5_5:1.39.0.8
	OPENBSD_5_5_BASE:1.39
	OPENBSD_5_4:1.39.0.4
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.39.0.2
	OPENBSD_5_3_BASE:1.39
	OPENBSD_5_2:1.38.0.2
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.2
	OPENBSD_5_0:1.29.0.6
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.4
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.2
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.20.0.6
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@# @;


1.43
date	2014.07.13.15.54.28;	author espie;	state Exp;
branches;
next	1.42;
commitid	TLaQLbe7rjiAbEub;

1.42
date	2014.04.14.20.40.41;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2014.03.09.09.55.10;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2013.01.27.11.39.22;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	2012.05.28.10.14.33;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2012.05.26.10.27.06;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2012.05.23.09.52.55;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2012.05.18.12.13.37;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2012.05.08.10.54.43;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2012.04.29.08.46.02;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2012.04.22.11.57.18;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2012.04.22.11.38.54;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2011.09.10.08.46.37;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2010.07.28.12.19.54;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.30.11.33.57;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.24.17.21.44;	author sthen;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.09.11.57.21;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.09.10.58.01;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2010.01.11.12.20.45;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.01.16.09.35;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.20.10.25.16;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.10.04.35.31;	author steven;	state Exp;
branches;
next	1.18;

1.18
date	2008.05.16.22.01.27;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.16.18.29.18;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.20.13.44.39;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.16.09.29.37;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.04.14.57.33;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.29.11.09.29;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.01.01.20.56.23;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2007.01.01.18.20.59;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.12.16.21.28;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.12.16.18.27;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.11.16.20.10;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.11.16.13.43;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.13.20.54.38;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.07.14.01.59;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.03.11.52.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.15.09.13.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.43
log
@stuff no longer needed, now that base/x release install its own locate dbs
@
text
@#! /usr/bin/perl
# Copyright (c) 2005-2010 Marc Espie <espie@@openbsd.org>
# $OpenBSD: pkg_mklocatedb,v 1.42 2014/04/14 20:40:41 espie Exp $
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::Getopt;
use OpenBSD::Error;
use OpenBSD::Paths;
use OpenBSD::AddCreateDelete;

package OpenBSD::Pkgmklocatedb::State;
our @@ISA = qw(OpenBSD::AddCreateDelete::State);

sub handle_options
{
	my $state = shift;
	$state->{no_exports} = 1;
	$state->SUPER::handle_options('ad:Knqp:Pu', 
	    '[-aKnPqu] [-d repository] [-p portsdir] [pkg-name ...]');
	$state->{portsdir} = $state->opt('p');
	$state->{pkgdir} = $state->opt('d');
	$state->{quiet} = $state->opt('q');
	$state->{pkgpath} = $state->opt('P');
	$state->{allinfo} = $state->opt('a');
	$state->{nopipe} = $state->opt('n');
	$state->{full} = $state->opt('K');
	$state->{update} = $state->opt('u');
}

package OpenBSD::PackingElement;
sub print_name {}
sub set_header {}

package OpenBSD::PackingElement::Name;
sub set_header
{
	my ($self, $state) = @@_;
	$state->{currentheader} = $self->{name}.':';
}

package OpenBSD::PackingElement::ExtraInfo;
sub set_header
{
	my ($self, $state) = @@_;
	if ($state->{allinfo}) {
		$state->{currentheader} .=  $self->{subdir}.':';
	} elsif ($state->{pkgpath}) {
		$state->{currentheader} = $self->{subdir}.':';
	}
	$state->{done}{$self->{subdir}} = 1;
	$state->errsay($state->{currentheader}) unless $state->{quiet};
}

package OpenBSD::PackingElement::FileObject;
sub object_name
{
	my ($self, $state) = @@_;
	if ($state->{full}) {
		if ($self->needs_keyword) {
			return "\@@".$self->keyword." ".$self->fullname;
		}
	}
	return $self->fullname;
}

sub print_name
{
	my ($self, $state) = @@_;
	print {$state->{out}} $state->{currentheader}, 
	    $self->object_name($state), "\n";
}

package OpenBSD::PackingElement::Action;
sub print_name
{
	my ($self, $state) = @@_;
	print {$state->{out}} $state->{currentheader}, $self->fullstring, "\n";
}

package OpenBSD::PackingElement::ExeclikeAction;
sub print_name
{
	my ($self, $state) = @@_;
	print {$state->{out}} $state->{currentheader}, "\@@". 
	    $self->keyword, " ", $self->{expanded}, "\n";
}

package OpenBSD::PackingElement::DirBase;
sub print_name
{
	my ($self, $state) = @@_;
	print {$state->{out}} $state->{currentheader}, 
	    $self->object_name($state), "/\n";
}

package main;

sub open_output
{
	my $state = shift;


	if ($state->{nopipe} or -t STDOUT) {
		$state->{out} = \*STDOUT;
	} else {
		my $MKLOCATEDB = OpenBSD::Paths->mklocatedb;

		open $state->{out}, "|-", $MKLOCATEDB, $MKLOCATEDB or 
		    $state->fatal("couldn't open pipe to mklocatedb: #1", $!);
	}
}

sub print_out
{
	my ($plist, $state) = @@_;

	$plist->set_header($state);
	$plist->print_name($state);
}

sub do_portsdir
{
	my $state = shift;
	my $make = $ENV{MAKE} || 'make';
	my $target = defined $ENV{SUBDIRLIST} ? 
	    'print-plist' : 'print-plist-all';
	delete $ENV{FLAVOR};
	delete $ENV{SUBPACKAGE};
	open my $in, "cd $state->{portsdir} && $make $target |";
	my $done = 0;
	while (!$done) {
		my $plist = OpenBSD::PackingList->read($in,
		    sub {
			my ($fh, $cont) = @@_;
			while (<$fh>) {
				return if m/^\=\=\=\> /o;
				&$cont($_);
			}
			$done = 1;
		    });
		if (defined $plist && defined $plist->pkgname) {
			print_out($plist, $state);
		}
	}
	close($in);
}

sub do_pkgdir
{
	my $state = shift;

	require File::Find;
	no warnings qw(once);
	$state->fatal("Bad argument: #1 is not a directory", $state->{pkgdir})
	    unless -d $state->{pkgdir};
	File::Find::find(
	    sub {
		return unless -f $_;
		my $plist = $state->repo->grabPlist($File::Find::name);
		return unless defined $plist;
		print_out($plist, $state);
	    }, $state->{pkgdir});
}

sub copy_stdin
{
	my $state = shift;
	while (<STDIN>) {
		# if we find something that looks like a pkgpath we've done
		# assume we were updating it
		if (m,([^:]*/[^:]*)\:,) {
			next if defined $state->{done}{$1};
		}
		print {$state->{out}} $_;
	}
}

my $state = OpenBSD::Pkgmklocatedb::State->new("pkg_mklocatedb");
$state->handle_options;

open_output($state);

if ($state->{fatals}) {
	$state->fatal("Files not found, can't continue");
}

if ($state->{portsdir}) {
	do_portsdir($state);
} elsif ($state->{pkgdir}) {
	do_pkgdir($state);
} elsif (@@ARGV == 0) {
	if (!$state->{update}) {
		$state->progress->for_list("Scanning installation",
		    [installed_packages()], sub {
			my $pkgname = shift;
			my $plist = 
			    OpenBSD::PackingList->from_installation($pkgname);
			return unless defined $plist;
			print_out($plist, $state);
		    });
	}
} else {
	$state->progress->for_list("Scanning packages", \@@ARGV,
	    sub {
	    	my $pkgname = shift;
		my $plist = $state->repo->grabPlist($pkgname);
		next unless $plist;
		print_out($plist, $state);
	    });
}
if ($state->{update}) {
	copy_stdin($state);
}
@


1.42
log
@switch to using common SetList code (this fixes the xfont sets btw)
rename -x into -X, as -x is commonly "no progress meter". Even though this
doesn't apply to pkg_mklocatedb, this applies to pkg_check.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.41 2014/03/18 18:53:29 espie Exp $
d34 2
a35 6
	$state->SUPER::handle_options('aCd:Knqs:x:X:r:p:Pu', 
	    '[-aCKnPqu] [-d repository] [-p portsdir] [-r release] [-s src] ',
	    '[-X X11src] [pkg-name [...]]');
	$state->{srcdir} = $state->opt('s');
	$state->{xdir} = $state->opt('X') // $state->opt('x');
	$state->{releasedir} = $state->opt('r');
a41 1
	$state->{check} = $state->opt('C');
a43 42
	if ($state->{check}) {
		unless ($state->{srcdir} or $state->{portsdir}) {
			$state->usage("-C without -s dir or -x dir");
		}
	}
}

sub build_tag
{
	my ($state, $dir, $set, $rev) = @@_;
	my $r;
	if ($state->{allinfo}) {
		$r = "$dir/$set:$set$rev";
	} elsif ($state->{pkgpath}) {
		$r = "$dir/$set";
	} else {
		$r = "$set$rev";
	}
	$state->errsay($r) unless $state->{quiet};
	$state->{current_set} = $set;
	$state->{current_tag} = $r;
}

sub process_entry
{
	my ($state, $e) = @@_;
	if ($state->{check} && !-e $e) {
		$state->sync_error($e);
	}
	print {$state->{out}} "$state->{current_tag}:$e\n";
}

sub sync_error
{
	my ($state, $e) = @@_;
	my $set = $state->{current_set};
	if ($set =~ m/etc/) {
		$state->errsay("Couldn't find #1 from set #2:\n\tDid you run sysmerge recently ?", $e, $set);
	} else {
		$state->errsay("Couldn't find #1 from set #2:\n\tsrc and installation out of synch ?", $e, $set);
		$state->{fatals}++;
	}
a128 26
sub do_release
{
	my $state = shift;

	require OpenBSD::Ustar;

	opendir(my $dir, $state->{releasedir}) or return;
	while (my $e = readdir $dir) {
		if ($e =~ m/^(\w+\d\d)\.tgz$/o) {
			my $set = $1;
			open my $arc, '-|', OpenBSD::Paths->gzip, '-c', '-d', 
			    "--", $state->{releasedir}."/".$e or
			$state->fatal("couldn't open pipe from gzip: #1", $!);

			my $u = OpenBSD::Ustar->new($arc, $state, '/');
			while (my $f = $u->next) {
				my $name = $f->{name};
				$name =~ s/^\.//o;
				print {$state->{out}} "$set:$name\n";
			}
			close $arc;
		}
	}
	closedir($dir);
}

a198 8
if ($state->{srcdir}) {
	require OpenBSD::SetList;
	OpenBSD::SetList::Source->walk($state, $state->{srcdir});
}
if ($state->{xdir}) {
	require OpenBSD::SetList;
	OpenBSD::SetList::Xenocara->walk($state, $state->{xdir});
}
a200 4
}

if ($state->{releasedir}) {
	do_release($state);
@


1.41
log
@remove $_ usage that warns under perl 5.18
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.40 2014/03/09 09:55:10 espie Exp $
d34 1
a34 1
	$state->SUPER::handle_options('aCd:Knqs:x:r:p:Pu', 
d36 1
a36 1
	    '[-x X11src] [pkg-name [...]]');
d38 1
a38 1
	$state->{xdir} = $state->opt('x');
d56 36
a159 23
sub tag
{
	my ($state, $dir, $set, $rev) = @@_;
	my $r;
	if ($state->{allinfo}) {
		$r = "$dir/$set:$set$rev";
	} elsif ($state->{pkgpath}) {
		$r = "$dir/$set";
	} else {
		$r = "$set$rev";
	}
	$state->errsay($r) unless $state->{quiet};
	return $r;
}

my ($rev, $arch);
sub findos
{
	my $cmd = OpenBSD::Paths->uname." -mr";
	($rev, $arch) = split(/\s+/o, `$cmd`);
	chomp $arch;
	$rev =~ s/\.//;
}
a175 40
sub sync_error
{
	my ($state, $e, $set) = @@_;
	if ($set =~ m/etc/) {
		$state->errsay("Couldn't find #1 from set #2:\n\tDid you run sysmerge recently ?", $e, $set);
	} else {
		$state->errsay("Couldn't find #1 from set #2:\n\tsrc and installation out of synch ?", $e, $set);
		$state->{fatals}++;
	}
}

sub do_source
{
	my ($state, $src, $tag, @@sets) = @@_;
	findos() if !defined $arch;
	my $dir = "$src/distrib/sets/lists";
	for my $set (@@sets) {
		my $tag = tag($state, $tag, $set, $rev);
		my $output = 0;
		for my $f ("$dir/$set/mi", "$dir/$set/md.$arch") {
			open my $l, '<', $f or next;
			while (my $e = <$l>) {
				chomp $e;
				$e =~ s/^\.//;
				if ($state->{check} && !-e $e) {
					sync_error($state, $e, $set);
				}
				print {$state->{out}} "$tag:$e\n";
				$output = 1;
			}
		}
		if (!$output) {
			$state->fatal("Couldn't find set #1", $set);
		}
	}
	if ($state->{fatals}) {
		$state->fatal("Files not found, can't continue");
    	}
}

d273 2
a274 2
	do_source($state, $state->{srcdir}, 'src', 
	    qw(base comp etc game));
d277 5
a281 2
	do_source($state, $state->{xdir}, 'xenocara', 
	    qw(xbase xetc xfont xserv xshare));
d283 1
@


1.40
log
@record errors, and only crash at the end. much less painful to synch
sets this way...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.39 2013/01/27 11:39:22 espie Exp $
a250 1
			my $_;
@


1.39
log
@add a -u option to make it possible to build on an existing database
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.38 2012/05/28 10:14:33 espie Exp $
d169 2
a170 1
		$state->fatal("Couldn't find #1 from set #2:\n\tsrc and installation out of synch ?", $e, $set);
d198 3
@


1.38
log
@I'm an idiot, make sure we call the right routines every time
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.37 2012/05/26 10:27:06 espie Exp $
d34 2
a35 2
	$state->SUPER::handle_options('aCd:nqs:x:r:p:P', 
	    '[-aCnPq] [-d repository] [-p portsdir] [-r release] [-s src] ',
d47 2
d77 1
d82 11
d96 2
a97 1
	print {$state->{out}} $state->{currentheader}, $self->fullname, "\n";
d119 2
a120 1
	print {$state->{out}} $state->{currentheader}, $self->fullname, "/\n";
d278 13
d313 10
a322 7
	$state->progress->for_list("Scanning installation",
	    [installed_packages()], sub {
	    	my $pkgname = shift;
		my $plist = OpenBSD::PackingList->from_installation($pkgname);
		return unless defined $plist;
	    	print_out($plist, $state);
	    });
d331 3
@


1.37
log
@fix class hierarchy errors: print all Action (includes @@newuser, @@newgroup,
@@sysctl), but only use {expanded} for exec-like actions.

2 passes over plists: one to set header, 2nd one to build the list.
slightly cleaner
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.36 2012/05/23 09:52:55 espie Exp $
d209 8
d239 1
a239 2
			$plist->set_header($state);
			$plist->print_name($state);
d258 1
a258 1
		$plist->print_name($state);
d289 1
a289 1
		$plist->print_name($state);
d297 1
a297 1
		$plist->print_name($state);
@


1.36
log
@also record expanded @@exec-like actions and @@newauth...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.35 2012/05/18 12:13:37 espie Exp $
d57 1
d60 1
a60 1
sub print_name
d67 1
a67 1
sub print_name
d89 1
a89 2
	print {$state->{out}} $state->{currentheader}, "\@@". 
	    $self->keyword, " ", $self->{expanded}, "\n";
d92 1
a92 1
package OpenBSD::PackingElement::NewAuth;
d96 2
a97 1
	print {$state->{out}} $state->{currentheader}, $self->fullstring, "\n";
d231 1
@


1.35
log
@just warn if files from the *etc sets are missing. This will remind
people to run sysmerge, and is generally not a good hint things are out
of synch.

prompted by naddy@@ and sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.34 2012/05/08 10:54:43 espie Exp $
d84 15
a224 1
				next unless m/^\@@(?:bin|cwd|name|info|man|file|lib|shell|comment\s+subdir\=)\b/o || !m/^\@@/o;
@


1.34
log
@add an extra check to avoid out-of-synch
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.33 2012/04/29 08:46:02 espie Exp $
d131 10
d155 1
a155 1
					$state->fatal("Couldn't find #1 from set #2:\n\tsrc and installation out of synch ?", $e, $f);
@


1.33
log
@repair src/xsrc handling
fix it wrt FLAVOR/SUBPACKAGE passing
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.32 2012/04/22 11:57:18 espie Exp $
d34 2
a35 2
	$state->SUPER::handle_options('ad:nqs:x:r:p:P', 
	    '[-anPq] [-d repository] [-p portsdir] [-r release] [-s src] ',
d46 6
d144 3
@


1.32
log
@typo
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.31 2012/04/22 11:38:54 espie Exp $
a25 1
use File::Path;
d125 1
a125 1
sub do_src
d180 2
d227 1
a227 1
	    qw(base comp etc game misc));
@


1.31
log
@write a specialized version that appends a / to directories, to make it
easier to see them in pkg_locate results.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.30 2011/09/10 08:46:37 espie Exp $
a79 1
package main;
d86 1
@


1.30
log
@let pkg_mklocatedb work consistently with SUBDIRLIST (print only the
fullpkgpaths referenced there and nothing more)
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.29 2010/07/28 12:19:54 espie Exp $
d79 1
d81 5
@


1.29
log
@pass state to Ustar objects, use it to display those pesky error and
fatal messages.

zap $opt_x from pkg_mklocated, do things like other commands do.
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.28 2010/06/30 11:33:57 espie Exp $
d173 3
a175 1
	open my $in, "cd $state->{portsdir} && $make print-plist-all |";
@


1.28
log
@use newer code
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.27 2010/06/24 17:21:44 sthen Exp $
d28 22
d53 1
a53 1
package OpenBSD::PackingElement::FileObject;
d56 2
a57 2
	my ($self, $fh, $pkgname) = @@_;
	print $fh $pkgname, ":", $self->fullname, "\n";
d60 11
a70 1
package main;
d72 2
a73 3
our ($opt_a, $opt_n, $opt_q, $opt_s, $opt_x, $opt_r, $opt_p, $opt_P, $opt_d);

sub info
d75 2
a76 11
	my $plist = shift;
	my $r;
	if ($opt_a) {
		$r = $plist->fullpkgpath.":".$plist->pkgname;
	} elsif ($opt_P) {
		$r = $plist->fullpkgpath;
	} else {
		$r = $plist->pkgname;
	}
	print STDERR "$r\n" unless $opt_q;
	return $r;
d79 2
d83 1
a83 1
	my ($dir, $set, $rev) = @@_;
d85 1
a85 1
	if ($opt_a) {
d87 1
a87 1
	} elsif ($opt_P) {
d92 1
a92 1
	print STDERR "$r\n" unless $opt_q;
d96 13
a108 4
my $state = OpenBSD::AddCreateDelete::State->new("pkg_mklocatedb");
$state->handle_options('ad:nqs:x:r:p:P', 
    '[-anPq] [-d repository] [-p portsdir] [-r release] [-s src] ',
    '[-x X11src] [pkg-name [...]]');
d110 4
a113 2
my $fh;
my $MKLOCATEDB = OpenBSD::Paths->mklocatedb;
d115 3
a117 5
if ($opt_n or -t STDOUT) {
	$fh = \*STDOUT;
} else {
	open $fh, "|-", $MKLOCATEDB, $MKLOCATEDB or 
	    $state->fatal("couldn't open pipe: #1", $!);
d119 16
a134 16
if ($opt_s || $opt_x) {
	my $cmd = OpenBSD::Paths->uname." -mr";
	my ($rev, $arch) = split(/\s+/o, `$cmd`);
	chomp $arch;
	$rev =~ s/\.//;
	if ($opt_s) {
		my $dir = "$opt_s/distrib/sets/lists";
		for my $set (qw(base comp etc game man misc)) {
			my $tag = tag('src', $set, $rev);
			for my $f ("$dir/$set/mi", "$dir/$set/md.$arch") {
				open my $l, '<', $f or next;
				while (my $e = <$l>) {
					chomp $e;
					$e =~ s/^\.//;
					print $fh "$tag:$e\n";
				}
d137 2
a138 13
	}
	if ($opt_x) {
		my $dir = "$opt_x/distrib/sets/lists";
		for my $set (qw(xbase xetc xfont xserv xshare)) {
			my $tag = tag('XF4', $set, $rev);
			for my $f ("$dir/$set/mi", "$dir/$set/md.$arch") {
				open my $l, '<', $f or next;
				while (my $e = <$l>) {
					chomp $e;
					$e =~ s/^\.//;
					print $fh "$tag:$e\n";
				}
			}
d143 4
a146 1
if ($opt_r) {
d149 1
a149 1
	opendir(my $dir, $opt_r) or next;
d153 5
a157 2
			open my $arc, '-|', OpenBSD::Paths->gzip, '-c', '-d', "--", "$opt_r/$e";
			my $u = OpenBSD::Ustar->new($arc, '/');
d161 1
a161 1
				print $fh "$set:$name\n";
d169 3
a171 1
if ($opt_p) {
d173 1
a173 1
	open my $in, "cd $opt_p && $make print-plist-all |";
d188 1
a188 1
			$plist->print_name($fh, info($plist));
d194 4
a197 1
elsif ($opt_d) {
d200 2
a201 2
	$state->fatal("Bad argument: #1 is not a directory", $opt_d)
	    unless -d $opt_d;
d203 29
a231 6
		sub {
		    return unless -f $_;
		    my $plist = $state->repo->grabPlist($File::Find::name);
		    return unless defined $plist;
		    $plist->print_name($fh, info($plist));
		}, $opt_d);
d238 1
a238 1
		$plist->print_name($fh, info($plist));
d246 1
a246 1
		$plist->print_name($fh, info($plist));
@


1.27
log
@Include files annotated @@bin in the database produced by pkg_mklocatedb;
reported by Antti Harri who gave a very good tip helping analysis, thanks!
ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.26 2010/06/09 11:57:21 espie Exp $
a19 1
use OpenBSD::PackageLocator;
d25 1
a25 1
use OpenBSD::State;
a39 3
my $ui = OpenBSD::State->new("pkg_mklocatedb");
$ui->usage_is('[-anPq] [-d repository] [-p portsdir] [-r release] [-s src] [-x X11src] [pkg-name [...]]');

d72 4
a75 1
$ui->do_options(sub { getopts('ad:nqs:x:r:p:P'); });
d83 2
a84 1
	open $fh, "|-", $MKLOCATEDB, $MKLOCATEDB or die "couldn't open pipe: $!";
d167 2
a168 1
	die "Bad argument: $opt_d is not a directory" unless -d $opt_d;
d172 1
a172 1
		    my $plist = OpenBSD::PackageLocator->grabPlist($File::Find::name);
d176 4
a179 2
} elsif (@@ARGV==0) {
	for my $pkgname (installed_packages()) {
d181 1
a181 1
		next unless defined $plist;
d183 1
a183 1
	}
d185 4
a188 2
	for my $pkgname (@@ARGV) {
		my $plist = OpenBSD::PackageLocator->grabPlist($pkgname);
d191 1
a191 1
	}
@


1.26
log
@common pattern reuse
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.25 2010/06/09 10:58:01 espie Exp $
d152 1
a152 1
				next unless m/^\@@(?:cwd|name|info|man|file|lib|shell|comment\s+subdir\=)\b/o || !m/^\@@/o;
@


1.25
log
@use State usage, so that I can get rid of duplicate code...
@
text
@d3 1
a3 1
# $OpenBSD: pkg_mklocatedb,v 1.24 2010/05/10 09:17:55 espie Exp $
d76 1
a76 5
try {
	getopts('ad:nqs:x:r:p:P');
} catchall {
	$ui->usage($_);
};
@


1.24
log
@whitespace fixes
@
text
@d3 1
a3 1
# $OpenBSD$
d26 1
d41 2
a42 1
set_usage('pkg_mklocatedb [-anPq] [-d repository] [-p portsdir] [-r release] [-s src] [-x X11src] [pkg-name [...]]');
d79 1
a79 1
	Usage($_);
@


1.23
log
@protect gzip against weird file names
@
text
@d4 1
a4 1
# 
d8 1
a8 1
# 
@


1.22
log
@new method fullpkgpath that accesses the default fullpkgpath.
make use of it, relax pkg_create to allow any of
FULLPKGPATH, PERMIT_PACKAGE_FTP, PERMIT_PACKAGE_CDROM
(store the others as empty).
remove warning in pkg_mklocatedb for newer perl.
@
text
@d130 1
a130 1
			open my $arc, '-|', OpenBSD::Paths->gzip, '-c', '-d', "$opt_r/$e";
@


1.21
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d2 1
a2 1
# Copyright (c) 2005-2007 Marc Espie <espie@@openbsd.org>
d49 1
a49 1
		$r = $plist->{extrainfo}->{subdir}.":".$plist->pkgname;
d51 1
a51 1
		$r = $plist->{extrainfo}->{subdir};
d168 1
@


1.20
log
@Say goodbye to local $_
lexical scoping is so much neater (courtesy of perl 5.10)
@
text
@d18 2
@


1.19
log
@add rcs tags

ok espie
@
text
@d149 1
a149 1
			local $_;
@


1.18
log
@- sort usage()
- use .Bk/.Ek to avoid ugly SYNOPSIS split
@
text
@d3 1
@


1.17
log
@add a -d repository option in order not to have to specify all pkgnames.

as noticed by naddy and ajacoutot, we now have enough packages that this
stresses shell limits if we specify everything on the command line. ;-)
@
text
@d37 1
a37 1
set_usage('pkg_mklocatedb [-anPq] [-p portsdir] [-d repository] [-r release] [-s src] [-x X11src] [pkg-name [...]]');
@


1.16
log
@sprinkle code to deal gracefully with absent packing-lists.
makes it easier for people to recover after a disk crash that
leaves /var/db/pkg half-empty.
@
text
@d37 1
a37 1
set_usage('pkg_mklocatedb [-anPq] [-p portsdir] [-r release] [-s src] [-x X11src] [pkg-name [...]]');
d39 1
a39 1
our ($opt_a, $opt_n, $opt_q, $opt_s, $opt_x, $opt_r, $opt_p, $opt_P);
d72 1
a72 1
	getopts('anqs:x:r:p:P');
d163 11
a173 1
elsif (@@ARGV==0) {
@


1.15
log
@use OpenBSD::Paths contents
@
text
@d166 1
@


1.14
log
@I am on drugs, I don't know where I found split can take strings as
arguments. Repair...
@
text
@d22 1
d78 1
a78 1
my $MKLOCATEDB="/usr/libexec/locate.mklocatedb";
d86 2
a87 1
	my ($rev, $arch) = split(/\s+/o, `uname -mr`);
d127 1
a127 1
			open my $arc, '-|', '/usr/bin/gzip', 'gzip', '-c', '-d', "$opt_r/$e";
@


1.13
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d85 1
a85 1
	my ($rev, $arch) = split(' ', `uname -mr`);
@


1.12
log
@replace $p->visit('method') calls with $p->method
now that it works.
@
text
@d31 1
a31 1
	print $fh $pkgname, ":", $self->fullname(), "\n";
d45 1
a45 1
		$r = $plist->{extrainfo}->{subdir}.":".$plist->pkgname();
d49 1
a49 1
		$r = $plist->pkgname();
d85 1
a85 1
	my ($rev, $arch) = split(/ /, `uname -mr`);
d123 1
a123 1
		if ($e =~ m/^(\w+\d\d)\.tgz$/) {
d127 1
a127 1
			while (my $f = $u->next()) {
d129 1
a129 1
				$name =~ s/^\.//;
d154 1
a154 1
		if (defined $plist && defined $plist->pkgname()) {
@


1.11
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d155 1
a155 1
			$plist->visit('print_name', $fh, info($plist));
d164 1
a164 1
		$plist->visit('print_name', $fh, info($plist));
d170 1
a170 1
		$plist->visit('print_name', $fh, info($plist));
@


1.10
log
@sync usage();
@
text
@d2 1
a2 1
# Copyright (c) 2005 Marc Espie <espie@@openbsd.org>
@


1.9
log
@commit really old stuff that lets pkg_mklocatedb record
pkgpath/pkgnames/both.
@
text
@d36 1
a36 1
set_usage('pkg_mklocatedb [-anPq] [-r release] [-p portstree ] [-s src] [-x X11src] [pkg-name [...]]');
@


1.8
log
@completely uniform setup
@
text
@d36 1
a36 1
set_usage('pkg_mklocatedb [-nPq] [-r release] [-p portstree ] [-s src] [-x X11src] [pkg-name [...]]');
d38 1
a38 1
our ($opt_n, $opt_q, $opt_s, $opt_x, $opt_r, $opt_p, $opt_P);
d44 3
a46 1
	if ($opt_P) {
d59 3
a61 1
	if ($opt_P) {
d71 1
a71 1
	getopts('nqs:x:r:p:P');
@


1.7
log
@print stuff to the correct file handle
@
text
@d53 13
d87 1
d93 1
a93 1
					print $fh "$set$rev:$e\n";
d101 1
d107 1
a107 1
					print $fh "$set$rev:$e\n";
@


1.6
log
@simpler/better progress print
@
text
@d79 1
a79 1
					print "$set$rev:$e\n";
d92 1
a92 1
					print "$set$rev:$e\n";
d111 1
a111 1
				print "$set:$name\n";
@


1.5
log
@-P option: prepend pkgpath instead of pkgname.
-p option: use the continuation code from OpenBSD::PackingList in a sneaky
way, so that we can read all packing-list contents in one go from a
make print-plist-contents in /usr/ports.

Allows building a located database from the ports tree without needing to
build any packages.
@
text
@d43 1
d45 1
a45 1
		return $plist->{extrainfo}->{subdir};
d47 1
a47 1
		return $plist->pkgname();
d49 2
a143 1
		print STDERR "$pkgname\n" unless $opt_q;
a148 1
		print STDERR "$pkgname\n" unless $opt_q;
@


1.4
log
@use grabPlist, avoid getting anything else.
@
text
@d36 1
a36 1
set_usage('pkg_mklocatedb -nq [-r release] [-s src] [-x X11src] [pkg-name [...]]');
d38 11
a48 1
our ($opt_n, $opt_q, $opt_s, $opt_x, $opt_r);
d51 1
a51 1
	getopts('nqs:x:r:');
a114 2
			
		
d116 24
a139 1
if (@@ARGV==0) {
d143 1
a143 1
		$plist->visit('print_name', $fh, $plist->pkgname());
d150 1
a150 1
		$plist->visit('print_name', $fh, $plist->pkgname());
@


1.3
log
@use `pkg-name' rather than `pkgname' here, for consistency with other
pkg_* bits;

ok espie@@
@
text
@d117 2
a118 5
		my $true_package = OpenBSD::PackageLocator->find($pkgname);
		next unless $true_package;
		my $dir = $true_package->info();
		$true_package->close();
		my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
a119 1
		rmtree($dir);
@


1.2
log
@allow pkg_mklocatedb to look into src and X11 sets as well.
`no objection' naddy@@
@
text
@d36 1
a36 1
set_usage('pkg_mklocatedb -nq [-r release] [-s src] [-x X11src] [pkgname ...]');
@


1.1
log
@New command: pkg_mklocatedb, that can be used to create locate(1)-style
databases for packages (duh, isn't that obvious from the name ?)

Tweaks based on comments from naddy/jmc.
@
text
@d36 1
a36 1
set_usage('pkg_mklocatedb -nq [pkgname ...]');
d38 1
a38 1
our ($opt_n, $opt_q);
d41 1
a41 1
	getopts('nq');
d54 53
@

