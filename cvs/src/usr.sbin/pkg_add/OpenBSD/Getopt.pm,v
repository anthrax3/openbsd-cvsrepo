head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.20
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.14
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.16
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.12
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.10
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2012.04.10.16.57.12;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.08.11.32.38;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.31.16.27.21;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.29.22.50.17;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.15.18.51.44;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@prevent dpb trace handler from getting in the way of normal usage error reports.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD$
#
# Copyright (c) 2006 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# This is inspired by Getopt::Std, except for the ability to invoke subs
# on options.

use strict;
use warnings;

package OpenBSD::Getopt;
require Exporter;

our @@ISA = qw(Exporter);
our @@EXPORT = qw(getopts);

sub handle_option
{
	my ($opt, $hash, $params) = @@_;

	if (defined $hash->{$opt} and ref($hash->{$opt}) eq 'CODE') {
		&{$hash->{$opt}}($params);
	} else {
		no strict "refs";
		no strict "vars";

		if (defined $params) {
			${"opt_$opt"} = $params;
			$hash->{$opt} = $params;
		} else {
			${"opt_$opt"}++;
			$hash->{$opt}++;
		}
		push(@@EXPORT, "\$opt_$opt");
	}
}

sub getopts($;$)
{
    my ($args, $hash) = @@_;

    $hash = {} unless defined $hash;
    local @@EXPORT;

    while ($_ = shift @@ARGV) {
    	last if /^--$/o;
    	unless (m/^-(.)(.*)/so) {
		unshift @@ARGV, $_;
		last;
	}
	my ($opt, $other) = ($1, $2);
	if ($args =~ m/\Q$opt\E(\:?)/) {
		if ($1 eq ':') {
			if ($other eq '') {
				die "no argument for option -$opt" unless @@ARGV;
				$other = shift @@ARGV;
			}
			handle_option($opt, $hash, $other);
		} else {
			handle_option($opt, $hash);
			if ($other ne '') {
				$_ = "-$other";
				redo;
			}
		}
	} else {
		delete $SIG{__DIE__};
		die "Unknown option -$opt";
	}
    }
    local $Exporter::ExportLevel = 1;
    import OpenBSD::Getopt;
    return $hash;
}

1;
@


1.11
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d80 1
@


1.10
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.9
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.8
log
@whitespace cleanup
@
text
@@


1.7
log
@whitespace fixes
@
text
@@


1.6
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d51 1
a51 1
sub getopts($;$) 
@


1.5
log
@let GetOpt count how many times it sees an option, removes special case
for -v, and allow other fun possibilities.
@
text
@d20 4
a23 1
#
a25 2
use strict;
use warnings;
@


1.4
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d2 1
a2 1
# $OpenBSD: Getopt.pm,v 1.3 2006/07/31 16:27:21 espie Exp $
a32 1
	$params = 1 unless defined $params;
d39 7
a45 1
		${"opt_$opt"} = $params;
a46 1
		$hash->{$opt} = $params;
@


1.3
log
@add missing licence info.

use strict/warning where applicable, and fix relevant warnings.
@
text
@d2 1
a2 1
# $OpenBSD$
d54 2
a55 2
    	last if /^--$/;
    	unless (m/^-(.)(.*)/s) {
@


1.2
log
@make Getopt show full option name.
noticed by deraadt@@
@
text
@d1 20
d23 2
d26 2
a27 2
@@ISA = qw(Exporter);
@@EXPORT = qw(getopts);
d37 3
d60 1
a60 1
	if ($args =~ m/\Q$opt\E(\:)?/) {
@


1.1
log
@new getopt module, that allows for option-specific processing, so that
for instance, pkg_create -Dvar=value -Dvar2=value2 will work.
@
text
@d38 1
a38 1
				die "no argument for option $opt" unless @@ARGV;
d50 1
a50 1
		die "Unknown option $opt";
@

