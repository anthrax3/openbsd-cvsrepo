head	1.21;
access;
symbols
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.17.0.18
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.16
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.12
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.10
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.8
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.6
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@# @;


1.21
date	2016.06.24.14.20.49;	author espie;	state Exp;
branches;
next	1.20;
commitid	RsQjT09DQWwZsnkc;

1.20
date	2015.01.30.11.42.55;	author espie;	state Exp;
branches;
next	1.19;
commitid	cmEQoqBSBCDfR7gW;

1.19
date	2014.12.29.07.37.27;	author jasper;	state Exp;
branches;
next	1.18;
commitid	OaI4PTycY3dGSGwx;

1.18
date	2014.11.29.10.42.51;	author espie;	state Exp;
branches;
next	1.17;
commitid	XiRgNGt76qJ9BWZO;

1.17
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2009.11.28.09.41.14;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.17.10.17.21;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.15.17.42.29;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.04.12.18.39;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.17.15.34.15;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.17.09.58.20;	author bernd;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.04.11.31.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.21.19.18.25;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.04.22.47.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.21
log
@make use of former changes. If list is higher than display go thru more.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Interactive.pm,v 1.20 2015/01/30 11:42:55 espie Exp $
#
# Copyright (c) 2005-2007 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

use strict;
use warnings;

package OpenBSD::Interactive;

sub new
{
	my ($class, $state, $level) = @@_;
	bless {
	    state => $state,
	    always => 0,
	    level => $level,
	}, $class;
}

sub ask_list
{
	my ($self, $prompt, @@values) = @@_;
	if ($self->{always}) {
		return $values[0];
	}
	my ($fh, $pid);
	if ($self->{state}->height <= @@values + 1) {
		$pid = open($fh, "|-", "more", "-ce");
	}

	$fh //= \*STDERR;

	$self->{state}->fhsay($fh, '#1', $prompt);
	my $i = 0;
	for my $v (@@values) {
		$self->{state}->fhsay($fh, "#1\t#2: #3", 
		    $i == 0 ? "a" : "", $i, $v);
		$i++;
	}
	if (defined $pid) {
		close($fh);
		waitpid $pid, 0;
	}
LOOP:
	$self->{state}->errprint("Your choice: ");
	my $result = <STDIN>;
	unless (defined $result) {
		$self->{state}->errsay("");
		return $values[0];
	}
	chomp $result;
	if ($result eq '') {
		return $values[0];
	}
	if ($result eq 'a') {
		$self->{always} = 1;
		return $values[0];
	}
	if ($result =~ m/^\d+$/o) {
		if ($result >= 0 && $result < @@values) {
			return $values[$result];
		}
		$self->{state}->errsay("invalid numeric value !");
		goto LOOP;
	}
	if (grep { $result eq $_ } @@values) {
		return $result;
	} else {
		$self->{state}->errsay("Ambiguous value !");
		goto LOOP;
	}
}

sub confirm
{
	my ($self, $prompt, $yesno) = @@_;
	if ($self->{always}) {
		return 1;
	}
LOOP2:
	$self->{state}->errprint("#1 ? [#2/a] ", 
	    $prompt, $yesno ? "Y/n" : "y/N");

	my $result = <STDIN>;
	unless(defined $result) {
		$self->{state}->errsay("");
		return $yesno;
	}
	chomp $result;
	$result =~ s/\s+//go;
	$result =~ tr/A-Z/a-z/;
	if ($result eq 'yes' or $result eq 'y') {
		return 1;
	}
	if ($result eq 'no' or $result eq 'n') {
		return 0;
	}
	if ($result eq 'a') {
		$self->{always} = 1;
		return 1;
	}
	if ($result eq '') {
		return $yesno;
	}
	$self->{state}->errsay("Ambiguous answer");
	goto LOOP2;
}

sub is_interactive
{
	return shift->{level};
}

1;
@


1.20
log
@Fix the default interactive level to install the "default" dependencies.
Actually testing it caused me to write correct (and simpler) code...
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.19 2014/12/29 07:37:27 jasper Exp $
d38 6
d45 1
a45 1
	$self->{state}->errsay('#1', $prompt);
d48 1
a48 1
		$self->{state}->errsay("#1\t#2: #3", 
d51 4
@


1.19
log
@re-add missing space in confirm prompt that got lost in -r1.18

ok espie@@
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.18 2014/11/29 10:42:51 espie Exp $
d24 1
a24 1
	my ($class, $state) = @@_;
d28 1
d113 1
a113 1
	return 1;
@


1.18
log
@simplify the interactive code into its own little object with simpler
interface, so that most is it interactive tests vanish from the main
program.
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.17 2010/12/24 09:04:14 espie Exp $
d82 1
a82 1
	$self->{state}->errprint("#1 ?[#2/a] ", 
@


1.17
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d22 8
a29 1
my $always = 0;
d33 2
a34 2
	my ($prompt, $interactive, @@values) = @@_;
	if (!$interactive || !-t STDIN || $always) {
d37 2
a38 1
	print STDERR $prompt, "\n";
d41 2
a42 1
		printf STDERR "%s\t%2d: %s\n", $i == 0 ? " a" : "" , $i, $v;
d46 1
a46 1
	print STDERR "Your choice: ";
d49 1
a49 1
		print STDERR "\n";
d57 1
a57 1
		$always = 1;
d64 1
a64 1
		print STDERR "invalid numeric value !\n";
d70 1
a70 1
		print STDERR "Ambiguous value !\n";
d77 2
a78 5
	my ($prompt, $default) = @@_;
	if (!-t STDIN) {
		return 0;
	}
	if ($always) {
d82 2
a83 1
	print STDERR $prompt, $default ? "? [Y/n/a] " : "? [y/N/a] ";
d87 2
a88 2
		print STDERR "\n";
		return $default;
d100 1
a100 1
		$always = 1;
d104 1
a104 1
		return $default;
d106 1
a106 1
	print STDERR "Ambiguous answer\n";
d108 5
@


1.16
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.15
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.14
log
@whitespace cleanup
@
text
@@


1.13
log
@whitespace fixes
@
text
@@


1.12
log
@add "always" to ask_list...
@
text
@@


1.11
log
@revamp interactive stuff: simplify (just one always for everything, per
theo suggestion. Also go through the "state" object which simplifies code
a great deal)
@
text
@d22 2
d27 1
a27 1
	if (!$interactive || !-t STDIN) {
d33 1
a33 1
		printf STDERR "\t%2d: %s\n", $i, $v;
d47 4
a64 2

my $always = 0;
@


1.10
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d60 1
a60 1
my $always = {};
d64 2
a65 2
	my ($prompt, $interactive, $default, $key) = @@_;
	if (!$interactive || !-t STDIN) {
d68 1
a68 1
	if (defined $key && $always->{$key}) {
d72 1
a72 2
	my $a = defined $key ? '/a' : '';
	print STDERR $prompt, $default ? "? [Y/n$a] " : "? [y/N$a] ";
d88 2
a89 2
	if (defined $key && $result eq 'a') {
		$always->{$key} = 1;
a96 20
}

sub choose1
{
	my ($pkgname, $interactive, @@l) = @@_;
	if (@@l == 0) {
	    print "Can't resolve $pkgname\n";
	} elsif (@@l == 1) {
		return $l[0];
	} elsif (@@l != 0) {
		if ($interactive) {
		    my $result = ask_list("Ambiguous: choose package for $pkgname", 1, ("<None>", @@l));
		    if ($result ne '<None>') {
			return $result;
		    }
		} else {
		    print "Ambiguous: $pkgname could be ", join(' ', @@l),"\n";
		}
	}
	return;
@


1.9
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.8 2007/04/15 17:42:29 espie Exp $
a15 1
#
@


1.8
log
@very minor cleanup
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.7 2007/04/15 10:17:29 espie Exp $
d46 1
a46 1
	if ($result =~ m/^\d+$/) {
d82 1
a82 1
	$result =~ s/\s+//g;
@


1.7
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.6 2007/02/04 12:18:39 espie Exp $
d82 1
a82 1
	$result =~ s/\s*//g;
d110 1
a110 1
		    my $result = OpenBSD::Interactive::ask_list("Ambiguous: choose package for $pkgname", 1, ("<None>", @@l));
@


1.6
log
@streamline messages for interactive mode, no need to repeat the same list
twice.
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.5 2006/11/17 15:34:15 espie Exp $
d4 1
a4 1
# Copyright (c) 2005 Marc Espie <espie@@openbsd.org>
@


1.5
log
@don't return undef, use plain return.
(return undef is only false in a scalar context)
found my perlcritic, one of the few issues I agree with...
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.4 2006/11/17 09:58:20 bernd Exp $
a108 1
		print "Ambiguous: $pkgname could be ", join(' ', @@l),"\n";
d110 1
a110 1
		    my $result = OpenBSD::Interactive::ask_list('Choose one package', 1, ("<None>", @@l));
d114 2
@


1.4
log
@Handle EOF in interactive mode. Report and initial diff from Antti Harri
via tech@@. Thanks!

ok espie@@
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.3 2006/03/04 11:31:18 espie Exp $
d117 1
a117 1
	return undef;
@


1.3
log
@reorganize code a little bit: Update.pm becomes Replace.pm (since it matches
the -r option), and the find_update code moves to Update.pm, so that it doesn't
get parsed if -u is not used.

Also make the has_new_sig and uses_old_libs local methods of PackingList,
as it is their natural API.

Reorg a few more routines so that they can be found by pkg_add and by
Update.pm.

May need to split off more stuff to avoid parsing everything...
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.2 2006/02/21 19:18:25 espie Exp $
d38 4
d77 4
@


1.2
log
@add optional 3rd choice [y/N/a] for always, so that this question type
will always match.
@
text
@d2 1
a2 1
# $OpenBSD: Interactive.pm,v 1.1 2005/09/04 22:47:56 espie Exp $
d91 19
@


1.1
log
@* New -i interactive option, that can ask obnoxious questions.
* move the signature code to a packing-list method, prepend the pkgname.
* depend on distant listings, cache these systematically.
* cut the PKG_PATH at :/ systematically, much simpler than parsing URLs.
People should get used to trailing /s.
* let pkg_add -u actually run the update.
* check for signature in more places, for instance, let pkg_add installed_stuff
be a void operation.
* grab enough stuff during updates to check signatures, so that pkg_add -u
can report updates that are not needed right away, instead of waiting
for the more confusing `trying to update'
* beginning of @@module support.
* @@pkgpath support, including updates.
* systematically expand stems when applicable.
* use visitors systematically in pkg_info.
* pkg_info -S reports signature.
* remove hardcoding of categories in PackingList, so that future modules
will be able to expand them.
* add @@updateset and @@incompatibility keywords.
@
text
@d2 1
a2 1
# $OpenBSD$
d57 2
d61 1
a61 1
	my ($prompt, $interactive, $default) = @@_;
d65 3
d69 2
a70 1
	print STDERR $prompt, $default ? '? [Y/n] ' : '? [y/N] ';
d81 4
@

