head	1.5;
access;
symbols
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2014.08.27.18.40.03;	author kspillner;	state dead;
branches;
next	1.4;
commitid	634hl9204nK0ovPn;

1.4
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2014.01.09.20.20.01;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2014.01.07.01.29.17;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.06.13.05.52;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Rename Persistant to Persistent.

sure espie@@
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Persistant.pm,v 1.4 2014/03/18 18:53:29 espie Exp $
#
# Copyright (c) 2003-2014 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::PackageRepository::Persistant;
our @@ISA=qw(OpenBSD::PackageRepository::Distant);

our %distant = ();

sub may_exist
{
	my ($self, $name) = @@_;
	my $l = $self->list;
	return grep {$_ eq $name } @@$l;
}

sub grab_object
{
	my ($self, $object) = @@_;

	my $cmdfh = $self->{cmdfh};
	my $getfh = $self->{getfh};

	print $cmdfh "ABORT\n";
	while (<$getfh>) {
		last if m/^ABORTED/o;
	}
	print $cmdfh "GET ", $self->{path}.$object->{name}.".tgz", "\n";
	close($cmdfh);
	$_ = <$getfh>;
	chomp;
	if (m/^ERROR:/o) {
		$self->{state}->fatal("transfer error: #1", $_);
	}
	if (m/^TRANSFER:\s+(\d+)/o) {
		my $buffsize = 10 * 1024;
		my $buffer;
		my $size = $1;
		my $remaining = $size;
		my $n;

		do {
			$n = read($getfh, $buffer,
				$remaining < $buffsize ? $remaining :$buffsize);
			if (!defined $n) {
				$self->{state}->fatal("Error reading: #1", $!);
			}
			$remaining -= $n;
			if ($n > 0) {
				syswrite STDOUT, $buffer;
			}
		} while ($n != 0 && $remaining != 0);
		exit(0);
	}
}

sub maxcount
{
	return 1;
}

sub opened
{
	my $self = $_[0];
	my $k = $self->{host};
	if (!defined $distant{$k}) {
		$distant{$k} = [];
	}
	return $distant{$k};
}

sub list
{
	my ($self) = @@_;
	if (!defined $self->{list}) {
		if (!defined $self->{controller}) {
			$self->initiate;
		}
		my $cmdfh = $self->{cmdfh};
		my $getfh = $self->{getfh};
		my $path = $self->{path};
		my $l = [];
		print $cmdfh "LIST $path\n";
		$_ = <$getfh>;
		if (!defined $_) {
			$self->{state}->fatal("Could not initiate #1 session",
			    $self->urlscheme);
		}
		chomp;
		if (m/^ERROR:/o) {
			$self->{state}->fatal("#1", $_);
		}
		if (!m/^SUCCESS:/o) {
			$self->{state}->fatal("Synchronization error");
		}
		while (<$getfh>) {
			chomp;
			last if $_ eq '';
			push(@@$l, $_);
		}
		$self->{list} = $l;
	}
	return $self->{list};
}

sub cleanup
{
	my $self = shift;
	if (defined $self->{controller}) {
		my $cmdfh = $self->{cmdfh};
		my $getfh = $self->{getfh};
		print $cmdfh "ABORT\nBYE\nBYE\n";
		CORE::close($cmdfh);
		CORE::close($getfh);
		waitpid($self->{controller}, 0);
	}
}

sub reinitialize
{
	my $self = shift;
	$self->initiate;
}

1;
@


1.4
log
@remove $_ usage that warns under perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: Persistant.pm,v 1.3 2014/01/09 20:20:01 espie Exp $
@


1.3
log
@bump copyright to 2014
@
text
@d2 1
a2 1
# $OpenBSD: Persistant.pm,v 1.2 2014/01/07 01:29:17 espie Exp $
a40 1
	my $_;
a99 1
		my $_;
@


1.2
log
@new method: reinitialize, for repositories with a sequential connection
that need a new connection if they're ever called from separate processes
simultaneously
@
text
@d2 1
a2 1
# $OpenBSD: Persistant.pm,v 1.1 2011/07/06 13:05:52 espie Exp $
d4 1
a4 1
# Copyright (c) 2003-2011 Marc Espie <espie@@openbsd.org>
@


1.1
log
@future code to handle HTTP 1.1 connection: need to establish a somewhat
persistant connection, will use the same client code for scp and http.
@
text
@d2 1
a2 1
# $OpenBSD: SCP.pm,v 1.26 2011/03/23 15:29:31 espie Exp $
d135 6
@

