head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.12
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10;
locks; strict;
comment	@# @;


1.12
date	2014.08.27.18.40.03;	author kspillner;	state Exp;
branches;
next	1.11;
commitid	634hl9204nK0ovPn;

1.11
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.19.18.09.41;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.19.17.27.43;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.18.21.09.17;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.18.20.47.28;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.18.20.21.40;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.18.20.09.29;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.18.20.03.12;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.18.19.42.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.12.10.29.20;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.06.13.05.52;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Rename Persistant to Persistent.

sure espie@@
@
text
@#! /usr/bin/perl
# ex:ts=8 sw=4:
# $OpenBSD: HTTP.pm,v 1.11 2014/03/18 18:53:29 espie Exp $
#
# Copyright (c) 2011 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::PackageRepository::Persistent;

package OpenBSD::PackageRepository::HTTP1;
our @@ISA = qw(OpenBSD::PackageRepository::Persistent);
sub urlscheme
{
	return 'http';
}

sub initiate
{
	my $self = shift;
	my ($rdfh, $wrfh);
	pipe($self->{getfh}, $wrfh) or die;
	pipe($rdfh, $self->{cmdfh}) or die;

	my $old =select $self->{getfh};
	$| = 1;
	select $self->{cmdfh};
	$| = 1;
	select $rdfh;
	$| = 1;
	select $wrfh;
	$| = 1;
	select $old;
	my $pid = fork();
	if ($pid == 0) {
		close($self->{getfh});
		close($self->{cmdfh});
#		close(STDOUT);
#		close(STDIN);
		open(STDOUT, '>&', $wrfh);
		open(STDIN, '<&', $rdfh);
		_Proxy::main($self);
	} else {
		close($rdfh);
		close($wrfh);
		$self->{controller} = $pid;
	}
}

package _Proxy::Header;

sub new
{
	my $class = shift;
	bless {}, $class;
}

sub code
{
	my $self = shift;
	return $self->{code};
}

package _Proxy::Connection;
sub new
{
	my ($class, $host, $port) = @@_;
	require IO::Socket::INET;
	my $o = IO::Socket::INET->new(
		PeerHost => $host,
		PeerPort => $port);
	my $old = select($o);
	$| = 1;
	select($old);
	bless {fh => $o, host => $host, buffer => ''}, $class;
}

sub send_header
{
	my ($o, $document, %extra) = @@_;
	my $crlf="\015\012";
	$o->print("GET $document HTTP/1.1", $crlf,
	    "Host: ", $o->{host}, $crlf);
	if (defined $extra{range}) {
		my ($a, $b) = @@{$extra{range}};
	    	$o->print("Range: bytes=$a-$b", $crlf);
	}
	$o->print($crlf);
}

sub get_header
{
	my $o = shift;
	my $l = $o->getline;
	if ($l !~ m,^HTTP/1\.1\s+(\d\d\d),) {
		return undef;
	}
	my $h = _Proxy::Header->new;
	$h->{code} = $1;
	while ($l = $o->getline) {
		last if $l =~ m/^$/;
		if ($l =~ m/^([\w\-]+)\:\s*(.*)$/) {
			$h->{$1} = $2;
		} else {
			print STDERR "unknown line: $l\n";
		}
	}
	if (defined $h->{'Content-Length'}) {
		$h->{length} = $h->{'Content-Length'}
	} elsif (defined $h->{'Transfer-Encoding'} && 
	    $h->{'Transfer-Encoding'} eq 'chunked') {
		$h->{chunked} = 1;
	}
	if (defined $h->{'Content-Range'} && 
	    $h->{'Content-Range'} =~ m/^bytes\s+(\d+)\-(\d+)\/(\d+)/) {
		($h->{start}, $h->{end}, $h->{size}) = ($1, $2, $3);
	}
	$o->{header} = $h;
	return $h;
}

sub getline
{
	my $self = shift;
	while (1) {
		if ($self->{buffer} =~ s/^(.*?)\015\012//) {
			return $1;
		}
		my $buffer;
		$self->{fh}->recv($buffer, 1024);
		$self->{buffer}.=$buffer;
    	}
}

sub retrieve
{
	my ($self, $sz) = @@_;
	while(length($self->{buffer}) < $sz) {
		my $buffer;
		$self->{fh}->recv($buffer, $sz - length($self->{buffer}));
		$self->{buffer}.=$buffer;
	}
	my $result= substr($self->{buffer}, 0, $sz);
	$self->{buffer} = substr($self->{buffer}, $sz);
	return $result;
}

sub retrieve_and_print
{
	my ($self, $sz, $fh) = @@_;
	my $result = substr($self->{buffer}, 0, $sz);
	print $fh $result;
	my $retrieved = length($result);
	if ($retrieved == $sz) {
		$self->{buffer} = substr($self->{buffer}, $sz);
		return;
	} else {
		$self->{buffer} = '';
	}
	while ($retrieved < $sz) {
		$self->{fh}->recv($result, $sz - $retrieved);
		print $fh $result;
		$retrieved += length($result);
	}
}

sub retrieve_chunked
{
	my $self = shift;
	my $result = '';
	while (1) {
		my $sz = $self->getline;
		if ($sz =~ m/^([0-9a-fA-F]+)/) {
			my $realsize = hex($1);
			last if $realsize == 0;
			$result .= $self->retrieve($realsize);
		}
	}
	return $result;
}

sub retrieve_response
{
	my ($self, $h) = @@_;

	if ($h->{chunked}) {
		return $self->retrieve_chunked;
	}
	if ($h->{length}) {
		return $self->retrieve($h->{length});
	}
	return undef;
}

sub retrieve_response_and_print
{
	my ($self, $h, $fh) = @@_;

	if ($h->{chunked}) {
		print $fh $self->retrieve_chunked;
	}
	if ($h->{length}) {
		$self->retrieve_and_print($h->{length}, $fh);
	}
}

sub print
{
	my ($self, @@l) = @@_;
#	print STDERR "Before print\n";
	if (!print {$self->{fh}} @@l) {
		print STDERR "network print failed with $!\n";
	}
#	print STDERR "After print\n";
}

package _Proxy;

my $pid;
my $token = 0;

sub batch(&)
{
	my $code = shift;
	if (defined $pid) {
		waitpid($pid, 0);
		undef $pid;
	}
	$token++;
	$pid = fork();
	if (!defined $pid) {
		print "ERROR: fork failed: $!\n";
	}
	if ($pid == 0) {
		&$code();
		exit(0);
	}
}

sub abort_batch()
{
	if (defined $pid) {
		kill HUP => $pid;
		waitpid($pid, 0);
		undef $pid;
	}
	print "\nABORTED $token\n";
}

sub get_directory
{
	my ($o, $dname) = @@_;
	local $SIG{'HUP'} = 'IGNORE';
	$o->send_header("$dname/");
	my $h = $o->get_header;
	if (!defined $h) {
		print "ERROR: can't decode header\n";
		exit 1;
	}

	my $r = $o->retrieve_response($h);
	if (!defined $r) {
		print "ERROR: can't decode response\n";
	}
	if ($h->code != 200) {
			print "ERROR: code was ", $h->code, "\n";
			exit 1;
	}
	print "SUCCESS: directory $dname\n";
	for my $pkg ($r =~ m/\<A\s+HREF=\"(.+?)\.tgz\"\>/gio) {
		$pkg = $1 if $pkg =~ m|^.*/(.*)$|;
		# decode uri-encoding; from URI::Escape
		$pkg =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;
		print $pkg, "\n";
	}
	print "\n";
	return;
}

use File::Basename;

sub get_file
{
	my ($o, $fname) = @@_;

	my $bailout = 0;
	$SIG{'HUP'} = sub {
		$bailout++;
	};
	my $first = 1;
	my $start = 0;
	my $end = 2000;
	my $total_size = 0;

	do {
		$end *= 2;
		$o->send_header($fname, range => [$start, $end-1]);
		my $h = $o->get_header;
		if (!defined $h) {
			print "ERROR\n";
			exit 1;
		}
		if (defined $h->{size}) {
			$total_size = $h->{size};
		}
		if ($h->code != 200 && $h->code != 206) {
			print "ERROR: code was ", $h->code, "\n";
			my $r = $o->retrieve_response($h);
			exit 1;
		}
		if ($first) {
			print "TRANSFER: $total_size\n";
			$first = 0;
		}
		$o->retrieve_response_and_print($h, \*STDOUT);
		$start = $end;
		if ($bailout) {
			exit 0;
		}
	} while ($end < $total_size);
}

sub main
{
	my $self = shift;
	my $o = _Proxy::Connection->new($self->{host}, "www");
	while (<STDIN>) {
		chomp;
		if (m/^LIST\s+(.*)$/o) {
			my $dname = $1;
			batch(sub {get_directory($o, $dname);});
		} elsif (m/^GET\s+(.*)$/o) {
			my $fname = $1;
			batch(sub { get_file($o, $fname);});
		} elsif (m/^BYE$/o) {
			exit(0);
		} elsif (m/^ABORT$/o) {
			abort_batch();
		} else {
			print "ERROR: Unknown command\n";
		}
	}
}

1;
@


1.11
log
@remove $_ usage that warns under perl 5.18
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.10 2011/07/19 18:09:41 espie Exp $
d22 1
a22 1
use OpenBSD::PackageRepository::Persistant;
d25 1
a25 1
our @@ISA = qw(OpenBSD::PackageRepository::Persistant);
@


1.10
log
@mostly done
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.9 2011/07/19 17:27:43 espie Exp $
d107 2
a108 2
	my $_ = $o->getline;
	if (!m,^HTTP/1\.1\s+(\d\d\d),) {
d113 3
a115 3
	while ($_ = $o->getline) {
		last if m/^$/;
		if (m/^([\w\-]+)\:\s*(.*)$/) {
d118 1
a118 1
			print STDERR "unknown line: $_\n";
a338 1
	my $_;
@


1.9
log
@clean-up a few things
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.8 2011/07/18 21:09:17 espie Exp $
d22 4
a25 1
package OpenBSD::Repository::HTTP;
d35 12
a46 2
	pipe($self->{getfh}, $rdfh);
	pipe($wrfh, $self->{cmdfh});
d51 2
a52 2
		close(STDOUT);
		close(STDIN);
d161 19
d208 12
d256 1
a256 1
		kill 1, $pid;
a306 1
	open my $fh, ">", basename($fname);
d328 1
a328 5
		my $r = $o->retrieve_response($h);
		if (!defined $r) {
			print "ERROR: can't decode response\n";
		}
		print $fh $r;
d339 1
@


1.8
log
@most of the pieces are there... still need to open a new connection if
server drops us.
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.7 2011/07/18 20:47:28 espie Exp $
d50 14
d78 44
d167 2
a168 2
	if (defined $h->{'Content-Length'}) {
		return $self->retrieve($h->{'Content-Length'});
d170 2
a171 2
	if (($h->{'Transfer-Encoding'}//'') eq 'chunked') {
		return $self->retrieve_chunked;
d179 5
a183 1
	print {$self->{fh}} @@l;
d223 6
a228 4
	my $crlf="\015\012";
	$o->print("GET $dname/ HTTP/1.1", $crlf,
	    "Host: ", $o->{host}, $crlf, $crlf);
	# get header
a229 16
	my $_ = $o->getline;
	if (!m,^HTTP/1\.1\s+(\d\d\d),) {
		print "ERROR\n";
		return;
	}
	my $code = $1;
	my $h = {};
	while ($_ = $o->getline) {
		last if m/^$/;
		if (m/^([\w\-]+)\:\s*(.*)$/) {
			print STDERR "$1 => $2\n";
			$h->{$1} = $2;
		} else {
			print STDERR "unknown line: $_\n";
		}
	}
d234 2
a235 2
	if ($code != 200) {
			print "ERROR: code was $code\n";
a254 1
	my $crlf="\015\012";
d267 3
a269 7
		$o->print("GET $fname HTTP/1.1", $crlf,
		    "Host: ", $o->{host}, $crlf,
		    "Range: bytes=",$start, "-", $end-1, $crlf, $crlf);
		# get header

		my $_ = $o->getline;
		if (!m,^HTTP/1\.1\s+(\d\d\d),) {
d273 7
a279 14
		my $code = $1;
		my $h = {};
		while ($_ = $o->getline) {
			last if m/^$/;
			if (m/^([\w\-]+)\:\s*(.*)$/) {
				print STDERR "$1 => $2\n";
				$h->{$1} = $2;
			} else {
				print STDERR "unknown line: $_\n";
			}
		}
		if (defined $h->{'Content-Range'} && $h->{'Content-Range'} =~ 
			m/^bytes\s+\d+\-\d+\/(\d+)/) {
				$total_size = $1;
a287 4
		}
		if ($code != 200 && $code != 206) {
			print "ERROR: code was $code\n";
			exit 1;
@


1.7
log
@a little better, but not yet ready
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.6 2011/07/18 20:21:40 espie Exp $
d58 3
d160 1
d188 1
a188 1
			return;
d201 2
d208 4
d214 1
a214 1
	my $end = 4000;
d216 1
d219 1
d228 1
a228 1
			return;
a229 1
		$end *= 2;
d255 1
a255 1
			return;
d257 1
a257 1
		print $r;
d259 3
a284 51
}


sub todo
{
	my ($o, $file) = @@_;
	my $crlf="\015\012";
	open my $fh, '>', $file;

	my $start = 0;
	my $end = 4000;
	my $total_size = 0;

	do {
		$end *= 2;
		$o->print("GET /pub/OpenBSD/snapshots/packages/amd64/$file HTTP/1.1$crlf",
    "Host: www.w3.org$crlf",
		"Range: bytes=",$start, "-", $end-1, $crlf, $crlf);

		# get header

		my $_ = $o->getline;
		if (m,^HTTP/1\.1\s+(\d\d\d),) {
			my $code = $1;
			print "Code: $code\n";
		} else {
			print $_, "\n";
		}
		my $h = {};
		while ($_ = $o->getline) {
			last if m/^$/;
			if (m/^([\w\-]+)\:\s*(.*)$/) {
				print "$1 => $2\n";
				$h->{$1} = $2;
			} else {
				print "unknown line: $_\n";
			}
		}

		if (defined $h->{'Content-Range'} && $h->{'Content-Range'} =~ 
			m/^bytes\s+\d+\-\d+\/(\d+)/) {
				$total_size = $1;
		}
		print "END OF HEADER\n";

		if (defined $h->{'Content-Length'}) {
			my $v = $o->retrieve($h->{'Content-Length'});
			print $fh $v;
		}
		$start = $end;
	} while ($end < $total_size);
@


1.6
log
@skeleton for grabbing files...
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.5 2011/07/18 20:09:29 espie Exp $
a105 3
	if ($h->{'Transfer-Encoding'} eq 'chunked') {
		return $self->retrieve_chunked;
	}
d109 3
d200 1
d202 43
a244 18
	$o->print("GET $fname HTTP/1.1", $crlf,
	    "Host: ", $o->{host}, $crlf, $crlf);
	# get header

	my $_ = $o->getline;
	if (!m,^HTTP/1\.1\s+(\d\d\d),) {
		print "ERROR\n";
		return;
	}
	my $code = $1;
	my $h = {};
	while ($_ = $o->getline) {
		last if m/^$/;
		if (m/^([\w\-]+)\:\s*(.*)$/) {
			print STDERR "$1 => $2\n";
			$h->{$1} = $2;
		} else {
			print STDERR "unknown line: $_\n";
d246 3
a248 9
	}
	my $r = $o->retrieve_response($h);
	if (!defined $r) {
		print "ERROR: can't decode response\n";
	}
	if ($code != 200) {
		print "ERROR: code was $code\n";
		return;
	}
@


1.5
log
@Also handle normal Content-Length
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.4 2011/07/18 20:03:12 espie Exp $
d197 33
d242 1
a242 13
			batch(sub {
				if (open(my $fh, '<', $fname)) {
					my $size = (stat $fh)[7];
					print "TRANSFER: $size\n";
					my $buffer = '';
					while (read($fh, $buffer, 1024 * 1024) > 0) {
						print $buffer;
					}
					close($fh);
				} else {
					print "ERROR: bad file $fname $!\n";
				}
			});
d254 1
a254 1
sub get_file
@


1.4
log
@chunked directory transfers
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.3 2011/07/18 19:42:32 espie Exp $
d102 13
d178 5
a182 13
	if ($h->{'Transfer-Encoding'} eq 'chunked') {
		my $buffer = $o->retrieve_chunked;
		if ($code == 200) {
			print "SUCCESS: directory $dname\n";
			for my $pkg ($buffer =~ m/\<A\s+HREF=\"(.+?)\.tgz\"\>/gio) {
				$pkg = $1 if $pkg =~ m|^.*/(.*)$|;
				# decode uri-encoding; from URI::Escape
				$pkg =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;
				print $pkg, "\n";
			}
			print "\n";
			return;
		} else {
a184 3
		}
	} else {
		print "ERROR: can't decode non-chunked\n";
d186 9
@


1.3
log
@a few typos, nothing working yet... needs to parse Chunked transfer
@
text
@d3 1
a3 1
# $OpenBSD: HTTP.pm,v 1.2 2011/07/12 10:29:20 espie Exp $
d87 15
d151 1
a151 1
		print "ABORTED\n";
a154 4
	if ($code != 200) {
		print "ABORTED";
		return;
	}
d159 1
a159 1
			print "$1 => $2\n";
d162 1
a162 1
			print "unknown line: $_\n";
d165 19
d185 1
@


1.2
log
@wip, definitely not finished (and not used) yet
@
text
@d3 1
a3 1
# $OpenBSD$
d32 2
a33 2
	pipe($self->{getfh}, $h1);
	pipe($h2, $self->{cmdfh});
d50 1
a50 1
package _Proxy::connection;
d58 1
a58 1
	bless {fh => $o, buffer => ''}, $class;
d126 30
d164 1
a164 16
			batch(sub {
				my $d;
				if (opendir($d, $dname)) {
					print "SUCCESS: directory $dname\n";
				} else {
					print "ERROR: bad directory $dname $!\n";
				}
				while (my $e = readdir($d)) {
					next if $e eq '.' or $e eq '..';
					next unless $e =~ m/(.+)\.tgz$/;
					next unless -f "$dname/$e";
					print "$1\n";
				}
				print "\n";
				closedir($d);
			});
d240 2
@


1.1
log
@future code to handle HTTP 1.1 connection: need to establish a somewhat
persistant connection, will use the same client code for scp and http.
@
text
@d22 203
a224 2
# to be done
1;
@

