head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.18
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.16
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.14
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.6
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2014.02.04.18.11.36;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.05.07.15.55.36;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.05.10.21.47;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.24.10.31.59;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.09.07.26.01;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.22.20.38.44;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.11.12.25.38;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@no functional change (for now). Make things more debuggable by subclassing
PackingList into types that describe what info they've been limited to.

Long term (post 5.5) some operations will be restricted, such as e.g.,
only committing lists to installation if they're "full", or only checking
signatures for same.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: OldLibs.pm,v 1.11 2012/05/07 15:55:36 espie Exp $
#
# Copyright (c) 2004-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF

use strict;
use warnings;

package OpenBSD::PackingElement;

sub mark_lib
{
}

sub unmark_lib
{
}

sub separate_element
{
	my ($self, $libs, $c1, $c2) = @@_;
	$c2->{$self} = 1;
}

sub special_deep_copy
{
	my ($self, $copy, $h) = @@_;
	$self->clone->add_object($copy) if defined $h->{$self};
}

package OpenBSD::PackingElement::Meta;

sub separate_element
{
	my ($self, $libs, $c1, $c2) = @@_;
	$c1->{$self} = 1;
	$c2->{$self} = 1;
}

package OpenBSD::PackingElement::DigitalSignature;
sub separate_element
{
	my ($self, $libs, $c1, $c2) = @@_;
	$c2->{$self} = 1;
}

package OpenBSD::PackingElement::State;

sub separate_element
{
	&OpenBSD::PackingElement::Meta::separate_element;
}

package OpenBSD::PackingElement::Depend;
sub separate_element
{
	&OpenBSD::PackingElement::separate_element;
}

package OpenBSD::PackingElement::SpecialFile;
sub separate_element
{
	&OpenBSD::PackingElement::separate_element;
}

package OpenBSD::PackingElement::FCONTENTS;
sub special_deep_copy
{
}

package OpenBSD::PackingElement::Lib;
use File::Basename;

sub mark_lib
{
	my ($self, $libs, $libpatterns) = @@_;
	my $libname = $self->fullname;
	my ($stem, $major, $minor, $dir) = $self->parse($libname);
	if (defined $stem) {
		$libpatterns->{$stem}->{$dir} = [$major, $minor, $libname];
	}
	$libs->{$libname} = 1;
}

sub separate_element
{
	my ($self, $libs, $c1, $c2) = @@_;
	if ($libs->{$self->fullname}) {
		$c1->{$self} = 1;
	} else {
		$c2->{$self} = 1;
	}
}

sub unmark_lib
{
	my ($self, $libs, $libpatterns) = @@_;
	my $libname = $self->fullname;
	my ($stem, $major, $minor, $dir) = $self->parse($libname);
	if (defined $stem) {
		my $p = $libpatterns->{$stem}->{$dir};
		if (defined $p && $p->[0] == $major && $p->[1] <= $minor) {
			my $n = $p->[2];
			delete $libs->{$n};
		}
	}
	delete $libs->{$libname};
}

sub enforce_dir
{
	my ($self, $path, $copy, $dirs) = @@_;
	my $d = dirname($path);
	my $localbase = $copy->localbase;

	if ($d eq "$localbase/lib" || $d eq $localbase || $d eq '/') {
		return;
	}
	if ($dirs->{$d}) {
		return;
	}
	$dirs->{$d} = 1;
	$self->enforce_dir($d, $copy, $dirs);
	my $cwd = $self->cwd;
	$d =~ s/^\Q$cwd\E\///;
	OpenBSD::PackingElement::Dir->add($copy, $d);
}

sub special_deep_copy
{
	my ($self, $copy, $h, $dirs) = @@_;
	$self->enforce_dir($self->fullname, $copy, $dirs);
	$self->SUPER::special_deep_copy($copy, $h, $dirs);
}

package OpenBSD::OldLibs;
use OpenBSD::RequiredBy;
use OpenBSD::PackageInfo;

sub split_some_libs
{
	my ($plist, $libs) = @@_;
	my $c1 = {};
	my $c2 = {};
	$plist->separate_element($libs, $c1, $c2);
	my $p1 = OpenBSD::PackingList::OldLibs->new;
	$p1->set_infodir($plist->infodir);
	$plist->special_deep_copy($p1, $c1, {});
	my $p2 = $plist->make_shallow_copy($c2);
	return ($p1, $p2);
}

# create a packing-list with only the libraries we want to keep around.
sub split_libs
{
	my ($plist, $to_split) = @@_;

	(my $splitted, $plist) = split_some_libs($plist, $to_split);

	require OpenBSD::PackageInfo;

	$splitted->set_pkgname(OpenBSD::PackageInfo::libs_package($plist->pkgname));

	if (defined $plist->{'no-default-conflict'}) {
		# we conflict with the package we just removed...
		OpenBSD::PackingElement::Conflict->add($splitted, $plist->pkgname);
	} else {
		my $stem = OpenBSD::PackageName::splitstem($plist->pkgname);
		OpenBSD::PackingElement::Conflict->add($splitted, $stem."-*");
	}
	return ($plist, $splitted);
}

sub adjust_depends_closure
{
	my ($oldname, $plist, $state) = @@_;

	$state->say("Packages that depend on those shared libraries:")
	    if $state->verbose >= 3;

	my $write = OpenBSD::RequiredBy->new($plist->pkgname);
	for my $pkg (OpenBSD::RequiredBy->compute_closure($oldname)) {
		$state->say("\t#1", $pkg) if $state->verbose >= 3;
		$write->add($pkg);
		my $r = OpenBSD::Requiring->new($pkg)->add($plist->pkgname);
		if ($oldname =~ m/^\.libs\d*\-/o) {
			$r->delete($oldname);
		}
	}
}

sub do_save_libs
{
	my ($o, $libs, $state) = @@_;

	my $oldname = $o->pkgname;

	($o->{plist}, my $stub_list) = split_libs($o->plist, $libs);
	my $stub_name = $stub_list->pkgname;
	my $dest = installed_info($stub_name);
	$state->say("Keeping them in #1", $stub_name)
	    if $state->verbose >= 2;


	if ($state->{not}) {
		require OpenBSD::SharedLibs;

		OpenBSD::SharedLibs::add_libs_from_plist($stub_list, $state);
		$stub_list->to_cache;
		$o->plist->to_cache;
	} else {
		mkdir($dest);
		open my $descr, '>', $dest.DESC;
		print $descr "Stub libraries for $oldname\n";
		close $descr;
		my $f = OpenBSD::PackingElement::FDESC->add($stub_list, DESC);
		$f->{ignore} = 1;
		$f->add_digest($f->compute_digest($dest.DESC));
		$stub_list->to_installation;
		$o->plist->to_installation;
	}
	add_installed($stub_name);

	OpenBSD::PkgCfl::register($stub_list, $state);

	adjust_depends_closure($oldname, $stub_list, $state);
}

sub save_libs_from_handle
{
	my ($o, $set, $state) = @@_;

	my $libs = {};
	my $p = {};

	$state->say("Looking for changes in shared libraries")
	    if $state->verbose >= 2;
	$o->plist->mark_lib($libs, $p);
	for my $n ($set->newer) {
		$n->plist->unmark_lib($libs, $p);
	}
	for my $n ($set->kept) {
		$n->plist->unmark_lib($libs, $p);
	}

	if (%$libs) {
		$state->say("Libraries to keep: #1",
		    join(",", sort(keys %$libs))) if $state->verbose >= 2;
		do_save_libs($o, $libs, $state);
	} else {
		$state->say("No libraries to keep") if $state->verbose >= 2;
	}
}

sub save
{
	my ($self, $set, $state) = @@_;

	for my $o ($set->older) {
		save_libs_from_handle($o, $set, $state);
	}
}

1;
@


1.11
log
@in the odd case we don't live under /usr/local, make sure we stop eventually
@
text
@d2 1
a2 1
# $OpenBSD: OldLibs.pm,v 1.10 2012/05/05 10:21:47 espie Exp $
d157 1
a157 1
	my $p1 = OpenBSD::PackingList->new;
@


1.10
log
@if the lib directory is not localbase->lib, we add directory entries to
the .libs* stuff.
@
text
@d2 1
a2 1
# $OpenBSD: OldLibs.pm,v 1.9 2010/12/24 10:31:59 espie Exp $
d127 1
a127 1
	if ($d eq "$localbase/lib" || $d eq $localbase) {
@


1.9
log
@pass state around.
@
text
@d2 1
a2 1
# $OpenBSD: OldLibs.pm,v 1.8 2010/12/24 09:04:14 espie Exp $
d36 6
d77 5
d83 2
d121 26
d157 3
a159 1
	my $p1 = $plist->make_deep_copy($c1);
@


1.8
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d178 1
a178 1
		OpenBSD::SharedLibs::add_libs_from_plist($stub_list);
@


1.7
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.6
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.5
log
@whitespace cleanup
@
text
@@


1.4
log
@ui changes: go thru a state object for most printouts
@
text
@d2 1
a2 1
# $OpenBSD: OldLibs.pm,v 1.3 2010/05/10 09:17:55 espie Exp $
@


1.3
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d153 1
a153 1
		$state->say("\t", $pkg) if $state->verbose >= 3;
d171 1
a171 1
	$state->say("Keeping them in $stub_name")
d217 1
a217 1
		$state->say("Libraries to keep: ",
@


1.2
log
@clean up the ProgressMeter code, create a specific class if a Term
is around.
start using stuff from termcap, specifically, cleareol, and move to hp.
use the full line when we can, cram 100% if we can.
(this should flicker much less on slow terminals).

clean-up the install-and-progress bits to be in progressmeter, this removes
some code.

have pkg_create follow the same pattern as the others, with a state.
This allows us to unify error messages a bit.
@
text
@d148 1
a148 1
	$state->say("Packages that depend on those shared libraries:") 
d171 1
a171 1
	$state->say("Keeping them in $stub_name") 
d206 1
a206 1
	$state->say("Looking for changes in shared libraries") 
d217 1
a217 1
		$state->say("Libraries to keep: ", 
@


1.1
log
@move the oldlibs code into its separate file, prior to fixing it.
allow replacement if it only touches partial or libs
@
text
@@

