head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.28
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.26
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.20
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.22
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.18
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.16
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2010.11.27.11.55.14;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.14.07.24.06;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.19.08.22.06;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.24.14.33.12;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@zap old-style .>= specs
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Build.pm,v 1.6 2010/11/14 07:24:06 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
use strict;
use warnings;

# the specs used during build are slightly different from the specs at
# runtime.
package OpenBSD::Library::Static;
our @@ISA = qw(OpenBSD::Library);
sub new
{
	my ($class, $dir, $stem) = @@_;
	bless {dir => $dir, stem => $stem}, $class;
}

sub no_match_dispatch
{
	my ($library, $spec, $base) = @@_;
	return $spec->no_match_static($library, $base);
}

sub to_string
{
	my $self = shift;
	return "$self->{dir}/lib$self->{stem}.a";
}

sub version { ".a" }

sub is_static { 1 }

sub is_better { 0 }

package OpenBSD::Library::Build;
our @@ISA = qw(OpenBSD::Library);

sub static
{ 'OpenBSD::Library::Static'; }

sub from_string
{
	my ($class, $filename) = @@_;
	if (my ($dir, $stem) = $filename =~ m/^(.*)\/lib([^\/]+)\.a$/o) {
		return $class->static->new($dir, $stem);
	} else {
		return $class->SUPER::from_string($filename);
	}
}

package OpenBSD::LibSpec;
sub no_match_static
{
	&OpenBSD::LibSpec::no_match_name;
}

sub findbest
{
	my ($spec, $repo, $base) = @@_;
	my $spec2 = OpenBSD::LibSpec::GT->new($spec->{dir}, $spec->{stem},
	    0, 0);
	my $r = $spec2->lookup($repo, $base);
	my $best;
	for my $candidate (@@$r) {
		if (!defined $best || $candidate->is_better($best)) {
			$best = $candidate;
		}
	}
	if (defined $best) {
		if ($best->is_static) {
			return $best;
		}
		if ($spec->match($best, $base)) {
			return $best;
		}
	}
	return undef;
}

package OpenBSD::LibSpec::GT;
our @@ISA = qw(OpenBSD::LibSpec);
sub no_match_major
{
	my ($spec, $library) = @@_;
	return $spec->major > $library->major;
}

sub to_string
{
	my $self = shift;
	return $self->key.">=".$self->major.".".$self->minor;

}


package OpenBSD::LibSpec::Build;
our @@ISA = qw(OpenBSD::LibSpec);

sub new_from_string
{
	my ($class, $string) = @@_;

	$string =~ s/\.$//;
	if (my ($stem, $strict, $major, $minor) = $string =~ m/^(.*?)(\>?)\=(\d+)\.(\d+)$/o) {
		return $class->new_object($stem, $strict, $major, $minor);
	} elsif (($stem, $strict, $major) = $string =~ m/^(.*?)(\>?)\=(\d+)$/o) {
		return $class->new_object($stem, $strict, $major, 0);
	} else {
		return $class->new_object($string, '>', 0, 0);
	}
}

sub new_object
{
	my ($class, $stem, $strict, $major, $minor) = @@_;
	my $n = $strict eq '' ? "OpenBSD::LibSpec" : "OpenBSD::LibSpec::GT";
	return $n->new_with_stem($stem, $major, $minor);
}

1;
@


1.6
log
@simplify slightly, make the . optional
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.5 2010/06/30 10:51:04 espie Exp $
d118 1
a118 1
	if (my ($stem, $strict, $major, $minor) = $string =~ m/^(.*?)\.?(\>?)\=(\d+)\.(\d+)$/o) {
d120 1
a120 1
	} elsif (($stem, $strict, $major) = $string =~ m/^(.*?)\.?(\>?)\=(\d+)$/o) {
@


1.5
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
d105 1
a105 1
	return join('.', $self->key, ">=".$self->major, $self->minor);
d118 1
a118 1
	if (my ($stem, $strict, $major, $minor) = $string =~ m/^(.*)\.(\>?)\=(\d+)\.(\d+)$/o) {
d120 1
a120 1
	} elsif (($stem, $strict, $major) = $string =~ m/^(.*)\.(\>?)\=(\d+)$/o) {
@


1.4
log
@whitespace cleanup
@
text
@@


1.3
log
@let build libspec match as they should.
namely, if a shared lib exists, then a static library should not match
if the version number is not okay.
problem noticed by sthen@@, okay sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.2 2010/05/10 09:17:55 espie Exp $
d74 1
a74 1
	my $spec2 = OpenBSD::LibSpec::GT->new($spec->{dir}, $spec->{stem}, 
@


1.2
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d69 23
@


1.1
log
@pieces required for resolve-lib (reuse code for consistency)
@
text
@d44 1
a44 1
	
@

