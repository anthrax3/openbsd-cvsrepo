head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.4
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.12
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.16
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.12
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.10
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.8
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.6
	OPENBSD_5_0:1.15.0.4
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@# @;


1.18
date	2017.09.16.12.04.13;	author espie;	state Exp;
branches;
next	1.17;
commitid	iXoLx916G6f6tokh;

1.17
date	2017.02.10.02.10.22;	author espie;	state Exp;
branches;
next	1.16;
commitid	gSIiwP71qSX8prsz;

1.16
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.11.10.05.18;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.19.08.22.06;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.09.07.26.01;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.24.14.29.55;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.24.09.29.31;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.22.20.38.44;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.24.15.31.38;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.24.14.31.13;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.19.14.58.53;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.19.14.26.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.18
log
@we already have a comparison function for libobjects, so move it up to
the best class, and sort bad libraries in dependency solving accordingly
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: LibSpec.pm,v 1.17 2017/02/10 02:10:22 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
use strict;
use warnings;

package OpenBSD::LibObject;

sub key
{
	my $self = shift;
	if (defined $self->{dir}) {
		return "$self->{dir}/$self->{stem}";
	} else {
		return $self->{stem};
	}
}

sub major
{
	my $self = shift;
	return $self->{major};
}

sub minor
{
	my $self = shift;
	return $self->{minor};
}

sub version
{
	my $self = shift;
	return ".".$self->major.".".$self->minor;
}

sub is_static { 0 }

sub is_valid { 1 }

sub stem
{
	my $self = shift;
	return $self->{stem};
}

sub badclass
{
	"OpenBSD::BadLib";
}

sub lookup
{
	my ($spec, $repo, $base) = @@_;

	my $approx = $spec->lookup_stem($repo);
	if (!defined $approx) {
		return undef;
	}
	my $r = [];
	for my $c (@@$approx) {
		if ($spec->match($c, $base)) {
			push(@@$r, $c);
		}
	}
	return $r;
}

sub compare
{
	my ($a, $b) = @@_;
	if ($a->key ne $b->key) {
		return $a->key cmp $b->key;
	}
	if ($a->major != $b->major) {
		return $a->major <=> $b->major;
	}
	return $a->minor <=> $b->minor;
}

package OpenBSD::BadLib;
our @@ISA=qw(OpenBSD::LibObject);

sub to_string
{
	my $self = shift;
	return $$self;
}

sub new
{
	my ($class, $string) = @@_;
	bless \$string, $class;
}

sub is_valid
{
	return 0;
}

sub lookup_stem
{
	return undef;
}

sub match
{
	return 0;
}

package OpenBSD::LibRepo;
sub new
{
	my $class = shift;
	bless {}, $class;
}

sub register
{
	my ($repo, $lib, $origin) = @@_;
	$lib->set_origin($origin);
	push @@{$repo->{$lib->stem}}, $lib;
}

sub find_best
{
	my ($repo, $stem) = @@_;
	my $best;

	if (exists $repo->{$stem}) {
		for my $lib (@@{$repo->{$stem}}) {
			if (!defined $best || $lib->is_better($best)) {
				$best = $lib;
			}
		}
	} 
	return $best;
}

package OpenBSD::Library;
our @@ISA = qw(OpenBSD::LibObject);

sub from_string
{
	my ($class, $filename) = @@_;
	if (my ($dir, $stem, $major, $minor) = $filename =~ m/^(.*)\/lib([^\/]+)\.so\.(\d+)\.(\d+)$/o) {
		bless { dir => $dir, stem => $stem, major => $major,
		    minor => $minor }, $class;
	} else {
		return $class->badclass->new($filename);
	}
}

sub to_string
{
	my $self = shift;
	return "$self->{dir}/lib$self->{stem}.so.$self->{major}.$self->{minor}";
}

sub set_origin
{
	my ($self, $origin) = @@_;
	$self->{origin} = $origin;
	return $self;
}

sub origin
{
	my $self = shift;
	return $self->{origin};
}

sub no_match_dispatch
{
	my ($library, $spec, $base) = @@_;
	return $spec->no_match_shared($library, $base);
}

sub is_better
{
	my ($self, $other) = @@_;
	if ($other->is_static) {
		return 1;
	}
	if ($self->major > $other->major) {
		return 1;
	}
	if ($self->major == $other->major && $self->minor > $other->minor) {
		return 1;
    	}
	return 0;
}

package OpenBSD::LibSpec;
our @@ISA = qw(OpenBSD::LibObject);

sub new
{
	my ($class, $dir, $stem, $major, $minor) = @@_;
	bless {
		dir => $dir, stem => $stem,
		major => $major, minor => $minor
	    }, $class;
}

my $cached = {};

sub from_string
{
	my ($class, $s) = @@_;
	return $cached->{$s} //= $class->new_from_string($s);
}

sub new_with_stem
{
	my ($class, $stem, $major, $minor) = @@_;

	if ($stem =~ m/^(.*)\/([^\/]+)$/o) {
		return $class->new($1, $2, $major, $minor);
	} else {
		return $class->new(undef, $stem, $major, $minor);
	}
}

sub new_from_string
{
	my ($class, $string) = @@_;
	if (my ($stem, $major, $minor) = $string =~ m/^(.*)\.(\d+)\.(\d+)$/o) {
		return $class->new_with_stem($stem, $major, $minor);
	} else {
		return $class->badclass->new($string);
	}
}

sub to_string
{
	my $self = shift;
	return join('.', $self->key, $self->major, $self->minor);

}

sub lookup_stem
{
	my ($spec, $repo) = @@_;

	my $result = $repo->{$spec->stem};
	if (!defined $result) {
		return undef;
	} else {
		return $result;
	}
}

sub no_match_major
{
	my ($spec, $library) = @@_;
	return $spec->major != $library->major;
}

sub no_match_name
{
	my ($spec, $library, $base) = @@_;

	if (defined $spec->{dir}) {
		if ("$base/$spec->{dir}" eq $library->{dir}) {
			return undef;
		}
	} else {
		for my $d ($base, OpenBSD::Paths->library_dirs) {
			if ("$d/lib" eq $library->{dir}) {
				return undef;
			}
		}
	}
	return "bad directory";
}

sub no_match_shared
{
	my ($spec, $library, $base) = @@_;

	if ($spec->no_match_major($library)) {
		return "bad major";
	}
	if ($spec->major == $library->major &&
	    $spec->minor > $library->minor) {
		return "minor is too small";
	}
	return $spec->no_match_name($library, $base);
}

# classic double dispatch pattern
sub no_match
{
	my ($spec, $library, $base) = @@_;
	return $library->no_match_dispatch($spec, $base);
}

sub match
{
	my ($spec, $library, $base) = @@_;
	return !$spec->no_match($library, $base);
}

1;
@


1.17
log
@add glue to be able to ask "give me the highest number shared library with
that stem".  needed later for new fancy stuff in check-lib-depends
okay sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.16 2014/03/18 18:53:29 espie Exp $
a22 1

d83 12
a316 13
}

sub compare
{
	my ($a, $b) = @@_;

	if ($a->key ne $b->key) {
		return undef;
	}
	if ($a->major != $b->major) {
		return $a->major <=> $b->major;
	}
	return $a->minor <=> $b->minor;
@


1.16
log
@remove $_ usage that warns under perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.15 2010/12/24 09:04:14 espie Exp $
d126 15
@


1.15
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d198 2
a199 2
	my ($class, $_) = @@_;
	return $cached->{$_} //= $class->new_from_string($_);
@


1.14
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.13
log
@move compare into LibSpec, it's not so specific to Signature after all
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.12 2010/06/30 10:51:04 espie Exp $
@


1.12
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
d291 13
@


1.11
log
@whitespace cleanup
@
text
@@


1.10
log
@let build libspec match as they should.
namely, if a shared lib exists, then a static library should not match
if the version number is not okay.
problem noticed by sthen@@, okay sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.9 2010/06/09 07:26:01 espie Exp $
@


1.9
log
@ui changes: go thru a state object for most printouts
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.8 2010/05/10 09:17:55 espie Exp $
a81 13
}

sub findbest
{
	my ($spec, $repo, $base) = @@_;
	my $r = $spec->lookup($repo, $base);
	my $best;
	for my $candidate (@@$r) {
		if (!defined $best || $candidate->is_better($best)) {
			$best = $candidate;
		}
	}
	return $best;
@


1.8
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d103 1
a103 1
	return $self;
@


1.7
log
@more tweaks so that it can be extended and used during ports builds
@
text
@d148 1
a148 1
		bless { dir => $dir, stem => $stem, major => $major, 
d201 3
a203 3
	bless { 
		dir => $dir, stem => $stem, 
		major => $major, minor => $minor 
d286 1
a286 1
	if ($spec->major == $library->major && 
@


1.6
log
@refactor LibSpec to be able to reuse it for library matches during build:
- use double dispatch to match static libs
- prepare for less strict dependencies if need be
@
text
@d23 1
d46 1
a46 1
sub is_valid
d48 2
a49 1
	return 1;
d52 4
d84 13
d103 1
a103 1
	return $$self;
a140 2


d180 15
d261 1
a261 1
sub no_match_shared
a264 6
	if ($spec->no_match_major($library)) {
		return "bad major";
	}
	if ($spec->minor > $library->minor) {
		return "minor is too small";
	}
d277 14
@


1.5
log
@clean up the ProgressMeter code, create a specific class if a Term
is around.
start using stuff from termcap, specifically, cleareol, and move to hp.
use the full line when we can, cram 100% if we can.
(this should flicker much less on slow terminals).

clean-up the install-and-progress bits to be in progressmeter, this removes
some code.

have pkg_create follow the same pattern as the others, with a state.
This allows us to unify error messages a bit.
@
text
@d157 6
d183 11
d198 1
a198 5
		if ($stem =~ m/^(.*)\/([^\/]+)$/o) {
			return $class->new($1, $2, $major, $minor);
		} else {
			return $class->new(undef, $stem, $major, $minor);
		}
d223 7
a229 1
sub no_match
d232 2
a233 1
	if ($spec->major != $library->major) {
d252 8
@


1.4
log
@extra indirection: no match gives a reason why, so we can rebuild
report_problems to actually say what's wrong...
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.3 2010/01/24 14:31:13 espie Exp $
@


1.3
log
@add code to unify spec and names as LibraryObject, plus a repository and
match/lookup functions.
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.2 2010/01/19 14:58:53 espie Exp $
d210 1
a210 1
sub match
d214 1
a214 1
		return 0;
d217 1
a217 1
		return 0;
d221 1
a221 1
			return 1;
d226 1
a226 1
				return 1;
d230 6
a235 1
	return 0;
@


1.2
log
@simplify caching: return $cached->{$_} //= new_value;
remove stats
cache LibSpec as well (1000 c.53.0 !)
@
text
@d2 1
a2 1
# $OpenBSD: LibSpec.pm,v 1.1 2010/01/19 14:26:24 espie Exp $
d21 1
a21 13
package OpenBSD::Library;

package OpenBSD::LibSpec;

sub new
{
	my ($class, $dir, $stem, $major, $minor) = @@_;
	$dir //= "lib";
	bless { 
		dir => $dir, stem => $stem, 
		major => $major, minor => $minor 
	    }, $class;
}
d26 5
a30 1
	return "$self->{dir}/$self->{stem}";
d45 116
a160 1
sub badspec
d162 5
a166 1
	"OpenBSD::LibSpec::BadSpec";
d187 1
a187 1
		return $class->badspec->new($string);
d194 1
a194 1
	my $s = join('.', $self->{stem}, $self->{major}, $self->{minor});
a195 4
	if ($self->{dir} ne 'lib') {
		$s = "$self->{dir}/$s";
	}
	return $s;
d198 1
a198 1
sub is_valid
d200 1
a200 4
	return 1;
}
package OpenBSD::LibSpec::BadSpec;
our @@ISA=qw(OpenBSD::LibSpec);
d202 6
a207 4
sub to_string
{
	my $self = shift;
	return $$self;
d210 1
a210 7
sub new
{
	my ($class, $string) = @@_;
	bless \$string, $class;
}

sub is_valid
d212 18
@


1.1
log
@move generic code to handle libspec in a new file, to clean up stuff
@
text
@d2 1
a2 1
# $OpenBSD$
d58 2
d61 6
@

