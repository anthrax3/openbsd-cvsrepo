head	1.34;
access;
symbols
	OPENBSD_6_2:1.34.0.2
	OPENBSD_6_2_BASE:1.34
	OPENBSD_6_1:1.34.0.6
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.31.0.4
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.31.0.6
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.31.0.2
	OPENBSD_5_7_BASE:1.31
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.21.0.12
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.6
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.18.0.2
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.34
date	2016.05.14.21.12.40;	author espie;	state Exp;
branches;
next	1.33;
commitid	HDKGIgRgC0S1ij3Q;

1.33
date	2016.05.08.09.21.32;	author espie;	state Exp;
branches;
next	1.32;
commitid	2S4yauv9IH60Dpf5;

1.32
date	2016.04.02.12.18.44;	author espie;	state Exp;
branches;
next	1.31;
commitid	YeDPCJ6ER1ZZVXJV;

1.31
date	2014.12.23.08.46.31;	author espie;	state Exp;
branches;
next	1.30;
commitid	9RA6Fzd3hxtPT6qv;

1.30
date	2014.11.30.16.44.04;	author espie;	state Exp;
branches;
next	1.29;
commitid	JFKtN0gs6PArg43l;

1.29
date	2014.09.16.08.51.38;	author espie;	state Exp;
branches;
next	1.28;
commitid	wmO4oj3y8eGZSndM;

1.28
date	2014.09.09.09.40.23;	author espie;	state Exp;
branches;
next	1.27;
commitid	3LnGk6tZmORiAACe;

1.27
date	2014.09.01.10.41.55;	author espie;	state Exp;
branches;
next	1.26;
commitid	1vyE6kO47a8Fgi2n;

1.26
date	2014.08.10.10.01.03;	author espie;	state Exp;
branches;
next	1.25;
commitid	TVTGkMkybHLfxISy;

1.25
date	2014.04.22.18.22.20;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.25.13.23.15;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2014.01.17.15.46.16;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2013.12.23.16.34.51;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.02.15.25.45;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.02.13.33.05;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2010.07.28.12.19.54;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.11.12.59.34;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.22.20.46.21;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.19.14.58.32;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.12.09.53.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.25.22.32.47;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.25.12.19.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.02.15.05.29;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.31.17.09.19;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.24.12.52.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.24.12.07.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.07.14.18.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.34
log
@use twice the same code for prepare_long and verify_modes so that it can't
diverge.

tested for a few days and okay aja@@
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: ArcCheck.pm,v 1.33 2016/05/08 09:21:32 espie Exp $
#
# Copyright (c) 2005-2006 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Supplementary code to handle archives in the package context.
# Ustar allows about anything, but we want to forbid a lot of things.
# this code is used during creation and extraction
# specifically, during create time:
# - prevent a lot of weird objects from entering the archives
# - make sure all relevant users/modes are recorded in the PLIST item

# during extraction:
# - make sure complex objects have all their relevant properties recorded
# - disallow extraction of non-files/links.
# - guard against files much longer than they should be.

use strict;
use warnings;

use OpenBSD::Ustar;

package OpenBSD::Ustar::Object;
use POSIX;

sub is_allowed() { 0 }

# match archive header link name against actual link name
sub check_linkname
{
	my ($self, $linkname) = @@_;
	my $c = $self->{linkname};
	if ($self->isHardLink && defined $self->{cwd}) {
		$c = $self->{cwd}.'/'.$c;
	}
	return $c eq $linkname;
}

sub validate_meta
{
	my ($o, $item) = @@_;

	$o->{cwd} = $item->cwd;
	if (defined $item->{symlink} || $o->isSymLink) {
		unless (defined $item->{symlink} && $o->isSymLink) {
			$o->errsay("bogus symlink #1", $item->name);
			return 0;
		}
		if (!$o->check_linkname($item->{symlink})) {
			$o->errsay("archive symlink does not match #1 != #2",
			    $o->{linkname}, $item->{symlink});
			return 0;
		}
	} elsif (defined $item->{link} || $o->isHardLink) {
		unless (defined $item->{link} && $o->isHardLink) {
			$o->errsay("bogus hardlink #1", $item->name);
			return 0;
		}
		if (!$o->check_linkname($item->{link})) {
			$o->errsay("archive hardlink does not match #1 != #2",
			    $o->{linkname}, $item->{link});
			return 0;
		}
	} elsif ($o->isFile) {
		if (!defined $item->{size}) {
			$o->errsay("Error: file #1 does not have recorded size",
			    $item->fullname);
			return 0;
		} elsif ($item->{size} != $o->{size}) {
			$o->errsay("Error: size does not match for #1",
			    $item->fullname);
			return 0;
		}
	} else {
		$o->errsay("archive content for #1 should be file", 
		    $item->name);
		return 0;
	}
	return $o->verify_modes($item);
}

sub strip_modes
{
	my ($o, $item) = @@_;

	my $result = $o->{mode};

	# disallow writable files/dirs without explicit annotation
	if (!defined $item->{mode}) {
		# if there's an owner, we have to be explicit
		if (defined $item->{owner}) {
			$result &= ~(S_IWUSR|S_IWGRP|S_IWOTH);
		} else {
			$result &= ~(S_IWGRP|S_IWOTH);
		}
		# and make libraries non-executable
		if ($item->is_a_library) {
			$result &= ~(S_IXUSR|S_IXGRP|S_IXOTH);
		}
		$result |= S_IROTH | S_IRGRP;
	}
	# if we're going to set the group or owner, sguid bits won't
	# survive the extraction
	if (defined $item->{group} || defined $item->{owner}) {
		$result &= ~(S_ISUID|S_ISGID);
	}
	return $result;
}

sub printable_mode
{
	my $o = shift;
	return sprintf("%4o", 
	    $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID));
}

sub verify_modes
{
	my ($o, $item) = @@_;
	my $result = 1;

	if (!defined $item->{owner}) {
		if ($o->{uname} ne 'root') {
			$o->errsay("Error: no \@@owner for #1 (#2)",
			    $item->fullname, $o->{uname});
	    		$result = 0;
		}
	}
	if (!defined $item->{group}) {
		if ($o->{gname} ne 'bin' && $o->{gname} ne 'wheel') {
			$o->errsay("Error: no \@@group for #1 (#2)",
			    $item->fullname, $o->{gname});
			$result = 0;
		}
	}
	if ($o->{mode} != $o->strip_modes($o)) {
		$o->errsay("Error: weird mode for #1: #2", $item->fullname,
		    $o->printable_mode);
		    $result = 0;
 	}
	return $result;
}

package OpenBSD::Ustar::HardLink;
sub is_allowed() { 1 }

package OpenBSD::Ustar::SoftLink;
sub is_allowed() { 1 }

package OpenBSD::Ustar::File;
sub is_allowed() { 1 }

package OpenBSD::Ustar;
use POSIX;

# prepare item and introduce long names where needed.
sub prepare_long
{
	my ($self, $item) = @@_;
	my $entry;
	if (defined $item->{wtempname}) {
		$entry = $self->prepare($item->{wtempname}, '');
	} else {
		$entry = $self->prepare($item->name);
	}
	if (defined $item->{owner}) {
		$entry->{uname} = $item->{owner};
		if (defined $item->{uid}) {
			$entry->{uid} = $item->{uid};
		} else {
			delete $entry->{uid};
		}
	} else {
		$entry->{uname} = "root";
		delete $entry->{uid};
	}
	if (defined $item->{group}) {
		$entry->{gname} = $item->{group};
		if (defined $item->{gid}) {
			$entry->{gid} = $item->{gid};
		} else {
			delete $entry->{gid};
		}
	} else {
		$entry->{gname} = "bin";
		delete $entry->{gid};
	}
	# likewise, we skip links on extractions, so hey, don't even care
	# about modes and stuff.
	if ($entry->isSymLink) {
		$entry->{mode} = 0777;
		$entry->{uname} = 'root';
		$entry->{gname} = 'wheel';
		delete $entry->{uid};
		delete $entry->{gid};
	}
	$entry->recheck_owner;
	if (!defined $entry->{uname}) {
		$self->fatal("No user name for #1 (uid #2)",
		    $item->name, $entry->{uid});
	}
	if (!defined $entry->{gname}) {
		$self->fatal("No group name for #1 (gid #2)",
		    $item->name, $entry->{gid});
	}
	$entry->{mode} = $entry->strip_modes($item);
	if (defined $item->{ts}) {
		delete $entry->{mtime};
	}

	$entry->set_name($item->name);
	return $entry;
}

1;
@


1.33
log
@allow root files to be root-writable.

common work with aja@@,  okay aja@@
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.32 2016/04/02 12:18:44 espie Exp $
d94 35
d135 3
a137 3
	    if ($o->{uname} ne 'root') {
		    $o->errsay("Error: no \@@owner for #1 (#2)",
			$item->fullname, $o->{uname});
d139 1
a139 1
	    }
d142 5
a146 20
	    if ($o->{gname} ne 'bin' && $o->{gname} ne 'wheel') {
		if (($o->{mode} & (S_ISUID | S_ISGID | S_IWGRP)) != 0) {
		    $o->errsay("Error: no \@@group for #1 (#2), which has mode #3",
			$item->fullname, $o->{uname},
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)));
	    		$result = 0;
		} else {
		    $o->errsay("Warning: no \@@group for #1 (#2)",
			$item->fullname, $o->{gname});
	    	}
	    }
	}
	if (!defined $item->{mode}) {
	    if (($o->{mode} & (S_ISUID | S_ISGID | S_IWOTH)) != 0 ||
	    	($o->{mode} & S_IROTH) == 0 || ($o->{mode} & S_IRGRP) == 0) {
		    $o->errsay("Error: weird mode for #1: #2",
			$item->fullname,
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)));
	    		$result = 0;
	    }
d148 5
d218 1
a218 18
	# disallow writable files/dirs without explicit annotation
	if (!defined $item->{mode}) {
		# if there's an owner, we have to be explicit
		if (defined $item->{owner}) {
			$entry->{mode} &= ~(S_IWUSR|S_IWGRP|S_IWOTH);
		} else {
			$entry->{mode} &= ~(S_IWGRP|S_IWOTH);
		}
		# and make libraries non-executable
		if ($item->is_a_library) {
			$entry->{mode} &= ~(S_IXUSR|S_IXGRP|S_IXOTH);
		}
	}
	# if we're going to set the group or owner, sguid bits won't
	# survive the extraction
	if (defined $item->{group} || defined $item->{owner}) {
		$entry->{mode} &= ~(S_ISUID|S_ISGID);
	}
@


1.32
log
@streamline the code that checks meta information before extracting files
- verify_modes should only verify modes
- put the whole checking code in one single routine in validate_meta, makes
the size checking code more obvious
- document what's going on
- prevent PkgCreate from creating impossible packages, only a few Ustar
objects are actually usable.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.31 2014/12/23 08:46:31 espie Exp $
d195 6
a200 1
		$entry->{mode} &= ~(S_IWUSR|S_IWGRP|S_IWOTH);
@


1.31
log
@tweak meta-info checking a bit.
- remove IsLink tests, there's no reason to treat them specially.
- files are forced to root, no need to allow for bin anymore.

- force libraries to be not executable, if there's no explicit @@mode
annotation
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.29 2014/09/16 08:51:38 espie Exp $
d19 10
a28 4
# Contrarily to GNU-tar, we do not change the archive format, but by
# convention,  the names LongName\d+ and LongLink\d correspond to names
# too long to fit. The actual names reside in the PLIST, but the archive
# is still a valid archive.
d36 1
d38 1
a38 6
# match archive header name against PackingElement item
sub check_name
{
	my ($self, $item) = @@_;
	return $self->name eq $item->name;
}
d40 1
a40 1
# match archive header link name against actual link names
d51 42
a92 1
use POSIX;
a127 11
	if ($o->isFile) {
		if (!defined $item->{size}) {
			$o->errsay("Error: file #1 does not have recorded size",
			    $item->fullname);
			$result = 0;
		} elsif ($item->{size} != $o->{size}) {
			$o->errsay("Error: size does not match for #1",
			    $item->fullname);
			$result = 0;
		}
	}
d130 9
@


1.30
log
@much simpler checks, always enforce root/bin (or root/wheel for symlinks)
for files without @@owner/@@group annotations, independently of who you are.

This should fix building-as-root for good, even without twiddling
FAKE_AS_ROOT.
@
text
@d56 2
a57 2
	if (!defined $item->{owner} && !$o->isSymLink) {
	    if ($o->{uname} ne 'root' && $o->{uname} ne 'bin') {
d63 1
a63 1
	if (!defined $item->{group} && !$o->isSymLink) {
d76 1
a76 1
	if (!defined $item->{mode} && $o->isFile) {
d155 4
@


1.29
log
@if a @@ts annotation is detected, wipe tarball timestamp. Archives will
look as if all files were born in 1970. The useful side-effect is that
meta-data for content-identical files WILL be identical as well.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.28 2014/09/09 09:40:23 espie Exp $
d119 1
a119 1
	} elsif ($< && $entry->{uid} == $<) {
d130 1
a130 1
	} elsif ($< && $( =~ m/\b$entry->{gid}\b/) {
d134 9
a162 9
	}
	# likewise, we skip links on extractions, so hey, don't even care
	# about modes and stuff.
	if ($entry->isSymLink) {
		$entry->{mode} = 0777;
		$entry->{uid} = 0;
		$entry->{gid} = 0;
		$entry->{uname} = 'root';
		$entry->{gname} = 'wheel';
@


1.28
log
@register @@newuser/@@newgroup so that we try creating tarballs with the correct
users (which doesn't really matter all that much, as the owner/group in
the plist are what matters)

Otherwise, if we're not root, dismiss user id and groups, replace
with root/bin (significant fix from previous version: this interprets $(
correctly).  Should help with FAKE_AS_ROOT=No
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.27 2014/09/01 10:41:55 espie Exp $
d151 3
@


1.27
log
@be a wee bit more paranoid about file sizes.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.26 2014/08/10 10:01:03 espie Exp $
d112 9
a120 2
	if ($< && $entry->{uid} == $<) {
		$entry->{uname} = $item->{owner} // "root";
d123 9
a131 2
	if ($( && $entry->{gid} == $() {
		$entry->{gname} = $item->{group} // "bin";
d140 1
a140 1
		$self->fatal("No group name for #1 (uid #2)",
@


1.26
log
@if pkg_create is run as non-root, restory correct group/owner to root/bin.

also, remove write permissions without explicit modes. Allows fake installs
to keep directories/files writable while producing correct package.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.25 2014/04/22 18:22:20 espie Exp $
d84 11
@


1.25
log
@turns out there are exactly 3 ports that actually use longnames:

eclipse-plugins-wtp-sdk
openclipart
qt4-html

so switch to pax extended headers now, the transition period is not
really needed. :)
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.24 2014/01/25 13:23:15 espie Exp $
d101 9
d117 4
@


1.24
log
@more ArcCheck nits: don't allow a file to be u-r/g-r without an explicit
@@mode annotation.

This mostly fixes packaging bugs (like documentation only readable by root
and such nonsense), and also force *actual* mode settings for security
reasons to be apparent in the packing-list.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.23 2014/01/17 15:46:16 espie Exp $
d35 1
a35 6
	return 1 if $self->name eq $item->name;
	if ($self->name =~ m/^LongName\d+$/o) {
		$self->set_name($item->name);
		return 1;
	}
	return 0;
d46 1
a46 9
	return 1 if $c eq $linkname;
	if ($self->{linkname} =~ m/^Long(?:Link|Name)\d+$/o) {
		$self->{linkname} = $linkname;
		if ($self->isHardLink && defined $self->{cwd}) {
			$self->{linkname} =~ s|^$self->{cwd}/||;
		}
		return 1;
	}
	return 0;
a124 10
	my ($prefix, $name) = split_name($entry->name);
	if (length($name) > MAXFILENAME || length($prefix) > MAXPREFIX) {
		$self->{name_index} = 0 if !defined $self->{name_index};
		$entry->set_name('LongName'.$self->{name_index}++);
	}
	if ((defined $entry->{linkname}) &&
	    length($entry->{linkname}) > MAXLINKNAME) {
		$self->{linkname_index} = 0 if !defined $self->{linkname_index};
		$entry->{linkname} = 'LongLink'.$self->{linkname_index}++;
	}
@


1.23
log
@make ArcCheck less confusing, don't archive stuff that WON'T survive
extraction anyways (those metadatas ARE in the packing-list anyways).
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.22 2013/12/23 16:34:51 espie Exp $
d90 2
a91 1
	    if (($o->{mode} & (S_ISUID | S_ISGID | S_IWOTH)) != 0) {
@


1.22
log
@get rid of "copy_long", we don't really need to recheck names while copying
a package contents.

Allow -o/-S for output/signature dirs for batch operations.
Fix copying of packages while signing, add progressmeter.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.21 2011/01/02 15:25:45 espie Exp $
d101 1
d120 14
@


1.21
log
@create formatted manpages as temporary files we remove after the fact.
@
text
@d2 1
a2 1
# $OpenBSD$
a97 15
}

# copy long items, avoiding duplicate long names.
sub copy_long
{
	my ($self, $wrarc) = @@_;
	if ($self->name =~ m/^LongName(\d+)$/o) {
		$wrarc->{name_index} = $1 + 1;
	}
	if (length($self->name) >
	    OpenBSD::Ustar::MAXFILENAME + OpenBSD::Ustar::MAXPREFIX + 1) {
		$wrarc->{name_index} = 0 if !defined $wrarc->{name_index};
		$self->set_name('LongName'.$wrarc->{name_index}++);
	}
	$self->copy($wrarc);
@


1.20
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d121 6
a126 2
	my $filename = $item->name;
	my $entry = $self->prepare($filename);
d129 1
a129 1
		    $entry->name, $entry->{uid});
d133 1
a133 1
		    $entry->name, $entry->{gid});
d135 2
@


1.19
log
@whitespace
@
text
@@


1.18
log
@pass state to Ustar objects, use it to display those pesky error and
fatal messages.

zap $opt_x from pkg_mklocated, do things like other commands do.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.17 2010/06/30 10:51:04 espie Exp $
d124 1
a124 1
		$self->fatal("No user name for #1 (uid #2)", 
d128 1
a128 1
		$self->fatal("No group name for #1 (uid #2)", 
@


1.17
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
d71 2
a72 2
		    print STDERR "Error: no \@@owner for ",
			$item->fullname, " (", $o->{uname}, ")\n";
d79 3
a81 4
		    print STDERR "Error: no \@@group for ",
			$item->fullname, " (", $o->{uname},
			"), which has mode ",
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)), "\n";
d84 2
a85 2
		    print STDERR "Warning: no \@@group for ",
			$item->fullname, " (", $o->{gname}, ")\n";
d91 3
a93 3
		    print STDERR "Error: weird mode for ",
			$item->fullname, ": ",
			sprintf("%4o", $o->{mode} & (S_IRWXU | S_IRWXG | S_IRWXO | S_ISUID | S_ISGID)), "\n";
d124 2
a125 1
		die "No user name for ", $entry->name, " (uid ", $entry->{uid}, ")";
d128 2
a129 1
		die "No group name for ", $entry->name, " (gid ", $entry->{gid}. ")";
@


1.16
log
@whitespace cleanup
@
text
@@


1.15
log
@whitespace fixes
@
text
@@


1.14
log
@remove extra warnings
@
text
@d80 1
a80 1
			$item->fullname, " (", $o->{uname}, 
d92 2
a93 2
		    print STDERR "Error: weird mode for ", 
			$item->fullname, ": ", 
d108 1
a108 1
	if (length($self->name) > 
d135 1
a135 1
	if ((defined $entry->{linkname}) && 
@


1.13
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d135 2
a136 1
	if (length($entry->{linkname}) > MAXLINKNAME) {
@


1.12
log
@fix creating packages with long names in plist; from espie@@
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.11 2009/04/19 14:58:32 espie Exp $
d23 5
a27 1
#
d108 2
a109 1
	if (length($self->name) > MAXFILENAME+MAXPREFIX+1) {
@


1.11
log
@synch with my new style search/location changes
It's likely there will be some fallout, but it's getting a bit too large
to keep around.
This does kill a few very old oddities as well.
@
text
@d2 1
a2 1
# $OpenBSD$
d128 1
a128 1
		$entry->name = 'LongName'.$self->{name_index}++;
@


1.10
log
@tidy error messages: uses $! more consistently, do not append \n on die,
do append \n on warn.

Fix the two cases where the temp dir vanished too soon: not copying +DESC
should have been apparent. Not finding a +DISPLAY file is not a reason for
burping all over the place.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.9 2007/06/04 14:40:39 espie Exp $
d31 3
a33 3
	return 1 if $self->{name} eq $item->{name};
	if ($self->{name} =~ m/^LongName\d+$/o) {
		$self->{name} = $item->{name};
d101 1
a101 1
	if ($self->{name} =~ m/^LongName(\d+)$/o) {
d104 1
a104 1
	if (length($self->{name}) > MAXFILENAME+MAXPREFIX+1) {
d106 1
a106 1
		$entry->{name} = 'LongName'.$wrarc->{name_index}++;
d117 1
a117 1
	my $filename = $item->{name};
d120 1
a120 1
		die "No user name for ", $entry->{name}, " (uid ", $entry->{uid}, ")";
d123 1
a123 1
		die "No group name for ", $entry->{name}, " (gid ", $entry->{gid}. ")";
d125 1
a125 1
	my ($prefix, $name) = split_name($entry->{name});
d128 1
a128 1
		$entry->{name} = 'LongName'.$self->{name_index}++;
@


1.9
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.8 2007/05/25 22:32:47 espie Exp $
d120 1
a120 1
		die "No user name for ", $entry->{name}, " (uid ", $entry->{uid}, ")\n";
d123 1
a123 1
		die "No group name for ", $entry->{name}, " (gid ", $entry->{gid}. "\n";
@


1.8
log
@until people finally fix their @@group issues in packages, at least refuse
flat-out to write packages with no @@group annotations on fishy stuff
(writable directories, setuid/setgid stuff)
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.7 2007/05/25 12:19:24 espie Exp $
d32 1
a32 1
	if ($self->{name} =~ m/^LongName\d+$/) {
d48 1
a48 1
	if ($self->{linkname} =~ m/^Long(?:Link|Name)\d+$/) {
d101 1
a101 1
	if ($self->{name} =~ m/^LongName(\d+)$/) {
@


1.7
log
@move the mode checker code from pkg_create into ArcCheck, so that pkg_add
can reuse it.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.6 2007/05/02 15:05:29 espie Exp $
d74 7
d83 1
@


1.6
log
@$o->method() becomes $o->method
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.5 2007/04/15 10:17:29 espie Exp $
d56 31
@


1.5
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.4 2006/07/31 17:09:19 espie Exp $
d44 1
a44 1
	if ($self->isHardLink() && defined $self->{cwd}) {
d50 1
a50 1
		if ($self->isHardLink() && defined $self->{cwd}) {
@


1.4
log
@cosmetic: comments, and better method name.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.3 2005/09/24 12:52:19 espie Exp $
d4 1
a4 1
# Copyright (c) 2005 Marc Espie <espie@@openbsd.org>
@


1.3
log
@pass actual items to prepare_long and check_name so that we can also
verify that modes/groups/owners are correct (code to come)
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.2 2005/09/24 12:07:38 espie Exp $
d18 6
a23 1
# Supplementary code to handle archives.
d27 1
d39 1
d58 1
d74 1
@


1.2
log
@move uname/gname existence check into ArcCheck: Ustar archives deal with
this differently. Namely, use specific variables that default to the
numeric value if the uid/gid don't exist in mkheader.
Since the entry fields are not filled, ArcCheck gets all it needs for
the package check.
@
text
@d2 1
a2 1
# $OpenBSD: ArcCheck.pm,v 1.1 2005/08/07 14:18:05 espie Exp $
d24 2
a25 2
	my ($self, $name) = @@_;
	return 1 if $self->{name} eq $name;
d27 1
a27 1
		$self->{name} = $name;
d68 2
a69 1
	my ($self, $filename) = @@_;
@


1.1
log
@wrapper around Ustar that replaces long names/links with LongName#/LongLink#.

The archive will unpack correctly with tar, except that those names won't
be preserved.

The wrapper checks names against the packing-list to restore the correct names
on the fly.

Put into a separate file, as it is an extension of Ustar proper, and we're
going to do more archive checking in the future.

Lots of tests by Bernd Ahlers. Comments by Tom Cosgrove.
@
text
@d2 1
a2 1
# $OpenBSD$
d70 6
@

