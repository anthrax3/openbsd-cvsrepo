head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.8
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.6
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.8
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.12
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6;
locks; strict;
comment	@# @;


1.17
date	2016.06.21.10.40.37;	author espie;	state Exp;
branches;
next	1.16;
commitid	XcGgxmDDgO3seW9q;

1.16
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.13.15.41.57;	author nigel;	state Exp;
branches;
next	1.14;

1.14
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.05.07.59.52;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2008.10.20.10.25.16;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.09.12.00.48;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.07.17.56.43;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.07.12.15.59;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.07.12.02.59;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.07.11.55.22;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.07.11.02.24;	author espie;	state Exp;
branches;
next	;


desc
@@


1.17
log
@pass file name thru to Subst for better error messages.
reported by Adam Wolk
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Subst.pm,v 1.16 2014/03/18 18:53:29 espie Exp $
#
# Copyright (c) 2008 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# very simple package, just holds everything needed for substitution
# according to package rules.

package OpenBSD::Subst;

sub new
{
	bless {}, shift;
}

sub hash
{
	shift;
}

sub add
{
	my ($self, $k, $v) = @@_;
	$k =~ s/^\^//;
	$self->{$k} = $v;
}

sub value
{
	my ($self, $k) = @@_;
	return $self->{$k};
}

sub parse_option
{
	my ($self, $opt) = @@_;
	if ($opt =~ m/^([^=]+)\=(.*)$/o) {
		my ($k, $v) = ($1, $2);
		$v =~ s/^\'(.*)\'$/$1/;
		$v =~ s/^\"(.*)\"$/$1/;
		$self->add($k, $v);
	} else {
		$self->add($opt, 1);
	}
}

sub do
{
	my $self = shift;
	my $s = shift;
	return $s unless $s =~ m/\$/o;	# optimization
	while ( my $k = ($s =~ m/\$\{([A-Za-z_][^\}]*)\}/o)[0] ) {
		my $v = $self->{$k};
		unless ( defined $v ) { $v = "\$\\\{$k\}"; }
		$s =~ s/\$\{\Q$k\E\}/$v/g;
	}
	$s =~ s/\$\\\{([A-Za-z_])/\$\{$1/go;
	return $s;
}

sub copy_fh2
{
	my ($self, $src, $dest) = @@_;
	my $contents = do { local $/; <$src> };
	while (my ($k, $v) = each %{$self}) {
		$contents =~ s/\$\{\Q$k\E\}/$v/g;
	}
	$contents =~ s/\$\\\{([A-Za-z_])/\$\{$1/go;
	print $dest $contents;
}

sub copy_fh
{
	my ($self, $srcname, $dest) = @@_;
	open my $src, '<', $srcname or die "can't open $srcname";
	$self->copy_fh2($src, $dest);
}

sub copy
{
	my ($self, $srcname, $destname) = @@_;
	open my $dest, '>', $destname or die "can't open $destname";
	$self->copy_fh($srcname, $dest);
	return $dest;
}

sub has_fragment
{
	my ($self, $def, $frag, $msg) = @@_;

	my $v = $self->value($def);

	if (!defined $v) {
		die "Error: unknown fragment $frag in $msg";
	} elsif ($v == 1) {
		return 1;
	} elsif ($v == 0) {
		return 0;
	} else {
		die "Incorrect define for $frag in $msg";
	}
}

sub empty
{
	my ($self, $k) = @@_;

	my $v = $self->value($k);
	if (defined $v && $v) {
		return 0;
	} else {
		return 1;
	}
}

1;
@


1.16
log
@remove $_ usage that warns under perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.15 2011/11/13 15:41:57 nigel Exp $
d104 1
a104 1
	my ($self, $def, $frag) = @@_;
d109 1
a109 1
		die "Error: unknown fragment $frag";
d115 1
a115 1
		die "Incorrect define for $frag";
@


1.15
log
@The pkg_subst / SUBST_CMD has caused issues for some ports where
the $\ in files was replaced by $. Now only removes the \
in $\{[A-Za-z_]

Ok espie@@
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.14 2010/12/24 09:04:14 espie Exp $
d65 3
a67 3
	my $_ = shift;
	return $_ unless m/\$/o;	# optimization
	while ( my $k = (m/\$\{([A-Za-z_][^\}]*)\}/o)[0] ) {
d70 1
a70 1
		s/\$\{\Q$k\E\}/$v/g;
d72 2
a73 2
	s/\$\\\{([A-Za-z_])/\$\{$1/go;
	return $_;
d79 1
a79 1
	my $_ = do { local $/; <$src> };
d81 1
a81 1
		s/\$\{\Q$k\E\}/$v/g;
d83 2
a84 2
	s/\$\\\{([A-Za-z_])/\$\{$1/go;
	print $dest $_;
@


1.14
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d67 3
a69 1
	while (my ($k, $v) = each %{$self->hash}) {
d72 1
a72 1
	s/\$\\/\$/go;
d79 3
a81 3
	my $_;
	while (<$src>) {
		print $dest $self->do($_);
d83 2
@


1.13
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.12
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.11
log
@whitespace cleanup
@
text
@@


1.10
log
@have subst return a handle to written file
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.9 2010/05/10 09:17:55 espie Exp $
@


1.9
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d95 1
@


1.8
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@@


1.7
log
@Say goodbye to local $_
lexical scoping is so much neater (courtesy of perl 5.10)
@
text
@d17 1
@


1.6
log
@allow direct copy of fh to another
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.5 2008/04/07 17:56:43 espie Exp $
d64 1
a64 1
	local $_ = shift;
d76 1
a76 1
	local $_;
@


1.5
log
@typo, fix fragments
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.4 2008/04/07 12:15:59 espie Exp $
d73 1
a73 1
sub copy_fh
d75 1
a75 2
	my ($self, $srcname, $dest) = @@_;
	open my $src, '<', $srcname or die "can't open $srcname";
d80 7
@


1.4
log
@tweak a bit, allow ^ to occur at beginning of variable name
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.3 2008/04/07 12:02:59 espie Exp $
d94 1
a94 1
	my $v = self->value($def);
@


1.3
log
@likewise for the hash itself
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.2 2008/04/07 11:55:22 espie Exp $
d38 1
@


1.2
log
@I should know better... reuse methods internally as much as I can, to
facilitate further changes.
@
text
@d2 1
a2 1
# $OpenBSD: Subst.pm,v 1.1 2008/04/07 11:02:24 espie Exp $
d30 5
d65 1
a65 1
	while (my ($k, $v) = each %$self) {
@


1.1
log
@put Subst stuff into its own library file, to reuse elsewhere.
@
text
@d2 1
a2 1
# $OpenBSD$
d36 6
d49 1
a49 1
		$self->{$k} = $v;
d51 1
a51 1
		$self->{$opt} = 1;
d88 3
a90 1
	if (!defined $self->{$def}) {
d92 1
a92 1
	} elsif ($self->{$def} == 1) {
d94 1
a94 1
	} elsif ($self->{$def} == 0) {
d101 1
a101 1
sub value
a103 2
	return $self->{$k};
}
d105 2
a106 4
sub empty
{
	my ($self, $k) = @@_;
	if (defined $self->{$k} && $self->{$k}) {
@

