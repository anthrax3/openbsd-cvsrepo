head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6;
locks; strict;
comment	@# @;


1.16
date	2017.03.01.10.35.24;	author espie;	state Exp;
branches;
next	1.15;
commitid	WLXUAeW6LYQMCSi5;

1.15
date	2017.02.27.14.03.52;	author espie;	state Exp;
branches;
next	1.14;
commitid	c3kgqPdp6tlunPOd;

1.14
date	2016.10.03.13.17.30;	author espie;	state Exp;
branches;
next	1.13;
commitid	UAcDnHKM3hWLAfsT;

1.13
date	2016.10.03.12.14.08;	author espie;	state Exp;
branches;
next	1.12;
commitid	uC8RTzZjfMQivMyE;

1.12
date	2016.10.03.10.59.54;	author espie;	state Exp;
branches;
next	1.11;
commitid	cXt7fSyPIDWsHHMk;

1.11
date	2016.09.28.12.32.13;	author espie;	state Exp;
branches;
next	1.10;
commitid	vFWKtT7DCV4hebHJ;

1.10
date	2016.09.15.13.14.03;	author espie;	state Exp;
branches;
next	1.9;
commitid	yb7Hs9hEEpqaC0lA;

1.9
date	2016.09.06.10.41.51;	author espie;	state Exp;
branches;
next	1.8;
commitid	s2PPIDjn9UAqg50C;

1.8
date	2016.05.09.14.17.24;	author espie;	state Exp;
branches;
next	1.7;
commitid	7uD0eEYrNBv4FIJ0;

1.7
date	2014.10.11.08.41.06;	author espie;	state Exp;
branches;
next	1.6;
commitid	gEIC1zYajgIDVCi4;

1.6
date	2014.01.25.10.18.38;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2014.01.23.22.57.06;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2014.01.23.21.05.26;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2014.01.23.12.32.40;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2014.01.23.12.28.48;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2014.01.23.11.45.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.16
log
@scrape most of the config framework
okay aja@@, rpe@@
@
text
@#! /usr/bin/perl
# ex:ts=8 sw=4:
# $OpenBSD: PkgSign.pm,v 1.15 2017/02/27 14:03:52 espie Exp $
#
# Copyright (c) 2003-2014 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::AddCreateDelete;
use OpenBSD::Signer;

package OpenBSD::PkgSign::State;
our @@ISA = qw(OpenBSD::CreateSign::State);

sub handle_options
{
	my $state = shift;

	$state->{extra_stats} = 0;
	$state->{opt} = {
	    'o' =>
		    sub {
			    $state->{output_dir} = shift;
		    },
	    'S' =>
		    sub {
			    $state->{source} = shift;
		    },
	    's' =>
		    sub { 
			    push(@@{$state->{signature_params}}, shift);
		    },
	    'V' =>
		    sub {
			    $state->{extra_stats}++;
		    },
	};
	$state->{signature_style} = 'unsigned';

	$state->SUPER::handle_options('Cij:o:S:s:V',
	    '[-CvV] [-D name[=value]] -s signify2 -s priv',
	    '[-o dir] [-S source] [pkg-name...]');
	if (defined $state->{signature_params}) {
		$state->{signer} = OpenBSD::Signer->factory($state);
	}
    	if (!defined $state->{signer}) {
		$state->usage("Can't invoke command without valid signing parameters");
	}
	$state->{output_dir} //= ".";
	if (!-d $state->{output_dir}) {
		require File::Path;
		File::Path::make_path($state->{output_dir})
		    or $state->usage("can't create dir");
	}
	$state->{wantntogo} = $state->{extra_stats};
}

package OpenBSD::PkgSign;
use OpenBSD::Temp;
use OpenBSD::PackingList;
use OpenBSD::PackageInfo;

sub sign_existing_package
{
	my ($self, $state, $pkg) = @@_;
	my $output = $state->{output_dir};
	my $dest = $output.'/'.$pkg->name.".tgz";
	if ($state->opt('i')) {
		if (-f $dest) {
			return;
	    	}
	}
	my (undef, $tmp) = OpenBSD::Temp::permanent_file($output, "pkg");
	$state->{signer}->sign($pkg, $state, $tmp);

	chmod((0666 & ~umask), $tmp);
	rename($tmp, $dest) or
	    $state->fatal("Can't create final signed package: #1", $!);
	if ($state->opt('C')) {
		$state->system(sub {
		    chdir($output);
		    open(STDOUT, '>>', 'SHA256');
		    },
		    OpenBSD::Paths->sha256, '-b', $pkg->name.".tgz");
    	}
}

sub sign_list
{
	my ($self, $l, $repo, $maxjobs, $state) = @@_;
	$state->{total} = scalar @@$l;
	$maxjobs //= 1;
	my $code = sub {
		my $name = shift;
		my $pkg = $repo->find($name);
		if (!defined $pkg) {
			$state->errsay("#1 not found", $name);
		} else {
			$self->sign_existing_package($state, $pkg);
		}
	    };
	my $display = $state->verbose ?
	    sub {
		$state->progress->set_header("Signed ".shift);
		$state->{done}++;
		$state->progress->next($state->ntogo);
	    } :
	    sub {
	    };
	if ($maxjobs > 1) {
		my $jobs = {};
		my $n = 0;
		my $reap_job = sub {
			my $pid = wait;
			if (!defined $jobs->{$pid}) {
				$state->fatal("Wait returned #1: unknown process", $pid);
			}
			if ($? != 0) {
				$state->fatal("Signature of #1 failed\n", 
				    $jobs->{$pid});
			}
			$n--;
			&$display($jobs->{$pid});
			delete $state->{signer}{pubkey};
			delete $jobs->{$pid};
		};
			
		while (@@$l > 0) {
			my $name = shift @@$l;
			my $pid = fork();
			if ($pid == 0) {
				$repo->reinitialize;
				&$code($name);
				exit(0);
			} else {
				$jobs->{$pid} = $name;
				$n++;
			}
			if ($n >= $maxjobs) {
				&$reap_job;
			}
		}
		while ($n != 0) {
			&$reap_job;
		}
	} else {
		for my $name (@@$l) {
			&$code($name);
			&$display($name);
			delete $state->{signer}{pubkey};
		}
	}
	if ($state->opt('C')) {
		$state->system(sub {
		    chdir($state->{output_dir});
		    open(STDOUT, '>', 'SHA256.new');
		    }, 'sort', 'SHA256');
		rename($state->{output_dir}.'/SHA256.new', 
		    $state->{output_dir}.'/SHA256');
	}
}

sub sign_existing_repository
{
	my ($self, $state, $source) = @@_;
	require OpenBSD::PackageRepository;
	my $repo = OpenBSD::PackageRepository->new($source, $state);
	if ($state->{signer}->want_local && !$repo->is_local_file) {
		$state->fatal("Signing distant source is not supported");
	}
	my @@list = sort @@{$repo->list};
	if (@@list == 0) {
		$state->errsay('Source repository "#1" is empty', $source);
    	}
	$self->sign_list(\@@list, $repo, $state->opt('j'), $state);
}


sub parse_and_run
{
	my ($self, $cmd) = @@_;
	my $state = OpenBSD::PkgSign::State->new($cmd);
	$state->handle_options;
	if (!defined $state->{source} && @@ARGV == 0) {
		$state->usage("Nothing to sign");
	}
	if (defined $state->{source}) {
		$self->sign_existing_repository($state, 
		    $state->{source});
	}
	$self->sign_list(\@@ARGV, $state->repo, $state->opt('j'), 
	    $state);
	return 0;
}

@


1.15
log
@framework for some performance stats as a -V... option (like how much
of a package you actually downloaded, or how many packages you touch)
okay aja@@
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.14 2016/10/03 13:17:30 espie Exp $
d68 1
a68 2
	$state->{wantntogo} = $state->{extra_stats} || 
	    $state->config->istrue("ntogo");
@


1.14
log
@kill creating old signatures.
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.13 2016/10/03 12:14:08 espie Exp $
d32 1
d46 4
d53 2
a54 2
	$state->SUPER::handle_options('Cij:o:S:s:',
	    '[-Cv] [-D name[=value]] -s signify2 -s priv',
d68 2
a197 1
	$state->{wantntogo} = $state->config->istrue("ntogo");
@


1.13
log
@display a decent error message
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.12 2016/10/03 10:59:54 espie Exp $
d49 1
a49 1
	    '[-Cv] [-D name[=value]] -s x509|signify|signify2 [-s cert] -s priv',
a62 22
}

package OpenBSD::PackingElement;
sub copy_over
{
}

package OpenBSD::PackingElement::SpecialFile;
sub copy_over
{
	my ($self, $state, $wrarc, $rdarc) = @@_;
	$wrarc->destdir($rdarc->info);
	my $e = $wrarc->prepare($self->{name});
	$e->write;
}

package OpenBSD::PackingElement::FileBase;
sub copy_over
{
	my ($self, $state, $wrarc, $rdarc) = @@_;
	my $e = $rdarc->next;
	$e->copy($wrarc);
@


1.12
log
@throw a decent error message, signify2 can't (yet) sign non local packages
(it would need a way to get "raw" gzip data)
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.11 2016/09/28 12:32:13 espie Exp $
d123 7
a129 2
		my $pkg = $repo->find(shift);
		$self->sign_existing_package($state, $pkg);
@


1.11
log
@oops, forgot THAT hook. You have to start with unsigned to get signed
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.10 2016/09/15 13:14:03 espie Exp $
d192 3
@


1.10
log
@actual signify2 code, a bit refactoring
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.9 2016/09/06 10:41:51 espie Exp $
d46 2
@


1.9
log
@remove code that allows pkg_create to sign
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.8 2016/05/09 14:17:24 espie Exp $
d47 1
a47 1
	    '[-Cv] [-D name[=value]] -s x509|signify [-s cert] -s priv',
d94 1
a94 4
	my $dir = $pkg->info;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
	my $dest = $output.'/'.$plist->pkgname.".tgz";
	# In incremental mode, don't bother signing known packages
a96 1
			$pkg->wipe_info;
a99 3
	$plist->set_infodir($dir);
	$state->add_signature($plist);
	$plist->save;
d101 1
a101 1
	my $wrarc = $state->create_archive($tmp, ".");
a102 29
	my $fh;
	my $url = $pkg->url;
	my $buffer;

	if (defined $pkg->{length} and 
	    $url =~ s/^file:// and open($fh, "<", $url) and
	    $fh->seek($pkg->{length}, 0) and $fh->read($buffer, 2)
	    and $buffer eq "\x1f\x8b" and $fh->seek($pkg->{length}, 0)) {
	    	#$state->say("FAST #1", $plist->pkgname);
		$wrarc->destdir($pkg->info);
		my $e = $wrarc->prepare('+CONTENTS');
		$e->write;
		close($wrarc->{fh});
		delete $wrarc->{fh};

		open(my $fh2, ">>", $tmp) or 
		    $state->fatal("Can't append to #1", $tmp);
		require File::Copy;
		File::Copy::copy($fh, $fh2) or 
		    $state->fatal("Error in copy #1", $!);
		close($fh2);
	} else {
	    	#$state->say("SLOW #1", $plist->pkgname);
		$plist->copy_over($state, $wrarc, $pkg);
		$wrarc->close;
	}
	close($fh) if defined $fh;

	$pkg->wipe_info;
d111 1
a111 1
		    OpenBSD::Paths->sha256, '-b', $plist->pkgname.".tgz");
@


1.8
log
@prepare for API tweaks of OpenBSD::MkTemp
okay afresh1@@
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.7 2014/10/11 08:41:06 espie Exp $
d41 4
d46 1
a46 1
	$state->SUPER::handle_options('Cij:o:S:',
d49 3
@


1.7
log
@allow signing to proceed when interrupted
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.6 2014/01/25 10:18:38 espie Exp $
d100 1
a100 1
	my $tmp = OpenBSD::Temp::permanent_file($output, "pkg");
@


1.6
log
@somehow, bytes got garbled. Be less cute and seek twice, that works.
sorry about that.
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.5 2014/01/23 22:57:06 espie Exp $
d42 1
a42 1
	$state->SUPER::handle_options('Cj:o:S:',
d89 8
d133 1
a133 1
	rename($tmp, $output.'/'.$plist->pkgname.".tgz") or
@


1.5
log
@tweak the way we create and sign packages significantly:

all modern compression formats support multi-stream archives.
Store the packing-list as a separate stream, and note where the
first stream ends when reading back the packing list.

When pkg_sign sees a split-stream archive, it does not need to unpack/repack
the whole archive: it can just sign the packing-list, close the stream, and
copy the next stream(s) from the source archive verbatim.

This is perfectly transparent to pkg_add, but abuses IO::Uncompress::Gunzip
internals slightly (to be solved with cpan).

also adds explicit option -C for generating a SHA256 list of all packages.

and okay naddy@@
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.4 2014/01/23 21:05:26 espie Exp $
d102 1
a102 1
	    and $buffer eq "\x1f\x8b") {
a111 1
		print $fh2 "\x1f\x8b";
@


1.4
log
@oops, pkg_sign is unhappy without -o.
Minimal fix, in order not to create too much conflict with pending work...

(problem noticed by naddy@@)
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.3 2014/01/23 12:32:40 espie Exp $
d42 2
a43 2
	$state->SUPER::handle_options('j:o:S:',
	    '[-v] [-D name[=value]] -s x509|signify [-s cert] -s priv',
d86 1
a86 1
	my $output = $state->{output_dir} // ".";
d94 30
a123 2
	$plist->copy_over($state, $wrarc, $pkg);
	$wrarc->close;
d128 7
a134 5
	$state->system(sub {
	    chdir($output);
	    open(STDOUT, '>>', 'SHA256');
	    },
	    OpenBSD::Paths->sha256, '-b', $plist->pkgname.".tgz");
d197 8
a204 6
	$state->system(sub {
	    chdir($state->{output_dir}) if $state->{output_dir};
	    open(STDOUT, '>', 'SHA256.new');
	    }, 'sort', 'SHA256');
	rename($state->{output_dir}.'/SHA256.new', 
	    $state->{output_dir}.'/SHA256');
@


1.3
log
@clean-up synopsis
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.2 2014/01/23 12:28:48 espie Exp $
d48 1
@


1.2
log
@check parameters better.
create -o directory if necessary
@
text
@d3 1
a3 1
# $OpenBSD: PkgSign.pm,v 1.1 2014/01/23 11:45:22 espie Exp $
d43 2
a44 3
	    '[-v] [-D name[=value]]',
	    '[-s [x509 -s cert|signify] -s priv] [-o dir]',
	    '[-S source|pkg-name...]');
@


1.1
log
@reorg code: make "signing only" a separate command, as it has nothing in
common with pkg_create.

Move the signing part in its own module, so that PkgCreate can reuse it
for "signing while we build" mode.

naddy@@ agrees
@
text
@d3 1
a3 1
# $OpenBSD: PkgCreate.pm,v 1.96 2014/01/18 01:10:36 espie Exp $
a35 3
			    if (!-d $state->{output_dir}) {
				    $state->usage("no such dir");
			    }
d46 8
a53 1

d194 3
@

