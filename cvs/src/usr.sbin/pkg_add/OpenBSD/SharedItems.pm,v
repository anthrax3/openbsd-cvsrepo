head	1.32;
access;
symbols
	OPENBSD_6_2:1.32.0.14
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.32.0.12
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.10
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.4
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.31.0.6
	OPENBSD_5_6_BASE:1.31
	OPENBSD_5_5:1.31.0.4
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.30.0.12
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.30.0.10
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.8
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.30
	OPENBSD_5_1:1.30.0.6
	OPENBSD_5_0:1.30.0.4
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.2
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.13.0.12
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.8
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.6
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5;
locks; strict;
comment	@# @;


1.32
date	2014.11.20.14.10.18;	author espie;	state Exp;
branches;
next	1.31;
commitid	WyZPadwDVhVpVs1i;

1.31
date	2014.02.06.16.55.01;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2010.08.03.14.10.12;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2010.08.01.10.03.24;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.18.09.05.03;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.09.07.26.01;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2009.12.24.14.37.28;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2009.12.21.10.46.16;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.21.10.38.58;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.20.22.38.45;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2009.12.17.11.57.02;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2009.11.11.13.00.40;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.11.11.13.16;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.20.13.44.40;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.16.09.29.37;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.01.14.58.29;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.22.10.11.59;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.02.15.05.30;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.29.11.09.29;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.31.17.09.19;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.27.12.07.58;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.27.11.36.16;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.11.11.16.40;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.26.17.25.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.26.17.23.15;	author espie;	state Exp;
branches;
next	;


desc
@@


1.32
log
@avoid some warning message, normal dirs don't have any log info registered
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: SharedItems.pm,v 1.31 2014/02/06 16:55:01 espie Exp $
#
# Copyright (c) 2004-2006 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::SharedItems;

use OpenBSD::Error;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::Paths;

sub find_items_in_installed_packages
{
	my $state = shift;
	my $db = OpenBSD::SharedItemsRecorder->new;
	$state->status->what("Read")->object("shared items");
	$state->progress->for_list("Read shared items", [installed_packages()],
	    sub {
		my $e = shift;
		my $plist = OpenBSD::PackingList->from_installation($e,
		    \&OpenBSD::PackingList::SharedItemsOnly) or return;
		return if !defined $plist;
		$plist->record_shared($db, $e);
	    });
	return $db;
}

sub check_shared
{
	my ($set, $o) = @@_;
	if (!defined $set->{db}) {
		$set->{db} = OpenBSD::SharedItemsRecorder->new;
		for my $pkg (installed_packages()) {
			next if $set->{older}{$pkg};
			my $plist = OpenBSD::PackingList->from_installation($pkg,
			    \&OpenBSD::PackingList::SharedItemsOnly) or next;
			next if !defined $plist;
			$plist->record_shared($set->{db}, $pkg);
		}
	}
	if (defined $set->{db}{dirs}{$o->fullname}) {
		return 1;
	} else {
		push(@@{$set->{old_shared}{$o->fullname}}, $o);
		return 0;
	}
}

sub wipe_directory
{
	my ($state, $h, $d) = @@_;

	my $realname = $state->{destdir}.$d;

	for my $i (@@{$h->{$d}}) {
		$i->cleanup($state);
	}
	if (!rmdir $realname) {
		$state->log("Error deleting directory #1: #2",
		    $realname, $!)
			unless $state->{dirs_okay}{$d};
		return 0;
	}
	return 1;
}

sub cleanup
{
	my ($recorder, $state) = @@_;

	my $remaining = find_items_in_installed_packages($state);

	$state->progress->clear;
	$state->status->what("Clean");
	$state->progress->set_header("Clean shared items");
	my $h = $recorder->{dirs};
	my $u = $recorder->{users};
	my $g = $recorder->{groups};
	my $total = 0;
	$total += keys %$h if defined $h;
	$total += keys %$u if defined $u;
	$total += keys %$g if defined $g;
	my $done = 0;

	for my $d (sort {$b cmp $a} keys %$h) {
		$state->progress->show($done, $total);
		my $realname = $state->{destdir}.$d;
		if (defined $remaining->{dirs}{$realname}) {
			for my $i (@@{$h->{$d}}) {
				$state->log->set_context('-'.$i->{pkgname});
				$i->reload($state);
			}
		} else {
			wipe_directory($state, $h, $d);
		}
		$done++;
	}
	while (my ($user, $pkgname) = each %$u) {
		$state->progress->show($done, $total);
		next if $remaining->{users}{$user};
		if ($state->{extra}) {
			$state->system(OpenBSD::Paths->userdel, '--',
			    $user);
		} else {
			$state->log->set_context('-'.$pkgname);
			$state->log("You should also run /usr/sbin/userdel #1", $user);
		}
		$done++;
	}
	while (my ($group, $pkgname) = each %$g) {
		$state->progress->show($done, $total);
		next if $remaining->{groups}{$group};
		if ($state->{extra}) {
			$state->system(OpenBSD::Paths->groupdel, '--',
			    $group);
		} else {
			$state->log->set_context('-'.$pkgname);
			$state->log("You should also run /usr/sbin/groupdel #1", $group);
		}
		$done++;
	}
	if ($state->verbose >= 2) {
		$state->progress->next;
	} else {
		$state->progress->clear;
	}
}

package OpenBSD::PackingElement;
sub cleanup
{
}

sub reload
{
}

package OpenBSD::PackingElement::Mandir;
sub cleanup
{
	my ($self, $state) = @@_;
	my $fullname = $state->{destdir}.$self->fullname;
	$state->log->set_context('-'.$self->{pkgname});
	$state->log("You may wish to remove #1 from man.conf", $fullname);
	for my $f (OpenBSD::Paths->man_cruft) {
		unlink("$fullname/$f");
	}
}

package OpenBSD::PackingElement::Fontdir;
sub cleanup
{
	my ($self, $state) = @@_;
	my $fullname = $state->{destdir}.$self->fullname;
	$state->log->set_context('-'.$self->{pkgname});
	$state->log("You may wish to remove #1 from your font path", $fullname);
	for my $f (OpenBSD::Paths->font_cruft) {
		unlink("$fullname/$f");
	}
}

package OpenBSD::PackingElement::Infodir;
sub cleanup
{
	my ($self, $state) = @@_;
	my $fullname = $state->{destdir}.$self->fullname;
	for my $f (OpenBSD::Paths->info_cruft) {
		unlink("$fullname/$f");
	}
}

1;
@


1.31
log
@don't store full directory objects if they're not "special", just knowing
there's a directory that should stay around is enough.
shaves on the number of shared directories for shared items quite a lot.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.30 2010/12/24 09:04:14 espie Exp $
a71 1
		$state->log->set_context('-'.$i->{pkgname});
d159 1
d171 1
@


1.30
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d78 1
a78 1
			unless $state->{dirs_okay}->{$d};
d105 1
a105 1
		if ($remaining->{dirs}->{$realname}) {
d117 1
a117 1
		next if $remaining->{users}->{$user};
d129 1
a129 1
		next if $remaining->{groups}->{$group};
@


1.29
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.28
log
@sort journal messsages in a better way, put - before +, so that one can
see deinstall info before new install info (prompted by a comment from
tedu@@)
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.27 2010/08/01 10:03:24 espie Exp $
@


1.27
log
@fix the qt 4.5 -> 4.6 update issue.
since we usually deal with directories in a global way, replacing a
directory with something else didn't work.
the fix is to record removed directories in Vstat in a "lazy" way:
we only test these objects for existence if we add something else at
the same location. Since this happens rarely, we can afford to perform
the whole SharedItems dance twice...
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.26 2010/06/30 10:51:04 espie Exp $
d72 1
a72 1
		$state->log->set_context($i->{pkgname});
d107 1
a107 1
				$state->log->set_context($i->{pkgname});
d122 1
a122 1
			$state->log->set_context($pkgname);
d134 1
a134 1
			$state->log->set_context($pkgname);
@


1.26
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
d37 1
a37 1
		    \&OpenBSD::PackingList::SharedItemsOnly) or next;
d44 40
d111 1
a111 9
			for my $i (@@{$h->{$d}}) {
				$state->log->set_context($i->{pkgname});
				$i->cleanup($state);
			}
			if (!rmdir $realname) {
				$state->log("Error deleting directory #1: #2",
				    $realname, $!)
					unless $state->{dirs_okay}->{$d};
			}
@


1.25
log
@whitespace cleanup
@
text
@@


1.24
log
@reuse for_list
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.23 2010/06/09 07:26:01 espie Exp $
@


1.23
log
@ui changes: go thru a state object for most printouts
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.22 2010/05/10 09:17:55 espie Exp $
a31 2
	my @@list = installed_packages();
	my $total = @@list;
d33 3
a35 4
	$state->progress->set_header("Read shared items");
	my $done = 0;
	for my $e (@@list) {
		$state->progress->show($done, $total);
d38 1
a38 1
		next if !defined $plist;
d40 1
a40 2
		$done++;
	}
d62 17
a78 19
	if (defined $h) {
		for my $d (sort {$b cmp $a} keys %$h) {
			$state->progress->show($done, $total);
			my $realname = $state->{destdir}.$d;
			if ($remaining->{dirs}->{$realname}) {
				for my $i (@@{$h->{$d}}) {
					$state->log->set_context($i->{pkgname});
					$i->reload($state);
				}
			} else {
				for my $i (@@{$h->{$d}}) {
					$state->log->set_context($i->{pkgname});
					$i->cleanup($state);
				}
				if (!rmdir $realname) {
					$state->log("Error deleting directory #1: #2",
					    $realname, $!)
						unless $state->{dirs_okay}->{$d};
				}
a79 1
			$done++;
d81 1
d83 9
a91 12
	if (defined $u) {
		while (my ($user, $pkgname) = each %$u) {
			$state->progress->show($done, $total);
			next if $remaining->{users}->{$user};
			if ($state->{extra}) {
				$state->system(OpenBSD::Paths->userdel, '--',
				    $user);
			} else {
				$state->log->set_context($pkgname);
				$state->log("You should also run /usr/sbin/userdel #1", $user);
			}
			$done++;
d93 1
d95 9
a103 12
	if (defined $g) {
		while (my ($group, $pkgname) = each %$g) {
			$state->progress->show($done, $total);
			next if $remaining->{groups}->{$group};
			if ($state->{extra}) {
				$state->system(OpenBSD::Paths->groupdel, '--',
				    $group);
			} else {
				$state->log->set_context($pkgname);
				$state->log("You should also run /usr/sbin/groupdel #1", $group);
			}
			$done++;
d105 1
@


1.22
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d81 3
a83 2
					$state->log("Error deleting directory $realname: $!\n")
					    unless $state->{dirs_okay}->{$d};
d98 1
a98 1
				$state->log("You should also run /usr/sbin/userdel $user\n");
d112 1
a112 1
				$state->log("You should also run /usr/sbin/groupdel $group\n");
d138 1
a138 1
	$state->log("You may wish to remove ", $fullname, " from man.conf\n");
d149 1
a149 1
	$state->log("You may wish to remove ", $fullname, " from your font path\n");
@


1.21
log
@make the final progress bar vanish unless verbose >= 2, as requested by
Theo.
@
text
@d39 1
a39 1
		my $plist = OpenBSD::PackingList->from_installation($e, 
d93 1
a93 1
				$state->system(OpenBSD::Paths->userdel, '--', 
@


1.20
log
@consistent spelling
@
text
@d116 5
a120 1
	$state->progress->next;
@


1.19
log
@much simpler SIG{INFO} handling: create a status object in state and
update it when needed. Install a SIG{INFO} handler at start that will do
what's needed.
@
text
@d34 1
a34 1
	$state->status->what("Read")->object("Shared items");
@


1.18
log
@change verbosity handling: be silent by default, turn on the first level if -v.
Add more levels, specifically, lots of info regarding individual files only
visible if -vvvvv.
Make -n display the same stuff as normal (need -n -v to display more stuff).
Introduce -s, "size-only", turns on -n and does skip any extraction.
Sprinkle handlers for SIG_INFO, not really nice yet.

Note that -n is non functional for complex updates, because of caching
issues I have to fix.
@
text
@d34 1
a34 1
	local $SIG{INFO} = sub { $state->say("Read shared items"); };
d55 1
a55 1
	local $SIG{INFO} = sub { $state->say("Clean shared items"); };
@


1.17
log
@be slightly more paranoid about shell stuff we run.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.16 2009/11/11 13:00:40 espie Exp $
d30 1
a30 1
	my $progress = shift;
d34 2
a35 1
	$progress->set_header("Read shared items");
d38 1
a38 1
		$progress->show($done, $total);
d52 1
a52 1
	my $remaining = find_items_in_installed_packages($state->progress);
d55 1
@


1.16
log
@vsystem, system, unlink can mostly go through state, and do the ->clear part
as well.
@
text
@d2 1
a2 1
# $OpenBSD$
d91 2
a92 1
				$state->system(OpenBSD::Paths->userdel, $user);
d105 2
a106 1
				$state->system(OpenBSD::Paths->groupdel, $group);
@


1.15
log
@remove forwarders, and provide a sensible API that says what's going on
(e.g., we're logging information for later).
@
text
@d91 1
a91 1
				System(OpenBSD::Paths->userdel, $user);
d104 1
a104 1
				System(OpenBSD::Paths->groupdel, $group);
@


1.14
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@d70 1
a70 1
					$state->set_pkgname($i->{pkgname});
d75 1
a75 1
					$state->set_pkgname($i->{pkgname});
d79 1
a79 1
					$state->print("Error deleting directory $realname: $!\n")
d93 2
a94 2
				$state->set_pkgname($pkgname);
				$state->print("You should also run /usr/sbin/userdel $user\n");
d106 2
a107 2
				$state->set_pkgname($pkgname);
				$state->print("You should also run /usr/sbin/groupdel $group\n");
d129 1
a129 1
	$state->print("You may wish to remove ", $fullname, " from man.conf\n");
d140 1
a140 1
	$state->print("You may wish to remove ", $fullname, " from your font path\n");
@


1.13
log
@sprinkle code to deal gracefully with absent packing-lists.
makes it easier for people to recover after a disk crash that
leaves /var/db/pkg half-empty.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.12 2007/06/16 09:29:37 espie Exp $
d20 1
@


1.12
log
@use OpenBSD::Paths contents
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.11 2007/06/01 14:58:29 espie Exp $
d39 1
@


1.11
log
@refactor ProgressMeter code to create objects, put these into state.
Create a common state class for delete and add, put the progressmeter
creation in there.

neat effect: we don't have a progressmeter, we use a stub class instead
and *never* pull the code in at all.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.10 2007/05/22 10:11:59 espie Exp $
d25 1
d89 1
a89 1
				System("/usr/sbin/userdel", $user);
d102 1
a102 1
				System("/usr/sbin/groupdel", $group);
d128 3
a130 1
	unlink("$fullname/whatis.db");
d139 3
a141 3
	unlink("$fullname/fonts.alias");
	unlink("$fullname/fonts.dir");
	unlink("$fullname/fonts.cache-1");
d149 3
a151 1
	unlink("$fullname/dir");
@


1.10
log
@introduce a SharedItemsRecorder (put it into Vstat, since that's a file
common to Add and Delete, for now).

Use it to have common code that records items to remove / items remaining.

Stash it into pkg_add/pkg_delete state, and abstract the cleaning up
operation into the SharedItemsRecorder (so that pkg_add and pkg_delete no
longer have to know about the internals of SharedItems at all).
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.9 2007/05/02 15:05:30 espie Exp $
a21 1
use OpenBSD::ProgressMeter;
d28 1
d32 1
a32 1
	OpenBSD::ProgressMeter::set_header("Read shared items");
d35 1
a35 1
		OpenBSD::ProgressMeter::show($done, $total);
d48 1
a48 1
	my $remaining = find_items_in_installed_packages();
d50 2
a51 2
	OpenBSD::ProgressMeter::clear();
	OpenBSD::ProgressMeter::set_header("Clean shared items");
d63 1
a63 1
			OpenBSD::ProgressMeter::show($done, $total);
d85 1
a85 1
			OpenBSD::ProgressMeter::show($done, $total);
d98 1
a98 1
			OpenBSD::ProgressMeter::show($done, $total);
d109 1
a109 1
	OpenBSD::ProgressMeter::next();
@


1.9
log
@$o->method() becomes $o->method
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.8 2007/04/29 11:09:29 espie Exp $
d29 1
a29 1
	my $db = {dirs=>{}, users=>{}, groups=>{}};
d38 1
a38 1
		$plist->record_shared_item($e, $db);
d46 1
a46 1
	my $state = shift;
a47 4
	my $h = $state->{dirs_to_rm};
	my $u = $state->{users_to_rm};
	my $g = $state->{groups_to_rm};
	return unless defined $h or defined $u or defined $g;
d52 3
a112 4
sub record_shared_item
{
}

a118 30
}

package OpenBSD::PackingElement::NewUser;
sub record_shared_item
{
	my ($self, $pkgname, $db) = @@_;
	my $k = $self->{name};
	$db->{users}->{$k} = $pkgname;
}

package OpenBSD::PackingElement::NewGroup;
sub record_shared_item
{
	my ($self, $pkgname, $db) = @@_;
	my $k = $self->{name};
	$db->{groups}->{$k} = $pkgname;
}

package OpenBSD::PackingElement::DirBase;
sub record_shared_item
{
	my ($self, $pkgname, $db) = @@_;
	my $k = $self->fullname;
	$db->{dirs}->{$k} = 1;
}

package OpenBSD::PackingElement::DirRm;
sub record_shared_item
{
	&OpenBSD::PackingElement::DirBase::record_shared_item;
@


1.8
log
@replace $p->visit('method') calls with $p->method
now that it works.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.7 2007/04/15 10:17:29 espie Exp $
d146 1
a146 1
	my $k = $self->fullname();
d160 1
a160 1
	my $fullname = $state->{destdir}.$self->fullname();
d169 1
a169 1
	my $fullname = $state->{destdir}.$self->fullname();
d180 1
a180 1
	my $fullname = $state->{destdir}.$self->fullname();
@


1.7
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.6 2006/07/31 17:09:19 espie Exp $
d38 1
a38 1
		$plist->visit('record_shared_item', $e, $db);
@


1.6
log
@cosmetic: comments, and better method name.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.5 2004/11/27 12:07:58 espie Exp $
d4 1
a4 1
# Copyright (c) 2004 Marc Espie <espie@@openbsd.org>
@


1.5
log
@record sample/extra directories if !extra, so that SharedItems won't warn
if those directories are not empty...
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.4 2004/11/27 11:36:16 espie Exp $
d27 1
a27 1
sub record_all
d52 1
a52 1
	my $remaining = record_all();
@


1.4
log
@be verbose if !extra, tell user what they should do manually.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.3 2004/11/11 11:16:40 espie Exp $
d77 2
a78 1
					$state->print("Error deleting directory $realname: $!\n");
@


1.3
log
@introduce shortcuts to read/write contents from_installation/to_installation

use these to simplify all those packing lists manipulations.

demote non-root detection to a warning in -n mode:
fix a couple of minor bugs, of stuff that was run in -n mode and should not.
Namely, manpages were indexed/unindexed (ouch) and tempfiles were creating
during updates.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.2 2004/10/26 17:25:36 espie Exp $
d58 2
a59 4
	if ($state->{extra}) {
		$total += keys %$u if defined $u;
		$total += keys %$g if defined $g;
	}
d83 5
a87 5
	if ($state->{extra}) {
		if (defined $u) {
			for my $user (keys %$u) {
				OpenBSD::ProgressMeter::show($done, $total);
				next if $remaining->{users}->{$user};
d89 3
a91 1
				$done++;
d93 1
d95 6
a100 4
		if (defined $g) {
			for my $group (keys %$g) {
				OpenBSD::ProgressMeter::show($done, $total);
				next if $remaining->{groups}->{$group};
d102 3
a104 1
				$done++;
d106 1
@


1.2
log
@more accurate name: DirRmOnly -> SharedItemsOnly
use a visitor instead of hardcoding items/users/groups.
@
text
@d2 1
a2 1
# $OpenBSD: SharedItems.pm,v 1.1 2004/10/26 17:23:15 espie Exp $
d36 2
a37 1
		my $plist = OpenBSD::PackingList->fromfile(installed_info($e).CONTENTS, \&OpenBSD::PackingList::SharedItemsOnly) or next;
@


1.1
log
@move the code that handles shared items into a separate Module.

- It will be used after deletion/adding during updates.
- We might avoid loading it if a package contains no new directories.
Actually a lot of packages don't use it.
@
text
@d2 1
a2 1
# $OpenBSD: pkg_delete,v 1.62 2004/10/23 09:27:48 espie Exp $
d36 1
a36 1
		my $plist = OpenBSD::PackingList->fromfile(installed_info($e).CONTENTS, \&OpenBSD::PackingList::DirrmOnly) or next;
@

