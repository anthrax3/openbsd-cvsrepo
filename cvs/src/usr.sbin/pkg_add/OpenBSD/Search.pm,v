head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.2
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.4
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.28.0.8
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.10
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.6
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.4
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.27.0.10
	OPENBSD_5_4_BASE:1.27
	OPENBSD_5_3:1.27.0.8
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.6
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.4
	OPENBSD_5_0:1.27.0.2
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7;
locks; strict;
comment	@# @;


1.29
date	2016.06.14.15.41.31;	author espie;	state Exp;
branches;
next	1.28;
commitid	XOkjG8dyAbBzo5Y6;

1.28
date	2014.01.31.10.30.48;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.02.12.12.58;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2010.01.05.12.20.47;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.05.11.31.07;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2009.12.27.00.22.44;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.05.10.53.04;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.30.18.45.14;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2009.11.10.14.37.20;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2009.11.10.14.32.31;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2009.11.10.11.36.56;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.09.17.54.55;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2009.11.09.17.50.24;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.11.18.04.41;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.19.15.18.23;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.19.14.58.32;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.28.12.55.03;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.04.14.57.33;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.19.09.45.33;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.18.13.22.06;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.14.11.31.10;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.14.11.22.00;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.14.11.02.15;	author espie;	state Exp;
branches;
next	;


desc
@@


1.29
log
@new syntax: pkgname%branch   to select a branch wherever it makes sense.
see pkg_add(1) for details.

Search framework makes that surprisingly simple.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Search.pm,v 1.28 2014/01/31 10:30:48 espie Exp $
#
# Copyright (c) 2007 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::Search;
sub match_locations
{
	my ($self, $o) = @@_;
	require OpenBSD::PackageLocation;

	my @@l = map {$o->new_location($_)} $self->match($o);
	return \@@l;
}

package OpenBSD::Search::PkgSpec;
our @@ISA=(qw(OpenBSD::Search));

sub filter
{
	my ($self, @@list) = @@_;
	return $self->{spec}->match_ref(\@@list);
}

sub filter_libs
{
	my ($self, @@list) = @@_;
	return $self->{spec}->match_libs_ref(\@@list);
}

sub match_locations
{
	my ($self, $o) = @@_;
	return $self->{spec}->match_locations($o->locations_list);
}

sub filter_locations
{
	my ($self, $l) = @@_;
	return $self->{spec}->match_locations($l);
}

sub new
{
	my ($class, $pattern, $with_partial) = @@_;
	require OpenBSD::PkgSpec;

	bless { spec => $class->spec_class->new($pattern, $with_partial)}, 
	    $class;
}

sub add_pkgpath_hint
{
	my ($self, $pkgpath) = @@_;
	$self->{pkgpath} = $pkgpath;
	return $self;
}

sub spec_class
{ "OpenBSD::PkgSpec" }

sub is_valid
{
	my $self = shift;
	return $self->{spec}->is_valid;
}

package OpenBSD::Search::Exact;
our @@ISA=(qw(OpenBSD::Search::PkgSpec));
sub spec_class
{ "OpenBSD::PkgSpec::Exact" }

package OpenBSD::Search::Stem;
our @@ISA=(qw(OpenBSD::Search));

sub new
{
	my ($class, $stem) = @@_;
	if ($stem =~ m/^(.*)\%(.*)/) {
		return ($class->_new($1), 
		    OpenBSD::Search::FilterLocation->match_partialpath($2));
	} else {
		return $class->_new($stem);
	}
}

sub _new
{
	my ($class, $stem) = @@_;

	if ($stem =~ m/^(.*)\-\-(.*)/) {
		# XXX
		return OpenBSD::Search::Exact->new("$1-*-$2");
    	}
	return bless {"$stem" => 1}, $class;
}

sub split
{
	my ($class, $pkgname) = @@_;
	require OpenBSD::PackageName;

	return $class->new(OpenBSD::PackageName::splitstem($pkgname));
}

sub add_stem
{
	my ($self, $extra) = @@_;
	$self->{$extra} = 1;

}

sub match
{
	my ($self, $o) = @@_;

	my @@r = ();
	for my $k (keys %$self) {
		push(@@r, $o->stemlist->find($k));
	}
	return @@r;
}

sub _keep
{
	my ($self, $stem) = @@_;
	return defined $self->{$stem};
}

sub filter
{
	my ($self, @@l) = @@_;
	my @@result = ();
	require OpenBSD::PackageName;
	for my $pkg (@@l) {
		if ($self->_keep(OpenBSD::PackageName::splitstem($pkg))) {
			push(@@result, $pkg);
		}
	}
	return @@result;
}

package OpenBSD::Search::PartialStem;
our @@ISA=(qw(OpenBSD::Search::Stem));

sub match
{
	my ($self, $o) = @@_;
	my @@r = ();
	for my $k (keys %$self) {
		push(@@r, $o->stemlist->find_partial($k));
	}
	return @@r;
}

sub _keep
{
	my ($self, $stem) = @@_;
	for my $partial (keys %$self) {
		if ($stem =~ /\Q$partial\E/) {
			return 1;
		}
	}
	return 0;
}

package OpenBSD::Search::FilterLocation;
our @@ISA=(qw(OpenBSD::Search));
sub new
{
	my ($class, $code) = @@_;

	return bless {code => $code}, $class;
}

sub filter_locations
{
	my ($self, $l) = @@_;
	return &{$self->{code}}($l);
}

sub more_recent_than
{
	my ($class, $name, $rfound) = @@_;
	require OpenBSD::PackageName;

	my $f = OpenBSD::PackageName->from_string($name);

	return $class->new(
sub {
	my $l = shift;
	my $r = [];
	for my $e (@@$l) {
		if ($f->{version}->compare($e->pkgname->{version}) <= 0) {
			push(@@$r, $e);
		}
		if (ref $rfound) {
			$$rfound = 1;
		}
	}
	return $r;
	});
}

sub keep_most_recent
{
	my $class = shift;
	return $class->new(
sub {
	my $l = shift;
	# no need to filter
	return $l if @@$l <= 1;

	require OpenBSD::PackageName;
	my $h = {};
	# we have to prove we have to keep it
	while (my $e = pop @@$l) {
		my $stem = $e->pkgname->{stem};
		my $keep = 1;
		# so let's compare with every element in $h with the same stem
		for my $f (@@{$h->{$e->pkgname->{stem}}}) {
			# if this is not the same flavors,
			# we don't filter
			if ($f->pkgname->flavor_string ne $e->pkgname->flavor_string) {
				next;
			}
			# okay, now we need to prove there's a common pkgpath
			if (!$e->update_info->match_pkgpath($f->update_info)) {
				next;
			}

			if ($f->pkgname->{version}->compare($e->pkgname->{version}) < 0) {
			    $f = $e;
			}
			$keep = 0;
			last;

		}
		if ($keep) {
			push(@@{$h->{$e->pkgname->{stem}}}, $e);
		}
	}
	my $largest = [];
	push @@$largest, map {@@$_} values %$h;
	return $largest;
}
	);
}

sub match_partialpath
{
	my ($class, $subdir) = @@_;
	return $class->new(
sub {
	my $l = shift;
	if (@@$l == 0) {
		return $l;
	}
	my @@l2 = ();
	for my $loc (@@$l) {
		if (!$loc) {
			next;
		}
		my $p2 = $loc->update_info;
		if (!$p2) {
			next;
		}
		if ($p2->pkgpath->partial_match($subdir)) {
			push(@@l2, $loc);
		}
	}
	return \@@l2;
}
	);
}

1;
@


1.28
log
@handle conflict with partial in a less hackish ways, by passing an
extra "with_partial" parameter to specs.
This also removes quite a lot extraneous objects.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.27 2011/07/02 12:12:58 espie Exp $
d94 7
d102 3
a104 1
	my $flavors;
d261 27
@


1.27
log
@allows .libs* packages to match correctly in the presence of @@conflict markers
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.26 2010/12/24 09:04:14 espie Exp $
d60 1
a60 1
	my ($class, $pattern) = @@_;
d63 2
a64 1
	bless { spec => $class->spec_class->new($pattern)}, $class;
@


1.26
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d38 6
@


1.25
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.24
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.23
log
@whitespace cleanup
@
text
@@


1.22
log
@whitespace fixes
@
text
@@


1.21
log
@better spec handling: instead of dying, create badspec objects that never
match anything. Add method is_valid (and propagators) to know whether a
spec is valid (to be used in pkg_create in a systematic way).
@
text
@d26 1
a26 1
	
d136 1
a136 1
			push(@@result, $pkg); 
d233 1
a233 1
			} 
@


1.20
log
@use Auto::cache
@
text
@d70 6
@


1.19
log
@fix partial stems, as noticed by numerous people
@
text
@d64 1
@


1.18
log
@change the internal representation of Search::Stem to allow the addition
of supplementary stems (useful for quirks)
@
text
@d141 5
a145 1
	return $o->stemlist->find_partial($self->{stem});
d151 6
a156 2
	my $partial = $self->{stem};
	return $stem =~ /\Q$partial\E/;
@


1.17
log
@tweak the rules a bit: the search filter for "more recent than" ought to
notice it sees older stuff. Even if they get filtered later on, this would
turn into a "no need to update".

(in actual use, I probably will need to open those packages and look at
the pkgpaths to make sure they are not valid candidates, and to compare
full signatures... oh well)
@
text
@d87 1
a87 1
	return bless {stem => $stem}, $class;
d98 7
d108 6
a113 1
	return $o->stemlist->find($self->{stem});
d119 1
a119 1
	return $self->{stem} eq $stem;
@


1.16
log
@kill more unused code
@
text
@d156 1
a156 1
	my ($class, $name) = @@_;
d168 3
@


1.15
log
@remove dead code: as far as possible, we use only
match_locations/filter_locations since we deal with location.

external API only uses spec->filter(), so we keep that one.
We still need the generic match/filter adapters for Stem searches.
@
text
@a30 13
# XXX this is not efficient
sub filter_locations
{
	my ($self, $l) = @@_;
	my $r = [];
	for my $loc (@@$l) {
		if ($self->filter($loc->{name})) {
			push(@@$r, $loc);
		}
	}
	return $r;
}

d34 1
a34 1
sub match_ref
d36 2
a37 2
	my ($self, $r) = @@_;
	return $self->{spec}->match_ref($r);
a49 6
}

sub filter
{
	my ($self, @@list) = @@_;
	return $self->match_ref(\@@list);
@


1.14
log
@bad espie: use strict/warnings consistently, and fix two nits and two
actual errors !
@
text
@a52 6
sub match
{
	my ($self, $o) = @@_;
	return $self->match_ref($o->list);
}

a155 16
}

package OpenBSD::Search::Filter;
our @@ISA=(qw(OpenBSD::Search));

sub new
{
	my ($class, $code) = @@_;

	return bless {code => $code}, $class;
}

sub filter
{
	my ($self, @@l) = @@_;
	return &{$self->{code}}(@@l);
@


1.13
log
@fix, need to keep =version  for "no need to update" to occur...
@
text
@d18 3
d68 1
a68 1
	return $self->{$spec}->match_locations($l);
d141 1
a141 1
		if ($self->_keep(OpenBSD::PackageName::splitstem($pkgname))) {
@


1.12
log
@okay, so updates become "true" updates: unless you say -F downgrade
then packages with an older version will be filtered out.
@
text
@d204 1
a204 1
		if ($f->{version}->compare($e->pkgname->{version}) < 0) {
@


1.11
log
@maybe I'll change the code later (two XXX), but allows flavor after stem,
so that e.g.
pkg_add star--
pkg_add star--static
are now not ambiguous.
@
text
@d192 20
@


1.10
log
@remove class FatPackageLocation. Instead make PackageLocation a hierarchy
so that I can handle installed packages without playing ping-pong with
the PackageRepository hierarchy (mostly)
@
text
@d103 6
@


1.9
log
@synch with my new style search/location changes
It's likely there will be some fallout, but it's getting a bit too large
to keep around.
This does kill a few very old oddities as well.
@
text
@d24 1
a24 1
	my @@l = map {OpenBSD::PackageLocation->new($o, $_)} $self->match($o);
@


1.8
log
@tweak the semantics so that no-default-conflict works.

requested by mbalmer@@,sturm@@. okay winiger@@
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.7 2007/06/04 14:57:33 espie Exp $
d23 3
a25 2

	return map {OpenBSD::PackageLocation->new($o, $_)} $self->match($o);
d31 3
a33 3
	my $self = shift;
	my @@r = ();
	while (my $loc = shift @@_) {
d35 1
a35 1
			push(@@r, $loc);
d38 1
a38 1
	return @@r;
d47 1
a47 7
	my @@l = ();

	for my $subpattern (@@{$self->{patterns}}) {
		require OpenBSD::PkgSpec;
		push(@@l, OpenBSD::PkgSpec::subpattern_match($subpattern, $r));
	}
	return @@l;
d56 12
d77 3
a79 2
	my @@l = split /\|/o, $pattern;
	bless { patterns => \@@l }, $class;
d88 3
d93 2
a94 35
sub match_ref
{
	my ($self, $r) = @@_;
	my @@l = ();

	for my $subpattern (@@{$self->{patterns}}) {
		if ($subpattern !~ m/^(.*?)\-(\d[^-]*)(.*)$/o) {
			next;
		}
		my ($stem, $version, $flavor) = ($1, $2, $3);
		$version =~ s/p\d+//;
		for my $pkg (@@$r) {
			if ($pkg eq $subpattern) {
				push(@@l, $pkg);
				next;
			}
			if ($pkg !~ m/^(.*?)\-(\d[^-]*)(.*)$/o) {
				next;
			}
			if ($1 ne $stem) {
				next;
			}
			if ($3 ne $flavor) {
				next;
			}
			my $pkgversion = $2;
			$pkgversion =~ s/p\d+//;
			if ($pkgversion ne $version) {
				next;
			}
			push(@@l, $pkg);
		}
	}
	return @@l;
}
a170 8
sub keep_most_recent
{
	my $class = shift;
	require OpenBSD::PackageName;
	
	return $class->new(\&OpenBSD::PackageName::keep_most_recent);
}

d182 47
a228 2
	my ($self, @@l) = @@_;
	return &{$self->{code}}(@@l);
@


1.7
log
@I am on drugs, I don't know where I found split can take strings as
arguments. Repair...
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.6 2007/06/04 14:40:39 espie Exp $
d78 38
@


1.6
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.5 2007/05/19 09:45:33 espie Exp $
d70 1
a70 1
	my @@l = split '|', $pattern;
@


1.5
log
@add match_locations/filter_locations methods to search stuff that returns
full pkg locations instead of package names.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.4 2007/05/18 13:22:06 espie Exp $
d70 1
a70 1
	my @@l = split /\|/, $pattern;
@


1.4
log
@Add pkgpath hints to pkgspec. Make PackageRepository/Source functional:
if a pkgpath is hinted at, then we build that package, and we delegate
to the corresponding File: repository.

Some XXX: we need to unlock the database temporarily, as the build
*requires* shared access to stuff that is going on (and possibly write
access for installing subpackages, so this cannot work 100% yet).

Still, this allows the transparent build of one single package, at least.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.3 2007/05/14 11:31:10 espie Exp $
d19 20
d161 15
@


1.3
log
@for completion, allow Stem object to filter as well.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.2 2007/05/14 11:22:00 espie Exp $
d52 6
@


1.2
log
@redo search filters as real objects. Accordingly, rename match_list to
filter.
@
text
@d2 1
a2 1
# $OpenBSD: Search.pm,v 1.1 2007/05/14 11:02:15 espie Exp $
d78 19
d104 7
@


1.1
log
@put Search objects into their own file, finally
@
text
@d2 1
a2 1
# $OpenBSD: PkgSpec.pm,v 1.11 2007/05/14 10:53:31 espie Exp $
d41 1
a41 1
sub match_list
d87 23
@

