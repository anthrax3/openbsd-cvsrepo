head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.14
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2013.12.25.14.38.15;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.25.21.03.25;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.15.13.38.30;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.15.08.26.39;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.20.22.38.45;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.11.11.13.16;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.14.11.06.41;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.14.17.53.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.12
log
@move the choice of signature type for checking into one single place
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: x509.pm,v 1.11 2010/12/24 09:04:14 espie Exp $
#
# Copyright (c) 2003-2007 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::x509;

use OpenBSD::PackageInfo;
use OpenBSD::Paths;
use MIME::Base64;
use File::Temp qw/mkstemp/;


sub compute_signature
{
	my ($plist, $cert, $key) = @@_;

	open my $fh, ">", $plist->infodir.CONTENTS;
	$plist->write_no_sig($fh);
	close $fh;
	open(my $sighandle, "-|", OpenBSD::Paths->openssl, "smime", "-sign",
	    "-binary", "-signer", $cert ,"-in", $plist->infodir.CONTENTS,
	    "-inkey", $key, "-outform", "DEM") or die;
	my $sig;
	sysread($sighandle, $sig, 16384);
	close($sighandle) or die "problem generating signature $!";

	return encode_base64($sig, '');
}

sub dump_certificate_info
{
	my $fname2 = shift;

	open my $fh, "-|", OpenBSD::Paths->openssl, "asn1parse",
	    "-inform", "DEM", "-in", $fname2;
	my %want = map {($_, 1)}
	    qw(countryName localityName organizationName
	    organizationalUnitName commonName emailAddress);
	while (<$fh>) {
		if (m/\sprim\:\s+OBJECT\s*\:(.*)\s*$/) {
			my $objectname = $1;
			$_ = <$fh>;
			if (m/\sprim\:\s+[A-Z0-9]+\s*\:(.*)\s*$/) {
				if ($want{$objectname}) {
					print "$objectname=$1\n";
				}
			}
		}
	}
	close($fh);
}

sub print_certificate_info
{
	my $plist = shift;

	my ($fh, $fname) = mkstemp("/tmp/pkgsig.XXXXXXXXX");
	print $fh decode_base64($plist->{'digital-signature'}->{b64sig});
	close $fh;
	dump_certificate_info($fname);
	unlink $fname;
}

sub check_signature
{
	my ($plist, $state) = @@_;
	my $sig = $plist->get('digital-signature');
	my ($fh, $fname) = mkstemp("/tmp/pkgcontent.XXXXXXXXX");
	my ($fh2, $fname2) = mkstemp("/tmp/pkgsig.XXXXXXXXX");
	$plist->write_no_sig($fh);
	print $fh2 decode_base64($sig->{b64sig});
	close $fh;
	close $fh2;
	my ($fh3, $fname3) = mkstemp("/tmp/commandresult.XXXXXXXXX");
	if ($state->system(sub { open STDERR ,">&", $fh3},
	    OpenBSD::Paths->openssl, "smime", "-verify",
	    "-binary", "-inform", "DEM", "-in", $fname2, "-content", $fname,
	    "-CAfile", OpenBSD::Paths->pkgca, "-out", "/dev/null") != 0) {
	    	close($fh3);
	    	$state->log("Bad signature");
		open $fh3, '<', $fname3;
		while (<$fh3>) {
			chomp;
			$state->log("#1", $_);
		}
		close($fh3);
		unlink $fname3;
		return 0;
	}
	if ($state->verbose >= 2) {
		dump_certificate_info($fname2);
	}
	close($fh3);
	unlink $fname;
	unlink $fname2;
	unlink $fname3;
	return 1;
}

1;
@


1.11
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
a83 4
	if ($sig->{key} ne 'x509') {
		$state->log("Error: unknown signature style");
		return 0;
	}
@


1.10
log
@use new system to do quiet
@
text
@d95 1
a95 1
	if ($state->system(sub { open STDERR ,">&", $fh3}, 
@


1.9
log
@store openssl error output during verification, and log it if it didn't work.
@
text
@d2 1
a2 1
# $OpenBSD: x509.pm,v 1.8 2010/06/30 10:51:04 espie Exp $
a79 15
sub system_quiet
{
	my $fh = shift;
	my $r = fork;
	if (!defined $r) {
		return 1;
	} elsif ($r == 0) {
		open STDERR, ">&", $fh;
		exec {$_[0]} @@_ or return 1;
	} else {
		waitpid($r, 0);
		return $?;
	}
}

d95 2
a96 1
	if (system_quiet ($fh3, OpenBSD::Paths->openssl, "smime", "-verify",
@


1.8
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
d82 1
d87 1
a87 1
		open STDERR, ">/dev/null";
d109 2
a110 1
	if (system_quiet (OpenBSD::Paths->openssl, "smime", "-verify",
d113 1
d115 7
d127 1
d130 1
@


1.7
log
@whitespace cleanup
@
text
@@


1.6
log
@more printing changes.

move log operations into their own file, since they're used outside of
pkg_add/pkg_delete by pkg_check.

move all system stuff to State, so that printing can be localized/controlled.
Create primitives _print, _errprint, _fatal for overriding output, without
localization.

Accordingly, move a lot of code out of Error. We should also move Unlink and
Copy eventually.
@
text
@d2 1
a2 1
# $OpenBSD: x509.pm,v 1.5 2010/05/10 09:17:55 espie Exp $
@


1.5
log
@whitespace fixes
@
text
@d2 1
a2 1
# $OpenBSD$
d99 1
a99 1
		$state->log->warn("Error: unknown signature style");
d111 1
a111 1
	    	$state->log->warn("Bad signature");
@


1.4
log
@change verbosity handling: be silent by default, turn on the first level if -v.
Add more levels, specifically, lots of info regarding individual files only
visible if -vvvvv.
Make -n display the same stuff as normal (need -n -v to display more stuff).
Introduce -s, "size-only", turns on -n and does skip any extraction.
Sprinkle handlers for SIG_INFO, not really nice yet.

Note that -n is non functional for complex updates, because of caching
issues I have to fix.
@
text
@d36 2
a37 2
	open(my $sighandle, "-|", OpenBSD::Paths->openssl, "smime", "-sign", 
	    "-binary", "-signer", $cert ,"-in", $plist->infodir.CONTENTS, 
d50 1
a50 1
	open my $fh, "-|", OpenBSD::Paths->openssl, "asn1parse", 
d52 2
a53 2
	my %want = map {($_, 1)} 
	    qw(countryName localityName organizationName 
d108 1
a108 1
	if (system_quiet (OpenBSD::Paths->openssl, "smime", "-verify", 
@


1.3
log
@remove forwarders, and provide a sensible API that says what's going on
(e.g., we're logging information for later).
@
text
@d114 1
a114 1
	if ($state->{verbose}) {
@


1.2
log
@make signature checking more quiet: discard openssl's STDERR, keep a tally
of signed packages.
- display a message only if signed packages have been signed.
- show IN BIG CAPS unsigned package numbers if a mixture of signed/unsigned
has been seen.
@
text
@d99 1
a99 1
		$state->warn("Error: unknown signature style");
d111 1
a111 1
	    	$state->warn("Bad signature");
@


1.1
log
@initial implementation of package signatures, based on x509 certificates and
smime detached signatures.
@
text
@d80 14
d108 2
a109 2
	if (system (OpenBSD::Paths->openssl, "smime", "-verify", "-binary",
	    "-inform", "DEM", "-in", $fname2, "-content", $fname,
@

