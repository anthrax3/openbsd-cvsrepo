head	1.27;
access;
symbols
	OPENBSD_6_1:1.27.0.8
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.6
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.16
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.12
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.10
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.8
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.6
	OPENBSD_5_0:1.25.0.4
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.23.0.2
	OPENBSD_4_8_BASE:1.23
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	pkgtools:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.27
date	2015.08.13.16.34.11;	author espie;	state Exp;
branches;
next	1.26;
commitid	JpX27r02NoOabOr8;

1.26
date	2014.03.18.18.53.29;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2010.01.17.12.01.00;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.17.11.56.46;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.28.21.27.03;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.20.10.25.16;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.04.14.40.39;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.01.22.35.47;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.14.09.49.27;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.02.15.05.30;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.15.10.17.29;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.17.18.24.53;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.17.09.19.09;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.21.18.12.06;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.21.02.12.51;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.15.01.07.10;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.14.12.22.47;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.14.11.40.08;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.06.08.06.01;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.06.07.51.17;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.00.04.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.16.17.43.34;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.10.16.17.43.34;	author espie;	state Exp;
branches;
next	;


desc
@@


1.27
log
@scaffolding that will display more info for the elusive REQUIRED_BY error
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: RequiredBy.pm,v 1.26 2014/03/18 18:53:29 espie Exp $
#
# Copyright (c) 2003-2005 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::RequirementList;
use OpenBSD::PackageInfo;
use Carp;

sub fatal_error
{
	my ($self, $msg) = @@_;
	require OpenBSD::Tracker;
	OpenBSD::Tracker->dump;
	confess ref($self), ": $msg $self->{filename}: $!";
}

sub fill_entries
{
	my $self = shift;
	if (!exists $self->{entries}) {
		my $l = $self->{entries} = {};

		if (-f $self->{filename}) {
			open(my $fh, '<', $self->{filename}) or 
			    $self->fatal_error("reading");
			while(<$fh>) {
				s/\s+$//o;
				next if /^$/o;
				chomp;
				$l->{$_} = 1;
			}
			close($fh);
			$self->{nonempty} = 1;
		} else {
			$self->{nonempty} = 0;
		}
	}
}

sub synch
{
	my $self = shift;
	return $self if $main::not;

	if (!unlink $self->{filename}) {
		if ($self->{nonempty}) {
		    croak ref($self), ": erasing $self->{filename}: $!";
		}
	}
	if (%{$self->{entries}}) {
		open(my $fh, '>', $self->{filename}) or 
		    $self->fatal_error("writing");
		while (my ($k, $v) = each %{$self->{entries}}) {
			print $fh "$k\n";
		}
		close($fh) or
		    croak ref($self), ": closing $self->{filename}: $!";
		$self->{nonempty} = 1;
	} else {
		$self->{nonempty} = 0;
	}
	return $self;
}

sub list
{
	my $self = shift;

	if (wantarray) {
		$self->fill_entries;
		return keys %{$self->{entries}};
	} else {
		if (exists $self->{entries}) {
			return %{$self->{entries}} ? 1 : 0;
		} elsif (!exists $self->{nonempty}) {
			$self->{nonempty} = -f $self->{filename} ? 1 : 0;
		}
		return $self->{nonempty};
	}
}

sub erase
{
	my $self = shift;
	$self->{entries} = {};
	$self->synch;
}

sub delete
{
	my ($self, @@pkgnames) = @@_;
	$self->fill_entries($self);
	for my $pkg (@@pkgnames) {
		delete $self->{entries}->{$pkg};
	}
	$self->synch;
}

sub add
{
	my ($self, @@pkgnames) = @@_;
	$self->fill_entries($self);
	for my $pkg (@@pkgnames) {
		$self->{entries}->{$pkg} = 1;
	}
	$self->synch;
}

my $cache = {};

sub new
{
	my ($class, $pkgname) = @@_;
	my $f = installed_info($pkgname).$class->filename;
	if (!exists $cache->{$f}) {
		return $cache->{$f} = bless { filename => $f }, $class;
	}
	return $cache->{$f};
}

sub forget
{
	my ($class, $dir) = @@_;
	my $f = $dir.$class->filename;
	if (exists $cache->{$f}) {
		$cache->{$f}->{entries} = {};
		$cache->{$f}->{nonempty} = 0;
	}
}

sub compute_closure
{
	my ($class, @@seed) = @@_;

	my @@todo = @@seed;
	my %done = ();

	while (my $pkgname = pop @@todo) {
		next if $done{$pkgname};
		$done{$pkgname} = 1;
		for my $dep ($class->new($pkgname)->list) {
			next if defined $done{$dep};
			push(@@todo, $dep);
		}
	}
	return keys %done;
}

package OpenBSD::RequiredBy;
our @@ISA=qw(OpenBSD::RequirementList);
use OpenBSD::PackageInfo;

sub filename() { REQUIRED_BY };

package OpenBSD::Requiring;
our @@ISA=qw(OpenBSD::RequirementList);
use OpenBSD::PackageInfo;

sub filename() { REQUIRING };

1;
@


1.26
log
@remove $_ usage that warns under perl 5.18
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.25 2010/12/24 09:04:14 espie Exp $
d25 8
d40 2
a41 3
			open(my $fh, '<', $self->{filename}) or
			    croak ref($self),
			    	": reading $self->{filename}: $!";
d67 2
a68 2
		open(my $fh, '>', $self->{filename}) or
		    croak ref($self), ": writing $self->{filename}: $!";
@


1.25
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
a34 1
			my $_;
@


1.24
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.23
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@@


1.22
log
@whitespace cleanup
@
text
@@


1.21
log
@whitespace fixes
@
text
@@


1.20
log
@even better messages
@
text
@d32 2
a33 2
			open(my $fh, '<', $self->{filename}) or 
			    croak ref($self), 
d73 1
a73 1
} 
@


1.19
log
@use Carp directly, it it very inexpensive actually, since it's been rewritten
to be just a very small stub that loads Carp::Heavy on demand.
Also, stop wrapping messages in "Expected", doesn't give us anything.
Finally, make RequiredBy calls be carp, so that we actually know where they
fail...
@
text
@d33 2
a34 2
			    croak "Problem opening required list: ",
				$self->{filename}, ": $!";
d57 1
a57 1
		    croak "Can't erase $self->{filename}: $!";
d62 1
a62 1
		    croak "Can't write $self->{filename}: $!";
d67 1
a67 1
		    croak "Write to $self->{filename} didn't work: $!";
@


1.18
log
@make objects chainable.
Provide a new "erase" method that removes everything
@
text
@d23 1
d33 1
a33 1
			    die "Problem opening required list: ",
d57 1
a57 1
		    die "Can't erase $self->{filename}: $!";
d62 1
a62 1
		    die "Can't write $self->{filename}: $!";
d67 1
a67 1
		    die "Write to $self->{filename} didn't work: $!";
@


1.17
log
@Say goodbye to local $_
lexical scoping is so much neater (courtesy of perl 5.10)
@
text
@d52 1
a52 1
	return if $main::not;
d71 1
d89 7
@


1.16
log
@some minor systematic changes.
- mark all regexps I can with /o if they can be compiled once.
- turn $o->method() into $o->method
- remove unneeded prototypes
- reduce split /re/ into split "string" where possible.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.15 2007/06/01 22:35:47 espie Exp $
d34 1
a34 1
			local $_;
@


1.15
log
@very small clean-up of dependencies list handling.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.14 2007/05/14 09:49:27 espie Exp $
d36 2
a37 2
				s/\s+$//;
				next if /^$/;
@


1.14
log
@tidy
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.13 2007/05/02 15:05:30 espie Exp $
d24 1
a24 1
sub fill_entries($)
d28 1
a28 2
		my $l = {};
		$self->{entries} = $l;
a35 1
				chomp $_;
d38 1
@


1.13
log
@$o->method() becomes $o->method
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.12 2007/04/15 10:17:29 espie Exp $
d74 1
a74 1
sub list($)
@


1.12
log
@update copyright years, standardize licence.
reword the introduction to the stuff originally from FreeBSD to clarify
slightly.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.11 2005/08/17 18:24:53 espie Exp $
d79 1
a79 1
		$self->fill_entries();
d98 1
a98 1
	$self->synch();
d108 1
a108 1
	$self->synch();
d116 1
a116 1
	my $f = installed_info($pkgname).$class->filename();
d126 1
a126 1
	my $f = $dir.$class->filename();
d143 1
a143 1
		for my $dep ($class->new($pkgname)->list()) {
@


1.11
log
@clean-up, move the compute_closure code to RequiredBy, since it's
quite generic.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.10 2005/08/17 09:19:09 espie Exp $
d4 1
a4 1
# Copyright (c) 2003-2004 Marc Espie <espie@@openbsd.org>
@


1.10
log
@rename erase to more appropriate forget
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.9 2004/12/21 18:12:06 espie Exp $
d131 18
@


1.9
log
@fix nasty cache-out-of-sync bug.
Now, update with the same package name works again.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.8 2004/12/21 02:12:51 espie Exp $
d123 1
a123 1
sub erase
@


1.8
log
@oops, really cache stuff.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.7 2004/12/15 01:07:10 espie Exp $
d121 10
@


1.7
log
@move -n down into RequiredBy and PackingList (as $main::not, since we
don't want to load RequiredBy all the time).
Remove a few $state->{not} tests that are no longer needed.

pkg_add -n / pkg_delete -n should work much better when they need to
handle multiple dependencies.

(todo: kill plist caches, finish replacing with specialized caches like
libraries).
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.6 2004/12/14 12:22:47 espie Exp $
d117 2
a118 4
	if (exists $cache->{$f}) {
		return $cache->{$f};
	} else {
		return bless { filename => $f }, $class;
d120 1
@


1.6
log
@rewrite code to cache files internally, to avoid going to disk all the
time.

This will allow us to bypass synch() and use this in -n mode, among other
things.

We could also postpone writing the cache (synching) until the end of
the program...
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.5 2004/11/14 11:40:08 espie Exp $
d53 2
@


1.5
log
@let RequiredBy generate lists directly, use hashes to trim down duplicates directly. Optimize for !wantarray, by telling whether the list is empty or not.

prepare for a second similar list (REQUIRING) that will replace pkgdep, since
pkg_add -r spends a hell of a lot of its time reading/writing long
packing-lists...

Use the simplified interface.

Remove quite a few tests that the RequiredBy list is non-empty that do
nothing but obfuscate the code: just deal with the damn list already.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.4 2004/08/06 08:06:01 espie Exp $
d24 48
d77 7
a83 10
		return () unless -f $$self;
		open(my $fh, '<', $$self) or 
		    die "Problem opening required list: $$self: $!";
		local $_;
		my $l = {};
		while(<$fh>) {
			chomp $_;
			s/\s+$//;
			next if /^$/;
			$l->{$_} = 1;
d85 1
a85 4
		close($fh);
		return keys %$l;
	} else {
		return -f $$self ? 1 : 0;
d91 6
a96 6
	my ($self, $pkgname) = @@_;
	my @@lines = grep { $_ ne $pkgname } $self->list();
	unlink($$self) or die "Can't erase $$self: $!";
	if (@@lines > 0) {
		$self->add(@@lines);
	} 
d102 5
a106 4
	open(my $fh, '>>', $$self) or
	    die "Can't add dependencies to $$self: $!";
	print $fh join("\n", @@pkgnames), "\n";
	close($fh);
d109 2
d115 5
a119 1
	bless \$f, $class;
@


1.4
log
@block-scoped require is way simpler than weird AUTOLOAD hack.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.3 2004/08/06 07:51:17 espie Exp $
a17 1
package OpenBSD::RequiredBy;
d20 2
a23 7
sub new
{
	my ($class, $pkgname) = @@_;
	my $f = installed_info($pkgname).REQUIRED_BY;
	bless \$f, $class;
}

d28 16
a43 10
	my $l = [];
	return $l unless -f $$self;
	open(my $fh, '<', $$self) or 
	    die "Problem opening required list: $$self: $!";
	local $_;
	while(<$fh>) {
		chomp $_;
		s/\s+$//;
		next if /^$/;
		push(@@$l, $_);
a44 2
	close($fh);
	return $l;
d50 1
a50 1
	my @@lines = grep { $_ ne $pkgname } @@{$self->list()};
d65 19
@


1.3
log
@unified headers, switch to smaller copyright notice.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.2 2004/01/27 00:04:36 espie Exp $
a65 4
}

sub DESTROY
{
@


1.2
log
@put $! in die messages.
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.1.1.1 2003/10/16 17:43:34 espie Exp $
d4 13
a16 22
# Copyright (c) 2003 Marc Espie.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
# PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD: RequiredBy.pm,v 1.1.1.1 2003/10/16 17:16:30 espie Exp $
d46 1
a46 1
	    die "Problem opening required list: $$self\n";
d62 1
a62 1
	unlink($$self) or die "Can't erase $$self";
d72 1
a72 1
	    die "Can't add dependencies to $$self";
@


1.1.1.1
log
@new import of my pkgtools, after a slight naming disagreement with the
Upper Management...
@
text
@@
