head	1.19;
access;
symbols
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.18.0.10
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.6
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.4
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.4
	OPENBSD_5_0:1.12.0.2
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@# @;


1.19
date	2017.09.18.13.01.10;	author espie;	state Exp;
branches;
next	1.18;
commitid	Gwhmmmjv06YtHVag;

1.18
date	2015.03.26.22.07.58;	author kili;	state Exp;
branches;
next	1.17;
commitid	gY5FR3xtOyYgUeGI;

1.17
date	2015.03.09.11.09.00;	author espie;	state Exp;
branches;
next	1.16;
commitid	yTZcEklEHLOWCkrw;

1.16
date	2015.01.19.09.42.06;	author espie;	state Exp;
branches;
next	1.15;
commitid	9hHhQWYHGzokwfk5;

1.15
date	2014.02.09.19.22.19;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.01.13.47.34;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2012.06.14.13.32.58;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2011.04.18.20.16.20;	author jasper;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.24.09.04.14;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.27.14.35.56;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.07.11.10.05.18;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.30.10.41.42;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.10.09.17.55;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.22.20.38.44;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.19.14.32.22;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.19.10.21.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.10.12.38.27;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.10.11.31.08;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@-V option for pkg_create and incorporate version into signatures.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Signature.pm,v 1.18 2015/03/26 22:07:58 kili Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package OpenBSD::PackageName::Name;
sub long_string
{
	my $self = shift;
	return '@@'.$self->to_string;
}

sub always
{
	return 0;
}
package OpenBSD::LibObject;
sub long_string
{
	my $self = shift;
	return $self->to_string;
}

sub always
{
	return 1;
}

package OpenBSD::PackingElement;
sub signature {}

package OpenBSD::PackingElement::Dependency;
sub signature
{
	my ($self, $hash) = @@_;
	$hash->{$self->{pkgpath}} = OpenBSD::PackageName->from_string($self->{def});
}

package OpenBSD::PackingElement::Wantlib;
sub signature
{
	my ($self, $hash) = @@_;

	my $spec = $self->spec;
	if ($spec->is_valid) {
		$hash->{$spec->key} = $spec;
	}
}

package OpenBSD::PackingElement::Version;

sub signature
{
	my ($self, $hash) = @@_;
	$hash->{VERSION} = $self;
}

sub long_string
{
	my $self = shift;
	return $self->{name};
}

sub compare
{
	my ($a, $b) = @@_;
	return $a->{name} <=> $b->{name};
}

package OpenBSD::Signature;
sub from_plist
{
	my ($class, $plist) = @@_;

	my $k = {};
	$plist->visit('signature', $k);

	$k->{VERSION} //= OpenBSD::PackingElement::Version->new(0);

	if ($plist->has('always-update')) {
		return $class->always->new($plist->pkgname, $k, $plist);
	} else {
		return $class->new($plist->pkgname, $k);
	}
}

sub always
{
	return "OpenBSD::Signature::Full";
}

sub new
{
	my ($class, $pkgname, $extra) = @@_;
	bless { name => $pkgname, extra => $extra }, $class;
}

sub string
{
	my $self = shift;
	return join(',', $self->{name}, sort map {$_->long_string} values %{$self->{extra}});
}

sub compare
{
	my ($a, $b, $shortened) = @@_;
	return $b->revert_compare($a, $shortened);
}

sub revert_compare
{
	my ($b, $a, $shortened) = @@_;

	if ($a->{name} eq $b->{name}) {
		my $awins = 0;
		my $bwins = 0;
		my $done = {};
		my $errors = 0;
		while (my ($k, $v) = each %{$a->{extra}}) {
			if (!defined $b->{extra}{$k}) {
				print STDERR "Couldn't find $k in second signature\n";
				$errors++;
				next;
			}
			$done->{$k} = 1;
			next if $shortened && !$v->always;
			my $r = $v->compare($b->{extra}{$k});
			if ($r > 0) {
				$awins++;
			} elsif ($r < 0) {
				$bwins++;
			}
		}
		for my $k (keys %{$b->{extra}}) {
			if (!$done->{$k}) {
				print STDERR "Couldn't find $k in first signature\n";
				$errors++;
			}
		}
		if ($errors) {
			$a->print_error($b);
			return undef;
		}
		if ($awins == 0) {
			return -$bwins;
		} elsif ($bwins == 0) {
			return $awins;
		} else {
			return undef;
		}
	} else {
		return OpenBSD::PackageName->from_string($a->{name})->compare(OpenBSD::PackageName->from_string($b->{name}));
	}
}

sub print_error
{
	my ($a, $b) = @@_;

	print STDERR "Error: $a->{name} exists in two non-comparable versions\n";
	print STDERR "Someone forgot to bump a REVISION\n";
	print STDERR $a->string, " vs. ", $b->string, "\n";
}

package OpenBSD::Signature::Full;
our @@ISA=qw(OpenBSD::Signature);

sub new
{
	my ($class, $pkgname, $extra, $plist) = @@_;
	my $o = $class->SUPER::new($pkgname, $extra);
	my $hash;
	open my $fh, '>', \$hash;
	$plist->write_without_variation($fh);
	close $fh;
	$o->{hash} = $hash;
	return $o;
}

sub string
{
	my $self = shift;
	return join(',', $self->SUPER::string, $self->{hash});
}

sub revert_compare
{
	my ($b, $a) = @@_;
	my $r = $b->SUPER::revert_compare($a);
	if (defined $r && $r == 0) {
		if ($a->string ne $b->string) {
			return undef;
		}
	}
	return $r;
}

sub compare
{
	my ($a, $b) = @@_;
	my $r = $a->SUPER::compare($b);
	if (defined $r && $r == 0) {
		if ($a->string ne $b->string) {
			return undef;
		}
	}
	return $r;
}

1;
@


1.18
log
@Backout -DSHORTENED semantics by default for now, because it caused
too much problems with the recent changes to net/libnet (in combination
with security/dsniff); the PKGSPEC changes. Some more suspicious
pudate problems mentioned by landry@@.

ok sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.17 2015/03/09 11:09:00 espie Exp $
d65 20
d92 2
@


1.17
log
@make -DSHORTENED the default: don't update unless there is an actual
change in dependencies: shared library versions, and explicit version
requirements in dependencies.
as discussed with aja@@ before the lock.
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.16 2015/01/19 09:42:06 espie Exp $
d99 2
a100 2
	my ($a, $b) = @@_;
	return $b->revert_compare($a);
d105 1
a105 1
	my ($b, $a) = @@_;
d119 1
a119 1
			next if !$v->always;
@


1.16
log
@add a specialized version of version compares that should not update
everything all the time, at the bequest of aja.

(basically, we updated everything when runtime dependencies  changed, even
though we actually only care for wantlib, and hard dependencies, but those
trigger bumps all over the tree)

Experimental for now, turn on with -DSHORTENED. Likely to become the new
default if nothing bad comes out of it.
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.15 2014/02/09 19:22:19 espie Exp $
d99 2
a100 2
	my ($a, $b, $shortened) = @@_;
	return $b->revert_compare($a, $shortened);
d105 1
a105 1
	my ($b, $a, $shortened) = @@_;
d119 1
a119 1
			next if $shortened && !$v->always;
@


1.15
log
@forgot about that small issue. Don't take crypto sigs into account for
"always-update" comparisons (among other things, the crypto sig contains
a timestamp which will always change).

Put things in line with other "package changed" comparison.

Reminded by Mikolaj Kucharski
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.14 2012/09/01 13:47:34 espie Exp $
d28 4
d39 5
d99 2
a100 2
	my ($a, $b) = @@_;
	return $b->revert_compare($a);
d105 1
a105 1
	my ($b, $a) = @@_;
d119 1
@


1.14
log
@show more precisely what the problem is.
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.13 2012/06/14 13:32:58 espie Exp $
d157 1
a157 1
	$plist->write_no_sig($fh);
@


1.13
log
@tweak pkg_info -S to separate pkgnames with @@ from libraries with nothing.
*this goes together with a bsd.port.mk change* !!!
fixes some ambiguities in out-of-date, for instance.

if you're parsing pkg_info -S output manually, this *WILL* change the way
things work
@
text
@d2 1
a2 1
# $OpenBSD$
d102 1
d105 3
a107 2
				$a->print_error($b);
				return undef;
d119 2
a120 2
				$a->print_error($b);
				return undef;
d122 4
@


1.12
log
@people (should) bump REVISION nowadays.

ok espie@@
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.11 2010/12/24 09:04:14 espie Exp $
d21 14
d85 1
a85 1
	return join(',', $self->{name}, sort map {$_->to_string} values %{$self->{extra}});
@


1.11
log
@handle failures from ports tree with more care.
this does avoid infinite loops in case of wrong plists.
necessary since print-plist-with-depends CAN fail...
@
text
@d2 1
a2 1
# $OpenBSD$
d124 1
a124 1
	print STDERR "Someone forgot to bump a PKGNAME\n";
@


1.10
log
@initial scaffolding for @@rcscript: for now, acts like normal files,
but allow absolute pathnames (treat that as an implicit @@cwd).
@
text
@@


1.9
log
@move compare into LibSpec, it's not so specific to Signature after all
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.8 2010/06/30 10:51:04 espie Exp $
@


1.8
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d2 1
a2 1
# $OpenBSD$
a170 15
}

package OpenBSD::LibSpec;

sub compare
{
	my ($a, $b) = @@_;

	if ($a->key ne $b->key) {
		return undef;
	}
	if ($a->major != $b->major) {
		return $a->major <=> $b->major;
	}
	return $a->minor <=> $b->minor;
@


1.7
log
@whitespace cleanup
@
text
@@


1.6
log
@whitespace fixes
@
text
@@


1.5
log
@clean up the ProgressMeter code, create a specific class if a Term
is around.
start using stuff from termcap, specifically, cleareol, and move to hp.
use the full line when we can, cram 100% if we can.
(this should flicker much less on slow terminals).

clean-up the install-and-progress bits to be in progressmeter, this removes
some code.

have pkg_create follow the same pattern as the others, with a state.
This allows us to unify error messages a bit.
@
text
@d178 1
a178 1
	
@


1.4
log
@simplify using LibSpec
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.3 2010/01/19 10:21:28 espie Exp $
@


1.3
log
@fix handling of always-update: it should only come into play when the
normal signature is equal. Otherwise, downgrade prohibition is still in
effect.
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.2 2010/01/10 12:38:27 espie Exp $
a34 1
	require OpenBSD::SharedLibs;
d36 3
a38 4
	my ($stem, $major, $minor) = OpenBSD::SharedLibs::parse_spec($self->name);
	if (defined $stem) {
		$hash->{$stem} = OpenBSD::LibrarySpec->new($stem, 
		    $major, $minor);
d173 1
a173 12
package OpenBSD::LibrarySpec;
sub new
{
	my ($class, $stem, $major, $minor) = @@_;
	bless {stem => $stem, major => $major, minor => $minor}, $class;
}

sub to_string
{
	my $self = shift;
	return join('.', $self->{stem}, $self->{major}, $self->{minor});
}
d179 1
a179 1
	if ($a->{stem} ne $b->{stem}) {
d182 2
a183 2
	if ($a->{major} != $b->{major}) {
		return $a->{major} <=> $b->{major};
d185 1
a185 1
	return $a->{minor} <=> $b->{minor};
@


1.2
log
@follow logic: if same packagename, but different signature elements,
something very bad happened.
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.1 2010/01/10 11:31:08 espie Exp $
d49 3
d53 1
a53 5
		my $s;
		open my $fh, '>', \$s;
		$plist->write_no_sig($fh);
		close $fh;
		return $class->always->new($plist->pkgname, $s);
a54 2
		my $k = {};
		$plist->visit('signature', $k);
d79 6
d87 29
a115 1
		return $b->revert_compare($a);
d130 4
a133 1
sub revert_compare
d135 8
a142 31
	my ($b, $a) = @@_;

	my $awins = 0;
	my $bwins = 0;
	my $done = {};
	while (my ($k, $v) = each %{$a->{extra}}) {
		if (!defined $b->{extra}{$k}) {
			$a->print_error($b);
			return undef;
		}
		$done->{$k} = 1;
		my $r = $v->compare($b->{extra}{$k});
		if ($r > 0) {
			$awins++;
		} elsif ($r < 0) {
			$bwins++;
		}
	}
	for my $k (keys %{$b->{extra}}) {
		if (!$done->{$k}) {
			$a->print_error($b);
			return undef;
		}
	}
	if ($awins == 0) {
		return -$bwins;
	} elsif ($bwins == 0) {
		return $awins;
	} else {
		return undef;
	}
a144 3
package OpenBSD::Signature::Full;
our @@ISA=qw(OpenBSD::Signature);

d148 1
a148 1
	return $self->{extra};
d154 7
a160 1
	return $a->string cmp $b->string;
d166 7
a172 1
	return $a->string cmp $b->string;
@


1.1
log
@pull the signature comparison code into its own file.
add comparison functions to Packagenames that return undef when it matters.
@
text
@d2 1
a2 1
# $OpenBSD$
d90 9
d105 1
d107 5
a111 1
		next if !defined $b->{extra}{$k};
d117 6
@

