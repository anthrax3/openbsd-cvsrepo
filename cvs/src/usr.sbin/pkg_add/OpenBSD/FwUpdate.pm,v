head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17;
locks; strict;
comment	@# @;


1.22
date	2017.05.29.12.28.54;	author espie;	state Exp;
branches;
next	1.21;
commitid	Cgf05tZggkOgfUsE;

1.21
date	2017.03.25.22.26.44;	author sthen;	state Exp;
branches;
next	1.20;
commitid	sRXuOSLBr6F0Qmyv;

1.20
date	2016.07.23.18.09.47;	author espie;	state Exp;
branches;
next	1.19;
commitid	B3zlE0MRQDxZ2NS9;

1.19
date	2015.06.06.07.19.56;	author stsp;	state Exp;
branches;
next	1.18;
commitid	TwREv5Vvwm7X8aCX;

1.18
date	2015.04.16.13.29.16;	author espie;	state Exp;
branches;
next	1.17;
commitid	glpsNd6nX6NAzNf5;

1.17
date	2015.02.15.09.54.21;	author espie;	state Exp;
branches;
next	1.16;
commitid	FhDHzwlXALa4g5Jm;

1.16
date	2015.02.06.20.40.35;	author sthen;	state Exp;
branches;
next	1.15;
commitid	eh7n5yNllTMA8iEx;

1.15
date	2015.02.03.21.37.54;	author espie;	state Exp;
branches;
next	1.14;
commitid	jTVWPVJq5vmUVAMF;

1.14
date	2015.02.03.10.26.29;	author espie;	state Exp;
branches;
next	1.13;
commitid	hXQolFOeWQ48akSA;

1.13
date	2015.02.03.09.58.15;	author espie;	state Exp;
branches;
next	1.12;
commitid	9pFO7xoieFcgVlvr;

1.12
date	2015.02.03.09.50.03;	author espie;	state Exp;
branches;
next	1.11;
commitid	XOPoJ37dPO9NZvQF;

1.11
date	2015.01.27.09.35.35;	author espie;	state Exp;
branches;
next	1.10;
commitid	ynWnXPc9QG2DjpCW;

1.10
date	2015.01.17.13.20.04;	author espie;	state Exp;
branches;
next	1.9;
commitid	ObtPU0guVIqPZSlf;

1.9
date	2015.01.15.19.16.17;	author espie;	state Exp;
branches;
next	1.8;
commitid	uGtuKM1xGtFsW9L2;

1.8
date	2015.01.05.16.32.28;	author espie;	state Exp;
branches;
next	1.7;
commitid	iyuymx9hYwBCbvFI;

1.7
date	2015.01.05.13.18.31;	author sthen;	state Exp;
branches;
next	1.6;
commitid	jnKX3EJh6t0hBLbm;

1.6
date	2015.01.04.14.55.47;	author espie;	state Exp;
branches;
next	1.5;
commitid	v0sP7pY1Vd4tuxe6;

1.5
date	2015.01.04.14.54.12;	author espie;	state Exp;
branches;
next	1.4;
commitid	koZkGVgiis10EapF;

1.4
date	2015.01.04.14.48.19;	author espie;	state Exp;
branches;
next	1.3;
commitid	WxwymAk332bLunjq;

1.3
date	2015.01.03.17.32.43;	author espie;	state Exp;
branches;
next	1.2;
commitid	5o7esyQj0CQCzv16;

1.2
date	2014.12.27.23.58.52;	author espie;	state Exp;
branches;
next	1.1;
commitid	dr3eHwjrMUqaFbKG;

1.1
date	2014.12.27.16.05.42;	author espie;	state Exp;
branches;
next	;
commitid	RnjNymN8fczMIyQ5;


desc
@@


1.22
log
@Refactor locator code so it's a proper object.
allow  fw_update to short-circuit entirely, thus the specific
treatment of paths is actually less of a special case,
and the code that reaches into /etc/installurl is no longer used
at all in that case.

problem noticed by mlarkin@@
@
text
@#! /usr/bin/perl

# ex:ts=8 sw=4:
# $OpenBSD: FwUpdate.pm,v 1.21 2017/03/25 22:26:44 sthen Exp $
#
# Copyright (c) 2014 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
use strict;
use warnings;
use OpenBSD::PkgAdd;
use OpenBSD::PackageRepository;
use OpenBSD::PackageLocator;

package OpenBSD::FwUpdate::Locator;
our @@ISA = qw(OpenBSD::PackageLocator);

sub add_default
{
	my ($self, $state, $p) = @@_;
	my $path = $state->opt('p');
	if (!$path) {
		my $dir = OpenBSD::Paths->os_directory;
		if (!defined $dir) {
			$state->fatal("Couldn't find/parse OS version");
		}
		$path = "http://firmware.openbsd.org/firmware/$dir/";
	}
	$p->add(OpenBSD::PackageRepository->new($path, $state));
}

package OpenBSD::FwUpdate::State;
our @@ISA = qw(OpenBSD::PkgAdd::State);

sub locator
{
	return "OpenBSD::FwUpdate::Locator";
}

sub handle_options
{
	my $state = shift;
	$state->OpenBSD::State::handle_options('adinp:', 
	    '[-adinv] [-D keyword] [-p path] [driver...]');
	$state->{not} = $state->opt('n');
	if ($state->opt('i')) {
		$state->{not} = 1;
	}
	$main::not = $state->{not};
	$state->progress->setup(0, 0, $state);
	$state->{localbase} = OpenBSD::Paths->localbase;
	$state->{destdir} = '';
	$state->{wantntogo} = 0;
	$state->{interactive} = OpenBSD::InteractiveStub->new($state);
	$state->{subst}->add('repair', 1);
	if ($state->opt('a') && @@ARGV != 0) {
		$state->usage;
	}
	$state->{fw_verbose} = $state->{v};
	if ($state->{v}) {
		$state->{v}--;
	}
	if ($state->{fw_verbose}) {
		$state->say("Path to firmware: #1", 
		    $state->locator->printable_default_path($state));
	}
	$state->{subst}->add('NO_SCP', 1);
}

sub finish_init
{
	my $state = shift;
	delete $state->{signer_list}; # XXX uncache value
	$state->{subst}->add('FW_UPDATE', 1);
}

sub installed_drivers
{
	my $self = shift;
	return keys %{$self->{installed_drivers}};
}

sub is_installed
{
	my ($self, $driver) = @@_;
	return $self->{installed_drivers}{$driver};
}

sub machine_drivers
{
	my $self = shift;
	return keys %{$self->{machine_drivers}};
}

sub all_drivers
{
	my $self = shift;
	return keys %{$self->{all_drivers}};
}

sub is_needed
{
	my ($self, $driver) = @@_;
	return $self->{machine_drivers}{$driver};
}

sub display_timestamp
{
	my ($state, $pkgname, $timestamp) = @@_;
	return unless $state->verbose;
	$state->SUPER::display_timestamp($pkgname, $timestamp);
}

sub fw_status
{
	my ($state, $msg, $list) = @@_;
	return if @@$list == 0;
	$state->say("#1: #2", $msg, join(' ', @@$list));
}

package OpenBSD::FwUpdate::Update;
our @@ISA = qw(OpenBSD::Update);

package OpenBSD::FwUpdate;
our @@ISA = qw(OpenBSD::PkgAdd);

OpenBSD::Auto::cache(updater,
    sub {
	    require OpenBSD::Update;
	    return OpenBSD::FwUpdate::Update->new;
    });

my %possible_drivers =  map {($_, 1)}
    (qw(acx athn bwi ipw iwi iwm iwn malo otus pgt radeondrm rsu rtwn uath
	upgt urtwn uvideo vmm wpi));


sub parse_dmesg
{
	my ($self, $f, $search, $found) = @@_;

	while (<$f>) {
		chomp;
		for my $driver (keys %$search) {
			next unless m/^\Q$driver\E\d+\s+at\s/;
			delete $search->{$driver};
			$found->{$driver} = 1;
		}
	}
}

sub find_machine_drivers
{
	my ($self, $state) = @@_;
	$state->{machine_drivers} = {};
	$state->{all_drivers} = \%possible_drivers;
	my %search = %possible_drivers;
	if (open(my $f, '<', '/var/run/dmesg.boot')) {
		$self->parse_dmesg($f, \%search, $state->{machine_drivers});
		close($f);
	} else {
		$state->errsay("Can't open dmesg.boot: #1", $!);
	}
	if (open(my $cmd, '-|', 'dmesg')) {
		$self->parse_dmesg($cmd, \%search, $state->{machine_drivers});
		close($cmd);
	} else {
		$state->errsay("Can't run dmesg: #1", $!);
	}
}

sub driver2firmware
{
	return shift."-firmware";
}

sub find_installed_drivers
{
	my ($self, $state) = @@_;
	my $inst = $state->repo->installed;
	for my $driver (keys %possible_drivers) {	
		my $search = OpenBSD::Search::Stem->new(driver2firmware($driver));
		my $l = $inst->match_locations($search);
		if (@@$l > 0) {
			$state->{installed_drivers}{$driver} = 
			    OpenBSD::Handle->from_location($l->[0]);
		}
	}
}


sub new_state
{
	my ($self, $cmd) = @@_;
	return OpenBSD::FwUpdate::State->new($cmd);
}

sub find_handle
{
	my ($self, $state, $driver) = @@_;
	my $pkgname = driver2firmware($driver);
	my $set;
	my $h = $state->is_installed($driver);
	if ($h) {
		$set = $state->updateset->add_older($h);
	} else {
		$set = $state->updateset->add_hints($pkgname);
	}
	return $set;
}

sub mark_set_for_deletion
{
	my ($self, $set, $state) = @@_;
	# XXX to be simplified. Basically, we pre-do the work of the updater...
	for my $h ($set->older) {
		$h->{update_found} = 1;
	}
	$set->{updates}++;
}

# no quirks for firmware, bypass entirely
sub do_quirks
{
	my ($self, $state) = @@_;
	$state->finish_init;
}

sub to_remove
{
	my ($self, $state, $driver) = @@_;
	$self->mark_set_for_deletion($self->to_add_or_update($state, $driver));
}

sub to_add_or_update
{
	my ($self, $state, $driver) = @@_;
	my $set = $self->find_handle($state, $driver);
	push(@@{$state->{setlist}}, $set);
	return $set;
}

sub show_info
{
	my ($self, $state) = @@_;
	my (@@installed, @@unneeded, @@needed);
	for my $d ($state->installed_drivers) {
		my $h = $state->is_installed($d)->pkgname;
		if ($state->is_needed($d)) {
			push(@@installed, $h);
		} else {
			push(@@unneeded, $h);
		}
	}
	for my $d ($state->machine_drivers) {
		if (!$state->is_installed($d)) {
			push(@@needed, driver2firmware($d));
		} 
	}
	$state->fw_status("Installed", \@@installed);
	$state->fw_status("Installed, extra", \@@unneeded);
	$state->fw_status("Missing", \@@needed);
}

sub process_parameters
{
	my ($self, $state) = @@_;

	$self->find_machine_drivers($state);
	$self->find_installed_drivers($state);

	if ($state->opt('i')) {
		$self->show_info($state);
		exit(0);
	}
	if (@@ARGV == 0) {
		if ($state->opt('d')) {
			for my $driver ($state->installed_drivers) {
				if ($state->opt('a') || 
				    !$state->is_needed($driver)) {
					$self->to_remove($state, $driver);
				}
			}
		} else {
			if ($state->opt('a')) {
				for my $driver ($state->all_drivers) {
					$self->to_add_or_update($state, 
					    $driver);
				}
			} else {
				for my $driver ($state->machine_drivers) {
					$self->to_add_or_update($state, 
					    $driver);
				}
				for my $driver ($state->installed_drivers) {
					# XXX skip already done up there ^
					next if $state->is_needed($driver);
					$self->to_add_or_update($state, 
					    $driver);
				}
			}
		}
		if (!(defined $state->{setlist}) && $state->{fw_verbose}) {
			$state->say($state->opt('d') ?
			    "No firmware to delete." :
			    "No devices found which need firmware files to be downloaded.");
			exit(0);
		}
	} else {
		for my $driver (@@ARGV) {
			$driver =~ s/\-firmware(\-\d.*)?$//;
			if (!$possible_drivers{$driver}) {
				$state->errsay("#1: unknown driver", $driver);
				exit(1);
			}
			if ($state->opt('d') && 
			    !$state->is_installed($driver)) {
				$state->errsay("Can't delete uninstalled driver: #1", $driver);
				next;
			}

			my $set = $self->to_add_or_update($state, $driver);
			if ($state->opt('d')) {
				$self->mark_set_for_deletion($set);
			} 
		}
	}
	if ($state->{fw_verbose}) {
		my (@@deleting, @@updating, @@installing);
		for my $set (@@{$state->{setlist}}) {
			for my $h ($set->older) {
				if ($h->{update_found}) {
					push(@@deleting, $h->pkgname);
				} else {
					push(@@updating, $h->pkgname);
				}
			}
			for my $h ($set->hints) {
				push(@@installing, $h->pkgname);
			}
		}
		$state->fw_status("Installing", \@@installing);
		$state->fw_status("Deleting", \@@deleting);
		$state->fw_status("Updating", \@@updating);
	}
}

1;
@


1.21
log
@Recognise vmm in dmesg to install "vmm-firmware" (the SeaBIOS package).
OK espie@@
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.20 2016/07/23 18:09:47 espie Exp $
d24 18
d46 1
a46 1
sub find_path
d48 1
a48 7
	my $state = shift;
	my $dir = OpenBSD::Paths->os_directory;
	if (defined $dir) {
		$state->{path} = "http://firmware.openbsd.org/firmware/$dir/";
	} else {
		$state->fatal("Couldn't find/parse OS version");
	}
a56 5
	if ($state->opt('p')) {
		$state->{path} = $state->opt('p');
	} else {
		$state->find_path;
	}
a69 2
	$state->{fw_repository} = 
	    OpenBSD::PackageRepository->new($state->{path}, $state);
d75 2
a76 1
		$state->say("Path to firmware: #1", $state->{path});
a219 1
	$set->add_repositories($state->{fw_repository});
@


1.20
log
@no quirks in FwUpdate.

okay theo
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.19 2015/06/06 07:19:56 stsp Exp $
d140 1
a140 1
	upgt urtwn uvideo wpi));
@


1.19
log
@Add rtwn(4) to fw_update. ok espie@@, czarkoff@@ suggested a similar diff
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.18 2015/04/16 13:29:16 espie Exp $
d228 1
a228 1
# no way we can find a new quirks on the firmware site
a231 1
	$self->SUPER::do_quirks($state);
@


1.18
log
@reorg code, the arch/osversion code should live in a single place,
short and sweet
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.17 2015/02/15 09:54:21 espie Exp $
d139 1
a139 1
    (qw(acx athn bwi ipw iwi iwm iwn malo otus pgt radeondrm rsu uath
@


1.17
log
@-i option, so that even pkg_info is not needed.

make the arguments a bit more free-form, so that both radeondrm and
radeondrm-firmware work.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.16 2015/02/06 20:40:35 sthen Exp $
d31 3
a33 9
	open my $cmd, '-|', OpenBSD::Paths->sysctl, '-n', 'kern.version';
	my $line = <$cmd>;
	close($cmd);
	if ($line =~ m/^OpenBSD (\d\.\d)(\S*)\s/) {
		my ($version, $tag) = ($1, $2);
		if ($tag eq '-current') {
			$version = 'snapshots';
		}
		$state->{path} = "http://firmware.openbsd.org/firmware/$version/";
@


1.16
log
@add iwm to the possible_drivers list
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.15 2015/02/03 21:37:54 espie Exp $
d48 2
a49 2
	$state->OpenBSD::State::handle_options('adnp:', 
	    '[-adnv] [-D keyword] [-p path] [driver...]');
d56 3
d183 5
d193 1
a193 1
		my $search = OpenBSD::Search::Stem->new("$driver-firmware");
d212 1
a212 1
	my $pkgname = "$driver-firmware";
d256 22
d285 4
d324 1
@


1.15
log
@fix odd error recovery (noticed by kili@@): fw_update -d with !installed
driver should just say it's not installed and not try to install it.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.14 2015/02/03 10:26:29 espie Exp $
d142 1
a142 1
    (qw(acx athn bwi ipw iwi iwn malo otus pgt radeondrm rsu uath
@


1.14
log
@zap scp urls from quirks update for fw_update
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.13 2015/02/03 09:58:15 espie Exp $
d294 6
a301 4
				if (!$state->is_installed($driver)) {
					$state->errsay("Can't delete uninstalled driver: #1", $driver);
					next;
				}
@


1.13
log
@document the one non-intuitive test there, as I spent 5 mn looking at it
wondering... :)
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.12 2015/02/03 09:50:03 espie Exp $
d75 1
@


1.12
log
@Fix -a
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.11 2015/01/27 09:35:35 espie Exp $
d274 1
@


1.11
log
@fix messages of FwUpdate
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.10 2015/01/17 13:20:04 espie Exp $
d102 6
d163 1
d263 15
a277 6
			for my $driver ($state->machine_drivers) {
				$self->to_add_or_update($state, $driver);
			}
			for my $driver ($state->installed_drivers) {
				next if $state->is_needed($driver);
				$self->to_add_or_update($state, $driver);
@


1.10
log
@make sure we have an interactivestub... I forgot the -I part from the old
script.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.9 2015/01/15 19:16:17 espie Exp $
d68 5
a72 1
	if ($state->verbose) {
d108 14
d210 1
a210 1
	my ($self, $set) = @@_;
d264 1
a264 1
		if (!(defined $state->{setlist}) && $state->verbose) {
d285 18
@


1.9
log
@oops, forgotten back-pointer to state for error messages
problem noticed by jca@@
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.8 2015/01/05 16:32:28 espie Exp $
d61 1
@


1.8
log
@a few tweaks to match the old script better (for now)
- progress meter set like the old script
- path to firmware printed
- update both needed and installed drivers
- coda when we don't find anything to install/delete
- error out if @@ARGV is not a possible driver
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.7 2015/01/05 13:18:31 sthen Exp $
d66 1
a66 1
	    OpenBSD::PackageRepository->new($state->{path});
@


1.7
log
@When building the package path for the new fw_update, only use
/firmware/snapshots/ for releases tagged with "-current", otherwise
use the version number e.g. /firmware/5.7/ for 5.7-beta / 5.7.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.6 2015/01/04 14:55:47 espie Exp $
d57 1
d67 3
d240 10
d253 4
@


1.6
log
@remove extra scaffolding that's actually NOT in the committed copy of
the old fw_update
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.5 2015/01/04 14:54:12 espie Exp $
d36 1
a36 1
		if ($tag ne '-stable') {
@


1.5
log
@same semantics as old program
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.4 2015/01/04 14:48:19 espie Exp $
a65 3
	if ($state->verbose && !$state->opt('d')) {
		$state->say("PKG_PATH=#1", $state->{path});
	}
@


1.4
log
@cleaner logic, fix things so that fw_update -da makes sense
(deletes drivers not corresponding to that box, and updates/installs what's
needed)
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.3 2015/01/03 17:32:43 espie Exp $
d230 2
a231 1
				if (!$state->is_needed($driver)) {
d235 1
a235 2
		}
		if ($state->opt('a') || !$state->opt('d')) {
@


1.3
log
@make it able to install quirks from normal path (with normal key) and
other firmware from wanted path (with fw key).

Simplify the shennanigans wrt installed repo.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.2 2014/12/27 23:58:52 espie Exp $
a63 3
	if ($state->opt('d') && @@ARGV == 0) {
		$state->usage("Driver specification required for delete opration");
	}
d78 24
d135 2
a136 1
	my ($self, $state, $h) = @@_;
d139 1
a139 1
		$self->parse_dmesg($f, \%search, $h);
d145 1
a145 1
		$self->parse_dmesg($cmd, \%search, $h);
d154 1
a154 1
	my ($self, $state, $h) = @@_;
d160 2
a161 1
			$h->{$driver} = OpenBSD::Handle->from_location($l->[0]);
d175 1
a175 1
	my ($self, $state, $done, $inst, $driver) = @@_;
d178 3
a180 2
	if ($done->{$driver}) {
		$set = $state->updateset->add_older($done->{$driver});
d206 14
d224 2
a225 5
	my $todo = {};
	my $done = {};
	$self->find_machine_drivers($state, $todo);
	$self->find_installed_drivers($state, $done);
	my $inst = $state->repo->installed;
d228 11
a238 3
		for my $driver (keys %$todo) {
			push(@@{$state->{setlist}}, 
			    $self->find_handle($state, $done, $inst, $driver));
d242 1
a242 2
			my $set = $self->find_handle($state, $done, $inst, 
			    $driver);
d244 1
a244 1
				if (!$done->{$driver}) {
a249 1
			push(@@{$state->{setlist}}, $set);
@


1.2
log
@make it at least work a wee little bit.
@
text
@d4 1
a4 1
# $OpenBSD: FwUpdate.pm,v 1.1 2014/12/27 16:05:42 espie Exp $
d23 1
d61 11
a71 1
	$state->finish_init;
d77 1
a77 4
	$ENV{PKG_PATH} = $state->{path};
	if ($state->verbose && !$state->opt('d')) {
		$state->say("PKG_PATH=#1", $state->{path});
	}
d133 1
a133 2
	require OpenBSD::PackageInfo;
	my $list = OpenBSD::PackageInfo->installed_stems;
d135 4
a138 2
		if ($list->find("$driver-firmware")) {
			$h->{$driver} = 1;
d154 1
d156 1
a156 2
		my $l = $state->updater->stem2location($inst, $pkgname, $state);
		return $state->updateset->add_older(OpenBSD::Handle->from_location($l));
d158 1
a158 1
		return $state->updateset->add_hints($pkgname);
d160 2
d178 2
a179 2
#	$self->SUPER::do_quirks($state);
#	$state->finish_init;
@


1.1
log
@Specialisation of PkgAdd to do fw_update, not yet finished

okay to import deraadt@@
@
text
@d4 1
a4 1
# $OpenBSD$
d60 1
d65 1
d167 2
a168 2
	$self->SUPER::do_quirks($state);
	$state->finish_init;
@

