head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.26
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.30
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.28
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.22
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.24
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.16
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.20
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.18
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.01.22.35.47;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.17.18.53.08;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.17.11.02.10;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::RequiredBy - manage installed package dependencies

=head1 SYNOPSIS

    use OpenBSD::RequiredBy;


    # let's do things for real
    our $not = 0;

    my $o = OpenBSD::RequiredBy->new($pkgname);

    my $o2 = OpenBSD::Requiring->new($pkgname);

    print "Requirements for $pkgname are ", join(' ',$o2->list), "\n";

    # add some reverse dependencies
    $o->add($reverse_dep1, $reverse_dep2);

    # remove some dependency
    $o2->delete($dep);

    # forget some cache entry
    OpenBSD::RequiredBy->forget(installed_info($pkgname));

    # compute the transitive closure of some dependencies
    my @@fulldeps = OpenBSD::Requiring->compute_closure($pkg1, $pkg2);


=head1 DESCRIPTION

=for comment should add a reference to L<PackageInfo/installed_info>
when it's documented.

C<OpenBSD::RequiredBy> handles lists of forward and reverse dependencies
for installed packages.

If C<$main::not> is true, all change operations are done internally and
never written to disk.

C<$o = OpenBSD::RequiredBy-E<gt>new($pkgname)> gives access to the reverse
dependencies,
C<$o =OpenBSD::Requiring-E<gt>new($pkgname)>  gives access to the forward
dependencies.

Such an object can be used to list the dependencies C<$o-E<gt>list>,
add names to them C<$o-E<gt>add(name1, name2, ...)> or remove name from
them C<$o-E<gt>delete(name1, name2, ...)>.

The full list of forward dependencies (transitive closure) from a set of
packages is given by
C<OpenBSD::RequiredBy-E<gt>compute_closure($name1, name2, ...)>.
Likewise,
C<OpenBSD::Requiring-E<gt>compute_closure($name1, name2, ...)>
yields the list of reverse dependencies.

Those lists of dependencies trim duplicates and, unless C<$main::not> is true,
disk files are automatically synchronized whenever the lists change.

C<OpenBSD::RequiredBy> maintains a cache for efficiency. When an
installed package is deleted completely,
C<OpenBSD::RequiredBy-E<gt>forget($dir)> and
C<OpenBSD::Requiring-E<gt>forget($dir)> will remove the cache entries.
@


1.4
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::RequiredBy.pod,v 1.3 2007/06/01 22:35:47 espie Exp $
d11 1
a11 1
	
@


1.3
log
@very small clean-up of dependencies list handling.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::RequiredBy.pod,v 1.2 2005/08/17 18:53:08 espie Exp $
d45 1
a45 1
C<$o = OpenBSD::RequiredBy-E<gt>new($pkgname)> gives access to the reverse 
d47 1
a47 1
C<$o =OpenBSD::Requiring-E<gt>new($pkgname)>  gives access to the forward 
d55 1
a55 1
packages is given by 
d64 3
a66 3
C<OpenBSD::RequiredBy> maintains a cache for efficiency. When an 
installed package is deleted completely, 
C<OpenBSD::RequiredBy-E<gt>forget($dir)> and 
@


1.2
log
@document new method
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::RequiredBy.pod,v 1.1 2005/08/17 11:02:10 espie Exp $
d19 1
a19 1
    print "Requirements for $pkgname are ", join(' ',$o2->list()), "\n";
d50 1
a50 1
Such an object can be used to list the dependencies C<$o-E<gt>list()>,
@


1.1
log
@works better with the actual file.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::IdCache.pod,v 1.2 2005/06/13 11:33:07 espie Exp $
d30 3
d51 1
a51 1
add names to them C<$o-E<gt>add(name1, name2,...)> or remove name from
d53 7
@

