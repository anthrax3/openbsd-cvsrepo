head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.32
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.30
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.16
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.20
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.1.0.12
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.10.11.01.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.14.13.15.28;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::Search - package names matching framework

=head1 SYNOPSIS

   use OpenBSD::Search;

   # pkgspec objects
   my $search_object = OpenBSD::Search::PkgSpec->new($pattern);
   my $filter_object = OpenBSD::Search::Filter->keep_most_recent;

   # need repository to apply to

   use OpenBSD::PackageRepository::Installed;

   my $inst = OpenBSD::PackageRepository::Installed->new;

   my $list_ref = $inst->match_locations($search_object, $filter_object);


=head1 DESCRIPTION

C<OpenBSD::Search> provides a search infrastructure
for C<OpenBSD::PackageRepository> objects.

A given repository can be searched for existing packages using
C<$repo-E<gt>match_locations($search1, $filter1, ...);>

It returns a reference to a list of matching C<OpenBSD::PackageLocation>
objects.

A repository list can be searched in a similar way: the search
proceeds through each repository in the list, and stops as soon
as it finds a non-empty match (similar to C<ld -L> rules).

The first search object C<$search> is used to find the basic set
of matching packages, and further objects are used to weed out
unwanted elements from the list.

Complex searches must be built as lists of filter objects, in
order to preserve RepositoryList semantics, and ensure the correct
non-empty first match is returned.

The infrastructure provides the following objects:

=over 4

=item OpenBSD::Search::PkgSpec

C<OpenBSD::PkgSpec> filters.

=item OpenBSD::Search::Stem

finds all packages with a given stem.

=item OpenBSD::Search::PartialStem

finds all packages including a partial stem.

=item OpenBSD::Search::Filter

filters package list through further tests.

=back
@


1.3
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Search.pod,v 1.2 2009/11/10 11:01:15 espie Exp $
@


1.2
log
@tweak doc to only reference location objects
@
text
@d1 1
a1 1
$OpenBSD$
d9 1
a9 1
   use OpenBSD::Search; 
d26 1
a26 1
C<OpenBSD::Search> provides a search infrastructure 
d32 1
a32 1
It returns a reference to a list of matching C<OpenBSD::PackageLocation> 
@


1.1
log
@document search objects. Adjust PkgSpec documentation
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PkgSpec.pod,v 1.4 2007/05/12 14:54:46 espie Exp $
d21 1
a21 1
   my @@list = $inst->match($search_object, $filter_object);
d30 4
a33 1
C<$repo-E<gt>match($search1, $search2);>
@

