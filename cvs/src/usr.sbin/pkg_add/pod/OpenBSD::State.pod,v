head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.20
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.18
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.16
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.10
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2013.04.16.16.29.30;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.25.12.03.54;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@spelling fixes;
@
text
@$OpenBSD: OpenBSD::State.pod,v 1.2 2010/06/30 10:51:04 espie Exp $

=head1 NAME

OpenBSD::State - user interface framework

=head1 SYNOPSIS

    package MyCmd::State;
    use OpenBSD::State;
    our @@ISA = qw(OpenBSD::State);

    ...
    package myCmd;

    my $state = MyCmd::State->new("cmd");
    $state->handle_options('abc', '[-abc]');

    ...
    $state->say("I'm sorry #1, I'm afraid I can't do that", $user);

=head1 DESCRIPTION

C<OpenBSD::State> is the base class responsible for handling all user
interface needs of C<pkg_*(1)> commands.

As such, it contains internal state elements relevant to the working of
various commands.  It should be used for option handling, usage printing,
asking questions, or printing out values.

C<OpenBSD::State> is designed for inheritance.

It provides default behavior for options -v and -D value.

Subclass C<OpenBSD::State::AddCreateDelete> adds progressmeter behavior, along
with options -m, -n and -x.

Some methods can be used and overridden safely.

=over 4

=item $class->new($cmdname, @@params)

create a new state object of the desired class.
C<$cmdname> is mandatory to options usage printing.
C<@@params> are passed unchanged to C<init>.
Don't override, override C<init> instead.

=item $state->init(@@params);

initialize C<$state> based on C<@@params>.
Meant to be overridden. Always call C<$state-E<gt>SUPER::init(@@params)> at end.

=item $state->handle_options($opt_string, @@usage);

handle options to relevant to this command. Takes a C<OpenBSD::Getopt>
C<$opt_string>, and a set of C<@@usage> lines that will be printed if
necessary.

Option results are stored in the C<$state-E<gt>{opt}> hash. This can
be primed according to C<OpenBSD::Getopt> documentation for options that
require code.

Unless C<$state-E<gt>{no_exports}> is set, options will also be exported to
calling package, for legacy commands that still use C<our ($opt_x)> constructs.

In case of an error, usage will call C<die>.

Meant to be overridden.  A subclass C<handle_options> will normally do
all option parsing and stuff the results in the C<$state> object.

=item $state->usage($extra, @@args)

print out usage line, as set in C<handle_options>, along with possible
extra hints, following C<errprint> conventions.

=item $state->print($msg, @@args);

display a formatted message for the user.
Any C<#n> substring will be replaced by the nth argument from C<@@args>.
Numbering starts at 1, C<#0> can be used to display an actual C<#>.

All messages displayed by C<OpenBSD::State> using commands should use
this framework, so that messages can be translated (eventually).

Do not print directly to C<STDOUT> as this might garble the display
(especially with a progressmeter).

=item $state->errprint($msg, @@args);

like C<print>, but on C<STDERR>.

=item $state->say($msg, @@args);

like C<print>, with a line feed.

=item $state->errsay($msg, @@args);

like C<errprint>, with a line feed.

=item $state->fatal($msg, @@args);

use the same conventions as C<errsay>, but call C<die> with the resulting
string.

=item $state->f($msg, @@args);

basic formatting function used by C<print> and friends, return the formatted
string.

=back

=head1 BUGS

User interface needs are not fully fleshed out and C<OpenBSD::State> is
a work-in-progress.  What's described here should hopefully no longer
change too much.
@


1.2
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d1 1
a1 1
$OpenBSD$
d38 1
a38 1
Some methods can be used and overriden safely.
d69 1
a69 1
Meant to be overriden.  A subclass C<handle_options> will normally do
@


1.1
log
@document ::State a bit
@
text
@d57 1
a57 1
C<$opt_string>, and a set of C<@@usage> lines that will be printed if 
@

