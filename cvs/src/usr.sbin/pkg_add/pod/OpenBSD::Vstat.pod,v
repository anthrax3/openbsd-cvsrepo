head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.26
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.30
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.28
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.22
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.24
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.16
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.20
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.18
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.18.10.56.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.02.14.13.02;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.17.00.00.55;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.07.11.34.32;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.13.08.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::Vstat - virtual filesystem for C<pkg_add(1)> simulations

=head1 SYNOPSIS

    use OpenBSD::Vstat;

    my $v = OpenBSD::Vstat->new($state);

    $h = $v->add($filename, $size, $tag);
    $v->remove($filename, $size);
    $e = $v->exists($filename);
    $v->tally;

=head1 DESCRIPTION

C<OpenBSD::Vstat> provides methods to layout a virtual file system on top
of the real one.  This is generally used to simulate file system manipulations
before doing them for real.

The constructor C<new> expect a C<$state> object, that is, an object with
C<$state-E<gt>{not}> and C<$state-E<gt>errsay> defined.

Operations on the C<Vstat> object can modify C<$state-E<gt>{problems}>
and C<$state-E<gt>{overflow}>.

The method C<add> (respectively C<remove>) can be used to add a filename to
the file system (resp. remove a filename from the file system).
The method C<exists> looks for
a given filename: first it checks if it has been added or removed in
the virtual filesystem. Failing that, it looks into the real file system
using C<-e>.

Both C<add> and C<remove> also know about
Unix filesystem semantics, namely C<mount(8)> points and disk usage.
They return a small object corresponding to the filename's file system with
the following methods

=over 8

=item ro

defined if the filesystem is read-only. Usually hard to add files there.

=item nodev

defined if the filesystem forbids devices.

=item noexec

defined if the filesystem forbids execution.

=item nosuid

defined if the filesystem forbids SUID files.

=item avail

returns the number of bytes still available on the filesystem.

=back

C<exists> returns a true value if the filename exists.
If it is a virtual name added through C<add>, it returns
the C<$tag> specified as an optional argument. Otherwise, it returns 1.

C<tally> displays a summary of filesystem manipulations
after a series of additions and removals.

Due to the way packages get updated, size modifications through
C<remove> are delayed until the next call to
C<synchronize>: old files must be removed before
adding the new files in order to properly account for collisions,
but the old files occupy disk space while the new package gets extracted.

Modifications to the virtual file system are stored until a call to
C<synchronize>, which assumes the real file system will get those changes
(and thus we can forget them), or C<drop_changes>, which assumes the changes
won't get through, thus providing transactional semantics.

In case of file system overflow, C<remove_first> can be used to indicate
file removal happens before the creation of new files.

Typical use is as follows:
	do lot of changes to the Vstat object
	check for overflow.
	if so, drop_changes.
	redo the changes, with remove_first used instead of remove.

In case C<$state-E<gt>{not}> is true, the real file system will never store
changes, and thus the C<Vstat> object is layered to allow full transactional
back-out.


=head1 BUGS AND LIMITATIONS

C<OpenBSD::Vstat> now handles C<chroot(8)> situations gracefully, but
it doesn't know about symbolic links to directories and will report bogus
results in complicated cases.

C<OpenBSD::Vstat> needs an interface to deal with removed directories that
get replaced with files. Currently, it will report a conflict.
@


1.6
log
@document newer module and new framework (somewhat...)
document more stuff from Vstat.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Vstat.pod,v 1.5 2010/01/02 14:13:02 espie Exp $
d27 1
a27 1
Operations on the C<Vstat> object can modify C<$state-E<gt>{problems}> 
@


1.5
log
@replace vstat with modern code, almost ready for stacking vfs...
@
text
@d1 1
a1 1
$OpenBSD$
d27 3
d79 19
d103 3
@


1.4
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Vstat.pod,v 1.3 2007/04/17 00:00:55 espie Exp $
d11 6
a16 4
    $h = OpenBSD::Vstat::add($filename, $size, $tag);
    OpenBSD::Vstat::remove($filename, $size);
    $e = OpenBSD::Vstat::vexists($filename);
    OpenBSD::Vstat::tally();
d20 1
a20 1
C<OpenBSD::Vstat> provides functions to layout a virtual file system on top
d24 4
a27 2
The functions C<OpenBSD::Vstat::add> (respectively
C<OpenBSD::Vstat::remove>) can be used to add a filename to
d29 1
a29 1
The function C<OpenBSD::Vstat:vexists> looks for
d34 1
a34 1
Both C<OpenBSD::Vstat::add> and C<OpenBSD::Vstat::remove> also know about
d37 1
a37 1
the following fields
d57 1
a57 1
=item avail()
d63 2
a64 2
C<OpenBSD::Vstat::vexists> returns a true value if the filename exists.
If it is a virtual name added through C<OpenBSD::Vstat::add>, it returns
d67 1
a67 1
C<OpenBSD::Vstat:tally> displays a summary of filesystem manipulations
d71 2
a72 2
C<OpenBSD::Vstat::remove> are delayed until the next call to
C<OpenBSD::Vstat::synchronize>: old files must be removed before
a74 4

=head1 CAVEATS

The API to this module may change.
@


1.3
log
@document the subtle tweak to Vstat that allows updates to account for
size issues accurately.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Vstat.pod,v 1.2 2006/02/07 11:34:32 espie Exp $
d24 1
a24 1
the file system (resp. remove a filename from the file system).  
d66 1
a66 1
Due to the way packages get updated, size modifications through 
@


1.2
log
@synch
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Vstat.pod,v 1.1 2005/02/28 13:08:41 espie Exp $
d65 6
@


1.1
log
@basic API documentation, not yet finished.
@
text
@d1 1
a1 1
$OpenBSD$
d44 4
@

