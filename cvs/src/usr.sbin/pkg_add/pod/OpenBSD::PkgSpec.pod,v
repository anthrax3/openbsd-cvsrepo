head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.32
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.30
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.22
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.24
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.12.10.14.37;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.10.14.42.14;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.14.13.15.28;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.12.14.54.46;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.07.21.54.22;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.28.14.30.01;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.13.08.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::PkgSpec - C<packages-specs(7)> handling

=head1 SYNOPSIS

   use OpenBSD::Search; # which pulls in OpenBSD::PkgSpec when needed

   my $spec = OpenBSD::Search::PkgSpec->new($pattern);
   @@sublist = $spec->filter(@@list);

=head1 DESCRIPTION

C<OpenBSD::PkgSpec> is the canonical interface to C<packages-specs(7)>
handling.

A package specification C<$pattern> is a string that can be used to
extract matching package names from a C<@@list>.  The resulting list
C<@@sublist> will only hold the package names that match the specification.

For performance reason, the result may contain duplicates.

Note that any pattern will create a C<PkgSpec> object. If the syntax is
incorrect, the resulting object won't match anything. Use
C<$spec-E<gt>is_valid> to check for correctness.
@


1.7
log
@more auto-cache goodness
@
text
@d25 1
a25 1
Note that any pattern will create a C<PkgSpec> object. If the syntax is 
@


1.6
log
@zap old API
@
text
@d24 4
@


1.5
log
@document search objects. Adjust PkgSpec documentation
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PkgSpec.pod,v 1.4 2007/05/12 14:54:46 espie Exp $
a12 3

   # alternatively
   @@sublist = $spec->match_ref(\@@list);
@


1.4
log
@document the object interface to PkgSpec.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PkgSpec.pod,v 1.3 2005/10/07 21:54:22 jmc Exp $
d9 5
a13 3
   use OpenBSD::PkgSpec;
   my $spec = OpenBSD::PkgSpec->new($pattern);
   @@sublist = $spec->match(@@list);
@


1.3
log
@wonky capitalisation;
from bsd rutgers edu
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PkgSpec.pod,v 1.2 2005/02/28 14:30:01 espie Exp $
d10 4
a13 1
   @@sublist = OpenBSD::PkgSpec::match($pattern, @@list);
@


1.2
log
@document the public interface to PkgSpec.
Very simple actually...
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PkgSpec.pod,v 1.1 2005/02/28 13:08:41 espie Exp $
d9 1
a9 1
   use OpenBSD::PkgSPec;
@


1.1
log
@basic API documentation, not yet finished.
@
text
@d1 1
a1 1
$OpenBSD$
d9 3
d13 9
@

