head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.20
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.22
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.16
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.18
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.10
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.14
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.12
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.8
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.6
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.4
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.2
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@# @;


1.17
date	2012.01.15.14.16.16;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.31.09.18.47;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.18.10.56.32;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.01.08.18.01.54;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.05.23.13.01;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.11.23.07.07;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.03.09.32.14;	author landry;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.02.23.31.33;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.07.11.21.16;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.02.23.39.19;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.25.16.58.46;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.04.13.53.40;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.04.13.18.12;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.04.12.33.47;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.04.12.15.03;	author espie;	state Exp;
branches;
next	;


desc
@@


1.17
log
@document OpenBSD::md5
@
text
@$OpenBSD: OpenBSD::Intro.pod,v 1.16 2011/08/31 09:18:47 espie Exp $

=head1 NAME

OpenBSD::Intro - Introduction to the pkg tools internals

=head1 SYNOPSIS

   use OpenBSD::PackingList;
   ...

=head1 DESCRIPTION

Note that the C<OpenBSD::> namespace of perl modules is not limited to
package tools, but also includes L<pkg-config(1)> and L<makewhatis(8)>
support modules.
This document only covers package tools material.

The design of the package tools revolves around a few central ideas:

Design modules that manipulate some notions in a consistent way, so
that they can be used by the package tools proper, but also with a
high-level API that's useful for anything that needs to manipulate
packages.  This was validated by the ease with which we can now update
packing-lists, check for conflicts, and check various properties of
our packages.

Try to be as safe as possible where installation and update operations
are concerned.  Cut up operations into small subsets which yields frequent
safe intermediate points where the machine is completely functional.

Traditional package tools often rely on the following model: take
a snapshot of the system, try to perform an operation, and roll back to
a stable state if anything goes wrong.

Instead, OpenBSD package tools take a computational approach: record
semantic information in a useful format, pre-compute as much as can be
about an operation, and only perform the operation when we
have proved that (almost) nothing can go wrong.  As far as possible,
the actual operation happens on the side, as a temporary scaffolding, and
we only commit to the operation once most of the work is over.

Keep high-level semantic information instead of recomputing it all the
time, but try to organize as much as possible as plain text files.
Originally, it was a bit of a challenge: trying to see how much we could
get away with, before having to define an actual database format.
Turns out we do not need a database format, or even any cache on the
ftp server.

Avoid copying files all over the place. Hence the L<OpenBSD::Ustar(3p)>
module that allows package tools to manipulate tarballs directly without
having to extract them first in a staging area.

All the package tools use the same internal perl modules, which gives them
some consistency about fundamental notions.

It is highly recommended to try to understand packing-lists and packing
elements first, since they are the core that unlocks most of the package
tools.


=head1 COMMON NOTIONS

=over 3

=item packing-lists and elements

Each package consists of a list of objects (mostly files, but there are some
other abstract structures, like new user accounts, or stuff to do when
the package gets installed).
They are recorded in a L<OpenBSD::PackingList(3p)>, the module offers
everything needed to manipulate packing-lists.
The packing-list format has a text representation, which is documented
in L<pkg_create(1)>.
Internally, packing-lists are heavily structured. Objects are reordered
by the internals of L<OpenBSD::PackingList(3p)>, and there are some standard
filters defined to gain access to some commonly used information (dependencies
and conflicts mostly) without having to read and parse the whole packing-list.
Each object is an L<OpenBSD::PackingElement(3p)>, which is an abstract class
with lots of children classes.
The use of packing-lists most often combines two classic design patterns:
one uses Visitor to traverse a packing-list and perform an operation on
all its elements (this is where the order is important, and why some
stuff like user creation will `bubble up' to the beginning of the list), allied
to Template Method: the operation is often not determined for a
basic L<OpenBSD::PackingElement(3p)>, but will make more sense to an
L<OpenBSD::PackingElement::FileObject(3p)> or similar.
Packing-list objects have an "automatic visitor" property: if a method is not
defined for the packing-list proper, but exists for packing elements, then
invoking the method on the packing-list will traverse it and apply the method
to each element.
For instance, package installation happens through the following snippet:

    $plist->install_and_progress(...)

where C<install_and_progress> is defined at the packing element level,
and invokes C<install> and shows a progress bar if needed.

=item package names and specs

Package names and specifications for package names have a specific format,
which is described in L<packages-specs(7)>.   Package specs are objects
created in L<OpenBSD::PkgSpec(3p)>, which are then compared to objects
created in L<OpenBSD::PackageName(3p)>.  Both classes contain further functions
for high level manipulation of names and specs.
There is also a framework to organize searches based on L<OpenBSD::Search(3p)>
objects.  Specifications are structured in a specific way, which yields
a shorthand for conflict handling through L<OpenBSD::PkgCfl(3p)>,
allows the package system to resolve dependencies in
L<OpenBSD::Dependencies(3p)> and to figure out package
updates in L<OpenBSD::Update(3p)>.

=item sources of packages

Historically, L<OpenBSD::PackageInfo(3p)> was used to get to the list of
installed packages and grab information.  This is now part of a more
generic framework L<OpenBSD::PackageRepository(3p)>, which interacts with
the search objects to allow you to access packages, be they installed,
on the local machines, or distant.  Once a package is located, the repository
yields a proxy object called L<OpenBSD::PackageLocation(3p)> that can be used
to gain further info.  (There are still shortcuts for installed packages
for performance and simplicity reasons.)

=item package sets

Each operation (installation, removal, or replacement of packages)
is cut up into small atomic operations, in order to guarantee maximal
stability of the installed system. The package tools
will try really hard to only deal with one or two packages at a time,
in order to minimize combinatorial complexity, and to have a maximal number
of safe points, where an update operation can stop without hosing the
whole system. An update set is simply a minimal bag of packages, with old
packages that are going to be removed, new packages that are going
to replace them, and an area to record related ongoing computations.
The old set may be empty, the new set may be empty, and in all cases,
the update set shall be small (as small as possible).
We have already met with update situations where
dependencies between packages invert (A-1.0 depends on B-1.0, but B-0.0
depends on A-0.0), or where files move between packages, which in
theory will require update-sets with two new packages that replace two
old packages.  We still cheat in a few cases, but in most cases, L<pkg_add(1)>
will recognize those situations, and merge updatesets as required.
L<pkg_delete(1)> also uses package sets, but a simpler variation, known as
delete sets. Some update operations may produce inter-dependent packages,
and those will have to be deleted together, instead of one after another.
L<OpenBSD::UpdateSet(3p)> contains the code for both UpdateSets and DeleteSets
for historical reasons.

=item updater and tracker

PackageSets contain some initial information, such as a package name to
install, or a package location to update.

This information will be completed incrementally by a
C<OpenBSD::Update> updater object, which is responsible for figuring out
how to update each element of an updateset, if it is an older package, or
to resolve a hint to a package name to a full package location.

In order to avoid loops, a C<OpenBSD::Tracker> tracker
object keeps track of all the package name statuses: what's queued for
update, what is uptodate, or what can't be updated.

L<pkgdelete(1)> uses a simpler tracker, which is currently located inside
the L<OpenBSD::PkgDelete(3p)> code.

=item dependency information

Dependency information exists at three levels: first, there are source
specifications within ports. Then, those specifications turn into binary
specifications with more constraints when the package is built by
L<pkg_create(1)>, and finally, they're matched against lists of installed
objects when the package is installed, and recorded as lists of
inter-dependencies in the package system.

At the package level, there are currently two types of dependencies:
package specifications, that establish direct dependencies between
packages, and shared libraries, that are described below.

Normal dependencies are shallow: it is up to the package tools to
figure out a whole dependency tree throughout top-level dependencies.
None of this is hard-coded: this a prerequisite for flavored packages to
work, as we do not want to depend on a specific package if something
more generic will do.

At the same time, shared libraries have harsher constraints: a package
won't work without the exact same shared libraries it needs (same major
number, at least), so shared libraries are handled through a want/provide
mechanism that walks the whole dependency tree to find the required shared
libraries.

Dependencies are just a subclass of the packing-elements, rooted at
the C<OpenBSD::PackingElement::Depend> class.

A specific C<OpenBSD::Dependencies::Solver> object is used for the resolution
of dependencies (see L<OpenBSD::Dependencies(3p)>, the solver is mostly
a tree-walker, but there are performance considerations, so it also caches
a lot of information and cooperates with the C<OpenBSD::Tracker>.
Specificities of shared libraries are handled by L<OpenBSD::SharedLibs(3p)>.
In particular, the base system also provides some shared libraries which are
not recorded within the dependency tree.

Lists of inter-dependencies are recorded in both directions
(RequiredBy/Requiring). The L<OpenBSD::RequiredBy(3p)> module handles the
subtleties (removing duplicates, keeping things ordered, and handling
pretend operations).

=item shared items

Some items may be recorded multiple times within several packages (mostly
directories, users and groups). There is a specific L<OpenBSD::SharedItems(3p)>
module which handles these. Mostly, removal operations will scan
all packing-lists at high speed to figure out shared items, and remove
stuff that's no longer in use.

=item virtual file system

Most package operations will lead to the installation and removal of some
files.   Everything is checked beforehand: the package system must verify
that no new file will erase an existing file, or that the file system
won't overflow during the package installation.
The package tools also have a "pretend" mode where the user can check what
will happen before doing an operation.  All the computations and caching
are handled through the L<OpenBSD::Vstat(3p)> module, which is designed
to hide file system oddities, and to perform addition/deletion operations
virtually before doing them for real.

=item framework for user interaction

Most commands are now implemented as perl modules, with C<pkg(1)> requiring
the correct module C<M>, and invoking C<M-E<gt>parse_and_run("command")>.

All those commands use a class derived from C<OpenBSD::State> for user
interaction. Among other things, C<OpenBSD::State> provides for printable,
translatable messages, consistent option handling and usage messages.

All commands that provide a progress meter use the derived module
C<OpenBSD::AddCreateDelete>, which contains a derived state class
C<OpenBSD::AddCreateDelete::State>, and a main command class
C<OpenBSD::AddCreateDelete>, with consistent options.

Eventually, this will allow third party tools to simply override the user
interface part of C<OpenBSD::State>/C<OpenBSD::ProgressMeter> to provide
alternate displays.

=back

=head1 BASIC ALGORITHMS

There are three basic operations: package addition (installation),
package removal (deinstallation), and package replacement (update).

These operations are achieved through repeating the correct
operations on all elements of a packing-list.

=head2 PACKAGE ADDITION

For package addition, L<pkg_add(1)> first checks that everything is correct,
then runs through the packing-list, and extracts element from the archive.

=head2 PACKAGE DELETION

For package deletion, L<pkg_delete(1)> removes elements from the packing-list,
and marks `common' stuff that may need to be unregistered, then walks quickly
through all installed packages and removes stuff that's no longer used
(directories, users, groups...)

=head2 PACKAGE REPLACEMENT

Package replacement is more complicated. It relies on package names
and conflict markers.

In normal usage, L<pkg_add(1)> installs only new stuff, and checks that all
files in the new package don't already exist in the file system.
By convention, packages with the same stem are assumed to be different
versions of the same package, e.g., screen-1.0 and screen-1.1 correspond
to the same software, and users are not expected to be able to install
both at the same time.

This is a conflict.

One can also mark extra conflicts (if two software distributions install
the same file, generally a bad idea), or remove default conflict markers
(for instance, so that the user can install several versions of autoconf at
the same time).

If L<pkg_add(1)> is invoked in replacement mode (-r), it will use conflict
information to figure out which package(s) it should replace. It will then
operate in a specific mode, where it replaces old package(s) with a new one.

=over

=item *

determine which package to replace through conflict information

=item *

extract the new package 'alongside' the existing package(s) using
temporary filenames.

=item *

remove the old package

=item *

finish installing the new package by renaming the temporary files.

=back

Thus replacements will work without needing any extra information besides
conflict markers. pkg_add -r will happily replace any package with a
conflicting package.  Due to missing information (one can't predict the
future), conflict markers work both way: packages a and b conflict as
soon as a conflicts with b, or b conflicts with a.

=head2 PACKAGE UPDATES

Package replacement is the basic operation behind package updates.
In your average update, each individual package will be replaced
by a more recent one, starting with dependencies, so that the installation
stays functional the whole time.  Shared libraries enjoy a special status:
old shared libraries are kept around in a stub .lib-* package, so that
software that depends on them keeps running. (Thus, it is vital that porters
pay attention to shared library version numbers during an update.)

An update operation starts with update sets that contain only old packages.
There is some specific code (the C<OpenBSD::Update> module) which is used
to figure out the new package name from the old one.

Note that updates are slightly more complicated than straight replacement:
a package may replace an older one if it conflicts with it. But an older
package can only be updated if the new package matches (both conflicts and
correct pkgpath markers).

In every update or replacement, pkg_add will first try to install or update
the quirks package, which contains a global list of exceptions, such as
extra stems to search for (allowing for package renames), or packages to
remove as they've become part of base OpenBSD.

This search relies on stem names first (e.g., to update package
foo-1.0, pkg_add -u will look for foo-* in the PKG_PATH), then it trims
the search results by looking more closely inside the package candidates.
More specifically, their pkgpath (the directory in the ports tree from which
they were compiled). Thus, a package
that comes from category/someport/snapshot will never replace a package
that comes from category/someport/stable. Likewise for flavors.

Finally, pkg_add -u decides whether the update is needed by comparing
the package version and the package signatures: a package will not be
downgraded to an older version. A package signature is composed of
the name of a package, together with relevant dependency information:
all wantlib versions, and all run dependencies versions.
pkg_add only replaces packages with different signatures.

Currently, pkg_add -u stops at the first entry in the PKG_PATH from which
suitable candidates are found.

=head1 BUGS AND LIMITATIONS

There are a few desireable changes that will happen in the future:

=over

=item *

there should be some carefully designed mechanisms to register more
`global' processing, to avoid exec/unexec.

=back

=head1 LIST OF MODULES

=over 3

=item OpenBSD::Add

common operations related to a package addition.

=item OpenBSD::AddCreateDelete

common operations related to package addition/creation/deletion.
Mainly C<OpenBSD::ProgressMeter> related.

=item OpenBSD::AddDelete

common operations used during addition and deletion.
Mainly due to the fact that C<pkg_add(1)> will remove packages during
updates, and that addition/suppression operations are only allowed to
fail at specific times. Most updateset algorithms live there, as does
the upper layer framework for handling signals safely.

=item OpenBSD::ArcCheck

additional layer on top of C<OpenBSD::Ustar> that matches extra
information that the archive format cannot record with a packing-list.


=item OpenBSD::CollisionReport

checks a collision list obtained through C<OpenBSD::Vstat> against the
full list of installed files, and reports origin of existing files.

=item OpenBSD::Delete

common operations related to package deletion.

=item OpenBSD::Dependencies

looking up all kind of dependencies.  Contains rather complicated caching
to speed things up.  Interacts with the global tracker object.

=item OpenBSD::Error

handles signal registration, the exception mechanism, and auto-caching
methods.  Most I/O operations have moved to C<OpenBSD::State>.

=item OpenBSD::Getopt

L<Getopt::Std(3p)>-like with extra hooks for special options.

=item OpenBSD::Handle

proxy class to go from a package location to an opened package with plist,
including state information to cache errors.

=item OpenBSD::IdCache

caches uid and gid vs. user names and group names correspondences.

=item OpenBSD::Interactive

handles user questions (do not call directly, go through C<OpenBSD::State>
and derivatives).

=item OpenBSD::LibSpec

interactions between library objects from packing-lists, library specifications,
and matching those against actual lists of libraries (from packages or from
the system).

=item OpenBSD::LibSpec::Build

extends C<OpenBSD::LibSpec> for matching during ports builds.

=item OpenBSD::Log

component for printing information later, to be used by derivative classes
of C<OpenBSD::State>.

=item OpenBSD::Mtree

simple parser for L<mtree(8)> specifications.

=item OpenBSD::OldLibs

code required by C<pkg_add(1)> to handle the removal of old libraries during
update.

=item OpenBSD::PackageInfo

handles package meta-information (all the +CONTENTS, +DESCR, etc files)

=item OpenBSD::PackageLocation

proxy for a package, either as a tarball, or an installed package.
Obtained through C<OpenBSD::PackageRepository>.

=item OpenBSD::PackageLocator

central non-OO hub for the normal repository list
(should use a singleton pattern instead).

=item OpenBSD::PackageName

common operations on package names.

=item OpenBSD::PackageRepository

base class for all package sources. Actual packages instantiate as
C<OpenBSD::PackageLocation>.

=item OpenBSD::PackageRepositoryList

list of package repository, provided as a front to search objects,
because searching through a repository list has L<ld(1)>-like semantics
(stops at the first repository that matches).

=item OpenBSD::PackingElement

all the packing-list elements class hierarchy, together with common
methods that do not belong elsewhere.

=item OpenBSD::PackingList

responsible for reading/writing packing-lists, copying them, comparing them.

=item OpenBSD::Paths

hardcoded paths to external programs and locations.

=item OpenBSD::PkgAdd, OpenBSD::PkgCreate, OpenBSD::PkgCheck, OpenBSD::PkgDelete, OpenBSD:PkgInfo

implements corresponding commands.

=item OpenBSD::PkgCfl

conflict lists handling in an efficient way.

=item OpenBSD::PkgSpec

ad-hoc search for package specifications. External API is stable, but it
needs to be updated to use C<OpenBSD::PackageName> objects now that they
exist.

=item OpenBSD::ProgressMeter

handles display of a progress meter when a terminal is available, devolves
to nothings otherwise.

=item OpenBSD::Replace

common operations related to package replacement.

=item OpenBSD::RequiredBy

handles requiredby and requiring lists.

=item OpenBSD::Search

search object for package repositories: specs, stems, and pkgpaths.

=item OpenBSD::SharedItems

handles items that may be shared by several packages.

=item OpenBSD::SharedLibs

shared library specificities when handled as dependencies.

=item OpenBSD::Signature

handles package signatures and the corresponding version comparison (do not
confuse with cryptographic signatures, as handled through C<OpenBSD::x509>).

=item OpenBSD::State

base class to UI and option handling.

=item OpenBSD::Subst

conventions used for substituting variables during L<pkg_create(1)>,
and related algorithms.

=item OpenBSD::Temp

safe creation of temporary files as a light-weight module that also
deals with signal issues.

=item OpenBSD::Tracker

tracks all package names through update operations, in order to avoid
loops while doing incremental updates.

=item OpenBSD::Update

incremental computation of package replacements required by an update or
installation.

=item OpenBSD::UpdateSet

common operations to all package tools that manipulate update sets.

=item OpenBSD::Ustar

simple API that allows for Ustar (new tar) archive manipulation,
allowing for extraction and copies on the fly.

=item OpenBSD::Vstat

virtual file system (pretend) operations.

=item OpenBSD::md5

simple interface to the L<Digest::MD5(3p)> and L<Digest::SHA(3p)> modules.

=item OpenBSD::x509

cryptographic signature through x509 certificates. Mostly calls C<openssl(1)>.
Note that C<OpenBSD::ArcCheck>  is vital in ensuring archive meta-info have
not been tampered with.

=back
@


1.16
log
@synch with current state of affairs a bit
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.15 2010/06/30 10:51:04 espie Exp $
d105 5
a109 5
for high level manipulation of names and specs. 
There is also a framework to organize searches based on L<OpenBSD::Search(3p)> 
objects.  Specifications are structured in a specific way, which yields 
a shorthand for conflict handling through L<OpenBSD::PkgCfl(3p)>, 
allows the package system to resolve dependencies in 
d585 1
a585 1
simple interface to the L<Digest::MD5(3p)> module.
@


1.15
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d1 1
a1 1
$OpenBSD$
d102 9
a110 6
which is described in L<packages-specs(7)>.   Package names are handled
within L<OpenBSD::PackageName(3p)>.  There is also a framework to organize
searches based on L<OpenBSD::Search(3p)> objects.  Specifications are
structured in a specific way, which yields a shorthand for conflict handling
through L<OpenBSD::PkgCfl(3p)>, allows the package system to resolve
dependencies in L<OpenBSD::Dependencies(3p)> and to figure out package
d124 1
a124 1
=item update sets
d143 5
d151 1
a151 1
Updatesets contain some initial information, such as a package name to
d162 3
@


1.14
log
@document newer module and new framework (somewhat...)
document more stuff from Vstat.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.13 2010/01/08 18:01:54 espie Exp $
d133 1
a133 1
the update set shall be small (as small as possible). 
d222 1
a222 1
interaction. Among other things, C<OpenBSD::State> provides for printable, 
d261 1
a261 1
In normal usage, L<pkg_add(1)> installs only new stuff, and checks that all 
d404 1
a404 1
handles signal registration, the exception mechanism, and auto-caching 
d537 1
a537 1
base class to UI and option handling. 
@


1.13
log
@reflect recent changes
@
text
@d1 1
a1 1
$OpenBSD$
a195 1

d216 18
a355 6
Version number handling does not yet extends to package signatures.
Thus, some spurious downgrades may happen if the packagename itself does not
change.

=item *

a358 6
=item *

some packages should be able to refuse automatic update, and to interact
with the user. Again, to be carefully designed, so that one can still
understand what's going on.

d369 13
d395 6
a400 1
common operations related to a package deletion
d404 2
a405 2
handles external calls through C<system(3p)>, exception mechanism,
fatal errors and warnings.
d411 5
d422 17
a438 1
handles user questions (to be redesigned)
d444 5
d483 4
d491 4
d507 2
a508 4
handles display of a progress meter when a terminal is available.
Provided as a singleton object so that a graphical interface could
be used instead. In practice, most input-output of the package tools
will need to be abstracted first.
d530 9
d575 6
@


1.12
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.11 2009/12/05 23:13:01 espie Exp $
d133 2
a134 3
the update set shall be small (as small as possible).   Currently,
the package tools do not deal with all the cases they should. This is still
under construction.  We have already met with update situations where
d185 2
a186 2
a tree-walker, but there are performance considerations, so it may need
to cache a lot of information).
d303 5
a335 4

=item *

some complicated update scenarios are not fully handled through updatesets.
@


1.11
log
@a bit more documentation, including revisit of OpenBSD::Intro to reflect
the current state of things.
@
text
@d1 1
a1 1
$OpenBSD$
d123 2
a124 2
Each operation (installation, removal, or replacement of packages) 
is cut up into small atomic operations, in order to guarantee maximal 
d139 1
a139 1
old packages.  We still cheat in a few cases, but in most cases, pkg_add
d147 2
a148 2
This information will be completed incrementally by a 
C<OpenBSD::Update> updater object, which is responsible for figuring out 
d153 1
a153 1
object keeps track of all the package name statuses: what's queued for 
d230 1
a230 1
For package addition, L<pkg_add(1)> first checks that everything is correct, 
d242 2
a243 2
Package replacement is more complicated. It relies on package names 
and conflict markers.  
d245 2
a246 2
In normal usage, pkg_add installs only new stuff, and checks that all files 
in the new package don't already exist in the file system.
d250 1
a250 1
both at the same time. 
d252 1
a252 1
This is a conflict. 
d254 3
a256 3
One can also mark extra conflicts (if two software distributions install 
the same file, generally a bad idea), or remove default conflict markers 
(for instance, so that the user can install several versions of autoconf at 
d259 1
a259 1
If pkg_add is invoked in replacement mode (-r), it will use conflict 
d295 2
a296 2
stays functional the whole time.  Shared libraries enjoy a special status: 
old shared libraries are kept around in a stub .lib-* package, so that 
d301 1
a301 1
There is some specific code (the C<OpenBSD::Update> module) which is used 
d311 2
a312 2
the search results by looking more closely inside the package candidates. 
More specifically, their pkgpath (the directory in the ports tree from which 
d320 2
a321 2
the name of a package, together with relevant dependency information: 
all wantlib versions, and all run dependencies versions. 
d339 1
a339 1
Version number handling does not yet extends to package signatures. 
d477 1
a477 1
conventions used for substituting variables during L<pkg_create(1)>, 
@


1.10
log
@fix two typos; "fine" jmc@@
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.9 2008/11/03 09:32:14 landry Exp $
d123 3
a125 4
This is a new notion (introduced around OpenBSD 4.1) which is not yet fully
used throughout the package tools.  Each operation (installation, removal,
or replacement of packages) is cut up into small atomic operations, in order
to guarantee maximal stability of the installed system. The package tools
d139 16
a154 1
old packages.  Currently, we cheat.
d300 8
a307 2
An update operation starts by figuring out which packages to update (walking
the selected packages dependency trees). 
a308 1
Then it looks for new packages to replace the old ones.
d318 2
a319 1
the package signatures: a package signature is composed of
d322 1
a322 1
If anything is different, it means the new package must replace the old one.
d335 1
a335 3
pkg_add -u should be able to find updates with a stem change.
This requires an extra mechanism that would say `oh, this package changed
name', as we cannot afford to look into every single package.
d339 3
a341 7
more complicated update scenarios could happen, once UpdateSets are fully
functional.

=item *

pkg_add has no real notion of version number. Thus, updates work only
in so far as you direct your PKG_PATH to a more recent repository.
d485 5
d492 2
a493 1
computes lists of package replacements required by an update.
a497 2
Lots of things to do.

@


1.9
log
@Fix some errors, okay espie@@
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.8 2008/06/02 23:31:33 jmc Exp $
d74 1
a74 1
in L<pkg_create(3p)>.
d195 1
a195 1
files.   Everything is checked beforehand: the package systeme must verify
@


1.8
log
@fix references to OpenBSD:Ustar; from Alan Bueno
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.7 2008/04/07 11:21:16 espie Exp $
d131 1
a131 1
packages that are going to be installed, new packages that are going
d299 1
a299 1
the package signatures: a package signature is information is composed of
@


1.7
log
@document OpenBSD::Subst
@
text
@d1 1
a1 1
$OpenBSD$
d50 1
a50 1
Avoid copying files all over the place. Hence the L<OpenBSD::UStar(3p)>
@


1.6
log
@fix bugs formatting
@
text
@d461 5
@


1.5
log
@document the basic algorithms used by pkg*.
Actually a must-read for any porter who plays with non-trivial updates.
@
text
@d310 6
a315 1
* pkg_add -u should be able to find updates with a stem change.
d318 4
a321 1
* more complicated update scenarios could happen, once UpdateSets are fully
d323 4
a326 1
* pkg_add has no real notion of version number. Thus, updates work only
d328 4
a331 1
* there should be some carefully designed mechanisms to register more
d333 4
a336 1
* some packages should be able to refuse automatic update, and to interact
d339 2
@


1.4
log
@specify that MakeWhatis and pkg-config fall outside the scope of this document
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.3 2008/02/04 13:18:12 landry Exp $
d208 114
a321 1
To be done.
@


1.3
log
@Replace bogus lowercase n in 'DESCRIPTIOn'
'go for it' espie@@
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.2 2008/02/04 12:33:47 espie Exp $
d13 5
@


1.2
log
@typos and whitespace
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Intro.pod,v 1.1 2008/02/04 12:15:03 espie Exp $
d12 1
a12 1
=head1 DESCRIPTIOn
@


1.1
log
@a somewhat long introduction to how the package tools really work,
so that people finally get a jump-start at figuring out code that's still
evolving,..
@
text
@d1 1
a1 1
$OpenBSD$
d20 1
a20 1
packing-lists, check for conflicts, and validate various properties of
d27 1
a27 1
Traditional package tools often rely on the followng model: take
d31 1
a31 1
Instead, these package tools take a computational approach: record
d33 1
a33 1
about an operation that's going to happen, and only perform it when we
d35 2
a36 2
perform the actual operation on the side, as a temporary package, and
only commit to the operation once most of the work is over.
d38 1
a38 1
Keep high level semantic information instead of recomputing it all the
d40 1
a40 1
Originally, it was a bit of a challenge, trying to see how much we could
d42 1
a42 1
Turned out we do not need a database format, or even any cache on the
d52 1
a52 1
It is highly recommended to try to understand packing-lists and packing 
d65 1
a65 1
the package gets installed).  
d68 2
a69 2
The packing-list format has a text representation, which is documented 
within L<pkg_create(3p)>.
d73 1
a73 1
and conflicts mostly) without having to read and parse all the packing-list.
d77 2
a78 2
one uses Visitor to traverse a packing-list and perform an operation on 
all its elements (this is where the order is important, and why some 
d80 1
a80 1
to Template Method: the operation is often completely undefined for a
d83 1
a83 1
Packing-lists object have an "automatic visitor": if a method is not
d86 1
a86 1
to all the elements.
d91 1
a91 1
where install_and_progress is defined at the packing element level,
d96 1
a96 1
Package names and specifications for package names have a specific format, 
d99 2
a100 2
searches based in L<OpenBSD::Search(3p)>.  Specifications are structured
in a specific way, which yields a shorthand for conflict handling
d102 1
a102 1
dependencies in L<OpenBSD::Dependencies(3p)>, and to figure out package
d110 1
a110 1
the searches objects to allow you to access packages, be they installed,
d114 1
a114 1
for performance and simplicity reasons).
d120 1
a120 1
or replacement of packages) is cut up as small atomic operations, in order
d125 1
a125 1
whole system. And update set is simply a minimal bag of packages, with old
d127 1
a127 1
to replace them, and an area to record related ongoing computations.  
d130 1
a130 1
the package tools do not deal with all cases they should. This is still
d139 4
a142 4
Dependency information exists at three levels: there are source
specifications within ports. Those specifications turn into binary
specifications with more constraints when the package is built by 
L<pkg_create(1)>, and then they're matched against lists of installed
d159 1
a159 1
mechanism that walk the whole dependency tree to find the required shared
d165 1
a165 1
A specific C<OpenBSD::Dependencies::Solver> object is used for the resolution 
d167 4
a170 4
a tree-walker, but there are performance considerations, so it can need
to cache a lot of information).  
Specificities of shared libraries are handled by L<OpenBSD::SharedLibs(3p)>. 
In particular, the base system also provides some shared libraries which are 
d173 2
a174 2
Lists of inter-dependencies are recorded in both directions 
(RequiredBy/Requiring). The L<OpenBSD::RequiredBy(3p)> module handles the 
d183 1
a183 1
module which handles these. Mostly, all removal operations will scan
d191 1
a191 1
that no new file will erase an existing file, or that the filing system
d230 1
a230 1
handles external calls through C<system(3p)>, exception mechanism, 
d260 1
a260 1
central non-OO hub for the normal repository list 
@

