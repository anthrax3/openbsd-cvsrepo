head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.26
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.16
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.20
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.08.11.32.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.17.08.32.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::Getopt - Process single-characters switches

=head1 SYNOPSIS

   use OpenBSD::Getopt;

   our($opt_o, $opt_i, $opt_f, $opt_v);
   getopts('oifv:',
    	{ 'v' => sub {
		++$opt_v;}
	}

=head1 DESCRIPTION

This is similar to L<getopt(3)>. One call to C<getopts($optstring)> parses
all the options using the C<$optstring> as a list of simple switches
(letter) and switches with arguments (letter followed by C<:>).

Option values are directly written into local variables of the form
C<$opt_S>, where C<S> is the switch name.

Contrary to L<getopt(3)>, C<$opt_S> is incremented each time the switch is
seen, to allow for stuff like C<-vv>.

An optional hash can be used as a second argument, with switches as keys
and subs as values. When a switch is met, the sub C<$foo> is called as
C<$foo> for a simple switch and as C<$foo(option_value)> for a switch
with argument.
@


1.3
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Getopt.pod,v 1.2 2008/03/08 11:32:38 espie Exp $
@


1.2
log
@let GetOpt count how many times it sees an option, removes special case
for -v, and allow other fun possibilities.
@
text
@d1 1
a1 1
$OpenBSD$
d11 1
a11 1
   our($opt_o, $opt_i, $opt_f, $opt_v); 
d19 1
a19 1
This is similar to L<getopt(3)>. One call to C<getopts($optstring)> parses 
@


1.1
log
@document Getopt.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackageName.pod,v 1.1 2005/08/17 08:17:44 espie Exp $
d25 3
@

