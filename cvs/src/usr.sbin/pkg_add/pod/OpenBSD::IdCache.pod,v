head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.30
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.28
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.22
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.18
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.16
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.14
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.12
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.10
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.8
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.6
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.13.11.33.07;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.13.08.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@$OpenBSD$

=head1 NAME

OpenBSD::IdCache - cache for user and group look-ups

=head1 SYNOPSIS

    use OpenBSD::IdCache;

    my $ucache = new OpenBSD::UidCache;
    my $uid = $ucache->lookup("espie");

    my $gcache = new OpenBSD::GidCache;
    my $gid = $gcache->lookup("wheel", 0);

    my $unamecache = new OpenBSD::UnameCache;
    my $name = $unamecache->lookup($uid);

    my $gnamecache = new OpenBSD::GnameCache;
    my $grname = $gnamecache->lookup($gid);

=head1 DESCRIPTION

C<OpenBSD::IdCache> provides four classes: C<OpenBSD::UidCache> for UIDs,
C<OpenBSD::GidCache> for GIDs, C<OpenBSD::UnameCache> for user names, and
C<OpenBSD::GnameCache> for group names.

C<UidCache::new> creates a UID cache, which can be used to look up user
names by using the C<lookup> method.  Looking up a numeric user name
is a no-op. Non-existing IDs return a default value, which is normally
C<undef> but can be provided as an extra argument to C<lookup>.

C<GidCache::new> provides the same service for GIDs.

C<UnameCache::new> creates a user name cache, which can be used to look up
UIDs.

C<GnameCache::new> provides the same service for group names.
@


1.2
log
@provide reverse lookup services, as a simple extension (to be used
to write UStar archives momentarily).
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::IdCache.pod,v 1.1 2005/02/28 13:08:41 espie Exp $
@


1.1
log
@basic API documentation, not yet finished.
@
text
@d1 1
a1 1
$OpenBSD$
d5 1
a5 1
OpenBSD::IdCache - cache for uid and gid look-ups
d17 6
d25 3
a27 2
C<OpenBSD::IdCache> provides two classes: C<OpenBSD::UidCache>, for UIDs,
and C<OpenBSD::GidCache> for GIDs.
d35 5
@

