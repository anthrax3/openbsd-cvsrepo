head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.28
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.26
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.20
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.22
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@# @;


1.10
date	2011.01.02.14.51.47;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.02.15.17.36;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.29.10.52.15;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.19.09.30.28;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.08.08.51.27;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.04.22.47.56;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.02.20.10.25;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.13.08.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@use new convention for methods with empty parameters.
document PrelinkStuffOnly
@
text
@$OpenBSD: OpenBSD::PackingList.pod,v 1.9 2010/06/30 10:51:04 espie Exp $

=head1 NAME

OpenBSD::PackingList - C<pkg_add(1)> packing-list manipulations

=head1 SYNOPSIS

    use OpenBSD::PackingList;
    # different methods to create packing-lists
    my $p1 = OpenBSD::PackingList->new;		# empty
    my $p2 = OpenBSD::PackingList->read($fh);
    my $p3 = OpenBSD::PackingList->fromfile($filename);
    my $p4 = OpenBSD::PackingList->fromfile(\$scalar);
    my $p5 = OpenBSD::PackingList->from_installation($pkgname);

    # writing packing-lists
    $p2->write($fh);
    $p3->tofile($filename);
    $p4->to_installation;
    $p4->to_cache;

    # building up packing-lists
    OpenBSD::PackingElement::SUBCLASS->add($plist, @@args);
    my $o = OpenBSD::PackingElement::SUBCLASS->new(@@args);
    $o->add_object($plist);

    # tests and access
    $b = $p2->has($name);
    $b = $p2->get($name);
    # frequent accesses
    print $p3->pkgname, $p3->localbase, "\n";

    # processing packing-lists
    $p4->visit('method', @@args);

    # auto visit
    $p4->method(@@args);

    # signatures
    if ($p3->signature eq $p4->signature) {
    }

=head1 DESCRIPTION

C<OpenBSD::PackingList> is the only supported interface for access to
packing-list information. It includes conversion methods from an external
textual representation (file) into an internal structured representation.
Basically, a packing-list is a collection of strongly-typed objects. Some
of these objects are just properties of the package (like the package name,
or dependencies), some objects have long lists of properties (files come
with MD5 checksums, sizes, or linknames), some objects represent state
information (like file modes) and must be kept in the proper order.
The C<OpenBSD::PackingList> class handles all that.

Packing-lists can be obtained using the following methods: from an
opened file handle using C<OpenBSD::PackingList-E<gt>read($fh)>, from
an existing file using C<OpenBSD::PackingList-E<gt>fromfile($filename)>,
from a scalar in memory using C<OpenBSD::PackingList-E<gt>fromfile(\$scalar)>,
or from an installed package using
C<OpenBSD::PackingList-E<gt>from_installation($pkgname)>.

Since building a full packing-list is a complex operation and can consume
a large amount of memory, those methods may take an extra argument in order to
obtain partial packing-lists with only some information:

=over 16

=item SharedItemsOnly

read only stuff that may be shared between packages, e.g., new users,
groups and directories.

=item LibraryOnly

read only shared library entries.

=item FilesOnly

read only files without the associated annotations like size or MD5.

=item DependOnly

read only dependency information.

=item ExtraInfoOnly

read only the extra information field.

=item UpdateInfoOnly

read only what is needed to decide to update a package.

=item PrelinkStuffOnly

read only what is need to figure out all binary/library information, e.g.,
libraries, dependencies and binaries.

=back

A complete packing-list C<$plist> may be written to disk using the
following methods:
C<$plist-E<gt>write($fh)> will write a packing-list to an
opened file handle C<$fh>, C<$plist-E<gt>tofile($filename)> will
write a packing-list to a file named C<$filename>, and
C<$plist-E<gt>to_installation> will write a packing-list during
registration of a package.

In addition C<$plist-E<gt>to_cache> will register enough
information from a package to let the framework believe the package has
been installed. This is used for the simulation modes of C<pkg_add(1)>
and friends.

Since a packing-list is structured information, reading a packing-list from
the disk and writing it back offers no guarantee the information will remain
in the same order.  It is a good way to validate packing-lists and normalize
them, though.

Building packing-lists entails cooperation with C<OpenBSD::PackingElement>.
Packing-lists are usually built by adding objects from an
C<OpenBSD::PackingElement> subclass to the packing-list, either with
the C<add> constructor:
C<OpenBSD::PackingElement::SUBCLASS-E<gt>add($plist, $args)>, which builds
a packing element and adds it to the packing-list in one operation, or with
the C<add_object> method, which takes an existing packing element and adds it
to the packing-list (note that C<add_object> only makes sense for subclasses
of C<OpenBSD::PackingElement::Object>).
See L<OpenBSD::PackingElement> for more details.

C<$plist-E<gt>pkgname> retrieves a packing-list name (mandatory).
C<$plist-E<gt>signature> retrieves a packing-list full signature, composed
of the package name and dependency information.

C<$plist-E<gt>visit($method, @@args)> is a visitor pattern, calling
C<method(@@args)> on each element of the packing-list in a specific order.

As a feature, if C<OpenBSD::PackingElement-E<gt>can(method)>,
C<$plist-E<gt>method(@@args)> will be turned into a visitor call automatically.
@


1.9
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d1 1
a1 1
$OpenBSD$
d11 1
a11 1
    my $p1 = OpenBSD::PackingList->new();	# empty
d20 2
a21 2
    $p4->to_installation();
    $p4->to_cache();
d94 5
d106 1
a106 1
C<$plist-E<gt>to_installation()> will write a packing-list during
d109 1
a109 1
In addition C<$plist-E<gt>to_cache()> will register enough
d130 2
a131 2
C<$plist-E<gt>pkgname()> retrieves a packing-list name (mandatory).
C<$plist-E<gt>signature()> retrieves a packing-list full signature, composed
@


1.8
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.7 2007/05/02 15:17:36 espie Exp $
@


1.7
log
@replace pkgbase with less confusing name localbase
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.6 2007/04/29 10:52:15 espie Exp $
d60 1
a60 1
or from an installed package using 
d71 1
a71 1
read only stuff that may be shared between packages, e.g., new users, 
d96 1
a96 1
A complete packing-list C<$plist> may be written to disk using the 
d100 1
a100 1
write a packing-list to a file named C<$filename>, and 
d104 1
a104 1
In addition C<$plist-E<gt>to_cache()> will register enough 
d115 1
a115 1
Packing-lists are usually built by adding objects from an 
d117 1
a117 1
the C<add> constructor:  
d132 1
a132 1
As a feature, if C<OpenBSD::PackingElement-E<gt>can(method)>, 
@


1.6
log
@use an AUTOLOAD to auto-create PackingList visitors when needed.
Document visitors, at least partially.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.5 2005/09/19 09:30:28 espie Exp $
d32 1
a32 1
    print $p3->pkgname(), $p3->pkgbase(), "\n";
d41 1
a41 1
    if ($p3->signature() eq $p4->signature()) {
@


1.5
log
@reading a packing-list from a scalar in memory does work.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.4 2005/09/08 08:51:27 espie Exp $
d37 3
d129 5
@


1.4
log
@typo, from Bernd Ahlers
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.3 2005/09/04 22:47:56 espie Exp $
d14 2
a15 1
    my $p4 = OpenBSD::PackingList->from_installation($pkgname);
d56 1
@


1.3
log
@* New -i interactive option, that can ask obnoxious questions.
* move the signature code to a packing-list method, prepend the pkgname.
* depend on distant listings, cache these systematically.
* cut the PKG_PATH at :/ systematically, much simpler than parsing URLs.
People should get used to trailing /s.
* let pkg_add -u actually run the update.
* check for signature in more places, for instance, let pkg_add installed_stuff
be a void operation.
* grab enough stuff during updates to check signatures, so that pkg_add -u
can report updates that are not needed right away, instead of waiting
for the more confusing `trying to update'
* beginning of @@module support.
* @@pkgpath support, including updates.
* systematically expand stems when applicable.
* use visitors systematically in pkg_info.
* pkg_info -S reports signature.
* remove hardcoding of categories in PackingList, so that future modules
will be able to expand them.
* add @@updateset and @@incompatibility keywords.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.2 2005/03/02 20:10:25 espie Exp $
d75 1
a75 1
read only files without the associated annotations like size of MD5.
@


1.2
log
@flesh out documentation.
thanks jmc@@ for comments.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::PackingList.pod,v 1.1 2005/02/28 13:08:41 espie Exp $
d36 4
d85 4
d119 4
@


1.1
log
@basic API documentation, not yet finished.
@
text
@d1 1
a1 1
$OpenBSD$
d9 27
d37 75
@

