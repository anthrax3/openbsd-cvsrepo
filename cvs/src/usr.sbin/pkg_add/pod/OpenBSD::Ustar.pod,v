head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.16
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.20
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.18
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.12
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.14
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.6
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.10
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.8
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.4
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.11.0.4
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.19
date	2012.08.30.02.52.16;	author william;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.20.08.21.25;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2011.01.02.14.49.49;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.14.10.04.36;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.07.28.12.19.54;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.30.10.51.04;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.17.11.41.30;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.02.23.31.33;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.26.23.36.26;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.26.23.26.50;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.17.10.35.27;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.26.16.48.30;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.20.13.27.38;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.13.18.38.59;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.13.14.24.06;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.13.12.54.11;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.13.12.39.14;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.12.11.24.28;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.13.08.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Lowercase the first "i" in isFile, isLink, isSymLink, and isHardLink
to match reality.

ok espie
@
text
@$OpenBSD: OpenBSD::Ustar.pod,v 1.18 2011/03/20 08:21:25 espie Exp $

=head1 NAME

OpenBSD::Ustar - simple access to Ustar C<tar(1)> archives

=head1 SYNOPSIS

    use OpenBSD::Ustar;
    # for reading

    open(my $in, "<", $arcnameforreading) or die;
    $rdarc = OpenBSD::Ustar->new($in, $state, $destdir);
    $rdarc->set_description($arcnameforreading);
    while (my $o = $rdarc->next) {
    	# decide whether we want to extract it, change object attributes
	$o->create;
    }
    $rdarc->close;

    # for writing
    open(my $out, ">", $arcnameforwriting) or die;
    $wrarc = OpenBSD::Ustar->new($fh, $state, $destdir);
    # loop
    	my $o = $wrarc->prepare($filename);
	# tweak some entry parameters
	$o->write;

    $wrarc->close;

    # for copying
    open(my $in, "<", $arcnameforreading) or die;
    $rdarc = OpenBSD::Ustar->new($in, $state, $destdir);
    open(my $out, ">", $arcnameforwriting) or die;
    $wrarc = OpenBSD::Ustar->new($fh, $state, $destdir);
    while (my $o = $rdarc->next) {
    	$o->copy($wrarc);
    }
    $rdarc->close;
    $wrarc->close;

=head1 DESCRIPTION

C<OpenBSD::Ustar> provides an API to read, write and copy archives compatible
with C<tar(1)>.
For the time being, it can only handle the USTAR archive format.

A filehandle C<$fh> is associated with an C<OpenBSD::Ustar> object through
C<new>. For archive reading, the filehandle should support
C<read>. C<OpenBSD::Ustar> does not rely on C<seek> or C<rewind> in order
to be usable on pipe outputs. For archive writing, the filehandle should
support C<print>.

Error messages and fatal errors will be handled through the C<$state> object,
which should conform to C<OpenBSD::State(3p)> (uses C<errsay> and C<fatal>).

Note that read and write support are mutually exclusive, though there is
no need to specify the mode used at creation time; it is implicitly
provided by the underlying filehandle.

Read access to an archive object C<$rdarc> occurs through a loop that
repeatedly calls C<$o = $rdarc-E<gt>next> to obtain the next archive entry.
It returns an archive entry object C<$o> that can be
queried to decide whether to extract this entry or not.

Write access to an archive object C<$wrarc> occurs through a user-directed
loop: obtain an archive entry through C<$o = $wrarc-E<gt>prepare($filename)>,
which can be tweaked manually and then written to the archive.

C<prepare> takes an optional C<$destdir> parameter that will override the
archive destdination directory.
This can be used to prepare an archive entry from a temporary file, that
will be used for the real checks and contents of the archive, then set
the name to save before writing the actual entry:

    $o = $wrarc->prepare($tempfile, '');
    $o->set_name("othername");
    $o->write;

Most client software will specialize C<OpenBSD::Ustar> to their own needs.
Note however that C<OpenBSD::Ustar> is not designed for inheritance.
Composition (putting a C<OpenBSD::Ustar> object inside your class) and
forwarding methods (writing C<create> or C<next> methods that call the
corresponding C<OpenBSD::Ustar> method) are the correct way to use this API.

Note that C<OpenBSD::Ustar> does not do any caching. The client
code is responsible for retrieving and storing archives if it
needs to scan through them multiple times in a row.

Actual extraction is performed through C<$o-E<gt>create> and is not
mandatory. Thus, client code can control whether it wants to extract archive
elements or not.

In case of errors, the archive will call C<$state-E<gt>fatal> with a suitable
error message that contains the last index name processed. The user may
set an optional archive description with C<set_description>.

The C<create> method can take an optional C<$callback> argument, which will
be called regularly while extracting large objects, as C<&$callback($donesize)>,
with C<$donesize> the number of bytes already extracted.

Small files can also be directly extracted to a scalar using
C<$v = $o-E<gt>contents>.

Actual writing is performed through C<$o-E<gt>write> and is not mandatory
either.

Archives should be closed using C<$wrarc-E<gt>close>, which will
pad the archive as needed and close the underlying file handle.
In particular, this is mandatory for write access, since valid archives
require blank-filled blocks.

This is equivalent to calling C<$wrarc-E<gt>pad>, which will
complete the archive with blank-filled blocks, then closing the
associated file handle manually.

Client code may decide to abort archive extraction early, or to run it through
until C<$arc-E<gt>next> returns false.  The C<OpenBSD::Ustar> object doesn't
hold any hidden resources and doesn't need any specific clean-up.

Client code is only responsible for closing the underlying filehandle and
terminating any associated pipe process.

An object C<$o> returned through C<next> or through C<prepare> holds all
the characteristics of the archive header:

=over 20

=item C<$o-E<gt>IsDir>

true if archive entry is a directory

=item C<$o-E<gt>isFile>

true if archive entry is a file

=item C<$o-E<gt>isLink>

true if archive entry is any kind of link

=item C<$o-E<gt>isSymLink>

true if archive entry is a symbolic link

=item C<$o-E<gt>isHardLink>

true if archive entry is a hard link

=item C<$o-E<gt>{name}>

filename

=item C<$o-E<gt>{mode}>

C<chmod(2)> mode

=item C<$o-E<gt>{atime}>

C<utime(2)> access time

=item C<$o-E<gt>{mtime}>

C<utime(2)> modification time

=item C<$o-E<gt>{uid}>

owner user ID

=item C<$o-E<gt>{gid}>

owner group ID

=item C<$o-E<gt>{uname}>

owner user name

=item C<$o-E<gt>{gname}>

owner group name

=item C<$o-E<gt>{linkname}>

name of the source link, if applicable

=back

The fields C<name>, C<mode>, C<atime>, C<mtime>, C<uid>, C<gid> and C<linkname>
can be altered before calling C<$o-E<gt>create> or C<$o-E<gt>write>,
and will properly influence the resulting file.
C<atime> and C<mtime> can be undef to set those to the current time.

The relationship between C<uid> and C<uname>, and C<gid> and C<gname>
conforms to the USTAR format usual behavior.

In addition, client code may define C<$o-E<gt>{cwd}> in a way similar
to C<tar(1)>'s C<-C> option to affect the creation of hard links.

All creation commands happen relative to the current destdir of
the C<$arc> C<OpenBSD::Ustar> object.  This is set at creation, and can
later be changed through C<$arc-E<gt>destdir($value)>.

During writing, hard link status is determined according to already written
archive entries: a name that references a file which has already been written
will be granted hard link status.

Hard links can not be copied from one archive to another unless the original
file has also been copied.  Calling C<$o-E<gt>alias($arc, $name)> will trick
the destination archive C<$arc> into believing C<$o> has been copied under the
given C<$name>, so that further hard links will be copied over.

Archives can be copied by creating separate archives for reading and writing.
Calling C<$o = $rdarc-E<gt>next> and C<$o-E<gt>copy($wrarc)> will copy
an entry obtained from C<$rdarc> to C<$wrarc>.
@


1.18
log
@document new stuff
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.17 2011/01/02 14:49:49 espie Exp $
d133 1
a133 1
=item C<$o-E<gt>IsFile>
d137 1
a137 1
=item C<$o-E<gt>IsLink>
d141 1
a141 1
=item C<$o-E<gt>IsSymLink>
d145 1
a145 1
=item C<$o-E<gt>IsHardLink>
@


1.17
log
@document optional prepare parameter
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.16 2010/09/14 10:04:36 espie Exp $
d14 1
d93 4
@


1.16
log
@document atime/mtime
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.15 2010/07/28 12:19:54 espie Exp $
d68 10
@


1.15
log
@pass state to Ustar objects, use it to display those pesky error and
fatal messages.

zap $opt_x from pkg_mklocated, do things like other commands do.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.14 2010/06/30 10:51:04 espie Exp $
d142 4
d172 1
a172 1
The fields C<name>, C<mode>, C<mtime>, C<uid>, C<gid> and C<linkname>
d175 1
@


1.14
log
@allow say and errsay to work without parameters, as it's ways common.
create verbose_system up in state, because it makes sense without verbose.
@
text
@d1 1
a1 1
$OpenBSD$
d13 1
a13 1
    $rdarc = OpenBSD::Ustar->new($in, $destdir);
d22 1
a22 1
    $wrarc = OpenBSD::Ustar->new($fh, $destdir);
d32 1
a32 1
    $rdarc = OpenBSD::Ustar->new($in, $destdir);
d34 1
a34 1
    $wrarc = OpenBSD::Ustar->new($fh, $destdir);
d52 3
@


1.13
log
@remove extra spaces, fix doc for Ustar (create, not extract), and document
callback.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.12 2008/06/02 23:31:33 jmc Exp $
@


1.12
log
@fix references to OpenBSD:Ustar; from Alan Bueno
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.11 2007/03/26 23:36:26 espie Exp $
d14 1
a14 1
    while (my $o = $rdarc->next()) {
d16 1
a16 1
	$o->create();
d18 1
a18 1
    $rdarc->close();
d26 1
a26 1
	$o->write();
d28 1
a28 1
    $wrarc->close();
d30 1
a30 1
    # for copying 
d35 1
a35 1
    while (my $o = $rdarc->next()) {
d38 2
a39 2
    $rdarc->close();
    $wrarc->close();
d43 1
a43 1
C<OpenBSD::Ustar> provides an API to read, write and copy archives compatible 
d48 3
a50 3
C<new>. For archive reading, the filehandle should support 
C<read>. C<OpenBSD::Ustar> does not rely on C<seek> or C<rewind> in order 
to be usable on pipe outputs. For archive writing, the filehandle should 
d57 3
a59 3
Read access to an archive object C<$rdarc> occurs through a loop that 
repeatedly calls C<$o = $rdarc-E<gt>next()> to obtain the next archive entry.  
It returns an archive entry object C<$o> that can be 
d76 1
a76 1
Actual extraction is performed through C<$o-E<gt>extract()> and is not 
d80 3
a82 2
Small files can also be directly extracted to a scalar using 
C<$v = $o-E<gt>contents()>.
d84 4
a87 1
Actual writing is performed through C<$o-E<gt>write()> and is not mandatory
d90 1
a90 1
Archives should be closed using C<$wrarc-E<gt>close()>, which will
d95 1
a95 1
This is equivalent to calling C<$wrarc-E<gt>pad()>, which will
d100 1
a100 1
until C<$arc-E<gt>next()> returns false.  The C<OpenBSD::Ustar> object doesn't
d103 1
a103 1
Client code is only responsible for closing the underlying filehandle and 
d106 1
a106 1
An object C<$o> returned through C<next> or through C<prepare> holds all 
d111 1
a111 1
=item C<$o-E<gt>IsDir()>
d115 1
a115 1
=item C<$o-E<gt>IsFile()>
d119 1
a119 1
=item C<$o-E<gt>IsLink()>
d123 1
a123 1
=item C<$o-E<gt>IsSymLink()>
d127 1
a127 1
=item C<$o-E<gt>IsHardLink()>
d166 1
a166 1
can be altered before calling C<$o-E<gt>create()> or C<$o-E<gt>write()>, 
d175 1
a175 1
All creation commands happen relative to the current destdir of 
d189 1
a189 1
Calling C<$o = $rdarc-E<gt>next()> and C<$o-E<gt>copy($wrarc)> will copy
@


1.11
log
@even better wording.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.10 2007/03/26 23:26:50 espie Exp $
d49 1
a49 1
C<read>. C<OpenBSD::UStar> does not rely on C<seek> or C<rewind> in order 
@


1.10
log
@adjust documentation to simplify the common case.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.9 2005/09/17 10:35:27 espie Exp $
d86 2
a87 1
Archives should be closed using C<$wrarc-E<gt>close()>.
d91 3
a93 3
Alternately, calling C<$wrarc-E<gt>pad()> after archiving
all the entries will complete the archive with blank-filled blocks,
in case one wants to close the associated file handle manually.
d97 3
a99 2
hold any resources and doesn't need any specific clean-up. However, client
code is responsible for closing the underlying filehandle and 
@


1.9
log
@document quickie $o->contents() method
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.8 2005/06/26 16:48:30 espie Exp $
d12 1
a12 1
    open(my $in, "<", $arcname);
d18 1
a18 1
    close($in);
d21 1
a21 1
    open(my $out, ">", $arcname);
d28 1
a28 2
    $wrarc->pad();
    close($out);
d31 1
a31 1
    open(my $in, "<", $arcname);
d33 1
a33 1
    open(my $out, ">", $arcname);
d38 2
a39 3
    $wrarc->pad();
    close($in);
    close($out);
d44 1
a44 1
with C<tar(1)>
d86 7
a92 2
Writing valid archives requires calling C<$wrarc-E<gt>pad()> after archiving
all the entries to complete the archive with blank-filled blocks.
a98 4

A convenience method C<close> is provided that can be used to finish reading
or writing to an archive, providing adequate padding and closing the 
associated filehandle.
@


1.8
log
@explain how the aliasing operation works.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.7 2005/06/20 13:27:38 espie Exp $
d81 3
@


1.7
log
@flesh out the destdir() working. Provide a convenience close() method.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.6 2005/06/13 18:38:59 espie Exp $
d174 5
@


1.6
log
@add copy method, and document it.
Note that it doesn't do any magic with hard links so far.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.5 2005/06/13 14:24:06 espie Exp $
d94 4
d167 3
a169 2
All creation commands happen relative to the C<$destdir> that was used
for creating the C<$arc> C<OpenBSD::Ustar> object.
@


1.5
log
@fix archive header writing.
add pad() method to finish archives.
With this, writing Ustar archives work.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.4 2005/06/13 12:54:11 espie Exp $
d31 12
d45 2
a46 2
C<OpenBSD::Ustar> provides an API to read or write archives compatible with 
C<tar(1)>
d169 4
@


1.4
log
@document how hardlink writes occur, plus cosmetic clean-ups.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.3 2005/06/13 12:39:14 espie Exp $
d28 1
d72 3
@


1.3
log
@document the write API as well.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.2 2005/06/12 11:24:28 espie Exp $
d12 1
a12 1
    open(my $in, "<", $filename);
d21 1
a21 1
    open(my $out, ">", $filename);
d44 1
a44 1
provided by the underlying file handle.
d149 4
@


1.2
log
@better synopsis.
@
text
@d1 1
a1 1
$OpenBSD: OpenBSD::Ustar.pod,v 1.1 2005/02/28 13:08:41 espie Exp $
d10 5
a14 3
    open(my $fh, "<", $filename);
    $arc = OpenBSD::Ustar->new($fh, $destdir);
    while (my $o = $arc->next()) {
d18 9
a26 1
    close($fh);
d28 1
d32 2
a33 1
C<OpenBSD::Ustar> provides an API to read archives created by C<tar(1)>.
d36 19
d61 1
a61 5
A filehandle C<$fh> is associated with an C<OpenBSD::Ustar> object through
C<new>. The filehandle should support C<read>. C<OpenBSD::UStar> does not
rely on C<seek> or C<rewind> in order to be usable on pipe outputs.

On the other hand, C<OpenBSD::Ustar> does not do any caching. The client
a64 5
Access to the archive object C<$arc> occurs through a loop that repeatedly 
calls C<$o = $arc-E<gt>next()> to obtain the next archive entry.  
It returns an archive entry object C<$o> that can be 
queried to decide whether to extract this entry or not.

d69 3
d75 2
a76 2
code is responsible for closing the filehandle and terminating any associated
pipe process.
d78 2
a79 2
An object C<$o> returned through C<next> holds all the characteristics of the 
archive header:
d138 2
a139 2
can be altered before calling C<$o-E<gt>create()>, and will properly
influence the resulting file.
@


1.1
log
@basic API documentation, not yet finished.
@
text
@d1 1
a1 1
$OpenBSD$
d16 1
d28 1
a28 1
C<OpenBSD::Ustar> method) are the correct way to use this API.
@

