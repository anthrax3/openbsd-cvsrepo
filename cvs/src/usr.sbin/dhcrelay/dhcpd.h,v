head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.4
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.23
date	2017.04.05.14.40.56;	author reyk;	state Exp;
branches;
next	1.22;
commitid	XTppq5Z4ZcLAkM1F;

1.22
date	2017.04.04.15.50.29;	author reyk;	state Exp;
branches;
next	1.21;
commitid	tvLlcOOrW5yNQM7t;

1.21
date	2017.03.16.09.17.20;	author rzalamena;	state Exp;
branches;
next	1.20;
commitid	R3tclorDRfDgMJCY;

1.20
date	2017.03.15.14.31.49;	author rzalamena;	state Exp;
branches;
next	1.19;
commitid	oAWsNBMdv5xiRKZk;

1.19
date	2017.03.14.09.21.26;	author rzalamena;	state Exp;
branches;
next	1.18;
commitid	GTjvuoIXwdEkH5br;

1.18
date	2016.12.12.15.41.05;	author rzalamena;	state Exp;
branches;
next	1.17;
commitid	XgJSzaVYU9oklGPD;

1.17
date	2016.12.08.19.18.15;	author rzalamena;	state Exp;
branches;
next	1.16;
commitid	1Wx2EY9x67fSNeJ6;

1.16
date	2016.12.08.09.29.50;	author rzalamena;	state Exp;
branches;
next	1.15;
commitid	YoKu9xDxpQo7BWye;

1.15
date	2016.12.07.13.19.18;	author rzalamena;	state Exp;
branches;
next	1.14;
commitid	VDu2qbLl73nAQJ9w;

1.14
date	2016.02.07.00.49.28;	author krw;	state Exp;
branches;
next	1.13;
commitid	KRCyy1qhM7Xq37Rf;

1.13
date	2016.02.02.23.15.15;	author sthen;	state Exp;
branches;
next	1.12;
commitid	QtDOu8xvcWtqgUeT;

1.12
date	2009.09.03.11.56.49;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.04.19.12.41;	author stevesk;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.18.01.08.58;	author stevesk;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.29.22.36.43;	author stevesk;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.21.15.04.59;	author stevesk;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.21.04.39.08;	author stevesk;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.04.21.23.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.20.20.56.47;	author canacar;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.20.04.19.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.20.03.52.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.13.01.22.30;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.12.21.10.28;	author henning;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Rework the packet.c code for decoding and assembling DHCP messages.

This code suffered from many years of incremental improvements, fix it to:
- verify available buffer space in all cases and don't just trust the caller
- have an API where you always pass the full buffer length and absolute offset
- use consistent types for lengths and buffer offsets (int vs. size_t, ssize_t)
- don't just ignore errors, return and fail when something is wrong

OK rzalamena@@
@
text
@/*	$OpenBSD: dhcpd.h,v 1.22 2017/04/04 15:50:29 reyk Exp $	*/

/*
 * Copyright (c) 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 1995, 1996, 1997, 1998, 1999
 * The Internet Software Consortium.    All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/queue.h>

#define	SERVER_PORT	67
#define	CLIENT_PORT	68

/* Maximum size of client hardware address. */
#define CHADDR_SIZE	16

struct packet_ctx {
	uint8_t				 pc_htype;
	uint8_t				 pc_hlen;
	uint8_t				 pc_smac[CHADDR_SIZE];
	uint8_t				 pc_dmac[CHADDR_SIZE];

	struct sockaddr_storage		 pc_src;
	struct sockaddr_storage		 pc_dst;

	const char 			*pc_circuit;
	int				 pc_circuitlen;
	const char			*pc_remote;
	int				 pc_remotelen;
};

struct iaddr {
	int len;
	unsigned char iabuf[CHADDR_SIZE];
};

struct hardware {
	u_int8_t htype;
	u_int8_t hlen;
	u_int8_t haddr[CHADDR_SIZE];
};

/* Possible states in which the client can be. */
enum dhcp_state {
	S_REBOOTING,
	S_INIT,
	S_SELECTING,
	S_REQUESTING,
	S_BOUND,
	S_RENEWING,
	S_REBINDING
};

/* DHCP relaying modes. */
enum dhcp_relay_mode {
	DRM_UNKNOWN,
	DRM_LAYER2,
	DRM_LAYER3,
};

struct interface_info {
	struct hardware		 hw_address;
	struct in_addr		 primary_address;
	char			 name[IFNAMSIZ];
	int			 rfdesc;
	int			 wfdesc;
	unsigned char		*rbuf;
	size_t			 rbuf_max;
	size_t			 rbuf_offset;
	size_t			 rbuf_len;
	struct ifreq		 ifr;
	int			 noifmedia;
	int			 errors;
	int			 dead;
	u_int16_t		 index;

	int			 ipv6; /* Has any IPv6 address. */
	int			 gipv6; /* Has global IPv6 address. */
	struct in6_addr		 linklocal; /* IPv6 link-local address. */

	TAILQ_ENTRY(interface_info) entry;
};
TAILQ_HEAD(iflist, interface_info);

struct timeout {
	struct timeout	*next;
	time_t		 when;
	void		 (*func)(void *);
	void		*what;
};

struct protocol {
	struct protocol	*next;
	int fd;
	void (*handler)(struct protocol *);
	void *local;
};

struct server_list {
	struct interface_info *intf;
	struct server_list *next;
	struct sockaddr_storage to;
	int fd;
};

#define	DHCPD_LOG_FACILITY	LOG_DAEMON

/* External definitions... */

/* errwarn.c */
void error(char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
int warning(char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
int note(char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
int debug(char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));

/* bpf.c */
int if_register_bpf(struct interface_info *);
void if_register_send(struct interface_info *);
void if_register_receive(struct interface_info *, int);
ssize_t send_packet(struct interface_info *,
    struct dhcp_packet *, size_t, struct packet_ctx *);
ssize_t receive_packet(struct interface_info *, unsigned char *, size_t,
    struct packet_ctx *);

/* dispatch.c */
extern void (*bootp_packet_handler)(struct interface_info *,
    struct dhcp_packet *, int, struct packet_ctx *);
struct interface_info *iflist_getbyname(const char *);
void setup_iflist(void);
struct interface_info *register_interface(const char *,
    void (*)(struct protocol *), int isserver);
void dispatch(void);
void got_one(struct protocol *);
void add_protocol(char *, int, void (*)(struct protocol *), void *);
void remove_protocol(struct protocol *);

/* packet.c */
ssize_t assemble_hw_header(unsigned char *, size_t, size_t,
    struct packet_ctx *, unsigned int);
ssize_t assemble_udp_ip_header(unsigned char *, size_t, size_t,
    struct packet_ctx *pc, unsigned char *, size_t);
ssize_t decode_hw_header(unsigned char *, size_t, size_t, struct packet_ctx *,
    unsigned int);
ssize_t decode_udp_ip_header(unsigned char *, size_t, size_t,
    struct packet_ctx *);

/* dhcrelay.c */
extern int server_fd;
extern struct iflist intflist;

/* crap */
extern time_t cur_time;

static inline struct sockaddr_in *
ss2sin(struct sockaddr_storage *ss)
{
	return ((struct sockaddr_in *)ss);
}

static inline struct sockaddr_in6 *
ss2sin6(struct sockaddr_storage *ss)
{
	return ((struct sockaddr_in6 *)ss);
}
@


1.22
log
@constify pc_remote and pc_circuit

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.21 2017/03/16 09:17:20 rzalamena Exp $	*/
d171 8
a178 8
void assemble_hw_header(struct interface_info *, unsigned char *,
    int *, struct packet_ctx *);
void assemble_udp_ip_header(struct interface_info *, unsigned char *,
    int *, struct packet_ctx *pc, unsigned char *, int);
ssize_t decode_hw_header(struct interface_info *, unsigned char *,
    int, struct packet_ctx *);
ssize_t decode_udp_ip_header(struct interface_info *, unsigned char *,
    int, struct packet_ctx *, int);
@


1.21
log
@Move the server struct to header file and make it compatible with IPv6.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.20 2017/03/15 14:31:49 rzalamena Exp $	*/
d59 1
a59 1
	u_int8_t			*pc_circuit;
d61 1
a61 1
	u_int8_t			*pc_remote;
@


1.20
log
@Improve the interface and addresses discovery code and prepare to
receive IPv6 support.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.19 2017/03/14 09:21:26 rzalamena Exp $	*/
d130 7
@


1.19
log
@Remove some global variables that are not being used.

ok gsoares@@, jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.18 2016/12/12 15:41:05 rzalamena Exp $	*/
d42 2
a94 1
	struct interface_info	*next;
d109 6
d116 1
d154 3
a156 1
struct interface_info *get_interface(const char *,
d175 1
d184 6
@


1.18
log
@Implement support for layer 2 relaying and add further Relay Agent
Information (RFC 3046) options. While at there change the naming of the
remote destination parameters: instead of "server" call it "destination".

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.17 2016/12/08 19:18:15 rzalamena Exp $	*/
a163 2
extern u_int16_t server_port;
extern u_int16_t client_port;
a167 2
extern int log_priority;
extern int log_perror;
@


1.17
log
@Clean up function prototypes: use a single struct to hold all address
information instead of passing multiple different parameters. This also
prepares the dhcrelay code to receive new features, like: IPv6, layer 2
relaying.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.16 2016/12/08 09:29:50 rzalamena Exp $	*/
d56 5
d85 6
d137 1
a137 1
void if_register_receive(struct interface_info *);
d147 1
a147 1
    void (*)(struct protocol *));
@


1.16
log
@Simplify get_interfaces function, make it return NULL if we didn't find
the interface and abort dhcrelay with a more friendly message when we
don't have an address configured in the interface.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.15 2016/12/07 13:19:18 rzalamena Exp $	*/
d45 13
d60 1
a60 1
	unsigned char iabuf[16];
d66 1
a66 1
	u_int8_t haddr[16];
d128 1
a128 2
    struct dhcp_packet *, size_t, struct in_addr,
    struct sockaddr_in *, struct hardware *);
d130 1
a130 1
    struct sockaddr_in *, struct hardware *);
d134 1
a134 2
    struct dhcp_packet *, int, unsigned int, struct iaddr,
    struct hardware *);
d144 1
a144 1
    int *, struct hardware *);
d146 1
a146 1
    int *, u_int32_t, u_int32_t, unsigned int, unsigned char *, int);
d148 1
a148 1
    int, struct hardware *);
d150 1
a150 1
    int, struct sockaddr_in *, int);
d161 6
@


1.15
log
@Rename function discover_interfaces into get_interface and change its
prototype to be more useful.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.14 2016/02/07 00:49:28 krw Exp $	*/
d79 1
a79 1
	struct ifreq		*ifp;
@


1.14
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.13 2016/02/02 23:15:15 sthen Exp $	*/
d124 2
a125 1
void discover_interfaces(struct interface_info *);
@


1.13
log
@Remove unused (a.k.a. always passed NULL) parameter 'data' from
decode_udp_ip_header() and the useless check of it. Part of original
diff from pelikan about udp length errors.

From dhcpd: bpf.c r1.9, dhcpd.h r1.46, packet.c r1.5

ok jca
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.12 2009/09/03 11:56:49 reyk Exp $	*/
a40 31

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/sockio.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/wait.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/route.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <netdb.h>
#include <paths.h>
#include <pwd.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>

#include "dhcp.h"
@


1.12
log
@Add support for "DHCP-over-IPsec" by implementing RFC 3046 (DHCP Relay
Agent Information Option) and RFC 3456 (DHCP Configuration of IPsec
Tunnel Mode).  This allows to configure various IPsec clients
dynamically via DHCP; dhcrelay needs to listen on enc0 and forward
requests to a DHCP server that supports RFC 3046, like I recently did
for dhcpd(8).

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.10 2006/12/18 01:08:58 stevesk Exp $	*/
d169 1
a169 1
    int, struct sockaddr_in *, unsigned char *, int);
@


1.11
log
@<sys/un.h> not needed
@
text
@d153 2
a154 1
    struct dhcp_packet *, int, unsigned int, struct iaddr, struct hardware *);
d174 1
@


1.10
log
@warn() -> warning() to not overload with libc function; this has
previously been done to dhclient and dhcpd
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.9 2006/11/29 22:36:43 stevesk Exp $	*/
a46 1
#include <sys/un.h>
@


1.9
log
@remove incorrect comment
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.8 2006/11/21 15:04:59 stevesk Exp $	*/
d138 1
a138 1
int warn(char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)));
@


1.8
log
@remove unused #defines, no binary change; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.7 2006/11/21 04:39:08 stevesk Exp $	*/
a131 1
/* Default path to dhcpd config file. */
@


1.7
log
@remove duplicate #include <unistd.h> (same change as dhclient)
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.6 2004/05/04 21:23:10 deraadt Exp $	*/
a133 3

#define	MAX_TIME 0x7fffffff
#define	MIN_TIME 0
@


1.6
log
@remove unused stuff; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.5 2004/04/20 20:56:47 canacar Exp $	*/
a42 1

a63 1
#include <unistd.h>
@


1.5
log
@get rid of the -p switch, use fixed values for server and client ports,
rename port variables for clarity.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.4 2004/04/20 04:19:00 deraadt Exp $	*/
a142 1
extern int warnings_occurred;
a163 2
void add_timeout(time_t, void (*)(void *), void *);
void cancel_timeout(void (*)(void *), void *);
a165 1
int interface_link_status(char *);
@


1.4
log
@more shrinking; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.3 2004/04/20 03:52:36 deraadt Exp $	*/
d76 2
a77 2
#define	LOCAL_PORT	68
#define	REMOTE_PORT	67
d181 3
@


1.3
log
@tree.h is not used at all
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.2 2004/04/13 01:22:30 henning Exp $	*/
a78 10
struct option_data {
	int		 len;
	u_int8_t	*data;
};

struct string_list {
	struct string_list	*next;
	char			*string;
};

a83 18
struct iaddrlist {
	struct iaddrlist *next;
	struct iaddr addr;
};

struct packet {
	struct dhcp_packet	*raw;
	int			 packet_length;
	int			 packet_type;
	int			 options_valid;
	int			 client_port;
	struct iaddr		 client_addr;
	struct interface_info	*interface;
	struct hardware		*haddr;
	struct option_data	 options[256];
	int			 got_requested_address;
};

a89 12
struct client_lease {
	struct client_lease	*next;
	time_t			 expiry, renewal, rebind;
	struct iaddr		 address;
	char			*server_name;
	char			*filename;
	struct string_list	*medium;
	unsigned int		 is_static : 1;
	unsigned int		 is_bootp : 1;
	struct option_data	 options[256];
};

a100 49
struct client_config {
	struct option_data	defaults[256];
	enum {
		ACTION_DEFAULT,
		ACTION_SUPERSEDE,
		ACTION_PREPEND,
		ACTION_APPEND
	} default_actions[256];

	struct option_data	 send_options[256];
	u_int8_t		 required_options[256];
	u_int8_t		 requested_options[256];
	int			 requested_option_count;
	time_t			 timeout;
	time_t			 initial_interval;
	time_t			 retry_interval;
	time_t			 select_interval;
	time_t			 reboot_timeout;
	time_t			 backoff_cutoff;
	struct string_list	*media;
	char			*script_name;
	enum { IGNORE, ACCEPT, PREFER }
				 bootp_policy;
	struct string_list	*medium;
	struct iaddrlist	*reject_list;
};

struct client_state {
	struct client_lease	 *active;
	struct client_lease	 *new;
	struct client_lease	 *offered_leases;
	struct client_lease	 *leases;
	struct client_lease	 *alias;
	enum dhcp_state		  state;
	struct iaddr		  destination;
	u_int32_t		  xid;
	u_int16_t		  secs;
	time_t			  first_sending;
	time_t			  interval;
	struct string_list	 *medium;
	struct dhcp_packet	  packet;
	int			  packet_length;
	struct iaddr		  requested_address;
	struct client_config	 *config;
	char			**scriptEnv;
	int			  scriptEnvsize;
	struct string_list	 *env;
	int			  envc;
};
a113 1
	struct client_state	*client;
a133 14
#define DEFAULT_HASH_SIZE 97

struct hash_bucket {
	struct hash_bucket *next;
	unsigned char *name;
	int len;
	unsigned char *value;
};

struct hash_table {
	int hash_count;
	struct hash_bucket *buckets[DEFAULT_HASH_SIZE];
};

d154 1
a154 1
    struct packet *, struct dhcp_packet *, size_t, struct in_addr,
a162 1
void reinitialize_interfaces(void);
@


1.2
log
@chroot to /var/empty and drop privileges, theo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.1 2004/04/12 21:10:28 henning Exp $	*/
a74 1
#include "tree.h"
@


1.1
log
@initial cut at split out dhcrelay, whacked from usr.sbin/dhcp/ and sbin/dhclient
@
text
@d1 1
a1 1
/*	$OpenBSD: dhcpd.h,v 1.26 2004/03/05 23:57:16 deraadt Exp $	*/
d64 1
@

