head	1.19;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.19
date	2017.04.19.05.36.12;	author natano;	state Exp;
branches;
next	1.18;
commitid	0scK6D05EyEW7eqZ;

1.18
date	2017.04.05.14.40.56;	author reyk;	state Exp;
branches;
next	1.17;
commitid	XTppq5Z4ZcLAkM1F;

1.17
date	2017.02.13.22.49.38;	author krw;	state Exp;
branches;
next	1.16;
commitid	FBXczmjzgB4n9tG1;

1.16
date	2017.02.13.22.05.35;	author krw;	state Exp;
branches;
next	1.15;
commitid	QXPg6tDHW3eZ87ZT;

1.15
date	2017.02.13.19.15.39;	author krw;	state Exp;
branches;
next	1.14;
commitid	b8On5ZZgQn2F03X7;

1.14
date	2016.12.12.15.41.05;	author rzalamena;	state Exp;
branches;
next	1.13;
commitid	XgJSzaVYU9oklGPD;

1.13
date	2016.12.08.19.18.15;	author rzalamena;	state Exp;
branches;
next	1.12;
commitid	1Wx2EY9x67fSNeJ6;

1.12
date	2016.12.08.09.29.50;	author rzalamena;	state Exp;
branches;
next	1.11;
commitid	YoKu9xDxpQo7BWye;

1.11
date	2016.05.28.07.00.18;	author natano;	state Exp;
branches;
next	1.10;
commitid	V3qpA476A18HvhDy;

1.10
date	2016.02.07.00.49.28;	author krw;	state Exp;
branches;
next	1.9;
commitid	KRCyy1qhM7Xq37Rf;

1.9
date	2016.02.02.23.15.15;	author sthen;	state Exp;
branches;
next	1.8;
commitid	QtDOu8xvcWtqgUeT;

1.8
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.7;
commitid	2uw1UTO4k6erpWzK;

1.7
date	2009.09.03.11.56.49;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.15.20.39.21;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.18.01.08.58;	author stevesk;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.20.21.05.14;	author canacar;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.20.20.56.47;	author canacar;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.20.04.19.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.12.21.10.28;	author henning;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Switch base tools from /dev/bpf0 to /dev/bpf. Now that /dev/bpf has been
around for two releases, it should be safe to do so.

ok bluhm deraadt sthen tb yasuoka
@
text
@/*	$OpenBSD: bpf.c,v 1.18 2017/04/05 14:40:56 reyk Exp $ */

/* BPF socket interface code, originally contributed by Archie Cobbs. */

/*
 * Copyright (c) 1995, 1996, 1998, 1999
 * The Internet Software Consortium.    All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/bpf.h>
#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "dhcp.h"
#include "dhcpd.h"
#include "log.h"

/*
 * Called by get_interface_list for each interface that's discovered.
 * Opens a packet filter for each interface and adds it to the select
 * mask.
 */
int
if_register_bpf(struct interface_info *info)
{
	int sock;

	/* Open the BPF device */
	if ((sock = open("/dev/bpf", O_RDWR)) == -1)
		fatal("Can't open bpf device");

	/* Set the BPF device to point at this interface. */
	if (ioctl(sock, BIOCSETIF, &info->ifr) == -1)
		fatal("Can't attach interface %s to bpf device", info->name);

	return (sock);
}

void
if_register_send(struct interface_info *info)
{
	/*
	 * If we're using the bpf API for sending and receiving, we
	 * don't need to register this interface twice.
	 */
	info->wfdesc = info->rfdesc;
}

/*
 * Packet filter program: 'ip and udp and dst port CLIENT_PORT'
 */
struct bpf_insn dhcp_bpf_sfilter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 8),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's to the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 16),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, CLIENT_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_sfilter_len = sizeof(dhcp_bpf_sfilter) / sizeof(struct bpf_insn);

/*
 * Packet filter program: 'ip and udp and dst port SERVER_PORT'
 */
struct bpf_insn dhcp_bpf_filter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 8),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's to the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 16),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_filter_len = sizeof(dhcp_bpf_filter) / sizeof(struct bpf_insn);

/*
 * Packet filter program: encapsulated 'ip and udp and dst port SERVER_PORT'
 */
struct bpf_insn dhcp_bpf_efilter[] = {
	/* Make sure this is an encapsulated AF_INET packet... */
	BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, AF_INET << 24, 0, 10),

	/* Make sure it's an IPIP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 21),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_IPIP, 0, 8),

	/* Make sure it's an encapsulated UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 41),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 38),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 32),

	/* Make sure it's to the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 34),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_efilter_len = sizeof(dhcp_bpf_efilter) / sizeof(struct bpf_insn);

/*
 * Packet write filter program: 'ip and udp and src port CLIENT_PORT'
 */
struct bpf_insn dhcp_bpf_swfilter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 8),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's from the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 14),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, CLIENT_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_swfilter_len = sizeof(dhcp_bpf_swfilter) /
	sizeof(struct bpf_insn);

/*
 * Packet write filter program: 'ip and udp and src port SERVER_PORT'
 */
struct bpf_insn dhcp_bpf_wfilter[] = {
	/* Make sure this is an IP packet... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, ETHERTYPE_IP, 0, 8),

	/* Make sure it's a UDP packet... */
	BPF_STMT(BPF_LD + BPF_B + BPF_ABS, 23),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, IPPROTO_UDP, 0, 6),

	/* Make sure this isn't a fragment... */
	BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 20),
	BPF_JUMP(BPF_JMP + BPF_JSET + BPF_K, 0x1fff, 4, 0),

	/* Get the IP header length... */
	BPF_STMT(BPF_LDX + BPF_B + BPF_MSH, 14),

	/* Make sure it's from the right port... */
	BPF_STMT(BPF_LD + BPF_H + BPF_IND, 14),
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, SERVER_PORT, 0, 1),

	/* If we passed all the tests, ask for the whole packet. */
	BPF_STMT(BPF_RET+BPF_K, (u_int)-1),

	/* Otherwise, drop it. */
	BPF_STMT(BPF_RET+BPF_K, 0),
};

int dhcp_bpf_wfilter_len = sizeof(dhcp_bpf_wfilter) / sizeof(struct bpf_insn);

void
if_register_receive(struct interface_info *info, int isserver)
{
	struct bpf_version v;
	struct bpf_program p;
	int flag = 1, sz, cmplt = 0;

	/* Open a BPF device and hang it on this interface... */
	info->rfdesc = if_register_bpf(info);

	/* Make sure the BPF version is in range... */
	if (ioctl(info->rfdesc, BIOCVERSION, &v) == -1)
		fatal("Can't get BPF version");

	if (v.bv_major != BPF_MAJOR_VERSION ||
	    v.bv_minor < BPF_MINOR_VERSION)
		fatalx("Kernel BPF version out of range - recompile dhcpd!");

	/*
	 * Set immediate mode so that reads return as soon as a packet
	 * comes in, rather than waiting for the input buffer to fill
	 * with packets.
	 */
	if (ioctl(info->rfdesc, BIOCIMMEDIATE, &flag) == -1)
		fatal("Can't set immediate mode on bpf device");

	/* make sure kernel fills in the source ethernet address */
	if (ioctl(info->rfdesc, BIOCSHDRCMPLT, &cmplt) == -1)
		fatal("Can't set header complete flag on bpf device");

	/* Get the required BPF buffer length from the kernel. */
	if (ioctl(info->rfdesc, BIOCGBLEN, &sz) == -1)
		fatal("Can't get bpf buffer length");
	info->rbuf_max = sz;
	info->rbuf = malloc(info->rbuf_max);
	if (!info->rbuf)
		fatalx("Can't allocate %lu bytes for bpf input buffer.",
		    (unsigned long)info->rbuf_max);
	info->rbuf_offset = 0;
	info->rbuf_len = 0;

	/* Set up the bpf filter program structure. */
	if (isserver) {
		p.bf_len = dhcp_bpf_sfilter_len;
		p.bf_insns = dhcp_bpf_sfilter;
	} else if (info->hw_address.htype == HTYPE_IPSEC_TUNNEL) {
		p.bf_len = dhcp_bpf_efilter_len;
		p.bf_insns = dhcp_bpf_efilter;
	} else {
		p.bf_len = dhcp_bpf_filter_len;
		p.bf_insns = dhcp_bpf_filter;
	}
	if (ioctl(info->rfdesc, BIOCSETF, &p) == -1)
		fatal("Can't install packet filter program");

	/* Set up the bpf write filter program structure. */
	if (isserver) {
		p.bf_len = dhcp_bpf_swfilter_len;
		p.bf_insns = dhcp_bpf_swfilter;
	} else {
		p.bf_len = dhcp_bpf_wfilter_len;
		p.bf_insns = dhcp_bpf_wfilter;
	}

	if (ioctl(info->rfdesc, BIOCSETWF, &p) == -1)
		fatal("Can't install write filter program");

	/* make sure these settings cannot be changed after dropping privs */
	if (ioctl(info->rfdesc, BIOCLOCK) == -1)
		fatal("Failed to lock bpf descriptor");
}

ssize_t
send_packet(struct interface_info *interface,
    struct dhcp_packet *raw, size_t len, struct packet_ctx *pc)
{
	unsigned char buf[256];
	struct iovec iov[2];
	ssize_t bufp;
	int result;

	result = -1;

	if (interface->hw_address.htype == HTYPE_IPSEC_TUNNEL) {
		socklen_t slen = pc->pc_dst.ss_len;
		result = sendto(server_fd, raw, len, 0,
		    (struct sockaddr *)&pc->pc_dst, slen);
		goto done;
	}

	/* Assemble the headers... */
	if ((bufp = assemble_hw_header(buf, sizeof(buf), 0, pc,
	    interface->hw_address.htype)) == -1)
		goto done;
	if ((bufp = assemble_udp_ip_header(buf, sizeof(buf), bufp, pc,
	    (unsigned char *)raw, len)) == -1)
		goto done;

	/* Fire it off */
	iov[0].iov_base = (char *)buf;
	iov[0].iov_len = bufp;
	iov[1].iov_base = (char *)raw;
	iov[1].iov_len = len;

	result = writev(interface->wfdesc, iov, 2);
 done:
	if (result == -1)
		log_warn("send_packet");
	return (result);
}

ssize_t
receive_packet(struct interface_info *interface, unsigned char *buf,
    size_t len, struct packet_ctx *pc)
{
	int length = 0;
	ssize_t offset = 0;
	struct bpf_hdr hdr;

	/*
	 * All this complexity is because BPF doesn't guarantee that
	 * only one packet will be returned at a time.  We're getting
	 * what we deserve, though - this is a terrible abuse of the BPF
	 * interface.  Sigh.
	 */

	/* Process packets until we get one we can return or until we've
	 * done a read and gotten nothing we can return...
	 */
	do {
		/* If the buffer is empty, fill it. */
		if (interface->rbuf_offset == interface->rbuf_len) {
			length = read(interface->rfdesc, interface->rbuf,
			    interface->rbuf_max);
			if (length <= 0)
				return (length);
			interface->rbuf_offset = 0;
			interface->rbuf_len = length;
		}

		/*
		 * If there isn't room for a whole bpf header, something
		 * went wrong, but we'll ignore it and hope it goes
		 * away... XXX
		 */
		if (interface->rbuf_len - interface->rbuf_offset <
		    sizeof(hdr)) {
			interface->rbuf_offset = interface->rbuf_len;
			continue;
		}

		/* Copy out a bpf header... */
		memcpy(&hdr, &interface->rbuf[interface->rbuf_offset],
		    sizeof(hdr));

		/*
		 * If the bpf header plus data doesn't fit in what's
		 * left of the buffer, stick head in sand yet again...
		 */
		if (interface->rbuf_offset + hdr.bh_hdrlen + hdr.bh_caplen >
		    interface->rbuf_len) {
			interface->rbuf_offset = interface->rbuf_len;
			continue;
		}

		/*
		 * If the captured data wasn't the whole packet, or if
		 * the packet won't fit in the input buffer, all we can
		 * do is drop it.
		 */
		if (hdr.bh_caplen != hdr.bh_datalen) {
			interface->rbuf_offset += hdr.bh_hdrlen =
			    hdr.bh_caplen;
			continue;
		}

		/* Skip over the BPF header... */
		interface->rbuf_offset += hdr.bh_hdrlen;

		/* Decode the physical header... */
		offset = decode_hw_header(interface->rbuf,
		    interface->rbuf_len, interface->rbuf_offset, pc,
		    interface->hw_address.htype);

		/*
		 * If decoding or a physical layer checksum failed
		 * (dunno of any physical layer that supports this, but WTH),
		 * skip this packet.
		 */
		if (offset < 0) {
			interface->rbuf_offset += hdr.bh_caplen;
			continue;
		}

		/* Decode the IP and UDP headers... */
		offset = decode_udp_ip_header(interface->rbuf,
		    interface->rbuf_len, offset, pc);

		/* If the IP or UDP checksum was bad, skip the packet... */
		if (offset < 0) {
			interface->rbuf_offset += hdr.bh_caplen;
			continue;
		}

		hdr.bh_caplen -= offset - interface->rbuf_offset;
		interface->rbuf_offset = offset;

		/*
		 * If there's not enough room to stash the packet data,
		 * we have to skip it (this shouldn't happen in real
		 * life, though).
		 */
		if (hdr.bh_caplen > len) {
			interface->rbuf_offset += hdr.bh_caplen;
			continue;
		}

		/* Copy out the data in the packet... */
		memcpy(buf, interface->rbuf + interface->rbuf_offset,
		    hdr.bh_caplen);
		interface->rbuf_offset += hdr.bh_caplen;
		return (hdr.bh_caplen);
	} while (!length);
	return (0);
}
@


1.18
log
@Rework the packet.c code for decoding and assembling DHCP messages.

This code suffered from many years of incremental improvements, fix it to:
- verify available buffer space in all cases and don't just trust the caller
- have an API where you always pass the full buffer length and absolute offset
- use consistent types for lengths and buffer offsets (int vs. size_t, ssize_t)
- don't just ignore errors, return and fail when something is wrong

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.17 2017/02/13 22:49:38 krw Exp $ */
d75 1
a75 1
	if ((sock = open("/dev/bpf0", O_RDWR)) == -1)
@


1.17
log
@Eliminate pointless'%m' (a.k.a. hand rolled strerror()) by using fatal() and
log_warn(). Zap a couple of explicit 'syslog()' calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.16 2017/02/13 22:05:35 krw Exp $ */
d338 4
a341 1
	int result, bufp = 0;
d351 6
a356 3
	assemble_hw_header(interface, buf, &bufp, pc);
	assemble_udp_ip_header(interface, buf, &bufp, pc,
	    (unsigned char *)raw, len);
d375 2
a376 1
	int length = 0, offset = 0;
d440 3
a442 2
		offset = decode_hw_header(interface,
		    interface->rbuf, interface->rbuf_offset, pc);
d445 3
a447 3
		 * If a physical layer checksum failed (dunno of any
		 * physical layer that supports this, but WTH), skip
		 * this packet.
a452 2
		interface->rbuf_offset += offset;
		hdr.bh_caplen -= offset;
d455 2
a456 2
		offset = decode_udp_ip_header(interface, interface->rbuf,
		    interface->rbuf_offset, pc, hdr.bh_caplen);
d463 3
a465 2
		interface->rbuf_offset += offset;
		hdr.bh_caplen -= offset;
@


1.16
log
@Adjust some long lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.15 2017/02/13 19:15:39 krw Exp $ */
d76 1
a76 1
		fatalx("Can't open bpf device: %m");
d80 1
a80 2
		fatalx("Can't attach interface %s to bpf device: %m",
		    info->name);
d272 1
a272 1
		fatalx("Can't get BPF version: %m");
d284 1
a284 1
		fatalx("Can't set immediate mode on bpf device: %m");
d288 1
a288 1
		fatalx("Can't set header complete flag on bpf device: %m");
d292 1
a292 1
		fatalx("Can't get bpf buffer length: %m");
d313 1
a313 1
		fatalx("Can't install packet filter program: %m");
d325 1
a325 1
		fatalx("Can't install write filter program: %m");
d329 1
a329 1
		fatalx("Failed to lock bpf descriptor: %m");
d361 1
a361 1
		log_warnx("send_packet: %m");
@


1.15
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.14 2016/12/12 15:41:05 rzalamena Exp $ */
d226 2
a227 1
int dhcp_bpf_swfilter_len = sizeof(dhcp_bpf_swfilter) / sizeof(struct bpf_insn);
d425 2
a426 1
			interface->rbuf_offset += hdr.bh_hdrlen = hdr.bh_caplen;
@


1.14
log
@Implement support for layer 2 relaying and add further Relay Agent
Information (RFC 3046) options. While at there change the naming of the
remote destination parameters: instead of "server" call it "destination".

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.13 2016/12/08 19:18:15 rzalamena Exp $ */
d62 1
d76 1
a76 1
		error("Can't open bpf device: %m");
d80 1
a80 1
		error("Can't attach interface %s to bpf device: %m",
d272 1
a272 1
		error("Can't get BPF version: %m");
d276 1
a276 1
		error("Kernel BPF version out of range - recompile dhcpd!");
d284 1
a284 1
		error("Can't set immediate mode on bpf device: %m");
d288 1
a288 1
		error("Can't set header complete flag on bpf device: %m");
d292 1
a292 1
		error("Can't get bpf buffer length: %m");
d296 1
a296 1
		error("Can't allocate %lu bytes for bpf input buffer.",
d313 1
a313 1
		error("Can't install packet filter program: %m");
d325 1
a325 1
		error("Can't install write filter program: %m");
d329 1
a329 1
		error("Failed to lock bpf descriptor: %m");
d361 1
a361 1
		warning("send_packet: %m");
@


1.13
log
@Clean up function prototypes: use a single struct to hold all address
information instead of passing multiple different parameters. This also
prepares the dhcrelay code to receive new features, like: IPv6, layer 2
relaying.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.12 2016/12/08 09:29:50 rzalamena Exp $ */
d96 32
d196 32
d260 1
a260 1
if_register_receive(struct interface_info *info)
d301 4
a304 1
	if (info->hw_address.htype == HTYPE_IPSEC_TUNNEL) {
d315 7
a321 2
	p.bf_len = dhcp_bpf_wfilter_len;
	p.bf_insns = dhcp_bpf_wfilter;
@


1.12
log
@Simplify get_interfaces function, make it return NULL if we didn't find
the interface and abort dhcrelay with a more friendly message when we
don't have an address configured in the interface.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.11 2016/05/28 07:00:18 natano Exp $ */
d261 1
a261 2
    struct dhcp_packet *raw, size_t len, struct in_addr from,
    struct sockaddr_in *to, struct hardware *hto)
d268 1
a268 1
		socklen_t slen = sizeof(*to);
d270 1
a270 1
		    (struct sockaddr *)to, slen);
d275 3
a277 3
	assemble_hw_header(interface, buf, &bufp, hto);
	assemble_udp_ip_header(interface, buf, &bufp, from.s_addr,
	    to->sin_addr.s_addr, to->sin_port, (unsigned char *)raw, len);
d294 1
a294 1
    size_t len, struct sockaddr_in *from, struct hardware *hfrom)
d360 1
a360 1
		    interface->rbuf, interface->rbuf_offset, hfrom);
d376 1
a376 1
		    interface->rbuf_offset, from, hdr.bh_caplen);
@


1.11
log
@Replace the /dev/bpf* open loop with a plain open("/dev/bpf0", ...).
ok deraadt jca
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.10 2016/02/07 00:49:28 krw Exp $ */
d78 1
a78 1
	if (ioctl(sock, BIOCSETIF, info->ifp) == -1)
@


1.10
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.9 2016/02/02 23:15:15 sthen Exp $ */
a62 3

#define BPF_FORMAT "/dev/bpf%d"

d71 1
a71 2
	char filename[50];
	int sock, b;
d73 3
a75 12
	/* Open a BPF device */
	for (b = 0; 1; b++) {
		snprintf(filename, sizeof(filename), BPF_FORMAT, b);
		sock = open(filename, O_RDWR, 0);
		if (sock == -1) {
			if (errno == EBUSY)
				continue;
			else
				error("Can't find free bpf: %m");
		} else
			break;
	}
d79 2
a80 2
		error("Can't attach interface %s to bpf device %s: %m",
		    info->name, filename);
@


1.9
log
@Remove unused (a.k.a. always passed NULL) parameter 'data' from
decode_udp_ip_header() and the useless check of it. Part of original
diff from pelikan about udp length errors.

From dhcpd: bpf.c r1.9, dhcpd.h r1.46, packet.c r1.5

ok jca
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.8 2014/10/25 03:23:49 lteo Exp $ */
d43 1
a43 1
#include "dhcpd.h"
d45 1
a45 1
#include <sys/uio.h>
d48 1
a48 1
#include <net/if_types.h>
d50 1
a50 2
#include <netinet/ip.h>
#include <netinet/udp.h>
d52 11
@


1.8
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.7 2009/09/03 11:56:49 reyk Exp $ */
d380 1
a380 1
		    interface->rbuf_offset, from, NULL, hdr.bh_caplen);
@


1.7
log
@Add support for "DHCP-over-IPsec" by implementing RFC 3046 (DHCP Relay
Agent Information Option) and RFC 3456 (DHCP Configuration of IPsec
Tunnel Mode).  This allows to configure various IPsec clients
dynamically via DHCP; dhcrelay needs to listen on enc0 and forward
requests to a DHCP server that supports RFC 3046, like I recently did
for dhcpd(8).

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.5 2006/12/18 01:08:58 stevesk Exp $ */
a49 1
#include <netinet/in_systm.h>
@


1.6
log
@Sync with dhcpd. Do not use < 0 to check for failed syscalls use == -1
instead. OK henning@@
@
text
@d48 2
d131 35
d241 7
a247 3
	p.bf_len = dhcp_bpf_filter_len;
	p.bf_insns = dhcp_bpf_filter;

d272 7
d291 1
@


1.5
log
@warn() -> warning() to not overload with libc function; this has
previously been done to dhclient and dhcpd
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.4 2004/04/20 21:05:14 canacar Exp $ */
d70 1
a70 1
		if (sock < 0) {
d80 1
a80 1
	if (ioctl(sock, BIOCSETIF, info->ifp) < 0)
d173 1
a173 1
	if (ioctl(info->rfdesc, BIOCVERSION, &v) < 0)
d185 1
a185 1
	if (ioctl(info->rfdesc, BIOCIMMEDIATE, &flag) < 0)
d189 1
a189 1
	if (ioctl(info->rfdesc, BIOCSHDRCMPLT, &cmplt) < 0)
d193 1
a193 1
	if (ioctl(info->rfdesc, BIOCGBLEN, &sz) < 0)
d207 1
a207 1
	if (ioctl(info->rfdesc, BIOCSETF, &p) < 0)
d214 1
a214 1
	if (ioctl(info->rfdesc, BIOCSETWF, &p) < 0)
d218 1
a218 1
	if (ioctl(info->rfdesc, BIOCLOCK) < 0)
d243 1
a243 1
	if (result < 0)
@


1.4
log
@set write filter and lock the bpf descriptor after configuration.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.3 2004/04/20 20:56:47 canacar Exp $ */
d244 1
a244 1
		warn("send_packet: %m");
@


1.3
log
@get rid of the -p switch, use fixed values for server and client ports,
rename port variables for clarity.
ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.2 2004/04/20 04:19:00 deraadt Exp $	*/
d129 33
d167 1
a167 1
	int flag = 1, sz;
d188 4
d209 11
@


1.2
log
@more shrinking; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.1 2004/04/12 21:10:28 henning Exp $	*/
d98 1
a98 4
 * Packet filter program...
 *
 * XXX: Changes to the filter program may require changes to the
 * constant offsets used in if_register_send to patch the BPF program!
d118 1
a118 1
	BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, 67, 0, 1),		/* patch */
a168 7

	/* Patch the server port into the BPF program...
	 *
	 * XXX: changes to filter program may require changes to the
	 * insn number(s) used below!
	 */
	dhcp_bpf_filter[8].k = LOCAL_PORT;
@


1.1
log
@initial cut at split out dhcrelay, whacked from usr.sbin/dhcp/ and sbin/dhclient
@
text
@d1 1
a1 1
/*	$OpenBSD: bpf.c,v 1.10 2004/03/02 18:49:21 deraadt Exp $	*/
d185 1
a185 1
send_packet(struct interface_info *interface, struct packet *packet,
@

