head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.22
date	2017.07.07.17.25.09;	author reyk;	state Exp;
branches;
next	1.21;
commitid	2rSZZUfPWi6aLB9m;

1.21
date	2017.04.04.15.52.12;	author reyk;	state Exp;
branches;
next	1.20;
commitid	QRsxz2EYPAxfp5kB;

1.20
date	2017.03.15.14.31.49;	author rzalamena;	state Exp;
branches;
next	1.19;
commitid	oAWsNBMdv5xiRKZk;

1.19
date	2017.02.13.22.49.38;	author krw;	state Exp;
branches;
next	1.18;
commitid	FBXczmjzgB4n9tG1;

1.18
date	2017.02.13.22.05.35;	author krw;	state Exp;
branches;
next	1.17;
commitid	QXPg6tDHW3eZ87ZT;

1.17
date	2017.02.13.21.57.31;	author krw;	state Exp;
branches;
next	1.16;
commitid	TjrJxvbObDW1gm4i;

1.16
date	2017.02.13.19.15.39;	author krw;	state Exp;
branches;
next	1.15;
commitid	b8On5ZZgQn2F03X7;

1.15
date	2016.12.12.15.41.05;	author rzalamena;	state Exp;
branches;
next	1.14;
commitid	XgJSzaVYU9oklGPD;

1.14
date	2016.12.08.19.18.15;	author rzalamena;	state Exp;
branches;
next	1.13;
commitid	1Wx2EY9x67fSNeJ6;

1.13
date	2016.12.08.09.29.50;	author rzalamena;	state Exp;
branches;
next	1.12;
commitid	YoKu9xDxpQo7BWye;

1.12
date	2016.12.07.13.19.18;	author rzalamena;	state Exp;
branches;
next	1.11;
commitid	VDu2qbLl73nAQJ9w;

1.11
date	2016.08.27.01.26.22;	author guenther;	state Exp;
branches;
next	1.10;
commitid	mLhDPn5m6RI81k8n;

1.10
date	2016.02.07.00.49.28;	author krw;	state Exp;
branches;
next	1.9;
commitid	KRCyy1qhM7Xq37Rf;

1.9
date	2009.09.03.11.56.49;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.15.20.39.21;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.02.15.19.38;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.18.01.08.58;	author stevesk;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.21.04.07.04;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.22.01.10.49;	author canacar;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.04.21.23.10;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.20.04.19.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.12.21.10.28;	author henning;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Handle carp(4) as HTYPE_ETHER.

This fixes "dhcrelay -i carpX" that used to work when dhcrelay didn't care.

Reported and tested by Kapetanakis Giannis bilias at edu.physics.uoc.gr
@
text
@/*	$OpenBSD: dispatch.c,v 1.21 2017/04/04 15:52:12 reyk Exp $	*/

/*
 * Copyright 2004 Henning Brauer <henning@@openbsd.org>
 * Copyright (c) 1995, 1996, 1997, 1998, 1999
 * The Internet Software Consortium.   All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_media.h>
#include <net/if_types.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <errno.h>
#include <ifaddrs.h>
#include <limits.h>
#include <poll.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>

#include "dhcp.h"
#include "dhcpd.h"
#include "log.h"

/*
 * Macros implementation used to generate link-local addresses. This
 * code was copied from: sys/netinet6/in6_ifattach.c.
 */
#define EUI64_UBIT		0x02
#define EUI64_TO_IFID(in6) \
	do { (in6)->s6_addr[8] ^= EUI64_UBIT; } while (0)

struct protocol *protocols;
struct timeout *timeouts;
static struct timeout *free_timeouts;
static int interfaces_invalidated;

void (*bootp_packet_handler)(struct interface_info *,
    struct dhcp_packet *, int, struct packet_ctx *);

static int interface_status(struct interface_info *ifinfo);

struct interface_info *
iflist_getbyname(const char *name)
{
	struct interface_info	*intf;

	TAILQ_FOREACH(intf, &intflist, entry) {
		if (strcmp(intf->name, name) != 0)
			continue;

		return intf;
	}

	return NULL;
}

void
setup_iflist(void)
{
	struct interface_info		*intf;
	struct sockaddr_dl		*sdl;
	struct ifaddrs			*ifap, *ifa;
	struct if_data			*ifi;
	struct sockaddr_in		*sin;
	struct sockaddr_in6		*sin6;

	TAILQ_INIT(&intflist);
	if (getifaddrs(&ifap))
		fatalx("getifaddrs failed");

	for (ifa = ifap; ifa != NULL; ifa = ifa->ifa_next) {
		if ((ifa->ifa_flags & IFF_LOOPBACK) ||
		    (ifa->ifa_flags & IFF_POINTOPOINT))
			continue;

		/* Find interface or create it. */
		intf = iflist_getbyname(ifa->ifa_name);
		if (intf == NULL) {
			intf = calloc(1, sizeof(*intf));
			if (intf == NULL)
				fatal("calloc");

			strlcpy(intf->name, ifa->ifa_name,
			    sizeof(intf->name));
			TAILQ_INSERT_HEAD(&intflist, intf, entry);
		}

		/* Signal disabled interface. */
		if ((ifa->ifa_flags & IFF_UP) == 0)
			intf->dead = 1;

		if (ifa->ifa_addr->sa_family == AF_LINK) {
			sdl = (struct sockaddr_dl *)ifa->ifa_addr;
			ifi = (struct if_data *)ifa->ifa_data;

			/* Skip unsupported interfaces. */
			if (ifi->ifi_type != IFT_ETHER &&
			    ifi->ifi_type != IFT_ENC &&
			    ifi->ifi_type != IFT_CARP) {
				TAILQ_REMOVE(&intflist, intf, entry);
				free(intf);
				continue;
			}

			if (ifi->ifi_type == IFT_ENC)
				intf->hw_address.htype = HTYPE_IPSEC_TUNNEL;
			else
				intf->hw_address.htype = HTYPE_ETHER;

			intf->index = sdl->sdl_index;
			intf->hw_address.hlen = sdl->sdl_alen;
			memcpy(intf->hw_address.haddr,
			    LLADDR(sdl), sdl->sdl_alen);
		} else if (ifa->ifa_addr->sa_family == AF_INET) {
			sin = (struct sockaddr_in *)ifa->ifa_addr;
			if (sin->sin_addr.s_addr == htonl(INADDR_LOOPBACK) ||
			    intf->primary_address.s_addr != INADDR_ANY)
				continue;

			intf->primary_address = sin->sin_addr;
		} else if (ifa->ifa_addr->sa_family == AF_INET6) {
			sin6 = (struct sockaddr_in6 *)ifa->ifa_addr;
			/* Remove the scope from address if link-local. */
			if (IN6_IS_ADDR_LINKLOCAL(&sin6->sin6_addr)) {
				intf->linklocal = sin6->sin6_addr;
				intf->linklocal.s6_addr[2] = 0;
				intf->linklocal.s6_addr[3] = 0;
			} else
				intf->gipv6 = 1;

			/* At least one IPv6 address was found. */
			intf->ipv6 = 1;
		}
	}

	freeifaddrs(ifap);

	/*
	 * Generate link-local IPv6 address for interfaces without it.
	 *
	 * For IPv6 DHCP Relay it doesn't matter what is used for
	 * link-addr field, so let's generate an address that won't
	 * change during execution so we can always find the interface
	 * to relay packets back. This is only used for layer 2 relaying
	 * when the interface might not have an address.
	 */
	TAILQ_FOREACH(intf, &intflist, entry) {
		if (memcmp(&intf->linklocal, &in6addr_any,
		    sizeof(in6addr_any)) != 0)
			continue;

		intf->linklocal.s6_addr[0] = 0xfe;
		intf->linklocal.s6_addr[1] = 0x80;
		intf->linklocal.s6_addr[8] = intf->hw_address.haddr[0];
		intf->linklocal.s6_addr[9] = intf->hw_address.haddr[1];
		intf->linklocal.s6_addr[10] = intf->hw_address.haddr[2];
		intf->linklocal.s6_addr[11] = 0xff;
		intf->linklocal.s6_addr[12] = 0xfe;
		intf->linklocal.s6_addr[13] = intf->hw_address.haddr[3];
		intf->linklocal.s6_addr[14] = intf->hw_address.haddr[4];
		intf->linklocal.s6_addr[15] = intf->hw_address.haddr[5];
		EUI64_TO_IFID(&intf->linklocal);
	}
}

struct interface_info *
register_interface(const char *ifname, void (*handler)(struct protocol *),
    int isserver)
{
	struct interface_info		*intf;

	if ((intf = iflist_getbyname(ifname)) == NULL)
		return NULL;

	/* Don't register disabled interfaces. */
	if (intf->dead)
		return NULL;

	/* Check if we already registered the interface. */
	if (intf->ifr.ifr_name[0] != 0)
		return intf;

	if (strlcpy(intf->ifr.ifr_name, ifname,
	    sizeof(intf->ifr.ifr_name)) >= sizeof(intf->ifr.ifr_name))
		fatalx("interface name '%s' too long", ifname);

	if_register_receive(intf, isserver);
	if_register_send(intf);
	add_protocol(intf->name, intf->rfdesc, handler, intf);

	return intf;
}

/*
 * Wait for packets to come in using poll().  When a packet comes in,
 * call receive_packet to receive the packet and possibly strip hardware
 * addressing information from it, and then call through the
 * bootp_packet_handler hook to try to do something with it.
 */
void
dispatch(void)
{
	int count, i, to_msec, nfds = 0;
	struct protocol *l;
	struct pollfd *fds;
	time_t howlong;

	nfds = 0;
	for (l = protocols; l; l = l->next)
		nfds++;

	fds = calloc(nfds, sizeof(struct pollfd));
	if (fds == NULL)
		fatalx("Can't allocate poll structures.");

	do {
		/*
		 * Call any expired timeouts, and then if there's still
		 * a timeout registered, time out the select call then.
		 */
another:
		if (timeouts) {
			if (timeouts->when <= cur_time) {
				struct timeout *t = timeouts;

				timeouts = timeouts->next;
				(*(t->func))(t->what);
				t->next = free_timeouts;
				free_timeouts = t;
				goto another;
			}

			/*
			 * Figure timeout in milliseconds, and check for
			 * potential overflow, so we can cram into an
			 * int for poll, while not polling with a
			 * negative timeout and blocking indefinitely.
			 */
			howlong = timeouts->when - cur_time;
			if (howlong > INT_MAX / 1000)
				howlong = INT_MAX / 1000;
			to_msec = howlong * 1000;
		} else
			to_msec = -1;

		/* Set up the descriptors to be polled. */
		i = 0;

		for (l = protocols; l; l = l->next) {
			struct interface_info *ip = l->local;

			if (ip && (l->handler != got_one || !ip->dead)) {
				fds[i].fd = l->fd;
				fds[i].events = POLLIN;
				fds[i].revents = 0;
				i++;
			}
		}

		if (i == 0)
			fatalx("No live interfaces to poll on - exiting.");

		/* Wait for a packet or a timeout... XXX */
		count = poll(fds, nfds, to_msec);

		/* Not likely to be transitory... */
		if (count == -1) {
			if (errno == EAGAIN || errno == EINTR) {
				time(&cur_time);
				continue;
			}
			else
				fatal("poll");
		}

		/* Get the current time... */
		time(&cur_time);

		i = 0;
		for (l = protocols; l; l = l->next) {
			struct interface_info *ip = l->local;

			if ((fds[i].revents & (POLLIN | POLLHUP))) {
				fds[i].revents = 0;
				if (ip && (l->handler != got_one ||
				    !ip->dead))
					(*(l->handler))(l);
				if (interfaces_invalidated)
					break;
			}
			i++;
		}
		interfaces_invalidated = 0;
	} while (1);
}


void
got_one(struct protocol *l)
{
	struct packet_ctx pc;
	ssize_t result;
	union {
		/*
		 * Packet input buffer.  Must be as large as largest
		 * possible MTU.
		 */
		unsigned char packbuf[4095];
		struct dhcp_packet packet;
	} u;
	struct interface_info *ip = l->local;

	memset(&pc, 0, sizeof(pc));

	if ((result = receive_packet(ip, u.packbuf, sizeof(u), &pc)) == -1) {
		log_warn("receive_packet failed on %s", ip->name);
		ip->errors++;
		if ((!interface_status(ip)) ||
		    (ip->noifmedia && ip->errors > 20)) {
			/* our interface has gone away. */
			log_warnx("Interface %s no longer appears valid.",
			    ip->name);
			ip->dead = 1;
			interfaces_invalidated = 1;
			close(l->fd);
			remove_protocol(l);
			free(ip);
		}
		return;
	}
	if (result == 0)
		return;

	if (bootp_packet_handler)
		(*bootp_packet_handler)(ip, &u.packet, result, &pc);
}

int
interface_status(struct interface_info *ifinfo)
{
	char *ifname = ifinfo->name;
	int ifsock = ifinfo->rfdesc;
	struct ifreq ifr;
	struct ifmediareq ifmr;

	/* get interface flags */
	memset(&ifr, 0, sizeof(ifr));
	strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
	if (ioctl(ifsock, SIOCGIFFLAGS, &ifr) == -1) {
		log_warn("ioctl(SIOCGIFFLAGS) on %s", ifname);
		goto inactive;
	}
	/*
	 * if one of UP and RUNNING flags is dropped,
	 * the interface is not active.
	 */
	if ((ifr.ifr_flags & (IFF_UP|IFF_RUNNING)) != (IFF_UP|IFF_RUNNING)) {
		goto inactive;
	}
	/* Next, check carrier on the interface, if possible */
	if (ifinfo->noifmedia)
		goto active;
	memset(&ifmr, 0, sizeof(ifmr));
	strlcpy(ifmr.ifm_name, ifname, sizeof(ifmr.ifm_name));
	if (ioctl(ifsock, SIOCGIFMEDIA, (caddr_t)&ifmr) == -1) {
		if (errno != EINVAL) {
			log_debug("ioctl(SIOCGIFMEDIA) on %s", ifname);
			ifinfo->noifmedia = 1;
			goto active;
		}
		/*
		 * EINVAL (or ENOTTY) simply means that the interface
		 * does not support the SIOCGIFMEDIA ioctl. We regard it alive.
		 */
		ifinfo->noifmedia = 1;
		goto active;
	}
	if (ifmr.ifm_status & IFM_AVALID) {
		switch (ifmr.ifm_active & IFM_NMASK) {
		case IFM_ETHER:
			if (ifmr.ifm_status & IFM_ACTIVE)
				goto active;
			else
				goto inactive;
			break;
		default:
			goto inactive;
		}
	}
inactive:
	return (0);
active:
	return (1);
}

/* Add a protocol to the list of protocols... */
void
add_protocol(char *name, int fd, void (*handler)(struct protocol *),
    void *local)
{
	struct protocol *p;

	p = malloc(sizeof(*p));
	if (!p)
		fatalx("can't allocate protocol struct for %s", name);

	p->fd = fd;
	p->handler = handler;
	p->local = local;
	p->next = protocols;
	protocols = p;
}

void
remove_protocol(struct protocol *proto)
{
	struct protocol *p, *next, *prev;

	prev = NULL;
	for (p = protocols; p; p = next) {
		next = p->next;
		if (p == proto) {
			if (prev)
				prev->next = p->next;
			else
				protocols = p->next;
			free(p);
		}
	}
}
@


1.21
log
@The unsigned result cannot be -1, turn it into a signed variable.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.20 2017/03/15 14:31:49 rzalamena Exp $	*/
d140 1
a140 1
			/* Skip non ethernet interfaces. */
d142 2
a143 1
			    ifi->ifi_type != IFT_ENC) {
d149 3
a151 1
			if (ifi->ifi_type == IFT_ETHER)
a152 2
			else
				intf->hw_address.htype = HTYPE_IPSEC_TUNNEL;
@


1.20
log
@Improve the interface and addresses discovery code and prepare to
receive IPv6 support.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.19 2017/02/13 22:49:38 krw Exp $	*/
d345 1
a345 1
	size_t result;
@


1.19
log
@Eliminate pointless'%m' (a.k.a. hand rolled strerror()) by using fatal() and
log_warn(). Zap a couple of explicit 'syslog()' calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.18 2017/02/13 22:05:35 krw Exp $	*/
d52 1
d68 8
d87 16
a102 2
get_interface(const char *ifname, void (*handler)(struct protocol *),
    int isserver)
d104 2
a105 1
	struct interface_info		*iface;
d107 1
d109 1
a109 4
	int				 found = 0;

	if ((iface = calloc(1, sizeof(*iface))) == NULL)
		fatalx("failed to allocate memory");
d111 2
a112 5
	if (strlcpy(iface->name, ifname, sizeof(iface->name)) >=
	    sizeof(iface->name))
		fatalx("interface name '%s' too long", ifname);

	if (getifaddrs(&ifap) != 0)
d117 1
a117 2
		    (ifa->ifa_flags & IFF_POINTOPOINT) ||
		    (!(ifa->ifa_flags & IFF_UP)))
d120 11
a130 2
		if (strcmp(ifname, ifa->ifa_name))
			continue;
d132 3
a134 1
		found = 1;
a135 4
		/*
		 * If we have the capability, extract link information
		 * and record it in a linked list.
		 */
d137 13
a149 9
			struct sockaddr_dl *foo =
			    (struct sockaddr_dl *)ifa->ifa_addr;
			struct if_data *ifi =
			    (struct if_data *)ifa->ifa_data;

			iface->index = foo->sdl_index;
			iface->hw_address.hlen = foo->sdl_alen;
			if (ifi->ifi_type == IFT_ENC)
				iface->hw_address.htype = HTYPE_IPSEC_TUNNEL;
d151 6
a156 3
				iface->hw_address.htype = HTYPE_ETHER; /*XXX*/
			memcpy(iface->hw_address.haddr,
			    LLADDR(foo), foo->sdl_alen);
d158 3
a160 2
			/* We already have the primary address. */
			if (iface->primary_address.s_addr != 0)
d163 10
a172 3
			sin = (struct sockaddr_in *)ifa->ifa_addr;
			if (sin->sin_addr.s_addr == htonl(INADDR_LOOPBACK))
				continue;
d174 2
a175 1
			iface->primary_address = sin->sin_addr;
d181 25
a205 3
	if (!found) {
		free(iface);
		return (NULL);
d207 18
d226 2
a227 2
	if (strlcpy(iface->ifr.ifr_name, ifname,
	    sizeof(iface->ifr.ifr_name)) >= sizeof(iface->ifr.ifr_name))
d230 3
a232 4
	/* Register the interface... */
	if_register_receive(iface, isserver);
	if_register_send(iface);
	add_protocol(iface->name, iface->rfdesc, handler, iface);
d234 1
a234 1
	return (iface);
@


1.18
log
@Adjust some long lines.
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.17 2017/02/13 21:57:31 krw Exp $	*/
d236 1
a236 1
				fatalx("poll: %m");
d313 1
a313 1
		syslog(LOG_ERR, "ioctl(SIOCGIFFLAGS) on %s: %m", ifname);
d330 1
a330 3
			syslog(LOG_DEBUG, "ioctl(SIOCGIFMEDIA) on %s: %m",
			    ifname);

@


1.17
log
@Do the strerror() elimination dance with a log_warnx() -> log_warn().
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.16 2017/02/13 19:15:39 krw Exp $	*/
d122 1
a122 1
				iface->hw_address.htype = HTYPE_ETHER; /* XXX */
@


1.16
log
@Switch from old errwarn.c logging to shiny new log.[ch].

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.15 2016/12/12 15:41:05 rzalamena Exp $	*/
d279 1
a279 2
		log_warnx("receive_packet failed on %s: %s", ip->name,
		    strerror(errno));
@


1.15
log
@Implement support for layer 2 relaying and add further Relay Agent
Information (RFC 3046) options. While at there change the naming of the
remote destination parameters: instead of "server" call it "destination".

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.14 2016/12/08 19:18:15 rzalamena Exp $	*/
d65 1
d87 1
a87 1
		error("failed to allocate memory");
d91 1
a91 1
		error("interface name '%s' too long", ifname);
d94 1
a94 1
		error("getifaddrs failed");
d147 1
a147 1
		error("interface name '%s' too long", ifname);
d177 1
a177 1
		error("Can't allocate poll structures.");
d224 1
a224 1
			error("No live interfaces to poll on - exiting.");
d236 1
a236 1
				error("poll: %m");
d279 1
a279 1
		warning("receive_packet failed on %s: %s", ip->name,
d285 1
a285 1
			warning("Interface %s no longer appears valid.",
d371 1
a371 1
		error("can't allocate protocol struct for %s", name);
@


1.14
log
@Clean up function prototypes: use a single struct to hold all address
information instead of passing multiple different parameters. This also
prepares the dhcrelay code to receive new features, like: IPv6, layer 2
relaying.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.13 2016/12/08 09:29:50 rzalamena Exp $	*/
d77 2
a78 1
get_interface(const char *ifname, void (*handler)(struct protocol *))
d149 1
a149 1
	if_register_receive(iface);
@


1.13
log
@Simplify get_interfaces function, make it return NULL if we didn't find
the interface and abort dhcrelay with a more friendly message when we
don't have an address configured in the interface.

ok jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.12 2016/12/07 13:19:18 rzalamena Exp $	*/
d72 1
a72 2
    struct dhcp_packet *, int, unsigned int,
    struct iaddr, struct hardware *);
d262 1
a262 3
	struct sockaddr_in from;
	struct hardware hfrom;
	struct iaddr ifrom;
d274 3
a276 2
	if ((result = receive_packet(ip, u.packbuf, sizeof(u), &from,
	    &hfrom)) == -1) {
d296 2
a297 7
	if (bootp_packet_handler) {
		ifrom.len = 4;
		memcpy(ifrom.iabuf, &from.sin_addr, ifrom.len);

		(*bootp_packet_handler)(ip, &u.packet, result,
		    from.sin_port, ifrom, &hfrom);
	}
@


1.12
log
@Rename function discover_interfaces into get_interface and change its
prototype to be more useful.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.11 2016/08/27 01:26:22 guenther Exp $	*/
d82 2
a83 2
	struct ifreq			*tif;
	struct sockaddr_in		 foo;
d90 1
a90 1
		error("interface name too long");
d104 2
d125 3
a127 1
			struct iaddr addr;
d129 2
a130 2
			memcpy(&foo, ifa->ifa_addr, sizeof(foo));
			if (foo.sin_addr.s_addr == htonl(INADDR_LOOPBACK))
a131 2
			if (!iface->ifp) {
				int len = IFNAMSIZ + ifa->ifa_addr->sa_len;
d133 1
a133 10
				if ((tif = malloc(len)) == NULL)
					error("no space to remember ifp");
				strlcpy(tif->ifr_name, ifa->ifa_name, IFNAMSIZ);
				memcpy(&tif->ifr_addr, ifa->ifa_addr,
				    ifa->ifa_addr->sa_len);
				iface->ifp = tif;
				iface->primary_address = foo.sin_addr;
			}
			addr.len = 4;
			memcpy(addr.iabuf, &foo.sin_addr.s_addr, addr.len);
d139 8
a146 2
	if (!iface->ifp)
		error("%s: not found", iface->name);
@


1.11
log
@Pull in <time.h> for one or more of gmtime, strftime, strptime, time,
timegm, and tzset

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.10 2016/02/07 00:49:28 krw Exp $	*/
d77 2
a78 8
/*
 * Use getifaddrs() to get a list of all the attached interfaces.  For
 * each interface that's of type INET and not the loopback interface,
 * register that interface with the network I/O software, figure out
 * what subnet it's on, and add it to the list of interfaces.
 */
void
discover_interfaces(struct interface_info *iface)
d80 11
a90 3
	struct sockaddr_in foo;
	struct ifaddrs *ifap, *ifa;
	struct ifreq *tif;
d101 1
a101 1
		if (strcmp(iface->name, ifa->ifa_name))
d144 2
d152 3
a154 2
	add_protocol(iface->name, iface->rfdesc, got_one, iface);
	freeifaddrs(ifap);
@


1.10
log
@Eliminate #include inside *.h files and include only needed headers in
each *.c file.

Inspired by mention of header silliness by Edgar Pettijohn and mmcc@@
on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.9 2009/09/03 11:56:49 reyk Exp $	*/
d60 1
@


1.9
log
@Add support for "DHCP-over-IPsec" by implementing RFC 3046 (DHCP Relay
Agent Information Option) and RFC 3456 (DHCP Configuration of IPsec
Tunnel Mode).  This allows to configure various IPsec clients
dynamically via DHCP; dhcrelay needs to listen on enc0 and forward
requests to a DHCP server that supports RFC 3046, like I recently did
for dhcpd(8).

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.7 2007/09/02 15:19:38 deraadt Exp $	*/
d42 1
a42 2
#include "dhcpd.h"

d44 1
d46 2
d51 3
d55 1
d57 7
@


1.8
log
@Sync with dhcpd. Do not use < 0 to check for failed syscalls use == -1
instead. OK henning@@
@
text
@d47 2
d95 2
d100 4
a103 1
			iface->hw_address.htype = HTYPE_ETHER; /* XXX */
@


1.7
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.6 2006/12/18 01:08:58 stevesk Exp $	*/
d293 1
a293 1
	if (ioctl(ifsock, SIOCGIFFLAGS, &ifr) < 0) {
d309 1
a309 1
	if (ioctl(ifsock, SIOCGIFMEDIA, (caddr_t)&ifmr) < 0) {
@


1.6
log
@warn() -> warning() to not overload with libc function; this has
previously been done to dhclient and dhcpd
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.5 2004/09/21 04:07:04 david Exp $	*/
d149 1
a149 1
	fds = malloc(nfds * sizeof(struct pollfd));
@


1.5
log
@spelling fixes; ok jmc@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.4 2004/06/22 01:10:49 canacar Exp $	*/
d254 1
a254 1
		warn("receive_packet failed on %s: %s", ip->name,
d260 1
a260 1
			warn("Interface %s no longer appears valid.",
@


1.4
log
@handle interface removals in the poll loop. ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.3 2004/05/04 21:23:10 deraadt Exp $	*/
d174 1
a174 1
			 * negative timeout and blocking indefinetely.
@


1.3
log
@remove unused stuff; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.2 2004/04/20 04:19:00 deraadt Exp $	*/
d220 1
a220 1
			if ((fds[i].revents & POLLIN)) {
@


1.2
log
@more shrinking; ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.1 2004/04/12 21:10:28 henning Exp $	*/
a341 85
void
add_timeout(time_t when, void (*where)(void *), void *what)
{
	struct timeout *t, *q;

	/* See if this timeout supersedes an existing timeout. */
	t = NULL;
	for (q = timeouts; q; q = q->next) {
		if (q->func == where && q->what == what) {
			if (t)
				t->next = q->next;
			else
				timeouts = q->next;
			break;
		}
		t = q;
	}

	/* If we didn't supersede a timeout, allocate a timeout
	   structure now. */
	if (!q) {
		if (free_timeouts) {
			q = free_timeouts;
			free_timeouts = q->next;
			q->func = where;
			q->what = what;
		} else {
			q = malloc(sizeof(struct timeout));
			if (!q)
				error("Can't allocate timeout structure!");
			q->func = where;
			q->what = what;
		}
	}

	q->when = when;

	/* Now sort this timeout into the timeout list. */

	/* Beginning of list? */
	if (!timeouts || timeouts->when > q->when) {
		q->next = timeouts;
		timeouts = q;
		return;
	}

	/* Middle of list? */
	for (t = timeouts; t->next; t = t->next) {
		if (t->next->when > q->when) {
			q->next = t->next;
			t->next = q;
			return;
		}
	}

	/* End of list. */
	t->next = q;
	q->next = NULL;
}

void
cancel_timeout(void (*where)(void *), void *what)
{
	struct timeout *t, *q;

	/* Look for this timeout on the list, and unlink it if we find it. */
	t = NULL;
	for (q = timeouts; q; q = q->next) {
		if (q->func == where && q->what == what) {
			if (t)
				t->next = q->next;
			else
				timeouts = q->next;
			break;
		}
		t = q;
	}

	/* If we found the timeout, put it on the free list. */
	if (q) {
		q->next = free_timeouts;
		free_timeouts = q;
	}
}

a375 32
}

int
interface_link_status(char *ifname)
{
	struct ifmediareq ifmr;
	int sock;

	if ((sock = socket (AF_INET, SOCK_DGRAM, 0)) == -1)
		error("Can't create socket");

	memset(&ifmr, 0, sizeof(ifmr));
	strlcpy(ifmr.ifm_name, ifname, sizeof(ifmr.ifm_name));
	if (ioctl(sock, SIOCGIFMEDIA, (caddr_t)&ifmr) == -1) {
		/* EINVAL -> link state unknown. treat as active */
		if (errno != EINVAL)
			syslog(LOG_DEBUG, "ioctl(SIOCGIFMEDIA) on %s: %m",
			    ifname);
		close(sock);
		return (1);
	}
	close(sock);

	if (ifmr.ifm_status & IFM_AVALID) {
		if ((ifmr.ifm_active & IFM_NMASK) == IFM_ETHER) {
			if (ifmr.ifm_status & IFM_ACTIVE)
				return (1);
			else
				return (0);
		}
	}
	return (1);
@


1.1
log
@initial cut at split out dhcrelay, whacked from usr.sbin/dhcp/ and sbin/dhclient
@
text
@d1 1
a1 1
/*	$OpenBSD: dispatch.c,v 1.23 2004/04/07 16:27:08 henning Exp $	*/
d54 1
d93 1
d107 1
a127 1

a130 6
void
reinitialize_interfaces(void)
{
	interfaces_invalidated = 1;
}

a159 1
			struct timeout *t;
d161 2
a162 1
				t = timeouts;
d188 1
d218 2
a219 2
			struct interface_info *ip;
			ip = l->local;
@

