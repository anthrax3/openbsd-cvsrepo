head	1.15;
access;
symbols
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.26
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.22
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.20
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.18
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.16
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.14
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.07.07.21.00.59;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.19.20.14.58;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.19.19.41.21;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.18.22.58.56;	author david;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.12.21.09.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.36.55;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.06.19.28.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.18.00.40.31;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.23.03.45.51;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.05.05.10.04;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.07.20.00.16;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.31.19.40.58;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@/*	$OpenBSD: measure.c,v 1.14 2009/10/27 23:59:57 deraadt Exp $	*/

/*-
 * Copyright (c) 1985, 1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "globals.h"
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <signal.h>
#include <poll.h>

#define MSEC_DAY	(SECDAY*1000)

#define PACKET_IN	1024

#define MSGS		5		/* timestamps to average */
#define TRIALS		10		/* max # of timestamps sent */

extern int sock_raw;

int measure_delta;

extern int in_cksum(u_short*, int);

static n_short seqno = 0;

/*
 * Measures the differences between machines' clocks using
 * ICMP timestamp messages.
 */
int					/* status val defined in globals.h */
measure(u_long maxmsec, u_long wmsec, char *hname, struct sockaddr_in *addr,
    int print)
{
	socklen_t length;
	int measure_status;
	int rcvcount, trials;
	int cc, count;
	struct pollfd pfd[1];
	long sendtime, recvtime, histime1, histime2;
	long idelta, odelta, total;
	long min_idelta, min_odelta;
	struct timeval tdone, tcur, ttrans, twait, tout;
	u_char packet[PACKET_IN], opacket[64];
	struct icmp *icp = (struct icmp *) packet;
	struct icmp *oicp = (struct icmp *) opacket;
	struct ip *ip = (struct ip *) packet;

	min_idelta = min_odelta = 0x7fffffff;
	measure_status = HOSTDOWN;
	measure_delta = HOSTDOWN;
	trials = 0;
	errno = 0;

	/* open raw socket used to measure time differences */
	if (sock_raw < 0) {
		sock_raw = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);
		if (sock_raw < 0)  {
			syslog(LOG_ERR, "opening raw socket: %m");
			goto quit;
		}
	}

	/*
	 * empty the icmp input queue
	 */
	pfd[0].fd = sock_raw;
	pfd[0].events = POLLIN;
	for (;;) {
		if (poll(pfd, 1, 0)) {
			length = sizeof(struct sockaddr_in);
			siginterrupt(SIGINT, 1);
			cc = recvfrom(sock_raw, (char *)packet, PACKET_IN, 0,
			    0, &length);
			if (cc < 0) {
				if (errno == EINTR && gotintr)
					goto bail;
				siginterrupt(SIGINT, 0);
				goto quit;
			}
			siginterrupt(SIGINT, 0);
			continue;
		}
		break;
	}

	/*
	 * Choose the smallest transmission time in each of the two
	 * directions. Use these two latter quantities to compute the delta
	 * between the two clocks.
	 */

	oicp->icmp_type = ICMP_TSTAMP;
	oicp->icmp_code = 0;
	oicp->icmp_id = getpid();
	oicp->icmp_rtime = 0;
	oicp->icmp_ttime = 0;
	oicp->icmp_seq = seqno;

	(void)gettimeofday(&tdone, 0);
	mstotvround(&tout, maxmsec);
	timeradd(&tdone, &tout, &tdone);	/* when we give up */

	mstotvround(&twait, wmsec);

	rcvcount = 0;
	trials = 0;
	while (rcvcount < MSGS) {
		(void)gettimeofday(&tcur, 0);

		/*
		 * keep sending until we have sent the max
		 */
		if (trials < TRIALS) {
			trials++;
			oicp->icmp_otime = htonl((tcur.tv_sec % SECDAY) * 1000
					    + tcur.tv_usec / 1000);
			oicp->icmp_cksum = 0;
			oicp->icmp_cksum = in_cksum((u_short*)oicp,
						    sizeof(*oicp));

			siginterrupt(SIGINT, 1);
			count = sendto(sock_raw, opacket, sizeof(*oicp), 0,
				       (struct sockaddr*)addr,
				       sizeof(struct sockaddr));
			if (count < 0) {
				if (errno == EINTR && gotintr)
					goto bail;
				siginterrupt(SIGINT, 0);
				if (measure_status == HOSTDOWN)
					measure_status = UNREACHABLE;
				goto quit;
			}
			siginterrupt(SIGINT, 0);
			++oicp->icmp_seq;

			timeradd(&tcur, &twait, &ttrans);
		} else {
			ttrans = tdone;
		}

		while (rcvcount < trials) {
			timersub(&ttrans, &tcur, &tout);
			if (tout.tv_sec < 0)
				tout.tv_sec = 0;

			count = poll(pfd, 1,
			    tout.tv_sec * 1000 + tout.tv_usec / 1000);
			(void)gettimeofday(&tcur, (struct timezone *)0);
			if (count <= 0)
				break;

			length = sizeof(struct sockaddr_in);
			siginterrupt(SIGINT, 1);
			cc = recvfrom(sock_raw, (char *)packet, PACKET_IN, 0,
				      0,&length);
			if (cc < 0) {
				if (errno == EINTR && gotintr)
					goto bail;
				siginterrupt(SIGINT, 0);
				goto quit;
			}
			siginterrupt(SIGINT, 0);

			/*
			 * got something.  See if it is ours
			 */
			icp = (struct icmp *)(packet + (ip->ip_hl << 2));
			if (cc < sizeof(*ip)
			    || icp->icmp_type != ICMP_TSTAMPREPLY
			    || icp->icmp_id != oicp->icmp_id
			    || icp->icmp_seq < seqno
			    || icp->icmp_seq >= oicp->icmp_seq)
				continue;

			sendtime = ntohl(icp->icmp_otime);
			recvtime = ((tcur.tv_sec % SECDAY) * 1000 +
				    tcur.tv_usec / 1000);

			total = recvtime-sendtime;
			if (total < 0)	/* do not hassle midnight */
				continue;

			rcvcount++;
			histime1 = ntohl(icp->icmp_rtime);
			histime2 = ntohl(icp->icmp_ttime);
			/*
			 * a host using a time format different from
			 * msec. since midnight UT (as per RFC792) should
			 * set the high order bit of the 32-bit time
			 * value it transmits.
			 */
			if ((histime1 & 0x80000000) != 0) {
				measure_status = NONSTDTIME;
				goto quit;
			}
			measure_status = GOOD;

			idelta = recvtime-histime2;
			odelta = histime1-sendtime;

			/* do not be confused by midnight */
			if (idelta < -MSEC_DAY/2) idelta += MSEC_DAY;
			else if (idelta > MSEC_DAY/2) idelta -= MSEC_DAY;

			if (odelta < -MSEC_DAY/2) odelta += MSEC_DAY;
			else if (odelta > MSEC_DAY/2) odelta -= MSEC_DAY;

			/* save the quantization error so that we can get a
			 * measurement finer than our system clock.
			 */
			if (total < MIN_ROUND) {
				measure_delta = (odelta - idelta)/2;
				goto quit;
			}

			if (idelta < min_idelta)
				min_idelta = idelta;
			if (odelta < min_odelta)
				min_odelta = odelta;

			measure_delta = (min_odelta - min_idelta)/2;
		}

		if (tcur.tv_sec > tdone.tv_sec
		    || (tcur.tv_sec == tdone.tv_sec
			&& tcur.tv_usec >= tdone.tv_usec))
			break;
	}

quit:
	seqno += TRIALS;		/* allocate our sequence numbers */

	/*
	 * If no answer is received for TRIALS consecutive times,
	 * the machine is assumed to be down
	 */
	if (measure_status == GOOD) {
		if (trace) {
			fprintf(fd,
				"measured delta %4d, %d trials to %-15s %s\n",
				measure_delta, trials,
				inet_ntoa(addr->sin_addr), hname);
		}
	} else if (print) {
		if (errno != 0)
			fprintf(stderr, "measure %s: %s\n", hname,
				strerror(errno));
	} else {
		if (errno != 0) {
			syslog(LOG_ERR, "measure %s: %m", hname);
		} else {
			syslog(LOG_ERR, "measure: %s did not respond", hname);
		}
		if (trace) {
			fprintf(fd,
				"measure: %s failed after %d trials\n",
				hname, trials);
			(void)fflush(fd);
		}
	}

	return(measure_status);
bail:
	siginterrupt(SIGINT, 0);
	return (0);
}

/*
 * round a number of milliseconds into a struct timeval
 */
void
mstotvround(struct timeval *res, long x)
{
	if (x < 0)
		x = -((-x + 3)/5);
	else
		x = (x+3)/5;
	x *= 5;

	res->tv_sec = x/1000;
	res->tv_usec = (x-res->tv_sec*1000)*1000;
	if (res->tv_usec < 0) {
		res->tv_usec += 1000000;
		res->tv_sec--;
	}
}
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.13 2003/11/19 20:14:58 millert Exp $	*/
@


1.13
log
@More poll conversion fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.12 2003/08/19 19:41:21 deraadt Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)measure.c	5.1 (Berkeley) 5/11/93";
#endif /* not lint */
@


1.12
log
@use poll instead of select; dhartmei ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.11 2003/07/18 22:58:56 david Exp $	*/
d101 1
a101 2
		tout.tv_sec = tout.tv_usec = 0;
		if (poll(pfd, 1, tout.tv_sec * 1000)) {
d178 2
a179 1
			count = poll(pfd, 1, tout.tv_sec * 1000);
@


1.11
log
@add missing includes
ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.10 2003/06/12 21:09:48 deraadt Exp $	*/
d41 1
d70 1
a70 1
	fd_set ready;
d98 2
a99 1
	FD_ZERO(&ready);
d102 1
a102 2
		FD_SET(sock_raw, &ready);
		if (select(sock_raw+1, &ready, 0,0, &tout)) {
a131 2
	FD_ZERO(&ready);

d179 1
a179 3
			FD_SET(sock_raw, &ready);
			count = select(sock_raw+1, &ready, (fd_set *)0,
				       (fd_set *)0, &tout);
@


1.10
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.9 2003/06/02 23:36:55 millert Exp $	*/
d40 1
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.8 2002/09/06 19:28:01 deraadt Exp $	*/
d61 2
a62 5
measure(u_long maxmsec,			/* wait this many msec at most */
	u_long wmsec,			/* msec to wait for an answer */
	char *hname,
	struct sockaddr_in *addr,
	int print)			/* print complaints on stderr */
@


1.8
log
@socklen_t; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.7 2002/06/18 00:40:31 ericj Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@
remove ifdef sgi code, and HAVENIS. sgi was pointless and this didnt even come
close to compiling w/o HAVENIS
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.6 2002/03/14 16:44:25 mpech Exp $	*/
d71 1
a71 1
	int length;
@


1.6
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.5 2001/11/23 03:45:51 deraadt Exp $	*/
a39 4
#ifdef sgi
#ident "$Revision: 1.5 $"
#endif

a138 4
#ifdef sgi
	sginap(1);			/* start at a clock tick */
#endif /* sgi */

a314 1
#ifndef sgi
d320 1
a320 1
#endif /* sgi */
@


1.5
log
@use siginterrupt() enabling around all blocking calls, and check the flags; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.4 2001/05/05 05:10:04 mickey Exp $	*/
d41 1
a41 1
#ident "$Revision: 1.4 $"
d85 2
a86 2
	register struct icmp *icp = (struct icmp *) packet;
	register struct icmp *oicp = (struct icmp *) opacket;
@


1.4
log
@use strlcpy vs strncpy+a[len-1]='\0', some trailing spaces; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: measure.c,v 1.3 2001/04/07 20:00:16 ho Exp $	*/
d41 1
a41 1
#ident "$Revision: 1.3 $"
a103 1

d113 1
d115 5
a119 2
				      0,&length);
			if (cc < 0)
d121 2
d169 1
d174 3
d181 1
d202 1
d205 4
a208 1
			if (cc < 0)
d210 2
a223 1

d312 3
a315 4




@


1.3
log
@Add $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
#ident "$Revision: 1.2 $"
d103 1
a103 1
	    
d197 1
a197 1
			/* 
d275 1
a275 1
			   	measure_delta, trials,
@


1.2
log
@Fix -Wall warnings; millert@@ ok.
@
text
@d1 2
d41 1
a41 1
#ident "$Revision: 1.1.1.1 $"
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
#ident "$Revision: 1.5 $"
d90 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
