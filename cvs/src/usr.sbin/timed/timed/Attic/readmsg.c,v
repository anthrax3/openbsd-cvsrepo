head	1.18;
access;
symbols
	OPENBSD_4_9:1.16.0.6
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.4
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.15.0.26
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.22
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.20
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.18
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.16
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.14
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.12
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2011.07.07.21.00.59;	author deraadt;	state dead;
branches;
next	1.17;

1.17
date	2011.03.19.23.40.11;	author okan;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.19.19.17.59;	author dhartmei;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.19.19.41.21;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.12.21.09.48;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.36.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.06.19.28.01;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.18.00.40.31;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.05.05.10.04;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.07.20.00.16;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.02.09.51.02;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.31.19.40.58;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.31.19.38.59;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.22.00.53.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.11.01.06.10.42;	author deraadt;	state Exp;
branches
	1.2.14.1
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.04.01.05.46.39;	author jason;	state Exp;
branches;
next	;

1.2.16.1
date	2001.04.01.05.44.26;	author jason;	state Exp;
branches;
next	;


desc
@@


1.18
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@/*	$OpenBSD: readmsg.c,v 1.17 2011/03/19 23:40:11 okan Exp $	*/

/*-
 * Copyright (c) 1985, 1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "globals.h"

extern char *tsptype[];

/*
 * LOOKAT checks if the message is of the requested type and comes from
 * the right machine, returning 1 in case of affirmative answer
 */
#define LOOKAT(msg, mtype, mfrom, netp, froms) \
	(((mtype) == TSP_ANY || (mtype) == (msg).tsp_type) &&		\
	 ((mfrom) == 0 || !strcmp((mfrom), (msg).tsp_name)) &&		\
	 ((netp) == 0 ||						\
	  ((netp)->mask & (froms).sin_addr.s_addr) == (netp)->net.s_addr))

struct timeval rtime, rwait, rtout;
struct tsp msgin;
static struct tsplist {
	struct tsp info;
	struct timeval when;
	struct sockaddr_in addr;
	struct tsplist *p;
} msgslist;
struct sockaddr_in from;
struct netinfo *fromnet;
struct timeval from_when;

/*
 * `readmsg' returns message `type' sent by `machfrom' if it finds it
 * either in the receive queue, or in a linked list of previously received
 * messages that it maintains.
 * Otherwise it waits to see if the appropriate message arrives within
 * `intvl' seconds. If not, it returns NULL.
 */

struct tsp *
readmsg(int type, char *machfrom, struct timeval *intvl,
    struct netinfo *netfrom)
{
	int length;
	socklen_t salength;
	struct pollfd pfd[1];
	static struct tsplist *head = &msgslist;
	static struct tsplist *tail = &msgslist;
	static int msgcnt = 0;
	struct tsplist *prev;
	struct netinfo *ntp;
	struct tsplist *ptr;
	ssize_t n;

	if (trace) {
		fprintf(fd, "readmsg: looking for %s from %s, %s\n",
			tsptype[type], machfrom == NULL ? "ANY" : machfrom,
			netfrom == NULL ? "ANYNET" : inet_ntoa(netfrom->net));
		if (head->p != 0) {
			length = 1;
			for (ptr = head->p; ptr != 0; ptr = ptr->p) {
				/* do not repeat the hundreds of messages */
				if (++length > 3) {
					if (ptr == tail) {
						fprintf(fd,"\t ...%d skipped\n",
							length);
					} else {
						continue;
					}
				}
				fprintf(fd, length > 1 ? "\t" : "queue:\t");
				print(&ptr->info, &ptr->addr);
			}
		}
	}

	ptr = head->p;
	prev = head;

	/*
	 * Look for the requested message scanning through the
	 * linked list. If found, return it and free the space
	 */

	while (ptr != NULL) {
		if (LOOKAT(ptr->info, type, machfrom, netfrom, ptr->addr)) {
again:
			msgin = ptr->info;
			from = ptr->addr;
			from_when = ptr->when;
			prev->p = ptr->p;
			if (ptr == tail)
				tail = prev;
			free((char *)ptr);
			fromnet = NULL;
			if (netfrom == NULL)
			    for (ntp = nettab; ntp != NULL; ntp = ntp->next) {
				    if ((ntp->mask & from.sin_addr.s_addr) ==
					ntp->net.s_addr) {
					    fromnet = ntp;
					    break;
				    }
			    }
			else
			    fromnet = netfrom;
			if (trace) {
				fprintf(fd, "readmsg: found ");
				print(&msgin, &from);
			}

/* The protocol can get far behind.  When it does, it gets
 *	hopelessly confused.  So delete duplicate messages.
 */
			for (ptr = prev; (ptr = ptr->p) != NULL; prev = ptr) {
				if (ptr->addr.sin_addr.s_addr
					== from.sin_addr.s_addr
				    && ptr->info.tsp_type == msgin.tsp_type) {
					if (trace)
						fprintf(fd, "\tdup ");
					goto again;
				}
			}
			msgcnt--;
			return(&msgin);
		} else {
			prev = ptr;
			ptr = ptr->p;
		}
	}

	/*
	 * If the message was not in the linked list, it may still be
	 * coming from the network. Set the timer and wait
	 * on a poll to read the next incoming message: if it is the
	 * right one, return it, otherwise insert it in the linked list.
	 */

	(void)gettimeofday(&rtout, 0);
	timeradd(&rtout, intvl, &rtout);
	for (;;) {
		(void)gettimeofday(&rtime, 0);
		timersub(&rtout, &rtime, &rwait);
		if (rwait.tv_sec < 0)
			timerclear(&rwait);
		else if (rwait.tv_sec == 0
			 && rwait.tv_usec < 1000000/CLK_TCK)
			rwait.tv_usec = 1000000/CLK_TCK;

		if (trace) {
			fprintf(fd, "readmsg: wait %ld.%6ld at %s\n",
				rwait.tv_sec, rwait.tv_usec, date());
			/* Notice a full disk, as we flush trace info.
			 * It is better to flush periodically than at
			 * every line because the tracing consists of bursts
			 * of many lines.  Without care, tracing slows
			 * down the code enough to break the protocol.
			 */
			if (rwait.tv_sec != 0
			    && EOF == fflush(fd))
				traceoff("Tracing ended for cause at %s\n");
		}

		pfd[0].fd = sock;
		pfd[0].events = POLLIN;
		if (!poll(pfd, 1, rwait.tv_sec * 1000 +
		    rwait.tv_usec / 1000)) {
			if (rwait.tv_sec == 0 && rwait.tv_usec == 0)
				return(0);
			continue;
		}
		salength = sizeof(from);
		if ((n = recvfrom(sock, (char *)&msgin, sizeof(struct tsp), 0,
			     (struct sockaddr *)&from, &salength)) < 0) {
			syslog(LOG_ERR, "recvfrom: %m");
			exit(1);
		}
		if (n < sizeof(struct tsp)) {
			syslog(LOG_NOTICE, "short packet (%u/%u bytes) from %s",
			    n, sizeof(struct tsp), inet_ntoa(from.sin_addr));
			continue;
		}

		(void)gettimeofday(&from_when, (struct timezone *)0);
		bytehostorder(&msgin);

		if (msgin.tsp_vers > TSPVERSION) {
			if (trace) {
			    fprintf(fd,"readmsg: version mismatch\n");
			    /* should do a dump of the packet */
			}
			continue;
		}

		if (memchr(msgin.tsp_name, '\0', sizeof msgin.tsp_name) ==
		    NULL) {
			syslog(LOG_NOTICE, "hostname field not NUL terminated "
			    "in packet from %s", inet_ntoa(from.sin_addr));
			continue;
		}

		fromnet = NULL;
		for (ntp = nettab; ntp != NULL; ntp = ntp->next)
			if ((ntp->mask & from.sin_addr.s_addr) ==
			    ntp->net.s_addr) {
				fromnet = ntp;
				break;
			}

		/*
		 * drop packets from nets we are ignoring permanently
		 */
		if (fromnet == NULL) {
			/*
			 * The following messages may originate on
			 * this host with an ignored network address
			 */
			if (msgin.tsp_type != TSP_TRACEON &&
			    msgin.tsp_type != TSP_SETDATE &&
			    msgin.tsp_type != TSP_MSITE &&
			    msgin.tsp_type != TSP_TEST &&
			    msgin.tsp_type != TSP_TRACEOFF) {
				if (trace) {
				    fprintf(fd,"readmsg: discard null net ");
				    print(&msgin, &from);
				}
				continue;
			}
		}

		/*
		 * Throw away messages coming from this machine,
		 * unless they are of some particular type.
		 * This gets rid of broadcast messages and reduces
		 * master processing time.
		 */
		if (!strcmp(msgin.tsp_name, hostname)
		    && msgin.tsp_type != TSP_SETDATE
		    && msgin.tsp_type != TSP_TEST
		    && msgin.tsp_type != TSP_MSITE
		    && msgin.tsp_type != TSP_TRACEON
		    && msgin.tsp_type != TSP_TRACEOFF
		    && msgin.tsp_type != TSP_LOOP) {
			if (trace) {
				fprintf(fd, "readmsg: discard own ");
				print(&msgin, &from);
			}
			continue;
		}

		/*
		 * Send acknowledgements here; this is faster and
		 * avoids deadlocks that would occur if acks were
		 * sent from a higher level routine.  Different
		 * acknowledgements are necessary, depending on
		 * status.
		 */
		if (fromnet == NULL)	/* do not de-reference 0 */
			ignoreack();
		else if (fromnet->status == MASTER)
			masterack();
		else if (fromnet->status == SLAVE)
			slaveack();
		else
			ignoreack();

		if (LOOKAT(msgin, type, machfrom, netfrom, from)) {
			if (trace) {
				fprintf(fd, "readmsg: ");
				print(&msgin, &from);
			}
			return(&msgin);
		} else if (++msgcnt > NHOSTS*3) {

/* The protocol gets hopelessly confused if it gets too far
*	behind.  However, it seems able to recover from all cases of lost
*	packets.  Therefore, if we are swamped, throw everything away.
*/
			if (trace)
				fprintf(fd,
					"readmsg: discarding %d msgs\n",
					msgcnt);
			msgcnt = 0;
			while ((ptr=head->p) != NULL) {
				head->p = ptr->p;
				free((char *)ptr);
			}
			tail = head;
		} else {
			tail->p = (struct tsplist *)
				    malloc(sizeof(struct tsplist));
			tail = tail->p;
			tail->p = NULL;
			tail->info = msgin;
			tail->addr = from;
			/* timestamp msgs so SETTIMEs are correct */
			tail->when = from_when;
		}
	}
}

/*
 * Send the necessary acknowledgements:
 * only the type ACK is to be sent by a slave
 */
void
slaveack(void)
{
	switch(msgin.tsp_type) {

	case TSP_ADJTIME:
	case TSP_SETTIME:
	case TSP_ACCEPT:
	case TSP_REFUSE:
	case TSP_TRACEON:
	case TSP_TRACEOFF:
	case TSP_QUIT:
		if (trace) {
			fprintf(fd, "Slaveack: ");
			print(&msgin, &from);
		}
		xmit(TSP_ACK,msgin.tsp_seq, &from);
		break;

	default:
		if (trace) {
			fprintf(fd, "Slaveack: no ack: ");
			print(&msgin, &from);
		}
		break;
	}
}

/*
 * Certain packets may arrive from this machine on ignored networks.
 * These packets should be acknowledged.
 */
void
ignoreack(void)
{
	switch(msgin.tsp_type) {

	case TSP_TRACEON:
	case TSP_TRACEOFF:
	case TSP_QUIT:
		if (trace) {
			fprintf(fd, "Ignoreack: ");
			print(&msgin, &from);
		}
		xmit(TSP_ACK,msgin.tsp_seq, &from);
		break;

	default:
		if (trace) {
			fprintf(fd, "Ignoreack: no ack: ");
			print(&msgin, &from);
		}
		break;
	}
}

/*
 * `masterack' sends the necessary acknowledgments
 * to the messages received by a master
 */
void
masterack(void)
{
	struct tsp resp;

	resp = msgin;
	resp.tsp_vers = TSPVERSION;
	strlcpy(resp.tsp_name, hostname, sizeof resp.tsp_name);

	switch(msgin.tsp_type) {

	case TSP_QUIT:
	case TSP_TRACEON:
	case TSP_TRACEOFF:
	case TSP_MSITEREQ:
		if (trace) {
			fprintf(fd, "Masterack: ");
			print(&msgin, &from);
		}
		xmit(TSP_ACK,msgin.tsp_seq, &from);
		break;

	case TSP_RESOLVE:
	case TSP_MASTERREQ:
		if (trace) {
			fprintf(fd, "Masterack: ");
			print(&msgin, &from);
		}
		xmit(TSP_MASTERACK,msgin.tsp_seq, &from);
		break;

	default:
		if (trace) {
			fprintf(fd,"Masterack: no ack: ");
			print(&msgin, &from);
		}
		break;
	}
}

/*
 * Print a TSP message
 */
void
print(struct tsp *msg, struct sockaddr_in *addr)
{
	char tm[26];
	time_t msgtime;

	if (msg->tsp_type >= TSPTYPENUMBER) {
		fprintf(fd, "bad type (%u) on packet from %s\n",
		    msg->tsp_type, inet_ntoa(addr->sin_addr));
		return;
	}

	switch (msg->tsp_type) {

	case TSP_LOOP:
		fprintf(fd, "%s %d %-6u #%d %-15s %s\n",
			tsptype[msg->tsp_type],
			msg->tsp_vers,
			msg->tsp_seq,
			msg->tsp_hopcnt,
			inet_ntoa(addr->sin_addr),
			msg->tsp_name);
		break;

	case TSP_SETTIME:
	case TSP_SETDATE:
	case TSP_SETDATEREQ:
#ifdef sgi
		(void)cftime(tm, "%D %T", &msg->tsp_time.tv_sec);
#else
		msgtime = msg->tsp_time.tv_sec;
		strftime(tm, sizeof(tm), "%D %T", localtime(&msgtime));
#endif /* sgi */
		fprintf(fd, "%s %d %-6u %s %-15s %s\n",
			tsptype[msg->tsp_type],
			msg->tsp_vers,
			msg->tsp_seq,
			tm,
			inet_ntoa(addr->sin_addr),
			msg->tsp_name);
		break;

	case TSP_ADJTIME:
		fprintf(fd, "%s %d %-6u (%d,%d) %-15s %s\n",
			tsptype[msg->tsp_type],
			msg->tsp_vers,
			msg->tsp_seq,
			msg->tsp_time.tv_sec,
			msg->tsp_time.tv_usec,
			inet_ntoa(addr->sin_addr),
			msg->tsp_name);
		break;

	default:
		fprintf(fd, "%s %d %-6u %-15s %s\n",
			tsptype[msg->tsp_type],
			msg->tsp_vers,
			msg->tsp_seq,
			inet_ntoa(addr->sin_addr),
			msg->tsp_name);
		break;
	}
}
@


1.17
log
@use timerclear macro

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.16 2009/10/27 23:59:57 deraadt Exp $	*/
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.15 2003/11/19 19:17:59 dhartmei Exp $	*/
d170 1
a170 1
			rwait.tv_sec = rwait.tv_usec = 0;
@


1.15
log
@fix some select/poll conversion breakage, more to come from millert@@.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.14 2003/08/19 19:41:21 deraadt Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)readmsg.c	5.1 (Berkeley) 5/11/93";
#endif /* not lint */
@


1.14
log
@use poll instead of select; dhartmei ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.13 2003/06/12 21:09:48 deraadt Exp $	*/
d195 2
a196 1
		if (!poll(pfd, 1, rwait.tv_sec * 1000)) {
@


1.13
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.12 2003/06/02 23:36:55 millert Exp $	*/
d76 1
a76 1
	fd_set ready;
d164 1
a164 1
	 * on a select to read the next incoming message: if it is the
a169 1
	FD_ZERO(&ready);
d193 3
a195 3
		FD_SET(sock, &ready);
		if (!select(sock+1, &ready, (fd_set *)0, (fd_set *)0,
			   &rwait)) {
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.11 2002/09/06 19:28:01 deraadt Exp $	*/
d72 1
a72 1
	struct netinfo *netfrom)
d336 1
a336 1
slaveack()
d368 1
a368 1
ignoreack()
d396 1
a396 1
masterack()
d439 1
a439 3
print(msg, addr)
struct tsp *msg;
struct sockaddr_in *addr;
@


1.11
log
@socklen_t; henning ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.10 2002/06/18 00:40:31 ericj Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@
remove ifdef sgi code, and HAVENIS. sgi was pointless and this didnt even come
close to compiling w/o HAVENIS
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.9 2002/03/14 16:44:25 mpech Exp $	*/
d79 1
d205 1
a205 1
		length = sizeof(from);
d207 1
a207 1
			     (struct sockaddr*)&from, &length)) < 0) {
@


1.9
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.8 2001/05/05 05:10:04 mickey Exp $	*/
a38 4

#ifdef sgi
#ident "$Revision: 1.8 $"
#endif
@


1.8
log
@use strlcpy vs strncpy+a[len-1]='\0', some trailing spaces; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: readmsg.c,v 1.7 2001/04/07 20:00:16 ho Exp $	*/
d41 1
a41 1
#ident "$Revision: 1.7 $"
d88 2
a89 2
	register struct netinfo *ntp;
	register struct tsplist *ptr;
@


1.7
log
@Add $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
#ident "$Revision: 1.6 $"
d55 1
a55 1
	 ((netp) == 0 || 						\
d409 1
a409 2
	(void)strncpy(resp.tsp_name, hostname, sizeof resp.tsp_name-1);
	resp.tsp_name[sizeof resp.tsp_name-1] = '\0';
d452 1
a452 1
	
d478 1
a478 2
		strncpy(tm, ctime(&msgtime)+3+1, sizeof(tm));
		tm[15] = '\0';		/* ugh */
@


1.6
log
@Fix security problem correctly; use >=, not >; mea culpa.
@
text
@d1 2
d41 1
a41 1
#ident "$Revision: 1.5 $"
@


1.5
log
@Fix -Wall warnings; millert@@ ok.
@
text
@d39 1
a39 1
#ident "$Revision: 1.4 $"
d452 1
a452 1
	if (msg->tsp_type > TSPTYPENUMBER) {
@


1.4
log
@Security fixes: check for short packets and bad types; from FreeBSD.
millert@@ ok.
@
text
@d39 1
a39 1
#ident "$Revision: 1.3 $"
d490 1
a490 1
		fprintf(fd, "%s %d %-6u (%ld,%ld) %-15s %s\n",
@


1.3
log
@do not accept packets with an unterminated hostname; ben@@freebsd
@
text
@d39 1
a39 1
#ident "$Revision: 1.2 $"
d88 1
d207 2
a208 2
		if (recvfrom(sock, (char *)&msgin, sizeof(struct tsp), 0,
			     (struct sockaddr*)&from, &length) < 0) {
d212 6
d451 6
@


1.2
log
@40 buf oflows
@
text
@d39 1
a39 1
#ident "$Revision: 1.1.1.1 $"
d219 7
@


1.2.14.1
log
@Pull in patches from current:
Fix (deraadt):
do not accept packets with an unterminated hostname; ben@@freebsd
Fix (fgsch):
Security fixes: check for short packets and bad types; from FreeBSD.
millert@@ ok.
@
text
@d39 1
a39 1
#ident "$Revision: 1.4 $"
a87 1
	ssize_t n;
d206 2
a207 2
		if ((n = recvfrom(sock, (char *)&msgin, sizeof(struct tsp), 0,
			     (struct sockaddr*)&from, &length)) < 0) {
a210 6
		if (n < sizeof(struct tsp)) {
			syslog(LOG_NOTICE, "short packet (%u/%u bytes) from %s",
			    n, sizeof(struct tsp), inet_ntoa(from.sin_addr));
			continue;
		}

a221 7
		if (memchr(msgin.tsp_name, '\0', sizeof msgin.tsp_name) ==
		    NULL) {
			syslog(LOG_NOTICE, "hostname field not NUL terminated "
			    "in packet from %s", inet_ntoa(from.sin_addr));
			continue;
		}

a436 6
	
	if (msg->tsp_type > TSPTYPENUMBER) {
		fprintf(fd, "bad type (%u) on packet from %s\n",
		    msg->tsp_type, inet_ntoa(addr->sin_addr));
		return;
	}
@


1.2.16.1
log
@Pull in patches from current:
Fix (deraadt):
do not accept packets with an unterminated hostname; ben@@freebsd
Fix (fgsch):
Security fixes: check for short packets and bad types; from FreeBSD.
millert@@ ok.
@
text
@d39 1
a39 1
#ident "$Revision: 1.4 $"
a87 1
	ssize_t n;
d206 2
a207 2
		if ((n = recvfrom(sock, (char *)&msgin, sizeof(struct tsp), 0,
			     (struct sockaddr*)&from, &length)) < 0) {
a210 6
		if (n < sizeof(struct tsp)) {
			syslog(LOG_NOTICE, "short packet (%u/%u bytes) from %s",
			    n, sizeof(struct tsp), inet_ntoa(from.sin_addr));
			continue;
		}

a221 7
		if (memchr(msgin.tsp_name, '\0', sizeof msgin.tsp_name) ==
		    NULL) {
			syslog(LOG_NOTICE, "hostname field not NUL terminated "
			    "in packet from %s", inet_ntoa(from.sin_addr));
			continue;
		}

a436 6
	
	if (msg->tsp_type > TSPTYPENUMBER) {
		fprintf(fd, "bad type (%u) on packet from %s\n",
		    msg->tsp_type, inet_ntoa(addr->sin_addr));
		return;
	}
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
#ident "$Revision: 1.5 $"
d393 2
a394 1
	(void)strcpy(resp.tsp_name, hostname);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
