head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.28
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.24
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.22
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.20
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.18
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.07.21.00.59;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.57;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.19.19.41.21;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.26.21.36.40;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.12.21.09.48;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.36.55;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.19.15.45.39;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.18.00.40.31;	author ericj;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.05.10.05;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.01.06.10.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.28.06.04.10;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.23.42.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.28;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@/*	$OpenBSD: slave.c,v 1.12 2009/10/27 23:59:57 deraadt Exp $	*/

/*-
 * Copyright (c) 1985, 1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "globals.h"
#include <setjmp.h>
#include "pathnames.h"
#include <utmp.h>
#include <util.h>

extern jmp_buf jmpenv;
extern int Mflag;
extern int justquit;

extern u_short sequence;

static char master_name[MAXHOSTNAMELEN];
static struct netinfo *old_slavenet;
static int old_status;

static void schgdate(struct tsp *, char *);
static void setmaster(struct tsp *);
static void answerdelay(void);

int
slave(void)
{
	int tries;
	long electiontime, refusetime, looktime, looptime, adjtime;
	u_short seq;
	long fastelection;
#define FASTTOUT 3
	struct in_addr cadr;
	struct timeval otime;
	struct sockaddr_in taddr;
	char tname[MAXHOSTNAMELEN];
	struct tsp *msg, to;
	struct timeval ntime, wait, tmptv;
	time_t tmpt;
	struct tsp *answer;
	char olddate[32];
	char newdate[32];
	struct netinfo *ntp;
	struct hosttbl *htp;


	old_slavenet = 0;
	seq = 0;
	refusetime = 0;
	adjtime = 0;

	(void)gettimeofday(&ntime, 0);
	electiontime = ntime.tv_sec + delay2;
	fastelection = ntime.tv_sec + FASTTOUT;
	if (justquit)
		looktime = electiontime;
	else
		looktime = fastelection;
	looptime = fastelection;

	if (slavenet)
		xmit(TSP_SLAVEUP, 0, &slavenet->dest_addr);
	if (status & MASTER) {
		for (ntp = nettab; ntp != NULL; ntp = ntp->next) {
			if (ntp->status == MASTER)
				masterup(ntp);
		}
	}

loop:
	get_goodgroup(0);
	(void)gettimeofday(&ntime, (struct timezone *)0);
	if (ntime.tv_sec > electiontime) {
		if (trace)
			fprintf(fd, "election timer expired\n");
		longjmp(jmpenv, 1);
	}

	if (ntime.tv_sec >= looktime) {
		if (trace)
			fprintf(fd, "Looking for nets to master\n");

		if (Mflag && nignorednets > 0) {
			for (ntp = nettab; ntp != NULL; ntp = ntp->next) {
				if (ntp->status == IGNORE
				    || ntp->status == NOMASTER) {
					lookformaster(ntp);
					if (ntp->status == MASTER) {
						masterup(ntp);
					} else if (ntp->status == MASTER) {
						ntp->status = NOMASTER;
					}
				}
				if (ntp->status == MASTER
				    && --ntp->quit_count < 0)
					ntp->quit_count = 0;
			}
			makeslave(slavenet);	/* prune extras */
			setstatus();
		}
		(void)gettimeofday(&ntime, 0);
		looktime = ntime.tv_sec + delay2;
	}
	if (ntime.tv_sec >= looptime) {
		if (trace)
			fprintf(fd, "Looking for loops\n");
		for (ntp = nettab; ntp != NULL; ntp = ntp->next) {
		    if (ntp->status == MASTER) {
			to.tsp_type = TSP_LOOP;
			to.tsp_vers = TSPVERSION;
			to.tsp_seq = sequence++;
			to.tsp_hopcnt = MAX_HOPCNT;
			strlcpy(to.tsp_name, hostname, sizeof to.tsp_name);
			bytenetorder(&to);
			if (sendto(sock, (char *)&to, sizeof(struct tsp), 0,
				   (struct sockaddr*)&ntp->dest_addr,
				   sizeof(ntp->dest_addr)) < 0) {
				trace_sendto_err(ntp->dest_addr.sin_addr);
			}
		    }
		}
		(void)gettimeofday(&ntime, 0);
		looptime = ntime.tv_sec + delay2;
	}

	wait.tv_sec = min(electiontime,min(looktime,looptime)) - ntime.tv_sec;
	if (wait.tv_sec < 0)
		wait.tv_sec = 0;
	wait.tv_sec += FASTTOUT;
	wait.tv_usec = 0;
	msg = readmsg(TSP_ANY, ANYADDR, &wait, 0);

	if (msg != NULL) {
		/*
		 * filter stuff not for us
		 */
		switch (msg->tsp_type) {
		case TSP_SETDATE:
		case TSP_TRACEOFF:
		case TSP_TRACEON:
			/*
			 * XXX check to see they are from ourself
			 */
			break;

		case TSP_TEST:
		case TSP_MSITE:
			break;

		case TSP_MASTERUP:
			if (!fromnet) {
				if (trace) {
					fprintf(fd, "slave ignored: ");
					print(msg, &from);
				}
				goto loop;
			}
			break;

		default:
			if (!fromnet
			    || fromnet->status == IGNORE
			    || fromnet->status == NOMASTER) {
				if (trace) {
					fprintf(fd, "slave ignored: ");
					print(msg, &from);
				}
				goto loop;
			}
			break;
		}


		/*
		 * now process the message
		 */
		switch (msg->tsp_type) {

		case TSP_ADJTIME:
			if (fromnet != slavenet)
				break;
			if (!good_host_name(msg->tsp_name)) {
				syslog(LOG_NOTICE,
				   "attempted time adjustment by %s",
				       msg->tsp_name);
				suppress(&from, msg->tsp_name, fromnet);
				break;
			}
			/*
			 * Speed up loop detection in case we have a loop.
			 * Otherwise the clocks can race until the loop
			 * is found.
			 */
			(void)gettimeofday(&otime, 0);
			if (adjtime < otime.tv_sec)
				looptime -= (looptime-otime.tv_sec)/2 + 1;

			setmaster(msg);
			if (seq != msg->tsp_seq) {
				seq = msg->tsp_seq;
				synch(tvtomsround(msg->tsp_time));
			}
			(void)gettimeofday(&ntime, 0);
			electiontime = ntime.tv_sec + delay2;
			fastelection = ntime.tv_sec + FASTTOUT;
			adjtime = ntime.tv_sec + SAMPLEINTVL*2;
			break;

		case TSP_SETTIME:
			if (fromnet != slavenet)
				break;
			if (seq == msg->tsp_seq)
				break;
			seq = msg->tsp_seq;

			/* adjust time for residence on the queue */
			(void)gettimeofday(&otime, 0);
			adj_msg_time(msg,&otime);
			/*
			 * the following line is necessary due to syslog
			 * calling ctime() which clobbers the static buffer
			 */
			strlcpy(olddate, date(), sizeof olddate);
			tmpt = msg->tsp_time.tv_sec;
			strlcpy(newdate, ctime(&tmpt), sizeof newdate);

			if (!good_host_name(msg->tsp_name)) {
				syslog(LOG_NOTICE,
			    "attempted time setting by untrusted %s to %s",
				       msg->tsp_name, newdate);
				suppress(&from, msg->tsp_name, fromnet);
				break;
			}

			setmaster(msg);
			timersub(&msg->tsp_time, &otime, &ntime);
			if (ntime.tv_sec < MAXADJ && ntime.tv_sec > -MAXADJ) {
				/*
				 * do not change the clock if we can adjust it
				 */
				synch(tvtomsround(ntime));
			} else {
				logwtmp("|", "date", "");
				tmptv.tv_sec = msg->tsp_time.tv_sec;
				tmptv.tv_usec = msg->tsp_time.tv_usec;
				(void)settimeofday(&tmptv, 0);
				logwtmp("{", "date", "");
				syslog(LOG_NOTICE,
				       "date changed by %s from %s",
					msg->tsp_name, olddate);
				if (status & MASTER)
					spreadtime();
			}
			(void)gettimeofday(&ntime, 0);
			electiontime = ntime.tv_sec + delay2;
			fastelection = ntime.tv_sec + FASTTOUT;

/* This patches a bad protocol bug.  Imagine a system with several networks,
 * where there are a pair of redundant gateways between a pair of networks,
 * each running timed.  Assume that we start with a third machine mastering
 * one of the networks, and one of the gateways mastering the other.
 * Imagine that the third machine goes away and the non-master gateway
 * decides to replace it.  If things are timed just 'right,' we will have
 * each gateway mastering one network for a little while.  If a SETTIME
 * message gets into the network at that time, perhaps from the newly
 * masterful gateway as it was taking control, the SETTIME will loop
 * forever.  Each time a gateway receives it on its slave side, it will
 * call spreadtime to forward it on its mastered network.  We are now in
 * a permanent loop, since the SETTIME msgs will keep any clock
 * in the network from advancing.  Normally, the 'LOOP' stuff will detect
 * and correct the situation.  However, with the clocks stopped, the
 * 'looptime' timer cannot expire.  While they are in this state, the
 * masters will try to saturate the network with SETTIME packets.
 */
			looptime = ntime.tv_sec + (looptime-otime.tv_sec)/2-1;
			break;

		case TSP_MASTERUP:
			if (slavenet && fromnet != slavenet)
				break;
			if (!good_host_name(msg->tsp_name)) {
				suppress(&from, msg->tsp_name, fromnet);
				if (electiontime > fastelection)
					electiontime = fastelection;
				break;
			}
			makeslave(fromnet);
			setmaster(msg);
			setstatus();
			answerdelay();
			xmit(TSP_SLAVEUP, 0, &from);
			(void)gettimeofday(&ntime, 0);
			electiontime = ntime.tv_sec + delay2;
			fastelection = ntime.tv_sec + FASTTOUT;
			refusetime = 0;
			break;

		case TSP_MASTERREQ:
			if (fromnet->status != SLAVE)
				break;
			(void)gettimeofday(&ntime, 0);
			electiontime = ntime.tv_sec + delay2;
			break;

		case TSP_SETDATE:
			tmpt = msg->tsp_time.tv_sec;
			strlcpy(newdate, ctime(&tmpt), sizeof newdate);
			schgdate(msg, newdate);
			break;

		case TSP_SETDATEREQ:
			if (fromnet->status != MASTER)
				break;
			tmpt = msg->tsp_time.tv_sec;
			strlcpy(newdate, ctime(&tmpt), sizeof newdate);
			htp = findhost(msg->tsp_name);
			if (0 == htp) {
				syslog(LOG_WARNING,
				       "DATEREQ from uncontrolled machine");
				break;
			}
			if (!htp->good) {
				syslog(LOG_WARNING,
				"attempted date change by untrusted %s to %s",
				       htp->name, newdate);
				spreadtime();
				break;
			}
			schgdate(msg, newdate);
			break;

		case TSP_TRACEON:
			traceon();
			break;

		case TSP_TRACEOFF:
			traceoff("Tracing ended at %s\n");
			break;

		case TSP_SLAVEUP:
			newslave(msg);
			break;

		case TSP_ELECTION:
			if (fromnet->status == SLAVE) {
				(void)gettimeofday(&ntime, 0);
				electiontime = ntime.tv_sec + delay2;
				fastelection = ntime.tv_sec + FASTTOUT;
				seq = 0;
				if (!good_host_name(msg->tsp_name)) {
					syslog(LOG_NOTICE,
					       "suppress election of %s",
					       msg->tsp_name);
					to.tsp_type = TSP_QUIT;
					electiontime = fastelection;
				} else if (cadr.s_addr != from.sin_addr.s_addr
					   && ntime.tv_sec < refusetime) {
/* if the candidate has to repeat itself, the old code would refuse it
 * the second time.  That would prevent elections.
 */
					to.tsp_type = TSP_REFUSE;
				} else {
					cadr.s_addr = from.sin_addr.s_addr;
					to.tsp_type = TSP_ACCEPT;
					refusetime = ntime.tv_sec + 30;
				}
				taddr = from;
				strlcpy(tname, msg->tsp_name, sizeof tname);
				strlcpy(to.tsp_name, hostname,
				    sizeof to.tsp_name);
				answerdelay();
				if (!acksend(&to, &taddr, tname,
					     TSP_ACK, 0, 0))
					syslog(LOG_WARNING,
					     "no answer from candidate %s\n",
					       tname);

			} else {	/* fromnet->status == MASTER */
				htp = addmach(msg->tsp_name, &from,fromnet);
				to.tsp_type = TSP_QUIT;
				strlcpy(to.tsp_name, hostname,
				    sizeof to.tsp_name);
				if (!acksend(&to, &htp->addr, htp->name,
					     TSP_ACK, 0, htp->noanswer)) {
					syslog(LOG_ERR,
					  "no reply from %s to ELECTION-QUIT",
					       htp->name);
					(void)remmach(htp);
				}
			}
			break;

		case TSP_CONFLICT:
			if (fromnet->status != MASTER)
				break;
			/*
			 * After a network partition, there can be
			 * more than one master: the first slave to
			 * come up will notify here the situation.
			 */
			strlcpy(to.tsp_name, hostname, sizeof to.tsp_name);

			/* The other master often gets into the same state,
			 * with boring results.
			 */
			ntp = fromnet;	/* (acksend() can leave fromnet=0 */
			for (tries = 0; tries < 3; tries++) {
				to.tsp_type = TSP_RESOLVE;
				answer = acksend(&to, &ntp->dest_addr,
						 ANYADDR, TSP_MASTERACK,
						 ntp, 0);
				if (answer == NULL)
					break;
				htp = addmach(answer->tsp_name,&from,ntp);
				to.tsp_type = TSP_QUIT;
				answer = acksend(&to, &htp->addr, htp->name,
						 TSP_ACK, 0, htp->noanswer);
				if (!answer) {
					syslog(LOG_WARNING,
				  "conflict error: no reply from %s to QUIT",
						htp->name);
					(void)remmach(htp);
				}
			}
			masterup(ntp);
			break;

		case TSP_MSITE:
			if (!slavenet)
				break;
			taddr = from;
			to.tsp_type = TSP_MSITEREQ;
			to.tsp_vers = TSPVERSION;
			to.tsp_seq = 0;
			strlcpy(to.tsp_name, hostname, sizeof to.tsp_name);
			answer = acksend(&to, &slavenet->dest_addr,
					 ANYADDR, TSP_ACK,
					 slavenet, 0);
			if (answer != NULL
			    && good_host_name(answer->tsp_name)) {
				setmaster(answer);
				to.tsp_type = TSP_ACK;
				strlcpy(to.tsp_name, answer->tsp_name,
				    sizeof to.tsp_name);
				bytenetorder(&to);
				if (sendto(sock, (char *)&to,
					   sizeof(struct tsp), 0,
					   (struct sockaddr*)&taddr, sizeof(taddr)) < 0) {
					trace_sendto_err(taddr.sin_addr);
				}
			}
			break;

		case TSP_MSITEREQ:
			break;

		case TSP_ACCEPT:
		case TSP_REFUSE:
		case TSP_RESOLVE:
			break;

		case TSP_QUIT:
			doquit(msg);		/* become a slave */
			break;

		case TSP_TEST:
			electiontime = 0;
			break;

		case TSP_LOOP:
			/* looking for loops of masters */
			if (!(status & MASTER))
				break;
			if (fromnet->status == SLAVE) {
			    if (!strcmp(msg->tsp_name, hostname)) {
				/*
				 * Someone forwarded our message back to
				 * us.  There must be a loop.  Tell the
				 * master of this network to quit.
				 *
				 * The other master often gets into
				 * the same state, with boring results.
				 */
				ntp = fromnet;
				for (tries = 0; tries < 3; tries++) {
				    to.tsp_type = TSP_RESOLVE;
				    answer = acksend(&to, &ntp->dest_addr,
						     ANYADDR, TSP_MASTERACK,
						     ntp,0);
				    if (answer == NULL)
					break;
				    taddr = from;
				    strlcpy(tname, answer->tsp_name,
					sizeof tname);
				    to.tsp_type = TSP_QUIT;
				    strlcpy(to.tsp_name, hostname,
					sizeof to.tsp_name);
				    if (!acksend(&to, &taddr, tname,
						 TSP_ACK, 0, 1)) {
					syslog(LOG_ERR,
					"no reply from %s to slave LOOP-QUIT",
						 tname);
				    } else {
					electiontime = 0;
				    }
				}
				(void)gettimeofday(&ntime, 0);
				looptime = ntime.tv_sec + FASTTOUT;
			    } else {
				if (msg->tsp_hopcnt-- < 1)
				    break;
				bytenetorder(msg);
				for (ntp = nettab; ntp != 0; ntp = ntp->next) {
				    if (ntp->status == MASTER
					&& 0 > sendto(sock, (char *)msg,
						      sizeof(struct tsp), 0,
					      (struct sockaddr*)&ntp->dest_addr,
						      sizeof(ntp->dest_addr)))
				    trace_sendto_err(ntp->dest_addr.sin_addr);
				}
			    }
			} else {	/* fromnet->status == MASTER */
			    /*
			     * We should not have received this from a net
			     * we are master on.  There must be two masters,
			     * unless the packet was really from us.
			     */
			    if (from.sin_addr.s_addr
				== fromnet->my_addr.s_addr) {
				if (trace)
				    fprintf(fd,"discarding forwarded LOOP\n");
				break;
			    }

			    /*
			     * The other master often gets into the same
			     * state, with boring results.
			     */
			    ntp = fromnet;
			    for (tries = 0; tries < 3; tries++) {
				to.tsp_type = TSP_RESOLVE;
				answer = acksend(&to, &ntp->dest_addr,
						 ANYADDR, TSP_MASTERACK,
						ntp,0);
				if (!answer)
					break;
				htp = addmach(answer->tsp_name,
					      &from,ntp);
				to.tsp_type = TSP_QUIT;
				strlcpy(to.tsp_name, hostname,
				    sizeof to.tsp_name);
				if (!acksend(&to,&htp->addr,htp->name,
					     TSP_ACK, 0, htp->noanswer)) {
					syslog(LOG_ERR,
				    "no reply from %s to master LOOP-QUIT",
					       htp->name);
					(void)remmach(htp);
				}
			    }
			    (void)gettimeofday(&ntime, 0);
			    looptime = ntime.tv_sec + FASTTOUT;
			}
			break;
		default:
			if (trace) {
				fprintf(fd, "garbage message: ");
				print(msg, &from);
			}
			break;
		}
	}
	goto loop;
}


/*
 * tell the world who our master is
 */
static void
setmaster(struct tsp *msg)
{
	if (slavenet
	    && (slavenet != old_slavenet
		|| strcmp(msg->tsp_name, master_name)
		|| old_status != status)) {
		strlcpy(master_name, msg->tsp_name, sizeof master_name);
		old_slavenet = slavenet;
		old_status = status;

		if (status & MASTER) {
			syslog(LOG_NOTICE, "submaster to %s", master_name);
			if (trace)
				fprintf(fd, "submaster to %s\n", master_name);

		} else {
			syslog(LOG_NOTICE, "slave to %s", master_name);
			if (trace)
				fprintf(fd, "slave to %s\n", master_name);
		}
	}
}



/*
 * handle date change request on a slave
 */
static void
schgdate(struct tsp *msg, char *newdate)
{
	struct tsp to;
	u_short seq;
	struct sockaddr_in taddr;
	struct timeval otime;

	if (!slavenet)
		return;			/* no where to forward */

	taddr = from;
	seq = msg->tsp_seq;

	syslog(LOG_INFO,
	       "forwarding date change by %s to %s",
	       msg->tsp_name, newdate);

	/* adjust time for residence on the queue */
	(void)gettimeofday(&otime, 0);
	adj_msg_time(msg, &otime);

	to.tsp_type = TSP_SETDATEREQ;
	to.tsp_time = msg->tsp_time;
	strlcpy(to.tsp_name, hostname, sizeof to.tsp_name);
	if (!acksend(&to, &slavenet->dest_addr,
		     ANYADDR, TSP_DATEACK,
		     slavenet, 0))
		return;			/* no answer */

	xmit(TSP_DATEACK, seq, &taddr);
}


/*
 * Used before answering a broadcast message to avoid network
 * contention and likely collisions.
 */
static void
answerdelay(void)
{
	struct timeval timeout;

	timeout.tv_sec = 0;
	timeout.tv_usec = casual(1, 100 * 1000);

	(void)select(0, NULL, NULL, NULL, &timeout);
	return;
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.11 2003/08/19 19:41:21 deraadt Exp $	*/
@


1.11
log
@use poll instead of select; dhartmei ok
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.10 2003/06/26 21:36:40 deraadt Exp $	*/
a30 4

#ifndef lint
static char sccsid[] = "@@(#)slave.c	5.1 (Berkeley) 5/11/93";
#endif /* not lint */
@


1.10
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.9 2003/06/12 21:09:48 deraadt Exp $	*/
d685 1
a685 2
	(void)select(0, (fd_set *)NULL, (fd_set *)NULL, (fd_set *)NULL,
	    &timeout);
@


1.9
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.8 2003/06/02 23:36:55 millert Exp $	*/
a71 1
	int timeout();
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.7 2002/06/19 15:45:39 ericj Exp $	*/
d57 1
a57 1
slave()
@


1.7
log
@
more cleanup for timed.
use queue.h instead of these badly hand done lists
functionalize more common code
remove some unused code/declarations
use strlcpy
minor KNF

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.6 2002/06/18 00:40:31 ericj Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@
remove ifdef sgi code, and HAVENIS. sgi was pointless and this didnt even come
close to compiling w/o HAVENIS
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.5 2001/05/05 05:10:05 mickey Exp $	*/
d688 1
a688 1
	timeout.tv_usec = delay1;
@


1.5
log
@use strlcpy vs strncpy+a[len-1]='\0', some trailing spaces; millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.4 1996/11/01 06:10:42 deraadt Exp $	*/
a39 4
#ifdef sgi
#ident "$Revision: 1.4 $"
#endif

d43 2
a59 6
#ifdef sgi
extern void logwtmp(struct timeval *, struct timeval *);
#else
extern void logwtmp(char *, char *, char *);
#endif /* sgi */

a254 4
#ifdef sgi
			(void)cftime(newdate, "%D %T", &msg->tsp_time.tv_sec);
			(void)cftime(olddate, "%D %T", &otime.tv_sec);
#else
a261 1
#endif /* sgi */
a278 7
#ifdef sgi
				if (0 > settimeofday(&msg->tsp_time, 0)) {
					syslog(LOG_ERR,"settimeofdate(): %m");
					break;
				}
				logwtmp(&otime, &msg->tsp_time);
#else
a283 1
#endif /* sgi */
a341 3
#ifdef sgi
			(void)cftime(newdate, "%D %T", &msg->tsp_time.tv_sec);
#else
a343 1
#endif /* sgi */
a349 3
#ifdef sgi
			(void)cftime(newdate, "%D %T", &msg->tsp_time.tv_sec);
#else
a351 1
#endif /* sgi */
a684 3
#ifdef sgi
	sginap(delay1);
#else
a692 1
#endif /* sgi */
@


1.4
log
@40 buf oflows
@
text
@d1 1
a1 1
/*	$OpenBSD: slave.c,v 1.3 1996/07/28 06:04:10 downsj Exp $	*/
d41 1
a41 1
#ident "$Revision: 1.3 $"
d157 1
a157 3
			(void)strncpy(to.tsp_name, hostname,
			    sizeof to.tsp_name-1);
			to.tsp_name[sizeof to.tsp_name-1] = '\0';
d271 1
a271 2
			(void)strncpy(olddate, date(), sizeof olddate-1);
			olddate[sizeof olddate-1] = '\0';
d273 1
a273 2
			(void)strncpy(newdate, ctime(&tmpt), sizeof newdate-1);
			newdate[sizeof newdate-1] = '\0';
d367 1
a367 2
			(void)strncpy(newdate, ctime(&tmpt), sizeof newdate-1);
			newdate[sizeof newdate-1] = '\0';
d379 1
a379 2
			(void)strncpy(newdate, ctime(&tmpt), sizeof newdate-1);
			newdate[sizeof newdate-1] = '\0';
d433 3
a435 6
				(void)strncpy(tname, msg->tsp_name,
				    sizeof tname-1);
				tname[sizeof tname-1] = '\0';
				(void)strncpy(to.tsp_name, hostname,
				    sizeof to.tsp_name-1);
				to.tsp_name[sizeof to.tsp_name-1] = '\0';
d446 2
a447 3
				(void)strncpy(to.tsp_name, hostname,
				    sizeof to.tsp_name-1);
				to.tsp_name[sizeof to.tsp_name-1] = '\0';
d466 1
a466 3
			(void)strncpy(to.tsp_name, hostname,
			    sizeof to.tsp_name-1);
			to.tsp_name[sizeof to.tsp_name-1] = '\0';
d500 1
a500 3
			(void)strncpy(to.tsp_name, hostname,
			    sizeof to.tsp_name-1);
			to.tsp_name[sizeof to.tsp_name-1] = '\0';
d508 2
a509 3
				(void)strncpy(to.tsp_name, answer->tsp_name,
				    sizeof to.tsp_name-1);
				to.tsp_name[sizeof to.tsp_name-1] = '\0';
d558 2
a559 3
				    (void)strncpy(tname, answer->tsp_name,
					sizeof tname-1);
				    tname[sizeof tname-1] = '\0';
d561 2
a562 3
				    (void)strncpy(to.tsp_name, hostname,
					sizeof to.tsp_name-1);
				    to.tsp_name[sizeof to.tsp_name-1] = '\0';
d615 2
a616 3
				(void)strncpy(to.tsp_name, hostname,
				    sizeof to.tsp_name-1);
				to.tsp_name[sizeof to.tsp_name-1] = '\0';
d651 1
a651 3
		(void)strncpy(master_name, msg->tsp_name,
		    sizeof master_name-1);
		master_name[sizeof master_name-1] = '\0';
d697 1
a697 2
	(void)strncpy(to.tsp_name, hostname, sizeof to.tsp_name-1);
	to.tsp_name[sizeof to.tsp_name-1] = '\0';
@


1.3
log
@FreeBSD PR#1182: fix date wtmp log entries.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
#ident "$Revision: 1.2 $"
d54 1
a54 1
static char master_name[MAXHOSTNAMELEN+1];
d157 3
a159 1
			(void)strcpy(to.tsp_name, hostname);
d273 2
a274 1
			(void)strcpy(olddate, date());
d276 2
a277 1
			(void)strcpy(newdate, ctime(&tmpt));
d371 2
a372 1
			(void)strcpy(newdate, ctime(&tmpt));
d384 2
a385 1
			(void)strcpy(newdate, ctime(&tmpt));
d439 6
a444 2
				(void)strcpy(tname, msg->tsp_name);
				(void)strcpy(to.tsp_name, hostname);
d455 3
a457 1
				(void)strcpy(to.tsp_name, hostname);
d476 3
a478 1
			(void)strcpy(to.tsp_name, hostname);
d512 3
a514 1
			(void)strcpy(to.tsp_name, hostname);
d522 3
a524 1
				(void)strcpy(to.tsp_name, answer->tsp_name);
d573 3
a575 1
				    (void)strcpy(tname, answer->tsp_name);
d577 3
a579 1
				    (void)strcpy(to.tsp_name, hostname);
d632 3
a634 1
				(void)strcpy(to.tsp_name, hostname);
d669 3
a671 1
		(void)strcpy(master_name, msg->tsp_name);
d717 2
a718 1
	(void)strcpy(to.tsp_name, hostname);
@


1.2
log
@sync to netbsd 960418
@
text
@d1 2
d41 1
a41 1
#ident "$Revision: 1.1.1.2 $"
d303 1
a303 1
				logwtmp("}", "date", "");
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
#ident "$Revision: 1.5 $"
d79 1
a79 1
	struct timeval ntime, wait;
d298 3
a300 1
				(void)settimeofday(&msg->tsp_time, 0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
