head	1.15;
access;
symbols
	OPENBSD_4_9:1.14.0.6
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.4
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.13.0.26
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.22
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.20
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.18
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.16
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.14
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.12
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.10
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.8
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.07.07.21.00.59;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2009.10.27.23.59.57;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.23.21.07.38;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.12.23.44.13;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.21.36.40;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.12.21.09.48;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.36.55;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.17.00.21.19;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.19.00.32.04;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.23.03.45.51;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.07.20.02.09;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	97.08.18.03.11.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.22.03.29.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@timed's time is up.  use ntpd(8).  Even our own fossil developers
switched a while back.
ok miod, kettenis
@
text
@/*	$OpenBSD: timedc.c,v 1.14 2009/10/27 23:59:57 deraadt Exp $	*/

/*-
 * Copyright (c) 1985, 1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "timedc.h"
#include <string.h>
#include <signal.h>
#include <ctype.h>
#include <unistd.h>
#include <stdlib.h>
#include <syslog.h>

int	trace = 0;
FILE	*fd = NULL;
int	margc;
int	fromatty;
#define	MAX_MARGV 20
char	*margv[MAX_MARGV];
char	cmdline[200];

static struct cmd *getcmd(char *);
volatile sig_atomic_t gotintr;

int
main(int argc, char *argv[])
{
	extern int sock_raw, sock;
	struct sockaddr_in sin;
	struct cmd *c;

	sock_raw = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);
	if (sock_raw < 0) {
		perror("opening raw socket");
		exit(1);
	}

	openlog("timedc", LOG_ODELAY, LOG_AUTH);

	sock = socket(AF_INET, SOCK_DGRAM, 0);
	if (sock < 0) {
		perror("opening socket");
		(void)close(sock_raw);
		return (-1);
	}

	memset(&sin, 0, sizeof sin);
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;
	if (bind(sock, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
		fprintf(stderr, "all reserved ports in use\n");
		(void)close(sock_raw);
		exit(1);
	}

	if (--argc > 0) {
		c = getcmd(*++argv);
		if (c == (struct cmd *)-1) {
			printf("?Ambiguous command\n");
			exit(1);
		}
		if (c == 0) {
			printf("?Invalid command\n");
			exit(1);
		}
		if (c->c_priv && getuid()) {
			printf("?Privileged command\n");
			exit(1);
		}
		(*c->c_handler)(argc, argv);
		exit(0);
	}

	fromatty = isatty(fileno(stdin));
	(void) signal(SIGINT, sigintr);
	for (;;) {
		if (gotintr) {
			putchar('\n');
			gotintr = 0;
		}
		if (fromatty) {
			printf("timedc> ");
			(void) fflush(stdout);
		}

		siginterrupt(SIGINT, 1);
		if (fgets(cmdline, sizeof(cmdline), stdin) == NULL) {
			if (errno == EINTR && gotintr) {
				siginterrupt(SIGINT, 0);
				continue;
			}
			quit(0, NULL);
		}
		siginterrupt(SIGINT, 0);

		if (cmdline[0] == 0)
			break;
		if (makeargv()) {
			printf("?Too many arguments\n");
			continue;
		}
		if (margv[0] == 0)
			continue;
		c = getcmd(margv[0]);
		if (c == (struct cmd *)-1) {
			printf("?Ambiguous command\n");
			continue;
		}
		if (c == 0) {
			printf("?Invalid command\n");
			continue;
		}
		if (c->c_priv && getuid()) {
			printf("?Privileged command\n");
			continue;
		}
		(*c->c_handler)(margc, margv);
	}
	return 0;
}

void
sigintr(int signo)
{
	if (!fromatty)
		_exit(0);
	gotintr = 1;
}

static struct cmd *
getcmd(char *name)
{
	char *p, *q;
	struct cmd *c, *found;
	int nmatches, longest;
	extern struct cmd cmdtab[];
	extern int NCMDS;

	longest = 0;
	nmatches = 0;
	found = 0;
	for (c = cmdtab; c < &cmdtab[NCMDS]; c++) {
		p = c->c_name;
		for (q = name; *q == *p++; q++)
			if (*q == 0)		/* exact match? */
				return (c);
		if (!*q) {			/* the name was a prefix */
			if (q - name > longest) {
				longest = q - name;
				nmatches = 1;
				found = c;
			} else if (q - name == longest)
				nmatches++;
		}
	}
	if (nmatches > 1)
		return ((struct cmd *)-1);
	return (found);
}

/*
 * Slice a string up into argc/argv.
 */
int
makeargv(void)
{
	char **argp = margv;
	char *cp;

	margc = 0;
	for (cp = cmdline; margc < MAX_MARGV - 1 && *cp; ) {
		while (isspace(*cp))
			cp++;
		if (*cp == '\0')
			break;
		*argp++ = cp;
		margc += 1;
		while (*cp != '\0' && !isspace(*cp))
			cp++;
		if (*cp == '\0')
			break;
		*cp++ = '\0';
	}
	if (margc == MAX_MARGV - 1)
		return 1;
	*argp++ = 0;
	return 0;
}

#define HELPINDENT (sizeof ("directory"))

/*
 * Help command.
 */
void
help(int argc, char *argv[])
{
	extern struct cmd cmdtab[];
	struct cmd *c;

	if (argc == 1) {
		int columns, width = 0, lines;
		extern int NCMDS;
		int i, j, w;

		printf("Commands may be abbreviated.  Commands are:\n\n");
		for (c = cmdtab; c < &cmdtab[NCMDS]; c++) {
			int len = strlen(c->c_name);

			if (len > width)
				width = len;
		}
		width = (width + 8) &~ 7;
		columns = 80 / width;
		if (columns == 0)
			columns = 1;
		lines = (NCMDS + columns - 1) / columns;
		for (i = 0; i < lines; i++) {
			for (j = 0; j < columns; j++) {
				c = cmdtab + j * lines + i;
				printf("%s", c->c_name);
				if (c + lines >= &cmdtab[NCMDS]) {
					printf("\n");
					break;
				}
				w = strlen(c->c_name);
				while (w < width) {
					w = (w + 8) &~ 7;
					putchar('\t');
				}
			}
		}
		return;
	}
	while (--argc > 0) {
		char *arg;
		arg = *++argv;
		c = getcmd(arg);
		if (c == (struct cmd *)-1)
			printf("?Ambiguous help command %s\n", arg);
		else if (c == (struct cmd *)0)
			printf("?Invalid help command %s\n", arg);
		else
			printf("%-*s\t%s\n", (int)HELPINDENT,
			    c->c_name, c->c_help);
	}
}
@


1.14
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.13 2004/01/23 21:07:38 deraadt Exp $	*/
@


1.13
log
@no more suid; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.12 2003/10/12 23:44:13 deraadt Exp $	*/
a30 10

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1985, 1993 The Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)timedc.c	5.1 (Berkeley) 5/11/93";
#endif /* not lint */
@


1.12
log
@buf oflow, fixed badly in freebsd by tjr, i changed it to give a nice
warning instead of blind truncation; millert ok
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.11 2003/06/26 21:36:40 deraadt Exp $	*/
a72 3

	(void) seteuid(getuid());
	(void) setuid(getuid());
@


1.11
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.10 2003/06/12 21:09:48 deraadt Exp $	*/
d54 2
a55 1
char	*margv[20];
d137 4
a140 1
		makeargv();
d203 1
a203 1
void
d210 1
a210 1
	for (cp = cmdline; *cp;) {
d223 2
d226 1
@


1.10
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.9 2003/06/02 23:36:55 millert Exp $	*/
d130 1
a130 1
			quit();
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.8 2002/05/17 00:21:19 deraadt Exp $	*/
d158 1
a158 2
sigintr(signo)
	int signo;
d200 1
a200 1
makeargv()
d228 1
a228 3
help(argc, argv)
	int argc;
	char *argv[];
@


1.8
log
@move setuid revocation closer to the start (make it more obvious); miod ok
@
text
@d1 1
a1 1
/*	$OpenBSD: timedc.c,v 1.7 2002/03/14 16:44:25 mpech Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$Id: timedc.c,v 1.6 2002/01/19 00:32:04 mickey Exp $	*/
a45 4
#ifdef sgi
#ident "$Revision: 1.6 $"
#endif

d54 2
a55 2
int trace = 0;
FILE *fd = 0;
a61 1

d67 2
d71 9
d82 13
a94 5
	/*
	 * security dictates!
	 */
	if (priv_resources() < 0) {
		fprintf(stderr, "Could not get privileged resources\n");
a96 1
	/* privs revoked above */
d186 1
a186 1
				return(c);
d197 2
a198 2
		return((struct cmd *)-1);
	return(found);
d207 1
a208 1
	char **argp = margv;
d237 1
a238 1
	extern struct cmd cmdtab[];
a240 1
		int i, j, w;
d243 1
d284 1
a284 1
				c->c_name, c->c_help);
@


1.6
log
@do not bindresv() udp socket, for clockdiff to work w/ our inetd; millert@@ ok
@
text
@d1 1
a1 1
/*	$Id: timedc.c,v 1.5 2001/11/23 03:45:51 deraadt Exp $	*/
d47 1
a47 1
#ident "$Revision: 1.5 $"
d72 1
a72 1
	register struct cmd *c;
d160 3
a162 3
	register char *p, *q;
	register struct cmd *c, *found;
	register int nmatches, longest;
d194 2
a195 2
	register char *cp;
	register char **argp = margv;
d224 1
a224 1
	register struct cmd *c;
d228 1
a228 1
		register int i, j, w;
d262 1
a262 1
		register char *arg;
@


1.5
log
@use siginterrupt() enabling around all blocking calls, and check the flags; millert ok
@
text
@d1 1
a1 1
/*	$Id: timedc.c,v 1.4 2001/04/07 20:02:09 ho Exp $	*/
d47 1
a47 1
#ident "$Revision: 1.4 $"
d83 1
a83 4
	/* revoke privs */

	(void) seteuid(getuid());
	(void) setuid(getuid());
@


1.4
log
@$OpenBSD$ here too.
@
text
@d1 1
a1 1
/*	$Id$	*/
d47 1
a47 1
#ident "$Revision: 1.3 $"
a53 1
#include <setjmp.h>
d64 1
a64 1
jmp_buf	toplevel;
d67 2
d107 1
a107 3
	if (setjmp(toplevel))
		putchar('\n');
	(void) signal(SIGINT, intr);
d109 4
d117 7
a123 1
		if (fgets(cmdline, sizeof(cmdline), stdin) == 0)
d125 3
d152 1
a152 1
intr(signo)
d156 2
a157 2
		exit(0);
	longjmp(toplevel, 1);
a158 1

@


1.3
log
@#include <string.h> not <strings.h> -- Yes, I'm a weanie...
@
text
@d1 2
d47 1
a47 1
#ident "$Revision: 1.2 $"
@


1.2
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d45 1
a45 1
#ident "$Revision: 1.1.1.1 $"
d49 1
a49 1
#include <strings.h>
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
#ident "$Revision: 1.3 $"
d80 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
