head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2017.06.07.23.36.43;	author millert;	state Exp;
branches;
next	1.19;
commitid	7bzWueMi5eJAI4vW;

1.19
date	2016.08.30.14.08.16;	author millert;	state Exp;
branches;
next	1.18;
commitid	aAsWjBgSjNh0NzrM;

1.18
date	2015.11.15.23.24.24;	author millert;	state Exp;
branches;
next	1.17;
commitid	4K3ElIFSUCsF9sYF;

1.17
date	2015.11.09.01.12.27;	author millert;	state Exp;
branches;
next	1.16;
commitid	NbIbD3dCbvLEHSye;

1.16
date	2015.11.04.20.28.17;	author millert;	state Exp;
branches;
next	1.15;
commitid	6N0oXtYc5KM1a7DW;

1.15
date	2015.10.06.14.58.37;	author tedu;	state Exp;
branches;
next	1.14;
commitid	DORRwC1MyrO1Yl4N;

1.14
date	2015.02.09.22.35.08;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	eGq01x6bjr83TVho;

1.13
date	2015.01.23.19.07.27;	author tedu;	state Exp;
branches;
next	1.12;
commitid	YJA2vmvfLuMfGdwZ;

1.12
date	2015.01.23.18.52.31;	author tedu;	state Exp;
branches;
next	1.11;
commitid	UqtXiwMFwUuKI8O4;

1.11
date	2015.01.23.02.37.25;	author tedu;	state Exp;
branches;
next	1.10;
commitid	UGPHvhzwRtnjrF9O;

1.10
date	2015.01.23.01.01.06;	author tedu;	state Exp;
branches;
next	1.9;
commitid	kzBIhYnXdVeOLxgw;

1.9
date	2015.01.22.22.38.55;	author tedu;	state Exp;
branches;
next	1.8;
commitid	F47ioXLOlSmeY3jW;

1.8
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.17.22.11.55;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.20.20.38.08;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.11.20.15.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.08.18.11.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.18.19.48.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.11.01.23.27.39;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@In cron(8), require that crontab and at files in the spool be owned
by group crontab.  The at(1) command now creates files owned by
group crontab, the crontab(1) command already does this.

Files in the crontab spool with parse errors are now ignored;
crontab(1) will not install a crontab file with parse errors.
The system crontab file (/etc/crontab) is not affected by this.

The required permissions on crontab files have been tightened.
Files in the cron spool must be mode 0600 (as created by crontab(1)).
The system crontab file may be readable/writable by the owner,
readable by group and readable by other.  The system crontab must
be readable by the owner.
@
text
@/*	$OpenBSD: user.c,v 1.19 2016/08/30 14:08:16 millert Exp $	*/

/* Copyright 1988,1990,1993,1994 by Paul Vixie
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1997,2000 by Internet Software Consortium, Inc.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <bitstring.h>		/* for structs.h */
#include <ctype.h>
#include <errno.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>		/* for structs.h */

#include "macros.h"
#include "structs.h"
#include "funcs.h"
#include "globals.h"

void
free_user(user *u)
{
	entry *e;

	while ((e = SLIST_FIRST(&u->crontab))) {
		SLIST_REMOVE_HEAD(&u->crontab, entries);
		free_entry(e);
	}
	free(u->name);
	free(u);
}

static int ParseErrorCount;
static const char *CrontabFilename;

static void
parse_error(const char *msg)
{
	ParseErrorCount++;
	syslog(LOG_ERR, "(CRON) %s:%d (%s)", CrontabFilename, LineNumber, msg);
}

user *
load_user(int crontab_fd, struct passwd	*pw, const char *name)
{
	char envstr[MAX_ENVSTR];
	FILE *file;
	user *u;
	entry *e;
	int status, save_errno;
	char **envp = NULL, **tenvp;

	if (!(file = fdopen(crontab_fd, "r"))) {
		syslog(LOG_ERR, "(%s) FDOPEN (%m)", name);
		return (NULL);
	}
	CrontabFilename = name;
	LineNumber = 0;

	/* file is open.  build user entry, then read the crontab file.
	 */
	if ((u = malloc(sizeof(user))) == NULL)
		goto done;
	if ((u->name = strdup(name)) == NULL) {
		save_errno = errno;
		free(u);
		u = NULL;
		errno = save_errno;
		goto done;
	}
	SLIST_INIT(&u->crontab);

	/* init environment.  this will be copied/augmented for each entry.
	 */
	if ((envp = env_init()) == NULL) {
		save_errno = errno;
		free_user(u);
		u = NULL;
		errno = save_errno;
		goto done;
	}

	/* load the crontab
	 */
	ParseErrorCount = 0;
	while ((status = load_env(envstr, file)) >= 0) {
		switch (status) {
		case FALSE:
			/* Not an env variable, parse as crontab entry. */
			e = load_entry(file, parse_error, pw, envp);
			if (e == NULL) {
				/* Parse error, ignore for non-root entries */
				if (pw != NULL) {
					save_errno = errno;
					free_user(u);
					u = NULL;
					errno = save_errno;
					goto done;
				}
			} else {
				SLIST_INSERT_HEAD(&u->crontab, e, entries);
			}
			break;
		case TRUE:
			if ((tenvp = env_set(envp, envstr)) == NULL) {
				save_errno = errno;
				free_user(u);
				u = NULL;
				errno = save_errno;
				goto done;
			}
			envp = tenvp;
			break;
		}
	}

 done:
	if (envp != NULL)
		env_free(envp);
	fclose(file);
	return (u);
}
@


1.19
log
@Fix fd leak on error.  OK jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.18 2015/11/15 23:24:24 millert Exp $	*/
d35 1
d50 10
d71 1
a71 1
		syslog(LOG_ERR, "(%s) FDOPEN (%m)", pw->pw_name);
d74 2
d102 1
d107 11
a117 2
			e = load_entry(file, NULL, pw, envp);
			if (e)
d119 1
@


1.18
log
@Clean up the remaining uses of stderr and perror() and use warn/err
and/or syslog depending on whether stderr is hooked up at the time.
Also remove closelog() which is not needed since we are headed for exec.
OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.17 2015/11/09 01:12:27 millert Exp $	*/
d57 1
a57 1
	char **envp, **tenvp;
d67 1
a67 1
		return (NULL);
d71 1
d73 1
a73 1
		return (NULL);
d81 2
a82 2
		free(u->name);
		free(u);
d84 1
a84 1
		return (NULL);
d111 2
a112 1
	env_free(envp);
@


1.17
log
@queue(3) instead of homegrown queues and lists.  This also fixes
some potential memory leaks in error paths.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.16 2015/11/04 20:28:17 millert Exp $	*/
d25 1
d29 1
d60 1
a60 1
		perror("fdopen on crontab_fd in load_user");
@


1.16
log
@Change cron from including all headers in every file to only including
what each .c file needs.  I have not removed cron.h since it will
be used in a future clean up of the cron's .h files.  OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.15 2015/10/06 14:58:37 tedu Exp $	*/
d37 1
a37 1
	entry *e, *ne;
d39 2
a40 3
	free(u->name);
	for (e = u->crontab;  e != NULL;  e = ne) {
		ne = e->next;
d43 1
d72 1
a72 1
	u->crontab = NULL;
d89 1
d91 2
a92 4
			if (e) {
				e->next = u->crontab;
				u->crontab = e;
			}
@


1.15
log
@clear out some more legacy code and whatnot
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.14 2015/02/09 22:35:08 deraadt Exp $	*/
d20 13
a32 1
#include "cron.h"
@


1.14
log
@correct copyright, upon approval from paul vixie via todd miller.  the
head copyright assertion was seperated from the remaining ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.13 2015/01/23 19:07:27 tedu Exp $	*/
a17 3
 */

/* vix 26jan87 [log is in RCS file]
@


1.13
log
@braces to open a function go on their own line like god intended
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.12 2015/01/23 18:52:31 tedu Exp $	*/
a3 4
 * All rights reserved
 */

/*
@


1.12
log
@delete some code that doesn't (and shouldn't) run. ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.11 2015/01/23 02:37:25 tedu Exp $	*/
d30 2
a31 1
free_user(user *u) {
d43 2
a44 1
load_user(int crontab_fd, struct passwd	*pw, const char *name) {
@


1.11
log
@Remove the OK and ERR macros. They obfuscate the code and don't
help legibility. (unix system calls use 0 for ok, but hundreds of
other projects use 1 to indicate success.) Despite the name, many
system calls (e.g., open) also return not OK values for success.
It also cleans up some weird code like int crontab_fd = OK - 1;
This diff is mechanical in nature. Later I will fix the bugs it reveals.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.10 2015/01/23 01:01:06 tedu Exp $	*/
a80 4
		case -1:
			free_user(u);
			u = NULL;
			goto done;
@


1.10
log
@remove debug code.
I think the level of debug code in cron is excessive for a program
that has reached feature complete. If cron needs to provide more
information to the user about its operational status, I think syslog
would be more appropriate. (The debug flags also disable forking
into the background, so they aren't even that useful for debugging a
live system.)
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.9 2015/01/22 22:38:55 tedu Exp $	*/
d79 1
a79 1
	while ((status = load_env(envstr, file)) >= OK) {
d81 1
a81 1
		case ERR:
@


1.9
log
@delete useless casts. ok deraadt guenther millert
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.8 2009/10/27 23:59:51 deraadt Exp $	*/
a54 2
	Debug(DPARS, ("load_user()\n"))

a107 1
	Debug(DPARS, ("...load_user() done\n"))
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.7 2004/06/17 22:11:55 millert Exp $	*/
d59 1
a59 1
	if ((u = (user *) malloc(sizeof(user))) == NULL)
@


1.7
log
@UUpdate ISC copyright year to 2004
Remove unused macros Skip_Line and MkLower
Remove trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.6 2003/02/20 20:38:08 millert Exp $	*/
a22 4

#if !defined(lint) && !defined(LINT)
static const char rcsid[] = "$OpenBSD: user.c,v 1.6 2003/02/20 20:38:08 millert Exp $";
#endif
@


1.6
log
@Sync with ISC cron-current + my at(1) integration.
The at(1) code is now more tightly integrated into the cron codebase.
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.5 2002/07/11 20:15:40 millert Exp $	*/
d8 1
d15 7
a21 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
d25 1
a25 1
static const char rcsid[] = "$OpenBSD: user.c,v 1.5 2002/07/11 20:15:40 millert Exp $";
@


1.5
log
@More syncing with my cron 4.0 patch tree, basically cosmetic:
o change an instance of e_none to e_memory that I missed (forgot?)
o kill some whitespace
o modify malloc failure recovery a bit
@
text
@d1 2
a2 1
/*	$OpenBSD: user.c,v 1.4 2002/07/08 18:11:02 millert Exp $	*/
d25 1
a25 1
static const char rcsid[] = "$OpenBSD: user.c,v 1.4 2002/07/08 18:11:02 millert Exp $";
@


1.4
log
@Merge in some changes from Paul Vixie's tree; most are cosmetic
o ANSI function headers
o return (foo) not return foo
o add -oi to sendmail flags
o update email address in man pages
o make some strings const
o completely remove globbing cruft from popen.c
o whitespace changes
o add DOW_STAR to flags for "monthly", "weekly", and "daily" cron entries
@
text
@d1 1
a1 1
/*	$OpenBSD: user.c,v 1.3 2001/02/18 19:48:36 millert Exp $	*/
d24 1
a24 1
static const char rcsid[] = "$OpenBSD: user.c,v 1.3 2001/02/18 19:48:36 millert Exp $";
d98 1
a98 3
			if ((tenvp = env_set(envp, envstr))) {
				envp = tenvp;
			} else {
d105 1
@


1.3
log
@Update to ISC cron 4.0b1 + our patches.  This is now under a BSD license.
I also fixed the signal handlers while I was at it.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: user.c,v 1.3 2000/01/02 20:53:44 vixie Exp $";
@


1.2
log
@Check malloc/strdup ret val and deal.
@
text
@d1 1
d4 4
d9 3
a11 8
 * Distribute freely, except: don't remove my name from the source or
 * documentation (don't take credit for my work), mark your changes (don't
 * get me blamed for your possible bugs), don't alter or remove this
 * notice.  May be sold if buildable source is provided to buyer.  No
 * warrantee of any kind, express or implied, is included with this
 * software; use at your own risk, responsibility for damages (if any) to
 * anyone resulting from the use of this software rests entirely with the
 * user.
d13 8
a20 3
 * Send bug reports, bug fixes, enhancements, requests, flames, etc., and
 * I'll try to keep a version up to date.  I can be reached as follows:
 * Paul Vixie          <paul@@vix.com>          uunet!decwrl!vixie!paul
d24 1
a24 1
static char rcsid[] = "$Id: user.c,v 1.1.1.1 1995/10/18 08:47:31 deraadt Exp $";
a29 1

a31 1

d33 2
a34 4
free_user(u)
	user	*u;
{
	entry	*e, *ne;
a43 1

d45 7
a51 11
load_user(crontab_fd, pw, name)
	int		crontab_fd;
	struct passwd	*pw;		/* NULL implies syscrontab */
	char		*name;
{
	char	envstr[MAX_ENVSTR];
	FILE	*file;
	user	*u;
	entry	*e;
	int	status;
	char	**envp, **tenvp;
d55 1
a55 1
		return NULL;
d62 2
a63 4
	if ((u = (user *) malloc(sizeof(user))) == NULL) {
		errno = ENOMEM;
		return NULL;
	}
d65 1
d67 2
a68 2
		errno = ENOMEM;
		return NULL;
d72 1
a72 2
	/* 
	 * init environment.  this will be copied/augmented for each entry.
d75 1
d78 2
a79 1
		return NULL;
d82 1
a82 2
	/*
	 * load the crontab
d101 1
d104 1
d115 1
a115 1
	return u;
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Id: user.c,v 1.1.1.4 1994/01/20 02:47:34 jtc Exp $";
d55 1
a55 1
	char	**envp;
d66 9
a74 2
	u = (user *) malloc(sizeof(user));
	u->name = strdup(name);
d80 5
a84 1
	envp = env_init();
d103 7
a109 1
			envp = env_set(envp, envstr);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
