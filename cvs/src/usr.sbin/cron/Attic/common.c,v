head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2015.11.12.21.12.05;	author millert;	state dead;
branches;
next	1.5;
commitid	6PlWoK7FsQNDGZmn;

1.5
date	2015.11.12.13.42.42;	author millert;	state Exp;
branches;
next	1.4;
commitid	AAqNUppFHDG90rxe;

1.4
date	2015.11.11.17.02.22;	author millert;	state Exp;
branches;
next	1.3;
commitid	hWrNW0D5RHWud1Au;

1.3
date	2015.11.09.15.57.39;	author millert;	state Exp;
branches;
next	1.2;
commitid	JJzvBekc1nrVHuHQ;

1.2
date	2015.11.04.20.28.17;	author millert;	state Exp;
branches;
next	1.1;
commitid	6N0oXtYc5KM1a7DW;

1.1
date	2015.10.31.12.19.41;	author millert;	state Exp;
branches;
next	;
commitid	AJsPrwJ9fd3llOTq;


desc
@@


1.6
log
@Use absolute paths in pathnames.h.  There is no longer a need to
chdir(2) to the cron dir and cron(8) now changes to / via daemon(3).
We no longer try to create/chmod the spool directories as they
should be set correctly at install time.  The setegid(crontab)
has been moved to open_socket() so it is closer to the chmod(2)
call that needs it.  OK deraadt@@ tedu@@
@
text
@/*	$OpenBSD: common.c,v 1.5 2015/11/12 13:42:42 millert Exp $	*/

/* Copyright 1988,1990,1993,1994 by Paul Vixie
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1997,2000 by Internet Software Consortium, Inc.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <bitstring.h>		/* for structs.h */
#include <errno.h>
#include <grp.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "config.h"
#include "pathnames.h"
#include "macros.h"
#include "structs.h"
#include "funcs.h"
#include "globals.h"

void
set_cron_cwd(void)
{
	struct stat sb;
	struct group *grp = NULL;

	grp = getgrnam(CRON_GROUP);
	/* first check for CRONDIR ("/var/cron" or some such)
	 */
	if (stat(CRONDIR, &sb) < 0 && errno == ENOENT) {
		perror(CRONDIR);
		if (0 == mkdir(CRONDIR, 0710)) {
			fprintf(stderr, "%s: created\n", CRONDIR);
			stat(CRONDIR, &sb);
		} else {
			fprintf(stderr, "%s: ", CRONDIR);
			perror("mkdir");
			exit(EXIT_FAILURE);
		}
	}
	if (!S_ISDIR(sb.st_mode)) {
		fprintf(stderr, "'%s' is not a directory, bailing out.\n",
			CRONDIR);
		exit(EXIT_FAILURE);
	}
	if (chdir(CRONDIR) < 0) {
		fprintf(stderr, "cannot chdir(%s), bailing out.\n", CRONDIR);
		perror(CRONDIR);
		exit(EXIT_FAILURE);
	}

	/* CRONDIR okay (now==CWD), now look at CRON_SPOOL ("tabs" or some such)
	 */
	if (stat(CRON_SPOOL, &sb) < 0 && errno == ENOENT) {
		perror(CRON_SPOOL);
		if (0 == mkdir(CRON_SPOOL, 0700)) {
			fprintf(stderr, "%s: created\n", CRON_SPOOL);
			stat(CRON_SPOOL, &sb);
		} else {
			fprintf(stderr, "%s: ", CRON_SPOOL);
			perror("mkdir");
			exit(EXIT_FAILURE);
		}
	}
	if (!S_ISDIR(sb.st_mode)) {
		fprintf(stderr, "'%s' is not a directory, bailing out.\n",
			CRON_SPOOL);
		exit(EXIT_FAILURE);
	}
	if (grp != NULL) {
		if (sb.st_gid != grp->gr_gid)
			chown(CRON_SPOOL, -1, grp->gr_gid);
		if ((sb.st_mode & ALLPERMS) != 01730)
			chmod(CRON_SPOOL, 01730);
	}

	/* finally, look at AT_SPOOL ("atjobs" or some such)
	 */
	if (stat(AT_SPOOL, &sb) < 0 && errno == ENOENT) {
		perror(AT_SPOOL);
		if (0 == mkdir(AT_SPOOL, 0700)) {
			fprintf(stderr, "%s: created\n", AT_SPOOL);
			stat(AT_SPOOL, &sb);
		} else {
			fprintf(stderr, "%s: ", AT_SPOOL);
			perror("mkdir");
			exit(EXIT_FAILURE);
		}
	}
	if (!S_ISDIR(sb.st_mode)) {
		fprintf(stderr, "'%s' is not a directory, bailing out.\n",
			AT_SPOOL);
		exit(EXIT_FAILURE);
	}
	if (grp != NULL) {
		setegid(grp->gr_gid);
		if (sb.st_gid != grp->gr_gid)
			chown(AT_SPOOL, -1, grp->gr_gid);
		if ((sb.st_mode & ALLPERMS) != 01770)
			chmod(AT_SPOOL, 01770);
	}
}

int
strtot(const char *nptr, char **endptr, time_t *tp)
{
	long long ll;

	errno = 0;
	ll = strtoll(nptr, endptr, 10);
	if (*endptr == nptr)
		return (-1);
	if (ll < 0 || (errno == ERANGE && ll == LLONG_MAX) || (time_t)ll != ll)
		return (-1);
	*tp = (time_t)ll;
	return (0);
}
@


1.5
log
@Move cron socket to /var/run/cron.sock.  Client code will try the old
location if the new one doesn't exist for now.  In order to allow
the fchown() to succeed, cron now sets its effective gid to crontab.
OK jca@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.4 2015/11/11 17:02:22 millert Exp $	*/
@


1.4
log
@Fix spool dir mode check to avoid extraneous chmod() calls.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.3 2015/11/09 15:57:39 millert Exp $	*/
d115 1
@


1.3
log
@Rename AT_DIR -> AT_SPOOL and SPOOL_DIR -> CRON_SPOOL to improve
readability.
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.2 2015/11/04 20:28:17 millert Exp $	*/
d92 1
a92 1
		if (sb.st_mode != 01730)
d117 1
a117 1
		if (sb.st_mode != 01770)
@


1.2
log
@Change cron from including all headers in every file to only including
what each .c file needs.  I have not removed cron.h since it will
be used in a future clean up of the cron's .h files.  OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: common.c,v 1.1 2015/10/31 12:19:41 millert Exp $	*/
d71 1
a71 1
	/* CRONDIR okay (now==CWD), now look at SPOOL_DIR ("tabs" or some such)
d73 5
a77 5
	if (stat(SPOOL_DIR, &sb) < 0 && errno == ENOENT) {
		perror(SPOOL_DIR);
		if (0 == mkdir(SPOOL_DIR, 0700)) {
			fprintf(stderr, "%s: created\n", SPOOL_DIR);
			stat(SPOOL_DIR, &sb);
d79 1
a79 1
			fprintf(stderr, "%s: ", SPOOL_DIR);
d86 1
a86 1
			SPOOL_DIR);
d91 1
a91 1
			chown(SPOOL_DIR, -1, grp->gr_gid);
d93 1
a93 1
			chmod(SPOOL_DIR, 01730);
d96 1
a96 1
	/* finally, look at AT_DIR ("atjobs" or some such)
d98 5
a102 5
	if (stat(AT_DIR, &sb) < 0 && errno == ENOENT) {
		perror(AT_DIR);
		if (0 == mkdir(AT_DIR, 0700)) {
			fprintf(stderr, "%s: created\n", AT_DIR);
			stat(AT_DIR, &sb);
d104 1
a104 1
			fprintf(stderr, "%s: ", AT_DIR);
d111 1
a111 1
			AT_DIR);
d116 1
a116 1
			chown(AT_DIR, -1, grp->gr_gid);
d118 1
a118 1
			chmod(AT_DIR, 01770);
@


1.1
log
@Split client-only (at, crontab) functions out of misc.c and into
client.c.  Move truly common functions into common.c.  This avoids
dead code in the at and crontab commands.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.63 2015/10/29 22:41:27 millert Exp $	*/
d20 19
a38 1
#include "cron.h"
@

