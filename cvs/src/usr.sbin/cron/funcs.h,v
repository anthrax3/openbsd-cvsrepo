head	1.28;
access;
symbols
	OPENBSD_6_1:1.28.0.6
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.22
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.20
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.18
	OPENBSD_5_0:1.14.0.16
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.14
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.12
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.8
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.12
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2;
locks; strict;
comment	@ * @;


1.28
date	2015.11.14.13.09.14;	author millert;	state Exp;
branches;
next	1.27;
commitid	KNISMJYcyEJqWs74;

1.27
date	2015.11.12.21.12.05;	author millert;	state Exp;
branches;
next	1.26;
commitid	6PlWoK7FsQNDGZmn;

1.26
date	2015.11.09.16.37.07;	author millert;	state Exp;
branches;
next	1.25;
commitid	ZJUG9DwHA5l6WcX2;

1.25
date	2015.11.09.01.12.27;	author millert;	state Exp;
branches;
next	1.24;
commitid	NbIbD3dCbvLEHSye;

1.24
date	2015.11.04.12.53.05;	author millert;	state Exp;
branches;
next	1.23;
commitid	2QMTGnuouMIAKrAq;

1.23
date	2015.10.31.12.14.16;	author millert;	state Exp;
branches;
next	1.22;
commitid	mULiWxUknwzu04t4;

1.22
date	2015.10.31.12.13.01;	author millert;	state Exp;
branches;
next	1.21;
commitid	tLnu94klbVSaYhr3;

1.21
date	2015.10.29.22.41.27;	author millert;	state Exp;
branches;
next	1.20;
commitid	XUZIZeIqHdm2HbHG;

1.20
date	2015.10.29.21.19.09;	author millert;	state Exp;
branches;
next	1.19;
commitid	djZhV8XSdvavOBvh;

1.19
date	2015.10.06.14.58.37;	author tedu;	state Exp;
branches;
next	1.18;
commitid	DORRwC1MyrO1Yl4N;

1.18
date	2015.10.03.19.47.21;	author tedu;	state Exp;
branches;
next	1.17;
commitid	34TKQiezOQXb6h1Y;

1.17
date	2015.08.25.20.09.27;	author millert;	state Exp;
branches;
next	1.16;
commitid	SFdjIC9WT8rSna3R;

1.16
date	2015.01.23.01.01.06;	author tedu;	state Exp;
branches;
next	1.15;
commitid	kzBIhYnXdVeOLxgw;

1.15
date	2013.04.17.15.58.45;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2008.01.05.16.59.06;	author chl;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.30.20.44.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.17.22.11.55;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.00.13.38;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.20.20.38.08;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.20.19.12.16;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.15.19.13.29;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.08.18.11.02;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.09.22.15.18;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.09.21.22.01;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.20.02.03.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.19.14.33.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.18.19.48.35;	author millert;	state Exp;
branches;
next	;


desc
@@


1.28
log
@Remove log_it() and call syslog(3) directly using the same format:
"(username) WHAT (details)".  Logs due to normal operation (e.g.
crontab operations or running commands) are logged at LOG_INFO like
before.  Actual errors are logged at LOG_ERR, less important things
are logged at LOG_WARNING OR LOG_NOTICE.  Also ignore SIGHUP now
that there is no log file to reopen.
@
text
@/*	$OpenBSD: funcs.h,v 1.27 2015/11/12 21:12:05 millert Exp $	*/

/*
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1997,2000 by Internet Software Consortium, Inc.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* Notes:
 *	This file has to be included by cron.h after data structure defs.
 *	We should reorg this into sections by module.
 */

void		load_database(cron_db **),
		job_add(entry *, user *),
		do_command(entry *, user *),
		free_user(user *),
		env_free(char **),
		unget_char(int, FILE *),
		free_entry(entry *),
		skip_comments(FILE *),
		poke_daemon(unsigned char),
		atrun(at_db *, double, time_t);

int		job_runqueue(void),
		get_char(FILE *),
		get_string(char *, int, FILE *, char *),
		load_env(char *, FILE *),
		cron_pclose(FILE *, pid_t),
		allowed(const char *, const char *, const char *),
		safe_p(const char *, const char *),
		scan_atjobs(at_db **, struct timespec *);

char		*env_get(char *, char **),
		*first_word(char *, char *),
		**env_init(void),
		**env_copy(char **),
		**env_set(char **, char *);

user		*load_user(int, struct passwd *, const char *),
		*find_user(cron_db *, const char *);

entry		*load_entry(FILE *,
		    void (*)(const char *), struct passwd *, char **);

FILE		*cron_popen(char *, char *, struct passwd *, pid_t *);
@


1.27
log
@Use absolute paths in pathnames.h.  There is no longer a need to
chdir(2) to the cron dir and cron(8) now changes to / via daemon(3).
We no longer try to create/chmod the spool directories as they
should be set correctly at install time.  The setegid(crontab)
has been moved to open_socket() so it is closer to the chmod(2)
call that needs it.  OK deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.26 2015/11/09 16:37:07 millert Exp $	*/
a32 2
		log_it(const char *, const char *, const char *),
		log_close(void),
@


1.26
log
@Remove unused xpid argument to log_it().
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.25 2015/11/09 01:12:27 millert Exp $	*/
d25 1
a25 2
void		set_cron_cwd(void),
		load_database(cron_db **),
d35 1
a35 1
		poke_daemon(const char *, unsigned char),
a45 2

int		strtot(const char *nptr, char **endptr, time_t *tp);
@


1.25
log
@queue(3) instead of homegrown queues and lists.  This also fixes
some potential memory leaks in error paths.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.24 2015/11/04 12:53:05 millert Exp $	*/
d34 1
a34 1
		log_it(const char *, int, const char *, const char *),
@


1.24
log
@Change some globals from extern to static when they are not used
outside their respective .c files.  Also remove some unused defines.
OK jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.23 2015/10/31 12:14:16 millert Exp $	*/
d26 1
a26 1
		load_database(cron_db *),
a28 2
		link_user(cron_db *, user *),
		unlink_user(cron_db *, user *),
d46 1
a46 1
		scan_atjobs(at_db *, struct timespec *);
@


1.23
log
@open_socket() is only used by cron proper so move to cron.c
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.22 2015/10/31 12:13:01 millert Exp $	*/
d25 1
a25 2
void		set_cron_uid(void),
		set_cron_cwd(void),
a26 2
		open_logfile(void),
		sigpipe_func(void),
a34 1
		acquire_daemonlock(int),
a45 1
		glue_strings(char *, size_t, const char *, const char *, char),
a52 1
		*arpadate(time_t *),
a64 1

@


1.22
log
@swap_gids and swap_gids_back are only used by crontab.c so
move them there.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.21 2015/10/29 22:41:27 millert Exp $	*/
a51 1
		open_socket(void),
@


1.21
log
@Use stravis(3) instead of a homegrown vis-like function.
OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.20 2015/10/29 21:19:09 millert Exp $	*/
a47 2
		swap_gids(void),
		swap_gids_back(void),
@


1.20
log
@Convert env_get() into env_find() similar to __findenv() in libc.
Use env_find() in both env_get() and env_set() to find a var in envp.
Remove now-unused strcmp_until() function.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.19 2015/10/06 14:58:37 tedu Exp $	*/
a61 1
		*mkprints(unsigned char *, unsigned int),
a65 2

void		mkprint(char *, unsigned char *, int);
@


1.19
log
@clear out some more legacy code and whatnot
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.18 2015/10/03 19:47:21 tedu Exp $	*/
a52 1
		strcmp_until(const char *, const char *, char),
@


1.18
log
@There is no need to keep a global array of sysconf(_SC_OPEN_MAX) elements
just to keep track of a single pid. Return it to the caller and make it
their problem.
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.17 2015/08/25 20:09:27 millert Exp $	*/
a78 3
#ifndef HAVE_TM_GMTOFF
long		get_gmtoff(time_t *, struct tm *);
#endif
@


1.17
log
@Use ppoll(2) instead of poll(2).  This has two benefits.  Firstly,
we can use struct timespec throughout and avoid any conversion
issues which might cause jobs to fire prematurely.  Secondly, it
eliminates a race condition that could delay us taking action on
SIGCHLD and SIGHUP.  OK deraadt@@ okan@@ ratchov@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.16 2015/01/23 01:01:06 tedu Exp $	*/
d51 1
a51 1
		cron_pclose(FILE *),
d77 1
a77 1
FILE		*cron_popen(char *, char *, struct passwd *);
@


1.16
log
@remove debug code.
I think the level of debug code in cron is excessive for a program
that has reached feature complete. If cron needs to provide more
information to the user about its operational status, I think syslog
would be more appropriate. (The debug flags also disable forking
into the background, so they aren't even that useful for debugging a
live system.)
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.15 2013/04/17 15:58:45 deraadt Exp $	*/
d57 1
a57 1
		scan_atjobs(at_db *, struct timeval *);
@


1.15
log
@Adapt cron and at for future large time_t and tv_sec types.  These were some
of the harder programs to adapt, so let me know if problems happen.
tested by guenther, gilles, chl, others
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.14 2008/01/05 16:59:06 chl Exp $	*/
a45 1
		set_debug_flags(const char *),
@


1.14
log
@remove unused function

from tobias@@

ok mglocker@@ tobias@@
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.13 2005/01/30 20:44:50 millert Exp $	*/
d59 2
@


1.13
log
@fix some whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.12 2004/06/17 22:11:55 millert Exp $	*/
a55 1
		strdtb(char *),
@


1.12
log
@UUpdate ISC copyright year to 2004
Remove unused macros Skip_Line and MkLower
Remove trailing whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.11 2003/06/26 00:13:38 deraadt Exp $	*/
d74 2
a75 1
entry		*load_entry(FILE *, void (*)(const char *), struct passwd *, char **);
@


1.11
log
@two missing protos
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.10 2003/02/20 20:38:08 millert Exp $	*/
d4 1
d11 7
a17 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
@


1.10
log
@Sync with ISC cron-current + my at(1) integration.
The at(1) code is now more tightly integrated into the cron codebase.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.9 2003/02/20 19:12:16 millert Exp $	*/
d69 2
d74 1
a74 1
entry		*load_entry(FILE *, void (*)(), struct passwd *, char **);
@


1.9
log
@If there is no cron.allow or cron.deny file, only the superuser may run
the crontab command; for POSIX compliance.  Create an empty cron.deny
file to allow any user to run crontab:
    install -c -o root -g crontab -m 660 /dev/null /var/cron/cron.deny
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.8 2002/07/15 19:13:29 millert Exp $	*/
d42 1
@


1.8
log
@Move atrun(8) functionality into cron(8) proper.  This fixes the
long-standing annoyance that atrun's granularity is 10 minutes.
Most at jobs run with a 1 minute granularity.  Jobs submitted via
"at now" or "batch" will run immediately.  Includes a rewritten
cron(8) man page.  at(1) will be integrated more closely into
cron at a future date.

Upgrading notes:
    the atrun job in root's crontab should be removed.
    the /var/at/spool directory is no longer used
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.7 2002/07/08 18:11:02 millert Exp $	*/
d54 1
a54 1
		allowed(const char *),
@


1.7
log
@Merge in some changes from Paul Vixie's tree; most are cosmetic
o ANSI function headers
o return (foo) not return foo
o add -oi to sendmail flags
o update email address in man pages
o make some strings const
o completely remove globbing cruft from popen.c
o whitespace changes
o add DOW_STAR to flags for "monthly", "weekly", and "daily" cron entries
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.6 2002/05/09 22:15:18 millert Exp $	*/
d41 2
a42 1
		log_close(void);
d56 3
a58 1
		open_socket(void);
d73 1
a73 1
FILE		*cron_popen(char *, char *, entry *);
@


1.6
log
@prototype open_socket()
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.5 2002/05/09 21:22:01 millert Exp $	*/
d44 1
a44 1
		set_debug_flags(char *),
d51 3
a53 3
		glue_strings(char *, int, char *, char *, int),
		strcmp_until(const char *, const char *, int),
		allowed(char *),
d68 1
a68 2
entry		*load_entry(FILE *, void (*)(),
				 struct passwd *, char **);
@


1.5
log
@crontab is no longer setuid root, it is now setgid crontab.
These changes were modelled after the Owl version of vixie-cron,
but developed independently.

Our crontab used to send cron SIGUSR1 to tell cron to reread the
spool dir.  Now that crontab is not setuid root this doesn't work.
Instead, crontab pokes cron via a Unix domain socket located in the
tabs dir.

Please note, after these changes, the owner on user crontab files
will have to be changed manually from root to the uid of the
corresponding user for crontab to be usable.  cron itself will accept
tab files owned by either root or the user.
Also, any /var/cron/{allow,deny} files must be readable by group crontab.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.4 2002/02/16 21:28:01 millert Exp $	*/
d54 2
a55 1
		strdtb(char *);
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.3 2001/02/20 02:03:19 millert Exp $	*/
d47 2
a48 2
		swap_uids(void),
		swap_uids_back(void),
@


1.3
log
@Turn get_gmtoff into a macro for OSes with tm_gmtoff (like OpenBSD).
Save the GMT offset in a global so cron_sleep can use it.  This means
the offset can only change in set_time() which is really what we want.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.2 2001/02/19 14:33:32 millert Exp $	*/
d48 1
a48 1
		swap_uids_back __P((void)),
@


1.2
log
@Normalize the time in minutes to GMT so we can really catch DST changes
(since time() does not change during a DST switch).  This makes cron
correctly detect DST changes.  It does not fix the problem of wildcard
jobs running multiple times.  Also, don't rely on tm_gmtoff since that
is non-standard (but use it when we have it).
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.1 2001/02/18 19:48:35 millert Exp $	*/
d72 3
a74 1
long		get_gmtoff(time_t *clock);
@


1.1
log
@Update to ISC cron 4.0b1 + our patches.  This is now under a BSD license.
I also fixed the signal handlers while I was at it.
@
text
@d1 1
a1 1
/*	$OpenBSD: funcs.h,v 1.2 2000/01/02 20:53:42 vixie Exp $	*/
d71 2
@

