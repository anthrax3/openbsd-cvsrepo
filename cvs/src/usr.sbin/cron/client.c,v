head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8;
locks; strict;
comment	@ * @;


1.8
date	2015.11.12.21.12.05;	author millert;	state Exp;
branches;
next	1.7;
commitid	6PlWoK7FsQNDGZmn;

1.7
date	2015.11.12.13.42.42;	author millert;	state Exp;
branches;
next	1.6;
commitid	AAqNUppFHDG90rxe;

1.6
date	2015.11.11.17.05.23;	author millert;	state Exp;
branches;
next	1.5;
commitid	vFjiQK3nLy2vukgg;

1.5
date	2015.11.09.15.57.39;	author millert;	state Exp;
branches;
next	1.4;
commitid	JJzvBekc1nrVHuHQ;

1.4
date	2015.11.06.23.47.42;	author millert;	state Exp;
branches;
next	1.3;
commitid	8eaJrEU7qiymGijK;

1.3
date	2015.11.04.20.28.17;	author millert;	state Exp;
branches;
next	1.2;
commitid	6N0oXtYc5KM1a7DW;

1.2
date	2015.11.03.04.16.36;	author guenther;	state Exp;
branches;
next	1.1;
commitid	OeYOTN99WOMqulqo;

1.1
date	2015.10.31.12.19.41;	author millert;	state Exp;
branches;
next	;
commitid	AJsPrwJ9fd3llOTq;


desc
@@


1.8
log
@Use absolute paths in pathnames.h.  There is no longer a need to
chdir(2) to the cron dir and cron(8) now changes to / via daemon(3).
We no longer try to create/chmod the spool directories as they
should be set correctly at install time.  The setegid(crontab)
has been moved to open_socket() so it is closer to the chmod(2)
call that needs it.  OK deraadt@@ tedu@@
@
text
@/*	$OpenBSD: client.c,v 1.7 2015/11/12 13:42:42 millert Exp $	*/

/* Copyright 1988,1990,1993,1994 by Paul Vixie
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1997,2000 by Internet Software Consortium, Inc.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/un.h>

#include <bitstring.h>		/* for structs.h */
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>		/* for structs.h */
#include <unistd.h>

#include "pathnames.h"
#include "macros.h"
#include "structs.h"
#include "funcs.h"
#include "globals.h"

/* int in_file(const char *string, FILE *file, int error)
 *	return TRUE if one of the lines in file matches string exactly,
 *	FALSE if no lines match, and error on error.
 */
static int
in_file(const char *string, FILE *file, int error)
{
	char line[MAX_TEMPSTR];
	char *endp;

	if (fseek(file, 0L, SEEK_SET))
		return (error);
	while (fgets(line, MAX_TEMPSTR, file)) {
		if (line[0] != '\0') {
			endp = &line[strlen(line) - 1];
			if (*endp != '\n')
				return (error);
			*endp = '\0';
			if (0 == strcmp(line, string))
				return (TRUE);
		}
	}
	if (ferror(file))
		return (error);
	return (FALSE);
}

/* int allowed(const char *username, const char *allow_file, const char *deny_file)
 *	returns TRUE if (allow_file exists and user is listed)
 *	or (deny_file exists and user is NOT listed).
 *	root is always allowed.
 */
int
allowed(const char *username, const char *allow_file, const char *deny_file)
{
	FILE	*fp;
	int	isallowed;

	if (strcmp(username, "root") == 0)
		return (TRUE);
	isallowed = FALSE;
	if ((fp = fopen(allow_file, "r")) != NULL) {
		isallowed = in_file(username, fp, FALSE);
		fclose(fp);
	} else if ((fp = fopen(deny_file, "r")) != NULL) {
		isallowed = !in_file(username, fp, FALSE);
		fclose(fp);
	}
	return (isallowed);
}

/* void poke_daemon(unsigned char cookie)
 *	touches spool_dir and sends a poke to the cron daemon if running.
 */
void
poke_daemon(unsigned char cookie)
{
	int sock = -1;
	const char *cronsock = _PATH_CRON_SOCK;
	struct stat sb;
	struct sockaddr_un s_un;

	if (stat(cronsock, &sb) != 0)
		cronsock = _PATH_CRON_SOCK_OLD;	/* backwards compatibility */

	bzero(&s_un, sizeof(s_un));
	if (strlcpy(s_un.sun_path, cronsock, sizeof(s_un.sun_path)) >=
	    sizeof(s_un.sun_path)) {
		warnc(ENAMETOOLONG, "%s", cronsock);
		return;
	}
	s_un.sun_family = AF_UNIX;
	if ((sock = socket(AF_UNIX, SOCK_STREAM, 0)) >= 0 &&
	    connect(sock, (struct sockaddr *)&s_un, sizeof(s_un)) == 0)
		send(sock, &cookie, 1, MSG_NOSIGNAL);
	else
		warnx("warning, cron does not appear to be running");
	if (sock >= 0)
		close(sock);
}
@


1.7
log
@Move cron socket to /var/run/cron.sock.  Client code will try the old
location if the new one doesn't exist for now.  In order to allow
the fchown() to succeed, cron now sets its effective gid to crontab.
OK jca@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.6 2015/11/11 17:05:23 millert Exp $	*/
d91 1
a91 1
/* void poke_daemon(const char *spool_dir, unsigned char cookie)
d95 1
a95 1
poke_daemon(const char *spool_dir, unsigned char cookie)
d98 1
a98 1
	const char *cronsock = CRONSOCK;
d103 1
a103 1
		cronsock = CRONSOCK_OLD;	/* backwards compatibility */
@


1.6
log
@Remove obsolete utime() call.  It predates the use of a socket to
prod cron into checking the spool dir.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.5 2015/11/09 15:57:39 millert Exp $	*/
d22 1
d26 2
d98 2
d102 3
d106 3
a108 4
	if (snprintf(s_un.sun_path, sizeof s_un.sun_path, "%s/%s",
	      CRON_SPOOL, CRONSOCK) >= sizeof(s_un.sun_path)) {
		fprintf(stderr, "%s: %s/%s: path too long\n",
		    __progname, CRON_SPOOL, CRONSOCK);
d116 1
a116 2
		fprintf(stderr, "%s: warning, cron does not appear to be "
		    "running.\n", __progname);
@


1.5
log
@Rename AT_DIR -> AT_SPOOL and SPOOL_DIR -> CRON_SPOOL to improve
readability.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.4 2015/11/06 23:47:42 millert Exp $	*/
a29 1
#include <utime.h>
a95 2

	(void) utime(spool_dir, NULL);		/* old poke method */
@


1.4
log
@Use __progname instead of the homegrown ProgramName.
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.3 2015/11/04 20:28:17 millert Exp $	*/
d102 1
a102 1
	      SPOOL_DIR, CRONSOCK) >= sizeof(s_un.sun_path)) {
d104 1
a104 1
		    __progname, SPOOL_DIR, CRONSOCK);
@


1.3
log
@Change cron from including all headers in every file to only including
what each .c file needs.  I have not removed cron.h since it will
be used in a future clean up of the cron's .h files.  OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.2 2015/11/03 04:16:36 guenther Exp $	*/
d104 1
a104 1
		    ProgramName, SPOOL_DIR, CRONSOCK);
d113 1
a113 1
		    "running.\n", ProgramName);
@


1.2
log
@Use send(MSG_NOSIGNAL) instead of mucking with the disposition of SIGPIPE

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: client.c,v 1.1 2015/10/31 12:19:41 millert Exp $	*/
d20 17
a36 1
#include "cron.h"
@


1.1
log
@Split client-only (at, crontab) functions out of misc.c and into
client.c.  Move truly common functions into common.c.  This avoids
dead code in the at and crontab commands.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.63 2015/10/29 22:41:27 millert Exp $	*/
a91 1
	(void) signal(SIGPIPE, SIG_IGN);
d94 1
a94 1
		write(sock, &cookie, 1);
a99 1
	(void) signal(SIGPIPE, SIG_DFL);
@

