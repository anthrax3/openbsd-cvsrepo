head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.04.28.16.48.18;	author krw;	state Exp;
branches;
next	1.9;
commitid	pgw5vNC23MlGi3Jy;

1.9
date	2015.12.01.06.39.52;	author krw;	state Exp;
branches;
next	1.8;
commitid	8ZPjbvXAMw4wMvrT;

1.8
date	2015.10.28.20.32.41;	author stsp;	state Exp;
branches;
next	1.7;
commitid	qe4ZquhOYUn2QGln;

1.7
date	2015.10.28.19.38.08;	author krw;	state Exp;
branches;
next	1.6;
commitid	Qa0q4IBIsPWk6jVQ;

1.6
date	2015.10.28.18.55.27;	author stsp;	state Exp;
branches;
next	1.5;
commitid	Lsyqj7dh5NkiyKiu;

1.5
date	2015.10.25.21.21.15;	author stsp;	state Exp;
branches;
next	1.4;
commitid	dSvWEmogzogeD4yH;

1.4
date	2015.10.03.16.56.52;	author krw;	state Exp;
branches;
next	1.3;
commitid	HJFSHENKbnsmJpnF;

1.3
date	2015.01.16.00.05.12;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	khLbW7SmDyckNaAs;

1.2
date	2014.06.09.13.13.48;	author jsing;	state Exp;
branches;
next	1.1;
commitid	uiG9sLEyw5REyB4f;

1.1
date	2014.01.19.02.58.50;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Plug a couple of leaks of input buffers.

Pointed out by David Carlier.
@
text
@/*	$OpenBSD: i386_softraid.c,v 1.9 2015/12/01 06:39:52 krw Exp $	*/
/*
 * Copyright (c) 2012 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>	/* DEV_BSIZE */
#include <sys/disklabel.h>
#include <sys/dkio.h>
#include <sys/ioctl.h>
#include <sys/stat.h>

#include <dev/biovar.h>
#include <dev/softraidvar.h>
#include <ufs/ufs/dinode.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <util.h>

#include "installboot.h"
#include "i386_installboot.h"

void	sr_install_bootblk(int, int, int);
void	sr_install_bootldr(int, char *);

void
sr_install_bootblk(int devfd, int vol, int disk)
{
	struct bioc_disk bd;
	struct disklabel dl;
	struct partition *pp;
	uint32_t poffset;
	char *dev;
	char part, efipart;
	int diskfd;

	/* Get device name for this disk/chunk. */
	memset(&bd, 0, sizeof(bd));
	bd.bd_volid = vol;
	bd.bd_diskid = disk;
	if (ioctl(devfd, BIOCDISK, &bd) == -1)
		err(1, "BIOCDISK");

	/* Check disk status. */
	if (bd.bd_status != BIOC_SDONLINE && bd.bd_status != BIOC_SDREBUILD) {
		fprintf(stderr, "softraid chunk %u not online - skipping...\n",
		    disk);
		return;
	}

	if (strlen(bd.bd_vendor) < 1)
		errx(1, "invalid disk name");
	part = bd.bd_vendor[strlen(bd.bd_vendor) - 1];
	if (part < 'a' || part >= 'a' + MAXPARTITIONS)
		errx(1, "invalid partition %c\n", part);
	bd.bd_vendor[strlen(bd.bd_vendor) - 1] = '\0';

	/* Open this device and check its disklabel. */
	if ((diskfd = opendev(bd.bd_vendor, (nowrite? O_RDONLY:O_RDWR),
	    OPENDEV_PART, &dev)) < 0)
		err(1, "open: %s", dev);

	/* Get and check disklabel. */
	if (ioctl(diskfd, DIOCGDINFO, &dl) != 0)
		err(1, "disklabel: %s", dev);
	if (dl.d_magic != DISKMAGIC)
		err(1, "bad disklabel magic=0x%08x", dl.d_magic);

	/* Warn on unknown disklabel types. */
	if (dl.d_type == 0)
		warnx("disklabel type unknown");

	efipart = findgptefisys(diskfd, &dl);
	if (efipart != -1) {
		write_efisystem(&dl, (char)efipart);
		return;
	}

	/* Determine poffset and set symbol value. */
	pp = &dl.d_partitions[part - 'a'];
	if (pp->p_offseth != 0)
		errx(1, "partition offset too high");
	poffset = pp->p_offset;			/* Offset of RAID partition. */
	poffset += SR_BOOT_LOADER_OFFSET;	/* SR boot loader area. */
	sym_set_value(pbr_symbols, "_p_offset", poffset);

	if (verbose)
		fprintf(stderr, "%s%c: installing boot blocks on %s, "
		    "part offset %u\n", bd.bd_vendor, part, dev, poffset);

	/* Write boot blocks to device. */
	write_bootblocks(diskfd, dev, &dl);

	close(diskfd);
}

void
sr_install_bootldr(int devfd, char *dev)
{
	struct bioc_installboot bb;
	struct stat sb;
	struct ufs1_dinode *ino_p;
	uint32_t bootsize, inodeblk, inodedbl;
	uint16_t bsize = SR_FS_BLOCKSIZE;
	uint16_t nblocks;
	uint8_t bshift = 5;		/* fragsize == blocksize */
	int fd, i;
	u_char *p;

	/*
	 * Install boot loader into softraid boot loader storage area.
	 *
	 * In order to allow us to reuse the existing biosboot we construct
	 * a fake FFS filesystem with a single inode, which points to the
	 * boot loader.
	 */

	nblocks = howmany(SR_BOOT_LOADER_SIZE, SR_FS_BLOCKSIZE / DEV_BSIZE);
	inodeblk = nblocks - 1;
	bootsize = nblocks * SR_FS_BLOCKSIZE;

	p = calloc(1, bootsize);
	if (p == NULL)
		err(1, NULL);

	fd = open(stage2, O_RDONLY, 0);
	if (fd == -1)
		err(1, NULL);

	if (fstat(fd, &sb) == -1)
		err(1, NULL);

	nblocks = howmany(sb.st_blocks, SR_FS_BLOCKSIZE / DEV_BSIZE);
	if (sb.st_blocks * S_BLKSIZE > bootsize -
	    (int)(sizeof(struct ufs1_dinode)))
		errx(1, "boot code will not fit");

	/* We only need to fill the direct block array. */
	ino_p = (struct ufs1_dinode *)&p[bootsize - sizeof(struct ufs1_dinode)];

	ino_p->di_mode = sb.st_mode;
	ino_p->di_nlink = 1;
	ino_p->di_inumber = 0xfeebfaab;
	ino_p->di_size = read(fd, p, sb.st_blocks * S_BLKSIZE);
	ino_p->di_blocks = nblocks;
	for (i = 0; i < nblocks; i++)
		ino_p->di_db[i] = i;

	inodedbl = ((u_char*)&ino_p->di_db[0] -
	    &p[bootsize - SR_FS_BLOCKSIZE]) + INODEOFF;

	memset(&bb, 0, sizeof(bb));
	bb.bb_bootldr = p;
	bb.bb_bootldr_size = bootsize;
	bb.bb_bootblk = "XXX";
	bb.bb_bootblk_size = sizeof("XXX");
	strncpy(bb.bb_dev, dev, sizeof(bb.bb_dev));
	if (!nowrite) {
		if (verbose)
			fprintf(stderr, "%s: installing boot loader on "
			    "softraid volume\n", dev);
		if (ioctl(devfd, BIOCINSTALLBOOT, &bb) == -1)
			errx(1, "softraid installboot failed");
	}

	/*
	 * Set the values that will need to go into biosboot
	 * (the partition boot record, a.k.a. the PBR).
	 */
	sym_set_value(pbr_symbols, "_fs_bsize_p", (bsize / 16));
	sym_set_value(pbr_symbols, "_fs_bsize_s", (bsize / 512));
	sym_set_value(pbr_symbols, "_fsbtodb", bshift);
	sym_set_value(pbr_symbols, "_inodeblk", inodeblk);
	sym_set_value(pbr_symbols, "_inodedbl", inodedbl);
	sym_set_value(pbr_symbols, "_nblocks", nblocks);

	if (verbose)
		fprintf(stderr, "%s is %d blocks x %d bytes\n",
		    stage2, nblocks, bsize);

	free(p);
	close(fd);
}
@


1.9
log
@Don't need <sys/types.h> and <sys/param.h>. Nuke the former when DEV_BSIZE
is needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.8 2015/10/28 20:32:41 stsp Exp $	*/
d197 1
@


1.8
log
@Backout the backout of installboot softraid non-gpt case fix.
krw and I crossed streams
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.6 2015/10/28 18:55:27 stsp Exp $	*/
a18 1
#include <sys/types.h>
@


1.7
log
@Revert GPT change. Breaks non-GPT install/upgrade.

Found the hard way by reyk@@
@
text
@d90 6
@


1.6
log
@In sr_install_bootblk for i386, don't clobber 'part' in non-GPT case.
Found the hard way by reyk@@.
stupid mistake stsp@@
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.5 2015/10/25 21:21:15 stsp Exp $	*/
a88 6

	efipart = findgptefisys(diskfd, &dl);
	if (efipart != -1) {
		write_efisystem(&dl, (char)efipart);
		return;
	}
@


1.5
log
@Fix installboot(8) on i386/amd64 when softraid is on top of GPT.
ok krw deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.4 2015/10/03 16:56:52 krw Exp $	*/
d51 1
a51 1
	char part;
d90 3
a92 3
	part = findgptefisys(diskfd, &dl);
	if (part != -1) {
		write_efisystem(&dl, (char)part);
@


1.4
log
@Nuke trailing whitespace to avoid cluttering possible upcoming diffs.
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.3 2015/01/16 00:05:12 deraadt Exp $	*/
d89 6
@


1.3
log
@first batch of cleanup to programs based upon the namespace cleanups
in net/pfvar.h sys/proc.h sys/ucred.h arpa/nameser.h
change to PATH_MAX, reduce use of MIN() and MAX(), HOST_NAME_MAX+1,
LOGIN_NAME_MAX, etc etc
ok millert guenther, some review by doug
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.2 2014/06/09 13:13:48 jsing Exp $	*/
d65 1
a65 1
		return;	
d94 1
a94 1
	poffset = pp->p_offset; 		/* Offset of RAID partition. */
d136 1
a136 1
	
@


1.2
log
@Use calloc() instead of malloc()/memset().

From Benjamin Baier.
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.1 2014/01/19 02:58:50 jsing Exp $	*/
d18 2
a19 1
#include <sys/param.h>
@


1.1
log
@Rework installboot and use a single directory with a single makefile. The
directory per machine model is arguably cleaner, however it does not play
well with distrib/special and instbin.

Discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: i386_softraid.c,v 1.2 2013/12/28 11:26:57 jsing Exp $	*/
d132 1
a132 1
	p = malloc(bootsize);
a135 1
	memset(p, 0, bootsize);
@

