head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2015.11.04.02.12.49;	author jsg;	state Exp;
branches;
next	1.10;
commitid	rFidF1wzTmb4y8NG;

1.10
date	2015.10.19.19.05.24;	author krw;	state Exp;
branches;
next	1.9;
commitid	UWpbRUW4eqdwKgAz;

1.9
date	2015.10.14.00.19.05;	author krw;	state Exp;
branches;
next	1.8;
commitid	S1rWOspi53imJwNv;

1.8
date	2015.10.12.20.52.20;	author krw;	state Exp;
branches;
next	1.7;
commitid	5Pek8GQzWpYoGc1F;

1.7
date	2015.10.08.14.50.38;	author krw;	state Exp;
branches;
next	1.6;
commitid	xtMQpAxwl7GHdojH;

1.6
date	2015.10.07.03.06.46;	author krw;	state Exp;
branches;
next	1.5;
commitid	aQPSsnCc55Jz3wNc;

1.5
date	2015.01.16.00.05.12;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	khLbW7SmDyckNaAs;

1.4
date	2014.06.09.15.50.08;	author jsing;	state Exp;
branches;
next	1.3;
commitid	HUpj1PaAkYfN62Wo;

1.3
date	2014.01.19.03.48.07;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2014.01.18.03.07.05;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2014.01.18.02.47.27;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.11
log
@fix a memory leak in multiple error paths
ok krw@@
@
text
@/*	$OpenBSD: util.c,v 1.10 2015/10/19 19:05:24 krw Exp $	*/

/*
 * Copyright (c) 2014 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/stat.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>

#include "installboot.h"

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

#define BUFSIZE 512

int
filecopy(const char *srcfile, const char *dstfile)
{
	struct stat sb;
	ssize_t sz, n;
	int sfd, dfd;
	char *buf;

	sfd = open(srcfile, O_RDONLY);
	if (sfd == -1) {
		warn("open %s", srcfile);
		return (-1);
	}
	if (fstat(sfd, &sb) == -1) {
		warn("fstat");
		return (-1);
	}
	sz = sb.st_size;

	dfd = open(dstfile, O_WRONLY|O_CREAT);
	if (dfd == -1) {
		warn("open %s", dstfile);
		return (-1);
	}
	if (fchown(dfd, 0, 0) == -1)
		if (errno != EINVAL) {
			warn("chown");
			return (-1);
		}
	if (fchmod(dfd, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH) == -1) {
		warn("chmod");
		return (-1);
	}

	if ((buf = malloc(BUFSIZE)) == NULL) {
		warn("malloc");
		return (-1);
	}

	while (sz > 0) {
		n = MINIMUM(sz, BUFSIZE);
		if ((n = read(sfd, buf, n)) == -1) {
			warn("read");
			free(buf);
			return (-1);
		}
		sz -= n;
		if (write(dfd, buf, n) != n) {
			warn("write");
			free(buf);
			return (-1);
		}
	}

	ftruncate(dfd, sb.st_size);

	close(dfd);
	close(sfd);
	free(buf);

	return (0);
}

char *
fileprefix(const char *base, const char *path)
{
	char *r, *s;
	int n;

	if ((s = malloc(PATH_MAX)) == NULL) {
		warn("malloc");
		return (NULL);
	}
	n = snprintf(s, PATH_MAX, "%s/%s", base, path);
	if (n < 1 || n >= PATH_MAX) {
		free(s);
		warn("snprintf");
		return (NULL);
	}
	if ((r = realpath(s, NULL)) == NULL) {
		free(s);
		warn("realpath");
		return (NULL);
	}
	free(s);

	return (r);
}

/*
 * Adapted from Hacker's Delight crc32b().
 *
 * To quote http://www.hackersdelight.org/permissions.htm :
 *
 * "You are free to use, copy, and distribute any of the code on
 *  this web site, whether modified by you or not. You need not give
 *  attribution. This includes the algorithms (some of which appear
 *  in Hacker's Delight), the Hacker's Assistant, and any code submitted
 *  by readers. Submitters implicitly agree to this."
 */
u_int32_t
crc32(const u_char *buf, const u_int32_t size)
{
	int j;
	u_int32_t i, byte, crc, mask;

	crc = 0xFFFFFFFF;

	for (i = 0; i < size; i++) {
		byte = buf[i];			/* Get next byte. */
		crc = crc ^ byte;
		for (j = 7; j >= 0; j--) {	/* Do eight times. */
			mask = -(crc & 1);
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
		}
	}

	return ~crc;
}
@


1.10
log
@Nuke unused variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.9 2015/10/14 00:19:05 krw Exp $	*/
a42 5
	if ((buf = malloc(BUFSIZE)) == NULL) {
		warn("malloc");
		return (-1);
	}

d69 5
d78 1
d84 1
@


1.9
log
@Backout last. Breaks sparc64, amoung other dubiousness.

requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.8 2015/10/12 20:52:20 krw Exp $	*/
d40 1
a40 1
	int sfd, dfd, rslt = -1;
@


1.8
log
@Check that the disk specified on the command line is the disk that
files are copied to. Error out with 'cross-device install' if not.

ok millert@@, ok deraadt@@ & jsing@@ for previous version
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.7 2015/10/08 14:50:38 krw Exp $	*/
a18 2
#include <sys/types.h>
#include <sys/disklabel.h>
d39 1
a39 1
	ssize_t srcsz, sz, n;
d57 1
a57 1
	srcsz = sz = sb.st_size;
a63 9
	if (fstat(dfd, &sb) == -1) {
		warn("fstat");
		return (-1);
	}
	if (major(sb.st_dev) != dstblkmajor || DISKUNIT(sb.st_dev) !=
	    dstblkunit) {
		warnx("cross-device install");
		return (-1);
	}
d87 1
a87 1
	ftruncate(dfd, srcsz);
@


1.7
log
@Refactor fileprefix() and filecopy() to use warn() instead of err()
to display error message, and to return error indications (NULL and
-1 respectively).  Use the error indications in write_efisystem()
to unwind in the face of more error conditions. In other cases just
exit(1) to emulation current behaviour.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.6 2015/10/07 03:06:46 krw Exp $	*/
d19 2
d41 1
a41 1
	ssize_t sz, n;
d59 1
a59 1
	sz = sb.st_size;
d66 9
d98 1
a98 1
	ftruncate(dfd, sb.st_size);
@


1.6
log
@Add initial support for installing UEFI boot files to a GTP EFI System
Partition. Further work to be done in-tree.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.5 2015/01/16 00:05:12 deraadt Exp $	*/
d35 1
a35 1
void
d40 1
a40 1
	int sfd, dfd;
d43 4
a46 2
	if ((buf = malloc(BUFSIZE)) == NULL)
		err(1, "malloc");
d49 8
a56 4
	if (sfd == -1)
		err(1, "open %s", srcfile);
	if (fstat(sfd, &sb) == -1)
		err(1, "fstat");
d60 4
a63 2
	if (dfd == -1)
		err(1, "open %s", dstfile);
d65 8
a72 4
		if (errno != EINVAL)
			err(1, "chown");
	if (fchmod(dfd, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH) == -1)
		err(1, "chmod");
d76 4
a79 2
		if ((n = read(sfd, buf, n)) == -1)
			err(1, "read");
d81 4
a84 2
		if (write(dfd, buf, n) != n)
			err(1, "write");
d92 2
d102 4
a105 2
	if ((s = malloc(PATH_MAX)) == NULL)
		err(1, "malloc");
d107 10
a116 4
	if (n < 1 || n >= PATH_MAX)
		err(1, "snprintf");
	if ((r = realpath(s, NULL)) == NULL)
		err(1, "realpath");
d119 1
a119 1
	return r;
@


1.5
log
@first batch of cleanup to programs based upon the namespace cleanups
in net/pfvar.h sys/proc.h sys/ucred.h arpa/nameser.h
change to PATH_MAX, reduce use of MIN() and MAX(), HOST_NAME_MAX+1,
LOGIN_NAME_MAX, etc etc
ok millert guenther, some review by doug
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.4 2014/06/09 15:50:08 jsing Exp $	*/
d21 1
d57 2
a58 1
		err(1, "chown");
d94 31
@


1.4
log
@Change the installboot file copying process so that it carefully
overwrites the existing file, before truncating it to the final length.
This means that we will keep the same inode and potentially retain the
same disk data block allocation between runs.

This will aid users who multiboot since it makes it less likely that the
PBR will change, although as before, there is no guarantee. Obviously if
the second stage boot loader grows or shrinks then the PBR will change
regardless.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.3 2014/01/19 03:48:07 jsing Exp $	*/
a18 1
#include <sys/param.h>
d26 1
d30 2
d61 1
a61 1
		n = MIN(sz, BUFSIZE);
@


1.3
log
@When copying files do it in 512 byte blocks so that we're less likely to
hit file system allocation issues on install media.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.2 2014/01/18 03:07:05 jsing Exp $	*/
a34 1
	char *buf, tempfile[MAXPATHLEN];
d38 1
d45 1
a45 1
		err(1, "open");
d50 1
a50 2
	snprintf(tempfile, sizeof(tempfile), "%s.XXXXXXXX", dstfile);
	dfd = mkstemp(tempfile);
d52 2
a53 3
		err(1, "mkstemp");

	if (chown(tempfile, 0, 0) == -1)
d55 1
a55 1
	if (chmod(tempfile, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH) == -1)
a57 3
	if (verbose)
		fprintf(stderr, "Copying %s to %s\n", srcfile, tempfile);

d67 2
a71 6

	if (verbose)
		fprintf(stderr, "Renaming %s to %s\n", tempfile, dstfile);

	if (rename(tempfile, dstfile) == -1)
		err(1, "rename");
@


1.2
log
@Make installboot(8) easier to use - copy the second stage boot loader to
the default location used by the given architecture. This eliminates the
need to copy it over manually prior to running installboot.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.1 2014/01/18 02:47:27 jsing Exp $	*/
d30 1
a30 1
#define BUFSIZE 2048
@


1.1
log
@Add a -r flag that allows for the mount point of the root filesystem to be
specified. This is primarily for use by the installer and defaults to /.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
d22 1
d26 1
d29 53
@

