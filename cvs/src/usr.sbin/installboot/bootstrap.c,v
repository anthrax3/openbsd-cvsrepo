head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2015.12.28.23.00.29;	author krw;	state Exp;
branches;
next	1.8;
commitid	FIvgNlFZBIBsxjAi;

1.8
date	2015.10.19.19.07.59;	author krw;	state Exp;
branches;
next	1.7;
commitid	lZOmPL4RhQwqE6IH;

1.7
date	2015.10.15.19.27.30;	author miod;	state Exp;
branches;
next	1.6;
commitid	R07mNNZ6Dolm5xg5;

1.6
date	2015.01.16.00.05.12;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	khLbW7SmDyckNaAs;

1.5
date	2014.06.25.18.23.02;	author tobias;	state Exp;
branches;
next	1.4;
commitid	BjEHGgNvqLby1jsw;

1.4
date	2014.06.09.13.13.48;	author jsing;	state Exp;
branches;
next	1.3;
commitid	uiG9sLEyw5REyB4f;

1.3
date	2013.12.28.12.01.33;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.28.11.26.57;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2013.12.27.14.17.55;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Replace lseek/[read|write] with pread|pwrite.

ok millert@@ a while ago.
@
text
@/*	$OpenBSD: bootstrap.c,v 1.8 2015/10/19 19:07:59 krw Exp $	*/

/*
 * Copyright (c) 2013 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>	/* DEV_BSIZE */
#include <sys/disklabel.h>
#include <sys/dkio.h>
#include <sys/ioctl.h>
#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "installboot.h"

void
bootstrap(int devfd, char *dev, char *bootfile, unsigned int overlap_allowance)
{
	struct disklabel dl;
	struct disklabel *lp;
	struct partition *pp;
	char *boot, *p, part;
	size_t bootsize;
	size_t bootsec;
	struct stat sb;
	int fd, i;

	/*
	 * Install bootstrap code onto the given disk, preserving the
	 * existing disklabel.
	 */

	/* Read disklabel from disk. */
	if (ioctl(devfd, DIOCGDINFO, &dl) == -1)
		err(1, "disklabel");
	if (dl.d_secsize == 0) {
		warnx("disklabel has sector size of 0, assuming %d", DEV_BSIZE);
		dl.d_secsize = DEV_BSIZE;
	}

	/* Read bootstrap file. */
	if (verbose)
		fprintf(stderr, "reading bootstrap from %s\n", bootfile);
	fd = open(bootfile, O_RDONLY);
	if (fd < 0)
		err(1, "open %s", bootfile);
	if (fstat(fd, &sb) != 0)
		err(1, "fstat %s", bootfile);
	bootsec = howmany((ssize_t)sb.st_size, dl.d_secsize);
	bootsize = bootsec * dl.d_secsize;
	if (verbose)
		fprintf(stderr, "bootstrap is %zu bytes "
		    "(%zu sectors @@ %u bytes = %zu bytes)\n",
		    (ssize_t)sb.st_size, bootsec, dl.d_secsize, bootsize);
	boot = calloc(1, bootsize);
	if (boot == NULL)
		err(1, "calloc");
	if (read(fd, boot, bootsize) != (ssize_t)sb.st_size)
		err(1, "read");
	close(fd);

	/*
	 * Check that the bootstrap will fit - partitions must not overlap,
	 * or if they do, the partition type must be either FS_BOOT or
	 * FS_UNUSED. The 'c' partition will always overlap and is ignored.
	 */
	if (verbose)
		fprintf(stderr, "ensuring used partitions do not overlap "
		    "with bootstrap sectors 0-%zu\n", bootsec);
	for (i = 0; i < dl.d_npartitions; i++) {
		part = 'a' + i;
		pp = &dl.d_partitions[i];
		if (i == RAW_PART)
			continue;
		if (DL_GETPSIZE(pp) == 0)
			continue;
		if ((u_int64_t)bootsec <= DL_GETPOFFSET(pp) + overlap_allowance)
			continue;
		switch (pp->p_fstype) {
		case FS_BOOT:
			break;
		case FS_UNUSED:
			warnx("bootstrap overlaps with unused partition %c",
			    part);
			break;
		default:
			errx(1, "bootstrap overlaps with partition %c", part);
		}
	}

	/*
	 * Make sure the bootstrap has left space for the disklabel.
	 * N.B.: LABELSECTOR *is* a DEV_BSIZE quantity!
	 */
	lp = (struct disklabel *)(boot + (LABELSECTOR * DEV_BSIZE) +
	    LABELOFFSET);
	for (i = 0, p = (char *)lp; i < (int)sizeof(*lp); i++)
		if (p[i] != 0)
			errx(1, "bootstrap has data in disklabel area");

	/* Patch the disklabel into the bootstrap code. */
	memcpy(lp, &dl, sizeof(dl));

	/* Write the bootstrap out to the disk. */
	if (verbose)
		fprintf(stderr, "%s bootstrap to disk\n",
		    (nowrite ? "would write" : "writing"));
	if (nowrite)
		return;
	if (pwrite(devfd, boot, bootsize, 0) != (ssize_t)bootsize)
		err(1, "pwrite");
}
@


1.8
log
@LABELSECTOR is a DEV_BSIZE quantity. So multiply by DEV_BSIZE and not
d_secsize when calculating disklabel location.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootstrap.c,v 1.7 2015/10/15 19:27:30 miod Exp $	*/
a122 2
	if (lseek(devfd, 0, SEEK_SET) != 0)
		err(1, "lseek");
d128 2
a129 2
	if (write(devfd, boot, bootsize) != (ssize_t)bootsize)
		err(1, "write");
@


1.7
log
@Add an extra argument to bootstrap() to allow for a limited overlap between an
existing partition and the boot blocks span, and update all callers to require
an overlap limit of zero sectors (thus not changing their behaviour).

Then, add proper support for vax: copy the 2nd-stage boot block to /boot and
install the 1st-stage boot block at the beginning of the disk, retaining the
disklabel; allow for an overlap of up to 16 sectors, which is perfectly fine
as long as your `a' partition is FFS.

Note that regular installs will not even have such an overlap, because the
default OpenBSD span on a disk on vax starts at sector 16, but installation
media use sperific layout which require this.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootstrap.c,v 1.6 2015/01/16 00:05:12 deraadt Exp $	*/
d109 5
a113 2
	/* Make sure the bootstrap has left space for the disklabel. */
        lp = (struct disklabel *)(boot + (LABELSECTOR * dl.d_secsize) +
@


1.6
log
@first batch of cleanup to programs based upon the namespace cleanups
in net/pfvar.h sys/proc.h sys/ucred.h arpa/nameser.h
change to PATH_MAX, reduce use of MIN() and MAX(), HOST_NAME_MAX+1,
LOGIN_NAME_MAX, etc etc
ok millert guenther, some review by doug
@
text
@d1 1
a1 1
/*	$OpenBSD: bootstrap.c,v 1.5 2014/06/25 18:23:02 tobias Exp $	*/
d35 1
a35 1
bootstrap(int devfd, char *dev, char *bootfile)
d95 1
a95 1
		if ((u_int64_t)bootsec <= DL_GETPOFFSET(pp))
@


1.5
log
@Apply/fix OpenBSD tag.

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 1
a19 1
#include <sys/param.h>
@


1.4
log
@Use calloc() instead of malloc()/memset().

From Benjamin Baier.
@
text
@d1 2
@


1.3
log
@Round the size of the bootstrap up to a multiple of the disk sector size.
Some bootstraps are already built this way, however others are not.
@
text
@d71 1
a71 1
	boot = malloc(bootsize);
d73 1
a73 2
		err(1, "malloc");
	memset(boot, 0, bootsize);
@


1.2
log
@Various code clean ups - add a missing header, add a missing prototype,
add some casts, tweak some types and variable names.
@
text
@d40 1
a40 1
	size_t bootend;
d65 6
a70 2
	bootsize = sb.st_size;
	bootend = howmany(bootsize, dl.d_secsize);
d74 2
a75 1
	if (read(fd, boot, bootsize) != (ssize_t)bootsize)
a76 3
	if (verbose)
		fprintf(stderr, "bootstrap is %zu bytes (%zu sectors)\n",
		    bootsize, bootend);
d86 1
a86 1
		    "with bootstrap sectors 0-%zu\n", bootend);
d94 1
a94 1
		if ((u_int64_t)bootend <= DL_GETPOFFSET(pp))
@


1.1
log
@Provide a bootstrap implementation (effectively a `disklabel -B'
equivalent) for use with architectures like hppa, landisk and vax.
@
text
@d23 1
d32 1
a32 1
int
d39 2
a40 1
	u_int64_t bootend;
d42 1
a42 2
	int bootsize;
	int bf, i;
d60 2
a61 2
	bf = open(bootfile, O_RDONLY);
	if (bf < 0)
d63 1
a63 1
	if (fstat(bf, &sb) != 0)
d66 1
a66 1
	bootend = howmany((u_int64_t)bootsize, dl.d_secsize);
d70 1
a70 1
	if (read(bf, boot, bootsize) != bootsize)
d73 1
a73 1
		fprintf(stderr, "bootstrap is %lld bytes (%llu sectors)\n",
d75 1
a75 1
	close(bf);
d84 1
a84 1
		    "with bootstrap sectors 0-%lld\n", bootend);
d92 1
a92 1
		if (bootend <= DL_GETPOFFSET(pp))
d109 1
a109 1
	for (i = 0, p = (char *)lp; i < sizeof(*lp); i++)
d124 1
a124 1
	if (write(devfd, boot, bootsize) != bootsize)
@

