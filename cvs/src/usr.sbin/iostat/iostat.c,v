head	1.39;
access;
symbols
	OPENBSD_6_2:1.39.0.10
	OPENBSD_6_2_BASE:1.39
	OPENBSD_6_1:1.39.0.8
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.39.0.4
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.2
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.38.0.4
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.34.0.6
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.34.0.4
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.28.0.4
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.2
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.10
	OPENBSD_5_0:1.27.0.8
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.6
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.27.0.4
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.27.0.2
	OPENBSD_4_7_BASE:1.27
	OPENBSD_4_6:1.25.0.14
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.10
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.8
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.6
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.4
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.2
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.24.0.2
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.22.0.4
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.12
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.39
date	2015.10.23.08.21.27;	author tedu;	state Exp;
branches;
next	1.38;
commitid	w5f1306JiBmNWqGx;

1.38
date	2015.03.18.15.14.47;	author tedu;	state Exp;
branches;
next	1.37;
commitid	is58I1dJKDd9f0p1;

1.37
date	2014.10.28.05.48.22;	author deraadt;	state Exp;
branches;
next	1.36;
commitid	NhMdqAhfbCOLA27U;

1.36
date	2014.10.26.20.37.15;	author brad;	state Exp;
branches;
next	1.35;
commitid	tXOXMcbSyzp3qPSl;

1.35
date	2014.09.15.19.08.22;	author miod;	state Exp;
branches;
next	1.34;
commitid	uuiU9j2I8AUx0fez;

1.34
date	2014.02.13.21.01.23;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2014.02.13.08.46.36;	author tedu;	state Exp;
branches;
next	1.32;

1.32
date	2013.11.23.22.51.42;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.04.21.43.11;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.04.21.17.45;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.04.21.14.28;	author tedu;	state Exp;
branches;
next	1.28;

1.28
date	2012.06.26.21.37.59;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2009.11.22.22.22.14;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.18.20.41.34;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.30.23.48.39;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.13.19.31.07;	author otto;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.01.03.32.47;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2004.08.08.00.19.16;	author pedro;	state Exp;
branches;
next	1.20;

1.20
date	2004.08.01.18.32.19;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2004.02.15.02.45.47;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.26.19.47.09;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.16.01.57.05;	author tdeval;	state Exp;
branches;
next	1.15;

1.15
date	2002.08.04.00.51.01;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.30.19.09.05;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.28.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.17.19.49.38;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.14.20.04.40;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.14.07.22.06;	author angelos;	state Exp;
branches;
next	1.8;

1.8
date	98.07.08.22.13.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.01.15.23.44.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.12.22.03.28.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.11.02.00.35.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.08.11.22.32.42;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.22.11.35.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.02.52.34;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.39
log
@simplify argv back compat
@
text
@/*	$OpenBSD: iostat.c,v 1.38 2015/03/18 15:14:47 tedu Exp $	*/
/*	$NetBSD: iostat.c,v 1.10 1996/10/25 18:21:58 scottr Exp $	*/

/*
 * Copyright (c) 1996 John M. Vinopal
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project
 *      by John M. Vinopal.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*-
 * Copyright (c) 1986, 1991, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/limits.h>
#include <sys/time.h>
#include <sys/sched.h>

#include <err.h>
#include <ctype.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <kvm.h>

#include "dkstats.h"

/* Defined in dkstats.c */
extern struct _disk cur, last;
extern int	dk_ndrive;

/* Namelist and memory files. */
kvm_t *kd;
char	*nlistf, *memf;

int		hz, reps, interval;
static int	todo = 0;

volatile sig_atomic_t wantheader;

#define ISSET(x, a)	((x) & (a))
#define SHOW_CPU	0x0001
#define SHOW_TTY	0x0002
#define SHOW_STATS_1	0x0004
#define SHOW_STATS_2	0x0008
#define SHOW_TOTALS	0x0080

static void cpustats(void);
static void disk_stats(double);
static void disk_stats2(double);
static void sigheader(int);
static void header(void);
static void usage(void);
static void display(void);
static void selectdrives(char **);

void dkswap(void);
void dkreadstats(void);
int dkinit(int);

int
main(int argc, char *argv[])
{
	const char *errstr;
	int ch, hdrcnt;
	struct timespec	ts;

	while ((ch = getopt(argc, argv, "Cc:dDIM:N:Tw:")) != -1)
		switch(ch) {
		case 'c':
			reps = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "repetition count is %s", errstr);
			break;
		case 'C':
			todo |= SHOW_CPU;
			break;
		case 'd':
			todo |= SHOW_STATS_1;
			break;
		case 'D':
			todo |= SHOW_STATS_2;
			break;
		case 'I':
			todo |= SHOW_TOTALS;
			break;
		case 'M':
			memf = optarg;
			break;
		case 'N':
			nlistf = optarg;
			break;
		case 'T':
			todo |= SHOW_TTY;
			break;
		case 'w':
			interval = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "interval is %s", errstr);
			break;
		case '?':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (!ISSET(todo, SHOW_CPU | SHOW_TTY | SHOW_STATS_1 | SHOW_STATS_2))
		todo |= SHOW_CPU | SHOW_TTY | SHOW_STATS_1;

	dkinit(0);
	dkreadstats();
	selectdrives(argv);

	ts.tv_sec = interval;
	ts.tv_nsec = 0;

	/* print a new header on sigcont */
	signal(SIGCONT, sigheader);

	for (hdrcnt = 1;;) {
		if (!--hdrcnt || wantheader) {
			header();
			hdrcnt = 20;
			wantheader = 0;
		}

		if (!ISSET(todo, SHOW_TOTALS))
			dkswap();
		display();

		if (reps >= 0 && --reps <= 0)
			break;
		nanosleep(&ts, NULL);
		dkreadstats();
		if (last.dk_ndrive != cur.dk_ndrive)
			wantheader = 1;
	}
	exit(0);
}

/*ARGSUSED*/
static void
sigheader(int signo)
{
	wantheader = 1;
}

static void
header(void)
{
	int i;
	static int printedheader = 0;

	if (printedheader && !isatty(STDOUT_FILENO))
		return;

	/* Main Headers. */
	if (ISSET(todo, SHOW_TTY)) {
		if (ISSET(todo, SHOW_TOTALS))
			printf("            tty");
		else
			printf("      tty");
	}

	if (ISSET(todo, SHOW_STATS_1))
		for (i = 0; i < dk_ndrive; i++)
			if (cur.dk_select[i]) {
				if (ISSET(todo, SHOW_TOTALS))
					printf(" %18.18s ", cur.dk_name[i]);
				else
					printf(" %16.16s ", cur.dk_name[i]);
			}
	if (ISSET(todo, SHOW_STATS_2))
		for (i = 0; i < dk_ndrive; i++)
			if (cur.dk_select[i])
				printf(" %16.16s ", cur.dk_name[i]);

	if (ISSET(todo, SHOW_CPU))
		printf("            cpu");
	printf("\n");

	/* Sub-Headers. */
	if (ISSET(todo, SHOW_TTY)) {
		if (ISSET(todo, SHOW_TOTALS))
			printf("   tin     tout");
		else
			printf(" tin tout");
	}

	if (ISSET(todo, SHOW_STATS_1))
		for (i = 0; i < dk_ndrive; i++)
			if (cur.dk_select[i]) {
				if (ISSET(todo, SHOW_TOTALS))
					printf("  KB/t   xfr     MB ");
				else
					printf("  KB/t  t/s  MB/s ");
			}
	if (ISSET(todo, SHOW_STATS_2))
		for (i = 0; i < dk_ndrive; i++)
			if (cur.dk_select[i])
				printf("     KB  xfr time ");

	if (ISSET(todo, SHOW_CPU))
		printf(" us ni sy in id");
	printf("\n");
}

static void
disk_stats(double etime)
{
	int dn;
	double atime, mbps;

	for (dn = 0; dn < dk_ndrive; ++dn) {
		if (!cur.dk_select[dn])
			continue;

		/* average Kbytes per transfer. */
		if (cur.dk_rxfer[dn] + cur.dk_wxfer[dn])
			mbps = ((cur.dk_rbytes[dn] + cur.dk_wbytes[dn]) /
			    (1024.0)) / (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]);
		else
			mbps = 0.0;

		printf(" %5.2f", mbps);

		/* average transfers per second. */
		if (ISSET(todo, SHOW_TOTALS))
			printf(" %5.0f", (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);
		else
			printf(" %4.0f", (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);

		/* time busy in disk activity */
		atime = (double)cur.dk_time[dn].tv_sec +
			((double)cur.dk_time[dn].tv_usec / (double)1000000);

		/* Megabytes per second. */
		if (atime != 0.0)
			mbps = (cur.dk_rbytes[dn] + cur.dk_wbytes[dn]) /
			    (double)(1024 * 1024);
		else
			mbps = 0;
		if (ISSET(todo, SHOW_TOTALS))
			printf(" %6.2f ", mbps / etime);
		else
			printf(" %5.2f ", mbps / etime);
	}
}

static void
disk_stats2(double etime)
{
	int dn;
	double atime;

	for (dn = 0; dn < dk_ndrive; ++dn) {
		if (!cur.dk_select[dn])
			continue;

		/* average kbytes per second. */
		printf(" %6.0f",
		    (cur.dk_rbytes[dn] + cur.dk_wbytes[dn]) / (1024.0) / etime);

		/* average transfers per second. */
		printf(" %4.0f", (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);

		/* average time busy in disk activity. */
		atime = (double)cur.dk_time[dn].tv_sec +
		    ((double)cur.dk_time[dn].tv_usec / (double)1000000);
		printf(" %4.2f ", atime / etime);
	}
}

static void
cpustats(void)
{
	int state;
	double t = 0;

	for (state = 0; state < CPUSTATES; ++state)
		t += cur.cp_time[state];
	if (!t)
		t = 1.0;
	/* States are generally never 100% and can use %3.0f. */
	for (state = 0; state < CPUSTATES; ++state)
		printf("%3.0f", 100. * cur.cp_time[state] / t);
}

static void
usage(void)
{
	fprintf(stderr,
"usage: iostat [-CDdIT] [-c count] [-M core] [-N system] [-w wait] [drives]\n");
	exit(1);
}

static void
display(void)
{
	int	i;
	double	etime;

	/* Sum up the elapsed ticks. */
	etime = 0.0;
	for (i = 0; i < CPUSTATES; i++)
		etime += cur.cp_time[i];
	if (etime == 0.0)
		etime = 1.0;
	/* Convert to seconds. */
	etime /= (float)hz;

	/* If we're showing totals only, then don't divide by the
	 * system time.
	 */
	if (ISSET(todo, SHOW_TOTALS))
		etime = 1.0;

	if (ISSET(todo, SHOW_TTY)) {
		if (ISSET(todo, SHOW_TOTALS))
			printf("%6.0f %8.0f", cur.tk_nin / etime,
			    cur.tk_nout / etime);
		else
			printf("%4.0f %4.0f", cur.tk_nin / etime,
			    cur.tk_nout / etime);
	}

	if (ISSET(todo, SHOW_STATS_1))
		disk_stats(etime);

	if (ISSET(todo, SHOW_STATS_2))
		disk_stats2(etime);

	if (ISSET(todo, SHOW_CPU))
		cpustats();

	printf("\n");
	fflush(stdout);
}

static void
selectdrives(char *argv[])
{
	const char *errstr;
	int	i, ndrives;

	/*
	 * Choose drives to be displayed.  Priority goes to (in order) drives
	 * supplied as arguments and default drives.  If everything isn't
	 * filled in and there are drives not taken care of, display the first
	 * few that fit.
	 *
	 * The backward compatibility syntax is:
	 *	iostat [ drives ] [ interval [ count ] ]
	 */
	for (ndrives = 0; *argv; ++argv) {
		if (isdigit((unsigned char)**argv))
			break;
		for (i = 0; i < dk_ndrive; i++) {
			if (strcmp(cur.dk_name[i], *argv))
				continue;
			cur.dk_select[i] = 1;
			++ndrives;
			break;
		}
		if (i == dk_ndrive)
			errx(1, "invalid interval or drive name: %s", *argv);
	}
	if (*argv) {
		interval = strtonum(*argv, 1, INT_MAX, &errstr);
		if (errstr)
			errx(1, "interval is %s", errstr);
		if (*++argv) {
			reps = strtonum(*argv, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "repetition count is %s", errstr);
			++argv;
		}
	}
	if (*argv)
		errx(1, "too many arguments");

	if (interval) {
		if (!reps)
			reps = -1;
	} else
		if (reps)
			interval = 1;

	/* Pick up to 4 drives if none specified. */
	if (ndrives == 0)
		for (i = 0; i < dk_ndrive && ndrives < 4; i++) {
			if (cur.dk_select[i])
				continue;
			cur.dk_select[i] = 1;
			++ndrives;
		}
}
@


1.38
log
@check for invalid disknames
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.37 2014/10/28 05:48:22 deraadt Exp $	*/
d405 1
a405 1
	 * The backward compatibility #ifdefs permit the syntax:
a407 1
#define	BACKWARD_COMPATIBILITY
a408 1
#ifdef	BACKWARD_COMPATIBILITY
a410 1
#endif
a420 1
#ifdef	BACKWARD_COMPATIBILITY
d429 1
d432 2
a433 1
#endif
@


1.37
log
@use nanosleep() instead of hackish select(); ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.36 2014/10/26 20:37:15 brad Exp $	*/
d419 1
d421 2
@


1.36
log
@Add explicit braces to suppress compiler warnings.

iostat.c:214:3: warning: add explicit braces to avoid dangling else [-Wdangling-else]

ok guenther@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.35 2014/09/15 19:08:22 miod Exp $	*/
d118 1
a118 1
	struct timeval	tv;
d167 2
a168 2
	tv.tv_sec = interval;
	tv.tv_usec = 0;
d186 1
a186 1
		select(0, NULL, NULL, NULL, &tv);
@


1.35
log
@Remove non-standard <sys/dkstat.h> header. It has not contained anything
related to disk stastics for almost 17 years, and the remaining
userland-visible defines duplicate those found in <sys/sched.h>.

Move the remaining _KERNEL defines to <sys/tty.h> where they belong, and
update all users to cope with this.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.34 2014/02/13 21:01:23 tedu Exp $	*/
d211 1
a211 1
	if (ISSET(todo, SHOW_TTY))
d216 1
d220 1
a220 1
			if (cur.dk_select[i])
d225 1
d236 1
a236 1
	if (ISSET(todo, SHOW_TTY))
d241 1
d371 1
a371 1
	if (ISSET(todo, SHOW_TTY))
d378 1
@


1.34
log
@atoi -> strtonum
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.33 2014/02/13 08:46:36 tedu Exp $	*/
a64 1
#include <sys/dkstat.h>
d67 1
@


1.33
log
@totals tend to be larger, give them some more room to breathe
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.32 2013/11/23 22:51:42 deraadt Exp $	*/
d66 1
d116 1
d123 3
a125 2
			if ((reps = atoi(optarg)) <= 0)
				errx(1, "repetition count <= 0.");
d149 3
a151 2
			if ((interval = atoi(optarg)) <= 0)
				errx(1, "interval <= 0.");
d392 1
d419 8
a426 3
		interval = atoi(*argv);
		if (*++argv)
			reps = atoi(*argv);
@


1.32
log
@yet more unsigned char casts for ctype
checked by jca
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.31 2013/06/04 21:43:11 tedu Exp $	*/
d208 4
a211 1
		printf("      tty");
d216 4
a219 1
				printf(" %16.16s ", cur.dk_name[i]);
d231 4
a234 1
		printf(" tin tout");
d240 1
a240 1
					printf("  KB/t xfr MB   ");
d274 4
a277 1
		printf(" %4.0f", (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);
d289 4
a292 1
		printf(" %5.2f ", mbps / etime);
d365 6
a370 1
		printf("%4.0f %4.0f", cur.tk_nin / etime, cur.tk_nout / etime);
@


1.31
log
@tabs are not so expensive we can't intent this file properly
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.28 2012/06/26 21:37:59 tedu Exp $	*/
d382 1
a382 1
		if (isdigit(**argv))
@


1.30
log
@tweak the headers header too
@
text
@d167 1
a167 1
	(void)signal(SIGCONT, sigheader);
d208 1
a208 1
		(void)printf("      tty");
d211 3
a213 4
	for (i = 0; i < dk_ndrive; i++)
		if (cur.dk_select[i])
			(void)printf(" %16.16s ", cur.dk_name[i]);

d215 3
a217 3
	for (i = 0; i < dk_ndrive; i++)
		if (cur.dk_select[i])
			(void)printf(" %16.16s ", cur.dk_name[i]);
d220 1
a220 1
		(void)printf("            cpu");
d228 7
a234 7
	for (i = 0; i < dk_ndrive; i++)
		if (cur.dk_select[i]) {
			if (ISSET(todo, SHOW_TOTALS))
				(void)printf("  KB/t xfr MB   ");
			else
				(void)printf("  KB/t  t/s  MB/s ");
		}
d236 4
a239 4
	for (i = 0; i < dk_ndrive; i++)
		if (cur.dk_select[i]) {
			(void)printf("     KB  xfr time ");
		}
d241 1
a241 1
		(void)printf(" us ni sy in id");
d262 1
a262 1
		(void)printf(" %5.2f", mbps);
d265 1
a265 2
		(void)printf(" %4.0f",
		    (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);
d277 1
a277 1
		(void)printf(" %5.2f ", mbps / etime);
d292 1
a292 1
		(void)printf(" %6.0f",
d296 1
a296 2
		(void)printf(" %4.0f",
		    (cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) / etime);
d301 1
a301 1
		(void)printf(" %4.2f ", atime / etime);
d323 1
a323 1
	(void)fprintf(stderr,
d336 1
a336 1
	for (i = 0; i < CPUSTATES; i++) {
a337 1
	}
d361 2
a362 2
	(void)printf("\n");
	(void)fflush(stdout);
@


1.29
log
@not sure who uses the "alternate" display, but the columns look like ass
@
text
@d213 1
a213 1
			(void)printf(" %14.14s ", cur.dk_name[i]);
d218 1
a218 1
			(void)printf(" %13.13s ", cur.dk_name[i]);
@


1.28
log
@tweak column spacing to allow for larger numbers
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.27 2009/11/22 22:22:14 tedu Exp $	*/
d239 1
a239 1
			(void)printf("   KB xfr time ");
d294 1
a294 1
		(void)printf(" %4.0f",
@


1.27
log
@don't repeat the banner if not a tty.
add a -c count option to netstat.
tweak spacing to not smear fields in vmstat.
ok deraadt sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.26 2009/10/27 23:59:51 deraadt Exp $	*/
d234 1
a234 1
				(void)printf("  KB/t t/s MB/s ");
d266 1
a266 1
		(void)printf(" %3.0f",
d279 1
a279 1
		(void)printf(" %4.2f ", mbps / etime);
d298 1
a298 1
		(void)printf(" %3.0f",
@


1.26
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.25 2007/02/18 20:41:34 jmc Exp $	*/
d201 4
@


1.25
log
@- sync SYNOPSIS and usage()
- add args to the option list
- I/O does not need .Tn
- .Nm does not need an argument

based on a diff from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.24 2006/03/30 23:48:39 deraadt Exp $	*/
a63 15

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1986, 1991, 1993\n\
        The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)iostat.c    8.2 (Berkeley) 1/26/94";
#else
static char *rcsid = "$NetBSD: iostat.c,v 1.10 1996/10/25 18:21:58 scottr Exp $"
;
#endif
#endif /* not lint */
@


1.24
log
@i am stunned how little was needed to make lint happy in this
terrible place
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.23 2006/03/13 19:31:07 otto Exp $	*/
d338 1
a338 1
"usage: iostat [-CdDIT] [-c count] [-M core] [-N system] [-w wait] [drives]\n");
@


1.23
log
@delint; from David Hill
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.22 2005/04/01 03:32:47 deraadt Exp $	*/
d205 1
@


1.22
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.21 2004/08/08 00:19:16 pedro Exp $	*/
d121 1
a121 1
static void selectdrives(int, char **);
d176 1
a176 1
	selectdrives(argc, argv);
d240 1
a240 1
		if (cur.dk_select[i])
d245 1
a245 1

d248 1
a248 1
		if (cur.dk_select[i])
d250 1
a250 1

d322 1
a322 1
	double time;
a323 1
	time = 0;
d325 3
a327 3
		time += cur.cp_time[state];
	if (!time)
		time = 1.0;
d330 1
a330 1
		printf("%3.0f", 100. * cur.cp_time[state] / time);
d380 1
a380 1
selectdrives(int argc, char *argv[])
@


1.21
log
@do the right math to find out what the average kbytes per transfer is
problem found and fix tested by naddy@@, ok deraadt@@ jolan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.20 2004/08/01 18:32:19 deraadt Exp $	*/
d199 2
a200 1
		if (last.dk_ndrive != cur.dk_ndrive) wantheader = 1;
d313 1
a313 1
			((double)cur.dk_time[dn].tv_usec / (double)1000000);
@


1.20
log
@ansi cleanup; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.19 2004/02/15 02:45:47 tedu Exp $	*/
d267 1
a267 1
			mbps = ((cur.dk_rxfer[dn] + cur.dk_wxfer[dn]) /
d271 1
@


1.19
log
@new arg to disk_unbusy, to record separate read/write statistics.
looked at by various, testing henning@@ mcbride@@ dan weeks
mostly from netbsd via Pedro Martelletto <pbastos@@rdc.puc-rio.br>
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.18 2003/06/26 19:47:09 deraadt Exp $	*/
d205 1
a205 2
sigheader(signo)
	int signo;
d256 1
a256 2
disk_stats(etime)
double etime;
d292 1
a292 2
disk_stats2(etime)
double etime;
d317 1
a317 1
cpustats()
d333 1
a333 1
usage()
d341 1
a341 1
display()
d379 1
a379 3
selectdrives(argc, argv)
int	argc;
char	*argv[];
@


1.18
log
@strict proto cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.17 2003/06/02 23:36:53 millert Exp $	*/
d268 3
a270 2
		if (cur.dk_xfer[dn])
			mbps = (cur.dk_bytes[dn] / (1024.0)) / cur.dk_xfer[dn];
d276 2
a277 1
		(void)printf(" %3.0f", cur.dk_xfer[dn] / etime);
d285 2
a286 1
			mbps = cur.dk_bytes[dn] / (double)(1024 * 1024);
d305 2
a306 1
		(void)printf(" %4.0f", cur.dk_bytes[dn] / (1024.0) / etime);
d309 2
a310 1
		(void)printf(" %3.0f", cur.dk_xfer[dn] / etime);
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.16 2002/12/16 01:57:05 tdeval Exp $	*/
d118 1
a118 1
static void header();
d128 1
a128 3
main(argc, argv)
	int argc;
	char *argv[];
@


1.16
log
@Make systat(1), iostat(8) and vmstat(8) automatically update their disk
statistics when a device is added/removed.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.15 2002/08/04 00:51:01 deraadt Exp $	*/
d48 1
a48 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.15
log
@only open kvm once between these two
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.14 2002/05/30 19:09:05 deraadt Exp $	*/
d99 1
a99 1
extern struct _disk cur;
d205 1
@


1.14
log
@minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.13 2002/03/14 16:44:25 mpech Exp $	*/
d94 1
d103 1
@


1.13
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.12 2002/02/16 21:28:03 millert Exp $	*/
d99 1
a99 1
extern int  	dk_ndrive;
d275 1
a275 1
		(void)printf(" %5.2f", mbps); 
d287 1
a287 1
		else 
d365 1
a365 1
	
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.11 2001/11/17 19:49:38 deraadt Exp $	*/
d217 1
a217 1
	register int i;
d263 1
a263 1
	register int dn;
d297 1
a297 1
	register int dn;
d320 1
a320 1
	register int state;
@


1.11
log
@use volatile sig_atomic_t where possible; simply volatile i other places
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.10 2001/11/14 20:04:40 deraadt Exp $	*/
d116 12
a127 12
static void cpustats __P((void));
static void disk_stats __P((double));
static void disk_stats2 __P((double));
static void sigheader __P((int));
static void header __P(());
static void usage __P((void));
static void display __P((void));
static void selectdrives __P((int, char **));

void dkswap __P((void));
void dkreadstats __P((void));
int dkinit __P((int));
@


1.10
log
@kill signal race.  insanely, the code becomes simpler
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.9 2001/05/14 07:22:06 angelos Exp $	*/
d106 2
a107 1
static int	wantheader;
@


1.9
log
@No need for setgid kmem anymore, we can use sysctl to get all the
relevant information.
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.8 1998/07/08 22:13:27 deraadt Exp $	*/
d106 1
d118 2
a119 1
static void header __P((int));
d185 1
a185 1
	(void)signal(SIGCONT, header);
d188 2
a189 2
		if (!--hdrcnt) {
			header(0);
d191 1
d207 1
a207 1
header(signo)
d209 6
@


1.8
log
@whack kmem gid after kvm_openfiles()
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.7 1997/01/15 23:44:01 millert Exp $	*/
a174 9
	/*
	 * Discard setgid privileges if not the running kernel so that bad
	 * guys can't print interesting stuff from kernel memory.
	 */
	if (nlistf != NULL || memf != NULL) {
		setegid(getgid());
		setgid(getgid());
	}

a175 4

	setegid(getgid());
	setgid(getgid());

@


1.7
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.6 1996/12/22 03:28:56 deraadt Exp $	*/
d185 4
@


1.6
log
@Deal with _POSIX_SAVED_IDS when relinquishing privileges
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.5 1996/11/02 00:35:50 millert Exp $	*/
d134 1
a134 1
	while ((ch = getopt(argc, argv, "Cc:dDIM:N:Tw:")) != EOF)
@


1.5
log
@"K" and "Kb" -> "KB" as well as "Mb" -> "MB" so people don't get confused
and thing we are talking about *bits as opposed to *bytes.  From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: iostat.c,v 1.4 1996/08/11 22:32:42 niklas Exp $	*/
d179 2
a180 1
	if (nlistf != NULL || memf != NULL)
d182 1
@


1.4
log
@There are disk devicenames wider than three chars
@
text
@d1 2
a2 2
/*	$OpenBSD: iostat.c,v 1.3 1996/05/22 11:35:49 deraadt Exp $ */
/*	$NetBSD: iostat.c,v 1.9 1996/05/10 23:20:29 thorpej Exp $	*/
d79 1
a79 1
static char *rcsid = "$NetBSD: iostat.c,v 1.9 1996/05/10 23:20:29 thorpej Exp $"
d242 1
a242 1
				(void)printf("   K/t xfr Mb   ");
d244 1
a244 1
				(void)printf("   K/t t/s Mb/s ");
d249 1
a249 1
			(void)printf("   Kb xfr time ");
@


1.3
log
@libutil
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d223 1
a223 1
			(void)printf("            %3.3s ", cur.dk_name[i]);
d228 1
a228 1
			(void)printf("           %3.3s ", cur.dk_name[i]);
@


1.2
log
@WOrking disk statistics; NetBSD PR 2161
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: iostat.c,v 1.8 1995/11/28 20:16:31 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1996 John M. Vinopal (banshee@@resort.com)
d79 1
a79 1
static char *rcsid = "$NetBSD: iostat.c,v 1.8 1995/11/28 20:16:31 thorpej Exp $"
d101 2
a102 2
char	*nlistf = NULL;
char	*memf = NULL;
@


1.1
log
@Initial revision
@
text
@d1 35
d38 1
a38 1
 *	The Regents of the University of California.  All rights reserved.
d50 2
a51 2
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d72 1
a72 1
	The Regents of the University of California.  All rights reserved.\n";
d76 6
a81 2
/* from: static char sccsid[] = "@@(#)iostat.c	8.2 (Berkeley) 1/26/94"; */
static char *rcsid = "$Id: iostat.c,v 1.7 1995/01/18 07:46:31 mycroft Exp $";
a83 2
#include <sys/param.h>
#include <sys/buf.h>
d85 1
a88 5
#include <fcntl.h>
#include <kvm.h>
#include <limits.h>
#include <nlist.h>
#include <paths.h>
d95 1
a95 44
struct nlist namelist[] = {
#define	X_DK_TIME	0
	{ "_dk_time" },
#define	X_DK_XFER	1
	{ "_dk_xfer" },
#define	X_DK_WDS	2
	{ "_dk_wds" },
#define	X_TK_NIN	3
	{ "_tk_nin" },
#define	X_TK_NOUT	4
	{ "_tk_nout" },
#define	X_DK_SEEK	5
	{ "_dk_seek" },
#define	X_CP_TIME	6
	{ "_cp_time" },
#define	X_DK_WPMS	7
	{ "_dk_wpms" },
#define	X_HZ		8
	{ "_hz" },
#define	X_STATHZ	9
	{ "_stathz" },
#define	X_DK_NDRIVE	10
	{ "_dk_ndrive" },
#define	X_END		10
#if defined(hp300) || defined(luna68k)
#define	X_HPDINIT	(X_END+1)
	{ "_hp_dinit" },
#endif
#ifdef mips
#define	X_SCSI_DINIT	(X_END+1)
	{ "_scsi_dinit" },
#endif
#ifdef tahoe
#define	X_VBDINIT	(X_END+1)
	{ "_vbdinit" },
#endif
#ifdef vax
	{ "_mbdinit" },
#define X_MBDINIT	(X_END+1)
	{ "_ubdinit" },
#define X_UBDINIT	(X_END+2)
#endif
	{ NULL },
};
d97 28
a124 25
struct _disk {
	long	cp_time[CPUSTATES];
	long	*dk_time;
	long	*dk_wds;
	long	*dk_seek;
	long	*dk_xfer;
	long	tk_nin;
	long	tk_nout;
} cur, last;

kvm_t	 *kd;
double	  etime;
long	 *dk_wpms;
int	  dk_ndrive, *dr_select, hz, kmemfd, ndrives;
char	**dr_name;

#define nlread(x, v) \
	kvm_read(kd, namelist[x].n_value, &(v), sizeof(v))

#include "names.c"				/* XXX */

void cpustats __P((void));
void dkstats __P((void));
void phdr __P((int));
void usage __P((void));
d131 4
a134 9
	register int i;
	long tmp;
	int ch, hdrcnt, reps, interval, stathz, ndrives;
	char **cp, *memf, *nlistf, buf[30];
        char errbuf[_POSIX2_LINE_MAX];

	interval = reps = 0;
	nlistf = memf = NULL;
	while ((ch = getopt(argc, argv, "c:M:N:w:")) != EOF)
d140 12
d158 3
d172 3
d182 3
a184 35
        kd = kvm_openfiles(nlistf, memf, NULL, O_RDONLY, errbuf);
	if (kd == 0)
		errx(1, "kvm_openfiles: %s", errbuf);
	if (kvm_nlist(kd, namelist) == -1)
		errx(1, "kvm_nlist: %s", kvm_geterr(kd));
	if (namelist[X_DK_NDRIVE].n_type == 0)
		errx(1, "dk_ndrive not found in namelist");
	(void)nlread(X_DK_NDRIVE, dk_ndrive);
	if (dk_ndrive <= 0)
		errx(1, "invalid dk_ndrive %d\n", dk_ndrive);

	cur.dk_time = calloc(dk_ndrive, sizeof(long));
	cur.dk_wds = calloc(dk_ndrive, sizeof(long));
	cur.dk_seek = calloc(dk_ndrive, sizeof(long));
	cur.dk_xfer = calloc(dk_ndrive, sizeof(long));
	last.dk_time = calloc(dk_ndrive, sizeof(long));
	last.dk_wds = calloc(dk_ndrive, sizeof(long));
	last.dk_seek = calloc(dk_ndrive, sizeof(long));
	last.dk_xfer = calloc(dk_ndrive, sizeof(long));
	dr_select = calloc(dk_ndrive, sizeof(int));
	dr_name = calloc(dk_ndrive, sizeof(char *));
	dk_wpms = calloc(dk_ndrive, sizeof(long));

	for (i = 0; i < dk_ndrive; i++) {
		(void)sprintf(buf, "dk%d", i);
		dr_name[i] = strdup(buf);
	}
	if (!read_names())
		exit(1);
	(void)nlread(X_HZ, hz);
	(void)nlread(X_STATHZ, stathz);
	if (stathz)
		hz = stathz;
	(void)kvm_read(kd, namelist[X_DK_WPMS].n_value, dk_wpms,
		dk_ndrive * sizeof(dk_wpms));
d186 2
a187 53
	/*
	 * Choose drives to be displayed.  Priority goes to (in order) drives
	 * supplied as arguments and default drives.  If everything isn't
	 * filled in and there are drives not taken care of, display the first
	 * few that fit.
	 *
	 * The backward compatibility #ifdefs permit the syntax:
	 *	iostat [ drives ] [ interval [ count ] ]
	 */
#define	BACKWARD_COMPATIBILITY
	for (ndrives = 0; *argv; ++argv) {
#ifdef	BACKWARD_COMPATIBILITY
		if (isdigit(**argv))
			break;
#endif
		for (i = 0; i < dk_ndrive; i++) {
			if (strcmp(dr_name[i], *argv))
				continue;
			dr_select[i] = 1;
			++ndrives;
		}
	}
#ifdef	BACKWARD_COMPATIBILITY
	if (*argv) {
		interval = atoi(*argv);
		if (*++argv)
			reps = atoi(*argv);
	}
#endif

	if (interval) {
		if (!reps)
			reps = -1;
	} else
		if (reps)
			interval = 1;

	for (i = 0; i < dk_ndrive && ndrives < 4; i++) {
		if (dr_select[i] || dk_wpms[i] == 0)
			continue;
		for (cp = defdrives; *cp; cp++)
			if (strcmp(dr_name[i], *cp) == 0) {
				dr_select[i] = 1;
				++ndrives;
				break;
			}
	}
	for (i = 0; i < dk_ndrive && ndrives < 4; i++) {
		if (dr_select[i])
			continue;
		dr_select[i] = 1;
		++ndrives;
	}
d189 2
a190 1
	(void)signal(SIGCONT, phdr);
d194 1
a194 1
			phdr(0);
d197 4
a200 43
		(void)kvm_read(kd, namelist[X_DK_TIME].n_value,
		    cur.dk_time, dk_ndrive * sizeof(long));
		(void)kvm_read(kd, namelist[X_DK_XFER].n_value,
		    cur.dk_xfer, dk_ndrive * sizeof(long));
		(void)kvm_read(kd, namelist[X_DK_WDS].n_value,
		    cur.dk_wds, dk_ndrive * sizeof(long));
		(void)kvm_read(kd, namelist[X_DK_SEEK].n_value,
		    cur.dk_seek, dk_ndrive * sizeof(long));
		(void)kvm_read(kd, namelist[X_TK_NIN].n_value,
		    &cur.tk_nin, sizeof(cur.tk_nin));
		(void)kvm_read(kd, namelist[X_TK_NOUT].n_value,
		    &cur.tk_nout, sizeof(cur.tk_nout));
		(void)kvm_read(kd, namelist[X_CP_TIME].n_value,
		    cur.cp_time, sizeof(cur.cp_time));
		for (i = 0; i < dk_ndrive; i++) {
			if (!dr_select[i])
				continue;
#define X(fld)	tmp = cur.fld[i]; cur.fld[i] -= last.fld[i]; last.fld[i] = tmp
			X(dk_xfer);
			X(dk_seek);
			X(dk_wds);
			X(dk_time);
		}
		tmp = cur.tk_nin;
		cur.tk_nin -= last.tk_nin;
		last.tk_nin = tmp;
		tmp = cur.tk_nout;
		cur.tk_nout -= last.tk_nout;
		last.tk_nout = tmp;
		etime = 0;
		for (i = 0; i < CPUSTATES; i++) {
			X(cp_time);
			etime += cur.cp_time[i];
		}
		if (etime == 0.0)
			etime = 1.0;
		etime /= (float)hz;
		(void)printf("%4.0f%5.0f",
		    cur.tk_nin / etime, cur.tk_nout / etime);
		dkstats();
		cpustats();
		(void)printf("\n");
		(void)fflush(stdout);
d204 2
a205 1
		(void)sleep(interval);
d210 2
a211 3
/* ARGUSED */
void
phdr(signo)
d216 23
a238 1
	(void)printf("      tty");
d240 7
a246 3
		if (dr_select[i])
			(void)printf("          %3.3s ", dr_name[i]);
	(void)printf("         cpu\n tin tout");
d248 6
a253 3
		if (dr_select[i])
			(void)printf(" sps tps msps ");
	(void)printf(" us ni sy in id\n");
d256 3
a258 2
void
dkstats()
d261 1
a261 1
	double atime, itime, msps, words, xtime;
d264 1
a264 1
		if (!dr_select[dn])
d266 45
a310 18
		words = cur.dk_wds[dn] * 32;		/* words xfer'd */
		(void)printf("%4.0f",			/* sectors */
		    words / (DEV_BSIZE / 2) / etime);

		(void)printf("%4.0f", cur.dk_xfer[dn] / etime);

		if (dk_wpms[dn] && cur.dk_xfer[dn]) {
			atime = cur.dk_time[dn];	/* ticks disk busy */
			atime /= (float)hz;		/* ticks to seconds */
			xtime = words / dk_wpms[dn];	/* transfer time */
			itime = atime - xtime;		/* time not xfer'ing */
			if (itime < 0)
				msps = 0;
			else 
				msps = itime * 1000 / cur.dk_xfer[dn];
		} else
			msps = 0;
		(void)printf("%5.1f ", msps);
d314 1
a314 1
void
d323 3
d327 1
a327 2
		(void)printf("%3.0f",
		    100. * cur.cp_time[state] / (time ? time : 1));
d330 1
a330 1
void
d334 1
a334 1
"usage: iostat [-c count] [-M core] [-N system] [-w wait] [drives]\n");
d336 92
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
