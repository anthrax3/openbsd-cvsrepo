head	1.24;
access;
symbols
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.14.0.8
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.6
	OPENBSD_5_0:1.14.0.4
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.2
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.13.0.12
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.8
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.10
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.6
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.4
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.2
	OPENBSD_4_3_BASE:1.13;
locks; strict;
comment	@ * @;


1.24
date	2016.10.28.08.01.53;	author rzalamena;	state Exp;
branches;
next	1.23;
commitid	SMslalgbhOIf4OXA;

1.23
date	2015.12.05.06.42.18;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	7b4R1o84KuZAdiL5;

1.22
date	2015.10.08.08.17.30;	author sthen;	state Exp;
branches;
next	1.21;
commitid	zteDEVyy8dewN13K;

1.21
date	2015.07.18.16.54.43;	author blambert;	state Exp;
branches;
next	1.20;
commitid	J9SFNne3x3I2oyDh;

1.20
date	2015.01.16.00.05.13;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	khLbW7SmDyckNaAs;

1.19
date	2014.11.19.10.19.00;	author blambert;	state Exp;
branches;
next	1.18;
commitid	cXioMeUnRYhFJvcH;

1.18
date	2013.10.02.09.36.21;	author reyk;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.01.11.36.55;	author reyk;	state Exp;
branches;
next	1.16;

1.16
date	2012.09.17.16.43.59;	author reyk;	state Exp;
branches;
next	1.15;

1.15
date	2012.09.17.16.30.34;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.20.08.56.16;	author martinh;	state Exp;
branches;
next	1.13;

1.13
date	2008.01.18.21.55.42;	author reyk;	state Exp;
branches;
next	1.12;

1.12
date	2008.01.16.09.51.15;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.09.21.47.39;	author reyk;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.04.12.57.40;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.03.14.44.08;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.29.09.24.43;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2007.12.28.16.59.31;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.28.16.27.51;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.07.10.14.27;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.05.23.29.19;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.05.22.54.07;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.05.22.52.50;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.05.09.22.44;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Use snmpd_env as the only global variable for env to simplify the daemon
and avoid problems.

ok jca@@
@
text
@/*	$OpenBSD: mps.c,v 1.23 2015/12/05 06:42:18 mmcc Exp $	*/

/*
 * Copyright (c) 2007, 2008, 2012 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/tree.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_arp.h>
#include <net/if_media.h>
#include <net/route.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <arpa/inet.h>

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <pwd.h>

#include "snmpd.h"
#include "mib.h"

struct ber_oid *
	 mps_table(struct oid *, struct ber_oid *, struct ber_oid *);

extern void control_event_add(struct ctl_conn *, int, int, struct timeval *); /* XXX */

int
mps_getstr(struct oid *oid, struct ber_oid *o, struct ber_element **elm)
{
	char			*s = oid->o_data;

	if (s == NULL)
		return (-1);
	*elm = ber_add_string(*elm, s);
	return (0);
}

int
mps_setstr(struct oid *oid, struct ber_oid *o, struct ber_element **elm)
{
	struct ber_element	*ber = *elm;
	char			*s, *v;

	if ((oid->o_flags & OID_WR) == 0)
		return (-1);

	if (ber->be_class != BER_CLASS_UNIVERSAL ||
	    ber->be_type != BER_TYPE_OCTETSTRING)
		return (-1);
	if (ber_get_string(ber, &s) == -1)
		return (-1);
	if ((v = (void *)strdup(s)) == NULL)
		return (-1);
	free(oid->o_data);
	oid->o_data = v;
	oid->o_val = strlen(v);

	return (0);
}

int
mps_getint(struct oid *oid, struct ber_oid *o, struct ber_element **elm)
{
	*elm = ber_add_integer(*elm, oid->o_val);
	return (0);
}

int
mps_setint(struct oid *oid, struct ber_oid *o, struct ber_element **elm)
{
	long long	 i;

	if (ber_get_integer(*elm, &i) == -1)
		return (-1);
	oid->o_val = i;

	return (0);
}

int
mps_getts(struct oid *oid, struct ber_oid *o, struct ber_element **elm)
{
	*elm = ber_add_integer(*elm, oid->o_val);
	ber_set_header(*elm, BER_CLASS_APPLICATION, SNMP_T_TIMETICKS);
	return (0);
}

int
mps_getreq(struct snmp_message *msg, struct ber_element *root,
    struct ber_oid *o, u_int sm_version)
{
	struct ber_element	*elm = root;
	struct oid		 key, *value;
	unsigned long		 error_type = 0;	/* noSuchObject */

	if (o->bo_n > BER_MAX_OID_LEN)
		return (-1);
	bzero(&key, sizeof(key));
	bcopy(o, &key.o_id, sizeof(struct ber_oid));
	smi_oidlen(&key.o_id);	/* Strip off any trailing .0. */
	value = smi_find(&key);
	if (value == NULL)
		goto fail;

	if (OID_NOTSET(value))
		goto fail;

	if (value->o_flags & OID_REGISTERED) {
		struct agentx_pdu	*pdu;

		if ((pdu = snmp_agentx_get_pdu((struct snmp_oid *)o, 1)) == NULL)
			return (-1);
		pdu->cookie = msg;
		if (snmp_agentx_send(value->o_session->handle, pdu) == -1)
			return (-1);

		control_event_add(value->o_session,
		    value->o_session->handle->fd, EV_WRITE, NULL);
		return (1);
	}

	if (value->o_get == NULL)
		goto fail;

	if (value->o_oidlen == o->bo_n) {
		/* No instance identifier specified. */
		error_type = 1;	/* noSuchInstance */
		goto fail;
	}

	if ((value->o_flags & OID_TABLE) == 0)
		elm = ber_add_oid(elm, o);
	if (value->o_get(value, o, &elm) != 0)
		goto fail;

	return (0);

fail:
	if (sm_version == 0)
		return (-1);

	/* Set SNMPv2 extended error response. */
	elm = ber_add_oid(elm, o);
	elm = ber_add_null(elm);
	ber_set_header(elm, BER_CLASS_CONTEXT, error_type);
	return (0);
}

int
mps_setreq(struct snmp_message *msg, struct ber_element *ber,
    struct ber_oid *o)
{
	struct oid		 key, *value;

	smi_oidlen(o);
	if (o->bo_n > BER_MAX_OID_LEN)
		return (-1);
	bzero(&key, sizeof(key));
	bcopy(o, &key.o_id, sizeof(struct ber_oid));
	value = smi_find(&key);
	if (value == NULL)
		return (-1);
	if ((value->o_flags & OID_WR) == 0 ||
	    value->o_set == NULL)
		return (-1);
	return (value->o_set(value, o, &ber));
}

int
mps_getnextreq(struct snmp_message *msg, struct ber_element *root,
    struct ber_oid *o)
{
	struct oid		*next = NULL;
	struct ber_element	*ber = root;
	struct oid		 key, *value;
	int			 ret;
	struct ber_oid		 no;
	unsigned long		 error_type = 0; 	/* noSuchObject */

	if (o->bo_n > BER_MAX_OID_LEN)
		return (-1);
	bzero(&key, sizeof(key));
	bcopy(o, &key.o_id, sizeof(struct ber_oid));
	smi_oidlen(&key.o_id);	/* Strip off any trailing .0. */
	value = smi_find(&key);
	if (value == NULL)
		goto fail;

	if (value->o_flags & OID_REGISTERED) {
		struct agentx_pdu	*pdu;

		if ((pdu = snmp_agentx_getnext_pdu((struct snmp_oid *)o, 1)) == NULL)
			return (-1);
		pdu->cookie = msg;
		if (snmp_agentx_send(value->o_session->handle, pdu) == -1)
			return (-1);

		control_event_add(value->o_session,
		    value->o_session->handle->fd, EV_WRITE, NULL);
		return (1);
	}

	if (value->o_flags & OID_TABLE) {
		/* Get the next table row for this column */
		if (mps_table(value, o, &no) != NULL) {
			bcopy(&no, o, sizeof(*o));
			ret = value->o_get(value, o, &ber);
		} else
			ret = 1;
		switch (ret) {
		case 0:
			return (0);
		case -1:
			goto fail;
		case 1:	/* end-of-rows */
			break;
		}
	} else if (o->bo_n == value->o_oidlen && value->o_get != NULL) {
		next = value;
		goto appendzero;
	}

 getnext:
	for (next = value; next != NULL;) {
		next = smi_next(next);
		if (next == NULL)
			break;
		if (!OID_NOTSET(next) && next->o_get != NULL)
			break;
	}
	if (next == NULL || next->o_get == NULL)
		goto fail;

	if (next->o_flags & OID_TABLE) {
		/* Get the next table row for this column */
		if (mps_table(next, o, &no) == NULL) {
			value = next;
			goto getnext;
		}
		bcopy(&no, o, sizeof(*o));
		if ((ret = next->o_get(next, o, &ber)) != 0) {
			if (ret == 1) {
				value = next;
				goto getnext;
			}
			goto fail;
		}
	} else {
		bcopy(&next->o_id, o, sizeof(*o));
 appendzero:
		/* No instance identifier specified. Append .0. */
		if (o->bo_n + 1 > BER_MAX_OID_LEN)
			goto fail;
		ber = ber_add_noid(ber, o, ++o->bo_n);
		if ((ret = next->o_get(next, o, &ber)) != 0)
			goto fail;
	}

	return (0);

fail:
	if (msg->sm_version == 0)
		return (-1);

	/* Set SNMPv2 extended error response. */
	ber = ber_add_oid(ber, o);
	ber = ber_add_null(ber);
	ber_set_header(ber, BER_CLASS_CONTEXT, error_type);
	return (0);
}

int
mps_getbulkreq(struct snmp_message *msg, struct ber_element **root,
    struct ber_element **end, struct ber_oid *o, int max)
{
	struct ber_element *c, *d, *e;
	size_t len;
	int j, ret;

	j = max;
	c = *root;
	*end = NULL;

	for (d = NULL, len = 0; j > 0; j--) {
		e = ber_add_sequence(NULL);
		if (c == NULL)
			c = e;
		ret = mps_getnextreq(msg, e, o);
		if (ret == 1) {
			*root = c;
			return (1);
		}
		if (ret == -1) {
			ber_free_elements(e);
			if (d == NULL)
				return (-1);
			break;
		}
		len += ber_calc_len(e);
		if (len > SNMPD_MAXVARBINDLEN) {
			ber_free_elements(e);
			break;
		}
		if (d != NULL)
			ber_link_elements(d, e);
		d = e;
		*end = d;
	}

	*root = c;
	return (0);
}

int
mps_set(struct ber_oid *o, void *p, long long len)
{
	struct oid		 key, *value;

	smi_oidlen(o);
	if (o->bo_n > BER_MAX_OID_LEN)
		return (-1);
	bzero(&key, sizeof(key));
	bcopy(o, &key.o_id, sizeof(struct ber_oid));
	value = smi_find(&key);
	if (value == NULL)
		return (-1);
	free(value->o_data);
	value->o_data = p;
	value->o_val = len;

	return (0);
}

struct ber_oid *
mps_table(struct oid *oid, struct ber_oid *o, struct ber_oid *no)
{
	u_int32_t		 col, idx = 1, id, subid;
	struct oid		 a, b;

	/*
	 * This function is being used to iterate through elements
	 * in a SMI "table". It is called by the mps_getnext() handler.
	 * For example, if the input is sysORIndex, it will return
	 * sysORIndex.1. If the input is sysORIndex.2, it will return
	 * sysORIndex.3 etc.. The MIB code has to verify the index,
	 * see mib_sysor() as an example.
	 */

	if (oid->o_table != NULL)
		return (oid->o_table(oid, o, no));

	bcopy(&oid->o_id, no, sizeof(*no));
	id = oid->o_oidlen - 1;
	subid = oid->o_oidlen;

	if (o->bo_n >= oid->o_oidlen) {
		/*
		 * Compare the requested and the matched OID to see
		 * if we have to iterate to the next element.
		 */
		bzero(&a, sizeof(a));
		bcopy(o, &a.o_id, sizeof(struct ber_oid));
		bzero(&b, sizeof(b));
		bcopy(&oid->o_id, &b.o_id, sizeof(struct ber_oid));
		b.o_oidlen--;
		b.o_flags |= OID_TABLE;
		if (smi_oid_cmp(&a, &b) == 0) {
			col = oid->o_oid[id];
			if (col > o->bo_id[id])
				idx = 1;
			else
				idx = o->bo_id[subid] + 1;
			o->bo_id[subid] = idx;
			o->bo_id[id] = col;
			bcopy(o, no, sizeof(*no));
		}
	}

	/* The root element ends with a 0, iterate to the first element */
	if (!no->bo_id[subid])
		no->bo_id[subid]++;

	smi_oidlen(no);

	return (no);
}

void
mps_encodeinaddr(struct ber_oid *o, struct in_addr *addr, int offset)
{
	u_int32_t	 a, i;

	o->bo_n = offset;
	if (addr != NULL) {
		a = htole32(addr->s_addr);
		o->bo_id[o->bo_n++] = a & 0xff;
		o->bo_id[o->bo_n++] = (a >> 8) & 0xff;
		o->bo_id[o->bo_n++] = (a >> 16) & 0xff;
		o->bo_id[o->bo_n++] = (a >> 24) & 0xff;
	} else {
		/* Create an invalid "last address" marker (5 bytes) */
		for (i = 0; i < 5; i++)
			o->bo_id[o->bo_n++] = 0xff;
	}
}

int
mps_decodeinaddr(struct ber_oid *o, struct in_addr *addr, int offset)
{
	u_int32_t	 a;

	a = ((o->bo_id[offset] & 0xff)) |
	    ((o->bo_id[offset + 1] & 0xff) << 8) |
	    ((o->bo_id[offset + 2] & 0xff) << 16) |
	    ((o->bo_id[offset + 3] & 0xff) << 24);
	addr->s_addr = letoh32(a);

	/* Detect invalid address */
	if ((o->bo_n - offset) > 4)
		return (-1);

	return (0);
}
@


1.23
log
@strings.h -> string.h to prevent an implicit declaration warning. Also
remove a handful of NULL-checks before free().
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.22 2015/10/08 08:17:30 sthen Exp $	*/
a46 2

extern struct snmpd *env;
@


1.22
log
@Link the result of each mps_getbulkreq() to the end of the previous list
and not the start of it. Fixes getbulk requests for multiple OIDs.

From Gerhard Roth, ok blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.21 2015/07/18 16:54:43 blambert Exp $	*/
d82 1
a82 2
	if (oid->o_data != NULL)
		free(oid->o_data);
d355 1
a355 2
	if (value->o_data != NULL)
		free(value->o_data);
@


1.21
log
@Fix malformed packets when returning 'no such object/entry' errors
for snmp requests

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.20 2015/01/16 00:05:13 deraadt Exp $	*/
d303 1
a303 1
    struct ber_oid *o, int max)
d311 1
d318 2
a319 1
		if (ret == 1)
d321 1
d336 1
@


1.20
log
@first batch of cleanup to programs based upon the namespace cleanups
in net/pfvar.h sys/proc.h sys/ucred.h arpa/nameser.h
change to PATH_MAX, reduce use of MIN() and MAX(), HOST_NAME_MAX+1,
LOGIN_NAME_MAX, etc etc
ok millert guenther, some review by doug
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.19 2014/11/19 10:19:00 blambert Exp $	*/
d135 1
a135 1
		return (-1);
d163 1
a163 1
		return (-1);
d207 1
d216 1
a216 1
		return (-1);
d243 1
a243 1
			return (-1);
d261 1
a261 1
		return (-1);
d275 1
a275 1
			return (-1);
d282 1
a282 1
			return (-1);
d285 1
a285 1
			return (-1);
d288 10
@


1.19
log
@add support for AgentX subagents in snmpd

snmp requests are now packaged into pseudo-continuations
to allow for being dispatched to seperate processes;
lightly tested for interoperability with NetSNMP, but
doesn't implement the complete set of AgentX messages

while here, clean up return types of mps_get* functions,
and make smi_insert refuse to insert duplicate OIDs

okay benno@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.18 2013/10/02 09:36:21 reyk Exp $	*/
a19 1
#include <sys/param.h>
@


1.18
log
@Fix GETBULK mode that got broken with r1.14.

ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.17 2012/10/01 11:36:55 reyk Exp $	*/
d54 2
d118 3
a120 2
struct ber_element *
mps_getreq(struct ber_element *root, struct ber_oid *o, u_int sm_version)
d127 1
a127 1
		return (NULL);
d133 2
a134 1
		return (NULL);
d136 15
a150 1
		return (NULL);
d164 1
a164 1
		return (NULL);
d166 1
a166 1
	return (elm);
d170 1
a170 1
		return NULL;
d176 1
a176 1
	return (elm);
d180 2
a181 1
mps_setreq(struct ber_element *ber, struct ber_oid *o)
d199 3
a201 2
struct ber_element *
mps_getnextreq(struct ber_element *root, struct ber_oid *o)
d210 1
a210 1
		return (NULL);
d216 16
a231 1
		return (NULL);
d241 1
a241 1
			return (ber);
d243 1
a243 1
			return (NULL);
d261 1
a261 1
		return (NULL);
d275 1
a275 1
			return (NULL);
d282 1
a282 1
			return (NULL);
d285 38
a322 1
			return (NULL);
d325 2
a326 1
	return (ber);
@


1.17
log
@Support the 0.0.0.0 and 255.255.255.255 IPv4 addresses in the ipAddrTable.
This fixes an issue which aborted the address traversal / SNMP walk when
an "any"/0.0.0.0 address was configured on an interface.  The problem
was found with a pppoe(4) device that is typically configured with 0.0.0.0
on startup.

Found and fix tested by Gerhard Roth
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.16 2012/09/17 16:43:59 reyk Exp $	*/
d213 2
a214 7
		/* No instance identifier specified. Append .0. */
		if (o->bo_n + 1 > BER_MAX_OID_LEN)
			return (NULL);
		ber = ber_add_noid(ber, o, o->bo_n + 1);
		if ((ret = value->o_get(value, o, &ber)) != 0)
			return (NULL);
		return (ber);
d217 1
a217 1
getnext:
d244 5
a248 2
		ber = ber_add_noid(ber, &next->o_id,
		    next->o_oidlen + 1);
@


1.16
log
@Update copyright and my email address in snmpd while I'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.15 2012/09/17 16:30:34 reyk Exp $	*/
d336 1
a336 1
	u_int32_t	 a = htole32(addr->s_addr);
d339 11
a349 4
	o->bo_id[o->bo_n++] = a & 0xff;
	o->bo_id[o->bo_n++] = (a >> 8) & 0xff;
	o->bo_id[o->bo_n++] = (a >> 16) & 0xff;
	o->bo_id[o->bo_n++] = (a >> 24) & 0xff;
d352 1
a352 1
void
d362 6
@


1.15
log
@Add initial SNMPv3 support to snmpd(8).

Traps are still sent via SNMPv2 protocol. They can neither be
authenticated nor encrypted. - Transport mode is still UDP. Not
additional transport subsystems were added. - Only the User-based
Security Model (USM, RFC3414) is supported.  View-Based Access Control
(VACM, RFC3415) is not included. - Configuration is described in
snmpd.conf(5).

This diff includes a few minor changes to ber.c/h adding a necessary
callback for the USM HMAC calculation and merging it with other
minor changes from ldapd's ber code.

From Gerhard Roth at genua
ok claudio@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.14 2010/09/20 08:56:16 martinh Exp $	*/
d4 1
a4 1
 * Copyright (c) 2007, 2008 Reyk Floeter <reyk@@vantronix.net>
@


1.14
log
@Return error on GET requests without an instance identifier, both for
tables and scalar values.

Fixes system/6468 by not calling table get functions with an unexpectedly
short OID.

Also fixes system/6071. Scalar variables without an instance specified now
returns a noSuchInstance error. GetNext requests correctly returns the .0
instance.

This means you can no longer rely on
$ snmpget -v2c -c public localhost SNMPv2-MIB::sysDescr
returning the .0 instance. You need to specify it explicitly:
$ snmpget -v2c -c public localhost SNMPv2-MIB::sysDescr.0

Also return proper SNMPv2 errors per varbind instead of a noSuchName error
status, unless SNMPv1 was specified in the request.

An earlier version of this diff tested by Remi Laurent, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.13 2008/01/18 21:55:42 reyk Exp $	*/
d222 1
d235 4
a238 2
		if (mps_table(next, o, &no) == NULL)
			return (ber);
d240 5
a244 1
		if ((ret = next->o_get(next, o, &ber)) != 0)
d246 1
@


1.13
log
@free oid data before overwriting it
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.12 2008/01/16 09:51:15 reyk Exp $	*/
d117 1
a117 1
mps_getreq(struct ber_element *root, struct ber_oid *o)
d121 1
a122 1
	smi_oidlen(o);
d127 1
d133 10
d144 5
a148 7
		elm = ber_add_noid(elm,
		    &value->o_id, value->o_oidlen + 1);
	if (value->o_get == NULL)
		elm = ber_add_null(elm);
	else
		if (value->o_get(value, o, &elm) != 0)
			return (NULL);
d150 8
a188 1
	smi_oidlen(o);
d193 1
d212 8
@


1.12
log
@bump copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.11 2008/01/09 21:47:39 reyk Exp $	*/
d69 1
a69 1
	char			*s;
d79 1
a79 1
	if ((oid->o_data = (void *)strdup(s)) == NULL)
d81 4
a84 1
	oid->o_val = strlen((char *)oid->o_data);
@


1.11
log
@big endian fixes (tested on sparc64)
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.10 2008/01/04 12:57:40 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2007 Reyk Floeter <reyk@@vantronix.net>
@


1.10
log
@always bzero the oid lookup key before initializing it.
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.9 2008/01/03 14:44:08 reyk Exp $	*/
d300 2
d303 4
a306 4
	o->bo_id[o->bo_n++] = addr->s_addr & 0xff;
	o->bo_id[o->bo_n++] = (addr->s_addr >> 8) & 0xff;
	o->bo_id[o->bo_n++] = (addr->s_addr >> 16) & 0xff;
	o->bo_id[o->bo_n++] = (addr->s_addr >> 24) & 0xff;
d312 3
a314 1
	addr->s_addr = ((o->bo_id[offset] & 0xff)) |
d318 1
@


1.9
log
@scalars have an index of 0 in the returned oid (like sysDescr.0).
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.8 2007/12/29 09:24:43 reyk Exp $	*/
d122 1
d149 1
d172 1
d230 1
@


1.8
log
@add the IP-MIB ipAddrTable.  it requires to encode the ipv4 addresses
in the OIDs as the table index.  the next step is to simplify the
common mib implementation regarding the special requirements of these
strange snmp tables.
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.7 2007/12/28 16:59:31 reyk Exp $	*/
d129 2
a130 1
		elm = ber_add_oid(elm, &value->o_id);
d190 1
a190 1
 next:
d210 2
a211 1
		ber = ber_add_oid(ber, &next->o_id);
@


1.7
log
@split code handling the "structure of management information" and the
"message processing subsystem" into separate files smi.c and mps.c
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.6 2007/12/28 16:27:51 reyk Exp $	*/
d175 5
a179 4
		if (mps_table(value, o, &no) == NULL)
			return (NULL);
		bcopy(&no, o, sizeof(*o));
		ret = value->o_get(value, o, &ber);
d189 1
d203 1
a203 1
			return (NULL);
d252 4
a257 1
	bcopy(&oid->o_id, no, sizeof(*no));
d289 19
@


1.6
log
@split the MIB declarations (names) from the definitions (implementation).
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.5 2007/12/07 10:14:27 reyk Exp $	*/
a48 3
RB_HEAD(oidtree, oid);
RB_PROTOTYPE(oidtree, oid, o_element, mps_oid_cmp);

a49 1
struct oidtree mps_oidtree;
a53 17
u_long
mps_getticks(void)
{
	struct timeval	 now, run;
	u_long		 ticks;

	gettimeofday(&now, NULL);
	if (timercmp(&now, &env->sc_starttime, <=))
		return (0);
	timersub(&now, &env->sc_starttime, &run);
	ticks = run.tv_sec * 100;
	if (run.tv_usec)
		ticks += run.tv_usec / 10000;

	return (ticks);
}

a112 37
void
mps_oidlen(struct ber_oid *o)
{
	size_t	 i;
	for (i = 0; i < BER_MAX_OID_LEN && o->bo_id[i] != 0; i++);
	o->bo_n = i;
}

char *
mps_oidstring(struct ber_oid *o, char *buf, size_t len)
{
	char		 str[256];
	struct oid	*value, key;
	size_t		 i, lookup = 1;

	bzero(buf, len);
	bcopy(o, &key.o_id, sizeof(struct ber_oid));
	key.o_flags |= OID_TABLE;	/* do not match wildcards */

	if (env->sc_flags & SNMPD_F_NONAMES)
		lookup = 0;

	for (i = 0; i < o->bo_n; i++) {
		key.o_oidlen = i + 1;
		if (lookup &&
		    (value = RB_FIND(oidtree, &mps_oidtree, &key)) != NULL)
			snprintf(str, sizeof(str), "%s", value->o_name);
		else
			snprintf(str, sizeof(str), "%d", key.o_oid[i]);
		strlcat(buf, str, len);
		if (i < (o->bo_n - 1))
			strlcat(buf, ".", len);
	}

	return (buf);
}

d119 1
a119 1
	mps_oidlen(o);
d123 1
a123 1
	value = RB_FIND(oidtree, &mps_oidtree, &key);
d144 1
a144 1
	mps_oidlen(o);
d148 1
a148 1
	value = RB_FIND(oidtree, &mps_oidtree, &key);
d166 1
a166 1
	mps_oidlen(o);
d170 1
a170 1
	value = RB_FIND(oidtree, &mps_oidtree, &key);
d189 1
a189 1
		next = RB_NEXT(oidtree, &mps_oidtree, next);
d220 1
a220 1
	mps_oidlen(o);
d224 1
a224 1
	value = RB_FIND(oidtree, &mps_oidtree, &key);
d265 1
a265 1
		if (mps_oid_cmp(&a, &b) == 0) {
d281 1
a281 1
	mps_oidlen(no);
a284 115

void
mps_delete(struct oid *oid)
{
	struct oid	 key, *value;

	bcopy(&oid->o_id, &key.o_id, sizeof(struct ber_oid));
	if ((value = RB_FIND(oidtree, &mps_oidtree, &key)) != NULL &&
	    value == oid)
		RB_REMOVE(oidtree, &mps_oidtree, value);

	if (oid->o_data != NULL)
		free(oid->o_data);
	if (oid->o_flags & OID_DYNAMIC) {
		free(oid->o_name);
		free(oid);
	}
}

void
mps_insert(struct oid *oid)
{
	struct oid		 key, *value;

	if ((oid->o_flags & OID_TABLE) && oid->o_get == NULL)
		fatalx("mps_insert: invalid MIB table");

	bcopy(&oid->o_id, &key.o_id, sizeof(struct ber_oid));
	value = RB_FIND(oidtree, &mps_oidtree, &key);
	if (value != NULL)
		mps_delete(value);

	RB_INSERT(oidtree, &mps_oidtree, oid);
}

void
mps_mibtree(struct oid *oids)
{
	struct oid	*oid, *decl;
	size_t		 i;

	for (i = 0; oids[i].o_oid[0] != 0; i++) {
		oid = &oids[i];
		mps_oidlen(&oid->o_id);
		if (oid->o_name != NULL) {
			if ((oid->o_flags & OID_TABLE) && oid->o_get == NULL)
				fatalx("mps_mibtree: invalid MIB table");
			RB_INSERT(oidtree, &mps_oidtree, oid);
			continue;
		}
		decl = RB_FIND(oidtree, &mps_oidtree, oid);
		if (decl == NULL)
			fatalx("mps_mibtree: undeclared MIB");
		decl->o_flags = oid->o_flags;
		decl->o_get = oid->o_get;
		decl->o_set = oid->o_set;
		decl->o_val = oid->o_val;
		decl->o_data = oid->o_data;
	}
}

int
mps_init(void)
{
	RB_INIT(&mps_oidtree);
	mib_init();
	return (0);
}

struct oid *
mps_foreach(struct oid *oid, u_int flags)
{
	/*
	 * Traverse the tree of MIBs with the option to check
	 * for specific OID flags.
	 */
	if (oid == NULL) {
		oid = RB_MIN(oidtree, &mps_oidtree);
		if (oid == NULL)
			return (NULL);
		if (flags == 0 || (oid->o_flags & flags))
			return (oid);
	}
	for (;;) {
		oid = RB_NEXT(oidtree, &mps_oidtree, oid);
		if (oid == NULL)
			break;
		if (flags == 0 || (oid->o_flags & flags))
			return (oid);
	}

	return (oid);
}

long
mps_oid_cmp(struct oid *a, struct oid *b)
{
	size_t	 i;

	for (i = 0; i < MIN(a->o_oidlen, b->o_oidlen); i++)
		if (a->o_oid[i] != b->o_oid[i])
			return (a->o_oid[i] - b->o_oid[i]);

	/*
	 * Return success if the matched object is a table
	 * (it will match any sub-elements)
	 */
	if ((b->o_flags & OID_TABLE) &&
	    (a->o_flags & OID_TABLE) == 0)
		return (0);

	return (a->o_oidlen - b->o_oidlen);
}

RB_GENERATE(oidtree, oid, o_element, mps_oid_cmp);
@


1.5
log
@type
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.4 2007/12/05 23:29:19 reyk Exp $	*/
d381 1
a381 1
	struct oid	*oid;
d384 1
a384 1
	for (i = 0; oids[i].o_name != NULL; i++) {
d387 14
a400 3
		if ((oid->o_flags & OID_TABLE) && oid->o_get == NULL)
			fatalx("mps_mibtree: invalid MIB table");
		RB_INSERT(oidtree, &mps_oidtree, oid);
@


1.4
log
@more typos in comments etc.

From Leonardo Chiquitto (leonardo at ngdn dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.3 2007/12/05 22:54:07 reyk Exp $	*/
d296 1
a296 2
	u_int32_t		 col, idx = 1;
	size_t			 id, subid;
@


1.3
log
@typo s/beeing/being/g

From Paul 'WEiRD' de Weerd
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.2 2007/12/05 22:52:50 reyk Exp $	*/
d304 1
a304 1
	 * sysORIndex.1. If the inpurt is sysORIndex.2, it will return
@


1.2
log
@- add support joel's OPENBSD-SENSORS-MIB; it will dump the current
sensor status in a SNMP table.
- some other minor changes
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.1 2007/12/05 09:22:44 reyk Exp $	*/
d301 1
a301 1
	 * This function is beeing used to iterate through elements
@


1.1
log
@Start working on snmpd(8) and snmpctl(8), a lightweight SNMP implementation
for OpenBSD.  SNMP is a necessary evil.  This is work in progress, don't
expect too much from it yet.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mps.c,v 1.6 2007/11/12 20:08:34 reyk Exp $	*/
d380 1
a380 1
mps_mibtree(struct oid *oids, size_t n)
d385 1
a385 1
	for (i = 0; i < n; i++) {
@

