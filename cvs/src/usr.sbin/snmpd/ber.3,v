head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.14
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.12
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.8
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.10
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@.\" @;


1.13
date	2013.10.01.12.48.27;	author reyk;	state Exp;
branches;
next	1.12;

1.12
date	2013.07.16.11.13.34;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2012.09.28.09.48.32;	author camield;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.17.16.30.34;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.25.09.59.55;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.24.14.44.41;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.24.14.09.45;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.18.16.57.58;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.14.15.22.22;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.09.13.03.01;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.05.23.29.19;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.05.22.54.07;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2007.12.05.09.22.44;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.13
log
@add ber_oid_cmp() to the list
@
text
@.\" $OpenBSD: ber.3,v 1.12 2013/07/16 11:13:34 schwarze Exp $
.\"
.\" Copyright (c) 2007, 2012 Reyk Floeter <reyk@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: July 16 2013 $
.Dt BER 3
.Os
.Sh NAME
.Nm ber_get_element ,
.Nm ber_set_header ,
.Nm ber_link_elements ,
.Nm ber_unlink_elements ,
.Nm ber_replace_elements ,
.Nm ber_add_sequence ,
.Nm ber_add_set ,
.Nm ber_add_integer ,
.Nm ber_get_integer ,
.Nm ber_add_boolean ,
.Nm ber_get_boolean ,
.Nm ber_add_string ,
.Nm ber_add_nstring ,
.Nm ber_add_bitstring ,
.Nm ber_get_string ,
.Nm ber_get_nstring ,
.Nm ber_get_bitstring ,
.Nm ber_add_null ,
.Nm ber_get_null ,
.Nm ber_add_eoc ,
.Nm ber_get_eoc ,
.Nm ber_add_oid ,
.Nm ber_add_oidstring ,
.Nm ber_get_oid ,
.Nm ber_oid2ber ,
.Nm ber_string2oid ,
.Nm ber_printf_elements ,
.Nm ber_scanf_elements ,
.Nm ber_get_writebuf ,
.Nm ber_write_elements ,
.Nm ber_set_readbuf ,
.Nm ber_read_elements ,
.Nm ber_getpos ,
.Nm ber_free_elements ,
.Nm ber_calc_len ,
.Nm ber_set_application ,
.Nm ber_set_writecallback
.Nm ber_free
.Nd parse ASN.1 with Basic Encoding Rules
.Sh SYNOPSIS
.Fd #include <ber.h>
.Ft "struct ber_element *"
.Fn "ber_get_element" "unsigned long encoding"
.Ft "void"
.Fn "ber_set_header" "struct ber_element *elm" "int class" "unsigned long type"
.Ft "void"
.Fn "ber_link_elements" "struct ber_element *prev" "struct ber_element *elm"
.Ft "struct ber_element *"
.Fn "ber_unlink_elements" "struct ber_element *prev"
.Ft "void"
.Fn "ber_replace_elements" "struct ber_element *prev" "struct ber_element *elm"
.Ft "struct ber_element *"
.Fn "ber_add_sequence" "struct ber_element *prev"
.Ft "struct ber_element *"
.Fn "ber_add_set" "struct ber_element *prev"
.Ft "struct ber_element *"
.Fn "ber_add_integer" "struct ber_element *prev" "long long val"
.Ft "int"
.Fn "ber_get_integer" "struct ber_element *root" "long long *val"
.Ft "struct ber_element *"
.Fn "ber_add_boolean" "struct ber_element *prev" "int bool"
.Ft "int"
.Fn "ber_get_boolean" "struct ber_element *root" "int *bool"
.Ft "struct ber_element *"
.Fn "ber_add_string" "struct ber_element *prev" "const char *string"
.Ft "struct ber_element *"
.Fn "ber_add_nstring" "struct ber_element *prev" "const char *string" "size_t size"
.Ft "int"
.Fn "ber_get_string" "struct ber_element *root" "char **charbuf"
.Ft "int"
.Fn "ber_get_nstring" "struct ber_element *root" "void **buf" "size_t *size"
.Ft "struct ber_element *"
.Fn "ber_add_bitstring" "struct ber_element *prev" "const void *buf" "size_t size"
.Ft "int"
.Fn "ber_get_bitstring" "struct ber_element *root" "void **buf" "size_t *size"
.Ft "struct ber_element *"
.Fn "ber_add_null" "struct ber_element *prev"
.Ft "int"
.Fn "ber_get_null" "struct ber_element *root"
.Ft "struct ber_element *"
.Fn "ber_add_eoc" "struct ber_element *prev"
.Ft "int"
.Fn "ber_get_eoc" "struct ber_element *root"
.Ft "struct ber_element *"
.Fn "ber_add_oid" "struct ber_element *prev" "struct ber_oid *oid"
.Ft "struct ber_element *"
.Fn "ber_add_oidstring" "struct ber_element *prev" "const char *string"
.Ft "int"
.Fn "ber_get_oid" "struct ber_element *root" "struct ber_oid *oid"
.Ft "size_t"
.Fn "ber_oid2ber" "struct ber_oid *oid" "u_int8_t *buf" "size_t size"
.Ft "int"
.Fn "ber_string2oid" "const char *string" "struct ber_oid *oid"
.Ft "struct ber_element *"
.Fn "ber_printf_elements" "struct ber_element *prev" "char *format" "..."
.Ft "int"
.Fn "ber_scanf_elements" "struct ber_element *root" "char *format" "..."
.Ft "ssize_t"
.Fn "ber_get_writebuf" "struct ber *ber" "void **buf"
.Ft "int"
.Fn "ber_write_elements" "struct ber *ber" "struct ber_element *root"
.Ft "void"
.Fn "ber_set_readbuf" "struct ber *ber" "void *buf" "size_t len"
.Ft "struct"
.Fn "ber_element *ber_read_elements" "struct ber *ber" "struct ber_element *root"
.Ft off_t
.Fn "ber_getpos" "struct ber_element *elm"
.Ft "void"
.Fn "ber_free_elements" "struct ber_element *root"
.Ft "size_t"
.Fn "ber_calc_len" "struct ber_element *root"
.Ft "void"
.Fn "ber_set_application" "struct ber *ber" "unsigned long (*cb)(struct ber_element *)"
.Ft "void"
.Fn "ber_set_writecallback" "struct ber_element *elm" "void (*cb)(void *arg, size_t offs)" "void *arg"
.Ft "void"
.Fn "ber_free" "struct ber *ber"
.Sh DESCRIPTION
The
.Nm ber
API provides a mechanism to read and write ASN.1 streams and buffers
using the
.Ic Basic Encoding Rules .
.Sh BER ELEMENTS
.Fn ber_get_element ,
.Fn ber_set_header ,
.Fn ber_link_elements ,
.Fn ber_unlink_elements ,
.Fn ber_replace_elements ,
.Fn ber_calc_len
.Sh BER TYPES
.Fn ber_add_sequence ,
.Fn ber_add_set ,
.Fn ber_add_integer ,
.Fn ber_get_integer ,
.Fn ber_add_boolean ,
.Fn ber_get_boolean ,
.Fn ber_add_string ,
.Fn ber_add_nstring ,
.Fn ber_add_bitstring ,
.Fn ber_get_string ,
.Fn ber_get_nstring ,
.Fn ber_get_bitstring ,
.Fn ber_add_null ,
.Fn ber_get_null ,
.Fn ber_add_eoc ,
.Fn ber_get_eoc
.Sh OBJECT IDS
Object Identifiers are commonly used in ASN.1-based protocols.
These functions provide an interface to parse OIDs.
For internal representation of OIDs, the following structure
.Ft struct ber_oid
is being used:
.Bd -literal
#define BER_MIN_OID_LEN		2
#define BER_MAX_OID_LEN		32

struct ber_oid {
	u_int32_t	bo_id[BER_MAX_OID_LEN + 1];
	size_t		bo_n;
};
.Ed
.Pp
.Fn ber_add_oid ,
.Fn ber_add_oidstring ,
.Fn ber_get_oid ,
.Fn ber_oid2ber ,
.Fn ber_oid_cmp ,
.Fn ber_string2oid
.Sh FORMAT STRINGS
.Fn ber_printf_elements ,
.Fn ber_scanf_elements
.Sh I/O OPERATIONS
.Fn ber_get_writebuf ,
.Fn ber_write_elements ,
.Fn ber_set_readbuf ,
.Fn ber_read_elements ,
.Fn ber_getpos ,
.Fn ber_free_elements ,
.Fn ber_set_application ,
.Fn ber_set_writecallback ,
.Fn ber_free
.Sh RETURN VALUES
Upon successful completion
.Fn ber_get_integer ,
.Fn ber_get_boolean ,
.Fn ber_get_string ,
.Fn ber_get_nstring ,
.Fn ber_get_bitstring ,
.Fn ber_get_null ,
.Fn ber_get_eoc ,
.Fn ber_get_oid ,
.Fn ber_string2oid
and
.Fn ber_scanf_elements
return 0, while
.Fn ber_write_elements
returns the number of bytes written.
Otherwise, \-1 is returned and the global variable errno is
set to indicate the error.
.Sh SEE ALSO
.Xr socket 2
.Sh HISTORY
The
.Nm ber
manpage first appeared in
.Ox 4.3 .
.Sh AUTHORS
.An -nosplit
The
.Nm ber
library was written by
.An Claudio Jeker Aq Mt claudio@@openbsd.org ,
.An Marc Balmer Aq Mt marc@@openbsd.org
and
.An Reyk Floeter Aq Mt reyk@@openbsd.org .
.Sh BUGS
This manpage is a stub.
@


1.12
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.11 2012/09/28 09:48:32 camield Exp $
d17 1
a17 1
.Dd $Mdocdate: September 28 2012 $
d188 1
@


1.11
log
@sync manpage with code

ok reyk
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.10 2012/09/17 16:30:34 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: September 17 2012 $
d232 2
a233 2
.An Claudio Jeker Aq claudio@@openbsd.org ,
.An Marc Balmer Aq marc@@openbsd.org
d235 1
a235 1
.An Reyk Floeter Aq reyk@@openbsd.org .
@


1.10
log
@Add initial SNMPv3 support to snmpd(8).

Traps are still sent via SNMPv2 protocol. They can neither be
authenticated nor encrypted. - Transport mode is still UDP. Not
additional transport subsystems were added. - Only the User-based
Security Model (USM, RFC3414) is supported.  View-Based Access Control
(VACM, RFC3415) is not included. - Configuration is described in
snmpd.conf(5).

This diff includes a few minor changes to ber.c/h adding a necessary
callback for the USM HMAC calculation and merging it with other
minor changes from ldapd's ber code.

From Gerhard Roth at genua
ok claudio@@ reyk@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.9 2010/02/25 09:59:55 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: February 25 2010 $
d176 1
a176 1
#define BER_MAX_OID_LEN		128
@


1.9
log
@a little cleanup;
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.8 2010/02/24 14:44:41 schwarze Exp $
d3 1
a3 1
.\" Copyright (c) 2007 Reyk Floeter <reyk@@vantronix.net>
d17 1
a17 1
.Dd $Mdocdate: February 24 2010 $
d53 1
d57 1
d126 2
d135 2
d197 1
d200 1
a236 1
The code is buggy and incomplete.
@


1.8
log
@manual pages should not have blank lines outside literal context,
and .Pp is not needed before or after .Sh;
found by mandoc -Tlint;
"please fix" jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.7 2010/02/24 14:09:45 jmc Exp $
d57 1
a57 1
.Nd Parse ASN.1 with Basic Encoding Rules.
d208 1
a208 1
.Fn ber_write_elements  
d220 1
d223 1
a223 1
library was written by 
@


1.7
log
@match code and doc; ok claudio
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.6 2008/03/18 16:57:58 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: March 18 2008 $
a144 2
.Pp

a161 1

a182 2
.Pp

a185 2
.Pp

a193 2
.Pp

@


1.6
log
@remove ber_add_astring and make it the default behaviour in
ber_add_string, ber_add_nstring, and ber_add_bitstring to allocate and
copy the provided buffer instead of just attaching it to the ber
element.  this may add some overhead but fixes and avoids some bugs
with static buffers and simplifies the ber api again.

From Matthew at Dempsky dot org
With input from claudio@@
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.5 2008/03/14 15:22:22 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: March 14 2008 $
d213 1
a213 2
.Fn ber_string2oid ,
.Fn ber_scanf_elements ,
d215 4
a218 2
.Fn ber_write_elements
return 0.
@


1.5
log
@add a new ber function ber_add_astring() that strdups the string and
sets the be_free flag (which is required in some cases).  this will
make it easier because it is done manually at some places in the code.

discussed with dlg
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.4 2008/02/09 13:03:01 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: Febuary 9 2008 $
a32 2
.Nm ber_add_astring ,
.Nm ber_get_string ,
d35 1
d83 1
a83 3
.Fn "ber_add_string" "struct ber_element *prev" "char *string"
.Ft "struct ber_element *"
.Fn "ber_add_astring" "struct ber_element *prev" "char *string"
d85 1
a85 1
.Fn "ber_add_nstring" "struct ber_element *prev" "char *string" "size_t size"
d91 1
a91 1
.Fn "ber_add_bitstring" "struct ber_element *prev" "void *buf" "size_t size"
a154 2
.Fn ber_add_astring ,
.Fn ber_get_string ,
d157 1
@


1.4
log
@fix a memleak in the snmp engine and the ber i/o; free the dynamically
allocated ber write buffer after using it.  extend the ber api with a
ber_free() function to do the required cleanup.

Thanks to Will Backman (bitgeist at yahoo dot com) for testing and for
figuring out that there was a memleak.
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.3 2007/12/05 23:29:19 reyk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 5 2007 $
d33 1
d86 2
d158 1
@


1.3
log
@more typos in comments etc.

From Leonardo Chiquitto (leonardo at ngdn dot org)
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.2 2007/12/05 22:54:07 reyk Exp $
d56 1
d130 2
d199 2
a200 1
.Fn ber_set_application
@


1.2
log
@typo s/beeing/being/g

From Paul 'WEiRD' de Weerd
@
text
@d1 1
a1 1
.\" $OpenBSD: ber.3,v 1.1 2007/12/05 09:22:44 reyk Exp $
d163 1
a163 1
Object Identifiers are commonly used in ASN.1-bases protocols.
@


1.1
log
@Start working on snmpd(8) and snmpctl(8), a lightweight SNMP implementation
for OpenBSD.  SNMP is a necessary evil.  This is work in progress, don't
expect too much from it yet.

ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd $Mdocdate: December 4 2007 $
d167 1
a167 1
is beeing used:
@

