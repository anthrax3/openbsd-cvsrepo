head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.10.28.08.01.53;	author rzalamena;	state Exp;
branches;
next	1.6;
commitid	SMslalgbhOIf4OXA;

1.6
date	2016.09.26.14.00.05;	author rzalamena;	state Exp;
branches;
next	1.5;
commitid	FnJTejCjsqDbV8Xx;

1.5
date	2016.08.27.01.50.07;	author guenther;	state Exp;
branches;
next	1.4;
commitid	ikVlcUgcgDzn9GW3;

1.4
date	2015.01.16.00.05.13;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	khLbW7SmDyckNaAs;

1.3
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.2;
commitid	2uw1UTO4k6erpWzK;

1.2
date	2012.09.17.16.43.59;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.08.11.34.55;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use snmpd_env as the only global variable for env to simplify the daemon
and avoid problems.

ok jca@@
@
text
@/*	$OpenBSD: timer.c,v 1.6 2016/09/26 14:00:05 rzalamena Exp $	*/

/*
 * Copyright (c) 2008 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/sched.h>
#include <sys/socket.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/if_types.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <arpa/inet.h>

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <pwd.h>

#include "snmpd.h"
#include "mib.h"

void	 timer_cpu(int, short, void *);
int	 percentages(int, int64_t *, int64_t *, int64_t *, int64_t *);

static int64_t	**cp_time;
static int64_t	**cp_old;
static int64_t	**cp_diff;
struct event	  cpu_ev;

void
timer_cpu(int fd, short event, void *arg)
{
	struct event	*ev = (struct event *)arg;
	struct timeval	 tv = { 60, 0 };	/* every 60 seconds */
	int		 mib[3] = { CTL_KERN, KERN_CPTIME2, 0 }, n;
	size_t		 len;
	int64_t		*cptime2;

	len = CPUSTATES * sizeof(int64_t);
	for (n = 0; n < snmpd_env->sc_ncpu; n++) {
		mib[2] = n;
		cptime2 = snmpd_env->sc_cpustates + (CPUSTATES * n);
		if (sysctl(mib, 3, cp_time[n], &len, NULL, 0) == -1)
			continue;
		(void)percentages(CPUSTATES, cptime2, cp_time[n],
		    cp_old[n], cp_diff[n]);
#ifdef DEBUG
		log_debug("timer_cpu: cpu%d %lld%% idle in %llds", n,
		    (cptime2[CP_IDLE] > 1000 ?
		    1000 : (cptime2[CP_IDLE] / 10)), (long long) tv.tv_sec);
#endif
	}

	evtimer_add(ev, &tv);
}

void
timer_init(void)
{
	int	 mib[] = { CTL_HW, HW_NCPU }, i;
	size_t	 len;

	len = sizeof(snmpd_env->sc_ncpu);
	if (sysctl(mib, 2, &snmpd_env->sc_ncpu, &len, NULL, 0) == -1)
		fatal("sysctl");

	snmpd_env->sc_cpustates = calloc(snmpd_env->sc_ncpu,
	    CPUSTATES * sizeof(int64_t));
	cp_time = calloc(snmpd_env->sc_ncpu, sizeof(int64_t *));
	cp_old = calloc(snmpd_env->sc_ncpu, sizeof(int64_t *));
	cp_diff = calloc(snmpd_env->sc_ncpu, sizeof(int64_t *));
	if (snmpd_env->sc_cpustates == NULL ||
	    cp_time == NULL || cp_old == NULL || cp_diff == NULL)
		fatal("calloc");
	for (i = 0; i < snmpd_env->sc_ncpu; i++) {
		cp_time[i] = calloc(CPUSTATES, sizeof(int64_t));
		cp_old[i] = calloc(CPUSTATES, sizeof(int64_t));
		cp_diff[i] = calloc(CPUSTATES, sizeof(int64_t));
		if (cp_time[i] == NULL || cp_old[i] == NULL ||
		    cp_diff[i] == NULL)
			fatal("calloc");
	}

	evtimer_set(&cpu_ev, timer_cpu, &cpu_ev);
	timer_cpu(0, EV_TIMEOUT, &cpu_ev);
}

/*
 * percentages() function to calculate CPU utilization.
 * Source code derived from the top(1) utility:
 *
 * Copyright (c) 1984, 1989, William LeFebvre, Rice University
 * Copyright (c) 1989, 1990, 1992, William LeFebvre, Northwestern University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS EMPLOYER BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
int
percentages(int cnt, int64_t *out, int64_t *new, int64_t *old, int64_t *diffs)
{
	int64_t change, total_change, *dp, half_total;
	int i;

	/* initialization */
	total_change = 0;
	dp = diffs;

	/* calculate changes for each state and the overall change */
	for (i = 0; i < cnt; i++) {
		if ((change = *new - *old) < 0) {
			/* this only happens when the counter wraps */
			change = (*new - *old);
		}
		total_change += (*dp++ = change);
		*old++ = *new++;
	}

	/* avoid divide by zero potential */
	if (total_change == 0)
		total_change = 1;

	/* calculate percentages based on overall change, rounding up */
	half_total = total_change / 2l;
	for (i = 0; i < cnt; i++)
		*out++ = ((*diffs++ * 1000 + half_total) / total_change);

	/* return the total in case the caller wants to use it */
	return (total_change);
}
@


1.6
log
@Fix compilation warning by using the correct cast/format.

improved by sthen@@
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.5 2016/08/27 01:50:07 guenther Exp $	*/
a44 2
extern struct snmpd	*env;

d63 1
a63 1
	for (n = 0; n < env->sc_ncpu; n++) {
d65 1
a65 1
		cptime2 = env->sc_cpustates + (CPUSTATES * n);
d86 2
a87 2
	len = sizeof(env->sc_ncpu);
	if (sysctl(mib, 2, &env->sc_ncpu, &len, NULL, 0) == -1)
d90 6
a95 5
	env->sc_cpustates = calloc(env->sc_ncpu, CPUSTATES * sizeof(int64_t));
	cp_time = calloc(env->sc_ncpu, sizeof(int64_t *));
	cp_old = calloc(env->sc_ncpu, sizeof(int64_t *));
	cp_diff = calloc(env->sc_ncpu, sizeof(int64_t *));
	if (env->sc_cpustates == NULL ||
d98 1
a98 1
	for (i = 0; i < env->sc_ncpu; i++) {
@


1.5
log
@Pull in <sys/time.h> for struct timespec, timeval, or clockrate

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.4 2015/01/16 00:05:13 deraadt Exp $	*/
d73 1
a73 1
		log_debug("timer_cpu: cpu%d %d%% idle in %ds", n,
d75 1
a75 1
		    1000 : (cptime2[CP_IDLE] / 10)), tv.tv_sec);
@


1.4
log
@first batch of cleanup to programs based upon the namespace cleanups
in net/pfvar.h sys/proc.h sys/ucred.h arpa/nameser.h
change to PATH_MAX, reduce use of MIN() and MAX(), HOST_NAME_MAX+1,
LOGIN_NAME_MAX, etc etc
ok millert guenther, some review by doug
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.3 2014/10/25 03:23:49 lteo Exp $	*/
d21 1
@


1.3
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.2 2012/09/17 16:43:59 reyk Exp $	*/
a19 1
#include <sys/param.h>
@


1.2
log
@Update copyright and my email address in snmpd while I'm here.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.1 2008/12/08 11:34:55 reyk Exp $	*/
a28 1
#include <netinet/in_systm.h>
@


1.1
log
@report memory and swap in hrStorage, and implement hrProcessor to report
hrProcessorLoad (where load means the percentage of time the system was
not idle during the last minute).  based on HOST-RESOURCES-MIB.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 1
a4 1
 * Copyright (c) 2008 Reyk Floeter <reyk@@vantronix.net>
@

