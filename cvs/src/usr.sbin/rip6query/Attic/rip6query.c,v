head	1.17;
access;
symbols
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2015.10.26.13.07.14;	author deraadt;	state dead;
branches;
next	1.16;
commitid	5TAqbm31az1IZk2w;

1.16
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	z3HrihslRYb4HqW9;

1.15
date	2015.04.18.18.28.38;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	6b2lLILbgCR1fvia;

1.14
date	2014.03.19.14.02.24;	author mpi;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.17.23.31.52;	author sobrado;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.09.16.22.04;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.26.19.47.10;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.15.07.22.45;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.14.22.24.58;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.08.01.36.37;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.02.06.42.29;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.28.08;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.17.19.49.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.16.07.16.48;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.26.06.23.02;	author mpech;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.03.24.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.19.08.13.01;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.17
log
@rip6query goes to the attic.  Hopefully route6d (rip6d?) will get some
love instead, prod prod.
ok claudio jca mpi
@
text
@/*	$OpenBSD: rip6query.c,v 1.16 2015/08/20 22:39:29 deraadt Exp $	*/
/*	$KAME: rip6query.c,v 1.17 2002/09/08 01:35:17 itojun Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>

#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <errno.h>
#include <limits.h>
#include <err.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>

#include <net/if.h>
#include <netinet/in.h>
#include <netinet/in_var.h>
#include <arpa/inet.h>
#include <netdb.h>

#include "route6d.h"

#define	DEFAULT_WAIT	5

int	s;
int	query_wait = DEFAULT_WAIT;
struct sockaddr_in6 sin6;
struct rip6	*ripbuf;

#define	RIPSIZE(n)	(sizeof(struct rip6) + (n-1) * sizeof(struct netinfo6))

static void usage(void);
static void sigalrm_handler(int);
static const char *sa_n2a(struct sockaddr *);
static const char *inet6_n2a(struct in6_addr *);

int
main(int argc, char *argv[])
{
	struct netinfo6 *np;
	struct sockaddr_in6 fsock;
	int i, n, len;
	socklen_t flen;
	int c;
	int ifidx = -1;
	int error;
	const char *errstr;
	char pbuf[NI_MAXSERV];
	struct addrinfo hints, *res;

	while ((c = getopt(argc, argv, "I:w:")) != -1) {
		switch (c) {
		case 'I':
			ifidx = if_nametoindex(optarg);
			if (ifidx == 0) {
				errx(1, "invalid interface %s", optarg);
				/*NOTREACHED*/
			}
			break;
		case 'w':
			query_wait = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "-w %s: %s", optarg, errstr);
			break;
		default:
			usage();
			exit(1);
			/*NOTREACHED*/
		}
	}
	argv += optind;
	argc -= optind;

	if (argc != 1) {
		usage();
		exit(1);
	}

	if ((s = socket(AF_INET6, SOCK_DGRAM, 0)) < 0) {
		err(1, "socket");
		/*NOTREACHED*/
	}

	/* getaddrinfo is preferred for addr%scope syntax */
	snprintf(pbuf, sizeof(pbuf), "%d", RIP6_PORT);
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_INET6;
	hints.ai_socktype = SOCK_DGRAM;
	error = getaddrinfo(argv[0], pbuf, &hints, &res);
	if (error) {
		errx(1, "%s: %s", argv[0], gai_strerror(error));
		/*NOTREACHED*/
	}
	if (res->ai_next) {
		errx(1, "%s: %s", argv[0], "resolved to multiple addrs");
		/*NOTREACHED*/
	}
	if (sizeof(sin6) != res->ai_addrlen) {
		errx(1, "%s: %s", argv[0], "invalid addrlen");
		/*NOTREACHED*/
	}
	memcpy(&sin6, res->ai_addr, res->ai_addrlen);
	if (ifidx >= 0)
		sin6.sin6_scope_id = ifidx;

	if ((ripbuf = malloc(BUFSIZ)) == NULL) {
		err(1, "malloc");
		/*NOTREACHED*/
	}
	ripbuf->rip6_cmd = RIP6_REQUEST;
	ripbuf->rip6_vers = RIP6_VERSION;
	ripbuf->rip6_res1[0] = 0;
	ripbuf->rip6_res1[1] = 0;
	np = ripbuf->rip6_nets;
	bzero(&np->rip6_dest, sizeof(struct in6_addr));
	np->rip6_tag = 0;
	np->rip6_plen = 0;
	np->rip6_metric = HOPCNT_INFINITY6;
	if (sendto(s, ripbuf, RIPSIZE(1), 0, (struct sockaddr *)&sin6,
	    sizeof(struct sockaddr_in6)) < 0) {
		err(1, "send");
		/*NOTREACHED*/
	}
	signal(SIGALRM, sigalrm_handler);
	for (;;) {
		flen = sizeof(fsock);
		alarm(query_wait);
		if ((len = recvfrom(s, ripbuf, BUFSIZ, 0,
		    (struct sockaddr *)&fsock, &flen)) < 0) {
			err(1, "recvfrom");
			/*NOTREACHED*/
		}
		alarm(0);
		printf("Response from %s len %d\n",
		    sa_n2a((struct sockaddr *)&fsock), len);
		n = (len - sizeof(struct rip6) + sizeof(struct netinfo6)) /
		    sizeof(struct netinfo6);
		np = ripbuf->rip6_nets;
		for (i = 0; i < n; i++, np++) {
			printf("\t%s/%d [%d]", inet6_n2a(&np->rip6_dest),
			    np->rip6_plen, np->rip6_metric);
			if (np->rip6_tag)
				printf(" tag=0x%x", ntohs(np->rip6_tag));
			printf("\n");
		}
	}

	exit(0);
}

static void
usage(void)
{
	fprintf(stderr,
	    "usage: rip6query [-I interface] [-w time] destination\n");
}

/* getnameinfo() is preferred as we may be able to show ifindex as ifname */
static const char *
sa_n2a(struct sockaddr *sa)
{
	static char buf[NI_MAXHOST];

	if (getnameinfo(sa, sa->sa_len, buf, sizeof(buf),
	    NULL, 0, NI_NUMERICHOST) != 0) {
		snprintf(buf, sizeof(buf), "%s", "(invalid)");
	}
	return buf;
}

static const char *
inet6_n2a(struct in6_addr *addr)
{
	static char buf[NI_MAXHOST];

	return inet_ntop(AF_INET6, addr, buf, sizeof(buf));
}

static void
sigalrm_handler(int sig)
{

	_exit(0);
}
@


1.16
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.15 2015/04/18 18:28:38 deraadt Exp $	*/
@


1.15
log
@Convert many atoi() calls to strtonum(), adding range checks and failure
handling along the way.
Reviews by Brendan MacDonell, Jeremy Devenport, florian, doug, millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.14 2014/03/19 14:02:24 mpi Exp $	*/
d139 1
a139 1
	if ((ripbuf = (struct rip6 *)malloc(BUFSIZ)) == NULL) {
@


1.14
log
@Remove #ifdef FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.13 2008/05/17 23:31:52 sobrado Exp $	*/
d41 1
d80 1
d94 3
a96 1
			query_wait = atoi(optarg);
@


1.13
log
@documentation tweaks.

ok (some time ago) jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.12 2004/07/09 16:22:04 deraadt Exp $	*/
a47 3
#if defined(__FreeBSD__) && __FreeBSD__ >= 3
#include <net/if_var.h>
#endif /* __FreeBSD__ >= 3 */
@


1.12
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.11 2003/06/26 19:47:10 deraadt Exp $	*/
d186 2
a187 1
	fprintf(stderr, "Usage: rip6query [-I iface] [-w wait] address\n");
@


1.11
log
@strict proto cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.10 2003/04/15 07:22:45 itojun Exp $	*/
d184 1
a184 1
usage()
d191 1
a191 2
sa_n2a(sa)
	struct sockaddr *sa;
d203 1
a203 2
inet6_n2a(addr)
	struct in6_addr *addr;
d211 1
a211 2
sigalrm_handler(sig)
	int sig;
@


1.10
log
@avoid hardcoding 12; use NI_MAXSERV.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.9 2003/04/14 22:24:58 pvalchev Exp $	*/
d73 1
a73 3
main(argc, argv)
	int argc;
	char **argv;
@


1.9
log
@%d is 12 chars big, not 10; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.8 2002/09/08 01:36:37 itojun Exp $	*/
d84 1
a84 1
	char pbuf[12];
@


1.8
log
@socklen_t audit.  from deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.7 2002/06/02 06:42:29 deraadt Exp $	*/
d84 1
a84 1
	char pbuf[10];
@


1.7
log
@minor KNF
@
text
@d1 2
a2 2
/*	$OpenBSD: rip6query.c,v 1.6 2002/02/16 21:28:08 millert Exp $	*/
/*	$KAME: rip6query.c,v 1.15 2001/11/16 07:01:21 itojun Exp $	*/
d79 2
a80 1
	int i, n, len, flen;
d177 1
a177 1
			    printf(" tag=0x%x", ntohs(np->rip6_tag));
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.5 2001/11/17 19:49:40 deraadt Exp $	*/
a66 1
int main(int, char **);
d153 1
a153 1
			sizeof(struct sockaddr_in6)) < 0) {
d162 1
a162 1
				(struct sockaddr *)&fsock, &flen)) < 0) {
d168 1
a168 1
			sa_n2a((struct sockaddr *)&fsock), len);
d170 1
a170 1
			sizeof(struct netinfo6);
d174 1
a174 1
				np->rip6_plen, np->rip6_metric);
d176 1
a176 1
				printf(" tag=0x%x", ntohs(np->rip6_tag));
d198 1
a198 1
			NULL, 0, NI_NUMERICHOST) != 0) {
@


1.5
log
@use volatile sig_atomic_t where possible; simply volatile i other places
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.4 2001/11/16 07:16:48 itojun Exp $	*/
d67 5
a71 5
int main __P((int, char **));
static void usage __P((void));
static void sigalrm_handler __P((int));
static const char *sa_n2a __P((struct sockaddr *));
static const char *inet6_n2a __P((struct in6_addr *));
@


1.4
log
@sync with latest kame.  terminate only if ripng response is not received
for 5 seconds (or length specified by -w).
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.3 2001/10/26 06:23:02 mpech Exp $	*/
d219 1
a219 1
	exit(0);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF.

itojun@@ ok
@
text
@d1 2
a2 1
/*	$OpenBSD: rip6query.c,v 1.2 2001/03/09 03:24:10 deraadt Exp $	*/
d40 1
d45 2
d58 1
a58 4
/* wrapper for KAME-special getnameinfo() */
#ifndef NI_WITHSCOPEID
#define NI_WITHSCOPEID	0
#endif
d61 1
a61 1
extern int errno;
d69 1
a81 2
	extern char *optarg;
	extern int optind;
d87 1
a87 1
	while ((c = getopt(argc, argv, "I:")) != -1) {
d96 3
d118 1
a118 1
	/* getaddrinfo is preferred for addr@@ifname syntax */
d158 2
a159 1
	do {
d161 1
d167 1
d180 1
a180 1
	} while (len == RIPSIZE(24));
d188 1
a188 1
	fprintf(stderr, "Usage: rip6query [-I iface] address\n");
d199 1
a199 1
			NULL, 0, NI_NUMERICHOST | NI_WITHSCOPEID) != 0) {
d212 8
@


1.2
log
@exit(-#) is wrong
@
text
@d1 1
a1 1
/*	$OpenBSD: rip6query.c,v 1.1 2000/01/19 08:13:01 itojun Exp $	*/
d87 1
a87 1
	while ((c = getopt(argc, argv, "I:")) != EOF) {
@


1.1
log
@add rip6query(8)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 1
a107 1
		exit(-1);
@

