head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.6
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2017.03.21.12.06.55;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	6uuBMurt3Uh42fgX;

1.13
date	2017.01.09.14.49.22;	author reyk;	state Exp;
branches;
next	1.12;
commitid	eA8b246voAapPTkX;

1.12
date	2017.01.08.20.31.03;	author reyk;	state Exp;
branches;
next	1.11;
commitid	U5QfDMrhDiu5oehf;

1.11
date	2016.10.12.11.57.31;	author reyk;	state Exp;
branches;
next	1.10;
commitid	BzueJHWWTTYcYEmT;

1.10
date	2015.12.07.12.13.51;	author reyk;	state Exp;
branches;
next	1.9;
commitid	se0edNAzUA8O35vt;

1.9
date	2015.11.22.13.27.13;	author reyk;	state Exp;
branches;
next	1.8;
commitid	T3JBYxNT0thPuavp;

1.8
date	2015.11.21.13.46.29;	author reyk;	state Exp;
branches;
next	1.7;
commitid	cbop6oorkGDnHgcS;

1.7
date	2015.11.21.12.40.59;	author reyk;	state Exp;
branches;
next	1.6;
commitid	NAdDmgxUAp5Vg17B;

1.6
date	2015.08.20.13.00.23;	author reyk;	state Exp;
branches;
next	1.5;
commitid	WDQybNKi4LiEFw8K;

1.5
date	2015.01.21.22.21.05;	author reyk;	state Exp;
branches;
next	1.4;
commitid	64Zc6bef54Vu2Noy;

1.4
date	2014.12.21.00.54.49;	author guenther;	state Exp;
branches;
next	1.3;
commitid	XnjIOhurXdX5o1V9;

1.3
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.2;
commitid	2uw1UTO4k6erpWzK;

1.2
date	2014.08.04.11.09.25;	author reyk;	state Exp;
branches;
next	1.1;
commitid	Dj6ALT3dpIHqBQcw;

1.1
date	2014.07.12.23.34.54;	author reyk;	state Exp;
branches;
next	;
commitid	U5OqzWAgis3Sb3uE;


desc
@@


1.14
log
@From a syslog perspective it does not make sense to log fatal and
warn with the same severity.  Switch log_warn() to LOG_ERR and keep
fatal() at LOG_CRIT.
OK reyk@@ florian@@
@
text
@/*	$OpenBSD: log.c,v 1.13 2017/01/09 14:49:22 reyk Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <time.h>

static int	 debug;
static int	 verbose;
const char	*log_procname;

void	log_init(int, int);
void	log_procinit(const char *);
void	log_setverbose(int);
int	log_getverbose(void);
void	log_warn(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
	    __attribute__((__format__ (printf, 2, 0)));
__dead void fatal(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
__dead void fatalx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));

void
log_init(int n_debug, int facility)
{
	extern char	*__progname;

	debug = n_debug;
	verbose = n_debug;
	log_procinit(__progname);

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, facility);

	tzset();
}

void
log_procinit(const char *procname)
{
	if (procname != NULL)
		log_procname = procname;
}

void
log_setverbose(int v)
{
	verbose = v;
}

int
log_getverbose(void)
{
	return (verbose);
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char	*nfmt;
	int	 saved_errno = errno;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);

	errno = saved_errno;
}

void
log_warn(const char *emsg, ...)
{
	char		*nfmt;
	va_list		 ap;
	int		 saved_errno = errno;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_ERR, "%s", strerror(saved_errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg,
		    strerror(saved_errno)) == -1) {
			/* we tried it... */
			vlog(LOG_ERR, emsg, ap);
			logit(LOG_ERR, "%s", strerror(saved_errno));
		} else {
			vlog(LOG_ERR, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}

	errno = saved_errno;
}

void
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_ERR, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	if (verbose > 1) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

static void
vfatalc(int code, const char *emsg, va_list ap)
{
	static char	s[BUFSIZ];
	const char	*sep;

	if (emsg != NULL) {
		(void)vsnprintf(s, sizeof(s), emsg, ap);
		sep = ": ";
	} else {
		s[0] = '\0';
		sep = "";
	}
	if (code)
		logit(LOG_CRIT, "%s: %s%s%s",
		    log_procname, s, sep, strerror(code));
	else
		logit(LOG_CRIT, "%s%s%s", log_procname, sep, s);
}

void
fatal(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(errno, emsg, ap);
	va_end(ap);
	exit(1);
}

void
fatalx(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(0, emsg, ap);
	va_end(ap);
	exit(1);
}
@


1.13
log
@Stop accessing verbose and debug variables from log.c directly.

This replaces log_verbose() and "extern int verbose" with the two functions
log_setverbose() and log_getverbose().

Pointed out by benno@@
OK krw@@ eric@@ gilles@@ (OK gilles@@ for the snmpd bits as well)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.33 2017/01/08 20:31:03 reyk Exp $	*/
d127 1
a127 1
		logit(LOG_CRIT, "%s", strerror(saved_errno));
d134 2
a135 2
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(saved_errno));
d137 1
a137 1
			vlog(LOG_CRIT, nfmt, ap);
d152 1
a152 1
	vlog(LOG_CRIT, emsg, ap);
@


1.12
log
@Sync log.c with the latest version from vmd/log.c that preserves errno
so it is safe calling log_* after an error without loosing the it.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 2016/11/24 21:39:45 reyk Exp $	*/
d27 2
a28 2
int		 debug;
int		 verbose;
d33 2
a34 1
void	log_verbose(int);
d75 1
a75 1
log_verbose(int v)
d78 6
@


1.11
log
@copy updated log.c from vmd: for correctness, save errno when doing
additional actions before printing it.  OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2016/10/12 11:47:34 reyk Exp $	*/
d93 1
d107 2
a110 1

d135 2
d172 1
a172 1
vfatal(const char *emsg, va_list ap)
a175 1
	int		 saved_errno = errno;
d184 1
a184 1
	if (saved_errno)
d186 1
a186 1
		    log_procname, s, sep, strerror(saved_errno));
d197 1
a197 1
	vfatal(emsg, ap);
a206 1
	errno = 0;
d208 1
a208 1
	vfatal(emsg, ap);
@


1.10
log
@sync with vmd
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2015/12/07 12:10:02 reyk Exp $	*/
d112 3
a114 2
	char	*nfmt;
	va_list	 ap;
d118 1
a118 1
		logit(LOG_CRIT, "%s", strerror(errno));
d122 2
a123 1
		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
d126 1
a126 1
			logit(LOG_CRIT, "%s", strerror(errno));
d172 1
d181 1
a181 1
	if (errno)
d183 1
a183 1
		    log_procname, s, sep, strerror(errno));
@


1.9
log
@Update log.c: change fatal() and fatalx() into variadic functions,
include the process name, and replace all calls of fatal*(NULL) with
fatal(__func__) for better debugging.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.29 2015/11/21 13:46:29 reyk Exp $	*/
d179 1
a179 1
		logit(LOG_CRIT, "fatal in %s: %s%s%s",
d182 1
a182 1
		logit(LOG_CRIT, "fatal in %s%s%s", log_procname, sep, s);
@


1.8
log
@Once again, fix the license text.  After many years, we just cannot
get rid of the "LOSS OF MIND" joke.  Haha.  We keep on removing it and
it shows up again because it accidentally gets synced from somewhere
else.  bgpd and ospfd don't have it anymore, but their offsprings
still carry it. If you see it, remove it, and, in the OpenBSD ISC
case, use the original text from /usr/share/misc/license.template.
All authors agree.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.28 2015/11/21 12:37:42 reyk Exp $	*/
d27 3
a29 2
int	 debug;
int	 verbose;
d31 2
a32 1
void	log_init(int);
d46 4
a49 2
__dead void fatal(const char *);
__dead void fatalx(const char *);
d52 1
a52 1
log_init(int n_debug)
d58 1
d61 1
a61 1
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
d67 7
d165 20
d186 1
a186 1
fatal(const char *emsg)
d188 1
a188 8
	if (emsg == NULL)
		logit(LOG_CRIT, "fatal: %s", strerror(errno));
	else
		if (errno)
			logit(LOG_CRIT, "fatal: %s: %s",
			    emsg, strerror(errno));
		else
			logit(LOG_CRIT, "fatal: %s", emsg);
d190 3
d197 1
a197 1
fatalx(const char *emsg)
d199 2
d202 4
a205 1
	fatal(emsg);
@


1.7
log
@Move local logging functions into httpd.c, and sync log.c with relayd -
both daemons are now sharing the same file.  No functional changes.
@
text
@d14 3
a16 3
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.6
log
@Change httpd(8) to use C99-style fixed-width integers (uintN_t instead
of u_intN_t) and replace u_int with unsigned int.  Mixing both
variants is a bad style and most contributors seem to prefer this
style; it also helps us to get used to it, portability, and
standardization.

Theoretically no binary change, except one in practice: httpd.o has a
different checksum because gcc with -O2 pads/optimizes "struct
privsep" differently when using "unsigned int" instead "u_int" for the
affected members.  "u_int" is just a typedef of "unsigned int", -O0
doesn't build the difference and clang with -O2 doesn't do it either -
it is just another curiosity from gcc-land.

OK semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2015/01/21 22:21:05 reyk Exp $	*/
a18 6
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <errno.h>
#include <stdarg.h>
d21 1
d24 1
a25 4
#include <netdb.h>
#include <ctype.h>

#include "httpd.h"
d30 13
a42 1
void	 vlog(int, const char *, va_list)
d44 2
a45 2
void	 logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
a172 74
}

const char *
print_host(struct sockaddr_storage *ss, char *buf, size_t len)
{
	if (getnameinfo((struct sockaddr *)ss, ss->ss_len,
	    buf, len, NULL, 0, NI_NUMERICHOST) != 0) {
		buf[0] = '\0';
		return (NULL);
	}
	return (buf);
}

const char *
print_time(struct timeval *a, struct timeval *b, char *buf, size_t len)
{
	struct timeval		tv;
	unsigned long		h, sec, min;

	timerclear(&tv);
	timersub(a, b, &tv);
	sec = tv.tv_sec % 60;
	min = tv.tv_sec / 60 % 60;
	h = tv.tv_sec / 60 / 60;

	snprintf(buf, len, "%.2lu:%.2lu:%.2lu", h, min, sec);
	return (buf);
}

const char *
printb_flags(const uint32_t v, const char *bits)
{
	static char	 buf[2][BUFSIZ];
	static int	 idx = 0;
	int		 i, any = 0;
	char		 c, *p, *r;

	p = r = buf[++idx % 2];
	memset(p, 0, BUFSIZ);

	if (bits) {
		bits++;
		while ((i = *bits++)) {
			if (v & (1 << (i - 1))) {
				if (any) {
					*p++ = ',';
					*p++ = ' ';
				}
				any = 1;
				for (; (c = *bits) > 32; bits++) {
					if (c == '_')
						*p++ = ' ';
					else
						*p++ =
						    tolower((unsigned char)c);
				}
			} else
				for (; *bits > 32; bits++)
					;
		}
	}

	return (r);
}

void
getmonotime(struct timeval *tv)
{
	struct timespec	 ts;

	if (clock_gettime(CLOCK_MONOTONIC, &ts))
		fatal("clock_gettime");

	TIMESPEC_TO_TIMEVAL(tv, &ts);
@


1.5
log
@httpd is based on relayd and had included many headers that are only
needed by its ancestor.  jsg@@, include-what-you-use, and some manual
review helped to cleanup the headers (take iwyu with a grain of salt).
Based on common practice, httpd.h now also includes the necessary
headers for itself.

OK florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2014/12/21 00:54:49 guenther Exp $	*/
d186 1
a186 1
	u_long			h, sec, min;
d199 1
a199 1
printb_flags(const u_int32_t v, const char *bits)
d222 2
a223 1
						*p++ = tolower((u_char)c);
@


1.4
log
@Stop pulling in <arpa/inet.h> or <arpa/nameser.h> when unnecessary.
*Do* pull it in when in_{port,addr}_h is needed and <netinet/in.h> isn't.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2014/10/25 03:23:49 lteo Exp $	*/
a19 1
#include <sys/queue.h>
d21 1
a21 5
#include <sys/tree.h>

#include <net/if.h>
#include <netinet/in.h>
#include <netinet/ip.h>
d29 1
a29 1
#include <event.h>
@


1.3
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2014/08/04 11:09:25 reyk Exp $	*/
a26 1
#include <arpa/inet.h>
@


1.2
log
@httpd doesn't support SSL/TLS yet, remove the remaining bits.
The secrect plan is to add it later using the ressl wrapper library.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.1 2014/07/12 23:34:54 reyk Exp $	*/
a24 1
#include <netinet/in_systm.h>
@


1.1
log
@Add httpd(8), an attempt to turn the relayd(8) codebase into a simple
web server.  It is not finished yet and I just started it today, but
the goal is to provide an HTTP server that a) provides minimal
features, b) serves static files, c) provides FastCGI support, and d)
follows common coding practices of OpenBSD.

It will neither support plugins, nor custom memory allocators, EBCDIC
support, PCRE or any other things that can be found elsewhere.
httpd(8) is not intended to provide a fully-featured replacement for
nginx(8) or the Apache, but it will provide enough functionality that
is needed in the OpenBSD base system.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.22 2014/04/18 16:13:02 reyk Exp $	*/
a38 2

#include <openssl/ssl.h>
@

