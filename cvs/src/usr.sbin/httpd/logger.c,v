head	1.20;
access;
symbols
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_6:1.5.0.4;
locks; strict;
comment	@ * @;


1.20
date	2016.09.01.10.59.38;	author reyk;	state Exp;
branches;
next	1.19;
commitid	a0vgTMcaG5L6YvdV;

1.19
date	2016.08.30.14.31.53;	author rzalamena;	state Exp;
branches;
next	1.18;
commitid	aFS6ntUbudjiLont;

1.18
date	2016.08.27.11.13.16;	author rzalamena;	state Exp;
branches;
next	1.17;
commitid	9y7IlhMzSGJO9BSx;

1.17
date	2016.08.26.10.46.39;	author rzalamena;	state Exp;
branches;
next	1.16;
commitid	JNQbvPaxb6nMCsuY;

1.16
date	2016.08.16.18.41.57;	author tedu;	state Exp;
branches;
next	1.15;
commitid	eyeRGwF24702KeRh;

1.15
date	2015.12.02.15.13.00;	author reyk;	state Exp;
branches;
next	1.14;
commitid	VcVtArSBXuXwQYz0;

1.14
date	2015.11.05.18.00.43;	author florian;	state Exp;
branches;
next	1.13;
commitid	b2ejv9chtKlQ0St8;

1.13
date	2015.08.20.13.00.23;	author reyk;	state Exp;
branches;
next	1.12;
commitid	WDQybNKi4LiEFw8K;

1.12
date	2015.04.11.14.52.49;	author jsing;	state Exp;
branches;
next	1.11;
commitid	fd75nyz36psdYmck;

1.11
date	2015.02.08.00.00.59;	author reyk;	state Exp;
branches;
next	1.10;
commitid	T0lfZLuka5kZO7cg;

1.10
date	2015.01.21.22.21.05;	author reyk;	state Exp;
branches;
next	1.9;
commitid	64Zc6bef54Vu2Noy;

1.9
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	Uu5nFG3wCl0LACBb;

1.8
date	2014.12.21.00.54.49;	author guenther;	state Exp;
branches;
next	1.7;
commitid	XnjIOhurXdX5o1V9;

1.7
date	2014.11.11.15.54.45;	author beck;	state Exp;
branches;
next	1.6;
commitid	ki9qbAAMZ7dFJTRL;

1.6
date	2014.11.10.14.16.22;	author beck;	state Exp;
branches;
next	1.5;
commitid	tob3FQv4DQAFnEJi;

1.5
date	2014.08.06.12.56.58;	author reyk;	state Exp;
branches
	1.5.4.1;
next	1.4;
commitid	riXTx0iMqjDxBeF1;

1.4
date	2014.08.06.12.29.43;	author jsg;	state Exp;
branches;
next	1.3;
commitid	h8MezbGbN8maMsqS;

1.3
date	2014.08.05.15.36.59;	author reyk;	state Exp;
branches;
next	1.2;
commitid	0eZ0KmX2vQuZV9Ts;

1.2
date	2014.08.04.15.57.25;	author reyk;	state Exp;
branches;
next	1.1;
commitid	IdnjoauHjVyWdVml;

1.1
date	2014.08.04.15.49.28;	author reyk;	state Exp;
branches;
next	;
commitid	LDlAyIlUWDBjADa5;

1.5.4.1
date	2014.11.20.07.48.45;	author jasper;	state Exp;
branches;
next	;
commitid	aoUNgrdXQt2mQs98;


desc
@@


1.20
log
@spacing
@
text
@/*	$OpenBSD: logger.c,v 1.19 2016/08/30 14:31:53 rzalamena Exp $	*/

/*
 * Copyright (c) 2014 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/uio.h>

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <imsg.h>

#include "httpd.h"

int		 logger_dispatch_parent(int, struct privsep_proc *,
		    struct imsg *);
int		 logger_dispatch_server(int, struct privsep_proc *,
		    struct imsg *);
void		 logger_shutdown(void);
void		 logger_close(void);
struct log_file *logger_open_file(const char *);
int		 logger_open_fd(struct imsg *);
int		 logger_open(struct server *, struct server_config *, void *);
void		 logger_init(struct privsep *, struct privsep_proc *p, void *);
int		 logger_start(void);
int		 logger_log(struct imsg *);

static uint32_t		 last_log_id = 0;

static struct privsep_proc procs[] = {
	{ "parent",	PROC_PARENT,	logger_dispatch_parent },
	{ "server",	PROC_SERVER,	logger_dispatch_server }
};

void
logger(struct privsep *ps, struct privsep_proc *p)
{
	proc_run(ps, p, procs, nitems(procs), logger_init, NULL);
}

void
logger_shutdown(void)
{
	logger_close();
	config_purge(httpd_env, CONFIG_ALL);
}

void
logger_init(struct privsep *ps, struct privsep_proc *p, void *arg)
{
	if (pledge("stdio recvfd", NULL) == -1)
		fatal("pledge");

	if (config_init(ps->ps_env) == -1)
		fatal("failed to initialize configuration");

	/* We use a custom shutdown callback */
	p->p_shutdown = logger_shutdown;

	TAILQ_INIT(&log_files);
}

void
logger_close(void)
{
	struct log_file	*log, *next;

	TAILQ_FOREACH_SAFE(log, &log_files, log_entry, next) {
		if (log->log_fd != -1) {
			close(log->log_fd);
			log->log_fd = -1;
		}
		TAILQ_REMOVE(&log_files, log, log_entry);
	}
}

struct log_file *
logger_open_file(const char *name)
{
	struct log_file	*log;
	struct iovec	 iov[2];

	if ((log = calloc(1, sizeof(*log))) == NULL) {
		log_warn("failed to allocate log %s", name);
		return (NULL);
	}

	log->log_id = ++last_log_id;
	(void)strlcpy(log->log_name, name, sizeof(log->log_name));

	/* The file will be opened by the parent process */
	log->log_fd = -1;

	iov[0].iov_base = &log->log_id;
	iov[0].iov_len = sizeof(log->log_id);
	iov[1].iov_base = log->log_name;
	iov[1].iov_len = strlen(log->log_name) + 1;

	if (proc_composev(httpd_env->sc_ps, PROC_PARENT, IMSG_LOG_OPEN,
	    iov, 2) != 0) {
		log_warn("%s: failed to compose IMSG_LOG_OPEN imsg", __func__);
		goto err;
	}

	TAILQ_INSERT_TAIL(&log_files, log, log_entry);

	return (log);

err:
	free(log);

	return (NULL);
}

int
logger_open_fd(struct imsg *imsg)
{
	struct log_file		*log;
	uint32_t		 id;

	IMSG_SIZE_CHECK(imsg, &id);
	memcpy(&id, imsg->data, sizeof(id));

	TAILQ_FOREACH(log, &log_files, log_entry) {
		if (log->log_id == id) {
			DPRINTF("%s: received log fd %d, file %s",
			    __func__, imsg->fd, log->log_name);
			log->log_fd = imsg->fd;
			return (0);
		}
	}

	return (-1);
}

int
logger_open_priv(struct imsg *imsg)
{
	char			 path[PATH_MAX];
	char			 name[NAME_MAX], *p;
	uint32_t		 id;
	size_t			 len;
	int			 fd;

	/* called from the priviled process */
	IMSG_SIZE_CHECK(imsg, &id);
	memcpy(&id, imsg->data, sizeof(id));
	p = (char *)imsg->data + sizeof(id);

	if ((size_t)snprintf(name, sizeof(name), "/%s", p) >= sizeof(name))
		return (-1);
	if ((len = strlcpy(path, httpd_env->sc_logdir, sizeof(path)))
	    >= sizeof(path))
		return (-1);

	p = path + len;
	len = sizeof(path) - len;

	if (canonicalize_path(name, p, len) == NULL) {
		log_warnx("invalid log name");
		return (-1);
	}

	if ((fd = open(path, O_WRONLY|O_APPEND|O_CREAT, 0644)) == -1) {
		log_warn("failed to open %s", path);
		return (-1);
	}

	proc_compose_imsg(httpd_env->sc_ps, PROC_LOGGER, -1,
	    IMSG_LOG_OPEN, -1, fd, &id, sizeof(id));

	DPRINTF("%s: opened log file %s, fd %d", __func__, path, fd);

	return (0);
}

int
logger_open(struct server *srv, struct server_config *srv_conf, void *arg)
{
	struct log_file	*log, *logfile = NULL, *errfile = NULL;

	if (srv_conf->flags & SRVFLAG_SYSLOG)
		return (0);

	/* disassociate */
	srv_conf->logaccess = srv_conf->logerror = NULL;

	TAILQ_FOREACH(log, &log_files, log_entry) {
		if (strcmp(log->log_name, srv_conf->accesslog) == 0)
			logfile = log;
		if (strcmp(log->log_name, srv_conf->errorlog) == 0)
			errfile = log;
	}

	if (logfile == NULL) {
		if ((srv_conf->logaccess =
		    logger_open_file(srv_conf->accesslog)) == NULL)
			return (-1);
	} else
		srv_conf->logaccess = logfile;

	if (errfile == NULL) {
		if ((srv_conf->logerror =
		    logger_open_file(srv_conf->errorlog)) == NULL)
			return (-1);
	} else
		srv_conf->logerror = errfile;

	return (0);
}

int
logger_start(void)
{
	logger_close();
	if (server_foreach(logger_open, NULL) == -1)
		fatalx("failed to open log files");
	return (0);
}

int
logger_log(struct imsg *imsg)
{
	char			*logline;
	uint32_t		 id;
	struct server_config	*srv_conf;
	struct log_file		*log;

	IMSG_SIZE_CHECK(imsg, &id);
	memcpy(&id, imsg->data, sizeof(id));

	if ((srv_conf = serverconfig_byid(id)) == NULL)
		fatalx("invalid logging requestr");

	if (imsg->hdr.type == IMSG_LOG_ACCESS)
		log = srv_conf->logaccess;
	else
		log = srv_conf->logerror;

	if (log == NULL || log->log_fd == -1) {
		log_warnx("log file %s not opened", log ? log->log_name : "");
		return (0);
	}

	/* XXX get_string() would sanitize the string, but add a malloc */
	logline = (char *)imsg->data + sizeof(id);

	/* For debug output */
	log_debug("%s", logline);

	if (dprintf(log->log_fd, "%s\n", logline) == -1) {
		if (logger_start() == -1)
			return (-1);
	}

	return (0);
}

int
logger_dispatch_parent(int fd, struct privsep_proc *p, struct imsg *imsg)
{
	switch (imsg->hdr.type) {
	case IMSG_CFG_SERVER:
		config_getserver(httpd_env, imsg);
		break;
	case IMSG_CFG_DONE:
		config_getcfg(httpd_env, imsg);
		break;
	case IMSG_CTL_START:
	case IMSG_CTL_REOPEN:
		logger_start();
		break;
	case IMSG_CTL_RESET:
		config_getreset(httpd_env, imsg);
		break;
	case IMSG_LOG_OPEN:
		return (logger_open_fd(imsg));
	default:
		return (-1);
	}

	return (0);
}

int
logger_dispatch_server(int fd, struct privsep_proc *p, struct imsg *imsg)
{
	switch (imsg->hdr.type) {
	case IMSG_LOG_ACCESS:
	case IMSG_LOG_ERROR:
		logger_log(imsg);
		break;
	default:
		return (-1);
	}

	return (0);
}
@


1.19
log
@Kill (remove) the ps_pid from privsep struct since it is not being used
anymore. Also fix the process initialization prototypes.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.18 2016/08/27 11:13:16 rzalamena Exp $	*/
d187 2
a188 2
	proc_compose_imsg(httpd_env->sc_ps, PROC_LOGGER, -1, IMSG_LOG_OPEN, -1, fd,
	    &id, sizeof(id));
@


1.18
log
@Kill p_instance from proc.c and remove static proc_id unused variables.

To keep the debug functionality intact and correct we'll use the pid
field in the imsg header to pass the instance number. Remember to always
pass 'ps_instance + 1' otherwise libutil will fill imsg header pid field
with the imsgbuf pid (which is the current process pid).

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.17 2016/08/26 10:46:39 rzalamena Exp $	*/
d53 1
a53 1
pid_t
d56 1
a56 1
	return (proc_run(ps, p, procs, nitems(procs), logger_init, NULL));
@


1.17
log
@Replace the static env variables with a single global variable.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.16 2016/08/16 18:41:57 tedu Exp $	*/
a45 1
int				 proc_id;
a73 3

	/* Set to current prefork id */
	proc_id = p->p_instance;
@


1.16
log
@stop including sys/param.h for nitems. define locally as needed.
ok natano reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.15 2015/12/02 15:13:00 reyk Exp $	*/
a45 1
static struct httpd		*env = NULL;
a56 1
	env = ps->ps_env;
d64 1
a64 1
	config_purge(env, CONFIG_ALL);
d121 1
a121 1
	if (proc_composev(env->sc_ps, PROC_PARENT, IMSG_LOG_OPEN,
d174 1
a174 1
	if ((len = strlcpy(path, env->sc_logdir, sizeof(path)))
d191 1
a191 1
	proc_compose_imsg(env->sc_ps, PROC_LOGGER, -1, IMSG_LOG_OPEN, -1, fd,
d286 1
a286 1
		config_getserver(env, imsg);
d289 1
a289 1
		config_getcfg(env, imsg);
d296 1
a296 1
		config_getreset(env, imsg);
@


1.15
log
@sync with relayd, use proc_compose()
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.14 2015/11/05 18:00:43 florian Exp $	*/
a18 1
#include <sys/param.h>	/* nitems */
@


1.14
log
@pledge(2) for httpd.

1) The main process listens on sockets and accepts connections. It
creates and opens log files, creates and kills child processes. On
start up and on receiving a HUP signal it parses the configuration. It
passes on file descriptors for logging or requests to it's children.
2) The logger process writes log messages to a file descriptor passed
in from the main process.
3) The server process reads the request from a file descriptor passed
in from the main process. It reads a file or creates a directory index
to send a response.
Additionally this process handles fastcgi requests. It connects to
AF_UNIX, AF_INET or AF_INET6 sockets. A re-factoring might make it
possible to drop the additional fastcgi privileges when only static
files are served.

with deraadt@@ some time ago
prodding & OK deraadt@@
tweaks and OK reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.13 2015/08/20 13:00:23 reyk Exp $	*/
d124 1
a124 1
	if (proc_composev_imsg(env->sc_ps, PROC_PARENT, -1, IMSG_LOG_OPEN, -1,
d194 1
a194 1
	proc_compose_imsg(env->sc_ps, PROC_LOGGER, -1, IMSG_LOG_OPEN, fd,
@


1.13
log
@Change httpd(8) to use C99-style fixed-width integers (uintN_t instead
of u_intN_t) and replace u_int with unsigned int.  Mixing both
variants is a bad style and most contributors seem to prefer this
style; it also helps us to get used to it, portability, and
standardization.

Theoretically no binary change, except one in practice: httpd.o has a
different checksum because gcc with -O2 pads/optimizes "struct
privsep" differently when using "unsigned int" instead "u_int" for the
affected members.  "u_int" is just a typedef of "unsigned int", -O0
doesn't build the difference and clang with -O2 doesn't do it either -
it is just another curiosity from gcc-land.

OK semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.12 2015/04/11 14:52:49 jsing Exp $	*/
d73 3
@


1.12
log
@Always check the return value of proc_composev_imsg() and handle failures
appropriately. Otherwise imsg construction can silently fail, resulting in
non-obvious problems.

Found the hard way by Theodore Wynnychenko.

ok doug@@ florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.11 2015/02/08 00:00:59 reyk Exp $	*/
d49 1
a49 1
static u_int32_t		 last_log_id = 0;
d141 1
a141 1
	u_int32_t		 id;
d163 1
a163 1
	u_int32_t		 id;
d247 1
a247 1
	u_int32_t		 id;
@


1.11
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.10 2015/01/21 22:21:05 reyk Exp $	*/
d121 5
a125 2
	proc_composev_imsg(env->sc_ps, PROC_PARENT, -1, IMSG_LOG_OPEN, -1,
	    iov, 2);
d130 5
@


1.10
log
@httpd is based on relayd and had included many headers that are only
needed by its ancestor.  jsg@@, include-what-you-use, and some manual
review helped to cleanup the headers (take iwyu with a grain of salt).
Based on common practice, httpd.h now also includes the necessary
headers for itself.

OK florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.9 2015/01/16 06:40:17 deraadt Exp $	*/
d197 1
a197 1
		return(0);
@


1.9
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.8 2014/12/21 00:54:49 guenther Exp $	*/
a20 1
#include <sys/socket.h>
d24 1
a24 3
#include <net/if.h>
#include <arpa/inet.h>

d30 1
a30 1
#include <event.h>
@


1.8
log
@Stop pulling in <arpa/inet.h> or <arpa/nameser.h> when unnecessary.
*Do* pull it in when in_{port,addr}_h is needed and <netinet/in.h> isn't.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.7 2014/11/11 15:54:45 beck Exp $	*/
d19 1
d156 1
a156 1
	char			 path[MAXPATHLEN];
@


1.7
log
@Allow the log directory to be configurable in the config file, rather than
fixed as /logs within the chroot.  As this httpd is properly privesp'ed this
has the nice property of allowing us to put the logs outside the chroot if
we want to.
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.6 2014/11/10 14:16:22 beck Exp $	*/
d25 1
@


1.6
log
@Don't attempt to open log files when using syslog, as we are not going to
use them.
ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.5 2014/08/06 12:56:58 reyk Exp $	*/
d167 2
a168 2
	if ((len = (size_t)snprintf(path, sizeof(path), "%s%s",
	    env->sc_chroot, HTTPD_LOGROOT)) >= sizeof(path))
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.4 2014/08/06 12:29:43 jsg Exp $	*/
d196 3
@


1.5.4.1
log
@httpd was developed very rapidly in the weeks before 5.6 release,
and it has a few flaws.  It would be nice to get these flaws fully
remediated before the next release, and that requires the community
to want to use it.
Therefore here is a "jumbo" patch that brings in the most important fixes.

committing on behalf of reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.5 2014/08/06 12:56:58 reyk Exp $	*/
a195 3

	if (srv_conf->flags & SRVFLAG_SYSLOG)
		return(0);
@


1.4
log
@avoid displaying a NULL pointer
ok deraadt@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.3 2014/08/05 15:36:59 reyk Exp $	*/
d112 1
a112 1
	(void)strlcpy(log->log_name, name, sizeof(log->log_name));	
@


1.3
log
@Improve logging to allow per- server/location log files.  The log
files can also be owned by root now: they're opened by the parent and
send to the logger process with fd passing.  This also works with reload.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.2 2014/08/04 15:57:25 reyk Exp $	*/
d253 1
a253 1
		log_warnx("log file %s not opened", log->log_name);
@


1.2
log
@Print error message if the log files cannot be opened.
@
text
@d1 1
a1 1
/*	$OpenBSD: logger.c,v 1.1 2014/08/04 15:49:28 reyk Exp $	*/
d21 2
d41 3
d50 1
a50 2
int				 log_fd = -1;
int				 error_fd = -1;
a71 13
logger_close(void)
{
	if (log_fd != -1) {
		close(log_fd);
		log_fd = -1;
	}
	if (error_fd != -1) {
		close(error_fd);
		error_fd = -1;
	}
}

void
d82 67
d152 1
a152 1
logger_start(void)
d154 22
a175 4
	logger_close();
	if ((log_fd = open(HTTPD_ACCESS_LOG,
	    O_WRONLY|O_APPEND|O_CREAT, 0644)) == -1) {
		log_warn("failed to open %s", HTTPD_ACCESS_LOG);
d178 3
a180 3
	if ((error_fd = open(HTTPD_ERROR_LOG,
	    O_WRONLY|O_APPEND|O_CREAT, 0644)) == -1) {
		log_warn("failed to open %s", HTTPD_ERROR_LOG);
d183 47
d236 10
a245 2
	char	*logline;
	int	 fd;
d248 1
a248 1
		fd = log_fd;
d250 6
a255 1
		fd = error_fd;
d258 1
a258 1
	logline = imsg->data;
d263 1
a263 1
	if (dprintf(fd, "%s\n", logline) == -1) {
d275 3
d283 2
a284 1
		return (logger_start());
d288 2
a301 1
		return (logger_log(imsg));
d303 2
a304 1
		return (logger_log(imsg));
@


1.1
log
@Add initial support for log files in /var/www/logs/.  Logging with
syslog is still supported but disabled by default.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d98 2
a99 1
	    O_WRONLY|O_APPEND|O_CREAT, 0644)) == -1)
d101 1
d103 2
a104 1
	    O_WRONLY|O_APPEND|O_CREAT, 0644)) == -1)
d106 1
@

