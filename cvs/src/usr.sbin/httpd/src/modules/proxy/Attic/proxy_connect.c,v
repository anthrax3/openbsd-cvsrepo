head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.26
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.22
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.11;

1.11
date	2008.05.09.08.06.28;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.09.12.13.10;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.21.13.11.36;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.19.21.31.16;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.29.02.08.06;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.29.10.21.45;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.22.18.15;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.51;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.43;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.06.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.50;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.50;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.42;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.55;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.40;	author henning;	state Exp;
branches;
next	;


desc
@@


1.12
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/* CONNECT method for Apache proxy */

#include "mod_proxy.h"
#include "http_log.h"
#include "http_main.h"

/*
 * This handles Netscape CONNECT method secure proxy requests.
 * A connection is opened to the specified host and data is
 * passed through between the WWW site and the browser.
 *
 * This code is based on the INTERNET-DRAFT document
 * "Tunneling SSL Through a WWW Proxy" currently at
 * http://www.mcom.com/newsref/std/tunneling_ssl.html.
 *
 * If proxyhost and proxyport are set, we send a CONNECT to
 * the specified proxy..
 *
 * FIXME: this is bad, because it does its own socket I/O
 *        instead of using the I/O in buff.c.  However,
 *        the I/O in buff.c blocks on reads, and because
 *        this function doesn't know how much data will
 *        be sent either way (or when) it can't use blocking
 *        I/O.  This may be very implementation-specific
 *        (to Linux).  Any suggestions?
 * FIXME: this doesn't log the number of bytes sent, but
 *        that may be okay, since the data is supposed to
 *        be transparent. In fact, this doesn't log at all
 *        yet. 8^)
 * FIXME: doesn't check any headers initally sent from the
 *        client.
 * FIXME: should allow authentication, but hopefully the
 *        generic proxy authentication is good enough.
 * FIXME: no check for r->assbackwards, whatever that is.
 */

static int allowed_port(proxy_server_conf *conf, int port)
{
    int i;
    int *list = (int *)conf->allowed_connect_ports->elts;

    for (i = 0; i < conf->allowed_connect_ports->nelts; i++) {
        if (port == list[i])
            return 1;
    }
    return 0;
}


int ap_proxy_connect_handler(request_rec *r, cache_req *c, char *url,
                                 const char *proxyhost, int proxyport)
{
    struct sockaddr_in server;
    struct addrinfo hints, *res, *res0;
    const char *hoststr;
    const char *portstr = NULL;
    char *p;
    int port, sock;
    char buffer[HUGE_STRING_LEN];
    int nbytes, i;
    fd_set fds;
    int error;

    void *sconf = r->server->module_config;
    proxy_server_conf *conf =
    (proxy_server_conf *)ap_get_module_config(sconf, &proxy_module);
    struct noproxy_entry *npent = (struct noproxy_entry *) conf->noproxies->elts;

    memset(&server, '\0', sizeof(server));
#ifdef HAVE_SOCKADDR_LEN
    server.sin_len = sizeof(server);
#endif
    server.sin_family = AF_INET;

    /* Break the URL into host:port pairs */

    hoststr = url;
    p = strchr(url, ':');
    if (p == NULL) {
	char pbuf[32];
	ap_snprintf(pbuf, sizeof(pbuf), "%d", DEFAULT_HTTPS_PORT);
	portstr = pbuf;
    } else {
	portstr = p + 1;
	*p = '\0';
    }
    port = atoi(portstr);

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = PF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    error = getaddrinfo(hoststr, portstr, &hints, &res0);
    if (error && proxyhost == NULL) {
	return ap_proxyerror(r, HTTP_INTERNAL_SERVER_ERROR,
		    gai_strerror(error));       /* give up */
    }

/* check if ProxyBlock directive on this host */
    for (i = 0; i < conf->noproxies->nelts; i++) {
	int fail;
	struct sockaddr_in *sin;

	fail = 0;
	if (npent[i].name != NULL && strstr(hoststr, npent[i].name))
	    fail++;
	if (npent[i].name != NULL && strcmp(npent[i].name, "*") == 0)
	    fail++;
	for (res = res0; res; res = res->ai_next) {
	    switch (res->ai_family) {
	    case AF_INET:
		sin = (struct sockaddr_in *)res->ai_addr;
		if (sin->sin_addr.s_addr == npent[i].addr.s_addr)
		    fail++;
		break;
	    }
	}
	if (fail) {
	    if (res0 != NULL)
		freeaddrinfo(res0);
	    return ap_proxyerror(r, HTTP_FORBIDDEN,
				 "Connect to remote machine blocked");
	}
    }

    /* Check if it is an allowed port */
    if (conf->allowed_connect_ports->nelts == 0) {
        /* Default setting if not overridden by AllowCONNECT */
        switch (port) {
        case DEFAULT_HTTPS_PORT:
        case DEFAULT_SNEWS_PORT:
            break;
        default:
	    if (res0 != NULL)
		freeaddrinfo(res0);
            return HTTP_FORBIDDEN;
        }
    }
    else if(!allowed_port(conf, port)) {
	if (res0 != NULL)
		freeaddrinfo(res0);
        return HTTP_FORBIDDEN;
    }

    if (proxyhost) {
	char pbuf[10];

	if (res0 != NULL)
		freeaddrinfo(res0);
	ap_snprintf(pbuf, sizeof(pbuf), "%d", proxyport);
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;
	error = getaddrinfo(proxyhost, pbuf, &hints, &res0);
	if (error)
		return HTTP_INTERNAL_SERVER_ERROR;  /* XXX */

        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
		"CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
    }
    else {
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "CONNECT to %s on port %d", hoststr, port);
    }

    sock = i = -1;
    for (res = res0; res; res = res->ai_next) {
      sock = ap_psocket(r->pool, res->ai_family, res->ai_socktype, res->ai_protocol);
      if (sock == -1)
	continue;

	if (sock >= FD_SETSIZE) {
		ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_WARNING, NULL,
			"proxy_connect_handler: filedescriptor (%u) "
			"larger than FD_SETSIZE (%u) "
			"found, you probably need to rebuild Apache with a "
			"larger FD_SETSIZE", sock, FD_SETSIZE);
		ap_pclosesocket(r->pool, sock);
		return HTTP_INTERNAL_SERVER_ERROR;
	}

      i = ap_proxy_doconnect(sock, res->ai_addr, r);
      if (i == 0)
	break;
    }
    freeaddrinfo(res0);
    if (i == -1) {
        ap_pclosesocket(r->pool, sock);
        return ap_proxyerror(r, HTTP_INTERNAL_SERVER_ERROR, ap_pstrcat(r->pool,
        "Could not connect to remote machine:<br>", strerror(errno), NULL));
    }

    /*
     * If we are connecting through a remote proxy, we need to pass the
     * CONNECT request on to it.
     */
    if (proxyport) {
        /*
         * FIXME: We should not be calling write() directly, but we currently
         * have no alternative.  Error checking ignored.  Also, we force a
         * HTTP/1.0 request to keep things simple.
         */
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Sending the CONNECT request to the remote proxy");
        ap_snprintf(buffer, sizeof(buffer), "CONNECT %s HTTP/1.0" CRLF, r->uri);
        send(sock, buffer, strlen(buffer), 0);
        ap_snprintf(buffer, sizeof(buffer),
                    "Proxy-agent: %s" CRLF CRLF, ap_get_server_version());
        send(sock, buffer, strlen(buffer), 0);
    }
    else {
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Returning 200 OK Status");
        ap_rvputs(r, "HTTP/1.0 200 Connection established" CRLF, NULL);
        ap_rvputs(r, "Proxy-agent: ", ap_get_server_version(), CRLF CRLF, NULL);
        ap_bflush(r->connection->client);
    }

    while (1) {                 /* Infinite loop until error (one side closes
                                 * the connection) */
        FD_ZERO(&fds);
        FD_SET(sock, &fds);
        FD_SET(ap_bfileno(r->connection->client, B_WR), &fds);

        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Going to sleep (select)");
        i = ap_select((ap_bfileno(r->connection->client, B_WR) > sock ?
                       ap_bfileno(r->connection->client, B_WR) + 1 :
                       sock + 1), &fds, NULL, NULL, NULL);
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Woke from select(), i=%d", i);

        if (i) {
            if (FD_ISSET(sock, &fds)) {
                ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                             "sock was set");
                if ((nbytes = recv(sock, buffer, HUGE_STRING_LEN, 0)) != 0) {
                    if (nbytes == -1)
                        break;
                    if (send(ap_bfileno(r->connection->client, B_WR), buffer,
                             nbytes, 0) == EOF)
                        break;
                    ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO,
                             r->server, "Wrote %d bytes to client", nbytes);
                }
                else
                    break;
            }
            else if (FD_ISSET(ap_bfileno(r->connection->client, B_WR), &fds)) {
                ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                             "client->fd was set");
                if ((nbytes = recv(ap_bfileno(r->connection->client, B_WR),
                                   buffer, HUGE_STRING_LEN, 0)) != 0) {
                    if (nbytes == -1)
                        break;
                    if (send(sock, buffer, nbytes, 0) == EOF)
                        break;
                    ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO,
                             r->server, "Wrote %d bytes to server", nbytes);
                }
                else
                    break;
            }
            else
                break;          /* Must be done waiting */
        }
        else
            break;
    }

    ap_pclosesocket(r->pool, sock);

    return OK;
}
@


1.11
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@@


1.10
log
@cleanup and unifdef'ing, no change in object files
work by Daniel Ouellet <daniel@@presscom.net>
@
text
@d112 3
a114 3
    struct in_addr destaddr;
    struct hostent server_hp;
    const char *host, *err;
d118 1
a118 1
    int nbytes, i, j;
d120 1
d128 3
d135 1
a135 1
    host = url;
d137 18
a154 5
    if (p == NULL)
        port = DEFAULT_HTTPS_PORT;
    else {
        port = atoi(p + 1);
        *p = '\0';
a157 1
    destaddr.s_addr = ap_inet_addr(host);
d159 23
a181 5
        if ((npent[i].name != NULL && strstr(host, npent[i].name) != NULL)
            || destaddr.s_addr == npent[i].addr.s_addr
            || npent[i].name[0] == '*')
            return ap_proxyerror(r, HTTP_FORBIDDEN,
                                 "Connect to remote machine blocked");
d192 2
d197 3
a199 1
    else if (!allowed_port(conf, port))
d201 1
d204 13
d218 1
a218 1
             "CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
d222 1
a222 1
                     "CONNECT to %s on port %d", host, port);
d225 19
a243 32
    /* Nasty cast to work around broken terniary expressions on MSVC */
    server.sin_port = htons((unsigned short)(proxyport ? proxyport : port));
    err = ap_proxy_host2addr(proxyhost ? proxyhost : host, &server_hp);

    if (err != NULL)
        return ap_proxyerror(r,
            proxyhost ? HTTP_BAD_GATEWAY : HTTP_INTERNAL_SERVER_ERROR, err);

    sock = ap_psocket_ex(r->pool, PF_INET, SOCK_STREAM, IPPROTO_TCP, 1);
    if (sock == -1) {
        ap_log_rerror(APLOG_MARK, APLOG_ERR, r, "proxy: error creating socket");
        return HTTP_INTERNAL_SERVER_ERROR;
    }

    if (sock >= FD_SETSIZE) {
        ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_WARNING, NULL,
                     "proxy_connect_handler: filedescriptor (%u) "
                     "larger than FD_SETSIZE (%u) "
                     "found, you probably need to rebuild Apache with a "
                     "larger FD_SETSIZE", sock, FD_SETSIZE);
        ap_pclosesocket(r->pool, sock);
        return HTTP_INTERNAL_SERVER_ERROR;
    }

    j = 0;
    while (server_hp.h_addr_list[j] != NULL) {
        memcpy(&server.sin_addr, server_hp.h_addr_list[j],
               sizeof(struct in_addr));
        i = ap_proxy_doconnect(sock, &server, r);
        if (i == 0)
            break;
        j++;
d245 1
@


1.9
log
@merge
@
text
@a64 4
#ifdef HAVE_BSTRING_H
#include <bstring.h>            /* for IRIX, FD_SET calls bzero() */
#endif

a186 1
#ifdef CHECK_FD_SETSIZE
a195 1
#endif
@


1.8
log
@merge
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d185 1
a185 1
    sock = ap_psocket(r->pool, PF_INET, SOCK_STREAM, IPPROTO_TCP);
@


1.7
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d69 1
a69 1
/*  
d78 2
a79 2
 * If proxyhost and proxyport are set, we send a CONNECT to 
 * the specified proxy..  
d99 1
a99 2
static int
allowed_port(proxy_server_conf *conf, int port)
d102 1
a102 1
    int *list = (int *) conf->allowed_connect_ports->elts;
d104 2
a105 2
    for(i = 0; i < conf->allowed_connect_ports->nelts; i++) {
        if(port == list[i])
d113 1
a113 1
                          const char *proxyhost, int proxyport)
d127 2
a128 2
    (proxy_server_conf *) ap_get_module_config(sconf, &proxy_module);
    struct noproxy_entry *npent = (struct noproxy_entry *)conf->noproxies->elts;
d158 5
a162 5
            case DEFAULT_HTTPS_PORT:
            case DEFAULT_SNEWS_PORT:
                break;
            default:
                return HTTP_FORBIDDEN;
d164 2
a165 1
    } else if(!allowed_port(conf, port))
d169 2
a170 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
d173 2
a174 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "CONNECT to %s on port %d", host, port);
d183 1
a183 1
           proxyhost ? HTTP_BAD_GATEWAY : HTTP_INTERNAL_SERVER_ERROR, err);
d193 5
a197 5
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_WARNING, NULL,
            "proxy_connect_handler: filedescriptor (%u) "
            "larger than FD_SETSIZE (%u) "
            "found, you probably need to rebuild Apache with a "
            "larger FD_SETSIZE", sock, FD_SETSIZE);
d215 1
a215 1
            "Could not connect to remote machine:<br>", strerror(errno), NULL));
d218 3
a220 2
    /* If we are connecting through a remote proxy, we need to pass
     * the CONNECT request on to it.
d223 4
a226 3
        /* FIXME: We should not be calling write() directly, but we currently
         * have no alternative.  Error checking ignored.  Also, we force
         * a HTTP/1.0 request to keep things simple.
d228 2
a229 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "Sending the CONNECT request to the remote proxy");
d231 1
a231 1
        send(sock, buffer, strlen(buffer),0);
d233 2
a234 2
            "Proxy-agent: %s" CRLF CRLF, ap_get_server_version());
        send(sock, buffer, strlen(buffer),0);
d237 2
a238 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "Returning 200 OK Status");
d244 2
a245 1
    while (1) { /* Infinite loop until error (one side closes the connection) */
d250 2
a251 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "Going to sleep (select)");
d253 4
a256 4
            ap_bfileno(r->connection->client, B_WR) + 1 :
            sock + 1), &fds, NULL, NULL, NULL);
        ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
            "Woke from select(), i=%d", i);
d260 3
a262 3
                ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
                    "sock was set");
                if ((nbytes = recv(sock, buffer, HUGE_STRING_LEN,0)) != 0) {
d266 1
a266 1
                        nbytes,0) == EOF)
d268 2
a269 2
                    ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO,
                        r->server, "Wrote %d bytes to client", nbytes);
d275 2
a276 2
                ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r->server,
                    "client->fd was set");
d278 1
a278 1
                    buffer, HUGE_STRING_LEN, 0)) != 0) {
d283 2
a284 2
                    ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO,
                        r->server, "Wrote %d bytes to server", nbytes);
@


1.6
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
d66 1
a66 1
#include <bstring.h>		/* for IRIX, FD_SET calls bzero() */
a68 2
DEF_Explain

d106 2
a107 2
	if(port == list[i])
	    return 1;
d114 1
a114 1
			  const char *proxyhost, int proxyport)
d129 1
a129 1
    struct noproxy_entry *npent = (struct noproxy_entry *) conf->noproxies->elts;
d139 1
a139 1
	port = DEFAULT_HTTPS_PORT;
d141 2
a142 2
	port = atoi(p + 1);
	*p = '\0';
d148 5
a152 4
	if ((npent[i].name != NULL && strstr(host, npent[i].name) != NULL)
	    || destaddr.s_addr == npent[i].addr.s_addr || npent[i].name[0] == '*')
	    return ap_proxyerror(r, HTTP_FORBIDDEN,
				 "Connect to remote machine blocked");
d157 8
a164 8
	/* Default setting if not overridden by AllowCONNECT */
	switch (port) {
	    case DEFAULT_HTTPS_PORT:
	    case DEFAULT_SNEWS_PORT:
		break;
	    default:
		return HTTP_FORBIDDEN;
	}
d166 1
a166 1
	return HTTP_FORBIDDEN;
d169 2
a170 1
	Explain2("CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
d173 2
a174 1
	Explain2("CONNECT to %s on port %d", host, port);
d177 2
a178 1
    server.sin_port = (proxyport ? htons(proxyport) : htons(port));
d182 2
a183 3
	return ap_proxyerror(r,
			     proxyhost ? HTTP_BAD_GATEWAY : HTTP_INTERNAL_SERVER_ERROR,
			     err);
d187 2
a188 3
	ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
		    "proxy: error creating socket");
	return HTTP_INTERNAL_SERVER_ERROR;
d193 7
a199 7
	ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_WARNING, NULL,
	    "proxy_connect_handler: filedescriptor (%u) "
	    "larger than FD_SETSIZE (%u) "
	    "found, you probably need to rebuild Apache with a "
	    "larger FD_SETSIZE", sock, FD_SETSIZE);
	ap_pclosesocket(r->pool, sock);
	return HTTP_INTERNAL_SERVER_ERROR;
d205 6
a210 6
	memcpy(&server.sin_addr, server_hp.h_addr_list[j],
	       sizeof(struct in_addr));
	i = ap_proxy_doconnect(sock, &server, r);
	if (i == 0)
	    break;
	j++;
d213 3
a215 4
	ap_pclosesocket(r->pool, sock);
	return ap_proxyerror(r, HTTP_INTERNAL_SERVER_ERROR, ap_pstrcat(r->pool,
					"Could not connect to remote machine:<br>",
					strerror(errno), NULL));
d222 11
a232 11
	/* FIXME: We should not be calling write() directly, but we currently
	 * have no alternative.  Error checking ignored.  Also, we force
	 * a HTTP/1.0 request to keep things simple.
	 */
	Explain0("Sending the CONNECT request to the remote proxy");
	ap_snprintf(buffer, sizeof(buffer), "CONNECT %s HTTP/1.0" CRLF,
		    r->uri);
	send(sock, buffer, strlen(buffer),0);
	ap_snprintf(buffer, sizeof(buffer),
		    "Proxy-agent: %s" CRLF CRLF, ap_get_server_version());
	send(sock, buffer, strlen(buffer),0);
d235 56
a290 48
	Explain0("Returning 200 OK Status");
	ap_rvputs(r, "HTTP/1.0 200 Connection established" CRLF, NULL);
	ap_rvputs(r, "Proxy-agent: ", ap_get_server_version(), CRLF CRLF, NULL);
	ap_bflush(r->connection->client);
    }

    while (1) {			/* Infinite loop until error (one side closes the connection) */
	FD_ZERO(&fds);
	FD_SET(sock, &fds);
	FD_SET(ap_bfileno(r->connection->client, B_WR), &fds);

	Explain0("Going to sleep (select)");
	i = ap_select((ap_bfileno(r->connection->client, B_WR) > sock ?
		       ap_bfileno(r->connection->client, B_WR) + 1 :
		       sock + 1), &fds, NULL, NULL, NULL);
	Explain1("Woke from select(), i=%d", i);

	if (i) {
	    if (FD_ISSET(sock, &fds)) {
		Explain0("sock was set");
		if ((nbytes = recv(sock, buffer, HUGE_STRING_LEN,0)) != 0) {
		    if (nbytes == -1)
			break;
		    if (send(ap_bfileno(r->connection->client, B_WR), buffer, nbytes,0) == EOF)
			break;
		    Explain1("Wrote %d bytes to client", nbytes);
		}
		else
		    break;
	    }
	    else if (FD_ISSET(ap_bfileno(r->connection->client, B_WR), &fds)) {
		Explain0("client->fd was set");
		if ((nbytes = recv(ap_bfileno(r->connection->client, B_WR), buffer,
				   HUGE_STRING_LEN, 0)) != 0) {
		    if (nbytes == -1)
			break;
		    if (send(sock, buffer, nbytes, 0) == EOF)
			break;
		    Explain1("Wrote %d bytes to server", nbytes);
		}
		else
		    break;
	    }
	    else
		break;		/* Must be done waiting */
	}
	else
	    break;
@


1.5
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1996-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d229 1
a229 1
	write(sock, buffer, strlen(buffer));
d232 1
a232 1
	write(sock, buffer, strlen(buffer));
d255 1
a255 1
		if ((nbytes = read(sock, buffer, HUGE_STRING_LEN)) != 0) {
d258 1
a258 1
		    if (write(ap_bfileno(r->connection->client, B_WR), buffer, nbytes) == EOF)
d267 2
a268 2
		if ((nbytes = read(ap_bfileno(r->connection->client, B_WR), buffer,
				   HUGE_STRING_LEN)) != 0) {
d271 1
a271 1
		    if (write(sock, buffer, nbytes) == EOF)
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d244 1
a244 1
	FD_SET(r->connection->client->fd, &fds);
d247 2
a248 2
	i = ap_select((r->connection->client->fd > sock ?
		       r->connection->client->fd + 1 :
d258 1
a258 1
		    if (write(r->connection->client->fd, buffer, nbytes) == EOF)
d265 1
a265 1
	    else if (FD_ISSET(r->connection->client->fd, &fds)) {
d267 1
a267 1
		if ((nbytes = read(r->connection->client->fd, buffer,
@


1.2
log
@Apache 1.3.4 merge
@
text
@d151 2
a152 1
	    return ap_proxyerror(r, "Connect to remote machine blocked");
d179 3
a181 1
	return ap_proxyerror(r, err);	/* give up */
d190 1
a190 1
#ifndef WIN32
d213 1
a213 1
	return ap_proxyerror(r, ap_pstrcat(r->pool,
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1996,1997 The Apache Group.  All rights reserved.
d23 2
a24 1
 *    prior written permission.
d26 5
a30 1
 * 5. Redistributions of any form whatsoever must retain the following
d58 1
a58 1
/* CONNECT method SSL handling for Apache proxy */
d65 1
a65 1
#include <bstring.h>            /* for IRIX, FD_SET calls bzero() */
d68 2
d79 3
d92 1
a92 1
 *	  yet. 8^)
d98 18
a115 4
 */ 
 
int
proxy_connect_handler(request_rec *r, struct cache_req *c, char *url)
d122 1
a122 1
    int   port, sock;
d124 1
a124 1
    int  nbytes, i, j;
d129 2
a130 2
        (proxy_server_conf *)get_module_config(sconf, &proxy_module);
    struct noproxy_entry *npent=(struct noproxy_entry *)conf->noproxies->elts;
d133 2
a134 2
    server.sin_family=AF_INET;
 
d139 1
a139 1
    if (p==NULL)
d141 3
a143 4
    else
    {
      port = atoi(p+1);
      *p='\0';
d145 1
a145 1
 
d147 5
a151 6
    destaddr.s_addr = inet_addr(host);
    for (i=0; i < conf->noproxies->nelts; i++)
    {
        if ((npent[i].name != NULL && strstr(host, npent[i].name) != NULL)
          || destaddr.s_addr == npent[i].addr.s_addr || npent[i].name[0] == '*')
            return proxyerror(r, "Connect to remote machine blocked");
d154 18
a171 7
    switch (port)
    {
	case DEFAULT_HTTPS_PORT:
	case DEFAULT_SNEWS_PORT:
	    break;
	default:
	    return HTTP_SERVICE_UNAVAILABLE;
d174 3
a176 4
    Explain2("CONNECT to %s on port %d", host, port);
 
    server.sin_port = htons(port);
    err = proxy_host2addr(host, &server_hp);
d178 21
a198 10
	return proxyerror(r, err); /* give up */
 
    sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);  
    if (sock == -1)
    {     
        log_error("proxy: error creating socket", r->server);
        return SERVER_ERROR;
    }     
    note_cleanups_for_fd(r->pool, sock);
 
d201 79
a279 64
        memcpy(&server.sin_addr, server_hp.h_addr_list[j],
            sizeof(struct in_addr));
        i = proxy_doconnect(sock, &server, r);
        if (i == 0)
            break; 
        j++;
    }   
    if (i == -1 )
        return proxyerror(r, "Could not connect to remote machine");
 
    Explain0("Returning 200 OK Status");
 
    rvputs(r, "HTTP/1.0 200 Connection established\015\012", NULL);
    rvputs(r, "Proxy-agent: ", SERVER_VERSION, "\015\012\015\012", NULL);
    bflush(r->connection->client);

    while (1) /* Infinite loop until error (one side closes the connection) */
    {
      FD_ZERO(&fds);
      FD_SET(sock, &fds);
      FD_SET(r->connection->client->fd, &fds);
    
      Explain0("Going to sleep (select)");
      i = select((r->connection->client->fd > sock ?
	r->connection->client->fd+1 :
#ifdef HPUX
	sock+1), (int*)&fds, NULL, NULL, NULL);
#else
	sock+1), &fds, NULL, NULL, NULL);
#endif
      Explain1("Woke from select(), i=%d",i);
    
      if (i)
      {
        if (FD_ISSET(sock, &fds))
        {
           Explain0("sock was set");
           if((nbytes=read(sock,buffer,HUGE_STRING_LEN))!=0)
           {
              if (nbytes==-1)
		  break;
              if (write(r->connection->client->fd, buffer, nbytes)==EOF)
		  break;
              Explain1("Wrote %d bytes to client", nbytes);
           }
           else break;
        }
        else if (FD_ISSET(r->connection->client->fd, &fds))
        { 
           Explain0("client->fd was set");
           if((nbytes=read(r->connection->client->fd,buffer,
		HUGE_STRING_LEN))!=0)   
           {
              if (nbytes==-1)
		  break;
              if (write(sock,buffer,nbytes)==EOF)
		  break;
              Explain1("Wrote %d bytes to server", nbytes);
           }
           else break;
        }
        else break; /* Must be done waiting */
      }
      else break;
d282 2
a283 2
    pclosef(r->pool,sock);
    
d285 1
a285 2
}     

@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d2 1
a2 1
 * Copyright (c) 1996-1998 The Apache Group.  All rights reserved.
d23 1
a23 2
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
d25 1
a25 5
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
d53 1
a53 1
/* CONNECT method for Apache proxy */
d60 1
a60 1
#include <bstring.h>		/* for IRIX, FD_SET calls bzero() */
a62 2
DEF_Explain

a71 3
 * If proxyhost and proxyport are set, we send a CONNECT to 
 * the specified proxy..  
 *
d82 1
a82 1
 *        yet. 8^)
d88 4
a91 18
 */

static int
allowed_port(proxy_server_conf *conf, int port)
{
    int i;
    int *list = (int *) conf->allowed_connect_ports->elts;

    for(i = 0; i < conf->allowed_connect_ports->nelts; i++) {
	if(port == list[i])
	    return 1;
    }
    return 0;
}


int ap_proxy_connect_handler(request_rec *r, cache_req *c, char *url,
			  const char *proxyhost, int proxyport)
d98 1
a98 1
    int port, sock;
d100 1
a100 1
    int nbytes, i, j;
d105 2
a106 2
    (proxy_server_conf *) ap_get_module_config(sconf, &proxy_module);
    struct noproxy_entry *npent = (struct noproxy_entry *) conf->noproxies->elts;
d109 2
a110 2
    server.sin_family = AF_INET;

d115 1
a115 1
    if (p == NULL)
d117 4
a120 3
    else {
	port = atoi(p + 1);
	*p = '\0';
d122 1
a122 1

d124 6
a129 5
    destaddr.s_addr = ap_inet_addr(host);
    for (i = 0; i < conf->noproxies->nelts; i++) {
	if ((npent[i].name != NULL && strstr(host, npent[i].name) != NULL)
	    || destaddr.s_addr == npent[i].addr.s_addr || npent[i].name[0] == '*')
	    return ap_proxyerror(r, "Connect to remote machine blocked");
d132 7
a138 18
    /* Check if it is an allowed port */
    if (conf->allowed_connect_ports->nelts == 0) {
	/* Default setting if not overridden by AllowCONNECT */
	switch (port) {
	    case DEFAULT_HTTPS_PORT:
	    case DEFAULT_SNEWS_PORT:
		break;
	    default:
		return HTTP_FORBIDDEN;
	}
    } else if(!allowed_port(conf, port))
	return HTTP_FORBIDDEN;

    if (proxyhost) {
	Explain2("CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
    }
    else {
	Explain2("CONNECT to %s on port %d", host, port);
d141 4
a144 3
    server.sin_port = (proxyport ? htons(proxyport) : htons(port));
    err = ap_proxy_host2addr(proxyhost ? proxyhost : host, &server_hp);

d146 10
a155 21
	return ap_proxyerror(r, err);	/* give up */

    sock = ap_psocket(r->pool, PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == -1) {
	ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
		    "proxy: error creating socket");
	return HTTP_INTERNAL_SERVER_ERROR;
    }

#ifndef WIN32
    if (sock >= FD_SETSIZE) {
	ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_WARNING, NULL,
	    "proxy_connect_handler: filedescriptor (%u) "
	    "larger than FD_SETSIZE (%u) "
	    "found, you probably need to rebuild Apache with a "
	    "larger FD_SETSIZE", sock, FD_SETSIZE);
	ap_pclosesocket(r->pool, sock);
	return HTTP_INTERNAL_SERVER_ERROR;
    }
#endif

d158 64
a221 12
	memcpy(&server.sin_addr, server_hp.h_addr_list[j],
	       sizeof(struct in_addr));
	i = ap_proxy_doconnect(sock, &server, r);
	if (i == 0)
	    break;
	j++;
    }
    if (i == -1) {
	ap_pclosesocket(r->pool, sock);
	return ap_proxyerror(r, ap_pstrcat(r->pool,
					"Could not connect to remote machine:<br>",
					strerror(errno), NULL));
d224 4
a227 66
    /* If we are connecting through a remote proxy, we need to pass
     * the CONNECT request on to it.
     */
    if (proxyport) {
	/* FIXME: We should not be calling write() directly, but we currently
	 * have no alternative.  Error checking ignored.  Also, we force
	 * a HTTP/1.0 request to keep things simple.
	 */
	Explain0("Sending the CONNECT request to the remote proxy");
	ap_snprintf(buffer, sizeof(buffer), "CONNECT %s HTTP/1.0" CRLF,
		    r->uri);
	write(sock, buffer, strlen(buffer));
	ap_snprintf(buffer, sizeof(buffer),
		    "Proxy-agent: %s" CRLF CRLF, ap_get_server_version());
	write(sock, buffer, strlen(buffer));
    }
    else {
	Explain0("Returning 200 OK Status");
	ap_rvputs(r, "HTTP/1.0 200 Connection established" CRLF, NULL);
	ap_rvputs(r, "Proxy-agent: ", ap_get_server_version(), CRLF CRLF, NULL);
	ap_bflush(r->connection->client);
    }

    while (1) {			/* Infinite loop until error (one side closes the connection) */
	FD_ZERO(&fds);
	FD_SET(sock, &fds);
	FD_SET(r->connection->client->fd, &fds);

	Explain0("Going to sleep (select)");
	i = ap_select((r->connection->client->fd > sock ?
		       r->connection->client->fd + 1 :
		       sock + 1), &fds, NULL, NULL, NULL);
	Explain1("Woke from select(), i=%d", i);

	if (i) {
	    if (FD_ISSET(sock, &fds)) {
		Explain0("sock was set");
		if ((nbytes = read(sock, buffer, HUGE_STRING_LEN)) != 0) {
		    if (nbytes == -1)
			break;
		    if (write(r->connection->client->fd, buffer, nbytes) == EOF)
			break;
		    Explain1("Wrote %d bytes to client", nbytes);
		}
		else
		    break;
	    }
	    else if (FD_ISSET(r->connection->client->fd, &fds)) {
		Explain0("client->fd was set");
		if ((nbytes = read(r->connection->client->fd, buffer,
				   HUGE_STRING_LEN)) != 0) {
		    if (nbytes == -1)
			break;
		    if (write(sock, buffer, nbytes) == EOF)
			break;
		    Explain1("Wrote %d bytes to server", nbytes);
		}
		else
		    break;
	    }
	    else
		break;		/* Must be done waiting */
	}
	else
	    break;
    }
a228 4
    ap_pclosesocket(r->pool, sock);

    return OK;
}
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
d65 1
a65 1
#include <bstring.h>            /* for IRIX, FD_SET calls bzero() */
d68 3
a70 1
/*
d79 2
a80 2
 * If proxyhost and proxyport are set, we send a CONNECT to
 * the specified proxy..
d100 2
a101 1
static int allowed_port(proxy_server_conf *conf, int port)
d104 1
a104 1
    int *list = (int *)conf->allowed_connect_ports->elts;
d106 3
a108 3
    for (i = 0; i < conf->allowed_connect_ports->nelts; i++) {
        if (port == list[i])
            return 1;
d115 1
a115 1
                                 const char *proxyhost, int proxyport)
d129 1
a129 1
    (proxy_server_conf *)ap_get_module_config(sconf, &proxy_module);
d140 1
a140 1
        port = DEFAULT_HTTPS_PORT;
d142 2
a143 2
        port = atoi(p + 1);
        *p = '\0';
d149 3
a151 5
        if ((npent[i].name != NULL && strstr(host, npent[i].name) != NULL)
            || destaddr.s_addr == npent[i].addr.s_addr
            || npent[i].name[0] == '*')
            return ap_proxyerror(r, HTTP_FORBIDDEN,
                                 "Connect to remote machine blocked");
d156 10
a165 11
        /* Default setting if not overridden by AllowCONNECT */
        switch (port) {
        case DEFAULT_HTTPS_PORT:
        case DEFAULT_SNEWS_PORT:
            break;
        default:
            return HTTP_FORBIDDEN;
        }
    }
    else if (!allowed_port(conf, port))
        return HTTP_FORBIDDEN;
d168 1
a168 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
             "CONNECT to remote proxy %s on port %d", proxyhost, proxyport);
d171 1
a171 2
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "CONNECT to %s on port %d", host, port);
d174 1
a174 2
    /* Nasty cast to work around broken terniary expressions on MSVC */
    server.sin_port = htons((unsigned short)(proxyport ? proxyport : port));
d178 1
a178 2
        return ap_proxyerror(r,
            proxyhost ? HTTP_BAD_GATEWAY : HTTP_INTERNAL_SERVER_ERROR, err);
d182 3
a184 2
        ap_log_rerror(APLOG_MARK, APLOG_ERR, r, "proxy: error creating socket");
        return HTTP_INTERNAL_SERVER_ERROR;
d187 1
a187 1
#ifdef CHECK_FD_SETSIZE
d189 7
a195 7
        ap_log_error(APLOG_MARK, APLOG_NOERRNO | APLOG_WARNING, NULL,
                     "proxy_connect_handler: filedescriptor (%u) "
                     "larger than FD_SETSIZE (%u) "
                     "found, you probably need to rebuild Apache with a "
                     "larger FD_SETSIZE", sock, FD_SETSIZE);
        ap_pclosesocket(r->pool, sock);
        return HTTP_INTERNAL_SERVER_ERROR;
d201 6
a206 6
        memcpy(&server.sin_addr, server_hp.h_addr_list[j],
               sizeof(struct in_addr));
        i = ap_proxy_doconnect(sock, &server, r);
        if (i == 0)
            break;
        j++;
d209 4
a212 3
        ap_pclosesocket(r->pool, sock);
        return ap_proxyerror(r, HTTP_INTERNAL_SERVER_ERROR, ap_pstrcat(r->pool,
        "Could not connect to remote machine:<br>", strerror(errno), NULL));
d215 2
a216 3
    /*
     * If we are connecting through a remote proxy, we need to pass the
     * CONNECT request on to it.
d219 11
a229 12
        /*
         * FIXME: We should not be calling write() directly, but we currently
         * have no alternative.  Error checking ignored.  Also, we force a
         * HTTP/1.0 request to keep things simple.
         */
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Sending the CONNECT request to the remote proxy");
        ap_snprintf(buffer, sizeof(buffer), "CONNECT %s HTTP/1.0" CRLF, r->uri);
        send(sock, buffer, strlen(buffer), 0);
        ap_snprintf(buffer, sizeof(buffer),
                    "Proxy-agent: %s" CRLF CRLF, ap_get_server_version());
        send(sock, buffer, strlen(buffer), 0);
d232 48
a279 57
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Returning 200 OK Status");
        ap_rvputs(r, "HTTP/1.0 200 Connection established" CRLF, NULL);
        ap_rvputs(r, "Proxy-agent: ", ap_get_server_version(), CRLF CRLF, NULL);
        ap_bflush(r->connection->client);
    }

    while (1) {                 /* Infinite loop until error (one side closes
                                 * the connection) */
        FD_ZERO(&fds);
        FD_SET(sock, &fds);
        FD_SET(ap_bfileno(r->connection->client, B_WR), &fds);

        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Going to sleep (select)");
        i = ap_select((ap_bfileno(r->connection->client, B_WR) > sock ?
                       ap_bfileno(r->connection->client, B_WR) + 1 :
                       sock + 1), &fds, NULL, NULL, NULL);
        ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                     "Woke from select(), i=%d", i);

        if (i) {
            if (FD_ISSET(sock, &fds)) {
                ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                             "sock was set");
                if ((nbytes = recv(sock, buffer, HUGE_STRING_LEN, 0)) != 0) {
                    if (nbytes == -1)
                        break;
                    if (send(ap_bfileno(r->connection->client, B_WR), buffer,
                             nbytes, 0) == EOF)
                        break;
                    ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO,
                             r->server, "Wrote %d bytes to client", nbytes);
                }
                else
                    break;
            }
            else if (FD_ISSET(ap_bfileno(r->connection->client, B_WR), &fds)) {
                ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO, r->server,
                             "client->fd was set");
                if ((nbytes = recv(ap_bfileno(r->connection->client, B_WR),
                                   buffer, HUGE_STRING_LEN, 0)) != 0) {
                    if (nbytes == -1)
                        break;
                    if (send(sock, buffer, nbytes, 0) == EOF)
                        break;
                    ap_log_error(APLOG_MARK, APLOG_DEBUG | APLOG_NOERRNO,
                             r->server, "Wrote %d bytes to server", nbytes);
                }
                else
                    break;
            }
            else
                break;          /* Must be done waiting */
        }
        else
            break;
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
d185 1
a185 1
    sock = ap_psocket_ex(r->pool, PF_INET, SOCK_STREAM, IPPROTO_TCP, 1);
@


