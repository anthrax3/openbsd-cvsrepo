head	1.15;
access;
symbols
	OPENBSD_5_5:1.14.0.26
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.12.0.14
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.14;

1.14
date	2008.05.19.18.56.41;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.09.08.06.28;	author mbalmer;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.02.19.42.48;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.26.14.02.36;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.17.18.57.06;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.21.13.11.37;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.29.02.08.07;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.29.10.21.50;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.22.18.26;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.30.04;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.56;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.06.59;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.09;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.41;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.17.17.03.23;	author henning;	state Exp;
branches;
next	;


desc
@@


1.15
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/* User Tracking Module (Was mod_cookies.c)
 *
 * *** IMPORTANT NOTE: This module is not designed to generate 
 * *** cryptographically secure cookies.  This means you should not 
 * *** use cookies generated by this module for authentication purposes
 *
 * This Apache module is designed to track users paths through a site.
 * It uses the client-side state ("Cookie") protocol developed by Netscape.
 * It is known to work on most browsers.
 *
 * Each time a page is requested we look to see if the browser is sending
 * us a Cookie: header that we previously generated.
 *
 * If we don't find one then the user hasn't been to this site since
 * starting their browser or their browser doesn't support cookies.  So
 * we generate a unique Cookie for the transaction and send it back to
 * the browser (via a "Set-Cookie" header)
 * Future requests from the same browser should keep the same Cookie line.
 *
 * By matching up all the requests with the same cookie you can
 * work out exactly what path a user took through your site.  To log
 * the cookie use the " %{Cookie}n " directive in a custom access log;
 *
 * Example 1 : If you currently use the standard Log file format (CLF)
 * and use the command "TransferLog somefilename", add the line
 *       LogFormat "%h %l %u %t \"%r\" %s %b %{Cookie}n"
 * to your config file.
 *
 * Example 2 : If you used to use the old "CookieLog" directive, you
 * can emulate it by adding the following command to your config file
 *       CustomLog filename "%{Cookie}n \"%r\" %t"
 *
 * Mark Cox, mjc@@apache.org, 6 July 95
 *
 * This file replaces mod_cookies.c
 */

#include "httpd.h"
#include "http_config.h"
#include "http_core.h"
#include <sys/time.h>

module MODULE_VAR_EXPORT usertrack_module;

typedef struct {
    int always;
    time_t expires;
} cookie_log_state;

typedef enum {
    CT_UNSET,
    CT_NETSCAPE,
    CT_COOKIE,
    CT_COOKIE2
} cookie_type_e;

typedef enum {
    CF_NORMAL,
    CF_COMPACT
} cookie_format_e;

typedef struct {
    int enabled;
    cookie_type_e style;
    cookie_format_e format;
    char *cookie_name;
    char *cookie_domain;
    char *prefix_string;
    char *regexp_string;  /* used to compile regexp; save for debugging */
    regex_t *regexp;  /* used to find usertrack cookie in cookie header */
} cookie_dir_rec;

/* Define this to allow post-2000 cookies. Cookies use two-digit dates,
 * so it might be dicey. (Netscape does it correctly, but others may not)
 */
#define MILLENIAL_COOKIES

/* Default name of the cookie
 */
#define COOKIE_NAME "Apache"


/* Make cookie id: Try to make something unique based on 
 * pid, time, and hostid, plus the user-configurable prefix.
 *
 */
static char * make_cookie_id(char * buffer, int bufsize, request_rec *r,
                             cookie_format_e cformat)
{
    struct timeval tv;
    struct timezone tz = {0, 0};
    char hbuf[NI_MAXHOST];
    const char *rname;
    cookie_dir_rec *dcfg;

    long reqtime = (long) r->request_time;
    long clocktime;

    getnameinfo((struct sockaddr *)&r->connection->remote_addr,
        r->connection->remote_addr.ss_len,
        hbuf, sizeof(hbuf), NULL, 0, NI_NUMERICHOST);

    rname = ap_get_remote_host(r->connection, r->per_dir_config,
					   REMOTE_NAME);
    dcfg = ap_get_module_config(r->per_dir_config, &usertrack_module);

    gettimeofday(&tv, &tz);

    reqtime = (long) tv.tv_sec;
    if (cformat == CF_COMPACT)
	clocktime = (long) (tv.tv_usec % 65535);
    else
	clocktime = (long) (tv.tv_usec / 1000);

    if (cformat == CF_COMPACT)
	ap_snprintf(buffer, bufsize, "%s%s%x%lx%lx", 
		    dcfg->prefix_string, hbuf, (int) getpid(),
                    reqtime, clocktime);
    else
	ap_snprintf(buffer, bufsize, "%s%s.%d%ld%ld", 
		    dcfg->prefix_string, rname, (int) getpid(),
                    reqtime, clocktime);

    return buffer;
}



static void make_cookie(request_rec *r)
{
    cookie_log_state *cls = ap_get_module_config(r->server->module_config,
						 &usertrack_module);

    /* 1024 == hardcoded constant */
    char cookiebuf[1024];
    char *new_cookie;
    cookie_dir_rec *dcfg;

    dcfg = ap_get_module_config(r->per_dir_config, &usertrack_module);

    make_cookie_id(cookiebuf, sizeof(cookiebuf), r, dcfg->format);

    if (cls->expires) {
        struct tm *tms;
        time_t when;

        when = cls->expires;
        if ((dcfg->style == CT_UNSET) || (dcfg->style == CT_NETSCAPE)) {
            when += r->request_time;

#ifndef MILLENIAL_COOKIES
        /*
         * Only two-digit date string, so we can't trust "00" or more.
         * Therefore, we knock it all back to just before midnight on
         * 1/1/2000 (which is 946684799)
         */

        if (when > 946684799)
            when = 946684799;
#endif
        }
        tms = gmtime(&when);

        /* Cookie with date; as strftime '%a, %d-%h-%y %H:%M:%S GMT' */
        new_cookie = ap_psprintf(r->pool, "%s=%s; path=/",
                                 dcfg->cookie_name, cookiebuf);
        if ((dcfg->style == CT_UNSET) || (dcfg->style == CT_NETSCAPE)) {
            new_cookie = ap_psprintf(r->pool, "%s; "
                                     "expires=%s, %.2d-%s-%.2d "
                                     "%.2d:%.2d:%.2d GMT",
                                     new_cookie,
                                     ap_day_snames[tms->tm_wday],
                                     tms->tm_mday,
                                     ap_month_snames[tms->tm_mon],
                                     tms->tm_year % 100,
                                     tms->tm_hour, tms->tm_min, tms->tm_sec);
        }
        else {
            new_cookie = ap_psprintf(r->pool, "%s; max-age=%d",
                                     new_cookie, (int) when);
        }
    }
    else {
	new_cookie = ap_psprintf(r->pool, "%s=%s; path=/",
				 dcfg->cookie_name, cookiebuf);
    }
    if (dcfg->cookie_domain != NULL) {
        new_cookie = ap_psprintf(r->pool, "%s; domain=%s",
                                 new_cookie, dcfg->cookie_domain);
    }
    if (dcfg->style == CT_COOKIE2) {
        new_cookie = ap_pstrcat(r->pool, new_cookie, "; version=1", NULL);
    }

    ap_table_setn(r->headers_out,
                  (dcfg->style == CT_COOKIE2 ? "Set-Cookie2" : "Set-Cookie"),
                  new_cookie);
    ap_table_setn(r->notes, "cookie", ap_pstrdup(r->pool, cookiebuf));   /* log first time */
    return;
}

/*
 * dcfg->regexp is "^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)",
 * which has three subexpressions, $0..$2
 */
#define NUM_SUBS 3

static void set_and_comp_regexp(cookie_dir_rec *dcfg, 
                                pool *p,
                                const char *cookie_name) 
{
    /*
     * The goal is to end up with this regexp, 
     * ^cookie_name=([^;]+)|;[\t]+cookie_name=([^;]+) 
     * with cookie_name obviously substituted either
     * with the real cookie name set by the user in httpd.conf,
     * or with the default COOKIE_NAME.
     */
    dcfg->regexp_string = ap_pstrcat(p, "^", cookie_name,
                                     "=([^;]+)|;[ \t]+", cookie_name,
                                     "=([^;]+)", NULL);
    dcfg->regexp = ap_pregcomp(p, dcfg->regexp_string, REG_EXTENDED);
}

static int spot_cookie(request_rec *r)
{
    cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,
						&usertrack_module);
    const char *cookie_header;
    regmatch_t regm[NUM_SUBS];

    if (!dcfg->enabled) {
        return DECLINED;
    }

    if ((cookie_header = ap_table_get(r->headers_in,
                                      (dcfg->style == CT_COOKIE2
                                       ? "Cookie2"
                                       : "Cookie")))) {
	if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0)) {
	    char *cookieval = NULL;
	    /* Our regexp,
	     * ^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)
	     * only allows for $1 or $2 to be available. ($0 is always
	     * filled with the entire matched expression, not just
	     * the part in parentheses.) So just check for either one
	     * and assign to cookieval if present. */
	    if (regm[1].rm_so != -1) {
		cookieval = ap_pregsub(r->pool, "$1", cookie_header, 
                                       NUM_SUBS, regm);
	    }
	    if (regm[2].rm_so != -1) {
		cookieval = ap_pregsub(r->pool, "$2", cookie_header, 
                                       NUM_SUBS, regm);
	    }
	    /* Set the cookie in a note, for logging */
	    ap_table_setn(r->notes, "cookie", cookieval);

	    return DECLINED;    /* There's already a cookie, no new one */
	}
    }
    make_cookie(r);
    return OK;                  /* We set our cookie */
}

static void *make_cookie_log_state(pool *p, server_rec *s)
{
    cookie_log_state *cls =
    (cookie_log_state *) ap_palloc(p, sizeof(cookie_log_state));

    cls->expires = 0;

    return (void *) cls;
}

static void *make_cookie_dir(pool *p, char *d)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) ap_pcalloc(p, sizeof(cookie_dir_rec));
    dcfg->cookie_name = COOKIE_NAME;
    dcfg->cookie_domain = NULL;
    dcfg->prefix_string = "";
    dcfg->style = CT_UNSET;
    dcfg->format = CF_NORMAL;
    dcfg->enabled = 0;
    /*
     * In case the user does not use the CookieName directive,
     * we need to compile the regexp for the default cookie name.
     */
    set_and_comp_regexp(dcfg, p, COOKIE_NAME);
    return dcfg;
}

static const char *set_cookie_enable(cmd_parms *cmd, void *mconfig, int arg)
{
    cookie_dir_rec *dcfg = mconfig;

    dcfg->enabled = arg;
    return NULL;
}

static const char *set_cookie_exp(cmd_parms *parms, void *dummy,
                                  const char *arg)
{
    cookie_log_state *cls;
    time_t factor, modifier = 0;
    time_t num = 0;
    char *word;

    cls  = ap_get_module_config(parms->server->module_config,
                                &usertrack_module);
    /* The simple case first - all numbers (we assume) */
    if (ap_isdigit(arg[0]) && ap_isdigit(arg[strlen(arg) - 1])) {
        cls->expires = atol(arg);
        return NULL;
    }

    /*
     * The harder case - stolen from mod_expires 
     *
     * CookieExpires "[plus] {<num> <type>}*"
     */

    word = ap_getword_conf(parms->pool, &arg);
    if (!strncasecmp(word, "plus", 1)) {
        word = ap_getword_conf(parms->pool, &arg);
    };

    /* {<num> <type>}* */
    while (word[0]) {
        /* <num> */
	if (ap_isdigit(word[0]))
            num = atoi(word);
        else
            return "bad expires code, numeric value expected.";

        /* <type> */
        word = ap_getword_conf(parms->pool, &arg);
        if (!word[0])
            return "bad expires code, missing <type>";

        factor = 0;
        if (!strncasecmp(word, "years", 1))
            factor = 60 * 60 * 24 * 365;
        else if (!strncasecmp(word, "months", 2))
            factor = 60 * 60 * 24 * 30;
        else if (!strncasecmp(word, "weeks", 1))
            factor = 60 * 60 * 24 * 7;
        else if (!strncasecmp(word, "days", 1))
            factor = 60 * 60 * 24;
        else if (!strncasecmp(word, "hours", 1))
            factor = 60 * 60;
        else if (!strncasecmp(word, "minutes", 2))
            factor = 60;
        else if (!strncasecmp(word, "seconds", 1))
            factor = 1;
        else
            return "bad expires code, unrecognized type";

        modifier = modifier + factor * num;

        /* next <num> */
        word = ap_getword_conf(parms->pool, &arg);
    }

    cls->expires = modifier;

    return NULL;
}

static const char *set_cookie_name(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg = (cookie_dir_rec *) mconfig;

    dcfg->cookie_name = ap_pstrdup(cmd->pool, name);

    set_and_comp_regexp(dcfg, cmd->pool, name);

    if (dcfg->regexp == NULL) {
	return "Regular expression could not be compiled.";
    }
    if (dcfg->regexp->re_nsub + 1 != NUM_SUBS) {
        return ap_pstrcat(cmd->pool, "Invalid cookie name \"",
                           name, "\"", NULL);
    }

    return NULL;
}

/*
 * Set the value for the 'Domain=' attribute.
 */
static const char *set_cookie_domain(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    /*
     * Apply the restrictions on cookie domain attributes.
     */
    if (strlen(name) == 0) {
        return "CookieDomain values may not be null";
    }
    if (name[0] != '.') {
        return "CookieDomain values must begin with a dot";
    }
    if (strchr(&name[1], '.') == NULL) {
        return "CookieDomain values must contain at least one embedded dot";
    }

    dcfg->cookie_domain = ap_pstrdup(cmd->pool, name);
    return NULL;
}

/*
 * Make a note of the cookie style we should use.
 */
static const char *set_cookie_style(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    if (strcasecmp(name, "Netscape") == 0) {
        dcfg->style = CT_NETSCAPE;
    }
    else if ((strcasecmp(name, "Cookie") == 0)
             || (strcasecmp(name, "RFC2109") == 0)) {
        dcfg->style = CT_COOKIE;
    }
    else if ((strcasecmp(name, "Cookie2") == 0)
             || (strcasecmp(name, "RFC2965") == 0)) {
        dcfg->style = CT_COOKIE2;
    }
    else {
        return ap_psprintf(cmd->pool, "Invalid %s keyword: '%s'",
                           cmd->cmd->name, name);
    }

    return NULL;
}

/*
 * Make a note of the cookie format we should use.
 */
static const char *set_cookie_format(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    if (strcasecmp(name, "Normal") == 0) {
        dcfg->format = CF_NORMAL;
    }
    else if (strcasecmp(name, "Compact") == 0) {
        dcfg->format = CF_COMPACT;
    }
    else {
        return ap_psprintf(cmd->pool, "Invalid %s keyword: '%s'",
                           cmd->cmd->name, name);
    }

    return NULL;
}

static const char *set_cookie_prefix(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg = (cookie_dir_rec *) mconfig;

    dcfg->prefix_string = ap_pstrdup(cmd->pool, name);

    return NULL;
}


static const command_rec cookie_log_cmds[] = {
    {"CookieExpires", set_cookie_exp, NULL, OR_FILEINFO, TAKE1,
     "an expiry date code"},
    {"CookieTracking", set_cookie_enable, NULL, OR_FILEINFO, FLAG,
     "whether or not to enable cookies"},
    {"CookieName", set_cookie_name, NULL, OR_FILEINFO, TAKE1,
     "name of the tracking cookie"},
    {"CookieDomain", set_cookie_domain, NULL, OR_FILEINFO, TAKE1,
     "domain to which this cookie applies"},
    {"CookieStyle", set_cookie_style, NULL, OR_FILEINFO, TAKE1,
     "'Netscape', 'Cookie' (RFC2109), or 'Cookie2' (RFC2965)"},
    {"CookieFormat", set_cookie_format, NULL, OR_FILEINFO, TAKE1,
     "'Normal' or 'Compact'"},
    {"CookiePrefix", set_cookie_prefix, NULL, OR_FILEINFO, TAKE1,
     "String prepended to cookie"},
    {NULL}
};

module MODULE_VAR_EXPORT usertrack_module = {
    STANDARD_MODULE_STUFF,
    NULL,                       /* initializer */
    make_cookie_dir,            /* dir config creater */
    NULL,                       /* dir merger --- default is to override */
    make_cookie_log_state,      /* server config */
    NULL,                       /* merge server configs */
    cookie_log_cmds,            /* command table */
    NULL,                       /* handlers */
    NULL,                       /* filename translation */
    NULL,                       /* check_user_id */
    NULL,                       /* check auth */
    NULL,                       /* check access */
    NULL,                       /* type_checker */
    spot_cookie,                /* fixups */
    NULL,                       /* logger */
    NULL,                       /* header parser */
    NULL,                       /* child_init */
    NULL,                       /* child_exit */
    NULL                        /* post read-request */
};



@


1.14
log
@Permit compilation on 3 architectures which show that this diff was
not tested on them.  Older gcc's require decl before code, and this
is supposed to be portable code in that sense.
@
text
@@


1.13
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@d151 1
a151 1

d161 1
a161 1
    const char *rname = ap_get_remote_host(r->connection, r->per_dir_config,
@


1.12
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d150 1
d157 4
a160 1
    unsigned long ipaddr = ntohl(r->connection->remote_addr.sin_addr.s_addr);
d174 2
a175 2
	ap_snprintf(buffer, bufsize, "%s%lx%x%lx%lx", 
		    dcfg->prefix_string, ipaddr, (int) getpid(),
@


1.11
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a147 4
#if defined(NO_GETTIMEOFDAY) && !defined(NO_TIMES)
    clock_t mpe_times;
    struct tms mpe_tms;
#elif !defined(WIN32)
a149 1
#endif
a160 21
#if defined(NO_GETTIMEOFDAY) && !defined(NO_TIMES)
/* We lack gettimeofday(), so we must use time() to obtain the epoch
   seconds, and then times() to obtain CPU clock ticks (milliseconds).
   Combine this together to obtain a hopefully unique cookie ID. */

    mpe_times = times(&mpe_tms);
    clocktime = (long) mpe_tms.tms_utime;
    
#elif defined(NETWARE)
    clocktime = (long) clock();

#elif defined(WIN32)
    /*
     * We lack gettimeofday() and we lack times(). So we'll use
     * GetTickCount(), which returns milliseconds since Windows
     * was started. It should be relatively unique.
     */

    clocktime = (long) GetTickCount();

#else
a167 1
#endif
@


1.10
log
@Fold in backport of 2.0 fix for mod_usertrack core dump
when enabled but no explicit CookieName is set.

From: Apache CVS

ok henning@@
@
text
@a98 1
#if !defined(WIN32) && !defined(MPE) && !defined(TPF)
a99 1
#endif
a152 3
#ifdef NETWARE
    time_t tz = 0;
#else
a153 1
#endif /* defined(NETWARE) */
@


1.9
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@d289 4
a292 2
/* dcfg->regexp is "^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)",
 * which has three subexpressions, $0..$2 */
d295 17
a317 1
    int i;
d374 5
d463 1
a463 8
    /* The goal is to end up with this regexp, 
     * ^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)
     * with cookie_name
     * obviously substituted with the real cookie name set by the
     * user in httpd.conf. */
    dcfg->regexp_string = ap_pstrcat(cmd->pool, "^", name, 
                                     "=([^;]+)|;[ \t]+", name, 
                                     "=([^;]+)", NULL);
d465 1
a465 1
    dcfg->cookie_name = ap_pstrdup(cmd->pool, name);
a466 1
    dcfg->regexp = ap_pregcomp(cmd->pool, dcfg->regexp_string, REG_EXTENDED);
@


1.8
log
@merge
@
text
@d129 2
d289 4
d297 3
a299 2
    const char *cookie;
    char *value;
d305 22
a326 12
    if ((cookie = ap_table_get(r->headers_in,
                               (dcfg->style == CT_COOKIE2
                                ? "Cookie2"
                                : "Cookie"))))
        if ((value = strstr(cookie, dcfg->cookie_name))) {
            char *cookiebuf, *cookieend;

            value += strlen(dcfg->cookie_name) + 1;  /* Skip over the '=' */
            cookiebuf = ap_pstrdup(r->pool, value);
            cookieend = strchr(cookiebuf, ';');
            if (cookieend)
                *cookieend = '\0';      /* Ignore anything after a ; */
d328 3
a330 5
            /* Set the cookie in a note, for logging */
            ap_table_setn(r->notes, "cookie", cookiebuf);

            return DECLINED;    /* There's already a cookie, no new one */
        }
d440 9
d450 10
@


1.7
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d117 5
d125 1
d128 1
d136 3
a138 2
/* Make Cookie: Now we have to generate something that is going to be
 * pretty unique.  We can base it on the pid, time, hostip */
a139 1
#define COOKIE_NAME "Apache"
d141 6
a146 1
static void make_cookie(request_rec *r)
a147 2
    cookie_log_state *cls = ap_get_module_config(r->server->module_config,
						 &usertrack_module);
d159 7
a165 3
    /* 1024 == hardcoded constant */
    char cookiebuf[1024];
    char *new_cookie;
a167 2
    cookie_dir_rec *dcfg;

d176 4
a180 6
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
		(int) getpid(),
                (long) r->request_time, (long) mpe_tms.tms_utime);
#elif defined(NETWARE)
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
        (int) getpid(), (long) r->request_time, (long) clock());                
d183 2
a184 2
     * We lack gettimeofday() and we lack times(). So we'll use a combination
     * of time() and GetTickCount(), which returns milliseconds since Windows
d188 1
a188 3
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
		(int) getpid(),
                (long) r->request_time, (long) GetTickCount());
d193 5
a197 3
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%d", rname,
		(int) getpid(),
                (long) tv.tv_sec, (int) tv.tv_usec / 1000);
d200 28
d337 1
d339 1
d483 33
d527 4
@


1.6
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
d61 4
d67 1
a67 2
 * It is known to work on Netscape browsers, Microsoft Internet
 * Explorer and others currently being developed.
d91 1
a91 11
 * Notes:
 * 1.  This code now logs the initial transaction (the one that created
 *     the cookie to start with).
 * 2.  This module has been designed to not interfere with other Cookies
 *     your site may be using; just avoid sending out cookies with
 *     the name "Apache=" or things will get confused.
 * 3.  If you want you can modify the Set-Cookie line so that the Cookie
 *     never expires.  You would then get the same Cookie each time the
 *     user revisits your site.
 *
 * Mark Cox, mark@@ukweb.com, 6 July 95
d110 7
d119 1
d121 1
d192 5
a196 1
        time_t when = r->request_time + cls->expires;
d208 1
d212 17
a228 6
        new_cookie = ap_psprintf(r->pool,
                "%s=%s; path=/; expires=%s, %.2d-%s-%.2d %.2d:%.2d:%.2d GMT",
                    dcfg->cookie_name, cookiebuf, ap_day_snames[tms->tm_wday],
                    tms->tm_mday, ap_month_snames[tms->tm_mon],
		    tms->tm_year % 100,
                    tms->tm_hour, tms->tm_min, tms->tm_sec);
d234 7
d242 3
a244 1
    ap_table_setn(r->headers_out, "Set-Cookie", new_cookie);
d260 4
a263 1
    if ((cookie = ap_table_get(r->headers_in, "Cookie")))
d298 2
d312 2
a313 1
static const char *set_cookie_exp(cmd_parms *parms, void *dummy, const char *arg)
d315 1
a315 2
    cookie_log_state *cls = ap_get_module_config(parms->server->module_config,
                                              &usertrack_module);
d320 2
d389 54
d444 1
a444 1
    {"CookieExpires", set_cookie_exp, NULL, RSRC_CONF, TAKE1,
d450 4
@


1.5
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
d106 1
a106 1
#if !defined(WIN32) && !defined(MPE)
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@a386 6
#ifdef NETWARE
int main(int argc, char *argv[]) 
{
    ExitThread(TSR_THREAD, 0);
}
#endif
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d140 3
d144 1
d165 3
d385 9
@


1.2
log
@Apache 1.3.4 merge
@
text
@d114 6
a119 1
}      cookie_log_state;
d129 1
a129 1
#define COOKIE_NAME "Apache="
d134 1
a134 1
                                              &usertrack_module);
d146 4
a149 1
					REMOTE_NAME);
d158 2
a159 1
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname, (int) getpid(),
d168 2
a169 1
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname, (int) getpid(),
d175 2
a176 1
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%d", rname, (int) getpid(),
d198 2
a199 2
                "%s%s; path=/; expires=%s, %.2d-%s-%.2d %.2d:%.2d:%.2d GMT",
                    COOKIE_NAME, cookiebuf, ap_day_snames[tms->tm_wday],
d204 4
a207 2
    else
	new_cookie = ap_psprintf(r->pool, "%s%s; path=/", COOKIE_NAME, cookiebuf);
d216 2
a217 2
    int *enable = (int *) ap_get_module_config(r->per_dir_config,
                                            &usertrack_module);
d221 1
a221 1
    if (!*enable)
d223 1
d226 1
a226 1
        if ((value = strstr(cookie, COOKIE_NAME))) {
d229 1
a229 1
            value += strlen(COOKIE_NAME);
d238 1
a238 1
            return DECLINED;    /* Theres already a cookie, no new one */
d256 6
a261 1
    return (void *) ap_pcalloc(p, sizeof(int));
d264 1
a264 1
static const char *set_cookie_enable(cmd_parms *cmd, int *c, int arg)
d266 3
a268 1
    *c = arg;
d339 8
d349 1
a349 1
    "an expiry date code"},
d351 3
a353 1
    "whether or not to enable cookies"},
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
a59 4
 * *** IMPORTANT NOTE: This module is not designed to generate 
 * *** cryptographically secure cookies.  This means you should not 
 * *** use cookies generated by this module for authentication purposes
 *
d62 2
a63 1
 * It is known to work on most browsers.
d87 11
a97 1
 * Mark Cox, mjc@@apache.org, 6 July 95
d105 1
a105 1
#if !defined(WIN32) && !defined(MPE) && !defined(TPF)
d114 1
a114 15
} cookie_log_state;

typedef enum {
    CT_UNSET,
    CT_NETSCAPE,
    CT_COOKIE,
    CT_COOKIE2
} cookie_type_e;

typedef struct {
    int enabled;
    cookie_type_e style;
    char *cookie_name;
    char *cookie_domain;
} cookie_dir_rec;
d124 1
a124 1
#define COOKIE_NAME "Apache"
d129 1
a129 1
						 &usertrack_module);
a134 3
#ifdef NETWARE
    time_t tz = 0;
#else
a135 1
#endif /* defined(NETWARE) */
d141 1
a141 4
					   REMOTE_NAME);
    cookie_dir_rec *dcfg;

    dcfg = ap_get_module_config(r->per_dir_config, &usertrack_module);
d150 1
a150 2
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
		(int) getpid(),
a151 3
#elif defined(NETWARE)
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
        (int) getpid(), (long) r->request_time, (long) clock());                
d159 1
a159 2
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%ld", rname,
		(int) getpid(),
d165 1
a165 2
    ap_snprintf(cookiebuf, sizeof(cookiebuf), "%s.%d%ld%d", rname,
		(int) getpid(),
d171 1
a171 5
        time_t when;

        when = cls->expires;
        if ((dcfg->style == CT_UNSET) || (dcfg->style == CT_NETSCAPE)) {
            when += r->request_time;
a182 1
        }
d186 6
a191 28
        new_cookie = ap_psprintf(r->pool, "%s=%s; path=/",
                                 dcfg->cookie_name, cookiebuf);
        if ((dcfg->style == CT_UNSET) || (dcfg->style == CT_NETSCAPE)) {
            new_cookie = ap_psprintf(r->pool, "%s; "
                                     "expires=%s, %.2d-%s-%.2d "
                                     "%.2d:%.2d:%.2d GMT",
                                     new_cookie,
                                     ap_day_snames[tms->tm_wday],
                                     tms->tm_mday,
                                     ap_month_snames[tms->tm_mon],
                                     tms->tm_year % 100,
                                     tms->tm_hour, tms->tm_min, tms->tm_sec);
        }
        else {
            new_cookie = ap_psprintf(r->pool, "%s; max-age=%d",
                                     new_cookie, (int) when);
        }
    }
    else {
	new_cookie = ap_psprintf(r->pool, "%s=%s; path=/",
				 dcfg->cookie_name, cookiebuf);
    }
    if (dcfg->cookie_domain != NULL) {
        new_cookie = ap_psprintf(r->pool, "%s; domain=%s",
                                 new_cookie, dcfg->cookie_domain);
    }
    if (dcfg->style == CT_COOKIE2) {
        new_cookie = ap_pstrcat(r->pool, new_cookie, "; version=1", NULL);
d193 2
d196 1
a196 3
    ap_table_setn(r->headers_out,
                  (dcfg->style == CT_COOKIE2 ? "Set-Cookie2" : "Set-Cookie"),
                  new_cookie);
d203 2
a204 2
    cookie_dir_rec *dcfg = ap_get_module_config(r->per_dir_config,
						&usertrack_module);
d208 1
a208 1
    if (!dcfg->enabled) {
a209 1
    }
d211 2
a212 5
    if ((cookie = ap_table_get(r->headers_in,
                               (dcfg->style == CT_COOKIE2
                                ? "Cookie2"
                                : "Cookie"))))
        if ((value = strstr(cookie, dcfg->cookie_name))) {
d215 1
a215 1
            value += strlen(dcfg->cookie_name) + 1;  /* Skip over the '=' */
d224 1
a224 1
            return DECLINED;    /* There's already a cookie, no new one */
d242 1
a242 8
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) ap_pcalloc(p, sizeof(cookie_dir_rec));
    dcfg->cookie_name = COOKIE_NAME;
    dcfg->cookie_domain = NULL;
    dcfg->style = CT_UNSET;
    dcfg->enabled = 0;
    return dcfg;
d245 1
a245 1
static const char *set_cookie_enable(cmd_parms *cmd, void *mconfig, int arg)
d247 1
a247 3
    cookie_dir_rec *dcfg = mconfig;

    dcfg->enabled = arg;
d251 1
a251 2
static const char *set_cookie_exp(cmd_parms *parms, void *dummy,
                                  const char *arg)
d253 2
a254 1
    cookie_log_state *cls;
a258 2
    cls  = ap_get_module_config(parms->server->module_config,
                                &usertrack_module);
a317 62
static const char *set_cookie_name(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg = (cookie_dir_rec *) mconfig;

    dcfg->cookie_name = ap_pstrdup(cmd->pool, name);
    return NULL;
}

/*
 * Set the value for the 'Domain=' attribute.
 */
static const char *set_cookie_domain(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    /*
     * Apply the restrictions on cookie domain attributes.
     */
    if (strlen(name) == 0) {
        return "CookieDomain values may not be null";
    }
    if (name[0] != '.') {
        return "CookieDomain values must begin with a dot";
    }
    if (strchr(&name[1], '.') == NULL) {
        return "CookieDomain values must contain at least one embedded dot";
    }

    dcfg->cookie_domain = ap_pstrdup(cmd->pool, name);
    return NULL;
}

/*
 * Make a note of the cookie style we should use.
 */
static const char *set_cookie_style(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    if (strcasecmp(name, "Netscape") == 0) {
        dcfg->style = CT_NETSCAPE;
    }
    else if ((strcasecmp(name, "Cookie") == 0)
             || (strcasecmp(name, "RFC2109") == 0)) {
        dcfg->style = CT_COOKIE;
    }
    else if ((strcasecmp(name, "Cookie2") == 0)
             || (strcasecmp(name, "RFC2965") == 0)) {
        dcfg->style = CT_COOKIE2;
    }
    else {
        return ap_psprintf(cmd->pool, "Invalid %s keyword: '%s'",
                           cmd->cmd->name, name);
    }

    return NULL;
}

d319 2
a320 2
    {"CookieExpires", set_cookie_exp, NULL, OR_FILEINFO, TAKE1,
     "an expiry date code"},
d322 1
a322 7
     "whether or not to enable cookies"},
    {"CookieName", set_cookie_name, NULL, OR_FILEINFO, TAKE1,
     "name of the tracking cookie"},
    {"CookieDomain", set_cookie_domain, NULL, OR_FILEINFO, TAKE1,
     "domain to which this cookie applies"},
    {"CookieStyle", set_cookie_style, NULL, OR_FILEINFO, TAKE1,
     "'Netscape', 'Cookie' (RFC2109), or 'Cookie2' (RFC2965)"},
a346 3



@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
a116 5
typedef enum {
    CF_NORMAL,
    CF_COMPACT
} cookie_format_e;

a119 1
    cookie_format_e format;
a121 1
    char *prefix_string;
d129 3
a131 2
/* Default name of the cookie
 */
d134 1
a134 7

/* Make cookie id: Try to make something unique based on 
 * pid, time, and hostid, plus the user-configurable prefix.
 *
 */
static char * make_cookie_id(char * buffer, int bufsize, request_rec *r,
                             cookie_format_e cformat)
d136 2
d149 5
a153 1

a155 6
    long reqtime = (long) r->request_time;
    long clocktime;

    unsigned long ipaddr = ntohl(r->connection->remote_addr.sin_addr.s_addr);
    const char *rname = ap_get_remote_host(r->connection, r->per_dir_config,
					   REMOTE_NAME);
d164 4
a167 2
    clocktime = (long) mpe_tms.tms_utime;
    
d169 2
a170 2
    clocktime = (long) clock();

d173 2
a174 2
     * We lack gettimeofday() and we lack times(). So we'll use
     * GetTickCount(), which returns milliseconds since Windows
d178 3
a180 1
    clocktime = (long) GetTickCount();
d185 3
a187 5
    reqtime = (long) tv.tv_sec;
    if (cformat == CF_COMPACT)
	clocktime = (long) (tv.tv_usec % 65535);
    else
	clocktime = (long) (tv.tv_usec / 1000);
a189 28
    if (cformat == CF_COMPACT)
	ap_snprintf(buffer, bufsize, "%s%lx%x%lx%lx", 
		    dcfg->prefix_string, ipaddr, (int) getpid(),
                    reqtime, clocktime);
    else
	ap_snprintf(buffer, bufsize, "%s%s.%d%ld%ld", 
		    dcfg->prefix_string, rname, (int) getpid(),
                    reqtime, clocktime);

    return buffer;
}



static void make_cookie(request_rec *r)
{
    cookie_log_state *cls = ap_get_module_config(r->server->module_config,
						 &usertrack_module);

    /* 1024 == hardcoded constant */
    char cookiebuf[1024];
    char *new_cookie;
    cookie_dir_rec *dcfg;

    dcfg = ap_get_module_config(r->per_dir_config, &usertrack_module);

    make_cookie_id(cookiebuf, sizeof(cookiebuf), r, dcfg->format);

a298 1
    dcfg->prefix_string = "";
a299 1
    dcfg->format = CF_NORMAL;
a442 33
/*
 * Make a note of the cookie format we should use.
 */
static const char *set_cookie_format(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg;

    dcfg = (cookie_dir_rec *) mconfig;

    if (strcasecmp(name, "Normal") == 0) {
        dcfg->format = CF_NORMAL;
    }
    else if (strcasecmp(name, "Compact") == 0) {
        dcfg->format = CF_COMPACT;
    }
    else {
        return ap_psprintf(cmd->pool, "Invalid %s keyword: '%s'",
                           cmd->cmd->name, name);
    }

    return NULL;
}

static const char *set_cookie_prefix(cmd_parms *cmd, void *mconfig, char *name)
{
    cookie_dir_rec *dcfg = (cookie_dir_rec *) mconfig;

    dcfg->prefix_string = ap_pstrdup(cmd->pool, name);

    return NULL;
}


a453 4
    {"CookieFormat", set_cookie_format, NULL, OR_FILEINFO, TAKE1,
     "'Normal' or 'Compact'"},
    {"CookiePrefix", set_cookie_prefix, NULL, OR_FILEINFO, TAKE1,
     "String prepended to cookie"},
@


1.1.1.4
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@a128 2
    char *regexp_string;  /* used to compile regexp; save for debugging */
    regex_t *regexp;  /* used to find usertrack cookie in cookie header */
a286 4
/* dcfg->regexp is "^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)",
 * which has three subexpressions, $0..$2 */
#define NUM_SUBS 3

d291 2
a292 3
    const char *cookie_header;
    regmatch_t regm[NUM_SUBS];
    int i;
d298 15
a312 22
    if ((cookie_header = ap_table_get(r->headers_in,
                                      (dcfg->style == CT_COOKIE2
                                       ? "Cookie2"
                                       : "Cookie")))) {
	if (!ap_regexec(dcfg->regexp, cookie_header, NUM_SUBS, regm, 0)) {
	    char *cookieval = NULL;
	    /* Our regexp,
	     * ^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)
	     * only allows for $1 or $2 to be available. ($0 is always
	     * filled with the entire matched expression, not just
	     * the part in parentheses.) So just check for either one
	     * and assign to cookieval if present. */
	    if (regm[1].rm_so != -1) {
		cookieval = ap_pregsub(r->pool, "$1", cookie_header, 
                                       NUM_SUBS, regm);
	    }
	    if (regm[2].rm_so != -1) {
		cookieval = ap_pregsub(r->pool, "$2", cookie_header, 
                                       NUM_SUBS, regm);
	    }
	    /* Set the cookie in a note, for logging */
	    ap_table_setn(r->notes, "cookie", cookieval);
d314 2
a315 3
	    return DECLINED;    /* There's already a cookie, no new one */
	}
    }
a424 9
    /* The goal is to end up with this regexp, 
     * ^cookie_name=([^;]+)|;[ \t]+cookie_name=([^;]+)
     * with cookie_name
     * obviously substituted with the real cookie name set by the
     * user in httpd.conf. */
    dcfg->regexp_string = ap_pstrcat(cmd->pool, "^", name, 
                                     "=([^;]+)|;[ \t]+", name, 
                                     "=([^;]+)", NULL);

a425 10

    dcfg->regexp = ap_pregcomp(cmd->pool, dcfg->regexp_string, REG_EXTENDED);
    if (dcfg->regexp == NULL) {
	return "Regular expression could not be compiled.";
    }
    if (dcfg->regexp->re_nsub + 1 != NUM_SUBS) {
        return ap_pstrcat(cmd->pool, "Invalid cookie name \"",
                           name, "\"", NULL);
    }

@


