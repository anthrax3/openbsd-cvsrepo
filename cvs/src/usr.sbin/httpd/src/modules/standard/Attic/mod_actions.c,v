head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.08.21.13.11.36;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.02.08.06;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.48;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.19.11.17.26;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.29.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.06.35;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.43;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.43;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.57;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.40;	author henning;	state Exp;
branches;
next	;


desc
@@


1.8
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * mod_actions.c: executes scripts based on MIME type or HTTP method
 *
 * by Alexei Kosut; based on mod_cgi.c, mod_mime.c and mod_includes.c,
 * adapted by rst from original NCSA code by Rob McCool
 *
 * Usage instructions:
 *
 * Action mime/type /cgi-bin/script
 * 
 * will activate /cgi-bin/script when a file of content type mime/type is 
 * requested. It sends the URL and file path of the requested document using 
 * the standard CGI PATH_INFO and PATH_TRANSLATED environment variables.
 *
 * Script PUT /cgi-bin/script
 *
 * will activate /cgi-bin/script when a request is received with the
 * HTTP method "PUT".  The available method names are defined in httpd.h.
 * If the method is GET, the script will only be activated if the requested
 * URI includes query information (stuff after a ?-mark).
 */

#include "httpd.h"
#include "http_config.h"
#include "http_request.h"
#include "http_core.h"
#include "http_protocol.h"
#include "http_main.h"
#include "http_log.h"
#include "util_script.h"

typedef struct {
    char *method;
    char *script;
} xmethod_t;

/*
 * HTTP methods are case-sensitive, so we can't use a table structure to
 * track extension method mappings -- table keys are case-INsensitive.
 */
typedef struct {
    table *action_types;       /* Added with Action... */
    char *scripted[METHODS];   /* Added with Script... */
    array_header *xmethods;    /* Added with Script -- extension methods */
} action_dir_config;

module action_module;

static void *create_action_dir_config(pool *p, char *dummy)
{
    action_dir_config *new =
	(action_dir_config *) ap_palloc(p, sizeof(action_dir_config));

    new->action_types = ap_make_table(p, 4);
    memset(new->scripted, 0, sizeof(new->scripted));
    new->xmethods = ap_make_array(p, 4, sizeof(xmethod_t));
    return new;
}

static void *merge_action_dir_configs(pool *p, void *basev, void *addv)
{
    action_dir_config *base = (action_dir_config *) basev;
    action_dir_config *add = (action_dir_config *) addv;
    action_dir_config *new = (action_dir_config *) ap_palloc(p,
                                  sizeof(action_dir_config));
    int i;

    new->action_types = ap_overlay_tables(p, add->action_types,
				       base->action_types);

    for (i = 0; i < METHODS; ++i) {
        new->scripted[i] = add->scripted[i] ? add->scripted[i]
                                            : base->scripted[i];
    }
    new->xmethods = ap_append_arrays(p, add->xmethods, base->xmethods);
    return new;
}

static const char *add_action(cmd_parms *cmd, action_dir_config *m, char *type,
			      char *script)
{
    ap_table_setn(m->action_types, type, script);
    return NULL;
}

static const char *set_script(cmd_parms *cmd, action_dir_config *m,
                              char *method, char *script)
{
    int methnum;

    methnum = ap_method_number_of(method);
    if (methnum == M_TRACE) {
	return "TRACE not allowed for Script";
    }
    else if (methnum != M_INVALID) {
        m->scripted[methnum] = script;
    }
    else {
	/*
	 * We used to return "Unknown method type for Script"
	 * but now we actually handle unknown methods.
	 */
	xmethod_t *xm;
	xmethod_t *list;
	int i;

	/*
	 * Scan through the list; if the method already has a script
	 * defined, overwrite it.  Otherwise, add it.
	 */
	list = (xmethod_t *) m->xmethods->elts;
	for (i = 0; i < m->xmethods->nelts; ++i) {
	    xm = &list[i];
	    if (strcmp(method, xm->method) == 0) {
		xm->script = script;
		break;
	    }
	}
	if (i <= m->xmethods->nelts) {
	    xm = ap_push_array(m->xmethods);
	    xm->method = method;
	    xm->script = script;
	}
    }
    return NULL;
}

static const command_rec action_cmds[] =
{
    {"Action", add_action, NULL, OR_FILEINFO, TAKE2,
     "a media type followed by a script name"},
    {"Script", set_script, NULL, ACCESS_CONF | RSRC_CONF, TAKE2,
     "a method followed by a script name"},
    {NULL}
};

static int action_handler(request_rec *r)
{
    action_dir_config *conf = (action_dir_config *)
        ap_get_module_config(r->per_dir_config, &action_module);
    const char *t, *action = r->handler ? r->handler : 
	ap_field_noparam(r->pool, r->content_type);
    const char *script;
    int i;

    /* Set allowed stuff */
    for (i = 0; i < METHODS; ++i) {
	if (conf->scripted[i]) {
	    r->allowed |= (1 << i);
	}
    }

    /* First, check for the method-handling scripts */
    if (r->method_number == M_GET) {
        if (r->args) {
            script = conf->scripted[M_GET];
	}
        else {
            script = NULL;
	}
    }
    else {
	if (r->method_number != M_INVALID) {
	    script = conf->scripted[r->method_number];
	}
	else {
	    int j;
	    xmethod_t *xm;
	    xmethod_t *list;

	    script = NULL;
	    list = (xmethod_t *) conf->xmethods->elts;
	    for (j = 0; j < conf->xmethods->nelts; ++j) {
		xm = &list[j];
		if (strcmp(r->method, xm->method) == 0) {
		    script = xm->script;
		    break;
		}
	    }
	}
    }

    /* Check for looping, which can happen if the CGI script isn't */
    if (script && r->prev && r->prev->prev) {
	return DECLINED;
    }

    /* Second, check for actions (which override the method scripts) */
    if ((t = ap_table_get(conf->action_types,
			  action ? action : ap_default_type(r)))) {
	script = t;
    }

    if (script == NULL) {
	return DECLINED;
    }

    ap_internal_redirect_handler(ap_pstrcat(r->pool, script,
					    ap_escape_uri(r->pool,
							  r->uri),
					    r->args ? "?" : NULL,
					    r->args, NULL), r);
    return OK;
}

static const handler_rec action_handlers[] =
{
    {"*/*", action_handler},
    {NULL}
};

module action_module =
{
    STANDARD_MODULE_STUFF,
    NULL,			/* initializer */
    create_action_dir_config,	/* dir config creater */
    merge_action_dir_configs,	/* dir merger --- default is to override */
    NULL,			/* server config */
    NULL,			/* merge server config */
    action_cmds,		/* command table */
    action_handlers,		/* handlers */
    NULL,			/* filename translation */
    NULL,			/* check_user_id */
    NULL,			/* check auth */
    NULL,			/* check access */
    NULL,			/* type_checker */
    NULL,			/* fixups */
    NULL,			/* logger */
    NULL,			/* header parser */
    NULL,			/* child_init */
    NULL,			/* child_exit */
    NULL			/* post read-request */
};
@


1.7
log
@merge
@
text
@@


1.6
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
@


1.4
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d198 2
a199 1
    const char *t, *action = r->handler ? r->handler : r->content_type;
@


1.2
log
@Apache 1.3.4 merge
@
text
@d90 9
d101 1
d109 1
a109 1
    (action_dir_config *) ap_palloc(p, sizeof(action_dir_config));
d113 1
a113 1

d132 1
d136 1
a136 1
static const char *add_action(cmd_parms *cmd, action_dir_config * m, char *type,
d143 1
a143 1
static const char *set_script(cmd_parms *cmd, action_dir_config * m,
d149 4
a152 5
    if (methnum == M_TRACE)
        return "TRACE not allowed for Script";
    else if (methnum == M_INVALID)
        return "Unknown method type for Script";
    else
d154 28
a181 1

d204 3
a206 2
        if (conf->scripted[i])
            r->allowed |= (1 << i);
d211 1
a211 1
        if (r->args)
d213 2
a214 1
        else
d216 1
d219 18
a236 1
        script = conf->scripted[r->method_number];
d240 1
a240 1
    if (script && r->prev && r->prev->prev)
d242 1
d246 1
a246 1
		       action ? action : ap_default_type(r)))) {
a247 5
	if (r->finfo.st_mode == 0) {
	    ap_log_rerror(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, r,
			"File does not exist: %s", r->filename);
	    return NOT_FOUND;
	}
d250 1
a250 1
    if (script == NULL)
d252 1
d254 5
a258 2
    ap_internal_redirect_handler(ap_pstrcat(r->pool, script, ap_escape_uri(r->pool,
			  r->uri), r->args ? "?" : NULL, r->args, NULL), r);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
d59 1
a59 1
 * mod_actions.c: executes scripts based on MIME type
d72 6
d90 2
a91 5
    table *action_types;	/* Added with Action... */
    char *get;			/* Added with Script GET */
    char *post;			/* Added with Script POST */
    char *put;			/* Added with Script PUT */
    char *delete;		/* Added with Script DELETE */
d102 1
a102 4
    new->get = NULL;
    new->post = NULL;
    new->put = NULL;
    new->delete = NULL;
d111 3
a113 2
    action_dir_config *new =
    (action_dir_config *) ap_palloc(p, sizeof(action_dir_config));
d118 4
a121 5
    new->get = add->get ? add->get : base->get;
    new->post = add->post ? add->post : base->post;
    new->put = add->put ? add->put : base->put;
    new->delete = add->delete ? add->delete : base->delete;

d132 2
a133 2
static const char *set_script(cmd_parms *cmd, action_dir_config * m, char *method,
			      char *script)
d135 7
a141 8
    if (!strcmp(method, "GET"))
	m->get = script;
    else if (!strcmp(method, "POST"))
	m->post = script;
    else if (!strcmp(method, "PUT"))
	m->put = script;
    else if (!strcmp(method, "DELETE"))
	m->delete = script;
d143 1
a143 1
	return "Unknown method type for Script";
d159 2
a160 2
    action_dir_config *conf =
    (action_dir_config *) ap_get_module_config(r->per_dir_config, &action_module);
d162 2
a163 1
    const char *script = NULL;
d166 4
a169 8
    if (conf->get)
	r->allowed |= (1 << M_GET);
    if (conf->post)
	r->allowed |= (1 << M_POST);
    if (conf->put)
	r->allowed |= (1 << M_PUT);
    if (conf->delete)
	r->allowed |= (1 << M_DELETE);
d172 9
a180 8
    if ((r->method_number == M_GET) && r->args && conf->get)
	script = conf->get;
    else if ((r->method_number == M_POST) && conf->post)
	script = conf->post;
    else if ((r->method_number == M_PUT) && conf->put)
	script = conf->put;
    else if ((r->method_number == M_DELETE) && conf->delete)
	script = conf->delete;
d200 1
a200 1
    ap_internal_redirect_handler(ap_pstrcat(r->pool, script, escape_uri(r->pool,
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
d59 1
a59 1
 * mod_actions.c: executes scripts based on MIME type or HTTP method
a71 6
 * Script PUT /cgi-bin/script
 *
 * will activate /cgi-bin/script when a request is received with the
 * HTTP method "PUT".  The available method names are defined in httpd.h.
 * If the method is GET, the script will only be activated if the requested
 * URI includes query information (stuff after a ?-mark).
d84 5
a88 12
    char *method;
    char *script;
} xmethod_t;

/*
 * HTTP methods are case-sensitive, so we can't use a table structure to
 * track extension method mappings -- table keys are case-INsensitive.
 */
typedef struct {
    table *action_types;       /* Added with Action... */
    char *scripted[METHODS];   /* Added with Script... */
    array_header *xmethods;    /* Added with Script -- extension methods */
d96 1
a96 1
	(action_dir_config *) ap_palloc(p, sizeof(action_dir_config));
d99 5
a103 2
    memset(new->scripted, 0, sizeof(new->scripted));
    new->xmethods = ap_make_array(p, 4, sizeof(xmethod_t));
d111 2
a112 3
    action_dir_config *new = (action_dir_config *) ap_palloc(p,
                                  sizeof(action_dir_config));
    int i;
d117 5
a121 5
    for (i = 0; i < METHODS; ++i) {
        new->scripted[i] = add->scripted[i] ? add->scripted[i]
                                            : base->scripted[i];
    }
    new->xmethods = ap_append_arrays(p, add->xmethods, base->xmethods);
d125 1
a125 1
static const char *add_action(cmd_parms *cmd, action_dir_config *m, char *type,
d132 2
a133 2
static const char *set_script(cmd_parms *cmd, action_dir_config *m,
                              char *method, char *script)
d135 10
a144 1
    int methnum;
a145 34
    methnum = ap_method_number_of(method);
    if (methnum == M_TRACE) {
	return "TRACE not allowed for Script";
    }
    else if (methnum != M_INVALID) {
        m->scripted[methnum] = script;
    }
    else {
	/*
	 * We used to return "Unknown method type for Script"
	 * but now we actually handle unknown methods.
	 */
	xmethod_t *xm;
	xmethod_t *list;
	int i;

	/*
	 * Scan through the list; if the method already has a script
	 * defined, overwrite it.  Otherwise, add it.
	 */
	list = (xmethod_t *) m->xmethods->elts;
	for (i = 0; i < m->xmethods->nelts; ++i) {
	    xm = &list[i];
	    if (strcmp(method, xm->method) == 0) {
		xm->script = script;
		break;
	    }
	}
	if (i <= m->xmethods->nelts) {
	    xm = ap_push_array(m->xmethods);
	    xm->method = method;
	    xm->script = script;
	}
    }
d160 4
a163 6
    action_dir_config *conf = (action_dir_config *)
        ap_get_module_config(r->per_dir_config, &action_module);
    const char *t, *action = r->handler ? r->handler : 
	ap_field_noparam(r->pool, r->content_type);
    const char *script;
    int i;
d166 8
a173 5
    for (i = 0; i < METHODS; ++i) {
	if (conf->scripted[i]) {
	    r->allowed |= (1 << i);
	}
    }
d176 8
a183 28
    if (r->method_number == M_GET) {
        if (r->args) {
            script = conf->scripted[M_GET];
	}
        else {
            script = NULL;
	}
    }
    else {
	if (r->method_number != M_INVALID) {
	    script = conf->scripted[r->method_number];
	}
	else {
	    int j;
	    xmethod_t *xm;
	    xmethod_t *list;

	    script = NULL;
	    list = (xmethod_t *) conf->xmethods->elts;
	    for (j = 0; j < conf->xmethods->nelts; ++j) {
		xm = &list[j];
		if (strcmp(r->method, xm->method) == 0) {
		    script = xm->script;
		    break;
		}
	    }
	}
    }
d186 1
a186 1
    if (script && r->prev && r->prev->prev) {
a187 1
    }
d191 1
a191 1
			  action ? action : ap_default_type(r)))) {
d193 5
d200 1
a200 1
    if (script == NULL) {
a201 1
    }
d203 2
a204 5
    ap_internal_redirect_handler(ap_pstrcat(r->pool, script,
					    ap_escape_uri(r->pool,
							  r->uri),
					    r->args ? "?" : NULL,
					    r->args, NULL), r);
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


