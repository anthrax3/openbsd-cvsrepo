head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.22
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.18
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.16
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.14
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.12
	OPENBSD_5_0:1.12.0.10
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.8
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.12;

1.12
date	2009.06.21.00.38.22;	author martynas;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.25.11.46.27;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2008.05.09.08.06.28;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.09.12.13.10;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.02.19.42.48;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.21.13.11.37;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.02.08.07;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.50;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.18.26;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.56;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.06.58;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.08;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.41;	author henning;	state Exp;
branches;
next	;


desc
@@


1.13
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*	$OpenBSD: mod_unique_id.c,v 1.12 2009/06/21 00:38:22 martynas Exp $	*/

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * mod_unique_id.c: generate a unique identifier for each request
 *
 * Original author: Dean Gaudet <dgaudet@@arctic.org>
 * UUencoding modified by: Alvaro Martinez Echevarria <alvaro@@lander.es>
 */

#include "httpd.h"
#include "http_config.h"
#include "http_log.h"
#include "multithread.h"

typedef struct {
    unsigned int stamp;
    union {
      uint32_t     in;
#ifdef SHORT_UNIQUE_ID
      uint32_t     in6;
#else
      struct in6_addr in6;
#endif
    } addr;
    unsigned int pid;
    unsigned short counter;
} unique_id_rec;

/* Comments:
 *
 * We want an identifier which is unique across all hits, everywhere.
 * "everywhere" includes multiple httpd instances on the same machine, or on
 * multiple machines.  Essentially "everywhere" should include all possible
 * httpds across all servers at a particular "site".  We make some assumptions
 * that if the site has a cluster of machines then their time is relatively
 * synchronized.  We also assume that the first address returned by a
 * gethostbyname (gethostname()) is unique across all the machines at the
 * "site".
 *
 * We also further assume that pids fit in 32-bits.  If something uses more
 * than 32-bits, the fix is trivial, but it requires the unrolled uuencoding
 * loop to be extended.
 *
 * Together, the in_addr and pid are assumed to absolutely uniquely identify
 * this one child from all other currently running children on all servers
 * (including this physical server if it is running multiple httpds) from each
 * other.
 *
 * The stamp and counter are used to distinguish all hits for a particular
 * (in_addr,pid) pair.  The stamp is updated using r->request_time,
 * saving cpu cycles.  The counter is never reset, and is used to permit up to
 * 64k requests in a single second by a single child.
 *
 * The 112-bits of unique_id_rec are encoded using the alphabet
 * [A-Za-z0-9@@-], resulting in 19 bytes of printable characters.  That is then
 * stuffed into the environment variable UNIQUE_ID so that it is available to
 * other modules.  The alphabet choice differs from normal base64 encoding
 * [A-Za-z0-9+/] because + and / are special characters in URLs and we want to
 * make it easy to use UNIQUE_ID in URLs.
 *
 * Note that UNIQUE_ID should be considered an opaque token by other
 * applications.  No attempt should be made to dissect its internal components.
 * It is an abstraction that may change in the future as the needs of this
 * module change.
 *
 * It is highly desirable that identifiers exist for "eternity".  But future
 * needs (such as much faster webservers, moving to 64-bit pids, or moving to a
 * multithreaded server) may dictate a need to change the contents of
 * unique_id_rec.  Such a future implementation should ensure that the first
 * field is still a time_t stamp.  By doing that, it is possible for a site to
 * have a "flag second" in which they stop all of their old-format servers,
 * wait one entire second, and then start all of their new-servers.  This
 * procedure will ensure that the new space of identifiers is completely unique
 * from the old space.  (Since the first four unencoded bytes always differ.)
 */
/*
 * Sun Jun  7 05:43:49 CEST 1998 -- Alvaro
 * More comments:
 * 1) The UUencoding prodecure is now done in a general way, avoiding
 * the problems with sizes and paddings that can arise depending on
 * the architecture. Now the offsets and sizes of the elements of the
 * unique_id_rec structure are calculated in unique_id_global_init;
 * and then used to duplicate the structure without the paddings that
 * might exist. The multithreaded server fix should be now very easy:
 * just add a new "tid" field to the unique_id_rec structure, and
 * increase by one UNIQUE_ID_REC_MAX.
 * 2) unique_id_rec.stamp has been changed from "time_t" to
 * "unsigned int", because its size is 64bits on some platforms
 * (linux/alpha), and this caused problems with htonl/ntohl. Well,
 * this shouldn't be a problem till year 2106.
 */

static struct sockaddr_storage global_addr;


/* Even when not MULTITHREAD, this will return a single structure, since
 * APACHE_TLS should be defined as empty on single-threaded platforms.
 */
static unique_id_rec* get_cur_unique_id(int parent)
{
    static APACHE_TLS unique_id_rec spcid;
    return &spcid;
}


/*
 * Number of elements in the structure unique_id_rec.
 */
#define UNIQUE_ID_REC_MAX 4

static unsigned short unique_id_rec_offset[UNIQUE_ID_REC_MAX],
                      unique_id_rec_size[UNIQUE_ID_REC_MAX],
                      unique_id_rec_total_size,
                      unique_id_rec_size_uu;

static void unique_id_global_init(server_rec *s, pool *p)
{
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 256
#endif
    char str[MAXHOSTNAMELEN + 1];
    struct addrinfo hints, *res, *res0;
    int error;
    struct timeval tv;
    unique_id_rec *cur_unique_id = get_cur_unique_id(1);

    /*
     * Calculate the sizes and offsets in cur_unique_id.
     */
    unique_id_rec_offset[0] = XtOffsetOf(unique_id_rec, stamp);
    unique_id_rec_size[0] = sizeof(cur_unique_id->stamp);
    unique_id_rec_offset[1] = XtOffsetOf(unique_id_rec, addr);
    unique_id_rec_size[1] = sizeof(cur_unique_id->addr);
    unique_id_rec_offset[2] = XtOffsetOf(unique_id_rec, pid);
    unique_id_rec_size[2] = sizeof(cur_unique_id->pid);
    unique_id_rec_offset[3] = XtOffsetOf(unique_id_rec, counter);
    unique_id_rec_size[3] = sizeof(cur_unique_id->counter);
    unique_id_rec_total_size = unique_id_rec_size[0] + unique_id_rec_size[1]
                             + unique_id_rec_size[2] + unique_id_rec_size[3];

    /*
     * Calculate the size of the structure when encoded.
     */
    unique_id_rec_size_uu = (unique_id_rec_total_size*8+5)/6;

    /*
     * Now get the global in_addr.  Note that it is not sufficient to use one
     * of the addresses from the main_server, since those aren't as likely to
     * be unique as the physical address of the machine
     */
    if (gethostname(str, sizeof(str) - 1) != 0) {
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ALERT, s,
		     "gethostname: mod_unique_id requires the "
		     "hostname of the server");
        exit(1);
    }
    str[sizeof(str) - 1] = '\0';

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = PF_UNSPEC;
    error = getaddrinfo(str, NULL, &hints, &res0);
    if (error) {
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ALERT, s,
                     "mod_unique_id: getaddrinfo failed for \"%s\" (%s)", str,
		     gai_strerror(error));
        exit(1);
    }

    error = 1;
    for (res = res0; res; res = res->ai_next) {
	switch (res->ai_family) {
	case AF_INET:
	case AF_INET6:
	    memcpy(&global_addr, res->ai_addr, res->ai_addrlen);
	    error = 0;
	    break;
	}
    }
    freeaddrinfo(res0);
    if (error) {
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ALERT, s,
                    "mod_unique_id: no known AF found for \"%s\"", str);
        exit(1);
    }

    getnameinfo((struct sockaddr *)&global_addr,
	global_addr.ss_len,
	str, sizeof(str), NULL, 0, NI_NUMERICHOST);
    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_INFO, s,
                 "mod_unique_id: using ip addr %s", str);

    /*
     * If the server is pummelled with restart requests we could possibly end
     * up in a situation where we're starting again during the same second
     * that has been used in previous identifiers.  Avoid that situation.
     * 
     * In truth, for this to actually happen not only would it have to restart
     * in the same second, but it would have to somehow get the same pids as
     * one of the other servers that was running in that second. Which would
     * mean a 64k wraparound on pids ... not very likely at all.
     * 
     * But protecting against it is relatively cheap.  We just sleep into the
     * next second.
     */
    if (gettimeofday(&tv, NULL) == -1) {
        sleep(1);
    }
    else if (tv.tv_usec) {
        tv.tv_sec = 0;
        tv.tv_usec = 1000000 - tv.tv_usec;
        select(0, NULL, NULL, NULL, &tv);
    }
}

static void unique_id_child_init(server_rec *s, pool *p)
{
    pid_t pid;
    struct timeval tv;
    unique_id_rec *cur_unique_id = get_cur_unique_id(1);

    /*
     * Note that we use the pid because it's possible that on the same
     * physical machine there are multiple servers (i.e. using Listen). But
     * it's guaranteed that none of them will share the same pids between
     * children.
     */
    pid = getpid();
    cur_unique_id->pid = pid;

    /*
     * Test our assumption that the pid is 32-bits.  It's possible that
     * 64-bit machines will declare pid_t to be 64 bits but only use 32
     * of them.  It would have been really nice to test this during
     * global_init ... but oh well.
     */
    if ((pid_t)cur_unique_id->pid != pid) {
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_CRIT, s,
		     "oh no! pids are greater than 32-bits!  I'm broken!");
    }

    memset(&cur_unique_id->addr, 0, sizeof(cur_unique_id->addr));
    switch (global_addr.ss_family) {
    case AF_INET:
      cur_unique_id->addr.in =
          ((struct sockaddr_in *)&global_addr)->sin_addr.s_addr;
      break;
    case AF_INET6:
#ifdef SHORT_UNIQUE_ID
      cur_unique_id->addr.in6 =
          ((struct sockaddr_in6 *)&global_addr)->sin6_addr.s6_addr32[3];
#else
      cur_unique_id->addr.in6 =
          ((struct sockaddr_in6 *)&global_addr)->sin6_addr;
#endif
      break;
    }

    /*
     * If we use 0 as the initial counter we have a little less protection
     * against restart problems, and a little less protection against a clock
     * going backwards in time.
     */
    if (gettimeofday(&tv, NULL) == -1) {
        cur_unique_id->counter = 0;
    }
    else {
	/* Some systems have very low variance on the low end of their
	 * system counter, defend against that.
	 */
        cur_unique_id->counter = tv.tv_usec / 10;
    }

    /*
     * We must always use network ordering for these bytes, so that
     * identifiers are comparable between machines of different byte
     * orderings.  Note in_addr is already in network order.
     */
    cur_unique_id->pid = htonl(cur_unique_id->pid);
    cur_unique_id->counter = htons(cur_unique_id->counter);
}

/* NOTE: This is *NOT* the same encoding used by base64encode ... the last two
 * characters should be + and /.  But those two characters have very special
 * meanings in URLs, and we want to make it easy to use identifiers in
 * URLs.  So we replace them with @@ and -.
 */
static const char uuencoder[64] = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '@@', '-',
};

static int gen_unique_id(request_rec *r)
{
    char *str;
    /*
     * Buffer padded with two final bytes, used to copy the unique_id_red
     * structure without the internal paddings that it could have.
     */
    struct {
	unique_id_rec foo;
	unsigned char pad[2];
    } paddedbuf;
    unsigned char *x,*y;
    unsigned short counter;
    const char *e;
    int i,j,k;
    unique_id_rec *cur_unique_id = get_cur_unique_id(0);

    /* copy the unique_id if this is an internal redirect (we're never
     * actually called for sub requests, so we don't need to test for
     * them) */
    if (r->prev
	&& (e = ap_table_get(r->subprocess_env, "REDIRECT_UNIQUE_ID"))) {
	ap_table_setn(r->subprocess_env, "UNIQUE_ID", e);
	return DECLINED;
    }

    cur_unique_id->stamp = htonl((unsigned int)r->request_time);

    /* we'll use a temporal buffer to avoid uuencoding the possible internal
     * paddings of the original structure
     */
    x = (unsigned char *) &paddedbuf;
    y = (unsigned char *) cur_unique_id;
    k = 0;
    for (i = 0; i < UNIQUE_ID_REC_MAX; i++) {
        y = ((unsigned char *) cur_unique_id) + unique_id_rec_offset[i];
        for (j = 0; j < unique_id_rec_size[i]; j++, k++) {
            x[k] = y[j];
        }
    }
    /*
     * We reset two more bytes just in case padding is needed for
     * the uuencoding.
     */
    x[k++] = '\0';
    x[k++] = '\0';
    
    /* alloc str and do the uuencoding */
    str = (char *)ap_palloc(r->pool, unique_id_rec_size_uu + 1);
    k = 0;
    for (i = 0; i < unique_id_rec_total_size; i += 3) {
        y = x + i;
        str[k++] = uuencoder[y[0] >> 2];
        str[k++] = uuencoder[((y[0] & 0x03) << 4) | ((y[1] & 0xf0) >> 4)];
        if (k == unique_id_rec_size_uu) {
	    break;
	}
        str[k++] = uuencoder[((y[1] & 0x0f) << 2) | ((y[2] & 0xc0) >> 6)];
        if (k == unique_id_rec_size_uu) {
	    break;
	}
        str[k++] = uuencoder[y[2] & 0x3f];
    }
    str[k++] = '\0';

    /* set the environment variable */
    ap_table_setn(r->subprocess_env, "UNIQUE_ID", str);

    /* and increment the identifier for the next call */
    counter = ntohs(cur_unique_id->counter) + 1;
    cur_unique_id->counter = htons(counter);

    return DECLINED;
}

module MODULE_VAR_EXPORT unique_id_module = {
    STANDARD_MODULE_STUFF,
    unique_id_global_init,      /* initializer */
    NULL,                       /* dir config creater */
    NULL,                       /* dir merger --- default is to override */
    NULL,                       /* server config */
    NULL,                       /* merge server configs */
    NULL,                       /* command table */
    NULL,                       /* handlers */
    NULL,                       /* filename translation */
    NULL,                       /* check_user_id */
    NULL,                       /* check auth */
    NULL,                       /* check access */
    NULL,                       /* type_checker */
    NULL,                       /* fixups */
    NULL,                       /* logger */
    NULL,                       /* header parser */
    unique_id_child_init,       /* child_init */
    NULL,                       /* child_exit */
    gen_unique_id               /* post_read_request */
};
@


1.12
log
@fix rcs ids.  ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.11
log
@de-register, remove #ifdefs and #ifndefs using SIN6_LEN, add OpenBSD cvs
markers.

no binary changes
@
text
@d1 1
a1 1
/*	$OpenBSD */
@


1.10
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@d1 2
a244 3
#ifndef SIN6_LEN
	SA_LEN((struct sockaddr *)&global_addr),
#else
a245 1
#endif
@


1.9
log
@cleanup and unifdef'ing, no change in object files
work by Daniel Ouellet <daniel@@presscom.net>
@
text
@d73 8
a80 1
    unsigned int in_addr;
d149 1
a149 1
static unsigned global_in_addr;
d178 2
a179 1
    struct hostent *hent;
d188 2
a189 2
    unique_id_rec_offset[1] = XtOffsetOf(unique_id_rec, in_addr);
    unique_id_rec_size[1] = sizeof(cur_unique_id->in_addr);
d215 4
a218 1
    if ((hent = gethostbyname(str)) == NULL) {
d220 2
a221 1
		     "mod_unique_id: unable to gethostbyname(\"%s\")", str);
d225 16
a240 1
    global_in_addr = ((struct in_addr *) hent->h_addr_list[0])->s_addr;
d242 7
d250 1
a250 2
		 "mod_unique_id: using ip addr %s",
		 inet_ntoa(*(struct in_addr *) hent->h_addr_list[0]));
d301 16
a316 1
    cur_unique_id->in_addr = global_in_addr;
@


1.8
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a74 3
#ifdef MULTITHREAD
    unsigned int tid;
#endif
a157 3
#ifdef MULTITHREAD
#define UNIQUE_ID_REC_MAX 5
#else
a158 1
#endif
a171 1
#ifndef NO_GETTIMEOFDAY
a172 1
#endif
a183 9
#ifdef MULTITHREAD
    unique_id_rec_offset[3] = XtOffsetOf(unique_id_rec, tid);
    unique_id_rec_size[3] = sizeof(cur_unique_id->tid);
    unique_id_rec_offset[4] = XtOffsetOf(unique_id_rec, counter);
    unique_id_rec_size[4] = sizeof(cur_unique_id->counter);
    unique_id_rec_total_size = unique_id_rec_size[0] + unique_id_rec_size[1]
                             + unique_id_rec_size[2] + unique_id_rec_size[3]
                             + unique_id_rec_size[4];
#else
a187 1
#endif
a231 3
#ifdef NO_GETTIMEOFDAY
    sleep(1);
#else
a239 1
#endif
a244 1
#ifndef NO_GETTIMEOFDAY
a245 1
#endif
a274 1
#ifndef NO_GETTIMEOFDAY
a283 3
#else
    cur_unique_id->counter = 0;
#endif
a333 11

#ifdef MULTITHREAD
    /*
     * Note that we use the pid because it's possible that on the same
     * physical machine there are multiple servers (i.e. using Listen). But
     * it's guaranteed that none of them will share the same pid+tids between
     * children.
     */
    cur_unique_id->tid = gettid();
    cur_unique_id->tid = htonl(cur_unique_id->tid);
#endif
@


1.7
log
@merge
@
text
@a146 44
#ifdef WIN32

static DWORD tls_index;

BOOL WINAPI DllMain (HINSTANCE dllhandle, DWORD reason, LPVOID reserved)
{
    LPVOID memptr;

    switch (reason) {
    case DLL_PROCESS_ATTACH:
	tls_index = TlsAlloc();
    case DLL_THREAD_ATTACH: /* intentional no break */
	TlsSetValue(tls_index, calloc(sizeof(unique_id_rec), 1));
	break;
    case DLL_THREAD_DETACH:
	memptr = TlsGetValue(tls_index);
	if (memptr) {
	    free (memptr);
	    TlsSetValue (tls_index, 0);
	}
	break;
    }

    return TRUE;
}

static unique_id_rec* get_cur_unique_id(int parent)
{
    /* Apache initializes the child process, not the individual child threads.
     * Copy the original parent record if this->pid is not yet initialized.
     */
    static unique_id_rec *parent_id;
    unique_id_rec *cur_unique_id = (unique_id_rec *) TlsGetValue(tls_index);

    if (parent) {
        parent_id = cur_unique_id;
    }
    else if (!cur_unique_id->pid) {
        memcpy(cur_unique_id, parent_id, sizeof(*parent_id));
    }
    return cur_unique_id;
}

#else /* !WIN32 */
a155 2

#endif /* !WIN32 */
@


1.6
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
a70 4
#ifdef MULTITHREAD
#error sorry this module does not support multithreaded servers yet
#endif

d75 3
d94 1
a94 2
 * loop to be extended.  * A similar fix is needed to support multithreaded
 * servers, using a pid/tid combo.
d147 56
a202 1
static APACHE_TLS unique_id_rec cur_unique_id;
d207 3
d211 1
d228 1
d234 1
a234 1
    unique_id_rec_size[0] = sizeof(cur_unique_id.stamp);
d236 1
a236 1
    unique_id_rec_size[1] = sizeof(cur_unique_id.in_addr);
d238 10
a247 1
    unique_id_rec_size[2] = sizeof(cur_unique_id.pid);
d249 4
a252 3
    unique_id_rec_size[3] = sizeof(cur_unique_id.counter);
    unique_id_rec_total_size = unique_id_rec_size[0] + unique_id_rec_size[1] +
                               unique_id_rec_size[2] + unique_id_rec_size[3];
d317 1
a323 3
     * 
     * XXX: for multithread this needs to use a pid/tid combo and probably
     * needs to be expanded to 32 bits
d326 1
a326 1
    cur_unique_id.pid = pid;
d334 1
a334 1
    if (cur_unique_id.pid != pid) {
d339 1
a339 1
    cur_unique_id.in_addr = global_in_addr;
d348 1
a348 1
        cur_unique_id.counter = 0;
d354 1
a354 1
        cur_unique_id.counter = tv.tv_usec / 10;
d357 1
a357 1
    cur_unique_id.counter = 0;
d365 2
a366 2
    cur_unique_id.pid = htonl(cur_unique_id.pid);
    cur_unique_id.counter = htons(cur_unique_id.counter);
d397 1
d408 12
a419 1
    cur_unique_id.stamp = htonl((unsigned int)r->request_time);
d425 1
a425 1
    y = (unsigned char *) &cur_unique_id;
d428 1
a428 1
        y = ((unsigned char *) &cur_unique_id) + unique_id_rec_offset[i];
d462 2
a463 2
    counter = ntohs(cur_unique_id.counter) + 1;
    cur_unique_id.counter = htons(counter);
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d132 12
a143 10
 * 1) The UUencoding prodecure is now done in a general way, avoiding the problems
 * with sizes and paddings that can arise depending on the architecture. Now the
 * offsets and sizes of the elements of the unique_id_rec structure are calculated
 * in unique_id_global_init; and then used to duplicate the structure without the
 * paddings that might exist. The multithreaded server fix should be now very easy:
 * just add a new "tid" field to the unique_id_rec structure, and increase by one
 * UNIQUE_ID_REC_MAX.
 * 2) unique_id_rec.stamp has been changed from "time_t" to "unsigned int", because
 * its size is 64bits on some platforms (linux/alpha), and this caused problems with
 * htonl/ntohl. Well, this shouldn't be a problem till year 2106.
d197 2
a198 1
          "gethostname: mod_unique_id requires the hostname of the server");
d205 1
a205 1
                    "mod_unique_id: unable to gethostbyname(\"%s\")", str);
d212 2
a213 2
                "mod_unique_id: using ip addr %s",
                inet_ntoa(*(struct in_addr *) hent->h_addr_list[0]));
d269 1
a269 1
                    "oh no! pids are greater than 32-bits!  I'm broken!");
d334 2
a335 1
    if (r->prev && (e = ap_table_get(r->subprocess_env, "REDIRECT_UNIQUE_ID"))) {
d343 2
a344 1
     * paddings of the original structure */
d355 2
a356 1
     * We reset two more bytes just in case padding is needed for the uuencoding.
d368 3
a370 1
        if (k == unique_id_rec_size_uu) break;
d372 3
a374 1
        if (k == unique_id_rec_size_uu) break;
a387 1

@


1.2
log
@Apache 1.3.4 merge
@
text
@d107 1
a107 1
 * The 112-bits of unique_id_rec are uuencoded using the alphabet
d184 1
a184 1
     * Calculate the size of the structure when uuencoded.
d299 1
a299 1
/* NOTE: This is *NOT* the same encoding used by uuencode ... the last two
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
d70 4
a77 3
#ifdef MULTITHREAD
    unsigned int tid;
#endif
d94 2
a95 1
 * loop to be extended.
d107 1
a107 1
 * The 112-bits of unique_id_rec are encoded using the alphabet
d132 10
a141 12
 * 1) The UUencoding prodecure is now done in a general way, avoiding
 * the problems with sizes and paddings that can arise depending on
 * the architecture. Now the offsets and sizes of the elements of the
 * unique_id_rec structure are calculated in unique_id_global_init;
 * and then used to duplicate the structure without the paddings that
 * might exist. The multithreaded server fix should be now very easy:
 * just add a new "tid" field to the unique_id_rec structure, and
 * increase by one UNIQUE_ID_REC_MAX.
 * 2) unique_id_rec.stamp has been changed from "time_t" to
 * "unsigned int", because its size is 64bits on some platforms
 * (linux/alpha), and this caused problems with htonl/ntohl. Well,
 * this shouldn't be a problem till year 2106.
d146 1
a146 56
#ifdef WIN32

static DWORD tls_index;

BOOL WINAPI DllMain (HINSTANCE dllhandle, DWORD reason, LPVOID reserved)
{
    LPVOID memptr;

    switch (reason) {
    case DLL_PROCESS_ATTACH:
	tls_index = TlsAlloc();
    case DLL_THREAD_ATTACH: /* intentional no break */
	TlsSetValue(tls_index, calloc(sizeof(unique_id_rec), 1));
	break;
    case DLL_THREAD_DETACH:
	memptr = TlsGetValue(tls_index);
	if (memptr) {
	    free (memptr);
	    TlsSetValue (tls_index, 0);
	}
	break;
    }

    return TRUE;
}

static unique_id_rec* get_cur_unique_id(int parent)
{
    /* Apache initializes the child process, not the individual child threads.
     * Copy the original parent record if this->pid is not yet initialized.
     */
    static unique_id_rec *parent_id;
    unique_id_rec *cur_unique_id = (unique_id_rec *) TlsGetValue(tls_index);

    if (parent) {
        parent_id = cur_unique_id;
    }
    else if (!cur_unique_id->pid) {
        memcpy(cur_unique_id, parent_id, sizeof(*parent_id));
    }
    return cur_unique_id;
}

#else /* !WIN32 */

/* Even when not MULTITHREAD, this will return a single structure, since
 * APACHE_TLS should be defined as empty on single-threaded platforms.
 */
static unique_id_rec* get_cur_unique_id(int parent)
{
    static APACHE_TLS unique_id_rec spcid;
    return &spcid;
}

#endif /* !WIN32 */

a150 3
#ifdef MULTITHREAD
#define UNIQUE_ID_REC_MAX 5
#else
a151 1
#endif
a167 1
    unique_id_rec *cur_unique_id = get_cur_unique_id(1);
d173 1
a173 1
    unique_id_rec_size[0] = sizeof(cur_unique_id->stamp);
d175 1
a175 1
    unique_id_rec_size[1] = sizeof(cur_unique_id->in_addr);
d177 1
a177 10
    unique_id_rec_size[2] = sizeof(cur_unique_id->pid);
#ifdef MULTITHREAD
    unique_id_rec_offset[3] = XtOffsetOf(unique_id_rec, tid);
    unique_id_rec_size[3] = sizeof(cur_unique_id->tid);
    unique_id_rec_offset[4] = XtOffsetOf(unique_id_rec, counter);
    unique_id_rec_size[4] = sizeof(cur_unique_id->counter);
    unique_id_rec_total_size = unique_id_rec_size[0] + unique_id_rec_size[1]
                             + unique_id_rec_size[2] + unique_id_rec_size[3]
                             + unique_id_rec_size[4];
#else
d179 3
a181 4
    unique_id_rec_size[3] = sizeof(cur_unique_id->counter);
    unique_id_rec_total_size = unique_id_rec_size[0] + unique_id_rec_size[1]
                             + unique_id_rec_size[2] + unique_id_rec_size[3];
#endif
d184 1
a184 1
     * Calculate the size of the structure when encoded.
d195 1
a195 2
		     "gethostname: mod_unique_id requires the "
		     "hostname of the server");
d202 1
a202 1
		     "mod_unique_id: unable to gethostbyname(\"%s\")", str);
d209 2
a210 2
		 "mod_unique_id: using ip addr %s",
		 inet_ntoa(*(struct in_addr *) hent->h_addr_list[0]));
a244 1
    unique_id_rec *cur_unique_id = get_cur_unique_id(1);
d251 3
d256 1
a256 1
    cur_unique_id->pid = pid;
d264 1
a264 1
    if ((pid_t)cur_unique_id->pid != pid) {
d266 1
a266 1
		     "oh no! pids are greater than 32-bits!  I'm broken!");
d269 1
a269 1
    cur_unique_id->in_addr = global_in_addr;
d278 1
a278 1
        cur_unique_id->counter = 0;
d284 1
a284 1
        cur_unique_id->counter = tv.tv_usec / 10;
d287 1
a287 1
    cur_unique_id->counter = 0;
d295 2
a296 2
    cur_unique_id->pid = htonl(cur_unique_id->pid);
    cur_unique_id->counter = htons(cur_unique_id->counter);
d299 1
a299 1
/* NOTE: This is *NOT* the same encoding used by base64encode ... the last two
a326 1
    unique_id_rec *cur_unique_id = get_cur_unique_id(0);
d331 1
a331 2
    if (r->prev
	&& (e = ap_table_get(r->subprocess_env, "REDIRECT_UNIQUE_ID"))) {
d336 1
a336 12
    cur_unique_id->stamp = htonl((unsigned int)r->request_time);

#ifdef MULTITHREAD
    /*
     * Note that we use the pid because it's possible that on the same
     * physical machine there are multiple servers (i.e. using Listen). But
     * it's guaranteed that none of them will share the same pid+tids between
     * children.
     */
    cur_unique_id->tid = gettid();
    cur_unique_id->tid = htonl(cur_unique_id->tid);
#endif
d339 1
a339 2
     * paddings of the original structure
     */
d341 1
a341 1
    y = (unsigned char *) cur_unique_id;
d344 1
a344 1
        y = ((unsigned char *) cur_unique_id) + unique_id_rec_offset[i];
d350 1
a350 2
     * We reset two more bytes just in case padding is needed for
     * the uuencoding.
d362 1
a362 3
        if (k == unique_id_rec_size_uu) {
	    break;
	}
d364 1
a364 3
        if (k == unique_id_rec_size_uu) {
	    break;
	}
d373 2
a374 2
    counter = ntohs(cur_unique_id->counter) + 1;
    cur_unique_id->counter = htons(counter);
d378 1
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


