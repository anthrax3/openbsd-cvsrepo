head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.40
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.36
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.34
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.32
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.30
	OPENBSD_5_0:1.13.0.28
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.26
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.24
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.20
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.22
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.18
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.16
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.14
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.12
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.10.0.4
	OPENBSD_3_4_BASE:1.10
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	apache:1.1.1
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.13;

1.13
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.02.19.42.47;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.17.18.57.06;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.15.12.02.23;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.11.20.13.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.09.17.28.47;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.13.18.12.00;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.29.10.21.46;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.19.11.17.22;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.56;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.30.19.46.10;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.03.01.04.28.58;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.07.19.48.14;	author henning;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.17.17.03.24;	author henning;	state Exp;
branches;
next	;


desc
@@


1.14
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*                      _             _
**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
**                      |_____|
**  ssl_engine_mutex.c
**  Semaphore for Mutual Exclusion
*/

/* ====================================================================
 * Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * 4. The names "mod_ssl" must not be used to endorse or promote
 *    products derived from this software without prior written
 *    permission. For written permission, please contact
 *    rse@@engelschall.com.
 *
 * 5. Products derived from this software may not be called "mod_ssl"
 *    nor may "mod_ssl" appear in their names without prior
 *    written permission of Ralf S. Engelschall.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY RALF S. ENGELSCHALL ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL RALF S. ENGELSCHALL OR
 * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */
                             /* ``Real programmers confuse
                                  Christmas and Halloween
                                  because DEC 25 = OCT 31.''
                                             -- Unknown     */
#include "mod_ssl.h"


/*  _________________________________________________________________
**
**  Mutex Support (Common)
**  _________________________________________________________________
*/

void ssl_mutex_init(server_rec *s, pool *p)
{
    SSLModConfigRec *mc = myModConfig();

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ssl_mutex_file_create(s, p);
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ssl_mutex_sem_create(s, p);
    return;
}

void ssl_mutex_reinit(server_rec *s, pool *p)
{
    SSLModConfigRec *mc = myModConfig();

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ssl_mutex_file_open(s, p);
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ssl_mutex_sem_open(s, p);
    return;
}

void ssl_mutex_on(server_rec *s)
{
    SSLModConfigRec *mc = myModConfig();
    BOOL ok = TRUE;

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ok = ssl_mutex_file_acquire();
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ok = ssl_mutex_sem_acquire();
    if (!ok)
        ssl_log(s, SSL_LOG_WARN, "Failed to acquire global mutex lock");
    return;
}

void ssl_mutex_off(server_rec *s)
{
    SSLModConfigRec *mc = myModConfig();
    BOOL ok = TRUE;

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ok = ssl_mutex_file_release();
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ok = ssl_mutex_sem_release();
    if (!ok)
        ssl_log(s, SSL_LOG_WARN, "Failed to release global mutex lock");
    return;
}

void ssl_mutex_kill(server_rec *s)
{
    SSLModConfigRec *mc = myModConfig();

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ssl_mutex_file_remove(s);
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ssl_mutex_sem_remove(s);
    return;
}


/*  _________________________________________________________________
**
**  Mutex Support (Lockfile)
**  _________________________________________________________________
*/

void ssl_mutex_file_create(server_rec *s, pool *p)
{
    SSLModConfigRec *mc = myModConfig();
    char mutexfile[MAXPATHLEN];

    /* create the lockfile */
    strlcpy(mutexfile, mc->szMutexFile, sizeof(mutexfile));
    ap_server_strip_chroot(mutexfile, 0);
    unlink(mutexfile);
    if ((mc->nMutexFD = ap_popenf(p, mutexfile,
                                  O_WRONLY|O_CREAT, SSL_MUTEX_LOCK_MODE)) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not create SSLMutex lockfile %s",
                mutexfile);
        ssl_die();
    }
    ap_pclosef(p, mc->nMutexFD);

    /* make sure the childs have access to this file */
    if (geteuid() == 0 /* is superuser */)
        chown(mutexfile, ap_user_id, -1 /* no gid change */);

    /* open the lockfile for real */
    if ((mc->nMutexFD = ap_popenf(p, mutexfile,
                                  O_WRONLY, SSL_MUTEX_LOCK_MODE)) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent could not open SSLMutex lockfile %s",
                mutexfile);
        ssl_die();
    }
    return;
}

void ssl_mutex_file_open(server_rec *s, pool *p)
{
    SSLModConfigRec *mc = myModConfig();
    char mutexfile[MAXPATHLEN];

    strlcpy(mutexfile, mc->szMutexFile, sizeof(mutexfile));
    ap_server_strip_chroot(mutexfile, 0);

    /* open the lockfile (once per child) to get a unique fd */
    if ((mc->nMutexFD = ap_popenf(p, mutexfile,
                                  O_WRONLY, SSL_MUTEX_LOCK_MODE)) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Child could not open SSLMutex lockfile %s",
                mutexfile);
        ssl_die();
    }
    return;
}

void ssl_mutex_file_remove(void *data)
{
    SSLModConfigRec *mc = myModConfig();
    char mutexfile[MAXPATHLEN];
    strlcpy(mutexfile, mc->szMutexFile, sizeof(mutexfile));
    ap_server_strip_chroot(mutexfile, 0);

    /* remove the mutex lockfile */
    unlink(mutexfile);
    return;
}

#ifdef SSL_USE_FCNTL
static struct flock   lock_it;
static struct flock unlock_it;
#endif

BOOL ssl_mutex_file_acquire(void)
{
    int rc = -1;
    SSLModConfigRec *mc = myModConfig();

#ifdef SSL_USE_FCNTL
    lock_it.l_whence = SEEK_SET; /* from current point */
    lock_it.l_start  = 0;        /* -"- */
    lock_it.l_len    = 0;        /* until end of file */
    lock_it.l_type   = F_WRLCK;  /* set exclusive/write lock */
    lock_it.l_pid    = 0;        /* pid not actually interesting */

    while (   ((rc = fcntl(mc->nMutexFD, F_SETLKW, &lock_it)) < 0)
           && (errno == EINTR)                                    ) 
        ;
#endif
#ifdef SSL_USE_FLOCK
    while (   ((rc = flock(mc->nMutexFD, LOCK_EX)) < 0)
           && (errno == EINTR)                         )
        ;
#endif

    if (rc < 0)
        return FALSE;
    else
        return TRUE;
}

BOOL ssl_mutex_file_release(void)
{
    int rc = -1;
    SSLModConfigRec *mc = myModConfig();

#ifdef SSL_USE_FCNTL
    unlock_it.l_whence = SEEK_SET; /* from current point */
    unlock_it.l_start  = 0;        /* -"- */
    unlock_it.l_len    = 0;        /* until end of file */
    unlock_it.l_type   = F_UNLCK;  /* unlock */
    unlock_it.l_pid    = 0;        /* pid not actually interesting */

    while (   (rc = fcntl(mc->nMutexFD, F_SETLKW, &unlock_it)) < 0
           && (errno == EINTR)                                    )
        ;
#endif
#ifdef SSL_USE_FLOCK
    while (   (rc = flock(mc->nMutexFD, LOCK_UN)) < 0
           && (errno == EINTR)                       ) 
        ;
#endif

    if (rc < 0)
        return FALSE;
    else
        return TRUE;
}

/*  _________________________________________________________________
**
**  Mutex Support (Process Semaphore)
**  _________________________________________________________________
*/

void ssl_mutex_sem_create(server_rec *s, pool *p)
{
    int semid;
    SSLModConfigRec *mc = myModConfig();
    union ssl_ipc_semun semctlarg;
    struct semid_ds semctlbuf;

    semid = semget(IPC_PRIVATE, 1, IPC_CREAT|IPC_EXCL|S_IRUSR|S_IWUSR);
    if (semid == -1 && errno == EEXIST)
        semid = semget(IPC_PRIVATE, 1, IPC_EXCL|S_IRUSR|S_IWUSR);
    if (semid == -1) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not create private SSLMutex semaphore");
        ssl_die();
    }
    semctlarg.val = 0;
    if (semctl(semid, 0, SETVAL, semctlarg) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not initialize SSLMutex semaphore value");
        ssl_die();
    }
    semctlbuf.sem_perm.uid  = ap_user_id;
    semctlbuf.sem_perm.gid  = ap_group_id;
    semctlbuf.sem_perm.mode = 0600;
    semctlarg.buf = &semctlbuf;
    if (semctl(semid, 0, IPC_SET, semctlarg) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not set permissions for SSLMutex semaphore");
        ssl_die();
    }
    mc->nMutexSEMID = semid;
    return;
}

void ssl_mutex_sem_open(server_rec *s, pool *p)
{
    return;
}

void ssl_mutex_sem_remove(void *data)
{
    SSLModConfigRec *mc = myModConfig();

    semctl(mc->nMutexSEMID, 0, IPC_RMID, 0);
    return;
}

BOOL ssl_mutex_sem_acquire(void)
{
    int rc = 0;
    SSLModConfigRec *mc = myModConfig();

    struct sembuf sb[] = {
        { 0, 0, 0 },       /* wait for semaphore */
        { 0, 1, SEM_UNDO } /* increment semaphore */
    };

    while (   (rc = semop(mc->nMutexSEMID, sb, 2)) < 0
           && (errno == EINTR)                        ) 
        ;
    if (rc != 0)
        return FALSE;
    else
        return TRUE;
}

BOOL ssl_mutex_sem_release(void)
{
    int rc = 0;
    SSLModConfigRec *mc = myModConfig();

    struct sembuf sb[] = {
        { 0, -1, SEM_UNDO } /* decrements semaphore */
    };

    while (   (rc = semop(mc->nMutexSEMID, sb, 1)) < 0 
           && (errno == EINTR)                        ) 
        ;
    if (rc != 0)
        return FALSE;
    else
        return TRUE;
}

@


1.13
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@@


1.12
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a274 1
#ifdef SSL_CAN_USE_SEM
a276 1
#ifdef SSL_HAVE_IPCSEM
a278 1
#endif
a279 1
#ifdef SSL_HAVE_IPCSEM
a302 4
#endif
#ifdef SSL_HAVE_W32SEM
    semid = (int)ap_create_mutex("mod_ssl_mutex");
#endif
a303 1
#endif
a308 7
#ifdef SSL_CAN_USE_SEM
#ifdef SSL_HAVE_W32SEM
    SSLModConfigRec *mc = myModConfig();

    mc->nMutexSEMID = (int)ap_open_mutex("mod_ssl_mutex");
#endif
#endif
a313 1
#ifdef SSL_CAN_USE_SEM
a315 1
#ifdef SSL_HAVE_IPCSEM
a316 5
#endif
#ifdef SSL_HAVE_W32SEM
    ap_destroy_mutex((mutex *)mc->nMutexSEMID);
#endif
#endif
a322 1
#ifdef SSL_CAN_USE_SEM
a324 1
#ifdef SSL_HAVE_IPCSEM
a332 5
#endif
#ifdef SSL_HAVE_W32SEM
    rc = ap_acquire_mutex((mutex *)mc->nMutexSEMID);
#endif
#endif
a341 1
#ifdef SSL_CAN_USE_SEM
a343 1
#ifdef SSL_HAVE_IPCSEM
a350 5
#endif
#ifdef SSL_HAVE_W32SEM
    rc = ap_release_mutex((mutex *)mc->nMutexSEMID);
#endif
#endif
@


1.11
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@a143 1
#ifndef WIN32
a160 1
#ifndef OS2
a162 1
#endif
a171 1
#endif
a176 1
#ifndef WIN32
a190 1
#endif
a195 1
#ifndef WIN32
a202 1
#endif
a205 1
#ifndef WIN32
a209 1
#endif
a213 1
#ifndef WIN32
a231 1
#endif
a241 1
#ifndef WIN32
a258 1
#endif
@


1.10
log
@missing ap_server_strip_chroot()
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
@


1.9
log
@do not let the group access the sem
@
text
@d146 1
d149 4
a152 2
    unlink(mc->szMutexFile);
    if ((mc->nMutexFD = ap_popenf(p, mc->szMutexFile,
d156 1
a156 1
                mc->szMutexFile);
d164 1
a164 1
        chown(mc->szMutexFile, ap_user_id, -1 /* no gid change */);
d168 1
a168 1
    if ((mc->nMutexFD = ap_popenf(p, mc->szMutexFile,
d172 1
a172 1
                mc->szMutexFile);
@


1.8
log
@apache chroot and privilege drop.
httpd will chroot itself into ServerRoot (/var/www) and drop root privileges
now. This is enabled by default. Make sure to read httpd(8).

help deraadt@@
ssl mutex fixes beck@@

"commit" deraadt@@
@
text
@d311 1
a311 1
    semctlbuf.sem_perm.mode = 0660;
@


1.7
log
@merge mod_ssl 2.8.2
--
Ok'd by: beck@@
@
text
@d180 4
d186 1
a186 1
    if ((mc->nMutexFD = ap_popenf(p, mc->szMutexFile,
d190 1
a190 1
                mc->szMutexFile);
d201 3
d206 1
a206 1
    unlink(mc->szMutexFile);
@


1.6
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d225 2
a226 3
              && (errno == EINTR)                               ) {
        continue;
    }
d230 2
a231 3
              && (errno == EINTR)               ) {
        continue;
    }
d254 3
a256 1
    rc = fcntl(mc->nMutexFD, F_SETLKW, &unlock_it);
d259 3
a261 1
    rc = flock(mc->nMutexFD, LOCK_UN);
d359 3
a361 1
    rc = (semop(mc->nMutexSEMID, sb, 2) == 0);
d364 1
a364 1
    rc = (ap_acquire_mutex((mutex *)mc->nMutexSEMID) == 0);
d367 4
a370 1
    return rc;
d384 3
a386 1
    rc = (semop(mc->nMutexSEMID, sb, 1) == 0);
d392 4
a395 1
    return rc;
@


1.5
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2000 Ralf S. Engelschall. All rights reserved.
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d159 1
d162 1
@


1.3
log
@Sync with mod_ssl v2.4.4. ok beck@@.
@
text
@d12 1
a12 1
 * Copyright (c) 1998-1999 Ralf S. Engelschall. All rights reserved.
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d278 4
d286 1
a286 1
        semid = semget(IPC_PRIVATE, 1, IPC_CREAT|IPC_EXCL|S_IRUSR|S_IWUSR);
d292 15
d355 1
a355 1
    rc = semop(mc->nMutexSEMID, sb, 2);
d375 1
a375 1
    rc = semop(mc->nMutexSEMID, sb, 1);
@


1.1
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d2 4
a5 4
**  _ __ ___   ___   __| |    ___ ___| |
** | '_ ` _ \ / _ \ / _` |   / __/ __| |
** | | | | | | (_) | (_| |   \__ \__ \ | mod_ssl - Apache Interface to SSLeay
** |_| |_| |_|\___/ \__,_|___|___/___/_| http://www.engelschall.com/sw/mod_ssl/
d30 1
a30 1
 *     mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d45 1
a45 1
 *     mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d78 1
a78 1
    if (mc->nMutexMode == SSL_MUTEXMODE_FILE) {
d80 1
a80 3
        ap_register_cleanup(p, (void *)s, ssl_mutex_file_remove, ap_null_cleanup);
    }
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM) {
a81 2
        ap_register_cleanup(p, (void *)s, ssl_mutex_sem_remove, ap_null_cleanup);
    }
d85 1
a85 1
void ssl_mutex_open(server_rec *s, pool *p)
d96 1
a96 1
void ssl_mutex_on(void)
d99 1
d102 1
a102 1
        ssl_mutex_file_acquire();
d104 3
a106 1
        ssl_mutex_sem_acquire();
d110 1
a110 1
void ssl_mutex_off(void)
d113 1
d116 1
a116 1
        ssl_mutex_file_release();
d118 14
a131 1
        ssl_mutex_sem_release();
d156 2
d161 9
d181 1
a181 1
                                           O_WRONLY, SSL_MUTEX_LOCK_MODE)) < 0) {
d339 1
a339 1
    rc = ap_acquire_mutex((mutex *)mc->nMutexSEMID);
d353 1
a353 1
        { 0, -1, SEM_UNDO } /* derements semaphore */
@


1.1.1.1
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d2 4
a5 4
**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
d12 1
a12 1
 * Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
d30 1
a30 1
 *     mod_ssl project (http://www.modssl.org/)."
d45 1
a45 1
 *     mod_ssl project (http://www.modssl.org/)."
d78 1
a78 1
    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
d80 3
a82 1
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
d84 2
d89 1
a89 1
void ssl_mutex_reinit(server_rec *s, pool *p)
d100 1
a100 15
void ssl_mutex_on(server_rec *s)
{
    SSLModConfigRec *mc = myModConfig();
    BOOL ok = TRUE;

    if (mc->nMutexMode == SSL_MUTEXMODE_FILE)
        ok = ssl_mutex_file_acquire();
    else if (mc->nMutexMode == SSL_MUTEXMODE_SEM)
        ok = ssl_mutex_sem_acquire();
    if (!ok)
        ssl_log(s, SSL_LOG_WARN, "Failed to acquire global mutex lock");
    return;
}

void ssl_mutex_off(server_rec *s)
a102 1
    BOOL ok = TRUE;
d105 1
a105 1
        ok = ssl_mutex_file_release();
d107 1
a107 3
        ok = ssl_mutex_sem_release();
    if (!ok)
        ssl_log(s, SSL_LOG_WARN, "Failed to release global mutex lock");
d111 1
a111 1
void ssl_mutex_kill(server_rec *s)
d116 1
a116 1
        ssl_mutex_file_remove(s);
d118 1
a118 1
        ssl_mutex_sem_remove(s);
a142 2
    ap_pclosef(p, mc->nMutexFD);

a143 1
#ifndef OS2
a146 10

    /* open the lockfile for real */
    if ((mc->nMutexFD = ap_popenf(p, mc->szMutexFile,
                                  O_WRONLY, SSL_MUTEX_LOCK_MODE)) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent could not open SSLMutex lockfile %s",
                mc->szMutexFile);
        ssl_die();
    }
#endif
d157 1
a157 1
                                  O_WRONLY, SSL_MUTEX_LOCK_MODE)) < 0) {
d199 3
a201 2
           && (errno == EINTR)                                    ) 
        ;
d205 3
a207 2
           && (errno == EINTR)                         )
        ;
d230 1
a230 3
    while (   (rc = fcntl(mc->nMutexFD, F_SETLKW, &unlock_it)) < 0
           && (errno == EINTR)                                    )
        ;
d233 1
a233 3
    while (   (rc = flock(mc->nMutexFD, LOCK_UN)) < 0
           && (errno == EINTR)                       ) 
        ;
a253 4
#ifdef SSL_HAVE_IPCSEM
    union ssl_ipc_semun semctlarg;
    struct semid_ds semctlbuf;
#endif
d258 1
a258 1
        semid = semget(IPC_PRIVATE, 1, IPC_EXCL|S_IRUSR|S_IWUSR);
a263 15
    semctlarg.val = 0;
    if (semctl(semid, 0, SETVAL, semctlarg) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not initialize SSLMutex semaphore value");
        ssl_die();
    }
    semctlbuf.sem_perm.uid  = ap_user_id;
    semctlbuf.sem_perm.gid  = ap_group_id;
    semctlbuf.sem_perm.mode = 0660;
    semctlarg.buf = &semctlbuf;
    if (semctl(semid, 0, IPC_SET, semctlarg) < 0) {
        ssl_log(s, SSL_LOG_ERROR|SSL_ADD_ERRNO,
                "Parent process could not set permissions for SSLMutex semaphore");
        ssl_die();
    }
d312 1
a312 3
    while (   (rc = semop(mc->nMutexSEMID, sb, 2)) < 0
           && (errno == EINTR)                        ) 
        ;
d318 1
a318 4
    if (rc != 0)
        return FALSE;
    else
        return TRUE;
d329 1
a329 1
        { 0, -1, SEM_UNDO } /* decrements semaphore */
d332 1
a332 3
    while (   (rc = semop(mc->nMutexSEMID, sb, 1)) < 0 
           && (errno == EINTR)                        ) 
        ;
d338 1
a338 4
    if (rc != 0)
        return FALSE;
    else
        return TRUE;
@


1.1.1.2
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
@


