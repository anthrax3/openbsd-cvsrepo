head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.56
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.52
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.50
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.48
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.46
	OPENBSD_5_0:1.8.0.44
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.42
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.40
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.36
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.38
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.34
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.32
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.30
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.28
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.26
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.24
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.22
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.20
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.18
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.16
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.14
	OPENBSD_3_5_BASE:1.8
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.1
	OPENBSD_3_4:1.8.0.12
	OPENBSD_3_4_BASE:1.8
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.8.0.10
	OPENBSD_3_3_BASE:1.8
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	apache:1.1.1
	OPENBSD_3_2:1.8.0.8
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.6
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2001.03.29.10.21.45;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.22.18.17;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.30.05.35.10;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.19.11.17.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.53;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.12.08.00.05.17;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.03.01.04.28.46;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.07.19.48.14;	author henning;	state Exp;
branches;
next	;


desc
@@


1.9
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@                      _             _ 
  _ __ ___   ___   __| |    ___ ___| |
 | '_ ` _ \ / _ \ / _` |   / __/ __| | 
 | | | | | | (_) | (_| |   \__ \__ \ | ``mod_ssl combines the flexibility of
 |_| |_| |_|\___/ \__,_|___|___/___/_|   Apache with the security of OpenSSL.''
                      |_____|                                           
 mod_ssl                               ``Ralf Engelschall has released an
 Apache Interface to OpenSSL             excellent module that integrates
 http://www.modssl.org/                  Apache and SSLeay.''                 
 Version 2.8                                               -- Tim J. Hudson

 SYNOPSIS

 This Apache module provides strong cryptography for the Apache 1.3 webserver
 via the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS
 v1) protocols by the help of the SSL/TLS implementation library OpenSSL which
 is based on SSLeay from Eric A. Young and Tim J. Hudson. The mod_ssl package
 was created in April 1998 by Ralf S. Engelschall and was originally derived
 from software developed by Ben Laurie for use in the Apache-SSL HTTP server
 project. 

 SOURCES

 Here is a short overview of the source files:

   Makefile.libdir ......... dummy for Apache config mechanism
   Makefile.tmpl ........... Makefile template for Unix  platform
   Makefile.win32 .......... Makefile template for Win32 platform
   libssl.module ........... stub called from the Apache config mechanism
   libssl.version .......... file containing the mod_ssl version information
   mod_ssl.c ............... main source file containing API structures
   mod_ssl.h ............... common header file of mod_ssl
   ssl_engine_compat.c ..... backward compatibility support
   ssl_engine_config.c ..... module configuration handling
   ssl_engine_dh.c ......... DSA/DH support
   ssl_engine_ds.c ......... data structures
   ssl_engine_ext.c ........ Extensions to other Apache parts
   ssl_engine_init.c ....... module initialization
   ssl_engine_io.c ......... I/O support
   ssl_engine_kernel.c ..... SSL engine kernel
   ssl_engine_log.c ........ logfile support
   ssl_engine_mutex.c ...... mutual exclusion support
   ssl_engine_pphrase.c .... pass-phrase handling
   ssl_engine_rand.c ....... PRNG support
   ssl_engine_vars.c ....... Variable Expansion support
   ssl_expr.c .............. expression handling main source
   ssl_expr.h .............. expression handling common header
   ssl_expr_scan.c ......... expression scanner automaton (pre-generated)
   ssl_expr_scan.l ......... expression scanner source
   ssl_expr_parse.c ........ expression parser automaton  (pre-generated)
   ssl_expr_parse.h ........ expression parser header     (pre-generated)
   ssl_expr_parse.y ........ expression parser source
   ssl_expr_eval.c ......... expression machine evaluation
   ssl_scache.c ............ session cache abstraction layer
   ssl_scache_dbm.c ........ session cache via DBM file
   ssl_scache_shmcb.c ...... session cache via shared memory cyclic buffer
   ssl_scache_shmht.c ...... session cache via shared memory hash table
   ssl_util.c .............. utility functions
   ssl_util_ssl.c .......... the OpenSSL companion source
   ssl_util_ssl.h .......... the OpenSSL companion header
   ssl_util_sdbm.c ......... the SDBM library source
   ssl_util_sdbm.h ......... the SDBM library header
   ssl_util_table.c ........ the hash table library source
   ssl_util_table.h ........ the hash table library header

 The source files are written in clean ANSI C and pass the ``gcc -O -g
 -ggdb3 -Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes
 -Wmissing-declarations -Wnested-externs -Winline'' compiler test
 (assuming `gcc' is GCC 2.95.2 or newer) without any complains. When
 you make changes or additions make sure the source still passes this
 compiler test.

 FUNCTIONS
  
 Inside the source code you will be confronted with the following types of
 functions which can be identified by their prefixes:

   ap_xxxx() ............... Apache API function
   ssl_xxxx() .............. mod_ssl function
   SSL_xxxx() .............. OpenSSL function (SSL library)
   OpenSSL_xxxx() .......... OpenSSL function (SSL library)
   X509_xxxx() ............. OpenSSL function (Crypto library)
   PEM_xxxx() .............. OpenSSL function (Crypto library)
   EVP_xxxx() .............. OpenSSL function (Crypto library)
   RSA_xxxx() .............. OpenSSL function (Crypto library)

 DATA STRUCTURES

 Inside the source code you will be confronted with the following
 data structures:

   ap_ctx .................. Apache EAPI Context
   server_rec .............. Apache (Virtual) Server
   conn_rec ................ Apache Connection
   BUFF .................... Apache Connection Buffer
   request_rec ............. Apache Request
   SSLModConfig ............ mod_ssl (Global)  Module Configuration
   SSLSrvConfig ............ mod_ssl (Virtual) Server Configuration
   SSLDirConfig ............ mod_ssl Directory Configuration
   SSL_CTX ................. OpenSSL Context
   SSL_METHOD .............. OpenSSL Protocol Method
   SSL_CIPHER .............. OpenSSL Cipher
   SSL_SESSION ............. OpenSSL Session
   SSL ..................... OpenSSL Connection
   BIO ..................... OpenSSL Connection Buffer

 For an overview how these are related and chained together have a look at the
 page in README.dsov.{fig,ps}. It contains overview diagrams for those data
 structures. It's designed for DIN A4 paper size, but you can easily generate
 a smaller version inside XFig by specifing a magnification on the Export
 panel.

 EXPERIMENTAL CODE

 Experimental code is always encapsulated as following:

   | #ifdef SSL_EXPERIMENTAL_xxxx
   | ...
   | #endif

 This way it is only compiled in when this define is enabled with
 the APACI --enable-rule=SSL_EXPERIMENTAL option and as long as the
 C pre-processor variable SSL_EXPERIMENTAL_xxxx_IGNORE is _NOT_
 defined (via CFLAGS). Or in other words: SSL_EXPERIMENTAL enables all
 SSL_EXPERIMENTAL_xxxx variables, except if SSL_EXPERIMENTAL_xxxx_IGNORE
 is already defined. Currently the following features are experimental:

   o SSL_EXPERIMENTAL_PERDIRCA
     The ability to use SSLCACertificateFile and SSLCACertificatePath
     in a per-directory context (.htaccess). This is provided by some nasty
     reconfiguration hacks until OpenSSL has better support for this. It
     should work on non-multithreaded platforms (all but Win32).

   o SSL_EXPERIMENTAL_PROXY
     The ability to use various additional SSLProxyXXX directives in
     oder to control extended client functionality in the HTTPS proxy
     code.

   o SSL_EXPERIMENTAL_ENGINE
     The ability to support the new forthcoming OpenSSL ENGINE stuff.
     Until this development branch of OpenSSL is merged into the main
     stream, you have to use openssl-engine-0.9.x.tar.gz for this.
     mod_ssl automatically recognizes this OpenSSL variant and then can
     activate external crypto devices through SSLCryptoDevice directive.

 VENDOR EXTENSIONS

 Inside the mod_ssl sources you can enable various EAPI vendor hooks
 (`ap::mod_ssl::vendor::xxxx') by using the APACI --enable-rule=SSL_VENDOR
 option.  These hooks can be used to change or extend mod_ssl by a vendor
 without patching the source code. Grep for `ap::mod_ssl::vendor::'.
 Additionally vendors can add their own source code to files named
 ssl_vendor.c, ssl_vendor_XXX.c, etc.  The libssl.module script automatically
 picks these up under configuration time and mod_ssl under run-time calls the
 functions `void ssl_vendor_register(void)' and `void
 ssl_vendor_unregister(void)' inside these objects to bootstrap them.

 An ssl_vendor.c should at least contain the following contents:

   |  #include "mod_ssl.h"
   |  void ssl_vendor_register(void) { return; }
   |  void ssl_vendor_unregister(void) { return; }

@


1.8
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.7
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d10 2
a11 2
 Version 2.7                                               -- Tim J. Hudson
                                           
@


1.6
log
@mod_ssl 2.6.4 merge
From brad@@
@
text
@d10 1
a10 1
 Version 2.6                                               -- Tim J. Hudson
a44 1
   ssl_engine_scache.c ..... session cache support
d54 4
d138 7
@


1.5
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d112 1
a112 1
 Experimental code is always encapsulated as
d114 1
a114 1
   | #ifdef SSL_EXPERIMENTAL
d118 6
a123 3
 blocks and only compiled in when this define is enabled with the APACI
 --enable-rule=SSL_EXPERIMENTAL option. Currently the following features are
 experimental:
d125 2
a126 1
   o The ability to use SSLCACertificateFile and SSLCACertificatePath
d130 5
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d10 1
a10 1
 Version 2.5                                               -- Tim J. Hudson
@


1.3
log
@ Mod_SSL 2.4.8 merge
@
text
@d10 1
a10 1
 Version 2.4                                               -- Tim J. Hudson
d63 6
a68 5
 The source files are written in clean ANSI C and pass the ``gcc -O -g -ggdb3
 -Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes
 -Wmissing-declarations -Wnested-externs -Winline'' compiler test without any
 complains. When you make changes or additions make sure the source still
 passes this compiler test.
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d10 1
a10 1
 Version 2.3                                               -- Tim J. Hudson
d35 1
d37 1
d39 1
a40 1
   ssl_engine_io.c ......... I/O support
d44 1
d46 1
a46 1
   ssl_engine_ext.c ........ Extensions to other Apache parts
d56 2
d60 2
@


1.1
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d5 1
a5 1
 |_| |_| |_|\___/ \__,_|___|___/___/_|   Apache with the security of SSLeay.''
d7 4
a10 4
                                       ``Ralf Engelschall has released an
 mod_ssl - Apache Interface to SSLeay    excellent module that integrates
 http://www.engelschall.com/sw/mod_ssl/  Apache and SSLeay.''                 
 Version 2.1.0-1.3.3                         Tim J. Hudson, SSLeay co-author
d12 2
d16 7
a22 4
 v1) protocols by the help of the SSL/TLS implementation library SSLeay from
 Eric A. Young and Tim J. Hudson. The mod_ssl package was created in April
 1998 by Ralf S. Engelschall and was originally derived from software
 developed by Ben Laurie for use in the Apache-SSL HTTP server project. 
d61 2
d69 8
a76 6
   SSL_xxxx() .............. SSLeay function (SSL library)
   SSLeay_xxxx() ........... SSLeay function (SSL library)
   X509_xxxx() ............. SSLeay function (Crypto library)
   PEM_xxxx() .............. SSLeay function (Crypto library)
   EVP_xxxx() .............. SSLeay function (Crypto library)
   RSA_xxxx() .............. SSLeay function (Crypto library)
d89 6
a94 6
   SSL_CTX ................. SSLeay Context
   SSL_METHOD .............. SSLeay Protocol Method
   SSL_CIPHER .............. SSLeay Cipher
   SSL_SESSION ............. SSLeay Session
   SSL ..................... SSLeay Connection
   BIO ..................... SSLeay Connection Buffer
d101 35
@


1.1.1.1
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d5 1
a5 1
 |_| |_| |_|\___/ \__,_|___|___/___/_|   Apache with the security of OpenSSL.''
d7 5
a11 7
 mod_ssl                               ``Ralf Engelschall has released an
 Apache Interface to OpenSSL             excellent module that integrates
 http://www.modssl.org/                  Apache and SSLeay.''                 
 Version 2.8                                               -- Tim J. Hudson

 SYNOPSIS

d14 4
a17 7
 v1) protocols by the help of the SSL/TLS implementation library OpenSSL which
 is based on SSLeay from Eric A. Young and Tim J. Hudson. The mod_ssl package
 was created in April 1998 by Ralf S. Engelschall and was originally derived
 from software developed by Ben Laurie for use in the Apache-SSL HTTP server
 project. 

 SOURCES
a29 1
   ssl_engine_dh.c ......... DSA/DH support
a30 1
   ssl_engine_ext.c ........ Extensions to other Apache parts
d32 1
a33 1
   ssl_engine_kernel.c ..... SSL engine kernel
d37 2
a38 2
   ssl_engine_rand.c ....... PRNG support
   ssl_engine_vars.c ....... Variable Expansion support
a46 4
   ssl_scache.c ............ session cache abstraction layer
   ssl_scache_dbm.c ........ session cache via DBM file
   ssl_scache_shmcb.c ...... session cache via shared memory cyclic buffer
   ssl_scache_shmht.c ...... session cache via shared memory hash table
a47 2
   ssl_util_ssl.c .......... the OpenSSL companion source
   ssl_util_ssl.h .......... the OpenSSL companion header
a49 9
   ssl_util_table.c ........ the hash table library source
   ssl_util_table.h ........ the hash table library header

 The source files are written in clean ANSI C and pass the ``gcc -O -g
 -ggdb3 -Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes
 -Wmissing-declarations -Wnested-externs -Winline'' compiler test
 (assuming `gcc' is GCC 2.95.2 or newer) without any complains. When
 you make changes or additions make sure the source still passes this
 compiler test.
d51 5
a55 1
 FUNCTIONS
d62 6
a67 8
   SSL_xxxx() .............. OpenSSL function (SSL library)
   OpenSSL_xxxx() .......... OpenSSL function (SSL library)
   X509_xxxx() ............. OpenSSL function (Crypto library)
   PEM_xxxx() .............. OpenSSL function (Crypto library)
   EVP_xxxx() .............. OpenSSL function (Crypto library)
   RSA_xxxx() .............. OpenSSL function (Crypto library)

 DATA STRUCTURES
d80 6
a85 6
   SSL_CTX ................. OpenSSL Context
   SSL_METHOD .............. OpenSSL Protocol Method
   SSL_CIPHER .............. OpenSSL Cipher
   SSL_SESSION ............. OpenSSL Session
   SSL ..................... OpenSSL Connection
   BIO ..................... OpenSSL Connection Buffer
a91 51

 EXPERIMENTAL CODE

 Experimental code is always encapsulated as following:

   | #ifdef SSL_EXPERIMENTAL_xxxx
   | ...
   | #endif

 This way it is only compiled in when this define is enabled with
 the APACI --enable-rule=SSL_EXPERIMENTAL option and as long as the
 C pre-processor variable SSL_EXPERIMENTAL_xxxx_IGNORE is _NOT_
 defined (via CFLAGS). Or in other words: SSL_EXPERIMENTAL enables all
 SSL_EXPERIMENTAL_xxxx variables, except if SSL_EXPERIMENTAL_xxxx_IGNORE
 is already defined. Currently the following features are experimental:

   o SSL_EXPERIMENTAL_PERDIRCA
     The ability to use SSLCACertificateFile and SSLCACertificatePath
     in a per-directory context (.htaccess). This is provided by some nasty
     reconfiguration hacks until OpenSSL has better support for this. It
     should work on non-multithreaded platforms (all but Win32).

   o SSL_EXPERIMENTAL_PROXY
     The ability to use various additional SSLProxyXXX directives in
     oder to control extended client functionality in the HTTPS proxy
     code.

   o SSL_EXPERIMENTAL_ENGINE
     The ability to support the new forthcoming OpenSSL ENGINE stuff.
     Until this development branch of OpenSSL is merged into the main
     stream, you have to use openssl-engine-0.9.x.tar.gz for this.
     mod_ssl automatically recognizes this OpenSSL variant and then can
     activate external crypto devices through SSLCryptoDevice directive.

 VENDOR EXTENSIONS

 Inside the mod_ssl sources you can enable various EAPI vendor hooks
 (`ap::mod_ssl::vendor::xxxx') by using the APACI --enable-rule=SSL_VENDOR
 option.  These hooks can be used to change or extend mod_ssl by a vendor
 without patching the source code. Grep for `ap::mod_ssl::vendor::'.
 Additionally vendors can add their own source code to files named
 ssl_vendor.c, ssl_vendor_XXX.c, etc.  The libssl.module script automatically
 picks these up under configuration time and mod_ssl under run-time calls the
 functions `void ssl_vendor_register(void)' and `void
 ssl_vendor_unregister(void)' inside these objects to bootstrap them.

 An ssl_vendor.c should at least contain the following contents:

   |  #include "mod_ssl.h"
   |  void ssl_vendor_register(void) { return; }
   |  void ssl_vendor_unregister(void) { return; }
@


