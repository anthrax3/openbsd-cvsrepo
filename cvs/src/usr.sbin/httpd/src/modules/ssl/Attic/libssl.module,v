head	1.17;
access;
symbols
	OPENBSD_5_5:1.16.0.44
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.40
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.38
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.36
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.34
	OPENBSD_5_0:1.16.0.32
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.30
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.28
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.24
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.26
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.22
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.20
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.18
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.16
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.14
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.12
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.10
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.8
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.6
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.15.0.4
	OPENBSD_3_4_BASE:1.15
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	apache:1.1.1
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.16;

1.16
date	2003.11.17.18.57.05;	author henning;	state Exp;
branches;
next	1.15;

1.15
date	2002.10.07.20.23.06;	author henning;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.19.23.46.56;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.28.21.22.42;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.20.18.06.15;	author brad;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.04.13.18.12.00;	author brad;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.03.29.10.21.46;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.15.22.18.17;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.30.05.35.10;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.24.23.32.14;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.19.11.17.20;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.28.18.39.59;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.53;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.10.01.23.50.43;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.03.01.04.28.48;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.07.19.48.14;	author henning;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.17.17.03.23;	author henning;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.13.20.21.01;	author miod;	state Exp;
branches;
next	;

1.12.2.1
date	2002.03.13.21.06.15;	author jason;	state Exp;
branches;
next	;


desc
@@


1.17
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@##                      _             _ 
##  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
## | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
## | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
## |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
##                      |_____|         
##  libssl.module
##  Apache 1.3 Configuration mechanism module stub
##

##
##  ====================================================================
##  Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
## 
##  Redistribution and use in source and binary forms, with or without
##  modification, are permitted provided that the following conditions
##  are met:
## 
##  1. Redistributions of source code must retain the above copyright
##     notice, this list of conditions and the following disclaimer. 
## 
##  2. Redistributions in binary form must reproduce the above copyright
##     notice, this list of conditions and the following
##     disclaimer in the documentation and/or other materials
##     provided with the distribution.
## 
##  3. All advertising materials mentioning features or use of this
##     software must display the following acknowledgment:
##     "This product includes software developed by 
##      Ralf S. Engelschall <rse@@engelschall.com> for use in the
##      mod_ssl project (http://www.modssl.org/)."
## 
##  4. The names "mod_ssl" must not be used to endorse or promote
##     products derived from this software without prior written
##     permission. For written permission, please contact
##     rse@@engelschall.com.
## 
##  5. Products derived from this software may not be called "mod_ssl"
##     nor may "mod_ssl" appear in their names without prior
##     written permission of Ralf S. Engelschall.
## 
##  6. Redistributions of any form whatsoever must retain the following
##     acknowledgment:
##     "This product includes software developed by 
##      Ralf S. Engelschall <rse@@engelschall.com> for use in the
##      mod_ssl project (http://www.modssl.org/)."
## 
##  THIS SOFTWARE IS PROVIDED BY RALF S. ENGELSCHALL ``AS IS'' AND ANY
##  EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
##  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
##  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL RALF S. ENGELSCHALL OR
##  HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
##  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
##  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
##  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
##  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
##  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
##  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
##  OF THE POSSIBILITY OF SUCH DAMAGE.
##  ====================================================================
##

                     # ``What you are missing, I suppose, is that I'm not
                     #   prepared to give equal rights to Ralf on the basis
                     #   that he's spent a few hours doing what he thinks is
                     #   better than what I've spent the last 4 years on,
                     #   and so he isn't prepared to cooperate with me.''
                     #             -- Ben Laurie, Apache-SSL author

Name: ssl_module
ConfigStart

    #
    #   interface to the src/Configure script   
    #
    my_dir="`echo ${modfile} | sed -e 's:/[^/]*$::'`"
    my_version="$my_dir/libssl.version"
    my_outfile="Makefile.config"
    my_prefix="      +"
    my_prefixe="       "
    SSL_CFLAGS=''
    SSL_LDFLAGS=''
    SSL_LIBS=''

    #   
    #   find a reasonable Bourne Shell for sub-shell calls
    #
    SH=/bin/sh

    #
    #   determine mod_ssl author version
    #
    A_ID=`cat $my_version | sed -e 's; .*;;'`
    A_NAME=`echo $A_ID | sed -e 's;/.*;;'`
    A_VER=`echo $A_ID | sed -e 's;.*/;;'`
    A_VER_STR=`echo $A_VER | sed -e 's;-.*;;'`
    case $A_VER_STR in
        *.*b* )
            A_VER_HEX=`echo "$A_VER_STR" | sed -e 's/b.*//' | awk -F. '{ printf("%d%02d", $1, $2); }' &&
                       echo "$A_VER_STR" | sed -e 's/.*b//' | awk '{ printf("0%02d", $1); }'`
            ;;
        *.*.* )
            A_VER_HEX=`echo "$A_VER_STR" | awk -F. '{ printf("%d%02d1%02d", $1, $2, $3); }'`
            ;;
    esac
    echo "$my_prefix SSL interface: $A_NAME/$A_VER_STR"
    SSL_VERSION="-DMOD_SSL_VERSION=\\\"$A_VER_STR\\\""
  
    #
    #   determine optional mod_ssl product version
    #
    if [ ".`egrep '.*/.* .*/.*' $my_version`" != . ]; then
        P_ID=`cat $my_version | sed -e 's;.* ;;'`
        P_NAME=`echo $P_ID | sed -e 's;/.*;;'`
        P_VER=`echo $P_ID | sed -e 's;.*/;;'`
        P_VER_STR=`echo $P_VER | sed -e 's;-.*;;'`
        case $P_VER_STR in
            *.*b* )
                P_VER_HEX=`echo "$P_VER_STR" | sed -e 's/b.*//' | awk -F. '{ printf("%d%02d", $1, $2); }' &&
                           echo "$P_VER_STR" | sed -e 's/.*b//' | awk '{ printf("0%02d", $1); }'`
                ;;
            *.*.* )
                P_VER_HEX=`echo "$P_VER_STR" | awk -F. '{ printf("%d%02d1%02d", $1, $2, $3); }'`
                ;;
        esac
        echo "$my_prefix SSL product: $P_NAME/$P_VER_STR"
        SSL_VERSION="$SSL_VERSION -DSSL_PRODUCT_NAME=\\\"$P_NAME\\\""
        SSL_VERSION="$SSL_VERSION -DSSL_PRODUCT_VERSION=\\\"$P_VER_STR\\\""
    fi

    #
    #   determine object build type
    #
    case $modfile in
        *.so ) my_buildtype="DSO" ;;
        *    ) my_buildtype="OBJ" ;;
    esac
    echo "$my_prefix SSL interface build type: $my_buildtype"

    #   
    #   determine SSL rules
    #
    if [ ".$APXS_MODE" = .YES ]; then
        my_rule_SSL_COMPAT=$SSL_COMPAT
        my_rule_SSL_SDBM=$SSL_SDBM
        my_rule_SSL_EXPERIMENTAL=$SSL_EXPERIMENTAL
        my_rule_SSL_CONSERVATIVE=$SSL_CONSERVATIVE
        my_rule_SSL_VENDOR=$SSL_VENDOR
    else
        my_rule_SSL_COMPAT=`$SH helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`$SH helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`$SH helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`$SH helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`$SH helpers/CutRule SSL_VENDOR $file`
    fi

    #
    #   determine compatibility mode
    #
    if [ ".$my_rule_SSL_COMPAT" = .yes ]; then
        echo "$my_prefix SSL interface compatibility: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_COMPAT"
    else
        echo "$my_prefix SSL interface compatibility: disabled"
    fi

    #
    #   determine experimental mode
    #
    if [ ".$my_rule_SSL_EXPERIMENTAL" = .yes ]; then
        echo "$my_prefix SSL interface experimental code: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_EXPERIMENTAL"
    else
        echo "$my_prefix SSL interface experimental code: disabled"
    fi

    #
    #   determine conservative mode
    #
    if [ ".$my_rule_SSL_CONSERVATIVE" = .yes ]; then
        echo "$my_prefix SSL interface conservative code: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_CONSERVATIVE"
    else
        echo "$my_prefix SSL interface conservative code: disabled"
    fi

    # 
    #   determine vendor mode
    #
    SSL_VENDOR_OBJS=''
    SSL_VENDOR_OBJS_PIC=''
    if [ ".$my_rule_SSL_VENDOR" = .yes ]; then
        echo "$my_prefix SSL interface vendor extensions: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_VENDOR"
        my_src="`cd $my_dir && echo ssl_vendor*.c`"
        if [ ".$my_src" != . -a ".$my_src" != ".ssl_vendor*.c" ]; then
            SSL_CFLAGS="$SSL_CFLAGS -DSSL_VENDOR_OBJS"
            SSL_VENDOR_OBJS="`echo $my_src | sed -e 's;\.c;.o;g'`"
            SSL_VENDOR_OBJS_PIC="`echo $my_src | sed -e 's;\.c;.lo;g'`"
            echo "$my_prefix SSL interface vendor objects: $SSL_VENDOR_OBJS"
        fi
    else
        echo "$my_prefix SSL interface vendor extensions: disabled"
    fi

    #
    #   determine DBM support library
    #   (src/Configure has DBM_LIB predefined for some platforms)
    #
    if [ ".$APXS_MODE" != .YES ]; then
        SSL_DBM_NAME=''
        #   1. check for predefined DBM lib
        if [ ".$DBM_LIB" != . ]; then
            LIBS_ORIG="$LIBS"
            LIBS="$LIBS $DBM_LIB"
            if $SH helpers/TestCompile func dbm_open; then
                SSL_DBM_NAME="Configured DBM ($DBM_LIB)"
                SSL_DBM_FLAG="$DBM_LIB"
            fi
            LIBS="$LIBS_ORIG"
        fi
        #   2. check for various vendor DBM libs
        if [ ".$SSL_DBM_NAME" = . ]; then
            if $SH helpers/TestCompile func dbm_open; then
                SSL_DBM_NAME='Vendor DBM (libc)'
                SSL_DBM_FLAG=''
            elif $SH helpers/TestCompile lib dbm dbm_open; then
                SSL_DBM_NAME='Vendor DBM (libdbm)'
                SSL_DBM_FLAG='-ldbm'
            elif $SH helpers/TestCompile lib ndbm dbm_open; then
                SSL_DBM_NAME='Vendor DBM (libndbm)'
                SSL_DBM_FLAG='-lndbm'
            fi
        fi
        #   3. let the SSL_SDBM rule override decisions
        if [ ".$my_rule_SSL_SDBM" = .yes ]; then
            # force us to fallback to SDBM
            SSL_DBM_NAME='' 
        fi
        if [ ".$my_rule_SSL_SDBM" = .no ]; then
            #   for us to never use SDBM,  but be
            #   careful when no DBM was found at all
            if [ ".$SSL_DBM_NAME" = . ]; then
                echo "Error: SDBM is needed, because no custom or vendor DBM library available!" 1>&2  
                echo "Hint:  Allow us to choose SDBM by changing the rule SSL_SDBM, please." 1>&2  
                exit 1
            fi
        fi
        #   4. override decision on a few brain-dead platforms
        if [ ".$my_rule_SSL_SDBM" = .default ]; then
            case "$PLAT" in
                *-linux* )
                    #   force Linux boxes to use builtin SDBM per default because 
                    #   of too much broken vendor DBM libraries on this platform
                    SSL_DBM_NAME=''
                    ;;
            esac
        fi
        #   5. finally configure the chosen DBM lib
        if [ ".$SSL_DBM_NAME" != . ]; then
            echo "$my_prefix SSL interface plugin: $SSL_DBM_NAME"
            my_dbm_already_used=`echo $LIBS | grep -- " $SSL_DBM_FLAG"`
            if [ ".$my_buildtype" = .OBJ -a ".$my_dbm_already_used" != . ]; then
                :
            else
                SSL_LIBS="$SSL_LIBS $SSL_DBM_FLAG"
            fi
        else
            echo "$my_prefix SSL interface plugin: Built-in SDBM"
            SSL_CFLAGS="$SSL_CFLAGS -DSSL_USE_SDBM"
        fi
    fi

    #
    #   determine SSL_BASE
    #
    if [ ".$SSL_BASE" = . ]; then
        SSL_BASE=`egrep '^SSL_BASE=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
        if [ ".$SSL_BASE" = . ]; then
            if [ -d /usr/local/ssl ]; then
                SSL_BASE="/usr/local/ssl"
            else
                SSL_BASE="SYSTEM"
            fi
        fi
    fi
    case $SSL_BASE in
        SYSTEM ) ;;
        /* ) ;;
         * ) SSL_BASE="`cd ../$SSL_BASE; pwd`" ;;
    esac
    if [ ".$SSL_BASE" = .SYSTEM ]; then
        echo "$my_prefix SSL library path: [SYSTEM]"
    else
        if [ ! -d "$SSL_BASE" ]; then
            echo "Error: Cannot find SSL installation in $SSL_BASE" 1>&2  
            echo "Hint:  Please provide us with the location of OpenSSL" 1>&2
            echo "       via the environment variable SSL_BASE." 1>&2
            exit 1
        fi
        echo "$my_prefix SSL library path: $SSL_BASE"
    fi

    #
    #   determine location of OpenSSL binaries
    #   (we still search also for `ssleay' to allow us to
    #   better complain about the actually installed version)
    #
    SSL_BINDIR=""
    if [ ".$SSL_BASE" = .SYSTEM ]; then
        for name in openssl ssleay; do
            for p in . `echo $PATH | sed -e 's/:/ /g'`; do
                if [ -f "$p/$name" ]; then
                    SSL_PROGRAM="$p/$name"
                    SSL_BINDIR="$p"
                    break
                fi
            done
            if [ ".$SSL_BINDIR" != . ]; then
                break;
            fi
        done
        if [ ".$SSL_BINDIR" = . ]; then
            echo "Error: Cannot find SSL binaries in $PATH" 1>&2
            exit 1
        fi
    else
        for name in openssl ssleay; do
            if [ -f "$SSL_BASE/bin/$name" ]; then
                SSL_PROGRAM="$SSL_BASE/bin/$name"
                SSL_BINDIR='$(SSL_BASE)/bin'
                break;
            fi
            if [ -f "$SSL_BASE/sbin/$name" ]; then
                SSL_PROGRAM="$SSL_BASE/sbin/$name"
                SSL_BINDIR='$(SSL_BASE)/sbin'
                break;
            fi
            if [ -f "$SSL_BASE/apps/$name" ]; then
                SSL_PROGRAM="$SSL_BASE/apps/$name"
                SSL_BINDIR='$(SSL_BASE)/apps'
                break;
            fi
        done
        if [ ".$SSL_BINDIR" = . ]; then
            echo "Error: Cannot find SSL binaries under $SSL_BASE" 1>&2
            exit 1
        fi
    fi

    #
    #   SSL version
    #
    SSL_VERSION_ID="`$SSL_PROGRAM version`"
    echo "$my_prefix SSL library version: $SSL_VERSION_ID"
    case $SSL_VERSION_ID in
        *0.[5678].*|*0.9.[012]* )
            echo "Error: OpenSSL VERSIONS BELOW 0.9.3 ARE NO LONGER SUPPORTED."
            echo "Hint:  Use OpenSSL version 0.9.3 or higher!"
            exit 1
            ;;
    esac

    #
    #   SSL engine support
    #
    case $SSL_VERSION_ID in
        *0.9.6*engine* | *0.9.6a*engine* | *0.9.[789]* )
            SSL_CFLAGS="$SSL_CFLAGS -DSSL_ENGINE"
            ;;
    esac

    #
    #   determine location of OpenSSL headers
    #
    if [ ".$SSL_BASE" = .SYSTEM ]; then
        SSL_INCDIR=""
        for p in . /usr/include /usr/include/ssl/ /usr/local/include /usr/local/include/ssl; do
            if [ -f "$p/openssl/ssl.h" ]; then
                SSL_INCDIR="$p"
                break
            fi
        done
        if [ ".$SSL_INCDIR" = . ]; then
            echo "Error: Cannot find SSL header files in any of the following dirs:" 1>&2
            echo "Error: . /usr/include /usr/include/ssl/ /usr/local/include /usr/local/include/ssl" 1>&2
            exit 1
        fi
    else
        if [ -f "$SSL_BASE/include/openssl/ssl.h" ]; then
            SSL_INCDIR='$(SSL_BASE)/include'
        else
            echo "Error: Cannot find SSL header files under $SSL_BASE" 1>&2
            exit 1
        fi
    fi
    if [ ".$SSL_INCDIR" != "./usr/include" ]; then
        SSL_CFLAGS="$SSL_CFLAGS -I\$(SSL_INCDIR)"
    fi

    #
    #  determine location of OpenSSL libraries
    #
    if [ ".$SSL_BASE" = .SYSTEM ]; then
        SSL_LIBDIR=""
        for p in . /lib /usr/lib /usr/local/lib; do
            if [ -f "$p/libssl.a" -o -f "$p/libssl.so" ]; then
                SSL_LIBDIR="$p"
                my_real_ssl_libdir="$p"
                break
            fi
        done
        if [ ".$SSL_LIBDIR" = . ]; then
            echo "Error: Cannot find SSL library files in any of the following dirs:" 1>&2
            echo "Error: . /lib /usr/lib /usr/local/lib" 1>&2
            exit 1
        fi
    else
        if [ -f "$SSL_BASE/libssl.a" -o -f "$SSL_BASE/libssl.so" ]; then
            SSL_LIBDIR='$(SSL_BASE)'
            my_real_ssl_libdir="$SSL_BASE"
        elif [ -f "$SSL_BASE/lib/libssl.a" -o -f "$SSL_BASE/lib/libssl.so" ]; then
            SSL_LIBDIR='$(SSL_BASE)/lib'
            my_real_ssl_libdir="$SSL_BASE/lib"
        else
            echo "Error: Cannot find SSL library files under $SSL_BASE" 1>&2
            exit 1
        fi
    fi
    SSL_LDFLAGS="$SSL_LDFLAGS -L\$(SSL_LIBDIR)"
    SSL_LIBS="$SSL_LIBS -lssl -lcrypto"

    #
    #   SSL installation type
    #
    case $SSL_BINDIR in
        */apps ) my_type="source tree only" ;;
             * ) my_type="installed package" ;;
    esac
    case $SSL_BASE in
        SYSTEM ) my_note="(system-wide)" ;;
        *      ) my_note="(stand-alone)" ;;
    esac
    echo "$my_prefix SSL library type: $my_type $my_note"

    #
    #   Special GCC/DSO support
    #
    #   Under some platforms where GCC is used we have to link the DSO
    #   (libssl.so) explicitly against the GCC library (libgcc) to avoid
    #   problems with missing symbols like __umoddi3, etc.
    #
    #   Notice: When GCC is installed as "cc" we assume it's really
    #           well incorporated into the system and no hack is
    #           needed (like on FreeBSD, Linux, etc.)
    #
    if [ ".$my_buildtype" = .DSO ]; then
        my_CC=`echo "$CC" | sed -e 's/ .*//'`
        case $my_CC in
            gcc|*/gcc|egcs|*/egcs|egcc|*/egcc|pgcc|*/pgcc )
                gcclibdir="`$CC --print-libgcc-file-name | sed -e 's;/[^/]*$;;'`"
                SSL_LIBS="$SSL_LIBS -L$gcclibdir -lgcc"
                ;;
        esac
    fi

    #
    #   adjust the Apache build environment
    #
    echo "SSL_BASE=$SSL_BASE" >>$my_outfile
    echo "SSL_BINDIR=$SSL_BINDIR" >>$my_outfile
    echo "SSL_INCDIR=$SSL_INCDIR" >>$my_outfile
    echo "SSL_LIBDIR=$SSL_LIBDIR" >>$my_outfile
    echo "SSL_PROGRAM=$SSL_PROGRAM" >>$my_outfile
    echo "SSL_VERSION=$SSL_VERSION" >>$my_outfile
    echo "SSL_CFLAGS=$SSL_CFLAGS" >>$my_outfile
    echo "SSL_VENDOR_OBJS=$SSL_VENDOR_OBJS" >>$my_outfile
    echo "SSL_VENDOR_OBJS_PIC=$SSL_VENDOR_OBJS_PIC" >>$my_outfile
    if [ ".$my_buildtype" = .DSO ]; then
        #   under DSO we link ourself
        echo "SSL_LIBS=$SSL_LIBS" >>$my_outfile
        echo "SSL_LDFLAGS=$SSL_LDFLAGS" >>$my_outfile
    else
        #   else we are linked with httpd
        LDFLAGS="$LDFLAGS $SSL_LDFLAGS"
        LIBS="$LIBS $SSL_LIBS"
    fi
    CFLAGS="$CFLAGS -DMOD_SSL=$A_VER_HEX"
    if [ ".$P_ID" != . ]; then
        CFLAGS="$CFLAGS -DSSL_PRODUCT=$P_VER_HEX"
    fi
    RULE_EAPI=yes

ConfigEnd

@


1.16
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@@


1.15
log
@merge apache 1.3.27 and mod_ssl 2.8.11
@
text
@d13 1
a13 1
##  Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
@


1.14
log
@don't try to find a "suitable" bourne shell for subcommands, just use our
/bin/sh, it is fine.
Sam Smith <S@@mSmith.net> reported a breakage in case bash in installed, and
dhartmei@@ analyzed, as far as I can see from the old mail sam forwarded me.
@
text
@d334 5
@


1.13
log
@merge mod_ssl 2.8.7
--
Ok'd by: beck@@
@
text
@d88 1
a88 8
    SH=sh
    if [ -f /bin/bash ]; then
        SH=/bin/bash
    elif [ -f /bin/sh5 ]; then
        SH=/bin/sh5
    elif [ -f /bin/sh ]; then
        SH=/bin/sh
    fi
@


1.12
log
@merge mod_ssl 2.8.4
--
Ok'd by: beck@@
@
text
@d285 1
a285 1
        SSL_BASE=`egrep '^SSL_BASE=' $file | tail -1 | awk -F= '{print $2}'`
@


1.12.2.1
log
@Pull in patch from current:
Fix (brad):
merge mod_ssl 2.8.7
@
text
@d285 1
a285 1
        SSL_BASE=`egrep '^SSL_BASE=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
@


1.11
log
@merge mod_ssl 2.8.2
--
Ok'd by: beck@@
@
text
@d258 2
a259 2
            case "$OS" in
                Linux )
d370 1
a370 1
        *0.9.6*engine* )
@


1.11.2.1
log
@Upgrade mod_ssl to 2.8.7, to fix the recent vulnerability.

Requested, and patch from: brad@@
@
text
@d258 2
a259 2
            case "$PLAT" in
                *-linux* )
d285 1
a285 1
        SSL_BASE=`egrep '^SSL_BASE=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
d370 1
a370 1
        *0.9.6*engine* | *0.9.6a*engine* | *0.9.[789]* )
@


1.10
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d399 3
a401 1
    SSL_CFLAGS="$SSL_CFLAGS -I\$(SSL_INCDIR)"
@


1.9
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d13 1
a13 1
##  Copyright (c) 1998-2000 Ralf S. Engelschall. All rights reserved.
@


1.8
log
@mod_ssl 2.6.4 merge
From brad@@
@
text
@d367 9
a444 83

    #
    #   support for RSAref library
    #
    if [ ".$RSA_BASE" = . ]; then
        RSA_BASE=`egrep '^RSA_BASE=' $file | tail -1 | awk -F= '{print $2}'`
    fi
    if [ ".$RSA_BASE" != . ]; then
        if [ ! -f "$my_real_ssl_libdir/libRSAglue.a" ]; then
            echo "Error: Cannot find OpenSSL's RSAglue library under $my_real_ssl_libdir" 1>&2
            exit 1
        else
            SSL_LIBS="$SSL_LIBS -lRSAglue"
        fi
        case $RSA_BASE in
            SYSTEM ) ;;
            /* ) ;;
             * ) RSA_BASE="`cd ../$RSA_BASE; pwd`" ;;
        esac
        echo "$my_prefix SSL library plugin mode: RSAref (explicitly configured)"
    else
        if [ -f "$my_real_ssl_libdir/libRSAglue.a" ]; then
            if [ ".`$SSL_PROGRAM version -f | grep -- -DRSAref`" != . ]; then
                SSL_LIBS="$SSL_LIBS -lRSAglue"
                if [ -f "$SSL_BASE/Makefile.ssl" ]; then
                    if [ ".`egrep -- '-L[^ ]*/rsaref' $SSL_BASE/Makefile.ssl`" != . ]; then
                         RSA_BASE=`egrep -- '-L[^ ]*/rsaref' $SSL_BASE/Makefile.ssl |\
                                   head -1 | sed -e 's;.*-L\([^ ]*/rsaref[^ ]*\).*;\1;'`
                    fi
                fi
                if [ ".$RSA_BASE" = . ]; then
                    RSA_BASE='SYSTEM'
                fi
            fi
        fi
        if [ ".$RSA_BASE" != . ]; then
            echo "$my_prefix SSL library plugin mode: RSAref (implicitly configured)"
        else
            echo "$my_prefix SSL library plugin mode: none"
        fi
    fi
    if [ ".$RSA_BASE" != . ]; then
        if [ ".$RSA_BASE" = .SYSTEM ]; then
            my_found=no
            for p in . /lib /usr/lib /usr/local/lib; do
                if [ -f "$p/librsaref.a" -o -f "$p/librsaref.so" ]; then
                    SSL_LDFLAGS="$SSL_LDFLAGS -L$p"
                    SSL_LIBS="$SSL_LIBS -lrsaref"
                    echo "$my_prefix SSL library plugin path: $p/librsaref.a"
                    my_found=yes
                    break
                fi
            done
            if [ .$my_found = .no ]; then
                echo "Error: Cannot find RSAref library in any of the following dirs:" 1>&2
                echo "Error: . /lib /usr/lib /usr/local/lib" 1>&2
                exit 1
            fi
        else
            my_found=no
            if [ -f "$RSA_BASE/librsaref.a" ]; then
                SSL_LDFLAGS="$SSL_LDFLAGS -L$RSA_BASE"
                SSL_LIBS="$SSL_LIBS -lrsaref"
                echo "$my_prefix SSL library plugin path: $RSA_BASE/librsaref.a"
                my_found=yes
            elif [ -f "$RSA_BASE/rsaref.a" ]; then
                SSL_LIBS="$SSL_LIBS $RSA_BASE/rsaref.a"
                echo "$my_prefix SSL library plugin path: $RSA_BASE/rsaref.a"
                my_found=yes
            else
                wild="`echo $RSA_BASE/*/rsaref.a`"
                if [ -f "$wild" ]; then
                    SSL_LIBS="$SSL_LIBS $wild"
                    echo "$my_prefix SSL library plugin path: $wild"
                    my_found=yes
                fi
            fi
            if [ .$my_found = .no ]; then
                echo "Error: Cannot find RSAref library under $RSA_BASE" 1>&2
                exit 1
            fi
        fi
    fi
@


1.7
log
@Fix apache configure assumption that helper scripts are executable.
(thanks binkertn@@umich.edu). - Closes PR 1175
@
text
@d85 12
d157 5
a161 5
        my_rule_SSL_COMPAT=`sh ./helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`sh ./helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`sh ./helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`sh ./helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`sh ./helpers/CutRule SSL_VENDOR $file`
d223 1
a223 1
            if sh ./helpers/TestCompile func dbm_open; then
d231 1
a231 1
            if sh ./helpers/TestCompile func dbm_open; then
d234 1
a234 1
            elif sh ./helpers/TestCompile lib dbm dbm_open; then
d237 1
a237 1
            elif sh ./helpers/TestCompile lib ndbm dbm_open; then
d532 2
a533 1
        case $CC in
@


1.6
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d145 5
a149 5
        my_rule_SSL_COMPAT=`./helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`./helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`./helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`./helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`./helpers/CutRule SSL_VENDOR $file`
d211 1
a211 1
            if ./helpers/TestCompile func dbm_open; then
d219 1
a219 1
            if ./helpers/TestCompile func dbm_open; then
d222 1
a222 1
            elif ./helpers/TestCompile lib dbm dbm_open; then
d225 1
a225 1
            elif ./helpers/TestCompile lib ndbm dbm_open; then
@


1.5
log
@Change Apache config tools to not assume certain files are executable,
and thus allow us to build from cvs trees checked out read only. - basically
ensure we call shell scripts by using ${SHELL} instead of ./.
from leonard@@csee.uq.edu.au

Building diffs of this (And some other stuff in Makefile.tmpl) to send
to slemko to see if apache will buy it back.
@
text
@d145 5
a149 5
        my_rule_SSL_COMPAT=`sh helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`sh helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`sh helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`sh helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`sh helpers/CutRule SSL_VENDOR $file`
d211 1
a211 1
            if sh helpers/TestCompile func dbm_open; then
d219 1
a219 1
            if sh helpers/TestCompile func dbm_open; then
d222 1
a222 1
            elif sh helpers/TestCompile lib dbm dbm_open; then
d225 1
a225 1
            elif sh helpers/TestCompile lib ndbm dbm_open; then
d275 5
a279 1
            SSL_BASE="/usr/local/ssl"
d398 1
a398 1
        if [ -f "$SSL_BASE/libssl.a" ]; then
d401 1
a401 1
        elif [ -f "$SSL_BASE/lib/libssl.a" ]; then
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d145 5
a149 5
        my_rule_SSL_COMPAT=`./helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`./helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`./helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`./helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`./helpers/CutRule SSL_VENDOR $file`
d211 1
a211 1
            if ./helpers/TestCompile func dbm_open; then
d219 1
a219 1
            if ./helpers/TestCompile func dbm_open; then
d222 1
a222 1
            elif ./helpers/TestCompile lib dbm dbm_open; then
d225 1
a225 1
            elif ./helpers/TestCompile lib ndbm dbm_open; then
@


1.3
log
@Sync with mod_ssl v2.4.5. ok beck@@.
@
text
@d13 1
a13 1
##  Copyright (c) 1998-1999 Ralf S. Engelschall. All rights reserved.
d142 1
d148 1
d172 10
d315 2
a316 6
#            echo "Error: Cannot find SSL binaries in $PATH" 1>&2
#            exit 1
# 	     Kludge for OpenBSD - Make sure we work even if the stuff
# isn't there yet. 
             SSL_BINDIR="/usr/sbin"
	     SSL_PROGRAM="/usr/sbin/openssl"
d340 9
a348 12
# kludged for OpenBSD - Don't want this retarded shit breaking make build
# when openssl isn't there yet. 
#    SSL_VERSION_ID="`$SSL_PROGRAM version`"
#    echo "$my_prefix SSL library version: $SSL_VERSION_ID"
#    case $SSL_VERSION_ID in
#        *0.[5678].*|*0.9.[012]* )
#            echo "Error: OpenSSL VERSIONS BELOW 0.9.3 ARE NO LONGER SUPPORTED."
#            echo "Hint:  Use OpenSSL version 0.9.3 or higher!"
#            exit 1
#            ;;
#    esac
    SSL_VERSION_ID=0.9.4
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d232 11
a242 1
        #   4. finally configure the chosen DBM lib
@


1.1
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d2 4
a5 4
##  _ __ ___   ___   __| |    ___ ___| |  
## | '_ ` _ \ / _ \ / _` |   / __/ __| |  
## | | | | | | (_) | (_| |   \__ \__ \ | mod_ssl - Apache Interface to SSLeay
## |_| |_| |_|\___/ \__,_|___|___/___/_| http://www.engelschall.com/sw/mod_ssl/
d31 1
a31 1
##      mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d46 1
a46 1
##      mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d142 1
d147 1
d170 19
d266 1
a266 1
            echo "Hint:  Please provide us with the location of SSLeay" 1>&2
d274 3
a276 1
    #   determine location of SSLeay binaries
d293 6
a298 2
            echo "Error: Cannot find SSL binaries in $PATH" 1>&2
            exit 1
d320 17
a336 1
    #   determine location of SSLeay headers
d341 1
a341 1
            if [ -f "$p/ssl.h" ]; then
d352 1
a352 1
        if [ -f "$SSL_BASE/include/ssl.h" ]; then
d355 2
a356 6
            if [ -f "$SSL_BASE/ssl.h" ]; then
                SSL_INCDIR='$(SSL_BASE)'
            else
                echo "Error: Cannot find SSL header files under $SSL_BASE" 1>&2
                exit 1
            fi
d362 1
a362 1
    #  determine location of SSLeay libraries
d379 4
a382 1
        if [ -f "$SSL_BASE/lib/libssl.a" ]; then
d386 2
a387 7
            if [ -f "$SSL_BASE/libssl.a" ]; then
                SSL_LIBDIR='$(SSL_BASE)'
                my_real_ssl_libdir="$SSL_BASE"
            else
                echo "Error: Cannot find SSL library files under $SSL_BASE" 1>&2
                exit 1
            fi
a406 13
    #   SSL version
    #
    SSLEAY_VERSION="`$SSL_PROGRAM version`"
    echo "$my_prefix SSL library version: $SSLEAY_VERSION"
    case $SSLEAY_VERSION in
        *0.[5678].* )
            echo "$my_prefixe WARNING: THE SSLeay VERSIONS BELOW 0.9.0 ARE NO LONGER SUPPORTED."
            echo "$my_prefixe Hint: Use SSLeay version 0.9.0b or any OpenSSL version."
            exit 1
            ;;
    esac

    #
d414 1
a414 1
            echo "Error: Cannot find SSLeay's RSAglue library under $my_real_ssl_libdir" 1>&2
d470 4
d475 4
a478 3
                if [ -f "$RSA_BASE/rsaref.a" ]; then
                    SSL_LIBS="$SSL_LIBS $RSA_BASE/rsaref.a"
                    echo "$my_prefix SSL library plugin path: $RSA_BASE/rsaref.a"
a479 7
                else
                    wild="`echo $RSA_BASE/*/rsaref.a`"
                    if [ -f "$wild" ]; then
                        SSL_LIBS="$SSL_LIBS $wild"
                        echo "$my_prefix SSL library plugin path: $wild"
                        my_found=yes
                    fi
d519 2
@


1.1.1.1
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d2 4
a5 4
##  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
## | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
## | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
## |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
d13 1
a13 1
##  Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
d31 1
a31 1
##      mod_ssl project (http://www.modssl.org/)."
d46 1
a46 1
##      mod_ssl project (http://www.modssl.org/)."
a84 12
    #   
    #   find a reasonable Bourne Shell for sub-shell calls
    #
    SH=sh
    if [ -f /bin/bash ]; then
        SH=/bin/bash
    elif [ -f /bin/sh5 ]; then
        SH=/bin/sh5
    elif [ -f /bin/sh ]; then
        SH=/bin/sh
    fi

a141 2
        my_rule_SSL_CONSERVATIVE=$SSL_CONSERVATIVE
        my_rule_SSL_VENDOR=$SSL_VENDOR
d143 3
a145 5
        my_rule_SSL_COMPAT=`$SH helpers/CutRule SSL_COMPAT $file`
        my_rule_SSL_SDBM=`$SH helpers/CutRule SSL_SDBM $file`
        my_rule_SSL_EXPERIMENTAL=`$SH helpers/CutRule SSL_EXPERIMENTAL $file`
        my_rule_SSL_CONSERVATIVE=`$SH helpers/CutRule SSL_CONSERVATIVE $file`
        my_rule_SSL_VENDOR=`$SH helpers/CutRule SSL_VENDOR $file`
a168 29
    #   determine conservative mode
    #
    if [ ".$my_rule_SSL_CONSERVATIVE" = .yes ]; then
        echo "$my_prefix SSL interface conservative code: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_CONSERVATIVE"
    else
        echo "$my_prefix SSL interface conservative code: disabled"
    fi

    # 
    #   determine vendor mode
    #
    SSL_VENDOR_OBJS=''
    SSL_VENDOR_OBJS_PIC=''
    if [ ".$my_rule_SSL_VENDOR" = .yes ]; then
        echo "$my_prefix SSL interface vendor extensions: enabled"
        SSL_CFLAGS="$SSL_CFLAGS -DSSL_VENDOR"
        my_src="`cd $my_dir && echo ssl_vendor*.c`"
        if [ ".$my_src" != . -a ".$my_src" != ".ssl_vendor*.c" ]; then
            SSL_CFLAGS="$SSL_CFLAGS -DSSL_VENDOR_OBJS"
            SSL_VENDOR_OBJS="`echo $my_src | sed -e 's;\.c;.o;g'`"
            SSL_VENDOR_OBJS_PIC="`echo $my_src | sed -e 's;\.c;.lo;g'`"
            echo "$my_prefix SSL interface vendor objects: $SSL_VENDOR_OBJS"
        fi
    else
        echo "$my_prefix SSL interface vendor extensions: disabled"
    fi

    #
d178 1
a178 1
            if $SH helpers/TestCompile func dbm_open; then
d186 1
a186 1
            if $SH helpers/TestCompile func dbm_open; then
d189 1
a189 1
            elif $SH helpers/TestCompile lib dbm dbm_open; then
d192 1
a192 1
            elif $SH helpers/TestCompile lib ndbm dbm_open; then
d211 1
a211 11
        #   4. override decision on a few brain-dead platforms
        if [ ".$my_rule_SSL_SDBM" = .default ]; then
            case "$PLAT" in
                *-linux* )
                    #   force Linux boxes to use builtin SDBM per default because 
                    #   of too much broken vendor DBM libraries on this platform
                    SSL_DBM_NAME=''
                    ;;
            esac
        fi
        #   5. finally configure the chosen DBM lib
d230 1
a230 1
        SSL_BASE=`egrep '^SSL_BASE=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
d232 1
a232 5
            if [ -d /usr/local/ssl ]; then
                SSL_BASE="/usr/local/ssl"
            else
                SSL_BASE="SYSTEM"
            fi
d245 1
a245 1
            echo "Hint:  Please provide us with the location of OpenSSL" 1>&2
d253 1
a253 3
    #   determine location of OpenSSL binaries
    #   (we still search also for `ssleay' to allow us to
    #   better complain about the actually installed version)
a279 5
            if [ -f "$SSL_BASE/sbin/$name" ]; then
                SSL_PROGRAM="$SSL_BASE/sbin/$name"
                SSL_BINDIR='$(SSL_BASE)/sbin'
                break;
            fi
d293 1
a293 23
    #   SSL version
    #
    SSL_VERSION_ID="`$SSL_PROGRAM version`"
    echo "$my_prefix SSL library version: $SSL_VERSION_ID"
    case $SSL_VERSION_ID in
        *0.[5678].*|*0.9.[012]* )
            echo "Error: OpenSSL VERSIONS BELOW 0.9.3 ARE NO LONGER SUPPORTED."
            echo "Hint:  Use OpenSSL version 0.9.3 or higher!"
            exit 1
            ;;
    esac

    #
    #   SSL engine support
    #
    case $SSL_VERSION_ID in
        *0.9.6*engine* | *0.9.6a*engine* | *0.9.[789]* )
            SSL_CFLAGS="$SSL_CFLAGS -DSSL_ENGINE"
            ;;
    esac

    #
    #   determine location of OpenSSL headers
d298 1
a298 1
            if [ -f "$p/openssl/ssl.h" ]; then
d309 1
a309 1
        if [ -f "$SSL_BASE/include/openssl/ssl.h" ]; then
d312 6
a317 2
            echo "Error: Cannot find SSL header files under $SSL_BASE" 1>&2
            exit 1
d320 1
a320 3
    if [ ".$SSL_INCDIR" != "./usr/include" ]; then
        SSL_CFLAGS="$SSL_CFLAGS -I\$(SSL_INCDIR)"
    fi
d323 1
a323 1
    #  determine location of OpenSSL libraries
d340 1
a340 4
        if [ -f "$SSL_BASE/libssl.a" -o -f "$SSL_BASE/libssl.so" ]; then
            SSL_LIBDIR='$(SSL_BASE)'
            my_real_ssl_libdir="$SSL_BASE"
        elif [ -f "$SSL_BASE/lib/libssl.a" -o -f "$SSL_BASE/lib/libssl.so" ]; then
d344 7
a350 2
            echo "Error: Cannot find SSL library files under $SSL_BASE" 1>&2
            exit 1
d370 98
d479 1
a479 2
        my_CC=`echo "$CC" | sed -e 's/ .*//'`
        case $my_CC in
a496 2
    echo "SSL_VENDOR_OBJS=$SSL_VENDOR_OBJS" >>$my_outfile
    echo "SSL_VENDOR_OBJS_PIC=$SSL_VENDOR_OBJS_PIC" >>$my_outfile
@


1.1.1.2
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@d13 1
a13 1
##  Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
@


