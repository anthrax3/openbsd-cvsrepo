head	1.26;
access;
symbols
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.21.0.28
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.26
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.24
	OPENBSD_5_0:1.21.0.22
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.20
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.18
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.14
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.16
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.12
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.10
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.8
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.6
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.20.0.6
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.4
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.16.0.6
	OPENBSD_3_4_BASE:1.16
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	apache:1.1.1
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.1.0.2
	OPENBSD_2_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.25;

1.25
date	2013.07.16.13.22.55;	author jsing;	state Exp;
branches;
next	1.24;

1.24
date	2013.07.16.13.02.16;	author jsing;	state Exp;
branches;
next	1.23;

1.23
date	2013.07.16.11.32.05;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2013.07.11.12.41.52;	author otto;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.04.08.51.28;	author henning;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.02.19.42.47;	author henning;	state Exp;
branches;
next	1.18;

1.18
date	2004.06.10.15.50.48;	author henning;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.17.18.57.05;	author henning;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2002.07.09.17.28.47;	author henning;	state Exp;
branches
	1.16.6.1;
next	1.15;

1.15
date	2002.02.28.21.22.42;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.20.18.06.15;	author brad;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2001.04.13.18.12.00;	author brad;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2001.03.29.10.21.46;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.15.22.18.17;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.21.01.20.30;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.30.05.35.10;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.19.11.17.21;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.25.18.29.54;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	99.12.08.02.45.49;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	99.12.08.00.05.17;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.10.01.23.50.43;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	99.09.30.19.46.10;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.45;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.03.01.04.28.50;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.07.19.48.14;	author henning;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.11.17.17.03.23;	author henning;	state Exp;
branches;
next	;

1.13.2.1
date	2002.03.13.20.21.01;	author miod;	state Exp;
branches;
next	;

1.14.2.1
date	2002.03.13.21.06.15;	author jason;	state Exp;
branches;
next	;

1.16.6.1
date	2004.06.11.08.41.32;	author brad;	state Exp;
branches;
next	;

1.17.2.1
date	2004.06.11.08.36.17;	author brad;	state Exp;
branches;
next	;


desc
@@


1.26
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*                      _             _
**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
**                      |_____|
**  mod_ssl.h
**  Global header
*/

/* ====================================================================
 * Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * 4. The names "mod_ssl" must not be used to endorse or promote
 *    products derived from this software without prior written
 *    permission. For written permission, please contact
 *    rse@@engelschall.com.
 *
 * 5. Products derived from this software may not be called "mod_ssl"
 *    nor may "mod_ssl" appear in their names without prior
 *    written permission of Ralf S. Engelschall.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by
 *     Ralf S. Engelschall <rse@@engelschall.com> for use in the
 *     mod_ssl project (http://www.modssl.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY RALF S. ENGELSCHALL ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL RALF S. ENGELSCHALL OR
 * HIS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 */
                             /* ``The Apache Group: a collection
                                  of talented individuals who are
                                  trying to perfect the art of
                                  never finishing something.''
                                             -- Rob Hartill         */
#ifndef MOD_SSL_H
#define MOD_SSL_H 1

/* 
 * Optionally enable the experimental stuff, but allow the user to
 * override the decision which experimental parts are included by using
 * CFLAGS="-DSSL_EXPERIMENTAL_xxxx_IGNORE".
 */
#ifdef SSL_EXPERIMENTAL
#ifndef SSL_EXPERIMENTAL_PERDIRCA_IGNORE
#define SSL_EXPERIMENTAL_PERDIRCA
#endif
#ifndef SSL_EXPERIMENTAL_PROXY_IGNORE
#define SSL_EXPERIMENTAL_PROXY
#endif
#ifdef SSL_ENGINE
#ifndef SSL_EXPERIMENTAL_ENGINE_IGNORE
#define SSL_EXPERIMENTAL_ENGINE
#endif
#endif
#endif /* SSL_EXPERIMENTAL */

/*
 * Power up our brain...
 */

/* OS headers */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <time.h>
#include <sys/time.h>

/* OpenSSL headers */
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/pem.h>
#include <openssl/crypto.h>
#include <openssl/evp.h>
#include <openssl/rand.h>
#ifdef SSL_EXPERIMENTAL_ENGINE
#include <openssl/engine.h>
#endif

/* Apache headers */
#define CORE_PRIVATE
#include "ap_config.h"
#include "httpd.h"
#include "http_config.h"
#include "http_conf_globals.h"
#include "http_protocol.h"
#include "http_request.h"
#include "http_main.h"
#include "http_core.h"
#include "http_log.h"
#include "scoreboard.h"
#include "util_md5.h"
#include "fnmatch.h"
#undef CORE_PRIVATE

/* mod_ssl headers */
#include "ssl_expr.h"
#include "ssl_util_ssl.h"
#include "ssl_util_table.h"

/*
 * Provide reasonable default for some defines
 */
#ifndef FALSE
#define FALSE (0)
#endif
#ifndef TRUE
#define TRUE (!FALSE)
#endif
#ifndef PFALSE
#define PFALSE ((void *)FALSE)
#endif
#ifndef PTRUE
#define PTRUE ((void *)TRUE)
#endif
#ifndef UNSET
#define UNSET (-1)
#endif
#ifndef NUL
#define NUL '\0'
#endif
#ifndef RAND_MAX
#include <limits.h>
#define RAND_MAX INT_MAX
#endif

/*
 * Provide reasonable defines for some types
 */
#ifndef BOOL
#define BOOL unsigned int
#endif
#ifndef UCHAR
#define UCHAR unsigned char
#endif

/*
 * Provide useful shorthands
 */
#define strEQ(s1,s2)     (strcmp(s1,s2)        == 0)
#define strNE(s1,s2)     (strcmp(s1,s2)        != 0)
#define strEQn(s1,s2,n)  (strncmp(s1,s2,n)     == 0)
#define strNEn(s1,s2,n)  (strncmp(s1,s2,n)     != 0)

#define strcEQ(s1,s2)    (strcasecmp(s1,s2)    == 0)
#define strcNE(s1,s2)    (strcasecmp(s1,s2)    != 0)
#define strcEQn(s1,s2,n) (strncasecmp(s1,s2,n) == 0)
#define strcNEn(s1,s2,n) (strncasecmp(s1,s2,n) != 0)

#define strIsEmpty(s)    (s == NULL || s[0] == NUL)

#define cfgMerge(el,unset)  new->el = add->el == unset ? base->el : add->el
#define cfgMergeArray(el)   new->el = ap_append_arrays(p, add->el, base->el)
#define cfgMergeTable(el)   new->el = ap_overlay_tables(p, add->el, base->el)
#define cfgMergeCtx(el)     new->el = ap_ctx_overlay(p, add->el, base->el)
#define cfgMergeString(el)  cfgMerge(el, NULL)
#define cfgMergeBool(el)    cfgMerge(el, UNSET)
#define cfgMergeInt(el)     cfgMerge(el, UNSET)

#define myModConfig()    (SSLModConfigRec *)ap_ctx_get(ap_global_ctx, "ssl_module")
#define mySrvConfig(srv) (SSLSrvConfigRec *)ap_get_module_config(srv->module_config,  &ssl_module)
#define myDirConfig(req) (SSLDirConfigRec *)ap_get_module_config(req->per_dir_config, &ssl_module)

#define myCtxVarSet(mc,num,val)  mc->rCtx.pV##num = val
#define myCtxVarGet(mc,num,type) (type)(mc->rCtx.pV##num)

#define AP_ALL_CMD(name, args, desc) \
        { "SSL"#name, ssl_cmd_SSL##name, NULL, RSRC_CONF|OR_AUTHCFG, args, desc },
#define AP_SRV_CMD(name, args, desc) \
        { "SSL"#name, ssl_cmd_SSL##name, NULL, RSRC_CONF, args, desc },
#define AP_DIR_CMD(name, type, args, desc) \
        { "SSL"#name, ssl_cmd_SSL##name, NULL, OR_##type, args, desc },
#define AP_END_CMD \
        { NULL }

/*
 * SSL Logging
 */
#define SSL_LOG_NONE    (1<<0)
#define SSL_LOG_ERROR   (1<<1)
#define SSL_LOG_WARN    (1<<2)
#define SSL_LOG_INFO    (1<<3)
#define SSL_LOG_TRACE   (1<<4)
#define SSL_LOG_DEBUG   (1<<5)
#define SSL_LOG_MASK    (SSL_LOG_ERROR|SSL_LOG_WARN|SSL_LOG_INFO|SSL_LOG_TRACE|SSL_LOG_DEBUG)

#define SSL_ADD_NONE     (1<<8)
#define SSL_ADD_ERRNO    (1<<9)
#define SSL_ADD_SSLERR   (1<<10)
#define SSL_NO_TIMESTAMP (1<<11)
#define SSL_NO_LEVELID   (1<<12)
#define SSL_NO_NEWLINE   (1<<13)

/*
 * Defaults for the configuration
 */
#ifndef SSL_SESSION_CACHE_TIMEOUT
#define SSL_SESSION_CACHE_TIMEOUT  300
#endif

/*
 * Support for file locking: Try to determine whether we should use fcntl() or
 * flock().  Would be better ap_config.h could provide this... :-(
  */
#if defined(USE_FLOCK_SERIALIZED_ACCEPT)
#define SSL_USE_FLOCK 1
#include <sys/file.h>
#endif
#if !defined(SSL_USE_FCNTL) && !defined(SSL_USE_FLOCK)
#define SSL_USE_FLOCK 1
#include <sys/file.h>
#ifndef LOCK_UN
#undef SSL_USE_FLOCK
#define SSL_USE_FCNTL 1
#include <fcntl.h>
#endif
#endif

/*
 * Support for Mutex
 */
#define SSL_MUTEX_LOCK_MODE ( S_IRUSR|S_IWUSR )
#define SSL_CAN_USE_SEM
#define SSL_HAVE_IPCSEM
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
/* 
 * Some platforms have a `union semun' pre-defined but Single Unix
 * Specification (SUSv2) says in semctl(2): `If required, it is of
 * type union semun, which the application program must explicitly
 * declare'. So we define it always ourself to avoid problems (but under
 * a different name to avoid a namespace clash).
 */
union ssl_ipc_semun {
    long val;
    struct semid_ds *buf;
    unsigned short int *array;
};

/*
 * Support for MM library
 */
#define SSL_MM_FILE_MODE ( S_IRUSR|S_IWUSR )

/*
 * Support for DBM library
 */
#define SSL_DBM_FILE_MODE ( S_IRUSR|S_IWUSR )

#include <ndbm.h>
#define ssl_dbm_open     dbm_open
#define ssl_dbm_close    dbm_close
#define ssl_dbm_store    dbm_store
#define ssl_dbm_fetch    dbm_fetch
#define ssl_dbm_delete   dbm_delete
#define ssl_dbm_firstkey dbm_firstkey
#define ssl_dbm_nextkey  dbm_nextkey
#if !defined(SSL_DBM_FILE_SUFFIX_DIR) && !defined(SSL_DBM_FILE_SUFFIX_PAG)
#if defined(DBM_SUFFIX)
#define SSL_DBM_FILE_SUFFIX_DIR DBM_SUFFIX
#define SSL_DBM_FILE_SUFFIX_PAG DBM_SUFFIX
#elif defined(__FreeBSD__) || (defined(DB_LOCK) && defined(DB_SHMEM))
#define SSL_DBM_FILE_SUFFIX_DIR ".db"
#define SSL_DBM_FILE_SUFFIX_PAG ".db"
#else
#define SSL_DBM_FILE_SUFFIX_DIR ".dir"
#define SSL_DBM_FILE_SUFFIX_PAG ".pag"
#endif
#endif

/*
 * Check for OpenSSL version 
 */
#if SSL_LIBRARY_VERSION < 0x00907000
#error "mod_ssl requires OpenSSL 0.9.7 or higher"
#endif

/*
 * The own data structures
 */
typedef struct {
    pool *pPool;
    pool *pSubPool;
    array_header *aData;
} ssl_ds_array;

typedef struct {
    pool *pPool;
    pool *pSubPool;
    array_header *aKey;
    array_header *aData;
} ssl_ds_table;

/*
 * Define the certificate algorithm types
 */

typedef int ssl_algo_t;

#define SSL_ALGO_UNKNOWN (0)
#define SSL_ALGO_RSA     (1<<0)
#define SSL_ALGO_DSA     (1<<1)
#define SSL_ALGO_ALL     (SSL_ALGO_RSA|SSL_ALGO_DSA)

#define SSL_AIDX_RSA     (0)
#define SSL_AIDX_DSA     (1)
#define SSL_AIDX_MAX     (2)

/*
 * Define IDs for the temporary RSA keys and DH params
 */

#define SSL_TKP_GEN        (0)
#define SSL_TKP_ALLOC      (1)
#define SSL_TKP_FREE       (2)

#define SSL_TKPIDX_RSA512  (0)
#define SSL_TKPIDX_RSA1024 (1)
#define SSL_TKPIDX_DH512   (2)
#define SSL_TKPIDX_DH1024  (3)
#define SSL_TKPIDX_MAX     (4)

/*
 * Define the SSL options
 */
#define SSL_OPT_NONE           (0)
#define SSL_OPT_RELSET         (1<<0)
#define SSL_OPT_STDENVVARS     (1<<1)
#define SSL_OPT_COMPATENVVARS  (1<<2)
#define SSL_OPT_EXPORTCERTDATA (1<<3)
#define SSL_OPT_FAKEBASICAUTH  (1<<4)
#define SSL_OPT_STRICTREQUIRE  (1<<5)
#define SSL_OPT_OPTRENEGOTIATE (1<<6)
#define SSL_OPT_ALL            (SSL_OPT_STDENVVARS|SSL_OPT_COMPATENVVAR|SSL_OPT_EXPORTCERTDATA|SSL_OPT_FAKEBASICAUTH|SSL_OPT_STRICTREQUIRE|SSL_OPT_OPTRENEGOTIATE)
typedef int ssl_opt_t;

/*
 * Define the SSL Protocol options
 */
#define SSL_PROTOCOL_NONE  (0)
#define SSL_PROTOCOL_SSLV2 (1<<0)
#define SSL_PROTOCOL_SSLV3 (1<<1)
#define SSL_PROTOCOL_TLSV1 (1<<2)
#define SSL_PROTOCOL_ALL   (SSL_PROTOCOL_SSLV2|SSL_PROTOCOL_SSLV3|SSL_PROTOCOL_TLSV1)
typedef int ssl_proto_t;

/*
 * Define the SSL verify levels
 */
typedef enum {
    SSL_CVERIFY_UNSET           = UNSET,
    SSL_CVERIFY_NONE            = 0,
    SSL_CVERIFY_OPTIONAL        = 1,
    SSL_CVERIFY_REQUIRE         = 2,
    SSL_CVERIFY_OPTIONAL_NO_CA  = 3
} ssl_verify_t;

/*
 * Define the SSL pass phrase dialog types
 */
typedef enum {
    SSL_PPTYPE_UNSET   = UNSET,
    SSL_PPTYPE_BUILTIN = 0,
    SSL_PPTYPE_FILTER  = 1
} ssl_pphrase_t;

/*
 * Define the Path Checking modes
 */
#define SSL_PCM_EXISTS     1
#define SSL_PCM_ISREG      2
#define SSL_PCM_ISDIR      4
#define SSL_PCM_ISNONZERO  8
typedef unsigned int ssl_pathcheck_t;

/*
 * Define the SSL session cache modes and structures
 */
typedef enum {
    SSL_SCMODE_UNSET = UNSET,
    SSL_SCMODE_NONE  = 0,
    SSL_SCMODE_DBM   = 1,
    SSL_SCMODE_SHMHT = 2,
    SSL_SCMODE_SHMCB = 3
} ssl_scmode_t;

/*
 * Define the SSL mutex modes
 */
typedef enum {
    SSL_MUTEXMODE_UNSET  = UNSET,
    SSL_MUTEXMODE_NONE   = 0,
    SSL_MUTEXMODE_FILE   = 1,
    SSL_MUTEXMODE_SEM    = 2
} ssl_mutexmode_t;

/*
 * Define the SSL requirement structure
 */
typedef struct {
    char     *cpExpr;
    ssl_expr *mpExpr;
} ssl_require_t;

/*
 * Define the SSL random number generator seeding source
 */
typedef enum {
    SSL_RSCTX_STARTUP = 1,
    SSL_RSCTX_CONNECT = 2
} ssl_rsctx_t;
typedef enum {
    SSL_RSSRC_BUILTIN = 1,
    SSL_RSSRC_FILE    = 2,
    SSL_RSSRC_EXEC    = 3
   ,SSL_RSSRC_EGD     = 4
} ssl_rssrc_t;
typedef struct {
    ssl_rsctx_t  nCtx;
    ssl_rssrc_t  nSrc;
    char        *cpPath;
    int          nBytes;
} ssl_randseed_t;

/*
 * Define the structure of an ASN.1 anything
 */
typedef struct {
    long int       nData;
    unsigned char *cpData;
} ssl_asn1_t;

/*
 * Define the mod_ssl per-module configuration structure
 * (i.e. the global configuration for each httpd process)
 */

typedef struct {
    pool           *pPool;
    BOOL            bFixed;
    int             nInitCount;
    int             nSessionCacheMode;
    char           *szSessionCacheDataFile;
    int             nSessionCacheDataSize;
    AP_MM          *pSessionCacheDataMM;
    table_t        *tSessionCacheDataTable;
    ssl_mutexmode_t nMutexMode;
    char           *szMutexFile;
    int             nMutexFD;
    int             nMutexSEMID;
    array_header   *aRandSeed;
    ssl_ds_table   *tTmpKeys;
    void           *pTmpKeys[SSL_TKPIDX_MAX];
    ssl_ds_table   *tPublicCert;
    ssl_ds_table   *tPrivateKey;
#ifdef SSL_EXPERIMENTAL_ENGINE
    char           *szCryptoDevice;
#endif
    struct {
        void *pV1, *pV2, *pV3, *pV4, *pV5, *pV6, *pV7, *pV8, *pV9, *pV10;
    } rCtx;
#ifdef SSL_VENDOR
    ap_ctx         *ctx;
#endif
} SSLModConfigRec;

/*
 * Define the mod_ssl per-server configuration structure
 * (i.e. the configuration for the main server
 *  and all <VirtualHost> contexts)
 */
typedef struct {
    BOOL         bEnabled;
    BOOL         bCompression;
    char        *szPublicCertFile[SSL_AIDX_MAX];
    char        *szPrivateKeyFile[SSL_AIDX_MAX];
    char        *szCertificateChain;
    char        *szCACertificatePath;
    char        *szCACertificateFile;
    char        *szLogFile;
    char        *szCipherSuite;
    int          nECDHCurve;
    BOOL         bHonorCipherOrder;
    FILE        *fileLogFile;
    int          nLogLevel;
    int          nVerifyDepth;
    ssl_verify_t nVerifyClient;
    X509        *pPublicCert[SSL_AIDX_MAX];
    EVP_PKEY    *pPrivateKey[SSL_AIDX_MAX];
    SSL_CTX     *pSSLCtx;
    int          nSessionCacheTimeout;
    int          nPassPhraseDialogType;
    char        *szPassPhraseDialogPath;
    ssl_proto_t  nProtocol;
    char        *szCARevocationPath;
    char        *szCARevocationFile;
    X509_STORE  *pRevocationStore;
#ifdef SSL_EXPERIMENTAL_PROXY
    /* Configuration details for proxy operation */
    ssl_proto_t  nProxyProtocol;
    int          bProxyVerify;
    int          nProxyVerifyDepth;
    char        *szProxyCACertificatePath;
    char        *szProxyCACertificateFile;
    char        *szProxyClientCertificateFile;
    char        *szProxyClientCertificatePath;
    char        *szProxyCipherSuite;
    SSL_CTX     *pSSLProxyCtx;
    STACK_OF(X509_INFO) *skProxyClientCerts;
#endif
#ifdef SSL_VENDOR
    ap_ctx      *ctx;
#endif
} SSLSrvConfigRec;

/*
 * Define the mod_ssl per-directory configuration structure
 * (i.e. the local configuration for all <Directory>
 *  and .htaccess contexts)
 */
typedef struct {
    BOOL          bSSLRequired;
    array_header *aRequirement;
    ssl_opt_t     nOptions;
    ssl_opt_t     nOptionsAdd;
    ssl_opt_t     nOptionsDel;
    char         *szCipherSuite;
    ssl_verify_t  nVerifyClient;
    int           nVerifyDepth;
#ifdef SSL_EXPERIMENTAL_PERDIRCA
    char         *szCACertificatePath;
    char         *szCACertificateFile;
#endif
#ifdef SSL_VENDOR
    ap_ctx       *ctx;
#endif
} SSLDirConfigRec;

/*
 *  function prototypes
 */

/*  API glue structures  */
extern module MODULE_VAR_EXPORT ssl_module;

/*  configuration handling   */
void         ssl_config_global_create(void);
void         ssl_config_global_fix(void);
BOOL         ssl_config_global_isfixed(void);
void        *ssl_config_server_create(pool *, server_rec *);
void        *ssl_config_server_merge(pool *, void *, void *);
void        *ssl_config_perdir_create(pool *, char *);
void        *ssl_config_perdir_merge(pool *, void *, void *);
const char  *ssl_cmd_SSLMutex(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLPassPhraseDialog(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLCryptoDevice(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLRandomSeed(cmd_parms *, char *, char *, char *, char *);
const char  *ssl_cmd_SSLEngine(cmd_parms *, char *, int);
const char  *ssl_cmd_SSLCompression(cmd_parms *, char *, int);
const char  *ssl_cmd_SSLCipherSuite(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLECDHCurve(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLHonorCipherOrder(cmd_parms *, char *, int);
const char  *ssl_cmd_SSLCertificateFile(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLCertificateKeyFile(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLCertificateChainFile(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLCACertificatePath(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLCACertificateFile(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLCARevocationPath(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLCARevocationFile(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLVerifyClient(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLVerifyDepth(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLSessionCache(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLSessionCacheTimeout(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLLog(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLLogLevel(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProtocol(cmd_parms *, char *, const char *);
const char  *ssl_cmd_SSLOptions(cmd_parms *, SSLDirConfigRec *, const char *);
const char  *ssl_cmd_SSLRequireSSL(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLRequire(cmd_parms *, SSLDirConfigRec *, char *);
#ifdef SSL_EXPERIMENTAL_PROXY
const char  *ssl_cmd_SSLProxyProtocol(cmd_parms *, char *, const char *);
const char  *ssl_cmd_SSLProxyCipherSuite(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyVerify(cmd_parms *, char *, int);
const char  *ssl_cmd_SSLProxyVerifyDepth(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyCACertificatePath(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyCACertificateFile(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyMachineCertificatePath(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyMachineCertificateFile(cmd_parms *, char *, char *);
#endif

/*  module initialization  */
void         ssl_init_Module(server_rec *, pool *);
void         ssl_init_SSLLibrary(void);
void         ssl_init_Engine(server_rec *, pool *);
void         ssl_init_TmpKeysHandle(int, server_rec *, pool *);
void         ssl_init_ConfigureServer(server_rec *, pool *, SSLSrvConfigRec *);
void         ssl_init_CheckServers(server_rec *, pool *);
STACK_OF(X509_NAME) 
            *ssl_init_FindCAList(server_rec *, pool *, char *, char *);
void         ssl_init_Child(server_rec *, pool *);
void         ssl_init_ChildKill(void *);
void         ssl_init_ModuleKill(void *);

/*  Apache API hooks  */
void         ssl_hook_AddModule(module *);
void         ssl_hook_RemoveModule(module *);
char        *ssl_hook_RewriteCommand(cmd_parms *, void *, const char *);
void         ssl_hook_NewConnection(conn_rec *);
void         ssl_hook_TimeoutConnection(int);
void         ssl_hook_CloseConnection(conn_rec *);
int          ssl_hook_Translate(request_rec *);
int          ssl_hook_Auth(request_rec *);
int          ssl_hook_UserCheck(request_rec *);
int          ssl_hook_Access(request_rec *);
int          ssl_hook_Fixup(request_rec *);
int          ssl_hook_ReadReq(request_rec *);
int          ssl_hook_Handler(request_rec *);

/*  OpenSSL callbacks */
RSA         *ssl_callback_TmpRSA(SSL *, int, int);
DH          *ssl_callback_TmpDH(SSL *, int, int);
int          ssl_callback_SSLVerify(int, X509_STORE_CTX *);
int          ssl_callback_SSLVerify_CRL(int, X509_STORE_CTX *, server_rec *);
int          ssl_callback_NewSessionCacheEntry(SSL *, SSL_SESSION *);
SSL_SESSION *ssl_callback_GetSessionCacheEntry(SSL *, unsigned char *, int, int *);
void         ssl_callback_DelSessionCacheEntry(SSL_CTX *, SSL_SESSION *);
void         ssl_callback_LogTracingState(const SSL *, int, int);

/*  Session Cache Support  */
void         ssl_scache_init(server_rec *, pool *);
void         ssl_scache_kill(server_rec *);
BOOL         ssl_scache_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_remove(server_rec *, UCHAR *, int);
void         ssl_scache_expire(server_rec *);
void         ssl_scache_status(server_rec *, pool *, void (*)(char *, void *), void *);
char        *ssl_scache_id2sz(UCHAR *, int);
void         ssl_scache_dbm_init(server_rec *, pool *);
void         ssl_scache_dbm_kill(server_rec *);
BOOL         ssl_scache_dbm_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_dbm_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_dbm_remove(server_rec *, UCHAR *, int);
void         ssl_scache_dbm_expire(server_rec *);
void         ssl_scache_dbm_status(server_rec *, pool *, void (*)(char *, void *), void *);
void         ssl_scache_shmht_init(server_rec *, pool *);
void         ssl_scache_shmht_kill(server_rec *);
BOOL         ssl_scache_shmht_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_shmht_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_shmht_remove(server_rec *, UCHAR *, int);
void         ssl_scache_shmht_expire(server_rec *);
void         ssl_scache_shmht_status(server_rec *, pool *, void (*)(char *, void *), void *);
void         ssl_scache_shmcb_init(server_rec *, pool *);
void         ssl_scache_shmcb_kill(server_rec *);
BOOL         ssl_scache_shmcb_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_shmcb_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_shmcb_remove(server_rec *, UCHAR *, int);
void         ssl_scache_shmcb_expire(server_rec *);
void         ssl_scache_shmcb_status(server_rec *, pool *, void (*)(char *, void *), void *);

/*  Pass Phrase Support  */
void         ssl_pphrase_Handle(server_rec *, pool *);
int          ssl_pphrase_Handle_CB(char *, int, int);

/*  Diffie-Hellman Parameter Support  */
DH           *ssl_dh_GetTmpParam(int);
DH           *ssl_dh_GetParamFromFile(char *);

/*  Data Structures */
ssl_ds_array *ssl_ds_array_make(pool *, int);
BOOL          ssl_ds_array_isempty(ssl_ds_array *);
void         *ssl_ds_array_push(ssl_ds_array *);
void         *ssl_ds_array_get(ssl_ds_array *, int);
void          ssl_ds_array_wipeout(ssl_ds_array *);
void          ssl_ds_array_kill(ssl_ds_array *);
ssl_ds_table *ssl_ds_table_make(pool *, int);
BOOL          ssl_ds_table_isempty(ssl_ds_table *);
void         *ssl_ds_table_push(ssl_ds_table *, char *);
void         *ssl_ds_table_get(ssl_ds_table *, char *);
void          ssl_ds_table_wipeout(ssl_ds_table *);
void          ssl_ds_table_kill(ssl_ds_table *);

/*  Mutex Support  */
void         ssl_mutex_init(server_rec *, pool *);
void         ssl_mutex_reinit(server_rec *, pool *);
void         ssl_mutex_on(server_rec *);
void         ssl_mutex_off(server_rec *);
void         ssl_mutex_kill(server_rec *s);
void         ssl_mutex_file_create(server_rec *, pool *);
void         ssl_mutex_file_open(server_rec *, pool *);
void         ssl_mutex_file_remove(void *);
BOOL         ssl_mutex_file_acquire(void);
BOOL         ssl_mutex_file_release(void);
void         ssl_mutex_sem_create(server_rec *, pool *);
void         ssl_mutex_sem_open(server_rec *, pool *);
void         ssl_mutex_sem_remove(void *);
BOOL         ssl_mutex_sem_acquire(void);
BOOL         ssl_mutex_sem_release(void);

/*  Logfile Support  */
void         ssl_log_open(server_rec *, server_rec *, pool *);
BOOL         ssl_log_applies(server_rec *, int);
void         ssl_log(server_rec *, int, const char *, ...);
void         ssl_die(void);

/*  Variables  */
void         ssl_var_register(void);
void         ssl_var_unregister(void);
char        *ssl_var_lookup(pool *, server_rec *, conn_rec *, request_rec *, char *);

/*  I/O  */
void         ssl_io_register(void);
void         ssl_io_unregister(void);
long         ssl_io_data_cb(BIO *, int, const char *, int, long, long);
#ifndef SSL_CONSERVATIVE
void         ssl_io_suck(request_rec *, SSL *);
#endif

/*  PRNG  */
int          ssl_rand_seed(server_rec *, pool *, ssl_rsctx_t, char *);

/*  Extensions  */
void         ssl_ext_register(void);
void         ssl_ext_unregister(void);

/*  Compatibility  */
#ifdef SSL_COMPAT
char        *ssl_compat_directive(server_rec *, pool *, const char *);
void         ssl_compat_variables(request_rec *);
#endif

/*  Utility Functions  */
char        *ssl_util_server_root_relative(pool *, char *, char *);
char        *ssl_util_vhostid(pool *, server_rec *);
FILE        *ssl_util_ppopen(server_rec *, pool *, char *);
int          ssl_util_ppopen_child(void *, child_info *);
void         ssl_util_ppclose(server_rec *, pool *, FILE *);
char        *ssl_util_readfilter(server_rec *, pool *, char *);
BOOL         ssl_util_path_check(ssl_pathcheck_t, char *);
ssl_algo_t   ssl_util_algotypeof(X509 *, EVP_PKEY *); 
char        *ssl_util_algotypestr(ssl_algo_t);
char        *ssl_util_ptxtsub(pool *, const char *, const char *, char *);
void         ssl_util_thread_setup(void);
void         ssl_util_thread_cleanup(void);

/*  Vendor extension support  */
#if defined(SSL_VENDOR) && defined(SSL_VENDOR_OBJS)
void         ssl_vendor_register(void);
void         ssl_vendor_unregister(void);
#endif

#endif /* MOD_SSL_H */
@


1.25
log
@Disable SSL compression in order to mitigate CRIME attacks. Add
an SSLCompression option so that it can be turned back on, however on
this is currently a no-op due to the compile options for libssl.

Requested by and ok djm@@
@
text
@@


1.24
log
@Enable ECDHE support in httpd via a SSLECDHCurve option. This specifies the
named curve to use when generating ephemeral EC keys for an ECDHE-based
cipher suite, or can be set to `none' to disable. The default is to use
a prime256v1 curve.

yay^Wok djm@@
@
text
@d510 1
d595 1
@


1.23
log
@Define HonorCipherOrder as a FLAG (rather than as a TAKE1), so that it
works correctly as a boolean on/off flag. While here, rename the variable
so that it is consistent with existing naming scheme.

ok otto@@ djm@@
@
text
@d517 2
a520 1
    BOOL         bHonorCipherOrder;
d595 1
@


1.22
log
@introduce HonorCipherOrder to use the server's order of preference of ciphers
ok djm@@ guenther@@
@
text
@d519 1
a519 1
    BOOL         cipher_server_pref;
d593 1
a594 1
const char  *ssl_cmd_SSLCipherSuite(cmd_parms *, SSLDirConfigRec *, char *);
@


1.21
log
@rip out bundled dbm, we've always used our dbm
From: Daniel Ouellet <daniel@@presscom.net>
@
text
@d519 1
d593 1
@


1.20
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@a285 12
#ifdef SSL_USE_SDBM
#include "ssl_util_sdbm.h"
#define ssl_dbm_open     sdbm_open
#define ssl_dbm_close    sdbm_close
#define ssl_dbm_store    sdbm_store
#define ssl_dbm_fetch    sdbm_fetch
#define ssl_dbm_delete   sdbm_delete
#define ssl_dbm_firstkey sdbm_firstkey
#define ssl_dbm_nextkey  sdbm_nextkey
#define SSL_DBM_FILE_SUFFIX_DIR ".dir"
#define SSL_DBM_FILE_SUFFIX_PAG ".pag"
#else /* !SSL_USE_SDBM */
a305 1
#endif /* !SSL_USE_SDBM */
@


1.19
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a69 7
 * Check whether Extended API (EAPI) is enabled
 */
#ifndef EAPI
#error "mod_ssl requires Extended API (EAPI)"
#endif

/* 
a239 4
#if defined(USE_FCNTL_SERIALIZED_ACCEPT)
#define SSL_USE_FCNTL 1
#include <fcntl.h>
#endif
a257 8
#if defined(USE_SYSVSEM_SERIALIZED_ACCEPT) ||\
    defined(__OpenBSD__) ||\
    (defined(__FreeBSD__) && defined(__FreeBSD_version) &&\
     __FreeBSD_version >= 300000) ||\
    (defined(LINUX) && defined(__GLIBC__) && defined(__GLIBC_MINOR__) &&\
     LINUX >= 2 && __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1) ||\
    defined(SOLARIS2) || defined(__hpux) ||\
    (defined (__digital__) && defined (__unix__))
a274 1
#endif
d323 2
a324 2
#if SSL_LIBRARY_VERSION < 0x00903100
#error "mod_ssl requires OpenSSL 0.9.3 or higher"
a464 1
#if SSL_LIBRARY_VERSION >= 0x00905100
a465 1
#endif
a669 1
#if SSL_LIBRARY_VERSION >= 0x00907000
a670 3
#else
void         ssl_callback_LogTracingState(SSL *, int, int);
#endif
@


1.18
log
@get changes from mod_ssl 2.8.18:

   *) Fix buffer overflow in "SSLOptions +FakeBasicAuth" implementation
      if the Subject-DN in the client certificate exceeds 6KB in length.
      (CVE CAN-2004-0488).

   *) Handle the case of OpenSSL retry requests after interrupted system
      calls during the SSL handshake phase.

   *) Remove some unused functions.
@
text
@a106 1
#ifndef WIN32
a107 5
#endif
#ifdef WIN32
#include <wincrypt.h>
#include <winsock2.h>
#endif
a256 1
#if !defined(MPE) && !defined(WIN32)
a257 1
#endif
a263 5
#ifdef AIX
#undef SSL_USE_FLOCK
#define SSL_USE_FCNTL 1
#include <fcntl.h>
#endif
a267 1
#ifndef WIN32
a268 3
#else
#define SSL_MUTEX_LOCK_MODE (_S_IREAD|_S_IWRITE )
#endif
a294 6
#ifdef WIN32
#define SSL_CAN_USE_SEM
#define SSL_HAVE_W32SEM
#include "multithread.h"
#include <process.h>
#endif
a298 1
#ifndef WIN32
a299 3
#else
#define SSL_MM_FILE_MODE ( _S_IREAD|_S_IWRITE )
#endif
a303 1
#ifndef WIN32
a304 4
#else
#define SSL_USE_SDBM
#define SSL_DBM_FILE_MODE ( _S_IREAD|_S_IWRITE )
#endif
@


1.17
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@a834 3
void         ssl_util_strupper(char *);
void         ssl_util_uuencode(char *, const char *, BOOL);
void         ssl_util_uuencode_binary(unsigned char *, const unsigned char *, int, BOOL);
@


1.17.2.1
log
@MFC:
Fix by henning@@

get changes from mod_ssl 2.8.18:

   *) Fix buffer overflow in "SSLOptions +FakeBasicAuth" implementation
      if the Subject-DN in the client certificate exceeds 6KB in length.
      (CVE CAN-2004-0488).

   *) Handle the case of OpenSSL retry requests after interrupted system
      calls during the SSL handshake phase.

   *) Remove some unused functions.

ok henning@@
@
text
@d835 3
@


1.16
log
@apache chroot and privilege drop.
httpd will chroot itself into ServerRoot (/var/www) and drop root privileges
now. This is enabled by default. Make sure to read httpd(8).

help deraadt@@
ssl mutex fixes beck@@

"commit" deraadt@@
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
@


1.16.6.1
log
@MFC:
Fix by henning@@

get changes from mod_ssl 2.8.18:

*) Fix buffer overflow in "SSLOptions +FakeBasicAuth" implementation
if the Subject-DN in the client certificate exceeds 6KB in length.
(CVE CAN-2004-0488).

*) Handle the case of OpenSSL retry requests after interrupted system
calls during the SSL handshake phase.

*) Remove some unused functions.

ok henning@@
@
text
@d835 3
@


1.15
log
@merge mod_ssl 2.8.7
--
Ok'd by: beck@@
@
text
@d287 1
@


1.14
log
@merge mod_ssl 2.8.4
--
Ok'd by: beck@@
@
text
@d723 3
d727 1
d846 1
@


1.14.2.1
log
@Pull in patch from current:
Fix (brad):
merge mod_ssl 2.8.7
@
text
@a722 3
#if SSL_LIBRARY_VERSION >= 0x00907000
void         ssl_callback_LogTracingState(const SSL *, int, int);
#else
a723 1
#endif
a841 1
void         ssl_util_thread_cleanup(void);
@


1.13
log
@merge mod_ssl 2.8.2
--
Ok'd by: beck@@
@
text
@a348 4
#if defined(__GLIBC__) && defined(__GLIBC_MINOR__) \
    && __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
#include <db1/ndbm.h>
#else
a349 1
#endif
@


1.13.2.1
log
@Upgrade mod_ssl to 2.8.7, to fix the recent vulnerability.

Requested, and patch from: brad@@
@
text
@d349 4
d354 1
a727 3
#if SSL_LIBRARY_VERSION >= 0x00907000
void         ssl_callback_LogTracingState(const SSL *, int, int);
#else
a728 1
#endif
a846 1
void         ssl_util_thread_cleanup(void);
@


1.12
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@a92 3
#ifndef SSL_EXPERIMENTAL_SHMCB_IGNORE
#define SSL_EXPERIMENTAL_SHMCB
#endif
d291 2
a292 1
    defined(SOLARIS2) || defined(__hpux)
d488 2
a489 4
    SSL_SCMODE_SHMHT = 2
#ifdef SSL_EXPERIMENTAL_SHMCB
   ,SSL_SCMODE_SHMCB = 3
#endif
a752 1
#ifdef SSL_EXPERIMENTAL_SHMCB
a759 1
#endif
@


1.11
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2000 Ralf S. Engelschall. All rights reserved.
@


1.10
log
@Mod_SSL 2.6.5 - from brad@@, thanks.
@
text
@d88 8
d127 3
d490 4
a493 1
    SSL_SCMODE_SHM   = 2
a495 8
typedef struct {
    UCHAR *ucaKey;
    int    nKey;
    UCHAR *ucaData;
    int    nData;
    time_t tExpiresAt;
} ssl_scinfo_t;

d567 3
d664 1
d699 1
d737 1
a737 1
BOOL         ssl_scache_store(server_rec *, SSL_SESSION *, int);
d739 2
a740 2
void         ssl_scache_remove(server_rec *, SSL_SESSION *);
void         ssl_scache_expire(server_rec *, time_t);
d745 4
a748 4
BOOL         ssl_scache_dbm_store(server_rec *, ssl_scinfo_t *);
void         ssl_scache_dbm_retrieve(server_rec *, ssl_scinfo_t *);
void         ssl_scache_dbm_remove(server_rec *, ssl_scinfo_t *);
void         ssl_scache_dbm_expire(server_rec *, time_t);
d750 16
a765 7
void         ssl_scache_shm_init(server_rec *, pool *);
void         ssl_scache_shm_kill(server_rec *);
BOOL         ssl_scache_shm_store(server_rec *, ssl_scinfo_t *);
void         ssl_scache_shm_retrieve(server_rec *, ssl_scinfo_t *);
void         ssl_scache_shm_remove(server_rec *, ssl_scinfo_t *);
void         ssl_scache_shm_expire(server_rec *, time_t);
void         ssl_scache_shm_status(server_rec *, pool *, void (*)(char *, void *), void *);
@


1.9
log
@mod_ssl 2.6.4 merge
From brad@@
@
text
@d819 1
a819 1
char        *ssl_util_server_root_relative(pool *, char *);
@


1.8
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d76 14
d107 1
d283 1
a283 1
    defined(SOLARIS2)
d597 1
a597 1
#ifdef SSL_EXPERIMENTAL
d629 1
a629 1
#ifdef SSL_EXPERIMENTAL
d675 1
a675 1
#ifdef SSL_EXPERIMENTAL
d819 1
@


1.7
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d85 2
d91 3
a93 1
#include <sys/stat.h>
d504 3
d582 13
d660 10
d786 1
a786 1
#ifdef SSL_EXPERIMENTAL
d791 1
a791 1
int          ssl_rand_seed(server_rec *, pool *, ssl_rsctx_t);
@


1.6
log
@mod_ssl 2.4.9 merge
@
text
@d12 1
a12 1
 * Copyright (c) 1998-1999 Ralf S. Engelschall. All rights reserved.
d113 1
@


1.5
log
@ Mod_SSL 2.4.8 merge
@
text
@d404 7
a410 6
#define SSL_OPT_COMPATENVVARS  (1<<1)
#define SSL_OPT_EXPORTCERTDATA (1<<2)
#define SSL_OPT_FAKEBASICAUTH  (1<<3)
#define SSL_OPT_STRICTREQUIRE  (1<<4)
#define SSL_OPT_OPTRENEGOTIATE (1<<5)
#define SSL_OPT_ALL            (SSL_OPT_COMPATENVVAR|SSL_OPT_EXPORTCERTDATA|SSL_OPT_FAKEBASICAUTH|SSL_OPT_STRICTREQUIRE|SSL_OPT_OPTRENEGOTIATE)
@


1.4
log
@Sync with mod_ssl v2.4.5. ok beck@@.
@
text
@d259 3
a261 2
    defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) ||\
    (defined(LINUX) && defined(__GLIBC__) && defined(__GLIBC_MINOR__) && \
d386 14
a522 4
    RSA            *pRSATmpKey512;
    RSA            *pRSATmpKey1024;
    DH             *pDHTmpParam512;
    DH             *pDHTmpParam1024;
d533 2
d642 1
@


1.3
log
@Sync with mod_ssl v2.4.4. ok beck@@.
@
text
@d260 2
a261 1
    (defined(LINUX) && LINUX >= 2) ||\
d525 1
a525 1
        void *pV1, *pV2, *pV3, *pV4, *pV5, *pV6, *pV7, *pV8, *pV9;
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d69 7
d258 4
a261 1
#ifdef USE_SYSVSEM_SERIALIZED_ACCEPT
d267 12
d346 1
a346 2
 * Check for OpenSSL version and whether
 * Extended API (EAPI) is enabled
a349 3
#endif
#ifndef EAPI
#error "mod_ssl requires Extended API (EAPI)"
@


1.1
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d2 4
a5 4
**  _ __ ___   ___   __| |    ___ ___| |
** | '_ ` _ \ / _ \ / _` |   / __/ __| |
** | | | | | | (_) | (_| |   \__ \__ \ | mod_ssl - Apache Interface to SSLeay
** |_| |_| |_|\___/ \__,_|___|___/___/_| http://www.engelschall.com/sw/mod_ssl/
d30 1
a30 1
 *     mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d45 1
a45 1
 *     mod_ssl project (http://www.engelschall.com/sw/mod_ssl/)."
d78 4
d84 9
a92 8
/* SSLeay headers */
#include <ssl.h>
#include <err.h>
#include <x509.h>
#include <pem.h>
#include <crypto.h>
#include <evp.h>
#include <rand.h>
d101 1
d112 1
d118 1
a118 1
#define FALSE 0
d121 7
a127 1
#define TRUE  !FALSE
d130 1
a130 1
#define UNSET -1
d133 5
a137 1
#define NUL   '\0'
d168 1
a209 1

d266 9
d295 4
d301 1
d309 5
a313 1
#if defined(__FreeBSD__) || (defined(DB_LOCK) && defined(DB_SHMEM))
d321 1
d324 2
a325 2
 * Check for SSLeay 0.9.0 and below
 * and enabled Extended API (EAPI)
d327 2
a328 2
#if SSL_LIBRARY_VERSION < 0x0900
#error "SSLeay versions below 0.9.0 are no longer supported"
d351 15
d373 3
a375 1
#define SSL_OPT_ALL            (SSL_OPT_COMPATENVVAR|SSL_OPT_EXPORTCERTDATA|SSL_OPT_FAKEBASICAUTH)
a380 1

a487 4

    /*
     * global config data
     */
d489 4
a492 2

    RSA            *pRSATmpKey;
d495 3
a502 1

a504 4

    /*
     * arbitrary global context data
     */
d508 3
d520 3
a522 2
    char        *szCertificateFile;
    char        *szKeyFile;
d531 2
a532 2
    X509        *px509Certificate;
    RSA         *prsaKey;
d538 6
d564 3
d587 1
a587 1
const char  *ssl_cmd_SSLEngine(cmd_parms *, char *, int flag);
d591 1
d594 3
a596 1
const char  *ssl_cmd_SSLVerifyClient(cmd_parms *, SSLDirConfigRec *, char *level);
d609 5
a613 3
void         ssl_init_SSLLibrary(server_rec *);
void         ssl_init_GetCertAndKey(server_rec *, pool *, SSLSrvConfigRec *);
STACK       *ssl_init_FindCAList(server_rec *, pool *, char *, char *);
d615 2
d621 1
a621 1
char        *ssl_hook_RewriteCommand(cmd_parms *, void *config, const char *);
d624 2
a625 1
void         ssl_hook_CloseConnection(void *);
d627 1
d633 3
a635 2
/*  SSLeay callbacks */
RSA         *ssl_callback_TmpRSA(SSL *, int);
d637 1
d645 2
a646 1
void         ssl_scache_store(server_rec *, SSL_SESSION *, int);
d649 2
a650 1
void         ssl_scache_expire(server_rec *);
d653 2
a654 1
void         ssl_scache_dbm_store(server_rec *, ssl_scinfo_t *);
d657 9
a665 1
void         ssl_scache_dbm_expire(server_rec *);
d671 4
d691 4
a694 3
void         ssl_mutex_open(server_rec *, pool *);
void         ssl_mutex_on(void);
void         ssl_mutex_off(void);
d707 2
a708 1
void         ssl_log_open(server_rec *, pool *);
d720 4
a723 1
long         ssl_io_data_cb(BIO *, int, char *, int, long, long);
d748 2
d752 6
@


1.1.1.1
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d2 4
a5 4
**  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
** | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
** | | | | | | (_) | (_| |   \__ \__ \ |  www.modssl.org
** |_| |_| |_|\___/ \__,_|___|___/___/_|  ftp.modssl.org
d12 1
a12 1
 * Copyright (c) 1998-2001 Ralf S. Engelschall. All rights reserved.
d30 1
a30 1
 *     mod_ssl project (http://www.modssl.org/)."
d45 1
a45 1
 *     mod_ssl project (http://www.modssl.org/)."
a68 26
/* 
 * Check whether Extended API (EAPI) is enabled
 */
#ifndef EAPI
#error "mod_ssl requires Extended API (EAPI)"
#endif

/* 
 * Optionally enable the experimental stuff, but allow the user to
 * override the decision which experimental parts are included by using
 * CFLAGS="-DSSL_EXPERIMENTAL_xxxx_IGNORE".
 */
#ifdef SSL_EXPERIMENTAL
#ifndef SSL_EXPERIMENTAL_PERDIRCA_IGNORE
#define SSL_EXPERIMENTAL_PERDIRCA
#endif
#ifndef SSL_EXPERIMENTAL_PROXY_IGNORE
#define SSL_EXPERIMENTAL_PROXY
#endif
#ifdef SSL_ENGINE
#ifndef SSL_EXPERIMENTAL_ENGINE_IGNORE
#define SSL_EXPERIMENTAL_ENGINE
#endif
#endif
#endif /* SSL_EXPERIMENTAL */

a77 1
#include <sys/types.h>
a78 8
#include <time.h>
#ifndef WIN32
#include <sys/time.h>
#endif
#ifdef WIN32
#include <wincrypt.h>
#include <winsock2.h>
#endif
d80 8
a87 12
/* OpenSSL headers */
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/pem.h>
#include <openssl/crypto.h>
#include <openssl/evp.h>
#include <openssl/rand.h>
#ifdef SSL_EXPERIMENTAL_ENGINE
#include <openssl/engine.h>
#endif
a95 1
#include "http_request.h"
a99 1
#include "util_md5.h"
a105 1
#include "ssl_util_table.h"
d111 1
a111 1
#define FALSE (0)
d114 1
a114 7
#define TRUE (!FALSE)
#endif
#ifndef PFALSE
#define PFALSE ((void *)FALSE)
#endif
#ifndef PTRUE
#define PTRUE ((void *)TRUE)
d117 1
a117 1
#define UNSET (-1)
d120 1
a120 5
#define NUL '\0'
#endif
#ifndef RAND_MAX
#include <limits.h>
#define RAND_MAX INT_MAX
a150 1
#define cfgMergeCtx(el)     new->el = ap_ctx_overlay(p, add->el, base->el)
d192 1
d234 1
a234 7
#if defined(USE_SYSVSEM_SERIALIZED_ACCEPT) ||\
    (defined(__FreeBSD__) && defined(__FreeBSD_version) &&\
     __FreeBSD_version >= 300000) ||\
    (defined(LINUX) && defined(__GLIBC__) && defined(__GLIBC_MINOR__) &&\
     LINUX >= 2 && __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1) ||\
    defined(SOLARIS2) || defined(__hpux) ||\
    (defined (__digital__) && defined (__unix__))
a239 12
/* 
 * Some platforms have a `union semun' pre-defined but Single Unix
 * Specification (SUSv2) says in semctl(2): `If required, it is of
 * type union semun, which the application program must explicitly
 * declare'. So we define it always ourself to avoid problems (but under
 * a different name to avoid a namespace clash).
 */
union ssl_ipc_semun {
    long val;
    struct semid_ds *buf;
    unsigned short int *array;
};
a248 9
 * Support for MM library
 */
#ifndef WIN32
#define SSL_MM_FILE_MODE ( S_IRUSR|S_IWUSR )
#else
#define SSL_MM_FILE_MODE ( _S_IREAD|_S_IWRITE )
#endif

/*
d269 1
a269 1
#else /* !SSL_USE_SDBM */
d278 1
a278 5
#if !defined(SSL_DBM_FILE_SUFFIX_DIR) && !defined(SSL_DBM_FILE_SUFFIX_PAG)
#if defined(DBM_SUFFIX)
#define SSL_DBM_FILE_SUFFIX_DIR DBM_SUFFIX
#define SSL_DBM_FILE_SUFFIX_PAG DBM_SUFFIX
#elif defined(__FreeBSD__) || (defined(DB_LOCK) && defined(DB_SHMEM))
a285 1
#endif /* !SSL_USE_SDBM */
d288 2
a289 1
 * Check for OpenSSL version 
d291 5
a295 2
#if SSL_LIBRARY_VERSION < 0x00903100
#error "mod_ssl requires OpenSSL 0.9.3 or higher"
a314 29
 * Define the certificate algorithm types
 */

typedef int ssl_algo_t;

#define SSL_ALGO_UNKNOWN (0)
#define SSL_ALGO_RSA     (1<<0)
#define SSL_ALGO_DSA     (1<<1)
#define SSL_ALGO_ALL     (SSL_ALGO_RSA|SSL_ALGO_DSA)

#define SSL_AIDX_RSA     (0)
#define SSL_AIDX_DSA     (1)
#define SSL_AIDX_MAX     (2)

/*
 * Define IDs for the temporary RSA keys and DH params
 */

#define SSL_TKP_GEN        (0)
#define SSL_TKP_ALLOC      (1)
#define SSL_TKP_FREE       (2)

#define SSL_TKPIDX_RSA512  (0)
#define SSL_TKPIDX_RSA1024 (1)
#define SSL_TKPIDX_DH512   (2)
#define SSL_TKPIDX_DH1024  (3)
#define SSL_TKPIDX_MAX     (4)

/*
d319 4
a322 7
#define SSL_OPT_STDENVVARS     (1<<1)
#define SSL_OPT_COMPATENVVARS  (1<<2)
#define SSL_OPT_EXPORTCERTDATA (1<<3)
#define SSL_OPT_FAKEBASICAUTH  (1<<4)
#define SSL_OPT_STRICTREQUIRE  (1<<5)
#define SSL_OPT_OPTRENEGOTIATE (1<<6)
#define SSL_OPT_ALL            (SSL_OPT_STDENVVARS|SSL_OPT_COMPATENVVAR|SSL_OPT_EXPORTCERTDATA|SSL_OPT_FAKEBASICAUTH|SSL_OPT_STRICTREQUIRE|SSL_OPT_OPTRENEGOTIATE)
d328 1
d372 1
a372 2
    SSL_SCMODE_SHMHT = 2,
    SSL_SCMODE_SHMCB = 3
d375 8
a411 3
#if SSL_LIBRARY_VERSION >= 0x00905100
   ,SSL_RSSRC_EGD     = 4
#endif
d436 4
d441 2
a444 3
    int             nSessionCacheDataSize;
    AP_MM          *pSessionCacheDataMM;
    table_t        *tSessionCacheDataTable;
d450 1
a450 2
    ssl_ds_table   *tTmpKeys;
    void           *pTmpKeys[SSL_TKPIDX_MAX];
d453 4
a456 3
#ifdef SSL_EXPERIMENTAL_ENGINE
    char           *szCryptoDevice;
#endif
d458 1
a458 1
        void *pV1, *pV2, *pV3, *pV4, *pV5, *pV6, *pV7, *pV8, *pV9, *pV10;
a459 3
#ifdef SSL_VENDOR
    ap_ctx         *ctx;
#endif
d469 2
a470 3
    char        *szPublicCertFile[SSL_AIDX_MAX];
    char        *szPrivateKeyFile[SSL_AIDX_MAX];
    char        *szCertificateChain;
d479 2
a480 2
    X509        *pPublicCert[SSL_AIDX_MAX];
    EVP_PKEY    *pPrivateKey[SSL_AIDX_MAX];
a485 19
    char        *szCARevocationPath;
    char        *szCARevocationFile;
    X509_STORE  *pRevocationStore;
#ifdef SSL_EXPERIMENTAL_PROXY
    /* Configuration details for proxy operation */
    ssl_proto_t  nProxyProtocol;
    int          bProxyVerify;
    int          nProxyVerifyDepth;
    char        *szProxyCACertificatePath;
    char        *szProxyCACertificateFile;
    char        *szProxyClientCertificateFile;
    char        *szProxyClientCertificatePath;
    char        *szProxyCipherSuite;
    SSL_CTX     *pSSLProxyCtx;
    STACK_OF(X509_INFO) *skProxyClientCerts;
#endif
#ifdef SSL_VENDOR
    ap_ctx      *ctx;
#endif
d502 1
a502 1
#ifdef SSL_EXPERIMENTAL_PERDIRCA
a505 3
#ifdef SSL_VENDOR
    ap_ctx       *ctx;
#endif
a524 1
const char  *ssl_cmd_SSLCryptoDevice(cmd_parms *, char *, char *);
d526 1
a526 1
const char  *ssl_cmd_SSLEngine(cmd_parms *, char *, int);
a529 1
const char  *ssl_cmd_SSLCertificateChainFile(cmd_parms *, char *, char *);
d532 1
a532 3
const char  *ssl_cmd_SSLCARevocationPath(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLCARevocationFile(cmd_parms *, SSLDirConfigRec *, char *);
const char  *ssl_cmd_SSLVerifyClient(cmd_parms *, SSLDirConfigRec *, char *);
a541 10
#ifdef SSL_EXPERIMENTAL_PROXY
const char  *ssl_cmd_SSLProxyProtocol(cmd_parms *, char *, const char *);
const char  *ssl_cmd_SSLProxyCipherSuite(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyVerify(cmd_parms *, char *, int);
const char  *ssl_cmd_SSLProxyVerifyDepth(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyCACertificatePath(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyCACertificateFile(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyMachineCertificatePath(cmd_parms *, char *, char *);
const char  *ssl_cmd_SSLProxyMachineCertificateFile(cmd_parms *, char *, char *);
#endif
d545 3
a547 7
void         ssl_init_SSLLibrary(void);
void         ssl_init_Engine(server_rec *, pool *);
void         ssl_init_TmpKeysHandle(int, server_rec *, pool *);
void         ssl_init_ConfigureServer(server_rec *, pool *, SSLSrvConfigRec *);
void         ssl_init_CheckServers(server_rec *, pool *);
STACK_OF(X509_NAME) 
            *ssl_init_FindCAList(server_rec *, pool *, char *, char *);
a548 2
void         ssl_init_ChildKill(void *);
void         ssl_init_ModuleKill(void *);
d553 1
a553 1
char        *ssl_hook_RewriteCommand(cmd_parms *, void *, const char *);
d556 1
a556 2
void         ssl_hook_CloseConnection(conn_rec *);
int          ssl_hook_Translate(request_rec *);
a557 1
int          ssl_hook_UserCheck(request_rec *);
d563 2
a564 3
/*  OpenSSL callbacks */
RSA         *ssl_callback_TmpRSA(SSL *, int, int);
DH          *ssl_callback_TmpDH(SSL *, int, int);
a565 1
int          ssl_callback_SSLVerify_CRL(int, X509_STORE_CTX *, server_rec *);
a568 3
#if SSL_LIBRARY_VERSION >= 0x00907000
void         ssl_callback_LogTracingState(const SSL *, int, int);
#else
a569 1
#endif
d573 1
a573 2
void         ssl_scache_kill(server_rec *);
BOOL         ssl_scache_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
d575 1
a575 1
void         ssl_scache_remove(server_rec *, UCHAR *, int);
a576 1
void         ssl_scache_status(server_rec *, pool *, void (*)(char *, void *), void *);
d579 3
a581 4
void         ssl_scache_dbm_kill(server_rec *);
BOOL         ssl_scache_dbm_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_dbm_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_dbm_remove(server_rec *, UCHAR *, int);
a582 15
void         ssl_scache_dbm_status(server_rec *, pool *, void (*)(char *, void *), void *);
void         ssl_scache_shmht_init(server_rec *, pool *);
void         ssl_scache_shmht_kill(server_rec *);
BOOL         ssl_scache_shmht_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_shmht_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_shmht_remove(server_rec *, UCHAR *, int);
void         ssl_scache_shmht_expire(server_rec *);
void         ssl_scache_shmht_status(server_rec *, pool *, void (*)(char *, void *), void *);
void         ssl_scache_shmcb_init(server_rec *, pool *);
void         ssl_scache_shmcb_kill(server_rec *);
BOOL         ssl_scache_shmcb_store(server_rec *, UCHAR *, int, time_t, SSL_SESSION *);
SSL_SESSION *ssl_scache_shmcb_retrieve(server_rec *, UCHAR *, int);
void         ssl_scache_shmcb_remove(server_rec *, UCHAR *, int);
void         ssl_scache_shmcb_expire(server_rec *);
void         ssl_scache_shmcb_status(server_rec *, pool *, void (*)(char *, void *), void *);
a587 4
/*  Diffie-Hellman Parameter Support  */
DH           *ssl_dh_GetTmpParam(int);
DH           *ssl_dh_GetParamFromFile(char *);

d604 3
a606 4
void         ssl_mutex_reinit(server_rec *, pool *);
void         ssl_mutex_on(server_rec *);
void         ssl_mutex_off(server_rec *);
void         ssl_mutex_kill(server_rec *s);
d619 1
a619 2
void         ssl_log_open(server_rec *, server_rec *, pool *);
BOOL         ssl_log_applies(server_rec *, int);
d631 1
a631 4
long         ssl_io_data_cb(BIO *, int, const char *, int, long, long);
#ifndef SSL_CONSERVATIVE
void         ssl_io_suck(request_rec *, SSL *);
#endif
d634 1
a634 1
int          ssl_rand_seed(server_rec *, pool *, ssl_rsctx_t, char *);
a646 1
char        *ssl_util_server_root_relative(pool *, char *, char *);
a655 2
ssl_algo_t   ssl_util_algotypeof(X509 *, EVP_PKEY *); 
char        *ssl_util_algotypestr(ssl_algo_t);
a657 7
void         ssl_util_thread_cleanup(void);

/*  Vendor extension support  */
#if defined(SSL_VENDOR) && defined(SSL_VENDOR_OBJS)
void         ssl_vendor_register(void);
void         ssl_vendor_unregister(void);
#endif
@


1.1.1.2
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@d12 1
a12 1
 * Copyright (c) 1998-2003 Ralf S. Engelschall. All rights reserved.
@


