head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.60
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.56
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.54
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.52
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.50
	OPENBSD_5_0:1.3.0.48
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.46
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.44
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.40
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.42
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.38
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.36
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.34
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.32
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.30
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.28
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.3;

1.3
date	2000.01.28.18.39.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.36;	author henning;	state Exp;
branches;
next	;


desc
@@


1.4
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@#!/bin/sh
##
##  findcpp.sh -- Find out how to _directly_ run the C Pre-Processor (CPP)
##  Initially written by Ralf S. Engelschall for the Apache configuration
##   mechanism
##
#
# This script falls under the Apache License.
# See http://www.apache.org/docs/LICENSE


#   create a test C source:
#   - has to use extension ".c" because some CPP only accept this one
#   - uses assert.h because this is a standard header and harmless to include
#   - contains a Syntax Error to make sure it passes only the preprocessor
#     but not the real compiler pass
cat >conftest.c <<EOF
#include <assert.h>
Syntax Error
EOF

#   some braindead systems have a CPP define for a directory :-(
if [ "x$CPP" != "x" ]; then
    if [ -d "$CPP" ]; then
        CPP=''
    fi
fi
if [ "x$CPP" != "x" ]; then
    #   case 1: user provided a default CPP variable (we only check)
    (eval "$CPP conftest.c >/dev/null") 2>conftest.out
    my_error=`grep -v '^ *+' conftest.out`
    if [ "x$my_error" != "x" ]; then
        CPP=''
    fi
else
    #   case 2: no default CPP variable (we have to find one)
    #   1. try the standard -E option
    CPP="${CC-cc} -E"
    (eval "$CPP conftest.c >/dev/null") 2>conftest.out
    my_error=`grep -v '^ *+' conftest.out`
    if [ "x$my_error" != "x" ]; then
        #   2. try the -E option and GCC's -traditional-ccp option
        CPP="${CC-cc} -E -traditional-cpp"
        (eval "$CPP conftest.c >/dev/null") 2>conftest.out
        my_error=`grep -v '^ *+' conftest.out`
        if [ "x$my_error" != "x" ]; then
            #   3. try a standalone cpp command in $PATH and lib dirs
            CPP="`sh helpers/PrintPath cpp`"
            if [ "x$CPP" = "x" ]; then
                CPP="`sh helpers/PrintPath -p/lib:/usr/lib:/usr/local/lib cpp`"
            fi
            if [ "x$CPP" != "x" ]; then
                (eval "$CPP conftest.c >/dev/null") 2>conftest.out
                my_error=`grep -v '^ *+' conftest.out`
                if [ "x$my_error" != "x" ]; then
                    #   ok, we gave up...
                    CPP=''
                fi
            fi
        fi
    fi
fi

#   cleanup after work
rm -f conftest.*

#   Ok, empty CPP variable now means it's not available
if [ "x$CPP" = "x" ]; then
    CPP='NOT-AVAILABLE'
fi

echo $CPP

@


1.3
log
@Change Apache config tools to not assume certain files are executable,
and thus allow us to build from cvs trees checked out read only. - basically
ensure we call shell scripts by using ${SHELL} instead of ./.
from leonard@@csee.uq.edu.au

Building diffs of this (And some other stuff in Makefile.tmpl) to send
to slemko to see if apache will buy it back.
@
text
@@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d48 1
a48 1
            CPP="`./helpers/PrintPath cpp`"
d50 1
a50 1
                CPP="`./helpers/PrintPath -p/lib:/usr/lib:/usr/local/lib cpp`"
@


1.1
log
@Initial revision
@
text
@d4 2
a5 1
##  Written by Ralf S. Engelschall for the Apache configuration mechanism
d23 1
a23 1
if [ ".$CPP" != . ]; then
d28 1
a28 1
if [ ".$CPP" != . ]; then
d32 1
a32 1
    if [ ".$my_error" != . ]; then
d41 1
a41 1
    if [ ".$my_error" != . ]; then
d46 1
a46 1
        if [ ".$my_error" != . ]; then
d49 1
a49 1
            if [ ".$CPP" = . ]; then
d52 1
a52 1
            if [ ".$CPP" != . ]; then
d55 1
a55 1
                if [ ".$my_error" != . ]; then
d68 1
a68 1
if [ ".$CPP" = . ]; then
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d4 1
a4 2
##  Initially written by Ralf S. Engelschall for the Apache configuration
##   mechanism
d22 1
a22 1
if [ "x$CPP" != "x" ]; then
d27 1
a27 1
if [ "x$CPP" != "x" ]; then
d31 1
a31 1
    if [ "x$my_error" != "x" ]; then
d40 1
a40 1
    if [ "x$my_error" != "x" ]; then
d45 1
a45 1
        if [ "x$my_error" != "x" ]; then
d48 1
a48 1
            if [ "x$CPP" = "x" ]; then
d51 1
a51 1
            if [ "x$CPP" != "x" ]; then
d54 1
a54 1
                if [ "x$my_error" != "x" ]; then
d67 1
a67 1
if [ "x$CPP" = "x" ]; then
@

