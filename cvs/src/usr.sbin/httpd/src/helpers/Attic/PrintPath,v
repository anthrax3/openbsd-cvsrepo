head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.62
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.58
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.56
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.54
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.52
	OPENBSD_5_0:1.3.0.50
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.48
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.46
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.42
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.44
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.40
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.38
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.36
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.34
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.32
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.30
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.28
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.26
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.24
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.22
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.20
	OPENBSD_3_5_BASE:1.3
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.3.0.18
	OPENBSD_3_4_BASE:1.3
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.3.0.16
	OPENBSD_3_3_BASE:1.3
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.3;

1.3
date	99.09.29.06.29.24;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.44;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.49;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.49;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.37;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.36;	author henning;	state Exp;
branches;
next	;


desc
@@


1.4
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@#!/bin/sh
# Look for program[s] somewhere in $PATH.
#
# Options:
#  -s
#    Do not print out full pathname. (silent)
#  -pPATHNAME
#    Look in PATHNAME instead of $PATH
#
# Usage:
#  PrintPath [-s] [-pPATHNAME] program [program ...]
#
# Initially written by Jim Jagielski for the Apache configuration mechanism
#  (with kudos to Kernighan/Pike)
#
# This script falls under the Apache License.
# See http://www.apache.org/docs/LICENSE

##
# Some "constants"
##
pathname=$PATH
echo="yes"

##
# Find out what OS we are running for later on
##
os=`(uname) 2>/dev/null`

##
# Parse command line
##
for args in $*
do
    case $args in
	-s  ) echo="no" ;;
	-p* ) pathname="`echo $args | sed 's/^..//'`" ;;
	*   ) programs="$programs $args" ;;
    esac
done

##
# Now we make the adjustments required for OS/2 and everyone
# else :)
#
# First of all, all OS/2 programs have the '.exe' extension.
# Next, we adjust PATH (or what was given to us as PATH) to
# be whitespace seperated directories.
# Finally, we try to determine the best flag to use for
# test/[] to look for an executable file. OS/2 just has '-r'
# but with other OSs, we do some funny stuff to check to see
# if test/[] knows about -x, which is the prefered flag.
##

if [ "x$os" = "xOS/2" ]
then
    ext=".exe"
    pathname=`echo -E $pathname |
     sed 's/^;/.;/
	  s/;;/;.;/g
	  s/;$/;./
	  s/;/ /g
	  s/\\\\/\\//g' `
    test_exec_flag="-r"
else
    ext=""	# No default extensions
    pathname=`echo $pathname |
     sed 's/^:/.:/
	  s/::/:.:/g
	  s/:$/:./
	  s/:/ /g' `
    # Here is how we test to see if test/[] can handle -x
    testfile="pp.t.$$"

    cat > $testfile <<ENDTEST
#!/bin/sh
if [ -x / ] || [ -x /bin ] || [ -x /bin/ls ]; then
    exit 0
fi
exit 1
ENDTEST

    if `/bin/sh $testfile 2>/dev/null`; then
	test_exec_flag="-x"
    else
	test_exec_flag="-r"
    fi
    rm -f $testfile
fi

for program in $programs
do
    for path in $pathname
    do
	if [ $test_exec_flag $path/${program}${ext} ] && \
	   [ ! -d $path/${program}${ext} ]; then
	    if [ "x$echo" = "xyes" ]; then
		echo $path/${program}${ext}
	    fi
	    exit 0
	fi
    done
done
exit 1

@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@@


1.2
log
@Apache 1.3.4 merge
@
text
@d13 3
d97 1
a97 1
	    if [ "$echo" = "yes" ]; then
@


1.1
log
@Initial revision
@
text
@d2 1
a2 3
# Look for $1 somewhere in $PATH
#  will print out the full pathname unless
#  called with the '-s' option
d4 5
a8 2
# We do some funny stuff to check to see
# if test/[] knows about -x
d10 28
a37 1
testfile="pp.t.$$"
d39 34
a72 1
cat > $testfile <<ENDTEST
d75 1
a75 1
 exit 0
d80 6
a85 4
if `/bin/sh $testfile 2>/dev/null`; then
    test_exec_flag="-x"
else
    test_exec_flag="-r"
a86 1
rm -f $testfile
d88 1
a88 11
if [ "x$1" = "x-s" ]; then
    shift
else
    echo="yes"
fi

for path in `echo $PATH |
 sed 's/^:/.:/
      s/::/:.:/g
      s/:$/:./
      s/:/ /g' `
d90 8
a97 3
    if [ $test_exec_flag $path/$1 ] && [ ! -d $path/$1 ]; then
        if [ "$echo" = "yes" ]; then
	    echo $path/$1
d99 1
a99 2
	exit 0
    fi
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d2 3
a4 1
# Look for program[s] somewhere in $PATH.
d6 2
a7 5
# Options:
#  -s
#    Do not print out full pathname. (silent)
#  -pPATHNAME
#    Look in PATHNAME instead of $PATH
d9 1
a9 63
# Usage:
#  PrintPath [-s] [-pPATHNAME] program [program ...]
#
# Blame Jim; he wrote it.
#
# This script falls under the Apache License.
# See http://www.apache.org/docs/LICENSE

##
# Some "constants"
##
pathname=$PATH
echo="yes"

##
# Find out what OS we are running for later on
##
os=`(uname) 2>/dev/null`

##
# Parse command line
##
for args in $*
do
    case $args in
	-s  ) echo="no" ;;
	-p* ) pathname="`echo $args | sed 's/^..//'`" ;;
	*   ) programs="$programs $args" ;;
    esac
done

##
# Now we make the adjustments required for OS/2 and everyone
# else :)
#
# First of all, all OS/2 programs have the '.exe' extension.
# Next, we adjust PATH (or what was given to us as PATH) to
# be whitespace seperated directories.
# Finally, we try to determine the best flag to use for
# test/[] to look for an executable file. OS/2 just has '-r'
# but with other OSs, we do some funny stuff to check to see
# if test/[] knows about -x, which is the prefered flag.
##

if [ "x$os" = "xOS/2" ]
then
    ext=".exe"
    pathname=`echo -E $pathname |
     sed 's/^;/.;/
	  s/;;/;.;/g
	  s/;$/;./
	  s/;/ /g
	  s/\\\\/\\//g' `
    test_exec_flag="-r"
else
    ext=""	# No default extensions
    pathname=`echo $pathname |
     sed 's/^:/.:/
	  s/::/:.:/g
	  s/:$/:./
	  s/:/ /g' `
    # Here is how we test to see if test/[] can handle -x
    testfile="pp.t.$$"
d11 1
a11 1
    cat > $testfile <<ENDTEST
d14 1
a14 1
    exit 0
d19 11
a29 6
    if `/bin/sh $testfile 2>/dev/null`; then
	test_exec_flag="-x"
    else
	test_exec_flag="-r"
    fi
    rm -f $testfile
d32 5
a36 1
for program in $programs
d38 3
a40 8
    for path in $pathname
    do
	if [ $test_exec_flag $path/${program}${ext} ] && \
	   [ ! -d $path/${program}${ext} ]; then
	    if [ "$echo" = "yes" ]; then
		echo $path/${program}${ext}
	    fi
	    exit 0
d42 2
a43 1
    done
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d13 1
a13 2
# Initially written by Jim Jagielski for the Apache configuration mechanism
#  (with kudos to Kernighan/Pike)
d96 1
a96 1
	    if [ "x$echo" = "xyes" ]; then
@


