head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.52
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.48
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.46
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.44
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.42
	OPENBSD_5_0:1.7.0.40
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.38
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.36
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.32
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.34
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.30
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.28
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.26
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.24
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.22
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.20
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.18
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.16
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.14
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.12
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2002.02.12.07.56.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.22.17.55;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.28.18.39.58;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.40;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.24;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.46;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.36;	author henning;	state Exp;
branches;
next	;


desc
@@


1.8
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@#!/bin/sh
exstat=1
trap 'rm -f Makefile dummy ../dummy.o dummy.exe testfunc.c testfunc ../testfunc.o testfunc.exe; exit $exstat' 0 1 2 3 15
#
# Yet another Apache Configure helper script.
# This script tests certain aspects of the compilation
# process. Right now, it can perform 5 tests:
#
# ./helpers/TestCompile lib <libname>
#    Which checks to see if <libname> exists on this system
#
# ./helpers/TestCompile lib <libname> <func>
#    Which checks to see if <libname> exists on this system and
#    contains func.
#
# ./helpers/TestCompile func <function>
#    Which checks to see if <function> exists
#
# ./helpers/TestCompile header <header>
#    Which checks to see if header file <header> exists
#
# ./helpers/TestCompile sanity
#    Which does a simple sanity check/test compile
#
# ./helpers/TestCompile sizeof <type>
#    Which prints out the sizeof <type> (sure would be nice
#    if sizeof could be use in preprocessor if's)
#
# ./helpers/TestCompile byteorder
#    Which prints out the byte order of the machine
#    (12: little endian, 21: big endian)
#
# It does these by creating a small mini-makefile, based on
# ../Makefile.config and trying to compile a small dummy
# program. If the compilation succeeds, we assume the test
# was successful as well.
#
# This must be run as './helpers/TestCompile' from
# the ./src directory (same directory that Configure is
# located) if you want to test it out. Configure must
# also call it as './helpers/TestCompile'
#
#
# INVOCATION SWITCHES:
# TestCompile evaluates the following switches
# (currently, it accepts only *ONE* of them!):
#
#  -v (enable verbose operation)
#   Enables VERBOSE=yes, see below.
#
#  -s (enforce silent operation)
#   Override a VERBOSE=yes, force it to VERBOSE=no.
#
#  -r (run generated test program)
#   Enables TCRUNIT=yes, see below
#
#  
# ENVIRONMENT VARIABLES:
# The following environment variables have influence on
# TestCompile's operation:
#
#  $VERBOSE (yes|no; default=no)
#    If set to "yes", will print compiler messages to stderr
#    Otherwise, stderr of all invoked programs is sent to /dev/null
#
#  $TCRUNIT (yes|no; default=no)
#    (This variable is obsoleted by the "-r" switch)
#    If set to "yes", will invoke the test program which was
#    generated by TestCompile. Useful for "TestCompile sizeof"
#    and "TestCompile byteorder" tests.
#    Otherwise, TestCompile only tests for the presence of a
#    generated program when deciding whether the compilation was
#    successful.
#
#  $TCADDINCL (#include <> stmt list; default=empty)
#    If set to an "#include <file>" preprocessor directive
#    (optionally several #include's separated by newlines), these
#    directives will be added to the generated test sources.
#    That allows, e.g., the "TestCompile sizeof" test to check for
#    types which are not defined in the standard locations.
#
#  $TLIB (additional libraries; default=empty)
#    If set to a list of additional libraries, these libs will be used
#    in addition to the one tested by the "TestCompile lib" call.
#    For the other TestCompile tests, it is ignored.
#
#
# Initially written by Jim Jagielski for the Apache configuration mechanism
#
# This script falls under the Apache License.
# See http://www.apache.org/docs/LICENSE


cd ./helpers

#
# Handle "verbose", "silent" and "runit" flags. Allow for them
# to be set via the environment
#
if [ "x$VERBOSE" = "x" ]; then
    VERBOSE="no"
fi
if [ "x$TCRUNIT" = "x" ]; then
    TCRUNIT="no";
fi
case "$1" in
    "-v")
        VERBOSE="yes"
	shift
	;;
    "-s")
        VERBOSE="no"
	shift
	;;
    "-r")
        TCRUNIT="yes"
	shift
	;;
esac

#
# Make sure we have the right arguments
#

case "$1" in
    "lib")
	if [ "x$2" = "x" ]; then
	    exit
	fi
	TLIB="-l$2 $TLIB"
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	if [ "x$3" = "x" ]; then
	    TARGET='dummy'
	else
	    TARGET='testfunc'
	    echo "int main(void) { $3(); return(0); }" > testfunc.c
	fi
	;;
    "sizeof")
	if [ "x$2" = "x" ]; then
	    exit
	fi
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
#include <stdio.h>
#include <sys/types.h>
$TCADDINCL
int main(void) {
    printf("%d\n", sizeof($2));
    return(0);
}
EOF
	;;
    "byteorder")
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
#include <stdio.h>
#include <sys/types.h>
$TCADDINCL
int main(void) {
    /* Are we little or big endian? From Harbison & Steele */
    union {
        long l;
        char c[sizeof(long)];
    } u;
    u.l = 1;
    printf("%s\n", u.c[sizeof(long)-1] == 1 ? "21" : "12");
    return(0);
}
EOF
	;;
    "sanity")
	TLIB=""
	if [ "x$VERBOSE" = "xno" ]; then
	    ERRDIR='2>/dev/null'
	else
	    ERRDIR=""
	fi
	TARGET='dummy'
	;;
    "func")
	if [ "x$2" = "x" ]; then
	    exit
	fi
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
$TCADDINCL
int main(void) {
    $2();
    return(0);
}
EOF
	;;
    "header")
	if [ "x$2" = "x" ]; then
	    exit
	fi
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
$TCADDINCL
#include <$2>
int main(void) {
    return(0);
}
EOF
	;;
    *)
    	exit
	;;
esac

#
# Get makefile settings and build a basic Makefile
#
rm -f dummy ../dummy.o testfunc ../testfunc.o

cat ../Makefile.config > Makefile
cat <<EOF >> Makefile
CFLAGS=\$(OPTIM) \$(CFLAGS1) \$(EXTRA_CFLAGS)
LIBS=\$(EXTRA_LIBS) \$(LIBS1)
INCLUDES=\$(INCLUDES1) \$(EXTRA_INCLUDES)
LDFLAGS=\$(LDFLAGS1) \$(EXTRA_LDFLAGS)

dummy:
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) -o helpers/dummy helpers/dummy.c $TLIB \$(LIBS)

testfunc:
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) -o helpers/testfunc helpers/testfunc.c $TLIB \$(LIBS)
EOF

# Now run that Makefile
eval "${MAKE-make} ${TARGET} $ERRDIR >&2"

# And see if dummy exists and is executable, if so, then we
# assume the condition we are testing for is good
#
# Use our PrintPath helper script using the "-p" option to
# have PrintPath just search this directory.

if sh PrintPath -s -p`pwd` $TARGET ; then
    if [ "x$OS" = "xMPE/iX" ]; then
	# clever hack to check for unresolved externals without actually
	# executing the test program 
	if eval "callci run `pwd`/$TARGET\;stdin=\*notfound 2>&1 | /bin/grep ^UNRESOLVED $ERRDIR >&2"; then
	    exit 1 # there were unresolved externals
	fi
    fi
    if [ "x$TCRUNIT" = "xyes" ]; then
	`pwd`/$TARGET
    fi
    exstat=0
fi

@


1.7
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@@


1.6
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d85 1
a85 1
#    For the other TextCompile tests, it is ignored.
@


1.5
log
@Change Apache config tools to not assume certain files are executable,
and thus allow us to build from cvs trees checked out read only. - basically
ensure we call shell scripts by using ${SHELL} instead of ./.
from leonard@@csee.uq.edu.au

Building diffs of this (And some other stuff in Makefile.tmpl) to send
to slemko to see if apache will buy it back.
@
text
@d43 45
d122 1
a122 1
# Make sure have the right arguments
d157 1
d175 1
d209 1
d228 1
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d219 1
a219 1
if ./PrintPath -s -p`pwd` $TARGET ; then
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d3 1
a3 1
trap 'rm -f Makefile dummy dummy.exe testfunc.c testfunc testfunc.exe; exit $exstat' 0 1 2 3 15
d194 2
a195 1
rm -f dummy
d204 1
a204 1
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) helpers/dummy.c -o helpers/dummy $TLIB \$(LIBS)
d207 1
a207 1
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) helpers/testfunc.c -o helpers/testfunc $TLIB \$(LIBS)
d220 7
d232 1
@


1.2
log
@Apache 1.3.4 merge
@
text
@d25 8
d43 2
d52 2
a53 1
# Handle "verbose" and "silent" flags
d55 6
d70 4
d85 2
a86 2
	TLIB="-l$2"
	if [ "$VERBOSE" = "yes" ]; then
d98 43
d143 1
a143 1
	if [ "$VERBOSE" = "no" ]; then
d155 1
a155 1
	if [ "$VERBOSE" = "yes" ]; then
d173 1
a173 1
	if [ "$VERBOSE" = "yes" ]; then
d210 1
a210 1
eval "${MAKE} ${TARGET} >/dev/null $ERRDIR"
d219 3
@


1.1
log
@Initial revision
@
text
@a34 2
# Blame Jim; he wrote it (along with a cast of dozens).
#
d146 1
a146 1
eval "make $TARGET >/dev/null $ERRDIR"
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d3 1
a3 1
trap 'rm -f Makefile dummy ../dummy.o dummy.exe testfunc.c testfunc ../testfunc.o testfunc.exe; exit $exstat' 0 1 2 3 15
a24 8
# ./helpers/TestCompile sizeof <type>
#    Which prints out the sizeof <type> (sure would be nice
#    if sizeof could be use in preprocessor if's)
#
# ./helpers/TestCompile byteorder
#    Which prints out the byte order of the machine
#    (12: little endian, 21: big endian)
#
d35 1
a35 46
#
# INVOCATION SWITCHES:
# TestCompile evaluates the following switches
# (currently, it accepts only *ONE* of them!):
#
#  -v (enable verbose operation)
#   Enables VERBOSE=yes, see below.
#
#  -s (enforce silent operation)
#   Override a VERBOSE=yes, force it to VERBOSE=no.
#
#  -r (run generated test program)
#   Enables TCRUNIT=yes, see below
#
#  
# ENVIRONMENT VARIABLES:
# The following environment variables have influence on
# TestCompile's operation:
#
#  $VERBOSE (yes|no; default=no)
#    If set to "yes", will print compiler messages to stderr
#    Otherwise, stderr of all invoked programs is sent to /dev/null
#
#  $TCRUNIT (yes|no; default=no)
#    (This variable is obsoleted by the "-r" switch)
#    If set to "yes", will invoke the test program which was
#    generated by TestCompile. Useful for "TestCompile sizeof"
#    and "TestCompile byteorder" tests.
#    Otherwise, TestCompile only tests for the presence of a
#    generated program when deciding whether the compilation was
#    successful.
#
#  $TCADDINCL (#include <> stmt list; default=empty)
#    If set to an "#include <file>" preprocessor directive
#    (optionally several #include's separated by newlines), these
#    directives will be added to the generated test sources.
#    That allows, e.g., the "TestCompile sizeof" test to check for
#    types which are not defined in the standard locations.
#
#  $TLIB (additional libraries; default=empty)
#    If set to a list of additional libraries, these libs will be used
#    in addition to the one tested by the "TestCompile lib" call.
#    For the other TestCompile tests, it is ignored.
#
#
# Initially written by Jim Jagielski for the Apache configuration mechanism
d44 1
a44 2
# Handle "verbose", "silent" and "runit" flags. Allow for them
# to be set via the environment
a45 6
if [ "x$VERBOSE" = "x" ]; then
    VERBOSE="no"
fi
if [ "x$TCRUNIT" = "x" ]; then
    TCRUNIT="no";
fi
a54 4
    "-r")
        TCRUNIT="yes"
	shift
	;;
d58 1
a58 1
# Make sure we have the right arguments
d66 2
a67 2
	TLIB="-l$2 $TLIB"
	if [ "x$VERBOSE" = "xyes" ]; then
a78 45
    "sizeof")
	if [ "x$2" = "x" ]; then
	    exit
	fi
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
#include <stdio.h>
#include <sys/types.h>
$TCADDINCL
int main(void) {
    printf("%d\n", sizeof($2));
    return(0);
}
EOF
	;;
    "byteorder")
	TLIB=""
	if [ "x$VERBOSE" = "xyes" ]; then
	    ERRDIR=""
	else
	    ERRDIR='2>/dev/null'
	fi
	TARGET='testfunc'
	cat <<EOF >testfunc.c
#include <stdio.h>
#include <sys/types.h>
$TCADDINCL
int main(void) {
    /* Are we little or big endian? From Harbison & Steele */
    union {
        long l;
        char c[sizeof(long)];
    } u;
    u.l = 1;
    printf("%s\n", u.c[sizeof(long)-1] == 1 ? "21" : "12");
    return(0);
}
EOF
	;;
d81 1
a81 1
	if [ "x$VERBOSE" = "xno" ]; then
d93 1
a93 1
	if [ "x$VERBOSE" = "xyes" ]; then
a99 1
$TCADDINCL
d111 1
a111 1
	if [ "x$VERBOSE" = "xyes" ]; then
a117 1
$TCADDINCL
d132 1
a132 2
rm -f dummy ../dummy.o testfunc ../testfunc.o

d141 1
a141 1
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) -o helpers/dummy helpers/dummy.c $TLIB \$(LIBS)
d144 1
a144 1
	cd ..; \$(CC) \$(CFLAGS) \$(INCLUDES) \$(LDFLAGS) -o helpers/testfunc helpers/testfunc.c $TLIB \$(LIBS)
d148 1
a148 1
eval "${MAKE-make} ${TARGET} $ERRDIR >&2"
a156 10
    if [ "x$OS" = "xMPE/iX" ]; then
	# clever hack to check for unresolved externals without actually
	# executing the test program 
	if eval "callci run `pwd`/$TARGET\;stdin=\*notfound 2>&1 | /bin/grep ^UNRESOLVED $ERRDIR >&2"; then
	    exit 1 # there were unresolved externals
	fi
    fi
    if [ "x$TCRUNIT" = "xyes" ]; then
	`pwd`/$TARGET
    fi
a158 1

@

