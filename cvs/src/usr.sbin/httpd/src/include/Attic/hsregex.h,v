head	1.8;
access;
symbols
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2006.04.04.11.39.28;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2005.03.28.23.26.51;	author niallo;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.02.19.42.46;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.02.08.05;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.57;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.30;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.53;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.38;	author henning;	state Exp;
branches;
next	;


desc
@@


1.8
log
@nuke bundled regex lib, we have and always used the OpenBSD one of course
From: Daniel Ouellet <daniel@@presscom.net>
@
text
@/* $OpenBSD: hsregex.h,v 1.7 2005/03/28 23:26:51 niallo Exp $ */

/* DON'T EVEN THINK ABOUT EDITING THIS, go see regex/Makefile,
 * search for mkh */
#ifndef _REGEX_H_
#define	_REGEX_H_	/* never again */
/* ========= begin header generated by ./mkh ========= */
#ifdef __cplusplus
extern "C" {
#endif

/* === regex2.h === */
#ifndef API_EXPORT
#define API_EXPORT(type)    type
#endif

#undef ap_private_extern
#define ap_private_extern

typedef off_t regoff_t;
typedef struct {
	int re_magic;
	size_t re_nsub;		/* number of parenthesized subexpressions */
	const char *re_endp;	/* end pointer for REG_PEND */
	struct re_guts *re_g;	/* none of your business :-) */
} regex_t;
typedef struct {
	regoff_t rm_so;		/* start of match */
	regoff_t rm_eo;		/* end of match */
} regmatch_t;


/* === regcomp.c === */
API_EXPORT(int) regcomp(regex_t *, const char *, int);
#define	REG_BASIC	0000
#define	REG_EXTENDED	0001
#define	REG_ICASE	0002
#define	REG_NOSUB	0004
#define	REG_NEWLINE	0010
#define	REG_NOSPEC	0020
#define	REG_PEND	0040
#define	REG_DUMP	0200


/* === regerror.c === */
#define	REG_NOMATCH	 1
#define	REG_BADPAT	 2
#define	REG_ECOLLATE	 3
#define	REG_ECTYPE	 4
#define	REG_EESCAPE	 5
#define	REG_ESUBREG	 6
#define	REG_EBRACK	 7
#define	REG_EPAREN	 8
#define	REG_EBRACE	 9
#define	REG_BADBR	10
#define	REG_ERANGE	11
#define	REG_ESPACE	12
#define	REG_BADRPT	13
#define	REG_EMPTY	14
#define	REG_ASSERT	15
#define	REG_INVARG	16
#define	REG_ATOI	255	/* convert name to number (!) */
#define	REG_ITOA	0400	/* convert number to name (!) */
API_EXPORT(size_t) regerror(int, const regex_t *, char *, size_t);


/* === regexec.c === */
API_EXPORT(int) regexec(const regex_t *, const char *, size_t, regmatch_t [], int);
#define	REG_NOTBOL	00001
#define	REG_NOTEOL	00002
#define	REG_STARTEND	00004
#define	REG_TRACE	00400	/* tracing of execution */
#define	REG_LARGE	01000	/* force large representation */
#define	REG_BACKR	02000	/* force use of backref code */


/* === regfree.c === */
API_EXPORT(void) regfree(regex_t *);

#ifdef __cplusplus
}
#endif
/* ========= end header generated by ./mkh ========= */
#endif
@


1.7
log
@KNF

no binary changes.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.6
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@d1 2
@


1.5
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@a11 3
#ifdef WIN32
#define API_EXPORT(type)    __declspec(dllexport) type __stdcall
#else
a13 1
#endif
a15 3
#if defined(MAC_OS) || defined(MAC_OS_X_SERVER) || (defined(DARWIN) && defined(__DYNAMIC__))
#define ap_private_extern __private_extern__
#else
a16 1
#endif
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d19 2
a20 2
#ifndef ap_private_extern
#if defined(DARWIN)
a23 1
#endif
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d19 2
a20 1
#if defined(MAC_OS) || defined(MAC_OS_X_SERVER)
d24 1
@


1.2
log
@Apache 1.3.4 merge
@
text
@d19 1
a19 1
#if defined(RHAPSODY)
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
#if defined(RHAPSODY) || defined(NEXT)
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d19 1
a19 2
#undef ap_private_extern
#if defined(MAC_OS) || defined(MAC_OS_X_SERVER) || (defined(DARWIN) && defined(__DYNAMIC__))
@

