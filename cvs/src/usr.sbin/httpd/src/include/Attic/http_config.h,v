head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.38
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.34
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.32
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.30
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.28
	OPENBSD_5_0:1.12.0.26
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.24
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.22
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.18
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.20
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.12;

1.12
date	2005.03.28.23.26.51;	author niallo;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.02.19.42.46;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.21.13.11.35;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.29.02.08.05;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.12.07.56.49;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.29.10.21.40;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.15.22.17.59;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.09.29.06.29.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.03.01.04.28.33;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.54;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.38;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.38;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.07.19.48.12;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.38;	author henning;	state Exp;
branches;
next	;


desc
@@


1.13
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: http_config.h,v 1.12 2005/03/28 23:26:51 niallo Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

#ifndef APACHE_HTTP_CONFIG_H
#define APACHE_HTTP_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

/*
 * The central data structures around here...
 */

/* Command dispatch structures... */

/* Note that for all of these except RAW_ARGS, the config routine is
 * passed a freshly allocated string which can be modified or stored
 * or whatever... it's only necessary to do pstrdup() stuff with
 * RAW_ARGS.
 */
enum cmd_how {
	RAW_ARGS,		/* cmd_func parses command line itself */
	TAKE1,			/* one argument only */
	TAKE2,			/* two arguments only */
	ITERATE,		/* one argument, occuring multiple times
				 * (e.g., IndexIgnore)
				 */
	ITERATE2,		/* two arguments, 2nd occurs multiple times
				 * (e.g., AddIcon)
				 */
	FLAG,			/* One of 'On' or 'Off' */
	NO_ARGS,		/* No args at all, e.g. </Directory> */
	TAKE12,			/* one or two arguments */
	TAKE3,			/* three arguments only */
	TAKE23,			/* two or three arguments */
	TAKE123,		/* one, two or three arguments */
	TAKE13			/* one or three arguments */
};

typedef struct command_struct {
	const char *name;		/* Name of this command */
	const char *(*func) ();	/* Function invoked */
	void *cmd_data;		/* Extra data, for functions which
				 * implement multiple commands...
				 */
	int req_override;	/* What overrides need to be allowed to
				 * enable this command.
				 */
	enum cmd_how args_how;	/* What the command expects as arguments */

	const char *errmsg;	/* 'usage' message, in case of syntax errors */
} command_rec;

/* The allowed locations for a configuration directive are the union of
 * those indicated by each set bit in the req_override mask.
 *
 * (req_override & RSRC_CONF)   => *.conf outside <Directory> or <Location>
 * (req_override & ACCESS_CONF) => *.conf inside <Directory> or <Location>
 * (req_override & OR_AUTHCFG)  => *.conf inside <Directory> or <Location>
 *                                 and .htaccess when AllowOverride AuthConfig
 * (req_override & OR_LIMIT)    => *.conf inside <Directory> or <Location>
 *                                 and .htaccess when AllowOverride Limit
 * (req_override & OR_OPTIONS)  => *.conf anywhere
 *                                 and .htaccess when AllowOverride Options
 * (req_override & OR_FILEINFO) => *.conf anywhere
 *                                 and .htaccess when AllowOverride FileInfo
 * (req_override & OR_INDEXES)  => *.conf anywhere
 *                                 and .htaccess when AllowOverride Indexes
 */
#define OR_NONE 0
#define OR_LIMIT 1
#define OR_OPTIONS 2
#define OR_FILEINFO 4
#define OR_AUTHCFG 8
#define OR_INDEXES 16
#define OR_UNSET 32
#define ACCESS_CONF 64
#define RSRC_CONF 128
#define OR_ALL (OR_LIMIT|OR_OPTIONS|OR_FILEINFO|OR_AUTHCFG|OR_INDEXES)

/* This can be returned by a function if they don't wish to handle
 * a command. Make it something not likely someone will actually use
 * as an error code.
 */

#define DECLINE_CMD "\a\b"

/*
 * This structure is passed to a command which is being invoked,
 * to carry a large variety of miscellaneous data which is all of
 * use to *somebody*...
 */

typedef struct {
	void *info;		/* Argument to command from cmd_table */
	int override;		/* Which allow-override bits are set */
	int limited;		/* Which methods are <Limit>ed */

			      /* Config file structure from pcfg_openfile() */
	configfile_t *config_file;

	ap_pool *pool;			/* Pool to allocate new storage in */
	struct pool *temp_pool;	/* Pool for scratch memory; persists during
				 * configuration, but wiped before the first
				 * request is served...
				 */
	server_rec *server;		/* Server_rec being configured for */
	char *path;			/* If configuring for a directory,
				 * pathname of that directory.
				 * NOPE!  That's what it meant previous to the
				 * existance of <Files>, <Location> and regex
				 * matching.  Now the only usefulness that can
			* be derived from this field is whether a command
			 * is being called in a server context (path == NULL)
			 * or being called in a dir context (path != NULL).
				 */
	const command_rec *cmd;	/* configuration command */
	const char *end_token;	/* end token required to end a nested section */
	void *context;		/* per_dir_config vector passed 
				 * to handle_command */
} cmd_parms;

/* This structure records the existence of handlers in a module... */

typedef struct {
    const char *content_type;	/* MUST be all lower case */
    int (*handler) (request_rec *);
} handler_rec;

/*
 * Module structures.  Just about everything is dispatched through
 * these, directly or indirectly (through the command and handler
 * tables).
 */

typedef struct module_struct {
	int version;		/* API version, *not* module version;
				 * check that module is compatible with this
				 * version of the server.
				 */
	int minor_version;          /* API minor version. Provides API feature
				 * milestones. Not checked during module init
				 */
	int module_index;	/* Index to this modules structures in
				 * config vectors.
				 */

	const char *name;
	void *dynamic_load_handle;

	struct module_struct *next;

	unsigned long magic;    /* Magic Cookie to identify a module structure;
				 * It's mainly important for the DSO facility
				 * (see also mod_so).
				 */

	/* init() occurs after config parsing, but before any children are
	* forked.
	* Modules should not rely on the order in which create_server_config
	* and create_dir_config are called.
	*/
	void (*init) (server_rec *, pool *);
	void *(*create_dir_config) (pool *p, char *dir);
	void *(*merge_dir_config) (pool *p, void *base_conf, void *new_conf);
	void *(*create_server_config) (pool *p, server_rec *s);
	void *(*merge_server_config) (pool *p, void *base_conf, void *new_conf);

	const command_rec *cmds;
	const handler_rec *handlers;

	/* Hooks for getting into the middle of server ops...

	* translate_handler --- translate URI to filename
	* access_checker --- check access by host address, etc.   All of these
	*                    run; if all decline, that's still OK.
	* check_user_id --- get and validate user id from the HTTP request
	* auth_checker --- see if the user (from check_user_id) is OK *here*.
	*                  If all of *these* decline, the request is rejected
	*                  (as a SERVER_ERROR, since the module which was
	*                  supposed to handle this was configured wrong).
	* type_checker --- Determine MIME type of the requested entity;
	*                  sets content_type, _encoding and _language fields.
	* logger --- log a transaction.
        * post_read_request --- run right after read_request or
	*                internal_redirect, and not run during any subrequests.
	*/

	int (*translate_handler) (request_rec *);
	int (*ap_check_user_id) (request_rec *);
	int (*auth_checker) (request_rec *);
	int (*access_checker) (request_rec *);
	int (*type_checker) (request_rec *);
	int (*fixer_upper) (request_rec *);
	int (*logger) (request_rec *);
	int (*header_parser) (request_rec *);

	/* Regardless of the model the server uses for managing "units of
	* execution", i.e. multi-process, multi-threaded, hybrids of those,
	* there is the concept of a "heavy weight process".  That is, a
	* process with its own memory space, file spaces, etc.  This method,
	* child_init, is called once for each heavy-weight process before
	* any requests are served.  Note that no provision is made yet for
	* initialization per light-weight process (i.e. thread).  The
	* parameters passed here are the same as those passed to the global
	* init method above.
	*/
	void (*child_init) (server_rec *, pool *);
	void (*child_exit) (server_rec *, pool *);
	int (*post_read_request) (request_rec *);

	/*
	* ANSI C guarantees us that we can at least extend the module structure
	* with additional hooks without the need to change all existing modules.
	* Because: ``If there are fewer initializers in the list than members of
	* the structure, the trailing members are initialized with 0.'' (The C
	* Programming Language, 2nd Ed., A8.7 Initialization). So we just
	* have to put our additional hooks here:
	*
	* add_module:
	*     Called from within ap_add_module() right after the module
	*     structure was linked into the Apache internal module list.
	*     It is mainly intended to be used to define configuration defines
	*     (<IfDefine>) which have to be available directly after a
	*     LoadModule/AddModule. Actually this is the earliest possible
	*     hook a module can use.
	*
	* remove_module:
	*     Called from within ap_remove_module() right before the module
	*     structure is kicked out from the Apache internal module list.
	*     Actually this is last possible hook a module can use and exists
	*     for consistency with the add_module hook.
	*
	* rewrite_command:
	*     Called right after a configuration directive line was read and
	*     before it is processed. It is mainly intended to be used for
	*     rewriting directives in order to provide backward compatibility to
	*     old directive variants.
	*
	* new_connection:
	*     Called from within the internal new_connection() function, right
	*     after the conn_rec structure for the new established connection
	*     was created and before Apache starts processing the request with
	*     ap_read_request().  It is mainly intended to be used to setup/run
	*     connection dependent things like sending start headers for
	*     on-the-fly compression, etc.
	*
	* close_connection:
	*     Called from within the Apache dispatching loop just before any
	*     ap_bclose() is performed on the socket connection, but a long time
	*     before any pool cleanups are done for the connection (which can be
	*     too late for some applications).  It is mainly intended to be used
	*     to close/finalize connection dependent things like sending end
	*     headers for on-the-fly compression, etc.
	*/
	void  (*add_module) (struct module_struct *);
	void  (*remove_module) (struct module_struct *);
	char *(*rewrite_command) (cmd_parms *, void *config, const char *);
	void  (*new_connection) (conn_rec *);
	void  (*close_connection) (conn_rec *);
} module;

/* Initializer for the first few module slots, which are only
 * really set up once we start running.  Note that the first two slots
 * provide a version check; this should allow us to deal with changes to
 * the API. The major number should reflect changes to the API handler table
 * itself or removal of functionality. The minor number should reflect
 * additions of functionality to the existing API. (the server can detect
 * an old-format module, and either handle it back-compatibly, or at least
 * signal an error). See src/include/ap_mmn.h for MMN version history.
 */

#define STANDARD_MODULE_STUFF	MODULE_MAGIC_NUMBER_MAJOR, \
				MODULE_MAGIC_NUMBER_MINOR, \
				-1, \
				__FILE__, \
				NULL, \
				NULL, \
				MODULE_MAGIC_COOKIE

/* Generic accessors for other modules to get at their own module-specific
 * data
 */

API_EXPORT(void *) ap_get_module_config(void *conf_vector, module *m);
API_EXPORT(void) ap_set_module_config(void *conf_vector, module *m, void *val);

#define ap_get_module_config(v,m)	\
    (((void **)(v))[(m)->module_index])
#define ap_set_module_config(v,m,val)	\
    ((((void **)(v))[(m)->module_index]) = (val))

/* Generic command handling function... */

API_EXPORT_NONSTD(const char *) ap_set_string_slot(cmd_parms *, char *, char *);
API_EXPORT_NONSTD(const char *) ap_set_string_slot_lower(cmd_parms *, char *,
    char *);
API_EXPORT_NONSTD(const char *) ap_set_flag_slot(cmd_parms *, char *, int);
API_EXPORT_NONSTD(const char *) ap_set_file_slot(cmd_parms *, char *, char *);

/* For modules which need to read config files, open logs, etc. ...
 * this returns the fname argument if it begins with '/'; otherwise
 * it relativizes it wrt server_root.
 */

API_EXPORT(char *) ap_server_root_relative(pool *p, char *fname);

/* Finally, the hook for dynamically loading modules in... */

API_EXPORT(void) ap_add_module(module *m);
API_EXPORT(void) ap_remove_module(module *m);
API_EXPORT(void) ap_add_loaded_module(module *mod);
API_EXPORT(void) ap_remove_loaded_module(module *mod);
API_EXPORT(int) ap_add_named_module(const char *name);
API_EXPORT(void) ap_clear_module_list(void);
API_EXPORT(const char *) ap_find_module_name(module *m);
API_EXPORT(module *) ap_find_linked_module(const char *name);

/* for implementing subconfigs and customized config files */
API_EXPORT(const char *) ap_srm_command_loop(cmd_parms *parms, void *config);

#ifdef CORE_PRIVATE

extern API_VAR_EXPORT module *top_module;

extern module *ap_prelinked_modules[];
extern module *ap_preloaded_modules[];
extern API_VAR_EXPORT module **ap_loaded_modules;

/* For mod_so.c... */

API_EXPORT(void) ap_single_module_configure(pool *p, server_rec *s, module *m);

/* For http_main.c... */

API_EXPORT(server_rec *) ap_read_config(pool *conf_pool, pool *temp_pool,
    char *config_name);
API_EXPORT(void) ap_init_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_child_init_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_child_exit_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_setup_prelinked_modules(void);
API_EXPORT(void) ap_show_directives(void);
API_EXPORT(void) ap_show_modules(void);
void ap_cleanup_method_ptrs(void);

/* For http_request.c... */

CORE_EXPORT(void *) ap_create_request_config(pool *p);
CORE_EXPORT(void *) ap_create_per_dir_config(pool *p);
CORE_EXPORT(void *) ap_merge_per_dir_configs(pool *p, void *base, void *new);

/* For http_core.c... (<Directory> command and virtual hosts) */

CORE_EXPORT(int) ap_parse_htaccess(void **result, request_rec *r, int override,
    const char *path, const char *access_name);

CORE_EXPORT(const char *) ap_init_virtual_host(pool *p, const char *hostname,
    server_rec *main_server, server_rec **);
CORE_EXPORT(void) ap_process_resource_config(server_rec *s, char *fname,
    pool *p, pool *ptemp);

/* ap_check_cmd_context() definitions: */
API_EXPORT(const char *) ap_check_cmd_context(cmd_parms *cmd,
    unsigned forbidden);

/* ap_check_cmd_context():              Forbidden in: */
#define  NOT_IN_VIRTUALHOST     0x01 /* <Virtualhost> */
#define  NOT_IN_LIMIT           0x02 /* <Limit> */
#define  NOT_IN_DIRECTORY       0x04 /* <Directory> */
#define  NOT_IN_LOCATION        0x08 /* <Location> */
#define  NOT_IN_FILES           0x10 /* <Files> */
#define  NOT_IN_DIR_LOC_FILE    (NOT_IN_DIRECTORY|NOT_IN_LOCATION|NOT_IN_FILES) /* <Directory>/<Location>/<Files>*/
#define  GLOBAL_ONLY      (NOT_IN_VIRTUALHOST|NOT_IN_LIMIT|NOT_IN_DIR_LOC_FILE)


/* Module-method dispatchers, also for http_request.c */

API_EXPORT(int) ap_translate_name(request_rec *);
/* check access on non-auth basis */
API_EXPORT(int) ap_check_access(request_rec *);
/* obtain valid username from client auth */
API_EXPORT(int) ap_check_user_id(request_rec *);
/* check (validated) user is authorized here */
API_EXPORT(int) ap_check_auth(request_rec *);
/* identify MIME type */
API_EXPORT(int) ap_find_types(request_rec *);
/* poke around for other metainfo, etc.... */
API_EXPORT(int) ap_run_fixups(request_rec *);
API_EXPORT(int) ap_invoke_handler(request_rec *);
API_EXPORT(int) ap_log_transaction(request_rec *r);
API_EXPORT(int) ap_header_parse(request_rec *);
API_EXPORT(int) ap_run_post_read_request(request_rec *);

/* for mod_perl */

CORE_EXPORT(const command_rec *) ap_find_command(const char *name,
    const command_rec *cmds);
CORE_EXPORT(const command_rec *) ap_find_command_in_modules(const char
    *cmd_name, module **mod);
CORE_EXPORT(void *) ap_set_config_vectors(cmd_parms *parms, void *config,
    module *mod);
CORE_EXPORT(const char *) ap_handle_command(cmd_parms *parms, void *config,
    const char *l);

#endif

#ifdef __cplusplus
}
#endif

#endif	/* !APACHE_HTTP_CONFIG_H */
@


1.12
log
@KNF

no binary changes.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.11
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d1 2
d80 4
a83 4
    RAW_ARGS,			/* cmd_func parses command line itself */
    TAKE1,			/* one argument only */
    TAKE2,			/* two arguments only */
    ITERATE,			/* one argument, occuring multiple times
d86 1
a86 1
    ITERATE2,			/* two arguments, 2nd occurs multiple times
d89 7
a95 7
    FLAG,			/* One of 'On' or 'Off' */
    NO_ARGS,			/* No args at all, e.g. </Directory> */
    TAKE12,			/* one or two arguments */
    TAKE3,			/* three arguments only */
    TAKE23,			/* two or three arguments */
    TAKE123,			/* one, two or three arguments */
    TAKE13			/* one or three arguments */
d99 3
a101 3
    const char *name;		/* Name of this command */
    const char *(*func) ();	/* Function invoked */
    void *cmd_data;		/* Extra data, for functions which
d104 1
a104 1
    int req_override;		/* What overrides need to be allowed to
d107 1
a107 1
    enum cmd_how args_how;	/* What the command expects as arguments */
d109 1
a109 1
    const char *errmsg;		/* 'usage' message, in case of syntax errors */
d153 3
a155 3
    void *info;			/* Argument to command from cmd_table */
    int override;		/* Which allow-override bits are set */
    int limited;		/* Which methods are <Limit>ed */
d157 2
a158 1
    configfile_t *config_file;	/* Config file structure from pcfg_openfile() */
d160 2
a161 2
    ap_pool *pool;			/* Pool to allocate new storage in */
    struct pool *temp_pool;		/* Pool for scratch memory; persists during
d165 2
a166 2
    server_rec *server;		/* Server_rec being configured for */
    char *path;			/* If configuring for a directory,
d171 3
a173 3
				 * be derived from this field is whether a command
				 * is being called in a server context (path == NULL)
				 * or being called in a dir context (path != NULL).
d175 3
a177 3
    const command_rec *cmd;	/* configuration command */
    const char *end_token;	/* end token required to end a nested section */
    void *context;		/* per_dir_config vector passed 
d195 1
a195 1
    int version;		/* API version, *not* module version;
d199 2
a200 2
    int minor_version;          /* API minor version. Provides API feature
                                 * milestones. Not checked during module init
d202 1
a202 1
    int module_index;		/* Index to this modules structures in
d206 4
a209 2
    const char *name;
    void *dynamic_load_handle;
d211 4
a214 1
    struct module_struct *next;
d216 103
a318 107
    unsigned long magic;        /* Magic Cookie to identify a module structure;
                                 * It's mainly important for the DSO facility
                                 * (see also mod_so).
                                 */

    /* init() occurs after config parsing, but before any children are
     * forked.
     * Modules should not rely on the order in which create_server_config
     * and create_dir_config are called.
     */
    void (*init) (server_rec *, pool *);
    void *(*create_dir_config) (pool *p, char *dir);
    void *(*merge_dir_config) (pool *p, void *base_conf, void *new_conf);
    void *(*create_server_config) (pool *p, server_rec *s);
    void *(*merge_server_config) (pool *p, void *base_conf, void *new_conf);

    const command_rec *cmds;
    const handler_rec *handlers;

    /* Hooks for getting into the middle of server ops...

     * translate_handler --- translate URI to filename
     * access_checker --- check access by host address, etc.   All of these
     *                    run; if all decline, that's still OK.
     * check_user_id --- get and validate user id from the HTTP request
     * auth_checker --- see if the user (from check_user_id) is OK *here*.
     *                  If all of *these* decline, the request is rejected
     *                  (as a SERVER_ERROR, since the module which was
     *                  supposed to handle this was configured wrong).
     * type_checker --- Determine MIME type of the requested entity;
     *                  sets content_type, _encoding and _language fields.
     * logger --- log a transaction.
     * post_read_request --- run right after read_request or internal_redirect,
     *                  and not run during any subrequests.
     */

    int (*translate_handler) (request_rec *);
    int (*ap_check_user_id) (request_rec *);
    int (*auth_checker) (request_rec *);
    int (*access_checker) (request_rec *);
    int (*type_checker) (request_rec *);
    int (*fixer_upper) (request_rec *);
    int (*logger) (request_rec *);
    int (*header_parser) (request_rec *);

    /* Regardless of the model the server uses for managing "units of
     * execution", i.e. multi-process, multi-threaded, hybrids of those,
     * there is the concept of a "heavy weight process".  That is, a
     * process with its own memory space, file spaces, etc.  This method,
     * child_init, is called once for each heavy-weight process before
     * any requests are served.  Note that no provision is made yet for
     * initialization per light-weight process (i.e. thread).  The
     * parameters passed here are the same as those passed to the global
     * init method above.
     */
    void (*child_init) (server_rec *, pool *);
    void (*child_exit) (server_rec *, pool *);
    int (*post_read_request) (request_rec *);

    /*
     * ANSI C guarantees us that we can at least _extend_ the module structure
     * with additional hooks without the need to change all existing modules.
     * Because: ``If there are fewer initializers in the list than members of
     * the structure, the trailing members are initialized with 0.'' (The C
     * Programming Language, 2nd Ed., A8.7 Initialization). So we just
     * have to put our additional hooks here:
     *
     * add_module: 
     *     Called from within ap_add_module() right after the module structure
     *     was linked into the Apache internal module list.  It is mainly
     *     intended to be used to define configuration defines (<IfDefine>)
     *     which have to be available directly after a LoadModule/AddModule.
     *     Actually this is the earliest possible hook a module can use.
     *
     * remove_module: 
     *     Called from within ap_remove_module() right before the module
     *     structure is kicked out from the Apache internal module list.
     *     Actually this is last possible hook a module can use and exists for
     *     consistency with the add_module hook.
     *
     * rewrite_command:
     *     Called right after a configuration directive line was read and
     *     before it is processed. It is mainly intended to be used for
     *     rewriting directives in order to provide backward compatibility to
     *     old directive variants.
     *
     * new_connection:
     *     Called from within the internal new_connection() function, right
     *     after the conn_rec structure for the new established connection was
     *     created and before Apache starts processing the request with
     *     ap_read_request().  It is mainly intended to be used to setup/run
     *     connection dependent things like sending start headers for
     *     on-the-fly compression, etc.
     *
     * close_connection:
     *     Called from within the Apache dispatching loop just before any
     *     ap_bclose() is performed on the socket connection, but a long time
     *     before any pool cleanups are done for the connection (which can be
     *     too late for some applications).  It is mainly intended to be used
     *     to close/finalize connection dependent things like sending end
     *     headers for on-the-fly compression, etc.
     */
    void  (*add_module) (struct module_struct *);
    void  (*remove_module) (struct module_struct *);
    char *(*rewrite_command) (cmd_parms *, void *config, const char *);
    void  (*new_connection) (conn_rec *);
    void  (*close_connection) (conn_rec *);
d354 2
a355 1
API_EXPORT_NONSTD(const char *) ap_set_string_slot_lower(cmd_parms *, char *, char *);
d394 2
a395 1
API_EXPORT(server_rec *) ap_read_config(pool *conf_pool, pool *temp_pool, char *config_name);
d413 1
a413 1
		const char *path, const char *access_name);
d416 3
a418 2
				server_rec *main_server, server_rec **);
CORE_EXPORT(void) ap_process_resource_config(server_rec *s, char *fname, pool *p, pool *ptemp);
d421 2
a422 1
API_EXPORT(const char *) ap_check_cmd_context(cmd_parms *cmd, unsigned forbidden);
d431 1
a431 1
#define  GLOBAL_ONLY            (NOT_IN_VIRTUALHOST|NOT_IN_LIMIT|NOT_IN_DIR_LOC_FILE)
d437 10
a446 5
API_EXPORT(int) ap_check_access(request_rec *);	/* check access on non-auth basis */
API_EXPORT(int) ap_check_user_id(request_rec *);	/* obtain valid username from client auth */
API_EXPORT(int) ap_check_auth(request_rec *);	/* check (validated) user is authorized here */
API_EXPORT(int) ap_find_types(request_rec *);	/* identify MIME type */
API_EXPORT(int) ap_run_fixups(request_rec *);	/* poke around for other metainfo, etc.... */
d454 8
a461 4
CORE_EXPORT(const command_rec *) ap_find_command(const char *name, const command_rec *cmds);
CORE_EXPORT(const command_rec *) ap_find_command_in_modules(const char *cmd_name, module **mod);
CORE_EXPORT(void *) ap_set_config_vectors(cmd_parms *parms, void *config, module *mod);
CORE_EXPORT(const char *) ap_handle_command(cmd_parms *parms, void *config, const char *l);
@


1.10
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a266 1
#ifdef EAPI
a314 1
#endif /* EAPI */
@


1.9
log
@merge
@
text
@a217 7
#ifdef ULTRIX_BRAIN_DEATH
    void (*init) ();
    void *(*create_dir_config) ();
    void *(*merge_dir_config) ();
    void *(*create_server_config) ();
    void *(*merge_server_config) ();
#else
a222 1
#endif
a262 4
#ifdef ULTRIX_BRAIN_DEATH
    void (*child_init) ();
    void (*child_exit) ();
#else
a264 1
#endif
a310 7
#ifdef ULTRIX_BRAIN_DEATH
    void  (*add_module) ();
    void  (*remove_module) ();
    char *(*rewrite_command) ();
    void  (*new_connection) ();
    void  (*close_connection) ();
#else
a315 1
#endif
@


1.8
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.7
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
@


1.6
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d408 1
a408 1
void ap_single_module_configure(pool *p, server_rec *s, module *m);
d412 7
a418 7
server_rec *ap_read_config(pool *conf_pool, pool *temp_pool, char *config_name);
void ap_init_modules(pool *p, server_rec *s);
void ap_child_init_modules(pool *p, server_rec *s);
void ap_child_exit_modules(pool *p, server_rec *s);
void ap_setup_prelinked_modules(void);
void ap_show_directives(void);
void ap_show_modules(void);
d423 1
a423 1
void *ap_create_request_config(pool *p);
d425 1
a425 1
void *ap_merge_per_dir_configs(pool *p, void *base, void *new);
d429 1
a429 1
int ap_parse_htaccess(void **result, request_rec *r, int override,
d434 1
a434 1
void ap_process_resource_config(server_rec *s, char *fname, pool *p, pool *ptemp);
d451 10
a460 10
int ap_translate_name(request_rec *);
int ap_check_access(request_rec *);	/* check access on non-auth basis */
int ap_check_user_id(request_rec *);	/* obtain valid username from client auth */
int ap_check_auth(request_rec *);	/* check (validated) user is authorized here */
int ap_find_types(request_rec *);	/* identify MIME type */
int ap_run_fixups(request_rec *);	/* poke around for other metainfo, etc.... */
int ap_invoke_handler(request_rec *);
int ap_log_transaction(request_rec *r);
int ap_header_parse(request_rec *);
int ap_run_post_read_request(request_rec *);
@


1.5
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.4
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d418 1
@


1.3
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d173 2
d314 8
d328 1
d334 1
a407 1
void ap_single_module_init(pool *p, server_rec *s, module *m);
d464 1
@


1.2
log
@Apache 1.3.4 merge
@
text
@d276 49
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
a200 1

d205 5
d293 2
a294 1
				NULL
d344 5
d374 1
a374 1
/* check_cmd_context() definitions: */
d377 1
a377 1
/* check_cmd_context():                  Forbidden in: */
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
a172 2
    void *context;		/* per_dir_config vector passed 
				 * to handle_command */
d201 1
a205 5
    unsigned long magic;        /* Magic Cookie to identify a module structure;
                                 * It's mainly important for the DSO facility
                                 * (see also mod_so).
                                 */

d289 1
a289 2
				NULL, \
				MODULE_MAGIC_COOKIE
a338 4
/* For mod_so.c... */

API_EXPORT(void) ap_single_module_configure(pool *p, server_rec *s, module *m);

d341 7
a347 8
API_EXPORT(server_rec *) ap_read_config(pool *conf_pool, pool *temp_pool, char *config_name);
API_EXPORT(void) ap_init_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_child_init_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_child_exit_modules(pool *p, server_rec *s);
API_EXPORT(void) ap_setup_prelinked_modules(void);
API_EXPORT(void) ap_show_directives(void);
API_EXPORT(void) ap_show_modules(void);
void ap_cleanup_method_ptrs(void);
d351 1
a351 1
CORE_EXPORT(void *) ap_create_request_config(pool *p);
d353 1
a353 1
CORE_EXPORT(void *) ap_merge_per_dir_configs(pool *p, void *base, void *new);
d357 1
a357 1
CORE_EXPORT(int) ap_parse_htaccess(void **result, request_rec *r, int override,
d362 1
a362 1
CORE_EXPORT(void) ap_process_resource_config(server_rec *s, char *fname, pool *p, pool *ptemp);
d364 1
a364 1
/* ap_check_cmd_context() definitions: */
d367 1
a367 1
/* ap_check_cmd_context():              Forbidden in: */
d379 10
a388 10
API_EXPORT(int) ap_translate_name(request_rec *);
API_EXPORT(int) ap_check_access(request_rec *);	/* check access on non-auth basis */
API_EXPORT(int) ap_check_user_id(request_rec *);	/* obtain valid username from client auth */
API_EXPORT(int) ap_check_auth(request_rec *);	/* check (validated) user is authorized here */
API_EXPORT(int) ap_find_types(request_rec *);	/* identify MIME type */
API_EXPORT(int) ap_run_fixups(request_rec *);	/* poke around for other metainfo, etc.... */
API_EXPORT(int) ap_invoke_handler(request_rec *);
API_EXPORT(int) ap_log_transaction(request_rec *r);
API_EXPORT(int) ap_header_parse(request_rec *);
API_EXPORT(int) ap_run_post_read_request(request_rec *);
a393 1
CORE_EXPORT(void *) ap_set_config_vectors(cmd_parms *parms, void *config, module *mod);
@


1.1.1.3
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@a278 59

#ifdef EAPI
    /*
     * ANSI C guarantees us that we can at least _extend_ the module structure
     * with additional hooks without the need to change all existing modules.
     * Because: ``If there are fewer initializers in the list than members of
     * the structure, the trailing members are initialized with 0.'' (The C
     * Programming Language, 2nd Ed., A8.7 Initialization). So we just
     * have to put our additional hooks here:
     *
     * add_module: 
     *     Called from within ap_add_module() right after the module structure
     *     was linked into the Apache internal module list.  It is mainly
     *     intended to be used to define configuration defines (<IfDefine>)
     *     which have to be available directly after a LoadModule/AddModule.
     *     Actually this is the earliest possible hook a module can use.
     *
     * remove_module: 
     *     Called from within ap_remove_module() right before the module
     *     structure is kicked out from the Apache internal module list.
     *     Actually this is last possible hook a module can use and exists for
     *     consistency with the add_module hook.
     *
     * rewrite_command:
     *     Called right after a configuration directive line was read and
     *     before it is processed. It is mainly intended to be used for
     *     rewriting directives in order to provide backward compatibility to
     *     old directive variants.
     *
     * new_connection:
     *     Called from within the internal new_connection() function, right
     *     after the conn_rec structure for the new established connection was
     *     created and before Apache starts processing the request with
     *     ap_read_request().  It is mainly intended to be used to setup/run
     *     connection dependent things like sending start headers for
     *     on-the-fly compression, etc.
     *
     * close_connection:
     *     Called from within the Apache dispatching loop just before any
     *     ap_bclose() is performed on the socket connection, but a long time
     *     before any pool cleanups are done for the connection (which can be
     *     too late for some applications).  It is mainly intended to be used
     *     to close/finalize connection dependent things like sending end
     *     headers for on-the-fly compression, etc.
     */
#ifdef ULTRIX_BRAIN_DEATH
    void  (*add_module) ();
    void  (*remove_module) ();
    char *(*rewrite_command) ();
    void  (*new_connection) ();
    void  (*close_connection) ();
#else
    void  (*add_module) (struct module_struct *);
    void  (*remove_module) (struct module_struct *);
    char *(*rewrite_command) (cmd_parms *, void *config, const char *);
    void  (*new_connection) (conn_rec *);
    void  (*close_connection) (conn_rec *);
#endif
#endif /* EAPI */
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


