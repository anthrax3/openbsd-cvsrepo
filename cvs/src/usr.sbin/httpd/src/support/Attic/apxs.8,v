head	1.16;
access;
symbols
	OPENBSD_5_5:1.15.0.30
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.26
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.24
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.22
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.20
	OPENBSD_5_0:1.15.0.18
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.16
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.14
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.10
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.12
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.8
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.6
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.4
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.2
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.14.0.10
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.8
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@.\" @;


1.16
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.15;

1.15
date	2007.05.31.19.20.24;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.20.23.31.52;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.07.22.00.04;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.07.15.48.57;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.21.13.11.40;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.29.16.53.36;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.29.02.08.08;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.22.07.42.03;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.25.18.30.18;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.18.21.49.02;	author aaron;	state Exp;
branches;
next	1.5;

1.5
date	99.09.29.06.30.07;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.09.23.04.12.10;	author alex;	state Exp;
branches;
next	1.3;

1.3
date	99.06.05.22.16.52;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.07.18;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.22;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.45;	author henning;	state Exp;
branches;
next	;


desc
@@


1.16
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@.\"	$OpenBSD: apxs.8,v 1.15 2007/05/31 19:20:24 jmc Exp $
.\"
.\" ====================================================================
.\" The Apache Software License, Version 1.1
.\"
.\" Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
.\" reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. The end-user documentation included with the redistribution,
.\"    if any, must include the following acknowledgment:
.\"       "This product includes software developed by the
.\"        Apache Software Foundation (http://www.apache.org/)."
.\"    Alternately, this acknowledgment may appear in the software itself,
.\"    if and wherever such third-party acknowledgments normally appear.
.\"
.\" 4. The names "Apache" and "Apache Software Foundation" must
.\"    not be used to endorse or promote products derived from this
.\"    software without prior written permission. For written
.\"    permission, please contact apache@@apache.org.
.\"
.\" 5. Products derived from this software may not be called "Apache",
.\"    nor may "Apache" appear in their name, without prior written
.\"    permission of the Apache Software Foundation.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
.\" WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" ====================================================================
.\"
.\" This software consists of voluntary contributions made by many
.\" individuals on behalf of the Apache Software Foundation.  For more
.\" information on the Apache Software Foundation, please see
.\" <http://www.apache.org/>.
.\"
.\" Portions of this software are based upon public domain software
.\" originally written at the National Center for Supercomputing Applications,
.\" University of Illinois, Urbana-Champaign.
.\"
.Dd $Mdocdate: May 31 2007 $
.Dt APXS 8
.Os
.Sh NAME
.Nm apxs
.Nd APache eXtenSion tool
.Sh SYNOPSIS
.Nm
.Bk -words
.Fl c
.Xo
.Oo Fl D
.Ar variable Ns Oo = Ns Ar value Oc Oc
.Xc
.Op Fl I Ar incdir
.Op Fl L Ar libdir
.Op Fl l Ar libname
.No \ \&\ \& Op Fl o Ar dsofile
.Xo
.Oo Fl S
.Ar variable Ns = Ns Ar value Oc
.Xc
.Op Fl Wc , Ns Ar compiler-flags
.No \ \&\ \& Op Fl Wl , Ns Ar linker-flags
.Ar file ...
.Ek
.Nm
.Fl e
.Op Fl Aa
.Op Fl n Ar name
.Xo
.Oo Fl S
.Ar variable Ns = Ns Ar value Oc
.Xc
.Ar dsofile ...
.Nm
.Fl g
.Xo
.Oo Fl S
.Ar variable Ns = Ns Ar value Oc
.Xc
.Fl n Ar name
.Nm
.Fl i
.Op Fl Aa
.Op Fl n Ar name
.Xo
.Oo Fl S
.Ar variable Ns = Ns Ar value Oc
.Xc
.Ar dsofile ...
.Nm
.Fl q
.Xo
.Oo Fl S
.Ar variable Ns = Ns Ar value Oc
.Xc
.Ar query ...
.Sh DESCRIPTION
.Nm
is a tool for building and installing extension modules for the
Apache HyperText Transfer Protocol (HTTP) server,
.Xr httpd 8 .
This is achieved by building a
Dynamic Shared Object (DSO)
from one or more source or object files
which can then be loaded into httpd at runtime via the
.Ic LoadModule
directive from
.Ic mod_so .
To use this extension mechanism,
your platform has to support the DSO feature
and the httpd binary has to be built with the
.Ic mod_so
module.
The
.Nm
tool automatically complains if this is not the case.
Check by manually running the following command:
.Pp
.Dl $ httpd -l
.Pp
The module
.Ic mod_so
should be part of the displayed list.
If these requirements are fulfilled,
httpd's functionality can be extended by
installing modules with the DSO mechanism,
with the help of the
.Nm
tool:
.Bd -literal -offset indent
# apxs -i -a -c mod_foo.c
cc -O2 -pipe -DDEV_RANDOM=/dev/arandom -DMOD_SSL=208116 -DEAPI -DUSE_EXPAT -I../lib/expat-lite -DUSE_SETUSERCONTEXT -fPIC -DSHARED_MODULE -I/usr/lib/apache/include  -c mod_foo.c
[activating module `foo' in /var/www/conf/httpd.conf]
cp mod_foo.so /usr/lib/apache/modules/mod_foo.so
chmod 755 /usr/lib/apache/modules/mod_foo.so
cp /var/www/conf/httpd.conf /var/www/conf/httpd.conf.bak
cp /var/www/conf/httpd.conf.new /var/www/conf/httpd.conf
rm /var/www/conf/httpd.conf.new
# apachectl restart
/usr/sbin/apachectl restart: httpd not running, trying to start
/usr/sbin/apachectl restart: httpd started
.Ed
.Pp
The argument
.Ar file
can be any C source file (.c),
an object file (.o),
or even a library archive (.a).
The
.Nm
tool automatically recognizes these extensions and automatically uses the C
source files for compilation,
whereas it just uses the object and archive files for the linking phase.
But when using such pre-compiled objects,
make sure they are compiled for Position Independent Code (PIC)
to be able to use them for a DSO.
For instance, with
.Xr cc 1
just use
.Fl fpic .
For other
C compilers, please consult their manual pages or watch for the flags
.Nm
uses to compile the object files.
.Pp
For more details about DSO support in Apache,
first read the background information about DSO in
.Pa htdocs/manual/dso.html ,
then read the documentation of
.Ic mod_so .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
Same as the
.Fl a
option but the created
.Ic LoadModule
directive is prefixed with a hash sign (#),
i.e. the module is just prepared for later activation but initially disabled.
.It Fl a
This activates the module by automatically adding a corresponding
.Ic LoadModule
line to Apache's httpd.conf configuration file,
or by enabling it if it already exists.
.It Fl c
Compile.
This option first compiles the C source files (.c) of
.Ar file ...\&
into corresponding object files (.o) and then builds a DSO in
.Ar dsofile
by linking these object files plus the remaining object files (.o and .a) of
.Ar file ...
If no
.Fl o
option is specified,
the output file is guessed from the first filename in
.Ar file ...\&
and thus usually defaults to
.No mod_ Ns Ar name Ns \&.so
.It Xo
.Fl D
.Ar variable Ns Op = Ns Ar value
.Xc
This option is directly passed through to the compilation command(s).
Use this to add your own defines to the build process.
.It Fl e
Edit.
This option can be used with the
.Fl a
and
.Fl A
options to edit the
configuration file,
.Pa /var/www/conf/httpd.conf ,
without attempting to install the module.
.It Fl g
Template generation.
This option generates a subdirectory
.Ar name
(see the
.Fl n
option)
and two files:
a sample module source file named
.No mod_ Ns Ar name Ns \&.c ,
which can be used as a template for creating your own modules or
as a quick start for playing with the
.Nm
mechanism,
and a corresponding
.Pa Makefile
for even easier building and installing of this module.
.It Fl I Ar incdir
This option is directly passed through to the compilation command(s).
Use this to add your own include directories to search to the build process.
.It Fl i
Install.
This option installs one or more DSOs into the server's
.Ar libexec
directory.
.It Fl L Ar libdir
This option is directly passed through to the linker command.
Use this to add your own library directories to search to the build process.
.It Fl l Ar libname
This option is directly passed through to the linker command.
Use this to add your own libraries to search to the build process.
.It Fl n Ar name
This explicitly sets the module name for the
.Fl i
(install)
and
.Fl g
(template generation) option.
Use this to explicitly specify the module name.
For option
.Fl g
this is required;
for option
.Fl i ,
.Nm
tries to determine the name from the source or (as a fallback) at least
by guessing it from the filename.
.It Fl o Ar dsofile
Explicitly specifies the filename of the created DSO file.
If not specified and the name cannot be guessed from the
.Ar file ...\&
list,
the fallback name
.Ar mod_unknown.so
is used.
.It Fl q
Query.
This option performs a query for
.Nm apxs Ns 's
knowledge about certain settings.
The
.Ar query
parameters can be one or more of the following variable names:
.Bd -literal -offset indent
CC              TARGET
CFLAGS          SBINDIR
CFLAGS_SHLIB    INCLUDEDIR
LD_SHLIB        LIBEXECDIR
LDFLAGS_SHLIB   SYSCONFDIR
LIBS_SHLIB      PREFIX
.Ed
.Pp
Use this for manually determining settings.
For instance,
use the following inside your own Makefiles if you need manual access
to Apache's C header files:
.Pp
.Dl INC=-I`apxs -q INCLUDEDIR`
.It Fl S Ar variable Ns = Ns Ar value
This option changes the
.Nm
settings described above.
.It Fl Wc , Ns Ar compiler-flags
This option passes
.Ar compiler-flags
as additional flags to the compiler command.
Use this to add local compiler-specific options.
This option may be specified multiple times
in order to pass multiple flags.
.It Fl Wl , Ns Ar linker-flags
This option passes
.Ar linker-flags
as additional flags to the linker command.
Use this to add local linker-specific options.
This option may be specified multiple times
in order to pass multiple flags.
.El
.Sh EXAMPLES
Assume you have a module named
.Dq mod_foo.c
available which should extend httpd's functionality.
To accomplish this,
first compile the C source into a DSO
suitable for loading into httpd at runtime via the following command:
.Bd -literal -offset indent
# apxs -c mod_foo.c
cc -O2 -pipe -DDEV_RANDOM=/dev/arandom -DMOD_SSL=208116 -DEAPI -DUSE_EXPAT -I../lib/expat-lite -DUSE_SETUSERCONTEXT -fPIC -DSHARED_MODULE -I/usr/lib/apache/include  -c mod_foo.c
cc -shared -fPIC -DSHARED_MODULE -o mod_foo.so mod_foo.o
.Ed
.Pp
Then a
.Ic LoadModule
directive has to be added to httpd's configuration file to load the DSO.
To simplify this step,
.Nm
provides an automatic way to install the DSO in the
.Dq libexec
directory and update the httpd.conf file accordingly.
This can be achieved by running the following:
.Bd -literal -offset indent
$ apxs -i -a mod_foo.so
[activating module `foo' in /var/www/conf/httpd.conf]
cp mod_foo.so /usr/lib/apache/modules/mod_foo.so
chmod 755 /usr/lib/apache/modules/mod_foo.so
cp /var/www/conf/httpd.conf /var/www/conf/httpd.conf.bak
cp /var/www/conf/httpd.conf.new /var/www/conf/httpd.conf
rm /var/www/conf/httpd.conf.new
.Ed
.Pp
This way a line such as the following
is added to the configuration file:
.Pp
.Dl LoadModule foo_module /usr/lib/apache/modules/mod_foo.so
.Pp
If you want the module added to the configuration file
without it being enabled,
use the
.Fl A
option instead:
.Pp
.Dl $ apxs -i -A mod_foo.so
.Pp
For a quick test of the
.Nm
mechanism,
create a sample module template plus a corresponding
.Ar Makefile
via:
.Bd -literal -offset indent
# apxs -g -n foo
Creating [DIR]  foo
Creating [FILE] foo/Makefile
Creating [FILE] foo/mod_foo.c
.Ed
.Pp
The sample module can then be immediately compiled into a DSO
and loaded into the httpd server:
.Bd -literal -offset indent
$ cd foo
$ make all reload
apxs -c    mod_foo.c
cc -O2 -pipe -DDEV_RANDOM=/dev/arandom -DMOD_SSL=208116 -DEAPI -DUSE_EXPAT -I../lib/expat-lite -DUSE_SETUSERCONTEXT -fPIC -DSHARED_MODULE -I/usr/lib/apache/include  -c mod_foo.c
cc -shared -fPIC -DSHARED_MODULE -o mod_foo.so mod_foo.o
apxs -i -a -n 'foo' mod_foo.so
[activating module `foo' in /var/www/conf/httpd.conf]
cp mod_foo.so /usr/lib/apache/modules/mod_foo.so
chmod 755 /usr/lib/apache/modules/mod_foo.so
cp /var/www/conf/httpd.conf /var/www/conf/httpd.conf.bak
cp /var/www/conf/httpd.conf.new /var/www/conf/httpd.conf
rm /var/www/conf/httpd.conf.new
apachectl restart
/usr/sbin/apachectl restart: httpd not running, trying to start
/usr/sbin/apachectl restart: httpd started
.Ed
.Pp
.Nm
can even be used to compile complex modules
outside the httpd source tree,
like PHP3,
because
.Nm
automatically recognizes C source files and object files.
.Bd -literal -offset indent
$ cd php3
$ ./configure --with-shared-apache=../apache-1.3
$ apxs -c -o libphp3.so mod_php3.c libmodphp3-so.a
gcc -fpic -DSHARED_MODULE -I/tmp/apache/include  -c mod_php3.c
ld -Bshareable -o libphp3.so mod_php3.o libmodphp3-so.a
.Ed
.Pp
Only C source files are compiled,
while remaining object files are used for the linking phase.
.Sh SEE ALSO
.Xr cc 1 ,
.Xr apachectl 8 ,
.Xr httpd 8
@


1.15
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: apxs.8,v 1.14 2004/12/20 23:31:52 jmc Exp $
d60 1
a60 1
.Dd $Mdocdate$
@


1.14
log
@apachectl is section 8, not 1;
@
text
@d1 1
a1 1
.\"	$OpenBSD: apxs.8,v 1.13 2004/12/07 22:00:04 jmc Exp $
d60 1
a60 1
.Dd December 7, 2004
@


1.13
log
@sync w/ obsd behaviour + tweaks;
@
text
@d1 1
a1 1
.\"	$OpenBSD: apxs.8,v 1.12 2004/12/07 15:48:57 jmc Exp $
a430 1
.Xr apachectl 1 ,
d432 1
@


1.12
log
@convert to mdoc;
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d121 2
a122 1
Apache HyperText Transfer Protocol (HTTP) server.
d126 1
a126 3
which can then be loaded into
.Xr httpd 8
at runtime via the
d130 3
a132 4
So to use this extension mechanism,
your platform has to support the DSO feature and your
.Xr httpd 8
binary has to be built with the
d138 1
a138 1
You can check this yourself by manually running the command
d146 2
a147 2
you can easily extend your Apache server's functionality by
installing your own modules with the DSO mechanism,
d152 11
a162 11
$ apxs -i -a -c mod_foo.c
gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
ld -Bshareable -o mod_foo.so mod_foo.o
cp mod_foo.so /path/to/apache/libexec/mod_foo.so
chmod 755 /path/to/apache/libexec/mod_foo.so
[activating module `foo' in /path/to/apache/etc/httpd.conf]
$ apachectl restart
/path/to/apache/sbin/apachectl restart: httpd not running, trying to start
[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module
/path/to/apache/sbin/apachectl restart: httpd started
$ _
d178 3
a180 1
For instance, with GCC you just have to always use
d183 1
a183 2
C compilers, please consult their manual
pages or watch for the flags
d208 2
a209 2
This indicates the compilation operation.
It first compiles the C source files (.c) of
d221 1
a221 1
.Ar mod_name.so
d229 2
a230 1
This indicates the editing operation, which can be used with the
d234 3
a236 3
options similarly to the
.Fl i
operation to edit Apache's httpd.conf configuration file,
d239 2
a240 1
This generates a subdirectory
d247 1
a247 1
.Pa mod_name.c
d259 2
a260 2
This indicates the installation operation and installs one or more
DSOs into the server's
d294 2
a295 1
Performs a query for
d325 2
d332 2
d336 1
a336 1
Assume you have an Apache module named
d338 4
a341 4
available which should extend Apache's server functionality.
To accomplish this you first have to compile
the C source into a DSO suitable for loading into the Apache server
under runtime via the following command:
d343 3
a345 4
$ apxs -c mod_foo.c
gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
ld -Bshareable -o mod_foo.so mod_foo.o
$ _
d348 1
a348 1
Then you have to update the Apache configuration by making sure a
d350 1
a350 1
directive is present to load this DSO.
d355 2
a356 2
directory and updating the httpd.conf file accordingly.
This can be achieved by running:
d358 7
a364 5
$ apxs -i -a mod_foo.c
cp mod_foo.so /path/to/apache/libexec/mod_foo.so
chmod 755 /path/to/apache/libexec/mod_foo.so
[activating module `foo' in /path/to/apache/etc/httpd.conf]
$ _
d367 2
a368 1
This way a line named
d370 1
a370 1
.Dl LoadModule foo_module libexec/mod_foo.so
d372 3
a374 2
is added to the configuration file, if still not present.
If you want this operation to be disabled, use the
d376 1
a376 1
option, i.e.
d378 1
a378 1
.Dl $ apxs -i -A mod_foo.c
d382 2
a383 2
mechanism you can create a sample Apache module
template plus a corresponding
d387 1
a387 1
$ apxs -g -n foo
a390 1
$ _
d393 2
a394 2
Then you can immediately compile this sample module into a DSO and
load it into the Apache server:
d398 10
a407 7
apxs -c mod_foo.c
gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
ld -Bshareable -o mod_foo.so mod_foo.o
apxs -i -a -n "foo" mod_foo.so
cp mod_foo.so /path/to/apache/libexec/mod_foo.so
chmod 755 /path/to/apache/libexec/mod_foo.so
[activating module `foo' in /path/to/apache/etc/httpd.conf]
d409 2
a410 4
/path/to/apache/sbin/apachectl restart: httpd not running, trying to start
[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module
/path/to/apache/sbin/apachectl restart: httpd started
$ _
a412 1
You can even use
d414 4
a417 1
to compile complex modules outside the Apache source tree, like PHP3, because
a425 1
$ _
d432 1
@


1.11
log
@merge
@
text
@d1 2
a2 1
.TH apxs 8 "April 1998"
d60 65
a124 83
.SH NAME
apxs \- APache eXtenSion tool
.SH SYNOPSIS
.B apxs
.B \-g
[
.BI \-S " variable=value
]
.BI \-n " name"

.B apxs
.B \-q
[
.BI \-S " variable=value
]
.IR query " ..."

.B apxs
.B \-c
[
.BI \-S " variable=value
]
[
.BI \-o " dsofile"
]
[
.BI \-I " incdir"
]
[
.BI \-D " variable[=value]"
]
[
.BI \-L " libdir"
]
[
.BI \-l " libname"
]
[
.BI \-Wc, "compiler-flags"
]
[
.BI \-Wl, "linker-flags"
]
.IR files " ..."

.B apxs
.B \-i
[
.BI \-S " variable=value
]
[
.BI \-n " name"
]
[
.B \-a
]
[
.B \-A
]
.IR dsofile " ..."

.B apxs
.B \-e
[
.BI \-S " variable=value
]
[
.BI \-n " name"
]
[
.B \-a
]
[
.B \-A
]
.IR dsofile " ..."
.PP
.SH DESCRIPTION
.B apxs
is a tool for building and installing extension modules for the Apache
HyperText Transfer Protocol (HTTP) server. This is achieved by building a
Dynamic Shared Object (DSO) from one or more source or object
.I files
d126 3
a128 2
the Apache server at runtime via the
.B LoadModule
d130 4
a133 6
.BR mod_so.

So to use this extension mechanism, your platform has
to support the DSO feature and your
Apache
.B httpd
d135 1
a135 1
.B mod_so
d138 1
a138 1
.B apxs
d141 3
a143 5

.nf
  $ httpd -l
.fi

d145 1
a145 1
.B mod_so
d147 5
a151 4
If these requirements are fulfilled, you can easily extend
your Apache server's functionality by installing your own
modules with the DSO mechanism, with the help of this
.B apxs
d153 14
a166 15

.nf
  $ apxs -i -a -c mod_foo.c
  gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
  ld -Bshareable -o mod_foo.so mod_foo.o
  cp mod_foo.so /path/to/apache/libexec/mod_foo.so
  chmod 755 /path/to/apache/libexec/mod_foo.so
  [activating module `foo' in /path/to/apache/etc/httpd.conf]
  $ apachectl restart
  /path/to/apache/sbin/apachectl restart: httpd not running, trying to start
  [Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module
  /path/to/apache/sbin/apachectl restart: httpd started
  $ _
.fi

d168 6
a173 4
.I files
can be any C source file (.c), an object file (.o) or
even a library archive (.a). The
.B apxs
d175 7
a181 5
source files for compilation, whereas it just uses the object and archive 
files for the linking phase. But when using such pre-compiled objects, 
make sure they are compiled for Position Independent Code (PIC) to be able 
to use them for a DSO. For instance, with GCC you just have to always use
.BR -fpic .
d185 1
a185 1
.B apxs
d187 25
a211 79

For more details about DSO support in Apache, first read the background
information about DSO in htdocs/manual/dso.html, then read the documentation
of
.BR mod_so .

.PP
.SH OPTIONS
Common options:
.TP 12
.BI \-n " name"
This explicitly sets the module name for the
.B \-i
(install)
and
.B \-g
(template generation) option. Use this to explicitly specify the module name.
For option
.B \-g
this is required, for option
.B \-i
the
.B apxs
tool tries to determine the name from the source or (as a fallback) at least
by guessing it from the filename.
.PP
Query options:
.TP 12
.B \-q 
Performs a query for 
.BR apxs 's
knowledge about certain settings. The
.I query
parameters can be one or more of the following variable names:
.nf
  CC              TARGET
  CFLAGS          SBINDIR    
  CFLAGS_SHLIB    INCLUDEDIR 
  LD_SHLIB        LIBEXECDIR 
  LDFLAGS_SHLIB   SYSCONFDIR 
  LIBS_SHLIB      PREFIX
.fi
Use this for manually determining settings. For instance use
.nf
  INC=-I`apxs -q INCLUDEDIR`
.fi
inside your own Makefiles if you need manual access
to Apache's C header files.
.PP
Configuration options:
.TP 12
.BI \-S " variable=value"
This option changes the 
.B apxs 
settings described above.
.PP
Template Generation options:
.TP 12
.B \-g
This generates a subdirectory
.I name
(see option
.BR \-n ")"
and two files: A sample module source file named
.BI mod_ name.c
which can be used as a template for creating your own modules or
as a quick start for playing with the 
.B apxs
mechanism.
And a corresponding
.B Makefile
for even easier building and installing of this module.
.PP
DSO compilation options:
.TP 12
.B \-c
This indicates the compilation operation. It first compiles the C source
files (.c) of
.I files
d213 3
a215 4
.I dsofile
by linking these object files plus the remaining
object files (.o and .a) of
.I files
d217 2
a218 2
.B \-o
option is specified
d220 1
a220 1
.I files
d222 5
a226 11
.BI mod_ name.so
.TP 12
.BI \-o " dsofile"
Explicitly specifies the filename of the created DSO file. If
not specified and the name cannot be guessed from the
.I files
list, the fallback name
.B mod_unknown.so
is used.
.TP 12
.BI \-D " variable[=value]"
d229 26
a254 2
.TP 12
.BI \-I " incdir"
d257 6
a262 2
.TP 12
.BI \-L " libdir"
d265 1
a265 2
.TP 12
.BI \-l " libname"
d268 53
a320 4
.TP 12
.BI \-Wc, "compiler-flags"
This option passes 
.I compiler-flags
d323 3
a325 4
.TP 12
.BI \-Wl, "linker-flags"
This option passes 
.I linker-flags
d328 6
a333 39
.PP
DSO installation and configuration options:
.TP 12
.B \-i
This indicates the installation operation and installs one or more
DSOs into the
server's
.I libexec
directory.
.TP 12
.B \-a
This activates the module by automatically adding a corresponding
.B LoadModule
line to Apache's
.B httpd.conf
configuration file, or by enabling it if it already exists.
.TP 12
.B \-A
Same as option
.B \-a
but the created 
.B LoadModule
directive is prefixed with a hash sign (#), i.e. the module is
just prepared for later activation but initially disabled. 
.TP 12
.B \-e
This indicates the editing operation, which can be used with the
.B \-a
and
.B \-A
options similarly to the
.B \-i
operation to edit Apache's
.B httpd.conf
configuration file, without attempting to install the module.
.PD
.SH EXAMPLES
Assume you have an Apache module named mod_foo.c available which should extend
Apache's server functionality. To accomplish this you first have to compile
d336 7
a342 8

.nf
  $ apxs -c mod_foo.c
  gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
  ld -Bshareable -o mod_foo.so mod_foo.o
  $ _
.fi

d344 4
a347 4
.B LoadModule
directive is present to load this DSO. To simplify this
step
.B apxs
d349 11
a359 12
"libexec" directory and updating the
.B httpd.conf
file accordingly. This can be achieved by running:

.nf
  $ apxs -i -a mod_foo.c
  cp mod_foo.so /path/to/apache/libexec/mod_foo.so
  chmod 755 /path/to/apache/libexec/mod_foo.so
  [activating module `foo' in /path/to/apache/etc/httpd.conf]
  $ _
.fi

d361 3
a363 5

.nf
  LoadModule foo_module libexec/mod_foo.so
.fi

d366 1
a366 1
.B \-A
d368 5
a372 7

.nf
  $ apxs -i -A mod_foo.c
.fi

For a quick test of the 
.B apxs
d374 2
a375 2
template plus a corresponding 
.B Makefile 
d377 8
a384 9

.nf
  $ apxs -g -n foo
  Creating [DIR]  foo
  Creating [FILE] foo/Makefile
  Creating [FILE] foo/mod_foo.c
  $ _
.fi

d387 17
a403 18

.nf
  $ cd foo
  $ make all reload
  apxs -c mod_foo.c
  gcc -fpic -DSHARED_MODULE -I/path/to/apache/include -c mod_foo.c
  ld -Bshareable -o mod_foo.so mod_foo.o
  apxs -i -a -n "foo" mod_foo.so
  cp mod_foo.so /path/to/apache/libexec/mod_foo.so
  chmod 755 /path/to/apache/libexec/mod_foo.so
  [activating module `foo' in /path/to/apache/etc/httpd.conf]
  apachectl restart
  /path/to/apache/sbin/apachectl restart: httpd not running, trying to start
  [Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module
  /path/to/apache/sbin/apachectl restart: httpd started
  $ _
.fi

d405 1
a405 1
.B apxs
d407 16
a422 20
.B apxs 
automatically recognizes C source files and object files.  

.nf
  $ cd php3
  $ ./configure --with-shared-apache=../apache-1.3
  $ apxs -c -o libphp3.so mod_php3.c libmodphp3-so.a
  gcc -fpic -DSHARED_MODULE -I/tmp/apache/include  -c mod_php3.c
  ld -Bshareable -o libphp3.so mod_php3.o libmodphp3-so.a
  $ _
.fi

Only C source files are compiled, while remaining object files are used for the
linking phase.

.PD
.SH SEE ALSO
.BR apachectl(1),
.BR httpd(8).
.
@


1.10
log
@typos;

many tweaks by millert@@ (thanks)
thanks mpech@@ for help with adduser(8)

ok millert@@
@
text
@d5 1
a5 1
.\" Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.9
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d142 2
a143 2
which then can be loaded into
the Apache server under runtime via the
d169 1
a169 1
modules with the DSO mechanism by the help of this
d187 1
a187 1
The arguments
d189 1
a189 1
can be any C source file (.c), a object file (.o) or
d193 4
a196 4
source files for compilation while it just uses the object and archive files for
the linking phase. But when using such pre-compiled objects, make sure they are
compiled for Position Independend Code (PIC) to be able to use them for a
DSO. For instance with GCC you always just have to use
d199 2
a200 2
C compilers please consult its manual
page or watch for the flags
d266 1
a266 1
and there two files: A sample module source file named
d364 1
a364 1
configuration file without attempting to install the module.
d403 2
a404 2
is added to the configuration file if still not present.
If you want to have this operation to be disabled, use the
d451 1
a451 1
automatically recognized C source files and object files.  
d462 1
a462 1
Only C source files are compiled while remaining object files are used for the
@


1.8
log
@another misnumbering
@
text
@d2 5
a6 1
.\" Copyright (c) 1998-1999 The Apache Group. All rights reserved.
d13 1
a13 1
.\"    notice, this list of conditions and the following disclaimer. 
d20 20
a39 22
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the Apache Group
.\"    for use in the Apache HTTP server project (http://www.apache.org/)."
.\"
.\" 4. The names "Apache Server" and "Apache Group" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission.
.\"
.\" 5. Products derived from this software may not be called "Apache"
.\"    nor may "Apache" appear in their names without prior written
.\"    permission of the Apache Group.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the Apache Group
.\"    for use in the Apache HTTP server project (http://www.apache.org/)."
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d41 7
a47 7
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
d51 8
a58 5
.\" individuals on behalf of the Apache Group and was originally based
.\" on public domain software written at the National Center for
.\" Supercomputing Applications, University of Illinois, Urbana-Champaign.
.\" For more information on the Apache Group and the Apache HTTP server
.\" project, please see <http://www.apache.org/>.
d467 1
a467 1
.BR apachectl(8),
@


1.7
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d462 1
a462 1
.BR apachectl(1),
@


1.6
log
@Repair duplicate word occurences; (as found by a Perl script sent to us from
Tom Christiansen <tchrist@@perl.com>).
@
text
@d60 1
a60 1
.BI \-S " name=value
d62 1
a62 1
.BI \-n " modname"
d67 1
a67 1
.BI \-S " name=value
d74 1
a74 1
.BI \-S " name=value
d83 1
a83 1
.BI \-D " name=value"
d102 1
a102 1
.BI \-S " name=value
d105 1
a105 1
.BI \-n " modname"
d118 1
a118 1
.BI \-S " name=value
d121 1
a121 1
.BI \-n " modname"
d135 1
a135 1
dynamic shared object (DSO) from one or more source or object
d143 1
a143 1
So to use this extension mechanism your platform has
d162 1
a162 1
If these requirements are fulfilled you can easily extend
d187 5
a191 6
tool automatically recognizes these extensions and automtaically used the C
source files for compilation while just using the object and archive files for
the linking phase. But when using such pre-compiled objects make sure they are
compiled for position independend code (PIC) to be able to use them for a
dynamically loaded shared object.
For instance with GCC you always just have to use
d194 2
a195 2
C compilers consult its manual
page or at watch for the flags
d199 2
a200 1
For more details about DSO support in Apache read the documentation
d202 1
a202 4
.B mod_so
or perhaps even read the
.B src/modules/standard/mod_so.c
source file.
d208 1
a208 1
.BI \-n " modname"
d231 1
a231 1
parameters can be one or more of the following strings:
d238 1
a238 1
  LIBS_SHLIB
d249 4
a252 2
.BI \-S " name=value"
This option changes the apxs settings described above.
d264 3
a266 1
as a quick start for playing with the APXS mechanism.
d269 1
a269 1
for even easier build and installing of this module.
d277 1
a277 1
into corresponding object files (.o) and then builds a dynamically shared object in
d291 1
a291 1
Explicitly specifies the filename of the created dynamically shared object. If
d298 1
a298 1
.BI \-D " name=value"
d330 1
a330 1
dynamically shared objects into the
d364 1
a364 1
the C source into a shared object suitable for loading into the Apache server
d376 1
a376 1
directive is present to load this shared object. To simplify this
d379 1
a379 1
provides an automatic way to install the shared object in its
d399 1
a399 1
If you want to have this disabled per default use the
d407 6
a412 2
For a quick test of the APXS mechanism you can create a sample Apache module
template plus a corresponding Makefile via:
d422 1
a422 1
Then you can immediately compile this sample module into a shared object and
d444 3
a446 1
to compile complex modules outside the Apache source tree, like PHP3:
d457 2
a458 4
because
.B apxs
automatically recognized C source files and object files.  Only C source files
are compiled while remaining object files are used for the linking phase.
@


1.5
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d398 1
a398 1
If you want to have this this disabled per default use the
@


1.4
log
@Typo fixes.
@
text
@d9 1
a9 1
.\"    notice, this list of conditions and the following disclaimer.
d59 3
d66 3
d74 3
d102 19
d190 1
a190 1
compiled for position independent code (PIC) to be able to use them for a
d229 2
a230 2
.B \-q
Performs a query for
d237 4
a240 4
  CFLAGS          SBINDIR
  CFLAGS_SHLIB    INCLUDEDIR
  LD_SHLIB        LIBEXECDIR
  LDFLAGS_SHLIB   SYSCONFDIR
d250 5
d314 1
a314 1
This option passes
d320 1
a320 1
This option passes
d325 1
a325 1
DSO installation options:
d330 1
a330 1
servers
d335 1
a335 2
This additionally activates the module
by automatically adding a corresponding
d339 1
a339 1
configuration file (only if still no such entry exists).
d344 1
a344 1
but the created
d346 13
a358 3
directive is
prefixed with a hash sign (#), i.e. the module is
just prepared for later activation but initially disabled.
@


1.3
log
@remove trailing whitespace, some Nm cleanup
@
text
@d162 1
a162 1
compiled for position independend code (PIC) to be able to use them for a
d295 1
a295 1
This indicates the installation operartion and installs one or more
@


1.2
log
@Apache 1.3.4 merge
@
text
@d9 1
a9 1
.\"    notice, this list of conditions and the following disclaimer. 
d201 2
a202 2
.B \-q 
Performs a query for 
d209 4
a212 4
  CFLAGS          SBINDIR    
  CFLAGS_SHLIB    INCLUDEDIR 
  LD_SHLIB        LIBEXECDIR 
  LDFLAGS_SHLIB   SYSCONFDIR 
d281 1
a281 1
This option passes 
d287 1
a287 1
This option passes 
d302 1
a302 1
This additionally activates the module 
d312 1
a312 1
but the created 
d316 1
a316 1
just prepared for later activation but initially disabled. 
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
.\" Copyright (c) 1998 The Apache Group. All rights reserved.
d82 6
d208 6
a213 5
  CC             PREFIX     
  LD             SBINDIR    
  CFLAGS         INCLUDEDIR     
  CFLAGS_SHLIB   LIBEXECDIR 
  LDFLAGS_SHLIB  SYSCONFDIR 
d279 12
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 5
.\" ====================================================================
.\" The Apache Software License, Version 1.1
.\"
.\" Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
.\" reserved.
d9 1
a9 1
.\"    notice, this list of conditions and the following disclaimer.
d16 22
a37 20
.\" 3. The end-user documentation included with the redistribution,
.\"    if any, must include the following acknowledgment:
.\"       "This product includes software developed by the
.\"        Apache Software Foundation (http://www.apache.org/)."
.\"    Alternately, this acknowledgment may appear in the software itself,
.\"    if and wherever such third-party acknowledgments normally appear.
.\"
.\" 4. The names "Apache" and "Apache Software Foundation" must
.\"    not be used to endorse or promote products derived from this
.\"    software without prior written permission. For written
.\"    permission, please contact apache@@apache.org.
.\"
.\" 5. Products derived from this software may not be called "Apache",
.\"    nor may "Apache" appear in their name, without prior written
.\"    permission of the Apache Software Foundation.
.\"
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
.\" WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d39 7
a45 7
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
d49 5
a53 8
.\" individuals on behalf of the Apache Software Foundation.  For more
.\" information on the Apache Software Foundation, please see
.\" <http://www.apache.org/>.
.\"
.\" Portions of this software are based upon public domain software
.\" originally written at the National Center for Supercomputing Applications,
.\" University of Illinois, Urbana-Champaign.
.\"
d59 1
a59 4
[
.BI \-S " variable=value
]
.BI \-n " name"
a62 3
[
.BI \-S " variable=value
]
a67 3
.BI \-S " variable=value
]
[
d74 1
a74 1
.BI \-D " variable[=value]"
a81 6
[
.BI \-Wc, "compiler-flags"
]
[
.BI \-Wl, "linker-flags"
]
d87 1
a87 20
.BI \-S " variable=value
]
[
.BI \-n " name"
]
[
.B \-a
]
[
.B \-A
]
.IR dsofile " ..."

.B apxs
.B \-e
[
.BI \-S " variable=value
]
[
.BI \-n " name"
d101 1
a101 1
Dynamic Shared Object (DSO) from one or more source or object
d109 1
a109 1
So to use this extension mechanism, your platform has
d128 1
a128 1
If these requirements are fulfilled, you can easily extend
d153 6
a158 5
tool automatically recognizes these extensions and automatically uses the C
source files for compilation while it just uses the object and archive files for
the linking phase. But when using such pre-compiled objects, make sure they are
compiled for Position Independend Code (PIC) to be able to use them for a
DSO. For instance with GCC you always just have to use
d161 2
a162 2
C compilers please consult its manual
page or watch for the flags
d166 1
a166 2
For more details about DSO support in Apache, first read the background
information about DSO in htdocs/manual/dso.html, then read the documentation
d168 4
a171 1
.BR mod_so .
d177 1
a177 1
.BI \-n " name"
d200 1
a200 1
parameters can be one or more of the following variable names:
d202 5
a206 6
  CC              TARGET
  CFLAGS          SBINDIR    
  CFLAGS_SHLIB    INCLUDEDIR 
  LD_SHLIB        LIBEXECDIR 
  LDFLAGS_SHLIB   SYSCONFDIR 
  LIBS_SHLIB      PREFIX
a214 7
Configuration options:
.TP 12
.BI \-S " variable=value"
This option changes the 
.B apxs 
settings described above.
.PP
d225 1
a225 3
as a quick start for playing with the 
.B apxs
mechanism.
d228 1
a228 1
for even easier building and installing of this module.
d236 1
a236 1
into corresponding object files (.o) and then builds a DSO in
d250 1
a250 1
Explicitly specifies the filename of the created DSO file. If
d257 1
a257 1
.BI \-D " variable[=value]"
a271 12
.TP 12
.BI \-Wc, "compiler-flags"
This option passes 
.I compiler-flags
as additional flags to the compiler command.
Use this to add local compiler-specific options.
.TP 12
.BI \-Wl, "linker-flags"
This option passes 
.I linker-flags
as additional flags to the linker command.
Use this to add local linker-specific options.
d273 1
a273 1
DSO installation and configuration options:
d276 3
a278 3
This indicates the installation operation and installs one or more
DSOs into the
server's
d283 2
a284 1
This activates the module by automatically adding a corresponding
d288 1
a288 1
configuration file, or by enabling it if it already exists.
d295 2
a296 1
directive is prefixed with a hash sign (#), i.e. the module is
a297 11
.TP 12
.B \-e
This indicates the editing operation, which can be used with the
.B \-a
and
.B \-A
options similarly to the
.B \-i
operation to edit Apache's
.B httpd.conf
configuration file without attempting to install the module.
d302 1
a302 1
the C source into a DSO suitable for loading into the Apache server
d314 1
a314 1
directive is present to load this DSO. To simplify this
d317 1
a317 1
provides an automatic way to install the DSO in the
d337 1
a337 1
If you want to have this operation to be disabled, use the
d345 2
a346 6
For a quick test of the 
.B apxs
mechanism you can create a sample Apache module
template plus a corresponding 
.B Makefile 
via:
d356 1
a356 1
Then you can immediately compile this sample module into a DSO and
d378 1
a378 3
to compile complex modules outside the Apache source tree, like PHP3, because
.B apxs 
automatically recognized C source files and object files.  
d389 4
a392 2
Only C source files are compiled while remaining object files are used for the
linking phase.
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d5 1
a5 1
.\" Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


