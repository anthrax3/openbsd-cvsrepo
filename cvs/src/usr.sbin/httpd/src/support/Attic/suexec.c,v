head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.14
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.5
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.13;

1.13
date	2008.05.23.12.12.01;	author mbalmer;	state Exp;
branches;
next	1.12;

1.12
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.02.19.42.48;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.17.18.57.06;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.21.13.11.41;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.07.16.26.44;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.05.23.49.31;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.02.08.08;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.25.18.30.20;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.09.29.06.30.10;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.03.01.04.29.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.07.28;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.52;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.52;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.25;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.07.19.48.15;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.45;	author henning;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.11.17.17.03.27;	author henning;	state Exp;
branches;
next	;


desc
@@


1.14
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*	$OpenBSD: suexec.c,v 1.13 2008/05/23 12:12:01 mbalmer Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * suexec.c -- "Wrapper" support program for suEXEC behaviour for Apache
 *
 ***********************************************************************
 *
 * NOTE! : DO NOT edit this code!!!  Unless you know what you are doing,
 *         editing this code might open up your system in unexpected 
 *         ways to would-be crackers.  Every precaution has been taken 
 *         to make this code as safe as possible; alter it at your own
 *         risk.
 *
 ***********************************************************************
 *
 *
 * Error messages in the suexec logfile are prefixed with severity values
 * similar to those used by the main server:
 *
 *  Sev     Meaning
 * emerg:  Failure of some basic system function
 * alert:  Bug in the way Apache is communicating with suexec
 * crit:   Basic information is missing, invalid, or incorrect
 * error:  Script permission/configuration error
 * warn:   
 * notice: Some issue of which the sysadmin/webmaster ought to be aware
 * info:   Normal activity message
 * debug:  Self-explanatory
 */

#include "ap_config.h"
#include <sys/param.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <stdarg.h>

#if defined(USE_SETUSERCONTEXT)
#include <login_cap.h>
#endif

#include "suexec.h"

#if defined(PATH_MAX)
#define AP_MAXPATH PATH_MAX
#elif defined(MAXPATHLEN)
#define AP_MAXPATH MAXPATHLEN
#else
#define AP_MAXPATH 8192
#endif

#define AP_ENVBUF 256

extern char **environ;
static FILE *log = NULL;

char *safe_env_lst[] =
{
	/* variable name starts with */
	"HTTP_",
#ifdef MOD_SSL
	"HTTPS=",
	"HTTPS_",
	"SSL_",
#endif

	/* variable name is */
	"AUTH_TYPE=",
	"CONTENT_LENGTH=",
	"CONTENT_TYPE=",
	"DATE_GMT=",
	"DATE_LOCAL=",
	"DOCUMENT_NAME=",
	"DOCUMENT_PATH_INFO=",
	"DOCUMENT_ROOT=",
	"DOCUMENT_URI=",
	"FILEPATH_INFO=",
	"GATEWAY_INTERFACE=",
	"LAST_MODIFIED=",
	"PATH_INFO=",
	"PATH_TRANSLATED=",
	"QUERY_STRING=",
	"QUERY_STRING_UNESCAPED=",
	"REMOTE_ADDR=",
	"REMOTE_HOST=",
	"REMOTE_IDENT=",
	"REMOTE_PORT=",
	"REMOTE_USER=",
	"REDIRECT_QUERY_STRING=",
	"REDIRECT_STATUS=",
	"REDIRECT_URL=",
	"REQUEST_METHOD=",
	"REQUEST_URI=",
	"SCRIPT_FILENAME=",
	"SCRIPT_NAME=",
	"SCRIPT_URI=",
	"SCRIPT_URL=",
	"SERVER_ADMIN=",
	"SERVER_NAME=",
	"SERVER_ADDR=",
	"SERVER_PORT=",
	"SERVER_PROTOCOL=",
	"SERVER_SOFTWARE=",
	"UNIQUE_ID=",
	"USER_NAME=",
	"TZ=",
	NULL
};


static void
err_output(const char *fmt, va_list ap)
{
#ifdef LOG_EXEC
	time_t timevar;
	struct tm *lt;

	if (!log) {
		if ((log = fopen(LOG_EXEC, "a")) == NULL) {
			fprintf(stderr, "failed to open log file\n");
			perror("fopen");
			exit(1);
		}
	}

	time(&timevar);
	lt = localtime(&timevar);

	fprintf(log, "[%d-%.2d-%.2d %.2d:%.2d:%.2d]: ",
	lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,
	lt->tm_hour, lt->tm_min, lt->tm_sec);

	vfprintf(log, fmt, ap);

	fflush(log);
#endif /* LOG_EXEC */
	return;
}

static void
log_err(const char *fmt,...)
{
#ifdef LOG_EXEC
	va_list ap;

	va_start(ap, fmt);
	err_output(fmt, ap);
	va_end(ap);
#endif /* LOG_EXEC */
	return;
}

static void
clean_env(void)
{
	char pathbuf[512];
	char **cleanenv;
	char **ep;
	int cidx = 0;
	int idx;

	/*
	 *While cleaning the environment, the environment should be clean.
	 * (e.g. malloc() may get the name of a file for writing debugging info.
	 * Bad news if MALLOC_DEBUG_FILE is set to /etc/passwd.  Sprintf()
	 * may be susceptible to bad locale settings....)
	 * (from Apache 1.3 PR 2790)
	 */
	char **envp = environ;
	char *empty_ptr = NULL;

	environ = &empty_ptr; /* VERY safe environment */

	if ((cleanenv = (char **)calloc(AP_ENVBUF, sizeof(char *))) == NULL) {
		log_err("emerg: failed to malloc memory for environment\n");
		exit(120);
	}

	snprintf(pathbuf, sizeof(pathbuf), "PATH=%s", SAFE_PATH);
	cleanenv[cidx] = strdup(pathbuf);
	cidx++;

	for (ep = envp; *ep && cidx < AP_ENVBUF-1; ep++) {
		for (idx = 0; safe_env_lst[idx]; idx++) {
			if (!strncmp(*ep, safe_env_lst[idx],
			    strlen(safe_env_lst[idx]))) {
				cleanenv[cidx] = *ep;
				cidx++;
				break;
			}
		}
	}

	cleanenv[cidx] = NULL;

	environ = cleanenv;
}

int
main(int argc, char *argv[])
{
	int userdir = 0;	/* ~userdir flag             */
	uid_t uid;		/* user information          */
	gid_t gid;		/* target group placeholder  */
	char *target_uname;	/* target user name          */
	char *target_gname;	/* target group name         */
	char *target_homedir;	/* target home directory     */
	char *actual_uname;	/* actual user name          */
	char *actual_gname;	/* actual group name         */
	char *prog;		/* name of this program      */
	char *cmd;		/* command to be executed    */
	char cwd[AP_MAXPATH];	/* current working directory */
	char dwd[AP_MAXPATH];	/* docroot working directory */
	struct passwd *pw;	/* password entry holder     */
	struct group *gr;	/* group entry holder        */
	struct stat dir_info;	/* directory info holder     */
	struct stat prg_info;	/* program info holder       */

	/* Start with a "clean" environment */
	clean_env();

	prog = argv[0];
	/*
	 * Check existence/validity of the UID of the user
	 * running this program.  Error out if invalid.
	 */
	uid = getuid();
	if ((pw = getpwuid(uid)) == NULL) {
		log_err("crit: invalid uid: (%u)\n", uid);
		exit(102);
	}
	/*
	 * See if this is a 'how were you compiled' request, and
	 * comply if so.
	 */
	if ((argc > 1) && (! strcmp(argv[1], "-V")) && ((uid == 0)
	    || (! strcmp(HTTPD_USER, pw->pw_name)))) {
#ifdef DOC_ROOT
		fprintf(stderr, " -D DOC_ROOT=\"%s\"\n", DOC_ROOT);
#endif
#ifdef GID_MIN
		fprintf(stderr, " -D GID_MIN=%d\n", GID_MIN);
#endif
#ifdef HTTPD_USER
		fprintf(stderr, " -D HTTPD_USER=\"%s\"\n", HTTPD_USER);
#endif
#ifdef LOG_EXEC
		fprintf(stderr, " -D LOG_EXEC=\"%s\"\n", LOG_EXEC);
#endif
#ifdef SAFE_PATH
		fprintf(stderr, " -D SAFE_PATH=\"%s\"\n", SAFE_PATH);
#endif
#ifdef SUEXEC_UMASK
		fprintf(stderr, " -D SUEXEC_UMASK=%03o\n", SUEXEC_UMASK);
#endif
#ifdef UID_MIN
		fprintf(stderr, " -D UID_MIN=%d\n", UID_MIN);
#endif
#ifdef USERDIR_SUFFIX
		fprintf(stderr, " -D USERDIR_SUFFIX=\"%s\"\n", USERDIR_SUFFIX);
#endif
		exit(0);
	}
	/*
	 * If there are a proper number of arguments, set
	 * all of them to variables.  Otherwise, error out.
	 */
	if (argc < 4) {
		log_err("alert: too few arguments\n");
		exit(101);
	}
	target_uname = argv[1];
	target_gname = argv[2];
	cmd = argv[3];

	/*
	 * Check to see if the user running this program
	 * is the user allowed to do so as defined in
	 * suexec.h.  If not the allowed user, error out.
	 */
	if (strcmp(HTTPD_USER, pw->pw_name)) {
		log_err("crit: calling user mismatch (%s instead of %s)\n",
		    pw->pw_name, HTTPD_USER);
		exit(103);
	}

	/*
	 * Check for a leading '/' (absolute path) in the command to be
	 * executed, or attempts to back up out of the current directory,
	 * to protect against attacks.  If any are
	 * found, error out.  Naughty naughty crackers.
	 */
	if ((cmd[0] == '/') || (!strncmp(cmd, "../", 3))
	    || (strstr(cmd, "/../") != NULL)) {
		log_err("error: invalid command (%s)\n", cmd);
		exit(104);
	}

	/*
	 * Check to see if this is a ~userdir request.  If
	 * so, set the flag, and remove the '~' from the
	 * target username.
	 */
	if (!strncmp("~", target_uname, 1)) {
		target_uname++;
		userdir = 1;
	}

	/* Error out if the target username is invalid.	*/
	if ((pw = getpwnam(target_uname)) == NULL) {
		log_err("crit: invalid target user name: (%s)\n", target_uname);
		exit(105);
	}

	/* Error out if the target group name is invalid. */
	if (strspn(target_gname, "1234567890") != strlen(target_gname)) {
		if ((gr = getgrnam(target_gname)) == NULL) {
			log_err("crit: invalid target group name: (%s)\n",
			    target_gname);
			exit(106);
		}
		gid = gr->gr_gid;
		actual_gname = strdup(gr->gr_name);
	} else {
		gid = atoi(target_gname);
		actual_gname = strdup(target_gname);
	}


	/* Save these for later since initgroups will hose the struct */
	uid = pw->pw_uid;
	actual_uname = strdup(pw->pw_name);
	target_homedir = strdup(pw->pw_dir);

	/*
	 * Log the transaction here to be sure we have an open log 
	 * before we setuid().
	 */
	log_err("info: (target/actual) uid: (%s/%s) gid: (%s/%s) cmd: %s\n",
	    target_uname, actual_uname,	target_gname, actual_gname, cmd);

	/*
	 * Error out if attempt is made to execute as root or as
	 * a UID less than UID_MIN.  Tsk tsk.
	 */
	if ((uid == 0) || (uid < UID_MIN)) {
		log_err("crit: cannot run as forbidden uid (%u/%s)\n", uid,
		    cmd);
		exit(107);
	}

	/*
	 * Error out if attempt is made to execute as root group
	 * or as a GID less than GID_MIN.  Tsk tsk.
	 */
	if ((gid == 0) || (gid < GID_MIN)) {
		log_err("crit: cannot run as forbidden gid (%u/%s)\n", gid,
		    cmd);
		exit(108);
	}

#if defined(USE_SETUSERCONTEXT)
	if (setusercontext(NULL, pw, uid,
	    LOGIN_SETALL & ~(LOGIN_SETLOGIN | LOGIN_SETPATH)) != 0) {
		log_err("emerg: failed to setusercontext (%u: %s)\n", uid, cmd);
		exit(110);
	}
#else
	/*
	 * Change UID/GID here so that the following tests work over NFS.
	 *
	 * Initialize the group access list for the target user,
	 * and setgid() to the target group. If unsuccessful, error out.
	 */
	if (((setgid(gid)) != 0) || (initgroups(actual_uname, gid) != 0)) {
		log_err("emerg: failed to setgid (%u: %s)\n", gid, cmd);
		exit(109);
	}

	/* setuid() to the target user.  Error out on fail. */
	if ((setuid(uid)) != 0) {
		log_err("emerg: failed to setuid (%u: %s)\n", uid, cmd);
		exit(110);
	}
#endif

	/*
	 * Get the current working directory, as well as the proper
	 * document root (dependant upon whether or not it is a
	 * ~userdir request).  Error out if we cannot get either one,
	 * or if the current working directory is not in the docroot.
	 * Use chdir()s and getcwd()s to avoid problems with symlinked
	 * directories.  Yuck.
	 */
	if (getcwd(cwd, AP_MAXPATH) == NULL) {
		log_err("emerg: cannot get current working directory\n");
		exit(111);
	}

	if (userdir) {
		if (((chdir(target_homedir)) != 0) ||
		    ((chdir(USERDIR_SUFFIX)) != 0) ||
		    ((getcwd(dwd, AP_MAXPATH)) == NULL) ||
		    ((chdir(cwd)) != 0)) {
			log_err("emerg: cannot get docroot information (%s)\n",
			    target_homedir);
			exit(112);
		}
	} else {
		if (((chdir(DOC_ROOT)) != 0) ||
		    ((getcwd(dwd, AP_MAXPATH)) == NULL) ||
		    ((chdir(cwd)) != 0)) {
			log_err("emerg: cannot get docroot information (%s)\n",
			    DOC_ROOT);
			exit(113);
		}
	}

	if ((strncmp(cwd, dwd, strlen(dwd))) != 0) {
		log_err("error: command not in docroot (%s/%s)\n", cwd, cmd);
		exit(114);
	}

	/* Stat the cwd and verify it is a directory, or error out. */
	if (((lstat(cwd, &dir_info)) != 0) || !(S_ISDIR(dir_info.st_mode))) {
		log_err("error: cannot stat directory: (%s)\n", cwd);
		exit(115);
	}

	/* Error out if cwd is writable by others. */
	if ((dir_info.st_mode & S_IWOTH) || (dir_info.st_mode & S_IWGRP)) {
		log_err("error: directory is writable by others: (%s)\n", cwd);
		exit(116);
	}

	/* Error out if we cannot stat the program. */
	if (((lstat(cmd, &prg_info)) != 0) || (S_ISLNK(prg_info.st_mode))) {
		log_err("error: cannot stat program: (%s)\n", cmd);
		exit(117);
	}

	/* Error out if the program is writable by others. */
	if ((prg_info.st_mode & S_IWOTH) || (prg_info.st_mode & S_IWGRP)) {
		log_err("error: file is writable by others: (%s/%s)\n", cwd,
		    cmd);
		exit(118);
	}

	/* Error out if the file is setuid or setgid. */
	if ((prg_info.st_mode & S_ISUID) || (prg_info.st_mode & S_ISGID)) {
		log_err("error: file is either setuid or setgid: (%s/%s)\n",
		    cwd, cmd);
		exit(119);
	}

	/*
	 * Error out if the target name/group is different from
	 * the name/group of the cwd or the program.
	 */
	if ((uid != dir_info.st_uid) ||
	    (gid != dir_info.st_gid) ||
	    (uid != prg_info.st_uid) ||
	    (gid != prg_info.st_gid)) {
		log_err("error: target uid/gid (%u/%u) mismatch "
		    "with directory (%u/%u) or program (%u/%u)\n",
		    uid, gid,
		    dir_info.st_uid, dir_info.st_gid,
		    prg_info.st_uid, prg_info.st_gid);
		exit(120);
	}
	/*
	 * Error out if the program is not executable for the user.
	 * Otherwise, she won't find any error in the logs except for
	 * "[error] Premature end of script headers: ..."
	 */
	if (!(prg_info.st_mode & S_IXUSR)) {
		log_err("error: file has no execute permission: (%s/%s)\n",
		    cwd, cmd);
		exit(121);
	}

#ifdef SUEXEC_UMASK
	/* umask() uses inverse logic; bits are CLEAR for allowed access. */
	if ((~SUEXEC_UMASK) & 0022)
		log_err("notice: SUEXEC_UMASK of %03o allows "
		    "write permission to group and/or other\n", SUEXEC_UMASK);
	umask(SUEXEC_UMASK);
#endif /* SUEXEC_UMASK */

	/* 
	 * Be sure to close the log file so the CGI can't
	 * mess with it.  If the exec fails, it will be reopened 
	 * automatically when log_err is called.  Note that the log
	 * might not actually be open if LOG_EXEC isn't defined.
	 * However, the "log" cell isn't ifdef'd so let's be defensive
	 * and assume someone might have done something with it
	 * outside an ifdef'd LOG_EXEC block.
	 */
	if (log != NULL) {
		fclose(log);
		log = NULL;
	}

	/* Execute the command, replacing our image with its own. */
	execv(cmd, &argv[3]);

	/*
	 * (I can't help myself...sorry.)
	 *
	 * Uh oh.  Still here.  Where's the kaboom?  There was supposed to be an
	 * EARTH-shattering kaboom!
	 *
	 * Oh well, log the failure and error out.
	 */
	log_err("emerg: (%d)%s: exec failed (%s)\n", errno, strerror(errno),
	    cmd);
	exit(255);
}
@


1.13
log
@KNF and readability changes.  de-register, remove #ifndef SIN6_LEN defines.
Add OpenBSD cvs markers.

No binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.12
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d1 2
d117 2
a118 2
    /* variable name starts with */
    "HTTP_",
d120 46
a165 46
    "HTTPS=",
    "HTTPS_",
    "SSL_",
#endif

    /* variable name is */
    "AUTH_TYPE=",
    "CONTENT_LENGTH=",
    "CONTENT_TYPE=",
    "DATE_GMT=",
    "DATE_LOCAL=",
    "DOCUMENT_NAME=",
    "DOCUMENT_PATH_INFO=",
    "DOCUMENT_ROOT=",
    "DOCUMENT_URI=",
    "FILEPATH_INFO=",
    "GATEWAY_INTERFACE=",
    "LAST_MODIFIED=",
    "PATH_INFO=",
    "PATH_TRANSLATED=",
    "QUERY_STRING=",
    "QUERY_STRING_UNESCAPED=",
    "REMOTE_ADDR=",
    "REMOTE_HOST=",
    "REMOTE_IDENT=",
    "REMOTE_PORT=",
    "REMOTE_USER=",
    "REDIRECT_QUERY_STRING=",
    "REDIRECT_STATUS=",
    "REDIRECT_URL=",
    "REQUEST_METHOD=",
    "REQUEST_URI=",
    "SCRIPT_FILENAME=",
    "SCRIPT_NAME=",
    "SCRIPT_URI=",
    "SCRIPT_URL=",
    "SERVER_ADMIN=",
    "SERVER_NAME=",
    "SERVER_ADDR=",
    "SERVER_PORT=",
    "SERVER_PROTOCOL=",
    "SERVER_SOFTWARE=",
    "UNIQUE_ID=",
    "USER_NAME=",
    "TZ=",
    NULL
d169 2
a170 1
static void err_output(const char *fmt, va_list ap)
d173 2
a174 2
    time_t timevar;
    struct tm *lt;
d176 6
a181 5
    if (!log) {
	if ((log = fopen(LOG_EXEC, "a")) == NULL) {
	    fprintf(stderr, "failed to open log file\n");
	    perror("fopen");
	    exit(1);
a182 1
    }
d184 2
a185 2
    time(&timevar);
    lt = localtime(&timevar);
d187 3
a189 3
    fprintf(log, "[%d-%.2d-%.2d %.2d:%.2d:%.2d]: ",
	    lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,
	    lt->tm_hour, lt->tm_min, lt->tm_sec);
d191 1
a191 1
    vfprintf(log, fmt, ap);
d193 1
a193 1
    fflush(log);
d195 1
a195 1
    return;
d198 2
a199 1
static void log_err(const char *fmt,...)
d202 1
a202 1
    va_list ap;
d204 3
a206 3
    va_start(ap, fmt);
    err_output(fmt, ap);
    va_end(ap);
d208 1
a208 1
    return;
d211 2
a212 1
static void clean_env(void)
d214 37
a250 36
    char pathbuf[512];
    char **cleanenv;
    char **ep;
    int cidx = 0;
    int idx;

    /* While cleaning the environment, the environment should be clean.
     * (e.g. malloc() may get the name of a file for writing debugging info.
     * Bad news if MALLOC_DEBUG_FILE is set to /etc/passwd.  Sprintf() may be
     * susceptible to bad locale settings....)
     * (from PR 2790)
     */
    char **envp = environ;
    char *empty_ptr = NULL;

    environ = &empty_ptr; /* VERY safe environment */

    if ((cleanenv = (char **) calloc(AP_ENVBUF, sizeof(char *))) == NULL) {
        log_err("emerg: failed to malloc memory for environment\n");
	exit(120);
    }

    snprintf(pathbuf, sizeof(pathbuf), "PATH=%s", SAFE_PATH);
    cleanenv[cidx] = strdup(pathbuf);
    cidx++;

    for (ep = envp; *ep && cidx < AP_ENVBUF-1; ep++) {
        for (idx = 0; safe_env_lst[idx]; idx++) {
            if (!strncmp(*ep, safe_env_lst[idx],
                         strlen(safe_env_lst[idx]))) {
		cleanenv[cidx] = *ep;
		cidx++;
                break;
            }
        }
    }
d252 1
a252 1
    cleanenv[cidx] = NULL;
d254 1
a254 1
    environ = cleanenv;
d257 2
a258 1
int main(int argc, char *argv[])
d260 36
a295 41
    int userdir = 0;		/* ~userdir flag             */
    uid_t uid;			/* user information          */
    gid_t gid;			/* target group placeholder  */
    char *target_uname;		/* target user name          */
    char *target_gname;		/* target group name         */
    char *target_homedir;	/* target home directory     */
    char *actual_uname;		/* actual user name          */
    char *actual_gname;		/* actual group name         */
    char *prog;			/* name of this program      */
    char *cmd;			/* command to be executed    */
    char cwd[AP_MAXPATH];	/* current working directory */
    char dwd[AP_MAXPATH];	/* docroot working directory */
    struct passwd *pw;		/* password entry holder     */
    struct group *gr;		/* group entry holder        */
    struct stat dir_info;	/* directory info holder     */
    struct stat prg_info;	/* program info holder       */

    /*
     * Start with a "clean" environment
     */
    clean_env();

    prog = argv[0];
    /*
     * Check existence/validity of the UID of the user
     * running this program.  Error out if invalid.
     */
    uid = getuid();
    if ((pw = getpwuid(uid)) == NULL) {
	log_err("crit: invalid uid: (%u)\n", uid);
	exit(102);
    }
    /*
     * See if this is a 'how were you compiled' request, and
     * comply if so.
     */
    if ((argc > 1)
        && (! strcmp(argv[1], "-V"))
        && ((uid == 0)
            || (! strcmp(HTTPD_USER, pw->pw_name)))
        ) {
d297 1
a297 1
        fprintf(stderr, " -D DOC_ROOT=\"%s\"\n", DOC_ROOT);
d300 1
a300 1
        fprintf(stderr, " -D GID_MIN=%d\n", GID_MIN);
d303 1
a303 1
        fprintf(stderr, " -D HTTPD_USER=\"%s\"\n", HTTPD_USER);
d306 1
a306 1
        fprintf(stderr, " -D LOG_EXEC=\"%s\"\n", LOG_EXEC);
d309 1
a309 1
        fprintf(stderr, " -D SAFE_PATH=\"%s\"\n", SAFE_PATH);
d312 1
a312 1
        fprintf(stderr, " -D SUEXEC_UMASK=%03o\n", SUEXEC_UMASK);
d315 1
a315 1
        fprintf(stderr, " -D UID_MIN=%d\n", UID_MIN);
d318 1
a318 1
        fprintf(stderr, " -D USERDIR_SUFFIX=\"%s\"\n", USERDIR_SUFFIX);
d320 89
a408 87
        exit(0);
    }
    /*
     * If there are a proper number of arguments, set
     * all of them to variables.  Otherwise, error out.
     */
    if (argc < 4) {
	log_err("alert: too few arguments\n");
	exit(101);
    }
    target_uname = argv[1];
    target_gname = argv[2];
    cmd = argv[3];

    /*
     * Check to see if the user running this program
     * is the user allowed to do so as defined in
     * suexec.h.  If not the allowed user, error out.
     */
    if (strcmp(HTTPD_USER, pw->pw_name)) {
        log_err("crit: calling user mismatch (%s instead of %s)\n",
		pw->pw_name, HTTPD_USER);
	exit(103);
    }

    /*
     * Check for a leading '/' (absolute path) in the command to be executed,
     * or attempts to back up out of the current directory,
     * to protect against attacks.  If any are
     * found, error out.  Naughty naughty crackers.
     */
    if ((cmd[0] == '/') || (!strncmp(cmd, "../", 3))
	|| (strstr(cmd, "/../") != NULL)) {
        log_err("error: invalid command (%s)\n", cmd);
	exit(104);
    }

    /*
     * Check to see if this is a ~userdir request.  If
     * so, set the flag, and remove the '~' from the
     * target username.
     */
    if (!strncmp("~", target_uname, 1)) {
	target_uname++;
	userdir = 1;
    }

    /*
     * Error out if the target username is invalid.
     */
    if ((pw = getpwnam(target_uname)) == NULL) {
	log_err("crit: invalid target user name: (%s)\n", target_uname);
	exit(105);
    }

    /*
     * Error out if the target group name is invalid.
     */
    if (strspn(target_gname, "1234567890") != strlen(target_gname)) {
	if ((gr = getgrnam(target_gname)) == NULL) {
	    log_err("crit: invalid target group name: (%s)\n", target_gname);
	    exit(106);
	}
	gid = gr->gr_gid;
	actual_gname = strdup(gr->gr_name);
    }
    else {
	gid = atoi(target_gname);
	actual_gname = strdup(target_gname);
    }


    /*
     * Save these for later since initgroups will hose the struct
     */
    uid = pw->pw_uid;
    actual_uname = strdup(pw->pw_name);
    target_homedir = strdup(pw->pw_dir);

    /*
     * Log the transaction here to be sure we have an open log 
     * before we setuid().
     */
    log_err("info: (target/actual) uid: (%s/%s) gid: (%s/%s) cmd: %s\n",
	    target_uname, actual_uname,
	    target_gname, actual_gname,
	    cmd);
d410 9
a418 17
    /*
     * Error out if attempt is made to execute as root or as
     * a UID less than UID_MIN.  Tsk tsk.
     */
    if ((uid == 0) || (uid < UID_MIN)) {
	log_err("crit: cannot run as forbidden uid (%u/%s)\n", uid, cmd);
	exit(107);
    }

    /*
     * Error out if attempt is made to execute as root group
     * or as a GID less than GID_MIN.  Tsk tsk.
     */
    if ((gid == 0) || (gid < GID_MIN)) {
	log_err("crit: cannot run as forbidden gid (%u/%s)\n", gid, cmd);
	exit(108);
    }
d421 5
a425 5
    if (setusercontext(NULL, pw, uid,
	LOGIN_SETALL & ~(LOGIN_SETLOGIN | LOGIN_SETPATH)) != 0) {
	log_err("emerg: failed to setusercontext (%u: %s)\n", uid, cmd);
	exit(110);
    }
d427 112
a538 121
    /*
     * Change UID/GID here so that the following tests work over NFS.
     *
     * Initialize the group access list for the target user,
     * and setgid() to the target group. If unsuccessful, error out.
     */
    if (((setgid(gid)) != 0) || (initgroups(actual_uname, gid) != 0)) {
	log_err("emerg: failed to setgid (%u: %s)\n", gid, cmd);
	exit(109);
    }

    /*
     * setuid() to the target user.  Error out on fail.
     */
    if ((setuid(uid)) != 0) {
	log_err("emerg: failed to setuid (%u: %s)\n", uid, cmd);
	exit(110);
    }
#endif

    /*
     * Get the current working directory, as well as the proper
     * document root (dependant upon whether or not it is a
     * ~userdir request).  Error out if we cannot get either one,
     * or if the current working directory is not in the docroot.
     * Use chdir()s and getcwd()s to avoid problems with symlinked
     * directories.  Yuck.
     */
    if (getcwd(cwd, AP_MAXPATH) == NULL) {
	log_err("emerg: cannot get current working directory\n");
	exit(111);
    }

    if (userdir) {
	if (((chdir(target_homedir)) != 0) ||
	    ((chdir(USERDIR_SUFFIX)) != 0) ||
	    ((getcwd(dwd, AP_MAXPATH)) == NULL) ||
	    ((chdir(cwd)) != 0)) {
	    log_err("emerg: cannot get docroot information (%s)\n",
		    target_homedir);
	    exit(112);
	}
    }
    else {
	if (((chdir(DOC_ROOT)) != 0) ||
	    ((getcwd(dwd, AP_MAXPATH)) == NULL) ||
	    ((chdir(cwd)) != 0)) {
	    log_err("emerg: cannot get docroot information (%s)\n", DOC_ROOT);
	    exit(113);
	}
    }

    if ((strncmp(cwd, dwd, strlen(dwd))) != 0) {
	log_err("error: command not in docroot (%s/%s)\n", cwd, cmd);
	exit(114);
    }

    /*
     * Stat the cwd and verify it is a directory, or error out.
     */
    if (((lstat(cwd, &dir_info)) != 0) || !(S_ISDIR(dir_info.st_mode))) {
	log_err("error: cannot stat directory: (%s)\n", cwd);
	exit(115);
    }

    /*
     * Error out if cwd is writable by others.
     */
    if ((dir_info.st_mode & S_IWOTH) || (dir_info.st_mode & S_IWGRP)) {
	log_err("error: directory is writable by others: (%s)\n", cwd);
	exit(116);
    }

    /*
     * Error out if we cannot stat the program.
     */
    if (((lstat(cmd, &prg_info)) != 0) || (S_ISLNK(prg_info.st_mode))) {
	log_err("error: cannot stat program: (%s)\n", cmd);
	exit(117);
    }

    /*
     * Error out if the program is writable by others.
     */
    if ((prg_info.st_mode & S_IWOTH) || (prg_info.st_mode & S_IWGRP)) {
	log_err("error: file is writable by others: (%s/%s)\n", cwd, cmd);
	exit(118);
    }

    /*
     * Error out if the file is setuid or setgid.
     */
    if ((prg_info.st_mode & S_ISUID) || (prg_info.st_mode & S_ISGID)) {
	log_err("error: file is either setuid or setgid: (%s/%s)\n", cwd, cmd);
	exit(119);
    }

    /*
     * Error out if the target name/group is different from
     * the name/group of the cwd or the program.
     */
    if ((uid != dir_info.st_uid) ||
	(gid != dir_info.st_gid) ||
	(uid != prg_info.st_uid) ||
	(gid != prg_info.st_gid)) {
	log_err("error: target uid/gid (%u/%u) mismatch "
		"with directory (%u/%u) or program (%u/%u)\n",
		uid, gid,
		dir_info.st_uid, dir_info.st_gid,
		prg_info.st_uid, prg_info.st_gid);
	exit(120);
    }
    /*
     * Error out if the program is not executable for the user.
     * Otherwise, she won't find any error in the logs except for
     * "[error] Premature end of script headers: ..."
     */
    if (!(prg_info.st_mode & S_IXUSR)) {
	log_err("error: file has no execute permission: (%s/%s)\n", cwd, cmd);
	exit(121);
    }
d541 5
a545 8
    /*
     * umask() uses inverse logic; bits are CLEAR for allowed access.
     */
    if ((~SUEXEC_UMASK) & 0022) {
	log_err("notice: SUEXEC_UMASK of %03o allows "
		"write permission to group and/or other\n", SUEXEC_UMASK);
    }
    umask(SUEXEC_UMASK);
d548 28
a575 29
    /* 
     * Be sure to close the log file so the CGI can't
     * mess with it.  If the exec fails, it will be reopened 
     * automatically when log_err is called.  Note that the log
     * might not actually be open if LOG_EXEC isn't defined.
     * However, the "log" cell isn't ifdef'd so let's be defensive
     * and assume someone might have done something with it
     * outside an ifdef'd LOG_EXEC block.
     */
    if (log != NULL) {
	fclose(log);
	log = NULL;
    }

    /*
     * Execute the command, replacing our image with its own.
     */
    execv(cmd, &argv[3]);

    /*
     * (I can't help myself...sorry.)
     *
     * Uh oh.  Still here.  Where's the kaboom?  There was supposed to be an
     * EARTH-shattering kaboom!
     *
     * Oh well, log the failure and error out.
     */
    log_err("emerg: (%d)%s: exec failed (%s)\n", errno, strerror(errno), cmd);
    exit(255);
@


1.11
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a99 23
/*
 ***********************************************************************
 * There is no initgroups() in QNX, so I believe this is safe :-)
 * Use cc -osuexec -3 -O -mf -DQNX suexec.c to compile.
 *
 * May 17, 1997.
 * Igor N. Kovalenko -- infoh@@mail.wplus.net
 ***********************************************************************
 */

#if defined(NEED_INITGROUPS)
int initgroups(const char *name, gid_t basegid)
{
/* QNX and MPE do not appear to support supplementary groups. */
    return 0;
}
#endif

#if defined(NEED_STRERROR)
extern char *sys_errlist[];
#define strerror(x) sys_errlist[(x)]
#endif

a580 8
#ifdef NEED_HASHBANG_EMUL
    /* We need the #! emulation when we want to execute scripts */
    {
	extern char **environ;

	ap_execve(cmd, &argv[3], environ);
    }
#else /*NEED_HASHBANG_EMUL*/
a581 1
#endif /*NEED_HASHBANG_EMUL*/
@


1.10
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@a314 4
#ifdef _OSD_POSIX
        /* User name comparisons are case insensitive on BS2000/OSD */
            || (! strcasecmp(HTTPD_USER, pw->pw_name)))
#else  /* _OSD_POSIX */
a315 1
#endif /* _OSD_POSIX */
a359 8
#ifdef _OSD_POSIX
    /* User name comparisons are case insensitive on BS2000/OSD */
    if (strcasecmp(HTTPD_USER, pw->pw_name)) {
        log_err("crit: calling user mismatch (%s instead of %s)\n",
		pw->pw_name, HTTPD_USER);
	exit(103);
    }
#else  /* _OSD_POSIX */
a364 1
#endif /* _OSD_POSIX */
a411 29
#ifdef _OSD_POSIX
    /*
     * Initialize BS2000 user environment
     */
    {
	pid_t pid, reaped;
	int status;

	switch (pid = ufork(target_uname))
	{
	case -1:	/* Error */
	    log_err("emerg: failed to setup bs2000 environment for user "
		    "%s: %s\n",
		    target_uname, strerror(errno));
	    exit(150);
	case 0:	/* Child */
	    break;
	default:	/* Father */
	    while (pid != (reaped = waitpid(pid, &status, 0))
		   && (reaped != -1 || errno != ECHILD))
		;
	    /* @@@@@@ FIXME: should we deal with STOP signals as well? */
	    if (WIFSIGNALED(status)) {
		kill (getpid(), WTERMSIG(status));
	    }
	    exit(WEXITSTATUS(status));
	}
    }
#endif /* _OSD_POSIX */
@


1.9
log
@merge
@
text
@d141 1
@


1.8
log
@use setusercontext(3) instead of initgroups/setuid/et al., making possible
to limit resources based on the user class the binary is run under.
while i'm here, use %u for gid_t and uid_t.
input and ok from millert and henning.
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d118 5
d138 47
a184 39
    "AUTH_TYPE",
    "CONTENT_LENGTH",
    "CONTENT_TYPE",
    "DATE_GMT",
    "DATE_LOCAL",
    "DOCUMENT_NAME",
    "DOCUMENT_PATH_INFO",
    "DOCUMENT_ROOT",
    "DOCUMENT_URI",
    "FILEPATH_INFO",
    "GATEWAY_INTERFACE",
    "LAST_MODIFIED",
    "PATH_INFO",
    "PATH_TRANSLATED",
    "QUERY_STRING",
    "QUERY_STRING_UNESCAPED",
    "REMOTE_ADDR",
    "REMOTE_HOST",
    "REMOTE_IDENT",
    "REMOTE_PORT",
    "REMOTE_USER",
    "REDIRECT_QUERY_STRING",
    "REDIRECT_STATUS",
    "REDIRECT_URL",
    "REQUEST_METHOD",
    "REQUEST_URI",
    "SCRIPT_FILENAME",
    "SCRIPT_NAME",
    "SCRIPT_URI",
    "SCRIPT_URL",
    "SERVER_ADMIN",
    "SERVER_NAME",
    "SERVER_ADDR",
    "SERVER_PORT",
    "SERVER_PROTOCOL",
    "SERVER_SOFTWARE",
    "UNIQUE_ID",
    "USER_NAME",
    "TZ",
d237 10
d257 9
a265 21
    for (ep = environ; *ep && cidx < AP_ENVBUF-1; ep++) {
#ifdef MOD_SSL
	if (!strncmp(*ep, "HTTP_", 5) || 
	    !strncmp(*ep, "HTTPS", 5) ||
	    !strncmp(*ep, "SSL_", 4)) {
#else
	if (!strncmp(*ep, "HTTP_", 5)) {
#endif
	    cleanenv[cidx] = *ep;
	    cidx++;
	}
	else {
	    for (idx = 0; safe_env_lst[idx]; idx++) {
		if (!strncmp(*ep, safe_env_lst[idx],
			     strlen(safe_env_lst[idx]))) {
		    cleanenv[cidx] = *ep;
		    cidx++;
		    break;
		}
	    }
	}
d292 5
d325 1
a325 1
        fprintf(stderr, " -D GID_MID=%d\n", GID_MIN);
d340 1
a340 1
        fprintf(stderr, " -D UID_MID=%d\n", UID_MIN);
d430 1
a430 1
	pid_t pid;
d443 2
a444 1
	    while (pid != waitpid(pid, &status, 0))
a627 1
    clean_env();
@


1.7
log
@trivial sprintf
@
text
@d94 4
d288 1
a288 1
	log_err("crit: invalid uid: (%ld)\n", uid);
d459 1
a459 1
	log_err("crit: cannot run as forbidden uid (%d/%s)\n", uid, cmd);
d468 1
a468 1
	log_err("crit: cannot run as forbidden gid (%d/%s)\n", gid, cmd);
d472 7
d486 1
a486 1
	log_err("emerg: failed to setgid (%ld: %s)\n", gid, cmd);
d494 1
a494 1
	log_err("emerg: failed to setuid (%ld: %s)\n", uid, cmd);
d497 1
d584 2
a585 2
	log_err("error: target uid/gid (%ld/%ld) mismatch "
		"with directory (%ld/%ld) or program (%ld/%ld)\n",
@


1.6
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d226 1
a226 1
    sprintf(pathbuf, "PATH=%s", SAFE_PATH);
@


1.5
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
d277 50
a330 1
    prog = argv[0];
a337 10

    /*
     * Check existence/validity of the UID of the user
     * running this program.  Error out if invalid.
     */
    uid = getuid();
    if ((pw = getpwuid(uid)) == NULL) {
	log_err("crit: invalid uid: (%ld)\n", uid);
	exit(102);
    }
@


1.4
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d72 12
d221 1
a221 1
        log_err("failed to malloc memory for environment\n");
d282 1
a282 1
	log_err("too few arguments\n");
d295 1
a295 1
	log_err("invalid uid: (%ld)\n", uid);
d307 2
a308 1
        log_err("user mismatch (%s instead of %s)\n", pw->pw_name, HTTPD_USER);
d311 1
a311 1
#else  /*_OSD_POSIX*/
d313 2
a314 1
        log_err("user mismatch (%s instead of %s)\n", pw->pw_name, HTTPD_USER);
d317 1
a317 1
#endif /*_OSD_POSIX*/
d327 1
a327 1
        log_err("invalid command (%s)\n", cmd);
d345 1
a345 1
	log_err("invalid target user name: (%s)\n", target_uname);
d354 1
a354 1
	    log_err("invalid target group name: (%s)\n", target_gname);
d376 2
a377 1
	    log_err("failed to setup bs2000 environment for user %s: %s\n",
d386 1
a386 1
	    if (WIFSIGNALED(status))
d388 1
d392 1
a392 1
#endif /*_OSD_POSIX*/
d405 1
a405 1
    log_err("uid: (%s/%s) gid: (%s/%s) cmd: %s\n",
d415 1
a415 1
	log_err("cannot run as forbidden uid (%d/%s)\n", uid, cmd);
d424 1
a424 1
	log_err("cannot run as forbidden gid (%d/%s)\n", gid, cmd);
d435 1
a435 1
	log_err("failed to setgid (%ld: %s)\n", gid, cmd);
d443 1
a443 1
	log_err("failed to setuid (%ld: %s)\n", uid, cmd);
d456 1
a456 1
	log_err("cannot get current working directory\n");
d465 2
a466 1
	    log_err("cannot get docroot information (%s)\n", target_homedir);
d474 1
a474 1
	    log_err("cannot get docroot information (%s)\n", DOC_ROOT);
d480 1
a480 1
	log_err("command not in docroot (%s/%s)\n", cwd, cmd);
d488 1
a488 1
	log_err("cannot stat directory: (%s)\n", cwd);
d496 1
a496 1
	log_err("directory is writable by others: (%s)\n", cwd);
d504 1
a504 1
	log_err("cannot stat program: (%s)\n", cmd);
d512 1
a512 1
	log_err("file is writable by others: (%s/%s)\n", cwd, cmd);
d520 1
a520 1
	log_err("file is either setuid or setgid: (%s/%s)\n", cwd, cmd);
d532 1
a532 1
	log_err("target uid/gid (%ld/%ld) mismatch "
d545 1
a545 1
	log_err("file has no execute permission: (%s/%s)\n", cwd, cmd);
d549 10
d597 1
a597 1
    log_err("(%d)%s: exec failed (%s)\n", errno, strerror(errno), cmd);
@


1.3
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d148 1
d351 27
d551 8
d560 1
@


1.2
log
@Apache 1.3.4 merge
@
text
@d217 5
d223 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
d112 1
a112 1
static FILE *log;
d503 10
a512 4
     * automatically when log_err is called.
     */
    fclose(log);
    log = NULL;
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
a71 12
 * Error messages in the suexec logfile are prefixed with severity values
 * similar to those used by the main server:
 *
 *  Sev     Meaning
 * emerg:  Failure of some basic system function
 * alert:  Bug in the way Apache is communicating with suexec
 * crit:   Basic information is missing, invalid, or incorrect
 * error:  Script permission/configuration error
 * warn:   
 * notice: Some issue of which the sysadmin/webmaster ought to be aware
 * info:   Normal activity message
 * debug:  Self-explanatory
d112 1
a112 1
static FILE *log = NULL;
a147 1
    "SERVER_ADDR",
d208 1
a208 1
        log_err("emerg: failed to malloc memory for environment\n");
a256 50
    prog = argv[0];
    /*
     * Check existence/validity of the UID of the user
     * running this program.  Error out if invalid.
     */
    uid = getuid();
    if ((pw = getpwuid(uid)) == NULL) {
	log_err("crit: invalid uid: (%ld)\n", uid);
	exit(102);
    }
    /*
     * See if this is a 'how were you compiled' request, and
     * comply if so.
     */
    if ((argc > 1)
        && (! strcmp(argv[1], "-V"))
        && ((uid == 0)
#ifdef _OSD_POSIX
        /* User name comparisons are case insensitive on BS2000/OSD */
            || (! strcasecmp(HTTPD_USER, pw->pw_name)))
#else  /* _OSD_POSIX */
            || (! strcmp(HTTPD_USER, pw->pw_name)))
#endif /* _OSD_POSIX */
        ) {
#ifdef DOC_ROOT
        fprintf(stderr, " -D DOC_ROOT=\"%s\"\n", DOC_ROOT);
#endif
#ifdef GID_MIN
        fprintf(stderr, " -D GID_MID=%d\n", GID_MIN);
#endif
#ifdef HTTPD_USER
        fprintf(stderr, " -D HTTPD_USER=\"%s\"\n", HTTPD_USER);
#endif
#ifdef LOG_EXEC
        fprintf(stderr, " -D LOG_EXEC=\"%s\"\n", LOG_EXEC);
#endif
#ifdef SAFE_PATH
        fprintf(stderr, " -D SAFE_PATH=\"%s\"\n", SAFE_PATH);
#endif
#ifdef SUEXEC_UMASK
        fprintf(stderr, " -D SUEXEC_UMASK=%03o\n", SUEXEC_UMASK);
#endif
#ifdef UID_MIN
        fprintf(stderr, " -D UID_MID=%d\n", UID_MIN);
#endif
#ifdef USERDIR_SUFFIX
        fprintf(stderr, " -D USERDIR_SUFFIX=\"%s\"\n", USERDIR_SUFFIX);
#endif
        exit(0);
    }
d261 1
d263 1
a263 1
	log_err("alert: too few arguments\n");
d271 10
d288 1
a288 2
        log_err("crit: calling user mismatch (%s instead of %s)\n",
		pw->pw_name, HTTPD_USER);
d291 1
a291 1
#else  /* _OSD_POSIX */
d293 1
a293 2
        log_err("crit: calling user mismatch (%s instead of %s)\n",
		pw->pw_name, HTTPD_USER);
d296 1
a296 1
#endif /* _OSD_POSIX */
d306 1
a306 1
        log_err("error: invalid command (%s)\n", cmd);
d324 1
a324 1
	log_err("crit: invalid target user name: (%s)\n", target_uname);
d333 1
a333 1
	    log_err("crit: invalid target group name: (%s)\n", target_gname);
a343 29
#ifdef _OSD_POSIX
    /*
     * Initialize BS2000 user environment
     */
    {
	pid_t pid;
	int status;

	switch (pid = ufork(target_uname))
	{
	case -1:	/* Error */
	    log_err("emerg: failed to setup bs2000 environment for user "
		    "%s: %s\n",
		    target_uname, strerror(errno));
	    exit(150);
	case 0:	/* Child */
	    break;
	default:	/* Father */
	    while (pid != waitpid(pid, &status, 0))
		;
	    /* @@@@@@ FIXME: should we deal with STOP signals as well? */
	    if (WIFSIGNALED(status)) {
		kill (getpid(), WTERMSIG(status));
	    }
	    exit(WEXITSTATUS(status));
	}
    }
#endif /* _OSD_POSIX */

d355 1
a355 1
    log_err("info: (target/actual) uid: (%s/%s) gid: (%s/%s) cmd: %s\n",
d365 1
a365 1
	log_err("crit: cannot run as forbidden uid (%d/%s)\n", uid, cmd);
d374 1
a374 1
	log_err("crit: cannot run as forbidden gid (%d/%s)\n", gid, cmd);
d385 1
a385 1
	log_err("emerg: failed to setgid (%ld: %s)\n", gid, cmd);
d393 1
a393 1
	log_err("emerg: failed to setuid (%ld: %s)\n", uid, cmd);
d406 1
a406 1
	log_err("emerg: cannot get current working directory\n");
d415 1
a415 2
	    log_err("emerg: cannot get docroot information (%s)\n",
		    target_homedir);
d423 1
a423 1
	    log_err("emerg: cannot get docroot information (%s)\n", DOC_ROOT);
d429 1
a429 1
	log_err("error: command not in docroot (%s/%s)\n", cwd, cmd);
d437 1
a437 1
	log_err("error: cannot stat directory: (%s)\n", cwd);
d445 1
a445 1
	log_err("error: directory is writable by others: (%s)\n", cwd);
d453 1
a453 1
	log_err("error: cannot stat program: (%s)\n", cmd);
d461 1
a461 1
	log_err("error: file is writable by others: (%s/%s)\n", cwd, cmd);
d469 1
a469 1
	log_err("error: file is either setuid or setgid: (%s/%s)\n", cwd, cmd);
d481 1
a481 1
	log_err("error: target uid/gid (%ld/%ld) mismatch "
d494 1
a494 1
	log_err("error: file has no execute permission: (%s/%s)\n", cwd, cmd);
a497 10
#ifdef SUEXEC_UMASK
    /*
     * umask() uses inverse logic; bits are CLEAR for allowed access.
     */
    if ((~SUEXEC_UMASK) & 0022) {
	log_err("notice: SUEXEC_UMASK of %03o allows "
		"write permission to group and/or other\n", SUEXEC_UMASK);
    }
    umask(SUEXEC_UMASK);
#endif /* SUEXEC_UMASK */
d503 4
a506 10
     * automatically when log_err is called.  Note that the log
     * might not actually be open if LOG_EXEC isn't defined.
     * However, the "log" cell isn't ifdef'd so let's be defensive
     * and assume someone might have done something with it
     * outside an ifdef'd LOG_EXEC block.
     */
    if (log != NULL) {
	fclose(log);
	log = NULL;
    }
a510 8
#ifdef NEED_HASHBANG_EMUL
    /* We need the #! emulation when we want to execute scripts */
    {
	extern char **environ;

	ap_execve(cmd, &argv[3], environ);
    }
#else /*NEED_HASHBANG_EMUL*/
a511 1
#endif /*NEED_HASHBANG_EMUL*/
d521 1
a521 1
    log_err("emerg: (%d)%s: exec failed (%s)\n", errno, strerror(errno), cmd);
@


1.1.1.3
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@a230 5
#ifdef MOD_SSL
	if (!strncmp(*ep, "HTTP_", 5) || 
	    !strncmp(*ep, "HTTPS", 5) ||
	    !strncmp(*ep, "SSL_", 4)) {
#else
a231 1
#endif
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
a113 5
#if defined(NEED_STRERROR)
extern char *sys_errlist[];
#define strerror(x) sys_errlist[(x)]
#endif

d129 39
a167 47
    /* variable name starts with */
    "HTTP_",
#ifdef MOD_SSL
    "HTTPS_",
    "SSL_",
#endif

    /* variable name is */
    "AUTH_TYPE=",
    "CONTENT_LENGTH=",
    "CONTENT_TYPE=",
    "DATE_GMT=",
    "DATE_LOCAL=",
    "DOCUMENT_NAME=",
    "DOCUMENT_PATH_INFO=",
    "DOCUMENT_ROOT=",
    "DOCUMENT_URI=",
    "FILEPATH_INFO=",
    "GATEWAY_INTERFACE=",
    "LAST_MODIFIED=",
    "PATH_INFO=",
    "PATH_TRANSLATED=",
    "QUERY_STRING=",
    "QUERY_STRING_UNESCAPED=",
    "REMOTE_ADDR=",
    "REMOTE_HOST=",
    "REMOTE_IDENT=",
    "REMOTE_PORT=",
    "REMOTE_USER=",
    "REDIRECT_QUERY_STRING=",
    "REDIRECT_STATUS=",
    "REDIRECT_URL=",
    "REQUEST_METHOD=",
    "REQUEST_URI=",
    "SCRIPT_FILENAME=",
    "SCRIPT_NAME=",
    "SCRIPT_URI=",
    "SCRIPT_URL=",
    "SERVER_ADMIN=",
    "SERVER_NAME=",
    "SERVER_ADDR=",
    "SERVER_PORT=",
    "SERVER_PROTOCOL=",
    "SERVER_SOFTWARE=",
    "UNIQUE_ID=",
    "USER_NAME=",
    "TZ=",
a219 10
    /* While cleaning the environment, the environment should be clean.
     * (e.g. malloc() may get the name of a file for writing debugging info.
     * Bad news if MALLOC_DEBUG_FILE is set to /etc/passwd.  Sprintf() may be
     * susceptible to bad locale settings....)
     * (from PR 2790)
     */
    char **envp = environ;
    char *empty_ptr = NULL;

    environ = &empty_ptr; /* VERY safe environment */
d230 21
a250 9
    for (ep = envp; *ep && cidx < AP_ENVBUF-1; ep++) {
        for (idx = 0; safe_env_lst[idx]; idx++) {
            if (!strncmp(*ep, safe_env_lst[idx],
                         strlen(safe_env_lst[idx]))) {
		cleanenv[cidx] = *ep;
		cidx++;
                break;
            }
        }
a276 5
    /*
     * Start with a "clean" environment
     */
    clean_env();

d305 1
a305 1
        fprintf(stderr, " -D GID_MIN=%d\n", GID_MIN);
d320 1
a320 1
        fprintf(stderr, " -D UID_MIN=%d\n", UID_MIN);
d410 1
a410 1
	pid_t pid, reaped;
d423 1
a423 2
	    while (pid != (reaped = waitpid(pid, &status, 0))
		   && (reaped != -1 || errno != ECHILD))
d599 1
@


1.1.1.5
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@a136 1
    "HTTPS=",
@


