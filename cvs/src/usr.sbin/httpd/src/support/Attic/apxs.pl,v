head	1.13;
access;
symbols
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.34
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.32
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.30
	OPENBSD_5_0:1.11.0.28
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.26
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.24
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.20
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.22
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.18
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.16
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.14
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.12
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.10
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.12;

1.12
date	2013.03.25.16.38.19;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2004.12.07.22.18.31;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.21.13.11.40;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.19.21.31.16;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.29.02.08.08;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.22.18.40;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.19.11.17.40;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.25.18.30.18;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.09.29.06.30.08;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.03.01.04.29.13;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.07.19;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.22;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.07.19.48.15;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.45;	author henning;	state Exp;
branches;
next	;


desc
@@


1.13
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@#!/usr/local/bin/perl
## ====================================================================
## The Apache Software License, Version 1.1
##
## Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
## reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
##
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in
##    the documentation and/or other materials provided with the
##    distribution.
##
## 3. The end-user documentation included with the redistribution,
##    if any, must include the following acknowledgment:
##       "This product includes software developed by the
##        Apache Software Foundation (http://www.apache.org/)."
##    Alternately, this acknowledgment may appear in the software itself,
##    if and wherever such third-party acknowledgments normally appear.
##
## 4. The names "Apache" and "Apache Software Foundation" must
##    not be used to endorse or promote products derived from this
##    software without prior written permission. For written
##    permission, please contact apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache",
##    nor may "Apache" appear in their name, without prior written
##    permission of the Apache Software Foundation.
##
## THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
## WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
## ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
## USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
## SUCH DAMAGE.
## ====================================================================
##
## This software consists of voluntary contributions made by many
## individuals on behalf of the Apache Software Foundation.  For more
## information on the Apache Software Foundation, please see
## <http://www.apache.org/>.
##
## Portions of this software are based upon public domain software
## originally written at the National Center for Supercomputing Applications,
## University of Illinois, Urbana-Champaign.
##
##

##
##  apxs -- APache eXtenSion tool
##  Written by Ralf S. Engelschall <rse@@apache.org>
##

require 5.003;
use strict;
package apxs;

##
##  Configuration
##

my $CFG_TARGET        = q(@@TARGET@@);            # substituted via Makefile.tmpl 
my $CFG_CC            = q(@@CC@@);                # substituted via Makefile.tmpl
my $CFG_CFLAGS        = q(@@CFLAGS@@);            # substituted via Makefile.tmpl
my $CFG_CFLAGS_SHLIB  = q(@@CFLAGS_SHLIB@@);      # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = q(@@LD_SHLIB@@);          # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = q(@@LDFLAGS_MOD_SHLIB@@); # substituted via Makefile.tmpl 
my $CFG_LIBS_SHLIB    = q(@@LIBS_SHLIB@@);        # substituted via Makefile.tmpl 
my $CFG_PREFIX        = q(@@prefix@@);            # substituted via APACI install
my $CFG_SBINDIR       = q(@@sbindir@@);           # substituted via APACI install
my $CFG_INCLUDEDIR    = q(@@includedir@@);        # substituted via APACI install
my $CFG_LIBEXECDIR    = q(@@libexecdir@@);        # substituted via APACI install
my $CFG_SYSCONFDIR    = q(@@sysconfdir@@);        # substituted via APACI install

##
##  Cleanup the above stuff
##
$CFG_CFLAGS =~ s|^\s+||;
$CFG_CFLAGS =~ s|\s+$||;
$CFG_CFLAGS =~ s|\s+`.+apaci`||;

##
##  parse argument line
##

#   defaults for parameters
my $opt_n = '';
my $opt_g = '';
my $opt_c = 0;
my $opt_o = '';
my @@opt_D = ();
my @@opt_I = ();
my @@opt_L = ();
my @@opt_l = ();
my @@opt_W = ();
my @@opt_S = ();
my $opt_e = 0;
my $opt_i = 0;
my $opt_a = 0;
my $opt_A = 0;
my $opt_q = 0;

#   default for DSO file extension 
my $dso_ext = "so";
if ($^O eq "cygwin") {
    $dso_ext = "dll";
}

#   this subroutine is derived from Perl's getopts.pl with the enhancement of
#   the "+" metacharater at the format string to allow a list to be build by
#   subsequent occurance of the same option.
sub Getopts {
    my ($argumentative, @@ARGV) = @@_;
    my (@@args, $first, $rest, $pos);
    my ($errs) = 0;
    local ($_);

    @@args = split( / */, $argumentative);
    while(@@ARGV && ($_ = $ARGV[0]) =~ /^-(.)(.*)/) {
        ($first, $rest) = ($1,$2);
        if ($_ =~ m|^--$|) {
            shift(@@ARGV);
            last;
        }
        $pos = index($argumentative,$first);
        if ($pos >= $[) {
            if ($args[$pos+1] eq ':') {
                shift(@@ARGV);
                if ($rest eq '') {
                    unless (@@ARGV) {
                        print STDERR "apxs:Error: Incomplete option: $first (needs an argument)\n";
                        ++$errs;
                    }
                    $rest = shift(@@ARGV);
                }
                eval "\$opt_$first = \$rest;";
            }
            elsif ($args[$pos+1] eq '+') {
                shift(@@ARGV);
                if ($rest eq '') {
                    unless (@@ARGV) {
                        print STDERR "apxs:Error: Incomplete option: $first (needs an argument)\n";
                        ++$errs;
                    }
                    $rest = shift(@@ARGV);
                }
                eval "push(\@@opt_$first, \$rest);";
            }
            else {
                eval "\$opt_$first = 1";
                if ($rest eq '') {
                    shift(@@ARGV);
                }
                else {
                    $ARGV[0] = "-$rest";
                }
            }
        }
        else {
            print STDERR "apxs:Error: Unknown option: $first\n";
            ++$errs;
            if ($rest ne '') {
                $ARGV[0] = "-$rest";
            }
            else {
                shift(@@ARGV);
            }
        }
    }
    return ($errs == 0, @@ARGV);
}

sub usage {
    print STDERR "Usage: apxs -c [-D variable[=value]] [-I incdir] [-L libdir] [-l libname]\n";
    print STDERR "               [-o dsofile] [-S variable=value] [-Wc,compiler-flags]\n";
    print STDERR "               [-Wl,linker-flags] file ...\n";
    print STDERR "       apxs -e [-Aa] [-n name] [-S variable=value] dsofile ...\n";
    print STDERR "       apxs -g [-S variable=value] -n name\n";
    print STDERR "       apxs -i [-Aa] [-n name] [-S variable=value] dsofile ...\n";
    print STDERR "       apxs -q [-S variable=value] query ...\n";
    exit(1);
}

#   option handling
my $rc;
($rc, @@ARGV) = &Getopts("qn:gco:I+D+L+l+W+S+eiaA", @@ARGV);
&usage if ($rc == 0);
&usage if ($#ARGV == -1 and not $opt_g);
&usage if (not $opt_q and not ($opt_g and $opt_n) and not $opt_i and not $opt_c and not $opt_e);

#   argument handling
my @@args = @@ARGV;
my $name = 'unknown';
$name = $opt_n if ($opt_n ne '');

#   overriding of configuration variables
if (@@opt_S) {
    my ($opt_S);
    foreach $opt_S (@@opt_S) {
        if ($opt_S =~ m/^([^=]+)=(.*)$/) {
            my ($var, $val) = ($1, $2);
            my $oldval = eval "\$CFG_$var";
            unless ($var and $oldval) {
                print STDERR "apxs:Error: no config variable $var\n";
                &usage;
            }
	    $val=~s/"/\\"/g;
            eval "\$CFG_${var}=\"${val}\"";
        } else {
            print STDERR "apxs:Error: malformatted -S option\n";
            &usage;
        }       
    }
}

##
##  Initial DSO support check
##
if ($^O ne "MSWin32") {
if (not -x "$CFG_SBINDIR/$CFG_TARGET") {
    print STDERR "apxs:Error: $CFG_SBINDIR/$CFG_TARGET not found or not executable\n";
    exit(1);
}
if (not grep(/mod_so/, `$CFG_SBINDIR/$CFG_TARGET -l`)) {
    print STDERR "apxs:Error: Sorry, no DSO support for Apache available\n";
    print STDERR "apxs:Error: under your platform. Make sure the Apache\n";
    print STDERR "apxs:Error: module mod_so is compiled into your server\n";
    print STDERR "apxs:Error: binary `$CFG_SBINDIR/$CFG_TARGET'.\n";
    exit(1);
}
}

##
##  Operation
##

#   helper function for executing a list of
#   system command with return code checks
sub execute_cmds {
    my (@@cmds) = @@_;
    my ($cmd, $rc);

    foreach $cmd (@@cmds) {
        print STDERR "$cmd\n";
        $rc = system("$cmd");
        if ($rc != 0) {
            printf(STDERR "apxs:Break: Command failed with rc=%d\n", $rc >> 8);
            exit(1);
        }
    }
}

if ($opt_g) {
    ##
    ##  SAMPLE MODULE SOURCE GENERATION
    ##

    if (-d $name) {
        print STDERR "apxs:Error: Directory `$name' already exists. Remove it first\n";
        exit(1);
    }

    my $data = join('', <DATA>);
    $data =~ s|%NAME%|$name|sg;
    $data =~ s|%TARGET%|$CFG_TARGET|sg;
    $data =~ s|%DSO_EXT%|$dso_ext|sg;

    my ($mkf, $src) = ($data =~ m|^(.+)-=#=-\n(.+)|s);

    print STDERR "Creating [DIR]  $name\n";
    system("mkdir $name");
    print STDERR "Creating [FILE] $name/Makefile\n";
    open(FP, ">${name}/Makefile") || die;
    print FP $mkf;
    close(FP);
    print STDERR "Creating [FILE] $name/mod_$name.c\n";
    open(FP, ">${name}/mod_${name}.c") || die;
    print FP $src;
    close(FP);

    exit(0);
}

if ($opt_q) {
    ##
    ##  QUERY INFORMATION 
    ##

    my $result = '';
    my $arg;
    foreach $arg (@@args) {
        my $ok = 0;
        my $name;
        foreach $name (qw(
            TARGET CC CFLAGS CFLAGS_SHLIB LD_SHLIB LDFLAGS_SHLIB LIBS_SHLIB
            PREFIX SBINDIR INCLUDEDIR LIBEXECDIR SYSCONFDIR
        )) {
            if ($arg eq $name or $arg eq lc($name)) {
                my $val = eval "\$CFG_$name";
                $result .= "${val}##";
                $ok = 1;
            }
        }
        if (not $ok) {
            printf(STDERR "apxs:Error: Invalid query string `%s'\n", $arg);
            exit(1);
        }
    }
    $result =~ s|##$||;
    $result =~ s|##| |g;
    print $result;
}

if ($opt_c) {
    ##
    ##  DSO COMPILATION
    ##

    #   split files into sources and objects
    my @@srcs = ();
    my @@objs = ();
    my $f;
    foreach $f (@@args) {
        if ($f =~ m|\.c$|) {
            push(@@srcs, $f);
        }
        else {
            push(@@objs, $f);
        }
    }

    #   determine output file
    my $dso_file;
    if ($opt_o eq '') {
        if ($#srcs > -1) {
            $dso_file = $srcs[0];
            $dso_file =~ s|\.[^.]+$|.$dso_ext|;
        }
        elsif ($#objs > -1) {
            $dso_file = $objs[0];
            $dso_file =~ s|\.[^.]+$|.$dso_ext|;
        }
        else {
            $dso_file = "mod_unknown.$dso_ext";
        }
    }
    else {
        $dso_file = $opt_o;
    }

    #   create compilation commands
    my @@cmds = ();
    my $opt = '';
    my ($opt_Wc, $opt_I, $opt_D);
    foreach $opt_Wc (@@opt_W) {
        $opt .= "$1 " if ($opt_Wc =~ m|^\s*c,(.*)$|);
    }
    foreach $opt_I (@@opt_I) {
        $opt_I = '"' . $opt_I . '"' if ($opt_I =~ m|\s|);
        $opt .= "-I$opt_I ";
    }
    foreach $opt_D (@@opt_D) {
        $opt .= "-D$opt_D ";
    }
    my $cflags = "$CFG_CFLAGS $CFG_CFLAGS_SHLIB";
    if ($^O eq "MSWin32") {
        my $d = $dso_file;
        $d =~ s|\.so$||;
        $d = '"' . $d . '"' if ($d =~ m|\s|);
        $opt .= "-Fd$d ";
    }
    my $s;
    foreach $s (@@srcs) {
        my $o = $s;
        $s = '"' . $s . '"' if ($s =~ m|\s|);
        if ($^O ne "MSWin32") {
            $o =~ s|\.c$|.o|;
            $o =~ s|^.*/||;
            $o = '"' . $o . '"' if ($o =~ m|\s|);
            push(@@cmds, "$CFG_CC $cflags -I$CFG_INCLUDEDIR $opt -c $s");
        } else {
            $o =~ s|\.c$|.obj|;
            $o =~ s|^.*/||;
            $o = '"' . $o . '"' if ($o =~ m|\s|);
            push(@@cmds, "$CFG_CC $cflags -I\"$CFG_INCLUDEDIR\" $opt -c $s -Fo$o");
        }
        unshift(@@objs, $o);
    }

    #   create link command
    my $cmd;
    if ($^O ne "MSWin32") {
        $cmd = "$CFG_LD_SHLIB $CFG_LDFLAGS_SHLIB -o $dso_file";
    } else {
        $cmd = "$CFG_LD_SHLIB $CFG_LDFLAGS_SHLIB -out:\"$dso_file\"";
    }
    my $o;
    foreach $o (@@objs) {
        $cmd .= " $o";
    }
    $opt = '';
    my ($opt_Wl, $opt_L, $opt_l);
    foreach $opt_Wl (@@opt_W) {
        if ($CFG_LD_SHLIB !~ m/gcc$/) {
            $opt .= " $1" if ($opt_Wl =~ m|^\s*l,(.*)$|);
        } else {
            $opt .= " -W$opt_Wl";
        }
    }
    foreach $opt_L (@@opt_L) {
        if ($^O ne "MSWin32") {
            $opt .= " -L$opt_L";
        } else {
            $opt .= " -libpath:\"$opt_L\"";
        }
    }
    foreach $opt_l (@@opt_l) {
        if ($^O ne "MSWin32") {
            $opt .= " -l$opt_l";
        } else {
            $opt .= " $opt_l";
        }
    }
    $cmd .= $opt;
    $cmd .= " $CFG_LIBS_SHLIB";
    push(@@cmds, $cmd);

    #   execute the commands
    &execute_cmds(@@cmds);

    #   allow one-step compilation and installation
    if ($opt_i or $opt_e) {
        @@args = ($dso_file);
    }
}

if ($opt_i or $opt_e) {
    ##
    ##  DSO INSTALLATION
    ##

    #   determine installation commands
    #   and corresponding LoadModule/AddModule directives
    my @@lmd = ();
    my @@amd = ();
    my @@cmds = ();
    my $f;
    foreach $f (@@args) {
        if ($f !~ m|\.$dso_ext$|) {
            print STDERR "apxs:Error: file $f is not a DSO\n";
            exit(1);
        }
        my $t = $f;
        if ($^O ne "MSWin32") {
            $t =~ s|^.+/([^/]+)$|$1|;
            if ($opt_i) {
                push(@@cmds, "cp $f $CFG_LIBEXECDIR/$t");
                push(@@cmds, "chmod 755 $CFG_LIBEXECDIR/$t");
            }
        }
	else {
            $t =~ s|^.+[/\\]([^/\\]+)$|$1|;
            if ($opt_i) {
                push(@@cmds, "copy \"$f\" \"$CFG_LIBEXECDIR/$t\"");
            }
        }
        
        #   determine module symbolname and filename
        my $filename = '';
        if ($name eq 'unknown') {
            $name = '';
            my $base = $f;
            $base =~ s|\.[^.]+$||;
            if (-f "$base.c") {
                open(FP, "<$base.c");
                my $content = join('', <FP>);
                close(FP);
                if ($content =~ m|.*module\s+(?:MODULE_VAR_EXPORT\s+)?([a-zA-Z0-9_]+)_module\s*=\s*.*|s) {
                    $name = "$1";
                    $filename = "$base.c";
                    $filename =~ s|^.+/||;
                    $filename =~ s|^.+\\|| if ($^O eq "MSWin32");
                }
            }
            if ($name eq '') {
                if ($base =~ m|.*mod_([a-zA-Z0-9_]+)\..+|) {
                    $name = "$1";
                    $filename = $base;
                    $filename =~ s|^.+/||;
                    $filename =~ s|^.+\\|| if ($^O eq "MSWin32");
                }
            }
            if ($name eq '') {
                print STDERR "apxs:Error: Sorry, cannot determine bootstrap symbol name.\n";
                print STDERR "apxs:Error: Please specify one with option `-n'.\n";
                exit(1);
            }
        }
        if ($filename eq '') {
            $filename = "mod_${name}.c";
        }
        my $dir = $CFG_LIBEXECDIR;
        $dir =~ s|^$CFG_PREFIX/?||;
        $dir =~ s|(.)$|$1/|;
        push(@@lmd, sprintf("LoadModule %-18s %s", "${name}_module", "$dir$t"));
        push(@@amd, sprintf("AddModule %s", $filename));
    }

    #   activate module via LoadModule/AddModule directive
    if ($opt_a or $opt_A) {
        my $cfgbase = "$CFG_SYSCONFDIR/$CFG_TARGET";
        if (not -f "$cfgbase.conf") {
            print STDERR "apxs:Error: Config file $cfgbase.conf not found\n";
            exit(1);
        }

        open(FP, "<$cfgbase.conf") || die;
        my $content = join('', <FP>);
        close(FP);

        if ($content !~ m|\n#?\s*LoadModule\s+|) {
            print STDERR "apxs:Error: Activation failed for custom $cfgbase.conf file.\n";
            print STDERR "apxs:Error: At least one `LoadModule' directive already has to exist.\n";
            exit(1);
        }

        my $lmd;
        my $c = '';
        $c = '#' if ($opt_A);
        foreach $lmd (@@lmd) {
            my $what = $opt_A ? "preparing" : "activating";
            if ($content !~ m|\n#?\s*$lmd|) {
                # check for open <containers>, so that the new LoadModule
                # directive always appears *outside* of an <container>.

                my $before = ($content =~ m|^(.*\n)#?\s*LoadModule\s+[^\n]+\n|s)[0];

                # the '()=' trick forces list context and the scalar
                # assignment counts the number of list members (aka number
                # of matches) then
                my $cntopen = () = ($before =~ m|^\s*<[^/].*$|mg);
                my $cntclose = () = ($before =~ m|^\s*</.*$|mg);

                if ($cntopen == $cntclose) {
                    # fine. Last LoadModule is contextless.
                    $content =~ s|^(.*\n#?\s*LoadModule\s+[^\n]+\n)|$1$c$lmd\n|s;
                }
                elsif ($cntopen < $cntclose) {
                    print STDERR 'Configuration file is not valid. There are '
                                 . "sections closed before opened.\n";
                    exit(1);
                }
                else {
                    # put our cmd after the section containing the last
                    # LoadModule.
                    my $found =
                    $content =~ s!\A (               # string and capture start
                                  (?:(?:
                                    ^\s*             # start of conf line with a
                                    (?:[^<]|<[^/])   # directive which does not
                                                     # start with '</'

                                    .*(?:$)\n        # rest of the line.
                                                     # the '$' is in parentheses
                                                     # to avoid misinterpreting
                                                     # the string "$\" as
                                                     # perl variable.

                                    )*               # catch as much as possible
                                                     # of such lines. (including
                                                     # zero)

                                    ^\s*</.*(?:$)\n? # after the above, we
                                                     # expect a config line with
                                                     # a closing container (</)

                                  ) {$cntopen}       # the whole pattern (bunch
                                                     # of lines that end up with
                                                     # a closing directive) must
                                                     # be repeated $cntopen
                                                     # times. That's it.
                                                     # Simple, eh? ;-)

                                  )                  # capture end
                                 !$1$c$lmd\n!mx;

                    unless ($found) {
                        print STDERR 'Configuration file is not valid. There '
                                     . "are sections opened and not closed.\n";
                        exit(1);
                    }
                }
            } else {
                # replace already existing LoadModule line
                $content =~ s|^(.*\n)#?\s*$lmd[^\n]*\n|$1$c$lmd\n|s;
            }
            $lmd =~ m|LoadModule\s+(.+?)_module.*|;
            print STDERR "[$what module `$1' in $cfgbase.conf]\n";
        }
        my $amd;
        foreach $amd (@@amd) {
            if ($content !~ m|\n#?\s*$amd|) {
                # check for open <containers> etc. see above for explanations.

                my $before = ($content =~ m|^(.*\n)#?\s*AddModule\s+[^\n]+\n|s)[0];
                my $cntopen = () = ($before =~ m|^\s*<[^/].*$|mg);
                my $cntclose = () = ($before =~ m|^\s*</.*$|mg);

                if ($cntopen == $cntclose) {
                    $content =~ s|^(.*\n#?\s*AddModule\s+[^\n]+\n)|$1$c$amd\n|s;
                }
                elsif ($cntopen < $cntclose) {
                    # cannot happen here, but who knows ...
                    print STDERR 'Configuration file is not valid. There are '
                                 . "sections closed before opened.\n";
                    exit(1);
                }
                else {
                    unless ($content =~ s!\A((?:(?:^\s*(?:[^<]|<[^/]).*(?:$)\n)*
                                          ^\s*</.*(?:$)\n?){$cntopen})
                                         !$1$c$amd\n!mx) {
                        # cannot happen here, anyway.
                        print STDERR 'Configuration file is not valid. There '
                                     . "are sections opened and not closed.\n";
                        exit(1);
                    }
                }
            } else {
                # replace already existing AddModule line
                $content =~ s|^(.*\n)#?\s*$amd[^\n]*\n|$1$c$amd\n|s;
            }
        }
        if (@@lmd or @@amd) {
            if (open(FP, ">$cfgbase.conf.new")) {
                print FP $content;
                close(FP);
                if ($^O ne "MSWin32") {
                    push(@@cmds, "cp $cfgbase.conf $cfgbase.conf.bak");
                    push(@@cmds, "cp $cfgbase.conf.new $cfgbase.conf");
                    push(@@cmds, "rm $cfgbase.conf.new");
                } else {
                    $cfgbase =~ s|/|\\|g;
                    push(@@cmds, "copy \"$cfgbase.conf\" \"$cfgbase.conf.bak\"");
                    push(@@cmds, "copy \"$cfgbase.conf.new\" \"$cfgbase.conf\"");
                    push(@@cmds, "del \"$cfgbase.conf.new\"");
                }
            } else {
                print STDERR "apxs:Error: unable to open configuration file\n";
            }
        }
    }

    #   execute the commands
    &execute_cmds(@@cmds);
}

##EOF##
__DATA__
##
##  Makefile -- Build procedure for sample %NAME% Apache module
##  Autogenerated via ``apxs -n %NAME% -g''.
##

#   the used tools
APXS=apxs
APACHECTL=apachectl

#   additional user defines, includes and libraries
#DEF=-Dmy_define=my_value
#INC=-Imy/include/dir
#LIB=-Lmy/lib/dir -lmylib

#   the default target
all: mod_%NAME%.%DSO_EXT%

#   compile the DSO file
mod_%NAME%.%DSO_EXT%: mod_%NAME%.c
	$(APXS) -c $(DEF) $(INC) $(LIB) mod_%NAME%.c

#   install the DSO file into the Apache installation
#   and activate it in the Apache configuration
install: all
	$(APXS) -i -a -n '%NAME%' mod_%NAME%.%DSO_EXT%

#   cleanup
clean:
	-rm -f mod_%NAME%.o mod_%NAME%.%DSO_EXT%

#   simple test
test: reload
	lynx -mime_header http://localhost/%NAME%

#   reload the module by installing and restarting Apache
reload: install restart

#   the general Apache start/restart/stop procedures
start:
	$(APACHECTL) start
restart:
	$(APACHECTL) restart
stop:
	$(APACHECTL) stop

-=#=-
/* 
**  mod_%NAME%.c -- Apache sample %NAME% module
**  [Autogenerated via ``apxs -n %NAME% -g'']
**
**  To play with this sample module, first compile it into a
**  DSO file and install it into Apache's libexec directory 
**  by running:
**
**    $ apxs -c -i mod_%NAME%.c
**
**  Then activate it in Apache's %TARGET%.conf file, for instance
**  for the URL /%NAME%, as follows:
**
**    #   %TARGET%.conf
**    LoadModule %NAME%_module libexec/mod_%NAME%.%DSO_EXT%
**    <Location /%NAME%>
**    SetHandler %NAME%
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /%NAME and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/%NAME% 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_%NAME%.c
*/ 

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

/* The sample content handler */
static int %NAME%_handler(request_rec *r)
{
    r->content_type = "text/html";      
    ap_send_http_header(r);
    if (!r->header_only)
        ap_rputs("The sample page from mod_%NAME%.c\n", r);
    return OK;
}

/* Dispatch list of content handlers */
static const handler_rec %NAME%_handlers[] = { 
    { "%NAME%", %NAME%_handler }, 
    { NULL, NULL }
};

/* Dispatch list for API hooks */
module MODULE_VAR_EXPORT %NAME%_module = {
    STANDARD_MODULE_STUFF, 
    NULL,                  /* module initializer                  */
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    %NAME%_handlers,       /* [#8] MIME-typed-dispatched handlers */
    NULL,                  /* [#1] URI to filename translation    */
    NULL,                  /* [#4] validate user id from request  */
    NULL,                  /* [#5] check if the user is ok _here_ */
    NULL,                  /* [#3] check access by host address   */
    NULL,                  /* [#6] determine MIME type            */
    NULL,                  /* [#7] pre-run fixups                 */
    NULL,                  /* [#9] log a transaction              */
    NULL,                  /* [#2] header parser                  */
    NULL,                  /* child_init                          */
    NULL,                  /* child_exit                          */
    NULL                   /* [#0] post read-request              */
#ifdef EAPI
   ,NULL,                  /* EAPI: add_module                    */
    NULL,                  /* EAPI: remove_module                 */
    NULL,                  /* EAPI: rewrite_command               */
    NULL                   /* EAPI: new_connection                */
#endif
};

@


1.12
log
@remove useless line that breaks with new perl
@
text
@@


1.11
log
@sync usage() w/ man page;
@
text
@a128 1
    local ($[) = 0;
@


1.10
log
@merge
@
text
@d187 7
a193 7
    print STDERR "Usage: apxs -g [-S <var>=<val>] -n <modname>\n";
    print STDERR "       apxs -q [-S <var>=<val>] <query> ...\n";
    print STDERR "       apxs -c [-S <var>=<val>] [-o <dsofile>] [-D <name>[=<value>]]\n";
    print STDERR "               [-I <incdir>] [-L <libdir>] [-l <libname>] [-Wc,<flags>]\n";
    print STDERR "               [-Wl,<flags>] <files> ...\n";
    print STDERR "       apxs -i [-S <var>=<val>] [-a] [-A] [-n <modname>] <dsofile> ...\n";
    print STDERR "       apxs -e [-S <var>=<val>] [-a] [-A] [-n <modname>] <dsofile> ...\n";
@


1.9
log
@merge
@
text
@d5 1
a5 1
## Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d546 60
a605 1
                 $content =~ s|^(.*\n#?\s*LoadModule\s+[^\n]+\n)|$1$c$lmd\n|sg;
d607 2
a608 1
                 $content =~ s|^(.*\n)#?\s*$lmd[^\n]*\n|$1$c$lmd\n|sg;
d616 25
a640 1
                 $content =~ s|^(.*\n#?\s*AddModule\s+[^\n]+\n)|$1$c$amd\n|sg;
d642 2
a643 1
                 $content =~ s|^(.*\n)#?\s*$amd[^\n]*\n|$1$c$amd\n|sg;
@


1.8
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d115 6
d279 1
d350 1
a350 1
            $dso_file =~ s|\.[^.]+$|.so|;
d354 1
a354 1
            $dso_file =~ s|\.[^.]+$|.so|;
d357 1
a357 1
            $dso_file = "mod_unknown.so";
d462 1
a462 1
        if ($f !~ m|\.so$|) {
d602 1
a602 1
all: mod_%NAME%.so
d605 1
a605 1
mod_%NAME%.so: mod_%NAME%.c
d611 1
a611 1
	$(APXS) -i -a -n '%NAME%' mod_%NAME%.so
d615 1
a615 1
	-rm -f mod_%NAME%.o mod_%NAME%.so
d647 1
a647 1
**    LoadModule %NAME%_module libexec/mod_%NAME%.so
@


1.7
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d3 4
a6 1
## Copyright (c) 1998-1999 The Apache Group.  All rights reserved.
d13 1
a13 1
##    notice, this list of conditions and the following disclaimer. 
d20 20
a39 23
## 3. All advertising materials mentioning features or use of this
##    software must display the following acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## 4. The names "Apache Server" and "Apache Group" must not be used to
##    endorse or promote products derived from this software without
##    prior written permission. For written permission, please contact
##    apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache"
##    nor may "Apache" appear in their names without prior written
##    permission of the Apache Group.
##
## 6. Redistributions of any form whatsoever must retain the following
##    acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
## EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d41 7
a47 7
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
## NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
## LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.
d51 8
a58 5
## individuals on behalf of the Apache Group and was originally based
## on public domain software written at the National Center for
## Supercomputing Applications, University of Illinois, Urbana-Champaign.
## For more information on the Apache Group and the Apache HTTP server
## project, please see <http://www.apache.org/>.
d214 1
d226 1
d238 1
d365 1
d372 6
d381 12
a392 3
        $o =~ s|\.c$|.o|;
        $o =~ s|^.*/||;
        push(@@cmds, "$CFG_CC $cflags -I$CFG_INCLUDEDIR $opt -c $s");
d397 6
a402 1
    my $cmd = "$CFG_LD_SHLIB $CFG_LDFLAGS_SHLIB -o $dso_file";
d417 5
a421 1
        $opt .= " -L$opt_L";
d424 5
a428 1
        $opt .= " -l$opt_l";
d460 12
a471 4
        $t =~ s|^.+/([^/]+)$|$1|;
        if ($opt_i) {
            push(@@cmds, "cp $f $CFG_LIBEXECDIR/$t");
            push(@@cmds, "chmod 755 $CFG_LIBEXECDIR/$t");
d473 1
a473 1

d487 2
a488 1
                    $filename =~ s|^[^/]+/||;
d495 2
a496 1
                    $filename =~ s|^[^/]+/||;
a514 3
    #   execute the commands
    &execute_cmds(@@cmds);

d517 3
a519 2
        if (not -f "$CFG_SYSCONFDIR/$CFG_TARGET.conf") {
            print STDERR "apxs:Error: Config file $CFG_SYSCONFDIR/$CFG_TARGET.conf not found\n";
d523 1
a523 1
        open(FP, "<$CFG_SYSCONFDIR/$CFG_TARGET.conf") || die;
d528 1
a528 1
            print STDERR "apxs:Error: Activation failed for custom $CFG_SYSCONFDIR/$CFG_TARGET.conf file.\n";
d544 1
a544 1
            print STDERR "[$what module `$1' in $CFG_SYSCONFDIR/$CFG_TARGET.conf]\n";
d555 1
a555 1
            if (open(FP, ">$CFG_SYSCONFDIR/$CFG_TARGET.conf.new")) {
d558 10
a567 3
                system("cp $CFG_SYSCONFDIR/$CFG_TARGET.conf $CFG_SYSCONFDIR/$CFG_TARGET.conf.bak && " .
                       "cp $CFG_SYSCONFDIR/$CFG_TARGET.conf.new $CFG_SYSCONFDIR/$CFG_TARGET.conf && " .
                       "rm $CFG_SYSCONFDIR/$CFG_TARGET.conf.new");
d573 3
@


1.6
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d248 1
a248 1
            printf(STDERR "apxs:Break: Command failed with rc=%d\n", $rc << 8);
@


1.5
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d300 1
a300 1
                $result .= "${val}::";
d309 2
a310 2
    $result =~ s|::$||;
    $result =~ s|::| |;
@


1.4
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d71 12
a82 12
my $CFG_TARGET        = '@@TARGET@@';            # substituted via Makefile.tmpl 
my $CFG_CC            = '@@CC@@';                # substituted via Makefile.tmpl
my $CFG_CFLAGS        = '@@CFLAGS@@';            # substituted via Makefile.tmpl
my $CFG_CFLAGS_SHLIB  = '@@CFLAGS_SHLIB@@';      # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = '@@LD_SHLIB@@';          # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = '@@LDFLAGS_MOD_SHLIB@@'; # substituted via Makefile.tmpl 
my $CFG_LIBS_SHLIB    = '@@LIBS_SHLIB@@';        # substituted via Makefile.tmpl 
my $CFG_PREFIX        = '@@prefix@@';            # substituted via APACI install
my $CFG_SBINDIR       = '@@sbindir@@';           # substituted via APACI install
my $CFG_INCLUDEDIR    = '@@includedir@@';        # substituted via APACI install
my $CFG_LIBEXECDIR    = '@@libexecdir@@';        # substituted via APACI install
my $CFG_SYSCONFDIR    = '@@sysconfdir@@';        # substituted via APACI install
a91 15
##  Initial shared object support check
##
if (not -x "$CFG_SBINDIR/$CFG_TARGET") {
	print STDERR "apxs:Error: $CFG_SBINDIR/$CFG_TARGET not found or not executable\n";
	exit(1);
}
if (not grep(/mod_so/, `$CFG_SBINDIR/$CFG_TARGET -l`)) {
    print STDERR "apxs:Error: Sorry, no shared object support for Apache\n";
    print STDERR "apxs:Error: available under your platform. Make sure\n";
    print STDERR "apxs:Error: the Apache module mod_so is compiled into\n";
    print STDERR "apxs:Error: your server binary `$CFG_SBINDIR/$CFG_TARGET'.\n";
    exit(1);
}

##
d130 2
a131 2
        if($pos >= $[) {
            if($args[$pos+1] eq ':') {
d133 1
a133 1
                if($rest eq '') {
d144 1
a144 1
                if($rest eq '') {
d155 1
a155 1
                if($rest eq '') {
d166 1
a166 1
            if($rest ne '') {
d200 1
d204 12
a215 15
	if ($opt_S =~ m/^([^=]+)=(.*)$/) {
	    my ($var) = $1;
	    my ($val) = $2;
	    my $oldval = eval "\$CFG_$var";

	    unless ($var and $oldval) {
		print STDERR "apxs:Error: no config variable $var\n";
		&usage;
	    }

	    eval "\$CFG_${var}=\"${val}\"";
	} else {
	    print STDERR "apxs:Error: malformatted -S option\n";
	    &usage;
	}	
d220 15
d260 1
a260 1
        print STDERR "apxs:Error: Directory `$name' already exists. Remove first\n";
a283 1

d316 1
a316 1
    ##  SHARED OBJECT COMPILATION
d369 1
d383 5
a387 5
		if($CFG_LD_SHLIB ne "gcc") {
	        $opt .= " $1" if ($opt_Wl =~ m|^\s*l,(.*)$|);
		} else {
	        $opt .= " -W$opt_Wl";
		}
d404 1
a404 1
        @@args = ( $dso_file );
d410 1
a410 1
    ##  SHARED OBJECT INSTALLATION
d421 1
a421 1
            print STDERR "apxs:Error: file $f is not a shared object\n";
d427 2
a428 2
	    push(@@cmds, "cp $f $CFG_LIBEXECDIR/$t");
	    push(@@cmds, "chmod 755 $CFG_LIBEXECDIR/$t");
d455 2
a456 2
                print "apxs:Error: Sorry, cannot determine bootstrap symbol name\n";
                print "apxs:Error: Please specify one with option `-n'\n";
d476 1
a476 1
            print "apxs:Error: Config file $CFG_SYSCONFDIR/$CFG_TARGET.conf not found\n";
d512 9
a520 6
            open(FP, ">$CFG_SYSCONFDIR/$CFG_TARGET.conf.new") || die;
            print FP $content;
            close(FP);
            system("cp $CFG_SYSCONFDIR/$CFG_TARGET.conf $CFG_SYSCONFDIR/$CFG_TARGET.conf.bak && " .
                   "cp $CFG_SYSCONFDIR/$CFG_TARGET.conf.new $CFG_SYSCONFDIR/$CFG_TARGET.conf && " .
                   "rm $CFG_SYSCONFDIR/$CFG_TARGET.conf.new");
d536 1
a536 1
#   additional defines, includes and libraries
d544 1
a544 1
#   compile the shared object file
d548 2
a549 1
#   install the shared object file into Apache 
d561 1
a561 2
#   install and activate shared object by reloading Apache to
#   force a reload of the shared object file
d564 1
a564 2
#   the general Apache start/restart/stop
#   procedures
d577 1
a577 1
**  To play with this sample module first compile it into a
d583 2
a584 2
**  Then activate it in Apache's %TARGET%.conf file for instance
**  for the URL /%NAME% in as follows:
@


1.3
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d71 12
a82 12
my $CFG_TARGET        = '@@TARGET@@';        # substituted via Makefile.tmpl 
my $CFG_CC            = '@@CC@@';            # substituted via Makefile.tmpl
my $CFG_CFLAGS        = '@@CFLAGS@@';        # substituted via Makefile.tmpl
my $CFG_CFLAGS_SHLIB  = '@@CFLAGS_SHLIB@@';  # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = '@@LD_SHLIB@@';      # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = '@@LDFLAGS_SHLIB@@'; # substituted via Makefile.tmpl 
my $CFG_LIBS_SHLIB    = '@@LIBS_SHLIB@@';    # substituted via Makefile.tmpl 
my $CFG_PREFIX        = '@@prefix@@';        # substituted via APACI install
my $CFG_SBINDIR       = '@@sbindir@@';       # substituted via APACI install
my $CFG_INCLUDEDIR    = '@@includedir@@';    # substituted via APACI install
my $CFG_LIBEXECDIR    = '@@libexecdir@@';    # substituted via APACI install
my $CFG_SYSCONFDIR    = '@@sysconfdir@@';    # substituted via APACI install
d94 4
d120 2
d193 7
a199 6
    print STDERR "Usage: apxs -g -n <modname>\n";
    print STDERR "       apxs -q <query> ...\n";
    print STDERR "       apxs -c [-o <dsofile>] [-D <name>[=<value>]] [-I <incdir>]\n";
    print STDERR "               [-L <libdir>] [-l <libname>] [-Wc,<flags>] [-Wl,<flags>]\n";
    print STDERR "               <files> ...\n";
    print STDERR "       apxs -i [-a] [-A] [-n <modname>] <dsofile> ...\n";
d205 1
a205 1
($rc, @@ARGV) = &Getopts("qn:gco:I+D+L+l+W+iaA", @@ARGV);
d208 1
a208 1
&usage if (not $opt_q and not ($opt_g and $opt_n) and not $opt_i and not $opt_c);
d215 21
d385 5
a389 1
        $opt .= " $1" if ($opt_Wl =~ m|^\s*l,(.*)$|);
d405 1
a405 1
    if ($opt_i) {
d410 1
a410 1
if ($opt_i) {
d428 4
a431 2
        push(@@cmds, "cp $f $CFG_LIBEXECDIR/$t");
        push(@@cmds, "chmod 755 $CFG_LIBEXECDIR/$t");
a491 1
        my $update = 0;
d493 2
d496 1
a497 2
                 my $c = '';
                 $c = '#' if ($opt_A);
d499 2
a500 4
                 $update = 1;
                 $lmd =~ m|LoadModule\s+(.+?)_module.*|;
                 my $what = $opt_A ? "preparing" : "activating";
                 print STDERR "[$what module `$1' in $CFG_SYSCONFDIR/$CFG_TARGET.conf]\n";
d502 2
a507 2
                 my $c = '';
                 $c = '#' if ($opt_A);
d509 2
a510 1
                 $update = 1;
d513 1
a513 1
        if ($update) {
@


1.2
log
@Apache 1.3.4 merge
@
text
@d621 6
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
## Copyright (c) 1998 The Apache Group.  All rights reserved.
d71 1
d94 1
a94 1
if (not grep(/mod_so/, `$CFG_SBINDIR/httpd -l`)) {
d98 1
a98 1
    print STDERR "apxs:Error: your server binary `$CFG_SBINDIR/httpd'.\n";
d115 1
d190 3
a192 2
    print STDERR "               [-L <libdir>] [-l <libname>] <files> ...\n";
    print STDERR "       apxs -i [-a] [-n <modname>] <dsofile> ...\n";
d198 1
a198 1
($rc, @@ARGV) = &Getopts("qn:gco:I+D+L+l+iaA", @@ARGV);
d240 1
d270 1
a270 1
            CC LD_SHLIB CFLAGS CFLAGS_SHLIB LDFLAGS_SHLIB 
d329 4
a332 1
    my ($opt_I, $opt_D);
d355 4
a358 1
    my ($opt_L, $opt_l);
d443 2
a444 2
        if (not -f "$CFG_SYSCONFDIR/httpd.conf") {
            print "apxs:Error: Config file $CFG_SYSCONFDIR/httpd.conf not found\n";
d448 1
a448 1
        open(FP, "<$CFG_SYSCONFDIR/httpd.conf") || die;
d453 1
a453 1
            print STDERR "apxs:Error: Activation failed for custom $CFG_SYSCONFDIR/httpd.conf file.\n";
d468 1
a468 1
                 print STDERR "[$what module `$1' in $CFG_SYSCONFDIR/httpd.conf]\n";
d481 1
a481 1
            open(FP, ">$CFG_SYSCONFDIR/httpd.conf.new") || die;
d484 3
a486 3
            system("cp $CFG_SYSCONFDIR/httpd.conf $CFG_SYSCONFDIR/httpd.conf.bak && " .
                   "cp $CFG_SYSCONFDIR/httpd.conf.new $CFG_SYSCONFDIR/httpd.conf && " .
                   "rm $CFG_SYSCONFDIR/httpd.conf.new");
d494 1
a494 1
##  Makefile -- Apache for sample %NAME% module
d550 1
a550 1
**  Then activate it in Apache's httpd.conf file for instance
d553 1
a553 1
**    #   httpd.conf
d572 1
a572 1
**    Server: Apache/1.3b6-dev
d581 2
a582 1
#include "conf.h"
d613 1
a613 1
    NULL,                  /* [#2] check access by host address   */
d617 1
a617 1
    NULL,                  /* [#3] header parser                  */
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d3 1
a3 4
## The Apache Software License, Version 1.1
##
## Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
## reserved.
d10 1
a10 1
##    notice, this list of conditions and the following disclaimer.
d17 23
a39 20
## 3. The end-user documentation included with the redistribution,
##    if any, must include the following acknowledgment:
##       "This product includes software developed by the
##        Apache Software Foundation (http://www.apache.org/)."
##    Alternately, this acknowledgment may appear in the software itself,
##    if and wherever such third-party acknowledgments normally appear.
##
## 4. The names "Apache" and "Apache Software Foundation" must
##    not be used to endorse or promote products derived from this
##    software without prior written permission. For written
##    permission, please contact apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache",
##    nor may "Apache" appear in their name, without prior written
##    permission of the Apache Software Foundation.
##
## THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
## WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d41 7
a47 7
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
## USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
## SUCH DAMAGE.
d51 5
a55 8
## individuals on behalf of the Apache Software Foundation.  For more
## information on the Apache Software Foundation, please see
## <http://www.apache.org/>.
##
## Portions of this software are based upon public domain software
## originally written at the National Center for Supercomputing Applications,
## University of Illinois, Urbana-Champaign.
##
d71 11
a81 12
my $CFG_TARGET        = q(@@TARGET@@);            # substituted via Makefile.tmpl 
my $CFG_CC            = q(@@CC@@);                # substituted via Makefile.tmpl
my $CFG_CFLAGS        = q(@@CFLAGS@@);            # substituted via Makefile.tmpl
my $CFG_CFLAGS_SHLIB  = q(@@CFLAGS_SHLIB@@);      # substituted via Makefile.tmpl
my $CFG_LD_SHLIB      = q(@@LD_SHLIB@@);          # substituted via Makefile.tmpl
my $CFG_LDFLAGS_SHLIB = q(@@LDFLAGS_MOD_SHLIB@@); # substituted via Makefile.tmpl 
my $CFG_LIBS_SHLIB    = q(@@LIBS_SHLIB@@);        # substituted via Makefile.tmpl 
my $CFG_PREFIX        = q(@@prefix@@);            # substituted via APACI install
my $CFG_SBINDIR       = q(@@sbindir@@);           # substituted via APACI install
my $CFG_INCLUDEDIR    = q(@@includedir@@);        # substituted via APACI install
my $CFG_LIBEXECDIR    = q(@@libexecdir@@);        # substituted via APACI install
my $CFG_SYSCONFDIR    = q(@@sysconfdir@@);        # substituted via APACI install
d91 11
a113 3
my @@opt_W = ();
my @@opt_S = ();
my $opt_e = 0;
a118 6
#   default for DSO file extension 
my $dso_ext = "so";
if ($^O eq "cygwin") {
    $dso_ext = "dll";
}

d137 2
a138 2
        if ($pos >= $[) {
            if ($args[$pos+1] eq ':') {
d140 1
a140 1
                if ($rest eq '') {
d151 1
a151 1
                if ($rest eq '') {
d162 1
a162 1
                if ($rest eq '') {
d173 1
a173 1
            if ($rest ne '') {
d185 5
a189 7
    print STDERR "Usage: apxs -g [-S <var>=<val>] -n <modname>\n";
    print STDERR "       apxs -q [-S <var>=<val>] <query> ...\n";
    print STDERR "       apxs -c [-S <var>=<val>] [-o <dsofile>] [-D <name>[=<value>]]\n";
    print STDERR "               [-I <incdir>] [-L <libdir>] [-l <libname>] [-Wc,<flags>]\n";
    print STDERR "               [-Wl,<flags>] <files> ...\n";
    print STDERR "       apxs -i [-S <var>=<val>] [-a] [-A] [-n <modname>] <dsofile> ...\n";
    print STDERR "       apxs -e [-S <var>=<val>] [-a] [-A] [-n <modname>] <dsofile> ...\n";
d195 1
a195 1
($rc, @@ARGV) = &Getopts("qn:gco:I+D+L+l+W+S+eiaA", @@ARGV);
d198 1
a198 1
&usage if (not $opt_q and not ($opt_g and $opt_n) and not $opt_i and not $opt_c and not $opt_e);
a204 37
#   overriding of configuration variables
if (@@opt_S) {
    my ($opt_S);
    foreach $opt_S (@@opt_S) {
        if ($opt_S =~ m/^([^=]+)=(.*)$/) {
            my ($var, $val) = ($1, $2);
            my $oldval = eval "\$CFG_$var";
            unless ($var and $oldval) {
                print STDERR "apxs:Error: no config variable $var\n";
                &usage;
            }
	    $val=~s/"/\\"/g;
            eval "\$CFG_${var}=\"${val}\"";
        } else {
            print STDERR "apxs:Error: malformatted -S option\n";
            &usage;
        }       
    }
}

##
##  Initial DSO support check
##
if ($^O ne "MSWin32") {
if (not -x "$CFG_SBINDIR/$CFG_TARGET") {
    print STDERR "apxs:Error: $CFG_SBINDIR/$CFG_TARGET not found or not executable\n";
    exit(1);
}
if (not grep(/mod_so/, `$CFG_SBINDIR/$CFG_TARGET -l`)) {
    print STDERR "apxs:Error: Sorry, no DSO support for Apache available\n";
    print STDERR "apxs:Error: under your platform. Make sure the Apache\n";
    print STDERR "apxs:Error: module mod_so is compiled into your server\n";
    print STDERR "apxs:Error: binary `$CFG_SBINDIR/$CFG_TARGET'.\n";
    exit(1);
}
}

d219 1
a219 1
            printf(STDERR "apxs:Break: Command failed with rc=%d\n", $rc >> 8);
d231 1
a231 1
        print STDERR "apxs:Error: Directory `$name' already exists. Remove it first\n";
a236 2
    $data =~ s|%TARGET%|$CFG_TARGET|sg;
    $data =~ s|%DSO_EXT%|$dso_ext|sg;
d254 1
d266 1
a266 1
            TARGET CC CFLAGS CFLAGS_SHLIB LD_SHLIB LDFLAGS_SHLIB LIBS_SHLIB
d271 1
a271 1
                $result .= "${val}##";
d280 2
a281 2
    $result =~ s|##$||;
    $result =~ s|##| |g;
d287 1
a287 1
    ##  DSO COMPILATION
d308 1
a308 1
            $dso_file =~ s|\.[^.]+$|.$dso_ext|;
d312 1
a312 1
            $dso_file =~ s|\.[^.]+$|.$dso_ext|;
d315 1
a315 1
            $dso_file = "mod_unknown.$dso_ext";
d325 1
a325 4
    my ($opt_Wc, $opt_I, $opt_D);
    foreach $opt_Wc (@@opt_W) {
        $opt .= "$1 " if ($opt_Wc =~ m|^\s*c,(.*)$|);
    }
a326 1
        $opt_I = '"' . $opt_I . '"' if ($opt_I =~ m|\s|);
a332 6
    if ($^O eq "MSWin32") {
        my $d = $dso_file;
        $d =~ s|\.so$||;
        $d = '"' . $d . '"' if ($d =~ m|\s|);
        $opt .= "-Fd$d ";
    }
d336 2
a337 12
        $s = '"' . $s . '"' if ($s =~ m|\s|);
        if ($^O ne "MSWin32") {
            $o =~ s|\.c$|.o|;
            $o =~ s|^.*/||;
            $o = '"' . $o . '"' if ($o =~ m|\s|);
            push(@@cmds, "$CFG_CC $cflags -I$CFG_INCLUDEDIR $opt -c $s");
        } else {
            $o =~ s|\.c$|.obj|;
            $o =~ s|^.*/||;
            $o = '"' . $o . '"' if ($o =~ m|\s|);
            push(@@cmds, "$CFG_CC $cflags -I\"$CFG_INCLUDEDIR\" $opt -c $s -Fo$o");
        }
d342 1
a342 6
    my $cmd;
    if ($^O ne "MSWin32") {
        $cmd = "$CFG_LD_SHLIB $CFG_LDFLAGS_SHLIB -o $dso_file";
    } else {
        $cmd = "$CFG_LD_SHLIB $CFG_LDFLAGS_SHLIB -out:\"$dso_file\"";
    }
d348 1
a348 8
    my ($opt_Wl, $opt_L, $opt_l);
    foreach $opt_Wl (@@opt_W) {
        if ($CFG_LD_SHLIB !~ m/gcc$/) {
            $opt .= " $1" if ($opt_Wl =~ m|^\s*l,(.*)$|);
        } else {
            $opt .= " -W$opt_Wl";
        }
    }
d350 1
a350 5
        if ($^O ne "MSWin32") {
            $opt .= " -L$opt_L";
        } else {
            $opt .= " -libpath:\"$opt_L\"";
        }
d353 1
a353 5
        if ($^O ne "MSWin32") {
            $opt .= " -l$opt_l";
        } else {
            $opt .= " $opt_l";
        }
d363 2
a364 2
    if ($opt_i or $opt_e) {
        @@args = ($dso_file);
d368 1
a368 1
if ($opt_i or $opt_e) {
d370 1
a370 1
    ##  DSO INSTALLATION
d380 2
a381 2
        if ($f !~ m|\.$dso_ext$|) {
            print STDERR "apxs:Error: file $f is not a DSO\n";
d385 4
a388 14
        if ($^O ne "MSWin32") {
            $t =~ s|^.+/([^/]+)$|$1|;
            if ($opt_i) {
                push(@@cmds, "cp $f $CFG_LIBEXECDIR/$t");
                push(@@cmds, "chmod 755 $CFG_LIBEXECDIR/$t");
            }
        }
	else {
            $t =~ s|^.+[/\\]([^/\\]+)$|$1|;
            if ($opt_i) {
                push(@@cmds, "copy \"$f\" \"$CFG_LIBEXECDIR/$t\"");
            }
        }
        
d402 1
a402 2
                    $filename =~ s|^.+/||;
                    $filename =~ s|^.+\\|| if ($^O eq "MSWin32");
d409 1
a409 2
                    $filename =~ s|^.+/||;
                    $filename =~ s|^.+\\|| if ($^O eq "MSWin32");
d413 2
a414 2
                print STDERR "apxs:Error: Sorry, cannot determine bootstrap symbol name.\n";
                print STDERR "apxs:Error: Please specify one with option `-n'.\n";
d428 3
d433 2
a434 3
        my $cfgbase = "$CFG_SYSCONFDIR/$CFG_TARGET";
        if (not -f "$cfgbase.conf") {
            print STDERR "apxs:Error: Config file $cfgbase.conf not found\n";
d438 1
a438 1
        open(FP, "<$cfgbase.conf") || die;
d443 1
a443 1
            print STDERR "apxs:Error: Activation failed for custom $cfgbase.conf file.\n";
d448 1
a449 2
        my $c = '';
        $c = '#' if ($opt_A);
a450 1
            my $what = $opt_A ? "preparing" : "activating";
d452 2
d455 4
a458 2
            } else {
                 $content =~ s|^(.*\n)#?\s*$lmd[^\n]*\n|$1$c$lmd\n|sg;
a459 2
            $lmd =~ m|LoadModule\s+(.+?)_module.*|;
            print STDERR "[$what module `$1' in $cfgbase.conf]\n";
d464 2
d467 1
a467 2
            } else {
                 $content =~ s|^(.*\n)#?\s*$amd[^\n]*\n|$1$c$amd\n|sg;
d470 7
a476 17
        if (@@lmd or @@amd) {
            if (open(FP, ">$cfgbase.conf.new")) {
                print FP $content;
                close(FP);
                if ($^O ne "MSWin32") {
                    push(@@cmds, "cp $cfgbase.conf $cfgbase.conf.bak");
                    push(@@cmds, "cp $cfgbase.conf.new $cfgbase.conf");
                    push(@@cmds, "rm $cfgbase.conf.new");
                } else {
                    $cfgbase =~ s|/|\\|g;
                    push(@@cmds, "copy \"$cfgbase.conf\" \"$cfgbase.conf.bak\"");
                    push(@@cmds, "copy \"$cfgbase.conf.new\" \"$cfgbase.conf\"");
                    push(@@cmds, "del \"$cfgbase.conf.new\"");
                }
            } else {
                print STDERR "apxs:Error: unable to open configuration file\n";
            }
a478 3

    #   execute the commands
    &execute_cmds(@@cmds);
d484 1
a484 1
##  Makefile -- Build procedure for sample %NAME% Apache module
d492 1
a492 1
#   additional user defines, includes and libraries
d498 1
a498 1
all: mod_%NAME%.%DSO_EXT%
d500 2
a501 2
#   compile the DSO file
mod_%NAME%.%DSO_EXT%: mod_%NAME%.c
d504 1
a504 2
#   install the DSO file into the Apache installation
#   and activate it in the Apache configuration
d506 1
a506 1
	$(APXS) -i -a -n '%NAME%' mod_%NAME%.%DSO_EXT%
d510 1
a510 1
	-rm -f mod_%NAME%.o mod_%NAME%.%DSO_EXT%
d516 2
a517 1
#   reload the module by installing and restarting Apache
d520 2
a521 1
#   the general Apache start/restart/stop procedures
d534 1
a534 1
**  To play with this sample module, first compile it into a
d540 2
a541 2
**  Then activate it in Apache's %TARGET%.conf file, for instance
**  for the URL /%NAME%, as follows:
d543 2
a544 2
**    #   %TARGET%.conf
**    LoadModule %NAME%_module libexec/mod_%NAME%.%DSO_EXT%
d562 1
a562 1
**    Server: Apache/1.3.4 (Unix)
d571 1
a571 2
#include "http_protocol.h"
#include "ap_config.h"
d602 1
a602 1
    NULL,                  /* [#3] check access by host address   */
d606 1
a606 1
    NULL,                  /* [#2] header parser                  */
@


1.1.1.3
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@a713 6
#ifdef EAPI
   ,NULL,                  /* EAPI: add_module                    */
    NULL,                  /* EAPI: remove_module                 */
    NULL,                  /* EAPI: rewrite_command               */
    NULL                   /* EAPI: new_connection                */
#endif
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d5 1
a5 1
## Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
d546 1
a546 60
                # check for open <containers>, so that the new LoadModule
                # directive always appears *outside* of an <container>.

                my $before = ($content =~ m|^(.*\n)#?\s*LoadModule\s+[^\n]+\n|s)[0];

                # the '()=' trick forces list context and the scalar
                # assignment counts the number of list members (aka number
                # of matches) then
                my $cntopen = () = ($before =~ m|^\s*<[^/].*$|mg);
                my $cntclose = () = ($before =~ m|^\s*</.*$|mg);

                if ($cntopen == $cntclose) {
                    # fine. Last LoadModule is contextless.
                    $content =~ s|^(.*\n#?\s*LoadModule\s+[^\n]+\n)|$1$c$lmd\n|s;
                }
                elsif ($cntopen < $cntclose) {
                    print STDERR 'Configuration file is not valid. There are '
                                 . "sections closed before opened.\n";
                    exit(1);
                }
                else {
                    # put our cmd after the section containing the last
                    # LoadModule.
                    my $found =
                    $content =~ s!\A (               # string and capture start
                                  (?:(?:
                                    ^\s*             # start of conf line with a
                                    (?:[^<]|<[^/])   # directive which does not
                                                     # start with '</'

                                    .*(?:$)\n        # rest of the line.
                                                     # the '$' is in parentheses
                                                     # to avoid misinterpreting
                                                     # the string "$\" as
                                                     # perl variable.

                                    )*               # catch as much as possible
                                                     # of such lines. (including
                                                     # zero)

                                    ^\s*</.*(?:$)\n? # after the above, we
                                                     # expect a config line with
                                                     # a closing container (</)

                                  ) {$cntopen}       # the whole pattern (bunch
                                                     # of lines that end up with
                                                     # a closing directive) must
                                                     # be repeated $cntopen
                                                     # times. That's it.
                                                     # Simple, eh? ;-)

                                  )                  # capture end
                                 !$1$c$lmd\n!mx;

                    unless ($found) {
                        print STDERR 'Configuration file is not valid. There '
                                     . "are sections opened and not closed.\n";
                        exit(1);
                    }
                }
d548 1
a548 2
                # replace already existing LoadModule line
                $content =~ s|^(.*\n)#?\s*$lmd[^\n]*\n|$1$c$lmd\n|s;
d556 1
a556 25
                # check for open <containers> etc. see above for explanations.

                my $before = ($content =~ m|^(.*\n)#?\s*AddModule\s+[^\n]+\n|s)[0];
                my $cntopen = () = ($before =~ m|^\s*<[^/].*$|mg);
                my $cntclose = () = ($before =~ m|^\s*</.*$|mg);

                if ($cntopen == $cntclose) {
                    $content =~ s|^(.*\n#?\s*AddModule\s+[^\n]+\n)|$1$c$amd\n|s;
                }
                elsif ($cntopen < $cntclose) {
                    # cannot happen here, but who knows ...
                    print STDERR 'Configuration file is not valid. There are '
                                 . "sections closed before opened.\n";
                    exit(1);
                }
                else {
                    unless ($content =~ s!\A((?:(?:^\s*(?:[^<]|<[^/]).*(?:$)\n)*
                                          ^\s*</.*(?:$)\n?){$cntopen})
                                         !$1$c$amd\n!mx) {
                        # cannot happen here, anyway.
                        print STDERR 'Configuration file is not valid. There '
                                     . "are sections opened and not closed.\n";
                        exit(1);
                    }
                }
d558 1
a558 2
                # replace already existing AddModule line
                $content =~ s|^(.*\n)#?\s*$amd[^\n]*\n|$1$c$amd\n|s;
@


