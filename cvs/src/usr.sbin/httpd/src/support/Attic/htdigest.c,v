head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.10
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.6
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.4
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.14
	OPENBSD_5_0:1.12.0.12
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.10
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.13;

1.13
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2008.08.11.17.15.56;	author tobias;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.23.12.12.01;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.02.19.42.48;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.21.13.11.40;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.02.14.18.13;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.08.17.18.49;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.23.20.03.13;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.02.08.08;	author beck;	state Exp;
branches
	1.5.2.1
	1.5.4.1;
next	1.4;

1.4
date	2000.03.19.11.17.40;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.30.19;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.30.08;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.51;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.23;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.45;	author henning;	state Exp;
branches;
next	;

1.5.2.1
date	2003.01.22.23.48.57;	author miod;	state Exp;
branches;
next	;

1.5.4.1
date	2002.11.04.14.49.20;	author jason;	state Exp;
branches;
next	;


desc
@@


1.14
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*	$OpenBSD: htdigest.c,v 1.13 2012/03/04 04:05:15 fgsch Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */
/******************************************************************************
 ******************************************************************************
 * NOTE! This program is not safe as a setuid executable!  Do not make it
 * setuid!
 ******************************************************************************
 *****************************************************************************/
/*
 * htdigest.c: simple program for manipulating digest passwd file for Apache
 *
 * by Alexei Kosut, based on htpasswd.c, by Rob McCool
 */

#include <sys/types.h>
#include <sys/signal.h>

#include "ap_config.h"
#include "ap.h"
#include "ap_md5.h"

#define LF 10
#define CR 13

#define MAX_STRING_LEN 256

#define INTR_MSG "\nInterrupted.\n"

static char tn[MAX_STRING_LEN];

static void
getword(char *word, char *line, char stop)
{
	int x = 0, y;

	for (x = 0; ((line[x]) && (line[x] != stop)); x++)
		word[x] = line[x];

	word[x] = '\0';
	if (line[x])
		++x;
	y = 0;

	while ((line[y++] = line[x++]));
}

static int
get_line(char *s, int n, FILE *f)
{
	int i = 0;

	while (1) {
		s[i] = (char) fgetc(f);

		if (s[i] == CR)
			s[i] = fgetc(f);

		if ((s[i] == 0x4) || (s[i] == LF) || (i == (n - 1))) {
			s[i] = '\0';
			return (feof(f) ? 1 : 0);
		}
		++i;
	}
}

static void
putline(FILE *f, char *l)
{
	int x;

	for (x = 0; l[x]; x++)
		fputc(l[x], f);
	fputc('\n', f);
}


static void
add_password(char *user, char *realm, FILE *f)
{
	char *pw;
	AP_MD5_CTX context;
	unsigned char digest[16];
	char string[MAX_STRING_LEN];
	char pwin[MAX_STRING_LEN];
	char pwv[MAX_STRING_LEN];
	unsigned int i;

	if (ap_getpass("New password: ", pwin, sizeof(pwin)) != 0) {
		fprintf(stderr, "password too long");
		exit(5);
	}
	ap_getpass("Re-type new password: ", pwv, sizeof(pwv));
	if (strcmp(pwin, pwv) != 0) {
		fprintf(stderr, "They don't match, sorry.\n");
		if (tn[0] != '\0')
			unlink(tn);

		exit(1);
	}
	pw = pwin;
	fprintf(f, "%s:%s:", user, realm);

	/* Do MD5 stuff */
	snprintf(string, sizeof(string), "%s:%s:%s", user, realm, pw);

	ap_MD5Init(&context);
	ap_MD5Update(&context, (unsigned char *) string, strlen(string));
	ap_MD5Final(digest, &context);

	for (i = 0; i < 16; i++)
		fprintf(f, "%02x", digest[i]);

	fprintf(f, "\n");
}

static void
usage(void)
{
	fprintf(stderr, "Usage: htdigest [-c] passwordfile realm username\n");
	fprintf(stderr, "The -c flag creates a new file.\n");
	exit(1);
}

static void
interrupted(void)
{
	write(STDERR_FILENO, INTR_MSG, sizeof(INTR_MSG) - 1);
	if (tn[0] != '\0')
		unlink(tn);
	_exit(1);
}



int main(int argc, char *argv[])
{
    FILE *tfp, *f;
    char user[MAX_STRING_LEN];
    char realm[MAX_STRING_LEN];
    char line[MAX_STRING_LEN];
    char l[MAX_STRING_LEN];
    char w[MAX_STRING_LEN];
    char x[MAX_STRING_LEN];
    char command[MAX_STRING_LEN];
    int found;
    int tfd;

    signal(SIGINT, (void (*)(int)) interrupted);
    if (argc == 5) {
	if (strcmp(argv[1], "-c"))
	    usage();
	if (!(tfp = fopen(argv[2], "w"))) {
	    fprintf(stderr, "Could not open passwd file %s for writing.\n",
		    argv[2]);
	    perror("fopen");
	    exit(1);
	}
	printf("Adding password for %s in realm %s.\n", argv[4], argv[3]);
	add_password(argv[4], argv[3], tfp);
	fclose(tfp);
	exit(0);
    }
    else if (argc != 4)
	usage();

    strlcpy(tn, "/tmp/htdigest-XXXXXXXXXX", sizeof(tn));
    tfd = mkstemp(tn);
    if (tfd == -1 || (tfp = fdopen(tfd, "w")) == NULL) {
	fprintf(stderr, "Could not create temp file.\n");
	exit(1);
    }

    if (!(f = fopen(argv[1], "r"))) {
	fprintf(stderr,
		"Could not open passwd file %s for reading.\n", argv[1]);
	fprintf(stderr, "Use -c option to create new one.\n");
	exit(1);
    }
    ap_cpystrn(user, argv[3], sizeof(user));
    ap_cpystrn(realm, argv[2], sizeof(realm));

    found = 0;
    while (!(get_line(line, MAX_STRING_LEN, f))) {
	if (found || (line[0] == '#') || (!line[0])) {
	    putline(tfp, line);
	    continue;
	}
	strlcpy(l, line, sizeof(l));
	getword(w, l, ':');
	getword(x, l, ':');
	if (strcmp(user, w) || strcmp(realm, x)) {
	    putline(tfp, line);
	    continue;
	}
	else {
	    printf("Changing password for user %s in realm %s\n", user, realm);
	    add_password(user, realm, tfp);
	    found = 1;
	}
    }
    if (!found) {
	printf("Adding user %s in realm %s\n", user, realm);
	add_password(user, realm, tfp);
    }   
    fclose(f);
    fclose(tfp);
    snprintf(command, sizeof(command), "cp %s %s", tn, argv[1]);
    system(command);
    unlink(tn);
    return 0;
}
@


1.13
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: htdigest.c,v 1.12 2008/08/11 17:15:56 tobias Exp $ */
@


1.12
log
@Use only safe functions in signal handlers.

ok millert, otto
@
text
@d1 1
a1 1
/*	$OpenBSD: htdigest.c,v 1.11 2008/05/23 12:12:01 mbalmer Exp $ */
d105 1
a105 1
getline(char *s, int n, FILE *f)
d240 1
a240 1
    while (!(getline(line, MAX_STRING_LEN, f))) {
@


1.11
log
@KNF and readability changes.  de-register, remove #ifndef SIN6_LEN defines.
Add OpenBSD cvs markers.

No binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d84 2
d184 1
a184 1
	fprintf(stderr, "Interrupted.\n");
d187 1
a187 1
	exit(1);
@


1.10
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@d1 2
d72 3
a75 1
#include <sys/types.h>
a77 1
#include <sys/signal.h>
d86 2
a87 2

static void getword(char *word, char *line, char stop)
d89 1
a89 1
    int x = 0, y;
d91 2
a92 2
    for (x = 0; ((line[x]) && (line[x] != stop)); x++)
	word[x] = line[x];
d94 4
a97 4
    word[x] = '\0';
    if (line[x])
	++x;
    y = 0;
d99 1
a99 1
    while ((line[y++] = line[x++]));
d102 2
a103 1
static int getline(char *s, int n, FILE *f)
d105 1
a105 1
    register int i = 0;
d107 2
a108 2
    while (1) {
	s[i] = (char) fgetc(f);
d110 8
a117 6
	if (s[i] == CR)
	    s[i] = fgetc(f);

	if ((s[i] == 0x4) || (s[i] == LF) || (i == (n - 1))) {
	    s[i] = '\0';
	    return (feof(f) ? 1 : 0);
a118 2
	++i;
    }
d121 2
a122 1
static void putline(FILE *f, char *l)
d124 1
a124 1
    int x;
d126 3
a128 3
    for (x = 0; l[x]; x++)
	fputc(l[x], f);
    fputc('\n', f);
d132 2
a133 1
static void add_password(char *user, char *realm, FILE *f)
d135 19
a153 17
    char *pw;
    AP_MD5_CTX context;
    unsigned char digest[16];
    char string[MAX_STRING_LEN];
    char pwin[MAX_STRING_LEN];
    char pwv[MAX_STRING_LEN];
    unsigned int i;

    if (ap_getpass("New password: ", pwin, sizeof(pwin)) != 0) {
	fprintf(stderr, "password too long");
	exit(5);
    }
    ap_getpass("Re-type new password: ", pwv, sizeof(pwv));
    if (strcmp(pwin, pwv) != 0) {
	fprintf(stderr, "They don't match, sorry.\n");
	if (tn[0] != '\0') {
	    unlink(tn);
d155 2
a156 4
	exit(1);
    }
    pw = pwin;
    fprintf(f, "%s:%s:", user, realm);
d158 2
a159 2
    /* Do MD5 stuff */
    snprintf(string, sizeof(string), "%s:%s:%s", user, realm, pw);
d161 3
a163 3
    ap_MD5Init(&context);
    ap_MD5Update(&context, (unsigned char *) string, strlen(string));
    ap_MD5Final(digest, &context);
d165 2
a166 2
    for (i = 0; i < 16; i++)
	fprintf(f, "%02x", digest[i]);
d168 1
a168 1
    fprintf(f, "\n");
d171 2
a172 1
static void usage(void)
d174 3
a176 3
    fprintf(stderr, "Usage: htdigest [-c] passwordfile realm username\n");
    fprintf(stderr, "The -c flag creates a new file.\n");
    exit(1);
d179 2
a180 1
static void interrupted(void)
d182 4
a185 4
    fprintf(stderr, "Interrupted.\n");
    if (tn[0] != '\0')
	unlink(tn);
    exit(1);
@


1.9
log
@merge
@
text
@a70 1
#ifndef NETWARE
a71 1
#endif
a73 3
#if defined(MPE) || defined(QNX) || defined(WIN32) || defined(__TANDEM) || defined(OS390) || defined(BEOS) || defined(BONE)
#include <signal.h>
#else
a74 1
#endif
a75 9
#ifdef WIN32
#include <conio.h>
#define unlink _unlink
#endif

#ifdef CHARSET_EBCDIC
#define LF '\n'
#define CR '\r'
#else
a77 1
#endif /* CHARSET_EBCDIC */
a180 10
#ifdef NETWARE
static void copy_file(FILE *target, FILE *source)
{
    static char line[MAX_STRING_LEN];

    while (!(getline(line, MAX_STRING_LEN, source))) {  
	putline(target, line);
    }
}
#endif
a198 5
#ifdef NETWARE
    UnAugmentAsterisk(TRUE);
    SetCurrentNameSpace(NW_NS_LONG);
    SetTargetNameSpace(NW_NS_LONG);
#endif
a253 4
#ifndef NETWARE
#if defined(OS2) || defined(WIN32)
    snprintf(command, sizeof(command), "copy \"%s\" \"%s\"", tn, argv[1]);
#else
a254 1
#endif
a255 13
#else
    if (!(tfp = fopen(tn, "r"))) {
    fprintf(stderr, "Could not open temp file.\n");
    exit(1);
    }
    
    if (!(f = fopen(argv[1], "w"))) {
    fprintf(stderr, "Could not open %s.\n", argv[1]);    
    exit(1);    
    }
    
    copy_file(f, tfp);
#endif
@


1.8
log
@bump mktemp/mkstemp randomness from 6 -> 10 X's
henning@@ ok
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d257 2
a258 2
    strlcpy(user, argv[3], sizeof(user));
    strlcpy(realm, argv[2], sizeof(realm));
@


1.7
log
@string shit, ok pval@@
@
text
@d244 1
a244 1
    strlcpy(tn, "/tmp/htdigest-XXXXXX", sizeof(tn));
@


1.6
log
@Replace tmpnam() with mkstemp() to avoid possible /tmp race.
Problem found by David Wagner (among others).
@
text
@d169 1
a169 1
    sprintf(string, "%s:%s:%s", user, realm, pw);
d244 1
a244 1
    strcpy(tn, "/tmp/htdigest-XXXXXX");
d257 2
a258 2
    strcpy(user, argv[3]);
    strcpy(realm, argv[2]);
d266 1
a266 1
	strcpy(l, line);
d287 1
a287 1
    sprintf(command, "copy \"%s\" \"%s\"", tn, argv[1]);
d289 1
a289 1
    sprintf(command, "cp %s %s", tn, argv[1]);
@


1.5
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d97 1
a97 1
char *tn;
d160 1
a160 1
	if (tn) {
d191 1
a191 1
    if (tn)
d219 1
a220 1
    tn = NULL;
d244 4
a247 3
    tn = tmpnam(NULL);
    if (!(tfp = fopen(tn, "w"))) {
	fprintf(stderr, "Could not open temp file.\n");
@


1.5.2.1
log
@Pull in patch from current:
Fix (millert):
Replace tmpnam() with mkstemp() to avoid possible /tmp race.
Problem found by David Wagner (among others).
@
text
@d97 1
a97 1
static char tn[MAX_STRING_LEN];
d160 1
a160 1
	if (tn[0] != '\0') {
d191 1
a191 1
    if (tn[0] != '\0')
a218 1
    int tfd;
d220 1
d244 3
a246 4
    strcpy(tn, "/tmp/htdigest-XXXXXX");
    tfd = mkstemp(tn);
    if (tfd == -1 || (tfp = fdopen(tfd, "w")) == NULL) {
	fprintf(stderr, "Could not create temp file.\n");
@


1.5.4.1
log
@Pull in patch from current:
Fix (millert):
Replace tmpnam() with mkstemp() to avoid possible /tmp race.
Problem found by David Wagner (among others).
@
text
@d97 1
a97 1
static char tn[MAX_STRING_LEN];
d160 1
a160 1
	if (tn[0] != '\0') {
d191 1
a191 1
    if (tn[0] != '\0')
a218 1
    int tfd;
d220 1
d244 3
a246 4
    strcpy(tn, "/tmp/htdigest-XXXXXX");
    tfd = mkstemp(tn);
    if (tfd == -1 || (tfp = fdopen(tfd, "w")) == NULL) {
	fprintf(stderr, "Could not create temp file.\n");
@


1.4
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
d76 1
a76 1
#if defined(MPE) || defined(QNX) || defined(WIN32) || defined(__TANDEM) || defined(OS390) || defined(BEOS)
d225 5
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d75 1
a75 1
#if defined(MPE) || defined(QNX) || defined(WIN32) || defined(__TANDEM) || defined(OS390)
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d70 1
d72 1
d75 1
a75 1
#if defined(MPE) || defined(QNX) || defined(WIN32) || defined(__TANDEM)
d98 1
d195 12
d275 1
a275 1
    }
d278 1
d285 13
@


1.1
log
@Initial revision
@
text
@d1 56
d71 3
a73 1
#ifdef MPE
d79 4
a82 2
/* This is probably the easiest way to do it */
#include "../main/md5c.c"
d84 4
d90 1
a95 9
static char *strd(char *s)
{
    char *d;

    d = (char *) malloc(strlen(s) + 1);
    strcpy(d, s);
    return (d);
}

d145 2
d149 6
a154 2
    pw = strd((char *) getpass("New password:"));
    if (strcmp(pw, (char *) getpass("Re-type new password:"))) {
d156 1
a156 1
	if (tn)
d158 1
d161 1
d205 1
a205 1
    signal(SIGINT, (void (*)()) interrupted);
d270 1
a270 1
    exit(0);
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@a0 57
/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */
a13 1
#ifndef NETWARE
d15 1
a15 4
#endif
#include "ap.h"
#include "ap_md5.h"
#if defined(MPE) || defined(QNX) || defined(WIN32) || defined(__TANDEM) || defined(OS390) || defined(BEOS) || defined(BONE)
d21 2
a22 4
#ifdef WIN32
#include <conio.h>
#define unlink _unlink
#endif
a23 4
#ifdef CHARSET_EBCDIC
#define LF '\n'
#define CR '\r'
#else
a25 1
#endif /* CHARSET_EBCDIC */
d31 8
a88 2
    char pwin[MAX_STRING_LEN];
    char pwv[MAX_STRING_LEN];
d91 2
a92 6
    if (ap_getpass("New password: ", pwin, sizeof(pwin)) != 0) {
	fprintf(stderr, "password too long");
	exit(5);
    }
    ap_getpass("Re-type new password: ", pwv, sizeof(pwv));
    if (strcmp(pwin, pwv) != 0) {
d94 1
a94 1
	if (tn) {
a95 1
	}
a97 1
    pw = pwin;
a127 12

#ifdef NETWARE
static void copy_file(FILE *target, FILE *source)
{
    static char line[MAX_STRING_LEN];

    while (!(getline(line, MAX_STRING_LEN, source))) {  
	putline(target, line);
    }
}
#endif

d141 1
a141 1
    signal(SIGINT, (void (*)(int)) interrupted);
a144 5
#ifdef NETWARE
    UnAugmentAsterisk(TRUE);
    SetCurrentNameSpace(NW_NS_LONG);
    SetTargetNameSpace(NW_NS_LONG);
#endif
d196 1
a196 1
    }   
a198 1
#ifndef NETWARE
a204 13
#else
    if (!(tfp = fopen(tn, "r"))) {
    fprintf(stderr, "Could not open temp file.\n");
    exit(1);
    }
    
    if (!(f = fopen(argv[1], "w"))) {
    fprintf(stderr, "Could not open %s.\n", argv[1]);    
    exit(1);    
    }
    
    copy_file(f, tfp);
#endif
d206 1
a206 1
    return 0;
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
d256 2
a257 2
    ap_cpystrn(user, argv[3], sizeof(user));
    ap_cpystrn(realm, argv[2], sizeof(realm));
@


