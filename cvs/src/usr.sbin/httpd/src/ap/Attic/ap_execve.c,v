head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.38
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.34
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.11;

1.11
date	2005.03.28.21.03.33;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.06.13.14.09;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.02.19.42.46;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.21.13.11.35;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.02.08.05;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.38;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.38;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.22;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.41;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.37;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.37;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.30;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.37;	author henning;	state Exp;
branches;
next	;


desc
@@


1.12
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: ap_execve.c,v 1.11 2005/03/28 21:03:33 niallo Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * Portions of this code are under this license:
 *
 * Copyright (c) 1980, 1991 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "httpd.h"

/*---------------------------------------------------------------*/

extern void ap_execve_is_not_here(void);
void
ap_execve_is_not_here(void)
{
}
@


1.11
log
@clean up this code. make it conform as closely to KNF as possible without
introducing any binary changes.

two files here have different binary output when the number of lines changes,
we will finish cleaning those in another pass.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.10
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d1 2
d97 4
a100 1
void ap_execve_is_not_here(void) {}
@


1.9
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a93 261
#ifdef NEED_HASHBANG_EMUL

#undef execle
#undef execve

static const char **hashbang(const char *filename, char * const *argv);


/* Historically, a list of arguments on the stack was often treated as
 * being equivalent to an array (since they already were "contiguous"
 * on the stack, and the arguments were pushed in the correct order).
 * On today's processors, this is not necessarily equivalent, because
 * often arguments are padded or passed partially in registers,
 * or the stack direction is backwards.
 * To be on the safe side, we copy the argument list to our own
 * local argv[] array. The va_arg logic makes sure we do the right thing.
 * XXX: malloc() is used because we expect to be overlaid soon.
 */
int ap_execle(const char *filename, const char *argv0, ...)
{
    va_list adummy;
    char **envp;
    char **argv;
    int argc, ret;

    /* First pass: Count arguments on stack */
    va_start(adummy, argv0);
    for (argc = 1; va_arg(adummy, char *) != NULL; ++argc) {
	continue;
    }
    va_end(adummy);

    if ((argv = (char **) malloc((argc + 2) * sizeof(*argv))) == NULL) {
	fprintf(stderr, "Ouch!  Out of memory in ap_execle()!\n");
	return -1;
    }

    /* Pass two --- copy the argument strings into the result space */
    va_start(adummy, argv0);
    argv[0] = (char *)argv0;
    for (argc = 1; (argv[argc] = va_arg(adummy, char *)) != NULL; ++argc) {
	continue;
    }
    envp = va_arg(adummy, char **);
    va_end(adummy);

    ret = ap_execve(filename, argv, envp);
    free(argv);

    return ret;
}

/* Count number of entries in vector "args", including the trailing NULL entry
 */
static int
count_args(char * const *args)
{
    int i;
    for (i = 0; args[i] != NULL; ++i) {
	continue;
    }
    return i+1;
}

/* Emulate the execve call, respecting a #!/interpreter line if present.
 * On "real" unixes, the kernel does this.
 * We have to fiddle with the argv array to make it work on platforms
 * which don't support the "hashbang" interpreter line by default.
 */
int ap_execve(const char *filename, char * const argv[],
	      char * const envp[])
{
    char **script_argv;
    extern char **environ;

    if (envp == NULL) {
	envp = (char * const *) environ;
    }

    /* Try to execute the file directly first: */
    execve(filename, argv, envp);

    /* Still with us? Then something went seriously wrong.
     * From the (linux) man page:
     * EACCES The file is not a regular file.
     * EACCES Execute permission is denied for the file.
     * EACCES Search  permission  is denied on a component of the path prefix.
     * EPERM  The file system is mounted noexec.
     * EPERM  The file system is mounted nosuid and the file  has an SUID
     *        or SGID bit set.
     * E2BIG  The argument list is too big.
     * ENOEXEC The magic number in the file is incorrect.
     * EFAULT filename  points  outside  your  accessible address space.
     * ENAMETOOLONG filename is too long.
     * ENOENT The file does not exist.
     * ENOMEM Insufficient kernel memory was available.
     * ENOTDIR A component of the path prefix is not a  directory.
     * ELOOP  filename contains a circular reference (i.e., via a symbolic link)
     */

    if (errno == ENOEXEC) {
	/* Probably a script.
	 * Have a look; if there's a "#!" header then try to emulate
	 * the feature found in all modern OS's:
	 * Interpret the line following the #! as a command line
	 * in shell style.
	 */
	if ((script_argv = (char **)hashbang(filename, argv)) != NULL) {

	    /* new filename is the interpreter to call */
	    filename = script_argv[0];

	    /* Restore argv[0] as on entry */
	    if (argv[0] != NULL) {
		script_argv[0] = argv[0];
	    }

	    execve(filename, script_argv, envp);

	    free(script_argv);
	}
	/*
	 * Script doesn't start with a hashbang line!
	 * So, try to have the default shell execute it.
	 * For this, the size of argv must be increased by one
	 * entry: the shell's name. The remaining args are appended.
	 */
	else {
	    int i = count_args(argv) + 1;   /* +1 for leading SHELL_PATH */

	    if ((script_argv = malloc(sizeof(*script_argv) * i)) == NULL) {
		fprintf(stderr, "Ouch!  Out of memory in ap_execve()!\n");
		return -1;
	    }

	    script_argv[0] = SHELL_PATH;

	    while (i > 0) {
		script_argv[i] = argv[i-1];
		--i;
	    }

	    execve(SHELL_PATH, script_argv, envp);

	    free(script_argv);
	}
    }
    return -1;
}

/*---------------------------------------------------------------*/

/*
 * From: peter@@zeus.dialix.oz.au (Peter Wemm)
 * (taken from tcsh)
 * If exec() fails look first for a #! [word] [word] ....
 * If it is, splice the header into the argument list and retry.
 * Return value: the original argv array (sans argv[0]), with the
 * script's argument list prepended.
 * XXX: malloc() is used so that everything can be free()ed after a failure.
 */
#define HACKBUFSZ 1024		/* Max chars in #! vector */
#define HACKVECSZ 128		/* Max words in #! vector */
static const char **hashbang(const char *filename, char * const *argv)
{
    char lbuf[HACKBUFSZ];
    char *sargv[HACKVECSZ];
    const char **newargv;
    char *p, *ws;
    int fd;
    int sargc = 0;
    int i, j;

    if ((fd = open(filename, O_RDONLY)) == -1) {
	return NULL;
    }

    if (read(fd, (char *) lbuf, 2) != 2
	|| lbuf[0] != '#' || lbuf[1] != '!'
	|| read(fd, (char *) lbuf, HACKBUFSZ) <= 0) {
	close(fd);
	return NULL;
    }

    close(fd);

    ws = NULL;			/* word started = 0 */

    for (p = lbuf; p < &lbuf[HACKBUFSZ];) {
	switch (*p) {
	case ' ':
	case '\t':
#ifdef NEW_CRLF
	case '\r':
#endif /*NEW_CRLF */
	    if (ws) {		/* a blank after a word.. save it */
		*p = '\0';
		if (sargc < HACKVECSZ - 1) {
		    sargv[sargc++] = ws;
		}
		ws = NULL;
	    }
	    p++;
	    continue;

	case '\0':		/* Whoa!! what the hell happened */
	    return NULL;

	case '\n':		/* The end of the line. */
	    if (
		   ws) {	/* terminate the last word */
		*p = '\0';
		if (sargc < HACKVECSZ - 1) {
		    sargv[sargc++] = ws;
		}
		sargv[sargc] = NULL;
	    }
	    /* Count number of entries in the old argv vector */
	    for (i = 0; argv[i] != NULL; ++i) {
		continue;
	    }
	    ++i;

	    newargv = (const char **) malloc((p - lbuf + 1)
                      + (i + sargc + 1) * sizeof(*newargv));
	    if (newargv == NULL) {
		fprintf(stderr, "Ouch!  Out of memory in hashbang()!\n");
		return NULL;
	    }
	    ws = &((char *) newargv)[(i + sargc + 1) * sizeof(*newargv)];

	    /* Copy entries to allocated memory */
	    for (j = 0; j < sargc; ++j) {
		newargv[j] = strcpy(ws, sargv[j]);
		ws += strlen(ws) + 1;	/* skip trailing '\0' */
	    }
	    newargv[sargc] = filename;

	    /* Append the old array. The old argv[0] is skipped. */
	    if (i > 1) {
		memcpy(&newargv[sargc + 1], &argv[1],
                       (i - 1) * sizeof(*newargv));
	    }
	
	    newargv[sargc + i] = NULL;

	    ws = NULL;

	    return newargv;

	default:
	    if (!ws) {		/* Start a new word? */
		ws = p;
	    }
	    p++;
	    break;
	}
    }
    return NULL;
}
#else
a95 1
#endif /* NEED_HASHBANG_EMUL */
@


1.8
log
@merge
@
text
@a265 4
#ifdef WIN32
    int fw = 0;			/* found at least one word */
    int first_word = 0;
#endif /* WIN32 */
a290 1
#ifndef WIN32
a294 12
#else /* WIN32 */
		if (sargc < HACKVECSZ - 1) {
		    sargv[sargc] = first_word ? NULL : hb_subst(ws);
		    if (sargv[sargc] == NULL) {
			sargv[sargc] = ws;
		    }
		    sargc++;
		}
		ws = NULL;
		fw = 1;
		first_word = 1;
#endif /* WIN32 */
a303 3
#ifdef WIN32
		   fw ||
#endif /* WIN32 */
a305 1
#ifndef WIN32
a308 9
#else /* WIN32 */
		if (sargc < HACKVECSZ - 1) {	/* deal with the 1-word case */
		    sargv[sargc] = first_word ? NULL : hb_subst(ws);
		    if (sargv[sargc] == NULL) {
			sargv[sargc] = ws;
		    }
		    sargc++;
		}
#endif /* !WIN32 */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.6
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d73 1
a73 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1998-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d102 1
a102 1
static const char **hashbang(const char *filename, char **argv);
d136 1
a136 1
    argv[0] = argv0;
d152 1
a152 1
count_args(const char **args)
d166 2
a167 2
int ap_execve(const char *filename, const char *argv[],
	      const char *envp[])
d169 1
a169 1
    const char **script_argv;
d173 1
a173 1
	envp = (const char **) environ;
d204 1
a204 1
	if ((script_argv = hashbang(filename, argv)) != NULL) {
d260 1
a260 1
static const char **hashbang(const char *filename, char **argv)
d350 1
a350 1
	    newargv = (char **) malloc((p - lbuf + 1)
@


1.2
log
@Apache 1.3.4 merge
@
text
@d129 2
a130 1
    if ((argv = (char **) malloc((argc + 2) * sizeof(*argv))) == NULL)
d132 1
d227 2
a228 1
	    if ((script_argv = malloc(sizeof(*script_argv) * i)) == NULL)
d230 1
d352 4
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1998 The Apache Group.  All rights reserved.
d129 2
a130 1
    argv = (char **) malloc((argc + 2) * sizeof(*argv));
d147 17
d167 1
a167 1
    const char *argv0 = argv[0];
d195 16
a210 8
    if (errno == ENOEXEC
    /* Probably a script.
     * Have a look; if there's a "#!" header then try to emulate
     * the feature found in all modern OS's:
     * Interpret the line following the #! as a command line
     * in shell style.
     */
	&& (argv = hashbang(filename, argv)) != NULL) {
d212 1
a212 2
	/* new filename is the interpreter to call */
	filename = argv[0];
d214 1
a214 3
	/* Restore argv[0] as on entry */
	if (argv0 != NULL) {
	    argv[0] = argv0;
d216 18
d235 1
a235 1
	execve(filename, argv, envp);
d237 2
a238 1
	free(argv);
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
d102 1
a102 1
static const char **hashbang(const char *filename, char * const *argv);
d129 1
a129 4
    if ((argv = (char **) malloc((argc + 2) * sizeof(*argv))) == NULL) {
	fprintf(stderr, "Ouch!  Out of memory in ap_execle()!\n");
	return -1;
    }
d133 1
a133 1
    argv[0] = (char *)argv0;
d146 2
a147 19
/* Count number of entries in vector "args", including the trailing NULL entry
 */
static int
count_args(char * const *args)
{
    int i;
    for (i = 0; args[i] != NULL; ++i) {
	continue;
    }
    return i+1;
}

/* Emulate the execve call, respecting a #!/interpreter line if present.
 * On "real" unixes, the kernel does this.
 * We have to fiddle with the argv array to make it work on platforms
 * which don't support the "hashbang" interpreter line by default.
 */
int ap_execve(const char *filename, char * const argv[],
	      char * const envp[])
d149 1
a149 1
    char **script_argv;
d153 1
a153 1
	envp = (char * const *) environ;
d177 8
a184 16
    if (errno == ENOEXEC) {
	/* Probably a script.
	 * Have a look; if there's a "#!" header then try to emulate
	 * the feature found in all modern OS's:
	 * Interpret the line following the #! as a command line
	 * in shell style.
	 */
	if ((script_argv = (char **)hashbang(filename, argv)) != NULL) {

	    /* new filename is the interpreter to call */
	    filename = script_argv[0];

	    /* Restore argv[0] as on entry */
	    if (argv[0] != NULL) {
		script_argv[0] = argv[0];
	    }
d186 2
a187 1
	    execve(filename, script_argv, envp);
d189 3
a191 1
	    free(script_argv);
a192 13
	/*
	 * Script doesn't start with a hashbang line!
	 * So, try to have the default shell execute it.
	 * For this, the size of argv must be increased by one
	 * entry: the shell's name. The remaining args are appended.
	 */
	else {
	    int i = count_args(argv) + 1;   /* +1 for leading SHELL_PATH */

	    if ((script_argv = malloc(sizeof(*script_argv) * i)) == NULL) {
		fprintf(stderr, "Ouch!  Out of memory in ap_execve()!\n");
		return -1;
	    }
d194 1
a194 1
	    script_argv[0] = SHELL_PATH;
d196 1
a196 9
	    while (i > 0) {
		script_argv[i] = argv[i-1];
		--i;
	    }

	    execve(SHELL_PATH, script_argv, envp);

	    free(script_argv);
	}
d214 1
a214 1
static const char **hashbang(const char *filename, char * const *argv)
d304 1
a304 1
	    newargv = (const char **) malloc((p - lbuf + 1)
a305 4
	    if (newargv == NULL) {
		fprintf(stderr, "Ouch!  Out of memory in hashbang()!\n");
		return NULL;
	    }
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


