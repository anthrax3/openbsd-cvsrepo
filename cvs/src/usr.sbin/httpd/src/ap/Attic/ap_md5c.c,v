head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.1
	apache:1.1.1
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.11;

1.11
date	2009.10.31.13.29.07;	author sobrado;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.28.21.03.33;	author niallo;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.28.13.07.35;	author niallo;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.06.13.14.09;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.02.19.42.46;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.21.13.11.35;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.02.08.05;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.12.07.56.49;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.29.10.21.39;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.25.18.29.38;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.06.29.23;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.07.19.21.28.30;	author henning;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.21.12.53.37;	author henning;	state Exp;
branches;
next	;


desc
@@


1.12
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: ap_md5c.c,v 1.11 2009/10/31 13:29:07 sobrado Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * The ap_MD5Encode() routine uses much code obtained from the FreeBSD 3.0
 * MD5 crypt() function, which is licenced as follows:
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@login.dknet.dk> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
 */

#include <string.h>

#include "ap_config.h"
#include "ap_md5.h"
#include "ap.h"

static void Encode(unsigned char *output, const UINT4 *input, unsigned int len);
static void Decode(UINT4 *output, const unsigned char *input, unsigned int len);

API_EXPORT(void)
ap_MD5Init(AP_MD5_CTX *context)
{
	MD5Init(context);
}

API_EXPORT(void)
ap_MD5Update(AP_MD5_CTX *context, const unsigned char *input,
    unsigned int inputLen)
{
	MD5Update(context, input, inputLen);
}

API_EXPORT(void)
ap_MD5Final(unsigned char digest[16], AP_MD5_CTX *context)
{
	MD5Final(digest, context);
}

/* Encodes input (UINT4) into output (unsigned char). Assumes len is
   a multiple of 4.
 */
static void
Encode(unsigned char *output, const UINT4 *input, unsigned int len)
{
	unsigned int i, j;
	UINT4 k;

	for (i = 0, j = 0; j < len; i++, j += 4) {
		k = input[i];
		output[j] = (unsigned char) (k & 0xff);
		output[j + 1] = (unsigned char) ((k >> 8) & 0xff);
		output[j + 2] = (unsigned char) ((k >> 16) & 0xff);
		output[j + 3] = (unsigned char) ((k >> 24) & 0xff);
	}
}

/* Decodes input (unsigned char) into output (UINT4). Assumes len is
 * a multiple of 4.
 */
static void
Decode(UINT4 *output, const unsigned char *input, unsigned int len)
{
	unsigned int i, j;

	for (i = 0, j = 0; j < len; i++, j += 4)
		output[i] = ((UINT4) input[j]) | (((UINT4) input[j + 1]) << 8) |
		    (((UINT4) input[j + 2]) << 16)
		    | (((UINT4) input[j + 3]) << 24);
}

/*
 * The following MD5 password encryption code was largely borrowed from
 * the FreeBSD 3.0 /usr/src/lib/libcrypt/crypt.c file, which is
 * licenced as stated at the top of this file.
 */
API_EXPORT(void)
ap_to64(char *s, unsigned long v, int n)
{
	static unsigned char itoa64[] =         /* 0 ... 63 => ASCII - 64 */
	    "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	while (--n >= 0) {
		*s++ = itoa64[v&0x3f];
		v >>= 6;
	}
}

API_EXPORT(void)
ap_MD5Encode(const unsigned char *pw, const unsigned char *salt, char *result,
    size_t nbytes)
{
	/*
	* Minimum size is 8 bytes for salt, plus 1 for the trailing NUL,
	* plus 4 for the '$' separators, plus the password hash itself.
	* Let's leave a goodly amount of leeway.
	*/

	char passwd[120], *p;
	const unsigned char *sp, *ep;
	unsigned char final[16];
	int i;
	unsigned int sl;
	int pl;
	unsigned int pwlen;
	MD5_CTX ctx, ctx1;
	unsigned long l;

	/* 
	* Refine the salt first.  It's possible we were given an already-hashed
	* string as the salt argument, so extract the actual salt value from it
	* if so.  Otherwise just use the string up to the first '$' as the salt.
	*/
	sp = salt;

	/*
	* If it starts with the magic string, then skip that.
	*/
	if (strncmp((char *)sp, AP_MD5PW_ID, AP_MD5PW_IDLEN) == 0)
		sp += AP_MD5PW_IDLEN;

	/*
	* It stops at the first '$' or 8 chars, whichever comes first
	*/
	for (ep = sp; (*ep != '\0') && (*ep != '$') && (ep < (sp + 8)); ep++)
		continue;

	/*
	* Get the length of the true salt
	*/
	sl = ep - sp;

	/*
	* 'Time to make the doughnuts..'
	*/
	MD5Init(&ctx);

	pwlen = strlen((char *)pw);
	/*
	* The password first, since that is what is most unknown
	*/
	MD5Update(&ctx, pw, pwlen);

	/*
	* Then our magic string
	*/
	MD5Update(&ctx, (const unsigned char *) AP_MD5PW_ID, AP_MD5PW_IDLEN);

	/*
	* Then the raw salt
	*/
	MD5Update(&ctx, sp, sl);

	/*
	* Then just as many characters of the MD5(pw, salt, pw)
	*/
	MD5Init(&ctx1);
	MD5Update(&ctx1, pw, pwlen);
	MD5Update(&ctx1, sp, sl);
	MD5Update(&ctx1, pw, pwlen);
	MD5Final(final, &ctx1);
	for(pl = pwlen; pl > 0; pl -= 16)
		MD5Update(&ctx, final, (pl > 16) ? 16 : (unsigned int) pl);

	/*
	* Don't leave anything around in vm they could use.
	*/
	memset(final, 0, sizeof(final));

	/*
	* Then something really weird...
	*/
	for (i = pwlen; i != 0; i >>= 1) {
		if (i & 1)
		    MD5Update(&ctx, final, 1);
		else
		    MD5Update(&ctx, pw, 1);
	}

	/*
	* Now make the output string.  We know our limitations, so we
	* can use the string routines without bounds checking.
	*/
	ap_cpystrn(passwd, AP_MD5PW_ID, AP_MD5PW_IDLEN + 1);
	ap_cpystrn(passwd + AP_MD5PW_IDLEN, (char *)sp, sl + 1);
	passwd[AP_MD5PW_IDLEN + sl]     = '$';
	passwd[AP_MD5PW_IDLEN + sl + 1] = '\0';

	MD5Final(final, &ctx);

	/*
	* And now, just to make sure things don't run too fast..
	* On a 60 MHz Pentium this takes 34 msec, so you would
	* need 30 seconds to build a 1000 entry dictionary...
	*/
	for (i = 0; i < 1000; i++) {
		MD5Init(&ctx1);
		if (i & 1)
		    MD5Update(&ctx1, pw, pwlen);
		else
		    MD5Update(&ctx1, final, 16);
		if (i % 3)
		    MD5Update(&ctx1, sp, sl);

		if (i % 7)
		    MD5Update(&ctx1, pw, pwlen);

		if (i & 1)
		    MD5Update(&ctx1, final, 16);
		else
		    MD5Update(&ctx1, pw, pwlen);
		MD5Final(final,&ctx1);
	}

	p = passwd + strlen(passwd);

	l = (final[ 0]<<16) | (final[ 6]<<8) | final[12]; ap_to64(p, l, 4);
	p += 4;
	l = (final[ 1]<<16) | (final[ 7]<<8) | final[13]; ap_to64(p, l, 4);
	p += 4;
	l = (final[ 2]<<16) | (final[ 8]<<8) | final[14]; ap_to64(p, l, 4);
	p += 4;
	l = (final[ 3]<<16) | (final[ 9]<<8) | final[15]; ap_to64(p, l, 4);
	p += 4;
	l = (final[ 4]<<16) | (final[10]<<8) | final[ 5]; ap_to64(p, l, 4);
	p += 4;
	l =                    final[11]                ; ap_to64(p, l, 2);
	p += 2;
	*p = '\0';

	/*
	* Don't leave anything around in vm they could use.
	*/
	memset(final, 0, sizeof(final));

	ap_cpystrn(result, passwd, nbytes - 1);
}
@


1.11
log
@s/Mhz/MHz/, MHz is a multiple of the SI unit hertz (whose symbol is Hz).
@
text
@d1 1
a1 1
/* $OpenBSD: ap_md5c.c,v 1.10 2005/03/28 21:03:33 niallo Exp $ */
@


1.10
log
@clean up this code. make it conform as closely to KNF as possible without
introducing any binary changes.

two files here have different binary output when the number of lines changes,
we will finish cleaning those in another pass.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d253 1
a253 1
	* On a 60 Mhz Pentium this takes 34 msec, so you would
@


1.9
log
@rip out httpd's homegrown md5 implementation and use our own.

ok henning@@, mod_ssl and digest authentication verified by me.

From Sergey Smitienk <hunter@@comsys.com.ua>
@
text
@d1 1
a1 32
/*
 * This is work is derived from material Copyright RSA Data Security, Inc.
 *
 * The RSA copyright statement and Licence for that original material is
 * included below. This is followed by the Apache copyright statement and
 * licence for the modifications made to that material.
 */

/* MD5C.C - RSA Data Security, Inc., MD5 message-digest algorithm
 */

/* Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
   rights reserved.

   License to copy and use this software is granted provided that it
   is identified as the "RSA Data Security, Inc. MD5 Message-Digest
   Algorithm" in all material mentioning or referencing this software
   or this function.

   License is also granted to make and use derivative works provided
   that such works are identified as "derived from the RSA Data
   Security, Inc. MD5 Message-Digest Algorithm" in all material
   mentioning or referencing the derived work.

   RSA Data Security, Inc. makes no representations concerning either
   the merchantability of this software or the suitability of this
   software for any particular purpose. It is provided "as is"
   without express or implied warranty of any kind.

   These notices must be retained in any copies of any part of this
   documentation and/or software.
 */
d78 2
a79 4
static void Encode(unsigned char *output, const UINT4 *input,
		   unsigned int len);
static void Decode(UINT4 *output, const unsigned char *input,
		   unsigned int len);
d81 2
a82 1
API_EXPORT(void) ap_MD5Init(AP_MD5_CTX *context)
d84 1
a84 1
    MD5Init(context);
d87 3
a89 2
API_EXPORT(void) ap_MD5Update(AP_MD5_CTX *context, const unsigned char *input,
			      unsigned int inputLen)
d91 1
a91 1
    MD5Update(context, input, inputLen);
d94 2
a95 1
API_EXPORT(void) ap_MD5Final(unsigned char digest[16], AP_MD5_CTX *context)
d97 1
a97 1
    MD5Final(digest, context);
d103 2
a104 1
static void Encode(unsigned char *output, const UINT4 *input, unsigned int len)
d106 2
a107 2
    unsigned int i, j;
    UINT4 k;
d109 7
a115 7
    for (i = 0, j = 0; j < len; i++, j += 4) {
	k = input[i];
	output[j] = (unsigned char) (k & 0xff);
	output[j + 1] = (unsigned char) ((k >> 8) & 0xff);
	output[j + 2] = (unsigned char) ((k >> 16) & 0xff);
	output[j + 3] = (unsigned char) ((k >> 24) & 0xff);
    }
d121 2
a122 1
static void Decode(UINT4 *output, const unsigned char *input, unsigned int len)
d124 1
a124 1
    unsigned int i, j;
d126 4
a129 3
    for (i = 0, j = 0; j < len; i++, j += 4)
	output[i] = ((UINT4) input[j]) | (((UINT4) input[j + 1]) << 8) |
	    (((UINT4) input[j + 2]) << 16) | (((UINT4) input[j + 3]) << 24);
d137 2
a138 1
API_EXPORT(void) ap_to64(char *s, unsigned long v, int n)
d140 2
a141 2
    static unsigned char itoa64[] =         /* 0 ... 63 => ASCII - 64 */
	"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
d143 4
a146 4
    while (--n >= 0) {
	*s++ = itoa64[v&0x3f];
	v >>= 6;
    }
d149 3
a151 3
API_EXPORT(void) ap_MD5Encode(const unsigned char *pw,
			      const unsigned char *salt,
			      char *result, size_t nbytes)
d153 64
a216 109
    /*
     * Minimum size is 8 bytes for salt, plus 1 for the trailing NUL,
     * plus 4 for the '$' separators, plus the password hash itself.
     * Let's leave a goodly amount of leeway.
     */

    char passwd[120], *p;
    const unsigned char *sp, *ep;
    unsigned char final[16];
    int i;
    unsigned int sl;
    int pl;
    unsigned int pwlen;
    MD5_CTX ctx, ctx1;
    unsigned long l;

    /* 
     * Refine the salt first.  It's possible we were given an already-hashed
     * string as the salt argument, so extract the actual salt value from it
     * if so.  Otherwise just use the string up to the first '$' as the salt.
     */
    sp = salt;

    /*
     * If it starts with the magic string, then skip that.
     */
    if (strncmp((char *)sp, AP_MD5PW_ID, AP_MD5PW_IDLEN) == 0) {
	sp += AP_MD5PW_IDLEN;
    }

    /*
     * It stops at the first '$' or 8 chars, whichever comes first
     */
    for (ep = sp; (*ep != '\0') && (*ep != '$') && (ep < (sp + 8)); ep++) {
	continue;
    }

    /*
     * Get the length of the true salt
     */
    sl = ep - sp;

    /*
     * 'Time to make the doughnuts..'
     */
    MD5Init(&ctx);

    pwlen = strlen((char *)pw);
    /*
     * The password first, since that is what is most unknown
     */
    MD5Update(&ctx, pw, pwlen);

    /*
     * Then our magic string
     */
    MD5Update(&ctx, (const unsigned char *) AP_MD5PW_ID, AP_MD5PW_IDLEN);

    /*
     * Then the raw salt
     */
    MD5Update(&ctx, sp, sl);

    /*
     * Then just as many characters of the MD5(pw, salt, pw)
     */
    MD5Init(&ctx1);
    MD5Update(&ctx1, pw, pwlen);
    MD5Update(&ctx1, sp, sl);
    MD5Update(&ctx1, pw, pwlen);
    MD5Final(final, &ctx1);
    for(pl = pwlen; pl > 0; pl -= 16) {
	MD5Update(&ctx, final, (pl > 16) ? 16 : (unsigned int) pl);
    }

    /*
     * Don't leave anything around in vm they could use.
     */
    memset(final, 0, sizeof(final));

    /*
     * Then something really weird...
     */
    for (i = pwlen; i != 0; i >>= 1) {
	if (i & 1) {
	    MD5Update(&ctx, final, 1);
	}
	else {
	    MD5Update(&ctx, pw, 1);
	}
    }

    /*
     * Now make the output string.  We know our limitations, so we
     * can use the string routines without bounds checking.
     */
    ap_cpystrn(passwd, AP_MD5PW_ID, AP_MD5PW_IDLEN + 1);
    ap_cpystrn(passwd + AP_MD5PW_IDLEN, (char *)sp, sl + 1);
    passwd[AP_MD5PW_IDLEN + sl]     = '$';
    passwd[AP_MD5PW_IDLEN + sl + 1] = '\0';

    MD5Final(final, &ctx);

    /*
     * And now, just to make sure things don't run too fast..
     * On a 60 Mhz Pentium this takes 34 msec, so you would
     * need 30 seconds to build a 1000 entry dictionary...
     */
    for (i = 0; i < 1000; i++) {
d218 20
a237 12
	if (i & 1) {
	    MD5Update(&ctx1, pw, pwlen);
	}
	else {
	    MD5Update(&ctx1, final, 16);
	}
	if (i % 3) {
	    MD5Update(&ctx1, sp, sl);
	}

	if (i % 7) {
	    MD5Update(&ctx1, pw, pwlen);
d240 33
a272 5
	if (i & 1) {
	    MD5Update(&ctx1, final, 16);
	}
	else {
	    MD5Update(&ctx1, pw, pwlen);
a273 2
	MD5Final(final,&ctx1);
    }
d275 1
a275 1
    p = passwd + strlen(passwd);
d277 18
a294 12
    l = (final[ 0]<<16) | (final[ 6]<<8) | final[12]; ap_to64(p, l, 4); p += 4;
    l = (final[ 1]<<16) | (final[ 7]<<8) | final[13]; ap_to64(p, l, 4); p += 4;
    l = (final[ 2]<<16) | (final[ 8]<<8) | final[14]; ap_to64(p, l, 4); p += 4;
    l = (final[ 3]<<16) | (final[ 9]<<8) | final[15]; ap_to64(p, l, 4); p += 4;
    l = (final[ 4]<<16) | (final[10]<<8) | final[ 5]; ap_to64(p, l, 4); p += 4;
    l =                    final[11]                ; ap_to64(p, l, 2); p += 2;
    *p = '\0';

    /*
     * Don't leave anything around in vm they could use.
     */
    memset(final, 0, sizeof(final));
d296 1
a296 1
    ap_cpystrn(result, passwd, nbytes - 1);
@


1.8
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@a108 21
/* Constants for MD5Transform routine.
 */

#define S11 7
#define S12 12
#define S13 17
#define S14 22
#define S21 5
#define S22 9
#define S23 14
#define S24 20
#define S31 4
#define S32 11
#define S33 16
#define S34 23
#define S41 6
#define S42 10
#define S43 15
#define S44 21

static void MD5Transform(UINT4 state[4], const unsigned char block[64]);
a113 44
static unsigned char PADDING[64] =
{
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/* F, G, H and I are basic MD5 functions.
 */
#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))
#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))

/* ROTATE_LEFT rotates x left n bits.
 */
#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32-(n))))

/* FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
   Rotation is separate from addition to prevent recomputation.
 */
#define FF(a, b, c, d, x, s, ac) { \
 (a) += F ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define GG(a, b, c, d, x, s, ac) { \
 (a) += G ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define HH(a, b, c, d, x, s, ac) { \
 (a) += H ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }
#define II(a, b, c, d, x, s, ac) { \
 (a) += I ((b), (c), (d)) + (x) + (UINT4)(ac); \
 (a) = ROTATE_LEFT ((a), (s)); \
 (a) += (b); \
  }

/* MD5 initialization. Begins an MD5 operation, writing a new context.
 */
d116 1
a116 6
    context->count[0] = context->count[1] = 0;
    /* Load magic initialization constants. */
    context->state[0] = 0x67452301;
    context->state[1] = 0xefcdab89;
    context->state[2] = 0x98badcfe;
    context->state[3] = 0x10325476;
a118 4
/* MD5 block update operation. Continues an MD5 message-digest
   operation, processing another message block, and updating the
   context.
 */
d122 1
a122 31
    unsigned int i, idx, partLen;

    /* Compute number of bytes mod 64 */
    idx = (unsigned int) ((context->count[0] >> 3) & 0x3F);

    /* Update number of bits */
    if ((context->count[0] += ((UINT4) inputLen << 3))
	< ((UINT4) inputLen << 3)) {
	context->count[1]++;
    }
    context->count[1] += (UINT4) inputLen >> 29;

    partLen = 64 - idx;

    /* Transform as many times as possible. */
    if (inputLen >= partLen) {
	memcpy(&context->buffer[idx], input, partLen);
	MD5Transform(context->state, context->buffer);

	for (i = partLen; i + 63 < inputLen; i += 64) {
	    MD5Transform(context->state, &input[i]);
	}

	idx = 0;
    }
    else {
	i = 0;
    }

    /* Buffer remaining input */
    memcpy(&context->buffer[idx], &input[i], inputLen - i);
a124 3
/* MD5 finalization. Ends an MD5 message-digest operation, writing the
   the message digest and zeroizing the context.
 */
d127 1
a127 108
    unsigned char bits[8];
    unsigned int idx, padLen;


    /* Save number of bits */
    Encode(bits, context->count, 8);

    /* Pad out to 56 mod 64. */
    idx = (unsigned int) ((context->count[0] >> 3) & 0x3f);
    padLen = (idx < 56) ? (56 - idx) : (120 - idx);
    ap_MD5Update(context, (const unsigned char *)PADDING, padLen);

    /* Append length (before padding) */
    ap_MD5Update(context, (const unsigned char *)bits, 8);

    /* Store state in digest */
    Encode(digest, context->state, 16);

    /* Zeroize sensitive information. */
    memset(context, 0, sizeof(*context));
}

/* MD5 basic transformation. Transforms state based on block. */
static void MD5Transform(UINT4 state[4], const unsigned char block[64])
{
    UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

    Decode(x, block, 64);

    /* Round 1 */
    FF(a, b, c, d, x[0], S11, 0xd76aa478);	/* 1 */
    FF(d, a, b, c, x[1], S12, 0xe8c7b756);	/* 2 */
    FF(c, d, a, b, x[2], S13, 0x242070db);	/* 3 */
    FF(b, c, d, a, x[3], S14, 0xc1bdceee);	/* 4 */
    FF(a, b, c, d, x[4], S11, 0xf57c0faf);	/* 5 */
    FF(d, a, b, c, x[5], S12, 0x4787c62a);	/* 6 */
    FF(c, d, a, b, x[6], S13, 0xa8304613);	/* 7 */
    FF(b, c, d, a, x[7], S14, 0xfd469501);	/* 8 */
    FF(a, b, c, d, x[8], S11, 0x698098d8);	/* 9 */
    FF(d, a, b, c, x[9], S12, 0x8b44f7af);	/* 10 */
    FF(c, d, a, b, x[10], S13, 0xffff5bb1);	/* 11 */
    FF(b, c, d, a, x[11], S14, 0x895cd7be);	/* 12 */
    FF(a, b, c, d, x[12], S11, 0x6b901122);	/* 13 */
    FF(d, a, b, c, x[13], S12, 0xfd987193);	/* 14 */
    FF(c, d, a, b, x[14], S13, 0xa679438e);	/* 15 */
    FF(b, c, d, a, x[15], S14, 0x49b40821);	/* 16 */

    /* Round 2 */
    GG(a, b, c, d, x[1], S21, 0xf61e2562);	/* 17 */
    GG(d, a, b, c, x[6], S22, 0xc040b340);	/* 18 */
    GG(c, d, a, b, x[11], S23, 0x265e5a51);	/* 19 */
    GG(b, c, d, a, x[0], S24, 0xe9b6c7aa);	/* 20 */
    GG(a, b, c, d, x[5], S21, 0xd62f105d);	/* 21 */
    GG(d, a, b, c, x[10], S22, 0x2441453);	/* 22 */
    GG(c, d, a, b, x[15], S23, 0xd8a1e681);	/* 23 */
    GG(b, c, d, a, x[4], S24, 0xe7d3fbc8);	/* 24 */
    GG(a, b, c, d, x[9], S21, 0x21e1cde6);	/* 25 */
    GG(d, a, b, c, x[14], S22, 0xc33707d6);	/* 26 */
    GG(c, d, a, b, x[3], S23, 0xf4d50d87);	/* 27 */
    GG(b, c, d, a, x[8], S24, 0x455a14ed);	/* 28 */
    GG(a, b, c, d, x[13], S21, 0xa9e3e905);	/* 29 */
    GG(d, a, b, c, x[2], S22, 0xfcefa3f8);	/* 30 */
    GG(c, d, a, b, x[7], S23, 0x676f02d9);	/* 31 */
    GG(b, c, d, a, x[12], S24, 0x8d2a4c8a);	/* 32 */

    /* Round 3 */
    HH(a, b, c, d, x[5], S31, 0xfffa3942);	/* 33 */
    HH(d, a, b, c, x[8], S32, 0x8771f681);	/* 34 */
    HH(c, d, a, b, x[11], S33, 0x6d9d6122);	/* 35 */
    HH(b, c, d, a, x[14], S34, 0xfde5380c);	/* 36 */
    HH(a, b, c, d, x[1], S31, 0xa4beea44);	/* 37 */
    HH(d, a, b, c, x[4], S32, 0x4bdecfa9);	/* 38 */
    HH(c, d, a, b, x[7], S33, 0xf6bb4b60);	/* 39 */
    HH(b, c, d, a, x[10], S34, 0xbebfbc70);	/* 40 */
    HH(a, b, c, d, x[13], S31, 0x289b7ec6);	/* 41 */
    HH(d, a, b, c, x[0], S32, 0xeaa127fa);	/* 42 */
    HH(c, d, a, b, x[3], S33, 0xd4ef3085);	/* 43 */
    HH(b, c, d, a, x[6], S34, 0x4881d05);	/* 44 */
    HH(a, b, c, d, x[9], S31, 0xd9d4d039);	/* 45 */
    HH(d, a, b, c, x[12], S32, 0xe6db99e5);	/* 46 */
    HH(c, d, a, b, x[15], S33, 0x1fa27cf8);	/* 47 */
    HH(b, c, d, a, x[2], S34, 0xc4ac5665);	/* 48 */

    /* Round 4 */
    II(a, b, c, d, x[0], S41, 0xf4292244);	/* 49 */
    II(d, a, b, c, x[7], S42, 0x432aff97);	/* 50 */
    II(c, d, a, b, x[14], S43, 0xab9423a7);	/* 51 */
    II(b, c, d, a, x[5], S44, 0xfc93a039);	/* 52 */
    II(a, b, c, d, x[12], S41, 0x655b59c3);	/* 53 */
    II(d, a, b, c, x[3], S42, 0x8f0ccc92);	/* 54 */
    II(c, d, a, b, x[10], S43, 0xffeff47d);	/* 55 */
    II(b, c, d, a, x[1], S44, 0x85845dd1);	/* 56 */
    II(a, b, c, d, x[8], S41, 0x6fa87e4f);	/* 57 */
    II(d, a, b, c, x[15], S42, 0xfe2ce6e0);	/* 58 */
    II(c, d, a, b, x[6], S43, 0xa3014314);	/* 59 */
    II(b, c, d, a, x[13], S44, 0x4e0811a1);	/* 60 */
    II(a, b, c, d, x[4], S41, 0xf7537e82);	/* 61 */
    II(d, a, b, c, x[11], S42, 0xbd3af235);	/* 62 */
    II(c, d, a, b, x[2], S43, 0x2ad7d2bb);	/* 63 */
    II(b, c, d, a, x[9], S44, 0xeb86d391);	/* 64 */

    state[0] += a;
    state[1] += b;
    state[2] += c;
    state[3] += d;

    /* Zeroize sensitive information. */
    memset(x, 0, sizeof(x));
d192 1
a192 1
    AP_MD5_CTX ctx, ctx1;
d224 1
a224 1
    ap_MD5Init(&ctx);
d230 1
a230 1
    ap_MD5Update(&ctx, pw, pwlen);
d235 1
a235 1
    ap_MD5Update(&ctx, (const unsigned char *) AP_MD5PW_ID, AP_MD5PW_IDLEN);
d240 1
a240 1
    ap_MD5Update(&ctx, sp, sl);
d245 5
a249 5
    ap_MD5Init(&ctx1);
    ap_MD5Update(&ctx1, pw, pwlen);
    ap_MD5Update(&ctx1, sp, sl);
    ap_MD5Update(&ctx1, pw, pwlen);
    ap_MD5Final(final, &ctx1);
d251 1
a251 1
	ap_MD5Update(&ctx, final, (pl > 16) ? 16 : (unsigned int) pl);
d264 1
a264 1
	    ap_MD5Update(&ctx, final, 1);
d267 1
a267 1
	    ap_MD5Update(&ctx, pw, 1);
d280 1
a280 1
    ap_MD5Final(final, &ctx);
d288 1
a288 1
	ap_MD5Init(&ctx1);
d290 1
a290 1
	    ap_MD5Update(&ctx1, pw, pwlen);
d293 1
a293 1
	    ap_MD5Update(&ctx1, final, 16);
d296 1
a296 1
	    ap_MD5Update(&ctx1, sp, sl);
d300 1
a300 1
	    ap_MD5Update(&ctx1, pw, pwlen);
d304 1
a304 1
	    ap_MD5Update(&ctx1, final, 16);
d307 1
a307 1
	    ap_MD5Update(&ctx1, pw, pwlen);
d309 1
a309 1
	ap_MD5Final(final,&ctx1);
@


1.7
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a107 3
#if HAVE_CRYPT_H
#include <crypt.h>
#endif
@


1.6
log
@merge
@
text
@a107 3
#ifdef CHARSET_EBCDIC
#include "ap_ebcdic.h"
#endif /*CHARSET_EBCDIC*/
a213 1
#ifndef CHARSET_EBCDIC
a229 20
#else /*CHARSET_EBCDIC*/
    if (inputLen >= partLen) {
	ebcdic2ascii(&context->buffer[idx], input, partLen);
	MD5Transform(context->state, context->buffer);

	for (i = partLen; i + 63 < inputLen; i += 64) {
	    unsigned char inp_tmp[64];
	    ebcdic2ascii(inp_tmp, &input[i], 64);
	    MD5Transform(context->state, inp_tmp);
	}

	idx = 0;
    }
    else {
	i = 0;
    }

    /* Buffer remaining input */
    ebcdic2ascii(&context->buffer[idx], &input[i], inputLen - i);
#endif /*CHARSET_EBCDIC*/
a242 15

#ifdef CHARSET_EBCDIC
    /* XXX: @@@@@@: In order to make this no more complex than necessary,
     * this kludge converts the bits[] array using the ascii-to-ebcdic
     * table, because the following ap_MD5Update() re-translates
     * its input (ebcdic-to-ascii).
     * Otherwise, we would have to pass a "conversion" flag to ap_MD5Update()
     */
    ascii2ebcdic(bits,bits,8);

    /* Since everything is converted to ascii within ap_MD5Update(), 
     * the initial 0x80 (PADDING[0]) must be stored as 0x20 
     */
    PADDING[0] = os_toebcdic[0x80];
#endif /*CHARSET_EBCDIC*/
@


1.5
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d37 1
a37 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.4
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d37 1
a37 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
@


1.3
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d109 1
a109 1
#include "ebcdic.h"
@


1.2
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d35 4
a38 1
 * Copyright (c) 1996-1999 The Apache Group.  All rights reserved.
d45 1
a45 1
 *    notice, this list of conditions and the following disclaimer. 
d52 20
a71 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d73 7
a79 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d83 7
a89 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.1
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d235 1
a235 1
	ebcdic2ascii_strictly(&context->buffer[idx], input, partLen);
d240 1
a240 1
	    ebcdic2ascii_strictly(inp_tmp, &input[i], 64);
d251 1
a251 1
    ebcdic2ascii_strictly(&context->buffer[idx], &input[i], inputLen - i);
@


1.1.1.1
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d35 1
a35 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d42 1
a42 1
 *    notice, this list of conditions and the following disclaimer.
d49 23
a71 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d73 7
a79 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d83 6
a88 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
d108 1
a108 1
#include "ap_ebcdic.h"
d235 1
a235 1
	ebcdic2ascii(&context->buffer[idx], input, partLen);
d240 1
a240 1
	    ebcdic2ascii(inp_tmp, &input[i], 64);
d251 1
a251 1
    ebcdic2ascii(&context->buffer[idx], &input[i], inputLen - i);
@


1.1.1.2
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d37 1
a37 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


