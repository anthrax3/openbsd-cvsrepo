head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.12
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.26
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.24
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.22
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.20
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.16
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.14
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.12
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.10
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.1
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.20
	OPENBSD_3_3_BASE:1.1.1.1
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.18
	OPENBSD_3_2_BASE:1.1.1.1
	apache_1_3_26:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.16
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.14
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.12
	OPENBSD_2_8:1.1.1.1.0.10
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2011.09.17.15.20.57;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.20.12.23.22;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.28.21.03.33;	author niallo;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.09.12.13.09;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.37;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.37;	author beck;	state Exp;
branches;
next	;


desc
@@


1.7
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: ap_fnmatch.c,v 1.6 2011/09/17 15:20:57 stsp Exp $ */

/*
 * Copyright (c) 1989, 1993, 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Guido van Rossum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Function fnmatch() as specified in POSIX 1003.2-1992, section B.6.
 * Compares a filename or pathname to a pattern.
 */

#include "ap_config.h"
#include "fnmatch.h"
#include <string.h>
#include <limits.h>

#define EOS     '\0'

/* Limit of recursion during matching attempts. */
#define __FNM_MAX_RECUR	64

static int __fnmatch(const char *, const char *, int, int);
static const char *rangematch(const char *, int, int);

API_EXPORT(int)
ap_fnmatch(const char *pattern, const char *string, int flags)
{
	int e;

	if (strnlen(pattern, PATH_MAX) == PATH_MAX ||
	    strnlen(string, PATH_MAX) == PATH_MAX)
		return (FNM_NOMATCH);
		
	e = __fnmatch(pattern, string, flags, __FNM_MAX_RECUR);
	if (e == -1)
		e = FNM_NOMATCH;
	return (e);
}

int
__fnmatch(const char *pattern, const char *string, int flags, int recur)
{
	const char *stringstart;
	char c, test;
	int e;

	if (recur-- == 0)
		return (-1);

	for (stringstart = string;;) {
		switch (c = *pattern++) {
		case EOS:
			return (*string == EOS ? 0 : FNM_NOMATCH);
		case '?':
			if (*string == EOS)
				return (FNM_NOMATCH);
			if (*string == '/' && (flags & FNM_PATHNAME))
				return (FNM_NOMATCH);
			if (*string == '.' && (flags & FNM_PERIOD) &&
			    (string == stringstart ||
			    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
				return (FNM_NOMATCH);
			++string;
			break;
		case '*':
			c = *pattern;
			/* Collapse multiple stars. */
			while (c == '*')
				c = *++pattern;

			if (*string == '.' && (flags & FNM_PERIOD) &&
			    (string == stringstart ||
			    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
				return (FNM_NOMATCH);

			/* Optimize for pattern with * at end or before /. */
			if (c == EOS) {
				if (flags & FNM_PATHNAME)
					return (strchr(string, '/') == NULL ? 0 : FNM_NOMATCH);
				else
					return (0);
			}
			else if (c == '/' && flags & FNM_PATHNAME) {
				if ((string = strchr(string, '/')) == NULL)
					return (FNM_NOMATCH);
				break;
			}

			/* General case, use recursion. */
			while ((test = *string) != EOS) {
				e = __fnmatch(pattern, string,
				    flags & ~FNM_PERIOD, recur);
				if (e != FNM_NOMATCH)
					return (e);
				if (test == '/' && flags & FNM_PATHNAME)
					break;
				++string;
			}
			return (FNM_NOMATCH);
		case '[':
			if (*string == EOS)
				return (FNM_NOMATCH);
			if (*string == '/' && flags & FNM_PATHNAME)
				return (FNM_NOMATCH);
			if (*string == '.' && (flags & FNM_PERIOD) &&
			    (string == stringstart ||
			    ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
				return (FNM_NOMATCH);
			if ((pattern = rangematch(pattern, *string, flags))
			    == NULL)
				return (FNM_NOMATCH);
			++string;
			break;
		case '\\':
			if (!(flags & FNM_NOESCAPE))
				if ((c = *pattern++) == EOS) {
					c = '\\';
					--pattern;
				}
			/* FALLTHROUGH */
		default:
			if (flags & FNM_CASE_BLIND) {
				if (ap_tolower(c) != ap_tolower(*string))
					return (FNM_NOMATCH);
			}
			else if (c != *string)
				return (FNM_NOMATCH);
			string++;
			break;
		}
	/* NOTREACHED */
	}
}

static const char *
rangematch(const char *pattern, int test, int flags)
{
	int negate, ok;
	char c, c2;

	/*
	* A bracket expression starting with an unquoted circumflex
	* character produces unspecified results (IEEE 1003.2-1992,
	* 3.13.2).  This implementation treats it like '!', for
	* consistency with the regular expression syntax.
	* J.T. Conklin (conklin@@ngai.kaleida.com)
	*/
	if ((negate = (*pattern == '!' || *pattern == '^')))
		++pattern;

	for (ok = 0; (c = *pattern++) != ']';) {
		if (c == '\\' && !(flags & FNM_NOESCAPE))
			c = *pattern++;
		if (c == EOS)
			return (NULL);
		if (*pattern == '-' && (c2 = *(pattern + 1)) != EOS && c2
		    != ']') {
			pattern += 2;
			if (c2 == '\\' && !(flags & FNM_NOESCAPE))
				c2 = *pattern++;
			if (c2 == EOS)
				return (NULL);
			if ((c <= test && test <= c2)
			    || ((flags & FNM_CASE_BLIND)
			    && ((ap_tolower(c) <= ap_tolower(test))
			    && (ap_tolower(test) <= ap_tolower(c2)))))
				ok = 1;
		}
		else if ((c == test) || ((flags & FNM_CASE_BLIND)
		    && (ap_tolower(c) == ap_tolower(test))))
			ok = 1;
	}
	return (ok == negate ? NULL : pattern);
}


/* This function is an Apache addition */
/* return non-zero if pattern has any glob chars in it */
API_EXPORT(int)
ap_is_fnmatch(const char *pattern)
{
	int nesting;

	nesting = 0;
	while (*pattern) {
		switch (*pattern) {
		case '?':
		case '*':
			return 1;

		case '\\':
			if (*pattern++ == '\0')
				return 0;
			break;

		case '[':    /* '[' is only a glob if it has a matching ']' */
			++nesting;
			break;

		case ']':
			if (nesting)
				return 1;
			break;
		}
		++pattern;
	}
	return 0;
}
@


1.6
log
@Apply the fnmatch recursion limit fix to the local copy of fnmatch in httpd.
ok henning
@
text
@d1 1
a1 1
/* $OpenBSD: ap_fnmatch.c,v 1.5 2005/06/20 12:23:22 robert Exp $ */
@


1.5
log
@$OpenBSD -> $OpenBSD$

ok henning@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d43 1
d47 4
d56 15
d73 4
d119 4
a122 3
				if (!ap_fnmatch(pattern, string,
				    flags & ~FNM_PERIOD))
					return (0);
@


1.4
log
@clean up this code. make it conform as closely to KNF as possible without
introducing any binary changes.

two files here have different binary output when the number of lines changes,
we will finish cleaning those in another pass.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.3
log
@cleanup and unifdef'ing, no change in object files
work by Daniel Ouellet <daniel@@presscom.net>
@
text
@d1 2
d44 1
a44 1
#define	EOS	'\0'
d48 2
a49 1
API_EXPORT(int) ap_fnmatch(const char *pattern, const char *string, int flags)
d51 2
a52 49
    const char *stringstart;
    char c, test;

    for (stringstart = string;;) {
	switch (c = *pattern++) {
	case EOS:
	    return (*string == EOS ? 0 : FNM_NOMATCH);
	case '?':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && (flags & FNM_PATHNAME)) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '*':
	    c = *pattern;
	    /* Collapse multiple stars. */
	    while (c == '*') {
		c = *++pattern;
	    }

	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }

	    /* Optimize for pattern with * at end or before /. */
	    if (c == EOS) {
		if (flags & FNM_PATHNAME) {
		    return (strchr(string, '/') == NULL ? 0 : FNM_NOMATCH);
		}
		else {
		    return (0);
		}
	    }
	    else if (c == '/' && flags & FNM_PATHNAME) {
	        if ((string = strchr(string, '/')) == NULL) {
		    return (FNM_NOMATCH);
		}
		break;
	    }
d54 79
a132 7
	    /* General case, use recursion. */
	    while ((test = *string) != EOS) {
	        if (!ap_fnmatch(pattern, string, flags & ~FNM_PERIOD)) {
		    return (0);
		}
		if (test == '/' && flags & FNM_PATHNAME) {
		    break;
d134 1
a134 39
		++string;
	    }
	    return (FNM_NOMATCH);
	case '[':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && flags & FNM_PATHNAME) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
	        return (FNM_NOMATCH);
	    }
	    if ((pattern = rangematch(pattern, *string, flags)) == NULL) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '\\':
	    if (!(flags & FNM_NOESCAPE)) {
		if ((c = *pattern++) == EOS) {
		    c = '\\';
		    --pattern;
		}
	    }
	    /* FALLTHROUGH */
	default:
	    if (flags & FNM_CASE_BLIND) {
	        if (ap_tolower(c) != ap_tolower(*string)) {
		    return (FNM_NOMATCH);
		}
	    }
	    else if (c != *string) {
	        return (FNM_NOMATCH);
	    }
	    string++;
	    break;
a135 2
    /* NOTREACHED */
    }
d138 2
a139 1
static const char *rangematch(const char *pattern, int test, int flags)
d141 2
a142 2
    int negate, ok;
    char c, c2;
d144 31
a174 17
    /*
     * A bracket expression starting with an unquoted circumflex
     * character produces unspecified results (IEEE 1003.2-1992,
     * 3.13.2).  This implementation treats it like '!', for
     * consistency with the regular expression syntax.
     * J.T. Conklin (conklin@@ngai.kaleida.com)
     */
    if ((negate = (*pattern == '!' || *pattern == '^'))) {
	++pattern;
    }

    for (ok = 0; (c = *pattern++) != ']';) {
        if (c == '\\' && !(flags & FNM_NOESCAPE)) {
	    c = *pattern++;
	}
	if (c == EOS) {
	    return (NULL);
d176 1
a176 22
	if (*pattern == '-' && (c2 = *(pattern + 1)) != EOS && c2 != ']') {
	    pattern += 2;
	    if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
		c2 = *pattern++;
	    }
	    if (c2 == EOS) {
		return (NULL);
	    }
	    if ((c <= test && test <= c2)
		|| ((flags & FNM_CASE_BLIND)
		    && ((ap_tolower(c) <= ap_tolower(test))
			&& (ap_tolower(test) <= ap_tolower(c2))))) {
		ok = 1;
	    }
	}
	else if ((c == test)
		 || ((flags & FNM_CASE_BLIND)
		     && (ap_tolower(c) == ap_tolower(test)))) {
	    ok = 1;
	}
    }
    return (ok == negate ? NULL : pattern);
d182 2
a183 1
API_EXPORT(int) ap_is_fnmatch(const char *pattern)
d185 1
a185 1
    int nesting;
d187 22
a208 22
    nesting = 0;
    while (*pattern) {
	switch (*pattern) {
	case '?':
	case '*':
	    return 1;

	case '\\':
	    if (*pattern++ == '\0') {
		return 0;
	    }
	    break;

	case '[':	/* '[' is only a glob if it has a matching ']' */
	    ++nesting;
	    break;

	case ']':
	    if (nesting) {
		return 1;
	    }
	    break;
d210 1
a210 3
	++pattern;
    }
    return 0;
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@a32 4
#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)fnmatch.c	8.2 (Berkeley) 4/16/94";
#endif /* LIBC_SCCS and not lint */

@


1.1
log
@Initial revision
@
text
@d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@
