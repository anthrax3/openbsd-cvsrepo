head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.38
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.34
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.32
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.30
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.28
	OPENBSD_5_0:1.4.0.26
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.24
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.22
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.18
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.20
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.16
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.14
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.12
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.20
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.18
	OPENBSD_3_5_BASE:1.2
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.1
	OPENBSD_3_4:1.2.0.16
	OPENBSD_3_4_BASE:1.2
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.2.0.14
	OPENBSD_3_3_BASE:1.2
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	apache:1.1.1
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.4;

1.4
date	2005.03.28.21.03.33;	author niallo;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.06.13.14.09;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.25.18.29.38;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.06.29.23;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.07.19.48.11;	author henning;	state Exp;
branches;
next	;


desc
@@


1.5
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: ap_mm.c,v 1.4 2005/03/28 21:03:33 niallo Exp $ */

/* ====================================================================
 * Copyright (c) 1999-2000 The Apache Group.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 */

/*
**  ap_mm.c -- wrapper for MM shared memory library
**
**  This file has two reason:
**
**  1. Under DSO context we need stubs inside the Apache core code
**     to make sure the MM library's code is actually available
**     to the module DSOs.
**
**  2. When the MM library cannot be built on the current platform
**     still provide dummy stubs so modules using the ap_mm_xxx()
**     functions can be still built. But modules should use
**     ap_mm_useable() to find out whether they really can use
**     the MM stuff.
*/
                                       /*
                                        * "What you see is all you get."
                                        *     -- Brian Kernighan
                                        */
#include "httpd.h"
#include "ap_mm.h"

#ifdef EAPI_MM
#include "mm.h"
API_EXPORT(int) ap_mm_useable(void) { return TRUE;  }
#define STUB(val,nul)               { return val;   }
#define STUB_STMT(stmt)             { stmt; return; }
#else
API_EXPORT(int) ap_mm_useable(void) { return FALSE; }
#define STUB(val,nul)               { return nul;   }
#define STUB_STMT(stmt)             { return;       }
#endif

API_EXPORT(int) ap_MM_create(size_t size, char *file)
    STUB(MM_create(size, file), FALSE)
API_EXPORT(int) ap_MM_permission(mode_t mode, uid_t owner, gid_t group)
    STUB(MM_permission(mode, owner, group), -1)
API_EXPORT(void) ap_MM_destroy(void)
    STUB_STMT(MM_destroy())
API_EXPORT(int) ap_MM_lock(ap_mm_lock_mode mode)
    STUB(MM_lock(mode), FALSE)
API_EXPORT(int) ap_MM_unlock(void)
    STUB(MM_unlock(), FALSE)
API_EXPORT(void *) ap_MM_malloc(size_t size)
    STUB(MM_malloc(size), NULL)
API_EXPORT(void *) ap_MM_realloc(void *ptr, size_t size)
    STUB(MM_realloc(ptr, size), NULL)
API_EXPORT(void) ap_MM_free(void *ptr)
    STUB_STMT(MM_free(ptr))
API_EXPORT(void *) ap_MM_calloc(size_t number, size_t size)
    STUB(MM_calloc(number, size), NULL)
API_EXPORT(char *) ap_MM_strdup(const char *str)
    STUB(MM_strdup(str), NULL)
API_EXPORT(size_t) ap_MM_sizeof(void *ptr)
    STUB(MM_sizeof(ptr), 0)
API_EXPORT(size_t) ap_MM_maxsize(void)
    STUB(MM_maxsize(), 0)
API_EXPORT(size_t) ap_MM_available(void)
    STUB(MM_available(), 0)
API_EXPORT(char *) ap_MM_error(void)
    STUB(MM_error(), NULL)

API_EXPORT(AP_MM *) ap_mm_create(size_t size, char *file)
    STUB(mm_create(size, file), NULL)
API_EXPORT(int) ap_mm_permission(AP_MM *mm, mode_t mode, uid_t owner,
    gid_t group)
    STUB(mm_permission(mm, mode, owner, group), -1)
API_EXPORT(void) ap_mm_destroy(AP_MM *mm)
    STUB_STMT(mm_destroy(mm))
API_EXPORT(int) ap_mm_lock(AP_MM *mm, ap_mm_lock_mode mode)
    STUB(mm_lock(mm, mode), FALSE)
API_EXPORT(int) ap_mm_unlock(AP_MM *mm)
    STUB(mm_unlock(mm), FALSE)
API_EXPORT(void *) ap_mm_malloc(AP_MM *mm, size_t size)
    STUB(mm_malloc(mm, size), NULL)
API_EXPORT(void *) ap_mm_realloc(AP_MM *mm, void *ptr, size_t size)
    STUB(mm_realloc(mm, ptr, size), NULL)
API_EXPORT(void) ap_mm_free(AP_MM *mm, void *ptr)
    STUB_STMT(mm_free(mm, ptr))
API_EXPORT(void *) ap_mm_calloc(AP_MM *mm, size_t number, size_t size)
    STUB(mm_calloc(mm, number, size), NULL)
API_EXPORT(char *) ap_mm_strdup(AP_MM *mm, const char *str)
    STUB(mm_strdup(mm, str), NULL)
API_EXPORT(size_t) ap_mm_sizeof(AP_MM *mm, void *ptr)
    STUB(mm_sizeof(mm, ptr), 0)
API_EXPORT(size_t) ap_mm_maxsize(void)
    STUB(mm_maxsize(), 0)
API_EXPORT(size_t) ap_mm_available(AP_MM *mm)
    STUB(mm_available(mm), 0)
API_EXPORT(char *) ap_mm_error(void)
    STUB(mm_error(), NULL)
API_EXPORT(void) ap_mm_display_info(AP_MM *mm)
    STUB_STMT(mm_display_info(mm))

API_EXPORT(void *) ap_mm_core_create(size_t size, char *file)
    STUB(mm_core_create(size, file), NULL)
API_EXPORT(int) ap_mm_core_permission(void *core, mode_t mode, uid_t owner,
    gid_t group)
    STUB(mm_core_permission(core, mode, owner, group), -1)
API_EXPORT(void) ap_mm_core_delete(void *core)
    STUB_STMT(mm_core_delete(core))
API_EXPORT(size_t) ap_mm_core_size(void *core)
    STUB(mm_core_size(core), 0)
API_EXPORT(int) ap_mm_core_lock(void *core, ap_mm_lock_mode mode)
    STUB(mm_core_lock(core, mode), FALSE)
API_EXPORT(int) ap_mm_core_unlock(void *core)
    STUB(mm_core_unlock(core), FALSE)
API_EXPORT(size_t) ap_mm_core_maxsegsize(void)
    STUB(mm_core_maxsegsize(), 0)
API_EXPORT(size_t) ap_mm_core_align2page(size_t size)
    STUB(mm_core_align2page(size), 0)
API_EXPORT(size_t) ap_mm_core_align2word(size_t size)
    STUB(mm_core_align2word(size), 0)

API_EXPORT(void) ap_mm_lib_error_set(unsigned int type, const char *str)
    STUB_STMT(mm_lib_error_set(type, str))
API_EXPORT(char *) ap_mm_lib_error_get(void)
    STUB(mm_lib_error_get(), NULL)
API_EXPORT(int) ap_mm_lib_version(void)
    STUB(mm_lib_version(), 0)
@


1.4
log
@clean up this code. make it conform as closely to KNF as possible without
introducing any binary changes.

two files here have different binary output when the number of lines changes,
we will finish cleaning those in another pass.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.3
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d1 2
d92 1
a92 1
API_EXPORT(int) ap_MM_create(size_t size, char *file) 
d94 1
a94 1
API_EXPORT(int) ap_MM_permission(mode_t mode, uid_t owner, gid_t group) 
d123 2
a124 1
API_EXPORT(int) ap_mm_permission(AP_MM *mm, mode_t mode, uid_t owner, gid_t group) 
d155 2
a156 1
API_EXPORT(int) ap_mm_core_permission(void *core, mode_t mode, uid_t owner, gid_t group) 
@


1.2
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@a75 2
#ifdef EAPI

a174 2

#endif /* EAPI */
@


1.1
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d2 1
a2 1
 * Copyright (c) 1999 The Apache Group.  All rights reserved.
@


1.1.1.1
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d2 1
a2 1
 * Copyright (c) 1999-2000 The Apache Group.  All rights reserved.
@


