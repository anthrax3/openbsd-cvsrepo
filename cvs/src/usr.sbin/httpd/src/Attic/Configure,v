head	1.30;
access;
symbols
	OPENBSD_5_5:1.29.0.18
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.14
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.12
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.10
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.8
	OPENBSD_5_0:1.29.0.6
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.4
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.29.0.2
	OPENBSD_4_8_BASE:1.29
	OPENBSD_4_7:1.28.0.6
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.28.0.8
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.4
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.28.0.2
	OPENBSD_4_4_BASE:1.28
	OPENBSD_4_3:1.27.0.6
	OPENBSD_4_3_BASE:1.27
	OPENBSD_4_2:1.27.0.4
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.27.0.2
	OPENBSD_4_1_BASE:1.27
	OPENBSD_4_0:1.23.0.12
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.10
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.8
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.6
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.23.0.4
	OPENBSD_3_6_BASE:1.23
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.6
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.5
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.4
	apache_1_3_27:1.1.1.4
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.30
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.29;

1.29
date	2010.05.05.11.58.27;	author kettenis;	state Exp;
branches;
next	1.28;

1.28
date	2008.05.09.08.06.27;	author mbalmer;	state Exp;
branches;
next	1.27;

1.27
date	2007.02.14.20.11.09;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2007.02.13.19.00.58;	author henning;	state Exp;
branches;
next	1.25;

1.25
date	2007.02.13.00.37.24;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.03.18.01.52;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.17.18.57.05;	author henning;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.21.13.11.33;	author henning;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.07.20.23.06;	author henning;	state Exp;
branches;
next	1.20;

1.20
date	2002.07.19.21.31.15;	author henning;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.29.02.08.05;	author beck;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.22.16.55.44;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.17.04.52.14;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.21.23.33.14;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.12.07.56.49;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.29.10.21.38;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2000.12.15.22.17.52;	author beck;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.16.21.23.35;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.19.11.16.52;	author beck;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.28.18.39.57;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.25.18.29.36;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	99.09.29.06.29.19;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	99.03.01.04.28.27;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	99.03.01.01.05.37;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	98.10.11.19.45.09;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	98.10.10.18.33.46;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	98.10.01.17.32.00;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	98.03.31.20.01.34;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.43;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.43;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.35;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.28;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.07.19.48.11;	author henning;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.08.21.12.53.37;	author henning;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.11.17.17.03.19;	author henning;	state Exp;
branches;
next	;


desc
@@


1.30
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@#!/bin/sh
# $OpenBSD: Configure,v 1.29 2010/05/05 11:58:27 kettenis Exp $
## ====================================================================
## The Apache Software License, Version 1.1
##
## Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
## reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
##
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in
##    the documentation and/or other materials provided with the
##    distribution.
##
## 3. The end-user documentation included with the redistribution,
##    if any, must include the following acknowledgment:
##       "This product includes software developed by the
##        Apache Software Foundation (http://www.apache.org/)."
##    Alternately, this acknowledgment may appear in the software itself,
##    if and wherever such third-party acknowledgments normally appear.
##
## 4. The names "Apache" and "Apache Software Foundation" must
##    not be used to endorse or promote products derived from this
##    software without prior written permission. For written
##    permission, please contact apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache",
##    nor may "Apache" appear in their name, without prior written
##    permission of the Apache Software Foundation.
##
## THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
## WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
## ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
## USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
## SUCH DAMAGE.
## ====================================================================
##
## This software consists of voluntary contributions made by many
## individuals on behalf of the Apache Software Foundation.  For more
## information on the Apache Software Foundation, please see
## <http://www.apache.org/>.
##
## Portions of this software are based upon public domain software
## originally written at the National Center for Supercomputing Applications,
## University of Illinois, Urbana-Champaign.
##



# Uses 6 supplemental scripts located in ./helpers:
#	CutRule: Determines the value for a specified Rule
#	GuessOS: Uses uname to determine OS/platform
#	PrintPath: generic "type" or "whence" replacement
#	TestCompile: Can check for libs and if $(CC) is ANSI
#	 (i.e., a simple "sanity check")
#	mfhead:
#	fp2rp:
#	slo.sh:

LANG=C; export LANG
exitcode=0
trap 'rm -f $tmpfile $tmpfile2 $tmpfile3 $tmpconfig $awkfile; exit $exitcode' 0 1 2 3 15

####################################################################
## Set up some defaults
##
file=Configuration
tmpfile=htconf.$$
tmpfile2=$tmpfile.2
tmpfile3=$tmpfile.3
awkfile=$tmpfile.4
tmpconfig=$tmpfile.5
SUBDIRS="ap main"
APLIBDIRS=""
SHELL=/bin/sh

####################################################################
## Now handle any arguments, which, for now, is -file
## to select an alternate Configuration file and -v
## to turn on verbose mode
##
while [ "x$1" != "x" ]; do
  if [ "x$1" = "x-v" ] ; then
    shift 1;
    vflag="-v";
  fi
  if [ "x$1" = "x-file" ] ; then
    shift 1; file=$1; shift 1
    if [ ! -r $file ]; then
      echo "$file does not exist or is not readable."
      exitcode=1
      exit 1
    fi
  else
    echo "ERROR: Bad command line option '$1'"
    echo "  Please read the file INSTALL."
    exit 1
  fi
done
if [ ! -r $file ]; then
  echo "Can't see or read \"$file\""
  echo "Please copy Configuration.tmpl to $file, edit it for your platform,"
  echo "and re-run $0 again."
  exitcode=1
  exit 1
fi

####################################################################
## Now see if Configuration.tmpl is more recent than $file. If
## so, then we complain and bail out
##
if ls -lt $file Configuration.tmpl | head -1 | \
  grep 'Configuration.tmpl' > /dev/null
then
  echo "Configuration.tmpl is more recent than $file;"
  echo "Make sure that $file is valid and, if it is, simply"
  echo "'touch $file' and re-run $0 again."
  exitcode=1
  exit 1
fi

echo "Using config file: $file"

####################################################################
## From the Configuration file, create a "cleaned-up" version
## that's easy to scan
##

# Strip comments and blank lines, remove whitespace around
# "=" assignments, change Rules to comments and then remove whitespace
# before Module declarations
sed 's/#.*//' $file | \
 sed '/^[ 	]*$/d' | \
 sed 's/[ 	]*$//' | \
 sed 's/[ 	]*=[ 	]*/=/' | \
 sed '/^Rule[ 	]*/d' | \
 sed 's/^[ 	]*AddModule/AddModule/' | \
 sed 's/^[ 	]*%AddModule/%AddModule/' | \
 sed 's/^[ 	]*SharedModule/SharedModule/' | \
 sed 's/^[ 	]*Module/Module/' | \
 sed 's/^[ 	]*%Module/%Module/' > $tmpfile

# Determine if shared objects are used
using_shlib=`grep  '^SharedModule' $tmpfile >/dev/null && echo 1`

# But perhaps later via apxs when just mod_so is compiled in!
if [ "x$using_shlib" = "x" ]; then
    using_shlib=`grep  '^AddModule modules/standard/mod_so.o' $tmpfile >/dev/null && echo 1`
fi

# Only "assignment" ("=") statements and Module lines
# should be left at this point. If there is other stuff
# we bail out
if egrep -v '^%?Module[ 	]+[A-Za-z0-9_]+[ 	]+[^ 	]+$' $tmpfile \
 | egrep -v '^%?AddModule[ 	]+[^ 	]+$' \
 | egrep -v '^SharedModule[ 	]+[^ 	]+$' \
 | grep -v = > /dev/null
then
  echo "Syntax error --- The configuration file is used only to"
  echo "define the list of included modules or to set Makefile"
  echo "options or Configure rules, and I don't see that at all:"
  egrep -v '^%?Module[ 	]+[A-Za-z0-9_]+[ 	]+[^ 	]+$' $tmpfile \
   | egrep -v '^%?AddModule[ 	]+[^ 	]+$'  \
   | egrep -v '^%?SharedModule[ 	]+[^ 	]+$'  \
   | grep -v =
  exitcode=1
  exit 1
fi

####################################################################
## If we find the directory /usr/local/etc/httpd and there is
## no HTTPD_ROOT flag set in the Configuration file we assume
## that the user was using the old default root directory
## and issue a notice about it.
##
if [ "x$file" != "xConfiguration.apaci" ]
then
  if [ -d /usr/local/etc/httpd/ ]
  then
    if egrep '^EXTRA_CFLAGS.*HTTPD_ROOT' $file >/dev/null
    then
      :
    else
      echo " | Please note that the default httpd root directory has changed"
      echo " | from '/usr/local/etc/httpd/' to '/usr/local/apache/.'"
      echo " | You may add '-DHTTPD_ROOT=\\\"/usr/local/etc/httpd\\\"' to EXTRA_CFLAGS"
      echo " | in your Configuration file (and re-run Configure) or start"
      echo " | httpd with the option '-d /usr/local/etc/httpd' if you still"
      echo " | want to use the old root directory for your server."
    fi
  fi
fi

####################################################################
## Start creating the Makefile. We add some comments and
## then fold in the modules that were included in Configuration
##
echo "Creating Makefile"
${SHELL} helpers/mfhead . $file > Makefile

####################################################################
## Now we create a stub file, called Makefile.config, which
## just includes those assignments (eg: CC=gcc) in Configuration
##
awk >Makefile.config <$tmpfile '
    BEGIN {
	print "##"
	print "##  Inherited Makefile options from Configure script"
	print "##  (Begin of automatically generated section)"
	print "##"
	print "SRCDIR=."
    } 
    /\=/ { print } 
    '

####################################################################
## Extract the rules.
##
RULE_WANTHSREGEX=`${SHELL} helpers/CutRule WANTHSREGEX $file`
RULE_STATUS=`${SHELL} helpers/CutRule STATUS $file`
RULE_SOCKS4=`${SHELL} helpers/CutRule SOCKS4 $file`
RULE_SOCKS5=`${SHELL} helpers/CutRule SOCKS5 $file`
RULE_IRIXNIS=`${SHELL} helpers/CutRule IRIXNIS $file`
RULE_IRIXN32=`${SHELL} helpers/CutRule IRIXN32 $file`
RULE_PARANOID=`${SHELL} helpers/CutRule PARANOID $file`
RULE_EXPAT=`${SHELL} helpers/CutRule EXPAT $file`
RULE_CYGWIN_WINSOCK=`${SHELL} helpers/CutRule CYGWIN_WINSOCK $file` 
RULE_SHARED_CORE=`${SHELL} helpers/CutRule SHARED_CORE $file`
RULE_SHARED_CHAIN=`${SHELL} helpers/CutRule SHARED_CHAIN $file`
RULE_INET6=`${SHELL} helpers/CutRule INET6 $file`

####################################################################
## Rule SHARED_CORE implies required DSO support
##
if [ "x$RULE_SHARED_CORE" = "xyes" ]; then
	using_shlib=1
fi

####################################################################
## Preset some "constants";
## can be overridden on a per-platform basis below.
##
DBM_LIB="-ldbm"
DB_LIB="-ldb"
SHELL="/bin/sh"
SUBTARGET="target_static"
SHLIB_SUFFIX_NAME=""
SHLIB_SUFFIX_LIST=""
CAT="cat"

####################################################################
## Now we determine the OS/Platform automagically, thanks to
## GuessOS, a home-brewed OS-determiner ala config.guess
##
## We adjust CFLAGS, LIBS, LDFLAGS and INCLUDES (and other Makefile
## options) as required. Setting CC and OPTIM here has no effect
## if they were set in Configure.
##
## Also, we set DEF_WANTHSREGEX and to the appropriate
## value for each platform.
##
## As more PLATFORMs are added to Configuration.tmpl, be sure to
## add the required lines below.
##
SHELL="/bin/sh"
PLAT=`${SHELL} helpers/GuessOS`
OSDIR="os/unix"

case "$PLAT" in
    *mint)
	OS="MiNT"
	CFLAGS="-DMINT"
	LIBS="$LIBS -lportlib -lsocket"
	DEF_WANTHSREGEX=yes
	;;
    *MPE/iX*)
	export OS='MPE/iX'
	OSDIR='os/mpeix'
	CFLAGS="$CFLAGS -DMPE -D_POSIX_SOURCE -D_SOCKET_SOURCE"
	LIBS="$LIBS -lsocket -lsvipc -lcurses"
	LDFLAGS="$LDFLAGS -Xlinker \"-WL,cap=ia,ba,ph;nmstack=1024000\""
	CAT="/bin/cat" # built-in cat is badly broken for stdin redirection
	;;
    *-apple-aux3*)
	OS='A/UX 3.1.x'
	CFLAGS="$CFLAGS -DAUX3 -D_POSIX_SOURCE"
	LIBS="$LIBS -lposix -lbsd"
	LDFLAGS="$LDFLAGS -s"
	DEF_WANTHSREGEX=no
	;;
    i386-ibm-aix*)
	OS='IBM AIX PS/2'
	CFLAGS="$CFLAGS -DAIX=100 -U__STR__ -DUSEBCOPY"
	DEF_WANTHSREGEX=no
	;;
    ia64-ibm-aix*)
       OS='IBM AIX IA64'
       CFLAGS="$CFLAGS -DAIXIA64 -U__STR__"
       LDFLAGS="$LDFLAGS -lm"
       RULE_SHARED_CORE=no
       DEF_SHARED_CORE=no
       ;;
    *-ibm-aix[1-2].*)
	OS='IBM AIX 1.x/2.x'
	CFLAGS="$CFLAGS -DAIX=100 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix3.*)
	OS='IBM AIX 3.x'
	CFLAGS="$CFLAGS -DAIX=300 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix[45678].*)
        PLATOSVERS=`echo $PLAT | sed 's/^.*ibm-aix//'`
        OS="AIX $PLATOSVERS"
        PLATOSVERSNUM=`echo $PLATOSVERS | sed 's/\.//'`
        if test $PLATOSVERSNUM -ge 43; then
            PLATOSVERSNUM=`oslevel | sed 's/\.//g' | sed 's/.$//'`
        else
            PLATOSVERSNUM="$PLATOSVERSNUM"0
        fi
        # PLATOSVERSNUM is a three digit number at this point
        CFLAGS="$CFLAGS -DAIX=$PLATOSVERSNUM -U__STR__"
        if test $PLATOSVERSNUM -lt 420; then
            CFLAGS="$CFLAGS -DNEED_RLIM_T"
        fi
        if test $PLATOSVERSNUM -ge 420; then
            LDFLAGS="$LDFLAGS -lm"
        fi
        if test $PLATOSVERSNUM -ge 430; then
            LDFLAGS="$LDFLAGS -lpthread"
            RULE_SHARED_CORE=no
            DEF_SHARED_CORE=no
        fi
        ;;
    *-ibm-aix*)
	OS='IBM AIX'
	CFLAGS="$CFLAGS -DAIX=100 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
	;;
    *-apollo-*)
	OS='Apollo Domain'
	CFLAGS="$CFLAGS -DAPOLLO"
	;;
    *-dg-dgux*)
	OS='DG/UX 5.4'
	CFLAGS="$CFLAGS -DDGUX"
	DEF_WANTHSREGEX=yes
	;;
    *OS/2*)
	OSDIR="os/os2"
	DEF_WANTHSREGEX=yes
	OS='EMX OS/2'
	CFLAGS="$CFLAGS -DOS2 -DTCPIPV4 -g -Zmt"
	LDFLAGS="$LDFLAGS -Zexe -Zmtd -Zsysv-signals -Zbin-files"
	LIBS="$LIBS -lsocket -lufc -lbsd"
	DBM_LIB="-lgdbm"
	SHELL=sh
	;;
    *-hi-hiux)
	OS='HI-UX'
	CFLAGS="$CFLAGS -DHIUX"
	;;
    *-hp*-hpux11.*)
	OS='HP-UX 11'
	CFLAGS="$CFLAGS -DHPUX11"
	RANLIB="/bin/true"
	LIBS="$LIBS -lm -lpthread"
	DEF_WANTHSREGEX=yes
	;;
    *-hp*-hpux10.*)
	OS='HP-UX 10'
	CFLAGS="$CFLAGS -DHPUX10"
	RANLIB="/bin/true"
 	case "$PLAT" in
 	  *-hp-hpux10.01)
	       # We know this is a problem in 10.01.
	       # Not a problem in 10.20.  Otherwise, who knows?
	       CFLAGS="$CFLAGS -DSELECT_NEEDS_CAST"
	       ;;	     
 	esac
	DEF_WANTHSREGEX=yes
	;;
    *-hp*-hpux*)
	OS='HP-UX'
	CFLAGS="$CFLAGS -DHPUX"
	RANLIB="/bin/true"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lm"
	;;
    *-sgi-irix64)
	# Note: We'd like to see patches to compile 64-bit, but for now...
	echo "You are running 64-bit Irix. For now, we will compile 32-bit"
	echo "but if you would care to port to 64-bit, send us the patches."
	DEF_WANTHSREGEX=yes
	DBM_LIB=""
	if [ "x$RULE_IRIXNIS" = "xyes" ]; then
	    OS='SGI IRIX-64 w/NIS'
	    CFLAGS="$CFLAGS -DIRIX"
	    LIBS="$LIBS -lsun"
	else
	    OS='SGI IRIX-64'
	    CFLAGS="$CFLAGS -DIRIX"
	fi
	;;
    *-sgi-irix32)
	DEF_WANTHSREGEX=yes
	DBM_LIB=""
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
	    if [ "x$RULE_IRIXNIS" = "xyes" ]; then
		OS='SGI IRIX-32 w/NIS'
	    else
		OS='SGI IRIX-32'
	    fi
	else
	    if [ "x$RULE_IRIXNIS" = "xyes" ]; then
		OS='SGI IRIX w/NIS'
	    else
		OS='SGI IRIX'
	    fi
	fi
	CC='cc'
	CFLAGS="$CFLAGS -DIRIX"
	;;
    *-sgi-irix)
	DEF_WANTHSREGEX=yes
	DBM_LIB=""
	if [ "x$RULE_IRIXNIS" = "xyes" ]; then
	    OS='SGI IRIX w/NIS'
	    CFLAGS="$CFLAGS -DIRIX"
	    LIBS="$LIBS -lsun"
	else
	    OS='SGI IRIX'
	    CFLAGS="$CFLAGS -DIRIX"
	fi
	;;
    *-linux20)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=20"
	LIBS="$LIBS -lm"
	;;
    *-linux22)
        # This handles linux 2.2 and above (2.4, ...)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=22"
	LIBS="$LIBS -lm"
	;;
    *-GNU*)
	DEF_WANTHSREGEX=yes
	OS='GNU/Hurd'
	CFLAGS="$CFLAGS -DHURD"
	LIBS="$LIBS -lm -lcrypt"
	;;
    *-linux1)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=1"
	;;
    *-lynx-lynxos)
	OS='LynxOS 2.x'
	CFLAGS="$CFLAGS -D__NO_INCLUDE_WARN__ -DLYNXOS"
	LIBS="$LIBS -lbsd -lcrypt"
	DEF_WANTHSREGEX=yes
	;;
    *486-*-bsdi*)
	OS='BSDI w/486'
	CFLAGS="$CFLAGS -m486"
	DBM_LIB=""
	DB_LIB=""
	;;
    *-bsdi3)
        if [ "x$using_shlib" = "x1" ] ; then
            CC="shlicc2"
        fi
        ;;
    *-bsdi*)
	OS='BSDI'
	DBM_LIB=""
	DB_LIB=""
	;;
    *-netbsd*)
	OS='NetBSD'
	CFLAGS="$CFLAGS -DNETBSD"
	LIBS="$LIBS -lcrypt"
	DBM_LIB=""
	DB_LIB=""
	DEF_WANTHSREGEX=no
	;;
    *-freebsd*)
    	PLATOSVERS=`echo $PLAT | sed 's/^.*freebsd//'`
	OS="FreeBSD $PLATOSVERS"
	case "$PLATOSVERS" in
	    [2345]*)
		DEF_WANTHSREGEX=no
		CFLAGS="$CFLAGS -funsigned-char"
		;;
	esac
	LIBS="$LIBS -lcrypt"
	DBM_LIB=""
	DB_LIB=""
	;;
    *-openbsd*)
	OS='OpenBSD'
	DBM_LIB=""
	DB_LIB=""
	DEF_WANTHSREGEX=no
	;;
    *-next-nextstep*)
	OS='NeXTStep'
	OPTIM='-O'
	CFLAGS="$CFLAGS -DNEXT"
	DEF_WANTHSREGEX=yes
	;;
    *-next-openstep*)
	OS='OpenStep/Mach'
	CC='cc'
	OPTIM='-O'
	CFLAGS="$CFLAGS -DNEXT"
	DEF_WANTHSREGEX=yes
	;;
    *-apple-rhapsody*)
	OS='Mac OS X Server'
	CFLAGS="$CFLAGS -DDARWIN -DMAC_OS_X_SERVER"
	DEF_WANTHSREGEX=yes
	;;
    *-apple-darwin*)
	OS='Darwin'
	CFLAGS="$CFLAGS -DDARWIN"
	DEF_WANTHSREGEX=yes
	;;
    *-dec-osf*)
	OS='DEC OSF/1'
	CFLAGS="$CFLAGS -DOSF1"
	LIBS="$LIBS -lm"
	;;
    *-qnx)
	OS='QNX'
	CFLAGS="$CFLAGS -DQNX"
	LIBS="$LIBS -N128k -lsocket -lunix"
	DEF_WANTHSREGEX=yes
	;;
    *-qnx32)
        CC='cc -F'
	OS='QNX32'
	CFLAGS="$CFLAGS -DQNX -mf -3"
	LIBS="$LIBS -N128k -lsocket -lunix"
	DEF_WANTHSREGEX=yes
	;;
    *-isc4*)
	OS='ISC 4'
	CC='gcc'
	CFLAGS="$CFLAGS -posix -DISC"
	LDFLAGS="$LDFLAGS -posix"
	LIBS="$LIBS -linet"
	DEF_WANTHSREGEX=yes
	;;
    *-sco3*)
	OS='SCO 3'
	CFLAGS="$CFLAGS -DSCO -Oacgiltz"
	LIBS="$LIBS -lPW -lsocket -lmalloc -lcrypt_i"
	DEF_WANTHSREGEX=yes
	;;
    *-sco5*)
	OS='SCO 5'
	CFLAGS="$CFLAGS -DSCO5"
	LIBS="$LIBS -lsocket -lmalloc -lprot -ltinfo -lx -lm"
	DEF_WANTHSREGEX=no
	;;
    *-sco_sv*|*-SCO_SV*)
	OS='SCO SV'
	CFLAGS="$CFLAGS -DSCO"
	LIBS="$LIBS -lPW -lsocket -lmalloc -lcrypt_i"
	DEF_WANTHSREGEX=yes
	;;
    *-solaris2*)
    	PLATOSVERS=`echo $PLAT | sed 's/^.*solaris2.//'`
	OS="Solaris $PLATOSVERS"
	CFLAGS="$CFLAGS -DSOLARIS2=$PLATOSVERS"
	LIBS="$LIBS -lsocket -lnsl -lpthread"
	DBM_LIB=""
	case "$PLATOSVERS" in
	    2[01234]*)
		DEF_WANTHSREGEX=yes
		;;
	    *)
		DEF_WANTHSREGEX=no
		;;
	esac
	;;
    *-sunos4*)
	OS='SunOS 4'
	CFLAGS="$CFLAGS -DSUNOS4 -DUSEBCOPY"
	DEF_WANTHSREGEX=yes
	;;
    *-unixware1)
	DEF_WANTHSREGEX=yes
	OS='UnixWare 1.x'
	CFLAGS="$CFLAGS -DUW=100"
	LIBS="$LIBS -lsocket -lnsl -lcrypt"
	;;
    *-unixware2)
	DEF_WANTHSREGEX=yes
	OS='UnixWare 2.x'
	CFLAGS="$CFLAGS -DUW=200"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
	;;
    *-unixware211)
	OS='UnixWare 2.1.1'
	CFLAGS="$CFLAGS -DUW=211"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
	;;
    *-unixware212)
	OS='UnixWare 2.1.2'
	CFLAGS="$CFLAGS -DUW=212"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
	DBM_LIB=""
	;;
    *-unixware7)
	OS='UnixWare 7'
	CFLAGS="$CFLAGS -DUW=700"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen -lresolv"
	DBM_LIB=""
	;;
    *-OpenUNIX)
	OS='OpenUNIX'
	CFLAGS="$CFLAGS -DUW=800"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen -lresolv"
	DBM_LIB=""
	;;
    maxion-*-sysv4*)
    	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc -lgen"
	;;
    *-*-powermax*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lgen"
	LD_SHLIB='cc'
	LDFLAGS_SHLIB="-Zlink=so"
	LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	LDFLAGS_SHLIB_EXPORT="-Zlink=dynamic -Wl,-Bexport"
	CFLAGS_SHLIB='-Zpic'
	;;
    TPF)
       OS='TPF'
       OSDIR='os/tpf'
       CC='c89'
       CFLAGS="$CFLAGS -DTPF -DCHARSET_EBCDIC -D_POSIX_SOURCE"
       DEF_WANTHSREGEX=yes
       LIBS="$LIBS"
       SUBTARGET="target_compile_only"
       ;;
    BS2000*-siemens-sysv4*)
	OS='BS2000'
	OSDIR='os/bs2000'
	# If you are using a CPP before V3.0, delete the -Kno_integer_overflow flag
	CC='c89 -XLLML -XLLMK -XL -Kno_integer_overflow'
	CFLAGS="$CFLAGS -DCHARSET_EBCDIC -DSVR4 -D_XPG_IV"
	DEF_WANTHSREGEX=yes
	DBM_LIB=""
	;;
    *-siemens-sysv4*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4 -D_XPG_IV -DHAS_DLFCN -DUSE_MMAP_FILES -DNEED_UNION_SEMUN"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc"
	DBM_LIB=""
	;;
    pyramid-pyramid-svr4)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4 -DNO_LONG_DOUBLE"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    DS/90\ 7000-*-sysv4*)
	OS='UXP/DS'
	CFLAGS="$CFLAGS -DUXPDS"
	LIBS="$LIBS -lsocket -lnsl"
	DEF_WANTHSREGEX=yes
	;;
    *-tandem-sysv4*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4"
	LIBS="$LIBS -lsocket -lnsl"
	DEF_WANTHSREGEX=yes
	;;
    *-ncr-sysv4)
	OS='NCR MP/RAS'
	CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	DEF_WANTHSREGEX=yes
	;;
    *-sysv4*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    88k-encore-sysv4)
	OS='Encore UMAX V'
	CFLAGS="$CFLAGS -DSVR4 -DENCORE"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lPW"
	;;
    *-uts*)
	PLATOSVERS=`echo $PLAT | sed 's/^.*,//'`
	OS='Amdahl UTS $PLATOSVERS'
	case "$PLATOSVERS" in
	    2*) CFLAGS="$CFLAGS -Xa -eft -DUTS21 -DUSEBCOPY"
	        LIBS="$LIBS -lsocket -lbsd -la"
	        DEF_WANTHSREGEX=yes
	        ;;
	    *)  CFLAGS="$CFLAGS -Xa -DSVR4"
	        LIBS="$LIBS -lsocket -lnsl"
	        ;;
	esac
	;;
    *-ultrix)
	OS='ULTRIX'
	CFLAGS="-DULTRIX"
	DEF_WANTHSREGEX=yes
	SHELL="/bin/sh5"
	;;
    *powerpc-tenon-machten*)
	OS='MachTen PPC'
	LDFLAGS="$LDFLAGS -Xlstack=0x14000 -Xldelcsect"
	;;
    *-machten*)
	OS='MachTen 68K'
	LDFLAGS="$LDFLAGS -stack 0x14000"
	DEF_WANTHSREGEX=yes
	;;
    *convex-v11*)
	OS='CONVEXOS11'
	CFLAGS="$CFLAGS -ext -DCONVEXOS11"
	OPTIM="-O1" # scalar optimization only
	CC='cc'
	DEF_WANTHSREGEX=yes
	;;
    i860-intel-osf1)
	DEF_WANTHSREGEX=yes
	OS='Paragon OSF/1'
	CFLAGS="$CFLAGS -DPARAGON"
	;;
    *-sequent-ptx2.*.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v2.*.*'
	CFLAGS="$CFLAGS -DSEQUENT=20 -Wc,-pw"
	LIBS="$LIBS -lsocket -linet -lnsl -lc -lseq"
	;;
    *-sequent-ptx4.0.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.0.*'
	CFLAGS="$CFLAGS -DSEQUENT=40 -Wc,-pw"
	LIBS="$LIBS -lsocket -linet -lnsl -lc"
	;;
    *-sequent-ptx4.[123].*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.1.*/v4.2.*'
	CFLAGS="$CFLAGS -DSEQUENT=41 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx4.4.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.4.*'
	CFLAGS="$CFLAGS -DSEQUENT=44 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx4.5.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.5.*'
	CFLAGS="$CFLAGS -DSEQUENT=45 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx5.0.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v5.0.*'
	CFLAGS="$CFLAGS -DSEQUENT=50 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *NEWS-OS*)
	DEF_WANTHSREGEX=yes
	OS='SONY NEWS-OS'
	CFLAGS="$CFLAGS -DNEWSOS"
	;;
    *-riscix)
	OS='Acorn RISCix'
	CFLAGS="$CFLAGS -DRISCIX"
	OPTIM="-O"
	MAKE="make"
	DEF_WANTHSREGEX=yes
	;;
    *-BeOS*)
	PLATOSVER=`uname -r`
        case "$PLATOSVER" in
            5.0.4*)
                OS="BeOS BONE"
                LIBS="-lbind -lsocket -lbe -lroot"
                CFLAGS="$CFLAGS -DBONE"
                ;;
            *)
                OS='BeOS';
	        CFLAGS="$CFLAGS -DBEOS"
                ;;
        esac
	DEF_WANTHSREGEX=yes
	;;
    4850-*.*)
	OS='NCR MP/RAS'
	CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	;;
    drs6000*)
	OS='DRS6000'
	CFLAGS="$CFLAGS -DSVR4"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	;;
    m88k-*-CX/SX|CYBER)
	OS='Cyberguard CX/SX'
	CFLAGS="$CFLAGS -D_CX_SX -Xa"
	DEF_WANTHSREGEX=yes
	CC='cc'
	RANLIB='true'
	;;
    *-tandem-oss)
	OS='Tandem OSS'
	CFLAGS="-D_TANDEM_SOURCE -D_XOPEN_SOURCE_EXTENDED=1"
	CC='c89'
	;;
    *-IBM-OS390*)
       OS='OS390'
       OSDIR='os/os390'
       CC='c89'
       CFLAGS="$CFLAGS -DOS390 -DCHARSET_EBCDIC -D_ALL_SOURCE"
       DEF_WANTHSREGEX=yes
       LIBS="$LIBS"
       ;;
    *-cygwin*)
	OS='Cygwin'
	OSDIR="os/cygwin"
	CFLAGS="$CFLAGS -DCYGWIN"
	DEF_WANTHSREGEX=yes
	DBM_LIB="-lgdbm"
	LIBS="$LIBS -lcrypt $DBM_LIB"
	if [ "x$RULE_CYGWIN_WINSOCK" = "xyes" ]; then 
	    CFLAGS="$CFLAGS -DCYGWIN_WINSOCK" 
	    LIBS="$LIBS -lwsock32" 
	fi 

	;;
    *atheos*)
	DEF_WANTSREGEX=yes
	OS='AtheOS'
	CFLAGS="$CFLAGS -DATHEOS"
	LIBS="$LIBS -lcrypt"
	;;
    *) # default: Catch systems we don't know about
	OS='Unknown and unsupported OS'
    	echo Sorry, but we cannot grok \"$PLAT\"
	echo uname -m
	uname -m
	echo uname -r
	uname -r
	echo uname -s
	uname -s
	echo uname -v
	uname -v
	echo uname -X
	uname -X
	echo Ideally, read the file PORTING, do what it says, and send the
	echo resulting patches to The Apache Group by filling out a report
	echo form at http://bugs.apache.org/.  If you don\'t 
	echo wish to do the port yourself, please submit this output rather 
	echo than the patches. Thank you.
	echo
	echo Pressing on with the build process, but all bets are off.
	echo Do not be surprised if it fails. If it works, and even
	echo if it does not, please contact the above address.
	echo
	;;
esac

####################################################################
## set this if we haven't
##
if [ "x${MAKE}" = "x" ]; then
    MAKE='make'; export MAKE
fi

####################################################################
## Show user what OS we came up with
##
echo " + configured for $OS platform"
SUBDIRS="$OSDIR $SUBDIRS"

####################################################################
# Continue building the stub file
# Set variables as soon as possible so that TestCompile can use them
##
echo >>Makefile.config "OSDIR=\$(SRCDIR)/$OSDIR"
echo >>Makefile.config "INCDIR=\$(SRCDIR)/include"
echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)"
echo >>Makefile.config "SHELL=$SHELL"
echo >>Makefile.config "OS=$OS"

####################################################################
## And adjust/override WANTHSREGEX as needed
##
if [ "x$RULE_WANTHSREGEX" = "xdefault" ]; then
	if [ "x$DEF_WANTHSREGEX" = "x" ]; then
		RULE_WANTHSREGEX=yes
	else
		RULE_WANTHSREGEX=$DEF_WANTHSREGEX
	fi
fi

####################################################################
## Now we determine the C-compiler and optimization level
## to use. Settings of CC and OPTIM in Configuration have
## the highest precedence; next comes any settings from
## the above "OS-specific" section. If still unset,
## then we look for a known compiler somewhere in PATH
##

# First, look for a CC=<whatever> setting in Configuration (recall, we
# copied these to Makefile.config)
#
# If $TCC is null, then no such line exists in Configuration
#
TCC=`egrep '^CC=' Makefile.config | tail -1 | awk -F= '{print $2}'`
if [ "x$TCC" = "x" ]; then
    if [ "x$CC" = "x" ]; then
	# At this point, CC is not set in Configuration or above, so we
	# try to find one
	for compilers in "gcc" "cc" "acc" "c89"
	do
	    lookedfor="$lookedfor $compilers"
	    if ${SHELL} helpers/PrintPath -s $compilers; then
		COMPILER="$compilers"
		break
	    fi
	done
	if [ "x$COMPILER" = "x" ]; then
	    echo "Error: could not find any of these C compilers"
	    echo " anywhere in your PATH: $lookedfor"
	    echo "Configure terminated"
	    exitcode=1
	    exit 1
	fi
	CC=$COMPILER
    fi
    echo " + setting C compiler to $CC"
fi

####################################################################
## Write the value of $CC to Makefile.config... We only do this
## is not done already (ie: a 'CC=' line was in Configuration).
## If there was an entry for it, then set $CC for our own internal
## use.
##
if [ "x$TCC" = "x" ]; then
    echo "CC=$CC" >> Makefile.config
else
    CC=$TCC
fi

####################################################################
## Now check how we can _directly_ run the C pre-processor
##
TCPP=`egrep '^CPP=' Makefile.config | tail -1 | awk -F= '{print $2}'`
if [ "x$TCPP" != "x" ]; then
    CPP=`CPP="$TCPP"; export CPP CC; ${SHELL} ./helpers/findcpp.sh`
else
    CPP=`export CC; ${SHELL} ./helpers/findcpp.sh`
fi
if [ "x$TCPP" = "x" ]; then
    echo "CPP=$CPP" >> Makefile.config
fi 
echo " + setting C pre-processor to $CPP"

####################################################################
## Now check for existance of non-standard system header files
## and start generation of the ap_config_auto.h header
##
AP_CONFIG_AUTO_H="include/ap_config_auto.h.new"
echo "/*" >$AP_CONFIG_AUTO_H
echo " *  ap_config_auto.h -- Automatically determined configuration stuff" >>$AP_CONFIG_AUTO_H
echo " *  THIS FILE WAS AUTOMATICALLY GENERATED - DO NOT EDIT!" >>$AP_CONFIG_AUTO_H
echo " */" >>$AP_CONFIG_AUTO_H
echo "" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_CONFIG_AUTO_H" >>$AP_CONFIG_AUTO_H
echo "#define AP_CONFIG_AUTO_H" >>$AP_CONFIG_AUTO_H

for uppercase in "tr [a-z] [A-Z]" "tr [:lower:] [:upper:]" "sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
do
  case `echo Apache | $uppercase` in
    APACHE) break;;
  esac
done
echo " + using \"$uppercase\" to uppercase"
echo " + checking for system header files"
CHECK_FOR_HEADERS="dlfcn.h dl.h bstring.h crypt.h unistd.h sys/resource.h sys/select.h sys/processor.h sys/param.h"
(
export CPP
for header in $CHECK_FOR_HEADERS; do
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* check: #include <$header> */" >>$AP_CONFIG_AUTO_H
    name="`echo $header | sed -e 's:/:_:g' -e 's:\.:_:g' | $uppercase`"
    ${SHELL} ./helpers/checkheader.sh $header
    if [ $? -eq 0 ]; then
	echo "#ifndef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#define HAVE_${name} 1" >>$AP_CONFIG_AUTO_H
	echo "#endif" >>$AP_CONFIG_AUTO_H
    else
	echo "#ifdef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#undef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#endif" >>$AP_CONFIG_AUTO_H
    fi
done
)

####################################################################
# Special AIX 4.x support: need to check for sys/processor.h
# to decide whether the Processor Binding can be used or not
case "$PLAT" in
    *-ibm-aix*)
	CPP=$CPP ${SHELL} helpers/checkheader.sh sys/processor.h
	if [ $? -eq 0 ]; then
	    CFLAGS="$CFLAGS -DAIX_BIND_PROCESSOR"
	fi
	;;
esac

####################################################################
## Look for OPTIM and save for later
##
TOPTIM=`egrep '^OPTIM=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TRANLIB=`egrep '^RANLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TTARGET=`egrep '^TARGET=' Makefile.config | tail -1 | awk -F= '{print $2}'`

####################################################################
## Check for user provided flags for shared object support
##
TLD_SHLIB=`egrep '^LD_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TLDFLAGS_SHLIB=`egrep '^LDFLAGS_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TLDFLAGS_MOD_SHLIB=`egrep '^LDFLAGS_MOD_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TLDFLAGS_SHLIB_EXPORT=`egrep '^LDFLAGS_SHLIB_EXPORT=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TCFLAGS_SHLIB=`egrep '^CFLAGS_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`

####################################################################
## Handle TARGET name
##
if [ "x$TTARGET" = "x" ]; then
    TARGET=httpd
    echo "TARGET=$TARGET" >> Makefile.config
else
    TARGET=$TTARGET
fi
if [ "x$TARGET" != "xhttpd" ]; then
    echo " + using custom target name: $TARGET"
    CFLAGS="$CFLAGS -DTARGET=\\\"$TARGET\\\""
fi

####################################################################
## We adjust now CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT as
## required.  For more platforms just add the required lines below.
##
if [ "x$using_shlib" = "x1" ] ; then
    LD_SHLIB="ld"
    DEF_SHARED_CORE=no
    DEF_SHARED_CHAIN=no
    SHLIB_SUFFIX_NAME=so
    SHMOD_SUFFIX_NAME=so
    SHLIB_SUFFIX_DEPTH=all
    SHLIB_EXPORT_FILES=no
    SHARED_CORE_EP='lib$(TARGET).ep'
    SHCORE_IMPLIB=''
    case "$PLAT" in
	*MPE/iX*)
	    LD_SHLIB=ld	
	    LDFLAGS_SHLIB='-b -a archive'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-linux1)
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-Bshareable"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    ;;
	*-linux2*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    SHLIB_SUFFIX_DEPTH=0
	    ;;
	*-freebsd2*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
	    ;;
	*-freebsd[3-9]*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    OBJFORMAT=`test -x /usr/bin/objformat && /usr/bin/objformat || echo aout` 
	    if [ "x$OBJFORMAT" = "xelf" ]; then
		LDFLAGS_SHLIB_EXPORT="-Wl,-E"
		SHLIB_SUFFIX_DEPTH=0
	    else
		LDFLAGS_SHLIB_EXPORT=""
		SHLIB_SUFFIX_DEPTH=2
	    fi  
	    ;;
	*-openbsd*)
	    PLATOSVERS=`echo $PLAT | sed 's/^.*openbsd//'`
	    CFLAGS_SHLIB="-fPIC"
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
	    case "$PLATOSVERS" in
		[01].*|2.[0-7]|2.[0-7].*)
		   LDFLAGS_SHLIB="-Bshareable"
		;;
		*)
		   LD_SHLIB="gcc"
		   LDFLAGS_SHLIB="-shared \$(CFLAGS_SHLIB)"
		   if [ -z "`echo __ELF__ | ${CC} -E - | grep __ELF__`" ]; then
		     LDFLAGS_SHLIB_EXPORT="-Wl,-E"
		   fi
		;;
	    esac
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-netbsd*)
	    CFLAGS_SHLIB="-fPIC -DPIC"
	    if echo __ELF__ | ${CC} -E - | grep -q __ELF__; then
		LDFLAGS_SHLIB="-Bshareable"
		LDFLAGS_SHLIB_EXPORT=""
	    else
		LDFLAGS_SHLIB="-shared"
		LDFLAGS_SHLIB_EXPORT="-Wl,-E"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_DEPTH=2
	    ;;
	*-bsdi3)
	    LD_SHLIB="shlicc2"
	    LDFLAGS_SHLIB="-r"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-bsdi)
	    CFLAGS_SHLIB="-fPIC"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    ;;
 	*-next-openstep*)
 	    LD_SHLIB='cc'
 	    CFLAGS_SHLIB='-dynamic -fno-common'
 	    LDFLAGS_SHLIB='-bundle -undefined warning'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
 	    LDFLAGS_SHLIB_EXPORT=''
 	    SHLIB_SUFFIX_DEPTH=0
 	    ;;
	*-apple-rhapsody* | *-apple-darwin* )
	    LD_SHLIB="cc"
	    CFLAGS_SHLIB=""
	    case "$PLAT" in
		*-apple-rhapsody* | *-apple-darwin1.[0-3]* )
		    LDFLAGS_SHLIB='$(EXTRA_LDFLAGS) -bundle -undefined suppress'
		    ;;
		* )
		    LDFLAGS_SHLIB='$(EXTRA_LDFLAGS) -bundle -undefined suppress -flat_namespace'
		    ;;
	    esac
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    ;;
	*-solaris2*)
	    if [ "x`$CC -v 2>&1 | grep gcc`" != "x" ]; then
	        CFLAGS_SHLIB="-fPIC"
	    else
	        CFLAGS_SHLIB="-KPIC"
	    fi
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=1
	    ;;
	*-sunos4*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fPIC" ;;
		*/acc|acc ) CFLAGS_SHLIB="-pic" ;;
	    esac
	    LDFLAGS_SHLIB="-assert pure-text"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix32)
	    case $CC in
		*/gcc|gcc )
		    CFLAGS_SHLIB="-fpic"
		    N32FLAG=""
		    ;;
		*/cc|cc )
		    CFLAGS_SHLIB="-KPIC"
		    N32FLAG="-n32"
		    ;;
	    esac
	    if [ "x$RULE_IRIXN32" = "xyes" ]; then
		LDFLAGS_SHLIB="$N32FLAG -shared"
	    else
		LDFLAGS_SHLIB="-shared"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix64)
	    case $CC in
		*/gcc|gcc )
		    CFLAGS_SHLIB="-fpic"
		    N32FLAG=""
		    ;;
		*/cc|cc )
		    CFLAGS_SHLIB="-KPIC"
		    N32FLAG="-n32"
		    ;;
	    esac
	    if [ "x$RULE_IRIXN32" = "xyes" ]; then
		LDFLAGS_SHLIB="$N32FLAG -shared"
	    else
		LDFLAGS_SHLIB="-shared"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-dec-osf*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="" ;;
	    esac
	    LDFLAGS_SHLIB='-shared -expect_unresolved "*" -s'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-unixware*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-Bdynamic -G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    ;;
	*-OpenUNIX*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-Bdynamic -G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    LD_SHLIB=$CC
	    ;;
	 *-sco5*)
	     case $CC in
		 */gcc*|gcc* ) CFLAGS_SHLIB="-fpic" ;;
		 */cc*|cc*   ) CFLAGS_SHLIB="-KPIC" ;;
	     esac
	     LDFLAGS_SHLIB="-G"
	     LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	     SHLIB_SUFFIX_DEPTH=1
	     ;;
	*-sequent-ptx*)
	    case $PLAT in
	       *-sequent-ptx2*)
	           ;;
	       *-sequent-ptx4.0*)
	           ;;
	       *-sequent-ptx*)
	           CFLAGS_SHLIB="-KPIC"
	           LDFLAGS_SHLIB="-G"
	           LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	           LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	           ;;
	    esac
	    ;;
	RM*-siemens-sysv4*)
	    # MIPS hosts can take advantage of the LDFLAGS_SHLIB_EXPORT switch
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Blargedynsym"
	    ;;
	BS2000-siemens-sysv4*)
	    CFLAGS_SHLIB="-K PIC"
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    DEF_SHARED_CORE=no
	    ;;
	*-siemens-sysv4*)
	    # Older SINIX machines must be linked as "shared core"-Apache
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*)          CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    DEF_SHARED_CORE=yes
	    ;;
	*-sysv4*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    DEF_SHARED_CORE=yes
	    ;;
	*-hp-hpux9.*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="+z" ;;
	    esac
	    LDFLAGS_SHLIB="-b"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred"
	    SHLIB_SUFFIX_NAME=sl
	    ;;
	*-hp-hpux10.*|*-hp-hpux11.*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="+z" ;;
	    esac
	    LDFLAGS_SHLIB="-b"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred -Wl,+s"
	    SHLIB_SUFFIX_NAME=sl
	    ;;
       ia64-ibm-aix*)
           case $CC in
               */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
               */cc|cc   ) CFLAGS_SHLIB="" ;;
           esac
           LDFLAGS_SHLIB=" -L /usr/lib/ia64l32 -G "
           LDFLAGS_MOD_SHLIB="$LDFLAGS_SHLIB -bI:@@libexecdir@@/httpd.exp -lc"
           LDFLAGS_SHLIB="$LDFLAGS_SHLIB -Bexport:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
           LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
           LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport:\$(SRCDIR)/support/httpd.exp"
           SHLIB_EXPORT_FILES=yes
           ;;
	*-ibm-aix*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="" ;;
	    esac
	    case $PLAT in
		*-ibm-aix[45678]*)
		    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -bnoentry"
		    ;;
		*-ibm-aix*)
		    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -e _nostart"
		    ;;
	    esac
	    LDFLAGS_MOD_SHLIB="$LDFLAGS_SHLIB -bI:@@libexecdir@@/httpd.exp -lc"
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bI:\$(SRCDIR)/support/httpd.exp "
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bE:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
	    LDFLAGS_SHLIB_EXPORT="-Wl,-bE:\$(SRCDIR)/support/httpd.exp"
	    SHLIB_EXPORT_FILES=yes
	    ;;
	*-*-powermax*)
	    LD_SHLIB='cc'
	    LDFLAGS_SHLIB="-Zlink=so"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Zlink=dynamic -Wl,-Bexport"
	    CFLAGS_SHLIB='-Zpic'
	    ;;
	*-OS/2*)
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="`echo $LDFLAGS|sed -e s/-Zexe//` -Zdll"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_NAME=dll
	    SHMOD_SUFFIX_NAME=dll
	    SHLIB_SUFFIX_DEPTH=0
	    LD_SHLIB=$CC
	    LD_SHCORE_DEF="ApacheCoreOS2.def"
	    LD_SHCORE_LIBS="$LIBS"
	    LIBS_SHLIB='$(SRCDIR)/ApacheCoreOS2.a -lsocket -lbsd $(EXTRA_LIBS)'
	    SHARED_CORE_EP=''
	    SHCORE_IMPLIB='ApacheCoreOS2.a'
	    OS_MODULE_INCLUDE='Makefile.OS2'
	    ;;
	*-dgux)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
	    esac
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
            ;;
	*-cygwin*)
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="--export-all"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_NAME=dll
	    SHMOD_SUFFIX_NAME=dll
	    SHLIB_SUFFIX_DEPTH=0
	    LD_SHLIB='dllwrap'
	    LD_SHCORE_DEF=''
	    LD_SHCORE_LIBS="$LIBS"
	    LIBS_SHLIB='$(EXTRA_LIBS)'
	    SHARED_CORE_EP='lib$(TARGET).ep'
	    SHCORE_IMPLIB='lib$(TARGET).dll'
	    OS_MODULE_INCLUDE='$(SRCDIR)/modules/standard/Makefile.Cygwin'
	    ;;
	*)
	    ##  ok, no known explict support for shared objects
	    ##  on this platform, but we give not up immediately.
	    ##  We take a second chance by guessing the compiler
	    ##  and linker flags from the Perl installation
	    ##  if it exists.
	    PERL=
	    for dir in `echo $PATH | sed -e 's/:/ /g'`
	    do
		if [ -f "$dir/perl5" ]; then
		    PERL="$dir/perl5"
		    break
		fi
		if [ -f "$dir/perl" ]; then
		    PERL="$dir/perl"
		    break
		fi
	    done
	    if [ "x$PERL" != "x" ]; then
		#   cool, Perl is installed on this platform...
		if [ "x`$PERL -V:dlsrc 2>/dev/null | grep dlopen`" != "x" ]; then
		    #   ...and actually uses the dlopen-style interface,
		    #   so we can guess the flags from its knowledge
		    CFLAGS_SHLIB="`$PERL -V:cccdlflags | cut -d\' -f2`"
		    LDFLAGS_SHLIB="`$PERL -V:lddlflags | cut -d\' -f2`"
		    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
		    LDFLAGS_SHLIB_EXPORT="`$PERL -V:ccdlflags | cut -d\' -f2`"
		    #   but additionally we have to inform the
		    #   user that we are just guessing the flags
		    echo ""
		    echo "** WARNING: We have no explicit knowledge about shared object"
		    echo "** support for your particular platform. But perhaps you have"
		    echo "** luck: We were able to guess the compiler and linker flags"
		    echo "** for creating shared objects from your Perl installation."
		    echo "** If they actually work, please send the following information"
		    echo "** for inclusion into later releases to new-httpd@@apache.org or make"
		    echo "** a suggestion report at http://bugs.apache.org/:"
		    echo "**     PLATFORM=$PLAT"
		    echo "**     CFLAGS_SHLIB=$CFLAGS_SHLIB"
		    echo "**     LDFLAGS_SHLIB=$LDFLAGS_SHLIB"
		    echo "**     LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT"
		    echo ""
		fi
	    fi
	    ;;
    esac
fi

####################################################################
## Check if we really have some information to compile
## the shared objects if SharedModule was used.
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$TCFLAGS_SHLIB"  = "x" -a "x$CFLAGS_SHLIB"  = "x"  -a \
	 "x$TLDFLAGS_SHLIB" = "x" -a "x$LDFLAGS_SHLIB" = "x" ]; then
	echo ""
	echo "** FAILURE: Sorry, no shared object support available."
	echo "** Either compile all modules statically (use AddModule instead"
	echo "** of SharedModule in the Configuration file) or at least provide"
	echo "** us with the appropriate compiler and linker flags via the"
	echo "** CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT entries"
	echo "** in the Configuration file."
	echo ""
	exit 1
    fi
fi

####################################################################
## Now we do some OS specific adjustments... for some OSs, we need
## to adjust CFLAGS and/or OPTIM depending on which compiler we
## are going to use. This is easy, since this can be gleamed from
## Makefile.config
##
case "$OS" in
    'ULTRIX')
	case "$CC" in
	    */cc|cc ) CFLAGS="$CFLAGS -std" ;;
	esac
	;;
    'SCO 5')
	case "$CC" in
	    */cc|cc ) CFLAGS="$CFLAGS -K noinline" ;;
	esac
	;;
    'HI-UX')
	case "$CC" in
	    */cc|cc )
		CFLAGS="$CFLAGS -Aa -Ae -D_HIUX_SOURCE"
		OPTIM=" "
		TOPTIM=""
	    ;;
	esac
	;;
    'HP-UX'|'HP-UX 10'|'HP-UX 11')
	case "$CC" in
	    */cc|cc )
		CFLAGS="$CFLAGS -Aa -Ae -D_HPUX_SOURCE"
		OPTIM=" "
		TOPTIM=""
	    ;;
	esac
	;;
    *IRIX-64*)
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
	    case "$CC" in
		*/cc|cc )
		    CFLAGS="$CFLAGS -n32"
		    LDFLAGS="$LDFLAGS -n32"
		;;
	    esac
	fi
	;;
    *IRIX-32*)
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
	    case "$CC" in
		*/cc|cc )
		    CFLAGS="$CFLAGS -n32"
		    LDFLAGS="$LDFLAGS -n32"
		;;
	    esac
	fi
	;;
    IBM?AIX?4.[123])
	case $CC in
	    */cc|cc ) 
		CFLAGS="$CFLAGS -qnogenpcomp -qnousepcomp"
	    ;;
	esac
	;;
    'IBM AIX IA64')
       case $CC in
           */cc|cc )
               CFLAGS="$CFLAGS -qnogenpcomp -qnousepcomp"
           ;;
       esac
       ;;
esac

####################################################################
## OK, now we can write OPTIM
##
if [ "x$TOPTIM" = "x" ]; then
    echo "OPTIM=$OPTIM" >> Makefile.config
fi

####################################################################
## OK, now handle RANLIB
##
if [ "x$RANLIB" = "x" ]; then
    if [ "x$TRANLIB" != "x" ]; then
	RANLIB=$TRANLIB
    else
	if ${SHELL} helpers/PrintPath -s ranlib; then
	    RANLIB="ranlib"
	else
	    RANLIB="true"
	fi
    fi
fi

####################################################################
## Now we do some general checks and some intelligent Configuration
## control.

# Use TestCompile to look for various LIBS
case "$PLAT" in
    *-linux*)
	# newer systems using glibc 2.x need -lcrypt
	if ${SHELL} helpers/TestCompile lib crypt; then
	    LIBS="$LIBS -lcrypt"
	fi
	;;

    *-dg-dgux*)
	# R4.11MU02 requires -lsocket -lnsl ... no idea if it's earlier or
	# later than what we already knew about.  PR#732
	if ${SHELL} helpers/TestCompile lib nsl; then
	    LIBS="$LIBS -lnsl"
	    TLIB='-lnsl'
	fi
	if TLIB=$TLIB ${SHELL} helpers/TestCompile lib socket; then
	    LIBS="-lsocket $LIBS"
	fi
	;;
    BS2000*-siemens-sysv4*)
	# Activate RISC compilation if this is a SR2000 machine
	# (test written by Thomas Dorner <Thomas.Dorner@@start.de>
	# for perl5 port):
	ISSR2000="`bs2cmd SHOW-SYSTEM-INFO | grep 'HSI-ATT'`"
	case "$ISSR2000" in
	    *TYPE*SR*)
	        CFLAGS="$CFLAGS -Krisc_4000"
	        ;;
	esac
	# Depending on the BS2000 OS and compiler/crte release,
	# -lnsl may be available (or may be not).
	# In standard SVR4 systems, -lsocket relies on some symbols
	# from -lnsl, so the test for -lnsl must appear first.
	if ${SHELL} helpers/TestCompile lib nsl; then
	    LIBS="$LIBS -lnsl"
	    TLIB='-lnsl'
	fi
	if TLIB=$TLIB ${SHELL} helpers/TestCompile lib socket; then
	    LIBS="-lsocket $LIBS"
	fi
	# Auto-detect presence of libdl for dynamic loading
	if ${SHELL} ./helpers/TestCompile lib dl; then
	    if ${SHELL} ./helpers/TestCompile func dlopen; then
		LIBS="$LIBS -ldl"
		TLIB='-ldl'
    	   fi
	fi
	# Test for the presence of the "union semun":
	if TCADDINCL='#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>' ${SHELL} helpers/TestCompile sizeof "union semun"; then
            : Okay, union semun is defined
	else
	    CFLAGS="$CFLAGS -DNEED_UNION_SEMUN"
	fi
	# Test for the presence of the _rini_struct typedef:
	if TCADDINCL='#include <pwd.h>' ${SHELL} ./helpers/TestCompile sizeof _rini_struct; then
	    CFLAGS="$CFLAGS -DHAVE_RINI_STRUCT"
	fi
	# Test whether initgroups() must be emulated:
	if ${SHELL} helpers/TestCompile func initgroups; then
	    :
	else
	    CFLAGS="$CFLAGS -DNEED_INITGROUPS"
	fi
	;;
esac

# SOCKS4 support:
# We assume that if they are using SOCKS4, then they've
# adjusted EXTRA_LIBS and/or EXTRA_LDFLAGS as required,
# otherwise we assume "-L/usr/local/lib -lsocks"
if [ "x$RULE_SOCKS4" = "xyes" ]; then
    echo " + enabling SOCKS4 support"
    CFLAGS="$CFLAGS -DSOCKS -DSOCKS4"
    CFLAGS="$CFLAGS -Dconnect=Rconnect -Dselect=Rselect"
    CFLAGS="$CFLAGS -Dgethostbyname=Rgethostbyname"
    if [ "x`egrep '^EXTRA_L' Makefile.config | grep lsocks`" = "x" ]; then
	LIBS="$LIBS -L/usr/local/lib -lsocks"
    fi
    case $PLAT in
	*-solaris2* )
	    LIBS="$LIBS -lresolv"
	    ;;
    esac
fi

# SOCKS5 support:
# We assume that if they are using SOCKS5, then they've
# adjusted EXTRA_LIBS and/or EXTRA_LDFLAGS as required,
# otherwise we assume "-L/usr/local/lib -lsocks5"
if [ "x$RULE_SOCKS5" = "xyes" ]; then
    echo " + enabling SOCKS5 support"
    CFLAGS="$CFLAGS -DSOCKS -DSOCKS5"
    CFLAGS="$CFLAGS -Dconnect=SOCKSconnect -Dselect=SOCKSselect"
    CFLAGS="$CFLAGS -Dgethostbyname=SOCKSgethostbyname -Dclose=SOCKSclose"
    if [ "x`egrep '^EXTRA_L' Makefile.config | grep lsocks5`" = "x" ]; then
	LIBS="$LIBS -L/usr/local/lib -lsocks5"
    fi
    case $PLAT in
	*-solaris2* )
	    LIBS="$LIBS -lresolv"
	    ;;
    esac
fi

# INET6 support.
if [ "$RULE_INET6" = "yes" ]; then
    echo " + enabling INET6 support"
    CFLAGS="$CFLAGS -DINET6"
    CFLAGS="$CFLAGS -Dss_family=__ss_family -Dss_len=__ss_len"
    IPV6_STACKTYPE=KAME
fi

echo '#include <sys/types.h>' >testfunc.c
echo '#include <sys/socket.h>' >>testfunc.c
echo 'int testfunc(){ struct sockaddr sa; int i = sa.sa_len; };' >>testfunc.c
rm -f testfunc.o
eval "${MAKE-make} -f Makefile.config testfunc.o >/dev/null 2>/dev/null"
if [ -f testfunc.o ]; then
    echo " + you have sa_len in struct sockaddr."
    CFLAGS="$CFLAGS -DHAVE_SOCKADDR_LEN"
else
    echo " + you don't have sa_len in struct sockaddr."
fi
rm -f testfunc.c testfunc.o

echo '#include <sys/types.h>' >testfunc.c
echo '#include <sys/socket.h>' >>testfunc.c
echo 'struct sockaddr_storage sockaddr_storage;' >>testfunc.c
rm -f testfunc.o
eval "${MAKE-make} -f Makefile.config testfunc.o >/dev/null 2>/dev/null"
if [ -f testfunc.o ]; then
    echo " + assuming you have struct sockaddr_storage"
else
    CFLAGS="$CFLAGS -DNEED_SOCKADDR_STORAGE"
    echo " + you need struct sockaddr_storage"
fi
rm -f testfunc.c testfunc.o

echo '#include <sys/types.h>' >testfunc.c
echo '#include <sys/socket.h>' >>testfunc.c
echo 'int testfunc(){ socklen_t t; }' >>testfunc.c
rm -f testfunc.o
eval "${MAKE-make} -f Makefile.config testfunc.o >/dev/null 2>/dev/null"
if [ ! -f testfunc.o ]; then
    CFLAGS="$CFLAGS -Dsocklen_t=int"
fi
rm -f testfunc.c testfunc.o

echo '#include <sys/types.h>' >testfunc.c
echo '#include <sys/socket.h>' >>testfunc.c
echo 'struct sockaddr_in sin;' >>testfunc.c
echo 'int main(){ int i = sin.sin_len; }' >>testfunc.c
rm -f testfunc.o
eval "${MAKE-make} -f Makefile.config testfunc.o >/dev/null 2>/dev/null"
if [ -f testfunc.o ]; then
    CFLAGS="$CFLAGS -DSIN_LEN"
fi
rm -f testfunc.c testfunc.o


####################################################################
## Find out what modules we want and try and configure things for them
## Module lines can look like this:
##
##  Module  name_module    some/path/mod_name[.[oa]]
##  AddModule              some/path/mod_name[.[oa]]
##
## In both cases, the some/path can either be an arbitrary path (including
## an absolute path), or a path like "modules/DIR", in which case we _might_
## auto-generate a Makefile in modules/DIR (see later).
##
## The first case is the original style, where we give the module's
## name as well as it's binary file location - either a .o or .a.
##
## The second format is new, and means we do not repeat the module
## name, which is already part of the module source or definition.
## The way we find the module name (and other optional information about
## the module) is like this:
##
##  1 If extension is not given or is .c, assume .o was given and goto 3
##  2 If extension is .module, go to D1
##  3 If extension is .o, look for a corresponding .c file and if
##      found, go to C1
##  4 If no .c file was found, look for a .module file (Apache module
##      definition file). If found, go to D1
##  5 Assume module name is the "name" part of "mod_name", as in
##      name_module.
##
## If a C file is found:
##
## C1 Look for module name given by an MODULE: line (e.g. MODULE: name_module)
##      If found assume module contains a definition, and go to D1
## C2 If not found, look for a module name given on the declaration of the
##      module structure (e.g. module name_module).
## C3 If neither given, go to 4 above.
##
## If a definition file is found, or a .c file includes a module definition:
##
## D1 Get the module name from the MODULE: name= line
## D2 Get other module options (libraries etc). To be done later.
##
##
## For now, we will convert the AddModule lines into Module format
## lines, so the rest of Configure can do its stuff without too much
## additional hackery. It would be nice to reduce the number of times
## we have to awk the $tmpfile, though.

## MODFILES contains a list of module filenames (could be .c, .o, .so, .a
##    or .module files) from AddModule lines only
## MODDIRS contains a list of subdirectories under 'modules' which
##    contain modules we want to build from both AddModule and Module
##    lines

echo " + adding selected modules"

MODFILES=`awk <$tmpfile '($1 == "AddModule" || $1 == "SharedModule") { printf "%s ", $2 }'`
MODDIRS=`awk < $tmpfile '
	($1 == "Module" && $3 ~ /^modules\//) {
	    split ($3, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    }
    	}
	(($1 == "AddModule" || $1 == "SharedModule") && $2 ~ /^modules\//) { 
	    split ($2, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    } 
    	}'`
MODDIRS_NO_SO=`awk < $tmpfile '
	($1 == "Module" && $3 ~ /^modules\//) {
	    split ($3, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    }
    	}
	(($1 == "AddModule") && $2 ~ /^modules\//) { 
	    split ($2, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    } 
    	}'`

# Now autoconfigure each of the modules specified by AddModule.
# Use tmpfile2 for the module definition file, and tmpfile3 for the
# shell commands to be executed for this module.

for modfile in $MODFILES ; do
	rm -f $tmpfile2 $tmpfile3
	modname=''

	ext=`echo $modfile | sed 's/^.*\.//'`
	modbase=`echo $modfile | sed 's/\.[^.]*$//'`
	if [ "x$ext" = "x$modfile" ]; then ext=o; modbase=$modfile; modfile=$modbase.o; fi
	if [ "x$ext" = "x" ] ; then ext=o; modbase=$modfile; fi
	if [ "x$ext" = "xc" ] ; then ext=o; fi

	# modbase is the path+filename without extension, ext is the
	# extension given, or if none, o
	if [ -r $modbase.module ] ; then
		$CAT $modbase.module > $tmpfile2
	else
	    if [ -f $modbase.c ] ; then
		# Guess module structure name in case there is no
		# module definition in this file
		modname=`egrep '^module .*;' $modbase.c | head -1 |\
			sed 's/^module.*[ 	][ 	]*//' | \
			sed 's/[ 	]*;[ 	]*$//'`
		# Get any module definition part
		if grep "MODULE-DEFINITION-" $modbase.c > /dev/null; then
		$CAT $modbase.c | \
		sed '1,/MODULE-DEFINITION-START/d;/MODULE-DEFINITION-END/,$d' \
			> $tmpfile2
		fi
	    fi
	fi		
	if [ -r $tmpfile2 ] ; then
		# Read a module definition from .module or .c
		modname=`grep "Name:" $tmpfile2 | sed 's/^.*Name:[ 	]*//'`
		if grep "ConfigStart" $tmpfile2 > /dev/null \
		 && grep "ConfigEnd" $tmpfile2 > /dev/null; then
		    sed '1,/ConfigStart/d;/ConfigEnd/,$d' $tmpfile2 > \
		     $tmpfile3
		    echo "    o $modname uses ConfigStart/End"
		    if [ "x$RULE_PARANOID" = "xyes" ]; then
			sed 's/^/>> /' $tmpfile3
		    fi
		    . ./$tmpfile3
		fi
		if grep "Libs:" $tmpfile2 > /dev/null; then
		    modlibs1=`grep Libs: $tmpfile2 | sed 's/^.*Libs:[ 	]*//'`
		    echo "    o $modbase adds libraries: $modlibs1"
		    modlibs="$modlibs $modlibs1"
		fi
		rm -f $tmpfile2 $tmpfile3
		if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
		    ext=o
		fi
	fi
	if [ "x$modname" = "x" ] ; then
		modname=`echo $modbase | sed 's/^.*\///' | \
			sed 's/^mod_//' | sed 's/^lib//' | sed 's/$/_module/'`
	fi
	if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
		echo "Module $modname $modbase.$ext" >>$tmpfile
	fi
	#   optionally generate export file for some linkers 
	if [ "x$ext" = "x$SHMOD_SUFFIX_NAME" -a "x$SHLIB_EXPORT_FILES" = "xyes" ]; then
		echo "$modname" >$modbase.exp
	fi
done
# $tmpfile now contains Module lines for all the modules we want

####################################################################
## Now HS's POSIX regex implementation if needed/wanted. We do it
## now since AddModule may have changed it
##
if [ "x$RULE_WANTHSREGEX" = "xyes" ]; then
    REGLIB="regex/libregex.a"
    SUBDIRS="regex $SUBDIRS"
    CFLAGS="$CFLAGS -DUSE_HSREGEX"
fi

####################################################################
## Extended API (EAPI) support:
##
if [ "x$RULE_EAPI" = "x" ]; then
    RULE_EAPI=`${SHELL} helpers/CutRule EAPI $file`
fi
if [ "x$RULE_EAPI" = "xyes" ]; then
    echo " + enabling Extended API (EAPI)"
    CFLAGS="$CFLAGS -DEAPI"
    #   some vendor compilers are too restrictive
    #   for our ap_hook and ap_ctx sources.
    case "$OS:$CC" in
        *IRIX-32*:*/cc|*IRIX-32*:cc )
            CFLAGS="$CFLAGS -woff 1048,1110,1164"
            ;;
    esac
    #   MM Shared Memory Library support for EAPI
    if [ "x$EAPI_MM" = "x" ]; then
        EAPI_MM=`egrep '^EAPI_MM=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
    fi
    if [ "x$EAPI_MM" != "x" ]; then
        case $EAPI_MM in
            SYSTEM|/* ) ;;
            * ) for p in . .. ../..; do
                    if [ -d "$p/$EAPI_MM" ]; then
                        EAPI_MM="`echo $p/$EAPI_MM | sed -e 's;/\./;/;g'`" 
                        break
                    fi
                done
                ;;
        esac
        if [ "x$EAPI_MM" = "xSYSTEM" ]; then
            echo "   using MM library for EAPI: (system-wide)"
            CFLAGS="$CFLAGS -DEAPI_MM"
            __INCLUDES="`mm-config --cflags`"
            if [ "x$__INCLUDES" != "x-I/usr/include" ]; then
                INCLUDES="$INCLUDES $__INCLUDES"
            fi
            LDFLAGS="$LDFLAGS `mm-config --ldflags`"
            LIBS="$LIBS `mm-config --libs`"
        else
            if [ -f "$EAPI_MM/.libs/libmm.a" -a -f "$EAPI_MM/mm.h" ]; then
                echo "   using MM library: $EAPI_MM (source-tree only)"
                case $EAPI_MM in
                    /* ) ;;
                    *  ) EAPI_MM="\$(SRCDIR)/$EAPI_MM" ;;
                esac
                CFLAGS="$CFLAGS -DEAPI_MM"
                INCLUDES="$INCLUDES -I$EAPI_MM"
                LDFLAGS="$LDFLAGS -L$EAPI_MM/.libs"
                LIBS="$LIBS -lmm"
            elif [ -f "$EAPI_MM/bin/mm-config" ]; then
                echo "   using MM library: $EAPI_MM (installed)"
                CFLAGS="$CFLAGS -DEAPI_MM"
                INCLUDES="$INCLUDES `$EAPI_MM/bin/mm-config --cflags`"
                LDFLAGS="$LDFLAGS `$EAPI_MM/bin/mm-config --ldflags`"
                LIBS="$LIBS `$EAPI_MM/bin/mm-config --libs`"
            else
                echo "Configure:Error: Cannot find MM library under $EAPI_MM" 1>&2
                exit 1
            fi
        fi
    fi
fi


####################################################################
## Add in the Expat library if needed/wanted.
##

# set the default, based on whether expat-lite is bundled. if it is present,
# then we can always include expat.
if [ "x$RULE_EXPAT" = "xdefault" ]; then
    if [ -d ./lib/expat-lite/ ]; then
        RULE_EXPAT=yes
    else
        RULE_EXPAT=no
    fi
fi

if [ "x$RULE_EXPAT" = "xyes" ]; then
    if ${SHELL} ./helpers/TestCompile lib expat; then
        echo " + using system Expat"
        LIBS="$LIBS -lexpat"
    else
        if [ ! -d ./lib/expat-lite/ ]; then
            echo "ERROR: RULE_EXPAT set to \"yes\" but is not available."
	    exit 1
        fi
        echo " + using builtin Expat"
        EXPATLIB="lib/expat-lite/libexpat.a"
        APLIBDIRS="expat-lite $APLIBDIRS"
        CFLAGS="$CFLAGS -DUSE_EXPAT -I\$(SRCDIR)/lib/expat-lite"
    fi
fi

####################################################################
## Now the SHARED_CHAIN stuff
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$RULE_SHARED_CHAIN" = "xdefault" ] ; then
	RULE_SHARED_CHAIN=$DEF_SHARED_CHAIN
    fi
    if [ "x$RULE_SHARED_CHAIN" = "xyes" ]; then
	echo " + enabling DSO files to be linked against others"
	#   determine libraries which can be safely linked
	#   to our DSO files, i.e. PIC libraries and shared libraries
	extra_ldflags="`grep EXTRA_LDFLAGS= Makefile.config`"
	extra_libs="`grep EXTRA_LIBS= Makefile.config`"
	eval "`${SHELL} helpers/slo.sh $LDFLAGS $LIBS $extra_ldflags $extra_libs`"
	LIBS_SHLIB="$SLO_DIRS_PIC $SLO_LIBS_PIC $SLO_DIRS_DSO $SLO_LIBS_DSO"
    fi
fi

####################################################################
## Now the SHARED_CORE stuff
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$RULE_SHARED_CORE" = "xdefault" ] ; then
	RULE_SHARED_CORE=$DEF_SHARED_CORE
    fi
    if [ "x$RULE_SHARED_CORE" = "xyes" ]; then
	DSO_STRING="DSO"
	if [ "$OS" = "Cygwin" ]; then
	    DSO_STRING="DLL"
	fi
	echo " + enabling generation of Apache core as $DSO_STRING"
	#    shuffle compiler flags from shlib variant to standard
	CFLAGS="$CFLAGS $CFLAGS_SHLIB"
	CFLAGS_SHLIB=""
	#    indicate that Rule SHARED_CORE is active
	CFLAGS="$CFLAGS -DSHARED_CORE"
	#    select the special subtarget for shared core generation
	SUBTARGET=target_shared
	#    determine additional suffixes for libhttpd.so
	V=1 R=3 P=29
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x0" ]; then
	    SHLIB_SUFFIX_LIST=""
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x1" ]; then
	    SHLIB_SUFFIX_LIST="$V"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x2" ]; then
	    SHLIB_SUFFIX_LIST="$V.$R"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x3" ]; then
	    SHLIB_SUFFIX_LIST="$V.$R.$P"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "xall" ]; then
	    SHLIB_SUFFIX_LIST="$V $V.$R $V.$R.$P"
	fi
    fi
fi

####################################################################
## Set the value of the shared libary flags, if they aren't explicitly
## set in the configuration file
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$TCFLAGS_SHLIB" = "x" ]; then
	echo "CFLAGS_SHLIB=$CFLAGS_SHLIB -DSHARED_MODULE" >> Makefile.config
    fi
    if [ "x$TLD_SHLIB" = "x" ]; then
	echo "LD_SHLIB=$LD_SHLIB" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_SHLIB" = "x" ]; then
	echo "EXTRA_LDFLAGS_SHLIB=$EXTRA_LDFLAGS_SHLIB" >> Makefile.config
	echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB $EXTRA_LDFLAGS_SHLIB" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_SHLIB_EXPORT" = "x" ]; then
	echo "LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_MOD_SHLIB" = "x" ]; then
	echo "LDFLAGS_MOD_SHLIB=$LDFLAGS_MOD_SHLIB" >> Makefile.config
    fi
    echo "LD_SHCORE_DEF=$LD_SHCORE_DEF" >> Makefile.config
    echo "LD_SHCORE_LIBS=$LD_SHCORE_LIBS" >> Makefile.config
    echo "SHARED_CORE_EP=$SHARED_CORE_EP" >> Makefile.config
    echo "SHCORE_IMPLIB=$SHCORE_IMPLIB" >> Makefile.config
fi

####################################################################
## Now create modules.c
##
$CAT > $awkfile <<'EOFM'
    BEGIN {
	modules[n++] = "core"
	pmodules[pn++] = "core"
    } 
    /^Module/ { modules[n++] = $2 ; pmodules[pn++] = $2 } 
    /^%Module/ { pmodules[pn++] = $2 } 
    END {
	print "/*"
	print " * modules.c --- automatically generated by Apache"
	print " * configuration script.  DO NOT HAND EDIT!!!!!"
	print " */"
	print ""
	print "#include \"httpd.h\""
	print "#include \"http_config.h\""
	print ""
	for (i = 0; i < pn; ++i) {
	    printf ("extern module %s_module;\n", pmodules[i])
	}
	print ""
	print "/*"
	print " *  Modules which implicitly form the"
	print " *  list of activated modules on startup,"
	print " *  i.e. these are the modules which are"
	print " *  initially linked into the Apache processing"
	print " *  [extendable under run-time via AddModule]"
	print " */"
	print "module *ap_prelinked_modules[] = {"
	for (i = 0; i < n; ++i) {
	    printf "  &%s_module,\n", modules[i]
	}
	print "  NULL"
	print "};"
	print ""
	print "/*"
	print " *  Modules which initially form the"
	print " *  list of available modules on startup,"
	print " *  i.e. these are the modules which are"
	print " *  initially loaded into the Apache process"
	print " *  [extendable under run-time via LoadModule]"
	print " */"
	print "module *ap_preloaded_modules[] = {"
	for (i = 0; i < pn; ++i) {
	    printf "  &%s_module,\n", pmodules[i]
	}
	print "  NULL"
	print "};"
	print ""
    }
EOFM
$CAT $tmpfile | sed 's/_module//' | awk -f $awkfile > modules.c 

####################################################################
## figure out which module dir require use to autocreate a Makefile.
## for these dirs we must not list the object files from the AddModule
## lines individually since the auto-generated Makefile will create
## a library called libMODDIR.a for it (MODDIR is the module dir
## name). We create two variable here:
##
##   AUTODIRS   Space separated list of module directories, relative to
##              src
##   AUTOLIBS   Space separated list of auto-generated library files
##
for moddir in $MODDIRS 
do
	if [ -f modules/$moddir/Makefile.tmpl ] ; then
		AUTODIRS="$AUTODIRS modules/$moddir"
	fi
done
for moddir in $MODDIRS_NO_SO
do
	if [ -f modules/$moddir/Makefile.tmpl ] ; then
		AUTOLIBS="$AUTOLIBS modules/$moddir/lib$moddir.a"
	fi
done

####################################################################
## Add the module targets to the Makefile. Do not add individual object
## targets for auto-generated directories.
##
$CAT > $awkfile <<EOF1
    BEGIN {
	split ("$AUTODIRS", tmp, " ")
EOF1
$CAT >> $awkfile <<'EOF2'
	for ( key in tmp ) {
	    autodirs[tmp[key]] = 1
	}
     }
    /^Module/ { modules[n++] = $3 }
    /^%Module/ { modules[n++] = $3 }
    END {
	print "MODULES= \\"
	for (i = 0; i < n; ++i) {
	    split (modules[i], pp, "/")
	    dir = pp[1] "/" pp[2] 
	    inthere = 0
	    for ( tdir in autodirs ) {
		if (tdir == dir) 
		    inthere = 1
	    }
	    if (inthere == 1)
		continue
	    else
		printf ("  %s \\\n", modules[i])
	}
    }
EOF2
awk -f $awkfile >>Makefile <$tmpfile

####################################################################
## Now add the auto-generated library targets.  Need to use awk so we
## don't hang a continuation on the last line.
##
$CAT > $awkfile <<'EOF4'
    {
	z = 0
	split ($0, libs)
	for ( lib in libs ) {
	    if (z != 0)
		printf (" \\\n")
	    z++
	    printf ("  %s", libs[lib])
	}
    }
    END {
	printf ("\n")
    }
EOF4
echo "$AUTOLIBS" | awk -f $awkfile >>Makefile
echo "" >>Makefile

####################################################################
## Now add the target for the main Makefile
##
echo "SUBDIRS=$SUBDIRS lib modules" >> Makefile
echo "SUBTARGET=$SUBTARGET" >> Makefile
echo "SHLIB_SUFFIX_NAME=$SHLIB_SUFFIX_NAME" >> Makefile
echo "SHMOD_SUFFIX_NAME=$SHMOD_SUFFIX_NAME" >> Makefile
echo "SHLIB_SUFFIX_LIST=$SHLIB_SUFFIX_LIST" >> Makefile
echo "SHLIB_EXPORT_FILES=$SHLIB_EXPORT_FILES" >> Makefile
echo "" >> Makefile

####################################################################
## Determine GNU Make variant because
## it uses ugly looking built-in directory walk messages
## while we are already using our own messages
##
if [ "x`${MAKE} -v 2>/dev/null | grep 'GNU Make'`" = "x" ]; then
	MFLAGS_STATIC=
else
	MFLAGS_STATIC=--no-print-directory
fi

####################################################################
## Continue building Makefile.config. Fill in all entries except
## for $LIBS at this point. This implies that anything below
## can only alter $LIBS
##
echo "CFLAGS1=$CFLAGS" >>Makefile.config
echo "INCLUDES1=$INCLUDES" >>Makefile.config
echo "LIBS_SHLIB=$LIBS_SHLIB" >>Makefile.config
echo "LDFLAGS1=$LDFLAGS" >>Makefile.config
echo "MFLAGS_STATIC=$MFLAGS_STATIC" >>Makefile.config
echo "REGLIB=$REGLIB" >>Makefile.config
echo "EXPATLIB=$EXPATLIB" >>Makefile.config
echo "RANLIB=$RANLIB" >>Makefile.config

####################################################################
## Some OS-related stuff for the DSO mechanism:
## Finding the vendor DSO functions
##
if [ "x$using_shlib" = "x1" ] ; then
    DL_LIB=""
    case $PLAT in
       ia64-ibm-aix* )
           DL_LIB="-ldl"
           ;;
	*-ibm-aix* )
	    DL_LIB="-lld"
	    ;;
	*-sequent-ptx* )
	    case $PLAT in
	        *-sequent-ptx2*)
	            ;;
	        *-sequent-ptx4.0*)
	            ;;
	        *-sequent-ptx*)
	            DL_LIB="-ldl"
	            ;;
	    esac
	    ;;
	*-hp-hpux*)
	    if ${SHELL} helpers/TestCompile func shl_load; then
		:
	    else
		if ${SHELL} helpers/TestCompile lib dld; then
		    DL_LIB="-ldld"
		fi
	    fi
	    ;;
	* )
	    if ${SHELL} helpers/TestCompile func dlopen; then
		:
	    else
		if ${SHELL} helpers/TestCompile lib dl; then
		    DL_LIB="-ldl"
		fi
	    fi
	    ;;
    esac
    if [ "x$DL_LIB" != "x" ]; then
	LIBS="$LIBS $DL_LIB"
	echo " + using $DL_LIB for vendor DSO support"
    fi
fi

####################################################################
## More building ap_config_auto.h
##
## Check for availability of isinf() and isnan()
##
echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: isinf() found in libc */ " >>$AP_CONFIG_AUTO_H
echo "#ifndef HAVE_ISINF" >>$AP_CONFIG_AUTO_H
echo "#define HAVE_ISINF 1" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: isnan() found in libc */ " >>$AP_CONFIG_AUTO_H
echo "#ifndef HAVE_ISNAN" >>$AP_CONFIG_AUTO_H
echo "#define HAVE_ISNAN 1" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

##
## Now compare the sizes of off_t to long
##
echo "" >>$AP_CONFIG_AUTO_H
echo "/* sizeof(off_t) == sizeof(quad_t) on OpenBSD */" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
echo "#define AP_OFF_T_IS_QUAD 1" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

####################################################################
## Finish building ap_config_auto.h
##
## We pick out all -D's from CFLAGS and insert them as defines into
## ap_config_auto.h so they are available to external modules needing to
## include Apache header files.
##
TEXTRA_CFLAGS=`egrep '^EXTRA_CFLAGS=' Makefile.config | tail -1 |\
	       sed -e 's;^EXTRA_CFLAGS=;;' -e 's;\`.*\`;;'`
tmpstr=`echo $CFLAGS $TEXTRA_CFLAGS |\
	sed -e 's;[ 	]\([+-]\);!\1;g' -e 's/\([^\\\]\)"/\1/g' -e 's/\\\"/\"/g'`
OIFS="$IFS"
IFS='!'
for cflag in $tmpstr; do
    echo "$cflag" >>$tmpconfig
done
IFS="$OIFS"
awk >>$AP_CONFIG_AUTO_H <$tmpconfig '
    /^-D.*/ {
	i = index($0, "=")
	if (i > 0) {
	    define = substr($0, 3, i-3)
	    value  = substr($0, i+1, length($0)-i)
	}
	else {
	    define = substr($0, 3, length($0)-2)
	    value  = "1";
	}
	printf ("\n/* build flag: %s */\n", $0)
	printf ("#ifndef %s\n#define %s %s\n#endif\n", define, define, value)
    }
'

# finish header file
echo "" >>$AP_CONFIG_AUTO_H
echo "#endif /* AP_CONFIG_AUTO_H */" >>$AP_CONFIG_AUTO_H

####################################################################
## Finish creating the Makefile.config file
##
echo "LIBS1=$modlibs $LIBS">> Makefile.config
echo "##" >> Makefile.config
echo "##  (End of automatically generated section)">> Makefile.config
echo "##" >> Makefile.config
echo "" >> Makefile.config

####################################################################
## Use TestCompile to see if $(CC) is ANSI and as a "final" sanity
## check
##

if [ "x$OS" = "xTPF" ] ; then
    :
else
   echo " + doing sanity check on compiler and options"
   if ${SHELL} ./helpers/TestCompile $vflag sanity; then
      :
   else
      if [ "x$vflag" = "x-v" ] ; then
         WHEREERR="above"
      else
         WHEREERR="below"
      fi
      echo "** A test compilation with your Makefile configuration"
      echo "** failed.  The $WHEREERR error output from the compilation"
      echo "** test will give you an idea what is failing. Note that"
      echo "** Apache requires an ANSI C Compiler, such as gcc. "
      echo ""
      echo "======== Error Output for sanity check ========"
      (${SHELL} ./helpers/TestCompile -v sanity) 2>&1
      echo "============= End of Error Report ============="
      echo ""
      echo " Aborting!"
      exitcode=1
      exit 1
   fi
fi

####################################################################
## Now (finish) creating the makefiles
##

# ./Makefile
$CAT Makefile.config >> Makefile
sed -e "s#@@@@Configuration@@@@#$file#" "Makefile.tmpl" >>Makefile

# xxx/Makefile
MAKEDIRS="support $SUBDIRS"
for dir in $MAKEDIRS ; do
	echo Creating Makefile in $dir
	${SHELL} helpers/mfhead $dir $file > $dir/Makefile
	$CAT Makefile.config $dir/Makefile.tmpl |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`${SHELL} helpers/fp2rp $dir`:" >> $dir/Makefile
done

####################################################################
## Now create the lib/Makefile
##
${SHELL} helpers/mfhead modules $file > lib/Makefile
$CAT Makefile.config | sed -e 's:^SRCDIR=.*:SRCDIR=..:' >> lib/Makefile

$CAT << EOF >> lib/Makefile
APLIBS=$APLIBDIRS
CFLAGS=\$(OPTIM) \$(CFLAGS1) \$(EXTRA_CFLAGS)

default: all

all clean distclean depend :: 
	@@for i in \$(APLIBS) ""; do \\
	  if [ "x\$\$i" != "x" ]; then \\
	    echo "===> \$(SDP)lib/\$\$i"; \\
		(cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' \$@@) || exit 1; \\
		echo "<=== \$(SDP)lib/\$\$i"; \\
	  fi; \\
	done

EOF

####################################################################
## Now create the lib/xxx/Makefile
##

for dir in $APLIBDIRS ; do
	echo Creating Makefile in lib/$dir
	${SHELL} helpers/mfhead lib/$dir $file > lib/$dir/Makefile
	$CAT Makefile.config lib/$dir/Makefile.tmpl |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`${SHELL} helpers/fp2rp lib/$dir`:" >> lib/$dir/Makefile
done

####################################################################
## Now create the modules/Makefile
##
${SHELL} helpers/mfhead modules $file > modules/Makefile
$CAT Makefile.config | sed -e 's:^SRCDIR=.*:SRCDIR=..:' >> modules/Makefile

$CAT << EOF >> modules/Makefile
MODULES=$MODDIRS
CFLAGS=\$(OPTIM) \$(CFLAGS1) \$(EXTRA_CFLAGS)

default: all

all clean distclean depend :: 
	@@for i in \$(MODULES) ""; do \\
	  if [ "x\$\$i" != "x" ]; then \\
	    echo "===> \$(SDP)modules/\$\$i"; \\
		case "x\$(OS)" in \\
		  xOS390 | xTPF) (cd \$\$i && \$(MAKE) SDP='\$(SDP)' OPTIM='\$(OPTIM)' \$@@) || exit 1;; \\
		              *) (cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' OPTIM='\$(OPTIM)' \$@@) || exit 1;; \\
		esac; \\
		echo "<=== \$(SDP)modules/\$\$i"; \\
	  fi; \\
	done

EOF

####################################################################
## Now create modules/xxx/Makefile
##
for moddir in $AUTODIRS ; do
	echo "Creating Makefile in $moddir"

    ${SHELL} helpers/mfhead $moddir $file > $moddir/Makefile
	$CAT Makefile.config |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`${SHELL} helpers/fp2rp $moddir`:" >> $moddir/Makefile
	$CAT << 'EOF' >> $moddir/Makefile
##
##  Default Makefile options from Configure script
##  (Begin of automatically generated section)
##
CFLAGS=$(OPTIM) $(CFLAGS1) $(EXTRA_CFLAGS)
LIBS=$(EXTRA_LIBS) $(LIBS1)
INCLUDES=$(INCLUDES1) $(INCLUDES0) $(EXTRA_INCLUDES)
LDFLAGS=$(LDFLAGS1) $(EXTRA_LDFLAGS)
INCDIR=$(SRCDIR)/include
EOF
	if [ -f $moddir/Makefile.libdir ]; then
	    basedir=`echo $moddir | sed 's@@^[^/]*/@@@@g'`
	    awk >> $moddir/Makefile < $tmpfile '
		($2 ~ /^modules\/'$basedir'\//) {
		    split($2, pp, "/");
		    split(pp[3], parts, ".");
		    libext=parts[2];
		}
		END { 
		    printf "LIBEXT=%s\n", libext;
		}'
	    # it's responsible for the rest of its Makefile...
	else
	    basedir=`echo $moddir | sed 's@@^[^/]*/@@@@g'`
	    OBJS=`awk < $tmpfile '
		($1 == "Module" && $3 ~ /^modules\/'$basedir'\//) { 
		    split ($3, pp, "/")
		    printf "%s ", pp[3] 
		} 
		'`
	    echo "OBJS=$OBJS" >> $moddir/Makefile
	    if [ "x$OBJS" != "x" ]; then
		echo "LIB=lib$basedir.a" >> $moddir/Makefile
	    else
		#   essential!
		echo "LIB=" >> $moddir/Makefile
	    fi
	    awk >> $moddir/Makefile < $tmpfile '
	    ($1 == "SharedModule" && $2 ~ /^modules\/'$basedir'\//) {
		split($2, pp, "/")
		shlibs=shlibs " " pp[3]
		so=pp[3]
		split(pp[3], parts, ".")
		base=parts[1]
		objspic=objspic " " base ".lo"
	    }
	    END { 
		printf "SHLIBS=%s\n", shlibs;
		printf "OBJS_PIC=%s\n", objspic;
	    }'

	    $CAT << 'EOF' >> $moddir/Makefile

all: lib shlib

lib:	$(LIB) 

shlib:	$(SHLIBS)

dummy $(LIB): $(OBJS)
	rm -f $@@
	ar cr $@@ $(OBJS)
	$(RANLIB) $@@

.SUFFIXES: .o .so .dll

.c.o:
	$(CC) -c $(INCLUDES) $(CFLAGS) $<

.c.so:
	$(CC) -c $(INCLUDES) $(CFLAGS) $(CFLAGS_SHLIB) $< && mv $*.o $*.lo
	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o $@@ $*.lo $(LIBS_SHLIB)

clean:
	rm -f $(LIB) $(OBJS) $(SHLIBS) $(OBJS_PIC)

distclean: clean
	rm -f Makefile

#   NOT FOR END USERS!
depend:
	cp Makefile.tmpl Makefile.tmpl.bak \
	    && sed -ne '1,/^# DO NOT REMOVE/p' Makefile.tmpl > Makefile.new \
	    && gcc -MM $(INCLUDES) $(CFLAGS) *.c >> Makefile.new \
	    && sed -e '1,$$s: $(INCDIR)/: $$(INCDIR)/:g' \
		   -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
		> Makefile.tmpl \
	    && rm Makefile.new

EOF
	fi

	if [ "x$OS_MODULE_INCLUDE" != "x" ]; then
		echo "include $OS_MODULE_INCLUDE" >> $moddir/Makefile
	fi

	$CAT << 'EOF' >> $moddir/Makefile
##
##  (End of automatically generated section)
##
EOF
    $CAT >> $moddir/Makefile < $moddir/Makefile.tmpl

done

@


1.29
log
@Unconditionally set HAVE_ISINF and HAVE_ISNAN in the generated
ap_config_auto.h.  We know we have these functions in libc on OpenBSD, but
the check for them fails with gcc due to some __builtin__xxx stupidity.

ok drahn@@, sthen@@, henning@@
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.28 2008/05/09 08:06:27 mbalmer Exp $
@


1.28
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.27 2007/02/14 20:11:09 millert Exp $
d2359 5
a2363 15
if ${SHELL} ./helpers/TestCompile func isinf ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isinf() found in libc */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISINF" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISINF 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
elif ${SHELL} ./helpers/TestCompile lib m isinf ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isinf() found in libm */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISINF" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISINF 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
    LIBS="$LIBS -lm"
    ADDED_LM="yes"
fi
d2365 5
a2369 16
if ${SHELL} ./helpers/TestCompile func isnan ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isnan() found in libc */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISNAN" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISNAN 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
elif ${SHELL} ./helpers/TestCompile lib m isnan ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isnan() found in libm */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISNAN" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISNAN 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
    if [ "x$ADDED_LM" != "xyes" ]; then
        LIBS="$LIBS -lm"
    fi
fi
@


1.27
log
@g/c NO_DL_NEEDED, it is no longer used by os/unix/os.c
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.26 2007/02/13 19:00:58 henning Exp $
d243 1
d1674 1
a1674 1
#include <sys/sem.h>' ./helpers/TestCompile sizeof "union semun"; then
d1729 56
@


1.26
log
@unbreak compile on 64bit systems; no cookie for espie. ok millert
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.25 2007/02/13 00:37:24 espie Exp $
a2047 8
fi

####################################################################
## Don't force DL emulation, if not necessary. Currently only used
## by os/unix/os.c. 
##
if [ "x$using_shlib" != "x1" ] ; then
    CFLAGS="$CFLAGS -DNO_DL_NEEDED"
@


1.25
log
@remove prereq, by using a pre-generated include file (this one should now
be MI since we removed stuff that was arch-dependent). The Configure script
still rebuilds a copy of that file, and we check it for diffs.

okay millert@@
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.24 2007/02/03 18:01:52 espie Exp $
d2346 5
a2350 23
AP_TYPE_OFF_T=`${SHELL} helpers/TestCompile -r sizeof off_t`
if [ "x$AP_TYPE_OFF_T" = "x" ]; then
    AP_TYPE_OFF_T="unknown_off_t"
fi

AP_TYPE_LONG=`${SHELL} helpers/TestCompile -r sizeof long`
if [ "x$AP_TYPE_LONG" = "x" ]; then
    AP_TYPE_LONG="unknown_long"
fi

if [ "x$AP_TYPE_OFF_T" != "x$AP_TYPE_LONG" ]; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is off_t a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifndef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#define AP_OFF_T_IS_QUAD 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
else
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is off_t a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifdef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#undef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
fi
@


1.24
log
@remove varying parts from generated configure info:
- ap_snprintf can grab needed types from stdint.h
- expat-lite can grab byte-order from system includes.

no breakage in modules in the ports tree.

work by me and millert@@, ok miod@@.
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.23 2003/11/17 18:57:05 henning Exp $
d1001 1
a1001 1
AP_CONFIG_AUTO_H="include/ap_config_auto.h"
@


1.23
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.22 2003/08/21 13:11:33 henning Exp $
a2307 20
## We check the sizeof various data types
##
echo " + checking sizeof various data types"
AP_TYPE_QUAD=`${SHELL} helpers/TestCompile -r sizeof 'long long'`
if [ "x$AP_TYPE_QUAD" = "x" ]; then
    AP_TYPE_QUAD="unknown_quad"
    AP_LONGEST_LONG="long"
else
    AP_LONGEST_LONG="long long"
fi

echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: longest possible integer type */" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_LONGEST_LONG" >>$AP_CONFIG_AUTO_H
echo "#define AP_LONGEST_LONG $AP_LONGEST_LONG" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

####################################################################
## More building ap_config_auto.h
##
a2342 15
## We check for the endianess of the machine
##
AP_BYTE_ORDER=`${SHELL} helpers/TestCompile -r byteorder`
if [ "x$AP_BYTE_ORDER" = "x21" ]; then
    AP_BYTE_ORDER="21" # big endian
else
    AP_BYTE_ORDER="12" # little endian
fi

echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: byte order of machine (12: little endian, 21: big endian) */" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_BYTE_ORDER" >>$AP_CONFIG_AUTO_H
echo "#define AP_BYTE_ORDER $AP_BYTE_ORDER" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

a2366 22
    echo "#endif" >>$AP_CONFIG_AUTO_H
fi

##
## Now see of void * is as big as a quad (long long)
##
AP_TYPE_VOID_P=`${SHELL} helpers/TestCompile -r sizeof 'void *'`
if [ "x$AP_TYPE_VOID_P" = "x" ]; then
    AP_TYPE_VOID_P="unknown_void_p"
fi

if [ "x$AP_TYPE_VOID_P" = "x$AP_TYPE_QUAD" ]; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is void * a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifndef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#define AP_VOID_P_IS_QUAD 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
else
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is void * a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifdef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#undef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
@


1.22
log
@merge
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.21 2002/10/07 20:23:06 henning Exp $
d2031 1
a2031 1
	V=1 R=3 P=28
@


1.21
log
@merge apache 1.3.27 and mod_ssl 2.8.11
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.20 2002/07/19 21:31:15 henning Exp $
d6 1
a6 1
## Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d305 1
a305 1
	CFLAGS="$CFLAGS -DAIX=1 -U__STR__ -DUSEBCOPY"
a307 31
    *-ibm-aix[1-2].*)
	OS='IBM AIX 1.x/2.x'
	CFLAGS="$CFLAGS -DAIX=1 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix3.*)
	OS='IBM AIX 3.x'
	CFLAGS="$CFLAGS -DAIX=30 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix4.1)
	OS='IBM AIX 4.1'
	CFLAGS="$CFLAGS -DAIX=41 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix4.2)
	OS='IBM AIX 4.2'
	CFLAGS="$CFLAGS -DAIX=42 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
	;;
    *-ibm-aix4.3)
	OS='IBM AIX 4.3'
	CFLAGS="$CFLAGS -DAIX=43 -DUSE_PTHREAD_SERIALIZED_ACCEPT -U__STR__"
	LDFLAGS="$LDFLAGS -lm -lpthread"
	RULE_SHARED_CORE=no
	DEF_SHARED_CORE=no
	;;
    *-ibm-aix5.1)
	OS='IBM AIX 5.1'
	CFLAGS="$CFLAGS -DAIX=51 -DUSE_PTHREAD_SERIALIZED_ACCEPT -U__STR__"
	LDFLAGS="$LDFLAGS -lm -lpthread"
	RULE_SHARED_CORE=no
	DEF_SHARED_CORE=no
	;;
d315 31
d348 1
a348 1
	CFLAGS="$CFLAGS -DAIX=1 -U__STR__"
d1010 7
d1024 1
a1024 1
    name="`echo $header | sed -e 's:/:_:g' -e 's:\.:_:g' | tr '[a-z]' '[A-Z]'`"
d1398 1
a1398 1
		*-ibm-aix4*)
d2031 1
a2031 1
	V=1 R=3 P=27
d2070 2
a2071 1
	echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB" >> Makefile.config
@


1.20
log
@merge
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.18 2002/03/22 16:55:44 brad Exp $
d636 6
d1279 10
d2024 1
a2024 1
	V=1 R=3 P=26
@


1.19
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d2008 1
a2008 1
	V=1 R=3 P=24
d2549 2
a2550 2
		  xOS390 | xTPF) (cd \$\$i && \$(MAKE) SDP='\$(SDP)' \$@@) || exit 1;; \\
		              *) (cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' \$@@) || exit 1;; \\
@


1.18
log
@match style of the rest of the Configure script, test -> []
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.17 2002/03/17 04:52:14 brad Exp $
d6 1
a6 1
## Copyright (c) 2000 The Apache Software Foundation.  All rights
d591 1
a591 1
	LIBS="$LIBS -lsocket -lnsl"
d1891 1
a1891 1
        EAPI_MM=`egrep '^EAPI_MM=' $file | tail -1 | awk -F= '{print $2}'`
d1954 1
a1954 1
    if ./helpers/TestCompile lib expat; then
d2008 1
a2008 1
	V=1 R=3 P=23
d2306 1
a2306 1
if ./helpers/TestCompile func isinf ; then
d2312 1
a2312 1
elif ./helpers/TestCompile lib m isinf ; then
d2322 1
a2322 1
if ./helpers/TestCompile func isnan ; then
d2328 1
a2328 1
elif ./helpers/TestCompile lib m isnan ; then
d2472 1
a2472 1
      (./helpers/TestCompile -v sanity)
@


1.17
log
@This along with the recent dynamic linker fixes allows modules to work
with Apache on our ELF-based architecures. Enable alpha, powerpc and sparc64.
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.16 2002/02/21 23:33:14 miod Exp $
d1135 1
a1135 1
		   if test -z "`echo __ELF__ | ${CC} -E - | grep __ELF__`"; then
@


1.16
log
@Invoke helper scripts with relative path; this got borked in rev 1.13.
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.15 2002/02/12 07:56:49 beck Exp $
d1135 3
@


1.15
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.14 2001/03/29 10:21:38 beck Exp $
d1638 2
a1639 2
	if ${SHELL} /helpers/TestCompile lib dl; then
	    if ${SHELL} /helpers/TestCompile func dlopen; then
d1653 1
a1653 1
	if TCADDINCL='#include <pwd.h>' ${SHELL} /helpers/TestCompile sizeof _rini_struct; then
@


1.14
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.13 2000/12/15 22:17:52 beck Exp $
d240 1
d332 7
d454 1
d673 1
a673 1
	CFLAGS="$CFLAGS -DSVR4 -D_XPG_IV -DHAS_DLFCN -DUSE_MMAP_FILES -DUSE_SYSVSEM_SERIALIZED_ACCEPT -DNEED_UNION_SEMUN"
d804 1
a804 1
            5.1*)
d848 19
d1173 8
a1180 1
	    LDFLAGS_SHLIB='$(EXTRA_LDFLAGS) -bundle -undefined suppress'
d1417 15
d1644 8
d1939 5
a1943 2
if [ -d ./lib/expat-lite/ ]; then
    if [ "x$RULE_EXPAT" = "xdefault" ]; then
a1944 5
    fi
else
    if [ "$xRULE_EXPAT" = "xyes" ]; then
        echo "ERROR: RULE_EXPAT set to \"yes\" but is not available."
	exit 1
d1949 1
d1951 13
a1963 3
    EXPATLIB="lib/expat-lite/libexpat.a"
    APLIBDIRS="expat-lite $APLIBDIRS"
    CFLAGS="$CFLAGS -DUSE_EXPAT -I\$(SRCDIR)/lib/expat-lite"
d1992 5
a1996 1
	echo " + enabling generation of Apache core as DSO"
d2005 1
a2005 1
	V=1 R=3 P=19
d2301 35
@


1.13
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.12 2000/10/16 21:23:35 brad Exp $
d4 4
a7 1
## Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d14 1
a14 1
##    notice, this list of conditions and the following disclaimer. 
d21 20
a40 23
## 3. All advertising materials mentioning features or use of this
##    software must display the following acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## 4. The names "Apache Server" and "Apache Group" must not be used to
##    endorse or promote products derived from this software without
##    prior written permission. For written permission, please contact
##    apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache"
##    nor may "Apache" appear in their names without prior written
##    permission of the Apache Group.
##
## 6. Redistributions of any form whatsoever must retain the following
##    acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
## EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d42 7
a48 7
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
## NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
## LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.
d52 10
a61 5
## individuals on behalf of the Apache Group and was originally based
## on public domain software written at the National Center for
## Supercomputing Applications, University of Illinois, Urbana-Champaign.
## For more information on the Apache Group and the Apache HTTP server
## project, please see <http://www.apache.org/>.
d439 7
a445 1
    *-linux2)
d448 1
a448 1
	CFLAGS="$CFLAGS -DLINUX=2"
d624 1
a624 1
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
d793 12
a804 2
	OS='BeOS';
	CFLAGS="$CFLAGS -DBEOS"
d854 1
a854 1
	echo form at http://www.apache.org/bug_report.html. If you don\'t 
d1065 1
a1065 1
	*-linux2)
d1098 2
d1101 2
a1102 2
		2.[01234567])
		   LDFLAGS_SHLIB="-Bshareable -Bforcearchive"
d1106 1
a1106 1
		   LDFLAGS_SHLIB="-shared ${CFLAGS_SHLIB}"
a1109 2
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
d1418 1
a1418 1
		    echo "** a suggestion report at http://www.apache.org/bug_report.html:"
d1934 1
a1934 1
	V=1 R=3 P=14
@


1.12
log
@use "cc -shared" to link the modules on 2.8 and up.
Ok'd by beck@@, espie@@ and deraadt@@
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.11 2000/03/19 11:16:52 beck Exp $
d321 2
a322 2
	CFLAGS="$CFLAGS -DAIX=43 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
d326 7
d361 1
a361 1
    *-hp-hpux11.*)
d368 1
a368 1
    *-hp-hpux10.*)
d381 1
a381 1
    *-hp-hpux*)
d440 6
d485 1
a485 1
	    [234]*)
d515 1
a515 1
	CFLAGS="$CFLAGS -DMAC_OS_X_SERVER"
d518 3
a520 3
    *-apple-macos*)
	OS='Mac OS'
	CFLAGS="$CFLAGS -DMAC_OS"
a1036 1
	    LIBS_SHLIB='$(OSDIR)/mpe_dl_stub.o'	
d1060 1
a1060 1
	*-freebsd3*|*-freebsd4*)
d1121 1
a1121 1
	*-apple-rhapsody* | *-apple-macos* )
d1248 8
d1298 12
d1490 7
d1566 12
d1913 1
a1913 1
	V=1 R=3 P=12
d2144 3
@


1.11
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d2 1
a2 1
# $OpenBSD: Configure,v 1.10 2000/01/28 18:39:57 beck Exp $
d1063 1
d1065 9
a1073 1
	    LDFLAGS_SHLIB="-Bforcearchive -Bshareable"
@


1.10
log
@Change Apache config tools to not assume certain files are executable,
and thus allow us to build from cvs trees checked out read only. - basically
ensure we call shell scripts by using ${SHELL} instead of ./.
from leonard@@csee.uq.edu.au

Building diffs of this (And some other stuff in Makefile.tmpl) to send
to slemko to see if apache will buy it back.
@
text
@d2 1
a2 1
# $OpenBSD$
d681 11
a691 4
	OS='Amdahl UTS'
	CFLAGS="$CFLAGS -Xa -eft -DUTS21 -DUSEBCOPY"
	LIBS="$LIBS -lsocket -lbsd -la"
	DEF_WANTHSREGEX=yes
d1231 1
a1231 1
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
d1853 1
a1853 1
	V=1 R=3 P=11
@


1.9
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d2 1
d83 1
d207 1
a207 1
./helpers/mfhead . $file > Makefile
d227 10
a236 10
RULE_WANTHSREGEX=`./helpers/CutRule WANTHSREGEX $file`
RULE_STATUS=`./helpers/CutRule STATUS $file`
RULE_SOCKS4=`./helpers/CutRule SOCKS4 $file`
RULE_SOCKS5=`./helpers/CutRule SOCKS5 $file`
RULE_IRIXNIS=`./helpers/CutRule IRIXNIS $file`
RULE_IRIXN32=`./helpers/CutRule IRIXN32 $file`
RULE_PARANOID=`./helpers/CutRule PARANOID $file`
RULE_EXPAT=`./helpers/CutRule EXPAT $file`
RULE_SHARED_CORE=`./helpers/CutRule SHARED_CORE $file`
RULE_SHARED_CHAIN=`./helpers/CutRule SHARED_CHAIN $file`
a270 1
PLAT=`./helpers/GuessOS`
d272 1
d879 1
a879 1
	    if ./helpers/PrintPath -s $compilers; then
d913 1
a913 1
    CPP=`CPP="$TCPP"; export CPP CC; ./helpers/findcpp.sh`
d915 1
a915 1
    CPP=`export CC; ./helpers/findcpp.sh`
d943 1
a943 1
    ./helpers/checkheader.sh $header
d961 1
a961 1
	CPP=$CPP ./helpers/checkheader.sh sys/processor.h
d1458 1
a1458 1
	if ./helpers/PrintPath -s ranlib; then
d1474 1
a1474 1
	if ./helpers/TestCompile lib crypt; then
d1482 1
a1482 1
	if ./helpers/TestCompile lib nsl; then
d1486 1
a1486 1
	if TLIB=$TLIB ./helpers/TestCompile lib socket; then
d1504 1
a1504 1
	if ./helpers/TestCompile lib nsl; then
d1508 1
a1508 1
	if TLIB=$TLIB ./helpers/TestCompile lib socket; then
d1511 1
a1511 1
	if ./helpers/TestCompile func initgroups; then
d1728 1
a1728 1
    RULE_EAPI=`./helpers/CutRule EAPI $file`
d1824 1
a1824 1
	eval "`./helpers/slo.sh $LDFLAGS $LIBS $extra_ldflags $extra_libs`"
d2092 1
a2092 1
	    if ./helpers/TestCompile func shl_load; then
d2095 1
a2095 1
		if ./helpers/TestCompile lib dld; then
d2101 1
a2101 1
	    if ./helpers/TestCompile func dlopen; then
d2104 1
a2104 1
		if ./helpers/TestCompile lib dl; then
d2122 1
a2122 1
AP_TYPE_QUAD=`./helpers/TestCompile -r sizeof 'long long'`
d2141 1
a2141 1
AP_BYTE_ORDER=`./helpers/TestCompile -r byteorder`
d2157 1
a2157 1
AP_TYPE_OFF_T=`./helpers/TestCompile -r sizeof off_t`
d2162 1
a2162 1
AP_TYPE_LONG=`./helpers/TestCompile -r sizeof long`
d2184 1
a2184 1
AP_TYPE_VOID_P=`./helpers/TestCompile -r sizeof 'void *'`
d2258 1
a2258 1
   if ./helpers/TestCompile $vflag sanity; then
d2293 1
a2293 1
	./helpers/mfhead $dir $file > $dir/Makefile
d2295 1
a2295 1
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp $dir`:" >> $dir/Makefile
d2301 1
a2301 1
./helpers/mfhead modules $file > lib/Makefile
d2327 1
a2327 1
	./helpers/mfhead lib/$dir $file > lib/$dir/Makefile
d2329 1
a2329 1
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp lib/$dir`:" >> lib/$dir/Makefile
d2335 1
a2335 1
./helpers/mfhead modules $file > modules/Makefile
d2364 1
a2364 1
    ./helpers/mfhead $moddir $file > $moddir/Makefile
d2366 1
a2366 1
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp $moddir`:" >> $moddir/Makefile
@


1.8
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d85 2
a86 1
## to select an alternate Configuration file
d89 4
d281 2
a282 1
	OS='MPE/iX'
d284 2
a285 2
	LIBS="$LIBS -lsocket -lsvipc"
	LDFLAGS="$LDFLAGS -Xlinker \"-WL,cap=ia,ba,ph,pm;nmstack=1024000\""
d630 2
a631 1
	CC='c89 -XLLML -XLLMK -XL'
d788 8
d843 1
d911 1
a911 1
    CPP=`CC=$CC CPP=$TCPP ./helpers/findcpp.sh`
d913 1
a913 1
    CPP=`CC=$CC ./helpers/findcpp.sh`
d934 3
a936 1
CHECK_FOR_HEADERS="dlfcn.h dl.h bstring.h crypt.h unistd.h sys/resource.h sys/select.h sys/processor.h"
d941 1
a941 1
    CPP=$CPP ./helpers/checkheader.sh $header
d952 1
d1005 1
d1011 6
d1171 1
a1171 1
	    LDFLAGS_SHLIB="-shared -expect_unresolved '*' -s"
d1248 1
d1258 1
d1292 1
d1398 1
a1398 1
		CFLAGS="$CFLAGS -Aa -D_HIUX_SOURCE"
d1407 1
a1407 1
		CFLAGS="$CFLAGS -Aa -D_HPUX_SOURCE"
d1489 9
d1694 1
a1694 1
		if [ "x$ext" != "x$SHLIB_SUFFIX_NAME" ]; then
d1702 1
a1702 1
	if [ "x$ext" != "x$SHLIB_SUFFIX_NAME" ]; then
d1706 1
a1706 1
	if [ "x$ext" = "x$SHLIB_SUFFIX_NAME" -a "x$SHLIB_EXPORT_FILES" = "xyes" ]; then
d1844 1
a1844 1
	V=1 R=3 P=9
d1864 8
d2038 1
d2174 1
a2174 1
    echo "#ifndef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
d2196 1
a2196 1
    echo "#ifndef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
d2256 1
a2256 1
   if ./helpers/TestCompile sanity; then
d2259 17
a2275 8
   echo "** A test compilation with your Makefile configuration"
   echo "** failed. This is most likely because your C compiler"
   echo "** is not ANSI. Apache requires an ANSI C Compiler, such"
   echo "** as gcc. The above error message from your compiler"
   echo "** will also provide a clue."
   echo " Aborting!"
   exitcode=1
   exit 1
d2346 4
a2349 1
		(cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' \$@@) || exit 1; \\
@


1.7
log
@mod_ssl-2.2.3-1.3.4 (will require libssl-1.1 for https to work, but
mostly harmless otherwise).
@
text
@d67 1
d80 2
a81 1
SUBDIRS="ap main modules"
a94 6
  elif [ "x$1" = "x-make" ] ; then
    shift 1; makefile_tmpl=$1; shift 1
    if [ ! -r $makefile_tmpl ]; then
      echo "$makefile_tmpl does not exist or is not readable."
      exit 1
    fi
d113 1
a113 1
if ls -lt Configuration.tmpl $file | head -1 | \
d177 1
a177 1
if [ $file != "Configuration.apaci" ]
d227 1
a227 1
RULE_EAPI=`./helpers/CutRule EAPI $file`
d234 1
a234 1
if [ "$RULE_SHARED_CORE" = "yes" ]; then
d315 2
d336 2
a337 2
	CFLAGS="$CFLAGS -DOS2 -Zbsd-signals -Zbin-files -DTCPIPV4 -g"
	LDFLAGS="$LDFLAGS -Zexe"
d379 1
a379 1
	if [ "$RULE_IRIXNIS" = "yes" ]; then
d391 2
a392 2
	if [ "$RULE_IRIXN32" = "yes" ]; then
	    if [ "$RULE_IRIXNIS" = "yes" ]; then
d398 1
a398 1
	    if [ "$RULE_IRIXNIS" = "yes" ]; then
d410 1
a410 1
	if [ "$RULE_IRIXNIS" = "yes" ]; then
d442 5
d464 1
a464 1
	    [23]*)
a489 3
	CFLAGS_SHLIB='-dynamic -fno-common'
	LD_SHLIB='cc'
	LDFLAGS_SHLIB='-dynamiclib -undefined warning'
d494 6
a499 1
	CFLAGS="$CFLAGS -DRHAPSODY"
d608 1
d624 1
a624 1
	CC='c89 -XLLML -XLLMK'
a626 1
	LIBS="$LIBS -lsocket -lnsl -lc"
d704 31
a734 1
    *DYNIX*)
d736 3
a738 2
	OS='SEQUENT'
	CFLAGS="$CFLAGS -DSEQUENT"
d776 5
d832 1
a832 1
if [ "$RULE_WANTHSREGEX" = "default" ]; then
d959 1
d988 2
d994 1
d998 1
d1000 2
a1001 1
	    LDFLAGS_SHLIB="-Bshareable"
d1006 1
d1008 2
a1009 1
	    LDFLAGS_SHLIB="-Bshareable"
d1013 2
a1014 1
	*-freebsd3*)
d1016 2
a1017 1
	    LDFLAGS_SHLIB="-Bshareable"
d1030 1
d1034 10
a1043 4
	alpha-*-netbsd*|mips-*-netbsd*|powerpc-*-netbsd*)
	    CFLAGS_SHLIB="-fpic -DPIC"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_SHLIB_EXPORT=""
d1046 4
a1049 5
	*-netbsd*)
	    CFLAGS_SHLIB="-fpic -DPIC"
	    LDFLAGS_SHLIB="-Bshareable"
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
d1054 1
d1057 9
a1065 1
	*-apple-rhapsody*)
d1069 1
d1074 5
a1078 4
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
d1080 1
d1086 1
a1086 1
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
d1090 1
d1104 1
a1104 1
	    if [ "$RULE_IRIXN32" = "yes" ]; then
d1109 1
d1123 1
a1123 1
	    if [ "$RULE_IRIXN32" = "yes" ]; then
d1128 1
d1137 1
d1146 1
d1155 1
d1165 1
d1168 14
d1189 1
d1199 1
d1210 1
d1220 1
a1221 1
	    SHLIB_SUFFIX_NAME=sl
d1229 1
a1230 1
	    SHLIB_SUFFIX_NAME=sl
d1245 1
d1255 1
d1259 23
d1307 1
d1385 1
a1385 1
	if [ "$RULE_IRIXN32" = "yes" ]; then
d1395 1
a1395 1
	if [ "$RULE_IRIXN32" = "yes" ]; then
d1451 3
a1453 2
	if ./helpers/TestCompile lib socket; then
	    LIBS="$LIBS -lsocket"
d1455 9
d1466 9
d1483 1
a1483 1
if [ "$RULE_SOCKS4" = "yes" ]; then
d1502 1
a1502 1
if [ "$RULE_SOCKS5" = "yes" ]; then
d1645 1
a1645 1
		    if [ "$RULE_PARANOID" = "yes" ]; then
d1650 5
d1656 1
a1656 1
		if [ "$ext" != "so" ]; then
d1664 1
a1664 1
	if [ "$ext" != "so" ]; then
d1668 1
a1668 1
	if [ "$ext" = "so" -a "$SHLIB_EXPORT_FILES" = "yes" ]; then
d1678 1
a1678 1
if [ "$RULE_WANTHSREGEX" = "yes" ]; then
d1685 6
a1690 2
# Extended API support:
if [ "$RULE_EAPI" = "yes" ]; then
d1694 1
d1700 69
a1773 1
LIBS_SHLIB=''
d1775 1
a1775 1
    if [ "$RULE_SHARED_CHAIN" = "default" ] ; then
d1778 1
a1778 1
    if [ "$RULE_SHARED_CHAIN" = "yes" ]; then
d1793 1
a1793 1
    if [ "$RULE_SHARED_CORE" = "default" ] ; then
d1796 1
a1796 1
    if [ "$RULE_SHARED_CORE" = "yes" ]; then
d1806 2
a1807 2
	V=1 R=3 P=4
	if [ "$SHLIB_SUFFIX_DEPTH" = "0" ]; then
d1810 1
a1810 1
	if [ "$SHLIB_SUFFIX_DEPTH" = "1" ]; then
d1813 1
a1813 1
	if [ "$SHLIB_SUFFIX_DEPTH" = "2" ]; then
d1816 1
a1816 1
	if [ "$SHLIB_SUFFIX_DEPTH" = "3" ]; then
d1819 1
a1819 1
	if [ "$SHLIB_SUFFIX_DEPTH" = "all" ]; then
d1842 7
d1989 1
a1989 1
echo "SUBDIRS=$SUBDIRS" >> Makefile
d1993 1
d2018 1
d2031 11
d2068 87
d2164 1
a2164 1
	sed -e 's;[ 	]-;!-;g' -e 's/\\\"/\"/g' -e 's/\([^\\]\)"/\1/g'`
a2170 1
if [ -r $tmpconfig ]; then
a2185 1
fi
d2194 1
a2194 1
echo "LIBS1=$LIBS">> Makefile.config
d2205 1
a2205 1
if [ "$OS" = "TPF" ] ; then
d2232 1
a2232 1
MAKEDIRS="support main ap regex $OSDIR"
d2241 34
d2287 2
a2288 1
	@@for i in \$(MODULES); do \\
d2292 1
d2371 1
a2371 1
.SUFFIXES: .o .so
d2397 4
@


1.6
log
@Apache 1.3.4 merge
@
text
@d231 1
d1539 13
@


1.5
log
@Apache 1.3.3 merge + proxy_segv fix
@
text
@d3 1
a3 1
## Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
a56 15
# HISTORY:
#
# Apache configuration script, first cut --- rst.
# Don't like it?  Inspired to do something better?  Go for it.
#
# second cut --- jmj
# At this point we change what Configuration contains. It maintain
# contains comments, specific compiler flags, a list of included
# modules and "rules". These rules are used to allow Configure to
# be totally configured from Configuration.
#
# third cut --- rse
# Big cleanup of the generated Makefiles and remove of
# some old kludges

d117 9
a125 9
#if ls -lt Configuration.tmpl $file | head -1 | \
#  grep 'Configuration.tmpl' > /dev/null
#then
#  echo "Configuration.tmpl is more recent than $file;"
#  echo "Make sure that $file is valid and, if it is, simply"
#  echo "'touch $file' and re-run $0 again."
#  exitcode=1
#  exit 1
#fi
d152 1
a152 1
if [ ".$using_shlib" = . ]; then
a247 1
TARGET="httpd"
d273 5
a277 5
        OS="MiNT"
        CFLAGS="-DMINT"
        LIBS="$LIBS -lportlib -lsocket"
        DEF_WANTHSREGEX=yes
        ;;
d279 1
a279 1
        OS='MPE/iX'
d361 3
a363 3
               # Not a problem in 10.20.  Otherwise, who knows?
               CFLAGS="$CFLAGS -DSELECT_NEEDS_CAST"
               ;;	     
d375 1
a375 1
        # Note: We'd like to see patches to compile 64-bit, but for now...
d405 1
d472 2
d508 1
d595 20
a614 1
    BS2000*-sni-sysv4*)
d621 1
d623 1
a623 1
    *-sni-sysv4*)
d628 1
d721 5
a725 5
        OS='NCR MP/RAS'
        CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
        DEF_WANTHSREGEX=yes
        LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
        ;;
d727 12
a738 5
        OS='DRS6000'
        CFLAGS="$CFLAGS -DSVR4"
        DEF_WANTHSREGEX=yes
        LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
        ;;
d740 1
a740 1
        OS='Unknown and unsupported OS'
d755 2
a756 2
        echo wish to do the port yourself, please submit this output rather 
        echo than the patches. Thank you.
d766 7
d779 9
d814 2
a815 2
        # At this point, CC is not set in Configuration or above, so we
        # try to find one
d852 1
a852 1
if [ ".$TCPP" != . ]; then
d857 1
a857 1
if [ ".$TCPP" = . ]; then
d883 3
a885 3
        echo "#ifndef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#define HAVE_${name} 1" >>$AP_CONFIG_AUTO_H
        echo "#endif" >>$AP_CONFIG_AUTO_H
d887 3
a889 3
        echo "#ifdef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#undef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#endif" >>$AP_CONFIG_AUTO_H
d898 5
a902 5
        CPP=$CPP ./helpers/checkheader.sh sys/processor.h
        if [ $? -eq 0 ]; then
            CFLAGS="$CFLAGS -DAIX_BIND_PROCESSOR"
        fi
        ;;
d910 1
d921 14
d946 79
a1024 62
        *-linux1)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT="-rdynamic"
            ;;
        *-linux2)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT="-rdynamic"
            SHLIB_SUFFIX_DEPTH=0
            ;;
        *-freebsd*)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-openbsd*)
            CFLAGS_SHLIB="-fPIC"
            LDFLAGS_SHLIB="-Bforcearchive -Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        alpha-*-netbsd*|mips-*-netbsd*|powerpc-*-netbsd*)
            CFLAGS_SHLIB="-fpic -DPIC"
            LDFLAGS_SHLIB="-shared"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-netbsd*)
            CFLAGS_SHLIB="-fpic -DPIC"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-apple-rhapsody*)
            LD_SHLIB="cc"
            CFLAGS_SHLIB=""
            LDFLAGS_SHLIB="-bundle -undefined suppress"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=0
            ;;
        *-solaris2*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=1
            ;;
        *-sunos4*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */acc|acc ) CFLAGS_SHLIB="-pic" ;;
            esac
            LDFLAGS_SHLIB="-assert pure-text"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix32)
            case $CC in
                */gcc|gcc )
d1028 1
a1028 1
                */cc|cc )
d1032 11
a1042 11
            esac
            if [ "$RULE_IRIXN32" = "yes" ]; then
                LDFLAGS_SHLIB="$N32FLAG -shared"
            else
                LDFLAGS_SHLIB="-shared"
            fi
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix64)
            case $CC in
                */gcc|gcc )
d1046 1
a1046 1
                */cc|cc )
d1050 157
a1206 159
            esac
            if [ "$RULE_IRIXN32" = "yes" ]; then
                LDFLAGS_SHLIB="$N32FLAG -shared"
            else
                LDFLAGS_SHLIB="-shared"
            fi
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-shared"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-dec-osf*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="" ;;
            esac
            LDFLAGS_SHLIB="-shared -expect_unresolved '*' -s"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-unixware2)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-Bdynamic -G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
            ;;
        *-unixware21*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-Bdynamic -G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
            ;;
         *-sco5*)
             case $CC in
                 */gcc*|gcc* ) CFLAGS_SHLIB="-fpic" ;;
                 */cc*|cc*   ) CFLAGS_SHLIB="-KPIC" ;;
             esac
             LDFLAGS_SHLIB="-G"
             LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
             SHLIB_SUFFIX_DEPTH=1
             ;;
        RM*-sni-sysv4*)
            # MIPS hosts can take advantage of the LDFLAGS_SHLIB_EXPORT switch
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Blargedynsym"
            ;;
        *-sni-sysv4*)
            # Older SINIX machines must be linked as "shared core"-Apache
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=0
            DEF_SHARED_CORE=yes
            ;;
        *-sysv4*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            DEF_SHARED_CORE=yes
            ;;
        *-hp-hpux9.*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="+z" ;;
            esac
            LDFLAGS_SHLIB="-b"
            LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred"
            SHLIB_SUFFIX_NAME=sl
            ;;
        *-hp-hpux10.*|*-hp-hpux11.*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="+z" ;;
            esac
            LDFLAGS_SHLIB="-b"
            LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred -Wl,+s"
            SHLIB_SUFFIX_NAME=sl
            ;;
        *-ibm-aix*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="" ;;
            esac
            case $PLAT in
                *-ibm-aix4*)
                    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -bnoentry"
                    ;;
                *-ibm-aix*)
                    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -e _nostart"
                    ;;
            esac
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bI:\$(SRCDIR)/support/httpd.exp "
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bE:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
            LDFLAGS_SHLIB_EXPORT="-Wl,-bE:\$(SRCDIR)/support/httpd.exp"
            SHLIB_EXPORT_FILES=yes
            ;;
        *)
            ##  ok, no known explict support for shared objects
            ##  on this platform, but we give not up immediately.
            ##  We take a second chance by guessing the compiler
            ##  and linker flags from the Perl installation
            ##  if it exists.
            PERL=
            for dir in `echo $PATH | sed -e 's/:/ /g'`
            do
                if [ -f "$dir/perl5" ]; then
                    PERL="$dir/perl5"
                    break
                fi
                if [ -f "$dir/perl" ]; then
                    PERL="$dir/perl"
                    break
                fi
            done
            if [ ".$PERL" != . ]; then
                #   cool, Perl is installed on this platform...
                if [ ".`$PERL -V:dlsrc 2>/dev/null | grep dlopen`" != . ]; then
                    #   ...and actually uses the dlopen-style interface,
                    #   so we can guess the flags from its knowledge
                    CFLAGS_SHLIB="`$PERL -V:cccdlflags | cut -d\' -f2`"
                    LDFLAGS_SHLIB="`$PERL -V:lddlflags | cut -d\' -f2`"
                    LDFLAGS_SHLIB_EXPORT="`$PERL -V:ccdlflags | cut -d\' -f2`"
                    #   but additionally we have to inform the
                    #   user that we are just guessing the flags
                    echo ""
                    echo "** WARNING: We have no explicit knowledge about shared object"
                    echo "** support for your particular platform. But perhaps you have"
                    echo "** luck: We were able to guess the compiler and linker flags"
                    echo "** for creating shared objects from your Perl installation."
                    echo "** If they actually work, please send the following information"
                    echo "** for inclusion into later releases to new-httpd@@apache.org or make"
                    echo "** a suggestion report at http://www.apache.org/bug_report.html:"
                    echo "**     PLATFORM=$PLAT"
                    echo "**     CFLAGS_SHLIB=$CFLAGS_SHLIB"
                    echo "**     LDFLAGS_SHLIB=$LDFLAGS_SHLIB"
                    echo "**     LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT"
                    echo ""
                fi
            fi
            ;;
d1215 11
a1225 11
    if [ "x$TCFLAGS_SHLIB"  = x -a "x$CFLAGS_SHLIB"  = x  -a \
         "x$TLDFLAGS_SHLIB" = x -a "x$LDFLAGS_SHLIB" = x ]; then
        echo ""
        echo "** FAILURE: Sorry, no shared object support available."
        echo "** Either compile all modules statically (use AddModule instead"
        echo "** of SharedModule in the Configuration file) or at least provide"
        echo "** us with the appropriate compiler and linker flags via the"
        echo "** CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT entries"
        echo "** in the Configuration file."
        echo ""
        exit 1
d1303 3
a1305 3
if [ ".$RANLIB" = . ]; then
    if [ ".$TRANLIB" != . ]; then
        RANLIB=$TRANLIB
d1307 5
a1311 5
        if ./helpers/PrintPath -s ranlib; then
            RANLIB="ranlib"
        else
            RANLIB="true"
        fi
d1349 1
a1349 1
    if [ ".`grep EXTRA_ Makefile | grep lsocks`" = . ]; then
d1353 3
a1355 3
        *-solaris2* )
            LIBS="$LIBS -lresolv"
            ;;
d1368 2
a1369 2
    if [ ".`grep EXTRA_ Makefile | grep lsocks5`" = . ]; then
        LIBS="$LIBS -L/usr/local/lib -lsocks5"
d1372 3
a1374 3
        *-solaris2* )
            LIBS="$LIBS -lresolv"
            ;;
d1398 1
a1398 1
##  2 If extension if .module, go to D1
d1475 3
a1477 3
	if [ x$ext = x$modfile ]; then ext=o; modbase=$modfile; modfile=$modbase.o; fi
	if [ x$ext = x ] ; then ext=o; modbase=$modfile; fi
	if [ x$ext = xc ] ; then ext=o; fi
d1485 1
a1485 1
		# Guess module structure name in case there is not
d1512 1
a1512 1
		if [ $ext != so ]; then
d1520 1
a1520 1
	if [ $ext != so ]; then
d1524 1
a1524 1
	if [ $ext = so -a .$SHLIB_EXPORT_FILES = .yes ]; then
d1545 2
a1546 2
    if [ ".$RULE_SHARED_CHAIN" = .default ] ; then
        RULE_SHARED_CHAIN=$DEF_SHARED_CHAIN
d1548 8
a1555 8
    if [ ".$RULE_SHARED_CHAIN" = .yes ]; then
        echo " + enabling DSO files to be linked against others"
        #   determine libraries which can be safely linked
        #   to our DSO files, i.e. PIC libraries and shared libraries
        extra_ldflags="`grep EXTRA_LDFLAGS= Makefile.config`"
        extra_libs="`grep EXTRA_LIBS= Makefile.config`"
        eval "`./helpers/slo.sh $LDFLAGS $LIBS $extra_ldflags $extra_libs`"
        LIBS_SHLIB="$SLO_DIRS_PIC $SLO_LIBS_PIC $SLO_DIRS_DSO $SLO_LIBS_DSO"
d1563 2
a1564 2
    if [ ".$RULE_SHARED_CORE" = .default ] ; then
        RULE_SHARED_CORE=$DEF_SHARED_CORE
d1566 26
a1591 26
    if [ ".$RULE_SHARED_CORE" = .yes ]; then
        echo " + enabling generation of Apache core as DSO"
        #    shuffle compiler flags from shlib variant to standard
        CFLAGS="$CFLAGS $CFLAGS_SHLIB"
        CFLAGS_SHLIB=""
        #    indicate that Rule SHARED_CORE is active
        CFLAGS="$CFLAGS -DSHARED_CORE"
        #    select the special subtarget for shared core generation
        SUBTARGET=target_shared
        #    determine additional suffixes for libhttpd.so
        V=1 R=3 P=3
        if [ ".$SHLIB_SUFFIX_DEPTH" = .0 ]; then
            SHLIB_SUFFIX_LIST=""
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .1 ]; then
            SHLIB_SUFFIX_LIST="$V"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .2 ]; then
            SHLIB_SUFFIX_LIST="$V.$R"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .3 ]; then
            SHLIB_SUFFIX_LIST="$V.$R.$P"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .all ]; then
            SHLIB_SUFFIX_LIST="$V $V.$R $V.$R.$P"
        fi
d1601 1
a1601 1
        echo "CFLAGS_SHLIB=$CFLAGS_SHLIB -DSHARED_MODULE" >> Makefile.config
d1604 1
a1604 1
        echo "LD_SHLIB=$LD_SHLIB" >> Makefile.config
d1607 1
a1607 1
        echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB" >> Makefile.config
d1610 1
a1610 1
        echo "LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT" >> Makefile.config
d1715 1
a1715 1
	        if (tdir == dir) 
a1751 1
echo "TARGET=$TARGET" >> Makefile
a1758 8
## Now add -DSERVER_SUBVERSION if $SUBVERSION is set
##
if [ "x$SUBVERSION" != "x" ] ; then
        SUBVERSION=`echo $SUBVERSION | sed 's/^ +//'`
	CFLAGS="$CFLAGS -DSERVER_SUBVERSION=\\\"$SUBVERSION\\\""
fi

####################################################################
d1763 1
a1763 1
if [ ".`make -v 2>/dev/null | grep 'GNU Make'`" = . ]; then
d1774 7
a1780 11
echo "CFLAGS1=$CFLAGS">> Makefile.config
echo "OSDIR=\$(SRCDIR)/$OSDIR">> Makefile.config
echo "INCDIR=\$(SRCDIR)/include" >>Makefile.config
echo "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)">> Makefile.config
echo "INCLUDES1=$INCLUDES">> Makefile.config
echo "LIBS_SHLIB=$LIBS_SHLIB">> Makefile.config
echo "LDFLAGS1=$LDFLAGS">> Makefile.config
echo "MFLAGS_STATIC=$MFLAGS_STATIC">> Makefile.config
echo "REGLIB=$REGLIB">> Makefile.config
echo "RANLIB=$RANLIB">> Makefile.config
echo "SHELL=$SHELL">> Makefile.config
d1789 21
a1809 21
        *-ibm-aix* )
            DL_LIB="-lld"
            ;;
        *-hp-hpux*)
            if ./helpers/TestCompile func shl_load; then
                :
            else
                if ./helpers/TestCompile lib dld; then
                    DL_LIB="-ldld"
                fi
            fi
            ;;
        * )
            if ./helpers/TestCompile func dlopen; then
                :
            else
                if ./helpers/TestCompile lib dl; then
                    DL_LIB="-ldl"
                fi
            fi
            ;;
d1811 3
a1813 3
    if [ ".$DL_LIB" != . ]; then
        LIBS="$LIBS $DL_LIB"
        echo " + using $DL_LIB for vendor DSO support"
d1824 8
a1831 3
touch $tmpconfig ;
for cflag in $CFLAGS; do
	echo $cflag | sed 's/\\\"/\"/g' >>$tmpconfig ;
d1833 2
d1836 5
a1840 5
	/^-D.*/ {
		define = substr($1, 3, length($1)-2)
		split(define, parts, "=")
		printf ("\n/* build flag: %s */\n", $0)
		printf ("#ifndef %s\n#define %s %s\n#endif\n", parts[1],parts[1],parts[2])
d1842 7
d1850 1
d1869 2
a1870 2
echo " + doing sanity check on compiler and options"
if ./helpers/TestCompile sanity; then
d1873 4
d1885 1
d1967 1
a1967 1
	    if [ ".$OBJS" != . ]; then
d1985 1
a1985 1
            }'
d2021 1
a2021 1
	           -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
@


1.4
log
@Apache Configure script can bomb if Configuration.tmpl newer than
Configuration. Modify makefile not to care and disable offending test
in Configure.
@
text
@d621 6
d717 6
d1514 1
a1514 1
        V=1 R=3 P=2
d1555 1
a1555 1
cat $tmpfile | sed 's/_module//' | awk >modules.c '
d1603 3
a1605 1
    }'
@


1.3
log
@minor change makes building in tree much easier.
@
text
@d132 9
a140 9
if ls -lt Configuration.tmpl $file | head -1 | \
  grep 'Configuration.tmpl' > /dev/null
then
  echo "Configuration.tmpl is more recent than $file;"
  echo "Make sure that $file is valid and, if it is, simply"
  echo "'touch $file' and re-run $0 again."
  exitcode=1
  exit 1
fi
@


1.2
log
@make it configure itself w/o 'x' on helpers/*
@
text
@d2 54
a55 1
trap 'rm -f $tmpfile; exit' 0 1 2 3 15
d57 2
d60 2
a61 2
# Dont like it?  Inspired to do something better?  Go for it.

d66 1
a66 4
# be totally configured from Configuration
#
# Uses 3 supplemental scripts located in ./helpers: CutRule,
# GuessOS and PrintPath
d68 20
a87 1

d90 10
a99 2
makefile_tmpl=Makefile.tmpl

d105 1
d115 3
a117 2
    echo "Ignoring command line option '$1'"
    shift 1
a119 3
echo "Using config file: $file"
echo "Using Makefile template file: $makefile_tmpl"

d122 3
d128 15
a142 2
# First, strip comments and blank lines and then change Rules to comments
# and then remove whitespace before Module declarations
d144 8
d155 5
a159 1
 sed 's/^Rule[ 	]*/##Rule:/' | \
d161 4
a164 1
 sed 's/^[        ]*%Module/%Module/' > $tmpfile
d166 4
a169 1
# Check for syntax errors...
d171 3
d175 3
a177 1
   | grep -v = > /dev/null
d179 9
a187 6
   echo "Syntax error --- The configuration file is used only to"
   echo "define the list of included modules or to set Makefile"
   echo "options or Configure rules, and I don't see that at all:"
   egrep -v '^Module[ 	]+[A-Za-z0-9_]+[ 	]+[^ 	]+$' $tmpfile | \
     grep -v =
   exit 1
d190 23
a212 1
# File is OK --- make backup copies of things and then get the new ones:
d214 41
a254 88
if [ -f Makefile ] ; then mv Makefile Makefile.bak; fi
if [ -f modules.c ] ; then mv modules.c modules.c.bak; fi

sed -e 's/_module//' $tmpfile | awk >modules.c '\
   BEGIN { modules[n++] = "core" ; pmodules[pn++] = "core"} \
   /^Module/ { modules[n++] = $2 ; pmodules[pn++] = $2 } \
   /^%Module/ { pmodules[pn++] = $2 } \
   END { print "/* modules.c --- automatically generated by Apache"; \
	 print " * configuration script.  DO NOT HAND EDIT!!!!!"; \
	 print " */"; \
	 print ""; \
	 print "#include \"httpd.h\""; \
	 print "#include \"http_config.h\""; \
	 print ""; \
	 for (i = 0; i < pn; ++i) { \
	     printf ("extern module %s_module;\n", pmodules[i]); \
	 } \
	 print ""; \
	 print "module *prelinked_modules[] = {"; \
	 for (i = 0; i < n; ++i) { \
	     printf "  &%s_module,\n", modules[i]; \
	 } \
	 print "  NULL"; \
	 print "};"; \
	 print "module *preloaded_modules[] = {"; \
	 for (i = 0; i < pn; ++i) { \
	     printf "  &%s_module,\n", pmodules[i]; \
	 } \
	 print "  NULL"; \
	 print "};"; \
   }'

#
# Add module set only
#
echo "#" > Makefile
echo "# Makefile automatically generated from $makefile_tmpl" >> Makefile
echo "# and configuration file by Apache config script." >> Makefile
echo "# Hand-edited changes will be lost if the config script" >> Makefile
echo "# is re-run" >> Makefile
echo "#" >> Makefile

awk >>Makefile <$tmpfile '\
   /^Module/ { modules[n++] = $3 } \
   /^%Module/ { modules[n++] = $3 } \
   END { print "MODULES=\\"; \
	 for (i = 0; i < n; ++i) { \
	     if (i < n-1) printf ("  %s \\\n", modules[i]); \
	     else printf ("  %s\n", modules[i]); \
	 } \
	 print "" \
       }'
#
# Now add Makefile additions and Rules
#
awk >>Makefile <$tmpfile '\
    BEGIN { print "# Makefile options inherited from Configure"; \
	    print "###############"; \
	  } \
    /\=/ { print } \
    END { print "###############"; }'

#
# Extract the rules.
#
RULE_WANTHSREGEX=`sh ./helpers/CutRule WANTHSREGEX $file`
RULE_STATUS=`sh ./helpers/CutRule STATUS $file`
RULE_SOCKS4=`sh ./helpers/CutRule SOCKS4 $file`
RULE_IRIXNIS=`sh ./helpers/CutRule IRIXNIS $file`

#
# Now we determine the OS/Platform automagically, thanks to
# GuessOS, a home-brewed OS-determiner ala config.guess
#
# We adjust CFLAGS, LIBS, LFLAGS and INCLUDES (and other Makefile
# options) as required. Setting CC and OPTIM here has no effect
# if they were set in Configure.
#
# Also, we set DEF_WANTHSREGEX and to the appropriate
# value for each platform.
#
# As more PLATFORMs are added to Configuration.tmpl, be sure to
# add the required lines below.
#

PLAT=`sh ./helpers/GuessOS`

# Preset DBM_LIB. Can be overridden on a per-platform basis.
d256 4
d261 23
a283 25

#
# Look for ranlib. Do it early in case we want to override it below
#
if sh ./helpers/PrintPath -s ranlib; then
    RANLIB="ranlib"
else
    RANLIB="true"
fi

#
# We now look for popular compilers. As with ranlib, we
# do this early because some options may depend
# on which compiler we use/find
#
for compilers in "gcc" "cc" "acc" "c89"
do
    lookedfor="$lookedfor $compilers"
    if sh ./helpers/PrintPath -s $compilers; then
	COMPILER="$compilers"
    	break
    fi
done

#
d285 1
d288 6
d297 3
a299 2
	LIBS="$LIBS -lsocket"
	LFLAGS="$LFLAGS -Xlinker \"-WL,cap=ia,ba,ph,pm;nmstack=1024000\""
d303 1
a303 1
	CFLAGS="$CFLAGS -DAUX -D_POSIX_SOURCE"
d305 1
a305 1
	LFLAGS="$LFLAGS -s"
d309 2
a310 2
    	OS='IBM AIX PS/2'
	CFLAGS="$CFLAGS -DAIX -U__STR__ -DUSEBCOPY"
d313 22
a334 4
    *-ibm-aix[1-3].*|*-ibm-aix4.[0-1])
        OS='IBM AIX < v4.2'
        CFLAGS="$CFLAGS -DAIX -DNEED_RLIM_T -U__STR__"
        ;;
d336 4
a339 4
        OS='IBM AIX >= 4.2'
        CFLAGS="$CFLAGS -DAIX -U__STR__"
	LFLAGS="$LFLAGS -lm"
        ;;
d350 1
d353 3
a355 2
	CFLAGS="$CFLAGS -Zbsd-signals -Zbin-files -DTCPIPV4 -g"
	LIBS="$LIBS -lsocket -llibufc -lbsd"
d357 1
d362 7
a368 5
	# if we're using the HIUX compiler, add a few flags.
	if [ "$CC" = "cc" ] || [ "$COMPILER" = "cc" ]; then
	    CFLAGS="$CFLAGS -Aa -D_HIUX_SOURCE"
	    OPTIM=" "
	fi
d373 9
a381 5
	# if we're using the HPUX compiler, add a few flags.
	if [ "$CC" = "cc" ] || [ "$COMPILER" = "cc" ]; then
	    CFLAGS="$CFLAGS -Aa -D_HPUX_SOURCE"
	    OPTIM=" "
	fi
d386 2
a387 4
	if [ "$CC" = "cc" ] || [ "$COMPILER" = "cc" ]; then
	    CFLAGS="$CFLAGS -Aa -D_HPUX_SOURCE"
	    OPTIM=" "
	fi
d391 1
a391 1
# Note: We'd like to see patches to compile 64-bit, but for now...
a393 2
	CFLAGS="$CFLAGS -n32"
	LFLAGS="$LFLAGS -n32"
d397 1
a397 1
	    OS='SGI IRIX w/NIS'
d401 1
a401 1
	    OS='SGI IRIX'
d405 18
d435 1
a435 7
    alpha-*-linux2)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=2"
	LIBS="$LIBS -lcrypt"
	;;
    sparc-*-linux2)
a440 5
    *-linux2)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=2"
	;;
d446 5
a450 4
    *-lynx-lynxos*)
	OS='LynxOS'
	CFLAGS="$CFLAGS -DLYNXOS"
	LIBS="$LIBS -lbsd -ldes -lc_p"
d456 1
d461 1
d463 3
a465 2
    *486-*-freebsd*|*486-*-netbsd*)
	OS='FreeBSD/NETBSD on 486'
d468 2
d471 9
a479 2
    *-freebsd*|*-netbsd*)
	OS='FreeBSD/NetBSD'
d482 1
d489 2
a490 1
	OS='NeXT'
d493 15
a507 2
	RANLIB="sleep 5; /bin/ranlib"
	# ranlib on most NeXTs sets the time wrong. 5 secs wait does much good
d517 1
a517 1
	LIBS="$LIBS -N128k -lsocket"
d523 1
a523 1
	LIBS="$LIBS -N128k -lsocket"
d530 1
a530 1
	LFLAGS="$LFLAGS -posix"
d543 1
a543 4
	LIBS="$LIBS -lsocket -lmalloc -lprot"
	if [ "$CC" = "cc" ] || [ "$COMPILER" = "cc" ]; then
	    OSBPRINTF="-K noinline"
	fi
d546 6
d553 3
a555 2
	OS='Solaris 2'
	CFLAGS="$CFLAGS -DSOLARIS2"
d558 8
a565 1
	DEF_WANTHSREGEX=yes
d574 2
a575 2
	OS='Unixware'
	CFLAGS="$CFLAGS -DSVR4 -DNO_LINGCLOSE"
d580 3
a582 3
	OS='Unixware'
	CFLAGS="$CFLAGS -DSVR4 -DNO_LINGCLOSE"
	LIBS="$LIBS -lsocket -lnsl -lcrypt"
d585 3
a587 3
	OS='Unixware 2.1.1'
	CFLAGS="$CFLAGS -DUW"
	LIBS="$LIBS -lsocket -lnsl -lcrypt"
d590 9
a598 3
	OS='Unixware 2.1.2'
	CFLAGS="$CFLAGS -DUW"
	LIBS="$LIBS -lsocket -lnsl -lcrypt"
d607 8
d617 1
a617 1
	CFLAGS="$CFLAGS -DSVR4 -D_XPG_IV -DUSE_MMAP_FILES"
d633 6
d644 6
d652 1
a652 1
	CFLAGS="$CFLAGS -Xa -eft -DUTS21"
d654 1
a660 3
	if [ "$CC" = "cc" ] || [ "$COMPILER" = "cc" ]; then
	    CFLAGS="$CFLAGS -std"
	fi
d664 1
a664 1
	LFLAGS="$LFLAGS -Xlstack=0x14000 -Xldelcsect"
d668 1
a668 1
	LFLAGS="$LFLAGS -stack 0x14000"
d683 28
d712 1
d726 8
a733 6
	echo form at http://www.apache.org/bugdb.cgi - or, if your browser
	echo isn\'t forms-capable, you can send them via email to 
	echo apache-bugs@@apache.org.  If you don\'t wish to do the port
	echo yourself, please submit this output rather than the patches.
	echo Thank you
	exit 1
d737 9
a745 3
#
# See if we need to override WANTHSREGEX
#
d748 1
a748 1
		RULE_WANTHSREGEX=no
d754 7
a760 13
# Show the final values of the rules

echo "###############" > Makefile.config
echo "# Platform: $OS" >> Makefile.config
echo "# Final Rules:" >> Makefile.config
echo "#  Rule WANTHSREGEX=$RULE_WANTHSREGEX" >> Makefile.config
echo "###############" >> Makefile.config

#
# Now that _that's_ done, get on with it
#

echo " + configured for $OS platform"
d762 2
d765 1
a765 6
# Now we determine the C-compiler and optimization level
# to use. Settings of CC and OPTIM in Configuration have
# the highest precedence; next comes any settings from
# the above "OS-specific" section. If still unset,
# then we use the "found" location of COMPILERS above
# and set a "safe" optimization level
d767 2
a768 4

if egrep "^CC[ 	]*=" Makefile > /dev/null; then
    CC=""	# clear it just in case
else
d770 11
a780 1
    	if [ "x$COMPILER" = "x" ]; then
d784 1
d792 18
a809 5
#
# Ditto for optimization
#
if  egrep "^OPTIM[ 	]*=" Makefile > /dev/null; then
    OPTIM=""	# ditto
d811 35
a845 2
    if [ "x$OPTIM" = "x" ]; then
	OPTIM="-O2"
d847 287
a1133 1
    echo " + setting C compiler optimization-level to $OPTIM"
d1136 16
a1151 8
#
# Are they using the status monitor module? If so, check
# for STATUS rule...
#
STAT_MOD="mod_status"
if grep "$STAT_MOD" Makefile > /dev/null; then
    if [ "$RULE_STATUS" = "yes" ]; then
	CFLAGS="$CFLAGS -DSTATUS"
d1155 69
a1223 5
#
# Are they using dbm auth? If so, add DBM library.
#
if grep mod_auth_dbm Makefile > /dev/null; then
    LIBS="$LIBS $DBM_LIB"
d1226 13
a1238 6
#
# Now HS's POSIX regex implementation if needed/wanted
#
if [ "$RULE_WANTHSREGEX" = "yes" ]; then
    REGLIB="regex/libregex.a"
    INCLUDES="$INCLUDES -Iregex"
d1241 29
a1269 6
#
# Now SOCKS4.
#  NOTE: We assume that if they are using SOCKS4, then they've
#   adjusted EXTRA_LIBS and/or EXTRA_LFLAGS as required,
#   otherwise we assume "-L/usr/local/lib -lsocks"
#
d1271 2
a1272 1
    # Set flag and check Makefile for -lsocks line
d1275 2
a1276 2
    if [ "$OS" = "Solaris 2" ]; then
	LIBS="$LIBS -lresolv"
d1278 259
a1536 3
    if grep "EXTRA_" Makefile | grep "\-lsocks" > /dev/null; then : ;
    else
	LIBS="$LIBS -L/usr/local/lib -lsocks"
d1540 149
a1688 6
#
# Good enough
#
echo  >> Makefile
if [ "x$CC" != "x" ]; then
    echo "CC=$CC" >> Makefile.config
d1690 10
a1699 2
if [ "x$OPTIM" != "x" ]; then
    echo "OPTIM=$OPTIM" >> Makefile.config
d1701 6
d1708 3
d1712 3
a1714 3
echo "LIBS1=$LIBS">> Makefile.config
echo "LFLAGS1=$LFLAGS">> Makefile.config
echo "BROKEN_BPRINTF_FLAGS=$OSBPRINTF">> Makefile.config
a1717 2
echo >> Makefile.config
echo "#### End of Configure created section ####">> Makefile.config
d1719 34
d1754 49
a1802 19
# Now (finish) creating the makefiles
cat Makefile.config >> Makefile
sed -e "s#@@@@Configuration@@@@#$file#" "$makefile_tmpl" >>Makefile
awk >>Makefile <$tmpfile \
   '($1 == "Module" && $3 ~ /modules\//) { printf "%s: modules/last-built ; @@cat /dev/null\n\n", $3, $3}'
#cat Makefile.config ../support/Makefile.tmpl > ../support/Makefile

cat << EOF > modules/Makefile
# 
# Simple Makefile for modules in src/modules.
# Generated by src/Configure according to rules in src/Configuration;
# hand-edit at your own risk!
# 

SHELL=$SHELL
EOF

if [ "$RULE_WANTHSREGEX" = "yes" ]; then
    INCLUDES2="-I../../regex"
d1805 16
a1820 2
echo "INCLUDES2=$INCLUDES2">> modules/Makefile
echo "MOD_CFLAGS=\$(INCLUDES2) \$(AUX_CFLAGS)">> modules/Makefile
d1822 18
a1839 4
awk >> modules/Makefile < $tmpfile '\
   BEGIN {printf "MODULES="} \
   ($1 == "Module" && $3 ~ /modules\//) {split ($3, pp, "/"); printf "%s ", pp[2]} \
   END {printf "\n"}'
d1841 1
a1841 4
awk >> modules/Makefile < $tmpfile '\
   BEGIN {printf "CLEANERS="} \
   ($1 == "Module" && $3 ~ /modules\//) {split ($3, pp, "/"); printf "%s_clean ", pp[2]} \
   END {printf "\n"}'
d1843 98
a1940 1
cat << EOF >> modules/Makefile
d1942 2
a1943 10
default: \$(MODULES)
	@@echo "Done building module subdirectories"

clean: \$(CLEANERS)
	@@echo "Done cleaning module subdirectories"

placeholder \$(MODULES): ForceMe
	(cd \$@@; \$(MAKE) CC='\$(CC)' AUX_CFLAGS='\$(MOD_CFLAGS)' RANLIB='\$(RANLIB)')

ForceMe:
d1945 4
d1950 1
d1952 1
a1952 3
awk >>modules/Makefile <$tmpfile \
   '($1 == "Module" && $3 ~ /modules\//) { split ($3, pp, "/"); \
   printf "%s_clean:\n\t(cd %s; $(MAKE) clean)\n\n", pp[2], pp[2]}'
@


1.1
log
@Initial revision
@
text
@d137 4
a140 4
RULE_WANTHSREGEX=`./helpers/CutRule WANTHSREGEX $file`
RULE_STATUS=`./helpers/CutRule STATUS $file`
RULE_SOCKS4=`./helpers/CutRule SOCKS4 $file`
RULE_IRIXNIS=`./helpers/CutRule IRIXNIS $file`
d157 1
a157 1
PLAT=`./helpers/GuessOS`
d166 1
a166 1
if ./helpers/PrintPath -s ranlib; then
d180 1
a180 1
    if ./helpers/PrintPath -s $compilers; then
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d2 1
a2 54
## ====================================================================
## Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
##
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer. 
##
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in
##    the documentation and/or other materials provided with the
##    distribution.
##
## 3. All advertising materials mentioning features or use of this
##    software must display the following acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## 4. The names "Apache Server" and "Apache Group" must not be used to
##    endorse or promote products derived from this software without
##    prior written permission. For written permission, please contact
##    apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache"
##    nor may "Apache" appear in their names without prior written
##    permission of the Apache Group.
##
## 6. Redistributions of any form whatsoever must retain the following
##    acknowledgment:
##    "This product includes software developed by the Apache Group
##    for use in the Apache HTTP server project (http://www.apache.org/)."
##
## THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
## EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
## ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
## NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
## LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
## STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
## OF THE POSSIBILITY OF SUCH DAMAGE.
## ====================================================================
##
## This software consists of voluntary contributions made by many
## individuals on behalf of the Apache Group and was originally based
## on public domain software written at the National Center for
## Supercomputing Applications, University of Illinois, Urbana-Champaign.
## For more information on the Apache Group and the Apache HTTP server
## project, please see <http://www.apache.org/>.
a3 2
# HISTORY:
#
d5 2
a6 2
# Don't like it?  Inspired to do something better?  Go for it.
#
d11 4
a14 1
# be totally configured from Configuration.
d16 1
a16 20
# third cut --- rse
# Big cleanup of the generated Makefiles and remove of
# some old kludges

# Uses 6 supplemental scripts located in ./helpers:
#	CutRule: Determines the value for a specified Rule
#	GuessOS: Uses uname to determine OS/platform
#	PrintPath: generic "type" or "whence" replacement
#	TestCompile: Can check for libs and if $(CC) is ANSI
#	 (i.e., a simple "sanity check")
#	mfhead:
#	fp2rp:
#	slo.sh:

exitcode=0
trap 'rm -f $tmpfile $tmpfile2 $tmpfile3 $tmpconfig $awkfile; exit $exitcode' 0 1 2 3 15

####################################################################
## Set up some defaults
##
d19 2
a20 10
tmpfile2=$tmpfile.2
tmpfile3=$tmpfile.3
awkfile=$tmpfile.4
tmpconfig=$tmpfile.5
SUBDIRS="ap main modules"

####################################################################
## Now handle any arguments, which, for now, is -file
## to select an alternate Configuration file
##
d26 6
a31 1
      exitcode=1
d35 2
a36 3
    echo "ERROR: Bad command line option '$1'"
    echo "  Please read the file INSTALL."
    exit 1
d39 3
a43 17
  echo "Please copy Configuration.tmpl to $file, edit it for your platform,"
  echo "and re-run $0 again."
  exitcode=1
  exit 1
fi

####################################################################
## Now see if Configuration.tmpl is more recent than $file. If
## so, then we complain and bail out
##
if ls -lt Configuration.tmpl $file | head -1 | \
  grep 'Configuration.tmpl' > /dev/null
then
  echo "Configuration.tmpl is more recent than $file;"
  echo "Make sure that $file is valid and, if it is, simply"
  echo "'touch $file' and re-run $0 again."
  exitcode=1
d47 2
a48 1
echo "Using config file: $file"
a49 8
####################################################################
## From the Configuration file, create a "cleaned-up" version
## that's easy to scan
##

# Strip comments and blank lines, remove whitespace around
# "=" assignments, change Rules to comments and then remove whitespace
# before Module declarations
d53 1
a53 5
 sed 's/[ 	]*=[ 	]*/=/' | \
 sed '/^Rule[ 	]*/d' | \
 sed 's/^[ 	]*AddModule/AddModule/' | \
 sed 's/^[ 	]*%AddModule/%AddModule/' | \
 sed 's/^[ 	]*SharedModule/SharedModule/' | \
d55 1
a55 1
 sed 's/^[ 	]*%Module/%Module/' > $tmpfile
d57 1
a57 2
# Determine if shared objects are used
using_shlib=`grep  '^SharedModule' $tmpfile >/dev/null && echo 1`
a58 8
# But perhaps later via apxs when just mod_so is compiled in!
if [ ".$using_shlib" = . ]; then
    using_shlib=`grep  '^AddModule modules/standard/mod_so.o' $tmpfile >/dev/null && echo 1`
fi

# Only "assignment" ("=") statements and Module lines
# should be left at this point. If there is other stuff
# we bail out
d60 1
a60 3
 | egrep -v '^%?AddModule[ 	]+[^ 	]+$' \
 | egrep -v '^SharedModule[ 	]+[^ 	]+$' \
 | grep -v = > /dev/null
d62 6
a67 9
  echo "Syntax error --- The configuration file is used only to"
  echo "define the list of included modules or to set Makefile"
  echo "options or Configure rules, and I don't see that at all:"
  egrep -v '^%?Module[ 	]+[A-Za-z0-9_]+[ 	]+[^ 	]+$' $tmpfile \
   | egrep -v '^%?AddModule[ 	]+[^ 	]+$'  \
   | egrep -v '^%?SharedModule[ 	]+[^ 	]+$'  \
   | grep -v =
  exitcode=1
  exit 1
d70 63
a132 23
####################################################################
## If we find the directory /usr/local/etc/httpd and there is
## no HTTPD_ROOT flag set in the Configuration file we assume
## that the user was using the old default root directory
## and issue a notice about it.
##
if [ $file != "Configuration.apaci" ]
then
  if [ -d /usr/local/etc/httpd/ ]
  then
    if egrep '^EXTRA_CFLAGS.*HTTPD_ROOT' $file >/dev/null
    then
      :
    else
      echo " | Please note that the default httpd root directory has changed"
      echo " | from '/usr/local/etc/httpd/' to '/usr/local/apache/.'"
      echo " | You may add '-DHTTPD_ROOT=\\\"/usr/local/etc/httpd\\\"' to EXTRA_CFLAGS"
      echo " | in your Configuration file (and re-run Configure) or start"
      echo " | httpd with the option '-d /usr/local/etc/httpd' if you still"
      echo " | want to use the old root directory for your server."
    fi
  fi
fi
d134 3
a136 25
####################################################################
## Start creating the Makefile. We add some comments and
## then fold in the modules that were included in Configuration
##
echo "Creating Makefile"
./helpers/mfhead . $file > Makefile

####################################################################
## Now we create a stub file, called Makefile.config, which
## just includes those assignments (eg: CC=gcc) in Configuration
##
awk >Makefile.config <$tmpfile '
    BEGIN {
	print "##"
	print "##  Inherited Makefile options from Configure script"
	print "##  (Begin of automatically generated section)"
	print "##"
	print "SRCDIR=."
    } 
    /\=/ { print } 
    '

####################################################################
## Extract the rules.
##
a139 1
RULE_SOCKS5=`./helpers/CutRule SOCKS5 $file`
d141 29
a169 10
RULE_IRIXN32=`./helpers/CutRule IRIXN32 $file`
RULE_PARANOID=`./helpers/CutRule PARANOID $file`
RULE_SHARED_CORE=`./helpers/CutRule SHARED_CORE $file`
RULE_SHARED_CHAIN=`./helpers/CutRule SHARED_CHAIN $file`

####################################################################
## Rule SHARED_CORE implies required DSO support
##
if [ "$RULE_SHARED_CORE" = "yes" ]; then
	using_shlib=1
d172 15
a186 28
####################################################################
## Preset some "constants";
## can be overridden on a per-platform basis below.
##
DBM_LIB="-ldbm"
DB_LIB="-ldb"
SHELL="/bin/sh"
TARGET="httpd"
SUBTARGET="target_static"
SHLIB_SUFFIX_NAME=""
SHLIB_SUFFIX_LIST=""
CAT="cat"

####################################################################
## Now we determine the OS/Platform automagically, thanks to
## GuessOS, a home-brewed OS-determiner ala config.guess
##
## We adjust CFLAGS, LIBS, LDFLAGS and INCLUDES (and other Makefile
## options) as required. Setting CC and OPTIM here has no effect
## if they were set in Configure.
##
## Also, we set DEF_WANTHSREGEX and to the appropriate
## value for each platform.
##
## As more PLATFORMs are added to Configuration.tmpl, be sure to
## add the required lines below.
##
PLAT=`./helpers/GuessOS`
a187 1
OSDIR="os/unix"
a189 6
    *mint)
        OS="MiNT"
        CFLAGS="-DMINT"
        LIBS="$LIBS -lportlib -lsocket"
        DEF_WANTHSREGEX=yes
        ;;
d193 2
a194 3
	LIBS="$LIBS -lsocket -lsvipc"
	LDFLAGS="$LDFLAGS -Xlinker \"-WL,cap=ia,ba,ph,pm;nmstack=1024000\""
	CAT="/bin/cat" # built-in cat is badly broken for stdin redirection
d198 1
a198 1
	CFLAGS="$CFLAGS -DAUX3 -D_POSIX_SOURCE"
d200 1
a200 1
	LDFLAGS="$LDFLAGS -s"
d204 2
a205 2
	OS='IBM AIX PS/2'
	CFLAGS="$CFLAGS -DAIX=1 -U__STR__ -DUSEBCOPY"
d208 4
a211 22
    *-ibm-aix[1-2].*)
	OS='IBM AIX 1.x/2.x'
	CFLAGS="$CFLAGS -DAIX=1 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix3.*)
	OS='IBM AIX 3.x'
	CFLAGS="$CFLAGS -DAIX=30 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix4.1)
	OS='IBM AIX 4.1'
	CFLAGS="$CFLAGS -DAIX=41 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix4.2)
	OS='IBM AIX 4.2'
	CFLAGS="$CFLAGS -DAIX=42 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
	;;
    *-ibm-aix4.3)
	OS='IBM AIX 4.3'
	CFLAGS="$CFLAGS -DAIX=43 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
	;;
d213 4
a216 4
	OS='IBM AIX'
	CFLAGS="$CFLAGS -DAIX=1 -U__STR__"
	LDFLAGS="$LDFLAGS -lm"
	;;
a226 1
	OSDIR="os/os2"
d229 2
a230 3
	CFLAGS="$CFLAGS -DOS2 -Zbsd-signals -Zbin-files -DTCPIPV4 -g"
	LDFLAGS="$LDFLAGS -Zexe"
	LIBS="$LIBS -lsocket -lufc -lbsd"
a231 1
	SHELL=sh
d236 5
a240 7
	;;
    *-hp-hpux11.*)
	OS='HP-UX 11'
	CFLAGS="$CFLAGS -DHPUX11"
	RANLIB="/bin/true"
	LIBS="$LIBS -lm -lpthread"
	DEF_WANTHSREGEX=yes
d245 5
a249 9
	RANLIB="/bin/true"
 	case "$PLAT" in
 	  *-hp-hpux10.01)
	       # We know this is a problem in 10.01.
               # Not a problem in 10.20.  Otherwise, who knows?
               CFLAGS="$CFLAGS -DSELECT_NEEDS_CAST"
               ;;	     
 	esac
	DEF_WANTHSREGEX=yes
d254 4
a257 2
	RANLIB="/bin/true"
	DEF_WANTHSREGEX=yes
d261 1
a261 1
        # Note: We'd like to see patches to compile 64-bit, but for now...
d264 2
d269 1
a269 1
	    OS='SGI IRIX-64 w/NIS'
d273 1
a273 1
	    OS='SGI IRIX-64'
a276 18
    *-sgi-irix32)
	DEF_WANTHSREGEX=yes
	DBM_LIB=""
	if [ "$RULE_IRIXN32" = "yes" ]; then
	    if [ "$RULE_IRIXNIS" = "yes" ]; then
		OS='SGI IRIX-32 w/NIS'
	    else
		OS='SGI IRIX-32'
	    fi
	else
	    if [ "$RULE_IRIXNIS" = "yes" ]; then
		OS='SGI IRIX w/NIS'
	    else
		OS='SGI IRIX'
	    fi
	fi
	CFLAGS="$CFLAGS -DIRIX"
	;;
d289 12
a304 1
	LIBS="$LIBS -lm"
d311 4
a314 5
    *-lynx-lynxos)
	OS='LynxOS 2.x'
	CFLAGS="$CFLAGS -D__NO_INCLUDE_WARN__ -DLYNXOS"
	LIBS="$LIBS -lbsd -lcrypt"
	DEF_WANTHSREGEX=yes
a319 1
	DB_LIB=""
a323 1
	DB_LIB=""
d325 2
a326 3
    *-netbsd*)
	OS='NetBSD'
	CFLAGS="$CFLAGS -DNETBSD"
a328 2
	DB_LIB=""
	DEF_WANTHSREGEX=no
d330 2
a331 9
    *-freebsd*)
    	PLATOSVERS=`echo $PLAT | sed 's/^.*freebsd//'`
	OS="FreeBSD $PLATOSVERS"
	case "$PLATOSVERS" in
	    [23]*)
		DEF_WANTHSREGEX=no
		CFLAGS="$CFLAGS -funsigned-char"
		;;
	esac
a333 1
	DB_LIB=""
d340 1
a340 9
	OS='NeXTStep'
	OPTIM='-O'
	CFLAGS="$CFLAGS -DNEXT"
	DEF_WANTHSREGEX=yes
	;;
    *-next-openstep*)
	OS='OpenStep/Mach'
	CC='cc'
	OPTIM='-O'
a341 8
	CFLAGS_SHLIB='-dynamic -fno-common'
	LD_SHLIB='cc'
	LDFLAGS_SHLIB='-dynamiclib -undefined warning'
	DEF_WANTHSREGEX=yes
	;;
    *-apple-rhapsody*)
	OS='Mac OS X Server'
	CFLAGS="$CFLAGS -DRHAPSODY"
d343 2
d354 1
a354 1
	LIBS="$LIBS -N128k -lsocket -lunix"
d360 1
a360 1
	LIBS="$LIBS -N128k -lsocket -lunix"
d367 1
a367 1
	LDFLAGS="$LDFLAGS -posix"
d380 4
a383 1
	LIBS="$LIBS -lsocket -lmalloc -lprot -ltinfo -lx -lm"
a385 6
    *-sco_sv*|*-SCO_SV*)
	OS='SCO SV'
	CFLAGS="$CFLAGS -DSCO"
	LIBS="$LIBS -lPW -lsocket -lmalloc -lcrypt_i"
	DEF_WANTHSREGEX=yes
	;;
d387 2
a388 3
    	PLATOSVERS=`echo $PLAT | sed 's/^.*solaris2.//'`
	OS="Solaris $PLATOSVERS"
	CFLAGS="$CFLAGS -DSOLARIS2=$PLATOSVERS"
d391 1
a391 8
	case "$PLATOSVERS" in
	    2[01234]*)
		DEF_WANTHSREGEX=yes
		;;
	    *)
		DEF_WANTHSREGEX=no
		;;
	esac
d400 2
a401 2
	OS='UnixWare 1.x'
	CFLAGS="$CFLAGS -DUW=100"
d406 3
a408 3
	OS='UnixWare 2.x'
	CFLAGS="$CFLAGS -DUW=200"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
d411 3
a413 3
	OS='UnixWare 2.1.1'
	CFLAGS="$CFLAGS -DUW=211"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
d416 3
a418 9
	OS='UnixWare 2.1.2'
	CFLAGS="$CFLAGS -DUW=212"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
	DBM_LIB=""
	;;
    *-unixware7)
	OS='UnixWare 7'
	CFLAGS="$CFLAGS -DUW=700"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen"
a426 8
    BS2000*-sni-sysv4*)
	OS='BS2000'
	OSDIR='os/bs2000'
	CC='c89 -XLLML -XLLMK'
	CFLAGS="$CFLAGS -DCHARSET_EBCDIC -DSVR4 -D_XPG_IV"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
d429 1
a429 1
	CFLAGS="$CFLAGS -DSVR4 -D_XPG_IV -DHAS_DLFCN -DUSE_MMAP_FILES -DUSE_SYSVSEM_SERIALIZED_ACCEPT -DNEED_UNION_SEMUN"
a444 6
    *-ncr-sysv4)
	OS='NCR MP/RAS'
	CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	DEF_WANTHSREGEX=yes
	;;
a449 6
    88k-encore-sysv4)
	OS='Encore UMAX V'
	CFLAGS="$CFLAGS -DSVR4 -DENCORE"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lPW"
	;;
d452 1
a452 1
	CFLAGS="$CFLAGS -Xa -eft -DUTS21 -DUSEBCOPY"
a453 1
	DEF_WANTHSREGEX=yes
d460 3
d466 1
a466 1
	LDFLAGS="$LDFLAGS -Xlstack=0x14000 -Xldelcsect"
d470 1
a470 1
	LDFLAGS="$LDFLAGS -stack 0x14000"
a484 28
    *DYNIX*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT'
	CFLAGS="$CFLAGS -DSEQUENT"
	;;
    *NEWS-OS*)
	DEF_WANTHSREGEX=yes
	OS='SONY NEWS-OS'
	CFLAGS="$CFLAGS -DNEWSOS"
	;;
    *-riscix)
	OS='Acorn RISCix'
	CFLAGS="$CFLAGS -DRISCIX"
	OPTIM="-O"
	MAKE="make"
	DEF_WANTHSREGEX=yes
	;;
    *-BeOS*)
	OS='BeOS';
	CFLAGS="$CFLAGS -DBEOS"
	DEF_WANTHSREGEX=yes
	;;
    4850-*.*)
        OS='NCR MP/RAS'
        CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
        DEF_WANTHSREGEX=yes
        LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
        ;;
a485 1
        OS='Unknown and unsupported OS'
d499 6
a504 8
	echo form at http://www.apache.org/bug_report.html. If you don\'t 
        echo wish to do the port yourself, please submit this output rather 
        echo than the patches. Thank you.
	echo
	echo Pressing on with the build process, but all bets are off.
	echo Do not be surprised if it fails. If it works, and even
	echo if it does not, please contact the above address.
	echo
d508 3
a510 9
####################################################################
## Show user what OS we came up with
##
echo " + configured for $OS platform"
SUBDIRS="$OSDIR $SUBDIRS"

####################################################################
## And adjust/override WANTHSREGEX as needed
##
d513 1
a513 1
		RULE_WANTHSREGEX=yes
d519 13
a531 7
####################################################################
## Now we determine the C-compiler and optimization level
## to use. Settings of CC and OPTIM in Configuration have
## the highest precedence; next comes any settings from
## the above "OS-specific" section. If still unset,
## then we look for a known compiler somewhere in PATH
##
a532 2
# First, look for a CC=<whatever> setting in Configuration (recall, we
# copied these to Makefile.config)
d534 6
a539 1
# If $TCC is null, then no such line exists in Configuration
d541 4
a544 2
TCC=`egrep '^CC=' Makefile.config | tail -1 | awk -F= '{print $2}'`
if [ "x$TCC" = "x" ]; then
d546 1
a546 11
        # At this point, CC is not set in Configuration or above, so we
        # try to find one
	for compilers in "gcc" "cc" "acc" "c89"
	do
	    lookedfor="$lookedfor $compilers"
	    if ./helpers/PrintPath -s $compilers; then
		COMPILER="$compilers"
		break
	    fi
	done
	if [ "x$COMPILER" = "x" ]; then
a549 1
	    exitcode=1
d557 5
a561 8
####################################################################
## Write the value of $CC to Makefile.config... We only do this
## is not done already (ie: a 'CC=' line was in Configuration).
## If there was an entry for it, then set $CC for our own internal
## use.
##
if [ "x$TCC" = "x" ]; then
    echo "CC=$CC" >> Makefile.config
d563 2
a564 45
    CC=$TCC
fi

####################################################################
## Now check how we can _directly_ run the C pre-processor
##
TCPP=`egrep '^CPP=' Makefile.config | tail -1 | awk -F= '{print $2}'`
if [ ".$TCPP" != . ]; then
    CPP=`CC=$CC CPP=$TCPP ./helpers/findcpp.sh`
else
    CPP=`CC=$CC ./helpers/findcpp.sh`
fi
if [ ".$TCPP" = . ]; then
    echo "CPP=$CPP" >> Makefile.config
fi 
echo " + setting C pre-processor to $CPP"

####################################################################
## Now check for existance of non-standard system header files
## and start generation of the ap_config_auto.h header
##
AP_CONFIG_AUTO_H="include/ap_config_auto.h"
echo "/*" >$AP_CONFIG_AUTO_H
echo " *  ap_config_auto.h -- Automatically determined configuration stuff" >>$AP_CONFIG_AUTO_H
echo " *  THIS FILE WAS AUTOMATICALLY GENERATED - DO NOT EDIT!" >>$AP_CONFIG_AUTO_H
echo " */" >>$AP_CONFIG_AUTO_H
echo "" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_CONFIG_AUTO_H" >>$AP_CONFIG_AUTO_H
echo "#define AP_CONFIG_AUTO_H" >>$AP_CONFIG_AUTO_H

echo " + checking for system header files"
CHECK_FOR_HEADERS="dlfcn.h dl.h bstring.h crypt.h unistd.h sys/resource.h sys/select.h sys/processor.h"
for header in $CHECK_FOR_HEADERS; do
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* check: #include <$header> */" >>$AP_CONFIG_AUTO_H
    name="`echo $header | sed -e 's:/:_:g' -e 's:\.:_:g' | tr '[a-z]' '[A-Z]'`"
    CPP=$CPP ./helpers/checkheader.sh $header
    if [ $? -eq 0 ]; then
        echo "#ifndef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#define HAVE_${name} 1" >>$AP_CONFIG_AUTO_H
        echo "#endif" >>$AP_CONFIG_AUTO_H
    else
        echo "#ifdef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#undef HAVE_${name}" >>$AP_CONFIG_AUTO_H
        echo "#endif" >>$AP_CONFIG_AUTO_H
d566 1
a566 287
done

####################################################################
# Special AIX 4.x support: need to check for sys/processor.h
# to decide whether the Processor Binding can be used or not
case "$PLAT" in
    *-ibm-aix*)
        CPP=$CPP ./helpers/checkheader.sh sys/processor.h
        if [ $? -eq 0 ]; then
            CFLAGS="$CFLAGS -DAIX_BIND_PROCESSOR"
        fi
        ;;
esac

####################################################################
## Look for OPTIM and save for later
##
TOPTIM=`egrep '^OPTIM=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TRANLIB=`egrep '^RANLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`

####################################################################
## Check for user provided flags for shared object support
##
TLD_SHLIB=`egrep '^LD_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TLDFLAGS_SHLIB=`egrep '^LDFLAGS_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TLDFLAGS_SHLIB_EXPORT=`egrep '^LDFLAGS_SHLIB_EXPORT=' Makefile.config | tail -1 | awk -F= '{print $2}'`
TCFLAGS_SHLIB=`egrep '^CFLAGS_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`

####################################################################
## We adjust now CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT as
## required.  For more platforms just add the required lines below.
##
if [ "x$using_shlib" = "x1" ] ; then
    LD_SHLIB="ld"
    DEF_SHARED_CORE=no
    DEF_SHARED_CHAIN=no
    SHLIB_SUFFIX_NAME=so
    SHLIB_SUFFIX_DEPTH=all
    SHLIB_EXPORT_FILES=no
    case "$PLAT" in
        *-linux1)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT="-rdynamic"
            ;;
        *-linux2)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT="-rdynamic"
            SHLIB_SUFFIX_DEPTH=0
            ;;
        *-freebsd*)
            CFLAGS_SHLIB="-fpic"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-openbsd*)
            CFLAGS_SHLIB="-fPIC"
            LDFLAGS_SHLIB="-Bforcearchive -Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        alpha-*-netbsd*|mips-*-netbsd*|powerpc-*-netbsd*)
            CFLAGS_SHLIB="-fpic -DPIC"
            LDFLAGS_SHLIB="-shared"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-netbsd*)
            CFLAGS_SHLIB="-fpic -DPIC"
            LDFLAGS_SHLIB="-Bshareable"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=2
            ;;
        *-apple-rhapsody*)
            LD_SHLIB="cc"
            CFLAGS_SHLIB=""
            LDFLAGS_SHLIB="-bundle -undefined suppress"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=0
            ;;
        *-solaris2*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=1
            ;;
        *-sunos4*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */acc|acc ) CFLAGS_SHLIB="-pic" ;;
            esac
            LDFLAGS_SHLIB="-assert pure-text"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix32)
            case $CC in
                */gcc|gcc )
		    CFLAGS_SHLIB="-fpic"
		    N32FLAG=""
		    ;;
                */cc|cc )
		    CFLAGS_SHLIB="-KPIC"
		    N32FLAG="-n32"
		    ;;
            esac
            if [ "$RULE_IRIXN32" = "yes" ]; then
                LDFLAGS_SHLIB="$N32FLAG -shared"
            else
                LDFLAGS_SHLIB="-shared"
            fi
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix64)
            case $CC in
                */gcc|gcc )
		    CFLAGS_SHLIB="-fpic"
		    N32FLAG=""
		    ;;
                */cc|cc )
		    CFLAGS_SHLIB="-KPIC"
		    N32FLAG="-n32"
		    ;;
            esac
            if [ "$RULE_IRIXN32" = "yes" ]; then
                LDFLAGS_SHLIB="$N32FLAG -shared"
            else
                LDFLAGS_SHLIB="-shared"
            fi
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-sgi-irix)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-shared"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-dec-osf*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="" ;;
            esac
            LDFLAGS_SHLIB="-shared -expect_unresolved '*' -s"
            LDFLAGS_SHLIB_EXPORT=""
            ;;
        *-unixware2)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-Bdynamic -G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
            ;;
        *-unixware21*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-Bdynamic -G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
            ;;
         *-sco5*)
             case $CC in
                 */gcc*|gcc* ) CFLAGS_SHLIB="-fpic" ;;
                 */cc*|cc*   ) CFLAGS_SHLIB="-KPIC" ;;
             esac
             LDFLAGS_SHLIB="-G"
             LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
             SHLIB_SUFFIX_DEPTH=1
             ;;
        RM*-sni-sysv4*)
            # MIPS hosts can take advantage of the LDFLAGS_SHLIB_EXPORT switch
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT="-Wl,-Blargedynsym"
            ;;
        *-sni-sysv4*)
            # Older SINIX machines must be linked as "shared core"-Apache
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            SHLIB_SUFFIX_DEPTH=0
            DEF_SHARED_CORE=yes
            ;;
        *-sysv4*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
            esac
            LDFLAGS_SHLIB="-G"
            LDFLAGS_SHLIB_EXPORT=""
            DEF_SHARED_CORE=yes
            ;;
        *-hp-hpux9.*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="+z" ;;
            esac
            LDFLAGS_SHLIB="-b"
            LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred"
            SHLIB_SUFFIX_NAME=sl
            ;;
        *-hp-hpux10.*|*-hp-hpux11.*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="+z" ;;
            esac
            LDFLAGS_SHLIB="-b"
            LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred -Wl,+s"
            SHLIB_SUFFIX_NAME=sl
            ;;
        *-ibm-aix*)
            case $CC in
                */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
                */cc|cc   ) CFLAGS_SHLIB="" ;;
            esac
            case $PLAT in
                *-ibm-aix4*)
                    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -bnoentry"
                    ;;
                *-ibm-aix*)
                    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -e _nostart"
                    ;;
            esac
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bI:\$(SRCDIR)/support/httpd.exp "
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bE:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
            LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
            LDFLAGS_SHLIB_EXPORT="-Wl,-bE:\$(SRCDIR)/support/httpd.exp"
            SHLIB_EXPORT_FILES=yes
            ;;
        *)
            ##  ok, no known explict support for shared objects
            ##  on this platform, but we give not up immediately.
            ##  We take a second chance by guessing the compiler
            ##  and linker flags from the Perl installation
            ##  if it exists.
            PERL=
            for dir in `echo $PATH | sed -e 's/:/ /g'`
            do
                if [ -f "$dir/perl5" ]; then
                    PERL="$dir/perl5"
                    break
                fi
                if [ -f "$dir/perl" ]; then
                    PERL="$dir/perl"
                    break
                fi
            done
            if [ ".$PERL" != . ]; then
                #   cool, Perl is installed on this platform...
                if [ ".`$PERL -V:dlsrc 2>/dev/null | grep dlopen`" != . ]; then
                    #   ...and actually uses the dlopen-style interface,
                    #   so we can guess the flags from its knowledge
                    CFLAGS_SHLIB="`$PERL -V:cccdlflags | cut -d\' -f2`"
                    LDFLAGS_SHLIB="`$PERL -V:lddlflags | cut -d\' -f2`"
                    LDFLAGS_SHLIB_EXPORT="`$PERL -V:ccdlflags | cut -d\' -f2`"
                    #   but additionally we have to inform the
                    #   user that we are just guessing the flags
                    echo ""
                    echo "** WARNING: We have no explicit knowledge about shared object"
                    echo "** support for your particular platform. But perhaps you have"
                    echo "** luck: We were able to guess the compiler and linker flags"
                    echo "** for creating shared objects from your Perl installation."
                    echo "** If they actually work, please send the following information"
                    echo "** for inclusion into later releases to new-httpd@@apache.org or make"
                    echo "** a suggestion report at http://www.apache.org/bug_report.html:"
                    echo "**     PLATFORM=$PLAT"
                    echo "**     CFLAGS_SHLIB=$CFLAGS_SHLIB"
                    echo "**     LDFLAGS_SHLIB=$LDFLAGS_SHLIB"
                    echo "**     LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT"
                    echo ""
                fi
            fi
            ;;
    esac
d569 8
a576 16
####################################################################
## Check if we really have some information to compile
## the shared objects if SharedModule was used.
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$TCFLAGS_SHLIB"  = x -a "x$CFLAGS_SHLIB"  = x  -a \
         "x$TLDFLAGS_SHLIB" = x -a "x$LDFLAGS_SHLIB" = x ]; then
        echo ""
        echo "** FAILURE: Sorry, no shared object support available."
        echo "** Either compile all modules statically (use AddModule instead"
        echo "** of SharedModule in the Configuration file) or at least provide"
        echo "** us with the appropriate compiler and linker flags via the"
        echo "** CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT entries"
        echo "** in the Configuration file."
        echo ""
        exit 1
d580 5
a584 69
####################################################################
## Now we do some OS specific adjustments... for some OSs, we need
## to adjust CFLAGS and/or OPTIM depending on which compiler we
## are going to use. This is easy, since this can be gleamed from
## Makefile.config
##
case "$OS" in
    'ULTRIX')
	case "$CC" in
	    */cc|cc ) CFLAGS="$CFLAGS -std" ;;
	esac
	;;
    'SCO 5')
	case "$CC" in
	    */cc|cc ) CFLAGS="$CFLAGS -K noinline" ;;
	esac
	;;
    'HI-UX')
	case "$CC" in
	    */cc|cc )
		CFLAGS="$CFLAGS -Aa -D_HIUX_SOURCE"
		OPTIM=" "
		TOPTIM=""
	    ;;
	esac
	;;
    'HP-UX'|'HP-UX 10'|'HP-UX 11')
	case "$CC" in
	    */cc|cc )
		CFLAGS="$CFLAGS -Aa -D_HPUX_SOURCE"
		OPTIM=" "
		TOPTIM=""
	    ;;
	esac
	;;
    *IRIX-64*)
	if [ "$RULE_IRIXN32" = "yes" ]; then
	    case "$CC" in
		*/cc|cc )
		    CFLAGS="$CFLAGS -n32"
		    LDFLAGS="$LDFLAGS -n32"
		;;
	    esac
	fi
	;;
    *IRIX-32*)
	if [ "$RULE_IRIXN32" = "yes" ]; then
	    case "$CC" in
		*/cc|cc )
		    CFLAGS="$CFLAGS -n32"
		    LDFLAGS="$LDFLAGS -n32"
		;;
	    esac
	fi
	;;
    IBM?AIX?4.[123])
	case $CC in
	    */cc|cc ) 
		CFLAGS="$CFLAGS -qnogenpcomp -qnousepcomp"
	    ;;
	esac
	;;
esac

####################################################################
## OK, now we can write OPTIM
##
if [ "x$TOPTIM" = "x" ]; then
    echo "OPTIM=$OPTIM" >> Makefile.config
d587 6
a592 13
####################################################################
## OK, now handle RANLIB
##
if [ ".$RANLIB" = . ]; then
    if [ ".$TRANLIB" != . ]; then
        RANLIB=$TRANLIB
    else
        if ./helpers/PrintPath -s ranlib; then
            RANLIB="ranlib"
        else
            RANLIB="true"
        fi
    fi
d595 6
a600 29
####################################################################
## Now we do some general checks and some intelligent Configuration
## control.

# Use TestCompile to look for various LIBS
case "$PLAT" in
    *-linux*)
	# newer systems using glibc 2.x need -lcrypt
	if ./helpers/TestCompile lib crypt; then
	    LIBS="$LIBS -lcrypt"
	fi
	;;

    *-dg-dgux*)
	# R4.11MU02 requires -lsocket -lnsl ... no idea if it's earlier or
	# later than what we already knew about.  PR#732
	if ./helpers/TestCompile lib socket; then
	    LIBS="$LIBS -lsocket"
	fi
	if ./helpers/TestCompile lib nsl; then
	    LIBS="$LIBS -lnsl"
	fi
	;;
esac

# SOCKS4 support:
# We assume that if they are using SOCKS4, then they've
# adjusted EXTRA_LIBS and/or EXTRA_LDFLAGS as required,
# otherwise we assume "-L/usr/local/lib -lsocks"
d602 1
a602 2
    echo " + enabling SOCKS4 support"
    CFLAGS="$CFLAGS -DSOCKS -DSOCKS4"
d605 5
a609 1
    if [ ".`grep EXTRA_ Makefile | grep lsocks`" = . ]; then
a611 5
    case $PLAT in
        *-solaris2* )
            LIBS="$LIBS -lresolv"
            ;;
    esac
d614 6
a619 17
# SOCKS5 support:
# We assume that if they are using SOCKS5, then they've
# adjusted EXTRA_LIBS and/or EXTRA_LDFLAGS as required,
# otherwise we assume "-L/usr/local/lib -lsocks5"
if [ "$RULE_SOCKS5" = "yes" ]; then
    echo " + enabling SOCKS5 support"
    CFLAGS="$CFLAGS -DSOCKS -DSOCKS5"
    CFLAGS="$CFLAGS -Dconnect=SOCKSconnect -Dselect=SOCKSselect"
    CFLAGS="$CFLAGS -Dgethostbyname=SOCKSgethostbyname -Dclose=SOCKSclose"
    if [ ".`grep EXTRA_ Makefile | grep lsocks5`" = . ]; then
        LIBS="$LIBS -L/usr/local/lib -lsocks5"
    fi
    case $PLAT in
        *-solaris2* )
            LIBS="$LIBS -lresolv"
            ;;
    esac
d621 2
a622 161

####################################################################
## Find out what modules we want and try and configure things for them
## Module lines can look like this:
##
##  Module  name_module    some/path/mod_name[.[oa]]
##  AddModule              some/path/mod_name[.[oa]]
##
## In both cases, the some/path can either be an arbitrary path (including
## an absolute path), or a path like "modules/DIR", in which case we _might_
## auto-generate a Makefile in modules/DIR (see later).
##
## The first case is the original style, where we give the module's
## name as well as it's binary file location - either a .o or .a.
##
## The second format is new, and means we do not repeat the module
## name, which is already part of the module source or definition.
## The way we find the module name (and other optional information about
## the module) is like this:
##
##  1 If extension is not given or is .c, assume .o was given and goto 3
##  2 If extension if .module, go to D1
##  3 If extension is .o, look for a corresponding .c file and if
##      found, go to C1
##  4 If no .c file was found, look for a .module file (Apache module
##      definition file). If found, go to D1
##  5 Assume module name is the "name" part of "mod_name", as in
##      name_module.
##
## If a C file is found:
##
## C1 Look for module name given by an MODULE: line (e.g. MODULE: name_module)
##      If found assume module contains a definition, and go to D1
## C2 If not found, look for a module name given on the declaration of the
##      module structure (e.g. module name_module).
## C3 If neither given, go to 4 above.
##
## If a definition file is found, or a .c file includes a module definition:
##
## D1 Get the module name from the MODULE: name= line
## D2 Get other module options (libraries etc). To be done later.
##
##
## For now, we will convert the AddModule lines into Module format
## lines, so the rest of Configure can do its stuff without too much
## additional hackery. It would be nice to reduce the number of times
## we have to awk the $tmpfile, though.

## MODFILES contains a list of module filenames (could be .c, .o, .so, .a
##    or .module files) from AddModule lines only
## MODDIRS contains a list of subdirectories under 'modules' which
##    contain modules we want to build from both AddModule and Module
##    lines

echo " + adding selected modules"

MODFILES=`awk <$tmpfile '($1 == "AddModule" || $1 == "SharedModule") { printf "%s ", $2 }'`
MODDIRS=`awk < $tmpfile '
	($1 == "Module" && $3 ~ /^modules\//) {
	    split ($3, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    }
    	}
	(($1 == "AddModule" || $1 == "SharedModule") && $2 ~ /^modules\//) { 
	    split ($2, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    } 
    	}'`
MODDIRS_NO_SO=`awk < $tmpfile '
	($1 == "Module" && $3 ~ /^modules\//) {
	    split ($3, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    }
    	}
	(($1 == "AddModule") && $2 ~ /^modules\//) { 
	    split ($2, pp, "/")
	    if (! SEEN[pp[2]]) {
		printf "%s ", pp[2]
		SEEN[pp[2]] = 1
	    } 
    	}'`

# Now autoconfigure each of the modules specified by AddModule.
# Use tmpfile2 for the module definition file, and tmpfile3 for the
# shell commands to be executed for this module.

for modfile in $MODFILES ; do
	rm -f $tmpfile2 $tmpfile3
	modname=''

	ext=`echo $modfile | sed 's/^.*\.//'`
	modbase=`echo $modfile | sed 's/\.[^.]*$//'`
	if [ x$ext = x$modfile ]; then ext=o; modbase=$modfile; modfile=$modbase.o; fi
	if [ x$ext = x ] ; then ext=o; modbase=$modfile; fi
	if [ x$ext = xc ] ; then ext=o; fi

	# modbase is the path+filename without extension, ext is the
	# extension given, or if none, o
	if [ -r $modbase.module ] ; then
		$CAT $modbase.module > $tmpfile2
	else
	    if [ -f $modbase.c ] ; then
		# Guess module structure name in case there is not
		# module definition in this file
		modname=`egrep '^module .*;' $modbase.c | head -1 |\
			sed 's/^module.*[ 	][ 	]*//' | \
			sed 's/[ 	]*;[ 	]*$//'`
		# Get any module definition part
		if grep "MODULE-DEFINITION-" $modbase.c > /dev/null; then
		$CAT $modbase.c | \
		sed '1,/MODULE-DEFINITION-START/d;/MODULE-DEFINITION-END/,$d' \
			> $tmpfile2
		fi
	    fi
	fi		
	if [ -r $tmpfile2 ] ; then
		# Read a module definition from .module or .c
		modname=`grep "Name:" $tmpfile2 | sed 's/^.*Name:[ 	]*//'`
		if grep "ConfigStart" $tmpfile2 > /dev/null \
		 && grep "ConfigEnd" $tmpfile2 > /dev/null; then
		    sed '1,/ConfigStart/d;/ConfigEnd/,$d' $tmpfile2 > \
		     $tmpfile3
		    echo "    o $modname uses ConfigStart/End"
		    if [ "$RULE_PARANOID" = "yes" ]; then
			sed 's/^/>> /' $tmpfile3
		    fi
		    . ./$tmpfile3
		fi
		rm -f $tmpfile2 $tmpfile3
		if [ $ext != so ]; then
		    ext=o
		fi
	fi
	if [ "x$modname" = "x" ] ; then
		modname=`echo $modbase | sed 's/^.*\///' | \
			sed 's/^mod_//' | sed 's/^lib//' | sed 's/$/_module/'`
	fi
	if [ $ext != so ]; then
		echo "Module $modname $modbase.$ext" >>$tmpfile
	fi
	#   optionally generate export file for some linkers 
	if [ $ext = so -a .$SHLIB_EXPORT_FILES = .yes ]; then
		echo "$modname" >$modbase.exp
	fi
done
# $tmpfile now contains Module lines for all the modules we want

####################################################################
## Now HS's POSIX regex implementation if needed/wanted. We do it
## now since AddModule may have changed it
##
if [ "$RULE_WANTHSREGEX" = "yes" ]; then
    REGLIB="regex/libregex.a"
    SUBDIRS="regex $SUBDIRS"
    CFLAGS="$CFLAGS -DUSE_HSREGEX"
d624 10
a634 18
####################################################################
## Now the SHARED_CHAIN stuff
##
LIBS_SHLIB=''
if [ "x$using_shlib" = "x1" ] ; then
    if [ ".$RULE_SHARED_CHAIN" = .default ] ; then
        RULE_SHARED_CHAIN=$DEF_SHARED_CHAIN
    fi
    if [ ".$RULE_SHARED_CHAIN" = .yes ]; then
        echo " + enabling DSO files to be linked against others"
        #   determine libraries which can be safely linked
        #   to our DSO files, i.e. PIC libraries and shared libraries
        extra_ldflags="`grep EXTRA_LDFLAGS= Makefile.config`"
        extra_libs="`grep EXTRA_LIBS= Makefile.config`"
        eval "`./helpers/slo.sh $LDFLAGS $LIBS $extra_ldflags $extra_libs`"
        LIBS_SHLIB="$SLO_DIRS_PIC $SLO_LIBS_PIC $SLO_DIRS_DSO $SLO_LIBS_DSO"
    fi
fi
d636 13
a648 35
####################################################################
## Now the SHARED_CORE stuff
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ ".$RULE_SHARED_CORE" = .default ] ; then
        RULE_SHARED_CORE=$DEF_SHARED_CORE
    fi
    if [ ".$RULE_SHARED_CORE" = .yes ]; then
        echo " + enabling generation of Apache core as DSO"
        #    shuffle compiler flags from shlib variant to standard
        CFLAGS="$CFLAGS $CFLAGS_SHLIB"
        CFLAGS_SHLIB=""
        #    indicate that Rule SHARED_CORE is active
        CFLAGS="$CFLAGS -DSHARED_CORE"
        #    select the special subtarget for shared core generation
        SUBTARGET=target_shared
        #    determine additional suffixes for libhttpd.so
        V=1 R=3 P=2
        if [ ".$SHLIB_SUFFIX_DEPTH" = .0 ]; then
            SHLIB_SUFFIX_LIST=""
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .1 ]; then
            SHLIB_SUFFIX_LIST="$V"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .2 ]; then
            SHLIB_SUFFIX_LIST="$V.$R"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .3 ]; then
            SHLIB_SUFFIX_LIST="$V.$R.$P"
        fi
        if [ ".$SHLIB_SUFFIX_DEPTH" = .all ]; then
            SHLIB_SUFFIX_LIST="$V $V.$R $V.$R.$P"
        fi
    fi
fi
d650 2
a651 18
####################################################################
## Set the value of the shared libary flags, if they aren't explicitly
## set in the configuration file
##
if [ "x$using_shlib" = "x1" ] ; then
    if [ "x$TCFLAGS_SHLIB" = "x" ]; then
        echo "CFLAGS_SHLIB=$CFLAGS_SHLIB -DSHARED_MODULE" >> Makefile.config
    fi
    if [ "x$TLD_SHLIB" = "x" ]; then
        echo "LD_SHLIB=$LD_SHLIB" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_SHLIB" = "x" ]; then
        echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_SHLIB_EXPORT" = "x" ]; then
        echo "LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT" >> Makefile.config
    fi
fi
d653 2
a654 149
####################################################################
## Now create modules.c
##
cat $tmpfile | sed 's/_module//' | awk >modules.c '
    BEGIN {
	modules[n++] = "core"
	pmodules[pn++] = "core"
    } 
    /^Module/ { modules[n++] = $2 ; pmodules[pn++] = $2 } 
    /^%Module/ { pmodules[pn++] = $2 } 
    END {
	print "/*"
	print " * modules.c --- automatically generated by Apache"
	print " * configuration script.  DO NOT HAND EDIT!!!!!"
	print " */"
	print ""
	print "#include \"httpd.h\""
	print "#include \"http_config.h\""
	print ""
	for (i = 0; i < pn; ++i) {
	    printf ("extern module %s_module;\n", pmodules[i])
	}
	print ""
	print "/*"
	print " *  Modules which implicitly form the"
	print " *  list of activated modules on startup,"
	print " *  i.e. these are the modules which are"
	print " *  initially linked into the Apache processing"
	print " *  [extendable under run-time via AddModule]"
	print " */"
	print "module *ap_prelinked_modules[] = {"
	for (i = 0; i < n; ++i) {
	    printf "  &%s_module,\n", modules[i]
	}
	print "  NULL"
	print "};"
	print ""
	print "/*"
	print " *  Modules which initially form the"
	print " *  list of available modules on startup,"
	print " *  i.e. these are the modules which are"
	print " *  initially loaded into the Apache process"
	print " *  [extendable under run-time via LoadModule]"
	print " */"
	print "module *ap_preloaded_modules[] = {"
	for (i = 0; i < pn; ++i) {
	    printf "  &%s_module,\n", pmodules[i]
	}
	print "  NULL"
	print "};"
	print ""
    }'

####################################################################
## figure out which module dir require use to autocreate a Makefile.
## for these dirs we must not list the object files from the AddModule
## lines individually since the auto-generated Makefile will create
## a library called libMODDIR.a for it (MODDIR is the module dir
## name). We create two variable here:
##
##   AUTODIRS   Space separated list of module directories, relative to
##              src
##   AUTOLIBS   Space separated list of auto-generated library files
##
for moddir in $MODDIRS 
do
	if [ -f modules/$moddir/Makefile.tmpl ] ; then
		AUTODIRS="$AUTODIRS modules/$moddir"
	fi
done
for moddir in $MODDIRS_NO_SO
do
	if [ -f modules/$moddir/Makefile.tmpl ] ; then
		AUTOLIBS="$AUTOLIBS modules/$moddir/lib$moddir.a"
	fi
done

####################################################################
## Add the module targets to the Makefile. Do not add individual object
## targets for auto-generated directories.
##
$CAT > $awkfile <<EOF1
    BEGIN {
	split ("$AUTODIRS", tmp, " ")
EOF1
$CAT >> $awkfile <<'EOF2'
	for ( key in tmp ) {
	    autodirs[tmp[key]] = 1
	}
     }
    /^Module/ { modules[n++] = $3 }
    /^%Module/ { modules[n++] = $3 }
    END {
	print "MODULES= \\"
	for (i = 0; i < n; ++i) {
	    split (modules[i], pp, "/")
	    dir = pp[1] "/" pp[2] 
	    inthere = 0
	    for ( tdir in autodirs ) {
	        if (tdir == dir) 
		    inthere = 1
	    }
	    if (inthere == 1)
		continue
	    else
		printf ("  %s \\\n", modules[i])
	}
    }
EOF2
awk -f $awkfile >>Makefile <$tmpfile

####################################################################
## Now add the auto-generated library targets.  Need to use awk so we
## don't hang a continuation on the last line.
##
$CAT > $awkfile <<'EOF4'
    {
	z = 0
	split ($0, libs)
	for ( lib in libs ) {
	    if (z != 0)
		printf (" \\\n")
	    z++
	    printf ("  %s", libs[lib])
	}
    }
    END {
	printf ("\n")
    }
EOF4
echo "$AUTOLIBS" | awk -f $awkfile >>Makefile
echo "" >>Makefile

####################################################################
## Now add the target for the main Makefile
##
echo "TARGET=$TARGET" >> Makefile
echo "SUBDIRS=$SUBDIRS" >> Makefile
echo "SUBTARGET=$SUBTARGET" >> Makefile
echo "SHLIB_SUFFIX_NAME=$SHLIB_SUFFIX_NAME" >> Makefile
echo "SHLIB_SUFFIX_LIST=$SHLIB_SUFFIX_LIST" >> Makefile
echo "" >> Makefile

####################################################################
## Now add -DSERVER_SUBVERSION if $SUBVERSION is set
##
if [ "x$SUBVERSION" != "x" ] ; then
        SUBVERSION=`echo $SUBVERSION | sed 's/^ +//'`
	CFLAGS="$CFLAGS -DSERVER_SUBVERSION=\\\"$SUBVERSION\\\""
d657 2
a658 27
####################################################################
## Determine GNU Make variant because
## it uses ugly looking built-in directory walk messages
## while we are already using our own messages
##
if [ ".`make -v 2>/dev/null | grep 'GNU Make'`" = . ]; then
	MFLAGS_STATIC=
else
	MFLAGS_STATIC=--no-print-directory
fi

####################################################################
## Continue building Makefile.config. Fill in all entries except
## for $LIBS at this point. This implies that anything below
## can only alter $LIBS
##
echo "CFLAGS1=$CFLAGS">> Makefile.config
echo "OSDIR=\$(SRCDIR)/$OSDIR">> Makefile.config
echo "INCDIR=\$(SRCDIR)/include" >>Makefile.config
echo "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)">> Makefile.config
echo "INCLUDES1=$INCLUDES">> Makefile.config
echo "LIBS_SHLIB=$LIBS_SHLIB">> Makefile.config
echo "LDFLAGS1=$LDFLAGS">> Makefile.config
echo "MFLAGS_STATIC=$MFLAGS_STATIC">> Makefile.config
echo "REGLIB=$REGLIB">> Makefile.config
echo "RANLIB=$RANLIB">> Makefile.config
echo "SHELL=$SHELL">> Makefile.config
d660 4
a663 34
####################################################################
## Some OS-related stuff for the DSO mechanism:
## Finding the vendor DSO functions
##
if [ "x$using_shlib" = "x1" ] ; then
    DL_LIB=""
    case $PLAT in
        *-ibm-aix* )
            DL_LIB="-lld"
            ;;
        *-hp-hpux*)
            if ./helpers/TestCompile func shl_load; then
                :
            else
                if ./helpers/TestCompile lib dld; then
                    DL_LIB="-ldld"
                fi
            fi
            ;;
        * )
            if ./helpers/TestCompile func dlopen; then
                :
            else
                if ./helpers/TestCompile lib dl; then
                    DL_LIB="-ldl"
                fi
            fi
            ;;
    esac
    if [ ".$DL_LIB" != . ]; then
        LIBS="$LIBS $DL_LIB"
        echo " + using $DL_LIB for vendor DSO support"
    fi
fi
d665 4
a668 49
####################################################################
## Finish building ap_config_auto.h
##
## We pick out all -D's from CFLAGS and insert them as defines into
## ap_config_auto.h so they are available to external modules needing to
## include Apache header files.
##
for cflag in $CFLAGS; do
	echo $cflag | sed 's/\\\"/\"/g' >>$tmpconfig ;
done
awk >>$AP_CONFIG_AUTO_H <$tmpconfig '
	/^-D.*/ {
		define = substr($1, 3, length($1)-2)
		split(define, parts, "=")
		printf ("\n/* build flag: %s */\n", $0)
		printf ("#ifndef %s\n#define %s %s\n#endif\n", parts[1],parts[1],parts[2])
	}
'

# finish header file
echo "" >>$AP_CONFIG_AUTO_H
echo "#endif /* AP_CONFIG_AUTO_H */" >>$AP_CONFIG_AUTO_H

####################################################################
## Finish creating the Makefile.config file
##
echo "LIBS1=$LIBS">> Makefile.config
echo "##" >> Makefile.config
echo "##  (End of automatically generated section)">> Makefile.config
echo "##" >> Makefile.config
echo "" >> Makefile.config

####################################################################
## Use TestCompile to see if $(CC) is ANSI and as a "final" sanity
## check
##
echo " + doing sanity check on compiler and options"
if ./helpers/TestCompile sanity; then
    :
else
   echo "** A test compilation with your Makefile configuration"
   echo "** failed. This is most likely because your C compiler"
   echo "** is not ANSI. Apache requires an ANSI C Compiler, such"
   echo "** as gcc. The above error message from your compiler"
   echo "** will also provide a clue."
   echo " Aborting!"
   exitcode=1
   exit 1
fi
d670 1
a670 16
####################################################################
## Now (finish) creating the makefiles
##

# ./Makefile
$CAT Makefile.config >> Makefile
sed -e "s#@@@@Configuration@@@@#$file#" "Makefile.tmpl" >>Makefile

# xxx/Makefile
MAKEDIRS="support main ap regex $OSDIR"
for dir in $MAKEDIRS ; do
	echo Creating Makefile in $dir
	./helpers/mfhead $dir $file > $dir/Makefile
	$CAT Makefile.config $dir/Makefile.tmpl |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp $dir`:" >> $dir/Makefile
done
d672 2
a673 18
####################################################################
## Now create the modules/Makefile
##
./helpers/mfhead modules $file > modules/Makefile
$CAT Makefile.config | sed -e 's:^SRCDIR=.*:SRCDIR=..:' >> modules/Makefile

$CAT << EOF >> modules/Makefile
MODULES=$MODDIRS
CFLAGS=\$(OPTIM) \$(CFLAGS1) \$(EXTRA_CFLAGS)

default: all

all clean distclean depend :: 
	@@for i in \$(MODULES); do \\
	    echo "===> \$(SDP)modules/\$\$i"; \\
		(cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' \$@@) || exit 1; \\
		echo "<=== \$(SDP)modules/\$\$i"; \\
	done
d675 2
a676 1
EOF
d678 2
a679 98
####################################################################
## Now create modules/xxx/Makefile
##
for moddir in $AUTODIRS ; do
	echo "Creating Makefile in $moddir"

    ./helpers/mfhead $moddir $file > $moddir/Makefile
	$CAT Makefile.config |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp $moddir`:" >> $moddir/Makefile
	$CAT << 'EOF' >> $moddir/Makefile
##
##  Default Makefile options from Configure script
##  (Begin of automatically generated section)
##
CFLAGS=$(OPTIM) $(CFLAGS1) $(EXTRA_CFLAGS)
LIBS=$(EXTRA_LIBS) $(LIBS1)
INCLUDES=$(INCLUDES1) $(INCLUDES0) $(EXTRA_INCLUDES)
LDFLAGS=$(LDFLAGS1) $(EXTRA_LDFLAGS)
INCDIR=$(SRCDIR)/include
EOF
	if [ -f $moddir/Makefile.libdir ]; then
	    basedir=`echo $moddir | sed 's@@^[^/]*/@@@@g'`
	    awk >> $moddir/Makefile < $tmpfile '
		($2 ~ /^modules\/'$basedir'\//) {
		    split($2, pp, "/");
		    split(pp[3], parts, ".");
		    libext=parts[2];
		}
		END { 
		    printf "LIBEXT=%s\n", libext;
		}'
	    # it's responsible for the rest of its Makefile...
	else
	    basedir=`echo $moddir | sed 's@@^[^/]*/@@@@g'`
	    OBJS=`awk < $tmpfile '
		($1 == "Module" && $3 ~ /^modules\/'$basedir'\//) { 
		    split ($3, pp, "/")
		    printf "%s ", pp[3] 
		} 
		'`
	    echo "OBJS=$OBJS" >> $moddir/Makefile
	    if [ ".$OBJS" != . ]; then
		echo "LIB=lib$basedir.a" >> $moddir/Makefile
	    else
		#   essential!
		echo "LIB=" >> $moddir/Makefile
	    fi
	    awk >> $moddir/Makefile < $tmpfile '
	    ($1 == "SharedModule" && $2 ~ /^modules\/'$basedir'\//) {
		split($2, pp, "/")
		shlibs=shlibs " " pp[3]
		so=pp[3]
		split(pp[3], parts, ".")
		base=parts[1]
		objspic=objspic " " base ".lo"
	    }
	    END { 
		printf "SHLIBS=%s\n", shlibs;
		printf "OBJS_PIC=%s\n", objspic;
            }'

	    $CAT << 'EOF' >> $moddir/Makefile

all: lib shlib

lib:	$(LIB) 

shlib:	$(SHLIBS)

dummy $(LIB): $(OBJS)
	rm -f $@@
	ar cr $@@ $(OBJS)
	$(RANLIB) $@@

.SUFFIXES: .o .so

.c.o:
	$(CC) -c $(INCLUDES) $(CFLAGS) $<

.c.so:
	$(CC) -c $(INCLUDES) $(CFLAGS) $(CFLAGS_SHLIB) $< && mv $*.o $*.lo
	$(LD_SHLIB) $(LDFLAGS_SHLIB) -o $@@ $*.lo $(LIBS_SHLIB)

clean:
	rm -f $(LIB) $(OBJS) $(SHLIBS) $(OBJS_PIC)

distclean: clean
	rm -f Makefile

#   NOT FOR END USERS!
depend:
	cp Makefile.tmpl Makefile.tmpl.bak \
	    && sed -ne '1,/^# DO NOT REMOVE/p' Makefile.tmpl > Makefile.new \
	    && gcc -MM $(INCLUDES) $(CFLAGS) *.c >> Makefile.new \
	    && sed -e '1,$$s: $(INCDIR)/: $$(INCDIR)/:g' \
	           -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
		> Makefile.tmpl \
	    && rm Makefile.new
d681 1
a681 2
EOF
	fi
a682 4
	$CAT << 'EOF' >> $moddir/Makefile
##
##  (End of automatically generated section)
##
a683 1
    $CAT >> $moddir/Makefile < $moddir/Makefile.tmpl
d685 3
a687 1
done
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d3 1
a3 4
## The Apache Software License, Version 1.1
##
## Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
## reserved.
d10 1
a10 1
##    notice, this list of conditions and the following disclaimer.
d17 23
a39 20
## 3. The end-user documentation included with the redistribution,
##    if any, must include the following acknowledgment:
##       "This product includes software developed by the
##        Apache Software Foundation (http://www.apache.org/)."
##    Alternately, this acknowledgment may appear in the software itself,
##    if and wherever such third-party acknowledgments normally appear.
##
## 4. The names "Apache" and "Apache Software Foundation" must
##    not be used to endorse or promote products derived from this
##    software without prior written permission. For written
##    permission, please contact apache@@apache.org.
##
## 5. Products derived from this software may not be called "Apache",
##    nor may "Apache" appear in their name, without prior written
##    permission of the Apache Software Foundation.
##
## THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
## WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d41 7
a47 7
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
## USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
## OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
## SUCH DAMAGE.
d51 5
a55 9
## individuals on behalf of the Apache Software Foundation.  For more
## information on the Apache Software Foundation, please see
## <http://www.apache.org/>.
##
## Portions of this software are based upon public domain software
## originally written at the National Center for Supercomputing Applications,
## University of Illinois, Urbana-Champaign.
##

d57 14
a81 1
LANG=C; export LANG
d94 1
a94 2
SUBDIRS="ap main"
APLIBDIRS=""
d98 1
a98 2
## to select an alternate Configuration file and -v
## to turn on verbose mode
a100 4
  if [ "x$1" = "x-v" ] ; then
    shift 1;
    vflag="-v";
  fi
d126 1
a126 1
if ls -lt $file Configuration.tmpl | head -1 | \
d161 1
a161 1
if [ "x$using_shlib" = "x" ]; then
d190 1
a190 1
if [ "x$file" != "xConfiguration.apaci" ]
a239 2
RULE_EXPAT=`./helpers/CutRule EXPAT $file`
RULE_CYGWIN_WINSOCK=`./helpers/CutRule CYGWIN_WINSOCK $file` 
d246 1
a246 1
if [ "x$RULE_SHARED_CORE" = "xyes" ]; then
d257 1
d283 5
a287 5
	OS="MiNT"
	CFLAGS="-DMINT"
	LIBS="$LIBS -lportlib -lsocket"
	DEF_WANTHSREGEX=yes
	;;
d289 1
a289 2
	export OS='MPE/iX'
	OSDIR='os/mpeix'
d291 2
a292 2
	LIBS="$LIBS -lsocket -lsvipc -lcurses"
	LDFLAGS="$LDFLAGS -Xlinker \"-WL,cap=ia,ba,ph;nmstack=1024000\""
d326 3
a328 19
	CFLAGS="$CFLAGS -DAIX=43 -DUSE_PTHREAD_SERIALIZED_ACCEPT -U__STR__"
	LDFLAGS="$LDFLAGS -lm -lpthread"
	RULE_SHARED_CORE=no
	DEF_SHARED_CORE=no
	;;
    *-ibm-aix5.1)
	OS='IBM AIX 5.1'
	CFLAGS="$CFLAGS -DAIX=51 -DUSE_PTHREAD_SERIALIZED_ACCEPT -U__STR__"
	LDFLAGS="$LDFLAGS -lm -lpthread"
	RULE_SHARED_CORE=no
	DEF_SHARED_CORE=no
	;;
    ia64-ibm-aix*)
       OS='IBM AIX IA64'
       CFLAGS="$CFLAGS -DAIXIA64 -U__STR__"
       LDFLAGS="$LDFLAGS -lm"
       RULE_SHARED_CORE=no
       DEF_SHARED_CORE=no
       ;;
d347 2
a348 2
	CFLAGS="$CFLAGS -DOS2 -DTCPIPV4 -g -Zmt"
	LDFLAGS="$LDFLAGS -Zexe -Zmtd -Zsysv-signals -Zbin-files"
d357 1
a357 1
    *-hp*-hpux11.*)
d364 1
a364 1
    *-hp*-hpux10.*)
d371 3
a373 3
	       # Not a problem in 10.20.  Otherwise, who knows?
	       CFLAGS="$CFLAGS -DSELECT_NEEDS_CAST"
	       ;;	     
d377 1
a377 1
    *-hp*-hpux*)
d385 1
a385 1
	# Note: We'd like to see patches to compile 64-bit, but for now...
d390 1
a390 1
	if [ "x$RULE_IRIXNIS" = "xyes" ]; then
d402 2
a403 2
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
	    if [ "x$RULE_IRIXNIS" = "xyes" ]; then
d409 1
a409 1
	    if [ "x$RULE_IRIXNIS" = "xyes" ]; then
a414 1
	CC='cc'
d420 1
a420 1
	if [ "x$RULE_IRIXNIS" = "xyes" ]; then
d429 1
a429 8
    *-linux20)
	DEF_WANTHSREGEX=yes
	OS='Linux'
	CFLAGS="$CFLAGS -DLINUX=20"
	LIBS="$LIBS -lm"
	;;
    *-linux22)
        # This handles linux 2.2 and above (2.4, ...)
d432 1
a432 1
	CFLAGS="$CFLAGS -DLINUX=22"
a434 6
    *-GNU*)
	DEF_WANTHSREGEX=yes
	OS='GNU/Hurd'
	CFLAGS="$CFLAGS -DHURD"
	LIBS="$LIBS -lm -lcrypt"
	;;
a451 5
    *-bsdi3)
        if [ "x$using_shlib" = "x1" ] ; then
            CC="shlicc2"
        fi
        ;;
d469 1
a469 1
	    [2345]*)
a480 2
	DB_LIB=""
	DEF_WANTHSREGEX=no
d493 3
d500 1
a500 6
	CFLAGS="$CFLAGS -DDARWIN -DMAC_OS_X_SERVER"
	DEF_WANTHSREGEX=yes
	;;
    *-apple-darwin*)
	OS='Darwin'
	CFLAGS="$CFLAGS -DDARWIN"
a514 1
        CC='cc -F'
d550 1
a550 1
	LIBS="$LIBS -lsocket -lnsl -lpthread"
d592 1
a592 1
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen -lresolv"
d601 1
a601 21
    *-*-powermax*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lgen"
	LD_SHLIB='cc'
	LDFLAGS_SHLIB="-Zlink=so"
	LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	LDFLAGS_SHLIB_EXPORT="-Zlink=dynamic -Wl,-Bexport"
	CFLAGS_SHLIB='-Zpic'
	;;
    TPF)
       OS='TPF'
       OSDIR='os/tpf'
       CC='c89'
       CFLAGS="$CFLAGS -DTPF -DCHARSET_EBCDIC -D_POSIX_SOURCE"
       DEF_WANTHSREGEX=yes
       LIBS="$LIBS"
       SUBTARGET="target_compile_only"
       ;;
    BS2000*-siemens-sysv4*)
d604 1
a604 2
	# If you are using a CPP before V3.0, delete the -Kno_integer_overflow flag
	CC='c89 -XLLML -XLLMK -XL -Kno_integer_overflow'
a606 6
	DBM_LIB=""
	;;
    *-siemens-sysv4*)
	OS='SVR4'
	CFLAGS="$CFLAGS -DSVR4 -D_XPG_IV -DHAS_DLFCN -DUSE_MMAP_FILES -DNEED_UNION_SEMUN"
	DEF_WANTHSREGEX=yes
a607 1
	DBM_LIB=""
d609 1
a609 1
    pyramid-pyramid-svr4)
d611 1
a611 1
	CFLAGS="$CFLAGS -DSVR4 -DNO_LONG_DOUBLE"
d645 4
a648 11
	PLATOSVERS=`echo $PLAT | sed 's/^.*,//'`
	OS='Amdahl UTS $PLATOSVERS'
	case "$PLATOSVERS" in
	    2*) CFLAGS="$CFLAGS -Xa -eft -DUTS21 -DUSEBCOPY"
	        LIBS="$LIBS -lsocket -lbsd -la"
	        DEF_WANTHSREGEX=yes
	        ;;
	    *)  CFLAGS="$CFLAGS -Xa -DSVR4"
	        LIBS="$LIBS -lsocket -lnsl"
	        ;;
	esac
d677 1
a677 1
    *-sequent-ptx2.*.*)
d679 2
a680 33
	OS='SEQUENT DYNIX/ptx v2.*.*'
	CFLAGS="$CFLAGS -DSEQUENT=20 -Wc,-pw"
	LIBS="$LIBS -lsocket -linet -lnsl -lc -lseq"
	;;
    *-sequent-ptx4.0.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.0.*'
	CFLAGS="$CFLAGS -DSEQUENT=40 -Wc,-pw"
	LIBS="$LIBS -lsocket -linet -lnsl -lc"
	;;
    *-sequent-ptx4.[123].*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.1.*/v4.2.*'
	CFLAGS="$CFLAGS -DSEQUENT=41 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx4.4.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.4.*'
	CFLAGS="$CFLAGS -DSEQUENT=44 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx4.5.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v4.5.*'
	CFLAGS="$CFLAGS -DSEQUENT=45 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
	;;
    *-sequent-ptx5.0.*)
	DEF_WANTHSREGEX=yes
	OS='SEQUENT DYNIX/ptx v5.0.*'
	CFLAGS="$CFLAGS -DSEQUENT=50 -Wc,-pw"
	LIBS="$LIBS -lsocket -lnsl -lc"
d695 2
a696 12
	PLATOSVER=`uname -r`
        case "$PLATOSVER" in
            5.0.4*)
                OS="BeOS BONE"
                LIBS="-lbind -lsocket -lbe -lroot"
                CFLAGS="$CFLAGS -DBONE"
                ;;
            *)
                OS='BeOS';
	        CFLAGS="$CFLAGS -DBEOS"
                ;;
        esac
d700 5
a704 50
	OS='NCR MP/RAS'
	CFLAGS="$CFLAGS -DSVR4 -DMPRAS"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	;;
    drs6000*)
	OS='DRS6000'
	CFLAGS="$CFLAGS -DSVR4"
	DEF_WANTHSREGEX=yes
	LIBS="$LIBS -lsocket -lnsl -lc -L/usr/ucblib -lucb"
	;;
    m88k-*-CX/SX|CYBER)
	OS='Cyberguard CX/SX'
	CFLAGS="$CFLAGS -D_CX_SX -Xa"
	DEF_WANTHSREGEX=yes
	CC='cc'
	RANLIB='true'
	;;
    *-tandem-oss)
	OS='Tandem OSS'
	CFLAGS="-D_TANDEM_SOURCE -D_XOPEN_SOURCE_EXTENDED=1"
	CC='c89'
	;;
    *-IBM-OS390*)
       OS='OS390'
       OSDIR='os/os390'
       CC='c89'
       CFLAGS="$CFLAGS -DOS390 -DCHARSET_EBCDIC -D_ALL_SOURCE"
       DEF_WANTHSREGEX=yes
       LIBS="$LIBS"
       ;;
    *-cygwin*)
	OS='Cygwin'
	OSDIR="os/cygwin"
	CFLAGS="$CFLAGS -DCYGWIN"
	DEF_WANTHSREGEX=yes
	DBM_LIB="-lgdbm"
	LIBS="$LIBS -lcrypt $DBM_LIB"
	if [ "x$RULE_CYGWIN_WINSOCK" = "xyes" ]; then 
	    CFLAGS="$CFLAGS -DCYGWIN_WINSOCK" 
	    LIBS="$LIBS -lwsock32" 
	fi 

	;;
    *atheos*)
	DEF_WANTSREGEX=yes
	OS='AtheOS'
	CFLAGS="$CFLAGS -DATHEOS"
	LIBS="$LIBS -lcrypt"
	;;
d706 1
a706 1
	OS='Unknown and unsupported OS'
d720 3
a722 3
	echo form at http://bugs.apache.org/.  If you don\'t 
	echo wish to do the port yourself, please submit this output rather 
	echo than the patches. Thank you.
a731 7
## set this if we haven't
##
if [ "x${MAKE}" = "x" ]; then
    MAKE='make'; export MAKE
fi

####################################################################
a737 10
# Continue building the stub file
# Set variables as soon as possible so that TestCompile can use them
##
echo >>Makefile.config "OSDIR=\$(SRCDIR)/$OSDIR"
echo >>Makefile.config "INCDIR=\$(SRCDIR)/include"
echo >>Makefile.config "INCLUDES0=-I\$(OSDIR) -I\$(INCDIR)"
echo >>Makefile.config "SHELL=$SHELL"
echo >>Makefile.config "OS=$OS"

####################################################################
d740 1
a740 1
if [ "x$RULE_WANTHSREGEX" = "xdefault" ]; then
d764 2
a765 2
	# At this point, CC is not set in Configuration or above, so we
	# try to find one
d802 2
a803 2
if [ "x$TCPP" != "x" ]; then
    CPP=`CPP="$TCPP"; export CPP CC; ./helpers/findcpp.sh`
d805 1
a805 1
    CPP=`export CC; ./helpers/findcpp.sh`
d807 1
a807 1
if [ "x$TCPP" = "x" ]; then
d826 1
a826 3
CHECK_FOR_HEADERS="dlfcn.h dl.h bstring.h crypt.h unistd.h sys/resource.h sys/select.h sys/processor.h sys/param.h"
(
export CPP
d831 1
a831 1
    ./helpers/checkheader.sh $header
d833 3
a835 3
	echo "#ifndef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#define HAVE_${name} 1" >>$AP_CONFIG_AUTO_H
	echo "#endif" >>$AP_CONFIG_AUTO_H
d837 3
a839 3
	echo "#ifdef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#undef HAVE_${name}" >>$AP_CONFIG_AUTO_H
	echo "#endif" >>$AP_CONFIG_AUTO_H
a841 1
)
d848 5
a852 5
	CPP=$CPP ./helpers/checkheader.sh sys/processor.h
	if [ $? -eq 0 ]; then
	    CFLAGS="$CFLAGS -DAIX_BIND_PROCESSOR"
	fi
	;;
a859 1
TTARGET=`egrep '^TARGET=' Makefile.config | tail -1 | awk -F= '{print $2}'`
a865 1
TLDFLAGS_MOD_SHLIB=`egrep '^LDFLAGS_MOD_SHLIB=' Makefile.config | tail -1 | awk -F= '{print $2}'`
a869 14
## Handle TARGET name
##
if [ "x$TTARGET" = "x" ]; then
    TARGET=httpd
    echo "TARGET=$TARGET" >> Makefile.config
else
    TARGET=$TTARGET
fi
if [ "x$TARGET" != "xhttpd" ]; then
    echo " + using custom target name: $TARGET"
    CFLAGS="$CFLAGS -DTARGET=\\\"$TARGET\\\""
fi

####################################################################
a877 1
    SHMOD_SUFFIX_NAME=so
a879 2
    SHARED_CORE_EP='lib$(TARGET).ep'
    SHCORE_IMPLIB=''
d881 62
a942 129
	*MPE/iX*)
	    LD_SHLIB=ld	
	    LDFLAGS_SHLIB='-b -a archive'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-linux1)
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-Bshareable"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    ;;
	*-linux2*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    SHLIB_SUFFIX_DEPTH=0
	    ;;
	*-freebsd2*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
	    ;;
	*-freebsd[3-9]*)
		LD_SHLIB="gcc"
	    CFLAGS_SHLIB="-fpic"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    OBJFORMAT=`test -x /usr/bin/objformat && /usr/bin/objformat || echo aout` 
	    if [ "x$OBJFORMAT" = "xelf" ]; then
		LDFLAGS_SHLIB_EXPORT="-Wl,-E"
		SHLIB_SUFFIX_DEPTH=0
	    else
		LDFLAGS_SHLIB_EXPORT=""
		SHLIB_SUFFIX_DEPTH=2
	    fi  
	    ;;
	*-openbsd*)
	    PLATOSVERS=`echo $PLAT | sed 's/^.*openbsd//'`
	    CFLAGS_SHLIB="-fPIC"
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=2
	    case "$PLATOSVERS" in
		[01].*|2.[0-7]|2.[0-7].*)
		   LDFLAGS_SHLIB="-Bshareable"
		;;
		*)
		   LD_SHLIB="gcc"
		   LDFLAGS_SHLIB="-shared \$(CFLAGS_SHLIB)"
		   if [ "x`echo __ELF__ | $CC -E - | grep __ELF__`" = "x" ]; then
		     LDFLAGS_SHLIB_EXPORT="-Wl,-E"
		   fi
		;;
	    esac
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-netbsd*)
	    CFLAGS_SHLIB="-fPIC -DPIC"
	    if echo __ELF__ | ${CC} -E - | grep -q __ELF__; then
		LDFLAGS_SHLIB="-Bshareable"
		LDFLAGS_SHLIB_EXPORT=""
	    else
		LDFLAGS_SHLIB="-shared"
		LDFLAGS_SHLIB_EXPORT="-Wl,-E"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_DEPTH=2
	    ;;
	*-bsdi3)
	    LD_SHLIB="shlicc2"
	    LDFLAGS_SHLIB="-r"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    ;;
	*-bsdi)
	    CFLAGS_SHLIB="-fPIC"
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-rdynamic"
	    ;;
 	*-next-openstep*)
 	    LD_SHLIB='cc'
 	    CFLAGS_SHLIB='-dynamic -fno-common'
 	    LDFLAGS_SHLIB='-bundle -undefined warning'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
 	    LDFLAGS_SHLIB_EXPORT=''
 	    SHLIB_SUFFIX_DEPTH=0
 	    ;;
	*-apple-rhapsody* | *-apple-darwin* )
	    LD_SHLIB="cc"
	    CFLAGS_SHLIB=""
	    case "$PLAT" in
		*-apple-rhapsody* | *-apple-darwin1.[0-3]* )
		    LDFLAGS_SHLIB='$(EXTRA_LDFLAGS) -bundle -undefined suppress'
		    ;;
		* )
		    LDFLAGS_SHLIB='$(EXTRA_LDFLAGS) -bundle -undefined suppress -flat_namespace'
		    ;;
	    esac
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    ;;
	*-solaris2*)
	    if [ "x`$CC -v 2>&1 | grep gcc`" != "x" ]; then
	        CFLAGS_SHLIB="-fPIC"
	    else
	        CFLAGS_SHLIB="-KPIC"
	    fi
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=1
	    ;;
	*-sunos4*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fPIC" ;;
		*/acc|acc ) CFLAGS_SHLIB="-pic" ;;
	    esac
	    LDFLAGS_SHLIB="-assert pure-text"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix32)
	    case $CC in
		*/gcc|gcc )
d946 1
a946 1
		*/cc|cc )
d950 11
a960 12
	    esac
	    if [ "x$RULE_IRIXN32" = "xyes" ]; then
		LDFLAGS_SHLIB="$N32FLAG -shared"
	    else
		LDFLAGS_SHLIB="-shared"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix64)
	    case $CC in
		*/gcc|gcc )
d964 1
a964 1
		*/cc|cc )
d968 159
a1126 243
	    esac
	    if [ "x$RULE_IRIXN32" = "xyes" ]; then
		LDFLAGS_SHLIB="$N32FLAG -shared"
	    else
		LDFLAGS_SHLIB="-shared"
	    fi
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-sgi-irix)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-shared"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-dec-osf*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="" ;;
	    esac
	    LDFLAGS_SHLIB='-shared -expect_unresolved "*" -s'
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    ;;
	*-unixware*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-Bdynamic -G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    ;;
	 *-sco5*)
	     case $CC in
		 */gcc*|gcc* ) CFLAGS_SHLIB="-fpic" ;;
		 */cc*|cc*   ) CFLAGS_SHLIB="-KPIC" ;;
	     esac
	     LDFLAGS_SHLIB="-G"
	     LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	     SHLIB_SUFFIX_DEPTH=1
	     ;;
	*-sequent-ptx*)
	    case $PLAT in
	       *-sequent-ptx2*)
	           ;;
	       *-sequent-ptx4.0*)
	           ;;
	       *-sequent-ptx*)
	           CFLAGS_SHLIB="-KPIC"
	           LDFLAGS_SHLIB="-G"
	           LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	           LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	           ;;
	    esac
	    ;;
	RM*-siemens-sysv4*)
	    # MIPS hosts can take advantage of the LDFLAGS_SHLIB_EXPORT switch
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Blargedynsym"
	    ;;
	BS2000-siemens-sysv4*)
	    CFLAGS_SHLIB="-K PIC"
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    DEF_SHARED_CORE=no
	    ;;
	*-siemens-sysv4*)
	    # Older SINIX machines must be linked as "shared core"-Apache
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*)          CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    SHLIB_SUFFIX_DEPTH=0
	    DEF_SHARED_CORE=yes
	    ;;
	*-sysv4*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
	    DEF_SHARED_CORE=yes
	    ;;
	*-hp-hpux9.*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="+z" ;;
	    esac
	    LDFLAGS_SHLIB="-b"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred"
	    SHLIB_SUFFIX_NAME=sl
	    ;;
	*-hp-hpux10.*|*-hp-hpux11.*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="+z" ;;
	    esac
	    LDFLAGS_SHLIB="-b"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-E -Wl,-B,deferred -Wl,+s"
	    SHLIB_SUFFIX_NAME=sl
	    ;;
       ia64-ibm-aix*)
           case $CC in
               */gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
               */cc|cc   ) CFLAGS_SHLIB="" ;;
           esac
           LDFLAGS_SHLIB=" -L /usr/lib/ia64l32 -G "
           LDFLAGS_MOD_SHLIB="$LDFLAGS_SHLIB -bI:@@libexecdir@@/httpd.exp -lc"
           LDFLAGS_SHLIB="$LDFLAGS_SHLIB -Bexport:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
           LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
           LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport:\$(SRCDIR)/support/httpd.exp"
           SHLIB_EXPORT_FILES=yes
           ;;
	*-ibm-aix*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="" ;;
	    esac
	    case $PLAT in
		*-ibm-aix4*)
		    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -bnoentry"
		    ;;
		*-ibm-aix*)
		    LDFLAGS_SHLIB="-H512 -T512 -bhalt:4 -bM:SRE -e _nostart"
		    ;;
	    esac
	    LDFLAGS_MOD_SHLIB="$LDFLAGS_SHLIB -bI:@@libexecdir@@/httpd.exp -lc"
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bI:\$(SRCDIR)/support/httpd.exp "
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -bE:\`echo \$@@|sed -e 's:\.so\$\$:.exp:'\`"
	    LDFLAGS_SHLIB="$LDFLAGS_SHLIB -lc"
	    LDFLAGS_SHLIB_EXPORT="-Wl,-bE:\$(SRCDIR)/support/httpd.exp"
	    SHLIB_EXPORT_FILES=yes
	    ;;
	*-*-powermax*)
	    LD_SHLIB='cc'
	    LDFLAGS_SHLIB="-Zlink=so"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Zlink=dynamic -Wl,-Bexport"
	    CFLAGS_SHLIB='-Zpic'
	    ;;
	*-OS/2*)
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="`echo $LDFLAGS|sed -e s/-Zexe//` -Zdll"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_NAME=dll
	    SHMOD_SUFFIX_NAME=dll
	    SHLIB_SUFFIX_DEPTH=0
	    LD_SHLIB=$CC
	    LD_SHCORE_DEF="ApacheCoreOS2.def"
	    LD_SHCORE_LIBS="$LIBS"
	    LIBS_SHLIB='$(SRCDIR)/ApacheCoreOS2.a -lsocket -lbsd $(EXTRA_LIBS)'
	    SHARED_CORE_EP=''
	    SHCORE_IMPLIB='ApacheCoreOS2.a'
	    OS_MODULE_INCLUDE='Makefile.OS2'
	    ;;
	*-dgux)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
	    esac
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="-G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT=""
            ;;
	*-cygwin*)
	    DEF_SHARED_CORE=yes
	    LDFLAGS_SHLIB="--export-all"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    SHLIB_SUFFIX_NAME=dll
	    SHMOD_SUFFIX_NAME=dll
	    SHLIB_SUFFIX_DEPTH=0
	    LD_SHLIB='dllwrap'
	    LD_SHCORE_DEF=''
	    LD_SHCORE_LIBS="$LIBS"
	    LIBS_SHLIB='$(EXTRA_LIBS)'
	    SHARED_CORE_EP='lib$(TARGET).ep'
	    SHCORE_IMPLIB='lib$(TARGET).dll'
	    OS_MODULE_INCLUDE='$(SRCDIR)/modules/standard/Makefile.Cygwin'
	    ;;
	*)
	    ##  ok, no known explict support for shared objects
	    ##  on this platform, but we give not up immediately.
	    ##  We take a second chance by guessing the compiler
	    ##  and linker flags from the Perl installation
	    ##  if it exists.
	    PERL=
	    for dir in `echo $PATH | sed -e 's/:/ /g'`
	    do
		if [ -f "$dir/perl5" ]; then
		    PERL="$dir/perl5"
		    break
		fi
		if [ -f "$dir/perl" ]; then
		    PERL="$dir/perl"
		    break
		fi
	    done
	    if [ "x$PERL" != "x" ]; then
		#   cool, Perl is installed on this platform...
		if [ "x`$PERL -V:dlsrc 2>/dev/null | grep dlopen`" != "x" ]; then
		    #   ...and actually uses the dlopen-style interface,
		    #   so we can guess the flags from its knowledge
		    CFLAGS_SHLIB="`$PERL -V:cccdlflags | cut -d\' -f2`"
		    LDFLAGS_SHLIB="`$PERL -V:lddlflags | cut -d\' -f2`"
		    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
		    LDFLAGS_SHLIB_EXPORT="`$PERL -V:ccdlflags | cut -d\' -f2`"
		    #   but additionally we have to inform the
		    #   user that we are just guessing the flags
		    echo ""
		    echo "** WARNING: We have no explicit knowledge about shared object"
		    echo "** support for your particular platform. But perhaps you have"
		    echo "** luck: We were able to guess the compiler and linker flags"
		    echo "** for creating shared objects from your Perl installation."
		    echo "** If they actually work, please send the following information"
		    echo "** for inclusion into later releases to new-httpd@@apache.org or make"
		    echo "** a suggestion report at http://bugs.apache.org/:"
		    echo "**     PLATFORM=$PLAT"
		    echo "**     CFLAGS_SHLIB=$CFLAGS_SHLIB"
		    echo "**     LDFLAGS_SHLIB=$LDFLAGS_SHLIB"
		    echo "**     LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT"
		    echo ""
		fi
	    fi
	    ;;
d1135 11
a1145 11
    if [ "x$TCFLAGS_SHLIB"  = "x" -a "x$CFLAGS_SHLIB"  = "x"  -a \
	 "x$TLDFLAGS_SHLIB" = "x" -a "x$LDFLAGS_SHLIB" = "x" ]; then
	echo ""
	echo "** FAILURE: Sorry, no shared object support available."
	echo "** Either compile all modules statically (use AddModule instead"
	echo "** of SharedModule in the Configuration file) or at least provide"
	echo "** us with the appropriate compiler and linker flags via the"
	echo "** CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT entries"
	echo "** in the Configuration file."
	echo ""
	exit 1
d1169 1
a1169 1
		CFLAGS="$CFLAGS -Aa -Ae -D_HIUX_SOURCE"
d1178 1
a1178 1
		CFLAGS="$CFLAGS -Aa -Ae -D_HPUX_SOURCE"
d1185 1
a1185 1
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
d1195 1
a1195 1
	if [ "x$RULE_IRIXN32" = "xyes" ]; then
a1210 7
    'IBM AIX IA64')
       case $CC in
           */cc|cc )
               CFLAGS="$CFLAGS -qnogenpcomp -qnousepcomp"
           ;;
       esac
       ;;
d1223 3
a1225 3
if [ "x$RANLIB" = "x" ]; then
    if [ "x$TRANLIB" != "x" ]; then
	RANLIB=$TRANLIB
d1227 5
a1231 5
	if ./helpers/PrintPath -s ranlib; then
	    RANLIB="ranlib"
	else
	    RANLIB="true"
	fi
d1251 2
a1252 3
	if ./helpers/TestCompile lib nsl; then
	    LIBS="$LIBS -lnsl"
	    TLIB='-lnsl'
a1253 18
	if TLIB=$TLIB ./helpers/TestCompile lib socket; then
	    LIBS="-lsocket $LIBS"
	fi
	;;
    BS2000*-siemens-sysv4*)
	# Activate RISC compilation if this is a SR2000 machine
	# (test written by Thomas Dorner <Thomas.Dorner@@start.de>
	# for perl5 port):
	ISSR2000="`bs2cmd SHOW-SYSTEM-INFO | grep 'HSI-ATT'`"
	case "$ISSR2000" in
	    *TYPE*SR*)
	        CFLAGS="$CFLAGS -Krisc_4000"
	        ;;
	esac
	# Depending on the BS2000 OS and compiler/crte release,
	# -lnsl may be available (or may be not).
	# In standard SVR4 systems, -lsocket relies on some symbols
	# from -lnsl, so the test for -lnsl must appear first.
a1255 29
	    TLIB='-lnsl'
	fi
	if TLIB=$TLIB ./helpers/TestCompile lib socket; then
	    LIBS="-lsocket $LIBS"
	fi
	# Auto-detect presence of libdl for dynamic loading
	if ./helpers/TestCompile lib dl; then
	    if ./helpers/TestCompile func dlopen; then
		LIBS="$LIBS -ldl"
		TLIB='-ldl'
	    fi
	fi
	# Test for the presence of the "union semun":
	if TCADDINCL='#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>' ./helpers/TestCompile sizeof "union semun"; then
            : Okay, union semun is defined
	else
	    CFLAGS="$CFLAGS -DNEED_UNION_SEMUN"
	fi
	# Test for the presence of the _rini_struct typedef:
	if TCADDINCL='#include <pwd.h>' ./helpers/TestCompile sizeof _rini_struct; then
	    CFLAGS="$CFLAGS -DHAVE_RINI_STRUCT"
	fi
	# Test whether initgroups() must be emulated:
	if ./helpers/TestCompile func initgroups; then
	    :
	else
	    CFLAGS="$CFLAGS -DNEED_INITGROUPS"
d1264 1
a1264 1
if [ "x$RULE_SOCKS4" = "xyes" ]; then
d1269 1
a1269 1
    if [ "x`egrep '^EXTRA_L' Makefile.config | grep lsocks`" = "x" ]; then
d1273 3
a1275 3
	*-solaris2* )
	    LIBS="$LIBS -lresolv"
	    ;;
d1283 1
a1283 1
if [ "x$RULE_SOCKS5" = "xyes" ]; then
d1288 2
a1289 2
    if [ "x`egrep '^EXTRA_L' Makefile.config | grep lsocks5`" = "x" ]; then
	LIBS="$LIBS -L/usr/local/lib -lsocks5"
d1292 3
a1294 3
	*-solaris2* )
	    LIBS="$LIBS -lresolv"
	    ;;
d1318 1
a1318 1
##  2 If extension is .module, go to D1
d1395 3
a1397 3
	if [ "x$ext" = "x$modfile" ]; then ext=o; modbase=$modfile; modfile=$modbase.o; fi
	if [ "x$ext" = "x" ] ; then ext=o; modbase=$modfile; fi
	if [ "x$ext" = "xc" ] ; then ext=o; fi
d1405 1
a1405 1
		# Guess module structure name in case there is no
d1426 1
a1426 1
		    if [ "x$RULE_PARANOID" = "xyes" ]; then
a1430 5
		if grep "Libs:" $tmpfile2 > /dev/null; then
		    modlibs1=`grep Libs: $tmpfile2 | sed 's/^.*Libs:[ 	]*//'`
		    echo "    o $modbase adds libraries: $modlibs1"
		    modlibs="$modlibs $modlibs1"
		fi
d1432 1
a1432 1
		if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
d1440 1
a1440 1
	if [ "x$ext" != "x$SHMOD_SUFFIX_NAME" ]; then
d1444 1
a1444 1
	if [ "x$ext" = "x$SHMOD_SUFFIX_NAME" -a "x$SHLIB_EXPORT_FILES" = "xyes" ]; then
d1454 1
a1454 1
if [ "x$RULE_WANTHSREGEX" = "xyes" ]; then
a1460 30
## Add in the Expat library if needed/wanted.
##

# set the default, based on whether expat-lite is bundled. if it is present,
# then we can always include expat.
if [ "x$RULE_EXPAT" = "xdefault" ]; then
    if [ -d ./lib/expat-lite/ ]; then
        RULE_EXPAT=yes
    else
        RULE_EXPAT=no
    fi
fi

if [ "x$RULE_EXPAT" = "xyes" ]; then
    if ./helpers/TestCompile lib expat; then
        echo " + using system Expat"
        LIBS="$LIBS -lexpat"
    else
        if [ ! -d ./lib/expat-lite/ ]; then
            echo "ERROR: RULE_EXPAT set to \"yes\" but is not available."
	    exit 1
        fi
        echo " + using builtin Expat"
        EXPATLIB="lib/expat-lite/libexpat.a"
        APLIBDIRS="expat-lite $APLIBDIRS"
        CFLAGS="$CFLAGS -DUSE_EXPAT -I\$(SRCDIR)/lib/expat-lite"
    fi
fi

####################################################################
d1463 1
d1465 2
a1466 2
    if [ "x$RULE_SHARED_CHAIN" = "xdefault" ] ; then
	RULE_SHARED_CHAIN=$DEF_SHARED_CHAIN
d1468 8
a1475 8
    if [ "x$RULE_SHARED_CHAIN" = "xyes" ]; then
	echo " + enabling DSO files to be linked against others"
	#   determine libraries which can be safely linked
	#   to our DSO files, i.e. PIC libraries and shared libraries
	extra_ldflags="`grep EXTRA_LDFLAGS= Makefile.config`"
	extra_libs="`grep EXTRA_LIBS= Makefile.config`"
	eval "`./helpers/slo.sh $LDFLAGS $LIBS $extra_ldflags $extra_libs`"
	LIBS_SHLIB="$SLO_DIRS_PIC $SLO_LIBS_PIC $SLO_DIRS_DSO $SLO_LIBS_DSO"
d1483 2
a1484 2
    if [ "x$RULE_SHARED_CORE" = "xdefault" ] ; then
	RULE_SHARED_CORE=$DEF_SHARED_CORE
d1486 26
a1511 30
    if [ "x$RULE_SHARED_CORE" = "xyes" ]; then
	DSO_STRING="DSO"
	if [ "$OS" = "Cygwin" ]; then
	    DSO_STRING="DLL"
	fi
	echo " + enabling generation of Apache core as $DSO_STRING"
	#    shuffle compiler flags from shlib variant to standard
	CFLAGS="$CFLAGS $CFLAGS_SHLIB"
	CFLAGS_SHLIB=""
	#    indicate that Rule SHARED_CORE is active
	CFLAGS="$CFLAGS -DSHARED_CORE"
	#    select the special subtarget for shared core generation
	SUBTARGET=target_shared
	#    determine additional suffixes for libhttpd.so
	V=1 R=3 P=26
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x0" ]; then
	    SHLIB_SUFFIX_LIST=""
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x1" ]; then
	    SHLIB_SUFFIX_LIST="$V"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x2" ]; then
	    SHLIB_SUFFIX_LIST="$V.$R"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "x3" ]; then
	    SHLIB_SUFFIX_LIST="$V.$R.$P"
	fi
	if [ "x$SHLIB_SUFFIX_DEPTH" = "xall" ]; then
	    SHLIB_SUFFIX_LIST="$V $V.$R $V.$R.$P"
	fi
a1515 8
## Don't force DL emulation, if not necessary. Currently only used
## by os/unix/os.c. 
##
if [ "x$using_shlib" != "x1" ] ; then
    CFLAGS="$CFLAGS -DNO_DL_NEEDED"
fi

####################################################################
d1521 1
a1521 1
	echo "CFLAGS_SHLIB=$CFLAGS_SHLIB -DSHARED_MODULE" >> Makefile.config
d1524 1
a1524 1
	echo "LD_SHLIB=$LD_SHLIB" >> Makefile.config
d1527 1
a1527 1
	echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB" >> Makefile.config
d1530 1
a1530 4
	echo "LDFLAGS_SHLIB_EXPORT=$LDFLAGS_SHLIB_EXPORT" >> Makefile.config
    fi
    if [ "x$TLDFLAGS_MOD_SHLIB" = "x" ]; then
	echo "LDFLAGS_MOD_SHLIB=$LDFLAGS_MOD_SHLIB" >> Makefile.config
a1531 4
    echo "LD_SHCORE_DEF=$LD_SHCORE_DEF" >> Makefile.config
    echo "LD_SHCORE_LIBS=$LD_SHCORE_LIBS" >> Makefile.config
    echo "SHARED_CORE_EP=$SHARED_CORE_EP" >> Makefile.config
    echo "SHCORE_IMPLIB=$SHCORE_IMPLIB" >> Makefile.config
d1537 1
a1537 1
$CAT > $awkfile <<'EOFM'
d1585 1
a1585 3
    }
EOFM
$CAT $tmpfile | sed 's/_module//' | awk -f $awkfile > modules.c 
d1633 1
a1633 1
		if (tdir == dir) 
d1670 2
a1671 1
echo "SUBDIRS=$SUBDIRS lib modules" >> Makefile
a1673 1
echo "SHMOD_SUFFIX_NAME=$SHMOD_SUFFIX_NAME" >> Makefile
a1674 1
echo "SHLIB_EXPORT_FILES=$SHLIB_EXPORT_FILES" >> Makefile
d1678 8
d1690 1
a1690 1
if [ "x`${MAKE} -v 2>/dev/null | grep 'GNU Make'`" = "x" ]; then
d1701 11
a1711 8
echo "CFLAGS1=$CFLAGS" >>Makefile.config
echo "INCLUDES1=$INCLUDES" >>Makefile.config
echo "LIBS_SHLIB=$LIBS_SHLIB" >>Makefile.config
echo "LDFLAGS1=$LDFLAGS" >>Makefile.config
echo "MFLAGS_STATIC=$MFLAGS_STATIC" >>Makefile.config
echo "REGLIB=$REGLIB" >>Makefile.config
echo "EXPATLIB=$EXPATLIB" >>Makefile.config
echo "RANLIB=$RANLIB" >>Makefile.config
d1720 21
a1740 35
       ia64-ibm-aix* )
           DL_LIB="-ldl"
           ;;
	*-ibm-aix* )
	    DL_LIB="-lld"
	    ;;
	*-sequent-ptx* )
	    case $PLAT in
	        *-sequent-ptx2*)
	            ;;
	        *-sequent-ptx4.0*)
	            ;;
	        *-sequent-ptx*)
	            DL_LIB="-ldl"
	            ;;
	    esac
	    ;;
	*-hp-hpux*)
	    if ./helpers/TestCompile func shl_load; then
		:
	    else
		if ./helpers/TestCompile lib dld; then
		    DL_LIB="-ldld"
		fi
	    fi
	    ;;
	* )
	    if ./helpers/TestCompile func dlopen; then
		:
	    else
		if ./helpers/TestCompile lib dl; then
		    DL_LIB="-ldl"
		fi
	    fi
	    ;;
d1742 3
a1744 61
    if [ "x$DL_LIB" != "x" ]; then
	LIBS="$LIBS $DL_LIB"
	echo " + using $DL_LIB for vendor DSO support"
    fi
fi

####################################################################
## More building ap_config_auto.h
##
## We check the sizeof various data types
##
echo " + checking sizeof various data types"
AP_TYPE_QUAD=`./helpers/TestCompile -r sizeof 'long long'`
if [ "x$AP_TYPE_QUAD" = "x" ]; then
    AP_TYPE_QUAD="unknown_quad"
    AP_LONGEST_LONG="long"
else
    AP_LONGEST_LONG="long long"
fi

echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: longest possible integer type */" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_LONGEST_LONG" >>$AP_CONFIG_AUTO_H
echo "#define AP_LONGEST_LONG $AP_LONGEST_LONG" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

####################################################################
## More building ap_config_auto.h
##
## Check for availability of isinf() and isnan()
##
if ./helpers/TestCompile func isinf ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isinf() found in libc */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISINF" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISINF 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
elif ./helpers/TestCompile lib m isinf ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isinf() found in libm */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISINF" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISINF 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
    LIBS="$LIBS -lm"
    ADDED_LM="yes"
fi

if ./helpers/TestCompile func isnan ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isnan() found in libc */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISNAN" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISNAN 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
elif ./helpers/TestCompile lib m isnan ; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: isnan() found in libm */ " >>$AP_CONFIG_AUTO_H
    echo "#ifndef HAVE_ISNAN" >>$AP_CONFIG_AUTO_H
    echo "#define HAVE_ISNAN 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
    if [ "x$ADDED_LM" != "xyes" ]; then
        LIBS="$LIBS -lm"
a1747 64
## We check for the endianess of the machine
##
AP_BYTE_ORDER=`./helpers/TestCompile -r byteorder`
if [ "x$AP_BYTE_ORDER" = "x21" ]; then
    AP_BYTE_ORDER="21" # big endian
else
    AP_BYTE_ORDER="12" # little endian
fi

echo "" >>$AP_CONFIG_AUTO_H
echo "/* determine: byte order of machine (12: little endian, 21: big endian) */" >>$AP_CONFIG_AUTO_H
echo "#ifndef AP_BYTE_ORDER" >>$AP_CONFIG_AUTO_H
echo "#define AP_BYTE_ORDER $AP_BYTE_ORDER" >>$AP_CONFIG_AUTO_H
echo "#endif" >>$AP_CONFIG_AUTO_H

##
## Now compare the sizes of off_t to long
##
AP_TYPE_OFF_T=`./helpers/TestCompile -r sizeof off_t`
if [ "x$AP_TYPE_OFF_T" = "x" ]; then
    AP_TYPE_OFF_T="unknown_off_t"
fi

AP_TYPE_LONG=`./helpers/TestCompile -r sizeof long`
if [ "x$AP_TYPE_LONG" = "x" ]; then
    AP_TYPE_LONG="unknown_long"
fi

if [ "x$AP_TYPE_OFF_T" != "x$AP_TYPE_LONG" ]; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is off_t a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifndef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#define AP_OFF_T_IS_QUAD 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
else
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is off_t a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifdef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#undef AP_OFF_T_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
fi

##
## Now see of void * is as big as a quad (long long)
##
AP_TYPE_VOID_P=`./helpers/TestCompile -r sizeof 'void *'`
if [ "x$AP_TYPE_VOID_P" = "x" ]; then
    AP_TYPE_VOID_P="unknown_void_p"
fi

if [ "x$AP_TYPE_VOID_P" = "x$AP_TYPE_QUAD" ]; then
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is void * a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifndef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#define AP_VOID_P_IS_QUAD 1" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
else
    echo "" >>$AP_CONFIG_AUTO_H
    echo "/* determine: is void * a quad */" >>$AP_CONFIG_AUTO_H
    echo "#ifdef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#undef AP_VOID_P_IS_QUAD" >>$AP_CONFIG_AUTO_H
    echo "#endif" >>$AP_CONFIG_AUTO_H
fi

d1755 2
a1756 8
TEXTRA_CFLAGS=`egrep '^EXTRA_CFLAGS=' Makefile.config | tail -1 |\
	       sed -e 's;^EXTRA_CFLAGS=;;' -e 's;\`.*\`;;'`
tmpstr=`echo $CFLAGS $TEXTRA_CFLAGS |\
	sed -e 's;[ 	]\([+-]\);!\1;g' -e 's/\([^\\\]\)"/\1/g' -e 's/\\\"/\"/g'`
OIFS="$IFS"
IFS='!'
for cflag in $tmpstr; do
    echo "$cflag" >>$tmpconfig
a1757 1
IFS="$OIFS"
d1759 5
a1763 5
    /^-D.*/ {
	i = index($0, "=")
	if (i > 0) {
	    define = substr($0, 3, i-3)
	    value  = substr($0, i+1, length($0)-i)
a1764 7
	else {
	    define = substr($0, 3, length($0)-2)
	    value  = "1";
	}
	printf ("\n/* build flag: %s */\n", $0)
	printf ("#ifndef %s\n#define %s %s\n#endif\n", define, define, value)
    }
d1774 1
a1774 1
echo "LIBS1=$modlibs $LIBS">> Makefile.config
d1784 2
a1785 2

if [ "x$OS" = "xTPF" ] ; then
d1788 8
a1795 22
   echo " + doing sanity check on compiler and options"
   if ./helpers/TestCompile $vflag sanity; then
      :
   else
      if [ "x$vflag" = "x-v" ] ; then
         WHEREERR="above"
      else
         WHEREERR="below"
      fi
      echo "** A test compilation with your Makefile configuration"
      echo "** failed.  The $WHEREERR error output from the compilation"
      echo "** test will give you an idea what is failing. Note that"
      echo "** Apache requires an ANSI C Compiler, such as gcc. "
      echo ""
      echo "======== Error Output for sanity check ========"
      (./helpers/TestCompile -v sanity) 2>&1
      echo "============= End of Error Report ============="
      echo ""
      echo " Aborting!"
      exitcode=1
      exit 1
   fi
d1807 1
a1807 1
MAKEDIRS="support $SUBDIRS"
a1815 34
## Now create the lib/Makefile
##
./helpers/mfhead modules $file > lib/Makefile
$CAT Makefile.config | sed -e 's:^SRCDIR=.*:SRCDIR=..:' >> lib/Makefile

$CAT << EOF >> lib/Makefile
APLIBS=$APLIBDIRS
CFLAGS=\$(OPTIM) \$(CFLAGS1) \$(EXTRA_CFLAGS)

default: all

all clean distclean depend :: 
	@@for i in \$(APLIBS) ""; do \\
	  if [ "x\$\$i" != "x" ]; then \\
	    echo "===> \$(SDP)lib/\$\$i"; \\
		(cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' \$@@) || exit 1; \\
		echo "<=== \$(SDP)lib/\$\$i"; \\
	  fi; \\
	done

EOF

####################################################################
## Now create the lib/xxx/Makefile
##

for dir in $APLIBDIRS ; do
	echo Creating Makefile in lib/$dir
	./helpers/mfhead lib/$dir $file > lib/$dir/Makefile
	$CAT Makefile.config lib/$dir/Makefile.tmpl |\
	sed -e "s:^SRCDIR=.*:SRCDIR=`./helpers/fp2rp lib/$dir`:" >> lib/$dir/Makefile
done

####################################################################
d1828 1
a1828 2
	@@for i in \$(MODULES) ""; do \\
	  if [ "x\$\$i" != "x" ]; then \\
d1830 1
a1830 4
		case "x\$(OS)" in \\
		  xOS390 | xTPF) (cd \$\$i && \$(MAKE) SDP='\$(SDP)' OPTIM='\$(OPTIM)' \$@@) || exit 1;; \\
		              *) (cd \$\$i && \$(MAKE) \$(MFLAGS_STATIC) SDP='\$(SDP)' CC='\$(CC)' AUX_CFLAGS='\$(CFLAGS)' RANLIB='\$(RANLIB)' OPTIM='\$(OPTIM)' \$@@) || exit 1;; \\
		esac; \\
a1831 1
	  fi; \\
d1877 1
a1877 1
	    if [ "x$OBJS" != "x" ]; then
d1895 1
a1895 1
	    }'
d1910 1
a1910 1
.SUFFIXES: .o .so .dll
d1931 1
a1931 1
		   -e '1,$$s: $(OSDIR)/: $$(OSDIR)/:g' Makefile.new \
a1935 4
	fi

	if [ "x$OS_MODULE_INCLUDE" != "x" ]; then
		echo "include $OS_MODULE_INCLUDE" >> $moddir/Makefile
@


1.1.1.4
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@a633 6
    *-OpenUNIX)
	OS='OpenUNIX'
	CFLAGS="$CFLAGS -DUW=800"
	LIBS="$LIBS -lsocket -lnsl -lcrypt -lgen -lresolv"
	DBM_LIB=""
	;;
a1270 10
	*-OpenUNIX*)
	    case $CC in
		*/gcc|gcc ) CFLAGS_SHLIB="-fpic" ;;
		*/cc|cc   ) CFLAGS_SHLIB="-KPIC" ;;
	    esac
	    LDFLAGS_SHLIB="-Bdynamic -G"
	    LDFLAGS_MOD_SHLIB=$LDFLAGS_SHLIB
	    LDFLAGS_SHLIB_EXPORT="-Wl,-Bexport"
	    LD_SHLIB=$CC
	    ;;
a1871 66
## Extended API (EAPI) support:
##
if [ "x$RULE_EAPI" = "x" ]; then
    RULE_EAPI=`./helpers/CutRule EAPI $file`
fi
if [ "x$RULE_EAPI" = "xyes" ]; then
    echo " + enabling Extended API (EAPI)"
    CFLAGS="$CFLAGS -DEAPI"
    #   some vendor compilers are too restrictive
    #   for our ap_hook and ap_ctx sources.
    case "$OS:$CC" in
        *IRIX-32*:*/cc|*IRIX-32*:cc )
            CFLAGS="$CFLAGS -woff 1048,1110,1164"
            ;;
    esac
    #   MM Shared Memory Library support for EAPI
    if [ "x$EAPI_MM" = "x" ]; then
        EAPI_MM=`egrep '^EAPI_MM=' $file | sed -n -e '$p' | awk -F= '{print $2}'`
    fi
    if [ "x$EAPI_MM" != "x" ]; then
        case $EAPI_MM in
            SYSTEM|/* ) ;;
            * ) for p in . .. ../..; do
                    if [ -d "$p/$EAPI_MM" ]; then
                        EAPI_MM="`echo $p/$EAPI_MM | sed -e 's;/\./;/;g'`" 
                        break
                    fi
                done
                ;;
        esac
        if [ "x$EAPI_MM" = "xSYSTEM" ]; then
            echo "   using MM library for EAPI: (system-wide)"
            CFLAGS="$CFLAGS -DEAPI_MM"
            __INCLUDES="`mm-config --cflags`"
            if [ "x$__INCLUDES" != "x-I/usr/include" ]; then
                INCLUDES="$INCLUDES $__INCLUDES"
            fi
            LDFLAGS="$LDFLAGS `mm-config --ldflags`"
            LIBS="$LIBS `mm-config --libs`"
        else
            if [ -f "$EAPI_MM/.libs/libmm.a" -a -f "$EAPI_MM/mm.h" ]; then
                echo "   using MM library: $EAPI_MM (source-tree only)"
                case $EAPI_MM in
                    /* ) ;;
                    *  ) EAPI_MM="\$(SRCDIR)/$EAPI_MM" ;;
                esac
                CFLAGS="$CFLAGS -DEAPI_MM"
                INCLUDES="$INCLUDES -I$EAPI_MM"
                LDFLAGS="$LDFLAGS -L$EAPI_MM/.libs"
                LIBS="$LIBS -lmm"
            elif [ -f "$EAPI_MM/bin/mm-config" ]; then
                echo "   using MM library: $EAPI_MM (installed)"
                CFLAGS="$CFLAGS -DEAPI_MM"
                INCLUDES="$INCLUDES `$EAPI_MM/bin/mm-config --cflags`"
                LDFLAGS="$LDFLAGS `$EAPI_MM/bin/mm-config --ldflags`"
                LIBS="$LIBS `$EAPI_MM/bin/mm-config --libs`"
            else
                echo "Configure:Error: Cannot find MM library under $EAPI_MM" 1>&2
                exit 1
            fi
        fi
    fi
fi


####################################################################
d1940 1
a1940 1
	V=1 R=3 P=27
@


1.1.1.5
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d5 1
a5 1
## Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
d303 1
a303 1
	CFLAGS="$CFLAGS -DAIX=100 -U__STR__ -DUSEBCOPY"
d306 31
a343 31
    *-ibm-aix[1-2].*)
	OS='IBM AIX 1.x/2.x'
	CFLAGS="$CFLAGS -DAIX=100 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix3.*)
	OS='IBM AIX 3.x'
	CFLAGS="$CFLAGS -DAIX=300 -DNEED_RLIM_T -U__STR__"
	;;
    *-ibm-aix[45678].*)
        PLATOSVERS=`echo $PLAT | sed 's/^.*ibm-aix//'`
        OS="AIX $PLATOSVERS"
        PLATOSVERSNUM=`echo $PLATOSVERS | sed 's/\.//'`
        if test $PLATOSVERSNUM -ge 43; then
            PLATOSVERSNUM=`oslevel | sed 's/\.//g' | sed 's/.$//'`
        else
            PLATOSVERSNUM="$PLATOSVERSNUM"0
        fi
        # PLATOSVERSNUM is a three digit number at this point
        CFLAGS="$CFLAGS -DAIX=$PLATOSVERSNUM -U__STR__"
        if test $PLATOSVERSNUM -lt 420; then
            CFLAGS="$CFLAGS -DNEED_RLIM_T"
        fi
        if test $PLATOSVERSNUM -ge 420; then
            LDFLAGS="$LDFLAGS -lm"
        fi
        if test $PLATOSVERSNUM -ge 430; then
            LDFLAGS="$LDFLAGS -lpthread"
            RULE_SHARED_CORE=no
            DEF_SHARED_CORE=no
        fi
        ;;
d346 1
a346 1
	CFLAGS="$CFLAGS -DAIX=100 -U__STR__"
a1007 7
for uppercase in "tr [a-z] [A-Z]" "tr [:lower:] [:upper:]" "sed y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
do
  case `echo Apache | $uppercase` in
    APACHE) break;;
  esac
done
echo " + using \"$uppercase\" to uppercase"
d1015 1
a1015 1
    name="`echo $header | sed -e 's:/:_:g' -e 's:\.:_:g' | $uppercase`"
d1389 1
a1389 1
		*-ibm-aix[45678]*)
d2022 1
a2022 1
	V=1 R=3 P=28
d2061 1
a2061 2
	echo "EXTRA_LDFLAGS_SHLIB=$EXTRA_LDFLAGS_SHLIB" >> Makefile.config
	echo "LDFLAGS_SHLIB=$LDFLAGS_SHLIB $EXTRA_LDFLAGS_SHLIB" >> Makefile.config
@


1.1.1.6
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@d2029 1
a2029 1
	V=1 R=3 P=29
@


