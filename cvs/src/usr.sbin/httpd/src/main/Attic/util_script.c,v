head	1.19;
access;
symbols
	OPENBSD_5_5:1.18.0.26
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.22
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.20
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.18
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.16
	OPENBSD_5_0:1.18.0.14
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.12
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.10
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.6
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.18;

1.18
date	2008.05.15.06.05.43;	author mbalmer;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.09.08.06.28;	author mbalmer;	state Exp;
branches;
next	1.16;

1.16
date	2007.03.20.03.33.09;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.09.12.13.10;	author henning;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.02.19.42.47;	author henning;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.13.19.10.07;	author otto;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.21.13.11.36;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.08.20.32.45;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.07.20.23.06;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.29.02.08.06;	author beck;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.09.07.05.01;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.29.10.21.44;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.15.22.18.09;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.25.18.29.49;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	99.09.29.06.29.39;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.03.01.01.06.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	98.10.11.19.45.14;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.40;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.40;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.51;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.07.19.48.13;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.40;	author henning;	state Exp;
branches;
next	;


desc
@@


1.19
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*	$OpenBSD: util_script.c,v 1.18 2008/05/15 06:05:43 mbalmer Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

#define CORE_PRIVATE
#include "httpd.h"
#include "http_config.h"
#include "http_conf_globals.h"
#include "http_main.h"
#include "http_log.h"
#include "http_protocol.h"
#include "http_core.h"		/* For document_root.  Sigh... */
#include "http_request.h"	/* for sub_req_lookup_uri() */
#include "util_script.h"
#include "util_date.h"		/* For parseHTTPdate() */


/*
 * Various utility functions which are common to a whole lot of
 * script-type extensions mechanisms, and might as well be gathered
 * in one place (if only to avoid creating inter-module dependancies
 * where there don't have to be).
 */

#define MALFORMED_MESSAGE "malformed header from script. Bad header="
#define MALFORMED_HEADER_LENGTH_TO_SHOW 30

/* If a request includes query info in the URL (stuff after "?"), and
 * the query info does not contain "=" (indicative of a FORM submission),
 * then this routine is called to create the argument list to be passed
 * to the CGI script.  When suexec is enabled, the suexec path, user, and
 * group are the first three arguments to be passed; if not, all three
 * must be NULL.  The query info is split into separate arguments, where
 * "+" is the separator between keyword arguments.
 */
static char **create_argv(pool *p, char *path, char *user, char *group,
			  char *av0, const char *args)
{
    int x, numwords;
    char **av;
    char *w;
    int idx = 0;

    /* count the number of keywords */

    for (x = 0, numwords = 1; args[x]; x++) {
        if (args[x] == '+') {
	    ++numwords;
	}
    }

    if (numwords > APACHE_ARG_MAX - 5) {
	numwords = APACHE_ARG_MAX - 5;	/* Truncate args to prevent overrun */
    }
    av = (char **) ap_palloc(p, (numwords + 5) * sizeof(char *));

    if (path) {
	av[idx++] = path;
    }
    if (user) {
	av[idx++] = user;
    }
    if (group) {
	av[idx++] = group;
    }

    av[idx++] = av0;

    for (x = 1; x <= numwords; x++) {
	w = ap_getword_nulls(p, &args, '+');
	ap_unescape_url(w);
	av[idx++] = ap_escape_shell_cmd(p, w);
    }
    av[idx] = NULL;
    return av;
}


static char *http2env(pool *a, char *w)
{
    char *res = ap_pstrcat(a, "HTTP_", w, NULL);
    char *cp = res;

    while (*++cp) {
	if (!ap_isalnum(*cp) && *cp != '_') {
	    *cp = '_';
	}
	else {
	    *cp = ap_toupper(*cp);
	}
    }

    return res;
}

API_EXPORT(char **) ap_create_environment(pool *p, table *t)
{
    array_header *env_arr = ap_table_elts(t);
    table_entry *elts = (table_entry *) env_arr->elts;
    char **env = (char **) ap_palloc(p, (env_arr->nelts + 2) * sizeof(char *));
    int i, j;
    char *tz;
    char *whack;

    j = 0;
    if (!ap_table_get(t, "TZ")) {
	tz = getenv("TZ");
	if (tz != NULL) {
	    env[j++] = ap_pstrcat(p, "TZ=", tz, NULL);
	}
    }
    for (i = 0; i < env_arr->nelts; ++i) {
        if (!elts[i].key) {
	    continue;
	}
	env[j] = ap_pstrcat(p, elts[i].key, "=", elts[i].val, NULL);
	whack = env[j];
	if (ap_isdigit(*whack)) {
	    *whack++ = '_';
	}
	while (*whack != '=') {
	    if (!ap_isalnum(*whack) && *whack != '_') {
		*whack = '_';
	    }
	    ++whack;
	}
	++j;
    }

    env[j] = NULL;
    return env;
}

API_EXPORT(void) ap_add_common_vars(request_rec *r)
{
    table *e;
    server_rec *s = r->server;
    conn_rec *c = r->connection;
    const char *rem_logname;
    char *env_path;
    const char *host;
    array_header *hdrs_arr = ap_table_elts(r->headers_in);
    table_entry *hdrs = (table_entry *) hdrs_arr->elts;
    int i;
    char servbuf[NI_MAXSERV];

    /* use a temporary table which we'll overlap onto
     * r->subprocess_env later
     */
    e = ap_make_table(r->pool, 25 + hdrs_arr->nelts);

    /* First, add environment vars from headers... this is as per
     * CGI specs, though other sorts of scripting interfaces see
     * the same vars...
     */

    for (i = 0; i < hdrs_arr->nelts; ++i) {
        if (!hdrs[i].key) {
	    continue;
	}

	/* A few headers are special cased --- Authorization to prevent
	 * rogue scripts from capturing passwords; content-type and -length
	 * for no particular reason.
	 */

	if (!strcasecmp(hdrs[i].key, "Content-type")) {
	    ap_table_addn(e, "CONTENT_TYPE", hdrs[i].val);
	}
	else if (!strcasecmp(hdrs[i].key, "Content-length")) {
	    ap_table_addn(e, "CONTENT_LENGTH", hdrs[i].val);
	}
	/*
	 * You really don't want to disable this check, since it leaves you
	 * wide open to CGIs stealing passwords and people viewing them
	 * in the environment with "ps -e".  But, if you must...
	 */
	else if (!strcasecmp(hdrs[i].key, "Authorization") 
		 || !strcasecmp(hdrs[i].key, "Proxy-Authorization")) {
	    continue;
	}
	else {
	    ap_table_addn(e, http2env(r->pool, hdrs[i].key), hdrs[i].val);
	}
    }

    if (!(env_path = ap_pstrdup(r->pool, getenv("PATH")))) {
	env_path = DEFAULT_PATH;
    }

    ap_table_addn(e, "PATH", env_path);
    ap_table_addn(e, "SERVER_SIGNATURE", ap_psignature("", r));
    ap_table_addn(e, "SERVER_SOFTWARE", ap_get_server_version());
    ap_table_addn(e, "SERVER_NAME", 
		  ap_escape_html(r->pool,ap_get_server_name(r)));
    ap_table_addn(e, "SERVER_ADDR", r->connection->local_ip);	/* Apache */
    ap_table_addn(e, "SERVER_PORT",
		  ap_psprintf(r->pool, "%u", ap_get_server_port(r)));
    host = ap_get_remote_host(c, r->per_dir_config, REMOTE_HOST);
    if (host) {
	ap_table_addn(e, "REMOTE_HOST", host);
    }
    ap_table_addn(e, "REMOTE_ADDR", c->remote_ip);
    ap_table_addn(e, "DOCUMENT_ROOT", ap_document_root(r));	/* Apache */
    ap_table_addn(e, "SERVER_ADMIN", s->server_admin);	/* Apache */
    ap_table_addn(e, "SCRIPT_FILENAME", r->filename);	/* Apache */

    servbuf[0] = '\0';
    if (!getnameinfo((struct sockaddr *)&c->remote_addr,
#ifndef HAVE_SOCKADDR_LEN
		     SA_LEN((struct sockaddr *)&c->remote_addr),
#else
		     c->remote_addr.ss_len,
#endif
		     NULL, 0, servbuf, sizeof(servbuf), NI_NUMERICSERV)){
	ap_table_addn(e, "REMOTE_PORT", ap_pstrdup(r->pool, servbuf));
    }

    if (c->user) {
	ap_table_addn(e, "REMOTE_USER", c->user);
    }
    if (c->ap_auth_type) {
	ap_table_addn(e, "AUTH_TYPE", c->ap_auth_type);
    }
    rem_logname = ap_get_remote_logname(r);
    if (rem_logname) {
	ap_table_addn(e, "REMOTE_IDENT", ap_pstrdup(r->pool, rem_logname));
    }

    /* Apache custom error responses. If we have redirected set two new vars */

    if (r->prev) {
        if (r->prev->args) {
	    ap_table_addn(e, "REDIRECT_QUERY_STRING", r->prev->args);
	}
	if (r->prev->uri) {
	    ap_table_addn(e, "REDIRECT_URL", r->prev->uri);
	}
    }

    ap_overlap_tables(r->subprocess_env, e, AP_OVERLAP_TABLES_SET);
}

/* This "cute" little function comes about because the path info on
 * filenames and URLs aren't always the same. So we take the two,
 * and find as much of the two that match as possible.
 */

API_EXPORT(int) ap_find_path_info(const char *uri, const char *path_info)
{
    int lu = strlen(uri);
    int lp = strlen(path_info);

    while (lu-- && lp-- && uri[lu] == path_info[lp]);

    if (lu == -1) {
	lu = 0;
    }

    while (uri[lu] != '\0' && uri[lu] != '/') {
        lu++;
    }
    return lu;
}

/* Obtain the Request-URI from the original request-line, returning
 * a new string from the request pool containing the URI or "".
 */
static char *original_uri(request_rec *r)
{
    char *first, *last;

    if (r->the_request == NULL) {
	return (char *) ap_pcalloc(r->pool, 1);
    }

    first = r->the_request;	/* use the request-line */

    while (*first && !ap_isspace(*first)) {
	++first;		/* skip over the method */
    }
    while (ap_isspace(*first)) {
	++first;		/*   and the space(s)   */
    }

    last = first;
    while (*last && !ap_isspace(*last)) {
	++last;			/* end at next whitespace */
    }

    return ap_pstrndup(r->pool, first, last - first);
}

API_EXPORT(void) ap_add_cgi_vars(request_rec *r)
{
    table *e = r->subprocess_env;

    ap_table_setn(e, "GATEWAY_INTERFACE", "CGI/1.1");
    ap_table_setn(e, "SERVER_PROTOCOL", r->protocol);
    ap_table_setn(e, "REQUEST_METHOD", r->method);
    ap_table_setn(e, "QUERY_STRING", r->args ? r->args : "");
    ap_table_setn(e, "REQUEST_URI", original_uri(r));

    /* Note that the code below special-cases scripts run from includes,
     * because it "knows" that the sub_request has been hacked to have the
     * args and path_info of the original request, and not any that may have
     * come with the script URI in the include command.  Ugh.
     */

    if (!strcmp(r->protocol, "INCLUDED")) {
	ap_table_setn(e, "SCRIPT_NAME", r->uri);
	if (r->path_info && *r->path_info) {
	    ap_table_setn(e, "PATH_INFO", r->path_info);
	}
    }
    else if (!r->path_info || !*r->path_info) {
	ap_table_setn(e, "SCRIPT_NAME", r->uri);
    }
    else {
	int path_info_start = ap_find_path_info(r->uri, r->path_info);

	ap_table_setn(e, "SCRIPT_NAME",
		      ap_pstrndup(r->pool, r->uri, path_info_start));

	ap_table_setn(e, "PATH_INFO", r->path_info);
    }

    if (r->path_info && r->path_info[0]) {
	/*
	 * To get PATH_TRANSLATED, treat PATH_INFO as a URI path.
	 * Need to re-escape it for this, since the entire URI was
	 * un-escaped before we determined where the PATH_INFO began.
	 */
	request_rec *pa_req;

	pa_req = ap_sub_req_lookup_uri(ap_escape_uri(r->pool, r->path_info), r);

	if (pa_req->filename) {
	    char *pt = ap_pstrcat(r->pool, pa_req->filename, pa_req->path_info,
				  NULL);
	    ap_table_setn(e, "PATH_TRANSLATED", pt);
	}
	ap_destroy_sub_req(pa_req);
    }
}


static int set_cookie_doo_doo(void *v, const char *key, const char *val)
{
    ap_table_addn(v, key, val);
    return 1;
}

API_EXPORT(int) ap_scan_script_header_err_core(request_rec *r, char *buffer,
				       int (*getsfunc) (char *, int, void *),
				       void *getsfunc_data)
{
    char x[MAX_STRING_LEN];
    char *w, *l;
    int p;
    int cgi_status = HTTP_OK;
    table *merge;
    table *cookie_table;

    if (buffer) {
	*buffer = '\0';
    }
    w = buffer ? buffer : x;

    ap_hard_timeout("read script header", r);

    /* temporary place to hold headers to merge in later */
    merge = ap_make_table(r->pool, 10);

    /* The HTTP specification says that it is legal to merge duplicate
     * headers into one.  Some browsers that support Cookies don't like
     * merged headers and prefer that each Set-Cookie header is sent
     * separately.  Lets humour those browsers by not merging.
     * Oh what a pain it is.
     */
    cookie_table = ap_make_table(r->pool, 2);
    ap_table_do(set_cookie_doo_doo, cookie_table, r->err_headers_out, "Set-Cookie", NULL);

    while (1) {

	if ((*getsfunc) (w, MAX_STRING_LEN - 1, getsfunc_data) == 0) {
	    ap_kill_timeout(r);
	    ap_log_rerror(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, r,
			  "Premature end of script headers: %s", r->filename);
	    return HTTP_INTERNAL_SERVER_ERROR;
	}

	/* Delete terminal (CR?)LF */

	p = strlen(w);
        /* Indeed, the host's '\n':
           '\012' for UNIX; '\015' for MacOS; '\025' for OS/390
           -- whatever the script generates.
        */
	if (p > 0 && w[p - 1] == '\n') {
	    if (p > 1 && w[p - 2] == CR) {
		w[p - 2] = '\0';
	    }
	    else {
		w[p - 1] = '\0';
	    }
	}

	/*
	 * If we've finished reading the headers, check to make sure any
	 * HTTP/1.1 conditions are met.  If so, we're done; normal processing
	 * will handle the script's output.  If not, just return the error.
	 * The appropriate thing to do would be to send the script process a
	 * SIGPIPE to let it know we're ignoring it, close the channel to the
	 * script process, and *then* return the failed-to-meet-condition
	 * error.  Otherwise we'd be waiting for the script to finish
	 * blithering before telling the client the output was no good.
	 * However, we don't have the information to do that, so we have to
	 * leave it to an upper layer.
	 */
	if (w[0] == '\0') {
	    int cond_status = OK;

	    ap_kill_timeout(r);
	    if ((cgi_status == HTTP_OK) && (r->method_number == M_GET)) {
		cond_status = ap_meets_conditions(r);
	    }
	    ap_overlap_tables(r->err_headers_out, merge,
		AP_OVERLAP_TABLES_MERGE);
	    if (!ap_is_empty_table(cookie_table)) {
		/* the cookies have already been copied to the cookie_table */
		ap_table_unset(r->err_headers_out, "Set-Cookie");
		r->err_headers_out = ap_overlay_tables(r->pool,
		    r->err_headers_out, cookie_table);
	    }
	    return cond_status;
	}

	/* if we see a bogus header don't ignore it. Shout and scream */

	if (!(l = strchr(w, ':'))) {
	    char malformed[(sizeof MALFORMED_MESSAGE) + 1
			   + MALFORMED_HEADER_LENGTH_TO_SHOW];

	    strlcpy(malformed, MALFORMED_MESSAGE, sizeof(malformed));
	    strncat(malformed, w, MALFORMED_HEADER_LENGTH_TO_SHOW);

	    if (!buffer) {
		/* Soak up all the script output - may save an outright kill */
	        while ((*getsfunc) (w, MAX_STRING_LEN - 1, getsfunc_data)) {
		    continue;
		}
	    }

	    ap_kill_timeout(r);
	    ap_log_rerror(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, r,
			  "%s: %s", malformed, r->filename);
	    return HTTP_INTERNAL_SERVER_ERROR;
	}

	*l++ = '\0';
	while (ap_isspace(*l)) {
	    ++l;
	}

	if (!strcasecmp(w, "Content-type")) {
	    char *tmp;

	    /* Nuke trailing whitespace */

	    char *endp = l + strlen(l) - 1;
	    while (endp > l && ap_isspace(*endp)) {
		*endp-- = '\0';
	    }

	    tmp = ap_pstrdup(r->pool, l);
	    ap_content_type_tolower(tmp);
	    r->content_type = tmp;
	}
	/*
	 * If the script returned a specific status, that's what
	 * we'll use - otherwise we assume 200 OK.
	 */
	else if (!strcasecmp(w, "Status")) {
	    r->status = cgi_status = atoi(l);
	    r->status_line = ap_pstrdup(r->pool, l);
	}
	else if (!strcasecmp(w, "Location")) {
	    ap_table_set(r->headers_out, w, l);
	}
	else if (!strcasecmp(w, "Content-Length")) {
	    ap_table_set(r->headers_out, w, l);
	}
	else if (!strcasecmp(w, "Transfer-Encoding")) {
	    ap_table_set(r->headers_out, w, l);
	}
	/*
	 * If the script gave us a Last-Modified header, we can't just
	 * pass it on blindly because of restrictions on future values.
	 */
	else if (!strcasecmp(w, "Last-Modified")) {
	    time_t mtime = ap_parseHTTPdate(l);

	    ap_update_mtime(r, mtime);
	    ap_set_last_modified(r);
	}
	else if (!strcasecmp(w, "Set-Cookie")) {
	    ap_table_add(cookie_table, w, l);
	}
	else {
	    ap_table_add(merge, w, l);
	}
    }
}

static int getsfunc_FILE(char *buf, int len, void *f)
{
    return fgets(buf, len, (FILE *) f) != NULL;
}

API_EXPORT(int) ap_scan_script_header_err(request_rec *r, FILE *f,
					  char *buffer)
{
    return ap_scan_script_header_err_core(r, buffer, getsfunc_FILE, f);
}

static int getsfunc_BUFF(char *w, int len, void *fb)
{
    return ap_bgets(w, len, (BUFF *) fb) > 0;
}

API_EXPORT(int) ap_scan_script_header_err_buff(request_rec *r, BUFF *fb,
					       char *buffer)
{
    return ap_scan_script_header_err_core(r, buffer, getsfunc_BUFF, fb);
}

struct vastrs {
    va_list args;
    int arg;
    const char *curpos;
};

static int getsfunc_STRING(char *w, int len, void *pvastrs)
{
    struct vastrs *strs = (struct vastrs*) pvastrs;
    char *p;
    int t;
    
    if (!strs->curpos || !*strs->curpos) 
        return 0;
    p = strchr(strs->curpos, '\n');
    if (p)
        ++p;
    else
        p = strchr(strs->curpos, '\0');
    t = p - strs->curpos;
    if (t > len)
        t = len;
    strncpy (w, strs->curpos, t);
    w[t] = '\0';
    if (!strs->curpos[t]) {
        ++strs->arg;
        strs->curpos = va_arg(strs->args, const char *);
    }
    else
        strs->curpos += t;
    return t;    
}

/* ap_scan_script_header_err_strs() accepts additional const char* args...
 * each is treated as one or more header lines, and the first non-header
 * character is returned to **arg, **data.  (The first optional arg is
 * counted as 0.)
 */
API_EXPORT_NONSTD(int) ap_scan_script_header_err_strs(request_rec *r, 
                                                      char *buffer, 
                                                      const char **termch,
                                                      int *termarg, ...)
{
    struct vastrs strs;
    int res;

    va_start(strs.args, termarg);
    strs.arg = 0;
    strs.curpos = va_arg(strs.args, char*);
    res = ap_scan_script_header_err_core(r, buffer, getsfunc_STRING, (void *) &strs);
    if (termch)
        *termch = strs.curpos;
    if (termarg)
        *termarg = strs.arg;
    va_end(strs.args);
    return res;
}

API_EXPORT(void) ap_send_size(size_t size, request_rec *r)
{
    /* XXX: this -1 thing is a gross hack */
    if (size == (size_t)-1) {
	ap_rputs("    -", r);
    }
    else if (!size) {
	ap_rputs("   0k", r);
    }
    else if (size < 1024) {
	ap_rputs("   1k", r);
    }
    else if (size < 1048576) {
	ap_rprintf(r, "%4dk", (int)((size + 512) / 1024));
    }
    else if (size < 103809024) {
	ap_rprintf(r, "%4.1fM", size / 1048576.0);
    }
    else {
	ap_rprintf(r, "%4dM", (int)((size + 524288) / 1048576));
    }
}

API_EXPORT(int) ap_call_exec(request_rec *r, child_info *pinfo, char *argv0,
			     char **env, int shellcmd)
{
    int pid = 0;
    core_dir_config *conf;
    conf = (core_dir_config *) ap_get_module_config(r->per_dir_config,
						    &core_module);

    /* the fd on r->server->error_log is closed, but we need somewhere to
     * put the error messages from the log_* functions. So, we use stderr,
     * since that is better than allowing errors to go unnoticed.  Don't do
     * this on Win32, though, since we haven't fork()'d.
     */
    r->server->error_log = stderr;

    if (conf->limit_cpu != NULL) {
        if ((setrlimit(RLIMIT_CPU, conf->limit_cpu)) != 0) {
	    ap_log_error(APLOG_MARK, APLOG_ERR, r->server,
			 "setrlimit: failed to set CPU usage limit");
	}
    }
    if (conf->limit_nproc != NULL) {
        if ((setrlimit(RLIMIT_NPROC, conf->limit_nproc)) != 0) {
	    ap_log_error(APLOG_MARK, APLOG_ERR, r->server,
			 "setrlimit: failed to set process limit");
	}
    }
    if (conf->limit_mem != NULL) {
        if ((setrlimit(RLIMIT_DATA, conf->limit_mem)) != 0) {
	    ap_log_error(APLOG_MARK, APLOG_ERR, r->server,
			 "setrlimit(RLIMIT_DATA): failed to set memory "
			 "usage limit");
	}
    }
    if (ap_suexec_enabled
	&& ((r->server->server_uid != ap_user_id)
	    || (r->server->server_gid != ap_group_id)
	    || (!strncmp("/~", r->uri, 2)))) {

	char *execuser, *grpname;
	struct passwd *pw;
	struct group *gr;

	if (!strncmp("/~", r->uri, 2)) {
	    gid_t user_gid;
	    char *username = ap_pstrdup(r->pool, r->uri + 2);
	    char *pos = strchr(username, '/');

	    if (pos) {
		*pos = '\0';
	    }

	    if ((pw = getpwnam(username)) == NULL) {
		ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
			     "getpwnam: invalid username %s", username);
		return (pid);
	    }
	    execuser = ap_pstrcat(r->pool, "~", pw->pw_name, NULL);
	    user_gid = pw->pw_gid;

	    if ((gr = getgrgid(user_gid)) == NULL) {
	        if ((grpname = ap_palloc(r->pool, 16)) == NULL) {
		    return (pid);
		}
		else {
		    ap_snprintf(grpname, 16, "%ld", (long) user_gid);
		}
	    }
	    else {
		grpname = gr->gr_name;
	    }
	}
	else {
	    if ((pw = getpwuid(r->server->server_uid)) == NULL) {
		ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
			     "getpwuid: invalid userid %ld",
			     (long) r->server->server_uid);
		return (pid);
	    }
	    execuser = ap_pstrdup(r->pool, pw->pw_name);

	    if ((gr = getgrgid(r->server->server_gid)) == NULL) {
		ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
			     "getgrgid: invalid groupid %ld",
			     (long) r->server->server_gid);
		return (pid);
	    }
	    grpname = gr->gr_name;
	}

	if (shellcmd) {
	    execle(SUEXEC_BIN, SUEXEC_BIN, execuser, grpname, argv0,
		   (char *)NULL, env);
	}

	else if ((conf->cgi_command_args == AP_FLAG_OFF)
            || (!r->args) || (!r->args[0])
            || strchr(r->args, '=')) {
	    execle(SUEXEC_BIN, SUEXEC_BIN, execuser, grpname, argv0,
		   (char *)NULL, env);
	}

	else {
	    execve(SUEXEC_BIN,
		   create_argv(r->pool, SUEXEC_BIN, execuser, grpname,
			       argv0, r->args),
		   env);
	}
    }
    else {
        if (shellcmd) {
	    execle(SHELL_PATH, SHELL_PATH, "-c", argv0, (char *)NULL, env);
	}

	else if ((conf->cgi_command_args == AP_FLAG_OFF)
            || (!r->args) || (!r->args[0])
            || strchr(r->args, '=')) {
	    execle(r->filename, argv0, (void*)NULL, env);
	}

	else {
	    execve(r->filename,
		   create_argv(r->pool, NULL, NULL, NULL, argv0, r->args),
		   env);
	}
    }
    return (pid);
}
@


1.18
log
@Add OpenBSD markers.

no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.17
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@d1 2
@


1.16
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d199 1
d262 10
a271 2
    ap_table_addn(e, "REMOTE_PORT",
		  ap_psprintf(r->pool, "%d", ntohs(c->remote_addr.sin_port)));
@


1.15
log
@cleanup and unifdef'ing, no change in object files
work by Daniel Ouellet <daniel@@presscom.net>
@
text
@d507 1
a507 1
	while (*l && ap_isspace(*l)) {
@


1.14
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a230 1
#ifndef SECURITY_HOLE_PASS_AUTHORIZATION
a234 1
#endif
a678 1
#ifdef RLIMIT_CPU
a684 2
#endif
#ifdef RLIMIT_NPROC
a690 10
#endif
#if defined(RLIMIT_AS)
    if (conf->limit_mem != NULL) {
        if ((setrlimit(RLIMIT_AS, conf->limit_mem)) != 0) {
	    ap_log_error(APLOG_MARK, APLOG_ERR, r->server,
			 "setrlimit(RLIMIT_AS): failed to set memory "
			 "usage limit");
	}
    }
#elif defined(RLIMIT_DATA)
a697 10
#elif defined(RLIMIT_VMEM)
    if (conf->limit_mem != NULL) {
        if ((setrlimit(RLIMIT_VMEM, conf->limit_mem)) != 0) {
	    ap_log_error(APLOG_MARK, APLOG_ERR, r->server,
			 "setrlimit(RLIMIT_VMEM): failed to set memory "
			 "usage limit");
	}
    }
#endif

@


1.13
log
@cast vararg sentinel value to pointer
ok henning@@
@
text
@a70 4
#ifdef OS2
#define INCL_DOS
#include <os2.h>
#endif
a194 3
#if defined(WIN32) || defined(OS2)
    char *env_temp;
#endif
a245 27
#ifdef WIN32
    if (env_temp = getenv("SystemRoot")) {
        ap_table_addn(e, "SystemRoot", env_temp);         
    }
    if (env_temp = getenv("COMSPEC")) {
        ap_table_addn(e, "COMSPEC", env_temp);            
    }
    if (env_temp = getenv("WINDIR")) {
        ap_table_addn(e, "WINDIR", env_temp);
    }
#endif

#ifdef OS2
    if ((env_temp = getenv("COMSPEC")) != NULL) {
        ap_table_addn(e, "COMSPEC", env_temp);            
    }
    if ((env_temp = getenv("ETC")) != NULL) {
        ap_table_addn(e, "ETC", env_temp);            
    }
    if ((env_temp = getenv("DPATH")) != NULL) {
        ap_table_addn(e, "DPATH", env_temp);            
    }
    if ((env_temp = getenv("PERLLIB_PREFIX")) != NULL) {
        ap_table_addn(e, "PERLLIB_PREFIX", env_temp);            
    }
#endif

a385 3
#ifdef WIN32
	    char buffer[HUGE_STRING_LEN];
#endif
a387 5
#ifdef WIN32
	    /* We need to make this a real Windows path name */
	    GetFullPathName(pt, HUGE_STRING_LEN, buffer, NULL);
	    ap_table_setn(e, "PATH_TRANSLATED", ap_pstrdup(r->pool, buffer));
#else
a388 1
#endif
a487 21
#ifdef CHARSET_EBCDIC
	    /* Chances are that we received an ASCII header text instead of
	     * the expected EBCDIC header lines. Try to auto-detect:
	     */
	if (!(l = strchr(w, ':'))) {
	    int maybeASCII = 0, maybeEBCDIC = 0;
	    char *cp;

	    for (cp = w; *cp != '\0'; ++cp) {
		if (isprint(*cp) && !isprint(os_toebcdic[*cp]))
		    ++maybeEBCDIC;
		if (!isprint(*cp) && isprint(os_toebcdic[*cp]))
		    ++maybeASCII;
		}
	    if (maybeASCII > maybeEBCDIC) {
		ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_ERR, r->server,
			 "CGI Interface Error: Script headers apparently ASCII: (CGI = %s)", r->filename);
		ascii2ebcdic(w, w, cp - w);
	    }
	}
#endif
a673 1
#if !defined(WIN32) && !defined(OS2)
a679 1
#endif
a722 387
#ifdef OS2
    {
	/* Additions by Alec Kloss, to allow exec'ing of scripts under OS/2 */
	int is_script = 0;
	char interpreter[2048];	/* hope it's enough for the interpreter path */
	char error_object[260];
	FILE *program;
        char *cmdline = r->filename, *cmdline_pos;
        int cmdlen;
	char *args = "", *args_end;
	ULONG rc;
        RESULTCODES rescodes;
        int env_len, e;
        char *env_block, *env_block_pos;

	if ((conf->cgi_command_args != AP_FLAG_OFF)
            && r->args && r->args[0]
            && !strchr(r->args, '=')) {
	    args = r->args;
        }
	    
	program = fopen(r->filename, "rt");
	
	if (!program) {
	    ap_log_rerror(APLOG_MARK, APLOG_ERR, r, "fopen(%s) failed",
			 r->filename);
	    return (pid);
	}
	
	fgets(interpreter, sizeof(interpreter), program);
	fclose(program);
	
	if (!strncmp(interpreter, "#!", 2)) {
	    is_script = 1;
            interpreter[strlen(interpreter) - 1] = '\0';
            if (interpreter[2] != '/' && interpreter[2] != '\\' && interpreter[3] != ':') {
                char buffer[300];
                if (DosSearchPath(SEARCH_ENVIRONMENT, "PATH", interpreter+2, buffer, sizeof(buffer)) == 0) {
                    strcpy(interpreter+2, buffer);
                } else {
                    strcat(interpreter, ".exe");
                    if (DosSearchPath(SEARCH_ENVIRONMENT, "PATH", interpreter+2, buffer, sizeof(buffer)) == 0) {
                        strcpy(interpreter+2, buffer);
                    }
                }
            }
	}

        if (is_script) {
            cmdline = ap_pstrcat(r->pool, interpreter+2, " ", r->filename, NULL);
        }
        else if (strstr(strupr(r->filename), ".CMD") > 0) {
            /* Special case to allow use of REXX commands as scripts. */
            os2pathname(r->filename);
            cmdline = ap_pstrcat(r->pool, SHELL_PATH, " /C ", r->filename, NULL);
        }
        else {
            cmdline = r->filename;
	}
	
        args = ap_pstrdup(r->pool, args);
        ap_unescape_url(args);
        args = ap_double_quotes(r->pool, args);
        args_end = args + strlen(args);

        if (args_end - args > 4000) { /* cmd.exe won't handle lines longer than 4k */
            args_end = args + 4000;
            *args_end = 0;
        }

        /* +4 = 1 space between progname and args, 2 for double null at end, 2 for possible quote on first arg */
        cmdlen = strlen(cmdline) + strlen(args) + 4; 
        cmdline_pos = cmdline;

        while (*cmdline_pos) {
            cmdlen += 2 * (*cmdline_pos == '+');  /* Allow space for each arg to be quoted */
            cmdline_pos++;
        }

        cmdline = ap_pstrndup(r->pool, cmdline, cmdlen);
        cmdline_pos = cmdline + strlen(cmdline);

	while (args < args_end) {
            char *arg;
	    
            arg = ap_getword_nc(r->pool, &args, '+');

            if (strpbrk(arg, "&|<> "))
                arg = ap_pstrcat(r->pool, "\"", arg, "\"", NULL);

            *(cmdline_pos++) = ' ';
            strcpy(cmdline_pos, arg);
            cmdline_pos += strlen(cmdline_pos);
        }

        *(++cmdline_pos) = 0; /* Add required second terminator */
	args = strchr(cmdline, ' ');
	
	if (args) {
	    *args = 0;
	    args++;
	}

        /* Create environment block from list of envariables */
        for (env_len=1, e=0; env[e]; e++)
            env_len += strlen(env[e]) + 1;

        env_block = ap_palloc(r->pool, env_len);
        env_block_pos = env_block;

        for (e=0; env[e]; e++) {
            strcpy(env_block_pos, env[e]);
            env_block_pos += strlen(env_block_pos) + 1;
        }

        *env_block_pos = 0; /* environment block is terminated by a double null */

	rc = DosExecPgm(error_object, sizeof(error_object), EXEC_ASYNC, cmdline, env_block, &rescodes, cmdline);
	
	if (rc) {
            ap_log_rerror(APLOG_MARK, APLOG_ERR, r, "DosExecPgm(%s %s) failed, %s - %s",
                          cmdline, args ? args : "", ap_os_error_message(rc), error_object );
	    return -1;
	}
	
	return rescodes.codeTerminate;
    }
#elif defined(WIN32)
    {
        /* Adapted from Alec Kloss' work for OS/2 */
        char *interpreter = NULL;
        char *invokename = NULL;
        char *arguments = NULL;
        char *ext = NULL;
        char *s = NULL;
        char *t = NULL;
        char *pCommand;
        char *pEnvBlock, *pNext;

        int i;
        int iEnvBlockLen;

        file_type_e fileType;

        STARTUPINFO si;
        PROCESS_INFORMATION pi;

        memset(&si, 0, sizeof(si));
        memset(&pi, 0, sizeof(pi));

        pid = -1;

        if (!shellcmd) {

            fileType = ap_get_win32_interpreter(r, &interpreter);

            if (fileType == eFileTypeUNKNOWN) {
                ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                              "%s is not executable; ensure interpreted scripts have "
                              "\"#!\" first line", 
                              r->filename);
                return (pid);
            }

            if (interpreter && *interpreter 
                    && (s = strstr(interpreter, "\"%1\""))) {
                s[1] = '\0';
                s += 3;
                invokename = ap_pstrdup(r->pool, r->filename);
            }
            else
            {
                char shortname[MAX_PATH];
                DWORD rv = GetShortPathName(r->filename, shortname, MAX_PATH);
                if (!rv || rv >= MAX_PATH) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                                  "%s is not executable; cannot translate "
                                  "to a short path name.", r->filename);
                    return (pid);
                }
                invokename = ap_pstrdup(r->pool, shortname);

                if (interpreter && *interpreter
                        && (s = strstr(interpreter, "%1"))) {
                    s[0] = '\0';
                    s += 2;
                }
            }
            for (t = invokename; *t; ++t) {
                if (*t == '/')
                    *t = '\\';
            }

            /*
             * Look at the arguments...
             */
            arguments = "";
            if ((conf->cgi_command_args != AP_FLAG_OFF)
                 && (r->args) && (r->args[0])
                 && !strchr(r->args, '=')) { 
                /* If we are in this leg, there are some other arguments
                 * that we must include in the execution of the CGI.
                 * Because CreateProcess is the way it is, we have to
                 * create a command line like format for the execution
                 * of the CGI.  This means we need to create on long
                 * string with the executable and arguments.
                 *
                 * The arguments string comes in the request structure,
                 * and each argument is separated by a '+'.  We'll replace
                 * these pluses with spaces.
                 */

                int iStringSize = 0;
                int x;
	    
                /*
                 *  Duplicate the request structure string so we don't change it.
                 */                                   
                arguments = ap_pstrdup(r->pool, r->args);
                
                /*
                 *  Change the '+' to ' '
                 */
                for (x=0; arguments[x]; x++) {
                    if ('+' == arguments[x]) {
                        arguments[x] = ' ';
                    }
                }
       
                /*
                 * We need to unescape any characters that are 
                 * in the arguments list.  Truncate to 4000
                 * characters for safety, being careful of the
                 * now-escaped characters.
                 */
                ap_unescape_url(arguments);
                arguments = ap_escape_shell_cmd(r->pool, arguments);
                if (strlen(arguments) > 4000)
                {
                    int len = 4000;
                    while (len && arguments[len - 1] == '\\') {
                        --len;
                    }
                    arguments[len] = '\0';
                }

                /*
                 * Now that the arguments list is 'shell' escaped with
                 * backslashes, we need to make cmd.exe/command.com 
                 * safe from this same set of characters.
                 */
                if (fileType == eCommandShell32) {
                    arguments = ap_caret_escape_args(r->pool, arguments);
                }
                else if (fileType == eCommandShell16) {
                    arguments = ap_pstrcat(r->pool, "\"", 
                            ap_double_quotes(r->pool, arguments), "\"", NULL);
                }
            }

            /*
             * The remaining code merges the interpreter, the backslashed
             * and potentially shortened invoke name, the various
             * interpreter segments and the arguments.
             *
             * Note that interpreter started out with %1 %* arguments,
             * so the *t character skips the %* arguments list, and the
             * *s already skipped the %1 argument (quoted or not.)
             */

            if (s && (t = strstr(s, "%*"))) {
                /* interpreter formatted: prog [opts] %1 [opts] %* [opts] 
                 */
                t[0] = '\0';
                t += 2;
                pCommand = ap_pstrcat(r->pool, interpreter, invokename,
                                               s, arguments, t, NULL);
            }
            else if (s) {
                /* interpreter formatted: prog [opts] %1 [opts] 
                 */
                pCommand = ap_pstrcat(r->pool, interpreter, invokename,
                                               s, " ", arguments, NULL);
            }
            else if (interpreter) {
                /* interpreter formatted: prog [opts]
                 */
                pCommand = ap_pstrcat(r->pool, interpreter, " ", invokename,
                                               " ", arguments, NULL);
            }
            else {
                /* no interpreter required
                 */
                pCommand = ap_pstrcat(r->pool, invokename, 
                                               " ", arguments, NULL);
            }

        }
        else /* shellcmd */
        {
            char *p, *comspec = getenv("COMSPEC");
            const char *quotecomspec;
            const char *quoteargv0;
            if (!comspec)
                comspec = SHELL_PATH;
            p = strchr(comspec, '\0');
            quotecomspec = (strchr(comspec, ' ') && comspec[0] != '\"')
                         ? "\"" : "";
            quoteargv0 = (strchr(argv0, ' ') && argv0[0] != '\"') ? "\"" : "";
            pCommand = ap_pstrcat(r->pool, quotecomspec, comspec, quotecomspec,
                                  " /c ", quoteargv0, argv0, quoteargv0, NULL);
            /* Forward slash argv[0] only */
            for (p = pCommand + strlen(pCommand) - strlen(argv0) 
                              - strlen(quoteargv0); *p; ++p) {
                if (*p == '/')
                    *p = '\\';
            }
        }

        /*
         * Make child process use hPipeOutputWrite as standard out,
         * and make sure it does not show on screen.
         */
        si.cb = sizeof(si);
        si.dwFlags     = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdInput   = pinfo->hPipeInputRead;
        si.hStdOutput  = pinfo->hPipeOutputWrite;
        si.hStdError   = pinfo->hPipeErrorWrite;
  
        /*
         * Win32's CreateProcess call requires that the environment
         * be passed in an environment block, a null terminated block of
         * null terminated strings.
         */  
        i = 0;
        iEnvBlockLen = 1;
        while (env[i]) {
            iEnvBlockLen += strlen(env[i]) + 1;
            i++;
        }
  
        pEnvBlock = (char *)ap_pcalloc(r->pool,iEnvBlockLen);
    
        i = 0;
        pNext = pEnvBlock;
        while (env[i]) {
            strcpy(pNext, env[i]);
            pNext = pNext + strlen(pNext) + 1;
            i++;
        }

        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_INFO, r->server,
                     "Invoking CGI Command '%s'", pCommand);
        for (i = 0; env[i]; ++i) {
            ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_DEBUG, r->server,
                         "  CGI env[%d] = '%s'", i, env[i]);
        }

        if (CreateProcess(NULL, pCommand, NULL, NULL, TRUE, 
                          0,
                          pEnvBlock,
                          ap_make_dirstr_parent(r->pool, r->filename),
                          &si, &pi)) {
            if (fileType == eFileTypeEXE16 || fileType == eCommandShell16) {
                /* Hack to get 16-bit CGI's working. It works for all the 
                 * standard modules shipped with Apache. pi.dwProcessId is 0 
                 * for 16-bit CGIs and all the Unix specific code that calls 
                 * ap_call_exec interprets this as a failure case. And we can't 
                 * use -1 either because it is mapped to 0 by the caller.
                 */
                pid = -2;
            }
            else {
                pid = pi.dwProcessId;
                /*
                 * We must close the handles to the new process and its main thread
                 * to prevent handle and memory leaks.
                 */ 
                CloseHandle(pi.hProcess);
                CloseHandle(pi.hThread);
            }
        }
        return (pid);
    }
#elif defined(NETWARE)
#else
a815 1
#endif
@


1.12
log
@merge
@
text
@d1259 1
a1259 1
	    execle(r->filename, argv0, NULL, env);
@


1.11
log
@kill one more strcpy; easy one
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
@


1.10
log
@merge apache 1.3.27 and mod_ssl 2.8.11
@
text
@d556 1
a556 1
	    strcpy(malformed, MALFORMED_MESSAGE);
@


1.9
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d283 2
a284 1
    ap_table_addn(e, "SERVER_NAME", ap_get_server_name(r));
@


1.8
log
@correct type on last arg to execl(); nordin@@cse.ogi.edu
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
a92 5
 *
 * XXXX: note that the WIN32 code uses one of the suexec strings 
 * to pass an interpreter name.  Remember this if changing the way they
 * are handled in create_argv.
 *
d719 1
a719 1
	ap_rprintf(r, "%4dk", (size + 512) / 1024);
d725 1
a725 31
	ap_rprintf(r, "%4dM", (size + 524288) / 1048576);
    }
}

#if defined(WIN32)
static char **create_argv_cmd(pool *p, char *av0, const char *args, char *path)
{
    register int x, n;
    char **av;
    char *w;

    for (x = 0, n = 2; args[x]; x++) {
        if (args[x] == '+') {
	    ++n;
	}
    }

    /* Add extra strings to array. */
    n = n + 2;

    av = (char **) ap_palloc(p, (n + 1) * sizeof(char *));
    av[0] = av0;

    /* Now insert the extra strings we made room for above. */
    av[1] = strdup("/C");
    av[2] = strdup(path);

    for (x = (1 + 2); x < n; x++) {
	w = ap_getword(p, &args, '+');
	ap_unescape_url(w);
	av[x] = ap_escape_shell_cmd(p, w);
a726 2
    av[n] = NULL;
    return av;
a727 2
#endif

a732 3
#if defined(RLIMIT_CPU)  || defined(RLIMIT_NPROC) || \
    defined(RLIMIT_DATA) || defined(RLIMIT_VMEM) || defined (RLIMIT_AS)

a736 2
#endif

d803 3
a805 1
	if (r->args && r->args[0] && !strchr(r->args, '='))
d807 1
d985 3
a987 1
            if ((r->args) && (r->args[0]) && !strchr(r->args, '=')) { 
d1019 3
a1021 1
                 * in the arguments list.
d1025 21
d1089 2
d1094 10
a1103 25
            if ((p - comspec >= 11) && !strcasecmp(p - 11, "command.com")) 
            {
                /* Command.com doesn't like long paths
                 */
                char shortname[MAX_PATH];
                DWORD rv = GetShortPathName(r->filename, shortname, MAX_PATH);
                if (!rv || rv >= MAX_PATH) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                                  "%s is not executable; cannot translate "
                                  "to a short path name.", r->filename);
                    return (pid);
                }
                pCommand = ap_pstrcat(r->pool, "\"", comspec, "\" /C ", 
                                      shortname, NULL);
            }
            else
            {
                /* Assume any other shell likes long paths
                 */
                pCommand = ap_pstrcat(r->pool, "\"", comspec, "\" /C \"", 
                                      r->filename, "\"", NULL);
                for (p = pCommand; *p; ++p) {
                    if (*p == '/')
                        *p = '\\';
                }
d1140 7
d1152 1
a1152 1
            if (fileType == eFileTypeEXE16) {
d1236 3
a1238 1
	else if ((!r->args) || (!r->args[0]) || strchr(r->args, '=')) {
d1255 4
a1258 2
	else if ((!r->args) || (!r->args[0]) || strchr(r->args, '=')) {
	    execle(r->filename, argv0, (char *)NULL, env);
@


1.7
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1255 1
a1255 1
		   NULL, env);
d1260 1
a1260 1
		   NULL, env);
d1272 1
a1272 1
	    execle(SHELL_PATH, SHELL_PATH, "-c", argv0, NULL, env);
d1276 1
a1276 1
	    execle(r->filename, argv0, NULL, env);
@


1.6
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 6
a24 9
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
d26 4
a29 3
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
d31 3
a33 4
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
d35 4
a38 4
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 3
a52 5
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
d54 3
d960 1
a962 1
        char *exename = NULL;
d964 1
a964 1
        char *quoted_filename;
d993 29
d1065 7
a1071 3
             * We have the interpreter (if there is one) and we have 
             * the arguments (if there are any).
             * Build the command string to pass to CreateProcess. 
d1073 20
a1092 4
            quoted_filename = ap_pstrcat(r->pool, "\"", r->filename, "\"", NULL);
            if (interpreter && *interpreter) {
                pCommand = ap_pstrcat(r->pool, interpreter, " ", 
                                      quoted_filename, " ", arguments, NULL);
d1095 4
a1098 1
                pCommand = ap_pstrcat(r->pool, quoted_filename, " ", arguments, NULL);
d1101 33
a1133 5
        } else {
            char *shellcmd = getenv("COMSPEC");
            if (!shellcmd)
                shellcmd = SHELL_PATH;
            pCommand = ap_pstrcat(r->pool, shellcmd, " /C ", argv0, NULL);
d1141 1
a1141 1
        si.dwFlags     = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
@


1.5
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d270 1
a270 1
    if (env_temp = getenv("COMSPEC")) {
d273 1
a273 1
    if (env_temp = getenv("ETC")) {
d276 1
a276 1
    if (env_temp = getenv("DPATH")) {
d279 1
a279 1
    if (env_temp = getenv("PERLLIB_PREFIX")) {
d652 57
d733 1
a733 1
#if defined(OS2) || defined(WIN32)
d1048 5
a1052 15
         } else {

            char *shell_cmd = "CMD.EXE /C ";
            OSVERSIONINFO osver;
            osver.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
         
            /*
             * Use CMD.EXE for NT, COMMAND.COM for WIN95
             */
            if (GetVersionEx(&osver)) {
                if (osver.dwPlatformId != VER_PLATFORM_WIN32_NT) {
                    shell_cmd = "COMMAND.COM /C ";
                }
            }       
            pCommand = ap_pstrcat(r->pool, shell_cmd, argv0, NULL);
@


1.4
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d203 1
a203 1
#ifdef WIN32
d253 1
a253 1
    if (!(env_path = getenv("PATH"))) {
d269 15
d489 4
d494 1
a494 1
	    if (p > 1 && w[p - 2] == '\015') {
d1041 3
a1043 1
        if (CreateProcess(NULL, pCommand, NULL, NULL, TRUE, DETACHED_PROCESS, pEnvBlock,
d1067 1
a1067 1

@


1.3
log
@Apache 1.3.4 merge
@
text
@d70 5
d273 1
d505 2
d704 1
a704 1
#ifndef WIN32
d758 1
a758 1
	int is_script;
d760 1
d762 7
d770 3
d774 1
d780 1
d783 1
d786 12
a797 1
	    interpreter[strlen(interpreter) - 1] = '\0';
d799 11
a809 2
	else {
	    is_script = 0;
d811 19
d831 2
a832 3
	if ((!r->args) || (!r->args[0]) || strchr(r->args, '=')) {
	    int emxloop;
	    char *emxtemp;
d834 12
a845 7
	    /* For OS/2 place the variables in the current
	     * environment then it will be inherited. This way
	     * the program will also get all of OS/2's other SETs.
	     */
	    for (emxloop = 0; ((emxtemp = env[emxloop]) != NULL); emxloop++) {
		putenv(emxtemp);
	    }
d847 19
a865 17
	    /* More additions by Alec Kloss for OS/2 */
	    if (is_script) {
		/* here's the stuff to run the interpreter */
		execl(interpreter + 2, interpreter + 2, r->filename, NULL);
	    }
	    else if (strstr(strupr(r->filename), ".CMD") > 0) {
		/* Special case to allow use of REXX commands as scripts. */
		os2pathname(r->filename);
		execl(SHELL_PATH, SHELL_PATH, "/C", r->filename, NULL);
	    }
	    else {
		execl(r->filename, argv0, NULL);
	    }
	}
	else {
	    int emxloop;
	    char *emxtemp;
d867 1
a867 7
	    /* For OS/2 place the variables in the current
	     * environment so that they will be inherited. This way
	     * the program will also get all of OS/2's other SETs.
	     */
	    for (emxloop = 0; ((emxtemp = env[emxloop]) != NULL); emxloop++) {
		putenv(emxtemp);
	    }
d869 6
a874 10
	    if (strstr(strupr(r->filename), ".CMD") > 0) {
		/* Special case to allow use of REXX commands as scripts. */
		os2pathname(r->filename);
		execv(SHELL_PATH, create_argv_cmd(r->pool, argv0, r->args,
						  r->filename));
	    }
	    else {
		execv(r->filename,
		      create_argv(r->pool, NULL, NULL, NULL, argv0, r->args));
	    }
d876 2
a877 1
	return (pid);
d881 6
a886 8
	/* Adapted from Alec Kloss' work for OS/2 */
	int is_script = 0;
	int is_binary = 0;
	char interpreter[2048];	/* hope it's enough for the interpreter path */
	FILE *program;
	int i, sz;
	char *dot;
	char *exename;
a887 3
	int is_exe = 0;
	STARTUPINFO si;
	PROCESS_INFORMATION pi;
d890 2
d894 4
a897 2
	memset(&si, 0, sizeof(si));
	memset(&pi, 0, sizeof(pi));
d899 2
a900 2
	interpreter[0] = 0;
	pid = -1;
d902 1
a902 1
        quoted_filename = ap_pstrcat(r->pool, "\"", r->filename, "\"", NULL);
d905 9
a913 18
            exename = strrchr(r->filename, '/');
            if (!exename) {
                exename = strrchr(r->filename, '\\');
            }
            if (!exename) {
                exename = r->filename;
            }
            else {
                exename++;
            }
            dot = strrchr(exename, '.');
            if (dot) {
                if (!strcasecmp(dot, ".BAT")
                    || !strcasecmp(dot, ".CMD")
                    || !strcasecmp(dot, ".EXE")
                    ||  !strcasecmp(dot, ".COM")) {
                    is_exe = 1;
                }
d916 31
a946 34
            if (!is_exe) {
                program = fopen(r->filename, "rb");
                if (!program) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
                                 "fopen(%s) failed", r->filename);
                    return (pid);
                }
                sz = fread(interpreter, 1, sizeof(interpreter) - 1, program);
                if (sz < 0) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR, r,
                                 "fread of %s failed", r->filename);
                    fclose(program);
                    return (pid);
                }
                interpreter[sz] = 0;
                fclose(program);
                if (!strncmp(interpreter, "#!", 2)) {
                    is_script = 1;
                    for (i = 2; i < sizeof(interpreter); i++) {
                        if ((interpreter[i] == '\r')
                            || (interpreter[i] == '\n')) {
                            break;
                        }
                    }
                    interpreter[i] = 0;
                    for (i = 2; interpreter[i] == ' '; ++i)
                        ;
                    memmove(interpreter+2,interpreter+i,strlen(interpreter+i)+1);
                }
                else {
                    /* Check to see if it's a executable */
                    IMAGE_DOS_HEADER *hdr = (IMAGE_DOS_HEADER*)interpreter;
                    if (hdr->e_magic == IMAGE_DOS_SIGNATURE && hdr->e_cblp < 512) {
                        is_binary = 1;
d949 7
d957 5
a961 2
            /* Bail out if we haven't figured out what kind of
             * file this is by now..
d963 7
a969 6
            if (!is_exe && !is_script && !is_binary) {
                ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                             "%s is not executable; ensure interpreted scripts have "
                             "\"#!\" first line", 
                             r->filename);
                return (pid);
a970 1
        }
d972 2
a973 1
        if (shellcmd) {
a987 25
 	else if ((!r->args) || (!r->args[0]) || strchr(r->args, '=')) { 
	    if (is_exe || is_binary) {
	        /*
	         * When the CGI is a straight binary executable, 
		 * we can run it as is
	         */
	        pCommand = quoted_filename;
	    }
	    else if (is_script) {
                /* When an interpreter is needed, we need to create 
                 * a command line that has the interpreter name
                 * followed by the CGI script name.  
		 */
	        pCommand = ap_pstrcat(r->pool, interpreter + 2, " ", 
				      quoted_filename, NULL);
	    }
	    else {
	        /* If not an executable or script, just execute it
                 * from a command prompt.  
                 */
	        pCommand = ap_pstrcat(r->pool, SHELL_PATH, " /C ", 
				      quoted_filename, NULL);
	    }
	}
	else {
d989 10
a998 64
            /* If we are in this leg, there are some other arguments
             * that we must include in the execution of the CGI.
             * Because CreateProcess is the way it is, we have to
             * create a command line like format for the execution
             * of the CGI.  This means we need to create on long
             * string with the executable and arguments.
             *
             * The arguments string comes in the request structure,
             * and each argument is separated by a '+'.  We'll replace
             * these pluses with spaces.
	     */
	    char *arguments=NULL;
	    int iStringSize = 0;
	    int x;
	    
	    /*
	     *  Duplicate the request structure string so we don't change it.
	     */                                   
	    arguments = ap_pstrdup(r->pool, r->args);
       
	    /*
	     *  Change the '+' to ' '
	     */
	    for (x=0; arguments[x]; x++) {
	        if ('+' == arguments[x]) {
		  arguments[x] = ' ';
		}
	    }
       
	    /*
	     * We need to unescape any characters that are 
             * in the arguments list.
	     */
	    ap_unescape_url(arguments);
	    arguments = ap_escape_shell_cmd(r->pool, arguments);
           
	    /*
	     * The argument list should now be good to use, 
	     * so now build the command line.
	     */
	    if (is_exe || is_binary) {
	        pCommand = ap_pstrcat(r->pool, quoted_filename, " ", 
				      arguments, NULL);
	    }
	    else if (is_script) {
	        pCommand = ap_pstrcat(r->pool, interpreter + 2, " ", 
				      quoted_filename, " ", arguments, NULL);
	    }
	    else {
	        pCommand = ap_pstrcat(r->pool, SHELL_PATH, " /C ", 
				      quoted_filename, " ", arguments, NULL);
	    }
	}

	/*
	 * Make child process use hPipeOutputWrite as standard out,
	 * and make sure it does not show on screen.
	 */
	si.cb = sizeof(si);
	si.dwFlags     = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
	si.wShowWindow = SW_HIDE;
	si.hStdInput   = pinfo->hPipeInputRead;
	si.hStdOutput  = pinfo->hPipeOutputWrite;
	si.hStdError   = pinfo->hPipeErrorWrite;
d1022 1
a1022 1
        if (CreateProcess(NULL, pCommand, NULL, NULL, TRUE, 0, pEnvBlock,
d1025 20
a1044 50
            pid = pi.dwProcessId;
            /*
             * We must close the handles to the new process and its main thread
             * to prevent handle and memory leaks.
             */ 
            CloseHandle(pi.hProcess);
            CloseHandle(pi.hThread);
        } else {
	    if (is_script) {
		/* since we are doing magic to find what we are executing
		 * if running a script, log what we think we should have
		 * executed
		 */
		ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_WIN32ERROR, r,
			     "could not run script interpreter: %s", pCommand);
	    }
	}
#if 0
	if ((!r->args) || (!r->args[0]) || strchr(r->args, '=')) {
	    if (is_exe || is_binary) {
		pid = spawnle(_P_NOWAIT, r->filename, r->filename, NULL, env);
	    }
	    else if (is_script) {
		pid = spawnle(_P_NOWAIT, interpreter + 2, interpreter + 2,
			      r->filename, NULL, env);
	    }
	    else {
		pid = spawnle(_P_NOWAIT, SHELL_PATH, SHELL_PATH, "/C",
			      r->filename, NULL, env);
	    }
	}
	else {
	    if (is_exe || is_binary) {
		pid = spawnve(_P_NOWAIT, r->filename,
			      create_argv(r->pool, NULL, NULL, NULL, argv0, 
					  r->args), env);
	    }
	    else if (is_script) {
		pid = spawnve(_P_NOWAIT, interpreter + 2,
			      create_argv(r->pool, interpreter + 2, NULL, NULL,
					  r->filename, r->args), env);
	    }
	    else {
		pid = spawnve(_P_NOWAIT, SHELL_PATH,
			      create_argv_cmd(r->pool, argv0, r->args,
					      r->filename), env);
	    }
	}
#endif
	return (pid);
d1046 1
@


1.2
log
@Apache 1.3.3 merge + proxy_segv fix
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
d265 1
a265 1
    ap_table_setn(e, "SERVER_SIGNATURE", ap_psignature("", r));
d399 1
a399 1
	pa_req = ap_sub_req_lookup_uri(escape_uri(r->pool, r->path_info), r);
d1055 10
a1064 1
        }
@


1.1
log
@Initial revision
@
text
@d265 1
a461 2
	    ap_table_setn(r->notes, "error-notes",
			  "Premature end of script headers");
a544 2
	    ap_table_setn(r->notes, "error-notes",
			  ap_pstrdup(r->pool, malformed));
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 9
a24 6
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
d26 3
a28 4
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
d30 4
a33 3
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
d35 4
a38 4
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 5
a54 3
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
a55 3
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
a69 5
#ifdef OS2
#define INCL_DOS
#include <os2.h>
#endif

d87 5
d198 1
a198 1
#if defined(WIN32) || defined(OS2)
d248 1
a248 1
    if (!(env_path = ap_pstrdup(r->pool, getenv("PATH")))) {
a263 15
#ifdef OS2
    if ((env_temp = getenv("COMSPEC")) != NULL) {
        ap_table_addn(e, "COMSPEC", env_temp);            
    }
    if ((env_temp = getenv("ETC")) != NULL) {
        ap_table_addn(e, "ETC", env_temp);            
    }
    if ((env_temp = getenv("DPATH")) != NULL) {
        ap_table_addn(e, "DPATH", env_temp);            
    }
    if ((env_temp = getenv("PERLLIB_PREFIX")) != NULL) {
        ap_table_addn(e, "PERLLIB_PREFIX", env_temp);            
    }
#endif

a264 1
    ap_table_addn(e, "SERVER_SIGNATURE", ap_psignature("", r));
a266 1
    ap_table_addn(e, "SERVER_ADDR", r->connection->local_ip);	/* Apache */
d398 1
a398 1
	pa_req = ap_sub_req_lookup_uri(ap_escape_uri(r->pool, r->path_info), r);
d461 2
a468 4
        /* Indeed, the host's '\n':
           '\012' for UNIX; '\015' for MacOS; '\025' for OS/390
           -- whatever the script generates.
        */
d470 1
a470 1
	    if (p > 1 && w[p - 2] == CR) {
a499 2
		/* the cookies have already been copied to the cookie_table */
		ap_table_unset(r->err_headers_out, "Set-Cookie");
d546 2
a627 57
struct vastrs {
    va_list args;
    int arg;
    const char *curpos;
};

static int getsfunc_STRING(char *w, int len, void *pvastrs)
{
    struct vastrs *strs = (struct vastrs*) pvastrs;
    char *p;
    int t;
    
    if (!strs->curpos || !*strs->curpos) 
        return 0;
    p = strchr(strs->curpos, '\n');
    if (p)
        ++p;
    else
        p = strchr(strs->curpos, '\0');
    t = p - strs->curpos;
    if (t > len)
        t = len;
    strncpy (w, strs->curpos, t);
    w[t] = '\0';
    if (!strs->curpos[t]) {
        ++strs->arg;
        strs->curpos = va_arg(strs->args, const char *);
    }
    else
        strs->curpos += t;
    return t;    
}

/* ap_scan_script_header_err_strs() accepts additional const char* args...
 * each is treated as one or more header lines, and the first non-header
 * character is returned to **arg, **data.  (The first optional arg is
 * counted as 0.)
 */
API_EXPORT_NONSTD(int) ap_scan_script_header_err_strs(request_rec *r, 
                                                      char *buffer, 
                                                      const char **termch,
                                                      int *termarg, ...)
{
    struct vastrs strs;
    int res;

    va_start(strs.args, termarg);
    strs.arg = 0;
    strs.curpos = va_arg(strs.args, char*);
    res = ap_scan_script_header_err_core(r, buffer, getsfunc_STRING, (void *) &strs);
    if (termch)
        *termch = strs.curpos;
    if (termarg)
        *termarg = strs.arg;
    va_end(strs.args);
    return res;
}
d642 1
a642 1
	ap_rprintf(r, "%4dk", (int)((size + 512) / 1024));
d648 15
a662 1
	ap_rprintf(r, "%4dM", (int)((size + 524288) / 1048576));
d664 18
d683 2
d690 3
d697 3
a699 1
#if !defined(WIN32) && !defined(OS2)
d753 1
a753 1
	int is_script = 0;
a754 1
	char error_object[260];
d756 1
a756 14
        char *cmdline = r->filename, *cmdline_pos;
        int cmdlen;
	char *args = "", *args_end;
	ULONG rc;
        RESULTCODES rescodes;
        int env_len, e;
        char *env_block, *env_block_pos;

	if ((conf->cgi_command_args != AP_FLAG_OFF)
            && r->args && r->args[0]
            && !strchr(r->args, '=')) {
	    args = r->args;
        }
	    
a757 1
	
a762 1
	
a764 1
	
d767 1
a767 12
            interpreter[strlen(interpreter) - 1] = '\0';
            if (interpreter[2] != '/' && interpreter[2] != '\\' && interpreter[3] != ':') {
                char buffer[300];
                if (DosSearchPath(SEARCH_ENVIRONMENT, "PATH", interpreter+2, buffer, sizeof(buffer)) == 0) {
                    strcpy(interpreter+2, buffer);
                } else {
                    strcat(interpreter, ".exe");
                    if (DosSearchPath(SEARCH_ENVIRONMENT, "PATH", interpreter+2, buffer, sizeof(buffer)) == 0) {
                        strcpy(interpreter+2, buffer);
                    }
                }
            }
d769 2
a770 11

        if (is_script) {
            cmdline = ap_pstrcat(r->pool, interpreter+2, " ", r->filename, NULL);
        }
        else if (strstr(strupr(r->filename), ".CMD") > 0) {
            /* Special case to allow use of REXX commands as scripts. */
            os2pathname(r->filename);
            cmdline = ap_pstrcat(r->pool, SHELL_PATH, " /C ", r->filename, NULL);
        }
        else {
            cmdline = r->filename;
a771 10
	
        args = ap_pstrdup(r->pool, args);
        ap_unescape_url(args);
        args = ap_double_quotes(r->pool, args);
        args_end = args + strlen(args);

        if (args_end - args > 4000) { /* cmd.exe won't handle lines longer than 4k */
            args_end = args + 4000;
            *args_end = 0;
        }
d773 3
a775 8
        /* +4 = 1 space between progname and args, 2 for double null at end, 2 for possible quote on first arg */
        cmdlen = strlen(cmdline) + strlen(args) + 4; 
        cmdline_pos = cmdline;

        while (*cmdline_pos) {
            cmdlen += 2 * (*cmdline_pos == '+');  /* Allow space for each arg to be quoted */
            cmdline_pos++;
        }
d777 7
a783 2
        cmdline = ap_pstrndup(r->pool, cmdline, cmdlen);
        cmdline_pos = cmdline + strlen(cmdline);
d785 17
a801 4
	while (args < args_end) {
            char *arg;
	    
            arg = ap_getword_nc(r->pool, &args, '+');
d803 7
a809 2
            if (strpbrk(arg, "&|<> "))
                arg = ap_pstrcat(r->pool, "\"", arg, "\"", NULL);
d811 10
a820 33
            *(cmdline_pos++) = ' ';
            strcpy(cmdline_pos, arg);
            cmdline_pos += strlen(cmdline_pos);
        }

        *(++cmdline_pos) = 0; /* Add required second terminator */
	args = strchr(cmdline, ' ');
	
	if (args) {
	    *args = 0;
	    args++;
	}

        /* Create environment block from list of envariables */
        for (env_len=1, e=0; env[e]; e++)
            env_len += strlen(env[e]) + 1;

        env_block = ap_palloc(r->pool, env_len);
        env_block_pos = env_block;

        for (e=0; env[e]; e++) {
            strcpy(env_block_pos, env[e]);
            env_block_pos += strlen(env_block_pos) + 1;
        }

        *env_block_pos = 0; /* environment block is terminated by a double null */

	rc = DosExecPgm(error_object, sizeof(error_object), EXEC_ASYNC, cmdline, env_block, &rescodes, cmdline);
	
	if (rc) {
            ap_log_rerror(APLOG_MARK, APLOG_ERR, r, "DosExecPgm(%s %s) failed, %s - %s",
                          cmdline, args ? args : "", ap_os_error_message(rc), error_object );
	    return -1;
d822 1
a822 2
	
	return rescodes.codeTerminate;
d826 12
a837 7
        /* Adapted from Alec Kloss' work for OS/2 */
        char *interpreter = NULL;
        char *invokename = NULL;
        char *arguments = NULL;
        char *ext = NULL;
        char *s = NULL;
        char *t = NULL;
a839 2

        int i;
d842 2
a843 1
        file_type_e fileType;
d845 2
a846 2
        STARTUPINFO si;
        PROCESS_INFORMATION pi;
d848 1
a848 4
        memset(&si, 0, sizeof(si));
        memset(&pi, 0, sizeof(pi));

        pid = -1;
d851 18
a868 9

            fileType = ap_get_win32_interpreter(r, &interpreter);

            if (fileType == eFileTypeUNKNOWN) {
                ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                              "%s is not executable; ensure interpreted scripts have "
                              "\"#!\" first line", 
                              r->filename);
                return (pid);
d871 5
a875 14
            if (interpreter && *interpreter 
                    && (s = strstr(interpreter, "\"%1\""))) {
                s[1] = '\0';
                s += 3;
                invokename = ap_pstrdup(r->pool, r->filename);
            }
            else
            {
                char shortname[MAX_PATH];
                DWORD rv = GetShortPathName(r->filename, shortname, MAX_PATH);
                if (!rv || rv >= MAX_PATH) {
                    ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
                                  "%s is not executable; cannot translate "
                                  "to a short path name.", r->filename);
d878 6
a883 6
                invokename = ap_pstrdup(r->pool, shortname);

                if (interpreter && *interpreter
                        && (s = strstr(interpreter, "%1"))) {
                    s[0] = '\0';
                    s += 2;
d885 9
a893 39
            }
            for (t = invokename; *t; ++t) {
                if (*t == '/')
                    *t = '\\';
            }

            /*
             * Look at the arguments...
             */
            arguments = "";
            if ((conf->cgi_command_args != AP_FLAG_OFF)
                 && (r->args) && (r->args[0])
                 && !strchr(r->args, '=')) { 
                /* If we are in this leg, there are some other arguments
                 * that we must include in the execution of the CGI.
                 * Because CreateProcess is the way it is, we have to
                 * create a command line like format for the execution
                 * of the CGI.  This means we need to create on long
                 * string with the executable and arguments.
                 *
                 * The arguments string comes in the request structure,
                 * and each argument is separated by a '+'.  We'll replace
                 * these pluses with spaces.
                 */

                int iStringSize = 0;
                int x;
	    
                /*
                 *  Duplicate the request structure string so we don't change it.
                 */                                   
                arguments = ap_pstrdup(r->pool, r->args);
                
                /*
                 *  Change the '+' to ' '
                 */
                for (x=0; arguments[x]; x++) {
                    if ('+' == arguments[x]) {
                        arguments[x] = ' ';
d895 4
d900 5
a904 14
       
                /*
                 * We need to unescape any characters that are 
                 * in the arguments list.  Truncate to 4000
                 * characters for safety, being careful of the
                 * now-escaped characters.
                 */
                ap_unescape_url(arguments);
                arguments = ap_escape_shell_cmd(r->pool, arguments);
                if (strlen(arguments) > 4000)
                {
                    int len = 4000;
                    while (len && arguments[len - 1] == '\\') {
                        --len;
a905 14
                    arguments[len] = '\0';
                }

                /*
                 * Now that the arguments list is 'shell' escaped with
                 * backslashes, we need to make cmd.exe/command.com 
                 * safe from this same set of characters.
                 */
                if (fileType == eCommandShell32) {
                    arguments = ap_caret_escape_args(r->pool, arguments);
                }
                else if (fileType == eCommandShell16) {
                    arguments = ap_pstrcat(r->pool, "\"", 
                            ap_double_quotes(r->pool, arguments), "\"", NULL);
d908 11
d920 5
d926 1
a926 7
             * The remaining code merges the interpreter, the backslashed
             * and potentially shortened invoke name, the various
             * interpreter segments and the arguments.
             *
             * Note that interpreter started out with %1 %* arguments,
             * so the *t character skips the %* arguments list, and the
             * *s already skipped the %1 argument (quoted or not.)
d928 26
a953 3

            if (s && (t = strstr(s, "%*"))) {
                /* interpreter formatted: prog [opts] %1 [opts] %* [opts] 
d955 5
a959 23
                t[0] = '\0';
                t += 2;
                pCommand = ap_pstrcat(r->pool, interpreter, invokename,
                                               s, arguments, t, NULL);
            }
            else if (s) {
                /* interpreter formatted: prog [opts] %1 [opts] 
                 */
                pCommand = ap_pstrcat(r->pool, interpreter, invokename,
                                               s, " ", arguments, NULL);
            }
            else if (interpreter) {
                /* interpreter formatted: prog [opts]
                 */
                pCommand = ap_pstrcat(r->pool, interpreter, " ", invokename,
                                               " ", arguments, NULL);
            }
            else {
                /* no interpreter required
                 */
                pCommand = ap_pstrcat(r->pool, invokename, 
                                               " ", arguments, NULL);
            }
d961 53
a1013 21
        }
        else /* shellcmd */
        {
            char *p, *comspec = getenv("COMSPEC");
            const char *quotecomspec;
            const char *quoteargv0;
            if (!comspec)
                comspec = SHELL_PATH;
            p = strchr(comspec, '\0');
            quotecomspec = (strchr(comspec, ' ') && comspec[0] != '\"')
                         ? "\"" : "";
            quoteargv0 = (strchr(argv0, ' ') && argv0[0] != '\"') ? "\"" : "";
            pCommand = ap_pstrcat(r->pool, quotecomspec, comspec, quotecomspec,
                                  " /c ", quoteargv0, argv0, quoteargv0, NULL);
            /* Forward slash argv[0] only */
            for (p = pCommand + strlen(pCommand) - strlen(argv0) 
                              - strlen(quoteargv0); *p; ++p) {
                if (*p == '/')
                    *p = '\\';
            }
        }
d1015 10
a1024 10
        /*
         * Make child process use hPipeOutputWrite as standard out,
         * and make sure it does not show on screen.
         */
        si.cb = sizeof(si);
        si.dwFlags     = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
        si.wShowWindow = SW_HIDE;
        si.hStdInput   = pinfo->hPipeInputRead;
        si.hStdOutput  = pinfo->hPipeOutputWrite;
        si.hStdError   = pinfo->hPipeErrorWrite;
d1048 1
a1048 10
        ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_INFO, r->server,
                     "Invoking CGI Command '%s'", pCommand);
        for (i = 0; env[i]; ++i) {
            ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_DEBUG, r->server,
                         "  CGI env[%d] = '%s'", i, env[i]);
        }

        if (CreateProcess(NULL, pCommand, NULL, NULL, TRUE, 
                          0,
                          pEnvBlock,
d1051 7
a1057 18
            if (fileType == eFileTypeEXE16 || fileType == eCommandShell16) {
                /* Hack to get 16-bit CGI's working. It works for all the 
                 * standard modules shipped with Apache. pi.dwProcessId is 0 
                 * for 16-bit CGIs and all the Unix specific code that calls 
                 * ap_call_exec interprets this as a failure case. And we can't 
                 * use -1 either because it is mapped to 0 by the caller.
                 */
                pid = -2;
            }
            else {
                pid = pi.dwProcessId;
                /*
                 * We must close the handles to the new process and its main thread
                 * to prevent handle and memory leaks.
                 */ 
                CloseHandle(pi.hProcess);
                CloseHandle(pi.hThread);
            }
d1059 33
a1091 1
        return (pid);
a1092 1
#elif defined(NETWARE)
d1155 1
a1155 3
	else if ((conf->cgi_command_args == AP_FLAG_OFF)
            || (!r->args) || (!r->args[0])
            || strchr(r->args, '=')) {
d1172 1
a1172 3
	else if ((conf->cgi_command_args == AP_FLAG_OFF)
            || (!r->args) || (!r->args[0])
            || strchr(r->args, '=')) {
@


1.1.1.3
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d283 1
a283 2
    ap_table_addn(e, "SERVER_NAME", 
		  ap_escape_html(r->pool,ap_get_server_name(r)));
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
@


