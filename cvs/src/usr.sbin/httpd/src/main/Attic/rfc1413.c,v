head	1.15;
access;
symbols
	OPENBSD_5_5:1.14.0.26
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.22
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.20
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.18
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.16
	OPENBSD_5_0:1.14.0.14
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.12
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.10
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.6
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.8
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.04.22.14.47.26;	author henning;	state dead;
branches;
next	1.14;

1.14
date	2008.05.21.11.28.48;	author mbalmer;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.15.06.05.43;	author mbalmer;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.13.17.44.46;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.09.08.06.28;	author mbalmer;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.09.12.13.10;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.02.19.42.47;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.17.18.57.05;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.21.13.11.35;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.29.02.08.06;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.43;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.25.18.29.48;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.38;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.06.15;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.40;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.40;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.28.50;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.39;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.11.17.17.03.22;	author henning;	state Exp;
branches;
next	;


desc
@@


1.15
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/*	$OpenBSD: rfc1413.c,v 1.14 2008/05/21 11:28:48 mbalmer Exp $ */

/* ====================================================================
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
 */

/*
 * rfc1413() speaks a common subset of the RFC 1413, AUTH, TAP and IDENT
 * protocols. The code queries an RFC 1413 etc. compatible daemon on a remote
 * host to look up the owner of a connection. The information should not be
 * used for authentication purposes. This routine intercepts alarm signals.
 * 
 * Diagnostics are reported through syslog(3).
 * 
 * Author: Wietse Venema, Eindhoven University of Technology,
 * The Netherlands.
 */

/* Some small additions for Apache --- ditch the "sccsid" var if
 * compiling with gcc (it *has* changed), include ap_config.h for the
 * prototypes it defines on at least one system (SunlOSs) which has
 * them missing from the standard header files, and one minor change
 * below (extra parens around assign "if (foo = bar) ..." to shut up
 * gcc -Wall).
 */

/* Rewritten by David Robinson */

#include "httpd.h"		/* for server_rec, conn_rec, ap_longjmp, etc. */
#include "http_log.h"		/* for aplog_error */
#include "rfc1413.h"
#include "http_main.h"		/* set_callback_and_alarm */

/* Local stuff. */
/* Semi-well-known port */
#define	RFC1413_PORT	113
/* maximum allowed length of userid */
#define RFC1413_USERLEN 512
/* rough limit on the amount of data we accept. */
#define RFC1413_MAXDATA 1000

#ifndef RFC1413_TIMEOUT
#define RFC1413_TIMEOUT	30
#endif
#define	ANY_PORT	0	/* Any old port will do */
#define FROM_UNKNOWN  "unknown"

int ap_rfc1413_timeout = RFC1413_TIMEOUT;	/* Global so it can be changed */

#define RFC_USER_STATIC static
static JMP_BUF timebuf;

/* ident_timeout - handle timeouts */
static void
ident_timeout(int sig)
{
	ap_longjmp(timebuf, sig);
}

/* bind_connect - bind both ends of a socket */
/* Ambarish fix this. Very broken */
static int
get_rfc1413(int sock, const struct sockaddr *our_sin,
    const struct sockaddr *rmt_sin, char user[RFC1413_USERLEN+1],
    server_rec *srv)
{
	struct sockaddr_storage rmt_query_sin, our_query_sin;
	unsigned int o_rmt_port, o_our_port;	/* original port pair */
	unsigned int rmt_port, our_port;	/* replied port pair */
	int i;
	char *cp;
	char buffer[RFC1413_MAXDATA + 1];
	int buflen;

	/*
	 * Bind the local and remote ends of the query socket to the same
	 * IP addresses as the connection under investigation. We go
	 * through all this trouble because the local or remote system
	 * might have more than one network address. The RFC1413 etc.
	 * client sends only port numbers; the server takes the IP
	 * addresses from the query socket.
	 */

	memcpy(&our_query_sin, our_sin, our_sin->sa_len);
	memcpy(&rmt_query_sin, rmt_sin, rmt_sin->sa_len);
	switch (our_sin->sa_family) {
	case AF_INET:
		((struct sockaddr_in *)&our_query_sin)->sin_port =
		    htons(ANY_PORT);
		o_our_port = ntohs(((struct sockaddr_in *)our_sin)->sin_port);
		((struct sockaddr_in *)&rmt_query_sin)->sin_port =
		    htons(RFC1413_PORT);
		o_rmt_port = ntohs(((struct sockaddr_in *)rmt_sin)->sin_port);
		break;
	case AF_INET6:
		((struct sockaddr_in6 *)&our_query_sin)->sin6_port =
		    htons(ANY_PORT);
		o_our_port =
		    ntohs(((struct sockaddr_in6 *)our_sin)->sin6_port);
		((struct sockaddr_in6 *)&rmt_query_sin)->sin6_port =
		    htons(RFC1413_PORT);
		o_rmt_port =
		    ntohs(((struct sockaddr_in6 *)rmt_sin)->sin6_port);
		break;
	default:
		/* unsupported AF */
		return -1;
	}

	if (bind(sock, (struct sockaddr *) &our_query_sin,
	    our_query_sin.ss_len) < 0) {
		ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
		    "bind: rfc1413: Error binding to local port");
		return -1;
	}

	/*
	 * errors from connect usually imply the remote machine doesn't
	 * support the service
	 */
	if (connect(sock, (struct sockaddr *) &rmt_query_sin,
	    rmt_query_sin.ss_len) < 0)
		return -1;

	/* send the data */
	buflen = ap_snprintf(buffer, sizeof(buffer), "%u,%u\r\n", o_rmt_port,
	    o_our_port);

	/* send query to server. Handle short write. */
	i = 0;
	while(i < (int)strlen(buffer)) {
		int j;
		j = write(sock, buffer+i, (strlen(buffer+i)));
		if (j < 0 && errno != EINTR) {
			ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
			    "write: rfc1413: error sending request");
			return -1;
		} else if (j > 0)
			i+=j; 
	}

	/*
	 * Read response from server. - the response should be newline 
	 * terminated according to rfc - make sure it doesn't stomp it's
	 * way out of the buffer.
	 */
	i = 0;
	memset(buffer, '\0', sizeof(buffer));
	/*
	 * Note that the strchr function below checks for \012 instead of '\n'
	 * this allows it to work on both ASCII and EBCDIC machines.
	 */
	while((cp = strchr(buffer, '\012')) == NULL &&
	    i < sizeof(buffer) - 1) {
		int j;

		j = read(sock, buffer+i, (sizeof(buffer) - 1) - i);
		if (j < 0 && errno != EINTR) {
			ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
			    "read: rfc1413: error reading response");
			return -1;
		}
		else if (j > 0)
			i+=j; 
	}

	/* RFC1413_USERLEN = 512 */
	if (sscanf(buffer, "%u , %u : USERID :%*[^:]:%512s", &rmt_port,
	    &our_port, user) != 3 || o_rmt_port != rmt_port ||
	    o_our_port != our_port)
		return -1;

	/*
	* Strip trailing carriage return. It is part of the
	* protocol, not part of the data.
	*/
	if ((cp = strchr(user, '\r')))
		*cp = '\0';

	return 0;
}

/* rfc1413 - return remote user name, given socket structures */
API_EXPORT(char *)
ap_rfc1413(conn_rec *conn, server_rec *srv)
{
	RFC_USER_STATIC char user[RFC1413_USERLEN + 1];	/* XXX */
	RFC_USER_STATIC char *result;
	RFC_USER_STATIC int sock;

	result = FROM_UNKNOWN;

	sock = ap_psocket_ex(conn->pool, conn->remote_addr.ss_family,
	    SOCK_STREAM, IPPROTO_TCP, 1);
	if (sock < 0) {
		ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
		    "socket: rfc1413: error creating socket");
		conn->remote_logname = result;
	}

	/*
	* Set up a timer so we won't get stuck while waiting for the server.
	*/
	if (ap_setjmp(timebuf) == 0) {
		ap_set_callback_and_alarm(ident_timeout, ap_rfc1413_timeout);

		if (get_rfc1413(sock, (struct sockaddr *)&conn->local_addr,
		    (struct sockaddr *)&conn->remote_addr, user, srv) >= 0)
			result = user;
	}
	ap_set_callback_and_alarm(NULL, 0);
	ap_pclosesocket(conn->pool, sock);
	conn->remote_logname = result;

	return conn->remote_logname;
}

@


1.14
log
@Remove #ifndef SIN6_LEN/#else/#endif constructs.

Suggested by djm a while ago.  No binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc1413.c,v 1.13 2008/05/15 06:05:43 mbalmer Exp $ */
@


1.13
log
@Add OpenBSD markers.

no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a137 4
#ifndef SIN6_LEN
	memcpy(&our_query_sin, our_sin, SA_LEN(our_sin));
	memcpy(&rmt_query_sin, rmt_sin, SA_LEN(rmt_sin));
#else
a139 1
#endif
d165 1
a165 6
#ifndef SIN6_LEN
	    SA_LEN((struct sockaddr *) &our_query_sin)
#else
	    our_query_sin.ss_len
#endif
	    ) < 0) {
d176 1
a176 6
#ifndef SIN6_LEN
	    SA_LEN((struct sockaddr *) &rmt_query_sin)
#else
	    rmt_query_sin.ss_len
#endif
	    ) < 0)
@


1.12
log
@A first chunk of readability/knf changes.  Since there is nothing more
to merge from upstream, we can safely sanitize the code and hopefully
the build system.

Discussed with and feedback from sthen, todd, dlg and henning.

no binary changes.
@
text
@d1 2
@


1.11
log
@Add support for IPv6 while keeping the default at IPv4 to not break
existing installations.  See the documentation for the IPv6 related
configuration.

This changes the module ABI since addresses are now struct addrinfo.

This has been tested by many people and run on production machines
for several months.

feedback many, ok todd
@
text
@d106 2
a107 1
static void ident_timeout(int sig)
d109 1
a109 1
    ap_longjmp(timebuf, sig);
d114 4
a117 3
static int get_rfc1413(int sock, const struct sockaddr *our_sin,
		       const struct sockaddr *rmt_sin, 
		       char user[RFC1413_USERLEN+1], server_rec *srv)
d119 16
a134 16
    struct sockaddr_storage rmt_query_sin, our_query_sin;
    unsigned int o_rmt_port, o_our_port;	/* original port pair */
    unsigned int rmt_port, our_port;		/* replied port pair */
    int i;
    char *cp;
    char buffer[RFC1413_MAXDATA + 1];
    int buflen;

    /*
     * Bind the local and remote ends of the query socket to the same
     * IP addresses as the connection under investigation. We go
     * through all this trouble because the local or remote system
     * might have more than one network address. The RFC1413 etc.
     * client sends only port numbers; the server takes the IP
     * addresses from the query socket.
     */
d137 2
a138 2
    memcpy(&our_query_sin, our_sin, SA_LEN(our_sin));
    memcpy(&rmt_query_sin, rmt_sin, SA_LEN(rmt_sin));
d140 2
a141 2
    memcpy(&our_query_sin, our_sin, our_sin->sa_len);
    memcpy(&rmt_query_sin, rmt_sin, rmt_sin->sa_len);
d143 23
a165 17
    switch (our_sin->sa_family) {
    case AF_INET:
      ((struct sockaddr_in *)&our_query_sin)->sin_port = htons(ANY_PORT);
      o_our_port = ntohs(((struct sockaddr_in *)our_sin)->sin_port);
      ((struct sockaddr_in *)&rmt_query_sin)->sin_port = htons(RFC1413_PORT);
      o_rmt_port = ntohs(((struct sockaddr_in *)rmt_sin)->sin_port);
      break;
    case AF_INET6:
      ((struct sockaddr_in6 *)&our_query_sin)->sin6_port = htons(ANY_PORT);
      o_our_port = ntohs(((struct sockaddr_in6 *)our_sin)->sin6_port);
      ((struct sockaddr_in6 *)&rmt_query_sin)->sin6_port = htons(RFC1413_PORT);
      o_rmt_port = ntohs(((struct sockaddr_in6 *)rmt_sin)->sin6_port);
      break;
    default:
      /* unsupported AF */
      return -1;
    }
d167 1
a167 1
    if (bind(sock, (struct sockaddr *) &our_query_sin,
d169 1
a169 1
	     SA_LEN((struct sockaddr *) &our_query_sin)
d171 1
a171 1
	     our_query_sin.ss_len
d173 2
a174 2
	     ) < 0) {
	ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
d176 2
a177 2
	return -1;
    }
d179 5
a183 5
/*
 * errors from connect usually imply the remote machine doesn't support
 * the service
 */
    if (connect(sock, (struct sockaddr *) &rmt_query_sin,
d185 1
a185 1
		SA_LEN((struct sockaddr *) &rmt_query_sin)
d187 1
a187 1
		rmt_query_sin.ss_len
d189 2
a190 59
		) < 0) {
	return -1;
    }

/* send the data */
    buflen = ap_snprintf(buffer, sizeof(buffer), "%u,%u\r\n", o_rmt_port,
		o_our_port);

    /* send query to server. Handle short write. */
    i = 0;
    while(i < (int)strlen(buffer)) {
        int j;
	j = write(sock, buffer+i, (strlen(buffer+i)));
	if (j < 0 && errno != EINTR) {
	  ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
		       "write: rfc1413: error sending request");
	  return -1;
	}
	else if (j > 0) {
	    i+=j; 
	}
    }

    /*
     * Read response from server. - the response should be newline 
     * terminated according to rfc - make sure it doesn't stomp it's
     * way out of the buffer.
     */

    i = 0;
    memset(buffer, '\0', sizeof(buffer));
    /*
     * Note that the strchr function below checks for \012 instead of '\n'
     * this allows it to work on both ASCII and EBCDIC machines.
     */
    while((cp = strchr(buffer, '\012')) == NULL && i < sizeof(buffer) - 1) {
        int j;
  
	j = read(sock, buffer+i, (sizeof(buffer) - 1) - i);
	if (j < 0 && errno != EINTR) {
	   ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
			"read: rfc1413: error reading response");
	   return -1;
	}
	else if (j > 0) {
	    i+=j; 
	}
    }

/* RFC1413_USERLEN = 512 */
    if (sscanf(buffer, "%u , %u : USERID :%*[^:]:%512s", &rmt_port, &our_port,
	       user) != 3 || o_rmt_port != rmt_port || o_our_port != our_port) {
	return -1;
    }

    /*
     * Strip trailing carriage return. It is part of the
     * protocol, not part of the data.
     */
d192 41
a232 2
    if ((cp = strchr(user, '\r')))
	*cp = '\0';
d234 14
a247 1
    return 0;
d251 2
a252 1
API_EXPORT(char *) ap_rfc1413(conn_rec *conn, server_rec *srv)
d254 27
a280 27
    RFC_USER_STATIC char user[RFC1413_USERLEN + 1];	/* XXX */
    RFC_USER_STATIC char *result;
    RFC_USER_STATIC int sock;

    result = FROM_UNKNOWN;

    sock = ap_psocket_ex(conn->pool, conn->remote_addr.ss_family, SOCK_STREAM, IPPROTO_TCP, 1);
    if (sock < 0) {
    	ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
    		    "socket: rfc1413: error creating socket");
    	conn->remote_logname = result;
    }

    /*
     * Set up a timer so we won't get stuck while waiting for the server.
     */
    if (ap_setjmp(timebuf) == 0) {
	ap_set_callback_and_alarm(ident_timeout, ap_rfc1413_timeout);

	if (get_rfc1413(sock, (struct sockaddr *)&conn->local_addr,
		(struct sockaddr *)&conn->remote_addr, user, srv) >= 0) {
	    result = user;
	}
    }
    ap_set_callback_and_alarm(NULL, 0);
    ap_pclosesocket(conn->pool, sock);
    conn->remote_logname = result;
d282 1
a282 1
    return conn->remote_logname;
@


1.10
log
@cleanup and unifdef'ing, no change in object files
work by Daniel Ouellet <daniel@@presscom.net>
@
text
@d113 2
a114 2
static int get_rfc1413(int sock, const struct sockaddr_in *our_sin,
		       const struct sockaddr_in *rmt_sin, 
d117 3
a119 2
    struct sockaddr_in rmt_query_sin, our_query_sin;
    unsigned int rmt_port, our_port;
d134 24
a157 4
    our_query_sin = *our_sin;
    our_query_sin.sin_port = htons(ANY_PORT);
    rmt_query_sin = *rmt_sin;
    rmt_query_sin.sin_port = htons(RFC1413_PORT);
d160 6
a165 1
	     sizeof(struct sockaddr_in)) < 0) {
d176 8
a183 2
		sizeof(struct sockaddr_in)) < 0)
	            return -1;
d186 2
a187 2
    buflen = ap_snprintf(buffer, sizeof(buffer), "%u,%u\r\n", ntohs(rmt_sin->sin_port),
		ntohs(our_sin->sin_port));
d232 1
a232 2
	       user) != 3 || ntohs(rmt_sin->sin_port) != rmt_port
	|| ntohs(our_sin->sin_port) != our_port)
d234 1
d256 1
a256 1
    sock = ap_psocket_ex(conn->pool, AF_INET, SOCK_STREAM, IPPROTO_TCP, 1);
d269 2
a270 1
	if (get_rfc1413(sock, &conn->local_addr, &conn->remote_addr, user, srv) >= 0)
d272 1
@


1.9
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a101 11

#ifdef MULTITHREAD
#define RFC_USER_STATIC 

static int setsocktimeout (int sock, int timeout)
{
    /* XXX Needs to be implemented for non-winsock platforms */
    return 0;
}
#else /* MULTITHREAD */

a109 1
#endif
a233 6
#ifdef MULTITHREAD
    if (setsocktimeout(sock, ap_rfc1413_timeout) == 0) {
        if (get_rfc1413(sock, &conn->local_addr, &conn->remote_addr, user, srv) >= 0)
            result = ap_pstrdup (conn->pool, user);
    }
#else
a240 1
#endif
@


1.8
log
@merge apache 1.3.29 and mod_ssl 2.8.16
ok brad@@
@
text
@a101 4
#if (defined (NETWARE) || defined (WIN32))
#define write(a,b,c) send(a,b,c,0)
#define read(a,b,c) recv(a,b,c,0)
#endif
a107 15
#if (defined (NETWARE) || defined (WIN32))
    u_long msec = 0;

    /* Make sure that we are in blocking mode */
    if (ioctlsocket(sock, FIONBIO, &msec) == SOCKET_ERROR) {
        return h_errno;
    }

    /* Win32 timeouts are in msec, represented as int */
    msec = timeout * 1000;
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, 
               (char *) &msec, sizeof(msec));
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, 
               (char *) &msec, sizeof(msec));
#else
a108 1
#endif
a146 3
#ifdef MPE 
    our_query_sin.sin_addr.s_addr = INADDR_ANY;
#endif
a169 3
#ifdef CHARSET_EBCDIC
    ebcdic2ascii(buffer, buffer, buflen);
#endif
a198 14
#ifdef TPF
        /*
         * socket read on TPF doesn't get interrupted by
         * signals so additional processing is needed
         */
        j = ap_set_callback_and_alarm(NULL, 0);
        ap_set_callback_and_alarm(ident_timeout, j);
        j = select(&sock, 1, 0, 0, j * 1000);
        if (j < 1) {
            ap_set_callback_and_alarm(NULL, 0);
            ap_check_signals();
            return -1;
        }
#endif /* TPF */
a210 3
#ifdef CHARSET_EBCDIC
    ascii2ebcdic(buffer, buffer, (size_t)i);
#endif
@


1.7
log
@merge
@
text
@d102 32
d141 1
d273 3
a275 3
    static char user[RFC1413_USERLEN + 1];	/* XXX */
    static char *result;
    static int sock;
d281 3
a283 3
	ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
		    "socket: rfc1413: error creating socket");
	conn->remote_logname = result;
d289 6
d302 1
d308 1
@


1.6
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
d246 1
a246 1
    sock = ap_psocket(conn->pool, AF_INET, SOCK_STREAM, IPPROTO_TCP);
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d4 1
a4 1
 * Copyright (c) 2000 The Apache Software Foundation.  All rights
d164 1
a164 1
    while(i < strlen(buffer)) {
d238 1
a238 1
char *ap_rfc1413(conn_rec *conn, server_rec *srv)
@


1.4
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d2 4
a5 1
 * Copyright (c) 1995-1999 The Apache Group.  All rights reserved.
d12 1
a12 1
 *    notice, this list of conditions and the following disclaimer. 
d19 20
a38 23
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * 4. The names "Apache Server" and "Apache Group" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the Apache Group
 *    for use in the Apache HTTP server project (http://www.apache.org/)."
 *
 * THIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
d50 7
a56 6
 * individuals on behalf of the Apache Group and was originally based
 * on public domain software written at the National Center for
 * Supercomputing Applications, University of Illinois, Urbana-Champaign.
 * For more information on the Apache Group and the Apache HTTP server
 * project, please see <http://www.apache.org/>.
 *
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d103 6
d133 3
d160 1
a160 1
    ebcdic2ascii(&buffer, &buffer, buflen);
d185 1
a185 1
     * Note that the strchr function below checks for 10 instead of '\n'
d190 15
d218 1
a218 1
    ascii2ebcdic(&buffer, &buffer, (size_t)i);
a233 6
}

/* ident_timeout - handle timeouts */
static void ident_timeout(int sig)
{
    ap_longjmp(timebuf, sig);
@


1.2
log
@Apache 1.3.4 merge
@
text
@d150 3
d174 6
a179 2
    memset(buffer, 0, sizeof(buffer));
    while((cp = strchr(buffer, '\n')) == NULL && i < sizeof(buffer) - 1) {
d193 3
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1995-1998 The Apache Group.  All rights reserved.
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d2 1
a2 4
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 2000-2002 The Apache Software Foundation.  All rights
 * reserved.
d9 1
a9 1
 *    notice, this list of conditions and the following disclaimer.
d16 23
a38 20
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Apache" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact apache@@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
d40 7
a46 7
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d50 6
a55 7
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 * Portions of this software are based upon public domain software
 * originally written at the National Center for Supercomputing Applications,
 * University of Illinois, Urbana-Champaign.
a102 6
/* ident_timeout - handle timeouts */
static void ident_timeout(int sig)
{
    ap_longjmp(timebuf, sig);
}

a126 3
#ifdef MPE 
    our_query_sin.sin_addr.s_addr = INADDR_ANY;
#endif
a149 3
#ifdef CHARSET_EBCDIC
    ebcdic2ascii(buffer, buffer, buflen);
#endif
d151 1
a151 1
    while(i < (int)strlen(buffer)) {
d171 2
a172 6
    memset(buffer, '\0', sizeof(buffer));
    /*
     * Note that the strchr function below checks for \012 instead of '\n'
     * this allows it to work on both ASCII and EBCDIC machines.
     */
    while((cp = strchr(buffer, '\012')) == NULL && i < sizeof(buffer) - 1) {
a173 15
  
#ifdef TPF
        /*
         * socket read on TPF doesn't get interrupted by
         * signals so additional processing is needed
         */
        j = ap_set_callback_and_alarm(NULL, 0);
        ap_set_callback_and_alarm(ident_timeout, j);
        j = select(&sock, 1, 0, 0, j * 1000);
        if (j < 1) {
            ap_set_callback_and_alarm(NULL, 0);
            ap_check_signals();
            return -1;
        }
#endif /* TPF */
a185 3
#ifdef CHARSET_EBCDIC
    ascii2ebcdic(buffer, buffer, (size_t)i);
#endif
d202 6
d209 1
a209 1
API_EXPORT(char *) ap_rfc1413(conn_rec *conn, server_rec *srv)
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d4 1
a4 1
 * Copyright (c) 2000-2003 The Apache Software Foundation.  All rights
d246 1
a246 1
    sock = ap_psocket_ex(conn->pool, AF_INET, SOCK_STREAM, IPPROTO_TCP, 1);
@


1.1.1.4
log
@import Apache 1.3.29 and mod_ssl 2.8.16
@
text
@a101 32
#if (defined (NETWARE) || defined (WIN32))
#define write(a,b,c) send(a,b,c,0)
#define read(a,b,c) recv(a,b,c,0)
#endif

#ifdef MULTITHREAD
#define RFC_USER_STATIC 

static int setsocktimeout (int sock, int timeout)
{
#if (defined (NETWARE) || defined (WIN32))
    u_long msec = 0;

    /* Make sure that we are in blocking mode */
    if (ioctlsocket(sock, FIONBIO, &msec) == SOCKET_ERROR) {
        return h_errno;
    }

    /* Win32 timeouts are in msec, represented as int */
    msec = timeout * 1000;
    setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, 
               (char *) &msec, sizeof(msec));
    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, 
               (char *) &msec, sizeof(msec));
#else
    /* XXX Needs to be implemented for non-winsock platforms */
#endif
    return 0;
}
#else /* MULTITHREAD */

#define RFC_USER_STATIC static
a108 1
#endif
d240 3
a242 3
    RFC_USER_STATIC char user[RFC1413_USERLEN + 1];	/* XXX */
    RFC_USER_STATIC char *result;
    RFC_USER_STATIC int sock;
d248 3
a250 3
    	ap_log_error(APLOG_MARK, APLOG_CRIT, srv,
    		    "socket: rfc1413: error creating socket");
    	conn->remote_logname = result;
a255 6
#ifdef MULTITHREAD
    if (setsocktimeout(sock, ap_rfc1413_timeout) == 0) {
        if (get_rfc1413(sock, &conn->local_addr, &conn->remote_addr, user, srv) >= 0)
            result = ap_pstrdup (conn->pool, user);
    }
#else
a262 1
#endif
a267 1

@


