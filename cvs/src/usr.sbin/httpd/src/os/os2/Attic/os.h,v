head	1.7;
access;
symbols
	OPENBSD_3_6:1.6.0.10
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.12.02.21.35.48;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2002.07.19.21.31.16;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.29.02.08.07;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.18.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.07.06;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.44;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.11;	author henning;	state Exp;
branches;
next	;


desc
@@


1.7
log
@king bula sez: in Attic/ you shall rot
@
text
@#ifndef APACHE_OS_H
#define APACHE_OS_H

#define PLATFORM "OS/2"
#define HAVE_CANONICAL_FILENAME
#define HAVE_DRIVE_LETTERS
#define HAVE_UNC_PATHS

/*
 * This file in included in all Apache source code. It contains definitions
 * of facilities available on _this_ operating system (HAVE_* macros),
 * and prototypes of OS specific functions defined in os.c or os-inline.c
 */

#if defined(__GNUC__) && !defined(INLINE)
/* Compiler supports inline, so include the inlineable functions as
 * part of the header
 */
#define INLINE extern __inline__

INLINE int ap_os_is_path_absolute(const char *file);

#include "os-inline.c"
#endif

#ifndef INLINE
/* Compiler does not support inline, so prototype the inlineable functions
 * as normal
 */
extern int ap_os_is_path_absolute(const char *file);
#endif

/* FIXME: the following should be implemented on this platform */
#define ap_os_is_filename_valid(f)         (1)

/* Use a specialized kill() function */
int ap_os_kill(int pid, int sig);

/* Maps an OS error code to an error message */
char *ap_os_error_message(int err);

/* OS/2 doesn't have symlinks so S_ISLNK is always false */
#define S_ISLNK(m) 0
#define lstat(x, y) stat(x, y)

#define isinf(n) (!isfinite(n))
#define HAVE_ISINF
#define HAVE_ISNAN

/* strtol() correctly returns ERANGE on overflow, use it */
#define ap_strtol strtol

/* Dynamic loading functions */
#define     ap_os_dso_handle_t  unsigned long
void        ap_os_dso_init(void);
ap_os_dso_handle_t ap_os_dso_load(const char *);
void        ap_os_dso_unload(ap_os_dso_handle_t);
void *      ap_os_dso_sym(ap_os_dso_handle_t, const char *);
const char *ap_os_dso_error(void);

#endif   /* ! APACHE_OS_H */
@


1.6
log
@merge
@
text
@@


1.5
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d50 3
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d46 4
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d7 1
d44 1
@


1.2
log
@Apache 1.3.4 merge
@
text
@d6 1
d35 6
d43 8
@


1.1
log
@Initial revision
@
text
@d18 3
d28 1
a28 1
extern int ap_os_is_path_absolute(const char *f);
d30 3
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@a5 2
#define HAVE_DRIVE_LETTERS
#define HAVE_UNC_PATHS
a17 3

INLINE int ap_os_is_path_absolute(const char *file);

d25 1
a25 1
extern int ap_os_is_path_absolute(const char *file);
a27 9
/* FIXME: the following should be implemented on this platform */
#define ap_os_is_filename_valid(f)         (1)

/* Use a specialized kill() function */
int ap_os_kill(int pid, int sig);

/* Maps an OS error code to an error message */
char *ap_os_error_message(int err);

a29 16
#define lstat(x, y) stat(x, y)

#define isinf(n) (!isfinite(n))
#define HAVE_ISINF
#define HAVE_ISNAN

/* strtol() correctly returns ERANGE on overflow, use it */
#define ap_strtol strtol

/* Dynamic loading functions */
#define     ap_os_dso_handle_t  unsigned long
void        ap_os_dso_init(void);
ap_os_dso_handle_t ap_os_dso_load(const char *);
void        ap_os_dso_unload(ap_os_dso_handle_t);
void *      ap_os_dso_sym(ap_os_dso_handle_t, const char *);
const char *ap_os_dso_error(void);
@

