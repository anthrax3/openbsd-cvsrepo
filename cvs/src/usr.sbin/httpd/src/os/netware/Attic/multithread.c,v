head	1.4;
access;
symbols
	OPENBSD_3_6:1.3.0.16
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.1
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	apache_1_3_26:1.1.1.1
	apache:1.1.1
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.12.02.21.35.48;	author henning;	state dead;
branches;
next	1.3;

1.3
date	2001.03.29.10.21.51;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.22.18.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.25.18.30.09;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.07.19.21.29.11;	author henning;	state Exp;
branches;
next	;


desc
@@


1.4
log
@king bula sez: in Attic/ you shall rot
@
text
@
#include "ap_config.h"
#include "httpd.h"
#include "http_conf_globals.h"
#include "multithread.h"
#include <nwsemaph.h>


thread *create_thread(void (thread_fn)(void *), void *thread_arg)
{
    int rv;

    rv = BeginThreadGroup(thread_fn, NULL, ap_thread_stack_size, thread_arg);
    return((thread *)rv);
}

int kill_thread(thread *thread_id)
{
    return(0);
}

int await_thread(thread *thread_id, int sec_to_wait)
{
    return(0);
}

void exit_thread(int status)
{}

void free_thread(thread *thread_id)
{}


mutex * ap_create_mutex(char *name)
{
    return (mutex*)kMutexAlloc(name);
}

mutex * ap_open_mutex(char *name)
{
	return(NULL);
}

int ap_acquire_mutex(mutex *mutex_id)
{
    return(kMutexLock(mutex_id));
}

int ap_release_mutex(mutex *mutex_id)
{
    if (kMutexUnlock(mutex_id))
        return 0;
    else
        return 1;
}

void ap_destroy_mutex(mutex *mutex_id)
{
    kMutexFree(mutex_id);
}


semaphore *create_semaphore(int initial)
{
	return((semaphore*)OpenLocalSemaphore(initial));
}
int acquire_semaphore(semaphore *semaphore_id)
{
	return(WaitOnLocalSemaphore((long)semaphore_id));
}
int release_semaphore(semaphore *semaphore_id)
{
	return(SignalLocalSemaphore((long)semaphore_id));
}
void destroy_semaphore(semaphore *semaphore_id)
{
	CloseLocalSemaphore((long)semaphore_id);
}

event *create_event(int manual, int initial, char *name)
{
    return(NULL);
}
event *open_event(char *name)
{
    return(NULL);
}
int acquire_event(event *event_id)
{
    return(0);
}
int set_event(event *event_id)
{
    return(0);
}
int reset_event(event *event_id)
{
    return(0);
}
void destroy_event(event *event_id)
{}



@


1.3
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.2
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d13 1
a13 1
    rv = BeginThread(thread_fn, NULL, ap_thread_stack_size, thread_arg); 
@


1.1
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@a8 1

d36 1
a36 1
    return(malloc(1));
d41 1
a41 1
	return((mutex*)EnterCritSec());
d46 1
a46 1
	return(EnterCritSec());
d51 4
a54 1
	return(ExitCritSec());
d59 1
a59 1
    free(mutex_id);
@


1.1.1.1
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d9 1
d14 1
a14 1
    rv = BeginThreadGroup(thread_fn, NULL, ap_thread_stack_size, thread_arg);
d37 1
a37 1
    return (mutex*)kMutexAlloc(name);
d42 1
a42 1
	return(NULL);
d47 1
a47 1
    return(kMutexLock(mutex_id));
d52 1
a52 4
    if (kMutexUnlock(mutex_id))
        return 0;
    else
        return 1;
d57 1
a57 1
    kMutexFree(mutex_id);
@


