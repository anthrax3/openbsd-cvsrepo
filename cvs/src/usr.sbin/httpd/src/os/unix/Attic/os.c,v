head	1.12;
access;
symbols
	OPENBSD_5_5:1.11.0.38
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.34
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.32
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.30
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.28
	OPENBSD_5_0:1.11.0.26
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.24
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.22
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.18
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.20
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.16
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.14
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.12
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.10
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.2
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.04.22.14.47.27;	author henning;	state dead;
branches;
next	1.11;

1.11
date	2005.03.28.22.41.51;	author niallo;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.28.14.01.14;	author niallo;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.06.13.14.10;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.02.19.42.48;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.21.13.11.38;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.08.18.36.53;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.19.21.31.16;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.29.02.08.07;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.30.15;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.30.00;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.45;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.45;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.07.19.21.29.13;	author henning;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.08.21.12.53.44;	author henning;	state Exp;
branches;
next	;


desc
@@


1.12
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@/* $OpenBSD: os.c,v 1.11 2005/03/28 22:41:51 niallo Exp $ */

/*
 * This file will include OS specific functions which are not inlineable.
 * Any inlineable functions should be defined in os-inline.c instead.
 */

#include "ap_config.h"
#include "os.h"


/* some linkers complain unless there's at least one function in each
 * .o file... and extra prototype is for gcc -Wmissing-prototypes
 */
extern void ap_is_not_here(void);

void
ap_is_not_here(void)
{
}

/*
 *  Abstraction layer for loading
 *  Apache modules under run-time via 
 *  dynamic shared object (DSO) mechanism
 */

void
ap_os_dso_init(void)
{
}

void
*ap_os_dso_load(const char *path)
{
	return dlopen(path, RTLD_NOW | RTLD_GLOBAL);
}

void
ap_os_dso_unload(void *handle)
{
	dlclose(handle);
	return;
}

void
*ap_os_dso_sym(void *handle, const char *symname)
{
	return dlsym(handle, symname);
}

const char *
ap_os_dso_error(void)
{
	return dlerror();
}
@


1.11
log
@- More KNF
- Forgot an $OpenBSD$

no binary changes.
@
text
@d1 1
a1 1
/* $OpenBSD: os.c,v 1.10 2005/03/28 14:01:14 niallo Exp $ */
@


1.10
log
@- KNF
- remove os-aix-dso.c since we don't even compile it.

no binary changes.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d36 1
a36 1
        return dlopen(path, RTLD_NOW | RTLD_GLOBAL);
d42 2
a43 2
        dlclose(handle);
        return;
d49 1
a49 1
        return dlsym(handle, symname);
d55 1
a55 1
        return dlerror();
@


1.9
log
@kill more dead code, mostly inside #ifdef SOMENONSENSEONSTUPIDOSES
joint work by Michael Knudsen <e@@molioner.dk> and Daniel Ouellet
<daniel@@presscom.net> with my input
no change in binaries
@
text
@d1 2
d16 5
a20 1
void ap_is_not_here(void) {}
d28 2
a29 1
void ap_os_dso_init(void)
d33 2
a34 1
void *ap_os_dso_load(const char *path)
d36 1
a36 1
    return dlopen(path, RTLD_NOW | RTLD_GLOBAL);
d39 2
a40 1
void ap_os_dso_unload(void *handle)
d42 2
a43 2
    dlclose(handle);
    return;
d46 2
a47 1
void *ap_os_dso_sym(void *handle, const char *symname)
d49 1
a49 1
    return dlsym(handle, symname);
d52 2
a53 1
const char *ap_os_dso_error(void)
d55 1
a55 1
    return dlerror();
@


1.8
log
@big time httpd cleanup
this diff removes a lot of #ifdef'd stuff that is irrelevant for us.
done by Daniel Ouellet after my advice.
tested by many, ok miod@@
@
text
@a38 8
#if defined(DLSYM_NEEDS_UNDERSCORE)
    char *symbol;
    void *retval;
    asprintf(&symbol, "_%s", symname);
    retval = dlsym(handle, symbol);
    free(symbol);
    return retval;
#else
a39 1
#endif
@


1.7
log
@merge
@
text
@a16 10
 * Insert the DSO emulation code for AIX for releases of AIX prior
 * to 4.3. Use the native DSO code for 4.3 and later.
 */
#if defined(AIX) && !defined(NO_DL_NEEDED)
#if AIX < 430
#include "os-aix-dso.c"
#endif
#endif

/*
a21 56
#ifdef HAVE_DYLD		/* NeXT/Apple dynamic linker */
#include <mach-o/dyld.h>

/*
 * NSUnlinkModule() is a noop in old versions of dyld.
 * Let's install an error handler to deal with "multiply defined
 * symbol" runtime errors.
 */
#ifdef DYLD_CANT_UNLOAD
#include "httpd.h"
#include "http_log.h"

ap_private_extern
void undefined_symbol_handler(const char *symbolName)
{
    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_EMERG, NULL,
                 "dyld found undefined symbol: %s\n"
                 "Aborting.\n",
                 symbolName);
    abort();
}

ap_private_extern
NSModule multiple_symbol_handler (NSSymbol s, NSModule old, NSModule new)
{
    /*
     * Since we can't unload symbols, we're going to run into this
     * every time we reload a module. Workaround here is to just
     * rebind to the new symbol, and forget about the old one.
     * This is crummy, because it's basically a memory leak.
     */

#ifdef DEBUG
    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_DEBUG, NULL,
                 "dyld found a multiply defined symbol %s in modules:\n"
                 "%s\n%s\n",
                 NSNameOfSymbol(s),
                 NSNameOfModule(old), NSNameOfModule(new));
#endif

    return(new);
}

ap_private_extern
void linkEdit_symbol_handler (NSLinkEditErrors c, int errorNumber,
                              const char *fileName, const char *errorString)
{
    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_EMERG, NULL,
                 "dyld errors during link edit for file %s\n%s\n",
                 fileName, errorString);
    abort();
}

#endif /* DYLD_CANT_UNLOAD */
#endif /* HAVE_DYLD */

a23 9
#if defined(HAVE_DYLD) && defined(DYLD_CANT_UNLOAD)
    NSLinkEditErrorHandlers handlers;

    handlers.undefined = undefined_symbol_handler;
    handlers.multiple  = multiple_symbol_handler;
    handlers.linkEdit  = linkEdit_symbol_handler;

    NSInstallLinkEditErrorHandlers(&handlers);
#endif
a27 26
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
    shl_t handle;
    handle = shl_load(path, BIND_IMMEDIATE|BIND_VERBOSE, 0L);
    return (void *)handle;

#elif defined(HAVE_DYLD)
    NSObjectFileImage image;
    NSModule handle;
    if (NSCreateObjectFileImageFromFile(path, &image) !=
        NSObjectFileImageSuccess)
        return NULL;
#if defined(NSLINKMODULE_OPTION_RETURN_ON_ERROR) && defined(NSLINKMODULE_OPTION_NONE)
    handle = NSLinkModule(image, path,
                          NSLINKMODULE_OPTION_RETURN_ON_ERROR |
                          NSLINKMODULE_OPTION_NONE);
#else
    handle = NSLinkModule(image, path, FALSE);
#endif
    NSDestroyObjectFileImage(image);
    return handle;

#elif defined(OSF1) || defined(SEQUENT) ||\
    (defined(__FreeBSD_version) && (__FreeBSD_version >= 220000))
    return dlopen((char *)path, RTLD_NOW | RTLD_GLOBAL);

#else
a28 1
#endif
a32 7
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
    shl_unload((shl_t)handle);

#elif defined(HAVE_DYLD)
    NSUnLinkModule(handle,FALSE);

#else
a33 2
#endif

d39 1
a39 18
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
    void *symaddr = NULL;
    int status;

    errno = 0;
    status = shl_findsym((shl_t *)&handle, symname, TYPE_PROCEDURE, &symaddr);
    if (status == -1 && errno == 0) /* try TYPE_DATA instead */
        status = shl_findsym((shl_t *)&handle, symname, TYPE_DATA, &symaddr);
    return (status == -1 ? NULL : symaddr);

#elif defined(HAVE_DYLD)
    NSSymbol symbol;
    asprintf(&symname2, "_%s", symname);
    symbol = NSLookupAndBindSymbol(symname2);
    free(symname2);
    return NSAddressOfSymbol(symbol);

#elif defined(DLSYM_NEEDS_UNDERSCORE)
a45 4

#elif defined(SEQUENT)
    return dlsym(handle, (char *)symname);

a52 5
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
    return strerror(errno);
#elif defined(HAVE_DYLD)
    return NULL;
#else
a53 1
#endif
@


1.6
log
@use asprintf; ok henning
@
text
@d21 1
a21 1
#if AIX < 43
d105 1
a105 1
    handle = shl_load(path, BIND_IMMEDIATE|BIND_VERBOSE|BIND_NOSTART, 0L);
@


1.5
log
@merge
@
text
@d162 1
a162 2
    char *symname2 = (char*)malloc(sizeof(char)*(strlen(symname)+2));
    sprintf(symname2, "_%s", symname);
d168 1
a168 1
    char *symbol = (char*)malloc(sizeof(char)*(strlen(symname)+2));
d170 1
a170 1
    sprintf(symbol, "_%s", symname);
@


1.4
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d114 7
a120 1
    handle = NSLinkModule(image, path, TRUE);
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d110 1
d114 3
a116 1
    return NSLinkModule(image, path, TRUE);
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d17 2
a18 1
 * Insert the DSO emulation code for AIX
d20 2
a21 1
#ifdef AIX
d24 1
d103 1
a103 1
#if defined(HPUX) || defined(HPUX10)
d126 1
a126 1
#if defined(HPUX) || defined(HPUX10)
d141 1
a141 1
#if defined(HPUX) || defined(HPUX10)
d177 1
a177 1
#if defined(HPUX) || defined(HPUX10)
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
#ifdef RHAPSODY
d31 7
a58 1
     * (See Radar 2262020 against dyld).
d82 2
a83 1
#endif /*RHAPSODY*/
d87 1
a87 1
#if defined(RHAPSODY)
d105 1
a105 1
#elif defined(RHAPSODY)
d112 1
a112 1
#elif defined(OSF1) ||\
d126 1
a126 1
#elif defined(RHAPSODY)
d148 1
a148 1
#elif defined(RHAPSODY)
d164 3
d176 1
a176 1
#elif defined(RHAPSODY)
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@


1.1.1.2
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d17 1
a17 2
 * Insert the DSO emulation code for AIX for releases of AIX prior
 * to 4.3. Use the native DSO code for 4.3 and later.
d19 1
a19 2
#if defined(AIX) && !defined(NO_DL_NEEDED)
#if AIX < 43
a21 1
#endif
d29 1
a29 1
#ifdef HAVE_DYLD		/* NeXT/Apple dynamic linker */
a30 7

/*
 * NSUnlinkModule() is a noop in old versions of dyld.
 * Let's install an error handler to deal with "multiply defined
 * symbol" runtime errors.
 */
#ifdef DYLD_CANT_UNLOAD
d52 1
d76 1
a76 2
#endif /* DYLD_CANT_UNLOAD */
#endif /* HAVE_DYLD */
d80 1
a80 1
#if defined(HAVE_DYLD) && defined(DYLD_CANT_UNLOAD)
d93 1
a93 1
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
d98 1
a98 1
#elif defined(HAVE_DYLD)
a99 1
    NSModule handle;
d103 1
a103 9
#if defined(NSLINKMODULE_OPTION_RETURN_ON_ERROR) && defined(NSLINKMODULE_OPTION_NONE)
    handle = NSLinkModule(image, path,
                          NSLINKMODULE_OPTION_RETURN_ON_ERROR |
                          NSLINKMODULE_OPTION_NONE);
#else
    handle = NSLinkModule(image, path, FALSE);
#endif
    NSDestroyObjectFileImage(image);
    return handle;
d105 1
a105 1
#elif defined(OSF1) || defined(SEQUENT) ||\
d116 1
a116 1
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
d119 1
a119 1
#elif defined(HAVE_DYLD)
d131 1
a131 1
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
d141 1
a141 1
#elif defined(HAVE_DYLD)
a156 3
#elif defined(SEQUENT)
    return dlsym(handle, (char *)symname);

d164 1
a164 1
#if defined(HPUX) || defined(HPUX10) || defined(HPUX11)
d166 1
a166 1
#elif defined(HAVE_DYLD)
@


1.1.1.3
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d21 1
a21 1
#if AIX < 430
d105 1
a105 1
    handle = shl_load(path, BIND_IMMEDIATE|BIND_VERBOSE, 0L);
@


