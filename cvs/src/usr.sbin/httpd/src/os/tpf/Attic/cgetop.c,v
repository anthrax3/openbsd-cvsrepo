head	1.3;
access;
symbols
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.1
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.1
	OPENBSD_3_3:1.1.0.16
	OPENBSD_3_3_BASE:1.1
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.1
	apache_1_3_27:1.1.1.1
	OPENBSD_3_2:1.1.0.14
	OPENBSD_3_2_BASE:1.1
	apache_1_3_26:1.1.1.1
	apache:1.1.1
	OPENBSD_3_1:1.1.0.12
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.12.02.21.35.48;	author henning;	state dead;
branches;
next	1.2;

1.2
date	2003.06.04.21.48.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.09.29.06.29.59;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.07.19.21.29.12;	author henning;	state Exp;
branches;
next	;


desc
@@


1.3
log
@king bula sez: in Attic/ you shall rot
@
text
@/**********************************************************************/
/*                                                                    */
/* Copyright (c) 1987, 1993, 1994                                     */
/* The Regents of the University of California.  All rights reserved. */
/*                                                                    */
/* Redistribution and use in source and binary forms, with or without */
/* modification, are permitted provided that the following conditions */
/* are met:                                                           */
/*                                                                    */
/* 1. Redistributions of source code must retain the above copyright  */
/*    notice, this list of conditions and the following disclaimer.   */
/* 2. Redistributions in binary form must reproduce the above         */
/*    copyright notice, this list of conditions and the following     */
/*    disclaimer in the documentation and/or other materials provided */
/*    with the distribution.                                          */
/* 3. Neither the name of the University nor the names of its         */
/*    contributors may be used to endorse or promote products derived */
/*    from this software without specific prior written permission.   */
/*                                                                    */
/* THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''*/
/* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  */
/* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A    */
/* PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS  */
/* OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    */
/* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   */
/* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF   */
/* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND*/
/* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, */
/* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT */
/* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF */
/* SUCH DAMAGE.                                                       */
/*                                                                    */
/**********************************************************************/

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)getopt.c  8.2 (Berkeley) 4/2/94";
#endif /* LIBC_SCCS and not lint */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef __CGETOP_
extern char *optarg;
extern int opterr, optind, optopt;
int getopt (int, char * const *, const char *);
char *group_from_gid (unsigned long, int);
char *user_from_uid (unsigned long, int);
extern int optreset;
#endif

int opterr = 1,                     /* if error message should be     */
                                    /* printed                        */
    optind = 1,                     /* index into parent argv vector  */
    optopt,                         /* character checked for validity */
    optreset;                       /* reset getopt                   */
char     *optarg;                   /* argument associated with       */
                                    /* option                         */

#define  BADCH  (int)'?'
#define  BADARG  (int)':'
#define  EMSG  ""

/**********************************************************************/
/*                                                                    */
/*   getopt --                                                        */
/*       Parse argc/argv argument vector.                             */
/*                                                                    */
/**********************************************************************/
int
getopt(nargc, nargv, ostr)
  int nargc;
  char * const *nargv;
  const char *ostr;
{
  /* removed -- BSD2TPF -- crt0 does not create __progname on TPF     */
  /* extern char *__progname;                                         */
  /* end of removed -- BSD2TPF                                        */

  static char *place = EMSG;        /* option letter processing       */
  char *oli;                        /* option letter list index       */

  /* added -- BSD2TPF -- emulate BSD crt0 function to set __progname  */
  char empty = '\0';
  char *__progname = &empty;
  if (nargv[0]) {
    if ((__progname = strrchr(nargv[0], '/')) == NULL) {
      __progname = nargv[0];
    }
    else {
      ++__progname;
    }
  }
  /* end of added -- BSD2TPF                                          */

  if (optreset || !*place) {        /* update scanning pointer        */
    optreset = 0;
    if (optind >= nargc || *(place = nargv[optind]) != '-') {
      place = EMSG;
      return (EOF);
    }
    if (place[1] && *++place == '-') {
                                    /* found "--"                     */
      ++optind;
      place = EMSG;
      return (EOF);
    }
  }                                 /* option letter okay?            */
  if ((optopt = (int)*place++) == (int)':' ||
      !(oli = strchr(ostr, optopt))) {
                                    /* if the user didn't             */
                                    /* specify '-' as an option,      */
                                    /* assume it means EOF.           */
    if (optopt == (int)'-')
      return (EOF);
    if (!*place)
      ++optind;
    if (opterr && *ostr != ':')
      (void)fprintf(stderr,
          "%s: illegal option -- %c\n", __progname, optopt);
    return (BADCH);
  }
  if (*++oli != ':') {              /* don't need argument            */
    optarg = NULL;
    if (!*place)
      ++optind;
  }
  else {                            /* need an argument               */
    if (*place)                     /* no white space                 */
      optarg = place;
    else if (nargc <= ++optind) {   /* no arg                         */
      place = EMSG;
      if (*ostr == ':')
        return (BADARG);
      if (opterr)
        (void)fprintf(stderr,
            "%s: option requires an argument -- %c\n",
            __progname, optopt);
      return (BADCH);
    }
    else                            /* white space                    */
      optarg = nargv[optind];
    place = EMSG;
    ++optind;
  }
  return (optopt);                  /* dump back option letter        */
}@


1.2
log
@mop up some more 3/4 license issues
@
text
@@


1.1
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d16 1
a16 5
/* 3. All advertising materials mentioning features or use of this    */
/*    software must display the following acknowledgement:            */
/*      This product includes software developed by the University of */
/*      California, Berkeley and its contributors.                    */
/* 4. Neither the name of the University nor the names of its         */
@


1.1.1.1
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@@

