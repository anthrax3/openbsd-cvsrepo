head	1.11;
access;
symbols
	OPENBSD_5_5:1.10.0.38
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.34
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.32
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.30
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.28
	OPENBSD_5_0:1.10.0.26
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.24
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.22
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.18
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.20
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.16
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_4:1.7.0.6
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.10;

1.10
date	2005.08.01.19.40.33;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.29.23.55.40;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.17.19.13.43;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2002.07.19.21.31.14;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.12.07.56.48;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.32;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.38;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.29.27;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.05;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.34;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.34;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.05;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.27.53;	author henning;	state Exp;
branches;
next	;


desc
@@


1.11
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_log_config</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_log_config</h1>

    <p>This module provides for logging of the requests made to the
    server, using the Common Log Format or a user-specified
    format.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a>
    mod_log_config.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    config_log_module<br />
     <a href="module-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Was an extension
    module prior to Apache 1.2.</p>

    <h2>Summary</h2>

    <p>This module provides for flexible logging of client
    requests. Logs are written in a customizable format, and may be
    written directly to a file, or to an external program.
    Conditional logging is provided so that individual requests may
    be included or excluded from the logs based on characteristics
    of the request.</p>

    <p>Three directives are provided by this module:
    <code>TransferLog</code> to create a log file,
    <code>LogFormat</code> to set a custom format, and
    <code>CustomLog</code> to define a log file and format in one
    step. The <code>TransferLog</code> and <code>CustomLog</code>
    directives can be used multiple times in each server to cause
    each request to be logged to multiple files.</p>

    <p>See also: <a href="../logs.html">Apache Log Files</a>.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#cookielog">CookieLog</a></li>

      <li><a href="#customlog">CustomLog</a></li>

      <li><a href="#logformat">LogFormat</a></li>

      <li><a href="#transferlog">TransferLog</a></li>
    </ul>

    <h2><a id="formats" name="formats">Custom Log Formats</a></h2>

    <p>The format argument to the <code>LogFormat</code> and
    <code>CustomLog</code> directives is a string. This string is
    used to log each request to the log file. It can contain literal
    characters copied into the log files and the C-style control
    characters "\n" and "\t" to represent new-lines and tabs.
    Literal quotes and back-slashes should be escaped with
    back-slashes.</p>

    <p>The characteristics of the request itself are logged by
    placing "<code>%</code>" directives in the format string, which are
    replaced in the log entry by the values as follows:</p>
<pre>
%...a:          Remote IP-address
%...A:          Local IP-address
%...B:          Bytes sent, excluding HTTP headers.
%...b:          Bytes sent, excluding HTTP headers. In CLF format
        i.e. a '-' rather than a 0 when no bytes are sent.
%...c:          Connection status when response was completed.
                'X' = connection aborted before the response completed.
                '+' = connection may be kept alive after the response is sent.
                '-' = connection will be closed after the response is sent.
%...{FOOBAR}e:  The contents of the environment variable FOOBAR
%...f:          Filename
%...h:          Remote host
%...H       The request protocol
%...{Foobar}i:  The contents of Foobar: header line(s) in the request
                sent to the server.
%...l:          Remote logname (from identd, if supplied)
%...m       The request method
%...{Foobar}n:  The contents of note "Foobar" from another module.
%...{Foobar}o:  The contents of Foobar: header line(s) in the reply.
%...p:          The canonical Port of the server serving the request
%...P:          The process ID of the child that serviced the request.
%...q       The query string (prepended with a ? if a query string exists,
        otherwise an empty string)
%...r:          First line of request
%...s:          Status.  For requests that got internally redirected, this is
                the status of the *original* request --- %...&gt;s for the last.
%...t:          Time, in common log format time format (standard english format)
%...{format}t:  The time, in the form given by format, which should
                be in strftime(3) format. (potentially localized)
%...T:          The time taken to serve the request, in seconds.
%...u:          Remote user (from auth; may be bogus if return status (%s) is 401)
%...U:          The URL path requested, not including any query string.
%...v:          The canonical ServerName of the server serving the request.
%...V:          The server name according to the UseCanonicalName setting.
</pre>

    <p>The "..." can be nothing at all (<em>e.g.</em>, <code>"%h %u
    %r %s %b"</code>), or it can indicate conditions for inclusion
    of the item (which will cause it to be replaced with "-" if the
    condition is not met). The forms of condition are a list of
    HTTP status codes, which may or may not be preceded by "!".
    Thus, "%400,501{User-agent}i" logs User-agent: on 400 errors
    and 501 errors (Bad Request, Not Implemented) only;
    "%!200,304,302{Referer}i" logs Referer: on all requests which
    did <strong>not</strong> return some sort of normal status.</p>

    <p>Note that in versions previous to 1.3.25 no escaping was performed
    on the strings from <code>%...r</code>, <code>%...i</code> and
    <code>%...o</code>. This was mainly to comply with the requirements of
    the Common Log Format. This implied that clients could insert control
    characters into the log, so you had to be quite careful when dealing
    with raw log files.</p>

    <p>For security reasons starting with 1.3.25 non-printable and
    other special characters are escaped mostly by using
    <code>\x<var>hh</var></code> sequences, where <var>hh</var> stands for
    the hexadecimal representation of the raw byte. Exceptions from this
    rule are <code>"</code> and <code>\</code> which are escaped by prepending
    a backslash, and all whitespace characters that are written in their
    C-style notation (<code>\n</code>, <code>\t</code>, etc).</p>

    <p>Some commonly used log format strings are:</p>

    <dl>
      <dt>Common Log Format (CLF)</dt>

      <dd><code>"%h %l %u %t \"%r\" %&gt;s %b"</code></dd>

      <dt>Common Log Format with Virtual Host</dt>

      <dd><code>"%v %h %l %u %t \"%r\" %&gt;s %b"</code></dd>

      <dt>NCSA extended/combined log format</dt>

      <dd><code>"%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\"
      \"%{User-agent}i\""</code></dd>

      <dt>Referer log format</dt>

      <dd><code>"%{Referer}i -&gt; %U"</code></dd>

      <dt>Agent (Browser) log format</dt>

      <dd><code>"%{User-agent}i"</code></dd>
    </dl>

    <p>Note that the canonical <a
    href="core.html#servername">ServerName</a> and <a
    href="core.html#port">Port</a> of the server serving the
    request are used for <code>%v</code> and <code>%p</code>
    respectively. This happens regardless of the <a
    href="core.html#usecanonicalname">UseCanonicalName</a> setting
    because otherwise log analysis programs would have to duplicate
    the entire vhost matching algorithm in order to decide what
    host really served the request.</p>

    <h2>Security Considerations</h2>

    <p>See the <a
    href="../misc/security_tips.html#serverroot">security tips</a>
    document for details on why your security could be compromised
    if the directory where logfiles are stored is writable by
    anyone other than the user that starts the server.</p>

    <h2>Compatibility notes</h2>

    <ul>
      <li>This module is based on mod_log_config distributed with
      previous Apache releases, now updated to handle multiple
      logs. There is now no need to rebuild Apache to change
      configuration log formats.</li>

      <li>The module also implements the <code>CookieLog</code>
      directive, used to log user-tracking information created by
      <a href="mod_usertrack.html">mod_usertrack</a>. The use of
      <code>CookieLog</code> is deprecated, and a
      <code>CustomLog</code> should be defined to log user-tracking
      information instead.</li>

      <li>As of Apache 1.3.5, this module allows conditional
      logging based upon the setting of <a
      href="../env.html">environment variables</a>. That is, you
      can control whether a request should be logged or not based
      upon whether an arbitrary environment variable is defined or
      not. This is configurable on a per-logfile
      basis.</li>

      <li>Beginning with Apache 1.3.5, the mod_log_config module
      has also subsumed the <code>RefererIgnore</code>
      functionality from <a
      href="mod_log_referer.html">mod_log_referer</a>. The effect
      of <code>RefererIgnore</code> can be achieved by combinations
      of <a href="mod_setenvif.html"><code>SetEnvIf</code></a>
      directives and conditional <code>CustomLog</code>
      definitions.</li>
    </ul>
    <hr />

    <h2><a id="cookielog" name="cookielog">CookieLog</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> CookieLog
    <em>filename</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_cookies<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Only available
    in Apache 1.2 and above</p>

    <p>The CookieLog directive sets the filename for logging of
    cookies. The filename is relative to the <a
    href="core.html#serverroot">ServerRoot</a>. This directive is
    included only for compatibility with mod_cookies, and is deprecated.</p>
    <hr />

    <h2><a id="customlog" name="customlog">CustomLog</a> <a
    id="customlog-conditional"
    name="customlog-conditional">directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> CustomLog
    <em>file</em>|<em>pipe</em> <em>format</em>|<em>nickname</em>
    [env=[!]<em>environment-variable</em>]<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Nickname only
    available in Apache 1.3 or later. Conditional logging available
    in 1.3.5 or later.<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>The <code>CustomLog</code> directive is used to log requests
    to the server. A log format is specified, and the logging can
    optionally be made conditional on request characteristics using
    environment variables.</p>

    <p>The first argument, which specifies the location to which
    the logs will be written, can take one of the following two
    types of values:</p>

    <dl>
      <dt><em>file</em></dt>

      <dd>A filename, relative to the <a
      href="core.html#serverroot">ServerRoot</a>.</dd>

      <dt><em>pipe</em></dt>

      <dd>The pipe character "<code>|</code>", followed by the path
      to a program to receive the log information on its standard
      input. <strong>Security:</strong> if a program is used, then
      it will be run as the user who started httpd. This will be
      root if the server was started by root; be sure that the
      program is secure.</dd>
    </dl>

    <p>The second argument specifies what will be written to the
    log file. It can specify either a <em>nickname</em> defined by
    a previous <a href="#logformat">LogFormat</a> directive, or it
    can be an explicit <em>format</em> string as described in the
    <a href="#formats">log formats</a> section.</p>

    <p>For example, the following two sets of directives have
    exactly the same effect:</p>
<pre>
     # CustomLog with format nickname
     LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common
     CustomLog logs/access_log common

     # CustomLog with explicit format string
     CustomLog logs/access_log "%h %l %u %t \"%r\" %&gt;s %b"
</pre>

    <p>The third argument is optional and controls
    whether or not to log a particular request based on the
    presence or absence of a particular variable in the server
    environment. If the specified <a href="../env.html">environment
    variable</a> is set for the request (or is not set, in the case
    of a '<code>env=!<em>name</em></code>' clause), then the
    request will be logged.</p>

    <p>Environment variables can be set on a per-request
    basis using the <a href="mod_setenvif.html">mod_setenvif</a>
    and/or <a href="mod_rewrite.html">mod_rewrite</a> modules. For
    example, if you want to record requests for all GIF
    images on your server in a separate logfile but not in your main
    log, you can use:</p>
<pre>
    SetEnvIf Request_URI \.gif$ gif-image
    CustomLog gif-requests.log common env=gif-image
    CustomLog nongif-requests.log common env=!gif-image
</pre>
    <hr />

    <h2><a id="logformat" name="logformat">LogFormat</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LogFormat
    <em>format</em>|<em>nickname</em> [<em>nickname</em>]<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>LogFormat "%h %l
    %u %t \"%r\" %&gt;s %b"</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Nickname only
    available in Apache 1.3 or later<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>This directive specifies the format of the access log
    file.</p>

    <p>The <code>LogFormat</code> directive can take one of two
    forms. In the first form, where only one argument is specified,
    this directive sets the log format which will be used by logs
    specified in subsequent <a href="#transferlog">TransferLog</a>
    directives. The single argument can specify an explicit
    <em>format</em> as discussed in the <a href="#formats">custom log
    formats</a> section above. Alternatively, it can use a
    <em>nickname</em> to refer to a log format defined in a
    previous <code>LogFormat</code> directive as described
    below.</p>

    <p>The second form of the <code>LogFormat</code> directive
    associates an explicit <em>format</em> with a
    <em>nickname</em>. This <em>nickname</em> can then be used in
    subsequent <code>LogFormat</code> or <a
    href="#customlog">CustomLog</a> directives rather than
    repeating the entire format string. A <samp>LogFormat</samp>
    directive which defines a nickname <strong>does nothing
    else</strong> -- that is, it <em>only</em> defines the
    nickname, it doesn't actually apply the format and make it the
    default. Therefore, it will not affect subsequent <a
    href="#transferlog">TransferLog</a> directives.</p>

    <p>For example:</p>

    <code>LogFormat "%v %h %l %u %t \"%r\" %&gt;s %b" vhost_common</code>

    <hr />

    <h2><a id="transferlog" name="transferlog">TransferLog</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> TransferLog
    <em>file</em>|<em>pipe</em><br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> none<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>This directive has exactly the same arguments and effect as
    the <a href="#customlog">CustomLog</a> directive, with the
    exception that it does not allow the log format to be specified
    explicitly or for conditional logging of requests. Instead, the
    log format is determined by the most recently specified <a
    href="#logformat">LogFormat</a> directive that does not define
    a nickname. Common Log Format is used if no other format has
    been specified.</p>

    <p>Example:</p>
<pre>
   LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\""
   TransferLog logs/access_log
</pre>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>



@


1.10
log
@from tamas tevesz:
==> two more historic modules have gone away
@
text
@@


1.9
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@d242 1
a242 2
    included only for compatibility with <a
    href="mod_cookies.html">mod_cookies</a>, and is deprecated.</p>
@


1.8
log
@these are gone since some time too
@
text
@d1 2
d76 2
a77 2
    logged to the log file for each request. It can contain literal
    characters copied into the log files and the c-type control
d83 2
a84 2
    placing "%" directives in the format string, which are replaced
    in the log file by the values as follows:</p>
d91 1
a91 1
%...c:          Connection status when response is completed.
d132 14
a145 5
    <p>Note that there is no escaping performed on the strings from
    %...r, %...i and %...o. This is mainly to comply with the
    requirements of the Common Log Format. This implies that
    clients can insert control characters into the log, so care
    should be taken when dealing with raw log files.</p>
d195 1
a195 1
      logs. There is now no need to re-configure Apache to use
d210 1
a210 1
      not. This is configurable on a <em>per</em>-logfile
d272 1
a272 1
    the logs will be written, can take on one of the following two
d286 1
a286 1
      it will be run under the user who started httpd. This will be
d308 2
a309 2
    <p>The third argument is optional and allows the decision on
    whether or not to log a particular request to be based on the
d316 1
a316 1
    <p>Environment variables can be set on a <em>per</em>-request
d357 1
a357 1
    <em>format</em> as discussed in <a href="#formats">custom log
d402 2
a403 2
    href="#logformat">LogFormat</a> directive (that does not define
    a nickname). Common Log Format is used if no other format has
d419 2
@


1.7
log
@merge
@
text
@@


1.6
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d308 2
a309 2
    example, if you don't want to record requests for all GIF
    images on your server in a separate logfile but not your main
d363 5
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 2
a2 137
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache module mod_log_config</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Module mod_log_config</H1>
<P>
This module provides for logging of the requests made to
the server, using the Common Log Format or a user-specified format.
</P>

<P><A
HREF="module-dict.html#Status"
REL="Help"
><STRONG>Status:</STRONG></A> Base
<BR>
<A
HREF="module-dict.html#SourceFile"
REL="Help"
><STRONG>Source File:</STRONG></A> mod_log_config.c
<BR>
<A
HREF="module-dict.html#ModuleIdentifier"
REL="Help"
><STRONG>Module Identifier:</STRONG></A> config_log_module
<BR>
<A
HREF="module-dict.html#Compatibility"
REL="Help"
><STRONG>Compatibility:</STRONG></A> Was an extension module prior to Apache 1.2.
</P>


<H2>Summary</H2>

<p>This module provides for flexible logging of client requests.  Logs
are written in a customizable format, and may be written directly to a
file, or to an external program.  Conditional logging is provided so
that individual requests may be included or excluded from the logs
based on characteristics of the request.</p>

<P>
Three directives are provided by this module: <CODE>TransferLog</CODE>
to create a log file, <CODE>LogFormat</CODE> to set a custom format,
and <CODE>CustomLog</CODE> to define a log file and format in one step.
The <CODE>TransferLog</CODE> and <CODE>CustomLog</CODE> directives can
be used multiple times in each server to cause each request to be
logged to multiple files.
</P>

<H2>Directives</H2>

<UL>
<LI><A HREF="#cookielog">CookieLog</A></LI>
<LI><A HREF="#customlog">CustomLog</A></LI>
<LI><A HREF="#logformat">LogFormat</A></LI>
<LI><A HREF="#transferlog">TransferLog</A></LI>
</UL>

<H2>Log File Formats</H2>

<p>Unless told otherwise with <TT>LogFormat</TT>, the log files
created by <TT>TransferLog</TT> will be in standard "Common Log
Format" (CLF). The contents of each line in a CLF file are explained
below. Alternatively, the log file can be customized (and if multiple
log files are used, each can have a different format). Custom formats
are set with <CODE>LogFormat</CODE> and <CODE>CustomLog</CODE>.</p>

<H3>Common Log Format</H3>

<p>The Common Log Format (CLF) file contains a separate line for each
request. A line is composed of several tokens separated by spaces:</p>

<BLOCKQUOTE>
host ident authuser date request status bytes
</BLOCKQUOTE>
If a token does not have a value then it is represented by a hyphen (-).
The meanings and values of these tokens are as follows:
<DL>
<DT>host
<DD>The fully-qualified domain name of the client, or its IP number if the
name is not available.
<DT>ident
<DD>If <A HREF="core.html#identitycheck">IdentityCheck</A> is enabled and the
client machine runs identd, then this is the identity information reported
by the client.
<DT>authuser
<DD>If the request was for an password protected document, then this is
the userid used in the request.
<DT>date
<DD>The date and time of the request, in the following format:
<DL><DD><BLOCKQUOTE><CODE> date = [day/month/year:hour:minute:second zone] <BR>
day = 2*digit<BR>
month = 3*letter<BR>
year = 4*digit<BR>
hour = 2*digit<BR>
minute = 2*digit<BR>
second = 2*digit<BR>
zone = (`+' | `-') 4*digit</CODE></BLOCKQUOTE></DL>
<DT>request
<DD>The request line from the client, enclosed in double quotes
(<CODE>&quot;</CODE>).
<DT>status
<DD>The three digit status code returned to the client.
<DT>bytes
<DD>The number of bytes in the object returned to the client, not including
any headers.
</DL>

<H3><A NAME="formats">Custom Log Formats</A></H3>

<p>The format argument to the <CODE>LogFormat</CODE> and
<CODE>CustomLog</CODE> directives is a string. This string is logged
to the log file for each request. It can contain literal characters
copied into the log files and the c-type control characters "\n" and
"\t" to represent new-lines and tabs.  Literal quotes and back-slashes
should be escaped with back-slashes.</p>

<p>The characteristics of the request itself are logged by placing
"%" directives in the format string, which are replaced in the log file
by the values as follows:</p>
d4 80
a83 1
<PRE>
d88 1
a88 1
		i.e. a '-' rather than a 0 when no bytes are sent.
d96 1
a96 1
%...H		The request protocol
d100 1
a100 1
%...m		The request method
d105 2
a106 2
%...q		The query string (prepended with a ? if a query string exists,
		otherwise an empty string)
d115 1
a115 1
%...U:          The URL path requested.
a117 89
</PRE>

<p>The "..." can be nothing at all (<EM>e.g.</EM>, <CODE>"%h %u %r %s
%b"</CODE>), or it can indicate conditions for inclusion of the item
(which will cause it to be replaced with "-" if the condition is not
met).  The forms of condition are a list of HTTP status codes, which
may or may not be preceded by "!".  Thus, "%400,501{User-agent}i" logs
User-agent: on 400 errors and 501 errors (Bad Request, Not
Implemented) only; "%!200,304,302{Referer}i" logs Referer: on all
requests which did <STRONG>not</STRONG> return some sort of normal
status.</p>

<p>Note that there is no escaping performed on the strings from
%...r, %...i and %...o.  This is mainly to comply with the requirements
of the Common Log Format.  This implies that clients can insert
control characters into the log, so care should be taken when dealing
with raw log files.</p>

<p>Some commonly used log format strings are:</p>

<dl>
<dt>Common Log Format (CLF)</dt>
<dd><CODE>"%h %l %u %t \"%r\" %&gt;s %b"</CODE></dd>

<dt>Common Log Format with Virtual Host</dt>
<dd><code>"%v %h %l %u %t \"%r\" %&gt;s %b"</CODE></dd>

<dt>NCSA extended/combined log format</dt>
<dd> <CODE>"%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\""</CODE></dd>

<dt>Referer log format</dt>
<dd><code>"%{Referer}i -&gt; %U"</code></dd>

<dt>Agent (Browser) log format</dt>
<dd><code>"%{User-agent}i"</code></dd>
</dl>

<P>Note that the canonical <A
HREF="core.html#servername">ServerName</A> and <A
HREF="core.html#port">Port</A> of the server serving the request are
used for <CODE>%v</CODE> and <CODE>%p</CODE> respectively.  This
happens regardless of the <A
HREF="core.html#usecanonicalname">UseCanonicalName</A> setting because
otherwise log analysis programs would have to duplicate the entire
vhost matching algorithm in order to decide what host really served
the request.</p>

<H2>Using Multiple Log Files</H2>

<p>The <CODE>TransferLog</CODE> and <CODE>CustomLog</CODE> directives can
be given more than once to log requests to multiple log files. Unless
the conditional form of <code>CustomLog</code> is used, each
request will be logged to all the log files defined by either of these
directives.</p>

<H3>Use with Virtual Hosts</H3>

<p>If a &lt;VirtualHost&gt; section does not contain any
<TT>TransferLog</TT> or <TT>CustomLog</TT> directives, the
logs defined for the main server will be used. If it does
contain one or more of these directives, requests serviced by
this virtual host will only be logged in the log files defined
within its definition, not in any of the main server's log files.
See the examples below.</p>

<H2>Security Considerations</H2>

<p>See the <A HREF="../misc/security_tips.html#serverroot">security tips</A>
document for details on why your security could be compromised if the
directory where logfiles are stored is writable by anyone other than
the user that starts the server.</p>

<h2>Resetting the Log Files</h2>

<p>The access log file typically grows 1MB or more for each 10,000
requests.  It will probably be necessary to move or delete the log
file on a regular basis.  This cannot be done while the server is
still running, because Apache will continue writing to the old log
file.  Instead, the server must be <a
href="../stopping.html">restarted</a> after the log file is moved or
deleted so that it will open a new log.</p>

<p>A typical scenario is:</p>

<pre>
   mv access_log access_log.old
   apachectl graceful
   # wait for all requests to the old server to complete
   # before doing anything with access_log.old
d120 165
a284 118
<p>Alternatively, log files can be <a
href="../misc/FAQ.html#rotate">rotated automatically</a> be writing
them through a pipe to a program designed for that purpose such
as <a href="../programs/rotatelogs.html">rotatelogs</a>.</p>

<H2>Compatibility notes</H2>

<UL>
<LI>This module is based on mod_log_config distributed with
previous Apache releases, now updated to handle multiple logs.
There is now no need to re-configure Apache to use configuration log
formats.</li>

<LI>The module also implements the <CODE>CookieLog</CODE> directive,
used to log user-tracking information created by <A
HREF="mod_usertrack.html">mod_usertrack</A>. The use of
<CODE>CookieLog</CODE> is deprecated, and a <CODE>CustomLog</CODE>
should be defined to log user-tracking information instead.</li>

<LI>As of Apache 1.3.5, this module allows conditional logging based
upon the setting of <a href="../env.html">environment variables</a>.
That is, you can control whether a request should be logged or not
based upon whether an arbitrary environment variable is defined or
not.  This is configurable on a <EM>per</EM>-logfile basis.</li>

<LI>Beginning with Apache 1.3.5, the mod_log_config module has
also subsumed the <CODE>RefererIgnore</CODE> functionality from
<A HREF="mod_log_referer.html">mod_log_referer</A>.  The effect
of <CODE>RefererIgnore</CODE> can be achieved by combinations of
<A HREF="mod_setenvif.html"><CODE>SetEnvIf</CODE></A> directives
and conditional <CODE>CustomLog</CODE> definitions.</li>

</UL>

<hr>

<H2><A NAME="cookielog">CookieLog</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt CookieLog} directive&gt; -->
<p><A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> CookieLog <EM>filename</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_cookies<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Only available in Apache 1.2 and above</p>

<p>The CookieLog directive sets the filename for logging of cookies.
The filename is relative to the <A
HREF="core.html#serverroot">ServerRoot</A>. This directive is included
only for compatibility with <A
HREF="mod_cookies.html">mod_cookies</A>, and is deprecated.</p>

<HR>
<H2><A NAME="customlog">CustomLog</A> 
<a NAME="#customlog-conditional">directive</a></H2>
<p><A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> CustomLog <EM>file</em>|<em>pipe</EM>
    <EM>format</em>|<em>nickname</EM>  [env=[!]<EM>environment-variable</EM>]<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Nickname only available in Apache 1.3
    or later.  Conditional logging available in 1.3.5 or later.
<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config</p>

<p>The <code>CustomLog</code> directive is used to log requests
to the server.  A log format is specified, and the logging can
optionally be made conditional on request characteristics
using environment variables.</p>

<P>The first argument, which specifies the location to which the 
logs will be written, can take on one of the following two
types of values:</p>

<dl>
<dt><em>file</em>
<dd>A filename, relative to the 
<a href="core.html#serverroot">ServerRoot</a>.</dd>

<dt><em>pipe</em> 
<dd>The pipe character "<code>|</code>", followed by the path to a
program to receive the log information on its standard input.
<STRONG>Security:</STRONG> if a program is used, then it will be run
under the user who started httpd. This will be root if the server was
started by root; be sure that the program is secure.</dd>
</dl>

<P>The second argument specifies what will be written to the
log file.  It can specify either a <em>nickname</em>
defined by a previous <a href="#logformat">LogFormat</a>
directive, or it can be an explicit <em>format</em> string
as described in the <a href="#formats">log formats</a> section.</p>

<p>For example, the following two sets of directives have exactly
the same effect:</p>
d286 2
d290 1
a290 1
     LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common
d294 1
a294 1
     CustomLog logs/access_log &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot;
d297 15
a311 15
<p>The third argument is optional and allows the decision on whether
or not to log a particular request to be based on the presence or
absence of a particular variable in the server environment.  If the
specified <a href="../env.html">environment variable</a> is set for
the request (or is not set, in the case of a
'<CODE>env=!<EM>name</EM></CODE>' clause), then the request will be
logged.</P>

<P>Environment variables can be set on a <EM>per</EM>-request basis
using the <A HREF="mod_setenvif.html">mod_setenvif</A> and/or <A
HREF="mod_rewrite.html">mod_rewrite</A> modules.  For example, if you
don't want to record requests for all GIF images on your server in a
separate logfile but not your main log, you can use:
</P>
<PRE>
d315 2
a316 1
</PRE>
d318 2
a319 89
<HR>
<H2><A NAME="logformat">LogFormat</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt LogFormat} directive&gt; -->
<p><A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> LogFormat <EM>format</em>|<em>nickname</EM>
     [<EM>nickname</EM>]
<BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>LogFormat &quot;%h %l %u %t \&quot;%r\&quot;
%&gt;s %b&quot;</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Nickname only available in Apache 1.3
    or later
<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config</p>

<p>This directive specifies the format of the access log file.</p>

<p>The <code>LogFormat</code> directive can take one of two forms.  In
the first form, where only one argument is specified, this directive
sets the log format which will be used by logs specified in subsequent
<a href="#transferlog">TransferLog</a> directives.  The single
argument can specify an explicit <em>format</em> as discussed in <a
href="#formats">custom log formats</a> section above.  Alternatively,
it can use a <em>nickname</em> to refer to a log format defined
in a previous <code>LogFormat</code> directive as described below.</p>

<p>The second form of the <code>LogFormat</code> directive associates
an explicit <em>format</em> with a <em>nickname</em>.  This
<em>nickname</em> can then be used in subsequent
<code>LogFormat</code> or <a href="#customlog">CustomLog</a>
directives rather than repeating the entire format string.  A
<SAMP>LogFormat</SAMP> directive which defines a nickname <STRONG>does
nothing else</STRONG> -- that is, it <EM>only</EM> defines the
nickname, it doesn't actually apply the format and make it the
default.  Therefore, it will not affect subsequent <a
href="#transferlog">TransferLog</a> directives.
</P>

<HR>

<H2><A NAME="transferlog">TransferLog</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt TransferLog} directive&gt; -->
<p><A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> TransferLog <EM>file</em>|<em>pipe</EM><BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> none<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config</p>

<p>This directive has exactly the same arguments and effect as the <a
href="#customlog">CustomLog</a> directive, with the exception that it
does not allow the log format to be specified explicitly or for
conditional logging of requests.  Instead, the log format is
determined by the most recently specified specified <a
href="#logformat">LogFormat</a> directive (that does not define a
nickname).  Common Log Format is used if no other format has been
specified.</p>
d321 68
a388 1
<p>Example:</p>
d390 1
d395 1
d397 3
d401 2
a402 8
<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>

<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a403 2
</BODY>
</HTML>
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d44 1
a44 1
HREF="module-dict.html#compatibility"
d51 7
d61 1
a61 1
and <CODE>CustomLog</CODE> to define a log file and format in one go.
d70 4
a73 35
<LI><A HREF="#cookielog">CookieLog</A>
<LI><A HREF="#customlog">CustomLog</A>
<LI><A HREF="#customlog-conditional">CustomLog (conditional)</A>
<LI><A HREF="#logformat">LogFormat</A>
<LI><A HREF="#transferlog">TransferLog</A>
</UL>

<H3>Compatibility notes</H3>

<UL>
<LI>This module is based on mod_log_config distributed with
previous Apache releases, now updated to handle multiple logs.
There is now no need to re-configure Apache to use configuration log
formats.

<LI>The module also implements the <CODE>CookieLog</CODE> directive,
used to log user-tracking information created by <A
HREF="mod_usertrack.html">mod_usertrack</A>. The use of
<CODE>CookieLog</CODE> is deprecated, and a <CODE>CustomLog</CODE>
should be defined to log user-tracking information instead.

<LI>As of Apache 1.3.5, this module allows conditional logging
based upon the setting of environment variables.  That is,
you can control whether a request should be logged or not
based upon whether an arbitrary environment variable is
defined or not.  This is settable on a <EM>per</EM>-logfile
basis.

<LI>Beginning with Apache 1.3.5, the mod_log_config module has
also subsumed the <CODE>RefererIgnore</CODE> functionality from
<A HREF="mod_log_referer.html">mod_log_referer</A>.  The effect
of <CODE>RefererIgnore</CODE> can be achieved by combinations of
<A HREF="mod_setenvif.html"><CODE>SetEnvIf</CODE></A> directives
and conditional <CODE>CustomLog</CODE> definitions.

d78 3
a80 3
Unless told otherwise with <TT>LogFormat</TT> the log files created by
<TT>TransferLog</TT> will be in standard "Common Log Format"
(CLF). The contents of each line in a CLF file are explained
d83 1
a83 1
are set with <CODE>LogFormat</CODE> and <CODE>CustomLog</CODE>.
d87 2
a88 2
The Common Log Format (CLF) file contains a separate line for each
request. A line is composed of several tokens separated by spaces:
d128 10
a137 5
The format argument to the <CODE>LogFormat</CODE> and
<CODE>CustomLog</CODE> is a string. This string is logged to the log
file for each request. It can contain literal characters copied into
the log files, and `%' directives which are replaced in the log file
by the values as follows:
d145 4
d168 1
a168 1
                be in strftime(3) format. (potentially localised)
d176 5
a180 13
The `...' can be nothing at all (<EM>e.g.</EM>, <CODE>"%h %u %r %s %b"</CODE>), or it can
indicate conditions for inclusion of the item (which will cause it
to be replaced with `-' if the condition is not met).  Note that
there is no escaping performed on the strings from %r, %...i and
%...o; some with long memories may remember that I thought this was
a bad idea, once upon a time, and I'm still not comfortable with
it, but it is difficult to see how to `do the right thing' with all
of `%..i', unless we URL-escape everything and break with CLF.

<P>

The forms of condition are a list of HTTP status codes, which may
or may not be preceded by `!'.  Thus, `%400,501{User-agent}i' logs
d182 35
a216 17
Implemented) only; `%!200,304,302{Referer}i' logs Referer: on all
requests which did <STRONG>not</STRONG> return some sort of normal status.

<P>

Note that the common log format is defined by the string <CODE>"%h %l
%u %t \"%r\" %>s %b"</CODE>, which can be used as the basis for
extending for format if desired (<EM>e.g.</EM>, to add extra fields at the end).
NCSA's extended/combined log format would be <CODE>"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\""</CODE>.

<P>

Note that the canonical <A HREF="core.html#servername">ServerName</A>
and <A HREF="core.html#port">Port</A> of the server serving the request
are used for <CODE>%v</CODE> and <CODE>%p</CODE> respectively.  This
happens regardless of the
<A HREF="core.html#usecanonicalname">UseCanonicalName</A> setting because
d219 1
a219 1
the request.
d223 3
a225 2
The <CODE>TransferLog</CODE> and <CODE>CustomLog</CODE> directives can
be given more than once to log requests to multiple log files. Each
d227 1
a227 1
directives.
d231 1
a231 1
If a &lt;VirtualHost&gt; section does not contain any
d237 1
a237 2
See the examples below.
<P>
d241 1
a241 1
See the <A HREF="../misc/security_tips.html#security">security tips</A>
d244 52
a295 2
the user that starts the server.
<P>
d297 1
a297 1
<HR>
d299 1
d303 1
a303 1
<A
d318 1
a318 1
><STRONG>Compatibility:</STRONG></A> Only available in Apache 1.2 and above<P>
d320 1
a320 1
The CookieLog directive sets the filename for logging of cookies.
d323 2
a324 3
only for compatibility with
<A HREF="mod_cookies.html">mod_cookies</A>, and is deprecated.
<P>
d327 3
a329 2
<H2><A NAME="customlog">CustomLog</A> directive</H2>
<A
d332 2
a333 2
><STRONG>Syntax:</STRONG></A> CustomLog <EM>file-pipe</EM>
    <EM>format-or-nickname</EM><BR>
d346 1
a346 1
    or later
d351 1
a351 26
><STRONG>Module:</STRONG></A> mod_log_config
<P>
The first argument is the filename to which log records should be
written. This is used
exactly like the argument to
<A
 HREF="#transferlog"
><SAMP>TransferLog</SAMP></A>;
that is, it is either a full path or relative to the current
server root.
</P>
<P>
The format argument specifies a format for each line of the log file.
The options available for the format are exactly the same as for
the argument of the <TT>LogFormat</TT> directive. If the format
includes any spaces (which it will do in almost all cases) it
should be enclosed in double quotes.
</P>
<P>
Instead of an actual format string, you can use a format nickname defined with
the
<A
 HREF="#logformat"
><SAMP>LogFormat</SAMP></A>
directive.
</P>
d353 53
a405 43
<HR>
<H2><A NAME="customlog-conditional">CustomLog (conditional)</A> directive</H2>
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> CustomLog <EM>file-pipe</EM>
    <EM>format-or-nickname</EM>
    env=[!]<EM>environment-variable</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Only available in Apache 1.3.5
    or later
<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config
<P>

The behaviour of this form of the <SAMP>CustomLog</SAMP> directive is almost
identical to the <A HREF="#customlog">standard <CODE>CustomLog</CODE></A>
directive.  The difference is that the '<CODE>env=</CODE>' clause controls
whether a particular request will be logged in the specified file or
not.  If the specified environment variable is set for the
request (or is not set, in the case of a '<CODE>env=!<EM>name</EM></CODE>'
clause), then the request will be logged.
</P>
<P>
Environment variables can be set on a <EM>per</EM>-request basis
using the <A HREF="mod_setenvif.html">mod_setenvif</A> and/or
<A HREF="mod_rewrite.html">mod_rewrite</A> modules.  For example,
if you don't want to record requests for all GIF images on
your server in a separate logfile but not your main log, you
can use:
d416 1
a416 1
<A
d419 2
a420 1
><STRONG>Syntax:</STRONG></A> LogFormat <EM>format</EM> [<EM>nickname</EM>]
d426 1
a426 1
%>s %b&quot;</CODE><BR>
d444 18
a461 18
><STRONG>Module:</STRONG></A> mod_log_config
<P>
This sets the format of the default logfile named by the
<A
 HREF="#transferlog"
><SAMP>TransferLog</SAMP></A>
directive .  See the section on
<A HREF="#formats">Custom Log Formats</A> for details on the format
arguments.
</P>
<P>
If you include a nickname for the format on the directive line, you can
use it in other <SAMP>LogFormat</SAMP> and
<A HREF="#customlog"><SAMP>CustomLog</SAMP></A>
directives rather than repeating the entire format string.
</P>
<P>
A
d463 4
a466 2
nothing else</STRONG> -- that is, it <EM>only</EM> defines the nickname,
it doesn't actually apply the format and make it the default.
d473 1
a473 1
<A
d476 1
a476 1
><STRONG>Syntax:</STRONG></A> TransferLog <EM>file-pipe</EM><BR>
d492 1
a492 1
><STRONG>Module:</STRONG></A> mod_log_config<P>
d494 15
a508 19
The TransferLog directive adds a log file in the format defined by the
most recent
<A
 HREF="#logformat"
><SAMP>LogFormat</SAMP></A>
directive, or Common Log Format if no other default format has been
specified.
<EM>File-pipe</EM> is one
of
<DL><DT>A filename
<DD>A filename relative to the <A HREF="core.html#serverroot">ServerRoot</A>.
<DT> `|' followed by a command
<DD>A program to receive the agent log information on its standard input.
Note the a new program will not be started for a VirtualHost if it inherits
the TransferLog from the main server.
</DL>
<STRONG>Security:</STRONG> if a program is used, then it will be
run under the user who started httpd. This will be root if the server
was started by root; be sure that the program is secure.<P>
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d24 1
a24 4
This module is contained in the <CODE>mod_log_config.c</CODE> file,
and is compiled in by default in Apache 1.2. mod_log_config replaces
mod_log_common in Apache 1.2. Prior to version 1.2, mod_log_config was
an optional module. It provides for logging of the requests made to
d28 22
d60 10
d211 1
a211 1
%u %t \"%r\" %s %b"</CODE>, which can be used as the basis for
d213 1
a213 1
NCSA's extended/combined log format would be <CODE>"%h %l %u %t \"%r\" %s %b \"%{Referer}i\" \"%{User-agent}i\""</CODE>.
a250 1
<H2>Directives</H2>
a251 7
<UL>
<LI><A HREF="#cookielog">CookieLog</A>
<LI><A HREF="#customlog">CustomLog</A>
<LI><A HREF="#customlog-conditional">CustomLog (conditional)</A>
<LI><A HREF="#logformat">LogFormat</A>
<LI><A HREF="#transferlog">TransferLog</A>
</UL>
d255 1
a255 1
<H2><A NAME="cookielog">CookieLog</A></H2>
d282 1
a282 1
<H2><A NAME="customlog">CustomLog</A></H2>
d333 1
a333 1
<H2><A NAME="customlog-conditional">CustomLog (conditional)</A></H2>
d383 1
a383 1
<H2><A NAME="logformat">LogFormat</A></H2>
d394 1
a394 1
%s %b&quot;</CODE><BR>
d437 1
a437 1
<H2><A NAME="transferlog">TransferLog</A></H2>
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d130 6
a135 1
%...b:          Bytes sent, excluding HTTP headers.
a136 1
%...{FOOBAR}e:  The contents of the environment variable FOOBAR
d138 1
a138 2
%...a:          Remote IP-address
%...A:          Local IP-address
d142 1
d147 2
d150 2
a151 2
%...s:          Status.  For requests that got internally redirected, this
                is status of the *original* request --- %...&gt;s for the last.
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d22 3
a24 3
<H1 ALIGN="CENTER">Module mod_log_config</h1>

This module is contained in the <code>mod_log_config.c</code> file,
d29 1
d31 6
a36 6
<h2>Summary</h2>

Three directives are provided by this module: <code>TransferLog</code>
to create a log file, <code>LogFormat</code> to set a custom format,
and <code>CustomLog</code> to define a log file and format in one go.
The <code>TransferLog</code> and <code>CustomLog</code> directives can
d39 1
a39 1
<P>
d41 1
a41 1
<h3>Compatibility notes</h3>
d43 2
a44 2
<ul>
<li>This module is based on mod_log_config distributed with
d49 4
a52 4
<li>The module also implements the <code>CookieLog</code> directive,
used to log user-tracking information created by <a
href="mod_usertrack.html">mod_usertrack</a>. The use of
<code>CookieLog</code> is deprecated, and a <code>CustomLog</code>
d55 13
a67 1
</ul>
d69 1
a69 1
<h2>Log File Formats</h2>
d71 4
a74 2
Unless told otherwise with <tt>LogFormat</tt> the log files created by
<tt>TransferLog</tt> will be in standard "Common Log Format"
d78 1
a78 1
are set with <code>LogFormat</code> and <code>CustomLog</code>.
d80 1
a80 1
<h3>Common Log Format</h3>
d85 1
a85 1
<blockquote>
d87 1
a87 1
</blockquote>
d90 3
a92 3
<dl>
<dt>host
<dd>The fully-qualified domain name of the client, or its IP number if the
d94 2
a95 2
<dt>ident
<dd>If <A HREF="core.html#identitycheck">IdentityCheck</A> is enabled and the
d98 2
a99 2
<dt>authuser
<dd>If the request was for an password protected document, then this is
d101 17
a117 17
<dt>date
<dd>The date and time of the request, in the following format:
<dl><dd><blockquote><code> date = [day/month/year:hour:minute:second zone] <br>
day = 2*digit<br>
month = 3*letter<br>
year = 4*digit<br>
hour = 2*digit<br>
minute = 2*digit<br>
second = 2*digit<br>
zone = (`+' | `-') 4*digit</code></blockquote></dl>
<dt>request
<dd>The request line from the client, enclosed in double quotes
(<code>&quot;</code>).
<dt>status
<dd>The three digit status code returned to the client.
<dt>bytes
<dd>The number of bytes in the object returned to the client, not including
d119 1
a119 1
</dl>
d121 1
a121 1
<h3><A NAME="formats">Custom Log Formats</A></h3>
d123 2
a124 2
The format argument to the <code>LogFormat</code> and
<code>CustomLog</code> is a string. This string is logged to the log
d134 2
d141 1
a141 1
%...p:          The port the request was served to
d146 1
a146 1
%...t:          Time, in common log format time format
d148 1
a148 1
                be in strftime(3) format.
d152 2
a153 1
%...v:          The name of the server (i.e. which virtual host?)
d156 1
a156 1
The `...' can be nothing at all (e.g. <code>"%h %u %r %s %b"</code>), or it can
d171 8
a178 1
requests which did <b>not</b> return some sort of normal status.
d182 8
a189 4
Note that the common log format is defined by the string <code>"%h %l
%u %t \"%r\" %s %b"</code>, which can be used as the basis for
extending for format if desired (e.g. to add extra fields at the end).
NCSA's extended/combined log format would be <code>"%h %l %u %t \"%r\" %s %b \"%{Referer}i\" \"%{User-agent}i\""</code>.
d191 1
a191 1
<h2>Using Multiple Log Files</h2>
d193 1
a193 1
The <code>TransferLog</code> and <code>CustomLog</code> directives can
d198 1
a198 1
<h3>Use with Virtual Hosts</h3>
d201 1
a201 1
<tt>TransferLog</tt> or <tt>CustomLog</tt> directives, the
d207 1
a207 1
<p>
d209 1
a209 1
<h2>Security Considerations</h2>
d211 6
a216 6
See the <A HREF="../misc/security_tips.html">security tips</A> document
for details on why your security could be compromised if the directory
where logfiles are stored is writable by anyone other than the user
that starts the server.
<p>
<h2>Directives</h2>
d218 2
a219 2
<ul>
<li><A HREF="#cookielog">CookieLog</A>
d221 5
a225 4
<li><A HREF="#logformat">LogFormat</A>
<li><A HREF="#transferlog">TransferLog</A>
</ul>
<hr>
d228 1
a228 1
<h2><A name="cookielog">CookieLog</A></h2>
d230 16
a245 4
<strong>Syntax:</strong> CookieLog <em>filename</em><br>
<Strong>Context:</strong> server config, virtual host<br>
<strong>Module:</strong> mod_cookies<br>
<strong>Compatibility:</strong> Only available in Apache 1.2 and above<p>
d250 3
a252 3
only for compatibility with <a
href="mod_cookies.html">mod_cookies</a>, and is deprecated.
<p>
d254 1
d256 34
a289 10
<STRONG>Syntax:</STRONG> CustomLog <em>file-pipe</em> <em>format</em><BR>
<STRONG>Context:</STRONG> server config, virtual host<BR>
<STRONG>Status:</STRONG> Base<BR>
<STRONG>Module:</STRONG> mod_log_config<P>

The first argument is the filename to log to. This is used
exactly like the argument to <tt>TransferLog</tt>, that is,
it is either a full path, or relative to the current
server root. <p>

d292 1
a292 1
the argument of the <tt>LogFormat</tt> directive. If the format
d295 9
d305 52
a356 1
<h2><A name="logformat">LogFormat</A></h2>
d358 49
a406 9
<strong>Syntax:</strong> LogFormat <em>string</em><br>
<strong>Default:</strong> <code>LogFormat &quot;%h %l %u %t \&quot;%r\&quot;
%s %b&quot;</code><br>
<Strong>Context:</strong> server config, virtual host<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_log_config<p>

This sets the format of the logfile.  See <A HREF="#formats">
Custom Log Formats</A> for details on the format arguments.<p><hr>
d408 1
d410 1
a410 1
<h2><A name="transferlog">TransferLog</A></h2>
d412 29
a440 8
<strong>Syntax:</strong> TransferLog <em>file-pipe</em><br>
<strong>Default:</strong> none<br>
<Strong>Context:</strong> server config, virtual host<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_log_config<p>

The TransferLog directive adds a log file in Common Log Format.
<em>File-pipe</em> is one
d442 4
a445 4
<dl><dt>A filename
<dd>A filename relative to the <A HREF="core.html#serverroot">ServerRoot</A>.
<dt> `|' followed by a command
<dd>A program to receive the agent log information on its standard input.
d448 2
a449 2
</dl>
<strong>Security:</strong> if a program is used, then it will be
d451 1
a451 1
was started by root; be sure that the program is secure.<p>
d455 1
d457 1
a457 1
 Apache HTTP Server Version 1.2
a464 2


@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Module mod_log_config</H1>
d24 1
a24 1
This module is contained in the <CODE>mod_log_config.c</CODE> file,
d30 1
a30 1
<H2>Summary</H2>
d32 4
a35 4
Three directives are provided by this module: <CODE>TransferLog</CODE>
to create a log file, <CODE>LogFormat</CODE> to set a custom format,
and <CODE>CustomLog</CODE> to define a log file and format in one go.
The <CODE>TransferLog</CODE> and <CODE>CustomLog</CODE> directives can
d40 1
a40 1
<H3>Compatibility notes</H3>
d42 2
a43 2
<UL>
<LI>This module is based on mod_log_config distributed with
d48 4
a51 4
<LI>The module also implements the <CODE>CookieLog</CODE> directive,
used to log user-tracking information created by <A
HREF="mod_usertrack.html">mod_usertrack</A>. The use of
<CODE>CookieLog</CODE> is deprecated, and a <CODE>CustomLog</CODE>
d54 1
a54 1
</UL>
d56 1
a56 1
<H2>Log File Formats</H2>
d58 2
a59 2
Unless told otherwise with <TT>LogFormat</TT> the log files created by
<TT>TransferLog</TT> will be in standard "Common Log Format"
d63 1
a63 1
are set with <CODE>LogFormat</CODE> and <CODE>CustomLog</CODE>.
d65 1
a65 1
<H3>Common Log Format</H3>
d70 1
a70 1
<BLOCKQUOTE>
d72 1
a72 1
</BLOCKQUOTE>
d75 3
a77 3
<DL>
<DT>host
<DD>The fully-qualified domain name of the client, or its IP number if the
d79 2
a80 2
<DT>ident
<DD>If <A HREF="core.html#identitycheck">IdentityCheck</A> is enabled and the
d83 2
a84 2
<DT>authuser
<DD>If the request was for an password protected document, then this is
d86 17
a102 17
<DT>date
<DD>The date and time of the request, in the following format:
<DL><DD><BLOCKQUOTE><CODE> date = [day/month/year:hour:minute:second zone] <BR>
day = 2*digit<BR>
month = 3*letter<BR>
year = 4*digit<BR>
hour = 2*digit<BR>
minute = 2*digit<BR>
second = 2*digit<BR>
zone = (`+' | `-') 4*digit</CODE></BLOCKQUOTE></DL>
<DT>request
<DD>The request line from the client, enclosed in double quotes
(<CODE>&quot;</CODE>).
<DT>status
<DD>The three digit status code returned to the client.
<DT>bytes
<DD>The number of bytes in the object returned to the client, not including
d104 1
a104 1
</DL>
d106 1
a106 1
<H3><A NAME="formats">Custom Log Formats</A></H3>
d108 2
a109 2
The format argument to the <CODE>LogFormat</CODE> and
<CODE>CustomLog</CODE> is a string. This string is logged to the log
a118 1
%...a:          Remote IP-address
d124 1
a124 1
%...p:          The canonical Port of the server serving the request
d135 1
a135 1
%...v:          The canonical ServerName of the server serving the request.
d138 1
a138 1
The `...' can be nothing at all (<EM>e.g.</EM>, <CODE>"%h %u %r %s %b"</CODE>), or it can
d153 1
a153 1
requests which did <STRONG>not</STRONG> return some sort of normal status.
d157 4
a160 4
Note that the common log format is defined by the string <CODE>"%h %l
%u %t \"%r\" %s %b"</CODE>, which can be used as the basis for
extending for format if desired (<EM>e.g.</EM>, to add extra fields at the end).
NCSA's extended/combined log format would be <CODE>"%h %l %u %t \"%r\" %s %b \"%{Referer}i\" \"%{User-agent}i\""</CODE>.
d162 1
a162 12
<P>

Note that the canonical <A HREF="core.html#servername">ServerName</A>
and <A HREF="core.html#port">Port</A> of the server serving the request
are used for <CODE>%v</CODE> and <CODE>%p</CODE> respectively.  This
happens regardless of the
<A HREF="core.html#usecanonicalname">UseCanonicalName</A> setting because
otherwise log analysis programs would have to duplicate the entire
vhost matching algorithm in order to decide what host really served
the request.

<H2>Using Multiple Log Files</H2>
d164 1
a164 1
The <CODE>TransferLog</CODE> and <CODE>CustomLog</CODE> directives can
d169 1
a169 1
<H3>Use with Virtual Hosts</H3>
d172 1
a172 1
<TT>TransferLog</TT> or <TT>CustomLog</TT> directives, the
d178 1
a178 1
<P>
d180 1
a180 1
<H2>Security Considerations</H2>
d182 6
a187 6
See the <A HREF="../misc/security_tips.html#security">security tips</A>
document for details on why your security could be compromised if the
directory where logfiles are stored is writable by anyone other than
the user that starts the server.
<P>
<H2>Directives</H2>
d189 2
a190 2
<UL>
<LI><A HREF="#cookielog">CookieLog</A>
d192 4
a195 4
<LI><A HREF="#logformat">LogFormat</A>
<LI><A HREF="#transferlog">TransferLog</A>
</UL>
<HR>
d198 1
a198 1
<H2><A NAME="cookielog">CookieLog</A></H2>
d200 4
a203 16
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> CookieLog <EM>filename</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_cookies<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Only available in Apache 1.2 and above<P>
d208 3
a210 3
only for compatibility with <A
HREF="mod_cookies.html">mod_cookies</A>, and is deprecated.
<P>
a211 1
<HR>
d213 10
a222 31
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> CustomLog <EM>file-pipe</EM>
    <EM>format-or-nickname</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<STRONG>Compatibility: </STRONG> Nickname only available in Apache 1.3
    or later
<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config
<P>
The first argument is the filename to which log records should be
written. This is used
exactly like the argument to
<A
 HREF="#transferlog"
><SAMP>TransferLog</SAMP></A>;
that is, it is either a full path or relative to the current
server root.
</P>
<P>
d225 1
a225 1
the argument of the <TT>LogFormat</TT> directive. If the format
d228 2
a229 11
</P>
<P>
Instead of an actual format string, you can use a format nickname defined with
the
<A
 HREF="#logformat"
><SAMP>LogFormat</SAMP></A>
directive.
</P>
<HR>
<H2><A NAME="logformat">LogFormat</A></H2>
d231 10
a240 48
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> LogFormat <EM>format</EM> [<EM>nickname</EM>]
<BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>LogFormat &quot;%h %l %u %t \&quot;%r\&quot;
%s %b&quot;</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<STRONG>Compatibility: </STRONG> Nickname only available in Apache 1.3
    or later
<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config
<P>
This sets the format of the default logfile named by the
<A
 HREF="#transferlog"
><SAMP>TransferLog</SAMP></A>
directive .  See the section on
<A HREF="#formats">Custom Log Formats</A> for details on the format
arguments.
</P>
<P>
If you include a nickname for the format on the directive line, you can
use it in other <SAMP>LogFormat</SAMP> and
<A
 HREF="#customlog"
><SAMP>CustomLog</SAMP></A>
directives rather than repeating the entire format string.
</P>
<P>
A
<SAMP>LogFormat</SAMP> directive which defines a nickname <STRONG>does
nothing else</STRONG> -- that is, it <EM>only</EM> defines the nickname,
it doesn't actually apply the format and make it the default.
</P>
d242 1
a242 2
<HR>
<H2><A NAME="transferlog">TransferLog</A></H2>
d244 8
a251 29
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> TransferLog <EM>file-pipe</EM><BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> none<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_log_config<P>

The TransferLog directive adds a log file in the format defined by the
most recent
<A
 HREF="#logformat"
><SAMP>LogFormat</SAMP></A>
directive, or Common Log Format if no other default format has been
specified.
<EM>File-pipe</EM> is one
d253 4
a256 4
<DL><DT>A filename
<DD>A filename relative to the <A HREF="core.html#serverroot">ServerRoot</A>.
<DT> `|' followed by a command
<DD>A program to receive the agent log information on its standard input.
d259 2
a260 2
</DL>
<STRONG>Security:</STRONG> if a program is used, then it will be
d262 1
a262 1
was started by root; be sure that the program is secure.<P>
a265 1

d267 1
a267 1
 Apache HTTP Server Version 1.3
d275 2
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 112
a112 2
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
d114 3
a116 89
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_log_config</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_log_config</h1>

    <p>This module provides for logging of the requests made to the
    server, using the Common Log Format or a user-specified
    format.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a>
    mod_log_config.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    config_log_module<br />
     <a href="module-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Was an extension
    module prior to Apache 1.2.</p>

    <h2>Summary</h2>

    <p>This module provides for flexible logging of client
    requests. Logs are written in a customizable format, and may be
    written directly to a file, or to an external program.
    Conditional logging is provided so that individual requests may
    be included or excluded from the logs based on characteristics
    of the request.</p>

    <p>Three directives are provided by this module:
    <code>TransferLog</code> to create a log file,
    <code>LogFormat</code> to set a custom format, and
    <code>CustomLog</code> to define a log file and format in one
    step. The <code>TransferLog</code> and <code>CustomLog</code>
    directives can be used multiple times in each server to cause
    each request to be logged to multiple files.</p>

    <p>See also: <a href="../logs.html">Apache Log Files</a>.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#cookielog">CookieLog</a></li>

      <li><a href="#customlog">CustomLog</a></li>

      <li><a href="#logformat">LogFormat</a></li>

      <li><a href="#transferlog">TransferLog</a></li>
    </ul>

    <h2><a id="formats" name="formats">Custom Log Formats</a></h2>

    <p>The format argument to the <code>LogFormat</code> and
    <code>CustomLog</code> directives is a string. This string is
    logged to the log file for each request. It can contain literal
    characters copied into the log files and the c-type control
    characters "\n" and "\t" to represent new-lines and tabs.
    Literal quotes and back-slashes should be escaped with
    back-slashes.</p>

    <p>The characteristics of the request itself are logged by
    placing "%" directives in the format string, which are replaced
    in the log file by the values as follows:</p>
<pre>
%...a:          Remote IP-address
%...A:          Local IP-address
%...B:          Bytes sent, excluding HTTP headers.
%...b:          Bytes sent, excluding HTTP headers. In CLF format
        i.e. a '-' rather than a 0 when no bytes are sent.
%...c:          Connection status when response is completed.
                'X' = connection aborted before the response completed.
                '+' = connection may be kept alive after the response is sent.
                '-' = connection will be closed after the response is sent.
a117 1
%...f:          Filename
d119 1
a119 1
%...H       The request protocol
a122 1
%...m       The request method
a126 2
%...q       The query string (prepended with a ? if a query string exists,
        otherwise an empty string)
d128 3
a130 3
%...s:          Status.  For requests that got internally redirected, this is
                the status of the *original* request --- %...&gt;s for the last.
%...t:          Time, in common log format time format (standard english format)
d132 1
a132 1
                be in strftime(3) format. (potentially localized)
d135 1
a135 1
%...U:          The URL path requested, not including any query string.
d137 1
a137 2
%...V:          The server name according to the UseCanonicalName setting.
</pre>
d139 246
a384 285
    <p>The "..." can be nothing at all (<em>e.g.</em>, <code>"%h %u
    %r %s %b"</code>), or it can indicate conditions for inclusion
    of the item (which will cause it to be replaced with "-" if the
    condition is not met). The forms of condition are a list of
    HTTP status codes, which may or may not be preceded by "!".
    Thus, "%400,501{User-agent}i" logs User-agent: on 400 errors
    and 501 errors (Bad Request, Not Implemented) only;
    "%!200,304,302{Referer}i" logs Referer: on all requests which
    did <strong>not</strong> return some sort of normal status.</p>

    <p>Note that there is no escaping performed on the strings from
    %...r, %...i and %...o. This is mainly to comply with the
    requirements of the Common Log Format. This implies that
    clients can insert control characters into the log, so care
    should be taken when dealing with raw log files.</p>

    <p>Some commonly used log format strings are:</p>

    <dl>
      <dt>Common Log Format (CLF)</dt>

      <dd><code>"%h %l %u %t \"%r\" %&gt;s %b"</code></dd>

      <dt>Common Log Format with Virtual Host</dt>

      <dd><code>"%v %h %l %u %t \"%r\" %&gt;s %b"</code></dd>

      <dt>NCSA extended/combined log format</dt>

      <dd><code>"%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\"
      \"%{User-agent}i\""</code></dd>

      <dt>Referer log format</dt>

      <dd><code>"%{Referer}i -&gt; %U"</code></dd>

      <dt>Agent (Browser) log format</dt>

      <dd><code>"%{User-agent}i"</code></dd>
    </dl>

    <p>Note that the canonical <a
    href="core.html#servername">ServerName</a> and <a
    href="core.html#port">Port</a> of the server serving the
    request are used for <code>%v</code> and <code>%p</code>
    respectively. This happens regardless of the <a
    href="core.html#usecanonicalname">UseCanonicalName</a> setting
    because otherwise log analysis programs would have to duplicate
    the entire vhost matching algorithm in order to decide what
    host really served the request.</p>

    <h2>Security Considerations</h2>

    <p>See the <a
    href="../misc/security_tips.html#serverroot">security tips</a>
    document for details on why your security could be compromised
    if the directory where logfiles are stored is writable by
    anyone other than the user that starts the server.</p>

    <h2>Compatibility notes</h2>

    <ul>
      <li>This module is based on mod_log_config distributed with
      previous Apache releases, now updated to handle multiple
      logs. There is now no need to re-configure Apache to use
      configuration log formats.</li>

      <li>The module also implements the <code>CookieLog</code>
      directive, used to log user-tracking information created by
      <a href="mod_usertrack.html">mod_usertrack</a>. The use of
      <code>CookieLog</code> is deprecated, and a
      <code>CustomLog</code> should be defined to log user-tracking
      information instead.</li>

      <li>As of Apache 1.3.5, this module allows conditional
      logging based upon the setting of <a
      href="../env.html">environment variables</a>. That is, you
      can control whether a request should be logged or not based
      upon whether an arbitrary environment variable is defined or
      not. This is configurable on a <em>per</em>-logfile
      basis.</li>

      <li>Beginning with Apache 1.3.5, the mod_log_config module
      has also subsumed the <code>RefererIgnore</code>
      functionality from <a
      href="mod_log_referer.html">mod_log_referer</a>. The effect
      of <code>RefererIgnore</code> can be achieved by combinations
      of <a href="mod_setenvif.html"><code>SetEnvIf</code></a>
      directives and conditional <code>CustomLog</code>
      definitions.</li>
    </ul>
    <hr />

    <h2><a id="cookielog" name="cookielog">CookieLog</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> CookieLog
    <em>filename</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_cookies<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Only available
    in Apache 1.2 and above</p>

    <p>The CookieLog directive sets the filename for logging of
    cookies. The filename is relative to the <a
    href="core.html#serverroot">ServerRoot</a>. This directive is
    included only for compatibility with <a
    href="mod_cookies.html">mod_cookies</a>, and is deprecated.</p>
    <hr />

    <h2><a id="customlog" name="customlog">CustomLog</a> <a
    id="customlog-conditional"
    name="customlog-conditional">directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> CustomLog
    <em>file</em>|<em>pipe</em> <em>format</em>|<em>nickname</em>
    [env=[!]<em>environment-variable</em>]<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Nickname only
    available in Apache 1.3 or later. Conditional logging available
    in 1.3.5 or later.<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>The <code>CustomLog</code> directive is used to log requests
    to the server. A log format is specified, and the logging can
    optionally be made conditional on request characteristics using
    environment variables.</p>

    <p>The first argument, which specifies the location to which
    the logs will be written, can take on one of the following two
    types of values:</p>

    <dl>
      <dt><em>file</em></dt>

      <dd>A filename, relative to the <a
      href="core.html#serverroot">ServerRoot</a>.</dd>

      <dt><em>pipe</em></dt>

      <dd>The pipe character "<code>|</code>", followed by the path
      to a program to receive the log information on its standard
      input. <strong>Security:</strong> if a program is used, then
      it will be run under the user who started httpd. This will be
      root if the server was started by root; be sure that the
      program is secure.</dd>
    </dl>

    <p>The second argument specifies what will be written to the
    log file. It can specify either a <em>nickname</em> defined by
    a previous <a href="#logformat">LogFormat</a> directive, or it
    can be an explicit <em>format</em> string as described in the
    <a href="#formats">log formats</a> section.</p>

    <p>For example, the following two sets of directives have
    exactly the same effect:</p>
<pre>
     # CustomLog with format nickname
     LogFormat "%h %l %u %t \"%r\" %&gt;s %b" common
     CustomLog logs/access_log common

     # CustomLog with explicit format string
     CustomLog logs/access_log "%h %l %u %t \"%r\" %&gt;s %b"
</pre>

    <p>The third argument is optional and allows the decision on
    whether or not to log a particular request to be based on the
    presence or absence of a particular variable in the server
    environment. If the specified <a href="../env.html">environment
    variable</a> is set for the request (or is not set, in the case
    of a '<code>env=!<em>name</em></code>' clause), then the
    request will be logged.</p>

    <p>Environment variables can be set on a <em>per</em>-request
    basis using the <a href="mod_setenvif.html">mod_setenvif</a>
    and/or <a href="mod_rewrite.html">mod_rewrite</a> modules. For
    example, if you want to record requests for all GIF
    images on your server in a separate logfile but not in your main
    log, you can use:</p>
<pre>
    SetEnvIf Request_URI \.gif$ gif-image
    CustomLog gif-requests.log common env=gif-image
    CustomLog nongif-requests.log common env=!gif-image
</pre>
    <hr />

    <h2><a id="logformat" name="logformat">LogFormat</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LogFormat
    <em>format</em>|<em>nickname</em> [<em>nickname</em>]<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>LogFormat "%h %l
    %u %t \"%r\" %&gt;s %b"</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Nickname only
    available in Apache 1.3 or later<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>This directive specifies the format of the access log
    file.</p>

    <p>The <code>LogFormat</code> directive can take one of two
    forms. In the first form, where only one argument is specified,
    this directive sets the log format which will be used by logs
    specified in subsequent <a href="#transferlog">TransferLog</a>
    directives. The single argument can specify an explicit
    <em>format</em> as discussed in <a href="#formats">custom log
    formats</a> section above. Alternatively, it can use a
    <em>nickname</em> to refer to a log format defined in a
    previous <code>LogFormat</code> directive as described
    below.</p>

    <p>The second form of the <code>LogFormat</code> directive
    associates an explicit <em>format</em> with a
    <em>nickname</em>. This <em>nickname</em> can then be used in
    subsequent <code>LogFormat</code> or <a
    href="#customlog">CustomLog</a> directives rather than
    repeating the entire format string. A <samp>LogFormat</samp>
    directive which defines a nickname <strong>does nothing
    else</strong> -- that is, it <em>only</em> defines the
    nickname, it doesn't actually apply the format and make it the
    default. Therefore, it will not affect subsequent <a
    href="#transferlog">TransferLog</a> directives.</p>

    <p>For example:</p>

    <code>LogFormat "%v %h %l %u %t \"%r\" %&gt;s %b" vhost_common</code>

    <hr />

    <h2><a id="transferlog" name="transferlog">TransferLog</a>
    directive</h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> TransferLog
    <em>file</em>|<em>pipe</em><br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> none<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_log_config</p>

    <p>This directive has exactly the same arguments and effect as
    the <a href="#customlog">CustomLog</a> directive, with the
    exception that it does not allow the log format to be specified
    explicitly or for conditional logging of requests. Instead, the
    log format is determined by the most recently specified <a
    href="#logformat">LogFormat</a> directive (that does not define
    a nickname). Common Log Format is used if no other format has
    been specified.</p>

    <p>Example:</p>
<pre>
   LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\""
   TransferLog logs/access_log
</pre>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
d386 2
a387 2
  </body>
</html>
d389 2
@


