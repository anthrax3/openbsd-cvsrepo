head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.38
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.34
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.32
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.30
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.28
	OPENBSD_5_0:1.9.0.26
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.24
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.22
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.20
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.16
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.14
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.12
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.10
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.9;

1.9
date	2005.07.29.23.55.40;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.20.00.16.21;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2002.07.19.21.31.14;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.31;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.29.26;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.32;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.32;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.00;	author beck;	state Exp;
branches;
next	;


desc
@@


1.10
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_access</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_access</h1>

    <p>This module provides access control based on client
    hostname, IP address, or other characteristics of the client
    request.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a> mod_access.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    access_module</p>

    <h2>Summary</h2>

    <p>The directives provided by mod_access are used in <code><a
    href="core.html#directory">&lt;Directory&gt;</a>, <a
    href="core.html#files">&lt;Files&gt;</a>,</code> and <code><a
    href="core.html#location">&lt;Location&gt;</a></code> sections
    as well as <code><a
    href="core.html#accessfilename">.htaccess</a></code> files to
    control access to particular parts of the server. Access can be
    controlled based on the client hostname, IP address, or other
    characteristics of the client request, as captured in <a
    href="../env.html">environment variables</a>. The
    <code>Allow</code> and <code>Deny</code> directives are used to
    specify which clients are or are not allowed access to the
    server, while the <code>Order</code> directive sets the default
    access state, and configures how the <code>Allow</code> and
    <code>Deny</code> directives interact with each other.</p>

    <p>Both host-based access restrictions and password-based
    authentication may be implemented simultaneously. In that case,
    the <a href="core.html#satisfy">Satisfy</a> directive is used
    to determine how the two sets of restrictions interact.</p>

    <p>In general, access restriction directives apply to all
    access methods (<code>GET</code>, <code>PUT</code>,
    <code>POST</code>, etc). This is the desired behavior in most
    cases. However, it is possible to restrict some methods, while
    leaving other methods unrestricted, by enclosing the directives
    in a <a href="core.html#limit">&lt;Limit&gt;</a> section.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#allow">Allow</a></li>

      <li><a href="#deny">Deny</a></li>

      <li><a href="#order">Order</a></li>
    </ul>

    <p>See also <a href="core.html#satisfy">Satisfy</a> and <a
    href="core.html#require">Require</a>.</p>
    <hr />

    <h2><a id="allow" name="allow">Allow</a> <a id="allowfromenv"
    name="allowfromenv">directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Allow from
    all|<em>host</em>|env=<em>env-variable</em>
    [<em>host</em>|env=<em>env-variable</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>The <code>Allow</code> directive affects which hosts can
    access an area of the server. Access can be controlled by
    hostname, IP Address, IP Address range, or by other
    characteristics of the client request captured in environment
    variables.</p>

    <p>The first argument to this directive is always
    <code>from</code>. The subsequent arguments can take three
    different forms. If <code>Allow from all</code> is specified,
    then all hosts are allowed access, subject to the configuration
    of the <code>Deny</code> and <code>Order</code> directives as
    discussed below. To allow only particular hosts or groups of
    hosts to access the server, the <em>host</em> can be specified
    in any of the following formats:</p>

    <dl>
      <dt>A (partial) domain-name</dt>

      <dd>Example: <code>Allow from apache.org</code><br />
       Hosts whose names match, or end in, this string are allowed
      access. Only complete components are matched, so the above
      example will match <code>foo.apache.org</code> but it will
      not match <code>fooapache.org</code>. This configuration will
      cause the server to perform a double reverse DNS lookup on the
      client IP address, regardless of the setting of the <a
      href="core.html#hostnamelookups">HostnameLookups</a>
      directive.  It will do a reverse DNS lookup on the IP address to
      find the associated hostname, and then do a forward lookup on
      the hostname to assure that it matches the original IP address.
      Only if the forward and reverse DNS are consistent and the
      hostname matches will access be allowed.</dd>

      <dt>A full IP address</dt>

      <dd>Example: <code>Allow from 10.1.2.3</code><br />
       An IP address of a host allowed access</dd>

      <dt>A partial IP address</dt>

      <dd>Example: <code>Allow from 10.1</code><br />
       The first 1 to 3 bytes of an IP address, for subnet
      restriction.</dd>

      <dt>A network/netmask pair</dt>

      <dd>Example: <code>Allow from
      10.1.0.0/255.255.0.0</code><br />
       A network a.b.c.d, and a netmask w.x.y.z. For more
      fine-grained subnet restriction. (Apache 1.3 and later)</dd>

      <dt>A network/nnn CIDR specification</dt>

      <dd>Example: <code>Allow from 10.1.0.0/16</code><br />
       Similar to the previous case, except the netmask consists of
      nnn high-order 1 bits. (Apache 1.3 and later)</dd>
    </dl>

    <p>Note that the last three examples above match exactly the
    same set of hosts.</p>

    <p>The third format of the arguments to the <code>Allow</code>
    directive allows access to the server to be controlled based on
    the existence of an <a href="../env.html">environment
    variable</a>. When <code>Allow from
    env=</code><em>env-variable</em> is specified, then the request
    is allowed access if the environment variable
    <em>env-variable</em> exists. The server provides the ability
    to set environment variables in a flexible way based on
    characteristics of the client request using the directives
    provided by <a href="mod_setenvif.html">mod_setenvif</a>.
    Therefore, this directive can be used to allow access based on
    such factors as the clients <code>User-Agent</code> (browser
    type), <code>Referer</code>, or other HTTP request header
    fields.</p>

    <p>Example:</p>

    <blockquote>
<pre>
SetEnvIf User-Agent ^KnockKnock/2.0 let_me_in
&lt;Directory /docroot&gt;
    Order Deny,Allow
    Deny from all
    Allow from env=let_me_in
&lt;/Directory&gt;
</pre>
    </blockquote>

    <p>In this case, browsers with a user-agent string beginning
    with <tt>KnockKnock/2.0</tt> will be allowed access, and all
    others will be denied.</p>

    <p>See also <a href="#deny">Deny</a>, <a
    href="#order">Order</a> and <a
    href="mod_setenvif.html#setenvif">SetEnvIf</a>.</p>
    <hr />

    <h2><a id="deny" name="deny">Deny</a> <a id="denyfromenv"
    name="denyfromenv">directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Deny from
    all|<em>host</em>|env=<em>env-variable</em>
    [<em>host</em>|env=<em>env-variable</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>This directive allows access to the server to be restricted
    based on hostname, IP address, or environment variables. The
    arguments for the <code>Deny</code> directive are identical to
    the arguments for the <a href="#allow">Allow</a> directive.</p>

    <p>See also <a href="#allow">Allow</a>, <a
    href="#order">Order</a> and <a
    href="mod_setenvif.html#setenvif">SetEnvIf</a>.</p>
    <hr />

    <h2><a id="order" name="order">Order directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Order
    <em>ordering</em><br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>Order
    Deny,Allow</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>The <code>Order</code> directive controls the default access
    state and the order in which <a href="#allow">Allow</a> and <a
    href="#deny">Deny</a> directives are evaluated.
    <em>Ordering</em> is one of</p>

    <dl>
      <dt>Deny,Allow</dt>

      <dd>The <code>Deny</code> directives are evaluated before the
      <code>Allow</code> directives. Access is allowed by default.
      Any client which does not match a <code>Deny</code> directive
      or does match an <code>Allow</code> directive will be allowed
      access to the server.</dd>

      <dt>Allow,Deny</dt>

      <dd>The <code>Allow</code> directives are evaluated before
      the <code>Deny</code> directives. Access is denied by
      default. Any client which does not match an
      <code>Allow</code> directive or does match a
      <code>Deny</code> directive will be denied access to the
      server.</dd>

      <dt>Mutual-failure</dt>

      <dd>Only those hosts which appear on the <code>Allow</code>
      list and do not appear on the <code>Deny</code> list are
      granted access. This ordering has the same effect as
      <code>Order Allow,Deny</code> and is deprecated in favor of
      that configuration.</dd>
    </dl>

    <p>Keywords may only be separated by a comma; no whitespace is
    allowed between them. Note that in all cases every
    <code>Allow</code> and <code>Deny</code> statement is
    evaluated.</p>

    <p>In the following example, all hosts in the apache.org domain
    are allowed access; all other hosts are denied access.</p>

    <blockquote>
      <code>Order Deny,Allow<br />
       Deny from all<br />
       Allow from apache.org<br />
      </code>
    </blockquote>

    <p>In the next example, all hosts in the apache.org domain are
    allowed access, except for the hosts which are in the
    foo.apache.org subdomain, who are denied access. All hosts not
    in the apache.org domain are denied access because the default
    state is to deny access to the server.</p>

    <blockquote>
      <code>Order Allow,Deny<br />
       Allow from apache.org<br />
       Deny from foo.apache.org<br />
      </code>
    </blockquote>

    <p>On the other hand, if the <code>Order</code> in the last
    example is changed to <code>Deny,Allow</code>, all hosts will
    be allowed access. This happens because, regardless of the
    actual ordering of the directives in the configuration file,
    the <code>Allow from apache.org</code> will be evaluated last
    and will override the <code>Deny from foo.apache.org</code>.
    All hosts not in the <code>apache.org</code> domain will also
    be allowed access because the default state will change to
    <em>allow</em>.</p>

    <p>The presence of an <code>Order</code> directive can affect
    access to a part of the server even in the absence of
    accompanying <code>Allow</code> and <code>Deny</code>
    directives because of its effect on the default access state.
    For example,</p>

    <blockquote>
      <code>&lt;Directory /www&gt;<br />
       &nbsp;&nbsp;Order Allow,Deny<br />
       &lt;/Directory&gt;</code>
    </blockquote>

    <p>will deny all access to the <code>/www</code> directory
    because the default access state will be set to
    <em>deny</em>.</p>

    <p>The <code>Order</code> directive controls the order of
    access directive processing only within each phase of the
    server's configuration processing. This implies, for example,
    that an <code>Allow</code> or <code>Deny</code> directive
    occurring in a &lt;Location&gt; section will always be
    evaluated after an <code>Allow</code> or <code>Deny</code>
    directive occurring in a &lt;Directory&gt; section or
    <code>.htaccess</code> file, regardless of the setting of the
    <code>Order</code> directive. For details on the merging of
    configuration sections, see the documentation on <a
    href="../sections.html">How Directory, Location and Files
    sections work</a>.</p>

    <p>See also: <a href="#deny">Deny</a> and <a
    href="#allow">Allow</a>.     <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

    </p>
  </body>
</html>



@


1.9
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.8
log
@remove pre-apache-1.3.26 cruft

Note for upgraders:
to actually see the current manual, you should do

find /var/www/htdocs/manual/ -type f -exec rm {} \;
cd /usr/src/usr.sbin/httpd/
make -f Makefile.bsd-wrapper distribution

you will also need a current httpd.conf, MultiViews need to be enabled in
/var/www/htdocs/manual/
@
text
@d1 354
@


1.7
log
@merge
@
text
@@


1.6
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@a0 346
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_access</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_access</h1>

    <p>This module provides access control based on client
    hostname, IP address, or other characteristics of the client
    request.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a> mod_access.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    access_module</p>

    <h2>Summary</h2>

    <p>The directives provided by mod_access are used in <code><a
    href="core.html#directory">&lt;Directory&gt;</a>, <a
    href="core.html#files">&lt;Files&gt;</a>,</code> and <code><a
    href="core.html#location">&lt;Location&gt;</a></code> sections
    as well as <code><a
    href="core.html#accessfilename">.htaccess</a></code> files to
    control access to particular parts of the server. Access can be
    controlled based on the client hostname, IP address, or other
    characteristics of the client request, as captured in <a
    href="../env.html">environment variables</a>. The
    <code>Allow</code> and <code>Deny</code> directives are used to
    specify which clients are or are not allowed access to the
    server, while the <code>Order</code> directive sets the default
    access state, and configures how the <code>Allow</code> and
    <code>Deny</code> directives interact with each other.</p>

    <p>Both host-based access restrictions and password-based
    authentication may be implemented simultaneously. In that case,
    the <a href="core.html#satsify">Satisfy</a> directive is used
    to determine how the two sets of restrictions interact.</p>

    <p>In general, access restriction directives apply to all
    access methods (<code>GET</code>, <code>PUT</code>,
    <code>POST</code>, etc). This is the desired behavior in most
    cases. However, it is possible to restrict some methods, while
    leaving other methods unrestricted, by enclosing the directives
    in a <a href="core.html#limit">&lt;Limit&gt;</a> section.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#allow">Allow</a></li>

      <li><a href="#deny">Deny</a></li>

      <li><a href="#order">Order</a></li>
    </ul>

    <p>See also <a href="core.html#satisfy">Satisfy</a> and <a
    href="core.html#require">Require</a>.</p>
    <hr />

    <h2><a id="allow" name="allow">Allow</a> <a id="allowfromenv"
    name="allowfromenv">directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Allow from
    all|<em>host</em>|env=<em>env-variable</em>
    [<em>host</em>|env=<em>env-variable</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>The <code>Allow</code> directive affects which hosts can
    access an area of the server. Access can be controlled by
    hostname, IP Address, IP Address range, or by other
    characteristics of the client request captured in environment
    variables.</p>

    <p>The first argument to this directive is always
    <code>from</code>. The subsequent arguments can take three
    different forms. If <code>Allow from all</code> is specified,
    then all hosts are allowed access, subject to the configuration
    of the <code>Deny</code> and <code>Order</code> directives as
    discussed below. To allow only particular hosts or groups of
    hosts to access the server, the <em>host</em> can be specified
    in any of the following formats:</p>

    <dl>
      <dt>A (partial) domain-name</dt>

      <dd>Example: <code>Allow from apache.org</code><br />
       Hosts whose names match, or end in, this string are allowed
      access. Only complete components are matched, so the above
      example will match <code>foo.apache.org</code> but it will
      not match <code>fooapache.org</code>. This configuration will
      cause the server to perform a reverse DNS lookup on the
      client IP address, regardless of the setting of the <a
      href="core.html#hostnamelookups">HostnameLookups</a>
      directive.</dd>

      <dt>A full IP address</dt>

      <dd>Example: <code>Allow from 10.1.2.3</code><br />
       An IP address of a host allowed access</dd>

      <dt>A partial IP address</dt>

      <dd>Example: <code>Allow from 10.1</code><br />
       The first 1 to 3 bytes of an IP address, for subnet
      restriction.</dd>

      <dt>A network/netmask pair</dt>

      <dd>Example: <code>Allow from
      10.1.0.0/255.255.0.0</code><br />
       A network a.b.c.d, and a netmask w.x.y.z. For more
      fine-grained subnet restriction. (Apache 1.3 and later)</dd>

      <dt>A network/nnn CIDR specification</dt>

      <dd>Example: <code>Allow from 10.1.0.0/16</code><br />
       Similar to the previous case, except the netmask consists of
      nnn high-order 1 bits. (Apache 1.3 and later)</dd>
    </dl>

    <p>Note that the last three examples above match exactly the
    same set of hosts.</p>

    <p>The third format of the arguments to the <code>Allow</code>
    directive allows access to the server to be controlled based on
    the existence of an <a href="../env.html">environment
    variable</a>. When <code>Allow from
    env=</code><em>env-variable</em> is specified, then the request
    is allowed access if the environment variable
    <em>env-variable</em> exists. The server provides the ability
    to set environment variables in a flexible way based on
    characteristics of the client request using the directives
    provided by <a href="mod_setenvif.html">mod_setenvif</a>.
    Therefore, this directive can be used to allow access based on
    such factors as the clients <code>User-Agent</code> (browser
    type), <code>Referer</code>, or other HTTP request header
    fields.</p>

    <p>Example:</p>

    <blockquote>
<pre>
SetEnvIf User-Agent ^KnockKnock/2.0 let_me_in
&lt;Directory /docroot&gt;
    Order Deny,Allow
    Deny from all
    Allow from env=let_me_in
&lt;/Directory&gt;
</pre>
    </blockquote>

    <p>In this case, browsers with a user-agent string beginning
    with <tt>KnockKnock/2.0</tt> will be allowed access, and all
    others will be denied.</p>

    <p>See also <a href="#deny">Deny</a>, <a
    href="#order">Order</a> and <a
    href="mod_setenvif.html#SetEnvIf">SetEnvIf</a>.</p>
    <hr />

    <h2><a id="deny" name="deny">Deny</a> <a id="denyfromenv"
    name="denyfromenv">directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Deny from
    all|<em>host</em>|env=<em>env-variable</em>
    [<em>host</em>|env=<em>env-variable</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>This directive allows access to the server to be restricted
    based on hostname, IP address, or environment variables. The
    arguments for the <code>Deny</code> directive are identical to
    the arguments for the <a href="#allow">Allow</a> directive.</p>

    <p>See also <a href="#allow">Allow</a>, <a
    href="#order">Order</a> and <a
    href="mod_setenvif.html#SetEnvIf">SetEnvIf</a>.</p>
    <hr />

    <h2><a id="order" name="order">Order directive</a></h2>

    <p>
     <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> Order
    <em>ordering</em><br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>Order
    Deny,Allow</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> directory,
    .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Limit<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_access</p>

    <p>The <code>Order</code> directive controls the default access
    state and the order in which <a href="#allow">Allow</a> and <a
    href="#deny">Deny</a> directives are evaluated.
    <em>Ordering</em> is one of</p>

    <dl>
      <dt>Deny,Allow</dt>

      <dd>The <code>Deny</code> directives are evaluated before the
      <code>Allow</code> directives. Access is allowed by default.
      Any client which does not match a <code>Deny</code> directive
      or does match an <code>Allow</code> directive will be allowed
      access to the server.</dd>

      <dt>Allow,Deny</dt>

      <dd>The <code>Allow</code> directives are evaluated before
      the <code>Deny</code> directives. Access is denied by
      default. Any client which does not match an
      <code>Allow</code> directive or does match a
      <code>Deny</code> directive will be denied access to the
      server.</dd>

      <dt>Mutual-failure</dt>

      <dd>Only those hosts which appear on the <code>Allow</code>
      list and do not appear on the <code>Deny</code> list are
      granted access. This ordering has the same effect as
      <code>Order Allow,Deny</code> and is deprecated in favor of
      that configuration.</dd>
    </dl>

    <p>Keywords may only be separated by a comma; no whitespace is
    allowed between them. Note that in all cases every
    <code>Allow</code> and <code>Deny</code> statement is
    evaluated.</p>

    <p>In the following example, all hosts in the apache.org domain
    are allowed access; all other hosts are denied access.</p>

    <blockquote>
      <code>Order Deny,Allow<br />
       Deny from all<br />
       Allow from apache.org<br />
      </code>
    </blockquote>

    <p>In the next example, all hosts in the apache.org domain are
    allowed access, except for the hosts which are in the
    foo.apache.org subdomain, who are denied access. All hosts not
    in the apache.org domain are denied access because the default
    state is to deny access to the server.</p>

    <blockquote>
      <code>Order Allow,Deny<br />
       Allow from apache.org<br />
       Deny from foo.apache.org<br />
      </code>
    </blockquote>

    <p>On the other hand, if the <code>Order</code> in the last
    example is changed to <code>Deny,Allow</code>, all hosts will
    be allowed access. This happens because, regardless of the
    actual ordering of the directives in the configuration file,
    the <code>Allow from apache.org</code> will be evaluated last
    and will override the <code>Deny from foo.apache.org</code>.
    All hosts not in the <code>apache.org</code> domain will also
    be allowed access because the default state will change to
    <em>allow</em>.</p>

    <p>The presence of an <code>Order</code> directive can affect
    access to a part of the server even in the absence of
    accompanying <code>Allow</code> and <code>Deny</code>
    directives because of its effect on the default access state.
    For example,</p>

    <blockquote>
      <code>&lt;Directory /www&gt;<br />
       &nbsp;&nbsp;Order Allow,Deny<br />
       &lt;/Directory&gt;</code>
    </blockquote>

    <p>will deny all access to the <code>/www</code> directory
    because the default access state will be set to
    <em>deny</em>.</p>

    <p>The <code>Order</code> directive controls the order of
    access directive processing only within each phase of the
    server's configuration processing. This implies, for example,
    that an <code>Allow</code> or <code>Deny</code> directive
    occurring in a &lt;Location&gt; section will always be
    evaluated after an <code>Allow</code> or <code>Deny</code>
    directive occurring in a &lt;Directory&gt; section or
    <code>.htaccess</code> file, regardless of the setting of the
    <code>Order</code> directive. For details on the merging of
    configuration sections, see the documentation on <a
    href="../sections.html">How Directory, Location and Files
    sections work</a>.</p>

    <p>See also: <a href="#deny">Deny</a> and <a
    href="#allow">Allow</a>.     <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

    </p>
  </body>
</html>

@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 171
a171 179
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache module mod_access</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>


<H1 ALIGN="CENTER">Module mod_access</H1>
<P>
This module provides access control based on client hostname, IP
address, or other characteristics of the client request.
</P>

<P><A
HREF="module-dict.html#Status"
REL="Help"
><STRONG>Status:</STRONG></A> Base
<BR>
<A
HREF="module-dict.html#SourceFile"
REL="Help"
><STRONG>Source File:</STRONG></A> mod_access.c
<BR>
<A
HREF="module-dict.html#ModuleIdentifier"
REL="Help"
><STRONG>Module Identifier:</STRONG></A> access_module
</P>

<h2>Summary</h2>

<p>The directives provided by mod_access are used in <CODE><A
HREF="core.html#directory">&lt;Directory&gt;</A>, <A
HREF="core.html#files">&lt;Files&gt;</A>,</code> and <code> <A
HREF="core.html#location">&lt;Location&gt;</A></code> sections as
well as <code><a
href="core.html#accessfilename">.htaccess</a></code> files
to control access to particular parts of the server.  Access
can be controlled based on the client hostname, IP address,
or other characteristics of the client request, as captured
in <a href="../env.html">environment variables</a>.  The
<code>Allow</code> and <code>Deny</code> directives are used
to specify which clients are or are not allowed access to the
server, while the <code>Order</code> directive sets the
default access state, and configures how the <code>Allow</code>
and <code>Deny</code> directives interact with each other.</p>

<p>Both host-based access restrictions and password-based
authentication may be implemented simultaneously.  In 
that case, the <a href="core.html#satsify">Satisfy</a> directive
is used to determine how the two sets of restrictions
interact.</p>

<p>In general, access restriction directives apply to all access
methods (<code>GET</code>, <code>PUT</code>, <code>POST</code>, etc).
This is the desired behavior in most cases.  However, it is possible
to restrict some methods, while leaving other methods unrestricted, by
enclosing the directives in a <a
href="core.html#limit">&lt;Limit&gt;</a> section.</p>

<H2>Directives</H2>

<UL>
<LI><A HREF="#allow">Allow</A>
<LI><A HREF="#deny">Deny</A>
<LI><A HREF="#order">Order</A>
</UL>

<P>See also <A HREF="core.html#satisfy">Satisfy</A>
    and <A HREF="core.html#require">Require</A>.

<HR>


<H2><A NAME="allow">Allow</a> <a name="allowfromenv">directive</A></H2>
<P>
<!--%plaintext &lt;?INDEX {\tt Allow} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> Allow from 
   all|<EM>host</em>|env=<em>variablename</em> 
   [<em>host</em>|env=<em>variablename</em>] ...<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>

<P>
The <code>Allow</code> directive affects which hosts can access an
area of the server.  Access can be controlled by hostname, IP Address,
IP Address range, or by other characteristics of the client 
request captured in environment variables.</p> 

<p>The first argument to this directive is always <code>from</code>.
The subsequent arguments can take three different forms.  If
<code>Allow from all</code> is specified, then all hosts are allowed
access, subject to the configuration of the <code>Deny</code> and
<code>Order</code> directives as discussed below.  To allow only
particular hosts or groups of hosts to access the server, the
<em>host</em> can be specified in any of the following formats:</p>
<DL>

<DT>A (partial) domain-name</dt> <dd>Example: <code>Allow from
apache.org</code><br> Hosts whose names match, or end in, this string
are allowed access.  Only complete components are matched, so the
above example will match <code>foo.apache.org</code> but it will not
match <code>fooapache.org</code>.  This configuration will cause the
server to perform a reverse DNS lookup on the client IP address,
regardless of the setting of the <a
href="core.html#hostnamelookups">HostNameLookups</a> directive.</dd>

<DT>A full IP address</dt>
<DD>Example: <code>Allow from 10.1.2.3</code><br>
An IP address of a host allowed access</dd>

<DT>A partial IP address</dt>
<dd>Example: <code>Allow from 10.1</code><br>
The first 1 to 3 bytes of an IP address, for subnet restriction.</dd>

<DT>A network/netmask pair</dt>
<dd>Example: <code>Allow from 10.1.0.0/255.255.0.0</code><br>
 A network a.b.c.d, and a netmask w.x.y.z.  For more fine-grained subnet
    restriction.  (Apache 1.3 and later)</dd>

<DT>A network/nnn CIDR specification</dt> <dd>Example: <code>Allow
from 10.1.0.0/16</code><br> Similar to the previous case, except the
netmask consists of nnn high-order 1 bits.  (Apache 1.3 and
later)</dd>
</DL>

<p>Note that the last three examples above match exactly the
same set of hosts.</p>

<p>The third format of the arguments to the <code>Allow</code>
directive allows access to the server to be controlled based on the
existence of an <a href="../env.html">environment variable</a>.  When
<code>Allow from env=</code><em>variablename</em> is specified, then
the request is allowed access if the environment variable
<em>variablename</em> exists.  The server provides the ability to set
environment variables in a flexible way based on characteristics of
the client request using the directives provided by <a
href="mod_setenvif.html">mod_setenvif</a>.  Therefore, this directive
can be used to allow access based on such factors as the clients
<code>User-Agent</code> (browser type), <code>Referer</code>, or other
HTTP request header fields.</P>

<P>
Example:
</P>
<BLOCKQUOTE><PRE>
d178 2
a179 170
</PRE></BLOCKQUOTE>

<p>In this case, browsers with a user-agent string beginning with
<TT>KnockKnock/2.0</TT> will be allowed access, and all others will be
denied.</p>
<P>
See also <a href="#deny">Deny</a>, <A HREF="#order">Order</A>
and <A HREF="mod_setenvif.html#SetEnvIf">SetEnvIf</A>.
</P>
<HR>

<H2><A NAME="deny">Deny</a> <a name="denyfromenv">directive</A></H2>
<P>
<!--%plaintext &lt;?INDEX {\tt Deny} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> Deny from 
   all|<EM>host</em>|env=<em>variablename</em> 
   [<em>host</em>|env=<em>variablename</em>] ...<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>

<p>This directive allows access to the server to be restricted based
on hostname, IP address, or environment variables.  The arguments for
the <code>Deny</code> directive are identical to the arguments for the
<a href="#allow">Allow</a> directive.</p>

<p>See also <a href="#allow">Allow</a>, <A HREF="#order">Order</A>
and <A HREF="mod_setenvif.html#SetEnvIf">SetEnvIf</A>.</p>
<HR>

<H2><A NAME="order">Order directive</A></H2>
<P>
<!--%plaintext &lt;?INDEX {\tt Order} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> Order <EM>ordering</EM><BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>Order Deny,Allow</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>
<P>
The <CODE>Order</CODE> directive controls the default access state and
the order in which <A HREF="#allow">Allow</A> and <A
HREF="#deny">Deny</A> directives are evaluated. <EM>Ordering</EM> is
one of
</P>
<DL>
<DT>Deny,Allow</dt> <DD>The <CODE>Deny</CODE> directives are evaluated
before the <CODE>Allow</CODE> directives.  Access is allowed
by default.  Any client which does not match a <code>Deny</code>
directive or does match an <code>Allow</code> directive will be
allowed access to the server.</dd>

<DT>Allow,Deny</dt> <DD>The <CODE>Allow</CODE> directives are
evaluated before the <CODE>Deny</CODE> directives.  Access is
denied by default.  Any client which does not match
an <code>Allow</code> directive or does match a <code>Deny</code>
directive will be denied access to the server.</dd>

<DT>Mutual-failure</dt> <DD>Only those hosts which appear on the
<CODE>Allow</CODE> list and do not appear on the <CODE>Deny</CODE>
list are granted access.  This ordering has the same effect as
<code>Order Allow,Deny</code> and is deprecated in favor of that
configuration.</dd>
</DL>

<P>Keywords may only be separated by a comma; no whitespace is allowed
between them.  Note that in all cases every <CODE>Allow</CODE>
and <CODE>Deny</CODE> statement is evaluated.</P>

<P>In the following example, all hosts in the apache.org domain are
allowed access; all other hosts are denied access.
</P>

<BLOCKQUOTE><CODE>
    Order Deny,Allow<BR>
    Deny from all<BR>
    Allow from apache.org<BR>
</CODE></BLOCKQUOTE>

<P>In the next example, all hosts in the apache.org domain are allowed
access, except for the hosts which are in the foo.apache.org
subdomain, who are denied access.  All hosts not in the apache.org
domain are denied access because the default state is to deny access
to the server.
</P>

<blockquote><code>
    Order Allow,Deny<br>
    Allow from apache.org<br>
    Deny from foo.apache.org<br>
</code></blockquote>

<p>On the other hand, if the <code>Order</code> in the last example is
changed to <code>Deny,Allow</code>, all hosts will be allowed access.
This happens because, regardless of the actual ordering of the
directives in the configuration file, the <code>Allow from
apache.org</code> will be evaluated last and will override the
<code>Deny from foo.apache.org</code>.  All hosts not in the
<code>apache.org</code> domain will also be allowed access because the
default state will change to <em>allow</em>.</p>

<p>The presence of an <code>Order</code> directive can
affect access to a part of the server even in the absence
of accompanying <code>Allow</code> and <code>Deny</code>
directives because of its effect on the default access state.
For example,</p>

<blockquote><code>
&lt;Directory /www&gt;<br>
&nbsp;&nbsp;Order Allow,Deny<br>
&lt;/Directory&gt;
</code></blockquote>

<p>will deny all access to the <code>/www</code> directory because
the default access state will be set to <em>deny</em>.</p>

<p>The <code>Order</code> directive controls the order of access
directive processing only within each phase of the server's
configuration processing.  This implies, for example, that an
<code>Allow</code> or <code>Deny</code> directive occurring
in a &lt;Location&gt; section will always be evaluated after
an <code>Allow</code> or <code>Deny</code> directive occurring
in a &lt;Directory&gt; section or <code>.htaccess</code> file,
regardless of the setting of the <code>Order</code> directive.
For details on the merging of configuration sections,
see the documentation on <a href="../sections.html">How Directory,
Location and Files sections work</a>.</p>

<P>See also: <A HREF="#deny">Deny</A> and <A HREF="#allow">Allow</A>.
<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
d181 165
a345 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a346 2
</BODY>
</HTML>
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d25 2
a26 2
This module provides access control based on client hostname or IP
address.
d45 30
a79 1
<LI><A HREF="#allowfromenv">Allow from env=</A>
a80 1
<LI><A HREF="#denyfromenv">Deny from env=</A>
d90 1
a90 1
<H2><A NAME="allow">Allow directive</A></H2>
d96 3
a98 1
><STRONG>Syntax:</STRONG></A> Allow from <EM>host host ...</EM><BR>
d116 1
d118 12
a129 3
The Allow directive affects which hosts can access a given directory.
<EM>Host</EM> is one of the following:
</P>
d131 27
a157 14
<DT><CODE>all</CODE>
<DD>All hosts are allowed access
<DT>A (partial) domain-name
<DD>Hosts whose names match, or end in, this string are allowed access.
<DT>A full IP address
<DD>An IP address of a host allowed access
<DT>A partial IP address
<DD>The first 1 to 3 bytes of an IP address, for subnet restriction.
<DT>A network/netmask pair (<STRONG>Apache 1.3 and later</STRONG>)
<DD>A network a.b.c.d, and a netmask w.x.y.z.  For more fine-grained subnet
    restriction.  (<EM>i.e.</EM>, 10.1.0.0/255.255.0.0)
<DT>A network/nnn CIDR specification (<STRONG>Apache 1.3 and later</STRONG>)
<DD>Similar to the previous case, except the netmask consists of nnn 
    high-order 1 bits.  (<EM>i.e.</EM>, 10.1.0.0/16 is the same as 10.1.0.0/255.255.0.0)
a158 15
<P>
Example:
</P>
<BLOCKQUOTE><CODE>Allow from .ncsa.uiuc.edu</CODE></BLOCKQUOTE>
<P>
All hosts in the specified domain are allowed access.
</P>
<P>
Note that this compares whole components; <CODE>bar.edu</CODE>
would not match <CODE>foobar.edu</CODE>.
</P>
<P>
See also <A HREF="#allowfromenv">Allow from env=</A>, <A
HREF="#deny">Deny</A> and <A HREF="#order">Order</A>.
</P>
d160 2
a161 1
<HR>
d163 12
a174 1
<H2><A NAME="allowfromenv">Allow from env= directive</A></H2>
a176 28
<STRONG>Syntax:</STRONG> Allow from
 env=<EM>variablename</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above
</P>
<P>
The <CODE>Allow from env</CODE> directive controls access to a directory by the
existence (or non-existence) of an environment variable.
</P>
<P>
d187 4
a190 2
In this case browsers with the user-agent string <TT>KnockKnock/2.0</TT> will
be allowed access, and all others will be denied.
d192 1
a192 1
See also <A HREF="#denyfromenv">Deny from env=</A>, <A HREF="#order">Order</A>
d197 1
a197 1
<H2><A NAME="deny">Deny directive</A></H2>
d203 3
a205 1
><STRONG>Syntax:</STRONG></A> Deny from <EM>host host ...</EM><BR>
a222 37
<P>
The <CODE>Deny</CODE> directive affects which hosts can access a given directory.
<EM>Host</EM> is one of the following:
</P>
<DL>
<DT><CODE>all</CODE>
<DD>all hosts are denied access
<DT>A (partial) domain-name
<DD>host whose name is, or ends in, this string are denied access.
<DT>A full IP address
<DD>An IP address of a host denied access
<DT>A partial IP address
<DD>The first 1 to 3 bytes of an IP address, for subnet restriction.
<DT>A network/netmask pair (<STRONG>Apache 1.3 and later</STRONG>)
<DD>A network a.b.c.d, and a netmask w.x.y.z.  For more fine-grained subnet
    restriction.  (<EM>i.e.</EM>, 10.1.0.0/255.255.0.0)
<DT>A network/nnn CIDR specification (<STRONG>Apache 1.3 and later</STRONG>)
<DD>Similar to the previous case, except the netmask consists of nnn 
    high-order 1 bits.  (<EM>i.e.</EM>, 10.1.0.0/16 is the same as 10.1.0.0/255.255.0.0)
</DL>
<P>
Example:
</P>
<BLOCKQUOTE><CODE>Deny from 16</CODE></BLOCKQUOTE>
<P>
All hosts in the specified network are denied access.
</P>
<P>
Note that this compares whole components; <CODE>bar.edu</CODE>
would not match <CODE>foobar.edu</CODE>.
</P>
<P>
See also <A HREF="#denyfromenv">Deny from env=</A>, <A
HREF="#allow">Allow</A> and <A HREF="#order">Order</A>.
</P>

<HR>
d224 4
a227 1
<H2><A NAME="denfromenv">Deny from env= directive</A></H2>
d229 2
a230 47
<P>
<STRONG>Syntax:</STRONG> Deny from
 env=<EM>variablename</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above
</P>
<P>
The <CODE>Deny from env</CODE> directive controls access to a directory by the
existence (or non-existence) of an environment variable.
</P>
<P>
Example:
</P>
<BLOCKQUOTE><PRE>
SetEnvIf User-Agent ^BadRobot/0.9 go_away
&lt;Directory /docroot&gt;
    Order Allow,Deny
    Allow from all
    Deny from env=go_away
&lt;/Directory&gt;
</PRE></BLOCKQUOTE>
In this case browsers with the user-agent string <TT>BadRobot/0.9</TT> will
be denied access, and all others will be allowed.

<P>
See also <A HREF="#allowfromenv">Allow from env=</A>, <A
HREF="#order">Order</A> and <A
HREF="mod_setenvif.html#SetEnvIf">SetEnvIf</A>.
</P>
d262 4
a265 4
The <CODE>Order</CODE> directive controls the order in which 
<A HREF="#allow">Allow</A> and <A HREF="#deny">Deny</A> directives are
evaluated. <EM>Ordering</EM> is one
of
d268 17
a284 11
<DT>Deny,Allow
<DD>the <CODE>Deny</CODE> directives are evaluated before the <CODE>Allow</CODE>
directives.  (The initial state is OK.)
<DT>Allow,Deny
<DD>the <CODE>Allow</CODE> directives are evaluated before the <CODE>Deny</CODE>
directives.  (The initial state is FORBIDDEN.)
<DT>Mutual-failure
<DD>Only those hosts which appear on the <CODE>Allow</CODE> list and do not
appear on the <CODE>Deny</CODE> list are granted access.  (The initial state is
irrelevant.)  This ordering has the same effect as <code>Order Allow,Deny</code>
and is deprecated in favor of that configuration.
d286 7
a292 8
<P>
Keywords may only be separated by a comma; no whitespace is allowed between
them.
<STRONG>Note that in all cases every <CODE>Allow</CODE> and <CODE>Deny</CODE>
statement is evaluated, there is no &quot;short-circuiting&quot;.</STRONG>
</P>
<P>
Example:
d294 1
d298 1
a298 1
    Allow from .ncsa.uiuc.edu<BR>
d300 49
a348 4
<P>
Hosts in the ncsa.uiuc.edu domain are allowed access; all other hosts are
denied access.
</P>
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d25 2
a26 3
This module is contained in the <CODE>mod_access.c</CODE> file, and
is compiled in by default. It provides access control based on client
hostname or IP address.
d29 19
d49 5
a53 5
<LI><A HREF="#allow">allow</A>
<LI><A HREF="#allowfromenv">allow from env=</A>
<LI><A HREF="#deny">deny</A>
<LI><A HREF="#denyfromenv">deny from env=</A>
<LI><A HREF="#order">order</A>
d55 4
a58 4
<DL>
<DD>See also <A HREF="core.html#satisfy">Satisfy</A>
    and <A HREF="core.html#require">require</A>.
</DL>
d62 1
a62 1
<H2><A NAME="allow">allow directive</A></H2>
d64 1
a64 1
<!--%plaintext &lt;?INDEX {\tt allow} directive&gt; -->
d68 1
a68 1
><STRONG>Syntax:</STRONG></A> allow from <EM>host host ...</EM><BR>
d87 1
a87 1
The allow directive affects which hosts can access a given directory.
d109 1
a109 1
<BLOCKQUOTE><CODE>allow from .ncsa.uiuc.edu</CODE></BLOCKQUOTE>
d118 2
a119 2
See also <A HREF="#deny">deny</A>, <A HREF="#order">order</A>, and
<A HREF="mod_browser.html#browsermatch">BrowserMatch</A>.
d122 4
d127 2
a128 2
<A NAME="allowfromenv"><STRONG>Syntax:</STRONG> allow from
 env=<EM>variablename</EM></A><BR>
d151 1
a151 1
The allow from env directive controls access to a directory by the
d158 1
a158 1
BrowserMatch ^KnockKnock/2.0 let_me_in
d160 3
a162 3
    order deny,allow
    deny from all
    allow from env=let_me_in
d168 2
a169 2
See also <A HREF="#denyfromenv">deny from env</A>
and <A HREF="#order">order</A>.
d173 1
a173 1
<H2><A NAME="deny">deny directive</A></H2>
d175 1
a175 1
<!--%plaintext &lt;?INDEX {\tt deny} directive&gt; -->
d179 1
a179 1
><STRONG>Syntax:</STRONG></A> deny from <EM>host host ...</EM><BR>
d198 1
a198 1
The deny directive affects which hosts can access a given directory.
d220 1
a220 1
<BLOCKQUOTE><CODE>deny from 16</CODE></BLOCKQUOTE>
d229 2
a230 1
See also <A HREF="#allow">allow</A> and <A HREF="#order">order</A>.
d233 4
d238 2
a239 2
<A NAME="denyfromenv"><STRONG>Syntax:</STRONG> deny from
 env=<EM>variablename</EM></A><BR>
d262 1
a262 1
The deny from env directive controls access to a directory by the
d269 1
a269 1
BrowserMatch ^BadRobot/0.9 go_away
d271 3
a273 3
    order allow,deny
    allow from all
    deny from env=go_away
d280 3
a282 2
See also <A HREF="#allowfromenv">allow from env</A>
and <A HREF="#order">order</A>.
d286 1
a286 1
<H2><A NAME="order">order directive</A></H2>
d288 1
a288 1
<!--%plaintext &lt;?INDEX {\tt order} directive&gt; -->
d292 1
a292 1
><STRONG>Syntax:</STRONG></A> order <EM>ordering</EM><BR>
d296 1
a296 1
><STRONG>Default:</STRONG></A> <CODE>order deny,allow</CODE><BR>
d315 3
a317 2
The order directive controls the order in which <A HREF="#allow">allow</A> and
<A HREF="#deny">deny</A> directives are evaluated. <EM>Ordering</EM> is one
d321 11
a331 9
<DT>deny,allow
<DD>the deny directives are evaluated before the allow directives.  (The
initial state is OK.)
<DT>allow,deny
<DD>the allow directives are evaluated before the deny directives.  (The
initial state is FORBIDDEN.)
<DT>mutual-failure
<DD>Only those hosts which appear on the allow list and do not appear
on the deny list are granted access.  (The initial state is irrelevant.)
d336 1
a336 1
<STRONG>Note that in all cases every <CODE>allow</CODE> and <CODE>deny</CODE>
d343 3
a345 3
    order deny,allow<BR>
    deny from all<BR>
    allow from .ncsa.uiuc.edu<BR>
d351 2
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d37 4
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d23 3
a25 3
<H1 ALIGN="CENTER">Module mod_access</h1>

This module is contained in the <code>mod_access.c</code> file, and
d28 1
d30 8
a37 9

<menu>
<li><A HREF="#allow">allow</A>
<li><A HREF="#allowfromenv">allow from env=</A>
<li><A HREF="#deny">deny</A>
<li><A HREF="#denyfromenv">deny from env=</A>
<li><A HREF="#order">order</A>
</menu>
<hr>
d40 2
a41 1
<A name="allow"><h2>allow</h2></A>
d43 22
a64 6
<strong>Syntax:</strong> allow from <em>host host ...</em><br>
<Strong>Context:</strong> directory, .htaccess<br>
<Strong>Override:</strong> Limit<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_access<p>

d66 30
a95 18
<em>Host</em> is one of the following:
<dl>
<dt><code>all</code>
<dd>all hosts are allowed access
<dt>A (partial) domain-name
<dd>host whose name is, or ends in, this string are allowed access.
<dt>A full IP address
<dd>An IP address of a host allowed access
<dt>A partial IP address
<dd>The first 1 to 3 bytes of an IP address, for subnet restriction.
</dl>

Example:<blockquote><code>allow from .ncsa.uiuc.edu</code></blockquote>
All hosts in the specified domain are allowed access.<p>

Note that this compares whole components; <code>bar.edu</code>
would not match <code>foobar.edu</code>.<p>

d97 2
a98 8
<a href="mod_browser.html#browsermatch">BrowserMatch</a>.<p>

<a name="allowfromenv"><strong>Syntax:</strong> allow from env=<em>variablename</em></a><br>
<Strong>Context:</strong> directory, .htaccess<br>
<Strong>Override:</strong> Limit<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_access<br>
<strong>Compatibility:</strong> Apache 1.2 and above<p>
d100 25
d127 5
a131 2

Example:<blockquote><pre>
d134 3
a136 3
order allow,deny
allow from env=let_me_in
deny from all
d138 4
a141 2
</pre></blockquote>

d143 3
a145 1
and <A HREF="#order">order</A>.<p><hr>
d147 2
a148 1
<A name="deny"><h2>deny</h2></A>
d150 22
a171 6
<strong>Syntax:</strong> deny from <em>host host ...</em><br>
<Strong>Context:</strong> directory, .htaccess<br>
<Strong>Override:</strong> Limit<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_access<p>

d173 58
a230 27
<em>Host</em> is one of the following:
<dl>
<dt><code>all</code>
<dd>all hosts are denied access
<dt>A (partial) domain-name
<dd>host whose name is, or ends in, this string are denied access.
<dt>A full IP address
<dd>An IP address of a host denied access
<dt>A partial IP address
<dd>The first 1 to 3 bytes of an IP address, for subnet restriction.
</dl>

Example:<blockquote><code>deny from 16</code></blockquote>
All hosts in the specified network are denied access.<p>

Note that this compares whole components; <code>bar.edu</code>
would not match <code>foobar.edu</code>.<p>

See also <A HREF="#allow">allow</A> and <A HREF="#order">order</A>.<p>

<a name="denyfromenv"><strong>Syntax:</strong> deny from env=<em>variablename</em></a><br>
<Strong>Context:</strong> directory, .htaccess<br>
<Strong>Override:</strong> Limit<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_access<br>
<strong>Compatibility:</strong> Apache 1.2 and above<p>

d233 5
a237 2

Example:<blockquote><pre>
d240 3
a242 3
order deny,allow
deny from env=go_away
allow from all
d244 3
a246 1
</pre></blockquote>
d248 1
d250 3
a252 1
and <A HREF="#order">order</A>.<p><hr>
d254 2
a255 1
<A name="order"><h2>order</h2></A>
d257 26
a282 7
<strong>Syntax:</strong> order <em>ordering</em><br>
<strong>Default:</strong> <code>order deny,allow</code><br>
<strong>Context:</strong> directory, .htaccess<br>
<strong>Override:</strong> Limit<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_access<p>

d284 1
a284 1
<A HREF="#deny">deny</A> directives are evaluated. <em>Ordering</em> is one
d286 4
a289 3
<dl>
<dt>deny,allow
<dd>the deny directives are evaluated before the allow directives.  (The
d291 2
a292 2
<dt>allow,deny
<dd>the allow directives are evaluated before the deny directives.  (The
d294 2
a295 2
<dt>mutual-failure
<dd>Only those hosts which appear on the allow list and do not appear
d297 16
a312 11
</dl>

Note that in all cases every <code>allow</code> and <code>deny</code>
statement is evaluated, there is no &quot;short-circuiting&quot;.

<p>Example:
<blockquote><code>
order deny,allow<br>
deny from all<br>
allow from .ncsa.uiuc.edu<br>
</code></blockquote>
d315 2
a317 1
<HR>
d319 1
a319 1
 Apache HTTP Server Version 1.2
a326 1

@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d23 3
a25 3
<H1 ALIGN="CENTER">Module mod_access</H1>
<P>
This module is contained in the <CODE>mod_access.c</CODE> file, and
a27 1
</P>
d29 9
a37 8
<UL>
<LI><A HREF="#allow">allow</A>
<LI><A HREF="#allowfromenv">allow from env=</A>
<LI><A HREF="#deny">deny</A>
<LI><A HREF="#denyfromenv">deny from env=</A>
<LI><A HREF="#order">order</A>
</UL>
<HR>
d40 1
a40 2
<H2><A NAME="allow">allow directive</A></H2>
<P>
d42 6
a47 22
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> allow from <EM>host host ...</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>
<P>
d49 18
a66 30
<EM>Host</EM> is one of the following:
</P>
<DL>
<DT><CODE>all</CODE>
<DD>All hosts are allowed access
<DT>A (partial) domain-name
<DD>Hosts whose names match, or end in, this string are allowed access.
<DT>A full IP address
<DD>An IP address of a host allowed access
<DT>A partial IP address
<DD>The first 1 to 3 bytes of an IP address, for subnet restriction.
<DT>A network/netmask pair (<STRONG>Apache 1.3 and later</STRONG>)
<DD>A network a.b.c.d, and a netmask w.x.y.z.  For more fine-grained subnet
    restriction.  (<EM>i.e.</EM>, 10.1.0.0/255.255.0.0)
<DT>A network/nnn CIDR specification (<STRONG>Apache 1.3 and later</STRONG>)
<DD>Similar to the previous case, except the netmask consists of nnn 
    high-order 1 bits.  (<EM>i.e.</EM>, 10.1.0.0/16 is the same as 10.1.0.0/255.255.0.0)
</DL>
<P>
Example:
</P>
<BLOCKQUOTE><CODE>allow from .ncsa.uiuc.edu</CODE></BLOCKQUOTE>
<P>
All hosts in the specified domain are allowed access.
</P>
<P>
Note that this compares whole components; <CODE>bar.edu</CODE>
would not match <CODE>foobar.edu</CODE>.
</P>
<P>
d68 8
a75 2
<A HREF="mod_browser.html#browsermatch">BrowserMatch</A>.
</P>
a76 25
<P>
<A NAME="allowfromenv"><STRONG>Syntax:</STRONG> allow from
 env=<EM>variablename</EM></A><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above
</P>
<P>
d79 2
a80 5
</P>
<P>
Example:
</P>
<BLOCKQUOTE><PRE>
d83 3
a85 3
    order deny,allow
    deny from all
    allow from env=let_me_in
d87 2
a88 4
</PRE></BLOCKQUOTE>
In this case browsers with the user-agent string <TT>KnockKnock/2.0</TT> will
be allowed access, and all others will be denied.
<P>
d90 1
a90 3
and <A HREF="#order">order</A>.
</P>
<HR>
d92 1
a92 2
<H2><A NAME="deny">deny directive</A></H2>
<P>
d94 6
a99 22
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> deny from <EM>host host ...</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>
<P>
d101 27
a127 58
<EM>Host</EM> is one of the following:
</P>
<DL>
<DT><CODE>all</CODE>
<DD>all hosts are denied access
<DT>A (partial) domain-name
<DD>host whose name is, or ends in, this string are denied access.
<DT>A full IP address
<DD>An IP address of a host denied access
<DT>A partial IP address
<DD>The first 1 to 3 bytes of an IP address, for subnet restriction.
<DT>A network/netmask pair (<STRONG>Apache 1.3 and later</STRONG>)
<DD>A network a.b.c.d, and a netmask w.x.y.z.  For more fine-grained subnet
    restriction.  (<EM>i.e.</EM>, 10.1.0.0/255.255.0.0)
<DT>A network/nnn CIDR specification (<STRONG>Apache 1.3 and later</STRONG>)
<DD>Similar to the previous case, except the netmask consists of nnn 
    high-order 1 bits.  (<EM>i.e.</EM>, 10.1.0.0/16 is the same as 10.1.0.0/255.255.0.0)
</DL>
<P>
Example:
</P>
<BLOCKQUOTE><CODE>deny from 16</CODE></BLOCKQUOTE>
<P>
All hosts in the specified network are denied access.
</P>
<P>
Note that this compares whole components; <CODE>bar.edu</CODE>
would not match <CODE>foobar.edu</CODE>.
</P>
<P>
See also <A HREF="#allow">allow</A> and <A HREF="#order">order</A>.
</P>

<P>
<A NAME="denyfromenv"><STRONG>Syntax:</STRONG> deny from
 env=<EM>variablename</EM></A><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access<BR>
<A
 HREF="directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above
</P>
<P>
d130 2
a131 5
</P>
<P>
Example:
</P>
<BLOCKQUOTE><PRE>
d134 3
a136 3
    order allow,deny
    allow from all
    deny from env=go_away
d138 1
a138 3
</PRE></BLOCKQUOTE>
In this case browsers with the user-agent string <TT>BadRobot/0.9</TT> will
be denied access, and all others will be allowed.
a139 1
<P>
d141 1
a141 3
and <A HREF="#order">order</A>.
</P>
<HR>
d143 1
a143 2
<H2><A NAME="order">order directive</A></H2>
<P>
d145 7
a151 26
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> order <EM>ordering</EM><BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>order deny,allow</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Limit<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_access
</P>
<P>
d153 1
a153 1
<A HREF="#deny">deny</A> directives are evaluated. <EM>Ordering</EM> is one
d155 3
a157 4
</P>
<DL>
<DT>deny,allow
<DD>the deny directives are evaluated before the allow directives.  (The
d159 2
a160 2
<DT>allow,deny
<DD>the allow directives are evaluated before the deny directives.  (The
d162 2
a163 2
<DT>mutual-failure
<DD>Only those hosts which appear on the allow list and do not appear
d165 11
a175 14
</DL>
<P>
<STRONG>Note that in all cases every <CODE>allow</CODE> and <CODE>deny</CODE>
statement is evaluated, there is no &quot;short-circuiting&quot;.</STRONG>
</P>
<P>
Example:
</P>
<BLOCKQUOTE><CODE>
    order deny,allow<BR>
    deny from all<BR>
    allow from .ncsa.uiuc.edu<BR>
</CODE></BLOCKQUOTE>
<P>
d178 1
a178 1
</P>
a179 1

d181 1
a181 1
 Apache HTTP Server Version 1.3
d189 1
@

