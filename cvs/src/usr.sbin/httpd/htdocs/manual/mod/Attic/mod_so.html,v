head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.38
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.34
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.32
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.30
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.28
	OPENBSD_5_0:1.8.0.26
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2005.07.29.23.55.40;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.20.00.16.21;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2002.07.19.21.31.14;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.48;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.29.10.21.33;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.22.17.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.07;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.20.07;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.20.07;	author beck;	state Exp;
branches;
next	;


desc
@@


1.9
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_so</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_so</h1>

    <p>This module provides for loading of executable code and
    modules into the server at start-up or restart time.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base (Windows);
    Experimental (Unix)<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a> mod_so.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    so_module<br />
     <a href="module-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Available in
    Apache 1.3 and later.</p>

    <h2>Summary</h2>

    <p>This is an experimental module. On selected operating
    systems it can be used to load modules into Apache at runtime
    via the <a href="../dso.html">Dynamic Shared Object</a> (DSO)
    mechanism, rather than requiring a recompilation.</p>

    <p>On Unix, the loaded code typically comes from shared object
    files (usually with <samp>.so</samp> extension), whilst on
    Windows this module loads <samp>DLL</samp> files. This module
    is only available in Apache 1.3 and up.</p>

    <p>In previous releases, the functionality of this module was
    provided for Unix by mod_dld, and for Windows by mod_dll. On
    Windows, mod_dll was used in beta release 1.3b1 through 1.3b5.
    mod_so combines these two modules into a single module for all
    operating systems.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#loadfile">LoadFile</a></li>

      <li><a href="#loadmodule">LoadModule</a></li>
    </ul>

    <h2><a id="creating" name="creating">Creating DLL Modules for
    Windows</a></h2>

    <p>The Apache module API is unchanged between the Unix and
    Windows versions. Many modules will run on Windows with no or
    little change from Unix, although others rely on aspects of the
    Unix architecture which are not present in Windows, and will
    not work.</p>

    <p>When a module does work, it can be added to the server in
    one of two ways. As with Unix, it can be compiled into the
    server. Because Apache for Windows does not have the
    <code>Configure</code> program of Apache for Unix, the module's
    source file must be added to the ApacheCore project file, and
    its symbols must be added to the
    <code>os\win32\modules.c</code> file.</p>

    <p>The second way is to compile the module as a DLL, a shared
    library that can be loaded into the server at runtime, using
    the <code><a href="#loadmodule">LoadModule</a></code>
    directive. These module DLLs can be distributed and run on any
    Apache for Windows installation, without recompilation of the
    server.</p>

    <p>To create a module DLL, a small change is necessary to the
    module's source file: The module record must be exported from
    the DLL (which will be created later; see below). To do this,
    add the <code>MODULE_VAR_EXPORT</code> (defined in the Apache
    header files) to your module's module record definition. For
    example, if your module has:</p>
<pre>
    module foo_module;
</pre>

    <p>Replace the above with:</p>
<pre>
    module MODULE_VAR_EXPORT foo_module;
</pre>

    <p>Note that this will only be activated on Windows, so the
    module can continue to be used, unchanged, with Unix if needed.
    Also, if you are familiar with <code>.DEF</code> files, you can
    export the module record with that method instead.</p>

    <p>Now, create a DLL containing your module. You will need to
    link this against the ApacheCore.lib export library that is
    created when the ApacheCore.dll shared library is compiled. You
    may also have to change the compiler settings to ensure that
    the Apache header files are correctly located.</p>

    <p>This should create a DLL version of your module. Now simply
    place it in the <samp>modules</samp> directory of your server
    root, and use the <code><a
    href="#loadmodule">LoadModule</a></code> directive to load
    it.</p>
    <hr />

    <h2><a id="loadfile" name="loadfile">LoadFile</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LoadFile
    <em>filename</em> [<em>filename</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_so 

    <p>The LoadFile directive links in the named object files or
    libraries when the server is started or restarted; this is used
    to load additional code which may be required for some module
    to work. <em>Filename</em> is either an absolute path or
    relative to <a href="core.html#serverroot">ServerRoot</a>.</p>

    <p>For example:</p>
    <code>LoadFile libexec/libxmlparse.so</code>

    <hr />

    <h2><a id="loadmodule" name="loadmodule">LoadModule</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LoadModule <em>module
    filename</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_so 

    <p>The LoadModule directive links in the object file or library
    <em>filename</em> and adds the module structure named
    <em>module</em> to the list of active modules. <em>Module</em>
    is the name of the external variable of type
    <code>module</code> in the file, and is listed as the <a
    href="module-dict.html#ModuleIdentifier">Module Identifier</a>
    in the module documentation. Example (Unix, and for Windows as
    of Apache 1.3.15):</p>

    <blockquote>
      <code>LoadModule status_module modules/mod_status.so</code>
    </blockquote>

    <p>Example (Windows prior to Apache 1.3.15, and some 3rd party
    modules):</p>

    <blockquote>
      <code>LoadModule foo_module modules/ApacheModuleFoo.dll<br />
      </code>
    </blockquote>

    <p><strong>Note that all modules bundled with the Apache Win32
    binary distribution were renamed as of Apache version
    1.3.15</strong>.</p>

    <p>Win32 Apache modules are often distributed with the old
    style names, or even a name such as libfoo.dll. Whatever the
    name of the module, the LoadModule directive requires the exact
    filename, no assumption is made about the filename
    extension.</p>

    <p><strong>See also</strong>: <a
    href="core.html#addmodule">AddModule</a> and <a
    href="core.html#clearmodulelist">ClearModuleList</a></p>
 
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>



@


1.8
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.7
log
@remove pre-apache-1.3.26 cruft

Note for upgraders:
to actually see the current manual, you should do

find /var/www/htdocs/manual/ -type f -exec rm {} \;
cd /usr/src/usr.sbin/httpd/
make -f Makefile.bsd-wrapper distribution

you will also need a current httpd.conf, MultiViews need to be enabled in
/var/www/htdocs/manual/
@
text
@d1 205
@


1.6
log
@merge
@
text
@@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@a0 192
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_so</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_so</h1>

    <p>This module provides for loading of executable code and
    modules into the server at start-up or restart time.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base (Windows);
    Experimental (Unix)<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a> mod_so.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    so_module<br />
     <a href="module-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Available in
    Apache 1.3 and later.</p>

    <h2>Summary</h2>

    <p>This is an experimental module. On selected operating
    systems it can be used to load modules into Apache at runtime
    via the <a href="../dso.html">Dynamic Shared Object</a> (DSO)
    mechanism, rather than requiring a recompilation.</p>

    <p>On Unix, the loaded code typically comes from shared object
    files (usually with <samp>.so</samp> extension), whilst on
    Windows this module loads <samp>DLL</samp> files. This module
    is only available in Apache 1.3 and up.</p>

    <p>In previous releases, the functionality of this module was
    provided for Unix by mod_dld, and for Windows by mod_dll. On
    Windows, mod_dll was used in beta release 1.3b1 through 1.3b5.
    mod_so combines these two modules into a single module for all
    operating systems.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#loadfile">LoadFile</a></li>

      <li><a href="#loadmodule">LoadModule</a></li>
    </ul>

    <h2><a id="creating" name="creating">Creating DLL Modules for
    Windows</a></h2>

    <p>The Apache module API is unchanged between the Unix and
    Windows versions. Many modules will run on Windows with no or
    little change from Unix, although others rely on aspects of the
    Unix architecture which are not present in Windows, and will
    not work.</p>

    <p>When a module does work, it can be added to the server in
    one of two ways. As with Unix, it can be compiled into the
    server. Because Apache for Windows does not have the
    <code>Configure</code> program of Apache for Unix, the module's
    source file must be added to the ApacheCore project file, and
    its symbols must be added to the
    <code>os\win32\modules.c</code> file.</p>

    <p>The second way is to compile the module as a DLL, a shared
    library that can be loaded into the server at runtime, using
    the <code><a href="#loadmodule">LoadModule</a></code>
    directive. These module DLLs can be distributed and run on any
    Apache for Windows installation, without recompilation of the
    server.</p>

    <p>To create a module DLL, a small change is necessary to the
    module's source file: The module record must be exported from
    the DLL (which will be created later; see below). To do this,
    add the <code>MODULE_VAR_EXPORT</code> (defined in the Apache
    header files) to your module's module record definition. For
    example, if your module has:</p>
<pre>
    module foo_module;
</pre>

    <p>Replace the above with:</p>
<pre>
    module MODULE_VAR_EXPORT foo_module;
</pre>

    <p>Note that this will only be activated on Windows, so the
    module can continue to be used, unchanged, with Unix if needed.
    Also, if you are familiar with <code>.DEF</code> files, you can
    export the module record with that method instead.</p>

    <p>Now, create a DLL containing your module. You will need to
    link this against the ApacheCore.lib export library that is
    created when the ApacheCore.dll shared library is compiled. You
    may also have to change the compiler settings to ensure that
    the Apache header files are correctly located.</p>

    <p>This should create a DLL version of your module. Now simply
    place it in the <samp>modules</samp> directory of your server
    root, and use the <code><a
    href="#loadmodule">LoadModule</a></code> directive to load
    it.</p>
    <hr />

    <h2><a id="loadfile" name="loadfile">LoadFile</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LoadFile
    <em>filename</em> [<em>filename</em>] ...<br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_so 

    <p>The LoadFile directive links in the named object files or
    libraries when the server is started or restarted; this is used
    to load additional code which may be required for some module
    to work. <em>Filename</em> is either an absolute path or
    relative to <a href="core.html#serverroot">ServerRoot</a>.</p>
    <hr />

    <h2><a id="loadmodule" name="loadmodule">LoadModule</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> LoadModule <em>module
    filename</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_so 

    <p>The LoadModule directive links in the object file or library
    <em>filename</em> and adds the module structure named
    <em>module</em> to the list of active modules. <em>Module</em>
    is the name of the external variable of type
    <code>module</code> in the file, and is listed as the <a
    href="module-dict.html#ModuleIdentifier">Module Identifier</a>
    in the module documentation. Example (Unix, and for Windows as
    of Apache 1.3.15):</p>

    <blockquote>
      <code>LoadModule status_module modules/mod_status.so</code>
    </blockquote>

    <p>Example (Windows prior to Apache 1.3.15, and some 3rd party
    modules):</p>

    <blockquote>
      <code>LoadModule foo_module modules/ApacheModuleFoo.dll<br />
      </code>
    </blockquote>

    <p><strong>Note that all modules bundled with the Apache Win32
    binary distribution were renamed as of Apache version
    1.3.15</strong>.</p>

    <p>Win32 Apache modules are often distributed with the old
    style names, or even a name such as libfoo.dll. Whatever the
    name of the module, the LoadModule directive requires the exact
    filename, no assumption is made about the filename
    extension.</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>

@


1.4
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 94
a94 100
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache module mod_so</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Module mod_so</H1>

<p>This module provides for loading of executable code and modules into the
server at start-up or restart time.</p>

<P><A
HREF="module-dict.html#Status"
REL="Help"
><STRONG>Status:</STRONG></A> Base (Windows); Experimental (Unix)
<BR>
<A
HREF="module-dict.html#SourceFile"
REL="Help"
><STRONG>Source File:</STRONG></A> mod_so.c
<BR>
<A
HREF="module-dict.html#ModuleIdentifier"
REL="Help"
><STRONG>Module Identifier:</STRONG></A> so_module
<BR>
<A
HREF="module-dict.html#Compatibility"
REL="Help"
><STRONG>Compatibility:</STRONG></A> Available in Apache 1.3 and later.
</P>


<H2>Summary</H2>

<p>This is an experimental module. On selected operating systems it
can be used to load modules into Apache at runtime via the <A
HREF="../dso.html">Dynamic Shared Object</A> (DSO) mechanism, rather
than requiring a recompilation.

<P>
On Unix, the loaded code typically comes from shared object files
(usually with <SAMP>.so</SAMP> extension), whilst on Windows this
module loads <SAMP>DLL</SAMP> files. This module is only available in
Apache 1.3 and up.


<p>In previous releases, the functionality of this module was provided
for Unix by mod_dld, and for Windows by mod_dll. On Windows, mod_dll
was used in beta release 1.3b1 through 1.3b5. mod_so combines these
two modules into a single module for all operating systems.

<H2>Directives</H2>
<UL>
<LI><A HREF="#loadfile">LoadFile</A>
<LI><A HREF="#loadmodule">LoadModule</A>
</UL>

<H2><A NAME="creating">Creating DLL Modules for Windows</A></H2>

<P>The Apache module API is unchanged between the Unix and Windows
   versions. Many modules will run on Windows with no or little change
   from Unix, although others rely on aspects of the Unix architecture
   which are not present in Windows, and will not work.</P>

<P>When a module does work, it can be added to the server in one of two
   ways. As with Unix, it can be compiled into the server. Because Apache
   for Windows does not have the <CODE>Configure</CODE> program of Apache
   for Unix, the module's source file must be added to the ApacheCore
   project file, and its symbols must be added to the
   <CODE>os\win32\modules.c</CODE> file.</P>

<P>The second way is to compile the module as a DLL, a shared library
   that can be loaded into the server at runtime, using the
   <CODE><A HREF="#loadmodule">LoadModule</A></CODE>
   directive. These module DLLs can be distributed and run on any Apache
   for Windows installation, without recompilation of the server.</P>

<P>To create a module DLL, a small change is necessary to the module's
   source file: The module record must be exported from the DLL (which
   will be created later; see below). To do this, add the
   <CODE>MODULE_VAR_EXPORT</CODE> (defined in the Apache header files) to
   your module's module record definition. For example, if your module
   has:</P>
<PRE>
d96 4
a99 3
</PRE>
<P>Replace the above with:</P>
<PRE>
d101 88
a188 93
</PRE>
<P>Note that this will only be activated on Windows, so the module can
   continue to be used, unchanged, with Unix if needed. Also, if you are
   familiar with <CODE>.DEF</CODE> files, you can export the module
   record with that method instead.</P>

<P>Now, create a DLL containing your module. You will need to link this
   against the ApacheCore.lib export library that is created when the
   ApacheCore.dll shared library is compiled. You may also have to change
   the compiler settings to ensure that the Apache header files are
   correctly located.</P>

<P>This should create a DLL version of your module. Now simply place it
   in the <SAMP>modules</SAMP> directory of your server root, and use
   the <CODE><A HREF="#loadmodule">LoadModule</A></CODE> directive to
   load it.</P>

<HR>

<H2><A NAME="loadfile">LoadFile</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt LoadFile} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> LoadFile <EM>filename</em> 
   [<em>filename</em>]  ...<BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_so<P>

The LoadFile directive links in the named object files or libraries
when the server is started or restarted; this is used to load
additional code which may be required for some module to
work. <EM>Filename</EM> is either and absolute path or relative to <A
HREF="core.html#serverroot">ServerRoot</A>.<P><HR>

<H2><A NAME="loadmodule">LoadModule</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt LoadModule} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> LoadModule <EM>module filename</EM><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_so<P>

The LoadModule directive links in the object file or library
<EM>filename</EM> and adds the module structure named <EM>module</EM>
to the list of active modules. <EM>Module</EM> is the name of the
external variable of type <CODE>module</CODE> in the file, and is
listed as the <a href="module-dict.html#ModuleIdentifier">Module
Identifier</a> in the module documentation.  Example (Unix, and for
Windows as of Apache 1.3.15):
<BLOCKQUOTE><CODE>
LoadModule status_module modules/mod_status.so
</CODE></BLOCKQUOTE>

<P>Example (Windows prior to Apache 1.3.15, and some 3rd party modules):
<BLOCKQUOTE><CODE>
LoadModule foo_module modules/ApacheModuleFoo.dll<BR>
</CODE></BLOCKQUOTE>

<P><STRONG>Note that all modules bundled with the Apache Win32 binary
distribution were renamed as of Apache version 1.3.15</STRONG>.</P>

<P>Win32 Apache modules are often distributed with the old style names,
or even a name such as libfoo.dll.  Whatever the name of the module,
it must be the LoadModule directive requires the exact filename, no
assumption is made about the filename extension.</P>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
d190 2
a191 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a192 2
</BODY>
</HTML>
@


1.3
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d130 2
a131 1
><STRONG>Syntax:</STRONG></A> LoadFile <EM>filename filename ...</EM><BR>
d170 7
a176 4
The LoadModule directive links in the object file or library <EM>filename</EM>
and adds the module structure named <EM>module</EM> to the list of active
modules. <EM>Module</EM> is the name of the external variable of type
<CODE>module</CODE> in the file. Example (Unix):
d181 1
a181 3
<P>

Example (Windows):
d183 1
a183 1
LoadModule status_module modules/ApacheModuleStatus.dll<BR>
d186 2
a187 2
loads the named module from the modules subdirectory of the
ServerRoot.<P>
d189 4
a204 1

@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d24 31
a54 7
This module is contained in the <CODE>mod_so.c</CODE> file. It is
compiled in by default on Windows and is not compiled in by default on
Unix. It provides for loading of executable code and modules into the
server at start-up or restart time. On Unix, the loaded code typically
comes from shared object files (usually with <SAMP>.so</SAMP>
extension), whilst on Windows this module loads <SAMP>DLL</SAMP>
files. This module is only available in Apache 1.3 and up.
d57 5
d63 1
a63 1
In previous releases, the functionality of this module was provided
a67 6
<H2>Summary</H2>

This is an experimental module. On selected operating systems it can be used
to load modules into Apache at runtime via the <A HREF="../dso.html">Dynamic
Shared Object</A> (DSO) mechanism, rather than requiring a recompilation.

d73 50
d125 1
a125 2

<H2><A NAME="loadfile">LoadFile</A></H2>
d150 1
a150 1
<H2><A NAME="loadmodule">LoadModule</A></H2>
a185 51

<HR>

<H2><A NAME="creating">Creating DLL Modules for Windows</A></H2>

<P>The Apache module API is unchanged between the Unix and Windows
   versions. Many modules will run on Windows with no or little change
   from Unix, although others rely on aspects of the Unix architecture
   which are not present in Windows, and will not work.</P>

<P>When a module does work, it can be added to the server in one of two
   ways. As with Unix, it can be compiled into the server. Because Apache
   for Windows does not have the <CODE>Configure</CODE> program of Apache
   for Unix, the module's source file must be added to the ApacheCore
   project file, and its symbols must be added to the
   <CODE>os\win32\modules.c</CODE> file.</P>

<P>The second way is to compile the module as a DLL, a shared library
   that can be loaded into the server at runtime, using the
   <CODE><A HREF="#loadmodule">LoadModule</A></CODE>
   directive. These module DLLs can be distributed and run on any Apache
   for Windows installation, without recompilation of the server.</P>

<P>To create a module DLL, a small change is necessary to the module's
   source file: The module record must be exported from the DLL (which
   will be created later; see below). To do this, add the
   <CODE>MODULE_VAR_EXPORT</CODE> (defined in the Apache header files) to
   your module's module record definition. For example, if your module
   has:</P>
<PRE>
    module foo_module;
</PRE>
<P>Replace the above with:</P>
<PRE>
    module MODULE_VAR_EXPORT foo_module;
</PRE>
<P>Note that this will only be activated on Windows, so the module can
   continue to be used, unchanged, with Unix if needed. Also, if you are
   familiar with <CODE>.DEF</CODE> files, you can export the module
   record with that method instead.</P>

<P>Now, create a DLL containing your module. You will need to link this
   against the ApacheCore.lib export library that is created when the
   ApacheCore.dll shared library is compiled. You may also have to change
   the compiler settings to ensure that the Apache header files are
   correctly located.</P>

<P>This should create a DLL version of your module. Now simply place it
   in the <SAMP>modules</SAMP> directory of your server root, and use
   the <CODE><A HREF="#loadmodule">LoadModule</A></CODE> directive to
   load it.</P>
@


1.1
log
@Initial revision
@
text
@d66 1
a66 1
><STRONG>Status:</STRONG></A> Experimental<BR>
d91 1
a91 1
><STRONG>Status:</STRONG></A> Experimental<BR>
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@
