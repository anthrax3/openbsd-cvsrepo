head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.46
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.42
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.40
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.38
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.36
	OPENBSD_5_0:1.6.0.34
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.32
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.30
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.26
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2003.08.21.13.11.32;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.29.10.21.32;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.22.17.37;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.11.16.36;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.33;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.33;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.05;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.27.52;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.33;	author henning;	state Exp;
branches;
next	;


desc
@@


1.7
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_include</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_include</h1>

    <p>This module provides for documents with Server Side Includes
    (SSI).</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a>
    mod_include.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    includes_module</p>

    <h2>Summary</h2>

    <p>This module provides a handler which will process files
    before they are sent to the client. The processing is
    controlled by specially formated SGML comments, referred to as
    <em>elements</em>. These elements allow conditional text, the
    inclusion other files or programs, as well as the setting and
    printing of environment variables.</p>

    <p>For an introduction to this topic, we also provide a <a
    href="../howto/ssi.html">tutorial on Server Side
    Includes</a>.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#xbithack">XBitHack</a></li>
    </ul>

    <p>See also: <a href="core.html#options">Options</a> and <a
    href="mod_mime.html#addhandler">AddHandler</a>.</p>

    <h2>Enabling Server-Side Includes</h2>
    Any document with handler of "server-parsed" will be parsed by
    this module, if the <code>Includes</code> option is set. If
    documents containing server-side include directives are given
    the extension .shtml, the following directives will make Apache
    parse them and assign the resulting document the mime type of
    <code>text/html</code>: 
<pre>
AddType text/html .shtml
AddHandler server-parsed .shtml
</pre>
    The following directive must be given for the directories
    containing the shtml files (typically in a
    <code>&lt;Directory&gt;</code> section, but this directive is
    also valid .htaccess files if <code>AllowOverride
    Options</code> is set): 
<pre>
Options +Includes
</pre>
    Alternatively the <a href="#xbithack"><code>XBitHack</code></a>
    directive can be used to parse normal (<code>text/html</code>)
    files, based on file permissions. 

    <p>For backwards compatibility, documents with mime type
    <code>text/x-server-parsed-html</code> or
    <code>text/x-server-parsed-html3</code> will also be parsed
    (and the resulting output given the mime type
    <code>text/html</code>).</p>

    <h2>Basic Elements</h2>
    The document is parsed as an HTML document, with special
    commands embedded as SGML comments. A command has the syntax: 

    <blockquote>
      <code>&lt;!--#</code><em>element attribute=value
      attribute=value ...</em> <code>--&gt;</code>
    </blockquote>
    The value will often be enclosed in double quotes; many
    commands only allow a single attribute-value pair. Note that
    the comment terminator (<samp>--&gt;</samp>) should be preceded
    by whitespace to ensure that it isn't considered part of an SSI
    token. 

    <p>The allowed elements are:</p>

    <dl>
      <dt><strong>config</strong></dt>

      <dd>
        This command controls various aspects of the parsing. The
        valid attributes are: 

        <dl>
          <dt><strong>errmsg</strong></dt>

          <dd>The value is a message that is sent back to the
          client if an error occurs whilst parsing the
          document.</dd>

          <dt><strong>sizefmt</strong></dt>

          <dd>The value sets the format to be used which displaying
          the size of a file. Valid values are <code>bytes</code>
          for a count in bytes, or <code>abbrev</code> for a count
          in Kb or Mb as appropriate.</dd>

          <dt><strong>timefmt</strong></dt>

          <dd>The value is a string to be used by the
          <code>strftime(3)</code> library routine when printing
          dates.</dd>
        </dl>
      </dd>

      <dt><strong><a id="echo" name="echo">echo</a></strong></dt>

      <dd>
        This command prints one of the <a href="#includevars">include
        variables</a>, defined
        below. If the variable is unset, it is printed as
        <code>(none)</code>. Any dates printed are subject to the
        currently configured <code>timefmt</code>. Attributes: 

        <dl>
          <dt><strong>var</strong></dt>

          <dd>The value is the name of the variable to print.</dd>

          <dt><strong>encoding</strong></dt>

          <dd>Specifies how Apache should encode special characters
          contained in the variable before outputting them. If set
          to "none", no encoding will be done. If set to "url",
          then URL encoding (also known as %-encoding; this is
          appropriate for use within URLs in links, etc.) will be
          performed. At the start of an <code>echo</code> element,
          the default is set to "entity", resulting in entity
          encoding (which is appropriate in the context of a
          block-level HTML element, eg. a paragraph of text). This
          can be changed by adding an <code>encoding</code>
          attribute, which will remain in effect until the next
          <code>encoding</code> attribute is encountered or the
          element ends, whichever comes first. Note that the
          <code>encoding</code> attribute must <em>precede</em> the
          corresponding <code>var</code> attribute to be effective,
          and that only special characters as defined in the
          ISO-8859-1 character encoding will be encoded. This
          encoding process may not have the desired result if a
          different character encoding is in use. Apache 1.3.12 and
          above; previous versions do no encoding.</dd>
        </dl>
      </dd>

      <dt><strong>exec</strong></dt>

      <dd>
        The exec command executes a given shell command or CGI
        script. The IncludesNOEXEC <a
        href="core.html#options">Option</a> disables this command
        completely. The valid attributes are: 

        <dl>
          <dt><strong>cgi</strong></dt>

          <dd>
            The value specifies a (%-encoded) URL relative path to
            the CGI script. If the path does not begin with a (/),
            then it is taken to be relative to the current
            document. The document referenced by this path is
            invoked as a CGI script, even if the server would not
            normally recognize it as such. However, the directory
            containing the script must be enabled for CGI scripts
            (with <a
            href="mod_alias.html#scriptalias">ScriptAlias</a> or
            the ExecCGI <a href="core.html#options">Option</a>). 

            <p>The CGI script is given the PATH_INFO and query
            string (QUERY_STRING) of the original request from the
            client; these cannot be specified in the URL path. The
            include variables will be available to the script in
            addition to the standard <a href="mod_cgi.html">CGI</a>
            environment.</p>

            <p>For example:</p>

  <code>&lt;!--#exec cgi="/cgi-bin/example.cgi" --&gt;</code>

            <p>If the script returns a Location: header instead of
            output, then this will be translated into an HTML
            anchor.</p>

            <p>The <code><a href="#includevirtual">include
            virtual</a></code> element should be
            used in preference to <code>exec cgi</code>. In particular,
            if you need to pass additional arguments to a CGI program,
            using the query string, this cannot be done with <code>exec
            cgi</code>, but can be done with <code>include
            virtual</code>, as shown here:</p>

  <code>&lt;!--#include virtual="/cgi-bin/example.cgi?argument=value" --&gt;</code>
          </dd>

          <dt><strong>cmd</strong></dt>

          <dd>
          <p>The server will execute the given string using
          <code>/bin/sh</code>. The <a 
          href="#includevars">include variables</a> are available
          to the command, in addition to the usual set of CGI 
          variables.</p>

        <p>The use of <code><a href="#includevirtual">#include 
        virtual</a></code> is almost always
        prefered to using either <code>#exec cgi</code> or <code>#exec
        cmd</code>. The former (<code>#include virtual</code>) used the
        standard Apache sub-request mechanism to include files or
        scripts. It is much better tested and maintained.</p>

          <p>In addition, on some platforms, like Win32, and on unix
          when using suexec, you cannot pass arguments to a command in 
          an <code>exec</code> directive, or otherwise include spaces in
          the command. Thus, while the following will work under a
          non-suexec configuration on unix, it will not produce the
          desired result under Win32, or when running suexec:</p>

   <code>&lt;!--#exec cmd="perl /path/to/perlscript arg1 arg2" --&gt;</code>

          </dd>
        </dl>
      </dd>

      <dt><strong>fsize</strong></dt>

      <dd>
        This command prints the size of the specified file, subject
        to the <code>sizefmt</code> format specification.
        Attributes: 

        <dl>
          <dt><strong>file</strong></dt>

          <dd>The value is a path relative to the directory
          containing the current document being parsed.</dd>

          <dt><strong>virtual</strong></dt>

          <dd>The value is a (%-encoded) URL-path relative to the
          current document being parsed. If it does not begin with
          a slash (/) then it is taken to be relative to the
          current document.</dd>
        </dl>
      </dd>

      <dt><strong>flastmod</strong></dt>

      <dd>This command prints the last modification date of the
      specified file, subject to the <code>timefmt</code> format
      specification. The attributes are the same as for the
      <code>fsize</code> command.</dd>

      <dt><strong>include</strong></dt>

      <dd>
        This command inserts the text of another document or file
        into the parsed file. Any included file is subject to the
        usual access control. If the directory containing the
        parsed file has the <a href="core.html#options">Option</a>
        IncludesNOEXEC set, and the including the document would
        cause a program to be executed, then it will not be
        included; this prevents the execution of CGI scripts.
        Otherwise CGI scripts are invoked as normal using the
        complete URL given in the command, including any query
        string. 

        <p>An attribute defines the location of the document; the
        inclusion is done for each attribute given to the include
        command. The valid attributes are:</p>

        <dl>
          <dt><strong>file</strong></dt>

          <dd>The value is a path relative to the directory
          containing the current document being parsed. It cannot
          contain <code>../</code>, nor can it be an absolute path.
          Therefore, you cannot include files that are outside of the
          document root, or above the current document in the directory
          structure.
          The <code>virtual</code> attribute should always be used
          in preference to this one.</dd>

          <dt><strong><a name="includevirtual">virtual</a></strong></dt>

         <dd>
          <p>The value is a (%-encoded) URL relative to the
          current document being parsed. The URL cannot contain a
          scheme or hostname, only a path and an optional query
          string. If it does not begin with a slash (/) then it is
          taken to be relative to the current document.</p>

          <p>A URL is constructed from the attribute, and the output the
           server would return if the URL were accessed by the client
           is included in the parsed output. Thus included files can
           be nested.</p>

           <p>If the specified URL is a CGI program, the program will
           be executed and its output inserted in place of the directive
           in the parsed file. You may include a query string in a CGI
           url:</p>
     
     <code>&lt;!--#include virtual="/cgi-bin/example.cgi?argument=value" --&gt;</code>
           
           <p><code>include virtual</code> should be used in preference
           to <code>exec cgi</code> to include the output of CGI
           programs into an HTML document.
          </dd>
        </dl>
      </dd>

      <dt><strong>printenv</strong></dt>

      <dd>
      <p>This prints out a listing of all existing variables and
      their values. Starting with Apache 1.3.12, special characters
      are entity encoded (see the <a
      href="#echo"><code>echo</code></a> element for details)
      before being output. There are no attributes.</p>

      <p>For example:</p>
      
      <p><code>&lt;!--#printenv --&gt;</code></p>

      <p>The <strong>printenv</strong> element is available only in
      Apache 1.2 and above.</p>
    </dd>
      <dt><strong>set</strong></dt>

      <dd>
        This sets the value of a variable. Attributes: 

        <dl>
          <dt><strong>var</strong></dt>

          <dd>The name of the variable to set.</dd>

          <dt><strong>value</strong></dt>

          <dd>The value to give a variable.</dd>
        </dl>
        <p>
        For example: <code>&lt;!--#set var="category" value="help"
        --&gt;</code></p>

      <p>The <strong>set</strong> element is available only in
      Apache 1.2 and above.</p>
      </dd>
    </dl>

    <h2><a name="includevars">Include Variables</a></h2>
    In addition to the variables in the standard CGI environment,
    these are available for the <code>echo</code> command, for
    <code>if</code> and <code>elif</code>, and to any program
    invoked by the document. 

    <dl>
      <dt>DATE_GMT</dt>

      <dd>The current date in Greenwich Mean Time.</dd>

      <dt>DATE_LOCAL</dt>

      <dd>The current date in the local time zone.</dd>

      <dt>DOCUMENT_NAME</dt>

      <dd>The filename (excluding directories) of the document
      requested by the user.</dd>

      <dt>DOCUMENT_URI</dt>

      <dd>The (%-decoded) URL path of the document requested by the
      user. Note that in the case of nested include files, this is
      <em>not</em> then URL for the current document.</dd>

      <dt>LAST_MODIFIED</dt>

      <dd>The last modification date of the document requested by
      the user.</dd>

      <dt>USER_NAME</dt>
    
      <dd>Contains the owner of the file which included it.</dd>

    </dl>

    <h2>Variable Substitution</h2>

    <p>Variable substitution is done within quoted strings in most
    cases where they may reasonably occur as an argument to an SSI
    directive. This includes the <samp>config</samp>,
    <samp>exec</samp>, <samp>flastmod</samp>, <samp>fsize</samp>,
    <samp>include</samp>, and <samp>set</samp> directives, as well
    as the arguments to conditional operators. You can insert a
    literal dollar sign into the string using backslash
    quoting:</p>
<pre>
    &lt;!--#if expr="$a = \$test" --&gt;
</pre>

    <p>If a variable reference needs to be substituted in the
    middle of a character sequence that might otherwise be
    considered a valid identifier in its own right, it can be
    disambiguated by enclosing the reference in braces,
    <em>&agrave; la</em> shell substitution:</p>
<pre>
    &lt;!--#set var="Zed" value="${REMOTE_HOST}_${REQUEST_METHOD}" --&gt;
</pre>

    <p>This will result in the <samp>Zed</samp> variable being set
    to "<samp>X_Y</samp>" if <samp>REMOTE_HOST</samp> is
    "<samp>X</samp>" and <samp>REQUEST_METHOD</samp> is
    "<samp>Y</samp>".</p>

    <p>EXAMPLE: the below example will print "in foo" if the
    DOCUMENT_URI is /foo/file.html, "in bar" if it is
    /bar/file.html and "in neither" otherwise:</p>
<pre>
    &lt;!--#if expr="\"$DOCUMENT_URI\" = \"/foo/file.html\"" --&gt;
    in foo
    &lt;!--#elif expr="\"$DOCUMENT_URI\" = \"/bar/file.html\"" --&gt;
    in bar
    &lt;!--#else --&gt;
    in neither
    &lt;!--#endif --&gt;
</pre>

    <h2><a id="flowctrl" name="flowctrl">Flow Control
    Elements</a></h2>
    These are available in Apache 1.2 and above. The basic flow
    control elements are: 
<pre>
    &lt;!--#if expr="<em>test_condition</em>" --&gt;
    &lt;!--#elif expr="<em>test_condition</em>" --&gt;
    &lt;!--#else --&gt;
    &lt;!--#endif --&gt;
</pre>

    <p>The <strong><code>if</code></strong> element works like an
    if statement in a programming language. The test condition is
    evaluated and if the result is true, then the text until the
    next <strong><code>elif</code></strong>,
    <strong><code>else</code></strong>. or
    <strong><code>endif</code></strong> element is included in the
    output stream.</p>

    <p>The <strong><code>elif</code></strong> or
    <strong><code>else</code></strong> statements are be used the
    put text into the output stream if the original test_condition
    was false. These elements are optional.</p>

    <p>The <strong><code>endif</code></strong> element ends the
    <strong><code>if</code></strong> element and is required.</p>

    <p><em>test_condition</em> is one of the following:</p>

    <dl>
      <dt><em>string</em></dt>

      <dd>true if <em>string</em> is not empty</dd>

      <dt><em>string1</em> = <em>string2</em><br />
       <em>string1</em> != <em>string2</em><br />
       <em>string1</em> &lt; <em>string2</em><br />
       <em>string1</em> &lt;= <em>string2</em><br />
       <em>string1</em> &gt; <em>string2</em><br />
       <em>string1</em> &gt;= <em>string2</em></dt>

      <dd>Compare string1 with string 2. If string2 has the form
      <em>/string/</em> then it is compared as a regular
      expression. Regular expressions have the same syntax as those
      found in the Unix <samp>egrep</samp> command.</dd>

      <dt>( <em>test_condition</em> )</dt>

      <dd>true if <em>test_condition</em> is true</dd>

      <dt>! <em>test_condition</em></dt>

      <dd>true if <em>test_condition</em> is false</dd>

      <dt><em>test_condition1</em> &amp;&amp;
      <em>test_condition2</em></dt>

      <dd>true if both <em>test_condition1</em> and
      <em>test_condition2</em> are true</dd>

      <dt><em>test_condition1</em> || <em>test_condition2</em></dt>

      <dd>true if either <em>test_condition1</em> or
      <em>test_condition2</em> is true</dd>
    </dl>

    <p>"<em>=</em>" and "<em>!=</em>" bind more tightly than
    "<em>&amp;&amp;</em>" and "<em>||</em>". "<em>!</em>" binds
    most tightly. Thus, the following are equivalent:</p>
<pre>
    &lt;!--#if expr="$a = test1 &amp;&amp; $b = test2" --&gt;
    &lt;!--#if expr="($a = test1) &amp;&amp; ($b = test2)" --&gt;
</pre>

    <p>Anything that's not recognized as a variable or an operator
    is treated as a string. Strings can also be quoted:
    <em>'string'</em>. Unquoted strings can't contain whitespace
    (blanks and tabs) because it is used to separate tokens such as
    variables. If multiple strings are found in a row, they are
    concatenated using blanks. So,</p>
<pre>
     <em>string1    string2</em>  results in <em>string1 string2</em>
    <em>'string1    string2'</em> results in <em>string1    string2</em>
</pre>

    <h2>Using Server Side Includes for ErrorDocuments</h2>
    There is <a href="../misc/custom_errordocs.html">a document</a>
    which describes how to use the features of mod_include to offer
    internationalized customized server error documents. 
    <hr />

    <h2><a id="xbithack" name="xbithack">XBitHack</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> XBitHack
    on|off|full<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>XBitHack
    off</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Options<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_include 

    <p>The XBitHack directives controls the parsing of ordinary
    html documents. This directive only affects files associated
    with the MIME type <code>text/html</code>. XBitHack can take on
    the following values:</p>

    <dl>
      <dt>off</dt>

      <dd>No special treatment of executable files.</dd>

      <dt>on</dt>

      <dd>Any file that has the user-execute bit set will be
      treated as a server-parsed html document.</dd>

      <dt>full</dt>

      <dd>
        As for <code>on</code> but also test the group-execute bit.
        If it is set, then set the Last-modified date of the
        returned file to be the last modified time of the file. If
        it is not set, then no last-modified date is sent. Setting
        this bit allows clients and proxies to cache the result of
        the request. 

        <p><strong>Note:</strong> you would not want to use this,
        for example, when you <code>#include</code> a CGI that
        produces different output on each hit (or potentially
        depends on the hit).</p>
      </dd>
    </dl>

    <p>    <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

    </p>
  </body>
</html>

@


1.6
log
@merge
@
text
@@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d404 5
@


1.4
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 2
a2 70
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache module mod_include</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Module mod_include</H1>

<p>This module provides for documents with Server Side Includes (SSI).</p>

<P><A
HREF="module-dict.html#Status"
REL="Help"
><STRONG>Status:</STRONG></A> Base
<BR>
<A
HREF="module-dict.html#SourceFile"
REL="Help"
><STRONG>Source File:</STRONG></A> mod_include.c
<BR>
<A
HREF="module-dict.html#ModuleIdentifier"
REL="Help"
><STRONG>Module Identifier:</STRONG></A> includes_module
</P>

<h2>Summary</h2>

<p>This module provides a handler which will process files before they
are sent to the client.  The processing is controlled by specially
formated SGML comments, referred to as <em>elements</em>.  These
elements allow conditional text, the inclusion other files or
programs, as well as the setting and printing of environment
variables.</p>

<p>For an introduction to this topic, we also provide a
<a href="../howto/ssi.html">tutorial on Server Side Includes</a>.</p>


<H2>Directives</H2>
<UL>
<LI><A HREF="#xbithack">XBitHack</A>
</UL>

<p>See also: <a href="core.html#options">Options</a>
and <a href="mod_mime.html#addhandler">AddHandler</a>.</p>


<H2>Enabling Server-Side Includes</H2>

Any document with handler of "server-parsed" will be parsed by this
module, if the <CODE>Includes</CODE> option is set. If documents
containing server-side include directives are given the extension
.shtml, the following directives will make Apache parse them and
assign the resulting document the mime type of <CODE>text/html</CODE>:
d4 61
a64 1
<PRE>
d67 7
a73 8
</PRE>

The following directive must be given for the directories containing
the shtml files (typically in a <CODE>&lt;Directory&gt;</CODE> section,
but this directive is also valid .htaccess files if <CODE>AllowOverride
Options</CODE> is set):

<PRE>
d75 342
a416 217
</PRE>

Alternatively the <A HREF="#xbithack"><CODE>XBitHack</CODE></A>
directive can be used to parse normal (<CODE>text/html</CODE>) files,
based on file permissions.  <P>

For backwards compatibility, documents with mime type
<CODE>text/x-server-parsed-html</CODE> or
<CODE>text/x-server-parsed-html3</CODE> will also be parsed
(and the resulting output given the mime type <CODE>text/html</CODE>).

<H2>Basic Elements</H2>

The document is parsed as an HTML document, with special commands embedded
as SGML comments. A command has the syntax:

<BLOCKQUOTE><CODE>
&lt;!--#</CODE><EM>element attribute=value attribute=value ...</EM>
<CODE> --&gt;
</CODE></BLOCKQUOTE>

The value will often be enclosed in double quotes; many commands only allow
a single attribute-value pair.  Note that the comment terminator
(<SAMP>--&gt;</SAMP>) should be preceded by whitespace to ensure that it
isn't considered part of an SSI token.
<P>
The allowed elements are:<P>

<DL>

<DT><STRONG>config</STRONG>
<DD>
This command controls various aspects of the parsing. The valid attributes
are:
<DL>
<DT>errmsg
<DD>The value is a message that is sent back to the client if an error occurs
whilst parsing the document.
<DT>sizefmt
<DD>The value sets the format to be used which displaying the size of a file.
Valid values are <CODE>bytes</CODE> for a count in bytes, or
<CODE>abbrev</CODE> for a count in Kb or Mb as appropriate.
<DT>timefmt
<DD>The value is a string to be used by the <CODE>strftime(3)</CODE> library
routine when printing dates.
</DL>

<DT><STRONG><A NAME="echo">echo</a></STRONG>
<DD>
This command prints one of the include variables, defined below.
If the variable is unset, it is printed as <CODE>(none)</CODE>.
Any dates printed are subject to the currently configured <CODE>timefmt</CODE>.

Attributes:
<DL>
<DT>var
<DD>The value is the name of the variable to print.
<DT>encoding 
<DD>Specifies how Apache should encode special characters contained
in the variable before outputting them.  If set to "none", no encoding
will be done.  If set to "url", then URL encoding (also known as
%-encoding; this is appropriate for use within URLs in links, etc.)
will be performed.  At the start of an <CODE>echo</CODE> element,
the default is set to "entity", resulting in entity encoding (which
is appropriate in the context of a block-level HTML element, eg.
a paragraph of text).  This can be changed by adding an
<CODE>encoding</CODE> attribute, which will remain in effect until
the next <CODE>encoding</CODE> attribute is encountered or the
element ends, whichever comes first.  Note that the
<CODE>encoding</CODE> attribute must <EM>precede</EM> the corresponding
<CODE>var</CODE> attribute to be effective, and that only special
characters as defined in the ISO-8859-1 character encoding will be
encoded.  This encoding process may not have the desired result if
a different character encoding is in use.
Apache 1.3.12 and above; previous versions do no encoding.

</DL>

<DT><STRONG>exec</STRONG>
<DD>
The exec command executes a given shell command or CGI script.
The IncludesNOEXEC <A HREF="core.html#options">Option</A> disables this command
completely. The valid attributes are:
<DL>
<DT>cgi
<DD>
The value specifies a (%-encoded) URL relative path to the CGI script.
If the path does not begin with a (/), then it is taken to be relative to
the current document. The document referenced by this path is invoked
as a CGI script, even if the server would not normally recognize it as
such. However, the directory containing the script must be enabled for
CGI scripts (with <A HREF="mod_alias.html#scriptalias">ScriptAlias</A>
or the ExecCGI <A HREF="core.html#options">Option</A>).<P>
The CGI script is given the PATH_INFO and query string (QUERY_STRING) of the
original request from the client; these cannot be specified in the URL path.
The include variables will be available to the script in addition to the
standard <A HREF="mod_cgi.html">CGI</A> environment.<P>
If the script returns a Location: header instead of output, then this
will be translated into an HTML anchor.<P>
The <CODE>include virtual</CODE> element should be used in preference to
<CODE>exec cgi</CODE>.
<DT>cmd
<DD>The server will execute the given string using <CODE>/bin/sh</CODE>.
The include variables are available to the command.
</DL>

<DT><STRONG>fsize</STRONG>
<DD>
This command prints the size of the specified file, subject to the
<CODE>sizefmt</CODE> format specification. Attributes:
<DL>
<DT>file
<DD>The value is a path relative to the directory containing the current
document being parsed.
<DT>virtual
<DD>The value is a (%-encoded) URL-path relative to the current document being
parsed. If it does not begin with a slash (/) then it is taken to be relative
to the current document.
</DL>

<DT><STRONG>flastmod</STRONG>
<DD>
This command prints the last modification date of the specified file,
subject to the <CODE>timefmt</CODE> format specification. The attributes are
the same as for the <CODE>fsize</CODE> command.

<DT><STRONG>include</STRONG>
<DD>
This command inserts the text of another document or file into the parsed
file. Any included file is subject to the usual access control. If the
directory containing the parsed file has the
<A HREF="core.html#options">Option</A>
IncludesNOEXEC set, and the including the document would cause a program
to be executed, then it will not be included; this prevents the execution of
CGI scripts. Otherwise CGI scripts are invoked as normal using the complete
URL given in the command, including any query string.
<!--%plaintext &lt;?INDEX CGI scripts, {\tt include} element and&gt; -->
<P>

An attribute defines the location of the document; the inclusion is done for
each attribute given to the include command. The valid attributes are:
<DL>
<DT>file
<DD>The value is a path relative to the directory containing the current
document being parsed. It cannot contain <CODE>../</CODE>, nor can it be an
absolute path. The <CODE>virtual</CODE> attribute should always be used
in preference to this one.
<DT>virtual
<DD>The value is a (%-encoded) URL relative to the current document being
parsed. The URL cannot contain a scheme or hostname, only a path and
an optional query string. If it does not begin with a slash (/) then it
is taken to be relative to the current document.
</DL>
A URL is constructed from the attribute, and the output the server
would return if the URL were accessed by the client is included in the parsed
output. Thus included files can be nested.

<DT><STRONG>printenv</STRONG>
<DD>This prints out a listing of all existing variables and their values.
   Starting with Apache 1.3.12, special characters are entity encoded (see the 
   <A HREF="#echo"><CODE>echo</CODE></A> element for details) before being
   output.  No attributes.
<DD>For example: <CODE>&lt;!--#printenv --&gt;</CODE>
<DD>Apache 1.2 and above.

<DT><STRONG>set</STRONG>
<DD>This sets the value of a variable.  Attributes:
<DL>
<DT>var
<DD>The name of the variable to set.
<DT>value
<DD>The value to give a variable.
</DL>
For example:
  <CODE>&lt;!--#set var="category" value="help" --&gt;</CODE>
<DD>Apache 1.2 and above.

</DL>

<H2>Include Variables</H2>

In addition to the variables in the standard CGI environment, these are
available for the <CODE>echo</CODE> command, for <CODE>if</CODE> and
<CODE>elif</CODE>, and to any program invoked by the document.

<DL>
<DT>DATE_GMT
<DD>The current date in Greenwich Mean Time.
<DT>DATE_LOCAL
<DD>The current date in the local time zone.
<DT>DOCUMENT_NAME
<DD>The filename (excluding directories) of the document requested by the
user.
<DT>DOCUMENT_URI
<DD>The (%-decoded) URL path of the document requested by the user. Note that
in the case of nested include files, this is <EM>not</EM> then URL for the
current document.
<DT>LAST_MODIFIED
<DD>The last modification date of the document requested by the user.
</DL>
<P>

<H2>Variable Substitution</H2>
<P> Variable substitution is done within quoted strings in most cases
    where they may reasonably occur as an argument to an SSI directive.
    This includes the
    <SAMP>config</SAMP>,
    <SAMP>exec</SAMP>,
    <SAMP>flastmod</SAMP>,
    <SAMP>fsize</SAMP>,
    <SAMP>include</SAMP>, and
    <SAMP>set</SAMP>
    directives, as well as the arguments to conditional operators.
    You can insert a literal dollar sign into the string using backslash
    quoting:

<PRE>
d418 1
a418 6
</PRE>

<P> If a variable reference needs to be substituted in the middle of a
    character sequence that might otherwise be considered a valid
    identifier in its own right, it can be disambiguated by enclosing
    the reference in braces, <EM>&agrave; la</EM> shell substitution:
d420 6
a425 1
<PRE>
d427 1
a427 1
</PRE>
d429 9
a437 9
<P> This will result in the <SAMP>Zed</SAMP> variable being set to
    &quot;<SAMP>X_Y</SAMP>&quot; if <SAMP>REMOTE_HOST</SAMP> is
    &quot;<SAMP>X</SAMP>&quot; and <SAMP>REQUEST_METHOD</SAMP> is
    &quot;<SAMP>Y</SAMP>&quot;.

<P> EXAMPLE: the below example will print "in foo" if the DOCUMENT_URI is
/foo/file.html, "in bar" if it is /bar/file.html and "in neither"
otherwise:
<PRE>
d445 30
a474 1
</PRE>
d476 2
a477 1
<H2><A NAME="flowctrl">Flow Control Elements</A></H2>
d479 1
a479 2
These are available in Apache 1.2 and above.  The basic flow control
elements are:
d481 27
a507 6
<PRE>
    &lt;!--#if expr="<EM>test_condition</EM>" --&gt;
    &lt;!--#elif expr="<EM>test_condition</EM>" --&gt;
    &lt;!--#else --&gt;
    &lt;!--#endif --&gt;
</PRE>
d509 3
a511 53
<P> The <STRONG><CODE>if</CODE></STRONG> element works like an
    if statement in a programming language.  The test condition
    is evaluated and if the result is true, then the text until
    the next <STRONG><CODE>elif</CODE></STRONG>, <STRONG><CODE>else</CODE></STRONG>.
    or <STRONG><CODE>endif</CODE></STRONG> element is included in the
    output stream.

<P> The <STRONG><CODE>elif</CODE></STRONG> or <STRONG><CODE>else</CODE></STRONG>
    statements are be used the put text into the output stream
    if the original test_condition was false.  These elements
    are optional.

<P> The <STRONG><CODE>endif</CODE></STRONG> element ends the
    <STRONG><CODE>if</CODE></STRONG> element and is required.

<P> <EM>test_condition</EM> is one of the following:

<DL>

<DT><EM>string</EM><DD>true if <EM>string</EM> is not empty

<DT><EM>string1</EM> = <EM>string2</EM>
    <BR>
    <EM>string1</EM> != <EM>string2</EM>
    <BR>
    <EM>string1</EM> &lt; <EM>string2</EM>
    <BR>
    <EM>string1</EM> &lt;= <EM>string2</EM>
    <BR>
    <EM>string1</EM> &gt; <EM>string2</EM>
    <BR>
    <EM>string1</EM> &gt;= <EM>string2</EM>

<DD>Compare string1 with string 2.  If string2 has the form <EM>/string/</EM>
    then it is compared as a regular expression.
    Regular expressions have the same syntax as those found in the
    Unix <SAMP>egrep</SAMP> command.

<DT>( <EM>test_condition</EM> )
        <DD>true if <EM>test_condition</EM> is true
<DT>! <EM>test_condition</EM>
        <DD>true if <EM>test_condition</EM> is false
<DT><EM>test_condition1</EM> &amp;&amp; <EM>test_condition2</EM>
        <DD>true if both <EM>test_condition1</EM> and
        <EM>test_condition2</EM> are true
<DT><EM>test_condition1</EM> || <EM>test_condition2</EM>
        <DD>true if either <EM>test_condition1</EM> or
        <EM>test_condition2</EM> is true
</DL>

<P> "<EM>=</EM>" and "<EM>!=</EM>" bind more tightly than "<EM>&amp;&amp;</EM>" and
    "<EM>||</EM>".
    "<EM>!</EM>" binds most tightly.  Thus, the following are equivalent:
d513 4
a516 1
<PRE>
d519 1
a519 77
</PRE>

<P> Anything that's not recognized as a variable or an operator is
    treated as a string.  Strings can also be quoted: <EM>'string'</EM>.
    Unquoted strings can't contain whitespace (blanks and tabs)
    because it is used to separate tokens such as variables.  If
    multiple strings are found in a row, they are concatenated using
    blanks.  So,

<PRE>
     <EM>string1    string2</EM>  results in <EM>string1 string2</EM>
    <EM>'string1    string2'</EM> results in <EM>string1    string2</EM>
</PRE>

<H2>Using Server Side Includes for ErrorDocuments</H2>

There is <A HREF="../misc/custom_errordocs.html">a document</A> which
describes how to use the features of mod_include to offer internationalized
customized server error documents.
<P>

<HR>

<H2><A NAME="xbithack">XBitHack</A> directive</H2>
<!--%plaintext &lt;?INDEX {\tt XBitHack} directive&gt; -->
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> XBitHack on|off|full<BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>XBitHack off</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host, directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Options<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_include<P>

The XBitHack directives controls the parsing of ordinary html documents.
This directive only affects files associated with the MIME type
<CODE>text/html</CODE>.  XBitHack can take on the following values:
<DL>
<DT>off
<DD>No special treatment of executable files.
<DT>on
<DD>Any file that has the user-execute bit set will be treated as a
server-parsed html document.
<DT>full
<DD>As for <CODE>on</CODE> but also test the group-execute bit. If it
is set, then set the Last-modified date of the returned file to be the
last modified time of the file. If it is not set, then no last-modified date
is sent. Setting this bit allows clients and proxies to cache the result of
the request.
<P><STRONG>Note:</STRONG> you would not want to use this, for example, when you
<CODE>#include</CODE> a CGI that produces different output on each hit
(or potentially depends on the hit).
</DL>
<P>


<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
d521 77
a597 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a598 2
</BODY>
</HTML>
@


1.3
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d24 1
a24 1
<p>This module provides for server-parsed html documents.</p>
d39 1
a39 1
><STRONG>Module Identifier:</STRONG></A> include_module
d51 4
d385 1
a385 1
<DT><EM>test_condition1</EM> && <EM>test_condition2</EM>
d393 1
a393 1
<P> "<EM>=</EM>" and "<EM>!=</EM>" bind more tightly than "<EM>&&</EM>" and
d398 2
a399 2
    &lt;!--#if expr="$a = test1 && $b = test2" --&gt;
    &lt;!--#if expr="($a = test1) && ($b = test2)" --&gt;
d428 1
a428 1
><STRONG>Syntax:</STRONG></A> XBitHack <EM>status</EM><BR>
d452 1
a452 2
<CODE>text/html</CODE>.
<EM>Status</EM> can have the following values:
@


1.2
log
@apache 1.3.12 + mod_ssl 2.6.2 merge
@
text
@d24 35
a58 6
This module is contained in the <CODE>mod_include.c</CODE> file, and
is compiled in by default. It provides for server-parsed html
documents. Several directives beyond the original NCSA definition were
introduced in Apache 1.2 - these are flagged below with the phrase
"Apache 1.2 and above".  Of particular significance are the new flow
control directives documented at the bottom.
d127 1
a127 2
<A NAME="echo">
<DT><STRONG>echo</STRONG>
d410 7
a417 6
<H2>Directives</H2>
<UL>
<LI><A HREF="#xbithack">XBitHack</A>
</UL>
<HR>

d419 1
a419 1
<H2><A NAME="xbithack">XBitHack</A></H2>
a467 7
<HR>
<H2>Using Server Side Includes for ErrorDocuments</H2>

There is <A HREF="../misc/custom_errordocs.html">a document</A> which
describes how to use the features of mod_include to offer internationalized
customized server error documents.
<P>
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d24 1
a24 1
This module is contained in the <code>mod_include.c</code> file, and
d26 3
a28 3
documents. Several directives beyond the original NCSA definition have been
included in Apache 1.2 - these are flagged below with the phrase
"Apache 1.2 and above".  Of particular significance are the new flow 
d58 3
a60 3
<code>text/x-server-parsed-html</code> or
<code>text/x-server-parsed-html3</code> will also be parsed
(and the resulting output given the mime type <code>text/html</code>).
d62 1
a62 1
<h2>Basic Elements</h2>
d67 4
a70 4
<blockquote><code>
&lt;!--#</code><em>element attribute=value attribute=value ...</em>
<code> --&gt;
</code></blockquote>
d76 2
a77 2
<p>
The allowed elements are:<p>
d79 1
a79 1
<dl>
d81 2
a82 2
<dt><strong>config</strong>
<dd>
d85 3
a87 3
<dl>
<dt>errmsg
<dd>The value is a message that is sent back to the client if an error occurs
d89 6
a94 6
<dt>sizefmt
<dd>The value sets the format to be used which displaying the size of a file.
Valid values are <code>bytes</code> for a count in bytes, or
<code>abbrev</code> for a count in Kb or Mb as appropriate.
<dt>timefmt
<dd>The value is a string to be used by the <code>strftime(3)</code> library
d96 1
a96 1
</dl>
d98 3
a100 2
<dt><strong>echo</strong>
<dd>
d102 3
a104 2
If the variable is unset, it is printed as <code>(none)</code>.
Any dates printed are subject to the currently configured <code>timefmt</code>.
d106 23
a128 4
<dl>
<dt>var
<dd>The value is the name of the variable to print.
</dl>
d130 2
a131 2
<dt><strong>exec</strong>
<dd>
d135 3
a137 3
<dl>
<dt>cgi
<dd>
d144 1
a144 1
or the ExecCGI <A HREF="core.html#options">Option</A>).<p>
d148 1
a148 1
standard <A HREF="mod_cgi.html">CGI</A> environment.<p>
d150 5
a154 5
will be translated into an HTML anchor.<p>
The <code>include virtual</code> element should be used in preference to
<code>exec cgi</code>.
<dt>cmd
<dd>The server will execute the given string using <code>/bin/sh</code>.
d156 1
a156 1
</dl>
d158 2
a159 2
<dt><strong>fsize</strong>
<dd>
d161 4
a164 4
<code>sizefmt</code> format specification. Attributes:
<dl>
<dt>file
<dd>The value is a path relative to the directory containing the current
d166 2
a167 2
<dt>virtual
<dd>The value is a (%-encoded) URL-path relative to the current document being
d170 1
a170 1
</dl>
d172 2
a173 2
<dt><strong>flastmod</strong>
<dd>
d175 2
a176 2
subject to the <code>timefmt</code> format specification. The attributes are
the same as for the <code>fsize</code> command.
d178 2
a179 2
<dt><strong>include</strong>
<dd>
d189 1
a189 1
<p>
d193 5
a197 5
<dl>
<dt>file
<dd>The value is a path relative to the directory containing the current
document being parsed. It cannot contain <code>../</code>, nor can it be an
absolute path. The <code>virtual</code> attribute should always be used
d199 2
a200 2
<dt>virtual
<dd>The value is a (%-encoded) URL relative to the current document being
d204 1
a204 1
</dl>
d209 17
a225 15
<dt><strong>printenv</strong>
<dd>This prints out a listing of all existing variables and their values.
    No attributes.
<dd>For example: <code>&lt;!--#printenv --&gt;</code>
<dd>Apache 1.2 and above.

<dt><strong>set</strong>
<dd>This sets the value of a variable.  Attributes:
<dl>
<dt>var
<dd>The name of the variable to set.
<dt>value
<dd>The value to give a variable.
</dl>
For example: 
d227 1
a227 1
<dd>Apache 1.2 and above.
d229 1
a229 1
</dl>
d231 1
a231 1
<h2>Include Variables</h2>
d234 2
a235 2
available for the <code>echo</code> command, for <code>if</code> and
<code>elif</code>, and to any program invoked by the document.  
d237 7
a243 7
<dl>
<dt>DATE_GMT
<dd>The current date in Greenwich Mean Time.
<dt>DATE_LOCAL
<dd>The current date in the local time zone.
<dt>DOCUMENT_NAME
<dd>The filename (excluding directories) of the document requested by the
d245 3
a247 3
<dt>DOCUMENT_URI
<dd>The (%-decoded) URL path of the document requested by the user. Note that
in the case of nested include files, this is <em>not</em> then URL for the
d249 4
a252 4
<dt>LAST_MODIFIED
<dd>The last modification date of the document requested by the user.
</dl>
<p>
d286 2
a287 2
<P> EXAMPLE: the below example will print "in foo" if the DOCUMENT_URI is 
/foo/file.html, "in bar" if it is /bar/file.html and "in neither" 
d299 1
a299 1
<H2>Flow Control Elements</H2>
d305 2
a306 2
    &lt;!--#if expr="<I>test_condition</I>" --&gt;
    &lt;!--#elif expr="<I>test_condition</I>" --&gt;
d311 1
a311 1
<P> The <B><CODE>if</CODE></B> element works like an
d314 2
a315 2
    the next <B><CODE>elif</CODE></B>, <B><CODE>else</CODE></B>.
    or <B><CODE>endif</CODE></B> element is included in the
d318 1
a318 1
<P> The <B><CODE>elif</CODE></B> or <B><CODE>else</CODE></B>
d323 2
a324 2
<P> The <B><CODE>endif</CODE></B> element ends the 
    <B><CODE>if</CODE></B> element and is required.
d326 1
a326 1
<P> <I>test_condition</I> is one of the following:
d330 1
a330 1
<DT><I>string</I><DD>true if <I>string</I> is not empty
d332 11
a342 2
<DT><I>string1</I> = <I>string2</I><BR>
    <I>string1</I> != <I>string2</I>
d344 2
a345 2
<DD>Compare string1 with string 2.  If string2 has the form <I>/string/</I>
    than it is compared as a regular expression.
d347 1
a347 1
    Unix egrep command.
d349 10
a358 10
<DT>( <I>test_condition</I> )
        <DD>true if <I>test_condition</I> is true 
<DT>! <I>test_condition</I>
        <DD>true if <I>test_condition</I> is false
<DT><I>test_condition1</I> && <I>test_condition2</I>
        <DD>true if both <I>test_condition1</I> and
        <I>test_condition2</I> are true 
<DT><I>test_condition1</I> || <I>test_condition2</I>
        <DD>true if either <I>test_condition1</I> or
        <I>test_condition2</I> is true 
d361 3
a363 3
<P> "<I>=</I>" and "<I>!=</I>" bind more tightly than "<I>&&</I>" and
    "<I>||</I>". 
    "<I>!</I>" binds most tightly.  Thus, the following are equivalent:
d371 1
a371 1
    treated as a string.  Strings can also be quoted: <I>'string'</I>.
d378 2
a379 2
     <I>string1    string2</I>  results in <I>string1 string2</I>
    <I>'string1    string2'</I> results in <I>string1    string2</I>
d382 6
a387 6
<hr>
<h2>Directives</h2>
<ul>
<li><A HREF="#xbithack">XBitHack</A>
</ul>
<hr>
d390 1
a390 1
<h2><A name="xbithack">XBitHack</A></h2>
d392 24
a415 6
<strong>Syntax:</strong> XBitHack <em>status</em><br>
<strong>Default:</strong> <code>XBitHack off</code><br>
<Strong>Context:</strong> server config, virtual host, directory, .htaccess<br>
<Strong>Override:</strong> Options<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_include<p>
d419 7
a425 7
<CODE>text/html</CODE>. 
<em>Status</em> can have the following values:
<dl>
<dt>off
<dd>No special treatment of executable files.
<dt>on
<dd>Any file that has the user-execute bit set will be treated as a
d427 2
a428 2
<dt>full
<dd>As for <code>on</code> but also test the group-execute bit. If it
d433 2
a434 2
<p><b>Note:</b> you would not want to use this, for example, when you
<code>#include</code> a CGI that produces different output on each hit
d436 10
a445 2
</dl>
<p>
d448 1
d450 1
a450 1
 Apache HTTP Server Version 1.2
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d24 1
a24 1
This module is contained in the <CODE>mod_include.c</CODE> file, and
d26 3
a28 3
documents. Several directives beyond the original NCSA definition were
introduced in Apache 1.2 - these are flagged below with the phrase
"Apache 1.2 and above".  Of particular significance are the new flow
d58 3
a60 3
<CODE>text/x-server-parsed-html</CODE> or
<CODE>text/x-server-parsed-html3</CODE> will also be parsed
(and the resulting output given the mime type <CODE>text/html</CODE>).
d62 1
a62 1
<H2>Basic Elements</H2>
d67 4
a70 4
<BLOCKQUOTE><CODE>
&lt;!--#</CODE><EM>element attribute=value attribute=value ...</EM>
<CODE> --&gt;
</CODE></BLOCKQUOTE>
d76 2
a77 2
<P>
The allowed elements are:<P>
d79 1
a79 1
<DL>
d81 2
a82 2
<DT><STRONG>config</STRONG>
<DD>
d85 3
a87 3
<DL>
<DT>errmsg
<DD>The value is a message that is sent back to the client if an error occurs
d89 6
a94 6
<DT>sizefmt
<DD>The value sets the format to be used which displaying the size of a file.
Valid values are <CODE>bytes</CODE> for a count in bytes, or
<CODE>abbrev</CODE> for a count in Kb or Mb as appropriate.
<DT>timefmt
<DD>The value is a string to be used by the <CODE>strftime(3)</CODE> library
d96 1
a96 1
</DL>
d98 2
a99 2
<DT><STRONG>echo</STRONG>
<DD>
d101 2
a102 2
If the variable is unset, it is printed as <CODE>(none)</CODE>.
Any dates printed are subject to the currently configured <CODE>timefmt</CODE>.
d104 4
a107 4
<DL>
<DT>var
<DD>The value is the name of the variable to print.
</DL>
d109 2
a110 2
<DT><STRONG>exec</STRONG>
<DD>
d114 3
a116 3
<DL>
<DT>cgi
<DD>
d123 1
a123 1
or the ExecCGI <A HREF="core.html#options">Option</A>).<P>
d127 1
a127 1
standard <A HREF="mod_cgi.html">CGI</A> environment.<P>
d129 5
a133 5
will be translated into an HTML anchor.<P>
The <CODE>include virtual</CODE> element should be used in preference to
<CODE>exec cgi</CODE>.
<DT>cmd
<DD>The server will execute the given string using <CODE>/bin/sh</CODE>.
d135 1
a135 1
</DL>
d137 2
a138 2
<DT><STRONG>fsize</STRONG>
<DD>
d140 4
a143 4
<CODE>sizefmt</CODE> format specification. Attributes:
<DL>
<DT>file
<DD>The value is a path relative to the directory containing the current
d145 2
a146 2
<DT>virtual
<DD>The value is a (%-encoded) URL-path relative to the current document being
d149 1
a149 1
</DL>
d151 2
a152 2
<DT><STRONG>flastmod</STRONG>
<DD>
d154 2
a155 2
subject to the <CODE>timefmt</CODE> format specification. The attributes are
the same as for the <CODE>fsize</CODE> command.
d157 2
a158 2
<DT><STRONG>include</STRONG>
<DD>
d168 1
a168 1
<P>
d172 5
a176 5
<DL>
<DT>file
<DD>The value is a path relative to the directory containing the current
document being parsed. It cannot contain <CODE>../</CODE>, nor can it be an
absolute path. The <CODE>virtual</CODE> attribute should always be used
d178 2
a179 2
<DT>virtual
<DD>The value is a (%-encoded) URL relative to the current document being
d183 1
a183 1
</DL>
d188 2
a189 2
<DT><STRONG>printenv</STRONG>
<DD>This prints out a listing of all existing variables and their values.
d191 2
a192 2
<DD>For example: <CODE>&lt;!--#printenv --&gt;</CODE>
<DD>Apache 1.2 and above.
d194 9
a202 9
<DT><STRONG>set</STRONG>
<DD>This sets the value of a variable.  Attributes:
<DL>
<DT>var
<DD>The name of the variable to set.
<DT>value
<DD>The value to give a variable.
</DL>
For example:
d204 1
a204 1
<DD>Apache 1.2 and above.
d206 1
a206 1
</DL>
d208 1
a208 1
<H2>Include Variables</H2>
d211 2
a212 2
available for the <CODE>echo</CODE> command, for <CODE>if</CODE> and
<CODE>elif</CODE>, and to any program invoked by the document.
d214 7
a220 7
<DL>
<DT>DATE_GMT
<DD>The current date in Greenwich Mean Time.
<DT>DATE_LOCAL
<DD>The current date in the local time zone.
<DT>DOCUMENT_NAME
<DD>The filename (excluding directories) of the document requested by the
d222 3
a224 3
<DT>DOCUMENT_URI
<DD>The (%-decoded) URL path of the document requested by the user. Note that
in the case of nested include files, this is <EM>not</EM> then URL for the
d226 4
a229 4
<DT>LAST_MODIFIED
<DD>The last modification date of the document requested by the user.
</DL>
<P>
d263 2
a264 2
<P> EXAMPLE: the below example will print "in foo" if the DOCUMENT_URI is
/foo/file.html, "in bar" if it is /bar/file.html and "in neither"
d276 1
a276 1
<H2><A NAME="flowctrl">Flow Control Elements</A></H2>
d282 2
a283 2
    &lt;!--#if expr="<EM>test_condition</EM>" --&gt;
    &lt;!--#elif expr="<EM>test_condition</EM>" --&gt;
d288 1
a288 1
<P> The <STRONG><CODE>if</CODE></STRONG> element works like an
d291 2
a292 2
    the next <STRONG><CODE>elif</CODE></STRONG>, <STRONG><CODE>else</CODE></STRONG>.
    or <STRONG><CODE>endif</CODE></STRONG> element is included in the
d295 1
a295 1
<P> The <STRONG><CODE>elif</CODE></STRONG> or <STRONG><CODE>else</CODE></STRONG>
d300 2
a301 2
<P> The <STRONG><CODE>endif</CODE></STRONG> element ends the
    <STRONG><CODE>if</CODE></STRONG> element and is required.
d303 1
a303 1
<P> <EM>test_condition</EM> is one of the following:
d307 1
a307 1
<DT><EM>string</EM><DD>true if <EM>string</EM> is not empty
d309 2
a310 11
<DT><EM>string1</EM> = <EM>string2</EM>
    <BR>
    <EM>string1</EM> != <EM>string2</EM>
    <BR>
    <EM>string1</EM> &lt; <EM>string2</EM>
    <BR>
    <EM>string1</EM> &lt;= <EM>string2</EM>
    <BR>
    <EM>string1</EM> &gt; <EM>string2</EM>
    <BR>
    <EM>string1</EM> &gt;= <EM>string2</EM>
d312 2
a313 2
<DD>Compare string1 with string 2.  If string2 has the form <EM>/string/</EM>
    then it is compared as a regular expression.
d315 1
a315 1
    Unix <SAMP>egrep</SAMP> command.
d317 10
a326 10
<DT>( <EM>test_condition</EM> )
        <DD>true if <EM>test_condition</EM> is true
<DT>! <EM>test_condition</EM>
        <DD>true if <EM>test_condition</EM> is false
<DT><EM>test_condition1</EM> && <EM>test_condition2</EM>
        <DD>true if both <EM>test_condition1</EM> and
        <EM>test_condition2</EM> are true
<DT><EM>test_condition1</EM> || <EM>test_condition2</EM>
        <DD>true if either <EM>test_condition1</EM> or
        <EM>test_condition2</EM> is true
d329 3
a331 3
<P> "<EM>=</EM>" and "<EM>!=</EM>" bind more tightly than "<EM>&&</EM>" and
    "<EM>||</EM>".
    "<EM>!</EM>" binds most tightly.  Thus, the following are equivalent:
d339 1
a339 1
    treated as a string.  Strings can also be quoted: <EM>'string'</EM>.
d346 2
a347 2
     <EM>string1    string2</EM>  results in <EM>string1 string2</EM>
    <EM>'string1    string2'</EM> results in <EM>string1    string2</EM>
d350 6
a355 6
<HR>
<H2>Directives</H2>
<UL>
<LI><A HREF="#xbithack">XBitHack</A>
</UL>
<HR>
d358 1
a358 1
<H2><A NAME="xbithack">XBitHack</A></H2>
d360 6
a365 24
<A
 HREF="directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> XBitHack <EM>status</EM><BR>
<A
 HREF="directive-dict.html#Default"
 REL="Help"
><STRONG>Default:</STRONG></A> <CODE>XBitHack off</CODE><BR>
<A
 HREF="directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host, directory, .htaccess<BR>
<A
 HREF="directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> Options<BR>
<A
 HREF="directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_include<P>
d369 7
a375 7
<CODE>text/html</CODE>.
<EM>Status</EM> can have the following values:
<DL>
<DT>off
<DD>No special treatment of executable files.
<DT>on
<DD>Any file that has the user-execute bit set will be treated as a
d377 2
a378 2
<DT>full
<DD>As for <CODE>on</CODE> but also test the group-execute bit. If it
d383 2
a384 2
<P><STRONG>Note:</STRONG> you would not want to use this, for example, when you
<CODE>#include</CODE> a CGI that produces different output on each hit
d386 2
a387 10
</DL>
<P>

<HR>
<H2>Using Server Side Includes for ErrorDocuments</H2>

There is <A HREF="../misc/custom_errordocs.html">a document</A> which
describes how to use the features of mod_include to offer internationalized
customized server error documents.
<P>
a389 1

d391 1
a391 1
 Apache HTTP Server Version 1.3
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 37
a37 2
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
d39 1
a39 61
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_include</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_include</h1>

    <p>This module provides for documents with Server Side Includes
    (SSI).</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a>
    mod_include.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    includes_module</p>

    <h2>Summary</h2>

    <p>This module provides a handler which will process files
    before they are sent to the client. The processing is
    controlled by specially formated SGML comments, referred to as
    <em>elements</em>. These elements allow conditional text, the
    inclusion other files or programs, as well as the setting and
    printing of environment variables.</p>

    <p>For an introduction to this topic, we also provide a <a
    href="../howto/ssi.html">tutorial on Server Side
    Includes</a>.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#xbithack">XBitHack</a></li>
    </ul>

    <p>See also: <a href="core.html#options">Options</a> and <a
    href="mod_mime.html#addhandler">AddHandler</a>.</p>

    <h2>Enabling Server-Side Includes</h2>
    Any document with handler of "server-parsed" will be parsed by
    this module, if the <code>Includes</code> option is set. If
    documents containing server-side include directives are given
    the extension .shtml, the following directives will make Apache
    parse them and assign the resulting document the mime type of
    <code>text/html</code>: 
<pre>
d42 8
a49 7
</pre>
    The following directive must be given for the directories
    containing the shtml files (typically in a
    <code>&lt;Directory&gt;</code> section, but this directive is
    also valid .htaccess files if <code>AllowOverride
    Options</code> is set): 
<pre>
d51 195
a245 342
</pre>
    Alternatively the <a href="#xbithack"><code>XBitHack</code></a>
    directive can be used to parse normal (<code>text/html</code>)
    files, based on file permissions. 

    <p>For backwards compatibility, documents with mime type
    <code>text/x-server-parsed-html</code> or
    <code>text/x-server-parsed-html3</code> will also be parsed
    (and the resulting output given the mime type
    <code>text/html</code>).</p>

    <h2>Basic Elements</h2>
    The document is parsed as an HTML document, with special
    commands embedded as SGML comments. A command has the syntax: 

    <blockquote>
      <code>&lt;!--#</code><em>element attribute=value
      attribute=value ...</em> <code>--&gt;</code>
    </blockquote>
    The value will often be enclosed in double quotes; many
    commands only allow a single attribute-value pair. Note that
    the comment terminator (<samp>--&gt;</samp>) should be preceded
    by whitespace to ensure that it isn't considered part of an SSI
    token. 

    <p>The allowed elements are:</p>

    <dl>
      <dt><strong>config</strong></dt>

      <dd>
        This command controls various aspects of the parsing. The
        valid attributes are: 

        <dl>
          <dt><strong>errmsg</strong></dt>

          <dd>The value is a message that is sent back to the
          client if an error occurs whilst parsing the
          document.</dd>

          <dt><strong>sizefmt</strong></dt>

          <dd>The value sets the format to be used which displaying
          the size of a file. Valid values are <code>bytes</code>
          for a count in bytes, or <code>abbrev</code> for a count
          in Kb or Mb as appropriate.</dd>

          <dt><strong>timefmt</strong></dt>

          <dd>The value is a string to be used by the
          <code>strftime(3)</code> library routine when printing
          dates.</dd>
        </dl>
      </dd>

      <dt><strong><a id="echo" name="echo">echo</a></strong></dt>

      <dd>
        This command prints one of the <a href="#includevars">include
        variables</a>, defined
        below. If the variable is unset, it is printed as
        <code>(none)</code>. Any dates printed are subject to the
        currently configured <code>timefmt</code>. Attributes: 

        <dl>
          <dt><strong>var</strong></dt>

          <dd>The value is the name of the variable to print.</dd>

          <dt><strong>encoding</strong></dt>

          <dd>Specifies how Apache should encode special characters
          contained in the variable before outputting them. If set
          to "none", no encoding will be done. If set to "url",
          then URL encoding (also known as %-encoding; this is
          appropriate for use within URLs in links, etc.) will be
          performed. At the start of an <code>echo</code> element,
          the default is set to "entity", resulting in entity
          encoding (which is appropriate in the context of a
          block-level HTML element, eg. a paragraph of text). This
          can be changed by adding an <code>encoding</code>
          attribute, which will remain in effect until the next
          <code>encoding</code> attribute is encountered or the
          element ends, whichever comes first. Note that the
          <code>encoding</code> attribute must <em>precede</em> the
          corresponding <code>var</code> attribute to be effective,
          and that only special characters as defined in the
          ISO-8859-1 character encoding will be encoded. This
          encoding process may not have the desired result if a
          different character encoding is in use. Apache 1.3.12 and
          above; previous versions do no encoding.</dd>
        </dl>
      </dd>

      <dt><strong>exec</strong></dt>

      <dd>
        The exec command executes a given shell command or CGI
        script. The IncludesNOEXEC <a
        href="core.html#options">Option</a> disables this command
        completely. The valid attributes are: 

        <dl>
          <dt><strong>cgi</strong></dt>

          <dd>
            The value specifies a (%-encoded) URL relative path to
            the CGI script. If the path does not begin with a (/),
            then it is taken to be relative to the current
            document. The document referenced by this path is
            invoked as a CGI script, even if the server would not
            normally recognize it as such. However, the directory
            containing the script must be enabled for CGI scripts
            (with <a
            href="mod_alias.html#scriptalias">ScriptAlias</a> or
            the ExecCGI <a href="core.html#options">Option</a>). 

            <p>The CGI script is given the PATH_INFO and query
            string (QUERY_STRING) of the original request from the
            client; these cannot be specified in the URL path. The
            include variables will be available to the script in
            addition to the standard <a href="mod_cgi.html">CGI</a>
            environment.</p>

            <p>For example:</p>

  <code>&lt;!--#exec cgi="/cgi-bin/example.cgi" --&gt;</code>

            <p>If the script returns a Location: header instead of
            output, then this will be translated into an HTML
            anchor.</p>

            <p>The <code><a href="#includevirtual">include
            virtual</a></code> element should be
            used in preference to <code>exec cgi</code>. In particular,
            if you need to pass additional arguments to a CGI program,
            using the query string, this cannot be done with <code>exec
            cgi</code>, but can be done with <code>include
            virtual</code>, as shown here:</p>

  <code>&lt;!--#include virtual="/cgi-bin/example.cgi?argument=value" --&gt;</code>
          </dd>

          <dt><strong>cmd</strong></dt>

          <dd>
          <p>The server will execute the given string using
          <code>/bin/sh</code>. The <a 
          href="#includevars">include variables</a> are available
          to the command, in addition to the usual set of CGI 
          variables.</p>

        <p>The use of <code><a href="#includevirtual">#include 
        virtual</a></code> is almost always
        prefered to using either <code>#exec cgi</code> or <code>#exec
        cmd</code>. The former (<code>#include virtual</code>) used the
        standard Apache sub-request mechanism to include files or
        scripts. It is much better tested and maintained.</p>

          <p>In addition, on some platforms, like Win32, and on unix
          when using suexec, you cannot pass arguments to a command in 
          an <code>exec</code> directive, or otherwise include spaces in
          the command. Thus, while the following will work under a
          non-suexec configuration on unix, it will not produce the
          desired result under Win32, or when running suexec:</p>

   <code>&lt;!--#exec cmd="perl /path/to/perlscript arg1 arg2" --&gt;</code>

          </dd>
        </dl>
      </dd>

      <dt><strong>fsize</strong></dt>

      <dd>
        This command prints the size of the specified file, subject
        to the <code>sizefmt</code> format specification.
        Attributes: 

        <dl>
          <dt><strong>file</strong></dt>

          <dd>The value is a path relative to the directory
          containing the current document being parsed.</dd>

          <dt><strong>virtual</strong></dt>

          <dd>The value is a (%-encoded) URL-path relative to the
          current document being parsed. If it does not begin with
          a slash (/) then it is taken to be relative to the
          current document.</dd>
        </dl>
      </dd>

      <dt><strong>flastmod</strong></dt>

      <dd>This command prints the last modification date of the
      specified file, subject to the <code>timefmt</code> format
      specification. The attributes are the same as for the
      <code>fsize</code> command.</dd>

      <dt><strong>include</strong></dt>

      <dd>
        This command inserts the text of another document or file
        into the parsed file. Any included file is subject to the
        usual access control. If the directory containing the
        parsed file has the <a href="core.html#options">Option</a>
        IncludesNOEXEC set, and the including the document would
        cause a program to be executed, then it will not be
        included; this prevents the execution of CGI scripts.
        Otherwise CGI scripts are invoked as normal using the
        complete URL given in the command, including any query
        string. 

        <p>An attribute defines the location of the document; the
        inclusion is done for each attribute given to the include
        command. The valid attributes are:</p>

        <dl>
          <dt><strong>file</strong></dt>

          <dd>The value is a path relative to the directory
          containing the current document being parsed. It cannot
          contain <code>../</code>, nor can it be an absolute path.
          Therefore, you cannot include files that are outside of the
          document root, or above the current document in the directory
          structure.
          The <code>virtual</code> attribute should always be used
          in preference to this one.</dd>

          <dt><strong><a name="includevirtual">virtual</a></strong></dt>

         <dd>
          <p>The value is a (%-encoded) URL relative to the
          current document being parsed. The URL cannot contain a
          scheme or hostname, only a path and an optional query
          string. If it does not begin with a slash (/) then it is
          taken to be relative to the current document.</p>

          <p>A URL is constructed from the attribute, and the output the
           server would return if the URL were accessed by the client
           is included in the parsed output. Thus included files can
           be nested.</p>

           <p>If the specified URL is a CGI program, the program will
           be executed and its output inserted in place of the directive
           in the parsed file. You may include a query string in a CGI
           url:</p>
     
     <code>&lt;!--#include virtual="/cgi-bin/example.cgi?argument=value" --&gt;</code>
           
           <p><code>include virtual</code> should be used in preference
           to <code>exec cgi</code> to include the output of CGI
           programs into an HTML document.
          </dd>
        </dl>
      </dd>

      <dt><strong>printenv</strong></dt>

      <dd>
      <p>This prints out a listing of all existing variables and
      their values. Starting with Apache 1.3.12, special characters
      are entity encoded (see the <a
      href="#echo"><code>echo</code></a> element for details)
      before being output. There are no attributes.</p>

      <p>For example:</p>
      
      <p><code>&lt;!--#printenv --&gt;</code></p>

      <p>The <strong>printenv</strong> element is available only in
      Apache 1.2 and above.</p>
    </dd>
      <dt><strong>set</strong></dt>

      <dd>
        This sets the value of a variable. Attributes: 

        <dl>
          <dt><strong>var</strong></dt>

          <dd>The name of the variable to set.</dd>

          <dt><strong>value</strong></dt>

          <dd>The value to give a variable.</dd>
        </dl>
        <p>
        For example: <code>&lt;!--#set var="category" value="help"
        --&gt;</code></p>

      <p>The <strong>set</strong> element is available only in
      Apache 1.2 and above.</p>
      </dd>
    </dl>

    <h2><a name="includevars">Include Variables</a></h2>
    In addition to the variables in the standard CGI environment,
    these are available for the <code>echo</code> command, for
    <code>if</code> and <code>elif</code>, and to any program
    invoked by the document. 

    <dl>
      <dt>DATE_GMT</dt>

      <dd>The current date in Greenwich Mean Time.</dd>

      <dt>DATE_LOCAL</dt>

      <dd>The current date in the local time zone.</dd>

      <dt>DOCUMENT_NAME</dt>

      <dd>The filename (excluding directories) of the document
      requested by the user.</dd>

      <dt>DOCUMENT_URI</dt>

      <dd>The (%-decoded) URL path of the document requested by the
      user. Note that in the case of nested include files, this is
      <em>not</em> then URL for the current document.</dd>

      <dt>LAST_MODIFIED</dt>

      <dd>The last modification date of the document requested by
      the user.</dd>
    </dl>

    <h2>Variable Substitution</h2>

    <p>Variable substitution is done within quoted strings in most
    cases where they may reasonably occur as an argument to an SSI
    directive. This includes the <samp>config</samp>,
    <samp>exec</samp>, <samp>flastmod</samp>, <samp>fsize</samp>,
    <samp>include</samp>, and <samp>set</samp> directives, as well
    as the arguments to conditional operators. You can insert a
    literal dollar sign into the string using backslash
    quoting:</p>
<pre>
d247 1
a247 1
</pre>
d249 6
a254 6
    <p>If a variable reference needs to be substituted in the
    middle of a character sequence that might otherwise be
    considered a valid identifier in its own right, it can be
    disambiguated by enclosing the reference in braces,
    <em>&agrave; la</em> shell substitution:</p>
<pre>
d256 1
a256 1
</pre>
d258 9
a266 9
    <p>This will result in the <samp>Zed</samp> variable being set
    to "<samp>X_Y</samp>" if <samp>REMOTE_HOST</samp> is
    "<samp>X</samp>" and <samp>REQUEST_METHOD</samp> is
    "<samp>Y</samp>".</p>

    <p>EXAMPLE: the below example will print "in foo" if the
    DOCUMENT_URI is /foo/file.html, "in bar" if it is
    /bar/file.html and "in neither" otherwise:</p>
<pre>
d274 3
a276 1
</pre>
d278 6
a283 7
    <h2><a id="flowctrl" name="flowctrl">Flow Control
    Elements</a></h2>
    These are available in Apache 1.2 and above. The basic flow
    control elements are: 
<pre>
    &lt;!--#if expr="<em>test_condition</em>" --&gt;
    &lt;!--#elif expr="<em>test_condition</em>" --&gt;
d286 143
a428 1
</pre>
d430 2
a431 140
    <p>The <strong><code>if</code></strong> element works like an
    if statement in a programming language. The test condition is
    evaluated and if the result is true, then the text until the
    next <strong><code>elif</code></strong>,
    <strong><code>else</code></strong>. or
    <strong><code>endif</code></strong> element is included in the
    output stream.</p>

    <p>The <strong><code>elif</code></strong> or
    <strong><code>else</code></strong> statements are be used the
    put text into the output stream if the original test_condition
    was false. These elements are optional.</p>

    <p>The <strong><code>endif</code></strong> element ends the
    <strong><code>if</code></strong> element and is required.</p>

    <p><em>test_condition</em> is one of the following:</p>

    <dl>
      <dt><em>string</em></dt>

      <dd>true if <em>string</em> is not empty</dd>

      <dt><em>string1</em> = <em>string2</em><br />
       <em>string1</em> != <em>string2</em><br />
       <em>string1</em> &lt; <em>string2</em><br />
       <em>string1</em> &lt;= <em>string2</em><br />
       <em>string1</em> &gt; <em>string2</em><br />
       <em>string1</em> &gt;= <em>string2</em></dt>

      <dd>Compare string1 with string 2. If string2 has the form
      <em>/string/</em> then it is compared as a regular
      expression. Regular expressions have the same syntax as those
      found in the Unix <samp>egrep</samp> command.</dd>

      <dt>( <em>test_condition</em> )</dt>

      <dd>true if <em>test_condition</em> is true</dd>

      <dt>! <em>test_condition</em></dt>

      <dd>true if <em>test_condition</em> is false</dd>

      <dt><em>test_condition1</em> &amp;&amp;
      <em>test_condition2</em></dt>

      <dd>true if both <em>test_condition1</em> and
      <em>test_condition2</em> are true</dd>

      <dt><em>test_condition1</em> || <em>test_condition2</em></dt>

      <dd>true if either <em>test_condition1</em> or
      <em>test_condition2</em> is true</dd>
    </dl>

    <p>"<em>=</em>" and "<em>!=</em>" bind more tightly than
    "<em>&amp;&amp;</em>" and "<em>||</em>". "<em>!</em>" binds
    most tightly. Thus, the following are equivalent:</p>
<pre>
    &lt;!--#if expr="$a = test1 &amp;&amp; $b = test2" --&gt;
    &lt;!--#if expr="($a = test1) &amp;&amp; ($b = test2)" --&gt;
</pre>

    <p>Anything that's not recognized as a variable or an operator
    is treated as a string. Strings can also be quoted:
    <em>'string'</em>. Unquoted strings can't contain whitespace
    (blanks and tabs) because it is used to separate tokens such as
    variables. If multiple strings are found in a row, they are
    concatenated using blanks. So,</p>
<pre>
     <em>string1    string2</em>  results in <em>string1 string2</em>
    <em>'string1    string2'</em> results in <em>string1    string2</em>
</pre>

    <h2>Using Server Side Includes for ErrorDocuments</h2>
    There is <a href="../misc/custom_errordocs.html">a document</a>
    which describes how to use the features of mod_include to offer
    internationalized customized server error documents. 
    <hr />

    <h2><a id="xbithack" name="xbithack">XBitHack</a>
    directive</h2>

    <a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> XBitHack
    on|off|full<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <code>XBitHack
    off</code><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> Options<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_include 

    <p>The XBitHack directives controls the parsing of ordinary
    html documents. This directive only affects files associated
    with the MIME type <code>text/html</code>. XBitHack can take on
    the following values:</p>

    <dl>
      <dt>off</dt>

      <dd>No special treatment of executable files.</dd>

      <dt>on</dt>

      <dd>Any file that has the user-execute bit set will be
      treated as a server-parsed html document.</dd>

      <dt>full</dt>

      <dd>
        As for <code>on</code> but also test the group-execute bit.
        If it is set, then set the Last-modified date of the
        returned file to be the last modified time of the file. If
        it is not set, then no last-modified date is sent. Setting
        this bit allows clients and proxies to cache the result of
        the request. 

        <p><strong>Note:</strong> you would not want to use this,
        for example, when you <code>#include</code> a CGI that
        produces different output on each hit (or potentially
        depends on the hit).</p>
      </dd>
    </dl>

    <p>    <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

    </p>
  </body>
</html>
d433 2
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@a403 5

      <dt>USER_NAME</dt>
    
      <dd>Contains the owner of the file which included it.</dd>

@


