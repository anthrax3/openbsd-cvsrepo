head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.38
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.34
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.32
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2005.07.29.23.55.40;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.48;	author beck;	state dead;
branches;
next	1.4;

1.4
date	2001.03.29.10.21.33;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.22.17.40;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.07;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.20.07;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.20.07;	author beck;	state Exp;
branches;
next	;


desc
@@


1.7
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache module mod_setenvif</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Module mod_setenvif</h1>

    <p>This module provides the ability to set environment
    variables based upon attributes of the request.</p>

    <p><a href="module-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="module-dict.html#SourceFile"
    rel="Help"><strong>Source File:</strong></a>
    mod_setenvif.c<br />
     <a href="module-dict.html#ModuleIdentifier"
    rel="Help"><strong>Module Identifier:</strong></a>
    setenvif_module<br />
     <a href="module-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Available in
    Apache 1.3 and later.</p>

    <h2>Summary</h2>

    <p>The <samp>mod_setenvif</samp> module allows you to set
    environment variables according to whether different aspects of
    the request match <a href="../misc/FAQ.html#regex">regular
    expressions</a> you specify. These environment variables can be
    used by other parts of the server to make decisions about
    actions to be taken.</p>

    <p>The directives are considered in the order they appear in
    the configuration files. So more complex sequences can be used,
    such as this example, which sets <code>netscape</code> if the
    browser is mozilla but not MSIE.</p>

    <blockquote>
<pre>
  BrowserMatch ^Mozilla netscape
  BrowserMatch MSIE !netscape
 
</pre>
    </blockquote>

    <p>For additional information, we provide a document on <a
    href="../env.html">Environment Variables in Apache</a>.</p>

    <h2>Directives</h2>

    <ul>
      <li><a href="#browsermatch">BrowserMatch</a></li>

      <li><a href="#browsermatchnocase">BrowserMatchNoCase</a></li>

      <li><a href="#setenvif">SetEnvIf</a></li>

      <li><a href="#setenvifnocase">SetEnvIfNoCase</a></li>
    </ul>
    <hr />
    <!-- the HR is part of the directive description -->

    <h2><a id="browsermatch" name="browsermatch">BrowserMatch
    directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> BrowserMatch <em>regex
    env-variable</em>[=<em>value</em>]
    [<em>env-variable</em>[=<em>value</em>]] ...<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <i>none</i><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> FileInfo<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_setenvif<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Apache 1.2 and
    above (in Apache 1.2 this directive was found in the
    now-obsolete mod_browser module); use in .htaccess files only
    supported with 1.3.13 and later</p>

    <p>The BrowserMatch directive defines environment variables
    based on the <samp>User-Agent</samp> HTTP request header field.
    The first argument should be a POSIX.2 extended regular
    expression (similar to an <samp>egrep</samp>-style regex). The
    rest of the arguments give the names of variables to set, and
    optionally values to which they should be set. These take the
    form of</p>

    <ol>
      <li><samp><em>varname</em></samp>, or</li>

      <li><samp>!<em>varname</em></samp>, or</li>

      <li><samp><em>varname</em>=<em>value</em></samp></li>
    </ol>

    <p>In the first form, the value will be set to "1". The second
    will remove the given variable if already defined, and the
    third will set the variable to the value given by
    <samp><em>value</em></samp>. If a <samp>User-Agent</samp>
    string matches more than one entry, they will be merged.
    Entries are processed in the order in which they appear, and
    later entries can override earlier ones.</p>

    <p>For example:</p>
<pre>
    BrowserMatch ^Mozilla forms jpeg=yes browser=netscape
    BrowserMatch "^Mozilla/[2-3]" tables agif frames javascript
    BrowserMatch MSIE !javascript
 
</pre>

    <p>Note that the regular expression string is
    <strong>case-sensitive</strong>. For case-INsensitive matching,
    see the <a
    href="#browsermatchnocase"><samp>BrowserMatchNoCase</samp></a>
    directive.</p>

    <p>The <samp>BrowserMatch</samp> and
    <samp>BrowserMatchNoCase</samp> directives are special cases of
    the <a href="#setenvif"><samp>SetEnvIf</samp></a> and <a
    href="#setenvifnocase"><samp>SetEnvIfNoCase</samp></a>
    directives. The following two lines have the same effect:</p>
<pre>
   BrowserMatchNoCase Robot is_a_robot
   SetEnvIfNoCase User-Agent Robot is_a_robot
 
</pre>
    <hr />
    <!-- the HR is part of the directive description -->

    <h2><a id="browsermatchnocase"
    name="browsermatchnocase">BrowserMatchNoCase directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> BrowserMatchNoCase
    <em>regex env-variable</em>[=<em>value</em>]
    [<em>env-variable</em>[=<em>value</em>]] ...<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <em>none</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> FileInfo<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_setenvif<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Apache 1.2 and
    above (in Apache 1.2 this directive was found in the
    now-obsolete mod_browser module)</p>

    <p>The <samp>BrowserMatchNoCase</samp> directive is
    semantically identical to the <a
    href="#BrowserMatch"><samp>BrowserMatch</samp></a> directive.
    However, it provides for case-insensitive matching. For
    example:</p>
<pre>
    BrowserMatchNoCase mac platform=macintosh
    BrowserMatchNoCase win platform=windows
 
</pre>

    <p>The <samp>BrowserMatch</samp> and
    <samp>BrowserMatchNoCase</samp> directives are special cases of
    the <a href="#setenvif"><samp>SetEnvIf</samp></a> and <a
    href="#SetEnvIfNoCase"><samp>SetEnvIfNoCase</samp></a>
    directives. The following two lines have the same effect:</p>
<pre>
   BrowserMatchNoCase Robot is_a_robot
   SetEnvIfNoCase User-Agent Robot is_a_robot
 
</pre>
    <hr />
    <!-- the HR is part of the directive description -->

    <h2><a id="setenvif" name="setenvif">SetEnvIf
    directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> SetEnvIf <em>attribute
    regex env-variable</em>[=<em>value</em>]
    [<em>env-variable</em>[=<em>value</em>]] ...<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <em>none</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> FileInfo<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_setenvif<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Apache 1.3 and
    above; the Request_Protocol keyword and environment-variable
    matching are only available with 1.3.7 and later; use in
    .htaccess files only supported with 1.3.13 and later</p>

    <p>The <samp>SetEnvIf</samp> directive defines environment
    variables based on attributes of the request. These attributes
    can be the values of various HTTP request header fields (see <a
    href="http://www.rfc-editor.org/rfc/rfc2616.txt">RFC2616</a>
    for more information about these), or of other aspects of the
    request, including the following:</p>

    <ul>
      <li><samp>Remote_Host</samp> - the hostname (if available) of
      the client making the request</li>

      <li><samp>Remote_Addr</samp> - the IP address of the client
      making the request</li>

      <li><samp>Remote_User</samp> - the authenticated username (if
      available)</li>

      <li><samp>Request_Method</samp> - the name of the method
      being used (<samp>GET</samp>, <samp>POST</samp>, <em>et
      cetera</em>)</li>

      <li><samp>Request_Protocol</samp> - the name and version of
      the protocol with which the request was made (<em>e.g.</em>,
      "HTTP/0.9", "HTTP/1.1", <em>etc.</em>)</li>

      <li><samp>Request_URI</samp> - the portion of the URL
      following the scheme and host portion</li>
    </ul>

    <p>Some of the more commonly used request header field names
    include <samp>Host</samp>, <samp>User-Agent</samp>, and
    <samp>Referer</samp>.</p>

    <p>If the <em>attribute</em> name doesn't match any of the
    special keywords, nor any of the request's header field names,
    it is tested as the name of an environment variable in the list
    of those associated with the request. This allows
    <code>SetEnvIf</code> directives to test against the result of
    prior matches.</p>

    <blockquote>
      <strong>Only those environment variables defined by earlier
      <code>SetEnvIf[NoCase]</code> directives are available for
      testing in this manner. 'Earlier' means that they were
      defined at a broader scope (such as server-wide) or
      previously in the current directive's scope.</strong>
    </blockquote>

    <p>Example:</p>
<pre>
   SetEnvIf Request_URI "\.gif$" object_is_image=gif
   SetEnvIf Request_URI "\.jpg$" object_is_image=jpg
   SetEnvIf Request_URI "\.xbm$" object_is_image=xbm
        :
   SetEnvIf Referer www\.mydomain\.com intra_site_referral
        :
   SetEnvIf object_is_image xbm XBIT_PROCESSING=1
 
</pre>

    <p>The first three will set the environment variable
    <samp>object_is_image</samp> if the request was for an image
    file, and the fourth sets <samp>intra_site_referral</samp> if
    the referring page was somewhere on the
    <samp>www.mydomain.com</samp> Web site.</p>
    <hr />
    <!-- the HR is part of the directive description -->

    <h2><a id="setenvifnocase" name="setenvifnocase">SetEnvIfNoCase
    directive</a></h2>

    <p><a href="directive-dict.html#Syntax"
    rel="Help"><strong>Syntax:</strong></a> SetEnvIfNoCase
    <em>attribute regex env-variable</em>[=<em>value</em>]
    [<em>env-variable</em>[=<em>value</em>]] ...<br />
     <a href="directive-dict.html#Default"
    rel="Help"><strong>Default:</strong></a> <em>none</em><br />
     <a href="directive-dict.html#Context"
    rel="Help"><strong>Context:</strong></a> server config, virtual
    host, directory, .htaccess<br />
     <a href="directive-dict.html#Override"
    rel="Help"><strong>Override:</strong></a> FileInfo<br />
     <a href="directive-dict.html#Status"
    rel="Help"><strong>Status:</strong></a> Base<br />
     <a href="directive-dict.html#Module"
    rel="Help"><strong>Module:</strong></a> mod_setenvif<br />
     <a href="directive-dict.html#Compatibility"
    rel="Help"><strong>Compatibility:</strong></a> Apache 1.3 and
    above; the Request_Protocol keyword and environment-variable
    matching are only available with 1.3.7 and later; use in
    .htaccess files only supported with 1.3.13 and later</p>

    <p>The <samp>SetEnvIfNoCase</samp> is semantically identical to
    the <a href="#setenvif"><samp>SetEnvIf</samp></a> directive,
    and differs only in that the regular expression matching is
    performed in a case-insensitive manner. For example:</p>
<pre>
   SetEnvIfNoCase Host Apache\.Org site=apache
 
</pre>

    <p>This will cause the <samp>site</samp> environment variable
    to be set to "<samp>apache</samp>" if the HTTP request header
    field <samp>Host:</samp> was included and contained
    <samp>Apache.Org</samp>, <samp>apache.org</samp>, or any other
    combination.</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>



@


1.6
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d1 52
a52 60
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
 <HEAD>
  <TITLE>Apache module mod_setenvif</TITLE>
 </HEAD>
<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
 <BODY
  BGCOLOR="#FFFFFF"
  TEXT="#000000"
  LINK="#0000FF"
  VLINK="#000080"
  ALINK="#FF0000"
 >
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

  <H1 ALIGN="CENTER">Module mod_setenvif</H1>
  <P>
  This module provides the ability to set environment variables based
  upon attributes of the request.
  </P>
 
<P><A
HREF="module-dict.html#Status"
REL="Help"
><STRONG>Status:</STRONG></A> Base
<BR>
<A
HREF="module-dict.html#SourceFile"
REL="Help"
><STRONG>Source File:</STRONG></A> mod_setenvif.c
<BR>
<A
HREF="module-dict.html#ModuleIdentifier"
REL="Help"
><STRONG>Module Identifier:</STRONG></A> setenvif_module
<BR>
<A
HREF="module-dict.html#Compatibility"
REL="Help"
><STRONG>Compatibility:</STRONG></A> Available in Apache 1.3 and later.
</P>

 <H2>Summary</H2>
  <P>
  The <SAMP>mod_setenvif</SAMP> module allows you to set environment
  variables according to whether different aspects of the request match
  <a href="../misc/FAQ.html#regex">regular expressions</a>
  you specify.  These environment variables can be used by
  other parts of the server to make decisions about actions to be taken.
  </P>
  <P>The directives are considered in the order they appear in the
  configuration files.  So more complex sequences can be used, such
  as this example, which sets <CODE>netscape</CODE> if the browser
  is mozilla but not MSIE.
  </P>
d54 2
a55 1
  <BLOCKQUOTE><PRE>
d58 6
a63 1
  </PRE></BLOCKQUOTE>
d65 1
a65 2
  <p>For additional information, we proved a document on
  <a href="../env.html">Environment Variables in Apache</a>.</p>
d67 62
a128 82
  <H2>Directives</H2>
  <UL>
   <LI><A HREF="#BrowserMatch">BrowserMatch</A>
   </LI>
   <LI><A HREF="#BrowserMatchNoCase">BrowserMatchNoCase</A>
   </LI>
   <LI><A HREF="#SetEnvIf">SetEnvIf</A>
   </LI>
   <LI><A HREF="#SetEnvIfNoCase">SetEnvIfNoCase</A>
   </LI>
  </UL>

  <HR> <!-- the HR is part of the directive description -->
  <H2><A NAME="BrowserMatch">BrowserMatch directive</A></H2>
  <P>
  <A
   HREF="directive-dict.html#Syntax"
   REL="Help"
  ><STRONG>Syntax:</STRONG></A> BrowserMatch <EM>regex 
   envar</em>[=<em>value</em>] [<em>envar</em>[=<em>value</em>]] ...
  <BR>
  <A
   HREF="directive-dict.html#Default"
   REL="Help"
  ><STRONG>Default:</STRONG></A> <i>none</i>
  <BR>
  <A
   HREF="directive-dict.html#Context"
   REL="Help"
  ><STRONG>Context:</STRONG></A> server config, virtual host, directory,
   .htaccess
  <BR>
  <A
   HREF="directive-dict.html#Override"
   REL="Help"
  ><STRONG>Override:</STRONG></A> FileInfo
  <BR>
  <A
   HREF="directive-dict.html#Status"
   REL="Help"
  ><STRONG>Status:</STRONG></A> Base
  <BR>
  <A
   HREF="directive-dict.html#Module"
   REL="Help"
  ><STRONG>Module:</STRONG></A> mod_setenvif
  <BR>
  <A
   HREF="directive-dict.html#Compatibility"
   REL="Help"
  ><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above (in Apache 1.2
  this directive was found in the now-obsolete mod_browser module); use
  in .htaccess files only supported with 1.3.13 and later
  </P>
  <P>
  The BrowserMatch directive defines environment variables based on the
  <SAMP>User-Agent</SAMP> HTTP request header field. The first argument
  should be a POSIX.2 extended regular expression (similar to an
  <SAMP>egrep</SAMP>-style regex).  The rest of the arguments give the
  names of variables to set, and optionally values to which they should
  be set. These take the form of
  </P>
  <OL>
   <LI><SAMP><EM>varname</EM></SAMP>, or
   </LI>
   <LI><SAMP>!<EM>varname</EM></SAMP>, or
   </LI>
   <LI><SAMP><EM>varname</EM>=<EM>value</EM></SAMP>
   </LI>
  </OL>
  <P>
  In the first form, the value will be set to &quot;1&quot;. The second
  will remove the given variable if already defined, and the third will
  set the variable to the value given by <SAMP><EM>value</EM></SAMP>. If a
  <SAMP>User-Agent</SAMP> string matches more than one entry, they will
  be merged.  Entries are processed in the order in which they appear,
  and later entries can override earlier ones.
  </P>
  <P>
  For example:
  </P>
  <PRE>
d132 15
a146 23
  </PRE>
  <P>
  Note that the regular expression string is
  <STRONG>case-sensitive</STRONG>.  For cane-INsensitive matching, see
  the
  <A
   HREF="#BrowserMatchNoCase"
  ><SAMP>BrowserMatchNoCase</SAMP></A>
  directive.
  </P>
  <P>
  The <SAMP>BrowserMatch</SAMP> and <SAMP>BrowserMatchNoCase</SAMP>
  directives are special cases of the
  <A
   HREF="#SetEnvIf"
  ><SAMP>SetEnvIf</SAMP></A>
  and
  <A
   HREF="#SetEnvIfNoCase"
  ><SAMP>SetEnvIfNoCase</SAMP></A>
  directives.  The following two lines have the same effect:
  </P>
  <PRE>
d149 34
a182 56
  </PRE>

  <HR> <!-- the HR is part of the directive description -->
  <H2>
   <A NAME="BrowserMatchNoCase">BrowserMatchNoCase directive
   </A>
  </H2>
  <P>
  <A
   HREF="directive-dict.html#Syntax"
   REL="Help"
  ><STRONG>Syntax:</STRONG></A> BrowserMatchNoCase <EM>regex
   envar</em>[=<em>value</em>] [<em>envar</em>[=<em>value</em>]] ...
  <BR>
  <A
   HREF="directive-dict.html#Default"
   REL="Help"
  ><STRONG>Default:</STRONG></A> <EM>none</EM>
  <BR>
  <A
   HREF="directive-dict.html#Context"
   REL="Help"
  ><STRONG>Context:</STRONG></A> server config, virtual host, directory,
   .htaccess
  <BR>
  <A
   HREF="directive-dict.html#Override"
   REL="Help"
  ><STRONG>Override:</STRONG></A> FileInfo
  <BR>
  <A
   HREF="directive-dict.html#Status"
   REL="Help"
  ><STRONG>Status:</STRONG></A> Base
  <BR>
  <A
   HREF="directive-dict.html#Module"
   REL="Help"
  ><STRONG>Module:</STRONG></A> mod_setenvif
  <BR>
  <A
   HREF="directive-dict.html#Compatibility"
   REL="Help"
  ><STRONG>Compatibility:</STRONG></A> Apache 1.2 and above (in Apache 1.2
  this directive was found in the now-obsolete mod_browser module)
  </P>
  <P>
  The <SAMP>BrowserMatchNoCase</SAMP> directive is semantically identical to
  the
  <A
   HREF="#BrowserMatch"
  ><SAMP>BrowserMatch</SAMP></A>
  directive. However, it provides for case-insensitive matching. For
  example:
  </P>
  <PRE>
d185 9
a193 14
  </PRE>
  <P>
  The <SAMP>BrowserMatch</SAMP> and <SAMP>BrowserMatchNoCase</SAMP>
  directives are special cases of the
  <A
   HREF="#SetEnvIf"
  ><SAMP>SetEnvIf</SAMP></A>
  and
  <A
   HREF="#SetEnvIfNoCase"
  ><SAMP>SetEnvIfNoCase</SAMP></A>
  directives.  The following two lines have the same effect:
  </P>
  <PRE>
d196 76
a271 1
  </PRE>
d273 2
a274 97
  <HR> <!-- the HR is part of the directive description -->
  <H2>
   <A NAME="SetEnvIf">SetEnvIf directive
   </A>
  </H2>
  <P>
  <A
   HREF="directive-dict.html#Syntax"
   REL="Help"
  ><STRONG>Syntax:</STRONG></A> SetEnvIf <EM> attribute regex
   envar</em>[=<em>value</em>] [<em>envar</em>[=<em>value</em>]] ...
  <BR>
  <A
   HREF="directive-dict.html#Default"
   REL="Help"
  ><STRONG>Default:</STRONG></A> <EM>none</EM>
  <BR>
  <A
   HREF="directive-dict.html#Context"
   REL="Help"
  ><STRONG>Context:</STRONG></A> server config, virtual host, directory,
   .htaccess
  <BR>
  <A
   HREF="directive-dict.html#Override"
   REL="Help"
  ><STRONG>Override:</STRONG></A> FileInfo
  <BR>
  <A
   HREF="directive-dict.html#Status"
   REL="Help"
  ><STRONG>Status:</STRONG></A> Base
  <BR>
  <A
   HREF="directive-dict.html#Module"
   REL="Help"
  ><STRONG>Module:</STRONG></A> mod_setenvif
  <BR>
  <A
   HREF="directive-dict.html#Compatibility"
   REL="Help"
  ><STRONG>Compatibility:</STRONG></A> Apache 1.3 and above; the
  Request_Protocol keyword and environment-variable matching are only
  available with 1.3.7 and later; use in .htaccess files only supported
  with 1.3.13 and later
  </P>
  <P>
  The <SAMP>SetEnvIf</SAMP> directive defines environment variables
  based on attributes of the request.  These attributes can be the
  values of various HTTP request header fields (see
  <a href="http://www.rfc-editor.org/rfc/rfc2616.txt">RFC2616</a>
  for more information about these), or of other aspects of the request,
  including the following:
  </P>
  <UL>
   <LI><SAMP>Remote_Host</SAMP> - the hostname (if available) of the
    client making the request
   </LI>
   <LI><SAMP>Remote_Addr</SAMP> - the IP address of the client making
    the request
   </LI>
   <LI><SAMP>Remote_User</SAMP> - the authenticated username (if
    available)
   </LI>
   <LI><SAMP>Request_Method</SAMP> - the name of the method being used
    (<SAMP>GET</SAMP>, <SAMP>POST</SAMP>, <EM>et cetera</EM>)
   </LI>
   <LI><SAMP>Request_Protocol</SAMP> - the name and version of the protocol
    with which the request was made (<EM>e.g.</EM>, "HTTP/0.9", "HTTP/1.1",
    <EM>etc.</EM>)
   </LI>
   <LI><SAMP>Request_URI</SAMP> - the portion of the URL following the
    scheme and host portion
   </LI>
  </UL>
  <P>
  Some of the more commonly used request header field names include
  <SAMP>Host</SAMP>, <SAMP>User-Agent</SAMP>, and <SAMP>Referer</SAMP>.
  </P>
  <P>
  If the <EM>attribute</EM> name doesn't match any of the special keywords,
  nor any of the request's header field names, it is tested as the name
  of an environment variable in the list of those associated with the request.
  This allows <CODE>SetEnvIf</CODE> directives to test against the result
  of prior matches.
  </P>
  <BLOCKQUOTE>
   <STRONG>Only those environment variables defined by earlier
   <CODE>SetEnvIf[NoCase]</CODE> directives are available for testing in
   this manner.  'Earlier' means that they were defined at a broader scope
   (such as server-wide) or previously in the current directive's
   scope.</STRONG>
  </BLOCKQUOTE>
  <P>
  Example:
  </P>
  <PRE>
d282 40
a321 63
  </PRE>
  <P>
  The first three will set the environment variable <SAMP>object_is_image</SAMP> if the
  request was for an image file, and the fourth sets
  <SAMP>intra_site_referral</SAMP> if the referring page was somewhere
  on the <SAMP>www.mydomain.com</SAMP> Web site.
  </P>

  <HR> <!-- the HR is part of the directive description -->
  <H2>
   <A NAME="SetEnvIfNoCase">SetEnvIfNoCase directive
   </A>
  </H2>
  <P>
  <A
   HREF="directive-dict.html#Syntax"
   REL="Help"
  ><STRONG>Syntax:</STRONG></A> SetEnvIfNoCase  <EM> attribute regex
   envar</em>[=<em>value</em>] [<em>envar</em>[=<em>value</em>]] ...
  <BR>
  <A
   HREF="directive-dict.html#Default"
   REL="Help"
  ><STRONG>Default:</STRONG></A> <EM>none</EM>
  <BR>
  <A
   HREF="directive-dict.html#Context"
   REL="Help"
  ><STRONG>Context:</STRONG></A> server config, virtual host, directory,
   .htaccess
  <BR>
  <A
   HREF="directive-dict.html#Override"
   REL="Help"
  ><STRONG>Override:</STRONG></A> FileInfo
  <BR>
  <A
   HREF="directive-dict.html#Status"
   REL="Help"
  ><STRONG>Status:</STRONG></A> Base
  <BR>
  <A
   HREF="directive-dict.html#Module"
   REL="Help"
  ><STRONG>Module:</STRONG></A> mod_setenvif
  <BR>
  <A
   HREF="directive-dict.html#Compatibility"
   REL="Help"
  ><STRONG>Compatibility:</STRONG></A> Apache 1.3 and above; the
  Request_Protocol keyword and environment-variable matching are only
  available with 1.3.7 and later; use in .htaccess files only supported
  with 1.3.13 and later
  </P>
  <P>
  The <SAMP>SetEnvIfNoCase</SAMP> is semantically identical to the
  <A
   HREF="#SetEnvIf"
  ><SAMP>SetEnvIf</SAMP></A>
  directive, and differs only in that the regular expression matching is
  performed in a case-insensitive manner. For example:
  </P>
  <PRE>
d323 17
a339 13
  </PRE>
  <P>
  This will cause the <SAMP>site</SAMP> environment variable to be set to
  &quot;<SAMP>apache</SAMP>&quot; if the HTTP request header field
  <SAMP>Host:</SAMP> was included and contained <SAMP>Apache.Org</SAMP>,
  <SAMP>apache.org</SAMP>, or any other combination.
  </P>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
a340 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a341 2
 </BODY>
</HTML>
@


1.4
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.3
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d52 2
a53 1
  regular expressions you specify.  These envariables can be used by
d60 2
d66 3
a68 1
  </P>
d88 2
a89 1
  ><STRONG>Syntax:</STRONG></A> BrowserMatch <EM>regex envar[=value] [...]</EM>
d191 2
a192 2
  ><STRONG>Syntax:</STRONG></A> BrowserMatchNoCase <EM>regex envar[=value]
  [...]</EM>
d265 2
a266 2
  ><STRONG>Syntax:</STRONG></A> SetEnvIf <EM> attribute regex envar[=value]
  [...]</EM>
d362 1
a362 1
  The first three will set the envariable <SAMP>object_is_image</SAMP> if the
d377 2
a378 2
  ><STRONG>Syntax:</STRONG></A> SetEnvIfNoCase
   <EM> attribute regex envar[=value] [...]</EM>
d426 1
a426 1
  This will cause the <SAMP>site</SAMP> envariable to be set to
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d23 2
a24 4
  This module is contained in the <SAMP>mod_setenvif.c</SAMP> file, and
  <STRONG>is</STRONG> compiled in by default. It provides for
  the ability to set environment variables based upon attributes of the
  request.
d26 23
a48 1
  <H2>Summary</H2>
d78 1
a78 1
  <H2><A NAME="BrowserMatch">The <SAMP>BrowserMatch</SAMP> Directive</A></H2>
d88 1
a88 1
  ><STRONG>Default:</STRONG></A> <EM>none</EM>
d93 2
a94 1
  ><STRONG>Context:</STRONG></A> server config
d99 1
a99 1
  ><STRONG>Override:</STRONG></A> <EM>none</EM>
d115 2
a116 1
  this directive was found in the now-obsolete mod_browser module)
d178 1
a178 2
   <A NAME="BrowserMatchNoCase">
    The <SAMP>BrowserMatchNoCase</SAMP> Directive
d196 2
a197 1
  ><STRONG>Context:</STRONG></A> server config
d202 1
a202 1
  ><STRONG>Override:</STRONG></A> <EM>none</EM>
d252 1
a252 2
   <A NAME="SetEnvIf">
    The <SAMP>SetEnvIf</SAMP> Directive
d270 2
a271 1
  ><STRONG>Context:</STRONG></A> server config
d276 1
a276 1
  ><STRONG>Override:</STRONG></A> <EM>none</EM>
d293 2
a294 1
  available with 1.3.7 and later
d300 1
a300 3
  <A
   HREF="http://ds.internic.net/rfc/rfc2068.txt"
  >RFC2068</A>
d364 1
a364 2
   <A NAME="SetEnvIfNoCase">
    The <SAMP>SetEnvIfNoCase</SAMP> Directive
d382 2
a383 1
  ><STRONG>Context:</STRONG></A> server config
d388 1
a388 1
  ><STRONG>Override:</STRONG></A> <EM>none</EM>
d403 4
a406 1
  ><STRONG>Compatibility:</STRONG></A> Apache 1.3 and above
@


1.1
log
@Initial revision
@
text
@d269 3
a271 1
  ><STRONG>Compatibility:</STRONG></A> Apache 1.3 and above
d296 4
d309 14
d326 4
a329 1
   SetEnvIf Request_URI "\.(gif)|(jpg)|(xbm)$" object_is_image
d331 2
d335 2
a336 2
  The first will set the envariable <SAMP>object_is_image</SAMP> if the
  request was for an image file, and the second sets
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@
