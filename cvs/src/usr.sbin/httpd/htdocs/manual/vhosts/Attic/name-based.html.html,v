head	1.4;
access;
symbols
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.2
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.2
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.2
	apache_1_3_27:1.1.1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	apache_1_3_26:1.1.1.1
	apache:1.1.1
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2005.07.29.23.55.40;	author jmc;	state dead;
branches;
next	1.3;

1.3
date	2002.10.07.21.04.44;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.29.02.08.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.12.07.56.48;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.07.19.21.28.16;	author henning;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.07.19.48.09;	author henning;	state Exp;
branches;
next	;


desc
@@


1.4
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Name-based Virtual Hosts</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Name-based Virtual Host Support</h1>

<p>This document describes when and how to use name-based virtual hosts.</p>

<ul>
<li><a href="#namevip">Name-based vs. IP-based Virtual Hosts</a></li>
<li><a href="#using">Using Name-based Virtual Hosts</a></li>
<li><a href="#compat">Compatibility With Older Browsers</a></li>
</ul>

<p>See also: <a href="examples.html">Virtual Host examples for common
setups</a>, <a href="ip-based.html">IP-based Virtual Host Support</a>,
<a href="details.html">An In-Depth Discussion of Virtual Host
Matching</a>, and <a href="mass.html">Dynamically configured mass
virtual hosting</a>.</p>

<hr />

<h2><a name="namevip">Name-based vs. IP-based Virtual Hosts</a></h2>

<p>IP-based virtual hosts use the IP address of the connection to
determine the correct virtual host to serve.  Therefore you need to
have a separate IP address for each host.  With name-based virtual
hosting, the server relies on the client to report the hostname as
part of the HTTP headers.  Using this technique, many different hosts
can share the same IP address.</p>

<p>Name-based virtual hosting is usually simpler, since you need
only configure your DNS server to map each hostname to the correct
IP address and then configure the Apache HTTP Server to recognize
the different hostnames.  Name-based virtual hosting also eases
the demand for scarce IP addresses.  Therefore you should use
name-based virtual hosting unless there is a specific reason to
choose IP-based virtual hosting.  Some reasons why you might consider
using IP-based virtual hosting:</p>

<ul> 

<li>Some ancient clients are not compatible with name-based virtual
hosting.  For name-based virtual hosting to work, the client must send
the HTTP Host header.  This is required by HTTP/1.1, and is
implemented by all modern HTTP/1.0 browsers as an extension.  If you
need to support obsolete clients and still use name-based virtual
hosting, a possible technique is discussed at the end of this
document.</li>

<li>Name-based virtual hosting cannot be used with SSL secure servers
because of the nature of the SSL protocol.</li>

<li>Some operating systems and network equipment implement bandwidth
management techniques that cannot differentiate between hosts unless
they are on separate IP addresses.</li>

</ul>

<h2><a name="using">Using Name-based Virtual Hosts</a></h2>

<table border="1">
<tr><td align="top">
<strong>Related Directives</strong><br><br>

<a href="../mod/core.html#documentroot">DocumentRoot</a><br />
<a href="../mod/core.html#namevirtualhost">NameVirtualHost</a><br />
<a href="../mod/core.html#serveralias">ServerAlias</a><br />
<a href="../mod/core.html#servername">ServerName</a><br />
<a href="../mod/core.html#serverpath">ServerPath</a><br />
<a href="../mod/core.html#virtualhost">VirtualHost</a><br />
</td></tr></table>

<p>To use name-based virtual hosting, you must designate the IP
address (and possibly port) on the server that will be accepting
requests for the hosts.  This is configured using the <a
href="../mod/core.html#namevirtualhost">NameVirtualHost</a> directive.
In the normal case where any and all IP addresses on the server should
be used, you can use <code>*</code> as the argument to
<code>NameVirtualHost</code>.  (<code>NameVirtualHost *</code> will
work only in version 1.3.13 and later.)  Note that mentioning an IP
address in a <code>NameVirtualHost</code> directive does not
automatically make the server listen to that IP address.  See <a
href="../bind.html">Setting which addresses and ports Apache uses</a>
for more details.  In addition, any IP address specified here must be
associated with a network interface on the server.</p>

<p>The next step is to create a <a
href="../mod/core.html#virtualhost">&lt;VirtualHost&gt;</a> block for
each different host that you would like to serve.  The argument to the
<code>&lt;VirtualHost&gt;</code> directive should be the same as the
argument to the <code>NameVirtualHost</code> directive (ie, an IP
address, or <code>*</code> for all addresses).  Inside each
<code>&lt;VirtualHost&gt;</code> block, you will need at minimum a <a
href="../mod/core.html#servername">ServerName</a> directive to
designate which host is served and a <a
href="../mod/core.html#documentroot">DocumentRoot</a> directive to
show where in the filesystem the content for that host lives.</p>

<p>If you are adding virtual hosts to an existing web server, you
must also create a &lt;VirtualHost&gt; block for the existing host.
The <code>ServerName</code> and <code>DocumentRoot</code> included in
this virtual host should be the same as the global
<code>ServerName</code> and <code>DocumentRoot</code>.  List this
virtual host first in the configuration file so that it will act as
the default host.</p>

<p>For example, suppose that you are serving the domain
<samp>www.domain.tld</samp> and you wish to add the virtual host
<samp>www.otherdomain.tld</samp>, which points at the same IP address.
Then you simply add the following to <code>httpd.conf</code>:</p>
<pre>
    NameVirtualHost *

    &lt;VirtualHost *&gt;
    ServerName www.domain.tld
    DocumentRoot /www/domain
    &lt;/VirtualHost&gt;

    &lt;VirtualHost *&gt;
    ServerName www.otherdomain.tld
    DocumentRoot /www/otherdomain
    &lt;/VirtualHost&gt;
</pre>

<p>You can alternatively specify an explicit IP address in place of
the * in both the <code>NameVirtualHost</code> and
<code>&lt;VirtualHost&gt;</code> directives.  The IP address is
required in version 1.3.12 and earlier.</p>

<p>Many servers want to be accessible by more than one name.  This is
possible with the <a
href="../mod/core.html#serveralias"><code>ServerAlias</code></a>
directive, placed inside the &lt;VirtualHost&gt; section. For
example if you add this to the first &lt;VirtualHost&gt; block
above</p> 

<blockquote><code> 
ServerAlias domain.tld *.domain.tld
</code></blockquote>

<p>then requests for all hosts in the <code>domain.tld</code> domain
will be served by the <code>www.domain.tld</code> virtual host.  The
wildcard characters * and ? can be used to match names.  Of course,
you can't just make up names and place them in <code>ServerName</code>
or <code>ServerAlias</code>.  You must first have your DNS server
properly configured to map those names to an IP address associated
with your server.</p>

<p>Finally, you can fine-tune the configuration of the virtual hosts
by placing other directives inside the
<code>&lt;VirtualHost&gt;</code> containers.  Most directives can be
placed in these containers and will then change the configuration only
of the relevant virtual host.  To find out if a particular directive
is allowed, check the <a
href="../mod/directive-dict.html#Context">Context</a> of the
directive.  Configuration directives set in the <em>main server
context</em> (outside any <code>&lt;VirtualHost&gt;</code> container)
will be used only if they are not overriden by the virtual host
settings.</p>

<p>Now when a request arrives, the server will first check if it is
using an IP address that matches the <code>NameVirtualHost</code>.  If
it is, then it will look at each <code>&lt;VirtualHost&gt;</code>
section with a matching IP address and try to find one where the
<code>ServerName</code> or <code>ServerAlias</code> matches the
requested hostname.  If it finds one, then it uses the configuration
for that server.  If no matching virtual host is found, then
<strong>the first listed virtual host</strong> that matches the IP
address will be used.</p>

<p>As a consequence, the first listed virtual host is the
<em>default</em> virtual host.  The <code>DocumentRoot</code> from the
<em>main server</em> will <strong>never</strong> be used when an IP
address matches the <code>NameVirtualHost</code> directive.  If you
would like to have a special configuration for requests that do not
match any particular virtual host, simply put that configuration in a
<code>&lt;VirtualHost&gt;</code> container and list it first in the
configuration file.</p>

<h2><a name="compat">Compatibility with Older Browsers</a></h2>

    <p>As mentioned earlier, there are some clients 
    who do not send the required data for the name-based virtual
    hosts to work properly. These clients will always be sent the
    pages from the first virtual host listed for that IP address
    (the <cite>primary</cite> name-based virtual host).</p>

    <p>There is a possible workaround with the <a
    href="../mod/core.html#serverpath"><code>ServerPath</code></a>
    directive, albeit a slightly cumbersome one:</p>

    <p>Example configuration:</p>
<pre>
    NameVirtualHost 111.22.33.44

    &lt;VirtualHost 111.22.33.44&gt;
    ServerName www.domain.tld
    ServerPath /domain
    DocumentRoot /web/domain
    &lt;/VirtualHost&gt;
</pre>

    <p>What does this mean? It means that a request for any URI
    beginning with "<samp>/domain</samp>" will be served from the
    virtual host <samp>www.domain.tld</samp> This means that the
    pages can be accessed as
    <code>http://www.domain.tld/domain/</code> for all clients,
    although clients sending a <samp>Host:</samp> header can also
    access it as <code>http://www.domain.tld/</code>.</p>

    <p>In order to make this work, put a link on your primary
    virtual host's page to
    <samp>http://www.domain.tld/domain/</samp> Then, in the virtual
    host's pages, be sure to use either purely relative links
    (<em>e.g.</em>, "<samp>file.html</samp>" or
    "<samp>../icons/image.gif</samp>" or links containing the
    prefacing <samp>/domain/</samp> (<em>e.g.</em>,
    "<samp>http://www.domain.tld/domain/misc/file.html</samp>" or
    "<samp>/domain/misc/file.html</samp>").</p>

    <p>This requires a bit of discipline, but adherence to these
    guidelines will, for the most part, ensure that your pages will
    work with all browsers, new and old.</p>

    <p>See also: <a href="examples.html#serverpath">ServerPath
    configuration example</a></p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>



@


1.3
log
@merge apache 1.3.27
@
text
@@


1.2
log
@fix half baked abortion of a merge to 1.3.23 and take
tree to apache-1.3.24+mod+ssl2.8.8
@
text
@d116 12
a127 5
<p>For example, suppose that both <samp>www.domain.tld</samp> and
<samp>www.otherdomain.tld</samp> point at an IP address
that the server is listening to.  Then you simply add the following
to <code>httpd.conf</code>:</p>

d172 1
a172 1
href="../mod/directive-dist.html#Context">Context</a> of the
@


1.1
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d14 6
a19 1
    <!--#include virtual="header.html" -->
d237 6
a242 1
    <!--#include virtual="footer.html" -->
@


1.1.1.1
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d14 1
a14 6
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>

d232 1
a232 6
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

@


1.1.1.2
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@d116 5
a120 12
<p>If you are adding virtual hosts to an existing web server, you
must also create a &lt;VirtualHost&gt; block for the existing host.
The <code>ServerName</code> and <code>DocumentRoot</code> included in
this virtual host should be the same as the global
<code>ServerName</code> and <code>DocumentRoot</code>.  List this
virtual host first in the configuration file so that it will act as
the default host.</p>

<p>For example, suppose that you are serving the domain
<samp>www.domain.tld</samp> and you wish to add the virtual host
<samp>www.otherdomain.tld</samp>, which points at the same IP address.
Then you simply add the following to <code>httpd.conf</code>:</p>
d165 1
a165 1
href="../mod/directive-dict.html#Context">Context</a> of the
@


