head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.24
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.04.22.14.47.25;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2008.11.09.12.34.47;	author tobias;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.29.23.55.40;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.12.07.56.48;	author beck;	state dead;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.36;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.48;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.29.14;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.26;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.20.18;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.20.18;	author beck;	state Exp;
branches;
next	;


desc
@@


1.9
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Name-based Virtual Hosts</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Name-based Virtual Host Support</h1>

<p>This document describes when and how to use name-based virtual hosts.</p>

<ul>
<li><a href="#namevip">Name-based vs. IP-based Virtual Hosts</a></li>
<li><a href="#using">Using Name-based Virtual Hosts</a></li>
<li><a href="#compat">Compatibility With Older Browsers</a></li>
</ul>

<p>See also: <a href="examples.html">Virtual Host examples for common
setups</a>, <a href="ip-based.html">IP-based Virtual Host Support</a>,
<a href="details.html">An In-Depth Discussion of Virtual Host
Matching</a>, and <a href="mass.html">Dynamically configured mass
virtual hosting</a>.</p>

<hr />

<h2><a name="namevip">Name-based vs. IP-based Virtual Hosts</a></h2>

<p>IP-based virtual hosts use the IP address of the connection to
determine the correct virtual host to serve.  Therefore you need to
have a separate IP address for each host.  With name-based virtual
hosting, the server relies on the client to report the hostname as
part of the HTTP headers.  Using this technique, many different hosts
can share the same IP address.</p>

<p>Name-based virtual hosting is usually simpler, since you need
only configure your DNS server to map each hostname to the correct
IP address and then configure the Apache HTTP Server to recognize
the different hostnames.  Name-based virtual hosting also eases
the demand for scarce IP addresses.  Therefore you should use
name-based virtual hosting unless there is a specific reason to
choose IP-based virtual hosting.  Some reasons why you might consider
using IP-based virtual hosting:</p>

<ul> 

<li>Some ancient clients are not compatible with name-based virtual
hosting.  For name-based virtual hosting to work, the client must send
the HTTP Host header.  This is required by HTTP/1.1, and is
implemented by all modern HTTP/1.0 browsers as an extension.  If you
need to support obsolete clients and still use name-based virtual
hosting, a possible technique is discussed at the end of this
document.</li>

<li>Name-based virtual hosting cannot be used with SSL secure servers
because of the nature of the SSL protocol.</li>

<li>Some operating systems and network equipment implement bandwidth
management techniques that cannot differentiate between hosts unless
they are on separate IP addresses.</li>

</ul>

<h2><a name="using">Using Name-based Virtual Hosts</a></h2>

<table border="1">
<tr><td align="top">
<strong>Related Directives</strong><br><br>

<a href="../mod/core.html#documentroot">DocumentRoot</a><br />
<a href="../mod/core.html#namevirtualhost">NameVirtualHost</a><br />
<a href="../mod/core.html#serveralias">ServerAlias</a><br />
<a href="../mod/core.html#servername">ServerName</a><br />
<a href="../mod/core.html#serverpath">ServerPath</a><br />
<a href="../mod/core.html#virtualhost">VirtualHost</a><br />
</td></tr></table>

<p>To use name-based virtual hosting, you must designate the IP
address (and possibly port) on the server that will be accepting
requests for the hosts.  This is configured using the <a
href="../mod/core.html#namevirtualhost">NameVirtualHost</a> directive.
In the normal case where any and all IP addresses on the server should
be used, you can use <code>*</code> as the argument to
<code>NameVirtualHost</code>.  (<code>NameVirtualHost *</code> will
work only in version 1.3.13 and later.)  Note that mentioning an IP
address in a <code>NameVirtualHost</code> directive does not
automatically make the server listen to that IP address.  See <a
href="../bind.html">Setting which addresses and ports Apache uses</a>
for more details.  In addition, any IP address specified here must be
associated with a network interface on the server.</p>

<p>The next step is to create a <a
href="../mod/core.html#virtualhost">&lt;VirtualHost&gt;</a> block for
each different host that you would like to serve.  The argument to the
<code>&lt;VirtualHost&gt;</code> directive should be the same as the
argument to the <code>NameVirtualHost</code> directive (ie, an IP
address, or <code>*</code> for all addresses).  Inside each
<code>&lt;VirtualHost&gt;</code> block, you will need at minimum a <a
href="../mod/core.html#servername">ServerName</a> directive to
designate which host is served and a <a
href="../mod/core.html#documentroot">DocumentRoot</a> directive to
show where in the filesystem the content for that host lives.</p>

<p>If you are adding virtual hosts to an existing web server, you
must also create a &lt;VirtualHost&gt; block for the existing host.
The <code>ServerName</code> and <code>DocumentRoot</code> included in
this virtual host should be the same as the global
<code>ServerName</code> and <code>DocumentRoot</code>.  List this
virtual host first in the configuration file so that it will act as
the default host.</p>

<p>For example, suppose that you are serving the domain
<samp>www.domain.tld</samp> and you wish to add the virtual host
<samp>www.otherdomain.tld</samp>, which points at the same IP address.
Then you simply add the following to <code>httpd.conf</code>:</p>
<pre>
    NameVirtualHost *

    &lt;VirtualHost *&gt;
    ServerName www.domain.tld
    DocumentRoot /www/domain
    &lt;/VirtualHost&gt;

    &lt;VirtualHost *&gt;
    ServerName www.otherdomain.tld
    DocumentRoot /www/otherdomain
    &lt;/VirtualHost&gt;
</pre>

<p>You can alternatively specify an explicit IP address in place of
the * in both the <code>NameVirtualHost</code> and
<code>&lt;VirtualHost&gt;</code> directives.  The IP address is
required in version 1.3.12 and earlier.</p>

<p>Many servers want to be accessible by more than one name.  This is
possible with the <a
href="../mod/core.html#serveralias"><code>ServerAlias</code></a>
directive, placed inside the &lt;VirtualHost&gt; section. For
example if you add this to the first &lt;VirtualHost&gt; block
above</p> 

<blockquote><code> 
ServerAlias domain.tld *.domain.tld
</code></blockquote>

<p>then requests for all hosts in the <code>domain.tld</code> domain
will be served by the <code>www.domain.tld</code> virtual host.  The
wildcard characters * and ? can be used to match names.  Of course,
you can't just make up names and place them in <code>ServerName</code>
or <code>ServerAlias</code>.  You must first have your DNS server
properly configured to map those names to an IP address associated
with your server.</p>

<p>Finally, you can fine-tune the configuration of the virtual hosts
by placing other directives inside the
<code>&lt;VirtualHost&gt;</code> containers.  Most directives can be
placed in these containers and will then change the configuration only
of the relevant virtual host.  To find out if a particular directive
is allowed, check the <a
href="../mod/directive-dict.html#Context">Context</a> of the
directive.  Configuration directives set in the <em>main server
context</em> (outside any <code>&lt;VirtualHost&gt;</code> container)
will be used only if they are not overridden by the virtual host
settings.</p>

<p>Now when a request arrives, the server will first check if it is
using an IP address that matches the <code>NameVirtualHost</code>.  If
it is, then it will look at each <code>&lt;VirtualHost&gt;</code>
section with a matching IP address and try to find one where the
<code>ServerName</code> or <code>ServerAlias</code> matches the
requested hostname.  If it finds one, then it uses the configuration
for that server.  If no matching virtual host is found, then
<strong>the first listed virtual host</strong> that matches the IP
address will be used.</p>

<p>As a consequence, the first listed virtual host is the
<em>default</em> virtual host.  The <code>DocumentRoot</code> from the
<em>main server</em> will <strong>never</strong> be used when an IP
address matches the <code>NameVirtualHost</code> directive.  If you
would like to have a special configuration for requests that do not
match any particular virtual host, simply put that configuration in a
<code>&lt;VirtualHost&gt;</code> container and list it first in the
configuration file.</p>

<h2><a name="compat">Compatibility with Older Browsers</a></h2>

    <p>As mentioned earlier, there are some clients 
    who do not send the required data for the name-based virtual
    hosts to work properly. These clients will always be sent the
    pages from the first virtual host listed for that IP address
    (the <cite>primary</cite> name-based virtual host).</p>

    <p>There is a possible workaround with the <a
    href="../mod/core.html#serverpath"><code>ServerPath</code></a>
    directive, albeit a slightly cumbersome one:</p>

    <p>Example configuration:</p>
<pre>
    NameVirtualHost 111.22.33.44

    &lt;VirtualHost 111.22.33.44&gt;
    ServerName www.domain.tld
    ServerPath /domain
    DocumentRoot /web/domain
    &lt;/VirtualHost&gt;
</pre>

    <p>What does this mean? It means that a request for any URI
    beginning with "<samp>/domain</samp>" will be served from the
    virtual host <samp>www.domain.tld</samp> This means that the
    pages can be accessed as
    <code>http://www.domain.tld/domain/</code> for all clients,
    although clients sending a <samp>Host:</samp> header can also
    access it as <code>http://www.domain.tld/</code>.</p>

    <p>In order to make this work, put a link on your primary
    virtual host's page to
    <samp>http://www.domain.tld/domain/</samp> Then, in the virtual
    host's pages, be sure to use either purely relative links
    (<em>e.g.</em>, "<samp>file.html</samp>" or
    "<samp>../icons/image.gif</samp>" or links containing the
    prefacing <samp>/domain/</samp> (<em>e.g.</em>,
    "<samp>http://www.domain.tld/domain/misc/file.html</samp>" or
    "<samp>/domain/misc/file.html</samp>").</p>

    <p>This requires a bit of discipline, but adherence to these
    guidelines will, for the most part, ensure that your pages will
    work with all browsers, new and old.</p>

    <p>See also: <a href="examples.html#serverpath">ServerPath
    configuration example</a></p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>



@


1.8
log
@typo fixed (overriden -> overridden)

ok espie, jmc
@
text
@@


1.7
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@d175 1
a175 1
will be used only if they are not overriden by the virtual host
@


1.6
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d1 129
a129 63
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML><HEAD>
<TITLE>Apache name-based Virtual Hosts</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Apache name-based Virtual Host Support</H1>

<STRONG>See Also:</STRONG>
<A HREF="ip-based.html">IP-based Virtual Host Support</A>

<HR>

<H2>Name-based vs. IP-based virtual hosts</H2>

<P>Early versions of HTTP (like many other protocols, e.g. FTP)
required a different IP address for each virtual host on the server.
On some platforms this can limit the number of virtual hosts you can
run, and because there are concerns about the availability of IP
addresses it is strongly discouraged by the registraries (ARIN, RIPE,
and APNIC).</P>

<P>The <CODE>HTTP/1.1</CODE> protocol, and a common extension to
<CODE>HTTP/1.0</CODE>, includes a method for the server to identify
what name it is being addressed as. Apache 1.1 and later support this
approach as well as the old IP-address-per-hostname method.</P>

<P>The benefits of using the name-based virtual hosts is a practically
unlimited number of servers, ease of configuration and use, and it
requires no additional hardware or software. The main disadvantage is
that the client must support this part of the protocol. Almost all
browsers do, but there are still tiny numbers of very old browsers in
use which do not. This can cause problems, although a possible
solution is addressed below.</P>

<H2>Using name-based virtual hosts</H2>

<P>Using name-based virtual hosts is quite easy, and superficially looks
like the old method. The notable difference between IP-based and
name-based virtual host configuration is the
<A HREF="../mod/core.html#namevirtualhost"><CODE>NameVirtualHost</CODE></A>
directive which specifies an IP address that should be used as a
target for name-based virtual hosts.</P>

<P>For example, suppose that both <SAMP>www.domain.tld</SAMP> and
<SAMP>www.otherdomain.tld</SAMP> point at the IP address
<SAMP>111.22.33.44</SAMP>.  Then you simply add to one of the Apache
configuration files (most likely <CODE>httpd.conf</CODE> or
<CODE>srm.conf</CODE>) code similar to the following:</P>
d131 1
a131 4
<PRE>
    NameVirtualHost 111.22.33.44

    &lt;VirtualHost 111.22.33.44&gt;
d136 1
a136 1
    &lt;VirtualHost 111.22.33.44&gt;
d140 1
a140 1
</PRE>
d142 8
a149 32
<P>Of course, any additional directives can (and should) be placed
into the <CODE>&lt;VirtualHost&gt;</CODE> section. To make this work,
all that is needed is to make sure that the names
<SAMP>www.domain.tld</SAMP> and <SAMP>www.otherdomain.tld</SAMP>
are pointing to the IP address <SAMP>111.22.33.44</SAMP></P>

<P>Note: When you specify an IP address in a <CODE>NameVirtualHost</CODE>
directive then requests to that IP address will only ever be served
by matching &lt;VirtualHost&gt;s.  The "main server" will
<STRONG>never</STRONG> be served from the specified IP address.
If you start to use virtual hosts you should stop using the "main server"
as an independent server and rather use it as a place for
configuration directives that are common for all your virtual hosts.
In other words, you should add a &lt;VirtualHost&gt; section for
<EM>every</EM> server (hostname) you want to maintain on your server.

<P>In Apache 1.3.13 and later you can specify the
<CODE>NameVirtualHost</CODE> IP address as the wildcard <CODE>*</CODE>
which matches any IP address not covered by more specific virtual
host directive(s). This is useful for configuring a server whose IP
address you do not know in advance, e.g. because it has a dynamically
configured IP address or because it is part of a load-balanced cluster
in which every machine shares the same configuration file.
</P>

<P>Additionally, many servers may wish to be accessible by more than
one name. For example, the example server might want to be accessible
as <CODE>domain.tld</CODE>, or <CODE>www2.domain.tld</CODE>, assuming
the IP addresses pointed to the same server. In fact, one might want it
so that all addresses at <CODE>domain.tld</CODE> were picked up by the
server. This is possible with the
<A HREF="../mod/core.html#serveralias"><CODE>ServerAlias</CODE></A>
d151 2
a152 1
example:</P>
d154 54
a207 29
<PRE>
    ServerAlias domain.tld *.domain.tld
</PRE>

<P>Note that you can use <CODE>*</CODE> and <CODE>?</CODE> as wild-card
characters.</P>

<P>You also might need <CODE>ServerAlias</CODE> if you are
serving local users who do not always include the domain name.
For example, if local users are
familiar with typing "www" or "www.foobar" then you will need to add
<CODE>ServerAlias www www.foobar</CODE>.  It isn't possible for the
server to know what domain the client uses for their name resolution
because the client doesn't provide that information in the request.
The <CODE>ServerAlias</CODE> directive is generally a way to have different
hostnames pointing to the same virtual host.
</P>

<H2>Compatibility with Older Browsers</H2>

<P>As mentioned earlier, there are still some clients in use who
do not send the required data for the name-based virtual hosts to work
properly. These clients will always be sent the pages from the
first virtual host listed for that IP address (the
<CITE>primary</CITE> name-based virtual host).</P>

<P>There is a possible workaround with the
<A HREF="../mod/core.html#serverpath"><CODE>ServerPath</CODE></A>
directive, albeit a slightly cumbersome one:</P>
d209 2
a210 3
<P>Example configuration:

<PRE>
d218 34
a251 1
</PRE>
a252 28
<P>What does this mean? It means that a request for any URI beginning
with "<SAMP>/domain</SAMP>" will be served from the virtual host
<SAMP>www.domain.tld</SAMP> This means that the pages can be accessed as
<CODE>http://www.domain.tld/domain/</CODE> for all clients, although
clients sending a <SAMP>Host:</SAMP> header can also access it as
<CODE>http://www.domain.tld/</CODE>.</P>

<P>In order to make this work, put a link on your primary virtual host's page
to <SAMP>http://www.domain.tld/domain/</SAMP>
Then, in the virtual host's pages, be sure to use either purely
relative links (<EM>e.g.</EM>, "<SAMP>file.html</SAMP>" or
"<SAMP>../icons/image.gif</SAMP>" or links containing the prefacing
<SAMP>/domain/</SAMP>
(<EM>e.g.</EM>, "<SAMP>http://www.domain.tld/domain/misc/file.html</SAMP>" or
"<SAMP>/domain/misc/file.html</SAMP>").</P>

<P>This requires a bit of
discipline, but adherence to these guidelines will, for the most part,
ensure that your pages will work with all browsers, new and old.</P>

<P>See also: <A HREF="examples.html#serverpath">ServerPath configuration
example</A></P>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
a253 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a254 2
</BODY>
</HTML>
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d42 6
a47 6
<P>The benefits of using the name-based virtual hosts is a
practically unlimited number of servers, ease of configuration and use, and
requires no additional hardware or software. 
The main disadvantage is that the client must support this part of the
protocol. Almost all browsers do, but there are still small numbers of
old browsers in use who do not. This can cause problems, although a possible
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d30 11
a40 7
<P>While the approach with IP-based virtual hosts works very well,
it is not the most elegant solution, because a dedicated IP address
is needed for every virtual host and it is hard to implement on some
machines. The <CODE>HTTP/1.1</CODE> protocol contains a method for the
server to identify what name it is being addressed as. Apache 1.1 and
later support this approach as well as the traditional
IP-address-per-hostname method.</P>
d42 1
a42 1
<P>The benefits of using the new name-based virtual host support is a
d46 1
a46 1
protocol. The latest versions of most browsers do, but there are still
d50 1
a50 1
<H2>Using non-IP Virtual Hosts</H2>
d52 1
a52 1
<P>Using the new virtual hosts is quite easy, and superficially looks
a64 2


d89 1
a89 1
If you start to use virtual hosts you should stop to use the "main server"
d94 9
@


1.2
log
@Apache 1.3.4 merge
@
text
@d116 4
a119 1
because the client doesn't provide that information in the request.</P>
d126 2
a127 2
<CITE>primary</CITE> name-based virtual host (the first virtual host
appearing in the configuration file for a specific IP address).</P>
@


1.1
log
@Initial revision
@
text
@d49 14
a62 3
like the old method. You simply add to one of the Apache configuration
files (most likely <CODE>httpd.conf</CODE> or <CODE>srm.conf</CODE>)
code similar to the following:</P>
d68 6
a73 1
    DocumentRoot /web/domain
a76 6
<P>The notable difference between IP-based and name-based virtual host
configuration is the
<A HREF="../mod/core.html#namevirtualhost"><CODE>NameVirtualHost</CODE></A>
directive which specifies an IP address that should be used as a target for
name-based virtual hosts.

d79 3
a81 3
all that is needed is to make sure that the name
<SAMP>www.domain.tld</SAMP> points to the IP address
<SAMP>111.22.33.44</SAMP></P>
d85 7
a91 2
by matching &lt;VirtualHost&gt;s.  The "main server" will <STRONG>never</STRONG>
be served from the specified IP address.
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@
