head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.38
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.30
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.28
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2005.08.01.19.40.33;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.29.23.55.39;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.46;	author beck;	state dead;
branches;
next	1.4;

1.4
date	2001.03.29.10.21.26;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.22.17.20;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.28.57;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.30;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.30;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.55;	author beck;	state Exp;
branches;
next	;


desc
@@


1.8
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Environment Variables in Apache</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="center">Environment Variables in Apache</h1>

    <p>The Apache HTTP Server provides a mechanism for storing
    information in named variables that are called <em>environment
    variables</em>. This information can be used to control various
    operations such as logging or access control. The variables are
    also used as a mechanism to communicate with external programs
    such as CGI scripts. This document discusses different ways to
    manipulate and use these variables.</p>

    <p>Although these variables are referred to as <em>environment
    variables</em>, they are not the same as the environment
    variables controlled by the underlying operating system.
    Instead, these variables are stored and manipulated in an
    internal Apache structure. They only become actual operating
    system environment variables when they are provided to CGI
    scripts and Server Side Include scripts. If you wish to
    manipulate the operating system environment under which the
    server itself runs, you must use the standard environment
    manipulation mechanisms provided by your operating system
    shell.</p>

    <ul>
      <li><a href="#setting">Setting Environment Variables</a></li>

      <li><a href="#using">Using Environment Variables</a></li>

      <li><a href="#special">Special Purpose Environment
      Variables</a></li>

      <li><a href="#examples">Examples</a></li>
    </ul>
    <hr />

    <h2><a id="setting" name="setting">Setting Environment
    Variables</a></h2>

    <table border="1">
      <tr>
        <td valign="top"><strong>Related Modules</strong><br />
         <br />
         <a href="mod/mod_env.html">mod_env</a><br />
         <a href="mod/mod_rewrite.html">mod_rewrite</a><br />
         <a href="mod/mod_setenvif.html">mod_setenvif</a><br />
         <a href="mod/mod_unique_id.html">mod_unique_id</a><br />
         </td>

        <td valign="top"><strong>Related Directives</strong><br />
         <br />
         <a
        href="mod/mod_setenvif.html#browsermatch">BrowserMatch</a><br />
         <a
        href="mod/mod_setenvif.html#browsermatchnocase">BrowserMatchNoCase</a><br />
         <a href="mod/mod_env.html#passenv">PassEnv</a><br />
         <a
        href="mod/mod_rewrite.html#RewriteRule">RewriteRule</a><br />
         <a href="mod/mod_env.html#setenv">SetEnv</a><br />
         <a
        href="mod/mod_setenvif.html#setenvif">SetEnvIf</a><br />
         <a
        href="mod/mod_setenvif.html#setenvifnocase">SetEnvIfNoCase</a><br />
         <a href="mod/mod_env.html#unsetenv">UnsetEnv</a><br />
         </td>
      </tr>
    </table>

    <h3>Basic Environment Manipulation</h3>

    <p>The most basic way to set an environment variable in Apache
    is using the unconditional <code>SetEnv</code> directive.
    Variables may also be passed from the environment of the shell
    which started the server using the <code>PassEnv</code>
    directive.</p>

    <h3>Conditional Per-Request Settings</h3>

    <p>For additional flexibility, the directives provided by
    mod_setenvif allow environment variables to be set on a
    per-request basis, conditional on characteristics of particular
    requests. For example, a variable could be set only when a
    specific browser (User-Agent) is making a request, or only when
    a specific Referer [sic] header is found. Even more flexibility
    is available through the mod_rewrite's <code>RewriteRule</code>
    which uses the <code>[E=...]</code> option to set environment
    variables.</p>

    <h3>Unique Identifiers</h3>

    <p>Finally, mod_unique_id sets the environment variable
    <code>UNIQUE_ID</code> for each request to a value which is
    guaranteed to be unique across "all" requests under very
    specific conditions.</p>

    <h3>Standard CGI Variables</h3>

    <p>In addition to all environment variables set within the
    Apache configuration and passed from the shell, CGI scripts and
    SSI pages are provided with a set of environment variables
    containing meta-information about the request as required by
    the <a href="misc/FAQ.html#cgi-spec">CGI specification</a>.</p>

    <h3>Some Caveats</h3>

    <ul>
      <li>It is not possible to override or change the standard CGI
      variables using the environment manipulation directives.</li>

      <li>When <a href="suexec.html">suexec</a> is used to launch
      CGI scripts, the environment will be cleaned down to a set of
      <em>safe</em> variables before CGI scripts are launched. The
      list of <em>safe</em> variables is defined at compile-time in
      <code>suexec.c</code>.</li>

      <li>For portability reasons, the names of environment
      variables may contain only letters, numbers, and the
      underscore character. In addition, the first character may
      not be a number. Characters which do not match this
      restriction will be replaced by an underscore when passed to
      CGI scripts and SSI pages.</li>
    </ul>
    <hr />

    <h2><a id="using" name="using">Using Environment
    Variables</a></h2>

    <table border="1">
      <tr>
        <td valign="top"><strong>Related Modules</strong><br />
         <br />
         <a href="mod/mod_access.html">mod_access</a><br />
         <a href="mod/mod_cgi.html">mod_cgi</a><br />
         <a href="mod/mod_include.html">mod_include</a><br />
         <a href="mod/mod_log_config.html">mod_log_config</a><br />
         <a href="mod/mod_rewrite.html">mod_rewrite</a><br />
         </td>

        <td valign="top"><strong>Related Directives</strong><br />
         <br />
         <a href="mod/mod_access.html#allow">Allow</a><br />
         <a
        href="mod/mod_log_config.html#customlog">CustomLog</a><br />
         <a href="mod/mod_access.html#deny">Deny</a><br />
         <a
        href="mod/mod_log_config.html#logformat">LogFormat</a><br />
         <a
        href="mod/mod_rewrite.html#RewriteCond">RewriteCond</a><br />
         <a
        href="mod/mod_rewrite.html#RewriteRule">RewriteRule</a><br />
         </td>
      </tr>
    </table>

    <h3>CGI Scripts</h3>

    <p>One of the primary uses of environment variables is to
    communicate information to CGI scripts. As discussed above, the
    environment passed to CGI scripts includes standard
    meta-information about the request in addition to any variables
    set within the Apache configuration. For more details, see the
    <a href="howto/cgi.html">CGI tutorial</a>.</p>

    <h3>SSI Pages</h3>

    <p>Server-parsed (SSI) documents processed by mod_include's
    <code>server-parsed</code> handler can print environment
    variables using the <code>echo</code> element, and can use
    environment variables in flow control elements to makes parts
    of a page conditional on characteristics of a request. Apache
    also provides SSI pages with the standard CGI environment
    variables as discussed above. For more details, see the <a
    href="howto/ssi.html">SSI tutorial</a>.</p>

    <h3>Access Control</h3>

    <p>Access to the server can be controlled based on the value of
    environment variables using the <code>allow from env=</code>
    and <code>deny from env=</code> directives. In combination with
    <code>SetEnvIf</code>, this allows for flexible control of
    access to the server based on characteristics of the client.
    For example, you can use these directives to deny access to a
    particular browser (User-Agent).</p>

    <h3>Conditional Logging</h3>

    <p>Environment variables can be logged in the access log using
    the <code>LogFormat</code> option <code>%e</code>. In addition,
    the decision on whether or not to log requests can be made
    based on the status of environment variables using the
    conditional form of the <code>CustomLog</code> directive. In
    combination with <code>SetEnvIf</code> this allows for flexible
    control of which requests are logged. For example, you can
    choose not to log requests for filenames ending in
    <code>gif</code>, or you can choose to only log requests from
    clients which are outside your subnet.</p>

    <h3>URL Rewriting</h3>

    <p>The <code>%{ENV:...}</code> form of <em>TestString</em> in
    the <code>RewriteCond</code> allows mod_rewrite's rewrite
    engine to make decisions conditional on environment variables.
    Note that the variables accessible in mod_rewrite without the
    <code>ENV:</code> prefix are not actually environment
    variables. Rather, they are variables special to mod_rewrite
    which cannot be accessed from other modules.</p>
    <hr />

    <h2><a id="special" name="special">Special Purpose Environment
    Variables</a></h2>

    <p>Interoperability problems have led to the introduction of
    mechanisms to modify the way Apache behaves when talking to
    particular clients. To make these mechanisms as flexible as
    possible, they are invoked by defining environment variables,
    typically with <a
    href="mod/mod_setenvif.html#browsermatch">BrowserMatch</a>,
    though <a href="mod/mod_env.html#setenv">SetEnv</a> and <a
    href="mod/mod_env.html#passenv">PassEnv</a> could also be used,
    for example.</p>

    <h2>downgrade-1.0</h2>

    <p>This forces the request to be treated as a HTTP/1.0 request
    even if it was in a later dialect.</p>

    <h2>force-no-vary</h2>

    <p>This causes any <code>Vary</code> fields to be removed from
    the response header before it is sent back to the client. Some
    clients don't interpret this field correctly (see the <a
    href="misc/known_client_problems.html">known client
    problems</a> page); setting this variable can work around this
    problem. Setting this variable also implies
    <strong>force-response-1.0</strong>.</p>

    <h2>force-response-1.0</h2>

    <p>This forces an HTTP/1.0 response when set. It was originally
    implemented as a result of a problem with AOL's proxies. Some
    clients may not behave correctly when given an HTTP/1.1
    response, and this can be used to interoperate with them.</p>

    <h2>nokeepalive</h2>

    <p>This disables <a
    href="mod/core.html#keepalive">KeepAlive</a> when set.</p>

    <h2>suppress-error-charset</h2>
    <p><i>Available in versions after 1.3.26 and 2.0.40</i></p>
    <p>When Apache issues a redirect in response to a client request,
    the response includes some actual text to be displayed in case
    the client can't (or doesn't) automatically follow the redirection.
    Apache ordinarily labels this text according to the character set
    which it uses, which is ISO-8859-1.</p>
    <p> However, if the redirection is to a page that uses a different
    character set, some broken browser versions will try to use the
    character set from the redirection text rather than the actual page.
    This can result in Greek, for instance, being incorrectly rendered.</p>
    <p>Setting this environment variable causes Apache to omit the character
    set for the redirection text, and these broken browsers will then correctly
    use that of the destination page.</p>
    <hr />

    <h2><a id="examples" name="examples">Examples</a></h2>

    <h3>Changing protocol behavior with misbehaving clients</h3>

    <p>We recommend that the following lines be included in
    httpd.conf to deal with known client problems.</p>
<pre>
#
# The following directives modify normal HTTP response behavior.
# The first directive disables keepalive for Netscape 2.x and browsers that
# spoof it. There are known problems with these browser implementations.
# The second directive is for Microsoft Internet Explorer 4.0b2
# which has a broken HTTP/1.1 implementation and does not properly
# support keepalive when it is used on 301 or 302 (redirect) responses.
#
BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0

#
# The following directive disables HTTP/1.1 responses to browsers which
# are in violation of the HTTP/1.0 spec by not being able to grok a
# basic 1.1 response.
#
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0
</pre>

    <h3>Do not log requests for images in the access log</h3>

    <p>This example keeps requests for images from appearing in the
    access log. It can be easily modified to prevent logging of
    particular directories, or to prevent logging of requests
    coming from particular hosts.</p>
<pre>
    SetEnvIf Request_URI \.gif image-request
    SetEnvIf Request_URI \.jpg image-request
    SetEnvIf Request_URI \.png image-request
    CustomLog logs/access_log env=!image-request
</pre>

    <h3>Prevent "Image Theft"</h3>

    <p>This example shows how to keep people not on your server
    from using images on your server as inline-images on their
    pages. This is not a recommended configuration, but it can work
    in limited circumstances. We assume that all your images are in
    a directory called /web/images.</p>
<pre>
    SetEnvIf Referer "^http://www.example.com/" local_referal
    # Allow browsers that do not send Referer info
    SetEnvIf Referer "^$" local_referal
    &lt;Directory /web/images&gt;
       Order Deny,Allow
       Deny from all
       Allow from env=local_referal
    &lt;/Directory&gt;
</pre>

    <p><em>Note:</em> spelling of 'referer' and 'referal' is
    intentional.</p>

    <p>For more information about this technique, see the
    ApacheToday tutorial " <a
    href="http://apachetoday.com/news_story.php3?ltsn=2000-06-14-002-01-PS">
    Keeping Your Images from Adorning Other Sites</a>".</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>



@


1.7
log
@from tamas tevesz:
==> two more historic modules have gone away
@
text
@@


1.6
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@d238 1
a238 1
    href="mod/mod_browser.html#browsermatch">BrowserMatch</a>,
@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d1 284
a284 236
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Environment Variables in Apache</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server
 </H3>
</DIV>

<h1 align="center">Environment Variables in Apache</h1>

<p>Many operating systems provide a facility for storage and
transmission of information called environment variables.  Apache uses
environment variables in many ways to control operations and to
communicate with other programs like CGI scripts.  This document
explains some of the ways to use environment variables in Apache.</p>

<ul>
<li><a href="#setting">Setting Environment Variables</a></li>
<li><a href="#using">Using Environment Variables</a></li>
<li><a href="#special">Special Purpose Environment Variables</a></li>
<li><a href="#examples">Examples</a></li>
</ul>

<hr>

<h2><a name="setting">Setting Environment Variables</a></h2>

<table border="1">
<tr><td valign="top">
<strong>Related Modules</strong><br><br>

<a href="mod/mod_env.html">mod_env</a><br>
<a href="mod/mod_rewrite.html">mod_rewrite</a><br>
<a href="mod/mod_setenvif.html">mod_setenvif</a><br>
<a href="mod/mod_unique_id.html">mod_unique_id</a><br>

</td><td valign="top">
<strong>Related Directives</strong><br><br>

<A HREF="mod/mod_setenvif.html#BrowserMatch">BrowserMatch</A><br>
<A HREF="mod/mod_setenvif.html#BrowserMatchNoCase">BrowserMatchNoCase</A><br>
<A HREF="mod/mod_env.html#passenv">PassEnv</A><br>
<A HREF="mod/mod_rewrite.html#RewriteRule">RewriteRule</A><br>
<A HREF="mod/mod_env.html#setenv">SetEnv</A><br>
<A HREF="mod/mod_setenvif.html#SetEnvIf">SetEnvIf</A><br>
<A HREF="mod/mod_setenvif.html#SetEnvIfNoCase">SetEnvIfNoCase</A><br>
<A HREF="mod/mod_env.html#unsetenv">UnsetEnv</A><br>
</td></tr></table>

<h3>Basic Environment Manipulation</h3>

<p>The most basic way to set an environment variable in Apache is
using the unconditional <code>SetEnv</code> directive.  Variables
may also be passed from the environment of the shell which started
the server using the <code>PassEnv</code> directive.</p>

<h3>Conditional Per-Request Settings</h3>

<p>For additional flexibility, the directives provided by mod_setenvif
allow environment variables to be set on a per-request basis,
conditional on characteristics of particular requests.  For example, a
variable could be set only when a specific browser (User-Agent) is
making a request, or only when a specific Referer [sic] header is
found.  Even more flexibility is available through the mod_rewrite's
<code>RewriteRule</code> which uses the <code>[E=...]</code> option to
set environment variables.</p>

<h3>Unique Identifiers</h3>

<p>Finally, mod_unique_id sets the environment variable
<code>UNIQUE_ID</code> for each request to a value which is guaranteed
to be unique across "all" requests under very specific conditions.</p>

<h3>Standard CGI Variables</h3>

<p>In addition to all environment variables set within the Apache
configuration and passed from the shell, CGI scripts and SSI pages are
provided with a set of environment variables containing
meta-information about the request as required by the <a
href="misc/FAQ.html#cgi-spec">CGI specification</a>.</p>

<h3>Some Caveats</h3>

<ul>

<li>It is not possible to override or change the standard CGI
variables using the environment manipulation directives.</li> 

<li>When <a href="suexec.html">suexec</a> is used to launch CGI
scripts, the environment will be cleaned down to a set of
<em>safe</em> variables before CGI scripts are launched.  The list of
<em>safe</em> variables is defined at compile-time in
<code>suexec.c</code>.</li>

<li>For portability reasons, the names of environment variables
may contain only letters, numbers, and the underscore character.
In addition, the first character may not be a number.  Characters
which do not match this restriction will be replaced by an
underscore when passed to CGI scripts and SSI pages.</li>

</ul>

<hr>

<h2><a name="using">Using Environment Variables</a></h2>

<table border=1><tr><td valign="top">
<strong>Related Modules</strong><br><br>

<a href="mod/mod_access.html">mod_access</a><br>
<a href="mod/mod_cgi.html">mod_cgi</a><br>
<a href="mod/mod_include.html">mod_include</a><br>
<a href="mod/mod_log_config.html">mod_log_config</a><br>
<a href="mod/mod_rewrite.html">mod_rewrite</a><br>

</td><td valign="top">
<strong>Related Directives</strong><br><br>

<A HREF="mod/mod_access.html#allow">Allow</A><br>
<a href="mod/mod_log_config.html#customlog">CustomLog</a><br>
<A HREF="mod/mod_access.html#deny">Deny</A><br>
<a href="mod/mod_log_config.html#logformat">LogFormat</a><br>
<A HREF="mod/mod_rewrite.html#RewriteCond">RewriteCond</A><br>
<A HREF="mod/mod_rewrite.html#RewriteRule">RewriteRule</A><br>

</td></tr></table>

<h3>CGI Scripts</h3>

<p>One of the primary uses of environment variables is to communicate
information to CGI scripts.  As discussed above, the environment
passed to CGI scripts includes standard meta-information about the request
in addition to any variables set within the Apache configuration.
For more details, see the <a href="howto/cgi.html">CGI tutorial</a>.
</p>

<h3>SSI Pages</h3>

<p>Server-parsed (SSI) documents processed by mod_include's
<code>server-parsed</code> handler can print environment variables
using the <code>echo</code> element, and can use environment variables
in flow control elements to makes parts of a page conditional on
characteristics of a request.  Apache also provides SSI pages with the
standard CGI environment variables as discussed above.  For more
details, see the <a href="howto/ssi.html">SSI tutorial</a>.
</p>

<h3>Access Control</h3>

<p>Access to the server can be controlled based on the value of
environment variables using the <code>allow from env=</code> and
<code>deny from env=</code> directives.  In combination with
<code>SetEnvIf</code>, this allows for flexible control of access to
the server based on characteristics of the client.  For example, you
can use these directives to deny access to a particular browser
(User-Agent).
</p>

<h3>Conditional Logging</h3>

<p>Environment variables can be logged in the access log using the
<code>LogFormat</code> option <code>%e</code>.  In addition, the
decision on whether or not to log requests can be made based on the
status of environment variables using the conditional form of the
<code>CustomLog</code> directive.  In combination with
<code>SetEnvIf</code> this allows for flexible control of which
requests are logged.  For example, you can choose not to log requests
for filenames ending in <code>gif</code>, or you can choose to only
log requests from clients which are outside your subnet.
</p>

<h3>URL Rewriting</h3>

<p>The <code>%{ENV:...}</code> form of <em>TestString</em> in the
<code>RewriteCond</code> allows mod_rewrite's rewrite engine to make
decisions conditional on environment variables.  Note that the
variables accessible in mod_rewrite without the <code>ENV:</code>
prefix are not actually environment variables.  Rather, they
are variables special to mod_rewrite which cannot be accessed from
other modules.</p>

<hr>

<H2><a name="special">Special Purpose Environment Variables</a></H2>
<P>
Interoperability problems have led to the introduction of
mechanisms to modify the way Apache behaves when talking to particular
clients. To make these mechanisms as flexible as possible, they
are invoked by defining environment variables, typically with
<A HREF="mod/mod_browser.html#browsermatch">BrowserMatch</A>, though
<A HREF="mod/mod_env.html#setenv">SetEnv</A> and
<A HREF="mod/mod_env.html#passenv">PassEnv</A> could also be used, for
example.
</P>

<H2>downgrade-1.0</H2>
<P>
This forces the request to be treated as a HTTP/1.0 request even if it
was in a later dialect.
</P>

<H2>force-no-vary</H2>
<P>
This causes any <CODE>Vary</CODE> fields to be removed from the response
header before it is sent back to the client.  Some clients don't
interpret this field correctly (see the
<A HREF="misc/known_client_problems.html">known client problems</A>
page); setting this variable can work around this problem.  Setting
this variable also implies <STRONG>force-response-1.0</STRONG>.
</P>

<H2>force-response-1.0</H2>
<P>
This forces an HTTP/1.0 response when set. It was originally implemented as a
result of a problem with AOL's proxies.  Some clients may not behave correctly
when given an HTTP/1.1 response, and this can be used to interoperate with
them.
</P>

<H2>nokeepalive</H2>
<P>
This disables <A HREF="mod/core.html#keepalive">KeepAlive</A> when set.
</P>
d286 1
d288 1
a288 8
<hr>

<h2><a name="examples">Examples</a></h2>

<h3>Changing protocol behavior with misbehaving clients</h3>

<p>We recommend that the following lines be included in httpd.conf
to deal with known client problems.</p>
d290 2
d314 1
a314 6
<h3>Do not log requests for images in the access log</h3>

<p>This example keeps requests for images from appearing
in the access log.  It can be easily modified to prevent logging
of particular directories, or to prevent logging of requests
coming from particular hosts.</p>
d316 4
d327 1
a327 7
<h3>Prevent &quot;Image Theft&quot;</h3>

<p>This example shows how to keep people not on your server from using
images on your server as inline-images on their pages.  This is not 
a recommended configuration, but it can work in limited 
circumstances.  We assume that all your images are in a directory
called /web/images.</p>
d329 5
d345 14
a358 1
<p><em>Note:</em> spelling of 'referer' and 'referal' is intentional.<p>
a359 9
<p>For more information about this technique, see the ApacheToday
tutorial &quot;<a
href="http://apachetoday.com/news_story.php3?ltsn=2000-06-14-002-01-PS">Keeping
Your Images from Adorning Other Sites</a>&quot;.</p>

<HR>
 <H3 ALIGN="CENTER">
  Apache HTTP Server
 </H3>
a360 1
<A HREF="./"><IMG SRC="images/index.gif" ALT="Index"></A>
a361 2
</BODY>
</HTML>
@


1.4
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.3
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d4 1
a4 1
<TITLE>Special Purpose Environment Variables</TITLE>
d22 176
a197 1
<H1 ALIGN="CENTER">Special Purpose Environment Variables</H1>
d235 1
a235 3
This disables <A HREF="mod/core.html#keepalive">KeepAlive</A> when set. Because
of problems with Netscape 2.x and KeepAlive, we recommend the following
directive be used:
d237 72
a308 3
<PRE>
    BrowserMatch Mozilla/2 nokeepalive
</PRE>
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d70 1
a70 1
  Apache HTTP Server Version 1.3
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d22 3
a24 2
<h1 ALIGN="CENTER">Special Purpose Environment Variables</h1>
<P>Interoperability problems have led to the introduction of
d27 3
a29 3
are invoked by defining environment variables, typically with 
<A HREF="mod/mod_browser.html#browsermatch">BrowserMatch</A>, though 
<A HREF="mod/mod_env.html#setenv">SetEnv</A> and 
d31 26
a56 1
example.</P>
d59 1
d63 4
a66 8
<BLOCKQUOTE><CODE>
BrowserMatch Mozilla/2 nokeepalive
</CODE></BLOCKQUOTE>
<H2>force-response-1.0</H2>
This forces an HTTP/1.0 response when set. It was originally implemented as a
result of a problem with AOL's proxies. Some clients may not behave correctly
when given an HTTP/1.1 response, and this can be used to interoperate with
them.
d69 3
a71 3
<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.2
</H3>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Special Purpose Environment Variables</H1>
d26 3
a28 3
are invoked by defining environment variables, typically with
<A HREF="mod/mod_browser.html#browsermatch">BrowserMatch</A>, though
<A HREF="mod/mod_env.html#setenv">SetEnv</A> and
a38 1

d41 1
a41 1
result of a problem with AOL's proxies.  Some clients may not behave correctly
a44 4
<H2>downgrade-1.0</H2>
<P>This forces the request to be treated as a HTTP/1.0 request even if it
was in a later dialect.

d46 3
a48 3
 <H3 ALIGN="CENTER">
  Apache HTTP Server Version 1.3
 </H3>
@

