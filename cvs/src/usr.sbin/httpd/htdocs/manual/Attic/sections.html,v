head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.38
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.34
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.32
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.30
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.28
	OPENBSD_5_0:1.8.0.26
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.24
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.22
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.18
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	apache_1_3_2:1.1.1.1
	apache:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2005.07.29.23.55.39;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.20.00.16.21;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2002.07.19.21.31.14;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.29.10.21.27;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.12.15.22.17.24;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.28.58;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.10.01.17.19.58;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.10.01.17.19.58;	author beck;	state Exp;
branches;
next	;


desc
@@


1.9
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>How Directory, Location and Files sections work</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">How Directory, Location and Files sections
    work</h1>

    <p>The sections <a
    href="mod/core.html#directory"><code>&lt;Directory&gt;</code></a>,
    <a
    href="mod/core.html#location"><code>&lt;Location&gt;</code></a>
    and <a
    href="mod/core.html#files"><code>&lt;Files&gt;</code></a> can
    contain directives which only apply to specified directories,
    URLs or files respectively. Also htaccess files can be used
    inside a directory to apply directives to that directory. This
    document explains how these different sections differ and how
    they relate to each other when Apache decides which directives
    apply for a particular directory or request URL.</p>

    <h2>Directives allowed in the sections</h2>

    <p>Everything that is syntactically allowed in
    <code>&lt;Directory&gt;</code> is also allowed in
    <code>&lt;Location&gt;</code> (except a
    sub-<code>&lt;Files&gt;</code> section). Semantically, however
    some things, most notably <code>AllowOverride</code> and the
    two options <code>FollowSymLinks</code> and
    <code>SymLinksIfOwnerMatch</code>, make no sense in
    <code>&lt;Location&gt;</code>,
    <code>&lt;LocationMatch&gt;</code> or
    <code>&lt;DirectoryMatch&gt;</code>. The same for
    <code>&lt;Files&gt;</code> -- syntactically everything is fine,
    but semantically some things are different.</p>

    <h2>How the sections are merged</h2>

    <p>The order of merging is:</p>

    <ol>
      <li><code>&lt;Directory&gt;</code> (except regular
      expressions) and .htaccess done simultaneously (with
      .htaccess, if allowed, overriding
      <code>&lt;Directory&gt;</code>)</li>

      <li><code>&lt;DirectoryMatch&gt;</code>, and
      <code>&lt;Directory&gt;</code> with regular expressions</li>

      <li><code>&lt;Files&gt;</code> and
      <code>&lt;FilesMatch&gt;</code> done simultaneously</li>

      <li><code>&lt;Location&gt;</code> and
      <code>&lt;LocationMatch&gt;</code> done simultaneously</li>
    </ol>

    <p>Apart from <code>&lt;Directory&gt;</code>, each group is
    processed in the order that they appear in the configuration
    files. <code>&lt;Directory&gt;</code> (group 1 above) is
    processed in the order shortest directory component to longest.
    If multiple <code>&lt;Directory&gt;</code> sections apply to
    the same directory they are processed in the configuration
    file order. The configuration files are read in the order
    httpd.conf, srm.conf and access.conf. Configurations included
    via the <code>Include</code> directive will be treated as if
    they were inside the including file at the location of the
    <code>Include</code> directive.</p>

    <p>Sections inside <code>&lt;VirtualHost&gt;</code> sections
    are applied <em>after</em> the corresponding sections outside
    the virtual host definition. This allows virtual hosts to
    override the main server configuration. (Note: this only works
    correctly from 1.2.2 and 1.3a2 onwards. Before those releases
    sections inside virtual hosts were applied <em>before</em> the
    main server).</p>

    <p>Later sections override earlier ones.</p>

    <h2>Notes about using sections</h2>

    <p>The general guidelines are:</p>

    <ul>
      <li>If you are attempting to match objects at the filesystem
      level then you must use <code>&lt;Directory&gt;</code> and/or
      <code>&lt;Files&gt;</code>.</li>

      <li>If you are attempting to match objects at the URL level
      then you must use <code>&lt;Location&gt;</code></li>
    </ul>

    <p>But a notable exception is:</p>

    <ul>
      <li>proxy control is done via <code>&lt;Directory&gt;</code>.
      This is a legacy mistake because the proxy existed prior to
      <code>&lt;Location&gt;</code>. A future version of the config
      language should probably switch this to
      <code>&lt;Location&gt;</code>.</li>
    </ul>

    <p>Note about .htaccess parsing:</p>

    <ul>
      <li>Modifying .htaccess parsing during Location doesn't do
      anything because .htaccess parsing has already occurred.</li>
    </ul>

    <p><code>&lt;Location&gt;</code> and symbolic links:</p>

    <ul>
      <li>It is not possible to use "<code>Options
      FollowSymLinks</code>" or "<code>Options
      SymLinksIfOwnerMatch</code>" inside a
      <code>&lt;Location&gt;</code>,
      <code>&lt;LocationMatch&gt;</code> or
      <code>&lt;DirectoryMatch&gt;</code> section (the options are
      simply ignored). Using the options in question is only
      possible inside a <code>&lt;Directory&gt;</code> section (or
      a <code>.htaccess</code> file).</li>
    </ul>

    <p><code>&lt;Files&gt;</code> and <code>Options</code>:</p>

    <ul>
      <li>Apache won't check for it, but using an
      <code>Options</code> directive inside a
      <code>&lt;Files&gt;</code> section has no effect.</li>
    </ul>

    <p>Another note:</p>

    <ul>
      <li>There is actually a
      <code>&lt;Location&gt;</code>/<code>&lt;LocationMatch&gt;</code>
      sequence performed just before the name translation phase
      (where <code>Aliases</code> and <code>DocumentRoots</code>
      are used to map URLs to filenames). The results of this
      sequence are completely thrown away after the translation has
      completed.</li>
    </ul>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>



@


1.8
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.7
log
@remove pre-apache-1.3.26 cruft

Note for upgraders:
to actually see the current manual, you should do

find /var/www/htdocs/manual/ -type f -exec rm {} \;
cd /usr/src/usr.sbin/httpd/
make -f Makefile.bsd-wrapper distribution

you will also need a current httpd.conf, MultiViews need to be enabled in
/var/www/htdocs/manual/
@
text
@d1 169
@


1.6
log
@merge
@
text
@@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@a0 165
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>How Directory, Location and Files sections work</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">How Directory, Location and Files sections
    work</h1>

    <p>The sections <a
    href="mod/core.html#directory"><code>&lt;Directory&gt;</code></a>,
    <a
    href="mod/core.html#location"><code>&lt;Location&gt;</code></a>
    and <a
    href="mod/core.html#files"><code>&lt;Files&gt;</code></a> can
    contain directives which only apply to specified directories,
    URLs or files respectively. Also htaccess files can be used
    inside a directory to apply directives to that directory. This
    document explains how these different sections differ and how
    they relate to each other when Apache decides which directives
    apply for a particular directory or request URL.</p>

    <h2>Directives allowed in the sections</h2>

    <p>Everything that is syntactically allowed in
    <code>&lt;Directory&gt;</code> is also allowed in
    <code>&lt;Location&gt;</code> (except a
    sub-<code>&lt;Files&gt;</code> section). Semantically, however
    some things, most notably <code>AllowOverride</code> and the
    two options <code>FollowSymLinks</code> and
    <code>SymLinksIfOwnerMatch</code>, make no sense in
    <code>&lt;Location&gt;</code>,
    <code>&lt;LocationMatch&gt;</code> or
    <code>&lt;DirectoryMatch&gt;</code>. The same for
    <code>&lt;Files&gt;</code> -- syntactically everything is fine,
    but semantically some things are different.</p>

    <h2>How the sections are merged</h2>

    <p>The order of merging is:</p>

    <ol>
      <li><code>&lt;Directory&gt;</code> (except regular
      expressions) and .htaccess done simultaneously (with
      .htaccess, if allowed, overriding
      <code>&lt;Directory&gt;</code>)</li>

      <li><code>&lt;DirectoryMatch&gt;</code>, and
      <code>&lt;Directory&gt;</code> with regular expressions</li>

      <li><code>&lt;Files&gt;</code> and
      <code>&lt;FilesMatch&gt;</code> done simultaneously</li>

      <li><code>&lt;Location&gt;</code> and
      <code>&lt;LocationMatch&gt;</code> done simultaneously</li>
    </ol>

    <p>Apart from <code>&lt;Directory&gt;</code>, each group is
    processed in the order that they appear in the configuration
    files. <code>&lt;Directory&gt;</code> (group 1 above) is
    processed in the order shortest directory component to longest.
    If multiple <code>&lt;Directory&gt;</code> sections apply to
    the same directory they they are processed in the configuration
    file order. The configuration files are read in the order
    httpd.conf, srm.conf and access.conf. Configurations included
    via the <code>Include</code> directive will be treated as if
    they were inside the including file at the location of the
    <code>Include</code> directive.</p>

    <p>Sections inside <code>&lt;VirtualHost&gt;</code> sections
    are applied <em>after</em> the corresponding sections outside
    the virtual host definition. This allows virtual hosts to
    override the main server configuration. (Note: this only works
    correctly from 1.2.2 and 1.3a2 onwards. Before those releases
    sections inside virtual hosts were applied <em>before</em> the
    main server).</p>

    <p>Later sections override earlier ones.</p>

    <h2>Notes about using sections</h2>

    <p>The general guidelines are:</p>

    <ul>
      <li>If you are attempting to match objects at the filesystem
      level then you must use <code>&lt;Directory&gt;</code> and/or
      <code>&lt;Files&gt;</code>.</li>

      <li>If you are attempting to match objects at the URL level
      then you must use <code>&lt;Location&gt;</code></li>
    </ul>

    <p>But a notable exception is:</p>

    <ul>
      <li>proxy control is done via <code>&lt;Directory&gt;</code>.
      This is a legacy mistake because the proxy existed prior to
      <code>&lt;Location&gt;</code>. A future version of the config
      language should probably switch this to
      <code>&lt;Location&gt;</code>.</li>
    </ul>

    <p>Note about .htaccess parsing:</p>

    <ul>
      <li>Modifying .htaccess parsing during Location doesn't do
      anything because .htaccess parsing has already occurred.</li>
    </ul>

    <p><code>&lt;Location&gt;</code> and symbolic links:</p>

    <ul>
      <li>It is not possible to use "<code>Options
      FollowSymLinks</code>" or "<code>Options
      SymLinksIfOwnerMatch</code>" inside a
      <code>&lt;Location&gt;</code>,
      <code>&lt;LocationMatch&gt;</code> or
      <code>&lt;DirectoryMatch&gt;</code> section (the options are
      simply ignored). Using the options in question is only
      possible inside a <code>&lt;Directory&gt;</code> section (or
      a <code>.htaccess</code> file).</li>
    </ul>

    <p><code>&lt;Files&gt;</code> and <code>Options</code>:</p>

    <ul>
      <li>Apache won't check for it, but using an
      <code>Options</code> directive inside a
      <code>&lt;Files&gt;</code> section has no effect.</li>
    </ul>

    <p>Another note:</p>

    <ul>
      <li>There is actually a
      <code>&lt;Location&gt;</code>/<code>&lt;LocationMatch&gt;</code>
      sequence performed just before the name translation phase
      (where <code>Aliases</code> and <code>DocumentRoots</code>
      are used to map URLs to filenames). The results of this
      sequence are completely thrown away after the translation has
      completed.</li>
    </ul>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>

@


1.4
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 2
a2 172
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML><HEAD>
<TITLE>How Directory, Location and Files sections work</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server
 </H3>
</DIV>


<H1 ALIGN="CENTER">How Directory, Location and Files sections work</H1>

<p>The sections <A
HREF="mod/core.html#directory"><CODE>&lt;Directory&gt;</CODE></A>, <A
HREF="mod/core.html#location"><CODE>&lt;Location&gt;</CODE></A> and <A
HREF="mod/core.html#files"><CODE>&lt;Files&gt;</CODE></A> can contain
directives which only apply to specified directories, URLs or files
respectively. Also htaccess files can be used inside a directory to
apply directives to that directory. This document explains how these
different sections differ and how they relate to each other when
Apache decides which directives apply for a particular directory or
request URL.</p>

<H2>Directives allowed in the sections</H2>

<p>Everything that is syntactically allowed in
<CODE>&lt;Directory&gt;</CODE> is also allowed in
<CODE>&lt;Location&gt;</CODE> (except a sub-<CODE>&lt;Files&gt;</CODE>
section).  Semantically, however some things, most
notably <CODE>AllowOverride</CODE> and the two options
<CODE>FollowSymLinks</CODE> and <CODE>SymLinksIfOwnerMatch</CODE>,
make no sense in <CODE>&lt;Location&gt;</CODE>,
<CODE>&lt;LocationMatch&gt;</CODE> or <CODE>&lt;DirectoryMatch&gt;</CODE>.
The same for <CODE>&lt;Files&gt;</CODE> -- syntactically everything
is fine, but semantically some things are different.</p>

<H2>How the sections are merged</H2>

<p>The order of merging is:</p>

<OL>

<LI>

 <CODE>&lt;Directory&gt;</CODE> (except regular expressions) and
 .htaccess done simultaneously (with .htaccess, if allowed, overriding
 <CODE>&lt;Directory&gt;</CODE>)

</LI>

<LI>
 <CODE>&lt;DirectoryMatch&gt;</CODE>, and
 <CODE>&lt;Directory&gt;</CODE> with regular expressions

</LI>

 <LI><CODE>&lt;Files&gt;</CODE> and <CODE>&lt;FilesMatch&gt;</CODE> done
  simultaneously
 </LI>

 <LI><CODE>&lt;Location&gt;</CODE> and <CODE>&lt;LocationMatch&gt;</CODE> done
  simultaneously
 </LI>

</OL>

<p>Apart from <CODE>&lt;Directory&gt;</CODE>, each group is processed in
the order that they appear in the configuration
files. <CODE>&lt;Directory&gt;</CODE> (group 1 above) is processed in
the order shortest directory component to longest. If multiple
<CODE>&lt;Directory&gt;</CODE> sections apply to the same directory
they they are processed in the configuration file order.  The
configuration files are read in the order httpd.conf, srm.conf and
access.conf. Configurations included via the <CODE>Include</CODE>
directive will be treated as if they were inside the including file
at the location of the <CODE>Include</CODE> directive.</p>

<p>Sections inside <CODE>&lt;VirtualHost&gt;</CODE> sections are applied
<EM>after</EM> the corresponding sections outside the virtual host
definition. This allows virtual hosts to override the main server
configuration. (Note: this only works correctly from 1.2.2 and 1.3a2
onwards. Before those releases sections inside virtual hosts were
applied <EM>before</EM> the main server).</p>

<p>Later sections override earlier ones.</p>

<H2>Notes about using sections</H2>

<p>The general guidelines are:</p>

<UL>
<LI>
    If you are attempting to match objects at the filesystem level
    then you must use <CODE>&lt;Directory&gt;</CODE> and/or
    <CODE>&lt;Files&gt;</CODE>.
</LI>

<LI>
    If you are attempting to match objects at the URL level then you
    must use <CODE>&lt;Location&gt;</CODE>
</LI>
</UL>

<p>But a notable exception is:</p>

<UL>
<LI>
    proxy control is done via <CODE>&lt;Directory&gt;</CODE>.  This is
    a legacy mistake because the proxy existed prior to
    <CODE>&lt;Location&gt;</CODE>.  A future version of the config
    language should probably switch this to
    <CODE>&lt;Location&gt;</CODE>.
</LI>
</UL>

<p>Note about .htaccess parsing:</p>

<UL>
<LI>
    Modifying .htaccess parsing during Location doesn't do
    anything because .htaccess parsing has already occurred.
</UL>

<p><CODE>&lt;Location&gt;</CODE> and symbolic links:</p>

<UL>
<LI>
    It is not possible to use "<CODE>Options FollowSymLinks</CODE>"
    or "<CODE>Options SymLinksIfOwnerMatch</CODE>" inside a
    <CODE>&lt;Location&gt;</CODE>, <CODE>&lt;LocationMatch&gt;</CODE>
    or <CODE>&lt;DirectoryMatch&gt;</CODE> section
    (the options are simply ignored).
    Using the options in question is only possible inside a
    <CODE>&lt;Directory&gt;</CODE> section (or a <CODE>.htaccess</CODE> file).
</UL>

<p><CODE>&lt;Files&gt;</CODE> and <CODE>Options</CODE>:</p>

<UL>
<LI>
    Apache won't check for it, but using an <CODE>Options</CODE>
    directive inside a <CODE>&lt;Files&gt;</CODE> section has no effect.
</UL>

<p>Another note:</p>

<UL>
<LI>
    There is actually a
    <CODE>&lt;Location&gt;</CODE>/<CODE>&lt;LocationMatch&gt;</CODE>
    sequence performed just before the name translation phase (where
    <CODE>Aliases</CODE> and <CODE>DocumentRoots</CODE> are used to
    map URLs to filenames).  The results of this sequence are
    completely thrown away after the translation has completed.
</LI>
</UL>

<HR>
 <H3 ALIGN="CENTER">
  Apache HTTP Server
 </H3>
d4 161
a164 1
<A HREF="./"><IMG SRC="images/index.gif" ALT="Index"></A>
a165 2
</BODY>
</HTML>
@


1.3
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d21 1
d24 1
a24 1
The sections <A
d33 1
a33 1
request URL.
d37 1
a37 1
Everything that is syntactically allowed in
d40 2
a41 2
section).  Semantically however some things, and the most
notable are <CODE>AllowOverride</CODE> and the two options
d46 1
a46 1
is fine, but semantically some things are different.
d50 1
a50 1
The order of merging is:
d57 1
a57 1
 .htaccess done simultaneously (with .htaccess overriding
d78 1
a78 1
Apart from <CODE>&lt;Directory&gt;</CODE>, each group is processed in
d87 1
a87 3
at the location of the <CODE>Include</CODE> directive.

<P>
d89 1
a89 1
Sections inside <CODE>&lt;VirtualHost&gt;</CODE> sections are applied
d94 3
a96 1
applied <EM>before</EM> the main server).
d100 1
a100 3
The general guidelines are:

<P>
d115 1
a115 1
But a notable exception is:
d127 2
a128 3
<P>
Note about .htaccess parsing:
</P>
d135 2
a136 3
<P>
<CODE>&lt;Location&gt;</CODE> and symbolic links:
</P>
d148 2
a149 3
<P>
<CODE>&lt;Files&gt;</CODE> and <CODE>Options</CODE>:
</P>
d156 1
a156 3
<P>
Another note:
</P>
d176 2
a177 1
</BODY></HTML>
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d17 1
a17 1
  Apache HTTP Server Version 1.3
d85 1
a85 1
directive will be treated as if they where inside the including file
d177 1
a177 1
  Apache HTTP Server Version 1.3
@


1.1
log
@Initial revision
@
text
@d42 4
a45 3
make no sense in <CODE>&lt;Location&gt;</CODE>.  The same for
<CODE>&lt;Files&gt;</CODE> -- syntactically everything is fine, but
semantically some things are different.
d144 2
a145 1
    <CODE>&lt;Location&gt;</CODE>/<CODE>&lt;LocationMatch&gt;</CODE> section
@


1.1.1.1
log
@Apache 1.3.2
@
text
@@
