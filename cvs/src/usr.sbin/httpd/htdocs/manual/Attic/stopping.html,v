head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.38
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.34
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.32
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.30
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.28
	OPENBSD_5_0:1.7.0.26
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.24
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.22
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2005.07.29.23.55.39;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.12.07.56.47;	author beck;	state dead;
branches;
next	1.5;

1.5
date	2001.03.29.10.21.28;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.26;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.28.59;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.07;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.31;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.31;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.58;	author beck;	state Exp;
branches;
next	;


desc
@@


1.8
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Stopping and Restarting Apache</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">Stopping and Restarting Apache</h1>

    <p>You will notice many <code>httpd</code> executables running
    on your system, but you should not send signals to any of them
    except the parent, whose pid is in the <a
    href="mod/core.html#pidfile">PidFile</a>. That is to say you
    shouldn't ever need to send signals to any process except the
    parent. There are three signals that you can send the parent:
    <code>TERM</code>, <code>HUP</code>, and <code>USR1</code>,
    which will be described in a moment.</p>

    <p>To send a signal to the parent you should issue a command
    such as:</p>

    <blockquote>
<pre>
    kill -TERM `cat /usr/local/apache/logs/httpd.pid`
</pre>
    </blockquote>
    You can read about its progress by issuing: 

    <blockquote>
<pre>
    tail -f /usr/local/apache/logs/error_log
</pre>
    </blockquote>
    Modify those examples to match your <a
    href="mod/core.html#serverroot">ServerRoot</a> and <a
    href="mod/core.html#pidfile">PidFile</a> settings. 

    <p>As of Apache 1.3 we provide a script called <a
    href="programs/apachectl.html">apachectl</a> which can be used
    to start, stop, and restart Apache. It may need a little
    customization for your system, see the comments at the top of
    the script.</p>

    <h3>TERM Signal: stop now</h3>

    <p>Sending the <code>TERM</code> signal to the parent causes it
    to immediately attempt to kill off all of its children. It may
    take it several seconds to complete killing off its children.
    Then the parent itself exits. Any requests in progress are
    terminated, and no further requests are served.</p>

    <h3>HUP Signal: restart now</h3>

    <p>Sending the <code>HUP</code> signal to the parent causes it
    to kill off its children like in <code>TERM</code> but the
    parent doesn't exit. It re-reads its configuration files, and
    re-opens any log files. Then it spawns a new set of children
    and continues serving hits.</p>

    <p>Users of the <a href="mod/mod_status.html">status module</a>
    will notice that the server statistics are set to zero when a
    <code>HUP</code> is sent.</p>

    <p><strong>Note:</strong> If your configuration file has errors
    in it when you issue a restart then your parent will not
    restart, it will exit with an error. See below for a method of
    avoiding this.</p>

    <h3>USR1 Signal: graceful restart</h3>

    <p><strong>Note:</strong> prior to release 1.2b9 this code is
    quite unstable and shouldn't be used at all.</p>

    <p>The <code>USR1</code> signal causes the parent process to
    <em>advise</em> the children to exit after their current
    request (or to exit immediately if they're not serving
    anything). The parent re-reads its configuration files and
    re-opens its log files. As each child dies off the parent
    replaces it with a child from the new <em>generation</em> of
    the configuration, which begins serving new requests
    immediately.</p>

    <p>This code is designed to always respect the <a
    href="mod/core.html#maxclients">MaxClients</a>, <a
    href="mod/core.html#minspareservers">MinSpareServers</a>, and
    <a href="mod/core.html#maxspareservers">MaxSpareServers</a>
    settings. Furthermore, it respects <a
    href="mod/core.html#startservers">StartServers</a> in the
    following manner: if after one second at least StartServers new
    children have not been created, then create enough to pick up
    the slack. This is to say that the code tries to maintain both
    the number of children appropriate for the current load on the
    server, and respect your wishes with the StartServers
    parameter.</p>

    <p>Users of the <a href="mod/mod_status.html">status module</a>
    will notice that the server statistics are <strong>not</strong>
    set to zero when a <code>USR1</code> is sent. The code was
    written to both minimize the time in which the server is unable
    to serve new requests (they will be queued up by the operating
    system, so they're not lost in any event) and to respect your
    tuning parameters. In order to do this it has to keep the
    <em>scoreboard</em> used to keep track of all children across
    generations.</p>

    <p>The status module will also use a <code>G</code> to indicate
    those children which are still serving requests started before
    the graceful restart was given.</p>

    <p>At present there is no way for a log rotation script using
    <code>USR1</code> to know for certain that all children writing
    the pre-restart log have finished. We suggest that you use a
    suitable delay after sending the <code>USR1</code> signal
    before you do anything with the old log. For example if most of
    your hits take less than 10 minutes to complete for users on
    low bandwidth links then you could wait 15 minutes before doing
    anything with the old log.</p>

    <p><strong>Note:</strong> If your configuration file has errors
    in it when you issue a restart then your parent will not
    restart, it will exit with an error. In the case of graceful
    restarts it will also leave children running when it exits.
    (These are the children which are "gracefully exiting" by
    handling their last request.) This will cause problems if you
    attempt to restart the server -- it will not be able to bind to
    its listening ports. Before doing a restart, you can check the
    syntax of the configuration files with the <code>-t</code>
    command line argument (see <a
    href="programs/httpd.html">httpd</a> ). This still will not
    guarantee that the server will restart correctly. To check the
    semantics of the configuration files as well as the syntax, you
    can try starting httpd as a non-root user. If there are no
    errors it will attempt to open its sockets and logs and fail
    because it's not root (or because the currently running httpd
    already has those ports bound). If it fails for any other
    reason then it's probably a config file error and the error
    should be fixed before issuing the graceful restart.</p>

    <h3>Appendix: signals and race conditions</h3>

    <p>Prior to Apache 1.2b9 there were several <em>race
    conditions</em> involving the restart and die signals (a simple
    description of race condition is: a time-sensitive problem, as
    in if something happens at just the wrong time it won't behave
    as expected). For those architectures that have the "right"
    feature set we have eliminated as many as we can. But it should
    be noted that there still do exist race conditions on certain
    architectures.</p>

    <p>Architectures that use an on disk <a
    href="mod/core.html#scoreboardfile">ScoreBoardFile</a> have the
    potential to corrupt their scoreboards. This can result in the
    "bind: Address already in use" (after <code>HUP</code>) or
    "long lost child came home!" (after <code>USR1</code>). The
    former is a fatal error, while the latter just causes the
    server to lose a scoreboard slot. So it might be advisable to
    use graceful restarts, with an occasional hard restart. These
    problems are very difficult to work around, but fortunately
    most architectures do not require a scoreboard file. See the <a
    href="mod/core.html#scoreboardfile">ScoreBoardFile</a>
    documentation for a architecture uses it.</p>

    <p><code>NEXT</code> and <code>MACHTEN</code> (68k only) have
    small race conditions which can cause a restart/die signal to
    be lost, but should not cause the server to do anything
    otherwise problematic. 
    <!-- they don't have sigaction, or we're not using it -djg -->
    </p>

    <p>All architectures have a small race condition in each child
    involving the second and subsequent requests on a persistent
    HTTP connection (KeepAlive). It may exit after reading the
    request line but before reading any of the request headers.
    There is a fix that was discovered too late to make 1.2. In
    theory this isn't an issue because the KeepAlive client has to
    expect these events because of network latencies and server
    timeouts. In practice it doesn't seem to affect anything either
    -- in a test case the server was restarted twenty times per
    second and clients successfully browsed the site without
    getting broken images or empty documents. 
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

    </p>
  </body>
</html>



@


1.7
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.6
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d1 4
a4 34
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Stopping and Restarting Apache</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server
 </H3>
</DIV>

<H1 ALIGN="CENTER">Stopping and Restarting Apache</H1>

<P>This document covers stopping and restarting Apache on Unix
only. Windows users should see <A HREF="windows.html#signal">Signalling
Apache when running</A>.</P>

<P>You will notice many <CODE>httpd</CODE> executables running on your system,
but you should not send signals to any of them except the parent, whose
pid is in the <A HREF="mod/core.html#pidfile">PidFile</A>.  That is to
say you shouldn't ever need to send signals to any process except the
parent.  There are three signals that you can send the parent:
<CODE>TERM</CODE>, <CODE>HUP</CODE>, and <CODE>USR1</CODE>, which will
be described in a moment.
d6 34
a39 2
<P>To send a signal to the parent you should issue a command such as:
<BLOCKQUOTE><PRE>
d41 3
a43 3
</PRE></BLOCKQUOTE>

You can read about its progress by issuing:
d45 2
a46 1
<BLOCKQUOTE><PRE>
d48 157
a204 1
</PRE></BLOCKQUOTE>
a205 144
Modify those examples to match your
<A HREF="mod/core.html#serverroot">ServerRoot</A> and
<A HREF="mod/core.html#pidfile">PidFile</A> settings.

<P>As of Apache 1.3 we provide a script called <a
href="programs/apachectl.html">apachectl</a> which can be used to
start, stop, and restart Apache.  It may need a little customization
for your system, see the comments at the top of the script.

<H3>TERM Signal: stop now</H3>

<P>Sending the <CODE>TERM</CODE> signal to the parent causes it to
immediately attempt to kill off all of its children.  It may take it
several seconds to complete killing off its children.  Then the
parent itself exits.  Any requests in progress are terminated, and no
further requests are served.

<H3>HUP Signal: restart now</H3>

<P>Sending the <CODE>HUP</CODE> signal to the parent causes it to kill off
its children like in <CODE>TERM</CODE> but the parent doesn't exit.  It
re-reads its configuration files, and re-opens any log files.
Then it spawns a new set of children and continues
serving hits.

<P>Users of the
<A HREF="mod/mod_status.html">status module</A>
will notice that the server statistics are
set to zero when a <CODE>HUP</CODE> is sent.

<P><STRONG>Note:</STRONG> If your configuration file has errors in it when
you issue a
restart then your parent will not restart, it will exit with an error.
See below for a method of avoiding this.

<H3>USR1 Signal: graceful restart</H3>

<P><STRONG>Note:</STRONG> prior to release 1.2b9 this code is quite unstable
and shouldn't be used at all.

<P>The <CODE>USR1</CODE> signal causes the parent process to <EM>advise</EM>
the children to exit after their current request (or to exit immediately
if they're not serving anything).  The parent re-reads its configuration
files and re-opens its log files.  As each child dies off the parent
replaces it with a child from the new <EM>generation</EM> of the
configuration, which begins serving new requests immediately.

<P>This code is designed to always respect the
<A HREF="mod/core.html#maxclients">MaxClients</A>,
<A HREF="mod/core.html#minspareservers">MinSpareServers</A>,
and <A HREF="mod/core.html#maxspareservers">MaxSpareServers</A> settings.
Furthermore, it respects <A HREF="mod/core.html#startservers">StartServers</A>
in the following manner:  if after one second at least StartServers new
children have not been created, then create enough to pick up the slack.
This is to say that the code tries to maintain both the number of children
appropriate for the current load on the server, and respect your wishes
with the StartServers parameter.

<P>Users of the
<A HREF="mod/mod_status.html">status module</A>
will notice that the server statistics
are <STRONG>not</STRONG> set to zero when a <CODE>USR1</CODE> is sent.  The
code
was written to both minimize the time in which the server is unable to serve
new requests (they will be queued up by the operating system, so they're
not lost in any event) and to respect your tuning parameters.  In order
to do this it has to keep the <EM>scoreboard</EM> used to keep track
of all children across generations.

<P>The status module will also use a <CODE>G</CODE> to indicate those
children which are still serving requests started before the graceful
restart was given.

<P>At present there is no way for a log rotation script using
<CODE>USR1</CODE> to know for certain that all children writing the
pre-restart log have finished.  We suggest that you use a suitable delay
after sending the <CODE>USR1</CODE> signal before you do anything with the
old log.  For example if most of your hits take less than 10 minutes to
complete for users on low bandwidth links then you could wait 15 minutes
before doing anything with the old log.

<P><STRONG>Note:</STRONG> If your configuration file has errors in it when
you issue a
restart then your parent will not restart, it will exit with an error.
In the case of graceful
restarts it will also leave children running when it exits.  (These are
the children which are "gracefully exiting" by handling their last request.)
This will cause problems if you attempt to restart the server -- it will
not be able to bind to its listening ports.  Before doing a restart, you
can check the syntax of the configuration files with the <CODE>-t</CODE>
command line argument (see <A HREF="invoking.html">Starting
Apache</A>). This still will not guarantee that the server will restart
correctly. To check the semantics of the configuration files as well
as the syntax, you can try starting httpd as a non-root user.  If
there are no errors it will attempt to open its sockets and logs and
fail because it's not root (or because the currently running httpd
already has those ports bound).  If it fails for any other reason then
it's probably a config file error and the error should be fixed before
issuing the graceful restart.


<H3>Appendix: signals and race conditions</H3>

<P>Prior to Apache 1.2b9 there were several <EM>race conditions</EM>
involving the restart and die signals (a simple description of race
condition is: a time-sensitive problem, as in if something happens at just
the wrong time it won't behave as expected).  For those architectures that
have the "right" feature set we have eliminated as many as we can.
But it should be noted that there still do exist race conditions on
certain architectures.

<P>Architectures that use an on disk
<A HREF="mod/core.html#scoreboardfile">ScoreBoardFile</A>
have the potential to corrupt their scoreboards.  This can result in
the "bind: Address already in use" (after <CODE>HUP</CODE>) or
"long lost child came home!" (after <CODE>USR1</CODE>).  The former is
a fatal error, while the latter just causes the server to lose a scoreboard
slot.  So it might be advisable to use graceful restarts, with
an occasional hard restart.  These problems are very difficult to work
around, but fortunately most architectures do not require a scoreboard file.
See the ScoreBoardFile documentation for a method to determine if your
architecture uses it.

<P><CODE>NEXT</CODE> and <CODE>MACHTEN</CODE> (68k only) have small race
conditions
which can cause a restart/die signal to be lost, but should not cause the
server to do anything otherwise problematic.
<!-- they don't have sigaction, or we're not using it -djg -->

<P>All architectures have a small race condition in each child involving
the second and subsequent requests on a persistent HTTP connection
(KeepAlive).  It may exit after reading the request line but before
reading any of the request headers.  There is a fix that was discovered
too late to make 1.2.  In theory this isn't an issue because the KeepAlive
client has to expect these events because of network latencies and
server timeouts.  In practice it doesn't seem to affect anything either
-- in a test case the server was restarted twenty times per second and
clients successfully browsed the site without getting broken images or
empty documents.

<HR>
 <H3 ALIGN="CENTER">
  Apache HTTP Server
 </H3>
a206 1
<A HREF="./"><IMG SRC="images/index.gif" ALT="Index"></A>
a207 2
</BODY>
</HTML>
@


1.5
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d51 4
a54 4
<P>As of Apache 1.3 we provide a script <CODE>src/support/apachectl</CODE>
which can be used to start, stop, and restart Apache.  It may need a
little customization for your system, see the comments at the top of
the script.
@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d189 1
a189 1
  Apache HTTP Server Version 1.3
@


1.2
log
@Apache 1.3.4 merge
@
text
@d135 12
a146 7
not be able to bind to its listening ports.  At present the only work
around is to check the syntax of your files before doing a restart.  The
easiest way is to just run httpd as a non-root user.  If there are no
errors it will attempt to open its sockets and logs and fail because it's
not root (or because the currently running httpd already has those ports
bound).  If it fails for any other reason then it's probably a config file
error and the error should be fixed before issuing the graceful restart.
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d22 1
a22 1
<h1 ALIGN="CENTER">Stopping and Restarting Apache</h1>
d24 5
a28 1
<p>You will notice many <code>httpd</code> executables running on your system,
d30 1
a30 1
pid is in the <a href="mod/core.html#pidfile">PidFile</a>.  That is to
d33 1
a33 1
<code>TERM</code>, <code>HUP</code>, and <code>USR1</code>, which will
d36 4
a39 4
<p>To send a signal to the parent you should issue a command such as:
<blockquote><pre>
    kill -TERM `cat /usr/local/etc/httpd/logs/httpd.pid`
</pre></blockquote>
d43 3
a45 3
<blockquote><pre>
    tail -f /usr/local/etc/httpd/logs/error_log
</pre></blockquote>
d48 7
a54 2
<a href="mod/core.html#serverroot">ServerRoot</a> and
<a href="mod/core.html#pidfile">PidFile</a> settings.
d56 1
a56 1
<h3>TERM Signal: stop now</h3>
d58 1
a58 1
<p>Sending the <code>TERM</code> signal to the parent causes it to
d64 1
a64 1
<h3>HUP Signal: restart now</h3>
d66 2
a67 2
<p>Sending the <code>HUP</code> signal to the parent causes it to kill off
its children like in <code>TERM</code> but the parent doesn't exit.  It
d72 2
a73 2
<p>Users of the
<a href="mod/mod_status.html">status module</a>
d75 1
a75 1
set to zero when a <code>HUP</code> is sent.
d77 2
a78 1
<p><b>Note:</b> If your configuration file has errors in it when you issue a
d82 1
a82 1
<h3>USR1 Signal: graceful restart</h3>
d84 2
a85 2
<p><b>Note:</b> prior to release 1.2b9 this code is quite unstable and
shouldn't be used at all.
d87 1
a87 1
<p>The <code>USR1</code> signal causes the parent process to <i>advise</i>
d91 1
a91 1
replaces it with a child from the new <i>generation</i> of the
d94 5
a98 5
<p>This code is designed to always respect the
<a href="mod/core.html#maxclients">MaxClients</a>,
<a href="mod/core.html#minspareservers">MinSpareServers</a>,
and <a href="mod/core.html#maxspareservers">MaxSpareServers</a> settings.
Furthermore, it respects <a href="mod/core.html#startservers">StartServers</a>
d105 2
a106 2
<p>Users of the
<a href="mod/mod_status.html">status module</a>
d108 2
a109 1
are <b>not</b> set to zero when a <code>USR1</code> is sent.  The code
d113 1
a113 1
to do this it has to keep the <i>scoreboard</i> used to keep track
d116 1
a116 1
<p>The status module will also use a <code>G</code> to indicate those
d120 2
a121 2
<p>At present there is no way for a log rotation script using
<code>USR1</code> to know for certain that all children writing the
d123 1
a123 1
after sending the <code>USR1</code> signal before you do anything with the
d128 2
a129 1
<p><b>Note:</b> If your configuration file has errors in it when you issue a
d143 1
a143 1
<h3>Appendix: signals and race conditions</h3>
d145 1
a145 1
<p>Prior to Apache 1.2b9 there were several <i>race conditions</i>
d153 2
a154 2
<p>Architectures that use an on disk
<a href="mod/core.html#scoreboardfile">ScoreBoardFile</a>
d156 2
a157 2
the "bind: Address already in use" (after <code>HUP</code>) or
"long lost child came home!" (after <code>USR1</code>).  The former is
d165 1
a165 1
<p><code>NEXT</code> and <code>MACHTEN</code> (68k only) have small race
d171 1
a171 1
<p>All architectures have a small race condition in each child involving
d183 3
a185 3
<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.2
</H3>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Stopping and Restarting Apache</H1>
d24 1
a24 1
<P>You will notice many <CODE>httpd</CODE> executables running on your system,
d26 1
a26 1
pid is in the <A HREF="mod/core.html#pidfile">PidFile</A>.  That is to
d29 1
a29 1
<CODE>TERM</CODE>, <CODE>HUP</CODE>, and <CODE>USR1</CODE>, which will
d32 4
a35 4
<P>To send a signal to the parent you should issue a command such as:
<BLOCKQUOTE><PRE>
    kill -TERM `cat /usr/local/apache/logs/httpd.pid`
</PRE></BLOCKQUOTE>
d39 3
a41 3
<BLOCKQUOTE><PRE>
    tail -f /usr/local/apache/logs/error_log
</PRE></BLOCKQUOTE>
d44 2
a45 2
<A HREF="mod/core.html#serverroot">ServerRoot</A> and
<A HREF="mod/core.html#pidfile">PidFile</A> settings.
d47 1
a47 4
<P>As of Apache 1.3 we provide a script <CODE>src/support/apachectl</CODE>
which can be used to start, stop, and restart Apache.  It may need a
little customization for your system, see the comments at the top of
the script.
d49 1
a49 3
<H3>TERM Signal: stop now</H3>

<P>Sending the <CODE>TERM</CODE> signal to the parent causes it to
d55 1
a55 1
<H3>HUP Signal: restart now</H3>
d57 2
a58 2
<P>Sending the <CODE>HUP</CODE> signal to the parent causes it to kill off
its children like in <CODE>TERM</CODE> but the parent doesn't exit.  It
d63 2
a64 2
<P>Users of the
<A HREF="mod/mod_status.html">status module</A>
d66 1
a66 1
set to zero when a <CODE>HUP</CODE> is sent.
d68 1
a68 2
<P><STRONG>Note:</STRONG> If your configuration file has errors in it when
you issue a
d72 1
a72 1
<H3>USR1 Signal: graceful restart</H3>
d74 2
a75 2
<P><STRONG>Note:</STRONG> prior to release 1.2b9 this code is quite unstable
and shouldn't be used at all.
d77 1
a77 1
<P>The <CODE>USR1</CODE> signal causes the parent process to <EM>advise</EM>
d81 1
a81 1
replaces it with a child from the new <EM>generation</EM> of the
d84 5
a88 5
<P>This code is designed to always respect the
<A HREF="mod/core.html#maxclients">MaxClients</A>,
<A HREF="mod/core.html#minspareservers">MinSpareServers</A>,
and <A HREF="mod/core.html#maxspareservers">MaxSpareServers</A> settings.
Furthermore, it respects <A HREF="mod/core.html#startservers">StartServers</A>
d95 2
a96 2
<P>Users of the
<A HREF="mod/mod_status.html">status module</A>
d98 1
a98 2
are <STRONG>not</STRONG> set to zero when a <CODE>USR1</CODE> is sent.  The
code
d102 1
a102 1
to do this it has to keep the <EM>scoreboard</EM> used to keep track
d105 1
a105 1
<P>The status module will also use a <CODE>G</CODE> to indicate those
d109 2
a110 2
<P>At present there is no way for a log rotation script using
<CODE>USR1</CODE> to know for certain that all children writing the
d112 1
a112 1
after sending the <CODE>USR1</CODE> signal before you do anything with the
d117 1
a117 2
<P><STRONG>Note:</STRONG> If your configuration file has errors in it when
you issue a
d131 1
a131 1
<H3>Appendix: signals and race conditions</H3>
d133 1
a133 1
<P>Prior to Apache 1.2b9 there were several <EM>race conditions</EM>
d141 2
a142 2
<P>Architectures that use an on disk
<A HREF="mod/core.html#scoreboardfile">ScoreBoardFile</A>
d144 2
a145 2
the "bind: Address already in use" (after <CODE>HUP</CODE>) or
"long lost child came home!" (after <CODE>USR1</CODE>).  The former is
d153 1
a153 1
<P><CODE>NEXT</CODE> and <CODE>MACHTEN</CODE> (68k only) have small race
d159 1
a159 1
<P>All architectures have a small race condition in each child involving
d171 3
a173 3
 <H3 ALIGN="CENTER">
  Apache HTTP Server Version 1.3
 </H3>
@

