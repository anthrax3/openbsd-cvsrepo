head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.38
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.34
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.32
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2005.07.29.23.55.39;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.20.00.16.21;	author henning;	state dead;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.21;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	99.09.29.06.28.57;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.01.05.04;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.30;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.30;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.55;	author beck;	state Exp;
branches;
next	;


desc
@@


1.7
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache's Handler Use</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">Apache's Handler Use</h1>

    <ul>
      <li><a href="#definition">What is a Handler</a></li>

      <li><a href="#examples">Examples</a></li>

      <li><a href="#programmer">Programmer's Note</a></li>
    </ul>
    <hr />

    <h2><a id="definition" name="definition">What is a
    Handler</a></h2>

    <table border="1">
      <tr>
        <td valign="top"><strong>Related Modules</strong><br />
         <br />
         <a href="mod/mod_actions.html">mod_actions</a><br />
         <a href="mod/mod_asis.html">mod_asis</a><br />
         <a href="mod/mod_cgi.html">mod_cgi</a><br />
         <a href="mod/mod_imap.html">mod_imap</a><br />
         <a href="mod/mod_info.html">mod_info</a><br />
         <a href="mod/mod_include.html">mod_include</a><br />
         <a href="mod/mod_mime.html">mod_mime</a><br />
         <a
        href="mod/mod_negotiation.html">mod_negotiation</a><br />
         <a href="mod/mod_status.html">mod_status</a><br />
         </td>

        <td valign="top"><strong>Related Directives</strong><br />
         <br />
         <a href="mod/mod_actions.html#action">Action</a><br />
         <a
        href="mod/mod_mime.html#addhandler">AddHandler</a><br />
         <a
        href="mod/mod_mime.html#removehandler">RemoveHandler</a><br />
         <a
        href="mod/mod_mime.html#sethandler">SetHandler</a><br />
         </td>
      </tr>
    </table>

    <p>A "handler" is an internal Apache representation of the
    action to be performed when a file is called. Generally, files
    have implicit handlers, based on the file type. Normally, all
    files are simply served by the server, but certain file types
    are "handled" separately.</p>

    <p>Apache 1.1 adds the ability to use handlers explicitly.
    Based on either filename extensions or on location, handlers
    can be specified without relation to file type. This is
    advantageous both because it is a more elegant solution, and
    because it also allows for both a type <strong>and</strong> a
    handler to be associated with a file. (See also <a
    href="mod/mod_mime.html#multipleext">Files with Multiple
    Extensions</a>.)</p>

    <p>Handlers can either be built into the server or included in
    a module, or they can be added with the <a
    href="mod/mod_actions.html#action">Action</a> directive. The
    built-in handlers in the standard distribution are as
    follows:</p>

    <ul>
      <li><strong>default-handler</strong>: Send the file using the
      <code>default_handler()</code>, which is the handler used by
      default to handle static content. (core)</li>

      <li><strong>send-as-is</strong>: Send file with HTTP headers
      as is. (<a href="mod/mod_asis.html">mod_asis</a>)</li>

      <li><strong>cgi-script</strong>: Treat the file as a CGI
      script. (<a href="mod/mod_cgi.html">mod_cgi</a>)</li>

      <li><strong>imap-file</strong>: Parse as an imagemap rule
      file. (<a href="mod/mod_imap.html">mod_imap</a>)</li>

      <li><strong>server-info</strong>: Get the server's
      configuration information. (<a
      href="mod/mod_info.html">mod_info</a>)</li>

      <li><strong>server-parsed</strong>: Parse for server-side
      includes. (<a
      href="mod/mod_include.html">mod_include</a>)</li>

      <li><strong>server-status</strong>: Get the server's status
      report. (<a href="mod/mod_status.html">mod_status</a>)</li>

      <li><strong>type-map</strong>: Parse as a type map file for
      content negotiation. (<a
      href="mod/mod_negotiation.html">mod_negotiation</a>)</li>
    </ul>
    <hr />

    <h2><a id="examples" name="examples">Examples</a></h2>

    <h3>Modifying static content using a CGI script</h3>

    <p>The following directives will cause requests for files with
    the <code>html</code> extension to trigger the launch of the
    <code>footer.pl</code> CGI script.</p>
<pre>
     Action add-footer /cgi-bin/footer.pl
     AddHandler add-footer .html
</pre>

    <p>Then the CGI script is responsible for sending the
    originally requested document (pointed to by the
    <code>PATH_TRANSLATED</code> environment variable) and making
    whatever modifications or additions are desired.</p>

    <h3>Files with HTTP headers</h3>

    <p>The following directives will enable the
    <code>send-as-is</code> handler, which is used for files which
    contain their own HTTP headers. All files in the
    <code>/web/htdocs/asis/</code> directory will be processed by
    the <code>send-as-is</code> handler, regardless of their
    filename extensions.</p>
<pre>
    &lt;Directory /web/htdocs/asis&gt;
    SetHandler send-as-is
    &lt;/Directory&gt;
</pre>
    <hr />

    <h2><a id="programmer" name="programmer">Programmer's
    Note</a></h2>

    <p>In order to implement the handler features, an addition has
    been made to the <a href="misc/API.html">Apache API</a> that
    you may wish to make use of. Specifically, a new record has
    been added to the <code>request_rec</code> structure:</p>
<pre>
    char *handler
</pre>

    <p>If you wish to have your module engage a handler, you need
    only to set <code>r-&gt;handler</code> to the name of the
    handler at any time prior to the <code>invoke_handler</code>
    stage of the request. Handlers are implemented as they were
    before, albeit using the handler name instead of a content
    type. While it is not necessary, the naming convention for
    handlers is to use a dash-separated word, with no slashes, so
    as to not invade the media type name-space.</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>



@


1.6
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.5
log
@remove pre-apache-1.3.26 cruft

Note for upgraders:
to actually see the current manual, you should do

find /var/www/htdocs/manual/ -type f -exec rm {} \;
cd /usr/src/usr.sbin/httpd/
make -f Makefile.bsd-wrapper distribution

you will also need a current httpd.conf, MultiViews need to be enabled in
/var/www/htdocs/manual/
@
text
@d1 158
a158 186
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache's Handler Use</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server
 </H3>
</DIV>

<H1 ALIGN="CENTER">Apache's Handler Use</H1>

<H2>What is a Handler</H2>

<P>A "handler" is an internal Apache representation of the action to be
performed when a file is called. Generally, files have implicit
handlers, based on the file type. Normally, all files are simply
served by the server, but certain file typed are "handled"
separately. For example, you may use a type of
"application/x-httpd-cgi" to invoke CGI scripts.</P>

<P>Apache 1.1 adds the additional ability to use handlers
explicitly. Either based on filename extensions or on location, these
handlers are unrelated to file type. This is advantageous both because
it is a more elegant solution, but it also allows for both a type
<STRONG>and</STRONG> a handler to be associated with a file (See also
<A HREF="mod/mod_mime.html#multipleext">Files with Multiple Extensions</A>)

</P>

<P>Handlers can either be built into the server or to a module, or
they can be added with the <A
HREF="mod/mod_actions.html#action">Action</A> directive. The built-in
handlers in the standard distribution are as follows:</P>

<UL>
<LI><STRONG>default-handler</STRONG>:
    Send the file using the <CODE>default_handler()</CODE>, which is the 
    handler used by default to handle static content.
    (core)
<LI><STRONG>send-as-is</STRONG>:
    Send file with HTTP headers as is.
    (<A HREF="mod/mod_asis.html">mod_asis</A>)
<LI><STRONG>cgi-script</STRONG>:
    Treat the file as a CGI script.
    (<A HREF="mod/mod_cgi.html">mod_cgi</A>)
<LI><STRONG>imap-file</STRONG>:
    Imagemap rule file.
    (<A HREF="mod/mod_imap.html">mod_imap</A>)
<LI><STRONG>server-info</STRONG>:
    Get the server's configuration information
    (<A HREF="mod/mod_info.html">mod_info</A>)
<LI><STRONG>server-parsed</STRONG>:
    Parse for server-side includes
    (<A HREF="mod/mod_include.html">mod_include</A>)
<LI><STRONG>server-status</STRONG>:
    Get the server's status report
    (<A HREF="mod/mod_status.html">mod_status</A>)
<LI><STRONG>type-map</STRONG>:
    Parse as a type map file for content negotiation
    (<A HREF="mod/mod_negotiation.html">mod_negotiation</A>)
</UL>

<P>

<H2>Directives</H2>
<UL>
<LI><A HREF="#addhandler">AddHandler</A>
<LI><A HREF="#sethandler">SetHandler</A>
</UL>

<HR>

<H2><A NAME="addhandler">AddHandler</A></H2>

<A
 HREF="mod/directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> AddHandler <EM>handler-name extension extension...</EM><BR>
<A
 HREF="mod/directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host, directory, .htaccess<BR>
<A
 HREF="mod/directive-dict.html#Override"
 REL="Help"
><STRONG>Override:</STRONG></A> FileInfo<BR>
<A
 HREF="mod/directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="mod/directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_mime<BR>
<A
 HREF="mod/directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> AddHandler is only available in Apache
1.1 and later<P>

<P>AddHandler maps the filename extensions <EM>extension</EM> to the
handler <EM>handler-name</EM>.  This mapping is added to any already
in force, overriding any mappings that already exist for the same
<EM>extension</EM>.

For example, to activate CGI scripts
with the file extension "<CODE>.cgi</CODE>", you might use:
<PRE>
    AddHandler cgi-script cgi
</PRE>

<P>Once that has been put into your srm.conf or httpd.conf file, any
file containing the "<CODE>.cgi</CODE>" extension will be treated as a
CGI program.</P> 

<P>

<STRONG>See also</STRONG>: <A HREF="mod/mod_mime.html#multipleext">Files with
multiple extensions</A>

<HR>

<H2><A NAME="sethandler">SetHandler</A></H2>

<A
 HREF="mod/directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> SetHandler <EM>handler-name</EM><BR>
<A
 HREF="mod/directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="mod/directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="mod/directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_mime<BR>
<A
 HREF="mod/directive-dict.html#Compatibility"
 REL="Help"
><STRONG>Compatibility:</STRONG></A> SetHandler is only available in Apache
1.1 and later.<P>

<P>When placed into an <CODE>.htaccess</CODE> file or a
<CODE>&lt;Directory&gt;</CODE> or <CODE>&lt;Location&gt;</CODE>
section, this directive forces all matching files to be parsed through
the handler given by <EM>handler-name</EM>. For example, if you had a
directory you wanted to be parsed entirely as imagemap rule files,
regardless of extension, you might put the following into an
<CODE>.htaccess</CODE> file in that directory: 
<PRE>
    SetHandler imap-file
</PRE>

<P>Another example: if you wanted to have the server display a status
report whenever a URL of <CODE>http://servername/status</CODE> was
called, you might put the following into access.conf:
<PRE>
    &lt;Location /status&gt;
    SetHandler server-status
    &lt;/Location&gt;
</PRE>
<HR>

<H2>Programmer's Note</H2>

<P>In order to implement the handler features, an addition has been
made to the <A HREF="misc/API.html">Apache API</A> that you may wish to
make use of. Specifically, a new record has been added to the
<CODE>request_rec</CODE> structure:</P>
<PRE>
d160 17
a176 14
</PRE>
<P>If you wish to have your module engage a handler, you need only to
set <CODE>r-&gt;handler</CODE> to the name of the handler at any time
prior to the <CODE>invoke_handler</CODE> stage of the
request. Handlers are implemented as they were before, albeit using
the handler name instead of a content type. While it is not
necessary, the naming convention for handlers is to use a
dash-separated word, with no slashes, so as to not invade the media
type name-space.</P>

<HR>
 <H3 ALIGN="CENTER">
  Apache HTTP Server
 </H3>
a177 1
<A HREF="./"><IMG SRC="images/index.gif" ALT="Index"></A>
a178 2
</BODY>
</HTML>
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@@


1.3
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d200 1
a200 1
  Apache HTTP Server Version 1.3
@


1.2
log
@Apache 1.3.4 merge
@
text
@d38 1
a38 1
<A HREF="mod/mod_mime#multipleext">Files with Multiple Extensions</A>)
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d22 1
a22 1
<h1 ALIGN="CENTER">Apache's Handler Use</h1>
d24 1
a24 1
<h2>What is a Handler</h2>
d26 1
a26 1
<p>A "handler" is an internal Apache representation of the action to be
d31 1
a31 1
"application/x-httpd-cgi" to invoke CGI scripts.</p>
d33 1
a33 1
<p>Apache 1.1 adds the additional ability to use handlers
d37 2
a38 1
<strong>and</strong> a handler to be associated with a file.</p>
d40 1
a40 4
<p>Handlers can either be built into the server or to a module, or
they can be added with the <a
href="mod/mod_actions.html#action">Action</a> directive. The built-in
handlers in the standard distribution are as follows:</p>
d42 11
a52 2
<ul>
<li><strong>send-as-is</strong>:
d54 2
a55 2
    (<a href="mod/mod_asis.html">mod_asis</a>)
<li><strong>cgi-script</strong>:
d57 2
a58 2
    (<a href="mod/mod_cgi.html">mod_cgi</a>)
<li><strong>imap-file</strong>:
d60 2
a61 2
    (<a href="mod/mod_imap.html">mod_imap</a>)
<li><strong>server-info</strong>:
d63 2
a64 2
    (<a href="mod/mod_info.html">mod_info</a>)
<li><strong>server-parsed</strong>:
d66 2
a67 2
    (<a href="mod/mod_include.html">mod_include</a>)
<li><strong>server-status</strong>:
d69 2
a70 2
    (<a href="mod/mod_status.html">mod_status</a>)
<li><strong>type-map</strong>:
d72 2
a73 2
    (<a href="mod/mod_negotiation.html">mod_negotiation</a>)
</ul>
d75 1
a75 1
<p>
d77 44
a120 19
<h2>Directives</h2>
<ul>
<li><A HREF="#addhandler">AddHandler</A>
<li><A HREF="#sethandler">SetHandler</A>
</ul>

<hr>

<h2><a name="addhandler">AddHandler</a></h2>

<strong>Syntax:</strong> &lt;AddHandler <em>handler-name extension</em>&gt;<br>
<strong>Context:</strong> server config, virtual host, directory, .htaccess<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_mime

<p>AddHandler maps the filename extension <em>extension</em> to the
handler <em>handler-name</em>. For example, to activate CGI scripts
with the file extension "<code>.cgi</code>", you might use:
<pre>
d122 5
a126 1
</pre>
d128 1
a128 3
<p>Once that has been put into your srm.conf or httpd.conf file, any
file ending with "<code>.cgi</code>" will be treated as a CGI
program.</p>
d130 2
a131 1
<hr>
d133 1
a133 1
<h2><a name="sethandler">SetHandler</a></h2>
d135 1
a135 4
<strong>Syntax:</strong> &lt;SetHandler <em>handler-name</em>&gt;<br>
<strong>Context:</strong> directory, .htaccess<br>
<strong>Status:</strong> Base<br>
<strong>Module:</strong> mod_mime
d137 26
a162 4
<p>When placed into an <code>.htaccess</code> file or a
<code>&lt;Directory&gt;</code> or <code>&lt;Location&gt;</code> section,
this directive forces all matching files to be parsed through the
handler given by <em>handler-name</em>. For example, if you had a
d165 2
a166 2
<code>.htaccess</code> file in that directory:
<pre>
d168 4
a171 3
</pre>
<p>Another example: if you wanted to have the server display a status
report whenever a URL of <code>http://servername/status</code> was
d173 1
a173 1
<pre>
d177 2
a178 1
</pre>
d180 1
a180 1
<p><hr>
d182 2
a183 4
<h2>Programmer's Note</h2>

<p>In order to implement the handler features, an addition has been
made to the <a href="misc/API.html">Apache API</a> that you may wish to
d185 2
a186 2
<code>request_rec</code> structure:</p>
<pre>
d188 4
a191 4
</pre>
<p>If you wish to have your module engage a handler, you need only to
set <code>r-&gt;handler</code> to the name of the handler at any time
prior to the <code>invoke_handler</code> stage of the
d196 1
a196 1
type name-space.</p>
d199 3
a201 3
<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.2
</H3>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Apache's Handler Use</H1>
d24 1
a24 1
<H2>What is a Handler</H2>
d26 1
a26 1
<P>A "handler" is an internal Apache representation of the action to be
d31 1
a31 1
"application/x-httpd-cgi" to invoke CGI scripts.</P>
d33 1
a33 1
<P>Apache 1.1 adds the additional ability to use handlers
d37 1
a37 1
<STRONG>and</STRONG> a handler to be associated with a file.</P>
d39 4
a42 4
<P>Handlers can either be built into the server or to a module, or
they can be added with the <A
HREF="mod/mod_actions.html#action">Action</A> directive. The built-in
handlers in the standard distribution are as follows:</P>
d44 2
a45 2
<UL>
<LI><STRONG>send-as-is</STRONG>:
d47 2
a48 2
    (<A HREF="mod/mod_asis.html">mod_asis</A>)
<LI><STRONG>cgi-script</STRONG>:
d50 2
a51 2
    (<A HREF="mod/mod_cgi.html">mod_cgi</A>)
<LI><STRONG>imap-file</STRONG>:
d53 2
a54 2
    (<A HREF="mod/mod_imap.html">mod_imap</A>)
<LI><STRONG>server-info</STRONG>:
d56 2
a57 2
    (<A HREF="mod/mod_info.html">mod_info</A>)
<LI><STRONG>server-parsed</STRONG>:
d59 2
a60 2
    (<A HREF="mod/mod_include.html">mod_include</A>)
<LI><STRONG>server-status</STRONG>:
d62 2
a63 2
    (<A HREF="mod/mod_status.html">mod_status</A>)
<LI><STRONG>type-map</STRONG>:
d65 2
a66 2
    (<A HREF="mod/mod_negotiation.html">mod_negotiation</A>)
</UL>
d68 1
a68 1
<P>
d70 19
a88 33
<H2>Directives</H2>
<UL>
<LI><A HREF="#addhandler">AddHandler</A>
<LI><A HREF="#sethandler">SetHandler</A>
</UL>

<HR>

<H2><A NAME="addhandler">AddHandler</A></H2>

<A
 HREF="mod/directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> &lt;AddHandler <EM>handler-name
 extension</EM>&gt;<BR>
<A
 HREF="mod/directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> server config, virtual host, directory,
 .htaccess<BR>
<A
 HREF="mod/directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="mod/directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_mime

<P>AddHandler maps the filename extension <EM>extension</EM> to the
handler <EM>handler-name</EM>. For example, to activate CGI scripts
with the file extension "<CODE>.cgi</CODE>", you might use:
<PRE>
d90 1
a90 1
</PRE>
d92 3
a94 3
<P>Once that has been put into your srm.conf or httpd.conf file, any
file ending with "<CODE>.cgi</CODE>" will be treated as a CGI
program.</P>
d96 1
a96 1
<HR>
d98 1
a98 1
<H2><A NAME="sethandler">SetHandler</A></H2>
d100 4
a103 16
<A
 HREF="mod/directive-dict.html#Syntax"
 REL="Help"
><STRONG>Syntax:</STRONG></A> &lt;SetHandler <EM>handler-name</EM>&gt;<BR>
<A
 HREF="mod/directive-dict.html#Context"
 REL="Help"
><STRONG>Context:</STRONG></A> directory, .htaccess<BR>
<A
 HREF="mod/directive-dict.html#Status"
 REL="Help"
><STRONG>Status:</STRONG></A> Base<BR>
<A
 HREF="mod/directive-dict.html#Module"
 REL="Help"
><STRONG>Module:</STRONG></A> mod_mime
d105 2
a106 2
<P>When placed into an <CODE>.htaccess</CODE> file or a
<CODE>&lt;Directory&gt;</CODE> or <CODE>&lt;Location&gt;</CODE> section,
d108 1
a108 1
handler given by <EM>handler-name</EM>. For example, if you had a
d111 2
a112 2
<CODE>.htaccess</CODE> file in that directory:
<PRE>
d114 3
a116 3
</PRE>
<P>Another example: if you wanted to have the server display a status
report whenever a URL of <CODE>http://servername/status</CODE> was
d118 1
a118 1
<PRE>
d122 1
a122 1
</PRE>
d124 1
a124 1
<P><HR>
d126 1
a126 1
<H2>Programmer's Note</H2>
d128 2
a129 2
<P>In order to implement the handler features, an addition has been
made to the <A HREF="misc/API.html">Apache API</A> that you may wish to
d131 2
a132 2
<CODE>request_rec</CODE> structure:</P>
<PRE>
d134 4
a137 4
</PRE>
<P>If you wish to have your module engage a handler, you need only to
set <CODE>r-&gt;handler</CODE> to the name of the handler at any time
prior to the <CODE>invoke_handler</CODE> stage of the
d142 1
a142 1
type name-space.</P>
d145 3
a147 3
 <H3 ALIGN="CENTER">
  Apache HTTP Server Version 1.3
 </H3>
@

