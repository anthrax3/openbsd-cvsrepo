head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.38
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.34
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.32
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.30
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.28
	OPENBSD_5_0:1.6.0.26
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.24
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.22
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.18
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.20
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.16
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.14
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.1.2.0.10
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.8
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2005.07.29.23.55.39;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.20.00.16.21;	author henning;	state dead;
branches;
next	1.4;

1.4
date	2002.07.19.21.31.14;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.22.17.24;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.31;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.31;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.19.58;	author beck;	state Exp;
branches;
next	;


desc
@@


1.7
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Server Pool Management</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">Server Pool Management</h1>
    <hr />

    <p>We found that many people were using values for "MaxServers"
    either too high or too low, and were hanging themselves on it.
    The model we adopted is still based on long-lived
    minimal-forking processes, but instead of specifying one number
    of persistent processes, the web-master specifies a maximum and
    minimum number of processes to be "spare" - every couple of
    seconds the parent checks the actual number of spare servers
    and adjusts accordingly. This should keep the number of servers
    concurrently running relatively low while still ensuring
    minimal forking.</p>

    <p>We renamed the current StartServers to MinSpareServers,
    created separate StartServers parameter which means what it
    says, and renamed MaxServers to MaxSpareServers (though the old
    name still works, for NCSA 1.4 back-compatibility). The old
    names were generally regarded as too confusing.</p>

    <p>The defaults for each variable are:</p>
<pre>
MinSpareServers         5
MaxSpareServers         10
StartServers            5
</pre>
    There is an absolute maximum number of simultaneous children
    defined by a compile-time limit which defaults to 256 and a
    "MaxClients" directive which specifies the number of
    simultaneous children that will be allowed. MaxClients can be
    adjusted up to the compile-time limit (HARD_SERVER_LIMIT,
    defined in httpd.h). If you need more than 256 simultaneous
    children, you need to modify both HARD_SERVER_LIMIT and
    MaxClients. 

    <p>In versions before 1.2, HARD_SERVER_LIMIT defaulted to
    150.</p>

    <p>We do not recommend changing either of these values
    unless:</p>

    <ol>
      <li>You know you have the server resources to handle
      more</li>

      <li>You use the machine for other purposes and must limit the
      amount of memory Apache uses</li>
    </ol>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>



@


1.6
log
@from tamas tevesz:
==> de-multiviewification complete.

(rename *.html.html -> *.html)
@
text
@@


1.5
log
@remove pre-apache-1.3.26 cruft

Note for upgraders:
to actually see the current manual, you should do

find /var/www/htdocs/manual/ -type f -exec rm {} \;
cd /usr/src/usr.sbin/httpd/
make -f Makefile.bsd-wrapper distribution

you will also need a current httpd.conf, MultiViews need to be enabled in
/var/www/htdocs/manual/
@
text
@d1 81
@


1.4
log
@merge
@
text
@@


1.3
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@a0 77
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Server Pool Management</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server</h3>
    </div>



    <h1 align="CENTER">Server Pool Management</h1>
    <hr />

    <p>We found that many people were using values for "MaxServers"
    either too high or too low, and were hanging themselves on it.
    The model we adopted is still based on long-lived
    minimal-forking processes, but instead of specifying one number
    of persistent processes, the web-master specifies a maximum and
    minimum number of processes to be "spare" - every couple of
    seconds the parent checks the actual number of spare servers
    and adjusts accordingly. This should keep the number of servers
    concurrently running relatively low while still ensuring
    minimal forking.</p>

    <p>We renamed the current StartServers to MinSpareServers,
    created separate StartServers parameter which means what it
    says, and renamed MaxServers to MaxSpareServers (though the old
    name still works, for NCSA 1.4 back-compatibility). The old
    names were generally regarded as too confusing.</p>

    <p>The defaults for each variable are:</p>
<pre>
MinSpareServers         5
MaxSpareServers         10
StartServers            5
</pre>
    There is an absolute maximum number of simultaneous children
    defined by a compile-time limit which defaults to 256 and a
    "MaxClients" directive which specifies the number of
    simultaneous children that will be allowed. MaxClients can be
    adjusted up to the compile-time limit (HARD_SERVER_LIMIT,
    defined in httpd.h). If you need more than 256 simultaneous
    children, you need to modify both HARD_SERVER_LIMIT and
    MaxClients. 

    <p>In versions before 1.2, HARD_SERVER_LIMIT defaulted to
    150.</p>

    <p>We do not recommend changing either of these values
    unless:</p>

    <ol>
      <li>You know you have the server resources to handle
      more</li>

      <li>You use the machine for other purposes and must limit the
      amount of memory Apache uses</li>
    </ol>
        <hr />

    <h3 align="CENTER">Apache HTTP Server</h3>
    <a href="./"><img src="images/index.gif" alt="Index" /></a>

  </body>
</html>

@


1.2
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d1 2
a2 41
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML><HEAD>
<TITLE>Server Pool Management</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server
 </H3>
</DIV>

<H1 ALIGN="CENTER">Server Pool Management</H1>

<HR>
<P>
We found that many people were using values for "MaxServers" either
too high or too low, and were hanging themselves on it.  The model we
adopted is still based on long-lived minimal-forking processes, but
instead of specifying one number of persistent processes, the
web-master specifies a maximum and minimum number of processes to be
"spare" - every couple of seconds the parent checks the actual number
of spare servers and adjusts accordingly.  This should keep the number
of servers concurrently running relatively low while still ensuring
minimal forking.

<P>

We renamed the current StartServers to MinSpareServers, created
separate StartServers parameter which means what it says, and renamed
MaxServers to MaxSpareServers (though the old name still works, for
NCSA 1.4 back-compatibility).  The old names were generally regarded
as too confusing.
d4 15
a18 1
<P>
a19 1
The defaults for each variable are:
d21 23
a43 1
<PRE>
d47 24
a70 26
</PRE>

There is an absolute maximum number of simultaneous children defined
by a compile-time limit which defaults to 256 and a "MaxClients"
directive which specifies the number of simultaneous children that
will be allowed.  MaxClients can be adjusted up to the compile-time
limit (HARD_SERVER_LIMIT, defined in httpd.h).  If you need more
than 256 simultaneous children, you need to modify both HARD_SERVER_LIMIT
and MaxClients.<P>

In versions before 1.2, HARD_SERVER_LIMIT defaulted to 150.<P>

We do not recommend changing either of these values unless:

<OL>
<LI>You know you have the server resources to handle more
<LI>You use the machine for other purposes and must limit the amount of memory
Apache uses
</OL>

<HR>
 <H3 ALIGN="CENTER">
  Apache HTTP Server
 </H3>

<A HREF="./"><IMG SRC="images/index.gif" ALT="Index"></A>
d72 2
a73 1
</BODY></HTML>
d75 2
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
  Apache HTTP Server Version 1.2
d33 1
a33 1
minimal forking.  
d72 3
a74 3
<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.2
</H3>
d78 1
a78 1
</body></html>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d17 1
a17 1
  Apache HTTP Server Version 1.3
d33 1
a33 1
minimal forking.
d72 3
a74 3
 <H3 ALIGN="CENTER">
  Apache HTTP Server Version 1.3
 </H3>
d78 1
a78 1
</BODY></HTML>
@

