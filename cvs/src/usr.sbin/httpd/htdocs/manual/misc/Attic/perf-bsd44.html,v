head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.26
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.24
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.1.1.2.0.10
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.8
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2008.06.18.05.42.29;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.29.10.21.30;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.22.17.29;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.16;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.08;	author henning;	state Exp;
branches;
next	;


desc
@@


1.6
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Running a High-Performance Web Server for BSD</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
    <a id="initial" name="initial">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>

    </a> 

    <h1 align="CENTER">Running a High-Performance Web Server for
    BSD</h1>

    <p>This document assumes that you have read the appropriate
    overview documentation for
    <a href="http://www.FreeBSD.org/docs.html">FreeBSD</a>,
    <a href="http://www.NetBSD.org/Documentation/">NetBSD</a>, or
    <a href="http://www.OpenBSD.org/docum.html">OpenBSD</a>.
    In addition, the FreeBSD
    <a href="http://www.FreeBSD.org/cgi/man.cgi?query=tuning">tuning</a>
    manual page contains lots of wisdom, especially regarding sysctl
    options.</p>

    <p>Like other OS's, the listen queue is often the <strong>first
    limit hit</strong>. The following are comments from "Aaron
    Gifford &lt;agifford@@InfoWest.COM&gt;" on how to fix this on
    BSDI 1.x, 2.x, and FreeBSD 2.0 (and earlier):</p>

    <p>Edit the following two files:</p>

    <blockquote>
      <code>/usr/include/sys/socket.h<br />
       /usr/src/sys/sys/socket.h</code>
    </blockquote>
    In each file, look for the following: 
<pre>
    /*
     * Maximum queue length specifiable by listen.
     */
    #define SOMAXCONN       5
</pre>
    Just change the "5" to whatever appears to work. I bumped the
    two machines I was having problems with up to 32 and haven't
    noticed the problem since. 

    <p>After the edit, recompile the kernel and recompile the
    Apache server then reboot.</p>

    <p>FreeBSD 2.1 seems to be perfectly happy, with SOMAXCONN set
    to 32 already.</p>

    <p><a id="detail" name="detail"><strong>Addendum for
    <em>very</em> heavily loaded BSD servers</strong><br />
    </a> from Chuck Murcko &lt;chuck@@telebase.com&gt;</p>

    <p>If you're running a really busy BSD Apache server, the
    following are useful things to do if the system is acting
    sluggish:</p>

    <ul>
      <li>Run vmstat to check memory usage, page/swap rates,
      <em>etc.</em></li>

      <li>Run netstat -m to check mbuf usage</li>

      <li>Run fstat to check file descriptor usage</li>
    </ul>
    These utilities give you an idea what you'll need to tune in
    your kernel, and whether it'll help to buy more RAM. Here are
    some BSD kernel config parameters (actually BSDI, but pertinent
    to FreeBSD and other 4.4-lite derivatives) from a system
    getting heavy usage. The tools mentioned above were used, and
    the system memory was increased to 48 MB before these tuneups.
    Other system parameters remained unchanged. 
<pre>
maxusers        256
</pre>
    Maxusers drives a <em>lot</em> of other kernel parameters: 

    <ul>
      <li>Maximum # of processes</li>

      <li>Maximum # of processes per user</li>

      <li>System wide open files limit</li>

      <li>Per-process open files limit</li>

      <li>Maximum # of mbuf clusters</li>

      <li>Proc/pgrp hash table size</li>
    </ul>
    The actual formulae for these derived parameters are in
    <em>/usr/src/sys/conf/param.c</em>. These calculated parameters
    can also be overridden (in part) by specifying your own values
    in the kernel configuration file: 
<pre>
# Network options. NMBCLUSTERS defines the number of mbuf clusters and
# defaults to 256. This machine is a server that handles lots of traffic,
# so we crank that value.
options         NMBCLUSTERS=4096        # mbuf clusters at 4096

#
# Misc. options
#
options         CHILD_MAX=512           # maximum number of child processes
options         OPEN_MAX=512            # maximum fds (breaks RPC svcs)
</pre>

    <p>In many cases, NMBCLUSTERS must be set much larger than
    would appear necessary at first glance. The reason for this is
    that if the browser disconnects in mid-transfer, the socket fd
    associated with that particular connection ends up in the
    TIME_WAIT state for several minutes, during which time its
    mbufs are not yet freed. Another reason is that, on server
    timeouts, some connections end up in FIN_WAIT_2 state forever,
    because this state doesn't time out on the server, and the
    browser never sent a final FIN. For more details see the <a
    href="fin_wait_2.html">FIN_WAIT_2</a> page.</p>

    <p>Some more info on mbuf clusters (from sys/mbuf.h):</p>
<pre>
/*
 * Mbufs are of a single size, MSIZE (machine/machparam.h), which
 * includes overhead.  An mbuf may add a single "mbuf cluster" of size
 * MCLBYTES (also in machine/machparam.h), which has no additional overhead
 * and is used instead of the internal data area; this is done when
 * at least MINCLSIZE of data must be stored.
 */
</pre>

    <p>CHILD_MAX and OPEN_MAX are set to allow up to 512 child
    processes (different than the maximum value for processes per
    user ID) and file descriptors. These values may change for your
    particular configuration (a higher OPEN_MAX value if you've got
    modules or CGI scripts opening lots of connections or files).
    If you've got a lot of other activity besides httpd on the same
    machine, you'll have to set NPROC higher still. In this
    example, the NPROC value derived from maxusers proved
    sufficient for our load.</p>

    <p>To increase the size of the <code>listen()</code> queue, you
    need to adjust the value of SOMAXCONN. SOMAXCONN is not derived
    from maxusers, so you'll always need to increase that yourself.
    We use a value guaranteed to be larger than Apache's default
    for the listen() of 128, currently. The actual value for
    SOMAXCONN is set in <code>sys/socket.h</code>. The best way to
    adjust this parameter is run-time, rather than changing it in
    this header file and thus hardcoding a value in the kernel and
    elsewhere. To do this, edit <code>/etc/rc.local</code> and add
    the following line:</p>
<pre>
    /usr/sbin/sysctl -w kern.somaxconn=256
</pre>

    <p>We used <code>256</code> but you can tune it for your own
    setup. In many cases, however, even the default value of
    <code>128</code> (for later versions of FreeBSD) is OK.</p>

    <p><strong>Caveats</strong></p>

    <p>Be aware that your system may not boot with a kernel that is
    configured to use more resources than you have available system
    RAM. <strong>ALWAYS</strong> have a known bootable kernel
    available when tuning your system this way, and use the system
    tools beforehand to learn if you need to buy more memory before
    tuning.</p>

    <p>RPC services will fail when the value of OPEN_MAX is larger
    than 256. This is a function of the original implementations of
    the RPC library, which used a byte value for holding file
    descriptors. BSDI has partially addressed this limit in its 2.1
    release, but a real fix may well await the redesign of RPC
    itself.</p>

    <p>Finally, there's the hard limit of child processes
    configured in Apache.</p>

    <p>For versions of Apache later than 1.0.5 you'll need to
    change the definition for <strong>HARD_SERVER_LIMIT</strong> in
    <em>httpd.h</em> and recompile if you need to run more than the
    default 150 instances of httpd.</p>

    <p>From conf/httpd.conf:</p>
<pre>
# Limit on total number of servers running, <em>i.e.</em>, limit on the number
# of clients who can simultaneously connect --- if this limit is ever
# reached, clients will be LOCKED OUT, so it should NOT BE SET TOO LOW.
# It is intended mainly as a brake to keep a runaway server from taking
# Unix with it as it spirals down...

MaxClients 150
</pre>
    Know what you're doing if you bump this value up, and make sure
    you've done your system monitoring, RAM expansion, and kernel
    tuning beforehand. Then you're ready to service some serious
    hits! 

    <p>Thanks to <em>Tony Sanders</em> and <em>Chris Torek</em> at
    BSDI for their helpful suggestions and information.</p>

    <p>"M. Teterin" &lt;mi@@ALDAN.ziplink.net&gt; writes:</p>

    <blockquote>
      It really does help if your kernel and frequently used
      utilities are fully optimized. Rebuilding the FreeBSD kernel
      on an AMD-133 (486-class CPU) web-server with<br />
       <code>-m486 -fexpensive-optimizations -fomit-frame-pointer
      -O2</code><br />
       helped reduce the number of "unable" errors, because the CPU
      was often maxed out.
    </blockquote>

    <h2><a id="accf" name="accf">Accept filtering on
    FreeBSD</a></h2>

    <p>Versions of FreeBSD from August 2000 onwards include a
    feature called "accept filters" which delay the return from
    accept() until a condition has been met, e.g. an HTTP request
    has arrived. This postpones the requirement for a child process
    to handle the new connection which therefore increases the
    number of connections that a given number of child processes
    can handle. It also allows a child process to accomplish more
    immediately after accept() returns (because the request is
    already available to be read) so there is less context
    switching.</p>

    <p>Accept filters provide the most benefit on servers that are
    already so busy that they are configured with "<code>KeepAlive
    Off</code>". <a href="../keepalive.html">HTTP KeepAlive (aka
    persistent connections)</a> avoids the cost of setting up a new
    connection for every request, but connections that are being
    kept alive use up one of the available child processes. Since
    there is a limited number of child processes this can
    significantly reduce the capacity of the server. The viewers of
    a web site will still get a lot of the benefit of persistent
    connections even with a very small
    <code>KeepAliveTimeout</code> so you should try reducing it
    before turning it off altogether.</p>

    <p>To enable accept filtering, you must either load the
    appropriate accept filter module, e.g. with the command
    <code>kldload accf_http</code>, or compile a kernel with
    <code>options ACCEPT_FILTER_HTTP</code>. Apache will then
    enable filtering when it is restarted.</p>

    <p>Accept filters are compiled in if the symbol
    <code>SO_ACCEPTFILTER</code> is defined on the machine on which
    Apache is built. Additionally there is a directive <a
    href="../mod/core.html#acceptfilter">AcceptFilter</a> to switch
    the filters on or off. The default is on; except when apache is
    compiled with <code>-D AP_ACCEPTFILTER_ON</code>.</p>

    <p>See the manual page
    <a href="http://www.freebsd.org/cgi/man.cgi?query=accf_http">accf_http(9)</a>
    for more information.</p>

    <h3>More welcome!</h3>
    If you have tips to contribute, send mail to <a
    href="mailto:apache@@apache.org">apache@@apache.org</a> 
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>

@


1.5
log
@Remove references to httpd.conf-dist.

ok deraadt@@
@
text
@@


1.4
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d196 1
a196 1
    <p>From conf/httpd.conf-dist:</p>
@


1.3
log
@Apache 1.3.19+mod_ssl 2.8.1 merge - also adds shared build of mod_headers
and mod_expire
@
text
@d1 48
a48 37
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Running a High-Performance Web Server for BSD</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<A NAME="initial">
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

</A>
<H1 ALIGN="CENTER">Running a High-Performance Web Server for BSD</H1>

Like other OS's, the listen queue is often the <STRONG>first limit
hit</STRONG>.  The
following are comments from "Aaron Gifford &lt;agifford@@InfoWest.COM&gt;"
on how to fix this on BSDI 1.x, 2.x,  and FreeBSD 2.0 (and earlier):

<P>

Edit the following two files:
<BLOCKQUOTE><CODE>  /usr/include/sys/socket.h <BR>
  /usr/src/sys/sys/socket.h </CODE></BLOCKQUOTE>
In each file, look for the following:
<PRE>
d53 35
a87 49
</PRE>

Just change the "5" to whatever appears to work.  I bumped the two
machines I was having problems with up to 32 and haven't noticed the
problem since.

<P>

After the edit, recompile the kernel and recompile the Apache server
then reboot.

<P>

FreeBSD 2.1 seems to be perfectly happy, with SOMAXCONN
set to 32 already.

<P>

<A NAME="detail">
<STRONG>Addendum for <EM>very</EM> heavily loaded BSD servers</STRONG><BR>
</A>
from Chuck Murcko &lt;chuck@@telebase.com&gt;

<P>

If you're running a really busy BSD Apache server, the following are useful
things to do if the system is acting sluggish:<P>

<UL>

<LI> Run vmstat to check memory usage, page/swap rates, <EM>etc.</EM>

<LI> Run netstat -m to check mbuf usage

<LI> Run fstat to check file descriptor usage

</UL>

These utilities give you an idea what you'll need to tune in your kernel,
and whether it'll help to buy more RAM.

Here are some BSD kernel config parameters (actually BSDI, but pertinent to
FreeBSD and other 4.4-lite derivatives) from a system getting heavy usage.
The tools mentioned above were used, and the system memory was increased to
48 MB before these tuneups. Other system parameters remained unchanged.

<P>

<PRE>
d89 2
a90 7
</PRE>

Maxusers drives a <EM>lot</EM> of other kernel parameters:

<UL>

<LI> Maximum # of processes
d92 2
a93 1
<LI> Maximum # of processes per user
d95 1
a95 1
<LI> System wide open files limit
d97 1
a97 1
<LI> Per-process open files limit
d99 1
a99 1
<LI> Maximum # of mbuf clusters
d101 1
a101 1
<LI> Proc/pgrp hash table size
d103 7
a109 8
</UL>

The actual formulae for these derived parameters are in
<EM>/usr/src/sys/conf/param.c</EM>.
These calculated parameters can also be overridden (in part) by specifying
your own values in the kernel configuration file:

<PRE>
d120 1
a120 3
</PRE>

<P>
d122 10
a131 9
In many cases, NMBCLUSTERS must be set much larger than would appear
necessary at first glance. The reason for this is that if the browser
disconnects in mid-transfer, the socket fd associated with that particular
connection ends up in the TIME_WAIT state for several minutes, during
which time its mbufs are not yet freed. Another reason is that, on server
timeouts, some connections end up in FIN_WAIT_2 state forever, because
this state doesn't time out on the server, and the browser never sent
a final FIN.  For more details see the
<A HREF="fin_wait_2.html">FIN_WAIT_2</A> page.
d133 2
a134 4
<P>

Some more info on mbuf clusters (from sys/mbuf.h):
<PRE>
d142 1
a142 3
</PRE>

<P>
d144 21
a164 20
CHILD_MAX and OPEN_MAX are set to allow up to 512 child processes (different
than the maximum value for processes per user ID) and file descriptors.
These values may change for your particular configuration (a higher OPEN_MAX
value if you've got modules or CGI scripts opening lots of connections or
files). If you've got a lot of other activity besides httpd on the same
machine, you'll have to set NPROC higher still. In this example, the NPROC
value derived from maxusers proved sufficient for our load.

<P>

To increase the size of the <CODE>listen()</CODE> queue, you need to
adjust the value of SOMAXCONN. SOMAXCONN is not derived from maxusers,
so you'll always need to increase that yourself. We use a value guaranteed
to be larger than Apache's default for the listen() of 128, currently.
The actual value for SOMAXCONN is set in <CODE>sys/socket.h</CODE>.
The best way to adjust this parameter is run-time, rather than changing
it in this header file and thus hardcoding a value in the kernel and
elsewhere.  To do this, edit <CODE>/etc/rc.local</CODE> and add the
following line:
<PRE>
d166 1
a166 20
</PRE>

<P>

We used <CODE>256</CODE> but you can tune it for your own setup. In
many cases, however, even the default value of <CODE>128</CODE> (for
later versions of FreeBSD) is OK.

<P>

<STRONG>Caveats</STRONG>

<P>

Be aware that your system may not boot with a kernel that is configured
to use more resources than you have available system RAM.
<STRONG>ALWAYS</STRONG>
have a known bootable kernel available when tuning your system this way,
and use the system tools beforehand to learn if you need to buy more
memory before tuning.
d168 31
a198 24
<P>

RPC services will fail when the value of OPEN_MAX is larger than 256.
This is a function of the original implementations of the RPC library,
which used a byte value for holding file descriptors. BSDI has partially
addressed this limit in its 2.1 release, but a real fix may well await
the redesign of RPC itself.

<P>

Finally, there's the hard limit of child processes configured in Apache.

<P>

For versions of Apache later than 1.0.5 you'll need to change the
definition for <STRONG>HARD_SERVER_LIMIT</STRONG> in <EM>httpd.h</EM> and
recompile if you need to run more than the default 150 instances of httpd.

<P>

From conf/httpd.conf-dist:

<PRE>
# Limit on total number of servers running, <EM>i.e.</EM>, limit on the number
d205 73
a277 99
</PRE>

Know what you're doing if you bump this value up, and make sure you've
done your system monitoring, RAM expansion, and kernel tuning beforehand.
Then you're ready to service some serious hits!

<P>

Thanks to <EM>Tony Sanders</EM> and <EM>Chris Torek</EM> at BSDI for their
helpful suggestions and information.

<P>

"M. Teterin" &lt;mi@@ALDAN.ziplink.net&gt; writes:<P>
<BLOCKQUOTE>It really does help if your kernel and frequently used utilities
are fully optimized. Rebuilding the FreeBSD kernel on an AMD-133
(486-class CPU) web-server with<BR>
<CODE>    -m486 -fexpensive-optimizations -fomit-frame-pointer -O2</CODE><BR>
helped reduce the number of "unable" errors, because the CPU was
often maxed out.</BLOCKQUOTE>
<P>

<H2><A NAME="accf">Accept filtering on FreeBSD</A></H2>

<P>

Versions of FreeBSD from August 2000 onwards include a feature called
&quot;accept filters&quot; which delay the return from accept() until
a condition has been met, e.g. an HTTP request has arrived. This
postpones the requirement for a child process to handle the new
connection which therefore increases the number of connections that a
given number of child processes can handle. It also allows a child
process to accomplish more immediately after accept() returns (because
the request is already available to be read) so there is less context
switching.

<P>

There are two filters in FreeBSD at the time of writing:
&quot;dataready&quot; and &quot;httpready&quot;. The former just waits
for the first packet to arrive from the client; the latter waits for
the end of the HTTP headers. Unfortunately the &quot;httpready&quot;
filter breaks support for HTTP/0.9 (which doesn't have headers) so
Apache doesn't use it, but the &quot;dataready&quot; filter gives the
same benefit in the majority of cases so Apache attempts to use that
instead.

<P>

Accept filters provide the most benefit on servers that are already so
busy that they are configured with &quot;<CODE>KeepAlive Off</CODE>&quot;.
<A HREF="../keepalive.html">HTTP KeepAlive (aka persistent connections)</A>
avoids the cost of setting up a new connection for every request, but
connections that are being kept alive use up one of the available
child processes. Since there is a limited number of child processes
this can significantly reduce the capacity of the server. The viewers
of a web site will still get a lot of the benefit of persistent
connections even with a very small <CODE>KeepAliveTimeout</CODE> so
you should try reducing it before turning it off altogether.

<P>

To enable accept filtering, you must either load the appropriate
accept filter module,
e.g. with the command <CODE>kldload accf_data</CODE>,
or compile a kernel with <CODE>options ACCEPT_FILTER_DATA</CODE>.
Apache will then enable filtering when it is restarted.

<P>

If you are more concerned about performance than compatibility with
absurdly obsolete HTTP/0.9 user agents then you can recompile Apache
to use the &quot;httpready&quot; filter. This may be particularly
helpful if your web site uses really big cookies, for example.
If you are using <CODE>src/Configure</CODE> then add
<CODE>-DACCEPT_FILTER_NAME=\&quot;httpready\&quot;</CODE> to the
<CODE>EXTRA_CFLAGS</CODE> line in the <CODE>src/Configuration</CODE>
file.
If you are using APACI (aka <CODE>./configure</CODE>) then use the command
<CODE>CFLAGS=-DACCEPT_FILTER_NAME=\'\&quot;httpready\&quot;\' ./configure</CODE>
(with all the funky backslashed quotes).

<P>

<HR>

<H3>More welcome!</H3>

If you have tips to contribute, send mail to
<A HREF="mailto:apache@@apache.org">apache@@apache.org</A>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>

<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
d279 2
a280 1
</BODY></HTML>
@


1.2
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d251 1
a251 3
<A NAME="accf">
<H2>Accept filtering on FreeBSD</H2>
</A>
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
<html>
<head>
<title>Running a High-Performance Web Server for BSD</title>
</head>
d19 1
a19 1
  Apache HTTP Server Version 1.2
d26 2
a27 1
Like other OS's, the listen queue is often the <b>first limit hit</b>.  The
d31 1
a31 1
<p>
d34 2
a35 2
<blockquote><code>  /usr/include/sys/socket.h <br>
  /usr/src/sys/sys/socket.h </code></blockquote>
d37 1
a37 1
<pre>
d42 1
a42 1
</pre>
d48 1
a48 1
<p>
d51 1
a51 1
then reboot.  
d58 1
a58 1
<p>
d61 1
a61 1
<b>Addendum for <i>very</i> heavily loaded BSD servers</b><br>
d65 1
a65 1
<p>
d68 1
a68 1
things to do if the system is acting sluggish:<p>
d70 1
a70 1
<ul>
d72 1
a72 1
<li> Run vmstat to check memory usage, page/swap rates, etc.
d74 1
a74 1
<li> Run netstat -m to check mbuf usage
d76 1
a76 1
<li> Run fstat to check file descriptor usage
d78 1
a78 1
</ul>
d88 1
a88 1
<p>
d90 1
a90 1
<pre>
d92 1
a92 1
</pre>
d94 1
a94 1
Maxusers drives a <i>lot</i> of other kernel parameters:
d96 1
a96 1
<ul>
d98 1
a98 1
<li> Maximum # of processes
d100 1
a100 1
<li> Maximum # of processes per user
d102 1
a102 1
<li> System wide open files limit
d104 1
a104 1
<li> Per-process open files limit
d106 1
a106 1
<li> Maximum # of mbuf clusters
d108 1
a108 1
<li> Proc/pgrp hash table size
d110 1
a110 1
</ul>
d113 1
a113 1
<i>/usr/src/sys/conf/param.c</i>.
d117 1
a117 1
<pre>
a120 1
options         SOMAXCONN=256           # max pending connects
d128 1
a128 1
</pre>
d130 1
a130 5
SOMAXCONN is not derived from maxusers, so you'll always need to increase
that yourself. We used a value guaranteed to be larger than Apache's
default for the listen() of 128, currently.

<p>
d139 2
a140 2
a final FIN.  For more details see the 
<A HREF="fin_wait_2.html">FIN_WAIT_2</A> page. 
d142 1
a142 1
<p>
d145 1
a145 1
<pre>
d153 1
a153 1
</pre>
d155 1
a155 1
<p>
d165 1
a165 1
<p>
d167 12
a178 1
<b>Caveats</b>
d180 11
a190 1
<p>
d193 2
a194 1
to use more resources than you have available system RAM. <b>ALWAYS</b>
d196 1
a196 1
and use the system tools beforehand to learn if you need to buy more 
d199 1
a199 1
<p>
d207 1
a207 1
<p>
d211 1
a211 1
<p>
d214 2
a215 2
definition for <b>HARD_SERVER_LIMIT</b> in <i>httpd.h</i> and recompile
if you need to run more than the default 150 instances of httpd.
d217 1
a217 1
<p>
d221 2
a222 2
<pre>
# Limit on total number of servers running, i.e., limit on the number
d229 1
a229 1
</pre>
d235 1
a235 1
<p>
d237 1
a237 1
Thanks to <i>Tony Sanders</i> and <i>Chris Torek</i> at BSDI for their
d243 1
a243 1
<blockquote>It really does help if your kernel and frequently used utilities
d246 1
a246 1
<code>    -m486 -fexpensive-optimizations -fomit-frame-pointer -O2</code><BR>
d248 65
a312 1
often maxed out.</blockquote>
d319 2
a320 2
If you have tips to contribute, send mail to <a
href="mailto:brian@@organic.com">brian@@organic.com</a>
d323 1
d325 1
a325 1
 Apache HTTP Server Version 1.2
d331 1
a331 1
</body></html>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d2 4
a5 4
<HTML>
<HEAD>
<TITLE>Running a High-Performance Web Server for BSD</TITLE>
</HEAD>
d19 1
a19 1
  Apache HTTP Server Version 1.3
d26 1
a26 2
Like other OS's, the listen queue is often the <STRONG>first limit
hit</STRONG>.  The
d30 1
a30 1
<P>
d33 2
a34 2
<BLOCKQUOTE><CODE>  /usr/include/sys/socket.h <BR>
  /usr/src/sys/sys/socket.h </CODE></BLOCKQUOTE>
d36 1
a36 1
<PRE>
d41 1
a41 1
</PRE>
d47 1
a47 1
<P>
d50 1
a50 1
then reboot.
d57 1
a57 1
<P>
d60 1
a60 1
<STRONG>Addendum for <EM>very</EM> heavily loaded BSD servers</STRONG><BR>
d64 1
a64 1
<P>
d67 1
a67 1
things to do if the system is acting sluggish:<P>
d69 1
a69 1
<UL>
d71 1
a71 1
<LI> Run vmstat to check memory usage, page/swap rates, <EM>etc.</EM>
d73 1
a73 1
<LI> Run netstat -m to check mbuf usage
d75 1
a75 1
<LI> Run fstat to check file descriptor usage
d77 1
a77 1
</UL>
d87 1
a87 1
<P>
d89 1
a89 1
<PRE>
d91 1
a91 1
</PRE>
d93 1
a93 1
Maxusers drives a <EM>lot</EM> of other kernel parameters:
d95 1
a95 1
<UL>
d97 1
a97 1
<LI> Maximum # of processes
d99 1
a99 1
<LI> Maximum # of processes per user
d101 1
a101 1
<LI> System wide open files limit
d103 1
a103 1
<LI> Per-process open files limit
d105 1
a105 1
<LI> Maximum # of mbuf clusters
d107 1
a107 1
<LI> Proc/pgrp hash table size
d109 1
a109 1
</UL>
d112 1
a112 1
<EM>/usr/src/sys/conf/param.c</EM>.
d116 1
a116 1
<PRE>
d120 1
d128 5
a132 1
</PRE>
d134 1
a134 1
<P>
d143 2
a144 2
a final FIN.  For more details see the
<A HREF="fin_wait_2.html">FIN_WAIT_2</A> page.
d146 1
a146 1
<P>
d149 1
a149 1
<PRE>
d157 1
a157 1
</PRE>
d159 1
a159 1
<P>
d169 1
a169 14
<P>

To increase the size of the <CODE>listen()</CODE> queue, you need to
adjust the value of SOMAXCONN. SOMAXCONN is not derived from maxusers,
so you'll always need to increase that yourself. We use a value guaranteed
to be larger than Apache's default for the listen() of 128, currently.
The actual value for SOMAXCONN is set in <CODE>sys/socket.h</CODE>.
The best way to adjust this parameter is run-time, rather than changing
it in this header file and thus hardcoding a value in the kernel and
elsewhere.  To do this, edit <CODE>/etc/rc.local</CODE> and add the
following line:
<PRE>
    /usr/sbin/sysctl -w kern.somaxconn=256
</PRE>
d171 1
a171 1
<P>
d173 1
a173 9
We used <CODE>256</CODE> but you can tune it for your own setup. In
many cases, however, even the default value of <CODE>128</CODE> (for
later versions of FreeBSD) is OK.

<P>

<STRONG>Caveats</STRONG>

<P>
d176 1
a176 2
to use more resources than you have available system RAM.
<STRONG>ALWAYS</STRONG>
d178 1
a178 1
and use the system tools beforehand to learn if you need to buy more
d181 1
a181 1
<P>
d189 1
a189 1
<P>
d193 1
a193 1
<P>
d196 2
a197 2
definition for <STRONG>HARD_SERVER_LIMIT</STRONG> in <EM>httpd.h</EM> and
recompile if you need to run more than the default 150 instances of httpd.
d199 1
a199 1
<P>
d203 2
a204 2
<PRE>
# Limit on total number of servers running, <EM>i.e.</EM>, limit on the number
d211 1
a211 1
</PRE>
d217 1
a217 1
<P>
d219 1
a219 1
Thanks to <EM>Tony Sanders</EM> and <EM>Chris Torek</EM> at BSDI for their
d225 1
a225 1
<BLOCKQUOTE>It really does help if your kernel and frequently used utilities
d228 1
a228 1
<CODE>    -m486 -fexpensive-optimizations -fomit-frame-pointer -O2</CODE><BR>
d230 1
a230 1
often maxed out.</BLOCKQUOTE>
d237 2
a238 2
If you have tips to contribute, send mail to
<A HREF="mailto:apache@@apache.org">apache@@apache.org</A>
a240 1

d242 1
a242 1
 Apache HTTP Server Version 1.3
d248 1
a248 1
</BODY></HTML>
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 37
a37 48
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Running a High-Performance Web Server for BSD</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
    <a id="initial" name="initial">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>

    </a> 

    <h1 align="CENTER">Running a High-Performance Web Server for
    BSD</h1>

    <p>This document assumes that you have read the appropriate
    overview documentation for
    <a href="http://www.FreeBSD.org/docs.html">FreeBSD</a>,
    <a href="http://www.NetBSD.org/Documentation/">NetBSD</a>, or
    <a href="http://www.OpenBSD.org/docum.html">OpenBSD</a>.
    In addition, the FreeBSD
    <a href="http://www.FreeBSD.org/cgi/man.cgi?query=tuning">tuning</a>
    manual page contains lots of wisdom, especially regarding sysctl
    options.</p>

    <p>Like other OS's, the listen queue is often the <strong>first
    limit hit</strong>. The following are comments from "Aaron
    Gifford &lt;agifford@@InfoWest.COM&gt;" on how to fix this on
    BSDI 1.x, 2.x, and FreeBSD 2.0 (and earlier):</p>

    <p>Edit the following two files:</p>

    <blockquote>
      <code>/usr/include/sys/socket.h<br />
       /usr/src/sys/sys/socket.h</code>
    </blockquote>
    In each file, look for the following: 
<pre>
d42 49
a90 35
</pre>
    Just change the "5" to whatever appears to work. I bumped the
    two machines I was having problems with up to 32 and haven't
    noticed the problem since. 

    <p>After the edit, recompile the kernel and recompile the
    Apache server then reboot.</p>

    <p>FreeBSD 2.1 seems to be perfectly happy, with SOMAXCONN set
    to 32 already.</p>

    <p><a id="detail" name="detail"><strong>Addendum for
    <em>very</em> heavily loaded BSD servers</strong><br />
    </a> from Chuck Murcko &lt;chuck@@telebase.com&gt;</p>

    <p>If you're running a really busy BSD Apache server, the
    following are useful things to do if the system is acting
    sluggish:</p>

    <ul>
      <li>Run vmstat to check memory usage, page/swap rates,
      <em>etc.</em></li>

      <li>Run netstat -m to check mbuf usage</li>

      <li>Run fstat to check file descriptor usage</li>
    </ul>
    These utilities give you an idea what you'll need to tune in
    your kernel, and whether it'll help to buy more RAM. Here are
    some BSD kernel config parameters (actually BSDI, but pertinent
    to FreeBSD and other 4.4-lite derivatives) from a system
    getting heavy usage. The tools mentioned above were used, and
    the system memory was increased to 48 MB before these tuneups.
    Other system parameters remained unchanged. 
<pre>
d92 3
a94 2
</pre>
    Maxusers drives a <em>lot</em> of other kernel parameters: 
d96 1
a96 2
    <ul>
      <li>Maximum # of processes</li>
d98 1
a98 1
      <li>Maximum # of processes per user</li>
d100 1
a100 1
      <li>System wide open files limit</li>
d102 1
a102 1
      <li>Per-process open files limit</li>
d104 1
a104 1
      <li>Maximum # of mbuf clusters</li>
d106 12
a117 7
      <li>Proc/pgrp hash table size</li>
    </ul>
    The actual formulae for these derived parameters are in
    <em>/usr/src/sys/conf/param.c</em>. These calculated parameters
    can also be overridden (in part) by specifying your own values
    in the kernel configuration file: 
<pre>
d128 13
a140 1
</pre>
d142 1
a142 10
    <p>In many cases, NMBCLUSTERS must be set much larger than
    would appear necessary at first glance. The reason for this is
    that if the browser disconnects in mid-transfer, the socket fd
    associated with that particular connection ends up in the
    TIME_WAIT state for several minutes, during which time its
    mbufs are not yet freed. Another reason is that, on server
    timeouts, some connections end up in FIN_WAIT_2 state forever,
    because this state doesn't time out on the server, and the
    browser never sent a final FIN. For more details see the <a
    href="fin_wait_2.html">FIN_WAIT_2</a> page.</p>
d144 2
a145 2
    <p>Some more info on mbuf clusters (from sys/mbuf.h):</p>
<pre>
d153 1
a153 1
</pre>
d155 22
a176 21
    <p>CHILD_MAX and OPEN_MAX are set to allow up to 512 child
    processes (different than the maximum value for processes per
    user ID) and file descriptors. These values may change for your
    particular configuration (a higher OPEN_MAX value if you've got
    modules or CGI scripts opening lots of connections or files).
    If you've got a lot of other activity besides httpd on the same
    machine, you'll have to set NPROC higher still. In this
    example, the NPROC value derived from maxusers proved
    sufficient for our load.</p>

    <p>To increase the size of the <code>listen()</code> queue, you
    need to adjust the value of SOMAXCONN. SOMAXCONN is not derived
    from maxusers, so you'll always need to increase that yourself.
    We use a value guaranteed to be larger than Apache's default
    for the listen() of 128, currently. The actual value for
    SOMAXCONN is set in <code>sys/socket.h</code>. The best way to
    adjust this parameter is run-time, rather than changing it in
    this header file and thus hardcoding a value in the kernel and
    elsewhere. To do this, edit <code>/etc/rc.local</code> and add
    the following line:</p>
<pre>
d178 38
a215 1
</pre>
d217 6
a222 31
    <p>We used <code>256</code> but you can tune it for your own
    setup. In many cases, however, even the default value of
    <code>128</code> (for later versions of FreeBSD) is OK.</p>

    <p><strong>Caveats</strong></p>

    <p>Be aware that your system may not boot with a kernel that is
    configured to use more resources than you have available system
    RAM. <strong>ALWAYS</strong> have a known bootable kernel
    available when tuning your system this way, and use the system
    tools beforehand to learn if you need to buy more memory before
    tuning.</p>

    <p>RPC services will fail when the value of OPEN_MAX is larger
    than 256. This is a function of the original implementations of
    the RPC library, which used a byte value for holding file
    descriptors. BSDI has partially addressed this limit in its 2.1
    release, but a real fix may well await the redesign of RPC
    itself.</p>

    <p>Finally, there's the hard limit of child processes
    configured in Apache.</p>

    <p>For versions of Apache later than 1.0.5 you'll need to
    change the definition for <strong>HARD_SERVER_LIMIT</strong> in
    <em>httpd.h</em> and recompile if you need to run more than the
    default 150 instances of httpd.</p>

    <p>From conf/httpd.conf-dist:</p>
<pre>
# Limit on total number of servers running, <em>i.e.</em>, limit on the number
d229 37
a265 73
</pre>
    Know what you're doing if you bump this value up, and make sure
    you've done your system monitoring, RAM expansion, and kernel
    tuning beforehand. Then you're ready to service some serious
    hits! 

    <p>Thanks to <em>Tony Sanders</em> and <em>Chris Torek</em> at
    BSDI for their helpful suggestions and information.</p>

    <p>"M. Teterin" &lt;mi@@ALDAN.ziplink.net&gt; writes:</p>

    <blockquote>
      It really does help if your kernel and frequently used
      utilities are fully optimized. Rebuilding the FreeBSD kernel
      on an AMD-133 (486-class CPU) web-server with<br />
       <code>-m486 -fexpensive-optimizations -fomit-frame-pointer
      -O2</code><br />
       helped reduce the number of "unable" errors, because the CPU
      was often maxed out.
    </blockquote>

    <h2><a id="accf" name="accf">Accept filtering on
    FreeBSD</a></h2>

    <p>Versions of FreeBSD from August 2000 onwards include a
    feature called "accept filters" which delay the return from
    accept() until a condition has been met, e.g. an HTTP request
    has arrived. This postpones the requirement for a child process
    to handle the new connection which therefore increases the
    number of connections that a given number of child processes
    can handle. It also allows a child process to accomplish more
    immediately after accept() returns (because the request is
    already available to be read) so there is less context
    switching.</p>

    <p>Accept filters provide the most benefit on servers that are
    already so busy that they are configured with "<code>KeepAlive
    Off</code>". <a href="../keepalive.html">HTTP KeepAlive (aka
    persistent connections)</a> avoids the cost of setting up a new
    connection for every request, but connections that are being
    kept alive use up one of the available child processes. Since
    there is a limited number of child processes this can
    significantly reduce the capacity of the server. The viewers of
    a web site will still get a lot of the benefit of persistent
    connections even with a very small
    <code>KeepAliveTimeout</code> so you should try reducing it
    before turning it off altogether.</p>

    <p>To enable accept filtering, you must either load the
    appropriate accept filter module, e.g. with the command
    <code>kldload accf_http</code>, or compile a kernel with
    <code>options ACCEPT_FILTER_HTTP</code>. Apache will then
    enable filtering when it is restarted.</p>

    <p>Accept filters are compiled in if the symbol
    <code>SO_ACCEPTFILTER</code> is defined on the machine on which
    Apache is built. Additionally there is a directive <a
    href="../mod/core.html#acceptfilter">AcceptFilter</a> to switch
    the filters on or off. The default is on; except when apache is
    compiled with <code>-D AP_ACCEPTFILTER_ON</code>.</p>

    <p>See the manual page
    <a href="http://www.freebsd.org/cgi/man.cgi?query=accf_http">accf_http(9)</a>
    for more information.</p>

    <h3>More welcome!</h3>
    If you have tips to contribute, send mail to <a
    href="mailto:apache@@apache.org">apache@@apache.org</a> 
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
d267 1
a267 2
  </body>
</html>
@


