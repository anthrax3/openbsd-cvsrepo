head	1.3;
access;
symbols
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.3
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.1.2.0.14
	OPENBSD_3_0_BASE:1.1.1.2
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.12
	OPENBSD_2_8:1.1.1.2.0.10
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.8
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.07.29.09.37.45;	author jmc;	state dead;
branches;
next	1.2;

1.2
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.35;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.35;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.11;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.06;	author henning;	state Exp;
branches;
next	;


desc
@@


1.3
log
@from tamas tevesz:

==> some more alien platforms and obsolete info. the mod/core.html
change is because 1) the target link doesn't exist, 2) it
probably was meant to refer to misc/known_bugs.html in the
first place, which just got removed.
thanks henning for guidance.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Reading Client Input in Apache 1.2</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Reading Client Input in Apache 1.2</h1>
    <hr />

    <p>Apache 1.1 and earlier let modules handle POST and PUT
    requests by themselves. The module would, on its own, determine
    whether the request had an entity, how many bytes it was, and
    then called a function (<code>read_client_block</code>) to get
    the data.</p>

    <p>However, HTTP/1.1 requires several things of POST and PUT
    request handlers that did not fit into this module, and all
    existing modules have to be rewritten. The API calls for
    handling this have been further abstracted, so that future HTTP
    protocol changes can be accomplished while remaining
    backwards-compatible.</p>
    <hr />

    <h3>The New API Functions</h3>
<pre>
   int ap_setup_client_block (request_rec *, int read_policy);
   int ap_should_client_block (request_rec *);
   long ap_get_client_block (request_rec *, char *buffer, int buffer_size);
</pre>

    <ol>
      <li>
        Call <code>ap_setup_client_block()</code> near the
        beginning of the request handler. This will set up all the
        necessary properties, and will return either OK, or an
        error code. If the latter, the module should return that
        error code. The second parameter selects the policy to
        apply if the request message indicates a body, and how a
        chunked transfer-coding should be interpreted. Choose one
        of 
<pre>
    REQUEST_NO_BODY          Send 413 error if message has any body
    REQUEST_CHUNKED_ERROR    Send 411 error if body without Content-Length
    REQUEST_CHUNKED_DECHUNK  If chunked, remove the chunks for me.
    REQUEST_CHUNKED_PASS     Pass the chunks to me without removal.
</pre>
        In order to use the last two options, the caller MUST
        provide a buffer large enough to hold a chunk-size line,
        including any extensions.
      </li>

      <li>When you are ready to possibly accept input, call
      <code>ap_should_client_block()</code>. This will tell the
      module whether or not to read input. If it is 0, the module
      should assume that the input is of a non-entity type
      (<em>e.g.</em>, a GET request). A nonzero response indicates
      that the module should proceed (to step 3). This step also
      sends a 100 Continue response to HTTP/1.1 clients, so should
      not be called until the module is
      <strong>*definitely*</strong> ready to read content.
      (otherwise, the point of the 100 response is defeated). Never
      call this function more than once.</li>

      <li>Finally, call <code>ap_get_client_block</code> in a loop.
      Pass it a buffer and its size. It will put data into the
      buffer (not necessarily the full buffer, in the case of
      chunked inputs), and return the length of the input block.
      When it is done reading, it will return 0 if EOF, or -1 if
      there was an error.</li>
    </ol>

    <p>As an example, please look at the code in
    <code>mod_cgi.c</code>. This is properly written to the new API
    guidelines.</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>

@


1.2
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@@


1.1
log
@Initial revision
@
text
@d1 2
a2 35
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Reading Client Input in Apache 1.2</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.2
 </H3>
</DIV>

<H1 ALIGN="CENTER">Reading Client Input in Apache 1.2</h1>

<hr>

<p>Apache 1.1 and earlier let modules handle POST and PUT requests by
themselves. The module would, on its own, determine whether the
request had an entity, how many bytes it was, and then called a
function (<code>read_client_block</code>) to get the data.

<p>However, HTTP/1.1 requires several things of POST and PUT request
handlers that did not fit into this module, and all existing modules
have to be rewritten. The API calls for handling this have been
further abstracted, so that future HTTP protocol changes can be
accomplished while remaining backwards-compatible.</p>
d4 33
a36 3
<hr>

<h3>The New API Functions</h3>
d38 1
d40 3
a42 3
   int setup_client_block (request_rec *, int read_policy);
   int should_client_block (request_rec *);
   long get_client_block (request_rec *, char *buffer, int buffer_size);
d45 10
a54 8
<ol>
<li>Call <code>setup_client_block()</code> near the beginning of the request
    handler. This will set up all the necessary properties, and
    will return either OK, or an error code. If the latter,
    the module should return that error code. The second parameter
    selects the policy to apply if the request message indicates a
    body, and how a chunked
    transfer-coding should be interpreted. Choose one of
d61 33
a93 33
    In order to use the last two options, the caller MUST provide a buffer
    large enough to hold a chunk-size line, including any extensions.



<li>When you are ready to possibly accept input, call
    <code>should_client_block()</code>.
    This will tell the module whether or not to read input. If it is 0,
    the module should assume that the input is of a non-entity type
    (e.g. a GET request). A nonzero response indicates that the module
    should proceed (to step 3).
    This step also sends a 100 Continue response
    to HTTP/1.1 clients, so should not be called until the module
    is <strong>*definitely*</strong> ready to read content. (otherwise, the point of the
    100 response is defeated). Never call this function more than once.

<li>Finally, call <code>get_client_block</code> in a loop. Pass it a
    buffer and its 
    size. It will put data into the buffer (not necessarily the full
    buffer, in the case of chunked inputs), and return the length of
    the input block. When it is done reading, it will
    return 0 if EOF, or -1 if there was an error.

</ol>

<p>As an example, please look at the code in
<code>mod_cgi.c</code>. This is properly written to the new API
guidelines.</p>

<HR>
<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.2
</H3>
d95 2
a96 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a97 2
</BODY>
</HTML>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Reading Client Input in Apache 1.2</H1>
d24 1
a24 1
<HR>
d26 1
a26 1
<P>Apache 1.1 and earlier let modules handle POST and PUT requests by
d29 1
a29 1
function (<CODE>read_client_block</CODE>) to get the data.
d31 1
a31 1
<P>However, HTTP/1.1 requires several things of POST and PUT request
d35 1
a35 1
accomplished while remaining backwards-compatible.</P>
d37 1
a37 1
<HR>
d39 1
a39 1
<H3>The New API Functions</H3>
d41 5
a45 5
<PRE>
   int ap_setup_client_block (request_rec *, int read_policy);
   int ap_should_client_block (request_rec *);
   long ap_get_client_block (request_rec *, char *buffer, int buffer_size);
</PRE>
d47 2
a48 2
<OL>
<LI>Call <CODE>ap_setup_client_block()</CODE> near the beginning of the request
d55 1
a55 1
<PRE>
d60 1
a60 1
</PRE>
d66 2
a67 2
<LI>When you are ready to possibly accept input, call
    <CODE>ap_should_client_block()</CODE>.
d70 1
a70 1
    (<EM>e.g.</EM>, a GET request). A nonzero response indicates that the module
d74 1
a74 2
    is <STRONG>*definitely*</STRONG> ready to read content. (otherwise, the
    point of the
d77 2
a78 2
<LI>Finally, call <CODE>ap_get_client_block</CODE> in a loop. Pass it a
    buffer and its
d84 1
a84 1
</OL>
d86 3
a88 3
<P>As an example, please look at the code in
<CODE>mod_cgi.c</CODE>. This is properly written to the new API
guidelines.</P>
a90 1

d92 1
a92 1
 Apache HTTP Server Version 1.3
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 35
a35 2
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
d37 1
a37 33
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Reading Client Input in Apache 1.2</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Reading Client Input in Apache 1.2</h1>
    <hr />

    <p>Apache 1.1 and earlier let modules handle POST and PUT
    requests by themselves. The module would, on its own, determine
    whether the request had an entity, how many bytes it was, and
    then called a function (<code>read_client_block</code>) to get
    the data.</p>

    <p>However, HTTP/1.1 requires several things of POST and PUT
    request handlers that did not fit into this module, and all
    existing modules have to be rewritten. The API calls for
    handling this have been further abstracted, so that future HTTP
    protocol changes can be accomplished while remaining
    backwards-compatible.</p>
    <hr />
d39 3
a41 2
    <h3>The New API Functions</h3>
<pre>
d45 1
a45 1
</pre>
d47 9
a55 11
    <ol>
      <li>
        Call <code>ap_setup_client_block()</code> near the
        beginning of the request handler. This will set up all the
        necessary properties, and will return either OK, or an
        error code. If the latter, the module should return that
        error code. The second parameter selects the policy to
        apply if the request message indicates a body, and how a
        chunked transfer-coding should be interpreted. Choose one
        of 
<pre>
d60 36
a95 34
</pre>
        In order to use the last two options, the caller MUST
        provide a buffer large enough to hold a chunk-size line,
        including any extensions.
      </li>

      <li>When you are ready to possibly accept input, call
      <code>ap_should_client_block()</code>. This will tell the
      module whether or not to read input. If it is 0, the module
      should assume that the input is of a non-entity type
      (<em>e.g.</em>, a GET request). A nonzero response indicates
      that the module should proceed (to step 3). This step also
      sends a 100 Continue response to HTTP/1.1 clients, so should
      not be called until the module is
      <strong>*definitely*</strong> ready to read content.
      (otherwise, the point of the 100 response is defeated). Never
      call this function more than once.</li>

      <li>Finally, call <code>ap_get_client_block</code> in a loop.
      Pass it a buffer and its size. It will put data into the
      buffer (not necessarily the full buffer, in the case of
      chunked inputs), and return the length of the input block.
      When it is done reading, it will return 0 if EOF, or -1 if
      there was an error.</li>
    </ol>

    <p>As an example, please look at the code in
    <code>mod_cgi.c</code>. This is properly written to the new API
    guidelines.</p>
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
d97 2
a98 2
  </body>
</html>
d100 2
@


