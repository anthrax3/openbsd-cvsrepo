head	1.8;
access;
symbols
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.4
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.4
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.3
	apache_1_3_27:1.1.1.3
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.08.21.13.11.32;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.15.13.32.42;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.15.22.17.30;	author beck;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.25.18.29.24;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	99.09.29.06.29.02;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.17;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.10;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.08.21.12.53.31;	author henning;	state Exp;
branches;
next	;


desc
@@


1.8
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache HTTP Server: Security Tips</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Security Tips for Server Configuration</h1>

    <ul>
      <li><a href="#serverroot">Permissions on ServerRoot
      Directories</a></li>

      <li><a href="#ssi">Server Side Includes</a></li>

      <li><a href="#nsaliasedcgi">Non Script Aliased CGI</a></li>

      <li><a href="#saliasedcgi">Script Aliased CGI</a></li>

      <li><a href="#cgi">CGI in General</a></li>

      <li><a href="#dynamic">Other sources of dynamic content</a></li>

      <li><a href="#systemsettings">Protecting System
      Settings</a></li>

      <li><a href="#protectserverfiles">Protect Server Files by
      Default</a></li>
    </ul>
    <hr />

    <p>Some hints and tips on security issues in setting up a web
    server. Some of the suggestions will be general, others
    specific to Apache.</p>
    <hr />

    <h2><a id="serverroot" name="serverroot">Permissions on
    ServerRoot Directories</a></h2>

    <p>In typical operation, Apache is started by the root user,
    and it switches to the user defined by the <a
    href="../mod/core.html#user"><strong>User</strong></a>
    directive to serve hits. As is the case with any command that
    root executes, you must take care that it is protected from
    modification by non-root users. Not only must the files
    themselves be writeable only by root, but also the
    directories and parents of all directories. For example, if
    you choose to place ServerRoot in
    <code>/usr/local/apache</code> then it is suggested that you
    create that directory as root, with commands like these:</p>

    <blockquote>
<pre>
    mkdir /usr/local/apache
    cd /usr/local/apache
    mkdir bin conf logs
    chown 0 . bin conf logs
    chgrp 0 . bin conf logs
    chmod 755 . bin conf logs
</pre>
    </blockquote>
    It is assumed that /, /usr, and /usr/local are only modifiable
    by root. When you install the httpd executable, you should
    ensure that it is similarly protected: 

    <blockquote>
<pre>
    cp httpd /usr/local/apache/bin
    chown 0 /usr/local/apache/bin/httpd
    chgrp 0 /usr/local/apache/bin/httpd
    chmod 511 /usr/local/apache/bin/httpd
</pre>
    </blockquote>

    <p>You can create an htdocs subdirectory which is modifiable by
    other users -- since root never executes any files out of
    there, and shouldn't be creating files in there.</p>

    <p>If you allow non-root users to modify any files that root
    either executes or writes on then you open your system to root
    compromises. For example, someone could replace the httpd
    binary so that the next time you start it, it will execute some
    arbitrary code. If the logs directory is writeable (by a
    non-root user), someone could replace a log file with a symlink
    to some other system file, and then root might overwrite that
    file with arbitrary data. If the log files themselves are
    writeable (by a non-root user), then someone may be able to
    overwrite the log itself with bogus data.</p>
    <hr />

    <h2><a id="ssi" name="ssi">Server Side Includes</a></h2>

    <p>Server Side Includes (SSI) present a server administrator
    with several potential security risks.</p>

    <p>The first risk is the increased load on the server. All
    SSI-enabled files have to be parsed by Apache, whether or not
    there are any SSI directives included within the files. While
    this load increase is minor, in a shared server environment it
    can become significant.</p>

    <p>SSI files also pose the same risks that are associated with
    CGI scripts in general. Using the "exec cmd" element,
    SSI-enabled files can execute any CGI script or program under
    the permissions of the user and group Apache runs as, as
    configured in httpd.conf. That should definitely give server
    administrators pause.</p>

    <p>There are ways to enhance the security of SSI files while
    still taking advantage of the benefits they provide.</p>

    <p>To isolate the damage a wayward SSI file can cause, a server
    administrator can enable <a
    href="../suexec.html">suexec</a> as described in the <a
    href="#cgi">CGI in General</a> section.</p>

    <p>Enabling SSI for files with .html or .htm extensions can be
    dangerous. This is especially true in a shared, or high
    traffic, server environment. SSI-enabled files should have a
    separate extension, such as the conventional .shtml. This helps
    keep server load at a minimum and allows for easier management
    of risk.</p>

    <p>Another solution is to disable the ability to run scripts
    and programs from SSI pages. To do this, replace
    <code>Includes</code> with <code>IncludesNOEXEC</code> in the
    <a href="../mod/core.html#options">Options</a> directive. Note
    that users may still use &lt;--#include virtual="..." --&gt; to
    execute CGI scripts if these scripts are in directories
    designated by a <a
    href="../mod/mod_alias.html#scriptalias">ScriptAlias</a>
    directive.</p>
    <hr />

    <h2><a id="nsaliasedcgi" name="nsaliasedcgi">Non Script Aliased
    CGI</a></h2>

    <p>Allowing users to execute <strong>CGI</strong> scripts in
    any directory should only be considered if;</p>

    <ol>
      <li>You trust your users not to write scripts which will
      deliberately or accidentally expose your system to an
      attack.</li>

      <li>You consider security at your site to be so feeble in
      other areas, as to make one more potential hole
      irrelevant.</li>

      <li>You have no users, and nobody ever visits your
      server.</li>
    </ol>
    <hr />

    <h2><a id="saliasedcgi" name="saliasedcgi">Script Aliased
    CGI</a></h2>

    <p>Limiting <strong>CGI</strong> to special directories gives
    the admin control over what goes into those directories. This
    is inevitably more secure than non script aliased CGI, but
    <strong>only if users with write access to the directories are
    trusted</strong> or the admin is willing to test each new CGI
    script/program for potential security holes.</p>

    <p>Most sites choose this option over the non script aliased
    CGI approach.</p>
    <hr />

    <h2><a id="cgi" name="cgi">CGI in General</a></h2>

    <p>Always remember that you must trust the writers of the CGI
    script/programs or your ability to spot potential security
    holes in CGI, whether they were deliberate or accidental.</p>

    <p>All the CGI scripts will run as the same user, so they have
    potential to conflict (accidentally or deliberately) with other
    scripts <em>e.g.</em> User A hates User B, so he writes a
    script to trash User B's CGI database. One program which can be
    used to allow scripts to run as different users is <a
    href="../suexec.html">suEXEC</a> which is included with Apache
    as of 1.2 and is called from special hooks in the Apache server
    code. Another popular way of doing this is with <a
    href="http://wwwcgi.umr.edu/~cgiwrap/">CGIWrap</a>.</p>
    <hr />

    <h2><a id="dynamic" name="dynamic">Other sources of dynamic
    content</a></h2>

<p>Embedded scripting options which run as part of the server itself, such
as mod_php, mod_perl, mod_tcl, and mod_python, run under the identity of
the server itself (see the <a href="../mod/core.html#user">User</a>
directive), and therefore scripts executed by these engines
potentially can access anything the server user can. Some scripting
engines may provide restrictions, but it is better to be safe and assume
not.</p>
<hr />

    <h2><a id="systemsettings" name="systemsettings">Protecting
    System Settings</a></h2>

    <p>To run a really tight ship, you'll want to stop users from
    setting up <code>.htaccess</code> files which can override
    security features you've configured. Here's one way to do
    it.</p>

    <p>In the server configuration file, put</p>

    <blockquote>
      <code>&lt;Directory /&gt;<br />
       AllowOverride None<br />
       &lt;/Directory&gt;<br />
      </code>
    </blockquote>

    <p>This prevents the use of <code>.htaccess</code> files in all
    directories apart from those specifically enabled.</p>
    <hr />

    <h2><a id="protectserverfiles"
    name="protectserverfiles">Protect Server Files by
    Default</a></h2>

    <p>One aspect of Apache which is occasionally misunderstood is
    the feature of default access. That is, unless you take steps
    to change it, if the server can find its way to a file through
    normal URL mapping rules, it can serve it to clients.</p>

    <p>For instance, consider the following example:</p>

    <ol>
      <li><samp># cd /; ln -s / public_html</samp></li>

      <li>Accessing <samp>http://localhost/~root/</samp></li>
    </ol>

    <p>This would allow clients to walk through the entire
    filesystem. To work around this, add the following block to
    your server's configuration:</p>
<pre>
 &lt;Directory /&gt;
     Order Deny,Allow
     Deny from all
 &lt;/Directory&gt;
</pre>

    <p>This will forbid default access to filesystem locations. Add
    appropriate <a
    href="../mod/core.html#directory"><samp>&lt;Directory&gt;</samp></a>
    blocks to allow access only in those areas you wish. For
    example,</p>
<pre>
 &lt;Directory /usr/users/*/public_html&gt;
     Order Deny,Allow
     Allow from all
 &lt;/Directory&gt;
 &lt;Directory /usr/local/httpd&gt;
     Order Deny,Allow
     Allow from all
 &lt;/Directory&gt;
</pre>

    <p>Pay particular attention to the interactions of <a
    href="../mod/core.html#location"><samp>&lt;Location&gt;</samp></a>
    and <a
    href="../mod/core.html#directory"><samp>&lt;Directory&gt;</samp></a>
    directives; for instance, even if <samp>&lt;Directory
    /&gt;</samp> denies access, a <samp>&lt;Location /&gt;</samp>
    directive might overturn it.</p>

    <p>Also be wary of playing games with the <a
    href="../mod/mod_userdir.html#userdir">UserDir</a> directive;
    setting it to something like <samp>"./"</samp> would have the
    same effect, for root, as the first example above. If you are
    using Apache 1.3 or above, we strongly recommend that you
    include the following line in your server configuration
    files:</p>

    <dl>
      <dd><samp>UserDir&nbsp;disabled&nbsp;root</samp></dd>
    </dl>
    <hr />

    <p>Please send any other useful security tips to The Apache
    Group by filling out a <a
    href="http://bugs.apache.org/">problem report</a>. If you are
    confident you have found a security bug in the Apache source
    code itself, <a
    href="http://httpd.apache.org/bug_report.html">please let us
    know</a>.</p>

    <p>    <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
</p>
  </body>
</html>

@


1.7
log
@merge
@
text
@@


1.6
log
@mroe speling; torh
@
text
@d35 2
d59 2
a60 2
    themselves be writable only by root, but so must the
    directories, and parents of all directories. For example, if
d96 1
a96 1
    arbitrary code. If the logs directory is writable (by a
d100 1
a100 1
    writable (by a non-root user), then someone may be able to
d138 1
a138 1
    and programs from SSI pages. To do this replace
d143 2
a144 2
    desginated by a <a
    href="../mod/mod_alias.html#ScriptAlias">ScriptAlias</a>
d198 12
@


1.5
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d57 1
a57 1
    themselves be writeable only by root, but so must the
d94 1
a94 1
    arbitrary code. If the logs directory is writeable (by a
d98 1
a98 1
    writeable (by a non-root user), then someone may be able to
@


1.4
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d1 2
a2 41
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Apache HTTP Server: Security Tips</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Security Tips for Server Configuration</H1>

<HR>

<P>Some hints and tips on security issues in setting up a web server. Some of
the suggestions will be general, others specific to Apache.

<HR>

<H2><A NAME="serverroot">Permissions on ServerRoot Directories</A></H2>
<P>In typical operation, Apache is started by the root
user, and it switches to the user defined by the <A
HREF="../mod/core.html#user"><STRONG>User</STRONG></A> directive to serve hits.
As is the case with any command that root executes, you must take care
that it is protected from modification by non-root users.  Not only
must the files themselves be writeable only by root, but so must the
directories, and parents of all directories.  For example, if you
choose to place ServerRoot in <CODE>/usr/local/apache</CODE> then it is
suggested that you create that directory as root, with commands
like these:
d4 61
a64 1
<BLOCKQUOTE><PRE>
d71 5
a75 1
</PRE></BLOCKQUOTE>
d77 2
a78 5
It is assumed that /, /usr, and /usr/local are only modifiable by root.
When you install the httpd executable, you should ensure that it is
similarly protected:

<BLOCKQUOTE><PRE>
d83 2
a84 1
</PRE></BLOCKQUOTE>
d86 153
a238 109
<P>You can create an htdocs subdirectory which is modifiable by other
users -- since root never executes any files out of there, and shouldn't
be creating files in there.

<P>If you allow non-root users to modify any files that root either
executes or writes on then you open your system to root compromises.
For example, someone could replace the httpd binary so that the next
time you start it, it will execute some arbitrary code.  If the logs
directory is writeable (by a non-root user), someone
could replace a log file with a symlink to some other system file,
and then root might overwrite that file with arbitrary data.  If the
log files themselves are writeable (by a non-root user), then someone
may be able to overwrite the log itself with bogus data.
<P>
<HR>
<H2>Server Side Includes</H2>
<P>Server side includes (SSI) can be configured so that users can execute
arbitrary programs on the server. That thought alone should send a shiver
down the spine of any sys-admin.<P>

One solution is to disable that part of SSI. To do that you use the
IncludesNOEXEC option to the <A HREF="../mod/core.html#options">Options</A>
directive.<P>

<HR>

<H2>Non Script Aliased CGI</H2>
<P>Allowing users to execute <STRONG>CGI</STRONG> scripts in any directory
should only
be considered if;
<OL>
 <LI>You trust your users not to write scripts which will deliberately or
accidentally expose your system to an attack.
 <LI>You consider security at your site to be so feeble in other areas, as to
make one more potential hole irrelevant.
 <LI>You have no users, and nobody ever visits your server.
</OL><P>
<HR>

<H2>Script Alias'ed CGI</H2>
<P>Limiting <STRONG>CGI</STRONG> to special directories gives the admin
control over
what goes into those directories. This is inevitably more secure than
non script aliased CGI, but <STRONG>only if users with write access to the
directories are trusted</STRONG> or the admin is willing to test each new CGI
script/program for potential security holes.<P>

Most sites choose this option over the non script aliased CGI approach.<P>

<HR>
<H2>CGI in general</H2>
<P>Always remember that you must trust the writers of the CGI script/programs
or your ability to spot potential security holes in CGI, whether they were
deliberate or accidental.<P>

All the CGI scripts will run as the same user, so they have potential to
conflict (accidentally or deliberately) with other scripts <EM>e.g.</EM>
User A hates User B, so he writes a script to trash User B's CGI
database.  One program which can be used to allow scripts to run
as different users is <A HREF="../suexec.html">suEXEC</A> which is
included with Apache as of 1.2 and is called from special hooks in
the Apache server code.  Another popular way of doing this is with
<A HREF="http://wwwcgi.umr.edu/~cgiwrap/">CGIWrap</A>.  <P>

<HR>


<H2>Stopping users overriding system wide settings...</H2>
<P>To run a really tight ship, you'll want to stop users from setting
up <CODE>.htaccess</CODE> files which can override security features
you've configured. Here's one way to do it...<P>

In the server configuration file, put
<BLOCKQUOTE><CODE>
&lt;Directory /&gt; <BR>
AllowOverride None <BR>
Options None <BR>
Allow from all <BR>
&lt;/Directory&gt; <BR>
</CODE></BLOCKQUOTE>

Then setup for specific directories<P>

This stops all overrides, Includes and accesses in all directories apart
from those named.<P>
<HR>
<H2>
 Protect server files by default
</H2>
<P>
One aspect of Apache which is occasionally misunderstood is the feature
of default access.  That is, unless you take steps to change it, if the
server can find its way to a file through normal URL mapping rules, it
can serve it to clients.
</P>
<P>
For instance, consider the following example:
</P>
<OL>
 <LI><SAMP># cd /; ln -s / public_html</SAMP>
 </LI>
 <LI>Accessing <SAMP>http://localhost/~root/</SAMP>
 </LI>
</OL>
<P>
This would allow clients to walk through the entire filesystem.  To work
around this, add the following block to your server's configuration:
</P>
<PRE>
d243 8
a250 11
</PRE>
<P>
This will forbid default access to filesystem locations.  Add
appropriate
<A
 HREF="../mod/core.html#directory"
><SAMP>&lt;Directory&gt;</SAMP></A>
blocks to allow access only
in those areas you wish.  For example,
</P>
<PRE>
d259 1
a259 45
</PRE>
<P>
Pay particular attention to the interactions of
<A
 HREF="../mod/core.html#location"
><SAMP>&lt;Location&gt;</SAMP></A>
and
<A
 HREF="../mod/core.html#directory"
><SAMP>&lt;Directory&gt;</SAMP></A>
directives; for instance, even if <SAMP>&lt;Directory /&gt;</SAMP>
denies access, a <SAMP>&lt;Location /&gt;</SAMP> directive might
overturn it.
</P>
<P>
Also be wary of playing games with the
<A
 HREF="../mod/mod_userdir.html#userdir"
>UserDir</A>
directive; setting it to something like <SAMP>&quot;./&quot;</SAMP>
would have the same effect, for root, as the first example above.
If you are using Apache 1.3 or above, we strongly recommend that you
include the following line in your server configuration files:
</P>
<DL>
 <DD><SAMP>UserDir&nbsp;disabled&nbsp;root</SAMP>
 </DD>
</DL>

<HR>
<P>Please send any other useful security tips to The Apache Group
by filling out a
<A HREF="http://www.apache.org/bug_report.html">problem report</A>.  
If you are confident you have found a security bug in the Apache
source code itself, <A
HREF="http://www.apache.org/security_report.html">please let us
know</A>.

<P>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>
d261 37
a297 2
<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
a298 2
</BODY>
</HTML>
@


1.3
log
@Apache 1.3.11 + mod_ssl 2.5.0 merge
@
text
@d140 1
a140 1
allow from all <BR>
d173 1
a173 1
     Order deny,allow
d188 1
a188 1
     Order deny,allow
d192 1
a192 1
     Order deny,allow
@


1.2
log
@Apache 1.3.9 + Mod_ssl 2.4.2 - now builds with apaci nastiness.
@
text
@a233 1
<HR>
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.2
d24 1
a24 1
<hr>
d31 45
a75 10
<H2>Permissions on Log File Directories</H2>
<P>When Apache starts, it opens the log files as the user who started the
server before switching to the user defined in the 
<a href="../mod/core.html#user"><b>User</b></a> directive.  Anyone who
has write permission for the directory where any log files are
being written to can append pseudo-arbitrary data to any file on the
system which is writable by the user who starts Apache.  Since the
server is normally started by root, you should <EM>NOT</EM> give anyone
write permission to the directory where logs are stored unless you
want them to have root access. 
d81 1
a81 1
down the spine of any sys-admin.<p>
d85 1
a85 1
directive.<p>
d90 2
a91 1
<P>Allowing users to execute <B>CGI</B> scripts in any directory should only
d99 1
a99 1
</OL><p>
d103 2
a104 1
<P>Limiting <B>CGI</B> to special directories gives the admin control over
d106 2
a107 2
non script aliased CGI, but <strong>only if users with write access to the
directories are trusted</strong> or the admin is willing to test each new CGI
d110 1
a110 1
Most sites choose this option over the non script aliased CGI approach.<p>
d116 1
a116 1
deliberate or accidental.<p>
d119 1
a119 1
conflict (accidentally or deliberately) with other scripts e.g.
d133 1
a133 1
you've configured. Here's one way to do it...<p>
d136 7
a142 7
<blockquote><code>
&lt;Directory /&gt; <br>
AllowOverride None <br>
Options None <br>
allow from all <br>
&lt;/Directory&gt; <br>
</code></blockquote>
d147 1
a147 1
from those named.<p>
d216 7
d227 7
a233 4
<A HREF="http://www.apache.org/bugdb.cgi">problem report</A>, or by
sending mail to
<A HREF="mailto:apache-bugs@@mail.apache.org">apache-bugs@@mail.apache.org</A>
<p>
d237 1
d239 1
a239 1
 Apache HTTP Server Version 1.2
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d18 1
a18 1
  Apache HTTP Server Version 1.3
d24 1
a24 1
<HR>
d31 10
a40 45
<H2><A NAME="serverroot">Permissions on ServerRoot Directories</A></H2>
<P>In typical operation, Apache is started by the root
user, and it switches to the user defined by the <A
HREF="../mod/core.html#user"><STRONG>User</STRONG></A> directive to serve hits.
As is the case with any command that root executes, you must take care
that it is protected from modification by non-root users.  Not only
must the files themselves be writeable only by root, but so must the
directories, and parents of all directories.  For example, if you
choose to place ServerRoot in <CODE>/usr/local/apache</CODE> then it is
suggested that you create that directory as root, with commands
like these:

<BLOCKQUOTE><PRE>
    mkdir /usr/local/apache
    cd /usr/local/apache
    mkdir bin conf logs
    chown 0 . bin conf logs
    chgrp 0 . bin conf logs
    chmod 755 . bin conf logs
</PRE></BLOCKQUOTE>

It is assumed that /, /usr, and /usr/local are only modifiable by root.
When you install the httpd executable, you should ensure that it is
similarly protected:

<BLOCKQUOTE><PRE>
    cp httpd /usr/local/apache/sbin
    chown 0 /usr/local/apache/sbin/httpd
    chgrp 0 /usr/local/apache/sbin/httpd
    chmod 511 /usr/local/apache/sbin/httpd
</PRE></BLOCKQUOTE>

<P>You can create an htdocs subdirectory which is modifiable by other
users -- since root never executes any files out of there, and shouldn't
be creating files in there.

<P>If you allow non-root users to modify any files that root either
executes or writes on then you open your system to root compromises.
For example, someone could replace the httpd binary so that the next
time you start it, it will execute some arbitrary code.  If the logs
directory is writeable (by a non-root user), someone
could replace a log file with a symlink to some other system file,
and then root might overwrite that file with arbitrary data.  If the
log files themselves are writeable (by a non-root user), then someone
may be able to overwrite the log itself with bogus data.
d46 1
a46 1
down the spine of any sys-admin.<P>
d50 1
a50 1
directive.<P>
d55 1
a55 2
<P>Allowing users to execute <STRONG>CGI</STRONG> scripts in any directory
should only
d63 1
a63 1
</OL><P>
d67 1
a67 2
<P>Limiting <STRONG>CGI</STRONG> to special directories gives the admin
control over
d69 2
a70 2
non script aliased CGI, but <STRONG>only if users with write access to the
directories are trusted</STRONG> or the admin is willing to test each new CGI
d73 1
a73 1
Most sites choose this option over the non script aliased CGI approach.<P>
d79 1
a79 1
deliberate or accidental.<P>
d82 1
a82 1
conflict (accidentally or deliberately) with other scripts <EM>e.g.</EM>
d96 1
a96 1
you've configured. Here's one way to do it...<P>
d99 7
a105 7
<BLOCKQUOTE><CODE>
&lt;Directory /&gt; <BR>
AllowOverride None <BR>
Options None <BR>
allow from all <BR>
&lt;/Directory&gt; <BR>
</CODE></BLOCKQUOTE>
d110 1
a110 1
from those named.<P>
a178 7
If you are using Apache 1.3 or above, we strongly recommend that you
include the following line in your server configuration files:
</P>
<DL>
 <DD><SAMP>UserDir&nbsp;disabled&nbsp;root</SAMP>
 </DD>
</DL>
d183 4
a186 4
<A HREF="http://www.apache.org/bug_report.html">problem report</A>.  
Serious security matters should of course be sent to <A HREF="mailto:security@@apache.org">
security@@apache.org</A>.
<P>
a189 1

d191 1
a191 1
 Apache HTTP Server Version 1.3
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 41
a41 2
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
d43 1
a43 61
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Apache HTTP Server: Security Tips</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Security Tips for Server Configuration</h1>

    <ul>
      <li><a href="#serverroot">Permissions on ServerRoot
      Directories</a></li>

      <li><a href="#ssi">Server Side Includes</a></li>

      <li><a href="#nsaliasedcgi">Non Script Aliased CGI</a></li>

      <li><a href="#saliasedcgi">Script Aliased CGI</a></li>

      <li><a href="#cgi">CGI in General</a></li>

      <li><a href="#systemsettings">Protecting System
      Settings</a></li>

      <li><a href="#protectserverfiles">Protect Server Files by
      Default</a></li>
    </ul>
    <hr />

    <p>Some hints and tips on security issues in setting up a web
    server. Some of the suggestions will be general, others
    specific to Apache.</p>
    <hr />

    <h2><a id="serverroot" name="serverroot">Permissions on
    ServerRoot Directories</a></h2>

    <p>In typical operation, Apache is started by the root user,
    and it switches to the user defined by the <a
    href="../mod/core.html#user"><strong>User</strong></a>
    directive to serve hits. As is the case with any command that
    root executes, you must take care that it is protected from
    modification by non-root users. Not only must the files
    themselves be writeable only by root, but so must the
    directories, and parents of all directories. For example, if
    you choose to place ServerRoot in
    <code>/usr/local/apache</code> then it is suggested that you
    create that directory as root, with commands like these:</p>

    <blockquote>
<pre>
d50 122
a171 168
</pre>
    </blockquote>
    It is assumed that /, /usr, and /usr/local are only modifiable
    by root. When you install the httpd executable, you should
    ensure that it is similarly protected: 

    <blockquote>
<pre>
    cp httpd /usr/local/apache/bin
    chown 0 /usr/local/apache/bin/httpd
    chgrp 0 /usr/local/apache/bin/httpd
    chmod 511 /usr/local/apache/bin/httpd
</pre>
    </blockquote>

    <p>You can create an htdocs subdirectory which is modifiable by
    other users -- since root never executes any files out of
    there, and shouldn't be creating files in there.</p>

    <p>If you allow non-root users to modify any files that root
    either executes or writes on then you open your system to root
    compromises. For example, someone could replace the httpd
    binary so that the next time you start it, it will execute some
    arbitrary code. If the logs directory is writeable (by a
    non-root user), someone could replace a log file with a symlink
    to some other system file, and then root might overwrite that
    file with arbitrary data. If the log files themselves are
    writeable (by a non-root user), then someone may be able to
    overwrite the log itself with bogus data.</p>
    <hr />

    <h2><a id="ssi" name="ssi">Server Side Includes</a></h2>

    <p>Server Side Includes (SSI) present a server administrator
    with several potential security risks.</p>

    <p>The first risk is the increased load on the server. All
    SSI-enabled files have to be parsed by Apache, whether or not
    there are any SSI directives included within the files. While
    this load increase is minor, in a shared server environment it
    can become significant.</p>

    <p>SSI files also pose the same risks that are associated with
    CGI scripts in general. Using the "exec cmd" element,
    SSI-enabled files can execute any CGI script or program under
    the permissions of the user and group Apache runs as, as
    configured in httpd.conf. That should definitely give server
    administrators pause.</p>

    <p>There are ways to enhance the security of SSI files while
    still taking advantage of the benefits they provide.</p>

    <p>To isolate the damage a wayward SSI file can cause, a server
    administrator can enable <a
    href="../suexec.html">suexec</a> as described in the <a
    href="#cgi">CGI in General</a> section.</p>

    <p>Enabling SSI for files with .html or .htm extensions can be
    dangerous. This is especially true in a shared, or high
    traffic, server environment. SSI-enabled files should have a
    separate extension, such as the conventional .shtml. This helps
    keep server load at a minimum and allows for easier management
    of risk.</p>

    <p>Another solution is to disable the ability to run scripts
    and programs from SSI pages. To do this replace
    <code>Includes</code> with <code>IncludesNOEXEC</code> in the
    <a href="../mod/core.html#options">Options</a> directive. Note
    that users may still use &lt;--#include virtual="..." --&gt; to
    execute CGI scripts if these scripts are in directories
    desginated by a <a
    href="../mod/mod_alias.html#ScriptAlias">ScriptAlias</a>
    directive.</p>
    <hr />

    <h2><a id="nsaliasedcgi" name="nsaliasedcgi">Non Script Aliased
    CGI</a></h2>

    <p>Allowing users to execute <strong>CGI</strong> scripts in
    any directory should only be considered if;</p>

    <ol>
      <li>You trust your users not to write scripts which will
      deliberately or accidentally expose your system to an
      attack.</li>

      <li>You consider security at your site to be so feeble in
      other areas, as to make one more potential hole
      irrelevant.</li>

      <li>You have no users, and nobody ever visits your
      server.</li>
    </ol>
    <hr />

    <h2><a id="saliasedcgi" name="saliasedcgi">Script Aliased
    CGI</a></h2>

    <p>Limiting <strong>CGI</strong> to special directories gives
    the admin control over what goes into those directories. This
    is inevitably more secure than non script aliased CGI, but
    <strong>only if users with write access to the directories are
    trusted</strong> or the admin is willing to test each new CGI
    script/program for potential security holes.</p>

    <p>Most sites choose this option over the non script aliased
    CGI approach.</p>
    <hr />

    <h2><a id="cgi" name="cgi">CGI in General</a></h2>

    <p>Always remember that you must trust the writers of the CGI
    script/programs or your ability to spot potential security
    holes in CGI, whether they were deliberate or accidental.</p>

    <p>All the CGI scripts will run as the same user, so they have
    potential to conflict (accidentally or deliberately) with other
    scripts <em>e.g.</em> User A hates User B, so he writes a
    script to trash User B's CGI database. One program which can be
    used to allow scripts to run as different users is <a
    href="../suexec.html">suEXEC</a> which is included with Apache
    as of 1.2 and is called from special hooks in the Apache server
    code. Another popular way of doing this is with <a
    href="http://wwwcgi.umr.edu/~cgiwrap/">CGIWrap</a>.</p>
    <hr />

    <h2><a id="systemsettings" name="systemsettings">Protecting
    System Settings</a></h2>

    <p>To run a really tight ship, you'll want to stop users from
    setting up <code>.htaccess</code> files which can override
    security features you've configured. Here's one way to do
    it.</p>

    <p>In the server configuration file, put</p>

    <blockquote>
      <code>&lt;Directory /&gt;<br />
       AllowOverride None<br />
       &lt;/Directory&gt;<br />
      </code>
    </blockquote>

    <p>This prevents the use of <code>.htaccess</code> files in all
    directories apart from those specifically enabled.</p>
    <hr />

    <h2><a id="protectserverfiles"
    name="protectserverfiles">Protect Server Files by
    Default</a></h2>

    <p>One aspect of Apache which is occasionally misunderstood is
    the feature of default access. That is, unless you take steps
    to change it, if the server can find its way to a file through
    normal URL mapping rules, it can serve it to clients.</p>

    <p>For instance, consider the following example:</p>

    <ol>
      <li><samp># cd /; ln -s / public_html</samp></li>

      <li>Accessing <samp>http://localhost/~root/</samp></li>
    </ol>

    <p>This would allow clients to walk through the entire
    filesystem. To work around this, add the following block to
    your server's configuration:</p>
<pre>
d173 1
a173 1
     Order Deny,Allow
d176 11
a186 8
</pre>

    <p>This will forbid default access to filesystem locations. Add
    appropriate <a
    href="../mod/core.html#directory"><samp>&lt;Directory&gt;</samp></a>
    blocks to allow access only in those areas you wish. For
    example,</p>
<pre>
d188 1
a188 1
     Order Deny,Allow
d192 1
a192 1
     Order Deny,Allow
d195 43
a237 1
</pre>
d239 2
a240 37
    <p>Pay particular attention to the interactions of <a
    href="../mod/core.html#location"><samp>&lt;Location&gt;</samp></a>
    and <a
    href="../mod/core.html#directory"><samp>&lt;Directory&gt;</samp></a>
    directives; for instance, even if <samp>&lt;Directory
    /&gt;</samp> denies access, a <samp>&lt;Location /&gt;</samp>
    directive might overturn it.</p>

    <p>Also be wary of playing games with the <a
    href="../mod/mod_userdir.html#userdir">UserDir</a> directive;
    setting it to something like <samp>"./"</samp> would have the
    same effect, for root, as the first example above. If you are
    using Apache 1.3 or above, we strongly recommend that you
    include the following line in your server configuration
    files:</p>

    <dl>
      <dd><samp>UserDir&nbsp;disabled&nbsp;root</samp></dd>
    </dl>
    <hr />

    <p>Please send any other useful security tips to The Apache
    Group by filling out a <a
    href="http://bugs.apache.org/">problem report</a>. If you are
    confident you have found a security bug in the Apache source
    code itself, <a
    href="http://httpd.apache.org/bug_report.html">please let us
    know</a>.</p>

    <p>    <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
</p>
  </body>
</html>
d242 2
@


1.1.1.4
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@a34 2
      <li><a href="#dynamic">Other sources of dynamic content</a></li>

d57 2
a58 2
    themselves be writeable only by root, but also the
    directories and parents of all directories. For example, if
d136 1
a136 1
    and programs from SSI pages. To do this, replace
d141 2
a142 2
    designated by a <a
    href="../mod/mod_alias.html#scriptalias">ScriptAlias</a>
a195 12

    <h2><a id="dynamic" name="dynamic">Other sources of dynamic
    content</a></h2>

<p>Embedded scripting options which run as part of the server itself, such
as mod_php, mod_perl, mod_tcl, and mod_python, run under the identity of
the server itself (see the <a href="../mod/core.html#user">User</a>
directive), and therefore scripts executed by these engines
potentially can access anything the server user can. Some scripting
engines may provide restrictions, but it is better to be safe and assume
not.</p>
<hr />
@


