head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	apache_1_3_29-mod_ssl_2_8_16:1.1.1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	apache_1_3_28-mod_ssl_2_8_15:1.1.1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	apache_1_3_27-mod_ssl_2_8_12:1.1.1.4
	apache_1_3_27:1.1.1.4
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	apache_1_3_26:1.1.1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.1.2.0.10
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.8
	OPENBSD_2_7_BASE:1.1.1.2
	OPENBSD_2_6:1.1.1.2.0.6
	OPENBSD_2_6_BASE:1.1.1.2
	OPENBSD_2_5:1.1.1.2.0.4
	OPENBSD_2_5_BASE:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.2
	OPENBSD_2_4_BASE:1.1.1.2
	apache_1_3_2:1.1.1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	apache:1.1.1
	apache_1_2_6:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.04.22.14.47.24;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2003.08.21.13.11.32;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.07.21.04.43;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.12.07.56.47;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.15.22.17.30;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.25.07.08.36;	author beck;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.10.01.17.20.17;	author beck;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.07.19.21.28.09;	author henning;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.07.19.48.09;	author henning;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.08.21.12.53.31;	author henning;	state Exp;
branches;
next	;


desc
@@


1.6
log
@this commit is really florian@@'s, since he's the one who made removal
of our forked apache possible by his work on nginx and slowcgi, but he
doesn't want it - so it is my pleasure to tedu it. I spent so much work
on chroot in it 10 years ago - and am very happy to see it go now, nginx
is a far better choice today.
Bye bye, Apache, won't miss you.
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Hints on Running a High-Performance Web Server</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Hints on Running a High-Performance Web
    Server</h1>
    Running Apache on a heavily loaded web server, one often
    encounters problems related to the machine and OS
    configuration. "Heavy" is relative, of course - but if you are
    seeing more than a couple hits per second on a sustained basis
    you should consult the pointers on this page. In general the
    suggestions involve how to tune your kernel for the heavier TCP
    load, hardware/software conflicts that arise, <em>etc.</em> 

    <ul>
      <li><a href="#AUX">A/UX (Apple's UNIX)</a></li>

      <li><a href="#BSD">BSD-based (BSDI, FreeBSD, etc)</a></li>

      <li><a href="#DEC">Digital UNIX</a></li>

      <li><a href="perf-hp.html">HPUX</a></li>

      <li><a href="#irix">IRIX</a></li>

      <li><a href="#Linux">Linux</a></li>

      <li><a href="#Solaris">Solaris</a></li>

      <li><a href="#SunOS">SunOS 4.x</a></li>

      <li><a href="#SVR4">SVR4</a></li>
    </ul>
    <hr />

    <h3><a id="AUX" name="AUX">A/UX (Apple's UNIX)</a></h3>
    If you are running Apache on A/UX, a page that gives some
    helpful performance hints (concerning the <em>listen()</em>
    queue and using virtual hosts) <a
    href="http://www.jaguNET.com/apache.html">can be found here</a>
    
    <hr />

    <h3><a id="BSD" name="BSD">BSD-based (BSDI, FreeBSD,
    etc)</a></h3>
    <a href="perf-bsd44.html#initial">Quick</a> and <a
    href="perf-bsd44.html#detail">detailed</a> performance tuning
    hints for BSD-derived systems. <a
    href="perf-bsd44.html#accf">Accept filtering</a> on FreeBSD. 
    <hr />

    <h3><a id="DEC" name="DEC">Digital UNIX</a></h3>

    <ul>
      <li><a
      href="http://www.sean.de/Solaris/tune.html">
      Solaris 2.x - tuning your TCP/IP stack</a> contains some good
      technical information about tuning various Solaris TCP/IP
      parameters.</li>
    </ul>
    <hr />

    <h3><a id="SunOS" name="SunOS">SunOS 4.x</a></h3>
    More information on tuning SOMAXCONN on SunOS can be found at
    <a
    href="http://www.islandnet.com/~mark/somaxconn.html">http://www.islandnet.com/~mark/somaxconn.html</a>.
    
    <hr />

    <h3><a id="SVR4" name="SVR4">SVR4</a></h3>
    Some SVR4 versions waste three system calls on every
    <samp>gettimeofday()</samp> call. Depending on the syntactic
    form of the <samp>TZ</samp> environment variable, these systems
    have several different algorithms to determine the local time
    zone (presumably <em>compatible</em> with something). The
    following example uses the central european time zone to
    demonstrate this: 

    <dl>
      <dt><strong>TZ=:MET</strong></dt>

      <dd>
        This form delegates the knowledge of the time zone
        information to an external compiled zoneinfo file (&agrave;
        la BSD).<br />
         <strong>Caveat:</strong> Each time the gettimeofday()
        function is called, the external zone info is read in again
        (at least on some SVR4 systems). That results in three
        wasted system calls with every apache request served. 
<pre>
     open("/usr/lib/locale/TZ/MET", O_RDONLY) = 3
     read(3, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 7944) = 778
     close(3)                                = 0
</pre>
      </dd>

      <dt>
      <strong>TZ=MET-1MDT,M3.5.0/02:00:00,M10.5.0/03:00:00</strong></dt>

      <dd>This syntax form (&agrave; la SYSV) contains all the
      knowledge about time zone beginning and ending times in its
      external representation. It has to be parsed each time it is
      evaluated, resulting in a slight computing overhead, but it
      requires no system call. Though the table lookup &agrave; la
      BSD is the more sophisticated technical solution, the bad
      SVR4 implementation makes this the preferred syntax on
      systems which otherwise access the external zone info file
      repeatedly.</dd>
    </dl>
    You should use the <samp>truss</samp> utility on a
    single-process apache server (started with the <samp>-X</samp>
    debugging switch) to determine whether your system can profit
    from the second form of the <samp>TZ</samp> environment
    variable. If it does, you could integrate the setting of the
    preferred <samp>TZ</samp> syntax into the httpd startup script,
    which is usually simply a copy of (or symbolic link to) the
    <samp>apachectl</samp> utility script, or into the system's
    <samp>/etc/TIMEZONE</samp> script. 
    <hr />

    <h3>More welcome!</h3>
    If you have tips to contribute, please submit them to
    the <a href="http://bugs.apache.org/">Apache Bug
    Database</a>.

        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>

  </body>
</html>

@


1.5
log
@merge
@
text
@@


1.4
log
@merge apache 1.3.27
@
text
@d72 1
a72 42
      href="http://www.digital.com/info/internet/document/ias/tuning.html">
      DIGITAL UNIX Tuning Parameters for Web Servers</a></li>

      <li>We have some <a href="perf-dec.html">newsgroup
      postings</a> on how to tune Digital UNIX 3.2 and 4.0.</li>
    </ul>
    <hr />

    <h3><a id="irix" name="irix">IRIX</a></h3>

    <p>An SGI document covering tuning of IRIX 6.2 through 6.5 is
    available from <a
    href="http://gea.stanford.edu/SGI_tuning/">Stanford</a>.</p>

    <hr />

    <h3><a id="Linux" name="Linux">Linux</a></h3>
    There are no known problems with heavily loaded systems running
    Linux kernels 2.0.32 or later. Earlier kernels have some
    problems, and an upgrade to the latest 2.0.x is a good idea to
    eliminate various security and denial of service attacks. 
    <hr />


    <h3><a id="Solaris" name="Solaris">Solaris 2.4</a></h3>
    The Solaris 2.4 TCP implementation has a few inherent
    limitations that only became apparent under heavy loads. This
    has been fixed to some extent in 2.5 (and completely revamped
    in 2.6), but for now consult the following URL for tips on how
    to expand the capabilities if you are finding slowdowns and
    lags are hurting performance. 

    <p>Other links:</p>

    <ul>
      <li><a
      href="http://www.sun.com/sun-on-net/performance.html">World
      Wide Web Server Performance,
      &lt;http://www.sun.com/sun-on-net/performance.html&gt;</a></li>

      <li><a
      href="http://www.rvs.uni-hannover.de/people/voeckler/tune/EN/tune.html">
d139 1
a139 1
    the <a href="http://www.apache.org/bug_report.html">Apache Bug
@


1.3
log
@Apache 1.3.23+mod_ssl-2.8.6-1.3.23 merge
@
text
@d40 2
d80 8
d95 1
d179 4
a182 2
    If you have tips to contribute, send mail to <a
    href="mailto:apache@@apache.org">apache@@apache.org</a> 
@


1.2
log
@apache 1.3.14 + mod_ssl 2.7.1 merge
@
text
@d1 136
a136 147
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<TITLE>Hints on Running a High-Performance Web Server</TITLE>
</HEAD>

<!-- Background white, links blue (unvisited), navy (visited), red (active) -->
<BODY
 BGCOLOR="#FFFFFF"
 TEXT="#000000"
 LINK="#0000FF"
 VLINK="#000080"
 ALINK="#FF0000"
>
<DIV ALIGN="CENTER">
 <IMG SRC="../images/sub.gif" ALT="[APACHE DOCUMENTATION]">
 <H3>
  Apache HTTP Server Version 1.3
 </H3>
</DIV>

<H1 ALIGN="CENTER">Hints on Running a High-Performance Web Server</H1>

Running Apache on a heavily loaded web server, one often encounters
problems related to the machine and OS configuration.  "Heavy" is
relative, of course - but if you are seeing more than a couple hits
per second on a sustained basis you should consult the pointers on
this page.  In general the suggestions involve how to tune your kernel
for the heavier TCP load, hardware/software conflicts that arise, <EM>etc.</EM>

<UL>
<LI><A HREF="#AUX">A/UX (Apple's UNIX)</A>
<LI><A HREF="#BSD">BSD-based (BSDI, FreeBSD, etc)</A>
<LI><A HREF="#DEC">Digital UNIX</A>
<LI><A HREF="perf-hp.html">HPUX</A>
<LI><A HREF="#Linux">Linux</A>
<LI><A HREF="#Solaris">Solaris</A>
<LI><A HREF="#SunOS">SunOS 4.x</A>
<LI><A HREF="#SVR4">SVR4</A>
</UL>

<HR>

<H3><A NAME="AUX">
A/UX (Apple's UNIX)
</A></H3>

If you are running Apache on A/UX, a page that gives some helpful
performance hints (concerning the <EM>listen()</EM> queue and using
virtual hosts)
<A HREF="http://www.jaguNET.com/apache.html">can be found here</A>

<P><HR>

<H3><A NAME="BSD">
BSD-based (BSDI, FreeBSD, etc)
</A></H3>

<A HREF="perf-bsd44.html#initial">Quick</A> and
<A HREF="perf-bsd44.html#detail">detailed</A>
performance tuning hints for BSD-derived systems.
<A HREF="perf-bsd44.html#accf">Accept filtering</A> on FreeBSD.

<P><HR>

<H3><A NAME="DEC">
Digital UNIX
</A></H3>

<UL>
  <LI><A
       HREF="http://www.digital.com/info/internet/document/ias/tuning.html"
      >DIGITAL UNIX Tuning Parameters for Web Servers</A>
  <LI>We have some <A HREF="perf-dec.html">newsgroup postings</A> on how
      to tune Digital UNIX 3.2 and 4.0.
</UL>

<P><HR>

<H3><A NAME="Linux">
Linux
</A></H3>

There are no known problems with heavily loaded systems running Linux
kernels 2.0.32 or later.  Earlier kernels have some problems, and an
upgrade to the latest 2.0.x is a good idea to eliminate various security
and denial of service attacks.

<P><HR>

<H3><A NAME="Solaris">
Solaris 2.4
</A></H3>

The Solaris 2.4 TCP implementation has a few inherent limitations that
only became apparent under heavy loads.  This has been fixed to some
extent in 2.5 (and completely revamped in 2.6), but for now consult
the following URL for tips on how to expand the capabilities if you
are finding slowdowns and lags are hurting performance.

<P>

Other links:

<UL>

<LI><A HREF="http://www.sun.com/sun-on-net/performance.html">
World Wide Web Server Performance,
&lt;http://www.sun.com/sun-on-net/performance.html&gt;</A>
<LI><A HREF="http://www.rvs.uni-hannover.de/people/voeckler/tune/EN/tune.html">
Solaris 2.x - tuning your TCP/IP stack</A> contains some good technical
information about tuning various Solaris TCP/IP parameters.
</UL>

<P><HR>

<H3><A NAME="SunOS">
SunOS 4.x
</A></H3>

More information on tuning SOMAXCONN on SunOS can be found at
<A HREF="http://www.islandnet.com/~mark/somaxconn.html">
http://www.islandnet.com/~mark/somaxconn.html</A>.

<P><HR>

<H3><A NAME="SVR4">
SVR4
</A></H3>

Some SVR4 versions waste three system calls on every
<SAMP>gettimeofday()</SAMP> call. Depending on the syntactic
form of the <SAMP>TZ</SAMP> environment variable, these
systems have several different algorithms to determine the
local time zone (presumably <EM>compatible</EM> with
something). The following example uses the central european
time zone to demonstrate this:
<DL>
 <DT><STRONG>TZ=:MET</STRONG>
 <DD>This form delegates the knowledge of the time zone
     information to an external compiled zoneinfo file
     (&agrave; la BSD).<BR>
     <STRONG>Caveat:</STRONG> Each time the gettimeofday()
     function is called, the external zone info is read in
     again (at least on some SVR4 systems). That results in
     three wasted system calls with every apache request
     served.<PRE>
d139 36
a174 38
     close(3)                                = 0</PRE>

 <DT><STRONG>TZ=MET-1MDT,M3.5.0/02:00:00,M10.5.0/03:00:00</STRONG>
 <DD>This syntax form (&agrave; la SYSV) contains all the
     knowledge about time zone beginning and ending times in
     its external representation. It has to be parsed each
     time it is evaluated, resulting in a slight computing
     overhead, but it requires no system call. Though the
     table lookup &agrave; la BSD is the more sophisticated
     technical solution, the bad SVR4 implementation makes
     this the preferred syntax on systems which otherwise
     access the external zone info file repeatedly.
</DL>
You should use the <SAMP>truss</SAMP> utility on a
single-process apache server (started with the <SAMP>-X</SAMP>
debugging switch) to determine whether your system can profit
from the second form of the <SAMP>TZ</SAMP> environment
variable. If it does, you could integrate the setting of the
preferred <SAMP>TZ</SAMP> syntax into the httpd startup
script, which is usually simply a copy of (or symbolic link
to) the <SAMP>apachectl</SAMP> utility script, or into the
system's <SAMP>/etc/TIMEZONE</SAMP> script.

<P><HR>

<H3>More welcome!</H3>

If you have tips to contribute, send mail to <A
HREF="mailto:apache@@apache.org">apache@@apache.org</A>

<HR>

<H3 ALIGN="CENTER">
 Apache HTTP Server Version 1.3
</H3>

<A HREF="./"><IMG SRC="../images/index.gif" ALT="Index"></A>
<A HREF="../"><IMG SRC="../images/home.gif" ALT="Home"></A>
d176 2
a177 1
</BODY></HTML>
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
<html>
<head>
<title>Hints on Running a High-Performance Web Server</title>
</head>
d18 1
a18 1
  Apache HTTP Server Version 1.2
d22 1
a22 1
<h1 ALIGN="CENTER">Hints on Running a High-Performance Web Server</H1>
d29 1
a29 1
for the heavier TCP load, hardware/software conflicts that arise, etc.
d35 1
a36 1
<LI><A HREF="#SGI">SGI</A>
d39 1
d49 1
a49 1
performance hints (concerning the <I>listen()</I> queue and using
d62 1
d70 6
a75 5
<UL> 
  <LI><A HREF="http://www.digital.com/info/internet/document/ias/tuning.html">DIGITAL
        UNIX Tuning Parameters for Web Servers</A> 
  <LI>We have some <A HREF="perf-dec.html">newsgroup postings</A> on how to tune 
        Digital UNIX 3.2 and 4.0. 
d84 4
a87 20
The most common problem on Linux shows up on heavily-loaded systems
where the whole server will appear to freeze for a couple of minutes
at a time, and then come back to life.  This has been traced to a
listen() queue overload - certain Linux implementations have a low
value set for the incoming connection queue which can cause problems.
Please see our <a
href="http://www.qosina.com/~awm/apache/linux-tcp.html">Using Apache on
Linux</a> page for more info on how to fix this.

<P><HR>

<H3><A NAME="SGI">
SGI
</A></H3>

<UL>
<LI><A HREF="http://www.sgi.com/Products/WebFORCE/Resources/res_TuningGuide.html">
WebFORCE Web Server Tuning Guidelines for IRIX 5.3,
&lt;http://www.sgi.com/Products/WebFORCE/Resources/res_TuningGuide.html&gt;</A>
</UL>
d101 4
d107 6
a112 1
<LI><A href="http://www.sun.com/sun-on-net/performance.html">Sun Performance Information</a>
d121 1
a121 1
More information on tuning SOMAXCONN on SunOS can be found at 
d123 49
a171 1
http://www.islandnet.com/~mark/somaxconn.html</A>.  
d177 2
a178 2
If you have tips to contribute, send mail to <a
href="mailto:brian@@organic.com">brian@@organic.com</a>
d181 1
d183 1
a183 1
 Apache HTTP Server Version 1.2
d189 1
a189 1
</body></html>
@


1.1.1.1
log
@Initial import from apache 1.2.6
@
text
@@


1.1.1.2
log
@Apache 1.3.2
@
text
@d2 4
a5 4
<HTML>
<HEAD>
<TITLE>Hints on Running a High-Performance Web Server</TITLE>
</HEAD>
d18 1
a18 1
  Apache HTTP Server Version 1.3
d22 1
a22 1
<H1 ALIGN="CENTER">Hints on Running a High-Performance Web Server</H1>
d29 1
a29 1
for the heavier TCP load, hardware/software conflicts that arise, <EM>etc.</EM>
a34 1
<LI><A HREF="perf-hp.html">HPUX</A>
d36 1
a38 1
<LI><A HREF="#SVR4">SVR4</A>
d48 1
a48 1
performance hints (concerning the <EM>listen()</EM> queue and using
d68 5
a72 6
<UL>
  <LI><A
       HREF="http://www.digital.com/info/internet/document/ias/tuning.html"
      >DIGITAL UNIX Tuning Parameters for Web Servers</A>
  <LI>We have some <A HREF="perf-dec.html">newsgroup postings</A> on how
      to tune Digital UNIX 3.2 and 4.0.
d81 20
a100 4
There are no known problems with heavily loaded systems running Linux
kernels 2.0.32 or later.  Earlier kernels have some problems, and an
upgrade to the latest 2.0.x is a good idea to eliminate various security
and denial of service attacks.
a113 4
<P>

Other links:

d116 1
a116 6
<LI><A HREF="http://www.sun.com/sun-on-net/performance.html">
World Wide Web Server Performance,
&lt;http://www.sun.com/sun-on-net/performance.html&gt;</A>
<LI><A HREF="http://www.rvs.uni-hannover.de/people/voeckler/tune/EN/tune.html">
Solaris 2.x - tuning your TCP/IP stack</A> contains some good technical
information about tuning various Solaris TCP/IP parameters.
d125 1
a125 1
More information on tuning SOMAXCONN on SunOS can be found at
d127 1
a127 49
http://www.islandnet.com/~mark/somaxconn.html</A>.

<P><HR>

<H3><A NAME="SVR4">
SVR4
</A></H3>

Some SVR4 versions waste three system calls on every
<SAMP>gettimeofday()</SAMP> call. Depending on the syntactic
form of the <SAMP>TZ</SAMP> environment variable, these
systems have several different algorithms to determine the
local time zone (presumably <EM>compatible</EM> with
something). The following example uses the central european
time zone to demonstrate this:
<DL>
 <DT><STRONG>TZ=:MET</STRONG>
 <DD>This form delegates the knowledge of the time zone
     information to an external compiled zoneinfo file
     (&agrave; la BSD).<BR>
     <STRONG>Caveat:</STRONG> Each time the gettimeofday()
     function is called, the external zone info is read in
     again (at least on some SVR4 systems). That results in
     three wasted system calls with every apache request
     served.<PRE>
     open("/usr/lib/locale/TZ/MET", O_RDONLY) = 3
     read(3, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 7944) = 778
     close(3)                                = 0</PRE>

 <DT><STRONG>TZ=MET-1MDT,M3.5.0/02:00:00,M10.5.0/03:00:00</STRONG>
 <DD>This syntax form (&agrave; la SYSV) contains all the
     knowledge about time zone beginning and ending times in
     its external representation. It has to be parsed each
     time it is evaluated, resulting in a slight computing
     overhead, but it requires no system call. Though the
     table lookup &agrave; la BSD is the more sophisticated
     technical solution, the bad SVR4 implementation makes
     this the preferred syntax on systems which otherwise
     access the external zone info file repeatedly.
</DL>
You should use the <SAMP>truss</SAMP> utility on a
single-process apache server (started with the <SAMP>-X</SAMP>
debugging switch) to determine whether your system can profit
from the second form of the <SAMP>TZ</SAMP> environment
variable. If it does, you could integrate the setting of the
preferred <SAMP>TZ</SAMP> syntax into the httpd startup
script, which is usually simply a copy of (or symbolic link
to) the <SAMP>apachectl</SAMP> utility script, or into the
system's <SAMP>/etc/TIMEZONE</SAMP> script.
d133 2
a134 2
If you have tips to contribute, send mail to <A
HREF="mailto:apache@@apache.org">apache@@apache.org</A>
a136 1

d138 1
a138 1
 Apache HTTP Server Version 1.3
d144 1
a144 1
</BODY></HTML>
@


1.1.1.3
log
@import apache 1.3.26 + mod_ssl 2.8.10
@
text
@d1 146
a146 136
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content="HTML Tidy, see www.w3.org" />

    <title>Hints on Running a High-Performance Web Server</title>
  </head>
  <!-- Background white, links blue (unvisited), navy (visited), red (active) -->

  <body bgcolor="#FFFFFF" text="#000000" link="#0000FF"
  vlink="#000080" alink="#FF0000">
        <div align="CENTER">
      <img src="../images/sub.gif" alt="[APACHE DOCUMENTATION]" /> 

      <h3>Apache HTTP Server Version 1.3</h3>
    </div>


    <h1 align="CENTER">Hints on Running a High-Performance Web
    Server</h1>
    Running Apache on a heavily loaded web server, one often
    encounters problems related to the machine and OS
    configuration. "Heavy" is relative, of course - but if you are
    seeing more than a couple hits per second on a sustained basis
    you should consult the pointers on this page. In general the
    suggestions involve how to tune your kernel for the heavier TCP
    load, hardware/software conflicts that arise, <em>etc.</em> 

    <ul>
      <li><a href="#AUX">A/UX (Apple's UNIX)</a></li>

      <li><a href="#BSD">BSD-based (BSDI, FreeBSD, etc)</a></li>

      <li><a href="#DEC">Digital UNIX</a></li>

      <li><a href="perf-hp.html">HPUX</a></li>

      <li><a href="#Linux">Linux</a></li>

      <li><a href="#Solaris">Solaris</a></li>

      <li><a href="#SunOS">SunOS 4.x</a></li>

      <li><a href="#SVR4">SVR4</a></li>
    </ul>
    <hr />

    <h3><a id="AUX" name="AUX">A/UX (Apple's UNIX)</a></h3>
    If you are running Apache on A/UX, a page that gives some
    helpful performance hints (concerning the <em>listen()</em>
    queue and using virtual hosts) <a
    href="http://www.jaguNET.com/apache.html">can be found here</a>
    
    <hr />

    <h3><a id="BSD" name="BSD">BSD-based (BSDI, FreeBSD,
    etc)</a></h3>
    <a href="perf-bsd44.html#initial">Quick</a> and <a
    href="perf-bsd44.html#detail">detailed</a> performance tuning
    hints for BSD-derived systems. <a
    href="perf-bsd44.html#accf">Accept filtering</a> on FreeBSD. 
    <hr />

    <h3><a id="DEC" name="DEC">Digital UNIX</a></h3>

    <ul>
      <li><a
      href="http://www.digital.com/info/internet/document/ias/tuning.html">
      DIGITAL UNIX Tuning Parameters for Web Servers</a></li>

      <li>We have some <a href="perf-dec.html">newsgroup
      postings</a> on how to tune Digital UNIX 3.2 and 4.0.</li>
    </ul>
    <hr />

    <h3><a id="Linux" name="Linux">Linux</a></h3>
    There are no known problems with heavily loaded systems running
    Linux kernels 2.0.32 or later. Earlier kernels have some
    problems, and an upgrade to the latest 2.0.x is a good idea to
    eliminate various security and denial of service attacks. 
    <hr />

    <h3><a id="Solaris" name="Solaris">Solaris 2.4</a></h3>
    The Solaris 2.4 TCP implementation has a few inherent
    limitations that only became apparent under heavy loads. This
    has been fixed to some extent in 2.5 (and completely revamped
    in 2.6), but for now consult the following URL for tips on how
    to expand the capabilities if you are finding slowdowns and
    lags are hurting performance. 

    <p>Other links:</p>

    <ul>
      <li><a
      href="http://www.sun.com/sun-on-net/performance.html">World
      Wide Web Server Performance,
      &lt;http://www.sun.com/sun-on-net/performance.html&gt;</a></li>

      <li><a
      href="http://www.rvs.uni-hannover.de/people/voeckler/tune/EN/tune.html">
      Solaris 2.x - tuning your TCP/IP stack</a> contains some good
      technical information about tuning various Solaris TCP/IP
      parameters.</li>
    </ul>
    <hr />

    <h3><a id="SunOS" name="SunOS">SunOS 4.x</a></h3>
    More information on tuning SOMAXCONN on SunOS can be found at
    <a
    href="http://www.islandnet.com/~mark/somaxconn.html">http://www.islandnet.com/~mark/somaxconn.html</a>.
    
    <hr />

    <h3><a id="SVR4" name="SVR4">SVR4</a></h3>
    Some SVR4 versions waste three system calls on every
    <samp>gettimeofday()</samp> call. Depending on the syntactic
    form of the <samp>TZ</samp> environment variable, these systems
    have several different algorithms to determine the local time
    zone (presumably <em>compatible</em> with something). The
    following example uses the central european time zone to
    demonstrate this: 

    <dl>
      <dt><strong>TZ=:MET</strong></dt>

      <dd>
        This form delegates the knowledge of the time zone
        information to an external compiled zoneinfo file (&agrave;
        la BSD).<br />
         <strong>Caveat:</strong> Each time the gettimeofday()
        function is called, the external zone info is read in again
        (at least on some SVR4 systems). That results in three
        wasted system calls with every apache request served. 
<pre>
d149 38
a186 36
     close(3)                                = 0
</pre>
      </dd>

      <dt>
      <strong>TZ=MET-1MDT,M3.5.0/02:00:00,M10.5.0/03:00:00</strong></dt>

      <dd>This syntax form (&agrave; la SYSV) contains all the
      knowledge about time zone beginning and ending times in its
      external representation. It has to be parsed each time it is
      evaluated, resulting in a slight computing overhead, but it
      requires no system call. Though the table lookup &agrave; la
      BSD is the more sophisticated technical solution, the bad
      SVR4 implementation makes this the preferred syntax on
      systems which otherwise access the external zone info file
      repeatedly.</dd>
    </dl>
    You should use the <samp>truss</samp> utility on a
    single-process apache server (started with the <samp>-X</samp>
    debugging switch) to determine whether your system can profit
    from the second form of the <samp>TZ</samp> environment
    variable. If it does, you could integrate the setting of the
    preferred <samp>TZ</samp> syntax into the httpd startup script,
    which is usually simply a copy of (or symbolic link to) the
    <samp>apachectl</samp> utility script, or into the system's
    <samp>/etc/TIMEZONE</samp> script. 
    <hr />

    <h3>More welcome!</h3>
    If you have tips to contribute, send mail to <a
    href="mailto:apache@@apache.org">apache@@apache.org</a> 
        <hr />

    <h3 align="CENTER">Apache HTTP Server Version 1.3</h3>
    <a href="./"><img src="../images/index.gif" alt="Index" /></a>
    <a href="../"><img src="../images/home.gif" alt="Home" /></a>
d188 1
a188 2
  </body>
</html>
@


1.1.1.4
log
@import apache 1.3.27 and mod_ssl 2.8.11
@
text
@a39 2
      <li><a href="#irix">IRIX</a></li>

a77 8
    <h3><a id="irix" name="irix">IRIX</a></h3>

    <p>An SGI document covering tuning of IRIX 6.2 through 6.5 is
    available from <a
    href="http://gea.stanford.edu/SGI_tuning/">Stanford</a>.</p>

    <hr />

a84 1

d168 2
a169 4
    If you have tips to contribute, please submit them to
    the <a href="http://www.apache.org/bug_report.html">Apache Bug
    Database</a>.

@


1.1.1.5
log
@import apache 1.3.28 and mod_ssl 2.8.15
@
text
@d72 42
a113 1
      href="http://www.sean.de/Solaris/tune.html">
d180 1
a180 1
    the <a href="http://bugs.apache.org/">Apache Bug
@


