head	1.13;
access;
symbols
	OPENBSD_2_7:1.12.0.2
	OPENBSD_2_7_BASE:1.12
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.8
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2000.06.09.16.29.06;	author mickey;	state dead;
branches;
next	1.12;

1.12
date	2000.01.14.03.08.03;	author ericj;	state Exp;
branches;
next	1.11;

1.11
date	99.09.17.14.58.42;	author kstailey;	state Exp;
branches;
next	1.10;

1.10
date	97.09.20.12.44.29;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.06.30.06.21.31;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.06.30.05.59.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.06.28.16.41.08;	author grr;	state Exp;
branches;
next	1.6;

1.6
date	97.06.27.19.02.09;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.05.31.06.14.29;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.26.05.54.28;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.13.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.43.52;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@chown moved into chmod
@
text
@/*	$OpenBSD: chown.c,v 1.12 2000/01/14 03:08:03 ericj Exp $	*/

/*
 * Copyright (c) 1988, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1988, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/* from: static char sccsid[] = "@@(#)chown.c	8.8 (Berkeley) 4/4/94"; */
static char *rcsid = "$Id: chown.c,v 1.12 2000/01/14 03:08:03 ericj Exp $";
#endif /* not lint */

#include <sys/param.h>
#include <sys/stat.h>

#include <ctype.h>
#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <fts.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <locale.h>

void	a_gid __P((char *));
void	a_uid __P((char *));
void	usage __P((void));

uid_t uid;
gid_t gid;
int Rflag, ischown, fflag;
extern char *__progname;

int
main(argc, argv)
	int argc;
	char *argv[];
{
	FTS *ftsp;
	FTSENT *p;
	int Hflag, Lflag, ch, fts_options, hflag, rval;
	char *cp;
	
	setlocale(LC_ALL, "");

	ischown = __progname[2] == 'o';
	
	Hflag = Lflag = hflag = 0;
	while ((ch = getopt(argc, argv, "HLPRfh")) != -1)
		switch (ch) {
		case 'H':
			Hflag = 1;
			Lflag = 0;
			break;
		case 'L':
			Lflag = 1;
			Hflag = 0;
			break;
		case 'P':
			Hflag = Lflag = 0;
			break;
		case 'R':
			Rflag = 1;
			break;
		case 'f':
			fflag = 1;
			break;
		case 'h':
			hflag = 1;
			break;
		case '?':
		default:
			usage();
		}
	argv += optind;
	argc -= optind;

	if (argc < 2)
		usage();

	fts_options = FTS_PHYSICAL;
	if (Rflag) {
		if (hflag)
			errx(1,
		"the -R and -h options may not be specified together.");
		if (Hflag)
			fts_options |= FTS_COMFOLLOW;
		if (Lflag) {
			fts_options &= ~FTS_PHYSICAL;
			fts_options |= FTS_LOGICAL;
		}
	}

	uid = gid = -1;
	if (ischown) {
		if ((cp = strchr(*argv, ':')) != NULL) {
			*cp++ = '\0';
			a_gid(cp);
		} 
#ifdef SUPPORT_DOT
		else if ((cp = strchr(*argv, '.')) != NULL) {
			*cp++ = '\0';
			a_gid(cp);
		}
#endif
		a_uid(*argv);
	} else 
		a_gid(*argv);

	if ((ftsp = fts_open(++argv, fts_options, 0)) == NULL)
		err(1, NULL);

	for (rval = 0; (p = fts_read(ftsp)) != NULL;) {
		switch (p->fts_info) {
		case FTS_D:
			if (!Rflag)		/* Change it at FTS_DP. */
				fts_set(ftsp, p, FTS_SKIP);
			continue;
		case FTS_DNR:			/* Warn, chown, continue. */
			warnx("%s: %s", p->fts_path, strerror(p->fts_errno));
			rval = 1;
			break;
		case FTS_ERR:			/* Warn, continue. */
		case FTS_NS:
			warnx("%s: %s", p->fts_path, strerror(p->fts_errno));
			rval = 1;
			continue;
		case FTS_SL:
		case FTS_SLNONE:
			if (!hflag)
				continue;
			/*FALLTHROUGH*/
		default:
			break;
		}

		if ((hflag ? lchown(p->fts_accpath, uid, gid) :
		     chown(p->fts_accpath, uid, gid)) && !fflag) {
			warn("%s", p->fts_path);
			rval = 1;
		}
	}
	if (errno)
		err(1, "fts_read");
	exit(rval);
}

void
a_gid(s)
	char *s;
{
	struct group *gr;
	char *ep;
	u_long ul;

	if (*s == '\0')			/* Argument was "gid[:.]". */
		return;

	if ((gr = getgrnam(s)) != NULL) {
		gid = gr->gr_gid;
	} else {
		if ((ul = strtoul(s, &ep, 10)) == ULONG_MAX)
			err(1, "%s", s);
		if (*ep != '\0')
			errx(1, "%s: invalid group name", s);
		gid = (gid_t)ul;
	}
}

void
a_uid(s)
	char *s;
{
	struct passwd *pw;
	char *ep;
	u_long ul;

	if (*s == '\0')			/* Argument was "gid[:.]". */
		return;

	if ((pw = getpwnam(s)) != NULL) {
		uid = pw->pw_uid;
	} else {
		if ((ul = strtoul(s, &ep, 10)) == ULONG_MAX)
			err(1, "%s", s);
		if (*ep != '\0')
			errx(1, "%s: invalid user name", s);
		uid = (uid_t)ul;
	}
}

void
usage()
{

	(void)fprintf(stderr,
	    "usage: %s [-R [-H | -L | -P]] [-f] [-h] %s file ...\n",
	    __progname, ischown ? "[owner][:group]" : "group");
	exit(1);
}
@


1.12
log
@remove unneeded flag
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.11 1999/09/17 14:58:42 kstailey Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.11 1999/09/17 14:58:42 kstailey Exp $";
@


1.11
log
@fix usage() string
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.10 1997/09/20 12:44:29 deraadt Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.10 1997/09/20 12:44:29 deraadt Exp $";
d79 1
a79 1
	int Hflag, Lflag, Pflag, ch, fts_options, hflag, rval;
d86 1
a86 1
	Hflag = Lflag = Pflag = hflag = 0;
d91 1
a91 1
			Lflag = Pflag = 0;
d95 1
a95 1
			Hflag = Pflag = 0;
a97 1
			Pflag = 1;
@


1.10
log
@check for : before . ; wosch@@cs.tu-berlin.de
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.9 1997/06/30 06:21:31 millert Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.9 1997/06/30 06:21:31 millert Exp $";
d236 1
a236 1
	    "usage: %s [-R [-H | -L | -P]] [-f] %s file ...\n",
@


1.9
log
@Remove bogus id() function that assumes uid_t and gid_t are of a certain
base type.  Remove unused code and use __progname instead of duncing
around with argv.
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.8 1997/06/30 05:59:06 millert Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.8 1997/06/30 05:59:06 millert Exp $";
d135 4
d140 1
a140 1
		if ((cp = strchr(*argv, '.')) != NULL) {
d143 1
a143 1
		} else
a144 4
		if ((cp = strchr(*argv, ':')) != NULL) {
			*cp++ = '\0';
			a_gid(cp);
		} 
@


1.8
log
@Use u_int32_t not u_long since that's what uid_t and gid_t are.
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.7 1997/06/28 16:41:08 grr Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.7 1997/06/28 16:41:08 grr Exp $";
d63 3
a65 5
void		a_gid __P((char *));
void		a_uid __P((char *));
void		chownerr __P((char *));
u_int32_t	id __P((char *, char *));
void		usage __P((void));
d70 1
a70 1
char *gname, *myname;
d84 1
a84 2
	myname = (cp = strrchr(*argv, '/')) ? cp + 1 : *argv;
	ischown = myname[2] == 'o';
d192 2
d195 1
a195 1
	if (*s == '\0')			/* Argument was "uid[:.]". */
d197 10
a206 2
	gname = s;
	gid = ((gr = getgrnam(s)) == NULL) ? id(s, "group") : gr->gr_gid;
d214 2
d217 1
a217 1
	if (*s == '\0')			/* Argument was "[:.]gid". */
a218 2
	uid = ((pw = getpwnam(s)) == NULL) ? id(s, "user") : pw->pw_uid;
}
d220 9
a228 18
u_int32_t
id(name, type)
	char *name, *type;
{
	u_int32_t val;
	char *ep;

	/*
	 * XXX
	 * We know that uid_t's and gid_t's are unsigned 32bit ints.
	 */
	errno = 0;
	val = (u_int32_t)strtoul(name, &ep, 10);
	if (errno)
		err(1, "%s", name);
	if (*ep != '\0')
		errx(1, "%s: invalid %s name", name, type);
	return (val);
d234 1
d237 1
a237 1
	    myname, ischown ? "[owner][:group]" : "group");
@


1.7
log
@same missing locale.h problem as chmod
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.6 1997/06/27 19:02:09 deraadt Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.6 1997/06/27 19:02:09 deraadt Exp $";
d63 5
a67 5
void	a_gid __P((char *));
void	a_uid __P((char *));
void	chownerr __P((char *));
u_long	id __P((char *, char *));
void	usage __P((void));
d213 1
a213 1
u_long
d217 1
a217 1
	u_long val;
d222 1
a222 1
	 * We know that uid_t's and gid_t's are unsigned longs.
d225 1
a225 1
	val = strtoul(name, &ep, 10);
@


1.6
log
@setlocale; kleink
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.5 1997/05/31 06:14:29 deraadt Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.5 1997/05/31 06:14:29 deraadt Exp $";
d61 1
@


1.5
log
@s/illegal/invalid/; jtc
@
text
@d1 1
a1 1
/*	$OpenBSD: chown.c,v 1.4 1997/01/26 05:54:28 downsj Exp $	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.4 1997/01/26 05:54:28 downsj Exp $";
d83 2
@


1.4
log
@Enable -h for calling lchown(2) instead of chown(2), and fix rcs ids.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.3 1997/01/17 07:13:57 millert Exp $";
d226 1
a226 1
		errx(1, "%s: illegal %s name", name, type);
@


1.3
log
@r?index -> strr?chr
@
text
@d1 2
d44 1
a44 1
static char *rcsid = "$Id: chown.c,v 1.2 1997/01/15 23:43:52 millert Exp $";
a107 7
			/*
			 * In System V (and probably POSIX.2) the -h option
			 * causes chown/chgrp to change the owner/group of
			 * the symbolic link.  4.4BSD's symbolic links don't
			 * have owners/groups, so it's an undocumented noop.
			 * Do syntax checking, though.
			 */
d167 1
a167 1
		case FTS_SL:			/* Ignore. */
d169 3
a171 6
			/*
			 * The only symlinks that end up here are ones that
			 * don't point to anything and ones that we found
			 * doing a physical walk.
			 */
			continue;
d176 2
a177 1
		if (chown(p->fts_accpath, uid, gid) && !fflag) {
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d42 1
a42 1
static char *rcsid = "$Id: chown.c,v 1.1.1.1 1995/10/18 08:47:29 deraadt Exp $";
d81 1
a81 1
	myname = (cp = rindex(*argv, '/')) ? cp + 1 : *argv;
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char *rcsid = "$Id: chown.c,v 1.7 1995/06/03 07:01:19 jtc Exp $";
d85 1
a85 1
	while ((ch = getopt(argc, argv, "HLPRfh")) != EOF)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
