head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.4
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.22.0.8
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.30
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.28
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.24
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.22
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.20
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.18
	OPENBSD_5_0:1.18.0.16
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.14
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.12
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.8
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.15.0.6
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.4
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.23
date	2017.06.14.16.32.11;	author anton;	state Exp;
branches;
next	1.22;
commitid	zTvCzQkyx0pOFxAm;

1.22
date	2015.12.28.16.27.28;	author jung;	state Exp;
branches;
next	1.21;
commitid	R1vRwqqjc2o5F4FT;

1.21
date	2015.12.14.02.56.07;	author sunil;	state Exp;
branches;
next	1.20;
commitid	RLiKnVFmyVOUyN4f;

1.20
date	2015.10.12.22.01.08;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	6hPoG2Q36Ycw6Lqb;

1.19
date	2014.10.08.04.27.32;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	hO8HN3uvQWIg7kNm;

1.18
date	2007.11.06.14.39.19;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.02.15.19.39;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.06.03.38.14;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.09.01.24.26;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.08.23.19.32;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.08.21.29.45;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.20.15.29.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.09.11.05.22;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.28.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.08.00.47.52;	author jakob;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.10.05.34.32;	author imp;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.10.02.46.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.12.17.05.06.28;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	99.09.28.15.25.45;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	99.08.02.21.13.22;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	99.08.02.20.42.24;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	99.08.02.20.25.47;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	99.08.02.19.50.08;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove main() prototype and unused envp argument.

ok deraadt@@ martijn@@
@
text
@/*	$OpenBSD: mailwrapper.c,v 1.22 2015/12/28 16:27:28 jung Exp $	*/
/*	$NetBSD: mailwrapper.c,v 1.2 1999/02/20 22:10:07 thorpej Exp $	*/

/*
 * Copyright (c) 1998
 * 	Perry E. Metzger.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgment:
 *	This product includes software developed for the NetBSD Project
 *	by Perry E. Metzger.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <syslog.h>
#include <unistd.h>
#include <util.h>

#define _PATH_MAILERCONF	"/etc/mailer.conf"
#define _PATH_DEFAULTMTA	"/usr/sbin/smtpctl"

struct arglist {
	size_t argc, maxc;
	char **argv;
};

static void initarg(struct arglist *);
static void addarg(struct arglist *, const char *);

extern const char *__progname;	/* from crt0.o */

static void
initarg(struct arglist *al)
{
	al->argc = 0;
	al->maxc = 10;
	if ((al->argv = calloc(al->maxc, sizeof(char *))) == NULL)
		err(1, "malloc");
}

static void
addarg(struct arglist *al, const char *arg)
{
	if (al->argc == al->maxc) {
		al->maxc <<= 1;
		al->argv = reallocarray(al->argv, al->maxc, sizeof(char *));
		if (al->argv == NULL)
			err(1, "realloc");
	}

	al->argv[al->argc++] = (char *)arg;
}

int
main(int argc, char *argv[])
{
	FILE *config;
	char *line, *cp, *from, *to, *ap;
	const char *progname;
	size_t len, lineno = 0;
	struct arglist al;

	if (pledge("stdio rpath exec", NULL) == -1)
		err(1, "pledge");

	/* change __progname to mailwrapper so we get sensible error messages */
	progname = __progname;
	__progname = "mailwrapper";

	initarg(&al);
	for (len = 0; len < argc; len++)
		addarg(&al, argv[len]);

	config = fopen(_PATH_MAILERCONF, "r");

	if (pledge("stdio exec", NULL) == -1)
		err(1, "pledge");

	if (config == NULL) {
		addarg(&al, NULL);
		openlog(__progname, LOG_PID, LOG_MAIL);
		syslog(LOG_INFO, "cannot open %s, using %s as default MTA",
		    _PATH_MAILERCONF, _PATH_DEFAULTMTA);
		closelog();
		execv(_PATH_DEFAULTMTA, al.argv);
		err(1, "cannot exec %s", _PATH_DEFAULTMTA);
		/*NOTREACHED*/
	}

	for (;;) {
		if ((line = fparseln(config, &len, &lineno, NULL, 0)) == NULL) {
			if (feof(config))
				errx(1, "no mapping in %s", _PATH_MAILERCONF);
			err(1, "fparseln");
		}

#define	WS	" \t\n"
		cp = line;

		cp += strspn(cp, WS);
		if (cp[0] == '\0') {
			/* empty line */
			free(line);
			continue;
		}

		if ((from = strsep(&cp, WS)) == NULL || cp == NULL)
			goto parse_error;

		cp += strspn(cp, WS);

		if ((to = strsep(&cp, WS)) == NULL)
			goto parse_error;

		if (strcmp(from, progname) == 0) {
			for (ap = strsep(&cp, WS); ap != NULL;
			    ap = strsep(&cp, WS))
				if (*ap)
					addarg(&al, ap);
			break;
		}

		free(line);
	}

	(void)fclose(config);

	addarg(&al, NULL);

	execv(to, al.argv);
	err(1, "cannot exec %s", to);
	/*NOTREACHED*/
parse_error:
	errx(1, "parse error in %s at line %lu",
	    _PATH_MAILERCONF, (u_long)lineno);
	/*NOTREACHED*/
}
@


1.22
log
@remove unused copy argument from addarg()

diff from Serguey Parkhomovsky via tech@@

ok sunil millert
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.21 2015/12/14 02:56:07 sunil Exp $	*/
a50 2
int main(int, char *[], char *[]);

d79 1
a79 1
main(int argc, char *argv[], char *envp[])
d109 1
a109 1
		execve(_PATH_DEFAULTMTA, al.argv, envp);
d154 1
a154 1
	execve(to, al.argv, envp);
@


1.21
log
@Update default MTA reference to smtpd(8). Rectify documentation of
fallback behaviour when configuration file is missing.

Documentation bits from Serguey Parkhomovsky.

Ok jung@@ "if the fallback code stays"
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.20 2015/10/12 22:01:08 deraadt Exp $	*/
d54 1
a54 1
static void addarg(struct arglist *, const char *, int);
d68 1
a68 1
addarg(struct arglist *al, const char *arg, int copy)
d76 2
a77 5
	if (copy) {
		if ((al->argv[al->argc++] = strdup(arg)) == NULL)
			err(1, "strdup");
	} else
		al->argv[al->argc++] = (char *)arg;
d98 1
a98 1
		addarg(&al, argv[len], 0);
d106 1
a106 1
		addarg(&al, NULL, 0);
d145 1
a145 1
					addarg(&al, ap, 0);
d154 1
a154 1
	addarg(&al, NULL, 0);
@


1.20
log
@surprisingly, this can pledge "stdio rpath exec" right at start. once
the config file is opened, it can pledge "stdio exec", and be on its
merry way to start the real MTA
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.19 2014/10/08 04:27:32 deraadt Exp $	*/
d44 1
a44 1
#define _PATH_DEFAULTMTA	"/usr/libexec/sendmail/sendmail"
@


1.19
log
@simple reallocarray() use; ok doug
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.18 2007/11/06 14:39:19 otto Exp $	*/
d92 3
d103 6
a108 1
	if ((config = fopen(_PATH_MAILERCONF, "r")) == NULL) {
@


1.18
log
@avoid coredump when ther;s only one token on a line; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.17 2007/09/02 15:19:39 deraadt Exp $	*/
d72 1
a72 1
		al->argv = realloc(al->argv, al->maxc * sizeof(char *));
@


1.17
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.16 2004/07/06 03:38:14 millert Exp $	*/
d128 1
a128 1
		if ((from = strsep(&cp, WS)) == NULL)
@


1.16
log
@Back out rev 1.2 as it doesn't make sense--since we exit on failure
there is no need to save the old value of the pointer we are
realloc()ing.  Based on a diff from Andrey Matveev.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.15 2003/03/09 01:24:26 millert Exp $	*/
d63 1
a63 1
	if ((al->argv = malloc(al->maxc * sizeof(char *))) == NULL)
@


1.15
log
@As pointed out by Perry, mailwrapper is never invoked directly,
err/warn will show names like sendmail, mailq, etc which is confusing.
However, prefixing "mailwrapper" to the string passed to err/warn
is ugly too.  The least evil alternative seems to be to stash the
value of __progname for checking and assign "mailwrapper" to __progname.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.14 2003/03/08 23:19:32 millert Exp $	*/
a69 2
	char **argv2;

d72 2
a73 6

		if ((argv2 = realloc(al->argv,
		    al->maxc * sizeof(char *))) == NULL) {
			if (al->argv)
				free(al->argv);
			al->argv = NULL;
a74 3
		} else {
			al->argv = argv2;
		}
@


1.14
log
@Bleah, someone beat me to this but I have some minor chages
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.12 2002/12/20 15:29:54 millert Exp $	*/
d97 1
d101 4
d111 1
a111 1
		openlog("mailwrapper", LOG_PID, LOG_MAIL);
d145 1
a145 1
		if (strcmp(from, __progname) == 0) {
@


1.13
log
@fix err/errx uses; andrushock@@korovino.net
@
text
@d111 1
a111 1
		err(1, "executing %s", _PATH_DEFAULTMTA);
d156 1
a156 1
	err(1, "executing %s", to);
@


1.12
log
@Don't bother free()ing memory when we are just headed for exit().
Fixes a bug whereby freed memory was used in an error case.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.11 2002/12/09 11:05:22 deraadt Exp $	*/
d64 1
a64 1
		err(1, "mailwrapper");
d80 1
a80 1
			err(1, "mailwrapper");
d87 1
a87 1
			err(1, "mailwrapper");
d107 1
a107 1
		syslog(LOG_INFO, "can't open %s, using %s as default MTA",
d111 1
a111 1
		err(1, "mailwrapper: execing %s", _PATH_DEFAULTMTA);
d118 2
a119 3
				errx(1, "mailwrapper: no mapping in %s",
				    _PATH_MAILERCONF);
			err(1, "mailwrapper");
d156 1
a156 1
	err(1, "mailwrapper: execing %s", to);
d159 1
a159 1
	errx(1, "mailwrapper: parse error in %s at line %lu",
@


1.11
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.10 2002/02/16 21:28:04 millert Exp $	*/
a54 1
static void freearg(struct arglist *, int);
a91 10
static void
freearg(struct arglist *al, int copy)
{
	size_t i;
	if (copy)
		for (i = 0; i < al->argc; i++)
			free(al->argv[i]);
	free(al->argv);
}

a110 1
		freearg(&al, 0);
a156 2
	freearg(&al, 0);
	free(line);
a159 2
	freearg(&al, 0);
	free(line);
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.9 2001/08/08 00:47:52 jakob Exp $	*/
d60 1
a60 2
initarg(al)
	struct arglist *al;
d69 1
a69 4
addarg(al, arg, copy)
	struct arglist *al;
	const char *arg;
	int copy;
d72 1
a72 1
 
d94 1
a94 3
freearg(al, copy)
	struct arglist *al;
	int copy;
d104 1
a104 4
main(argc, argv, envp)
	int argc;
	char *argv[];
	char *envp[];
d154 1
a154 1
			for (ap = strsep(&cp, WS); ap != NULL; 
d156 2
a157 2
			    if (*ap)
				    addarg(&al, ap, 0);
@


1.9
log
@do not free unallocated memory, PR#1989
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.8 2000/01/10 05:34:32 imp Exp $	*/
d51 1
a51 1
int main __P((int, char *[], char *[]));
d53 3
a55 3
static void initarg __P((struct arglist *));
static void addarg __P((struct arglist *, const char *, int));
static void freearg __P((struct arglist *, int));
@


1.8
log
@Place NULL arg on end of argv array only after all other args.  mickey@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.7 2000/01/10 02:46:56 deraadt Exp $	*/
a131 1
		free(line);
@


1.7
log
@extra : in err(); imp
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.6 1999/12/17 05:06:28 mickey Exp $	*/
a123 2
	addarg(&al, NULL, 0);

d125 1
d175 2
@


1.6
log
@terminate an arg vector w/ NULL
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.5 1999/09/28 15:25:45 ho Exp $	*/
d92 1
a92 1
			err(1, "mailwrapper:");
@


1.5
log
@Proper error output.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.4 1999/08/02 21:13:22 jakob Exp $	*/
d123 2
@


1.4
log
@Fallback to sendmail if /etc/mailer.conf is missing.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.3 1999/08/02 20:42:24 jakob Exp $	*/
d132 1
a132 1
		err(1, "mailwrapper: execing %s", to);
@


1.3
log
@Indentation
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.2 1999/08/02 20:25:47 jakob Exp $	*/
d39 1
d44 1
d124 11
a134 2
	if ((config = fopen(_PATH_MAILERCONF, "r")) == NULL)
		err(1, "mailwrapper: can't open %s", _PATH_MAILERCONF);
@


1.2
log
@Fix realloc bug.
@
text
@d1 1
a1 1
/*	$OpenBSD: mailwrapper.c,v 1.1 1999/08/02 19:50:08 jakob Exp $	*/
d76 1
a76 1
	    al->maxc <<= 1;
d78 9
a86 9
	    if ((argv2 = realloc(al->argv,
				 al->maxc * sizeof(char *))) == NULL) {
	      if (al->argv) 
		free(al->argv);
	      al->argv = NULL;
	      err(1, "mailwrapper");
	    } else {
	      al->argv = argv2;
	    }
@


1.1
log
@Integration of mailwrapper (from NetBSD)

"The mailwrapper program is designed to replace /usr/sbin/sendmail and to
invoke an appropriate MTA instead of sendmail(8) based on configuration
information placed in /etc/mailer.conf. This permits the administrator to
configure which MTA is to be invoked on the system at run time."

OK deraadt, millert
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 2
d77 10
a86 3
	    if ((al->argv = realloc(al->argv,
		al->maxc * sizeof(char *))) == NULL)
		    err(1, "mailwrapper");
@

