head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.26
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.22
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.20
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.18
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.16
	OPENBSD_5_0:1.9.0.14
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.03.12.18.17.27;	author tedu;	state dead;
branches;
next	1.9;

1.9
date	2008.06.02.19.06.17;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.17.16.28.43;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.28.16.24.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.01.04.08.46;	author jsg;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.26.22.22.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.25.21.10.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.02.06.42.29;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.30.19.09.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Are they going to help?
No.
Well, then tell them to stay out of the way.

ok deraadt
@
text
@/*	$OpenBSD: spray.c,v 1.9 2008/06/02 19:06:17 deraadt Exp $	*/

/*
 * Copyright (c) 1993 Winning Strategies, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Winning Strategies, Inc.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *	$Id: spray.c,v 1.9 2008/06/02 19:06:17 deraadt Exp $
 */

#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <rpc/rpc.h>
#include <rpcsvc/spray.h>

#ifndef SPRAYOVERHEAD
#define SPRAYOVERHEAD	86
#endif

void usage(void);
void print_xferstats(int, int, double);

/* spray buffer */
char spray_buffer[SPRAYMAX];

/* RPC timeouts */
struct timeval NO_DEFAULT = { -1, -1 };
struct timeval ONE_WAY = { 0, 0 };
struct timeval TIMEOUT = { 25, 0 };

int
main(int argc, char *argv[])
{
	char *progname;
	spraycumul	host_stats;
	sprayarr	host_array;
	CLIENT *cl;
	int c;
	int i;
	int count = 0;
	int delay = 0;
	int length = 0;
	double xmit_time;			/* time to receive data */

	progname = *argv;
	while ((c = getopt(argc, argv, "c:d:l:")) != -1) {
		const char *errstr;

		switch (c) {
		case 'c':
			count = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "number of packets is %s: %s",
				    errstr, optarg);
			break;
		case 'd':
			delay = strtonum(optarg, 0, INT_MAX, &errstr);
			if (errstr)
				errx(1, "delay is %s: %s", errstr, optarg);
			break;
		case 'l':
			length = strtonum(optarg, SPRAYOVERHEAD, SPRAYMAX,
			    &errstr);
			if (errstr)
				errx(1, "length is %s: %s", errstr, optarg);
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 1) {
		usage();
		/* NOTREACHED */
	}


	/* Correct packet length. */
	if (length > SPRAYMAX) {
		length = SPRAYMAX;
	} else if (length < SPRAYOVERHEAD) {
		length = SPRAYOVERHEAD;
	} else {
		/* The RPC portion of the packet is a multiple of 32 bits. */
		length -= SPRAYOVERHEAD - 3;
		length &= ~3;
		length += SPRAYOVERHEAD;
	}


	/*
	 * The default value of count is the number of packets required
	 * to make the total stream size 100000 bytes.
	 */
	if (!count) {
		count = 100000 / length;
	}

	/* Initialize spray argument */
	host_array.sprayarr_len = length - SPRAYOVERHEAD;
	host_array.sprayarr_val = spray_buffer;

	/* create connection with server */
	cl = clnt_create(*argv, SPRAYPROG, SPRAYVERS, "udp");
	if (cl == NULL) {
		clnt_pcreateerror(progname);
		exit(1);
	}

	/*
	 * For some strange reason, RPC 4.0 sets the default timeout,
	 * thus timeouts specified in clnt_call() are always ignored.
	 *
	 * The following (undocumented) hack resets the internal state
	 * of the client handle.
	 */
	clnt_control(cl, CLSET_TIMEOUT, (caddr_t)&NO_DEFAULT);


	/* Clear server statistics */
	if (clnt_call(cl, SPRAYPROC_CLEAR, xdr_void, NULL, xdr_void, NULL,
	    TIMEOUT) != RPC_SUCCESS) {
		clnt_perror(cl, progname);
		exit(1);
	}


	/* Spray server with packets */
	printf ("sending %d packets of lnth %d to %s ...", count, length, *argv);
	fflush (stdout);

	for (i = 0; i < count; i++) {
		clnt_call(cl, SPRAYPROC_SPRAY, xdr_sprayarr, &host_array,
		    xdr_void, NULL, ONE_WAY);

		if (delay)
			usleep(delay);
	}


	/* Collect statistics from server */
	if (clnt_call(cl, SPRAYPROC_GET, xdr_void, NULL, xdr_spraycumul,
	    &host_stats, TIMEOUT) != RPC_SUCCESS) {
		clnt_perror(cl, progname);
		exit(1);
	}

	xmit_time = host_stats.clock.sec +
	    (host_stats.clock.usec / 1000000.0);

	printf ("\n\tin %.2f seconds elapsed time\n", xmit_time);

	/* report dropped packets */
	if (host_stats.counter != count) {
		int packets_dropped = count - host_stats.counter;

		printf("\t%d packets (%.2f%%) dropped\n",
		    packets_dropped,
		    100.0 * packets_dropped / count );
	} else
		printf("\tno packets dropped\n");

	printf("Sent:");
	print_xferstats(count, length, xmit_time);

	printf("Rcvd:");
	print_xferstats(host_stats.counter, length, xmit_time);

	exit (0);
}


void
print_xferstats(int packets, int packetlen, double xfertime)
{
	int datalen;
	double pps;		/* packets per second */
	double bps;		/* bytes per second */

	datalen = packets * packetlen;
	pps = packets / xfertime;
	bps = datalen / xfertime;

	printf("\t%.0f packets/sec, ", pps);

	if (bps >= 1024)
		printf ("%.1fK ", bps / 1024);
	else
		printf ("%.0f ", bps);

	printf("bytes/sec\n");
}


void
usage(void)
{
	fprintf(stderr,
	    "usage: spray [-c count] [-d delay] [-l length] host\n");
	exit(1);
}
@


1.9
log
@spray takes no additional arguments; from ferdek.y.no-ip.pl
@
text
@d1 1
a1 1
/*	$OpenBSD: spray.c,v 1.8 2008/03/17 16:28:43 sobrado Exp $	*/
d32 1
a32 1
 *	$Id: spray.c,v 1.8 2008/03/17 16:28:43 sobrado Exp $
@


1.8
log
@sort options

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: spray.c,v 1.7 2005/09/28 16:24:43 deraadt Exp $	*/
d32 1
a32 1
 *	$Id: spray.c,v 1.7 2005/09/28 16:24:43 deraadt Exp $
d231 1
a231 1
	    "usage: spray [-c count] [-d delay] [-l length] host ...\n");
@


1.7
log
@use more strtonum(); from mkb@@crypt.org.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: spray.c,v 1.6 2004/10/01 04:08:46 jsg Exp $	*/
d32 1
a32 1
 *	$Id: spray.c,v 1.6 2004/10/01 04:08:46 jsg Exp $
d230 2
a231 1
	fprintf(stderr, "usage: spray [-c count] [-l length] [-d delay] host\n");
@


1.6
log
@add some missing $, ok djm@@ 'That looks fine to me' millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 1
 *	$Id: spray.c,v 1.5 2003/06/26 22:22:33 deraadt Exp $
d35 3
d76 2
d80 4
a83 1
			count = atoi(optarg);
d86 3
a88 1
			delay = atoi(optarg);
d91 4
a94 1
			length = atoi(optarg);
@


1.5
log
@proto
@
text
@d1 2
d32 1
a32 1
 *	$Id: spray.c,v 1.4 2003/06/25 21:10:19 deraadt Exp $
@


1.4
log
@protos
@
text
@d30 1
a30 1
 *	$Id: spray.c,v 1.3 2002/06/02 06:42:29 deraadt Exp $
d44 1
a44 1
void usage();
@


1.3
log
@minor KNF
@
text
@d30 1
a30 1
 *	$Id: spray.c,v 1.2 2002/05/30 19:09:05 deraadt Exp $
d44 2
a45 2
void usage ();
void print_xferstats ();
d56 1
a56 3
main(argc, argv)
	int argc;
	char **argv;
d191 1
a191 4
print_xferstats(packets, packetlen, xfertime)
	int packets;
	int packetlen;
	double xfertime;
d213 1
a213 1
usage ()
@


1.2
log
@minor KNF
@
text
@d30 1
a30 1
 *	$Id: spray.c,v 1.1.1.1 1995/10/18 08:48:21 deraadt Exp $
d152 2
a153 1
		clnt_call(cl, SPRAYPROC_SPRAY, xdr_sprayarr, &host_array, xdr_void, NULL, ONE_WAY);
d155 1
a155 1
		if (delay) {
a156 1
		}
d161 2
a162 1
	if (clnt_call(cl, SPRAYPROC_GET, xdr_void, NULL, xdr_spraycumul, &host_stats, TIMEOUT) != RPC_SUCCESS) {
d168 1
a168 1
			(host_stats.clock.usec / 1000000.0);
a171 1

d177 3
a179 3
			packets_dropped,
			100.0 * packets_dropped / count );
	} else {
a180 1
	}
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: spray.c,v 1.3 1994/12/23 16:42:47 cgd Exp $
a120 1
	
a128 1

d130 2
a131 2
	 * For some strange reason, RPC 4.0 sets the default timeout, 
	 * thus timeouts specified in clnt_call() are always ignored.  
d140 2
a141 1
	if (clnt_call(cl, SPRAYPROC_CLEAR, xdr_void, NULL, xdr_void, NULL, TIMEOUT) != RPC_SUCCESS) {
d188 1
a188 1
	
d209 1
a209 1
	if (bps >= 1024) 
d213 1
a213 1
	
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
