head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.01.24.04.24.25;	author benno;	state Exp;
branches;
next	1.9;
commitid	PUkGTVeidQeu8XjZ;

1.9
date	2017.01.23.08.40.45;	author benno;	state Exp;
branches;
next	1.8;
commitid	XAsrNmbaOlDjCj8g;

1.8
date	2016.09.02.14.02.48;	author benno;	state Exp;
branches;
next	1.7;
commitid	ZCYScyTMvHGcp7WF;

1.7
date	2016.06.06.15.56.22;	author benno;	state Exp;
branches;
next	1.6;
commitid	0LZuXmExthFwhWZd;

1.6
date	2014.11.03.07.40.31;	author bluhm;	state Exp;
branches;
next	1.5;
commitid	KxzfvwQ64ayFBEwr;

1.5
date	2009.11.02.20.20.54;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.28.18.46.56;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.25.08.40.33;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.08.15.36.28;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.10
log
@sync log.c from relayd et al to ospfd.

there is still a little difference regarding handling of the verbosity
value that will be handled later.

ok claudio@@
@
text
@/*	$OpenBSD: log.h,v 1.18 2016/09/02 14:00:29 benno Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>
#include <sys/cdefs.h>

void	log_init(int, int);
void	log_procinit(const char *);
void	log_setverbose(int);
int	log_getverbose(void);
void	log_warn(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
	    __attribute__((__format__ (printf, 2, 0)));
__dead void fatal(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
__dead void fatalx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));

#endif /* LOG_H */
@


1.9
log
@copy log.c/h from bgpd.
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.8 2016/09/02 14:02:48 benno Exp $ */
d25 20
a44 20
extern const char	*log_procname;

void	 log_init(int);
void	 log_verbose(int);
void	 logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	 vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	 log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 fatal(const char *, ...) __dead
		__attribute__((__format__ (printf, 1, 2)));
void	 fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
@


1.8
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@, feedback from henning@@, deraadt@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.7 2016/06/06 15:56:22 benno Exp $ */
d41 2
a42 2
void	 fatal(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
@


1.7
log
@add format attributes to the proper functions and then fix the
warning in rde.c
ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.6 2014/11/03 07:40:31 bluhm Exp $ */
d19 2
a20 2
#ifndef _LOG_H_
#define	_LOG_H_
d23 1
d25 5
a29 3
void	log_init(int);
void	log_verbose(int);
void	logit(int, const char *, ...)
d31 1
a31 1
void	vlog(int, const char *, va_list)
d33 1
a33 1
void	log_warn(const char *, ...)
d35 1
a35 1
void	log_warnx(const char *, ...)
d37 1
a37 1
void	log_info(const char *, ...)
d39 1
a39 1
void	log_debug(const char *, ...)
d41 1
a41 1
void	fatal(const char *) __dead
d43 1
a43 1
void	fatalx(const char *) __dead
d46 1
a46 1
#endif /* _LOG_H_ */
@


1.6
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.5 2009/11/02 20:20:54 claudio Exp $ */
d26 16
a41 8
void	logit(int, const char *, ...);
void	vlog(int, const char *, va_list);
void	log_warn(const char *, ...);
void	log_warnx(const char *, ...);
void	log_info(const char *, ...);
void	log_debug(const char *, ...);
void	fatal(const char *) __dead;
void	fatalx(const char *) __dead;
@


1.5
log
@Implement IMSG_CTL_LOG_VERBOSE to enable or disable debug logging on runtime.
It always annoyed me that in case of a problem I had to restart the ospf in
forground debug mode and by doing so losing all routes at least twice.
OK henning, sthen, michele
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.4 2007/09/28 18:46:56 claudio Exp $ */
d26 1
@


1.4
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2006/04/25 08:40:33 claudio Exp $ */
d25 1
@


1.3
log
@Mark fatal and fatalx as __dead from a similar diff for bgpd from deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.2 2006/03/08 15:36:28 claudio Exp $ */
d24 8
a31 8
void	 log_init(int);
void	 vlog(int, const char *, va_list);
void	 log_warn(const char *, ...);
void	 log_warnx(const char *, ...);
void	 log_info(const char *, ...);
void	 log_debug(const char *, ...);
void	 fatal(const char *) __dead;
void	 fatalx(const char *) __dead;
@


1.2
log
@Move procnames from log.h to log.c it is only used there.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d30 2
a31 2
void	 fatal(const char *);
void	 fatalx(const char *);
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a31 6

static const char * const procnames[] = {
	"parent",
	"ospfe",
	"rde"
};
@

