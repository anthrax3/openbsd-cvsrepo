head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.30
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.22
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.26
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.24
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.20
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.18
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.16
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.14
	OPENBSD_5_0:1.9.0.12
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.10
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.8
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.4
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.11.22.13.09.10;	author claudio;	state Exp;
branches;
next	1.9;
commitid	pxM0r18iZwdhX0Ks;

1.9
date	2009.01.07.21.16.36;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.10.11.12.19.31;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.28.08.19.52;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2007.06.13.17.23.36;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.29.22.08.25;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.26.18.59.14;	author norby;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.12.08.55.39;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.17.53.33;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Improve ABR support especially for self-originated stub networks.
This seems to solve the last issues people reported when using ospfd
in multiple areas. OK sthen@@ prodding by deraadt@@
@
text
@/*	$OpenBSD: area.c,v 1.9 2009/01/07 21:16:36 claudio Exp $ */

/*
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/tree.h>
#include <err.h>
#include <stdlib.h>

#include "ospf.h"
#include "ospfd.h"
#include "ospfe.h"
#include "rde.h"
#include "log.h"

struct area *
area_new(void)
{
	struct area *area = NULL;

	if ((area = calloc(1, sizeof(*area))) == NULL)
		errx(1, "area_new: calloc");

	LIST_INIT(&area->iface_list);
	LIST_INIT(&area->nbr_list);
	RB_INIT(&area->lsa_tree);
	SIMPLEQ_INIT(&area->redist_list);

	return (area);
}

int
area_del(struct area *area)
{
	struct iface	*iface = NULL;
	struct vertex	*v, *nv;
	struct rde_nbr	*n;
	struct redistribute *r;

	/* area is removed so neutralize the demotion done by the area */
	if (area->active == 0)
		ospfe_demote_area(area, 1);

	/* clean lists */
	while ((iface = LIST_FIRST(&area->iface_list)) != NULL) {
		LIST_REMOVE(iface, entry);
		if_del(iface);
	}

	while ((n = LIST_FIRST(&area->nbr_list)) != NULL)
		rde_nbr_del(n);

	for (v = RB_MIN(lsa_tree, &area->lsa_tree); v != NULL; v = nv) {
		nv = RB_NEXT(lsa_tree, &area->lsa_tree, v);
		vertex_free(v);
	}

	while ((r = SIMPLEQ_FIRST(&area->redist_list)) != NULL) {
		SIMPLEQ_REMOVE_HEAD(&area->redist_list, entry);
		free(r);
	}

	free(area);

	return (0);
}

struct area *
area_find(struct ospfd_conf *conf, struct in_addr area_id)
{
	struct area	*area;

	LIST_FOREACH(area, &conf->area_list, entry) {
		if (area->id.s_addr == area_id.s_addr) {
			return (area);
		}
	}

	return (NULL);
}

void
area_track(struct area *area)
{
	int		old = area->active;
	struct iface	*iface;

	area->active = 0;
	LIST_FOREACH(iface, &area->iface_list, entry) {
		if (iface->state & IF_STA_DOWN)
			continue;
		area->active = 1;
		break;
	}

	if (area->active != old) {
		ospfe_imsg_compose_rde(IMSG_AREA_CHANGE, area->id.s_addr, 0,
		    &area->active, sizeof(area->active));
		ospfe_demote_area(area, old == 0);
	}
}

int
area_border_router(struct ospfd_conf *conf)
{
	struct area	*area;
	int		 active = 0;

	LIST_FOREACH(area, &conf->area_list, entry)
		if (area->active)
			active++;

	return (active > 1);
}

u_int8_t
area_ospf_options(struct area *area)
{
	u_int8_t	opt = 0;

	if (area && !area->stub)
		opt |= OSPF_OPTION_E;

	return (opt);
}
@


1.9
log
@Full stub area support. This allows ABRs to announce a default network
summary LSA into stub areas so that these routers are able to reach the
outside of the area.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.8 2007/10/11 12:19:31 claudio Exp $ */
d97 1
a97 1
area_track(struct area *area, int state)
d99 2
a100 1
	int	old = area->active;
d102 7
a108 6
	if (state & NBR_STA_FULL)
		area->active++;
	else if (area->active == 0)
		fatalx("area_track: area already inactive");
	else
		area->active--;
d110 3
a112 1
	if (area->active == 0 || old == 0)
d114 1
d124 1
a124 1
		if (area->active > 0)
@


1.8
log
@Bye bye global ospf options. OSPF options are per area (at least the one
flag that we set). So introduce a area_ospf_options() function that will
return the correct flags for each area. This makes stub area support a lot
easier.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.7 2007/09/28 08:19:52 claudio Exp $ */
d41 1
d52 1
d70 5
@


1.7
log
@Cleanup some #includes plus some minor other cleanup. OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.6 2007/06/13 17:23:36 claudio Exp $ */
d118 10
@


1.6
log
@Don't RB_REMOVE() vertices in area_del() this will be done by vertex_free().
With this the RDE no longer crashes on shutdown.
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.5 2007/05/29 22:08:25 claudio Exp $ */
a19 1
#include <sys/socket.h>
a20 3

#include <netinet/in.h>
#include <arpa/inet.h>
d48 3
a50 3
	struct iface		*iface = NULL;
	struct vertex		*v, *nv;
	struct rde_nbr		*n;
d92 1
a92 1
	int			old = area->active;
d97 1
a97 1
		fatalx("king bula sez: area already inactive");
@


1.5
log
@Demote support for ospfd. It is possible to specify a demote group on
interfaces and areas. With this carp setups using ospfd are more reliable
because we can fail over if the OSPF connectivity is (partially) lost.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.4 2005/05/26 18:59:14 norby Exp $ */
a70 1
		RB_REMOVE(lsa_tree, &area->lsa_tree, v);
@


1.4
log
@kill area debugging stuff.
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.3 2005/05/12 08:55:39 claudio Exp $ */
d56 4
d97 2
d105 3
@


1.3
log
@If activly connected to more than one area set B flag in the self-originated
router LSA. To do that correctly we need to track the number of active
neighbors for each area. If the routers ABR status changes all router LSA
need to be updated via orig_rtr_lsa_all().
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.2 2005/01/28 17:53:33 norby Exp $ */
a55 2
	log_debug("area_del: area ID %s", inet_ntoa(area->id));

a86 1
	log_debug("area_find: area ID %s not found", inet_ntoa(area_id));
@


1.2
log
@Change my email address to the OpenBSD one since Ericsson has nothing to
do with this software, just happend to be my only valid email address at
the time.
@
text
@d1 1
a1 1
/*	$OpenBSD: area.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d81 1
a81 1
	struct area *area = NULL;
d92 25
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2004, 2005 Esben Norby <esben.norby@@ericsson.com>
@

