head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.14
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.12
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.16
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.14
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.10
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.8
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.15.0.6
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.6
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4;
locks; strict;
comment	@ * @;


1.21
date	2014.11.18.20.54.29;	author krw;	state Exp;
branches;
next	1.20;
commitid	yCis8OrOsfixbKpI;

1.20
date	2011.03.08.10.56.02;	author claudio;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.13.22.51.56;	author sthen;	state Exp;
branches;
next	1.17;

1.17
date	2010.02.16.18.10.08;	author claudio;	state Exp;
branches;
next	1.16;

1.16
date	2010.02.01.10.22.06;	author jacekm;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.31.08.55.00;	author claudio;	state Exp;
branches;
next	1.14;

1.14
date	2007.10.11.12.19.31;	author claudio;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.09.14.16.34;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.02.20.46.34;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.12.18.18.24;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.17.20.03.35;	author msf;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.30.21.07.58;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2005.06.13.08.22.39;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.27.05.56.34;	author norby;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.26.19.54.49;	author norby;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.05.13.01.21;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.09.15.51.30;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.07.05.50.59;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.17.53.33;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Nuke more obvious #include duplications.

ok deraadt@@ millert@@ tedu@@
@
text
@/*	$OpenBSD: hello.c,v 1.20 2011/03/08 10:56:02 claudio Exp $ */

/*
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/time.h>
#include <stdlib.h>
#include <string.h>
#include <event.h>

#include "ospfd.h"
#include "ospf.h"
#include "log.h"
#include "ospfe.h"

extern struct ospfd_conf	*oeconf;

/* hello packet handling */
int
send_hello(struct iface *iface)
{
	struct sockaddr_in	 dst;
	struct hello_hdr	 hello;
	struct nbr		*nbr;
	struct ibuf		*buf;
	int			 ret;

	dst.sin_family = AF_INET;
	dst.sin_len = sizeof(struct sockaddr_in);

	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_BROADCAST:
		inet_aton(AllSPFRouters, &dst.sin_addr);
		break;
	case IF_TYPE_NBMA:
	case IF_TYPE_POINTOMULTIPOINT:
		log_debug("send_hello: type %s not supported, interface %s",
		    if_type_name(iface->type), iface->name);
		return (-1);
	case IF_TYPE_VIRTUALLINK:
		dst.sin_addr = iface->dst;
		break;
	default:
		fatalx("send_hello: unknown interface type");
	}

	if ((buf = ibuf_dynamic(PKG_DEF_SIZE,
	    IP_MAXPACKET - sizeof(struct ip))) == NULL)
		fatal("send_hello");

	/* OSPF header */
	if (gen_ospf_hdr(buf, iface, PACKET_TYPE_HELLO))
		goto fail;

	/* hello header */
	hello.mask = iface->mask.s_addr;
	hello.hello_interval = htons(iface->hello_interval);
	hello.opts = area_ospf_options(iface->area);
	hello.rtr_priority = iface->priority;
	hello.rtr_dead_interval = htonl(iface->dead_interval);

	if (iface->dr) {
		hello.d_rtr = iface->dr->addr.s_addr;
		iface->self->dr.s_addr = iface->dr->addr.s_addr;
	} else
		hello.d_rtr = 0;
	if (iface->bdr) {
		hello.bd_rtr = iface->bdr->addr.s_addr;
		iface->self->bdr.s_addr = iface->bdr->addr.s_addr;
	} else
		hello.bd_rtr = 0;

	if (ibuf_add(buf, &hello, sizeof(hello)))
		goto fail;

	/* active neighbor(s) */
	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if ((nbr->state >= NBR_STA_INIT) && (nbr != iface->self))
			if (ibuf_add(buf, &nbr->id, sizeof(nbr->id)))
				goto fail;
	}

	/* update authentication and calculate checksum */
	if (auth_gen(buf, iface))
		goto fail;

	ret = send_packet(iface, buf, &dst);
	ibuf_free(buf);
	return (ret);
fail:
	log_warn("send_hello");
	ibuf_free(buf);
	return (-1);
}

void
recv_hello(struct iface *iface, struct in_addr src, u_int32_t rtr_id, char *buf,
    u_int16_t len)
{
	struct hello_hdr	 hello;
	struct nbr		*nbr = NULL, *dr;
	u_int32_t		 nbr_id;
	int			 nbr_change = 0;

	if (len < sizeof(hello) || (len & 0x03)) {
		log_warnx("recv_hello: bad packet size, interface %s",
		    iface->name);
		return;
	}

	memcpy(&hello, buf, sizeof(hello));
	buf += sizeof(hello);
	len -= sizeof(hello);

	if (iface->type != IF_TYPE_POINTOPOINT &&
	    iface->type != IF_TYPE_VIRTUALLINK)
		if (hello.mask != iface->mask.s_addr) {
			log_warnx("recv_hello: invalid netmask, interface %s",
			    iface->name);
			return;
		}

	if (ntohs(hello.hello_interval) != iface->hello_interval) {
		log_warnx("recv_hello: invalid hello-interval %d, "
		    "interface %s", ntohs(hello.hello_interval),
		    iface->name);
		return;
	}

	if (ntohl(hello.rtr_dead_interval) != iface->dead_interval) {
		log_warnx("recv_hello: invalid router-dead-interval %d, "
		    "interface %s", ntohl(hello.rtr_dead_interval),
		    iface->name);
		return;
	}

	if ((hello.opts & OSPF_OPTION_E && iface->area->stub) ||
	    ((hello.opts & OSPF_OPTION_E) == 0 && !iface->area->stub)) {
		log_warnx("recv_hello: ExternalRoutingCapability mismatch, "
		    "interface %s", iface->name);
		return;
	}

	/*
	 * Match router-id, in case of conflict moan and ignore hello.
	 * Only the router-id is compared since the source IP on NBMA,
	 * broadcast and point-to-multipoint interfaces was already
	 * compared in find_iface() and only IPs in the same subnet
	 * are accepted. This is not excatly what the RFC specifies
	 * but works far better.
	 */
	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if (nbr == iface->self) {
			if (nbr->id.s_addr == rtr_id) {
				log_warnx("recv_hello: Router-ID collision on "
				    "interface %s neighbor IP %s", iface->name,
				    inet_ntoa(src));
				return;
			}
			continue;
		}
		if (nbr->id.s_addr == rtr_id)
			break;
	}

	if (!nbr) {
		nbr = nbr_new(rtr_id, iface, 0);
		/* set neighbor parameters */
		nbr->dr.s_addr = hello.d_rtr;
		nbr->bdr.s_addr = hello.bd_rtr;
		nbr->priority = hello.rtr_priority;
		nbr_change = 1;
	}

	/* actually the neighbor address shouldn't be stored on virtual links */
	nbr->addr.s_addr = src.s_addr;
	nbr->options = hello.opts;

	nbr_fsm(nbr, NBR_EVT_HELLO_RCVD);

	while (len >= sizeof(nbr_id)) {
		memcpy(&nbr_id, buf, sizeof(nbr_id));
		if (nbr_id == ospfe_router_id()) {
			/* seen myself */
			if (nbr->state & NBR_STA_PRELIM)
				nbr_fsm(nbr, NBR_EVT_2_WAY_RCVD);
			break;
		}
		buf += sizeof(nbr_id);
		len -= sizeof(nbr_id);
	}

	if (len == 0) {
		nbr_fsm(nbr, NBR_EVT_1_WAY_RCVD);
		/* set neighbor parameters */
		nbr->dr.s_addr = hello.d_rtr;
		nbr->bdr.s_addr = hello.bd_rtr;
		nbr->priority = hello.rtr_priority;
		return;
	}

	if (nbr->priority != hello.rtr_priority) {
		nbr->priority = hello.rtr_priority;
		nbr_change = 1;
	}

	if (iface->state & IF_STA_WAITING &&
	    hello.d_rtr == nbr->addr.s_addr && hello.bd_rtr == 0)
		if_fsm(iface, IF_EVT_BACKUP_SEEN);

	if (iface->state & IF_STA_WAITING && hello.bd_rtr == nbr->addr.s_addr) {
		/*
		 * In case we see the BDR make sure that the DR is around
		 * with a bidirectional (2_WAY or better) connection
		 */
		LIST_FOREACH(dr, &iface->nbr_list, entry)
			if (hello.d_rtr == dr->addr.s_addr &&
			    dr->state & NBR_STA_BIDIR)
				if_fsm(iface, IF_EVT_BACKUP_SEEN);
	}

	if ((nbr->addr.s_addr == nbr->dr.s_addr &&
	    nbr->addr.s_addr != hello.d_rtr) ||
	    (nbr->addr.s_addr != nbr->dr.s_addr &&
	    nbr->addr.s_addr == hello.d_rtr))
		/* neighbor changed from or to DR */
		nbr_change = 1;
	if ((nbr->addr.s_addr == nbr->bdr.s_addr &&
	    nbr->addr.s_addr != hello.bd_rtr) ||
	    (nbr->addr.s_addr != nbr->bdr.s_addr &&
	    nbr->addr.s_addr == hello.bd_rtr))
		/* neighbor changed from or to BDR */
		nbr_change = 1;

	nbr->dr.s_addr = hello.d_rtr;
	nbr->bdr.s_addr = hello.bd_rtr;

	if (nbr_change)
		if_fsm(iface, IF_EVT_NBR_CHNG);

	/* TODO NBMA needs some special handling */
}
@


1.20
log
@Instead of using IBUF_READ_SIZE as upper bound when building various
packets use a better upper bound based on IP_MAXPACKET. Also change
one IBUF_READ_SIZE to READ_BUF_SIZE since that is what the rest of
the code uses. Tested and OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.19 2010/05/26 13:56:08 nicm Exp $ */
a24 1
#include <sys/socket.h>
@


1.19
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.18 2010/05/13 22:51:56 sthen Exp $ */
d67 2
a68 2
	/* XXX IBUF_READ_SIZE */
	if ((buf = ibuf_dynamic(PKG_DEF_SIZE, IBUF_READ_SIZE)) == NULL)
@


1.18
log
@typo: colision->collision
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.17 2010/02/16 18:10:08 claudio Exp $ */
d44 1
a44 1
	struct buf		*buf;
d67 2
a68 2
	/* XXX READ_BUF_SIZE */
	if ((buf = buf_dynamic(PKG_DEF_SIZE, READ_BUF_SIZE)) == NULL)
d93 1
a93 1
	if (buf_add(buf, &hello, sizeof(hello)))
d99 1
a99 1
			if (buf_add(buf, &nbr->id, sizeof(nbr->id)))
d108 1
a108 1
	buf_free(buf);
d112 1
a112 1
	buf_free(buf);
@


1.17
log
@Lets violate the RFC once more. Change the way we map hello packets to
neighbors from using the source IP on broadcast interfaces to using the
router-id all the time. The interface lookup will already check for
matching subnets so there is no conflict possible. This makes ospfd finally
grok router-id changes without freaking out. Additionally whinge when an
other router is using the same router-id instead of failing in a very
horrible way.
OK sthen@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.16 2010/02/01 10:22:06 jacekm Exp $ */
d175 1
a175 1
				log_warnx("recv_hello: Router-ID colision on "
@


1.16
log
@Fix logic error (&& vs. ||), found while looking for inspiration for smtpd
state machine needed by the features that are coming along.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.15 2009/01/31 08:55:00 claudio Exp $ */
d164 17
a180 9
	switch (iface->type) {
	case IF_TYPE_POINTOPOINT:
	case IF_TYPE_VIRTUALLINK:
		/* match router-id */
		LIST_FOREACH(nbr, &iface->nbr_list, entry) {
			if (nbr == iface->self)
				continue;
			if (nbr->id.s_addr == rtr_id)
				break;
d182 2
a183 14
		break;
	case IF_TYPE_BROADCAST:
	case IF_TYPE_NBMA:
	case IF_TYPE_POINTOMULTIPOINT:
		/* match src IP */
		LIST_FOREACH(nbr, &iface->nbr_list, entry) {
			if (nbr == iface->self)
				continue;
			if (nbr->addr.s_addr == src.s_addr)
				break;
		}
		break;
	default:
		fatalx("recv_hello: unknown interface type");
@


1.15
log
@Pass the buffer to send_packet() instead of spliting it up. This removes
some direct access to struct buf internals in the rest of ospfe.
Based on a larger buffer cleanup diff that was OK norby@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.14 2007/10/11 12:19:31 claudio Exp $ */
d125 1
a125 1
	if (len < sizeof(hello) && (len & 0x03)) {
@


1.14
log
@Bye bye global ospf options. OSPF options are per area (at least the one
flag that we set). So introduce a area_ospf_options() function that will
return the correct flags for each area. This makes stub area support a lot
easier.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.13 2006/03/09 14:16:34 claudio Exp $ */
d107 1
a107 1
	ret = send_packet(iface, buf->buf, buf->wpos, &dst);
@


1.13
log
@Correctly warn about unsupported interface types as it is done in other places.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.12 2006/02/02 20:46:34 claudio Exp $ */
d78 1
a78 1
	hello.opts = oeconf->options;
@


1.12
log
@Be less verbose about DR/BDR selection this seems to be rock solid now.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.11 2005/11/12 18:18:24 deraadt Exp $ */
a46 4
	/* XXX READ_BUF_SIZE */
	if ((buf = buf_dynamic(PKG_DEF_SIZE, READ_BUF_SIZE)) == NULL)
		fatal("send_hello");

d57 3
a59 2
		/* XXX not supported */
		break;
d66 4
@


1.11
log
@spacing mostly
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.10 2005/09/17 20:03:35 msf Exp $ */
d231 1
a231 2
	    hello.d_rtr == nbr->addr.s_addr && hello.bd_rtr == 0) {
		log_debug("hello: DR seen with NO BDR");
a232 1
	}
a238 1
		log_debug("hello: BDR seen");
d241 1
a241 3
			    dr->state & NBR_STA_BIDIR) {
				log_debug("hello: BDR seen & DR %s is BIDIR",
				    inet_ntoa(dr->addr));
a242 1
			}
@


1.10
log
@- add get_rtr_id() based on bgpd's get_bgpid()
- remove rtr_id from struct iface we don't need to keep a copy of this value
  per interface
- replace all references to iface->rtr_id.s_addr with calls to ospfe_rtr_id()

ok claudio@@ norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.9 2005/08/30 21:07:58 claudio Exp $ */
a270 1
	return;
@


1.9
log
@Fix one of the most fragile part of ospfd -- the interface election code.
One of the main problems is that the RFC is very unprecise about the process
and so a bit of guessing and "violating" the RFC is needed.
The problem was that on fast restarts ospfd computed wrong DR and BDR
routers.  OK norby@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.8 2005/06/13 08:22:39 claudio Exp $ */
d206 1
a206 1
		if (nbr_id == iface->rtr_id.s_addr) {
@


1.8
log
@Compare neighbor address with DR/BDR from the hello packet and not with
the data from the last hello packet.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.7 2005/05/27 05:56:34 norby Exp $ */
d120 1
a120 1
	struct nbr		*nbr = NULL;
d122 1
a122 1
	int			 twoway = 0, nbr_change = 0;
d189 1
a189 1
	if (!nbr)
d191 6
d208 2
a209 2
			if (nbr->state < NBR_STA_XSTRT)
				twoway = 1;
d231 2
a232 2
	    ((hello.d_rtr == nbr->addr.s_addr && hello.bd_rtr == 0) ||
	    hello.bd_rtr == nbr->addr.s_addr))
d234 16
a265 9

	if (twoway) {
		/*
		 * event 2 way received needs to be delayed after the
		 * interface neighbor change check else the DR and BDR
		 * may not be set correctly.
		 */
		nbr_fsm(nbr, NBR_EVT_2_WAY_RCVD);
	}
@


1.7
log
@Virtual link support.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.6 2005/05/26 19:54:49 norby Exp $ */
d224 3
a226 3
	if (iface->state == IF_STA_WAITING &&
	    ((nbr->dr.s_addr == nbr->addr.s_addr &&
	    nbr->bdr.s_addr == 0) || nbr->bdr.s_addr == nbr->addr.s_addr))
@


1.6
log
@Simplify and cleanup passive interface handling.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.5 2005/04/05 13:01:21 claudio Exp $ */
d61 2
d64 1
a64 3
		/* XXX these networks need to be preconfigured */
		/* dst.sin_addr.s_addr = nbr->addr.s_addr; */
		inet_aton(AllSPFRouters, &dst.sin_addr);
d191 1
@


1.5
log
@Use the dynamic buffer API for packet generation and sending.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.4 2005/02/09 15:51:30 claudio Exp $ */
a45 3

	if (iface->passive)
		return (0);
@


1.4
log
@When sending out hellos, copy the bdr and dr addresses into iface->self.
Without this the election process causes strange results as a router that
announces itself as dr/bdr is prefered over one that doesn't.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.3 2005/02/07 05:50:59 david Exp $ */
d42 1
a42 1
	struct hello_hdr	*hello;
d44 2
a45 3
	char			*buf;
	char			*ptr;
	int			 ret = 0;
d50 2
a51 2
	/* XXX use buffer API instead for better decoupling */
	if ((ptr = buf = calloc(1, READ_BUF_SIZE)) == NULL)
d74 2
a75 2
	gen_ospf_hdr(ptr, iface, PACKET_TYPE_HELLO);
	ptr += sizeof(struct ospf_hdr);
d78 5
a82 6
	hello = (struct hello_hdr *)ptr;
	hello->mask = iface->mask.s_addr;
	hello->hello_interval = htons(iface->hello_interval);
	hello->opts = oeconf->options;
	hello->rtr_priority = iface->priority;
	hello->rtr_dead_interval = htonl(iface->dead_interval);
d85 1
a85 1
		hello->d_rtr = iface->dr->addr.s_addr;
d87 2
a88 1
	}
d90 1
a90 1
		hello->bd_rtr = iface->bdr->addr.s_addr;
d92 5
a96 2
	}
	ptr += sizeof(*hello);
d100 3
a102 9
		if (ptr - buf > iface->mtu - PACKET_HDR) {
			log_warnx("send_hello: too many neighbors on "
			    "interface %s", iface->name);
			break;
		}
		if ((nbr->state >= NBR_STA_INIT) && (nbr != iface->self)) {
			memcpy(ptr, &nbr->id, sizeof(nbr->id));
			ptr += sizeof(nbr->id);
		}
d106 2
a107 5
	auth_gen(buf, ptr - buf, iface);

	if ((ret = send_packet(iface, buf, (ptr - buf), &dst)) == -1)
		log_warnx("send_hello: error sending packet on "
		    "interface %s", iface->name);
d109 2
a110 1
	free(buf);
d112 4
@


1.3
log
@spelling fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.2 2005/01/28 17:53:33 norby Exp $ */
d86 1
a86 1
	if (iface->dr)
d88 3
a90 1
	if (iface->bdr)
d92 2
@


1.2
log
@Change my email address to the OpenBSD one since Ericsson has nothing to
do with this software, just happend to be my only valid email address at
the time.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d212 1
a212 1
		/* set neighbor parameters */ 
d247 1
a247 1
		 * event 2 way recieved needs to be delayed after the
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d5 1
a5 1
 * Copyright (c) 2004, 2005 Esben Norby <esben.norby@@ericsson.com>
@

