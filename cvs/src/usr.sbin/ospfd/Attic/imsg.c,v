head	1.22;
access;
symbols
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.4
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.22
date	2010.05.26.16.44.32;	author nicm;	state dead;
branches;
next	1.21;

1.21
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.07.18.09.39;	author nicm;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.08.18.33.40;	author nicm;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.08.08.30.06;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.07.05.56.25;	author eric;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.07.00.40.46;	author eric;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.06.22.11.25;	author eric;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.06.07.31.26;	author eric;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.06.05.04.12;	author pyr;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.05.19.33.58;	author pyr;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.05.01.19.09;	author pyr;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.04.12.51.01;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.24.16.46.09;	author pyr;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.19.10.03.25;	author henning;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.27.20.07.42;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.10.18.30.47;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.01.18.31.47;	author norby;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.26.15.18.22;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.23.10.46.26;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.09.14.14.01;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@/*	$OpenBSD: imsg.c,v 1.21 2010/05/26 13:56:08 nicm Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "imsg.h"

int	 imsg_get_fd(struct imsgbuf *);

void
imsg_init(struct imsgbuf *ibuf, int fd)
{
	msgbuf_init(&ibuf->w);
	bzero(&ibuf->r, sizeof(ibuf->r));
	ibuf->fd = fd;
	ibuf->w.fd = fd;
	ibuf->pid = getpid();
	TAILQ_INIT(&ibuf->fds);
}

ssize_t
imsg_read(struct imsgbuf *ibuf)
{
	struct msghdr		 msg;
	struct cmsghdr		*cmsg;
	union {
		struct cmsghdr hdr;
		char	buf[CMSG_SPACE(sizeof(int) * 16)];
	} cmsgbuf;
	struct iovec		 iov;
	ssize_t			 n;
	int			 fd;
	struct imsg_fd		*ifd;

	bzero(&msg, sizeof(msg));

	iov.iov_base = ibuf->r.buf + ibuf->r.wpos;
	iov.iov_len = sizeof(ibuf->r.buf) - ibuf->r.wpos;
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((n = recvmsg(ibuf->fd, &msg, 0)) == -1) {
		if (errno != EINTR && errno != EAGAIN) {
			return (-1);
		}
		return (-2);
	}

	ibuf->r.wpos += n;

	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (cmsg->cmsg_level == SOL_SOCKET &&
		    cmsg->cmsg_type == SCM_RIGHTS) {
			fd = (*(int *)CMSG_DATA(cmsg));
			if ((ifd = calloc(1, sizeof(struct imsg_fd))) == NULL) {
				close(fd);
				return (-1);
			}
			ifd->fd = fd;
			TAILQ_INSERT_TAIL(&ibuf->fds, ifd, entry);
		}
		/* we do not handle other ctl data level */
	}

	return (n);
}

ssize_t
imsg_get(struct imsgbuf *ibuf, struct imsg *imsg)
{
	size_t			 av, left, datalen;

	av = ibuf->r.wpos;

	if (IMSG_HEADER_SIZE > av)
		return (0);

	memcpy(&imsg->hdr, ibuf->r.buf, sizeof(imsg->hdr));
	if (imsg->hdr.len < IMSG_HEADER_SIZE ||
	    imsg->hdr.len > MAX_IMSGSIZE) {
		errno = ERANGE;
		return (-1);
	}
	if (imsg->hdr.len > av)
		return (0);
	datalen = imsg->hdr.len - IMSG_HEADER_SIZE;
	ibuf->r.rptr = ibuf->r.buf + IMSG_HEADER_SIZE;
	if ((imsg->data = malloc(datalen)) == NULL)
		return (-1);

	if (imsg->hdr.flags & IMSGF_HASFD)
		imsg->fd = imsg_get_fd(ibuf);
	else
		imsg->fd = -1;

	memcpy(imsg->data, ibuf->r.rptr, datalen);

	if (imsg->hdr.len < av) {
		left = av - imsg->hdr.len;
		memmove(&ibuf->r.buf, ibuf->r.buf + imsg->hdr.len, left);
		ibuf->r.wpos = left;
	} else
		ibuf->r.wpos = 0;

	return (datalen + IMSG_HEADER_SIZE);
}

int
imsg_compose(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, int fd, void *data, u_int16_t datalen)
{
	struct ibuf	*wbuf;

	if ((wbuf = imsg_create(ibuf, type, peerid, pid, datalen)) == NULL)
		return (-1);

	if (imsg_add(wbuf, data, datalen) == -1)
		return (-1);

	wbuf->fd = fd;

	imsg_close(ibuf, wbuf);

	return (1);
}

int
imsg_composev(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, int fd, const struct iovec *iov, int iovcnt)
{
	struct ibuf	*wbuf;
	int		 i, datalen = 0;

	for (i = 0; i < iovcnt; i++)
		datalen += iov[i].iov_len;

	if ((wbuf = imsg_create(ibuf, type, peerid, pid, datalen)) == NULL)
		return (-1);

	for (i = 0; i < iovcnt; i++)
		if (imsg_add(wbuf, iov[i].iov_base, iov[i].iov_len) == -1)
			return (-1);

	wbuf->fd = fd;

	imsg_close(ibuf, wbuf);

	return (1);
}

/* ARGSUSED */
struct ibuf *
imsg_create(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, u_int16_t datalen)
{
	struct ibuf	*wbuf;
	struct imsg_hdr	 hdr;

	datalen += IMSG_HEADER_SIZE;
	if (datalen > MAX_IMSGSIZE) {
		errno = ERANGE;
		return (NULL);
	}

	hdr.type = type;
	hdr.flags = 0;
	hdr.peerid = peerid;
	if ((hdr.pid = pid) == 0)
		hdr.pid = ibuf->pid;
	if ((wbuf = ibuf_dynamic(datalen, MAX_IMSGSIZE)) == NULL) {
		return (NULL);
	}
	if (imsg_add(wbuf, &hdr, sizeof(hdr)) == -1)
		return (NULL);

	return (wbuf);
}

int
imsg_add(struct ibuf *msg, void *data, u_int16_t datalen)
{
	if (datalen)
		if (ibuf_add(msg, data, datalen) == -1) {
			ibuf_free(msg);
			return (-1);
		}
	return (datalen);
}

void
imsg_close(struct imsgbuf *ibuf, struct ibuf *msg)
{
	struct imsg_hdr	*hdr;

	hdr = (struct imsg_hdr *)msg->buf;

	hdr->flags &= ~IMSGF_HASFD;
	if (msg->fd != -1)
		hdr->flags |= IMSGF_HASFD;

	hdr->len = (u_int16_t)msg->wpos;

	ibuf_close(&ibuf->w, msg);
}

void
imsg_free(struct imsg *imsg)
{
	free(imsg->data);
}

int
imsg_get_fd(struct imsgbuf *ibuf)
{
	int		 fd;
	struct imsg_fd	*ifd;

	if ((ifd = TAILQ_FIRST(&ibuf->fds)) == NULL)
		return (-1);

	fd = ifd->fd;
	TAILQ_REMOVE(&ibuf->fds, ifd, entry);
	free(ifd);

	return (fd);
}

int
imsg_flush(struct imsgbuf *ibuf)
{
	while (ibuf->w.queued)
		if (msgbuf_write(&ibuf->w) < 0)
			return (-1);
	return (0);
}

void
imsg_clear(struct imsgbuf *ibuf)
{
	int	fd;

	msgbuf_clear(&ibuf->w);
	while ((fd = imsg_get_fd(ibuf)) != -1)
		close(fd);
}
@


1.21
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.19 2010/04/07 18:09:39 nicm Exp $	*/
@


1.20
log
@Remove XXX comment and just close received fd if calloc() fails.

If this happens the imsg may no longer be usable as there may be queued
messages, but this is a) already the case with the code now, and b)
would be the case if recvmsg() fails anyway, so we can document that -1
from imsg_read() invalidates the struct imsgbuf.

discussed with and ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.1 2009/08/11 17:18:35 nicm Exp $	*/
d138 1
a138 1
	struct buf	*wbuf;
d157 1
a157 1
	struct buf	*wbuf;
d178 1
a178 1
struct buf *
d182 1
a182 1
	struct buf	*wbuf;
d196 1
a196 1
	if ((wbuf = buf_dynamic(datalen, MAX_IMSGSIZE)) == NULL) {
d206 1
a206 1
imsg_add(struct buf *msg, void *data, u_int16_t datalen)
d209 2
a210 2
		if (buf_add(msg, data, datalen) == -1) {
			buf_free(msg);
d217 1
a217 1
imsg_close(struct imsgbuf *ibuf, struct buf *msg)
d229 1
a229 1
	buf_close(&ibuf->w, msg);
@


1.19
log
@Make imsg_clear close and free any fds in the received fd queue as well as
freeing the msgbuf.

While here also remove an unnecessary while loop.

ok eric pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.18 2009/06/08 08:30:06 dlg Exp $	*/
d82 1
a82 1
				/* XXX: this return can leak */
@


1.18
log
@revert this change by eric@@:

Make the imsg protocol network-safe.


it might be network safe, but half the imsg based daemons on my firewalls
dont run anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.15 2009/06/06 22:11:25 eric Exp $	*/
d266 5
a270 2
	while (ibuf->w.queued)
		msgbuf_clear(&ibuf->w);
@


1.17
log
@Change the way fds passed over a socket are retreived on the receiving side.

Currently the receiver fetches an imsg via imsg_get() and if he expects
an fd, he then calls imsg_get_fd() to fetch the next fd queued on the
imsgbuf from which the imsg came.

This changes hides the fd queueing mechanism to the API user.  When closing
an imsg with an fd, the message is flagged so that the receiving end knows
it must dequeue the fd in imsg_get() and return it with the imsg structure.
This way there is no (less) possible screw up from imsg_get_fd() not being
called directly after imsg_get() by the user. The retreived imsg is
self-contained.

ok pyr@@, "I like that" henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.26 2009/06/07 00:40:46 eric Exp $	*/
d110 1
a110 1
	if ((imsg->hdr.len = ntohs(imsg->hdr.len)) > av)
a111 4
	imsg->hdr.type = ntohl(imsg->hdr.type);
	imsg->hdr.flags = ntohs(imsg->hdr.flags);
	imsg->hdr.peerid = ntohl(imsg->hdr.peerid);
	imsg->hdr.pid = ntohl(imsg->hdr.pid);
d227 2
a228 5
	hdr->type = htonl(hdr->type);
	hdr->len = htons(msg->wpos);
	hdr->flags = htons(hdr->flags);
	hdr->peerid = htonl(hdr->peerid);
	hdr->pid = htonl(hdr->pid);
@


1.16
log
@Make the imsg protocol network-safe.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.25 2009/06/06 22:11:25 eric Exp $	*/
d31 2
d118 1
a118 1
	if ((imsg->data = malloc(datalen)) == NULL) {
d120 6
a125 1
	}
d226 5
@


1.15
log
@change the imsg header fields a bit to prepare for upcoming changes.
add a flag field, use u_int32_t for pid_t and extend type to 32 bits
for padding.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.24 2009/06/06 05:04:12 pyr Exp $	*/
d108 1
a108 1
	if (imsg->hdr.len > av)
d110 4
d219 5
a223 1
	hdr->len = (u_int16_t)msg->wpos;
@


1.14
log
@sync ospfctl/ospfd with the common imsg code, making it lib ready as well.

"looks ok" claudio@@
@
text
@d128 1
a128 1
imsg_compose(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d147 1
a147 1
imsg_composev(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d172 1
a172 1
imsg_create(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d185 1
@


1.13
log
@remove unnecessary and scary pid check in imsg_init.
ok eric@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.12 2009/06/05 19:33:58 pyr Exp $	*/
d32 1
a32 1
imsg_init(struct imsgbuf *ibuf, int fd, void (*handler)(int, short, void *))
d36 2
a38 1
	ibuf->handler = handler;
a39 2
	ibuf->fd = fd;
	ibuf->w.fd = fd;
@


1.12
log
@make ospfd's imsg lib ready as well.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.22 2009/06/05 00:04:01 pyr Exp $	*/
d34 5
a38 7
	if (!ibuf->pid) {
		msgbuf_init(&ibuf->w);
		bzero(&ibuf->r, sizeof(ibuf->r));
		ibuf->pid = getpid();
		ibuf->handler = handler;
		TAILQ_INIT(&ibuf->fds);
	}
@


1.11
log
@treat buf->wpos as the size to send out on the wire, not buf->size,
this plays better with dynamic buffers which are now the norm.
ok by a slightly annoyed claudio@@, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.10 2009/03/04 12:51:01 claudio Exp $ */
d19 3
a21 1
#include <sys/types.h>
d29 1
a29 2
#include "ospfd.h"
#include "log.h"
d34 7
a40 2
	msgbuf_init(&ibuf->w);
	bzero(&ibuf->r, sizeof(ibuf->r));
a42 3
	ibuf->pid = getpid();
	ibuf->handler = handler;
	TAILQ_INIT(&ibuf->fds);
d48 7
d56 11
d68 1
a68 2
	if ((n = recv(ibuf->fd, ibuf->r.buf + ibuf->r.wpos,
	    sizeof(ibuf->r.buf) - ibuf->r.wpos, 0)) == -1) {
a69 1
			log_warn("imsg_read: pipe read error");
d77 15
d108 1
a108 2
		log_warnx("imsg_get: imsg hdr len %u out of bounds, type=%u",
		    imsg->hdr.len, imsg->hdr.type);
a115 1
		log_warn("imsg_get");
d131 2
a132 2
imsg_compose(struct imsgbuf *ibuf, enum imsg_type type, u_int32_t peerid,
    pid_t pid, void *data, u_int16_t datalen)
a134 1
	int		 n;
d142 18
a159 1
	if ((n = imsg_close(ibuf, wbuf)) < 0)
d162 9
a170 1
	return (n);
d175 1
a175 1
imsg_create(struct imsgbuf *ibuf, enum imsg_type type, u_int32_t peerid,
d183 1
a183 3
		log_warnx("imsg_create: len %u > MAX_IMSGSIZE; "
		    "type %u peerid %lu", datalen + IMSG_HEADER_SIZE,
		    type, peerid);
a191 1
		log_warn("imsg_create: buf_open");
a204 1
			log_warnx("imsg_add: buf_add error");
d211 1
a211 1
int
d219 13
a231 1
	imsg_event_add(ibuf);
d233 16
d253 1
a253 1
imsg_free(struct imsg *imsg)
d255 2
a256 1
	free(imsg->data);
@


1.10
log
@Introduce and use buf_size(buf) instead of buf->wpos -- at least in the non
buf/imsg specific code. buf_close() will no force a truncation of the buffer
to the wpos but actually add code in imsg.c to detect and report such silly
behaviour. Makes the buf API a bit more sane.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.9 2007/07/24 16:46:09 pyr Exp $ */
d165 2
a166 11
	if (msg->size != msg->wpos) {
			log_warnx("imsg_close: buffer is not correctly filled");
			buf_free(msg);
			return (-1);
	}
	hdr->len = (u_int16_t)msg->size;
	if (buf_close(&ibuf->w, msg) < 0) {
			log_warnx("imsg_close: buf_close error");
			buf_free(msg);
			return (-1);
	}
@


1.9
log
@make imsg_create use dynamic buffers.
this does not change imsg_compose's behavior but allows the message's
buffer to grow and will avoid sending a ton of small messages when
unrolling lists between two processes.

this is needed for sending multiple routes at once when updating the
fib with multipath routes.

discussed and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.8 2007/03/19 10:03:25 henning Exp $ */
a161 1
	int		 n;
d165 7
a171 2
	hdr->len = (u_int16_t)msg->wpos;
	if ((n = buf_close(&ibuf->w, msg)) < 0) {
d178 1
a178 1
	return (n);
@


1.8
log
@when our red/recv/recvmsg in imsg_read gives EINTR or EAGAIN, do not
signal "connection closed" upstream.
spotted by Valentin Kozamernik <tin@@komna.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.7 2006/05/27 20:07:42 henning Exp $ */
d125 2
a126 1
	if (datalen > MAX_IMSGSIZE - IMSG_HEADER_SIZE) {
a132 1
	hdr.len = (u_int16_t)(datalen + IMSG_HEADER_SIZE);
d137 1
a137 1
	if ((wbuf = buf_open(hdr.len)) == NULL) {
d162 2
a163 1
	int	n;
d165 2
@


1.7
log
@sync to bgpd: use ibuf->pid in imsg_create if pid == 0, claudio ok
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.6 2006/02/10 18:30:47 claudio Exp $ */
d53 1
a53 1
		return (0);
@


1.6
log
@ospfd does not need fd passing via the imsg framework so remove that code
and remove other unneeded functions that are only used in bgpd.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.5 2006/02/01 18:31:47 norby Exp $ */
d135 2
a136 1
	hdr.pid = pid;
@


1.5
log
@zap unused function.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.4 2005/04/26 15:18:22 henning Exp $ */
d42 1
a42 1
int
a44 4
	struct msghdr		 msg;
	struct cmsghdr		*cmsg;
	char			 cmsgbuf[CMSG_SPACE(sizeof(int) * 16)];
	struct iovec		 iov;
a45 10
	int			 fd;
	struct imsg_fd		*ifd;

	bzero(&msg, sizeof(msg));
	iov.iov_base = ibuf->r.buf + ibuf->r.wpos;
	iov.iov_len = sizeof(ibuf->r.buf) - ibuf->r.wpos;
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = cmsgbuf;
	msg.msg_controllen = sizeof(cmsgbuf);
d47 2
a48 1
	if ((n = recvmsg(ibuf->fd, &msg, 0)) == -1) {
a57 14
	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (cmsg->cmsg_level == SOL_SOCKET &&
		    cmsg->cmsg_type == SCM_RIGHTS) {
			fd = (*(int *)CMSG_DATA(cmsg));
			if ((ifd = calloc(1, sizeof(struct imsg_fd))) == NULL)
				fatal("imsg_read calloc");
			ifd->fd = fd;
			TAILQ_INSERT_TAIL(&ibuf->fds, ifd, entry);
		} else
			log_warn("imsg_read: got unexpected ctl data level %d "
			    "type %d", cmsg->cmsg_level, cmsg->cmsg_type);
	}

d61 1
a61 1
int
d100 1
a100 1
    pid_t pid, int fd, void *data, u_int16_t datalen)
a110 2
	wbuf->fd = fd;

d117 1
d132 1
a132 1
	hdr.len = datalen + IMSG_HEADER_SIZE;
@


1.4
log
@unify shared code a bit again to make future syncs easier
From: Alexander von Gernler <grunk@@pestilenz.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.3 2005/03/23 10:46:26 henning Exp $ */
a204 16
}

int
imsg_get_fd(struct imsgbuf *ibuf)
{
	int		 fd;
	struct imsg_fd	*ifd;

	if ((ifd = TAILQ_FIRST(&ibuf->fds)) == NULL)
		return (-1);

	fd = ifd->fd;
	TAILQ_REMOVE(&ibuf->fds, ifd, entry);
	free(ifd);

	return (fd);
@


1.3
log
@ssize_t -> size_t, from ntpd, there from Alexander von Gernler
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.2 2005/03/09 14:14:01 henning Exp $ */
a19 1
#include <sys/socket.h>
d21 1
a32 1

d77 1
a77 1
				fatal("imsg_read");
d141 1
a141 1
			return (-1);
d154 1
a154 1
		log_warnx("imsg_create_core: len %u > MAX_IMSGSIZE; "
@


1.2
log
@memcpy/memmove correctness here as well
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d92 1
a92 2
	ssize_t			 datalen = 0;
	size_t			 av, left;
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d119 1
a119 1
		memcpy(&ibuf->r.buf, ibuf->r.buf + imsg->hdr.len, left);
@

