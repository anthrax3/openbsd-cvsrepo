head	1.8;
access;
symbols
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2005.05.26.18.46.16;	author norby;	state dead;
branches;
next	1.7;

1.7
date	2005.05.23.19.59.02;	author norby;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.14.20.02.09;	author cloder;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.31.19.32.10;	author norby;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.29.17.26.35;	author norby;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.16.15.23.33;	author norby;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.17.53.33;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Support dumping the configuration the way bgpd(8) does it.

This makes it possible to have ospfd(8) parse a configuration file and
display the parsed result.

ok claudio@@
@
text
@/*	$OpenBSD: config.c,v 1.7 2005/05/23 19:59:02 norby Exp $ */

/*
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include "ospf.h"
#include "ospfd.h"
#include "ospfe.h"
#include "log.h"

void	show_db_sum(struct lsa_hdr *);
void	show_neighbor(struct nbr *);
void	show_interface(struct iface *);
void	show_area(struct area *);

extern char *__progname;

void
show_db_sum(struct lsa_hdr *db_sum)
{

	log_debug("        age %d", db_sum->age);
	log_debug("        opts %d", db_sum->opts);
	log_debug("        type %d", db_sum->type);
	log_debug("        ls_id %u", (db_sum->ls_id));
	log_debug("        adv_rtr %u", (db_sum->adv_rtr));
	log_debug("        seq_num 0x%x", db_sum->seq_num);
	log_debug("        chksum 0x%x", db_sum->ls_chksum);
	log_debug("        len %d", db_sum->len);
}

void
show_neighbor(struct nbr *nbr)
{
	struct lsa_entry	*lsa_entry = NULL;

	log_debug("      state: %s", nbr_state_name(nbr->state));
	log_debug("      inactivity timer: ");
	log_debug("      master: %d", nbr->master);
	log_debug("      dd seq num: %d", nbr->dd_seq_num);
	log_debug("      last rx options: %d", nbr->last_rx_options);
	log_debug("      id: %s", inet_ntoa(nbr->id));
	log_debug("      priority: %d", nbr->priority);
	log_debug("      address: %s", inet_ntoa(nbr->addr));
	log_debug("      options: %d", nbr->options);
	log_debug("      dr: %s", inet_ntoa(nbr->dr));
	log_debug("      bdr: %s", inet_ntoa(nbr->bdr));

	log_debug("      ls retrans: ");

	log_debug("      db sum list: ");
	TAILQ_FOREACH(lsa_entry, &nbr->db_sum_list, entry) {
		show_db_sum(lsa_entry->le_lsa);
	}

	log_debug("      ls request: ");
	TAILQ_FOREACH(lsa_entry, &nbr->ls_req_list, entry) {
		show_db_sum(lsa_entry->le_lsa);
	}
}

void
show_interface(struct iface *iface)
{
	struct nbr	*nbr = NULL;
	struct auth_md	*md;

	log_debug("  interface: %s", iface->name);
	log_debug("    type: %s", if_type_name(iface->type));
	log_debug("    state: %s", if_state_name(iface->state));
	log_debug("    address: %s", inet_ntoa(iface->addr));
	log_debug("    mask: %s", inet_ntoa(iface->mask));
	log_debug("    dst: %s", inet_ntoa(iface->dst));
	log_debug("    area: %s", inet_ntoa(iface->area->id));
	log_debug("    hello interval: %d", iface->hello_interval);
	log_debug("    dead interval: %d", iface->dead_interval);
	log_debug("    transmit delay: %d", iface->transmit_delay);
	log_debug("    priority: %d", iface->priority);
	log_debug("    hello timer: ");
	log_debug("    wait timer: ");
	log_debug("    neighbor:");

	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		show_neighbor(nbr);
	}

	log_debug("    dr: ");
	log_debug("    bdr: ");
	log_debug("    metric: %d", iface->metric);
	log_debug("    rxmt interval: %d", iface->rxmt_interval);
	log_debug("    auth type: %s", if_auth_name(iface->auth_type));
	log_debug("    auth_key: '%s'", iface->auth_key);
	log_debug("    auth keyid: %d", iface->auth_keyid);

	TAILQ_FOREACH(md, &iface->auth_md_list, entry)
		log_debug("      keyid: %d key: %s", md->keyid, md->key);

	log_debug("    mtu: %d", iface->mtu);
	log_debug("    fd: %d", iface->fd);
	log_debug("    passive: %d", iface->passive);
	log_debug("    ifindex: %d", iface->ifindex);
}

void
show_area(struct area *area)
{
	struct iface	*iface = NULL;

	log_debug("area: %s", inet_ntoa(area->id));

	LIST_FOREACH(iface, &area->iface_list, entry) {
		show_interface(iface);
	}

	log_debug("  transit: %d", area->transit);
	log_debug("  stub: %d", area->stub);
	log_debug("  stub default cost: %d", area->stub_default_cost);
}

void
show_config(struct ospfd_conf *xconf)
{
	struct area	*area = NULL;

	log_debug("--------------------------------------------------------");
	log_debug("dumping %s configuration", __progname);
	log_debug("--------------------------------------------------------");

	log_debug("router-id: %s", inet_ntoa(xconf->rtr_id));
	log_debug("rfc1583compat: %d", xconf->rfc1583compat);
	log_debug("ospf socket: %d", xconf->ospf_socket);

	LIST_FOREACH(area, &xconf->area_list, entry) {
		show_area(area);
	}
	log_debug("--------------------------------------------------------");
}
@


1.7
log
@Make the rfc1583compat flag changable in ospfd.conf(5).

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.6 2005/04/14 20:02:09 cloder Exp $ */
@


1.6
log
@Some format string cleanup. OK deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.5 2005/03/31 19:32:10 norby Exp $ */
d149 1
@


1.5
log
@Add support for crypt authentication (MD5).

ok and input claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.4 2005/03/29 17:26:35 norby Exp $ */
d44 2
a45 2
	log_debug("        ls_id %s", (db_sum->ls_id));
	log_debug("        adv_rtr %s", (db_sum->adv_rtr));
@


1.4
log
@The RFC never mentions anything about transfer, this should be transmit.

From Jason Ackley (thanks).

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.3 2005/02/16 15:23:33 norby Exp $ */
d85 1
d111 5
a115 5
	if (iface->auth_type == AUTH_TYPE_SIMPLE) {
		log_debug("    auth key: '%s'", iface->auth_key);
	} else {
		log_debug("    auth key:" );
	}
@


1.3
log
@Support point to point links.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.2 2005/01/28 17:53:33 norby Exp $ */
d95 1
a95 1
	log_debug("    transfer delay: %d", iface->transfer_delay);
@


1.2
log
@Change my email address to the OpenBSD one since Ericsson has nothing to
do with this software, just happend to be my only valid email address at
the time.
@
text
@d1 1
a1 1
/*	$OpenBSD: config.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d91 1
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2004, 2005 Esben Norby <esben.norby@@ericsson.com>
@

