head	1.19;
access;
symbols
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.15.0.4
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.8.0.12
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.19
date	2010.05.26.16.44.32;	author nicm;	state dead;
branches;
next	1.18;

1.18
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.15.10.54.59;	author jacekm;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.23.18.58.42;	author eric;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.06.07.31.26;	author eric;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.05.21.15.47;	author pyr;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.05.19.33.58;	author pyr;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.05.01.19.09;	author pyr;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.04.12.51.01;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.31.11.44.49;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.03.15.20.29;	author eric;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.10.18.30.47;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.11.16.28.07;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2005.04.26.15.18.22;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.05.12.59.18;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.23.11.36.34;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.09.14.39.56;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.01.21.25.18;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@/*	$OpenBSD: buffer.c,v 1.18 2010/05/26 13:56:08 nicm Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "imsg.h"

int	ibuf_realloc(struct ibuf *, size_t);
void	ibuf_enqueue(struct msgbuf *, struct ibuf *);
void	ibuf_dequeue(struct msgbuf *, struct ibuf *);

struct ibuf *
ibuf_open(size_t len)
{
	struct ibuf	*buf;

	if ((buf = calloc(1, sizeof(struct ibuf))) == NULL)
		return (NULL);
	if ((buf->buf = malloc(len)) == NULL) {
		free(buf);
		return (NULL);
	}
	buf->size = buf->max = len;
	buf->fd = -1;

	return (buf);
}

struct ibuf *
ibuf_dynamic(size_t len, size_t max)
{
	struct ibuf	*buf;

	if (max < len)
		return (NULL);

	if ((buf = ibuf_open(len)) == NULL)
		return (NULL);

	if (max > 0)
		buf->max = max;

	return (buf);
}

int
ibuf_realloc(struct ibuf *buf, size_t len)
{
	u_char	*b;

	/* on static buffers max is eq size and so the following fails */
	if (buf->wpos + len > buf->max) {
		errno = ENOMEM;
		return (-1);
	}

	b = realloc(buf->buf, buf->wpos + len);
	if (b == NULL)
		return (-1);
	buf->buf = b;
	buf->size = buf->wpos + len;

	return (0);
}

int
ibuf_add(struct ibuf *buf, const void *data, size_t len)
{
	if (buf->wpos + len > buf->size)
		if (ibuf_realloc(buf, len) == -1)
			return (-1);

	memcpy(buf->buf + buf->wpos, data, len);
	buf->wpos += len;
	return (0);
}

void *
ibuf_reserve(struct ibuf *buf, size_t len)
{
	void	*b;

	if (buf->wpos + len > buf->size)
		if (ibuf_realloc(buf, len) == -1)
			return (NULL);

	b = buf->buf + buf->wpos;
	buf->wpos += len;
	return (b);
}

void *
ibuf_seek(struct ibuf *buf, size_t pos, size_t len)
{
	/* only allowed to seek in already written parts */
	if (pos + len > buf->wpos)
		return (NULL);

	return (buf->buf + pos);
}

size_t
ibuf_size(struct ibuf *buf)
{
	return (buf->wpos);
}

size_t
ibuf_left(struct ibuf *buf)
{
	return (buf->max - buf->wpos);
}

void
ibuf_close(struct msgbuf *msgbuf, struct ibuf *buf)
{
	ibuf_enqueue(msgbuf, buf);
}

int
ibuf_write(struct msgbuf *msgbuf)
{
	struct iovec	 iov[IOV_MAX];
	struct ibuf	*buf;
	unsigned int	 i = 0;
	ssize_t	n;

	bzero(&iov, sizeof(iov));
	TAILQ_FOREACH(buf, &msgbuf->bufs, entry) {
		if (i >= IOV_MAX)
			break;
		iov[i].iov_base = buf->buf + buf->rpos;
		iov[i].iov_len = buf->wpos - buf->rpos;
		i++;
	}

	if ((n = writev(msgbuf->fd, iov, i)) == -1) {
		if (errno == EAGAIN || errno == ENOBUFS ||
		    errno == EINTR)	/* try later */
			return (0);
		else
			return (-1);
	}

	if (n == 0) {			/* connection closed */
		errno = 0;
		return (-2);
	}

	msgbuf_drain(msgbuf, n);

	return (0);
}

void
ibuf_free(struct ibuf *buf)
{
	free(buf->buf);
	free(buf);
}

void
msgbuf_init(struct msgbuf *msgbuf)
{
	msgbuf->queued = 0;
	msgbuf->fd = -1;
	TAILQ_INIT(&msgbuf->bufs);
}

void
msgbuf_drain(struct msgbuf *msgbuf, size_t n)
{
	struct ibuf	*buf, *next;

	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL && n > 0;
	    buf = next) {
		next = TAILQ_NEXT(buf, entry);
		if (buf->rpos + n >= buf->wpos) {
			n -= buf->wpos - buf->rpos;
			ibuf_dequeue(msgbuf, buf);
		} else {
			buf->rpos += n;
			n = 0;
		}
	}
}

void
msgbuf_clear(struct msgbuf *msgbuf)
{
	struct ibuf	*buf;

	while ((buf = TAILQ_FIRST(&msgbuf->bufs)) != NULL)
		ibuf_dequeue(msgbuf, buf);
}

int
msgbuf_write(struct msgbuf *msgbuf)
{
	struct iovec	 iov[IOV_MAX];
	struct ibuf	*buf;
	unsigned int	 i = 0;
	ssize_t		 n;
	struct msghdr	 msg;
	struct cmsghdr	*cmsg;
	union {
		struct cmsghdr	hdr;
		char		buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;

	bzero(&iov, sizeof(iov));
	bzero(&msg, sizeof(msg));
	TAILQ_FOREACH(buf, &msgbuf->bufs, entry) {
		if (i >= IOV_MAX)
			break;
		iov[i].iov_base = buf->buf + buf->rpos;
		iov[i].iov_len = buf->wpos - buf->rpos;
		i++;
		if (buf->fd != -1)
			break;
	}

	msg.msg_iov = iov;
	msg.msg_iovlen = i;

	if (buf != NULL && buf->fd != -1) {
		msg.msg_control = (caddr_t)&cmsgbuf.buf;
		msg.msg_controllen = sizeof(cmsgbuf.buf);
		cmsg = CMSG_FIRSTHDR(&msg);
		cmsg->cmsg_len = CMSG_LEN(sizeof(int));
		cmsg->cmsg_level = SOL_SOCKET;
		cmsg->cmsg_type = SCM_RIGHTS;
		*(int *)CMSG_DATA(cmsg) = buf->fd;
	}

	if ((n = sendmsg(msgbuf->fd, &msg, 0)) == -1) {
		if (errno == EAGAIN || errno == ENOBUFS ||
		    errno == EINTR)	/* try later */
			return (0);
		else
			return (-1);
	}

	if (n == 0) {			/* connection closed */
		errno = 0;
		return (-2);
	}

	/*
	 * assumption: fd got sent if sendmsg sent anything
	 * this works because fds are passed one at a time
	 */
	if (buf != NULL && buf->fd != -1) {
		close(buf->fd);
		buf->fd = -1;
	}

	msgbuf_drain(msgbuf, n);

	return (0);
}

void
ibuf_enqueue(struct msgbuf *msgbuf, struct ibuf *buf)
{
	TAILQ_INSERT_TAIL(&msgbuf->bufs, buf, entry);
	msgbuf->queued++;
}

void
ibuf_dequeue(struct msgbuf *msgbuf, struct ibuf *buf)
{
	TAILQ_REMOVE(&msgbuf->bufs, buf, entry);

	if (buf->fd != -1)
		close(buf->fd);

	msgbuf->queued--;
	ibuf_free(buf);
}
@


1.18
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.12 2009/09/15 10:54:59 jacekm Exp $	*/
@


1.17
log
@Enclose repeated buffer draining code in a new msgbuf_drain()
function, which is additionally exported for use by others.

It will be needed by smtpd's SSL module when the SMTP client code
is changed to replace libevent's evbuffers with our msgbuf_* API.

ok gilles@@ henning@@ guenther@@ eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.44 2009/07/23 18:58:42 eric Exp $	*/
d31 3
a33 3
int	buf_realloc(struct buf *, size_t);
void	buf_enqueue(struct msgbuf *, struct buf *);
void	buf_dequeue(struct msgbuf *, struct buf *);
d35 2
a36 2
struct buf *
buf_open(size_t len)
d38 1
a38 1
	struct buf	*buf;
d40 1
a40 1
	if ((buf = calloc(1, sizeof(struct buf))) == NULL)
d52 2
a53 2
struct buf *
buf_dynamic(size_t len, size_t max)
d55 1
a55 1
	struct buf	*buf;
d60 1
a60 1
	if ((buf = buf_open(len)) == NULL)
d70 1
a70 1
buf_realloc(struct buf *buf, size_t len)
d90 1
a90 1
buf_add(struct buf *buf, const void *data, size_t len)
d93 1
a93 1
		if (buf_realloc(buf, len) == -1)
d102 1
a102 1
buf_reserve(struct buf *buf, size_t len)
d107 1
a107 1
		if (buf_realloc(buf, len) == -1)
d116 1
a116 1
buf_seek(struct buf *buf, size_t pos, size_t len)
d126 1
a126 1
buf_size(struct buf *buf)
d132 1
a132 1
buf_left(struct buf *buf)
d138 1
a138 1
buf_close(struct msgbuf *msgbuf, struct buf *buf)
d140 1
a140 1
	buf_enqueue(msgbuf, buf);
d144 1
a144 1
buf_write(struct msgbuf *msgbuf)
d147 1
a147 1
	struct buf	*buf;
d179 1
a179 1
buf_free(struct buf *buf)
d196 1
a196 1
	struct buf	*buf, *next;
d203 1
a203 1
			buf_dequeue(msgbuf, buf);
d214 1
a214 1
	struct buf	*buf;
d217 1
a217 1
		buf_dequeue(msgbuf, buf);
d224 1
a224 1
	struct buf	*buf;
d287 1
a287 1
buf_enqueue(struct msgbuf *msgbuf, struct buf *buf)
d294 1
a294 1
buf_dequeue(struct msgbuf *msgbuf, struct buf *buf)
d302 1
a302 1
	buf_free(buf);
@


1.16
log
@make buf_write() behave like msgbuf_write(): send out only the
bytes that were filled, not the whole buffer.

ok pyr@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.20 2009/06/05 21:15:47 pyr Exp $	*/
d147 1
a147 1
	struct buf	*buf, *next;
d173 1
a173 11
	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL && n > 0;
	    buf = next) {
		next = TAILQ_NEXT(buf, entry);
		if (buf->rpos + n >= buf->wpos) {
			n -= buf->wpos - buf->rpos;
			buf_dequeue(msgbuf, buf);
		} else {
			buf->rpos += n;
			n = 0;
		}
	}
d194 18
d224 1
a224 1
	struct buf	*buf, *next;
d281 1
a281 11
	for (buf = TAILQ_FIRST(&msgbuf->bufs); buf != NULL && n > 0;
	    buf = next) {
		next = TAILQ_NEXT(buf, entry);
		if (buf->rpos + n >= buf->wpos) {
			n -= buf->wpos - buf->rpos;
			buf_dequeue(msgbuf, buf);
		} else {
			buf->rpos += n;
			n = 0;
		}
	}
@


1.15
log
@sync ospfctl/ospfd with the common imsg code, making it lib ready as well.

"looks ok" claudio@@
@
text
@d156 1
a156 1
		iov[i].iov_len = buf->size - buf->rpos;
d176 2
a177 2
		if (buf->rpos + n >= buf->size) {
			n -= buf->size - buf->rpos;
@


1.14
log
@bring buf_write here as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.13 2009/06/05 19:33:58 pyr Exp $	*/
@


1.13
log
@make ospfd's imsg lib ready as well.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.19 2009/06/05 07:14:31 pyr Exp $	*/
d141 45
@


1.12
log
@treat buf->wpos as the size to send out on the wire, not buf->size,
this plays better with dynamic buffers which are now the norm.
ok by a slightly annoyed claudio@@, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.11 2009/03/04 12:51:01 claudio Exp $ */
d19 3
a21 1
#include <sys/types.h>
a24 2
#include <limits.h>
#include <stdio.h>
d29 1
a29 1
#include "ospfd.h"
d47 1
d175 5
d189 2
d196 10
d219 9
d254 4
@


1.11
log
@Introduce and use buf_size(buf) instead of buf->wpos -- at least in the non
buf/imsg specific code. buf_close() will no force a truncation of the buffer
to the wpos but actually add code in imsg.c to detect and report such silly
behaviour. Makes the buf API a bit more sane.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.10 2009/01/31 11:44:49 claudio Exp $ */
d136 1
a136 1
int
a138 2
	/* truncate buffer to the correct length before queuing */
	buf->size = buf->wpos;
a139 1
	return (1);
d181 1
a181 1
		iov[i].iov_len = buf->size - buf->rpos;
d204 2
a205 2
		if (buf->rpos + n >= buf->size) {
			n -= buf->size - buf->rpos;
@


1.10
log
@Implement buf_left() to make some some more buffer handling easier.
buf_left() returns the bytes left in a buffer. This makes the check to
keep MD5_DIGEST_LENGTH bytes unallocated in some messages easier.
From the buf cleanup diff that was OK norby@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.9 2008/10/03 15:20:29 eric Exp $ */
d89 1
a89 1
buf_add(struct buf *buf, void *data, size_t len)
d125 6
d139 2
@


1.9
log
@Unify code between the various flavors of imsg buffer.c.
Use unsigned int for msg_iovlen.

ok henning@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.8 2006/02/10 18:30:47 claudio Exp $ */
d122 6
@


1.8
log
@ospfd does not need fd passing via the imsg framework so remove that code
and remove other unneeded functions that are only used in bgpd.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.7 2005/08/11 16:28:07 henning Exp $ */
d160 1
a160 1
	int		 i = 0;
@


1.7
log
@EINTR, and a little KNF in packet.c
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.6 2005/04/26 15:18:22 henning Exp $ */
a46 1
	buf->fd = -1;
a130 26
int
buf_write(int sock, struct buf *buf)
{
	ssize_t	n;

	if ((n = write(sock, buf->buf + buf->rpos,
	    buf->size - buf->rpos)) == -1) {
		if (errno == EAGAIN || errno == ENOBUFS ||
		    errno == EINTR)	/* try later */
			return (0);
		else
			return (-1);
	}

	if (n == 0) {			/* connection closed */
		errno = 0;
		return (-2);
	}

	if (buf->rpos + n < buf->size) {	/* not all data written yet */
		buf->rpos += n;
		return (0);
	} else
		return (1);
}

a162 2
	struct cmsghdr	*cmsg;
	char		 cmsgbuf[CMSG_SPACE(sizeof(int))];
a171 2
		if (buf->fd != -1)
			break;
a176 10
	if (buf != NULL && buf->fd != -1) {
		msg.msg_control = (caddr_t)cmsgbuf;
		msg.msg_controllen = CMSG_LEN(sizeof(int));
		cmsg = CMSG_FIRSTHDR(&msg);
		cmsg->cmsg_len = CMSG_LEN(sizeof(int));
		cmsg->cmsg_level = SOL_SOCKET;
		cmsg->cmsg_type = SCM_RIGHTS;
		*(int *)CMSG_DATA(cmsg) = buf->fd;
	}

a204 33
int
msgbuf_writebound(struct msgbuf *msgbuf)
{
	struct buf	*buf;
	int		 n;

	if (!msgbuf_unbounded(msgbuf))
		return (1);

	buf = TAILQ_FIRST(&msgbuf->bufs);
	if ((n = buf_write(msgbuf->fd, buf)) < 0)
		return (n);

	if (n == 1) {	/* everything written out */
		buf_dequeue(msgbuf, buf);
		return (1);
	} else
		return (0);
}

int
msgbuf_unbounded(struct msgbuf *msgbuf)
{
	struct buf	*buf;

	/* return 1 if last buffer was not completely written. */
	buf = TAILQ_FIRST(&msgbuf->bufs);
	if (buf != NULL && buf->rpos != 0)
		return (1);
	else
		return (0);
}

a215 4

	if (buf->fd != -1)
		close(buf->fd);

@


1.6
log
@unify shared code a bit again to make future syncs easier
From: Alexander von Gernler <grunk@@pestilenz.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.5 2005/04/05 12:59:18 claudio Exp $ */
d139 2
a140 1
		if (errno == EAGAIN || errno == ENOBUFS)	/* try later */
d219 2
a220 1
		if (errno == EAGAIN || errno == ENOBUFS)	/* try later */
@


1.5
log
@Set errno in case buf_realloc() fails because the limit of the buffer is
reached.
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.4 2005/03/23 11:36:34 henning Exp $ */
a19 1
#include <sys/socket.h>
d21 3
a25 3
#include <err.h>
#include <errno.h>
#include <limits.h>
@


1.4
log
@remove now osolete comment, from a mail exchange with
Alexander von Gernler <grunk@@pestilenz.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.3 2005/02/09 14:39:56 claudio Exp $ */
d76 2
a77 1
	if (buf->wpos + len > buf->max)
d79 1
@


1.3
log
@Add buf_seek() as buf_reserve() fails if a buf_add()/buf_reserve() is
called afterwards as it may realloc() the buffer and so the returned
pointer is bogus. Needed by the upcomming originate LSA code.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.2 2005/02/01 21:25:18 claudio Exp $ */
a182 6
	/*
	 * possible race here
	 * when we cannot write out data completely from a buffer,
	 * we MUST return and NOT try to write out stuff from later buffers -
	 * the socket might have become writeable again
	 */
a245 6
	/*
	 * possible race here
	 * when we cannot write out data completely from a buffer,
	 * we MUST return and NOT try to write out stuff from later buffers -
	 * the socket might have become writeable again
	 */
@


1.2
log
@Introduce dynmaic buffers. Dynamic buffers are realloced() until max is
hit. This makes it possible to alloc a buffer based on the max packet size
and filling it up slowly till the packet is finished or *sigh* an overflow
is detected. While doing that switch most sizes from ssize_t to the unsigned
size_t as this makes more sense. The ssize_t -> size_t change is mostly from
henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: buffer.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d112 10
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d32 1
d37 1
a37 1
buf_open(ssize_t len)
d47 1
a47 1
	buf->size = len;
d53 17
d71 19
a89 1
buf_add(struct buf *buf, void *data, ssize_t len)
d92 2
a93 1
		return (-1);
d101 1
a101 1
buf_reserve(struct buf *buf, ssize_t len)
d106 2
a107 1
		return (NULL);
d139 1
a139 1
	if (n < buf->size - buf->rpos) {	/* not all data written yet */
d227 1
a227 1
		if (n >= buf->size - buf->rpos) {
@

