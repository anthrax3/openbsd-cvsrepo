head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.18
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.20
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.16
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.12
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.14
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.6
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.10
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.8
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.4
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.22.0.4
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.2
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.19.0.4
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.2
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.14
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.10
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.8
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.6
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.4
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.15.0.2
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8;
locks; strict;
comment	@ * @;


1.23
date	2013.01.17.09.14.15;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2011.09.16.18.24.57;	author sthen;	state Exp;
branches;
next	1.21;

1.21
date	2011.05.09.12.24.41;	author claudio;	state Exp;
branches;
next	1.20;

1.20
date	2011.03.25.08.52.21;	author claudio;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.26.18.02.07;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2010.02.16.08.39.05;	author dlg;	state Exp;
branches;
next	1.17;

1.17
date	2010.02.16.08.22.42;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2006.12.07.19.14.27;	author claudio;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.09.16.52.43;	author norby;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.09.15.23.08;	author norby;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.04.20.56.46;	author norby;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.10.20.20.47;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.06.20.21.08;	author norby;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.31.19.32.10;	author norby;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.22.22.13.48;	author norby;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.27.08.21.15;	author norby;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.08.21.52.48;	author norby;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.08.12.56.48;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.04.07.38.04;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.02.19.47.20;	author norby;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.01.21.15.40;	author norby;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.28.17.53.33;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.23
log
@allow two minutes until neighbor adjacencies are formed; ok claudio@@
@
text
@/*	$OpenBSD: ospf.h,v 1.22 2011/09/16 18:24:57 sthen Exp $ */

/*
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* OSPF protocol definitions */

#ifndef _OSPF_H_
#define _OSPF_H_

#include <netinet/in.h>
#include <stddef.h>

/* misc */
#define OSPF_VERSION		2
#define IPPROTO_OSPF		89
#define AllSPFRouters		"224.0.0.5"
#define AllDRouters		"224.0.0.6"

#define DEFAULT_METRIC		10
#define DEFAULT_REDIST_METRIC	100
#define MIN_METRIC		1
#define MAX_METRIC		65535	/* sum & as-ext lsa use 24bit metrics */

#define DEFAULT_PRIORITY	1
#define MIN_PRIORITY		0
#define MAX_PRIORITY		255

#define DEFAULT_HELLO_INTERVAL	10
#define MIN_HELLO_INTERVAL	1
#define MAX_HELLO_INTERVAL	65535

/* msec */
#define DEFAULT_FAST_INTERVAL	333
#define MIN_FAST_INTERVAL	50
#define MAX_FAST_INTERVAL	333

#define DEFAULT_RTR_DEAD_TIME	40
#define FAST_RTR_DEAD_TIME	1
#define MIN_RTR_DEAD_TIME	2
#define MAX_RTR_DEAD_TIME	2147483647

#define DEFAULT_RXMT_INTERVAL	5
#define MIN_RXMT_INTERVAL	5
#define MAX_RXMT_INTERVAL	3600

#define DEFAULT_TRANSMIT_DELAY	1
#define MIN_TRANSMIT_DELAY	1
#define MAX_TRANSMIT_DELAY	3600

#define DEFAULT_ADJ_TMOUT	120

#define DEFAULT_NBR_TMOUT	86400	/* 24 hours */

/* msec */
#define DEFAULT_SPF_DELAY	1000
#define MIN_SPF_DELAY		10
#define MAX_SPF_DELAY		10000

/* msec */
#define DEFAULT_SPF_HOLDTIME	5000
#define MIN_SPF_HOLDTIME	10
#define MAX_SPF_HOLDTIME	5000

/* msec */
#define KR_RELOAD_TIMER		250
#define KR_RELOAD_HOLD_TIMER	5000

#define MIN_MD_ID		0
#define MAX_MD_ID		255

#define MAX_SIMPLE_AUTH_LEN	8

/* OSPF compatibility flags */
#define OSPF_OPTION_MT		0x01
#define OSPF_OPTION_E		0x02
#define OSPF_OPTION_MC		0x04
#define OSPF_OPTION_NP		0x08
#define OSPF_OPTION_EA		0x10
#define OSPF_OPTION_DC		0x20
#define OSPF_OPTION_O		0x40	/* only on DD options */
#define OSPF_OPTION_DN		0x80	/* only on LSA options */

/* OSPF packet types */
#define PACKET_TYPE_HELLO	1
#define PACKET_TYPE_DD		2
#define PACKET_TYPE_LS_REQUEST	3
#define PACKET_TYPE_LS_UPDATE	4
#define PACKET_TYPE_LS_ACK	5

/* OSPF auth types */
#define	AUTH_TYPE_NONE		0
#define AUTH_TYPE_SIMPLE	1
#define	AUTH_TYPE_CRYPT		2

#define MIN_AUTHTYPE		0
#define MAX_AUTHTYPE		2

/* LSA */
#define LS_REFRESH_TIME		1800
#define MIN_LS_INTERVAL		5
#define MIN_LS_ARRIVAL		1
#define DEFAULT_AGE		0
#define MAX_AGE			3600
#define CHECK_AGE		300
#define MAX_AGE_DIFF		900
#define LS_INFINITY		0xffffff
#define RESV_SEQ_NUM		0x80000000	/* reserved and "unused" */
#define INIT_SEQ_NUM		0x80000001
#define MAX_SEQ_NUM		0x7fffffff

/* OSPF header */
struct crypt {
	u_int16_t		dummy;
	u_int8_t		keyid;
	u_int8_t		len;
	u_int32_t		seq_num;
};

struct ospf_hdr {
	u_int8_t		version;
	u_int8_t		type;
	u_int16_t		len;
	u_int32_t		rtr_id;
	u_int32_t		area_id;
	u_int16_t		chksum;
	u_int16_t		auth_type;
	union {
		char		simple[MAX_SIMPLE_AUTH_LEN];
		struct crypt	crypt;
	} auth_key;
};

/* Hello header (type 1) */
struct hello_hdr {
	u_int32_t		mask;
	u_int16_t		hello_interval;
	u_int8_t		opts;
	u_int8_t		rtr_priority;
	u_int32_t		rtr_dead_interval;
	u_int32_t		d_rtr;
	u_int32_t		bd_rtr;
};

/* Database Description header (type 2) */
struct db_dscrp_hdr {
	u_int16_t		iface_mtu;
	u_int8_t		opts;
	u_int8_t		bits;
	u_int32_t		dd_seq_num;
};

#define OSPF_DBD_MS		0x01
#define OSPF_DBD_M		0x02
#define OSPF_DBD_I		0x04

/*  Link State Request header (type 3) */
struct ls_req_hdr {
	u_int32_t		type;
	u_int32_t		ls_id;
	u_int32_t		adv_rtr;
};

/* Link State Update header (type 4) */
struct ls_upd_hdr {
	u_int32_t		num_lsa;
};

#define	LSA_TYPE_ROUTER		1
#define LSA_TYPE_NETWORK	2
#define LSA_TYPE_SUM_NETWORK	3
#define LSA_TYPE_SUM_ROUTER	4
#define	LSA_TYPE_EXTERNAL	5
#define	LSA_TYPE_LINK_OPAQ	9
#define	LSA_TYPE_AREA_OPAQ	10
#define	LSA_TYPE_AS_OPAQ	11

#define LINK_TYPE_POINTTOPOINT	1
#define LINK_TYPE_TRANSIT_NET	2
#define LINK_TYPE_STUB_NET	3
#define LINK_TYPE_VIRTUAL	4

/* LSA headers */
#define LSA_METRIC_MASK		0x00ffffff	/* only for sum & as-ext */
#define LSA_ASEXT_E_FLAG	0x80000000

/* for some reason they thought 24bit types are fun, make them less a hazard */
#define LSA_24_MASK 0xffffff
#define LSA_24_GETHI(x)		\
	((x) >> 24)
#define LSA_24_GETLO(x)		\
	((x) & LSA_24_MASK)
#define LSA_24_SETHI(x, y)	\
	((x) = ((x) & LSA_24_MASK) | (((y) & 0xff) << 24))
#define LSA_24_SETLO(x, y)	\
	((x) = ((y) & LSA_24_MASK) | ((x) & ~LSA_24_MASK))


#define OSPF_RTR_B		0x01
#define OSPF_RTR_E		0x02
#define OSPF_RTR_V		0x04

struct lsa_rtr {
	u_int8_t		flags;
	u_int8_t		dummy;
	u_int16_t		nlinks;
};

struct lsa_rtr_link {
	u_int32_t		id;
	u_int32_t		data;
	u_int8_t		type;
	u_int8_t		num_tos;
	u_int16_t		metric;
};

struct lsa_net {
	u_int32_t		mask;
	u_int32_t		att_rtr[1];
};

struct lsa_net_link {
	u_int32_t		att_rtr;
};

struct lsa_sum {
	u_int32_t		mask;
	u_int32_t		metric;		/* only lower 24 bit */
};

struct lsa_asext {
	u_int32_t		mask;
	u_int32_t		metric;		/* lower 24 bit plus E bit */
	u_int32_t		fw_addr;
	u_int32_t		ext_tag;
};

struct lsa_hdr {
	u_int16_t		age;
	u_int8_t		opts;
	u_int8_t		type;
	u_int32_t		ls_id;
	u_int32_t		adv_rtr;
	u_int32_t		seq_num;
	u_int16_t		ls_chksum;
	u_int16_t		len;
};

#define LS_CKSUM_OFFSET	offsetof(struct lsa_hdr, ls_chksum)

struct lsa {
	struct lsa_hdr		hdr;
	union {
		struct lsa_rtr		rtr;
		struct lsa_net		net;
		struct lsa_sum		sum;
		struct lsa_asext	asext;
	}			data;
};

#endif /* !_OSPF_H_ */
@


1.22
log
@Rather than reloading kernel routes immediately when an RTM_DESYNC is seen,
set (or extend) a timer and only reload when this expires. Avoids repeatedly
dumping full kernel routes (thus generating more load) when the machine has
problems keeping up with messages on the route socket. (if you see lots of
repeated "reloading interface list and routing table" in ospfd logs, this
will help).

Suggestions/ok claudio@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.21 2011/05/09 12:24:41 claudio Exp $ */
d64 1
a64 1
#define DEFAULT_ADJ_TMOUT	60
@


1.21
log
@First bits to support opaque LSA. Type-9, 10 and 11 are LSA that can
hold about any data you like and is used for things like greaceful
reload. Implement the basic redistribute logic and LSDB handling but
the data sent is currently not looked at.
Tested and OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.20 2011/03/25 08:52:21 claudio Exp $ */
d77 4
@


1.20
log
@Rewrite the lsack generation. Make it more like the lsupdate code.
Removes some of the rather strange packet handling.
Tested by a few especially sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.19 2010/06/26 18:02:07 guenther Exp $ */
d84 1
d90 2
d183 3
d195 12
@


1.19
log
@Use offsetof() instead of writing our own version (...which generates
warnings from gcc4)
os claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.18 2010/02/16 08:39:05 dlg Exp $ */
a31 2

#define PACKET_HDR		100 /* XXX used to calculate the IP payload */
@


1.18
log
@implement support for fast hello packets.

if route-dead-time is set to "minimal" (rather than a number of
seconds), the dead time is set to 1 second and hellos are sent at
the interval specified by fast-hello-interval in msecs. this is non
standard wrt to the ospf rfc, but it does interoperate with at least
one other router vendor.

this allows much better responsiveness to l3 topology changes than
the standard intervals allow. if i yank a cable to one of my
upstreams, the routes adjust in a second rather than the default
of 40 i was running with before. the users dont even notice something
changed.

developed while working with joshua atterbury.
ok claudio@@ as part of a larger diff.
dedicated to zan rowe who thinks she is a bigger nerd than me.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.17 2010/02/16 08:22:42 dlg Exp $ */
d25 1
d242 1
a242 1
#define LS_CKSUM_OFFSET	((u_int16_t)(&((struct lsa_hdr *)0)->ls_chksum))
@


1.17
log
@allow spf-delay and spf-holdtime to be specified in msec so ospfd can
better respond to rapid topology changes.

developed while working with joshua atterbury
ok claudio@@ as part of a larger diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.16 2006/12/07 19:14:27 claudio Exp $ */
d47 5
d53 1
@


1.16
log
@Make it possible to set the metric and LSA type for redistributed routes.
Mostly based on a diff by Pierre-Yves Ritschard (I just simplified the parser
code). OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.15 2006/03/09 16:52:43 norby Exp $ */
d63 9
a71 7
#define DEFAULT_SPF_DELAY	1
#define MIN_SPF_DELAY		1
#define MAX_SPF_DELAY		10

#define DEFAULT_SPF_HOLDTIME	5
#define MIN_SPF_HOLDTIME	1
#define MAX_SPF_HOLDTIME	5
@


1.15
log
@It seems that 60 secs is a reasonable amount of time to reach state FULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.14 2006/02/09 15:23:08 norby Exp $ */
d35 1
@


1.14
log
@Prevent the neighbor FSM from getting stuck forever in state EXSTART.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.13 2005/12/04 20:56:46 norby Exp $ */
d58 1
a58 1
#define DEFAULT_ADJ_TMOUT	60	/* XXX sane value? */
@


1.13
log
@Increase ADJ_TMOUT to prevent loss of adjacency during bulk ls update
transfers.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.12 2005/05/10 20:20:47 claudio Exp $ */
d58 1
a58 1
#define DEFAULT_ADJ_TMOUT	600	/* XXX sane value? */
@


1.12
log
@Do no longer force the default router priority to 0.
Ospfd can be used as DR or BDR since quite some time so there is no need to
make ospfd ineligible as DR or BDR.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.11 2005/04/06 20:21:08 norby Exp $ */
d58 1
a58 1
#define DEFAULT_ADJ_TMOUT	60	/* XXX sane value? */
@


1.11
log
@Add check for key lengths. Based on diff from Jason Ackley.
Reworked by me.
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.10 2005/03/31 19:32:10 norby Exp $ */
d38 1
a38 1
#define DEFAULT_PRIORITY	0 /* XXX force to 0 for now */
@


1.10
log
@Add support for crypt authentication (MD5).

ok and input claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.9 2005/03/22 22:13:48 norby Exp $ */
d73 2
d127 1
a127 1
		char		simple[8];
@


1.9
log
@Remove bool cruft.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.8 2005/02/27 08:21:15 norby Exp $ */
d70 3
d109 7
d126 1
a126 1
		u_int64_t	crypt;
@


1.8
log
@SPF and route table calculation.

Calculate Shortest Path Tree for each area known in the link state
database.

The Shortest Path Tree is used as input for route table calculation.
Route tabled is calculated and the result is inserted into the kernel
route table.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.7 2005/02/08 21:52:48 norby Exp $ */
a24 1
#include <stdbool.h>
@


1.7
log
@Change default metric to 10, reflects what is stated in ospfd.conf(5).

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.6 2005/02/08 12:56:48 claudio Exp $ */
d63 8
d171 4
d192 4
@


1.6
log
@The LSA seq_num should be unsigned as it is expected by ntohl/htonl() even
though the seq_num needs to be compared as signed number.
No idea how IETF came up with such a stupid idea especially because the
seq_num is not allowed to wrap.
requested by henning@@ OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.5 2005/02/04 07:38:04 claudio Exp $ */
d35 1
a35 1
#define DEFAULT_METRIC		1
@


1.5
log
@Add sanity checks for AS-external LSA. Refine some other checks to be as
strict as possible. OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.4 2005/02/02 19:47:20 norby Exp $ */
d94 1
d200 1
a200 1
	int32_t			seq_num;
@


1.4
log
@Typo in constant.

ok claudio@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.3 2005/02/01 21:15:40 norby Exp $ */
d37 1
a37 1
#define MAX_METRIC		65535
d159 3
d186 7
d209 4
a212 3
		struct lsa_rtr	rtr;
		struct lsa_net  net;
		struct lsa_sum	sum;
@


1.3
log
@Free neighbors that have been inactive for 24hrs.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.2 2005/01/28 17:53:33 norby Exp $ */
d55 3
a57 3
#define DEFAULT_TRANSIT_DELAY	1
#define MIN_TRANSIT_DELAY	1
#define MAX_TRANSIT_DELAY	3600
@


1.2
log
@Change my email address to the OpenBSD one since Ericsson has nothing to
do with this software, just happend to be my only valid email address at
the time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ospf.h,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
d60 2
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d4 1
a4 1
 * Copyright (c) 2004, 2005 Esben Norby <esben.norby@@ericsson.com>
@

