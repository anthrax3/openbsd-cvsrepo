head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.16.0.14
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.10
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.12
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.4
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.11.19.12.46.46;	author sthen;	state Exp;
branches;
next	1.16;
commitid	snAkUkqsHfeBCu8j;

1.16
date	2013.03.06.15.43.23;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2010.02.16.08.39.05;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2010.02.16.08.22.42;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.07.21.16.36;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.24.18.28.02;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2007.09.30.13.28.09;	author claudio;	state Exp;
branches;
next	1.10;

1.10
date	2007.06.19.16.45.15;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.29.22.08.25;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.22.16.00.46;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.21.10.54.30;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.09.03.59.54;	author joel;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.31.03.59.51;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.31.03.24.06;	author claudio;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.22.06.14;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.19.22.00.37;	author stevesk;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.26.18.46.16;	author norby;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Print metric and type for "redistribute" in ospfd -v.
From Remi Locherer, ok claudio
@
text
@/*	$OpenBSD: printconf.c,v 1.16 2013/03/06 15:43:23 sthen Exp $ */

/*
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <stdio.h>

#include "ospf.h"
#include "ospfd.h"
#include "ospfe.h"

void	print_mainconf(struct ospfd_conf *);
const char *print_no(u_int16_t);
void	print_redistribute(struct redist_list *);
void	print_rtlabel(struct ospfd_conf *);
void	print_iface(struct iface *);

void
print_mainconf(struct ospfd_conf *conf)
{
	printf("router-id %s\n", inet_ntoa(conf->rtr_id));

	if (conf->flags & OSPFD_FLAG_NO_FIB_UPDATE)
		printf("fib-update no\n");
	else
		printf("fib-update yes\n");

	if (conf->rfc1583compat)
		printf("rfc1583compat yes\n");
	else
		printf("rfc1583compat no\n");

	if (conf->flags & OSPFD_FLAG_STUB_ROUTER)
		printf("stub router yes\n");

	print_redistribute(&conf->redist_list);
	print_rtlabel(conf);

	printf("spf-delay msec %u\n", conf->spf_delay);
	printf("spf-holdtime msec %u\n", conf->spf_hold_time);
}

const char *
print_no(u_int16_t type)
{
	if (type & REDIST_NO)
		return ("no ");
	else
		return ("");
}

void
print_redistribute(struct redist_list *rlh)
{
	struct redistribute	*r;

	SIMPLEQ_FOREACH(r, rlh, entry) {
		switch (r->type & ~REDIST_NO) {
		case REDIST_STATIC:
			printf("%sredistribute static ", print_no(r->type));
			break;
		case REDIST_CONNECTED:
			printf("%sredistribute connected ", print_no(r->type));
			break;
		case REDIST_LABEL:
			printf("%sredistribute rtlabel %s ",
			    print_no(r->type), rtlabel_id2name(r->label));
			break;
		case REDIST_ADDR:
			printf("%sredistribute %s/%d ",
			    print_no(r->type), inet_ntoa(r->addr),
			    mask2prefixlen(r->mask.s_addr));
			break;
		case REDIST_DEFAULT:
			printf("%sredistribute default ", print_no(r->type));
			break;
		}
		printf("set { metric %d type %d }\n",
		    (r->metric & LSA_METRIC_MASK),
		    ((r->metric & LSA_ASEXT_E_FLAG) == 0 ? 1 : 2));
	}
}

void
print_rtlabel(struct ospfd_conf *conf)
{
	struct n2id_label	*label;

	TAILQ_FOREACH(label, &rt_labels, entry)
		if (label->ext_tag)
			printf("rtlabel \"%s\" external-tag %u\n",
			    label->name, label->ext_tag);
}

void
print_iface(struct iface *iface)
{
	struct auth_md	*md;

	printf("\tinterface %s:%s {\n", iface->name, inet_ntoa(iface->addr));

	printf("\t\tmetric %d\n", iface->metric);

	if (*iface->demote_group)
		printf("\t\tdemote %s\n", iface->demote_group);
	if (iface->passive)
		printf("\t\tpassive\n");
	else {
		printf("\t\tretransmit-interval %d\n", iface->rxmt_interval);
		if (iface->dead_interval == FAST_RTR_DEAD_TIME) {
			printf("\t\trouter-dead-time minimal\n");
			printf("\t\tfast-hello-interval msec %u\n",
			    iface->fast_hello_interval);
		} else {
			printf("\t\trouter-dead-time %d\n",
			    iface->dead_interval);
			printf("\t\thello-interval %d\n",
			    iface->hello_interval);
		}
		printf("\t\trouter-priority %d\n", iface->priority);
		printf("\t\ttransmit-delay %d\n", iface->transmit_delay);

		printf("\t\tauth-type %s\n", if_auth_name(iface->auth_type));
		switch (iface->auth_type) {
		case AUTH_TYPE_NONE:
			break;
		case AUTH_TYPE_SIMPLE:
			printf("\t\tauth-key XXXXXX\n");
			break;
		case AUTH_TYPE_CRYPT:
			printf("\t\tauth-md-keyid %d\n", iface->auth_keyid);
			TAILQ_FOREACH(md, &iface->auth_md_list, entry)
				printf("\t\tauth-md %d XXXXXX\n", md->keyid);
			break;
		default:
			printf("\t\tunknown auth type!\n");
			break;
		}
	}

	printf("\t}\n");
}

void
print_config(struct ospfd_conf *conf)
{
	struct area	*area;
	struct iface	*iface;

	printf("\n");
	print_mainconf(conf);
	printf("\n");

	LIST_FOREACH(area, &conf->area_list, entry) {
		printf("area %s {\n", inet_ntoa(area->id));
		if (area->stub) {
			printf("\tstub");
			if (SIMPLEQ_EMPTY(&area->redist_list))
				printf("\n");
			else {
				printf(" ");
				print_redistribute(&area->redist_list);
			}
		}
		if (*area->demote_group)
			printf("\tdemote %s %d\n", area->demote_group,
			area->demote_level);
		LIST_FOREACH(iface, &area->iface_list, entry) {
			print_iface(iface);
		}
		printf("}\n\n");
	}
}
@


1.16
log
@When dumping config, just print "passive" for passive interfaces rather
than showing hello timers/keys.  ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.15 2010/02/16 08:39:05 dlg Exp $ */
d79 1
a79 1
			printf("%sredistribute static\n", print_no(r->type));
d82 1
a82 1
			printf("%sredistribute connected\n", print_no(r->type));
d85 1
a85 1
			printf("%sredistribute rtlabel %s\n",
d89 1
a89 1
			printf("%sredistribute %s/%d\n",
d94 1
a94 1
			printf("%sredistribute default\n", print_no(r->type));
d97 3
@


1.15
log
@implement support for fast hello packets.

if route-dead-time is set to "minimal" (rather than a number of
seconds), the dead time is set to 1 second and hellos are sent at
the interval specified by fast-hello-interval in msecs. this is non
standard wrt to the ospf rfc, but it does interoperate with at least
one other router vendor.

this allows much better responsiveness to l3 topology changes than
the standard intervals allow. if i yank a cable to one of my
upstreams, the routes adjust in a second rather than the default
of 40 i was running with before. the users dont even notice something
changed.

developed while working with joshua atterbury.
ok claudio@@ as part of a larger diff.
dedicated to zan rowe who thinks she is a bigger nerd than me.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.14 2010/02/16 08:22:42 dlg Exp $ */
d120 2
d124 14
a137 2
	if (*iface->demote_group)
		printf("\t\tdemote %s\n", iface->demote_group);
d139 16
a154 27
	printf("\t\tretransmit-interval %d\n", iface->rxmt_interval);
	if (iface->dead_interval == FAST_RTR_DEAD_TIME) {
		printf("\t\trouter-dead-time minimal\n");
		printf("\t\tfast-hello-interval msec %u\n",
		    iface->fast_hello_interval);
	} else {
		printf("\t\trouter-dead-time %d\n", iface->dead_interval);
		printf("\t\thello-interval %d\n", iface->hello_interval);
	}
	printf("\t\trouter-priority %d\n", iface->priority);
	printf("\t\ttransmit-delay %d\n", iface->transmit_delay);

	printf("\t\tauth-type %s\n", if_auth_name(iface->auth_type));
	switch (iface->auth_type) {
	case AUTH_TYPE_NONE:
		break;
	case AUTH_TYPE_SIMPLE:
		printf("\t\tauth-key XXXXXX\n");
		break;
	case AUTH_TYPE_CRYPT:
		printf("\t\tauth-md-keyid %d\n", iface->auth_keyid);
		TAILQ_FOREACH(md, &iface->auth_md_list, entry)
			printf("\t\tauth-md %d XXXXXX\n", md->keyid);
		break;
	default:
		printf("\t\tunknown auth type!\n");
		break;
@


1.14
log
@allow spf-delay and spf-holdtime to be specified in msec so ospfd can
better respond to rapid topology changes.

developed while working with joshua atterbury
ok claudio@@ as part of a larger diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.13 2009/01/07 21:16:36 claudio Exp $ */
a117 1
	printf("\t\thello-interval %d\n", iface->hello_interval);
d126 8
a133 1
	printf("\t\trouter-dead-time %d\n", iface->dead_interval);
@


1.13
log
@Full stub area support. This allows ABRs to announce a default network
summary LSA into stub areas so that these routers are able to reach the
outside of the area.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.12 2008/11/24 18:28:02 claudio Exp $ */
d58 2
a59 2
	printf("spf-delay %u\n", conf->spf_delay);
	printf("spf-holdtime %u\n", conf->spf_hold_time);
@


1.12
log
@Initial support for stub areas. The bit still missing is the redistribution
of the default summary net lsa on ABRs but that is comming. OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.11 2007/09/30 13:28:09 claudio Exp $ */
d33 1
a33 1
void	print_redistribute(struct ospfd_conf *);
d55 1
a55 1
	print_redistribute(conf);
d72 1
a72 1
print_redistribute(struct ospfd_conf *conf)
d76 1
a76 4
	if (conf->redistribute & REDISTRIBUTE_DEFAULT)
		printf("redistribute default\n");

	SIMPLEQ_FOREACH(r, &conf->redist_list, entry) {
d93 3
d163 9
a171 2
		if (area->stub)
			printf("\tstub\n");
@


1.11
log
@When printing the config always include the interface IP address.
Without this multiple networks on one interface could not be distinguished.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.10 2007/06/19 16:45:15 reyk Exp $ */
d163 2
@


1.10
log
@add support for mapping route labels to AS-external route tags.

manpage bits from jmc@@
ok norby@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.9 2007/05/29 22:08:25 claudio Exp $ */
d116 1
a116 1
	printf("\tinterface %s {\n", iface->name);
@


1.9
log
@Demote support for ospfd. It is possible to specify a demote group on
interfaces and areas. With this carp setups using ospfd are more reliable
because we can fail over if the OSPF connectivity is (partially) lost.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.8 2007/03/22 16:00:46 claudio Exp $ */
d34 1
d56 1
d98 11
@


1.8
log
@s/%ssredistribute/%sredistribute/. One s is enough and makes -nv output
a valid config file again.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.7 2007/03/21 10:54:30 claudio Exp $ */
d110 2
d150 3
@


1.7
log
@Add support for RFC 3137: OSPF Stub Router Advertisement
This allows ospfd to announce networks without the need to transit traffic.
stub router is enabled if the fib is not coupled, net.inet.ip.forwarding is
not 1 or if the stub router global config option is set to yes.
OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.6 2006/11/09 03:59:54 joel Exp $ */
d90 1
a90 1
			printf("%ssredistribute %s/%d\n",
@


1.6
log
@Properly indicate the state of "fib-update"

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.5 2006/05/31 03:59:51 claudio Exp $ */
d50 3
@


1.5
log
@Support for "[no] redistribute 10.6/16", all routes that match into this
range will match this "rule". This should be it, now it is time to write
some documentation.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.4 2006/05/31 03:24:06 claudio Exp $ */
d41 3
a43 1
	if (conf->flags |= OSPFD_FLAG_NO_FIB_UPDATE)
a44 2
	else
		printf("fib-update no\n");
@


1.4
log
@More redistribute fun. Add a possibility to deny redistribution of specified
routes via "no redistribute rtlabel admin". Redistribute rules are parsed
in order and the first match is used. Only exception is "redistribute default"
Which is independent of the other rules and can't be negated.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.3 2006/05/30 22:06:14 claudio Exp $ */
d87 3
a89 1
			/* ignore for now */
@


1.3
log
@Now that rtlabels are accessable via sysctl we can use route lables to
define which routes should be redistributed via OSPF. So now you can
define the export list on a fine graded basis. More to come... OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.2 2005/10/19 22:00:37 stevesk Exp $ */
d32 1
d57 9
d75 1
a75 1
		switch (r->type) {
d77 1
a77 1
			printf("redistribute static\n");
d80 1
a80 1
			printf("redistribute connected\n");
d83 2
a84 2
			printf("redistribute rtlabel %s\n",
			    rtlabel_id2name(r->label));
@


1.2
log
@small cleanups while reading; ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.1 2005/05/26 18:46:16 norby Exp $ */
d31 3
a33 2
void	 print_mainconf(struct ospfd_conf *);
void	 print_iface(struct iface *);
d38 2
a44 9
	if (conf->redistribute_flags & REDISTRIBUTE_STATIC)
		printf("redistribute static\n");
	if (conf->redistribute_flags & REDISTRIBUTE_CONNECTED)
		printf("redistribute connected\n");
	if (conf->redistribute_flags & REDISTRIBUTE_DEFAULT)
		printf("redistribute default\n");
	if (conf->redistribute_flags == 0)
		printf("redistribute none\n");

d50 1
a50 1
	printf("router-id %s\n", inet_ntoa(conf->rtr_id));
d54 27
@


1.1
log
@Support dumping the configuration the way bgpd(8) does it.

This makes it possible to have ospfd(8) parse a configuration file and
display the parsed result.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a29 1
#include "log.h"
@

