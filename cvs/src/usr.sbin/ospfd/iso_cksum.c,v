head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.44
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.40
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.42
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.34
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.38
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.36
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.32
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.30
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.28
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.26
	OPENBSD_5_0:1.5.0.24
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.22
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.20
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.16
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.18
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.02.03.12.51.12;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.19.15.44.25;	author stevesk;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.10.13.30;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.12.09.51.58;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.28.14.05.40;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Cleanup and "simplify" iso checksum implementation. OK norby@@
@
text
@/*	$OpenBSD: iso_cksum.c,v 1.4 2005/10/19 15:44:25 stevesk Exp $ */

/*
 * Copyright (c) 2005 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include "ospfd.h"

/* implementation of Fletcher Checksum -- see RFC 1008 for more info */

/* pos needs to be 0 for verify and 2 <= pos < len for calculation */
u_int16_t
iso_cksum(void *buf, u_int16_t len, u_int16_t pos)
{
	u_int8_t	*p = buf;
	int		 c0 = 0, c1 = 0, x;	/* counters */
	u_int16_t	 sop;

	sop = len - pos - 1;	/* pos is an offset (pos 2 is 3rd element) */
	p += 2;			/* jump over age field */
	len -= 2;
	while (len--) {
		c0 += *p++;
		c1 += c0;
		if ((len & 0xfff) == 0) {
			/* overflow protection */
			c0 %= 255;
			c1 %= 255;
		}
	}

	if (pos) {
		x = ((sop * c0 - c1)) % 255;
		if (x <= 0)
			x += 255;
		c1 = 510 - c0 - x;
		if (c1 > 255)
			c1 -= 255;
		c0 = x;
	}

	return (c0 << 8 | c1);
}
@


1.4
log
@header cleaning; ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_cksum.c,v 1.3 2005/10/12 10:13:30 claudio Exp $ */
d23 2
d30 1
a30 2
	int		 c0 = 0, c1 = 0;	/* counters */
	int		 r0, r1;		/* results */
d33 2
a34 2
	sop = len - pos - 1;	/* pos is an offset (pos 2 is at len 3) */
	p += 2;
a44 2
	r0 = c0 = c0 % 255;
	r1 = c1 % 255;
d47 7
a53 6
		r0 = ((sop * r0 - r1)) % 255;
		if (r0 <= 0)
			r0 += 255;
		r1 = 510 - r0 - c0;
		if (r1 > 255)
			r1 -= 255;
d56 1
a56 1
	return (r0 << 8 | r1);
@


1.3
log
@Revert last commit. That file was not intended to be commited.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_cksum.c,v 1.1 2005/01/28 14:05:40 claudio Exp $ */
a21 1
#include "log.h"
@


1.2
log
@Fix the flooding procedure. Violate the RFC else many BAD_LS_REQ events and
session drops happend while booting up. If a router is conected to a other
router over two different interface one session will be unable to load until
the other one is in state FULL. ospfd no longer issues a BAD_LS_REQ event
if the LSA is equal to the one in table but if the sent lsa is older a
BAD_LS_REQ event is still issued.  OK norby@@
@
text
@a23 2
/* implementation of Fletcher Checksum -- see RFC 1008 for more info */

d29 2
a30 1
	int		 c0 = 0, c1 = 0, x;	/* counters */
d33 2
a34 2
	sop = len - pos - 1;	/* pos is an offset (pos 2 is 3rd element) */
	p += 2;			/* jump over age field */
a43 4
#ifdef DEBUG
		if (c0 + 256 < c0 || c1 + 256 < c1)
			fatalx("iso_cksum: overflowed");
#endif
d45 2
d49 6
a54 13
		x = ((sop * c0 - c1)) % 255;
		if (x <= 0)
			x += 255;
#if 1
		c1 = 510 - c0 - x;
		if (c1 > 255)
			c1 -= 255;
#else
		c1 = (-c0 - x) % 255;
		if (c1 < 0)
			c1 += 255;
#endif
		c0 = x;
d57 1
a57 1
	return (c0 << 8 | c1);
@


1.1
log
@Welcome ospfd
started by Esben Norby some time ago by using the imsg/three process framework
of bgpd. He implemented the basic concept plus the ospf finite state machines.
Later I joined and helped him cleanup, debug and extend his work.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.
status:
The basic protocol works for broadcast networks and the LS database is
synchronized and updated. It is not possible to be DR or BDR on a network
and other interface types like point-to-point are not yet supported.
The shortest path tree is not calculated and so no routing information is
exchanged with the kernel FIB.

Not yet connected to the builds.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d24 2
d31 1
a31 2
	int		 c0 = 0, c1 = 0;	/* counters */
	int		 r0, r1;		/* results */
d34 2
a35 2
	sop = len - pos - 1;	/* pos is an offset (pos 2 is at len 3) */
	p += 2;
d45 4
a49 2
	r0 = c0 = c0 % 255;
	r1 = c1 % 255;
d52 13
a64 6
		r0 = ((sop * r0 - r1)) % 255;
		if (r0 <= 0)
			r0 += 255;
		r1 = 510 - r0 - c0;
		if (r1 > 255)
			r1 -= 255;
d67 1
a67 1
	return (r0 << 8 | r1);
@

