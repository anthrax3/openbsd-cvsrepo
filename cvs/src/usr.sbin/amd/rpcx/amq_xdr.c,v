head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.48
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.22
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.01.21.09.50.51;	author guenther;	state Exp;
branches;
next	1.6;
commitid	vWGytClgdFVZOjI5;

1.6
date	2015.01.21.08.24.41;	author guenther;	state Exp;
branches;
next	1.5;
commitid	fwWHCHQH9uktPmic;

1.5
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.05.41.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.03.08.29.32;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	97.01.31.14.42.23;	author graichen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@regen
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "amq.h"

bool_t
xdr_amq_string(XDR *xdrs, amq_string *objp)
{

	if (!xdr_string(xdrs, objp, AMQ_STRLEN))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_time_type(XDR *xdrs, time_type *objp)
{

	if (!xdr_int64_t(xdrs, objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_tree(XDR *xdrs, amq_mount_tree *objp)
{


	if (!xdr_amq_string(xdrs, &objp->mt_mountinfo))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mt_directory))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mt_mountpoint))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mt_type))
		return (FALSE);
	if (!xdr_time_type(xdrs, &objp->mt_mounttime))
		return (FALSE);
	if (!xdr_u_short(xdrs, &objp->mt_mountuid))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mt_getattr))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mt_lookup))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mt_readdir))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mt_readlink))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mt_statfs))
		return (FALSE);
	if (!xdr_pointer(xdrs, (char **)&objp->mt_next, sizeof(amq_mount_tree), (xdrproc_t)xdr_amq_mount_tree))
		return (FALSE);
	if (!xdr_pointer(xdrs, (char **)&objp->mt_child, sizeof(amq_mount_tree), (xdrproc_t)xdr_amq_mount_tree))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_tree_p(XDR *xdrs, amq_mount_tree_p *objp)
{

	if (!xdr_pointer(xdrs, (char **)objp, sizeof(amq_mount_tree), (xdrproc_t)xdr_amq_mount_tree))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_info(XDR *xdrs, amq_mount_info *objp)
{


	if (!xdr_amq_string(xdrs, &objp->mi_type))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mi_mountpt))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mi_mountinfo))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->mi_fserver))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mi_error))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mi_refc))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->mi_up))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_info_list(XDR *xdrs, amq_mount_info_list *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->amq_mount_info_list_val,
	    (u_int *)&objp->amq_mount_info_list_len,
	    ~0, sizeof(amq_mount_info), (xdrproc_t)xdr_amq_mount_info))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_tree_list(XDR *xdrs, amq_mount_tree_list *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->amq_mount_tree_list_val,
	    (u_int *)&objp->amq_mount_tree_list_len,
	    ~0, sizeof(amq_mount_tree_p), (xdrproc_t)xdr_amq_mount_tree_p))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_mount_stats(XDR *xdrs, amq_mount_stats *objp)
{


	if (!xdr_int(xdrs, &objp->as_drops))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->as_stale))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->as_mok))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->as_merr))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->as_uerr))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_opt(XDR *xdrs, amq_opt *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_amq_setopt(XDR *xdrs, amq_setopt *objp)
{


	if (!xdr_amq_opt(xdrs, &objp->as_opt))
		return (FALSE);
	if (!xdr_amq_string(xdrs, &objp->as_str))
		return (FALSE);
	return (TRUE);
}
@


1.6
log
@Regenerate the amq RPC stubs with a -current rpcgen, with some
post-processing of the server stub to match previous local changes.
This corrects the type handling of mt_mounttime, so "amq /mountpoint"
doesn't segv trying to treat a time_t as a pointer.
With the file (re)generation fixed, we can more easily update the
protocol to support 64bit time_t...
@
text
@d21 1
a21 1
	if (!xdr_int(xdrs, objp))
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 2
a3 35
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)amq_xdr.c	8.1 (Berkeley) 6/6/93
 *	$Id: amq_xdr.c,v 1.4 2002/09/10 05:41:28 deraadt Exp $
 *
a5 1
#include "am.h"
d11 2
a12 1
	if (!xdr_string(xdrs, objp, AMQ_STRLEN)) {
a13 1
	}
d20 2
a21 1
	if (!xdr_int(xdrs, (int *) objp)) {
a22 1
	}
d29 3
a31 1
	if (!xdr_amq_string(xdrs, &objp->mt_mountinfo)) {
d33 1
a33 2
	}
	if (!xdr_amq_string(xdrs, &objp->mt_directory)) {
d35 1
a35 2
	}
	if (!xdr_amq_string(xdrs, &objp->mt_mountpoint)) {
d37 1
a37 2
	}
	if (!xdr_amq_string(xdrs, &objp->mt_type)) {
d39 1
a39 2
	}
	if (!xdr_time_type(xdrs, &objp->mt_mounttime)) {
d41 1
a41 2
	}
	if (!xdr_u_short(xdrs, &objp->mt_mountuid)) {
d43 1
a43 2
	}
	if (!xdr_int(xdrs, &objp->mt_getattr)) {
d45 1
a45 2
	}
	if (!xdr_int(xdrs, &objp->mt_lookup)) {
d47 1
a47 2
	}
	if (!xdr_int(xdrs, &objp->mt_readdir)) {
d49 1
a49 2
	}
	if (!xdr_int(xdrs, &objp->mt_readlink)) {
d51 1
a51 2
	}
	if (!xdr_int(xdrs, &objp->mt_statfs)) {
d53 1
a53 3
	}
	if (!xdr_pointer(xdrs, (char **)&objp->mt_next,
	    sizeof(amq_mount_tree), xdr_amq_mount_tree)) {
d55 1
a55 3
	}
	if (!xdr_pointer(xdrs, (char **)&objp->mt_child,
	    sizeof(amq_mount_tree), xdr_amq_mount_tree)) {
a56 1
	}
d63 2
a64 2
	if (!xdr_pointer(xdrs, (char **)objp, sizeof(amq_mount_tree),
	    xdr_amq_mount_tree)) {
a65 1
	}
d72 3
a74 1
	if (!xdr_amq_string(xdrs, &objp->mi_type)) {
d76 1
a76 2
	}
	if (!xdr_amq_string(xdrs, &objp->mi_mountpt)) {
d78 1
a78 2
	}
	if (!xdr_amq_string(xdrs, &objp->mi_mountinfo)) {
d80 1
a80 2
	}
	if (!xdr_amq_string(xdrs, &objp->mi_fserver)) {
d82 1
a82 2
	}
	if (!xdr_int(xdrs, &objp->mi_error)) {
d84 1
a84 2
	}
	if (!xdr_int(xdrs, &objp->mi_refc)) {
d86 1
a86 2
	}
	if (!xdr_int(xdrs, &objp->mi_up)) {
a87 1
	}
d94 1
d96 2
a97 2
	    (u_int *)&objp->amq_mount_info_list_len, ~0,
	    sizeof(amq_mount_info), xdr_amq_mount_info)) {
a98 1
	}
d105 1
d107 2
a108 2
	    (u_int *)&objp->amq_mount_tree_list_len, ~0,
	    sizeof(amq_mount_tree_p), xdr_amq_mount_tree_p)) {
a109 1
	}
d116 3
a118 1
	if (!xdr_int(xdrs, &objp->as_drops)) {
d120 1
a120 2
	}
	if (!xdr_int(xdrs, &objp->as_stale)) {
d122 1
a122 2
	}
	if (!xdr_int(xdrs, &objp->as_mok)) {
d124 1
a124 2
	}
	if (!xdr_int(xdrs, &objp->as_merr)) {
d126 1
a126 2
	}
	if (!xdr_int(xdrs, &objp->as_uerr)) {
a127 1
	}
d134 2
a135 1
	if (!xdr_enum(xdrs, (enum_t *)objp)) {
a136 1
	}
d143 3
a145 1
	if (!xdr_amq_opt(xdrs, &objp->as_opt)) {
d147 1
a147 2
	}
	if (!xdr_amq_string(xdrs, &objp->as_str)) {
a148 1
	}
@


1.4
log
@knf
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: amq_xdr.c,v 1.3 2002/08/03 08:29:32 pvalchev Exp $
@


1.3
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d39 1
a39 1
 *	$Id: amq_xdr.c,v 1.2 1997/01/31 14:42:23 graichen Exp $
d100 2
a101 1
	if (!xdr_pointer(xdrs, (char **)&objp->mt_next, sizeof(amq_mount_tree), xdr_amq_mount_tree)) {
d104 2
a105 1
	if (!xdr_pointer(xdrs, (char **)&objp->mt_child, sizeof(amq_mount_tree), xdr_amq_mount_tree)) {
d114 2
a115 1
	if (!xdr_pointer(xdrs, (char **)objp, sizeof(amq_mount_tree), xdr_amq_mount_tree)) {
d151 3
a153 1
	if (!xdr_array(xdrs, (char **)&objp->amq_mount_info_list_val, (u_int *)&objp->amq_mount_info_list_len, ~0, sizeof(amq_mount_info), xdr_amq_mount_info)) {
d162 3
a164 1
	if (!xdr_array(xdrs, (char **)&objp->amq_mount_tree_list_val, (u_int *)&objp->amq_mount_tree_list_len, ~0, sizeof(amq_mount_tree_p), xdr_amq_mount_tree_p)) {
@


1.2
log
@make amd 64bit ready for the alpha (from NetBSD/thorpej)
@
text
@d39 1
a39 1
 *	$Id: amq_xdr.c,v 1.1.1.1 1995/10/18 08:47:23 deraadt Exp $
a45 1

d47 1
a47 3
xdr_amq_string(xdrs, objp)
	XDR *xdrs;
	amq_string *objp;
a54 3



d56 1
a56 3
xdr_time_type(xdrs, objp)
	XDR *xdrs;
	time_type *objp;
a63 3



d65 1
a65 3
xdr_amq_mount_tree(xdrs, objp)
	XDR *xdrs;
	amq_mount_tree *objp;
a108 3



d110 1
a110 3
xdr_amq_mount_tree_p(xdrs, objp)
	XDR *xdrs;
	amq_mount_tree_p *objp;
a117 2


d119 1
a119 3
xdr_amq_mount_info(xdrs, objp)
	XDR *xdrs;
	amq_mount_info *objp;
a144 2


d146 1
a146 3
xdr_amq_mount_info_list(xdrs, objp)
	XDR *xdrs;
	amq_mount_info_list *objp;
a153 2


d155 1
a155 3
xdr_amq_mount_tree_list(xdrs, objp)
	XDR *xdrs;
	amq_mount_tree_list *objp;
a162 3



d164 1
a164 3
xdr_amq_mount_stats(xdrs, objp)
	XDR *xdrs;
	amq_mount_stats *objp;
a183 3



d185 1
a185 3
xdr_amq_opt(xdrs, objp)
	XDR *xdrs;
	amq_opt *objp;
a192 3



d194 1
a194 3
xdr_amq_setopt(xdrs, objp)
	XDR *xdrs;
	amq_setopt *objp;
a203 2


@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: amq_xdr.c,v 1.3 1994/12/08 21:41:23 christos Exp $
d66 1
a66 1
	if (!xdr_long(xdrs, (long *) objp)) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
