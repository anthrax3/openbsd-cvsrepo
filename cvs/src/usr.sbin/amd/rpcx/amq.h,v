head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.48
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.46
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.22
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.01.21.09.50.50;	author guenther;	state Exp;
branches;
next	1.6;
commitid	vWGytClgdFVZOjI5;

1.6
date	2015.01.21.08.24.41;	author guenther;	state Exp;
branches;
next	1.5;
commitid	fwWHCHQH9uktPmic;

1.5
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.4;
commitid	RhupU2WFUkfzry1g;

1.4
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	97.01.31.14.42.22;	author graichen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.22;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@regen
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AMQ_H_RPCGEN
#define _AMQ_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define AMQ_STRLEN 1024

typedef char *amq_string;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_string(XDR *, amq_string *);
#elif defined(__STDC__)
extern bool_t xdr_amq_string(XDR *, amq_string *);
#else /* Old Style C */
bool_t xdr_amq_string();
#endif /* Old Style C */


typedef int64_t time_type;
#ifdef __cplusplus
extern "C" bool_t xdr_time_type(XDR *, time_type *);
#elif defined(__STDC__)
extern bool_t xdr_time_type(XDR *, time_type *);
#else /* Old Style C */
bool_t xdr_time_type();
#endif /* Old Style C */


struct amq_mount_tree {
	amq_string mt_mountinfo;
	amq_string mt_directory;
	amq_string mt_mountpoint;
	amq_string mt_type;
	time_type mt_mounttime;
	u_short mt_mountuid;
	int mt_getattr;
	int mt_lookup;
	int mt_readdir;
	int mt_readlink;
	int mt_statfs;
	struct amq_mount_tree *mt_next;
	struct amq_mount_tree *mt_child;
};
typedef struct amq_mount_tree amq_mount_tree;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_tree(XDR *, amq_mount_tree *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_tree(XDR *, amq_mount_tree *);
#else /* Old Style C */
bool_t xdr_amq_mount_tree();
#endif /* Old Style C */


typedef amq_mount_tree *amq_mount_tree_p;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_tree_p(XDR *, amq_mount_tree_p *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_tree_p(XDR *, amq_mount_tree_p *);
#else /* Old Style C */
bool_t xdr_amq_mount_tree_p();
#endif /* Old Style C */


struct amq_mount_info {
	amq_string mi_type;
	amq_string mi_mountpt;
	amq_string mi_mountinfo;
	amq_string mi_fserver;
	int mi_error;
	int mi_refc;
	int mi_up;
};
typedef struct amq_mount_info amq_mount_info;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_info(XDR *, amq_mount_info *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_info(XDR *, amq_mount_info *);
#else /* Old Style C */
bool_t xdr_amq_mount_info();
#endif /* Old Style C */


typedef struct {
	u_int amq_mount_info_list_len;
	amq_mount_info *amq_mount_info_list_val;
} amq_mount_info_list;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_info_list(XDR *, amq_mount_info_list *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_info_list(XDR *, amq_mount_info_list *);
#else /* Old Style C */
bool_t xdr_amq_mount_info_list();
#endif /* Old Style C */


typedef struct {
	u_int amq_mount_tree_list_len;
	amq_mount_tree_p *amq_mount_tree_list_val;
} amq_mount_tree_list;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_tree_list(XDR *, amq_mount_tree_list *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_tree_list(XDR *, amq_mount_tree_list *);
#else /* Old Style C */
bool_t xdr_amq_mount_tree_list();
#endif /* Old Style C */


struct amq_mount_stats {
	int as_drops;
	int as_stale;
	int as_mok;
	int as_merr;
	int as_uerr;
};
typedef struct amq_mount_stats amq_mount_stats;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_mount_stats(XDR *, amq_mount_stats *);
#elif defined(__STDC__)
extern bool_t xdr_amq_mount_stats(XDR *, amq_mount_stats *);
#else /* Old Style C */
bool_t xdr_amq_mount_stats();
#endif /* Old Style C */


enum amq_opt {
	AMOPT_DEBUG = 0,
	AMOPT_LOGFILE = 1,
	AMOPT_XLOG = 2,
	AMOPT_FLUSHMAPC = 3
};
typedef enum amq_opt amq_opt;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_opt(XDR *, amq_opt *);
#elif defined(__STDC__)
extern bool_t xdr_amq_opt(XDR *, amq_opt *);
#else /* Old Style C */
bool_t xdr_amq_opt();
#endif /* Old Style C */


struct amq_setopt {
	amq_opt as_opt;
	amq_string as_str;
};
typedef struct amq_setopt amq_setopt;
#ifdef __cplusplus
extern "C" bool_t xdr_amq_setopt(XDR *, amq_setopt *);
#elif defined(__STDC__)
extern bool_t xdr_amq_setopt(XDR *, amq_setopt *);
#else /* Old Style C */
bool_t xdr_amq_setopt();
#endif /* Old Style C */


#define AMQ_PROGRAM ((u_long)300019)
#define AMQ_VERSION ((u_long)57)

#ifdef __cplusplus
#define AMQPROC_NULL ((u_long)0)
extern "C" void * amqproc_null_57(void *, CLIENT *);
extern "C" void * amqproc_null_57_svc(void *, struct svc_req *);
#define AMQPROC_MNTTREE ((u_long)1)
extern "C" amq_mount_tree_p * amqproc_mnttree_57(amq_string *, CLIENT *);
extern "C" amq_mount_tree_p * amqproc_mnttree_57_svc(amq_string *, struct svc_req *);
#define AMQPROC_UMNT ((u_long)2)
extern "C" void * amqproc_umnt_57(amq_string *, CLIENT *);
extern "C" void * amqproc_umnt_57_svc(amq_string *, struct svc_req *);
#define AMQPROC_STATS ((u_long)3)
extern "C" amq_mount_stats * amqproc_stats_57(void *, CLIENT *);
extern "C" amq_mount_stats * amqproc_stats_57_svc(void *, struct svc_req *);
#define AMQPROC_EXPORT ((u_long)4)
extern "C" amq_mount_tree_list * amqproc_export_57(void *, CLIENT *);
extern "C" amq_mount_tree_list * amqproc_export_57_svc(void *, struct svc_req *);
#define AMQPROC_SETOPT ((u_long)5)
extern "C" int * amqproc_setopt_57(amq_setopt *, CLIENT *);
extern "C" int * amqproc_setopt_57_svc(amq_setopt *, struct svc_req *);
#define AMQPROC_GETMNTFS ((u_long)6)
extern "C" amq_mount_info_list * amqproc_getmntfs_57(void *, CLIENT *);
extern "C" amq_mount_info_list * amqproc_getmntfs_57_svc(void *, struct svc_req *);
#define AMQPROC_GETVERS ((u_long)7)
extern "C" amq_string * amqproc_getvers_57(void *, CLIENT *);
extern "C" amq_string * amqproc_getvers_57_svc(void *, struct svc_req *);

#elif defined(__STDC__)
#define AMQPROC_NULL ((u_long)0)
extern void * amqproc_null_57(void *, CLIENT *);
extern void * amqproc_null_57_svc(void *, struct svc_req *);
#define AMQPROC_MNTTREE ((u_long)1)
extern amq_mount_tree_p * amqproc_mnttree_57(amq_string *, CLIENT *);
extern amq_mount_tree_p * amqproc_mnttree_57_svc(amq_string *, struct svc_req *);
#define AMQPROC_UMNT ((u_long)2)
extern void * amqproc_umnt_57(amq_string *, CLIENT *);
extern void * amqproc_umnt_57_svc(amq_string *, struct svc_req *);
#define AMQPROC_STATS ((u_long)3)
extern amq_mount_stats * amqproc_stats_57(void *, CLIENT *);
extern amq_mount_stats * amqproc_stats_57_svc(void *, struct svc_req *);
#define AMQPROC_EXPORT ((u_long)4)
extern amq_mount_tree_list * amqproc_export_57(void *, CLIENT *);
extern amq_mount_tree_list * amqproc_export_57_svc(void *, struct svc_req *);
#define AMQPROC_SETOPT ((u_long)5)
extern int * amqproc_setopt_57(amq_setopt *, CLIENT *);
extern int * amqproc_setopt_57_svc(amq_setopt *, struct svc_req *);
#define AMQPROC_GETMNTFS ((u_long)6)
extern amq_mount_info_list * amqproc_getmntfs_57(void *, CLIENT *);
extern amq_mount_info_list * amqproc_getmntfs_57_svc(void *, struct svc_req *);
#define AMQPROC_GETVERS ((u_long)7)
extern amq_string * amqproc_getvers_57(void *, CLIENT *);
extern amq_string * amqproc_getvers_57_svc(void *, struct svc_req *);

#else /* Old Style C */
#define AMQPROC_NULL ((u_long)0)
extern void * amqproc_null_57();
extern void * amqproc_null_57_svc();
#define AMQPROC_MNTTREE ((u_long)1)
extern amq_mount_tree_p * amqproc_mnttree_57();
extern amq_mount_tree_p * amqproc_mnttree_57_svc();
#define AMQPROC_UMNT ((u_long)2)
extern void * amqproc_umnt_57();
extern void * amqproc_umnt_57_svc();
#define AMQPROC_STATS ((u_long)3)
extern amq_mount_stats * amqproc_stats_57();
extern amq_mount_stats * amqproc_stats_57_svc();
#define AMQPROC_EXPORT ((u_long)4)
extern amq_mount_tree_list * amqproc_export_57();
extern amq_mount_tree_list * amqproc_export_57_svc();
#define AMQPROC_SETOPT ((u_long)5)
extern int * amqproc_setopt_57();
extern int * amqproc_setopt_57_svc();
#define AMQPROC_GETMNTFS ((u_long)6)
extern amq_mount_info_list * amqproc_getmntfs_57();
extern amq_mount_info_list * amqproc_getmntfs_57_svc();
#define AMQPROC_GETVERS ((u_long)7)
extern amq_string * amqproc_getvers_57();
extern amq_string * amqproc_getvers_57_svc();
#endif /* Old Style C */

#endif /* !_AMQ_H_RPCGEN */
@


1.6
log
@Regenerate the amq RPC stubs with a -current rpcgen, with some
post-processing of the server stub to match previous local changes.
This corrects the type handling of mt_mounttime, so "amq /mountpoint"
doesn't segv trying to treat a time_t as a pointer.
With the file (re)generation fixed, we can more easily update the
protocol to support 64bit time_t...
@
text
@d25 1
a25 1
typedef int time_type;
d163 1
a163 1
#define AMQ_VERSION ((u_long)1)
d167 2
a168 2
extern "C" void * amqproc_null_1(void *, CLIENT *);
extern "C" void * amqproc_null_1_svc(void *, struct svc_req *);
d170 2
a171 2
extern "C" amq_mount_tree_p * amqproc_mnttree_1(amq_string *, CLIENT *);
extern "C" amq_mount_tree_p * amqproc_mnttree_1_svc(amq_string *, struct svc_req *);
d173 2
a174 2
extern "C" void * amqproc_umnt_1(amq_string *, CLIENT *);
extern "C" void * amqproc_umnt_1_svc(amq_string *, struct svc_req *);
d176 2
a177 2
extern "C" amq_mount_stats * amqproc_stats_1(void *, CLIENT *);
extern "C" amq_mount_stats * amqproc_stats_1_svc(void *, struct svc_req *);
d179 2
a180 2
extern "C" amq_mount_tree_list * amqproc_export_1(void *, CLIENT *);
extern "C" amq_mount_tree_list * amqproc_export_1_svc(void *, struct svc_req *);
d182 2
a183 2
extern "C" int * amqproc_setopt_1(amq_setopt *, CLIENT *);
extern "C" int * amqproc_setopt_1_svc(amq_setopt *, struct svc_req *);
d185 5
a189 8
extern "C" amq_mount_info_list * amqproc_getmntfs_1(void *, CLIENT *);
extern "C" amq_mount_info_list * amqproc_getmntfs_1_svc(void *, struct svc_req *);
#define AMQPROC_MOUNT ((u_long)7)
extern "C" int * amqproc_mount_1(amq_string *, CLIENT *);
extern "C" int * amqproc_mount_1_svc(amq_string *, struct svc_req *);
#define AMQPROC_GETVERS ((u_long)8)
extern "C" amq_string * amqproc_getvers_1(void *, CLIENT *);
extern "C" amq_string * amqproc_getvers_1_svc(void *, struct svc_req *);
d193 2
a194 2
extern void * amqproc_null_1(void *, CLIENT *);
extern void * amqproc_null_1_svc(void *, struct svc_req *);
d196 2
a197 2
extern amq_mount_tree_p * amqproc_mnttree_1(amq_string *, CLIENT *);
extern amq_mount_tree_p * amqproc_mnttree_1_svc(amq_string *, struct svc_req *);
d199 2
a200 2
extern void * amqproc_umnt_1(amq_string *, CLIENT *);
extern void * amqproc_umnt_1_svc(amq_string *, struct svc_req *);
d202 2
a203 2
extern amq_mount_stats * amqproc_stats_1(void *, CLIENT *);
extern amq_mount_stats * amqproc_stats_1_svc(void *, struct svc_req *);
d205 2
a206 2
extern amq_mount_tree_list * amqproc_export_1(void *, CLIENT *);
extern amq_mount_tree_list * amqproc_export_1_svc(void *, struct svc_req *);
d208 2
a209 2
extern int * amqproc_setopt_1(amq_setopt *, CLIENT *);
extern int * amqproc_setopt_1_svc(amq_setopt *, struct svc_req *);
d211 5
a215 8
extern amq_mount_info_list * amqproc_getmntfs_1(void *, CLIENT *);
extern amq_mount_info_list * amqproc_getmntfs_1_svc(void *, struct svc_req *);
#define AMQPROC_MOUNT ((u_long)7)
extern int * amqproc_mount_1(amq_string *, CLIENT *);
extern int * amqproc_mount_1_svc(amq_string *, struct svc_req *);
#define AMQPROC_GETVERS ((u_long)8)
extern amq_string * amqproc_getvers_1(void *, CLIENT *);
extern amq_string * amqproc_getvers_1_svc(void *, struct svc_req *);
d219 2
a220 2
extern void * amqproc_null_1();
extern void * amqproc_null_1_svc();
d222 2
a223 2
extern amq_mount_tree_p * amqproc_mnttree_1();
extern amq_mount_tree_p * amqproc_mnttree_1_svc();
d225 2
a226 2
extern void * amqproc_umnt_1();
extern void * amqproc_umnt_1_svc();
d228 2
a229 2
extern amq_mount_stats * amqproc_stats_1();
extern amq_mount_stats * amqproc_stats_1_svc();
d231 2
a232 2
extern amq_mount_tree_list * amqproc_export_1();
extern amq_mount_tree_list * amqproc_export_1_svc();
d234 2
a235 2
extern int * amqproc_setopt_1();
extern int * amqproc_setopt_1_svc();
d237 5
a241 8
extern amq_mount_info_list * amqproc_getmntfs_1();
extern amq_mount_info_list * amqproc_getmntfs_1_svc();
#define AMQPROC_MOUNT ((u_long)7)
extern int * amqproc_mount_1();
extern int * amqproc_mount_1_svc();
#define AMQPROC_GETVERS ((u_long)8)
extern amq_string * amqproc_getvers_1();
extern amq_string * amqproc_getvers_1_svc();
@


1.5
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@d2 2
a3 35
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)amq.h	8.1 (Berkeley) 6/6/93
 *	$Id: amq.h,v 1.4 2003/06/02 23:36:52 millert Exp $
 *
d6 7
d16 17
a32 5
bool_t xdr_amq_string(XDR *, amq_string *);


typedef int *time_type;
bool_t xdr_time_type(XDR *, time_type *);
d51 7
a57 1
bool_t xdr_amq_mount_tree(XDR *, amq_mount_tree *);
d61 7
a67 1
bool_t xdr_amq_mount_tree_p(XDR *, amq_mount_tree_p *);
d80 7
a86 1
bool_t xdr_amq_mount_info(XDR *, amq_mount_info *);
d93 7
a99 1
bool_t xdr_amq_mount_info_list(XDR *, amq_mount_info_list *);
d106 7
a112 1
bool_t xdr_amq_mount_tree_list(XDR *, amq_mount_tree_list *);
d123 7
a129 1
bool_t xdr_amq_mount_stats(XDR *, amq_mount_stats *);
d139 7
a145 1
bool_t xdr_amq_opt(XDR *, amq_opt *);
d153 7
a159 1
bool_t xdr_amq_setopt(XDR *, amq_setopt *);
d164 60
d225 2
a226 2
extern void *amqproc_null_1(void *, CLIENT *);
extern void *amqproc_null_1_svc(void *, struct svc_req *);
d228 2
a229 2
extern amq_mount_tree_p *amqproc_mnttree_1(void *, CLIENT *);
extern amq_mount_tree_p *amqproc_mnttree_1_svc(void *, struct svc_req *);
d231 2
a232 2
extern void *amqproc_umnt_1(void *, CLIENT *);
extern void *amqproc_umnt_1_svc(void *, struct svc_req *);
d234 2
a235 2
extern amq_mount_stats *amqproc_stats_1(void *, CLIENT *);
extern amq_mount_stats *amqproc_stats_1_svc(void *, struct svc_req *);
d237 2
a238 2
extern amq_mount_tree_list *amqproc_export_1(void *, CLIENT *);
extern amq_mount_tree_list *amqproc_export_1_svc(void *, struct svc_req *);
d240 2
a241 2
extern int *amqproc_setopt_1(void *, CLIENT *);
extern int *amqproc_setopt_1_svc(void *, struct svc_req *);
d243 2
a244 2
extern amq_mount_info_list *amqproc_getmntfs_1(void *, CLIENT *);
extern amq_mount_info_list *amqproc_getmntfs_1_svc(void *, struct svc_req *);
d246 2
a247 2
extern int *amqproc_mount_1(void *, CLIENT *);
extern int *amqproc_mount_1_svc(void *, struct svc_req *);
d249 3
a251 2
extern amq_string *amqproc_getvers_1(void *, CLIENT *);
extern amq_string *amqproc_getvers_1_svc(void *, struct svc_req *);
d253 1
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: amq.h,v 1.3 2002/08/05 07:24:26 pvalchev Exp $
d42 1
a42 1
bool_t xdr_amq_string();
d46 1
a46 1
bool_t xdr_time_type();
d65 1
a65 1
bool_t xdr_amq_mount_tree();
d69 1
a69 1
bool_t xdr_amq_mount_tree_p();
d82 1
a82 1
bool_t xdr_amq_mount_info();
d89 1
a89 1
bool_t xdr_amq_mount_info_list();
d96 1
a96 1
bool_t xdr_amq_mount_tree_list();
d107 1
a107 1
bool_t xdr_amq_mount_stats();
d117 1
a117 1
bool_t xdr_amq_opt();
d125 1
a125 1
bool_t xdr_amq_setopt();
d131 2
a132 1
extern void *amqproc_null_1();
d134 2
a135 1
extern amq_mount_tree_p *amqproc_mnttree_1();
d137 2
a138 1
extern void *amqproc_umnt_1();
d140 2
a141 1
extern amq_mount_stats *amqproc_stats_1();
d143 2
a144 1
extern amq_mount_tree_list *amqproc_export_1();
d146 2
a147 1
extern int *amqproc_setopt_1();
d149 2
a150 1
extern amq_mount_info_list *amqproc_getmntfs_1();
d152 2
a153 1
extern int *amqproc_mount_1();
d155 2
a156 1
extern amq_string *amqproc_getvers_1();
@


1.3
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: amq.h,v 1.2 1997/01/31 14:42:22 graichen Exp $
@


1.2
log
@make amd 64bit ready for the alpha (from NetBSD/thorpej)
@
text
@d39 1
a39 1
 *	$Id: amq.h,v 1.1.1.1 1995/10/18 08:47:22 deraadt Exp $
d135 1
a135 1
extern voidp amqproc_null_1();
d139 1
a139 1
extern voidp amqproc_umnt_1();
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: amq.h,v 1.2 1994/06/13 20:50:44 mycroft Exp $
d49 1
a49 1
typedef long *time_type;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
