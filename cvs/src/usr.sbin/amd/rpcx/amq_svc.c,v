head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.14
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.24
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.22
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.01.21.09.50.51;	author guenther;	state Exp;
branches;
next	1.9;
commitid	vWGytClgdFVZOjI5;

1.9
date	2015.01.21.08.24.41;	author guenther;	state Exp;
branches;
next	1.8;
commitid	fwWHCHQH9uktPmic;

1.8
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.7;
commitid	RhupU2WFUkfzry1g;

1.7
date	2003.07.18.22.58.56;	author david;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.10.05.43.50;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.03.08.29.32;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	95.12.18.16.48.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.04.57.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@regen
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "amq.h"
#include "am.h"
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>/* getenv, exit */
#include <rpc/pmap_clnt.h> /* for pmap_unset */
#include <string.h> /* strcmp */ 
#include <netdb.h>
#include <signal.h>
#include <sys/ttycom.h>/* TIOCNOTTY */
#ifdef __cplusplus
#include <sysent.h> /* getdtablesize, open */
#endif /* __cplusplus */
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <syslog.h>
#include <errno.h>

#ifdef __STDC__
#define SIG_PF void(*)(int)
#endif

#ifdef DEBUG
#define RPC_SVC_FG
#endif

#define _RPCSVC_CLOSEDOWN 120
extern int _rpcpmstart;		/* Started by a port monitor ? */
extern int _rpcfdtype;		/* Whether Stream or Datagram ? */


void	amq_program_57(struct svc_req *rqstp, SVCXPRT *transp);

void
amq_program_57(struct svc_req *rqstp, SVCXPRT *transp)
{
	union {
		amq_string amqproc_mnttree_57_arg;
		amq_string amqproc_umnt_57_arg;
		amq_setopt amqproc_setopt_57_arg;
	} argument;
	char *result;
	xdrproc_t xdr_argument, xdr_result;
	char *(*local)(char *, struct svc_req *);
	extern SVCXPRT *lamqp;

	if (transp != lamqp) {
		struct sockaddr_in *fromsin = svc_getcaller(transp);

		syslog(LOG_WARNING,
		    "non-local amq attempt (might be from %s)",
		    inet_ntoa(fromsin->sin_addr));
		svcerr_noproc(transp);
		return;
	}

	switch (rqstp->rq_proc) {
	case AMQPROC_NULL:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) amqproc_null_57_svc;
		break;

	case AMQPROC_MNTTREE:
		xdr_argument = (xdrproc_t) xdr_amq_string;
		xdr_result = (xdrproc_t) xdr_amq_mount_tree_p;
		local = (char *(*)(char *, struct svc_req *)) amqproc_mnttree_57_svc;
		break;

	case AMQPROC_UMNT:
		xdr_argument = (xdrproc_t) xdr_amq_string;
		xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) amqproc_umnt_57_svc;
		break;

	case AMQPROC_STATS:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_amq_mount_stats;
		local = (char *(*)(char *, struct svc_req *)) amqproc_stats_57_svc;
		break;

	case AMQPROC_EXPORT:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_amq_mount_tree_list;
		local = (char *(*)(char *, struct svc_req *)) amqproc_export_57_svc;
		break;

	case AMQPROC_SETOPT:
		xdr_argument = (xdrproc_t) xdr_amq_setopt;
		xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) amqproc_setopt_57_svc;
		break;

	case AMQPROC_GETMNTFS:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_amq_mount_info_list;
		local = (char *(*)(char *, struct svc_req *)) amqproc_getmntfs_57_svc;
		break;

	case AMQPROC_GETVERS:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_amq_string;
		local = (char *(*)(char *, struct svc_req *)) amqproc_getvers_57_svc;
		break;

	default:
		svcerr_noproc(transp);
		return;
	}
	(void) memset((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
		svcerr_decode(transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
		plog(XLOG_FATAL, "unable to free rpc arguments in amqprog");
		going_down(1);
	}
	return;
}
@


1.9
log
@Regenerate the amq RPC stubs with a -current rpcgen, with some
post-processing of the server stub to match previous local changes.
This corrects the type handling of mt_mounttime, so "amq /mountpoint"
doesn't segv trying to treat a time_t as a pointer.
With the file (re)generation fixed, we can more easily update the
protocol to support 64bit time_t...
@
text
@d39 1
a39 1
void	amq_program_1(struct svc_req *rqstp, SVCXPRT *transp);
d42 1
a42 1
amq_program_1(struct svc_req *rqstp, SVCXPRT *transp)
d45 3
a47 4
		amq_string amqproc_mnttree_1_arg;
		amq_string amqproc_umnt_1_arg;
		amq_setopt amqproc_setopt_1_arg;
		amq_string amqproc_mount_1_arg;
d68 1
a68 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_null_1_svc;
d74 1
a74 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_mnttree_1_svc;
d80 1
a80 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_umnt_1_svc;
d86 1
a86 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_stats_1_svc;
d92 1
a92 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_export_1_svc;
d98 1
a98 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_setopt_1_svc;
d104 1
a104 7
		local = (char *(*)(char *, struct svc_req *)) amqproc_getmntfs_1_svc;
		break;

	case AMQPROC_MOUNT:
		xdr_argument = (xdrproc_t) xdr_amq_string;
		xdr_result = (xdrproc_t) xdr_int;
		local = (char *(*)(char *, struct svc_req *)) amqproc_mount_1_svc;
d110 1
a110 1
		local = (char *(*)(char *, struct svc_req *)) amqproc_getvers_1_svc;
@


1.8
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@d2 2
a3 35
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)amq_svc.c	8.1 (Berkeley) 6/6/93
 *	$Id: amq_svc.c,v 1.7 2003/07/18 22:58:56 david Exp $
 *
d6 15
a20 1
#include <sys/types.h>
a22 1
#include <arpa/inet.h>
d24 5
d30 10
a39 3
#include "am.h"
#include "amq.h"
extern bool_t xdr_amq_mount_info_qelem();
d51 2
a52 2
	bool_t (*xdr_argument)(), (*xdr_result)();
	char *(*local)();
d67 3
a69 3
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)()) amqproc_null_1_svc;
d73 3
a75 3
		xdr_argument = xdr_amq_string;
		xdr_result = xdr_amq_mount_tree_p;
		local = (char *(*)()) amqproc_mnttree_1_svc;
d79 3
a81 3
		xdr_argument = xdr_amq_string;
		xdr_result = xdr_void;
		local = (char *(*)()) amqproc_umnt_1_svc;
d85 3
a87 3
		xdr_argument = xdr_void;
		xdr_result = xdr_amq_mount_stats;
		local = (char *(*)()) amqproc_stats_1_svc;
d91 3
a93 3
		xdr_argument = xdr_void;
		xdr_result = xdr_amq_mount_tree_list;
		local = (char *(*)()) amqproc_export_1_svc;
d97 3
a99 3
		xdr_argument = xdr_amq_setopt;
		xdr_result = xdr_int;
		local = (char *(*)()) amqproc_setopt_1_svc;
d103 3
a105 3
		xdr_argument = xdr_void;
		xdr_result = xdr_amq_mount_info_qelem;
		local = (char *(*)()) amqproc_getmntfs_1_svc;
d109 3
a111 3
		xdr_argument = xdr_amq_string;
		xdr_result = xdr_int;
		local = (char *(*)()) amqproc_mount_1_svc;
d115 3
a117 3
		xdr_argument = xdr_void;
		xdr_result = xdr_amq_string;
		local = (char *(*)()) amqproc_getvers_1_svc;
d124 2
a125 2
	bzero((char *)&argument, sizeof(argument));
	if (!svc_getargs(transp, xdr_argument, (char *)&argument)) {
d129 1
a129 1
	result = (*local)(&argument, rqstp);
d133 2
a134 2
	if (!svc_freeargs(transp, xdr_argument, (char *)&argument)) {
		plog(XLOG_FATAL, "unable to free rpc arguments in amqprog_1");
d137 1
@


1.7
log
@add missing includes
ok tedu@@
@
text
@d35 1
a35 1
 *	$Id: amq_svc.c,v 1.6 2003/06/02 23:36:52 millert Exp $
d77 1
a77 1
		local = (char *(*)()) amqproc_null_1;
d83 1
a83 1
		local = (char *(*)()) amqproc_mnttree_1;
d89 1
a89 1
		local = (char *(*)()) amqproc_umnt_1;
d95 1
a95 1
		local = (char *(*)()) amqproc_stats_1;
d101 1
a101 1
		local = (char *(*)()) amqproc_export_1;
d107 1
a107 1
		local = (char *(*)()) amqproc_setopt_1;
d113 1
a113 1
		local = (char *(*)()) amqproc_getmntfs_1;
d119 1
a119 1
		local = (char *(*)()) amqproc_mount_1;
d125 1
a125 1
		local = (char *(*)()) amqproc_getvers_1;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: amq_svc.c,v 1.5 2002/09/10 05:43:50 deraadt Exp $
d40 3
@


1.5
log
@create a 127.0.0.1: socket to match the *: socket upon which amq requests
are serviced, then only respond to amq requests on that particular socket.
we may extend this later to improve nfs protocol handling....
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: amq_svc.c,v 1.4 2002/08/03 08:29:32 pvalchev Exp $
@


1.4
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d39 1
a39 1
 *	$Id: amq_svc.c,v 1.3 1995/12/18 16:48:57 deraadt Exp $
d43 3
d62 11
@


1.3
log
@update from netbsd
@
text
@d39 1
a39 1
 *	$Id: amq_svc.c,v 1.4 1995/12/15 19:08:21 thorpej Exp $
d48 1
a48 3
amq_program_1(rqstp, transp)
	struct svc_req *rqstp;
	SVCXPRT *transp;
a132 1

@


1.2
log
@typecast svc_freeargs() args properly; from bernd@@arresum.inka.de; netbsd pr#1724
@
text
@d39 1
a39 1
 *	$Id: amq_svc.c,v 1.1.1.1 1995/10/18 08:47:23 deraadt Exp $
d122 1
a122 1
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
d130 1
a130 1
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: amq_svc.c,v 1.3 1994/06/13 20:50:50 mycroft Exp $
d122 1
a122 1
	if (!svc_getargs(transp, xdr_argument, &argument)) {
d130 1
a130 1
	if (!svc_freeargs(transp, xdr_argument, &argument)) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
