head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.3.0.48
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.46
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.42
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.40
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.38
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.36
	OPENBSD_5_0:1.3.0.34
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.32
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.30
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.24
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.22
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.20
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.18
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.16
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.14
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.01.22.03.43.58;	author guenther;	state Exp;
branches;
next	1.4;
commitid	rWRB7wdvhHzZsMSB;

1.4
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.3;
commitid	RhupU2WFUkfzry1g;

1.3
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.26.03.01.32;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@amd's nfs_prot.x file has some tweaks from the standard; automate them with ed.
Regenerate the amd's NFS RPC stubs with a current rpcgen, automating the
  post-generation tweaks to the svc stubs.  However, do follow the modern
  naming style where the svc stubs have a _svc suffix.
As a side benefit, this eliminates the need to #include <nfs/nfsproto.h>
This is all a prelude to updating amd to talk NFSv3 with the kernel for
  its own "toplvl" mounts, to squash another y2038 issue.
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "nfs_prot.h"
#include "am.h"
#include <arpa/inet.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>/* getenv, exit */
#include <rpc/pmap_clnt.h> /* for pmap_unset */
#include <string.h> /* strcmp */ 
#include <netdb.h>
#include <signal.h>
#include <sys/ttycom.h>/* TIOCNOTTY */
#ifdef __cplusplus
#include <sysent.h> /* getdtablesize, open */
#endif /* __cplusplus */
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <syslog.h>
#include <errno.h>

#ifdef __STDC__
#define SIG_PF void(*)(int)
#endif

#ifdef DEBUG
#define RPC_SVC_FG
#endif

#define _RPCSVC_CLOSEDOWN 120
extern int _rpcpmstart;		/* Started by a port monitor ? */
extern int _rpcfdtype;		/* Whether Stream or Datagram ? */


void	nfs_program_2(struct svc_req *rqstp, SVCXPRT *transp);

void
nfs_program_2(struct svc_req *rqstp, SVCXPRT *transp)
{
	union {
		nfs_fh nfsproc_getattr_2_arg;
		sattrargs nfsproc_setattr_2_arg;
		diropargs nfsproc_lookup_2_arg;
		nfs_fh nfsproc_readlink_2_arg;
		readargs nfsproc_read_2_arg;
		writeargs nfsproc_write_2_arg;
		createargs nfsproc_create_2_arg;
		diropargs nfsproc_remove_2_arg;
		renameargs nfsproc_rename_2_arg;
		linkargs nfsproc_link_2_arg;
		symlinkargs nfsproc_symlink_2_arg;
		createargs nfsproc_mkdir_2_arg;
		diropargs nfsproc_rmdir_2_arg;
		readdirargs nfsproc_readdir_2_arg;
		nfs_fh nfsproc_statfs_2_arg;
	} argument;
	char *result;
	xdrproc_t xdr_argument, xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NFSPROC_NULL:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_null_2_svc;
		break;

	case NFSPROC_GETATTR:
		xdr_argument = (xdrproc_t) xdr_nfs_fh;
		xdr_result = (xdrproc_t) xdr_attrstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_getattr_2_svc;
		break;

	case NFSPROC_SETATTR:
		xdr_argument = (xdrproc_t) xdr_sattrargs;
		xdr_result = (xdrproc_t) xdr_attrstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_setattr_2_svc;
		break;

	case NFSPROC_ROOT:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_root_2_svc;
		break;

	case NFSPROC_LOOKUP:
		xdr_argument = (xdrproc_t) xdr_diropargs;
		xdr_result = (xdrproc_t) xdr_diropres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_lookup_2_svc;
		break;

	case NFSPROC_READLINK:
		xdr_argument = (xdrproc_t) xdr_nfs_fh;
		xdr_result = (xdrproc_t) xdr_readlinkres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_readlink_2_svc;
		break;

	case NFSPROC_READ:
		xdr_argument = (xdrproc_t) xdr_readargs;
		xdr_result = (xdrproc_t) xdr_readres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_read_2_svc;
		break;

	case NFSPROC_WRITECACHE:
		xdr_argument = (xdrproc_t) xdr_void;
		xdr_result = (xdrproc_t) xdr_void;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_writecache_2_svc;
		break;

	case NFSPROC_WRITE:
		xdr_argument = (xdrproc_t) xdr_writeargs;
		xdr_result = (xdrproc_t) xdr_attrstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_write_2_svc;
		break;

	case NFSPROC_CREATE:
		xdr_argument = (xdrproc_t) xdr_createargs;
		xdr_result = (xdrproc_t) xdr_diropres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_create_2_svc;
		break;

	case NFSPROC_REMOVE:
		xdr_argument = (xdrproc_t) xdr_diropargs;
		xdr_result = (xdrproc_t) xdr_nfsstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_remove_2_svc;
		break;

	case NFSPROC_RENAME:
		xdr_argument = (xdrproc_t) xdr_renameargs;
		xdr_result = (xdrproc_t) xdr_nfsstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_rename_2_svc;
		break;

	case NFSPROC_LINK:
		xdr_argument = (xdrproc_t) xdr_linkargs;
		xdr_result = (xdrproc_t) xdr_nfsstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_link_2_svc;
		break;

	case NFSPROC_SYMLINK:
		xdr_argument = (xdrproc_t) xdr_symlinkargs;
		xdr_result = (xdrproc_t) xdr_nfsstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_symlink_2_svc;
		break;

	case NFSPROC_MKDIR:
		xdr_argument = (xdrproc_t) xdr_createargs;
		xdr_result = (xdrproc_t) xdr_diropres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_mkdir_2_svc;
		break;

	case NFSPROC_RMDIR:
		xdr_argument = (xdrproc_t) xdr_diropargs;
		xdr_result = (xdrproc_t) xdr_nfsstat;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_rmdir_2_svc;
		break;

	case NFSPROC_READDIR:
		xdr_argument = (xdrproc_t) xdr_readdirargs;
		xdr_result = (xdrproc_t) xdr_readdirres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_readdir_2_svc;
		break;

	case NFSPROC_STATFS:
		xdr_argument = (xdrproc_t) xdr_nfs_fh;
		xdr_result = (xdrproc_t) xdr_statfsres;
		local = (char *(*)(char *, struct svc_req *)) nfsproc_statfs_2_svc;
		break;

	default:
		svcerr_noproc(transp);
		return;
	}
	(void) memset((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
		svcerr_decode(transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {
		svcerr_systemerr(transp);
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
		plog(XLOG_FATAL, "unable to free rpc arguments in nfs_program");
		going_down(1);
	}
	return;
}
@


1.4
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@d2 2
a3 35
 * Copyright (c) 1989 Jan-Simon Pendry
 * Copyright (c) 1989 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)nfs_prot_svc.c	8.1 (Berkeley) 6/6/93
 *	$Id: nfs_prot_svc.c,v 1.3 2003/06/02 23:36:52 millert Exp $
 *
d6 1
d8 32
d62 2
a63 2
	bool_t (*xdr_argument)(), (*xdr_result)();
	char *(*local)(void *, struct svc_req *);
d67 3
a69 3
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_null_2;
d73 3
a75 3
		xdr_argument = xdr_nfs_fh;
		xdr_result = xdr_attrstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_getattr_2;
d79 3
a81 3
		xdr_argument = xdr_sattrargs;
		xdr_result = xdr_attrstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_setattr_2;
d85 3
a87 3
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_root_2;
d91 3
a93 3
		xdr_argument = xdr_diropargs;
		xdr_result = xdr_diropres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_lookup_2;
d97 3
a99 3
		xdr_argument = xdr_nfs_fh;
		xdr_result = xdr_readlinkres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_readlink_2;
d103 3
a105 3
		xdr_argument = xdr_readargs;
		xdr_result = xdr_readres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_read_2;
d109 3
a111 3
		xdr_argument = xdr_void;
		xdr_result = xdr_void;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_writecache_2;
d115 3
a117 3
		xdr_argument = xdr_writeargs;
		xdr_result = xdr_attrstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_write_2;
d121 3
a123 3
		xdr_argument = xdr_createargs;
		xdr_result = xdr_diropres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_create_2;
d127 3
a129 3
		xdr_argument = xdr_diropargs;
		xdr_result = xdr_nfsstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_remove_2;
d133 3
a135 3
		xdr_argument = xdr_renameargs;
		xdr_result = xdr_nfsstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_rename_2;
d139 3
a141 3
		xdr_argument = xdr_linkargs;
		xdr_result = xdr_nfsstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_link_2;
d145 3
a147 3
		xdr_argument = xdr_symlinkargs;
		xdr_result = xdr_nfsstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_symlink_2;
d151 3
a153 3
		xdr_argument = xdr_createargs;
		xdr_result = xdr_diropres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_mkdir_2;
d157 3
a159 3
		xdr_argument = xdr_diropargs;
		xdr_result = xdr_nfsstat;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_rmdir_2;
d163 3
a165 3
		xdr_argument = xdr_readdirargs;
		xdr_result = xdr_readdirres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_readdir_2;
d169 3
a171 3
		xdr_argument = xdr_nfs_fh;
		xdr_result = xdr_statfsres;
		local = (char *(*)(void *, struct svc_req *)) nfsproc_statfs_2;
d178 2
a179 2
	bzero((char *)&argument, sizeof(argument));
	if (!svc_getargs(transp, xdr_argument, (char *)&argument)) {
d183 2
a184 2
	result = (*local)(&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, xdr_result, result))
d186 3
a188 2
	if (!svc_freeargs(transp, xdr_argument, (char *)&argument)) {
		plog(XLOG_FATAL, "unable to free rpc arguments in nfs_program_1");
d191 1
a192 1

@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: nfs_prot_svc.c,v 1.2 2002/08/26 03:01:32 pvalchev Exp $
d41 2
a42 3
void nfs_program_2(rqstp, transp)
struct svc_req *rqstp;
SVCXPRT *transp;
d63 1
a63 1
	char *(*local)();
d69 1
a69 1
		local = (char *(*)()) nfsproc_null_2;
d75 1
a75 1
		local = (char *(*)()) nfsproc_getattr_2;
d81 1
a81 1
		local = (char *(*)()) nfsproc_setattr_2;
d87 1
a87 1
		local = (char *(*)()) nfsproc_root_2;
d93 1
a93 1
		local = (char *(*)()) nfsproc_lookup_2;
d99 1
a99 1
		local = (char *(*)()) nfsproc_readlink_2;
d105 1
a105 1
		local = (char *(*)()) nfsproc_read_2;
d111 1
a111 1
		local = (char *(*)()) nfsproc_writecache_2;
d117 1
a117 1
		local = (char *(*)()) nfsproc_write_2;
d123 1
a123 1
		local = (char *(*)()) nfsproc_create_2;
d129 1
a129 1
		local = (char *(*)()) nfsproc_remove_2;
d135 1
a135 1
		local = (char *(*)()) nfsproc_rename_2;
d141 1
a141 1
		local = (char *(*)()) nfsproc_link_2;
d147 1
a147 1
		local = (char *(*)()) nfsproc_symlink_2;
d153 1
a153 1
		local = (char *(*)()) nfsproc_mkdir_2;
d159 1
a159 1
		local = (char *(*)()) nfsproc_rmdir_2;
d165 1
a165 1
		local = (char *(*)()) nfsproc_readdir_2;
d171 1
a171 1
		local = (char *(*)()) nfsproc_statfs_2;
@


1.2
log
@minor cleanups, correct cast of a svc_getargs() arg; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: nfs_prot_svc.c,v 1.1.1.1 1995/10/18 08:47:23 deraadt Exp $
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: nfs_prot_svc.c,v 1.4 1994/12/08 21:41:25 christos Exp $
d184 1
a184 1
	if (!svc_getargs(transp, xdr_argument, (caddr_t) &argument)) {
d189 1
a189 1
	if (result != NULL && !svc_sendreply(transp, xdr_result, result)) {
d191 1
a191 2
	}
	if (!svc_freeargs(transp, xdr_argument, (caddr_t) &argument)) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
