head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.48
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.46
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.01.22.03.43.58;	author guenther;	state Exp;
branches;
next	1.6;
commitid	rWRB7wdvhHzZsMSB;

1.6
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.5;
commitid	RhupU2WFUkfzry1g;

1.5
date	2014.10.20.02.33.42;	author guenther;	state Exp;
branches;
next	1.4;
commitid	bZbpWDoZDVt0RPe1;

1.4
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.54.58;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@amd's nfs_prot.x file has some tweaks from the standard; automate them with ed.
Regenerate the amd's NFS RPC stubs with a current rpcgen, automating the
  post-generation tweaks to the svc stubs.  However, do follow the modern
  naming style where the svc stubs have a _svc suffix.
As a side benefit, this eliminates the need to #include <nfs/nfsproto.h>
This is all a prelude to updating amd to talk NFSv3 with the kernel for
  its own "toplvl" mounts, to squash another y2038 issue.
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS_PROT_H_RPCGEN
#define _NFS_PROT_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define NFS_PORT 2049
#define NFS_MAXDATA 8192
#define NFS_MAXPATHLEN 1024
#define NFS_MAXNAMLEN 255
#define NFS_FHSIZE 32
#define NFSX_V2FH 32
#define NFSX_V3FHMAX 64
#define NFS_COOKIESIZE 4
#define NFS_FIFO_DEV -1
#define NFSMODE_FMT 0170000
#define NFSMODE_DIR 0040000
#define NFSMODE_CHR 0020000
#define NFSMODE_BLK 0060000
#define NFSMODE_REG 0100000
#define NFSMODE_LNK 0120000
#define NFSMODE_SOCK 0140000
#define NFSMODE_FIFO 0010000
typedef int nfsstat;
#define xdr_nfsstat xdr_int
enum {
	NFS_OK= 0,		/* no error */
	NFSERR_PERM=1,		/* Not owner */
	NFSERR_NOENT=2,		/* No such file or directory */
	NFSERR_IO=5,		/* I/O error */
	NFSERR_NXIO=6,		/* No such device or address */
	NFSERR_ACCES=13,	/* Permission denied */
	NFSERR_EXIST=17,	/* File exists */
	NFSERR_NODEV=19,	/* No such device */
	NFSERR_NOTDIR=20,	/* Not a directory*/
	NFSERR_ISDIR=21,	/* Is a directory */
	NFSERR_FBIG=27,		/* File too large */
	NFSERR_NOSPC=28,	/* No space left on device */
	NFSERR_ROFS=30,		/* Read-only file system */
	NFSERR_NAMETOOLONG=63,	/* File name too long */
	NFSERR_NOTEMPTY=66,	/* Directory not empty */
	NFSERR_DQUOT=69,	/* Disc quota exceeded */
	NFSERR_STALE=70,	/* Stale NFS file handle */
	NFSERR_WFLUSH=99	/* write cache flushed */
};
typedef int ftype;
enum {
	NFNON = 0,	/* non-file */
	NFREG = 1,	/* regular file */
	NFDIR = 2,	/* directory */
	NFBLK = 3,	/* block special */
	NFCHR = 4,	/* character special */
	NFLNK = 5,	/* symbolic link */
	NFSOCK = 6,	/* unix domain sockets */
	NFBAD = 7,	/* unused */
	NFFIFO = 8	/* named pipe */
};

struct nfs_fh {
	char data[NFS_FHSIZE];
};
typedef struct nfs_fh nfs_fh;
#ifdef __cplusplus
extern "C" bool_t xdr_nfs_fh(XDR *, nfs_fh *);
#elif defined(__STDC__)
extern bool_t xdr_nfs_fh(XDR *, nfs_fh *);
#else /* Old Style C */
bool_t xdr_nfs_fh();
#endif /* Old Style C */


struct nfstime {
	u_int seconds;
	u_int useconds;
};
typedef struct nfstime nfstime;
#ifdef __cplusplus
extern "C" bool_t xdr_nfstime(XDR *, nfstime *);
#elif defined(__STDC__)
extern bool_t xdr_nfstime(XDR *, nfstime *);
#else /* Old Style C */
bool_t xdr_nfstime();
#endif /* Old Style C */


struct fattr {
	int type;
	u_int mode;
	u_int nlink;
	u_int uid;
	u_int gid;
	u_int size;
	u_int blocksize;
	u_int rdev;
	u_int blocks;
	u_int fsid;
	u_int fileid;
	nfstime atime;
	nfstime mtime;
	nfstime ctime;
};
typedef struct fattr fattr;
#ifdef __cplusplus
extern "C" bool_t xdr_fattr(XDR *, fattr *);
#elif defined(__STDC__)
extern bool_t xdr_fattr(XDR *, fattr *);
#else /* Old Style C */
bool_t xdr_fattr();
#endif /* Old Style C */


struct sattr {
	u_int mode;
	u_int uid;
	u_int gid;
	u_int size;
	nfstime atime;
	nfstime mtime;
};
typedef struct sattr sattr;
#ifdef __cplusplus
extern "C" bool_t xdr_sattr(XDR *, sattr *);
#elif defined(__STDC__)
extern bool_t xdr_sattr(XDR *, sattr *);
#else /* Old Style C */
bool_t xdr_sattr();
#endif /* Old Style C */


typedef char *filename;
#ifdef __cplusplus
extern "C" bool_t xdr_filename(XDR *, filename *);
#elif defined(__STDC__)
extern bool_t xdr_filename(XDR *, filename *);
#else /* Old Style C */
bool_t xdr_filename();
#endif /* Old Style C */


typedef char *nfspath;
#ifdef __cplusplus
extern "C" bool_t xdr_nfspath(XDR *, nfspath *);
#elif defined(__STDC__)
extern bool_t xdr_nfspath(XDR *, nfspath *);
#else /* Old Style C */
bool_t xdr_nfspath();
#endif /* Old Style C */


struct attrstat {
	int status;
	union {
		fattr attributes;
	} attrstat_u;
};
typedef struct attrstat attrstat;
#ifdef __cplusplus
extern "C" bool_t xdr_attrstat(XDR *, attrstat *);
#elif defined(__STDC__)
extern bool_t xdr_attrstat(XDR *, attrstat *);
#else /* Old Style C */
bool_t xdr_attrstat();
#endif /* Old Style C */


struct sattrargs {
	nfs_fh file;
	sattr attributes;
};
typedef struct sattrargs sattrargs;
#ifdef __cplusplus
extern "C" bool_t xdr_sattrargs(XDR *, sattrargs *);
#elif defined(__STDC__)
extern bool_t xdr_sattrargs(XDR *, sattrargs *);
#else /* Old Style C */
bool_t xdr_sattrargs();
#endif /* Old Style C */


struct diropargs {
	nfs_fh dir;
	filename name;
};
typedef struct diropargs diropargs;
#ifdef __cplusplus
extern "C" bool_t xdr_diropargs(XDR *, diropargs *);
#elif defined(__STDC__)
extern bool_t xdr_diropargs(XDR *, diropargs *);
#else /* Old Style C */
bool_t xdr_diropargs();
#endif /* Old Style C */


struct diropokres {
	nfs_fh file;
	fattr attributes;
};
typedef struct diropokres diropokres;
#ifdef __cplusplus
extern "C" bool_t xdr_diropokres(XDR *, diropokres *);
#elif defined(__STDC__)
extern bool_t xdr_diropokres(XDR *, diropokres *);
#else /* Old Style C */
bool_t xdr_diropokres();
#endif /* Old Style C */


struct diropres {
	int status;
	union {
		diropokres diropres;
	} diropres_u;
};
typedef struct diropres diropres;
#ifdef __cplusplus
extern "C" bool_t xdr_diropres(XDR *, diropres *);
#elif defined(__STDC__)
extern bool_t xdr_diropres(XDR *, diropres *);
#else /* Old Style C */
bool_t xdr_diropres();
#endif /* Old Style C */


struct readlinkres {
	int status;
	union {
		nfspath data;
	} readlinkres_u;
};
typedef struct readlinkres readlinkres;
#ifdef __cplusplus
extern "C" bool_t xdr_readlinkres(XDR *, readlinkres *);
#elif defined(__STDC__)
extern bool_t xdr_readlinkres(XDR *, readlinkres *);
#else /* Old Style C */
bool_t xdr_readlinkres();
#endif /* Old Style C */


struct readargs {
	nfs_fh file;
	u_int offset;
	u_int count;
	u_int totalcount;
};
typedef struct readargs readargs;
#ifdef __cplusplus
extern "C" bool_t xdr_readargs(XDR *, readargs *);
#elif defined(__STDC__)
extern bool_t xdr_readargs(XDR *, readargs *);
#else /* Old Style C */
bool_t xdr_readargs();
#endif /* Old Style C */


struct readokres {
	fattr attributes;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct readokres readokres;
#ifdef __cplusplus
extern "C" bool_t xdr_readokres(XDR *, readokres *);
#elif defined(__STDC__)
extern bool_t xdr_readokres(XDR *, readokres *);
#else /* Old Style C */
bool_t xdr_readokres();
#endif /* Old Style C */


struct readres {
	int status;
	union {
		readokres reply;
	} readres_u;
};
typedef struct readres readres;
#ifdef __cplusplus
extern "C" bool_t xdr_readres(XDR *, readres *);
#elif defined(__STDC__)
extern bool_t xdr_readres(XDR *, readres *);
#else /* Old Style C */
bool_t xdr_readres();
#endif /* Old Style C */


struct writeargs {
	nfs_fh file;
	u_int beginoffset;
	u_int offset;
	u_int totalcount;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct writeargs writeargs;
#ifdef __cplusplus
extern "C" bool_t xdr_writeargs(XDR *, writeargs *);
#elif defined(__STDC__)
extern bool_t xdr_writeargs(XDR *, writeargs *);
#else /* Old Style C */
bool_t xdr_writeargs();
#endif /* Old Style C */


struct createargs {
	diropargs where;
	sattr attributes;
};
typedef struct createargs createargs;
#ifdef __cplusplus
extern "C" bool_t xdr_createargs(XDR *, createargs *);
#elif defined(__STDC__)
extern bool_t xdr_createargs(XDR *, createargs *);
#else /* Old Style C */
bool_t xdr_createargs();
#endif /* Old Style C */


struct renameargs {
	diropargs from;
	diropargs to;
};
typedef struct renameargs renameargs;
#ifdef __cplusplus
extern "C" bool_t xdr_renameargs(XDR *, renameargs *);
#elif defined(__STDC__)
extern bool_t xdr_renameargs(XDR *, renameargs *);
#else /* Old Style C */
bool_t xdr_renameargs();
#endif /* Old Style C */


struct linkargs {
	nfs_fh from;
	diropargs to;
};
typedef struct linkargs linkargs;
#ifdef __cplusplus
extern "C" bool_t xdr_linkargs(XDR *, linkargs *);
#elif defined(__STDC__)
extern bool_t xdr_linkargs(XDR *, linkargs *);
#else /* Old Style C */
bool_t xdr_linkargs();
#endif /* Old Style C */


struct symlinkargs {
	diropargs from;
	nfspath to;
	sattr attributes;
};
typedef struct symlinkargs symlinkargs;
#ifdef __cplusplus
extern "C" bool_t xdr_symlinkargs(XDR *, symlinkargs *);
#elif defined(__STDC__)
extern bool_t xdr_symlinkargs(XDR *, symlinkargs *);
#else /* Old Style C */
bool_t xdr_symlinkargs();
#endif /* Old Style C */


typedef char nfscookie[NFS_COOKIESIZE];
#ifdef __cplusplus
extern "C" bool_t xdr_nfscookie(XDR *, nfscookie );
#elif defined(__STDC__)
extern bool_t xdr_nfscookie(XDR *, nfscookie );
#else /* Old Style C */
bool_t xdr_nfscookie();
#endif /* Old Style C */


struct readdirargs {
	nfs_fh dir;
	nfscookie cookie;
	u_int count;
};
typedef struct readdirargs readdirargs;
#ifdef __cplusplus
extern "C" bool_t xdr_readdirargs(XDR *, readdirargs *);
#elif defined(__STDC__)
extern bool_t xdr_readdirargs(XDR *, readdirargs *);
#else /* Old Style C */
bool_t xdr_readdirargs();
#endif /* Old Style C */


struct entry {
	u_int fileid;
	filename name;
	nfscookie cookie;
	struct entry *nextentry;
};
typedef struct entry entry;
#ifdef __cplusplus
extern "C" bool_t xdr_entry(XDR *, entry *);
#elif defined(__STDC__)
extern bool_t xdr_entry(XDR *, entry *);
#else /* Old Style C */
bool_t xdr_entry();
#endif /* Old Style C */


struct dirlist {
	entry *entries;
	bool_t eof;
};
typedef struct dirlist dirlist;
#ifdef __cplusplus
extern "C" bool_t xdr_dirlist(XDR *, dirlist *);
#elif defined(__STDC__)
extern bool_t xdr_dirlist(XDR *, dirlist *);
#else /* Old Style C */
bool_t xdr_dirlist();
#endif /* Old Style C */


struct readdirres {
	int status;
	union {
		dirlist reply;
	} readdirres_u;
};
typedef struct readdirres readdirres;
#ifdef __cplusplus
extern "C" bool_t xdr_readdirres(XDR *, readdirres *);
#elif defined(__STDC__)
extern bool_t xdr_readdirres(XDR *, readdirres *);
#else /* Old Style C */
bool_t xdr_readdirres();
#endif /* Old Style C */


struct statfsokres {
	u_int tsize;
	u_int bsize;
	u_int blocks;
	u_int bfree;
	u_int bavail;
};
typedef struct statfsokres statfsokres;
#ifdef __cplusplus
extern "C" bool_t xdr_statfsokres(XDR *, statfsokres *);
#elif defined(__STDC__)
extern bool_t xdr_statfsokres(XDR *, statfsokres *);
#else /* Old Style C */
bool_t xdr_statfsokres();
#endif /* Old Style C */


struct statfsres {
	int status;
	union {
		statfsokres reply;
	} statfsres_u;
};
typedef struct statfsres statfsres;
#ifdef __cplusplus
extern "C" bool_t xdr_statfsres(XDR *, statfsres *);
#elif defined(__STDC__)
extern bool_t xdr_statfsres(XDR *, statfsres *);
#else /* Old Style C */
bool_t xdr_statfsres();
#endif /* Old Style C */


#define NFS_PROGRAM ((u_long)100003)
#define NFS_VERSION ((u_long)2)

#ifdef __cplusplus
#define NFSPROC_NULL ((u_long)0)
extern "C" void * nfsproc_null_2(void *, CLIENT *);
extern "C" void * nfsproc_null_2_svc(void *, struct svc_req *);
#define NFSPROC_GETATTR ((u_long)1)
extern "C" attrstat * nfsproc_getattr_2(nfs_fh *, CLIENT *);
extern "C" attrstat * nfsproc_getattr_2_svc(nfs_fh *, struct svc_req *);
#define NFSPROC_SETATTR ((u_long)2)
extern "C" attrstat * nfsproc_setattr_2(sattrargs *, CLIENT *);
extern "C" attrstat * nfsproc_setattr_2_svc(sattrargs *, struct svc_req *);
#define NFSPROC_ROOT ((u_long)3)
extern "C" void * nfsproc_root_2(void *, CLIENT *);
extern "C" void * nfsproc_root_2_svc(void *, struct svc_req *);
#define NFSPROC_LOOKUP ((u_long)4)
extern "C" diropres * nfsproc_lookup_2(diropargs *, CLIENT *);
extern "C" diropres * nfsproc_lookup_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READLINK ((u_long)5)
extern "C" readlinkres * nfsproc_readlink_2(nfs_fh *, CLIENT *);
extern "C" readlinkres * nfsproc_readlink_2_svc(nfs_fh *, struct svc_req *);
#define NFSPROC_READ ((u_long)6)
extern "C" readres * nfsproc_read_2(readargs *, CLIENT *);
extern "C" readres * nfsproc_read_2_svc(readargs *, struct svc_req *);
#define NFSPROC_WRITECACHE ((u_long)7)
extern "C" void * nfsproc_writecache_2(void *, CLIENT *);
extern "C" void * nfsproc_writecache_2_svc(void *, struct svc_req *);
#define NFSPROC_WRITE ((u_long)8)
extern "C" attrstat * nfsproc_write_2(writeargs *, CLIENT *);
extern "C" attrstat * nfsproc_write_2_svc(writeargs *, struct svc_req *);
#define NFSPROC_CREATE ((u_long)9)
extern "C" diropres * nfsproc_create_2(createargs *, CLIENT *);
extern "C" diropres * nfsproc_create_2_svc(createargs *, struct svc_req *);
#define NFSPROC_REMOVE ((u_long)10)
extern "C" int * nfsproc_remove_2(diropargs *, CLIENT *);
extern "C" int * nfsproc_remove_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_RENAME ((u_long)11)
extern "C" int * nfsproc_rename_2(renameargs *, CLIENT *);
extern "C" int * nfsproc_rename_2_svc(renameargs *, struct svc_req *);
#define NFSPROC_LINK ((u_long)12)
extern "C" int * nfsproc_link_2(linkargs *, CLIENT *);
extern "C" int * nfsproc_link_2_svc(linkargs *, struct svc_req *);
#define NFSPROC_SYMLINK ((u_long)13)
extern "C" int * nfsproc_symlink_2(symlinkargs *, CLIENT *);
extern "C" int * nfsproc_symlink_2_svc(symlinkargs *, struct svc_req *);
#define NFSPROC_MKDIR ((u_long)14)
extern "C" diropres * nfsproc_mkdir_2(createargs *, CLIENT *);
extern "C" diropres * nfsproc_mkdir_2_svc(createargs *, struct svc_req *);
#define NFSPROC_RMDIR ((u_long)15)
extern "C" int * nfsproc_rmdir_2(diropargs *, CLIENT *);
extern "C" int * nfsproc_rmdir_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READDIR ((u_long)16)
extern "C" readdirres * nfsproc_readdir_2(readdirargs *, CLIENT *);
extern "C" readdirres * nfsproc_readdir_2_svc(readdirargs *, struct svc_req *);
#define NFSPROC_STATFS ((u_long)17)
extern "C" statfsres * nfsproc_statfs_2(nfs_fh *, CLIENT *);
extern "C" statfsres * nfsproc_statfs_2_svc(nfs_fh *, struct svc_req *);

#elif defined(__STDC__)
#define NFSPROC_NULL ((u_long)0)
extern void * nfsproc_null_2(void *, CLIENT *);
extern void * nfsproc_null_2_svc(void *, struct svc_req *);
#define NFSPROC_GETATTR ((u_long)1)
extern attrstat * nfsproc_getattr_2(nfs_fh *, CLIENT *);
extern attrstat * nfsproc_getattr_2_svc(nfs_fh *, struct svc_req *);
#define NFSPROC_SETATTR ((u_long)2)
extern attrstat * nfsproc_setattr_2(sattrargs *, CLIENT *);
extern attrstat * nfsproc_setattr_2_svc(sattrargs *, struct svc_req *);
#define NFSPROC_ROOT ((u_long)3)
extern void * nfsproc_root_2(void *, CLIENT *);
extern void * nfsproc_root_2_svc(void *, struct svc_req *);
#define NFSPROC_LOOKUP ((u_long)4)
extern diropres * nfsproc_lookup_2(diropargs *, CLIENT *);
extern diropres * nfsproc_lookup_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READLINK ((u_long)5)
extern readlinkres * nfsproc_readlink_2(nfs_fh *, CLIENT *);
extern readlinkres * nfsproc_readlink_2_svc(nfs_fh *, struct svc_req *);
#define NFSPROC_READ ((u_long)6)
extern readres * nfsproc_read_2(readargs *, CLIENT *);
extern readres * nfsproc_read_2_svc(readargs *, struct svc_req *);
#define NFSPROC_WRITECACHE ((u_long)7)
extern void * nfsproc_writecache_2(void *, CLIENT *);
extern void * nfsproc_writecache_2_svc(void *, struct svc_req *);
#define NFSPROC_WRITE ((u_long)8)
extern attrstat * nfsproc_write_2(writeargs *, CLIENT *);
extern attrstat * nfsproc_write_2_svc(writeargs *, struct svc_req *);
#define NFSPROC_CREATE ((u_long)9)
extern diropres * nfsproc_create_2(createargs *, CLIENT *);
extern diropres * nfsproc_create_2_svc(createargs *, struct svc_req *);
#define NFSPROC_REMOVE ((u_long)10)
extern int * nfsproc_remove_2(diropargs *, CLIENT *);
extern int * nfsproc_remove_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_RENAME ((u_long)11)
extern int * nfsproc_rename_2(renameargs *, CLIENT *);
extern int * nfsproc_rename_2_svc(renameargs *, struct svc_req *);
#define NFSPROC_LINK ((u_long)12)
extern int * nfsproc_link_2(linkargs *, CLIENT *);
extern int * nfsproc_link_2_svc(linkargs *, struct svc_req *);
#define NFSPROC_SYMLINK ((u_long)13)
extern int * nfsproc_symlink_2(symlinkargs *, CLIENT *);
extern int * nfsproc_symlink_2_svc(symlinkargs *, struct svc_req *);
#define NFSPROC_MKDIR ((u_long)14)
extern diropres * nfsproc_mkdir_2(createargs *, CLIENT *);
extern diropres * nfsproc_mkdir_2_svc(createargs *, struct svc_req *);
#define NFSPROC_RMDIR ((u_long)15)
extern int * nfsproc_rmdir_2(diropargs *, CLIENT *);
extern int * nfsproc_rmdir_2_svc(diropargs *, struct svc_req *);
#define NFSPROC_READDIR ((u_long)16)
extern readdirres * nfsproc_readdir_2(readdirargs *, CLIENT *);
extern readdirres * nfsproc_readdir_2_svc(readdirargs *, struct svc_req *);
#define NFSPROC_STATFS ((u_long)17)
extern statfsres * nfsproc_statfs_2(nfs_fh *, CLIENT *);
extern statfsres * nfsproc_statfs_2_svc(nfs_fh *, struct svc_req *);

#else /* Old Style C */
#define NFSPROC_NULL ((u_long)0)
extern void * nfsproc_null_2();
extern void * nfsproc_null_2_svc();
#define NFSPROC_GETATTR ((u_long)1)
extern attrstat * nfsproc_getattr_2();
extern attrstat * nfsproc_getattr_2_svc();
#define NFSPROC_SETATTR ((u_long)2)
extern attrstat * nfsproc_setattr_2();
extern attrstat * nfsproc_setattr_2_svc();
#define NFSPROC_ROOT ((u_long)3)
extern void * nfsproc_root_2();
extern void * nfsproc_root_2_svc();
#define NFSPROC_LOOKUP ((u_long)4)
extern diropres * nfsproc_lookup_2();
extern diropres * nfsproc_lookup_2_svc();
#define NFSPROC_READLINK ((u_long)5)
extern readlinkres * nfsproc_readlink_2();
extern readlinkres * nfsproc_readlink_2_svc();
#define NFSPROC_READ ((u_long)6)
extern readres * nfsproc_read_2();
extern readres * nfsproc_read_2_svc();
#define NFSPROC_WRITECACHE ((u_long)7)
extern void * nfsproc_writecache_2();
extern void * nfsproc_writecache_2_svc();
#define NFSPROC_WRITE ((u_long)8)
extern attrstat * nfsproc_write_2();
extern attrstat * nfsproc_write_2_svc();
#define NFSPROC_CREATE ((u_long)9)
extern diropres * nfsproc_create_2();
extern diropres * nfsproc_create_2_svc();
#define NFSPROC_REMOVE ((u_long)10)
extern int * nfsproc_remove_2();
extern int * nfsproc_remove_2_svc();
#define NFSPROC_RENAME ((u_long)11)
extern int * nfsproc_rename_2();
extern int * nfsproc_rename_2_svc();
#define NFSPROC_LINK ((u_long)12)
extern int * nfsproc_link_2();
extern int * nfsproc_link_2_svc();
#define NFSPROC_SYMLINK ((u_long)13)
extern int * nfsproc_symlink_2();
extern int * nfsproc_symlink_2_svc();
#define NFSPROC_MKDIR ((u_long)14)
extern diropres * nfsproc_mkdir_2();
extern diropres * nfsproc_mkdir_2_svc();
#define NFSPROC_RMDIR ((u_long)15)
extern int * nfsproc_rmdir_2();
extern int * nfsproc_rmdir_2_svc();
#define NFSPROC_READDIR ((u_long)16)
extern readdirres * nfsproc_readdir_2();
extern readdirres * nfsproc_readdir_2_svc();
#define NFSPROC_STATFS ((u_long)17)
extern statfsres * nfsproc_statfs_2();
extern statfsres * nfsproc_statfs_2_svc();
#endif /* Old Style C */

#endif /* !_NFS_PROT_H_RPCGEN */
@


1.6
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@a0 2
/*	$OpenBSD: nfs_prot.h,v 1.5 2014/10/20 02:33:42 guenther Exp $	*/

d2 2
a3 33
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)nfs_prot.h	8.1 (Berkeley) 6/6/93
d6 4
a9 1
#include <nfs/nfsproto.h>
d11 1
a11 2
#define	xdr_nfsstat xdr_enum
#define	xdr_ftype xdr_enum
a13 1
#ifndef NFS_MAXDATA
a14 1
#endif
d18 2
a29 1

d31 21
a51 4

bool_t xdr_nfsstat(XDR *, nfsstat *);


d53 11
a63 3

/* static bool_t xdr_ftype(XDR *, ftype *); */

d69 7
a75 1
bool_t xdr_nfs_fh(XDR *, nfs_fh *);
d83 7
a89 1
/* static bool_t xdr_nfstime(XDR *, nfstime *); */
d93 1
a93 1
	ftype type;
d109 7
a115 1
/* static bool_t xdr_fattr(XDR *, fattr *); */
d127 7
a133 1
/* static bool_t xdr_sattr(XDR *, sattr *); */
d137 7
a143 1
/* static bool_t xdr_filename(XDR *, filename *); */
d147 7
a153 1
bool_t xdr_nfspath(XDR *, nfspath *);
d157 1
a157 1
	nfsstat status;
d163 7
a169 1
bool_t xdr_attrstat(XDR *, attrstat *);
d177 7
a183 1
bool_t xdr_sattrargs(XDR *, sattrargs *);
d191 7
a197 1
bool_t xdr_diropargs(XDR *, diropargs *);
d205 7
a211 1
bool_t xdr_diropokres(XDR *, diropokres *);
d215 1
a215 1
	nfsstat status;
d221 7
a227 1
bool_t xdr_diropres(XDR *, diropres *);
d231 1
a231 1
	nfsstat status;
d237 7
a243 1
bool_t xdr_readlinkres(XDR *, readlinkres *);
d253 7
a259 1
bool_t xdr_readargs(XDR *, readargs *);
d270 7
a276 1
bool_t xdr_readokres(XDR *, readokres *);
d280 1
a280 1
	nfsstat status;
d286 7
a292 1
bool_t xdr_readres(XDR *, readres *);
d306 7
a312 1
bool_t xdr_writeargs(XDR *, writeargs *);
d320 7
a326 1
bool_t xdr_createargs(XDR *, createargs *);
d334 7
a340 1
bool_t xdr_renameargs(XDR *, renameargs *);
d348 7
a354 1
bool_t xdr_linkargs(XDR *, linkargs *);
d363 7
a369 1
bool_t xdr_symlinkargs(XDR *, symlinkargs *);
d373 7
a379 1
/* static bool_t xdr_nfscookie(XDR *, nfscookie *); */
d388 7
a394 1
bool_t xdr_readdirargs(XDR *, readdirargs *);
d404 7
a410 1
/* static bool_t xdr_entry(XDR *, entry *); */
d418 7
a424 1
/* static bool_t xdr_dirlist(XDR *, dirlist *); */
d428 1
a428 1
	nfsstat status;
d434 7
a440 1
bool_t xdr_readdirres(XDR *, readdirres *);
d451 7
a457 1
bool_t xdr_statfsokres(XDR *, statfsokres *);
d461 1
a461 1
	nfsstat status;
d467 7
a473 1
bool_t xdr_statfsres(XDR *, statfsres *);
d479 113
a591 2
/* Undef the version 3 ones, and define the v2 ones */
#undef NFSPROC_NULL
d593 2
a594 1
#undef NFSPROC_GETATTR
d596 2
a597 1
#undef NFSPROC_SETATTR
d599 2
a600 1
#undef NFSPROC_ROOT
d602 2
a603 1
#undef NFSPROC_LOOKUP
d605 2
a606 1
#undef NFSPROC_READLINK
d608 2
a609 1
#undef NFSPROC_READ
d611 2
a612 1
#undef NFSPROC_WRITECACHE
d614 2
a615 1
#undef NFSPROC_WRITE
d617 2
a618 1
#undef NFSPROC_CREATE
d620 2
a621 1
#undef NFSPROC_REMOVE
d623 2
a624 1
#undef NFSPROC_RENAME
d626 2
a627 1
#undef NFSPROC_LINK
d629 2
a630 1
#undef NFSPROC_SYMLINK
d632 2
a633 1
#undef NFSPROC_MKDIR
d635 2
a636 1
#undef NFSPROC_RMDIR
d638 2
a639 1
#undef NFSPROC_READDIR
d641 2
a642 1
#undef NFSPROC_STATFS
d644 3
d648 1
a648 18
extern void *nfsproc_null_2(void *, struct svc_req *);
extern attrstat *nfsproc_getattr_2(nfs_fh *, struct svc_req *);
extern attrstat *nfsproc_setattr_2(sattrargs *, struct svc_req *);
extern void *nfsproc_root_2(void *, struct svc_req *);
extern diropres *nfsproc_lookup_2(diropargs *, struct svc_req *);
extern readlinkres *nfsproc_readlink_2(nfs_fh *, struct svc_req *);
extern readres *nfsproc_read_2(readargs *, struct svc_req *);
extern void *nfsproc_writecache_2(void *, struct svc_req *);
extern attrstat *nfsproc_write_2(writeargs *, struct svc_req *);
extern diropres *nfsproc_create_2(createargs *, struct svc_req *);
extern nfsstat *nfsproc_remove_2(diropargs *, struct svc_req *);
extern nfsstat *nfsproc_rename_2(renameargs *, struct svc_req *);
extern nfsstat *nfsproc_link_2(linkargs *, struct svc_req *);
extern nfsstat *nfsproc_symlink_2(symlinkargs *, struct svc_req *);
extern diropres *nfsproc_mkdir_2(createargs *, struct svc_req *);
extern nfsstat *nfsproc_rmdir_2(diropargs *, struct svc_req *);
extern readdirres *nfsproc_readdir_2(readdirargs *, struct svc_req *);
extern statfsres *nfsproc_statfs_2(nfs_fh *, struct svc_req *);
@


1.5
log
@unifdef -DHAS_REGEXP -DHAS_PASSWD_MAPS -DHAS_FILE_MAPS \
  -DHAS_NIS_MAPS -DHAS_NIS_RELOAD -DRPC_4 -DHAS_UNION_MAPS \
  -DHAS_TCP_NFS -DOS_HAS_NDBM -DNFS_PROTOCOL_VERSION=3 \
  -DNFS_ARGS_NEEDS_PATH -DPRECISE_SYMLINKS -DHAS_EMPTY_AUTOMOUNTS \
  -DNEED_MNTOPT_PARSER -DSHORT_MOUNT_NAME -DHAS_NFS_QUALIFIED_NAMES \
  -UUPDATE_MTAB -UFIXUP_MNTENT -UMNTENT_HDR -UMNTINFO_DEV \
  -UMNTOPT_COMPRESS -UMNTOPT_NQNFS -UINFORM_MOUNTD \
  -USUNOS4_WORKAROUND -UULTRIX_HACK

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: nfs_prot.h,v 1.4 2003/06/02 23:36:52 millert Exp $	*/
d64 1
a64 1
bool_t xdr_nfsstat();
d69 1
a69 1
/* static bool_t xdr_ftype(); */
d76 1
a76 1
bool_t xdr_nfs_fh();
d84 1
a84 1
/* static bool_t xdr_nfstime(); */
d104 1
a104 1
/* static bool_t xdr_fattr(); */
d116 1
a116 1
/* static bool_t xdr_sattr(); */
d120 1
a120 1
/* static bool_t xdr_filename(); */
d124 1
a124 1
bool_t xdr_nfspath();
d134 1
a134 1
bool_t xdr_attrstat();
d142 1
a142 1
bool_t xdr_sattrargs();
d150 1
a150 1
bool_t xdr_diropargs();
d158 1
a158 1
bool_t xdr_diropokres();
d168 1
a168 1
bool_t xdr_diropres();
d178 1
a178 1
bool_t xdr_readlinkres();
d188 1
a188 1
bool_t xdr_readargs();
d199 1
a199 1
bool_t xdr_readokres();
d209 1
a209 1
bool_t xdr_readres();
d223 1
a223 1
bool_t xdr_writeargs();
d231 1
a231 1
bool_t xdr_createargs();
d239 1
a239 1
bool_t xdr_renameargs();
d247 1
a247 1
bool_t xdr_linkargs();
d256 1
a256 1
bool_t xdr_symlinkargs();
d260 1
a260 1
/* static bool_t xdr_nfscookie(); */
d269 1
a269 1
bool_t xdr_readdirargs();
d279 1
a279 1
/* static bool_t xdr_entry(); */
d287 1
a287 1
/* static bool_t xdr_dirlist(); */
d297 1
a297 1
bool_t xdr_readdirres();
d308 1
a308 1
bool_t xdr_statfsokres();
d318 1
a318 1
bool_t xdr_statfsres();
d362 18
a379 18
extern void *nfsproc_null_2();
extern attrstat *nfsproc_getattr_2();
extern attrstat *nfsproc_setattr_2();
extern void *nfsproc_root_2();
extern diropres *nfsproc_lookup_2();
extern readlinkres *nfsproc_readlink_2();
extern readres *nfsproc_read_2();
extern void *nfsproc_writecache_2();
extern attrstat *nfsproc_write_2();
extern diropres *nfsproc_create_2();
extern nfsstat *nfsproc_remove_2();
extern nfsstat *nfsproc_rename_2();
extern nfsstat *nfsproc_link_2();
extern nfsstat *nfsproc_symlink_2();
extern diropres *nfsproc_mkdir_2();
extern nfsstat *nfsproc_rmdir_2();
extern readdirres *nfsproc_readdir_2();
extern statfsres *nfsproc_statfs_2();
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: nfs_prot.h,v 1.3 2002/08/05 07:24:26 pvalchev Exp $	*/
a38 1
#if NFS_PROTOCOL_VERSION >= 3
a39 1
#endif
a61 23
#if NFS_PROTOCOL_VERSION < 3
enum nfsstat {
	NFS_OK = 0,
	NFSERR_PERM = 1,
	NFSERR_NOENT = 2,
	NFSERR_IO = 5,
	NFSERR_NXIO = 6,
	NFSERR_ACCES = 13,
	NFSERR_EXIST = 17,
	NFSERR_NODEV = 19,
	NFSERR_NOTDIR = 20,
	NFSERR_ISDIR = 21,
	NFSERR_FBIG = 27,
	NFSERR_NOSPC = 28,
	NFSERR_ROFS = 30,
	NFSERR_NAMETOOLONG = 63,
	NFSERR_NOTEMPTY = 66,
	NFSERR_DQUOT = 69,
	NFSERR_STALE = 70,
	NFSERR_WFLUSH = 99
};
typedef enum nfsstat nfsstat;
#else
a62 1
#endif
a66 14
#if NFS_PROTOCOL_VERSION < 3
enum ftype {
	NFNON = 0,
	NFREG = 1,
	NFDIR = 2,
	NFBLK = 3,
	NFCHR = 4,
	NFLNK = 5,
	NFSOCK = 6,
	NFBAD = 7,
	NFFIFO = 8
};
typedef enum ftype ftype;
#else
a67 1
#endif
@


1.3
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: nfs_prot.h,v 1.2 1996/03/25 15:54:58 niklas Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d407 1
a407 1
extern voidp nfsproc_null_2();
d410 1
a410 1
extern voidp nfsproc_root_2();
d414 1
a414 1
extern voidp nfsproc_writecache_2();
@


1.1
log
@Initial revision
@
text
@d1 2
a40 2
 *	$Id: nfs_prot.h,v 1.2 1994/06/13 20:50:56 mycroft Exp $
 *
d43 4
d51 1
d53 1
d68 1
d90 4
d97 1
d110 4
d368 3
d372 35
a407 1
#define NFSPROC_GETATTR ((u_long)1)
a408 1
#define NFSPROC_SETATTR ((u_long)2)
a409 1
#define NFSPROC_ROOT ((u_long)3)
a410 1
#define NFSPROC_LOOKUP ((u_long)4)
a411 1
#define NFSPROC_READLINK ((u_long)5)
a412 1
#define NFSPROC_READ ((u_long)6)
a413 1
#define NFSPROC_WRITECACHE ((u_long)7)
a414 1
#define NFSPROC_WRITE ((u_long)8)
a415 1
#define NFSPROC_CREATE ((u_long)9)
a416 1
#define NFSPROC_REMOVE ((u_long)10)
a417 1
#define NFSPROC_RENAME ((u_long)11)
a418 1
#define NFSPROC_LINK ((u_long)12)
a419 1
#define NFSPROC_SYMLINK ((u_long)13)
a420 1
#define NFSPROC_MKDIR ((u_long)14)
a421 1
#define NFSPROC_RMDIR ((u_long)15)
a422 1
#define NFSPROC_READDIR ((u_long)16)
a423 1
#define NFSPROC_STATFS ((u_long)17)
a424 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
