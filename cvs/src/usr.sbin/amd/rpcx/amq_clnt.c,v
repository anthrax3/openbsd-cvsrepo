head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.12
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.5.0.48
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.46
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.42
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.01.21.09.50.50;	author guenther;	state Exp;
branches;
next	1.7;
commitid	vWGytClgdFVZOjI5;

1.7
date	2015.01.21.08.24.41;	author guenther;	state Exp;
branches;
next	1.6;
commitid	fwWHCHQH9uktPmic;

1.6
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.5;
commitid	RhupU2WFUkfzry1g;

1.5
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.05.41.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.03.08.29.32;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.22;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@regen
@
text
@/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "amq.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

void *
amqproc_null_57(void *argp, CLIENT *clnt)
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_NULL, xdr_void, argp, xdr_void, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&clnt_res);
}

amq_mount_tree_p *
amqproc_mnttree_57(amq_string *argp, CLIENT *clnt)
{
	static amq_mount_tree_p clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_MNTTREE, xdr_amq_string, argp, xdr_amq_mount_tree_p, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

void *
amqproc_umnt_57(amq_string *argp, CLIENT *clnt)
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_UMNT, xdr_amq_string, argp, xdr_void, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&clnt_res);
}

amq_mount_stats *
amqproc_stats_57(void *argp, CLIENT *clnt)
{
	static amq_mount_stats clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_STATS, xdr_void, argp, xdr_amq_mount_stats, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

amq_mount_tree_list *
amqproc_export_57(void *argp, CLIENT *clnt)
{
	static amq_mount_tree_list clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_EXPORT, xdr_void, argp, xdr_amq_mount_tree_list, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

int *
amqproc_setopt_57(amq_setopt *argp, CLIENT *clnt)
{
	static int clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_SETOPT, xdr_amq_setopt, argp, xdr_int, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

amq_mount_info_list *
amqproc_getmntfs_57(void *argp, CLIENT *clnt)
{
	static amq_mount_info_list clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_GETMNTFS, xdr_void, argp, xdr_amq_mount_info_list, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

amq_string *
amqproc_getvers_57(void *argp, CLIENT *clnt)
{
	static amq_string clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_GETVERS, xdr_void, argp, xdr_amq_string, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
@


1.7
log
@Regenerate the amq RPC stubs with a -current rpcgen, with some
post-processing of the server stub to match previous local changes.
This corrects the type handling of mt_mounttime, so "amq /mountpoint"
doesn't segv trying to treat a time_t as a pointer.
With the file (re)generation fixed, we can more easily update the
protocol to support 64bit time_t...
@
text
@d13 1
a13 1
amqproc_null_1(void *argp, CLIENT *clnt)
d25 1
a25 1
amqproc_mnttree_1(amq_string *argp, CLIENT *clnt)
d37 1
a37 1
amqproc_umnt_1(amq_string *argp, CLIENT *clnt)
d49 1
a49 1
amqproc_stats_1(void *argp, CLIENT *clnt)
d61 1
a61 1
amqproc_export_1(void *argp, CLIENT *clnt)
d73 1
a73 1
amqproc_setopt_1(amq_setopt *argp, CLIENT *clnt)
d85 1
a85 1
amqproc_getmntfs_1(void *argp, CLIENT *clnt)
a95 12
int *
amqproc_mount_1(amq_string *argp, CLIENT *clnt)
{
	static int clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call(clnt, AMQPROC_MOUNT, xdr_amq_string, argp, xdr_int, &clnt_res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

d97 1
a97 1
amqproc_getvers_1(void *argp, CLIENT *clnt)
@


1.6
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@d2 2
a3 35
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)amq_clnt.c	8.1 (Berkeley) 6/6/93
 *	$Id: amq_clnt.c,v 1.5 2003/06/02 23:36:52 millert Exp $
 *
d6 1
a6 1
#include "am.h"
d9 2
a10 1
static struct timeval TIMEOUT = { ALLOWED_MOUNT_TIME, 0 };
d15 1
a15 1
	static char res;
d17 2
a18 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_NULL, xdr_void, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS) {
d21 1
a21 1
	return ((void *)&res);
a23 1

d25 1
a25 1
amqproc_mnttree_1(void *argp, CLIENT *clnt)
d27 1
a27 1
	static amq_mount_tree_p res;
d29 2
a30 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_MNTTREE, xdr_amq_string, argp,
	    xdr_amq_mount_tree_p, &res, TIMEOUT) != RPC_SUCCESS) {
d33 1
a33 1
	return (&res);
a35 1

d37 1
a37 1
amqproc_umnt_1(void *argp, CLIENT *clnt)
d39 1
a39 1
	static char res;
d41 2
a42 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_UMNT, xdr_amq_string, argp,
	    xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
d45 1
a45 1
	return ((void *)&res);
a47 1

d51 1
a51 1
	static amq_mount_stats res;
d53 2
a54 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_STATS, xdr_void, argp,
	    xdr_amq_mount_stats, &res, TIMEOUT) != RPC_SUCCESS) {
d57 1
a57 1
	return (&res);
a59 1

d63 1
a63 1
	static amq_mount_tree_list res;
d65 2
a66 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_EXPORT, xdr_void, argp,
	    xdr_amq_mount_tree_list, &res, TIMEOUT) != RPC_SUCCESS) {
d69 1
a69 1
	return (&res);
d73 1
a73 1
amqproc_setopt_1(void *argp, CLIENT *clnt)
d75 1
a75 1
	static int res;
d77 2
a78 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_SETOPT, xdr_amq_setopt, argp,
	    xdr_int, &res, TIMEOUT) != RPC_SUCCESS) {
d81 1
a81 1
	return (&res);
a83 1

d87 1
a87 1
	static amq_mount_info_list res;
d89 2
a90 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_GETMNTFS, xdr_void, argp,
	    xdr_amq_mount_info_list, &res, TIMEOUT) != RPC_SUCCESS) {
d93 1
a93 1
	return (&res);
a95 1

d97 1
a97 1
amqproc_mount_1(void *argp, CLIENT *clnt)
d99 1
a99 1
	static int res;
d101 2
a102 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_MOUNT, xdr_amq_string, argp,
	    xdr_int, &res, TIMEOUT) != RPC_SUCCESS) {
d105 1
a105 1
	return (&res);
a107 1

d111 1
a111 1
	static amq_string res;
d113 2
a114 3
	bzero((char *)&res, sizeof(res));
	if (clnt_call(clnt, AMQPROC_GETVERS, xdr_void, argp,
	    xdr_amq_string, &res, TIMEOUT) != RPC_SUCCESS) {
d117 1
a117 1
	return (&res);
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: amq_clnt.c,v 1.4 2002/09/10 05:41:28 deraadt Exp $
d59 1
a59 1
amqproc_mnttree_1(amq_string *argp, CLIENT *clnt)
d73 1
a73 1
amqproc_umnt_1(amq_string *argp, CLIENT *clnt)
d114 1
a114 1
amqproc_setopt_1(amq_setopt *argp, CLIENT *clnt)
@


1.4
log
@knf
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: amq_clnt.c,v 1.3 2002/08/05 07:24:26 pvalchev Exp $
@


1.3
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d39 1
a39 1
 *	$Id: amq_clnt.c,v 1.2 2002/08/03 08:29:32 pvalchev Exp $
d54 2
a55 1
	if (clnt_call(clnt, AMQPROC_NULL, xdr_void, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
d68 2
a69 1
	if (clnt_call(clnt, AMQPROC_MNTTREE, xdr_amq_string, argp, xdr_amq_mount_tree_p, &res, TIMEOUT) != RPC_SUCCESS) {
d82 2
a83 1
	if (clnt_call(clnt, AMQPROC_UMNT, xdr_amq_string, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
d96 2
a97 1
	if (clnt_call(clnt, AMQPROC_STATS, xdr_void, argp, xdr_amq_mount_stats, &res, TIMEOUT) != RPC_SUCCESS) {
d110 2
a111 1
	if (clnt_call(clnt, AMQPROC_EXPORT, xdr_void, argp, xdr_amq_mount_tree_list, &res, TIMEOUT) != RPC_SUCCESS) {
d123 2
a124 1
	if (clnt_call(clnt, AMQPROC_SETOPT, xdr_amq_setopt, argp, xdr_int, &res, TIMEOUT) != RPC_SUCCESS) {
d137 2
a138 1
	if (clnt_call(clnt, AMQPROC_GETMNTFS, xdr_void, argp, xdr_amq_mount_info_list, &res, TIMEOUT) != RPC_SUCCESS) {
d151 2
a152 1
	if (clnt_call(clnt, AMQPROC_MOUNT, xdr_amq_string, argp, xdr_int, &res, TIMEOUT) != RPC_SUCCESS) {
d165 2
a166 1
	if (clnt_call(clnt, AMQPROC_GETVERS, xdr_void, argp, xdr_amq_string, &res, TIMEOUT) != RPC_SUCCESS) {
@


1.2
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d39 1
a39 1
 *	$Id: amq_clnt.c,v 1.1.1.1 1995/10/18 08:47:22 deraadt Exp $
d48 2
a49 2
voidp
amqproc_null_1(voidp argp, CLIENT *clnt)
d57 1
a57 1
	return ((voidp)&res);
d74 1
a74 1
voidp
d83 1
a83 1
	return ((voidp)&res);
d88 1
a88 1
amqproc_stats_1(voidp argp, CLIENT *clnt)
d101 1
a101 1
amqproc_export_1(voidp argp, CLIENT *clnt)
d126 1
a126 1
amqproc_getmntfs_1(voidp argp, CLIENT *clnt)
d139 1
a139 1
amqproc_mount_1(voidp argp, CLIENT *clnt)
d152 1
a152 1
amqproc_getvers_1(voidp argp, CLIENT *clnt)
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: amq_clnt.c,v 1.2 1994/06/13 20:50:48 mycroft Exp $
d49 1
a49 3
amqproc_null_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
d62 1
a62 3
amqproc_mnttree_1(argp, clnt)
	amq_string *argp;
	CLIENT *clnt;
d75 1
a75 3
amqproc_umnt_1(argp, clnt)
	amq_string *argp;
	CLIENT *clnt;
d88 1
a88 3
amqproc_stats_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
d101 1
a101 3
amqproc_export_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
d113 1
a113 3
amqproc_setopt_1(argp, clnt)
	amq_setopt *argp;
	CLIENT *clnt;
d126 1
a126 3
amqproc_getmntfs_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
d139 1
a139 3
amqproc_mount_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
d152 1
a152 3
amqproc_getvers_1(argp, clnt)
	voidp argp;
	CLIENT *clnt;
a161 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
