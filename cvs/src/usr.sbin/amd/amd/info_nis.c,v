head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.12
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.10.0.48
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.46
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.42
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.38
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.36
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2014.10.26.03.28.41;	author guenther;	state Exp;
branches;
next	1.12;
commitid	RUbgWdu1CNTVPIOS;

1.12
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.11;
commitid	RhupU2WFUkfzry1g;

1.11
date	2014.10.20.02.33.42;	author guenther;	state Exp;
branches;
next	1.10;
commitid	bZbpWDoZDVt0RPe1;

1.10
date	2003.06.02.23.36.51;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.03.08.29.31;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.18.02.14.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.18.02.03.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.18.00.50.23;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.02.06.22.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.10.39.51;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.25.00.53.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove a gazillion useless casts to void*
Eliminate a couple function pointer casts, fixing the function to match
    in one case
@
text
@/*
 * Copyright (c) 1989 Jan-Simon Pendry
 * Copyright (c) 1989 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)info_nis.c	8.1 (Berkeley) 6/6/93
 *	$Id: info_nis.c,v 1.12 2014/10/26 03:03:34 guenther Exp $
 */

/*
 * Get info from NIS map
 */

#include "am.h"

#include <unistd.h>

#include <rpcsvc/yp_prot.h>
#include <rpcsvc/ypclnt.h>
#include <time.h>

/*
 * Sun's NIS+ server in NIS compat mode does not have yp_order()
 */
static int has_yp_order = FALSE;

/*
 * Figure out the nis domain name
 */
static int
determine_nis_domain(void)
{
	static int nis_not_running = 0;

	char default_domain[YPMAXDOMAIN];

	if (nis_not_running)
		return ENOENT;

	if (getdomainname(default_domain, sizeof(default_domain)) < 0) {
		nis_not_running = 1;
		plog(XLOG_ERROR, "getdomainname: %m");
		return EIO;
	}

	if (!*default_domain) {
		nis_not_running = 1;
		plog(XLOG_INFO, "NIS domain name is not set.  NIS ignored.");
		return ENOENT;
	}

	domain = strdup(default_domain);

	return 0;
}


struct nis_callback_data {
	mnt_map *ncd_m;
	char *ncd_map;
	void (*ncd_fn)(mnt_map *, char *, char *);
};

/*
 * Callback from yp_all
 */
static int
callback(unsigned long status, char *key, int kl, char *val, int vl, void *arg)
{
	struct nis_callback_data *data = arg;

	if (status == YP_TRUE) {
		/*
		 * Add to list of maps
		 */
		char *kp = strnsave(key, kl);
		char *vp = strnsave(val, vl);

		(*data->ncd_fn)(data->ncd_m, kp, vp);

		/*
		 * We want more ...
		 */
		return FALSE;
	} else {
		/*
		 * NOMORE means end of map - otherwise log error
		 */
		if (status != YP_NOMORE) {
			/*
			 * Check what went wrong
			 */
			int e = ypprot_err(status);

#ifdef DEBUG
			plog(XLOG_ERROR, "yp enumeration of %s: %s, status=%d, e=%d",
			    data->ncd_map, yperr_string(e), status, e);
#else
			plog(XLOG_ERROR, "yp enumeration of %s: %s",
			    data->ncd_map, yperr_string(e));
#endif
		}
		return TRUE;
	}
}

int
nis_reload(mnt_map *m, char *map, void (*fn)(mnt_map *, char *, char *))
{
	struct ypall_callback cbinfo;
	int error;
	struct nis_callback_data data;

	if (!domain) {
		error = determine_nis_domain();
		if (error)
			return error;
	}

	data.ncd_m = m;
	data.ncd_map = map;
	data.ncd_fn = fn;
	cbinfo.data = (void *)&data;
	cbinfo.foreach = &callback;

	error = yp_all(domain, map, &cbinfo);

	if (error)
		plog(XLOG_ERROR, "error grabbing nis map of %s: %s",
		    map, yperr_string(ypprot_err(error)));

	return error;
}

/*
 * Try to locate a key using NIS.
 */
int
nis_search(mnt_map *m, char *map, char *key, char **val, time_t *tp)
{
	int outlen;
	int order;
	int res;

	/*
	 * Make sure domain initialised
	 */
	if (has_yp_order) {
		/* check if map has changed */
		if (yp_order(domain, map, &order))
			return EIO;
		if ((time_t) order > *tp) {
			*tp = (time_t) order;
			return -1;
		}
	} else {
		/*
		 * NIS+ server without yp_order
		 * Check if timeout has expired to invalidate the cache
		 */
		order = time(NULL);
		if ((time_t)order - *tp > am_timeo) {
			*tp = (time_t)order;
			return(-1);
		}
	}


	if (has_yp_order) {
		/*
		 * Check if map has changed
		 */
		if (yp_order(domain, map, &order))
			return EIO;
		if ((time_t) order > *tp) {
			*tp = (time_t) order;
			return -1;
		}
	} else {
		/*
		 * NIS+ server without yp_order
		 * Check if timeout has expired to invalidate the cache
		 */
		order = time(NULL);
		if ((time_t)order - *tp > am_timeo) {
			*tp = (time_t)order;
			return(-1);
		}
	}

	/*
	 * Lookup key
	 */
	res = yp_match(domain, map, key, strlen(key), val, &outlen);

	/*
	 * Do something interesting with the return code
	 */
	switch (res) {
	case 0:
		return 0;

	case YPERR_KEY:
		return ENOENT;

	default:
		plog(XLOG_ERROR, "%s: %s", map, yperr_string(res));
		return EIO;
	}
}

int
nis_init(char *map, time_t *tp)
{
	int order;
	int yp_order_result;
	char *master;

	if (!domain) {
		int error = determine_nis_domain();

		if (error)
			return error;
	}

	/*
	 * To see if the map exists, try to find
	 * a master for it.
	 */
	yp_order_result = yp_order(domain, map, &order);
	switch (yp_order_result) {
	case 0:
		has_yp_order = TRUE;
		*tp = (time_t)order;
#ifdef DEBUG
		dlog("NIS master for %s@@%s has order %d", map, domain, order);
#endif
		break;
	case YPERR_YPERR:
		plog(XLOG_ERROR, "%s: %s", map, "NIS+ server");
		/* NIS+ server found ! */
		has_yp_order = FALSE;

		/* try yp_master() instead */
		if (yp_master(domain, map, &master))
			return ENOENT;
		else
		        *tp = time(NULL); /* Use fake timestamps */
		break;
	default:
		return ENOENT;
	}
	return 0;
}
@


1.12
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@d35 1
a35 1
 *	$Id: info_nis.c,v 1.11 2014/10/20 02:33:42 guenther Exp $
d96 1
a96 2
callback(int status, char *key, int kl, char *val,
    int vl, struct nis_callback_data *data)
d98 2
d152 1
a152 1
	cbinfo.foreach = (void *)&callback;
@


1.11
log
@unifdef -DHAS_REGEXP -DHAS_PASSWD_MAPS -DHAS_FILE_MAPS \
  -DHAS_NIS_MAPS -DHAS_NIS_RELOAD -DRPC_4 -DHAS_UNION_MAPS \
  -DHAS_TCP_NFS -DOS_HAS_NDBM -DNFS_PROTOCOL_VERSION=3 \
  -DNFS_ARGS_NEEDS_PATH -DPRECISE_SYMLINKS -DHAS_EMPTY_AUTOMOUNTS \
  -DNEED_MNTOPT_PARSER -DSHORT_MOUNT_NAME -DHAS_NFS_QUALIFIED_NAMES \
  -UUPDATE_MTAB -UFIXUP_MNTENT -UMNTENT_HDR -UMNTINFO_DEV \
  -UMNTOPT_COMPRESS -UMNTOPT_NQNFS -UINFORM_MOUNTD \
  -USUNOS4_WORKAROUND -UULTRIX_HACK

ok deraadt@@
@
text
@d35 1
a35 1
 *	$Id: info_nis.c,v 1.10 2003/06/02 23:36:51 millert Exp $
d89 1
a89 1
	void (*ncd_fn)();
d135 1
a135 1
nis_reload(mnt_map *m, char *map, void (*fn)())
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: info_nis.c,v 1.9 2002/08/05 07:24:26 pvalchev Exp $
a45 1
#ifdef HAS_NIS_MAPS
a85 1
#ifdef HAS_NIS_RELOAD
a160 1
#endif /* HAS_NIS_RELOAD */
a281 1
#endif /* HAS_NIS_MAPS */
@


1.9
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: info_nis.c,v 1.8 2002/08/03 08:29:31 pvalchev Exp $
@


1.8
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.7 2002/07/18 02:14:45 deraadt Exp $
d64 1
a64 1
determine_nis_domain(P_void)
d156 2
a157 2
	cbinfo.data = (voidp)&data;
	cbinfo.foreach = (voidp)&callback;
@


1.7
log
@more indent
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.6 2002/07/18 02:03:00 deraadt Exp $
d156 2
a157 2
	cbinfo.data = (voidp) &data;
	cbinfo.foreach = callback;
@


1.6
log
@space nits
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.5 2002/07/18 00:50:23 pvalchev Exp $
d63 2
a64 1
static int determine_nis_domain(P_void)
d66 1
a66 1
static	int nis_not_running = 0;
d101 3
a103 2
static int callback(int status, char *key, int kl, char *val,
	int vl, struct nis_callback_data *data)
d111 1
d130 1
a130 1
					data->ncd_map, yperr_string(e), status, e);
d132 2
a133 1
			plog(XLOG_ERROR, "yp enumeration of %s: %s", data->ncd_map, yperr_string(e));
a135 1

d140 2
a141 1
int nis_reload(mnt_map *m, char *map, void (*fn)())
d162 2
a163 1
		plog(XLOG_ERROR, "error grabbing nis map of %s: %s", map, yperr_string(ypprot_err(error)));
d172 2
a173 1
int nis_search(mnt_map *m, char *map, char *key, char **val, time_t *tp)
d176 1
a177 1
	int order;
d246 2
a247 1
int nis_init(char *map, time_t *tp)
d255 1
@


1.5
log
@ANSIfy; ok deraadt
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.4 2001/03/02 06:22:02 deraadt Exp $
d210 1
a210 1
		 * Check if timeout has expired to invalidate the cache 
@


1.4
log
@KNF
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.3 1996/05/26 10:39:51 deraadt Exp $
d100 2
a101 7
static int callback(status, key, kl, val, vl, data)
int status;
char *key;
int kl;
char *val;
int vl;
struct nis_callback_data *data;
d137 1
a137 5
int nis_reload P((mnt_map *m, char *map, void (*fn)()));
int nis_reload(m, map, fn)
mnt_map *m;
char *map;
void (*fn)();
d167 1
a167 7
int nis_search P((mnt_map *m, char *map, char *key, char **val, time_t *tp));
int nis_search(m, map, key, val, tp)
mnt_map *m;
char *map;
char *key;
char **val;
time_t *tp;
d240 1
a240 4
int nis_init P((char *map, time_t *tp));
int nis_init(map, tp)
char *map;
time_t *tp;
@


1.3
log
@sync
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.2 1996/04/25 00:53:43 deraadt Exp $
d47 2
@


1.2
log
@NIS+ in YP compatibility mode does not support a working yp_order(). amd
wants one so it can flush it's cache intelligently. Here's a working
compromise... solution worked out by matthieu@@laas.fr and I.
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.1.1.1 1995/10/18 08:47:10 deraadt Exp $
d78 1
a78 1
		plog(XLOG_WARNING, "NIS domain name is not set.  NIS ignored.");
d209 21
a229 8
	/*
	 * Check if map has changed
	 */
	if (yp_order(domain, map, &order))
		return EIO;
	if ((time_t) order > *tp) {
		*tp = (time_t) order;
		return -1;
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: info_nis.c,v 1.3 1994/06/13 20:47:27 mycroft Exp $
d51 6
d189 18
a206 4
	if (!domain) {
		int error = determine_nis_domain();
		if (error)
			return error;
d246 2
d259 5
a263 3
	if (yp_order(domain, map, &order))
		return ENOENT;
	*tp = (time_t) order;
d265 1
a265 1
	dlog("NIS master for %s@@%s has order %d", map, domain, order);
d267 15
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
