head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.26
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.24
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.22
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.20
	OPENBSD_5_0:1.10.0.18
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.10.20.06.55.59;	author guenther;	state Exp;
branches;
next	1.13;
commitid	1xnKI9ul35JBjA4W;

1.13
date	2014.10.20.02.33.42;	author guenther;	state Exp;
branches;
next	1.12;
commitid	bZbpWDoZDVt0RPe1;

1.12
date	2014.10.20.00.20.04;	author guenther;	state Exp;
branches;
next	1.11;
commitid	ciYfifbFHhmQvDo5;

1.11
date	2013.12.03.02.14.57;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.03.20.04.00.32;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.36.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.03.08.29.31;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.11.05.29.54;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.10.21.07.14;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.02.06.22.03;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.31.14.42.00;	author graichen;	state Exp;
branches;
next	1.3;

1.3
date	97.01.21.17.14.42;	author bitblt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.03.14.13.05;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.11;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.11;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Change MTAB_TYPE_UFS from "ufs" to "ffs", fixing mount-restarting for them.
Perform one level of expansion on the various "portability" macros from os-*.h
Delete support for Hesiod and the pre-4.4 versions of the NFS API
Delete the no-op unlock_mntlist()
unifdef -UFASCIST_DF_COMMAND -UMOUNT_HELPER_SOURCE
Move the struct mntent and MNTMAXSTR definitions into include/am.h
Move the commented-out -DHAS_NDBM_MAPS into amd/Makefile
Expand OS_REP to "bsd44".
With config/* empty, delete them.

"lot of stuff...but I know your process on this" deraadt@@
@
text
@/*
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)mount_fs.c	8.1 (Berkeley) 6/6/93
 *	$Id: mount_fs.c,v 1.13 2014/10/20 02:33:42 guenther Exp $
 */

#include "am.h"

#include <unistd.h>
#include <sys/stat.h>

/*
 * Standard mount flags
 */

struct opt_tab mnt_flags[] = {
	{ "ro",		MNT_RDONLY },
	{ "nodev",	MNT_NODEV },
	{ "noexec",	MNT_NOEXEC },
	{ "nosuid",	MNT_NOSUID },
	{ "sync",	MNT_SYNCHRONOUS },
	{ 0, 0 }
};

int
compute_mount_flags(struct mntent *mnt)
{
	struct opt_tab *opt;
	int flags;
	flags = 0;

	/*
	 * Crack basic mount options
	 */
	for (opt = mnt_flags; opt->opt; opt++)
		flags |= hasmntopt(mnt, opt->opt) ? opt->flag : 0;

	return flags;
}

int
mount_fs(struct mntent *mnt, int flags, caddr_t mnt_data, int retry,
    const char *type)
{
	int error = 0;

#ifdef DEBUG
	dlog("%s fstype %s (%s) flags %#x (%s)",
		mnt->mnt_dir, type, mnt->mnt_type, flags, mnt->mnt_opts);
#endif /* DEBUG */

	/*
	 * Fake some mount table entries for the automounter
	 */

again:
	clock_valid = 0;
	error = mount(type, mnt->mnt_dir, flags, mnt_data);

	if (error < 0)
		plog(XLOG_ERROR, "%s: mount: %m", mnt->mnt_dir);
	if (error < 0 && --retry > 0) {
		sleep(1);
		goto again;
	}
	if (error < 0) {
#ifdef notdef
		if (automount)
			going_down(errno);
#endif
		return errno;
	}


	return 0;
}

/*
 * Some systems don't provide these to the user,
 * but amd needs them, so...
 *
 * From: Piete Brooks <pb@@cl.cam.ac.uk>
 */

#include <ctype.h>

static char *
nextmntopt(char **p)
{
	char *cp = *p;
	char *rp;
	/*
	 * Skip past white space
	 */
	while (isspace((unsigned char)*cp))
		cp++;
	/*
	 * Word starts here
	 */
	rp = cp;
	/*
	 * Scan to send of string or separator
	 */
	while (*cp && *cp != ',')
		cp++;
	/*
	 * If separator found the overwrite with nul char.
	 */
	if (*cp) {
		*cp = '\0';
		cp++;
	}
	/*
	 * Return value for next call
	 */
	*p = cp;
	return rp;
}

char *
hasmntopt(struct mntent *mnt, char *opt)
{
	char t[MNTMAXSTR];
	char *f;
	char *o = t;
	int l = strlen(opt);

	strlcpy(t, mnt->mnt_opts, sizeof(t));

	while (*(f = nextmntopt(&o)))
		if (strncmp(opt, f, l) == 0)
			return f - t + mnt->mnt_opts;

	return 0;
}
@


1.13
log
@unifdef -DHAS_REGEXP -DHAS_PASSWD_MAPS -DHAS_FILE_MAPS \
  -DHAS_NIS_MAPS -DHAS_NIS_RELOAD -DRPC_4 -DHAS_UNION_MAPS \
  -DHAS_TCP_NFS -DOS_HAS_NDBM -DNFS_PROTOCOL_VERSION=3 \
  -DNFS_ARGS_NEEDS_PATH -DPRECISE_SYMLINKS -DHAS_EMPTY_AUTOMOUNTS \
  -DNEED_MNTOPT_PARSER -DSHORT_MOUNT_NAME -DHAS_NFS_QUALIFIED_NAMES \
  -UUPDATE_MTAB -UFIXUP_MNTENT -UMNTENT_HDR -UMNTINFO_DEV \
  -UMNTOPT_COMPRESS -UMNTOPT_NQNFS -UINFORM_MOUNTD \
  -USUNOS4_WORKAROUND -UULTRIX_HACK

ok deraadt@@
@
text
@d35 1
a35 1
 *	$Id: mount_fs.c,v 1.12 2014/10/20 00:20:04 guenther Exp $
a38 3
#ifdef NFS_3
typedef nfs_fh fhandle_t;
#endif /* NFS_3 */
d48 5
a52 25
	{ "ro", M_RDONLY },
#ifdef M_CACHE
	{ "nocache", M_NOCACHE },
#endif /* M_CACHE */
#ifdef M_GRPID
	{ "grpid", M_GRPID },
#endif /* M_GRPID */
#ifdef M_MULTI
	{ "multi", M_MULTI },
#endif /* M_MULTI */
#ifdef M_NODEV
	{ "nodev", M_NODEV },
#endif /* M_NODEV */
#ifdef M_NOEXEC
	{ "noexec", M_NOEXEC },
#endif /* M_NOEXEC */
#ifdef M_NOSUB
	{ "nosub", M_NOSUB },
#endif /* M_NOSUB */
#ifdef M_NOSUID
	{ "nosuid", M_NOSUID },
#endif /* M_NOSUID */
#ifdef M_SYNC
	{ "sync", M_SYNC },
#endif /* M_SYNC */
a60 3
#ifdef NFS_4
	flags = M_NEWTYPE;
#else
a61 1
#endif /* NFS_4 */
d74 1
a74 1
    MTYPE_TYPE type)
a78 1
#ifdef NFS_4
a80 4
#else
	dlog("%s fstype %d (%s) flags %#x (%s)",
		mnt->mnt_dir, type, mnt->mnt_type, flags, mnt->mnt_opts);
#endif /* NFS_4 */
a85 12
#ifdef FASCIST_DF_COMMAND
	/*
	 * Some systems have a df command which blows up when
	 * presented with an unknown mount type.
	 */
	if (STREQ(mnt->mnt_type, MNTTYPE_AUTO)) {
		/*
		 * Try it with the normal name
		 */
		mnt->mnt_type = FASCIST_DF_COMMAND;
	}
#endif /* FASCIST_DF_COMMAND */
d89 2
a90 1
	error = MOUNT_TRAP(type, mnt, flags, mnt_data);
a166 4

#ifdef MOUNT_HELPER_SOURCE
#include MOUNT_HELPER_SOURCE
#endif /* MOUNT_HELPER_SOURCE */
@


1.12
log
@Start removing portability goo: we have syslog(), strerror(), POSIX regexp,
    BSD-style getmntinfo(), BSD signals, 4.4BSD unmount(), etc
Delete configurations for other OSes
Delete fsinfo and mk-amd-map, as we don't build them.

ok deraadt@@
@
text
@d35 1
a35 1
 *	$Id: mount_fs.c,v 1.11 2013/12/03 02:14:57 deraadt Exp $
a103 4
#ifdef MNTINFO_DEV
	struct stat stb;
	char *xopts = 0;
#endif /* MNTINFO_DEV */
a147 39
#ifdef UPDATE_MTAB
#ifdef MNTINFO_DEV
	/*
	 * Add the extra dev= field to the mount table.
	 */
	if (lstat(mnt->mnt_dir, &stb) == 0) {
		char *zopts = (char *) xmalloc(strlen(mnt->mnt_opts) + 32);
		xopts = mnt->mnt_opts;
		if (sizeof(stb.st_dev) == 2) {
			/* e.g. SunOS 4.1 */
			snprintf(zopts, strlen(mnt->mnt_opts) + 32,
					"%s,%s=%s%04x", xopts, MNTINFO_DEV,
					MNTINFO_PREF, (u_int) stb.st_dev & 0xffff);
		} else {
			/* e.g. System Vr4 */
			snprintf(zopts, strlen(mnt->mnt_opts) + 32,
					"%s,%s=%s%08x", xopts, MNTINFO_DEV,
					MNTINFO_PREF, (u_int) stb.st_dev);
		}
		mnt->mnt_opts = zopts;
	}
#endif /* MNTINFO_DEV */

#ifdef FIXUP_MNTENT
	/*
	 * Additional fields in struct mntent
	 * are fixed up here
	 */
	FIXUP_MNTENT(mnt);
#endif

	write_mntent(mnt);
#ifdef MNTINFO_DEV
	if (xopts) {
		free(mnt->mnt_opts);
		mnt->mnt_opts = xopts;
	}
#endif /* MNTINFO_DEV */
#endif /* UPDATE_MTAB */
a151 1
#ifdef NEED_MNTOPT_PARSER
a209 1
#endif /* NEED_MNTOPT_PARSER */
@


1.11
log
@ctype cleanups
ok okan
@
text
@d35 1
a35 1
 *	$Id: mount_fs.c,v 1.10 2007/03/20 04:00:32 tedu Exp $
a48 7
#ifdef hpux
/*
 * HP-UX has an annoying feature of printing
 * error msgs on /dev/console
 */
#undef M_NOSUID
#endif /* hpux */
@


1.10
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d35 1
a35 1
 *	$Id: mount_fs.c,v 1.9 2003/06/02 23:36:51 millert Exp $
d220 1
a220 1
	while (isspace(*cp))
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: mount_fs.c,v 1.8 2002/08/03 08:29:31 pvalchev Exp $
d220 1
a220 1
	while (*cp && isspace(*cp))
@


1.8
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: mount_fs.c,v 1.7 2002/06/11 05:29:54 itojun Exp $
@


1.7
log
@use snprintf.
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.6 2002/06/10 21:07:14 itojun Exp $
d90 2
a91 2
int compute_mount_flags(mnt)
struct mntent *mnt;
d110 3
a112 7
int mount_fs P((struct mntent *mnt, int flags, caddr_t mnt_data, int retry, MTYPE_TYPE type));
int mount_fs(mnt, flags, mnt_data, retry, type)
struct mntent *mnt;
int flags;
caddr_t mnt_data;
int retry;
MTYPE_TYPE type;
d216 2
a217 2
static char *nextmntopt(p)
char **p;
d249 2
a250 3
char *hasmntopt(mnt, opt)
struct mntent *mnt;
char *opt;
d256 1
@


1.6
log
@strlcpy, strlcat
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.5 2001/03/02 06:22:03 deraadt Exp $
d177 2
a178 1
			sprintf(zopts, "%s,%s=%s%04x", xopts, MNTINFO_DEV,
d182 2
a183 1
			sprintf(zopts, "%s,%s=%s%08x", xopts, MNTINFO_DEV,
@


1.5
log
@KNF
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.4 1997/01/31 14:42:00 graichen Exp $
d259 1
a259 2
	strncpy(t, mnt->mnt_opts, MNTMAXSTR - 1);
	t[MNTMAXSTR - 1] = 0;
@


1.4
log
@make amd 64bit ready for the alpha (from NetBSD/thorpej)
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.3 1997/01/21 17:14:42 bitblt Exp $
d47 1
@


1.3
log
@Fixed potential buffer overflow.
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.2 1996/04/03 14:13:05 dm Exp $
d176 2
a177 2
			sprintf(zopts, "%s,%s=%s%04lx", xopts, MNTINFO_DEV,
					MNTINFO_PREF, (u_long) stb.st_dev & 0xffff);
d180 2
a181 2
			sprintf(zopts, "%s,%s=%s%08lx", xopts, MNTINFO_DEV,
					MNTINFO_PREF, (u_long) stb.st_dev);
@


1.2
log
@fixed compilation errors--but NQNFS may not work with new NFS code
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.1.1.1 1995/10/18 08:47:11 deraadt Exp $
d258 2
a259 1
	strcpy(t, mnt->mnt_opts);
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: mount_fs.c,v 1.3 1994/06/13 20:47:40 mycroft Exp $
a45 1
#include <sys/mount.h>
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
