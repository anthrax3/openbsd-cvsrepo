head	1.18;
access;
symbols
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.12
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.8
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.14.0.14
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.12
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.8
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.6
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.4
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.2
	OPENBSD_5_0:1.13.0.28
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.26
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.24
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.20
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.22
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.18
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.16
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.14
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.12
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.10
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.8
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.6
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.4
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.2
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.14
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.12
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.10
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.8
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.6
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2014.10.26.03.28.41;	author guenther;	state Exp;
branches;
next	1.17;
commitid	RUbgWdu1CNTVPIOS;

1.17
date	2014.10.26.03.08.21;	author guenther;	state Exp;
branches;
next	1.16;
commitid	WHJr6yXZrF36RX5I;

1.16
date	2014.10.26.02.43.50;	author guenther;	state Exp;
branches;
next	1.15;
commitid	QMh02q5MFiw3np67;

1.15
date	2014.10.20.00.20.04;	author guenther;	state Exp;
branches;
next	1.14;
commitid	ciYfifbFHhmQvDo5;

1.14
date	2011.11.06.01.43.50;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2004.10.21.20.57.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.04.15.19.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.15.08.54.54;	author djm;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.30.16.04.06;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.36.51;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.03.08.29.31;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.26.10.37.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.26.02.49.50;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.04.23.35.59;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.02.06.22.04;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.08.04.19.26.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove a gazillion useless casts to void*
Eliminate a couple function pointer casts, fixing the function to match
    in one case
@
text
@/*	$OpenBSD: sched.c,v 1.17 2014/10/26 03:08:21 guenther Exp $	*/

/*
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)sched.c	8.1 (Berkeley) 6/6/93
 *	$Id: sched.c,v 1.17 2014/10/26 03:08:21 guenther Exp $
 */

/*
 * Process scheduler
 */

#include "am.h"
#include <signal.h>
#include <sys/wait.h>
#include <setjmp.h>
extern jmp_buf select_intr;
extern int select_intr_valid;

typedef struct pjob pjob;
struct pjob {
	qelem hdr;			/* Linked list */
	pid_t pid;			/* Process ID of job */
	cb_fun cb_fun;			/* Callback function */
	void *cb_closure;		/* Closure for callback */
	int w;				/* Status filled in by sigchld */
	void *wchan;			/* Wait channel */
};

extern qelem proc_list_head;
qelem proc_list_head = { &proc_list_head, &proc_list_head };
extern qelem proc_wait_list;
qelem proc_wait_list = { &proc_wait_list, &proc_wait_list };

int task_notify_todo;

void
ins_que(qelem *elem, qelem *pred)
{
	qelem *p = pred->q_forw;
	elem->q_back = pred;
	elem->q_forw = p;
	pred->q_forw = elem;
	p->q_back = elem;
}

void
rem_que(qelem *elem)
{
	qelem *p = elem->q_forw;
	qelem *p2 = elem->q_back;
	p2->q_forw = p;
	p->q_back = p2;
}

static pjob *
sched_job(cb_fun cf, void *ca)
{
	pjob *p = ALLOC(pjob);

	p->cb_fun = cf;
	p->cb_closure = ca;

	/*
	 * Now place on wait queue
	 */
	ins_que(&p->hdr, &proc_wait_list);

	return p;
}

void
run_task(task_fun tf, void *ta, cb_fun cf, void *ca)
{
	pjob *p = sched_job(cf, ca);
	sigset_t mask, omask;

	p->wchan = p;

	sigemptyset(&mask);
	sigaddset(&mask, SIGCHLD);
	sigprocmask(SIG_BLOCK, &mask, &omask);

	if ((p->pid = background())) {
		sigprocmask(SIG_SETMASK, &omask, NULL);
		return;
	}

	exit((*tf)(ta));
	/* firewall... */
	abort();
}

/*
 * Schedule a task to be run when woken up
 */
void
sched_task(cb_fun cf, void *ca, void *wchan)
{
	/*
	 * Allocate a new task
	 */
	pjob *p = sched_job(cf, ca);
#ifdef DEBUG_SLEEP
	dlog("SLEEP on %#x", wchan);
#endif
	p->wchan = wchan;
	p->pid = 0;
	bzero(&p->w, sizeof(p->w));
}

static void
wakeupjob(pjob *p)
{
	rem_que(&p->hdr);
	ins_que(&p->hdr, &proc_list_head);
	task_notify_todo++;
}

void
wakeup(void *wchan)
{
	pjob *p, *p2;
#ifdef DEBUG_SLEEP
	int done = 0;
#endif
	if (!foreground)
		return;

#ifdef DEBUG_SLEEP
	/*dlog("wakeup(%#x)", wchan);*/
#endif
	/*
	 * Can't user ITER() here because
	 * wakeupjob() juggles the list.
	 */
	for (p = FIRST(pjob, &proc_wait_list);
			p2 = NEXT(pjob, p), p != HEAD(pjob, &proc_wait_list);
			p = p2) {
		if (p->wchan == wchan) {
#ifdef DEBUG_SLEEP
			done = 1;
#endif
			wakeupjob(p);
		}
	}

#ifdef DEBUG_SLEEP
	if (!done)
		dlog("Nothing SLEEPing on %#x", wchan);
#endif
}

void
wakeup_task(int rc, int term, void *cl)
{
	wakeup(cl);
}


void
sigchld(int sig)
{
	int w;
	int save_errno = errno;
	pid_t pid;

	while ((pid = waitpid((pid_t)-1, &w, WNOHANG)) > 0) {
		pjob *p, *p2;

		if (WIFSIGNALED(w))
			plog(XLOG_ERROR, "Process %ld exited with signal %d",
				(long)pid, WTERMSIG(w));
#ifdef DEBUG
		else
			dlog("Process %ld exited with status %d",
				(long)pid, WEXITSTATUS(w));
#endif /* DEBUG */

		for (p = FIRST(pjob, &proc_wait_list);
		     p2 = NEXT(pjob, p), p != HEAD(pjob, &proc_wait_list);
		     p = p2) {
			if (p->pid == pid) {
				p->w = w;
				wakeupjob(p);
				break;
			}
		}

#ifdef DEBUG
		if (p == NULL)
			dlog("can't locate task block for pid %ld", (long)pid);
#endif /* DEBUG */
	}

	if (select_intr_valid)
		longjmp(select_intr, sig);
	errno = save_errno;
}

/*
 * Run any pending tasks.
 * This must be called with SIGCHLD disabled
 */
void
do_task_notify(void)
{
	/*
	 * Keep taking the first item off the list and processing it.
	 *
	 * Done this way because the callback can, quite reasonably,
	 * queue a new task, so no local reference into the list can be
	 * held here.
	 */
	while (FIRST(pjob, &proc_list_head) != HEAD(pjob, &proc_list_head)) {
		pjob *p = FIRST(pjob, &proc_list_head);
		rem_que(&p->hdr);
		/*
		 * This job has completed
		 */
		--task_notify_todo;

		/*
		 * Do callback if it exists
		 */
		if (p->cb_fun)
			(*p->cb_fun)(WIFEXITED(p->w) ? WEXITSTATUS(p->w) : 0,
				WIFSIGNALED(p->w) ? WTERMSIG(p->w) : 0,
				p->cb_closure);

		free(p);
	}
}
@


1.17
log
@Delete casts to void* of the argument to free(): only needed when lying
about constness and none of these were
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.16 2014/10/26 02:43:50 guenther Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.16 2014/10/26 02:43:50 guenther Exp $
d109 1
a109 1
	p->wchan = (void *)p;
d140 1
a140 1
	bzero((void *)&p->w, sizeof(p->w));
d203 1
a203 1
			plog(XLOG_ERROR, "Process %ld exited with signal %ld",
d207 1
a207 1
			dlog("Process %ld exited with status %ld",
d212 2
a213 2
				p2 = NEXT(pjob, p), p != HEAD(pjob, &proc_wait_list);
				p = p2) {
@


1.16
log
@Lint is dead
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.15 2014/10/20 00:20:04 guenther Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.15 2014/10/20 00:20:04 guenther Exp $
d262 1
a262 1
		free((void *)p);
@


1.15
log
@Start removing portability goo: we have syslog(), strerror(), POSIX regexp,
    BSD-style getmntinfo(), BSD signals, 4.4BSD unmount(), etc
Delete configurations for other OSes
Delete fsinfo and mk-amd-map, as we don't build them.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.14 2011/11/06 01:43:50 guenther Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.14 2011/11/06 01:43:50 guenther Exp $
a190 1
/*ARGSUSED*/
@


1.14
log
@union wait is dead, ancient history; stop using it

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.13 2004/10/21 20:57:08 millert Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.13 2004/10/21 20:57:08 millert Exp $
d46 1
a46 1
#include WAIT
a199 3
#ifdef SYS5_SIGNALS
	if ((pid = wait(&w)) > 0) {
#else
a200 1
#endif /* SYS5_SIGNALS */
a227 3
#ifdef SYS5_SIGNALS
	signal(sig, sigchld);
#endif /* SYS5_SIGNALS */
@


1.13
log
@Backout poll changes; the first mount gets an error for some reason.
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.12 2004/10/04 15:19:04 millert Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.12 2004/10/04 15:19:04 millert Exp $
d57 1
a57 1
	union wait w;			/* Status filled in by sigchld */
d196 1
a196 1
	union wait w;
d203 1
a203 1
	while ((pid = wait3((int *) &w, WNOHANG, (struct rusage *) 0)) > 0) {
d209 1
a209 1
				(long)pid, w.w_termsig);
d213 1
a213 1
				(long)pid, w.w_retcode);
d266 3
a268 2
			(*p->cb_fun)(p->w.w_retcode,
				p->w.w_termsig, p->cb_closure);
@


1.12
log
@Use poll(2) and svc_getreq_poll(2).  Tested by matthieu@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.11 2004/03/15 08:54:54 djm Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.11 2004/03/15 08:54:54 djm Exp $
d48 2
a49 2
extern jmp_buf poll_intr;
extern int poll_intr_valid;
d235 2
a236 2
	if (poll_intr_valid)
		longjmp(poll_intr, sig);
@


1.11
log
@iffy syntax; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sched.c,v 1.10 2003/10/30 16:04:06 millert Exp $	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.10 2003/10/30 16:04:06 millert Exp $
d48 2
a49 2
extern jmp_buf select_intr;
extern int select_intr_valid;
d235 2
a236 2
	if (select_intr_valid)
		longjmp(select_intr, sig);
@


1.10
log
@Fix "the the" typos in comments; Bruno Rohee
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
a37 1
 *	$Id: sched.c,v 1.9 2003/06/02 23:36:51 millert Exp $
d227 2
a228 1
		if (p) ; else dlog("can't locate task block for pid %ld", (long)pid);
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
d37 1
a37 1
 *	$Id: sched.c,v 1.8 2002/08/05 07:24:26 pvalchev Exp $
d249 1
a249 1
	 * Done this way because the the callback can, quite reasonably,
@


1.8
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: sched.c,v 1.7 2002/08/03 08:29:31 pvalchev Exp $
@


1.7
log
@various KNF and code cleanup/simplification, parts checked by millert/deraadt
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.6 2002/05/26 10:37:58 deraadt Exp $
d58 1
a58 1
	voidp cb_closure;		/* Closure for callback */
d60 1
a60 1
	voidp wchan;			/* Wait channel */
d90 1
a90 1
sched_job(cb_fun cf, voidp ca)
d106 1
a106 1
run_task(task_fun tf, voidp ta, cb_fun cf, voidp ca)
d111 1
a111 1
	p->wchan = (voidp) p;
d131 1
a131 1
sched_task(cb_fun cf, voidp ca, voidp wchan)
d142 1
a142 1
	bzero((voidp) &p->w, sizeof(p->w));
d154 1
a154 1
wakeup(voidp wchan)
d188 1
a188 1
wakeup_task(int rc, int term, voidp cl)
d246 1
a246 1
do_task_notify(P_void)
d270 1
a270 1
		free((voidp) p);
@


1.6
log
@missed two pid_t conversions; moritz@@jodeit.org
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.5 2002/05/26 02:49:50 deraadt Exp $
d70 2
a71 2
void ins_que(elem, pred)
qelem *elem, *pred;
d80 2
a81 2
void rem_que(elem)
qelem *elem;
d89 2
a90 3
static pjob *sched_job(cf, ca)
cb_fun cf;
voidp ca;
d105 2
a106 5
void run_task(tf, ta, cf, ca)
task_fun tf;
voidp ta;
cb_fun cf;
voidp ca;
d130 2
a131 4
void sched_task(cf, ca, wchan)
cb_fun cf;
voidp ca;
voidp wchan;
d145 2
a146 2
static void wakeupjob(p)
pjob *p;
d153 2
a154 2
void wakeup(wchan)
voidp wchan;
d187 2
a188 4
void wakeup_task(rc, term, cl)
int rc;
int term;
voidp cl;
d195 2
a196 2
void sigchld(sig)
int sig;
d245 2
a246 1
void do_task_notify(P_void)
@


1.5
log
@pid_cleanup, inspired by work by jason@@ackley.net
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.4 2001/09/04 23:35:59 millert Exp $
d218 1
a218 1
			plog(XLOG_ERROR, "Process %d exited with signal %ld",
d222 1
a222 1
			dlog("Process %d exited with status %ld",
@


1.4
log
@Replace the deprecated BSD sigsetmask/sigblock/sigpause functions with their POSIX counterparts.
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.3 2001/03/02 06:22:04 deraadt Exp $
d56 1
a56 1
	int pid;			/* Process ID of job */
d208 1
a208 1
	int pid;
d218 2
a219 2
			plog(XLOG_ERROR, "Process %d exited with signal %d",
				pid, w.w_termsig);
d222 2
a223 2
			dlog("Process %d exited with status %d",
				pid, w.w_retcode);
d237 1
a237 1
		if (p) ; else dlog("can't locate task block for pid %d", pid);
@


1.3
log
@KNF
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.2 1997/08/04 19:26:05 deraadt Exp $
d113 1
a113 1
	int mask;
d117 3
a119 1
	mask = sigblock(sigmask(SIGCHLD));
d122 1
a122 1
		sigsetmask(mask);
a279 48

#ifdef HAS_SVR3_SIGNALS
/*
 * 4.2 signal library based on svr3 (4.1+ bsd) interface
 * From Stephen C. Pope <scp@@acl.lanl.gov).
 */

static int current_mask = 0;

int sigblock(mask)
int mask;
{
    int sig;
    int m;
    int oldmask;

    oldmask = current_mask;
    for ( sig = 1, m = 1; sig <= MAXSIG; sig++, m <<= 1 ) {
        if (mask & m)  {
	    sighold(sig);
            current_mask |= m;
        }
    }
    return oldmask;
}

int sigsetmask(mask)
int mask;
{
    int sig;
    int m;
    int oldmask;

    oldmask = current_mask;
    for ( sig = 1, m = 1; sig <= MAXSIG; sig++, m <<= 1 ) {
        if (mask & m)  {
            sighold(sig);
            current_mask |= m;
        }
        else  {
            sigrelse(sig);
            current_mask &= ~m;
        }
    }
    return oldmask;
}

#endif /* HAS_SVR3_SIGNALS */
@


1.2
log
@save errno in sigchld handlers
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.1.1.1 1995/10/18 08:47:12 deraadt Exp $
d47 1
a47 1
#include <sys/signal.h>
d119 1
a119 1
	if (p->pid = background()) {
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: sched.c,v 1.3 1994/06/13 20:48:00 mycroft Exp $
d205 1
d244 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
