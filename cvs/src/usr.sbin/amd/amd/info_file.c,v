head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.10
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.12
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.26
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.24
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.22
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.20
	OPENBSD_5_0:1.6.0.18
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.16
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.14
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.1.1.1.0.24
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.22
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.20
	OPENBSD_2_8:1.1.1.1.0.18
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.16
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.10.26.03.03.34;	author guenther;	state Exp;
branches;
next	1.8;
commitid	RhupU2WFUkfzry1g;

1.8
date	2014.10.20.02.33.42;	author guenther;	state Exp;
branches;
next	1.7;
commitid	bZbpWDoZDVt0RPe1;

1.7
date	2013.12.03.02.14.57;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.20.04.00.32;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.36.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.05.07.24.26;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.18.02.14.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.18.00.50.23;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.10;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to the modern RPC style with different names for server and client
    stubs (they have different prototypes, after all).
Fill in missing prototypes.
Use void* arguments on closure-style callbacks, with local variables of
    the expected type.
Keep deleting unnecessary casts.
@
text
@/*
 * Copyright (c) 1990 Jan-Simon Pendry
 * Copyright (c) 1990 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)info_file.c	8.1 (Berkeley) 6/6/93
 *	$Id: info_file.c,v 1.8 2014/10/20 02:33:42 guenther Exp $
 */

/*
 * Get info from file
 */

#include "am.h"

#include <ctype.h>
#include <sys/stat.h>

#define	MAX_LINE_LEN	2048

static int
read_line(char *buf, int size, FILE *fp)
{
	int done = 0;

	do {
		while (fgets(buf, size, fp)) {
			int len = strlen(buf);

			done += len;
			if (len > 1 && buf[len-2] == '\\' &&
			    buf[len-1] == '\n') {
				int ch;

				buf += len - 2;
				size -= len - 2;
				*buf = '\n'; buf[1] = '\0';
				/*
				 * Skip leading white space on next line
				 */
				while ((ch = getc(fp)) != EOF &&
				    isascii(ch) && isspace(ch))
					;
				(void) ungetc(ch, fp);
			} else {
				return done;
			}
		}
	} while (size > 0 && !feof(fp));
	return done;
}

/*
 * Try to locate a key in a file
 */
static int
search_or_reload_file(FILE *fp, char *map, char *key, char **val, mnt_map *m,
    void (*fn)(mnt_map *m, char *, char *))
{
	char key_val[MAX_LINE_LEN];
	int chuck = 0;
	int line_no = 0;

	while (read_line(key_val, sizeof(key_val), fp)) {
		char *kp;
		char *cp;
		char *hash;
		int len = strlen(key_val);

		line_no++;

		/*
		 * Make sure we got the whole line
		 */
		if (key_val[len-1] != '\n') {
			plog(XLOG_WARNING, "line %d in \"%s\" is too long",
			    line_no, map);
			chuck = 1;
		} else {
			key_val[len-1] = '\0';
		}

		/*
		 * Strip comments
		 */
		hash = strchr(key_val, '#');
		if (hash)
			*hash = '\0';

		/*
		 * Find start of key
		 */
		for (kp = key_val;
		    isascii((unsigned char)*kp) && isspace((unsigned char)*kp);
		    kp++)
			;

		/*
		 * Ignore blank lines
		 */
		if (!*kp)
			goto again;

		/*
		 * Find end of key
		 */
		for (cp = kp; *cp &&
		    (!isascii((unsigned char)*cp) || !isspace((unsigned char)*cp));
		    cp++)
			;

		/*
		 * Check whether key matches
		 */
		if (*cp)
			*cp++ = '\0';

		if (fn || (*key == *kp && strcmp(key, kp) == 0)) {
			while (isascii((unsigned char)*cp) &&
			    isspace((unsigned char)*cp))
				cp++;
			if (*cp) {
				/*
				 * Return a copy of the data
				 */
				char *dc = strdup(cp);
				if (fn) {
					(*fn)(m, strdup(kp), dc);
				} else {
					*val = dc;
#ifdef DEBUG
					dlog("%s returns %s", key, dc);
#endif /* DEBUG */
				}
				if (!fn)
					return 0;
			} else {
				plog(XLOG_USER, "%s: line %d has no value field",
				    map, line_no);
			}
		}

again:
		/*
		 * If the last read didn't get a whole line then
		 * throw away the remainder before continuing...
		 */
		if (chuck) {
			while (fgets(key_val, sizeof(key_val), fp) &&
			    !strchr(key_val, '\n'))
					;
			chuck = 0;
		}
	}

	return fn ? 0 : ENOENT;
}

static FILE *
file_open(char *map, time_t *tp)
{
	FILE *mapf = fopen(map, "r");

	if (mapf && tp) {
		struct stat stb;

		if (fstat(fileno(mapf), &stb) < 0)
			*tp = clocktime();
		else
			*tp = stb.st_mtime;
	}
	return mapf;
}

int
file_init(char *map, time_t *tp)
{
	FILE *mapf = file_open(map, tp);

	if (mapf) {
		(void) fclose(mapf);
		return 0;
	}
	return errno;
}

int
file_reload(mnt_map *m, char *map, void (*fn)(mnt_map *, char *, char *))
{
	FILE *mapf = file_open(map, (time_t *) 0);

	if (mapf) {
		int error = search_or_reload_file(mapf, map, 0, 0, m, fn);
		(void) fclose(mapf);
		return error;
	}

	return errno;
}

int
file_search(mnt_map *m, char *map, char *key, char **pval, time_t *tp)
{
	time_t t;
	FILE *mapf = file_open(map, &t);

	if (mapf) {
		int error;
		if (*tp < t) {
			*tp = t;
			error = -1;
		} else {
			error = search_or_reload_file(mapf, map, key, pval, 0, 0);
		}
		(void) fclose(mapf);
		return error;
	}

	return errno;
}

int
file_mtime(char *map, time_t *tp)
{
	FILE *mapf = file_open(map, tp);

	if (mapf) {
		(void) fclose(mapf);
		return 0;
	}

	return errno;
}
@


1.8
log
@unifdef -DHAS_REGEXP -DHAS_PASSWD_MAPS -DHAS_FILE_MAPS \
  -DHAS_NIS_MAPS -DHAS_NIS_RELOAD -DRPC_4 -DHAS_UNION_MAPS \
  -DHAS_TCP_NFS -DOS_HAS_NDBM -DNFS_PROTOCOL_VERSION=3 \
  -DNFS_ARGS_NEEDS_PATH -DPRECISE_SYMLINKS -DHAS_EMPTY_AUTOMOUNTS \
  -DNEED_MNTOPT_PARSER -DSHORT_MOUNT_NAME -DHAS_NFS_QUALIFIED_NAMES \
  -UUPDATE_MTAB -UFIXUP_MNTENT -UMNTENT_HDR -UMNTINFO_DEV \
  -UMNTOPT_COMPRESS -UMNTOPT_NQNFS -UINFORM_MOUNTD \
  -USUNOS4_WORKAROUND -UULTRIX_HACK

ok deraadt@@
@
text
@d35 1
a35 1
 *	$Id: info_file.c,v 1.7 2013/12/03 02:14:57 deraadt Exp $
d216 1
a216 1
file_reload(mnt_map *m, char *map, void (*fn)())
@


1.7
log
@ctype cleanups
ok okan
@
text
@d35 1
a35 1
 *	$Id: info_file.c,v 1.6 2007/03/20 04:00:32 tedu Exp $
a43 1
#ifdef HAS_FILE_MAPS
a261 1
#endif /* HAS_FILE_MAPS */
@


1.6
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d35 1
a35 1
 *	$Id: info_file.c,v 1.5 2003/06/02 23:36:51 millert Exp $
d122 3
a124 1
		for (kp = key_val; isascii(*kp) && isspace(*kp); kp++)
d136 3
a138 1
		for (cp = kp; *cp&&(!isascii(*cp)||!isspace(*cp)); cp++)
d148 2
a149 1
			while (isascii(*cp) && isspace(*cp))
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: info_file.c,v 1.4 2002/08/05 07:24:26 pvalchev Exp $
d122 1
a122 1
		for (kp = key_val; *kp && isascii(*kp) && isspace(*kp); kp++)
d144 1
a144 1
			while (*cp && isascii(*cp) && isspace(*cp))
@


1.4
log
@Get rid of useless local definitions P_void, voidp, Const and use
void, void *, const respectively; some cosmetics; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: info_file.c,v 1.3 2002/07/18 02:14:45 deraadt Exp $
@


1.3
log
@more indent
@
text
@d39 1
a39 1
 *	$Id: info_file.c,v 1.2 2002/07/18 00:50:23 pvalchev Exp $
d91 1
a91 1
    void (*fn)(mnt_map *m, char*, char*))
@


1.2
log
@ANSIfy; ok deraadt
@
text
@d39 1
a39 1
 *	$Id: info_file.c,v 1.1.1.1 1995/10/18 08:47:10 deraadt Exp $
d54 2
a55 1
static int read_line(char *buf, int size, FILE *fp)
d62 1
d65 1
a65 1
					buf[len-1] == '\n') {
d67 1
d75 2
a76 2
					isascii(ch) && isspace(ch))
						;
a82 1

d89 3
a91 1
static int search_or_reload_file(FILE *fp, char *map, char *key, char **val, mnt_map *m, void (*fn)(mnt_map *m, char*, char*))
d102 1
d109 2
a110 1
			plog(XLOG_WARNING, "line %d in \"%s\" is too long", line_no, map);
d166 2
a167 1
				plog(XLOG_USER, "%s: line %d has no value field", map, line_no);
d178 1
a178 1
				!strchr(key_val, '\n'))
d187 2
a188 1
static FILE *file_open(char *map, time_t *tp)
d191 1
d194 1
d203 2
a204 1
int file_init(char *map, time_t *tp)
d207 1
d215 2
a216 1
int file_reload(mnt_map *m, char *map, void (*fn)())
d219 1
d229 2
a230 1
int file_search(mnt_map *m, char *map, char *key, char **pval, time_t *tp)
d234 1
d250 2
a251 1
int file_mtime(char *map, time_t *tp)
d254 1
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: info_file.c,v 1.3 1994/06/13 20:47:17 mycroft Exp $
d54 1
a54 5
static int read_line P((char *buf, int size, FILE *fp));
static int read_line(buf, size, fp)
char *buf;
int size;
FILE *fp;
d87 1
a87 8
static int search_or_reload_file P((FILE *fp, char *map, char *key, char **val, mnt_map *m, void (*fn)(mnt_map *m, char*, char*)));
static int search_or_reload_file(fp, map, key, val, m, fn)
FILE *fp;
char *map;
char *key;
char **val;
mnt_map *m;
void (*fn) P((mnt_map*, char*, char*));
d180 1
a180 4
static FILE *file_open P((char *map, time_t *tp));
static FILE *file_open(map, tp)
char *map;
time_t *tp;
d193 1
a193 4
int file_init P((char *map, time_t *tp));
int file_init(map, tp)
char *map;
time_t *tp;
d203 1
a203 5
int file_reload P((mnt_map *m, char *map, void (*fn)()));
int file_reload(m, map, fn)
mnt_map *m;
char *map;
void (*fn)();
d215 1
a215 7
int file_search P((mnt_map *m, char *map, char *key, char **pval, time_t *tp));
int file_search(m, map, key, pval, tp)
mnt_map *m;
char *map;
char *key;
char **pval;
time_t *tp;
d234 1
a234 4
int file_mtime P((char *map, time_t *tp));
int file_mtime(map, tp)
char *map;
time_t *tp;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
