head	1.10;
access;
symbols
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.20
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.16
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.14
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.12
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.10
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.8
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.6
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.10.20.00.20.04;	author guenther;	state dead;
branches;
next	1.9;
commitid	ciYfifbFHhmQvDo5;

1.9
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.04.15.18.18.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.23.04.31;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.10.21.07.14;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.02.20.01.35;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.15.23.43.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.10.26.20.10.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Start removing portability goo: we have syslog(), strerror(), POSIX regexp,
    BSD-style getmntinfo(), BSD signals, 4.4BSD unmount(), etc
Delete configurations for other OSes
Delete fsinfo and mk-amd-map, as we don't build them.

ok deraadt@@
@
text
@/*
 * Copyright (c) 1989 Jan-Simon Pendry
 * Copyright (c) 1989 Imperial College of Science, Technology & Medicine
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry at Imperial College, London.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)fsinfo.c	8.1 (Berkeley) 6/6/93
 *	$Id: fsinfo.c,v 1.9 2009/10/27 23:59:51 deraadt Exp $
 */

/*
 * fsinfo
 */

#include "../fsinfo/fsinfo.h"
#include "fsi_gram.h"
#include <pwd.h>

qelem *list_of_hosts;
qelem *list_of_automounts;
dict *dict_of_volnames;
dict *dict_of_hosts;
char *autodir = "/a";
char hostname[MAXHOSTNAMELEN+1];
char *username;
int file_io_errors;
int parse_errors;
int errors;
int verbose;
char idvbuf[1024];

char **g_argv;

/*
 * Output file prefixes
 */
char *exportfs_pref;
char *fstab_pref;
char *dumpset_pref;
char *mount_pref;
char *bootparams_pref;

/*
 * Argument cracking...
 */
static void get_args(c, v)
int c;
char *v[];
{
	extern char *optarg;
	extern int optind;
	int ch, n, usage = 0;
	char *iptr = idvbuf;
	int iptr_size = sizeof(idvbuf);

	while ((ch = getopt(c, v, "a:b:d:e:f:h:m:D:U:I:qv")) != -1)
	switch (ch) {
	case 'a':
		autodir = optarg;
		break;
	case 'b':
		if (bootparams_pref)
			fatal("-b option specified twice");
		bootparams_pref = optarg;
		break;
	case 'd':
		if (dumpset_pref)
			fatal("-d option specified twice");
		dumpset_pref = optarg;
		break;
	case 'h':
		strlcpy(hostname, optarg, sizeof(hostname));
		break;
	case 'e':
		if (exportfs_pref)
			fatal("-e option specified twice");
		exportfs_pref = optarg;
		break;
	case 'f':
		if (fstab_pref)
			fatal("-f option specified twice");
		fstab_pref = optarg;
		break;
	case 'm':
		if (mount_pref)
			fatal("-m option specified twice");
		mount_pref = optarg;
		break;
	case 'q':
		verbose = -1;
		break;
	case 'v':
		verbose = 1;
		break;
	case 'I': case 'D': case 'U':
		n = snprintf(iptr, iptr_size, "-%c%s ", ch, optarg);
		if (n >= iptr_size || n < 0)
			usage++;
		else {
			iptr_size -= n;
			iptr += n;
		}
		break;
	default:
		usage++;
		break;
	}

	if (c != optind) {
		g_argv = v + optind - 1;
		if (yywrap())
			fatal("Cannot read any input files");
	} else {
		usage++;
	}

	if (usage) {
		fprintf(stderr,
"\
Usage: %s [-v] [-a autodir] [-h hostname] [-b bootparams] [-d dumpsets]\n\
\t[-e exports] [-f fstabs] [-m automounts]\n\
\t[-I dir] [-D|-U string[=string]] config ...\n", __progname);
		exit(1);
	}


	if (g_argv[0])
		log("g_argv[0] = %s", g_argv[0]);
	else
		log("g_argv[0] = (nil)");
}

/*
 * Determine username of caller
 */
static char *find_username()
{
	extern char *getlogin();
	extern char *getenv();
	char *u = getlogin();
	if (!u) {
		struct passwd *pw = getpwuid(getuid());
		if (pw)
			u = pw->pw_name;
	}
	if (!u)
		u = getenv("LOGNAME");
	if (!u)
		u = getenv("USER");
	if (!u)
		u = "root";

	return strdup(u);
}

/*
 * MAIN
 */
int
main(argc, argv)
	int argc;
	char *argv[];
{
	/*
	 * Process arguments
	 */
	get_args(argc, argv);

	/*
	 * If no hostname given then use the local name
	 */
	if (!*hostname && gethostname(hostname, sizeof(hostname)) < 0)
		err(1, "gethostname");

	/*
	 * Get the username
	 */
	username = find_username();

	/*
	 * New hosts and automounts
	 */
	list_of_hosts = new_que();
	list_of_automounts = new_que();

	/*
	 * New dictionaries
	 */
	dict_of_volnames = new_dict();
	dict_of_hosts = new_dict();

	/*
	 * Parse input
	 */
	show_area_being_processed("read config", 11);
	if (yyparse())
		errors = 1;
	errors += file_io_errors + parse_errors;

	if (errors == 0) {
		/*
		 * Do semantic analysis of input
		 */
		analyze_hosts(list_of_hosts);
		analyze_automounts(list_of_automounts);
	}

	/*
	 * Give up if errors
	 */
	if (errors == 0) {
		/*
		 * Output data files
		 */

		write_atab(list_of_automounts);
		write_bootparams(list_of_hosts);
		write_dumpset(list_of_hosts);
		write_exportfs(list_of_hosts);
		write_fstab(list_of_hosts);
	}

	col_cleanup(1);

	return (errors);
}
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d35 1
a35 1
 *	$Id: fsinfo.c,v 1.8 2005/04/15 18:18:07 millert Exp $
@


1.8
log
@snprintf() returns int, not size_t; also use the return value after
we have checked it.  Joint work with moritz@@
@
text
@d35 1
a35 1
 *	$Id: fsinfo.c,v 1.7 2003/06/02 23:36:52 millert Exp $
a36 6

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d35 1
a35 1
 *	$Id: fsinfo.c,v 1.6 2002/08/04 23:04:31 pvalchev Exp $
d85 1
a85 2
	int ch;
	int usage = 0;
a87 1
	size_t l;
d129 2
a130 2
		l = snprintf(iptr, iptr_size, "-%c%s ", ch, optarg);
		if (l >= iptr_size || l < 0)
d133 2
a134 3
			l = strlen(iptr);
			iptr_size -= l;
			iptr += strlen(iptr);
@


1.6
log
@Handle snprintf(3) returning -1; ok deraadt
@
text
@d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d35 1
a35 1
 *	$Id: fsinfo.c,v 1.5 2002/06/10 21:07:14 itojun Exp $
@


1.5
log
@strlcpy, strlcat
@
text
@d39 1
a39 1
 *	$Id: fsinfo.c,v 1.4 2001/01/02 20:01:35 mickey Exp $
d92 2
a93 1
	int  iptr_size = sizeof(idvbuf);
d135 2
a136 1
		if (snprintf(iptr, iptr_size, "-%c%s ", ch, optarg) >= iptr_size)
d139 1
a139 1
			size_t l = strlen(iptr);
@


1.4
log
@fix sprintf overflow, found by spock@@techfour.net, just a better fix of mine.
user __progname, err/warn.
@
text
@d39 1
a39 1
 *	$Id: fsinfo.c,v 1.3 1997/01/15 23:43:47 millert Exp $
d110 1
a110 1
		strncpy(hostname, optarg, sizeof(hostname)-1);
@


1.3
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d39 1
a39 1
 *	$Id: fsinfo.c,v 1.2 1996/10/26 20:10:20 millert Exp $
a69 1
char *progname;
d92 1
a92 13

	/*
	 * Determine program name
	 */
	if (v[0]) {
		progname = strrchr(v[0], '/');
		if (progname && progname[1])
			progname++;
		else
			progname = v[0];
	}
	if (!progname)
		progname = "fsinfo";
d134 7
a140 2
		sprintf(iptr, "-%c%s ", ch, optarg);
		iptr += strlen(iptr);
d160 1
a160 1
\t[-I dir] [-D|-U string[=string]] config ...\n", progname);
d197 1
d199 2
a200 2
int argc;
char *argv[];
d210 2
a211 4
	if (!*hostname && gethostname(hostname, sizeof(hostname)) < 0) {
		perror("gethostname");
		exit(1);
	}
d263 1
a263 1
	exit(errors);
@


1.2
log
@Prefer $LOGNAME to $USER.
@
text
@d39 1
a39 1
 *	$Id: fsinfo.c,v 1.1.1.1 1995/10/18 08:47:19 deraadt Exp $
d107 1
a107 1
	while ((ch = getopt(c, v, "a:b:d:e:f:h:m:D:U:I:qv")) != EOF)
@


1.1
log
@Initial revision
@
text
@d39 1
a39 1
 *	$Id: fsinfo.c,v 1.3 1994/06/13 20:50:19 mycroft Exp $
d193 2
a195 2
	if (!u)
		u = getenv("LOGNAME");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
