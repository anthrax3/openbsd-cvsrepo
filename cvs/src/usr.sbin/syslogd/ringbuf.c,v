head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.38
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.36
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.32
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.30
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.28
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.26
	OPENBSD_5_0:1.7.0.24
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.22
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.20
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.16
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.18
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.14
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.12
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.10
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2016.10.16.22.12.50;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	Upi8egpBgqWfAtF0;

1.9
date	2015.07.06.16.12.16;	author millert;	state Exp;
branches;
next	1.8;
commitid	MZymOysCDJJlr2xr;

1.8
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2005.09.21.23.25.32;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.16.04.00.50;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.16.03.59.12;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2005.06.06.23.22.04;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.25.19.10.54;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.26.11.02.32;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.04.08.28.49;	author djm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Fix trailing whitespace and shorten long lines.
No binary change.
@
text
@/* $OpenBSD: ringbuf.c,v 1.9 2015/07/06 16:12:16 millert Exp $ */

/*
 * Copyright (c) 2004 Damien Miller
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Simple ringbuffer for lines of text.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "syslogd.h"

#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

/* Initialise a ring buffer */
struct ringbuf *
ringbuf_init(size_t len)
{
	struct ringbuf *ret;

	if (len == 0 || (ret = malloc(sizeof(*ret))) == NULL)
		return (NULL);

	if ((ret->buf = malloc(len)) == NULL) {
		free(ret);
		return (NULL);
	}

	ret->len = len;
	ret->start = ret->end = 0;

	return (ret);
}

/* Free a ring buffer */
void
ringbuf_free(struct ringbuf *rb)
{
	free(rb->buf);
	free(rb);
}

/* Clear a ring buffer */
void
ringbuf_clear(struct ringbuf *rb)
{
	rb->start = rb->end = 0;
}

/* Return the number of bytes used in a ringbuffer */
size_t
ringbuf_used(struct ringbuf *rb)
{
	return ((rb->len + rb->end - rb->start) % rb->len);
}

/*
 * Append a line to a ring buffer, will delete lines from start
 * of buffer as necessary
 */
int
ringbuf_append_line(struct ringbuf *rb, char *line)
{
	size_t llen, used, copy_len;
	int overflow = 0;

	if (rb == NULL || line == NULL)
		return (-1);

	llen = strlen(line);
	if (llen == 0)
		return (-1);

	if (line[llen - 1] != '\n')
		llen++; /* one extra for appended '\n' */

	if (llen >= rb->len)
		return (-1);

	/*
	 * If necessary, advance start pointer to make room for appended
	 * string. Ensure that start pointer is at the beginning of a line
	 * once we are done (i.e move to after '\n').
	 */
	used = ringbuf_used(rb);
	if (used + llen >= rb->len) {
		rb->start = (rb->start + used + llen - rb->len) % rb->len;

		/* Find next '\n' */
		while (rb->buf[rb->start] != '\n')
			rb->start = (rb->start + 1) % rb->len;
		/* Skip it */
		rb->start = (rb->start + 1) % rb->len;

		overflow = 1;
	}

	/*
	 * Now append string, starting from last pointer and wrapping if
	 * necessary
	 */
	if (rb->end + llen > rb->len) {
		copy_len = rb->len - rb->end;
		memcpy(rb->buf + rb->end, line, copy_len);
		memcpy(rb->buf, line + copy_len, llen - copy_len - 1);
		rb->buf[llen - copy_len - 1] = '\n';
	} else {
		memcpy(rb->buf + rb->end, line, llen - 1);
		rb->buf[rb->end + llen - 1] = '\n';
	}

	rb->end = (rb->end + llen) % rb->len;

	return (overflow);
}

/*
 * Copy and nul-terminate a ringbuffer to a string.
 */
ssize_t
ringbuf_to_string(char *buf, size_t len, struct ringbuf *rb)
{
	size_t copy_len, n;

	if (buf == NULL || rb == NULL || len == 0)
		return (-1);

	copy_len = MINIMUM(len - 1, ringbuf_used(rb));

	if (copy_len == 0)
		return (copy_len);

	if (rb->start < rb->end)
		memcpy(buf, rb->buf + rb->start, copy_len);
	else {
		/* If the buffer is wrapped, copy each hunk separately */
		n = rb->len - rb->start;
		memcpy(buf, rb->buf + rb->start, MINIMUM(n, copy_len));
		if (copy_len > n)
			memcpy(buf + n, rb->buf,
			    MINIMUM(rb->end, copy_len - n));
	}
	buf[copy_len] = '\0';

	return (ringbuf_used(rb));
}
@


1.9
log
@Remove some unneeded includes.  OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.8 2015/01/16 06:40:21 deraadt Exp $ */
d156 2
a157 1
			memcpy(buf + n, rb->buf, MINIMUM(rb->end, copy_len - n));
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.7 2005/09/21 23:25:32 djm Exp $ */
a22 1
#include <sys/types.h>
@


1.7
log
@rearrange sanity checks to eliminate signed arithmatic, from stevesk@@
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.6 2005/09/16 04:00:50 djm Exp $ */
a23 1
#include <sys/param.h>
d30 2
d145 1
a145 1
	copy_len = MIN(len - 1, ringbuf_used(rb));
d155 1
a155 1
		memcpy(buf, rb->buf + rb->start, MIN(n, copy_len));
d157 1
a157 1
			memcpy(buf + n, rb->buf, MIN(rb->end, copy_len - n));
@


1.6
log
@reorder tests for improved sanity, from stevesk@@
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.5 2005/09/16 03:59:12 djm Exp $ */
d139 1
a139 1
	ssize_t copy_len, n;
d141 1
a141 1
	if (buf == NULL || rb == NULL)
d146 1
a146 1
	if (copy_len <= 0)
d155 1
a155 1
		if (copy_len - n > 0)
@


1.5
log
@unneeded headers, from stevesk@@
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.4 2005/06/06 23:22:04 djm Exp $ */
d87 3
d93 1
a93 1
	if (rb == NULL || llen == 0 || llen >= rb->len)
@


1.4
log
@memory leak on SIGHUP for memory buffer logs, based on fix by Stephen Marley;
ok avsm@@
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.3 2004/06/25 19:10:54 djm Exp $ */
a24 2
#include <sys/uio.h>
#include <errno.h>
a27 1
#include <unistd.h>
@


1.3
log
@extend memory buffer control protocol to support transmission of flags,
starting with one to indicate whether the memory ringbuffers have overflowed;
idea & ok markus@@

NB if you are using memory buffered logging make sure you update both syslogd
and syslogc _and_ restart syslogd because the protocol has changed
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.2 2004/02/26 11:02:32 avsm Exp $ */
d52 8
@


1.2
log
@staring->starting in comment
@
text
@d1 1
a1 1
/* $OpenBSD: ringbuf.c,v 1.1 2004/01/04 08:28:49 djm Exp $ */
d76 1
d102 2
d122 1
a122 1
	return (0);
@


1.1
log
@Buffered logging for syslogd. Logs may be stored in memory buffers and
extracted using a small client. Useful for diskless systems.
much feedback from deraadt@@, canacar@@, jmc@@, jakob@@ ; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d104 1
a104 1
	 * Now append string, staring from last pointer and wrapping if
@

