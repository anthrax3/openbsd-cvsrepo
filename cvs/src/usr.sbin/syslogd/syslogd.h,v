head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.14
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.12
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.10
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.8
	OPENBSD_5_0:1.7.0.6
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.12
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.8
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.6
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.6
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.31
date	2017.08.08.14.23.23;	author bluhm;	state Exp;
branches;
next	1.30;
commitid	mLHelEDyH1jZRa58;

1.30
date	2017.04.05.22.15.35;	author bluhm;	state Exp;
branches;
next	1.29;
commitid	fTGT1uB8rudZU6Oa;

1.29
date	2017.04.05.21.55.31;	author bluhm;	state Exp;
branches;
next	1.28;
commitid	flr3ijis68GFyMYo;

1.28
date	2017.04.05.11.31.45;	author bluhm;	state Exp;
branches;
next	1.27;
commitid	TF7j2iQD9pdWhJEf;

1.27
date	2017.03.16.23.55.19;	author bluhm;	state Exp;
branches;
next	1.26;
commitid	mPxHeEPvGtNx5V0a;

1.26
date	2016.10.17.11.19.55;	author bluhm;	state Exp;
branches;
next	1.25;
commitid	yoeynjilxfuZwQte;

1.25
date	2016.10.16.22.00.14;	author bluhm;	state Exp;
branches;
next	1.24;
commitid	ElNa2cXQB0SPdrJ2;

1.24
date	2016.10.06.13.03.47;	author bluhm;	state Exp;
branches;
next	1.23;
commitid	Topwmtp5NL4LwDP6;

1.23
date	2015.10.23.16.28.52;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	eBs6rrorZWMEEvct;

1.22
date	2015.10.21.14.03.07;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	TmKVn9eOlSCpK5iI;

1.21
date	2015.10.15.20.26.47;	author bluhm;	state Exp;
branches;
next	1.20;
commitid	q4QZhB2FFsrsOMtz;

1.20
date	2015.10.09.16.58.25;	author bluhm;	state Exp;
branches;
next	1.19;
commitid	5A0tNEXnHGGgWpGX;

1.19
date	2015.07.07.17.53.04;	author bluhm;	state Exp;
branches;
next	1.18;
commitid	Ygwih79fAl6T0IdE;

1.18
date	2015.07.06.16.12.16;	author millert;	state Exp;
branches;
next	1.17;
commitid	MZymOysCDJJlr2xr;

1.17
date	2015.06.30.12.03.32;	author bluhm;	state Exp;
branches;
next	1.16;
commitid	Zc7oLXwqGtUJdHot;

1.16
date	2014.10.05.18.14.01;	author bluhm;	state Exp;
branches;
next	1.15;
commitid	F9a5EGI6b8V6fn1r;

1.15
date	2014.10.03.21.55.22;	author bluhm;	state Exp;
branches;
next	1.14;
commitid	iEB47IzucBg1qJLP;

1.14
date	2014.09.10.13.16.20;	author doug;	state Exp;
branches;
next	1.13;
commitid	FKg512MOeVlGwll8;

1.13
date	2014.09.08.00.43.42;	author doug;	state Exp;
branches;
next	1.12;
commitid	gbKO3ZNYXDnVBGv2;

1.12
date	2014.08.25.18.19.18;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	5y3omv4nlYdpVnPL;

1.11
date	2014.08.20.20.10.17;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	yQfrceogzjafLaIV;

1.10
date	2014.08.20.19.33.43;	author bluhm;	state Exp;
branches;
next	1.9;
commitid	xAno00zgSFtTXS6f;

1.9
date	2014.08.20.19.16.27;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	fM55SSGsY8U1QNTd;

1.8
date	2013.08.19.06.09.23;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.30.19.29.01;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.02.15.17.11;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	2005.06.06.23.22.04;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.03.05.32.19;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.04.08.28.49;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.29.22.05.11;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.31.18.20.07;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Kernel sendsyslog(2), libc syslog(3), and syslogd(8) restrict and
truncate the length of a syslog message to 8192 bytes.  Use one
global define LOG_MAXLINE for all of them.
OK deraadt@@ millert@@
@
text
@/*	$OpenBSD: syslogd.h,v 1.30 2017/04/05 22:15:35 bluhm Exp $ */

/*
 * Copyright (c) 2003 Anil Madhavapeddy <anil@@recoil.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <stdarg.h>

/* Privilege separation */
void  priv_init(int, int, int, char **);
__dead void priv_exec(char *, int, int, int, char **);
int   priv_open_tty(const char *);
int   priv_open_log(const char *);
FILE *priv_open_utmp(void);
FILE *priv_open_config(void);
void  priv_config_parse_done(void);
int   priv_config_modified(void);
int   priv_getaddrinfo(char *, char *, char *, struct sockaddr *, size_t);
int   priv_getnameinfo(struct sockaddr *, socklen_t, char *, size_t);

/* Terminal message */
#define TTYMSGTIME	1		/* timeout used by ttymsg */
#define TTYMAXDELAY	256		/* max events in ttymsg */
void ttymsg(struct iovec *, int, char *);

/* File descriptor send/recv */
void send_fd(int, int);
int  receive_fd(int);

/* The list of domain sockets */
extern int nunix;
extern char **path_unix;
extern char *path_ctlsock;

#define ERRBUFSIZE	256
void vlogmsg(int pri, const char *, const char *, va_list);
__dead void die(int);
extern int Debug;

struct ringbuf {
	char *buf;
	size_t len, start, end;
};

struct ringbuf *ringbuf_init(size_t);
void		ringbuf_free(struct ringbuf *);
void		ringbuf_clear(struct ringbuf *);
size_t		ringbuf_used(struct ringbuf *);
int		ringbuf_append_line(struct ringbuf *, char *);
ssize_t		ringbuf_to_string(char *, size_t, struct ringbuf *);
@


1.30
log
@The global variable Startup is not used anymore and can be deleted.
The functionality has moved into log_setdebug().
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.29 2017/04/05 21:55:31 bluhm Exp $ */
a50 1
#define MAXLINE		8192		/* maximum line length */
@


1.29
log
@As we did not have nice log functions before, ttymsg() had to return
the error string.  Log the message when the error happens and make
the function void.
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.28 2017/04/05 11:31:45 bluhm Exp $ */
a55 1
extern int Startup;
@


1.28
log
@Replace logdebug() with generic log_debug() from log.c.  Implement
log_debugadd() to construct debug message incrementally.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.27 2017/03/16 23:55:19 bluhm Exp $ */
d40 1
a40 1
char *ttymsg(struct iovec *, int, char *);
@


1.27
log
@Start to replace the home grown syslogd(8) internal debug and logging
functions with a more common log.c implementation.  Of course
openlog(3) cannot be used, so adapt the log.[ch] initially copied
from ospfd(8) to syslogd's special needs.  As the messages are
limited to ERRBUFSIZE anyway, malloc(3) in the error logging code
can be avoided.  Changing all log calls to the new API will be done
in a separate step.
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.26 2016/10/17 11:19:55 bluhm Exp $ */
a52 1
void logdebug(const char *, ...) __attribute__((__format__ (printf, 1, 2)));
@


1.26
log
@Remove the artificial maximum number of unix domain sockets in
syslogd(8).  Just malloc(3) them dynamically which also gives a
more random address space layout.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.25 2016/10/16 22:00:14 bluhm Exp $ */
d23 2
d54 2
@


1.25
log
@Use closefrom(4) in privsep parent and avoid some global file
descriptor variables in syslogd(8) this way.
OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.24 2016/10/06 13:03:47 bluhm Exp $ */
a44 1
#define MAXUNIX	21
d46 1
a46 1
extern char *path_unix[MAXUNIX];
@


1.24
log
@Do an exec on itself in the privileged syslogd(8) parent process
to reshuffle its memory layout.
Input rzalamena@@; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.23 2015/10/23 16:28:52 bluhm Exp $ */
a48 2
extern int fd_ctlsock, fd_ctlconn, fd_klog, fd_sendsys;
extern int fd_udp, fd_udp6, fd_bind, fd_listen, fd_tls, fd_unix[MAXUNIX];
@


1.23
log
@If writing to a tty blocks, syslogd forked and tried to write again
in a background process.  A potential fork(2) at every message is
bad, so replace this with an event.  As a bonus the syslogd child
process does not need to pledge "proc" anymore.  Also limit the
number of delayed write events.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.22 2015/10/21 14:03:07 bluhm Exp $ */
d24 2
a25 1
int   priv_init(char *, int, int, int, char **);
@


1.22
log
@Do some cleanup in syslogd ttymsg().  Add a debug message when the
syslogd child calls fork(2) to delay blocked output.
OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.21 2015/10/15 20:26:47 bluhm Exp $ */
d36 1
d51 1
@


1.21
log
@In syslogd replace the dprintf() macro with a logdebug() function
as dprintf(3) is in libc now and does something different.
OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.20 2015/10/09 16:58:25 bluhm Exp $ */
d35 2
a36 1
char *ttymsg(struct iovec *, int, char *, int);
d50 1
@


1.20
log
@If syslogd is started with -S, it accepts TLS connections to receive
encrypted messages.  The server certificates are taken from /etc/ssl
like relayd does.
OK benno@@ beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.19 2015/07/07 17:53:04 bluhm Exp $ */
d49 1
a49 1
#define dprintf(_f...)	do { if (Debug) printf(_f); } while (0)
@


1.19
log
@When syslogd is invoked with -T listen_address, it creates a TCP
socket and accepts incomming messages.  At the moment, only RFC
6587 3.4.2. Non-Transparent-Framing format with new-line separator
is supprted for incomming messsages.  Outgoing messages are encoded
as 3.4.1. Octet Counting.  Autodetection of incomming format will
be implemented later.
OK deraadt@@ jmc@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.18 2015/07/06 16:12:16 millert Exp $ */
d47 1
a47 1
extern int fd_udp, fd_udp6, fd_bind, fd_listen, fd_unix[MAXUNIX];
@


1.18
log
@Remove some unneeded includes.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.17 2015/06/30 12:03:32 bluhm Exp $ */
d47 1
a47 1
extern int fd_udp, fd_udp6, fd_bind, fd_unix[MAXUNIX];
@


1.17
log
@Add a -U command line switch for syslogd to specify an explict bind
address to receive UDP packets.  One advantge over -u and the *
sockets is that you can bind to localhost and divert the packets
with pf.  It is also possible to use a non standard port.
OK jung@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.16 2014/10/05 18:14:01 bluhm Exp $ */
d21 1
a21 1
#include <sys/poll.h>
@


1.16
log
@Switch syslogd from using poll(2) to libevent.
test and OK nicm@@; OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.15 2014/10/03 21:55:22 bluhm Exp $ */
d47 1
a47 1
extern int fd_udp, fd_udp6, fd_unix[MAXUNIX];
@


1.15
log
@Cleanup the reporting socket code in syslogd.
- Name variable path_ctlsock consistently.
- Name function ctlconn_logto() consistently.
- Replace the nested if/else logic in ctlconn_write_handler()
  with if/return.
- Call ctlconn_cleanup() only if there is a control connection.
OK doug@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.14 2014/09/10 13:16:20 doug Exp $ */
d46 2
a51 11

/* fds to poll */
#define PFD_KLOG	0		/* Offset of /dev/klog entry */
#define PFD_INET	1		/* Offset of inet socket entry */
#define PFD_CTLSOCK	2		/* Offset of control socket entry */
#define PFD_CTLCONN	3		/* Offset of control connection entry */
#define PFD_INET6	4		/* Offset of inet6 socket entry */
#define PFD_SENDSYS	5		/* Offset of sendsyslog(2) entry */
#define PFD_UNIX_0	6		/* Start of Unix socket entries */
#define N_PFD		(PFD_UNIX_0 + MAXUNIX)	/* # of pollfd entries */
extern struct pollfd pfd[N_PFD];
@


1.14
log
@Remove redundant null check and rename vars consistently in syslogd

Merge in more functionality from bluhm's patch.

ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.13 2014/09/08 00:43:42 doug Exp $ */
d45 1
a45 1
extern char *ctlsock_path;
@


1.13
log
@Fix a syslogd regression when specifying all 20 additional log paths

bluhm@@ found and fixed this bug.  This is a modified version of his
patch which makes the intention a little clearer.

ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.12 2014/08/25 18:19:18 bluhm Exp $ */
d42 3
a44 3
#define MAXFUNIX	21
extern int nfunix;
extern char *funixn[MAXFUNIX];
d59 1
a59 1
#define N_PFD		(PFD_UNIX_0 + MAXFUNIX)	/* # of pollfd entries */
@


1.12
log
@Allow to restrict syslogd to a protocol family with -4 and -6 command
line switches.  If the log server is an FQDN, DNS chooses wether
to take the IPv4 or IPv6 route.  Allow to prefix the log host with
udp4:// or udp6:// to choose a protocol.
OK henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.11 2014/08/20 20:10:17 bluhm Exp $ */
d57 2
a58 1
#define PFD_UNIX_0	5		/* Start of Unix socket entries */
@


1.11
log
@Replace gethostbyaddr(3) with getnameinfo(3).  Remove the sigprocmask()
that was necessary for gethostbyaddr() because the latter is not
signal safe.  Change the return code semantics of priv_getnameinfo()
to match getnameinfo(3).
input and OK jca@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syslogd.h,v 1.10 2014/08/20 19:33:43 bluhm Exp $ */
d31 1
a31 1
int   priv_getaddrinfo(char *, char *, struct sockaddr *, size_t);
@


1.10
log
@Add missing OpenBSD RCS id.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d32 1
a32 1
int   priv_gethostbyaddr(char *, int, int, char *, size_t);
@


1.9
log
@Rename priv_gethostserv() to priv_getaddrinfo() as this is what the
function does.  Change the return code semantics to match getaddrinfo(3).
OK deraadt@@
@
text
@d1 2
@


1.8
log
@put do { } while (0) around the dprintf macro to make it less scary

ok deraadt@@
@
text
@d29 1
a29 1
int   priv_gethostserv(char *, char *, struct sockaddr *, size_t);
@


1.7
log
@shuffle some things around to deal with incomplete types
gcc4 gets upset about.
based on suggestions from miod@@, ok millert@@
@
text
@d45 1
a45 1
#define dprintf		if (Debug) printf
@


1.6
log
@- use getaddrinfo() instead of gethostbyname/getservbyname
- reserve a poll descriptor entry for INET6 (not used yet)
ok henning
@
text
@d19 1
@


1.5
log
@memory leak on SIGHUP for memory buffer logs, based on fix by Stephen Marley;
ok avsm@@
@
text
@d53 2
a54 1
#define PFD_UNIX_0	4		/* Start of Unix socket entries */
@


1.4
log
@support @@hostname:port syntax in syslog.conf, prompted by msf@@ at c2k4;
ok henning@@ anil@@
@
text
@d63 1
@


1.3
log
@Buffered logging for syslogd. Logs may be stored in memory buffers and
extracted using a small client. Useful for diskless systems.
much feedback from deraadt@@, canacar@@, jmc@@, jakob@@ ; ok deraadt@@
@
text
@d17 3
d28 1
a28 1
int   priv_gethostbyname(char *, char *, size_t);
@


1.2
log
@convert from select() to poll() for main event loop; tested millert@@, deraadt@@
ok deraadt@@
@
text
@d39 2
d48 3
a50 1
#define PFD_UNIX_0	2		/* Start of Unix socket entries */
d53 11
@


1.1
log
@Privilege separated syslog daemon.  The child listening to log requests drops
to user _syslogd and chroots itself, while the privileged parent grants it
access to open logfiles and other calls it needs.

The only difference from existing behaviour is that if syslog.conf changes
and syslogd receives a HUP, it will re-exec itself and have two new PIDs.
A HUP with an unchanged config will make syslogd reopen logfiles as before.

Lots of help and code from deraadt@@ , and advice from millert@@

Various versions tested by todd, cloder, mpech, markus, tdeval and others
@
text
@a38 4
extern int funix[MAXFUNIX];
extern int finet;
extern int fklog;

d42 7
@

