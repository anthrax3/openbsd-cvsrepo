head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.16
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.26
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.24
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.22
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.20
	OPENBSD_5_0:1.10.0.18
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.16
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.14
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.10
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.12
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.8
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.6
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.4
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4;
locks; strict;
comment	@.\" @;


1.12
date	2014.01.20.05.07.48;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.14.06.32.36;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.31.19.20.25;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.18.21.00.17;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.12.12.59.51;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.14.21.01.01;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.17.11.13.58;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.14.17.31.40;	author aaron;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.12.21.47.54;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.12.16.50.52;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.17.57.08;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.11.20.11.22.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Obvious .Xr fixes, found while testing mandocdb(8).
@
text
@.\" $OpenBSD: memconfig.8,v 1.11 2013/08/14 06:32:36 jmc Exp $
.\"
.\" Copyright (c) 1999 Chris Costello
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: /home/ncvs/src/usr.sbin/memcontrol/memcontrol.8,v 1.9 2002/09/15 15:07:55 dwmalone Exp $
.\"
.Dd $Mdocdate: August 14 2013 $
.Dt MEMCONFIG 8
.Os
.Sh NAME
.Nm memconfig
.Nd control system cache behaviour with respect to memory
.Sh SYNOPSIS
.Nm memconfig
.Ar list
.Op Fl a
.Nm memconfig
.Ar set
.Fl b Ar base
.Fl l Ar length
.Fl o Ar owner
.Ar attribute
.Nm memconfig
.Ar clear
.Fl o Ar owner
.Nm memconfig
.Ar clear
.Fl b Ar base
.Fl l Ar length
.Sh DESCRIPTION
A number of supported system architectures allow the behaviour of the CPU
cache to be programmed to behave differently depending on the region being
written.
.Pp
.Nm
provides an interface to this facility, allowing CPU cache behavior to
be altered for ranges of system physical memory.
.Pp
These ranges are typically power-of-2 aligned and sized, however the specific
rules governing their layout vary between architectures.
The
.Nm
program does not attempt to enforce these rules, however the system will
reject any attempt to set an illegal combination.
.Pp
The operands and their options are as follows:
.Bl -tag -width clear
.It Ar list
List range slots.
.Bl -tag -width xxxxxx
.It Fl a
List all range slots, even those that are inactive.
.El
.It Ar set
Set memory range attributes.
.Bl -tag -width xxxxxx
.It Fl b Ar base
Memory range base address.
.It Fl l Ar length
Length of memory range in bytes, power of 2.
.It Fl o Ar owner
Text identifier for this setting (7 char max).
.It Ar attribute
Attributes applied to this range; combinations of
.Ar force ,
.Ar uncacheable ,
.Ar write-combine ,
.Ar write-through ,
.Ar write-back ,
or
.Ar write-protect .
.El
.It Ar clear
Clear memory range attributes.
Ranges may be cleared by owner or by base/length combination.
.Pp
To clear based on ownership:
.Bl -tag -width xxxxxx
.It Fl o Ar owner
All ranges with this owner will be cleared.
.El
.Pp
To clear based on the base/length combination:
.Bl -tag -width xxxxxx
.It Fl b Ar base
Memory range base address.
.It Fl l Ar length
Length of memory range in bytes, power of 2.
.El
.Pp
Base and length must exactly match an existing range.
.El
.Sh SEE ALSO
.Xr mtrr 4
.Sh HISTORY
.Nm
was originally introduced in
.Fx 3.3
as
.Sy memcontrol .
@


1.11
log
@no longer any need to quote macro lines with >9 args;
From: Jan Stary
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.10 2007/05/31 19:20:25 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate: May 31 2007 $
d122 1
a122 1
.Xr memcontrol .
@


1.10
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.9 2007/02/18 21:00:17 jmc Exp $
d29 1
a29 1
.Dd $Mdocdate$
d34 1
a34 1
.Nd "control system cache behaviour with respect to memory"
@


1.9
log
@unneeded .Op; from Igor Sobrado
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.8 2003/06/12 12:59:51 jmc Exp $
d29 1
a29 1
.Dd November 14, 1999
@


1.8
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- new sentence, new line
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.7 2002/10/14 21:01:01 matthieu Exp $
d73 1
a73 1
.It Op Fl a
@


1.7
log
@Fix from FreeBSD for atlhon problems with mtrr and XFree86. Ok deraadt@@

FreeBSD commit messages say:

Some BIOSs are using MTRR values that are only documented under NDA
to control the mapping of things like the ACPI and APM into memory.

The problem is that starting X changes these values, so if something
was using the bits of BIOS mapped into memory (say ACPI or APM),
then next time they access this memory the machine would hang.

This patch refuse to change MTRR values it doesn't understand,
unless a new "force" option is given. This means X doesn't change
them by accident but someone can override that if they really want
to.

PR:             28418
Tested by:      Christopher Masto <chris at netmonger dot net>,
                David Bushong <david at bushong dot net>,
                Santos <casd at myrealbox dot com>


Make the MTRR code a bit more defensive - this should help people
trying to run X on some Athlon systems where the BIOS does odd things
(mines an ASUS A7A266, but it seems to also help on other systems).

Here's a description of the problem and my fix:

        The problem with the old MTRR code is that it only expects
        to find documented values in the bytes of MTRR registers.
        To convert the MTRR byte into a FreeBSD "Memory Range Type"
        (mrt) it uses the byte value and looks it up in an array.
        If the value is not in range then the mrt value ends up
        containing random junk.

        This isn't an immediate problem. The mrt value is only used
        later when rewriting the MTRR registers. When we finally
        go to write a value back again, the function i686_mtrrtype()
        searches for the junk value and returns -1 when it fails
        to find it. This is converted to a byte (0xff) and written
        back to the register, causing a GPF as 0xff is an illegal
        value for a MTRR byte.

        To work around this problem I've added a new mrt flag
        MDF_UNKNOWN.  We set this when we read a MTRR byte which
        we do not understand.  If we try to convert a MDF_UNKNOWN
        back into a MTRR value, then the new function, i686_mrt2mtrr,
        just returns the old value of the MTRR byte. This leaves
        the memory range type unchanged.

I have seen one side effect of the fix, which is that ACPI calls
after X has been run seem to hang my machine. As running X would
previously panic the machine, this is still an improvement ;-)

PR:             28418, 25958
Tested by:      jkh, Christopher Masto <chris at netmonger dot net>
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.6 2001/08/17 11:13:58 mpech Exp $
d122 1
a122 1
.Xr memcontrol 8 .
@


1.6
log
@o) {Open,Net,Free}BSD -> .{O,N,F}x;
o) "start sentence on new line" issues;
o) minimal -mdoc improvements;

millert@@ ok
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.5 2000/10/14 17:31:40 aaron Exp $
d27 1
a27 1
.\" $FreeBSD: src/usr.sbin/memcontrol/memcontrol.8,v 1.2 1999/10/09 16:37:37 chris Exp $
d86 2
a87 1
Attributes applied to this range; one of
@


1.5
log
@- Correct .Nm usage.
- Compatify SYNOPSIS.
- Introduce the options.
- Add some punctuation.
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.4 2000/04/12 21:47:54 aaron Exp $
d118 3
a120 1
was originally introduced in FreeBSD 3.3 as
@


1.4
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.3 2000/04/12 16:50:52 aaron Exp $
d34 1
a34 1
.Nd "Control system cache behaviour with respect to memory"
d36 1
a36 1
.Nm
d39 1
a39 2
.Pp
.Nm
d45 1
a45 2
.Pp
.Nm
d48 1
a48 2
.Pp
.Nm
d57 1
a57 1
.Nm Memconfig
d64 1
a64 1
.Nm memconfig
d67 2
d74 1
a74 1
List all range slots, even those that are inactive
d80 1
a80 1
Memory range base address
d82 1
a82 1
Length of memory range in bytes, power of 2
d84 1
a84 1
Text identifier for this setting (7 char max)
d91 2
a92 1
.Ar write-protect
d101 1
a101 1
All ranges with this owner will be cleared
d107 1
a107 1
Memory range base address
d109 1
a109 1
Length of memory range in bytes, power of 2
d117 1
a117 1
.Nm memconfig
@


1.3
log
@Remove all arguments to the .Os macro so that all of 2.7's man pages will
correctly say "OpenBSD 2.7".
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.2 2000/03/19 17:57:08 aaron Exp $
d5 1
a5 1
.\" 
d14 1
a14 1
.\" 
d26 1
a26 1
.\" 
d28 1
a28 1
.\" 
d117 1
a117 1
.Nm memconfig 
@


1.2
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\" $OpenBSD: memconfig.8,v 1.1 1999/11/20 11:22:54 matthieu Exp $
d31 1
a31 1
.Os 
@


1.1
log
@add memconfig, an utility to manipulate MTRRs, from FreeBSD
@
text
@d1 2
a2 1
.\" $OpenBSD$
d65 2
a66 1
rules governing their layout vary between architectures.  The
d95 2
a96 2
Clear memory range attributes. Ranges may be cleared by owner or by
base/length combination.
@

