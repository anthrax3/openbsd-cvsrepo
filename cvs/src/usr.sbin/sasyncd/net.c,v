head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.6
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.21.0.8
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.4
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.8
	OPENBSD_5_0:1.16.0.6
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.12
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.14
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.10
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.8
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.6
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.4
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8;
locks; strict;
comment	@ * @;


1.23
date	2015.12.12.20.04.23;	author mmcc;	state Exp;
branches;
next	1.22;
commitid	qUunq6kWElREuvSB;

1.22
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	z3HrihslRYb4HqW9;

1.21
date	2014.07.04.22.32.29;	author guenther;	state Exp;
branches;
next	1.20;
commitid	nTqio9M2iqO2ilT2;

1.20
date	2013.03.11.17.40.11;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2012.04.15.03.25.27;	author jsg;	state Exp;
branches;
next	1.18;

1.18
date	2012.04.14.12.10.04;	author haesbaert;	state Exp;
branches;
next	1.17;

1.17
date	2012.04.14.11.46.09;	author haesbaert;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.29.18.10.04;	author kjell;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.08.15.31.01;	author markus;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.02.20.31.48;	author moritz;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.02.20.09.43;	author mcbride;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.16.19.28.36;	author moritz;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.26.09.53.46;	author moritz;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.20.00.03.15;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.11.15.24.08;	author moritz;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.27.20.47.11;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.26.19.19.51;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.24.19.18.11;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.24.02.35.39;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.23.19.53.27;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.23.17.35.01;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.22.20.35.48;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.30.18.44.49;	author ho;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Remove NULL-checks before free().
@
text
@/*	$OpenBSD: net.c,v 1.22 2015/08/20 22:39:29 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Multicom Security AB.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <ifaddrs.h>
#include <netdb.h>
#include <signal.h>

#include <openssl/aes.h>
#include <openssl/sha.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "sasyncd.h"
#include "net.h"

struct msg {
	u_int8_t	*buf;
	u_int32_t	 len;
	int		 refcnt;
};

struct qmsg {
	SIMPLEQ_ENTRY(qmsg)	next;
	struct msg	*msg;
};

int	*listeners;
AES_KEY	aes_key[2];
#define AES_IV_LEN	AES_BLOCK_SIZE

/* We never send (or expect to receive) messages smaller/larger than this. */
#define MSG_MINLEN	12
#define MSG_MAXLEN	4096

/* Local prototypes. */
static u_int8_t *net_read(struct syncpeer *, u_int32_t *, u_int32_t *);
static int	 net_set_sa(struct sockaddr *, char *, in_port_t);
static void	 net_check_peers(void *);

/* Pretty-print a buffer. */
void
dump_buf(int lvl, u_int8_t *b, u_int32_t len, char *title)
{
	u_int32_t	i, off, blen;
	u_int8_t	*buf;
	const char	def[] = "Buffer:";

	if (cfgstate.verboselevel < lvl)
		return;

	blen = 2 * (len + len / 36) + 3 + (title ? strlen(title) : sizeof def);
	if (!(buf = calloc(1, blen)))
		return;

	snprintf(buf, blen, "%s\n ", title ? title : def);
	off = strlen(buf);
	for (i = 0; i < len; i++, off+=2) {
		snprintf(buf + off, blen - off, "%02x", b[i]);
		if ((i+1) % 36 == 0) {
			off += 2;
			snprintf(buf + off, blen - off, "\n ");
		}
	}
	log_msg(lvl, "%s", buf);
	free(buf);
}

/* Add a listening socket. */
static int
net_add_listener(struct sockaddr *sa)
{
	char	host[NI_MAXHOST], port[NI_MAXSERV];
	int	r, s;

	s = socket(sa->sa_family, SOCK_STREAM, 0);
	if (s < 0) {
		perror("net_add_listener: socket()");
		close(s);
		return -1;
	}

	r = 1;
	if (setsockopt(s, SOL_SOCKET,
		cfgstate.listen_on ? SO_REUSEADDR : SO_REUSEPORT, (void *)&r,
		sizeof r)) {
		perror("net_add_listener: setsockopt()");
		close(s);
		return -1;
	}

	if (bind(s, sa, sa->sa_family == AF_INET ? sizeof(struct sockaddr_in) :
		sizeof (struct sockaddr_in6))) {
		perror("net_add_listener: bind()");
		close(s);
		return -1;
	}

	if (listen(s, 3)) {
		perror("net_add_listener: listen()");
		close(s);
		return -1;
	}

	if (getnameinfo(sa, sa->sa_len, host, sizeof host, port, sizeof port,
		NI_NUMERICHOST | NI_NUMERICSERV))
		log_msg(2, "listening on port %u fd %d", cfgstate.listen_port,
		    s);
	else
		log_msg(2, "listening on %s port %s fd %d", host, port, s);

	return s;
}

/* Allocate and fill in listeners array. */
static int
net_setup_listeners(void)
{
	struct sockaddr_storage	 sa_storage;
	struct sockaddr		*sa = (struct sockaddr *)&sa_storage;
	struct sockaddr_in	*sin = (struct sockaddr_in *)sa;
	struct sockaddr_in6	*sin6 = (struct sockaddr_in6 *)sa;
	struct ifaddrs		*ifap = 0, *ifa;
	int			 i, count;

	/* Setup listening sockets.  */
	memset(&sa_storage, 0, sizeof sa_storage);
	if (net_set_sa(sa, cfgstate.listen_on, cfgstate.listen_port) == 0) {
		listeners = calloc(2, sizeof(int));
		if (!listeners) {
			perror("net_setup_listeners: calloc()");
			goto errout;
		}
		listeners[1] = -1;
		listeners[0] = net_add_listener(sa);
		if (listeners[0] == -1) {
			log_msg(0, "net_setup_listeners: could not find "
			    "listen address (%s)", cfgstate.listen_on);
			goto errout;
		}
		return 0;
	}

	/*
	 * If net_set_sa() failed, cfgstate.listen_on is probably an
	 * interface name, so we should listen on all it's addresses.
	 */

	if (getifaddrs(&ifap) != 0) {
		perror("net_setup_listeners: getifaddrs()");
		goto errout;
	}

	/* How many addresses matches? */
	for (count = 0, ifa = ifap; ifa; ifa = ifa->ifa_next) {
		if (!ifa->ifa_name || !ifa->ifa_addr ||
		    (ifa->ifa_addr->sa_family != AF_INET &&
			ifa->ifa_addr->sa_family != AF_INET6))
			continue;
		if (cfgstate.listen_family &&
		    cfgstate.listen_family != ifa->ifa_addr->sa_family)
			continue;
		if (strcmp(ifa->ifa_name, cfgstate.listen_on) != 0)
			continue;
		count++;
	}

	if (!count) {
		log_msg(0, "net_setup_listeners: no listeners found for %s",
		    cfgstate.listen_on);
		goto errout;
	}

	/* Allocate one extra slot and set to -1, marking end of array. */
	listeners = calloc(count + 1, sizeof(int));
	if (!listeners) {
		perror("net_setup_listeners: calloc()");
		goto errout;
	}
	for (i = 0; i <= count; i++)
		listeners[i] = -1;

	/* Create listening sockets */
	for (count = 0, ifa = ifap; ifa; ifa = ifa->ifa_next) {
		if (!ifa->ifa_name || !ifa->ifa_addr ||
		    (ifa->ifa_addr->sa_family != AF_INET &&
			ifa->ifa_addr->sa_family != AF_INET6))
			continue;
		if (cfgstate.listen_family &&
		    cfgstate.listen_family != ifa->ifa_addr->sa_family)
			continue;
		if (strcmp(ifa->ifa_name, cfgstate.listen_on) != 0)
			continue;

		memset(&sa_storage, 0, sizeof sa_storage);
		sa->sa_family = ifa->ifa_addr->sa_family;
		switch (sa->sa_family) {
		case AF_INET:
			sin->sin_port = htons(cfgstate.listen_port);
			sin->sin_len = sizeof *sin;
			memcpy(&sin->sin_addr,
			    &((struct sockaddr_in *)ifa->ifa_addr)->sin_addr,
			    sizeof sin->sin_addr);
			break;
		case AF_INET6:
			sin6->sin6_port = htons(cfgstate.listen_port);
			sin6->sin6_len = sizeof *sin6;
			memcpy(&sin6->sin6_addr,
			    &((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr,
			    sizeof sin6->sin6_addr);
			break;
		}

		listeners[count] = net_add_listener(sa);
		if (listeners[count] == -1) {
			log_msg(2, "net_setup_listeners(setup): failed to "
			    "add listener, count = %d", count);
			goto errout;
		}
		count++;
	}
	freeifaddrs(ifap);
	return 0;

  errout:
	if (ifap)
		freeifaddrs(ifap);
	if (listeners) {
		for (i = 0; listeners[i] != -1; i++)
			close(listeners[i]);
		free(listeners);
	}
	return -1;
}

int
net_init(void)
{
	struct syncpeer *p;

	if (AES_set_encrypt_key(cfgstate.sharedkey, cfgstate.sharedkey_len,
	    &aes_key[0]) ||
	    AES_set_decrypt_key(cfgstate.sharedkey, cfgstate.sharedkey_len,
	    &aes_key[1])) {
		fprintf(stderr, "Bad AES shared key\n");
		return -1;
	}

	if (net_setup_listeners())
		return -1;

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		p->socket = -1;
		SIMPLEQ_INIT(&p->msgs);
	}

	net_check_peers(0);
	return 0;
}

static void
net_enqueue(struct syncpeer *p, struct msg *m)
{
	struct qmsg	*qm;

	if (p->socket < 0)
		return;

	qm = calloc(1, sizeof *qm);
	if (!qm) {
		log_err("net_enqueue: calloc()");
		return;
	}

	qm->msg = m;
	m->refcnt++;

	SIMPLEQ_INSERT_TAIL(&p->msgs, qm, next);
	return;
}

/*
 * Queue a message for transmission to a particular peer,
 * or to all peers if no peer is specified.
 */
int
net_queue(struct syncpeer *p0, u_int32_t msgtype, u_int8_t *buf, u_int32_t len)
{
	struct syncpeer *p = p0;
	struct msg	*m;
	SHA_CTX		 ctx;
	u_int8_t	 hash[SHA_DIGEST_LENGTH];
	u_int8_t	 iv[AES_IV_LEN], tmp_iv[AES_IV_LEN];
	u_int32_t	 v, padlen = 0;
	int		 i, offset;

	m = calloc(1, sizeof *m);
	if (!m) {
		log_err("net_queue: calloc()");
		free(buf);
		return -1;
	}

	/* Generate hash */
	SHA1_Init(&ctx);
	SHA1_Update(&ctx, buf, len);
	SHA1_Final(hash, &ctx);
	dump_buf(2, hash, sizeof hash, "net_queue: computed hash");

	/* Padding required? */
	i = len % AES_IV_LEN;
	if (i) {
		u_int8_t *pbuf;
		i = AES_IV_LEN - i;
		pbuf = realloc(buf, len + i);
		if (!pbuf) {
			log_err("net_queue: realloc()");
			free(buf);
			free(m);
			return -1;
		}
		padlen = i;
		while (i > 0)
			pbuf[len++] = (u_int8_t)i--;
		buf = pbuf;
	}

	/* Get random IV */
	for (i = 0; (size_t)i <= sizeof iv - sizeof v; i += sizeof v) {
		v = arc4random();
		memcpy(&iv[i], &v, sizeof v);
	}
	dump_buf(2, iv, sizeof iv, "net_queue: IV");
	memcpy(tmp_iv, iv, sizeof tmp_iv);

	/* Encrypt */
	dump_buf(2, buf, len, "net_queue: pre encrypt");
	AES_cbc_encrypt(buf, buf, len, &aes_key[0], tmp_iv, AES_ENCRYPT);
	dump_buf(2, buf, len, "net_queue: post encrypt");

	/* Allocate send buffer */
	m->len = len + sizeof iv + sizeof hash + 3 * sizeof(u_int32_t);
	m->buf = malloc(m->len);
	if (!m->buf) {
		free(m);
		free(buf);
		log_err("net_queue: calloc()");
		return -1;
	}
	offset = 0;

	/* Fill it (order must match parsing code in net_read()) */
	v = htonl(m->len - sizeof(u_int32_t));
	memcpy(m->buf + offset, &v, sizeof v);
	offset += sizeof v;
	v = htonl(msgtype);
	memcpy(m->buf + offset, &v, sizeof v);
	offset += sizeof v;
	v = htonl(padlen);
	memcpy(m->buf + offset, &v, sizeof v);
	offset += sizeof v;
	memcpy(m->buf + offset, hash, sizeof hash);
	offset += sizeof hash;
	memcpy(m->buf + offset, iv, sizeof iv);
	offset += sizeof iv;
	memcpy(m->buf + offset, buf, len);
	free(buf);

	if (p)
		net_enqueue(p, m);
	else
		for (p = LIST_FIRST(&cfgstate.peerlist); p;
		     p = LIST_NEXT(p, link))
			net_enqueue(p, m);

	if (!m->refcnt) {
		free(m->buf);
		free(m);
	}

	return 0;
}

/* Set all write pending filedescriptors. */
int
net_set_pending_wfds(fd_set *fds)
{
	struct syncpeer *p;
	int		max_fd = -1;

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link))
		if (p->socket > -1 && SIMPLEQ_FIRST(&p->msgs)) {
			FD_SET(p->socket, fds);
			if (p->socket > max_fd)
				max_fd = p->socket;
		}
	return max_fd + 1;
}

/*
 * Set readable filedescriptors. They are basically the same as for write,
 * plus the listening socket.
 */
int
net_set_rfds(fd_set *fds)
{
	struct syncpeer *p;
	int		i, max_fd = -1;

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		if (p->socket > -1)
			FD_SET(p->socket, fds);
		if (p->socket > max_fd)
			max_fd = p->socket;
	}
	for (i = 0; listeners[i] != -1; i++) {
		FD_SET(listeners[i], fds);
		if (listeners[i] > max_fd)
			max_fd = listeners[i];
	}
	return max_fd + 1;
}

static void
net_accept(int accept_socket)
{
	struct sockaddr_storage	 sa_storage, sa_storage2;
	struct sockaddr		*sa = (struct sockaddr *)&sa_storage;
	struct sockaddr		*sa2 = (struct sockaddr *)&sa_storage2;
	struct sockaddr_in	*sin, *sin2;
	struct sockaddr_in6	*sin6, *sin62;
	struct syncpeer		*p;
	socklen_t		 socklen;
	int			 s, found;

	/* Accept a new incoming connection */
	socklen = sizeof sa_storage;
	memset(&sa_storage, 0, socklen);
	memset(&sa_storage2, 0, socklen);
	s = accept(accept_socket, sa, &socklen);
	if (s > -1) {
		/* Setup the syncpeer structure */
		found = 0;
		for (p = LIST_FIRST(&cfgstate.peerlist); p && !found;
		     p = LIST_NEXT(p, link)) {

			/* Match? */
			if (net_set_sa(sa2, p->name, 0))
				continue;
			if (sa->sa_family != sa2->sa_family)
				continue;
			if (sa->sa_family == AF_INET) {
				sin = (struct sockaddr_in *)sa;
				sin2 = (struct sockaddr_in *)sa2;
				if (memcmp(&sin->sin_addr, &sin2->sin_addr,
					sizeof(struct in_addr)))
					continue;
			} else {
				sin6 = (struct sockaddr_in6 *)sa;
				sin62 = (struct sockaddr_in6 *)sa2;
				if (memcmp(&sin6->sin6_addr, &sin62->sin6_addr,
					sizeof(struct in6_addr)))
					continue;
			}
			/* Match! */
			found++;
			p->socket = s;
			log_msg(1, "net: peer \"%s\" connected", p->name);
			if (cfgstate.runstate == MASTER)
				timer_add("pfkey_snap", 2, pfkey_snapshot, p);
		}
		if (!found) {
			log_msg(1, "net: found no matching peer for accepted "
			    "socket, closing.");
			close(s);
		}
	} else if (errno != EWOULDBLOCK && errno != EINTR &&
	    errno != ECONNABORTED)
		log_err("net: accept()");
}

void
net_handle_messages(fd_set *fds)
{
	struct syncpeer *p;
	u_int8_t	*msg;
	u_int32_t	 msgtype, msglen;
	int		 i;

	for (i = 0; listeners[i] != -1; i++)
		if (FD_ISSET(listeners[i], fds))
			net_accept(listeners[i]);

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		if (p->socket < 0 || !FD_ISSET(p->socket, fds))
			continue;
		msg = net_read(p, &msgtype, &msglen);
		if (!msg)
			continue;

		log_msg(2, "net_handle_messages: got msg type %u len %u from "
		    "peer %s", msgtype, msglen, p->name);

		switch (msgtype) {
		case MSG_SYNCCTL:
			net_ctl_handle_msg(p, msg, msglen);
			free(msg);
			break;

		case MSG_PFKEYDATA:
			if (p->runstate != MASTER ||
			    cfgstate.runstate == MASTER) {
				log_msg(1, "net: got PFKEY message from "
				    "non-MASTER peer");
				free(msg);
				if (cfgstate.runstate == MASTER)
					net_ctl_send_state(p);
				else
					net_ctl_send_error(p, 0);
			} else if (pfkey_queue_message(msg, msglen))
				free(msg);
			break;

		default:
			log_msg(0, "net: got unknown message type %u len %u "
			    "from peer %s", msgtype, msglen, p->name);
			free(msg);
			net_ctl_send_error(p, 0);
		}
	}
}

void
net_send_messages(fd_set *fds)
{
	struct syncpeer *p;
	struct qmsg	*qm;
	struct msg	*m;
	ssize_t		 r;

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		if (p->socket < 0 || !FD_ISSET(p->socket, fds))
			continue;
		qm = SIMPLEQ_FIRST(&p->msgs);
		if (!qm) {
			/* XXX Log */
			continue;
		}
		m = qm->msg;

		log_msg(2, "net_send_messages: msg %p len %u ref %d "
		    "to peer %s", m, m->len, m->refcnt, p->name);

		/* write message */
		r = write(p->socket, m->buf, m->len);
		if (r == -1) {
			net_disconnect_peer(p);
			log_msg(0, "net_send_messages: write() failed, "
			    "peer disconnected");
		} else if (r < (ssize_t)m->len) {
			/* retransmit later */
			continue;
		}

		/* cleanup */
		SIMPLEQ_REMOVE_HEAD(&p->msgs, next);
		free(qm);

		if (--m->refcnt < 1) {
			log_msg(2, "net_send_messages: freeing msg %p", m);
			free(m->buf);
			free(m);
		}
	}
	return;
}

void
net_disconnect_peer(struct syncpeer *p)
{
	if (p->socket > -1) {
		log_msg(1, "net_disconnect_peer: peer \"%s\" removed",
		    p->name);
		close(p->socket);
	}
	p->socket = -1;
}

void
net_shutdown(void)
{
	struct syncpeer *p;
	struct qmsg	*qm;
	struct msg	*m;
	int		 i;

	while ((p = LIST_FIRST(&cfgstate.peerlist))) {
		while ((qm = SIMPLEQ_FIRST(&p->msgs))) {
			SIMPLEQ_REMOVE_HEAD(&p->msgs, next);
			m = qm->msg;
			if (--m->refcnt < 1) {
				free(m->buf);
				free(m);
			}
			free(qm);
		}
		net_disconnect_peer(p);
		free(p->sa);
		free(p->name);
		LIST_REMOVE(p, link);
		cfgstate.peercnt--;
		free(p);
	}

	if (listeners) {
		for (i = 0; listeners[i] != -1; i++)
			close(listeners[i]);
		free(listeners);
		listeners = 0;
	}
}

/*
 * Helper functions (local) below here.
 */

static u_int8_t *
net_read(struct syncpeer *p, u_int32_t *msgtype, u_int32_t *msglen)
{
	u_int8_t	*msg, *blob, *rhash, *iv, hash[SHA_DIGEST_LENGTH];
	u_int32_t	 v, blob_len, pos = 0;
	int		 padlen = 0, offset = 0;
	ssize_t 	 r;
	SHA_CTX		 ctx;

	/* Read blob length */
	r = read(p->socket, &v, sizeof v);
	if (r != (ssize_t)sizeof v) {
		if (r < 1)
			net_disconnect_peer(p);
		return NULL;
	}

	blob_len = ntohl(v);
	if (blob_len < sizeof hash + AES_IV_LEN + 2 * sizeof(u_int32_t))
		return NULL;
	*msglen = blob_len - sizeof hash - AES_IV_LEN - 2 * sizeof(u_int32_t);
	if (*msglen < MSG_MINLEN || *msglen > MSG_MAXLEN)
		return NULL;

	/* Read message blob */
	blob = malloc(blob_len);
	if (!blob) {
		log_err("net_read: malloc()");
		return NULL;
	}

	while (blob_len > pos) {
		switch (r = read(p->socket, blob + pos, blob_len - pos)) {
		case -1:
			if (errno == EINTR || errno == EAGAIN)
				continue;
                        /* FALLTHROUGH */
		case 0:
			net_disconnect_peer(p);
			free(blob);
			return NULL;
                        /* NOTREACHED */
		default:
			pos += r;
		}
	}

	offset = 0;
	memcpy(&v, blob + offset, sizeof v);
	*msgtype = ntohl(v);
	offset += sizeof v;

	if (*msgtype > MSG_MAXTYPE) {
		free(blob);
		return NULL;
	}

	memcpy(&v, blob + offset, sizeof v);
	padlen = ntohl(v);
	offset += sizeof v;

	rhash = blob + offset;
	iv    = rhash + sizeof hash;
	msg = malloc(*msglen);
	if (!msg) {
		free(blob);
		return NULL;
	}
	memcpy(msg, iv + AES_IV_LEN, *msglen);

	dump_buf(2, rhash, sizeof hash, "net_read: got hash");
	dump_buf(2, iv, AES_IV_LEN, "net_read: got IV");
	dump_buf(2, msg, *msglen, "net_read: pre decrypt");
	AES_cbc_encrypt(msg, msg, *msglen, &aes_key[1], iv, AES_DECRYPT);
	dump_buf(2, msg, *msglen, "net_read: post decrypt");
	*msglen -= padlen;

	SHA1_Init(&ctx);
	SHA1_Update(&ctx, msg, *msglen);
	SHA1_Final(hash, &ctx);
	dump_buf(2, hash, sizeof hash, "net_read: computed hash");

	if (memcmp(hash, rhash, sizeof hash) != 0) {
		free(blob);
		free(msg);
		log_msg(0, "net_read: got bad message (typo in shared key?)");
		return NULL;
	}
	free(blob);
	return msg;
}

static int
net_set_sa(struct sockaddr *sa, char *name, in_port_t port)
{
	struct sockaddr_in	*sin = (struct sockaddr_in *)sa;
	struct sockaddr_in6	*sin6 = (struct sockaddr_in6 *)sa;

	if (!name) {
		/* XXX Assume IPv4 */
		sa->sa_family = AF_INET;
		sin->sin_port = htons(port);
		sin->sin_len = sizeof *sin;
		return 0;
	}

	if (inet_pton(AF_INET, name, &sin->sin_addr) == 1) {
		sa->sa_family = AF_INET;
		sin->sin_port = htons(port);
		sin->sin_len = sizeof *sin;
		return 0;
	}

	if (inet_pton(AF_INET6, name, &sin6->sin6_addr) == 1) {
		sa->sa_family = AF_INET6;
		sin6->sin6_port = htons(port);
		sin6->sin6_len = sizeof *sin6;
		return 0;
	}

	return -1;
}

static void
got_sigalrm(int s)
{
	return;
}

void
net_connect(void)
{
	struct itimerval	iv;
	struct syncpeer		*p;

	signal(SIGALRM, got_sigalrm);
	memset(&iv, 0, sizeof iv);
	iv.it_value.tv_sec = 5;
	iv.it_interval.tv_sec = 5;
	setitimer(ITIMER_REAL, &iv, NULL);

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		if (p->socket > -1)
			continue;
		if (!p->sa) {
			p->sa = calloc(1, sizeof(struct sockaddr_storage));
			if (!p->sa)
				return;
			if (net_set_sa(p->sa, p->name, cfgstate.listen_port))
				continue;
		}
		p->socket = socket(p->sa->sa_family, SOCK_STREAM, 0);
		if (p->socket < 0) {
			log_err("peer \"%s\": socket()", p->name);
			continue;
		}
		if (connect(p->socket, p->sa, p->sa->sa_len)) {
			log_msg(1, "net_connect: peer \"%s\" not ready yet",
			    p->name);
			net_disconnect_peer(p);
			continue;
		}
		if (net_ctl_send_state(p)) {
			log_msg(0, "net_connect: peer \"%s\" failed", p->name);
			net_disconnect_peer(p);
			continue;
		}
		log_msg(1, "net_connect: peer \"%s\" connected, fd %d",
		    p->name, p->socket);

		/* Schedule a pfkey sync to the newly connected peer. */
		if (cfgstate.runstate == MASTER)
			timer_add("pfkey_snapshot", 2, pfkey_snapshot, p);
	}

	timerclear(&iv.it_value);
	timerclear(&iv.it_interval);
	setitimer(ITIMER_REAL, &iv, NULL);
	signal(SIGALRM, SIG_IGN);

	return;
}

static void
net_check_peers(void *arg)
{
	net_connect();
	(void)timer_add("peer recheck", 600, net_check_peers, 0);
}
@


1.22
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.21 2014/07/04 22:32:29 guenther Exp $	*/
d644 2
a645 4
		if (p->sa)
			free(p->sa);
		if (p->name)
			free(p->name);
@


1.21
log
@malloc+memset -> calloc

from Benjamin Baier (programmer (at) netzbasis.de)
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.20 2013/03/11 17:40:11 deraadt Exp $	*/
d89 1
a89 1
	if (!(buf = (u_int8_t *)calloc(1, blen)))
d165 1
a165 1
		listeners = (int *)calloc(2, sizeof(int));
d211 1
a211 1
	listeners = (int *)calloc(count + 1, sizeof(int));
d333 1
a333 1
	m = (struct msg *)calloc(1, sizeof *m);
d379 1
a379 1
	m->buf = (u_int8_t *)malloc(m->len);
d690 1
a690 1
	blob = (u_int8_t *)malloc(blob_len);
d728 1
a728 1
	msg = (u_int8_t *)malloc(*msglen);
d810 1
a810 2
			p->sa = (void *)calloc(1,
			    sizeof(struct sockaddr_storage));
@


1.20
log
@handle ECONNABORTED errors from accept().  In many code blocks they can be
ignored silently and without aborting, much like EINTR and EWOULDBLOCK are.
ok's from various maintainers of these directories...
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.19 2012/04/15 03:25:27 jsg Exp $	*/
d305 1
a305 1
	qm = (struct qmsg *)malloc(sizeof *qm);
d307 1
a307 1
		log_err("net_enqueue: malloc()");
a310 1
	memset(qm, 0, sizeof *qm);
@


1.19
log
@fix a leak
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.18 2012/04/14 12:10:04 haesbaert Exp $	*/
d514 2
a515 1
	} else
@


1.18
log
@read returns ssize_t not int.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.17 2012/04/14 11:46:09 haesbaert Exp $	*/
d749 1
@


1.17
log
@Add CDIAGFLAGS infrastructure.
Fix signed vs unsigned and dup symbol shadow.

ok mikeb@@
"looks good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.16 2010/06/29 18:10:04 kjell Exp $	*/
d670 2
a671 1
	int		 padlen = 0, offset = 0, r;
@


1.16
log
@Having more than 2 log levels is silly. Use only 3 verbosity levels:
 None (), Important (-v), All (-vv)
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.15 2007/01/08 15:31:01 markus Exp $	*/
d366 1
a366 1
	for (i = 0; i <= sizeof iv - sizeof v; i += sizeof v) {
@


1.15
log
@allow shared key specification in hex (0x01234...); ok ho
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.14 2006/06/02 20:31:48 moritz Exp $	*/
d143 1
a143 1
		log_msg(3, "listening on port %u fd %d", cfgstate.listen_port,
d146 1
a146 1
		log_msg(3, "listening on %s port %s fd %d", host, port, s);
d252 1
a252 1
			log_msg(4, "net_setup_listeners(setup): failed to "
d345 1
a345 1
	dump_buf(5, hash, sizeof hash, "net_queue: computed hash");
d370 1
a370 1
	dump_buf(5, iv, sizeof iv, "net_queue: IV");
d374 1
a374 1
	dump_buf(5, buf, len, "net_queue: pre encrypt");
d376 1
a376 1
	dump_buf(5, buf, len, "net_queue: post encrypt");
d537 1
a537 1
		log_msg(5, "net_handle_messages: got msg type %u len %u from "
d587 1
a587 1
		log_msg(5, "net_send_messages: msg %p len %u ref %d "
d606 1
a606 1
			log_msg(5, "net_send_messages: freeing msg %p", m);
d734 3
a736 3
	dump_buf(5, rhash, sizeof hash, "net_read: got hash");
	dump_buf(5, iv, AES_IV_LEN, "net_read: got IV");
	dump_buf(5, msg, *msglen, "net_read: pre decrypt");
d738 1
a738 1
	dump_buf(5, msg, *msglen, "net_read: post decrypt");
d744 1
a744 1
	dump_buf(5, hash, sizeof hash, "net_read: computed hash");
@


1.14
log
@whitespace cleanup, no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.13 2006/06/02 20:09:43 mcbride Exp $	*/
a275 1
	int		 r;
d277 4
a280 10
	/* The shared key needs to be 128, 192 or 256 bits */
	r = strlen(cfgstate.sharedkey) << 3;
	if (r != 128 && r != 192 && r != 256) {
		fprintf(stderr, "Bad shared key length (%d bits), "
		    "should be 128, 192 or 256\n", r);
		return -1;
	}

	if (AES_set_encrypt_key(cfgstate.sharedkey, r, &aes_key[0]) ||
	    AES_set_decrypt_key(cfgstate.sharedkey, r, &aes_key[1])) {
@


1.13
log
@Make sasyncd fail back correctly with carp preemption enabled.

Hold the carp demotion when booting, to prevent carp from preempting until
we've sync'd with our peers.  This adds a new CTL_ENDSNAP message to the
exchange between the sasync daemons to indicate when the complete snapshot
has been sent. Undemote after 60 seconds, or when recieve a CTL_ENDSNAP from
all our peers.

Syntax is slightly changed, removing the 'carp' keyword (so do
"interface carp0" rather than "carp interface carp0". Adds 'group <ifgroup>',
defaults to the 'carp' group.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.12 2006/04/16 19:28:36 moritz Exp $	*/
d142 1
a142 1
		NI_NUMERICHOST | NI_NUMERICSERV)) 
d180 1
a180 1
	/* 
d186 1
a186 1
		perror("net_setup_listeners: getifaddrs()"); 
d686 1
a686 1
	} 
@


1.12
log
@cleanup error handling to avoid two memleaks. found and ok pat@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.11 2006/01/26 09:53:46 moritz Exp $	*/
d656 1
@


1.11
log
@fix some format strings and add a missing
argument to a log_err() call. ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.10 2006/01/20 00:03:15 millert Exp $	*/
d168 1
a168 1
			return -1;
d187 1
a187 1
		return -1;
d207 1
a207 1
		return -1;
d214 1
a214 1
		return -1;
d264 5
a268 3
	for (i = 0; listeners[i] != -1; i++)
		close(listeners[i]);
	free(listeners);
@


1.10
log
@Don't depend on implicit include of signal.h
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.9 2005/09/11 15:24:08 moritz Exp $	*/
d592 1
a592 1
		log_msg(5, "net_send_messages: msg %p len %d ref %d "
@


1.9
log
@handle short read()'s. fixes transfer
of very large SA/SPD snapshots. ok ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.8 2005/05/27 20:47:11 ho Exp $	*/
d39 1
@


1.8
log
@Keep sockaddr in syncpeer struct.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.7 2005/05/26 19:19:51 ho Exp $	*/
d672 1
a672 1
	u_int32_t	 v, blob_len;
d697 15
a711 10
	r = read(p->socket, blob, blob_len);
	if (r < 1) {
		net_disconnect_peer(p);
		free(blob);
		return NULL;
	} else if (r < (ssize_t)blob_len) {
		/* XXX wait and read more? */
		fprintf(stderr, "net_read: wanted %d, got %d\n", blob_len, r);
		free(blob);
		return NULL;
@


1.7
log
@add a 'flushmode' to control how the master handles FLUSH to slaves. tweak some loglevels.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.6 2005/05/24 19:18:11 ho Exp $	*/
d648 2
a792 1
	struct sockaddr_storage sa_storage;
d794 1
a794 2
	struct sockaddr	*sa = (struct sockaddr *)&sa_storage;
	struct syncpeer	*p;
d805 9
a813 5

		memset(sa, 0, sizeof sa_storage);
		if (net_set_sa(sa, p->name, cfgstate.listen_port))
			continue;
		p->socket = socket(sa->sa_family, SOCK_STREAM, 0);
d818 1
a818 1
		if (connect(p->socket, sa, sa->sa_len)) {
@


1.6
log
@cleanup parser, permit more than one listener
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.5 2005/05/24 02:35:39 ho Exp $	*/
d142 1
a142 1
		log_msg(2, "listening on port %u fd %d", cfgstate.listen_port,
d145 1
a145 1
		log_msg(2, "listening on %s port %s fd %d", host, port, s);
d541 1
a541 1
		log_msg(4, "net_handle_messages: got msg type %u len %u from "
d591 1
a591 1
		log_msg(4, "net_send_messages: msg %p len %d ref %d "
d610 1
a610 1
			log_msg(4, "net_send_messages: freeing msg %p", m);
@


1.5
log
@When peers connect, have the master daemon look at in-kernel SAs and feed
these to the new peer. Adds privsep as fetching SADB and SPD kernel data
requires privileges.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.4 2005/05/23 19:53:27 ho Exp $	*/
a31 1

d63 1
a63 1
int	listen_socket;
d90 1
a90 1
	
d104 165
a271 2
	struct sockaddr_storage sa_storage;
	struct sockaddr *sa = (struct sockaddr *)&sa_storage;
a272 1
	char		 host[NI_MAXHOST], port[NI_MAXSERV];
d282 1
a282 1
	
d289 1
a289 25
	/* Setup listening socket.  */
	memset(&sa_storage, 0, sizeof sa_storage);
	if (net_set_sa(sa, cfgstate.listen_on, cfgstate.listen_port)) {
		log_msg(0, "net_init: could not find listen address (%s)",
		    cfgstate.listen_on);
		return -1;
	}

	listen_socket = socket(sa->sa_family, SOCK_STREAM, 0);
	if (listen_socket < 0) {
		perror("socket()");
		close(listen_socket);
		return -1;
	}
	r = 1;
	if (setsockopt(listen_socket, SOL_SOCKET,
	    cfgstate.listen_on ? SO_REUSEADDR : SO_REUSEPORT, (void *)&r,
	    sizeof r)) {
		perror("setsockopt()");
		close(listen_socket);
		return -1;
	}
	if (bind(listen_socket, sa, sizeof(struct sockaddr_in))) {
		perror("bind()");
		close(listen_socket);
a290 14
	}
	if (listen(listen_socket, 10)) {
		perror("listen()");
		close(listen_socket);
		return -1;
	}

	if (getnameinfo(sa, sa->sa_len, host, sizeof host, port, sizeof port,
		NI_NUMERICHOST | NI_NUMERICSERV)) 
		log_msg(2, "listening on port %u fd %d", cfgstate.listen_port,
		    listen_socket);
	else
		log_msg(2, "listening on %s port %s fd %d", host, port,
		    listen_socket);
d311 1
a311 1
		log_err("malloc()");
d340 1
a340 1
		log_err("calloc()");
d449 1
a449 1
	int		max_fd = -1;
d457 5
a461 3
	FD_SET(listen_socket, fds);
	if (listen_socket > max_fd)
		max_fd = listen_socket;
d465 57
a524 4
	struct sockaddr_storage	sa_storage, sa_storage2;
	struct sockaddr	*sa = (struct sockaddr *)&sa_storage;
	struct sockaddr	*sa2 = (struct sockaddr *)&sa_storage2;
	socklen_t	socklen;
d528 1
a528 13
	int		 newsock, found;

	if (FD_ISSET(listen_socket, fds)) {
		/* Accept a new incoming connection */
		socklen = sizeof sa_storage;
		newsock = accept(listen_socket, sa, &socklen);
		if (newsock > -1) {
			/* Setup the syncpeer structure */
			found = 0;
			for (p = LIST_FIRST(&cfgstate.peerlist); p && !found;
			     p = LIST_NEXT(p, link)) {
				struct sockaddr_in *sin, *sin2;
				struct sockaddr_in6 *sin6, *sin62;
d530 3
a532 37
				/* Match? */
				if (net_set_sa(sa2, p->name, 0))
					continue;
				if (sa->sa_family != sa2->sa_family)
					continue;
				if (sa->sa_family == AF_INET) {
					sin = (struct sockaddr_in *)sa;
					sin2 = (struct sockaddr_in *)sa2;
					if (memcmp(&sin->sin_addr,
					    &sin2->sin_addr,
					    sizeof(struct in_addr)))
						continue;
				} else {
					sin6 = (struct sockaddr_in6 *)sa;
					sin62 = (struct sockaddr_in6 *)sa2;
					if (memcmp(&sin6->sin6_addr,
					    &sin62->sin6_addr,
					    sizeof(struct in6_addr)))
						continue;
				}
				/* Match! */
				found++;
				p->socket = newsock;
				log_msg(1, "net: peer \"%s\" connected",
				    p->name);
				if (cfgstate.runstate == MASTER)
					timer_add("pfkey_snapshot", 2,
					    pfkey_snapshot, p);
			}
			if (!found) {
				log_msg(1, "net: found no matching peer for "
				    "accepted socket, closing.");
				close(newsock);
			}
		} else
			log_err("accept()");
	}
d635 1
d654 6
a659 2
	if (listen_socket > -1)
		close(listen_socket);
d681 1
a681 1
	
a755 1
	struct ifaddrs		*ifap, *ifa;
d771 1
a771 1
	
d779 1
a779 39
	/* inet_pton failed. fail here if name is not cfgstate.listen_on */
	if (strcmp(cfgstate.listen_on, name) != 0)
		return -1;

	/* Is cfgstate.listen_on the name of one our interfaces? */
	if (getifaddrs(&ifap) != 0) {
		perror("getifaddrs()"); 
		return -1;
	}
	sa->sa_family = AF_UNSPEC;
	for (ifa = ifap; ifa && sa->sa_family == AF_UNSPEC;
	     ifa = ifa->ifa_next) {
		if (!ifa->ifa_name || !ifa->ifa_addr)
			continue;
		if (strcmp(ifa->ifa_name, name) != 0)
			continue;
		
		switch (ifa->ifa_addr->sa_family) {
		case AF_INET:
			sa->sa_family = AF_INET;
			sin->sin_port = htons(port);
			sin->sin_len = sizeof *sin;
			memcpy(&sin->sin_addr,
			    &((struct sockaddr_in *)ifa->ifa_addr)->sin_addr,
			    sizeof sin->sin_addr);
			break;
			
		case AF_INET6:
			sa->sa_family = AF_INET6;
			sin6->sin6_port = htons(port);
			sin6->sin6_len = sizeof *sin6;
			memcpy(&sin6->sin6_addr,
			    &((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr,
			    sizeof sin6->sin6_addr);
			break;
		}
	}
	freeifaddrs(ifap);
	return sa->sa_family == AF_UNSPEC ? -1 : 0;
a780 1
				
a844 1

a846 1

@


1.4
log
@Various logging fixes, handle peer disconnects better.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.3 2005/05/23 17:35:01 ho Exp $	*/
d78 1
a78 1
static void
d389 3
d730 4
@


1.3
log
@add "listen on <interface name>"
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.2 2005/05/22 20:35:48 ho Exp $	*/
d66 5
a70 1
#define AES_IV_LEN AES_BLOCK_SIZE
d77 1
d81 3
a83 2
	u_int32_t	i, off, blen = len*2 + 3 + strlen(title);
	u_int8_t	*buf = calloc(1, blen);
d85 1
a85 1
	if (!buf || cfgstate.verboselevel < lvl)
d88 5
a92 1
	snprintf(buf, blen, "%s:\n", title);
d94 1
a94 1
	for (i = 0; i < len; i++, off+=2)
d96 5
d226 1
a226 1
	dump_buf(5, hash, sizeof hash, "Hash");
d251 1
a251 1
	dump_buf(5, iv, sizeof iv, "IV");
d255 1
a255 1
	dump_buf(5, buf, len, "Pre-enc");
d257 1
a257 1
	dump_buf(5, buf, len, "Post-enc");
d387 2
a388 1
				log_msg(1, "peer \"%s\" connected", p->name);
d391 1
a391 1
				log_msg(1, "Found no matching peer for "
a405 2
		/* XXX check message validity. */

d418 2
a419 2
				log_msg(0, "got PFKEY message from non-MASTER "
				    "peer");
d430 2
a431 2
			log_msg(0, "Got unknown message type %u len %u from "
			    "peer %s", msgtype, msglen, p->name);
a448 1

d456 2
a457 2
		log_msg(4, "sending msg %p len %d ref %d to peer %s", m,
		    m->len, m->refcnt, p->name);
d461 6
a466 4
		if (r == -1)
			log_err("net_send_messages: write()");
		else if (r < (ssize_t)m->len) {
			/* XXX retransmit? */
d475 1
a475 1
			log_msg(4, "freeing msg %p", m);
d486 3
a488 1
	if (p->socket > -1)
d490 1
d535 4
a538 1
	if (read(p->socket, &v, sizeof v) != (ssize_t)sizeof v)
d540 2
d546 2
d556 2
a557 1
	if (r == -1) {
d590 3
a592 3
	dump_buf(5, rhash, sizeof hash, "Recv hash");
	dump_buf(5, iv, sizeof iv, "Recv IV");
	dump_buf(5, msg, *msglen, "Pre-decrypt");
d594 1
a594 1
	dump_buf(5, msg, *msglen, "Post-decrypt");
d600 1
a600 1
	dump_buf(5, hash, sizeof hash, "Local hash");
d604 1
a604 1
		log_msg(0, "net_read: bad msg hash (shared key typo?)");
d689 1
a689 1
net_connect_peers(void)
d715 2
a716 1
			log_msg(1, "peer \"%s\" not ready yet", p->name);
d721 1
a721 1
			log_msg(0, "peer \"%s\" failed", p->name);
d725 2
a726 1
		log_msg(1, "peer \"%s\" connected", p->name);
d740 1
a740 1
	net_connect_peers();
@


1.2
log
@No more SSL between peers, instead do shared key AES & SHA
@
text
@d1 1
a1 1
/*	$OpenBSD: net.c,v 1.1 2005/03/30 18:44:49 ho Exp $	*/
d38 2
d96 1
d100 1
a100 1
	r = (strlen(cfgstate.sharedkey) - 1) << 3;
d116 2
a117 1
		perror("inet_pton");
d120 1
d145 8
a152 2
	log_msg(2, "listening on port %u fd %d", cfgstate.listen_port,
	    listen_socket);
d590 9
d600 33
a632 2
	if (name) {
		if (inet_pton(AF_INET, name, &sin->sin_addr) == 1) {
d636 6
a641 4
			return 0;
		}

		if (inet_pton(AF_INET6, name, &sin6->sin6_addr) == 1) {
d645 4
a648 1
			return 0;
a649 6
	} else {
		/* XXX Assume IPv4 */
		sa->sa_family = AF_INET;
		sin->sin_port = htons(port);
		sin->sin_len = sizeof *sin;
		return 0;
d651 2
a652 2

	return 1;
d654 1
@


1.1
log
@Move sasyncd(8), for IPsec SA synchronization, in-tree. Work in progress.
deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 3
d43 2
a52 1
	u_int8_t	*obuf;		/* Original buf w/o offset. */
a53 1
	u_int32_t	 type;
d63 2
d71 17
d96 11
a106 1
	if (net_SSL_init())
d108 1
a159 4
	if (!p->ssl)
		if (net_SSL_connect(p))
			return;

d179 1
a179 2
net_queue(struct syncpeer *p0, u_int32_t msgtype, u_int8_t *buf,
    u_int32_t offset, u_int32_t len)
d183 5
d189 1
a189 1
	m = (struct msg *)malloc(sizeof *m);
d191 47
a237 1
		log_err("malloc()");
d239 1
d242 18
a259 5
	memset(m, 0, sizeof *m);
	m->obuf = buf;
	m->buf = buf + offset;
	m->len = len;
	m->type = msgtype;
d269 1
a269 1
		free(m->obuf);
a360 1
				p->ssl = NULL;
d419 1
a419 1
	u_int32_t	 v;
d432 2
a433 2
		log_msg(4, "sending msg %p (qm %p ref %d) to peer %s", m, qm,
		    m->refcnt, p->name);
d435 6
a440 7
		/* Send the message. */
		v = htonl(m->type);
		if (net_SSL_write(p, &v, sizeof v))
			continue;

		v = htonl(m->len);
		if (net_SSL_write(p, &v, sizeof v))
d442 1
d444 1
a444 3
		(void)net_SSL_write(p, m->buf, m->len);

		/* Cleanup. */
d450 1
a450 1
			free(m->obuf);
a459 1
	net_SSL_disconnect(p);
d477 1
a477 1
				free(m->obuf);
a490 1
	net_SSL_shutdown();
d500 4
a503 2
	u_int8_t	*msg;
	u_int32_t	 v;
d505 5
a509 1
	if (net_SSL_read(p, &v, sizeof v))
d511 1
a511 1
	*msgtype = ntohl(v);
d513 4
a516 1
	if (*msgtype > MSG_MAXTYPE)
d518 16
d535 2
a536 1
	if (net_SSL_read(p, &v, sizeof v))
d538 1
a538 1
	*msglen = ntohl(v);
d540 3
a542 1
	/* XXX msglen sanity */
d544 2
d547 2
a548 3
	memset(msg, 0, *msglen);
	if (net_SSL_read(p, msg, *msglen)) {
		free(msg);
d551 1
d553 18
d626 1
a626 1
		if (p->ssl || p->socket > -1)
@

