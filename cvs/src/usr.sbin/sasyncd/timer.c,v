head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.16
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.20
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.18
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.12
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.10
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.8
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.4
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2016.08.27.01.30.39;	author guenther;	state Exp;
branches;
next	1.5;
commitid	FQKa1ak2HElbmSIu;

1.5
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	z3HrihslRYb4HqW9;

1.4
date	2010.06.29.18.10.04;	author kjell;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.02.20.31.48;	author moritz;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.23.19.53.27;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.30.18.44.49;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Use %zu for size_t arguments
@
text
@/*	$OpenBSD: timer.c,v 1.5 2015/08/20 22:39:29 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Multicom Security AB.
 */


#include <sys/types.h>
#include <sys/queue.h>
#include <sys/time.h>

#include <stdlib.h>
#include <string.h>

#include "sasyncd.h"

/*
 * All events have a name, an expiration time and a function to be called
 * at this time. The queue is always sorted so the next event to happen is
 * first in the queue.
 */
struct event {
	TAILQ_ENTRY (event) next;
	struct timeval	 expire;
	char		*name;
	void		(*fun) (void *);
	void		*arg;
};

static TAILQ_HEAD (event_head, event) events;

/* Initialize timer event queue. */
void
timer_init(void)
{
	TAILQ_INIT(&events);
}

/*
 * Return the number of seconds until the next event happens. Used for
 * the select() call in the main loop.
 */
void
timer_next_event(struct timeval *tv)
{
	struct timeval	 now;
	struct event	*e = TAILQ_FIRST(&events);

	if (e) {
		gettimeofday(&now, 0);
		if (timercmp(&now, &e->expire, >=))
			timerclear(tv);
		else
			timersub(&e->expire, &now, tv);
	} else {
		tv->tv_sec = 60;	/* "Best guess". */
		tv->tv_usec = 0;
	}
}

/*
 * Whenever select() times out, we have an event that should happen and this
 * routine gets called. Handle and remove all pending events.
 */
void
timer_run(void)
{
	struct timeval	 now;
	struct event	*e;

	gettimeofday(&now, 0);
	for (e = TAILQ_FIRST(&events); e && timercmp(&now, &e->expire, >=);
	     e = TAILQ_FIRST(&events)) {
		TAILQ_REMOVE(&events, e, next);
		log_msg(2, "timer_run: event \"%s\"",
		    e->name ? e->name : "<unknown>");
		(*e->fun)(e->arg);
		if (e->name)
			free(e->name);
		free(e);
	}
}

/* Add a new event. */
int
timer_add(char *name, u_int32_t when, void (*function)(void *), void *arg)
{
	struct timeval	 now, tmp;
	struct event	*e, *new;

	new = calloc(1, sizeof *new);
	if (!new) {
		log_err("timer_add: calloc (1, %zu) failed", sizeof *new);
		return -1;
	}

	new->name = strdup(name); /* We handle failures here. */
	new->fun = function;
	new->arg = arg;

	memset(&tmp, 0, sizeof tmp);
	tmp.tv_sec = when;
	gettimeofday(&now, 0);
	timeradd(&now, &tmp, &new->expire);

	log_msg(2, "timer_add: new event \"%s\" (expiring in %us)",
	    name ? name : "<unknown>", when);

	/* Insert the new event in the queue so it's always sorted. */
	for (e = TAILQ_FIRST(&events); e; e = TAILQ_NEXT(e, next)) {
		if (timercmp(&new->expire, &e->expire, >=))
			continue;
		TAILQ_INSERT_BEFORE(e, new, next);
		return 0;
	}
	TAILQ_INSERT_TAIL(&events, new, next);
	return 0;
}
@


1.5
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.4 2010/06/29 18:10:04 kjell Exp $	*/
d118 1
a118 1
		log_err("timer_add: calloc (1, %u) failed", sizeof *new);
@


1.4
log
@Having more than 2 log levels is silly. Use only 3 verbosity levels:
 None (), Important (-v), All (-vv)
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.3 2006/06/02 20:31:48 moritz Exp $	*/
d116 1
a116 1
	new = (struct event *)calloc(1, sizeof *new);
@


1.3
log
@whitespace cleanup, no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.2 2005/05/23 19:53:27 ho Exp $	*/
d100 1
a100 1
		log_msg(6, "timer_run: event \"%s\"",
d131 1
a131 1
	log_msg(6, "timer_add: new event \"%s\" (expiring in %us)",
@


1.2
log
@Various logging fixes, handle peer disconnects better.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.1 2005/03/30 18:44:49 ho Exp $	*/
d67 1
a67 1
 */ 
@


1.1
log
@Move sasyncd(8), for IPsec SA synchronization, in-tree. Work in progress.
deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d100 1
a100 1
		log_msg(4, "timer_run: event \"%s\"",
d131 1
a131 1
	log_msg(4, "timer_add: new event \"%s\" (expiring in %us)",
@

