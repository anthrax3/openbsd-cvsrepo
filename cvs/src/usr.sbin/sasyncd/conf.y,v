head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.14
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.10
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.10
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7;
locks; strict;
comment	@ * @;


1.18
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	z3HrihslRYb4HqW9;

1.17
date	2012.12.21.13.53.01;	author gsoares;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.14.11.46.09;	author haesbaert;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.16.17.39.05;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.17.11.01.36;	author moritz;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.08.15.31.01;	author markus;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.24.05.01.08;	author msf;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.02.20.31.48;	author moritz;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.20.09.43;	author mcbride;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.01.22.43.12;	author mcbride;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.31.17.38.18;	author pat;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.09.07.53.26;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.28.01.36.02;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.28.01.07.52;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.26.19.19.51;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.24.19.18.10;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.22.20.35.48;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.03.17.19.26;	author ho;	state Exp;
branches;
next	;


desc
@@


1.18
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@/*	$OpenBSD: conf.y,v 1.17 2012/12/21 13:53:01 gsoares Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Definitions */
%{
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <ctype.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pwd.h>

#include "sasyncd.h"
#include "net.h"

/* Global configuration context.  */
struct cfgstate	cfgstate;

/* Local variables */
int	conflen = 0;
char	*confbuf, *confptr;

int	yyparse(void);
int	yylex(void);
void	yyerror(const char *);
unsigned char x2i(unsigned char *);
%}

%union {
	char	*string;
	int	 val;
	struct {
		unsigned char	*data;
		int	 len;
	} hex;
}

%token MODE INTERFACE INTERVAL LISTEN ON PORT PEER SHAREDKEY
%token Y_SLAVE Y_MASTER INET INET6 FLUSHMODE STARTUP NEVER SYNC
%token GROUP SKIPSLAVE CONTROL
%token <string> STRING
%token <hex>	HEX
%token <val>	VALUE
%type  <val>	af port mode flushmode ctlmode

%%
/* Rules */

settings	: /* empty */
		| settings setting
		;

af		: /* empty */		{ $$ = AF_UNSPEC; }
		| INET			{ $$ = AF_INET; }
		| INET6			{ $$ = AF_INET6; }
		;

port		: /* empty */		{ $$ = SASYNCD_DEFAULT_PORT; }
		| PORT VALUE		{ $$ = $2; }
		;

mode		: Y_MASTER		{ $$ = MASTER; }
		| Y_SLAVE		{ $$ = SLAVE; }
		;

modes		: SKIPSLAVE
		{
			cfgstate.flags |= SKIP_LOCAL_SAS;
			log_msg(2, "config: not syncing SA to peers");
		}
		| mode
		{
			const char *m[] = CARPSTATES;
			cfgstate.lockedstate = $1;
			log_msg(2, "config: mode set to %s", m[$1]);
		}
		;

flushmode	: STARTUP		{ $$ = FM_STARTUP; }
		| NEVER			{ $$ = FM_NEVER; }
		| SYNC			{ $$ = FM_SYNC; }
		;

key		: STRING
		{
			if (cfgstate.sharedkey)
				free(cfgstate.sharedkey);
			cfgstate.sharedkey = $1;
			cfgstate.sharedkey_len = strlen($1) * 8;
			log_msg(2, "config: shared ascii key");
		}
		| HEX
		{
			if (cfgstate.sharedkey)
				free(cfgstate.sharedkey);
			cfgstate.sharedkey = $1.data;
			cfgstate.sharedkey_len = $1.len * 8;
			log_msg(2, "config: %d byte shared hex key", $1.len);
		}

ctlmode		: STRING
		{
			/* Compare strings to avoid keywords for daemons */
			if (strcmp("isakmpd", $1) == 0)
				$$ = CTL_ISAKMPD;
			else if (strcmp("iked", $1) == 0)
				$$ = CTL_IKED;
			else if (strcmp("all", $1) == 0)
				$$ = CTL_MASK;
			else if (strcmp("none", $1) == 0)
				$$ = CTL_NONE;
			else {
				log_err("config: invalid control mode");
				free($1);
				YYERROR;
			}
			log_msg(2, "config: control mode set to %s", $1);
			free($1);
		}
		;

setting		: INTERFACE STRING
		{
			if (cfgstate.carp_ifname)
				free(cfgstate.carp_ifname);
			cfgstate.carp_ifname = $2;
			log_msg(2, "config: interface %s",
			    cfgstate.carp_ifname);
		}
		| GROUP STRING
		{
			if (cfgstate.carp_ifgroup)
				free(cfgstate.carp_ifgroup);
			cfgstate.carp_ifgroup = $2;
			log_msg(2, "config: group %s",
			    cfgstate.carp_ifgroup);
		}
		| FLUSHMODE flushmode
		{
			const char *fm[] = { "STARTUP", "NEVER", "SYNC" };
			cfgstate.flags |= $2;
			log_msg(2, "config: flush mode set to %s", fm[$2]);
		}
		| PEER STRING
		{
			struct syncpeer	*peer;
			int		 duplicate = 0;

			for (peer = LIST_FIRST(&cfgstate.peerlist); peer;
			     peer = LIST_NEXT(peer, link))
				if (strcmp($2, peer->name) == 0) {
					duplicate++;
					break;
				}
			if (duplicate)
				free($2);
			else {
				peer = calloc(1, sizeof *peer);
				if (!peer) {
					log_err("config: calloc(1, %lu) "
					    "failed", sizeof *peer);
					free($2);
					YYERROR;
				}
				peer->name = $2;
			}
			LIST_INSERT_HEAD(&cfgstate.peerlist, peer, link);
			cfgstate.peercnt++;
			log_msg(2, "config: add peer %s", peer->name);
		}
		| LISTEN ON STRING af port
		{
			char pstr[20];

			if (cfgstate.listen_on)
				free(cfgstate.listen_on);
			cfgstate.listen_on = $3;
			cfgstate.listen_family = $4;
			cfgstate.listen_port = $5;
			if ($5 < 1 || $5 > IPPORT_HILASTAUTO) {
				cfgstate.listen_port = SASYNCD_DEFAULT_PORT;
				log_msg(0, "config: bad port, listen-port "
				    "reset to %u", SASYNCD_DEFAULT_PORT);
			}
			if ($5 != SASYNCD_DEFAULT_PORT)
				snprintf(pstr, sizeof pstr, "port %d",$5);
			log_msg(2, "config: listen on %s %s%s",
			    cfgstate.listen_on, $4 == AF_INET6 ? "(IPv6) " :
			    ($4 == AF_INET ? "(IPv4) " : ""),
			    $5 != SASYNCD_DEFAULT_PORT ? pstr : "");
		}
		| MODE modes
		| SHAREDKEY key
		{
			int bits;

			bits = cfgstate.sharedkey_len;
			if (bits != 128 && bits != 192 && bits != 256) {
				log_err("config: bad shared key length %d, "
				    "should be 128, 192 or 256 bits\n", bits);
				YYERROR;
			}
			log_msg(2, "config: shared key set");
		}
		| CONTROL ctlmode
		{
			cfgstate.flags &= ~CTL_MASK;
			cfgstate.flags |= $2;
		}
		;

%%
/* Program */

struct keyword {
	char *name;
	int   value;
};

static int
match_cmp(const void *a, const void *b)
{
	return strcmp(a, ((const struct keyword *)b)->name);
}

static int
match(char *token)
{
	/* Sorted */
	static const struct keyword keywords[] = {
		{ "control", CONTROL },
		{ "flushmode", FLUSHMODE },
		{ "group", GROUP },
		{ "inet", INET },
		{ "inet6", INET6 },
		{ "interface", INTERFACE },
		{ "listen", LISTEN },
		{ "master", Y_MASTER },
		{ "mode", MODE },
		{ "never", NEVER },
		{ "on", ON },
		{ "peer", PEER },
		{ "port", PORT },
		{ "sharedkey", SHAREDKEY },
		{ "skipslave", SKIPSLAVE },
		{ "slave", Y_SLAVE },
		{ "startup", STARTUP },
		{ "sync", SYNC },
	};
	const struct keyword *k;

	k = bsearch(token, keywords, sizeof keywords / sizeof keywords[0],
	    sizeof keywords[0], match_cmp);

	return k ? k->value : STRING;
}

int
yylex(void)
{
	char *p;
	int v, i, len;

	/* Locate next token */
	if (!confptr)
		confptr = confbuf;
	else {
		for (p = confptr; *p && p < confbuf + conflen; p++)
			;
		p++;
		if (!*p)
			return 0;
		confptr = p;
	}

	/* Hex token? */
	p = confptr;
	if (!strncmp(p, "0x", 2)) {
		for (p = confptr + 2; *p; p++)
			if (!isxdigit(*p))
				goto is_string;
		p = confptr + 2;
		len = strlen(p) / 2;
		if ((yylval.hex.data = calloc(len, sizeof(unsigned char)))
		    == NULL) {
			log_err("yylex: calloc()");
			exit(1);
		}
		for (i = 0; i < len; i++)
			yylval.hex.data[i] = x2i(p + 2 * i);
		yylval.hex.len = len;
		return HEX;
	}

	/* Numerical token? */
	if (isdigit(*confptr)) {
		for (p = confptr; *p; p++)
			if (*p == '.') /* IP address, or bad input */
				goto is_string;
		v = (int)strtol(confptr, (char **)NULL, 10);
		yylval.val = v;
		return VALUE;
	}

  is_string:
	v = match(confptr);
	if (v == STRING) {
		yylval.string = strdup(confptr);
		if (!yylval.string) {
			log_err("yylex: strdup()");
			exit(1);
		}
	}
	return v;
}

int
conf_parse_file(char *cfgfile)
{
	struct stat	st;
	int		fd, r;
	char		*buf, *s, *d;
	struct passwd	*pw;

	if (stat(cfgfile, &st) != 0)
		goto bad;

	pw = getpwnam(SASYNCD_USER);
	if (pw == NULL) {
		log_err("getpwnam(%s) failed", SASYNCD_USER);
		return 1;
	}

	/* Valid file? */
	if ((st.st_uid && st.st_uid != pw->pw_uid) ||
	    ((st.st_mode & S_IFMT) != S_IFREG) ||
	    ((st.st_mode & (S_IRWXG | S_IRWXO)) != 0)) {
		log_msg(0, "configuration file has bad owner, type or mode");
		goto bad;
	}

	fd = open(cfgfile, O_RDONLY, 0);
	if (fd < 0)
		goto bad;

	conflen = st.st_size;
	buf = malloc(conflen + 1);
	if (!buf) {
		log_err("malloc(%d) failed", conflen + 1);
		close(fd);
		return 1;
	}

	if (read(fd, buf, conflen) != conflen) {
		log_err("read() failed");
		free(buf);
		close(fd);
		return 1;
	}
	close(fd);

	/* Prepare the buffer somewhat in the way of strsep() */
	buf[conflen] = (char)0;
	for (s = buf, d = s; *s && s < buf + conflen; s++) {
		if (isspace(*s) && isspace(*(s+1)))
			continue;
		if (*s == '#') {
			while (*s != '\n' && s < buf + conflen)
				s++;
			continue;
		}
		if (d == buf && isspace(*s))
			continue;
		*d++ = *s;
	}
	*d = (char)0;
	for (s = buf; s <= d; s++)
		if (isspace(*s))
			*s = (char)0;

	confbuf = buf;
	confptr = NULL;
	r = yyparse();
	free(buf);

	if (!cfgstate.carp_ifgroup)
		cfgstate.carp_ifgroup = strdup("carp");

	return r;

  bad:
	log_msg(0, "failed to open \"%s\"", cfgfile);
	return 1;
}

unsigned char
x2i(unsigned char *s)
{
        char    ss[3];

        ss[0] = s[0];
        ss[1] = s[1];
        ss[2] = 0;

        return ((unsigned char)strtoul(ss, NULL, 16));
}

void
yyerror(const char *s)
{
	fprintf(stderr, "config: %s\n", s);
}
@


1.17
log
@valid port interval 1 through 65535, not 1 - 65534

check interval with yacc/$5 variable instead of cfgstate.listen_port that is an in_port_t type, for avoid warnings, due to limited range of data type;

use IPPORT_HILASTAUTO for more consistence (input from millert@@)

"yeah, I like that. ok" henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.16 2012/04/14 11:46:09 haesbaert Exp $	*/
d36 1
d186 1
a186 2
				peer = (struct syncpeer *)calloc(1,
				    sizeof *peer);
d375 1
a375 1
	buf = (char *)malloc(conflen + 1);
@


1.16
log
@Add CDIAGFLAGS infrastructure.
Fix signed vs unsigned and dup symbol shadow.

ok mikeb@@
"looks good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.15 2010/06/16 17:39:05 reyk Exp $	*/
d208 1
a208 2
			if (cfgstate.listen_port < 1 ||
			    cfgstate.listen_port > 65534) {
@


1.15
log
@Add support to use sasyncd(8) with iked(8) instead of isakmpd(8).  The
new config option "control isakmpd|iked|all|none" in sasyncd.conf(5)
is used to set the mode; the default is to control isakmpd like
before.  When controlling iked, sasyncd connects to the daemon using
the imsg socket and sends imsgs - this is easy because the imsg
framework has been imported into libutil. iked(8) already includes
the important bits to work with sasyncd(8) (the active/passive mode
option in ikectl).

manpage bits ok jsg@@
ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.14 2007/05/17 11:01:36 moritz Exp $	*/
d174 1
a174 1
			int		 dup = 0;
d179 1
a179 1
					dup++;
d182 1
a182 1
			if (dup)
@


1.14
log
@Check getpwnam() return value for NULL before dereferencing it.

ok ray@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.13 2007/01/08 15:31:01 markus Exp $	*/
d67 1
a67 1
%token GROUP SKIPSLAVE
d71 1
a71 1
%type  <val>	af port mode flushmode
d128 21
d234 5
d260 1
@


1.13
log
@allow shared key specification in hex (0x01234...); ok ho
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.12 2006/12/24 05:01:08 msf Exp $	*/
d325 1
a325 1
	struct passwd	*pw = getpwnam(SASYNCD_USER);
d329 6
@


1.12
log
@first pass cleanup of sasyncd, based on some discussion with deraadt@@

inline conf_init into main() and remove it from conf.y.  add usage().
small amount of whitespace nits in sasync.h

ok deraadt@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.11 2006/06/02 20:31:48 moritz Exp $	*/
d53 1
d59 4
d69 1
d111 17
d201 1
a201 1
		| SHAREDKEY STRING
d203 8
a210 3
			if (cfgstate.sharedkey)
				free(cfgstate.sharedkey);
			cfgstate.sharedkey = $2;
d264 1
a264 1
	int v;
d278 19
d390 12
@


1.11
log
@whitespace cleanup, no binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.10 2006/06/02 20:09:43 mcbride Exp $	*/
d272 1
a272 1
static int
a341 50
	return 1;
}

int
conf_init(int argc, char **argv)
{
	char	*cfgfile = 0;
	int	 ch;

	memset(&cfgstate, 0, sizeof cfgstate);
	cfgstate.runstate = INIT;
	LIST_INIT(&cfgstate.peerlist);

	cfgstate.listen_port = SASYNCD_DEFAULT_PORT;

	while ((ch = getopt(argc, argv, "c:dv")) != -1) {
		switch (ch) {
		case 'c':
			if (cfgfile)
				return 2;
			cfgfile = optarg;
			break;
		case 'd':
			cfgstate.debug++;
			break;
		case 'v':
			cfgstate.verboselevel++;
			break;
		default:
			return 2;
		}
	}
	argc -= optind;
	argv += optind;

	if (argc > 0)
		return 2;

	if (!cfgfile)
		cfgfile = SASYNCD_CFGFILE;

	if (conf_parse_file(cfgfile) == 0) {
		if (!cfgstate.sharedkey) {
			fprintf(stderr, "config: "
			    "no shared key specified, cannot continue");
			return 1;
		}
		return 0;
	}

@


1.10
log
@Make sasyncd fail back correctly with carp preemption enabled.

Hold the carp demotion when booting, to prevent carp from preempting until
we've sync'd with our peers.  This adds a new CTL_ENDSNAP message to the
exchange between the sasync daemons to indicate when the complete snapshot
has been sent. Undemote after 60 seconds, or when recieve a CTL_ENDSNAP from
all our peers.

Syntax is slightly changed, removing the 'carp' keyword (so do
"interface carp0" rather than "carp interface carp0". Adds 'group <ifgroup>',
defaults to the 'carp' group.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.9 2006/06/01 22:43:12 mcbride Exp $	*/
d62 1
a62 1
%token GROUP SKIPSLAVE 
d233 1
a233 1
yylex(void) 
d287 1
a287 1
		log_msg(0, "configuration file has bad owner, type or mode"); 
@


1.9
log
@Instead of polling the carp interface to detect a switch between MASTER and
BACKUP, listen to the routing socket for link change messages.

Based on a diff from nathanael at polymorpheous dot com.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.8 2006/03/31 17:38:18 pat Exp $	*/
d60 1
a60 1
%token MODE CARP INTERFACE INTERVAL LISTEN ON PORT PEER SHAREDKEY
d62 1
a62 1
%token SKIPSLAVE
d105 1
a105 1
setting		: CARP INTERFACE STRING
d109 11
a119 2
			cfgstate.carp_ifname = $3;
			log_msg(2, "config: carp interface %s", $3);
d152 1
a205 1
		{ "carp", CARP },
d207 1
d334 3
@


1.8
log
@Plug memory leak on error path; ok ho@@ moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.7 2005/07/09 07:53:26 jmc Exp $	*/
d65 1
a65 1
%type  <val>	af port interval mode flushmode
a99 4
interval	: /* empty */		{ $$ = CARP_DEFAULT_INTERVAL; }
		| INTERVAL VALUE	{ $$ = $2; }
		;

d105 1
a105 1
setting		: CARP INTERFACE STRING interval
d110 1
a110 3
			cfgstate.carp_check_interval = $4;
			log_msg(2, "config: carp interface %s interval %d",
			    $3, $4);
a200 1
		{ "interval", INTERVAL },
a341 1
	cfgstate.carp_check_interval = CARP_DEFAULT_INTERVAL;
@


1.7
log
@IP-address -> IP address;
from tamas tevesz;
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.6 2005/05/28 01:36:02 deraadt Exp $	*/
d143 1
@


1.6
log
@result not used; ok ho
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.5 2005/05/28 01:07:52 ho Exp $	*/
d249 1
a249 1
			if (*p == '.') /* IP-address, or bad input */
@


1.5
log
@Optionally prevent syncing failover node-node SA/SPD info (master side).
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.4 2005/05/26 19:19:51 ho Exp $	*/
d240 1
a240 1
		*p++;
@


1.4
log
@add a 'flushmode' to control how the master handles FLUSH to slaves. tweak some loglevels.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.3 2005/05/24 19:18:10 ho Exp $	*/
d62 1
d74 3
a76 3
af		: /* empty */			{ $$ = AF_UNSPEC; }
		| INET				{ $$ = AF_INET; }
		| INET6				{ $$ = AF_INET6; }
d79 2
a80 2
port		: /* empty */			{ $$ = SASYNCD_DEFAULT_PORT; }
		| PORT VALUE			{ $$ = $2; }
d83 2
a84 2
mode		: MODE Y_MASTER			{ $$ = MASTER; }
		| MODE Y_SLAVE			{ $$ = SLAVE; }
d87 11
a97 2
interval	: /* empty */			{ $$ = CARP_DEFAULT_INTERVAL; }
		| INTERVAL VALUE		{ $$ = $2; }
d100 7
a106 3
flushmode	: STARTUP			{ $$ = FM_STARTUP; }
		| NEVER				{ $$ = FM_NEVER; }
		| SYNC				{ $$ = FM_SYNC; }
d120 2
a121 2
			const char *fm[] = FLUSHMODES;
			cfgstate.flushmode = $2;
d172 1
a172 6
		| mode
		{
			const char *m[] = CARPSTATES;
			cfgstate.lockedstate = $1;
			log_msg(2, "config: mode set to %s", m[$1]);
		}
d215 1
a219 1

@


1.3
log
@cleanup parser, permit more than one listener
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.2 2005/05/22 20:35:48 ho Exp $	*/
d61 1
a61 1
%token Y_SLAVE Y_MASTER INET INET6
d64 1
a64 1
%type  <val>	af port interval mode
d90 5
d104 6
d160 1
d162 1
a162 2
			log_msg(2, "config: mode set to %s",
			    $1 == MASTER ? "MASTER" : "SLAVE");
d193 1
d201 1
d207 2
@


1.2
log
@No more SSL between peers, instead do shared key AES & SHA
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.y,v 1.1 2005/04/03 17:19:26 ho Exp $	*/
d32 1
d44 1
a44 1
struct cfgstate cfgstate;
d46 2
a47 2
struct syncpeer *peer;
int	 conflen = 0;
d61 1
a61 1
%token Y_SLAVE Y_MASTER
d63 2
a64 1
%token <val> VALUE
d73 18
a90 1
setting		: CARP INTERFACE STRING
d95 3
a97 6
			log_msg(2, "config: carp interface %s", $3);
		}
		| CARP INTERVAL VALUE
		{
			cfgstate.carp_check_interval = $3;
			log_msg(2, "config: carp interval %d", $3);
d101 3
a103 1
			int dup = 0;
d125 1
a125 1
		| LISTEN ON STRING
d127 2
d132 2
a133 5
			log_msg(2, "config: listen on %s", cfgstate.listen_on);
		}
		| LISTEN PORT VALUE
		{
			cfgstate.listen_port = $3;
d139 13
a151 13
			} else
				log_msg(2, "config: listen port %u",
				    cfgstate.listen_port);
		}
		| MODE Y_MASTER
		{
			cfgstate.lockedstate = MASTER;
			log_msg(2, "config: mode set to MASTER");
		}
		| MODE Y_SLAVE
		{
			cfgstate.lockedstate = SLAVE;
			log_msg(2, "config: mode set to SLAVE");
d182 2
d231 1
a231 1
	
@


1.1
log
@yacc parser
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
d37 1
d231 1
d236 8
d291 1
a291 1
	log_err("failed to open \"%s\"", cfgfile);
d335 5
a339 6
		if (!cfgstate.certfile)
			cfgstate.certfile = SASYNCD_CERTFILE;
		if (!cfgstate.privkeyfile)
			cfgstate.privkeyfile = SASYNCD_PRIVKEY;
		if (!cfgstate.cafile)
			cfgstate.cafile = SASYNCD_CAFILE;
@

