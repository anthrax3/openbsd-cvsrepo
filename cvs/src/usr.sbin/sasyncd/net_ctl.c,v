head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.8
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.24
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.16
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.20
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.18
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.14
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6;
locks; strict;
comment	@ * @;


1.11
date	2016.07.18.21.22.09;	author benno;	state Exp;
branches;
next	1.10;
commitid	tKWOroa43nDNjz1k;

1.10
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	z3HrihslRYb4HqW9;

1.9
date	2010.06.29.18.10.04;	author kjell;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.02.20.09.43;	author mcbride;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.01.22.43.12;	author mcbride;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.26.19.19.51;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.24.19.17.07;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.23.19.53.27;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.22.20.35.48;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.22.12.14.16;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.30.18.44.49;	author ho;	state Exp;
branches;
next	;


desc
@@


1.11
log
@add format attributes to log functions and fix some errors

ok claudio@@ florian@@
@
text
@/*	$OpenBSD: net_ctl.c,v 1.10 2015/08/20 22:39:29 deraadt Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Multicom Security AB.
 */


#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "sasyncd.h"
#include "net.h"

struct ctlmsg {
	u_int32_t	type;
	u_int32_t	data;
	u_int32_t	data2;
};

int snapcount = 0;

static int
net_ctl_check_state(struct syncpeer *p, enum RUNSTATE nstate)
{
	if (nstate < INIT || nstate > FAIL) {
		log_msg(0, "net_ctl: got bad state %d from peer \"%s\"",
		    nstate, p->name);
		net_ctl_send_error(p, CTL_STATE);
		return -1;
	}
	if (cfgstate.runstate == MASTER && nstate == MASTER) {
		log_msg(0, "net_ctl: got bad state MASTER from peer \"%s\"",
		    p->name);
		net_ctl_send_error(p, CTL_STATE);
		return -1;
	}
	if (p->runstate != nstate) {
		p->runstate = nstate;
		log_msg(1, "net_ctl: peer \"%s\" state change to %s", p->name,
		    carp_state_name(nstate));
	}
	return 0;
}

void
net_ctl_handle_msg(struct syncpeer *p, u_int8_t *msg, u_int32_t msglen)
{
	struct ctlmsg	*ctl = (struct ctlmsg *)msg;
	enum RUNSTATE	 nstate;
	enum CTLTYPE	 ctype;
	static char	*ct, *ctltype[] = CTLTYPES;

	if (msglen < sizeof *ctl) {
		log_msg(0, "net_ctl: got bad control message from peer \"%s\"",
		    p->name);
		net_ctl_send_error(p, CTL_UNKNOWN);
		return;
	}

	switch (ntohl(ctl->type)) {
	case CTL_ENDSNAP:
		log_msg(2, "net_ctl: got CTL_ENDSNAP from peer \"%s\"",
		    p->name);

		/* XXX More sophistication required to handle multiple peers. */
		if (carp_demoted) {
			snapcount++;
			if (snapcount >= cfgstate.peercnt)
				monitor_carpundemote(NULL);
		}
		break;

	case CTL_STATE:
		log_msg(2, "net_ctl: got CTL_STATE from peer \"%s\"", p->name);
		nstate = (enum RUNSTATE)ntohl(ctl->data);
		if (net_ctl_check_state(p, nstate) == 0)
			net_ctl_send_ack(p, CTL_STATE, cfgstate.runstate);
		break;

	case CTL_ERROR:
		log_msg(1, "net_ctl: got ERROR from peer \"%s\"", p->name);

		switch (ntohl(ctl->data)) {
		case RESERVED: /* PFKEY -- nothing to do here for now */
			break;

		case CTL_STATE:
			nstate = cfgstate.runstate;
			carp_check_state();
			if (nstate != cfgstate.runstate)
				net_ctl_send_state(p);
			break;

		case CTL_UNKNOWN:
		default:
			break;
		}
		break;

	case CTL_ACK:
		ctype = (enum CTLTYPE)ntohl(ctl->data);
		if (ctype < RESERVED || ctype > CTL_UNKNOWN)
			ct = "<unknown>";
		else
			ct = ctltype[ctype];
		log_msg(2, "net_ctl: got %s ACK from peer \"%s\"", ct,
		    p->name);
		if (ctype == CTL_STATE) {
			nstate = (enum RUNSTATE)ntohl(ctl->data2);
			net_ctl_check_state(p, nstate);
		}
	break;

	case CTL_UNKNOWN:
	default:
		log_msg(1, "net_ctl: got unknown msg type %u from peer \"%s\"",
		    ntohl(ctl->type), p->name);
		break;
	}
}

static int
net_ctl_send(struct syncpeer *p, u_int32_t type, u_int32_t d, u_int32_t d2)
{
	struct ctlmsg	*m = malloc(sizeof *m);

	if (!m) {
		log_err("malloc(%zu)", sizeof *m);
		return -1;
	}

	memset(m, 0, sizeof *m);
	m->type = htonl(type);
	m->data = htonl(d);
	m->data2 = htonl(d2);

	return net_queue(p, MSG_SYNCCTL, (u_int8_t *)m, sizeof *m);
}

int
net_ctl_send_ack(struct syncpeer *p, enum CTLTYPE prevtype, u_int32_t code)
{
	return net_ctl_send(p, CTL_ACK, (u_int32_t)prevtype, code);
}

int
net_ctl_send_state(struct syncpeer *p)
{
	return net_ctl_send(p, CTL_STATE, (u_int32_t)cfgstate.runstate, 0);
}

int
net_ctl_send_error(struct syncpeer *p, enum CTLTYPE prevtype)
{
	return net_ctl_send(p, CTL_ERROR, (u_int32_t)prevtype, 0);
}

int
net_ctl_send_endsnap(struct syncpeer *p)
{
	return net_ctl_send(p, CTL_ENDSNAP, 0, 0);
}

/* After a CARP tracker state change, send an state ctl msg to all peers. */
void
net_ctl_update_state(void)
{
	struct syncpeer *p;

	/* We may have new peers available.  */
	net_connect();

	for (p = LIST_FIRST(&cfgstate.peerlist); p; p = LIST_NEXT(p, link)) {
		if (p->socket == -1)
			continue;
		log_msg(2, "net_ctl: sending my state %s to peer \"%s\"",
		    carp_state_name(cfgstate.runstate), p->name);
		net_ctl_send_state(p);
	}
}
@


1.10
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.9 2010/06/29 18:10:04 kjell Exp $	*/
d161 1
a161 1
		log_err("malloc(%u)", sizeof *m);
@


1.9
log
@Having more than 2 log levels is silly. Use only 3 verbosity levels:
 None (), Important (-v), All (-vv)
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.8 2006/06/02 20:09:43 mcbride Exp $	*/
d158 1
a158 1
	struct ctlmsg	*m = (struct ctlmsg *)malloc(sizeof *m);
@


1.8
log
@Make sasyncd fail back correctly with carp preemption enabled.

Hold the carp demotion when booting, to prevent carp from preempting until
we've sync'd with our peers.  This adds a new CTL_ENDSNAP message to the
exchange between the sasync daemons to indicate when the complete snapshot
has been sent. Undemote after 60 seconds, or when recieve a CTL_ENDSNAP from
all our peers.

Syntax is slightly changed, removing the 'carp' keyword (so do
"interface carp0" rather than "carp interface carp0". Adds 'group <ifgroup>',
defaults to the 'carp' group.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.7 2006/06/01 22:43:12 mcbride Exp $	*/
d95 1
a95 1
		log_msg(4, "net_ctl: got CTL_ENDSNAP from peer \"%s\"",
d107 1
a107 1
		log_msg(4, "net_ctl: got CTL_STATE from peer \"%s\"", p->name);
d139 1
a139 1
		log_msg(4, "net_ctl: got %s ACK from peer \"%s\"", ct,
d209 1
a209 1
		log_msg(4, "net_ctl: sending my state %s to peer \"%s\"",
@


1.7
log
@Instead of polling the carp interface to detect a switch between MASTER and
BACKUP, listen to the routing socket for link change messages.

Based on a diff from nathanael at polymorpheous dot com.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.6 2005/05/26 19:19:51 ho Exp $	*/
d53 2
d94 12
d189 6
@


1.6
log
@add a 'flushmode' to control how the master handles FLUSH to slaves. tweak some loglevels.
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.5 2005/05/24 19:17:07 ho Exp $	*/
a55 2
	static char	*runstate[] = CARPSTATES;

d71 1
a71 1
		    runstate[nstate]);
a181 1
	static char	*carpstate[] = CARPSTATES;
d190 1
a190 1
		    carpstate[cfgstate.runstate], p->name);
@


1.5
log
@logging tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.4 2005/05/23 19:53:27 ho Exp $	*/
d95 1
a95 1
		log_msg(5, "net_ctl: got CTL_STATE from peer \"%s\"", p->name);
d127 1
a127 1
		log_msg(5, "net_ctl: got %s ACK from peer \"%s\"", ct,
d192 1
a192 1
		log_msg(3, "net_ctl: sending my state %s to peer \"%s\"",
@


1.4
log
@Various logging fixes, handle peer disconnects better.
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.3 2005/05/22 20:35:48 ho Exp $	*/
a52 2
int	listen_socket;

d95 1
a95 1
		log_msg(3, "net_ctl: got CTL_STATE from peer \"%s\"", p->name);
d127 1
a127 1
		log_msg(3, "net_ctl: got %s ACK from peer \"%s\"", ct,
d192 1
a192 1
		log_msg(2, "net_ctl: sending my state %s to peer \"%s\"",
@


1.3
log
@No more SSL between peers, instead do shared key AES & SHA
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.2 2005/05/22 12:14:16 ho Exp $	*/
d61 2
a62 2
		log_msg(0, "got bad state %d from peer \"%s\"", nstate,
		    p->name);
d67 1
a67 1
		log_msg(0, "got bad state MASTER from peer \"%s\"",
d74 1
a74 1
		log_msg(1, "peer \"%s\" state change to %s", p->name,
d89 1
a89 1
		log_msg(0, "got invalid control message from peer \"%s\"",
d97 1
a97 1
		log_msg(3, "got CTL_STATE from peer \"%s\"", p->name);
d104 1
a104 1
		log_msg(1, "got ERROR from peer \"%s\"", p->name);
d129 2
a130 1
		log_msg(3, "got %s ACK from peer \"%s\"", ct, p->name);
d139 1
a139 1
		log_msg(1, "got unknown msg type %u from peer \"%s\"", 
d189 1
a189 1
	net_connect_peers();
d194 1
a194 1
		log_msg(2, "sending my state %s to peer \"%s\"",
@


1.2
log
@style nits
@
text
@d1 1
a1 1
/*	$OpenBSD: net_ctl.c,v 1.1 2005/03/30 18:44:49 ho Exp $	*/
d40 1
d159 1
a159 1
	return net_queue(p, MSG_SYNCCTL, (u_int8_t *)m, 0, sizeof *m);
@


1.1
log
@Move sasyncd(8), for IPsec SA synchronization, in-tree. Work in progress.
deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 2
	if (cfgstate.runstate == MASTER &&
	    nstate == MASTER) {
@

