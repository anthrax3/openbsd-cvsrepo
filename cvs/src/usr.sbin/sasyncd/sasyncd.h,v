head	1.18;
access;
symbols
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.12
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.14
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.10
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.8
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.12
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.14
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.10
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.8
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.6
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.4
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.2
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8;
locks; strict;
comment	@ * @;


1.18
date	2016.07.18.21.22.09;	author benno;	state Exp;
branches;
next	1.17;
commitid	tKWOroa43nDNjz1k;

1.17
date	2012.09.15.00.46.43;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.14.12.11.08;	author haesbaert;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.16.17.39.05;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.08.15.31.01;	author markus;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.25.08.17.17;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.24.05.01.08;	author msf;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.01.01.13.25;	author mpf;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.20.09.43;	author mcbride;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.01.22.43.12;	author mcbride;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.28.01.07.52;	author ho;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.26.19.19.51;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.24.19.18.11;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.24.02.35.39;	author ho;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.22.20.35.48;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.22.12.14.16;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.03.17.19.26;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.30.18.44.49;	author ho;	state Exp;
branches;
next	;


desc
@@


1.18
log
@add format attributes to log functions and fix some errors

ok claudio@@ florian@@
@
text
@/*	$OpenBSD: sasyncd.h,v 1.17 2012/09/15 00:46:43 guenther Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Multicom Security AB.
 */


#include <netinet/in.h>		/* in_port_t and sa_family_t */
#include <sys/queue.h>

enum RUNSTATE		{ INIT = 0, SLAVE, MASTER, FAIL };
#define CARPSTATES	{ "INIT", "SLAVE", "MASTER", "FAIL" }

struct syncpeer;
struct timeval;

struct cfgstate {
	enum RUNSTATE	 runstate;
	enum RUNSTATE	 lockedstate;
	int		 debug;
	int		 verboselevel;
	u_int32_t	 flags;

	char		*carp_ifname;
	char		*carp_ifgroup;
	int		 carp_ifindex;

	char		*sharedkey;
	int		 sharedkey_len;

	int		 pfkey_socket;

	int		 route_socket;

	char		*listen_on;
	in_port_t	 listen_port;
	sa_family_t	 listen_family;

	int		 peercnt;
	LIST_HEAD(, syncpeer) peerlist;
};

/* flags */
#define	FM_STARTUP	0x0000
#define FM_NEVER	0x0001
#define FM_SYNC		0x0002
#define FM_MASK		0x0003

/* Do not sync SAs to/from our peers. */
#define SKIP_LOCAL_SAS	0x0004

/* Control isakmpd or iked */
#define CTL_NONE	0x0000
#define CTL_ISAKMPD	0x0008
#define CTL_IKED	0x0010
#define CTL_DEFAULT	CTL_ISAKMPD
#define CTL_MASK	0x0018

extern struct cfgstate	cfgstate;
extern int		carp_demoted;

#define SASYNCD_USER	"_isakmpd"
#define SASYNCD_CFGFILE	"/etc/sasyncd.conf"

#define CARP_DEFAULT_INTERVAL	10
#define SASYNCD_DEFAULT_PORT	500

/*
 * sasyncd "protocol" definition
 *
 * Message format:
 *   u_int32_t	type
 *   u_int32_t	len
 *   raw        data
 */

/* sasyncd protocol message types */
#define MSG_SYNCCTL	0
#define MSG_PFKEYDATA	1
#define MSG_MAXTYPE	1	/* Increase when new types are added. */


#define CARP_DEC	-1
#define CARP_INC	1

#define CARP_DEMOTE_MAXTIME	60

/* conf.c */
int		conf_parse_file(char *);

/* carp.c */
int		carp_init(void);
void		carp_check_state(void);
void		carp_demote(int, int);
void		carp_update_state(enum RUNSTATE);
void		carp_set_rfd(fd_set *);
void		carp_read_message(fd_set *);
const char*	carp_state_name(enum RUNSTATE);
void		control_setrun(void);


/* log.c */
/*
 * Log levels for log_msg(level, ...) roughly means:
 *  0 = errors and other important messages
 *  1 = state changes, ctl message errors and dis-/connecting peers
 *  2 = configuration and initialization messages
 *  3 = PF_KEY logging
 *  4 = misc network
 *  5 = crypto
 *  6 = timers
 */
void	log_init(char *);
void	log_msg(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	log_err(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));

/* monitor.c */
pid_t	monitor_init(void);
void	monitor_loop(void);
void	monitor_carpdemote(void *);
void	monitor_carpundemote(void *);

/* net.c */
void	dump_buf(int, u_int8_t *, u_int32_t, char *);
void	net_ctl_update_state(void);
int	net_init(void);
void	net_handle_messages(fd_set *);
int	net_queue(struct syncpeer *, u_int32_t, u_int8_t *, u_int32_t);
void	net_send_messages(fd_set *);
int	net_set_rfds(fd_set *);
int	net_set_pending_wfds(fd_set *);
void	net_shutdown(void);

/* pfkey.c */
int	pfkey_init(int);
int	pfkey_queue_message(u_int8_t *, u_int32_t);
void	pfkey_read_message(fd_set *);
void	pfkey_send_message(fd_set *);
void	pfkey_set_rfd(fd_set *);
void	pfkey_set_pending_wfd(fd_set *);
int	pfkey_set_promisc(void);
void	pfkey_shutdown(void);
void	pfkey_snapshot(void *);

/* timer.c */
void	timer_init(void);
void	timer_next_event(struct timeval *);
void	timer_run(void);
int	timer_add(char *, u_int32_t, void (*)(void *), void *);
@


1.17
log
@Don't depend on sa_family_t being typedefed by <sys/types.h>; pull in
<netinet/in.h> to reliably get it

ok matthew@@, millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.16 2012/04/14 12:11:08 haesbaert Exp $	*/
d139 4
a142 2
void	log_msg(int, const char *, ...);
void	log_err(const char *, ...);
@


1.16
log
@Kill Boehms GC dead.

ok mikeb@@
sure deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.15 2010/06/16 17:39:05 reyk Exp $	*/
d33 1
@


1.15
log
@Add support to use sasyncd(8) with iked(8) instead of isakmpd(8).  The
new config option "control isakmpd|iked|all|none" in sasyncd.conf(5)
is used to set the mode; the default is to control isakmpd like
before.  When controlling iked, sasyncd connects to the daemon using
the imsg socket and sends imsgs - this is easy because the imsg
framework has been imported into libutil. iked(8) already includes
the important bits to work with sasyncd(8) (the active/passive mode
option in ikectl).

manpage bits ok jsg@@
ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.14 2007/01/08 15:31:01 markus Exp $	*/
a173 15

#if defined (GC_DEBUG)
/* Boehms GC */
void    *GC_debug_malloc(size_t, char *, int);
void    *GC_debug_realloc(void *, size_t, char *, int);
void     GC_debug_free(void *);
char    *gc_strdup(const char *);

#define malloc(x)       GC_debug_malloc ((x), __FILE__, __LINE__)
#define realloc(x,y)    GC_debug_realloc ((x), (y), __FILE__, __LINE__)
#define free(x)         GC_debug_free (x)
#define calloc(x,y)     malloc((x) * (y))
#define strdup(x)       gc_strdup((x))

#endif /* WITH_BOEHM_GC */
@


1.14
log
@allow shared key specification in hex (0x01234...); ok ho
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.13 2006/12/25 08:17:17 deraadt Exp $	*/
d76 7
d123 1
a123 1
void		isakmpd_setrun(void);
@


1.13
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.12 2006/12/24 05:01:08 msf Exp $	*/
d53 1
@


1.12
log
@first pass cleanup of sasyncd, based on some discussion with deraadt@@

inline conf_init into main() and remove it from conf.y.  add usage().
small amount of whitespace nits in sasync.h

ok deraadt@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.11 2006/09/01 01:13:25 mpf Exp $	*/
d105 1
a105 1
int 		conf_parse_file(char *);
@


1.11
log
@Teach sasyncd to set isakmpd into active or passive mode, according
to our current carp state.
Based on a diff by ho@@.
OK ho@@, hshoexer@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.10 2006/06/02 20:09:43 mcbride Exp $	*/
d105 1
a105 1
int	conf_init(int, char **);
d115 2
a165 3

/* carp.c */
void	isakmpd_setrun(void);
@


1.10
log
@Make sasyncd fail back correctly with carp preemption enabled.

Hold the carp demotion when booting, to prevent carp from preempting until
we've sync'd with our peers.  This adds a new CTL_ENDSNAP message to the
exchange between the sasync daemons to indicate when the complete snapshot
has been sent. Undemote after 60 seconds, or when recieve a CTL_ENDSNAP from
all our peers.

Syntax is slightly changed, removing the 'carp' keyword (so do
"interface carp0" rather than "carp interface carp0". Adds 'group <ifgroup>',
defaults to the 'carp' group.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.9 2006/06/01 22:43:12 mcbride Exp $	*/
a98 7

enum {
	MONITOR_GETSNAP,
	MONITOR_CARPINC,
	MONITOR_CARPDEC
};

a135 2
int	monitor_get_pfkey_snap(u_int8_t **, u_int32_t *, u_int8_t **,
    u_int32_t *);
d164 3
@


1.9
log
@Instead of polling the carp interface to detect a switch between MASTER and
BACKUP, listen to the routing socket for link change messages.

Based on a diff from nathanael at polymorpheous dot com.

ok moritz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.8 2005/05/28 01:07:52 ho Exp $	*/
d49 1
d62 1
d76 1
d98 13
d117 1
d141 2
@


1.8
log
@Optionally prevent syncing failover node-node SA/SPD info (master side).
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.7 2005/05/26 19:19:51 ho Exp $	*/
d49 1
a49 1
	int		 carp_check_interval;
d55 2
d99 6
a104 2
void	carp_check_state(void);
int	carp_init(void);
@


1.7
log
@add a 'flushmode' to control how the master handles FLUSH to slaves. tweak some loglevels.
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.6 2005/05/24 19:18:11 ho Exp $	*/
a37 3
enum FLUSHMODE		{ FM_STARTUP = 0, FM_NEVER, FM_SYNC };
#define FLUSHMODES	{ "STARTUP", "NEVER", "SYNC" };

d46 1
a46 1
    	enum FLUSHMODE	 flushmode;
d61 9
@


1.6
log
@cleanup parser, permit more than one listener
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.5 2005/05/24 02:35:39 ho Exp $	*/
d38 3
d49 1
d95 10
@


1.5
log
@When peers connect, have the master daemon look at in-kernel SAs and feed
these to the new peer. Adds privsep as fetching SADB and SPD kernel data
requires privileges.
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.4 2005/05/22 20:35:48 ho Exp $	*/
d56 1
@


1.4
log
@No more SSL between peers, instead do shared key AES & SHA
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.3 2005/05/22 12:14:16 ho Exp $	*/
d94 6
d101 1
@


1.3
log
@style nits
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.2 2005/04/03 17:19:26 ho Exp $	*/
a49 4
	char		*cafile;
	char		*certfile;
	char		*privkeyfile;

d66 1
a66 5

#define SASYNCD_DEFAULT_PORT	501
#define SASYNCD_CAFILE		"/etc/ssl/ca.crt"
#define SASYNCD_CERTFILE	"/etc/ssl/sasyncd.crt"
#define SASYNCD_PRIVKEY		"/etc/ssl/private/sasyncd.key"
d98 1
a98 2
int	net_queue(struct syncpeer *, u_int32_t, u_int8_t *, u_int32_t,
    u_int32_t);
@


1.2
log
@yacc parser
@
text
@d1 1
a1 1
/*	$OpenBSD: sasyncd.h,v 1.1 2005/03/30 18:44:49 ho Exp $	*/
a64 1
extern char		*__progname;
@


1.1
log
@Move sasyncd(8), for IPsec SA synchronization, in-tree. Work in progress.
deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 2
@

