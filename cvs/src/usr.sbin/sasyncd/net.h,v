head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.44
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.42
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.38
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.40
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.32
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2006.06.02.20.09.43;	author mcbride;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.27.20.47.11;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.23.19.53.27;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.22.20.35.48;	author ho;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.30.18.44.49;	author ho;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Make sasyncd fail back correctly with carp preemption enabled.

Hold the carp demotion when booting, to prevent carp from preempting until
we've sync'd with our peers.  This adds a new CTL_ENDSNAP message to the
exchange between the sasync daemons to indicate when the complete snapshot
has been sent. Undemote after 60 seconds, or when recieve a CTL_ENDSNAP from
all our peers.

Syntax is slightly changed, removing the 'carp' keyword (so do
"interface carp0" rather than "carp interface carp0". Adds 'group <ifgroup>',
defaults to the 'carp' group.

ok moritz@@
@
text
@/*	$OpenBSD: net.h,v 1.4 2005/05/27 20:47:11 ho Exp $	*/

/*
 * Copyright (c) 2005 Håkan Olsson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This code was written under funding by Multicom Security AB.
 */


struct qmsg;
struct syncpeer {
	LIST_ENTRY(syncpeer)	link;

	char		*name;		/* FQDN or an IP, from conf */
	struct sockaddr	*sa;
	int		 socket;
	enum RUNSTATE	 runstate;

	SIMPLEQ_HEAD(, qmsg)	msgs;
};

/* Control message types. */
enum CTLTYPE { RESERVED = 0, CTL_STATE, CTL_ERROR, CTL_ACK,
    CTL_ENDSNAP, CTL_UNKNOWN };
#define CTLTYPES { \
	"RESERVED", "CTL_STATE", "CTL_ERROR", "CTL_ACK", \
	"CTL_ENDSNAP", "CTL_UNKNOWN" \
};

/* net.c */
void	net_connect(void);
void	net_disconnect_peer(struct syncpeer *);

/* net_ctl.c */
void	net_ctl_handle_msg(struct syncpeer *, u_int8_t *, u_int32_t);
int	net_ctl_send_ack(struct syncpeer *, enum CTLTYPE, u_int32_t);
int	net_ctl_send_error(struct syncpeer *, enum CTLTYPE);
int	net_ctl_send_endsnap(struct syncpeer *);
int	net_ctl_send_state(struct syncpeer *);

@


1.4
log
@Keep sockaddr in syncpeer struct.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.3 2005/05/23 19:53:27 ho Exp $	*/
d46 2
a47 1
enum CTLTYPE { RESERVED = 0, CTL_STATE, CTL_ERROR, CTL_ACK, CTL_UNKNOWN };
d49 2
a50 1
	"RESERVED", "CTL_STATE", "CTL_ERROR", "CTL_ACK", "CTL_UNKNOWN" \
d61 1
@


1.3
log
@Various logging fixes, handle peer disconnects better.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.2 2005/05/22 20:35:48 ho Exp $	*/
d38 1
@


1.2
log
@No more SSL between peers, instead do shared key AES & SHA
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.1 2005/03/30 18:44:49 ho Exp $	*/
d51 1
a51 1
void	net_connect_peers(void);
@


1.1
log
@Move sasyncd(8), for IPsec SA synchronization, in-tree. Work in progress.
deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a32 2
#include <openssl/ssl.h>

a37 1
	SSL		*ssl;
a59 7
/* net_ssl.c */
int	net_SSL_init(void);
int	net_SSL_connect(struct syncpeer *);
void	net_SSL_disconnect(struct syncpeer *);
int	net_SSL_read(struct syncpeer *, void *, u_int32_t);
int	net_SSL_write(struct syncpeer *, void *, u_int32_t);
void	net_SSL_shutdown(void);
@

