head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.34
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.24
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.28
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.26
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.07.12.06.09.59;	author florian;	state Exp;
branches;
next	1.3;
commitid	1VXaY3xBtDQpme2A;

1.3
date	2017.03.21.12.06.56;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	6uuBMurt3Uh42fgX;

1.2
date	2017.01.20.23.29.58;	author benno;	state Exp;
branches;
next	1.1;
commitid	3AqljMRVX8SdKyh7;

1.1
date	2008.04.21.20.40.55;	author rainer;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bring over fatal{,x} from bgpd so that we can have format strings.
OK benno
@
text
@/*	$OpenBSD: log.c,v 1.3 2017/03/21 12:06:56 bluhm Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>

#include "log.h"

int		 debug;
int		 verbose;
const char	*log_procname;

void
log_init(int n_debug)
{
	extern char	*__progname;

	debug = n_debug;

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);

	tzset();
}

void
log_verbose(int v)
{
	verbose = v;
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char	*nfmt;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);
}

void
log_warn(const char *emsg, ...)
{
	char	*nfmt;
	va_list	 ap;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_ERR, "%s", strerror(errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
			/* we tried it... */
			vlog(LOG_ERR, emsg, ap);
			logit(LOG_ERR, "%s", strerror(errno));
		} else {
			vlog(LOG_ERR, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}
}

void
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_ERR, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	if (verbose) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

static void
vfatalc(int code, const char *emsg, va_list ap)
{
	static char	s[BUFSIZ];
	const char	*sep;

	if (emsg != NULL) {
		(void)vsnprintf(s, sizeof(s), emsg, ap);
		sep = ": ";
	} else {
		s[0] = '\0';
		sep = "";
	}
	if (code)
		logit(LOG_CRIT, "fatal in %s: %s%s%s",
		    log_procname, s, sep, strerror(code));
	else
		logit(LOG_CRIT, "fatal in %s%s%s", log_procname, sep, s);
}

void
fatal(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(errno, emsg, ap);
	va_end(ap);
	exit(1);
}

void
fatalx(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(0, emsg, ap);
	va_end(ap);
	exit(1);
}
@


1.3
log
@From a syslog perspective it does not make sense to log fatal and
warn with the same severity.  Switch log_warn() to LOG_ERR and keep
fatal() at LOG_CRIT.
OK reyk@@ florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2017/01/20 23:29:58 benno Exp $ */
d138 20
d159 1
a159 1
fatal(const char *emsg)
d161 1
a161 10
	if (emsg == NULL)
		logit(LOG_CRIT, "fatal in %s: %s", log_procname,
		    strerror(errno));
	else
		if (errno)
			logit(LOG_CRIT, "fatal in %s: %s: %s",
			    log_procname, emsg, strerror(errno));
		else
			logit(LOG_CRIT, "fatal in %s: %s",
			    log_procname, emsg);
d163 3
d170 1
a170 1
fatalx(const char *emsg)
d172 6
a177 2
	errno = 0;
	fatal(emsg);
@


1.2
log
@work on making log.c similar in all daemons:
reduce the (mostly whitespace) differences so that log.c's can be
diffed easily.
need to set verbose in main() when option -d is used.

ok florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.9 2016/09/02 14:02:48 benno Exp $ */
d90 1
a90 1
		logit(LOG_CRIT, "%s", strerror(errno));
d96 2
a97 2
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(errno));
d99 1
a99 1
			vlog(LOG_CRIT, nfmt, ap);
d112 1
a112 1
	vlog(LOG_CRIT, emsg, ap);
@


1.1
log
@Clean up logging by introducing the logging API used in
other daemons and clean up the command line options.
For details, see rtadvd(8).

ok bluhm@@, pyr@@
@
text
@d1 2
a18 1
#include <err.h>
a19 1
#include <netdb.h>
d30 3
a32 4
int	debug;

void	logit(int, const char *, ...);
void	vlog(int pri, const char *fmt, va_list ap);
d48 6
d88 1
a93 1
		/* best effort to even work in out of memory situations */
d131 1
a131 1
	if (debug) {
a140 2
	extern char	*__progname;

d142 1
a142 1
		logit(LOG_CRIT, "fatal in %s: %s", __progname,
d147 1
a147 1
			    __progname, emsg, strerror(errno));
d150 1
a150 1
			    __progname, emsg);
@

