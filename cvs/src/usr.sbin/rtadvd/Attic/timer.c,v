head	1.17;
access;
symbols
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.12
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.10
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.6
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.24
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.22
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.20
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.18
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.16
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	kame_19991211:1.1.1.1
	KAME:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.08.02.17.00.09;	author jca;	state dead;
branches;
next	1.16;
commitid	LwUwsYotrzF8sP65;

1.16
date	2016.03.01.20.51.05;	author jca;	state Exp;
branches;
next	1.15;
commitid	odaF3eMKay0HIw4l;

1.15
date	2016.02.08.23.19.00;	author jca;	state Exp;
branches;
next	1.14;
commitid	731eoDfUV7AoJwjq;

1.14
date	2015.10.25.22.11.34;	author jca;	state Exp;
branches;
next	1.13;
commitid	fhTQouZIvPQVwdr9;

1.13
date	2014.11.02.02.45.46;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	eMxp09Yb9R96zrxs;

1.12
date	2014.07.04.22.39.31;	author guenther;	state Exp;
branches;
next	1.11;
commitid	uZtmgjqfBmgQ2HY0;

1.11
date	2013.04.30.12.30.40;	author florian;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.22.10.16.23;	author okan;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.21.20.40.55;	author rainer;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.10.19.57.35;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.29.14.34.05;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.21.23.29.46;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.28.08;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.06.10.14.49;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.23.11.23.24;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.12.11.10.33.30;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.11.10.23.23;	author itojun;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.12.11.10.23.23;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Move to libevent; ok florian@@
@
text
@/*	$OpenBSD: timer.c,v 1.16 2016/03/01 20:51:05 jca Exp $	*/
/*	$KAME: timer.c,v 1.7 2002/05/21 14:26:55 itojun Exp $	*/

/*
 * Copyright (C) 1998 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/queue.h>
#include <sys/time.h>

#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include "timer.h"
#include "log.h"

SLIST_HEAD(, rtadvd_timer) timer_head = SLIST_HEAD_INITIALIZER(timer_head);

struct rtadvd_timer *
rtadvd_add_timer(void (*timeout)(void *),
		void (*update)(void *, struct timeval *),
		 void *timeodata, void *updatedata)
{
	struct rtadvd_timer *newtimer;

	if ((newtimer = calloc(1, sizeof(*newtimer))) == NULL)
		fatal(NULL);

	if (timeout == NULL)
		fatalx("timeout function unspecified");
	if (update == NULL)
		fatalx("update function unspecified");
	newtimer->expire = timeout;
	newtimer->update = update;
	newtimer->expire_data = timeodata;
	newtimer->update_data = updatedata;

	/* link into chain */
	SLIST_INSERT_HEAD(&timer_head, newtimer, entries);

	return(newtimer);
}

void
rtadvd_remove_timer(struct rtadvd_timer **timer)
{
	SLIST_REMOVE(&timer_head, *timer, rtadvd_timer, entries);
	free(*timer);
	*timer = NULL;
}

void
rtadvd_set_timer(struct timeval *tm, struct rtadvd_timer *timer)
{
	struct timeval now;

	/* reset the timer */
	gettimeofday(&now, NULL);

	timeradd(&now, tm, &timer->tm);
}

/*
 * Check expiration for each timer. If a timer is expired,
 * call the expire function for the timer and update the timer.
 * Return the next interval.
 */
struct timeval *
rtadvd_check_timer(void)
{
	static struct timeval returnval;
	struct timeval now;
	struct rtadvd_timer *tm;
	int timers;

	timers = 0;
	gettimeofday(&now, NULL);

	SLIST_FOREACH(tm, &timer_head, entries) {
		if (timercmp(&tm->tm, &now, <=)) {
			(*tm->expire)(tm->expire_data);
			(*tm->update)(tm->update_data, &tm->tm);
			timeradd(&tm->tm, &now, &tm->tm);
		}
		if (timers == 0 || timercmp(&tm->tm, &returnval, <))
			returnval = tm->tm;
		timers ++;
	}

	if (timers == 0) {
		/* no need to timeout */
		return(NULL);
	} else if (timercmp(&returnval, &now, <)) {
		/* this may occur when the interval is too small */
		timerclear(&returnval);
	} else
		timersub(&returnval, &now, &returnval);
	return(&returnval);
}

struct timeval *
rtadvd_timer_rest(struct rtadvd_timer *timer)
{
	static struct timeval returnval, now;

	gettimeofday(&now, NULL);
	if (timercmp(&timer->tm, &now, <=)) {
		log_debug("a timer must be expired, but not yet");
		timerclear(&returnval);
	}
	else
		timersub(&timer->tm, &now, &returnval);

	return(&returnval);
}
@


1.16
log
@fatal("malloc") -> fatal(NULL)
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.15 2016/02/08 23:19:00 jca Exp $	*/
@


1.15
log
@Kill trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.14 2015/10/25 22:11:34 jca Exp $	*/
d52 1
a52 1
		fatal("calloc");
@


1.14
log
@ansify
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.13 2014/11/02 02:45:46 deraadt Exp $	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
@


1.13
log
@make comment select() vs poll() agnostic
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.12 2014/07/04 22:39:31 guenther Exp $	*/
d94 1
a94 1
rtadvd_check_timer()
@


1.12
log
@malloc+memset -> calloc

from Benjamin Baier (programmer (at) netzbasis.de)
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.11 2013/04/30 12:30:40 florian Exp $	*/
d91 1
a91 1
 * Return the next interval for select() call.
@


1.11
log
@- replace TIMEVAL_* function/macros with macros from sys/time.h
- replace insque(3) with SLIST from queue(3)
- with that, rewrite rtadvd_check_timer() logic to avoid
  timeval {0x7fffffff, 0x7fffffff}

test/ok sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.10 2011/03/22 10:16:23 okan Exp $	*/
d51 2
a52 4
	if ((newtimer = malloc(sizeof(*newtimer))) == NULL)
		fatal("malloc");

	memset(newtimer, 0, sizeof(*newtimer));
@


1.10
log
@use timerclear macro

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.9 2008/04/21 20:40:55 rainer Exp $	*/
d33 1
a38 1
#include <search.h>
d42 1
a42 16
static struct rtadvd_timer timer_head;

#define MILLION 1000000
#define TIMEVAL_EQUAL(t1,t2) ((t1)->tv_sec == (t2)->tv_sec &&\
 (t1)->tv_usec == (t2)->tv_usec)

static struct timeval tm_max = {0x7fffffff, 0x7fffffff};

void
rtadvd_timer_init()
{
	memset(&timer_head, 0, sizeof(timer_head));

	timer_head.next = timer_head.prev = &timer_head;
	timer_head.tm = tm_max;
}
a63 1
	newtimer->tm = tm_max;
d66 1
a66 1
	insque(newtimer, &timer_head);
d74 1
a74 1
	remque(*timer);
d87 1
a87 7
	TIMEVAL_ADD(&now, tm, &timer->tm);

	/* update the next expiration time */
	if (TIMEVAL_LT(timer->tm, timer_head.tm))
		timer_head.tm = timer->tm;

	return;
d100 2
a101 1
	struct rtadvd_timer *tm = timer_head.next;
d103 1
d106 2
a107 4
	timer_head.tm = tm_max;

	while (tm != &timer_head) {
		if (TIMEVAL_LEQ(tm->tm, now)) {
d110 1
a110 1
			TIMEVAL_ADD(&tm->tm, &now, &tm->tm);
d112 3
a114 5

		if (TIMEVAL_LT(tm->tm, timer_head.tm))
			timer_head.tm = tm->tm;

		tm = tm->next;
d117 1
a117 1
	if (TIMEVAL_EQUAL(&tm_max, &timer_head.tm)) {
d120 1
a120 1
	} else if (TIMEVAL_LT(timer_head.tm, now)) {
d124 1
a124 1
		TIMEVAL_SUB(&timer_head.tm, &now, &returnval);
d134 1
a134 1
	if (TIMEVAL_LEQ(timer->tm, now)) {
d139 1
a139 1
		TIMEVAL_SUB(&timer->tm, &now, &returnval);
a141 35
}

/* result = a + b */
void
TIMEVAL_ADD(struct timeval *a, struct timeval *b, struct timeval *result)
{
	long l;

	if ((l = a->tv_usec + b->tv_usec) < MILLION) {
		result->tv_usec = l;
		result->tv_sec = a->tv_sec + b->tv_sec;
	}
	else {
		result->tv_usec = l - MILLION;
		result->tv_sec = a->tv_sec + b->tv_sec + 1;
	}
}

/*
 * result = a - b
 * XXX: this function assumes that a >= b.
 */
void
TIMEVAL_SUB(struct timeval *a, struct timeval *b, struct timeval *result)
{
	long l;

	if ((l = a->tv_usec - b->tv_usec) >= 0) {
		result->tv_usec = l;
		result->tv_sec = a->tv_sec - b->tv_sec;
	}
	else {
		result->tv_usec = MILLION + l;
		result->tv_sec = a->tv_sec - b->tv_sec - 1;
	}
@


1.9
log
@Clean up logging by introducing the logging API used in
other daemons and clean up the command line options.
For details, see rtadvd(8).

ok bluhm@@, pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.8 2002/06/10 19:57:35 espie Exp $	*/
d146 1
a146 1
		returnval.tv_sec = returnval.tv_usec = 0;
d160 1
a160 1
		returnval.tv_sec = returnval.tv_usec = 0;
@


1.8
log
@Kill __FUNCTION__.
ok itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.7 2002/05/29 14:34:05 itojun Exp $	*/
a35 1
#include <syslog.h>
d40 1
d66 2
a67 5
	if ((newtimer = malloc(sizeof(*newtimer))) == NULL) {
		syslog(LOG_ERR,
		       "<%s> can't allocate memory", __func__);
		exit(1);
	}
d71 4
a74 10
	if (timeout == NULL) {
		syslog(LOG_ERR,
		       "<%s> timeout function unspecified", __func__);
		exit(1);
	}
	if (update == NULL) {
		syslog(LOG_ERR,
		       "<%s> update function unspecified", __func__);
		exit(1);
	}
d159 1
a159 3
		syslog(LOG_DEBUG,
		       "<%s> a timer must be expired, but not yet",
		       __func__);
@


1.7
log
@KNF, strlcpy, cleanups from kame
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.6 2002/05/21 23:29:46 itojun Exp $	*/
d68 1
a68 1
		       "<%s> can't allocate memory", __FUNCTION__);
d76 1
a76 1
		       "<%s> timeout function unspecified", __FUNCTION__);
d81 1
a81 1
		       "<%s> update function unspecified", __FUNCTION__);
d170 1
a170 1
		       __FUNCTION__);
@


1.6
log
@minor KNF.  plug a memory leak on reconfig.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.5 2002/02/16 21:28:08 millert Exp $	*/
a38 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
a39 1
#endif
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.4 2000/07/06 10:14:49 itojun Exp $	*/
/*	$KAME: timer.c,v 1.4 2000/05/27 11:30:43 jinmei Exp $	*/
d48 1
a48 1
 (t1)->tv_usec == (t2)->tv_usec) 
d78 1
a78 1
		       "<%s> timeout function unspecfied", __FUNCTION__);
d83 1
a83 1
		       "<%s> update function unspecfied", __FUNCTION__);
d139 1
a139 1
	while(tm != &timer_head) {
d155 1
a155 2
	}
	else if (TIMEVAL_LT(timer_head.tm, now)) {
d158 1
a158 2
	}
	else
@


1.4
log
@sync with router renumber struct decl change.
more logs.  make it very sure to close temporary socket.
@
text
@d1 1
a1 1
/*	$OpenBSD: timer.c,v 1.3 2000/05/23 11:23:24 itojun Exp $	*/
d62 2
a63 2
rtadvd_add_timer(void (*timeout) __P((void *)),
		void (*update) __P((void *, struct timeval *)),
@


1.3
log
@sync with latest kame.
- weaken logging priority for /etc/resolv.conf open failure
- gather stats, emit stats by SIGUSR1
- use SIOCGIFMTU to get interface MTU (just a matter of #ifdef)
From: "Todd T. Fries" <todd@@fries.net>
@
text
@d1 2
a2 2
/*	$OpenBSD: timer.c,v 1.2 1999/12/11 10:33:30 itojun Exp $	*/
/*	$KAME: timer.c,v 1.2 2000/05/16 13:34:14 itojun Exp $	*/
d47 2
d99 8
d152 5
a156 1
	if (TIMEVAL_LT(timer_head.tm, now)) {
@


1.2
log
@enable rtadvd in usr.sbin/Makefile.
rcsid police on usr.sbin/rtadvd.
add sample config into etc/rtadvd.conf.
add files into distrib/sets/list.
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d39 1
a39 1
#ifdef __NetBSD__
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@router advertisement daemon, from KAME
@
text
@@
