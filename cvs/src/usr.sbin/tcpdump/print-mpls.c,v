head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.16
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.16
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.18
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.14
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.12
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.10
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.8
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.07.11.00.27.50;	author rzalamena;	state Exp;
branches;
next	1.2;
commitid	Sa8Q2I2tgAFG9H6l;

1.2
date	2010.06.30.19.01.06;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.08.19.45.15;	author canacar;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Teach tcpdump to recognize MPLS pseudowire with control words. Added
support to print encapsulated ethernet packets as well.

"Looks good" deraadt@@
@
text
@/*	$OpenBSD: print-mpls.c,v 1.2 2010/06/30 19:01:06 claudio Exp $	*/

/*
 * Copyright (c) 2005 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/socket.h>
#include <sys/types.h>
#include <netmpls/mpls.h>

#include <stdio.h>

#include "interface.h"
#include "extract.h"		    /* must come after interface.h */

#define CW_SEQUENCE_MASK       (0x0000ffffU)

int controlword_tryprint(const u_char **, u_int *);

void
mpls_print(const u_char *bp, u_int len)
{
	u_int32_t tag, label, exp, bottom, ttl;
	int has_cw;

 again:
	if (bp + sizeof(tag) > snapend)
		goto trunc;

	tag = EXTRACT_32BITS(bp);
	bp += sizeof(tag);
	len -= sizeof(tag);

	label = (tag >> 12) & 0xfffff;
	exp = (tag >> 9) & 0x7;
	bottom = (tag >> 8) & 0x1;
	ttl = (tag >> 0) & 0xff;

	printf("MPLS(label %u, exp %u, ttl %u) ", label, exp, ttl);

	/* XXX decode "Router Alert Label" */

	if (!bottom)
		goto again;

	/* Handle pseudowire control word. */
	has_cw = controlword_tryprint(&bp, &len);

	/*
	 * guessing the underlying protocol is about all we can do if
	 * it's not explicitly defined.
	 */

	switch (label) {
	case 0x00000:			/* IPv4 Explicit NULL */
		ip_print(bp, len);
		break;
	case 0x00001:			/* Router Alert */
		/* shouldn't happen at stack bottom */
		printf("Route-Alert");
		break;
	case 0x00002:			/* IPv6 Explicit NULL */
		ip6_print(bp, len);
		break;
	case 0x00003:			/* Implicit NULL */
		/* shouldn't happen in the tag stack */
		printf("Implicit-NULL");
		break;

	case 0x00004:			/* reserved labels */
	case 0x00005:
	case 0x00006:
	case 0x00007:
	case 0x00008:
	case 0x00009:
	case 0x0000a:
	case 0x0000b:
	case 0x0000c:
	case 0x0000d:
	case 0x0000e:
	case 0x0000f:
		break;

	default:			/* dunno, guess? */
		if (len == 0)
			break;
		if (bp >= snapend)
			goto trunc;

		switch (bp[0] & 0xf0) {
		case 0x40:
			ip_print(bp, len);
			break;
		case 0x60:
			ip6_print(bp, len);
			break;
		}
	}

	if (has_cw)
		ether_tryprint(bp, len, 0);

	return;
trunc:
	printf("[|mpls]");
}

/* Print control word if any and returns 1 on success. */
int
controlword_tryprint(const u_char **bp, u_int *lenp)
{
	uint32_t cw, frag, seq;

	if (*lenp < 4)
		return (0);

	cw = EXTRACT_32BITS(*bp);
	if (cw & CW_ZERO_MASK)
		return (0);

	*bp += sizeof(cw);
	*lenp += sizeof(cw);

	frag = (cw & CW_FRAG_MASK) >> 16;
	seq = cw & CW_SEQUENCE_MASK;

	printf("CW(frag %u, sequence %u) ", frag, seq);

	return (1);
}
@


1.2
log
@Print MPLS label as decimal and not hex. All other places we print MPLS
labels we use decimal.
OK jsg@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-mpls.c,v 1.1 2005/10/08 19:45:15 canacar Exp $	*/
d29 4
d38 4
d46 1
d68 3
d122 3
d128 24
@


1.1
log
@Add a best effort mpls decoder. From Jason L. Wright.
Since the encapsulated protocol information is not always
available in the MPLS tag stack. The decoder attempts
to guess the protocol.
ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
	printf("MPLS(label 0x%x, exp %u, ttl %u) ", label, exp, ttl);
@

