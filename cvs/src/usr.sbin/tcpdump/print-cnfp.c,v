head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.10
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.30
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.22
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.26
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.24
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2015.11.15.20.35.36;	author mmcc;	state Exp;
branches;
next	1.8;
commitid	kFQYMPTA5NvE3RXS;

1.8
date	2008.10.22.10.05.55;	author gollo;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.29.10.42.25;	author canacar;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.28.19.44.55;	author canacar;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.20.37.14;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.06.03.11.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.03.14.21.56;	author ho;	state Exp;
branches;
next	1.2;

1.2
date	98.06.25.20.26.59;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.25.19.42.46;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove more register keywords.

ok daniel@@, discussed on hackers@@
@
text
@/*	$OpenBSD: print-cnfp.c,v 1.8 2008/10/22 10:05:55 gollo Exp $	*/

/*
 * Copyright (c) 1998 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Cisco NetFlow protocol */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <netdb.h>

#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

#include <stdio.h>
#include <string.h>

#include "interface.h"
#include "addrtoname.h"

struct nfhdr {
	u_int32_t	ver_cnt;	/* version [15], and # of records */
	u_int32_t	msys_uptime;
	u_int32_t	utc_sec;
	u_int32_t	utc_nsec;
	u_int32_t	sequence;	/* v5 flow sequence number */
	u_int32_t	reserved;	/* v5 only */
};

struct nfrec {
	struct in_addr  src_ina;
	struct in_addr  dst_ina;
	struct in_addr  nhop_ina;
	u_int32_t	ifaces;		/* src,dst ifaces */
	u_int32_t	packets;
	u_int32_t	octets;
	u_int32_t	start_time;	/* sys_uptime value */
	u_int32_t	last_time;	/* sys_uptime value */
	u_int32_t	ports;		/* src,dst ports */
	u_int32_t	proto_tos;	/* proto, tos, pad, flags(v5) */
	u_int32_t	asses;		/* v1: flags; v5: src,dst AS */
	u_int32_t	masks;		/* src,dst addr prefix */

};

void
cnfp_print(const u_char *cp, u_int len, const u_char *bp)
{
	const struct nfhdr *nh;
	const struct nfrec *nr;
	const struct ip *ip;
	int nrecs, ver, proto;
	time_t t;

	ip = (struct ip *)bp;
	nh = (struct nfhdr *)cp;

	if ((u_char *)(nh + 1) > snapend)
		return;

	nrecs = ntohl(nh->ver_cnt) & 0xffff;
	ver = (ntohl(nh->ver_cnt) & 0xffff0000) >> 16;
	t = ntohl(nh->utc_sec);
/*	(p = ctime(&t))[24] = '\0'; */

	printf("NetFlow v%x, %u.%03u uptime, %u.%09u, ", ver,
	       ntohl(nh->msys_uptime)/1000, ntohl(nh->msys_uptime)%1000,
	       ntohl(nh->utc_sec), ntohl(nh->utc_nsec));

	if (ver == 5) {
		printf("#%u, ", htonl(nh->sequence));
		nr = (struct nfrec *)&nh[1];
	} else
		nr = (struct nfrec *)&nh->sequence;

	printf("%2u recs", nrecs);

	for (; nrecs-- && (u_char *)(nr + 1) <= snapend; nr++) {
		char buf[5];
		char asbuf[7];

		printf("\n  started %u.%03u, last %u.%03u",
			ntohl(nr->start_time)/1000, ntohl(nr->start_time)%1000,
			ntohl(nr->last_time)/1000, ntohl(nr->last_time)%1000);

		asbuf[0] = buf[0] = '\0';
		if (ver == 5) {
			snprintf(buf, sizeof buf, "/%d",
			    (ntohl(nr->masks) >> 24) & 0xff);
			snprintf(asbuf, sizeof asbuf, ":%d",
			    (ntohl(nr->asses) >> 16) & 0xffff);
		}
		printf("\n    %s%s%s:%u ", inet_ntoa(nr->src_ina), buf, asbuf,
			ntohl(nr->ports) >> 16);

		if (ver == 5) {
			snprintf(buf, sizeof buf, "/%d",
			    (ntohl(nr->masks) >> 16) & 0xff);
			snprintf(asbuf, sizeof asbuf, ":%d",
			    ntohl(nr->asses) & 0xffff);
		}
		printf("> %s%s%s:%u ", inet_ntoa(nr->dst_ina), buf, asbuf,
			ntohl(nr->ports) & 0xffff);

		printf(">> %s\n    ", inet_ntoa(nr->nhop_ina));

		proto = (ntohl(nr->proto_tos) >> 8) & 0xff;
		printf("%s ", ipproto_string(proto));

		/* tcp flags for tcp only */
		if (proto == IPPROTO_TCP) {
			int flags;
			if (ver == 1)
				flags = (ntohl(nr->asses) >> 24) & 0xff;
			else
				flags = (ntohl(nr->proto_tos) >> 16) & 0xff;
			if (flags & TH_FIN)	putchar('F');
			if (flags & TH_SYN)	putchar('S');
			if (flags & TH_RST)	putchar('R');
			if (flags & TH_PUSH)	putchar('P');
			if (flags & TH_ACK)	putchar('A');
			if (flags & TH_URG)	putchar('U');
			if (flags)
				putchar(' ');
		}
		printf("tos %u, %u (%u octets)", ntohl(nr->proto_tos) & 0xff,
			ntohl(nr->packets), ntohl(nr->octets));


	}

}

@


1.8
log
@fix format of AS number output

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.7 2007/05/29 10:42:25 canacar Exp $	*/
d71 1
a71 1
cnfp_print(register const u_char *cp, u_int len, register const u_char *bp)
d73 3
a75 3
	register const struct nfhdr *nh;
	register const struct nfrec *nr;
	register const struct ip *ip;
@


1.7
log
@Do not change snaplen when parsing a netflow packet
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.6 2004/01/28 19:44:55 canacar Exp $	*/
d114 1
a114 1
			snprintf(asbuf, sizeof asbuf, "%d:",
d123 1
a123 1
			snprintf(asbuf, sizeof asbuf, "%d:",
@


1.6
log
@privilege separated tcpdump, joint work with otto@@

tested by avsm@@ vincent@@ dhartmei@@ markus@@ hshoexer@@ and others
go for it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.5 2003/06/02 20:37:14 mickey Exp $	*/
d97 1
a97 2
		snaplen -= 24;
	} else {
a98 2
		snaplen -= 16;
	}
@


1.5
log
@three four kill ...
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.4 2001/11/06 03:11:40 deraadt Exp $	*/
d43 1
d76 1
a76 2
	struct protoent *pent;
	int nrecs, ver;
d134 2
a135 5
		pent = getprotobynumber((ntohl(nr->proto_tos) >> 8) & 0xff);
		if (!pent || nflag)
			printf("%u ", (ntohl(nr->proto_tos) >> 8) & 0xff);
		else
			printf("%s ", pent->p_name);
d138 1
a138 1
		if (pent && pent->p_proto == IPPROTO_TCP) {
@


1.4
log
@a bit of snprintf cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.3 2000/10/03 14:21:56 ho Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.3
log
@Compile with -Wall. Add $OpenBSD$. (jakob@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.2 1998/06/25 20:26:59 mickey Exp $	*/
d120 4
a123 2
			sprintf(buf, "/%d", (ntohl(nr->masks) >> 24) & 0xff);
			sprintf(asbuf, "%d:", (ntohl(nr->asses) >> 16) & 0xffff);
d129 4
a132 2
			sprintf(buf, "/%d", (ntohl(nr->masks) >> 16) & 0xff);
			sprintf(asbuf, "%d:", ntohl(nr->asses) & 0xffff);
@


1.2
log
@check the amount of data we've got
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cnfp.c,v 1.1 1998/06/25 19:42:46 mickey Exp $	*/
d42 1
d59 3
a61 3
	in_addr_t	src_ina;
	in_addr_t	dst_ina;
	in_addr_t	nhop_ina;
a82 1
	char *p;
@


1.1
log
@add cisco netflow proto printing; not tested w/ version 5, but should work anyways
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 3
d102 2
a103 1
	} else
d105 4
d110 1
a110 2
	printf("%2u recs:", nrecs);
	for (; nrecs--; nr++) {
@

