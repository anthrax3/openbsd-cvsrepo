head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.8
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.6
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.22
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.20
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.14
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.12
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.10
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.13.0.8
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.6
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.4
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2015.11.16.00.16.39;	author mmcc;	state Exp;
branches;
next	1.19;
commitid	enjTsnD5UO6xazKc;

1.19
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.29.17.38.46;	author moritz;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.28.21.20.16;	author moritz;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.20.08.30.40;	author pascoe;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.25.19.56.11;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.08.22.45.53;	author jakob;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.07.22.36.45;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.19.16.31.42;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.03.14.31.57;	author ho;	state Exp;
branches;
next	1.8;

1.8
date	99.09.16.20.58.47;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	99.02.12.05.34.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.07.23.02.59.02;	author denny;	state Exp;
branches;
next	1.5;

1.5
date	96.12.12.16.22.33;	author bitblt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.13.11.01.25;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.47.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.59.29;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove remaining instances of the register keyword.

ok deraadt@@
@
text
@/*	$OpenBSD: print-llc.c,v 1.19 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 1992, 1993, 1994, 1995, 1996, 1997
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Code by Matt Thomas, Digital Equipment Corporation
 *	with an awful lot of hacking by Jeffrey Mogul, DECWRL
 */

#include <sys/time.h>

#include <netinet/in.h>

#include <ctype.h>
#include <netdb.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>

#include "interface.h"
#include "addrtoname.h"
#include "extract.h"			/* must come after interface.h */
#include "ethertype.h"

#include "llc.h"

static struct tok cmd2str[] = {
	{ LLC_UI,	"ui" },
	{ LLC_TEST,	"test" },
	{ LLC_XID,	"xid" },
	{ LLC_UA,	"ua" },
	{ LLC_DISC,	"disc" },
	{ LLC_DM,	"dm" },
	{ LLC_SABME,	"sabme" },
	{ LLC_FRMR,	"frmr" },
	{ 0,		NULL }
};

/*
 * Returns non-zero IFF it succeeds in printing the header
 */
int
llc_print(const u_char *p, u_int length, u_int caplen,
	  const u_char *esrc, const u_char *edst)
{
	struct llc llc;
	u_short et;
#if 0
	u_short control;
#endif
	int ret;

	if (caplen < 3) {
		(void)printf("[|llc]");
		default_print((u_char *)p, caplen);
		return(0);
	}

	/* Watch out for possible alignment problems */
	memcpy((char *)&llc, (char *)p, min(caplen, sizeof(llc)));

	if (llc.ssap == LLCSAP_GLOBAL && llc.dsap == LLCSAP_GLOBAL) {
		ipx_print(p, length);
		return (1);
	}
#ifdef notyet
	else if (p[0] == 0xf0 && p[1] == 0xf0)
		netbios_print(p, length);
#endif
	if (llc.ssap == LLCSAP_ISONS && llc.dsap == LLCSAP_ISONS
	    && llc.llcui == LLC_UI) {
		isoclns_print(p + 3, length - 3, caplen - 3, esrc, edst);
		return (1);
	}

	if (llc.ssap == LLCSAP_SNAP && llc.dsap == LLCSAP_SNAP
	    && llc.llcui == LLC_UI) {
		if (caplen < sizeof(llc)) {
		    (void)printf("[|llc-snap]");
		    default_print((u_char *)p, caplen);
		    return (0);
		}

		/* Cisco Discovery Protocol  - SNAP & ether type 0x2000 */
		if (llc.ethertype[0] == 0x20 && llc.ethertype[1] == 0x00) {
			cdp_print(p, length, caplen, esrc, edst);
			return (1);
		}
		/* Shared Spanning Tree Protocol - SNAP & ether type 0x010b */
		if (llc.ethertype[0] == 0x01 && llc.ethertype[1] == 0x0b) {
			stp_print(p, length);
			return (1);
		}

		if (vflag)
			(void)printf("snap %s ", protoid_string(llc.llcpi));

		caplen -= sizeof(llc);
		length -= sizeof(llc);
		p += sizeof(llc);

		/* This is an encapsulated Ethernet packet */
		et = EXTRACT_16BITS(&llc.ethertype[0]);

		/*
		 * Some protocols have special handling if they are 802.3
		 * SNAP encapsulated vs vers II encapsulated. Handle
		 * those special protocols here, and hand the rest to
		 * print-ether.c so we don't have to duplicate
		 * all that code here.
		 */
		switch (et) {
		case ETHERTYPE_ATALK:
			atalk_print(p, length);
			ret = 1;
			break;
		default:
			ret = ether_encap_print(et, p, length, caplen);
			break;
		}

		if (ret)
			return (ret);
	}

	if (llc.ssap == LLCSAP_8021D && llc.dsap == LLCSAP_8021D) {
		stp_print(p, length);
		return (1);
	}

#if 0
	if (llc.ssap == 0xf0 && llc.dsap == 0xf0) {
		/*
		 * we don't actually have a full netbeui parser yet, but the
		 * smb parser can handle many smb-in-netbeui packets, which
		 * is very useful, so we call that
		 */

		/*
		 * Skip the DSAP and LSAP.
		 */
		p += 2;
		length -= 2;
		caplen -= 2;

		/*
		 * OK, what type of LLC frame is this?  The length
		 * of the control field depends on that - S or I
		 * frames have a two-byte control field, and U frames
		 * have a one-byte control field.
		 */
		if ((llc.llcu & LLC_U_FMT) == LLC_U_FMT) {
			control = llc.llcu;
			p += 1;
			length -= 1;
			caplen -= 1;
		} else {
			control = llc.llcis;
			p += 2;
			length -= 2;
			caplen -= 2;
		}

		netbeui_print(control, p, p + min(caplen, length));
		return (1);
	}
#endif

	if ((llc.ssap & ~LLC_GSAP) == llc.dsap) {
		if (eflag)
			(void)printf("%s ", llcsap_string(llc.dsap));
		else
			(void)printf("%s > %s %s ",
					etheraddr_string(esrc),
					etheraddr_string(edst),
					llcsap_string(llc.dsap));
	} else {
		if (eflag)
			(void)printf("%s > %s ",
				llcsap_string(llc.ssap & ~LLC_GSAP),
				llcsap_string(llc.dsap));
		else
			(void)printf("%s %s > %s %s ",
				etheraddr_string(esrc),
				llcsap_string(llc.ssap & ~LLC_GSAP),
				etheraddr_string(edst),
				llcsap_string(llc.dsap));
	}

	if ((llc.llcu & LLC_U_FMT) == LLC_U_FMT) {
		const char *m;
		char f;
		m = tok2str(cmd2str, "%02x", LLC_U_CMD(llc.llcu));
		switch ((llc.ssap & LLC_GSAP) | (llc.llcu & LLC_U_POLL)) {
		    case 0:			f = 'C'; break;
		    case LLC_GSAP:		f = 'R'; break;
		    case LLC_U_POLL:		f = 'P'; break;
		    case LLC_GSAP|LLC_U_POLL:	f = 'F'; break;
		    default:			f = '?'; break;
		}

		printf("%s/%c", m, f);

		if (caplen < 6) {
			default_print_unaligned(p, caplen);
			return (0);
		}
		p += 3;
		length -= 3;
		caplen -= 3;

		if ((llc.llcu & ~LLC_U_POLL) == LLC_XID) {
		    if (*p == LLC_XID_FI) {
			printf(": %02x %02x", p[1], p[2]);
			p += 3;
			length -= 3;
			caplen -= 3;
		    }
		}

#if 0
		if (!strcmp(m,"ui") && f=='C') {
			/*
			 * we don't have a proper ipx decoder yet, but there
			 * is a partial one in the smb code
			 */
			ipx_netbios_print(p,p+min(caplen,length));
		}
#endif

	} else {
		char f;
		if (caplen < 4) {
			default_print_unaligned(p, caplen);
			return (0);
		}
		llc.llcis = ntohs(llc.llcis);
		switch ((llc.ssap & LLC_GSAP) | (llc.llcu & LLC_U_POLL)) {
		    case 0:			f = 'C'; break;
		    case LLC_GSAP:		f = 'R'; break;
		    case LLC_U_POLL:		f = 'P'; break;
		    case LLC_GSAP|LLC_U_POLL:	f = 'F'; break;
		    default:			f = '?'; break;
		}

		if ((llc.llcu & LLC_S_FMT) == LLC_S_FMT) {
			static char *llc_s[] = { "rr", "rej", "rnr", "03" };
			(void)printf("%s (r=%d,%c)",
				llc_s[LLC_S_CMD(llc.llcis)],
				LLC_IS_NR(llc.llcis),
				f);
		} else {
			(void)printf("I (s=%d,r=%d,%c)",
				LLC_I_NS(llc.llcis),
				LLC_IS_NR(llc.llcis),
				f);
		}
		p += 4;
		length -= 4;
		caplen -= 4;
	}
	(void)printf(" len=%d", length);
	return(1);
}
@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.18 2009/10/27 23:59:55 deraadt Exp $	*/
d64 1
a64 1
	register u_short et;
d68 1
a68 1
	register int ret;
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.17 2007/10/07 16:41:05 deraadt Exp $	*/
a26 1
#include <sys/param.h>
@


1.17
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.16 2006/05/29 17:38:46 moritz Exp $	*/
a25 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.16
log
@Add proper bounds checks for the CDP and SSDP protocols by
grouping all LLCSAP_SNAP handling in one block. Also make
sure, that enough of "struct llc" was captured, before
accessing it.

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.15 2006/05/28 21:20:16 moritz Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.15 2006/05/28 21:20:16 moritz Exp $";
@


1.15
log
@Check that a complete struct llc was captured (not only 3 bytes),
because it is accessed later on.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.14 2004/12/20 08:30:40 pascoe Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.14 2004/12/20 08:30:40 pascoe Exp $";
d76 1
a76 1
	if (caplen < sizeof(struct llc)) {
a92 17

	/* Cisco Discovery Protocol  - SNAP & ether type 0x2000 */
	if(llc.ssap == LLCSAP_SNAP && llc.dsap == LLCSAP_SNAP &&
		llc.llcui == LLC_UI && 
		llc.ethertype[0] == 0x20 && llc.ethertype[1] == 0x00 ) {
		    cdp_print( p, length, caplen, esrc, edst);
		    return (1);
	}

	/* Shared Spanning Tree Protocol - SNAP & ether type 0x010b */
	if (llc.ssap == LLCSAP_SNAP && llc.dsap == LLCSAP_SNAP &&
	    llc.llcui == LLC_UI &&
	    llc.ethertype[0] == 0x01 && llc.ethertype[1] == 0x0b) {
		stp_print(p, length);
		return(1);
	}

d106 12
d256 4
@


1.14
log
@Add support for displaying Shared Spanning Tree Protocol frames, a minor
variation on 802.1d/STP.

ok otto@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.13 2001/06/25 19:56:11 itojun Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.13 2001/06/25 19:56:11 itojun Exp $";
d76 1
a76 1
	if (caplen < 3) {
@


1.13
log
@disable smb decoder, as there seems to be fewer bound checks than needed
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.12 2001/04/08 22:45:53 jakob Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.12 2001/04/08 22:45:53 jakob Exp $";
d100 8
@


1.12
log
@add support for printing cdp (Cisco Discovery Protocol), from tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.11 2000/12/07 22:36:45 mickey Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.11 2000/12/07 22:36:45 mickey Exp $";
d71 1
d73 1
d151 1
d187 1
d241 1
d249 1
@


1.11
log
@smb printing; from Andrew Tridgell; via tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.10 2000/10/19 16:31:42 jason Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.10 2000/10/19 16:31:42 jason Exp $";
d91 9
@


1.10
log
@code for printing bridge spanning tree packets
also fix a bug where llc encoded frames are hex dumped twice when -x is used
@
text
@d1 1
a1 1
/*	$OpenBSD: print-llc.c,v 1.9 2000/10/03 14:31:57 ho Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.9 2000/10/03 14:31:57 ho Exp $";
d71 1
d140 36
d227 9
@


1.9
log
@Add $OpenBSD$. (jakob@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.8 1999/09/16 20:58:47 brad Exp $";
d134 5
a217 3
	if (caplen > 0) {
		default_print_unaligned(p, caplen);
	}
@


1.8
log
@bring more inline with tcpdump 3.4
@
text
@d1 2
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.7 1999/02/12 05:34:53 deraadt Exp $";
@


1.7
log
@do not go past end of packet; abs@@netbsd
@
text
@d2 1
a2 1
 * Copyright (c) 1992, 1993, 1994, 1995, 1996
d27 1
a27 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-llc.c,v 1.6 1997/07/23 02:59:02 denny Exp $";
@


1.6
log
@Better handling for AppleTalk, and netatalk in particular.
Handle native Ethertalk phase 1 & 2 as well as the localtalk encapsulation a la Kinetics FastPath previously handled.
@
text
@d27 1
a27 1
    "@@(#) $Header: /usr/src/usr.sbin/tcpdump/RCS/print-llc.c,v 1.2 1997/07/20 17:16:38 denny Exp denny $";
d167 4
@


1.5
log
@*** empty log message ***
@
text
@d27 1
a27 1
    "@@(#) $Header: print-llc.c,v 1.22 96/12/10 23:23:37 leres Exp $";
d44 1
d110 18
a127 1
		ret = ether_encap_print(et, p, length, caplen);
@


1.4
log
@it is 3.2 now.
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1992, 1993, 1994, 1995
d20 1
a20 3
 */

/*
d26 2
a27 2
static  char rcsid[] =
	"@@(#)Header: print-llc.c,v 1.17 95/09/26 02:03:40 leres Exp";
a31 1
#include <sys/types.h>
d63 1
a63 1
llc_print(const u_char *p, int length, int caplen,
d108 1
a108 1
		et = EXTRACT_SHORT(&llc.ethertype[0]);
@


1.3
log
@sync to latest
@
text
@d1 1
a1 2
/**//*	$OpenBSD: print-llc.c,v 1.2 1995/03/06 19:11:19 mycroft Exp $	*/
/*	$NetBSD: print-llc.c,v 1.2 1995/03/06 19:11:19 mycroft Exp $	*/
d4 1
a4 1
 * Copyright (c) 1992, 1993, 1994
d31 1
a31 1
	"@@(#)Header: print-llc.c,v 1.13 94/06/14 20:18:45 leres Exp";
a40 1
#include <errno.h>
d44 1
d52 1
a52 1
static struct token cmd2str[] = {
d82 1
a82 1
	bcopy((char *)p, (char *)&llc, min(caplen, sizeof(llc)));
@


1.2
log
@Updating to the latest LBL release.
Sun's SKIP support added.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
