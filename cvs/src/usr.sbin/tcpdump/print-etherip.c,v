head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.10
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.8
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.9
date	2017.03.08.10.05.30;	author jca;	state Exp;
branches;
next	1.8;
commitid	5nFXiKeiy5DUQ6nf;

1.8
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2014.08.14.12.44.44;	author mpi;	state Exp;
branches;
next	1.6;
commitid	yLXrOcgrag4eS8u4;

1.6
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.17.18.39;	author moritz;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.29.18.05.22;	author moritz;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.03.00.21.04;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.05.15.18.47;	author jason;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix etherip version parsing, ok dlg@@
@
text
@/*	$OpenBSD: print-etherip.c,v 1.8 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 2001 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Format and print etherip packets
 */

#include <sys/time.h>
#include <sys/socket.h>

#include <net/if.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>
#include <netinet/tcp.h>
#include <netinet/if_ether.h>
#include <netinet/ip_ether.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stddef.h>

#include "addrtoname.h"
#include "interface.h"
#include "extract.h"		    /* must come after interface.h */

extern u_short extracted_ethertype;

void
etherip_print(const u_char *bp, u_int caplen, u_int len, const u_char *bp2)
{
	const struct ip *ip = (const struct ip *)bp2;
	struct ether_header *eh;
	const u_char *pbuf = bp;
	u_int plen = caplen, hlen;
	u_int16_t etype;

	if (plen < sizeof(struct etherip_header)) {
		printf("[|etherip]");
		return;
	}

	printf("etherip %s > %s ver ", ipaddr_string(&ip->ip_src),
	    ipaddr_string(&ip->ip_dst));

	switch (*pbuf >> 4) {
	case 2:
		hlen = 1;
		printf("%d", 2);
		break;
	case 3:
		hlen = 2;
		printf("%d", 3);
		break;
	default:
		hlen = 0;
		printf("unknown");
		break;
	}
	printf(" len %d", len);
	if (hlen == 0)
		return;

	printf(": ");

	if (plen < hlen) {
		printf("[|etherip]");
		return;
	}
	pbuf += hlen;
	plen -= hlen;
	len -= hlen;

	if (eflag)
		ether_print(pbuf, len);
	eh = (struct ether_header *)pbuf;
	if (plen < sizeof(struct ether_header)) {
		printf("[|ether]");
		return;
	}
	etype = EXTRACT_16BITS(pbuf + offsetof(struct ether_header, ether_type));
	pbuf += sizeof(struct ether_header);
	plen -= sizeof(struct ether_header);
	len -= sizeof(struct ether_header);

	/* XXX LLC? */
	extracted_ethertype = 0;
	if (etype <= ETHERMTU) {
		if (llc_print(pbuf, len, plen, ESRC(eh), EDST(eh)) == 0) {
			if (!eflag)
				ether_print((u_char *)eh, len);
			if (extracted_ethertype) {
				printf("LLC %s",
				    etherproto_string(htons(extracted_ethertype)));
			}
			if (!xflag && !qflag)
				default_print(pbuf, plen);
		}
	} else if (ether_encap_print(etype, pbuf, len, plen) == 0) {
		if (!eflag)
			ether_print((u_char *)eh, len + sizeof(*eh));
		if (!xflag && !qflag)
			default_print(pbuf, plen);
	}
}
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.7 2014/08/14 12:44:44 mpi Exp $	*/
d75 1
a75 1
	switch ((*pbuf) & 0xf) {
@


1.7
log
@No use for <netinet/in_systm.h> nor <netinet/tcpip.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.6 2009/10/27 23:59:55 deraadt Exp $	*/
a32 1
#include <sys/param.h>
@


1.6
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.5 2007/10/07 16:41:05 deraadt Exp $	*/
a38 1
#include <netinet/in_systm.h>
a43 1
#include <netinet/tcpip.h>
@


1.5
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.4 2006/06/01 17:18:39 moritz Exp $	*/
a31 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.4
log
@Pass the captured packet length in addition to the real packet length
to etherip_print() and do all the bounds checking with it. Also add
bounds checks to ether_print(). This fixes even more crashes.

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.3 2006/05/29 18:05:22 moritz Exp $	*/
d35 1
a35 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-etherip.c,v 1.3 2006/05/29 18:05:22 moritz Exp $";
@


1.3
log
@ANSI and whitespace. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.2 2003/06/03 00:21:04 jason Exp $	*/
d35 1
a35 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-etherip.c,v 1.2 2003/06/03 00:21:04 jason Exp $";
d67 1
a67 1
etherip_print(const u_char *bp, u_int len, const u_char *bp2)
d72 1
a72 1
	u_int plen = len, hlen;
d103 4
d109 1
d112 1
a112 1
		ether_print(pbuf, plen);
d114 4
d121 1
d126 1
a126 1
		if (llc_print(pbuf, plen, plen, ESRC(eh), EDST(eh)) == 0) {
d128 1
a128 1
				ether_print((u_char *)eh, plen);
d136 1
a136 1
	} else if (ether_encap_print(etype, pbuf, plen, plen) == 0) {
d138 1
a138 1
			ether_print((u_char *)eh, plen + sizeof(*eh));
@


1.2
log
@last bit of clause 3 & 4 nuking for me.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-etherip.c,v 1.1 2001/02/05 15:18:47 jason Exp $	*/
d35 1
a35 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-etherip.c,v 1.1 2001/02/05 15:18:47 jason Exp $";
d66 2
a67 4
void 
etherip_print(bp, len, bp2)
	register const u_char *bp, *bp2;
	register u_int len;
d102 1
a102 1
		
@


1.1
log
@etherip printing code... handles draft (v2) and current (v3)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d35 1
a35 1
    "@@(#) $Header$";
@

