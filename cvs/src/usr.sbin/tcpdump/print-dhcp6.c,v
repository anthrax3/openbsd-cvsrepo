head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.24
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.22
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.20
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.18
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2015.11.18.15.36.20;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	vQk1DzJRhR5UcrJ1;

1.9
date	2015.11.16.00.16.39;	author mmcc;	state Exp;
branches;
next	1.8;
commitid	enjTsnD5UO6xazKc;

1.8
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Uu5nFG3wCl0LACBb;

1.7
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.07.18.48.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.05.12.32.09;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.21.35.39;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove memory.h includes.

ok deraadt@@
@
text
@/*	$OpenBSD: print-dhcp6.c,v 1.9 2015/11/16 00:16:39 mmcc Exp $	*/

/*
 * Copyright (C) 1998 and 1999 WIDE Project.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifdef INET6

#include <sys/time.h>
#include <sys/socket.h>

struct mbuf;
struct rtentry;
#include <net/if.h>

#include <netinet/in.h>

#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <arpa/inet.h>

#include "interface.h"
#include "addrtoname.h"
#include "dhcp6.h"
#include "dhcp6opt.h"

#if 0
static void dhcp6opttab_init(void);
static struct dhcp6_opt *dhcp6opttab_byname(char *);
#endif
static struct dhcp6_opt *dhcp6opttab_bycode(u_int);

static char tstr[] = " [|dhcp6]";

static struct dhcp6_opt dh6opttab[] = {
	/* IP Address Extension */
	{ 1, OL6_N,	"IP Address",			OT6_NONE, },

	/* General Extension */
	{ 2, 4,		"Time Offset",			OT6_NUM, },
	{ 3, OL6_N,	"IEEE 1003.1 POSIX Timezone",	OT6_STR, },
	{ 6, OL6_16N,	"Domain Name Server",		OT6_V6, },
	{ 10, OL6_N,	"Domain Name",			OT6_STR, },

	/* Application and Service Parameters */
	{ 16, OL6_N,	"Directory Agent",		OT6_NONE, },
	{ 17, OL6_N,	"Service Scope"	,		OT6_NONE, },
	{ 18, OL6_16N,	"Network Time Protocol Servers", OT6_V6, },
	{ 19, OL6_N,	"NIS Domain",			OT6_STR, },
	{ 20, OL6_16N,	"NIS Servers",			OT6_V6, },
	{ 21, OL6_N,	"NIS+ Domain",			OT6_STR, },
	{ 22, OL6_16N,	"NIS+ Servers",			OT6_V6, },

	/* TCP Parameters */
	{ 32, 4,	"TCP Keepalive Interval",	OT6_NUM, },

	/* DHCPv6 Extensions */
	{ 40, 4,	"Maximum DHCPv6 Message Size",	OT6_NUM, },
	{ 41, OL6_N,	"DHCP Retransmission and Configuration Parameter",
							OT6_NONE, },
	{ 48, OL6_N,	"Platform Specific Information", OT6_NONE, },
	{ 49, OL6_N,	"Platform Class Identifier",	OT6_STR, },
	{ 64, OL6_N,	"Class Identifier",		OT6_STR, },
	{ 66, 16,	"Reconfigure Multicast Address", OT6_V6, },
	{ 67, 16,	"Renumber DHCPv6 Server Address",
							OT6_V6, },
	{ 68, OL6_N,	"DHCP Relay ICMP Error Message", OT6_NONE, },
	{ 84, OL6_N,	"Client-Server Authentication",	OT6_NONE, },
	{ 85, 4,	"Client Key Selection",		OT6_NUM, },

	/* End Extension */
	{ 65536, OL6_Z,	"End",				OT6_NONE, },

	{ 0 },
};

#if 0
static struct dhcp6_opt *dh6o_pad;
static struct dhcp6_opt *dh6o_end;

static void
dhcp6opttab_init()
{
	dh6o_pad = dhcp6opttab_bycode(0);
	dh6o_end = dhcp6opttab_bycode(65536);
}
#endif

#if 0
static struct dhcp6_opt *
dhcp6opttab_byname(name)
	char *name;
{
	struct dhcp6_opt *p;

	for (p = dh6opttab; p->code; p++)
		if (strcmp(name, p->name) == 0)
			return p;
	return NULL;
}
#endif

static struct dhcp6_opt *
dhcp6opttab_bycode(code)
	u_int code;
{
	struct dhcp6_opt *p;

	for (p = dh6opttab; p->code; p++)
		if (p->code == code)
			return p;
	return NULL;
}

static void
dhcp6ext_print(u_char *cp, u_char *ep)
{
	u_int16_t code, len;
	struct dhcp6_opt *p;
	char buf[BUFSIZ];
	int i;

	if (cp == ep)
		return;
	printf(" ");
	while (cp < ep) {
		code = ntohs(*(u_int16_t *)&cp[0]);
		if (code != 65535)
			len = ntohs(*(u_int16_t *)&cp[2]);
		else
			len = 0;
		p = dhcp6opttab_bycode(code);
		if (p == NULL) {
			printf("(unknown, len=%d)", len);
			cp += len + 4;
			continue;
		}

		/* sanity check on length */
		switch (p->len) {
		case OL6_N:
			break;
		case OL6_16N:
			if (len % 16 != 0)
				goto trunc;
			break;
		case OL6_Z:
			if (len != 0)
				goto trunc;
			break;
		default:
			if (len != p->len)
				goto trunc;
			break;
		}
		if (cp + 4 + len > ep) {
			printf("[|%s]", p->name);
			return;
		}

		printf("(%s, ", p->name);
		switch (p->type) {
		case OT6_V6:
			for (i = 0; i < len; i += 16) {
				inet_ntop(AF_INET6, &cp[4 + i], buf,
					sizeof(buf));
				if (i != 0)
					printf(",");
				printf("%s", buf);
			}
			break;
		case OT6_STR:
			memset(&buf, 0, sizeof(buf));
			strlcpy(buf, &cp[4], len);
			printf("%s", buf);
			break;
		case OT6_NUM:
			printf("%d", (u_int32_t)ntohl(*(u_int32_t *)&cp[4]));
			break;
		default:
			for (i = 0; i < len; i++)
				printf("%02x", cp[4 + i] & 0xff);
		}
		printf(")");
		cp += len + 4;
	}
	return;

trunc:
	printf("[|dhcp6ext]");
}

/*
 * Print dhcp6 requests
 */
void
dhcp6_print(const u_char *cp, u_int length,
	    u_short sport, u_short dport)
{
	union dhcp6 *dh6;
	u_char *ep;
	u_char *extp;

	printf("dhcp6");

	ep = (u_char *)snapend;

	dh6 = (union dhcp6 *)cp;
	TCHECK(dh6->dh6_msgtype);
	switch (dh6->dh6_msgtype) {
	case DH6_SOLICIT:
		if (vflag && TTEST(dh6->dh6_sol.dh6sol_relayaddr)) {
			printf(" solicit(");
			if ((dh6->dh6_sol.dh6sol_flags & DH6SOL_CLOSE) != 0)
				printf("C");
			if (dh6->dh6_sol.dh6sol_flags != 0)
				printf(" ");
			printf("cliaddr=%s",
				ip6addr_string(&dh6->dh6_sol.dh6sol_cliaddr));
			printf(" relayaddr=%s", 
				ip6addr_string(&dh6->dh6_sol.dh6sol_relayaddr));
			printf(")");
		} else
			printf(" solicit");
		break;
	case DH6_ADVERT:
		if (!(vflag && TTEST(dh6->dh6_adv.dh6adv_serveraddr))) {
			printf(" advert");
			break;
		}
		printf(" advert(");
		if ((dh6->dh6_adv.dh6adv_flags & DH6ADV_SERVPRESENT) != 0)
			printf("S");
		if (dh6->dh6_adv.dh6adv_flags != 0)
			printf(" ");
		printf("pref=%u", dh6->dh6_adv.dh6adv_pref);
		printf(" cliaddr=%s",
			ip6addr_string(&dh6->dh6_adv.dh6adv_cliaddr));
		printf(" relayaddr=%s", 
			ip6addr_string(&dh6->dh6_adv.dh6adv_relayaddr));
		printf(" servaddr=%s", 
			ip6addr_string(&dh6->dh6_adv.dh6adv_serveraddr));
		extp = (u_char *)((&dh6->dh6_adv) + 1);
		dhcp6ext_print(extp, ep);
		printf(")");
		break;
	case DH6_REQUEST:
		if (!(vflag && TTEST(dh6->dh6_req.dh6req_relayaddr))) {
			printf(" request");
			break;
		}
		printf(" request(");
		if ((dh6->dh6_req.dh6req_flags & DH6REQ_CLOSE) != 0)
			printf("C");
		if ((dh6->dh6_req.dh6req_flags & DH6REQ_SERVPRESENT) != 0)
			printf("S");
		if ((dh6->dh6_req.dh6req_flags & DH6REQ_REBOOT) != 0)
			printf("R");
		if (dh6->dh6_req.dh6req_flags != 0)
			printf(" ");
		printf("xid=0x%04x", dh6->dh6_req.dh6req_xid);
		printf(" cliaddr=%s",
			ip6addr_string(&dh6->dh6_req.dh6req_cliaddr));
		printf(" relayaddr=%s", 
			ip6addr_string(&dh6->dh6_req.dh6req_relayaddr));
		extp = (char *)((&dh6->dh6_req) + 1);
		if ((dh6->dh6_req.dh6req_flags & DH6REQ_SERVPRESENT) != 0) {
			printf(" servaddr=%s", ip6addr_string(extp));
			extp += 16;
		}
		dhcp6ext_print(extp, ep);
		printf(")");
		break;
	case DH6_REPLY:
		if (!(vflag && TTEST(dh6->dh6_rep.dh6rep_xid))) {
			printf(" reply");
			break;
		}
		printf(" reply(");
		if ((dh6->dh6_rep.dh6rep_flagandstat & DH6REP_CLIPRESENT) != 0)
			printf("C");
		if (dh6->dh6_rep.dh6rep_flagandstat != 0)
			printf(" ");
		printf("stat=0x%02x",
			dh6->dh6_rep.dh6rep_flagandstat & DH6REP_STATMASK);
		extp = (u_char *)((&dh6->dh6_rep) + 1);
		if ((dh6->dh6_rep.dh6rep_flagandstat & DH6REP_CLIPRESENT) != 0) {
			printf(" cliaddr=%s", ip6addr_string(extp));
			extp += 16;
		}
		dhcp6ext_print(extp, ep);
		printf(")");
		break;
	case DH6_RELEASE:
		printf(" release");
		break;
	case DH6_RECONFIG:
		printf(" reconfig");
		break;
	}
	return;

trunc:
	printf("%s", tstr);
}

#endif /* INET6 */
@


1.9
log
@Remove remaining instances of the register keyword.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.8 2015/01/16 06:40:21 deraadt Exp $	*/
a43 3
#ifdef HAVE_MEMORY_H
#include <memory.h>
#endif
@


1.8
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.7 2009/10/27 23:59:55 deraadt Exp $	*/
d226 1
a226 1
dhcp6_print(register const u_char *cp, u_int length,
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.6 2007/10/07 16:41:05 deraadt Exp $	*/
a33 1
#include <sys/param.h>
@


1.6
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.5 2002/02/19 19:39:40 millert Exp $	*/
a30 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.5
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.4 2002/02/16 21:28:09 millert Exp $	*/
d34 1
a34 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-dhcp6.c,v 1.4 2002/02/16 21:28:09 millert Exp $";
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.3 2001/11/07 18:48:16 deraadt Exp $	*/
d34 1
a34 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-dhcp6.c,v 1.3 2001/11/07 18:48:16 deraadt Exp $";
a42 1
#if __STDC__
a44 1
#endif
@


1.3
log
@simplify buffer handling; ok ho
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.2 2000/05/05 12:32:09 jakob Exp $	*/
d34 1
a34 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-dhcp6.c,v 1.2 2000/05/05 12:32:09 jakob Exp $";
d65 2
a66 2
static void dhcp6opttab_init __P((void));
static struct dhcp6_opt *dhcp6opttab_byname __P((char *));
d68 1
a68 1
static struct dhcp6_opt *dhcp6opttab_bycode __P((u_int));
@


1.2
log
@build without INET6; <goeran@@cdg.chalmers.se>
@
text
@d1 1
a1 1
/*	$OpenBSD: print-dhcp6.c,v 1.1 2000/04/26 21:35:39 jakob Exp $	*/
d34 1
a34 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-dhcp6.c,v 1.1 2000/04/26 21:35:39 jakob Exp $";
d211 1
a211 1
			strncpy(buf, &cp[4], len);
@


1.1
log
@INET6
DHCP/BOOTP
tcp & udp checksum detection
numerous bugfixes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
    "@@(#) $Header: /cvsroot/kame/kame/kame/kame/tcpdump/print-dhcp6.c,v 1.6 1999/12/10 05:37:58 itojun Exp $";
d37 2
d343 2
@

