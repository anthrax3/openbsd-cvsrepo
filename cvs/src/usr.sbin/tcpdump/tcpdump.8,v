head	1.91;
access;
symbols
	OPENBSD_6_1_BASE:1.91
	OPENBSD_6_0:1.91.0.4
	OPENBSD_6_0_BASE:1.91
	OPENBSD_5_9:1.88.0.2
	OPENBSD_5_9_BASE:1.88
	OPENBSD_5_8:1.85.0.4
	OPENBSD_5_8_BASE:1.85
	OPENBSD_5_7:1.84.0.2
	OPENBSD_5_7_BASE:1.84
	OPENBSD_5_6:1.83.0.4
	OPENBSD_5_6_BASE:1.83
	OPENBSD_5_5:1.82.0.4
	OPENBSD_5_5_BASE:1.82
	OPENBSD_5_4:1.81.0.2
	OPENBSD_5_4_BASE:1.81
	OPENBSD_5_3:1.79.0.2
	OPENBSD_5_3_BASE:1.79
	OPENBSD_5_2:1.76.0.2
	OPENBSD_5_2_BASE:1.76
	OPENBSD_5_1_BASE:1.75
	OPENBSD_5_1:1.75.0.4
	OPENBSD_5_0:1.75.0.2
	OPENBSD_5_0_BASE:1.75
	OPENBSD_4_9:1.73.0.2
	OPENBSD_4_9_BASE:1.73
	OPENBSD_4_8:1.71.0.4
	OPENBSD_4_8_BASE:1.71
	OPENBSD_4_7:1.71.0.2
	OPENBSD_4_7_BASE:1.71
	OPENBSD_4_6:1.68.0.6
	OPENBSD_4_6_BASE:1.68
	OPENBSD_4_5:1.68.0.2
	OPENBSD_4_5_BASE:1.68
	OPENBSD_4_4:1.67.0.2
	OPENBSD_4_4_BASE:1.67
	OPENBSD_4_3:1.65.0.2
	OPENBSD_4_3_BASE:1.65
	OPENBSD_4_2:1.64.0.2
	OPENBSD_4_2_BASE:1.64
	OPENBSD_4_1:1.63.0.2
	OPENBSD_4_1_BASE:1.63
	OPENBSD_4_0:1.62.0.2
	OPENBSD_4_0_BASE:1.62
	OPENBSD_3_9:1.59.0.2
	OPENBSD_3_9_BASE:1.59
	OPENBSD_3_8:1.56.0.2
	OPENBSD_3_8_BASE:1.56
	OPENBSD_3_7:1.55.0.2
	OPENBSD_3_7_BASE:1.55
	OPENBSD_3_6:1.48.0.2
	OPENBSD_3_6_BASE:1.48
	OPENBSD_3_5:1.43.0.2
	OPENBSD_3_5_BASE:1.43
	OPENBSD_3_4:1.41.0.2
	OPENBSD_3_4_BASE:1.41
	OPENBSD_3_3:1.32.0.2
	OPENBSD_3_3_BASE:1.32
	OPENBSD_3_2:1.31.0.2
	OPENBSD_3_2_BASE:1.31
	OPENBSD_3_1:1.30.0.2
	OPENBSD_3_1_BASE:1.30
	OPENBSD_3_0:1.29.0.2
	OPENBSD_3_0_BASE:1.29
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_9:1.26.0.2
	OPENBSD_2_8:1.23.0.4
	OPENBSD_2_8_BASE:1.23
	OPENBSD_2_7:1.23.0.2
	OPENBSD_2_7_BASE:1.23
	OPENBSD_2_6:1.19.0.2
	OPENBSD_2_6_BASE:1.19
	OPENBSD_2_5:1.11.0.2
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@.\" @;


1.91
date	2016.05.08.08.20.50;	author natano;	state Exp;
branches;
next	1.90;
commitid	m6ORkv5QobVmEZci;

1.90
date	2016.05.03.07.41.24;	author natano;	state Exp;
branches;
next	1.89;
commitid	tjFA2ooWPM1VyyUp;

1.89
date	2016.03.31.15.53.25;	author schwarze;	state Exp;
branches;
next	1.88;
commitid	5hB8ToRx5zcMZQDO;

1.88
date	2015.11.05.09.56.21;	author jmc;	state Exp;
branches;
next	1.87;
commitid	I5yfOw5LYlvs3V6Y;

1.87
date	2015.09.25.14.56.33;	author schwarze;	state Exp;
branches;
next	1.86;
commitid	e1c0opDBN4d6sfdN;

1.86
date	2015.09.14.20.06.59;	author schwarze;	state Exp;
branches;
next	1.85;
commitid	r87YNrjEWwl7OkJ0;

1.85
date	2015.07.18.16.55.31;	author stsp;	state Exp;
branches;
next	1.84;
commitid	uIeltuOEvh0x1kQu;

1.84
date	2015.02.28.21.51.57;	author bentley;	state Exp;
branches;
next	1.83;
commitid	NNu2UZnsd5zmNVYD;

1.83
date	2014.06.03.02.57.29;	author lteo;	state Exp;
branches;
next	1.82;
commitid	ibpQy6ePwyrgaOuN;

1.82
date	2014.02.19.04.50.36;	author lteo;	state Exp;
branches;
next	1.81;

1.81
date	2013.07.16.11.13.34;	author schwarze;	state Exp;
branches;
next	1.80;

1.80
date	2013.07.10.03.08.58;	author lteo;	state Exp;
branches;
next	1.79;

1.79
date	2012.09.26.16.19.45;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2012.08.29.22.19.31;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2012.08.24.02.01.39;	author lteo;	state Exp;
branches;
next	1.76;

1.76
date	2012.07.10.18.07.37;	author sthen;	state Exp;
branches;
next	1.75;

1.75
date	2011.03.28.09.37.03;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2011.03.28.07.56.13;	author giovanni;	state Exp;
branches;
next	1.73;

1.73
date	2011.02.07.00.02.50;	author schwarze;	state Exp;
branches;
next	1.72;

1.72
date	2010.09.07.12.40.30;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2010.01.14.04.57.06;	author jsing;	state Exp;
branches;
next	1.70;

1.70
date	2010.01.03.13.24.09;	author schwarze;	state Exp;
branches;
next	1.69;

1.69
date	2009.12.03.12.45.05;	author sthen;	state Exp;
branches;
next	1.68;

1.68
date	2009.02.14.14.45.31;	author sthen;	state Exp;
branches;
next	1.67;

1.67
date	2008.04.21.08.17.23;	author jmc;	state Exp;
branches;
next	1.66;

1.66
date	2008.04.18.21.35.11;	author djm;	state Exp;
branches;
next	1.65;

1.65
date	2007.08.28.12.52.06;	author markus;	state Exp;
branches;
next	1.64;

1.64
date	2007.05.31.19.20.29;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2007.01.02.18.31.21;	author reyk;	state Exp;
branches;
next	1.62;

1.62
date	2006.05.15.09.01.39;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2006.05.15.08.56.46;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2006.03.26.19.16.06;	author camield;	state Exp;
branches;
next	1.59;

1.59
date	2005.10.20.03.33.20;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2005.10.07.19.43.45;	author mpf;	state Exp;
branches;
next	1.57;

1.57
date	2005.09.30.20.34.26;	author jaredy;	state Exp;
branches;
next	1.56;

1.56
date	2005.07.08.12.47.28;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2005.03.06.21.23.11;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2005.03.06.21.05.49;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2005.03.06.18.44.50;	author reyk;	state Exp;
branches;
next	1.52;

1.52
date	2005.02.04.23.06.30;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2005.01.22.09.18.41;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2005.01.02.18.15.02;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2004.09.16.11.29.51;	author markus;	state Exp;
branches;
next	1.48;

1.48
date	2004.07.28.09.37.26;	author markus;	state Exp;
branches;
next	1.47;

1.47
date	2004.06.23.06.12.07;	author markus;	state Exp;
branches;
next	1.46;

1.46
date	2004.05.06.11.25.11;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2004.05.05.23.16.03;	author frantzen;	state Exp;
branches;
next	1.44;

1.44
date	2004.04.28.02.17.03;	author mcbride;	state Exp;
branches;
next	1.43;

1.43
date	2003.10.12.10.59.47;	author dhartmei;	state Exp;
branches;
next	1.42;

1.42
date	2003.09.25.13.32.58;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2003.09.04.22.14.43;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2003.09.02.18.56.36;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2003.08.28.09.41.22;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2003.08.21.19.14.23;	author frantzen;	state Exp;
branches;
next	1.37;

1.37
date	2003.07.17.08.45.37;	author markus;	state Exp;
branches;
next	1.36;

1.36
date	2003.07.14.13.46.14;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2003.06.12.12.59.53;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2003.05.14.08.50.37;	author canacar;	state Exp;
branches;
next	1.33;

1.33
date	2003.04.08.01.21.11;	author david;	state Exp;
branches;
next	1.32;

1.32
date	2002.12.01.16.59.20;	author margarida;	state Exp;
branches;
next	1.31;

1.31
date	2002.05.30.06.18.00;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2002.03.23.01.35.06;	author frantzen;	state Exp;
branches;
next	1.29;

1.29
date	2001.09.03.13.27.14;	author jakob;	state Exp;
branches;
next	1.28;

1.28
date	2001.09.03.13.25.53;	author jakob;	state Exp;
branches;
next	1.27;

1.27
date	2001.07.20.19.09.49;	author mpech;	state Exp;
branches;
next	1.26;

1.26
date	2001.03.21.16.27.00;	author aaron;	state Exp;
branches;
next	1.25;

1.25
date	2000.11.09.17.53.25;	author aaron;	state Exp;
branches;
next	1.24;

1.24
date	2000.11.08.19.37.37;	author aaron;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.27.10.07.59;	author itojun;	state Exp;
branches;
next	1.22;

1.22
date	2000.04.15.02.15.21;	author aaron;	state Exp;
branches;
next	1.21;

1.21
date	2000.03.19.17.57.16;	author aaron;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.14.21.31.44;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	99.07.28.20.41.37;	author jakob;	state Exp;
branches;
next	1.18;

1.18
date	99.07.09.13.35.54;	author aaron;	state Exp;
branches;
next	1.17;

1.17
date	99.07.07.10.50.14;	author aaron;	state Exp;
branches;
next	1.16;

1.16
date	99.07.02.20.11.49;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.07.01.17.07.03;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	99.06.13.14.05.25;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	99.05.15.02.17.54;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.05.01.09.01.46;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.03.10.02.43.11;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	98.09.22.22.03.01;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	98.09.13.03.50.23;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	98.09.07.16.44.34;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	98.07.15.00.06.01;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.22.13.20.59;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.09.18.03.10.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.13.11.01.34;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.47.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.59.45;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.26;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.91
log
@Use /dev/bpf0 instead of /dev/bpf (without loop though), as suggested by
sthen@@. to make remote upgrades without media less painful.

ok tb@@
@
text
@.\"	$OpenBSD: tcpdump.8,v 1.90 2016/05/03 07:41:24 natano Exp $
.\"
.\" Copyright (c) 1987, 1988, 1989, 1990, 1991, 1992, 1994, 1995, 1996
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that: (1) source code distributions
.\" retain the above copyright notice and this paragraph in its entirety, (2)
.\" distributions including binary code include the above copyright notice and
.\" this paragraph in its entirety in the documentation or other materials
.\" provided with the distribution, and (3) all advertising materials mentioning
.\" features or use of this software display the following acknowledgement:
.\" ``This product includes software developed by the University of California,
.\" Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
.\" the University nor the names of its contributors may be used to endorse
.\" or promote products derived from this software without specific prior
.\" written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.Dd $Mdocdate: May 3 2016 $
.Dt TCPDUMP 8
.Os
.Sh NAME
.Nm tcpdump
.Nd dump traffic on a network
.Sh SYNOPSIS
.Nm tcpdump
.Op Fl AadefILlNnOopqStvXx
.Op Fl c Ar count
.Op Fl D Ar direction
.Op Fl E Oo Ar espalg : Oc Ns Ar espkey
.Op Fl F Ar file
.Op Fl i Ar interface
.Op Fl r Ar file
.Op Fl s Ar snaplen
.Op Fl T Ar type
.Op Fl w Ar file
.Op Fl y Ar datalinktype
.Op Ar expression
.Sh DESCRIPTION
.Nm
prints out the headers of packets on a network interface that match the boolean
.Ar expression .
You must have read access to
.Pa /dev/bpf0 .
.Pp
The options are as follows:
.Bl -tag -width "-c count"
.It Fl A
Print each packet in ASCII.
If the
.Fl e
option is also specified, the link-level header will be included.
The smaller of the entire packet or
.Ar snaplen
bytes will be printed.
.It Fl a
Attempt to convert network and broadcast addresses to names.
.It Fl c Ar count
Exit after receiving
.Ar count
packets.
.It Fl D Ar direction
Select packets flowing in the specified
.Ar direction .
Valid directions are:
.Cm in
and
.Cm out .
The default is to accept packets flowing in any direction.
.It Fl d
Dump the compiled packet-matching code in a human readable form to
standard output and stop.
.It Fl dd
Dump packet-matching code as a C program fragment.
.It Fl ddd
Dump packet-matching code as decimal numbers
preceded with a count.
.It Fl E Oo Ar espalg : Oc Ns Ar espkey
Try to decrypt RFC 4835 ESP
.Pq Encapsulating Security Payload
traffic using the specified hex key
.Ar espkey .
Supported algorithms for
.Ar espalg
are:
.Cm aes128 ,
.Cm aes128-hmac96 ,
.Cm blowfish ,
.Cm blowfish-hmac96 ,
.Cm cast ,
.Cm cast-hmac96 ,
.Cm des3 ,
.Cm des3-hmac96 ,
.Cm des
and
.Cm des-hmac96 .
The algorithm defaults to
.Cm aes128-hmac96 .
This option should be used for debugging only, since the key will show up in
.Xr ps 1
output.
.It Fl e
Print the link-level header on each dump line.
.It Fl F Ar file
Use
.Ar file
as input for the filter expression.
Any additional expressions given on the command line are ignored.
.It Fl f
Print
.Dq foreign
internet addresses numerically rather than symbolically.
This option is intended to get around serious brain damage in
Sun's yp server \(em usually it hangs forever translating non-local
internet numbers.
.It Fl I
Print the interface on each dump line.
.It Fl i Ar interface
Listen on
.Ar interface .
If unspecified,
.Nm
searches the system interface list for the lowest numbered, configured
.Dq up
interface
.Pq excluding loopback .
Ties are broken by choosing the earliest match.
.It Fl L
List the supported data link types for the interface and exit.
.It Fl l
Make stdout line buffered.
Useful if you want to see the data while capturing it.
For example:
.Pp
.Dl # tcpdump -l | tee dat
or
.Dl # tcpdump -l > dat & tail -f dat
.It Fl N
Do not print domain name qualification of host names.
For example, if you specify this flag then
.Nm
will print
.Dq nic
instead of
.Dq nic.ddn.mil .
.It Fl n
Do not convert addresses
.Pq host addresses, port numbers, etc.
to names.
.It Fl O
Do not run the packet-matching code optimizer.
This is useful only if you suspect a bug in the optimizer.
.It Fl o
Print a guess of the possible operating system(s) of hosts that sent
TCP SYN packets.
See
.Xr pf.os 5
for a description of the passive operating system fingerprints.
.It Fl p
Do not put the interface into promiscuous mode.
The interface might be in promiscuous mode for some other reason; hence,
.Fl p
cannot be used as an abbreviation for
.Dq ether host \&"{local-hw-addr}\&"
or
.Dq ether broadcast .
.It Fl q
Quick
.Pq quiet?
output.
Print less protocol information so output lines are shorter.
.It Fl r Ar file
Read packets from a
.Ar file
which was created with the
.Fl w
option.
Standard input is used if
.Ar file
is
.Ql - .
.It Fl S
Print absolute, rather than relative, TCP sequence numbers.
.It Fl s Ar snaplen
Analyze at most the first
.Ar snaplen
bytes of data from each packet rather than the default of 116.
116 bytes is adequate for IPv6, ICMP, TCP, and UDP,
but may truncate protocol information from name server and NFS packets
.Pq see below .
Packets truncated because of a limited
.Ar snaplen
are indicated in the output with
.Dq Op | Ns Em proto ,
where
.Em proto
is the name of the protocol level at which the truncation has occurred.
Taking larger snapshots both increases the amount of time it takes
to process packets and, effectively, decreases the amount of packet buffering.
This may cause packets to be lost.
You should limit
.Ar snaplen
to the smallest number that will capture the protocol information
you're interested in.
.It Fl T Ar type
Force packets selected by
.Ar expression
to be interpreted as the specified
.Ar type .
Currently known types are
.Cm vrrp
.Pq Virtual Router Redundancy protocol ,
.Cm cnfp
.Pq Cisco NetFlow protocol ,
.Cm rpc
.Pq Remote Procedure Call ,
.Cm rtp
.Pq Real-Time Applications protocol ,
.Cm rtcp
.Pq Real-Time Applications control protocol ,
.Cm sack
.Pq RFC 2018 TCP Selective Acknowledgements Options ,
.Cm tcp
.Pq Transmission Control Protocol ,
.Cm vat
.Pq Visual Audio Tool ,
and
.Cm wb
.Pq distributed White Board .
.It Fl t
Do not print a timestamp on each dump line.
.It Fl tt
Print an unformatted timestamp on each dump line.
.It Fl ttt
Print day and month in timestamp.
.It Fl tttt
Print timestamp difference between packets.
.It Fl ttttt
Print timestamp difference since the first packet.
.It Fl v
.Pq Slightly more
verbose output.
For example, the time to live
.Pq TTL
and type of service
.Pq ToS
information in an IP packet are printed.
.It Fl vv
Even more verbose output.
For example, additional fields are printed from NFS reply packets.
.It Fl w Ar file
Write the raw packets to
.Ar file
rather than parsing and printing them out.
They can be analyzed later with the
.Fl r
option.
Standard output is used if
.Ar file
is
.Ql - .
.It Fl X
Print each packet in hex and ASCII.
If the
.Fl e
option is also specified, the link-level header will be included.
The smaller of the entire packet or
.Ar snaplen
bytes will be printed.
.It Fl x
Print each packet in hex.
If the
.Fl e
option is also specified, the link-level header will be included.
The smaller of the entire packet or
.Ar snaplen
bytes will be printed.
.It Fl y Ar datalinktype
Set the data link type to use while capturing to
.Ar datalinktype .
Commonly used types include
.Cm EN10MB ,
.Cm IEEE802_11 ,
and
.Cm IEEE802_11_RADIO .
The choices applicable to a particular device can be listed using
.Fl L .
.El
.Pp
.Ar expression
selects which packets will be dumped.
If no
.Ar expression
is given, all packets on the net will be dumped.
Otherwise, only packets satisfying
.Ar expression
will be dumped.
.Pp
The
.Ar expression
consists of one or more primitives.
Primitives usually consist of an
.Ar id
.Pq name or number
preceded by one or more qualifiers.
There are three different kinds of qualifiers:
.Bl -tag -width "proto"
.It Ar type
Specify which kind of address component the
.Ar id
name or number refers to.
Possible types are
.Cm host ,
.Cm net
and
.Cm port .
E.g.,
.Dq host foo ,
.Dq net 128.3 ,
.Dq port 20 .
If there is no type qualifier,
.Cm host
is assumed.
.It Ar dir
Specify a particular transfer direction to and/or from
.Ar id .
Possible directions are
.Cm src ,
.Cm dst ,
.Cm src or dst ,
.Cm src and dst ,
.Cm addr1 ,
.Cm addr2 ,
.Cm addr3 ,
and
.Cm addr4 .
E.g.,
.Dq src foo ,
.Dq dst net 128.3 ,
.Dq src or dst port ftp-data .
If there is no
.Ar dir
qualifier,
.Cm src or dst
is assumed.
The
.Cm addr1 ,
.Cm addr2 ,
.Cm addr3 ,
and
.Cm addr4
qualifiers are only valid for IEEE 802.11 Wireless LAN link layers.
For null link layers (i.e., point-to-point protocols such as SLIP
.Pq Serial Line Internet Protocol
or the
.Xr pflog 4
header), the
.Cm inbound
and
.Cm outbound
qualifiers can be used to specify a desired direction.
.It Ar proto
Restrict the match to a particular protocol.
Possible protocols are:
.Cm ah ,
.Cm arp ,
.Cm atalk ,
.Cm decnet ,
.Cm esp ,
.Cm ether ,
.Cm fddi ,
.Cm icmp ,
.Cm icmp6 ,
.Cm igmp ,
.Cm igrp ,
.Cm ip ,
.Cm ip6 ,
.Cm lat ,
.Cm mopdl ,
.Cm moprc ,
.Cm pim ,
.Cm rarp ,
.Cm sca ,
.Cm stp ,
.Cm tcp ,
.Cm udp ,
and
.Cm wlan .
E.g.,
.Dq ether src foo ,
.Dq arp net 128.3 ,
.Dq tcp port 21 ,
.Dq wlan addr1 0:2:3:4:5:6 .
If there is no protocol qualifier,
all protocols consistent with the type are assumed.
E.g.,
.Dq src foo
means
.Do
.Pq ip or arp or rarp
src foo
.Dc
.Pq except the latter is not legal syntax ;
.Dq net bar
means
.Do
.Pq ip or arp or rarp
net bar
.Dc ;
and
.Dq port 53
means
.Do
.Pq TCP or UDP
port 53
.Dc .
.Pp
.Cm fddi
is actually an alias for
.Cm ether ;
the parser treats them identically as meaning
.Qo
the data link level used on the specified network interface
.Qc .
FDDI
.Pq Fiber Distributed Data Interface
headers contain Ethernet-like source and destination addresses,
and often contain Ethernet-like packet types,
so you can filter on these FDDI fields just as with the analogous
Ethernet fields.
FDDI headers also contain other fields,
but you cannot name them explicitly in a filter expression.
.El
.Pp
In addition to the above, there are some special primitive
keywords that don't follow the pattern:
.Cm gateway ,
.Cm broadcast ,
.Cm less ,
.Cm greater ,
and arithmetic expressions.
All of these are described below.
.Pp
More complex filter expressions are built up by using the words
.Cm and ,
.Cm or ,
and
.Cm not
to combine primitives
e.g.,
.Do
host foo and not port ftp and not port ftp-data
.Dc .
To save typing, identical qualifier lists can be omitted
e.g.,
.Dq tcp dst port ftp or ftp-data or domain
is exactly the same as
.Do
tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain
.Dc .
.Pp
Allowable primitives are:
.Bl -tag -width "ether proto proto"
.It Cm dst host Ar host
True if the IP destination field of the packet is
.Ar host ,
which may be either an address or a name.
.It Cm src host Ar host
True if the IP source field of the packet is
.Ar host .
.It Cm host Ar host
True if either the IP source or destination of the packet is
.Ar host .
.Pp
Any of the above
.Ar host
expressions can be prepended with the keywords,
.Cm ip ,
.Cm arp ,
or
.Cm rarp
as in:
.Pp
.D1 Cm ip host Ar host
.Pp
which is equivalent to:
.Bd -ragged -offset indent
.Cm ether proto
.Ar ip
.Cm and host
.Ar host
.Ed
.Pp
If
.Ar host
is a name with multiple IP addresses, each address will be checked for a match.
.It Cm ether dst Ar ehost
True if the Ethernet destination address is
.Ar ehost .
.Ar ehost
may be either a name from
.Pa /etc/ethers
or a number (see
.Xr ethers 3
for a numeric format).
.It Cm ether src Ar ehost
True if the Ethernet source address is
.Ar ehost .
.It Cm ether host Ar ehost
True if either the Ethernet source or destination address is
.Ar ehost .
.It Cm gateway Ar host
True if the packet used
.Ar host
as a gateway; i.e., the Ethernet source or destination address was
.Ar host
but neither the IP source nor the IP destination was
.Ar host .
.Ar host
must be a name and must be found in both
.Pa /etc/hosts
and
.Pa /etc/ethers .
An equivalent expression is
.Bd -ragged -offset indent
.Cm ether host
.Ar ehost
.Cm and not host
.Ar host
.Ed
.Pp
which can be used with either names or numbers for
.Ar host Ns / Ns Ar ehost .
.It Cm dst net Ar net
True if the IP destination address of the packet has a network number of
.Ar net .
.Ar net
may be either a name from
.Pa /etc/networks
or a network number (see
.Xr networks 5
for details).
.It Cm src net Ar net
True if the IP source address of the packet has a network number of
.Ar net .
.It Cm net Ar net
True if either the IP source or destination address of the packet
has a network number of
.Ar net .
.It Cm dst port Ar port
True if the packet is IP/TCP or IP/UDP and has a destination port value of
.Ar port .
The
.Ar port
can be a number or name from
.Xr services 5
(see
.Xr tcp 4
and
.Xr udp 4 ) .
If a name is used, both the port number and protocol are checked.
If a number or ambiguous name is used, only the port number is checked;
e.g.,
.Dq Cm dst port No 513
will print both TCP/login traffic and UDP/who traffic, and
.Dq Cm dst port No domain
will print both TCP/domain and UDP/domain traffic.
.It Cm src port Ar port
True if the packet has a source port value of
.Ar port .
.It Cm port Ar port
True if either the source or destination port of the packet is
.Ar port .
.Pp
Any of the above port expressions can be prepended with the keywords
.Cm tcp
or
.Cm udp ,
as in:
.Pp
.D1 Cm tcp src port Ar port
.Pp
which matches only TCP packets whose source port is
.Ar port .
.It Cm less Ar length
True if the packet has a length less than or equal to
.Ar length .
This is equivalent to:
.Pp
.D1 Cm len <= Ar length
.It Cm greater Ar length
True if the packet has a length greater than or equal to
.Ar length .
This is equivalent to:
.Pp
.D1 Cm len >= Ar length
.It Cm ip proto Ar proto
True if the packet is an IP packet (see
.Xr ip 4 )
of protocol type
.Ar proto .
.Ar proto
can be a number or name from
.Xr protocols 5 ,
such as
.Cm icmp ,
.Cm udp ,
or
.Cm tcp .
These identifiers are also keywords and must be escaped
using a backslash character
.Pq Sq \e .
.It Cm ether broadcast
True if the packet is an Ethernet broadcast packet.
The
.Cm ether
keyword is optional.
.It Cm ip broadcast
True if the packet is an IP broadcast packet.
It checks for both the all-zeroes and all-ones broadcast conventions
and looks up the local subnet mask.
.It Cm ether multicast
True if the packet is an Ethernet multicast packet.
The
.Cm ether
keyword is optional.
This is shorthand for
.Do
.Cm ether Ns [0] & 1 != 0
.Dc .
.It Cm ip multicast
True if the packet is an IP multicast packet.
.It Cm ether proto Ar proto
True if the packet is of ether type
.Ar proto .
.Ar proto
can be a number or one of the names
.Cm ip ,
.Cm ip6 ,
.Cm arp ,
.Cm rarp ,
.Cm atalk ,
.Cm atalkarp ,
.Cm decnet ,
.Cm decdts ,
.Cm decdns ,
.Cm lanbridge ,
.Cm lat ,
.Cm mopdl ,
.Cm moprc ,
.Cm pup ,
.Cm sca ,
.Cm sprite ,
.Cm stp ,
.Cm vexp ,
.Cm vprod ,
or
.Cm xns .
These identifiers are also keywords and must be escaped
using a backslash character
.Pq Sq \e .
In the case of FDDI (e.g.,
.Dq Cm fddi protocol arp ) ,
the protocol identification comes from the 802.2 Logical Link Control
.Pq LLC
header, which is usually layered on top of the FDDI header.
.Nm
assumes, when filtering on the protocol identifier, that all FDDI packets
include an LLC header, and that the LLC header is in so-called SNAP format.
.It Cm decnet src Ar host
True if the
.Tn DECNET
source address is
.Ar host ,
which may be an address of the form
.Dq 10.123 ,
or a
.Tn DECNET
host name.
.Tn DECNET
host name support is only available on systems that are configured to run
.Tn DECNET .
.It Cm decnet dst Ar host
True if the
.Tn DECNET
destination address is
.Ar host .
.It Cm decnet host Ar host
True if either the
.Tn DECNET
source or destination address is
.Ar host .
.It Cm ifname Ar interface
True if the packet was logged as coming from the specified interface
(applies only to packets logged by
.Xr pf 4 ) .
.It Cm on Ar interface
Synonymous with the
.Ar ifname
modifier.
.It Cm rnr Ar num
True if the packet was logged as matching the specified PF rule number
in the main ruleset (applies only to packets logged by
.Xr pf 4 ) .
.It Cm rulenum Ar num
Synonymous with the
.Ar rnr
modifier.
.It Cm reason Ar code
True if the packet was logged with the specified PF reason code.
The known codes are:
.Ar match ,
.Ar bad-offset ,
.Ar fragment ,
.Ar short ,
.Ar normalize ,
.Ar memory ,
.Ar bad-timestamp ,
.Ar congestion ,
.Ar ip-option ,
.Ar proto-cksum ,
.Ar state-mismatch ,
.Ar state-insert ,
.Ar state-limit ,
.Ar src-limit ,
and
.Ar synproxy
(applies only to packets logged by
.Xr pf 4 ) .
.It Cm rset Ar name
True if the packet was logged as matching the specified PF ruleset
name of an anchored ruleset (applies only to packets logged by
.Xr pf 4 ) .
.It Cm ruleset Ar name
Synonymous with the
.Ar rset
modifier.
.It Cm srnr Ar num
True if the packet was logged as matching the specified PF rule number
of an anchored ruleset (applies only to packets logged by
.Xr pf 4 ) .
.It Cm subrulenum Ar num
Synonymous with the
.Ar srnr
modifier.
.It Cm action Ar act
True if PF took the specified action when the packet was logged.
Valid actions are:
.Ar pass ,
.Ar block ,
and
.Ar match
(applies only to packets logged by
.Xr pf 4 ) .
.It Cm wlan addr1 Ar ehost
True if the first IEEE 802.11 address is
.Ar ehost .
.It Cm wlan addr2 Ar ehost
True if the second IEEE 802.11 address is
.Ar ehost .
.It Cm wlan addr3 Ar ehost
True if the third IEEE 802.11 address is
.Ar ehost .
.It Cm wlan addr4 Ar ehost
True if the fourth IEEE 802.11 address is
.Ar ehost .
The fourth address field is only used for
WDS (Wireless Distribution System) frames.
.It Cm wlan host Ar ehost
True if either the first, second, third, or fourth
IEEE 802.11 address is
.Ar ehost .
.It Cm type Ar type
True if the IEEE 802.11 frame type matches the specified
.Ar type .
Valid types are:
.Ar data ,
.Ar mgt ,
.Ar ctl ,
or a numeric value.
.It Cm subtype Ar subtype
True if the IEEE 802.11 frame subtype matches the specified
.Ar subtype .
Valid subtypes are:
.Ar assocreq ,
.Ar assocresp ,
.Ar reassocreq ,
.Ar reassocresp ,
.Ar probereq ,
.Ar proberesp ,
.Ar beacon ,
.Ar atim ,
.Ar disassoc ,
.Ar auth ,
.Ar deauth ,
.Ar data ,
or a numeric value.
.It Cm dir Ar dir
True if the IEEE 802.11 frame direction matches the specified
.Ar dir .
Valid directions are:
.Ar nods ,
.Ar tods ,
.Ar fromds ,
.Ar dstods ,
or a numeric value.
.It Xo
.Cm atalk ,
.Cm ip ,
.Cm ip6 ,
.Cm arp ,
.Cm decnet ,
.Cm lat ,
.Cm moprc ,
.Cm mopdl ,
.Cm rarp ,
.Cm sca
.Xc
Abbreviations for:
.Cm ether proto Ar p
where
.Ar p
is one of the above protocols.
.Nm
does not currently know how to parse
.Cm lat ,
.Cm moprc ,
or
.Cm mopdl .
.It Xo
.Cm ah ,
.Cm esp ,
.Cm icmp ,
.Cm icmp6 ,
.Cm igmp ,
.Cm igrp ,
.Cm pim ,
.Cm tcp ,
.Cm udp
.Xc
Abbreviations for:
.Cm ip proto Ar p
where
.Ar p
is one of the above protocols.
.It Ar expr relop expr
True if the relation holds, where
.Ar relop
is one of
.Ql > ,
.Ql < ,
.Ql >= ,
.Ql <= ,
.Ql = ,
.Ql != ,
and
.Ar expr
is an arithmetic expression composed of integer constants
.Pq expressed in standard C syntax ,
the normal binary operators
.Ql ( + ,
.Ql - ,
.Ql * ,
.Ql / ,
.Ql & ,
.Ql | ) ,
a length operator, and special packet data accessors.
To access data inside the packet, use the following syntax:
.Sm off
.Bd -ragged -offset indent
.Ar proto Op Ar expr : Ar size
.Ed
.Sm on
.Pp
.Ar proto
is one of
.Cm ether ,
.Cm fddi ,
.Cm ip ,
.Cm arp ,
.Cm rarp ,
.Cm tcp ,
.Cm udp ,
or
.Cm icmp ,
and indicates the protocol layer for the index operation.
The byte offset, relative to the indicated protocol layer, is given by
.Ar expr .
.Ar size
is optional and indicates the number of bytes in the field of interest;
it can be either one, two, or four, and defaults to one.
The length operator, indicated by the keyword
.Cm len ,
gives the length of the packet.
.Pp
For example,
.Dq Cm ether Ns [0] & 1 != 0
catches all multicast traffic.
The expression
.Dq Cm ip Ns [0] & 0xf != 5
catches all IP packets with options.
The expression
.Dq Cm ip Ns [6:2] & 0x1fff = 0
catches only unfragmented datagrams and frag zero of fragmented datagrams.
This check is implicitly applied to the
.Cm tcp
and
.Cm udp
index operations.
For instance,
.Dq Cm tcp Ns [0]
always means the first byte of the TCP header,
and never means the first byte of an intervening fragment.
.El
.Pp
Primitives may be combined using a parenthesized group of primitives and
operators.
Parentheses are special to the shell and must be escaped.
Allowable primitives and operators are:
.Bd -ragged -offset indent
Negation
.Po
.Dq Cm \&!
or
.Dq Cm not
.Pc
.Pp
Concatenation
.Po
.Dq Cm &&
or
.Dq Cm and
.Pc
.Pp
Alternation
.Po
.Dq Cm ||
or
.Dq Cm or
.Pc
.Ed
.Pp
Negation has highest precedence.
Alternation and concatenation have equal precedence and associate left to right.
Explicit
.Cm and
tokens, not juxtaposition,
are now required for concatenation.
.Pp
If an identifier is given without a keyword, the most recent keyword is assumed.
For example,
.Bd -ragged -offset indent
.Cm not host
vs
.Cm and
ace
.Ed
.Pp
is short for
.Bd -ragged -offset indent
.Cm not host
vs
.Cm and host
ace
.Ed
.Pp
which should not be confused with
.Bd -ragged -offset indent
.Cm not
.Pq Cm host No vs Cm or No ace
.Ed
.Pp
Expression arguments can be passed to
.Nm
as either a single argument or as multiple arguments,
whichever is more convenient.
Generally, if the expression contains shell metacharacters,
it is easier to pass it as a single, quoted argument.
Multiple arguments are concatenated with spaces before being parsed.
.Sh EXAMPLES
To print all packets arriving at or departing from sundown:
.Pp
.Dl # tcpdump host sundown
.Pp
To print traffic between helios and either hot or ace
(the expression is quoted to prevent the shell from misinterpreting
the parentheses):
.Pp
.Dl # tcpdump 'host helios and (hot or ace)'
.Pp
To print all IP packets between ace and any host except helios:
.Pp
.Dl # tcpdump ip host ace and not helios
.Pp
To print all traffic between local hosts and hosts at Berkeley:
.Pp
.Dl # tcpdump net ucb-ether
.Pp
To print all FTP traffic through internet gateway snup:
.Pp
.Dl # tcpdump 'gateway snup and (port ftp or ftp-data)'
.Pp
To print traffic neither sourced from nor destined for local network
192.168.7.0/24 (if you gateway to one other net, this stuff should
never make it onto your local network):
.Pp
.Dl # tcpdump ip and not net 192.168.7.0/24
.Pp
To print the start and end packets
.Pq the SYN and FIN packets
of each TCP connection that involves a host that is not in local
network 192.168.7.0/24:
.Bd -literal -offset indent
# tcpdump 'tcp[13] & 3 != 0 and not src and dst net 192.168.7.0/24'
.Ed
.Pp
To print only the SYN packets of HTTP connections:
.Pp
.Dl # tcpdump 'tcp[tcpflags] = tcp-syn and port http'
.Pp
To print IP packets longer than 576 bytes sent through gateway snup:
.Pp
.Dl # tcpdump 'gateway snup and ip[2:2] > 576'
.Pp
To print IP broadcast or multicast packets that were
.Em not
sent via Ethernet broadcast or multicast:
.Bd -literal -offset indent
# tcpdump 'ether[0] & 1 = 0 and ip[16] >= 224'
.Ed
.Pp
To print all ICMP packets that are not echo requests/replies
.Pq i.e., not ping packets :
.Pp
.Dl # tcpdump 'icmp[0] != 8 and icmp[0] != 0'
.Pp
To print only echo request ICMP packets:
.Pp
.Dl # tcpdump 'icmp[icmptype] = icmp-echo'
.Pp
To print and decrypt all ESP packets with SPI 0x00001234:
.Pp
.Dl # tcpdump -E des3-hmac96:ab...def 'ip[20:4] = 0x00001234'
.Pp
To print raw wireless frames passing the iwn0 interface:
.Dl # tcpdump -i iwn0 -y IEEE802_11_RADIO -v
.Sh OUTPUT FORMAT
The output of
.Nm
is protocol dependent.
The following gives a brief description and examples of most of the formats.
.Ss Link Level Headers
If the
.Fl e
option is given, the link level header is printed out.
On Ethernets, the source and destination addresses, protocol,
and packet length are printed.
.Pp
On the packet filter logging interface
.Xr pflog 4 ,
logging reason
.Pq rule match, bad-offset, fragment, bad-timestamp, short, normalize, memory ,
action taken
.Pq pass/block ,
direction
.Pq in/out
and interface information are printed out for each packet.
.Pp
On FDDI networks, the
.Fl e
option causes
.Nm
to print the frame control field, the source and destination addresses,
and the packet length.
The frame control field governs the interpretation of the rest of the packet.
Normal packets
.Pq such as those containing IP datagrams
are
.Dq async
packets, with a priority value between 0 and 7; for example,
.Sy async4 .
Such packets are assumed to contain an 802.2 Logical Link Control
.Pq LLC
packet; the LLC header is printed if it is
.Em not
an ISO datagram or a so-called SNAP packet.
.Pp
The following description assumes familiarity with the
SLIP compression algorithm described in RFC 1144.
.Pp
On SLIP links, a direction indicator
.Po
.Ql I
for inbound,
.Ql O
for outbound
.Pc ,
packet type, and compression information are printed out.
The packet type is printed first.
The three types are
.Cm ip ,
.Cm utcp ,
and
.Cm ctcp .
No further link information is printed for IP packets.
For TCP packets, the connection identifier is printed following the type.
If the packet is compressed, its encoded header is printed out.
The special cases are printed out as
.Cm *S+ Ns Ar n
and
.Cm *SA+ Ns Ar n ,
where
.Ar n
is the amount by which the sequence number
.Pq or sequence number and ack
has changed.
If it is not a special case, zero or more changes are printed.
A change is indicated by
.Sq U
.Pq urgent pointer ,
.Sq W
.Pq window ,
.Sq A
.Pq ack ,
.Sq S
.Pq sequence number ,
and
.Sq I
.Pq packet ID ,
followed by a delta
.Pq +n or -n ,
or a new value
.Pq =n .
Finally, the amount of data in the packet and compressed header length
are printed.
.Pp
For example, the following line shows an outbound compressed TCP packet,
with an implicit connection identifier; the ack has changed by 6,
the sequence number by 49, and the packet ID by 6;
there are 3 bytes of data and 6 bytes of compressed header:
.Bd -ragged -offset indent
O
.Cm ctcp No *
.Cm A No +6
.Cm S No +49
.Cm I No +6 3
.Pq 6
.Ed
.Ss ARP/RARP Packets
arp/rarp output shows the type of request and its arguments.
The format is intended to be self-explanatory.
Here is a short sample taken from the start of an rlogin
from host rtsg to host csam:
.Bd -literal -offset indent
arp who-has csam tell rtsg
arp reply csam is-at CSAM
.Ed
.Pp
In this example, Ethernet addresses are in caps and internet addresses
in lower case.
The first line says that rtsg sent an arp packet asking for
the Ethernet address of internet host csam.
csam replies with its Ethernet address CSAM.
.Pp
This would look less redundant if we had done
.Nm
.Fl n :
.Bd -literal -offset indent
arp who-has 128.3.254.6 tell 128.3.254.68
arp reply 128.3.254.6 is-at 02:07:01:00:01:c4
.Ed
.Pp
If we had done
.Nm
.Fl e ,
the fact that the first packet is
broadcast and the second is point-to-point would be visible:
.Bd -literal -offset indent
RTSG Broadcast 0806 64: arp who-has csam tell rtsg
CSAM RTSG 0806 64: arp reply csam is-at CSAM
.Ed
.Pp
For the first packet this says the Ethernet source address is RTSG,
the destination is the Ethernet broadcast address,
the type field contained hex 0806 (type
.Dv ETHER_ARP )
and the total length was 64 bytes.
.Ss TCP Packets
The following description assumes familiarity with the TCP protocol
described in RFC 793.
If you are not familiar with the protocol, neither this description nor
.Nm
will be of much use to you.
.Pp
The general format of a TCP protocol line is:
.Bd -ragged -offset indent
.Ar src No > Ar dst :
.Ar flags src-os data-seqno ack window urgent options
.Ed
.Pp
.Ar src
and
.Ar dst
are the source and destination IP addresses and ports.
.Ar flags
is some combination of
.Sq S
.Pq Tn SYN ,
.Sq F
.Pq Tn FIN ,
.Sq P
.Pq Tn PUSH ,
or
.Sq R
.Pq Tn RST ,
.Sq W
.Pq Tn congestion Window reduced ,
.Sq E
.Pq Tn ecn ECHO
or a single
.Ql \&.
.Pq no flags .
.Ar src-os
will list a guess of the source host's operating system if the
.Fl o
command line flag was passed to
.Nm tcpdump .
.Ar data-seqno
describes the portion of sequence space covered
by the data in this packet
.Pq see example below .
.Ar ack
is the sequence number of the next data expected by the other
end of this connection.
.Ar window
is the number of bytes of receive buffer space available
at the other end of this connection.
.Ar urg
indicates there is urgent data in the packet.
.Ar options
are TCP options enclosed in angle brackets e.g.,
<mss 1024>.
.Pp
.Ar src , dst
and
.Ar flags
are always present.
The other fields depend on the contents of the packet's TCP protocol header and
are output only if appropriate.
.Pp
Here is the opening portion of an rlogin from host rtsg to host csam.
.Bd -unfilled -offset 2n
rtsg.1023 > csam.login: S 768512:768512(0) win 4096 <mss 1024>
csam.login > rtsg.1023: S 947648:947648(0) ack 768513 win 4096 <mss 1024>
rtsg.1023 > csam.login: . ack 1 win 4096
rtsg.1023 > csam.login: P 1:2(1) ack 1 win 4096
csam.login > rtsg.1023: . ack 2 win 4096
rtsg.1023 > csam.login: P 2:21(19) ack 1 win 4096
csam.login > rtsg.1023: P 1:2(1) ack 21 win 4077
csam.login > rtsg.1023: P 2:3(1) ack 21 win 4077 urg 1
csam.login > rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1
.Ed
.Pp
The first line says that TCP port 1023 on rtsg sent a packet
to port login on host csam.
The
.Ql S
indicates that the SYN flag was set.
The packet sequence number was 768512 and it contained no data.
The notation is
.Sm off
.So
.Ar first : last
.Po Ar nbytes
.Pc
.Sc
.Sm on
which means sequence numbers
.Ar first
up to but not including
.Ar last
which is
.Ar nbytes
bytes of user data.
There was no piggy-backed ack, the available receive window was 4096
bytes and there was a max-segment-size option requesting an mss of 1024 bytes.
.Pp
Csam replies with a similar packet except it includes a piggy-backed
ack for rtsg's SYN.
Rtsg then acks csam's SYN.
The
.Ql \&.
means no flags were set.
The packet contained no data so there is no data sequence number.
The ack sequence number is a 32-bit integer.
The first time
.Nm
sees a TCP connection, it prints the sequence number from the packet.
On subsequent packets of the connection, the difference between
the current packet's sequence number and this initial sequence number
is printed.
This means that sequence numbers after the first can be interpreted
as relative byte positions in the connection's data stream
.Po
with the first data byte each direction being 1
.Pc .
.Fl S
will override this
feature, causing the original sequence numbers to be output.
.Pp
On the 6th line, rtsg sends csam 19 bytes of data
.Po
bytes 2 through 20
in the rtsg -> csam side of the connection
.Pc .
The PUSH flag is set in the packet.
On the 7th line, csam says it's received data sent by rtsg up to
but not including byte 21.
Most of this data is apparently sitting in the socket buffer
since csam's receive window has gotten 19 bytes smaller.
Csam also sends one byte of data to rtsg in this packet.
On the 8th and 9th lines,
csam sends two bytes of urgent, pushed data to rtsg.
.Ss UDP Packets
UDP format is illustrated by this rwho packet:
.Pp
.D1 actinide.who > broadcast.who: udp 84
.Pp
This says that port who on host actinide sent a UDP datagram to port
who on host broadcast, the Internet broadcast address.
The packet contained 84 bytes of user data.
.Pp
Some UDP services are recognized
.Pq from the source or destination port number
and the higher level protocol information printed.
In particular, Domain Name service requests
.Pq RFC 1034/1035
and Sun RPC calls
.Pq RFC 1050
to NFS.
.Ss UDP Name Server Requests
The following description assumes familiarity with
the Domain Service protocol described in RFC 1035.
If you are not familiar with the protocol,
the following description will appear to be written in Greek.
.Pp
Name server requests are formatted as
.Bd -ragged -offset indent
.Ar src
>
.Ar dst :
.Ar id op Ns ?\&
.Ar flags qtype qclass name
.Pq Ar len
.Ed
.Pp
For example:
.Pp
.D1 h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)
.Pp
Host h2opolo asked the domain server on helios for an address record
.Pq Ar qtype Ns =A
associated with the name
ucbvax.berkeley.edu.
The query
.Ar id
was 3.
The
.Ql +
indicates the recursion desired flag was set.
The query length was 37 bytes, not including the UDP and IP protocol headers.
The query operation was the normal one
.Pq Query
so the
.Ar op
field was omitted.
If
.Ar op
had been anything else, it would have been printed between the 3 and the
.Ql + .
Similarly, the
.Ar qclass
was the normal one
.Pq Tn C_IN
and was omitted.
Any other
.Ar qclass
would have been printed immediately after the A.
.Pp
A few anomalies are checked and may result in extra fields enclosed in
square brackets: if a query contains an answer, name server or
authority section,
.Ar ancount ,
.Ar nscount ,
or
.Ar arcount
are printed as
.Dq Bq Ar n Ns a ,
.Dq Bq Ar n Ns n ,
or
.Dq Bq Ar n Ns au
where
.Ar n
is the appropriate count.
If any of the response bits are set
.Po
AA, RA or rcode
.Pc
or any of the
.Dq must be zero
bits are set in bytes two and three,
.Dq Bq b2&3= Ns Ar x
is printed, where
.Ar x
is the hex value of header bytes two and three.
.Ss UDP Name Server Responses
Name server responses are formatted as
.Bd -ragged -offset indent
.Ar src No > Ar dst :
.Ar id op rcode flags
.Ar a
/
.Ar n
/
.Ar au
.Ar type class data
.Pq Ar len
.Ed
.Pp
For example:
.Bd -unfilled -offset indent
helios.domain > h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)
helios.domain > h2opolo.1537: 2 NXDomain* 0/1/0 (97)
.Ed
.Pp
In the first example, helios responds to query
.Ar id
3 from h2opolo
with 3 answer records, 3 name server records and 7 authority records.
The first answer record is type A
.Pq address and its data is internet
address 128.32.137.3.
The total size of the response was 273 bytes, excluding UDP and IP headers.
The
.Ar op
.Pq Query
and
.Ar rcode
.Pq NoError
were omitted, as was the
.Ar class
.Pq C_IN
of the A record.
.Pp
In the second example, helios responds to query
.Ar op
2 with an
.Ar rcode
of non-existent domain
.Pq NXDomain
with no answers,
one name server and no authority records.
The
.Ql *
indicates that the authoritative answer bit was set.
Since there were no answers, no
.Ar type ,
.Ar class
or
.Ar data
were printed.
.Pp
Other flag characters that might appear are
.Sq -
(recursion available, RA,
.Em not
set)
and
.Sq |
.Pq truncated message, TC, set .
If the question section doesn't contain exactly one entry,
.Dq Bq Ar n Ns q
is printed.
.Pp
Name server requests and responses tend to be large and the default
.Ar snaplen
of 96 bytes may not capture enough of the packet to print.
Use the
.Fl s
flag to increase the
.Ar snaplen
if you need to seriously investigate name server traffic.
.Dq Fl s No 128
has worked well for me.
.Ss NFS Requests and Replies
Sun NFS
.Pq Network File System
requests and replies are printed as:
.Bd -ragged -offset indent
.Ar src . Ns Ar xid
>
.Ar dst . Ns nfs :
.Ar len op args
.Pp
.Ar src . Ns nfs
>
.Ar dst . Ns Ar xid :
reply
.Ar stat len op results
.Ed
.Bd -unfilled -offset indent
sushi.6709 > wrl.nfs: 112 readlink fh 21,24/10.73165
wrl.nfs > sushi.6709: reply ok 40 readlink "../var"
sushi.201b > wrl.nfs:
	144 lookup fh 9,74/4096.6878 "xcolors"
wrl.nfs > sushi.201b:
	reply ok 128 lookup fh 9,74/4134.3150
.Ed
.Pp
In the first line, host sushi sends a transaction with ID 6709 to wrl.
The number following the src host is a transaction ID,
.Em not
the source port.
The request was 112 bytes, excluding the UDP and IP headers.
The
.Ar op
was a readlink
.Pq read symbolic link
on fh
.Pq Dq file handle
21,24/10.731657119.
If one is lucky, as in this case, the file handle can be interpreted
as a major,minor device number pair, followed by the inode number and
generation number.
Wrl replies with a
.Ar stat
of ok and the contents of the link.
.Pp
In the third line, sushi asks wrl to look up the name
.Dq xcolors
in directory file 9,74/4096.6878.
The data printed depends on the operation type.
The format is intended to be self-explanatory
if read in conjunction with an NFS protocol spec.
.Pp
If the
.Fl v
.Pq verbose
flag is given, additional information is printed.
For example:
.Bd -unfilled -offset indent
sushi.1372a > wrl.nfs:
	148 read fh 21,11/12.195 8192 bytes @@ 24576
wrl.nfs > sushi.1372a:
	reply ok 1472 read REG 100664 ids 417/0 sz 29388
.Ed
.Pp
.Fl v
also prints the IP header TTL, ID, and fragmentation fields,
which have been omitted from this example.
In the first line, sushi asks wrl to read 8192 bytes from file 21,11/12.195,
at byte offset 24576.
Wrl replies with a
.Ar stat of
ok;
the packet shown on the second line is the first fragment of the reply,
and hence is only 1472 bytes long.
The other bytes will follow in subsequent fragments,
but these fragments do not have NFS or even UDP headers and so might not be
printed, depending on the filter expression used.
Because the
.Fl v
flag is given, some of the file attributes
.Po
which are returned in addition to the file data
.Pc
are printed: the file type
.Pq So REG Sc , No for regular file ,
the file mode
.Pq in octal ,
the UID and GID, and the file size.
.Pp
If the
.Fl v
flag is given more than once, even more details are printed.
.Pp
NFS requests are very large and much of the detail won't be printed unless
.Ar snaplen
is increased.
Try using
.Dq Fl s No 192
to watch NFS traffic.
.Pp
NFS reply packets do not explicitly identify the RPC operation.
Instead,
.Nm
keeps track of
.Dq recent
requests, and matches them to the replies using the
.Ar xid
.Pq transaction ID .
If a reply does not closely follow the corresponding request,
it might not be parsable.
.Ss KIP AppleTalk (DDP in UDP)
AppleTalk DDP packets encapsulated in UDP datagrams
are de-encapsulated and dumped as DDP packets
.Pq i.e., all the UDP header information is discarded .
The file
.Pa /etc/atalk.names
is used to translate AppleTalk net and node numbers to names.
Lines in this file have the form
.Bl -column "number" "name" -offset indent
.It Sy "number" Ta Ta Sy "name"
.It "1.254" Ta Ta "ether"
.It "16.1" Ta Ta "icsd-net"
.It "1.254.110" Ta Ta "ace"
.El
.Pp
The first two lines give the names of AppleTalk networks.
The third line gives the name of a particular host
(a host is distinguished from a net by the 3rd octet in the number;
a net number
.Em must
have two octets and a host number
.Em must
have three octets).
The number and name should be separated by whitespace (blanks or tabs).
The
.Pa /etc/atalk.names
file may contain blank lines or comment lines
(lines starting with a
.Ql # ) .
.Pp
AppleTalk addresses are printed in the form
.Pp
.D1 Ar net . Ns Ar host . Ns Ar port
.Pp
For example:
.Bd -unfilled -offset indent
144.1.209.2 > icsd-net.112.220
office.2 > icsd-net.112.220
jssmag.149.235 > icsd-net.2
.Ed
.Pp
If
.Pa /etc/atalk.names
doesn't exist or doesn't contain an entry for some AppleTalk
host/net number, addresses are printed in numeric form.
In the first example, NBP
.Pq DDP port 2
on net 144.1 node 209
is sending to whatever is listening on port 220 of net icsd-net node 112.
The second line is the same except the full name of the source node is known
.Pq Dq office .
The third line is a send from port 235 on
net jssmag node 149 to broadcast on the icsd-net NBP port.
The broadcast address
.Pq 255
is indicated by a net name with no host number;
for this reason it is a good idea to keep node names and net names distinct in
.Pa /etc/atalk.names .
.Pp
NBP
.Pq name binding protocol
and ATP
.Pq AppleTalk transaction protocol
packets have their contents interpreted.
Other protocols just dump the protocol name
.Po
or number if no name is registered for the protocol
.Pc
and packet size.
.Pp
NBP packets are formatted like the following examples:
.Bd -unfilled
icsd-net.112.220 > jssmag.2: nbp-lkup 190: "=:LaserWriter@@*"
jssmag.209.2 > icsd-net.112.220: nbp-reply 190: "RM1140:LaserWriter@@*" 250
techpit.2 > icsd-net.112.220: nbp-reply 190: "techpit:LaserWriter@@*" 186
.Ed
.Pp
The first line is a name lookup request for laserwriters sent by
net icsdi-net host
112 and broadcast on net jssmag.
The nbp ID for the lookup is 190.
The second line shows a reply for this request
.Pq note that it has the same ID
from host jssmag.209 saying that it has a laserwriter
resource named RM1140 registered on port 250.
The third line is another reply to the same request
saying host techpit has laserwriter techpit registered on port 186.
.Pp
ATP packet formatting is demonstrated by the following example:
.Bd -unfilled -offset indent
jssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000
jssmag.209.165 > helios.132: atp-req  12266<3,5> 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
jssmag.209.165 > helios.132: atp-rel  12266<0-7> 0xae030001
jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002
.Ed
.Pp
Jssmag.209 initiates transaction ID 12266 with host helios by requesting
up to 8 packets
.Sm off
.Pq the Dq <0\-7> .
.Sm on
The hex number at the end of the line is the value of the
.Ar userdata
field in the request.
.Pp
Helios responds with 8 512-byte packets.
The
.Dq : Ns Ar n
following the
transaction ID gives the packet sequence number in the transaction
and the number in parentheses is the amount of data in the packet,
excluding the ATP header.
The
.Ql *
on packet 7 indicates that the EOM bit was set.
.Pp
Jssmag.209 then requests that packets 3 & 5 be retransmitted.
Helios resends them then jssmag.209 releases the transaction.
Finally, jssmag.209 initiates the next request.
The
.Ql *
on the request indicates that XO
.Pq exactly once
was
.Em not
set.
.Ss IP Fragmentation
Fragmented Internet datagrams are printed as
.Bd -ragged -offset indent
.Po
.Cm frag Ar id
:
.Ar size
@@
.Ar offset
.Op +
.Pc
.Ed
.Pp
A
.Ql +
indicates there are more fragments.
The last fragment will have no
.Ql + .
.Pp
.Ar id
is the fragment ID.
.Ar size
is the fragment size
.Pq in bytes
excluding the IP header.
.Ar offset
is this fragment's offset
.Pq in bytes
in the original datagram.
.Pp
The fragment information is output for each fragment.
The first fragment contains the higher level protocol header and the fragment
info is printed after the protocol info.
Fragments after the first contain no higher level protocol header and the
fragment info is printed after the source and destination addresses.
For example, here is part of an FTP from arizona.edu to lbl-rtsg.arpa
over a CSNET connection that doesn't appear to handle 576 byte datagrams:
.Bd -unfilled -offset indent
arizona.ftp-data > rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@@0+)
arizona > rtsg: (frag 595a:204@@328)
rtsg.1170 > arizona.ftp-data: . ack 1536 win 2560
.Ed
.Pp
There are a couple of things to note here: first, addresses in the
2nd line don't include port numbers.
This is because the TCP protocol information is all in the first fragment
and we have no idea what the port or sequence numbers are when we print
the later fragments.
Second, the TCP sequence information in the first line is printed as if there
were 308 bytes of user data when, in fact, there are 512 bytes
.Po
308 in the first frag and 204 in the second
.Pc .
If you are looking for holes in the sequence space or trying to match up acks
with packets, this can fool you.
.Pp
A packet with the IP
.Sy don't fragment
flag is marked with a trailing
.Dq Pq Tn DF .
.Ss Timestamps
By default, all output lines are preceded by a timestamp.
The timestamp is the current clock time in the form
.Sm off
.Ar hh : mm : ss . frac
.Sm on
and is as accurate as the kernel's clock.
The timestamp reflects the time the kernel first saw the packet.
No attempt is made to account for the time lag between when the
Ethernet interface removed the packet from the wire and when the kernel
serviced the
.Dq new packet
interrupt.
.Ss IP and Protocol Checksum Offload
Some network cards support IP and/or protocol checksum offload.
Packet headers for such interfaces erroneously indicate a bad checksum,
since the checksum is not calculated until after
.Nm
sees the packet.
.Sh SEE ALSO
.\" traffic(1C), nit(4P),
.Xr ethers 3 ,
.Xr pcap 3 ,
.Xr pcap-filter 3 ,
.Xr bpf 4 ,
.Xr ip 4 ,
.Xr pf 4 ,
.Xr pflog 4 ,
.Xr tcp 4 ,
.Xr udp 4 ,
.Xr networks 5 ,
.Xr pf.os 5 ,
.Xr protocols 5 ,
.Xr services 5
.Sh STANDARDS
.Rs
.%D September 1981
.%R RFC 793
.%T Transmission Control Protocol
.Re
.Pp
.Rs
.%A P. Mockapetris
.%D November 1987
.%R RFC 1034
.%T Domain Names \(en Concepts and Facilities
.Re
.Pp
.Rs
.%A P. Mockapetris
.%D November 1987
.%R RFC 1035
.%T Domain Names \(en Implementation and Specification
.Re
.Pp
.Rs
.%D April 1988
.%R RFC 1050
.%T RPC: Remote Procedure Call Protocol Specification
.Re
.Pp
.Rs
.%A V. Jacobson
.%D February 1990
.%R RFC 1144
.%T Compressing TCP/IP Headers for Low-Speed Serial Links
.Re
.Pp
.Rs
.%A M. Mathis
.%A J. Mahdavi
.%A S. Floyd
.%A A. Romanow
.%D October 1996
.%R RFC 2018
.%T TCP Selective Acknowledgement Options
.Re
.Pp
.Rs
.%A V. Manral
.%D April 2007
.%R RFC 4835
.%T Cryptographic Algorithm Implementation Requirements for Encapsulating Security Payload (ESP) and Authentication Header (AH)
.Re
.Sh AUTHORS
.An -nosplit
.An Van Jacobson Aq Mt van@@ee.lbl.gov ,
.An Craig Leres Aq Mt leres@@ee.lbl.gov ,
and
.An Steven McCanne Aq Mt mccanne@@ee.lbl.gov ,
all of the Lawrence Berkeley Laboratory, University of California, Berkeley, CA.
.Sh BUGS
Some attempt should be made to reassemble IP fragments,
or at least to compute the right length for the higher level protocol.
.Pp
Name server inverse queries are not dumped correctly: The
.Pq empty
question section is printed rather than the real query in the answer section.
Some believe that inverse queries are themselves a bug and
prefer to fix the program generating them rather than
.Nm tcpdump .
.Pp
Apple Ethertalk DDP packets could be dumped as easily as KIP DDP packets
but aren't.
Even if we were inclined to do anything to promote the use of Ethertalk
(we aren't, LBL doesn't allow Ethertalk on any of its
networks so we'd have no way of testing this code).
.Pp
A packet trace that crosses a daylight saving time change will give
skewed time stamps
.Pq the time change is ignored .
.Pp
Filter expressions that manipulate FDDI headers assume that all FDDI packets
are encapsulated Ethernet packets.
This is true for IP, ARP, and
.Tn DECNET
Phase IV,
but is not true for protocols such as ISO CLNS.
Therefore, the filter may inadvertently accept certain packets that
do not properly match the filter expression.
@


1.90
log
@Move to /dev/bpf; ok lteo
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.89 2016/03/31 15:53:25 schwarze Exp $
d22 1
a22 1
.Dd $Mdocdate: March 31 2016 $
d47 1
a47 1
.Pa /dev/bpf .
@


1.89
log
@Don't use .Aq for syntax elements that require ASCII "<>".
Patch from Christian Heckendorf <mbie at ulmus dot me>.
OK jmc@@ bentley@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.88 2015/11/05 09:56:21 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: November 5 2015 $
d47 1
a47 1
.Pa /dev/bpf* .
@


1.88
log
@spelling; from tj
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.87 2015/09/25 14:56:33 schwarze Exp $
d22 1
a22 1
.Dd $Mdocdate: September 25 2015 $
d1245 1
a1245 1
.Aq mss 1024 .
d1716 1
a1716 1
.Pq the Dq Aq 0\-7 .
@


1.87
log
@avoid trailing .Ns, reduce .Xo and .Sm, drop redundant .Bk
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.86 2015/09/14 20:06:59 schwarze Exp $
d22 1
a22 1
.Dd $Mdocdate: September 14 2015 $
d989 1
a989 1
(the expression is quoted to prevent the shell from mis-interpreting
@


1.86
log
@Avoid .Ns right after .Pf, it's pointless.
In some cases, do additional cleanup in the immediate vicinity.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.85 2015/07/18 16:55:31 stsp Exp $
d22 1
a22 1
.Dd $Mdocdate: July 18 2015 $
a29 1
.Bk -words
d33 1
a33 2
.Oo Fl E Oo Ar espalg : Oc Ns
.Ar espkey Oc
a41 1
.Ek
d81 1
a81 7
.It Xo
.Fl E
.Sm off
.Op Ar espalg No \&:
.Ar espkey
.Xc
.Sm on
@


1.85
log
@Add an example about showing wireless frames with tcpdump(8).
Apparently sniffing wifi frames isn't a very popular addiction?!?
Requested by David Hill.
ok aja phessler mpi
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.84 2015/02/28 21:51:57 bentley Exp $
d22 1
a22 1
.Dd $Mdocdate: February 28 2015 $
d873 1
a873 1
.Pf ( Ns Ql + ,
@


1.84
log
@Reduce usage of predefined strings in manpages.

Predefined strings are not very portable across troff implementations,
and they make the source much harder to read. Usually the intended
character can be written directly.

No output changes, except for two instances where the incorrect escape
was used in the first place.

tweaks + ok schwarze@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.83 2014/06/03 02:57:29 lteo Exp $
d22 1
a22 1
.Dd $Mdocdate: June 3 2014 $
d1056 3
@


1.83
log
@Expand the IP checksum offload subsection to mention the same issue with
protocol checksum offload, where tcpdump might see bad checksums on
valid packets.

ok henning@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.82 2014/02/19 04:50:36 lteo Exp $
d22 1
a22 1
.Dd $Mdocdate: February 19 2014 $
d206 1
a206 1
.Dq Op \*(Ba Ns Em proto ,
d1488 1
a1488 1
.Sq \*(Ba
@


1.82
log
@Add pcap-filter(3) to the SEE ALSO section.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.81 2013/07/16 11:13:34 schwarze Exp $
d22 1
a22 1
.Dd $Mdocdate: July 16 2013 $
d1822 2
a1823 2
.Ss IP Checksum Offload
Some network cards support IP checksum offload.
@


1.81
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.80 2013/07/10 03:08:58 lteo Exp $
d22 1
a22 1
.Dd $Mdocdate: July 10 2013 $
d1832 1
@


1.80
log
@In the EXAMPLES section, it is not very obvious that "localnet" is not a
literal argument name due to lack of formatting, so replace it with an
example network to make it clearer (discussed with and suggested by jmc@@).

While here, fix some style nits in a sentence to make it consistent with
the other examples.

ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.79 2012/09/26 16:19:45 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: September 26 2012 $
d1894 2
a1895 2
.An Van Jacobson Aq van@@ee.lbl.gov ,
.An Craig Leres Aq leres@@ee.lbl.gov ,
d1897 1
a1897 1
.An Steven McCanne Aq mccanne@@ee.lbl.gov ,
@


1.79
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.78 2012/08/29 22:19:31 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: August 29 2012 $
d1015 3
a1017 3
To print traffic neither sourced from nor destined for local hosts
(if you gateway to one other net, this stuff should never make it onto
your local net):
d1019 1
a1019 1
.Dl # tcpdump ip and not net localnet
d1023 2
a1024 1
of each TCP connection that involves a non-local host:
d1026 1
a1026 1
# tcpdump 'tcp[13] & 3 != 0 and not src and dst net localnet'
d1029 1
a1029 1
To print only the SYN packets of http connections
@


1.78
log
@- rfc 4835 obsoletes rfc 2406
- flesh out SEE ALSO

ok sthen
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.77 2012/08/24 02:01:39 lteo Exp $
d22 1
a22 1
.Dd $Mdocdate: August 24 2012 $
d1841 1
d1847 1
d1854 1
d1861 1
d1867 1
d1874 1
d1884 1
@


1.77
log
@We maintain our own tcpdump, so remove the sentence in the BUGS section
that asks users to send bug reports to mainline tcpdump.

While here, fix two mandoc -Tlint warnings by removing unnecessary
.Pp instances.

ok deraadt jmc naddy
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.76 2012/07/10 18:07:37 sthen Exp $
d22 1
a22 1
.Dd $Mdocdate: July 10 2012 $
d91 1
a91 1
Try to decrypt RFC 2406 ESP
d1842 1
a1844 1
.%D September 1981
d1847 2
d1850 1
a1850 2
.%T Domain Names \- Concepts and Facilities
.%D November 1987
d1853 2
d1856 1
a1856 2
.%T Domain Names \- Implementation and Specification
.%D November 1987
d1859 1
d1861 1
a1861 2
.%T RPC: Remote Procedure Call
.%D April 1988
d1864 2
a1867 1
.%D February 1990
d1870 5
a1876 1
.%D October 1996
d1879 4
a1882 3
.%R RFC 2406
.%T IP Encapsulating Security Payload (ESP)
.%D November 1998
@


1.76
log
@support -A to print the ascii text of captured packets.  ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.75 2011/03/28 09:37:03 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: March 28 2011 $
a602 1
.Pp
a608 1
.Pp
a1883 5
Please send bug reports to
.Aq tcpdump@@ee.lbl.gov
or
.Aq libpcap@@ee.lbl.gov .
.Pp
@


1.75
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.74 2011/03/28 07:56:13 giovanni Exp $
d31 1
a31 1
.Op Fl adefILlNnOopqStvXx
d54 8
@


1.74
log
@
Add a couple of examples on tcpflags and icmptype filters
ok claudio@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.73 2011/02/07 00:02:50 schwarze Exp $
d22 1
a22 1
.Dd $Mdocdate: February 7 2011 $
d1042 1
a1042 1
To print only echo requests ICMP packets:
@


1.73
log
@Between groff-1.15 and groff-1.20.1, the .Ns macro was changed to no
longer suppress spacing when used at the beginning of an input line,
and mandoc now follows the same behaviour as new groff.
Thus, sweep the tree and remove useless .Ns.
Most places found by jmc@@; ok jmc@@ kristaps@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.72 2010/09/07 12:40:30 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: September 7 2010 $
d1022 4
d1041 4
@


1.72
log
@fix a formatting issue for -E;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.71 2010/01/14 04:57:06 jsing Exp $
d22 1
a22 1
.Dd $Mdocdate: January 14 2010 $
d1496 2
a1497 3
.Ar dst . Ns Ar nfs :
.Ns Ar len
.Ns Ar op args
d1499 1
a1499 1
.Ar src . Ns Ar nfs
d1502 2
a1503 1
.Ns Ar reply stat len op results
d1629 2
a1630 4
.Bd -ragged -offset indent
.Ar net . Ns Ar host .
.Ns Ar port
.Ed
@


1.71
log
@Include the link-level header in the hex output if both the -x and -e
options are specified.

ok claudio@@ sthen@@ deraadt@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.69 2009/12/03 12:45:05 sthen Exp $
d22 1
a22 1
.Dd $Mdocdate: December 3 2009 $
d77 4
a80 1
.Fl E Oo Ar espalg : Oc Ar espkey
d82 1
@


1.70
log
@blank lines not allowed outside literal context;
syntax errors found by mandoc(1), also required to fix the mandoc build;
ok jmc@@
@
text
@d263 4
a266 3
Print each packet
.Pq minus its link-level header
in hex and ASCII.
d271 4
a274 3
Print each packet
.Pq minus its link-level header
in hex.
@


1.69
log
@Adjust pflog BPF descriptions, problem pointed out by jmc@@

- sync actions with PF changes (pass/block/match not just pass/block,
and remove some binat/nat/rdr entries)

- list all reason codes in tcpdump(8)

ok henning jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.68 2009/02/14 14:45:31 sthen Exp $
d22 1
a22 1
.Dd $Mdocdate: February 14 2009 $
d927 1
a927 1

d934 1
a934 1

d1493 1
a1493 1

@


1.68
log
@document increased default snaplen; pointed out by dhill
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.67 2008/04/21 08:17:23 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate: April 21 2008 $
a714 1
.Ar bad-timestamp ,
d717 9
d727 1
a727 1
.Ar memory
a750 3
.Ar nat ,
.Ar rdr ,
.Ar binat
d752 1
a752 1
.Ar scrub
@


1.67
log
@add a short section on checksum offloading, based on a diff
from Alf Schlichting;

help/ok henning
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.66 2008/04/18 21:35:11 djm Exp $
d22 1
a22 1
.Dd $Mdocdate: April 18 2008 $
d187 2
a188 2
bytes of data from each packet rather than the default of 96.
96 bytes is adequate for IP, ICMP, TCP, and UDP,
@


1.66
log
@add filtering on direction; ok mpf@@ deraadt@@ feedback jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.65 2007/08/28 12:52:06 markus Exp $
d22 1
a22 1
.Dd $Mdocdate: August 28 2007 $
d1798 6
@


1.65
log
@add -I option for printing the interfaces;
ok hshoexer, henning, mcbridge (some time ago)
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.64 2007/05/31 19:20:29 jmc Exp $
d22 1
a22 1
.Dd $Mdocdate$
d33 1
d60 8
@


1.64
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.63 2007/01/02 18:31:21 reyk Exp $
d31 1
a31 1
.Op Fl adefLlNnOopqStvXx
d107 2
@


1.63
log
@define bpf filters to match address and header fields in IEEE 802.11
wlan frames (DLT_IEEE802_11 and DLT_IEEE802_11_RADIO linktypes). see
tcpdump(8) for details.

"Works for me" claudio@@
ok jmc@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.62 2006/05/15 09:01:39 jmc Exp $
d22 1
a22 1
.Dd May 25, 1999
@


1.62
log
@add a little bit more to -X;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.61 2006/05/15 08:56:46 jmc Exp $
d318 4
d323 1
a323 1
.Cm src and dst .
d333 7
d373 1
d375 1
a375 1
.Cm udp .
d379 2
a380 1
.Dq tcp port 21 .
d739 52
@


1.61
log
@better description for -X;

based on a diff from jean raby;
ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.60 2006/03/26 19:16:06 camield Exp $
d255 3
@


1.60
log
@nat, rdr, binat and scrub are valid pf actions to filter on

ok dhartmei
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.59 2005/10/20 03:33:20 deraadt Exp $
d252 3
a254 3
Like
.Fl x
but dumps the packet in emacs-hexl like format.
@


1.59
log
@talk about choices when describing -y; from chris.kuethe@@gmail.com ok fgsch
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.58 2005/10/07 19:43:45 mpf Exp $
d713 1
a713 1
Known actions are:
d715 4
d720 1
a720 1
.Ar block
@


1.58
log
@Add stp as supported protocol.
While there remove reference to /etc/protocols
for ether proto. Instead enumerate all supported
ethernet protocols.

OK jmc@@ a while ago.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.57 2005/09/30 20:34:26 jaredy Exp $
d265 7
@


1.57
log
@deploy .An -nosplit; ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.56 2005/07/08 12:47:28 jmc Exp $
d350 1
d603 1
a603 3
can be a number or name from
.Xr protocols 5 ,
such as
d605 1
d607 16
d624 1
a624 1
.Cm rarp .
@


1.56
log
@proto is `ip6', not `ipv6';

initial report from robert hansen;
confirmed by otto@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.55 2005/03/06 21:23:11 jmc Exp $
d1742 1
@


1.55
log
@- do not mark up punctuation
- use full "For example:" instead of "e.g.," where the latter looks too awful
- no need to use Ns before `.'
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.54 2005/03/06 21:05:49 jmc Exp $
d343 1
a343 1
.Cm ipv6 ,
d699 1
a699 1
.Cm ipv6 ,
@


1.54
log
@uppercase takes precedence over lower when sorting options;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.53 2005/03/06 18:44:50 reyk Exp $
d33 2
a34 1
.Op Fl E Oo Ar espalg: Oc Ar espkey
d68 1
a68 1
.Fl E Oo Ar espalg: Oc Ar espkey
d122 1
a122 1
E.g.,
d1234 1
a1234 1
e.g.,
d1307 1
a1307 1
e.g.,
d1377 1
a1377 1
.Ar src Ns . Ns Ar xid
d1379 1
a1379 1
.Ar dst Ns . Ns Ar nfs :
d1383 1
a1383 1
.Ar src Ns . Ns Ar nfs
d1385 1
a1385 1
.Ar dst Ns . Ns Ar xid :
d1513 1
a1513 1
.Ar net Ns . Ns Ar host Ns .
d1517 1
a1517 1
e.g.,
@


1.53
log
@add support for multiple DLTs using the -L and -y options.

ok canacar@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.52 2005/02/04 23:06:30 jmc Exp $
d31 1
a31 1
.Op Fl adeflLnNoOpqStvxX
a65 2
.It Fl e
Print the link-level header on each dump line.
d92 7
a105 5
.It Fl F Ar file
Use
.Ar file
as input for the filter expression.
Any additional expressions given on the command line are ignored.
d116 2
a125 6
.It Fl L
List the supported data link types for the interface and exit.
.It Fl n
Do not convert addresses
.Pq host addresses, port numbers, etc.
to names.
d134 7
a146 3
.It Fl O
Do not run the packet-matching code optimizer.
This is useful only if you suspect a bug in the optimizer.
d170 2
a192 12
.It Fl S
Print absolute, rather than relative, TCP sequence numbers.
.It Fl t
Do not print a timestamp on each dump line.
.It Fl tt
Print an unformatted timestamp on each dump line.
.It Fl ttt
Print day and month in timestamp.
.It Fl tttt
Print timestamp difference between packets.
.It Fl ttttt
Print timestamp difference since the first packet.
d218 10
d250 4
a260 4
.It Fl X
Like
.Fl x
but dumps the packet in emacs-hexl like format.
@


1.52
log
@update `dst port', `ip proto', `ether proto', and SEE ALSO;
ok mcbride@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.51 2005/01/22 09:18:41 jmc Exp $
d31 1
a31 1
.Op Fl adeflnNoOpqStvxX
d40 1
d124 2
d261 3
@


1.51
log
@although arguments to `ip proto' and `ether proto' are keywords, and do
need to be escaped, they are not shell keywords;

this wording seems to have been introduced when the page was mdoc'd;
it now matches (more or less) how it was, and {F,N}BSD pages;

found by naddy@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.50 2005/01/02 18:15:02 jmc Exp $
d324 1
d326 1
d328 1
d331 4
d336 1
d340 1
d342 1
d511 2
a512 2
can be a number or a name used in
.Pa /etc/services
d561 3
a563 1
can be a number or one of the names
d595 3
a597 1
can be a number or a name like
d689 4
a692 1
.It Xo Cm ip ,
a693 1
.Cm rarp ,
d697 3
a699 1
.Cm mopdl
d702 1
a702 3
.Pp
.D1 Cm ether proto Ar p
.Pp
d712 11
a722 1
.It Cm tcp , udp , icmp
d1696 3
a1698 1
.Xr pf.os 5
@


1.50
log
@"bad-timestamp" is a valid logging reason;
from joel knight;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.49 2004/09/16 11:29:51 markus Exp $
a553 1
.Cm nd ,
d556 3
a558 6
The identifiers
.Cm tcp ,
.Cm udp ,
and
.Cm icmp
are also shell keywords and must be escaped.
d588 3
a590 1
These identifiers are also shell keywords and must be escaped.
@


1.49
log
@add -T tcp to enforce interpretation as TCP
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.48 2004/07/28 09:37:26 markus Exp $
d908 1
a908 1
.Pq rule match, bad-offset, fragment, short, normalize, memory ,
@


1.48
log
@add -ttttt (timestamp difference since the first packet); ok thierry
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.47 2004/06/23 06:12:07 markus Exp $
d218 2
@


1.47
log
@-tttt prints time between packets; ok deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.46 2004/05/06 11:25:11 jmc Exp $
d198 2
@


1.46
log
@whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.45 2004/05/05 23:16:03 frantzen Exp $
d196 2
@


1.45
log
@Use RFC1323 PAWS timestamps as a logical extension to the conventional TCP
sequence numbers by taking advantage of the maximum 1KHz clock as an upperbound
on the timestamp.  Typically gains 10 to 18 bits of additional security against
blind data insertion attacks.  More if the TS Echo wasn't optional :-(
Enabled with:  scrub on !lo0 all reassemble tcp
ok dhartmei@@.  documentation help from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.44 2004/04/28 02:17:03 mcbride Exp $
d202 1
a202 1
.Cm vrrp 
@


1.44
log
@Make tcpdump print carp as carp. Printing vrrp can be forced with -T vrrp.

ok markus@@ pb@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.43 2003/10/12 10:59:47 dhartmei Exp $
d640 1
@


1.43
log
@Default snaplen is 96 not 68, from Pyun YongHyeon, ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.42 2003/09/25 13:32:58 jmc Exp $
d202 2
@


1.42
log
@- simplify macros
- sort options
- typos and formatting improvements
- sync usage() and SYNOPSIS
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.41 2003/09/04 22:14:43 jmc Exp $
d170 2
a171 2
bytes of data from each packet rather than the default of 68.
68 bytes is adequate for IP, ICMP, TCP, and UDP,
d1324 1
a1324 1
of 68 bytes may not capture enough of the packet to print.
@


1.41
log
@put escapes in the right place;
(i.e. stuff I got wrong the first time, or missed)

this includes some .Cd's with missing quotes and .Nm abuse in man4;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.40 2003/09/02 18:56:36 jmc Exp $
d30 1
d33 1
a39 1
.Op Fl E Oo Ar espalg: Oc Ar espkey
d41 1
d44 1
a44 2
prints out the headers of packets on a network interface
that match the boolean
d47 1
a47 1
.Pa /dev/bpf\&* .
d50 1
a50 1
.Bl -tag -width Ds
d61 1
a61 3
Dump packet-matching code as a
.Tn C
program fragment.
d67 26
d110 1
a110 2
searches the system interface list for the
lowest numbered, configured
d112 2
a113 1
interface (excluding loopback).
d119 2
a120 5
.Bd -ragged -offset indent
.Nm
.Fl l
| tee dat
.Ed
d122 1
a122 8
.br
.Bd -ragged -offset indent -compact
.Nm
.Fl l
> dat & tail
.Fl f
dat
.Ed
d124 2
a125 1
Do not convert addresses (i.e., host addresses, port numbers, etc.)
d136 2
a137 2
Print a guess of the possible operating system(s) of hosts that sent TCP SYN
packets.
d149 1
a149 1
.Dq ether host "{local\&-hw\&-addr}"
d153 3
a155 1
Quick (quiet?) output.
d170 4
a173 11
bytes of data from each packet rather than the
default of 68.
68 bytes is adequate for
.Tn IP ,
.Tn ICMP ,
.Tn TCP ,
and
.Tn UDP
but may truncate protocol information from name server and
.Tn NFS
packets (see below).
d181 2
a182 3
Taking larger snapshots both increases
the amount of time it takes to process packets and, effectively,
decreases the amount of packet buffering.
d186 10
a195 2
to the smallest number that will
capture the protocol information you're interested in.
d199 1
a199 2
to be interpreted as the
specified
d207 1
a207 1
.Pq Real\&-Time Applications protocol ,
d209 1
a209 1
.Pq Real\&-Time Applications control protocol ,
d211 1
a211 4
.Po
.Tn RFC 2018
No Selective Acknowledgements
.Pc ,
a216 38
.It Xo
.Fl E Oo Ar espalg: Oc Ar espkey
.Xc
Try to decrypt
.Tn RFC 2406
.Cm ESP
traffic using the specified hex key
.Ar espkey .
Supported algorithms for
.Ar espalg
are:
.Cm aes128 ,
.Cm aes128-hmac96 ,
.Cm blowfish ,
.Cm blowfish-hmac96 ,
.Cm cast ,
.Cm cast-hmac96 ,
.Cm des3 ,
.Cm des3-hmac96 ,
.Cm des
and
.Cm des-hmac96 .
The algorithm defaults to
.Cm aes128-hmac96 .
This option should be used for debugging only, since
the key will show up in
.Xr ps 1
output.
.It Fl S
Print absolute, rather than relative,
.Tn TCP
sequence numbers.
.It Fl t
Do not print a timestamp on each dump line.
.It Fl tt
Print an unformatted timestamp on each dump line.
.It Fl ttt
Print day and month in timestamp.
d218 2
a219 1
(Slightly more) verbose output.
d221 4
a224 3
and type of service information in an
.Tn IP
packet are printed.
d227 1
a227 3
For example, additional fields are printed from
.Tn NFS
reply packets.
d231 1
a231 2
rather than parsing and printing
them out.
d240 2
a241 1
Print each packet (minus its link-level header)
d250 3
a252 1
.It Ar expression
d266 1
a266 1
(name or number)
d270 1
a270 1
.It Fa type
d298 1
a298 1
.Dq src or dst port ftp\&-data .
d304 5
a308 4
For null link layers (i.e., point-to-point protocols such as
.Tn SLIP
or the pflog header)
the
d316 2
a320 3
.Cm arp ,
.Cm rarp ,
.Cm decnet ,
d322 1
d324 1
a324 1
.Cm mopdl ,
d332 2
a333 3
If there is
no protocol qualifier, all protocols consistent with the type are
assumed.
d341 1
a341 1
(except the latter is not legal syntax),
d347 1
a347 1
.Dc
d352 1
a352 1
.Pq tcp or udp
d363 7
a369 8
.Tn FDDI
headers contain Ethernet-like source
and destination addresses, and often contain Ethernet-like packet
types, so you can filter on these
.Tn FDDI
fields just as with the analogous Ethernet fields.
.Tn FDDI
headers also contain other fields,
d387 1
a387 1
to combine primitives.
d392 1
a392 1
To save typing, identical qualifier lists can be omitted.
d403 1
a403 3
True if the
.Tn IP
destination field of the packet is
d407 1
a407 3
True if the
.Tn IP
source field of the packet is
d410 1
a410 3
True if either the
.Tn IP
source or destination of the packet is
d430 1
a431 1
.Ed
d434 1
a434 4
is a name with multiple
.Tn IP
addresses, each address will
be checked for a match.
d455 1
a455 5
but neither the
.Tn IP
source nor the
.Tn IP
destination was
d471 1
a471 1
.Ar host Ns \&/ Ns Ar ehost .
d473 1
a473 4
True if the
.Tn IP
destination address of the packet has a network
number of
d482 1
a482 4
True if the
.Tn IP
source address of the packet has a network
number of
d485 2
a486 4
True if either the
.Tn IP
source or destination address of the packet has a network
number of
d489 1
a489 2
True if the packet is ip/tcp or ip/udp and has a
destination port value of
d499 2
a500 3
If a name is used, both the port
number and protocol are checked.
If a number or ambiguous name is used only the port number is checked;
d503 1
a503 2
will print both
tcp/login traffic and udp/who traffic, and
d505 1
a505 2
will print
both tcp/domain and udp/domain traffic.
d521 1
a521 3
which matches only
.Tn TCP
packets whose source port is
d528 1
a528 1
.D1 Cm len \*(Le Ar length .
d535 1
a535 1
.D1 Cm len \*(Ge Ar length .
d538 1
a538 3
True if the packet is an
.Tn IP
packet (see
d561 3
a563 6
True if the packet is an
.Tn IP
broadcast packet.
It checks for both
the all-zeroes and all-ones broadcast conventions and looks up
the local subnet mask.
d571 1
a571 1
.Cm ether Ns [0] \&& 1 !\&= 0
d574 1
a574 3
True if the packet is an
.Tn IP
multicast packet.
d584 2
a585 5
These identifiers are also shell keywords
and must be escaped.
In the case of
.Tn FDDI
(e.g.,
d587 3
a589 6
the
protocol identification comes from the 802.2 Logical Link Control
.Pq Tn LLC
header, which is usually layered on top of the
.Tn FDDI
header.
d591 2
a592 11
assumes, when filtering on the protocol identifier,
that all
.Tn FDDI
packets include an
.Tn LLC
header, and that the
.Tn LLC
header
is in so-called
.Tn SNAP
format.
d604 1
a604 2
host name support is only available on
systems that are configured to run
d617 2
a618 2
True if the packet was logged as coming from the specified interface (applies
only to packets logged by
d629 1
a629 1
Synonomous with the
d641 1
a641 1
.Ar memory .
d649 1
a649 1
Synonomous with the
d657 1
a657 1
Synonomous with the
d665 1
a665 1
.Ar block .
d708 1
a708 3
(expressed in standard
.Tn C
syntax),
d717 2
a718 2
To access
data inside the packet, use the following syntax:
d720 1
a720 1
.Ar proto Op Ar expr No : Ar size
d722 1
d735 2
a736 4
and
indicates the protocol layer for the index operation.
The byte offset, relative to the indicated protocol layer, is
given by
d739 2
a740 2
is optional and indicates the number of bytes in the
field of interest; it can be either one, two, or four, and defaults to one.
d743 1
a743 2
gives the
length of the packet.
d746 1
a746 1
.Dq Cm ether Ns [0] \&& 1 !\&= 0
d749 2
a750 4
.Dq Cm ip Ns [0] \&& 0xf !\&= 5
catches all
.Tn IP
packets with options.
d752 1
a752 1
.Dq Cm ip Ns [6:2] \&& 0x1fff \&= 0
d761 2
a762 6
always means the first
byte of the
.Tn TCP
header,
and never means the first byte of an
intervening fragment.
d765 2
a766 2
Primitives may be combined using
a parenthesized group of primitives and operators.
d768 1
a768 1
Allowed primitives and operators are:
d776 1
a776 1
.br
d779 1
a779 1
.Dq Cm \&&\&&
d783 1
a783 1
.br
d793 1
a793 2
Alternation and concatenation have equal precedence and associate
left to right.
d799 1
a799 2
If an identifier is given without a keyword, the most recent keyword
is assumed.
d824 4
a827 4
as either a single argument
or as multiple arguments, whichever is more convenient.
Generally, if the expression contains shell metacharacters, it is
easier to pass it as a single, quoted argument.
a830 4
.Bd -ragged -offset indent
.Nm
.Cm host No sundown
.Ed
d832 9
a840 8
To print traffic between helios and either hot or ace:
.Bd -ragged -offset indent
.Nm
.Cm host
helios
.Cm and
.Pq hot Cm or No ace
.Ed
d842 1
a842 10
To print all
.Tn IP
packets between ace and any host except helios:
.Bd -ragged -offset indent
.Nm
.Cm ip host
ace
.Cm and not
helios
.Ed
a844 5
.Bd -ragged -offset indent
.Nm
.Cm net
ucb\(enether
.Ed
d846 3
a848 11
To print all
.Tn FTP
traffic through internet gateway snup:
.Bd -ragged -offset indent
.Nm
\&'
.Cm gateway
snup
.Cm and
.Pq Cm port No ftp Cm or No ftp\&-data
\&'
d850 1
a850 3
The expression is quoted to prevent the shell from
mis\(eninterpreting the parentheses.
.Ed
d853 10
a862 8
.Po
if you gateway to one other net, this stuff should never make it
onto your local net
.Pc :
.Bd -ragged -offset indent
.Nm
.Cm ip and not net
localnet
d865 1
a865 16
To print the start and end packets (the
.Tn SYN
and
.Tn FIN
packets)
of each
.Tn TCP
connection that involves a non-local host:
.Bd -ragged -offset indent
.Nm
\&'
.Cm tcp Ns [13] \&& 3 !\&= 0
.Cm and not src and dst net
localnet
\&'
.Ed
d867 1
a867 9
To print
.Tn IP
packets longer than 576 bytes sent through gateway snup:
.Bd -ragged -offset indent
.Nm
\&'
.Cm gateway snup and ip Ns [2:2] \&> 576
\&'
.Ed
d869 1
a869 3
To print
.Tn IP
broadcast or multicast packets that were
d872 2
a873 6
.Bd -ragged -offset indent
.Nm
\&'
.Cm ether Ns [0] \&& 1 = 0
.Cm and ip Ns [16] \&>\&= 224
\&'
d876 6
a881 10
To print all
.Tn ICMP
packets that are not echo requests/replies (i.e., not ping packets):
.Bd -ragged -offset indent
.Nm
\&'
.Cm icmp Ns [0] != 8
.Cm and icmp Ns [0] !\&= 0
\&'
.Ed
d883 1
a883 13
To print and decrypt all
.Tn ESP
packets with
.Tn SPI
0x00001234:
.Bd -ragged -offset indent
.Nm
-E des3-hmac96:ab...def
\&'
.Cm ip Ns [20:4] = 0x00001234
\&'
.Ed
.El
d889 1
a889 3
.Pp
.Em Link Level Headers
.Pp
d897 10
a906 8
.Pa pflog ,
logging reason (rule match, bad-offset, fragment, short,
normalize, memory), action taken (pass/block), direction (in/out) and interface
information are printed out for each packet.
.Pp
On
.Tn FDDI
networks, the
d910 1
a910 2
to print the frame control
field, the source and destination addresses,
d912 3
a914 5
The frame control field governs the
interpretation of the rest of the packet.
Normal packets (such as those containing
.Tn IP
datagrams)
d917 1
a917 2
packets, with a priority
value between 0 and 7; for example,
d919 3
a921 7
Such packets
are assumed to contain an 802.2 Logical Link Control
.Pq Tn LLC
packet;
the
.Tn LLC
header is printed if it is
d923 1
a923 6
an
.Tn ISO
datagram or a
so-called
.Tn SNAP
packet.
d925 4
a928 9
The following description assumes familiarity with
the
.Tn SLIP
compression algorithm described in
.Tn RFC 1144 .
.Pp
On
.Tn SLIP
links, a direction indicator
d931 1
a931 1
for inbound ,
d942 2
a943 6
No further link information is printed for
.Cm ip
packets.
For
.Tn TCP
packets, the connection identifier is printed following the type.
d946 1
a946 1
.Cm \&*S\&+ Ns Ar n
d948 1
a948 1
.Cm \&*SA\&+ Ns Ar n ,
d951 2
a952 2
is the amount by which
the sequence number (or sequence number and ack)
d968 1
a968 1
.Pq \&+n or \&-n ,
d970 1
a970 1
.Pq \&=n .
d974 1
a974 3
For example, the following line shows an outbound compressed
.Tn TCP
packet,
d976 2
a977 3
the sequence number by 49, and the packet ID
by 6; there are 3 bytes of
data and 6 bytes of compressed header:
d980 4
a983 4
.Cm ctcp No \&*
.Cm A No \&+6
.Cm S No \&+49
.Cm I No \&+6 3
d986 1
a986 3
.Pp
.Tn Em ARP\&/ Ns Tn Em RARP Packets
.Pp
d989 2
a990 2
Here is a short sample taken from the start of an
rlogin from host rtsg to host csam:
d992 2
a993 2
arp who\&-has csam tell rtsg
arp reply csam is\&-at CSAM
d996 4
a999 4
In this example, Ethernet addresses are in caps and internet
addresses in lower case.
The first line says that rtsg sent an arp packet asking
for the Ethernet address of internet host csam.
d1006 1
a1006 1
arp who\&-has 128.3.254.6 tell 128.3.254.68
d1020 3
a1022 3
For the first packet this says the Ethernet source address is RTSG, the
destination is the Ethernet broadcast address, the type field
contained hex 0806 (type
d1025 4
a1028 10
.Pp
.Tn Em TCP Packets
.Pp
The following description assumes familiarity with
the
.Tn TCP
protocol described in
.Tn RFC 793 .
If you are not familiar
with the protocol, neither this description nor
d1032 1
a1032 1
The general format of a tcp protocol line is:
d1034 2
a1035 2
.Ar src No \&> Ar dst :
.Ar flags src\&-os data\&-seqno ack window urgent options
d1041 1
a1041 3
are the source and destination
.Tn IP
addresses and ports.
d1060 1
a1060 1
.Ar src\&-os
d1065 1
a1065 1
.Ar data\&-seqno
d1067 2
a1068 1
by the data in this packet (see example below).
d1078 2
a1079 2
are tcp options enclosed in angle brackets (e.g.,
.Aq mss 1024 ) .
d1081 1
a1081 1
.Ar src , Ar dst
d1085 1
a1085 1
The other fields depend on the contents of the packet's tcp protocol header and
d1089 1
a1089 1
.Bd -literal -offset indent
d1101 1
a1101 1
The first line says that tcp port 1023 on rtsg sent a packet
d1105 1
a1105 3
indicates that the
.Tn SYN
flag was set.
d1110 2
a1111 2
.Ar first : Ns Ar last
.Ns Po Ns Ar nbytes
d1115 1
a1115 3
which means
sequence
numbers
d1123 1
a1123 2
bytes and there was a max-segment-size option requesting an mss of
1024 bytes.
d1126 2
a1127 4
ack for rtsg's
.Tn SYN .
Rtsg then acks csam's
.Tn SYN .
d1135 1
a1135 1
sees a tcp connection, it prints the sequence number from the packet.
d1153 1
a1153 3
The
.Tn PUSH
flag is set in the packet.
d1156 2
a1157 2
Most of this data is apparently sitting in the
socket buffer since csam's receive window has gotten 19 bytes smaller.
d1161 2
d1164 1
a1164 7
.Tn Em UDP Packets
.Pp
.Tn UDP
format is illustrated by this rwho packet:
.Bd -literal -offset indent
actinide.who \&> broadcast.who: udp 84
.Ed
d1166 2
a1167 3
This says that port who on host actinide sent a udp datagram to port
who on host broadcast, the Internet
broadcast address.
d1170 2
a1171 3
Some
.Tn UDP
services are recognized (from the source or destination port number)
d1174 5
a1178 10
.Pq Tn RFC 1034/1035
and
.Tn Sun RPC
calls
.Pq Tn RFC 1050
to
.Tn NFS .
.Pp
.Tn Em UDP Name Server Requests
.Pp
d1180 3
a1182 5
the Domain Service protocol described in
.Tn RFC 1035 .
If you are not familiar
with the protocol, the following description will appear to be written
in greek.
d1192 1
d1196 1
a1196 2
h2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)
.Ed
d1199 1
a1199 1
.Pq Ar qtype Ns \&=A
d1208 1
a1208 5
The query length was 37 bytes, not including the
.Tn UDP
and
.Tn IP
protocol headers.
d1216 1
a1216 3
had been anything else, it would
have been printed between the
3 and the
d1244 1
a1244 2
.Tn AA , RA
or rcode
d1249 1
a1249 1
.Dq Bq b2\&&3\&= Ns Ar x
d1253 1
a1253 3
.Pp
.Tn Em UDP Name Server Responses
.Pp
d1265 1
d1268 1
a1268 1
.Pp
a1269 1
.br
d1280 1
a1280 5
The total size of the response was 273 bytes, excluding
.Tn UDP
and
.Tn IP
headers.
d1289 1
a1289 1
.Pq Tn C_IN
d1292 1
a1292 2
In the second example,
helios responds to query
d1294 1
a1294 1
2 with a
d1311 2
a1312 3
.Ql -
(recursion available,
.Tn RA ,
d1316 2
a1317 4
.Dq \*(Ba
(truncated message,
.Tn TC ,
set).
d1322 1
a1322 2
Name server requests and responses tend to be large and the
default
d1324 1
a1324 2
of 68 bytes may not capture enough of the packet
to print.
d1329 1
a1329 2
if you
need to seriously investigate name server traffic.
d1332 2
a1333 4
.Pp
.Tn Em NFS Requests and Replies
.Pp
.Tn Sun NFS
d1342 1
a1342 1
.br
d1348 1
a1348 1
.Bd -literal -offset indent
d1357 1
a1357 2
In the first line, host sushi sends a transaction with ID
6709 to wrl.
d1361 1
a1361 5
The request was 112 bytes, excluding the
.Tn UDP
and
.Tn IP
headers.
d1364 2
a1365 1
was a readlink (read symbolic link)
d1376 1
a1376 1
In the third line, sushi asks wrl to lookup the name
d1381 1
a1381 3
if read in conjunction with an
.Tn NFS
protocol spec.
d1388 1
a1388 1
.Bd -literal -offset indent
d1396 3
a1398 5
also prints the
.Tn IP No header Tn TTL , ID ,
and fragmentation fields, which have been omitted from this example.
In the first line, sushi asks wrl
to read 8192 bytes from file 21,11/12.195,
d1403 4
a1406 9
the packet shown on the
second line is the first fragment of the reply, and hence is only 1472
bytes long.
The other bytes will follow in subsequent fragments, but
these fragments do not have
.Tn NFS
or even
.Tn UDP
headers and so might not be
d1424 1
a1424 3
.Tn NFS
requests are very large and much of the detail won't be printed
unless
d1429 3
a1431 8
to watch
.Tn NFS
traffic.
.Pp
.Tn NFS
reply packets do not explicitly identify the
.Tn RPC
operation.
d1436 1
a1436 2
requests, and matches them to the
replies using the
d1439 6
a1444 18
If a reply does not closely follow the
corresponding request, it might not be parsable.
.Pp
.Tn Em KIP AppleTalk
.Pq Tn DDP No in Tn UDP
.Pp
AppleTalk
.Tn DDP
packets encapsulated in
.Tn UDP
datagrams are de-encapsulated and dumped as
.Tn DDP
packets
.Po
i.e., all the
.Tn UDP
header information is discarded
.Pc .
d1449 6
a1454 7
.Bd -unfilled -offset indent
.Ar number		name

1.254		ether
16.1		icsd-net
1.254.110	ace
.Ed
d1475 1
d1478 1
a1478 1
.Pp
a1479 1
.br
a1480 1
.br
d1488 2
a1489 3
In the first example,
.Tn NBP
.Pq Tn DDP No port 2
d1492 1
a1492 2
The second line is the same except the full name of the source node
is known
d1495 5
a1499 6
net jssmag node 149 to broadcast on the icsd-net
.Tn NBP
port.
The broadcast address (255) is indicated by a net name with no host
number; for this reason it is a good idea to keep node names and
net names distinct in
d1502 1
a1502 1
.Tn NBP
d1504 1
a1504 2
and
.Tn ATP
d1509 1
a1509 2
or number if no name is registered for the
protocol
d1513 2
a1514 3
.Tn NBP
packets are formatted like the following examples:
.Bd -literal
d1520 2
a1521 2
The first line is a name lookup request for laserwriters sent by net
icsdi-net host
d1525 1
a1525 1
.Pq note that it has the same id
d1528 2
a1529 3
The third line is
another reply to the same request saying host techpit has laserwriter
techpit registered on port 186.
d1531 2
a1532 3
.Tn ATP
packet formatting is demonstrated by the following example:
.Bd -literal -offset indent
d1549 1
a1549 1
Jssmag.209 initiates transaction id 12266 with host helios by requesting
d1552 1
a1552 1
.Pq the Dq Aq 0 \&- 7 .
d1558 1
a1558 1
Helios responds with 8 512\(enbyte packets.
d1562 1
a1562 1
transaction id gives the packet sequence number in the transaction
d1564 1
a1564 1
excluding the atp header.
d1567 1
a1567 3
on packet 7 indicates that the
.Tn EOM
bit was set.
d1579 1
a1579 3
.Pp
.Tn Em IP Fragmentation
.Pp
d1588 1
a1588 1
.Op \&+
d1603 1
a1603 3
excluding the
.Tn IP
header.
d1614 3
a1616 5
For example, here is part of an ftp from arizona.edu to lbl\(enrtsg.arpa
over a
.Tn CSNET
connection that doesn't appear to handle 576 byte datagrams:
.Bd -literal -offset indent
d1624 4
a1627 5
This is because the
.Tn TCP
protocol information is all in the first fragment and we have no idea
what the port or sequence numbers are when we print the later fragments.
Second, the tcp sequence information in the first line is printed as if there
d1632 1
a1632 2
If you are looking for holes
in the sequence space or trying to match up acks
d1635 3
a1637 5
A packet with the
.Tn IP
.Sy don\&'t fragment
flag is marked with a
trailing
d1639 1
a1639 3
.Pp
.Em Timestamps
.Pp
d1654 1
d1657 6
d1664 35
d1700 5
a1704 8
Van Jacobson
.Pq van@@ee.lbl.gov ,
Craig Leres
.Pq leres@@ee.lbl.gov
and Steven McCanne
.Pq mccanne@@ee.lbl.gov ,
all of the
Lawrence Berkeley Laboratory, University of California, Berkeley, CA.
d1706 4
a1709 1
Please send bug reports to tcpdump@@ee.lbl.gov or libpcap@@ee.lbl.gov.
d1711 2
a1712 4
Some attempt should be made to reassemble
.Tn IP
fragments or, at least
to compute the right length for the higher level protocol.
d1716 1
a1716 2
question section is printed rather than the real query in the answer
section.
d1721 5
a1725 10
Apple Ethertalk
.Tn DDP
packets could be dumped as easily as
.Tn KIP DDP
packets but aren't.
Even if we were inclined to do anything to promote the use of
Ethertalk (we aren't,
.Tn LBL
doesn't allow Ethertalk on any of its
networks so we'd would have no way of testing this code).
d1728 2
a1729 1
skewed time stamps (the time change is ignored).
d1731 3
a1733 9
Filter expressions that manipulate
.Tn FDDI
headers assume that all
.Tn FDDI
packets are encapsulated Ethernet packets.
This is true for
.Tn IP ,
.Tn ARP ,
and
d1736 1
a1736 2
but is not true for protocols such as
.Tn ISO CLNS .
@


1.40
log
@escape punctuation; (and a nit in openssl.1)
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.39 2003/08/28 09:41:22 jmc Exp $
d1400 1
a1400 1
.Ar id op Ns \&?
@


1.39
log
@tweak;
ok frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.38 2003/08/21 19:14:23 frantzen Exp $
d855 1
a855 1
.Dq Cm !
d1400 1
a1400 1
.Ar id op Ns ?
@


1.38
log
@print the operating system of TCP SYN packets with the -o option
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.37 2003/07/17 08:45:37 markus Exp $
d1252 3
a1254 2
.Ar -o
command line flag was passed to tcpdump.
d1945 1
a1945 1
.Xr bpf 4
@


1.37
log
@add support for ESP decryption; ok deraadt@@; feedback mickey@@;
many manpage fixes from jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.36 2003/07/14 13:46:14 jmc Exp $
d30 1
a30 1
.Op Fl adeflnNOpqStvxX
d119 6
d1223 1
a1223 1
.Ar flags data\&-seqno ack window urgent options
d1250 4
d1945 1
@


1.36
log
@macro fixes;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.35 2003/06/12 12:59:53 jmc Exp $
d38 1
d197 28
d444 2
a445 3
.Bd -literal -offset indent
.Cm ip host Ar host
.Ed
d560 2
a561 3
.Bd -literal -offset indent
.Cm tcp src port Ar port
.Ed
d571 2
a572 3
.Bd -literal -offset indent
.Cm len \*(<= Ar length .
.Ed
d578 2
a579 3
.Bd -literal -offset indent
.Cm len \*(>= Ar length .
.Ed
d744 2
a745 3
.Bd -literal -offset indent
.Cm ether proto Ar p
.Ed
d1019 13
d1704 1
a1704 1
.Bd -literal -offset indent
@


1.35
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- new sentence, new line
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.34 2003/05/14 08:50:37 canacar Exp $
d423 1
a423 1
.Cm Cm and host
a1532 1
.Pp
d1649 1
a1649 1
.Em Pq Tn DDP No in Tn UDP
d1740 1
a1740 1
.Bd -literal -offet indent
@


1.34
log
@libpcap and tcpdump now understand the new pflog datalink type.
old datalink type is still recognized.

ok henning@@ dhartmei@@ frantzen@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.33 2003/04/08 01:21:11 david Exp $
d91 2
a92 1
Useful if you want to see the data while capturing it. e.g.,
d320 2
a321 1
assumed. e.g.,
d661 1
a661 1
.Xr pf 4 ).
d669 1
a669 1
.Xr pf 4 ).
d675 2
a676 2
True if the packet was logged with the specified PF reason code.  The known
codes are:
d685 1
a685 1
.Xr pf 4 ).
d689 1
a689 1
.Xr pf 4 ).
d697 1
a697 1
.Xr pf 4 ).
d703 2
a704 2
True if PF took the specified action when the packet was logged.  Known actions
are:
d709 1
a709 1
.Xr pf 4 ).
d1138 2
a1139 2
for the Ethernet address of internet host csam. csam
replies with its Ethernet address CSAM.
d1897 2
a1898 2
.Xr bpf 4 ,
.Xr pcap 3
@


1.33
log
@invalid mdoc macros
caused words to disappear from the output
ok jmc@@ a while ago
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.32 2002/12/01 16:59:20 margarida Exp $
d666 1
a666 1
(applies only to packets logged by
d684 16
@


1.32
log
@Grammar nitpicking.
Closes PR 3005.

fgsch@@ ok
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.31 2002/05/30 06:18:00 deraadt Exp $
d788 1
a788 1
.C, udp
@


1.31
log
@repair formatting; fred@@francis.unitra.sk
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.30 2002/03/23 01:35:06 frantzen Exp $
d210 1
a210 1
packet is printed.
d996 1
a996 1
information is printed out for each packet.
d1900 1
a1900 1
question section is printed rather than real query in the answer
@


1.30
log
@document new extensions for PF logs
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.29 2001/09/03 13:27:14 jakob Exp $
d658 2
a659 1
only to packets logged by the PF firewall).
d666 2
a667 1
(applies only to packets logged by the PF firewall).
d682 3
a684 3
(applies only to packets logged by the PF firewall).
.It Cm action
.Ar act
d690 2
a691 1
(applies only to packets logged by the PF firewall).
@


1.29
log
@only print pf rules when using -e flag; <canacar@@eee.metu.edu.tr>
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.28 2001/09/03 13:25:53 jakob Exp $
d291 2
a292 1
.Tn SLIP )
d656 33
@


1.28
log
@print day and month using -ttt flag; <canacar@@eee.metu.edu.tr>
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.27 2001/07/20 19:09:49 mpech Exp $
d954 6
@


1.27
log
@we don't like:
o) .Pp before/after .Sh;
o) .Pp before/after .Sh;
o) .Nm without argument in SYNOPSIS;
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.26 2001/03/21 16:27:00 aaron Exp $
d203 2
@


1.26
log
@Fix typo, connnection -> connection
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.25 2000/11/09 17:53:25 aaron Exp $
a827 1
.Pp
a939 1
.Pp
@


1.25
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.24 2000/11/08 19:37:37 aaron Exp $
d1223 1
a1223 1
On subsequent packets of the connnection, the difference between
@


1.24
log
@- Get rid of ".Sh OPTIONS" and always use the standard options list intro.
- Move some BUGS/CAVEATS to the end of the man pages where they should go.
- Correct some .Nm usage.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.23 2000/04/27 10:07:59 itojun Exp $
d48 1
a48 1
.Bl -tag -width "-ddd"
@


1.23
log
@add -T cnfp (code exists, missing from manpage)
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.22 2000/04/15 02:15:21 aaron Exp $
d46 2
a47 1
.Sh OPTIONS
@


1.22
log
@Mostly punctuation fixes.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.21 2000/03/19 17:57:16 aaron Exp $
d176 2
@


1.21
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.20 2000/03/14 21:31:44 aaron Exp $
d1107 1
a1107 1
.Tn RFC 793.
@


1.20
log
@Suffix "i.e." and "e.g." with a comma. Just another really picky man page
commit, as we want our documentation to be as consistently formatted as
possible (it's getting there :-)).
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.19 1999/07/28 20:41:37 jakob Exp $
d89 2
a90 2
Make stdout line buffered. Useful if you want to see the data
while capturing it. E.g.,
d109 2
a110 2
Do not print domain name qualification of host names. For example,
if you specify this flag then
d117 2
a118 2
Do not run the packet-matching code optimizer. This is useful only
if you suspect a bug in the optimizer.
d120 2
a121 3
Do not put the interface
into promiscuous mode. The interface might be in promiscuous
mode for some other reason; hence,
d128 2
a129 2
Quick (quiet?) output. Print less protocol information so output
lines are shorter.
d135 2
a136 1
option. Standard input is used if
d139 1
a139 1
.Ql -  .
d163 3
a165 2
decreases the amount of packet buffering. This may cause packets to be
lost. You should limit
d201 2
a202 1
(Slightly more) verbose output. For example, the time to live
d207 2
a208 2
Even more verbose output. For example, additional fields are
printed from
d215 2
a216 1
them out. They can be analyzed later with the
d234 2
a235 1
selects which packets will be dumped. If no
d237 2
a238 2
is given, all packets on the net will be dumped. Otherwise,
only packets satisfying
d244 2
a245 1
consists of one or more primitives. Primitives usually consist of an
d248 2
a249 2
preceded by one or more qualifiers. There are three
different kinds of qualifiers:
d293 2
a294 2
Restrict the match to a particular protocol. Possible
protocols are:
d313 1
a313 1
assumed. E.g.,
d359 2
a360 1
and arithmetic expressions. All of these are described below.
d367 2
a368 1
to combine primitives. E.g.,
d372 2
a373 1
To save typing, identical qualifier lists can be omitted. E.g.,
d484 1
a484 1
.It Cm net  Ar net
d490 1
a490 1
.It Cm dst port  Ar port
d503 2
a504 2
number and protocol are checked. If a number or ambiguous name is used
only the port number is checked;
d569 2
a570 1
True if the packet is an Ethernet broadcast packet. The
d576 2
a577 1
broadcast packet. It checks for both
d581 2
a582 1
True if the packet is an Ethernet multicast packet. The
d603 2
a604 1
and must be escaped. In the case of
d739 2
a740 1
packets with options. The expression
d760 2
a761 2
Parentheses are special to the shell and must be escaped. Allowed
primitives and operators are:
d787 2
a788 1
left to right. Explicit
d794 2
a795 1
is assumed. For example,
d941 2
a942 2
is protocol dependent. The following
gives a brief description and examples of most of the formats.
d959 1
a959 1
field,  the source and destination addresses,
d962 2
a963 2
interpretation of the rest of the packet. Normal packets (such as those
containing
d1023 2
a1024 1
has changed. If it is not a special case, zero or more changes are printed.
d1062 2
a1063 2
arp/rarp output shows the type of request and its arguments. The
format is intended to be self-explanatory.
d1161 2
a1162 2
are always present. The other fields
depend on the contents of the packet's tcp protocol header and
d1179 2
a1180 1
to port login on host csam. The
d1216 2
a1217 1
The ack sequence number is a 32-bit integer. The first time
d1222 2
a1223 2
is printed. This means that sequence numbers after the
first can be interpreted
d1241 2
a1242 1
but not including byte 21. Most of this data is apparently sitting in the
d1258 2
a1259 1
broadcast address. The packet contained 84 bytes of user data.
d1306 2
a1307 2
indicates the recursion desired flag
was set. The query length was 37 bytes, not including the
d1311 2
a1312 1
protocol headers. The query operation was the normal one
d1316 2
a1317 1
field was omitted. If
d1327 2
a1328 1
and was omitted. Any other
d1333 1
a1333 1
square brackets:  If a query contains an answer, name server or
d1387 2
a1388 2
address 128.32.137.3. The total size of the response was 273 bytes,
excluding
d1392 2
a1393 1
headers. The
d1412 2
a1413 1
one name server and no authority records. The
d1415 2
a1416 2
indicates that the authoritative answer
bit was set. Since there were no answers, no
d1442 2
a1443 1
to print. Use the
d1483 2
a1484 1
the source port. The request was 112 bytes, excluding the
d1488 2
a1489 1
headers. The
d1504 3
a1506 2
in directory file 9,74/4096.6878. The data printed
depends on the operation type. The format is intended to be self-explanatory
d1529 2
a1530 1
at byte offset 24576. Wrl replies with a
d1563 2
a1564 1
is increased. Try using
d1573 2
a1574 1
operation. Instead,
d1612 2
a1613 2
The first two lines give the names of AppleTalk networks. The third
line gives the name of a particular host
d1656 2
a1657 1
port. The broadcast address (255) is indicated by a net name with no host
d1667 2
a1668 2
packets have their contents interpreted. Other protocols just dump
the protocol name
d1685 2
a1686 1
112 and broadcast on net jssmag. The nbp ID for the lookup is 190.
d1690 2
a1691 1
resource named RM1140 registered on port 250. The third line is
d1729 2
a1730 1
excluding the atp header. The
d1736 4
a1739 3
Jssmag.209 then requests that packets 3 & 5 be retransmitted. Helios
resends them then jssmag.209 releases the transaction. Finally,
jssmag.209 initiates the next request. The
d1763 2
a1764 1
indicates there are more fragments. The last fragment will have no
d1780 4
a1783 4
The fragment information is output for each fragment. The first
fragment contains the higher level protocol header and the fragment
info is printed after the protocol info. Fragments
after the first contain no higher level protocol header and the
d1795 3
a1797 2
There are a couple of things to note here:  First, addresses in the
2nd line don't include port numbers. This is because the
d1819 2
a1820 2
By default, all output lines are preceded by a timestamp. The timestamp
is the current clock time in the form
d1825 2
a1826 2
The timestamp reflects the time the kernel first saw the packet. No attempt
is made to account for the time lag between when the
d1855 2
a1856 1
section. Some believe that inverse queries are themselves a bug and
d1878 2
a1879 1
packets are encapsulated Ethernet packets. This is true for
@


1.19
log
@-  Merge some changes from tcpdump 3.4
   -a flag; attempt to convert network and broadcast addresses to names
   Improved signal handling
   Miscellaneous fixes and typos
   OSPF MD5 authentication support

-  -X flag; emacs-hexl print (including ascii)

-  Add ECN bits to TCP and IP headers

-  IKE & IPsec (ESP & AH) support

OK deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.18 1999/07/09 13:35:54 aaron Exp $
d1272 1
a1272 1
e.g.
d1351 1
a1351 1
e.g.
d1600 1
a1600 1
e.g.
@


1.18
log
@- remove all trailing whitespace
     * except when it is escaped with a `\' at the end of the line
- fix remaining .Nm usage as well
- this is from a patch I received from kwesterback@@home.com, who has been
  working on some scripts for fixing formatting errors in mdoc'd man pages

Ok, so there could be a cost/benefit debate with this commit, but since I have
the patch we might as well commit it...
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.17 1999/07/07 10:50:14 aaron Exp $
d30 1
a30 1
.Op Fl deflnNOpqStvx
d48 2
d226 4
d1119 5
a1123 1
.Pq Tn RST
a1847 1

@


1.17
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.16 1999/07/02 20:11:49 aaron Exp $
d1049 1
a1049 1
In this example, Ethernet addresses are in caps and internet 
d1271 1
a1271 1
The query 
d1285 1
a1285 1
field was omitted. If 
d1333 1
a1333 1
.Ar a 
d1362 1
a1362 1
and 
d1460 2
a1461 2
Wrl replies with a 
.Ar stat 
d1490 1
a1490 1
at byte offset 24576. Wrl replies with a 
d1538 1
a1538 1
.Ar xid 
d1587 1
a1587 1
.Ar net Ns . Ns Ar host Ns . 
@


1.16
log
@consistent .Dd usage; proper format is: .Dd Month DD, YYYY
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.15 1999/07/01 17:07:03 aaron Exp $
d23 1
a24 1
.Dt TCPDUMP 8
@


1.15
log
@new mdoc'd bootpef(8), bootptest(8), vttest(1) man pages; kwesterback@@home.com
also repairs to mdoc.samples(7) and tcpdump(8)
@
text
@d1 1
a1 1
.\"	$OpenBSD: tcpdump.8,v 1.14 1999/06/13 14:05:25 aaron Exp $
d22 1
a22 1
.Dd 25 May, 1999
@


1.14
log
@new mdoc tcpdump(8) man page, needs a bit more cleanup; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d360 1
a360 1
.Dq tcp dst port ftp or ftp\-data or domain
@


1.13
log
@ethernet -> Ethernet, other repairs
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.12 1999/05/01 09:01:46 deraadt Exp $ (LBL)
a4 1
.\" All rights reserved.
d22 22
a43 68
.TH TCPDUMP 8  "22 June 1996"
.SH NAME
tcpdump \- dump traffic on a network
.SH SYNOPSIS
.na
.B tcpdump
[
.B \-deflnNOpqStvx
] [
.B \-c
.I count
] [
.B \-F
.I file
]
.br
.ti +8
[
.B \-i
.I interface
] [
.B \-r
.I file
]
[
.B \-s
.I snaplen
]
.br
.ti +8
[
.B \-T
.I type
]
[
.B \-w
.I file
]
[
.I expression
]
.br
.ad
.SH DESCRIPTION
.LP
\fITcpdump\fP prints out the headers of packets on a network interface
that match the boolean \fIexpression\fP.
.B Under SunOS with nit or bpf:
To run
.I tcpdump
you must have read access to
.I /dev/net
or 
.IR /dev/bpf* .
.B Under Solaris with dlpi:
You must have read access to the network pseudo device, e.g.
.IR /dev/le .
.B Under HP-UX with dlpi:
You must be root or it must be installed setuid to root.
.B Under IRIX with snoop:
You must be root or it must be installed setuid to root.
.B Under Ultrix:
Once the super-user has enabled
promiscuous-mode operation using
.IR pfconfig (8),
any user may run
.BR tcpdump .
.B Under BSD:
d45 8
a52 7
.IR /dev/bpf* .
.SH OPTIONS
.TP
.B \-c
Exit after receiving \fIcount\fP packets.
.TP
.B \-d
d55 1
a55 2
.TP
.B \-dd
d57 1
a57 1
.B C
d59 4
a62 5
.TP
.B \-ddd
Dump packet-matching code as decimal numbers (preceded with a count).
.TP
.B \-e
d64 5
a68 4
.TP
.B \-f
Print `foreign' internet addresses numerically rather than symbolically
(this option is intended to get around serious brain damage in
d70 15
a84 10
internet numbers).
.TP
.B \-F
Use \fIfile\fP as input for the filter expression.
An additional expression given on the command line is ignored.
.TP
.B \-i
Listen on \fIinterface\fP.
If unspecified, \fItcpdump\fP searches the system interface list for the
lowest numbered, configured up interface (excluding loopback).
d86 9
a94 4
.TP
.B \-l
Make stdout line buffered.  Useful if you want to see the data
while capturing it.  E.g.,
d96 20
a115 13
``tcpdump\ \ \-l\ \ |\ \ tee dat'' or
``tcpdump\ \ \-l \ \ > dat\ \ &\ \ tail\ \ \-f\ \ dat''.
.TP
.B \-n
Don't convert addresses (i.e., host addresses, port numbers, etc.) to names.
.TP
.B \-N
Don't print domain name qualification of host names.  E.g.,
if you give this flag then \fItcpdump\fP will print ``nic''
instead of ``nic.ddn.mil''.
.TP
.B \-O
Do not run the packet-matching code optimizer.  This is useful only
d117 11
a127 9
.TP
.B \-p
\fIDon't\fP put the interface
into promiscuous mode.  Note that the interface might be in promiscuous
mode for some other reason; hence, `-p' cannot be used as an abbreviation for
`ether host {local-hw-addr}' or `ether broadcast'.
.TP
.B \-q
Quick (quiet?) output.  Print less protocol information so output
d129 29
a157 12
.TP
.B \-r
Read packets from \fIfile\fR (which was created with the -w option).
Standard input is used if \fIfile\fR is ``-''.
.TP
.B \-s
Snarf \fIsnaplen\fP bytes of data from each packet rather than the
default of 68 (with SunOS's NIT, the minimum is actually 96).
68 bytes is adequate for IP, ICMP, TCP
and UDP but may truncate protocol information from name server and NFS
packets (see below).  Packets truncated because of a limited snapshot
are indicated in the output with ``[|\fIproto\fP]'', where \fIproto\fP
d159 1
a159 1
Note that taking larger snapshots both increases
d161 4
a164 2
decreases the amount of packet buffering.  This may cause packets to be
lost.  You should limit \fIsnaplen\fP to the smallest number that will
d166 30
a195 19
.TP
.B \-T
Force packets selected by "\fIexpression\fP" to be interpreted as the
specified \fItype\fR. Currently known types are
\fBrpc\fR (Remote Procedure Call),
\fBrtp\fR (Real-Time Applications protocol),
\fBrtcp\fR (Real-Time Applications control protocol),
\fBsack\fR (RFC 2018 Selective Acknowledgements),
\fBvat\fR (Visual Audio Tool),
and
\fBwb\fR (distributed White Board).
.TP
.B \-S
Print absolute, rather than relative, TCP sequence numbers.
.TP
.B \-t
\fIDon't\fP print a timestamp on each dump line.
.TP
.B \-tt
d197 24
a220 16
.TP
.B \-v
(Slightly more) verbose output.  For example, the time to live
and type of service information in an IP packet is printed.
.TP
.B \-vv
Even more verbose output.  For example, additional fields are
printed from NFS reply packets.
.TP
.B \-w
Write the raw packets to \fIfile\fR rather than parsing and printing
them out.  They can later be printed with the \-r option.
Standard output is used if \fIfile\fR is ``-''.
.TP
.B \-x
Print each packet (minus its link level header) in hex.
d222 1
a222 1
.I snaplen
d224 14
a237 11
.IP "\fI expression\fP"
.RS
selects which packets will be dumped.  If no \fIexpression\fP
is given, all packets on the net will be dumped.  Otherwise,
only packets for which \fIexpression\fP is `true' will be dumped.
.LP
The \fIexpression\fP consists of one or more
.I primitives.
Primitives usually consist of an
.I id
(name or number) preceded by one or more qualifiers.  There are three
d239 5
a243 2
.IP \fItype\fP
qualifiers say what kind of thing the id name or number refers to.
d245 2
a246 2
.BR host ,
.B net
d248 7
a254 4
.BR port .
E.g., `host foo', `net 128.3', `port 20'.  If there is no type
qualifier,
.B host
d256 3
a258 3
.IP \fIdir\fP
qualifiers specify a particular transfer direction to and/or from
.I id.
d260 13
a272 9
.BR src ,
.BR dst ,
.B "src or dst"
and
.B "src and"
.BR dst .
E.g., `src foo', `dst net 128.3', `src or dst port ftp-data'.  If
there is no dir qualifier,
.B "src or dst"
d274 4
a277 2
For `null' link layers (i.e. point to point protocols such as slip) the
.B inbound
d279 1
a279 1
.B outbound
d281 52
a332 24
.IP \fIproto\fP
qualifiers restrict the match to a particular protocol.  Possible
protos are:
.BR ether ,
.BR fddi ,
.BR ip ,
.BR arp ,
.BR rarp ,
.BR decnet ,
.BR lat ,
.BR moprc ,
.BR mopdl ,
.B tcp
and
.BR udp .
E.g., `ether src foo', `arp net 128.3', `tcp port 21'.  If there is
no proto qualifier, all protocols consistent with the type are
assumed.  E.g., `src foo' means `(ip or arp or rarp) src foo'
(except the latter is not legal syntax), `net bar' means `(ip or
arp or rarp) net bar' and `port 53' means `(tcp or udp) port 53'.
.LP
[`fddi' is actually an alias for `ether'; the parser treats them
identically as meaning ``the data link level used on the specified
network interface.''  FDDI headers contain Ethernet-like source
d334 16
a349 12
types, so you can filter on these FDDI fields just as with the
analogous Ethernet fields.  FDDI headers also contain other fields,
but you cannot name them explicitly in a filter expression.]
.LP
In addition to the above, there are some special `primitive' keywords
that don't follow the pattern:
.BR gateway ,
.BR broadcast ,
.BR less ,
.B greater
and arithmetic expressions.  All of these are described below.
.LP
d351 2
a352 2
.BR and ,
.B or
d354 12
a365 6
.B not
to combine primitives.  E.g., `host foo and not port ftp and not port ftp-data'.
To save typing, identical qualifier lists can be omitted.  E.g.,
`tcp dst port ftp or ftp-data or domain' is exactly the same as
`tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain'.
.LP
d367 6
a372 2
.IP "\fBdst host \fIhost\fR"
True if the IP destination field of the packet is \fIhost\fP,
d374 23
a396 11
.IP "\fBsrc host \fIhost\fR"
True if the IP source field of the packet is \fIhost\fP.
.IP "\fBhost \fIhost\fP
True if either the IP source or destination of the packet is \fIhost\fP.
Any of the above host expressions can be prepended with the keywords,
\fBip\fP, \fBarp\fP, or \fBrarp\fP as in:
.in +.5i
.nf
\fBip host \fIhost\fR
.fi
.in -.5i
d398 12
a409 6
.in +.5i
.nf
\fBether proto \fI\\ip\fB and host \fIhost\fR
.fi
.in -.5i
If \fIhost\fR is a name with multiple IP addresses, each address will
d411 66
a476 32
.IP "\fBether dst \fIehost\fP
True if the Ethernet destination address is \fIehost\fP.  \fIEhost\fP
may be either a name from /etc/ethers or a number (see
.IR ethers (3N)
for numeric format).
.IP "\fBether src \fIehost\fP
True if the Ethernet source address is \fIehost\fP.
.IP "\fBether host \fIehost\fP
True if either the Ethernet source or destination address is \fIehost\fP.
.IP "\fBgateway\fP \fIhost\fP
True if the packet used \fIhost\fP as a gateway.  I.e., the Ethernet
source or destination address was \fIhost\fP but neither the IP source
nor the IP destination was \fIhost\fP.  \fIHost\fP must be a name and
must be found in both /etc/hosts and /etc/ethers.  (An equivalent
expression is
.in +.5i
.nf
\fBether host \fIehost \fBand not host \fIhost\fR
.fi
.in -.5i
which can be used with either names or numbers for \fIhost / ehost\fP.)
.IP "\fBdst net \fInet\fR"
True if the IP destination address of the packet has a network
number of \fInet\fP. \fINet\fP may be either a name from /etc/networks
or a network number (see \fInetworks(5)\fP for details).
.IP "\fBsrc net \fInet\fR"
True if the IP source address of the packet has a network
number of \fInet\fP.
.IP "\fBnet \fInet\fR"
True if either the IP source or destination address of the packet has a network
number of \fInet\fP.
.IP "\fBdst port \fIport\fR"
d478 8
a485 3
destination port value of \fIport\fP.
The \fIport\fP can be a number or a name used in /etc/services (see
.IR tcp (4P)
d487 1
a487 1
.IR udp (4P)).
d489 32
a520 18
number and protocol are checked.  If a number or ambiguous name is used,
only the port number is checked (e.g., \fBdst port 513\fR will print both
tcp/login traffic and udp/who traffic, and \fBport domain\fR will print
both tcp/domain and udp/domain traffic).
.IP "\fBsrc port \fIport\fR"
True if the packet has a source port value of \fIport\fP.
.IP "\fBport \fIport\fR"
True if either the source or destination port of the packet is \fIport\fP.
Any of the above port expressions can be prepended with the keywords,
\fBtcp\fP or \fBudp\fP, as in:
.in +.5i
.nf
\fBtcp src port \fIport\fR
.fi
.in -.5i
which matches only tcp packets whose source port is \fIport\fP.
.IP "\fBless \fIlength\fR"
True if the packet has a length less than or equal to \fIlength\fP.
d522 7
a528 7
.in +.5i
.nf
\fBlen <= \fIlength\fP.
.fi
.in -.5i
.IP "\fBgreater \fIlength\fR"
True if the packet has a length greater than or equal to \fIlength\fP.
d530 27
a556 15
.in +.5i
.nf
\fBlen >= \fIlength\fP.
.fi
.in -.5i
.IP "\fBip proto \fIprotocol\fR"
True if the packet is an ip packet (see
.IR ip (4P))
of protocol type \fIprotocol\fP.
\fIProtocol\fP can be a number or one of the names
\fIicmp\fP, \fIudp\fP, \fInd\fP, or \fItcp\fP.
Note that the identifiers \fItcp\fP, \fIudp\fP, and \fIicmp\fP are also
keywords and must be escaped via backslash (\\), which is \\\\ in the C-shell.
.IP "\fBether broadcast\fR"
True if the packet is an Ethernet broadcast packet.  The \fIether\fP
d558 5
a562 3
.IP "\fBip broadcast\fR"
True if the packet is an IP broadcast packet.  It checks for both
the all-zeroes and all-ones broadcast conventions, and looks up
d564 3
a566 2
.IP "\fBether multicast\fR"
True if the packet is an Ethernet multicast packet.  The \fIether\fP
d568 23
a590 10
This is shorthand for `\fBether[0] & 1 != 0\fP'.
.IP "\fBip multicast\fR"
True if the packet is an IP multicast packet.
.IP  "\fBether proto \fIprotocol\fR"
True if the packet is of ether type \fIprotocol\fR.
\fIProtocol\fP can be a number or a name like
\fIip\fP, \fIarp\fP, or \fIrarp\fP.
Note these identifiers are also keywords
and must be escaped via backslash (\\).
[In the case of FDDI (e.g., `\fBfddi protocol arp\fR'), the
d592 48
a639 17
(LLC) header, which is usually layered on top of the FDDI header.
\fITcpdump\fP assumes, when filtering on the protocol identifier,
that all FDDI packets include an LLC header, and that the LLC header
is in so-called SNAP format.]
.IP "\fBdecnet src \fIhost\fR"
True if the DECNET source address is
.IR host ,
which may be an address of the form ``10.123'', or a DECNET host
name.  [DECNET host name support is only available on Ultrix systems
that are configured to run DECNET.]
.IP "\fBdecnet dst \fIhost\fR"
True if the DECNET destination address is
.IR host .
.IP "\fBdecnet host \fIhost\fR"
True if either the DECNET source or destination address is
.IR host .
.IP "\fBip\fR, \fBarp\fR, \fBrarp\fR, \fBdecnet\fR"
d641 14
a654 7
.in +.5i
.nf
\fBether proto \fIp\fR
.fi
.in -.5i
where \fIp\fR is one of the above protocols.
.IP "\fBlat\fR, \fBmoprc\fR, \fBmopdl\fR"
d656 28
a683 21
.in +.5i
.nf
\fBether proto \fIp\fR
.fi
.in -.5i
where \fIp\fR is one of the above protocols.
Note that
\fItcpdump\fP does not currently know how to parse these protocols.
.IP  "\fBtcp\fR, \fBudp\fR, \fBicmp\fR"
Abbreviations for:
.in +.5i
.nf
\fBip proto \fIp\fR
.fi
.in -.5i
where \fIp\fR is one of the above protocols.
.IP  "\fIexpr relop expr\fR"
True if the relation holds, where \fIrelop\fR is one of >, <, >=, <=, =, !=,
and \fIexpr\fR is an arithmetic expression composed of integer constants
(expressed in standard C syntax), the normal binary operators
[+, -, *, /, &, |], a length operator, and special packet data accessors.
d686 16
a701 7
.in +.5i
.nf
\fIproto\fB [ \fIexpr\fB : \fIsize\fB ]\fR
.fi
.in -.5i
\fIProto\fR is one of \fBether, fddi,
ip, arp, rarp, tcp, udp, \fRor \fBicmp\fR, and
d704 4
a707 2
given by \fIexpr\fR.
\fISize\fR is optional and indicates the number of bytes in the
d709 3
a711 1
The length operator, indicated by the keyword \fBlen\fP, gives the
d713 10
a722 5

For example, `\fBether[0] & 1 != 0\fP' catches all multicast traffic.
The expression `\fBip[0] & 0xf != 5\fP'
catches all IP packets with options. The expression
`\fBip[6:2] & 0x1fff = 0\fP'
d724 4
a727 1
This check is implicitly applied to the \fBtcp\fP and \fBudp\fP
d729 7
a735 2
For instance, \fBtcp[0]\fP always means the first
byte of the TCP \fIheader\fP, and never means the first byte of an
d737 29
a765 12
.LP
Primitives may be combined using:
.IP
A parenthesized group of primitives and operators
(parentheses are special to the Shell and must be escaped).
.IP
Negation (`\fB!\fP' or `\fBnot\fP').
.IP
Concatenation (`\fB&&\fP' or `\fBand\fP').
.IP
Alternation (`\fB||\fP' or `\fBor\fP').
.LP
d768 3
a770 1
left to right.  Note that explicit \fBand\fR tokens, not juxtaposition,
d772 1
a772 1
.LP
d774 8
a781 7
is assumed.
For example,
.in +.5i
.nf
\fBnot host vs and ace\fR
.fi
.in -.5i
d783 7
a789 5
.in +.5i
.nf
\fBnot host vs and host ace\fR
.fi
.in -.5i
d791 8
a798 7
.in +.5i
.nf
\fBnot ( host vs or ace )\fR
.fi
.in -.5i
.LP
Expression arguments can be passed to tcpdump as either a single argument
d800 1
a800 1
Generally, if the expression contains Shell metacharacters, it is
d803 28
a830 23
.SH EXAMPLES
.LP
To print all packets arriving at or departing from \fIsundown\fP:
.RS
.nf
\fBtcpdump host sundown\fP
.fi
.RE
.LP
To print traffic between \fIhelios\fR and either \fIhot\fR or \fIace\fR:
.RS
.nf
\fBtcpdump host helios and \\( hot or ace \\)\fP
.fi
.RE
.LP
To print all IP packets between \fIace\fR and any host except \fIhelios\fR:
.RS
.nf
\fBtcpdump ip host ace and not helios\fP
.fi
.RE
.LP
d832 22
a853 17
.RS
.nf
.B
tcpdump net ucb-ether
.fi
.RE
.LP
To print all ftp traffic through internet gateway \fIsnup\fP:
(note that the expression is quoted to prevent the shell from
(mis-)interpreting the parentheses):
.RS
.nf
.B
tcpdump 'gateway snup and (port ftp or ftp-data)'
.fi
.RE
.LP
d855 41
a895 28
(if you gateway to one other net, this stuff should never make it
onto your local net).
.RS
.nf
.B
tcpdump ip and not net \fIlocalnet\fP
.fi
.RE
.LP
To print the start and end packets (the SYN and FIN packets) of each
TCP conversation that involves a non-local host.
.RS
.nf
.B
tcpdump 'tcp[13] & 3 != 0 and not src and dst net \fIlocalnet\fP'
.fi
.RE
.LP
To print IP packets longer than 576 bytes sent through gateway \fIsnup\fP:
.RS
.nf
.B
tcpdump 'gateway snup and ip[2:2] > 576'
.fi
.RE
.LP
To print IP broadcast or multicast packets that were
.I not
d897 24
a920 18
.RS
.nf
.B
tcpdump 'ether[0] & 1 = 0 and ip[16] >= 224'
.fi
.RE
.LP
To print all ICMP packets that are not echo requests/replies (i.e., not
ping packets):
.RS
.nf
.B
tcpdump 'icmp[0] != 8 and icmp[0] != 0'
.fi
.RE
.SH OUTPUT FORMAT
.LP
The output of \fItcpdump\fP is protocol dependent.  The following
d922 6
a927 8
.de HD
.sp 1.5
.B
..
.HD
Link Level Headers
.LP
If the '-e' option is given, the link level header is printed out.
d930 50
a979 15
.LP
On FDDI networks, the  '-e' option causes \fItcpdump\fP to print
the `frame control' field,  the source and destination addresses,
and the packet length.  (The `frame control' field governs the
interpretation of the rest of the packet.)  Normal packets (such
as those containing IP datagrams) are `async' packets, with a priority
value between 0 and 7; for example, `\fBasync4\fR'.  Such packets
are assumed to contain an 802.2 Logical Link Control (LLC) packet;
the LLC header is printed if it is \fInot\fR an ISO datagram or a
so-called SNAP packet.
.LP
\fI(N.B.: The following description assumes familiarity with
the SLIP compression algorithm described in RFC-1144.)\fP
.LP
On SLIP links, a direction indicator (``I'' for inbound, ``O'' for outbound),
d982 11
a992 3
The three types are \fIip\fP, \fIutcp\fP, and \fIctcp\fP.
No further link information is printed for \fIip\fR packets.
For TCP packets, the connection identifier is printed following the type.
d995 24
a1018 7
\fB*S+\fIn\fR and \fB*SA+\fIn\fR, where \fIn\fR is the amount by which
the sequence number (or sequence number and ack) has changed.
If it is not a special case,
zero or more changes are printed.
A change is indicated by U (urgent pointer), W (window), A (ack),
S (sequence number), and I (packet ID), followed by a delta (+n or -n),
or a new value (=n).
d1021 4
a1024 2
.LP
For example, the following line shows an outbound compressed TCP packet,
d1026 2
a1027 1
the sequence number by 49, and the packet ID by 6; there are 3 bytes of
d1029 12
a1040 9
.RS
.nf
\fBO ctcp * A+6 S+49 I+6 3 (6)\fP
.fi
.RE
.HD
ARP/RARP Packets
.LP
Arp/rarp output shows the type of request and its arguments.  The
d1042 9
a1050 10
Here is a short sample taken from the start of an `rlogin' from
host \fIrtsg\fP to host \fIcsam\fP:
.RS
.nf
.sp .5
\f(CWarp who-has csam tell rtsg
arp reply csam is-at CSAM\fP
.sp .5
.fi
.RE
d1052 15
a1066 14
for the Ethernet address of internet host csam.  Csam
replies with its Ethernet address (in this example, Ethernet addresses
are in caps and internet addresses in lower case).
.LP
This would look less redundant if we had done \fBtcpdump \-n\fP:
.RS
.nf
.sp .5
\f(CWarp who-has 128.3.254.6 tell 128.3.254.68
arp reply 128.3.254.6 is-at 02:07:01:00:01:c4\fP
.fi
.RE
.LP
If we had done \fBtcpdump \-e\fP, the fact that the first packet is
d1068 5
a1072 8
.RS
.nf
.sp .5
\f(CWRTSG Broadcast 0806  64: arp who-has csam tell rtsg
CSAM RTSG 0806  64: arp reply csam is-at CSAM\fP
.sp .5
.fi
.RE
d1075 16
a1090 9
contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.
.HD
TCP Packets
.LP
\fI(N.B.:The following description assumes familiarity with
the TCP protocol described in RFC-793.  If you are not familiar
with the protocol, neither this description nor tcpdump will
be of much use to you.)\fP
.LP
d1092 27
a1118 11
.RS
.nf
.sp .5
\fIsrc > dst: flags data-seqno ack window urgent options\fP
.sp .5
.fi
.RE
\fISrc\fP and \fIdst\fP are the source and destination IP
addresses and ports.  \fIFlags\fP are some combination of S (SYN),
F (FIN), P (PUSH) or R (RST) or a single `.' (no flags).
\fIData-seqno\fP describes the portion of sequence space covered
d1120 16
a1135 8
\fIAck\fP is sequence number of the next data expected the other
direction on this connection.
\fIWindow\fP is the number of bytes of receive buffer space available
the other direction on this connection.
\fIUrg\fP indicates there is `urgent' data in the packet.
\fIOptions\fP are tcp options enclosed in angle brackets (e.g., <mss 1024>).
.LP
\fISrc, dst\fP and \fIflags\fP are always present.  The other fields
d1138 4
a1141 7
.LP
Here is the opening portion of an rlogin from host \fIrtsg\fP to
host \fIcsam\fP.
.RS
.nf
.sp .5
\s-2\f(CWrtsg.1023 > csam.login: S 768512:768512(0) win 4096 <mss 1024>
d1149 3
a1151 4
csam.login > rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1\fP\s+2
.sp .5
.fi
.RE
d1153 5
a1157 2
to port \fIlogin\fP
on csam.  The \fBS\fP indicates that the \fISYN\fP flag was set.
d1159 17
a1175 3
(The notation is `first:last(nbytes)' which means `sequence
numbers \fIfirst\fP
up to but not including \fIlast\fP which is \fInbytes\fP bytes of user data'.)
d1179 1
a1179 1
.LP
d1181 7
a1187 2
ack for rtsg's SYN.  Rtsg then acks csam's SYN.  The `.' means no
flags were set.
d1189 4
a1192 4
Note that the ack sequence
number is a small integer (1).  The first time \fBtcpdump\fP sees a
tcp `conversation', it prints the sequence number from the packet.
On subsequent packets of the conversation, the difference between
d1194 1
a1194 1
is printed.  This means that sequence numbers after the
d1196 6
a1201 2
as relative byte positions in the conversation's data stream (with the
first data byte each direction being `1').  `-S' will override this
d1203 9
a1211 4
.LP
On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20
in the rtsg \(-> csam side of the conversation).
The PUSH flag is set in the packet.
d1213 1
a1213 1
but not including byte 21.  Most of this data is apparently sitting in the
d1218 32
a1249 25
.HD
.B
UDP Packets
.LP
UDP format is illustrated by this rwho packet:
.RS
.nf
.sp .5
\f(CWactinide.who > broadcast.who: udp 84\fP
.sp .5
.fi
.RE
This says that port \fIwho\fP on host \fIactinide\fP sent a udp
datagram to port \fIwho\fP on host \fIbroadcast\fP, the Internet
broadcast address.  The packet contained 84 bytes of user data.
.LP
Some UDP services are recognized (from the source or destination
port number) and the higher level protocol information printed.
In particular, Domain Name service requests (RFC-1034/1035) and Sun
RPC calls (RFC-1050) to NFS.
.HD
UDP Name Server Requests
.LP
\fI(N.B.:The following description assumes familiarity with
the Domain Service protocol described in RFC-1035.  If you are not familiar
d1251 2
a1252 2
in greek.)\fP
.LP
d1254 45
a1298 20
.RS
.nf
.sp .5
\fIsrc > dst: id op? flags qtype qclass name (len)\fP
.sp .5
\f(CWh2opolo.1538 > helios.domain: 3+ A? ucbvax.berkeley.edu. (37)\fP
.sp .5
.fi
.RE
Host \fIh2opolo\fP asked the domain server on \fIhelios\fP for an
address record (qtype=A) associated with the name \fIucbvax.berkeley.edu.\fP
The query id was `3'.  The `+' indicates the \fIrecursion desired\fP flag
was set.  The query length was 37 bytes, not including the UDP and
IP protocol headers.  The query operation was the normal one, \fIQuery\fP,
so the op field was omitted.  If the op had been anything else, it would
have been printed between the `3' and the `+'.
Similarly, the qclass was the normal one,
\fIC_IN\fP, and omitted.  Any other qclass would have been printed
immediately after the `A'.
.LP
d1302 7
a1308 2
.IR ancount ,
.IR nscount ,
d1310 3
a1312 2
.I arcount
are printed as `[\fIn\fPa]', `[\fIn\fPn]' or  `[\fIn\fPau]' where \fIn\fP
d1314 15
a1328 6
If any of the response bits are set (AA, RA or rcode) or any of the
`must be zero' bits are set in bytes two and three, `[b2&3=\fIx\fP]'
is printed, where \fIx\fP is the hex value of header bytes two and three.
.HD
UDP Name Server Responses
.LP
d1330 21
a1350 11
.RS
.nf
.sp .5
\fIsrc > dst:  id op rcode flags a/n/au type class data (len)\fP
.sp .5
\f(CWhelios.domain > h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)
helios.domain > h2opolo.1537: 2 NXDomain* 0/1/0 (97)\fP
.sp .5
.fi
.RE
In the first example, \fIhelios\fP responds to query id 3 from \fIh2opolo\fP
d1352 49
a1400 14
The first answer record is type A (address) and its data is internet
address 128.32.137.3.  The total size of the response was 273 bytes,
excluding UDP and IP headers.  The op (Query) and response code
(NoError) were omitted, as was the class (C_IN) of the A record.
.LP
In the second example, \fIhelios\fP responds to query 2 with a
response code of non-existent domain (NXDomain) with no answers,
one name server and no authority records.  The `*' indicates that
the \fIauthoritative answer\fP bit was set.  Since there were no
answers, no type, class or data were printed.
.LP
Other flag characters that might appear are `\-' (recursion available,
RA, \fInot\fP set) and `|' (truncated message, TC, set).  If the
`question' section doesn't contain exactly one entry, `[\fIn\fPq]'
d1402 12
a1413 5
.LP
Note that name server requests and responses tend to be large and the
default \fIsnaplen\fP of 68 bytes may not capture enough of the packet
to print.  Use the \fB\-s\fP flag to increase the snaplen if you
need to seriously investigate name server traffic.  `\fB\-s 128\fP'
d1415 20
a1434 12

.HD
NFS Requests and Replies
.LP
Sun NFS (Network File System) requests and replies are printed as:
.RS
.nf
.sp .5
\fIsrc.xid > dst.nfs: len op args\fP
\fIsrc.nfs > dst.xid: reply stat len op results\fP
.sp .5
\f(CW
d1441 17
a1457 10
\fP
.sp .5
.fi
.RE
In the first line, host \fIsushi\fP sends a transaction with id \fI6709\fP
to \fIwrl\fP (note that the number following the src host is a
transaction id, \fInot\fP the source port).  The request was 112 bytes,
excluding the UDP and IP headers.  The operation was a \fIreadlink\fP
(read symbolic link) on file handle (\fIfh\fP) 21,24/10.731657119.
(If one is lucky, as in this case, the file handle can be interpreted
d1459 17
a1475 10
generation number.)
\fIWrl\fP replies `ok' with the contents of the link.
.LP
In the third line, \fIsushi\fP asks \fIwrl\fP to lookup the name
`\fIxcolors\fP' in directory file 9,74/4096.6878.  Note that the data printed
depends on the operation type.  The format is intended to be self-explanatory
if read in conjunction with
an NFS protocol spec.
.LP
If the \-v (verbose) flag is given, additional information is printed.
d1477 1
a1477 4
.RS
.nf
.sp .5
\f(CW
d1482 12
a1493 8
\fP
.sp .5
.fi
.RE
(\-v also prints the IP header TTL, ID, and fragmentation fields,
which have been omitted from this example.)  In the first line,
\fIsushi\fP asks \fIwrl\fP to read 8192 bytes from file 21,11/12.195,
at byte offset 24576.  \fIWrl\fP replies `ok'; the packet shown on the
d1495 46
a1540 16
bytes long (the other bytes will follow in subsequent fragments, but
these fragments do not have NFS or even UDP headers and so might not be
printed, depending on the filter expression used).  Because the \-v flag
is given, some of the file attributes (which are returned in addition
to the file data) are printed: the file type (``REG'', for regular file),
the file mode (in octal), the uid and gid, and the file size.
.LP
If the \-v flag is given more than once, even more details are printed.
.LP
Note that NFS requests are very large and much of the detail won't be printed
unless \fIsnaplen\fP is increased.  Try using `\fB\-s 192\fP' to watch
NFS traffic.
.LP
NFS reply packets do not explicitly identify the RPC operation.  Instead,
\fItcpdump\fP keeps track of ``recent'' requests, and matches them to the
replies using the transaction ID.  If a reply does not closely follow the
d1542 19
a1560 8
.HD
KIP Appletalk (DDP in UDP)
.LP
Appletalk DDP packets encapsulated in UDP datagrams are de-encapsulated
and dumped as DDP packets (i.e., all the UDP header information is
discarded).  The file
.I /etc/atalk.names
is used to translate appletalk net and node numbers to names.
d1562 2
a1563 4
.RS
.nf
.sp .5
\fInumber	name\fP
d1565 1
a1565 1
\f(CW1.254		ether
d1567 12
a1578 10
1.254.110	ace\fP
.sp .5
.fi
.RE
The first two lines give the names of appletalk networks.  The third
line gives the name of a particular host (a host is distinguished
from a net by the 3rd octet in the number \-
a net number \fImust\fP have two octets and a host number \fImust\fP
have three octets.)  The number and name should be separated by
whitespace (blanks or tabs).
d1580 14
a1593 11
.I /etc/atalk.names
file may contain blank lines or comment lines (lines starting with
a `#').
.LP
Appletalk addresses are printed in the form
.RS
.nf
.sp .5
\fInet.host.port\fP

\f(CW144.1.209.2 > icsd-net.112.220
d1595 13
a1607 10
jssmag.149.235 > icsd-net.2\fP
.sp .5
.fi
.RE
(If the
.I /etc/atalk.names
doesn't exist or doesn't contain an entry for some appletalk
host/net number, addresses are printed in numeric form.)
In the first example, NBP (DDP port 2) on net 144.1 node 209
is sending to whatever is listening on port 220 of net icsd node 112.
d1609 27
a1635 16
is known (`office').  The third line is a send from port 235 on
net jssmag node 149 to broadcast on the icsd-net NBP port (note that
the broadcast address (255) is indicated by a net name with no host
number \- for this reason it's a good idea to keep node names and
net names distinct in /etc/atalk.names).
.LP
NBP (name binding protocol) and ATP (Appletalk transaction protocol)
packets have their contents interpreted.  Other protocols just dump
the protocol name (or number if no name is registered for the
protocol) and packet size.

\fBNBP packets\fP are formatted like the following examples:
.RS
.nf
.sp .5
\s-2\f(CWicsd-net.112.220 > jssmag.2: nbp-lkup 190: "=:LaserWriter@@*"
d1637 10
a1646 9
techpit.2 > icsd-net.112.220: nbp-reply 190: "techpit:LaserWriter@@*" 186\fP\s+2
.sp .5
.fi
.RE
The first line is a name lookup request for laserwriters sent by net icsd host
112 and broadcast on net jssmag.  The nbp id for the lookup is 190.
The second line shows a reply for this request (note that it has the
same id) from host jssmag.209 saying that it has a laserwriter
resource named "RM1140" registered on port 250.  The third line is
d1648 6
a1653 7
"techpit" registered on port 186.

\fBATP packet\fP formatting is demonstrated by the following example:
.RS
.nf
.sp .5
\s-2\f(CWjssmag.209.165 > helios.132: atp-req  12266<0-7> 0xae030001
d1666 3
a1668 4
jssmag.209.133 > helios.132: atp-req* 12267<0-7> 0xae030002\fP\s+2
.sp .5
.fi
.RE
d1670 12
a1681 4
up to 8 packets (the `<0-7>').  The hex number at the end of the line
is the value of the `userdata' field in the request.
.LP
Helios responds with 8 512-byte packets.  The `:digit' following the
d1684 18
a1701 11
excluding the atp header.  The `*' on packet 7 indicates that the
EOM bit was set.
.LP
Jssmag.209 then requests that packets 3 & 5 be retransmitted.  Helios
resends them then jssmag.209 releases the transaction.  Finally,
jssmag.209 initiates the next request.  The `*' on the request
indicates that XO (`exactly once') was \fInot\fP set.

.HD
IP Fragmentation
.LP
d1703 32
a1734 18
.RS
.nf
.sp .5
\fB(frag \fIid\fB:\fIsize\fB@@\fIoffset\fB+)\fR
\fB(frag \fIid\fB:\fIsize\fB@@\fIoffset\fB)\fR
.sp .5
.fi
.RE
(The first form indicates there are more fragments.  The second
indicates this is the last fragment.)
.LP
\fIId\fP is the fragment id.  \fISize\fP is the fragment
size (in bytes) excluding the IP header.  \fIOffset\fP is this
fragment's offset (in bytes) in the original datagram.
.LP
The fragment information is output for each fragment.  The first
fragment contains the higher level protocol header and the frag
info is printed after the protocol info.  Fragments
d1736 7
a1742 7
frag info is printed after the source and destination addresses.
For example, here is part of an ftp from arizona.edu to lbl-rtsg.arpa
over a CSNET connection that doesn't appear to handle 576 byte datagrams:
.RS
.nf
.sp .5
\s-2\f(CWarizona.ftp-data > rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@@0+)
d1744 3
a1746 4
rtsg.1170 > arizona.ftp-data: . ack 1536 win 2560\fP\s+2
.sp .5
.fi
.RE
d1748 2
a1749 1
2nd line don't include port numbers.  This is because the TCP
d1753 5
a1757 2
were 308 bytes of user data when, in fact, there are 512 bytes (308 in
the first frag and 204 in the second).  If you are looking for holes
d1760 11
a1770 7
.LP
A packet with the IP \fIdon't fragment\fP flag is marked with a
trailing \fB(DF)\fP.
.HD
Timestamps
.LP
By default, all output lines are preceded by a timestamp.  The timestamp
d1772 3
a1774 5
.RS
.nf
\fIhh:mm:ss.frac\fP
.fi
.RE
d1776 1
a1776 1
The timestamp reflects the time the kernel first saw the packet.  No attempt
d1779 4
a1782 2
serviced the `new packet' interrupt.
.SH "SEE ALSO"
d1784 10
a1793 5
bpf(4), pcap(3)
.SH AUTHORS
Van Jacobson (van@@ee.lbl.gov),
Craig Leres (leres@@ee.lbl.gov) and
Steven McCanne (mccanne@@ee.lbl.gov), all of the
d1795 1
a1795 1
.SH BUGS
d1797 4
a1800 22
.LP
NIT doesn't let you watch your own outbound traffic, BPF will.
We recommend that you use the latter.
.LP
\fItcpdump\fP for Ultrix requires Ultrix version 4.0 or later; the kernel
has to have been built with the \fIpacketfilter\fP pseudo-device driver
(see
.IR packetfilter (4)).
In order to watch either your own outbound or inbound traffic,
you will need to use Ultrix version 4.2 or later, and you will have
to have used the
.IR pfconfig (8)
command to enable ``copyall'' mode.
.LP
Under SunOS 4.1, the packet capture code (or Streams NIT) is not what
you'd call efficient.  Don't plan on doing much with your Sun while
you're monitoring a busy network.
.LP
On Sun systems prior to release 3.2, NIT is very buggy.
If run on an old system, tcpdump may crash the machine.
.LP
Some attempt should be made to reassemble IP fragments or, at least
d1802 3
a1804 2
.LP
Name server inverse queries are not dumped correctly: The (empty)
d1806 8
a1813 4
section.  Some believe that inverse queries are themselves a bug and
prefer to fix the program generating them rather than tcpdump.
.LP
Apple Ethertalk DDP packets could be dumped as easily as KIP DDP
d1816 5
a1820 3
Ethertalk (we aren't), LBL doesn't allow Ethertalk on any of its
networks so we'd would have no way of testing this code.
.LP
d1823 13
a1835 4
.LP
Filter expressions that manipulate FDDI headers assume that all FDDI
packets are encapsulated Ethernet packets.  This is true for IP, ARP,
and DECNET Phase IV, but is not true for protocols such as ISO CLNS.
d1838 1
@


1.12
log
@typo; krw@@tcn.net
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.11 1999/03/10 02:43:11 pjanzen Exp $ (LBL)
d327 1
a327 1
True if the ethernet destination address is \fIehost\fP.  \fIEhost\fP
d332 1
a332 1
True if the ethernet source address is \fIehost\fP.
d334 1
a334 1
True if either the ethernet source or destination address is \fIehost\fP.
d336 1
a336 1
True if the packet used \fIhost\fP as a gateway.  I.e., the ethernet
d406 1
a406 1
True if the packet is an ethernet broadcast packet.  The \fIether\fP
d413 1
a413 1
True if the packet is an ethernet multicast packet.  The \fIether\fP
d613 1
a613 1
sent via ethernet broadcast or multicast:
d641 1
a641 1
On ethernets, the source and destination addresses, protocol,
d700 2
a701 2
for the ethernet address of internet host csam.  Csam
replies with its ethernet address (in this example, ethernet addresses
d723 2
a724 2
For the first packet this says the ethernet source address is RTSG, the
destination is the ethernet broadcast address, the type field
d1157 1
a1157 1
ethernet interface removed the packet from the wire and when the kernel
@


1.11
log
@Daylight Saving Time, not savings
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.10 1998/09/22 22:03:01 provos Exp $ (LBL)
d626 1
a626 1
tcpdump 'icmp[0] != 8 and icmp[0] != 0"
@


1.10
log
@make tcpdump aware of SACK (RFC 2018), loosely based on a patch from
hari@@cs.berkeley.edu.
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.9 1998/09/13 03:50:23 aaron Exp $ (LBL)
d1204 1
a1204 1
A packet trace that crosses a daylight savings time change will give
@


1.9
log
@typos
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.8 1998/09/07 16:44:34 aaron Exp $ (LBL)
d182 1
@


1.8
log
@More man page fixes. Particularly fix uses of it's/its, affect/effect,
then/than and such. Other miscellaneous problems fixed across these source
files.
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.7 1998/07/15 00:06:01 deraadt Exp $ (LBL)
d108 1
a108 1
Dump packet-matching code as a decimal numbers (preceded with a count).
d152 1
a152 1
`ether host {local-hw-addr} or ether broadcast'.
d177 1
a177 1
Force packets selected by "\fIexpression\fP" to be interpreted the
d224 1
a224 1
different kinds of qualifier:
d646 1
a646 1
interpretation of the rest of the packet.  Normal packets (such
d687 1
a687 1
format is intended to be self explanatory.
d803 1
a803 1
On the 7th line, csam says its received data sent by rtsg up to
d941 2
a942 2
depends on the operation type.  The format is intended to be self
explanatory if read in conjunction with
d1087 1
a1087 1
and the number in parens is the amount of data in the packet,
d1206 1
a1206 1
Filters expressions that manipulate FDDI headers assume that all FDDI
@


1.7
log
@comment out man pages we do not have
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.6 1997/01/22 13:20:59 niklas Exp $ (LBL)
d803 1
a803 1
On the 7th line, csam says it's received data sent by rtsg up to
@


1.6
log
@Correct networks(5) references
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.5 1996/09/18 03:10:06 deraadt Exp $ (LBL)
d1159 2
a1160 1
traffic(1C), nit(4P), bpf(4), pcap(3)
@


1.5
log
@tcpdump(8) not (1); noted by msaitoh@@spa.is.uec.ac.jp
@
text
@d1 1
a1 1
.\" @@(#) $Header: /cvs/src/usr.sbin/tcpdump/tcpdump.8,v 1.4 1996/07/13 11:01:34 mickey Exp $ (LBL)
d349 1
a349 1
or a network number (see \fInetworks(4)\fP for details).
@


1.4
log
@it is 3.2 now.
@
text
@d1 1
a1 1
.\" @@(#) $Header: tcpdump.1,v 1.58 96/06/23 02:11:47 leres Exp $ (LBL)
d23 1
a23 1
.TH TCPDUMP 1  "22 June 1996"
@


1.3
log
@sync to latest
@
text
@d1 1
a1 2
.\"	$OpenBSD: tcpdump.8,v 1.3 1995/03/06 19:11:46 mycroft Exp $
.\"	$NetBSD: tcpdump.8,v 1.3 1995/03/06 19:11:46 mycroft Exp $
d3 1
a3 3
.\" @@(#) Header: tcpdump.1,v 1.45 94/06/20 18:54:27 leres Exp (LBL)
.\"
.\" Copyright (c) 1987, 1988, 1989, 1990, 1991, 1992, 1994
d23 1
a23 1
.TH TCPDUMP 1  "20 Jun 1994"
d54 4
d61 1
d63 1
d70 14
a83 3
.B Under SunOS:
You must be root to invoke \fItcpdump\fP or it must be installed
setuid to root.
d85 1
a85 1
Any user can invoke \fItcpdump\fP once the super-user has enabled
d87 3
a89 1
.IR pfconfig (8).
d91 2
a92 3
Access is controlled by the permissions on
.I /dev/bpf0,
etc.
d99 10
a108 1
Dump the compiled packet-matching code to standard output and stop.
d151 2
a152 2
for some other reason; hence, `-p' cannot be used as an abbreviation for
`ether host {localhost} or broadcast'.
d164 1
a164 1
default of 68 (with NIT, the minimum is actually 96).
d176 10
d237 1
a237 1
qualifiers specify a particular tranfer direction to and/or from
d250 5
d348 2
a349 1
number of \fInet\fP, which may be either an address or a name.
d379 1
a379 1
which matches only tcp packets.
d426 1
a426 1
\fItcpdump\fP assumes, when filtering on the protocol identifier,
d723 1
a723 1
destination is the broadcast address, the type field
d903 1
a903 1
default \fIsnaplen\fP of 96 bytes may not capture enough of the packet
d980 1
a980 1
corresponding request, it might not be parseble.
d1153 1
a1153 1
and is as accurate as the kernel's clock (e.g., \(+-10ms on a Sun-3).
d1157 1
a1157 2
serviced the `new packet' interrupt (of course,
with Sun's lousy clock resolution this time lag is negligible.)
d1159 1
a1159 1
traffic(1C), nit(4P), bpf(4)
d1161 3
a1163 3
Van Jacobson (van@@helios.ee.lbl.gov),
Craig Leres (leres@@helios.ee.lbl.gov) and
Steven McCanne (mccanne@@helios.ee.lbl.gov), all of
d1166 1
a1166 5
The clock resolution on most Suns is pathetic (20ms).
If you want to use the timestamp to generate some of the important
performance distributions (like packet interarrival time) it's best
to watch something that generates packets slowly (like an Arpanet
gateway or a MicroVax running VMS).
@


1.2
log
@Updating to the latest LBL release.
Sun's SKIP support added.
@
text
@d1 1
a1 1
.\"	$OpenBSD$
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
