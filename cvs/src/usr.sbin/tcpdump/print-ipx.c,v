head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.8
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.18
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.16
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.14
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.12
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.10
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.8
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.11.16.00.16.39;	author mmcc;	state Exp;
branches;
next	1.14;
commitid	enjTsnD5UO6xazKc;

1.14
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	Uu5nFG3wCl0LACBb;

1.13
date	2014.08.14.12.44.44;	author mpi;	state Exp;
branches;
next	1.12;
commitid	yLXrOcgrag4eS8u4;

1.12
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.29.17.41.14;	author moritz;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.06.03.11.40;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.03.14.31.57;	author ho;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.26.21.35.41;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	96.12.12.16.22.35;	author bitblt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.13.11.01.24;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.47.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.59.27;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove remaining instances of the register keyword.

ok deraadt@@
@
text
@/*	$OpenBSD: print-ipx.c,v 1.14 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 1994, 1995, 1996
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Format and print Novell IPX packets.
 * Contributed by Brad Parker (brad@@fcr.com).
 */

#include <sys/time.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>
#include <netinet/tcp.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "interface.h"
#include "addrtoname.h"
#include "ipx.h"
#include "extract.h"


static const char *ipxaddr_string(u_int32_t, const u_char *);
void ipx_decode(const struct ipxHdr *, const u_char *, u_int);
void ipx_sap_print(const u_short *, u_int);
void ipx_rip_print(const u_short *, u_int);

/*
 * Print IPX datagram packets.
 */
void
ipx_print(const u_char *p, u_int length)
{
	const struct ipxHdr *ipx = (const struct ipxHdr *)p;

	TCHECK(ipx->srcSkt);
	(void)printf("%s.%x > ",
		     ipxaddr_string(EXTRACT_32BITS(ipx->srcNet), ipx->srcNode),
		     EXTRACT_16BITS(&ipx->srcSkt));

	(void)printf("%s.%x:",
		     ipxaddr_string(EXTRACT_32BITS(ipx->dstNet), ipx->dstNode),
		     EXTRACT_16BITS(&ipx->dstSkt));

	/* take length from ipx header */
	TCHECK(ipx->length);
	length = EXTRACT_16BITS(&ipx->length);

	ipx_decode(ipx, (u_char *)ipx + ipxSize, length - ipxSize);
	return;
trunc:
	printf("[|ipx %d]", length);
}

static const char *
ipxaddr_string(u_int32_t net, const u_char *node)
{
    static char line[256];

    snprintf(line, sizeof(line), "%x.%02x:%02x:%02x:%02x:%02x:%02x",
	    net, node[0], node[1], node[2], node[3], node[4], node[5]);

    return line;
}

void
ipx_decode(const struct ipxHdr *ipx, const u_char *datap, u_int length)
{
    u_short dstSkt;

    dstSkt = EXTRACT_16BITS(&ipx->dstSkt);
    switch (dstSkt) {
      case IPX_SKT_NCP:
	(void)printf(" ipx-ncp %d", length);
	break;
      case IPX_SKT_SAP:
	ipx_sap_print((u_short *)datap, length);
	break;
      case IPX_SKT_RIP:
	ipx_rip_print((u_short *)datap, length);
	break;
      case IPX_SKT_NETBIOS:
	(void)printf(" ipx-netbios %d", length);
	break;
      case IPX_SKT_DIAGNOSTICS:
	(void)printf(" ipx-diags %d", length);
	break;
      default:
	(void)printf(" ipx-#%x %d", dstSkt, length);
	break;
    }
}

void
ipx_sap_print(const u_short *ipx, u_int length)
{
    int command, i;

    TCHECK(ipx[0]);
    command = EXTRACT_16BITS(ipx);
    ipx++;
    length -= 2;

    switch (command) {
      case 1:
      case 3:
	if (command == 1)
	    (void)printf("ipx-sap-req");
	else
	    (void)printf("ipx-sap-nearest-req");

	if (length > 0) {
	    TCHECK(ipx[1]);
	    (void)printf(" %x '", EXTRACT_16BITS(&ipx[0]));
	    fn_print((u_char *)&ipx[1], min(snapend, (u_char *)&ipx[1] + 48));
	    putchar('\'');
	}
	break;

      case 2:
      case 4:
	if (command == 2)
	    (void)printf("ipx-sap-resp");
	else
	    (void)printf("ipx-sap-nearest-resp");

	for (i = 0; i < 8 && length > 0; i++) {
	    TCHECK2(ipx[27], 1);
	    (void)printf(" %x '", EXTRACT_16BITS(&ipx[0]));
	    fn_print((u_char *)&ipx[1], min(snapend, (u_char *)&ipx[1] + 48));
	    printf("' addr %s",
		ipxaddr_string(EXTRACT_32BITS(&ipx[25]), (u_char *)&ipx[27]));
	    ipx += 32;
	    length -= 64;
	}
	break;
      default:
	    (void)printf("ipx-sap-?%x", command);
	break;
    }
	return;
trunc:
	printf("[|ipx %d]", length);
}

void
ipx_rip_print(const u_short *ipx, u_int length)
{
    int command, i;

    TCHECK(ipx[0]);
    command = EXTRACT_16BITS(ipx);
    ipx++;
    length -= 2;

    switch (command) {
      case 1:
	(void)printf("ipx-rip-req");
	if (length > 0) {
	    TCHECK(ipx[3]);
	    (void)printf(" %u/%d.%d", EXTRACT_32BITS(&ipx[0]),
			 EXTRACT_16BITS(&ipx[2]), EXTRACT_16BITS(&ipx[3]));
	}
	break;
      case 2:
	(void)printf("ipx-rip-resp");
	for (i = 0; i < 50 && length > 0; i++) {
	    TCHECK(ipx[3]);
	    (void)printf(" %u/%d.%d", EXTRACT_32BITS(&ipx[0]),
			 EXTRACT_16BITS(&ipx[2]), EXTRACT_16BITS(&ipx[3]));

	    ipx += 4;
	    length -= 8;
	}
	break;
      default:
	    (void)printf("ipx-rip-?%x", command);
    }
	return;
trunc:
	printf("[|ipx %d]", length);
}

@


1.14
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.13 2014/08/14 12:44:44 mpi Exp $	*/
d93 1
a93 1
    register u_short dstSkt;
@


1.13
log
@No use for <netinet/in_systm.h> nor <netinet/tcpip.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.12 2009/10/27 23:59:55 deraadt Exp $	*/
a26 1
#include <sys/param.h>
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.11 2007/10/07 16:41:05 deraadt Exp $	*/
a31 1
#include <netinet/in_systm.h>
@


1.11
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.10 2006/05/29 17:41:14 moritz Exp $	*/
a25 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.10
log
@The end pointer to fn_print() could possibly point behind the captured
packet. So make sure, it uses "snapend" in that case.

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.9 2002/02/19 19:39:40 millert Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ipx.c,v 1.9 2002/02/19 19:39:40 millert Exp $";
@


1.9
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.8 2001/11/06 03:11:40 deraadt Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ipx.c,v 1.8 2001/11/06 03:11:40 deraadt Exp $";
d146 1
a146 1
	    fn_print((u_char *)&ipx[1], (u_char *)&ipx[1] + 48);
d161 1
a161 1
	    fn_print((u_char *)&ipx[1], (u_char *)&ipx[1] + 48);
@


1.8
log
@a bit of snprintf cleaning
@
text
@d1 1
a1 1
/*	$OpenBSD: print-ipx.c,v 1.7 2000/10/03 14:31:57 ho Exp $	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ipx.c,v 1.7 2000/10/03 14:31:57 ho Exp $";
d44 1
a44 1
#ifdef __STDC__
a45 2
#endif
#include <stdio.h>
@


1.7
log
@Add $OpenBSD$. (jakob@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ipx.c,v 1.6 2000/04/26 21:35:41 jakob Exp $";
d93 1
a93 1
    sprintf(line, "%x.%02x:%02x:%02x:%02x:%02x:%02x",
@


1.6
log
@INET6
DHCP/BOOTP
tcp & udp checksum detection
numerous bugfixes
@
text
@d1 2
d29 1
a29 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-ipx.c,v 1.5 1996/12/12 16:22:35 bitblt Exp $";
@


1.5
log
@*** empty log message ***
@
text
@d27 1
a27 1
    "@@(#) $Header: print-ipx.c,v 1.19 96/12/10 23:23:52 leres Exp $";
a40 1
#include <netinet/tcpip.h>
@


1.4
log
@it is 3.2 now.
@
text
@a0 2
/*	$OpenBSD$	*/

d20 1
a20 3
 */

/*
d24 1
d26 2
a27 2
static  char rcsid[] =
    "@@(#)Header: print-ipx.c,v 1.10 96/05/16 12:46:02 leres Exp";
a31 1
#include <sys/types.h>
d55 4
a58 4
static const char *ipxaddr_string(u_int32_t net, const u_char *node);
void ipx_decode(const struct ipxHdr *ipx, const u_char *datap, int length);
void ipx_sap_print(const u_short *ipx, int length);
void ipx_rip_print(const u_short *ipx, int length);
d64 1
a64 1
ipx_print(const u_char *p, int length)
d68 1
a68 4
	if (length < ipxSize) {
		(void)printf(" truncated-ipx %d", length);
		return;
	}
d70 2
a71 2
		     ipxaddr_string(EXTRACT_LONG(ipx->srcNet), ipx->srcNode),
		     EXTRACT_SHORT(&ipx->srcSkt));
d74 2
a75 7
		     ipxaddr_string(EXTRACT_LONG(ipx->dstNet), ipx->dstNode),
		     EXTRACT_SHORT(&ipx->dstSkt));

	if ((u_char *)(ipx + 1) > snapend) {
		printf(" [|ipx]");
		return;
	}
d78 2
a79 1
	length = EXTRACT_SHORT(&ipx->length);
d82 3
d92 1
a92 1
    sprintf(line, "%u.%02x:%02x:%02x:%02x:%02x:%02x",
d99 1
a99 1
ipx_decode(const struct ipxHdr *ipx, const u_char *datap, int length)
d103 1
a103 1
    dstSkt = EXTRACT_SHORT(&ipx->dstSkt);
d127 1
a127 1
ipx_sap_print(const u_short *ipx, int length)
d131 2
a132 6
    if (length < 2) {
	(void)printf(" truncated-sap %d", length);
	return;
    }

    command = EXTRACT_SHORT(ipx);
d144 6
a149 3
	if (length > 0)
	    (void)printf(" %x '%.48s'", EXTRACT_SHORT(&ipx[0]),
			 (char*)&ipx[1]);
d160 5
a164 4
	    (void)printf(" %x '%.48s' addr %s",
			 EXTRACT_SHORT(&ipx[0]), (char *)&ipx[1],
			 ipxaddr_string(EXTRACT_LONG(&ipx[25]),
					(u_char *)&ipx[27]));
d173 3
d179 1
a179 1
ipx_rip_print(const u_short *ipx, int length)
d183 2
a184 6
    if (length < 2) {
	(void)printf(" truncated-ipx %d", length);
	return;
    }

    command = EXTRACT_SHORT(ipx);
d191 5
a195 3
	if (length > 0)
	    (void)printf(" %u/%d.%d", EXTRACT_LONG(&ipx[0]),
			 EXTRACT_SHORT(&ipx[2]), EXTRACT_SHORT(&ipx[3]));
d200 3
a202 2
	    (void)printf(" %u/%d.%d", EXTRACT_LONG(&ipx[0]),
			 EXTRACT_SHORT(&ipx[2]), EXTRACT_SHORT(&ipx[3]));
d211 3
@


1.3
log
@sync to latest
@
text
@d1 1
a1 2
/**//*	$OpenBSD: print-ipx.c,v 1.2 1995/03/06 19:11:16 mycroft Exp $	*/
/*	$NetBSD: print-ipx.c,v 1.2 1995/03/06 19:11:16 mycroft Exp $	*/
d4 1
a4 1
 * Copyright (c) 1994
d30 1
a30 1
    "@@(#)Header: print-ipx.c,v 1.6 94/06/20 19:44:38 leres Exp";
d34 1
d59 1
a59 1
static const char *ipxaddr_string(u_int32 net, const u_char *node);
d96 1
a96 1
ipxaddr_string(u_int32 net, const u_char *node)
d100 1
a100 1
    sprintf(line, "%lu.%02x:%02x:%02x:%02x:%02x:%02x",
d109 4
a112 1
    switch (EXTRACT_SHORT(&ipx->dstSkt)) {
d129 1
a129 1
	(void)printf(" ipx-#%x %d", ipx->dstSkt, length);
d201 1
a201 1
	    (void)printf(" %lu/%d.%d", EXTRACT_LONG(&ipx[0]),
d207 1
a207 1
	    (void)printf(" %lu/%d.%d", EXTRACT_LONG(&ipx[0]),
@


1.2
log
@Updating to the latest LBL release.
Sun's SKIP support added.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
