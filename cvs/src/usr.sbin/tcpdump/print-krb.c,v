head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.30
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.28
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.26
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.24
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.22
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.20
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.18
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.16
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.14
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.11.16.00.16.39;	author mmcc;	state Exp;
branches;
next	1.10;
commitid	enjTsnD5UO6xazKc;

1.10
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	Uu5nFG3wCl0LACBb;

1.9
date	2014.08.14.12.44.44;	author mpi;	state Exp;
branches;
next	1.8;
commitid	yLXrOcgrag4eS8u4;

1.8
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.03.14.31.57;	author ho;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.26.21.35.41;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	99.09.16.18.03.14;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	99.07.28.20.41.36;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	96.12.12.16.22.33;	author bitblt;	state Exp;
branches;
next	1.1;

1.1
date	96.07.13.11.01.25;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove remaining instances of the register keyword.

ok deraadt@@
@
text
@/*	$OpenBSD: print-krb.c,v 1.10 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 1995, 1996, 1997
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Initial contribution from John Hawkinson (jhawk@@mit.edu).
 */

#include <sys/time.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/udp.h>
#include <netinet/udp_var.h>

#include <ctype.h>
#include <errno.h>
#include <stdio.h>

#include "interface.h"
#include "addrtoname.h"

const u_char *c_print(const u_char *, const u_char *);
const u_char *krb4_print_hdr(const u_char *);
void krb4_print(const u_char *);
void krb_print(const u_char *, u_int);


#define AUTH_MSG_KDC_REQUEST			1<<1
#define AUTH_MSG_KDC_REPLY			2<<1
#define AUTH_MSG_APPL_REQUEST			3<<1
#define AUTH_MSG_APPL_REQUEST_MUTUAL		4<<1
#define AUTH_MSG_ERR_REPLY			5<<1
#define AUTH_MSG_PRIVATE			6<<1
#define AUTH_MSG_SAFE				7<<1
#define AUTH_MSG_APPL_ERR			8<<1
#define AUTH_MSG_DIE				63<<1

#define KERB_ERR_OK				0
#define KERB_ERR_NAME_EXP			1
#define KERB_ERR_SERVICE_EXP			2
#define KERB_ERR_AUTH_EXP			3
#define KERB_ERR_PKT_VER			4
#define KERB_ERR_NAME_MAST_KEY_VER		5
#define KERB_ERR_SERV_MAST_KEY_VER		6
#define KERB_ERR_BYTE_ORDER			7
#define KERB_ERR_PRINCIPAL_UNKNOWN		8
#define KERB_ERR_PRINCIPAL_NOT_UNIQUE		9
#define KERB_ERR_NULL_KEY			10

struct krb {
	u_char pvno;		/* Protocol Version */
	u_char type;		/* Type+B */
};

static char tstr[] = " [|kerberos]";

static struct tok type2str[] = {
	{ AUTH_MSG_KDC_REQUEST,		"KDC_REQUEST" },
	{ AUTH_MSG_KDC_REPLY,		"KDC_REPLY" },
	{ AUTH_MSG_APPL_REQUEST,	"APPL_REQUEST" },
	{ AUTH_MSG_APPL_REQUEST_MUTUAL,	"APPL_REQUEST_MUTUAL" },
	{ AUTH_MSG_ERR_REPLY,		"ERR_REPLY" },
	{ AUTH_MSG_PRIVATE,		"PRIVATE" },
	{ AUTH_MSG_SAFE,		"SAFE" },
	{ AUTH_MSG_APPL_ERR,		"APPL_ERR" },
	{ AUTH_MSG_DIE,			"DIE" },
	{ 0,				NULL }
};

static struct tok kerr2str[] = {
	{ KERB_ERR_OK,			"OK" },
	{ KERB_ERR_NAME_EXP,		"NAME_EXP" },
	{ KERB_ERR_SERVICE_EXP,		"SERVICE_EXP" },
	{ KERB_ERR_AUTH_EXP,		"AUTH_EXP" },
	{ KERB_ERR_PKT_VER,		"PKT_VER" },
	{ KERB_ERR_NAME_MAST_KEY_VER,	"NAME_MAST_KEY_VER" },
	{ KERB_ERR_SERV_MAST_KEY_VER,	"SERV_MAST_KEY_VER" },
	{ KERB_ERR_BYTE_ORDER,		"BYTE_ORDER" },
	{ KERB_ERR_PRINCIPAL_UNKNOWN,	"PRINCIPAL_UNKNOWN" },
	{ KERB_ERR_PRINCIPAL_NOT_UNIQUE,"PRINCIPAL_NOT_UNIQUE" },
	{ KERB_ERR_NULL_KEY,		"NULL_KEY"},
	{ 0,				NULL}
};


/* little endian (unaligned) to host byte order */
/* XXX need to look at this... */
#define vtohlp(x)	    ((( ((char *)(x))[0] )      )  | \
			     (( ((char *)(x))[1] ) <<  8)  | \
			     (( ((char *)(x))[2] ) << 16)  | \
			     (( ((char *)(x))[3] ) << 24))
#define vtohsp(x)          ((( ((char *)(x))[0] )      )  | \
			     (( ((char *)(x))[1] ) <<  8))
/* network (big endian) (unaligned) to host byte order */
#define ntohlp(x)	    ((( ((char *)(x))[3] )      )  | \
			     (( ((char *)(x))[2] ) <<  8)  | \
			     (( ((char *)(x))[1] ) << 16)  | \
			     (( ((char *)(x))[0] ) << 24))
#define ntohsp(x)          ((( ((char *)(x))[1] )      )  | \
			     (( ((char *)(x))[0] ) <<  8))



const u_char *
c_print(const u_char *s, const u_char *ep)
{
	u_char c;
	int flag;

	flag = 1;
	while (ep == NULL || s < ep) {
		c = *s++;
		if (c == '\0') {
			flag = 0;
			break;
		}
		if (!isascii(c)) {
			c = toascii(c);
			putchar('M');
			putchar('-');
		}
		if (!isprint(c)) {
			c ^= 0x40;	/* DEL to ?, others to alpha */
			putchar('^');
		}
		putchar(c);
	}
	if (flag)
		return NULL;
	return (s);
}

const u_char *
krb4_print_hdr(const u_char *cp)
{
	cp += 2;

#define PRINT		if ((cp = c_print(cp, snapend)) == NULL) goto trunc

	TCHECK2(cp, 0);
	PRINT;
	TCHECK2(cp, 0);
	putchar('.'); PRINT;
	TCHECK2(cp, 0);
	putchar('@@'); PRINT;
	return(cp);

trunc:
	fputs(tstr, stdout);
	return (NULL);

#undef PRINT
}

void
krb4_print(const u_char *cp)
{
	const struct krb *kp;
	u_char type;
	u_short len;

#define PRINT		if ((cp = c_print(cp, snapend)) == NULL) goto trunc
/*  True if struct krb is little endian */
#define IS_LENDIAN(kp)	(((kp)->type & 0x01) != 0)
#define KTOHSP(kp, cp)	(IS_LENDIAN(kp) ? vtohsp(cp) : ntohsp(cp))

	kp = (struct krb *)cp;

	if ((&kp->type) >= snapend) {
		fputs(tstr, stdout);
		return;
	}

	type = kp->type & (0xFF << 1);

	printf(" %s %s: ",
	    IS_LENDIAN(kp) ? "le" : "be", tok2str(type2str, NULL, type));

	switch (type) {

	case AUTH_MSG_KDC_REQUEST:
		if ((cp = krb4_print_hdr(cp)) == NULL)
			return;
		cp += 4; 	  /* ctime */
		TCHECK2(cp, 0);
		printf(" %dmin ", *cp++ * 5);
		TCHECK2(cp, 0);
		PRINT;
		TCHECK2(cp, 0);
		putchar('.');  PRINT;
		break;

	case AUTH_MSG_APPL_REQUEST:
		cp += 2;
		TCHECK2(cp, 0);
		printf("v%d ", *cp++);
		TCHECK2(cp, 0);
		PRINT;
		TCHECK2(cp, 0);
		printf(" (%d)", *cp++);
		TCHECK2(cp, 0);
		printf(" (%d)", *cp);
		TCHECK2(cp, 0);
		break;

	case AUTH_MSG_KDC_REPLY:
		if ((cp = krb4_print_hdr(cp)) == NULL)
			return;
		cp += 10;	/* timestamp + n + exp + kvno */
		TCHECK2(cp, 0);
		len = KTOHSP(kp, cp);
		printf(" (%d)", len);
		TCHECK2(cp, 0);
		break;

	case AUTH_MSG_ERR_REPLY:
		if ((cp = krb4_print_hdr(cp)) == NULL)
			return;
		cp += 4; 	  /* timestamp */
		TCHECK2(cp, 0);
		printf(" %s ", tok2str(kerr2str, NULL, KTOHSP(kp, cp)));
		cp += 4;
		TCHECK2(cp, 0);
		PRINT;
		break;

	default:
		fputs("(unknown)", stdout);
		break;
	}

	return;
trunc:
	fputs(tstr, stdout);
}

void
krb_print(const u_char *dat, u_int length)
{
	const struct krb *kp;

	kp = (struct krb *)dat;

	if (dat >= snapend) {
		fputs(tstr, stdout);
		return;
	}

	switch (kp->pvno) {

	case 1:
	case 2:
	case 3:
		printf(" v%d", kp->pvno);
		break;

	case 4:
		printf(" v%d", kp->pvno);
		krb4_print((const u_char *)kp);
		break;

	case 106:
	case 107:
		fputs(" v5", stdout);
		/* Decode ASN.1 here "someday" */
		break;
	}
	return;
}
@


1.10
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-krb.c,v 1.9 2014/08/14 12:44:44 mpi Exp $	*/
d42 1
a42 1
const u_char *c_print(register const u_char *, register const u_char *);
d125 1
a125 1
c_print(register const u_char *s, register const u_char *ep)
d127 2
a128 2
	register u_char c;
	register int flag;
d178 1
a178 1
	register const struct krb *kp;
d260 1
a260 1
	register const struct krb *kp;
@


1.9
log
@No use for <netinet/in_systm.h> nor <netinet/tcpip.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-krb.c,v 1.8 2009/10/27 23:59:55 deraadt Exp $	*/
a25 1
#include <sys/param.h>
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-krb.c,v 1.7 2007/10/07 16:41:05 deraadt Exp $	*/
a30 1
#include <netinet/in_systm.h>
@


1.7
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-krb.c,v 1.6 2000/10/03 14:31:57 ho Exp $	*/
a24 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.6
log
@Add $OpenBSD$. (jakob@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 1
a28 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-krb.c,v 1.5 2000/04/26 21:35:41 jakob Exp $";
@


1.5
log
@INET6
DHCP/BOOTP
tcp & udp checksum detection
numerous bugfixes
@
text
@d1 2
d28 1
a28 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-krb.c,v 1.4 1999/09/16 18:03:14 brad Exp $";
@


1.4
log
@change some white space to tabs
@
text
@d26 1
a26 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-krb.c,v 1.3 1999/07/28 20:41:36 jakob Exp $";
d209 8
a216 8
		 cp += 4; 	  /* ctime */
		 TCHECK2(cp, 0);
		 printf(" %dmin ", *cp++ * 5);
		 TCHECK2(cp, 0);
		 PRINT;
		 TCHECK2(cp, 0);
		 putchar('.');  PRINT;
		 break;
@


1.3
log
@-  Merge some changes from tcpdump 3.4
   -a flag; attempt to convert network and broadcast addresses to names
   Improved signal handling
   Miscellaneous fixes and typos
   OSPF MD5 authentication support

-  -X flag; emacs-hexl print (including ascii)

-  Add ECN bits to TCP and IP headers

-  IKE & IPsec (ESP & AH) support

OK deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996
d26 1
a26 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-krb.c,v 1.2 1996/12/12 16:22:33 bitblt Exp $";
d76 2
a77 2
    u_char pvno;		/* Protocol Version */
    u_char type;		/* Type+B */
d83 10
a92 10
    { AUTH_MSG_KDC_REQUEST,		"KDC_REQUEST" },
    { AUTH_MSG_KDC_REPLY,		"KDC_REPLY" },
    { AUTH_MSG_APPL_REQUEST,		"APPL_REQUEST" },
    { AUTH_MSG_APPL_REQUEST_MUTUAL,	"APPL_REQUEST_MUTUAL" },
    { AUTH_MSG_ERR_REPLY,		"ERR_REPLY" },
    { AUTH_MSG_PRIVATE,			"PRIVATE" },
    { AUTH_MSG_SAFE,			"SAFE" },
    { AUTH_MSG_APPL_ERR,		"APPL_ERR" },
    { AUTH_MSG_DIE,			"DIE" },
    { 0,				NULL }
d96 12
a107 12
    { KERB_ERR_OK,			"OK" },
    { KERB_ERR_NAME_EXP,		"NAME_EXP" },
    { KERB_ERR_SERVICE_EXP,		"SERVICE_EXP" },
    { KERB_ERR_AUTH_EXP,		"AUTH_EXP" },
    { KERB_ERR_PKT_VER,			"PKT_VER" },
    { KERB_ERR_NAME_MAST_KEY_VER,	"NAME_MAST_KEY_VER" },
    { KERB_ERR_SERV_MAST_KEY_VER,	"SERV_MAST_KEY_VER" },
    { KERB_ERR_BYTE_ORDER,		"BYTE_ORDER" },
    { KERB_ERR_PRINCIPAL_UNKNOWN,	"PRINCIPAL_UNKNOWN" },
    { KERB_ERR_PRINCIPAL_NOT_UNIQUE,	"PRINCIPAL_NOT_UNIQUE" },
    { KERB_ERR_NULL_KEY,		"NULL_KEY"},
    { 0,				NULL}
d155 1
a155 1
	return(s);
d161 1
a161 1
	cp+=2;
d175 1
a175 1
	return(NULL);
@


1.2
log
@*** empty log message ***
@
text
@d26 1
a26 1
    "@@(#) $Header: print-krb.c,v 1.8 96/12/10 23:17:39 leres Exp $";
d163 1
a163 1
#define PRINT		if ((cp=c_print(cp, snapend))==NULL) goto trunc
d187 1
a187 1
#define PRINT		if ((cp=c_print(cp, snapend))==NULL) goto trunc
@


1.1
log
@it is 3.2 now.
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1995
d25 2
a26 2
static char rcsid[] =
    "@@(#) Header: print-krb.c,v 1.3 95/10/08 15:15:17 leres Exp";
a30 1
#include <sys/types.h>
d47 4
a50 4
const u_char *c_print(register const u_char *s, register const u_char *ep);
const u_char *krb4_print_hdr(const u_char *cp);
void krb4_print(const u_char *cp);
void krb_print(const u_char *dat, int length);
d113 6
a118 6
#define vtohlp(x)	    ((( ((char*)(x))[0] )      )  | \
			     (( ((char*)(x))[1] ) <<  8)  | \
			     (( ((char*)(x))[2] ) << 16)  | \
			     (( ((char*)(x))[3] ) << 24))
#define vtohsp(x)          ((( ((char*)(x))[0] )      )  | \
			     (( ((char*)(x))[1] ) <<  8))
d120 6
a125 6
#define ntohlp(x)	    ((( ((char*)(x))[3] )      )  | \
			     (( ((char*)(x))[2] ) <<  8)  | \
			     (( ((char*)(x))[1] ) << 16)  | \
			     (( ((char*)(x))[0] ) << 24))
#define ntohsp(x)          ((( ((char*)(x))[1] )      )  | \
			     (( ((char*)(x))[0] ) <<  8))
a162 1
#define TCHECK		if (cp >= snapend)  goto trunc
d165 1
a165 1
	TCHECK;
d167 1
a167 1
	TCHECK;
d169 1
a169 1
	TCHECK;
a176 1
#undef TCHECK
a186 1
#define TCHECK		if (cp >= snapend) goto trunc
d210 1
a210 1
		 TCHECK;
d212 1
a212 1
		 TCHECK;
d214 1
a214 1
		 TCHECK;
d220 1
a220 1
		TCHECK;
d222 1
a222 1
		TCHECK;
d224 1
a224 1
		TCHECK;
d226 1
a226 1
		TCHECK;
d228 1
a228 1
		TCHECK;
d235 1
a235 1
		TCHECK;
d238 1
a238 1
		TCHECK;
d245 1
a245 1
		TCHECK;
d248 1
a248 1
		TCHECK;
a259 1
#undef TCHECK
d263 1
a263 1
krb_print(const u_char *dat, int length)
d284 1
a284 1
		krb4_print((const u_char*)kp);
@
