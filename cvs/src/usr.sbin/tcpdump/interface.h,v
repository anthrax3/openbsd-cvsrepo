head	1.69;
access;
symbols
	OPENBSD_6_1_BASE:1.69
	OPENBSD_6_0:1.67.0.4
	OPENBSD_6_0_BASE:1.67
	OPENBSD_5_9:1.66.0.2
	OPENBSD_5_9_BASE:1.66
	OPENBSD_5_8:1.65.0.4
	OPENBSD_5_8_BASE:1.65
	OPENBSD_5_7:1.64.0.2
	OPENBSD_5_7_BASE:1.64
	OPENBSD_5_6:1.63.0.4
	OPENBSD_5_6_BASE:1.63
	OPENBSD_5_5:1.62.0.4
	OPENBSD_5_5_BASE:1.62
	OPENBSD_5_4:1.61.0.14
	OPENBSD_5_4_BASE:1.61
	OPENBSD_5_3:1.61.0.12
	OPENBSD_5_3_BASE:1.61
	OPENBSD_5_2:1.61.0.10
	OPENBSD_5_2_BASE:1.61
	OPENBSD_5_1_BASE:1.61
	OPENBSD_5_1:1.61.0.8
	OPENBSD_5_0:1.61.0.6
	OPENBSD_5_0_BASE:1.61
	OPENBSD_4_9:1.61.0.4
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.61.0.2
	OPENBSD_4_8_BASE:1.61
	OPENBSD_4_7:1.60.0.2
	OPENBSD_4_7_BASE:1.60
	OPENBSD_4_6:1.58.0.6
	OPENBSD_4_6_BASE:1.58
	OPENBSD_4_5:1.58.0.2
	OPENBSD_4_5_BASE:1.58
	OPENBSD_4_4:1.56.0.4
	OPENBSD_4_4_BASE:1.56
	OPENBSD_4_3:1.56.0.2
	OPENBSD_4_3_BASE:1.56
	OPENBSD_4_2:1.54.0.6
	OPENBSD_4_2_BASE:1.54
	OPENBSD_4_1:1.54.0.4
	OPENBSD_4_1_BASE:1.54
	OPENBSD_4_0:1.54.0.2
	OPENBSD_4_0_BASE:1.54
	OPENBSD_3_9:1.51.0.2
	OPENBSD_3_9_BASE:1.51
	OPENBSD_3_8:1.49.0.2
	OPENBSD_3_8_BASE:1.49
	OPENBSD_3_7:1.48.0.2
	OPENBSD_3_7_BASE:1.48
	OPENBSD_3_6:1.46.0.2
	OPENBSD_3_6_BASE:1.46
	OPENBSD_3_5:1.43.0.2
	OPENBSD_3_5_BASE:1.43
	OPENBSD_3_4:1.40.0.2
	OPENBSD_3_4_BASE:1.40
	OPENBSD_3_3:1.36.0.2
	OPENBSD_3_3_BASE:1.36
	OPENBSD_3_2:1.32.0.2
	OPENBSD_3_2_BASE:1.32
	OPENBSD_3_1:1.31.0.2
	OPENBSD_3_1_BASE:1.31
	OPENBSD_3_0:1.28.0.2
	OPENBSD_3_0_BASE:1.28
	OPENBSD_2_9_BASE:1.26
	OPENBSD_2_9:1.26.0.2
	OPENBSD_2_8:1.18.0.2
	OPENBSD_2_8_BASE:1.18
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.10.0.4
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.69
date	2016.11.16.13.47.27;	author reyk;	state Exp;
branches;
next	1.68;
commitid	XyJooSdwV3dkETpz;

1.68
date	2016.10.22.20.55.04;	author rzalamena;	state Exp;
branches;
next	1.67;
commitid	cnmsKk1DpJAmVheV;

1.67
date	2016.07.11.00.27.50;	author rzalamena;	state Exp;
branches;
next	1.66;
commitid	Sa8Q2I2tgAFG9H6l;

1.66
date	2015.11.15.20.35.36;	author mmcc;	state Exp;
branches;
next	1.65;
commitid	kFQYMPTA5NvE3RXS;

1.65
date	2015.04.05.17.02.57;	author guenther;	state Exp;
branches;
next	1.64;
commitid	aiXk5EdrcUpeXylC;

1.64
date	2014.11.20.03.56.33;	author jsg;	state Exp;
branches;
next	1.63;
commitid	Xd1bk5sfxUt1kS58;

1.63
date	2014.06.20.04.01.42;	author lteo;	state Exp;
branches;
next	1.62;
commitid	aIFGWbQop2PTYFII;

1.62
date	2014.01.11.04.35.52;	author lteo;	state Exp;
branches;
next	1.61;

1.61
date	2010.04.06.16.01.57;	author jsg;	state Exp;
branches;
next	1.60;

1.60
date	2010.01.12.06.10.33;	author naddy;	state Exp;
branches;
next	1.59;

1.59
date	2009.11.04.09.43.11;	author jsing;	state Exp;
branches;
next	1.58;

1.58
date	2009.02.14.11.18.56;	author sthen;	state Exp;
branches;
next	1.57;

1.57
date	2008.10.16.12.57.01;	author mpf;	state Exp;
branches;
next	1.56;

1.56
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2007.08.28.12.52.06;	author markus;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.01.17.18.38;	author moritz;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.23.14.20.19;	author stevesk;	state Exp;
branches;
next	1.52;

1.52
date	2006.03.28.15.48.33;	author reyk;	state Exp;
branches;
next	1.51;

1.51
date	2005.11.22.11.36.12;	author reyk;	state Exp;
branches;
next	1.50;

1.50
date	2005.10.08.19.45.15;	author canacar;	state Exp;
branches;
next	1.49;

1.49
date	2005.05.28.09.01.52;	author reyk;	state Exp;
branches;
next	1.48;

1.48
date	2005.03.07.16.13.38;	author reyk;	state Exp;
branches;
next	1.47;

1.47
date	2004.09.16.11.29.51;	author markus;	state Exp;
branches;
next	1.46;

1.46
date	2004.06.20.17.51.55;	author avsm;	state Exp;
branches;
next	1.45;

1.45
date	2004.05.21.05.48.50;	author brad;	state Exp;
branches;
next	1.44;

1.44
date	2004.04.28.02.17.03;	author mcbride;	state Exp;
branches;
next	1.43;

1.43
date	2004.01.28.19.44.55;	author canacar;	state Exp;
branches;
next	1.42;

1.42
date	2004.01.18.15.33.30;	author otto;	state Exp;
branches;
next	1.41;

1.41
date	2003.12.15.07.11.31;	author mcbride;	state Exp;
branches;
next	1.40;

1.40
date	2003.08.21.19.14.23;	author frantzen;	state Exp;
branches;
next	1.39;

1.39
date	2003.06.26.21.36.39;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2003.06.11.20.58.45;	author markus;	state Exp;
branches;
next	1.37;

1.37
date	2003.05.14.08.50.37;	author canacar;	state Exp;
branches;
next	1.36;

1.36
date	2003.02.20.23.39.20;	author jason;	state Exp;
branches;
next	1.35;

1.35
date	2002.11.30.13.56.23;	author mickey;	state Exp;
branches;
next	1.34;

1.34
date	2002.11.30.00.20.46;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2002.11.29.18.27.54;	author mickey;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.12.23.18.12;	author pvalchev;	state Exp;
branches;
next	1.31;

1.31
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2002.01.23.23.32.20;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	2002.01.22.18.33.07;	author mickey;	state Exp;
branches;
next	1.28;

1.28
date	2001.10.02.18.04.35;	author deraadt;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2001.06.25.23.05.17;	author provos;	state Exp;
branches;
next	1.26;

1.26
date	2001.04.09.21.44.40;	author ho;	state Exp;
branches;
next	1.25;

1.25
date	2001.04.08.22.45.53;	author jakob;	state Exp;
branches;
next	1.24;

1.24
date	2001.03.06.16.42.08;	author jakob;	state Exp;
branches;
next	1.23;

1.23
date	2001.03.05.22.34.00;	author jakob;	state Exp;
branches;
next	1.22;

1.22
date	2001.02.05.15.18.47;	author jason;	state Exp;
branches;
next	1.21;

1.21
date	2000.12.07.22.52.00;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.07.22.36.45;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.07.21.52.38;	author mickey;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.19.16.31.42;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.03.14.21.56;	author ho;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.26.21.35.38;	author jakob;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.16.11.43.57;	author jakob;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.16.11.20.14;	author jakob;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.16.10.54.58;	author jakob;	state Exp;
branches;
next	1.12;

1.12
date	99.09.16.19.59.01;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	99.07.28.20.41.35;	author jakob;	state Exp;
branches;
next	1.10;

1.10
date	98.09.22.22.03.00;	author provos;	state Exp;
branches;
next	1.9;

1.9
date	98.06.25.19.42.45;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	98.06.11.00.01.23;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	97.07.25.20.12.20;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	97.07.23.02.59.01;	author denny;	state Exp;
branches;
next	1.5;

1.5
date	96.12.12.16.22.53;	author bitblt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.13.11.01.10;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.06.10.07.47.18;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.15.59.04;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.23;	author deraadt;	state Exp;
branches;
next	;

1.28.2.1
date	2002.07.15.11.34.45;	author miod;	state Exp;
branches;
next	;

1.31.2.1
date	2002.07.15.13.45.15;	author jason;	state Exp;
branches;
next	;


desc
@@


1.69
log
@Add new DLT_OPENFLOW link-type to allow using tcpdump to debug switch(4),
eg. tcpdump -y openflow -i switch0

Includes a minor bump for libpcap.

Feedback and OK rzalamena@@
@
text
@/*	$OpenBSD: interface.h,v 1.68 2016/10/22 20:55:04 rzalamena Exp $	*/

/*
 * Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * @@(#) $Id: interface.h,v 1.68 2016/10/22 20:55:04 rzalamena Exp $ (LBL)
 */

#ifndef tcpdump_interface_h
#define tcpdump_interface_h

#ifdef HAVE_OS_PROTO_H
#include "os-proto.h"
#endif

struct tok {
	int v;			/* value */
	char *s;		/* string */
};

extern int aflag;		/* translate network and broadcast addresses */
extern int dflag;		/* print filter code */
extern int eflag;		/* print ethernet header */
extern int fflag;		/* don't translate "foreign" IP address */
extern int Iflag;		/* include interface in output */
extern int nflag;		/* leave addresses as numbers */
extern int Nflag;		/* remove domains from printed host names */
extern int oflag;		/* OS fingerprint */
extern int qflag;		/* quick (shorter) output */
extern int Sflag;		/* print raw TCP sequence numbers */
extern int tflag;		/* print packet arrival time */
extern int vflag;		/* verbose */
extern int xflag;		/* print packet in hex */
extern int Xflag;		/* print packet in hex/ascii */

extern int packettype;		/* as specified by -T */
extern char *device;		/* as specified by -i  */
#define PT_VAT		1	/* Visual Audio Tool */
#define PT_WB		2	/* distributed White Board */
#define PT_RPC		3	/* Remote Procedure Call */
#define PT_RTP		4	/* Real-Time Applications protocol */
#define PT_RTCP		5	/* Real-Time Applications control protocol */
#define PT_CNFP		6	/* Cisco NetFlow protocol */
#define PT_VRRP		7	/* Virtual Router Redundancy protocol */
#define PT_TCP		8	/* TCP */

#ifndef min
#define min(a,b) ((a)>(b)?(b):(a))
#endif
#ifndef max
#define max(a,b) ((b)>(a)?(b):(a))
#endif

/*
 * The default snapshot length.  This value allows most printers to print
 * useful information while keeping the amount of unwanted data down.
 * In particular, it allows ethernet, tcp/ip headers, and a small amount
 * of data, or to capture IPv6 and TCP headers after pflog encapsulation.
 */
#define DEFAULT_SNAPLEN 116
#define IEEE802_11_SNAPLEN (DEFAULT_SNAPLEN + 30)
#define IEEE802_11_RADIO_SNAPLEN (IEEE802_11_SNAPLEN + 64)

#ifndef BIG_ENDIAN
#define BIG_ENDIAN 4321
#define LITTLE_ENDIAN 1234
#endif

#ifdef ETHER_HEADER_HAS_EA
#define ESRC(ep) ((ep)->ether_shost.ether_addr_octet)
#define EDST(ep) ((ep)->ether_dhost.ether_addr_octet)
#else
#define ESRC(ep) ((ep)->ether_shost)
#define EDST(ep) ((ep)->ether_dhost)
#endif

#ifdef ETHER_ARP_HAS_X
#define SHA(ap) ((ap)->arp_xsha)
#define THA(ap) ((ap)->arp_xtha)
#define SPA(ap) ((ap)->arp_xspa)
#define TPA(ap) ((ap)->arp_xtpa)
#else
#ifdef ETHER_ARP_HAS_EA
#define SHA(ap) ((ap)->arp_sha.ether_addr_octet)
#define THA(ap) ((ap)->arp_tha.ether_addr_octet)
#else
#define SHA(ap) ((ap)->arp_sha)
#define THA(ap) ((ap)->arp_tha)
#endif
#define SPA(ap) ((ap)->arp_spa)
#define TPA(ap) ((ap)->arp_tpa)
#endif

#ifndef NTOHL
#define NTOHL(x)	(x) = ntohl(x)
#define NTOHS(x)	(x) = ntohs(x)
#define HTONL(x)	(x) = htonl(x)
#define HTONS(x)	(x) = htons(x)
#endif
#endif

extern char *program_name;	/* used to generate self-identifying messages */

extern int32_t thiszone;	/* seconds offset from gmt to local time */

extern int snaplen;
/* global pointers to beginning and end of current packet (during printing) */
extern const u_char *packetp;
extern const u_char *snapend;

/*
 * True if  "l" bytes of "var" were captured.
 *
 * The "snapend - (l) <= snapend" checks to make sure "l" isn't so large
 * that "snapend - (l)" underflows.
 *
 * The check is for <= rather than < because "l" might be 0.
 */
#define TTEST2(var, l) (snapend - (l) <= snapend && \
			(const u_char *)&(var) <= snapend - (l))

/* True if "var" was captured */
#define TTEST(var) TTEST2(var, sizeof(var))

/* Bail if "l" bytes of "var" were not captured */
#define TCHECK2(var, l) if (!TTEST2(var, l)) goto trunc

/* Bail if "var" was not captured */
#define TCHECK(var) TCHECK2(var, sizeof(var))

struct timeval;
struct bpf_timeval;

extern void ts_print(const struct bpf_timeval *);

extern int fn_print(const u_char *, const u_char *);
extern int fn_printn(const u_char *, u_int, const u_char *);
extern void relts_print(int);
extern const char *tok2str(const struct tok *, const char *, int);
extern char *dnaddr_string(u_short);
extern void safeputs(const char *);
extern void safeputchar(int);
extern void printb(char *, unsigned short, char *);

extern void wrapup(int);

extern __dead void error(const char *, ...)
    __attribute__((__format__ (printf, 1, 2)));
extern void warning(const char *, ...)
    __attribute__ ((__format__ (printf, 1, 2)));

extern char *read_infile(char *);
extern char *copy_argv(char * const *);

extern char *isonsap_string(const u_char *);
extern char *llcsap_string(u_char);
extern char *protoid_string(const u_char *);
extern char *dnname_string(u_short);
extern char *dnnum_string(u_short);

/* The printer routines. */

struct pcap_pkthdr;

extern int ether_encap_print(u_short, const u_char *, u_int, u_int);
extern int llc_print(const u_char *, u_int, u_int, const u_char *,
	const u_char *);
extern int pppoe_if_print(u_short, const u_char *, u_int, u_int);
extern void aarp_print(const u_char *, u_int);
extern void arp_print(const u_char *, u_int, u_int);
extern void atalk_print(const u_char *, u_int);
extern void atalk_print_llap(const u_char *, u_int);
extern void atm_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void bootp_print(const u_char *, u_int, u_short, u_short);
extern void bgp_print(const u_char *, int);
extern void decnet_print(const u_char *, u_int, u_int);
extern void default_print(const u_char *, u_int);
extern void default_print_unaligned(const u_char *, u_int);
extern void dvmrp_print(const u_char *, u_int);
extern void egp_print(const u_char *, u_int, const u_char *);
extern void enc_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void pflog_if_print(u_char *, const struct pcap_pkthdr *,
        const u_char *);
extern void pflog_old_if_print(u_char *, const struct pcap_pkthdr *,
        const u_char *);
extern void pfsync_if_print(u_char *, const struct pcap_pkthdr *,
        const u_char *);
extern void pfsync_ip_print(const u_char *, u_int, const u_char *);
extern void ether_if_print(u_char *, const struct pcap_pkthdr *,
	const u_char *);
extern void ether_tryprint(const u_char *, u_int, int);
extern void fddi_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void ppp_ether_if_print(u_char *, const struct pcap_pkthdr *,
	const u_char *);
extern void gre_print(const u_char *, u_int);
extern void icmp_print(const u_char *, u_int, const u_char *);
extern void ieee802_11_if_print(u_char *, const struct pcap_pkthdr *,
    const u_char *);
extern void ieee802_11_radio_if_print(u_char *, const struct pcap_pkthdr *,
    const u_char *);
extern void iapp_print(const u_char *, u_int);
extern void igrp_print(const u_char *, u_int, const u_char *);
extern void ip_print(const u_char *, u_int);
extern void ipx_print(const u_char *, u_int);
extern void isoclns_print(const u_char *, u_int, u_int, const u_char *,
	const u_char *);
extern void krb_print(const u_char *, u_int);
extern void netbeui_print(u_short, const u_char *, const u_char *);
extern void ipx_netbios_print(const u_char *, const u_char *);
extern void nbt_tcp_print(const u_char *, int);
extern void nbt_udp137_print(const u_char *data, int);
extern void nbt_udp138_print(const u_char *data, int);
extern char *smb_errstr(int, int);
extern void print_data(const unsigned char *, int);
extern void l2tp_print(const u_char *dat, u_int length);
extern void vrrp_print(const u_char *bp, u_int len, int ttl);
extern void carp_print(const u_char *bp, u_int len, int ttl);
extern void hsrp_print(const u_char *, u_int);
extern void vqp_print(const u_char *, u_int);
extern void nfsreply_print(const u_char *, u_int, const u_char *);
extern void nfsreq_print(const u_char *, u_int, const u_char *);
extern void ns_print(const u_char *, u_int, int);
extern void ntp_print(const u_char *, u_int);
extern void loop_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void null_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void ospf_print(const u_char *, u_int, const u_char *);
extern void mobile_print(const u_char *, u_int);
extern void pim_print(const u_char *, u_int);
extern void ppp_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void ppp_hdlc_print(const u_char *, int);
extern void raw_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void rip_print(const u_char *, u_int);
extern void sl_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void sl_bsdos_if_print(u_char *, const struct pcap_pkthdr *,
    const u_char *);
extern void snmp_print(const u_char *, u_int);
extern void sunrpcrequest_print(const u_char *, u_int, const u_char *);
extern void cnfp_print(const u_char *, u_int, const u_char *);
extern void tcp_print(const u_char *, u_int, const u_char *);
extern void tftp_print(const u_char *, u_int);
extern void timed_print(const u_char *, u_int);
extern void udp_print(const u_char *, u_int, const u_char *);
extern void wb_print(const void *, u_int);
extern void ike_print(const u_char *, u_int);
extern void udpencap_print(const u_char *, u_int, const u_char *);
extern void ah_print(const u_char *, u_int, const u_char *);
extern void esp_print(const u_char *, u_int, const u_char *);
extern void cdp_print(const u_char *, u_int, u_int, const u_char *,
	const u_char *);
extern void stp_print(const u_char *, u_int);
extern void radius_print(const u_char *, u_int);
extern void lwres_print(const u_char *, u_int);
extern void ether_print(const u_char *, u_int);
extern void etherip_print(const u_char *, u_int, u_int, const u_char *);
extern void ipcomp_print(const u_char *, u_int, const u_char *);
extern void mpls_print(const u_char *, u_int);
extern void lldp_print(const u_char *, u_int);
extern void slow_print(const u_char *, u_int);
extern void gtp_print(const u_char *, u_int, u_short, u_short);
extern void ofp_print(const u_char *, u_int);
extern void ofp_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);

#ifdef INET6
extern void ip6_print(const u_char *, u_int);
extern void ip6_opt_print(const u_char *, int);
extern int hbhopt_print(const u_char *);
extern int dstopt_print(const u_char *);
extern int frag6_print(const u_char *, const u_char *);
extern void icmp6_print(const u_char *, u_int, const u_char *);
extern void ripng_print(const u_char *, int);
extern int rt6_print(const u_char *, const u_char *);
extern void ospf6_print(const u_char *, u_int);
extern void dhcp6_print(const u_char *, u_int, u_short, u_short);
#endif /*INET6*/

extern u_short in_cksum(const u_short *addr, int len, int csum);
extern u_int16_t in_cksum_shouldbe(u_int16_t, u_int16_t);
@


1.68
log
@Teach tcpdump(8) how to read OpenFlow packets. This initial implementation
supports the following message types: hello, error, echo request/reply,
feature request/reply, set config, packet-in, packet-out, flow removed and
flow mod.

We currently only support printing this messages for OpenFlow 1.3.5, however
it is possible to reuse some functions and get other versions working too.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.67 2016/07/11 00:27:50 rzalamena Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.67 2016/07/11 00:27:50 rzalamena Exp $ (LBL)
d277 2
a278 1
extern void ofp_print(const u_char *);
@


1.67
log
@Teach tcpdump to recognize MPLS pseudowire with control words. Added
support to print encapsulated ethernet packets as well.

"Looks good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.66 2015/11/15 20:35:36 mmcc Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.66 2015/11/15 20:35:36 mmcc Exp $ (LBL)
d277 1
@


1.66
log
@Remove more register keywords.

ok daniel@@, discussed on hackers@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.65 2015/04/05 17:02:57 guenther Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.65 2015/04/05 17:02:57 guenther Exp $ (LBL)
d208 1
@


1.65
log
@Upstream has retired the gnuc.h header, so do so as well, killing a gcc 2.x
reference.

ok sthen@@ jca@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.64 2014/11/20 03:56:33 jsg Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.64 2014/11/20 03:56:33 jsg Exp $ (LBL)
d290 1
a290 1
extern u_short in_cksum(const u_short *addr, register int len, int csum);
@


1.64
log
@Make ip6_print() take an unsigned length matching
ip_print() and others.

Allows code deciding on a minimum length to memmove()
to work as intended, preventing various crashes found
with the afl fuzzer.  Callers of ip6_print() should of
course be fixed to provide sane lengths as well.

ok deraadt@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.63 2014/06/20 04:01:42 lteo Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.63 2014/06/20 04:01:42 lteo Exp $ (LBL)
a28 1
#include "gnuc.h"
@


1.63
log
@Import in_cksum_shouldbe() from mainline tcpdump; this is needed by my
upcoming commit which will fix and improve the display of bad checksums
for the major protocols.

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.62 2014/01/11 04:35:52 lteo Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.62 2014/01/11 04:35:52 lteo Exp $ (LBL)
d279 1
a279 1
extern void ip6_print(const u_char *, int);
@


1.62
log
@Make icmp_print() accept the length variable, which is the length of the
packet without the IP header.  This is needed by the next commit that
will allow tcpdump to detect bad ICMP checksums.

Related functions like {tcp,udp,icmp6}_print() already accept this
length variable, so this change makes icmp_print() consistent with
them as well.

This commit makes no functional change to tcpdump itself.

OK florian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.61 2010/04/06 16:01:57 jsg Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.61 2010/04/06 16:01:57 jsg Exp $ (LBL)
d292 1
@


1.61
log
@Add support for decoding MLDv2 initially from tcpdump.org via FreeBSD,
cleaned up to be less gross after some suggestions from stsp.

ok stsp@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.60 2010/01/12 06:10:33 naddy Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.60 2010/01/12 06:10:33 naddy Exp $ (LBL)
d213 1
a213 1
extern void icmp_print(const u_char *, const u_char *);
@


1.60
log
@Add TCP/UDP checksum display for v6 and clean up the checksum
calculation.  Mostly from tcpdump.org; ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.59 2009/11/04 09:43:11 jsing Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.59 2009/11/04 09:43:11 jsing Exp $ (LBL)
d284 1
a284 1
extern void icmp6_print(const u_char *, const u_char *);
@


1.59
log
@Add support to tcpdump for decoding the GPRS Tunnelling Protocol (GTP),
used to carry GPRS data over IP for GSM and UMTS networks. The decoder
understands GTPv0, GTPv0', GTPv1-C, GTPv1-U and GTPv1' traffic, however
at this stage not all TLV fields are fully decoded.

This work has been kindly sponsored by SystemNet AS (www.systemnet.no).

"commit" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.57 2008/10/16 12:57:01 mpf Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.58 2009/02/14 11:18:56 sthen Exp $ (LBL)
d291 1
a291 1
extern u_short in_cksum(const u_short *addr, register int len, u_short csum);
@


1.58
log
@increase the default snaplen to 116, allows capture of pflog+ipv6+tcp
without knobs.  ok djm, deraadt.
@
text
@d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.57 2008/10/16 12:57:01 mpf Exp $ (LBL)
d276 1
@


1.57
log
@Add support for IEEE "slow protocols" LACP, MARKER as per 802.3ad.
Code from tcpdump.org with cleanup and shrinkage by me.
Help and ideas for extra sanity checks from canacar@@
OK canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.56 2007/10/07 16:41:05 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Id: interface.h,v 1.56 2007/10/07 16:41:05 deraadt Exp $ (LBL)
a71 1
#ifndef INET6
d75 2
a76 2
 * In particular, it allows for an ethernet header, tcp/ip header, and
 * 14 bytes of data (assuming no ip options).
d78 1
a78 5
#define DEFAULT_SNAPLEN 68
#else
#define DEFAULT_SNAPLEN 96
#endif /* INET6 */
#define SACK_SNAPLEN 94
@


1.56
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.55 2007/08/28 12:52:06 markus Exp $	*/
d23 1
a23 1
 * @@(#) $Id$ (LBL)
d280 1
@


1.55
log
@add -I option for printing the interfaces;
ok hshoexer, henning, mcbridge (some time ago)
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.54 2006/06/01 17:18:38 moritz Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.54 2006/06/01 17:18:38 moritz Exp $ (LBL)
@


1.54
log
@Pass the captured packet length in addition to the real packet length
to etherip_print() and do all the bounds checking with it. Also add
bounds checks to ether_print(). This fixes even more crashes.

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.53 2006/05/23 14:20:19 stevesk Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.53 2006/05/23 14:20:19 stevesk Exp $ (LBL)
d43 1
d55 1
@


1.53
log
@add VLAN Query Protocol (VQP) dissector; ok canacar@@ markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.52 2006/03/28 15:48:33 reyk Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.52 2006/03/28 15:48:33 reyk Exp $ (LBL)
d274 1
a274 1
extern void etherip_print(const u_char *, u_int, const u_char *);
@


1.52
log
@Add a simple printer for IEEE 802.1AB LLDP, the Link Layer Discovery
Protocol.

LLDP is used by some switch vendors as a replacement for the non-free
Cizzco Discovery Protocol (CDP) due to some Cisco patentry...

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.51 2005/11/22 11:36:12 reyk Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.51 2005/11/22 11:36:12 reyk Exp $ (LBL)
d239 1
@


1.51
log
@add printer for IAPP and hostapd(8) messages

ok canacar@@, tested by aanriot@@ and others
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.50 2005/10/08 19:45:15 canacar Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.50 2005/10/08 19:45:15 canacar Exp $ (LBL)
d276 1
@


1.50
log
@Add a best effort mpls decoder. From Jason L. Wright.
Since the encapsulated protocol information is not always
available in the MPLS tag stack. The decoder attempts
to guess the protocol.
ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.49 2005/05/28 09:01:52 reyk Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.49 2005/05/28 09:01:52 reyk Exp $ (LBL)
d221 1
@


1.49
log
@support decapsulation of 802.11 data frames

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.48 2005/03/07 16:13:38 reyk Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.48 2005/03/07 16:13:38 reyk Exp $ (LBL)
d274 1
@


1.48
log
@add a printer for 802.11 and for additional radiotap headers,
use -y IEEE802_11 or IEEE802_11_RADIO if supported by the driver.

ok canacar@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.47 2004/09/16 11:29:51 markus Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.47 2004/09/16 11:29:51 markus Exp $ (LBL)
d82 2
a83 1
#define RADIOTAP_SNAPLEN (DEFAULT_SNAPLEN + 64)
@


1.47
log
@add -T tcp to enforce interpretation as TCP
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.46 2004/06/20 17:51:55 avsm Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.46 2004/06/20 17:51:55 avsm Exp $ (LBL)
d82 1
d163 1
d216 4
@


1.46
log
@- do not use __attribute__((volatile)) as its a synonym for __dead nowadays
- bad format string "\%s" -> "%s" in print-ike.c
fixes parsing using CIL, discussed with millert@@ niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.45 2004/05/21 05:48:50 brad Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.45 2004/05/21 05:48:50 brad Exp $ (LBL)
d61 1
@


1.45
log
@add DLT_PPP_ETHER support plus some fixes for pppoe_if_print().

ok canacar@@

From: Marc Huber <pppoe at pro-bono-publico dot de>
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.44 2004/04/28 02:17:03 mcbride Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.44 2004/04/28 02:17:03 mcbride Exp $ (LBL)
d165 3
a167 2
    __attribute__((volatile, format (printf, 1, 2)));
extern void warning(const char *, ...) __attribute__ ((format (printf, 1, 2)));
@


1.44
log
@Make tcpdump print carp as carp. Printing vrrp can be forced with -T vrrp.

ok markus@@ pb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.43 2004/01/28 19:44:55 canacar Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.43 2004/01/28 19:44:55 canacar Exp $ (LBL)
d208 2
@


1.43
log
@privilege separated tcpdump, joint work with otto@@

tested by avsm@@ vincent@@ dhartmei@@ markus@@ hshoexer@@ and others
go for it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.41 2003/12/15 07:11:31 mcbride Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.42 2004/01/18 15:33:30 otto Exp $ (LBL)
d60 1
d225 1
@


1.42
log
@Sync print-domain with tcpdump.org; avoids tcpdump barfing on bogus
DNS traffic.

ok canacar@@ jakob@@
@
text
@d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.41 2003/12/15 07:11:31 mcbride Exp $ (LBL)
d168 1
a168 1
extern char *copy_argv(char **);
@


1.41
log
@Add initial support for pf state synchronization over the network.
Implemented as an in-kernel multicast IP protocol.

Turn it on like this:

# ifconfig pfsync0 up syncif fxp0

There is not yet any authentication on this protocol, so the syncif
must be on a trusted network. ie, a crossover cable between the two
firewalls.

NOTABLE CHANGES:
- A new index based on a unique (creatorid, stateid) tuple has been
  added to the state tree.
- Updates now appear on the pfsync(4) interface; multiple updates may
  be compressed into a single update.
- Applications which use bpf on pfsync(4) will need modification;
  packets on pfsync no longer contains regular pf_state structs,
  but pfsync_state structs which contain no pointers.

Much more to come.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.40 2003/08/21 19:14:23 frantzen Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.40 2003/08/21 19:14:23 frantzen Exp $ (LBL)
d227 1
a227 1
extern void ns_print(const u_char *, u_int);
@


1.40
log
@print the operating system of TCP SYN packets with the -o option
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.39 2003/06/26 21:36:39 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.39 2003/06/26 21:36:39 deraadt Exp $ (LBL)
d203 1
@


1.39
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.38 2003/06/11 20:58:45 markus Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.38 2003/06/11 20:58:45 markus Exp $ (LBL)
d45 1
@


1.38
log
@support for NAT-T (draft-ietf-ipsec-udp-encaps-06.txt); ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.37 2003/05/14 08:50:37 canacar Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.37 2003/05/14 08:50:37 canacar Exp $ (LBL)
d233 1
@


1.37
log
@libpcap and tcpdump now understand the new pflog datalink type.
old datalink type is still recognized.

ok henning@@ dhartmei@@ frantzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.36 2003/02/20 23:39:20 jason Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.36 2003/02/20 23:39:20 jason Exp $ (LBL)
d247 1
@


1.36
log
@add printing of ipcomp, and while in the neighborhood, make ah/esp actually
check the length of the data
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.35 2002/11/30 13:56:23 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.35 2002/11/30 13:56:23 mickey Exp $ (LBL)
d197 2
@


1.35
log
@pfsync support; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.34 2002/11/30 00:20:46 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.34 2002/11/30 00:20:46 deraadt Exp $ (LBL)
d254 1
@


1.34
log
@stop breaking the damn tree mickey
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.32 2002/07/12 23:18:12 pvalchev Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.32 2002/07/12 23:18:12 pvalchev Exp $ (LBL)
d197 2
@


1.33
log
@tcpdump support for pfsync; henning@@ ok
@
text
@a197 2
extern void pfsync_if_print(u_char *, const struct pcap_pkthdr *,
        const u_char *);
@


1.32
log
@In TTEST2(), check to make sure the "l" argument isn't so large that
"snapend - l" underflows; this fixes a buffer overflow with malformed
NFS packets, and may fix other buffer overflows with malformed packets.
From tcpdump CVS via fenner@@FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.31 2002/02/19 19:39:40 millert Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.31 2002/02/19 19:39:40 millert Exp $ (LBL)
d197 2
@


1.31
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.30 2002/01/23 23:32:20 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.30 2002/01/23 23:32:20 mickey Exp $ (LBL)
d127 10
a136 2
/* True if  "l" bytes of "var" were captured */
#define TTEST2(var, l) ((u_char *)&(var) <= snapend - (l))
@


1.31.2.1
log
@Pull in patch from current:
Fix (pvalchev):
In TTEST2(), check to make sure the "l" argument isn't so large that
"snapend - l" underflows; this fixes a buffer overflow with malformed
NFS packets, and may fix other buffer overflows with malformed packets.
From tcpdump CVS via fenner@@FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.31 2002/02/19 19:39:40 millert Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.31 2002/02/19 19:39:40 millert Exp $ (LBL)
d127 2
a128 10
/*
 * True if  "l" bytes of "var" were captured.
 *
 * The "snapend - (l) <= snapend" checks to make sure "l" isn't so large
 * that "snapend - (l)" underflows.
 *
 * The check is for <= rather than < because "l" might be 0.
 */
#define TTEST2(var, l) (snapend - (l) <= snapend && \
			(const u_char *)&(var) <= snapend - (l))
@


1.30
log
@proper handling for DLT_NULL and DLT_LOOP (header byte swapping); pointed out and tested by Alexander Yurchenko <grange@@rt.mipt.ru>
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.29 2002/01/22 18:33:07 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.29 2002/01/22 18:33:07 mickey Exp $ (LBL)
a138 1
#ifdef __STDC__
a140 1
#endif
a153 1
#ifdef __STDC__
a156 1
#endif
a168 1
#ifdef __STDC__
a169 1
#endif
@


1.29
log
@HSRP dissector, from Julian Cowley <julian@@lava.net> via tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.28 2001/10/02 18:04:35 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.28 2001/10/02 18:04:35 deraadt Exp $ (LBL)
d221 1
@


1.28
log
@change timeval to bpf_timeval; 32 bit in size, permitting much greater portability
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.27 2001/06/25 23:05:17 provos Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.27 2001/06/25 23:05:17 provos Exp $ (LBL)
d216 1
@


1.28.2.1
log
@MFC, requested by pvalchev@@:
In TTEST2(), check to make sure the "l" argument isn't so large that
"snapend - l" underflows; this fixes a buffer overflow with malformed
NFS packets, and may fix other buffer overflows with malformed packets.
From tcpdump CVS via fenner@@FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.28 2001/10/02 18:04:35 deraadt Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.28 2001/10/02 18:04:35 deraadt Exp $ (LBL)
d127 2
a128 10
/*
 * True if  "l" bytes of "var" were captured.
 *
 * The "snapend - (l) <= snapend" checks to make sure "l" isn't so large
 * that "snapend - (l)" underflows.
 *
 * The check is for <= rather than < because "l" might be 0.
 */
#define TTEST2(var, l) (snapend - (l) <= snapend && \
			(const u_char *)&(var) <= snapend - (l))
@


1.27
log
@interpret DLT_PFLOG
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.26 2001/04/09 21:44:40 ho Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.26 2001/04/09 21:44:40 ho Exp $ (LBL)
d141 1
d144 1
a144 1
extern void ts_print(const struct timeval *);
@


1.26
log
@Extend IKE knowledge so we can parse the rest (normally encrypted parts)
of the IKE negotiation. Useful for isakmpd's new -L and -l options.
Also some cleanup. (angelos@@, niklas@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.25 2001/04/08 22:45:53 jakob Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.25 2001/04/08 22:45:53 jakob Exp $ (LBL)
d193 2
@


1.25
log
@add support for printing cdp (Cisco Discovery Protocol), from tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.24 2001/03/06 16:42:08 jakob Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.24 2001/03/06 16:42:08 jakob Exp $ (LBL)
d235 1
a235 1
extern void isakmp_print(const u_char *, u_int);
@


1.24
log
@add lwres (BINDv9 resolver) printing. from tcpdump.org and modified by ho@@
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.23 2001/03/05 22:34:00 jakob Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.23 2001/03/05 22:34:00 jakob Exp $ (LBL)
d238 2
@


1.23
log
@add relts_print, safeputs and safeputchar
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.22 2001/02/05 15:18:47 jason Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.22 2001/02/05 15:18:47 jason Exp $ (LBL)
d240 1
@


1.22
log
@etherip printing code... handles draft (v2) and current (v3)
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.21 2000/12/07 22:52:00 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.21 2000/12/07 22:52:00 mickey Exp $ (LBL)
d147 1
d150 2
@


1.21
log
@timed printing; from Ben Smithurst <ben@@scientia.demon.co.uk>; via tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.20 2000/12/07 22:36:45 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.20 2000/12/07 22:36:45 mickey Exp $ (LBL)
d237 2
@


1.20
log
@smb printing; from Andrew Tridgell; via tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.19 2000/12/07 21:52:38 mickey Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.19 2000/12/07 21:52:38 mickey Exp $ (LBL)
d229 1
@


1.19
log
@add vrrp printing; from tcpdump.org
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.18 2000/10/19 16:31:42 jason Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.18 2000/10/19 16:31:42 jason Exp $ (LBL)
d201 7
@


1.18
log
@code for printing bridge spanning tree packets
also fix a bug where llc encoded frames are hex dumped twice when -x is used
@
text
@d1 1
a1 1
/*	$OpenBSD: interface.h,v 1.17 2000/10/03 14:21:56 ho Exp $	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.17 2000/10/03 14:21:56 ho Exp $ (LBL)
d202 1
d242 2
@


1.17
log
@Compile with -Wall. Add $OpenBSD$. (jakob@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.16 2000/04/26 21:35:38 jakob Exp $ (LBL)
d226 1
@


1.16
log
@INET6
DHCP/BOOTP
tcp & udp checksum detection
numerous bugfixes
@
text
@d1 2
d23 1
a23 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.15 2000/01/16 11:43:57 jakob Exp $ (LBL)
d176 1
d218 1
d223 2
@


1.15
log
@BGP support (from KAME/WIDE). INET6 parts not done yet.
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.14 2000/01/16 11:20:14 jakob Exp $ (LBL)
d48 1
d65 1
d73 3
d222 12
@


1.14
log
@Mobile IP support (from KAME/NetBSD)
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.13 2000/01/16 10:54:58 jakob Exp $ (LBL)
d175 1
@


1.13
log
@L2TP support (from KAME)
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.12 1999/09/16 19:59:01 brad Exp $ (LBL)
d199 1
@


1.12
log
@delcare esp_print and radius_print
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.11 1999/07/28 20:41:35 jakob Exp $ (LBL)
d192 1
@


1.11
log
@-  Merge some changes from tcpdump 3.4
   -a flag; attempt to convert network and broadcast addresses to names
   Improved signal handling
   Miscellaneous fixes and typos
   OSPF MD5 authentication support

-  -X flag; emacs-hexl print (including ascii)

-  Add ECN bits to TCP and IP headers

-  IKE & IPsec (ESP & AH) support

OK deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996
d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.10 1998/09/22 22:03:00 provos Exp $ (LBL)
d55 1
a55 1
#define	PT_CNFP		6	/* Cisco NetFlow protocol */
d200 1
d203 2
d211 3
@


1.10
log
@make tcpdump aware of SACK (RFC 2018), loosely based on a patch from
hari@@cs.berkeley.edu.
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.9 1998/06/25 19:42:45 mickey Exp $ (LBL)
d37 1
d40 1
a136 1
extern int32_t gmt2local(void);
a141 1
extern char *savestr(const char *);
d180 1
a199 1
extern void enc_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
@


1.9
log
@add cisco netflow proto printing; not tested w/ version 5, but should work anyways
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.8 1998/06/11 00:01:23 provos Exp $ (LBL)
d69 1
@


1.8
log
@handle IPSec processed packets (DLT_ENC) in libpcap, display them with
tcpdump + additional info (SPI + which type of transforms where passed).
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.7 1997/07/25 20:12:20 mickey Exp $ (LBL)
d53 1
@


1.7
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d21 1
a21 1
 * @@(#) $Header: /cvs/src/usr.sbin/tcpdump/interface.h,v 1.6 1997/07/23 02:59:01 denny Exp $ (LBL)
d197 1
@


1.6
log
@Better handling for AppleTalk, and netatalk in particular.
Handle native Ethertalk phase 1 & 2 as well as the localtalk encapsulation a la Kinetics FastPath previously handled.
@
text
@d21 1
a21 1
 * @@(#) $Header: /usr/src/usr.sbin/tcpdump/RCS/interface.h,v 1.2 1997/07/20 17:16:38 denny Exp denny $ (LBL)
d143 1
a143 1
#if __STDC__
@


1.5
log
@*** empty log message ***
@
text
@d21 1
a21 1
 * @@(#) $Header: interface.h,v 1.100 96/12/10 22:55:04 leres Exp $ (LBL)
d170 1
@


1.4
log
@it is 3.2 now.
@
text
@a0 2
/*	$OpenBSD$	*/

d21 1
a21 1
 * @@(#) Header: interface.h,v 1.90 96/06/23 02:44:19 leres Exp (LBL)
d27 1
d54 2
a55 13
extern char *program_name;	/* used to generate self-identifying messages */

extern int32_t thiszone;	/* seconds offset from gmt to local time */

extern int snaplen;
/* global pointers to beginning and end of current packet (during printing) */
extern const u_char *packetp;
extern const u_char *snapend;

extern int pcap_fddipad;	/* alignment offset for FDDI headers,in bytes */

#ifdef __STDC__
struct timeval;
d57 2
a58 16

extern void ts_print(const struct timeval *);
extern int32_t gmt2local(void);

extern int fn_print(const u_char *, const u_char *);
extern int fn_printn(const u_char *, u_int, const u_char *);
extern const char *tok2str(const struct tok *, const char *, int);
extern char *dnaddr_string(u_short);
extern char *savestr(const char *);

extern void wrapup(int);

#if __STDC__
extern __dead void error(const char *, ...)
    __attribute__((volatile, format (printf, 1, 2)));
extern void warning(const char *, ...) __attribute__ ((format (printf, 1, 2)));
a60 58
extern char *read_infile(char *);
extern char *copy_argv(char **);

extern char *isonsap_string(const u_char *);
extern char *llcsap_string(u_char);
extern char *protoid_string(const u_char *);
extern char *dnname_string(u_short);
extern char *dnnum_string(u_short);

/* The printer routines. */

#ifdef __STDC__
struct pcap_pkthdr;
#endif

extern void atm_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void ether_if_print(u_char *, const struct pcap_pkthdr *,
			   const u_char *);
extern void fddi_if_print(u_char *, const struct pcap_pkthdr *, const u_char*);
extern void null_if_print(u_char *, const struct pcap_pkthdr *, const u_char*);
extern void ppp_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);
extern void sl_if_print(u_char *, const struct pcap_pkthdr *, const u_char *);

extern void arp_print(const u_char *, int, int);
extern void ip_print(const u_char *, int);
extern void tcp_print(const u_char *, int, const u_char *);
extern void udp_print(const u_char *, int, const u_char *);
extern void icmp_print(const u_char *, const u_char *);
extern void default_print(const u_char *, int);
extern void default_print_unaligned(const u_char *, int);

extern void aarp_print(const u_char *, int);
extern void atalk_print(const u_char *, int);
extern void bootp_print(const u_char *, int, u_short, u_short);
extern void decnet_print(const u_char *, int, int);
extern void egp_print(const u_char *, int, const u_char *);
extern int ether_encap_print(u_short, const u_char *, int, int);
extern void ipx_print(const u_char *, int length);
extern void isoclns_print(const u_char *, int, int,
			  const u_char *, const u_char *);
extern int llc_print(const u_char *, int, int, const u_char *, const u_char *);
extern void nfsreply_print(const u_char *, int, const u_char *);
extern void nfsreq_print(const u_char *, int, const u_char *);
extern void ns_print(const u_char *, int);
extern void ntp_print(const u_char *, int);
extern void ospf_print(const u_char *, int, const u_char *);
extern void rip_print(const u_char *, int);
extern void snmp_print(const u_char *, int);
extern void sunrpcrequest_print(const u_char *, int, const u_char *);
extern void tftp_print(const u_char *, int);
extern void wb_print(const void *, int);
extern void dvmrp_print(const u_char *, int);
extern void pim_print(const u_char *, int);
extern void krb_print(const u_char *, int);

#define min(a,b) ((a)>(b)?(b):(a))
#define max(a,b) ((b)>(a)?(b):(a))

d105 13
d119 11
a129 3
/* some systems don't define these */
#ifndef ETHERTYPE_REVARP
#define ETHERTYPE_REVARP	0x8035
d132 15
a146 3
#ifndef REVARP_REQUEST
#define REVARP_REQUEST		3
#define REVARP_REPLY		4
d149 13
d163 41
@


1.3
log
@sync to latest
@
text
@d1 1
a1 2
/**//*	$OpenBSD: interface.h,v 1.2 1995/03/06 19:10:18 mycroft Exp $	*/
/*	$NetBSD: interface.h,v 1.2 1995/03/06 19:10:18 mycroft Exp $	*/
d4 1
a4 1
 * Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993, 1994
d23 1
a23 1
 * @@(#) Header: interface.h,v 1.66 94/06/14 20:21:37 leres Exp (LBL)
d26 2
a27 12
#ifdef __GNUC__
#define inline __inline
#ifndef __dead
#define __dead volatile
#endif
#else
#define inline
#define __dead
#endif

#include "os.h"			/* operating system stuff */
#include "md.h"			/* machine dependent stuff */
d29 2
a30 2
#ifndef SIGRET
#define SIGRET void		/* default */
d33 1
a33 1
struct token {
d48 7
d57 2
d64 1
a64 1
extern int fddipad;	/* alignment offset for FDDI headers, in bytes */
d66 1
a66 1
/* Eliminate some bogus warnings. */
d68 1
a68 2

typedef void (*printfunc)(u_char *, struct timeval *, int, int);
d71 1
a71 2
extern int clock_sigfigs(void);
int gmt2local(void);
d75 1
a75 1
extern const char *tok2str(const struct token *, const char *, int);
a78 1
extern int initdevice(char *, int, int *);
d81 5
a85 2
extern __dead void error(char *, ...);
extern void warning(char *, ...);
a89 1
extern void usage(void);
d98 1
d100 1
d102 1
d138 3
d156 44
@


1.2
log
@Updating to the latest LBL release.
Sun's SKIP support added.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a137 5

extern void skip_print(const u_char *, int, const u_char *);
extern void skip_print_old(const u_char *, int, const u_char *);
extern void ah_print(const u_char *, int, const u_char *);
extern void esp_print(const u_char *, int, const u_char *);
@


1.1
log
@Initial revision
@
text
@d1 1
d138 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
