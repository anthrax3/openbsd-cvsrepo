head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.12
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.32
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.30
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.26
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.24
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	Uu5nFG3wCl0LACBb;

1.8
date	2014.08.14.12.44.44;	author mpi;	state Exp;
branches;
next	1.7;
commitid	yLXrOcgrag4eS8u4;

1.7
date	2007.06.04.15.10.12;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.21.12.43.56;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.19.17.54.44;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.20.08.30.40;	author pascoe;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.03.00.21.04;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.19.16.31.42;	author jason;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: print-stp.c,v 1.8 2014/08/14 12:44:44 mpi Exp $	*/

/*
 * Copyright (c) 2000 Jason L. Wright (jason@@thought.net)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Pretty print 802.1D Bridge Protocol Data Units
 */

#include <sys/time.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/ioctl.h>

struct mbuf;
struct rtentry;
#include <net/if.h>

#include <netinet/in.h>
#include <netinet/ip.h>

#include <ctype.h>
#include <netdb.h>
#include <pcap.h>
#include <signal.h>
#include <stdio.h>

#include <netinet/if_ether.h>
#include "ethertype.h"

#include <net/ppp_defs.h>
#include "interface.h"
#include "addrtoname.h"
#include "extract.h"
#include "llc.h"

#define	STP_MSGTYPE_CBPDU	0x00
#define	STP_MSGTYPE_RSTP	0x02
#define	STP_MSGTYPE_TBPDU	0x80

#define	STP_FLAGS_STPMASK	0x81		/* strip unused STP flags */
#define	STP_FLAGS_RSTPMASK	0x7f		/* strip unused RSTP flags */
#define	STP_FLAGS_TC		0x01		/* Topology change */
#define	STP_FLAGS_P		0x02		/* Proposal flag */
#define	STP_FLAGS_ROLE		0x0c		/* Port Role */
#define	STP_FLAGS_ROLE_S	2		/* Port Role offset */
#define	STP_FLAGS_ROLE_ALT	1		/* Alt/Backup port */
#define	STP_FLAGS_ROLE_ROOT	2		/* Root port */
#define	STP_FLAGS_ROLE_DESG	3		/* Designated port */
#define	STP_FLAGS_L		0x10		/* Learning flag */
#define	STP_FLAGS_F		0x20		/* Forwarding flag */
#define	STP_FLAGS_A		0x40		/* Agreement flag */
#define	STP_FLAGS_TCA		0x80		/* Topology change ack */
#define STP_FLAGS_BITS								\
	"\20\1TC\2PROPOSAL\5LEARNING\6FORWARDING\7AGREED\10TCACK"

enum {
	STP_PROTO_STP	= 0x00,
	STP_PROTO_RSTP	= 0x02,
	STP_PROTO_SSTP	= 0x10	/* Cizzco-Eeeh */
};

static void stp_print_cbpdu(const u_char *, u_int, int);
static void stp_print_tbpdu(const u_char *, u_int);

void
stp_print(p, len)
	const u_char *p;
	u_int len;
{
	u_int16_t id;
	int proto = STP_PROTO_STP;

	if (len < 3)
		goto truncated;
	if (p[0] == LLCSAP_8021D && p[1] == LLCSAP_8021D && p[2] == LLC_UI)
		printf("802.1d");
	else if (p[0] == LLCSAP_SNAP && p[1] == LLCSAP_SNAP && p[2] == LLC_UI) {
		proto = STP_PROTO_SSTP;
		printf("SSTP");
		p += 5;
		len -= 5;
	} else {
		printf("invalid protocol");
		return;
	}
	p += 3;
	len -= 3;

	if (len < 3)
		goto truncated;
	id = EXTRACT_16BITS(p);
	if (id != 0) {
		printf(" unknown protocol id(0x%x)", id);
		return;
	}
	switch (p[2]) {
	case STP_PROTO_STP:
		printf(" STP");
		break;
	case STP_PROTO_RSTP:
		printf(" RSTP");
		break;
	default:
		printf(" unknown protocol ver(0x%x)", p[2]);
		return;
	}
	p += 3;
	len -= 3;

	if (len < 1)
		goto truncated;
	switch (*p) {
	case STP_MSGTYPE_CBPDU:
		stp_print_cbpdu(p, len, proto);
		break;
	case STP_MSGTYPE_RSTP:
		stp_print_cbpdu(p, len, STP_PROTO_RSTP);
		break;
	case STP_MSGTYPE_TBPDU:
		stp_print_tbpdu(p, len);
		break;
	default:
		printf(" unknown message (0x%02x)", *p);
		break;
	}

	return;

truncated:
	printf("[|802.1d]");
}

static void
stp_print_cbpdu(p, len, proto)
	const u_char *p;
	u_int len;
	int proto;
{
	u_int32_t cost;
	u_int16_t t;
	u_int8_t flags, role;
	int x;

	p += 1;
	len -= 1;

	printf(" config");

	if (len < 1)
		goto truncated;
	if (*p) {
		switch (proto) {
		case STP_PROTO_STP:
		case STP_PROTO_SSTP:
			flags = *p & STP_FLAGS_STPMASK;
			role = STP_FLAGS_ROLE_DESG;
			break;
		case STP_PROTO_RSTP:
		default:
			flags = *p & STP_FLAGS_RSTPMASK;
			role = (flags & STP_FLAGS_ROLE) >> STP_FLAGS_ROLE_S;
			break;
		}

		printb(" flags", flags, STP_FLAGS_BITS);
		switch (role) {
		case STP_FLAGS_ROLE_ALT:
			printf(" role=ALT/BACKUP");
			break;
		case STP_FLAGS_ROLE_ROOT:
			printf(" role=ROOT");
			break;
		case STP_FLAGS_ROLE_DESG:
			printf(" role=DESIGNATED");
			break;
		}
	}
	p += 1;
	len -= 1;

	if (len < 8)
		goto truncated;
	printf(" root=");
	printf("%x.", EXTRACT_16BITS(p));
	p += 2;
	len -= 2;
	for (x = 0; x < 6; x++) {
		printf("%s%x", (x != 0) ? ":" : "", *p);
		p++;
		len--;
	}

	if (len < 4)
		goto truncated;
	cost = EXTRACT_32BITS(p);
	printf(" rootcost=%u", cost);
	p += 4;
	len -= 4;

	if (len < 8)
		goto truncated;
	printf(" bridge=");
	printf("%x.", EXTRACT_16BITS(p));
	p += 2;
	len -= 2;
	for (x = 0; x < 6; x++) {
		printf("%s%x", (x != 0) ? ":" : "", *p);
		p++;
		len--;
	}

	if (len < 2)
		goto truncated;
	t = EXTRACT_16BITS(p);
	switch (proto) {
	case STP_PROTO_STP:
	case STP_PROTO_SSTP:
		printf(" port=%u", t & 0xff);
		printf(" ifcost=%u", t >> 8);
		break;
	case STP_PROTO_RSTP:
	default:
		printf(" port=%u", t & 0xfff);
		printf(" ifcost=%u", t >> 8);
		break;
	}
	p += 2;
	len -= 2;

	if (len < 2)
		goto truncated;
	printf(" age=%u/%u", p[0], p[1]);
	p += 2;
	len -= 2;

	if (len < 2)
		goto truncated;
	printf(" max=%u/%u", p[0], p[1]);
	p += 2;
	len -= 2;

	if (len < 2)
		goto truncated;
	printf(" hello=%u/%u", p[0], p[1]);
	p += 2;
	len -= 2;

	if (len < 2)
		goto truncated;
	printf(" fwdelay=%u/%u", p[0], p[1]);
	p += 2;
	len -= 2;

	if (proto == STP_PROTO_SSTP) {
		if (len < 7)
			goto truncated;
		p += 1;
		len -= 1;
		if (EXTRACT_16BITS(p) == 0 && EXTRACT_16BITS(p + 2) == 0x02) {
			printf(" pvid=%u", EXTRACT_16BITS(p + 4));
			p += 6;
			len -= 6;
		}
	}

	return;

truncated:
	printf("[|802.1d]");
}

static void
stp_print_tbpdu(p, len)
	const u_char *p;
	u_int len;
{
	printf(" tcn");
}
@


1.8
log
@No use for <netinet/in_systm.h> nor <netinet/tcpip.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.7 2007/06/04 15:10:12 henning Exp $	*/
a32 1
#include <sys/param.h>
@


1.7
log
@do not inlcude ipx headers
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.6 2006/11/21 12:43:56 reyk Exp $	*/
a43 1
#include <netinet/in_systm.h>
@


1.6
log
@in octal, eight looks like 10... fix the STP_FLAGS_BITS definition
introduced with my previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.5 2006/11/19 17:54:44 reyk Exp $	*/
a45 3

#include <netipx/ipx.h>
#include <netipx/ipx_if.h>
@


1.5
log
@add support for displaying Rapid Spanning Tree Protocol frames,
as specified in IEEE 802.1d-2004/802.1w.

ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.4 2004/12/20 08:30:40 pascoe Exp $	*/
d83 1
a83 1
	"\20\1TC\2PROPOSAL\5LEARNING\6FORWARDING\7AGREED\8TCACK"
@


1.4
log
@Add support for displaying Shared Spanning Tree Protocol frames, a minor
variation on 802.1d/STP.

ok otto@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.3 2003/06/03 00:21:04 jason Exp $	*/
d66 1
d69 21
a89 2
#define	STP_FLAGS_TC		0x01            /* Topology change */
#define	STP_FLAGS_TCA		0x80            /* Topology change ack */
d100 1
a100 1
	int cisco_sstp = 0;
d107 1
a107 1
		cisco_sstp = 1;
d125 8
a132 1
	if (p[2] != 0) {
d143 4
a146 1
		stp_print_cbpdu(p, len, cisco_sstp);
d163 1
a163 1
stp_print_cbpdu(p, len, cisco_sstp)
d166 1
a166 1
	int cisco_sstp;
d170 1
d181 25
a205 8
		x = 0;

		printf(" flags=0x%x<", *p);
		if ((*p) & STP_FLAGS_TC)
			printf("%stc", (x++ != 0) ? "," : "");
		if ((*p) & STP_FLAGS_TCA)
			printf("%stcack", (x++ != 0) ? "," : "");
		putchar('>');
d225 1
a225 1
	printf(" rootcost=0x%x", cost);
d244 12
a255 1
	printf(" port=0x%x", t);
d283 1
a283 1
	if (cisco_sstp) {
@


1.3
log
@last bit of clause 3 & 4 nuking for me.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.2 2002/02/19 19:39:40 millert Exp $	*/
d71 1
a71 1
static void stp_print_cbpdu(const u_char *, u_int);
d80 1
d84 8
a91 1
	if (p[0] != LLCSAP_8021D || p[1] != LLCSAP_8021D || p[2] != LLC_UI) {
a94 1
	printf("802.1d");
d116 1
a116 1
		stp_print_cbpdu(p, len);
d133 1
a133 1
stp_print_cbpdu(p, len)
d136 1
d223 12
@


1.2
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: print-stp.c,v 1.1 2000/10/19 16:31:42 jason Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Jason L. Wright
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@code for printing bridge spanning tree packets
also fix a bug where llc encoded frames are hex dumped twice when -x is used
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a43 1
#ifdef __STDC__
a45 1
#endif
@

