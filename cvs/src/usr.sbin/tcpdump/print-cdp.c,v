head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2016.03.29.04.07.50;	author canacar;	state Exp;
branches;
next	1.5;
commitid	MeDI2E7K2qEV9gYP;

1.5
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	Uu5nFG3wCl0LACBb;

1.4
date	2009.10.27.23.59.55;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.07.16.41.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.30.23.22.46;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.08.22.45.53;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Properly check for the end of captured packet while printing CDP packets.
ok deraadt@@
@
text
@/*	$OpenBSD: print-cdp.c,v 1.5 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 1992, 1993, 1994, 1995, 1996, 1997
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Code by Gert Doering, SpaceNet GmbH, gert@@space.net
 *
 * Reference documentation:
 *    http://www.cisco.com/univercd/cc/td/doc/product/lan/trsrb/frames.htm
 */

#include <sys/time.h>

#include <netinet/in.h>

#include <ctype.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>

#include "interface.h"
#include "addrtoname.h"
#include "extract.h"			/* must come after interface.h */

int cdp_print_addr(const u_char * p, int l);
void cdp_print_prefixes(const u_char * p, int l);

/*
 * Returns non-zero IFF it succeeds in printing the header
 */
void
cdp_print(const u_char *p, u_int length, u_int caplen,
	  const u_char *esrc, const u_char *edst)
{
	int i;
	int type, len;

	/* Cisco Discovery Protocol */

	if (caplen < 12) {
		printf("[|cdp]");
		return;
	}

	i=8;		/* CDP data starts at offset 8 */
	printf("CDP v%d, ttl=%ds", p[i], p[i+1]);
	i+=4;		/* skip version, TTL and chksum */

	while (i < length) {
		if (i + 4 > caplen) {
			printf("[|cdp]");
			return;
		}

		type = (p[i]<<8) + p[i+1];
		len  = (p[i+2]<<8) + p[i+3];

		if (vflag)
			printf(" %02x/%02x", type, len);

		if (len < 4)
			goto error;

		if (i+len > caplen) {
			printf("[|cdp]");
			return;
		}

		switch(type) {
		case 0x01:
			printf(" DevID '%.*s'", len - 4, p + i + 4);
			break;
		case 0x02:
			printf(" Addr");
			if (cdp_print_addr(p + i + 4, len - 4))
				goto error;
			break;
		case 0x03:
			printf(" PortID '%.*s'", len - 4, p + i + 4);
			break;
		case 0x04:
			if (len < 8)
				goto error;
			printf(" CAP 0x%02x", (unsigned) p[i+7]);
			break;
		case 0x05:
			if (vflag)
				printf(" Version %.*s", len-4, p+i+4 );
			else
				printf(" Version (suppressed)" );
			break;
		case 0x06:
			printf(" Platform '%.*s'", len-4, p+i+4 );
			break;
		case 0x07:
			cdp_print_prefixes(p+i+4, len-4);
			break;
		case 0x09:		/* guess - not documented */
			printf(" VTP-Management-Domain '%.*s'", len-4, p+i+4 );
			break;
		case 0x0a:		/* guess - not documented */
			if (len < 6)
				goto error;
			printf(" Native-VLAN-ID %d", (p[i+4]<<8) + p[i+4+1] - 1 );
			break;
		case 0x0b:		/* guess - not documented */
			if (len < 5)
				goto error;
			printf(" Duplex %s", p[i+4] ? "full": "half" );
			break;
		default:
			printf(" unknown-type %02x len %d", type, len );
		}

		/* avoid infinite loop */
		if (len == 0)
			break;
		i += len;
	}
error:
	printf("[!cdp]");
}

#define CDP_CHECK_ACCESS(p, s) if ((endp - (p)) < (s)) return 1	

int
cdp_print_addr(const u_char * p, int l)
{
	int pl, pt, al, num;
	const u_char * endp = p+l;

	CDP_CHECK_ACCESS(p, 4);
	num = (p[0] << 24) + (p[1]<<16) + (p[2]<<8)+ p[3];
	p+=4;

	printf(" (%d): ", num);

	while(p < endp && num >= 0) {
		CDP_CHECK_ACCESS(p, 2);
		pt=*p;
		pl=*(p+1);
		p+=2;

		CDP_CHECK_ACCESS(p, 3);
		/* special case: IPv4, protocol type=0xcc, addr. length=4 */
		if (pl == 1 && *p == 0xcc && p[1] == 0 && p[2] == 4) {
			p+=3;

			CDP_CHECK_ACCESS(p, 4);
			printf("IPv4 %d.%d.%d.%d ", p[0], p[1], p[2], p[3]);
			p+=4;
		} else {	/* generic case: just print raw data */
			printf("pt=0x%02x, pl=%d, pb=", pt, pl);

			CDP_CHECK_ACCESS(p, pl);
			while(pl-- > 0)
				printf(" %02x", *p++);

			CDP_CHECK_ACCESS(p, 2);
			al=(*p << 8) + *(p+1);
			printf(", al=%d, a=", al);
			p+=2;

			CDP_CHECK_ACCESS(p, al);
			while(al-- > 0)
				printf(" %02x", *p++);
		}
		printf("  ");
		num--;
	}

	return 0;
}


void
cdp_print_prefixes(const u_char * p, int l)
{
	printf(" IPv4 Prefixes (%d):", l/5);

	while (l > 0) {
		if (l >= 5)
			printf(" %d.%d.%d.%d/%d", p[0], p[1], p[2], p[3], p[4] );
		l-=5; p+=5;
	}
}
@


1.5
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cdp.c,v 1.4 2009/10/27 23:59:55 deraadt Exp $	*/
d42 1
a42 1
void cdp_print_addr(const u_char * p, int l);
d68 1
a68 1
			printf("[!cdp]");
d78 3
d82 1
a82 1
			printf("[!cdp]");
d92 2
a93 1
			cdp_print_addr(p + i + 4, len - 4);
d99 2
d119 2
d124 2
d137 2
d141 3
a143 1
void
d146 1
a146 1
	int pl, al, num;
d149 1
d156 2
d161 1
d166 1
d170 3
a172 1
			printf("pt=0x%02x, pl=%d, pb=", *(p-2), pl);
d175 2
d180 2
d188 2
d199 2
a200 1
		printf(" %d.%d.%d.%d/%d", p[0], p[1], p[2], p[3], p[4] );
@


1.4
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cdp.c,v 1.3 2007/10/07 16:41:05 deraadt Exp $	*/
a28 1
#include <sys/param.h>
@


1.3
log
@trash $Header goo which is just annoying; 5595
@
text
@d1 1
a1 1
/*	$OpenBSD: print-cdp.c,v 1.2 2001/05/30 23:22:46 mickey Exp $	*/
a27 5

#ifndef lint
static const char rcsid[] =
    "@@(#) $Id$";
#endif
@


1.2
log
@make it print in normal way w/o billion new lines
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
a31 1
    "@@(#) $Header: /cvs/src/usr.sbin/tcpdump/print-cdp.c,v 1.1 2001/04/08 22:45:53 jakob Exp $";
@


1.1
log
@add support for printing cdp (Cisco Discovery Protocol), from tcpdump.org
@
text
@d1 1
a1 1
/*	$Id	*/
d31 1
a31 1
    "@@(#) $Header: /tcpdump/master/tcpdump/print-cdp.c,v 1.4 2000/07/29 07:27:54 assar Exp $";
d48 2
a49 2
static void cdp_print_addr( const u_char * p, int l );
static void cdp_print_prefixes( const u_char * p, int l );
d63 2
a64 3

	if ( caplen < 12 ) {
		(void)printf("[|cdp]");
d69 1
a69 1
	printf ("CDP v%d, ttl=%ds", p[i], p[i+1] );
d73 15
a87 11
	    if ( i+4 > caplen ) {
		printf("[!cdp]");
		return;
	    }
	    type = (p[i]<<8) + p[i+1];
	    len  = (p[i+2]<<8) + p[i+3];

	    if ( vflag )
		printf( "\n\t%02x/%02x", type, len );
	    else
		printf( "\n\t" );
d89 38
a126 4
	    if ( i+len > caplen ) {
		printf("[!cdp]");
		return;
	    }
d128 4
a131 44
	    switch( type )
	    {
	    case 0x01:
		printf( " DevID '%.*s'", len-4, p+i+4 );
		break;
	    case 0x02:
		printf( " Addr" );
		cdp_print_addr( p+i+4, len-4 );
		break;
	    case 0x03:
		printf( " PortID '%.*s'", len-4, p+i+4 );
		break;
	    case 0x04:
		printf( " CAP 0x%02x", (unsigned) p[i+7] );
		break;
	    case 0x05:
		if ( vflag )
		    printf( " Version:\n%.*s", len-4, p+i+4 );
		else
		    printf( " Version: (suppressed)" );
		break;
	    case 0x06:
		printf( " Platform: '%.*s'", len-4, p+i+4 );
		break;
	    case 0x07:
	        cdp_print_prefixes( p+i+4, len-4 );
		break;
	    case 0x09:		/* guess - not documented */
		printf( " VTP Management Domain: '%.*s'", len-4, p+i+4 );
		break;
	    case 0x0a:		/* guess - not documented */
		printf( " Native VLAN ID: %d", (p[i+4]<<8) + p[i+4+1] - 1 );
		break;
	    case 0x0b:		/* guess - not documented */
		printf( " Duplex: %s", p[i+4] ? "full": "half" );
		break;
	    default:
		printf( " unknown field type %02x, len %d", type, len );
	    }

	    /* avoid infinite loop */
	    if (len == 0)
		break;
	    i+=len;
d135 2
a136 2
static void
cdp_print_addr( const u_char * p, int l )
d144 1
a144 1
	printf(" (%d): ", num );
d146 1
a146 1
	while( p < endp && num >= 0) {
d148 1
a148 1
		p+=2; 
d151 1
a151 2
		if ( pl == 1 && *p == 0xcc && 
		     p[1] == 0 && p[2] == 4 ) {
d154 1
a154 1
			printf( "IPv4 %d.%d.%d.%d ", p[0], p[1], p[2], p[3] );
d158 2
a159 2
			while( pl-- > 0 )
				printf( " %02x", *p++);
d161 4
a164 4
			printf( ", al=%d, a=", al );
			p+=2; 
			while( al-- > 0 )
				printf( " %02x", *p++);
d172 2
a173 2
static void
cdp_print_prefixes( const u_char * p, int l )
d175 1
a175 1
    printf( " IPv4 Prefixes (%d):", l/5 );
d177 4
a180 4
    while(l > 0) {
	printf( " %d.%d.%d.%d/%d", p[0], p[1], p[2], p[3], p[4] );
	l-=5; p+=5;
    }
@

