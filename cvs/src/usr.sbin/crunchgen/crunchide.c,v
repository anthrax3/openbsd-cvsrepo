head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2015.10.18.17.32.22;	author tobias;	state Exp;
branches;
next	1.10;
commitid	i9hOKbPpWxzUbzzH;

1.10
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	z3HrihslRYb4HqW9;

1.9
date	2015.01.18.05.30.58;	author guenther;	state Exp;
branches;
next	1.8;
commitid	OYIU77lQl50OoBCB;

1.8
date	2014.03.16.20.45.47;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.12.19.48.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.14.16.58.05;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.13.17.23.41;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.04.04.59.48;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.21.17.19.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.08.22.15.38.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.22.15.18.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Avoid integer overflow with very large files.

ok millert
@
text
@/* $OpenBSD: crunchide.c,v 1.10 2015/08/20 22:39:29 deraadt Exp $	 */

/*
 * Copyright (c) 1994 University of Maryland
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of U.M. not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  U.M. makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * U.M. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL U.M.
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author: James da Silva, Systems Design and Analysis Group
 *			   Computer Science Department
 *			   University of Maryland at College Park
 */
/*
 * crunchide.c - tiptoes through an a.out symbol table, hiding all defined
 *	global symbols.  Allows the user to supply a "keep list" of symbols
 *	that are not to be hidden.  This program relies on the use of the
 * 	linker's -dc flag to actually put global bss data into the file's
 * 	bss segment (rather than leaving it as undefined "common" data).
 *
 * 	The point of all this is to allow multiple programs to be linked
 *	together without getting multiple-defined errors.
 *
 *	For example, consider a program "foo.c".  It can be linked with a
 *	small stub routine, called "foostub.c", eg:
 *	    int foo_main(int argc, char **argv){ return main(argc, argv); }
 *      like so:
 *	    cc -c foo.c foostub.c
 *	    ld -dc -r foo.o foostub.o -o foo.combined.o
 *	    crunchide -k _foo_main foo.combined.o
 *	at this point, foo.combined.o can be linked with another program
 * 	and invoked with "foo_main(argc, argv)".  foo's main() and any
 * 	other globals are hidden and will not conflict with other symbols.
 *
 * TODO:
 *      - arrange that all the BSS segments start at the same address, so
 *	  that the final crunched binary BSS size is the max of all the
 *	  component programs' BSS sizes, rather than their sum.
 */

#include <sys/types.h>
#include <sys/exec_elf.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "mangle.h"

void	usage(void);

void	add_to_keep_list(char *);
void	add_file_to_keep_list(char *);

void	hide_syms(char *);
void	elf_hide(int, char *);
int	in_keep_list(char *symbol);
int	crunchide_main(int argc, char *argv[]);

extern char	*__progname;
extern int elf_mangle;

int 
crunchide_main(int argc, char *argv[])
{
	int             ch;

	while ((ch = getopt(argc, argv, "Mhk:f:")) != -1)
		switch (ch) {
		case 'M':
			elf_mangle = 1;
			break;
		case 'h':
			break;
		case 'k':
			add_to_keep_list(optarg);
			break;
		case 'f':
			add_file_to_keep_list(optarg);
			break;
		default:
			usage();
		}

	argc -= optind;
	argv += optind;

	if (argc == 0)
		usage();

	if (elf_mangle)
		init_mangle_state();

	while (argc) {
		hide_syms(*argv);
		argc--;
		argv++;
	}
	if (elf_mangle)
		fini_mangle_state();

	return 0;
}

struct keep {
	struct keep    *next;
	char           *sym;
} *keep_list;

void 
add_to_keep_list(char *symbol)
{
	struct keep    *newp, *prevp, *curp;
	int             cmp = 0;

	for (curp = keep_list, prevp = NULL; curp; prevp = curp, curp = curp->next)
		if ((cmp = strcmp(symbol, curp->sym)) <= 0)
			break;

	if (curp && cmp == 0)
		return;		/* already in table */

	newp = calloc(1, sizeof(struct keep));
	if (newp)
		newp->sym = strdup(symbol);
	if (newp == NULL || newp->sym == NULL) {
		fprintf(stderr, "%s: out of memory for keep list\n", __progname);
		exit(1);
	}
	newp->next = curp;
	if (prevp)
		prevp->next = newp;
	else
		keep_list = newp;
}

int 
in_keep_list(char *symbol)
{
	struct keep    *curp;
	int             cmp = 0;

	for (curp = keep_list; curp; curp = curp->next)
		if ((cmp = strcmp(symbol, curp->sym)) <= 0)
			break;

	return curp && cmp == 0;
}

void 
add_file_to_keep_list(char *filename)
{
	FILE           *keepf;
	char            symbol[1024];
	int             len;

	if ((keepf = fopen(filename, "r")) == NULL) {
		perror(filename);
		usage();
	}
	while (fgets(symbol, sizeof(symbol), keepf)) {
		len = strlen(symbol);
		if (len && symbol[len - 1] == '\n')
			symbol[len - 1] = '\0';

		add_to_keep_list(symbol);
	}
	fclose(keepf);
}

void 
hide_syms(char *filename)
{
	int             inf;
	struct stat     infstat;
	char           *buf;

	/*
         * Open the file and do some error checking.
         */

	if ((inf = open(filename, O_RDWR)) == -1) {
		perror(filename);
		return;
	}
	if (fstat(inf, &infstat) == -1) {
		perror(filename);
		close(inf);
		return;
	}
	if (infstat.st_size < sizeof(Elf_Ehdr) || infstat.st_size > SIZE_MAX) {
		fprintf(stderr, "%s: invalid file size\n", filename);
		close(inf);
		return;
	}
	if ((buf = mmap(NULL, infstat.st_size, PROT_READ | PROT_WRITE,
	    MAP_FILE | MAP_SHARED, inf, 0)) == MAP_FAILED) {
		fprintf(stderr, "%s: cannot map\n", filename);
		close(inf);
		return;
	}

	if (buf[0] == ELFMAG0 && buf[1] == ELFMAG1 &&
	    buf[2] == ELFMAG2 && buf[3] == ELFMAG3) {
		elf_hide(inf, buf);
		return;
	}

	close(inf);
}
@


1.10
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.9 2015/01/18 05:30:58 guenther Exp $	 */
d61 1
d210 2
a211 2
	if (infstat.st_size < sizeof(Elf_Ehdr)) {
		fprintf(stderr, "%s: short file\n", filename);
@


1.9
log
@The world is ELF: use <sys/exec_elf.h> instead of <a.out.h> or <sys/exec.h>
Use a better test for an input being ELF: struct exec is dead and there are
defines for the ELF magic.  Reorder #includes and do some whitespace cleanup.
Oh, and don't lead the fd if an input file isn't ELF.

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.8 2014/03/16 20:45:47 guenther Exp $	 */
d141 1
a141 1
	newp = (struct keep *) calloc(1, sizeof(struct keep));
@


1.8
log
@Zap some globals and a TODO missed in the a.out purge.
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.7 2013/11/12 19:48:40 deraadt Exp $	 */
d54 7
a60 1
#include <unistd.h>
d64 2
a65 6
#include <errno.h>
#include <fcntl.h>
#include <a.out.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/stat.h>
d68 1
a68 1
void            usage(void);
d70 2
a71 2
void            add_to_keep_list(char *);
void            add_file_to_keep_list(char *);
d73 2
a74 4
void            hide_syms(char *);
#ifdef _NLIST_DO_ELF
void            elf_hide(int, char *);
#endif
d209 1
a209 1
	if (infstat.st_size < sizeof(struct exec)) {
d221 2
a222 3
#ifdef _NLIST_DO_ELF
	if (buf[0] == 0x7f && (buf[1] == 'E' || buf[1] == 'O') &&
	    buf[2] == 'L' && buf[3] == 'F') {
d226 2
a227 1
#endif				/* _NLIST_DO_ELF */
@


1.7
log
@add missing protos
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.6 2013/10/14 16:58:05 deraadt Exp $	 */
a49 7
 *	- resolve the theoretical hanging reloc problem (see check_reloc()
 *	  below). I have yet to see this problem actually occur in any real
 *	  program. In what cases will gcc/gas generate code that needs a
 *	  relative reloc from a global symbol, other than PIC?  The
 *	  solution is to not hide the symbol from the linker in this case,
 *	  but to generate some random name for it so that it doesn't link
 *	  with anything but holds the place for the reloc.
a187 14

int             nsyms, ntextrel, ndatarel;
struct exec    *hdrp;
char           *aoutdata, *strbase;
struct relocation_info *textrel, *datarel;
struct nlist   *symbase;

#define SYMSTR(sp)	&strbase[(sp)->n_un.n_strx]

/* is the symbol a global symbol defined in the current file? */
#define IS_GLOBAL_DEFINED(sp) \
	(((sp)->n_type & N_EXT) && ((sp)->n_type & N_TYPE) != N_UNDF)

void            check_reloc(char *filename, struct relocation_info * relp);
@


1.6
log
@tedu ecoff support
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.5 2013/10/13 17:23:41 guenther Exp $	 */
d82 2
@


1.5
log
@Death to a.out bits!

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.4 2009/12/04 04:59:48 drahn Exp $	 */
a68 3
#ifdef _NLIST_DO_ECOFF
#include <sys/exec_ecoff.h>
#endif
a78 3
#ifdef _NLIST_DO_ECOFF
void            ecoff_hide(int, char *);
#endif
a246 7

#ifdef _NLIST_DO_ECOFF
	if (!ECOFF_BADMAG((struct ecoff_exechdr *) buf)) {
		ecoff_hide(inf, buf);
		return;
	}
#endif				/* _NLIST_DO_ECOFF */
@


1.4
log
@Change crunchgen to mangle names in sequence instead of randomly,
save the sequence numbers between runs, currently uses file 'mangledata'
this may be changed to be specified on the command line later.
Requested by Theo.
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.4 2009/12/04 04:54:33 drahn Exp $	 */
a75 7
/*
 * if __ELF__ is defined, do not bother supporting AOUT.
 */
#if defined(_NLIST_DO_AOUT) && !(defined(__ELF__))
#define DO_AOUT
#endif

a211 14
#ifdef DO_AOUT
#if defined(__sparc__)
/* is the relocation entry dependent on a symbol? */
#define IS_SYMBOL_RELOC(rp)   \
	((rp)->r_extern || \
	((rp)->r_type >= RELOC_BASE10 && (rp)->r_type <= RELOC_BASE22) || \
	(rp)->r_type == RELOC_JMP_TBL)
#else
/* is the relocation entry dependent on a symbol? */
#define IS_SYMBOL_RELOC(rp)   \
		  ((rp)->r_extern||(rp)->r_baserel||(rp)->r_jmptable)
#endif
#endif

a218 5
#ifdef DO_AOUT
	struct relocation_info *relp;
	struct nlist   *symp;
	u_char          zero = 0;
#endif
a259 68

#ifdef DO_AOUT
	aoutdata = buf;

	/*
         * Check the header and calculate offsets and sizes from it.
         */
	hdrp = (struct exec *) aoutdata;

	if (N_BADMAG(*hdrp)) {
		fprintf(stderr, "%s: bad magic: not an a.out, ecoff or elf  file\n",
		    filename);
		close(inf);
		return;
	}
	textrel = (struct relocation_info *) (aoutdata + N_TRELOFF(*hdrp));
	datarel = (struct relocation_info *) (aoutdata + N_DRELOFF(*hdrp));
	symbase = (struct nlist *) (aoutdata + N_SYMOFF(*hdrp));
	strbase = (char *) (aoutdata + N_STROFF(*hdrp));

	ntextrel = hdrp->a_trsize / sizeof(struct relocation_info);
	ndatarel = hdrp->a_drsize / sizeof(struct relocation_info);
	nsyms = hdrp->a_syms / sizeof(struct nlist);

	/*
         * Zap the type field of all globally-defined symbols.  The linker will
         * subsequently ignore these entries.  Don't zap any symbols in the
         * keep list.
         */
	for (symp = symbase; symp < symbase + nsyms; symp++)
		if (IS_GLOBAL_DEFINED(symp) && !in_keep_list(SYMSTR(symp))) {
			/*
		         * XXX Our VM system has some problems, so
		         * avoid the VM system....
		         */
			lseek(inf, (off_t) ((void *) &symp->n_type -
			    (void *) buf), SEEK_SET);
			write(inf, &zero, sizeof zero);
			symp->n_type = 0;
		}
	/*
         * Check whether the relocation entries reference any symbols that we
         * just zapped.  I don't know whether ld can handle this case, but I
         * haven't encountered it yet.  These checks are here so that the program
         * doesn't fail silently should such symbols be encountered.
         */
	for (relp = textrel; relp < textrel + ntextrel; relp++)
		check_reloc(filename, relp);
	for (relp = datarel; relp < datarel + ndatarel; relp++)
		check_reloc(filename, relp);

	msync(buf, infstat.st_size, MS_SYNC);
	munmap(buf, infstat.st_size);
	close(inf);
#endif				/* DO_AOUT */
}

#ifdef DO_AOUT
void 
check_reloc(char *filename, struct relocation_info * relp)
{
	/* bail out if we zapped a symbol that is needed */
	if (IS_SYMBOL_RELOC(relp) && symbase[relp->r_symbolnum].n_type == 0) {
		fprintf(stderr,
		    "%s: oops, have hanging relocation for %s: bailing out!\n",
		    filename, SYMSTR(&symbase[relp->r_symbolnum]));
		exit(1);
	}
a260 1
#endif				/* DO_AOUT */
@


1.3
log
@stop gcc from whining
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.2 2008/08/22 15:38:37 deraadt Exp $	 */
d74 1
d97 1
d104 1
a104 1
	while ((ch = getopt(argc, argv, "hk:f:")) != -1)
d106 3
d127 3
d135 2
@


1.2
log
@merge crunchide into crunchgen as the -h flag.  this is not yet done the
nicest way since there is lot of code that has to churn, but it works.
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.1 2008/08/22 15:18:55 deraadt Exp $	 */
d140 1
a140 1
	int             cmp;
@


1.1
log
@Merge crunchgen & crunchhide (using name checking), and move to usr.sbin
next step is to not install it as two programs, but be even more clever
@
text
@d1 1
a1 1
/* $OpenBSD: crunchide.c,v 1.22 2007/02/18 23:50:46 ray Exp $	 */
d82 1
a82 1
void            crunchide_usage(void);
d102 1
a102 1
	while ((ch = getopt(argc, argv, "k:f:")) != -1)
d104 2
d113 1
a113 1
			crunchide_usage();
d120 1
a120 1
		crunchide_usage();
a130 8
void 
crunchide_usage(void)
{
	fprintf(stderr,
	    "usage: crunchide [-f keep-list-file] [-k keep-symbol] object-file ...\n");
	exit(1);
}

d185 1
a185 1
		crunchide_usage();
@

