head	1.28;
access;
symbols
	OPENBSD_6_2:1.28.0.4
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.6
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.2
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.20
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.16
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.14
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.12
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.10
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.10
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.8
	OPENBSD_2_8:1.10.0.6
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2016.04.25.16.03.57;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	6T6V6IK2YHPfH3Xd;

1.27
date	2015.11.23.21.06.14;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	0HuJ19UbA0QYCNRR;

1.26
date	2015.11.08.17.48.48;	author millert;	state Exp;
branches;
next	1.25;
commitid	00gf4WqLyIb9sOdA;

1.25
date	2015.11.05.16.15.47;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	lEtpLt7P2TJUiIC2;

1.24
date	2015.10.16.13.37.44;	author millert;	state Exp;
branches;
next	1.23;
commitid	H99PcNtHGZMrNl2r;

1.23
date	2015.10.13.15.55.44;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	ZfFsUDUBisbDWOFp;

1.22
date	2015.10.13.15.43.19;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	BzxTMAXAnkQbO1Sg;

1.21
date	2015.10.12.16.01.53;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	w2ZJBa76IWPdWXe6;

1.20
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2014.12.23.03.29.52;	author tedu;	state Exp;
branches;
next	1.18;
commitid	wJ8F4qLpY1feRIqf;

1.18
date	2014.07.20.01.38.40;	author guenther;	state Exp;
branches;
next	1.17;
commitid	0acpjAf5myNxgwB5;

1.17
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.04.14.22.21.24;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.21.09.11.25;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.26.21.36.39;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.06.23.21.41;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.28.03;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	99.04.18.17.11.11;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	99.03.29.20.42.50;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.03.24.05.25.55;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.03.24.04.51.23;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.10.06.18.09.50;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.23.00.57.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.19.07.43.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.08.19.06.47.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.22.08.15;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.39;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.28
log
@use setresgid() rather than setegid, all 3 gids can go the same way.
discussion with millert
@
text
@/*	$OpenBSD: kvm_mkdb.c,v 1.27 2015/11/23 21:06:14 deraadt Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>

#include <db.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <libgen.h>
#include <paths.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <grp.h>

#include "extern.h"

__dead void usage(void);
int kvm_mkdb(int, const char *, char *, char *, gid_t, int);

HASHINFO openinfo = {
	4096,		/* bsize */
	128,		/* ffactor */
	1024,		/* nelem */
	2048 * 1024,	/* cachesize */
	NULL,		/* hash() */
	0		/* lorder */
};

int
main(int argc, char *argv[])
{
	struct rlimit rl;
	struct group *gr;
	gid_t kvm_gid = -1;
	int fd, rval, ch, verbose = 0;
	char *nlistpath, *nlistname;
	char dbdir[PATH_MAX];

	if (pledge("stdio rpath wpath cpath fattr getpw flock id", NULL) == -1)
		err(1, "pledge");

	/* Try to use the kmem group to be able to fchown() in kvm_mkdb(). */
	if ((gr = getgrnam("kmem")) == NULL) {
		warn("can't find kmem group");
	} else {
		kvm_gid = gr->gr_gid;
		if (setresgid(kvm_gid, kvm_gid, kvm_gid) == -1)
			err(1, "setegid");
	}

	/* Increase our data size to the max if we can. */
	if (getrlimit(RLIMIT_DATA, &rl) == 0) {
		rl.rlim_cur = rl.rlim_max;
		if (setrlimit(RLIMIT_DATA, &rl) < 0)
			warn("can't set rlimit data size");
	}

	if (pledge("stdio rpath wpath cpath fattr flock", NULL) == -1)
		err(1, "pledge");

	strlcpy(dbdir, _PATH_VARDB, sizeof(dbdir));
	while ((ch = getopt(argc, argv, "vo:")) != -1)
		switch (ch) {
		case 'v':
			verbose = 1;
			break;
		case 'o':
			rval = strlcpy(dbdir, optarg, sizeof(dbdir));
			if (rval == 0 || rval + 1 >= sizeof(dbdir))
				errx(1, "Invalid directory");
			/* Make sure there is a '/' at the end of the path */
			if (dbdir[strlen(dbdir) - 1] != '/')
				strlcat(dbdir, "/", sizeof(dbdir));
			break;
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	if (argc > 1)
		usage();

	/* If no kernel specified use _PATH_KSYMS and fall back to _PATH_UNIX */
	if (argc > 0) {
		nlistpath = argv[0];
		nlistname = basename(nlistpath);
		if ((fd = open(nlistpath, O_RDONLY, 0)) == -1)
			err(1, "can't open %s", nlistpath);
		rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname, kvm_gid,
		    verbose);
	} else {
		nlistname = basename(_PATH_UNIX);
		if ((fd = open((nlistpath = _PATH_KSYMS), O_RDONLY, 0)) == -1 ||
		    (rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname, kvm_gid,
		    verbose)) != 0) {
			if (fd == -1) 
				warnx("can't open %s", _PATH_KSYMS);
			else
				warnx("will try again using %s instead", _PATH_UNIX);
			if ((fd = open((nlistpath = _PATH_UNIX), O_RDONLY, 0)) == -1)
				err(1, "can't open %s", nlistpath);
			rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname,
			    kvm_gid, verbose);
		}
	}
	exit(rval);
}

int
kvm_mkdb(int fd, const char *dbdir, char *nlistpath, char *nlistname, gid_t gid, 
    int verbose)
{
	DB *db;
	char dbtemp[PATH_MAX], dbname[PATH_MAX];
	int r;

	r = snprintf(dbtemp, sizeof(dbtemp), "%skvm_%s.tmp",
	    dbdir, nlistname);
	if (r < 0 || r >= sizeof(dbtemp)) {
		warnx("Directory name too long");
		return (1);
	}
	r = snprintf(dbname, sizeof(dbname), "%skvm_%s.db",
	    dbdir, nlistname);
	if (r < 0 || r >= sizeof(dbtemp)) {
		warnx("Directory name too long");
		return (1);
	}

	/* If the existing db file matches the currently running kernel, exit */
	if (testdb(dbname)) {
		if (verbose)
			warnx("%s already up to date", dbname);
		return(0);
	} else if (verbose)
		warnx("rebuilding %s", dbname);

	(void)umask(0);
	db = dbopen(dbtemp, O_CREAT | O_EXLOCK | O_TRUNC | O_RDWR,
	    S_IRUSR | S_IWUSR | S_IRGRP, DB_HASH, &openinfo);
	if (db == NULL) {
		warn("can't dbopen %s", dbtemp);
		return(1);
	}

	if (gid != -1 && fchown(db->fd(db), -1, gid) == -1) {
		warn("can't chown %s", dbtemp);
		(void)unlink(dbtemp);
		return(1);
	}

	if (create_knlist(nlistpath, fd, db) != 0) {
		warn("cannot determine executable type of %s", nlistpath);
		(void)unlink(dbtemp);
		return(1);
	}
	if (db->close(db)) {
		warn("can't dbclose %s", dbtemp);
		(void)unlink(dbtemp);
		return(1);
	}

	if (rename(dbtemp, dbname)) {
		warn("rename %s to %s", dbtemp, dbname);
		(void)unlink(dbtemp);
		return(1);
	}

	return(0);
}

__dead void
usage(void)
{
	(void)fprintf(stderr, "usage: kvm_mkdb [-v] [-o directory] [file]\n");
	exit(1);
}
@


1.27
log
@missing pledge "getpw" for getgrnam(3)
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.26 2015/11/08 17:48:48 millert Exp $	*/
d81 1
a81 1
		if (setegid(kvm_gid) == -1)
@


1.26
log
@Set the effective gid to kmem so the fchown of kvm_bsd.db is allowed
by pledge(2).  This requires pledge "id" but that can be dropped
immediately after the setegid() call.  From Theo Buehler
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.25 2015/11/05 16:15:47 deraadt Exp $	*/
d73 1
a73 1
	if (pledge("stdio rpath wpath cpath fattr flock id", NULL) == -1)
@


1.25
log
@there is a retry path in here which contains rename() and fchown().
Use a slightly larger pledge, earlier on.
from gregor best
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.24 2015/10/16 13:37:44 millert Exp $	*/
d51 2
a52 2
void usage(void);
int kvm_mkdb(int, const char *, char *, char *, int);
d67 2
d73 12
d92 3
a117 3
	if (pledge("stdio rpath wpath cpath fattr flock", NULL) == -1)
		err(1, "pledge");

d124 2
a125 1
		rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname, verbose);
d129 1
a129 1
		    (rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname, 
d137 2
a138 2
			rval = kvm_mkdb(fd, dbdir, nlistpath, nlistname, 
			    verbose);
d145 1
a145 1
kvm_mkdb(int fd, const char *dbdir, char *nlistpath, char *nlistname, 
a150 1
	struct group *gr;
d181 1
a181 3
	if ((gr = getgrnam("kmem")) == NULL) {
		warn("can't find kmem group");
	} else if (fchown(db->fd(db), -1, gr->gr_gid)) {
d207 1
a207 1
void
@


1.24
log
@Implement real "flock" request and add it to userland programs that
use pledge and file locking.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.23 2015/10/13 15:55:44 deraadt Exp $	*/
d101 3
a173 4

	/* rename() later */
	if (pledge("stdio rpath wpath cpath flock", NULL) == -1)
		err(1, "pledge");
@


1.23
log
@semarie points out i am already forgetting the rules are very tight around
*chown, even "proc fattr" won't let you do such a job.  remove early pledge(),
only leave call after fchown, before when symbol table work gets done.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.22 2015/10/13 15:43:19 deraadt Exp $	*/
d173 1
a173 1
	if (pledge("stdio rpath wpath cpath", NULL) == -1)
@


1.22
log
@oops, a chown appears late on the code.  to satisfy this pledge
"stdio rpath wpath cpath getpw fattr proc" early on; "proc fattr"
allows doing work with other uids on the file.  after opening the
db, do the chown (replace with fchown since we know fd) and then
pledge "stdio rpath"; "rpath" due to tmpfile rename() at the end.
mistake spotted by mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.21 2015/10/12 16:01:53 deraadt Exp $	*/
a77 4
	/* getpwnam() and fchown() later */
	if (pledge("stdio rpath wpath cpath getpw fattr proc", NULL) == -1)
		err(1, "pledge");

d173 1
a173 1
	if (pledge("stdio cpath", NULL) == -1)
@


1.21
log
@kvm_mkdb & dev_mkdb are quite similar.  pledge "stdio rpath wpath cpath"
except kvm_mkdb also does "getpw".
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.20 2015/01/16 06:40:17 deraadt Exp $	*/
d78 2
a79 1
	if (pledge("stdio rpath wpath cpath getpw", NULL) == -1)
d167 13
a190 7
	if ((gr = getgrnam("kmem")) == NULL) {
		warn("can't find kmem group");
	} else if (chown(dbtemp, -1, gr->gr_gid)) {
		warn("can't chown %s", dbtemp);
		(void)unlink(dbtemp);
		return(1);
	}
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.19 2014/12/23 03:29:52 tedu Exp $	*/
d77 3
@


1.19
log
@the kvm database only needs to be readable by kmem group. make it so.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.18 2014/07/20 01:38:40 guenther Exp $	*/
a31 1
#include <sys/param.h>
d69 1
a69 1
	char dbdir[MAXPATHLEN];
d131 1
a131 1
	char dbtemp[MAXPATHLEN], dbname[MAXPATHLEN];
@


1.18
log
@Make sure the correct errno is reported by warn* or err* and not
the errno of an intervening cleanup operation like close/unlink/etc.

Diff from Doug Hogan (doug (at) acyclic.org)
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.17 2009/10/27 23:59:51 deraadt Exp $	*/
d34 3
d48 1
a48 4

#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
d134 1
d159 1
a159 1
	    S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH, DB_HASH, &openinfo);
d171 8
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.16 2005/04/14 22:21:24 djm Exp $	*/
d164 1
a165 1
		warn("cannot determine executable type of %s", nlistpath);
@


1.16
log
@fix off-by-ones in path truncation checks. from Han Boetes; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.15 2003/11/21 09:11:25 djm Exp $	*/
a30 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1990, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "from: @@(#)kvm_mkdb.c	8.3 (Berkeley) 5/4/95";
#else
static const char rcsid[] = "$OpenBSD: kvm_mkdb.c,v 1.15 2003/11/21 09:11:25 djm Exp $";
#endif
#endif /* not lint */
@


1.15
log
@add -o option to generate kvm database in alternate directory;
manpage nits jmc@@ ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.14 2003/06/26 21:36:39 deraadt Exp $	*/
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: kvm_mkdb.c,v 1.14 2003/06/26 21:36:39 deraadt Exp $";
d151 1
a151 1
	if (r < 0 || r > sizeof(dbtemp)) {
d157 1
a157 1
	if (r < 0 || r > sizeof(dbtemp)) {
@


1.14
log
@ansi and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.13 2003/06/02 23:36:53 millert Exp $	*/
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: kvm_mkdb.c,v 1.13 2003/06/02 23:36:53 millert Exp $";
d67 1
a67 1
int kvm_mkdb(int, char *, char *, int);
d84 1
d93 2
a94 1
	while ((ch = getopt(argc, argv, "v")) != -1)
d99 8
d122 1
a122 1
		rval = kvm_mkdb(fd, nlistpath, nlistname, verbose);
d126 2
a127 1
		    (rval = kvm_mkdb(fd, nlistpath, nlistname, verbose)) != 0) {
d134 2
a135 1
			rval = kvm_mkdb(fd, nlistpath, nlistname, verbose);
d142 2
a143 1
kvm_mkdb(int fd, char *nlistpath, char *nlistname, int verbose)
d147 1
d149 12
a160 4
	(void)snprintf(dbtemp, sizeof(dbtemp), "%skvm_%s.tmp",
	    _PATH_VARDB, nlistname);
	(void)snprintf(dbname, sizeof(dbname), "%skvm_%s.db",
	    _PATH_VARDB, nlistname);
d199 1
a199 1
	(void)fprintf(stderr, "usage: kvm_mkdb [-v] [file]\n");
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.12 2003/04/06 23:21:41 tedu Exp $	*/
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: kvm_mkdb.c,v 1.12 2003/04/06 23:21:41 tedu Exp $";
d79 1
a79 3
main(argc, argv)
	int argc;
	char *argv[];
d130 1
a130 5
kvm_mkdb(fd, nlistpath, nlistname, verbose)
	int fd;
	char *nlistpath;
	char *nlistname;
	int verbose;
d175 1
a175 1
usage()
@


1.12
log
@use snamesize and realloc properly.  ok tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.11 2002/02/16 21:28:03 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static const char rcsid[] = "$OpenBSD: kvm_mkdb.c,v 1.11 2002/02/16 21:28:03 millert Exp $";
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.10 1999/04/18 17:11:11 espie Exp $	*/
d37 1
a37 1
static char copyright[] =
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.10 1999/04/18 17:11:11 espie Exp $";
@


1.10
log
@Document -v

Give more precise error messages in case of failure
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.9 1999/03/29 20:42:50 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.9 1999/03/29 20:42:50 millert Exp $";
d70 2
a71 2
void usage __P((void));
int kvm_mkdb __P((int, char *, char *, int));
@


1.9
log
@Only print "already up to date" if in verbose mode
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.8 1999/03/24 05:25:55 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.8 1999/03/24 05:25:55 millert Exp $";
a102 1
		case '?':
d123 4
a126 3
			if (fd != -1)
				warnx("will try again using %s instead",
				    _PATH_UNIX);
d187 1
a187 1
	(void)fprintf(stderr, "usage: kvm_mkdb [file]\n");
@


1.8
log
@Only exit in nlist.c due to a memory error, otherwise just return.  A return value of 1 indicates an incorrect executable type, a return value of -1 indicates some other problem.  This gives us better fallback from /dev/ksyms to /bsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.7 1999/03/24 04:51:23 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.7 1999/03/24 04:51:23 millert Exp $";
d152 2
a153 1
		warnx("%s already up to date", dbname);
d155 1
a155 2
	}
	else if (verbose)
@


1.7
log
@Better fallback from /dev/ksyms to /bsd if there are problems with an nlist of /dev/ksyms
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.6 1998/10/06 18:09:50 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.6 1998/10/06 18:09:50 millert Exp $";
d71 1
a71 1
int kvm_mkdb __P((char *, char *, int));
d88 1
a88 1
	int rval, ch, verbose = 0;
d116 4
a119 2
		nlistname = basename(argv[0]);
		rval = kvm_mkdb(nlistpath, nlistname, verbose);
d122 8
a129 4
		nlistpath = _PATH_KSYMS;
		if ((rval = kvm_mkdb(nlistpath, nlistname, verbose)) != 0) {
			nlistpath = _PATH_UNIX;
			rval = kvm_mkdb(nlistpath, nlistname, verbose);
d136 2
a137 1
kvm_mkdb(nlistpath, nlistname, verbose)
a142 1
	int fd;
a143 5

	if ((fd = open(nlistpath, O_RDONLY, 0)) == -1) {
		warn("can't open %s", nlistpath);
		return(1);
	}
@


1.6
log
@crank RLIMIT_DATA, seems to be necessary for some people
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.5 1998/08/23 00:57:14 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.5 1998/08/23 00:57:14 millert Exp $";
d70 2
a71 1
static void usage __P((void));
a86 1
	DB *db;
d88 2
a89 2
	int fd, ch, verbose = 0;
	char *nlistpath, *nlistname, dbtemp[MAXPATHLEN], dbname[MAXPATHLEN];
d116 2
a117 2
		if ((fd = open(nlistpath, O_RDONLY, 0)) == -1)
			err(1, "can't open %s", nlistpath);
d119 23
a141 3
		if ((fd = open((nlistpath = _PATH_KSYMS), O_RDONLY, 0)) == -1 &&
		    (fd = open((nlistpath = _PATH_UNIX), O_RDONLY, 0)) == -1)
			err(1, "can't open %s", nlistpath);
a142 1
	nlistname = argc > 0 ? basename(argv[0]) : basename(_PATH_UNIX);
d150 4
a153 2
	if (testdb(dbname))
		exit(0);
d160 4
a163 2
	if (db == NULL)
		err(1, "can't dbopen %s", dbtemp);
d166 2
a167 1
		errx(1, "cannot determine executable type of %s", nlistpath);
d172 1
a172 1
		exit(1);
d174 7
a180 3
	if (rename(dbtemp, dbname))
		err(1, "rename %s to %s", dbtemp, dbname);
	exit(0);
@


1.5
log
@o If the user doesn't specify a file, use /dev/ksyms in preference to
  /bsd if it exists and we can open it.
o Fix a bug where kvm_mkdb would leave a temp file in /var/db if the
  file argument didn't exit.
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.4 1998/08/19 07:43:37 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.4 1998/08/19 07:43:37 millert Exp $";
d64 4
d87 1
d90 7
@


1.4
log
@clean up our temp files on failure
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.3 1998/08/19 06:47:53 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.3 1998/08/19 06:47:53 millert Exp $";
d83 1
a83 1
	int ch, verbose = 0;
d101 11
a111 2
	nlistpath = argc > 0 ? argv[0] : _PATH_UNIX;
	nlistname = basename(nlistpath);
d129 1
a129 1
	if (create_knlist(nlistpath, db) != 0) {
@


1.3
log
@Make kvm_mkdb work again
 o testdb() needs to take as an arg the name of the kernel so it can do
   the version test correctly.
 o add undocumented verbose flag to tell when we are rebuilding the .db file
 o DO_* -> _NLIST_DO_*, this prevented kvm_mkdb from doing anything at all.
 o preserve a few error messages so you get error output when none of
   the exec types match the target.
 o check malloc return values
 o get_kerntext should not subtract the sizeof(struct exec) from kernel_text
@
text
@d1 1
a1 1
/*	$OpenBSD: kvm_mkdb.c,v 1.2 1997/01/15 22:08:15 millert Exp $	*/
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.2 1997/01/15 22:08:15 millert Exp $";
d119 10
a128 4
		err(1, "%s", dbtemp);
	create_knlist(nlistpath, db);
	if (db->close(db))
		err(1, "%s", dbtemp);
@


1.2
log
@From NetBSD: make testdb() fail if database version string has length zero.
Also, KNF, b* -> mem*, getopt tests against -1, not EOF, and index -> strchr.
Added OpenBSD tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d44 1
a44 1
static char sccsid[] = "from: @@(#)kvm_mkdb.c	8.1 (Berkeley) 6/6/93";
d46 1
a46 1
static char *rcsid = "$OpenBSD: kvm_mkdb.c,v 1.1.1.1 1995/10/18 08:47:39 deraadt Exp $";
d57 1
d62 1
d83 2
a84 2
	int ch;
	char *p, *nlistpath, *nlistname, dbtemp[MAXPATHLEN], dbname[MAXPATHLEN];
d86 1
a86 1
	while ((ch = getopt(argc, argv, "")) != -1)
d88 3
a100 5
	/* If the existing db file matches the currently running kernel, exit */
	if (testdb())
		exit(0);

#define	basename(cp)	((p = strrchr((cp), '/')) != NULL ? p + 1 : (cp))
d108 7
@


1.1
log
@Initial revision
@
text
@d1 2
d43 5
a47 2
/*static char sccsid[] = "from: @@(#)kvm_mkdb.c	8.1 (Berkeley) 6/6/93";*/
static char *rcsid = "$Id: kvm_mkdb.c,v 1.8 1994/08/29 23:17:00 mycroft Exp $";
d84 1
a84 1
	while ((ch = getopt(argc, argv, "")) != EOF)
d100 1
a100 1
#define	basename(cp)	((p = rindex((cp), '/')) != NULL ? p + 1 : (cp))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
