head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.8.0.30
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.28
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.24
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.22
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.20
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.18
	OPENBSD_5_0:1.8.0.16
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6;
locks; strict;
comment	@ * @;


1.17
date	2017.03.21.12.06.56;	author bluhm;	state Exp;
branches;
next	1.16;
commitid	6uuBMurt3Uh42fgX;

1.16
date	2017.01.09.14.49.22;	author reyk;	state Exp;
branches;
next	1.15;
commitid	eA8b246voAapPTkX;

1.15
date	2017.01.08.20.31.03;	author reyk;	state Exp;
branches;
next	1.14;
commitid	U5QfDMrhDiu5oehf;

1.14
date	2016.10.12.11.57.31;	author reyk;	state Exp;
branches;
next	1.13;
commitid	BzueJHWWTTYcYEmT;

1.13
date	2015.12.19.17.55.29;	author reyk;	state Exp;
branches;
next	1.12;
commitid	xe8YS3ftA7mmBwbB;

1.12
date	2015.12.19.13.58.08;	author reyk;	state Exp;
branches;
next	1.11;
commitid	de21MufW7eCZF1cc;

1.11
date	2015.01.08.05.34.21;	author bcook;	state Exp;
branches;
next	1.10;
commitid	TF7tH8vnrgdadamt;

1.10
date	2015.01.08.00.30.08;	author bcook;	state Exp;
branches;
next	1.9;
commitid	KDtICkil0jI83gxu;

1.9
date	2014.11.03.20.15.30;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	ziMZlrkCPhUaYhzj;

1.8
date	2007.08.22.21.04.30;	author ckuethe;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.31.12.14.01;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.12.09.22.38;	author dtucker;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.11.03.05.50;	author dtucker;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.08.01.19.27;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.17.19.15.27;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.01.20.28.19;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.31.13.46.16;	author henning;	state Exp;
branches;
next	;


desc
@@


1.17
log
@From a syslog perspective it does not make sense to log fatal and
warn with the same severity.  Switch log_warn() to LOG_ERR and keep
fatal() at LOG_CRIT.
OK reyk@@ florian@@
@
text
@/*	$OpenBSD: log.c,v 1.16 2017/01/09 14:49:22 reyk Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <time.h>

static int	 debug;
static int	 verbose;
const char	*log_procname;

void	log_init(int, int);
void	log_procinit(const char *);
void	log_setverbose(int);
int	log_getverbose(void);
void	log_warn(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
void	logit(int, const char *, ...)
	    __attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
	    __attribute__((__format__ (printf, 2, 0)));
__dead void fatal(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));
__dead void fatalx(const char *, ...)
	    __attribute__((__format__ (printf, 1, 2)));

void
log_init(int n_debug, int facility)
{
	extern char	*__progname;

	debug = n_debug;
	verbose = n_debug;
	log_procinit(__progname);

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, facility);

	tzset();
}

void
log_procinit(const char *procname)
{
	if (procname != NULL)
		log_procname = procname;
}

void
log_setverbose(int v)
{
	verbose = v;
}

int
log_getverbose(void)
{
	return (verbose);
}

void
logit(int pri, const char *fmt, ...)
{
	va_list	ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char	*nfmt;
	int	 saved_errno = errno;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);

	errno = saved_errno;
}

void
log_warn(const char *emsg, ...)
{
	char		*nfmt;
	va_list		 ap;
	int		 saved_errno = errno;

	/* best effort to even work in out of memory situations */
	if (emsg == NULL)
		logit(LOG_ERR, "%s", strerror(saved_errno));
	else {
		va_start(ap, emsg);

		if (asprintf(&nfmt, "%s: %s", emsg,
		    strerror(saved_errno)) == -1) {
			/* we tried it... */
			vlog(LOG_ERR, emsg, ap);
			logit(LOG_ERR, "%s", strerror(saved_errno));
		} else {
			vlog(LOG_ERR, nfmt, ap);
			free(nfmt);
		}
		va_end(ap);
	}

	errno = saved_errno;
}

void
log_warnx(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_ERR, emsg, ap);
	va_end(ap);
}

void
log_info(const char *emsg, ...)
{
	va_list	 ap;

	va_start(ap, emsg);
	vlog(LOG_INFO, emsg, ap);
	va_end(ap);
}

void
log_debug(const char *emsg, ...)
{
	va_list	 ap;

	if (verbose > 1) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

static void
vfatalc(int code, const char *emsg, va_list ap)
{
	static char	s[BUFSIZ];
	const char	*sep;

	if (emsg != NULL) {
		(void)vsnprintf(s, sizeof(s), emsg, ap);
		sep = ": ";
	} else {
		s[0] = '\0';
		sep = "";
	}
	if (code)
		logit(LOG_CRIT, "%s: %s%s%s",
		    log_procname, s, sep, strerror(code));
	else
		logit(LOG_CRIT, "%s%s%s", log_procname, sep, s);
}

void
fatal(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(errno, emsg, ap);
	va_end(ap);
	exit(1);
}

void
fatalx(const char *emsg, ...)
{
	va_list	ap;

	va_start(ap, emsg);
	vfatalc(0, emsg, ap);
	va_end(ap);
	exit(1);
}
@


1.16
log
@Stop accessing verbose and debug variables from log.c directly.

This replaces log_verbose() and "extern int verbose" with the two functions
log_setverbose() and log_getverbose().

Pointed out by benno@@
OK krw@@ eric@@ gilles@@ (OK gilles@@ for the snmpd bits as well)
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.33 2017/01/08 20:31:03 reyk Exp $	*/
d127 1
a127 1
		logit(LOG_CRIT, "%s", strerror(saved_errno));
d134 2
a135 2
			vlog(LOG_CRIT, emsg, ap);
			logit(LOG_CRIT, "%s", strerror(saved_errno));
d137 1
a137 1
			vlog(LOG_CRIT, nfmt, ap);
d152 1
a152 1
	vlog(LOG_CRIT, emsg, ap);
@


1.15
log
@Sync log.c with the latest version from vmd/log.c that preserves errno
so it is safe calling log_* after an error without loosing the it.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 2016/11/24 21:39:45 reyk Exp $	*/
d27 2
a28 2
int		 debug;
int		 verbose;
d33 2
a34 1
void	log_verbose(int);
d75 1
a75 1
log_verbose(int v)
d78 6
@


1.14
log
@copy updated log.c from vmd: for correctness, save errno when doing
additional actions before printing it.  OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2016/10/12 11:47:34 reyk Exp $	*/
d93 1
d107 2
a110 1

d135 2
d172 1
a172 1
vfatal(const char *emsg, va_list ap)
a175 1
	int		 saved_errno = errno;
d184 1
a184 1
	if (saved_errno)
d186 1
a186 1
		    log_procname, s, sep, strerror(saved_errno));
d197 1
a197 1
	vfatal(emsg, ap);
a206 1
	errno = 0;
d208 1
a208 1
	vfatal(emsg, ap);
@


1.13
log
@Switch and sync to the log.c variant from httpd/relayd/iked/snmpd/vmd.

OK bcook@@ jung@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2015/12/07 12:10:02 reyk Exp $	*/
d112 3
a114 2
	char	*nfmt;
	va_list	 ap;
d118 1
a118 1
		logit(LOG_CRIT, "%s", strerror(errno));
d122 2
a123 1
		if (asprintf(&nfmt, "%s: %s", emsg, strerror(errno)) == -1) {
d126 1
a126 1
			logit(LOG_CRIT, "%s", strerror(errno));
d172 1
d181 1
a181 1
	if (errno)
d183 1
a183 1
		    log_procname, s, sep, strerror(errno));
@


1.12
log
@Move log_sockaddr() to from log.c to util.c as it is a local addition
and actually not a "logging" function.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.16 2014/07/08 10:30:52 eric Exp $	*/
d14 3
a16 3
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
a18 8
#include <sys/types.h>
#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>

#include <errno.h>
#include <pwd.h>
#include <stdarg.h>
d21 1
d24 1
d27 23
a49 1
#include "log.h"
d51 4
a54 1
#define	TRACE_DEBUG	0x1
d56 3
a58 2
static int	 foreground;
static int	 verbose;
d60 2
a61 3
void	 vlog(int, const char *, va_list);
void	 logit(int, const char *, ...)
    __attribute__((format (printf, 2, 3)));
d63 2
d67 1
a67 1
log_init(int n_foreground)
d69 2
a70 7
	extern char	*__progname;

	foreground = n_foreground;
	if (! foreground)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);

	tzset();
d94 1
a94 1
	if (foreground) {
d158 1
a158 13
	if (verbose & TRACE_DEBUG) {
		va_start(ap, emsg);
		vlog(LOG_DEBUG, emsg, ap);
		va_end(ap);
	}
}

void
log_trace(int mask, const char *emsg, ...)
{
	va_list	 ap;

	if (verbose & mask) {
d166 1
a166 1
fatal_arg(const char *emsg, va_list ap)
d168 2
a169 2
#define	FATALBUFSIZE	1024
	static char	ebuffer[FATALBUFSIZE];
d171 6
a176 10
	if (emsg == NULL)
		(void)strlcpy(ebuffer, strerror(errno), sizeof ebuffer);
	else {
		if (errno) {
			(void)vsnprintf(ebuffer, sizeof ebuffer, emsg, ap);
			(void)strlcat(ebuffer, ": ", sizeof ebuffer);
			(void)strlcat(ebuffer, strerror(errno), sizeof ebuffer);
		}
		else
			(void)vsnprintf(ebuffer, sizeof ebuffer, emsg, ap);
d178 5
a182 1
	logit(LOG_CRIT, "fatal: %s", ebuffer);
d191 1
a191 1
	fatal_arg(emsg, ap);
d203 1
a203 1
	fatal_arg(emsg, ap);
@


1.11
log
@log as LOG_DAEMON in log_init again.

I mirrored from smtpd a little too literally.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.10 2015/01/08 00:30:08 bcook Exp $	*/
d19 3
a24 1
#include <netdb.h>
a201 12
}

const char *
log_sockaddr(struct sockaddr *sa)
{
	static char	buf[NI_MAXHOST];

	if (getnameinfo(sa, SA_LEN(sa), buf, sizeof(buf), NULL, 0,
	    NI_NUMERICHOST))
		return ("(unknown)");
	else
		return (buf);
@


1.10
log
@sync log.c from smtpd.

Reduces the number of log.c snowflakes by a little, and gives ntpd a
variadic fatal() function to be used later.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.16 2014/07/08 10:30:52 eric Exp $	*/
d50 1
a50 1
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_MAIL);
@


1.9
log
@Convert the logic in yyerror().  Instead of creating a temporary
format string, create a temporary message.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.8 2007/08/22 21:04:30 ckuethe Exp $ */
d19 2
d22 2
d31 10
a40 1
#include "ntpd.h"
a41 2
int	 debug;
extern int debugsyslog;
d44 1
a44 1
log_init(int n_debug)
d48 3
a50 1
	debug = n_debug;
d52 2
a53 2
	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);
d55 4
a58 1
	tzset();
d76 1
a76 1
	if (debug) {
d140 1
a140 1
	if (debug || debugsyslog) {
d148 13
a160 1
fatal(const char *emsg)
d162 3
d166 7
a172 5
		logit(LOG_CRIT, "fatal: %s", strerror(errno));
	else
		if (errno)
			logit(LOG_CRIT, "fatal: %s: %s",
			    emsg, strerror(errno));
d174 4
a177 1
			logit(LOG_CRIT, "fatal: %s", emsg);
d179 8
d191 1
a191 1
fatalx(const char *emsg)
d193 2
d196 4
a199 1
	fatal(emsg);
@


1.8
log
@Allow ntpd to log sensor offsets and adjtime calls to syslog at LOG_DEBUG
priority.
ok gwk, mbalmer, weingart
"explicit non-ok from" henning
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.7 2005/03/31 12:14:01 henning Exp $ */
a30 2

void	 logit(int, const char *, ...);
@


1.7
log
@zap includes, Alexander von Gernler <grunk@@pestilenz.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 2004/07/12 09:22:38 dtucker Exp $ */
d30 1
d126 1
a126 1
	if (debug) {
@


1.6
log
@Replace errx with equivalent fprintf+exit to make porting easier; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 2004/07/11 03:05:50 dtucker Exp $ */
a18 5
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

a25 1
#include <unistd.h>
d29 1
a29 1
int	debug;
@


1.5
log
@Use SA_LEN(sa) instead of sa->sa_len; ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.4 2004/07/08 01:19:27 henning Exp $ */
a23 1
#include <err.h>
@


1.4
log
@make log_debug() only log anything at all when we are in debug mode
before, it would log with LOG_DEBUG to syslog when !debug
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.3 2004/06/17 19:15:27 henning Exp $ */
d166 1
a166 1
	if (getnameinfo(sa, sa->sa_len, buf, sizeof(buf), NULL, 0,
@


1.3
log
@provide log_sockaddr, from bgpd
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.2 2004/06/01 20:28:19 henning Exp $ */
d132 5
a136 3
	va_start(ap, emsg);
	vlog(LOG_DEBUG, emsg, ap);
	va_end(ap);
@


1.2
log
@tzset(); noticed by theo
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.1 2004/05/31 13:46:16 henning Exp $ */
d157 12
@


1.1
log
@initial cut at ntpd.
it is just capable of answering (s)ntp4 requests with the local time
for now.
imsg/buffer and logging framework from bgpd, ntp protocol hackery
with Alexander Guy
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.36 2004/05/08 19:17:20 henning Exp $ */
d31 1
d49 2
@

