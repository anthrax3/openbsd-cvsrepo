head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.8
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.14
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.05.05.01.26.37;	author jsg;	state Exp;
branches;
next	1.3;
commitid	t9z5FiHTkQbSNv6Z;

1.3
date	2014.11.18.20.54.28;	author krw;	state Exp;
branches;
next	1.2;
commitid	yCis8OrOsfixbKpI;

1.2
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.12.20;	author norby;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use the sizeof the struct not the sizeof a pointer to the struct
ok claudio@@
@
text
@/*	$OpenBSD: probe.c,v 1.3 2014/11/18 20:54:28 krw Exp $ */

/*
 * Copyright (c) 2005, 2006 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/time.h>
#include <stdlib.h>
#include <string.h>
#include <event.h>

#include "igmp.h"
#include "dvmrpd.h"
#include "dvmrp.h"
#include "log.h"
#include "dvmrpe.h"

extern struct dvmrpd_conf	*deconf;

/* DVMRP probe packet handling */
int
send_probe(struct iface *iface)
{
	struct sockaddr_in	 dst;
	struct ibuf		*buf;
	struct dvmrp_hdr	*dvmrp_hdr;
	struct nbr		*nbr;
	int			 ret = 0;

	if (iface->passive)
		return (0);

	if ((buf = ibuf_open(iface->mtu - sizeof(struct ip))) == NULL)
		fatal("send_probe");

	/* DVMRP header */
	if (gen_dvmrp_hdr(buf, iface, DVMRP_CODE_PROBE))
		goto fail;

	/* generation ID */
	ibuf_add(buf, &iface->gen_id, sizeof(iface->gen_id));

	/* generate neighbor list */
	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if (nbr->state > NBR_STA_DOWN)
			ibuf_add(buf, &nbr->id, sizeof(nbr->id));
	}

	/* set destination address */
	dst.sin_family = AF_INET;
	dst.sin_len = sizeof(struct sockaddr_in);
	inet_aton(AllDVMRPRouters, &dst.sin_addr);

	/* update chksum */
	dvmrp_hdr = ibuf_seek(buf, 0, sizeof(*dvmrp_hdr));
	dvmrp_hdr->chksum = in_cksum(buf->buf, buf->wpos);

	ret = send_packet(iface, buf->buf, buf->wpos, &dst);
	ibuf_free(buf);
	return (ret);
fail:
	log_warn("send_probe");
	ibuf_free(buf);
	return (-1);
}

void
recv_probe(struct iface *iface, struct in_addr src, u_int32_t src_ip,
    u_int8_t capabilities, char *buf, u_int16_t len)
{
	struct nbr	*nbr = NULL;
	u_int32_t	 gen_id;
	u_int32_t	 nbr_id;

	LIST_FOREACH(nbr, &iface->nbr_list, entry) {
		if (nbr->id.s_addr == src_ip)
			break;
	}

	memcpy(&gen_id, buf, sizeof(gen_id));
	len -= sizeof(gen_id);
	buf += sizeof(gen_id);

	if (!nbr) {
		nbr = nbr_new(src_ip, iface, 0);
		nbr->gen_id = gen_id;
		nbr->capabilities = capabilities;
		nbr->addr = src;
	}

	nbr_fsm(nbr, NBR_EVT_PROBE_RCVD);

	if ((nbr->gen_id != gen_id) || (nbr->capabilities != capabilities)) {
		if (!nbr->compat)
			nbr_fsm(nbr, NBR_EVT_1_WAY_RCVD);
		nbr->gen_id = gen_id;
		nbr->capabilities = capabilities;

		/* XXX handle nbr change! */
	}

	while (len >= sizeof(nbr_id)) {
		memcpy(&nbr_id, buf, sizeof(nbr_id));
		if (nbr_id == iface->addr.s_addr) {
			/* seen myself */
			if (nbr->state < NBR_STA_2_WAY)
			nbr_fsm(nbr, NBR_EVT_2_WAY_RCVD);
			break;
		}
		buf += sizeof(nbr_id);
		len -= sizeof(nbr_id);
	}

	if (len == 0) {
		nbr_fsm(nbr, NBR_EVT_1_WAY_RCVD);
		return;
	}

	/* XXX len correct?? */

	return;
}
@


1.3
log
@Nuke more obvious #include duplications.

ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.2 2010/05/26 13:56:07 nicm Exp $ */
d71 1
a71 1
	dvmrp_hdr = ibuf_seek(buf, 0, sizeof(dvmrp_hdr));
@


1.2
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.1 2006/06/01 14:12:20 norby Exp $ */
a23 1
#include <sys/socket.h>
@


1.1
log
@Welcome dvmrpd
started by Esben Norby some time ago by using the imsg/three process framework
of ospfd.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.

Status:

The IGMP part is mostly complete, allowing clients to join and leave groups.
Election the IGMP querier of a network is also functional, only thing missing is
some corner cases when going from non-querier to querier.

About half of the DVMRP is functional, probes and route reports are functional.

Multicast streams can be detected and the MFC can be manipulated.
The RIB is not complete but operational.

Not yet connected to the builds.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d42 1
a42 1
	struct buf		*buf;
d50 1
a50 1
	if ((buf = buf_open(iface->mtu - sizeof(struct ip))) == NULL)
d58 1
a58 1
	buf_add(buf, &iface->gen_id, sizeof(iface->gen_id));
d63 1
a63 1
			buf_add(buf, &nbr->id, sizeof(nbr->id));
d72 1
a72 1
	dvmrp_hdr = buf_seek(buf, 0, sizeof(dvmrp_hdr));
d76 1
a76 1
	buf_free(buf);
d80 1
a80 1
	buf_free(buf);
@

