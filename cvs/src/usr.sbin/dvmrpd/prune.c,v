head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.8
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.12.07.19.14.49;	author mmcc;	state Exp;
branches;
next	1.5;
commitid	AdGyxnW7jQntaErG;

1.5
date	2015.05.05.01.26.37;	author jsg;	state Exp;
branches;
next	1.4;
commitid	t9z5FiHTkQbSNv6Z;

1.4
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.3;
commitid	2uw1UTO4k6erpWzK;

1.3
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.14.15.32.55;	author michele;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.12.20;	author norby;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Replace bzero with memset, and change a strings.h include to string.h to
get the declaration. From Serguey Parkhomovsky. No objects from
deraadt@@.
@
text
@/*	$OpenBSD: prune.c,v 1.5 2015/05/05 01:26:37 jsg Exp $ */

/*
 * Copyright (c) 2005, 2006 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <arpa/inet.h>

#include <stdlib.h>
#include <string.h>

#include "igmp.h"
#include "dvmrpd.h"
#include "dvmrp.h"
#include "log.h"
#include "dvmrpe.h"

/* DVMRP prune packet handling */
int
send_prune(struct nbr *nbr, struct prune *p)
{
	struct sockaddr_in	 dst;
	struct ibuf		*buf;
	struct dvmrp_hdr	*dvmrp_hdr;
	struct prune_hdr	 prune;
	int			 ret = 0;

	log_debug("send_prune: interface %s nbr %s", nbr->iface->name,
	    inet_ntoa(nbr->addr));

	if (nbr->iface->passive)
		return (0);

	memset(&prune, 0, sizeof(prune));

	dst.sin_family = AF_INET;
	dst.sin_len = sizeof(struct sockaddr_in);
	dst.sin_addr = nbr->addr;

	if ((buf = ibuf_open(nbr->iface->mtu - sizeof(struct ip))) == NULL)
		fatal("send_prune");

	/* DVMRP header */
	if (gen_dvmrp_hdr(buf, nbr->iface, DVMRP_CODE_PRUNE))
		goto fail;

	prune.src_host_addr = p->origin.s_addr;
	prune.group_addr = p->group.s_addr;

	/* XXX */
	prune.lifetime = htonl(MAX_PRUNE_LIFETIME);
	prune.src_netmask = p->netmask.s_addr;

	ibuf_add(buf, &prune, sizeof(prune));

	/* update chksum */
	dvmrp_hdr = ibuf_seek(buf, 0, sizeof(*dvmrp_hdr));
	dvmrp_hdr->chksum = in_cksum(buf->buf, buf->wpos);

	ret = send_packet(nbr->iface, buf->buf, buf->wpos, &dst);
	ibuf_free(buf);

	return (ret);
fail:
	log_warn("send_prune");
	ibuf_free(buf);
	return (-1);
}

void
recv_prune(struct nbr *nbr, char *buf, u_int16_t len)
{
	struct prune		 p;
	struct prune_hdr	*prune;

	log_debug("recv_prune: neighbor ID %s", inet_ntoa(nbr->id));

	if (len < PRUNE_MIN_LEN) {
		log_debug("recv_prune: packet malformed from %s",
		    inet_ntoa(nbr->id));
		return;
	}

	memset(&p, 0, sizeof(p));

	prune = (struct prune_hdr *)buf;

	p.origin.s_addr = prune->src_host_addr;
	p.group.s_addr = prune->group_addr;
	p.lifetime = prune->lifetime;

	if (len >= sizeof(*prune))
		p.netmask.s_addr = prune->src_netmask;

	p.ifindex = nbr->iface->ifindex;

	dvmrpe_imsg_compose_rde(IMSG_RECV_PRUNE, nbr->peerid, 0, &p, sizeof(p));

	return;
}
@


1.5
log
@use the sizeof the struct not the sizeof a pointer to the struct
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prune.c,v 1.4 2014/10/25 03:23:49 lteo Exp $ */
d26 1
a26 1
#include <strings.h>
d50 1
a50 1
	bzero(&prune, sizeof(prune));
d100 1
a100 1
	bzero(&p, sizeof(p));
@


1.4
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prune.c,v 1.3 2010/05/26 13:56:07 nicm Exp $ */
d73 1
a73 1
	dvmrp_hdr = ibuf_seek(buf, 0, sizeof(dvmrp_hdr));
@


1.3
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: prune.c,v 1.2 2009/03/14 15:32:55 michele Exp $ */
a21 1
#include <netinet/in_systm.h>
@


1.2
log
@Initial support for pruning. When every single interface is removed from the
downstream list for a particular source send a prune to the upstream router.

input and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prune.c,v 1.1 2006/06/01 14:12:20 norby Exp $ */
d40 1
a40 1
	struct buf		*buf;
d57 1
a57 1
	if ((buf = buf_open(nbr->iface->mtu - sizeof(struct ip))) == NULL)
d71 1
a71 1
	buf_add(buf, &prune, sizeof(prune));
d74 1
a74 1
	dvmrp_hdr = buf_seek(buf, 0, sizeof(dvmrp_hdr));
d78 1
a78 1
	buf_free(buf);
d83 1
a83 1
	buf_free(buf);
@


1.1
log
@Welcome dvmrpd
started by Esben Norby some time ago by using the imsg/three process framework
of ospfd.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.

Status:

The IGMP part is mostly complete, allowing clients to join and leave groups.
Election the IGMP querier of a network is also functional, only thing missing is
some corner cases when going from non-querier to querier.

About half of the DVMRP is functional, probes and route reports are functional.

Multicast streams can be detected and the MFC can be manipulated.
The RIB is not complete but operational.

Not yet connected to the builds.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d37 1
a37 1
send_prune(struct nbr *nbr, void *data, int len)
d42 1
d51 6
d64 8
a71 3
	dst.sin_family = AF_INET;
	dst.sin_len = sizeof(struct sockaddr_in);
	dst.sin_addr = nbr->addr;
d79 1
d90 3
d94 21
@

