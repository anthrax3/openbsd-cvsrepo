head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.14
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.12.07.19.14.49;	author mmcc;	state Exp;
branches;
next	1.4;
commitid	AdGyxnW7jQntaErG;

1.4
date	2015.12.07.18.59.31;	author mmcc;	state Exp;
branches;
next	1.3;
commitid	ftjgRJKACMjEVqNx;

1.3
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.2;
commitid	2uw1UTO4k6erpWzK;

1.2
date	2010.05.26.13.56.07;	author nicm;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.12.20;	author norby;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replace bzero with memset, and change a strings.h include to string.h to
get the declaration. From Serguey Parkhomovsky. No objects from
deraadt@@.
@
text
@/*	$OpenBSD: packet.c,v 1.4 2015/12/07 18:59:31 mmcc Exp $ */

/*
 * Copyright (c) 2004, 2005, 2006 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_mroute.h>
#include <arpa/inet.h>

#include <errno.h>
#include <event.h>
#include <stdlib.h>
#include <string.h>

#include "igmp.h"
#include "dvmrpd.h"
#include "dvmrp.h"
#include "log.h"
#include "dvmrpe.h"

int		 ip_hdr_sanity_check(const struct ip *, u_int16_t);
int		 dvmrp_hdr_sanity_check(const struct ip *, struct dvmrp_hdr *,
		     u_int16_t, const struct iface *);
struct iface	*find_iface(struct dvmrpd_conf *, struct in_addr);

extern struct dvmrpd_conf	*deconf;

int
gen_dvmrp_hdr(struct ibuf *buf, struct iface *iface, u_int8_t code)
{
	struct dvmrp_hdr	dvmrp_hdr;

	memset(&dvmrp_hdr, 0, sizeof(dvmrp_hdr));
	dvmrp_hdr.type = PKT_TYPE_DVMRP;
	dvmrp_hdr.code = code;
	dvmrp_hdr.chksum = 0;				/* updated later */
	dvmrp_hdr.capabilities = DVMRP_CAP_DEFAULT;	/* XXX update */
	dvmrp_hdr.minor_version = DVMRP_MINOR_VERSION;
	dvmrp_hdr.major_version = DVMRP_MAJOR_VERSION;

	return (ibuf_add(buf, &dvmrp_hdr, sizeof(dvmrp_hdr)));
}

/* send and receive packets */
int
send_packet(struct iface *iface, void *pkt, size_t len, struct sockaddr_in *dst)
{
	if (iface->passive) {
		log_warnx("send_packet: cannot send packet on passive "
		    "interface %s", iface->name);
		return (-1);
	}

	/* set outgoing interface for multicast traffic */
	if (IN_MULTICAST(ntohl(dst->sin_addr.s_addr)))
		if (if_set_mcast(iface) == -1) {
			log_warn("send_packet: error setting multicast "
			    "interface, %s", iface->name);
			return (-1);
		}

	if (sendto(iface->fd, pkt, len, 0,
	    (struct sockaddr *)dst, sizeof(*dst)) == -1 ) {
		log_warn("send_packet: error sending packet on interface %s",
		    iface->name);
		return (-1);
	}

	return (0);
}

void
recv_packet(int fd, short event, void *bula)
{
	struct dvmrpd_conf	*xconf = bula;
	struct ip		 ip_hdr;
	struct dvmrp_hdr	*dvmrp_hdr;
	struct iface		*iface;
	struct nbr		*nbr = NULL;
	struct in_addr		 addr;
	char			*buf;
	ssize_t			 r;
	u_int16_t		 len;
	int			 l;

	if (event != EV_READ)
		return;

	/* setup buffer */
	buf = pkt_ptr;

	if ((r = recvfrom(fd, buf, IBUF_READ_SIZE, 0, NULL, NULL)) == -1) {
		if (errno != EAGAIN && errno != EINTR)
			log_debug("recv_packet: error receiving packet");
		return;
	}

	len = (u_int16_t)r;

	/* IP header sanity checks */
	if (len < sizeof(ip_hdr)) {
		log_warnx("recv_packet: bad packet size");
		return;
	}

	memcpy(&ip_hdr, buf, sizeof(ip_hdr));
	if ((l = ip_hdr_sanity_check(&ip_hdr, len)) == -1)
		return;
	buf += l;
	len -= l;

	/* find a matching interface */
	if ((iface = find_iface(xconf, ip_hdr.ip_src)) == NULL) {
		log_debug("recv_packet: cannot find valid interface, ip src %s",
		    inet_ntoa(ip_hdr.ip_src));
		return;
	}

	/* header sanity checks */
	if (len < sizeof(*dvmrp_hdr)) {
		log_warnx("recv_packet: bad packet size");
		return;
	}
	dvmrp_hdr = (struct dvmrp_hdr *)buf;

	switch (dvmrp_hdr->type) {
	/* DVMRP */
	case PKT_TYPE_DVMRP:
		if ((l = dvmrp_hdr_sanity_check(&ip_hdr, dvmrp_hdr, len,
		    iface)) == -1)
			return;

		/*
		 * mrouted compat
		 *
		 * Old mrouted versions, send route reports before establishing
		 * 2-WAY neighbor relationships.
		 */
		if ((nbr_find_ip(iface, ip_hdr.ip_src.s_addr) == NULL) &&
		    (dvmrp_hdr->code == DVMRP_CODE_REPORT)) {
			log_debug("recv_packet: route report from neighbor"
			    " ID %s, compat", inet_ntoa(ip_hdr.ip_src));
			nbr = nbr_new(ip_hdr.ip_src.s_addr, iface, 0);
			nbr_fsm(nbr, NBR_EVT_PROBE_RCVD);
			nbr->compat = 1;
			nbr->addr = ip_hdr.ip_src;
		}

		if ((dvmrp_hdr->type == PKT_TYPE_DVMRP) &&
		    (dvmrp_hdr->code != DVMRP_CODE_PROBE))
			/* find neighbor */
			if ((nbr = nbr_find_ip(iface, ip_hdr.ip_src.s_addr))
			    == NULL) {
				log_debug("recv_packet: unknown neighbor ID");
				return;
			}

		buf += sizeof(*dvmrp_hdr);
		len = l - sizeof(*dvmrp_hdr);

		inet_aton(AllDVMRPRouters, &addr);
		if ((ip_hdr.ip_dst.s_addr != addr.s_addr) &&
		    (ip_hdr.ip_dst.s_addr != iface->addr.s_addr)) {
			log_debug("recv_packet: interface %s, invalid"
			    " destination IP address %s", iface->name,
			    inet_ntoa(ip_hdr.ip_dst));
			break;
		}

		switch (dvmrp_hdr->code) {
		case DVMRP_CODE_PROBE:
			recv_probe(iface, ip_hdr.ip_src, ip_hdr.ip_src.s_addr,
			    dvmrp_hdr->capabilities, buf, len);
			break;
		case DVMRP_CODE_REPORT:
			recv_report(nbr, buf, len);
			break;
		case DVMRP_CODE_ASK_NBRS2:
			recv_ask_nbrs2(nbr, buf,len);
			break;
		case DVMRP_CODE_NBRS2:
			recv_nbrs2(nbr, buf,len);
			break;
		case DVMRP_CODE_PRUNE:
			recv_prune(nbr, buf, len);
			break;
		case DVMRP_CODE_GRAFT:
			recv_graft(nbr, buf,len);
			break;
		case DVMRP_CODE_GRAFT_ACK:
			recv_graft_ack(nbr, buf,len);
			break;
		default:
			log_debug("recv_packet: unknown DVMRP packet type, "
			    "interface %s", iface->name);
		}
		break;
	/* IGMP */
	case PKT_TYPE_MEMBER_QUERY:
		recv_igmp_query(iface, ip_hdr.ip_src, buf, len);
		break;
	case PKT_TYPE_MEMBER_REPORTv1:
	case PKT_TYPE_MEMBER_REPORTv2:
		recv_igmp_report(iface, ip_hdr.ip_src, buf, len,
		    dvmrp_hdr->type);
		break;
	case PKT_TYPE_LEAVE_GROUPv2:
		recv_igmp_leave(iface, ip_hdr.ip_src, buf, len);
		break;
	default:
		log_debug("recv_packet: unknown IGMP packet type, interface %s",
		    iface->name);
	}
}

int
ip_hdr_sanity_check(const struct ip *ip_hdr, u_int16_t len)
{
	if (ntohs(ip_hdr->ip_len) != len) {
		log_debug("recv_packet: invalid IP packet length %u",
		    ntohs(ip_hdr->ip_len));
		return (-1);
	}

	if (ip_hdr->ip_p != IPPROTO_IGMP)
		/* this is enforced by the socket itself */
		fatalx("recv_packet: invalid IP proto");

	return (ip_hdr->ip_hl << 2);
}

int
dvmrp_hdr_sanity_check(const struct ip *ip_hdr, struct dvmrp_hdr *dvmrp_hdr,
    u_int16_t len, const struct iface *iface)
{
	/* we only support DVMRPv3 */
	if (dvmrp_hdr->major_version != DVMRP_MAJOR_VERSION) {
		log_debug("recv_packet: invalid DVMRP version");
		return (-1);
	}

	/* XXX enforce minor version as well, but not yet */

	/* XXX chksum */

	return (len);
}

struct iface *
find_iface(struct dvmrpd_conf *xconf, struct in_addr src)
{
	struct iface	*iface = NULL;

	/* returned interface needs to be active */
	LIST_FOREACH(iface, &xconf->iface_list, entry) {
		if (iface->fd > 0 &&
		    (iface->type == IF_TYPE_POINTOPOINT) &&
		    (iface->dst.s_addr == src.s_addr) &&
		    !iface->passive)
			return (iface);

		if (iface->fd > 0 && (iface->addr.s_addr &
		    iface->mask.s_addr) == (src.s_addr &
		    iface->mask.s_addr) && !iface->passive)
			return (iface);
	}

	return (NULL);
}
@


1.4
log
@strings.h -> string.h to prevent implicit declarations. From Serguey
Parkhomovsky.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.3 2014/10/25 03:23:49 lteo Exp $ */
d51 1
a51 1
	bzero(&dvmrp_hdr, sizeof(dvmrp_hdr));
@


1.3
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.2 2010/05/26 13:56:07 nicm Exp $ */
d31 1
a31 1
#include <strings.h>
@


1.2
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.1 2006/06/01 14:12:20 norby Exp $ */
a23 1
#include <netinet/in_systm.h>
@


1.1
log
@Welcome dvmrpd
started by Esben Norby some time ago by using the imsg/three process framework
of ospfd.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.

Status:

The IGMP part is mostly complete, allowing clients to join and leave groups.
Election the IGMP querier of a network is also functional, only thing missing is
some corner cases when going from non-querier to querier.

About half of the DVMRP is functional, probes and route reports are functional.

Multicast streams can be detected and the MFC can be manipulated.
The RIB is not complete but operational.

Not yet connected to the builds.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d48 1
a48 1
gen_dvmrp_hdr(struct buf *buf, struct iface *iface, u_int8_t code)
d60 1
a60 1
	return (buf_add(buf, &dvmrp_hdr, sizeof(dvmrp_hdr)));
d111 1
a111 1
	if ((r = recvfrom(fd, buf, READ_BUF_SIZE, 0, NULL, NULL)) == -1) {
@

