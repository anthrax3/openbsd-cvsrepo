head	1.22;
access;
symbols
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.26
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.18
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.22
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.20
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.16
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.14
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.22
date	2016.09.02.16.20.34;	author benno;	state Exp;
branches;
next	1.21;
commitid	GeTQXXDZkuCy2ybg;

1.21
date	2015.09.27.17.29.45;	author stsp;	state Exp;
branches;
next	1.20;
commitid	4R1EROmhJjzhK6EW;

1.20
date	2009.11.02.20.31.50;	author claudio;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.06.18.31.42;	author pyr;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.06.07.52.04;	author pyr;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.16.20.11.12;	author michele;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.14.15.32.55;	author michele;	state Exp;
branches;
next	1.15;

1.15
date	2009.03.07.12.47.17;	author michele;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.06.18.39.13;	author michele;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.20.01.35.34;	author todd;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.19.20.40.31;	author michele;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.07.16.37.04;	author michele;	state Exp;
branches;
next	1.10;

1.10
date	2008.12.02.13.42.44;	author michele;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.21.10.39.32;	author michele;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.11.18.23.05;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.11.17.21.08;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.21.19.33.48;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.03.20.14.37;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.02.15.43.16;	author norby;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.01.22.07.30;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.18.18.25;	author norby;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.12.20;	author norby;	state Exp;
branches;
next	;


desc
@@


1.22
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@
@
text
@/*	$OpenBSD: dvmrpd.h,v 1.21 2015/09/27 17:29:45 stsp Exp $ */

/*
 * Copyright (c) 2004, 2005, 2006 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _DVMRPD_H_
#define _DVMRPD_H_

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/tree.h>
#include <net/if.h>
#include <netinet/in.h>
#include <event.h>

#include <imsg.h>

#define CONF_FILE		"/etc/dvmrpd.conf"
#define	DVMRPD_SOCKET		"/var/run/dvmrpd.sock"
#define DVMRPD_USER		"_dvmrpd"

#define NBR_HASHSIZE		128

#define NBR_IDSELF		1
#define NBR_CNTSTART		(NBR_IDSELF + 1)

#define	RT_BUF_SIZE		16384

#define	DVMRPD_FLAG_NO_FIB_UPDATE	0x0001

#define	F_DVMRPD_INSERTED	0x0001
#define	F_KERNEL		0x0002
#define	F_CONNECTED		0x0004
#define	F_DOWN			0x0010
#define	F_STATIC		0x0020
#define	F_LONGER		0x0040

#define MAXVIFS			32	/* XXX */

static const char * const log_procnames[] = {
	"parent",
	"dvmrpe",
	"rde"
};

struct imsgev {
	struct imsgbuf		 ibuf;
	void			(*handler)(int, short, void *);
	struct event		 ev;
	void			*data;
	short			 events;
};

enum imsg_type {
	IMSG_NONE,
	IMSG_CTL_RELOAD,
	IMSG_CTL_SHOW_IFACE,
	IMSG_CTL_SHOW_IGMP,
	IMSG_CTL_SHOW_NBR,
	IMSG_CTL_SHOW_RIB,
	IMSG_CTL_SHOW_MFC,
	IMSG_CTL_MFC_COUPLE,
	IMSG_CTL_MFC_DECOUPLE,
	IMSG_CTL_KROUTE,
	IMSG_CTL_KROUTE_ADDR,
	IMSG_CTL_IFINFO,
	IMSG_CTL_SHOW_SUM,
	IMSG_CTL_END,
	IMSG_CTL_LOG_VERBOSE,
	IMSG_IFINFO,
	IMSG_ROUTE_REPORT,
	IMSG_FULL_ROUTE_REPORT,
	IMSG_FULL_ROUTE_REPORT_END,
	IMSG_MFC_ADD,
	IMSG_MFC_DEL,
	IMSG_GROUP_ADD,
	IMSG_GROUP_DEL,
	IMSG_NBR_DEL,
	IMSG_SEND_PRUNE,
	IMSG_RECV_PRUNE,
	IMSG_FLASH_UPDATE,
	IMSG_FLASH_UPDATE_DS
};

/* interface states */
#define	IF_STA_DOWN		0x01
#define IF_STA_QUERIER		0x02
#define	IF_STA_NONQUERIER	0x04
#define	IF_STA_ANY		0x07
#define	IF_STA_ACTIVE		(~IF_STA_DOWN)

/* interface events */
enum iface_event {
	IF_EVT_NOTHING,
	IF_EVT_UP,
	IF_EVT_QTMOUT,		/* query timer expired */
	IF_EVT_QRECVD,		/* query received, check for lower IP */
	IF_EVT_QPRSNTTMOUT,	/* other querier present timeout */
	IF_EVT_DOWN
};

/* interface actions */
enum iface_action {
	IF_ACT_NOTHING,
	IF_ACT_STRT,
	IF_ACT_QPRSNT,
	IF_ACT_RST
};

/* interface types */
enum iface_type {
	IF_TYPE_POINTOPOINT,
	IF_TYPE_BROADCAST
};

/* neighbor states */
#define	NBR_STA_DOWN		0x01
#define	NBR_STA_1_WAY		0x02
#define	NBR_STA_2_WAY		0x04
#define NBR_STA_ACTIVE		(~NBR_STA_DOWN)
#define NBR_STA_ANY		0xff

struct group {
	TAILQ_ENTRY(group)	 entry;
	struct event		 dead_timer;
	struct event		 v1_host_timer;
	struct event		 retrans_timer;

	struct in_addr		 addr;

	struct iface		*iface;

	time_t			 uptime;
	int			 state;
};

struct rde_group {
	TAILQ_ENTRY(rde_group)	 entry;
	struct in_addr		 rde_group;
};

struct mfc {
	struct in_addr		 origin;
	struct in_addr		 group;
	u_short			 ifindex;
	u_int8_t		 ttls[MAXVIFS];
};

struct prune {
	struct in_addr		 origin;
	struct in_addr		 netmask;
	struct in_addr		 group;
	struct in_addr		 nexthop;
	u_short			 ifindex;
	u_int32_t		 lifetime;
};

struct nbr_msg {
	struct in_addr		 address;
	unsigned int		 ifindex;
};

TAILQ_HEAD(rr_head, rr_entry);
RB_HEAD(src_head, src_node);

struct iface {
	LIST_ENTRY(iface)	 entry;
	struct event		 probe_timer;
	struct event		 query_timer;
	struct event		 querier_present_timer;
	time_t			 uptime;
	LIST_HEAD(, nbr)	 nbr_list;
	TAILQ_HEAD(, group)	 group_list;
	TAILQ_HEAD(, rde_group)	 rde_group_list;
	struct rr_head		 rr_list;

	char			 name[IF_NAMESIZE];
	struct in_addr		 addr;
	struct in_addr		 dst;
	struct in_addr		 mask;
	struct in_addr		 querier;	/* designated querier */

	u_int64_t		 baudrate;
	u_int32_t		 gen_id;
	u_int32_t		 group_cnt;
	u_int32_t		 probe_interval;

	u_int32_t		 query_interval;
	u_int32_t		 query_resp_interval;
	u_int32_t		 recv_query_resp_interval;
	u_int32_t		 group_member_interval;
	u_int32_t		 querier_present_interval;
	u_int32_t		 startup_query_interval;
	u_int32_t		 startup_query_cnt;
	u_int32_t		 last_member_query_interval;
	u_int32_t		 last_member_query_cnt;
	u_int32_t		 last_member_query_time;
	u_int32_t		 v1_querier_present_tmout;
	u_int32_t		 v1_host_present_interval;
	u_int32_t		 startup_query_counter; /* actual counter */
	u_int32_t		 dead_interval;

	unsigned int		 ifindex;		/* ifindex and vif */
	int			 fd;
	int			 state;
	int			 mtu;
	int			 nbr_cnt;
	int			 adj_cnt;

	u_int16_t		 flags;
	u_int16_t		 metric;
	enum iface_type		 type;

	u_int8_t		 robustness;
	u_int8_t		 linkstate;
	u_int8_t		 if_type;
	u_int8_t		 passive;
	u_int8_t		 igmp_version;
};

/* dvmrp_conf */
enum {
	PROC_MAIN,
	PROC_DVMRP_ENGINE,
	PROC_RDE_ENGINE
} dvmrpd_process;

struct dvmrpd_conf {
	struct event		 ev;
	struct event		 report_timer;
	u_int32_t		 gen_id;
	u_int32_t		 opts;
#define DVMRPD_OPT_VERBOSE	 0x00000001
#define DVMRPD_OPT_VERBOSE2	 0x00000002
#define DVMRPD_OPT_NOACTION	 0x00000004
	int			 maxdepth;
	LIST_HEAD(, iface)	 iface_list;
	int			 dvmrp_socket;
	int			 mroute_socket;
	int			 flags;
};

/* kroute */
struct kroute {
	struct in_addr		 prefix;
	struct in_addr		 nexthop;
	u_int16_t		 flags;
	u_short			 ifindex;
	u_int8_t		 prefixlen;
};

struct kif {
	char			 ifname[IF_NAMESIZE];
	u_int64_t		 baudrate;
	int			 flags;
	int			 mtu;
	u_short			 ifindex;
	u_int8_t		 if_type;
	u_int8_t		 link_state;
	u_int8_t		 nh_reachable;	/* for nexthop verification */
};

/* control data structures */
struct ctl_iface {
	char			 name[IF_NAMESIZE];
	struct in_addr		 addr;
	struct in_addr		 mask;
	struct in_addr		 querier;

	time_t			 probe_timer;
	time_t			 query_timer;
	time_t			 querier_present_timer;
	time_t			 uptime;

	u_int64_t		 baudrate;
	u_int32_t		 gen_id;
	u_int32_t		 group_cnt;
	u_int32_t		 probe_interval;
	u_int32_t		 query_interval;
	u_int32_t		 query_resp_interval;
	u_int32_t		 recv_query_resp_interval;
	u_int32_t		 group_member_interval;
	u_int32_t		 querier_present_interval;
	u_int32_t		 startup_query_interval;
	u_int32_t		 startup_query_cnt;
	u_int32_t		 last_member_query_interval;
	u_int32_t		 last_member_query_cnt;
	u_int32_t		 last_member_query_time;
	u_int32_t		 v1_querier_present_tmout;
	u_int32_t		 v1_host_present_interval;
	u_int32_t		 dead_interval;

	unsigned int		 ifindex;
	int			 state;
	int			 mtu;
	int			 nbr_cnt;
	int			 adj_cnt;

	u_int16_t		 flags;
	u_int16_t		 metric;
	enum iface_type		 type;
	u_int8_t		 robustness;
	u_int8_t		 linkstate;
	u_int8_t		 if_type;
	u_int8_t		 passive;
	u_int8_t		 igmp_version;
};

struct ctl_group {
	time_t			 dead_timer;
	time_t			 v1_host_timer;
	time_t			 retrans_timer;
	time_t			 uptime;
	struct in_addr		 addr;
	int			 state;
};

struct ctl_nbr {
	char			 name[IF_NAMESIZE];
	struct in_addr		 id;
	struct in_addr		 addr;
	time_t			 dead_timer;
	time_t			 uptime;
	int			 state;
};

struct ctl_rt {
	struct in_addr		 prefix;
	struct in_addr		 nexthop;
	struct in_addr		 area;
	struct in_addr		 adv_rtr;
	time_t			 uptime;
	time_t			 expire;
	u_int32_t		 cost;
	u_int8_t		 flags;
	u_int8_t		 prefixlen;
};

struct ctl_mfc {
	u_int8_t		 ttls[MAXVIFS];	/* outgoing vif(s) */
	struct in_addr		 origin;
	struct in_addr		 group;
	time_t			 uptime;
	time_t			 expire;
	u_short			 ifindex;	/* incoming vif */
};

struct ctl_sum {
	struct in_addr		 rtr_id;
	u_int32_t		 hold_time;
};

/* dvmrpd.c */
void main_imsg_compose_dvmrpe(int, pid_t, void *, u_int16_t);

/* parse.y */
struct dvmrpd_conf	*parse_config(char *, int);
int			 cmdline_symset(char *);

int	 imsg_compose_event(struct imsgev *, u_int16_t, u_int32_t, pid_t,
	    int, void *, u_int16_t);
void	 imsg_event_add(struct imsgev *);

/* in_cksum.c */
u_int16_t	 in_cksum(void *, size_t);

/* kroute.c */
int		 kif_init(void);
void		 kif_clear(void);
int		 kr_init(void);
void		 kr_shutdown(void);
void		 kr_dispatch_msg(int, short, void *);
void		 kr_ifinfo(char *);
struct kif	*kif_findname(char *);

u_int8_t	 prefixlen_classful(in_addr_t);
u_int8_t	 mask2prefixlen(in_addr_t);
in_addr_t	 prefixlen2mask(u_int8_t);

/* kmroute.c */
int		 kmr_init(int);
void		 kmr_shutdown(void);
void		 kmr_recv_msg(int, short, void *);
void		 kmr_mfc_couple(void);
void		 kmr_mfc_decouple(void);
void		 kmroute_clear(void);
int		 mrt_init(int);
int		 mrt_done(int);
int		 mrt_add_vif(int, struct iface *);
void		 mrt_del_vif(int, struct iface *);
int		 mrt_add_mfc(int, struct mfc *);
int		 mrt_del_mfc(int, struct mfc *);

/* log.h */
const char	*nbr_state_name(int);
const char	*if_state_name(int);
const char	*if_type_name(enum iface_type);
const char	*group_state_name(int);

/* printconf.c */
void		 print_config(struct dvmrpd_conf *);

/* interface.c */
struct iface	*if_find_index(u_short);

#define	PREFIX_SIZE(x)	(((x) + 7) / 8)

#endif	/* _DVMRPD_H_ */
@


1.21
log
@As done for bgpd recently, rename if_mediatype to if_type in dvrmpd.
Remove unused function get_ifms_type(). No ifmedia in here anymore.
"move forward" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.20 2009/11/02 20:31:50 claudio Exp $ */
d54 6
@


1.20
log
@Yet another implementation of IMSG_CTL_LOG_VERBOSE. Similar to the one in
ripd, ospfd and friends. OK michele, henning, sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.19 2009/06/06 18:31:42 pyr Exp $ */
d225 1
a225 1
	u_int8_t		 media_type;
d267 1
a267 1
	u_int8_t		 media_type;
d313 1
a313 1
	u_int8_t		 mediatype;
@


1.19
log
@Get ready for including imsg.h from a lib, when it comes along.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.18 2009/06/06 07:52:04 pyr Exp $ */
d78 1
@


1.18
log
@make dvmrpd imsg-in-a-lib ready as well.
``put it in'' claudio@@, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.17 2009/04/16 20:11:12 michele Exp $ */
d31 1
a31 1
#include "imsg.h"
@


1.17
log
@Notify the rde when a neighbor goes down.
When this happens we have to rebuild the list of downstream
interfaces.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.16 2009/03/14 15:32:55 michele Exp $ */
d31 2
a41 1
#define	READ_BUF_SIZE		65535
d55 2
a56 31
/* buffer */
struct buf {
	TAILQ_ENTRY(buf)	 entry;
	u_char			*buf;
	size_t			 size;
	size_t			 max;
	size_t			 wpos;
	size_t			 rpos;
	int			 fd;
};

struct msgbuf {
	u_int32_t		 queued;
	int			 fd;
	TAILQ_HEAD(, buf)	 bufs;
};

#define	IMSG_HEADER_SIZE	sizeof(struct imsg_hdr)
#define	MAX_IMSGSIZE		8192

struct buf_read {
	u_char			 buf[READ_BUF_SIZE];
	u_char			*rptr;
	size_t			 wpos;
};

struct imsgbuf {
	TAILQ_HEAD(, imsg_fd)	fds;
	struct buf_read		r;
	struct msgbuf		w;
	struct event		ev;
d58 3
a60 3
	int			fd;
	pid_t			pid;
	short			events;
a92 17
struct imsg_hdr {
	enum imsg_type	type;
	u_int16_t	len;
	u_int32_t	peerid;
	pid_t		pid;
};

struct imsg {
	struct imsg_hdr	 hdr;
	void		*data;
};

struct imsg_fd {
	TAILQ_ENTRY(imsg_fd)	entry;
	int			fd;
};

a360 12
/* buffer.c */
struct buf	*buf_open(size_t);
struct buf	*buf_dynamic(size_t, size_t);
int		 buf_add(struct buf *, void *, size_t);
void		*buf_reserve(struct buf *, size_t);
void		*buf_seek(struct buf *, size_t, size_t);
int		 buf_close(struct msgbuf *, struct buf *);
void		 buf_free(struct buf *);
void		 msgbuf_init(struct msgbuf *);
void		 msgbuf_clear(struct msgbuf *);
int		 msgbuf_write(struct msgbuf *);

d368 3
a370 12
/* imsg.c */
void	 imsg_init(struct imsgbuf *, int, void (*)(int, short, void *));
ssize_t	 imsg_read(struct imsgbuf *);
ssize_t	 imsg_get(struct imsgbuf *, struct imsg *);
int	 imsg_compose(struct imsgbuf *, enum imsg_type, u_int32_t, pid_t,
	    void *, u_int16_t);
struct buf	*imsg_create(struct imsgbuf *, enum imsg_type, u_int32_t, pid_t,
		    u_int16_t);
int	 imsg_add(struct buf *, void *, u_int16_t);
int	 imsg_close(struct imsgbuf *, struct buf *);
void	 imsg_free(struct imsg *);
void	 imsg_event_add(struct imsgbuf *); /* needs to be provided externally */
@


1.16
log
@Initial support for pruning. When every single interface is removed from the
downstream list for a particular source send a prune to the upstream router.

input and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.15 2009/03/07 12:47:17 michele Exp $ */
d114 1
d209 5
@


1.15
log
@Get rid of rde_nbr structure as it is no more needed in RDE to make
routing decisions.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.14 2009/03/06 18:39:13 michele Exp $ */
d114 2
d199 9
@


1.14
log
@Make RDE aware of multicast group members per interface. This is needed to
make unicast routing decisions.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.13 2009/01/20 01:35:34 todd Exp $ */
a111 2
	IMSG_NEIGHBOR_UP,
	IMSG_NEIGHBOR_DOWN,
@


1.13
log
@revert earlier commit that broke the tree
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.11 2008/12/07 16:37:04 michele Exp $ */
d114 2
d189 5
d212 1
@


1.12
log
@When inserting a new route into the kernel set as
downstream interfaces the ones with neighbors or
group members.

ok norby@@
@
text
@d237 1
d326 1
@


1.11
log
@Kill src_node structure. It is mostly redundant with rt_node and
adds unneeded complexity. Move any stuff to rt_node structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.10 2008/12/02 13:42:44 michele Exp $ */
a236 1
	int			 nbr_cnt;
a324 1
	int			 nbr_cnt;
@


1.10
log
@Initial support for neighbor expiry.
When a nbr goes down delete it from the lists of
downstream dependent neighbors.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.9 2008/11/21 10:39:32 michele Exp $ */
a267 1
	struct src_head		 src_list;
@


1.9
log
@Introduce support for flash updates.
They spread routing changes immediately as they happen
avoiding wait until the next report interval.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.8 2007/09/11 18:23:05 claudio Exp $ */
d112 2
@


1.8
log
@The same dance as in all other routing daemons. baudrate is 64bit plus
initialize iface->baudrate when the interface is created. An additional
gimmick don't set the ictl->baudrate twice when building the control message.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.7 2007/09/11 17:21:08 henning Exp $ */
d111 3
a113 1
	IMSG_MFC_DEL
@


1.7
log
@baudrate 64bit, two more questionable marked for norby
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.6 2007/03/21 19:33:48 michele Exp $ */
d209 1
a211 2

	u_int32_t		 baudrate;	/* XXX 32bit only? */
d302 1
a304 1
	u_int32_t		 baudrate;		/* XXX 32bit only? */
@


1.6
log
@Added code to parse unicast routes learned from route report packets.
Now we are able to select correctly designated forwarders and downstream
dependent routers per interface.

Tested and OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.5 2006/12/03 20:14:37 michele Exp $ */
d212 1
a212 1
	u_int32_t		 baudrate;
d282 1
a282 1
	u_long			 baudrate;
d305 1
a305 1
	u_int32_t		 baudrate;
@


1.5
log
@introduce rde_check_route that selects which routes must be accepted and which discarded.
Still not complete, just a step forward.

ok norby@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.4 2006/06/02 15:43:16 norby Exp $ */
d191 1
d265 1
@


1.4
log
@simplify netid_len calculation, inspired by stuff from bgpd.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.3 2006/06/01 22:07:30 claudio Exp $ */
d448 4
a451 1
void	print_config(struct dvmrpd_conf *);
@


1.3
log
@More kroute.c cleanup and start using the routing socket to track interface
states.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.2 2006/06/01 18:18:25 norby Exp $ */
d449 2
@


1.2
log
@implement adjacent nbr count, needed when we want to decide where to flood
multicast streams.
@
text
@d1 1
a1 1
/*	$OpenBSD: dvmrpd.h,v 1.1 2006/06/01 14:12:20 norby Exp $ */
d417 1
a417 1
int		 kr_init(int);
@


1.1
log
@Welcome dvmrpd
started by Esben Norby some time ago by using the imsg/three process framework
of ospfd.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.

Status:

The IGMP part is mostly complete, allowing clients to join and leave groups.
Election the IGMP querier of a network is also functional, only thing missing is
some corner cases when going from non-querier to querier.

About half of the DVMRP is functional, probes and route reports are functional.

Multicast streams can be detected and the MFC can be manipulated.
The RIB is not complete but operational.

Not yet connected to the builds.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d233 3
@

