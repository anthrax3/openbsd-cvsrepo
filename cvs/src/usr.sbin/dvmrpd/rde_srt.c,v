head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.10
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.26.0.6
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.25.0.14
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.18
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.16
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.12
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.10
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.25.0.8
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.6
	OPENBSD_5_0:1.25.0.4
	OPENBSD_5_0_BASE:1.25
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.4
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2015.05.22.01.30.27;	author jsg;	state Exp;
branches;
next	1.25;
commitid	HkxMn89InSsmRmgw;

1.25
date	2010.09.02.14.03.21;	author sobrado;	state Exp;
branches;
next	1.24;

1.24
date	2009.09.06.09.52.14;	author michele;	state Exp;
branches;
next	1.23;

1.23
date	2009.05.20.16.10.04;	author michele;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.16.20.11.12;	author michele;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.16.17.59.07;	author michele;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.11.09.36.35;	author michele;	state Exp;
branches;
next	1.19;

1.19
date	2009.03.14.15.32.55;	author michele;	state Exp;
branches;
next	1.18;

1.18
date	2009.03.06.18.39.13;	author michele;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.03.16.21.19;	author michele;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.25.15.24.21;	author michele;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.20.01.35.34;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.19.20.52.09;	author michele;	state Exp;
branches;
next	1.13;

1.13
date	2009.01.19.20.40.31;	author michele;	state Exp;
branches;
next	1.12;

1.12
date	2008.12.07.16.37.04;	author michele;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.02.13.42.44;	author michele;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.24.21.55.52;	author michele;	state Exp;
branches;
next	1.9;

1.9
date	2008.11.21.10.39.32;	author michele;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.21.20.20.00;	author michele;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.10.09.37.25;	author michele;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.27.09.04.33;	author michele;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.26.10.11.10;	author michele;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.21.19.33.48;	author michele;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.29.13.38.59;	author michele;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.03.20.14.37;	author michele;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.01.14.12.20;	author norby;	state Exp;
branches;
next	;


desc
@@


1.26
log
@fix a non safe use of LIST_FOREACH with LIST_REMOVE
ok claudio@@ kettenis@@ reyk@@
@
text
@/*	$OpenBSD: rde_srt.c,v 1.25 2010/09/02 14:03:21 sobrado Exp $ */

/*
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
 * Copyright (c) 2005, 2006 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/tree.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <err.h>
#include <stdlib.h>
#include <string.h>

#include "igmp.h"
#include "dvmrp.h"
#include "dvmrpd.h"
#include "log.h"
#include "dvmrpe.h"
#include "rde.h"

/* source route tree */

void	 rt_invalidate(void);
void	 rt_expire_timer(int, short, void *);
int	 rt_start_expire_timer(struct rt_node *);
void	 rt_holddown_timer(int, short, void *);
void	 rt_start_holddown_timer(struct rt_node *);

void	 srt_set_upstream(struct rt_node *, u_int32_t);

/* Designated forwarder */
void	 srt_set_forwarder_self(struct rt_node *, struct iface *);
void	 srt_update_ds_forwarders(struct rt_node *, struct iface *,
	    u_int32_t);
void	 srt_current_forwarder(struct rt_node *, struct iface *,
	    u_int32_t, u_int32_t);

/* Downstream neighbors */
void		 srt_add_ds(struct rt_node *, u_int32_t, u_int32_t);
void		 srt_delete_ds(struct rt_node *, struct ds_nbr *,
		    struct iface *);

/* Flash updates */
void		 flash_update(struct rt_node *);
void		 flash_update_ds(struct rt_node *);

RB_HEAD(rt_tree, rt_node)	 rt;
RB_PROTOTYPE(rt_tree, rt_node, entry, rt_compare)
RB_GENERATE(rt_tree, rt_node, entry, rt_compare)

extern struct dvmrpd_conf	*rdeconf;

/* timers */
void
rt_expire_timer(int fd, short event, void *arg)
{
	struct rt_node	*rn = arg;
	struct timeval	 tv;

	log_debug("rt_expire_timer: route %s/%d", inet_ntoa(rn->prefix),
	    rn->prefixlen);

	timerclear(&tv);
	rn->old_cost = rn->cost;
	rn->cost = INFINITY_METRIC;
	tv.tv_sec = ROUTE_HOLD_DOWN;

	if (evtimer_add(&rn->holddown_timer, &tv) == -1)
		fatal("rt_expire_timer");
}

int
rt_start_expire_timer(struct rt_node *rn)
{
	struct timeval	tv;

	rn->old_cost = 0;

	if (evtimer_pending(&rn->holddown_timer, NULL))
		if (evtimer_del(&rn->holddown_timer) == -1)
			fatal("rt_start_expire_timer");

	timerclear(&tv);
	tv.tv_sec = ROUTE_EXPIRATION_TIME;
	return (evtimer_add(&rn->expiration_timer, &tv));
}

void
rt_holddown_timer(int fd, short event, void *arg)
{
	struct rt_node	*rn = arg;

	log_debug("rt_holddown_timer: route %s/%d", inet_ntoa(rn->prefix),
	    rn->prefixlen);

	rt_remove(rn);
}

void
rt_start_holddown_timer(struct rt_node *rn)
{
	struct timeval	tv;

	timerclear(&tv);
	tv.tv_sec = ROUTE_HOLD_DOWN;
	if (evtimer_pending(&rn->expiration_timer, NULL)) {
		if (evtimer_del(&rn->expiration_timer) == -1)
			fatal("rt_start_holddown_timer");
		evtimer_add(&rn->holddown_timer, &tv);
	}
}

/* route table */
void
rt_init(void)
{
	RB_INIT(&rt);
}

int
rt_compare(struct rt_node *a, struct rt_node *b)
{
	/*
	 * sort route entries based on prefixlen since generating route
	 * reports rely on that.
	 */
	if (a->prefixlen < b->prefixlen)
		return (-1);
	if (a->prefixlen > b->prefixlen)
		return (1);
	if (ntohl(a->prefix.s_addr) < ntohl(b->prefix.s_addr))
		return (-1);
	if (ntohl(a->prefix.s_addr) > ntohl(b->prefix.s_addr))
		return (1);
	return (0);
}

struct rt_node *
rt_find(in_addr_t prefix, u_int8_t prefixlen)
{
	struct rt_node	s;

	s.prefix.s_addr = prefix;
	s.prefixlen = prefixlen;

	return (RB_FIND(rt_tree, &rt, &s));
}

struct rt_node *
rr_new_rt(struct route_report *rr, u_int32_t adj_metric, int connected)
{
	struct timespec	 now;
	struct rt_node  *rn;
	int i;

	clock_gettime(CLOCK_MONOTONIC, &now);

	if ((rn = calloc(1, sizeof(*rn))) == NULL)
		fatal("rr_new_rt");

	rn->prefix.s_addr = rr->net.s_addr;
	rn->prefixlen = mask2prefixlen(rr->mask.s_addr);
	rn->nexthop.s_addr = rr->nexthop.s_addr;
	rn->cost = adj_metric;
	rn->ifindex = rr->ifindex;

	for (i = 0; i < MAXVIFS; i++) {
		rn->ttls[i] = 0;
		rn->ds_cnt[i] = 0;
		rn->adv_rtr[i].addr.s_addr = 0;
		rn->adv_rtr[i].metric = 0;
	}

	LIST_INIT(&rn->ds_list);

	rn->flags = F_DVMRPD_INSERTED;
	rn->connected = connected;
	rn->uptime = now.tv_sec;

	evtimer_set(&rn->expiration_timer, rt_expire_timer, rn);
	evtimer_set(&rn->holddown_timer, rt_holddown_timer, rn);

	return (rn);
}

int
rt_insert(struct rt_node *r)
{
	log_debug("rt_insert: inserting route %s/%d", inet_ntoa(r->prefix),
	    r->prefixlen);

	if (RB_INSERT(rt_tree, &rt, r) != NULL) {
		log_warnx("rt_insert failed for %s/%u", inet_ntoa(r->prefix),
		    r->prefixlen);
		free(r);
		return (-1);
	}

	return (0);
}

int
rt_remove(struct rt_node *r)
{
	struct ds_nbr	*ds_nbr;

	if (RB_REMOVE(rt_tree, &rt, r) == NULL) {
		log_warnx("rt_remove failed for %s/%u",
		    inet_ntoa(r->prefix), r->prefixlen);
		return (-1);
	}

	while ((ds_nbr = LIST_FIRST(&r->ds_list)) != NULL) {
		LIST_REMOVE(ds_nbr, entry);
		free(ds_nbr);
	}

	free(r);
	return (0);
}

void
rt_invalidate(void)
{
	struct rt_node	*r, *nr;

	for (r = RB_MIN(rt_tree, &rt); r != NULL; r = nr) {
		nr = RB_NEXT(rt_tree, &rt, r);
		if (r->invalid)
			rt_remove(r);
		else
			r->invalid = 1;
	}
}

void
rt_clear(void)
{
	struct rt_node	*r;

	while ((r = RB_MIN(rt_tree, &rt)) != NULL)
		rt_remove(r);
}

void
rt_snap(u_int32_t peerid)
{
	struct rt_node		*r;
	struct route_report	 rr;

	RB_FOREACH(r, rt_tree, &rt) {
		if (r->invalid)
			continue;

		rr.net = r->prefix;
		rr.mask.s_addr = ntohl(prefixlen2mask(r->prefixlen));
		rr.metric = r->cost;
		rr.ifindex = r->ifindex;
		rde_imsg_compose_dvmrpe(IMSG_FULL_ROUTE_REPORT, peerid, 0, &rr,
		    sizeof(rr));
	}
}

void
rt_dump(pid_t pid)
{
	static struct ctl_rt	 rtctl;
	struct timespec		 now;
	struct timeval		 tv, now2, res;
	struct rt_node		*r;

	clock_gettime(CLOCK_MONOTONIC, &now);

	RB_FOREACH(r, rt_tree, &rt) {
		if (r->invalid)
			continue;

		rtctl.prefix.s_addr = r->prefix.s_addr;
		rtctl.nexthop.s_addr = r->nexthop.s_addr;
		rtctl.cost = r->cost;
		rtctl.flags = r->flags;
		rtctl.prefixlen = r->prefixlen;
		rtctl.uptime = now.tv_sec - r->uptime;

		gettimeofday(&now2, NULL);
		if (evtimer_pending(&r->expiration_timer, &tv)) {
			timersub(&tv, &now2, &res);
			rtctl.expire = res.tv_sec;
		} else
			rtctl.expire = -1;

		rde_imsg_compose_dvmrpe(IMSG_CTL_SHOW_RIB, 0, pid, &rtctl,
		    sizeof(rtctl));
	}
}

void
rt_update(struct rt_node *rn)
{
	if (!rn->connected)
		rt_start_expire_timer(rn);
}

struct rt_node *
rt_match_origin(in_addr_t src)
{
	struct rt_node	*r;

	RB_FOREACH(r, rt_tree, &rt) {
		if (r->prefix.s_addr == (src &
		    htonl(prefixlen2mask(r->prefixlen))))
			return (r);
	}

	return (NULL);
}

int
srt_check_route(struct route_report *rr, int connected)
{
	struct rt_node		*rn;
	struct iface		*iface;
	struct ds_nbr		*ds_nbr;
	u_int32_t		 adj_metric;
	u_int32_t		 nbr_ip, nbr_report, ifindex;

	if ((iface = if_find_index(rr->ifindex)) == NULL)
		return (-1);

	ifindex = iface->ifindex;

	/* Interpret special case 0.0.0.0/8 as 0.0.0.0/0 */
	if (rr->net.s_addr == 0)
		rr->mask.s_addr = 0;

	if (connected)
		adj_metric = rr->metric;
	else
		adj_metric = rr->metric + iface->metric;

	if (adj_metric > INFINITY_METRIC)
		adj_metric = INFINITY_METRIC;

	/* If the route is new and the Adjusted Metric is less than infinity,
	   the route should be added. */
	rn = rt_find(rr->net.s_addr, mask2prefixlen(rr->mask.s_addr));
	if (rn == NULL) {
		if (adj_metric < INFINITY_METRIC) {
			rn = rr_new_rt(rr, adj_metric, connected);
			rt_insert(rn);
		}
		return (0);
	}

	/* If the route is connected accept only downstream neighbors reports */
	if (rn->connected && rr->metric <= INFINITY_METRIC)
		return (0);

	nbr_ip = rn->nexthop.s_addr;
	nbr_report = rr->nexthop.s_addr;

	if (rr->metric < INFINITY_METRIC) {
		/* If it is our current nexthop it cannot be a
		 * downstream router */
		if (nbr_ip != nbr_report)
			if ((ds_nbr = srt_find_ds(rn, nbr_report)))
				srt_delete_ds(rn, ds_nbr, iface);

		if (adj_metric > rn->cost) {
			if (nbr_ip == nbr_report) {
				rn->cost = adj_metric;
				flash_update_ds(rn);
			}
		} else if (adj_metric < rn->cost) {
			rn->cost = adj_metric;
			if (nbr_ip != nbr_report) {
				rn->nexthop.s_addr = nbr_report;
				srt_set_upstream(rn, ifindex);
				flash_update(rn);
			}
			/* We have a new best route to source, update the
			 * designated forwarders on downstream interfaces to
			 * reflect the new metric */
			srt_update_ds_forwarders(rn, iface, nbr_report);
		} else {
			if (nbr_report < nbr_ip) {
				rn->nexthop.s_addr = nbr_report;
				srt_set_upstream(rn, ifindex);
				flash_update(rn);
			} else if (nbr_report == nbr_ip &&
			    adj_metric == rn->old_cost)
				rt_update(rn);
				flash_update_ds(rn);
		}
		/* Update forwarder of current interface if necessary and
		 * refresh the route */
		srt_current_forwarder(rn, iface, rr->metric, nbr_report);
		rt_update(rn);
	} else if (rr->metric == INFINITY_METRIC) {
		if (nbr_report == rn->adv_rtr[ifindex].addr.s_addr)
			srt_set_forwarder_self(rn, iface);
infinity:
		if (nbr_ip == nbr_report) {
			if (rn->cost < INFINITY_METRIC)
				rt_start_holddown_timer(rn);
		} else
			if ((ds_nbr = srt_find_ds(rn, nbr_report)))
				srt_delete_ds(rn, ds_nbr, iface);
	} else if (INFINITY_METRIC < rr->metric &&
	    rr->metric < 2 * INFINITY_METRIC) {
		/* Neighbor is reporting his dependency for this source */
		if (nbr_report == rn->adv_rtr[ifindex].addr.s_addr)
			srt_set_forwarder_self(rn, iface);

		if (rn->ifindex == ifindex)
			goto infinity;
		else
			if (srt_find_ds(rn, nbr_report) == NULL)
				srt_add_ds(rn, nbr_report, ifindex);
	}

	return (0);
}

void
srt_current_forwarder(struct rt_node *rn, struct iface *iface,
    u_int32_t metric, u_int32_t nbr_report)
{
	struct adv_rtr *adv = &rn->adv_rtr[iface->ifindex];

	if (nbr_report == adv->addr.s_addr) {
		if (metric > rn->cost || (metric == rn->cost &&
		    iface->addr.s_addr < nbr_report))
			srt_set_forwarder_self(rn, iface);

	} else {
		if (metric < adv->metric ||
		    (metric == adv->metric && nbr_report < adv->addr.s_addr))
			if (adv->addr.s_addr == iface->addr.s_addr)
				rn->ttls[iface->ifindex] = 0;

		adv->addr.s_addr = nbr_report;
		adv->metric = metric;

		mfc_update_source(rn);
	}

}

void
srt_update_ds_forwarders(struct rt_node *rn, struct iface *iface,
    u_int32_t nbr_report)
{
	struct iface	*ifa;
	int		 i;

	for (i = 0; i < MAXVIFS; i++) {
		if (rn->adv_rtr[i].addr.s_addr &&
		    (rn->cost < rn->adv_rtr[i].metric ||
		    (rn->cost == rn->adv_rtr[i].metric &&
		    iface->addr.s_addr < nbr_report))) {
			ifa = if_find_index(i);
			srt_set_forwarder_self(rn, ifa);
		}
	}
}

void
srt_set_forwarder_self(struct rt_node *rn, struct iface *iface)
{
	rn->adv_rtr[iface->ifindex].addr.s_addr = iface->addr.s_addr;
	rn->adv_rtr[iface->ifindex].metric = rn->cost;
	rn->ttls[iface->ifindex] = 1;

	mfc_update_source(rn);
}

void
srt_set_upstream(struct rt_node *rn, u_int32_t ifindex)
{
	if (rn->ifindex != ifindex) {
		rn->ttls[rn->ifindex] = 1;
		rn->ifindex = ifindex;
	}

	mfc_update_source(rn);
}

void
srt_add_ds(struct rt_node *rn, u_int32_t nbr_report, u_int32_t ifindex)
{
	struct ds_nbr	*ds_nbr;

	log_debug("srt_add_ds: adding downstream router for source %s/%d",
	    inet_ntoa(rn->prefix), rn->prefixlen);

	if ((ds_nbr = malloc(sizeof(struct ds_nbr))) == NULL)
		fatal("srt_add_ds");

	ds_nbr->addr.s_addr = nbr_report;

	LIST_INSERT_HEAD(&rn->ds_list, ds_nbr, entry);
	rn->ds_cnt[ifindex]++;
	rn->ttls[ifindex] = 1;

	mfc_update_source(rn);
}

struct ds_nbr *
srt_find_ds(struct rt_node *rn, u_int32_t nbr_report)
{
	struct ds_nbr	*ds_nbr;

	LIST_FOREACH(ds_nbr, &rn->ds_list, entry)
		if (ds_nbr->addr.s_addr == nbr_report)
			return (ds_nbr);

	return (NULL);
}

void
srt_delete_ds(struct rt_node *rn, struct ds_nbr *ds_nbr, struct iface *iface)
{
	log_debug("srt_delete_ds: deleting downstream router for source %s/%d",
	    inet_ntoa(rn->prefix), rn->prefixlen);

	LIST_REMOVE(ds_nbr, entry);
	free(ds_nbr);
	rn->ds_cnt[iface->ifindex]--;

	srt_check_downstream_ifaces(rn, iface);
}

void
srt_check_downstream_ifaces(struct rt_node *rn, struct iface *iface)
{
	/* We are not the designated forwarder for this source on this
	   interface. Keep things as they currently are */
	if (rn->adv_rtr[iface->ifindex].addr.s_addr != iface->addr.s_addr)
		return;

	/* There are still downstream dependent router for this source
	   Keep things as they currently are */
	if (rn->ds_cnt[iface->ifindex])
		return;

	/* There are still group members for this source on this iface
	   Keep things as they currently are */
	if (mfc_check_members(rn, iface))
		return;

	/* Remove interface from the downstream list */
	rn->ttls[iface->ifindex] = 0;
	mfc_update_source(rn);
}

void
srt_expire_nbr(struct in_addr addr, unsigned int ifindex)
{
	struct ds_nbr		*ds;
	struct rt_node		*rn;
	struct iface		*iface;

	iface = if_find_index(ifindex);
	if (iface == NULL)
		fatal("srt_expire_nbr: interface not found");

	RB_FOREACH(rn, rt_tree, &rt) {
		if (rn->adv_rtr[ifindex].addr.s_addr == addr.s_addr) {
			rn->adv_rtr[ifindex].addr.s_addr =
			    iface->addr.s_addr;
			rn->adv_rtr[ifindex].metric = rn->cost;
			/* XXX: delete all routes learned from this nbr */
		} else if (rn->adv_rtr[ifindex].addr.s_addr ==
		    iface->addr.s_addr) {
			ds = srt_find_ds(rn, addr.s_addr);
			if (ds) {
				srt_delete_ds(rn, ds, iface);
				srt_check_downstream_ifaces(rn, iface);
			}
		}
	}
}

void
flash_update(struct rt_node *rn) {
	struct route_report	rr;

	rr.net = rn->prefix;
	rr.mask.s_addr = ntohl(prefixlen2mask(rn->prefixlen));
	rr.metric = rn->cost;
	rr.ifindex = rn->ifindex;
	rde_imsg_compose_dvmrpe(IMSG_FLASH_UPDATE, 0, 0, &rr, sizeof(rr));
}

void
flash_update_ds(struct rt_node *rn) {
	struct route_report	rr;

	rr.net = rn->prefix;
	rr.mask.s_addr = ntohl(prefixlen2mask(rn->prefixlen));
	rr.metric = rn->cost;
	rr.ifindex = rn->ifindex;
	rde_imsg_compose_dvmrpe(IMSG_FLASH_UPDATE_DS, 0, 0, &rr, sizeof(rr));
}
@


1.25
log
@remove trailing spaces and tabs from source code; no binary changes
(verified by both sthen@@ and me).

ok sthen@@; "just commit it" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.24 2009/09/06 09:52:14 michele Exp $ */
d228 1
a228 1
	LIST_FOREACH(ds_nbr, &r->ds_list, entry) {
@


1.24
log
@When dvmrpd receives a prune, it must checks if every downstream member
on that interfaces has already sent prunes. If so (and there are no local groups) removes the interface from the downstream list.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.23 2009/05/20 16:10:04 michele Exp $ */
d379 1
a379 1
		 * downstream router */ 
@


1.23
log
@Whitespaces cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.22 2009/04/16 20:11:12 michele Exp $ */
a54 1
struct ds_nbr	*srt_find_ds(struct rt_node *, u_int32_t);
@


1.22
log
@Notify the rde when a neighbor goes down.
When this happens we have to rebuild the list of downstream
interfaces.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.21 2009/04/16 17:59:07 michele Exp $ */
d60 2
a61 2
void		 flash_update(struct rt_node *); 
void		 flash_update_ds(struct rt_node *); 
@


1.21
log
@Update kernel forwarding informations when a neighbor reports we are
its nexthop to a particular multicast source.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.20 2009/04/11 09:36:35 michele Exp $ */
d574 1
a574 1
srt_expire_nbr(struct in_addr addr, struct iface *iface)
d578 5
a582 1
	u_int32_t		 ifindex = iface->ifindex;
d593 1
a593 1
			if (ds)
d595 2
@


1.20
log
@Show debug informations when a route is added and when a downstream router
is added/deleted.

Fix endianess issue in rt_match_origin().

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.19 2009/03/14 15:32:55 michele Exp $ */
d521 2
@


1.19
log
@Initial support for pruning. When every single interface is removed from the
downstream list for a particular source send a prune to the upstream router.

input and ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.18 2009/03/06 18:39:13 michele Exp $ */
d205 3
d325 3
a327 2
	RB_FOREACH(r, rt_tree, &rt)
		if (r->prefix.s_addr == (src & prefixlen2mask(r->prefixlen)))
d329 1
d510 3
d538 3
@


1.18
log
@Make RDE aware of multicast group members per interface. This is needed to
make unicast routing decisions.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.17 2009/02/03 16:21:19 michele Exp $ */
d4 1
d317 12
d534 6
d552 1
a552 1
	if (!mfc_check_members(rn, iface))
@


1.17
log
@Correctly update kernel and mfc when change in routing table happens.

ok norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.16 2009/01/25 15:24:21 michele Exp $ */
d521 18
a538 3
	/* XXX */
	if (!rn->ds_cnt[iface->ifindex])
		rn->ttls[iface->ifindex] = 0;
d546 1
d549 11
a559 3
		ds = srt_find_ds(rn, addr.s_addr);
		if (ds)
			srt_delete_ds(rn, ds, iface);
@


1.16
log
@Add missing evtimer_set on route hold down timer.

ok norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.15 2009/01/20 01:35:34 todd Exp $ */
d442 2
a445 1
	/* XXX: update the kernel */
a463 2

	/* XXX: update the kernel */
d473 1
a473 1
	/* XXX: update the kernel */
d483 2
d521 2
a522 2
	/* XXX: check if there are group with this source */
	if (!rn->ds_cnt[iface->ifindex] && group_list_empty(iface))
@


1.15
log
@revert earlier commit that broke the tree
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.14 2009/01/19 20:52:09 michele Exp $ */
d196 1
d533 1
a533 1
		if (ds)	
@


1.14
log
@Cleanup the functions related to the election of the designated
forwarder.

ok norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.13 2009/01/19 20:40:31 michele Exp $ */
a3 1
 * Copyright (c) 2009 Michele Marchetto <michele@@openbsd.org>
a161 12
}

struct rt_node *
rt_matchorigin(in_addr_t src)
{
	struct rt_node	*r;

	RB_FOREACH(r, rt_tree, &rt)
		if (r->prefix.s_addr == (src & prefixlen2mask(r->prefixlen)))
			return (r);

	return (NULL);
@


1.13
log
@When inserting a new route into the kernel set as
downstream interfaces the ones with neighbors or
group members.

ok norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.12 2008/12/07 16:37:04 michele Exp $ */
d439 3
a441 2
	/* If it is our designated forwarder */ 
	if (nbr_report == rn->adv_rtr[iface->ifindex].addr.s_addr) {
d443 8
a450 15
		    iface->addr.s_addr < nbr_report)) {
			rn->adv_rtr[iface->ifindex].addr.s_addr =
			    iface->addr.s_addr;
			rn->adv_rtr[iface->ifindex].metric = rn->cost;

			/* XXX: check if there are groups with this source */
			if (group_list_empty(iface))
				rn->ttls[iface->ifindex] = 1;
		}
	} else if (metric < rn->adv_rtr[iface->ifindex].metric ||
	    (metric == rn->adv_rtr[iface->ifindex].metric &&
	    nbr_report < rn->adv_rtr[iface->ifindex].addr.s_addr)) {
		if (rn->adv_rtr[iface->ifindex].addr.s_addr ==
		    iface->addr.s_addr && !rn->ds_cnt[iface->ifindex])
			rn->ttls[iface->ifindex] = 0;
d452 2
a453 2
		rn->adv_rtr[iface->ifindex].addr.s_addr = nbr_report;
		rn->adv_rtr[iface->ifindex].metric = metric;
d455 2
d475 2
d484 1
d486 1
a486 3
	/* XXX: check if there are groups with this source */
	if (group_list_empty(iface))
		rn->ttls[iface->ifindex] = 1;
@


1.12
log
@Kill src_node structure. It is mostly redundant with rt_node and
adds unneeded complexity. Move any stuff to rt_node structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.11 2008/12/02 13:42:44 michele Exp $ */
d4 1
d163 12
@


1.11
log
@Initial support for neighbor expiry.
When a nbr goes down delete it from the lists of
downstream dependent neighbors.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.10 2008/11/24 21:55:52 michele Exp $ */
d46 10
a55 12
void	 srt_set_forwarder_self(struct src_node *, struct iface *,
	    struct rt_node *);
void	 srt_update_ds_forwarders(struct src_node *, struct rt_node *,
	    struct iface *, u_int32_t);
void	 srt_current_forwarder(struct src_node *, struct rt_node *,
	    struct iface *, u_int32_t, u_int32_t);

/* Downstrean neighbor */
void		 srt_add_ds(struct src_node *, struct rt_node *, u_int32_t,
		    u_int32_t);
struct ds	*srt_find_ds(struct src_node *, u_int32_t);
void		 srt_delete_ds(struct src_node *, struct rt_node *, struct ds *,
a56 3
struct src_node	*srt_find_src(in_addr_t, in_addr_t);
struct src_node	*srt_add_src(struct in_addr, struct in_addr, u_int32_t);
void		 srt_delete_src(struct src_node *);
a65 2
RB_GENERATE(src_head, src_node, entry, src_compare);

a106 1
	struct src_node	*src;
a110 4
	/* remove route entry */
	src = srt_find_src(rn->prefix.s_addr, prefixlen2mask(rn->prefixlen));
	srt_delete_src(src);

a152 14
int
src_compare(struct src_node *a, struct src_node *b)
{
	if (ntohl(a->origin.s_addr) < ntohl(b->origin.s_addr))
		return (-1);
	if (ntohl(a->origin.s_addr) > ntohl(b->origin.s_addr))
		return (1);
	if (ntohl(a->mask.s_addr) < ntohl(b->mask.s_addr))
		return (-1);
	if (ntohl(a->mask.s_addr) > ntohl(b->mask.s_addr))
		return (1);
	return (0);
}

d182 1
a182 1
	for (i = 0; i < MAXVIFS; i++)
d184 6
d216 2
d224 5
d320 1
a320 2
	struct src_node		*src;
	struct ds		*ds_nbr;
a347 1
			src = srt_add_src(rr->net, rr->mask, adj_metric);
a358 3
	if ((src = srt_find_src(rr->net.s_addr, rr->mask.s_addr)) == NULL)
		fatal("srt_check_route");

d363 2
a364 2
			if ((ds_nbr = srt_find_ds(src, nbr_report)))
				srt_delete_ds(src, rn, ds_nbr, iface);
d381 1
a381 1
			srt_update_ds_forwarders(src, rn, iface, nbr_report);
d394 1
a394 1
		srt_current_forwarder(src, rn, iface, rr->metric, nbr_report);
d397 2
a398 2
		if (nbr_report == src->adv_rtr[ifindex].addr.s_addr)
			srt_set_forwarder_self(src, iface, rn);
d404 2
a405 2
			if ((ds_nbr = srt_find_ds(src, nbr_report)))
				srt_delete_ds(src, rn, ds_nbr, iface);
d409 2
a410 2
		if (nbr_report == src->adv_rtr[ifindex].addr.s_addr)
			srt_set_forwarder_self(src, iface, rn);
d415 2
a416 2
			if (srt_find_ds(src, nbr_report) == NULL)
				srt_add_ds(src, rn, nbr_report, ifindex);
d423 2
a424 2
srt_current_forwarder(struct src_node *src_node, struct rt_node *rn,
    struct iface *iface, u_int32_t metric, u_int32_t nbr_report)
d427 1
a427 1
	if (nbr_report == src_node->adv_rtr[iface->ifindex].addr.s_addr) {
d430 1
a430 1
			src_node->adv_rtr[iface->ifindex].addr.s_addr =
d432 1
a432 1
			src_node->adv_rtr[iface->ifindex].metric = rn->cost;
d438 5
a442 5
	} else if (metric < src_node->adv_rtr[iface->ifindex].metric ||
	    (metric == src_node->adv_rtr[iface->ifindex].metric &&
	    nbr_report < src_node->adv_rtr[iface->ifindex].addr.s_addr)) {
		if (src_node->adv_rtr[iface->ifindex].addr.s_addr ==
		    iface->addr.s_addr && !src_node->ds_cnt[iface->ifindex])
d445 2
a446 2
		src_node->adv_rtr[iface->ifindex].addr.s_addr = nbr_report;
		src_node->adv_rtr[iface->ifindex].metric = metric;
d451 2
a452 2
srt_update_ds_forwarders(struct src_node *src_node, struct rt_node *rn,
    struct iface *iface, u_int32_t nbr_report)
d458 3
a460 3
		if (src_node->adv_rtr[i].addr.s_addr &&
		    (rn->cost < src_node->adv_rtr[i].metric ||
		    (rn->cost == src_node->adv_rtr[i].metric &&
d463 1
a463 1
			srt_set_forwarder_self(src_node, ifa, rn);
d469 1
a469 2
srt_set_forwarder_self(struct src_node *src, struct iface *iface,
    struct rt_node *rn)
d471 2
a472 2
	src->adv_rtr[iface->ifindex].addr.s_addr = iface->addr.s_addr;
	src->adv_rtr[iface->ifindex].metric = rn->cost;
d489 1
a489 2
srt_add_ds(struct src_node *src_node, struct rt_node *rn, u_int32_t nbr_report,
    u_int32_t ifindex)
d491 1
a491 1
	struct ds	*ds_nbr;
d493 1
a493 1
	if ((ds_nbr = malloc(sizeof(struct ds))) == NULL)
d498 2
a499 2
	LIST_INSERT_HEAD(&src_node->ds_list, ds_nbr, entry);
	src_node->ds_cnt[ifindex]++;
d503 2
a504 2
struct ds *
srt_find_ds(struct src_node *src_node, u_int32_t nbr_report)
d506 1
a506 1
	struct ds	*ds_nbr;
d508 1
a508 1
	LIST_FOREACH(ds_nbr, &src_node->ds_list, entry)
d516 1
a516 2
srt_delete_ds(struct src_node *src_node, struct rt_node *rn, struct ds *ds_nbr,
    struct iface *iface)
d520 1
a520 1
	src_node->ds_cnt[iface->ifindex]--;
d523 1
a523 1
	if (!src_node->ds_cnt[iface->ifindex] && group_list_empty(iface))
a526 60
struct src_node *
srt_find_src(in_addr_t net, in_addr_t mask)
{
	struct src_node		*src_node;

	RB_FOREACH(src_node, src_head, &rdeconf->src_list)
		if (src_node->origin.s_addr == net &&
		    src_node->mask.s_addr == mask)
			return (src_node);

	return (NULL);
}

struct src_node *
srt_add_src(struct in_addr net, struct in_addr mask, u_int32_t adj_metric)
{
	struct src_node		*src_node;
	struct iface		*iface;
	u_int32_t		 i;

	if ((src_node = malloc(sizeof(struct src_node))) == NULL)
		fatal("srt_add_src");

	src_node->origin.s_addr = net.s_addr;
	src_node->mask.s_addr = mask.s_addr;

	for (i = 0; i < MAXVIFS; i++) {
		bzero(&src_node->adv_rtr[i], sizeof(struct adv_rtr));
		src_node->ds_cnt[i] = 0;
	}

	LIST_FOREACH(iface, &rdeconf->iface_list, entry) {
		src_node->adv_rtr[iface->ifindex].addr.s_addr =
		    iface->addr.s_addr;
		src_node->adv_rtr[iface->ifindex].metric = adj_metric;
	}

	LIST_INIT(&src_node->ds_list);
	RB_INSERT(src_head, &rdeconf->src_list, src_node);

	return (src_node);
}

void
srt_delete_src(struct src_node *src_node)
{
	struct ds	*ds_nbr;

	if (src_node == NULL)
		return;

	LIST_FOREACH(ds_nbr, &src_node->ds_list, entry) {
		LIST_REMOVE(ds_nbr, entry);
		free(ds_nbr);
	}

	RB_REMOVE(src_head, &rdeconf->src_list, src_node);
	free(src_node);
}

d530 1
a530 2
	struct src_node		*src_node;
	struct ds		*ds;
d533 2
a534 6
	RB_FOREACH(src_node, src_head, &rdeconf->src_list) {
		rn = rt_find(src_node->origin.s_addr,
		    mask2prefixlen(src_node->mask.s_addr));
		if (rn == NULL)
			fatalx("srt_expires_nbr: route not found");
		ds = srt_find_ds(src_node, addr.s_addr);
d536 1
a536 1
			srt_delete_ds(src_node, rn, ds, iface);
@


1.10
log
@Introduce support for route hold down.
When a route is deleted we must continue advertising it with
a metric of infinity to avoid routing loops.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.9 2008/11/21 10:39:32 michele Exp $ */
d606 18
@


1.9
log
@Introduce support for flash updates.
They spread routing changes immediately as they happen
avoiding wait until the next report interval.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.8 2008/10/21 20:20:00 michele Exp $ */
d40 2
d59 1
a59 1
struct src_node	*srt_find_src(struct in_addr, struct in_addr);
d80 1
d85 4
a88 1
	/* XXX tell neighbors */
d90 2
a91 3
	/* remove route entry */
	event_del(&rn->expiration_timer);
	rt_remove(rn);
d99 6
d108 14
d123 15
d374 1
a374 1
	if ((src = srt_find_src(rr->net, rr->mask)) == NULL)
d405 4
a408 1
			}
d419 2
a420 4
			if (rn->cost < INFINITY_METRIC) {
				rt_remove(rn);
				srt_delete_src(src);
			}
d549 1
a549 1
srt_find_src(struct in_addr net, struct in_addr mask)
d554 2
a555 2
		if (src_node->origin.s_addr == net.s_addr &&
		    src_node->mask.s_addr == mask.s_addr)
d595 3
@


1.8
log
@Code cleanup. No functional change.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.7 2007/04/10 09:37:25 michele Exp $ */
d51 1
d61 4
d345 1
a345 1
			if (nbr_ip == nbr_report)
d347 2
d354 1
d364 1
d562 22
@


1.7
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.6 2007/03/27 09:04:33 michele Exp $ */
d57 1
a57 1
struct src_node	*srt_add_src(struct in_addr, struct in_addr);
d146 1
a146 1
rr_new_rt(struct route_report *rr, int adj_metric, int connected)
d312 2
a313 2
	if ((rn = rt_find(rr->net.s_addr, mask2prefixlen(rr->mask.s_addr)))
	    == NULL) {
d317 1
a317 1
			src = srt_add_src(rr->net, rr->mask);
d394 1
d423 1
a423 1
	int	i;
d431 1
a431 6
			src_node->adv_rtr[i].metric = rn->cost;
			src_node->adv_rtr[i].addr.s_addr = iface->addr.s_addr;

			/* XXX: check if there are groups with this source */
			if (group_list_empty(ifa))
				rn->ttls[i] = 1;
d512 1
a512 1
srt_add_src(struct in_addr net, struct in_addr mask)
d529 5
a533 7
	LIST_FOREACH(iface, &rdeconf->iface_list, entry)
		for (i = 0; i < MAXVIFS; i++)
			if (iface->ifindex == i) {
				src_node->adv_rtr[i].addr.s_addr =
				    iface->addr.s_addr;
				break;
			}
@


1.6
log
@Correctly handle connected routes in srt_check_route()

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.5 2007/03/26 10:11:10 michele Exp $ */
d58 1
a58 1
void		 srt_delete_src(struct src_node *); 
d410 1
a410 1
			rn->ttls[iface->ifindex] = 0; 
d414 1
a414 1
	}	
d455 1
a455 1
	if (rn->ifindex != ifindex) {	
d472 1
a472 1
	LIST_INSERT_HEAD(&src_node->ds_list, ds_nbr, entry); 
d486 1
a486 1
	return (NULL);	
d558 1
a558 1
	free(src_node); 
@


1.5
log
@Route report packets with metric greater than infinity are legal, so don't
drop them.
Small typo.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.4 2007/03/21 19:33:48 michele Exp $ */
d302 4
a305 1
	adj_metric = rr->metric + iface->metric;
d321 4
@


1.4
log
@Added code to parse unicast routes learned from route report packets.
Now we are able to select correctly designated forwarders and downstream
dependent routers per interface.

Tested and OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.3 2007/01/29 13:38:59 michele Exp $ */
a303 3
	if (rr->metric >= INFINITY_METRIC)
		return (0);

d369 1
a369 1
		/* Neighbor is reporting his depenency for that source */
@


1.3
log
@Introduce new checks against the received metric to update or delete the route.

OK norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.2 2006/12/03 20:14:37 michele Exp $ */
d26 1
d41 19
d64 2
d120 14
d150 1
d162 4
a258 1
		rtctl.adv_rtr.s_addr = r->adv_rtr.s_addr;
d284 1
a284 1
rde_check_route(struct route_report *rr, int connected)
d288 2
d291 1
a291 1
	u_int32_t		 nbr_ip, nbr_report;
d296 2
d317 1
d322 5
a326 2
	nbr_ip = rr->nexthop.s_addr;
	nbr_report = rn->nexthop.s_addr;
d329 9
a337 4
		if (adj_metric > rn->cost) {	
			if (nbr_ip == nbr_report) {
				rn->cost = adj_metric;	
			}
d340 1
a340 1
			if (nbr_ip != nbr_report)
d342 6
d349 1
a349 1
			if (nbr_report < nbr_ip)
d351 2
d354 3
d359 3
d363 7
a369 2
			rt_remove(rn);
		}
d372 9
a380 1
		/* XXX */
d384 171
@


1.2
log
@introduce rde_check_route that selects which routes must be accepted and which discarded.
Still not complete, just a step forward.

ok norby@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rde_srt.c,v 1.1 2006/06/01 14:12:20 norby Exp $ */
d249 1
d260 8
d270 5
a274 2
		rn = rr_new_rt(rr, adj_metric, connected);
		rt_insert(rn);
d277 25
a301 1
	rt_update(rn);
@


1.1
log
@Welcome dvmrpd
started by Esben Norby some time ago by using the imsg/three process framework
of ospfd.
Right now it is not particularly useful, major parts are still missing but is
imported to allow more people to work on it.

Status:

The IGMP part is mostly complete, allowing clients to join and leave groups.
Election the IGMP querier of a network is also functional, only thing missing is
some corner cases when going from non-querier to querier.

About half of the DVMRP is functional, probes and route reports are functional.

Multicast streams can be detected and the MFC can be manipulated.
The RIB is not complete but operational.

Not yet connected to the builds.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a29 1
#include "rde.h"
d32 1
d109 25
d237 8
a244 3
rt_update(struct in_addr prefix, u_int8_t prefixlen, struct in_addr nexthop,
    u_int32_t cost, struct in_addr adv_rtr, u_short ifindex, u_int8_t flags,
    u_int8_t connected)
d246 3
a248 2
	struct timespec	 now;
	struct rt_node	*rte;
d250 2
a251 1
	clock_gettime(CLOCK_MONOTONIC, &now);
d253 10
a262 24
	if ((rte = rt_find(prefix.s_addr, prefixlen)) == NULL) {
		if ((rte = calloc(1, sizeof(struct rt_node))) == NULL)
			fatalx("rt_update");
		rte->prefix.s_addr = prefix.s_addr;
		rte->prefixlen = prefixlen;
		rte->nexthop.s_addr = nexthop.s_addr;
		rte->adv_rtr.s_addr = adv_rtr.s_addr;
		rte->cost = cost;
		rte->ifindex = ifindex;
		rte->flags = flags;
		rte->invalid = 0;
		rte->connected = connected;
		rte->uptime = now.tv_sec;

		rt_insert(rte);

		evtimer_set(&rte->expiration_timer, rt_expire_timer, rte);

		if (!rte->connected)
			rt_start_expire_timer(rte);

	} else {
		if (!rte->connected)
			rt_start_expire_timer(rte);
d264 4
@

