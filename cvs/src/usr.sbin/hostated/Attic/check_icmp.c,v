head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2007.01.09.00.44.37;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.03.09.45.29;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.25.19.05.41;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.25.18.12.14;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.16.11.59.12;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rename to hoststate{d,ctl}, using a repository copy
as discussed with reyk
@
text
@/*	$OpenBSD: check_icmp.c,v 1.7 2007/01/08 20:46:18 reyk Exp $	*/

/*
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@spootnik.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/icmp6.h>
#include <net/if.h>
#include <arpa/inet.h>
#include <limits.h>
#include <event.h>
#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

#include "hostated.h"

int	icmp6_checks_done(struct ctl_icmp_event *);
int	icmp4_checks_done(struct ctl_icmp_event *);
void	send_icmp6(struct ctl_icmp_event *, struct host *);
void	send_icmp4(struct ctl_icmp_event *, struct host *);
void	recv_icmp6(int, short, void *);
void	recv_icmp4(int, short, void *);
int	in_cksum(u_short *, int);

void
schedule_icmp(struct ctl_icmp_event *cie, struct table *table)
{
	struct host	*host;

	TAILQ_FOREACH(host, &table->hosts, entry) {
		if (host->flags & F_DISABLE)
			continue;
		host->last_up = host->up;
		host->flags &= ~F_CHECK_DONE;
		if (((struct sockaddr *)&host->ss)->sa_family == AF_INET) {
			send_icmp4(cie, host);
		} else {
			send_icmp6(cie, host);
		}
	}
}

void
check_icmp(struct ctl_icmp_event *cie)
{
	struct timeval	tv;

	if (gettimeofday(&cie->tv_start, NULL))
		fatal("check_icmp: gettimeofday");
	bcopy(&cie->env->timeout, &tv, sizeof(tv));
	if (cie->has_icmp4)
		event_once(cie->icmp_sock, EV_READ|EV_TIMEOUT,
		    recv_icmp4, cie, &tv);
	if (cie->has_icmp6)
		event_once(cie->icmp6_sock, EV_READ|EV_TIMEOUT,
		    recv_icmp6, cie, &tv);
}

int
icmp6_checks_done(struct ctl_icmp_event *cie)
{
	struct table	*table;
	struct host	*host;

	TAILQ_FOREACH(table, &cie->env->tables, entry) {
		if (table->flags & F_DISABLE || table->check != CHECK_ICMP)
			continue;
		TAILQ_FOREACH(host, &table->hosts, entry) {
			if (((struct sockaddr *)&host->ss)->sa_family !=
			    AF_INET6)
				continue;
			if (!(host->flags & F_CHECK_DONE))
				return (0);
		}
	}
	return (1);
}

int
icmp4_checks_done(struct ctl_icmp_event *cie)
{
	struct table	*table;
	struct host	*host;

	TAILQ_FOREACH(table, &cie->env->tables, entry) {
		if (table->flags & F_DISABLE || table->check != CHECK_ICMP)
			continue;
		TAILQ_FOREACH(host, &table->hosts, entry) {
			if (((struct sockaddr *)&host->ss)->sa_family !=
			    AF_INET)
				continue;
			if (!(host->flags & F_CHECK_DONE)) {
				return (0);
			}
		}
	}
	return (1);
}

void
send_icmp6(struct ctl_icmp_event *cie, struct host *host)
{
	struct sockaddr		*to;
	struct icmp6_hdr	*icp;
	ssize_t			 i;
	int			 datalen = (64 - 8);
	u_char			 packet[datalen];

	cie->has_icmp6 = 1;
	to = (struct sockaddr *)&host->ss;
	bzero(&packet, sizeof(packet));
	icp = (struct icmp6_hdr *)packet;
	icp->icmp6_type = ICMP6_ECHO_REQUEST;
	icp->icmp6_code = 0;
	icp->icmp6_seq = 1;
	icp->icmp6_id = getpid() & 0xffff;

	memcpy((packet + sizeof(*icp)), &host->id, sizeof(host->id));

	i = sendto(cie->icmp6_sock, packet, datalen + 8, 0, to,
	    sizeof(struct sockaddr_in6));
	if (i < 0 || i != datalen + 8) {
		host->up = HOST_DOWN;
		hce_notify_done(host, "send_icmp6: cannot send");
		return;
	}
}

void
send_icmp4(struct ctl_icmp_event *cie, struct host *host)
{
	struct sockaddr	*to;
	struct icmp	*icp;
	ssize_t		 i;
	int		 datalen = (64 - 8);
	u_char		 packet[datalen];

	cie->has_icmp4 = 1;
	to = (struct sockaddr *)&host->ss;
	bzero(&packet, sizeof(packet));
	icp = (struct icmp *)packet;
	icp->icmp_type = ICMP_ECHO;
	icp->icmp_code = 0;
	icp->icmp_seq = htons(1);
	icp->icmp_id = htons(getpid() & 0xffff);
	icp->icmp_cksum = 0;

	memcpy(icp->icmp_data, &host->id, sizeof(host->id));
	icp->icmp_cksum = in_cksum((u_short *)icp, datalen + 8);

	i = sendto(cie->icmp_sock, packet, datalen + 8, 0, to,
	    sizeof(struct sockaddr_in));
	if (i < 0 || i != datalen + 8) {
		host->up = HOST_DOWN;
		hce_notify_done(host, "send_icmp4: cannot send");
	}
}

void
recv_icmp6(int s, short event, void *arg)
{
	struct ctl_icmp_event	*cie = arg;
	int			 datalen = (64 - 8);
	u_char			 packet[datalen];
	socklen_t		 len;
	struct sockaddr_storage	 ss;
	struct icmp6_hdr	*icp;
	struct host		*host;
	struct table		*table;
	ssize_t			 i;
	objid_t			 id;
	struct timeval		 tv;
	struct timeval		 tv_now;

	if (event == EV_TIMEOUT) {
		/*
		 * mark all hosts which have not responded yet as down.
		 */
		TAILQ_FOREACH(table, &cie->env->tables, entry) {
			if (table->check != CHECK_ICMP ||
			    table->flags & F_DISABLE)
				continue;
			TAILQ_FOREACH(host, &table->hosts, entry) {
				if (host->flags & F_DISABLE)
					continue;
				if (((struct sockaddr *)&host->ss)->sa_family
				    != AF_INET6)
					continue;
				if (!(host->flags & F_CHECK_DONE)) {
					host->up = HOST_DOWN;
				}
			}
		}
		return;
	}
	bzero(&packet, sizeof(packet));
	bzero(&ss, sizeof(ss));
	len = sizeof(struct sockaddr_in6);
	i = recvfrom(s, packet, datalen + 8, 0, (struct sockaddr *)&ss, &len);
	if (i < 0 || i != datalen + 8) {
		log_warn("recv_icmp6: did not receive valid ping");
		return;
	}
	icp = (struct icmp6_hdr *)(packet);
	memcpy(&id, (packet + sizeof(*icp)), sizeof(id));
	host = host_find(cie->env, id);
	if (host == NULL)
		log_warn("recv_icmp6: ping for unknown host received");
	if (bcmp(&ss, &host->ss, len)) {
		log_warnx("recv_icmp6: forged icmp packet ?");
		return;
	}
	if (icp->icmp6_id != (getpid() & 0xffff)) {
		log_warnx("recv_icmp6: did not receive valid ident");
		host->up = HOST_DOWN;
	} else
		host->up = HOST_UP;
	hce_notify_done(host, "recv_icmp6: final");
	if (icmp6_checks_done(cie))
		return;
	if (gettimeofday(&tv_now, NULL))
		fatal("recv_icmp6: gettimeofday");
	bcopy(&cie->env->timeout, &tv, sizeof(tv));
	timersub(&tv_now, &cie->tv_start, &tv_now);
	timersub(&tv, &tv_now, &tv);
	event_once(cie->icmp6_sock, EV_READ|EV_TIMEOUT, recv_icmp6, cie, &tv);
}

void
recv_icmp4(int s, short event, void *arg)
{
	int			 datalen = (64 - 8);
	socklen_t		 len;
	struct icmp		*icp;
	struct ctl_icmp_event	*cie = arg;
	u_char			 packet[datalen];
	struct host		*host;
	struct table		*table;
	ssize_t			 i;
	objid_t			 id;
	struct timeval		 tv;
	struct timeval		 tv_now;
	struct sockaddr_storage	 ss;

	if (event == EV_TIMEOUT) {
		/*
		 * mark all hosts which have not responded yet as down.
		 */
		TAILQ_FOREACH(table, &cie->env->tables, entry) {
			if (table->check != CHECK_ICMP ||
			    table->flags & F_DISABLE)
				continue;
			TAILQ_FOREACH(host, &table->hosts, entry) {
				if (host->flags & F_DISABLE)
					continue;
				if (((struct sockaddr *)&host->ss)->sa_family
				    != AF_INET)
					continue;
				if (!(host->flags & F_CHECK_DONE)) {
					host->up = HOST_DOWN;
				}
			}
		}
		return;
	}

	len = sizeof(struct sockaddr_in);
	bzero(&packet, sizeof(packet));
	bzero(&ss, sizeof(ss));
	i = recvfrom(s, packet, datalen + 8, 0, (struct sockaddr *)&ss, &len);
	if (i < 0 || i != (datalen + 8)) {
		log_warn("recv_icmp4: did not receive valid ping");
		return;
	}

	icp = (struct icmp *)(packet + sizeof(struct ip));
	memcpy(&id, icp->icmp_data, sizeof(id));
	host = host_find(cie->env, id);
	if (host == NULL) {
		log_warnx("recv_icmp4: received ping for unknown host");
		return;
	}
	if (bcmp(&ss, &host->ss, len)) {
		log_warnx("recv_icmp4: forged icmp packet ?");
		return;
	}
	if (ntohs(icp->icmp_id) != (getpid() & 0xffff)) {
		log_warnx("recv_icmp4: did not receive valid ident");
		host->up = HOST_DOWN;
	} else
		host->up = HOST_UP;

	host->flags |= F_CHECK_DONE;
	if (icmp4_checks_done(cie)) {
		hce_notify_done(host, "recv_icmp4: all done");
		return;
	}
	hce_notify_done(host, "recv_icmp4: host");

	if (gettimeofday(&tv_now, NULL))
		fatal("recv_icmp4: gettimeofday");

	bcopy(&cie->env->timeout, &tv, sizeof(tv));
	timersub(&tv_now, &cie->tv_start, &tv_now);
	timersub(&tv, &tv_now, &tv);
	event_once(cie->icmp_sock, EV_READ|EV_TIMEOUT, recv_icmp4, cie, &tv);
}

/* in_cksum from ping.c --
 *	Checksum routine for Internet Protocol family headers (C Version)
 *
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Mike Muuss.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
int
in_cksum(u_short *addr, int len)
{
	int nleft = len;
	u_short *w = addr;
	int sum = 0;
	u_short answer = 0;

	/*
	 * Our algorithm is simple, using a 32 bit accumulator (sum), we add
	 * sequential 16 bit words to it, and at the end, fold back all the
	 * carry bits from the top 16 bits into the lower 16 bits.
	 */
	while (nleft > 1)  {
		sum += *w++;
		nleft -= 2;
	}

	/* mop up an odd byte, if necessary */
	if (nleft == 1) {
		*(u_char *)(&answer) = *(u_char *)w ;
		sum += answer;
	}

	/* add back carry outs from top 16 bits to low 16 bits */
	sum = (sum >> 16) + (sum & 0xffff);     /* add hi 16 to low 16 */
	sum += (sum >> 16);			/* add carry */
	answer = ~sum;				/* truncate to 16 bits */

	return (answer);
}
@


1.7
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.6 2007/01/08 13:37:26 reyk Exp $	*/
@


1.6
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.5 2007/01/03 09:45:29 reyk Exp $	*/
a35 1
#include <regex.h>
@


1.5
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.4 2006/12/25 19:05:41 reyk Exp $	*/
d36 1
@


1.4
log
@fix the conversion from milliseconds to struct timeval, which uses
seconds (tv_sec) and microseconds (tv_usec), but the code assumed
seconds and milliseconds...
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.3 2006/12/25 18:12:14 reyk Exp $	*/
d258 1
a258 1
	u_char		 	 packet[datalen];
d288 1
a288 1
	
d318 1
a318 1
		return;	
d321 1
a321 1
	
@


1.3
log
@partial rewrite of the check_* routines to use libevent everywhere
instead of nested select() calls and to handle the non-blocking
sockets properly.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
(with a little help by me)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.2 2006/12/16 11:59:12 reyk Exp $	*/
d72 2
a73 3
	if (cie->has_icmp4) {
		tv.tv_sec = cie->env->timeout / 1000;
		tv.tv_usec = cie->env->timeout % 1000;
d76 1
a76 4
	}
	if (cie->has_icmp6) {
		tv.tv_sec = cie->env->timeout / 1000;
		tv.tv_usec = cie->env->timeout % 1000;
a78 1
	}
d245 1
a245 2
	tv.tv_sec = cie->env->timeout / 1000;
	tv.tv_usec = cie->env->timeout % 1000;
d324 2
a325 2
	tv.tv_sec = cie->env->timeout / 1000;
	tv.tv_usec = cie->env->timeout % 1000;
@


1.2
log
@knf, add copyright and license for in_cksum() from ping.c
@
text
@d1 1
a1 1
/*	$OpenBSD: check_icmp.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
d35 1
d39 7
a45 3
int check_icmp6(struct host *, int, int);
int check_icmp4(struct host *, int, int);
int in_cksum(u_short *, int);
d47 2
a48 1
int check_icmp(struct host *host, int s, int s6, int timeout)
d50 34
a83 4
	if (host->ss.ss_family == AF_INET)
		return (check_icmp4(host, s, timeout));
	else
		return (check_icmp6(host, s6, timeout));
d86 43
a128 1
int check_icmp6(struct host *host, int s, int timeout)
a131 1
	int			 ident;
a132 1
	int			 cc;
a134 3
	fd_set			 fdset;
	socklen_t		 len;
	struct timeval		 tv;
d136 1
a137 3
	ident = getpid() & 0xFFFF;
	len = sizeof(struct sockaddr_in6);

d143 1
a143 1
	icp->icmp6_id = ident;
d145 1
a145 2
	memset((packet + sizeof(*icp)), 'X', datalen);
	cc = datalen + 8;
d147 6
a152 34
	i = sendto(s, packet, cc, 0, to, len);

	if (i < 0 || i != cc) {
		log_warn("check_icmp6: cannot send ping");
		return (HOST_UNKNOWN);
	}

	tv.tv_sec = timeout / 1000;
	tv.tv_usec = timeout % 1000;
	FD_ZERO(&fdset);
	FD_SET(s, &fdset);
	switch (select(s + 1, &fdset, NULL, NULL, &tv)) {
	case -1:
		if (errno == EINTR) {
			log_warnx("check_icmp6: interrupted");
			return (HOST_UNKNOWN);
		} else
			fatal("check_icmp6: select");
	case 0:
		log_debug("check_icmp6: timeout");
		return (HOST_DOWN);
	default:
		bzero(&packet, sizeof(packet));
		i = recvfrom(s, packet, cc, 0, to, &len);
		if (i < 0 || i != cc) {
			log_warn("check_icmp6: did not receive valid ping");
			return (HOST_DOWN);
		}
		icp = (struct icmp6_hdr *)(packet);
		if (icp->icmp6_id != ident) {
			log_warnx("check_icmp6: did not receive valid ident");
			return (HOST_DOWN);
		}
		break;
a153 1
	return (HOST_UP);
d156 2
a157 1
int check_icmp4(struct host *host, int s, int timeout)
d159 5
a163 10
	struct sockaddr		*to;
	struct icmp		*icp;
	int			 ident;
	ssize_t			 i;
	int			 cc;
	int			 datalen = (64 - 8);
	u_char			 packet[datalen];
	fd_set			 fdset;
	socklen_t		 len;
	struct timeval		 tv;
d165 1
a166 3
	ident = getpid() & 0xFFFF;
	len = sizeof(struct sockaddr_in);

d169 1
a169 1
	icp->icmp_type = htons(ICMP_ECHO);
d172 1
a172 1
	icp->icmp_id = htons(ident);
d175 45
a219 31
	memset(icp->icmp_data, 'X', datalen);
	cc = datalen + 8;
	icp->icmp_cksum = in_cksum((u_short *)icp, cc);

	i = sendto(s, packet, cc, 0, to, len);

	if (i < 0 || i != cc) {
		log_warn("check_icmp4: cannot send ping");
		return (HOST_UNKNOWN);
	}

	tv.tv_sec = timeout / 1000;
	tv.tv_usec = timeout % 1000;
	FD_ZERO(&fdset);
	FD_SET(s, &fdset);
	switch (select(s + 1, &fdset, NULL, NULL, &tv)) {
	case -1:
		if (errno == EINTR) {
			log_warnx("check_icmp4: ping interrupted");
			return (HOST_UNKNOWN);
		} else
			fatal("check_icmp4: select");
	case 0:
		log_debug("check_icmp4: timeout");
		return (HOST_DOWN);
	default:
		bzero(&packet, sizeof(packet));
		i = recvfrom(s, packet, cc, 0, to, &len);
		if (i < 0 || i != cc) {
			log_warn("check_icmp4: did not receive valid ping");
			return (HOST_DOWN);
d221 70
a290 4
		icp = (struct icmp *)(packet + sizeof(struct ip));
		if (ntohs(icp->icmp_id) != ident) {
			log_warnx("check_icmp4: did not receive valid ident");
			return (HOST_DOWN);
d292 33
a324 1
		break;
d326 9
a334 1
	return (HOST_UP);
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 10
a61 10
        struct sockaddr 	*to;
        struct icmp6_hdr	*icp;
        int            		 ident; 
        ssize_t         	 i;
        int             	 cc;
        int             	 datalen = (64 - 8);
        u_char          	 packet[datalen];
        fd_set          	 fdset;
        socklen_t       	 len;
        struct timeval  	 tv;
d84 7
a90 7
        tv.tv_sec = timeout / 1000;
        tv.tv_usec = timeout % 1000;
        FD_ZERO(&fdset);
        FD_SET(s, &fdset);
        switch (select(s + 1, &fdset, NULL, NULL, &tv)) {
        case -1:
                if (errno == EINTR) {
d95 18
a112 18
        case 0:
                log_debug("check_icmp6: timeout");
                return (HOST_DOWN);
        default:
                bzero(&packet, sizeof(packet));
                i = recvfrom(s, packet, cc, 0, to, &len);
                if (i < 0 || i != cc) {
                        log_warn("check_icmp6: did not receive valid ping");
                        return (HOST_DOWN);
                }
                icp = (struct icmp6_hdr *)(packet);
                if (icp->icmp6_id != ident) {
                        log_warnx("check_icmp6: did not receive valid ident");
                        return (HOST_DOWN);
                }
                break;
        }
        return (HOST_UP);
d182 33
a214 1
/* from ping.c */
d218 27
a244 26
        int nleft = len;
        u_short *w = addr;
        int sum = 0;
        u_short answer = 0;

        /*
         * Our algorithm is simple, using a 32 bit accumulator (sum), we add
         * sequential 16 bit words to it, and at the end, fold back all the
         * carry bits from the top 16 bits into the lower 16 bits.
         */
        while (nleft > 1)  {
                sum += *w++;
                nleft -= 2;
        }

        /* mop up an odd byte, if necessary */
        if (nleft == 1) {
                *(u_char *)(&answer) = *(u_char *)w ;
                sum += answer;
        }

        /* add back carry outs from top 16 bits to low 16 bits */
        sum = (sum >> 16) + (sum & 0xffff);     /* add hi 16 to low 16 */
        sum += (sum >> 16);                     /* add carry */
        answer = ~sum;                          /* truncate to 16 bits */
        return(answer);
@

