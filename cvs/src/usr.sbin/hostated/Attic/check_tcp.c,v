head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2007.01.09.00.44.37;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.08.17.10.23;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.25.19.05.41;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.25.18.12.14;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.16.12.42.14;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rename to hoststate{d,ctl}, using a repository copy
as discussed with reyk
@
text
@/*	$OpenBSD: check_tcp.c,v 1.7 2007/01/08 20:46:18 reyk Exp $	*/

/*
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@spootnik.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <netinet/in.h>
#include <net/if.h>
#include <limits.h>
#include <event.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>

#include "hostated.h"

void	tcp_write(int, short, void *);
void	tcp_host_up(int s, struct ctl_tcp_event *);

void
check_tcp(struct ctl_tcp_event *cte)
{
	int			 s;
	int			 type;
	socklen_t		 len;
	struct timeval		 tv;
	struct linger		 lng;

	switch (cte->host->ss.ss_family) {
	case AF_INET:
		((struct sockaddr_in *)&cte->host->ss)->sin_port =
			cte->table->port;
		break;
	case AF_INET6:
		((struct sockaddr_in6 *)&cte->host->ss)->sin6_port =
			cte->table->port;
		break;
	}

	len = ((struct sockaddr *)&cte->host->ss)->sa_len;

	if ((s = socket(cte->host->ss.ss_family, SOCK_STREAM, 0)) == -1)
		goto bad;

	bzero(&lng, sizeof(lng));
	if (setsockopt(s, SOL_SOCKET, SO_LINGER, &lng, sizeof(lng)) == -1)
		goto bad;

	type = 1;
	if (setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &type, sizeof(type)) == -1)
		goto bad;

	if (fcntl(s, F_SETFL, O_NONBLOCK) == -1)
		goto bad;

	if (connect(s, (struct sockaddr *)&cte->host->ss, len) == -1) {
		if (errno != EINPROGRESS)
			goto bad;
	} else {
		cte->host->up = HOST_UP;
		tcp_host_up(s, cte);
		return;
	}
	bcopy(&cte->table->timeout, &tv, sizeof(tv));
	event_once(s, EV_TIMEOUT|EV_WRITE, tcp_write, cte, &tv);
	return;
bad:
	close(s);
	cte->host->up = HOST_DOWN;
	hce_notify_done(cte->host, "check_tcp: cannot connect");
}

void
tcp_write(int s, short event, void *arg)
{
	struct ctl_tcp_event	*cte = arg;
	int			 err;
	socklen_t		 len;

	if (event == EV_TIMEOUT) {
		log_debug("tcp_write: connect timed out");
		cte->host->up = HOST_DOWN;
	} else {
		len = sizeof(err);
		if (getsockopt(s, SOL_SOCKET, SO_ERROR, &err, &len))
			fatal("tcp_write: getsockopt");
		if (err)
			cte->host->up = HOST_DOWN;
		else
			cte->host->up = HOST_UP;
	}
	if (cte->host->up == HOST_UP)
		tcp_host_up(s, cte);
	else {
		close(s);
		hce_notify_done(cte->host, "connect failed");
	}
}

void
tcp_host_up(int s, struct ctl_tcp_event *cte)
{
	cte->s = s;

	switch (cte->table->check) {
	case CHECK_TCP:
		close(s);
		hce_notify_done(cte->host, "tcp_write: success");
		break;
	case CHECK_HTTP_CODE:
	case CHECK_HTTP_DIGEST:
		send_http_request(cte);
		break;
	case CHECK_SEND_EXPECT:
		start_send_expect(cte);
		break;
	default:
		fatalx("tcp_write: unhandled check type");
	}
}
@


1.7
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.6 2007/01/08 17:10:23 reyk Exp $	*/
@


1.6
log
@allow to use service names in addition to numerical port numbers in
the configuration file, eg. "real port http".

> From Pierre-Yves Ritschard (pyr at spootnik dot org)

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.5 2007/01/08 13:37:26 reyk Exp $	*/
a31 1
#include <regex.h>
@


1.5
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.4 2006/12/25 19:05:41 reyk Exp $	*/
d51 1
a51 1
			htons(cte->table->port);
d55 1
a55 1
			htons(cte->table->port);
@


1.4
log
@fix the conversion from milliseconds to struct timeval, which uses
seconds (tv_sec) and microseconds (tv_usec), but the code assumed
seconds and milliseconds...
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.3 2006/12/25 18:12:14 reyk Exp $	*/
d32 1
d122 2
d132 3
@


1.3
log
@partial rewrite of the check_* routines to use libevent everywhere
instead of nested select() calls and to handle the non-blocking
sockets properly.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
(with a little help by me)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.2 2006/12/16 12:42:14 reyk Exp $	*/
d82 1
a82 2
	tv.tv_sec = cte->table->timeout / 1000;
	tv.tv_usec = cte->table->timeout % 1000;
@


1.2
log
@knf, spacing

please note that some editors will replace tabs with multiple spaces
if you cut & paste code from other sections.  please try to keep the
tabs ;).
@
text
@d1 1
a1 1
/*	$OpenBSD: check_tcp.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
d30 1
d35 2
a36 10
int
check_tcp(struct host *host, struct table *table)
{
	int	sock;

	if ((sock = tcp_connect(host, table)) <= 0)
		return (sock);
	close(sock);
	return (HOST_UP);
}
d38 2
a39 2
int
tcp_connect(struct host *host, struct table *table)
d41 5
a45 5
	int		s;
	socklen_t	len;
	struct timeval	tv;
	struct sockaddr	sa;
	fd_set		fdset;
d47 1
a47 1
	switch (host->ss.ss_family) {
d49 2
a50 2
		((struct sockaddr_in *)&host->ss)->sin_port =
			htons(table->port);
d53 2
a54 2
		((struct sockaddr_in6 *)&host->ss)->sin6_port =
			htons(table->port);
d58 4
a61 1
	len = ((struct sockaddr *)&host->ss)->sa_len;
d63 7
a69 2
	if ((s = socket(host->ss.ss_family, SOCK_STREAM, 0)) == -1)
		fatal("check_tcp: cannot create socket");
d72 1
a72 1
		fatal("check_tcp: cannot set non blocking socket");
d74 34
a107 18
	if (connect(s, (struct sockaddr *)&host->ss, len) == -1) {
		if (errno != EINPROGRESS && errno != EWOULDBLOCK) {
			close(s);
			return (HOST_DOWN);
		}
	} else
		return (s);

	tv.tv_sec = table->timeout / 1000;
	tv.tv_usec = table->timeout % 1000;
	FD_ZERO(&fdset);
	FD_SET(s, &fdset);

	/* XXX This needs to be rewritten */
	switch (select(s + 1, NULL, &fdset, NULL, &tv)) {
	case -1:
		if (errno != EINTR)
			fatal("check_tcp: select");
d109 15
a123 2
			return (HOST_UNKNOWN);
	case 0:
d125 6
a130 1
		return (HOST_DOWN);
d132 1
a132 11
		if (getpeername(s, &sa, &len) == -1) {
			if (errno == ENOTCONN) {
				close(s);
				return (HOST_DOWN);
			} else {
				log_debug("check_tcp: unknown peername");
				close(s);
				return (HOST_UNKNOWN);
			}
		} else
			return (s);
a133 1
	return (HOST_UNKNOWN);
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d86 2
a87 1
	switch(select(s + 1, NULL, &fdset, NULL, &tv)) {
d92 1
a92 1
			return(HOST_UNKNOWN);
@

