head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2007.01.09.00.44.37;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.25.19.05.41;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.25.18.12.14;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.16.12.42.14;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rename to hoststate{d,ctl}, using a repository copy
as discussed with reyk
@
text
@/*	$OpenBSD: check_http.c,v 1.6 2007/01/08 20:46:18 reyk Exp $	*/
/*
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@spootnik.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <net/if.h>
#include <sha1.h>
#include <limits.h>
#include <event.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#include "hostated.h"

void	check_http_code(struct ctl_tcp_event *);
void	check_http_digest(struct ctl_tcp_event *);
void	http_read(int, short, void *);

void
check_http_code(struct ctl_tcp_event *cte)
{
	char		*head;
	char		 scode[4];
	const char	*estr;
	int		 code;

	head = cte->buf->buf;
	if (strncmp(head, "HTTP/1.1 ", strlen("HTTP/1.1 ")) &&
	    strncmp(head, "HTTP/1.0 ", strlen("HTTP/1.0 "))) {
		log_debug("check_http_code: cannot parse HTTP version");
		cte->host->up = HOST_DOWN;
		return;
	}
	head += strlen("HTTP/1.1 ");
	if (strlen(head) < 5) /* code + \r\n */ {
		cte->host->up = HOST_DOWN;
		return;
	}
	strlcpy(scode, head, sizeof(scode));
	code = strtonum(scode, 100, 999, &estr);
	if (estr != NULL) {
		log_debug("check_http_code: cannot parse HTTP code");
		cte->host->up = HOST_DOWN;
		return;
	}
	if (code != cte->table->retcode) {
		log_debug("check_http_code: invalid HTTP code returned");
		cte->host->up = HOST_DOWN;
	} else
		cte->host->up = HOST_UP;
}

void
check_http_digest(struct ctl_tcp_event *cte)
{
	char	*head;
	char	 digest[(SHA1_DIGEST_LENGTH*2)+1];

	head = cte->buf->buf;
	if ((head = strstr(head, "\r\n\r\n")) == NULL) {
		log_debug("check_http_digest: host %u no end of headers",
		    cte->host->id);
		cte->host->up = HOST_DOWN;
		return;
	}
	head += strlen("\r\n\r\n");
	SHA1Data(head, strlen(head), digest);

	if (strcmp(cte->table->digest, digest)) {
		log_warnx("check_http_digest: wrong digest for host %u",
		    cte->host->id);
		cte->host->up = HOST_DOWN;
	} else
		cte->host->up = HOST_UP;
}

void
http_read(int s, short event, void *arg)
{
	ssize_t			 br;
	char			 rbuf[SMALL_READ_BUF_SIZE];
	struct timeval		 tv;
	struct timeval		 tv_now;
	struct ctl_tcp_event	*cte = arg;

	if (event == EV_TIMEOUT) {
		cte->host->up = HOST_DOWN;
		buf_free(cte->buf);
		hce_notify_done(cte->host, "http_read: timeout");
		return;
	}
	br = read(s, rbuf, sizeof(rbuf));
	if (br == 0) {
		cte->host->up = HOST_DOWN;
		switch (cte->table->check) {
		case CHECK_HTTP_CODE:
			check_http_code(cte);
			break;
		case CHECK_HTTP_DIGEST:
			check_http_digest(cte);
			break;
		default:
			fatalx("http_read: unhandled check type");
		}
		buf_free(cte->buf);
		hce_notify_done(cte->host, "http_read: connection closed");
	} else if (br == -1) {
		cte->host->up = HOST_DOWN;
		buf_free(cte->buf);
		hce_notify_done(cte->host, "http_read: read failed");
	} else {
		buf_add(cte->buf, rbuf, br);
		bcopy(&cte->table->timeout, &tv, sizeof(tv));
		if (gettimeofday(&tv_now, NULL))
			fatal("send_http_request: gettimeofday");
		timersub(&tv_now, &cte->tv_start, &tv_now);
		timersub(&tv, &tv_now, &tv);
		event_once(s, EV_READ|EV_TIMEOUT, http_read, cte, &tv);
	}
}

void
send_http_request(struct ctl_tcp_event *cte)
{
	int		 bs;
	int		 pos;
	int		 len;
	char		*req;
	struct timeval	 tv;
	struct timeval	 tv_now;

	switch (cte->table->check) {
	case CHECK_HTTP_CODE:
		asprintf(&req, "HEAD %s HTTP/1.0\r\n\r\n",
		    cte->table->path);
		break;
	case CHECK_HTTP_DIGEST:
		asprintf(&req, "GET %s HTTP/1.0\r\n\r\n",
		    cte->table->path);
		break;
	default:
		fatalx("send_http_request: unhandled check type");
	}
	if (req == NULL)
		fatal("out of memory");
	pos = 0;
	len = strlen(req);
	/*
	 * write all at once for now.
	 */
	do {
		bs = write(cte->s, req + pos, len);
		if (bs <= 0) {
			log_warnx("send_http_request: cannot send request");
			cte->host->up = HOST_DOWN;
			hce_notify_done(cte->host, "send_http_request: write");
			free(req);
			return;
		}
		pos += bs;
		len -= bs;
	} while (len > 0);
	free(req);
	if ((cte->buf = buf_dynamic(SMALL_READ_BUF_SIZE, UINT_MAX)) == NULL)
		fatalx("send_http_request: cannot create dynamic buffer");

	bcopy(&cte->table->timeout, &tv, sizeof(tv));
	if (gettimeofday(&tv_now, NULL))
		fatal("send_http_request: gettimeofday");
	timersub(&tv_now, &cte->tv_start, &tv_now);
	timersub(&tv, &tv_now, &tv);
	event_once(cte->s, EV_READ|EV_TIMEOUT, http_read, cte, &tv);
}
@


1.6
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_http.c,v 1.5 2007/01/08 13:37:26 reyk Exp $	*/
@


1.5
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_http.c,v 1.4 2006/12/25 19:05:41 reyk Exp $	*/
a30 1
#include <regex.h>
@


1.4
log
@fix the conversion from milliseconds to struct timeval, which uses
seconds (tv_sec) and microseconds (tv_usec), but the code assumed
seconds and milliseconds...
@
text
@d1 1
a1 1
/*	$OpenBSD: check_http.c,v 1.3 2006/12/25 18:12:14 reyk Exp $	*/
d31 1
@


1.3
log
@partial rewrite of the check_* routines to use libevent everywhere
instead of nested select() calls and to handle the non-blocking
sockets properly.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
(with a little help by me)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_http.c,v 1.2 2006/12/16 12:42:14 reyk Exp $	*/
d132 1
a132 2
		tv.tv_sec = cte->table->timeout / 1000;
		tv.tv_usec = cte->table->timeout % 1000;
d186 1
a186 2
	tv.tv_sec = cte->table->timeout / 1000;
	tv.tv_usec = cte->table->timeout % 1000;
@


1.2
log
@knf, spacing

please note that some editors will replace tabs with multiple spaces
if you cut & paste code from other sections.  please try to keep the
tabs ;).
@
text
@d1 1
a1 1
/*	$OpenBSD: check_http.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
d34 3
a36 1
struct buf	*http_request(struct host *, struct table *, int, const char *);
d38 2
a39 2
struct buf *
http_request(struct host *host, struct table *table, int s, const char *req)
d41 1
a41 30
	int		 fl;
	ssize_t		 sz;
	char		 rbuf[1024];
	struct buf	*buf;

	if ((fl = fcntl(s, F_GETFL, 0)) == -1)
		fatal("http_request: cannot get flags for socket");
	if (fcntl(s, F_SETFL, fl & ~(O_NONBLOCK)) == -1)
		fatal("http_request: cannot set blocking socket");
	if ((buf = buf_dynamic(sizeof(rbuf), UINT_MAX)) == NULL)
		fatalx("http_request: cannot create dynamic buffer");

	if (write(s, req, strlen(req)) != (ssize_t) strlen(req)) {
		close(s);
		return (NULL);
	}
	for (; (sz = read(s, rbuf, sizeof(rbuf))) != 0; ) {
		if (sz == -1)
			fatal("http_request: read");
		if (buf_add(buf, rbuf, sz) == -1)
			fatal("http_request: buf_add");
	}
	return (buf);
}

int
check_http_code(struct host *host, struct table *table)
{
	int		 s;
	int		 code;
a42 2
	char		*req;
	char		*head;
d44 1
a44 9
	struct buf	*buf;

	if ((s = tcp_connect(host, table)) <= 0)
		return (s);

	asprintf(&req, "HEAD %s HTTP/1.0\r\n\r\n", table->path);
	if ((buf = http_request(host, table, s, req)) == NULL)
		return (HOST_UNKNOWN);
	free(req);
d46 1
a46 1
	head = buf->buf;
d50 2
a51 2
		close(s);
		return (HOST_DOWN);
d54 4
a57 2
	if (strlen(head) < 5) /* code + \r\n */
		return (HOST_DOWN);
d62 2
a63 2
		close(s);
		return (HOST_DOWN);
d65 1
a65 1
	if (code != table->retcode) {
d67 3
a69 5
		close(s);
		return (HOST_DOWN);
	}
	close(s);
	return (HOST_UP);
d72 2
a73 2
int
check_http_digest(struct host *host, struct table *table)
d75 2
a76 13
	int		 s;
	char		*head;
	char		*req;
	struct buf	*buf;
	char		 digest[(SHA1_DIGEST_LENGTH*2)+1];

	if ((s = tcp_connect(host, table)) <= 0)
		return (s);

	asprintf(&req, "GET %s HTTP/1.0\r\n\r\n", table->path);
	if ((buf = http_request(host, table, s, req)) == NULL)
		return (HOST_UNKNOWN);
	free(req);
d78 1
a78 1
	head = buf->buf;
d81 3
a83 3
		    host->id);
		close(s);
		return (HOST_DOWN);
a86 2
	close(s);
	buf_free(buf);
d88 1
a88 1
	if (strcmp(table->digest, digest)) {
d90 49
a138 2
		    host->id);
		return (HOST_DOWN);
d140 54
a193 1
	return (HOST_UP);
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 2
a47 2
        if (fcntl(s, F_SETFL, fl & ~(O_NONBLOCK)) == -1)
                fatal("http_request: cannot set blocking socket");
d129 1
a129 1
			  host->id);
d140 2
a141 2
			  host->id);
		return(HOST_DOWN);
@

