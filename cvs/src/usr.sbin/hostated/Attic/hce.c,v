head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2007.01.09.00.44.37;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.08.16.52.58;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.25.18.12.14;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.16.17.48.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.16.12.42.14;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rename to hoststate{d,ctl}, using a repository copy
as discussed with reyk
@
text
@/*	$OpenBSD: hce.c,v 1.7 2007/01/08 20:46:18 reyk Exp $	*/

/*
 * Copyright (c) 2006 Pierre-Yves Ritschard <pyr@@spootnik.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <net/if.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <err.h>
#include <pwd.h>

#include "hostated.h"

void	hce_sig_handler(int sig, short, void *);
void	hce_shutdown(void);
void	hce_dispatch_imsg(int, short, void *);
void	hce_dispatch_parent(int, short, void *);
void	hce_launch_checks(int, short, void *);
int	hce_checks_done(void);

static struct hostated	*env = NULL;
struct imsgbuf		*ibuf_pfe;
struct imsgbuf		*ibuf_main;

void
hce_sig_handler(int sig, short event, void *arg)
{
	switch (sig) {
	case SIGINT:
	case SIGTERM:
		hce_shutdown();
	default:
		fatalx("hce_sig_handler: unexpected signal");
	}
}

pid_t
hce(struct hostated *x_env, int pipe_parent2pfe[2], int pipe_parent2hce[2],
	int pipe_pfe2hce[2])
{
	pid_t		 pid;
	struct passwd	*pw;
	struct timeval	 tv;
	struct event	 ev_sigint;
	struct event	 ev_sigterm;

	switch (pid = fork()) {
	case -1:
		fatal("hce: cannot fork");
	case 0:
		break;
	default:
		return (pid);
	}

	env = x_env;

	/* this is needed for icmp tests */
	if ((env->icmp_sock = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)) < 0)
		err(1, "socket");
	if ((env->icmp6_sock = socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6)) < 0)
		err(1, "socket");

	if ((pw = getpwnam(HOSTATED_USER)) == NULL)
		fatal("hce: getpwnam");

	if (chroot(pw->pw_dir) == -1)
		fatal("hce: chroot");
	if (chdir("/") == -1)
		fatal("hce: chdir(\"/\")");

	setproctitle("host check engine");
	hostated_process = PROC_HCE;

	if (setgroups(1, &pw->pw_gid) ||
	    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
		fatal("hce: can't drop privileges");

	env->cie.icmp_sock = env->icmp_sock;
	env->cie.icmp6_sock = env->icmp6_sock;
	env->cie.env = env;

	event_init();

	signal_set(&ev_sigint, SIGINT, hce_sig_handler, NULL);
	signal_set(&ev_sigterm, SIGTERM, hce_sig_handler, NULL);
	signal_add(&ev_sigint, NULL);
	signal_add(&ev_sigterm, NULL);

	/* setup pipes */
	close(pipe_pfe2hce[1]);
	close(pipe_parent2hce[0]);
	close(pipe_parent2pfe[0]);
	close(pipe_parent2pfe[1]);

	if ((ibuf_pfe = calloc(1, sizeof(struct imsgbuf))) == NULL ||
	    (ibuf_main = calloc(1, sizeof(struct imsgbuf))) == NULL)
		fatal("hce");
	imsg_init(ibuf_pfe, pipe_pfe2hce[0], hce_dispatch_imsg);
	imsg_init(ibuf_main, pipe_parent2hce[1], hce_dispatch_parent);

	ibuf_pfe->events = EV_READ;
	event_set(&ibuf_pfe->ev, ibuf_pfe->fd, ibuf_pfe->events,
	    ibuf_pfe->handler, ibuf_pfe);
	event_add(&ibuf_pfe->ev, NULL);

	ibuf_main->events = EV_READ;
	event_set(&ibuf_main->ev, ibuf_main->fd, ibuf_main->events,
	    ibuf_main->handler, ibuf_main);
	event_add(&ibuf_main->ev, NULL);

	evtimer_set(&env->ev, hce_launch_checks, NULL);
	bcopy(&env->interval, &tv, sizeof(tv));
	evtimer_add(&env->ev, &tv);

	hce_launch_checks(0, 0, NULL);
	event_dispatch();

	hce_shutdown();

	return (0);
}

void
hce_launch_checks(int fd, short event, void *arg)
{
	struct host		*host;
	struct table		*table;

	TAILQ_FOREACH(table, &env->tables, entry) {
		if (table->flags & F_DISABLE)
			continue;
		if (table->check == CHECK_NOCHECK)
			fatalx("hce_launch_checks: unknown check type");
		if (table->check == CHECK_ICMP) {
			schedule_icmp(&env->cie, table);
			continue;
		}
		/*
		 * tcp type checks follow
		 */
		TAILQ_FOREACH(host, &table->hosts, entry) {
			if (host->flags & F_DISABLE)
				continue;
			bzero(&host->cte, sizeof(host->cte));
			host->last_up = host->up;
			host->cte.host = host;
			host->cte.table = table;
			if (gettimeofday(&host->cte.tv_start, NULL))
				fatal("hce_launch_checks: gettimeofday");
			check_tcp(&host->cte);
		}
	}
	check_icmp(&env->cie);
}

int
hce_checks_done()
{
	struct table		*table;
	struct host		*host;

	TAILQ_FOREACH(table, &env->tables, entry) {
		if (table->flags & F_DISABLE)
			continue;
		TAILQ_FOREACH(host, &table->hosts, entry) {
			if (host->flags & F_DISABLE)
				continue;
			if (!(host->flags & F_CHECK_DONE))
				return (0);
		}
	}
	return (1);
}

void
hce_notify_done(struct host *host, const char *msg)
{
	struct ctl_status	 st;
	struct timeval		 tv;
	struct table		*table;

	st.id = host->id;
	st.up = host->up;
	host->flags |= F_CHECK_DONE;
	if (msg)
		log_debug("hce_notify_done: %s", msg);
	if (host->up != host->last_up) {
		imsg_compose(ibuf_pfe, IMSG_HOST_STATUS, 0, 0, &st, sizeof(st));
		host->last_up = host->up;
	}
	/*
	 * check if everything is done, I see no other way than going
	 * through the tree for every host that calls this function.
	 */
	if (hce_checks_done()) {
		/*
		 * notify pfe checks are done and schedule next check
		 */
		imsg_compose(ibuf_pfe, IMSG_SYNC, 0, 0, NULL, 0);
		TAILQ_FOREACH(table, &env->tables, entry) {
			TAILQ_FOREACH(host, &table->hosts, entry)
				host->flags &= ~F_CHECK_DONE;
		}
		bcopy(&env->interval, &tv, sizeof(tv));
		evtimer_add(&env->ev, &tv);
		bzero(&st, sizeof(st));
	}
}

void
hce_shutdown(void)
{
	log_info("host check engine exiting");
	_exit(0);
}

void
hce_dispatch_imsg(int fd, short event, void *ptr)
{
	struct imsgbuf		*ibuf;
	struct imsg		 imsg;
	ssize_t			 n;
	objid_t			 id;
	struct host		*host;
	struct table		*table;

	ibuf = ptr;
	switch (event) {
	case EV_READ:
		if ((n = imsg_read(ibuf)) == -1)
			fatal("hce_dispatch_imsg: imsg_read_error");
		if (n == 0)
			fatalx("hce_dispatch_imsg: pipe closed");
		break;
	case EV_WRITE:
		if (msgbuf_write(&ibuf->w) == -1)
			fatal("hce_dispatch_imsg: msgbuf_write");
		imsg_event_add(ibuf);
		return;
	default:
		fatalx("hce_dispatch_imsg: unknown event");
	}

	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("hce_dispatch_imsg: imsg_read error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		case IMSG_HOST_DISABLE:
			memcpy(&id, imsg.data, sizeof(id));
			if ((host = host_find(env, id)) == NULL)
				fatalx("hce_dispatch_imsg: desynchronized");
			host->flags |= F_DISABLE;
			host->up = HOST_UNKNOWN;
			break;
		case IMSG_HOST_ENABLE:
			memcpy(&id, imsg.data, sizeof(id));
			if ((host = host_find(env, id)) == NULL)
				fatalx("hce_dispatch_imsg: desynchronized");
			host->flags &= ~(F_DISABLE);
			host->up = HOST_UNKNOWN;
			break;
		case IMSG_TABLE_DISABLE:
			memcpy(&id, imsg.data, sizeof(id));
			if ((table = table_find(env, id)) == NULL)
				fatalx("hce_dispatch_imsg: desynchronized");
			table->flags |= F_DISABLE;
			TAILQ_FOREACH(host, &table->hosts, entry)
				host->up = HOST_UNKNOWN;
			break;
		case IMSG_TABLE_ENABLE:
			memcpy(&id, imsg.data, sizeof(id));
			if ((table = table_find(env, id)) == NULL)
				fatalx("hce_dispatch_imsg: desynchronized");
			table->flags &= ~(F_DISABLE);
			TAILQ_FOREACH(host, &table->hosts, entry)
				host->up = HOST_UNKNOWN;
			break;
		default:
			log_debug("hce_dispatch_msg: unexpected imsg %d",
			    imsg.hdr.type);
			break;
		}
		imsg_free(&imsg);
	}
	imsg_event_add(ibuf);
}

void
hce_dispatch_parent(int fd, short event, void * ptr)
{
	struct imsgbuf	*ibuf;
	struct imsg	 imsg;
	ssize_t		 n;

	ibuf = ptr;
	switch (event) {
	case EV_READ:
		if ((n = imsg_read(ibuf)) == -1)
			fatal("hce_dispatch_parent: imsg_read error");
		if (n == 0)	/* connection closed */
			fatalx("hce_dispatch_parent: pipe closed");
		break;
	case EV_WRITE:
		if (msgbuf_write(&ibuf->w) == -1)
			fatal("hce_dispatch_parent: msgbuf_write");
		imsg_event_add(ibuf);
		return;
	default:
		fatalx("hce_dispatch_parent: unknown event");
	}

	for (;;) {
		if ((n = imsg_get(ibuf, &imsg)) == -1)
			fatal("hce_dispatch_parent: imsg_read error");
		if (n == 0)
			break;

		switch (imsg.hdr.type) {
		default:
			log_debug("hce_dispatch_parent: unexpected imsg %d",
			    imsg.hdr.type);
			break;
		}
		imsg_free(&imsg);
	}
}
@


1.7
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.6 2007/01/08 16:52:58 reyk Exp $	*/
@


1.6
log
@the timeout values are not allowed to exceed the global interval (i
figured this out while testing hostated against a stottering spamd
where the send/expect timeout needs be > 10 seconds). also use another
struct timeval to store the interval for easier handling in the code.

ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.5 2007/01/08 13:37:26 reyk Exp $	*/
a37 1
#include <regex.h>
@


1.5
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.4 2006/12/25 18:12:14 reyk Exp $	*/
d142 1
a142 2
	tv.tv_sec = env->interval;
	tv.tv_usec = 0;
d234 1
a234 2
		tv.tv_sec = env->interval;
		tv.tv_usec = 0;
@


1.4
log
@partial rewrite of the check_* routines to use libevent everywhere
instead of nested select() calls and to handle the non-blocking
sockets properly.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
(with a little help by me)
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.3 2006/12/16 17:48:27 deraadt Exp $	*/
d38 1
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.2 2006/12/16 12:42:14 reyk Exp $	*/
d46 1
d48 1
a48 1
static struct hostated		*env = NULL;
d107 4
a155 1
	int			 previous_up;
a157 2
	struct ctl_status	 st;
	struct timeval		 tv;
d159 33
a191 4
	tv.tv_sec = env->interval;
	tv.tv_usec = 0;
	evtimer_add(&env->ev, &tv);
	bzero(&st, sizeof(st));
d198 35
a232 25
			previous_up = host->up;
			switch (table->check) {
			case CHECK_ICMP:
				host->up = check_icmp(host, env->icmp_sock,
				    env->icmp6_sock, table->timeout);
				break;
			case CHECK_TCP:
				host->up = check_tcp(host, table);
				break;
			case CHECK_HTTP_CODE:
				host->up = check_http_code(host, table);
				break;
			case CHECK_HTTP_DIGEST:
				host->up = check_http_digest(host, table);
				break;
			default:
				fatalx("hce_launch_checks: unknown check type");
				break;
			}
			if (host->up != previous_up) {
				st.id = host->id;
				st.up = host->up;
				imsg_compose(ibuf_pfe, IMSG_HOST_STATUS, 0, 0,
				    &st, sizeof(st));
			}
d234 4
a238 2
	/* tell pfe we're finished */
	imsg_compose(ibuf_pfe, IMSG_SYNC, 0, 0, NULL, 0);
@


1.2
log
@knf, spacing

please note that some editors will replace tabs with multiple spaces
if you cut & paste code from other sections.  please try to keep the
tabs ;).
@
text
@d1 1
a1 1
/*	$OpenBSD: hce.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
d271 1
a271 1
				imsg.hdr.type);
d291 1
a291 1
		if (n == 0)     /* connection closed */
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d101 4
a104 4
        if (setgroups(1, &pw->pw_gid) ||
            setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
            setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
                fatal("hce: can't drop privileges");
d108 26
a133 26
        signal_set(&ev_sigint, SIGINT, hce_sig_handler, NULL);
        signal_set(&ev_sigterm, SIGTERM, hce_sig_handler, NULL);
        signal_add(&ev_sigint, NULL);                           
        signal_add(&ev_sigterm, NULL);

        /* setup pipes */
        close(pipe_pfe2hce[1]);
        close(pipe_parent2hce[0]);    
        close(pipe_parent2pfe[0]);
        close(pipe_parent2pfe[1]);

        if ((ibuf_pfe = calloc(1, sizeof(struct imsgbuf))) == NULL ||
            (ibuf_main = calloc(1, sizeof(struct imsgbuf))) == NULL)
                fatal("hce");
        imsg_init(ibuf_pfe, pipe_pfe2hce[0], hce_dispatch_imsg); 
        imsg_init(ibuf_main, pipe_parent2hce[1], hce_dispatch_parent);          
                                                                     
        ibuf_pfe->events = EV_READ;                                  
        event_set(&ibuf_pfe->ev, ibuf_pfe->fd, ibuf_pfe->events,
                ibuf_pfe->handler, ibuf_pfe);
        event_add(&ibuf_pfe->ev, NULL);

        ibuf_main->events = EV_READ;
        event_set(&ibuf_main->ev, ibuf_main->fd, ibuf_main->events,
                ibuf_main->handler, ibuf_main);
        event_add(&ibuf_main->ev, NULL);
d135 1
a135 1
        evtimer_set(&env->ev, hce_launch_checks, NULL);
d139 1
a139 1
                                                 
d152 2
a153 2
	struct host 		*host;
	struct table 		*table;
d171 1
a171 2
						      env->icmp6_sock,
						      table->timeout);
d190 1
a190 1
					     &st, sizeof(st));
d282 3
a284 3
	struct imsgbuf          *ibuf;
        struct imsg              imsg;
        ssize_t                  n;
d288 13
a300 13
        case EV_READ:
                if ((n = imsg_read(ibuf)) == -1)
                        fatal("hce_dispatch_parent: imsg_read error");
                if (n == 0)     /* connection closed */
                        fatalx("hce_dispatch_parent: pipe closed");
                break;
        case EV_WRITE:
                if (msgbuf_write(&ibuf->w) == -1)
                        fatal("hce_dispatch_parent: msgbuf_write");
                imsg_event_add(ibuf);
                return;
        default:
                fatalx("hce_dispatch_parent: unknown event");
d303 14
a316 14
        for (;;) {
                if ((n = imsg_get(ibuf, &imsg)) == -1)
                        fatal("hce_dispatch_parent: imsg_read error");
                if (n == 0)
                        break;

                switch (imsg.hdr.type) {
                default:
                        log_debug("hce_dispatch_parent: unexpected imsg %d", 
                                imsg.hdr.type);
                        break;
                }
                imsg_free(&imsg);
        }
@

