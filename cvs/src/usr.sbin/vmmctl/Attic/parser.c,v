head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2015.11.27.09.11.39;	author reyk;	state dead;
branches;
next	1.2;
commitid	YD6OAZRyqVv6x6Jz;

1.2
date	2015.11.26.08.26.48;	author reyk;	state Exp;
branches;
next	1.1;
commitid	GRMyPzYJL6q2Nvq3;

1.1
date	2015.11.22.20.55.18;	author reyk;	state Exp;
branches;
next	;
commitid	Ce3XWaK9k2YVSX7c;


desc
@@


1.3
log
@Change the command line syntax to a "command + getopts" style, eg.
  vmmctl start "myvm" -m 512M -i 1 -d disk.img -k /bsd

Networking people like me are used to the human-readable CLI-style
syntax that we have in some of our OpenBSD *ctl tools, including
bgpctl, other routing daemons, or relayctl.  But this didn't work for
vmmctl, so change it to something a bit less human-readable but more
BSD- and POSIX-ish.  After all, the command line is only intended for
simple configuration, more details will go into the configuration
file, so we can avoid getopt flag conflicts or scary things like the
getsubopt(3) style.

OK krw@@ jasper@@, with input from kettenis@@ jmc@@ deraadt@@ mlarkin@@ etc.
@
text
@/*	$OpenBSD: parser.c,v 1.2 2015/11/26 08:26:48 reyk Exp $	*/

/*
 * Copyright (c) 2010-2015 Reyk Floeter <reyk@@openbsd.org>
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/uio.h>

#include <machine/vmmvar.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>

#include "vmd.h"
#include "parser.h"

enum token_type {
	NOTOKEN,
	ENDTOKEN,
	KEYWORD,
	DISK,
	NAME,
	NIFS,
	PATH,
	SIZE,
	VMID
};

struct token {
	enum token_type		 type;
	const char		*keyword;
	int			 value;
	const struct token	*next;
};

static const struct token t_main[];
static const struct token t_show[];
static const struct token t_create[];
static const struct token t_imgsize[];
static const struct token t_imgsize_val[];
static const struct token t_start[];
static const struct token t_start_name[];
static const struct token t_disk[];
static const struct token t_kernel[];
static const struct token t_memory[];
static const struct token t_ifs[];
static const struct token t_vm[];
static const struct token t_opt_id[];
static const struct token t_id[];
static const struct token t_opt_path[];

static const struct token t_main[] = {
	{ KEYWORD,	"create",	CMD_CREATE,	t_create },
	{ KEYWORD,	"load",		CMD_LOAD,	t_opt_path },
	{ KEYWORD,	"show",		NONE,		t_show },
	{ KEYWORD,	"start",	CMD_START,	t_start_name },
	{ KEYWORD,	"terminate",	CMD_TERMINATE,	t_id },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_create[] = {
	{ PATH,		"",		NONE,		t_imgsize },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_imgsize[] = {
	{ KEYWORD,	"size",		NONE,		t_imgsize_val },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_imgsize_val[] = {
	{ SIZE,		"",		NONE,		NULL },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_start[] = {
	{ NOTOKEN,	"",		NONE,		NULL },
	{ KEYWORD,	"disk",		NONE,		t_disk },
	{ KEYWORD,	"interfaces",	NONE,		t_ifs },
	{ KEYWORD,	"kernel",	NONE,		t_kernel },
	{ KEYWORD,	"memory",	NONE,		t_memory },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_ifs[] = {
	{ NIFS,	"",		NONE,		t_start },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_disk[] = {
	{ DISK,		"",		NONE,		t_start },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_memory[] = {
	{ SIZE,		"",		NONE,		t_start },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_kernel[] = {
	{ PATH,		"",		NONE,		t_start },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_start_name[] = {
	{ NAME,		"",		NONE,		t_start },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_show[] = {
	{ KEYWORD,	"info",		CMD_INFO,	t_opt_id },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_opt_id[] = {
	{ NOTOKEN,	"",		NONE,		NULL },
	{ VMID,		"",		NONE,		NULL },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_id[] = {
	{ VMID,		"",		NONE,		NULL },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static const struct token t_opt_path[] = {
	{ NOTOKEN,	"",		NONE,		NULL },
	{ PATH,		"",		NONE,		NULL },
	{ ENDTOKEN,	"",		NONE,		NULL }
};

static struct parse_result	 res;

const struct token		*match_token(char *, const struct token []);
void				 show_valid_args(const struct token []);
int				 parse_addr(const char *);

struct parse_result *
parse(int argc, char *argv[])
{
	const struct token	*table = t_main;
	const struct token	*match;

	bzero(&res, sizeof(res));

	while (argc >= 0) {
		if ((match = match_token(argv[0], table)) == NULL) {
			fprintf(stderr, "valid commands/args:\n");
			show_valid_args(table);
			return (NULL);
		}

		argc--;
		argv++;

		if (match->type == NOTOKEN || match->next == NULL)
			break;

		table = match->next;
	}

	if (argc > 0) {
		fprintf(stderr, "superfluous argument: %s\n", argv[0]);
		return (NULL);
	}

	return (&res);
}

const struct token *
match_token(char *word, const struct token table[])
{
	unsigned int		 i, match = 0;
	const struct token	*t = NULL;

	for (i = 0; table[i].type != ENDTOKEN; i++) {
		switch (table[i].type) {
		case NOTOKEN:
			if (word == NULL || strlen(word) == 0) {
				match++;
				t = &table[i];
			}
			break;
		case KEYWORD:
			if (word != NULL && strncmp(word, table[i].keyword,
			    strlen(word)) == 0) {
				match++;
				t = &table[i];
				if (t->value)
					res.action = t->value;
			}
			break;
		case PATH:
			if (!match && word != NULL && strlen(word) > 0) {
				res.path = strdup(word);
				match++;
				t = &table[i];
			}
			break;
		case NAME:
			if (!match && word != NULL && strlen(word) > 0) {
				res.name = strdup(word);
				match++;
				t = &table[i];
			}
			break;
		case NIFS:
			if (match || word == NULL || *word == '\0')
				break;

			if (parse_ifs(&res, word, 0) == -1)
				return (NULL);

			match++;
			t = &table[i];
			break;
		case SIZE:
			if (match || word == NULL || *word == '\0')
				break;

			if (parse_size(&res, word, 0) == -1)
				return (NULL);

			match++;
			t = &table[i];
			break;
		case VMID:
			if (match || word == NULL || *word == '\0')
				break;

			if (parse_vmid(&res, word, 0) == -1)
				return (NULL);

			match++;
			t = &table[i];
			break;
		case DISK:
			if (match || word == NULL || *word == '\0')
				break;

			if (parse_disk(&res, word) == -1)
				return (NULL);

			match++;
			t = &table[i];
			break;
		case ENDTOKEN:
			break;
		}
	}

	if (match != 1) {
		if (word == NULL)
			fprintf(stderr, "missing argument:\n");
		else if (match > 1)
			fprintf(stderr, "ambiguous argument: %s\n", word);
		else if (match < 1)
			fprintf(stderr, "unknown argument: %s\n", word);
		return (NULL);
	}

	return (t);
}

void
show_valid_args(const struct token table[])
{
	int	i;

	for (i = 0; table[i].type != ENDTOKEN; i++) {
		switch (table[i].type) {
		case NOTOKEN:
			fprintf(stderr, "  <cr>\n");
			break;
		case KEYWORD:
			fprintf(stderr, "  %s\n", table[i].keyword);
			break;
		case NAME:
			fprintf(stderr, "  <name>\n");
			break;
		case PATH:
		case DISK:
			fprintf(stderr, "  <path>\n");
			break;
		case NIFS:
			fprintf(stderr, "  <count>\n");
			break;
		case VMID:
			fprintf(stderr, "  <id>\n");
			break;
		case SIZE:
			fprintf(stderr, "  <size>(K|M|G)\n");
			break;
		case ENDTOKEN:
			break;
		}
	}
}
@


1.2
log
@Automatically start vmm(4) when the first VM is created and after the
last VM is terminated.  This allows to remove the explicit "vmm
enable" / "vmm disable" (VMM_IOC_START / VMM_IOC_STOP) ioctls.  You'll
have to update kernel and userland for this change, as the kernel ABI
changes.

OK mpi@@ mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: parser.c,v 1.1 2015/11/22 20:55:18 reyk Exp $	*/
@


1.1
log
@Add initial parser to support a vmm.conf(5) configuration file format
for vmm and virtual machines.  Additionally, add a matching vmmctl
command line grammar that replaces (most of the) getopt arguments.
The goal is to provide a sane way to configure vmm(4) and vmd(8).
"There is still a lot to be done, and fixed" in this as well.

OK mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a69 1
	{ KEYWORD,	"enable",	CMD_ENABLE,	NULL },
a70 1
	{ KEYWORD,	"disable",	CMD_DISABLE,	NULL },
@

