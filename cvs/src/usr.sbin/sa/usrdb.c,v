head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.24
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.8
	OPENBSD_2_8:1.2.0.6
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.08.14.22.29.01;	author krw;	state Exp;
branches;
next	1.9;
commitid	chIZqPw4f7B1HyFB;

1.9
date	2010.08.30.16.14.36;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.28.20.22.21;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.30.18.47.44;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.30.18.43.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.27.20.34.36;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	99.08.06.20.41.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Flip 'u_quad_t' fields & variables to uint64_t, and %qu to %llu.

ok guenther@@
@
text
@/*	$OpenBSD: usrdb.c,v 1.9 2010/08/30 16:14:36 matthew Exp $	*/
/*
 * Copyright (c) 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/acct.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <pwd.h>
#include <stdio.h>
#include <string.h>
#include "extern.h"
#include "pathnames.h"

static int uid_compare(const DBT *, const DBT *);

static DB	*usracct_db;

int
usracct_init(void)
{
	DB *saved_usracct_db;
	BTREEINFO bti;
	int error;

	memset(&bti, 0, sizeof(bti));
	bti.compare = uid_compare;

	usracct_db = dbopen(NULL, O_RDWR, 0, DB_BTREE, &bti);
	if (usracct_db == NULL)
		return (-1);

	error = 0;
	if (!iflag) {
		DBT key, data;
		int serr, nerr;

		saved_usracct_db = dbopen(_PATH_USRACCT, O_RDONLY, 0, DB_BTREE,
		    &bti);
		if (saved_usracct_db == NULL) {
			error = (errno == ENOENT) ? 0 : -1;
			if (error)
				warn("retrieving user accounting summary");
			goto out;
		}

		serr = DB_SEQ(saved_usracct_db, &key, &data, R_FIRST);
		if (serr < 0) {
			warn("retrieving user accounting summary");
			error = -1;
			goto closeout;
		}
		while (serr == 0) {
			nerr = DB_PUT(usracct_db, &key, &data, 0);
			if (nerr < 0) {
				warn("initializing user accounting stats");
				error = -1;
				break;
			}

			serr = DB_SEQ(saved_usracct_db, &key, &data, R_NEXT);
			if (serr < 0) {
				warn("retrieving user accounting summary");
				error = -1;
				break;
			}
		}

closeout:
		if (DB_CLOSE(saved_usracct_db) < 0) {
			warn("closing user accounting summary");
			error = -1;
		}
	}

out:
	if (error != 0)
		usracct_destroy();
	return (error);
}

void
usracct_destroy(void)
{
	if (DB_CLOSE(usracct_db) < 0)
		warn("destroying user accounting stats");
}

int
usracct_add(const struct cmdinfo *ci)
{
	DBT key, data;
	struct userinfo newui;
	uid_t uid;
	int rv;

	uid = ci->ci_uid;
	key.data = &uid;
	key.size = sizeof(uid);

	rv = DB_GET(usracct_db, &key, &data, 0);
	if (rv < 0) {
		warn("get key %u from user accounting stats", uid);
		return (-1);
	} else if (rv == 0) {	/* it's there; copy whole thing */
		/* add the old data to the new data */
		memcpy(&newui, data.data, data.size);
		if (newui.ui_uid != uid) {
			warnx("key %u != expected record number %u",
			    newui.ui_uid, uid);
			warnx("inconsistent user accounting stats");
			return (-1);
		}
	} else {		/* it's not there; zero it and copy the key */
		memset(&newui, 0, sizeof(newui));
		newui.ui_uid = ci->ci_uid;
	}

	newui.ui_calls += ci->ci_calls;
	newui.ui_utime += ci->ci_utime;
	newui.ui_stime += ci->ci_stime;
	newui.ui_mem += ci->ci_mem;
	newui.ui_io += ci->ci_io;

	data.data = &newui;
	data.size = sizeof(newui);
	rv = DB_PUT(usracct_db, &key, &data, 0);
	if (rv < 0) {
		warn("add key %u to user accounting stats", uid);
		return (-1);
	} else if (rv != 0) {
		warnx("DB_PUT returned 1");
		return (-1);
	}

	return (0);
}

int
usracct_update(void)
{
	DB *saved_usracct_db;
	DBT key, data;
	BTREEINFO bti;
	int error, serr, nerr;

	memset(&bti, 0, sizeof(bti));
	bti.compare = uid_compare;

	saved_usracct_db = dbopen(_PATH_USRACCT, O_RDWR|O_CREAT|O_TRUNC, 0644,
	    DB_BTREE, &bti);
	if (saved_usracct_db == NULL) {
		warn("creating user accounting summary");
		return (-1);
	}

	error = 0;

	serr = DB_SEQ(usracct_db, &key, &data, R_FIRST);
	if (serr < 0) {
		warn("retrieving user accounting stats");
		error = -1;
	}
	while (serr == 0) {
		nerr = DB_PUT(saved_usracct_db, &key, &data, 0);
		if (nerr < 0) {
			warn("saving user accounting summary");
			error = -1;
			break;
		}

		serr = DB_SEQ(usracct_db, &key, &data, R_NEXT);
		if (serr < 0) {
			warn("retrieving user accounting stats");
			error = -1;
			break;
		}
	}

	if (DB_SYNC(saved_usracct_db, 0) < 0) {
		warn("syncing process accounting summary");
		error = -1;
	}
	if (DB_CLOSE(saved_usracct_db) < 0) {
		warn("closing process accounting summary");
		error = -1;
	}
	return error;
}

void
usracct_print(void)
{
	DBT key, data;
	struct userinfo uistore, *ui = &uistore;
	double t;
	int rv;

	rv = DB_SEQ(usracct_db, &key, &data, R_FIRST);
	if (rv < 0)
		warn("retrieving user accounting stats");

	while (rv == 0) {
		memcpy(ui, data.data, sizeof(struct userinfo));

		printf("%-8s %9llu ",
		    user_from_uid(ui->ui_uid, 0), ui->ui_calls);

		t = (double) (ui->ui_utime + ui->ui_stime) /
		    (double) AHZ;
		if (t < 0.0001)		/* kill divide by zero */
			t = 0.0001;

		printf("%12.2f%s ", t / 60.0, "cpu");

		/* ui->ui_calls is always != 0 */
		if (dflag)
			printf("%12llu%s", ui->ui_io / ui->ui_calls, "avio");
		else
			printf("%12llu%s", ui->ui_io, "tio");

		/* t is always >= 0.0001; see above */
		if (kflag)
			printf("%12.0f%s", ui->ui_mem / t, "k");
		else
			printf("%12llu%s", ui->ui_mem, "k*sec");

		printf("\n");

		rv = DB_SEQ(usracct_db, &key, &data, R_NEXT);
		if (rv < 0)
			warn("retrieving user accounting stats");
	}
}

static int
uid_compare(const DBT *k1, const DBT *k2)
{
	uid_t d1, d2;

	memcpy(&d1, k1->data, sizeof(d1));
	memcpy(&d2, k2->data, sizeof(d2));

	if (d1 < d2)
		return -1;
	else if (d1 == d2)
		return 0;
	else
		return 1;
}
@


1.9
log
@Use uid_t instead of u_long for comparing database keys in the usracct
summary database.

Fixed in NetBSD, and pointed out on ICB by deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: usrdb.c,v 1.8 2009/10/27 23:59:54 deraadt Exp $	*/
d234 1
a234 1
		printf("%-8s %9qu ",
d246 1
a246 1
			printf("%12qu%s", ui->ui_io / ui->ui_calls, "avio");
d248 1
a248 1
			printf("%12qu%s", ui->ui_io, "tio");
d254 1
a254 1
			printf("%12qu%s", ui->ui_mem, "k*sec");
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: usrdb.c,v 1.7 2003/06/28 20:22:21 deraadt Exp $	*/
d267 1
a267 1
	u_long d1, d2;
@


1.7
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: usrdb.c,v 1.6 2002/05/30 18:47:44 deraadt Exp $	*/
a30 4

#ifndef LINT
static char rcsid[] = "$Id: usrdb.c,v 1.6 2002/05/30 18:47:44 deraadt Exp $";
#endif
@


1.6
log
@minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: usrdb.c,v 1.5 2002/05/30 18:43:40 deraadt Exp $	*/
d33 1
a33 1
static char rcsid[] = "$Id: usrdb.c,v 1.5 2002/05/30 18:43:40 deraadt Exp $";
d52 1
a52 1
usracct_init()
d115 1
a115 1
usracct_destroy()
d172 1
a172 1
usracct_update()
d224 1
a224 1
usracct_print()
@


1.5
log
@various repairs; jason@@ackley.net
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
a33 1
static char rcsid[] = "$Id: usrdb.c,v 1.4 2002/02/16 21:28:09 millert Exp $";
d91 1
a91 1
			} 
d157 1
a157 1
	data.data = &newui; 
d275 1
a275 1
	
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
d33 1
a33 1
static char rcsid[] = "$Id: usrdb.c,v 1.3 2001/07/27 20:34:36 pvalchev Exp $";
d41 2
d122 1
a122 2
usracct_add(ci)
	const struct cmdinfo *ci;
a215 1
out:
d269 1
a269 2
uid_compare(k1, k2)
	const DBT *k1, *k2;
@


1.3
log
@Wall cleanup
@
text
@d32 1
a32 1
static char rcsid[] = "$Id: usrdb.c,v 1.2 1999/08/06 20:41:08 deraadt Exp $";
d44 1
a44 1
static int uid_compare __P((const DBT *, const DBT *));
@


1.2
log
@uid_t and gid_t, and use %u
@
text
@d32 1
a32 1
static char rcsid[] = "$Id: usrdb.c,v 1.1.1.1 1995/10/18 08:48:07 deraadt Exp $";
a174 1
	uid_t uid;
d245 1
a245 1
		printf("%12.2lf%s ", t / 60.0, "cpu");
@


1.1
log
@Initial revision
@
text
@d32 1
a32 1
static char rcsid[] = "$Id: usrdb.c,v 1.4 1995/04/24 13:26:26 cgd Exp $";
d124 1
a124 1
	u_long uid;
d133 1
a133 1
		warn("get key %d from user accounting stats", uid);
d139 1
a139 1
			warnx("key %d != expected record number %d",
d159 1
a159 1
		warn("add key %d to user accounting stats", uid);
d175 1
a175 1
	u_long uid;
d256 1
a256 1
			printf("%12qu%s", ui->ui_mem / t, "k");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
