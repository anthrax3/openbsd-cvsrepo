head	1.12;
access;
symbols
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_8:1.1.0.10
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2004.04.28.06.57.41;	author henning;	state dead;
branches;
next	1.11;

1.11
date	2004.02.24.22.02.26;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.24.20.54.09;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.24.20.33.07;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.06.19.52.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.21.03.30.21;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.18.03.44.06;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.11.06.01.19;	author nordin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.00.39.46;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.24.06.05.11;	author beck;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.03.16.04.40;	author ericj;	state Exp;
branches;
next	1.1;

1.1
date	98.08.18.03.43.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@It is a big pleasure for me to remove this highe pile of gunk from the tree.
dhclient, dhcrelay and dhcpd have been factored out and cleaned up big time,
dhcpd and dhcrelay chroot itself, drop privileges and lock their bpf
descriptors after applyiing read/write filters now, and this pile of ISC code
with it's lovely char ServerName; /* Name of Server */ constructs is
obsolete.
theo ok, I owe you some beers for this pleasure
@
text
@/* dhcrelay.c

   DHCP/BOOTP Relay Agent. */

/*
 * Copyright (c) 1997, 1998, 1999 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"
#include "version.h"

static void usage PROTO ((char *));

TIME cur_time;
TIME default_lease_time = 43200; /* 12 hours... */
TIME max_lease_time = 86400; /* 24 hours... */
struct tree_cache *global_options [256];

int log_perror = 1;

/* Needed to prevent linking against conflex.c. */
int lexline;
int lexchar;
char *token_line;
char *tlname;

char *path_dhcrelay_pid = _PATH_DHCRELAY_PID;

u_int16_t local_port;
u_int16_t remote_port;
int log_priority;

struct server_list {
	struct server_list *next;
	struct sockaddr_in to;
} *servers;

static char copyright [] =
"Copyright 1997, 1998, 1999 The Internet Software Consortium.";
static char arr [] = "All rights reserved.";
static char message [] = "Internet Software Consortium DHCP Relay Agent";
static char contrib [] = "Please contribute if you find this software useful.";
static char url [] = "For info, please visit http://www.isc.org/dhcp-contrib.html";

int main (argc, argv)
	int argc;
	char **argv;
{
	int i;
	struct servent *ent;
	struct server_list *sp = (struct server_list *)0;
	int no_daemon = 0;
	int quiet = 0;
	char *s;

	s = strrchr (argv [0], '/');
	if (!s)
		s = argv [0];
	else
		s++;

	/* Initially, log errors to stderr as well as to syslogd. */
	openlog (s, LOG_NDELAY, DHCPD_LOG_FACILITY);

	setlogmask (LOG_UPTO (LOG_INFO));

	for (i = 1; i < argc; i++) {
		if (!strcmp (argv [i], "-p")) {
			if (++i == argc)
				usage (s);
			local_port = htons (atoi (argv [i]));
			debug ("binding to user-specified port %d",
			       ntohs (local_port));
		} else if (!strcmp (argv [i], "-pf")) {
			if (++i == argc)
				usage (s);
			path_dhcrelay_pid = argv [i];
		} else if (!strcmp (argv [i], "-d")) {
			no_daemon = 1;
 		} else if (!strcmp (argv [i], "-i")) {
			struct interface_info *tmp =
				((struct interface_info *)
				 dmalloc (sizeof *tmp, "specified_interface"));
			if (!tmp)
				error ("Insufficient memory to %s %s",
				       "record interface", argv [i]);
			if (++i == argc) {
				usage (s);
			}
			memset (tmp, 0, sizeof *tmp);
			strlcpy (tmp -> name, argv [i], sizeof (tmp->name));
			tmp -> next = interfaces;
			tmp -> flags = INTERFACE_REQUESTED;
			interfaces = tmp;
		} else if (!strcmp (argv [i], "-q")) {
			quiet = 1;
			quiet_interface_discovery = 1;
 		} else if (argv [i][0] == '-') {
 		    usage (s);
 		} else {
			struct hostent *he;
			struct in_addr ia, *iap = (struct in_addr *)0;
			if (inet_aton (argv [i], &ia)) {
				iap = &ia;
			} else {
				he = gethostbyname (argv [i]);
				if (!he) {
					warn ("%s: host unknown", argv [i]);
				} else {
					iap = ((struct in_addr *)
					       he -> h_addr_list [0]);
				}
			}
			if (iap) {
				sp = calloc(1, sizeof *sp);
				if (!sp)
					error ("no memory for server.\n");
				sp -> next = servers;
				servers = sp;
				memcpy (&sp -> to.sin_addr,
					iap, sizeof *iap);
			}
 		}
	}

	if (!quiet) {
		note ("%s %s", message, DHCP_VERSION);
		note ("%s", copyright);
		note ("%s", arr);
		note ("%s", "");
		note ("%s", contrib);
		note ("%s", url);
		note ("%s", "");
	} else
		log_perror = 0;

	/* Default to the DHCP/BOOTP port. */
	if (!local_port) {
		ent = getservbyname ("dhcps", "udp");
		if (!ent)
			local_port = htons (67);
		else
			local_port = ent -> s_port;
		endservent ();
	}
	remote_port = htons (ntohs (local_port) + 1);
  
	/* We need at least one server. */
	if (!sp) {
		usage (s);
	}

	/* Set up the server sockaddrs. */
	for (sp = servers; sp; sp = sp -> next) {
		sp -> to.sin_port = local_port;
		sp -> to.sin_family = AF_INET;
		sp -> to.sin_len = sizeof sp -> to;
	}

	/* Get the current time... */
	GET_TIME (&cur_time);

	/* Discover all the network interfaces. */
	discover_interfaces (DISCOVER_RELAY);

	/* Set up the bootp packet handler... */
	bootp_packet_handler = relay;

	/* Become a daemon... */
	if (!no_daemon) {
		int pid;
		FILE *pf;
		int pfdesc;

		log_perror = 0;

		if ((pid = fork()) < 0)
			error ("can't fork daemon: %m");
		else if (pid)
			exit (0);

		pfdesc = open (path_dhcrelay_pid,
			       O_CREAT | O_TRUNC | O_WRONLY, 0644);

		if (pfdesc < 0) {
			warn ("Can't create %s: %m", path_dhcrelay_pid);
		} else {
			pf = fdopen (pfdesc, "w");
			if (!pf)
				warn ("Can't fdopen %s: %m",
				      path_dhcrelay_pid);
			else {
				fprintf (pf, "%ld\n", (long)getpid ());
				fclose (pf);
			}	
		}

		close (0);
		close (1);
		close (2);
		pid = setsid ();
	}

	/* Start dispatching packets and timeouts... */
	dispatch ();

	/*NOTREACHED*/
	return 0;
}

void relay (ip, packet, length, from_port, from, hfrom)
	struct interface_info *ip;
	struct dhcp_packet *packet;
	int length;
	unsigned int from_port;
	struct iaddr from;
	struct hardware *hfrom;
{
	struct server_list *sp;
	struct sockaddr_in to;
	struct interface_info *out;
	struct hardware hto;

	if (packet -> hlen > sizeof packet -> chaddr) {
		note ("Discarding packet with invalid hlen.");
		return;
	}

	/* If it's a bootreply, forward it to the client. */
	if (packet -> op == BOOTREPLY) {
		memset(&to, 0, sizeof(to));
		if (!(packet -> flags & htons (BOOTP_BROADCAST)) &&
		    can_unicast_without_arp ()) {
			to.sin_addr = packet -> yiaddr;
			to.sin_port = remote_port;
		} else {
			to.sin_addr.s_addr = htonl (INADDR_BROADCAST);
			to.sin_port = remote_port;
		}
		to.sin_family = AF_INET;
		to.sin_len = sizeof to;

		/* Set up the hardware destination address. */
		hto.hlen = packet -> hlen;
		if (hto.hlen > sizeof hto.haddr)
			hto.hlen = sizeof hto.haddr;
		memcpy (hto.haddr, packet -> chaddr, hto.hlen);
		hto.htype = packet -> htype;

		/* Find the interface that corresponds to the giaddr
		   in the packet. */
		for (out = interfaces; out; out = out -> next) {
			if (!memcmp (&out -> primary_address,
				     &packet -> giaddr,
				     sizeof packet -> giaddr))
				break;
		}
		if (!out) {
			warn ("packet to bogus giaddr %s.",
			      inet_ntoa (packet -> giaddr));
			return;
		}

		if (send_packet (out,
				  (struct packet *)0,
				  packet, length, out -> primary_address,
				  &to, &hto) != -1)
			debug ("forwarded BOOTREPLY for %s to %s",
			       print_hw_addr (packet -> htype, packet -> hlen,
					      packet -> chaddr),
			       inet_ntoa (to.sin_addr));

		return;
	}

	/* If giaddr is set on a BOOTREQUEST, ignore it - it's already
	   been gatewayed. */
	if (packet -> giaddr.s_addr) {
		note ("ignoring BOOTREQUEST with giaddr of %s\n",
		      inet_ntoa (packet -> giaddr));
		return;
	}

	/* Set the giaddr so the server can figure out what net it's
	   from and so that we can later forward the response to the
	   correct net. */
	packet -> giaddr = ip -> primary_address;

	/* Otherwise, it's a BOOTREQUEST, so forward it to all the
	   servers. */
	for (sp = servers; sp; sp = sp -> next) {
		if (send_packet ((fallback_interface
				   ? fallback_interface : interfaces),
				  (struct packet *)0,
				  packet, length, ip -> primary_address,
				  &sp -> to, (struct hardware *)0) != -1) {
			debug ("forwarded BOOTREQUEST for %s to %s",
			       print_hw_addr (packet -> htype, packet -> hlen,
					      packet -> chaddr),
			       inet_ntoa (sp -> to.sin_addr));
		}
	}
				 
}

static void usage (appname)
	char *appname;
{
	note (message);
	note (copyright);
	note (arr);
	note ("%s", "");
	note (contrib);
	note (url);
	note ("%s", "");

	warn ("Usage: %s [-q] [-d] [-i if0] [...-i ifN] [-p <port>]", appname);
	error ("      [-pf pidfilename] [server1 [... serverN]]");
}

void cleanup ()
{
}

int write_lease (lease)
	struct lease *lease;
{
	return 1;
}

int commit_leases ()
{
	return 1;
}

void bootp (packet)
	struct packet *packet;
{
}

void dhcp (packet)
	struct packet *packet;
{
}
@


1.11
log
@use calloc istead of malloc, setting sinaddr and bzero'ing it over later
found by Ward Wouts <ward@@wizeazz.nl> but different fix
@
text
@@


1.10
log
@correctly check send_packet()s return val
found by Ward Wouts <ward@@wizeazz.nl> but fixed differently
@
text
@d149 1
a149 1
				sp = (struct server_list *)malloc (sizeof *sp);
a188 1
		memset(&sp->to, 0, sizeof(sp->to));
@


1.9
log
@fix usage(); extracted from a mail by Ward Wouts <ward@@wizeazz.nl>
@
text
@d299 1
a299 1
		if (!send_packet (out,
d302 1
a302 1
				  &to, &hto) < 0)
d327 1
a327 1
		if (!send_packet ((fallback_interface
d331 1
a331 1
				  &sp -> to, (struct hardware *)0) < 0) {
@


1.8
log
@socklen_t use; pvalchev ok
@
text
@d352 1
a352 1
	warn ("Usage: %s [-i] [-d] [-i if0] [...-i ifN] [-p <port>]", appname);
@


1.7
log
@more strlcpy
@
text
@d79 1
a79 1
int main (argc, argv, envp)
d81 1
a81 1
	char **argv, **envp;
@


1.6
log
@format string audit.  From: Gregory Steuck <greg@@nest.cx>
@
text
@d125 1
a125 1
			strcpy (tmp -> name, argv [i]);
@


1.5
log
@Remove \n from warn(3). ok deraadt@@
@
text
@d162 6
a167 6
		note (copyright);
		note (arr);
		note ("");
		note (contrib);
		note (url);
		note ("");
d347 1
a347 1
	note ("");
d350 1
a350 1
	note ("");
@


1.4
log
@more sockaddr initializations.
@
text
@d294 1
a294 1
			warn ("packet to bogus giaddr %s.\n",
@


1.3
log
@dhcp 2.0pl5 merge/cleanup/deadcode slashing. still needs more eyes on this
but appears to work better than what's been in-tree before for dealing with
stupid dhcp servers.
@
text
@d189 1
d266 1
@


1.2
log
@
-Wall cleanup.
roll a function for writing out pidfile's instead of rolling it for each
program.
be careful with a few more buffers
@
text
@d6 1
a6 1
 * Copyright (c) 1997 The Internet Software Consortium.
a42 5
#ifndef lint
static char copyright[] =
"$Id: dhcrelay.c,v 1.1 1998/08/18 03:43:34 deraadt Exp $ Copyright (c) 1997 The Internet Software Consortium.  All rights reserved.\n";
#endif /* not lint */

d44 1
d46 1
a46 1
static void usage PROTO ((void));
d55 7
a61 3
#ifdef USE_FALLBACK
struct interface_info fallback_interface;
#endif
d72 7
d88 1
d90 8
a97 6
#ifdef SYSLOG_4_2
	openlog ("dhcrelay", LOG_NDELAY);
	log_priority = LOG_DAEMON;
#else
	openlog ("dhcrelay", LOG_NDELAY, LOG_DAEMON);
#endif
a98 1
#if !(defined (DEBUG) || defined (SYSLOG_4_2))
a99 1
#endif	
d104 1
a104 1
				usage ();
d108 4
d122 1
a122 1
				usage ();
d125 1
a125 1
			strlcpy (tmp -> name, argv [i], sizeof(tmp->name));
d133 1
a133 1
 		    usage ();
d160 11
d184 1
a184 1
		usage ();
a190 1
#ifdef HAVE_SA_LEN
a191 1
#endif
d216 15
a230 1
		write_pidfile(_PATH_DHCRELAY_PID, getpid());
d245 1
a245 1
void relay (ip, packbuf, length, from_port, from, hfrom)
d247 1
a247 1
	u_int8_t *packbuf;
d249 1
a249 1
	u_int16_t from_port;
a252 1
	struct dhcp_packet *packet = (struct dhcp_packet *)packbuf;
d258 5
d265 2
a266 2
#ifndef USE_FALLBACK
		if (!(packet -> flags & htons (BOOTP_BROADCAST))) {
d269 1
a269 3
		} else
#endif
		{
a273 1
#ifdef HAVE_SA_LEN
a274 1
#endif
d276 5
a280 4
		memcpy (hto.haddr, packet -> chaddr,
			(packet -> hlen > sizeof hto.haddr
			 ? sizeof hto.haddr
			 : packet -> hlen));
d297 4
a300 6
		if (send_packet (out,
				 (struct packet *)0,
				 packet, length, out -> primary_address,
				 &to, &hto) < 0)
			debug ("sendpkt: %m");
		else
d325 5
a329 15
		if (
#ifdef USE_FALLBACK
		    send_fallback (&fallback_interface,
				   (struct packet *)0,
				   packet, length, ip -> primary_address,
				   &sp -> to, (struct hardware *)0)
#else
		    send_packet (interfaces,
				 (struct packet *)0,
				 packet, length, ip -> primary_address,
				 &sp -> to, (struct hardware *)0)
#endif
		    < 0) {
			debug ("send_packet: %m");
		} else {
d339 2
a340 1
static void usage ()
d342 10
a351 1
	error ("Usage: dhcrelay [-c] [-p <port>] [server1 [... serverN]]");
@


1.1
log
@ISC dhcp, needs security audit for sure
@
text
@d45 1
a45 1
"$Id: dhcrelay.c,v 1.1.1.4 1998/05/18 06:54:00 mellon Exp $ Copyright (c) 1997 The Internet Software Consortium.  All rights reserved.\n";
a58 2
char *path_dhcrelay_pid = _PATH_DHCRELAY_PID;

d113 1
a113 1
			strcpy (tmp -> name, argv [i]);
d195 1
a195 15
		pfdesc = open (path_dhcrelay_pid,
			       O_CREAT | O_TRUNC | O_WRONLY, 0644);

		if (pfdesc < 0) {
			warn ("Can't create %s: %m", path_dhcrelay_pid);
		} else {
			pf = fdopen (pfdesc, "w");
			if (!pf)
				warn ("Can't fdopen %s: %m",
				      path_dhcrelay_pid);
			else {
				fprintf (pf, "%ld\n", (long)getpid ());
				fclose (pf);
			}	
		}
@

