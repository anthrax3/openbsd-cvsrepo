head	1.15;
access;
symbols
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@.\" @;


1.15
date	2004.04.28.06.57.40;	author henning;	state dead;
branches;
next	1.14;

1.14
date	2004.04.03.19.03.58;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.25.09.27.57;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.03.31.10.20.13;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.18.08.44.09;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.23.08.58.47;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.30.06.23.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.24.06.05.09;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.20.13.19.10;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.18.15.05.54;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.29.01.53.35;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.12.21.47.52;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	98.09.17.15.31.15;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.09.17.13.21.41;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.09.12.08.55.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@It is a big pleasure for me to remove this highe pile of gunk from the tree.
dhclient, dhcrelay and dhcpd have been factored out and cleaned up big time,
dhcpd and dhcrelay chroot itself, drop privileges and lock their bpf
descriptors after applyiing read/write filters now, and this pile of ISC code
with it's lovely char ServerName; /* Name of Server */ constructs is
obsolete.
theo ok, I owe you some beers for this pleasure
@
text
@.\"	$OpenBSD: dhclient.conf.5,v 1.14 2004/04/03 19:03:58 jmc Exp $
.\"
.\" Copyright (c) 1997 The Internet Software Consortium.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of The Internet Software Consortium nor the names
.\"    of its contributors may be used to endorse or promote products derived
.\"    from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
.\" CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
.\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
.\" CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
.\" USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
.\" OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
.\" OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" This software has been written for the Internet Software Consortium
.\" by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
.\" Enterprises.  To learn more about the Internet Software Consortium,
.\" see ``http://www.isc.org/isc''.  To learn more about Vixie
.\" Enterprises, see ``http://www.vix.com''.
.\"
.Dd January 1, 1997
.Dt DHCLIENT.CONF 5
.Os
.Sh NAME
.Nm dhclient.conf
.Nd DHCP client configuration file
.Sh DESCRIPTION
The
.Nm
file contains configuration information for
.Xr dhclient 8 ,
the Internet Software Consortium DHCP Client.
.Pp
The
.Nm
file is a free-form ASCII text file.
It is parsed by the recursive-descent parser built into
.Xr dhclient 8 .
The file may contain extra tabs and newlines for formatting purposes.
Keywords in the file are case-insensitive.
Comments may be placed anywhere within the file (except within quotes).
Comments begin with the
.Sq #
character and end at the end of the line.
.Pp
The
.Nm
file can be used to configure the behaviour of the client in a wide variety
of ways: protocol timing, information requested from the server, information
required of the server, defaults to use if the server does not provide
certain information, values with which to override information provided by
the server, or values to prepend or append to information provided by the
server.
The configuration file can also be preinitialized with addresses to
use on networks that don't have DHCP servers.
.Sh PROTOCOL TIMING
The timing behaviour of the client need not be configured by the user.
If no timing configuration is provided by the user, a fairly
reasonable timing behaviour will be used by default \- one which
results in fairly timely updates without placing an inordinate load on
the server.
.Pp
The following statements can be used to adjust the timing behaviour of
the DHCP client if required, however:
.Bl -tag -width Ds
.It Ic timeout Ar time ;
The
.Ic timeout
statement determines the amount of time that must pass between the
time that the client begins to try to determine its address and the
time that it decides that it's not going to be able to contact a server.
By default, this timeout is sixty seconds.
After the timeout has passed, if there are any static leases defined in the
configuration file, or any leases remaining in the lease database that
have not yet expired, the client will loop through these leases
attempting to validate them, and if it finds one that appears to be
valid, it will use that lease's address.
If there are no valid static leases or unexpired leases in the lease database,
the client will restart the protocol after the defined retry interval.
.It Ic retry Ar time ;
The
.Ic retry
statement determines the time that must pass after the client has
determined that there is no DHCP server present before it tries again
to contact a DHCP server.
By default, this is five minutes.
.It Ic select-timeout Ar time ;
It is possible (some might say desirable) for there to be more than
one DHCP server serving any given network.
In this case, it is possible that a client may be sent more than one offer
in response to its initial lease discovery message.
It may be that one of these offers is preferable to the other
(e.g., one offer may have the address the client previously used,
and the other may not).
.Pp
The
.Ic select-timeout
is the time after the client sends its first lease discovery request
at which it stops waiting for offers from servers, assuming that it
has received at least one such offer.
If no offers have been received by the time the
.Ic select-timeout
has expired, the client will accept the first offer that arrives.
.Pp
By default, the
.Ic select-timeout
is zero seconds \- that is, the client will take the first offer it sees.
.It Ic reboot Ar time ;
When the client is restarted, it first tries to reacquire the last
address it had.
This is called the INIT-REBOOT state.
If it is still attached to the same network it was attached to when it last
ran, this is the quickest way to get started.
The
.Ic reboot
statement sets the time that must elapse after the client first tries
to reacquire its old address before it gives up and tries to discover
a new address.
By default, the reboot timeout is ten seconds.
.It Ic backoff-cutoff Ar time ;
The client uses an exponential backoff algorithm with some randomness,
so that if many clients try to configure themselves at the same time,
they will not make their requests in lockstep.
The
.Ic backoff-cutoff
statement determines the maximum amount of time that the client is
allowed to back off.
It defaults to two minutes.
.It Ic initial-interval Ar time ;
The
.Ic initial-interval
statement sets the amount of time between the first attempt to reach a
server and the second attempt to reach a server.
Each time a message is sent, the interval between messages is incremented by
twice the current interval multiplied by a random number between zero and one.
If it is greater than the backoff-cutoff amount, it is set to that
amount.
It defaults to ten seconds.
.El
.Sh LEASE REQUIREMENTS AND REQUESTS
The DHCP protocol allows the client to request that the server send it
specific information, and not send it other information that it is not
prepared to accept.
The protocol also allows the client to reject offers from servers if they
don't contain information the client needs, or if the information provided
is not satisfactory.
.Pp
There is a variety of data contained in offers that DHCP servers send
to DHCP clients.
The data that can be specifically requested is what are called
.Em DHCP Options .
DHCP Options are defined in
.Xr dhcp-options 5 .
.Bl -tag -width Ds
.It Xo
.Ic request Op Ar option
.Oo , Ar ... option Oc ;
.Xc
The
.Ic request
statement causes the client to request that any server responding to the
client send the client its values for the specified options.
Only the option names should be specified in the request statement \- not
option parameters.
.It Xo
.Ic require Op Ar option
.Oo , Ar ... option Oc ;
.Xc
The
.Ic require
statement lists options that must be sent in order for an offer to be accepted.
Offers that do not contain all the listed options will be ignored.
.It Xo
.Ic send No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
The
.Ic send
statement causes the client to send the specified options to the server with
the specified values.
These are full option declarations as described in
.Xr dhcp-options 5 .
Options that are always sent in the DHCP protocol should not be specified
here, except that the client can specify a
.Ar dhcp-lease-time
option other than the default requested lease time, which is two hours.
The other obvious use for this statement is to send information to the server
that will allow it to differentiate between this client and other
clients or kinds of clients.
.El
.Sh OPTION MODIFIERS
In some cases, a client may receive option data from the server which
is not really appropriate for that client, or may not receive
information that it needs, and for which a useful default value exists.
It may also receive information which is useful, but which needs to be
supplemented with local information.
To handle these needs, several option modifiers are available.
.Bl -tag -width Ds
.It Xo
.Ic default No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
If for some set of options the client should use the value supplied by
the server, but needs to use some default value if no value was supplied
by the server, these values can be defined in the
.Ic default
statement.
.It Xo
.Ic supersede No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
If for some set of options the client should always use its own value
rather than any value supplied by the server, these values can be defined
in the
.Ic supersede
statement.
.It Xo
.Ic prepend No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
If for some set of options the client should use a value you supply,
and then use the values supplied by the server, if any,
these values can be defined in the
.Ic prepend
statement.
The
.Ic prepend
statement can only be used for options which allow more than one value to
be given.
This restriction is not enforced \- if violated, the results are unpredictable.
.It Xo
.Ic append No { Op Ar option declaration
.Oo , Ar ... option declaration Oc }
.Xc
If for some set of options the client should first use the values
supplied by the server, if any, and then use values you supply, these
values can be defined in the
.Ic append
statement.
The
.Ic append
statement can only be used for options which allow more than one value to
be given.
This restriction is not enforced \- if you ignore it,
the behaviour will be unpredictable.
.El
.Sh LEASE DECLARATIONS
The lease declaration:
.Pp
.Xo
.Ic \	\& lease No { Ar lease-declaration
.Oo Ar ... lease-declaration Oc }
.Xc
.Pp
The DHCP client may decide after some period of time (see
.Sx PROTOCOL TIMING )
that it is not going to succeed in contacting a server.
At that time, it consults its own database of old leases and tests each one
that has not yet timed out by pinging the listed router for that lease to
see if that lease could work.
It is possible to define one or more
.Em fixed
leases in the client configuration file for networks where there is no DHCP
or BOOTP service, so that the client can still automatically configure its
address.
This is done with the
.Ic lease
statement.
.Pp
NOTE: the lease statement is also used in the
.Pa dhclient.leases
file in order to record leases that have been received from DHCP servers.
Some of the syntax for leases as described below is only needed in the
.Pa dhclient.leases
file.
Such syntax is documented here for completeness.
.Pp
A lease statement consists of the lease keyword, followed by a left
curly brace, followed by one or more lease declaration statements,
followed by a right curly brace.
The following lease declarations are possible:
.Bl -tag -width Ds
.It Ic bootp ;
The
.Ic bootp
statement is used to indicate that the lease was acquired using the
BOOTP protocol rather than the DHCP protocol.
It is never necessary to specify this in the client configuration file.
The client uses this syntax in its lease database file.
.It Ic interface Ar \&"string\&" ;
The
.Ic interface
lease statement is used to indicate the interface on which the lease is valid.
If set, this lease will only be tried on a particular interface.
When the client receives a lease from a server, it always records the
interface number on which it received that lease.
If predefined leases are specified in the
.Nm
file, the interface should also be specified, although this is not required.
.It Ic fixed-address Ar ip-address ;
The
.Ic fixed-address
statement is used to set the IP address of a particular lease.
This is required for all lease statements.
The IP address must be specified as a dotted quad (e.g., 12.34.56.78).
.It Ic filename Ar \&"string\&" ;
The
.Ic filename
statement specifies the name of the boot filename to use.
This is not used by the standard client configuration script, but is
included for completeness.
.It Ic server-name Ar \&"string\&" ;
The
.Ic server-name
statement specifies the name of the boot server name to use.
This is also not used by the standard client configuration script.
.It Ic option Ar option-declaration ;
The
.Ic option
statement is used to specify the value of an option supplied by the server,
or, in the case of predefined leases declared in
.Nm dhclient.conf ,
the value that the user wishes the client configuration script to use if the
predefined lease is used.
.It Ic script Ar \&"script-name\&" ;
The
.Ic script
statement is used to specify the pathname of the DHCP client configuration
script.
This script is used by the DHCP client to set each interface's initial
configuration prior to requesting an address, to test the address once it
has been offered, and to set the interface's final configuration once a
lease has been acquired.
If no lease is acquired, the script is used to test predefined leases, if
any, and also called once if no valid lease can be identified.
For more information, see
.Xr dhclient.leases 5 .
.It Ic medium Ar \&"media setup\&" ;
The
.Ic medium
statement can be used on systems where network interfaces cannot
automatically determine the type of network to which they are connected.
The media setup string is a system-dependent parameter which is passed
to the DHCP client configuration script when initializing the interface.
On
.Ux
and UNIX-like systems, the argument is passed on the ifconfig command line
when configuring the interface.
.Pp
The DHCP client automatically declares this parameter if it used a
media type (see the
.Ic media
statement) when configuring the interface in order to obtain a lease.
This statement should be used in predefined leases only if the network
interface requires media type configuration.
.It Ic renew Ar date ;
.It Ic rebind Ar date ;
.It Ic expire Ar date ;
The
.Ic renew
statement defines the time at which the DHCP client should begin trying to
contact its server to renew a lease that it is using.
The
.Ic rebind
statement defines the time at which the DHCP client should begin to try to
contact
.Em any
DHCP server in order to renew its lease.
The
.Ic expire
statement defines the time at which the DHCP client must stop using a lease
if it has not been able to contact a server in order to renew it.
.El
.Pp
These declarations are automatically set in leases acquired by the
DHCP client, but must also be configured in predefined leases \- a
predefined lease whose expiry time has passed will not be used by the
DHCP client.
.Pp
Dates are specified as follows:
.Pp
.Ar \	\&<weekday>
.Sm off
.Ar <year> No / Ar <month> No / Ar <day>
.Ar <hour> : <minute> : <second>
.Sm on
.Pp
The weekday is present to make it easy for a human to tell when a
lease expires \- it's specified as a number from zero to six, with zero
being Sunday.
When declaring a predefined lease, it can always be specified as zero.
The year is specified with the century, so it should generally be four
digits except for really long leases.
The month is specified as a number starting with 1 for January.
The day of the month is likewise specified starting with 1.
The hour is a number between 0 and 23,
the minute a number between 0 and 69,
and the second also a number between 0 and 69.
.Sh ALIAS DECLARATIONS
.Ic alias No { Ar declarations ... No }
.Pp
Some DHCP clients running TCP/IP roaming protocols may require that in
addition to the lease they may acquire via DHCP, their interface also
be configured with a predefined IP alias so that they can have a
permanent IP address even while roaming.
The Internet Software Consortium DHCP client doesn't support roaming with
fixed addresses directly, but in order to facilitate such experimentation,
the DHCP client can be set up to configure an IP alias using the
.Ic alias
declaration.
.Pp
The
.Ic alias
declaration resembles a lease declaration, except that options other than
the subnet-mask option are ignored by the standard client configuration
script, and expiry times are ignored.
A typical alias declaration includes an interface declaration, a fixed-address
declaration for the IP alias address, and a subnet-mask option declaration.
A medium statement should never be included in an alias declaration.
.Sh OTHER DECLARATIONS
.Bl -tag -width Ds
.It Ic reject Ar ip-address ;
The
.Ic reject
statement causes the DHCP client to reject offers from servers who use
the specified address as a server identifier.
This can be used to avoid being configured by rogue or misconfigured DHCP
servers, although it should be a last resort \- better to track down
the bad DHCP server and fix it.
.It Xo
.Ic interface Ar \&"name\&" No { Ar declarations
.Ar ... No }
.Xc
A client with more than one network interface may require different
behaviour depending on which interface is being configured.
All timing parameters and declarations other than lease and alias
declarations can be enclosed in an interface declaration, and those
parameters will then be used only for the interface that matches the
specified name.
Interfaces for which there is no interface declaration will use the
parameters declared outside of any interface declaration,
or the default settings.
.It Xo
.Ic media Ar \&"media setup\&"
.Oo , Ar \&"media setup\&" , ... Oc ;
.Xc
The
.Ic media
statement defines one or more media configuration parameters which may
be tried while attempting to acquire an IP address.
The DHCP client will cycle through each media setup string on the list,
configuring the interface using that setup and attempting to boot,
and then trying the next one.
This can be used for network interfaces which aren't capable of sensing
the media type unaided \- whichever media type succeeds in getting a request
to the server and hearing the reply is probably right (no guarantees).
.Pp
The media setup is only used for the initial phase of address
acquisition (the DHCPDISCOVER and DHCPOFFER packets).
Once an address has been acquired, the DHCP client will record it in its
lease database and will record the media type used to acquire the address.
Whenever the client tries to renew the lease, it will use that same media type.
The lease must expire before the client will go back to cycling through media
types.
.El
.Sh EXAMPLES
The following configuration file is used on a laptop
which has an IP alias of 192.5.5.213, and has one interface,
ep0 (a 3Com 3C589C).
Booting intervals have been shortened somewhat from the default, because
the client is known to spend most of its time on networks with little DHCP
activity.
The laptop does roam to multiple networks.
.Bd -literal -offset indent
timeout 60;
retry 60;
reboot 10;
select-timeout 5;
initial-interval 2;
reject 192.33.137.209;

interface "ep0" {
    send host-name "andare.fugue.com";
    send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
    send dhcp-lease-time 3600;
    supersede domain-name "fugue.com rc.vix.com home.vix.com";
    prepend domain-name-servers 127.0.0.1;
    request subnet-mask, broadcast-address, time-offset, routers,
	    domain-name, domain-name-servers, host-name;
    require subnet-mask, domain-name-servers;
    script "/etc/dhclient-script";
    media "media 10baseT/UTP", "media 10base2/BNC";
}

alias {
  interface "ep0";
  fixed-address 192.5.5.213;
  option subnet-mask 255.255.255.255;
}
.Ed
.Pp
This is a very complicated
.Nm
file \- in general, yours should be much simpler.
In many cases, it's sufficient to just create an empty
.Nm
file \- the defaults are usually fine.
.Sh SEE ALSO
.Xr dhclient.leases 5 ,
.Xr dhcp-options 5 ,
.Xr dhcpd.conf 5 ,
.Xr dhclient 8 ,
.Xr dhcpd 8
.Pp
RFC 2132, RFC 2131.
.Sh AUTHORS
.Xr dhclient 8
was written by
.An Ted Lemon Aq mellon@@vix.com
under a contract with Vixie Labs.
Funding for this project was provided by the Internet Software Corporation.
Information about the Internet Software Consortium can be found at
.Pa http://www.isc.org/isc .
@


1.14
log
@correct option is `dhcp-lease-time', not `requested-lease-time';
tracked down w/ help from krw@@

also kill a dose of unnecessary .Pp's in here;
@
text
@d1 1
a1 1
.\"	$OpenBSD: dhclient.conf.5,v 1.13 2003/06/25 09:27:57 jmc Exp $
@


1.13
log
@mdoc version of the dhcp pages;
from myself and pjanzen@@.

input and ok in dhclient-script.8 from krw@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
a82 1
.Pp
a171 1
.Pp
d203 1
a203 1
.Ar requested-lease-time
a215 1
.Pp
a265 1
.Pp
a299 1
.Pp
a417 1
.Pp
a438 1
.Pp
@


1.12
log
@3com, 3COM -> 3Com
@
text
@d1 1
a1 1
.\"	dhclient.conf.5
d38 12
a49 6
.TH dhclient.conf 5
.SH NAME
dhclient.conf - DHCP client configuration file
.SH DESCRIPTION
The dhclient.conf file contains configuration information for
.IR dhclient,
d51 21
a71 14
.PP
The dhclient.conf file is a free-form ASCII text file.   It is parsed by
the recursive-descent parser built into dhclient.   The file may contain
extra tabs and newlines for formatting purposes.  Keywords in the file
are case-insensitive.   Comments may be placed anywhere within the
file (except within quotes).   Comments begin with the # character and
end at the end of the line.
.PP
The dhclient.conf file can be used to configure the behaviour of the
client in a wide variety of ways: protocol timing, information
requested from the server, information required of the server,
defaults to use if the server does not provide certain information,
values with which to override information provided by the server, or
values to prepend or append to information provided by the server.
d74 1
a74 1
.SH PROTOCOL TIMING
d77 1
a77 1
reasonable timing behaviour will be used by default - one which
d80 1
a80 1
.PP
d83 3
a85 7
.PP
.I The
.B timeout
.I statement
.PP
 \fBtimeout \fItime\fR\fB;\fR
.PP
d87 1
a87 1
.I timeout
d90 3
a92 3
time that it decides that it's not going to be able to contact a
server.   By default, this timeout is sixty seconds.   After the
timeout has passed, if there are any static leases defined in the
d96 4
a99 10
valid, it will use that lease's address.   If there are no valid
static leases or unexpired leases in the lease database, the client
will restart the protocol after the defined retry interval.
.PP
.I The
.B retry
.I statement
.PP
 \fBretry \fItime\fR\fB;\fR
.PP
d101 1
a101 1
.I retry
d104 3
a106 8
to contact a DHCP server.   By default, this is five minutes.
.PP
.I The
.B select-timeout
.I statement
.PP
 \fBselect-timeout \fItime\fR\fB;\fR
.PP
d108 7
a114 6
one DHCP server serving any given network.   In this case, it is
possible that a client may be sent more than one offer in response to
its initial lease discovery message.   It may be that one of these
offers is preferable to the other (e.g., one offer may have the
address the client previously used, and the other may not).
.PP
d116 1
a116 1
.I select-timeout
d119 3
a121 3
has received at least one such offer.   If no offers have been
received by the time the
.I select-timeout
d123 5
a127 10
.PP
By default, the select-timeout is zero seconds - that is, the client
will take the first offer it sees.
.PP
.I The
.B reboot
.I statement
.PP
 \fBreboot \fItime\fR\fB;\fR
.PP
d129 6
a134 4
address it had.   This is called the INIT-REBOOT state.   If it is
still attached to the same network it was attached to when it last
ran, this is the quickest way to get started.   The
.I reboot
d137 3
a139 8
a new address.   By default, the reboot timeout is ten seconds.
.PP
.I The
.B backoff-cutoff
.I statement
.PP
 \fBbackoff-cutoff \fItime\fR\fB;\fR
.PP
d142 3
a144 2
they will not make their requests in lockstep.   The
.I backoff-cutoff
d146 3
a148 8
allowed to back off.   It defaults to two minutes.
.PP
.I The
.B initial-interval
.I statement
.PP
 \fBinitial-interval \fItime\fR\fB;\fR
.PP
d150 1
a150 1
.I initial-interval
d152 3
a154 3
server and the second attempt to reach a server.  Each time a message
is sent, the interval between messages is incremented by twice the
current interval multiplied by a random number between zero and one.
d156 4
a159 2
amount.  It defaults to ten seconds.
.SH LEASE REQUIREMENTS AND REQUESTS
d162 5
a166 4
prepared to accept.   The protocol also allows the client to reject
offers from servers if they don't contain information the client
needs, or if the information provided is not satisfactory.
.PP
d168 40
a207 39
to DHCP clients.  The data that can be specifically requested is what
are called \fIDHCP Options\fR.  DHCP Options are defined in
 \fBdhcp-options(5)\fR.
.PP
.I The
.B request
.I statement
.PP
 \fBrequest [ \fIoption\fR ] [\fB,\fI ... \fIoption\fR ]\fB;\fR
.PP
The request statement causes the client to request that any server
responding to the client send the client its values for the specified
options.   Only the option names should be specified in the request
statement - not option parameters.
.PP
.I The
.B require
.I statement
.PP
 \fBrequire [ \fIoption\fR ] [\fB,\fI ... \fIoption ]\fB;\fR
.PP
The require statement lists options that must be sent in order for an
offer to be accepted.   Offers that do not contain all the listed
options will be ignored.
.PP
.I The
.B send
.I statement
.PP
 \fBsend { [ \fIoption declaration\fR ]
[\fB,\fI ... \fIoption declaration\fR ]\fB}\fR
.PP
The send statement causes the client to send the specified options to
the server with the specified values.  These are full option
declarations as described in \fBdhcp-options(5)\fR.  Options that are
always sent in the DHCP protocol should not be specified here, except
that the client can specify a \fBrequested-lease-time\fR option other
than the default requested lease time, which is two hours.  The other
obvious use for this statement is to send information to the server
d210 2
a211 1
.SH OPTION MODIFIERS
d214 10
a223 12
information that it needs, and for which a useful default value
exists.   It may also receive information which is useful, but which
needs to be supplemented with local information.   To handle these
needs, several option modifiers are available.
.PP
.I The
.B default
.I statement
.PP
 \fBdefault { [ \fIoption declaration\fR ]
[\fB,\fI ... \fIoption declaration\fR ]\fB}\fR
.PP
d227 1
a227 1
.B default
d229 4
a232 8
.PP
.I The
.B supersede
.I statement
.PP
 \fBsupersede { [ \fIoption declaration\fR ]
[\fB,\fI ... \fIoption declaration\fR ]\fB}\fR
.PP
d234 12
a245 3
rather than any value supplied by the server, these values can be
defined in the 
.B supersede
d247 9
a255 25
.PP
.I The
.B prepend
.I statement
.PP
 \fBprepend { [ \fIoption declaration\fR ]
[\fB,\fI ... \fIoption declaration\fR ]\fB}\fR
.PP
If for some set of options the client should use a value you
supply, and then use the values supplied by
the server, if any, these values can be defined in the
.B prepend
statement.   The
.B prepend
statement can only be used for options which
allow more than one value to be given.   This restriction is not
enforced - if violated, the results are unpredictable.
.PP
.I The
.B append
.I statement
.PP
 \fBappend { [ \fIoption declaration\fR ]
[\fB,\fI ... \fIoption declaration\fR ]\fB}\fR
.PP
d259 1
a259 24
.B append
statement.   The
.B append
statement can only be used for options which
allow more than one value to be given.   This restriction is not
enforced - if you ignore it, the behaviour will be unpredictable.
.SH LEASE DECLARATIONS
.PP
.I The
.B lease
.I declaration
.PP
 \fBlease {\fR \fIlease-declaration\fR [ ... \fIlease-declaration ] \fB}\fR
.PP
The DHCP client may decide after some period of time (see \fBPROTOCOL
TIMING\fR) that it is not going to succeed in contacting a
server.   At that time, it consults its own database of old leases and
tests each one that has not yet timed out by pinging the listed router
for that lease to see if that lease could work.   It is possible to
define one or more \fIfixed\fR leases in the client configuration file
for networks where there is no DHCP or BOOTP service, so that the
client can still automatically configure its address.   This is done
with the
.B lease
d261 34
a294 3
.PP
NOTE: the lease statement is also used in the dhclient.leases file in
order to record leases that have been received from DHCP servers.
d296 4
a299 3
dhclient.leases file.   Such syntax is documented here for
completeness.
.PP
d302 5
a306 5
followed by a right curly brace.   The following lease declarations
are possible:
.PP
 \fBbootp;\fR
.PP
d308 1
a308 1
.B bootp
d310 52
a361 63
BOOTP protocol rather than the DHCP protocol.   It is never necessary
to specify this in the client configuration file.   The client uses
this syntax in its lease database file.
.PP
 \fBinterface\fR \fB"\fR\fIstring\fR\fB";\fR
.PP
The
.B interface
lease statement is used to indicate the interface on which the lease
is valid.   If set, this lease will only be tried on a particular
interface.   When the client receives a lease from a server, it always
records the interface number on which it received that lease.
If predefined leases are specified in the dhclient.conf file, the
interface should also be specified, although this is not required.
.PP
 \fBfixed-address\fR \fIip-address\fR\fB;\fR
.PP
The
.B fixed-address
statement is used to set the IP address of a particular lease.   This
is required for all lease statements.   The IP address must be
specified as a dotted quad (e.g., 12.34.56.78).
.PP
 \fBfilename "\fR\fIstring\fR\fB";\fR
.PP
The
.B filename
statement specifies the name of the boot filename to use.   This is
not used by the standard client configuration script, but is included
for completeness.
.PP
 \fBserver-name "\fR\fIstring\fR\fB";\fR
.PP
The
.B server-name
statement specifies the name of the boot server name to use.   This is
also not used by the standard client configuration script.
.PP
 \fBoption\fR \fIoption-declaration\fR\fB;\fR
.PP
The
.B option
statement is used to specify the value of an option supplied by the
server, or, in the case of predefined leases declared in
dhclient.conf, the value that the user wishes the client configuration
script to use if the predefined lease is used.
.PP
 \fBscript "\fIscript-name\fB";\fR
.PP
The
.B script
statement is used to specify the pathname of the dhcp client
configuration script.  This script is used by the dhcp client to set
each interface's initial configuration prior to requesting an address,
to test the address once it has been offered, and to set the
interface's final configuration once a lease has been acquired.   If
no lease is acquired, the script is used to test predefined leases, if
any, and also called once if no valid lease can be identified.   For
more information, see
.B dhclient-lease(8).
.PP
 \fBmedium "\fImedia setup\fB";\fR
.PP
d363 1
a363 1
.B medium
d365 9
a373 8
automatically determine the type of network to which they are
connected.  The media setup string is a system-dependent parameter
which is passed to the dhcp client configuration script when
initializing the interface.  On Unix and Unix-like systems, the
argument is passed on the ifconfig command line when configuring the
interface.
.PP
The dhcp client automatically declares this parameter if it used a
d375 1
a375 1
.B media
d379 19
a397 15
.PP
 \fBrenew\fR \fIdate\fB;\fR
.PP
 \fBrebind\fR \fIdate\fB;\fR
.PP
 \fBexpire\fR \fIdate\fB;\fR
.PP
The \fBrenew\fR statement defines the time at which the dhcp client
should begin trying to contact its server to renew a lease that it is
using.   The \fBrebind\fR statement defines the time at which the dhcp
client should begin to try to contact \fIany\fR dhcp server in order
to renew its lease.   The \fBexpire\fR statement defines the time at
which the dhcp client must stop using a lease if it has not been able
to contact a server in order to renew it.
.PP
d399 1
a399 1
DHCP client, but must also be configured in predefined leases - a
d402 1
a402 1
.PP
d404 7
a410 4
.PP
 \fI<weekday> <year>\fB/\fI<month>\fB/\fI<day>
<hour>\fB:\fI<minute>\fB:\fI<second>\fR
.PP
d412 14
a425 11
lease expires - it's specified as a number from zero to six, with zero
being Sunday.  When declaring a predefined lease, it can always be
specified as zero.  The year is specified with the century, so it
should generally be four digits except for really long leases.  The
month is specified as a number starting with 1 for January.  The day
of the month is likewise specified starting with 1.  The hour is a
number between 0 and 23, the minute a number between 0 and 69, and the
second also a number between 0 and 69.
.SH ALIAS DECLARATIONS
 \fBalias { \fI declarations ... \fB}\fR
.PP
d429 5
a433 5
permanent IP address even while roaming.   The Internet Software
Consortium DHCP client doesn't support roaming with fixed addresses
directly, but in order to facilitate such experimentation, the dhcp
client can be set up to configure an IP alias using the
.B alias
d435 19
a453 15
.PP
The alias declaration resembles a lease declaration, except that
options other than the subnet-mask option are ignored by the standard
client configuration script, and expiry times are ignored.  A typical
alias declaration includes an interface declaration, a fixed-address
declaration for the IP alias address, and a subnet-mask option
declaration.   A medium statement should never be included in an alias
declaration.
.SH OTHER DECLARATIONS
 \fBreject \fIip-address\fB;\fR
.PP
The reject statement causes the DHCP client to reject offers from
servers who use the specified address as a server identifier.   This
can be used to avoid being configured by rogue or misconfigured dhcp
servers, although it should be a last resort - better to track down
d455 4
a458 3
.PP
 \fBinterface "\fIname\fB" { \fIdeclarations ... \fB }
.PP
d460 2
a461 2
behaviour depending on which interface is being configured.   All
timing parameters and declarations other than lease and alias
d464 8
a471 6
specified name.   Interfaces for which there is no interface
declaration will use the parameters declared outside of any interface
declaration, or the default settings.
.PP
 \fBmedia "\fImedia setup\fB"\fI [ \fB, "\fImedia setup\fB", \fI... ]\fB;\fR
.PP
d473 1
a473 1
.B media
d475 8
a482 8
be tried while attempting to acquire an IP address.   The dhcp client
will cycle through each media setup string on the list, configuring
the interface using that setup and attempting to boot, and then trying
the next one.   This can be used for network interfaces which aren't
capable of sensing the media type unaided - whichever media type
succeeds in getting a request to the server and hearing the reply is
probably right (no guarantees).
.PP
d484 16
a499 16
acquisition (the DHCPDISCOVER and DHCPOFFER packets).   Once an
address has been acquired, the dhcp client will record it in its lease
database and will record the media type used to acquire the address.
Whenever the client tries to renew the lease, it will use that same
media type.   The lease must expire before the client will go back to
cycling through media types.
.SH SAMPLE
The following configuration file is used on a laptop running NetBSD
1.3.   The laptop has an IP alias of 192.5.5.213, and has one
interface, ep0 (a 3Com 3C589C).   Booting intervals have been
shortened somewhat from the default, because the client is known to
spend most of its time on networks with little DHCP activity.   The
laptop does roam to multiple networks.

.nf

d525 22
a546 12
.fi
This is a very complicated dhclient.conf file - in general, yours
should be much simpler.   In many cases, it's sufficient to just
create an empty dhclient.conf file - the defaults are usually fine.
.SH SEE ALSO
dhcp-options(5), dhclient.leases(5), dhcpd(8), dhcpd.conf(5), RFC2132,
RFC2131.
.SH AUTHOR
.B dhclient(8)
was written by Ted Lemon <mellon@@vix.com>
under a contract with Vixie Labs.   Funding
for this project was provided by the Internet Software Corporation.
d548 1
a548 1
.B http://www.isc.org/isc.
@


1.11
log
@ip address -> IP address;
rtadvd.conf(5): positve -> positive;

ok miod@@
@
text
@d498 1
a498 1
interface, ep0 (a 3com 3C589C).   Booting intervals have been
@


1.10
log
@typos;
ok millert@@
@
text
@d341 1
a341 1
statement is used to set the ip address of a particular lease.   This
@


1.9
log
@typo; moritz@@jodeit.org
@
text
@d75 1
a75 3
.B timeout
.I time
.B ;
d392 1
a392 1
argument is passed on the ifconfig command line when configuring te
d489 1
a489 1
acquisition (the DHCPDISCOVER and DHCPOFFER packtes).   Once an
@


1.8
log
@dhcp 2.0pl5 merge/cleanup/deadcode slashing. still needs more eyes on this
but appears to work better than what's been in-tree before for dealing with
stupid dhcp servers.
@
text
@d297 1
a297 1
TIMING\fR) decide that it is not going to succeed in contacting a
@


1.7
log
@Fix various typos; spotted by gluk@@ptci.ru.
@
text
@d251 1
a251 1
defined in the
d262 2
a263 2
If for some set of options the client should first a value it
supplies, and then use the values supplied by
d269 2
a270 1
allow more than one value to be given.
d279 3
a281 3
If for some set of options the client should first a value it
supplies, and then use the values supplied by
the server, if any, these values can be defined in the
d286 2
a287 1
allow more than one value to be given.
d297 1
a297 1
TIMING\fR) that it is not going to succeed in contacting a
d383 1
a383 1
.B dhclient-script(8).
d394 1
a394 1
argument is passed on the ifconfig command line when configuring the
d435 2
a436 2
number between 0 and 23, the minute a number between 0 and 60, and the
second also a number between 0 and 60.
d523 1
a523 1
    script "/sbin/dhclient-script";
@


1.6
log
@Fix obviously bad Xref
@
text
@d295 1
a295 1
TIMING\fR) decide that it is not going to succeed in contacting a
d392 1
a392 1
argument is passed on the ifconfig command line when configuring te
@


1.5
log
@fix spec. PR1217
@
text
@d381 1
a381 1
.B dhclient-lease(8).
@


1.4
log
@Trailing whitespace begone!
@
text
@d433 2
a434 2
number between 0 and 23, the minute a number between 0 and 69, and the
second also a number between 0 and 69.
@


1.3
log
@dhclient-script should be in sbin
@
text
@d251 1
a251 1
defined in the 
@


1.2
log
@move dhclient-script to /usr/bin by default; executables do not belong in /etc
@
text
@d521 1
a521 1
    script "/usr/bin/dhclient-script";
@


1.1
log
@move dhclient so that crunch can find it if needed
@
text
@d521 1
a521 1
    script "/etc/dhclient-script";
@

