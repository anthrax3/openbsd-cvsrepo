head	1.6;
access;
symbols
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.04.28.06.57.40;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2002.05.06.19.31.32;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.24.06.05.07;	author beck;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2001.01.03.16.04.38;	author ericj;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.29.00.25.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	98.08.18.03.43.25;	author deraadt;	state Exp;
branches
	1.1.8.1;
next	;

1.1.8.1
date	2000.10.07.04.25.50;	author jason;	state Exp;
branches;
next	;

1.4.2.1
date	2002.05.16.21.42.07;	author miod;	state Exp;
branches;
next	;

1.4.4.1
date	2002.05.17.04.48.12;	author jason;	state Exp;
branches;
next	;


desc
@@


1.6
log
@It is a big pleasure for me to remove this highe pile of gunk from the tree.
dhclient, dhcrelay and dhcpd have been factored out and cleaned up big time,
dhcpd and dhcrelay chroot itself, drop privileges and lock their bpf
descriptors after applyiing read/write filters now, and this pile of ISC code
with it's lovely char ServerName; /* Name of Server */ constructs is
obsolete.
theo ok, I owe you some beers for this pleasure
@
text
@/* errwarn.c

   Errors and warnings... */

/*
 * Copyright (c) 1996 The Internet Software Consortium.
 * All Rights Reserved.
 * Copyright (c) 1995 RadioMail Corporation.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of RadioMail Corporation, the Internet Software
 *    Consortium nor the names of its contributors may be used to endorse
 *    or promote products derived from this software without specific
 *    prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RADIOMAIL CORPORATION, THE INTERNET
 * SOFTWARE CONSORTIUM AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL RADIOMAIL CORPORATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software was written for RadioMail Corporation by Ted Lemon
 * under a contract with Vixie Enterprises.   Further modifications have
 * been made for the Internet Software Consortium under a contract
 * with Vixie Laboratories.
 */

#include "dhcpd.h"
#include <errno.h>

static void do_percentm PROTO ((char *obuf, size_t size, char *ibuf));

static char mbuf [1024];
static char fbuf [1024];

int warnings_occurred;

/* Log an error message, then exit... */

void error (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
{
  va_list list;

  do_percentm (fbuf, sizeof(fbuf), fmt);

  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);

#ifndef DEBUG
  syslog (log_priority | LOG_ERR, "%s", mbuf);
#endif

  /* Also log it to stderr? */
  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }

  syslog (LOG_CRIT, "exiting.");
  if (log_perror) {
	fprintf (stderr, "exiting.\n");
	fflush (stderr);
  }
  cleanup ();
  exit (1);
}

/* Log a warning message... */

int warn (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
{
  va_list list;

  do_percentm (fbuf, sizeof(fbuf), fmt);

  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);

#ifndef DEBUG
  syslog (log_priority | LOG_ERR, "%s", mbuf);
#endif

  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }

  return 0;
}

/* Log a note... */

int note (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
{
  va_list list;

  do_percentm (fbuf, sizeof(fbuf), fmt);

  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);

#ifndef DEBUG
  syslog (log_priority | LOG_INFO, "%s", mbuf);
#endif

  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }

  return 0;
}

/* Log a debug message... */

int debug (char * fmt, ...)
     KandR (char *fmt;)
     va_dcl
{
  va_list list;

  do_percentm (fbuf, sizeof(fbuf), fmt);

  va_start (list, fmt);
  vsnprintf (mbuf, sizeof mbuf, fbuf, list);
  va_end (list);

#ifndef DEBUG
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
#endif

  if (log_perror) {
	  write (2, mbuf, strlen (mbuf));
	  write (2, "\n", 1);
  }

  return 0;
}

/* Find %m in the input string and substitute an error message string. */

static void do_percentm (obuf, size, ibuf)
     char *obuf;
     size_t size;
     char *ibuf;
{
	char ch;
	char *s = ibuf;
	char *t = obuf;
	size_t prlen;
	size_t fmt_left;
	int saved_errno = errno;

	/* 
	 * We wouldn't need this mess if printf handled %m, or if 
	 * strerror() had been invented before syslog().
	 */
	for (fmt_left = size; (ch = *s); ++s) {
		if (ch == '%' && s[1] == 'm') {
			++s;
			prlen = snprintf(t, fmt_left, "%s",
			    strerror(saved_errno));
			if (prlen >= fmt_left)
				prlen = fmt_left - 1;
			t += prlen;
			fmt_left -= prlen;
		} else {
			if (fmt_left > 1) {
				*t++ = ch;
				fmt_left--;
			}
		}
	}
	*t = '\0';
}


int parse_warn (char * fmt, ...)
	KandR (char *fmt;)
	va_dcl
{
	va_list list;
	static char spaces [] = "                                                                                ";
	
	do_percentm (mbuf, sizeof(mbuf), fmt);
	snprintf (fbuf, sizeof fbuf, "%s line %d: %s",
		  tlname, lexline, mbuf);
	VA_start (list, fmt);
	vsnprintf (mbuf, sizeof mbuf, fbuf, list);
	va_end (list);

#ifndef DEBUG
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
	if (lexline < 81)
		syslog (log_priority | LOG_ERR,
			"%s^", &spaces [sizeof spaces - lexchar]);
#endif

	if (log_perror) {
		write (2, mbuf, strlen (mbuf));
		write (2, "\n", 1);
		write (2, token_line, strlen (token_line));
		write (2, "\n", 1);
		write (2, spaces, lexchar - 1);
		write (2, "^\n", 2);
	}

	warnings_occurred = 1;

	return 0;
}
@


1.5
log
@syslog() paranoia; never pass in a non-const buffer w/o using "%s"
@
text
@@


1.4
log
@dhcp 2.0pl5 merge/cleanup/deadcode slashing. still needs more eyes on this
but appears to work better than what's been in-tree before for dealing with
stupid dhcp servers.
@
text
@d68 1
a68 1
  syslog (log_priority | LOG_ERR, mbuf);
d101 1
a101 1
  syslog (log_priority | LOG_ERR, mbuf);
d127 1
a127 1
  syslog (log_priority | LOG_INFO, mbuf);
d153 1
a153 1
  syslog (log_priority | LOG_DEBUG, mbuf);
d217 2
a218 2
	syslog (log_priority | LOG_ERR, mbuf);
	syslog (log_priority | LOG_ERR, token_line);
@


1.4.4.1
log
@Pull in patch from current:
Fix (millert):
syslog() paranoia; never pass in a non-const buffer w/o using "%s"

(This was lost during the 1.3->1.4 update)
@
text
@d68 1
a68 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d101 1
a101 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d127 1
a127 1
  syslog (log_priority | LOG_INFO, "%s", mbuf);
d153 1
a153 1
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d217 2
a218 2
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
@


1.4.2.1
log
@MFC, requested by millert:
syslog() paranoia; never pass in a non-const buffer w/o using "%s"

(This was lost during the 1.3->1.4 update)
@
text
@d68 1
a68 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d101 1
a101 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d127 1
a127 1
  syslog (log_priority | LOG_INFO, "%s", mbuf);
d153 1
a153 1
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d217 2
a218 2
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
@


1.3
log
@
-Wall cleanup.
roll a function for writing out pidfile's instead of rolling it for each
program.
be careful with a few more buffers
@
text
@a42 5
#ifndef lint
static char copyright[] =
"$Id: errwarn.c,v 1.2 2000/06/29 00:25:42 deraadt Exp $ Copyright (c) 1996 The Internet Software Consortium.  All rights reserved.\n";
#endif /* not lint */

d46 1
a46 1
static void do_percentm PROTO ((char *obuf, char *ibuf));
d55 1
a55 1
void error (ANSI_DECL(char *) fmt, VA_DOTDOTDOT)
d61 1
a61 1
  do_percentm (fbuf, fmt);
d63 1
a63 1
  VA_start (list, fmt);
d68 1
a68 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d88 1
a88 1
int warn (ANSI_DECL (char *) fmt, VA_DOTDOTDOT)
d94 1
a94 1
  do_percentm (fbuf, fmt);
d96 1
a96 1
  VA_start (list, fmt);
d101 1
a101 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d114 1
a114 1
int note (ANSI_DECL (char *) fmt, VA_DOTDOTDOT)
d120 1
a120 1
  do_percentm (fbuf, fmt);
d122 1
a122 1
  VA_start (list, fmt);
d127 1
a127 1
  syslog (log_priority | LOG_INFO, "%s", mbuf);
d140 1
a140 1
int debug (ANSI_DECL (char *) fmt, VA_DOTDOTDOT)
d146 1
a146 1
  do_percentm (fbuf, fmt);
d148 1
a148 1
  VA_start (list, fmt);
d153 1
a153 1
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d166 1
a166 1
static void do_percentm (obuf, ibuf)
d168 1
d171 1
d173 22
a194 20
	char *p = obuf;
	int infmt = 0;
	const char *m;

	while (*s)
	{
		if (infmt)
		{
			if (*s == 'm')
			{
#ifndef __CYGWIN32__
				m = strerror (errno);
#else
				m = pWSAError ();
#endif
				if (!m)
					m = "<unknown error>";
				strcpy (p - 1, m);
				p += strlen (p);
				++s;
a195 9
			else
				*p++ = *s++;
			infmt = 0;
		}
		else
		{
			if (*s == '%')
				infmt = 1;
			*p++ = *s++;
d198 1
a198 1
	*p = 0;
d202 1
a202 1
int parse_warn (ANSI_DECL (char *) fmt, VA_DOTDOTDOT)
d209 1
a209 2
	do_percentm (mbuf, fmt);
#ifndef NO_SNPRINTF
a211 5
#else
	sprintf (fbuf, "%s line %d: %s",
		 tlname, lexline, mbuf);
#endif
	
d217 2
a218 2
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
a236 153

void
write_pidfile(file, pid)
        char *file;
        pid_t pid;
{
	FILE *fp;

	(void)unlink(file);

	if ((fp = fopen(file , "w")) != NULL) {
		fprintf(fp, "%d\n", pid);
		(void)fclose(fp);
	}
}

#ifdef NO_STRERROR
char *strerror (err)
	int err;
{
	extern char *sys_errlist [];
	extern int sys_nerr;
	static char errbuf [128];

	if (err < 0 || err >= sys_nerr) {
		sprintf (errbuf, "Error %d", err);
		return errbuf;
	}
	return sys_errlist [err];
}
#endif /* NO_STRERROR */

#ifdef _WIN32
char *pWSAError ()
{
  int err = WSAGetLastError ();

  switch (err)
    {
    case WSAEACCES:
      return "Permission denied";
    case WSAEADDRINUSE:
      return "Address already in use";
    case WSAEADDRNOTAVAIL:
      return "Cannot assign requested address";
    case WSAEAFNOSUPPORT:
      return "Address family not supported by protocol family";
    case WSAEALREADY:
      return "Operation already in progress";
    case WSAECONNABORTED:
      return "Software caused connection abort";
    case WSAECONNREFUSED:
      return "Connection refused";
    case WSAECONNRESET:
      return "Connection reset by peer";
    case WSAEDESTADDRREQ:
      return "Destination address required";
    case WSAEFAULT:
      return "Bad address";
    case WSAEHOSTDOWN:
      return "Host is down";
    case WSAEHOSTUNREACH:
      return "No route to host";
    case WSAEINPROGRESS:
      return "Operation now in progress";
    case WSAEINTR:
      return "Interrupted function call";
    case WSAEINVAL:
      return "Invalid argument";
    case WSAEISCONN:
      return "Socket is already connected";
    case WSAEMFILE:
      return "Too many open files";
    case WSAEMSGSIZE:
      return "Message too long";
    case WSAENETDOWN:
      return "Network is down";
    case WSAENETRESET:
      return "Network dropped connection on reset";
    case WSAENETUNREACH:
      return "Network is unreachable";
    case WSAENOBUFS:
      return "No buffer space available";
    case WSAENOPROTOOPT:
      return "Bad protocol option";
    case WSAENOTCONN:
      return "Socket is not connected";
    case WSAENOTSOCK:
      return "Socket operation on non-socket";
    case WSAEOPNOTSUPP:
      return "Operation not supported";
    case WSAEPFNOSUPPORT:
      return "Protocol family not supported";
    case WSAEPROCLIM:
      return "Too many processes";
    case WSAEPROTONOSUPPORT:
      return "Protocol not supported";
    case WSAEPROTOTYPE:
      return "Protocol wrong type for socket";
    case WSAESHUTDOWN:
      return "Cannot send after socket shutdown";
    case WSAESOCKTNOSUPPORT:
      return "Socket type not supported";
    case WSAETIMEDOUT:
      return "Connection timed out";
    case WSAEWOULDBLOCK:
      return "Resource temporarily unavailable";
    case WSAHOST_NOT_FOUND:
      return "Host not found";
#if 0
    case WSA_INVALID_HANDLE:
      return "Specified event object handle is invalid";
    case WSA_INVALID_PARAMETER:
      return "One or more parameters are invalid";
    case WSAINVALIDPROCTABLE:
      return "Invalid procedure table from service provider";
    case WSAINVALIDPROVIDER:
      return "Invalid service provider version number";
    case WSA_IO_PENDING:
      return "Overlapped operations will complete later";
    case WSA_IO_INCOMPLETE:
      return "Overlapped I/O event object not in signaled state";
    case WSA_NOT_ENOUGH_MEMORY:
      return "Insufficient memory available";
#endif
    case WSANOTINITIALISED:
      return "Successful WSAStartup not yet performer";
    case WSANO_DATA:
      return "Valid name, no data record of requested type";
    case WSANO_RECOVERY:
      return "This is a non-recoverable error";
#if 0
    case WSAPROVIDERFAILEDINIT:
      return "Unable to initialize a service provider";
    case WSASYSCALLFAILURE:
      return "System call failure";
#endif
    case WSASYSNOTREADY:
      return "Network subsystem is unavailable";
    case WSATRY_AGAIN:
      return "Non-authoritative host not found";
    case WSAVERNOTSUPPORTED:
      return "WINSOCK.DLL version out of range";
    case WSAEDISCON:
      return "Graceful shutdown in progress";
#if 0
    case WSA_OPERATION_ABORTED:
      return "Overlapped operation aborted";
#endif
    }
  return "Unknown WinSock error";
}
#endif /* _WIN32 */
@


1.2
log
@use %s with syslog; millert wrote an identical patch
@
text
@d45 1
a45 1
"$Id: errwarn.c,v 1.1 1998/08/18 03:43:25 deraadt Exp $ Copyright (c) 1996 The Internet Software Consortium.  All rights reserved.\n";
a64 1
  extern int logged_in;
d252 15
@


1.1
log
@ISC dhcp, needs security audit for sure
@
text
@d45 1
a45 1
"$Id: errwarn.c,v 1.2 1998/07/26 15:34:18 mycroft Exp $ Copyright (c) 1996 The Internet Software Consortium.  All rights reserved.\n";
d74 1
a74 1
  syslog (log_priority | LOG_ERR, mbuf);
d107 1
a107 1
  syslog (log_priority | LOG_ERR, mbuf);
d133 1
a133 1
  syslog (log_priority | LOG_INFO, mbuf);
d159 1
a159 1
  syslog (log_priority | LOG_DEBUG, mbuf);
d234 2
a235 2
	syslog (log_priority | LOG_ERR, mbuf);
	syslog (log_priority | LOG_ERR, token_line);
@


1.1.8.1
log
@Pull in patch from current:
Fix (deraadt):
use %s with syslog; millert wrote an identical patch
@
text
@d45 1
a45 1
"$Id: errwarn.c,v 1.2 2000/06/29 00:25:42 deraadt Exp $ Copyright (c) 1996 The Internet Software Consortium.  All rights reserved.\n";
d74 1
a74 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d107 1
a107 1
  syslog (log_priority | LOG_ERR, "%s", mbuf);
d133 1
a133 1
  syslog (log_priority | LOG_INFO, "%s", mbuf);
d159 1
a159 1
  syslog (log_priority | LOG_DEBUG, "%s", mbuf);
d234 2
a235 2
	syslog (log_priority | LOG_ERR, "%s", mbuf);
	syslog (log_priority | LOG_ERR, "%s", token_line);
@


