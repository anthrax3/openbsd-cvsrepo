head	1.4;
access;
symbols
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.12
	OPENBSD_2_8:1.1.0.10
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.04.28.06.57.40;	author henning;	state dead;
branches;
next	1.3;

1.3
date	2002.07.03.23.11.29;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.24.06.05.06;	author beck;	state Exp;
branches;
next	1.1;

1.1
date	98.08.18.03.43.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@It is a big pleasure for me to remove this highe pile of gunk from the tree.
dhclient, dhcrelay and dhcpd have been factored out and cleaned up big time,
dhcpd and dhcrelay chroot itself, drop privileges and lock their bpf
descriptors after applyiing read/write filters now, and this pile of ISC code
with it's lovely char ServerName; /* Name of Server */ constructs is
obsolete.
theo ok, I owe you some beers for this pleasure
@
text
@/* alloc.c

   Memory allocation... */

/*
 * Copyright (c) 1995, 1996, 1998 The Internet Software Consortium.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of The Internet Software Consortium nor the names
 *    of its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This software has been written for the Internet Software Consortium
 * by Ted Lemon <mellon@@fugue.com> in cooperation with Vixie
 * Enterprises.  To learn more about the Internet Software Consortium,
 * see ``http://www.vix.com/isc''.  To learn more about Vixie
 * Enterprises, see ``http://www.vix.com''.
 */

#include "dhcpd.h"

struct dhcp_packet *dhcp_free_list;
struct packet *packet_free_list;

void * dmalloc(size, name)
	int size;
	char *name;
{
	void *foo = calloc(size, sizeof(char));
	if (!foo)
		warn ("No memory for %s.", name);
	return foo;
}

void dfree(ptr, name)
	void *ptr;
	char *name;
{
	if (!ptr) {
		warn ("dfree %s: free on null pointer.", name);
		return;
	}
	free (ptr);
}

struct packet *new_packet(name)
	char *name;
{
	struct packet *rval;
	rval = (struct packet *)dmalloc(sizeof(struct packet), name);
	return rval;
}

struct dhcp_packet *new_dhcp_packet(name)
	char *name;
{
	struct dhcp_packet *rval;
	rval = (struct dhcp_packet *)dmalloc(sizeof(struct dhcp_packet),
	          name);
	return rval;
}

struct tree *new_tree(name)
	char *name;
{
	struct tree *rval = dmalloc(sizeof(struct tree), name);
	return rval;
}

struct string_list *new_string_list(size, name)
	size_t size;
	char * name;
{
	struct string_list *rval;

	rval =dmalloc(sizeof(struct string_list) + size, name);
	if (rval != NULL) 
		rval->string = ((char *)rval) + sizeof(struct string_list);
	return rval;
}

struct tree_cache *free_tree_caches;

struct tree_cache *new_tree_cache(name)
	char *name;
{
	struct tree_cache *rval;

	if (free_tree_caches) {
		rval = free_tree_caches;
		free_tree_caches =
			(struct tree_cache *)(rval->value);
	} else {
		rval = dmalloc(sizeof(struct tree_cache), name);
		if (!rval)
			error("unable to allocate tree cache for %s.", name);
	}
	return rval;
}

struct hash_table *new_hash_table(count, name)
	int count;
	char *name;
{
	struct hash_table *rval;
	rval = dmalloc(sizeof (struct hash_table)
          - (DEFAULT_HASH_SIZE * sizeof(struct hash_bucket *))
          + (count * sizeof(struct hash_bucket *)), name);
	if (rval == NULL)
		return NULL;
	rval->hash_count = count;
	return rval;
}

struct hash_bucket *new_hash_bucket(name)
	char *name;
{
	struct hash_bucket *rval = dmalloc(sizeof(struct hash_bucket), name);
	return rval;
}

struct lease *new_leases(n, name)
	int n;
	char *name;
{
	struct lease *rval = dmalloc(n * sizeof(struct lease), name);
	return rval;
}

struct lease *new_lease(name)
	char *name;
{
	struct lease *rval = dmalloc(sizeof(struct lease), name);
	return rval;
}

struct subnet *new_subnet(name)
	char *name;
{
	struct subnet *rval = dmalloc(sizeof(struct subnet), name);
	return rval;
}

struct class *new_class(name)
	char *name;
{
	struct class *rval = dmalloc(sizeof(struct class), name);
	return rval;
}

struct shared_network *new_shared_network(name)
	char *name;
{
	struct shared_network *rval =
		dmalloc (sizeof(struct shared_network), name);
	return rval;
}

struct group *new_group(name)
	char *name;
{
	struct group *rval =
		dmalloc(sizeof(struct group), name);
	return rval;
}

struct protocol *new_protocol(name)
	char *name;
{
	struct protocol *rval = dmalloc(sizeof(struct protocol), name);
	return rval;
}

struct lease_state *free_lease_states;

struct lease_state *new_lease_state (name)
	char *name;
{
	struct lease_state *rval;

	if (free_lease_states) {
		rval = free_lease_states;
		free_lease_states =
			(struct lease_state *)(free_lease_states->next);
	} else {
		rval = dmalloc (sizeof (struct lease_state), name);
	}
	return rval;
}

struct domain_search_list *new_domain_search_list (name)
	char *name;
{
	struct domain_search_list *rval =
		dmalloc (sizeof (struct domain_search_list), name);
	return rval;
}

struct name_server *new_name_server (name)
	char *name;
{
	struct name_server *rval =
		dmalloc (sizeof (struct name_server), name);
	return rval;
}

void free_name_server (ptr, name)
	struct name_server *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_domain_search_list (ptr, name)
	struct domain_search_list *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_lease_state (ptr, name)
	struct lease_state *ptr;
	char *name;
{
	if (ptr->prl)
		dfree (ptr->prl, name);
	ptr->next = free_lease_states;
	free_lease_states = ptr;
}

void free_protocol (ptr, name)
	struct protocol *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_group (ptr, name)
	struct group *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_shared_network (ptr, name)
	struct shared_network *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_class (ptr, name)
	struct class *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_subnet (ptr, name)
	struct subnet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_lease (ptr, name)
	struct lease *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_bucket (ptr, name)
	struct hash_bucket *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_hash_table (ptr, name)
	struct hash_table *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree_cache (ptr, name)
	struct tree_cache *ptr;
	char *name;
{
	ptr->value = (unsigned char *)free_tree_caches;
	free_tree_caches = ptr;
}

void free_packet (ptr, name)
	struct packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_dhcp_packet (ptr, name)
	struct dhcp_packet *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_tree (ptr, name)
	struct tree *ptr;
	char *name;
{
	dfree (ptr, name);
}

void free_string_list (ptr, name)
	struct string_list *ptr;
	char *name;
{
	dfree (ptr, name);
}
@


1.3
log
@missing or incorrect checks for malloc failure; cloder@@acm.org
@
text
@@


1.2
log
@dhcp 2.0pl5 merge/cleanup/deadcode slashing. still needs more eyes on this
but appears to work better than what's been in-tree before for dealing with
stupid dhcp servers.
@
text
@d132 2
@


1.1
log
@ISC dhcp, needs security audit for sure
@
text
@d6 1
a6 1
 * Copyright (c) 1995, 1996 The Internet Software Consortium.
a42 5
#ifndef lint
static char copyright[] =
"$Id: alloc.c,v 1.1.1.2 1997/06/03 02:49:18 mellon Exp $ Copyright (c) 1995, 1996 The Internet Software Consortium.  All rights reserved.\n";
#endif /* not lint */

d48 1
a48 1
VOIDPTR dmalloc (size, name)
d52 1
a52 1
	VOIDPTR foo = (VOIDPTR)malloc (size);
a54 1
	memset (foo, 0, size);
d58 2
a59 2
void dfree (ptr, name)
	VOIDPTR ptr;
d69 1
a69 1
struct packet *new_packet (name)
d73 1
a73 1
	rval = (struct packet *)dmalloc (sizeof (struct packet), name);
d77 1
a77 1
struct dhcp_packet *new_dhcp_packet (name)
d81 2
a82 2
	rval = (struct dhcp_packet *)dmalloc (sizeof (struct dhcp_packet),
					      name);
d86 1
a86 1
struct tree *new_tree (name)
d89 13
a101 1
	struct tree *rval = dmalloc (sizeof (struct tree), name);
d107 1
a107 1
struct tree_cache *new_tree_cache (name)
d115 1
a115 1
			(struct tree_cache *)(rval -> value);
d117 1
a117 1
		rval = dmalloc (sizeof (struct tree_cache), name);
d119 1
a119 1
			error ("unable to allocate tree cache for %s.", name);
d124 1
a124 1
struct hash_table *new_hash_table (count, name)
d128 5
a132 7
	struct hash_table *rval = dmalloc (sizeof (struct hash_table)
					   - (DEFAULT_HASH_SIZE
					      * sizeof (struct hash_bucket *))
					   + (count
					      * sizeof (struct hash_bucket *)),
					   name);
	rval -> hash_count = count;
d136 1
a136 1
struct hash_bucket *new_hash_bucket (name)
d139 1
a139 1
	struct hash_bucket *rval = dmalloc (sizeof (struct hash_bucket), name);
d143 1
a143 1
struct lease *new_leases (n, name)
d147 1
a147 1
	struct lease *rval = dmalloc (n * sizeof (struct lease), name);
d151 1
a151 1
struct lease *new_lease (name)
d154 1
a154 1
	struct lease *rval = dmalloc (sizeof (struct lease), name);
d158 1
a158 1
struct subnet *new_subnet (name)
d161 1
a161 1
	struct subnet *rval = dmalloc (sizeof (struct subnet), name);
d165 1
a165 1
struct class *new_class (name)
d168 1
a168 1
	struct class *rval = dmalloc (sizeof (struct class), name);
d172 1
a172 1
struct shared_network *new_shared_network (name)
d176 1
a176 1
		dmalloc (sizeof (struct shared_network), name);
d180 1
a180 1
struct group *new_group (name)
d184 1
a184 1
		dmalloc (sizeof (struct group), name);
d188 1
a188 1
struct protocol *new_protocol (name)
d191 1
a191 1
	struct protocol *rval = dmalloc (sizeof (struct protocol), name);
d205 1
a205 1
			(struct lease_state *)(free_lease_states -> next);
d232 1
a232 1
	dfree ((VOIDPTR)ptr, name);
d239 1
a239 1
	dfree ((VOIDPTR)ptr, name);
d246 3
a248 1
	ptr -> next = free_lease_states;
d256 1
a256 1
	dfree ((VOIDPTR)ptr, name);
d263 1
a263 1
	dfree ((VOIDPTR)ptr, name);
d270 1
a270 1
	dfree ((VOIDPTR)ptr, name);
d277 1
a277 1
	dfree ((VOIDPTR)ptr, name);
d284 1
a284 1
	dfree ((VOIDPTR)ptr, name);
d291 1
a291 1
	dfree ((VOIDPTR)ptr, name);
d298 1
a298 1
	dfree ((VOIDPTR)ptr, name);
d305 1
a305 1
	dfree ((VOIDPTR)ptr, name);
d312 1
a312 1
	ptr -> value = (unsigned char *)free_tree_caches;
d320 1
a320 1
	dfree ((VOIDPTR)ptr, name);
d327 1
a327 1
	dfree ((VOIDPTR)ptr, name);
d334 8
a341 1
	dfree ((VOIDPTR)ptr, name);
@

