head	1.8;
access;
symbols
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	sendmail_8_9_1:1.1.1.2
	UCB:1.1.1
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.8
date	2000.04.19.16.08.54;	author millert;	state dead;
branches;
next	1.7;

1.7
date	99.02.05.05.59.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.01.01.20.31.47;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.07.12.19.41.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.15.07.23.36;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.12.14.21.15.06;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.01.29.01.40.09;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.08;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.12.17.09.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@cvs missed removing these before
@
text
@

	     K N O W N   B U G S   I N   S E N D M A I L
			     (for 8.9.0)


The following are bugs or deficiencies in sendmail that I am aware of
but which have not been fixed in the current release.  You probably
want to get the most up to date version of this from ftp.sendmail.org	
in /pub/sendmail/KNOWNBUGS.  For descriptions of bugs that have been
fixed, see the file RELEASE_NOTES (in the root directory of the sendmail
distribution).

This list is not guaranteed to be complete.


* Null bytes are not handled properly in headers.

  Sendmail should handle full binary data.  As it stands, it handles
  all values in the body, but only 0x01-0x80 and 0xA0-0xFF in
  the header.  Notably missing is 0x00, which would require a major
  restructuring of the code -- for example, almost no C library support
  could be used to handle strings.

* Duplicate error messages.

  Sometimes identical, duplicate error messages can be generated.  As
  near as I can tell, this is rare and relatively innocuous.

* $c (hop count) macro improperly set.

  The $c macro is supposed to contain the current hop count, for use
  when calling a mailer.  This macro is initialized too early, and
  is always zero (or the value of the -c command line flag, if any).
  This macro will probably be removed entirely in a future release;
  I don't believe there are any mailers left that require it.

* If you EXPN a list or user that has a program mailer, the output of
  EXPN will include ``@@local.host.name''.  You can't actually mail to
  this address.  It's not clear what the right behavior is in this
  circumstance.

* \231 considered harmful.

  Header addresses that have the \231 character (and possibly others
  in the range \201 - \237) behave in odd and usually unexpected ways.

* accept() problem on SVR4.

  Apparently, the sendmail daemon loop (doing accept()s on the network)
  can get into a weird state on SVR4; it starts logging ``SYSERR:
  getrequests: accept: Protocol Error''.  The workaround is to kill
  and restart the sendmail daemon.  We don't have an SVR4 system at
  Berkeley that carries more than token mail load, so I can't validate
  this.  It is likely to be a glitch in the sockets emulation, since
  "Protocol Error" is not possible error code with Berkeley TCP/IP.

  I've also had someone report the message ``sendmail: accept:
  SIOCGPGRP failed errno 22'' on an SVR4 system.  This message is
  not in the sendmail source code, so I assume it is also a bug
  in the sockets emulation.  (Errno 22 is EINVAL "Invalid Argument"
  on all the systems I have available, including Solaris 2.x.)
  Apparently, this problem is due to linking -lc before -lsocket;
  if you are having this problem, check your Makefile.

* accept() problem on Linux.

  The accept() in sendmail daemon loop can return ETIMEDOUT.  An
  error is reported to syslog:

  Jun  9 17:14:12 hostname sendmail[207]: NOQUEUE: SYSERR(root):
			getrequests: accept: Connection timed out

  "Connection timed out" is not documented as a valid return from
  accept(2) and this was believed to be a bug in the Linux kernel.
  Later information from the Linux kernel group states that Linux
  2.0 kernels follow RFC1122 while sendmail follows the original BSD
  (now POSIX 1003.1g draft) specification.  The 2.1.X and later kernels
  will follow the POSIX draft.

* Excessive mailing list nesting can run out of file descriptors.

  If you have a mailing list that includes lots of other mailing
  lists, each of which has a separate owner, you can run out of
  file descriptors.  Each mailing list with a separate owner uses
  one open file descriptor (prior to 8.6.6 it was three open
  file descriptors per list).  This is particularly egregious if
  you have your connection cache set to be large.

* Connection caching breaks if you pass the port number as an argument.

  If you have a definition such as:

	  Mport,          P=[IPC], F=kmDFMuX, S=11/31, R=21,
			  M=2100000, T=DNS/RFC822/SMTP,
			  A=IPC [127.0.0.1] $h

  (i.e., where $h is the port number instead of the host name) the
  connection caching code will break because it won't notice that
  two messages addressed to different ports should use different
  connections.

* ESMTP SIZE underestimates the size of a message

  Sendmail makes no allowance for headers that it adds, nor does it
  account for the SMTP on-the-wire \r\n expansion.  It probably doesn't
  allow for 8->7 bit MIME conversions either.

* Paths to programs being executed and the mode of program files are
  not checked.  Essentially, the RunProgramInUnsafeDirPath and
  RunWritableProgram bits in the DontBlameSendmail option are always
  set.  This is not a problem if your system is well managed (that is,
  if binaries and system directories are mode 755 instead of something
  foolish like 777).

* 8-bit data in GECOS field

  If the GECOS (personal name) information in the passwd file contains
  8-bit characters, those characters can be included in the message
  header, which can cause problems when sending SMTP to hosts that
  only accept 7-bit characters.

* 8->7 bit MIME conversion

  When sendmail is doing 8->7 bit MIME conversions, and the message
  contains certain MIME body types that cannot be converted to 7-bit,
  sendmail will strip the message to 7-bit.

* 7->8 bit MIME conversion

  If a message that is encoded as 7-bit MIME is converted to 8-bit and
  that message when decoded is illegal (e.g., because of long lines or
  illegal characters), sendmail can produce an illegal message.

* MIME encoded full name phrases in the From: header

  If a full name phrase includes characters from MustQuoteChars, sendmail  
  will quote the entire full name phrase. If MustQuoteChars includes  
  characters which are not special characters according to STD 11 (RFC  
  822), this quotation can interfere with MIME encoded full name phrases. 
  By default, sendmail includes the single quote character (') in
  MustQuoteChars even though it is not listed as a special character in
  STD 11.

* bestmx map with -z flag truncates the list of MX hosts

  A bestmx map configured with the -z flag will truncate the list
  of MX hosts.  This prevents creation of strings which are too
  long for ruleset parsing.  This can have an adverse effect on the
  relay_based_on_MX feature.

* Saving to ~sender/dead.letter fails if su'ed to root

  If ErrorMode is set to print and an error in sending mail occurs,
  the normal action is to print a message to the screen and append
  the message to a dead.letter file in the sender's home directory.
  In the case where the sender is using su to act as root, the file
  safety checks prevent sendmail from saving the dead.letter file
  because the sender's uid and the current real uid do not match.
  
* Berkeley DB 2.X race condition with fcntl() locking

  There is a race condition for Berkeley DB 2.X databases on
  operating systems which use fcntl() style locking, such as
  Solaris.  Sendmail locks the map before calling db_open() to
  prevent others from modifying the map while it is being opened.
  Unfortunately, Berkeley DB opens the map, closes it, and then
  reopens it.  fcntl() locking drops the lock when any file
  descriptor pointing to the file is closed, even if it is a
  different file descriptor than the one used to initially lock
  the file.  As a result there is a possibility that entries in a
  map might not be found during a map rebuild.  As a workaround,
  you can use makemap to build a map with a new name and then
  "mv" the new db file to replace the old one.

* File open timeouts not available on hard mounted NFS file systems

  Since SIGALRM does not interrupt an RPC call for hard mounted
  NFS file systems, it is impossible to implement a timeout on a file
  open operation.  Therefore, while the NFS server is not responding,
  attempts to open a file on that server will hang.  Systems with
  local mail delivery and NFS hard mounted home directories should be
  avoided, as attempts to open the forward files could hang.

(Version 8.36, last updated 2/4/1999)
@


1.7
log
@sendmail 8.9.3
@
text
@@


1.6
log
@sendmail 8.9.2
@
text
@d152 1
d154 32
a185 1
(Version 8.34, last updated 12/17/1998)
@


1.5
log
@something hosed the sendmail import; fix up by hand
@
text
@d68 2
a69 3
  Apparently, the accept() in sendmail daemon loop can return ETIMEDOUT
  and cause sendmail to sleep for 5 seconds during which time no new
  connections will be accepted.  An error is reported to syslog:
d145 1
d147 7
a153 1
(Version 8.32, last updated 6/30/98)
@


1.4
log
@Sendmail 8.8.6.
@
text
@d4 1
a4 1
			     (for 8.8.6)
d40 1
a40 1
  this address.  It's not clear what the right behaviour is in this
d51 1
a51 1
  can get into a wierd state on SVR4; it starts logging ``SYSERR:
d76 5
a80 1
  accept(2) and this is believed to be a bug in the Linux kernel.
d110 6
d117 31
a147 1
(Version 8.25, last updated 6/13/97)
@


1.3
log
@Update to Sendmail 8.8.4, plus recent patches, plus OpenBSD support.
Also include entire example configuration subset.
Includes smrsh (using /usr/libexec/sm.bin).

Of the top of my head, the only things I removed from the distribution were
contrib/mail.local.linux, src/Makefiles, all the *.0 and *.ps files.
Our praliases man page replaces the distributed one, ours is better.
@
text
@d4 1
a4 1
			     (for 8.8)
d9 2
a10 2
want to get the most up to date version of this from FTP.CS.Berkeley.EDU
in /ucb/sendmail/KNOWNBUGS.  For descriptions of bugs that have been
a42 14
* MX records that point at non-existent hosts work strangly.

  Consider the DNS records:

	hostH	MX	1 hostA
		MX	2 hostB
	hostA	A	128.32.8.9

  (note that there is no A record for hostB).  If hostA is down,
  an attempt to send to hostH gives "host unknown" -- that is, it
  reflects out the status on the last host it tries, which in this
  case is hostB, which is unknown.  It probably ought to eliminate
  hostB early in processing.

d66 12
d107 1
a107 1
(Version 8.23, last updated 10/15/96)
@


1.2
log
@Sendmail 8.7.3 from NetBSD
@
text
@d4 1
a4 1
			     (for 8.7)
d77 2
a78 12

* Sending user deletion not done properly in :include: lists.

  If you don't have the "m" (me too) option set, then a person
  sending to a list that contains themselves should not get a copy
  of the message.  However, if that list points to a :include: file
  that has one address per line, this will break, and the sender
  will always get a copy of their own message, just as though the
  "m" option were set.

  You can eliminate this by adding commas at the end of each line
  of the :include: file.
d109 1
a109 1
(Version 8.21, last updated 8/27/95)
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
			     (for 8.6.7)
d17 1
a17 1
* Null bytes are not handled properly.
d20 1
a20 1
  any value from 0x01-0xFF in the body and 0x01-0x80 and 0xA0-0xFF in
a29 6
* No "exposed users" in "nullrelay" configuration.

  The "nullrelay" configuration hides all addresses behind the mail
  hub name.  Some sites might prefer to expose some names such as
  root.  This information is always available in Received: lines.

a42 8
* REDIRECT aliases don't work with `n' option.

  If you have option `n' set when you use newaliases and have
  REDIRECT addresses in your aliases file, you'll get the error
  messages during the newaliases instead of when email is sent to
  the address in question.  The workaround is to turn off the `n'
  option.

a56 9
* NAME environment variables with commas break.

  If you define your NAME environment variable to have a comma
  (e.g., ``Lastname, Firstname''), and you are using the $q definition
  that uses ``name <address>'' format, sendmail treats the first and
  last names as two addresses, thus producing a bogus From line.  You
  can work around this by changing the $q definition to use
  ``address (name)''.

a61 9
* DEC Alphas (OSF/1 1.3) sometimes time out on sending mail.

  I have one report that DEC Alphas acting as SMTP clients sometimes
  will apparently not see the "250 OK" message in response to the
  dot that indicates the end of the message.  This only happens if
  the message is run from the queue -- if it gets through on first
  try, everything is fine.  I have been unable to reproduce this
  problem at Berkeley.

d99 21
a119 1
(Version 8.18, last updated 3/14/94)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@sendmail 8.9.1
@
text
@d4 1
a4 1
			     (for 8.9.0)
d9 2
a10 2
want to get the most up to date version of this from ftp.sendmail.org	
in /pub/sendmail/KNOWNBUGS.  For descriptions of bugs that have been
d17 1
a17 1
* Null bytes are not handled properly in headers.
d20 1
a20 1
  all values in the body, but only 0x01-0x80 and 0xA0-0xFF in
d30 6
d46 1
a46 1
  this address.  It's not clear what the right behavior is in this
d49 31
d85 9
d97 1
a97 1
  can get into a weird state on SVR4; it starts logging ``SYSERR:
a108 2
  Apparently, this problem is due to linking -lc before -lsocket;
  if you are having this problem, check your Makefile.
d110 1
a110 1
* accept() problem on Linux.
d112 9
a120 13
  Apparently, the accept() in sendmail daemon loop can return ETIMEDOUT
  and cause sendmail to sleep for 5 seconds during which time no new
  connections will be accepted.  An error is reported to syslog:

  Jun  9 17:14:12 hostname sendmail[207]: NOQUEUE: SYSERR(root):
			getrequests: accept: Connection timed out

  "Connection timed out" is not documented as a valid return from
  accept(2) and this was believed to be a bug in the Linux kernel.
  Later information from the Linux kernel group states that Linux
  2.0 kernels follow RFC1122 while sendmail follows the original BSD
  (now POSIX 1003.1g draft) specification.  The 2.1.X and later kernels
  will follow the POSIX draft.
d131 1
a131 57
* Connection caching breaks if you pass the port number as an argument.

  If you have a definition such as:

	  Mport,          P=[IPC], F=kmDFMuX, S=11/31, R=21,
			  M=2100000, T=DNS/RFC822/SMTP,
			  A=IPC [127.0.0.1] $h

  (i.e., where $h is the port number instead of the host name) the
  connection caching code will break because it won't notice that
  two messages addressed to different ports should use different
  connections.

* ESMTP SIZE underestimates the size of a message

  Sendmail makes no allowance for headers that it adds, nor does it
  account for the SMTP on-the-wire \r\n expansion.  It probably doesn't
  allow for 8->7 bit MIME conversions either.

* Paths to programs being executed and the mode of program files are
  not checked.  Essentially, the RunProgramInUnsafeDirPath and
  RunWritableProgram bits in the DontBlameSendmail option are always
  set.  This is not a problem if your system is well managed (that is,
  if binaries and system directories are mode 755 instead of something
  foolish like 777).

* 8-bit data in GECOS field

  If the GECOS (personal name) information in the passwd file contains
  8-bit characters, those characters can be included in the message
  header, which can cause problems when sending SMTP to hosts that
  only accept 7-bit characters.

* 8->7 bit MIME conversion

  When sendmail is doing 8->7 bit MIME conversions, and the message
  contains certain MIME body types that cannot be converted to 7-bit,
  sendmail will strip the message to 7-bit.

* 7->8 bit MIME conversion

  If a message that is encoded as 7-bit MIME is converted to 8-bit and
  that message when decoded is illegal (e.g., because of long lines or
  illegal characters), sendmail can produce an illegal message.

* MIME encoded full name phrases in the From: header

  If a full name phrase includes characters from MustQuoteChars, sendmail  
  will quote the entire full name phrase. If MustQuoteChars includes  
  characters which are not special characters according to STD 11 (RFC  
  822), this quotation can interfere with MIME encoded full name phrases. 
  By default, sendmail includes the single quote character (') in
  MustQuoteChars even though it is not listed as a special character in
  STD 11.


(Version 8.32, last updated 6/30/98)
@

