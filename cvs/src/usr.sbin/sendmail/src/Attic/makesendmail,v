head	1.9;
access;
symbols
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.9
date	2000.04.18.04.57.23;	author millert;	state dead;
branches;
next	1.8;

1.8
date	99.02.05.05.59.28;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.01.20.33.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.12.19.44.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.15.07.24.08;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.22.01.07.12;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.12.14.21.17.23;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.01.29.01.44.03;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove sendmail 8.9.3
@
text
@#!/bin/sh

# Copyright (c) 1998 Sendmail, Inc.  All rights reserved.
# Copyright (c) 1993, 1996-1997 Eric P. Allman.  All rights reserved.
# Copyright (c) 1993
#	The Regents of the University of California.  All rights reserved.
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the sendmail distribution.
#
#
#       @@(#)Build	8.94 (Berkeley) 1/23/1999
#

#
#  A quick-and-dirty script to compile sendmail and related programs
#  in the presence of multiple architectures.  To use, just use
#  "sh Build".
#

trap "rm -f $obj/.settings$$; exit" 1 2 3 15

cflag=""
mflag=""
sflag=""
makeargs=""
libdirs=""
incdirs=""
libsrch=""
siteconfig=""
EX_USAGE=64
EX_NOINPUT=66
EX_UNAVAILABLE=69

while [ ! -z "$1" ]
do
	case $1
	in
	  -c)	# clean out existing $obj tree
		cflag=1
		shift
		;;

	  -m)	# show Makefile name only
		mflag=1
		shift
		;;

	  -E*)	# environment variables to pass into Build
		arg=`echo $1 | sed 's/^-E//'`
		if [ -z "$arg" ]
		then
		    shift   # move to argument
		    arg=$1
		fi
		if [ -z "$arg" ]
		then
			echo "Empty -E flag" >&2
			exit $EX_USAGE
		else
			case $arg
			in
			  *=*)	# check format
				eval $arg
				export `echo $arg | sed 's;=.*;;'`
				;;
			  *)	# bad format
				echo "Bad format for -E argument ($arg)" >&2
				exit $EX_USAGE
				;;
			esac
			shift
		fi
		;;

	  -L*)	# set up LIBDIRS
		libdirs="$libdirs $1"
		shift
		;;

	  -I*)	# set up INCDIRS
		incdirs="$incdirs $1"
		shift
		;;

	  -f*)	# select site config file
		arg=`echo $1 | sed 's/^-f//'`
		if [ -z "$arg" ]
		then
		    shift   # move to argument
		    arg=$1
		fi
		if [ "$siteconfig" ]
		then
			echo "Only one -f flag allowed" >&2
			exit $EX_USAGE
		else
			siteconfig=$arg
			if [ -z "$siteconfig" ]
			then
				echo "Missing argument for -f flag" >&2
				exit $EX_USAGE
			elif [ ! -f "$siteconfig" ]
			then
				echo "${siteconfig}: File not found"
				exit $EX_NOINPUT
			else
				shift	# move past argument
			fi
		fi
		;;

	  -S)	# skip auto-configure
		sflag="-s"
		shift
		;;

	  *)	# pass argument to make
		makeargs="$makeargs \"$1\""
		shift
		;;
	esac
done

#
#  Do heuristic guesses !ONLY! for machines that do not have uname
#
if [ -d /NextApps -a ! -f /bin/uname -a ! -f /usr/bin/uname ]
then
	# probably a NeXT box
	arch=`hostinfo | sed -n 's/.*Processor type: \([^ ]*\).*/\1/p'`
	os=NeXT
	rel=`hostinfo | sed -n 's/.*NeXT Mach \([0-9\.]*\).*/\1/p'`
elif [ -f /usr/sony/bin/machine -a -f /etc/osversion ]
then
	# probably a Sony NEWS 4.x
	os=NEWS-OS
	rel=`awk '{ print $3}' /etc/osversion`
	arch=`/usr/sony/bin/machine`
elif [ -d /usr/omron -a -f /bin/luna ]
then
	# probably a Omron LUNA
	os=LUNA
	if [ -f /bin/luna1 ] && /bin/luna1
	then
		rel=unios-b
		arch=luna1
	elif [ -f /bin/luna2 ] && /bin/luna2
	then
		rel=Mach
		arch=luna2
	elif [ -f /bin/luna88k ] && /bin/luna88k
	then
		rel=Mach
		arch=luna88k
	fi
elif [ -d /usr/apollo -a -d \`node_data ]
then
	# probably a Apollo/DOMAIN
	os=DomainOS
	arch=$ISP
	rel=`/usr/apollo/bin/bldt | grep Domain | awk '{ print $4 }' | sed -e 's/,//g'`
fi

if [ ! "$arch" -a ! "$os" -a ! "$rel" ]
then
	arch=`uname -m | sed -e 's/ //g'`
	os=`uname -s | sed -e 's/\//-/g' -e 's/ //g'`
	rel=`uname -r | sed -e 's/(/-/g' -e 's/)//g'`
fi

#
#  Tweak the values we have already got.  PLEASE LIMIT THESE to
#  tweaks that are absolutely necessary because your system uname
#  routine doesn't return something sufficiently unique.  Don't do
#  it just because you don't like the name that is returned.  You
#  can combine the architecture name with the os name to create a
#  unique Makefile name.
#

# tweak machine architecture
case $arch
in
  sun4*)	arch=sun4;;

  9000/*)	arch=`echo $arch | sed -e 's/9000.//' -e 's/..$/xx/'`;;

  DS/907000)	arch=ds90;;

  NILE*)	arch=NILE
		os=`uname -v`;;

  CRAYT3E|CRAYTS)
		os=$arch;;

esac

# tweak operating system type and release
node=`uname -n | sed -e 's/\//-/g' -e 's/ //g'`
if [ "$os" = "$node" -a "$arch" = "i386" -a "$rel" = 3.2 -a "`uname -v`" = 2 ]
then
	# old versions of SCO UNIX set uname -s the same as uname -n
	os=SCO_SV
fi
if [ "$rel" = 4.0 ]
then
	case $arch in
	  3[34]??|3[34]??,*)
		if [ -d /usr/sadm/sysadm/add-ons/WIN-TCP ]
		then
			os=NCR.MP-RAS.2.x
		elif [ -d /usr/sadm/sysadm/add-ons/inet ]
		then
			os=NCR.MP-RAS.3.x
		fi
		;;
	esac
fi

case $os
in
  DYNIX-ptx)	os=PTX;;
  Paragon*)	os=Paragon;;
  HP-UX)	rel=`echo $rel | sed -e 's/^[^.]*\.0*//'`;;
  AIX)		rela=$rel
		rel=`uname -v`
		case $rel in
		  2)	arch=""
			;;
		  4)	if [ "$rela" = "3" ]
			then
				arch=$rela
			fi
			;;
		esac
		rel=$rel.$rela
		;;
  BSD-386)	os=BSD-OS;;
  SCO_SV)	os=SCO; rel=`uname -X | sed -n 's/Release = 3.2v//p'`;;
  UNIX_System_V) if [ "$arch" = "ds90" ]
		then
			os="UXPDS"
			rel=`uname -v | sed -e 's/\(V.*\)L.*/\1/'`
		fi;;
  SINIX-?)	os=SINIX;;
  DomainOS)	case $rel in
		  10.4*)	rel=10.4;;
		esac
		;;
esac

# get "base part" of operating system release
rroot=`echo $rel | sed -e 's/\.[^.]*$//'`
rbase=`echo $rel | sed -e 's/\..*//'`
if [ "$rroot" = "$rbase" ]
then
	rroot=$rel
fi

# heuristic tweaks to clean up names -- PLEASE LIMIT THESE!
if [ "$os" = "unix" ]
then
	# might be Altos System V
	case $rel
	in
	  5.3*)		os=Altos;;
	esac
elif [ -r /unix -a -r /usr/lib/libseq.a -a -r /lib/cpp ]
then
	# might be a DYNIX/ptx 2.x system, which has a broken uname
	if strings /lib/cpp | grep _SEQUENT_ > /dev/null
	then
		os=PTX
	fi
elif [ -d /usr/nec ]
then
	# NEC machine -- what is it running?
	if [ "$os" = "UNIX_System_V" ]
	then
		os=EWS-UX_V
	elif [ "$os" = "UNIX_SV" ]
	then
		os=UX4800
	fi
elif [ "$arch" = "mips" ]
then
	case $rel
	in
	  4_*)
		if [ `uname -v` = "UMIPS" ]
		then
			os=RISCos
		fi;;
	esac
fi

# see if there is a "user suffix" specified
if [ "${SENDMAIL_SUFFIX-}x" = "x" ]
then
	sfx=""
else
	sfx=".${SENDMAIL_SUFFIX}"
fi

echo "Configuration: os=$os, rel=$rel, rbase=$rbase, rroot=$rroot, arch=$arch, sfx=$sfx"


SMROOT=${SMROOT-..}
BUILDTOOLS=${BUILDTOOLS-$SMROOT/BuildTools}
export SMROOT BUILDTOOLS

# see if we are in a Build-able directory
if [ ! -f Makefile.m4 ]; then
	echo "Makefile.m4 not found.  Build can only be run from a source directory."
	exit $EX_UNAVAILABLE
fi

# now try to find a reasonable object directory
if [ -r obj.$os.$rel.$arch$sfx ]; then
	obj=obj.$os.$rel.$arch$sfx
elif [ -r obj.$os.$rroot.$arch$sfx ]; then
	obj=obj.$os.$rroot.$arch$sfx
elif [ -r obj.$os.$rbase.x.$arch$sfx ]; then
	obj=obj.$os.$rbase.x.$arch$sfx
elif [ -r obj.$os.$rel$sfx ]; then
	obj=obj.$os.$rel$sfx
elif [ -r obj.$os.$rbase.x$sfx ]; then
	obj=obj.$os.$rbase.x$sfx
elif [ -r obj.$os.$arch$sfx ]; then
	obj=obj.$os.$arch$sfx
elif [ -r obj.$rel.$arch$sfx ]; then
	obj=obj.$rel.$arch$sfx
elif [ -r obj.$rbase.x.$arch$sfx ]; then
	obj=obj.$rbase.x.$arch$sfx
elif [ -r obj.$os$sfx ]; then
	obj=obj.$os$sfx
elif [ -r obj.$arch$sfx ]; then
	obj=obj.$arch$sfx
elif [ -r obj.$rel$sfx ]; then
	obj=obj.$rel$sfx
elif [ -r obj$sfx ]; then
	obj=obj$sfx
fi
if [ -z "$obj" -o "$cflag" ]
then
	if [ -n "$obj" ]
	then
		echo "Clearing out existing $obj tree"
		rm -rf $obj
	else
		# no existing obj directory -- try to create one if Makefile found
		obj=obj.$os.$rel.$arch$sfx
	fi
	if [ -r $BUILDTOOLS/OS/$os.$rel.$arch$sfx ]; then
		oscf=$os.$rel.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rel.$arch ]; then
		oscf=$os.$rel.$arch
	elif [ -r $BUILDTOOLS/OS/$os.$rroot.$arch$sfx ]; then
		oscf=$os.$rroot.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rroot.$arch ]; then
		oscf=$os.$rroot.$arch
	elif [ -r $BUILDTOOLS/OS/$os.$rbase.x.$arch$sfx ]; then
		oscf=$os.$rbase.x.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rbase.x.$arch ]; then
		oscf=$os.$rbase.x.$arch
	elif [ -r $BUILDTOOLS/OS/$os.$rel$sfx ]; then
		oscf=$os.$rel$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rel ]; then
		oscf=$os.$rel
	elif [ -r $BUILDTOOLS/OS/$os.$rroot$sfx ]; then
		oscf=$os.$rroot$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rroot ]; then
		oscf=$os.$rroot
	elif [ -r $BUILDTOOLS/OS/$os.$rbase.x$sfx ]; then
		oscf=$os.$rbase.x$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$rbase.x ]; then
		oscf=$os.$rbase.x
	elif [ -r $BUILDTOOLS/OS/$os.$arch$sfx ]; then
		oscf=$os.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$os.$arch ]; then
		oscf=$os.$arch
	elif [ -r $BUILDTOOLS/OS/$rel.$arch$sfx ]; then
		oscf=$rel.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$rel.$arch ]; then
		oscf=$rel.$arch
	elif [ -r $BUILDTOOLS/OS/$rroot.$arch$sfx ]; then
		oscf=$rroot.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$rroot.$arch ]; then
		oscf=$rroot.$arch
	elif [ -r $BUILDTOOLS/OS/$rbase.x.$arch$sfx ]; then
		oscf=$rbase.x.$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$rbase.x.$arch ]; then
		oscf=$rbase.x.$arch
	elif [ -r $BUILDTOOLS/OS/$os$sfx ]; then
		oscf=$os$sfx
	elif [ -r $BUILDTOOLS/OS/$os ]; then
		oscf=$os
	elif [ -r $BUILDTOOLS/OS/$arch$sfx ]; then
		oscf=$arch$sfx
	elif [ -r $BUILDTOOLS/OS/$arch ]; then
		oscf=$arch
	elif [ -r $BUILDTOOLS/OS/$rel$sfx ]; then
		oscf=$rel$sfx
	elif [ -r $BUILDTOOLS/OS/$rel ]; then
		oscf=$rel
	elif [ -r $BUILDTOOLS/OS/$rel$sfx ]; then
		oscf=$rel$sfx
	else
		echo "Cannot determine how to support $arch.$os.$rel" >&2
		exit $EX_UNAVAILABLE
	fi
	M4=`sh $BUILDTOOLS/bin/find_m4.sh`
	ret=$?
	if [ $ret -ne 0 ]
	then
		exit $ret
	fi
	echo "Using M4=$M4"
	export M4
	if [ "$mflag" ]
	then
		echo "Will run in virgin $obj using $BUILDTOOLS/OS/$oscf"
		exit 0
	fi
	if [ "$ABI" ]
	then
		echo "Using ABI $ABI"
	fi
	echo "Creating $obj using $BUILDTOOLS/OS/$oscf"
	mkdir $obj
	(cd $obj; ln -s ../*.[ch158] .)
	if [ -f sendmail.hf ]
	then
		(cd $obj; ln -s ../sendmail.hf .)
	fi

	rm -f $obj/.settings$$
	echo 'divert(-1)' > $obj/.settings$$
	cat $BUILDTOOLS/M4/header.m4 >> $obj/.settings$$
	if [ "$ABI" ]
	then
		echo "define(\`confABI', \`$ABI')" >> $obj/.settings$$
	fi
	cat $BUILDTOOLS/OS/$oscf >> $obj/.settings$$

	if [ -z "$siteconfig" ]
	then
		# none specified, use defaults
		if [ -f $BUILDTOOLS/Site/site.$oscf$sfx.m4 ]
		then
			siteconfig=$BUILDTOOLS/Site/site.$oscf$sfx.m4
		elif [ -f $BUILDTOOLS/Site/site.$oscf.m4 ]
		then
			siteconfig=$BUILDTOOLS/Site/site.$oscf.m4
		fi
		if [ -f $BUILDTOOLS/Site/site.config.m4 ]
		then
			siteconfig="$BUILDTOOLS/Site/site.config.m4 $siteconfig"
		fi
	fi
	if [ ! -z "$siteconfig" ]
	then
		echo "Including $siteconfig"
		cat $siteconfig >> $obj/.settings$$
	fi
	if [ "$libdirs" ]
	then
		echo "define(\`confLIBDIRS', confLIBDIRS \`\`$libdirs'')" >> $obj/.settings$$
	fi
	if [ "$incdirs" ]
	then
		echo "define(\`confINCDIRS', confINCDIRS \`\`$incdirs'')" >> $obj/.settings$$
	fi
	echo 'divert(0)dnl' >> $obj/.settings$$
	libdirs=`(cat $obj/.settings$$; echo "_SRIDBIL_= confLIBDIRS" ) | \
		sed -e 's/\(.\)include/\1_include_/g' -e 's/#define/#_define_/g' | \
		${M4} -DconfBUILDTOOLSDIR=$BUILDTOOLS - | \
		grep "^_SRIDBIL_=" | \
		sed -e 's/#_define_/#define/g' -e 's/_include_/include/g' -e "s/^_SRIDBIL_=//"`
	libsrch=`(cat $obj/.settings$$; echo "_HCRSBIL_= confLIBSEARCH" ) | \
		sed -e 's/\(.\)include/\1_include_/g' -e 's/#define/#_define_/g' | \
		${M4} -DconfBUILDTOOLSDIR=$BUILDTOOLS - | \
		grep "^_HCRSBIL_=" | \
		sed -e 's/#_define_/#define/g' -e 's/_include_/include/g' -e "s/^_HCRSBIL_=//"`
	echo 'divert(-1)' >> $obj/.settings$$
	LIBDIRS="$libdirs" LIBSRCH="$libsrch" SITECONFIG="$siteconfig" sh $BUILDTOOLS/bin/configure.sh $sflag $oscf >> $obj/.settings$$
	echo 'divert(0)dnl' >> $obj/.settings$$
	sed -e 's/\(.\)include/\1_include_/g' -e 's/#define/#_define_/g' $obj/.settings$$ | \
		${M4} -DconfBUILDTOOLSDIR=$BUILDTOOLS - Makefile.m4 | \
		sed -e 's/#_define_/#define/g' -e 's/_include_/include/g' > $obj/Makefile
	if [ $? -ne 0 -o ! -s $obj/Makefile ]
	then
		echo "ERROR: ${M4} failed; You may need a newer version of M4, at least as new as System V or GNU" 1>&2
		rm -rf $obj
		exit $EX_UNAVAILABLE
	fi
	rm -f $obj/.settings$$
	echo "Making dependencies in $obj"
	(cd $obj; ${MAKE-make} depend)
fi

if [ "$mflag" ]
then
	makefile=`ls -l $obj/Makefile | sed 's/.* //'`
	if [ -z "$makefile" ]
	then
		echo "ERROR: $obj exists but has no Makefile" >&2
		exit $EX_NOINPUT
	fi
	echo "Will run in existing $obj using $makefile"
	exit 0
fi

echo "Making in $obj"
cd $obj
eval exec ${MAKE-make} $makeargs
@


1.8
log
@sendmail 8.9.3
@
text
@@


1.7
log
@sendmail 8.9.2
@
text
@d13 1
a13 1
#       @@(#)Build	8.93 (Berkeley) 6/24/1998
d193 4
@


1.6
log
@something hosed the sendmail import; fix up by hand
@
text
@d13 1
a13 1
#       @@(#)Build	8.93 (Berkeley) 6/24/98
@


1.5
log
@Sendmail 8.8.6.
@
text
@d3 4
a6 3
# Copyright (c) 1993, 1996-1997 Eric P. Allman
# Copyright (c) 1993 The Regents of the University of California.
# All rights reserved.
d8 3
a10 15
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
a11 11
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
d13 1
a13 1
#       @@(#)makesendmail	8.45 (Berkeley) 4/12/97
d17 3
a19 2
#  A quick-and-dirty script to compile sendmail in the presence of
#  multiple architectures and Makefiles.
d22 103
a124 7
if [ "x${1-""}" = "x-m" ]
then
	# show Makefile name only
	mflag=1
else
	mflag=""
fi
d158 6
d190 3
d202 1
a202 1
if [ "$os" = "$node" -a "$rel" = 4.0 -a "$arch" = "3360,3430-R" ]
d204 11
a214 7
	# AT&T/NCR Machines also set uname -s == uname -n
	if [ -d /usr/sadm/sysadm/add-ons/WIN-TCP ]
	then
		os=NCR.MP-RAS.2.x
	else
		os=NCR.MP-RAS.3.x
	fi
d222 13
a234 5
  AIX)		rel=`uname -v`
		if [ "$rel" = "2" ]
		then
			arch=""
		fi;;
d243 4
d304 11
d340 65
a404 57
else
	# no existing obj directory -- try to create one if Makefile found
	obj=obj.$os.$rel.$arch$sfx
	if [ -r Makefiles/Makefile.$os.$rel.$arch$sfx ]; then
		makefile=Makefile.$os.$rel.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rel.$arch ]; then
		makefile=Makefile.$os.$rel.$arch
	elif [ -r Makefiles/Makefile.$os.$rroot.$arch$sfx ]; then
		makefile=Makefile.$os.$rroot.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rroot.$arch ]; then
		makefile=Makefile.$os.$rroot.$arch
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$os.$rbase.x.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$rbase.x.$arch ]; then
		makefile=Makefile.$os.$rbase.x.$arch
	elif [ -r Makefiles/Makefile.$os.$rel$sfx ]; then
		makefile=Makefile.$os.$rel$sfx
	elif [ -r Makefiles/Makefile.$os.$rel ]; then
		makefile=Makefile.$os.$rel
	elif [ -r Makefiles/Makefile.$os.$rroot$sfx ]; then
		makefile=Makefile.$os.$rroot$sfx
	elif [ -r Makefiles/Makefile.$os.$rroot ]; then
		makefile=Makefile.$os.$rroot
	elif [ -r Makefiles/Makefile.$os.$rbase.x$sfx ]; then
		makefile=Makefile.$os.$rbase.x$sfx
	elif [ -r Makefiles/Makefile.$os.$rbase.x ]; then
		makefile=Makefile.$os.$rbase.x
	elif [ -r Makefiles/Makefile.$os.$arch$sfx ]; then
		makefile=Makefile.$os.$arch$sfx
	elif [ -r Makefiles/Makefile.$os.$arch ]; then
		makefile=Makefile.$os.$arch
	elif [ -r Makefiles/Makefile.$rel.$arch$sfx ]; then
		makefile=Makefile.$rel.$arch$sfx
	elif [ -r Makefiles/Makefile.$rel.$arch ]; then
		makefile=Makefile.$rel.$arch
	elif [ -r Makefiles/Makefile.$rroot.$arch$sfx ]; then
		makefile=Makefile.$rroot.$arch$sfx
	elif [ -r Makefiles/Makefile.$rroot.$arch ]; then
		makefile=Makefile.$rroot.$arch
	elif [ -r Makefiles/Makefile.$rbase.x.$arch$sfx ]; then
		makefile=Makefile.$rbase.x.$arch$sfx
	elif [ -r Makefiles/Makefile.$rbase.x.$arch ]; then
		makefile=Makefile.$rbase.x.$arch
	elif [ -r Makefiles/Makefile.$os$sfx ]; then
		makefile=Makefile.$os$sfx
	elif [ -r Makefiles/Makefile.$os ]; then
		makefile=Makefile.$os
	elif [ -r Makefiles/Makefile.$arch$sfx ]; then
		makefile=Makefile.$arch$sfx
	elif [ -r Makefiles/Makefile.$arch ]; then
		makefile=Makefile.$arch
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
	elif [ -r Makefiles/Makefile.$rel ]; then
		makefile=Makefile.$rel
	elif [ -r Makefiles/Makefile.$rel$sfx ]; then
		makefile=Makefile.$rel$sfx
d406 8
a413 2
		echo "Cannot determine how to support $arch.$os.$rel"
		exit 1
d415 2
d419 1
a419 1
		echo "Will run in virgin $obj using $makefile"
d422 5
a426 1
	echo "Creating $obj using $makefile"
d428 67
a494 1
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../Makefiles/$makefile Makefile)
d504 2
a505 2
		echo "ERROR: $obj exists but has no Makefile"
		exit 1
d507 1
a507 11
	case $makefile
	in
	  ../Makefiles/*)
		makefile=`echo $makefile | sed 's/...Makefiles.//'`
		echo "Will run in existing $obj using $makefile"
		;;

	  *)
		echo "Will run in existing $obj using custom $makefile"
		;;
	esac
d513 1
a513 6
if [ $# = 0 ]
then
	exec ${MAKE-make}
else
	exec ${MAKE-make} "$@@"
fi
@


1.4
log
@Sendmail 8.8.5.
@
text
@d3 1
a3 1
# Copyright (c) 1993, 1996 Eric P. Allman
d35 1
a35 1
#       @@(#)makesendmail	8.43 (Berkeley) 12/14/96
d117 10
@


1.3
log
@Update to Sendmail 8.8.4, plus recent patches, plus OpenBSD support.
Also include entire example configuration subset.
Includes smrsh (using /usr/libexec/sm.bin).

Of the top of my head, the only things I removed from the distribution were
contrib/mail.local.linux, src/Makefiles, all the *.0 and *.ps files.
Our praliases man page replaces the distributed one, ours is better.
@
text
@d35 1
a35 1
#       @@(#)makesendmail	8.42 (Berkeley) 11/10/96
d136 1
@


1.2
log
@Sendmail 8.7.3 from NetBSD
@
text
@d3 1
a3 1
# Copyright (c) 1993 Eric P. Allman
d35 1
a35 1
#       @@(#)makesendmail	8.29 (Berkeley) 8/1/95
d54 1
a54 1
if [ -d /LocalApps -a ! -f /bin/uname -a ! -f /usr/bin/uname ]
d57 3
a59 3
	arch=NeXT
	os=Mach
	rel=`strings /mach | grep 'Mach.*:' | sed -e 's/.* Mach //' -e 's/:.*//'`
d88 2
a89 2
	os=`uname -s | sed 's/\//-/g'`
	rel=`uname -r`
d107 2
d112 7
d124 5
a128 1
  AIX)		rel=`uname -v`;;
d130 6
d139 1
d141 4
d191 1
a191 1
echo "Configuration: os=$os, rel=$rel, rbase=$rbase, arch=$arch, sfx=$sfx"
d196 2
d225 4
d237 4
d253 4
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
#       @@(#)makesendmail	8.5 (Berkeley) 2/27/94
d43 59
a101 2
# determine machine architecture
arch=`uname -m`
d109 9
a117 2
# determine operating system type
os=`uname -s`
d119 49
a167 3
# determine operating system release
rel=`uname -r`
rbase=`echo $rel | sed 's/\..*//''`
d170 22
a191 20
if [ -r obj.$os.$arch.$rel ]; then
	obj=obj.$os.$arch.$rel
elif [ -r obj.$os.$arch.$rbase.x ]; then
	obj=obj.$os.$arch.$rbase.x
elif [ -r obj.$os.$rel ]; then
	obj=obj.$os.$rel
elif [ -r obj.$os.$rbase.x ]; then
	obj=obj.$os.$rbase.x
elif [ -r obj.$os.$arch ]; then
	obj=obj.$os.$arch
elif [ -r obj.$arch.$rel ]; then
	obj=obj.$arch.$rel
elif [ -r obj.$arch.$rbase.x ]; then
	obj=obj.$arch.$rbase.x
elif [ -r obj.$os ]; then
	obj=obj.$os
elif [ -r obj.$arch ]; then
	obj=obj.$arch
elif [ -r obj.$rel ]; then
	obj=obj.$rel
d194 12
a205 6
	obj=obj.$os.$arch.$rel
	if [ -r Makefile.$os.$arch.$rel ]; then
		makefile=Makefile.$os.$arch.$rel
	elif [ -r Makefile.$os.$arch.$rbase.x ]; then
		makefile=Makefile.$os.$arch.$rbase.x
	elif [ -r Makefile.$os.$rel ]; then
d207 3
a209 1
	elif [ -r Makefile.$os.$rbase.x ]; then
d211 3
a213 1
	elif [ -r Makefile.$os.$arch ]; then
d215 11
a225 5
	elif [ -r Makefile.$arch.$rel ]; then
		makefile=Makefile.$arch.$rel
	elif [ -r Makefile.$arch.$rbase.x ]; then
		makefile=Makefile.$arch.$rbase.x
	elif [ -r Makefile.$os ]; then
d227 3
a229 1
	elif [ -r Makefile.$arch ]; then
d231 3
a233 1
	elif [ -r Makefile.$rel ]; then
d235 2
d241 5
d248 3
a250 1
	(cd $obj; ln -s ../*.[ch158] ../sendmail.hf .; ln -s ../$makefile Makefile)
d252 23
d277 6
a282 1
exec make -f Makefile $*
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
