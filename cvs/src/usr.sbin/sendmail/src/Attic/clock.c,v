head	1.9;
access;
symbols
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	sendmail_8_9_1:1.1.1.2
	UCB:1.1.1
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2000.04.18.04.57.17;	author millert;	state dead;
branches;
next	1.8;

1.8
date	99.02.05.05.59.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.01.20.33.38;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.12.19.44.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.15.07.23.59;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.22.01.07.01;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.12.14.21.17.04;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.01.29.01.43.28;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.17;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.12.17.09.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove sendmail 8.9.3
@
text
@/*
 * Copyright (c) 1998 Sendmail, Inc.  All rights reserved.
 * Copyright (c) 1983, 1995-1997 Eric P. Allman.  All rights reserved.
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 */

#ifndef lint
static char sccsid[] = "@@(#)clock.c	8.35 (Berkeley) 2/2/1999";
#endif /* not lint */

# include "sendmail.h"

# ifndef sigmask
#  define sigmask(s)	(1 << ((s) - 1))
# endif

/*
**  SETEVENT -- set an event to happen at a specific time.
**
**	Events are stored in a sorted list for fast processing.
**	An event only applies to the process that set it.
**
**	Parameters:
**		intvl -- intvl until next event occurs.
**		func -- function to call on event.
**		arg -- argument to func on event.
**
**	Returns:
**		none.
**
**	Side Effects:
**		none.
*/

EVENT	*FreeEventList;		/* list of free events */

static SIGFUNC_DECL	tick __P((int));

EVENT *
setevent(intvl, func, arg)
	time_t intvl;
	void (*func)();
	int arg;
{
	register EVENT **evp;
	register EVENT *ev;
	auto time_t now;
	int wasblocked;

	if (intvl <= 0)
	{
		syserr("554 setevent: intvl=%ld\n", intvl);
		return (NULL);
	}

	wasblocked = blocksignal(SIGALRM);
	now = curtime();

	/* search event queue for correct position */
	for (evp = &EventQueue; (ev = *evp) != NULL; evp = &ev->ev_link)
	{
		if (ev->ev_time >= now + intvl)
			break;
	}

	/* insert new event */
	ev = FreeEventList;
	if (ev == NULL)
		ev = (EVENT *) xalloc(sizeof *ev);
	else
		FreeEventList = ev->ev_link;
	ev->ev_time = now + intvl;
	ev->ev_func = func;
	ev->ev_arg = arg;
	ev->ev_pid = getpid();
	ev->ev_link = *evp;
	*evp = ev;

	if (tTd(5, 5))
		printf("setevent: intvl=%ld, for=%ld, func=%lx, arg=%d, ev=%lx\n",
			(long) intvl, (long)(now + intvl), (u_long) func,
			arg, (u_long) ev);

	setsignal(SIGALRM, tick);
	intvl = EventQueue->ev_time - now;
	(void) alarm((unsigned) intvl < 1 ? 1 : intvl);
	if (wasblocked == 0)
		(void) releasesignal(SIGALRM);
	return (ev);
}
/*
**  CLREVENT -- remove an event from the event queue.
**
**	Parameters:
**		ev -- pointer to event to remove.
**
**	Returns:
**		none.
**
**	Side Effects:
**		arranges for event ev to not happen.
*/

void
clrevent(ev)
	register EVENT *ev;
{
	register EVENT **evp;
	int wasblocked;

	if (tTd(5, 5))
		printf("clrevent: ev=%lx\n", (u_long) ev);
	if (ev == NULL)
		return;

	/* find the parent event */
	wasblocked = blocksignal(SIGALRM);
	for (evp = &EventQueue; *evp != NULL; evp = &(*evp)->ev_link)
	{
		if (*evp == ev)
			break;
	}

	/* now remove it */
	if (*evp != NULL)
	{
		*evp = ev->ev_link;
		ev->ev_link = FreeEventList;
		FreeEventList = ev;
	}

	/* restore clocks and pick up anything spare */
	if (wasblocked == 0)
		releasesignal(SIGALRM);
	if (EventQueue != NULL)
		kill(getpid(), SIGALRM);
}
/*
**  TICK -- take a clock tick
**
**	Called by the alarm clock.  This routine runs events as needed.
**	Always called as a signal handler, so we assume that SIGALRM
**	has been blocked.
**
**	Parameters:
**		One that is ignored; for compatibility with signal handlers.
**
**	Returns:
**		none.
**
**	Side Effects:
**		calls the next function in EventQueue.
*/

/* ARGSUSED */
static SIGFUNC_DECL
tick(sig)
	int sig;
{
	register time_t now;
	register EVENT *ev;
	int mypid = getpid();
	int olderrno = errno;

	(void) alarm(0);
	now = curtime();

	if (tTd(5, 4))
		printf("tick: now=%ld\n", (long) now);

	/* reset signal in case System V semantics */
	(void) setsignal(SIGALRM, tick);
	while ((ev = EventQueue) != NULL &&
	       (ev->ev_time <= now || ev->ev_pid != mypid))
	{
		void (*f)();
		int arg;
		int pid;

		/* process the event on the top of the queue */
		ev = EventQueue;
		EventQueue = EventQueue->ev_link;
		if (tTd(5, 6))
			printf("tick: ev=%lx, func=%lx, arg=%d, pid=%d\n",
				(u_long) ev, (u_long) ev->ev_func,
				ev->ev_arg, ev->ev_pid);

		/* we must be careful in here because ev_func may not return */
		f = ev->ev_func;
		arg = ev->ev_arg;
		pid = ev->ev_pid;
		ev->ev_link = FreeEventList;
		FreeEventList = ev;
		if (pid != getpid())
			continue;
		if (EventQueue != NULL)
		{
			if (EventQueue->ev_time > now)
				(void) alarm((unsigned) (EventQueue->ev_time - now));
			else
				(void) alarm(3);
		}

		/* call ev_func */
		errno = olderrno;
		(*f)(arg);
		(void) alarm(0);
		now = curtime();
	}
	if (EventQueue != NULL)
		(void) alarm((unsigned) (EventQueue->ev_time - now));
	errno = olderrno;
	return SIGFUNC_RETURN;
}
/*
**  SLEEP -- a version of sleep that works with this stuff
**
**	Because sleep uses the alarm facility, I must reimplement
**	it here.
**
**	Parameters:
**		intvl -- time to sleep.
**
**	Returns:
**		none.
**
**	Side Effects:
**		waits for intvl time.  However, other events can
**		be run during that interval.
*/

static bool	SleepDone;
static void	endsleep __P((void));

#ifndef SLEEP_T
# define SLEEP_T	unsigned int
#endif

SLEEP_T
sleep(intvl)
	unsigned int intvl;
{
	int was_held;

	if (intvl == 0)
		return (SLEEP_T) 0;
	SleepDone = FALSE;
	(void) setevent((time_t) intvl, endsleep, 0);
	was_held = releasesignal(SIGALRM);
	while (!SleepDone)
		pause();
	if (was_held > 0)
		blocksignal(SIGALRM);
	return (SLEEP_T) 0;
}

static void
endsleep()
{
	SleepDone = TRUE;
}
@


1.8
log
@sendmail 8.9.3
@
text
@@


1.7
log
@sendmail 8.9.2
@
text
@d14 1
a14 1
static char sccsid[] = "@@(#)clock.c	8.34 (Berkeley) 6/4/1998";
d63 1
a63 1
	(void) time(&now);
@


1.6
log
@something hosed the sendmail import; fix up by hand
@
text
@d14 1
a14 1
static char sccsid[] = "@@(#)clock.c	8.34 (Berkeley) 6/4/98";
@


1.5
log
@Sendmail 8.8.6.
@
text
@d2 2
a3 1
 * Copyright (c) 1983, 1995-1997 Eric P. Allman
d7 3
a9 15
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
a10 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d14 1
a14 1
static char sccsid[] = "@@(#)clock.c	8.24 (Berkeley) 4/19/97";
d87 2
a88 1
			intvl, now + intvl, (u_long) func, arg, (u_long) ev);
d161 1
d163 2
a164 2
tick(arg)
	int arg;
d175 1
a175 1
		printf("tick: now=%ld\n", now);
d239 1
a239 1
static void	endsleep();
@


1.4
log
@Sendmail 8.8.5.
@
text
@d2 1
a2 1
 * Copyright (c) 1983, 1995, 1996 Eric P. Allman
d36 1
a36 1
static char sccsid[] = "@@(#)clock.c	8.18 (Berkeley) 12/31/96";
d63 3
a65 1
static SIGFUNC_DECL tick __P((int));
d76 1
d84 1
a84 1
	(void) setsignal(SIGALRM, SIG_IGN);
d95 5
a99 1
	ev = (EVENT *) xalloc(sizeof *ev);
d111 5
a115 1
	tick(0);
d136 1
d144 1
a144 1
	(void) setsignal(SIGALRM, SIG_IGN);
d155 2
a156 1
		free((char *) ev);
d160 4
a163 1
	tick(0);
d169 2
a190 1
	(void) setsignal(SIGALRM, SIG_IGN);
d197 2
d218 2
a219 1
		free((char *) ev);
a229 4
		/* restore signals so that we can take ticks while in ev_func */
		(void) setsignal(SIGALRM, tick);
		(void) releasesignal(SIGALRM);

a235 1
	(void) setsignal(SIGALRM, tick);
@


1.3
log
@Update to Sendmail 8.8.4, plus recent patches, plus OpenBSD support.
Also include entire example configuration subset.
Includes smrsh (using /usr/libexec/sm.bin).

Of the top of my head, the only things I removed from the distribution were
contrib/mail.local.linux, src/Makefiles, all the *.0 and *.ps files.
Our praliases man page replaces the distributed one, ours is better.
@
text
@d36 1
a36 1
static char sccsid[] = "@@(#)clock.c	8.16 (Berkeley) 11/27/96";
d63 1
a63 1
static void tick __P((int));
d164 1
a164 1
static void
a171 3
#ifdef SIG_UNBLOCK
	sigset_t ss;
#endif
d224 1
@


1.2
log
@Sendmail 8.7.3 from NetBSD
@
text
@d2 1
a2 1
 * Copyright (c) 1983, 1995 Eric P. Allman
d36 1
a36 1
static char sccsid[] = "@@(#)clock.c	8.12 (Berkeley) 5/23/95";
d101 2
a102 2
		printf("setevent: intvl=%ld, for=%ld, func=%x, arg=%d, ev=%x\n",
			intvl, now + intvl, func, arg, ev);
d127 1
a127 1
		printf("clrevent: ev=%x\n", ev);
d194 3
a196 2
			printf("tick: ev=%x, func=%x, arg=%d, pid=%d\n", ev,
				ev->ev_func, ev->ev_arg, ev->ev_pid);
d215 1
a215 11
#ifdef SIG_UNBLOCK
		/* unblock SIGALRM signal */
		sigemptyset(&ss);
		sigaddset(&ss, SIGALRM);
		sigprocmask(SIG_UNBLOCK, &ss, NULL);
#else
#if HASSIGSETMASK
		/* reset 4.2bsd signal mask to allow future alarms */
		(void) sigsetmask(sigblock(0) & ~sigmask(SIGALRM));
#endif /* HASSIGSETMASK */
#endif /* SIG_UNBLOCK */
d256 2
d262 1
d265 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (c) 1983 Eric P. Allman
d36 1
a36 1
static char sccsid[] = "@@(#)clock.c	8.8 (Berkeley) 1/12/94";
d68 1
a68 1
	int (*func)();
d120 1
d186 1
a186 1
		int (*f)();
d220 1
a220 1
#ifdef SIGVTALRM
d223 1
a223 1
#endif /* SIGVTALRM */
d255 1
a255 1
static int	endsleep();
d266 1
a266 1
		return;
d271 1
d274 1
a274 1
static
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@sendmail 8.9.1
@
text
@d2 1
a2 2
 * Copyright (c) 1998 Sendmail, Inc.  All rights reserved.
 * Copyright (c) 1983, 1995-1997 Eric P. Allman.  All rights reserved.
d6 15
a20 3
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
d22 11
d36 1
a36 1
static char sccsid[] = "@@(#)clock.c	8.34 (Berkeley) 6/4/98";
d63 1
a63 3
EVENT	*FreeEventList;		/* list of free events */

static SIGFUNC_DECL	tick __P((int));
d68 1
a68 1
	void (*func)();
a73 1
	int wasblocked;
d81 1
a81 1
	wasblocked = blocksignal(SIGALRM);
d92 1
a92 5
	ev = FreeEventList;
	if (ev == NULL)
		ev = (EVENT *) xalloc(sizeof *ev);
	else
		FreeEventList = ev->ev_link;
d101 4
a104 9
		printf("setevent: intvl=%ld, for=%ld, func=%lx, arg=%d, ev=%lx\n",
			(long) intvl, (long)(now + intvl), (u_long) func,
			arg, (u_long) ev);

	setsignal(SIGALRM, tick);
	intvl = EventQueue->ev_time - now;
	(void) alarm((unsigned) intvl < 1 ? 1 : intvl);
	if (wasblocked == 0)
		(void) releasesignal(SIGALRM);
a119 1
void
a123 1
	int wasblocked;
d126 1
a126 1
		printf("clrevent: ev=%lx\n", (u_long) ev);
d131 1
a131 1
	wasblocked = blocksignal(SIGALRM);
d142 1
a142 2
		ev->ev_link = FreeEventList;
		FreeEventList = ev;
d146 1
a146 4
	if (wasblocked == 0)
		releasesignal(SIGALRM);
	if (EventQueue != NULL)
		kill(getpid(), SIGALRM);
a151 2
**	Always called as a signal handler, so we assume that SIGALRM
**	has been blocked.
d163 3
a165 4
/* ARGSUSED */
static SIGFUNC_DECL
tick(sig)
	int sig;
d171 3
d175 1
d180 1
a180 1
		printf("tick: now=%ld\n", (long) now);
a181 2
	/* reset signal in case System V semantics */
	(void) setsignal(SIGALRM, tick);
d185 1
a185 1
		void (*f)();
d193 2
a194 3
			printf("tick: ev=%lx, func=%lx, arg=%d, pid=%d\n",
				(u_long) ev, (u_long) ev->ev_func,
				ev->ev_arg, ev->ev_pid);
d200 1
a200 2
		ev->ev_link = FreeEventList;
		FreeEventList = ev;
d211 14
d231 1
a234 1
	return SIGFUNC_RETURN;
d254 1
a254 1
static void	endsleep __P((void));
a263 2
	int was_held;

d265 1
a265 1
		return (SLEEP_T) 0;
a267 1
	was_held = releasesignal(SIGALRM);
a269 3
	if (was_held > 0)
		blocksignal(SIGALRM);
	return (SLEEP_T) 0;
d272 1
a272 1
static void
@

