head	1.9;
access;
symbols
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	sendmail_8_9_1:1.1.1.2
	UCB:1.1.1
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2000.04.18.04.57.12;	author millert;	state dead;
branches;
next	1.8;

1.8
date	99.02.05.05.59.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.01.20.33.30;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.07.12.19.44.01;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.15.07.23.52;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.44.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.14.21.16.47;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.01.29.01.43.05;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.15;	author deraadt;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.07.12.17.09.33;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove sendmail 8.9.3
@
text
@/*
 * Copyright (c) 1998 Sendmail, Inc.  All rights reserved.
 * Copyright (c) 1983 Eric P. Allman.  All rights reserved.
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
 *
 *
 */

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1988, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)mailstats.c	8.29 (Berkeley) 1/25/1999";
#endif /* not lint */

#ifndef NOT_SENDMAIL
# define NOT_SENDMAIL
#endif
#include <sendmail.h>
#include <mailstats.h>
#include <pathnames.h>

#define MNAMELEN	20	/* max length of mailer name */

int
main(argc, argv)
	int argc;
	char **argv;
{
	extern char *optarg;
	extern int optind;
	struct statistics stat;
	register int i;
	int mno;
	int ch, fd;
	char *sfile;
	char *cfile;
	FILE *cfp;
	bool mnames;
	bool progmode;
	long frmsgs = 0, frbytes = 0, tomsgs = 0, tobytes = 0, rejmsgs = 0;
	long dismsgs = 0;
	char mtable[MAXMAILERS][MNAMELEN+1];
	char sfilebuf[MAXLINE];
	char buf[MAXLINE];
	time_t now;
	extern char *ctime();

	cfile = _PATH_SENDMAILCF;
	sfile = NULL;
	mnames = TRUE;
	progmode = FALSE;
	while ((ch = getopt(argc, argv, "C:f:op")) != EOF)
	{
		switch (ch)
		{
		  case 'C':
			cfile = optarg;
			break;

		  case 'f':
			sfile = optarg;
			break;

		  case 'o':
			mnames = FALSE;
			break;

#if _FFR_MAILSTATS_PROGMODE
		  case 'p':
			progmode = TRUE;
			break;
#endif

		  case '?':
		  default:
  usage:
#if _FFR_MAILSTATS_PROGMODE
			fputs("usage: mailstats [-C cffile] [-f stfile] -o -p\n",
				stderr);
#else
			fputs("usage: mailstats [-C cffile] [-f stfile] -o \n",
				stderr);
#endif
			exit(EX_USAGE);
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 0)
		goto usage;

	if ((cfp = fopen(cfile, "r")) == NULL)
	{
		fprintf(stderr, "mailstats: ");
		perror(cfile);
		exit(EX_NOINPUT);
	}

	mno = 0;
	(void) strcpy(mtable[mno++], "prog");
	(void) strcpy(mtable[mno++], "*file*");
	(void) strcpy(mtable[mno++], "*include*");

	while (fgets(buf, sizeof(buf), cfp) != NULL)
	{
		register char *b;
		char *s;
		register char *m;

		b = buf;
		switch (*b++)
		{
		  case 'M':		/* mailer definition */
			break;

		  case 'O':		/* option -- see if .st file */
			if (strncasecmp(b, " StatusFile", 11) == 0 &&
			    !(isascii(b[11]) && isalnum(b[11])))
			{
				/* new form -- find value */
				b = strchr(b, '=');
				if (b == NULL)
					continue;
				while (isascii(*++b) && isspace(*b))
					continue;
			}
			else if (*b++ != 'S')
			{
				/* something else boring */
				continue;
			}

			/* this is the S or StatusFile option -- save it */
			if (strlen(b) >= sizeof sfilebuf)
			{
				fprintf(stderr,
					"StatusFile filename too long: %.30s...\n",
					b);
				exit(EX_CONFIG);
			}
			strcpy(sfilebuf, b);
			b = strchr(sfilebuf, '#');
			if (b == NULL)
				b = strchr(sfilebuf, '\n');
			if (b == NULL)
				b = &sfilebuf[strlen(sfilebuf)];
			while (isascii(*--b) && isspace(*b))
				continue;
			*++b = '\0';
			if (sfile == NULL)
				sfile = sfilebuf;

		  default:
			continue;
		}

		if (mno >= MAXMAILERS)
		{
			fprintf(stderr,
				"Too many mailers defined, %d max.\n",
				MAXMAILERS);
			exit(EX_SOFTWARE);
		}
		m = mtable[mno];
		s = m + MNAMELEN;		/* is [MNAMELEN+1] */
		while (*b != ',' && !(isascii(*b) && isspace(*b)) &&
		       *b != '\0' && m < s)
			*m++ = *b++;
		*m = '\0';
		for (i = 0; i < mno; i++)
		{
			if (strcmp(mtable[i], mtable[mno]) == 0)
				break;
		}
		if (i == mno)
			mno++;
	}
	(void) fclose(cfp);
	for (; mno < MAXMAILERS; mno++)
		mtable[mno][0]='\0';

	if (sfile == NULL)
	{
		fprintf(stderr, "mailstats: no statistics file located\n");
		exit (EX_OSFILE);
	}

	if ((fd = open(sfile, O_RDONLY)) < 0 ||
	    (i = read(fd, &stat, sizeof stat)) < 0)
	{
		fputs("mailstats: ", stderr);
		perror(sfile);
		exit(EX_NOINPUT);
	}
	if (i == 0)
	{
		sleep(1);
		if ((i = read(fd, &stat, sizeof stat)) < 0)
		{
			fputs("mailstats: ", stderr);
			perror(sfile);
			exit(EX_NOINPUT);
		}
		else if (i == 0)
		{
			bzero((ARBPTR_T) &stat, sizeof stat);
			(void) time(&stat.stat_itime);
		}
	}
	if (i != 0)
	{
		if (stat.stat_magic != STAT_MAGIC)
		{
			fprintf(stderr,
				"mailstats: incorrect magic number in %s\n",
				sfile);
			exit(EX_OSERR);
		}
		else if (stat.stat_version != STAT_VERSION)
		{
			fprintf(stderr,
				"mailstats version (%d) incompatible with %s version(%d)\n",
				STAT_VERSION, sfile, stat.stat_version);
			exit(EX_OSERR);
		}
		else if (i != sizeof stat || stat.stat_size != sizeof(stat))
		{
			fputs("mailstats: file size changed.\n", stderr);
			exit(EX_OSERR);
		}
	}

	if (progmode)
	{
		time(&now);
		printf("%ld %ld\n", (long) stat.stat_itime, (long) now);
	}
	else
	{
		printf("Statistics from %s", ctime(&stat.stat_itime));
		printf(" M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
			mnames ? "  Mailer" : "");
	}
	for (i = 0; i < MAXMAILERS; i++)
	{
		if (stat.stat_nf[i] || stat.stat_nt[i] ||
		    stat.stat_nr[i] || stat.stat_nd[i])
		{
			char *format;

			if (progmode)
				format = "%2d %8ld %10ld %8ld %10ld   %6ld  %6ld";
			else
				format = "%2d %8ld %10ldK %8ld %10ldK   %6ld  %6ld";
			printf(format, i,
			    stat.stat_nf[i], stat.stat_bf[i],
			    stat.stat_nt[i], stat.stat_bt[i],
			    stat.stat_nr[i], stat.stat_nd[i]);
			if (mnames)
				printf("  %s", mtable[i]);
			printf("\n");
			frmsgs += stat.stat_nf[i];
			frbytes += stat.stat_bf[i];
			tomsgs += stat.stat_nt[i];
			tobytes += stat.stat_bt[i];
			rejmsgs += stat.stat_nr[i];
			dismsgs += stat.stat_nd[i];
		}
	}
	if (progmode)
	{
		printf(" T %8ld %10ld %8ld %10ld   %6ld  %6ld\n",
		       frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
		close(fd);
		fd = open(sfile, O_RDWR | O_TRUNC);
		if (fd >= 0)
			close(fd);
	}
	else
	{
		printf("=============================================================\n");
		printf(" T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
			frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
	}
	exit(EX_OK);
}
@


1.8
log
@sendmail 8.9.3
@
text
@@


1.7
log
@sendmail 8.9.2
@
text
@d21 1
a21 1
static char sccsid[] = "@@(#)mailstats.c	8.28 (Berkeley) 9/14/1998";
d286 1
a286 1
		if (fd > 0)
@


1.6
log
@something hosed the sendmail import; fix up by hand
@
text
@d21 1
a21 1
static char sccsid[] = "@@(#)mailstats.c	8.26 (Berkeley) 7/2/98";
d48 1
d54 1
d60 2
a61 1
	while ((ch = getopt(argc, argv, "C:f:o")) != EOF)
d77 6
d86 5
a90 1
			fputs("usage: mailstats [-C cffile] [-f stfile] -o\n",
d92 1
d243 11
a253 3
	printf("Statistics from %s", ctime(&stat.stat_itime));
	printf(" M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
		mnames ? "  Mailer" : "");
d259 7
a265 1
			printf("%2d %8ld %10ldK %8ld %10ldK   %6ld  %6ld", i,
d280 15
a294 3
	printf("=============================================================\n");
	printf(" T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
		frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
@


1.5
log
@Sendmail 8.8.6.
@
text
@d2 2
a3 1
 * Copyright (c) 1983 Eric P. Allman
d7 3
a9 15
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
a10 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d21 1
a21 1
static char sccsid[] = "@@(#)mailstats.c	8.10 (Berkeley) 5/30/97";
d24 3
a26 1
#define NOT_SENDMAIL
d33 1
d48 2
a49 1
	long frmsgs = 0, frbytes = 0, tomsgs = 0, tobytes = 0;
d58 1
a58 1
	while ((ch = getopt(argc, argv, "C:f:o")) != -1)
d114 1
a114 1
			    !isalnum(b[11]))
d120 1
a120 1
				while (isspace(*++b))
d134 1
a134 1
					s);
d143 1
a143 1
			while (isspace(*--b))
d162 2
a163 1
		while (*b != ',' && !isspace(*b) && *b != '\0' && m < s)
d194 7
a200 2
		i = read(fd, &stat, sizeof stat);
		if (i == 0)
d206 1
a206 1
	else if (i != sizeof stat || stat.stat_size != sizeof(stat))
d208 19
a226 2
		fputs("mailstats: file size changed.\n", stderr);
		exit(EX_OSERR);
d230 1
a230 1
	printf(" M msgsfr bytes_from  msgsto   bytes_to%s\n",
d234 2
a235 1
		if (stat.stat_nf[i] || stat.stat_nt[i])
d237 1
a237 1
			printf("%2d %6ld %10ldK %6ld %10ldK", i,
d239 2
a240 1
			    stat.stat_nt[i], stat.stat_bt[i]);
d248 2
d252 3
a254 3
	printf("========================================\n");
	printf(" T %6ld %10ldK %6ld %10ldK\n",
		frmsgs, frbytes, tomsgs, tobytes);
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d43 1
a43 1
static char sccsid[] = "@@(#)mailstats.c	8.8 (Berkeley) 9/25/96";
d69 1
a69 1
	char sfilebuf[100];
d148 7
@


1.3
log
@Update to Sendmail 8.8.4, plus recent patches, plus OpenBSD support.
Also include entire example configuration subset.
Includes smrsh (using /usr/libexec/sm.bin).

Of the top of my head, the only things I removed from the distribution were
contrib/mail.local.linux, src/Makefiles, all the *.0 and *.ps files.
Our praliases man page replaces the distributed one, ours is better.
@
text
@d76 1
a76 1
	while ((ch = getopt(argc, argv, "C:f:o")) != EOF)
@


1.2
log
@Sendmail 8.7.3 from NetBSD
@
text
@d43 1
a43 1
static char sccsid[] = "@@(#)mailstats.c	8.4 (Berkeley) 8/14/94";
d46 1
d95 2
a96 1
			fputs("usage: mailstats [-C cffile] [-f stfile]\n", stderr);
d194 3
a196 1
	if ((fd = open(sfile, O_RDONLY)) < 0) {
d201 11
a211 2
	if (read(fd, &stat, sizeof(stat)) != sizeof(stat) ||
	    stat.stat_size != sizeof(stat))
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
static char sccsid[] = "@@(#)mailstats.c	8.3 (Berkeley) 12/27/93";
d129 13
a141 1
			if (*b++ != 'S')
d143 1
d145 1
a145 1
			/* yep -- save this */
d147 8
a154 3
			b = strchr(sfilebuf, '\n');
			if (b != NULL)
				*b = '\0';
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@


1.1.1.2
log
@sendmail 8.9.1
@
text
@d2 1
a2 2
 * Copyright (c) 1998 Sendmail, Inc.  All rights reserved.
 * Copyright (c) 1983 Eric P. Allman.  All rights reserved.
d6 15
a20 3
 * By using this file, you agree to the terms and conditions set
 * forth in the LICENSE file which can be found at the top level of
 * the sendmail distribution.
d22 11
d43 1
a43 1
static char sccsid[] = "@@(#)mailstats.c	8.26 (Berkeley) 7/2/98";
a45 3
#ifndef NOT_SENDMAIL
# define NOT_SENDMAIL
#endif
a51 1
int
d66 1
a66 2
	long frmsgs = 0, frbytes = 0, tomsgs = 0, tobytes = 0, rejmsgs = 0;
	long dismsgs = 0;
d68 1
a68 1
	char sfilebuf[MAXLINE];
d94 1
a94 2
			fputs("usage: mailstats [-C cffile] [-f stfile] -o\n",
				stderr);
d129 1
a129 13
			if (strncasecmp(b, " StatusFile", 11) == 0 &&
			    !(isascii(b[11]) && isalnum(b[11])))
			{
				/* new form -- find value */
				b = strchr(b, '=');
				if (b == NULL)
					continue;
				while (isascii(*++b) && isspace(*b))
					continue;
			}
			else if (*b++ != 'S')
			{
				/* something else boring */
a130 1
			}
d132 1
a132 8
			/* this is the S or StatusFile option -- save it */
			if (strlen(b) >= sizeof sfilebuf)
			{
				fprintf(stderr,
					"StatusFile filename too long: %.30s...\n",
					b);
				exit(EX_CONFIG);
			}
d134 3
a136 8
			b = strchr(sfilebuf, '#');
			if (b == NULL)
				b = strchr(sfilebuf, '\n');
			if (b == NULL)
				b = &sfilebuf[strlen(sfilebuf)];
			while (isascii(*--b) && isspace(*b))
				continue;
			*++b = '\0';
d153 1
a153 2
		while (*b != ',' && !(isascii(*b) && isspace(*b)) &&
		       *b != '\0' && m < s)
d174 1
a174 3
	if ((fd = open(sfile, O_RDONLY)) < 0 ||
	    (i = read(fd, &stat, sizeof stat)) < 0)
	{
d179 2
a180 16
	if (i == 0)
	{
		sleep(1);
		if ((i = read(fd, &stat, sizeof stat)) < 0)
		{
			fputs("mailstats: ", stderr);
			perror(sfile);
			exit(EX_NOINPUT);
		}
		else if (i == 0)
		{
			bzero((ARBPTR_T) &stat, sizeof stat);
			(void) time(&stat.stat_itime);
		}
	}
	if (i != 0)
d182 2
a183 19
		if (stat.stat_magic != STAT_MAGIC)
		{
			fprintf(stderr,
				"mailstats: incorrect magic number in %s\n",
				sfile);
			exit(EX_OSERR);
		}
		else if (stat.stat_version != STAT_VERSION)
		{
			fprintf(stderr,
				"mailstats version (%d) incompatible with %s version(%d)\n",
				STAT_VERSION, sfile, stat.stat_version);
			exit(EX_OSERR);
		}
		else if (i != sizeof stat || stat.stat_size != sizeof(stat))
		{
			fputs("mailstats: file size changed.\n", stderr);
			exit(EX_OSERR);
		}
d187 1
a187 1
	printf(" M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis%s\n",
d191 1
a191 2
		if (stat.stat_nf[i] || stat.stat_nt[i] ||
		    stat.stat_nr[i] || stat.stat_nd[i])
d193 1
a193 1
			printf("%2d %8ld %10ldK %8ld %10ldK   %6ld  %6ld", i,
d195 1
a195 2
			    stat.stat_nt[i], stat.stat_bt[i],
			    stat.stat_nr[i], stat.stat_nd[i]);
a202 2
			rejmsgs += stat.stat_nr[i];
			dismsgs += stat.stat_nd[i];
d205 3
a207 3
	printf("=============================================================\n");
	printf(" T %8ld %10ldK %8ld %10ldK   %6ld  %6ld\n",
		frmsgs, frbytes, tomsgs, tobytes, rejmsgs, dismsgs);
@

