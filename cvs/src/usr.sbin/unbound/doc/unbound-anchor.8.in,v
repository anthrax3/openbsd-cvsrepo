head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	UNBOUND_1_5_4:1.1.1.9
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	UNBOUND_1_5_2RC1:1.1.1.8
	UNBOUND_1_5_1:1.1.1.7
	UNBOUND_1_5_0:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	UNBOUND_1_4_22:1.1.1.5
	OPENBSD_5_5:1.1.1.4.0.4
	OPENBSD_5_5_BASE:1.1.1.4
	UNBOUND_1_4_21:1.1.1.4
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	UNBOUND_1_4_18:1.1.1.3
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2017.02.21.14.31.41;	author sthen;	state Exp;
branches;
next	1.8;
commitid	KsE38LxaQ5U60CcN;

1.8
date	2017.02.17.18.53.32;	author sthen;	state Exp;
branches;
next	1.7;
commitid	R6rMbeA8TNhmzWB4;

1.7
date	2016.06.22.20.05.40;	author sthen;	state Exp;
branches;
next	1.6;
commitid	EnU0HAX1qep1MppE;

1.6
date	2016.03.05.14.40.35;	author sthen;	state Exp;
branches;
next	1.5;
commitid	ueBpCw2SxWSX3ZZI;

1.5
date	2015.12.15.20.05.03;	author sthen;	state Exp;
branches;
next	1.4;
commitid	zaYkT0Y9LecyMgtm;

1.4
date	2015.11.05.21.29.02;	author sthen;	state Exp;
branches;
next	1.3;
commitid	v9i5hDDSBKqP5pls;

1.3
date	2015.07.16.01.44.00;	author sthen;	state Exp;
branches;
next	1.2;
commitid	kSPbvR6QMA7Gz7zd;

1.2
date	2015.02.17.10.03.59;	author sthen;	state Exp;
branches;
next	1.1;
commitid	aE1YbLLSIcViF5Lw;

1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.29;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.08.23.22.56.27;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.22.11.31.07;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.16.11.38.22;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.20.00.00.27;	author brad;	state Exp;
branches;
next	1.1.1.7;
commitid	bB36RwIVwTq8fGsI;

1.1.1.7
date	2014.12.11.16.18.04;	author brad;	state Exp;
branches;
next	1.1.1.8;
commitid	fGLTsCVGImGBxGUi;

1.1.1.8
date	2015.02.17.10.01.51;	author sthen;	state Exp;
branches;
next	1.1.1.9;
commitid	HIel2ZueDMYXVbaV;

1.1.1.9
date	2015.07.16.01.42.20;	author sthen;	state Exp;
branches;
next	;
commitid	kEVXcRu8XDMmCd6c;


desc
@@


1.9
log
@update to unbound-1.6.1 release; only version string changes compared to
the release candidate we had.
@
text
@.TH "unbound-anchor" "8" "Feb 21, 2017" "NLnet Labs" "unbound 1.6.1"
.\"
.\" unbound-anchor.8 -- unbound anchor maintenance utility manual
.\"
.\" Copyright (c) 2008, NLnet Labs. All rights reserved.
.\"
.\" See LICENSE for the license.
.\"
.\"
.SH "NAME"
.B unbound\-anchor
\- Unbound anchor utility.
.SH "SYNOPSIS"
.B unbound\-anchor
.RB [ opts ]
.SH "DESCRIPTION"
.B Unbound\-anchor
performs setup or update of the root trust anchor for DNSSEC validation.
The program fetches the trust anchor with the method from RFC7958 when
regular RFC5011 update fails to bring it up to date.
It can be run (as root) from the commandline, or run as part of startup
scripts.  Before you start the \fIunbound\fR(8) DNS server.
.P
Suggested usage:
.P
.nf
	# in the init scripts.
	# provide or update the root anchor (if necessary)
	unbound-anchor \-a "@@UNBOUND_ROOTKEY_FILE@@"
	# Please note usage of this root anchor is at your own risk
	# and under the terms of our LICENSE (see source).
	#
	# start validating resolver
	# the unbound.conf contains:
	#   auto-trust-anchor-file: "@@UNBOUND_ROOTKEY_FILE@@"
	unbound \-c unbound.conf
.fi
.P
This tool provides builtin default contents for the root anchor and root
update certificate files.
.P
It tests if the root anchor file works, and if not, and an update is possible,
attempts to update the root anchor using the root update certificate.
It performs a https fetch of root-anchors.xml and checks the results (RFC7958), 
if all checks are successful, it updates the root anchor file.  Otherwise
the root anchor file is unchanged.  It performs RFC5011 tracking if the
DNSSEC information available via the DNS makes that possible.
.P
It does not perform an update if the certificate is expired, if the network
is down or other errors occur.
.P
The available options are:
.TP
.B \-a \fIfile
The root anchor key file, that is read in and written out.
Default is @@UNBOUND_ROOTKEY_FILE@@.
If the file does not exist, or is empty, a builtin root key is written to it.
.TP
.B \-c \fIfile
The root update certificate file, that is read in.
Default is @@UNBOUND_ROOTCERT_FILE@@.
If the file does not exist, or is empty, a builtin certificate is used.
.TP
.B \-l
List the builtin root key and builtin root update certificate on stdout.
.TP
.B \-u \fIname
The server name, it connects to https://name.  Specify without https:// prefix.
The default is "data.iana.org".  It connects to the port specified with \-P.
You can pass an IPv4 address or IPv6 address (no brackets) if you want.
.TP
.B \-x \fIpath
The pathname to the root\-anchors.xml file on the server. (forms URL with \-u).
The default is /root\-anchors/root\-anchors.xml.
.TP
.B \-s \fIpath
The pathname to the root\-anchors.p7s file on the server. (forms URL with \-u).
The default is /root\-anchors/root\-anchors.p7s.  This file has to be a PKCS7
signature over the xml file, using the pem file (\-c) as trust anchor.
.TP
.B \-n \fIname
The emailAddress for the Subject of the signer's certificate from the p7s
signature file.  Only signatures from this name are allowed.  default is
dnssec@@iana.org.  If you pass "" then the emailAddress is not checked.
.TP
.B \-4
Use IPv4 for domain resolution and contacting the server on https.  Default is
to use IPv4 and IPv6 where appropriate.
.TP
.B \-6
Use IPv6 for domain resolution and contacting the server on https.  Default is
to use IPv4 and IPv6 where appropriate.
.TP
.B \-f \fIresolv.conf
Use the given resolv.conf file.  Not enabled by default, but you could try to
pass /etc/resolv.conf on some systems.  It contains the IP addresses of the
recursive nameservers to use.  However, since this tool could be used to
bootstrap that very recursive nameserver, it would not be useful (since
that server is not up yet, since we are bootstrapping it).  It could be
useful in a situation where you know an upstream cache is deployed (and
running) and in captive portal situations.
.TP
.B \-r \fIroot.hints
Use the given root.hints file (same syntax as the BIND and Unbound root hints
file) to bootstrap domain resolution.  By default a list of builtin root
hints is used.  Unbound\-anchor goes to the network itself for these roots,
to resolve the server (\-u option) and to check the root DNSKEY records.
It does so, because the tool when used for bootstrapping the recursive
resolver, cannot use that recursive resolver itself because it is bootstrapping
that server.
.TP
.B \-v
More verbose. Once prints informational messages, multiple times may enable
large debug amounts (such as full certificates or byte\-dumps of downloaded
files).  By default it prints almost nothing.  It also prints nothing on
errors by default; in that case the original root anchor file is simply
left undisturbed, so that a recursive server can start right after it.
.TP
.B \-C \fIunbound.conf
Debug option to read unbound.conf into the resolver process used.
.TP
.B \-P \fIport
Set the port number to use for the https connection.  The default is 443.
.TP
.B \-F
Debug option to force update of the root anchor through downloading the xml
file and verifying it with the certificate.  By default it first tries to
update by contacting the DNS, which uses much less bandwidth, is much
faster (200 msec not 2 sec), and is nicer to the deployed infrastructure.
With this option, it still attempts to do so (and may verbosely tell you),
but then ignores the result and goes on to use the xml fallback method.
.TP
.B \-h
Show the version and commandline option help.
.SH "EXIT CODE"
This tool exits with value 1 if the root anchor was updated using the
certificate or if the builtin root-anchor was used.  It exits with code
0 if no update was necessary, if the update was possible with RFC5011
tracking, or if an error occurred.
.P
You can check the exit value in this manner:
.nf
	unbound-anchor \-a "root.key" || logger "Please check root.key"
.fi
Or something more suitable for your operational environment.
.SH "TRUST"
The root keys and update certificate included in this tool
are provided for convenience and under the terms of our
license (see the LICENSE file in the source distribution or
http://unbound.nlnetlabs.nl/svn/trunk/LICENSE) and might be stale or
not suitable to your purpose.
.P
By running "unbound\-anchor \-l" the  keys and certificate that are
configured in the code are printed for your convenience.
.P
The build\-in configuration can be overridden by providing a root\-cert
file and a rootkey file.
.SH "FILES"
.TP
.I @@UNBOUND_ROOTKEY_FILE@@
The root anchor file, updated with 5011 tracking, and read and written to.
The file is created if it does not exist.
.TP
.I @@UNBOUND_ROOTCERT_FILE@@
The trusted self\-signed certificate that is used to verify the downloaded
DNSSEC root trust anchor.  You can update it by fetching it from
https://data.iana.org/root\-anchors/icannbundle.pem (and validate it).
If the file does not exist or is empty, a builtin version is used.
.TP
.I https://data.iana.org/root\-anchors/root\-anchors.xml
Source for the root key information.
.TP
.I https://data.iana.org/root\-anchors/root\-anchors.p7s
Signature on the root key information.
.SH "SEE ALSO"
\fIunbound.conf\fR(5), 
\fIunbound\fR(8).
@


1.8
log
@Update to unbound-1.6.1rc3 - thanks millert@@ and Brad for tests.
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Feb 14, 2017" "NLnet Labs" "unbound 1.6.1rc3"
@


1.7
log
@update to unbound-1.5.9. (there will be a follow-up commit to cherrypick a
couple of post-1.5.9 patches).

tests from Mark Patruck, danj, matthieu, millert. reads ok to jung, ok florian.
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Jun  9, 2016" "NLnet Labs" "unbound 1.5.9"
d19 2
d44 2
a45 2
It performs a https fetch of root-anchors.xml and checks the results, if
all checks are successful, it updates the root anchor file.  Otherwise
d70 1
a70 1
You can pass an IPv4 addres or IPv6 address (no brackets) if you want.
@


1.6
log
@update to unbound 1.5.8, ok florian@@ jung@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Mar  2, 2016" "NLnet Labs" "unbound 1.5.8"
@


1.5
log
@update to Unbound 1.5.7, looks fine to deraadt@@.

Notable addition: implements optional support for qname minimisation
(a privacy improvement; see draft-ietf-dnsop-qname-minimisation-07)
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Dec 10, 2015" "NLnet Labs" "unbound 1.5.7"
@


1.4
log
@merge
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Oct 20, 2015" "NLnet Labs" "unbound 1.5.6"
@


1.3
log
@merge
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Jul  9, 2015" "NLnet Labs" "unbound 1.5.4"
@


1.2
log
@merge conflicts
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Dec  8, 2014" "NLnet Labs" "unbound 1.5.1"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Feb  2, 2012" "NLnet Labs" "unbound 1.4.16"
a10 1
.LP
d27 1
a27 1
	unbound-anchor -a "@@UNBOUND_ROOTKEY_FILE@@"
d34 1
a34 1
	unbound -c unbound.conf
d47 1
a47 1
If does not perform an update if the certificate is expired, if the network
d79 5
a132 3
.TP
.B \-v
More verbose.  Prints output detailing what happens.
d141 1
a141 1
	unbound-anchor -a "root.key" || logger "Please check root.key"
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "May 24, 2012" "NLnet Labs" "unbound 1.4.17"
@


1.1.1.3
log
@update to unbound 1.4.18
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Aug  2, 2012" "NLnet Labs" "unbound 1.4.18"
@


1.1.1.4
log
@update to Unbound 1.4.21, ok brad@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Sep 19, 2013" "NLnet Labs" "unbound 1.4.21"
d48 1
a48 1
It does not perform an update if the certificate is expired, if the network
a79 5
.B \-n \fIname
The emailAddress for the Subject of the signer's certificate from the p7s
signature file.  Only signatures from this name are allowed.  default is
dnssec@@iana.org.  If you pass "" then the emailAddress is not checked.
.TP
d129 3
@


1.1.1.5
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Mar 12, 2014" "NLnet Labs" "unbound 1.4.22"
@


1.1.1.6
log
@update to Unbound 1.5.0, ok sthen@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Nov 18, 2014" "NLnet Labs" "unbound 1.5.0"
d11 1
@


1.1.1.7
log
@update to Unbound 1.5.1, ok sthen@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Dec  8, 2014" "NLnet Labs" "unbound 1.5.1"
d27 1
a27 1
	unbound-anchor \-a "@@UNBOUND_ROOTKEY_FILE@@"
d34 1
a34 1
	unbound \-c unbound.conf
d141 1
a141 1
	unbound-anchor \-a "root.key" || logger "Please check root.key"
@


1.1.1.8
log
@Update to unbound 1.5.2rc1, ok brad@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "@@date@@" "NLnet Labs" "unbound @@version@@"
@


1.1.1.9
log
@update to Unbound 1.5.4, ok florian@@, looks sane deraadt@@
@
text
@d1 1
a1 1
.TH "unbound-anchor" "8" "Jul  9, 2015" "NLnet Labs" "unbound 1.5.4"
@


