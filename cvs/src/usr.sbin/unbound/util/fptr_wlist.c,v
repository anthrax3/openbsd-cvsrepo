head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.4
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	UNBOUND_1_5_4:1.1.1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	UNBOUND_1_5_2RC1:1.1.1.5
	UNBOUND_1_5_1:1.1.1.5
	UNBOUND_1_5_0:1.1.1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	UNBOUND_1_4_22:1.1.1.3
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	UNBOUND_1_4_21:1.1.1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	UNBOUND_1_4_18:1.1.1.2
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.09.29.16.27.14;	author sthen;	state Exp;
branches;
next	1.9;
commitid	z5mbOZJLAmaMe3NV;

1.9
date	2017.08.12.11.22.46;	author sthen;	state Exp;
branches;
next	1.8;
commitid	jku4foGr2J38bu5W;

1.8
date	2017.02.17.18.53.32;	author sthen;	state Exp;
branches;
next	1.7;
commitid	R6rMbeA8TNhmzWB4;

1.7
date	2016.06.22.20.05.40;	author sthen;	state Exp;
branches;
next	1.6;
commitid	EnU0HAX1qep1MppE;

1.6
date	2015.07.16.01.44.01;	author sthen;	state Exp;
branches;
next	1.5;
commitid	kSPbvR6QMA7Gz7zd;

1.5
date	2014.11.20.01.15.19;	author brad;	state Exp;
branches;
next	1.4;
commitid	5B1rQYSaYoW2Vhmb;

1.4
date	2014.11.20.00.11.14;	author brad;	state Exp;
branches;
next	1.3;
commitid	8oTbeW6BGSPxqQCQ;

1.3
date	2014.03.16.11.43.29;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.16.08.57.21;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.32;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.16.11.38.23;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.20.00.00.29;	author brad;	state Exp;
branches;
next	1.1.1.5;
commitid	bB36RwIVwTq8fGsI;

1.1.1.5
date	2014.12.11.16.18.05;	author brad;	state Exp;
branches;
next	1.1.1.6;
commitid	fGLTsCVGImGBxGUi;

1.1.1.6
date	2015.07.16.01.42.20;	author sthen;	state Exp;
branches;
next	;
commitid	kEVXcRu8XDMmCd6c;


desc
@@


1.10
log
@update to unbound-1.6.6, ok florian
@
text
@/*
 * util/fptr_wlist.c - function pointer whitelists.
 *
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file contains functions that check function pointers.
 * The functions contain a whitelist of known good callback values.
 * Any other values lead to an error. 
 *
 * Due to the listing nature, this file violates all the modularization
 * boundaries in the program.
 */
#include "config.h"
#include "util/fptr_wlist.h"
#include "util/mini_event.h"
#include "services/outside_network.h"
#include "services/mesh.h"
#include "services/localzone.h"
#include "services/authzone.h"
#include "services/cache/infra.h"
#include "services/cache/rrset.h"
#include "services/view.h"
#include "dns64/dns64.h"
#include "iterator/iterator.h"
#include "iterator/iter_fwd.h"
#include "validator/validator.h"
#include "validator/val_anchor.h"
#include "validator/val_nsec3.h"
#include "validator/val_sigcrypt.h"
#include "validator/val_kentry.h"
#include "validator/val_neg.h"
#include "validator/autotrust.h"
#include "util/data/msgreply.h"
#include "util/data/packed_rrset.h"
#include "util/storage/slabhash.h"
#include "util/storage/dnstree.h"
#include "util/locks.h"
#include "libunbound/libworker.h"
#include "libunbound/context.h"
#include "libunbound/worker.h"
#include "util/tube.h"
#include "util/config_file.h"
#ifdef UB_ON_WINDOWS
#include "winrc/win_svc.h"
#endif
#include "respip/respip.h"

#ifdef WITH_PYTHONMODULE
#include "pythonmod/pythonmod.h"
#endif
#ifdef USE_CACHEDB
#include "cachedb/cachedb.h"
#endif
#ifdef USE_IPSECMOD
#include "ipsecmod/ipsecmod.h"
#endif
#ifdef CLIENT_SUBNET
#include "edns-subnet/subnetmod.h"
#endif

int 
fptr_whitelist_comm_point(comm_point_callback_type *fptr)
{
	if(fptr == &worker_handle_request) return 1;
	else if(fptr == &outnet_udp_cb) return 1;
	else if(fptr == &outnet_tcp_cb) return 1;
	else if(fptr == &tube_handle_listen) return 1;
	return 0;
}

int 
fptr_whitelist_comm_point_raw(comm_point_callback_type *fptr)
{
	if(fptr == &tube_handle_listen) return 1;
	else if(fptr == &tube_handle_write) return 1;
	else if(fptr == &remote_accept_callback) return 1;
	else if(fptr == &remote_control_callback) return 1;
	return 0;
}

int 
fptr_whitelist_comm_timer(void (*fptr)(void*))
{
	if(fptr == &pending_udp_timer_cb) return 1;
	else if(fptr == &outnet_tcptimer) return 1;
	else if(fptr == &pending_udp_timer_delay_cb) return 1;
	else if(fptr == &worker_stat_timer_cb) return 1;
	else if(fptr == &worker_probe_timer_cb) return 1;
#ifdef UB_ON_WINDOWS
	else if(fptr == &wsvc_cron_cb) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_comm_signal(void (*fptr)(int, void*))
{
	if(fptr == &worker_sighandler) return 1;
	return 0;
}

int fptr_whitelist_start_accept(void (*fptr)(void*))
{
	if(fptr == &worker_start_accept) return 1;
	return 0;
}

int fptr_whitelist_stop_accept(void (*fptr)(void*))
{
	if(fptr == &worker_stop_accept) return 1;
	return 0;
}

int 
fptr_whitelist_event(void (*fptr)(int, short, void *))
{
	if(fptr == &comm_point_udp_callback) return 1;
	else if(fptr == &comm_point_udp_ancil_callback) return 1;
	else if(fptr == &comm_point_tcp_accept_callback) return 1;
	else if(fptr == &comm_point_tcp_handle_callback) return 1;
	else if(fptr == &comm_timer_callback) return 1;
	else if(fptr == &comm_signal_callback) return 1;
	else if(fptr == &comm_point_local_handle_callback) return 1;
	else if(fptr == &comm_point_raw_handle_callback) return 1;
	else if(fptr == &tube_handle_signal) return 1;
	else if(fptr == &comm_base_handle_slow_accept) return 1;
#ifdef UB_ON_WINDOWS
	else if(fptr == &worker_win_stop_cb) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_pending_udp(comm_point_callback_type *fptr)
{
	if(fptr == &serviced_udp_callback) return 1;
	else if(fptr == &worker_handle_reply) return 1;
	else if(fptr == &libworker_handle_reply) return 1;
	return 0;
}

int 
fptr_whitelist_pending_tcp(comm_point_callback_type *fptr)
{
	if(fptr == &serviced_tcp_callback) return 1;
	else if(fptr == &worker_handle_reply) return 1;
	else if(fptr == &libworker_handle_reply) return 1;
	return 0;
}

int 
fptr_whitelist_serviced_query(comm_point_callback_type *fptr)
{
	if(fptr == &worker_handle_service_reply) return 1;
	else if(fptr == &libworker_handle_service_reply) return 1;
	return 0;
}

int 
fptr_whitelist_rbtree_cmp(int (*fptr) (const void *, const void *))
{
	if(fptr == &mesh_state_compare) return 1;
	else if(fptr == &mesh_state_ref_compare) return 1;
	else if(fptr == &addr_tree_compare) return 1;
	else if(fptr == &local_zone_cmp) return 1;
	else if(fptr == &local_data_cmp) return 1;
	else if(fptr == &fwd_cmp) return 1;
	else if(fptr == &pending_cmp) return 1;
	else if(fptr == &serviced_cmp) return 1;
	else if(fptr == &name_tree_compare) return 1;
	else if(fptr == &order_lock_cmp) return 1;
	else if(fptr == &codeline_cmp) return 1;
	else if(fptr == &nsec3_hash_cmp) return 1;
	else if(fptr == &mini_ev_cmp) return 1;
	else if(fptr == &anchor_cmp) return 1;
	else if(fptr == &canonical_tree_compare) return 1;
	else if(fptr == &context_query_cmp) return 1;
	else if(fptr == &val_neg_data_compare) return 1;
	else if(fptr == &val_neg_zone_compare) return 1;
	else if(fptr == &probetree_cmp) return 1;
	else if(fptr == &replay_var_compare) return 1;
	else if(fptr == &view_cmp) return 1;
	else if(fptr == &auth_zone_cmp) return 1;
	else if(fptr == &auth_data_cmp) return 1;
	return 0;
}

int 
fptr_whitelist_hash_sizefunc(lruhash_sizefunc_type fptr)
{
	if(fptr == &msgreply_sizefunc) return 1;
	else if(fptr == &ub_rrset_sizefunc) return 1;
	else if(fptr == &infra_sizefunc) return 1;
	else if(fptr == &key_entry_sizefunc) return 1;
	else if(fptr == &rate_sizefunc) return 1;
	else if(fptr == &ip_rate_sizefunc) return 1;
	else if(fptr == &test_slabhash_sizefunc) return 1;
#ifdef CLIENT_SUBNET
	else if(fptr == &msg_cache_sizefunc) return 1;
#endif
#ifdef USE_DNSCRYPT
	else if(fptr == &dnsc_shared_secrets_sizefunc) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_hash_compfunc(lruhash_compfunc_type fptr)
{
	if(fptr == &query_info_compare) return 1;
	else if(fptr == &ub_rrset_compare) return 1;
	else if(fptr == &infra_compfunc) return 1;
	else if(fptr == &key_entry_compfunc) return 1;
	else if(fptr == &rate_compfunc) return 1;
	else if(fptr == &ip_rate_compfunc) return 1;
	else if(fptr == &test_slabhash_compfunc) return 1;
#ifdef USE_DNSCRYPT
	else if(fptr == &dnsc_shared_secrets_compfunc) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_hash_delkeyfunc(lruhash_delkeyfunc_type fptr)
{
	if(fptr == &query_entry_delete) return 1;
	else if(fptr == &ub_rrset_key_delete) return 1;
	else if(fptr == &infra_delkeyfunc) return 1;
	else if(fptr == &key_entry_delkeyfunc) return 1;
	else if(fptr == &rate_delkeyfunc) return 1;
	else if(fptr == &ip_rate_delkeyfunc) return 1;
	else if(fptr == &test_slabhash_delkey) return 1;
#ifdef USE_DNSCRYPT
	else if(fptr == &dnsc_shared_secrets_delkeyfunc) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_hash_deldatafunc(lruhash_deldatafunc_type fptr)
{
	if(fptr == &reply_info_delete) return 1;
	else if(fptr == &rrset_data_delete) return 1;
	else if(fptr == &infra_deldatafunc) return 1;
	else if(fptr == &key_entry_deldatafunc) return 1;
	else if(fptr == &rate_deldatafunc) return 1;
	else if(fptr == &test_slabhash_deldata) return 1;
#ifdef CLIENT_SUBNET
	else if(fptr == &subnet_data_delete) return 1;
#endif
#ifdef USE_DNSCRYPT
	else if(fptr == &dnsc_shared_secrets_deldatafunc) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_hash_markdelfunc(lruhash_markdelfunc_type fptr)
{
	if(fptr == NULL) return 1;
	else if(fptr == &rrset_markdel) return 1;
	return 0;
}

/** whitelist env->send_query callbacks */
int 
fptr_whitelist_modenv_send_query(struct outbound_entry* (*fptr)(
	struct query_info* qinfo, uint16_t flags, int dnssec, int want_dnssec,
	int nocaps, struct sockaddr_storage* addr, socklen_t addrlen,
	uint8_t* zone, size_t zonelen, int ssl_upstream, struct module_qstate* q))
{
	if(fptr == &worker_send_query) return 1;
	else if(fptr == &libworker_send_query) return 1;
	return 0;
}

int 
fptr_whitelist_modenv_detach_subs(void (*fptr)(
        struct module_qstate* qstate))
{
	if(fptr == &mesh_detach_subs) return 1;
	return 0;
}

int 
fptr_whitelist_modenv_attach_sub(int (*fptr)(
        struct module_qstate* qstate, struct query_info* qinfo,
        uint16_t qflags, int prime, int valrec, struct module_qstate** newq))
{
	if(fptr == &mesh_attach_sub) return 1;
	return 0;
}

int 
fptr_whitelist_modenv_add_sub(int (*fptr)(
        struct module_qstate* qstate, struct query_info* qinfo,
        uint16_t qflags, int prime, int valrec, struct module_qstate** newq,
	struct mesh_state** sub))
{
	if(fptr == &mesh_add_sub) return 1;
	return 0;
}

int 
fptr_whitelist_modenv_kill_sub(void (*fptr)(struct module_qstate* newq))
{
	if(fptr == &mesh_state_delete) return 1;
	return 0;
}

int 
fptr_whitelist_modenv_detect_cycle(int (*fptr)(        
	struct module_qstate* qstate, struct query_info* qinfo,         
	uint16_t flags, int prime, int valrec))
{
	if(fptr == &mesh_detect_cycle) return 1;
	return 0;
}

int 
fptr_whitelist_mod_init(int (*fptr)(struct module_env* env, int id))
{
	if(fptr == &iter_init) return 1;
	else if(fptr == &val_init) return 1;
	else if(fptr == &dns64_init) return 1;
	else if(fptr == &respip_init) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_init) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_init) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_init) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_init) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_mod_deinit(void (*fptr)(struct module_env* env, int id))
{
	if(fptr == &iter_deinit) return 1;
	else if(fptr == &val_deinit) return 1;
	else if(fptr == &dns64_deinit) return 1;
	else if(fptr == &respip_deinit) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_deinit) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_deinit) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_deinit) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_deinit) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_mod_operate(void (*fptr)(struct module_qstate* qstate,
        enum module_ev event, int id, struct outbound_entry* outbound))
{
	if(fptr == &iter_operate) return 1;
	else if(fptr == &val_operate) return 1;
	else if(fptr == &dns64_operate) return 1;
	else if(fptr == &respip_operate) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_operate) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_operate) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_operate) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_operate) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_mod_inform_super(void (*fptr)(
        struct module_qstate* qstate, int id, struct module_qstate* super))
{
	if(fptr == &iter_inform_super) return 1;
	else if(fptr == &val_inform_super) return 1;
	else if(fptr == &dns64_inform_super) return 1;
	else if(fptr == &respip_inform_super) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_inform_super) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_inform_super) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_inform_super) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_inform_super) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_mod_clear(void (*fptr)(struct module_qstate* qstate,
        int id))
{
	if(fptr == &iter_clear) return 1;
	else if(fptr == &val_clear) return 1;
	else if(fptr == &dns64_clear) return 1;
	else if(fptr == &respip_clear) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_clear) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_clear) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_clear) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_clear) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_mod_get_mem(size_t (*fptr)(struct module_env* env, int id))
{
	if(fptr == &iter_get_mem) return 1;
	else if(fptr == &val_get_mem) return 1;
	else if(fptr == &dns64_get_mem) return 1;
	else if(fptr == &respip_get_mem) return 1;
#ifdef WITH_PYTHONMODULE
	else if(fptr == &pythonmod_get_mem) return 1;
#endif
#ifdef USE_CACHEDB
	else if(fptr == &cachedb_get_mem) return 1;
#endif
#ifdef USE_IPSECMOD
	else if(fptr == &ipsecmod_get_mem) return 1;
#endif
#ifdef CLIENT_SUBNET
	else if(fptr == &subnetmod_get_mem) return 1;
#endif
	return 0;
}

int 
fptr_whitelist_alloc_cleanup(void (*fptr)(void*))
{
	if(fptr == &worker_alloc_cleanup) return 1;
	return 0;
}

int fptr_whitelist_tube_listen(tube_callback_type* fptr)
{
	if(fptr == &worker_handle_control_cmd) return 1;
	else if(fptr == &libworker_handle_control_cmd) return 1;
	return 0;
}

int fptr_whitelist_mesh_cb(mesh_cb_func_type fptr)
{
	if(fptr == &libworker_fg_done_cb) return 1;
	else if(fptr == &libworker_bg_done_cb) return 1;
	else if(fptr == &libworker_event_done_cb) return 1;
	else if(fptr == &probe_answer_cb) return 1;
	return 0;
}

int fptr_whitelist_print_func(void (*fptr)(char*,void*))
{
	if(fptr == &config_print_func) return 1;
	else if(fptr == &config_collate_func) return 1;
	else if(fptr == &remote_get_opt_ssl) return 1;
	return 0;
}

int fptr_whitelist_inplace_cb_reply_generic(inplace_cb_reply_func_type* fptr,
	enum inplace_cb_list_type type)
{
#ifndef WITH_PYTHONMODULE
	(void)fptr;
#endif
	if(type == inplace_cb_reply) {
#ifdef WITH_PYTHONMODULE
		if(fptr == &python_inplace_cb_reply_generic) return 1;
#endif
	} else if(type == inplace_cb_reply_cache) {
#ifdef WITH_PYTHONMODULE
		if(fptr == &python_inplace_cb_reply_generic) return 1;
#endif
	} else if(type == inplace_cb_reply_local) {
#ifdef WITH_PYTHONMODULE
		if(fptr == &python_inplace_cb_reply_generic) return 1;
#endif
	} else if(type == inplace_cb_reply_servfail) {
#ifdef WITH_PYTHONMODULE
		if(fptr == &python_inplace_cb_reply_generic) return 1;
#endif
	}
	return 0;
}

int fptr_whitelist_inplace_cb_query(inplace_cb_query_func_type* fptr)
{
#ifdef CLIENT_SUBNET
	if(fptr == &ecs_whitelist_check)
		return 1;
#else
	(void)fptr;
#endif
	return 0;
}

int fptr_whitelist_inplace_cb_edns_back_parsed(
	inplace_cb_edns_back_parsed_func_type* fptr)
{
#ifdef CLIENT_SUBNET
	if(fptr == &ecs_edns_back_parsed)
		return 1;
#else
	(void)fptr;
#endif
	return 0;
}

int fptr_whitelist_inplace_cb_query_response(
	inplace_cb_query_response_func_type* fptr)
{
#ifdef CLIENT_SUBNET
	if(fptr == &ecs_query_response)
		return 1;
#else
	(void)fptr;
#endif
	return 0;
}
@


1.9
log
@update to unbound 1.6.4, ok florian@@
@
text
@d234 3
d250 3
d266 3
d283 3
@


1.8
log
@Update to unbound-1.6.1rc3 - thanks millert@@ and Brad for tests.
@
text
@d52 1
d79 1
d87 6
d216 2
d231 3
d272 3
d316 10
d347 1
d354 6
d369 1
d376 6
d392 1
d399 6
d415 1
d422 6
d438 1
d445 6
d460 1
d467 6
d533 13
a545 1
int fptr_whitelist_inplace_cb_query(inplace_cb_query_func_type* ATTR_UNUSED(fptr))
d547 18
@


1.7
log
@update to unbound-1.5.9. (there will be a follow-up commit to cherrypick a
couple of post-1.5.9 patches).

tests from Mark Patruck, danj, matthieu, millert. reads ok to jung, ok florian.
@
text
@d54 1
d87 1
a87 1
fptr_whitelist_comm_point(comm_point_callback_t *fptr)
d97 1
a97 1
fptr_whitelist_comm_point_raw(comm_point_callback_t *fptr)
d159 1
a159 1
fptr_whitelist_pending_udp(comm_point_callback_t *fptr)
d168 1
a168 1
fptr_whitelist_pending_tcp(comm_point_callback_t *fptr)
d177 1
a177 1
fptr_whitelist_serviced_query(comm_point_callback_t *fptr)
d207 1
d212 1
a212 1
fptr_whitelist_hash_sizefunc(lruhash_sizefunc_t fptr)
d219 1
d225 1
a225 1
fptr_whitelist_hash_compfunc(lruhash_compfunc_t fptr)
d232 1
d238 1
a238 1
fptr_whitelist_hash_delkeyfunc(lruhash_delkeyfunc_t fptr)
d245 1
d251 1
a251 1
fptr_whitelist_hash_deldatafunc(lruhash_deldatafunc_t fptr)
d263 1
a263 1
fptr_whitelist_hash_markdelfunc(lruhash_markdelfunc_t fptr)
d273 3
a275 5
        uint8_t* qname, size_t qnamelen, uint16_t qtype, uint16_t qclass,
        uint16_t flags, int dnssec, int want_dnssec, int nocaps,
	struct edns_option* opt_list, struct sockaddr_storage* addr,
	socklen_t addrlen, uint8_t* zone, size_t zonelen,
	struct module_qstate* q))
d415 1
a415 1
int fptr_whitelist_tube_listen(tube_callback_t* fptr)
d422 1
a422 1
int fptr_whitelist_mesh_cb(mesh_cb_func_t fptr)
d436 31
@


1.6
log
@merge
@
text
@d81 3
d270 2
a271 2
	struct sockaddr_storage* addr, socklen_t addrlen, 
	uint8_t* zone, size_t zonelen,
d321 3
d336 3
d352 3
d368 3
d384 3
d398 3
@


1.5
log
@Merge in some commits from upstream..

- Removed 'increased limit open files' log message that is written
  to console.  It is only written on verbosity 4 and higher.
  This keeps system bootup console cleaner.
- Fix #627: SSL_CTX_load_verify_locations return code not properly
  checked.
- Fix that CD flag disables DNS64 processing, returning the DNSSEC
  signed AAAA denial.
- Fix cdflag dns64 processing.

ok sthen@@
@
text
@d213 1
d225 1
d237 1
d249 1
@


1.4
log
@merge conflicts
@
text
@d283 1
a283 1
        uint16_t qflags, int prime, struct module_qstate** newq))
d299 1
a299 1
	uint16_t flags, int prime))
@


1.3
log
@merge conflicts, remove old libldns files
@
text
@a48 2
#include "daemon/worker.h"
#include "daemon/remote.h"
d54 1
d71 1
d262 1
a262 1
        uint16_t flags, int dnssec, int want_dnssec, 
d310 1
d322 1
d335 1
d348 1
d361 1
d373 1
@


1.2
log
@Don't spin accept() when hitting ENFILE/EMFILE. Upstream r2663.
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d107 1
d392 1
@


1.1
log
@Initial revision
@
text
@d122 12
d146 1
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@a121 12
int fptr_whitelist_start_accept(void (*fptr)(void*))
{
	if(fptr == &worker_start_accept) return 1;
	return 0;
}

int fptr_whitelist_stop_accept(void (*fptr)(void*))
{
	if(fptr == &worker_stop_accept) return 1;
	return 0;
}

a133 1
	else if(fptr == &comm_base_handle_slow_accept) return 1;
@


1.1.1.3
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a106 1
	else if(fptr == &pending_udp_timer_delay_cb) return 1;
a390 1
	else if(fptr == &libworker_event_done_cb) return 1;
@


1.1.1.4
log
@update to Unbound 1.5.0, ok sthen@@
@
text
@d49 2
a55 1
#include "dns64/dns64.h"
a71 1
#include "libunbound/worker.h"
d262 1
a262 1
        uint16_t flags, int dnssec, int want_dnssec, int nocaps,
a309 1
	else if(fptr == &dns64_init) return 1;
a320 1
	else if(fptr == &dns64_deinit) return 1;
a332 1
	else if(fptr == &dns64_operate) return 1;
a344 1
	else if(fptr == &dns64_inform_super) return 1;
a356 1
	else if(fptr == &dns64_clear) return 1;
a367 1
	else if(fptr == &dns64_get_mem) return 1;
@


1.1.1.5
log
@update to Unbound 1.5.1, ok sthen@@
@
text
@d283 1
a283 1
        uint16_t qflags, int prime, int valrec, struct module_qstate** newq))
d299 1
a299 1
	uint16_t flags, int prime, int valrec))
@


1.1.1.6
log
@update to Unbound 1.5.4, ok florian@@, looks sane deraadt@@
@
text
@a212 1
	else if(fptr == &rate_sizefunc) return 1;
a223 1
	else if(fptr == &rate_compfunc) return 1;
a234 1
	else if(fptr == &rate_delkeyfunc) return 1;
a245 1
	else if(fptr == &rate_deldatafunc) return 1;
@


