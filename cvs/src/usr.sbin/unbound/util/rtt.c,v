head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.10
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.12
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.8
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.2
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	UNBOUND_1_5_4:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.4
	OPENBSD_5_7_BASE:1.1.1.4
	UNBOUND_1_5_2RC1:1.1.1.4
	UNBOUND_1_5_1:1.1.1.3
	UNBOUND_1_5_0:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	UNBOUND_1_4_22:1.1.1.3
	OPENBSD_5_5:1.1.1.2.0.8
	OPENBSD_5_5_BASE:1.1.1.2
	UNBOUND_1_4_21:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.4
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.2
	OPENBSD_5_3_BASE:1.1.1.2
	UNBOUND_1_4_18:1.1.1.2
	UNBOUND_1_4_17:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.56.28;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.16.11.38.22;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2015.02.17.10.01.56;	author sthen;	state Exp;
branches;
next	;
commitid	HIel2ZueDMYXVbaV;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * util/rtt.c - UDP round trip time estimator for resend timeouts.
 *
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file contains a data type and functions to help estimate good
 * round trip times for UDP resend timeout values.
 */
#include "config.h"
#include "util/rtt.h"
#include "util/log.h"

/** calculate RTO from rtt information */
static int
calc_rto(const struct rtt_info* rtt)
{
	/* From Stevens, Unix Network Programming, Vol1, 3rd ed., p.598 */
	int rto = rtt->srtt + 4*rtt->rttvar;
	if(rto < RTT_MIN_TIMEOUT)
		rto = RTT_MIN_TIMEOUT;
	if(rto > RTT_MAX_TIMEOUT)
		rto = RTT_MAX_TIMEOUT;
	return rto;
}

void 
rtt_init(struct rtt_info* rtt)
{
	rtt->srtt = 0;
	rtt->rttvar = 94;
	rtt->rto = calc_rto(rtt);
	/* default value from the book is 0 + 4*0.75 = 3 seconds */
	/* first RTO is 0 + 4*0.094 = 0.376 seconds */
}

int 
rtt_timeout(const struct rtt_info* rtt)
{
	return rtt->rto;
}

int 
rtt_unclamped(const struct rtt_info* rtt)
{
	if(calc_rto(rtt) != rtt->rto) {
		/* timeout fallback has happened */
		return rtt->rto;
	}
	/* return unclamped value */
	return rtt->srtt + 4*rtt->rttvar;
}

void 
rtt_update(struct rtt_info* rtt, int ms)
{
	int delta = ms - rtt->srtt;
	rtt->srtt += delta / 8; /* g = 1/8 */
	if(delta < 0)
		delta = -delta; /* |delta| */
	rtt->rttvar += (delta - rtt->rttvar) / 4; /* h = 1/4 */
	rtt->rto = calc_rto(rtt);
}

void 
rtt_lost(struct rtt_info* rtt, int orig)
{
	/* exponential backoff */

	/* if a query succeeded and put down the rto meanwhile, ignore this */
	if(rtt->rto < orig)
		return;

	/* the original rto is doubled, not the current one to make sure
	 * that the values in the cache are not increased by lots of
	 * queries simultaneously as they time out at the same time */
	orig *= 2;
	if(rtt->rto <= orig) {
		rtt->rto = orig;
		if(rtt->rto > RTT_MAX_TIMEOUT)
			rtt->rto = RTT_MAX_TIMEOUT;
	}
}

int rtt_notimeout(const struct rtt_info* rtt)
{
	return calc_rto(rtt);
}
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.18
@
text
@d44 1
@


1.1.1.3
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1.1.4
log
@Update to unbound 1.5.2rc1, ok brad@@
@
text
@a44 2
/* overwritten by config: infra_cache_min_rtt: */
int RTT_MIN_TIMEOUT = 50;
@


