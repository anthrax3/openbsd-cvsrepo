head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	UNBOUND_1_5_4:1.1.1.6
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	UNBOUND_1_5_2RC1:1.1.1.6
	UNBOUND_1_5_1:1.1.1.6
	UNBOUND_1_5_0:1.1.1.6
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	UNBOUND_1_4_22:1.1.1.5
	OPENBSD_5_5:1.1.1.4.0.4
	OPENBSD_5_5_BASE:1.1.1.4
	UNBOUND_1_4_21:1.1.1.4
	OPENBSD_5_4:1.1.1.3.0.4
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.2
	OPENBSD_5_3_BASE:1.1.1.3
	UNBOUND_1_4_18:1.1.1.3
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.03.05.14.40.35;	author sthen;	state Exp;
branches;
next	1.4;
commitid	ueBpCw2SxWSX3ZZI;

1.4
date	2015.12.15.20.05.03;	author sthen;	state Exp;
branches;
next	1.3;
commitid	zaYkT0Y9LecyMgtm;

1.3
date	2014.11.20.00.11.14;	author brad;	state Exp;
branches;
next	1.2;
commitid	8oTbeW6BGSPxqQCQ;

1.2
date	2014.04.23.14.15.03;	author jca;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.33;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2012.08.23.22.56.28;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.22.11.31.08;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.16.11.38.23;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.20.00.00.28;	author brad;	state Exp;
branches;
next	;
commitid	bB36RwIVwTq8fGsI;


desc
@@


1.5
log
@update to unbound 1.5.8, ok florian@@ jung@@
@
text
@/*
 * util/random.c - thread safe random generator, which is reasonably secure.
 * 
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 * 
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 * Thread safe random functions. Similar to arc4random() with an explicit
 * initialisation routine.
 *
 * The code in this file is based on arc4random from
 * openssh-4.0p1/openbsd-compat/bsd-arc4random.c
 * That code is also BSD licensed. Here is their statement:
 *
 * Copyright (c) 1996, David Mazieres <dm@@uun.org>
 * Copyright (c) 2008, Damien Miller <djm@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#include "config.h"
#include "util/random.h"
#include "util/log.h"
#include <time.h>

#ifdef HAVE_NSS
/* nspr4 */
#include "prerror.h"
/* nss3 */
#include "secport.h"
#include "pk11pub.h"
#elif defined(HAVE_NETTLE)
#include "yarrow.h"
#endif

/** 
 * Max random value.  Similar to RAND_MAX, but more portable
 * (mingw uses only 15 bits random).
 */
#define MAX_VALUE 0x7fffffff

#if defined(HAVE_SSL)
void
ub_systemseed(unsigned int ATTR_UNUSED(seed))
{
	/* arc4random_uniform does not need seeds, it gets kernel entropy */
}

struct ub_randstate* 
ub_initstate(unsigned int ATTR_UNUSED(seed),
	struct ub_randstate* ATTR_UNUSED(from))
{
	struct ub_randstate* s = (struct ub_randstate*)malloc(1);
	if(!s) {
		log_err("malloc failure in random init");
		return NULL;
	}
	return s;
}

long int 
ub_random(struct ub_randstate* ATTR_UNUSED(s))
{
	/* This relies on MAX_VALUE being 0x7fffffff. */
	return (long)arc4random() & MAX_VALUE;
}

long int
ub_random_max(struct ub_randstate* state, long int x)
{
	(void)state;
	/* on OpenBSD, this does not need _seed(), or _stir() calls */
	return (long)arc4random_uniform((uint32_t)x);
}

#elif defined(HAVE_NSS)

/* not much to remember for NSS since we use its pk11_random, placeholder */
struct ub_randstate {
	int ready;
};

void ub_systemseed(unsigned int ATTR_UNUSED(seed))
{
}

struct ub_randstate* ub_initstate(unsigned int ATTR_UNUSED(seed), 
	struct ub_randstate* ATTR_UNUSED(from))
{
	struct ub_randstate* s = (struct ub_randstate*)calloc(1, sizeof(*s));
	if(!s) {
		log_err("malloc failure in random init");
		return NULL;
	}
	return s;
}

long int ub_random(struct ub_randstate* ATTR_UNUSED(state))
{
	long int x;
	/* random 31 bit value. */
	SECStatus s = PK11_GenerateRandom((unsigned char*)&x, (int)sizeof(x));
	if(s != SECSuccess) {
		log_err("PK11_GenerateRandom error: %s",
			PORT_ErrorToString(PORT_GetError()));
	}
	return x & MAX_VALUE;
}

#elif defined(HAVE_NETTLE)

/**
 * libnettle implements a Yarrow-256 generator (SHA256 + AES),
 * and we have to ensure it is seeded before use.
 */
struct ub_randstate {
	struct yarrow256_ctx ctx;
	int seeded;
};

void ub_systemseed(unsigned int ATTR_UNUSED(seed))
{
/**
 * We seed on init and not here, as we need the ctx to re-seed.
 * This also means that re-seeding is not supported.
 */
	log_err("Re-seeding not supported, generator untouched");
}

struct ub_randstate* ub_initstate(unsigned int seed,
	struct ub_randstate* ATTR_UNUSED(from))
{
	struct ub_randstate* s = (struct ub_randstate*)calloc(1, sizeof(*s));
	uint8_t buf[YARROW256_SEED_FILE_SIZE];
	if(!s) {
		log_err("malloc failure in random init");
		return NULL;
	}
	/* Setup Yarrow context */
	yarrow256_init(&s->ctx, 0, NULL);

	if(getentropy(buf, sizeof(buf)) != -1) {
		/* got entropy */
		yarrow256_seed(&s->ctx, YARROW256_SEED_FILE_SIZE, buf);
		s->seeded = yarrow256_is_seeded(&s->ctx);
	} else {
		/* Stretch the uint32 input seed and feed it to Yarrow */
		uint32_t v = seed;
		size_t i;
		for(i=0; i < (YARROW256_SEED_FILE_SIZE/sizeof(seed)); i++) {
			memmove(buf+i*sizeof(seed), &v, sizeof(seed));
			v = v*seed + (uint32_t)i;
		}
		yarrow256_seed(&s->ctx, YARROW256_SEED_FILE_SIZE, buf);
		s->seeded = yarrow256_is_seeded(&s->ctx);
	}

	return s;
}

long int ub_random(struct ub_randstate* s)
{
	/* random 31 bit value. */
	long int x = 0;
	if (!s || !s->seeded) {
		log_err("Couldn't generate randomness, Yarrow-256 generator not yet seeded");
	} else {
		yarrow256_random(&s->ctx, sizeof(x), (uint8_t *)&x);
	}
	return x & MAX_VALUE;
}
#endif /* HAVE_SSL or HAVE_NSS or HAVE_NETTLE */


#if defined(HAVE_NSS) || defined(HAVE_NETTLE)
long int
ub_random_max(struct ub_randstate* state, long int x)
{
	/* make sure we fetch in a range that is divisible by x. ignore
	 * values from d .. MAX_VALUE, instead draw a new number */
	long int d = MAX_VALUE - (MAX_VALUE % x); /* d is divisible by x */
	long int v = ub_random(state);
	while(d <= v)
		v = ub_random(state);
	return (v % x);
}
#endif /* HAVE_NSS or HAVE_NETTLE */

void 
ub_randfree(struct ub_randstate* s)
{
	free(s);
	/* user app must do RAND_cleanup(); */
}
@


1.4
log
@update to Unbound 1.5.7, looks fine to deraadt@@.

Notable addition: implements optional support for qname minimisation
(a privacy improvement; see draft-ietf-dnsop-qname-minimisation-07)
@
text
@d231 1
a231 2
	if(s)
		free(s);
@


1.3
log
@merge conflicts
@
text
@d71 2
d81 1
a81 1
#ifndef HAVE_NSS
d115 1
a115 1
#else
d149 66
d226 1
a226 1
#endif /* HAVE_NSS */
@


1.2
log
@Use arc4random as PRNG backend, instead of libcrypto RAND.
Feedback and ok guenther@@ deraadt@@

Discussed with upstream, who is preparing an arc4random backend.
@
text
@d65 8
d79 1
d81 1
a81 1
ub_systemseed(unsigned int seed)
d83 1
d87 2
a88 1
ub_initstate(unsigned int seed, struct ub_randstate* from)
d90 1
a90 1
	struct ub_randstate* s = (struct ub_randstate*)malloc(0);
d99 1
a99 1
ub_random(struct ub_randstate* s)
d108 49
a156 1
	return (long)arc4random_uniform(x);
d158 1
d165 1
@


1.1
log
@Initial revision
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d63 1
a63 17
#include <openssl/rand.h>
#include <openssl/rc4.h>
#include <openssl/err.h>

/**
 * Struct with per-thread random state.
 * Keeps SSL types away from the header file.
 */
struct ub_randstate {
	/** key used for arc4random generation */
	RC4_KEY rc4;
	/** keeps track of key usage */
	int rc4_ready;
};

/** Size of key to use */
#define SEED_SIZE 20
a70 4
/** Number of bytes to reseed after */
#define REKEY_BYTES	(1 << 24)

/* (re)setup system seed */
a73 57
	/* RAND_ is threadsafe, by the way */
	if(!RAND_status()) {
		/* try to seed it */
		unsigned char buf[256];
		unsigned int v = seed;
		size_t i;
		for(i=0; i<256/sizeof(seed); i++) {
			memmove(buf+i*sizeof(seed), &v, sizeof(seed));
			v = v*seed + (unsigned int)i;
		}
		RAND_seed(buf, 256);
		if(!RAND_status()) {
			log_err("Random generator has no entropy "
				"(error %ld)", ERR_get_error());
		} else {
			verbose(VERB_OPS, "openssl has no entropy, "
				"seeding with time and pid");
		}
	}
}

/** reseed random generator */
static void
ub_arc4random_stir(struct ub_randstate* s, struct ub_randstate* from)
{
	unsigned char rand_buf[SEED_SIZE];
	int i;

	memset(&s->rc4, 0, sizeof(s->rc4));
	memset(rand_buf, 0xc, sizeof(rand_buf));
	if (from) {
		for(i=0; i<SEED_SIZE; i++)
			rand_buf[i] = (unsigned char)ub_random(from);
	} else {
		if(!RAND_status())
			ub_systemseed((unsigned)getpid()^(unsigned)time(NULL));
		if (RAND_bytes(rand_buf, (int)sizeof(rand_buf)) <= 0) {
			/* very unlikely that this happens, since we seeded
			 * above, if it does; complain and keep going */
			log_err("Couldn't obtain random bytes (error %ld)",
				    ERR_get_error());
			s->rc4_ready = 256;
			return;
		}
	}
	RC4_set_key(&s->rc4, SEED_SIZE, rand_buf);

	/*
	 * Discard early keystream, as per recommendations in:
	 * http://www.wisdom.weizmann.ac.il/~itsik/RC4/Papers/Rc4_ksa.ps
	 */
	for(i = 0; i <= 256; i += sizeof(rand_buf))
		RC4(&s->rc4, sizeof(rand_buf), rand_buf, rand_buf);

	memset(rand_buf, 0, sizeof(rand_buf));

	s->rc4_ready = REKEY_BYTES;
d79 1
a79 1
	struct ub_randstate* s = (struct ub_randstate*)calloc(1, sizeof(*s));
a83 2
	ub_systemseed(seed);
	ub_arc4random_stir(s, from);
d90 2
a91 9
	unsigned int r = 0;
	if (s->rc4_ready <= 0) {
		ub_arc4random_stir(s, NULL);
	}

	RC4(&s->rc4, sizeof(r), 
		(unsigned char *)&r, (unsigned char *)&r);
	s->rc4_ready -= sizeof(r);
	return (long int)((r) % (((unsigned)MAX_VALUE + 1)));
d97 1
a97 7
	/* make sure we fetch in a range that is divisible by x. ignore
	 * values from d .. MAX_VALUE, instead draw a new number */
	long int d = MAX_VALUE - (MAX_VALUE % x); /* d is divisible by x */
	long int v = ub_random(state);
	while(d <= v)
		v = ub_random(state);
	return (v % x);
a104 1
	/* user app must do RAND_cleanup(); */
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@d78 2
a79 2
/** Size of key to use (must be multiple of 8) */
#define SEED_SIZE 24
d119 1
a119 3
	/* not as unsigned char, but longerint so that it is
	   aligned properly on alignment sensitive platforms */
	uint64_t rand_buf[SEED_SIZE/sizeof(uint64_t)];
a124 1
		uint8_t* rbuf = (uint8_t*)rand_buf;
d126 1
a126 1
			rbuf[i] = (uint8_t)ub_random(from);
d130 1
a130 2
		if (RAND_bytes((unsigned char*)rand_buf,
			(int)sizeof(rand_buf)) <= 0) {
d139 1
a139 1
	RC4_set_key(&s->rc4, SEED_SIZE, (unsigned char*)rand_buf);
d146 1
a146 2
		RC4(&s->rc4, sizeof(rand_buf), (unsigned char*)rand_buf,
			(unsigned char*)rand_buf);
@


1.1.1.3
log
@update to unbound 1.4.18
@
text
@a62 1
#ifdef HAVE_SSL
a65 5
#elif defined(HAVE_NSS)
#include <nspr4/prerror.h>
#include <nss3/secport.h>
#include <nss3/pk11pub.h>
#endif
a66 7
/** 
 * Max random value.  Similar to RAND_MAX, but more portable
 * (mingw uses only 15 bits random).
 */
#define MAX_VALUE 0x7fffffff

#ifdef HAVE_SSL
d81 6
a142 10
#ifdef HAVE_FIPS_MODE
	if(FIPS_mode()) {
		/* RC4 is not allowed, get some trustworthy randomness */
		/* double certainty here, this routine should not be
		 * called in FIPS_mode */
		memset(rand_buf, 0, sizeof(rand_buf));
		s->rc4_ready = REKEY_BYTES;
		return;
	}
#endif /* FIPS_MODE */
a166 3
#ifdef HAVE_FIPS_MODE
	if(!FIPS_mode())
#endif
a174 14
#ifdef HAVE_FIPS_MODE
	if(FIPS_mode()) {
		/* RC4 is not allowed, get some trustworthy randomness */
		/* we use pseudo bytes: it tries to return secure randomness
		 * but returns 'something' if that fails.  We need something
		 * else if it fails, because we cannot block here */
		if(RAND_pseudo_bytes((unsigned char*)&r, (int)sizeof(r))
			== -1) {
			log_err("FIPSmode, no arc4random but RAND failed "
				"(error %ld)", ERR_get_error());
		}
		return (long int)((r) % (((unsigned)MAX_VALUE + 1)));
	}
#endif /* FIPS_MODE */
a183 36

#elif defined(HAVE_NSS)

/* not much to remember for NSS since we use its pk11_random, placeholder */
struct ub_randstate {
	int ready;
};

void ub_systemseed(unsigned int ATTR_UNUSED(seed))
{
}

struct ub_randstate* ub_initstate(unsigned int ATTR_UNUSED(seed), 
	struct ub_randstate* ATTR_UNUSED(from))
{
	struct ub_randstate* s = (struct ub_randstate*)calloc(1, sizeof(*s));
	if(!s) {
		log_err("malloc failure in random init");
		return NULL;
	}
	return s;
}

long int ub_random(struct ub_randstate* ATTR_UNUSED(state))
{
	long int x;
	/* random 31 bit value. */
	SECStatus s = PK11_GenerateRandom((unsigned char*)&x, (int)sizeof(x));
	if(s != SECSuccess) {
		log_err("PK11_GenerateRandom error: %s",
			PORT_ErrorToString(PORT_GetError()));
	}
	return x & MAX_VALUE;
}

#endif /* HAVE_SSL or HAVE_NSS */
@


1.1.1.4
log
@update to Unbound 1.4.21, ok brad@@
@
text
@d68 3
a70 5
/* nspr4 */
#include "prerror.h"
/* nss3 */
#include "secport.h"
#include "pk11pub.h"
@


1.1.1.5
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a62 1
#include <time.h>
@


1.1.1.6
log
@update to Unbound 1.5.0, ok sthen@@
@
text
@d64 5
a68 2

#ifdef HAVE_NSS
d82 19
a100 1
#ifndef HAVE_NSS
d102 1
a102 1
ub_systemseed(unsigned int ATTR_UNUSED(seed))
d104 72
a175 1
	/* arc4random_uniform does not need seeds, it gets kernel entropy */
d179 1
a179 2
ub_initstate(unsigned int ATTR_UNUSED(seed),
	struct ub_randstate* ATTR_UNUSED(from))
d181 1
a181 1
	struct ub_randstate* s = (struct ub_randstate*)malloc(1);
d186 5
d195 1
a195 1
ub_random(struct ub_randstate* ATTR_UNUSED(s))
d197 18
a214 3
	/* This relies on MAX_VALUE being 0x7fffffff. */
	return (long)arc4random() & MAX_VALUE;
}
d216 4
a219 6
long int
ub_random_max(struct ub_randstate* state, long int x)
{
	(void)state;
	/* on OpenBSD, this does not need _seed(), or _stir() calls */
	return (long)arc4random_uniform((uint32_t)x);
d222 1
a222 1
#else
d256 2
a268 1
#endif /* HAVE_NSS */
@


