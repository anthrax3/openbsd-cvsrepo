head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	UNBOUND_1_5_4:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.6
	OPENBSD_5_7_BASE:1.1.1.2
	UNBOUND_1_5_2RC1:1.1.1.2
	UNBOUND_1_5_1:1.1.1.2
	UNBOUND_1_5_0:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	UNBOUND_1_4_22:1.1.1.2
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	UNBOUND_1_4_21:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	UNBOUND_1_4_18:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.06.22.20.05.41;	author sthen;	state Exp;
branches;
next	1.2;
commitid	EnU0HAX1qep1MppE;

1.2
date	2015.12.15.20.05.03;	author sthen;	state Exp;
branches;
next	1.1;
commitid	zaYkT0Y9LecyMgtm;

1.1
date	2012.08.23.22.56.32;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.23.22.56.32;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.16.11.38.28;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to unbound-1.5.9. (there will be a follow-up commit to cherrypick a
couple of post-1.5.9 patches).

tests from Mark Patruck, danj, matthieu, millert. reads ok to jung, ok florian.
@
text
@/*
 * validator/val_secalgo.h - validator security algorithm functions.
 *
 * Copyright (c) 2012, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file contains helper functions for the validator module.
 * The functions take buffers with raw data and convert to library calls.
 */

#ifndef VALIDATOR_VAL_SECALGO_H
#define VALIDATOR_VAL_SECALGO_H
struct sldns_buffer;

/** Return size of nsec3 hash algorithm, 0 if not supported */
size_t nsec3_hash_algo_size_supported(int id);

/**
 * Hash a single hash call of an NSEC3 hash algorithm.
 * Iterations and salt are done by the caller.
 * @@param algo: nsec3 hash algorithm.
 * @@param buf: the buffer to digest
 * @@param len: length of buffer to digest.
 * @@param res: result stored here (must have sufficient space).
 * @@return false on failure.
*/
int secalgo_nsec3_hash(int algo, unsigned char* buf, size_t len,
        unsigned char* res);

/**
 * Calculate the sha256 hash for the data buffer into the result.
 * @@param buf: buffer to digest.
 * @@param len: length of the buffer to digest.
 * @@param res: result is stored here (space 256/8 bytes).
 */
void secalgo_hash_sha256(unsigned char* buf, size_t len, unsigned char* res);

/**
 * Return size of DS digest according to its hash algorithm.
 * @@param algo: DS digest algo.
 * @@return size in bytes of digest, or 0 if not supported. 
 */
size_t ds_digest_size_supported(int algo);

/**
 * @@param algo: the DS digest algo
 * @@param buf: the buffer to digest
 * @@param len: length of buffer to digest.
 * @@param res: result stored here (must have sufficient space).
 * @@return false on failure.
 */
int secalgo_ds_digest(int algo, unsigned char* buf, size_t len,
	unsigned char* res);

/** return true if DNSKEY algorithm id is supported */
int dnskey_algo_id_is_supported(int id);

/**
 * Check a canonical sig+rrset and signature against a dnskey
 * @@param buf: buffer with data to verify, the first rrsig part and the
 *	canonicalized rrset.
 * @@param algo: DNSKEY algorithm.
 * @@param sigblock: signature rdata field from RRSIG
 * @@param sigblock_len: length of sigblock data.
 * @@param key: public key data from DNSKEY RR.
 * @@param keylen: length of keydata.
 * @@param reason: bogus reason in more detail.
 * @@return secure if verification succeeded, bogus on crypto failure,
 *	unchecked on format errors and alloc failures.
 */
enum sec_status verify_canonrrset(struct sldns_buffer* buf, int algo,
	unsigned char* sigblock, unsigned int sigblock_len,
	unsigned char* key, unsigned int keylen, char** reason);

#endif /* VALIDATOR_VAL_SECALGO_H */
@


1.2
log
@update to Unbound 1.5.7, looks fine to deraadt@@.

Notable addition: implements optional support for qname minimisation
(a privacy improvement; see draft-ietf-dnsop-qname-minimisation-07)
@
text
@d63 8
@


1.1
log
@Initial revision
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d45 16
d95 1
a95 1
enum sec_status verify_canonrrset(ldns_buffer* buf, int algo,
@


1.1.1.1
log
@update to unbound 1.4.18
@
text
@@


1.1.1.2
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a44 1
struct sldns_buffer;
d79 1
a79 1
enum sec_status verify_canonrrset(struct sldns_buffer* buf, int algo,
@

