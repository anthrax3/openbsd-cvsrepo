head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	LDNS_1_6_17:1.1.1.1
	LDNS_1_6_16:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	LDNS_1_6_13:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	LDNS_1_6_12:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2014.03.16.11.43.29;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2012.03.26.18.08.26;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.08.26;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge conflicts, remove old libldns files
@
text
@/**
 * error.c
 *
 * error reporting routines
 * basicly wrappers around printf
 *
 * (c) 2005 NLnet Labs
 *
 * See the file LICENSE for the license
 *
 */

#include "drill.h"
#include <ldns/ldns.h>

static void
warning_va_list(const char *fmt, va_list args)
{
        fprintf(stderr, "Warning: ");
        vfprintf(stderr, fmt, args);
        fprintf(stderr, "\n");
}

void
warning(const char *fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	warning_va_list(fmt, args);
	va_end(args);
}

static void
error_va_list(const char *fmt, va_list args)
{
        fprintf(stderr, "Error: ");
        vfprintf(stderr, fmt, args);
        fprintf(stderr, "\n");
}

void
error(const char *fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	error_va_list(fmt, args);
	va_end(args);
	exit(EXIT_FAILURE);
}

static void
verbose_va_list(const char *fmt, va_list args)
{
        vfprintf(stdout, fmt, args);
        fprintf(stdout, "\n");
}

/* print stuff */
void
mesg(const char *fmt, ...)
{
	va_list args;
	if (verbosity == -1) {
		return;
	}
	fprintf(stdout, ";; ");
	va_start(args, fmt);
	verbose_va_list(fmt, args);
	va_end(args);
}

/* print stuff when in verbose mode (1) */
void
verbose(const char *fmt, ...)
{
	va_list args;
	if (verbosity < 1) {
		return;
	}

	va_start(args, fmt);
	verbose_va_list(fmt, args);
	va_end(args);
}

/* print stuff when in vverbose mode (2) */
void
vverbose(const char *fmt, ...)
{
	va_list args;
	if (verbosity < 2) {
		return;
	}

	va_start(args, fmt);
	verbose_va_list(fmt, args);
	va_end(args);
}

static void
debug_va_list(const char *fmt, va_list args)
{
        vfprintf(stderr, fmt, args);
        fprintf(stderr, "\n");
}

void
debug(const char *fmt, ...)
{
	va_list args;
	fprintf(stderr, "[DEBUG] ");
	va_start(args, fmt);
	debug_va_list(fmt, args);
	va_end(args);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import ldns 1.6.12, needed for Unbound, to work on in-tree.

These are the direct sources from NLnet Labs upstream, minus these:
contrib doc/images examples packaging/fedora

ok deraadt@@ jakob@@
@
text
@@
