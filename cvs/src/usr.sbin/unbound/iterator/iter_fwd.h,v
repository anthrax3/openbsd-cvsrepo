head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.2
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.8
	OPENBSD_5_8_BASE:1.1.1.4
	UNBOUND_1_5_4:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.6
	OPENBSD_5_7_BASE:1.1.1.4
	UNBOUND_1_5_2RC1:1.1.1.4
	UNBOUND_1_5_1:1.1.1.4
	UNBOUND_1_5_0:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	UNBOUND_1_4_22:1.1.1.4
	OPENBSD_5_5:1.1.1.3.0.4
	OPENBSD_5_5_BASE:1.1.1.3
	UNBOUND_1_4_21:1.1.1.3
	OPENBSD_5_4:1.1.1.2.0.4
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.2
	OPENBSD_5_3_BASE:1.1.1.2
	UNBOUND_1_4_18:1.1.1.2
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.02.17.18.53.32;	author sthen;	state Exp;
branches;
next	1.1;
commitid	R6rMbeA8TNhmzWB4;

1.1
date	2012.03.26.18.05.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.43;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.30;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.22.11.31.12;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.16.11.38.25;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to unbound-1.6.1rc3 - thanks millert@@ and Brad for tests.
@
text
@/*
 * iterator/iter_fwd.h - iterative resolver module forward zones.
 *
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file contains functions to assist the iterator module.
 * Keep track of forward zones, and read those from config.
 */

#ifndef ITERATOR_ITER_FWD_H
#define ITERATOR_ITER_FWD_H
#include "util/rbtree.h"
struct config_file;
struct delegpt;

/**
 * Iterator forward zones structure
 */
struct iter_forwards {
	/** 
	 * Zones are stored in this tree. Sort order is specially chosen.
	 * first sorted on qclass. Then on dname in nsec-like order, so that
	 * a lookup on class, name will return an exact match or the closest
	 * match which gives the ancestor needed.
	 * contents of type iter_forward_zone.
	 */
	rbtree_type* tree;
};

/**
 * Iterator forward servers for a particular zone.
 */
struct iter_forward_zone {
	/** redblacktree node, key is this structure: class and name */
	rbnode_type node;
	/** name */
	uint8_t* name;
	/** length of name */
	size_t namelen;
	/** number of labels in name */
	int namelabs;
	/** delegation point with forward server information for this zone. 
	 * If NULL then this forward entry is used to indicate that a
	 * stub-zone with the same name exists, and should be used. 
	 * This delegation point is malloced.
	 */
	struct delegpt* dp;
	/** pointer to parent in tree (or NULL if none) */
	struct iter_forward_zone* parent;
	/** class. host order. */
	uint16_t dclass;
};

/**
 * Create forwards 
 * @@return new forwards or NULL on error.
 */
struct iter_forwards* forwards_create(void);

/**
 * Delete forwards.
 * @@param fwd: to delete.
 */
void forwards_delete(struct iter_forwards* fwd);

/**
 * Process forwards config.
 * @@param fwd: where to store.
 * @@param cfg: config options.
 * @@return 0 on error.
 */
int forwards_apply_cfg(struct iter_forwards* fwd, struct config_file* cfg);

/**
 * Find forward zone exactly by name
 * @@param fwd: forward storage.
 * @@param qname: The qname of the query.
 * @@param qclass: The qclass of the query.
 * @@return: A delegation point or null.
 */
struct delegpt* forwards_find(struct iter_forwards* fwd, uint8_t* qname,
	uint16_t qclass);

/**
 * Find forward zone information
 * For this qname/qclass find forward zone information, returns delegation
 * point with server names and addresses, or NULL if no forwarding is needed.
 *
 * @@param fwd: forward storage.
 * @@param qname: The qname of the query.
 * @@param qclass: The qclass of the query.
 * @@return: A delegation point if the query has to be forwarded to that list,
 *         otherwise null.
 */
struct delegpt* forwards_lookup(struct iter_forwards* fwd, 
	uint8_t* qname, uint16_t qclass);

/**
 * Same as forwards_lookup, but for the root only
 * @@param fwd: forward storage.
 * @@param qclass: The qclass of the query.
 * @@return: A delegation point if root forward exists, otherwise null.
 */
struct delegpt* forwards_lookup_root(struct iter_forwards* fwd, 
	uint16_t qclass);

/**
 * Find next root item in forwards lookup tree.
 * @@param fwd: the forward storage
 * @@param qclass: class to look at next, or higher.
 * @@return false if none found, or if true stored in qclass.
 */
int forwards_next_root(struct iter_forwards* fwd, uint16_t* qclass);

/**
 * Get memory in use by forward storage
 * @@param fwd: forward storage.
 * @@return bytes in use
 */
size_t forwards_get_mem(struct iter_forwards* fwd);

/** compare two fwd entries */
int fwd_cmp(const void* k1, const void* k2);

/**
 * Add zone to forward structure. For external use since it recalcs 
 * the tree parents.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param dp: delegation point with name and target nameservers for new
 *	forward zone. malloced.
 * @@return false on failure (out of memory);
 */
int forwards_add_zone(struct iter_forwards* fwd, uint16_t c, 
	struct delegpt* dp);

/**
 * Remove zone from forward structure. For external use since it 
 * recalcs the tree parents.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param nm: name of zone (in uncompressed wireformat).
 */
void forwards_delete_zone(struct iter_forwards* fwd, uint16_t c, uint8_t* nm);

/**
 * Add stub hole (empty entry in forward table, that makes resolution skip
 * a forward-zone because the stub zone should override the forward zone).
 * Does not add one if not necessary.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param nm: name of zone (in uncompressed wireformat).
 * @@return false on failure (out of memory);
 */
int forwards_add_stub_hole(struct iter_forwards* fwd, uint16_t c, uint8_t* nm);

/**
 * Remove stub hole, if one exists.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param nm: name of zone (in uncompressed wireformat).
 */
void forwards_delete_stub_hole(struct iter_forwards* fwd, uint16_t c,
	uint8_t* nm);

#endif /* ITERATOR_ITER_FWD_H */
@


1.1
log
@Initial revision
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
a47 1
struct regional;
a52 2
	/** regional where forward zone server addresses are allocated */
	struct regional* region;
d60 1
a60 1
	rbtree_t* tree;
d68 1
a68 1
	rbnode_t node;
d77 3
a79 1
	 * stub-zone with the same name exists, and should be used. */
d108 10
d164 1
a164 3
 *	forward zone. This delegation point and all its data must be
 *	malloced in the fwd->region. (then it is freed when the fwd is
 *	deleted).
d172 1
a172 2
 * recalcs the tree parents. Does not actually release any memory, the region 
 * is unchanged.
d178 20
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@d48 1
d54 2
d80 1
a80 3
	 * stub-zone with the same name exists, and should be used. 
	 * This delegation point is malloced.
	 */
d155 3
a157 1
 *	forward zone. malloced.
d165 2
a166 1
 * recalcs the tree parents.
a171 20

/**
 * Add stub hole (empty entry in forward table, that makes resolution skip
 * a forward-zone because the stub zone should override the forward zone).
 * Does not add one if not necessary.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param nm: name of zone (in uncompressed wireformat).
 * @@return false on failure (out of memory);
 */
int forwards_add_stub_hole(struct iter_forwards* fwd, uint16_t c, uint8_t* nm);

/**
 * Remove stub hole, if one exists.
 * @@param fwd: the forward data structure
 * @@param c: class of zone
 * @@param nm: name of zone (in uncompressed wireformat).
 */
void forwards_delete_stub_hole(struct iter_forwards* fwd, uint16_t c,
	uint8_t* nm);
@


1.1.1.3
log
@update to Unbound 1.4.21, ok brad@@
@
text
@a107 10
 * Find forward zone exactly by name
 * @@param fwd: forward storage.
 * @@param qname: The qname of the query.
 * @@param qclass: The qclass of the query.
 * @@return: A delegation point or null.
 */
struct delegpt* forwards_find(struct iter_forwards* fwd, uint8_t* qname,
	uint16_t qclass);

/**
@


1.1.1.4
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


