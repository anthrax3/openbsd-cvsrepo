head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	UNBOUND_1_5_4:1.1.1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	UNBOUND_1_5_2RC1:1.1.1.5
	UNBOUND_1_5_1:1.1.1.4
	UNBOUND_1_5_0:1.1.1.4
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	UNBOUND_1_4_22:1.1.1.3
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	UNBOUND_1_4_21:1.1.1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	UNBOUND_1_4_18:1.1.1.2
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2017.02.17.18.53.32;	author sthen;	state Exp;
branches;
next	1.8;
commitid	R6rMbeA8TNhmzWB4;

1.8
date	2016.06.22.20.05.40;	author sthen;	state Exp;
branches;
next	1.7;
commitid	EnU0HAX1qep1MppE;

1.7
date	2016.03.05.14.40.35;	author sthen;	state Exp;
branches;
next	1.6;
commitid	ueBpCw2SxWSX3ZZI;

1.6
date	2015.07.16.01.44.00;	author sthen;	state Exp;
branches;
next	1.5;
commitid	kSPbvR6QMA7Gz7zd;

1.5
date	2015.02.17.10.03.59;	author sthen;	state Exp;
branches;
next	1.4;
commitid	aE1YbLLSIcViF5Lw;

1.4
date	2014.11.20.00.11.14;	author brad;	state Exp;
branches;
next	1.3;
commitid	8oTbeW6BGSPxqQCQ;

1.3
date	2014.03.16.11.43.29;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.16.08.57.21;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.26.18.05.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.43;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.31;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.16.11.38.25;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.20.00.00.32;	author brad;	state Exp;
branches;
next	1.1.1.5;
commitid	bB36RwIVwTq8fGsI;

1.1.1.5
date	2015.02.17.10.01.53;	author sthen;	state Exp;
branches;
next	1.1.1.6;
commitid	HIel2ZueDMYXVbaV;

1.1.1.6
date	2015.07.16.01.42.20;	author sthen;	state Exp;
branches;
next	;
commitid	kEVXcRu8XDMmCd6c;


desc
@@


1.9
log
@Update to unbound-1.6.1rc3 - thanks millert@@ and Brad for tests.
@
text
@/*
 * services/listen_dnsport.h - listen on port 53 for incoming DNS queries.
 *
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file has functions to get queries from clients.
 */

#ifndef LISTEN_DNSPORT_H
#define LISTEN_DNSPORT_H

#include "util/netevent.h"
struct listen_list;
struct config_file;
struct addrinfo;
struct sldns_buffer;

/**
 * Listening for queries structure.
 * Contains list of query-listen sockets.
 */
struct listen_dnsport {
	/** Base for select calls */
	struct comm_base* base;

	/** buffer shared by UDP connections, since there is only one
	    datagram at any time. */
	struct sldns_buffer* udp_buff;

	/** list of comm points used to get incoming events */
	struct listen_list* cps;
};

/**
 * Single linked list to store event points.
 */
struct listen_list {
	/** next in list */
	struct listen_list* next;
	/** event info */
	struct comm_point* com;
};

/**
 * type of ports
 */
enum listen_type {
	/** udp type */
	listen_type_udp,
	/** tcp type */
	listen_type_tcp,
	/** udp ipv6 (v4mapped) for use with ancillary data */
	listen_type_udpancil,
	/** ssl over tcp type */
	listen_type_ssl
};

/**
 * Single linked list to store shared ports that have been 
 * opened for use by all threads.
 */
struct listen_port {
	/** next in list */
	struct listen_port* next;
	/** file descriptor, open and ready for use */
	int fd;
	/** type of file descriptor, udp or tcp */
	enum listen_type ftype;
};

/**
 * Create shared listening ports
 * Getaddrinfo, create socket, bind and listen to zero or more 
 * interfaces for IP4 and/or IP6, for UDP and/or TCP.
 * On the given port number. It creates the sockets.
 * @@param cfg: settings on what ports to open.
 * @@param reuseport: set to true if you want reuseport, or NULL to not have it,
 *   set to false on exit if reuseport failed to apply (because of no
 *   kernel support).
 * @@return: linked list of ports or NULL on error.
 */
struct listen_port* listening_ports_open(struct config_file* cfg,
	int* reuseport);

/**
 * Close and delete the (list of) listening ports.
 */
void listening_ports_free(struct listen_port* list);

/**
 * Create commpoints with for this thread for the shared ports.
 * @@param base: the comm_base that provides event functionality.
 *	for default all ifs.
 * @@param ports: the list of shared ports.
 * @@param bufsize: size of datagram buffer.
 * @@param tcp_accept_count: max number of simultaneous TCP connections 
 * 	from clients.
 * @@param sslctx: nonNULL if ssl context.
 * @@param dtenv: nonNULL if dnstap enabled.
 * @@param cb: callback function when a request arrives. It is passed
 *	  the packet and user argument. Return true to send a reply.
 * @@param cb_arg: user data argument for callback function.
 * @@return: the malloced listening structure, ready for use. NULL on error.
 */
struct listen_dnsport* listen_create(struct comm_base* base,
	struct listen_port* ports, size_t bufsize, int tcp_accept_count,
	void* sslctx, struct dt_env *dtenv, comm_point_callback_type* cb,
	void* cb_arg);

/**
 * delete the listening structure
 * @@param listen: listening structure.
 */
void listen_delete(struct listen_dnsport* listen);

/**
 * delete listen_list of commpoints. Calls commpointdelete() on items.
 * This may close the fds or not depending on flags.
 * @@param list: to delete.
 */
void listen_list_delete(struct listen_list* list);

/**
 * get memory size used by the listening structs
 * @@param listen: listening structure.
 * @@return: size in bytes.
 */
size_t listen_get_mem(struct listen_dnsport* listen);

/**
 * stop accept handlers for TCP (until enabled again)
 * @@param listen: listening structure.
 */
void listen_stop_accept(struct listen_dnsport* listen);

/**
 * start accept handlers for TCP (was stopped before)
 * @@param listen: listening structure.
 */
void listen_start_accept(struct listen_dnsport* listen);

/**
 * Create and bind nonblocking UDP socket
 * @@param family: for socket call.
 * @@param socktype: for socket call.
 * @@param addr: for bind call.
 * @@param addrlen: for bind call.
 * @@param v6only: if enabled, IP6 sockets get IP6ONLY option set.
 * 	if enabled with value 2 IP6ONLY option is disabled.
 * @@param inuse: on error, this is set true if the port was in use.
 * @@param noproto: on error, this is set true if cause is that the
	IPv6 proto (family) is not available.
 * @@param rcv: set size on rcvbuf with socket option, if 0 it is not set.
 * @@param snd: set size on sndbuf with socket option, if 0 it is not set.
 * @@param listen: if true, this is a listening UDP port, eg port 53, and 
 * 	set SO_REUSEADDR on it.
 * @@param reuseport: if nonNULL and true, try to set SO_REUSEPORT on
 * 	listening UDP port.  Set to false on return if it failed to do so.
 * @@param transparent: set IP_TRANSPARENT socket option.
 * @@param freebind: set IP_FREEBIND socket option.
 * @@param use_systemd: if true, fetch sockets from systemd.
 * @@return: the socket. -1 on error.
 */
int create_udp_sock(int family, int socktype, struct sockaddr* addr, 
	socklen_t addrlen, int v6only, int* inuse, int* noproto, int rcv,
	int snd, int listen, int* reuseport, int transparent, int freebind, int use_systemd);

/**
 * Create and bind TCP listening socket
 * @@param addr: address info ready to make socket.
 * @@param v6only: enable ip6 only flag on ip6 sockets.
 * @@param noproto: if error caused by lack of protocol support.
 * @@param reuseport: if nonNULL and true, try to set SO_REUSEPORT on
 * 	listening UDP port.  Set to false on return if it failed to do so.
 * @@param transparent: set IP_TRANSPARENT socket option.
 * @@param mss: maximum segment size of the socket. if zero, leaves the default. 
 * @@param freebind: set IP_FREEBIND socket option.
 * @@param use_systemd: if true, fetch sockets from systemd.
 * @@return: the socket. -1 on error.
 */
int create_tcp_accept_sock(struct addrinfo *addr, int v6only, int* noproto,
	int* reuseport, int transparent, int mss, int freebind, int use_systemd);

/**
 * Create and bind local listening socket
 * @@param path: path to the socket.
 * @@param noproto: on error, this is set true if cause is that local sockets
 *	are not supported.
 * @@param use_systemd: if true, fetch sockets from systemd.
 * @@return: the socket. -1 on error.
 */
int create_local_accept_sock(const char* path, int* noproto, int use_systemd);

#endif /* LISTEN_DNSPORT_H */
@


1.8
log
@update to unbound-1.5.9. (there will be a follow-up commit to cherrypick a
couple of post-1.5.9 patches).

tests from Mark Patruck, danj, matthieu, millert. reads ok to jung, ok florian.
@
text
@d140 1
a140 1
	void* sslctx, struct dt_env *dtenv, comm_point_callback_t* cb,
d194 1
d199 1
a199 1
	int snd, int listen, int* reuseport, int transparent, int freebind);
d211 1
d215 1
a215 1
	int* reuseport, int transparent, int mss, int freebind);
d222 1
d225 1
a225 1
int create_local_accept_sock(const char* path, int* noproto);
@


1.7
log
@update to unbound 1.5.8, ok florian@@ jung@@
@
text
@d193 1
d198 1
a198 1
	int snd, int listen, int* reuseport, int transparent);
d209 1
d213 1
a213 1
	int* reuseport, int transparent, int mss);
@


1.6
log
@merge
@
text
@d207 1
d211 1
a211 1
	int* reuseport, int transparent);
@


1.5
log
@merge conflicts
@
text
@d192 1
d197 1
a197 1
	int snd, int listen, int* reuseport);
d206 1
d210 1
a210 1
	int* reuseport);
@


1.4
log
@merge conflicts
@
text
@d210 9
@


1.3
log
@merge conflicts, remove old libldns files
@
text
@d132 1
d140 2
a141 1
	void* sslctx, comm_point_callback_t* cb, void* cb_arg);
@


1.2
log
@Don't spin accept() when hitting ENFILE/EMFILE. Upstream r2663.
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d49 1
d61 1
a61 1
	ldns_buffer* udp_buff;
d110 3
d115 2
a116 1
struct listen_port* listening_ports_open(struct config_file* cfg);
d186 4
d194 1
a194 1
	int snd);
d201 2
d205 2
a206 1
int create_tcp_accept_sock(struct addrinfo *addr, int v6only, int* noproto);
@


1.1
log
@Initial revision
@
text
@d157 12
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@a156 12
 * stop accept handlers for TCP (until enabled again)
 * @@param listen: listening structure.
 */
void listen_stop_accept(struct listen_dnsport* listen);

/**
 * start accept handlers for TCP (was stopped before)
 * @@param listen: listening structure.
 */
void listen_start_accept(struct listen_dnsport* listen);

/**
@


1.1.1.3
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a48 1
struct sldns_buffer;
d60 1
a60 1
	struct sldns_buffer* udp_buff;
a108 3
 * @@param reuseport: set to true if you want reuseport, or NULL to not have it,
 *   set to false on exit if reuseport failed to apply (because of no
 *   kernel support).
d111 1
a111 2
struct listen_port* listening_ports_open(struct config_file* cfg,
	int* reuseport);
a180 4
 * @@param listen: if true, this is a listening UDP port, eg port 53, and 
 * 	set SO_REUSEADDR on it.
 * @@param reuseport: if nonNULL and true, try to set SO_REUSEPORT on
 * 	listening UDP port.  Set to false on return if it failed to do so.
d185 1
a185 1
	int snd, int listen, int* reuseport);
a191 2
 * @@param reuseport: if nonNULL and true, try to set SO_REUSEPORT on
 * 	listening UDP port.  Set to false on return if it failed to do so.
d194 1
a194 2
int create_tcp_accept_sock(struct addrinfo *addr, int v6only, int* noproto,
	int* reuseport);
@


1.1.1.4
log
@update to Unbound 1.5.0, ok sthen@@
@
text
@a131 1
 * @@param dtenv: nonNULL if dnstap enabled.
d139 1
a139 2
	void* sslctx, struct dt_env *dtenv, comm_point_callback_t* cb,
	void* cb_arg);
@


1.1.1.5
log
@Update to unbound 1.5.2rc1, ok brad@@
@
text
@a209 9
/**
 * Create and bind local listening socket
 * @@param path: path to the socket.
 * @@param noproto: on error, this is set true if cause is that local sockets
 *	are not supported.
 * @@return: the socket. -1 on error.
 */
int create_local_accept_sock(const char* path, int* noproto);

@


1.1.1.6
log
@update to Unbound 1.5.4, ok florian@@, looks sane deraadt@@
@
text
@a191 1
 * @@param transparent: set IP_TRANSPARENT socket option.
d196 1
a196 1
	int snd, int listen, int* reuseport, int transparent);
a204 1
 * @@param transparent: set IP_TRANSPARENT socket option.
d208 1
a208 1
	int* reuseport, int transparent);
@


