head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	UNBOUND_1_5_4:1.1.1.6
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	UNBOUND_1_5_2RC1:1.1.1.6
	UNBOUND_1_5_1:1.1.1.6
	UNBOUND_1_5_0:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	UNBOUND_1_4_22:1.1.1.4
	OPENBSD_5_5:1.1.1.3.0.4
	OPENBSD_5_5_BASE:1.1.1.3
	UNBOUND_1_4_21:1.1.1.3
	OPENBSD_5_4:1.1.1.2.0.4
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.2
	OPENBSD_5_3_BASE:1.1.1.2
	UNBOUND_1_4_18:1.1.1.2
	UNBOUND_1_4_17:1.1.1.2
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	UNBOUND_1_4_16:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.08.12.11.22.46;	author sthen;	state Exp;
branches;
next	1.3;
commitid	jku4foGr2J38bu5W;

1.3
date	2017.02.17.18.53.32;	author sthen;	state Exp;
branches;
next	1.2;
commitid	R6rMbeA8TNhmzWB4;

1.2
date	2014.11.20.01.15.19;	author brad;	state Exp;
branches;
next	1.1;
commitid	5B1rQYSaYoW2Vhmb;

1.1
date	2012.03.26.18.05.44;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.26.18.05.44;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.08.23.22.36.32;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.09.22.11.31.14;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.16.11.38.26;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.20.00.00.33;	author brad;	state Exp;
branches;
next	1.1.1.6;
commitid	bB36RwIVwTq8fGsI;

1.1.1.6
date	2014.12.11.16.18.10;	author brad;	state Exp;
branches;
next	;
commitid	fGLTsCVGImGBxGUi;


desc
@@


1.4
log
@update to unbound 1.6.4, ok florian@@
@
text
@/*
 * services/cache/dns.h - Cache services for DNS using msg and rrset caches.
 *
 * Copyright (c) 2007, NLnet Labs. All rights reserved.
 *
 * This software is open source.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the NLNET LABS nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \file
 *
 * This file contains the DNS cache.
 */

#ifndef SERVICES_CACHE_DNS_H
#define SERVICES_CACHE_DNS_H
#include "util/storage/lruhash.h"
#include "util/data/msgreply.h"
struct module_env;
struct query_info;
struct reply_info;
struct regional;
struct delegpt;

/**
 * Region allocated message reply
 */
struct dns_msg {
	/** query info */
	struct query_info qinfo;
	/** reply info - ptr to packed repinfo structure */
	struct reply_info *rep;
};

/**
 * Allocate a dns_msg with malloc/alloc structure and store in dns cache.
 *
 * @@param env: environment, with alloc structure and dns cache.
 * @@param qinf: query info, the query for which answer is stored.
 * 	this is allocated in a region, and will be copied to malloc area
 * 	before insertion.
 * @@param rep: reply in dns_msg from dns_alloc_msg for example.
 * 	this is allocated in a region, and will be copied to malloc area
 * 	before insertion.
 * @@param is_referral: If true, then the given message to be stored is a
 *      referral. The cache implementation may use this as a hint.
 *      It will store only the RRsets, not the message.
 * @@param leeway: TTL value, if not 0, other rrsets are considered expired
 *	that many seconds before actual TTL expiry.
 * @@param pside: if true, information came from a server which was fetched
 * 	from the parentside of the zonecut.  This means that the type NS
 * 	can be updated to full TTL even in prefetch situations.
 * @@param region: region to allocate better entries from cache into.
 *   (used when is_referral is false).
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
 * @@return 0 on alloc error (out of memory).
 */
int dns_cache_store(struct module_env* env, struct query_info* qinf,
        struct reply_info* rep, int is_referral, time_t leeway, int pside,
	struct regional* region, uint16_t flags); 

/**
 * Store message in the cache. Stores in message cache and rrset cache.
 * Both qinfo and rep should be malloced and are put in the cache.
 * They should not be used after this call, as they are then in shared cache.
 * Does not return errors, they are logged and only lead to less cache.
 *
 * @@param env: module environment with the DNS cache.
 * @@param qinfo: query info
 * @@param hash: hash over qinfo.
 * @@param rep: reply info, together with qinfo makes up the message.
 *	Adjusts the reply info TTLs to absolute time.
 * @@param leeway: TTL value, if not 0, other rrsets are considered expired
 *	that many seconds before actual TTL expiry.
 * @@param pside: if true, information came from a server which was fetched
 * 	from the parentside of the zonecut.  This means that the type NS
 * 	can be updated to full TTL even in prefetch situations.
 * @@param qrep: message that can be altered with better rrs from cache.
 * @@param region: to allocate into for qmsg.
 */
void dns_cache_store_msg(struct module_env* env, struct query_info* qinfo,
	hashvalue_type hash, struct reply_info* rep, time_t leeway, int pside,
	struct reply_info* qrep, struct regional* region);

/**
 * Find a delegation from the cache.
 * @@param env: module environment with the DNS cache.
 * @@param qname: query name.
 * @@param qnamelen: length of qname.
 * @@param qtype: query type.
 * @@param qclass: query class.
 * @@param region: where to allocate result delegation.
 * @@param msg: if not NULL, delegation message is returned here, synthesized
 *	from the cache.
 * @@param timenow: the time now, for checking if TTL on cache entries is OK.
 * @@return new delegation or NULL on error or if not found in cache.
 */
struct delegpt* dns_cache_find_delegation(struct module_env* env, 
	uint8_t* qname, size_t qnamelen, uint16_t qtype, uint16_t qclass, 
	struct regional* region, struct dns_msg** msg, time_t timenow);

/**
 * generate dns_msg from cached message
 * @@param env: module environment with the DNS cache. NULL if the LRU from cache
 * 	does not need to be touched.
 * @@param q: query info, contains qname that will make up the dns message.
 * @@param r: reply info that, together with qname, will make up the dns message.
 * @@param region: where to allocate dns message.
 * @@param now: the time now, for check if TTL on cache entry is ok.
 * @@param scratch: where to allocate temporary data.
 * */
struct dns_msg* tomsg(struct module_env* env, struct query_info* q,
	struct reply_info* r, struct regional* region, time_t now,
	struct regional* scratch);

/** 
 * Find cached message 
 * @@param env: module environment with the DNS cache.
 * @@param qname: query name.
 * @@param qnamelen: length of qname.
 * @@param qtype: query type.
 * @@param qclass: query class.
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
 * @@param region: where to allocate result.
 * @@param scratch: where to allocate temporary data.
 * @@return new response message (alloced in region, rrsets do not have IDs).
 * 	or NULL on error or if not found in cache.
 *	TTLs are made relative to the current time.
 */
struct dns_msg* dns_cache_lookup(struct module_env* env,
	uint8_t* qname, size_t qnamelen, uint16_t qtype, uint16_t qclass,
	uint16_t flags, struct regional* region, struct regional* scratch);

/** 
 * find and add A and AAAA records for missing nameservers in delegpt 
 * @@param env: module environment with rrset cache
 * @@param qclass: which class to look in.
 * @@param region: where to store new dp info.
 * @@param dp: delegation point to fill missing entries.
 * @@return false on alloc failure.
 */
int cache_fill_missing(struct module_env* env, uint16_t qclass, 
	struct regional* region, struct delegpt* dp);

/**
 * Utility, create new, unpacked data structure for cache response.
 * QR bit set, no AA. Query set as indicated. Space for number of rrsets.
 * @@param qname: query section name
 * @@param qnamelen: len of qname
 * @@param qtype: query section type
 * @@param qclass: query section class
 * @@param region: where to alloc.
 * @@param capacity: number of rrsets space to create in the array.
 * @@return new dns_msg struct or NULL on mem fail.
 */
struct dns_msg* dns_msg_create(uint8_t* qname, size_t qnamelen, uint16_t qtype, 
	uint16_t qclass, struct regional* region, size_t capacity);

/**
 * Add rrset to authority section in unpacked dns_msg message. Must have enough
 * space left, does not grow the array.
 * @@param msg: msg to put it in.
 * @@param region: region to alloc in
 * @@param rrset: to add in authority section
 * @@param now: now.
 * @@return true if worked, false on fail
 */
int dns_msg_authadd(struct dns_msg* msg, struct regional* region, 
	struct ub_packed_rrset_key* rrset, time_t now);

/**
 * Adjust the prefetch_ttl for a cached message.  This adds a value to the
 * prefetch ttl - postponing the time when it will be prefetched for future
 * incoming queries.
 * @@param env: module environment with caches and time.
 * @@param qinfo: query info for the query that needs adjustment.
 * @@param adjust: time in seconds to add to the prefetch_leeway.
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
 * @@return false if not in cache. true if added.
 */
int dns_cache_prefetch_adjust(struct module_env* env, struct query_info* qinfo,
        time_t adjust, uint16_t flags);

/** lookup message in message cache
 * the returned nonNULL entry is locked and has to be unlocked by the caller */
struct msgreply_entry* msg_cache_lookup(struct module_env* env,
	uint8_t* qname, size_t qnamelen, uint16_t qtype, uint16_t qclass,
	uint16_t flags, time_t now, int wr);

#endif /* SERVICES_CACHE_DNS_H */
@


1.3
log
@Update to unbound-1.6.1rc3 - thanks millert@@ and Brad for tests.
@
text
@d129 14
d210 6
@


1.2
log
@Merge in some commits from upstream..

- Removed 'increased limit open files' log message that is written
  to console.  It is only written on verbosity 4 and higher.
  This keeps system bootup console cleaner.
- Fix #627: SSL_CTX_load_verify_locations return code not properly
  checked.
- Fix that CD flag disables DNS64 processing, returning the DNSSEC
  signed AAAA denial.
- Fix cdflag dns64 processing.

ok sthen@@
@
text
@d109 1
a109 1
	hashvalue_t hash, struct reply_info* rep, time_t leeway, int pside,
@


1.1
log
@Initial revision
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d77 3
d82 1
d86 2
a87 2
        struct reply_info* rep, int is_referral, uint32_t leeway,
	struct regional* region); 
d102 3
d109 1
a109 1
	hashvalue_t hash, struct reply_info* rep, uint32_t leeway,
d127 1
a127 1
	struct regional* region, struct dns_msg** msg, uint32_t timenow);
d136 1
d145 1
a145 1
	struct regional* region, struct regional* scratch);
d182 14
a195 1
	struct ub_packed_rrset_key* rrset, uint32_t now);
@


1.1.1.1
log
@Import Unbound 1.4.16 to work on in-tree (not yet linked to the build).

These are the direct sources from NLnet Labs upstream, minus these:
compat contrib libunbound/python pythonmod testcode testdata winrc

ok deraadt@@ jakob@@
@
text
@@


1.1.1.2
log
@update to unbound 1.4.17, testing by okan@@ (not yet linked to build;
1.4.18 to follow later).
@
text
@a76 3
 * @@param pside: if true, information came from a server which was fetched
 * 	from the parentside of the zonecut.  This means that the type NS
 * 	can be updated to full TTL even in prefetch situations.
d82 1
a82 1
        struct reply_info* rep, int is_referral, uint32_t leeway, int pside,
a97 3
 * @@param pside: if true, information came from a server which was fetched
 * 	from the parentside of the zonecut.  This means that the type NS
 * 	can be updated to full TTL even in prefetch situations.
d102 1
a102 1
	hashvalue_t hash, struct reply_info* rep, uint32_t leeway, int pside,
@


1.1.1.3
log
@update to Unbound 1.4.21, ok brad@@
@
text
@d85 1
a85 1
        struct reply_info* rep, int is_referral, time_t leeway, int pside,
d108 1
a108 1
	hashvalue_t hash, struct reply_info* rep, time_t leeway, int pside,
d126 1
a126 1
	struct regional* region, struct dns_msg** msg, time_t timenow);
d180 1
a180 1
	struct ub_packed_rrset_key* rrset, time_t now);
@


1.1.1.4
log
@import unbound 1.4.22 upstream sources, ok brad@@
@
text
@d24 10
a33 10
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.1.1.5
log
@update to Unbound 1.5.0, ok sthen@@
@
text
@a181 12
/**
 * Adjust the prefetch_ttl for a cached message.  This adds a value to the
 * prefetch ttl - postponing the time when it will be prefetched for future
 * incoming queries.
 * @@param env: module environment with caches and time.
 * @@param qinfo: query info for the query that needs adjustment.
 * @@param adjust: time in seconds to add to the prefetch_leeway.
 * @@return false if not in cache. true if added.
 */
int dns_cache_prefetch_adjust(struct module_env* env, struct query_info* qinfo,
        time_t adjust);

@


1.1.1.6
log
@update to Unbound 1.5.1, ok sthen@@
@
text
@a81 1
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
d86 1
a86 1
	struct regional* region, uint16_t flags); 
a134 1
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
d143 1
a143 1
	uint16_t flags, struct regional* region, struct regional* scratch);
a188 1
 * @@param flags: flags with BIT_CD for AAAA queries in dns64 translation.
d192 1
a192 1
        time_t adjust, uint16_t flags);
@


