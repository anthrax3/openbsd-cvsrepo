head	1.7;
access;
symbols
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.07.07.21.37.07;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2003.02.15.12.15.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.15.11.53.45;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.19.19.16.12;	author ericj;	state Exp;
branches;
next	1.2;

1.2
date	96.09.23.06.43.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.06;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bye bye piece of crud
@
text
@/*	$OpenBSD: pcnfsd_v2.c,v 1.6 2003/02/15 12:15:04 deraadt Exp $	*/
/*	$NetBSD: pcnfsd_v2.c,v 1.4 1995/08/14 19:50:10 gwr Exp $	*/

/*
**=====================================================================
** Copyright (c) 1986,1987,1988,1989,1990,1991 by Sun Microsystems, Inc.
**	@@(#)pcnfsd_v2.c	1.2	12/18/91
**
** pcnfsd is copyrighted software, but is freely licensed. This
** means that you are free to redistribute it, modify it, ship it
** in binary with your system, whatever, provided:
**
** - you leave the Sun copyright notice in the source code
** - you make clear what changes you have introduced and do
**   not represent them as being supported by Sun.
**
** If you make changes to this software, we ask that you do so in
** a way which allows you to build either the "standard" version or
** your custom version from a single source file. Test it, lint
** it (it won't lint 100%, very little does, and there are bugs in
** some versions of lint :-), and send it back to Sun via email
** so that we can roll it into the source base and redistribute
** it. We'll try to make sure your contributions are acknowledged
** in the source, but after all these years it's getting hard to
** remember who did what.
**=====================================================================
*/
#include <stdio.h>
#include <pwd.h>
#include <grp.h>
#include <sys/file.h>
#include <signal.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <netdb.h>
#include <string.h>
#include <unistd.h>

#include "pcnfsd.h"
#include "paths.h"

static void fillin_extra_groups(char *, u_int, int *, u_int *);

static char no_comment[] = "No comment";
static char not_supported[] = "Not supported";
static char pcnfsd_version[] = "@@(#)pcnfsd_v2.c	1.2 - rpc.pcnfsd V2.0 (c) 1991 Sun Technology Enterprises, Inc.";

/*ARGSUSED*/
void *
pcnfsd2_null_2_svc(arg, req)
	void*arg;
	struct svc_req *req;
{
	static char dummy;

	return ((void *)&dummy);
}

v2_auth_results *
pcnfsd2_auth_2_svc(arg, req)
	v2_auth_args *arg;
	struct svc_req *req;
{
	static v2_auth_results  r;

	char uname[32], pw[64];
	int c1, c2;
	struct passwd *p;
	static u_int extra_gids[EXTRAGIDLEN];
	static char home[MAXPATHLEN];

	r.stat = AUTH_RES_FAIL;	/* assume failure */
	r.uid = (int)-2;
	r.gid = (int)-2;
	r.cm = &no_comment[0];
	r.gids.gids_len = 0;
	r.gids.gids_val = &extra_gids[0];
	home[0] = '\0';
	r.home = &home[0];
	r.def_umask = umask(0);
	(void)umask(r.def_umask);	/* or use 022 */

	scramble(arg->id, uname);
	scramble(arg->pw, pw);

	if (check_cache(uname, pw, &r.uid, &r.gid)) {
		r.stat = AUTH_RES_OK;
		wlogin(uname, req);
		fillin_extra_groups(uname, r.gid, &r.gids.gids_len, extra_gids);
		return (&r);
	}

	if ((p = get_password(uname)) == NULL)
		return (&r);

	c1 = strlen(pw);
	c2 = strlen(p->pw_passwd);
	if ((c1 && !c2) || (c2 && !c1) ||
	   (strcmp(p->pw_passwd, crypt(pw, p->pw_passwd)))) {
		return (&r);
	}

	r.stat = AUTH_RES_OK;
	r.uid = p->pw_uid;
	r.gid = p->pw_gid;
	wlogin(uname, req);
        fillin_extra_groups(uname, r.gid, &r.gids.gids_len, extra_gids);

	add_cache_entry(p);

	return (&r);
}

v2_pr_init_results *
pcnfsd2_pr_init_2_svc(arg, req)
	v2_pr_init_args *arg;
	struct svc_req *req;
{
	static v2_pr_init_results res;

	res.stat = (pirstat)pr_init(arg->system, arg->pn, &res.dir);
	res.cm = &no_comment[0];

	return (&res);
}

v2_pr_start_results *
pcnfsd2_pr_start_2_svc(arg, req)
	v2_pr_start_args *arg;
	struct svc_req *req;
{
	static v2_pr_start_results res;

	res.stat = (psrstat)pr_start2(arg->system, arg->pn, arg->user,
			    arg->file, arg->opts, &res.id);
	res.cm = &no_comment[0];

	return (&res);
}

/*ARGSUSED*/
v2_pr_list_results *
pcnfsd2_pr_list_2_svc(arg, req)
	void *arg;
	struct svc_req *req;
{
	static v2_pr_list_results res;

	if (printers == NULL)
		(void)build_pr_list();
	res.cm = &no_comment[0];
	res.printers = printers;

	return (&res);
}

v2_pr_queue_results *
pcnfsd2_pr_queue_2_svc(arg, req)
	v2_pr_queue_args *arg;
	struct svc_req *req;
{
	static v2_pr_queue_results res;

	res.stat = build_pr_queue(arg->pn, arg->user, arg->just_mine,
		   &res.qlen, &res.qshown);
	res.cm = &no_comment[0];
	res.just_yours = arg->just_mine;
	res.jobs = queue;

	return (&res);
}

v2_pr_status_results *
pcnfsd2_pr_status_2_svc(arg, req)
	v2_pr_status_args *arg;
	struct svc_req *req;
{
	static v2_pr_status_results res;
	static char status[128];

	res.stat = get_pr_status(arg->pn, &res.avail, &res.printing,
		   &res.qlen, &res.needs_operator, &status[0]);
	res.status = &status[0];	
	res.cm = &no_comment[0];

	return (&res);
}

v2_pr_cancel_results *
pcnfsd2_pr_cancel_2_svc(arg, req)
	v2_pr_cancel_args *arg;
	struct svc_req *req;
{
	static v2_pr_cancel_results res;

	res.stat = pr_cancel(arg->pn, arg->user, arg->id);
	res.cm = &no_comment[0];

	return (&res);
}

/*ARGSUSED*/
v2_pr_requeue_results *
pcnfsd2_pr_requeue_2_svc(arg, req)
	v2_pr_requeue_args *arg;
	struct svc_req *req;
{
	static v2_pr_requeue_results res;

	res.stat = PC_RES_FAIL;
	res.cm = &not_supported[0];

	return (&res);
}

/*ARGSUSED*/
v2_pr_hold_results *
pcnfsd2_pr_hold_2_svc(arg, req)
	v2_pr_hold_args *arg;
	struct svc_req *req;
{
	static v2_pr_hold_results res;

	res.stat = PC_RES_FAIL;
	res.cm = &not_supported[0];

	return (&res);
}

/*ARGSUSED*/
v2_pr_release_results *
pcnfsd2_pr_release_2_svc(arg, req)
	v2_pr_release_args *arg;
	struct svc_req *req;
{
	static v2_pr_release_results res;

	res.stat = PC_RES_FAIL;
	res.cm = &not_supported[0];

	return (&res);
}

/*ARGSUSED*/
v2_pr_admin_results *
pcnfsd2_pr_admin_2_svc(arg, req)
	v2_pr_admin_args *arg;
	struct svc_req *req;
{
	static v2_pr_admin_results res;

	res.cm = &not_supported[0];
	res.stat = PI_RES_FAIL;

	return (&res);
}

void
free_mapreq_results(p)
mapreq_res p;
{
	if (p->mapreq_next)
		free_mapreq_results(p->mapreq_next); /* recurse */
	if (p->name)
		(void)free(p->name);
	(void)free(p);
	return;
}

v2_mapid_results *pcnfsd2_mapid_2_svc(arg, req)
v2_mapid_args *arg;
struct svc_req *req;
{
static v2_mapid_results res;
struct passwd *p_passwd;
struct group  *p_group;

mapreq_arg a;
mapreq_res next_r;
mapreq_res last_r = NULL;


	if (res.res_list) {
		free_mapreq_results(res.res_list);
		res.res_list = NULL;
	}

	a = arg->req_list;
	while (a) {
		next_r = (struct mapreq_res_item *)
			grab(sizeof(struct mapreq_res_item));
		next_r->stat = MAP_RES_UNKNOWN;
		next_r->req = a->req;
		next_r->id = a->id;
		next_r->name = NULL;
		next_r->mapreq_next = NULL;

		if (last_r == NULL)
			res.res_list = next_r;
		else
			last_r->mapreq_next = next_r;
		last_r = next_r;
		switch(a->req) {
		case MAP_REQ_UID:
			p_passwd = getpwuid((uid_t)a->id);
			if (p_passwd) {
				next_r->name = strdup(p_passwd->pw_name);
				next_r->stat = MAP_RES_OK;
			}
			break;
		case MAP_REQ_GID:
			p_group = getgrgid((gid_t)a->id);
			if (p_group) {
				next_r->name = strdup(p_group->gr_name);
				next_r->stat = MAP_RES_OK;
			}
			break;
		case MAP_REQ_UNAME:
			next_r->name = strdup(a->name);
			p_passwd = getpwnam(a->name);
			if (p_passwd) {
				next_r->id = p_passwd->pw_uid;
				next_r->stat = MAP_RES_OK;
			}
			break;
		case MAP_REQ_GNAME:
			next_r->name = strdup(a->name);
			p_group = getgrnam(a->name);
			if (p_group) {
				next_r->id = p_group->gr_gid;
				next_r->stat = MAP_RES_OK;
			}
			break;
		}
		if (next_r->name == NULL)
			next_r->name = strdup("");
		a = a->mapreq_next;
	}

	res.cm = &no_comment[0];

	return (&res);
}

	
/*ARGSUSED*/
v2_alert_results *pcnfsd2_alert_2_svc(arg, req)
v2_alert_args *arg;
struct svc_req *req;
{
static v2_alert_results res;

	res.stat = ALERT_RES_FAIL;
	res.cm = &not_supported[0];

	return (&res);
}

/*ARGSUSED*/
v2_info_results *pcnfsd2_info_2_svc(arg, req)
v2_info_args *arg;
struct svc_req *req;
{
static v2_info_results res;
static int facilities[FACILITIESMAX];
static int onetime = 1;

#define UNSUPPORTED -1
#define QUICK 100
#define SLOW 2000

	if (onetime) {
		onetime = 0;
		facilities[PCNFSD2_NULL] = QUICK;
		facilities[PCNFSD2_INFO] = QUICK;
		facilities[PCNFSD2_PR_INIT] = QUICK;
		facilities[PCNFSD2_PR_START] = SLOW;
		facilities[PCNFSD2_PR_LIST] = QUICK; /* except first time */
		facilities[PCNFSD2_PR_QUEUE] = SLOW;
		facilities[PCNFSD2_PR_STATUS] = SLOW;
		facilities[PCNFSD2_PR_CANCEL] = SLOW;
		facilities[PCNFSD2_PR_ADMIN] = UNSUPPORTED;
		facilities[PCNFSD2_PR_REQUEUE] = UNSUPPORTED;
		facilities[PCNFSD2_PR_HOLD] = UNSUPPORTED;
		facilities[PCNFSD2_PR_RELEASE] = UNSUPPORTED;
		facilities[PCNFSD2_MAPID] = QUICK;
		facilities[PCNFSD2_AUTH] = QUICK;
		facilities[PCNFSD2_ALERT] = QUICK;
	}
	res.facilities.facilities_len = PCNFSD2_ALERT+1;
	res.facilities.facilities_val = facilities;
	
	res.vers = &pcnfsd_version[0];
	res.cm = &no_comment[0];

	return (&res);
}



static void
fillin_extra_groups(uname, main_gid, len, extra_gids)
char *uname;
u_int main_gid;
int *len;
u_int extra_gids[EXTRAGIDLEN];
{
struct group *grp;
char **members;
int n = 0;

	setgrent();

	while (n < EXTRAGIDLEN) {
		grp = getgrent();
		if (grp == NULL)
			break;
		if (grp->gr_gid == main_gid)
			continue;
		for (members = grp->gr_mem; members && *members; members++) {
			if (!strcmp(*members, uname)) {
				extra_gids[n++] = grp->gr_gid;
				break;
			}
		}
	}
	endgrent();
	*len = n;
}
@


1.6
log
@oops; i forgot to delete the block he said i could delete
@
text
@d1 1
a1 1
/*	$OpenBSD: pcnfsd_v2.c,v 1.5 2003/02/15 11:53:45 deraadt Exp $	*/
@


1.5
log
@copyright blob from geoff.arnold@@sun.com
@
text
@d1 1
a1 1
/*	$OpenBSD: pcnfsd_v2.c,v 1.4 2002/02/16 21:28:08 millert Exp $	*/
a15 2
** - you do not charge money for the source code (unlikely, given
**   its free availability)
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcnfsd_v2.c,v 1.3 2001/08/19 19:16:12 ericj Exp $	*/
a3 1
/* RE_SID: @@(%)/usr/dosnfs/shades_SCCS/unix/pcnfsd/v2/src/SCCS/s.pcnfsd_v2.c 1.2 91/12/18 13:26:13 SMI */
d8 20
@


1.3
log
@
first pass at some cleanup here
- use standard functions,, dont roll our own (strdup, strcasecmp, etc)
- style(9)
- share common headers.. more readable.
doesnt address some of the other problems (cacheing), yet
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
a25 1
static void fillin_extra_groups __P((char *, u_int, int *, u_int *));
@


1.2
log
@avoid oflows
@
text
@d1 1
a10 12
#include "common.h"
/*
**=====================================================================
**             I N C L U D E   F I L E   S E C T I O N                *
**                                                                    *
** If your port requires different include files, add a suitable      *
** #define in the customization section, and make the inclusion or    *
** exclusion of the files conditional on this.                        *
**=====================================================================
*/
#include "pcnfsd.h"

d20 1
d22 2
a23 57
#ifdef USE_YP
#include <rpcsvc/ypclnt.h>
#endif

#ifndef SYSV
#include <sys/wait.h>
#endif

#ifdef ISC_2_0
#include <sys/fcntl.h>
#endif

#ifdef SHADOW_SUPPORT
#include <shadow.h>
#endif

/*
**---------------------------------------------------------------------
** Other #define's 
**---------------------------------------------------------------------
*/

void            fillin_extra_groups();
extern void     scramble();
extern void    *grab();
extern char    *crypt();
extern int      build_pr_list();
extern pirstat  build_pr_queue();
extern psrstat  pr_start();
extern psrstat  pr_start2();
extern pcrstat  pr_cancel();
extern pirstat  get_pr_status();

extern struct passwd  *get_password();

#ifdef WTMP
extern void wlogin();
#endif

#ifdef USE_YP
char *find_entry();
#endif

/*
**---------------------------------------------------------------------
**                       Misc. variable definitions
**---------------------------------------------------------------------
*/

extern pr_list         printers;
extern pr_queue        queue;

/*
**=====================================================================
**                      C O D E   S E C T I O N                       *
**=====================================================================
*/
d25 1
d32 4
a35 3
void *pcnfsd2_null_2_svc(arg, req)
void*arg;
struct svc_req *req;
d37 3
a39 2
static char dummy;
return((void *)&dummy);
d42 4
a45 3
v2_auth_results *pcnfsd2_auth_2_svc(arg, req)
v2_auth_args *arg;
struct svc_req *req;
d47 1
a47 12
static v2_auth_results  r;

char            uname[32];
char            pw[64];
int             c1, c2;
struct passwd  *p;
static u_int           extra_gids[EXTRAGIDLEN];
static char     home[MAXPATHLEN];
#ifdef USE_YP
char           *yphome;
char           *cp;
#endif /*USE_YP*/
d49 5
d69 2
a70 4
#ifdef USER_CACHE
	if(check_cache(uname, pw, &r.uid, &r.gid)) {
		 r.stat = AUTH_RES_OK;
#ifdef WTMP
d72 6
a77 23
#endif
                 fillin_extra_groups
			(uname, r.gid, &r.gids.gids_len, extra_gids);
#ifdef USE_YP
		yphome = find_entry(uname, "auto.home");
		if(yphome) {
			strncpy(home, yphome, sizeof home-1);
			home[sizeof home-1] = '\0';
			free(yphome);
			cp = strchr(home, ':');
			cp++;
			cp = strchr(cp, ':');
			if(cp)
				*cp = '/';
		}
#endif
		 return (&r);
   }
#endif

	p = get_password(uname);
	if (p == (struct passwd *)NULL)
	   return (&r);
d82 4
a85 4
	   (strcmp(p->pw_passwd, crypt(pw, p->pw_passwd)))) 
           {
	   return (&r);
	   }
a88 1
#ifdef WTMP
a89 1
#endif
a91 15
#ifdef USE_YP
	yphome = find_entry(uname, "auto.home");
	if(yphome) {
		strncpy(home, yphome, sizeof home-1);
		home[sizeof home-1] = '\0';
		free(yphome);
		cp = strchr(home, ':');
		cp++;
		cp = strchr(cp, ':');
		if(cp)
			*cp = '/';
	}
#endif

#ifdef USER_CACHE
a92 3
#endif

return(&r);
d94 1
d97 4
a100 3
v2_pr_init_results *pcnfsd2_pr_init_2_svc(arg, req)
v2_pr_init_args *arg;
struct svc_req *req;
d102 1
a102 1
static v2_pr_init_results res;
d104 1
a104 2
	res.stat = 
	 (pirstat) pr_init(arg->system, arg->pn, &res.dir);
d107 1
a107 2

return(&res);
d110 4
a113 3
v2_pr_start_results *pcnfsd2_pr_start_2_svc(arg, req)
v2_pr_start_args *arg;
struct svc_req *req;
d115 1
a115 1
static v2_pr_start_results res;
d117 2
a118 3
	res.stat =
	  (psrstat) pr_start2(arg->system, arg->pn, arg->user,
	  arg ->file, arg->opts, &res.id);
d121 1
a121 1
return(&res);
d125 4
a128 3
v2_pr_list_results *pcnfsd2_pr_list_2_svc(arg, req)
void *arg;
struct svc_req *req;
d130 1
a130 1
static v2_pr_list_results res;
d132 1
a132 1
	if(printers == NULL)
d137 1
a137 1
return(&res);
d140 4
a143 3
v2_pr_queue_results *pcnfsd2_pr_queue_2_svc(arg, req)
v2_pr_queue_args *arg;
struct svc_req *req;
d145 1
a145 1
static v2_pr_queue_results res;
d147 2
a148 2
	res.stat = build_pr_queue(arg->pn, arg->user,
		arg->just_mine, &res.qlen, &res.qshown);
a151 1
	
d153 1
a153 1
return(&res);
d156 4
a159 3
v2_pr_status_results *pcnfsd2_pr_status_2_svc(arg, req)
v2_pr_status_args *arg;
struct svc_req *req;
d161 2
a162 2
static v2_pr_status_results res;
static char status[128];
d165 1
a165 1
		&res.qlen, &res.needs_operator, &status[0]);
d169 1
a169 1
return(&res);
d172 4
a175 3
v2_pr_cancel_results *pcnfsd2_pr_cancel_2_svc(arg, req)
v2_pr_cancel_args *arg;
struct svc_req *req;
d177 1
a177 1
static v2_pr_cancel_results res;
d182 1
a182 1
return(&res);
d186 4
a189 3
v2_pr_requeue_results *pcnfsd2_pr_requeue_2_svc(arg, req)
v2_pr_requeue_args *arg;
struct svc_req *req;
d191 2
a192 1
static v2_pr_requeue_results res;
d196 1
a196 1
return(&res);
d200 4
a203 3
v2_pr_hold_results *pcnfsd2_pr_hold_2_svc(arg, req)
v2_pr_hold_args *arg;
struct svc_req *req;
d205 1
a205 1
static v2_pr_hold_results res;
d210 1
a210 1
return(&res);
d214 4
a217 3
v2_pr_release_results *pcnfsd2_pr_release_2_svc(arg, req)
v2_pr_release_args *arg;
struct svc_req *req;
d219 1
a219 1
static v2_pr_release_results res;
d224 1
a224 1
return(&res);
d228 4
a231 3
v2_pr_admin_results *pcnfsd2_pr_admin_2_svc(arg, req)
v2_pr_admin_args *arg;
struct svc_req *req;
d233 1
a233 7
static v2_pr_admin_results res;
/*
** The default action for admin is to fail.
** If someone wishes to implement an administration
** mechanism, and isn't worried about the security
** holes, go right ahead.
*/
d238 1
a238 1
return(&res);
d245 1
a245 1
	if(p->mapreq_next)
d247 1
a247 1
	if(p->name)
a252 11
static char *
my_strdup(s)
char *s;
{
	char *r;

	r = (char *)grab(strlen(s)+1);
	strcpy(r, s);
	return(r);
}

d266 1
a266 1
	if(res.res_list) {
d272 1
a272 1
	while(a) {
d281 1
a281 1
		if(last_r == NULL)
d289 2
a290 2
			if(p_passwd) {
				next_r->name = my_strdup(p_passwd->pw_name);
d296 2
a297 2
			if(p_group) {
				next_r->name = my_strdup(p_group->gr_name);
d302 1
a302 1
			next_r->name = my_strdup(a->name);
d304 1
a304 1
			if(p_passwd) {
d310 1
a310 1
			next_r->name = my_strdup(a->name);
d312 1
a312 1
			if(p_group) {
d318 2
a319 2
		if(next_r->name == NULL)
			next_r->name = my_strdup("");
d325 1
a325 1
return(&res);
d339 1
a339 1
return(&res);
d355 1
a355 1
	if(onetime) {
d379 1
a379 1
return(&res);
d384 1
a384 1
void
d397 1
a397 1
	while(n < EXTRAGIDLEN) {
d399 1
a399 1
		if(grp == NULL)
d401 1
a401 1
		if(grp->gr_gid == main_gid)
d403 2
a404 2
		for(members = grp->gr_mem; members && *members; members++) {
			if(!strcmp(*members, uname)) {
a412 45

#ifdef USE_YP
/* the following is from rpcsvc/yp_prot.h */
#define YPMAXDOMAIN 64
/*
 * find_entry returns NULL on any error (printing a message) and
 * otherwise returns a pointer to the malloc'd result. The caller
 * is responsible for free()ing the result string.
 */
char *
find_entry(key, map)
char *key;
char *map;
{
	int err;
	char *val = NULL;
	char *cp;
	int len = 0;
	static char domain[YPMAXDOMAIN+1];

	if(getdomainname(domain, YPMAXDOMAIN) ) {
		msg_out("rpc.pcnfsd: getdomainname failed");
		return(NULL);
	}

	if (err = yp_bind(domain)) {
#ifdef	DEBUG
		msg_out("rpc.pcnfsd: yp_bind failed");
#endif
		return(NULL);
	}

	err = yp_match(domain, map, key, strlen(key), &val, &len);

	if (err) {
		msg_out("rpc.pcnfsd: yp_match failed");
		return(NULL);
	}

	if(cp = strchr(val, '\n'))
			*cp = '\0';		/* in case we get an extra NL at the end */
	return(val);
}

#endif
@


1.1
log
@Initial revision
@
text
@d115 1
a115 1
static char     home[256];
d147 2
a148 1
			strcpy(home, yphome);
d183 2
a184 1
		strcpy(home, yphome);
d361 2
a362 1
char *r;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
