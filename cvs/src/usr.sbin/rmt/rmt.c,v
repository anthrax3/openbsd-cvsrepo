head	1.20;
access;
symbols
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.4
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.22
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.18
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.16
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.14
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.12
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.10
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.8
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.6
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.4
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.2
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.08.14.18.34.48;	author guenther;	state Exp;
branches;
next	1.19;
commitid	PKvTittpF6Ut9SpV;

1.19
date	2015.11.04.21.27.03;	author tedu;	state Exp;
branches;
next	1.18;
commitid	bOiI1wYfEraR1JZ5;

1.18
date	2015.10.20.18.47.21;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	NQbiNc43mkbhK0Yn;

1.17
date	2015.10.16.14.13.52;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	300IVnJ82CDd5oD1;

1.16
date	2015.09.20.10.05.48;	author halex;	state Exp;
branches;
next	1.15;
commitid	W5kvZ0MPGlnVjdKG;

1.15
date	2015.01.16.06.40.20;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	Uu5nFG3wCl0LACBb;

1.14
date	2013.12.03.00.20.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2005.03.07.16.08.19;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.36.54;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.08.05.07.34;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.04.05.05.29;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.29.09.45.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.28.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.20.01.41.13;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	98.06.03.07.48.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.30.05.54.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.15.46.55;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.10.22.24.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.05;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.05;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Convert remaining calls to strtoq/strtouq in base with strtoll/strtoull.
Fix a type mismatch in ftp's "page" command and could make transfers restart
at the wrong position.

ok and a ull->ll tweak from natano@@, ok tedu@@
@
text
@/*	$OpenBSD: rmt.c,v 1.19 2015/11/04 21:27:03 tedu Exp $	*/

/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * rmt
 */
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/mtio.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <err.h>
#include <errno.h>
#include <string.h>
#include <limits.h>

int	tape = -1;

char	*record;
int	maxrecsize = -1;

#define	STRSIZE	64
char	device[PATH_MAX];
char	lastdevice[PATH_MAX] = "";
char	count[STRSIZE], mode[STRSIZE], pos[STRSIZE], op[STRSIZE];

char	resp[BUFSIZ];

FILE	*debug;
#define	DEBUG(f)	if (debug) fprintf(debug, f)
#define	DEBUG1(f,a)	if (debug) fprintf(debug, f, a)
#define	DEBUG2(f,a1,a2)	if (debug) fprintf(debug, f, a1, a2)

char		*checkbuf(char *, int);
void		getstring(char *, int);
void		error(int);
__dead void	usage(void);

int
main(int argc, char *argv[])
{
	off_t orval;
	int rval;
	char c;
	int n, i, cc;
	int ch, rflag = 0, wflag = 0;
	int f, acc;
	mode_t m;
	char *dir = NULL;
	char *devp;
	size_t dirlen;

	if (pledge("stdio rpath wpath cpath inet", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "d:rw")) != -1) {
		switch (ch) {
		case 'd':
			dir = optarg;
			if (*dir != '/')
				errx(1, "directory must be absolute");
			break;
		case 'r':
			rflag = 1;
			break;
		case 'w':
			wflag = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	if (rflag && wflag)
		usage();

	if (argc > 0) {
		debug = fopen(*argv, "w");
		if (debug == 0)
			err(1, "cannot open debug file");
		setvbuf(debug, NULL, _IONBF, 0);
	}

	if (dir) {
		if (chdir(dir) != 0)
			err(1, "chdir");
		dirlen = strlen(dir);
	}

top:
	errno = 0;
	rval = 0;
	if (read(STDIN_FILENO, &c, 1) != 1)
		exit(0);
	switch (c) {

	case 'O':
		if (tape >= 0)
			(void) close(tape);
		getstring(device, sizeof(device));
		getstring(mode, sizeof(mode));
		DEBUG2("rmtd: O %s %s\n", device, mode);

		devp = device;
		f = atoi(mode);
		m = S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH;
		acc = f & O_ACCMODE;
		if (dir) {
			/* Strip away valid directory prefix. */
			if (strncmp(dir, devp, dirlen) == 0 &&
			    (devp[dirlen - 1] == '/' ||
			     devp[dirlen] == '/')) {
			     devp += dirlen;
			     while (*devp == '/')
				devp++;
			}
			/* Don't allow directory traversal. */
			if (strchr(devp, '/')) {
				errno = EACCES;
				goto ioerror;
			}
			f |= O_NOFOLLOW;
		}
		if (rflag) {
			/*
			 * Only allow readonly open and ignore file
			 * creation requests.
			 */
			if (acc != O_RDONLY) {
				errno = EPERM;
				goto ioerror;
			}
			f &= ~O_CREAT;
		} else if (wflag) {
			/*
			 * Require, and force creation of, a nonexistant file,
			 * unless we are reopening the last opened file again,
			 * in which case it is opened read-only.
			 */
			if (strcmp(devp, lastdevice) != 0) {
				/*
				 * Disallow read-only open since that would
				 * only result in an empty file.
				 */
				if (acc == O_RDONLY) {
					errno = EPERM;
					goto ioerror;
				}
				f |= O_CREAT | O_EXCL;
			} else {
				acc = O_RDONLY;
			}
			/* Create readonly file */
			m = S_IRUSR|S_IRGRP|S_IROTH;
		}
		/* Apply new access mode. */
		f = (f & ~O_ACCMODE) | acc;

		tape = open(devp, f, m);
		if (tape == -1)
			goto ioerror;
		(void)strlcpy(lastdevice, devp, sizeof(lastdevice));
		goto respond;

	case 'C':
		DEBUG("rmtd: C\n");
		getstring(device, sizeof(device));	/* discard */
		if (close(tape) == -1)
			goto ioerror;
		tape = -1;
		goto respond;

	case 'L':
		getstring(count, sizeof(count));
		getstring(pos, sizeof(pos));
		DEBUG2("rmtd: L %s %s\n", count, pos);
		orval = lseek(tape, strtoll(count, NULL, 0), atoi(pos));
		if (orval == -1)
			goto ioerror;
		goto respond;

	case 'W':
		getstring(count, sizeof(count));
		n = atoi(count);
		DEBUG1("rmtd: W %s\n", count);
		record = checkbuf(record, n);
		for (i = 0; i < n; i += cc) {
			cc = read(STDIN_FILENO, &record[i], n - i);
			if (cc <= 0) {
				DEBUG("rmtd: premature eof\n");
				exit(2);
			}
		}
		rval = write(tape, record, n);
		if (rval < 0)
			goto ioerror;
		goto respond;

	case 'R':
		getstring(count, sizeof(count));
		DEBUG1("rmtd: R %s\n", count);
		n = atoi(count);
		record = checkbuf(record, n);
		rval = read(tape, record, n);
		if (rval < 0)
			goto ioerror;
		(void) snprintf(resp, sizeof resp, "A%d\n", rval);
		(void) write(STDOUT_FILENO, resp, strlen(resp));
		(void) write(STDOUT_FILENO, record, rval);
		goto top;

	case 'I':
		getstring(op, sizeof(op));
		getstring(count, sizeof(count));
		DEBUG2("rmtd: I %s %s\n", op, count);
		{ struct mtop mtop;
		  mtop.mt_op = atoi(op);
		  mtop.mt_count = atoi(count);
		  if (ioctl(tape, MTIOCTOP, (char *)&mtop) == -1)
			goto ioerror;
		  rval = mtop.mt_count;
		}
		goto respond;

	case 'S':		/* status */
		DEBUG("rmtd: S\n");
		{ struct mtget mtget;
		  if (ioctl(tape, MTIOCGET, (char *)&mtget) == -1)
			goto ioerror;
		  rval = sizeof (mtget);
		  (void) snprintf(resp, sizeof resp, "A%d\n", rval);
		  (void) write(STDOUT_FILENO, resp, strlen(resp));
		  (void) write(STDOUT_FILENO, (char *)&mtget, sizeof (mtget));
		  goto top;
		}

	default:
		DEBUG1("rmtd: garbage command %c\n", c);
		exit(3);
	}
respond:
	DEBUG1("rmtd: A %d\n", rval);
	(void) snprintf(resp, sizeof resp, "A%d\n", rval);
	(void) write(STDOUT_FILENO, resp, strlen(resp));
	goto top;
ioerror:
	error(errno);
	goto top;
}

void
getstring(char *bp, int size)
{
	char *cp = bp;
	char *ep = bp + size - 1;

	do {
		if (read(STDIN_FILENO, cp, 1) != 1)
			exit(0);
	} while (*cp != '\n' && ++cp < ep);
	*cp = '\0';
}

char *
checkbuf(char *record, int size)
{
	if (size <= maxrecsize)
		return (record);
	if (record != 0)
		free(record);
	record = malloc(size);
	if (record == 0) {
		DEBUG("rmtd: cannot allocate buffer space\n");
		exit(4);
	}
	maxrecsize = size;
	while (size > 1024 &&
	    setsockopt(0, SOL_SOCKET, SO_RCVBUF, &size, sizeof (size)) == -1)
		size -= 1024;
	return (record);
}

void
error(int num)
{

	DEBUG2("rmtd: E %d (%s)\n", num, strerror(num));
	(void) snprintf(resp, sizeof (resp), "E%d\n%s\n", num, strerror(num));
	(void) write(STDOUT_FILENO, resp, strlen(resp));
}

__dead void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s [-r | -w] [-d directory]\n",
	    __progname);
	exit(1);
}
@


1.19
log
@replace setbuf with setvbuf, from Frederic Nowak
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.18 2015/10/20 18:47:21 deraadt Exp $	*/
d212 1
a212 1
		orval = lseek(tape, strtoq(count, NULL, 0), atoi(pos));
@


1.18
log
@believe this will work with "stdio rpath wpath cpath inet" now that
SO_RCVBUF is permitted.  It may even be possible to lose the "inet" a
bit later in the code.  Anyone want to test?
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.17 2015/10/16 14:13:52 deraadt Exp $	*/
d116 1
a116 1
		(void) setbuf(debug, (char *)0);
@


1.17
log
@ugly white space
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.16 2015/09/20 10:05:48 halex Exp $	*/
d84 3
@


1.16
log
@Add a set of flags to rmt(8) to make it run in a restricted mode,
designed to work with rdump(8) to remote disk.

  -d <directory>   confines rmt to operate within a single directory.
  -r               enforces read-only mode.
  -w               enforces write-only mode.

This is quite usable with public ssh key setup, e.g. having the following in .ssh/authorized/keys:

  command="/etc/rmt -rd /backups/machine.example.conf",no-agent-forwarding,... ssh-rsa AAAAB3...

ok semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.15 2015/01/16 06:40:20 deraadt Exp $	*/
d310 1
a310 1
	       setsockopt(0, SOL_SOCKET, SO_RCVBUF, &size, sizeof (size)) == -1)
@


1.15
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.14 2013/12/03 00:20:03 deraadt Exp $	*/
d44 1
d56 1
d66 4
a69 3
char	*checkbuf(char *, int);
void	getstring(char *, int);
void	error(int);
d78 30
a108 1
	argc--, argv++;
d112 1
a112 1
			exit(1);
d115 7
d135 57
a191 2
		tape = open(device, atoi(mode),
		    S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);
d194 1
d322 10
@


1.14
log
@no need to use sgttyb.h
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.13 2009/10/27 23:59:54 deraadt Exp $	*/
a40 1
#include <sys/param.h>
d46 1
d54 1
a54 1
char	device[MAXPATHLEN];
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.12 2005/03/07 16:08:19 henning Exp $	*/
a34 2
#include <stdio.h>
#include <sgtty.h>
d39 1
d43 1
@


1.12
log
@make device MAXPATHLEN long instead of 64, fixes remote dumps with
long target file names, PR4137, ok miod beck mcbride deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.11 2003/06/02 23:36:54 millert Exp $	*/
a30 11

#ifndef lint
char copyright[] =
"@@(#) Copyright (c) 1983 Regents of the University of California.\n\
 All rights reserved.\n";
#endif /* not lint */

#ifndef lint
/*static char sccsid[] = "from: @@(#)rmt.c	5.6 (Berkeley) 6/1/90";*/
static char rcsid[] = "$Id: rmt.c,v 1.11 2003/06/02 23:36:54 millert Exp $";
#endif /* not lint */
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.10 2002/11/08 05:07:34 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$Id: rmt.c,v 1.10 2002/11/08 05:07:34 millert Exp $";
d53 1
d65 1
a65 1
char	device[STRSIZE];
@


1.10
log
@Use STDIN_FILENO and STDOUT_FILENO & ANSI prototypes; Chad Loder
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.9 2002/07/04 05:05:29 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$Id: rmt.c,v 1.9 2002/07/04 05:05:29 millert Exp $";
@


1.9
log
@Fix off by one error found by aaron@@; my fix
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.8 2002/05/29 09:45:08 deraadt Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: rmt.c,v 1.8 2002/05/29 09:45:08 deraadt Exp $";
d83 1
a83 3
main(argc, argv)
	int argc;
	char **argv;
d100 1
a100 1
	if (read(0, &c, 1) != 1)
d139 1
a139 1
			cc = read(0, &record[i], n - i);
d159 2
a160 2
		(void) write(1, resp, strlen(resp));
		(void) write(1, record, rval);
d183 2
a184 2
		  (void) write(1, resp, strlen(resp));
		  (void) write(1, (char *)&mtget, sizeof (mtget));
d195 1
a195 1
	(void) write(1, resp, strlen(resp));
d203 1
a203 3
getstring(bp, size)
	char *bp;
	int size;
d209 1
a209 1
		if (read(0, cp, 1) != 1)
d216 1
a216 3
checkbuf(record, size)
	char *record;
	int size;
d235 1
a235 2
error(num)
	int num;
d240 1
a240 1
	(void) write(1, resp, strlen(resp));
@


1.8
log
@more sprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.7 2002/02/16 21:28:08 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: rmt.c,v 1.7 2002/02/16 21:28:08 millert Exp $";
d79 1
a79 1
void	getstring(char *);
d109 2
a110 1
		getstring(device); getstring(mode);
d120 1
a120 1
		getstring(device);		/* discard */
d127 2
a128 1
		getstring(count); getstring(pos);
d136 1
a136 1
		getstring(count);
d153 1
a153 1
		getstring(count);
d166 2
a167 1
		getstring(op); getstring(count);
d205 1
a205 1
getstring(bp)
d207 1
a208 1
	int i;
d210 1
d212 2
a213 2
	for (i = 0; i < STRSIZE; i++) {
		if (read(0, cp+i, 1) != 1)
d215 2
a216 4
		if (cp[i] == '\n')
			break;
	}
	cp[i] = '\0';
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmt.c,v 1.6 2000/07/20 01:41:13 jason Exp $	*/
d44 1
a44 1
static char rcsid[] = "$Id: rmt.c,v 1.6 2000/07/20 01:41:13 jason Exp $";
d158 1
a158 1
		(void) sprintf(resp, "A%d\n", rval);
d181 1
a181 1
		  (void) sprintf(resp, "A%d\n", rval);
d193 1
a193 1
	(void) sprintf(resp, "A%d\n", rval);
@


1.6
log
@add openbsd tag, fix cpp warning about SSIZE redefinition
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$Id: rmt.c,v 1.5 1998/06/03 07:48:27 deraadt Exp $";
d78 3
a80 3
char	*checkbuf __P((char *, int));
void	getstring __P((char *));
void	error __P((int));
@


1.5
log
@fix a bunch of sloppy c uses
@
text
@d1 2
d44 1
a44 1
static char rcsid[] = "$Id: rmt.c,v 1.4 1997/06/30 05:54:31 millert Exp $";
d67 3
a69 3
#define	SSIZE	64
char	device[SSIZE];
char	count[SSIZE], mode[SSIZE], pos[SSIZE], op[SSIZE];
d208 1
a208 1
	for (i = 0; i < SSIZE; i++) {
@


1.4
log
@lseek(2) takes an off_t which is quad_t so we use strtoq(3) not atoi(3).
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rmt.c,v 1.3 1997/01/17 15:46:55 millert Exp $";
a63 1
char	*checkbuf();
d76 1
d85 1
d111 1
a111 1
		if (tape < 0)
d118 1
a118 1
		if (close(tape) < 0)
d126 2
a127 2
		rval = lseek(tape, strtoq(count, NULL, 0), atoi(pos));
		if (rval < 0)
d167 1
a167 1
		  if (ioctl(tape, MTIOCTOP, (char *)&mtop) < 0)
d176 1
a176 1
		  if (ioctl(tape, MTIOCGET, (char *)&mtget) < 0)
a219 2
	extern char *malloc();

d231 1
a231 1
	       setsockopt(0, SOL_SOCKET, SO_RCVBUF, &size, sizeof (size)) < 0)
@


1.3
log
@Fix potential buf oflow wrt strerror and sprintf.
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rmt.c,v 1.2 1996/08/10 22:24:18 deraadt Exp $";
d125 1
a125 1
		rval = lseek(tape, atoi(count), atoi(pos));
@


1.2
log
@protos in scope
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rmt.c,v 1.1.1.1 1995/10/18 08:48:05 deraadt Exp $";
d243 1
a243 1
	(void) sprintf(resp, "E%d\n%s\n", num, strerror(num));
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char rcsid[] = "$Id: rmt.c,v 1.6 1995/04/13 02:07:23 mycroft Exp $";
d52 1
d55 2
d77 4
d198 1
d237 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
