head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.12
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.14
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.10
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.8
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.01.16.06.40.18;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	Uu5nFG3wCl0LACBb;

1.20
date	2014.01.22.19.31.00;	author tobias;	state Exp;
branches;
next	1.19;

1.19
date	2013.11.24.21.32.32;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.16.13.34.58;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.25.02.15.21;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.03.11.04.36.55;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.08.16.50.07;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.08.01.53.43;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.28.04;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.06.03.12.31;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.23.03.58.18;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.15.05.20.35;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.17.16.12.47;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.05.15.13.41.58;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	96.05.06.06.40.40;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.04.11.53.00;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: lprm.c,v 1.20 2014/01/22 19:31:00 tobias Exp $	*/
/*	$$NetBSD: lprm.c,v 1.9 1999/08/16 03:12:32 simonb Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * lprm - remove the current user's spool entry
 *
 * lprm [-] [[job #] [user] ...]
 *
 * Using information in the lock file, lprm will kill the
 * currently active daemon (if necessary), remove the associated files,
 * and startup a new daemon.  Privileged users may remove anyone's spool
 * entries, otherwise one can only remove their own.
 */


#include <ctype.h>
#include <signal.h>
#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <pwd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <syslog.h>
#include <unistd.h>
#include <limits.h>

#include "lp.h"
#include "lp.local.h"

/*
 * Stuff for handling job specifications
 */
char	*person;		/* name of person doing lprm */
int	 requ[MAXREQUESTS];	/* job number of spool entries */
int	 requests;		/* # of spool requests */
char	*user[MAXUSERS];	/* users to process */
int	 users;			/* # of users in user array */
volatile sig_atomic_t gotintr;	/* set when we receive SIGINT */
static char luser[LOGIN_NAME_MAX];	/* buffer for person */

static __dead void usage(void);

int
main(int argc, char **argv)
{
	struct passwd *pw;
	char *cp;
	long l;
	int ch;

	/*
	 * Simulate setuid daemon w/ PRIV_END called.
	 * We don't want lpr to actually be setuid daemon since that
	 * requires that the lpr binary be owned by user daemon, which
	 * is potentially unsafe.
	 */
	if ((pw = getpwuid(DEFUID)) == NULL)
		errx(1, "daemon uid (%u) not in password file", DEFUID);
	effective_uid = pw->pw_uid;
	real_uid = getuid();
	effective_gid = pw->pw_gid;
	real_gid = getgid();
	setresgid(real_gid, real_gid, effective_gid);
	setresuid(real_uid, real_uid, effective_uid);

	gethostname(host, sizeof(host));
	openlog("lprm", 0, LOG_LPR);
	if ((pw = getpwuid(real_uid)) == NULL)
		fatal("Who are you?");
	if (strlen(pw->pw_name) >= sizeof(luser))
		fatal("Your name is too long");
	strlcpy(luser, pw->pw_name, sizeof(luser));
	person = luser;
	while ((ch = getopt(argc, argv, "P:w:-")) != -1) {
		switch (ch) {
		case '-':
			users = -1;
			break;
		case 'P':
			printer = optarg;
			break;
		case 'w':
			l = strtol(optarg, &cp, 10);
			if (*cp != '\0' || l < 0 || l >= INT_MAX)
				errx(1, "wait time must be positive integer: %s",
				    optarg);
			wait_time = (u_int)l;
			if (wait_time < 30)
				warnx("warning: wait time less than 30 seconds");
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (printer == NULL && (printer = getenv("PRINTER")) == NULL)
		printer = DEFLP;
	if (users < 0 && argc != 0)
		usage();
	while (argc > 0) {
		if (isdigit((unsigned char)*argv[0])) {
			if (requests >= MAXREQUESTS)
				fatal("Too many requests");
			requ[requests++] = atoi(argv[0]);
		} else {
			if (users >= MAXUSERS)
				fatal("Too many users");
			user[users++] = argv[0];
		}
		argc--;
		argv++;
	}

	rmjob();
	exit(0);
}

static __dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-] [-Pprinter] [[job# ...] [user ...]]\n",
	    __progname);
	exit(2);
}
@


1.20
log
@Fixed typo in error message.

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.19 2013/11/24 21:32:32 deraadt Exp $	*/
a44 1
#include <sys/param.h>
d47 1
d57 1
d71 1
a71 1
static char luser[MAXLOGNAME];	/* buffer for person */
@


1.19
log
@more ctype cleanups
checked by jca
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.18 2009/10/27 23:59:52 deraadt Exp $	*/
d116 1
a116 1
				errx(1, "wait time must be postive integer: %s",
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.17 2007/02/16 13:34:58 jmc Exp $	*/
d134 1
a134 1
		if (isdigit(*argv[0])) {
@


1.17
log
@sync synopsis and usage(); from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.16 2003/06/02 23:36:53 millert Exp $	*/
a32 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)lprm.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.16 2003/06/02 23:36:53 millert Exp $";
#endif
#endif /* not lint */
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.15 2003/03/25 02:15:21 millert Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.15 2003/03/25 02:15:21 millert Exp $";
d170 1
a170 1
	fprintf(stderr, "usage: %s [-] [-Pprinter] [[job #] [user] ...]\n",
@


1.15
log
@Fix last commit; to emulate setuid daemon + PRIV_END we need to
set the real & effective uids to the calling user and the saved
uid to daemon.  Fixes a problem where lpr could not print files
that were not world-readable.
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.14 2003/03/11 04:36:55 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.14 2003/03/11 04:36:55 millert Exp $";
@


1.14
log
@Make lpr and lprm setuid root but drop to daemon very early.
Functionally this is the same as when lpr and lprm were setuid
daemon but the executable are now owned by root which is safer.
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.13 2002/12/08 16:50:07 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.13 2002/12/08 16:50:07 millert Exp $";
d101 1
a101 1
	 * Simulate setuid daemon but with real and effective swapped.
d112 2
a113 2
	setresgid(effective_gid, real_gid, effective_gid);
	setresuid(effective_uid, real_uid, effective_uid);
@


1.13
log
@GNU semantics say that if optstring begins with '-' then
each non-option shall be treated as arguments to option '\1'.

BSD getopt match '-' in optstring with a '-' on the command line.
This is used to support deprecated options like "su -" that would
otherwise prevent the use of getopt().

Resolving this simply requires that the leading '-' be moved somewhere
else (I moved it to the end of optstring) since position within
optstring is not meaningful.
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.12 2002/06/08 01:53:43 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.12 2002/06/08 01:53:43 millert Exp $";
d95 1
a95 1
	struct passwd *p;
d100 9
a108 1
	effective_uid = geteuid();
d110 1
a110 1
	effective_gid = getegid();
d112 2
a113 1
	PRIV_END;	/* be safe */
d117 1
a117 1
	if ((p = getpwuid(real_uid)) == NULL)
d119 1
a119 1
	if (strlen(p->pw_name) >= sizeof(luser))
d121 1
a121 1
	strlcpy(luser, p->pw_name, sizeof(luser));
@


1.12
log
@Remove setuid root from lp*.  lpr needs to be setuid daemon so the
files it creates are not owned by the user spooling them but the
others (lpc, lpq, lprm) can get away with setgid daemon.  lpd runs
as user daemon for most things, only changing its uid to 0 for
things that must be done as root.

For the time being, don't require connections to come from a reserved
port since lpq/lpr/lprm can't acquire that w/o setuid root.  In the
near future we will have a mechanism for select non-root processes
to grab reserved ports.

The upshot of this is that spool directories must be writable by
group daemon and the files within the spool dirs must be owned by
daemon.
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.11 2002/05/20 23:13:50 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.11 2002/05/20 23:13:50 millert Exp $";
d114 1
a114 1
	while ((ch = getopt(argc, argv, "-P:w:")) != -1) {
@


1.11
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.10 2002/02/16 21:28:04 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.10 2002/02/16 21:28:04 millert Exp $";
d68 1
d100 5
a104 3
	uid = getuid();
	euid = geteuid();
	seteuid(uid);	/* be safe */
d108 1
a108 1
	if ((p = getpwuid(getuid())) == NULL)
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
a2 1
/*	$OpenBSD: lprm.c,v 1.9 2001/12/06 03:12:31 ericj Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.9 2001/12/06 03:12:31 ericj Exp $";
d59 1
a59 1
 * and startup a new daemon.  Priviledged users may remove anyone's spool
d65 1
a65 1
#include <syslog.h>
d67 1
a68 1
#include <unistd.h>
d72 3
a74 1
#include <ctype.h>
d86 2
a87 5
uid_t	 uid, euid;		/* real and effective user id's */

static char	luser[MAXLOGNAME];	/* buffer for person */

volatile sig_atomic_t gotintr;
d89 1
a89 1
void usage(void);
d92 1
a92 3
main(argc, argv)
	int argc;
	char *argv[];
a93 1
	char *arg;
d95 3
d104 1
a104 1
	openlog("lpd", 0, LOG_LPR);
d109 1
a109 1
	strcpy(luser, p->pw_name);
d111 19
a129 31
	while (--argc) {
		if ((arg = *++argv)[0] == '-')
			switch (arg[1]) {
			case 'P':
				if (arg[2])
					printer = &arg[2];
				else if (argc > 1) {
					argc--;
					printer = *++argv;
				}
				break;
			case '\0':
				if (!users) {
					users = -1;
					break;
				}
			default:
				usage();
			}
		else {
			if (users < 0)
				usage();
			if (isdigit(arg[0])) {
				if (requests >= MAXREQUESTS)
					fatal("Too many requests");
				requ[requests++] = atoi(arg);
			} else {
				if (users >= MAXUSERS)
					fatal("Too many users");
				user[users++] = arg;
			}
d132 2
a133 2
	if (printer == NULL) {
		char *p;
d135 1
d137 14
a150 2
		if ((p = getenv("PRINTER")) != NULL)
			printer = p;
d157 2
a158 2
void
usage()
d160 4
a163 1
	fprintf(stderr, "usage: lprm [-] [-Pprinter] [[job #] [user] ...]\n");
@


1.9
log
@
use err/warn and friends instead of printf/exit.
also, remove fatal2() which is just errx anyway.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.8 2001/11/23 03:58:18 deraadt Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.8 2001/11/23 03:58:18 deraadt Exp $";
d89 1
a89 1
void usage __P((void));
@


1.8
log
@use the same siginterrupt() trick in lpc(1) as in timedc(1). we have to hack
a global into the other programs since they share some source.
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.7 2001/08/30 17:38:13 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.7 2001/08/30 17:38:13 millert Exp $";
d102 1
a102 1
	name = argv[0];
@


1.7
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.6 2001/02/15 05:20:35 deraadt Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lprm.c,v 1.6 2001/02/15 05:20:35 deraadt Exp $";
d86 2
@


1.6
log
@MAXLOGNAME; ianm@@cit.uws.edu.au
@
text
@d1 1
a1 1
/*	$OpenBSD: lprm.c,v 1.5 1997/01/17 16:12:47 millert Exp $	*/
d38 1
a38 1
static char copyright[] =
d45 1
a45 1
static char sccsid[] = "@@(#)lprm.c	8.1 (Berkeley) 6/6/93";
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lprm.c,v 1.5 1997/01/17 16:12:47 millert Exp $";
d94 1
a94 1
	register char *arg;
@


1.5
log
@Add OpenBSD tags (was in wrong dir for previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: $";
d85 1
a85 1
static char	luser[16];	/* buffer for person */
@


1.4
log
@previous fix of NULL check reversed
@
text
@d1 2
d44 1
d46 3
@


1.3
log
@Missing ' == NULL)' added...
@
text
@d140 1
a140 1
		if ((p = getenv("PRINTER")) == NULL)
@


1.2
log
@correct -P, $PRINTER, and DEFLP interactions. bug reported by scott.burns@@labatt.com
@
text
@d140 1
a140 1
		if ((p = getenv("PRINTER"))
@


1.1
log
@Initial revision
@
text
@d136 3
a138 1
	if (printer == NULL && (printer = getenv("PRINTER")) == NULL)
d140 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
