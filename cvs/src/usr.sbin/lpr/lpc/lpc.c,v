head	1.20;
access;
symbols
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.4
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.22
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.20
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.16
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.14
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.12
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.22
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.18
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.16
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.14
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.12
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.10
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.8
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.6
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.4
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.2
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.4
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2016.03.16.15.41.11;	author krw;	state Exp;
branches;
next	1.19;
commitid	JEVxsRygqcjPtWTf;

1.19
date	2015.01.16.06.40.18;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	Uu5nFG3wCl0LACBb;

1.18
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2004.09.30.18.20.06;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.19.01.24.14;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.08.01.53.43;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.28.03;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.06.03.12.30;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.23.03.58.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.21.07.22.53;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.24.16.20.41;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.24.16.00.19;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.17.16.12.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.10.31.22.32.42;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.08.29.13.06.08;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.07.04.05.41.54;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.41;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@More "(<blah> *)0" -> NULL, avoiding any stdarg functions.

Feedback millert@@ kettenis@@
@
text
@/*	$OpenBSD: lpc.c,v 1.19 2015/01/16 06:40:18 deraadt Exp $	*/
/*	$NetBSD: lpc.c,v 1.11 2001/11/14 03:01:15 enami Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <dirent.h>
#include <signal.h>
#include <syslog.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <ctype.h>
#include <string.h>
#include <grp.h>

#include "lp.h"
#include "lpc.h"
#include "extern.h"

#ifndef LPR_OPER
#define LPR_OPER	"operator"	/* group name of lpr operators */
#endif

/*
 * lpc -- line printer control program
 */

#define MAX_CMDLINE	200
#define MAX_MARGV	20
int	fromatty;

char	cmdline[MAX_CMDLINE];
int	margc;
char	*margv[MAX_MARGV];

static void		 cmdscanner(void);
static struct cmd	*getcmd(char *);
static void		 intr(int);
static void		 makeargv(void);
static int		 ingroup(char *);

int
main(int argc, char **argv)
{
	struct cmd *c;

	effective_uid = geteuid();
	real_uid = getuid();
	effective_gid = getegid();
	real_gid = getgid();
	PRIV_END;	/* be safe */

	openlog("lpc", 0, LOG_LPR);
	if (--argc > 0) {
		c = getcmd(*++argv);
		if (c == (struct cmd *)-1) {
			printf("?Ambiguous command\n");
			exit(1);
		}
		if (c == 0) {
			printf("?Invalid command\n");
			exit(1);
		}
		if (c->c_priv && real_uid && ingroup(LPR_OPER) == 0) {
			printf("?Privileged command\n");
			exit(1);
		}
		(*c->c_handler)(argc, argv);
		exit(0);
	}
	fromatty = isatty(fileno(stdin));
	signal(SIGINT, intr);
	for (;;)
		cmdscanner();
}

volatile sig_atomic_t gotintr;

static void
intr(int signo)
{
	if (!fromatty)
		_exit(0);
	gotintr = 1;
}

/*
 * Command parser.
 */
static void
cmdscanner(void)
{
	struct cmd *c;

	for (;;) {
		if (gotintr) {
			putchar('\n');
			gotintr = 0;
		}
		if (fromatty) {
			printf("lpc> ");
			fflush(stdout);
		}

		siginterrupt(SIGINT, 1);
		if (fgets(cmdline, MAX_CMDLINE, stdin) == NULL) {
			if (errno == EINTR && gotintr) {
				siginterrupt(SIGINT, 0);
				return;
			}
			siginterrupt(SIGINT, 0);
			quit(0, NULL);
		}
		siginterrupt(SIGINT, 0);

		makeargv();
		if (margc == 0)
			break;
		c = getcmd(margv[0]);
		if (c == (struct cmd *)-1) {
			printf("?Ambiguous command\n");
			continue;
		}
		if (c == 0) {
			printf("?Invalid command\n");
			continue;
		}
		if (c->c_priv && getuid() && ingroup(LPR_OPER) == 0) {
			printf("?Privileged command\n");
			continue;
		}
		(*c->c_handler)(margc, margv);
	}
}

static struct cmd *
getcmd(char *name)
{
	char *p, *q;
	struct cmd *c, *found;
	int nmatches, longest;

	longest = 0;
	nmatches = 0;
	found = 0;
	for (c = cmdtab; (p = c->c_name) != NULL; c++) {
		for (q = name; *q == *p++; q++)
			if (*q == 0)		/* exact match? */
				return(c);
		if (!*q) {			/* the name was a prefix */
			if (q - name > longest) {
				longest = q - name;
				nmatches = 1;
				found = c;
			} else if (q - name == longest)
				nmatches++;
		}
	}
	if (nmatches > 1)
		return((struct cmd *)-1);
	return(found);
}

/*
 * Slice a string up into argc/argv.
 */
static void
makeargv(void)
{
	char *cp = cmdline;
	char **ap = margv;

	margc = 0;
	while (margc < MAX_MARGV - 1 && (*ap = strsep(&cp, " \t\n")) != NULL) {
		if (**ap != '\0') {
			ap++;
			margc++;
		}
	}
	*ap = NULL;
}

#define HELPINDENT ((int)sizeof("directory"))

/*
 * Help command.
 */
void
help(int argc, char **argv)
{
	struct cmd *c;

	if (argc == 1) {
		int i, j, w;
		int columns, width = 0, lines;

		printf("Commands may be abbreviated.  Commands are:\n\n");
		for (c = cmdtab; c->c_name; c++) {
			int len = strlen(c->c_name);

			if (len > width)
				width = len;
		}
		width = (width + 8) &~ 7;
		columns = 80 / width;
		if (columns == 0)
			columns = 1;
		lines = (NCMDS + columns - 1) / columns;
		for (i = 0; i < lines; i++) {
			for (j = 0; j < columns; j++) {
				c = cmdtab + j * lines + i;
				if (c->c_name)
					printf("%s", c->c_name);
				if (c + lines >= &cmdtab[NCMDS]) {
					printf("\n");
					break;
				}
				w = strlen(c->c_name);
				while (w < width) {
					w = (w + 8) &~ 7;
					putchar('\t');
				}
			}
		}
		return;
	}
	while (--argc > 0) {
		char *arg;

		arg = *++argv;
		c = getcmd(arg);
		if (c == (struct cmd *)-1)
			printf("?Ambiguous help command %s\n", arg);
		else if (c == NULL)
			printf("?Invalid help command %s\n", arg);
		else
			printf("%-*s\t%s\n", HELPINDENT,
				c->c_name, c->c_help);
	}
}

/*
 * return non-zero if the user is a member of the given group
 */
static int
ingroup(char *grname)
{
	static struct group *gptr = NULL;
	static gid_t groups[NGROUPS_MAX];
	static int ngroups;
	gid_t gid;
	int i;

	if (gptr == NULL) {
		if ((gptr = getgrnam(grname)) == NULL) {
			warnx("Warning: unknown group `%s'", grname);
			return(0);
		}
		if ((ngroups = getgroups(NGROUPS_MAX, groups)) < 0)
			err(1, "getgroups");
	}
	gid = gptr->gr_gid;
	for (i = 0; i < ngroups; i++)
		if (gid == groups[i])
			return(1);
	return(0);
}
@


1.19
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.18 2009/10/27 23:59:52 deraadt Exp $	*/
d265 1
a265 1
		else if (c == (struct cmd *)0)
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.17 2004/09/30 18:20:06 millert Exp $	*/
a33 2
#include <sys/param.h>

d42 1
d280 1
a280 1
	static gid_t groups[NGROUPS];
d290 1
a290 1
		if ((ngroups = getgroups(NGROUPS, groups)) < 0)
@


1.17
log
@Avoid a segfault if only whitespace characters are entered at the
lpc> prompt and fix an off by one when splitting a line into an
argument vector.  Based on a patch from Patrick Latifi.  OK otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.16 2003/06/02 23:36:53 millert Exp $	*/
a32 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)lpc.c	8.3 (Berkeley) 4/28/95";
#else
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.16 2003/06/02 23:36:53 millert Exp $";
#endif
#endif /* not lint */
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.15 2002/06/19 01:24:14 deraadt Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.15 2002/06/19 01:24:14 deraadt Exp $";
d162 2
a163 1
		if (cmdline[0] == 0 || cmdline[0] == '\n')
a164 1
		makeargv();
d216 2
a217 3
	char *cp;
	char **argp = margv;
	int n = 0;
d220 5
a224 13
	for (cp = cmdline; *cp && (cp - cmdline) < sizeof(cmdline) &&
	    n < MAX_MARGV; n++) {
		while (isspace(*cp))
			cp++;
		if (*cp == '\0')
			break;
		*argp++ = cp;
		margc += 1;
		while (*cp != '\0' && !isspace(*cp))
			cp++;
		if (*cp == '\0')
			break;
		*cp++ = '\0';
d226 1
a226 1
	*argp++ = 0;
@


1.15
log
@stretch some ugly while();
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.14 2002/06/08 01:53:43 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.14 2002/06/08 01:53:43 millert Exp $";
@


1.14
log
@Remove setuid root from lp*.  lpr needs to be setuid daemon so the
files it creates are not owned by the user spooling them but the
others (lpc, lpq, lprm) can get away with setgid daemon.  lpd runs
as user daemon for most things, only changing its uid to 0 for
things that must be done as root.

For the time being, don't require connections to come from a reserved
port since lpq/lpr/lprm can't acquire that w/o setuid root.  In the
near future we will have a mechanism for select non-root processes
to grab reserved ports.

The upshot of this is that spool directories must be writable by
group daemon and the files within the spool dirs must be owned by
daemon.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.13 2002/05/20 23:13:50 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.13 2002/05/20 23:13:50 millert Exp $";
d288 1
@


1.13
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.12 2002/02/16 21:28:03 millert Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.12 2002/02/16 21:28:03 millert Exp $";
d97 6
a102 3
	euid = geteuid();
	uid = getuid();
	seteuid(uid);
a103 1

d114 1
a114 1
		if (c->c_priv && getuid() && ingroup(LPR_OPER) == 0) {
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
a2 1
/*	$OpenBSD: lpc.c,v 1.11 2001/12/06 03:12:30 ericj Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.11 2001/12/06 03:12:30 ericj Exp $";
d60 1
d65 1
a65 1
#include <sys/param.h>
a84 1
uid_t	uid, euid;
d86 5
a90 5
void		 cmdscanner(void);
struct cmd	*getcmd(char *);
void		 intr(int);
void		 makeargv(void);
int		 ingroup(char *);
d93 1
a93 3
main(argc, argv)
	int argc;
	char *argv[];
d100 1
a100 1
	openlog("lpd", 0, LOG_LPR);
d127 2
a128 3
void
intr(signo)
	int signo;
d138 1
a138 1
void
d184 2
a185 3
struct cmd *
getcmd(name)
	char *name;
d194 1
a194 1
	for (c = cmdtab; (p = c->c_name); c++) {
d215 2
a216 2
void
makeargv()
d240 1
a240 1
#define HELPINDENT (sizeof ("directory"))
d246 1
a246 3
help(argc, argv)
	int argc;
	char *argv[];
a252 1
		extern int NCMDS;
d301 2
a302 3
int
ingroup(grname)
	char *grname;
d304 3
a308 3
	static struct group *gptr = NULL;
	static gid_t groups[NGROUPS];
	static int maxgroups;
d312 1
a312 2
			fprintf(stderr, "Warning: unknown group '%s'\n",
				grname);
d315 2
a316 4
		if ((maxgroups = getgroups(NGROUPS, groups)) < 0) {
			perror("getgroups");
			exit(1);
		}
d319 1
a319 1
	for (i = 0; i < maxgroups; i++)
@


1.11
log
@
use err/warn and friends instead of printf/exit.
also, remove fatal2() which is just errx anyway.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.10 2001/11/23 03:58:18 deraadt Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.10 2001/11/23 03:58:18 deraadt Exp $";
d85 5
a89 5
void		 cmdscanner __P((void));
struct cmd	*getcmd __P((char *));
void		 intr __P((int));
void		 makeargv __P((void));
int		 ingroup __P((char *));
@


1.10
log
@use the same siginterrupt() trick in lpc(1) as in timedc(1). we have to hack
a global into the other programs since they share some source.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.9 2001/08/30 17:38:13 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.9 2001/08/30 17:38:13 millert Exp $";
a100 1
	name = argv[0];
@


1.9
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.8 2000/11/21 07:22:53 deraadt Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpc.c,v 1.8 2000/11/21 07:22:53 deraadt Exp $";
a54 1
#include <setjmp.h>
d59 1
a82 1
int	top;
d85 1
a85 3
jmp_buf	toplevel;

void		 cmdscanner __P((int));
d122 3
a124 7
	top = sigsetjmp(toplevel, 1) == 0;
	if (top)
		signal(SIGINT, intr);
	for (;;) {
		cmdscanner(top);
		top = 1;
	}
d127 2
d134 2
a135 2
		exit(0);
	siglongjmp(toplevel, 1);
d142 1
a142 2
cmdscanner(top)
	int top;
a145 2
	if (!top)
		putchar('\n');
d147 4
d155 8
a162 1
		if (fgets(cmdline, MAX_CMDLINE, stdin) == 0)
d164 3
a184 1
	siglongjmp(toplevel, 0);
@


1.8
log
@sigjmp & statics begone
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.7 2000/08/24 16:20:41 deraadt Exp $	*/
d38 1
a38 1
static char copyright[] =
d45 1
a45 1
static char sccsid[] = "@@(#)lpc.c	8.3 (Berkeley) 4/28/95";
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lpc.c,v 1.7 2000/08/24 16:20:41 deraadt Exp $";
d99 1
a99 1
	register struct cmd *c;
d150 1
a150 1
	register struct cmd *c;
d184 1
a184 1
	register char *name;
d186 3
a188 3
	register char *p, *q;
	register struct cmd *c, *found;
	register int nmatches, longest;
d217 3
a219 3
	register char *cp;
	register char **argp = margv;
	register int n = 0;
d249 1
a249 1
	register struct cmd *c;
d252 1
a252 1
		register int i, j, w;
d287 1
a287 1
		register char *arg;
d307 2
a310 2
	register gid_t gid;
	register int i;
@


1.7
log
@more fixes in that area; dholland@@eecs.harvard.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.6 2000/08/24 16:00:19 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lpc.c,v 1.6 2000/08/24 16:00:19 deraadt Exp $";
d88 5
a92 5
static void		 cmdscanner __P((int));
static struct cmd	*getcmd __P((char *));
static void		 intr __P((int));
static void		 makeargv __P((void));
static int		 ingroup __P((char *));
d125 1
a125 1
	top = setjmp(toplevel) == 0;
d134 1
a134 1
static void
d140 1
a140 1
	longjmp(toplevel, 1);
d146 1
a146 1
static void
d179 1
a179 1
	longjmp(toplevel, 0);
d182 1
a182 1
static struct cmd *
d214 1
a214 1
static void
d303 1
a303 1
static int
@


1.6
log
@only loop through real groups; reported by dholland@@eecs.harvard.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: lpc.c,v 1.5 1997/01/17 16:12:37 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: lpc.c,v 1.5 1997/01/17 16:12:37 millert Exp $";
d307 1
a307 1
	static struct group *gptr=NULL;
d311 1
a311 1
	int maxgroups;
@


1.5
log
@Add OpenBSD tags (was in wrong dir for previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: $";
d311 1
d319 1
a319 1
		if (getgroups(NGROUPS, groups) < 0) {
d325 1
a325 1
	for (i = 0; i < NGROUPS; i++)
@


1.4
log
@buf oflows pendantry
@
text
@d1 2
d44 1
d46 3
@


1.3
log
@hate warnings, kill warnings
@
text
@d216 2
a217 1
	for (cp = cmdline; *cp && n < MAX_MARGV; n++) {
@


1.2
log
@Integrated 4.4Lite2 source
Fixed potential problem pointed out by bitblt
@
text
@d187 1
a187 1
	for (c = cmdtab; p = c->c_name; c++) {
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
static char sccsid[] = "@@(#)lpc.c	8.1 (Berkeley) 6/6/93";
d56 2
d62 4
d86 1
d111 1
a111 1
		if (c->c_priv && getuid()) {
d167 1
a167 1
		if (c->c_priv && getuid()) {
d176 1
a176 1
struct cmd *
d291 30
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
