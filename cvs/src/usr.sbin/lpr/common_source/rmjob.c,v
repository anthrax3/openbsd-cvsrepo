head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.4
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.2
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.10
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.16.0.16
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.14
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.12
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.10
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.12
	OPENBSD_2_8:1.9.0.10
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.8
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.6
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.4
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2016.01.12.23.35.13;	author tb;	state Exp;
branches;
next	1.22;
commitid	6TIpGjc6KPGjJcnt;

1.22
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	Uu5nFG3wCl0LACBb;

1.21
date	2013.11.24.21.32.32;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2012.11.29.02.15.44;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.18;

1.18
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.07.21.12.12;	author stevesk;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.13.17.22.01;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.08.01.53.43;	author millert;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.28.03;	author millert;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.30.17.25.35;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.04.22.14.44.08;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.07.23.22.12.12;	author deraadt;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	97.07.18.20.57.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.17.09.14.11;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.01.17.16.11.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.10.25.19.38.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.07.04.05.41.52;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.04.25.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.40;	author deraadt;	state Exp;
branches;
next	;

1.8.4.1
date	98.04.22.14.44.30;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2003.03.05.19.53.44;	author miod;	state Exp;
branches;
next	;

1.14.2.1
date	2003.03.05.00.15.30;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Move prototypes of local functions from lp.h to the .c files and make
functions static if possible.  Move delay() to lpd/printjob.c and fix
an annoying typo.

ok deraadt@@
@
text
@/*	$OpenBSD: rmjob.c,v 1.22 2015/01/16 06:40:17 deraadt Exp $	*/
/*	$NetBSD: rmjob.c,v 1.16 2000/04/16 14:43:58 mrg Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <signal.h>
#include <errno.h>
#include <fcntl.h>
#include <dirent.h>
#include <unistd.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include "lp.h"
#include "lp.local.h"
#include "pathnames.h"

/*
 * rmjob - remove the specified jobs from the queue.
 */

/*
 * Stuff for handling lprm specifications
 */
extern char	*user[];		/* users to process */
extern int	users;			/* # of users in user array */
extern int	requ[];			/* job number of spool entries */
extern int	requests;		/* # of spool requests */
extern char	*person;		/* name of person doing lprm */

static char	root[] = "root";
static int	all = 0;		/* eliminate all files (root only) */
static int	cur_daemon;		/* daemon's pid */
static char	current[NAME_MAX];	/* active control file name */

static void	alarmer(int);
static int	chk(char *);
static void	do_unlink(char *);
static int	iscf(const struct dirent *);
static int	isowner(char *, char *);
static int	lockchk(char *);
static void	process(char *);
static void	rmremote(void);

void
rmjob(void)
{
	int i, nitems;
	int assassinated = 0;
	struct dirent **files;
	char *cp;

	if ((i = cgetent(&bp, printcapdb, printer)) == -2)
		fatal("can't open printer description file");
	else if (i == -1)
		fatal("unknown printer");
	else if (i == -3)
		fatal("potential reference loop detected in printcap file");
	if (cgetstr(bp, DEFLP, &LP) < 0)
		LP = _PATH_DEFDEVLP;
	if (cgetstr(bp, "rp", &RP) < 0)
		RP = DEFLP;
	if (cgetstr(bp, "sd", &SD) < 0)
		SD = _PATH_DEFSPOOL;
	if (cgetstr(bp,"lo", &LO) < 0)
		LO = DEFLOCK;
	cgetstr(bp, "rm", &RM);
	if ((cp = checkremote()) != NULL)
		printf("Warning: %s\n", cp);

	/*
	 * If the format was `lprm -' and the user isn't the super-user,
	 *  then fake things to look like he said `lprm user'.
	 */
	if (users < 0) {
		if (getuid() == 0)
			all = 1;	/* all files in local queue */
		else {
			user[0] = person;
			users = 1;
		}
	}
	if (!strcmp(person, "-all")) {
		if (from == host)
			fatal("The login name \"-all\" is reserved");
		all = 1;	/* all those from 'from' */
		person = root;
	}

	PRIV_START;
	if (chdir(SD) < 0)
		fatal("cannot chdir to spool directory");
	if ((nitems = scandir(".", &files, iscf, NULL)) < 0)
		fatal("cannot access spool directory");
	PRIV_END;

	if (nitems) {
		/*
		 * Check for an active printer daemon.  If one is running
		 * and it is reading our file, kill it, then remove stuff.
		 * Lastly, restart the daemon if it is not (or no longer)
		 * running.
		 */
		if (lockchk(LO) && chk(current)) {
			PRIV_START;
			assassinated = kill(cur_daemon, SIGINT) == 0;
			PRIV_END;
			if (!assassinated)
				fatal("cannot kill printer daemon");
		}
		/*
		 * process the files
		 */
		for (i = 0; i < nitems; i++)
			process(files[i]->d_name);
	}
	rmremote();
	/*
	 * Restart the printer daemon if it was killed
	 */
	if (assassinated && !startdaemon(printer))
		fatal("cannot restart printer daemon");
	exit(0);
}

/*
 * Process a lock file: collect the pid of the active
 * daemon and the file name of the active spool entry.
 * Return boolean indicating existence of a lock file.
 */
static int
lockchk(char *s)
{
	FILE *fp = NULL;
	int fd, i, n;

	/* NOTE: lock file is owned by root, not the user. */
	PRIV_START;
	fd = safe_open(s, O_RDONLY|O_NOFOLLOW, 0);
	PRIV_END;
	if (fd < 0 || (fp = fdopen(fd, "r")) == NULL) {
		if (fd >= 0)
			close(fd);
		if (errno == EACCES)
			fatal("can't access lock file");
		else
			return(0);
	}
	if (!get_line(fp)) {
		(void)fclose(fp);
		return(0);		/* no daemon present */
	}
	cur_daemon = atoi(line);
	if (kill(cur_daemon, 0) < 0 && errno != EPERM) {
		(void)fclose(fp);
		return(0);		/* no daemon present */
	}
	for (i = 1; (n = fread(current, sizeof(char), sizeof(current), fp)) <= 0; i++) {
		if (i > 5) {
			n = 1;
			break;
		}
		sleep(i);
	}
	current[n-1] = '\0';
	(void)fclose(fp);
	return(1);
}

/*
 * Process a control file.
 */
static void
process(char *file)
{
	FILE *cfp = NULL;
	int fd;

	if (!chk(file))
		return;
	PRIV_START;
	fd = safe_open(file, O_RDONLY|O_NOFOLLOW, 0);
	PRIV_END;
	if (fd < 0 || (cfp = fdopen(fd, "r")) == NULL) {
		if (fd >= 0)
			close(fd);
		fatal("cannot open %s", file);
	}
	while (get_line(cfp)) {
		switch (line[0]) {
		case 'U':  /* unlink associated files */
			if (strchr(line+1, '/') || strncmp(line+1, "df", 2))
				break;
			do_unlink(line+1);
		}
	}
	(void)fclose(cfp);
	do_unlink(file);
}

static void
do_unlink(char *file)
{
	int	ret;

	if (from != host)
		printf("%s: ", host);
	PRIV_START;
	ret = unlink(file);
	PRIV_END;
	printf(ret ? "cannot dequeue %s\n" : "%s dequeued\n", file);
}

/*
 * Do the dirty work in checking
 */
static int
chk(char *file)
{
	int *r, n, fd;
	char **u, *cp;
	FILE *cfp = NULL;

	/*
	 * Check for valid cf file name (mostly checking current).
	 */
	if (strlen(file) < 7 || file[0] != 'c' || file[1] != 'f')
		return(0);

	if (all && (from == host || !strcmp(from, file+6)))
		return(1);

	/*
	 * get the owner's name from the control file.
	 */
	PRIV_START;
	fd = safe_open(file, O_RDONLY|O_NOFOLLOW, 0);
	PRIV_END;
	if (fd < 0 || (cfp = fdopen(fd, "r")) == NULL) {
		if (fd >= 0)
			close(fd);
		return(0);
	}
	while (get_line(cfp)) {
		if (line[0] == 'P')
			break;
	}
	(void)fclose(cfp);
	if (line[0] != 'P')
		return(0);

	if (users == 0 && requests == 0)
		return(!strcmp(file, current) && isowner(line+1, file));
	/*
	 * Check the request list
	 */
	for (n = 0, cp = file+3; isdigit((unsigned char)*cp); )
		n = n * 10 + (*cp++ - '0');
	for (r = requ; r < &requ[requests]; r++)
		if (*r == n && isowner(line+1, file))
			return(1);
	/*
	 * Check to see if it's in the user list
	 */
	for (u = user; u < &user[users]; u++)
		if (!strcmp(*u, line+1) && isowner(line+1, file))
			return(1);
	return(0);
}

/*
 * If root is removing a file on the local machine, allow it.
 * If root is removing a file from a remote machine, only allow
 * files sent from the remote machine to be removed.
 * Normal users can only remove the file from where it was sent.
 */
static int
isowner(char *owner, char *file)
{
	if (!strcmp(person, root) && (from == host || !strcmp(from, file+6)))
		return(1);
	if (!strcmp(person, owner) && !strcmp(from, file+6))
		return(1);
	if (from != host)
		printf("%s: ", host);
	printf("%s: Permission denied\n", file);
	return(0);
}

/*
 * Check to see if we are sending files to a remote machine. If we are,
 * then try removing files on the remote machine.
 */
static void
rmremote(void)
{
	char *cp;
	int i, rem;
	size_t n;
	char buf[BUFSIZ];

	if (!remote)
		return;	/* not sending to a remote machine */

	/*
	 * Flush stdout so the user can see what has been deleted
	 * while we wait (possibly) for the connection.
	 */
	fflush(stdout);

	/* the trailing space will be replaced with a newline later */
	n = snprintf(buf, sizeof(buf), "\5%s %s ", RP, all ? "-all" : person);
	if (n == -1 || n >= sizeof(buf))
		goto bad;
	cp = buf + n;
	for (i = 0; i < users; i++) {
		n = strlcpy(cp, user[i], sizeof(buf) - (cp - buf + 1));
		if (n >= sizeof(buf) - (cp - buf + 1))
			goto bad;
		cp += n;
		*cp++ = ' ';
	}
	*cp = '\0';
	for (i = 0; i < requests; i++) {
		n = snprintf(cp, sizeof(buf) - (cp - buf), "%d ", requ[i]);
		if (n == -1 || n >= sizeof(buf) - (cp - buf))
			goto bad;
		cp += n;
	}
	cp[-1] = '\n';		/* replace space with newline, leave the NUL */
	rem = getport(RM, 0);
	if (rem < 0) {
		if (from != host)
			printf("%s: ", host);
		printf("connection to %s is down\n", RM);
	} else {
		struct sigaction osa, nsa;

		memset(&nsa, 0, sizeof(nsa));
		nsa.sa_handler = alarmer;
		sigemptyset(&nsa.sa_mask);
		nsa.sa_flags = 0;
		(void)sigaction(SIGALRM, &nsa, &osa);
		alarm(wait_time);

		i = strlen(buf);
		if (write(rem, buf, i) != i)
			fatal("Lost connection");
		while ((i = read(rem, buf, sizeof(buf))) > 0)
			(void)fwrite(buf, 1, i, stdout);
		alarm(0);
		(void)sigaction(SIGALRM, &osa, NULL);
		(void)close(rem);
	}
	return;
bad:
	printf("remote buffer too large\n");
	return;
}

static void
alarmer(int s)
{
	/* nothing */
}

/*
 * Return 1 if the filename begins with 'cf'
 */
static int
iscf(const struct dirent *d)
{
	return(d->d_name[0] == 'c' && d->d_name[1] == 'f');
}
@


1.22
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.21 2013/11/24 21:32:32 deraadt Exp $	*/
d65 8
a72 3
static	void	do_unlink(char *);
static	void	alarmer(int);
static	int	lockchk(char *);
d78 1
a78 1
	int assasinated = 0;
d135 1
a135 1
			assasinated = kill(cur_daemon, SIGINT) == 0;
d137 1
a137 1
			if (!assasinated)
d150 1
a150 1
	if (assasinated && !startdaemon(printer))
d202 1
a202 1
void
d246 1
a246 1
int
d306 1
a306 1
int
d323 1
a323 1
void
d399 1
a399 1
int
@


1.21
log
@more ctype cleanups
checked by jca
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.20 2012/11/29 02:15:44 guenther Exp $	*/
a32 2
#include <sys/param.h>

d38 1
@


1.20
log
@Change scandir()'s 'select' argument from
	int (*)(struct dirent *)
to
	int (*)(const struct dirent *)
to match POSIX.

ok millert@@, ports check by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.19 2012/03/04 04:05:15 fgsch Exp $	*/
d282 1
a282 1
	for (n = 0, cp = file+3; isdigit(*cp); )
@


1.19
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.18 2009/10/27 23:59:51 deraadt Exp $	*/
d396 1
a396 1
iscf(struct dirent *d)
@


1.18
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.17 2007/04/07 21:12:12 stevesk Exp $	*/
d174 1
a174 1
	if (!getline(fp)) {
d214 1
a214 1
	while (getline(cfp)) {
d269 1
a269 1
	while (getline(cfp)) {
@


1.17
log
@trailing "\n" not needed in fatal(); ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.16 2003/06/02 23:36:53 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)rmjob.c	8.2 (Berkeley) 4/28/95";
#else
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.16 2003/06/02 23:36:53 millert Exp $";
#endif
#endif /* not lint */
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.15 2003/02/13 17:22:01 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.15 2003/02/13 17:22:01 millert Exp $";
d155 1
a155 1
		fatal("cannot restart printer daemon\n");
@


1.15
log
@Fix loop invariants in rmremote().  Reported by Arne Woerner in PR
3084; different fix used.  Hopefully this makes the code in question
easier to read.  deraadt@@ henric@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.14 2002/06/08 01:53:43 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.14 2002/06/08 01:53:43 millert Exp $";
@


1.14
log
@Remove setuid root from lp*.  lpr needs to be setuid daemon so the
files it creates are not owned by the user spooling them but the
others (lpc, lpq, lprm) can get away with setgid daemon.  lpd runs
as user daemon for most things, only changing its uid to 0 for
things that must be done as root.

For the time being, don't require connections to come from a reserved
port since lpq/lpr/lprm can't acquire that w/o setuid root.  In the
near future we will have a mechanism for select non-root processes
to grab reserved ports.

The upshot of this is that spool directories must be writable by
group daemon and the files within the spool dirs must be owned by
daemon.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.13 2002/05/20 23:13:50 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.13 2002/05/20 23:13:50 millert Exp $";
d336 1
d348 10
a357 4
	(void)snprintf(buf, sizeof(buf)-2, "\5%s %s", RP, all ? "-all" : person);
	cp = buf + strlen(buf);
	for (i = 0; i < users && cp-buf+1+strlen(user[i]) < sizeof buf - 2; i++) {
		cp += strlen(cp);
a358 1
		strcpy(cp, user[i]);
d360 6
a365 3
	for (i = 0; i < requests && cp-buf+10 < sizeof(buf) - 2; i++) {
		cp += strlen(cp);
		(void)sprintf(cp, " %d", requ[i]);
d367 1
a367 1
	strcat(cp, "\n");
d392 4
@


1.14.2.1
log
@Pull patch from current:
Fixed by millert@@
Fix loop invariants in rmremote(). Reported by Arne Woerner in PR 3084;
different fix used. Hopefully this makes the code in question easier to
read.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.14 2002/06/08 01:53:43 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.14 2002/06/08 01:53:43 millert Exp $";
a335 1
	size_t n;
d347 4
a350 10
	/* the trailing space will be replaced with a newline later */
	n = snprintf(buf, sizeof(buf), "\5%s %s ", RP, all ? "-all" : person);
	if (n == -1 || n >= sizeof(buf))
		goto bad;
	cp = buf + n;
	for (i = 0; i < users; i++) {
		n = strlcpy(cp, user[i], sizeof(buf) - (cp - buf + 1));
		if (n >= sizeof(buf) - (cp - buf + 1))
			goto bad;
		cp += n;
d352 1
d354 3
a356 6
	*cp = '\0';
	for (i = 0; i < requests; i++) {
		n = snprintf(cp, sizeof(buf) - (cp - buf), "%d ", requ[i]);
		if (n == -1 || n >= sizeof(buf) - (cp - buf))
			goto bad;
		cp += n;
d358 1
a358 1
	cp[-1] = '\n';		/* replace space with newline, leave the NUL */
a382 4
	return;
bad:
	printf("remote buffer too large\n");
	return;
@


1.13
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.12 2002/02/16 21:28:03 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.12 2002/02/16 21:28:03 millert Exp $";
d49 1
d80 1
d127 1
a127 1
	seteuid(euid);
d132 1
a132 1
	seteuid(uid);
d136 4
a139 3
		 * Check for an active printer daemon (in which case we
		 *  kill it if it is reading our file) then remove stuff
		 *  (after which we have to restart the daemon).
d142 1
a142 1
			seteuid(euid);
d144 1
a144 1
			seteuid(uid);
d165 1
a165 1
 *  daemon and the file name of the active spool entry.
d168 1
a168 1
int
d171 2
a172 2
	FILE *fp;
	int i, n;
d174 7
a180 2
	seteuid(euid);
	if ((fp = fopen(s, "r")) == NULL) {
a185 1
	seteuid(uid);
d213 2
a214 1
	FILE *cfp;
d218 6
a223 2
	seteuid(euid);
	if ((cfp = fopen(file, "r")) == NULL)
d225 1
a225 1
	seteuid(uid);
d245 1
a245 1
	seteuid(euid);
d247 1
a247 1
	seteuid(uid);
d257 1
a257 1
	int *r, n;
d259 1
a259 1
	FILE *cfp;
d273 6
a278 2
	seteuid(euid);
	if ((cfp = fopen(file, "r")) == NULL)
d280 1
a280 1
	seteuid(uid);
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
a2 1
/*	$OpenBSD: rmjob.c,v 1.11 2001/08/30 17:38:13 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.11 2001/08/30 17:38:13 millert Exp $";
a76 2
extern uid_t	uid, euid;		/* real and effective user id's */

d78 1
d81 1
a81 1
rmjob()
d94 1
a94 1
	if (cgetstr(bp, "lp", &LP) < 0)
d103 1
a103 1
	if ((cp = checkremote()))
d166 1
a166 2
lockchk(s)
	char *s;
d180 1
a180 1
		(void) fclose(fp);
d185 1
a185 1
		(void) fclose(fp);
d196 1
a196 1
	(void) fclose(fp);
d204 1
a204 2
process(file)
	char *file;
d222 1
a222 1
	(void) fclose(cfp);
d227 1
a227 2
do_unlink(file)
	char *file;
d243 1
a243 2
chk(file)
	char *file;
d269 1
a269 1
	(void) fclose(cfp);
d299 1
a299 2
isowner(owner, file)
	char *owner, *file;
d316 1
a316 1
rmremote()
d340 1
a340 1
		(void) sprintf(cp, " %d", requ[i]);
d349 9
d362 4
a365 2
			(void) fwrite(buf, 1, i, stdout);
		(void) close(rem);
d369 6
d379 1
a379 2
iscf(d)
	struct dirent *d;
@


1.12.2.1
log
@Errata #023: buffer overflow in lprm
Fix (millert):
Fix loop invariants in rmremote(). Reported by Arne Woerner in PR 3084;
different fix used. Hopefully this makes the code in question easier to
read.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.12 2002/02/16 21:28:03 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.12 2002/02/16 21:28:03 millert Exp $";
a324 1
	size_t n;
d336 4
a339 10
	/* the trailing space will be replaced with a newline later */
	n = snprintf(buf, sizeof(buf), "\5%s %s ", RP, all ? "-all" : person);
	if (n == -1 || n >= sizeof(buf))
		goto bad;
	cp = buf + n;
	for (i = 0; i < users; i++) {
		n = strlcpy(cp, user[i], sizeof(buf) - (cp - buf + 1));
		if (n >= sizeof(buf) - (cp - buf + 1))
			goto bad;
		cp += n;
d341 1
d343 3
a345 6
	*cp = '\0';
	for (i = 0; i < requests; i++) {
		n = snprintf(cp, sizeof(buf) - (cp - buf), "%d ", requ[i]);
		if (n == -1 || n >= sizeof(buf) - (cp - buf))
			goto bad;
		cp += n;
d347 1
a347 1
	cp[-1] = '\n';		/* replace space with newline, leave the NUL */
a360 4
	return;
bad:
	printf("remote buffer too large\n");
	return;
@


1.11
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.10 2001/08/30 17:25:35 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: rmjob.c,v 1.10 2001/08/30 17:25:35 millert Exp $";
d78 1
a78 1
static	void	do_unlink __P((char *));
@


1.10
log
@Better buffer lengths (MAXFOO and FOO_MAX) based on a patch from
ianm@@cit.uws.edu.au.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.9 1998/04/22 14:44:08 deraadt Exp $	*/
d38 1
a38 1
static char sccsid[] = "@@(#)rmjob.c	8.2 (Berkeley) 4/28/95";
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.9 1998/04/22 14:44:08 deraadt Exp $";
d83 1
a83 1
	register int i, nitems;
d169 2
a170 2
	register FILE *fp;
	register int i, n;
d249 2
a250 2
	register int *r, n;
	register char **u, *cp;
d323 2
a324 2
	register char *cp;
	register int i, rem;
@


1.9
log
@buf mishandling; rotel@@indigo.ie
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.8 1997/07/23 22:12:12 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.8 1997/07/23 22:12:12 deraadt Exp $";
d74 1
a74 1
static char	current[40];		/* active control file name */
@


1.8
log
@1 byte oflows; millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.7 1997/07/18 20:57:27 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.7 1997/07/18 20:57:27 millert Exp $";
d336 3
a338 3
	(void)snprintf(buf, sizeof(buf), "\5%s %s", RP, all ? "-all" : person);
	cp = buf;
	for (i = 0; i < users && cp-buf+1+strlen(user[i]) < sizeof buf; i++) {
d343 1
a343 1
	for (i = 0; i < requests && cp-buf+10 < sizeof(buf) - 1; i++) {
@


1.8.4.1
log
@update release: buf mishandling; rotel@@indigo.ie
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.9 1998/04/22 14:44:08 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.9 1998/04/22 14:44:08 deraadt Exp $";
d336 3
a338 3
	(void)snprintf(buf, sizeof(buf)-2, "\5%s %s", RP, all ? "-all" : person);
	cp = buf + strlen(buf);
	for (i = 0; i < users && cp-buf+1+strlen(user[i]) < sizeof buf - 2; i++) {
d343 1
a343 1
	for (i = 0; i < requests && cp-buf+10 < sizeof(buf) - 2; i++) {
@


1.7
log
@Be extra careful when unlinking data file to only remove a file is
it is in the current dir and df*.  From imp@@openbsd.org.
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.6 1997/07/17 09:14:11 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.6 1997/07/17 09:14:11 deraadt Exp $";
d343 1
a343 1
	for (i = 0; i < requests && cp-buf+10 < sizeof buf; i++) {
@


1.6
log
@Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rmjob.c,v 1.5 1997/01/17 16:11:37 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: rmjob.c,v 1.5 1997/01/17 16:11:37 millert Exp $";
d219 2
@


1.5
log
@Add OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: $";
d103 1
a103 1
	if (cp = checkremote())
@


1.4
log
@proactive bounds checking; help from millert
@
text
@d1 2
d37 1
d39 3
@


1.3
log
@Integrated 4.4Lite2 source
Fixed potential problem pointed out by bitblt
@
text
@d330 1
a330 1
	for (i = 0; i < users; i++) {
d335 1
a335 1
	for (i = 0; i < requests; i++) {
@


1.2
log
@lprm failed to delete all files; from thomas@@cevis.uni-Bremen.de; netbsd pr#1756
@
text
@d35 1
a35 1
static char sccsid[] = "@@(#)rmjob.c	8.1 (Berkeley) 6/6/93";
d319 1
a319 1
	if (!sendtorem)
d340 1
a340 1
	rem = getport(RM);
@


1.1
log
@Initial revision
@
text
@d213 1
a213 1
			do_unlink(file);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
