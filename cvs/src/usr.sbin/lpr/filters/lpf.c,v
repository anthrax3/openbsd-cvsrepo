head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.24
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.20
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.18
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.16
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	822YD61EeG0Xl9Na;

1.12
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.14.20.52.20;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.27.16.36.02;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.09.03.56.29;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.24.08.04.55;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.07.19.07.11.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.16.12.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.01.06.11.06.45;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@clean up flags++ instances around getopt()
ok florian
@
text
@/*	$OpenBSD: lpf.c,v 1.12 2009/10/27 23:59:52 deraadt Exp $	*/
/*	$NetBSD: lpf.c,v 1.8 2000/04/29 00:12:32 abs Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * 	filter which reads the output of nroff and converts lines
 *	with ^H's to overwritten lines.  Thus this works like 'ul'
 *	but is much better: it can handle more than 2 overwrites
 *	and it is written with some style.
 */

#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#define MAXWIDTH  132
#define MAXREP    10

char	buf[MAXREP][MAXWIDTH];
int	maxcol[MAXREP] = {-1};
int	lineno;
int	width = 132;	/* default line length */
int	length = 66;	/* page length */
int	indent;		/* indentation length */
int	npages = 1;
int	literal;	/* print control characters */
int	onlcr;		/* map nl->cr-nl */
char	*name;		/* user's login name */
char	*host;		/* user's machine name */
char	*acctfile;	/* accounting information file */

__dead void usage(void);

int
main(int argc, char **argv) 
{
	FILE *p = stdin, *o = stdout;
	int i, col;
	char *cp;
	int done, linedone, maxrep, ch;
	char *limit;

	while ((ch = getopt(argc, argv, "crh:i:j:l:n:w:")) != -1) {
		switch (ch) {
		case 'n':
			name = optarg;
			break;
		case 'h':
			host = optarg;
			break;
		case 'w':
			if ((i = atoi(optarg)) > 0 && i <= MAXWIDTH)
				width = i;
			break;
		case 'l':
			length = atoi(optarg);
			break;
		case 'i':
			indent = atoi(optarg);
			break;
		case 'r':	/* map nl->cr-nl */
			onlcr = 1;
			break;
		case 'c':	/* Print control chars */
			literal++;
			break;
		case 'j':	/* ignore job name */
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;
	if (argc)
		acctfile = *argv;

	memset(buf, ' ',  sizeof(buf));
	done = 0;
	
	while (!done) {
		col = indent;
		maxrep = -1;
		linedone = 0;
		while (!linedone) {
			switch (ch = getc(p)) {
			case EOF:
				linedone = done = 1;
				ch = '\n';
				break;

			case '\f':
				lineno = length;
			case '\n':
				if (maxrep < 0)
					maxrep = 0;
				linedone = 1;
				break;

			case '\b':
				if (--col < indent)
					col = indent;
				break;

			case '\r':
				col = indent;
				break;

			case '\t':
				col = ((col - indent) | 07) + indent + 1;
				break;

			case '\031':
				/*
				 * lpd needs to use a different filter to
				 * print data so stop what we are doing and
				 * wait for lpd to restart us.
				 */
				if ((ch = getchar()) == '\1') {
					fflush(stdout);
					kill(getpid(), SIGSTOP);
					break;
				} else {
					ungetc(ch, stdin);
					ch = '\031';
				}

			default:
				if (col >= width || (!literal && ch < ' ')) {
					col++;
					break;
				}
				cp = &buf[0][col];
				for (i = 0; i < MAXREP; i++) {
					if (i > maxrep)
						maxrep = i;
					if (*cp == ' ') {
						*cp = ch;
						if (col > maxcol[i])
							maxcol[i] = col;
						break;
					}
					cp += MAXWIDTH;
				}
				col++;
				break;
			}
		}

		/* print out lines */
		for (i = 0; i <= maxrep; i++) {
			for (cp = buf[i], limit = cp+maxcol[i]; cp <= limit;) {
				putc(*cp, o);
				*cp++ = ' ';
			}
			if (i < maxrep)
				putc('\r', o);
			else {
				if (onlcr)
					putc('\r', o);
				putc(ch, o);
			}
			if (++lineno >= length) {
				fflush(o);
				npages++;
				lineno = 0;
			}
			maxcol[i] = -1;
		}
	}
	if (lineno) {		/* be sure to end on a page boundary */
		putchar('\f');
		npages++;
	}
	if (name && acctfile && access(acctfile, 02) >= 0 &&
	    freopen(acctfile, "a", stdout) != NULL) {
		printf("%7.2f\t%s:%s\n", (float)npages, host, name);
	}
	exit(0);
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-c] [-r] [-h host] [-i indent] [-l length]"
	    " [-n name] [-w width] [acctfile]\n", __progname);
	exit(1);
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.11 2004/04/14 20:52:20 millert Exp $	*/
d92 1
a92 1
			onlcr++;
@


1.11
log
@Pass the job name to the input filter via the -j flag.  Some filters
(like foomatic) expect to be able to pass information from lpr via
the job name.  OK beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.10 2003/06/02 23:36:53 millert Exp $	*/
a31 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)lpf.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.10 2003/06/02 23:36:53 millert Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.9 2003/03/27 16:36:02 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.9 2003/03/27 16:36:02 millert Exp $";
d87 1
a87 1
	while ((ch = getopt(argc, argv, "crh:i:l:n:w:")) != -1) {
d110 2
@


1.9
log
@Fix a bug introduced when getopt() support was added; -h takes an
argument but -r does not.  These were reversed in the getopt() string.
Fix from Carson Harding
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.8 2002/06/09 03:56:29 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.8 2002/06/09 03:56:29 millert Exp $";
@


1.8
log
@Convert remaining K&R function headers to ANSI
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.7 2002/05/20 23:13:50 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.7 2002/05/20 23:13:50 millert Exp $";
d91 1
a91 1
	while ((ch = getopt(argc, argv, "chr:i:l:n:w:")) != -1) {
@


1.7
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.6 2002/02/24 08:04:55 pvalchev Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.6 2002/02/24 08:04:55 pvalchev Exp $";
d83 1
a83 3
main(argc, argv) 
	int argc;
	char *argv[];
@


1.6
log
@getc, getchar, etc return an int, not a char
@
text
@d1 2
a2 1
/*	$OpenBSD: lpf.c,v 1.5 2001/08/30 17:38:13 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.5 2001/08/30 17:38:13 millert Exp $";
a58 1
#include <unistd.h>
d61 2
d80 2
d93 27
a119 36
	while (--argc) {
		if (*(cp = *++argv) == '-') {
			switch (cp[1]) {
			case 'n':
				argc--;
				name = *++argv;
				break;

			case 'h':
				argc--;
				host = *++argv;
				break;

			case 'w':
				if ((i = atoi(&cp[2])) > 0 && i <= MAXWIDTH)
					width = i;
				break;

			case 'l':
				length = atoi(&cp[2]);
				break;

			case 'i':
				indent = atoi(&cp[2]);
				break;

			case 'r':	/* map nl->cr-nl */
				onlcr++;
				break;

			case 'c':	/* Print control chars */
				literal++;
				break;
			}
		} else
			acctfile = cp;
d121 4
d126 1
a126 1
	for (cp = buf[0], limit = buf[MAXREP]; cp < limit; *cp++ = ' ');
d177 1
a177 1
				if ((col >= width) || (!literal && ch < ' ')) {
d228 10
@


1.5
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.4 1997/07/19 07:11:42 deraadt Exp $	*/
d46 1
a46 1
static const char rcsid[] = "$OpenBSD: lpf.c,v 1.4 1997/07/19 07:11:42 deraadt Exp $";
d86 2
a87 2
	int done, linedone, maxrep;
	char ch, *limit;
@


1.4
log
@Wall cleanup; people running lpd should test!
@
text
@d1 1
a1 1
/*	$OpenBSD: lpf.c,v 1.3 1997/01/17 16:12:33 millert Exp $	*/
d37 1
a37 1
static char copyright[] =
d44 1
a44 1
static char sccsid[] = "@@(#)lpf.c	8.1 (Berkeley) 6/6/93";
d46 1
a46 1
static char rcsid[] = "$OpenBSD: lpf.c,v 1.3 1997/01/17 16:12:33 millert Exp $";
a54 2
 *	modified by kls to use register references instead of arrays
 *	to try to gain a little speed.
d83 3
a85 3
	register FILE *p = stdin, *o = stdout;
	register int i, col;
	register char *cp;
@


1.3
log
@Add OpenBSD tags (was in wrong dir for previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: $";
d180 1
a180 1
				if (col >= width || !literal && ch < ' ') {
@


1.2
log
@add -r switch for onlcr translation
@
text
@d1 2
d43 1
d45 3
@


1.1
log
@Initial revision
@
text
@d69 1
d111 4
d203 3
a205 1
			else
d207 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
