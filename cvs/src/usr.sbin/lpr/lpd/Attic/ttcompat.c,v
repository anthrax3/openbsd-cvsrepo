head	1.8;
access;
symbols
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.12.10.16.38.04;	author naddy;	state dead;
branches;
next	1.7;

1.7
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.16.12.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.16.20.04.49;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove the printcap fc, fs, xc, xs capabilities from lpd that were used
to configure a tty by poking magic numbers into sgtty.  If needed, the
ms capability, which uses symbolic stty modes, can be used instead.
Better description of ms from FreeBSD.
ok beck@@, deraadt@@, jmc@@ (man page)
@
text
@/*	$OpenBSD: ttcompat.c,v 1.7 2009/10/27 23:59:52 deraadt Exp $	*/
/*	$NetBSD: ttcompat.c,v 1.9 1995/11/15 22:50:00 pk Exp $	*/

/*
 * Copyright (c) 1995
 *	The Regents of the University of California.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * ttcompat.c -- convert sgtty flags to termios
 *	originally from /sys/kern/tty_compat.c
 */

#include <sys/param.h>
#include <sys/types.h>

#include <unistd.h>
#include <sys/ioctl_compat.h>
#include <termios.h>
#include <syslog.h>
#include <fcntl.h>
#include <dirent.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "extern.h"

/* Macros to clear/set/test flags. */
#define	SET(t, f)	(t) |= (f)
#define	CLR(t, f)	(t) &= ~(f)
#define	ISSET(t, f)	((t) & (f))

static int	sttygetoflags(struct termios *);
static void	sttysetoflags(struct termios *, int);

static int
sttygetoflags(struct termios *tp)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t cflag = tp->c_cflag;
	int flags = 0;

	if (ISSET(cflag, PARENB)) {
		if (ISSET(iflag, INPCK)) {
			if (ISSET(cflag, PARODD))
				SET(flags, ODDP);
			else
				SET(flags, EVENP);
		} else
			SET(flags, EVENP|ODDP);
	}
	if (ISSET(cflag, CSIZE) == CS8) {
		if (!ISSET(iflag, ISTRIP))
			SET(flags, PASS8);
		if (!ISSET(oflag, OPOST))
			SET(flags, LITOUT);
	}
	if (ISSET(lflag, XCASE))
		SET(flags, LCASE);

	if (!ISSET(lflag, ICANON)) {
		/* fudge */
		if (ISSET(iflag, IXON) || ISSET(lflag, ISIG|IEXTEN) ||
		    ISSET(cflag, PARENB))
			SET(flags, CBREAK);
		else
			SET(flags, RAW);
	}

	return (flags);
}

static void
sttysetoflags(struct termios *tp, int flags)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t cflag = tp->c_cflag;

	if (ISSET(flags, RAW)) {
		iflag &= IXOFF;
		CLR(lflag, ISIG|ICANON|IEXTEN|XCASE);
		CLR(cflag, PARENB);
	} else {
		SET(iflag, BRKINT|IXON|IMAXBEL);
		SET(lflag, ISIG|IEXTEN);
		if (ISSET(flags, CBREAK))
			CLR(lflag, ICANON);
		else
			SET(lflag, ICANON);
		if (ISSET(iflag, IUCLC) && ISSET(oflag, OLCUC))
			SET(lflag, XCASE);
		switch (ISSET(flags, ANYP)) {
		case 0:
			CLR(cflag, PARENB);
			break;
		case ANYP:
			SET(cflag, PARENB);
			CLR(iflag, INPCK);
			break;
		case EVENP:
			SET(cflag, PARENB);
			SET(iflag, INPCK);
			CLR(cflag, PARODD);
			break;
		case ODDP:
			SET(cflag, PARENB);
			SET(iflag, INPCK);
			SET(cflag, PARODD);
			break;
		}
	}

	if (ISSET(flags, RAW|LITOUT|PASS8)) {
		CLR(cflag, CSIZE);
		SET(cflag, CS8);
		if (!ISSET(flags, RAW|PASS8))
			SET(iflag, ISTRIP);
		else
			CLR(iflag, ISTRIP);
		if (!ISSET(flags, RAW|LITOUT))
			SET(oflag, OPOST);
		else
			CLR(oflag, OPOST);
	} else {
		CLR(cflag, CSIZE);
		SET(cflag, CS7);
		SET(iflag, ISTRIP);
		SET(oflag, OPOST);
	}

	tp->c_iflag = iflag;
	tp->c_oflag = oflag;
	tp->c_lflag = lflag;
	tp->c_cflag = cflag;
}

void
sttyclearflags(struct termios *tp, int flags)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t cflag = tp->c_cflag;
	int oflags = sttygetoflags(tp) & ~flags;

	if (ISSET(flags, TANDEM))
		CLR(iflag, IXOFF);
	if (ISSET(flags, ECHO))
		CLR(lflag, ECHO);
	if (ISSET(flags, CRMOD)) {
		CLR(iflag, ICRNL);
		CLR(oflag, ONLCR);
	}
	if (ISSET(flags, LCASE)) {
		CLR(iflag, IUCLC);
		CLR(oflag, OLCUC);
		CLR(lflag, XCASE);
	}
	if (ISSET(flags, XTABS))
		CLR(oflag, OXTABS);


	tp->c_iflag = iflag;
	tp->c_oflag = oflag;
	tp->c_lflag = lflag;
	tp->c_cflag = cflag;

	sttysetoflags(tp, oflags);
}

void
sttysetflags(struct termios *tp, int flags)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t cflag = tp->c_cflag;
	int oflags = sttygetoflags(tp) | flags;

	if (ISSET(flags, TANDEM))
		SET(iflag, IXOFF);
	if (ISSET(flags, ECHO))
		SET(lflag, ECHO);
	if (ISSET(flags, CRMOD)) {
		SET(iflag, ICRNL);
		SET(oflag, ONLCR);
	}
	if (ISSET(flags, LCASE)) {
		SET(iflag, IUCLC);
		SET(oflag, OLCUC);
		SET(lflag, XCASE);
	}
	if (ISSET(flags, XTABS))
		SET(oflag, OXTABS);

	tp->c_iflag = iflag;
	tp->c_oflag = oflag;
	tp->c_lflag = lflag;
	tp->c_cflag = cflag;

	sttysetoflags(tp, oflags);
}

void
sttyclearlflags(struct termios *tp, int flags)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t cflag = tp->c_cflag;
	int oflags = sttygetoflags(tp) & ~flags;

	/* Nothing we can do with CRTBS. */
	if (ISSET(flags, PRTERA))
		CLR(lflag, ECHOPRT);
	if (ISSET(flags, CRTERA))
		CLR(lflag, ECHOE);
	/* Nothing we can do with TILDE. */
	if (ISSET(flags, MDMBUF))
		CLR(cflag, MDMBUF);
	if (ISSET(flags, NOHANG))
		SET(cflag, HUPCL);
	if (ISSET(flags, CRTKIL))
		CLR(lflag, ECHOKE);
	if (ISSET(flags, CTLECH))
		CLR(lflag, ECHOCTL);
	if (ISSET(flags, DECCTQ))
		SET(iflag, IXANY);
	CLR(lflag, ISSET(flags, TOSTOP|FLUSHO|PENDIN|NOFLSH));

	tp->c_iflag = iflag;
	tp->c_oflag = oflag;
	tp->c_lflag = lflag;
	tp->c_cflag = cflag;

	sttysetoflags(tp, oflags);
}

void
sttysetlflags(struct termios *tp, int flags)
{
	tcflag_t iflag = tp->c_iflag;
	tcflag_t oflag = tp->c_oflag;
	tcflag_t lflag = tp->c_lflag;
	tcflag_t cflag = tp->c_cflag;
	int oflags = sttygetoflags(tp) | flags;

	/* Nothing we can do with CRTBS. */
	if (ISSET(flags, PRTERA))
		SET(lflag, ECHOPRT);
	if (ISSET(flags, CRTERA))
		SET(lflag, ECHOE);
	/* Nothing we can do with TILDE. */
	if (ISSET(flags, MDMBUF))
		SET(cflag, MDMBUF);
	if (ISSET(flags, NOHANG))
		CLR(cflag, HUPCL);
	if (ISSET(flags, CRTKIL))
		SET(lflag, ECHOKE);
	if (ISSET(flags, CTLECH))
		SET(lflag, ECHOCTL);
	if (ISSET(flags, DECCTQ))
		CLR(iflag, IXANY);
	SET(lflag, ISSET(flags, TOSTOP|FLUSHO|PENDIN|NOFLSH));

	tp->c_iflag = iflag;
	tp->c_oflag = oflag;
	tp->c_lflag = lflag;
	tp->c_cflag = cflag;

	sttysetoflags(tp, oflags);
}
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: ttcompat.c,v 1.6 2003/06/02 23:36:53 millert Exp $	*/
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ttcompat.c,v 1.5 2002/05/20 23:13:50 millert Exp $	*/
a37 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: ttcompat.c,v 1.5 2002/05/20 23:13:50 millert Exp $";
#endif /* not lint */
@


1.5
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: ttcompat.c,v 1.4 2001/08/30 17:38:13 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: ttcompat.c,v 1.4 2001/08/30 17:38:13 millert Exp $";
@


1.4
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 2
a2 1
/*	$OpenBSD: ttcompat.c,v 1.3 1997/01/17 16:12:43 millert Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: ttcompat.c,v 1.3 1997/01/17 16:12:43 millert Exp $";
d67 3
d71 1
a71 2
sttygetoflags(tp)
	struct termios *tp;
d110 1
a110 3
sttysetoflags(tp, flags)
	struct termios *tp;
	int flags;
d176 1
a176 3
sttyclearflags(tp, flags)
	struct termios *tp;
	int flags;
d210 1
a210 3
sttysetflags(tp, flags)
	struct termios *tp;
	int flags;
d243 1
a243 3
sttyclearlflags(tp, flags)
	struct termios *tp;
	int flags;
d278 1
a278 3
sttysetlflags(tp, flags)
	struct termios *tp;
	int flags;
@


1.3
log
@Add OpenBSD tags (was in wrong dir for previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: $";
d70 5
a74 5
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t cflag = tp->c_cflag;
	register int flags = 0;
d111 4
a114 4
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t cflag = tp->c_cflag;
d179 5
a183 5
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t cflag = tp->c_cflag;
	register int oflags = sttygetoflags(tp) & ~flags;
d215 5
a219 5
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t cflag = tp->c_cflag;
	register int oflags = sttygetoflags(tp) | flags;
d250 5
a254 5
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t cflag = tp->c_cflag;
	register int oflags = sttygetoflags(tp) & ~flags;
d287 5
a291 5
	register tcflag_t iflag = tp->c_iflag;
	register tcflag_t oflag = tp->c_oflag;
	register tcflag_t lflag = tp->c_lflag;
	register tcflag_t cflag = tp->c_cflag;
	register int oflags = sttygetoflags(tp) | flags;
@


1.2
log
@Implement more tty flags for better portability from other systems:

	XCASE - canonical input/output processing
	IUCLC - translate uppercase to lowercase on input
	OLCUC - translate lowercase to uppercase on output
	OCRNL - translate carriage return to newline on output
	ONOCR - do not output carriage return at column 0
	ONLRET - newline performs carriage return function

In addition the tty compatibility interface supports LCASE properly.

Look at termios(4) for a more complete description of the above flags.
@
text
@d1 2
d41 4
@


1.1
log
@Initial revision
@
text
@d85 2
d112 1
a112 1
		CLR(lflag, ISIG|ICANON|IEXTEN);
d121 2
d187 5
d222 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
