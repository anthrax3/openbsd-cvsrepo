head	1.26;
access;
symbols
	OPENBSD_5_8:1.24.0.6
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.10
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.18
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.16
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.14
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.12
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.2
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2015.11.17.15.22.55;	author deraadt;	state dead;
branches;
next	1.25;
commitid	cynwnQHKmT0agONi;

1.25
date	2015.08.20.22.46.32;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	bryBnuht7UhcZOWL;

1.24
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	822YD61EeG0Xl9Na;

1.23
date	2015.01.16.14.36.44;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	WIRzRs41DqWMpnqg;

1.22
date	2014.11.18.20.54.28;	author krw;	state Exp;
branches;
next	1.21;
commitid	yCis8OrOsfixbKpI;

1.21
date	2014.01.22.09.50.51;	author jsg;	state Exp;
branches;
next	1.20;

1.20
date	2013.11.24.21.32.32;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2009.10.27.23.59.52;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2007.09.02.15.19.39;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.23.36.53;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.13.09.09.48;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.14.21.35.01;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.08.01.53.43;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.20.23.13.50;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.28.04;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.23.03.58.19;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.30.17.38.13;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.07.17.09.08.43;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.01.17.16.12.50;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.11.03.23.24.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.05.15.13.41.59;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	96.05.06.06.41.13;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.05.04.11.53.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.40.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.01.11.17.41.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@off to the bitbucket in the sky
@
text
@/*	$OpenBSD: pac.c,v 1.25 2015/08/20 22:46:32 deraadt Exp $ */
/*	$NetBSD: pac.c,v 1.14 2000/04/27 13:40:18 msaitoh Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Do Printer accounting summary.
 * Currently, usage is
 *	pac [-Pprinter] [-pprice] [-s] [-r] [-c] [-m] [user ...]
 * to print the usage information for the named people.
 */

#include <ctype.h>
#include <signal.h>
#include <dirent.h>
#include <err.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <stdio.h>
#include <string.h>

#include "lp.h"
#include "lp.local.h"

static char	*acctfile;	/* accounting file (input data) */
static int	 allflag = 1;	/* Get stats on everybody */
static int	 errs;
static int	 hcount;	/* Count of hash entries */
static int	 mflag = 0;	/* disregard machine names */
static int	 pflag = 0;	/* 1 if -p on cmd line */
static float	 price = 0.02;	/* cost per page (or what ever) */
static long	 price100;	/* per-page cost in 100th of a cent */
static int	 reverse;	/* Reverse sort order */
static int	 sort;		/* Sort by cost */
static char	*sumfile;	/* summary file */
static int	 summarize;	/* Compress accounting file */

volatile sig_atomic_t gotintr;

/*
 * Grossness follows:
 *  Names to be accumulated are hashed into the following
 *  table.
 */

#define	HSHSIZE	97			/* Number of hash buckets */

struct hent {
	struct	hent *h_link;		/* Forward hash link */
	char	*h_name;		/* Name of this user */
	float	h_feetpages;		/* Feet or pages of paper */
	int	h_count;		/* Number of runs */
};

static struct	hent	*hashtab[HSHSIZE];	/* Hash table proper */

static void	account(FILE *);
static int	chkprinter(const char *);
static void	dumpit(void);
static int	hash(const char *);
static struct	hent *enter(const char *);
static struct	hent *lookup(const char *);
static int	qucmp(const void *, const void *);
static void	rewrite(void);
__dead void	usage(void);

int
main(int argc, char **argv)
{
	FILE *acct;
	int ch;

	/* these aren't actually used in pac(1) */
	effective_uid = geteuid();
	real_uid = getuid();
	effective_gid = getegid();
	real_gid = getgid();

	while ((ch = getopt(argc, argv, "P:p:scmr")) != -1) {
		switch (ch) {
		case 'P':
			/*
			 * Printer name.
			 */
			printer = optarg;
			continue;

		case 'p':
			/*
			 * get the price.
			 */
			price = atof(optarg);
			pflag = 1;
			continue;

		case 's':
			/*
			 * Summarize and compress accounting file.
			 */
			summarize = 1;
			continue;

		case 'c':
			/*
			 * Sort by cost.
			 */
			sort = 1;
			continue;

		case 'm':
			/*
			 * disregard machine names for each user
			 */
			mflag = 1;
			continue;

		case 'r':
			/*
			 * Reverse sorting order.
			 */
			reverse = 1;
			continue;

		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	/*
	 * If there are any arguments left, they're names of users
	 * we want to print info for. In that case, put them in the hash
	 * table and unset allflag.
	 */
	for( ; argc > 0; argc--, argv++) {
		(void)enter(*argv);
		allflag = 0;
	}

	if (printer == NULL && (printer = getenv("PRINTER")) == NULL)
		printer = DEFLP;
	if (!chkprinter(printer))
		errx(2, "unknown printer: %s", printer);

	if ((acct = fopen(acctfile, "r")) == NULL)
		err(1, "%s", acctfile);
	account(acct);
	fclose(acct);
	if ((acct = fopen(sumfile, "r")) != NULL) {
		account(acct);
		fclose(acct);
	}
	if (summarize)
		rewrite();
	else
		dumpit();
	exit(errs);
}

/*
 * Read the entire accounting file, accumulating statistics
 * for the users that we have in the hash table.  If allflag
 * is set, then just gather the facts on everyone.
 * Note that we must accommodate both the active and summary file
 * formats here.
 * The Format of the accounting file is:
 *     feet_per_page   [runs_count] [hostname:]username
 * Some software relies on whitespace between runs_count and hostname:username
 * being optional (such as Ghostscript's unix-lpr.sh).
 *
 * Host names are ignored if the -m flag is present.
 */
static void
account(FILE *acct)
{
	char linebuf[BUFSIZ];
	double t;
	long l;
	char *cp, *cp2, *ep;
	struct hent *hp;
	int ic;

	while (fgets(linebuf, sizeof(linebuf), acct) != NULL) {
		cp = linebuf;
		while (isspace((unsigned char)*cp))
			cp++;

		/* get t, feet_per_page */
		errno = 0;
		t = strtod(cp, &ep);
		if (!isspace((unsigned char)*ep) || errno == ERANGE)
			continue;

		/* get ic, runs_count (optional) */
		for (cp = ep + 1; isspace((unsigned char)*cp); )
			cp++;
		l = strtol(cp, &ep, 10);
		if (cp == ep)
			l = 0;		/* runs_count not specified */
		else if (l < 0 || l >= INT_MAX)
			continue;
		ic = (int)l;

		/* get [hostname:]username */
		for (cp = ep; isspace((unsigned char)*cp); cp++)
			;
		for (cp2 = cp; *cp2 && !isspace((unsigned char)*cp2); cp2++)
			;
		*cp2 = '\0';
		/* if -m was specified, don't use the hostname part */
		if (mflag && (cp2 = strchr(cp, ':')) != NULL)
		    cp = cp2 + 1;

		hp = lookup(cp);
		if (hp == NULL) {
			if (!allflag)
				continue;
			hp = enter(cp);
		}
		hp->h_feetpages += t;
		if (ic)
			hp->h_count += ic;
		else
			hp->h_count++;
	}
}

/*
 * Sort the hashed entries by name or footage
 * and print it all out.
 */
static void
dumpit(void)
{
	struct hent **base;
	struct hent *hp, **ap;
	int hno, c, runs;
	float feet;

	hp = hashtab[0];
	hno = 1;
	base = calloc(hcount, sizeof(hp));
	if (base == NULL)
		err(1, NULL);
	for (ap = base, c = hcount; c--; ap++) {
		while (hp == NULL)
			hp = hashtab[hno++];
		*ap = hp;
		hp = hp->h_link;
	}
	qsort(base, hcount, sizeof hp, qucmp);
	printf("  Login               pages/feet   runs    price\n");
	feet = 0.0;
	runs = 0;
	for (ap = base, c = hcount; c--; ap++) {
		hp = *ap;
		runs += hp->h_count;
		feet += hp->h_feetpages;
		printf("%-24s %7.2f %4d   $%6.2f\n", hp->h_name,
		    hp->h_feetpages, hp->h_count, hp->h_feetpages * price);
	}
	if (allflag) {
		printf("\n");
		printf("%-24s %7.2f %4d   $%6.2f\n", "total", feet, 
		    runs, feet * price);
	}

	free(base);
}

/*
 * Rewrite the summary file with the summary information we have accumulated.
 */
static void
rewrite(void)
{
	struct hent *hp;
	int i;
	FILE *acctf;

	if ((acctf = fopen(sumfile, "w")) == NULL) {
		warn("%s", sumfile);
		errs++;
		return;
	}
	for (i = 0; i < HSHSIZE; i++) {
		hp = hashtab[i];
		while (hp != NULL) {
			fprintf(acctf, "%7.2f\t%s\t%d\n", hp->h_feetpages,
			    hp->h_name, hp->h_count);
			hp = hp->h_link;
		}
	}
	fflush(acctf);
	if (ferror(acctf)) {
		warn("%s", sumfile);
		errs++;
	}
	fclose(acctf);
	if ((acctf = fopen(acctfile, "w")) == NULL)
		warn("%s", acctfile);
	else
		fclose(acctf);
}

/*
 * Hashing routines.
 */

/*
 * Enter the name into the hash table and return the pointer allocated.
 */

static struct hent *
enter(const char *name)
{
	struct hent *hp;
	int h;

	if ((hp = lookup(name)) != NULL)
		return(hp);
	h = hash(name);
	hcount++;
	hp = malloc(sizeof *hp);
	if (hp == NULL)
		err(1, NULL);
	hp->h_name = strdup(name);
	if (hp->h_name == NULL)
		err(1, NULL);
	hp->h_feetpages = 0.0;
	hp->h_count = 0;
	hp->h_link = hashtab[h];
	hashtab[h] = hp;
	return(hp);
}

/*
 * Lookup a name in the hash table and return a pointer
 * to it.
 */

static struct hent *
lookup(const char *name)
{
	int h;
	struct hent *hp;

	h = hash(name);
	for (hp = hashtab[h]; hp != NULL; hp = hp->h_link)
		if (strcmp(hp->h_name, name) == 0)
			return(hp);
	return(NULL);
}

/*
 * Hash the passed name and return the index in
 * the hash table to begin the search.
 */
static int
hash(const char *name)
{
	int h;
	const char *cp;

	for (cp = name, h = 0; *cp; h = (h << 2) + *cp++)
		;
	return((h & 0x7fffffff) % HSHSIZE);
}

/*
 * The qsort comparison routine.
 * The comparison is ascii collating order
 * or by feet of typesetter film, according to sort.
 */
static int
qucmp(const void *a, const void *b)
{
	struct hent *h1, *h2;
	int r;

	h1 = *(struct hent **)a;
	h2 = *(struct hent **)b;
	if (sort)
		r = h1->h_feetpages < h2->h_feetpages ?
		    -1 : h1->h_feetpages > h2->h_feetpages;
	else
		r = strcmp(h1->h_name, h2->h_name);
	return(reverse ? -r : r);
}

/*
 * Perform lookup for printer name or abbreviation --
 */
static int
chkprinter(const char *s)
{
	int stat;
	int len;

	if ((stat = cgetent(&bp, printcapdb, s)) == -2) {
		printf("pac: can't open printer description file\n");
		exit(3);
	} else if (stat == -1)
		return(0);
	else if (stat == -3)
		fatal("potential reference loop detected in printcap file");

	if (cgetstr(bp, "af", &acctfile) == -1) {
		printf("accounting not enabled for printer %s\n", printer);
		exit(2);
	}
	if (!pflag && (cgetnum(bp, "pc", &price100) == 0))
		price = price100/10000.0;
	len = strlen(acctfile) + 5;
	sumfile = malloc(len);
	if (sumfile == NULL)
		err(1, "pac");
	strlcpy(sumfile, acctfile, len);
	strlcat(sumfile, "_sum", len);
	return(1);
}

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-cmrs] [-Pprinter] [-pprice] [user ...]\n",
	    __progname);
	exit(1);
}
@


1.25
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.24 2015/02/09 23:00:14 deraadt Exp $ */
@


1.24
log
@clean up flags++ instances around getopt()
ok florian
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.23 2015/01/16 14:36:44 deraadt Exp $ */
d274 1
a274 1
	base = (struct hent **) calloc(hcount, sizeof(hp));
d356 1
a356 1
	hp = (struct hent *) malloc(sizeof *hp);
d447 1
a447 1
	sumfile = (char *) malloc(len);
@


1.23
log
@Replace <sys/param.h> with <limits.h>
millert spotted the accidental <ctype.h> removal that caused binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.22 2014/11/18 20:54:28 krw Exp $ */
d130 1
a130 1
			summarize++;
d137 1
a137 1
			sort++;
d151 1
a151 1
			reverse++;
@


1.22
log
@Nuke more obvious #include duplications.

ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.21 2014/01/22 09:50:51 jsg Exp $ */
a40 2
#include <sys/param.h>

d42 1
d48 1
@


1.21
log
@fix a leak
ok krw@@ deraadt@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.20 2013/11/24 21:32:32 deraadt Exp $ */
a49 1
#include <stdlib.h>
@


1.20
log
@more ctype cleanups
checked by jca
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.19 2009/10/27 23:59:52 deraadt Exp $ */
d300 2
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.18 2007/09/02 15:19:39 deraadt Exp $ */
d218 1
a218 1
		while (isspace(*cp))
d224 1
a224 1
		if (!isspace(*ep) || errno == ERANGE)
d228 1
a228 1
		for (cp = ep + 1; isspace(*cp); )
d238 1
a238 1
		for (cp = ep; isspace(*cp); cp++)
d240 1
a240 1
		for (cp2 = cp; *cp2 && !isspace(*cp2); cp2++)
@


1.18
log
@use calloc() to avoid malloc(n * m) overflows; checked by djm canacar jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.17 2003/06/02 23:36:53 millert Exp $ */
a32 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)pac.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: pac.c,v 1.17 2003/06/02 23:36:53 millert Exp $";
#endif
#endif /* not lint */
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.16 2003/03/13 09:09:48 deraadt Exp $ */
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.16 2003/03/13 09:09:48 deraadt Exp $";
d289 1
a289 1
	base = (struct hent **) malloc(hcount * sizeof(hp));
@


1.16
log
@lots of sprintf -> snprintf and strcpy -> strlcpy; checked by tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.15 2002/06/14 21:35:01 todd Exp $ */
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.15 2002/06/14 21:35:01 todd Exp $";
@


1.15
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.14 2002/06/08 01:53:43 millert Exp $ */
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.14 2002/06/08 01:53:43 millert Exp $";
d447 1
d463 2
a464 1
	sumfile = (char *) malloc(strlen(acctfile) + 5);
d467 2
a468 2
	strcpy(sumfile, acctfile);	/* safe */
	strcat(sumfile, "_sum");	/* safe */
@


1.14
log
@Remove setuid root from lp*.  lpr needs to be setuid daemon so the
files it creates are not owned by the user spooling them but the
others (lpc, lpq, lprm) can get away with setgid daemon.  lpd runs
as user daemon for most things, only changing its uid to 0 for
things that must be done as root.

For the time being, don't require connections to come from a reserved
port since lpq/lpr/lprm can't acquire that w/o setuid root.  In the
near future we will have a mechanism for select non-root processes
to grab reserved ports.

The upshot of this is that spool directories must be writable by
group daemon and the files within the spool dirs must be owned by
daemon.
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.13 2002/05/20 23:13:50 millert Exp $ */
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.13 2002/05/20 23:13:50 millert Exp $";
d215 1
a215 1
 * Note that we must accomodate both the active and summary file
@


1.13
log
@Pull in useful bits from NetBSD and make our lp* easier to diff and
do some minor cleanup of my own:

o IPv6 support
o ANSI function headers
o use getopt()
o synce usage() with man pages
o passes -Wall on both 32bit and 64bit platforms
o add an option to set the max number of children lpd will fork off
o add an lpd option to bind to specific addresses instead of INADDR_ANY.
o allow user to specify how long to wait for a connection to remote servers
o more strlcpy() and snprintf() usage
o Use FOO_FILENO constants instead of hard-coding 0-2
o Add some keeps to man the page SYNOPSIS to avoid options being split
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.12 2002/02/16 21:28:04 millert Exp $ */
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.12 2002/02/16 21:28:04 millert Exp $";
d122 6
a127 2
	euid = geteuid();	/* these aren't used in pac(1) */
	uid = getuid();
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 2
a2 2
/*	$OpenBSD: pac.c,v 1.11 2001/11/23 03:58:19 deraadt Exp $ */
/*	$NetBSD: pac.c,v 1.7 1996/03/21 18:21:20 jtc Exp $	*/
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.11 2001/11/23 03:58:19 deraadt Exp $";
d61 1
d63 2
d68 1
d70 1
a86 2
uid_t	uid, euid;

d107 1
a107 2
static int	any(int, char []);
static int	chkprinter(char *);
d109 3
a111 3
static int	hash(char []);
static struct	hent *enter(char []);
static struct	hent *lookup(char []);
d114 1
d117 1
a117 3
main(argc, argv)
	int argc;
	char **argv;
d120 1
a120 1
	char *cp;
d124 52
a175 25
	while (--argc) {
		cp = *++argv;
		if (*cp++ == '-') {
			switch(*cp++) {
			case 'P':
				/*
				 * Printer name.
				 */
				printer = cp;
				continue;

			case 'p':
				/*
				 * get the price.
				 */
				price = atof(cp);
				pflag = 1;
				continue;

			case 's':
				/*
				 * Summarize and compress accounting file.
				 */
				summarize++;
				continue;
d177 7
a183 28
			case 'c':
				/*
				 * Sort by cost.
				 */
				sort++;
				continue;

			case 'm':
				/*
				 * disregard machine names for each user
				 */
				mflag = 1;
				continue;

			case 'r':
				/*
				 * Reverse sorting order.
				 */
				reverse++;
				continue;

			default:
fprintf(stderr,
    "usage: pac [-Pprinter] [-pprice] [-s] [-c] [-r] [-m] [user ...]\n");
				exit(1);
			}
		}
		(void) enter(--cp);
a185 2
	if (printer == NULL) {
		char *p;
d187 1
d189 2
a190 7
		if ((p = getenv("PRINTER")) != NULL)
			printer = p;
	}
	if (!chkprinter(printer)) {
		printf("pac: unknown printer %s\n", printer);
		exit(2);
	}
d192 2
a193 4
	if ((acct = fopen(acctfile, "r")) == NULL) {
		perror(acctfile);
		exit(1);
	}
d213 5
d221 1
a221 2
account(acct)
	FILE *acct;
d225 2
a226 1
	char *cp, *cp2;
d230 1
a230 1
	while (fgets(linebuf, BUFSIZ, acct) != NULL) {
d232 1
a232 1
		while (any(*cp, " \t"))
d234 9
a242 2
		t = atof(cp);
		while (any(*cp, ".0123456789"))
d244 11
a254 3
		while (any(*cp, " \t"))
			cp++;
		for (cp2 = cp; !any(*cp2, " \t\n"); cp2++)
a255 1
		ic = atoi(cp2);
d257 4
a260 2
		if (mflag && strchr(cp, ':'))
		    cp = strchr(cp, ':') + 1;
d280 1
a280 1
dumpit()
d289 3
a291 1
	base = (struct hent **) calloc(sizeof hp, hcount);
d320 1
a320 1
rewrite()
d327 1
a327 1
		perror(sumfile);
d341 1
a341 1
		perror(sumfile);
d346 1
a346 1
		perror(acctfile);
d360 1
a360 2
enter(name)
	char name[];
d369 6
a374 3
	hp = (struct hent *) calloc(sizeof *hp, 1);
	hp->h_name = (char *) calloc(sizeof(char), strlen(name)+1);
	strcpy(hp->h_name, name);
d388 1
a388 2
lookup(name)
	char name[];
d405 1
a405 2
hash(name)
	char name[];
d408 1
a408 1
	char *cp;
a415 17
 * Other stuff
 */
static int
any(ch, str)
	int ch;
	char str[];
{
	int c = ch;
	char *cp = str;

	while (*cp)
		if (*cp++ == c)
			return(1);
	return(0);
}

/*
d421 1
a421 2
qucmp(a, b)
	const void *a, *b;
d440 1
a440 2
chkprinter(s)
	char *s;
d458 5
a462 7
	sumfile = (char *) calloc(sizeof(char), strlen(acctfile)+5);
	if (sumfile == NULL) {
		perror("pac");
		exit(1);
	}
	strcpy(sumfile, acctfile);
	strcat(sumfile, "_sum");
d464 10
@


1.11
log
@use the same siginterrupt() trick in lpc(1) as in timedc(1). we have to hack
a global into the other programs since they share some source.
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.10 2001/08/30 17:38:13 millert Exp $ */
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.10 2001/08/30 17:38:13 millert Exp $";
d103 9
a111 9
static void	account __P((FILE *));
static int	any __P((int, char []));
static int	chkprinter __P((char *));
static void	dumpit __P((void));
static int	hash __P((char []));
static struct	hent *enter __P((char []));
static struct	hent *lookup __P((char []));
static int	qucmp __P((const void *, const void *));
static void	rewrite __P((void));
@


1.10
log
@o kill register
o add const to rcsid and copyright strings
o placate -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.9 1997/07/17 09:08:43 deraadt Exp $ */
d48 1
a48 1
static const char rcsid[] = "$OpenBSD: pac.c,v 1.9 1997/07/17 09:08:43 deraadt Exp $";
d83 2
@


1.9
log
@unistd.h
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.8 1997/01/17 16:12:50 millert Exp $ */
d39 1
a39 1
static char copyright[] =
d46 1
a46 1
static char sccsid[] = "@@(#)pac.c	8.1 (Berkeley) 6/6/93";
d48 1
a48 1
static char rcsid[] = "$OpenBSD: pac.c,v 1.8 1997/01/17 16:12:50 millert Exp $";
d116 2
a117 2
	register FILE *acct;
	register char *cp;
d216 1
a216 1
	register FILE *acct;
d220 3
a222 3
	register char *cp, *cp2;
	register struct hent *hp;
	register int ic;
d261 2
a262 2
	register struct hent *hp, **ap;
	register int hno, c, runs;
d298 3
a300 3
	register struct hent *hp;
	register int i;
	register FILE *acctf;
d339 2
a340 2
	register struct hent *hp;
	register int h;
d365 2
a366 2
	register int h;
	register struct hent *hp;
d383 2
a384 2
	register int h;
	register char *cp;
d399 2
a400 2
	register int c = ch;
	register char *cp = str;
d417 2
a418 2
	register struct hent *h1, *h2;
	register int r;
d435 1
a435 1
	register char *s;
@


1.8
log
@Add OpenBSD tags (was in wrong dir for previous commit)
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.7 1996/11/03 23:24:13 millert Exp $ */
d48 1
a48 1
static char rcsid[] = "$OpenBSD: $";
d63 1
@


1.7
log
@Improve portability by using ANSI/POSIX interfaces when possible.
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.6 1996/05/15 13:41:59 pefo Exp $ */
d45 1
d47 3
@


1.6
log
@previous fix of NULL check reversed
@
text
@d1 1
a1 1
/*	$OpenBSD: pac.c,v 1.3 1996/04/21 23:40:48 deraadt Exp $ */
d232 2
a233 2
		if (mflag && index(cp, ':'))
		    cp = index(cp, ':') + 1;
@


1.5
log
@Missing ' == NULL)' added...
@
text
@d176 1
a176 1
		if ((p = getenv("PRINTER")) == NULL)
@


1.4
log
@correct -P, $PRINTER, and DEFLP interactions. bug reported by scott.burns@@labatt.com
@
text
@d176 1
a176 1
		if ((p = getenv("PRINTER"))
@


1.3
log
@sync to netbsd 960418
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d172 3
a174 1
	if (printer == NULL && (printer = getenv("PRINTER")) == NULL)
d176 3
@


1.2
log
@login names starting with "t" were trashed; original bug report by
<tommy@@mdc.tijp.ti.com>. from soda@@sra.co.jp; netbsd pr#1926
@
text
@d1 3
d106 1
a106 1
void
@


1.1
log
@Initial revision
@
text
@d213 1
a213 1
		while (any(*cp, " t\t"))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
