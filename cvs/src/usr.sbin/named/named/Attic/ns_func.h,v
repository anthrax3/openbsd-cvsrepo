head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.20
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.18
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.02.21.08.59.45;	author jakob;	state dead;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.03.12.10.42.29;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.02.19.19.54.19;	author dm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove bind4; ok deraadt@@
@
text
@/*	$OpenBSD: ns_func.h,v 1.4 2002/02/17 19:42:37 millert Exp $	*/

/* ns_func.h - declarations for ns_*.c's externally visible functions
 *
 * $From: ns_func.h,v 8.13 1996/11/11 06:36:49 vixie Exp $
 */

/* ++from ns_resp.c++ */
extern void		ns_resp(u_char *, int),
			prime_cache(void),
			delete_all(struct namebuf *, int, int),
			delete_stale(struct namebuf *);
extern struct qinfo	*sysquery(const char *, int, int,
			    struct in_addr *, int, int);
extern struct notify	*findNotifyPeer(const struct zoneinfo *,
			    struct in_addr);
extern void		sysnotify(const char *, int, int);
extern int		doupdate(u_char *, int, u_char *, int,
			    struct databuf **, int, u_int),
			send_msg(u_char *, int, struct qinfo *),
			findns(struct namebuf **, int,
			    struct databuf **, int *, int),
			finddata(struct namebuf *, int, int, HEADER *,
			    char **, int *, int *),
			wanted(struct databuf *, int, int),
			add_data(struct namebuf *, struct databuf **,
			    u_char *, int, int *);
/* --from ns_resp.c-- */

/* ++from ns_req.c++ */
extern void		ns_req(u_char *, int, int, struct qstream *,
			    struct sockaddr_in *, int),
			free_addinfo(void),
			free_nsp(struct databuf **);
extern int		stale(struct databuf *),
			make_rr(const char *, struct databuf *,
			    u_char *, int, int),
			doaddinfo(HEADER *, u_char *, int),
			doaddauth(HEADER *, u_char *, int,
			    struct namebuf *, struct databuf *);
#ifdef BIND_NOTIFY
extern int		findZonePri(const struct zoneinfo *,
			    const struct sockaddr_in *);
#endif
/* --from ns_req.c-- */

/* ++from ns_forw.c++ */
extern time_t		retrytime(struct qinfo *);
extern int		ns_forw(struct databuf *nsp[],
				u_char *msg,
				int msglen,
				struct sockaddr_in *fp,
				struct qstream *qsp,
				int dfd,
				struct qinfo **qpp,
				char *dname,
				int class, int type,
				struct namebuf *np),
			haveComplained(const char *, const char *),
			nslookup(struct databuf *nsp[],
				 struct qinfo *qp,
				 const char *syslogdname,
				 const char *sysloginfo),
			qcomp(struct qserv *, struct qserv *);
extern struct qdatagram	*aIsUs(struct in_addr);
extern void		schedretry(struct qinfo *, time_t),
			unsched(struct qinfo *),
			retry(struct qinfo *),
			qflush(void),
			qremove(struct qinfo *),
			nsfree(struct qinfo *, char *),
			qfree(struct qinfo *);
extern struct qinfo	*qfindid(u_int16_t),
			*qnew(const char *, int, int);
/* --from ns_forw.c-- */

/* ++from ns_main.c++ */
extern u_int32_t	net_mask(struct in_addr);
extern void		sqrm(struct qstream *),
			sqflush(struct qstream *allbut),
			dqflush(time_t gen),
			sq_done(struct qstream *),
			ns_setproctitle(char *, int),
			getnetconf(void),
			nsid_init(void);
extern u_int16_t	nsid_next(void);
extern struct netinfo	*findnetinfo(struct in_addr);
/* --from ns_main.c-- */

/* ++from ns_maint.c++ */
extern void		ns_maint(void),
			sched_maint(void),
#ifdef CLEANCACHE
			remove_zone(struct hashbuf *, int, int),
#else
			remove_zone(struct hashbuf *, int),
#endif
#ifdef PURGE_ZONE
			purge_zone(const char *, struct hashbuf *, int),
#endif
			loadxfer(void),
			qserial_query(struct zoneinfo *),
			qserial_answer(struct qinfo *, u_int32_t);
extern void		holdsigchld(void);
extern void		releasesigchld(void);
extern SIG_FN		reapchild();
extern void		endxfer(void);
extern const char *	zoneTypeString(const struct zoneinfo *);
#ifdef DEBUG
extern void		printzoneinfo(int);
#endif
/* --from ns_maint.c-- */

/* ++from ns_sort.c++ */
extern struct netinfo	*local(struct sockaddr_in *);
extern void		sort_response(u_char *, int, struct netinfo *,
			    u_char *);
/* --from ns_sort.c-- */

/* ++from ns_init.c++ */
extern void		ns_refreshtime(struct zoneinfo *, time_t),
			ns_retrytime(struct zoneinfo *, time_t),
			ns_init(char *);
extern enum context	ns_ptrcontext(const char *owner);
extern enum context	ns_ownercontext(int type, enum transport);
extern int		ns_nameok(const char *name, int class, enum transport,
			    enum context, const char *owner,
			    struct in_addr source);
extern int		ns_wildcard(const char *name);
/* --from ns_init.c-- */

/* ++from ns_ncache.c++ */
extern void		cache_n_resp(u_char *, int);
/* --from ns_ncache.c-- */

/* ++from ns_udp.c++ */
extern void		ns_udp(void);
/* --from ns_udp.c-- */

/* ++from ns_stats.c++ */
extern void		ns_stats(void);
#ifdef XSTATS
extern void		ns_logstats(void);
#endif
extern void		qtypeIncr(int qtype);
extern struct nameser	*nameserFind(struct in_addr addr, int flags);
#define NS_F_INSERT	0x0001
extern void		nameserIncr(struct in_addr addr,
				    enum nameserStats which);
/* --from ns_stats.c-- */

/* ++from ns_validate.c++ */
extern int
#ifdef NCACHE
			validate(char *, char *, struct sockaddr_in *,
				 int, int, char *, int, int),
#else
			validate(char *, char *, struct sockaddr_in *,
				 int, int, char *, int),
#endif
			dovalidate(u_char *, int, u_char *, int, int,
				   char *, struct sockaddr_in *, int *),
			update_msg(u_char *, int *, int Vlist[], int);
extern void		store_name_addr(const char *, struct in_addr,
					const char *, const char *);
/* --from ns_validate.c-- */
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ns_func.h,v 1.3 2002/02/16 21:28:06 millert Exp $	*/
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: ns_func.h,v 1.2 1997/03/12 10:42:29 downsj Exp $	*/
d13 4
a16 4
extern struct qinfo	*sysquery __P((const char *, int, int,
				       struct in_addr *, int, int));
extern struct notify	*findNotifyPeer __P((const struct zoneinfo *,
					   struct in_addr));
d18 2
a19 2
extern int		doupdate __P((u_char *, int, u_char *, int,
				      struct databuf **, int, u_int)),
d21 4
a24 4
			findns __P((struct namebuf **, int,
				    struct databuf **, int *, int)),
			finddata __P((struct namebuf *, int, int, HEADER *,
				      char **, int *, int *)),
d26 2
a27 3
			add_data __P((struct namebuf *,
				      struct databuf **,
				      u_char *, int, int *));
d31 2
a32 4
extern void		ns_req __P((u_char *, int, int,
				    struct qstream *,
				    struct sockaddr_in *,
				    int)),
d36 2
a37 2
			make_rr __P((const char *, struct databuf *,
				     u_char *, int, int)),
d39 2
a40 3
			doaddauth __P((HEADER *, u_char *, int,
				       struct namebuf *,
				       struct databuf *));
d42 2
a43 2
extern int		findZonePri __P((const struct zoneinfo *,
					 const struct sockaddr_in *));
d49 10
a58 10
extern int		ns_forw __P((struct databuf *nsp[],
				     u_char *msg,
				     int msglen,
				     struct sockaddr_in *fp,
				     struct qstream *qsp,
				     int dfd,
				     struct qinfo **qpp,
				     char *dname,
				     int class, int type,
				     struct namebuf *np)),
d60 4
a63 4
			nslookup __P((struct databuf *nsp[],
				      struct qinfo *qp,
				      const char *syslogdname,
				      const char *sysloginfo)),
d116 2
a117 3
extern void		sort_response __P((u_char *, int,
					   struct netinfo *,
					   u_char *));
d126 3
a128 4
extern int		ns_nameok __P((const char *name, int class,
				       enum transport, enum context,
				       const char *owner,
				       struct in_addr source));
d148 2
a149 2
extern void		nameserIncr __P((struct in_addr addr,
					 enum nameserStats which));
d155 2
a156 2
			validate __P((char *, char *, struct sockaddr_in *,
				      int, int, char *, int, int)),
d158 2
a159 2
			validate __P((char *, char *, struct sockaddr_in *,
				      int, int, char *, int)),
d161 2
a162 2
			dovalidate __P((u_char *, int, u_char *, int, int,
					char *, struct sockaddr_in *, int *)),
d164 2
a165 2
extern void		store_name_addr __P((const char *, struct in_addr,
					     const char *, const char *));
@


1.2
log
@BIND 4.9.5-P1.

libresolv and include are required until the new resolver gets integrated
into libc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d9 4
a12 4
extern void		ns_resp __P((u_char *, int)),
			prime_cache __P((void)),
			delete_all __P((struct namebuf *, int, int)),
			delete_stale __P((struct namebuf *));
d17 1
a17 1
extern void		sysnotify __P((const char *, int, int));
d20 1
a20 1
			send_msg __P((u_char *, int, struct qinfo *)),
d25 1
a25 1
			wanted __P((struct databuf *, int, int)),
d36 3
a38 3
			free_addinfo __P((void)),
			free_nsp __P((struct databuf **));
extern int		stale __P((struct databuf *)),
d41 1
a41 1
			doaddinfo __P((HEADER *, u_char *, int)),
d52 1
a52 1
extern time_t		retrytime __P((struct qinfo *));
d63 1
a63 1
			haveComplained __P((const char *, const char *)),
d68 11
a78 11
			qcomp __P((struct qserv *, struct qserv *));
extern struct qdatagram	*aIsUs __P((struct in_addr));
extern void		schedretry __P((struct qinfo *, time_t)),
			unsched __P((struct qinfo *)),
			retry __P((struct qinfo *)),
			qflush __P((void)),
			qremove __P((struct qinfo *)),
			nsfree __P((struct qinfo *, char *)),
			qfree __P((struct qinfo *));
extern struct qinfo	*qfindid __P((u_int16_t)),
			*qnew __P((const char *, int, int));
d82 10
a91 10
extern u_int32_t	net_mask __P((struct in_addr));
extern void		sqrm __P((struct qstream *)),
			sqflush __P((struct qstream *allbut)),
			dqflush __P((time_t gen)),
			sq_done __P((struct qstream *)),
			ns_setproctitle __P((char *, int)),
			getnetconf __P((void)),
			nsid_init __P((void));
extern u_int16_t	nsid_next __P((void));
extern struct netinfo	*findnetinfo __P((struct in_addr));
d95 2
a96 2
extern void		ns_maint __P((void)),
			sched_maint __P((void)),
d98 1
a98 1
			remove_zone __P((struct hashbuf *, int, int)),
d100 1
a100 1
			remove_zone __P((struct hashbuf *, int)),
d103 1
a103 1
			purge_zone __P((const char *, struct hashbuf *, int)),
d105 8
a112 8
			loadxfer __P((void)),
			qserial_query __P((struct zoneinfo *)),
			qserial_answer __P((struct qinfo *, u_int32_t));
extern void		holdsigchld __P((void));
extern void		releasesigchld __P((void));
extern SIG_FN		reapchild __P(());
extern void		endxfer __P((void));
extern const char *	zoneTypeString __P((const struct zoneinfo *));
d114 1
a114 1
extern void		printzoneinfo __P((int));
d119 1
a119 1
extern struct netinfo	*local __P((struct sockaddr_in *));
d126 5
a130 5
extern void		ns_refreshtime __P((struct zoneinfo *, time_t)),
			ns_retrytime __P((struct zoneinfo *, time_t)),
			ns_init __P((char *));
extern enum context	ns_ptrcontext __P((const char *owner));
extern enum context	ns_ownercontext __P((int type, enum transport));
d135 1
a135 1
extern int		ns_wildcard __P((const char *name));
d139 1
a139 1
extern void		cache_n_resp __P((u_char *, int));
d143 1
a143 1
extern void		ns_udp __P((void));
d147 1
a147 1
extern void		ns_stats __P((void));
d149 1
a149 1
extern void		ns_logstats __P((void));
d151 2
a152 2
extern void		qtypeIncr __P((int qtype));
extern struct nameser	*nameserFind __P((struct in_addr addr, int flags));
d169 1
a169 1
			update_msg __P((u_char *, int *, int Vlist[], int));
@


1.1
log
@netbsd: bind 4.9.3
@
text
@d1 1
a1 1
/*	$NetBSD: ns_func.h,v 1.1 1996/02/02 15:28:46 mrg Exp $	*/
d5 1
a5 1
 * $Id: ns_func.h,v 8.6 1995/12/22 10:20:30 vixie Exp 
d11 2
a12 1
			delete_all __P((struct namebuf *, int, int));
d61 1
d75 1
d78 1
a78 6
#ifdef DMALLOC
			*qnew_tagged __P((void));
#		define	qnew() qnew_tagged(__FILE__, __LINE__)
#else
			*qnew();
#endif
d129 7
d141 4
@
