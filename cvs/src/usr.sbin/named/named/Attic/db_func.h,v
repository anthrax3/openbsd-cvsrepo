head	1.7;
access;
symbols
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2003.02.21.08.59.45;	author jakob;	state dead;
branches;
next	1.6;

1.6
date	2002.02.17.19.42.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.28.06;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.05.23.19.24.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.05.22.00.47.32;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.03.12.10.42.22;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.02.19.19.54.10;	author dm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove bind4; ok deraadt@@
@
text
@/*	$OpenBSD: db_func.h,v 1.6 2002/02/17 19:42:37 millert Exp $	*/

/* db_proc.h - prototypes for functions in db_*.c
 *
 * $From: db_func.h,v 8.13 1997/06/01 20:34:34 vixie Exp $
 */

/* ++from db_update.c++ */
extern int		db_update(char name[],
				  struct databuf *odp,
				  struct databuf *newdp,
				  int flags,
				  struct hashbuf *htp),
			db_cmp(struct databuf *,struct databuf *),
			findMyZone(struct namebuf *np, int class);
extern void		fixttl(struct databuf *dp);
/* --from db_update.c-- */

/* ++from db_reload.c++ */
extern void		db_reload(int);
/* --from db_reload.c-- */

/* ++from db_save.c++ */
extern struct namebuf	*savename(const char *, int);
extern struct databuf	*savedata(int, int, u_int32_t, u_char *, int);
extern struct hashbuf	*savehash(struct hashbuf *);
/* --from db_save.c-- */

/* ++from db_dump.c++ */
extern int		db_dump(struct hashbuf *, FILE *, int, char *),
			zt_dump(FILE *),
			atob(char *, int, char *, int, int *);
extern void		doachkpt(void),
			doadump(void);
extern u_int		db_getclev(const char *);
/* --from db_dump.c-- */

/* ++from db_load.c++ */
extern void		endline(FILE *),
			get_netlist(FILE *, struct netinfo **, int, char *),
			free_netlist(struct netinfo **);
extern int		getword(char *, int, FILE *, int),
			getnum(FILE *, const char *, int),
			db_load(const char *, const char *,
			    struct zoneinfo *, const char *),
			position_on_netlist(struct in_addr, struct netinfo *);
extern struct netinfo	*addr_on_netlist(struct in_addr, struct netinfo *);
/* --from db_load.c-- */

/* ++from db_glue.c++ */
extern const char	*sin_ntoa(const struct sockaddr_in *);
extern void		panic(int, const char *),
			buildservicelist(void),
			buildprotolist(void),
			gettime(struct timeval *),
			getname(struct namebuf *, char *, int);
extern int		servicenumber(char *),
			protocolnumber(char *),
			my_close(int),
			my_fclose(FILE *),
#ifdef GEN_AXFR
			get_class(char *),
#endif
			writemsg(int, u_char *, int),
			dhash(const u_char *, int),
			nhash(const char *),
			samedomain(const char *, const char *);
extern char		*protocolname(int),
			*servicename(u_int16_t, char *),
			*savestr(const char *);
#ifndef BSD
extern int		getdtablesize(void);
#endif
extern struct databuf	*rm_datum(struct databuf *, struct namebuf *,
			    struct databuf *);
extern struct namebuf	*rm_name(struct namebuf *, struct namebuf **,
			    struct namebuf *);
#ifdef INVQ
extern void		addinv(struct namebuf *, struct databuf *),
			rminv(struct databuf *);
struct invbuf		*saveinv(void);
#endif
extern char *		ctimel(long);
extern struct in_addr	data_inaddr(const u_char *data);
extern void		setsignal(int, int, SIG_FN (*)()),
			resignal(int, int, SIG_FN (*)());
extern void		db_free(struct databuf *);
/* --from db_glue.c-- */

/* ++from db_lookup.c++ */
extern struct namebuf	*nlookup(const char *, struct hashbuf **,
			    const char **, int);
extern struct namebuf	*np_parent(struct namebuf *);
extern int		match(struct databuf *, int, int);
/* --from db_lookup.c-- */

/* ++from db_secure.c++ */
#ifdef SECURE_ZONES
extern int		build_secure_netlist(struct zoneinfo *);
#endif
/* --from db_secure.c-- */
@


1.6
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_func.h,v 1.5 2002/02/16 21:28:06 millert Exp $	*/
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_func.h,v 1.4 1998/05/23 19:24:48 millert Exp $	*/
d9 5
a13 5
extern int		db_update __P((char name[],
				       struct databuf *odp,
				       struct databuf *newdp,
				       int flags,
				       struct hashbuf *htp)),
d40 1
a40 2
			get_netlist __P((FILE *, struct netinfo **,
					 int, char *)),
d44 4
a47 6
			db_load __P((const char *, const char *,
				     struct zoneinfo *, const char *)),
			position_on_netlist __P((struct in_addr,
						 struct netinfo *));
extern struct netinfo	*addr_on_netlist __P((struct in_addr,
					      struct netinfo *));
d74 4
a77 6
extern struct databuf	*rm_datum __P((struct databuf *,
				       struct namebuf *,
				       struct databuf *));
extern struct namebuf	*rm_name __P((struct namebuf *, 
				      struct namebuf **,
				      struct namebuf *));
d85 2
a86 2
extern void		setsignal __P((int, int, SIG_FN (*)())),
			resignal __P((int, int, SIG_FN (*)()));
d91 2
a92 2
extern struct namebuf	*nlookup __P((const char *, struct hashbuf **,
				      const char **, int));
@


1.4
log
@support for easy chroot'ing to /var/named and install named-xfer in /var/named as a static binary
@
text
@d1 1
a1 1
/*	$OpenBSD: db_func.h,v 1.3 1998/05/22 00:47:32 millert Exp $	*/
d14 3
a16 3
			db_cmp __P((struct databuf *,struct databuf *)),
			findMyZone __P((struct namebuf *np, int class));
extern void		fixttl __P((struct databuf *dp));
d20 1
a20 1
extern void		db_reload __P((int));
d24 3
a26 3
extern struct namebuf	*savename __P((const char *, int));
extern struct databuf	*savedata __P((int, int, u_int32_t, u_char *, int));
extern struct hashbuf	*savehash __P((struct hashbuf *));
d30 6
a35 6
extern int		db_dump __P((struct hashbuf *, FILE *, int, char *)),
			zt_dump __P((FILE *)),
			atob __P((char *, int, char *, int, int *));
extern void		doachkpt __P((void)),
			doadump __P((void));
extern u_int		db_getclev __P((const char *));
d39 1
a39 1
extern void		endline __P((FILE *)),
d42 3
a44 3
			free_netlist __P((struct netinfo **));
extern int		getword __P((char *, int, FILE *, int)),
			getnum __P((FILE *, const char *, int)),
d54 10
a63 10
extern const char	*sin_ntoa __P((const struct sockaddr_in *));
extern void		panic __P((int, const char *)),
			buildservicelist __P((void)),
			buildprotolist __P((void)),
			gettime __P((struct timeval *)),
			getname __P((struct namebuf *, char *, int));
extern int		servicenumber __P((char *)),
			protocolnumber __P((char *)),
			my_close __P((int)),
			my_fclose __P((FILE *)),
d65 1
a65 1
			get_class __P((char *)),
d67 7
a73 7
			writemsg __P((int, u_char *, int)),
			dhash __P((const u_char *, int)),
			nhash __P((const char *)),
			samedomain __P((const char *, const char *));
extern char		*protocolname __P((int)),
			*servicename __P((u_int16_t, char *)),
			*savestr __P((const char *));
d75 1
a75 1
extern int		getdtablesize __P((void));
d84 3
a86 3
extern void		addinv __P((struct namebuf *, struct databuf *)),
			rminv __P((struct databuf *));
struct invbuf		*saveinv __P((void));
d88 2
a89 2
extern char *		ctimel __P((long));
extern struct in_addr	data_inaddr __P((const u_char *data));
d92 1
a92 1
extern void		db_free __P((struct databuf *));
d98 2
a99 2
extern struct namebuf	*np_parent __P((struct namebuf *));
extern int		match __P((struct databuf *, int, int));
d104 1
a104 1
extern int		build_secure_netlist __P((struct zoneinfo *));
@


1.3
log
@bind 4.9.6, 4.9.7 comming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_func.h,v 1.2 1997/03/12 10:42:22 downsj Exp $	*/
d20 1
a20 1
extern void		db_reload __P((void));
@


1.2
log
@BIND 4.9.5-P1.

libresolv and include are required until the new resolver gets integrated
into libc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
a5 1
 * $From: db_func.h,v 8.12 1996/09/22 00:13:10 vixie Exp $
d16 1
@


1.1
log
@netbsd: bind 4.9.3
@
text
@d1 1
a1 1
/*	$NetBSD: db_func.h,v 1.1 1996/02/02 15:28:16 mrg Exp $	*/
d5 1
a5 1
 * $Id: db_func.h,v 8.7 1995/12/22 10:20:30 vixie Exp 
d14 1
d24 1
a24 10
#ifdef DMALLOC
extern struct databuf	*savedata_tagged __P((char *, int,
					      int, int, u_int32_t,
					      u_char *, int));
#define savedata(class, type, ttl, data, size) \
	savedata_tagged(__FILE__, __LINE__, class, type, ttl, data, size)
#else
extern struct databuf	*savedata __P((int, int, u_int32_t,
				       u_char *, int));
#endif
a33 3
#ifdef ALLOW_UPDATES
extern void		zonedump __P((struct zoneinfo *));
#endif
a86 4
#ifdef LOC_RR
extern u_int32_t	loc_aton __P((const char *ascii, u_char *binary));
extern char *		loc_ntoa __P((const u_char *binary, char *ascii));
#endif
d91 1
d97 1
@
