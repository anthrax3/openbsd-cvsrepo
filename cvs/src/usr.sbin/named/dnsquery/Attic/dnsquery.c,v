head	1.8;
access;
symbols
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.02.21.08.59.43;	author jakob;	state dead;
branches;
next	1.7;

1.7
date	2002.06.01.20.31.41;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.13.06.36;	author mpech;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.01.03.24.02;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	99.12.04.00.22.34;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.03.12.10.41.49;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.44.04;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.02.19.19.53.45;	author dm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove bind4; ok deraadt@@
@
text
@/*	$OpenBSD: dnsquery.c,v 1.7 2002/06/01 20:31:41 deraadt Exp $	*/

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <netdb.h>
#include <resolv.h>
#include <errno.h>

#include "../conf/portability.h"

extern int h_errno;
extern char *h_errlist[];

main(argc, argv)
int argc;
char *argv[];
{
	char name[MAXDNAME];
	u_char answer[8*1024];
	register int c, i = 0;
	unsigned long ul;
	int nameservers = 0, class, type, len;
	struct in_addr q_nsaddr[MAXNS];
	struct hostent *q_nsname;
	extern int optind, opterr;
	extern char *optarg;
	HEADER *hp;
	int stream = 0, debug = 0;

	/* set defaults */
	len = MAXDNAME;
	gethostname(name, len);
	class = C_IN;
	type = T_ANY;

	/* if no args, exit */
	if (argc == 1) {
		fprintf(stderr, "Usage:  %s [-h] host [-n ns] [-t type] [-c class] [-r retry] [-p period] [-s] [-v] [-d] [-a]\n", argv[0]);
		exit(1);
	}

	/* handle args */
	while ((c = getopt(argc, argv, "c:dh:n:p:r:st:u:v")) != -1) {
		switch (c) {

		case 'r' :	_res.retry = atoi(optarg);
				break;

		case 'p' :	_res.retrans = atoi(optarg);
				break;

		case 'h' :	if (strlen(optarg) > sizeof(name)-1) {
				    fprintf(stderr,
				    "Domain name too long (%s)\n", optarg);
					exit(1);
				}
				strlcpy(name, optarg, sizeof name);
				break;

		case 'c' : {
				int success, proto_class;

				proto_class = sym_ston(__p_class_syms,
						       optarg, &success);
				if (success)
					class = proto_class;
				else {
				    fprintf(stderr, "Bad class (%s)\n", optarg);
					exit(1);
				}
			    }
				break;

		case 't' : {
				int success, proto_type;

				proto_type = sym_ston(__p_type_syms,
						      optarg, &success);
				if (success)
					type = proto_type;
				else {
				    fprintf(stderr, "Bad type (%s)\n", optarg);
					exit(1);
				}
			    }
				break;

		case 'd' :	debug++;
				break;

		case 's' :	
		case 'v' :	stream++;
				break;

		case 'n' :	
				/*
				 *  If we set some nameservers here without
				 *  using gethostbyname() first, then they will
				 *  get overwritten when we do the first query.
				 *  So, we must init the resolver before any 
				 *  of this.
				 */
				if (!(_res.options & RES_INIT))
					if (res_init() == -1) {
						fprintf(stderr,
							"res_init() failed\n");
						exit(1);
				}
				if (nameservers >= MAXNS) break;
				(void) inet_aton(optarg,
						 &q_nsaddr[nameservers]);
				if (!inet_aton(optarg, &ul)) {
					q_nsname = gethostbyname(optarg);
					if (q_nsname == 0) {
						fprintf(stderr,
						       "Bad nameserver (%s)\n",
							optarg);
						exit(1);
					}
					bcopy((char *) q_nsname->h_addr,
					      (char *) &q_nsaddr[nameservers],
					      INADDRSZ);
				}
				else
					q_nsaddr[nameservers].s_addr = ul;
				nameservers++;
				break;

		default : 	fprintf(stderr, 
				"\tUsage:  %s [-n ns] [-h host] [-t type] [-c class] [-r retry] [-p period] [-s] [-v] [-d] [-a]\n", argv[0]);
				exit(1);
		}
	}
	if (optind < argc) {
		if (strlen(argv[optind]) > sizeof(name)-1) {
		    fprintf(stderr,
		    "Domain name too long (%s)\n", argv[optind]);
			exit(1);
		}
		strlcpy(name, argv[optind], sizeof name);
	}

	len = sizeof(answer);

	/* 
	 * set these here so they aren't set for a possible call to
	 * gethostbyname above
	*/
	if (debug || stream) {
		if (!(_res.options & RES_INIT))
			if (res_init() == -1) {
				fprintf(stderr, "res_init() failed\n");
				exit(1);
			}
		if (debug) 
			_res.options |= RES_DEBUG;
		if (stream)
		 	_res.options |= RES_USEVC;
	}

	/* if the -n flag was used, add them to the resolver's list */
	if (nameservers != 0) {
		_res.nscount = nameservers;
		for (i = nameservers - 1; i >= 0; i--) {
			_res.nsaddr_list[i].sin_addr.s_addr = q_nsaddr[i].s_addr;
			_res.nsaddr_list[i].sin_family = AF_INET;
			_res.nsaddr_list[i].sin_port = htons(NAMESERVER_PORT);
		}
	}

	/*
	 * if the -h arg is fully-qualified, use res_query() since
	 * using res_search() will lead to use of res_querydomain()
	 * which will strip the trailing dot
	 */
	if (name[strlen(name) - 1] == '.') {
		if (res_query(name, class, type, answer, len) < 0) {
			hp = (HEADER *) answer;
			if ((hp->rcode == 0) && (hp->ancount > 0))
				__p_query(answer);
			else
				fprintf(stderr, "Query failed (h_errno = %d) : %s\n", 
						h_errno, h_errlist[h_errno]);
			exit(1);
		}
	}
	else if (res_search(name, class, type, answer, len) < 0) {
		hp = (HEADER *) answer;
		if ((hp->rcode == 0) && (hp->ancount > 0))
			__p_query(answer);
		else
			fprintf(stderr, "Query failed (h_errno = %d) : %s\n", 
						h_errno, h_errlist[h_errno]);
		exit(1);
	}
	__p_query(answer);
	exit(0);
}
@


1.7
log
@exit(1) not exit(-1)
@
text
@d1 1
a1 1
/*	$OpenBSD: dnsquery.c,v 1.6 2001/10/24 13:06:36 mpech Exp $	*/
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dnsquery.c,v 1.5 2000/02/01 03:24:02 deraadt Exp $	*/
d42 1
a42 1
		exit(-1);
d58 1
a58 1
					exit(-1);
d72 1
a72 1
					exit(-1);
d86 1
a86 1
					exit(-1);
d110 1
a110 1
						exit(-1);
d121 1
a121 1
						exit(-1);
d134 1
a134 1
				exit(-1);
d141 1
a141 1
			exit(-1);
d156 1
a156 1
				exit(-1);
d187 1
a187 1
			exit(-1);
d197 1
a197 1
		exit(-1);
@


1.5
log
@no need to extern int errno if errno.h is included
@
text
@d1 1
a1 1
/*	$OpenBSD: dnsquery.c,v 1.4 1999/12/04 00:22:34 deraadt Exp $	*/
d46 1
a46 1
	while ((c = getopt(argc, argv, "c:dh:n:p:r:st:u:v")) != EOF) {
@


1.4
log
@avoid overflow
@
text
@d1 1
a1 1
/*	$OpenBSD: dnsquery.c,v 1.3 1997/03/12 10:41:49 downsj Exp $	*/
a13 1
extern int errno;
@


1.3
log
@BIND 4.9.5-P1.

libresolv and include are required until the new resolver gets integrated
into libc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 6
a61 1
		case 'h' :	strcpy(name, optarg);
d138 8
a145 2
	if (optind < argc)
		strcpy(name, argv[optind]);
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$NetBSD: dnsquery.c,v 1.1 1996/02/02 15:26:24 mrg Exp $	*/
d47 1
a47 1
	while ((c = getopt(argc, argv, "c:dh:n:p:r:st:u:v")) != -1) {
d59 7
a65 8
		case 'c' :	if (!strcasecmp(optarg, "IN"))
					class = C_IN;
				else if (!strcasecmp(optarg, "HS"))
					class = C_HS;
				else if (!strcasecmp(optarg, "CHAOS"))
					class = C_CHAOS;
				else if (!strcasecmp(optarg, "ANY"))
					class = C_ANY;
d67 2
a68 2
					class = T_ANY;
					fprintf(stderr, "optarg=%s\n", optarg);
d70 1
d73 7
a79 58
		case 't' :	if (!strcasecmp(optarg, "A"))
					type = T_A;
				else if (!strcasecmp(optarg, "NS"))
					type = T_NS;
				else if (!strcasecmp(optarg, "MD"))
					type = T_MD;
				else if (!strcasecmp(optarg, "MF"))
					type = T_MF;
				else if (!strcasecmp(optarg, "CNAME"))
					type = T_CNAME;
				else if (!strcasecmp(optarg, "SOA"))
					type = T_SOA;
				else if (!strcasecmp(optarg, "MB"))
					type = T_MB;
				else if (!strcasecmp(optarg, "MG"))
					type = T_MG;
				else if (!strcasecmp(optarg, "MR"))
					type = T_MR;
				else if (!strcasecmp(optarg, "NULL"))
					type = T_NULL;
				else if (!strcasecmp(optarg, "WKS"))
					type = T_WKS;
				else if (!strcasecmp(optarg, "PTR"))
					type = T_PTR;
				else if (!strcasecmp(optarg, "HINFO"))
					type = T_HINFO;
				else if (!strcasecmp(optarg, "MINFO"))
					type = T_MINFO;
				else if (!strcasecmp(optarg, "MX"))
					type = T_MX;
				else if (!strcasecmp(optarg, "TXT"))
					type = T_TXT;
				else if (!strcasecmp(optarg, "RP"))
					type = T_RP;
				else if (!strcasecmp(optarg, "AFSDB"))
					type = T_AFSDB;
				else if (!strcasecmp(optarg, "ANY"))
					type = T_ANY;
				else if (!strcasecmp(optarg, "X25"))
					type = T_X25;
				else if (!strcasecmp(optarg, "ISDN"))
					type = T_ISDN;
				else if (!strcasecmp(optarg, "RT"))
					type = T_RT;
				else if (!strcasecmp(optarg, "NSAP"))
					type = T_NSAP;
				else if (!strcasecmp(optarg, "SIG"))
					type = T_SIG;
				else if (!strcasecmp(optarg, "KEY"))
					type = T_KEY;
				else if (!strcasecmp(optarg, "PX"))
					type = T_PX;
				else if (!strcasecmp(optarg, "GPOS"))
					type = T_GPOS;
				else if (!strcasecmp(optarg, "AAAA"))
					type = T_AAAA;
				else if (!strcasecmp(optarg, "LOC"))
					type = T_LOC;
d81 1
a81 1
					fprintf(stderr, "Bad type (%s)\n", optarg);
d84 1
d142 11
a152 4
	if (debug) 
		_res.options |= RES_DEBUG;
	if (stream)
		 _res.options |= RES_USEVC;
@


1.1
log
@netbsd: bind 4.9.3
@
text
@d47 1
a47 1
	while ((c = getopt(argc, argv, "c:dh:n:p:r:st:u:v")) != EOF) {
@
