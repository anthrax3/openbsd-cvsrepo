head	1.6;
access;
symbols
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2005.07.31.06.31.55;	author dlg;	state dead;
branches;
next	1.5;

1.5
date	2004.08.01.18.32.21;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.03.18.49.51;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.22.06.21.36;	author mjacob;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.21.08.45.15;	author mjacob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove sesd and its companion tools getencstat, setencstat and setobjstat

ok deraadt@@ im sure marco would be ok too if he was awake
@
text
@/* $NetBSD: $ */
/* $FreeBSD: $ */
/* $OpenBSD: eltsub.c,v 1.5 2004/08/01 18:32:21 deraadt Exp $ */
/*
 * Copyright (c) 2000 by Matthew Jacob
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification, immediately at the beginning of the file.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * the GNU Public License ("GPL").
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * Matthew Jacob
 * Feral Software
 * mjacob@@feral.com
 */

#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include SESINC

char *geteltnm(int);
static char *scode2ascii(u_char);
char *stat2ascii(int, u_char *);

char *
geteltnm(int type)
{
	static char rbuf[132];

	switch (type) {
	case SESTYP_UNSPECIFIED:
		snprintf(rbuf, sizeof rbuf, "Unspecified");
		break;
	case SESTYP_DEVICE:
		snprintf(rbuf, sizeof rbuf, "Device");
		break;
	case SESTYP_POWER:
		snprintf(rbuf, sizeof rbuf, "Power supply");
		break;
	case SESTYP_FAN:
		snprintf(rbuf, sizeof rbuf, "Cooling element");
		break;
	case SESTYP_THERM:
		snprintf(rbuf, sizeof rbuf, "Temperature sensors");
		break;
	case SESTYP_DOORLOCK:
		snprintf(rbuf, sizeof rbuf, "Door Lock");
		break;
	case SESTYP_ALARM:
		snprintf(rbuf, sizeof rbuf, "Audible alarm");
		break;
	case SESTYP_ESCC:
		snprintf(rbuf, sizeof rbuf, "Enclosure services controller electronics");
		break;
	case SESTYP_SCC:
		snprintf(rbuf, sizeof rbuf, "SCC controller electronics");
		break;
	case SESTYP_NVRAM:
		snprintf(rbuf, sizeof rbuf, "Nonvolatile cache");
		break;
	case SESTYP_UPS:
		snprintf(rbuf, sizeof rbuf, "Uninterruptible power supply");
		break;
	case SESTYP_DISPLAY:
		snprintf(rbuf, sizeof rbuf, "Display");
		break;
	case SESTYP_KEYPAD:
		snprintf(rbuf, sizeof rbuf, "Key pad entry device");
		break;
	case SESTYP_SCSIXVR:
		snprintf(rbuf, sizeof rbuf, "SCSI port/transceiver");
		break;
	case SESTYP_LANGUAGE:
		snprintf(rbuf, sizeof rbuf, "Language");
		break;
	case SESTYP_COMPORT:
		snprintf(rbuf, sizeof rbuf, "Communication Port");
		break;
	case SESTYP_VOM:
		snprintf(rbuf, sizeof rbuf, "Voltage Sensor");
		break;
	case SESTYP_AMMETER:
		snprintf(rbuf, sizeof rbuf, "Current Sensor");
		break;
	case SESTYP_SCSI_TGT:
		snprintf(rbuf, sizeof rbuf, "SCSI target port");
		break;
	case SESTYP_SCSI_INI:
		snprintf(rbuf, sizeof rbuf, "SCSI initiator port");
		break;
	case SESTYP_SUBENC:
		snprintf(rbuf, sizeof rbuf, "Simple sub-enclosure");
		break;
	default:
		(void) snprintf(rbuf, sizeof rbuf, "<Type 0x%x>", type);
		break;
	}
	return (rbuf);
}

static char *
scode2ascii(u_char code)
{
	static char rbuf[32];
	switch (code & 0xf) {
	case SES_OBJSTAT_UNSUPPORTED:
		snprintf(rbuf, sizeof rbuf, "status not supported");
		break;
	case SES_OBJSTAT_OK:
		snprintf(rbuf, sizeof rbuf, "ok");
		break;
	case SES_OBJSTAT_CRIT:
		snprintf(rbuf, sizeof rbuf, "critical");
		break;
	case SES_OBJSTAT_NONCRIT:
		snprintf(rbuf, sizeof rbuf, "non-critical");
		break;
	case SES_OBJSTAT_UNRECOV:
		snprintf(rbuf, sizeof rbuf, "unrecoverable");
		break;
	case SES_OBJSTAT_NOTINSTALLED:
		snprintf(rbuf, sizeof rbuf, "not installed");
		break;
	case SES_OBJSTAT_UNKNOWN:
		snprintf(rbuf, sizeof rbuf, "unknown status");
		break;
	case SES_OBJSTAT_NOTAVAIL:
		snprintf(rbuf, sizeof rbuf, "status not available");
		break;
	default:
		snprintf(rbuf, sizeof rbuf, "unknown status code %x", code & 0xf);
		break;
	}
	return (rbuf);
}


char *
stat2ascii(int eletype, u_char *cstat)
{
	static char ebuf[256], *scode;

	scode = scode2ascii(cstat[0]);
	snprintf(ebuf, sizeof ebuf, "Status=%s (bytes=0x%02x 0x%02x 0x%02x 0x%02x)",
	    scode, cstat[0], cstat[1], cstat[2], cstat[3]);
	return (ebuf);
}
@


1.5
log
@ansi cleanup; khalek@@linuxgamers.net
@
text
@d3 1
a3 1
/* $OpenBSD: eltsub.c,v 1.4 2003/04/03 18:49:51 deraadt Exp $ */
@


1.4
log
@snprintf; millert ok
@
text
@d3 1
a3 1
/* $OpenBSD: eltsub.c,v 1.3 2002/02/16 21:28:09 millert Exp $ */
d48 1
a48 2
geteltnm(type)
	int type;
d124 1
a124 2
scode2ascii(code)
	u_char code;
d161 1
a161 3
stat2ascii(eletype, cstat)
	int eletype;
	u_char *cstat;
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d3 1
a3 1
/* $OpenBSD: eltsub.c,v 1.2 2000/02/22 06:21:36 mjacob Exp $ */
d55 1
a55 1
		sprintf(rbuf, "Unspecified");
d58 1
a58 1
		sprintf(rbuf, "Device");
d61 1
a61 1
		sprintf(rbuf, "Power supply");
d64 1
a64 1
		sprintf(rbuf, "Cooling element");
d67 1
a67 1
		sprintf(rbuf, "Temperature sensors");
d70 1
a70 1
		sprintf(rbuf, "Door Lock");
d73 1
a73 1
		sprintf(rbuf, "Audible alarm");
d76 1
a76 1
		sprintf(rbuf, "Enclosure services controller electronics");
d79 1
a79 1
		sprintf(rbuf, "SCC controller electronics");
d82 1
a82 1
		sprintf(rbuf, "Nonvolatile cache");
d85 1
a85 1
		sprintf(rbuf, "Uninterruptible power supply");
d88 1
a88 1
		sprintf(rbuf, "Display");
d91 1
a91 1
		sprintf(rbuf, "Key pad entry device");
d94 1
a94 1
		sprintf(rbuf, "SCSI port/transceiver");
d97 1
a97 1
		sprintf(rbuf, "Language");
d100 1
a100 1
		sprintf(rbuf, "Communication Port");
d103 1
a103 1
		sprintf(rbuf, "Voltage Sensor");
d106 1
a106 1
		sprintf(rbuf, "Current Sensor");
d109 1
a109 1
		sprintf(rbuf, "SCSI target port");
d112 1
a112 1
		sprintf(rbuf, "SCSI initiator port");
d115 1
a115 1
		sprintf(rbuf, "Simple sub-enclosure");
d118 1
a118 1
		(void) sprintf(rbuf, "<Type 0x%x>", type);
d131 1
a131 1
		sprintf(rbuf, "status not supported");
d134 1
a134 1
		sprintf(rbuf, "ok");
d137 1
a137 1
		sprintf(rbuf, "critical");
d140 1
a140 1
		sprintf(rbuf, "non-critical");
d143 1
a143 1
		sprintf(rbuf, "unrecoverable");
d146 1
a146 1
		sprintf(rbuf, "not installed");
d149 1
a149 1
		sprintf(rbuf, "unknown status");
d152 1
a152 1
		sprintf(rbuf, "status not available");
d155 1
a155 1
		sprintf(rbuf, "unknown status code %x", code & 0xf);
d170 1
a170 1
	sprintf(ebuf, "Status=%s (bytes=0x%02x 0x%02x 0x%02x 0x%02x)",
@


1.2
log
@cleanup some code and build stuff
@
text
@d3 1
a3 1
/* $OpenBSD: eltsub.c,v 1.1 2000/02/21 08:45:15 mjacob Exp $ */
d43 3
a45 3
char *geteltnm __P((int));
static char *scode2ascii __P((u_char));
char *stat2ascii __P((int, u_char *));
@


1.1
log
@add simple SES/SAF-TE daemon and tools
@
text
@d3 1
a3 1
/* $OpenBSD: $ */
d42 4
@

