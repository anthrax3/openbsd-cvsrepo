head	1.5;
access;
symbols
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2005.07.31.06.31.55;	author dlg;	state dead;
branches;
next	1.4;

1.4
date	2004.08.01.18.32.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.22.06.21.36;	author mjacob;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.21.08.45.15;	author mjacob;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove sesd and its companion tools getencstat, setencstat and setobjstat

ok deraadt@@ im sure marco would be ok too if he was awake
@
text
@/* $NetBSD: $ */
/* $FreeBSD: $ */
/* $OpenBSD: sesd.c,v 1.4 2004/08/01 18:32:21 deraadt Exp $ */
/*
 * Copyright (c) 2000 by Matthew Jacob
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions, and the following disclaimer,
 *    without modification, immediately at the beginning of the file.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * Alternatively, this software may be distributed under the terms of the
 * the GNU Public License ("GPL").
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * Matthew Jacob
 * Feral Software
 * mjacob@@feral.com
 */
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>
#include <syslog.h>
#include <sys/ioctl.h>
#include SESINC

#define	ALLSTAT (SES_ENCSTAT_UNRECOV | SES_ENCSTAT_CRITICAL | \
	SES_ENCSTAT_NONCRITICAL | SES_ENCSTAT_INFO)

/*
 * Monitor named SES devices and note (via syslog) any changes in status.
 */

int
main(int a, char *v[])
{
	static char *usage =
	    "usage: %s [ -d ] [ -t pollinterval ] device [ device ]\n";
	int fd, polltime, dev, devbase, nodaemon;
	ses_encstat stat, *carray;

	if (a < 2) {
		fprintf(stderr, usage, *v);
		return (1);
	}

	devbase = 1;

	if (strcmp(v[1], "-d") == 0) {
		nodaemon = 1;
		devbase++;
	} else {
		nodaemon = 0;
	}

	if (a > 2 && strcmp(v[2], "-t") == 0) {
		devbase += 2;
		polltime = atoi(v[3]);
	} else {
		polltime = 30;
	}

	carray = malloc(a);
	if (carray == NULL) {
		perror("malloc");
		return (1);
	}
	for (dev = devbase; dev < a; dev++)
		carray[dev] = (ses_encstat) -1;

	/*
	 * Check to make sure we can open all devices
	 */
	for (dev = devbase; dev < a; dev++) {
		fd = open(v[dev], O_RDWR);
		if (fd < 0) {
			perror(v[dev]);
			return (1);
		}
		if (ioctl(fd, SESIOC_INIT, NULL) < 0) {
			fprintf(stderr, "%s: SESIOC_INIT fails- %s\n",
			    v[dev], strerror(errno));
			return (1);
		}
		(void) close(fd);
	}
	if (nodaemon == 0) {
		if (daemon(0, 0) < 0) {
			perror("daemon");
			return (1);
		}
		openlog("sesd", LOG_CONS, LOG_USER);
	} else {
		openlog("sesd", LOG_CONS|LOG_PERROR, LOG_USER);
	}

	for (;;) {
		for (dev = devbase; dev < a; dev++) {
			fd = open(v[dev], O_RDWR);
			if (fd < 0) {
				syslog(LOG_ERR, "%s: %m", v[dev]);
				continue;
			}

			/*
			 * Get the actual current enclosure status.
			 */
			if (ioctl(fd, SESIOC_GETENCSTAT, (caddr_t) &stat) < 0) {
				syslog(LOG_ERR,
				    "%s: SESIOC_GETENCSTAT- %m", v[dev]);
				(void) close(fd);
				continue;
			}
			(void) close(fd);

			if (stat == carray[dev])
				continue;

			carray[dev] = stat;
			if ((stat & ALLSTAT) == 0) {
				syslog(LOG_NOTICE,
				    "%s: Enclosure Status OK", v[dev]);
			}
			if (stat & SES_ENCSTAT_INFO) {
				syslog(LOG_INFO,
				    "%s: Enclosure Status Has Information",
				    v[dev]);
			}
			if (stat & SES_ENCSTAT_NONCRITICAL) {
				syslog(LOG_WARNING,
				    "%s: Enclosure Non-Critical", v[dev]);
			}
			if (stat & SES_ENCSTAT_CRITICAL) {
				syslog(LOG_CRIT,
				    "%s: Enclosure Critical", v[dev]);
			}
			if (stat & SES_ENCSTAT_UNRECOV) {
				syslog(LOG_ALERT,
				    "%s: Enclosure Unrecoverable", v[dev]);
			}
		}
		sleep(polltime);
	}
	/* NOTREACHED */
}
@


1.4
log
@ansi cleanup; khalek@@linuxgamers.net
@
text
@d3 1
a3 1
/* $OpenBSD: sesd.c,v 1.3 2002/02/16 21:28:09 millert Exp $ */
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d3 1
a3 1
/* $OpenBSD: sesd.c,v 1.2 2000/02/22 06:21:36 mjacob Exp $ */
a47 1
int main(int, char **);
d54 1
a54 3
main(a, v)
	int a;
	char **v;
@


1.2
log
@cleanup some code and build stuff
@
text
@d3 1
a3 1
/* $OpenBSD: sesd.c,v 1.1 2000/02/21 08:45:15 mjacob Exp $ */
d48 1
a48 1
int main __P((int, char **));
@


1.1
log
@add simple SES/SAF-TE daemon and tools
@
text
@d3 1
a3 1
/* $OpenBSD: $ */
d48 1
d61 1
a61 1
	int fd, polltime, dev, devbase, nodaemon, bpri;
a120 1
			char buf[128];
@

