head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.30
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.28
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.26
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.24
	OPENBSD_5_0:1.11.0.22
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.20
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.18
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.14
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.09.06.20.07.46;	author tobias;	state Exp;
branches;
next	1.15;
commitid	reINqmTB4yrJf2SP;

1.15
date	2015.09.06.19.56.43;	author tobias;	state Exp;
branches;
next	1.14;
commitid	Tm2ni87873CK1zwM;

1.14
date	2015.02.09.23.00.15;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	822YD61EeG0Xl9Na;

1.13
date	2013.10.20.16.09.25;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2013.10.20.13.22.44;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.07.10.43.20;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.27.05.03.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.03.09.45.29;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.01.18.32.21;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.09.16.22.04;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.19.23.50.06;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.28.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.02.51.36;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.13.03.10.21;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.30.06.50.12;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.02.01.29.44;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.16
log
@UINT_MAX would overflow the integer calculation later on, leading to
floating point exception just like -1 would do. Use INT_MAX, which is
already way too high to make sense anyway.
@
text
@/* $OpenBSD: wsfontload.c,v 1.15 2015/09/06 19:56:43 tobias Exp $ */
/* $NetBSD: wsfontload.c,v 1.2 2000/01/05 18:46:43 ad Exp $ */

/*
 * Copyright (c) 1999
 *	Matthias Drochner.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project
 *	by Matthias Drochner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/ioctl.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>

#include <err.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <dev/wscons/wsconsio.h>

#define DEFDEV		"/dev/ttyCcfg"
#define DEFENC		WSDISPLAY_FONTENC_ISO
#define DEFBITORDER	WSDISPLAY_FONTORDER_L2R
#define DEFBYTEORDER	WSDISPLAY_FONTORDER_L2R

int main(int, char**);
static void usage(void);
static int getencoding(char *);

static void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr,
	    "usage: %s [-Bbl] [-e encoding] [-f file] [-h height] [-N name]\n"
	    "       %*s [-w width] [fontfile]\n",
	    __progname, (int)strlen(__progname), "");
	exit(1);
}

static const struct {
	const char *name;
	int val;
} encodings[] = {
	{"iso",  WSDISPLAY_FONTENC_ISO},
	{"ibm",  WSDISPLAY_FONTENC_IBM},
#if 0
	{"pcvt", WSDISPLAY_FONTENC_PCVT},
	{"iso7", WSDISPLAY_FONTENC_ISO7},
#endif
};

int
main(int argc, char *argv[])
{
	char *wsdev, *infile, *p;
	struct wsdisplay_font f;
	int c, res, wsfd, ffd, type, list, i;
	int defwidth, defheight;
	struct stat stat;
	size_t len;
	void *buf;
	const char *errstr;

	wsdev = DEFDEV;
	memset(&f, 0, sizeof f);
	f.firstchar = f.numchars = -1;
	f.encoding = -1;

	list = 0;
	while ((c = getopt(argc, argv, "bB:e:f:h:lN:w:")) != -1) {
		switch (c) {
		case 'f':
			wsdev = optarg;
			break;
		case 'w':
			f.fontwidth = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "font width is %s: %s", errstr, optarg);
			break;
		case 'h':
			f.fontheight = strtonum(optarg, 1, INT_MAX, &errstr);
			if (errstr)
				errx(1, "font height is %s: %s",
				    errstr, optarg);
			break;
		case 'e':
			f.encoding = getencoding(optarg);
			break;
		case 'l':
			list = 1;
			break;
		case 'N':
			strlcpy(f.name, optarg, WSFONT_NAME_SIZE);
			break;
		case 'b':
			f.bitorder = WSDISPLAY_FONTORDER_R2L;
			break;
		case 'B':
			f.byteorder = WSDISPLAY_FONTORDER_R2L;
			break;
		case '?':
		default:
			usage();
			break;
		}
	}
	argc -= optind;
	argv += optind;

	if (list && argc)
		usage();

	if (argc > 1)
		usage();

	wsfd = open(wsdev, O_RDWR, 0);
	if (wsfd < 0)
		err(2, "open %s", wsdev);

	if (list) {
		i = 0;
		p = " # Name             Encoding  W  H";
		do {
			f.index = i;
			res = ioctl(wsfd, WSDISPLAYIO_LSFONT, &f);
			if (res == 0) {
				if (f.name[0]) {
					if (p) {
						puts(p);
						p = NULL;
					}
					printf("%2d %-16s %8s %2d %2d\n",
					    f.index, f.name,
					    encodings[f.encoding].name,
					    f.fontwidth, f.fontheight);
				}
			}
			i++;
		} while(res == 0);

		return (0);
	}

	if (argc > 0) {
		infile = argv[0];
		ffd = open(infile, O_RDONLY, 0);
		if (ffd < 0)
			err(4, "open %s", infile);
		if (!*f.name)
			strlcpy(f.name, infile, WSFONT_NAME_SIZE);
	} else {
		infile = "stdin";
		ffd = STDIN_FILENO;
	}

	res = ioctl(wsfd, WSDISPLAYIO_GTYPE, &type);
	if (res != 0)
		type = WSDISPLAY_TYPE_UNKNOWN;

	switch (type) {
	/* text-mode VGA */
	case WSDISPLAY_TYPE_ISAVGA:
	case WSDISPLAY_TYPE_PCIVGA:
		defwidth = 8;
		defheight = 16;
		break;
	/* raster frame buffers */
	default:
		/* XXX ought to be computed from the frame buffer resolution */
		defwidth = 12;
		defheight = 22;
		break;
	}

	f.index = -1;
	if (f.fontwidth == 0)
		f.fontwidth = defwidth;
	if (f.fontheight == 0)
		f.fontheight = defheight;
	if (f.stride == 0)
		f.stride = (f.fontwidth + 7) / 8;
	if (f.encoding < 0)
		f.encoding = DEFENC;
	if (f.bitorder == 0)
		f.bitorder = DEFBITORDER;
	if (f.byteorder == 0)
		f.byteorder = DEFBYTEORDER;

	if (f.firstchar < 0)
		f.firstchar = 0;

	if (f.numchars < 0) {
		f.numchars = 256;
		if (argc > 0) {
			if (fstat(ffd, &stat) == 0)
				f.numchars = stat.st_size /
				    f.stride / f.fontheight;
		}
	}

	len = f.fontheight * f.numchars * f.stride;
	if (!len)
		errx(1, "invalid font size");

	buf = malloc(len);
	if (!buf)
		errx(1, "malloc");
	res = read(ffd, buf, len);
	if (res < 0)
		err(4, "read %s", infile);
	if (res != len)
		errx(4, "short read on %s", infile);

	f.data = buf;

	res = ioctl(wsfd, WSDISPLAYIO_LDFONT, &f);
	if (res < 0)
		err(3, "WSDISPLAYIO_LDFONT");

	return (0);
}

static int
getencoding(char *name)
{
	int i;

	for (i = 0; i < sizeof(encodings) / sizeof(encodings[0]); i++)
		if (!strcmp(name, encodings[i].name))
			return (encodings[i].val);

	if (sscanf(name, "%d", &i) != 1)
		errx(1, "invalid encoding");
	return (i);
}
@


1.15
log
@Avoid floating point exception when an invalid font width was specified.
Also print actually helpful error messages when command line arguments
are invalid.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.14 2015/02/09 23:00:15 deraadt Exp $ */
d108 1
a108 1
			f.fontwidth = strtonum(optarg, 1, UINT_MAX, &errstr);
d113 1
a113 1
			f.fontheight = strtonum(optarg, 1, UINT_MAX, &errstr);
d115 2
a116 1
				errx(1, "font height is %s: %s", errstr, optarg);
@


1.14
log
@clean up flags++ instances around getopt()
ok florian
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.13 2013/10/20 16:09:25 miod Exp $ */
a35 2
#include <sys/types.h>
#include <sys/time.h>
d38 2
d41 3
d46 1
a46 1
#include <fcntl.h>
a47 2
#include <string.h>
#include <err.h>
d94 1
d108 3
a110 3
			if (sscanf(optarg, "%d", &f.fontwidth) != 1)
				errx(1, "invalid font width of %d",
				    f.fontwidth);
d113 3
a115 3
			if (sscanf(optarg, "%d", &f.fontheight) != 1)
				errx(1, "invalid font height of %d",
				    f.fontheight);
@


1.13
log
@Report i/o errors on stdin as occuring on "stdin" not "(null)"...
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.12 2013/10/20 13:22:44 miod Exp $ */
d119 1
a119 1
			list++;
@


1.12
log
@If the font to load is not a file, compute the numbers of characters it
contains from its size, instead of assuming 256.

Default to 12x22 glyph instead of 8x16 if the display is a raster framer buffer
(as opposed to a VGA-compatible text mode).
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.11 2006/08/07 10:43:20 kettenis Exp $ */
d86 1
a86 1
	char *wsdev, *p;
d174 2
a175 1
		ffd = open(argv[0], O_RDONLY, 0);
d177 1
a177 1
			err(4, "open %s", argv[0]);
d179 5
a183 3
			strlcpy(f.name, argv[0], WSFONT_NAME_SIZE);
	} else
		ffd = 0;
d239 1
a239 1
		err(4, "read %s", argv[0]);
d241 1
a241 1
		errx(4, "short read on %s", argv[0]);
@


1.11
log
@Remove the Sony wsfonts from the list of fonts with special encoding.

requested by miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.10 2005/05/27 05:03:47 millert Exp $ */
d39 1
a50 2
#define DEFWIDTH	8
#define DEFHEIGHT	16
d71 1
a71 2
static const
struct {
d77 1
d80 1
d88 3
a90 1
	int c, res, wsfd, ffd, list, i;
d95 3
a97 10
	f.index = -1;
	f.fontwidth = DEFWIDTH;
	f.fontheight = DEFHEIGHT;
	f.firstchar = 0;
	f.numchars = 256;
	f.stride = 0;
	f.encoding = DEFENC;
	f.name[0] = 0;
	f.bitorder = DEFBITORDER;
	f.byteorder = DEFBYTEORDER;
d182 25
a206 1
	if (!f.stride)
d208 19
@


1.10
log
@include sys/time.h to get struct timeval
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.9 2004/08/03 09:45:29 jmc Exp $ */
a80 1
	{"sony", WSDISPLAY_FONTENC_SONY},
@


1.9
log
@- kill a rake of unnecessary .Bk/.Ek macros
- simplify SYNOPSIS
- sort options
- adjust -width for FILES
- standard EXAMPLES format
- sync usage()
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.8 2004/08/01 18:32:21 deraadt Exp $ */
d36 4
a43 2
#include <sys/types.h>
#include <sys/ioctl.h>
@


1.8
log
@ansi cleanup; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.7 2004/07/09 16:22:04 deraadt Exp $ */
d64 1
a64 2
	    "usage: %s [-f file] -l\n"
	    "       %s [-B] [-b] [-e encoding] [-f file] [-h height] [-N name]\n"
d66 1
a66 1
	    __progname, __progname, (int)strlen(__progname), "");
@


1.7
log
@ansi
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.6 2003/04/19 23:50:06 millert Exp $ */
d84 1
a84 3
main(argc, argv)
	int argc;
	char **argv;
d212 1
a212 2
getencoding(name)
	char *name;
@


1.6
log
@Sync usage() and man page; closes PR 3219
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.5 2002/02/16 21:28:10 millert Exp $ */
d59 1
a59 1
usage()
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.4 2001/03/14 02:51:36 mickey Exp $ */
d64 4
a67 5
		"Usage: %s [-f wsdev] -l\n"
		"       %s [-f wsdev] -d name\n"
		"       %s [-w width] [-h height] [-e encoding] "
		"[-N name] [-b] [-B] [fontfile]\n",
		      __progname, __progname, __progname);
@


1.4
log
@allow listing and soon deleting fonts; aaron@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.3 2001/03/13 03:10:21 mickey Exp $ */
d54 3
a56 3
int main __P((int, char**));
static void usage __P((void));
static int getencoding __P((char *));
@


1.3
log
@better error messages, order getopt options
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.2 2001/01/30 06:50:12 aaron Exp $ */
d42 1
d64 5
a68 3
		"Usage: %s [-f wsdev] [-w width] [-h height] [-e encoding]"
		" [-N name] [-b] [-B] [fontfile]\n",
		      __progname);
d72 12
d89 1
a89 1
	char *wsdev;
d91 1
a91 1
	int c, res, wsfd, ffd;
d96 1
d103 1
a103 1
	f.name = 0;
d107 2
a108 1
	while ((c = getopt(argc, argv, "bBe:f:h:N:w:")) != -1) {
d126 3
d130 1
a130 1
			f.name = optarg;
d147 3
d157 24
d185 2
a186 2
		if (!f.name)
			f.name = argv[0];
a212 9

static struct {
	char *name;
	int val;
} encodings[] = {
	{"iso", WSDISPLAY_FONTENC_ISO},
	{"ibm", WSDISPLAY_FONTENC_IBM},
	{"pcvt", WSDISPLAY_FONTENC_PCVT},
};
@


1.2
log
@Change /dev/ttyE* to /dev/ttyC* to reflect reality in OpenBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: wsfontload.c,v 1.1 2000/07/02 01:29:44 mickey Exp $ */
d91 1
a91 1
	while ((c = getopt(argc, argv, "f:w:h:e:N:bB")) != -1) {
d98 2
a99 1
				errx(1, "invalid font width");
d103 2
a104 1
				errx(1, "invalid font height");
d132 1
a132 1
		err(2, "open ws");
d137 1
a137 1
			err(4, "open font");
d154 1
a154 1
		err(4, "read font");
d156 1
a156 1
		errx(4, "short read");
@


1.1
log
@wscons font loader; initial import from netbsd tree
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 1
a46 1
#define DEFDEV		"/dev/ttyEcfg"
@

