head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.34
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.24
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.28
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.26
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.01.21.08.33.51;	author krw;	state Exp;
branches;
next	1.1;
commitid	xpTSTOgSQRGS1RiF;

1.1
date	2008.06.15.04.43.28;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: test.c,v 1.1 2008/06/15 04:43:28 sturm Exp $	*/

#include <stdio.h>
#include <rpc/rpc.h>
#include <rpcsvc/sm_inter.h>


/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = {25, 0};

struct sm_stat_res *
sm_stat_1(argp, clnt)
	struct sm_name *argp;
	CLIENT *clnt;
{
	static struct sm_stat_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, SM_STAT, xdr_sm_name, argp, xdr_sm_stat_res,
	    &res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return (&res);
}


struct sm_stat_res *
sm_mon_1(argp, clnt)
	struct mon *argp;
	CLIENT *clnt;
{
	static struct sm_stat_res res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, SM_MON, xdr_mon, argp, xdr_sm_stat_res,
	    &res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return (&res);
}


struct sm_stat *
sm_unmon_1(argp, clnt)
	struct mon_id *argp;
	CLIENT *clnt;
{
	static struct sm_stat res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, SM_UNMON, xdr_mon_id, argp, xdr_sm_stat,
	    &res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return (&res);
}


struct sm_stat *
sm_unmon_all_1(argp, clnt)
	struct my_id *argp;
	CLIENT *clnt;
{
	static struct sm_stat res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, SM_UNMON_ALL, xdr_my_id, argp, xdr_sm_stat,
	    &res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return (&res);
}


void *
sm_simu_crash_1(argp, clnt)
	void   *argp;
	CLIENT *clnt;
{
	static char res;

	bzero((char *) &res, sizeof(res));
	if (clnt_call(clnt, SM_SIMU_CRASH, xdr_void, argp, xdr_void,
	    &res, TIMEOUT) != RPC_SUCCESS)
		return (NULL);
	return ((void *) &res);
}


int
main(argc, argv)
	int argc;
	char **argv;
{
	CLIENT *cli;
	char dummy;
	void *out;
	struct mon mon;

	if (argc < 2) {
		warnx("usage: test {<hostname> | crash}");
		errx(1, "Always talks to statd at localhost");
	}
	printf("Creating client for localhost\n");
	cli = clnt_create("localhost", SM_PROG, SM_VERS, "udp");
	if (!cli) {
		errx(1, "Failed to create client");
	}
	mon.mon_id.mon_name = argv[1];
	mon.mon_id.my_id.my_name = argv[1];
	mon.mon_id.my_id.my_prog = SM_PROG;
	mon.mon_id.my_id.my_vers = SM_VERS;
	mon.mon_id.my_id.my_proc = 1;	/* have it call sm_stat() !!! */

	if (strcmp(argv[1], "crash")) {
		/* Hostname given */
		struct sm_stat_res *res;
		if (res = sm_mon_1(&mon, cli))
			printf("Success!\n");
		else
			printf("Fail\n");
	} else {
		if (out = sm_simu_crash_1(&dummy, cli))
			printf("Success!\n");
		else
			printf("Fail\n");
	}

	return 0;
}
@


1.1
log
@initial import of rpc.statd, basically from NetBSD

"just get it in" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: test.c,v 1.2 1997/10/17 16:03:09 lukem Exp $	*/
d86 1
a86 1
int 
@

