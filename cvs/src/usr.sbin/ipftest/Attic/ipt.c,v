head	1.20;
access;
symbols
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_8:1.17.0.4
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.17.0.2
	OPENBSD_2_7_BASE:1.17
	OPENBSD_2_6:1.13.0.4
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.20
date	2001.05.30.02.12.44;	author deraadt;	state dead;
branches;
next	1.19;

1.19
date	2001.01.30.04.31.02;	author kjell;	state Exp;
branches;
next	1.18;

1.18
date	2001.01.17.06.01.22;	author fgsch;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.13.23.40.20;	author kjell;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.16.22.34.24;	author kjell;	state Exp;
branches;
next	1.15;

1.15
date	2000.02.01.19.30.02;	author kjell;	state Exp;
branches;
next	1.14;

1.14
date	99.12.15.05.20.26;	author kjell;	state Exp;
branches;
next	1.13;

1.13
date	99.02.05.05.58.47;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	98.09.15.10.05.51;	author pattonme;	state Exp;
branches;
next	1.11;

1.11
date	98.01.26.04.16.40;	author dgregor;	state Exp;
branches;
next	1.10;

1.10
date	97.09.22.05.17.47;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.04.19.19.10.22;	author kstailey;	state Exp;
branches;
next	1.8;

1.8
date	97.02.11.22.23.58;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.01.17.07.14.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	96.10.08.07.33.36;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.04.59.25;	author dm;	state Exp;
branches;
next	1.4;

1.4
date	96.05.13.19.49.50;	author dm;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.21.40.27;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	96.01.25.05.41.35;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.07.02.34.28;	author dm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@/*	$OpenBSD: ipt.c,v 1.19 2001/01/30 04:31:02 kjell Exp $	*/

/*
 * Copyright (C) 1993-2000 by Darren Reed.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that this notice is preserved and due credit is given
 * to the original author and the contributors.
 */
#ifdef	__FreeBSD__
# include <osreldate.h>
#endif
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <sys/types.h>
#if !defined(__SVR4) && !defined(__svr4__) && !defined(__sgi)
#include <strings.h>
#else
#if !defined(__sgi)
#include <sys/byteorder.h>
#endif
#include <sys/file.h>
#endif
#include <sys/param.h>
#include <sys/time.h>
#include <stdlib.h>
#include <unistd.h>
#include <stddef.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#ifndef	linux
#include <netinet/ip_var.h>
#endif
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netinet/tcp.h>
#include <netinet/ip_icmp.h>
#include <net/if.h>
#if __FreeBSD_version >= 300000
# include <net/if_var.h>
#endif
#include <netdb.h>
#include <arpa/nameser.h>
#include <arpa/inet.h>
#include <resolv.h>
#include <ctype.h>
#include <netinet/ip_fil_compat.h>
#include <netinet/tcpip.h>
#include <netinet/ip_fil.h>
#include <netinet/ip_nat.h>
#include <netinet/ip_state.h>
#include "ipf.h"
#include "ipt.h"

#if !defined(lint)
static const char sccsid[] = "@@(#)ipt.c	1.19 6/3/96 (C) 1993-2000 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ipt.c,v 2.6 2000/03/13 22:10:25 darrenr Exp $";
#endif

extern	char	*optarg;
extern	struct frentry	*ipfilter[2][2];
extern	struct ipread	snoop, etherf, tcpd, pcap, iptext, iphex;
extern	struct ifnet	*get_unit __P((char *, int));
extern	void	init_ifp __P((void));
extern	ipnat_t	*natparse __P((char *, int));
extern	int	fr_running;

int	opts = 0;
#ifdef	USE_INET6
int	use_inet6 = 0;
#endif
int	main __P((int, char *[]));

int main(argc,argv)
int argc;
char *argv[];
{
	struct	ipread	*r = &iptext;
	u_long	buf[2048];
	struct	ifnet	*ifp;
	char	*rules = NULL, *datain = NULL, *iface = NULL;
	ip_t	*ip;
	int	fd, i, dir = 0, c;

	while ((c = getopt(argc, argv, "6bdEHi:I:NoPr:STvX")) != -1)
		switch (c)
		{
#ifdef	USE_INET6
		case '6' :
			use_inet6 = 1;
			break;
#endif
		case 'b' :
			opts |= OPT_BRIEF;
			break;
		case 'd' :
			opts |= OPT_DEBUG;
			break;
		case 'i' :
			datain = optarg;
			break;
		case 'I' :
			iface = optarg;
			break;
		case 'o' :
			opts |= OPT_SAVEOUT;
			break;
		case 'r' :
			rules = optarg;
			break;
		case 'v' :
			opts |= OPT_VERBOSE;
			break;
		case 'E' :
			r = &etherf;
			break;
		case 'H' :
			r = &iphex;
			break;
		case 'N' :
			opts |= OPT_NAT;
			break;
		case 'P' :
			r = &pcap;
			break;
		case 'S' :
			r = &snoop;
			break;
		case 'T' :
			r = &tcpd;
			break;
		case 'X' :
			r = &iptext;
			break;
		}

	if (!rules) {
		(void)fprintf(stderr,"no rule file present\n");
		exit(-1);
	}

	nat_init();
	fr_stateinit();
	initparse();
	fr_running = 1;

	if (rules) {
		char	line[513], *s;
		void	*fr;
		FILE	*fp;
		int     linenum = 0;

		if (!strcmp(rules, "-"))
			fp = stdin;
		else if (!(fp = fopen(rules, "r"))) {
			(void)fprintf(stderr, "couldn't open %s\n", rules);
			exit(-1);
		}
		if (!(opts & OPT_BRIEF))
			(void)printf("opening rule file \"%s\"\n", rules);
		while (fgets(line, sizeof(line)-1, fp)) {
		        linenum++;
			/*
			 * treat both CR and LF as EOL
			 */
			if ((s = index(line, '\n')))
				*s = '\0';
			if ((s = index(line, '\r')))
				*s = '\0';
			/*
			 * # is comment marker, everything after is a ignored
			 */
			if ((s = index(line, '#')))
				*s = '\0';

			if (!*line)
				continue;

			/* fake an `ioctl' call :) */

			if ((opts & OPT_NAT) != 0) {
				if (!(fr = natparse(line, linenum)))
					continue;
				i = IPL_EXTERN(ioctl)(IPL_LOGNAT, SIOCADNAT,
						      (caddr_t)&fr,
						      FWRITE|FREAD);
				if (opts & OPT_DEBUG)
					fprintf(stderr,
						"iplioctl(ADNAT,%p,1) = %d\n",
						fr, i);
			} else {
				if (!(fr = parse(line, linenum)))
					continue;
				i = IPL_EXTERN(ioctl)(0, SIOCADAFR,
						      (caddr_t)&fr,
						      FWRITE|FREAD);
				if (opts & OPT_DEBUG)
					fprintf(stderr,
						"iplioctl(ADAFR,%p,1) = %d\n",
						fr, i);
			}
		}
		(void)fclose(fp);
	}

	if (opts & OPT_SAVEOUT)
		init_ifp();

	if (datain)
		fd = (*r->r_open)(datain);
	else
		fd = (*r->r_open)("-");

	if (fd < 0)
		exit(-1);

	ip = (ip_t *)buf;
	while ((i = (*r->r_readip)((char *)buf, sizeof(buf),
				    &iface, &dir)) > 0) {
		ifp = iface ? get_unit(iface, ip->ip_v) : NULL;
		ip->ip_off = ntohs(ip->ip_off);
		ip->ip_len = ntohs(ip->ip_len);
		i = fr_check(ip, ip->ip_hl << 2, ifp, dir, (mb_t **)&buf);
		if ((opts & OPT_NAT) == 0)
			switch (i)
			{
			case -2 :
				(void)printf("auth");
				break;
			case -1 :
				(void)printf("block");
				break;
			case 0 :
				(void)printf("pass");
				break;
			case 1 :
				(void)printf("nomatch");
				break;
			}

		if (!(opts & OPT_BRIEF)) {
			putchar(' ');
			printpacket((ip_t *)buf);
			printf("--------------");
		} else if ((opts & (OPT_BRIEF|OPT_NAT)) == (OPT_NAT|OPT_BRIEF))
			printpacket((ip_t *)buf);
#ifndef	linux
		if (dir && ifp && ip->ip_v)
# ifdef __sgi
			(*ifp->if_output)(ifp, (void *)buf, NULL);
# else
			(*ifp->if_output)(ifp, (void *)buf, NULL, 0);
# endif
#endif
		if ((opts & (OPT_BRIEF|OPT_NAT)) != (OPT_NAT|OPT_BRIEF))
			putchar('\n');
		dir = 0;
	}
	(*r->r_close)();
	return 0;
}
@


1.19
log
@reimplement whacked changes. ip_compat.h to ip_fil_compat.h
@
text
@d1 1
a1 1
/*	$OpenBSD: ipt.c,v 1.18 2001/01/17 06:01:22 fgsch Exp $	*/
@


1.18
log
@2nd part of the ipf code; need more testing.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
#include <netinet/ip_compat.h>
@


1.17
log
@Import of Darren Reed's IPFilter 3.3.11. See sbin/ipf/HISTORY for detailed
changelog. Documentation changes are now way behind. Volunteers?
@
text
@d4 1
a4 1
 * Copyright (C) 1993-1998 by Darren Reed.
d50 1
a50 1
#include <netinet/ip_fil_compat.h>
d59 2
a60 2
static const char sccsid[] = "@@(#)ipt.c	1.19 6/3/96 (C) 1993-1996 Darren Reed";
static const char rcsid[] = "@@(#)$IPFilter: ipt.c,v 2.1.2.1 2000/01/24 14:49:11 darrenr Exp $";
d66 1
a66 1
extern	struct ifnet	*get_unit __P((char *));
d72 3
d88 1
a88 1
	while ((c = getopt(argc, argv, "bdEHi:I:NoPr:STvX")) != -1)
d91 5
d188 2
a189 1
						      fr, FWRITE|FREAD);
d197 2
a198 1
				i = IPL_EXTERN(ioctl)(0, SIOCADDFR, fr,
d202 1
a202 1
						"iplioctl(ADDFR,%p,1) = %d\n",
d223 1
a223 1
		ifp = iface ? get_unit(iface) : NULL;
@


1.16
log
@Import IPFilter 3.3.9. Primarily, bugfixes since 3.3.8. See sbin/ipf/HISTORY
for details.
@
text
@@


1.15
log
@Update to IPFilter 3.3.8. Man pages still to go. See sbin/ipf/HISTORY
for details.
@
text
@@


1.14
log
@Import of Darren Reed's IPFilter 3.3.4, including OpenBSD patches.

Many, many enhancements and improvements, including new in-kernel
proxies, enhancements to logging, and many bugfixes.

Note: Man pages have not yet been re-converted to mdoc.
@
text
@d1 2
a2 1
/* $OpenBSD$ */
d60 1
a60 1
static const char rcsid[] = "@@(#)$Id: ipt.c,v 2.1 1999/08/04 17:30:08 darrenr Exp $";
d69 1
d140 1
@


1.13
log
@ipf 3.2.10; work by kjell
@
text
@d1 1
a1 1
/*    $OpenBSD: ipt.c,v 1.12 1998/09/15 10:05:51 pattonme Exp $     */
d49 1
a49 5
#if defined(__OpenBSD__)
# include <netinet/ip_fil_compat.h>
#else
# include <netinet/ip_compat.h>
#endif
d52 2
d59 1
a59 1
static const char rcsid[] = "@@(#)$Id: ipt.c,v 1.12 1998/09/15 10:05:51 pattonme Exp $";
d67 1
d77 1
a77 1
	u_long	buf[64];
d83 1
a83 1
	while ((c = getopt(argc, argv, "bdEHi:I:oPr:STvX")) != -1)
d113 3
d135 2
a139 1
		struct	frentry *fr;
d141 1
d143 1
d154 1
a170 2
			if (!(fr = parse(line)))
				continue;
d172 20
a191 5
			i = IPL_EXTERN(ioctl)(0, SIOCADDFR, (caddr_t)fr, FWRITE|FREAD);
			if (opts & OPT_DEBUG)
				fprintf(stderr,
					"iplioctl(SIOCADDFR,%p,1) = %d\n",
					fr, i);
d213 18
a230 15
		switch (fr_check(ip, ip->ip_hl << 2, ifp, dir, (mb_t **)&buf))
		{
		case -2 :
			(void)printf("auth");
			break;
		case -1 :
			(void)printf("block");
			break;
		case 0 :
			(void)printf("pass");
			break;
		case 1 :
			(void)printf("nomatch");
			break;
		}
d235 2
a236 1
		}
d245 2
a246 1
		putchar('\n');
@


1.12
log
@updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
/*    $OpenBSD: ipt.c,v 1.11 1998/01/26 04:16:40 dgregor Exp $     */
d3 1
a3 1
 * Copyright (C) 1993-1997 by Darren Reed.
d61 1
a61 1
static const char rcsid[] = "@@(#)$Id$";
@


1.11
log
@IPF 3.2.3
@
text
@d1 1
a1 1
/*    $OpenBSD$     */
d49 5
a53 1
#include "ip_fil_compat.h"
d55 1
a55 1
#include "ip_fil.h"
d61 1
a61 1
static const char rcsid[] = "@@(#)$Id: ipt.c,v 2.0.2.12.2.1 1997/11/12 10:58:10 darrenr Exp $";
@


1.10
log
@-Wall
@
text
@d1 1
d3 1
a3 1
 * (C)opyright 1993-1996 by Darren Reed.
d9 3
d15 2
a16 1
#if !defined(__SVR4) && !defined(__svr4__)
d19 1
d22 2
a23 1
#include <sys/types.h>
d25 1
d33 1
d35 1
a39 1
#include <netinet/tcpip.h>
d41 3
a43 2
#include "ip_fil_compat.h"
#include "ip_fil.h"
d48 4
a53 1
#include <ctype.h>
d55 3
a57 3
#if !defined(lint) && defined(LIBC_SCCS)
static	char	sccsid[] = "@@(#)ipt.c	1.19 6/3/96 (C) 1993-1996 Darren Reed";
static	char	rcsid[] = "$Id: ipt.c,v 1.9 1997/04/19 19:10:22 kstailey Exp $";
a59 1
extern	int	fr_check();
d61 4
a64 5
extern	struct	frentry	*ipfilter[2][2];
extern	struct	ipread	snoop, etherf, tcpd, pcap, iptext, iphex;
extern	void	debug(), verbose();

struct frentry	*ft_in  = NULL, *ft_out = NULL;
d67 1
a73 2
	struct	frentry	*f;
	struct	ip	*ip;
d75 1
a75 1
	int	c;
d77 2
a78 1
	int	fd, i, dir = 0;
d80 1
a80 1
	while ((c = getopt(argc, argv, "bdEHi:I:Pr:STvX")) != -1)
d95 3
d163 6
a168 13
			f = (struct frentry *)malloc(sizeof(*f));
			if (fr->fr_flags & FR_INQUE) {
				if (!ft_in)
					ft_in = ipfilter[0][0] = f;
				else
					ft_in->fr_next = f, ft_in = f;
			} else if (fr->fr_flags & FR_OUTQUE) {
				if (!ft_out)
					ft_out = ipfilter[1][0] = f;
				else
					ft_out->fr_next = f, ft_out = f;
			}
			bcopy((char *)fr, (char *)f, sizeof(*fr));
d173 3
d184 4
a187 2
	ip = (struct ip *)buf;
	while ((i = (*r->r_readip)(buf, sizeof(buf), &iface, &dir)) > 0) {
d190 1
a190 1
		switch (fr_check(ip, ip->ip_hl << 2, (struct ifnet *)iface, dir)) /* XXX */
d192 3
d207 1
a207 1
			printpacket(buf);
d210 8
@


1.9
log
@thorpej:
getopt() returns an int, not a char.
@
text
@d44 1
a44 1
static	char	rcsid[] = "$Id: ipt.c,v 1.8 1997/02/11 22:23:58 kstailey Exp $";
d178 1
a178 1
		switch (fr_check(ip, ip->ip_hl << 2, iface, dir)) /* XXX */
@


1.8
log
@IPF 1.3.7
@
text
@d44 1
a44 1
static	char	rcsid[] = "$Id: ipt.c,v 2.0.1.1 1997/01/09 15:14:44 darrenr Exp $";
d65 1
a65 1
	char	c;
@


1.7
log
@r?index -> strr?chr
@
text
@d42 1
a42 1
#ifndef	lint
d44 1
a44 1
static	char	rcsid[] = "$Id: ipt.c,v 1.6 1996/10/08 07:33:36 niklas Exp $";
d134 1
a134 1
			if ((s = strchr(line, '\n')))
d136 1
a136 1
			if ((s = strchr(line, '\r')))
d141 1
a141 1
			if ((s = strchr(line, '#')))
d178 1
a178 1
		switch (fr_check(ip, ip->ip_hl << 2, iface, dir))
@


1.6
log
@Prototype & Stylistic fixes for high -W gcc levels
@
text
@d44 1
a44 1
static	char	rcsid[] = "$Id: ipt.c,v 1.5 1996/07/18 04:59:25 dm Exp $";
d134 1
a134 1
			if ((s = index(line, '\n')))
d136 1
a136 1
			if ((s = index(line, '\r')))
d141 1
a141 1
			if ((s = index(line, '#')))
@


1.5
log
@ipfilter 3.1.0
@
text
@d32 1
d44 1
a44 1
static	char	rcsid[] = "$Id: ipt.c,v 1.1.1.1 1996/06/23 07:27:16 darrenr Exp $";
@


1.4
log
@bug fix
@
text
@d42 2
a43 1
static	char	sccsid[] = "@@(#)ipt.c	1.17 3/9/96 (C) 1993-1996 Darren Reed";
a52 2
struct	ipread 	*readers[] = { &iptext, &etherf, &tcpd, &snoop, &pcap, &iphex,
				NULL };
d60 1
a60 1
	struct	ipread	**r = readers;
d68 1
a68 1
	while ((c = getopt(argc, argv, "bdEHi:I:Pr:STv")) != -1)
d90 1
a90 3
			for (i = 0, r = readers; *r; i++, r++)
				if (*r == &etherf)
					break;
d93 1
a93 3
			for (i = 0, r = readers; *r; i++, r++)
				if (*r == &iphex)
					break;
d96 1
a96 3
			for (i = 0, r = readers; *r; i++, r++)
				if (*r == &pcap)
					break;
d99 1
a99 3
			for (i = 0, r = readers; *r; i++, r++)
				if (*r == &snoop)
					break;
d102 4
a105 3
			for (i = 0, r = readers; *r; i++, r++)
				if (*r == &tcpd)
					break;
d114 1
a114 1
	initparse ();
d166 1
a166 1
		fd = (*(*r)->r_open)(datain);
d168 1
a168 1
		fd = (*(*r)->r_open)("-");
d174 1
a174 1
	while ((i = (*(*r)->r_readip)(buf, sizeof(buf), &iface, &dir)) > 0) {
d197 1
a197 1
	(*(*r)->r_close)();
@


1.3
log
@ipfilter 3.0.4
@
text
@d122 2
@


1.2
log
@IP filter 3.0.1
@
text
@d42 1
a42 1
static	char	sccsid[] = "@@(#)ipt.c	1.15 1/7/96 (C) 1993-1996 Darren Reed";
d48 1
a48 1
extern	struct	ipread	snoop, etherf, tcpd, pcap, iptext;
d52 2
a53 1
struct	ipread 	*readers[] = { &iptext, &etherf, &tcpd, &snoop, &pcap, NULL };
d69 1
a69 1
	while ((c = getopt(argc, argv, "I:PSTEbdi:r:v")) != -1)
d95 5
d181 2
@


1.1
log
@from beurton@@fnet.fr:  Darren Reed's IP filter
@
text
@d2 1
a2 1
 * (C)opyright 1993,1994,1995 by Darren Reed.
d32 1
a32 1
#include <netinet/ip_fil.h>
d42 1
a42 1
static	char	sccsid[] = "@@(#)ipt.c	1.13 11/11/95 (C) 1993 Darren Reed";
d47 1
a47 1
extern	struct	frentry	*filterin[], *filterout[];
d151 1
a151 1
					ft_in = filterin[0] = f;
d156 1
a156 1
					ft_out = filterout[0] = f;
@
