head	1.17;
access;
symbols
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.15.0.4
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.2
	OPENBSD_2_7_BASE:1.15
	OPENBSD_2_6:1.10.0.2
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@# @;


1.17
date	2001.05.30.02.12.44;	author deraadt;	state dead;
branches;
next	1.16;

1.16
date	2000.11.09.17.53.14;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.12.21.47.53;	author aaron;	state Exp;
branches;
next	1.14;

1.14
date	2000.03.19.17.57.05;	author aaron;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.05.00.28.51;	author aaron;	state Exp;
branches;
next	1.12;

1.12
date	99.11.13.19.48.31;	author ericj;	state Exp;
branches;
next	1.11;

1.11
date	99.11.13.19.46.56;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	99.07.07.10.50.12;	author aaron;	state Exp;
branches;
next	1.9;

1.9
date	99.06.05.22.17.04;	author aaron;	state Exp;
branches;
next	1.8;

1.8
date	99.05.24.23.39.57;	author aaron;	state Exp;
branches;
next	1.7;

1.7
date	99.02.10.22.12.53;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.09.15.10.05.51;	author pattonme;	state Exp;
branches;
next	1.5;

1.5
date	98.01.26.04.16.39;	author dgregor;	state Exp;
branches;
next	1.4;

1.4
date	97.04.09.11.26.43;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.02.11.22.23.57;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.07.18.04.59.25;	author dm;	state Exp;
branches;
next	1.1;

1.1
date	96.01.07.02.34.27;	author dm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove ipf.  Darren Reed has interpreted his (old, new, whichever)
licence in a way that makes ipf not free according to the rules we
established over 5 years ago, at www.openbsd.org/goals.html (and those
same basic rules govern the other *BSD projects too).  Specifically,
Darren says that modified versions are not permitted.  But software
which OpenBSD uses and redistributes must be free to all (be they
people or companies), for any purpose they wish to use it, including
modification, use, peeing on, or even integration into baby mulching
machines or atomic bombs to be dropped on Australia.  Furthermore, we
know of a number of companies using ipf with modification like us, who
are now in the same situation, and we hope that some of them will work
with us to fill this gap that now exists in OpenBSD (temporarily, we
hope).
@
text
@.\"     $OpenBSD: ipftest.1,v 1.16 2000/11/09 17:53:14 aaron Exp $
.Dd May 23, 1999
.Dt IPFTEST 1
.Os
.Sh NAME
.Nm ipftest
.Nd test packet filter rules with arbitrary input
.Sh SYNOPSIS
.Nm ipftest
.Op Fl vbdPSTEHX
.Op Fl I Ar interface
.Fl r
.Ar filename
.Op Fl i Ar filename
.Sh DESCRIPTION
With
.Nm
operators can see the effects of an
.Nm ipf
filter ruleset on test packets, rather than having to observe
the effects of the
ruleset on live traffic.
This can reduce the disruptions experienced
during the development and refinement of secure IP environments.
.Pp
.Nm
reads test packets from
.Ar stdin
or the file specified by the
.Fl i
option, applies the ruleset specified by the
.Fl r
option to each, and generates information about the effect of the ruleset on
each packet to
.Ar stdout .
.Pp
Captured or handcrafted packets to be tested can be supplied
in a variety of formats.
See the options
.Fl P ,
.Fl S ,
.Fl T ,
.Fl H ,
and
.Fl E
for details.
In addition the
.Fl X
option gives
.Nm
the ability to use its own text description format to generate
.Dq fake
packets.
The format used is:
.Bd -ragged
in|out on
.Ar if
.Op tcp|udp|icmp
.Ar srchost
.Op , Ar port
.Ar dsthost
.Op , Ar port
.Op Fl FSRPAU
.Ed
.Pp
This allows for input or output ICMP, TCP, or UDP packets to be generated for
any interface.
For TCP or UDP it allows the specification of source and
destination ports.
For TCP it allows the specification of TCP flags.
Some examples are:
.Bd -literal -offset indent
# a UDP packet coming in on le0
in on le0 udp 10.1.1.1,2210 10.2.1.5,23
# an IP packet coming in on le0 from localhost - hmm :)
in on le0 localhost 10.4.12.1
# a TCP packet going out of le0 with the SYN flag set.
out on le0 tcp 10.4.12.1,2245 10.1.1.1,23 S
.Ed
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl v
Verbose mode.
This provides more information about which parts of rule
matching the packet passes and fails.
.It Fl d
Turn on filter rule debugging.
Currently, this only shows what caused
the rule to not match in the IP header checking (addresses/netmasks, etc).
.It Fl b
Cause the output to be a one word description of the result of passing
the packet through the filter: pass, block or nomatch.
This is used in the regression testing.
.It Fl I Ar interface
Set the interface name (used in rule matching) to be the name supplied.
This is useful with the
.Fl P , Fl S
and
.Fl E
options, where it is
not otherwise possible to associate a packet with an interface.
Normal
.Dq text packets
can override this setting.
.It Fl P
The input file is in
the binary format produced using libpcap
(i.e.,
.Xr tcpdump
version 3).
Packets are read from this file as being input (for rule purposes).
An interface may be specified using
.Fl I .
.It Fl S
The input file is in
.Dq snoop
format (see RFC 1761).
Packets are read
from this file and used as input from any interface.
This is perhaps the most useful input type, currently.
.It Fl T
The input file is text output from
.Xr tcpdump .
The text formats which
are currently supported are those which result from the following
.Xr tcpdump
option combinations:
.Bd -literal -offset indent
tcpdump -n
tcpdump -nq
tcpdump -nqt
tcpdump -nqtt
tcpdump -nqte
.Ed
.It Fl H
The input file is hex digits, representing the binary makeup of the
packets.
No length correction is made if an incorrect length is put in
the IP header.
.It Fl X
The input file is composed of text descriptions of IP packets.
.It Fl E
The input file is text output from etherfind.
The text formats which
are currently supported are those which result from the following etherfind
option combinations:
.Bd -literal -offset indent
etherfind -n
etherfind -n -t
.Ed
.It Fl i Ar filename
Specify the filename from which to take input.
Default is stdin.
.It Fl r Ar filename
Specify the filename from which to read filter rules.
.El
.Sh SEE ALSO
.Xr ipf 5 ,
.Xr ipf 8 ,
.Xr tcpdump 8
.Sh BUGS
Not all of the input formats are capable of introducing a
wide enough variety of packets to be useful in testing.
@


1.16
log
@Change all option list specifications to ".Bl -tag -width Ds". Most man
pages just needed their -width parameter tweaked to "Ds", which provides
a nice width of 6 constant characters. For consistency more than anything.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.15 2000/04/12 21:47:53 aaron Exp $
@


1.15
log
@Trailing whitespace begone!
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.14 2000/03/19 17:57:05 aaron Exp $
d82 1
a82 1
.Bl -tag -width Fl
@


1.14
log
@Remove hard sentence breaks. Add $OpenBSD$ tags where appropriate. Some other
cleanup along the way.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.13 2000/03/05 00:28:51 aaron Exp $
d161 1
a161 1
.Xr tcpdump 8 
@


1.13
log
@Finish standardizing options list introduction.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.12 1999/11/13 19:48:31 ericj Exp $
d22 2
a23 1
ruleset on live traffic. This can reduce the disruptions experienced
d38 6
a43 3
in a variety of formats. See the options
.Fl P , Fl S ,
.Fl T , Fl H
d46 2
a47 1
for details. In addition the
d53 2
a54 1
packets.  The format used is:
d67 4
a70 2
any interface. For TCP or UDP it allows the specification of source and
destination ports. For TCP it allows the specification of TCP flags.
d84 2
a85 1
Verbose mode.  This provides more information about which parts of rule
d88 2
a89 1
Turn on filter rule debugging.  Currently, this only shows what caused
d102 2
a103 1
not otherwise possible to associate a packet with an interface.  Normal
d111 3
a113 2
version 3).  Packets are read from this file as being input
(for rule purposes).  An interface may be specified using
d118 4
a121 3
format (see RFC 1761).  Packets are read
from this file and used as input from any interface.  This is perhaps the
most useful input type, currently.
d138 2
a139 1
packets.  No length correction is made if an incorrect length is put in
d144 2
a145 1
The input file is text output from etherfind.  The text formats which
d153 2
a154 1
Specify the filename from which to take input.  Default is stdin.
@


1.12
log
@remove trailing comma also. oops
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.11 1999/11/13 19:46:56 ericj Exp $
d73 1
a73 1
The following options are available:
@


1.11
log
@remove .Xr to a few non-existant man pages
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.10 1999/07/07 10:50:12 aaron Exp $
d145 1
a145 1
.Xr tcpdump 8 ,
@


1.10
log
@The proper order of the ``introductory'' macros in a man page is .Dd/.Dt/.Os.
Out of the approximately 1450 man pages, only about 90 of them were wrong.
Thanks to kwesterback@@home.com for coming up with a script and patch to repair
this. The patch also inserted a .Os macro in the few man pages that were
missing one.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.9 1999/06/05 22:17:04 aaron Exp $
a142 1
.Xr snoop 1m ,
a145 1
.Xr etherfind 8c
@


1.9
log
@remove trailing whitespace, some Nm cleanup
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.8 1999/05/24 23:39:57 aaron Exp $
d3 1
a4 1
.Dt IPFTEST 1
@


1.8
log
@new mdoc ipftest(1) man page; kwesterback@@home.com
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.7 1999/02/10 22:12:53 deraadt Exp $          
d30 1
a30 1
option, applies the ruleset specified by the 
d33 1
a33 1
each packet to 
d38 2
a39 2
.Fl P , Fl S , 
.Fl T , Fl H 
d41 1
a41 1
.Fl E 
d44 1
a44 1
option gives 
d46 2
a47 2
the ability to use its own text description format to generate 
.Dq fake 
d49 1
a49 1
.Bd -ragged 
d54 1
a54 1
.Op , Ar port 
d60 1
a60 1
This allows for input or output ICMP, TCP, or UDP packets to be generated for 
d62 1
a62 1
destination ports. For TCP it allows the specification of TCP flags. 
d96 1
a96 1
The input file is in 
@


1.7
log
@Xr repairs
@
text
@d1 75
a75 56
.\"     $OpenBSD: ipftest.1,v 1.6 1998/09/15 10:05:51 pattonme Exp $          
.TH ipftest 1
.SH NAME
ipftest \- test packet filter rules with arbitrary input.
.SH SYNOPSIS
.B ipftest
[
.B \-vbdPSTEHX
] [
.B \-I
interface
]
.B \-r
<filename>
[
.B \-i
<filename>
]
.SH DESCRIPTION
.PP
\fBipftest\fP is provided for the purpose of being able to test a set of
filter rules without having to put them in place, in operation and proceed
to test their effectiveness.  The hope is that this minimizes disruptions
in providing a secure IP environment.
.PP
\fBipftest\fP will parse any standard ruleset for use with \fBipf\fP
and apply input, returning output as to the result.  However, \fBipftest\fP
will return one of three values for packets passed through the filter:
pass, block or nomatch.  This is intended to give the operator a better
idea of what is happening with packets passing through their filter
ruleset.
.PP
When used without either of \fB\-S\fP, \fB\-T\fP or \fB\-E\fP,
\fBipftest\fP uses its own text input format to generate "fake" IP packets.
The format used is as follows:
.nf
		"in"|"out" "on" if ["tcp"|"udp"|"icmp"]
			srchost[,srcport] dsthost[,destport] [FSRPAU]
.fi
.PP
This allows for a packet going "in" or "out" of an interface (if) to be
generated, being one of the three main protocols (optionally), and if
either TCP or UDP, a port parameter is also expected.  If TCP is selected,
it is possible to (optionally) supply TCP flags at the end.  Some examples
are:
.nf
		# a UDP packet coming in on le0
		in on le0 udp 10.1.1.1,2210 10.2.1.5,23
		# an IP packet coming in on le0 from localhost - hmm :)
		in on le0 localhost 10.4.12.1
		# a TCP packet going out of le0 with the SYN flag set.
		out on le0 tcp 10.4.12.1,2245 10.1.1.1,23 S
.fi
.SH OPTIONS
.TP
.B \-v
d77 3
a79 4
matching the input packet passes and fails.
.TP
.B \-d
Turn on filter rule debugging.  Currently, this only shows you what caused
d81 3
a83 4
.TP
.B \-b
Cause the output to be a brief summary (one-word) of the result of passing
the packet through the filter; either "pass", "block" or "nomatch".
d85 1
a85 2
.TP
.BR \-I \0<interface>
d87 5
a91 1
This is useful with the \fB\-P, \-S, \-T\fP and \fB\-E\fP options, where it is
d93 14
a106 9
"text packets" can override this setting.
.TP
.B \-P
The input file specified by \fB\-i\fP is a binary file produced using libpcap
(i.e., tcpdump version 3).  Packets are read from this file as being input
(for rule purposes).  An interface maybe specified using \fB\-I\fP.
.TP
.B \-S
The input file is to be in "snoop" format (see RFC 1761).  Packets are read
d109 6
a114 4
.TP
.B \-T
The input file is to be text output from tcpdump.  The text formats which
are currently supported are those which result from the following tcpdump
d116 10
a125 13
.PP
.nf
		tcpdump -n
		tcpdump -nq
		tcpdump -nqt
		tcpdump -nqtt
		tcpdump -nqte
.fi
.LP
.TP
.B \-H
The input file is to be hex digits, representing the binary makeup of the
packet.  No length correction is made, if an incorrect length is put in
d127 1
a127 2
.TP
.B \-X
d129 2
a130 3
.TP
.B \-E
The input file is to be text output from etherfind.  The text formats which
d133 5
a137 8
.PP
.nf
		etherfind -n
		etherfind -n -t
.fi
.LP
.TP
.BR \-i \0<filename>
d139 1
a139 2
.TP
.BR \-r \0<filename>
d141 10
a150 6
.SH FILES
.SH SEE ALSO
ipf(8), ipf(5), snoop(1m), tcpdump(8), etherfind(8c)
.SH BUGS
Not all of the input formats are sufficiently capable of introducing a
wide enough variety of packets for them to be all useful in testing.
@


1.6
log
@updated to v3.2.9 of Darren's codebase. His code reimplements variable
locking, replaces u_long's with u_32_t to properly handle 64bit archs.
Wrapped OpenBSD specific preprocessor logic.
@
text
@d1 1
a1 1
.\"     $OpenBSD: ipftest.1,v 1.5 1998/01/26 04:16:39 dgregor Exp $          
d125 1
a125 1
ipf(1), ipf(5), snoop(1m), tcpdump(8), etherfind(8c)
@


1.5
log
@IPF 3.2.3
@
text
@d1 2
a2 2
.\"     $OpenBSD: ipf.1,v 1.11 1997/04/09 11:44:25 kstailey Exp $          
.TH ipftest 8
d125 1
a125 1
ipf(8), ipf(5), snoop(1m), tcpdump(8), etherfind(8c)
@


1.4
log
@spelling
@
text
@d1 1
d125 1
a125 1
ipf(1), ipf(5), snoop(1m), tcpdump(8), etherfind(8c)
@


1.3
log
@IPF 1.3.7
@
text
@d3 1
a3 1
ipftest \- test packet filter rules with arbitary input.
d22 1
a22 1
to test their effectiveness.  The hope is that this minimises disruptions
@


1.2
log
@ipfilter 3.1.0
@
text
@a0 1
.LP
d3 1
a3 1
ipftest - test packet filter rules with arbitary input.
d5 13
a17 1
ipftest [-vbdPSTEHX] [-I interface] -r <filename> [-i <filename>]
a18 1
.LP
d21 1
a21 1
filter rules without having to put them in place, in operation and procede
d32 1
a32 1
When used without eiether of \fB-S\fP, \fB-T\fP or \fB-E\fP,
d54 2
a55 1
.IP -v
d58 2
a59 1
.IP -d
d62 2
a63 1
.IP -b
d67 2
a68 1
.IP -I <interface>
d70 1
a70 1
This is useful with the \fB-P, -S, -T\fP and \fB-E\fP options, where it is
d73 7
a79 5
.IP -P
The input file specified by \fB-i\fP is a binary file produced using libpcap
(ie tcpdump version 3).  Packets are read from this file as being input
(for rule purposes).  An interface maybe specified using \fB-I\fP.
.IP -S
d83 2
a84 1
.IP -T
d97 2
a98 1
.IP -H
d102 2
a103 1
.IP -X
d105 2
a106 1
.IP -E
d116 5
a120 3
.IP -i <filename>
Specify the filename to take input from.  Default is stdin.
.IP -r <filename>
@


1.1
log
@from beurton@@fnet.fr:  Darren Reed's IP filter
@
text
@d6 1
a6 1
ipftest [-vbdPSTE] [-I interface] -r <filename> [-i <filename>]
d80 6
@
