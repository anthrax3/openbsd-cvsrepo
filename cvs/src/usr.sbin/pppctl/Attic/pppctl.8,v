head	1.5;
access;
symbols
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	PPP1_5:1.1.1.1
	BRIAN:1.1.1;
locks; strict;
comment	@.\" @;


1.5
date	98.08.31.00.22.33;	author brian;	state dead;
branches;
next	1.4;

1.4
date	98.05.13.10.33.29;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.12.21.01.27.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.12.21.01.21.56;	author brian;	state Exp;
branches;
next	1.1;

1.1
date	97.11.23.20.27.39;	author brian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.23.20.27.39;	author brian;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Upgrade ppp to version 2.0

This adds a number of features including:
o Multilink
o Callback (including CBCP)
o DNS negotiation (client & server)
o Easy to configure masquerading/packet aliasing
o Any number of diagnostic socket connections (limits DOS attacks)
o Sticky routes (ppp updates the routing table when the IP number is changed)

See the file README.changes for things that effect current
configurations.
@
text
@.\" $Id: pppctl.8,v 1.4 1998/05/13 10:33:29 deraadt Exp $
.Dd 26 June 1997
.Os OpenBSD
.Dt PPPCTL 8
.Sh NAME
.Nm pppctl
.Nd
PPP control program
.Sh SYNOPSIS
.Nm
.Op Fl v
.Op Fl t Ar n
.Op Fl p Ar passwd
.Ar [host:]Port | LocalSocket
.Op command[;command]...
.Sh DESCRIPTION
This program provides command line control of the
.Xr ppp 8
daemon.  Its primary use is to facilitate simple scripts that
control a running daemon.
.Pp
.Nm Pppctl
is passed at least one argument, specifying the socket on which
.Nm ppp
is listening.  Refer to the
.Sq set server
command of
.Nm ppp
for details.  If the socket contains a leading '/', it
is taken as an
.Dv AF_LOCAL
socket.  If it contains a colon, it is treated as a
.Ar host:port
pair, otherwise it is treated as a TCP port specification on the
local machine (127.0.0.1).  Both the
.Ar host
and
.Ar port
may be specified numerically if you wish to avoid a DNS lookup
or don't have an entry for the given port in
.Pa /etc/services .
.Pp
All remaining arguments are concatenated to form the
.Ar command(s)
that will be sent to the
.Nm ppp
daemon.  If any semi-colon characters are found, they are treated as
.Ar command
delimiters, allowing more than one
.Ar command
in a given
.Sq session .
For example:
.Bd -literal -offset indent
pppctl 3000 set timeout 300\\; show timeout
.Ed
.Pp
Don't forget to escape or quote the ';' as it is a special character
for most shells.
.Pp
If no
.Ar command
arguments are given,
.Nm
enters interactive mode, where commands are read from standard input.
When reading commands, the
.Xr editline 3
library is used, allowing command-line editing (with
.Xr editrc 5
defining editing behaviour).  The history size
defaults to
.Em 20 lines .
.Pp
The following command line options are available:
.Bl -tag -width Ds
.It Fl v
Display all data sent to and received from the
.Nm ppp
daemon.  Normally,
.Nm
displays only non-prompt lines received.  This option is ignored in
interactive mode.
.It Fl t Ar n
Use a timeout of
.Ar n
instead of the default 2 seconds when connecting.  This may be required
if you wish to control a daemon over a slow (or even a dialup) link.
.It Fl p Ar passwd
Specify the password required by the
.Nm ppp
daemon.  If this switch is not used,
.Nm
will prompt for a password once it has successfully connected to
.Nm ppp .
.El
.Pp
.Sh EXAMPLES
If you run
.Nm ppp
in
.Fl auto
mode,
.Nm
can be used to automate many frequent tasks (you can actually control
.Nm ppp
in any mode except interactive mode).  Use of the
.Fl p
option is discouraged (even in scripts that aren't readable by others)
as a
.Xr ps 1
listing may reveal your secret.
.Pp
The best way to allow easy, secure
.Nm
access is to create a local server socket in
.Pa /etc/ppp/ppp.conf
(in the correct section) like this:
.Bd -literal -offset indent
set server /var/run/internet "" 0177
.Ed
.Pp
This will instruct
.Nm ppp
to create a local domain socket, with srw------- permissions and no
password, allowing access only to the user that invoked
.Nm ppp .
Refer to the
.Xr ppp 8
man page for further details.
.Pp
You can now create some easy-access scripts.  To connect to the internet:
.Bd -literal -offset indent
#! /bin/sh
test $# -eq 0 && time=300 || time=$1
exec pppctl /var/run/internet set timeout $time\\; dial
.Ed
.Pp
To disconnect:
.Bd -literal -offset indent
#! /bin/sh
exec pppctl /var/run/internet set timeout 300\\; close
.Ed
.Pp
To check if the line is up:
.Bd -literal -offset indent
#! /bin/sh
pppctl -p '' -v /var/run/internet quit | grep ^PPP >/dev/null
if [ $? -eq 0 ]; then
  echo Link is up
else
  echo Link is down
fi
.Ed
.Pp
You can even make a generic script:
.Bd -literal -offset indent
#! /bin/sh
exec pppctl /var/run/internet "$@@"
.Ed
.Pp
.Sh ENVIRONMENT
The following environment variables are understood by
.Nm
when in interactive mode:
.Bl -tag -width XXXXXXXXXX
.It Dv EL_SIZE
The number of history lines.  The default is 20.
.It Dv EL_EDITOR
The edit mode.  Only values of "emacs" and "vi" are accepted.  Other values
are silently ignored.  This environment variable will override the
.Ar bind -v
and
.Ar bind -e
commands in
.Pa ~/.editrc .
.El
.Pp
.Sh SEE ALSO
.Xr editline 3 ,
.Xr editrc 5 ,
.Xr ppp 8 ,
.Xr ps 1 ,
.Xr services 5
.Sh HISTORY
The
.Nm
command first appeared in FreeBSD 2.2.5.
@


1.4
log
@fix .Sh ENVIRONMENT
@
text
@d1 1
a1 1
.\" $Id: pppctl.8,v 1.3 1997/12/21 01:27:07 deraadt Exp $
@


1.3
log
@clean
@
text
@d1 1
a1 1
.\" $Id: pppctl.8,v 1.2 1997/12/21 01:21:56 brian Exp $
d161 1
a161 1
.Sh ENVIRONMENT VARIABLES
@


1.2
log
@Correct the "how to find out if the line is up" example.
@
text
@d1 1
a1 1
.\" $Id: pppctl.8,v 1.1.1.1 1997/11/23 20:27:39 brian Exp $
d21 1
a21 1

a41 1

d54 4
a57 3

  pppctl 3000 set timeout 300\\; show timeout

d60 1
a60 1

d73 1
a73 1

d96 1
a96 1

a117 1

d121 1
a121 1

a129 1

a131 1

a136 1

a142 1

a153 1

d160 1
a160 1

d177 1
a177 1

a183 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\" $Id: pppctl.8,v 1.7 1997/11/18 00:20:28 brian Exp $
d152 1
a152 1
pppctl -p '' -v /var/run/internet '' | grep ^PPP >/dev/null
@


1.1.1.1
log
@Import version 1.5 of ppp.

<sales>
This is a user-level ppp implementation that uses the
tun driver.  It was originally created by a Japanese
ISP.  It's now piled with features.  Check the man pages
for details.
</sales>

The sources are identical to the ones in FreeBSD, except
for the Makefile.

IP aliasing (NAT) is disabled, and can be enabled by simply
doing a ``make install'' of libalias, then rebuilding
ppp.  I'll create libalias as a port soon.
@
text
@@
