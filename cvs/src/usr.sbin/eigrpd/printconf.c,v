head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.16.44.33;	author renato;	state Exp;
branches;
next	1.5;
commitid	o7fEENaKxNIOcUKV;

1.5
date	2016.09.02.16.29.55;	author renato;	state Exp;
branches;
next	1.4;
commitid	w1am8mhLiSfZo4x6;

1.4
date	2015.10.27.03.23.30;	author renato;	state Exp;
branches;
next	1.3;
commitid	FtoVprFvsC5ABWDX;

1.3
date	2015.10.21.03.52.12;	author renato;	state Exp;
branches;
next	1.2;
commitid	67lIWG5WR4Do3HhB;

1.2
date	2015.10.04.22.54.38;	author renato;	state Exp;
branches;
next	1.1;
commitid	UF6urvMjq1VzeguX;

1.1
date	2015.10.02.04.26.47;	author renato;	state Exp;
branches;
next	;
commitid	dGX9Xs9GfneSNaca;


desc
@@


1.6
log
@Make functions and variables static whenever possible.

style(9) says:
"Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module. In userland,
functions local to one source module should be declared 'static'".

The benefits of doing so include:
* clean up of the eigrpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Additional changes:
* Declare all extern variables in header files;
* Clean up the indentation of all function prototypes and global
  variables.

ok claudio@@ benno@@
@
text
@/*	$OpenBSD: printconf.c,v 1.5 2016/09/02 16:29:55 renato Exp $ */

/*
 * Copyright (c) 2015 Renato Westphal <renato@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>

#include <arpa/inet.h>
#include <stdio.h>

#include "eigrpd.h"
#include "log.h"

static void		 print_mainconf(struct eigrpd_conf *);
static const char	*print_no(uint16_t);
static void		 print_redist_metric(struct redist_metric *);
static void		 print_redistribute(struct eigrp *);
static void		 print_iface(struct eigrp_iface *);
static void		 print_as(struct eigrp *);
static void		 print_af(struct eigrpd_conf *, int);

static void
print_mainconf(struct eigrpd_conf *conf)
{
	printf("router-id %s\n", inet_ntoa(conf->rtr_id));

	if (conf->flags & EIGRPD_FLAG_NO_FIB_UPDATE)
		printf("fib-update no\n");
	else
		printf("fib-update yes\n");

	printf("rdomain %u\n", conf->rdomain);
	printf("fib-priority-internal %u\n", conf->fib_priority_internal);
	printf("fib-priority-external %u\n", conf->fib_priority_external);
	printf("fib-priority-summary %u\n", conf->fib_priority_summary);
}

static const char *
print_no(uint16_t type)
{
	if (type & REDIST_NO)
		return ("no ");
	else
		return ("");
}

static void
print_redist_metric(struct redist_metric *metric)
{
	printf(" %u %u %u %u %u", metric->bandwidth, metric->delay,
	    metric->reliability, metric->load, metric->mtu);
}

static void
print_redistribute(struct eigrp *eigrp)
{
	struct redistribute	*r;

	if (eigrp->dflt_metric) {
		printf("\t\tdefault-metric");
		print_redist_metric(eigrp->dflt_metric);
		printf("\n");
	}

	SIMPLEQ_FOREACH(r, &eigrp->redist_list, entry) {
		switch (r->type & ~REDIST_NO) {
		case REDIST_STATIC:
			printf("\t\t%sredistribute static", print_no(r->type));
			break;
		case REDIST_RIP:
			printf("\t\t%sredistribute rip", print_no(r->type));
			break;
		case REDIST_OSPF:
			printf("\t\t%sredistribute ospf", print_no(r->type));
			break;
		case REDIST_CONNECTED:
			printf("\t\t%sredistribute connected",
			    print_no(r->type));
			break;
		case REDIST_DEFAULT:
			printf("\t\t%sredistribute default", print_no(r->type));
			break;
		case REDIST_ADDR:
			printf("\t\t%sredistribute %s/%u",
			    print_no(r->type), log_addr(r->af, &r->addr),
			    r->prefixlen);
			break;
		}

		if (r->metric) {
			printf(" metric");
			print_redist_metric(r->metric);
		}
		printf("\n");
	}
}

static void
print_iface(struct eigrp_iface *ei)
{
	struct summary_addr	*summary;

	printf("\t\tinterface %s {\n", ei->iface->name);
	printf("\t\t\thello-interval %u\n", ei->hello_interval);
	printf("\t\t\tholdtime %u\n", ei->hello_holdtime);
	printf("\t\t\tdelay %u\n", ei->delay);
	printf("\t\t\tbandwidth %u\n", ei->bandwidth);
	printf("\t\t\tsplit-horizon %s\n", (ei->splithorizon) ? "yes" : "no");
	if (ei->passive)
		printf("\t\t\tpassive\n");
	TAILQ_FOREACH(summary, &ei->summary_list, entry)
		printf("\t\t\tsummary-address %s/%u\n", log_addr(ei->eigrp->af,
		    &summary->prefix), summary->prefixlen);
	printf("\t\t}\n");
}

static void
print_as(struct eigrp *eigrp)
{
	struct eigrp_iface	*ei;

	printf("\tautonomous-system %u {\n", eigrp->as);
	printf("\t\tk-values %u %u %u %u %u %u\n", eigrp->kvalues[0],
	    eigrp->kvalues[1], eigrp->kvalues[2], eigrp->kvalues[3],
	    eigrp->kvalues[4], eigrp->kvalues[5]);
	printf("\t\tactive-timeout %u\n", eigrp->active_timeout);
	printf("\t\tmaximum-hops %u\n", eigrp->maximum_hops);
	printf("\t\tmaximum-paths %u\n", eigrp->maximum_paths);
	printf("\t\tvariance %u\n", eigrp->variance);
	print_redistribute(eigrp);
	printf("\n");
	TAILQ_FOREACH(ei, &eigrp->ei_list, e_entry)
		print_iface(ei);
	printf("\t}\n");
}

static void
print_af(struct eigrpd_conf *conf, int af)
{
	struct eigrp	*eigrp;

	printf("address-family %s {\n", af_name(af));
	TAILQ_FOREACH(eigrp, &conf->instances, entry)
		if (eigrp->af == af)
			print_as(eigrp);
	printf("}\n\n");
}

void
print_config(struct eigrpd_conf *conf)
{
	printf("\n");
	print_mainconf(conf);
	printf("\n");

	print_af(conf, AF_INET);
	print_af(conf, AF_INET6);
}
@


1.5
log
@Remove superfluous includes and follow style(9).

ok claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.4 2015/10/27 03:23:30 renato Exp $ */
d27 7
a33 7
void	print_mainconf(struct eigrpd_conf *);
const char *print_no(uint16_t);
void	print_redist_metric(struct redist_metric *);
void	print_redistribute(struct eigrp *);
void	print_iface(struct eigrp_iface *);
void	print_as(struct eigrp *);
void	print_af(struct eigrpd_conf *, int);
d35 1
a35 1
void
d51 1
a51 1
const char *
d60 1
a60 1
void
d67 1
a67 1
void
d111 1
a111 1
void
d130 1
a130 1
void
d150 1
a150 1
void
@


1.4
log
@Print a missing "metric" before the actual metric when printing a
redistribute line.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.3 2015/10/21 03:52:12 renato Exp $ */
d19 3
a22 1
#include <arpa/inet.h>
a23 1
#include "eigrp.h"
a24 1
#include "eigrpe.h"
@


1.3
log
@Add support for route summarization.

Working great but need more testing, especially with ipv6. For now
we don't validate if one configured summary is inside another or the
presence of duplicates. Will address these issues in a future commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.2 2015/10/04 22:54:38 renato Exp $ */
d103 2
a104 1
		if (r->metric)
d106 1
@


1.2
log
@Add option to configure or disable the DUAL active timeout.
@
text
@d1 1
a1 1
/*	$OpenBSD: printconf.c,v 1.1 2015/10/02 04:26:47 renato Exp $ */
d48 1
d112 2
d122 3
@


1.1
log
@Welcome eigrpd

The eigrpd daemon will support the Enhanced Interior Gateway Routing Protocol.

Built using the imsg/three process framework and heavily based on ospfd(8), ospf6d(8) and ldpd(8).

The current status of eigrpd(8) is as follows:
* Almost full compliance with the specification: DUAL FSM, RTP, CR mode, SIA, etc
* Support for both IPv4 and IPv6
* Support for multiple instances (different ASes/AFs) within the same process
* Support for rdomains (one process per rdomain)
* RIB/FIB synchronization
* Basic redistribution support

Not implemented features (yet):
* Configuration reload support (partially implemented)
* Route summarization
* Advanced route redistribution/filtering
* Carp integration
* Authentication (draft is missing information)
* Stub (not released by Cisco)

Not yet connected to the builds.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d131 1
@

