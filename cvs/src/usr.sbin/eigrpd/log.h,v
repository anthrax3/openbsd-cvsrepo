head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.17.59.58;	author benno;	state Exp;
branches;
next	1.4;
commitid	q45EjvXYS6j1V7Qb;

1.4
date	2016.09.02.16.44.33;	author renato;	state Exp;
branches;
next	1.3;
commitid	o7fEENaKxNIOcUKV;

1.3
date	2016.07.18.21.14.30;	author benno;	state Exp;
branches;
next	1.2;
commitid	X9E9HZswo9VkBjRl;

1.2
date	2016.04.15.13.10.56;	author renato;	state Exp;
branches;
next	1.1;
commitid	uxYgTnCpWxKsx7Ds;

1.1
date	2015.10.02.04.26.47;	author renato;	state Exp;
branches;
next	;
commitid	dGX9Xs9GfneSNaca;


desc
@@


1.5
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@
@
text
@/*	$OpenBSD: log.h,v 1.4 2016/09/02 16:44:33 renato Exp $ */

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef LOG_H
#define LOG_H

#include <stdarg.h>
#include <sys/cdefs.h>

extern const char	*log_procname;

void	 log_init(int);
void	 log_verbose(int);
void	 logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	 vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	 log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	 fatal(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
void	 fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));

#endif /* LOG_H */
@


1.4
log
@Make functions and variables static whenever possible.

style(9) says:
"Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module. In userland,
functions local to one source module should be declared 'static'".

The benefits of doing so include:
* clean up of the eigrpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Additional changes:
* Declare all extern variables in header files;
* Clean up the indentation of all function prototypes and global
  variables.

ok claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.3 2016/07/18 21:14:30 benno Exp $ */
d19 2
a20 2
#ifndef _LOG_H_
#define	_LOG_H_
d23 1
d25 1
a25 29
void		 log_init(int);
void		 log_verbose(int);
void		 logit(int, const char *, ...)
		    __attribute__((__format__ (printf, 2, 3)));
void		 vlog(int, const char *, va_list)
		    __attribute__((__format__ (printf, 2, 0)));
void		 log_warn(const char *, ...)
		    __attribute__((__format__ (printf, 1, 2)));
void		 log_warnx(const char *, ...)
		    __attribute__((__format__ (printf, 1, 2)));
void		 log_info(const char *, ...)
		    __attribute__((__format__ (printf, 1, 2)));
void		 log_debug(const char *, ...)
		    __attribute__((__format__ (printf, 1, 2)));
void		 fatal(const char *) __dead
		    __attribute__((__format__ (printf, 1, 0)));
void		 fatalx(const char *) __dead
		    __attribute__((__format__ (printf, 1, 0)));
const char	*log_in6addr(const struct in6_addr *);
const char	*log_in6addr_scope(const struct in6_addr *, unsigned int);
const char	*log_sockaddr(void *);
const char	*log_addr(int, union eigrpd_addr *);
const char	*log_prefix(struct rt_node *);
const char	*log_route_origin(int, struct rde_nbr *);
const char	*opcode_name(uint8_t);
const char	*af_name(int);
const char	*if_type_name(enum iface_type);
const char	*dual_state_name(int);
const char	*ext_proto_name(int);
d27 20
a46 1
#endif /* _LOG_H_ */
@


1.3
log
@add format attributes to log functions and fix two errors

ok renato@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.2 2016/04/15 13:10:56 renato Exp $ */
d24 18
a41 19
void	log_init(int);
void	log_verbose(int);
void	logit(int, const char *, ...)
		__attribute__((__format__ (printf, 2, 3)));
void	vlog(int, const char *, va_list)
		__attribute__((__format__ (printf, 2, 0)));
void	log_warn(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	log_warnx(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	log_info(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	log_debug(const char *, ...)
		__attribute__((__format__ (printf, 1, 2)));
void	fatal(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));
void	fatalx(const char *) __dead
		__attribute__((__format__ (printf, 1, 0)));

@


1.2
log
@Minor fixes and code cleanup.

* whitespace cleanup;
* copy in_addr structs directly;
* add more malloc return value checks;
* fix some log messages;
* turn ifacecnt into a static variable;
* use eigrp_addrcmp() on if_deladdr() to avoid code duplication;
* s/route_print_origin/log_route_origin/
* more smaller issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.h,v 1.1 2015/10/02 04:26:47 renato Exp $ */
d26 16
a41 8
void	logit(int, const char *, ...);
void	vlog(int, const char *, va_list);
void	log_warn(const char *, ...);
void	log_warnx(const char *, ...);
void	log_info(const char *, ...);
void	log_debug(const char *, ...);
void	fatal(const char *) __dead;
void	fatalx(const char *) __dead;
@


1.1
log
@Welcome eigrpd

The eigrpd daemon will support the Enhanced Interior Gateway Routing Protocol.

Built using the imsg/three process framework and heavily based on ospfd(8), ospf6d(8) and ldpd(8).

The current status of eigrpd(8) is as follows:
* Almost full compliance with the specification: DUAL FSM, RTP, CR mode, SIA, etc
* Support for both IPv4 and IPv6
* Support for multiple instances (different ASes/AFs) within the same process
* Support for rdomains (one process per rdomain)
* RIB/FIB synchronization
* Basic redistribution support

Not implemented features (yet):
* Configuration reload support (partially implemented)
* Route summarization
* Advanced route redistribution/filtering
* Carp integration
* Authentication (draft is missing information)
* Stub (not released by Cisco)

Not yet connected to the builds.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d40 1
@

