head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12;
locks; strict;
comment	@ * @;


1.18
date	2016.09.02.16.44.33;	author renato;	state Exp;
branches;
next	1.17;
commitid	o7fEENaKxNIOcUKV;

1.17
date	2016.09.02.16.36.33;	author renato;	state Exp;
branches;
next	1.16;
commitid	RP73Rgb2x0oQ1Vfz;

1.16
date	2016.09.02.16.34.20;	author renato;	state Exp;
branches;
next	1.15;
commitid	OEx84t3rZg0W9VAV;

1.15
date	2016.09.02.16.29.55;	author renato;	state Exp;
branches;
next	1.14;
commitid	w1am8mhLiSfZo4x6;

1.14
date	2016.04.15.13.21.45;	author renato;	state Exp;
branches;
next	1.13;
commitid	zOVrWYmdyccBjHwb;

1.13
date	2016.04.15.13.10.56;	author renato;	state Exp;
branches;
next	1.12;
commitid	uxYgTnCpWxKsx7Ds;

1.12
date	2016.02.21.18.56.49;	author renato;	state Exp;
branches;
next	1.11;
commitid	Fln6asbk1x7lkTSp;

1.11
date	2016.02.21.18.53.54;	author renato;	state Exp;
branches;
next	1.10;
commitid	wQY3qMWTuqWqk9Cy;

1.10
date	2016.02.21.18.40.56;	author renato;	state Exp;
branches;
next	1.9;
commitid	kZCMT2snnUUUOEjb;

1.9
date	2016.02.21.18.39.08;	author renato;	state Exp;
branches;
next	1.8;
commitid	g2EG5m78mU4rfkPz;

1.8
date	2016.01.15.12.43.02;	author renato;	state Exp;
branches;
next	1.7;
commitid	3xLOx1W7LCZ0caCS;

1.7
date	2016.01.15.12.29.29;	author renato;	state Exp;
branches;
next	1.6;
commitid	dbbIBjCqCzZHdGeq;

1.6
date	2016.01.15.12.25.43;	author renato;	state Exp;
branches;
next	1.5;
commitid	9OwAkOA9fQWBhvxS;

1.5
date	2015.12.13.18.55.53;	author renato;	state Exp;
branches;
next	1.4;
commitid	OoBnb9jAV4TnaVRr;

1.4
date	2015.10.10.05.03.39;	author renato;	state Exp;
branches;
next	1.3;
commitid	BktU0Il2Iu33W2f3;

1.3
date	2015.10.04.23.08.57;	author renato;	state Exp;
branches;
next	1.2;
commitid	DeXpnCU2wphuBqEu;

1.2
date	2015.10.04.23.00.10;	author renato;	state Exp;
branches;
next	1.1;
commitid	vb2pR0BnPuOhwW09;

1.1
date	2015.10.02.04.26.47;	author renato;	state Exp;
branches;
next	;
commitid	dGX9Xs9GfneSNaca;


desc
@@


1.18
log
@Make functions and variables static whenever possible.

style(9) says:
"Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module. In userland,
functions local to one source module should be declared 'static'".

The benefits of doing so include:
* clean up of the eigrpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Additional changes:
* Declare all extern variables in header files;
* Clean up the indentation of all function prototypes and global
  variables.

ok claudio@@ benno@@
@
text
@/*	$OpenBSD: packet.c,v 1.17 2016/09/02 16:36:33 renato Exp $ */

/*
 * Copyright (c) 2015 Renato Westphal <renato@@openbsd.org>
 * Copyright (c) 2004, 2005 Esben Norby <norby@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <net/if_dl.h>
#include <netinet/in.h>
#include <netinet/ip.h>

#include <arpa/inet.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "eigrpd.h"
#include "eigrpe.h"
#include "log.h"

static int	 send_packet_v4(struct iface *, struct nbr *, struct ibuf *);
static int	 send_packet_v6(struct iface *, struct nbr *, struct ibuf *);
static int	 recv_packet_nbr(struct nbr *, struct eigrp_hdr *,
		    struct seq_addr_head *, struct tlv_mcast_seq *);
static void	 recv_packet_eigrp(int, union eigrpd_addr *,
		    union eigrpd_addr *, struct iface *, struct eigrp_hdr *,
		    char *, uint16_t);
static int	 eigrp_hdr_sanity_check(int, union eigrpd_addr *,
		    struct eigrp_hdr *, uint16_t, const struct iface *);
static struct iface *find_iface(unsigned int, int, union eigrpd_addr *);

int
gen_eigrp_hdr(struct ibuf *buf, uint16_t opcode, uint8_t flags,
    uint32_t seq_num, uint16_t as)
{
	struct eigrp_hdr	eigrp_hdr;

	memset(&eigrp_hdr, 0, sizeof(eigrp_hdr));
	eigrp_hdr.version = EIGRP_VERSION;
	eigrp_hdr.opcode = opcode;
	/* chksum will be set later */
	eigrp_hdr.flags = htonl(flags);
	eigrp_hdr.seq_num = htonl(seq_num);
	/* ack_num will be set later */
	eigrp_hdr.vrid = htons(EIGRP_VRID_UNICAST_AF);
	eigrp_hdr.as = htons(as);

	return (ibuf_add(buf, &eigrp_hdr, sizeof(eigrp_hdr)));
}

/* send and receive packets */
static int
send_packet_v4(struct iface *iface, struct nbr *nbr, struct ibuf *buf)
{
	struct sockaddr_in	 dst;
	struct msghdr		 msg;
	struct iovec		 iov[2];
	struct ip		 ip_hdr;

	/* setup sockaddr */
	dst.sin_family = AF_INET;
	dst.sin_len = sizeof(struct sockaddr_in);
	if (nbr)
		dst.sin_addr = nbr->addr.v4;
	else
		dst.sin_addr = global.mcast_addr_v4;

	/* setup IP hdr */
	memset(&ip_hdr, 0, sizeof(ip_hdr));
	ip_hdr.ip_v = IPVERSION;
	ip_hdr.ip_hl = sizeof(ip_hdr) >> 2;
	ip_hdr.ip_tos = IPTOS_PREC_INTERNETCONTROL;
	ip_hdr.ip_len = htons(ibuf_size(buf) + sizeof(ip_hdr));
	ip_hdr.ip_id = 0;  /* 0 means kernel set appropriate value */
	ip_hdr.ip_off = 0;
	ip_hdr.ip_ttl = EIGRP_IP_TTL;
	ip_hdr.ip_p = IPPROTO_EIGRP;
	ip_hdr.ip_sum = 0;
	ip_hdr.ip_src.s_addr = if_primary_addr(iface);
	ip_hdr.ip_dst = dst.sin_addr;

	/* setup buffer */
	memset(&msg, 0, sizeof(msg));
	iov[0].iov_base = &ip_hdr;
	iov[0].iov_len = sizeof(ip_hdr);
	iov[1].iov_base = buf->buf;
	iov[1].iov_len = ibuf_size(buf);
	msg.msg_name = &dst;
	msg.msg_namelen = sizeof(dst);
	msg.msg_iov = iov;
	msg.msg_iovlen = 2;

	/* set outgoing interface for multicast traffic */
	if (IN_MULTICAST(ntohl(dst.sin_addr.s_addr)))
		if (if_set_ipv4_mcast(iface) == -1) {
			log_warn("%s: error setting multicast interface, %s",
			    __func__, iface->name);
			return (-1);
		}

	if (sendmsg(global.eigrp_socket_v4, &msg, 0) == -1) {
		log_warn("%s: error sending packet on interface %s",
		    __func__, iface->name);
		return (-1);
	}

	return (0);
}

static int
send_packet_v6(struct iface *iface, struct nbr *nbr, struct ibuf *buf)
{
	struct sockaddr_in6	 sa6;

	/* setup sockaddr */
	memset(&sa6, 0, sizeof(sa6));
	sa6.sin6_family = AF_INET6;
	sa6.sin6_len = sizeof(struct sockaddr_in6);
	if (nbr) {
		sa6.sin6_addr = nbr->addr.v6;
		addscope(&sa6, iface->ifindex);
	} else
		sa6.sin6_addr = global.mcast_addr_v6;

	/* set outgoing interface for multicast traffic */
	if (IN6_IS_ADDR_MULTICAST(&sa6.sin6_addr))
		if (if_set_ipv6_mcast(iface) == -1) {
			log_warn("%s: error setting multicast interface, %s",
			    __func__, iface->name);
			return (-1);
		}

	if (sendto(global.eigrp_socket_v6, buf->buf, buf->wpos, 0,
	    (struct sockaddr *)&sa6, sizeof(sa6)) == -1) {
		log_warn("%s: error sending packet on interface %s",
		    __func__, iface->name);
		return (-1);
	}

	return (0);
}

int
send_packet(struct eigrp_iface *ei, struct nbr *nbr, uint32_t flags,
    struct ibuf *buf)
{
	struct eigrp		*eigrp = ei->eigrp;
	struct iface		*iface = ei->iface;
	struct eigrp_hdr	*eigrp_hdr;

	if (!(iface->flags & IFF_UP) || !LINK_STATE_IS_UP(iface->linkstate))
		return (-1);

	/* update ack number, flags and checksum */
	if ((eigrp_hdr = ibuf_seek(buf, 0, sizeof(*eigrp_hdr))) == NULL)
                fatalx("send_packet: buf_seek failed");
	if (nbr) {
		eigrp_hdr->ack_num = htonl(nbr->recv_seq);
		rtp_ack_stop_timer(nbr);
	}
	if (flags) {
		eigrp_hdr->flags = ntohl(eigrp_hdr->flags) | flags;
		eigrp_hdr->flags = htonl(eigrp_hdr->flags);
	}
	eigrp_hdr->chksum = 0;
	eigrp_hdr->chksum = in_cksum(buf->buf, ibuf_size(buf));

	/* log packet being sent */
	if (eigrp_hdr->opcode != EIGRP_OPC_HELLO) {
		char	buffer[64];

		if (nbr)
			snprintf(buffer, sizeof(buffer), "nbr %s",
			    log_addr(eigrp->af, &nbr->addr));
		else
			snprintf(buffer, sizeof(buffer), "(multicast)");

		log_debug("%s: type %s iface %s %s AS %u seq %u ack %u",
		    __func__, opcode_name(eigrp_hdr->opcode), iface->name,
		    buffer, ntohs(eigrp_hdr->as), ntohl(eigrp_hdr->seq_num),
		    ntohl(eigrp_hdr->ack_num));
	}

	switch (eigrp->af) {
	case AF_INET:
		if (send_packet_v4(iface, nbr, buf) < 0)
			return (-1);
		break;
	case AF_INET6:
		if (send_packet_v6(iface, nbr, buf) < 0)
			return (-1);
		break;
	default:
		fatalx("send_packet: unknown af");
	}

	switch (eigrp_hdr->opcode) {
	case EIGRP_OPC_HELLO:
		if (ntohl(eigrp_hdr->ack_num) == 0)
			ei->eigrp->stats.hellos_sent++;
		else
			ei->eigrp->stats.acks_sent++;
		break;
	case EIGRP_OPC_UPDATE:
		ei->eigrp->stats.updates_sent++;
		break;
	case EIGRP_OPC_QUERY:
		ei->eigrp->stats.queries_sent++;
		break;
	case EIGRP_OPC_REPLY:
		ei->eigrp->stats.replies_sent++;
		break;
	case EIGRP_OPC_SIAQUERY:
		ei->eigrp->stats.squeries_sent++;
		break;
	case EIGRP_OPC_SIAREPLY:
		ei->eigrp->stats.sreplies_sent++;
		break;
	default:
		break;
	}

	return (0);
}

static int
recv_packet_nbr(struct nbr *nbr, struct eigrp_hdr *eigrp_hdr,
    struct seq_addr_head *seq_addr_list, struct tlv_mcast_seq *tm)
{
	uint32_t		 seq, ack;
	struct seq_addr_entry	*sa;

	seq = ntohl(eigrp_hdr->seq_num);
	ack = ntohl(eigrp_hdr->ack_num);

	/*
	 * draft-savage-eigrp-04 - Section 5.3.1:
	 * "In addition to the HELLO packet, if any packet is received within
	 * the hold time period, then the Hold Time period will be reset."
	 */
	nbr_start_timeout(nbr);

	/* handle the sequence tlv */
	if (eigrp_hdr->opcode == EIGRP_OPC_HELLO &&
	    !TAILQ_EMPTY(seq_addr_list)) {
		nbr->flags |= F_EIGRP_NBR_CR_MODE;

		TAILQ_FOREACH(sa, seq_addr_list, entry) {
			switch (sa->af) {
			case AF_INET:
				if (sa->addr.v4.s_addr ==
				    if_primary_addr(nbr->ei->iface)) {
					nbr->flags &= ~F_EIGRP_NBR_CR_MODE;
					break;
				}
				break;
			case AF_INET6:
				if (IN6_ARE_ADDR_EQUAL(&sa->addr.v6,
				    &nbr->ei->iface->linklocal)) {
					nbr->flags &= ~F_EIGRP_NBR_CR_MODE;
					break;
				}
				break;
			default:
				break;
			}
		}
		if (tm)
			nbr->next_mcast_seq = ntohl(tm->seq);
	}

	if ((ntohl(eigrp_hdr->flags) & EIGRP_HDR_FLAG_CR)) {
		if (!(nbr->flags & F_EIGRP_NBR_CR_MODE))
			return (-1);
		nbr->flags &= ~F_EIGRP_NBR_CR_MODE;
		if (ntohl(eigrp_hdr->seq_num) != nbr->next_mcast_seq)
			return (-1);
	}

	/* ack processing */
	if (ack != 0)
		rtp_process_ack(nbr, ack);
	if (seq != 0) {
		/* check for sequence wraparound */
		if (nbr->recv_seq >= seq &&
		   !(nbr->recv_seq == UINT32_MAX && seq == 1)) {
			log_debug("%s: duplicate packet", __func__);
			rtp_send_ack(nbr);
			return (-1);
		}
		nbr->recv_seq = seq;
	}

	return (0);
}

static void
recv_packet_eigrp(int af, union eigrpd_addr *src, union eigrpd_addr *dest,
    struct iface *iface, struct eigrp_hdr *eigrp_hdr, char *buf, uint16_t len)
{
	struct eigrp_iface	*ei;
	struct nbr		*nbr;
	struct tlv_parameter	*tp = NULL;
	struct tlv_sw_version	*tv = NULL;
	struct tlv_mcast_seq	*tm = NULL;
	struct rinfo		 ri;
	struct rinfo_entry	*re;
	struct seq_addr_head	 seq_addr_list;
	struct rinfo_head	 rinfo_list;

	/* EIGRP header sanity checks */
	if (eigrp_hdr_sanity_check(af, dest, eigrp_hdr, len, iface) == -1)
		return;

	buf += sizeof(*eigrp_hdr);
	len -= sizeof(*eigrp_hdr);

	TAILQ_INIT(&seq_addr_list);
	TAILQ_INIT(&rinfo_list);
	while (len > 0) {
		struct tlv 	tlv;
		uint16_t	tlv_type;

		if (len < sizeof(tlv)) {
			log_debug("%s: malformed packet (bad length)",
			    __func__);
			goto error;
		}

		memcpy(&tlv, buf, sizeof(tlv));
		if (ntohs(tlv.length) > len) {
			log_debug("%s: malformed packet (bad length)",
			    __func__);
			goto error;
		}

		tlv_type = ntohs(tlv.type);
		switch (tlv_type) {
		case TLV_TYPE_PARAMETER:
			if ((tp = tlv_decode_parameter(&tlv, buf)) == NULL)
				goto error;
			break;
		case TLV_TYPE_SEQ:
			if (tlv_decode_seq(af, &tlv, buf, &seq_addr_list) < 0)
				goto error;
			break;
		case TLV_TYPE_SW_VERSION:
			if ((tv = tlv_decode_sw_version(&tlv, buf)) == NULL)
				goto error;
			break;
		case TLV_TYPE_MCAST_SEQ:
			if ((tm = tlv_decode_mcast_seq(&tlv, buf)) == NULL)
				goto error;
			break;
		case TLV_TYPE_IPV4_INTERNAL:
		case TLV_TYPE_IPV4_EXTERNAL:
		case TLV_TYPE_IPV6_INTERNAL:
		case TLV_TYPE_IPV6_EXTERNAL:
			/* silently ignore TLV from different address-family */
			if ((tlv_type & TLV_PROTO_MASK) == TLV_PROTO_IPV4 &&
			    af != AF_INET)
				break;
			if ((tlv_type & TLV_PROTO_MASK) == TLV_PROTO_IPV6 &&
			    af != AF_INET6)
				break;

			if (tlv_decode_route(af, &tlv, buf, &ri) < 0)
				goto error;
			if ((re = calloc(1, sizeof(*re))) == NULL)
				fatal("recv_packet_eigrp");
			re->rinfo = ri;
			TAILQ_INSERT_TAIL(&rinfo_list, re, entry);
			break;
		case TLV_TYPE_AUTH:
		case TLV_TYPE_PEER_TERM:
			/*
			 * XXX There is no enough information in the draft
			 * to implement these TLVs properly.
			 */
		case TLV_TYPE_IPV4_COMMUNITY:
		case TLV_TYPE_IPV6_COMMUNITY:
			/* TODO */
		default:
			/* ignore unknown tlv */
			break;
		}
		buf += ntohs(tlv.length);
		len -= ntohs(tlv.length);
	}

	ei = eigrp_if_lookup(iface, af, ntohs(eigrp_hdr->as));
	if (ei == NULL || ei->passive)
		goto error;

	nbr = nbr_find(ei, src);
	if (nbr == NULL && (eigrp_hdr->opcode != EIGRP_OPC_HELLO ||
	    ntohl(eigrp_hdr->ack_num) != 0)) {
		log_debug("%s: unknown neighbor", __func__);
		goto error;
	} else if (nbr && recv_packet_nbr(nbr, eigrp_hdr, &seq_addr_list,
	    tm) < 0)
		goto error;

	/* log packet being received */
	if (eigrp_hdr->opcode != EIGRP_OPC_HELLO)
		log_debug("%s: type %s nbr %s AS %u seq %u ack %u", __func__,
		    opcode_name(eigrp_hdr->opcode), log_addr(af, &nbr->addr),
		    ei->eigrp->as, ntohl(eigrp_hdr->seq_num),
		    ntohl(eigrp_hdr->ack_num));

	/* switch EIGRP packet type */
	switch (eigrp_hdr->opcode) {
	case EIGRP_OPC_HELLO:
		if (ntohl(eigrp_hdr->ack_num) == 0) {
			recv_hello(ei, src, nbr, tp);
			ei->eigrp->stats.hellos_recv++;
		} else
			ei->eigrp->stats.acks_recv++;
		break;
	case EIGRP_OPC_UPDATE:
		recv_update(nbr, &rinfo_list, ntohl(eigrp_hdr->flags));
		ei->eigrp->stats.updates_recv++;
		break;
	case EIGRP_OPC_QUERY:
		recv_query(nbr, &rinfo_list, 0);
		ei->eigrp->stats.queries_recv++;
		break;
	case EIGRP_OPC_REPLY:
		recv_reply(nbr, &rinfo_list, 0);
		ei->eigrp->stats.replies_recv++;
		break;
	case EIGRP_OPC_SIAQUERY:
		recv_query(nbr, &rinfo_list, 1);
		ei->eigrp->stats.squeries_recv++;
		break;
	case EIGRP_OPC_SIAREPLY:
		recv_reply(nbr, &rinfo_list, 1);
		ei->eigrp->stats.sreplies_recv++;
		break;
	default:
		log_debug("%s: unknown EIGRP packet type, interface %s",
		    __func__, iface->name);
	}

error:
	/* free rinfo tlvs */
	message_list_clr(&rinfo_list);
	/* free seq addresses tlvs */
	seq_addr_list_clr(&seq_addr_list);
}

#define CMSG_MAXLEN max(sizeof(struct sockaddr_dl), sizeof(struct in6_pktinfo))
void
recv_packet(int fd, short event, void *bula)
{
	union {
		struct	cmsghdr hdr;
		char	buf[CMSG_SPACE(CMSG_MAXLEN)];
	} cmsgbuf;
	struct msghdr		 msg;
	struct sockaddr_storage	 from;
	struct iovec		 iov;
	struct ip		 ip_hdr;
	char			*buf;
	struct cmsghdr		*cmsg;
	ssize_t			 r;
	uint16_t		 len;
	int			 af;
	union eigrpd_addr	 src, dest;
	unsigned int		 ifindex = 0;
	struct iface		*iface;
	struct eigrp_hdr	*eigrp_hdr;

	if (event != EV_READ)
		return;

	/* setup buffer */
	memset(&msg, 0, sizeof(msg));
	iov.iov_base = buf = pkt_ptr;
	iov.iov_len = READ_BUF_SIZE;
	msg.msg_name = &from;
	msg.msg_namelen = sizeof(from);
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((r = recvmsg(fd, &msg, 0)) == -1) {
		if (errno != EAGAIN && errno != EINTR)
			log_debug("%s: read error: %s", __func__,
			    strerror(errno));
		return;
	}
	len = (uint16_t)r;

	sa2addr((struct sockaddr *)&from, &af, &src);
	if (bad_addr(af, &src)) {
		log_debug("%s: invalid source address: %s", __func__,
		    log_addr(af, &src));
		return;
	}

	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (af == AF_INET && cmsg->cmsg_level == IPPROTO_IP &&
		    cmsg->cmsg_type == IP_RECVIF) {
			ifindex = ((struct sockaddr_dl *)
			    CMSG_DATA(cmsg))->sdl_index;
			break;
		}
		if (af == AF_INET6 && cmsg->cmsg_level == IPPROTO_IPV6 &&
		    cmsg->cmsg_type == IPV6_PKTINFO) {
			ifindex = ((struct in6_pktinfo *)
			    CMSG_DATA(cmsg))->ipi6_ifindex;
			dest.v6 = ((struct in6_pktinfo *)
			    CMSG_DATA(cmsg))->ipi6_addr;
			break;
		}
	}

	/* find a matching interface */
	if ((iface = find_iface(ifindex, af, &src)) == NULL)
		return;

	/* the IPv4 raw sockets API gives us direct access to the IP header */
	if (af == AF_INET) {
		if (len < sizeof(ip_hdr)) {
			log_debug("%s: bad packet size", __func__);
			return;
		}
		memcpy(&ip_hdr, buf, sizeof(ip_hdr));
		if (ntohs(ip_hdr.ip_len) != len) {
			log_debug("%s: invalid IP packet length %u", __func__,
			    ntohs(ip_hdr.ip_len));
			return;
		}
		buf += ip_hdr.ip_hl << 2;
		len -= ip_hdr.ip_hl << 2;
		dest.v4 = ip_hdr.ip_dst;
	}

	/* validate destination address */
	switch (af) {
	case AF_INET:
		/*
		 * Packet needs to be sent to 224.0.0.10 or to one of the
		 * interface addresses.
		 */
		if (dest.v4.s_addr != global.mcast_addr_v4.s_addr) {
			struct if_addr	*if_addr;
			int		 found = 0;

			TAILQ_FOREACH(if_addr, &iface->addr_list, entry)
				if (if_addr->af == AF_INET &&
				    dest.v4.s_addr == if_addr->addr.v4.s_addr) {
					found = 1;
					break;
				}
			if (found == 0) {
				log_debug("%s: packet sent to wrong address "
				    "%s, interface %s", __func__,
				    inet_ntoa(dest.v4), iface->name);
				return;
			}
		}
		break;
	case AF_INET6:
		/*
		 * Packet needs to be sent to ff02::a or to the link local
		 * address of the interface.
		 */
		if (!IN6_ARE_ADDR_EQUAL(&dest.v6, &global.mcast_addr_v6) &&
		    !IN6_ARE_ADDR_EQUAL(&dest.v6, &iface->linklocal)) {
			log_debug("%s: packet sent to wrong address %s, "
			    "interface %s", __func__, log_in6addr(&dest.v6),
			    iface->name);
			return;
		}
		break;
	default:
		fatalx("recv_packet: unknown af");
		break;
	}

	if (len < sizeof(*eigrp_hdr)) {
		log_debug("%s: bad packet size", __func__);
		return;
	}
	eigrp_hdr = (struct eigrp_hdr *)buf;

	recv_packet_eigrp(af, &src, &dest, iface, eigrp_hdr, buf, len);
}

static int
eigrp_hdr_sanity_check(int af, union eigrpd_addr *addr,
    struct eigrp_hdr *eigrp_hdr, uint16_t len, const struct iface *iface)
{
	if (in_cksum(eigrp_hdr, len)) {
		log_debug("%s: invalid checksum, interface %s", __func__,
		    iface->name);
		return (-1);
	}

	if (eigrp_hdr->version != EIGRP_HEADER_VERSION) {
		log_debug("%s: invalid EIGRP version %d, interface %s",
		    __func__, eigrp_hdr->version, iface->name);
		return (-1);
	}

	if (ntohs(eigrp_hdr->vrid) != EIGRP_VRID_UNICAST_AF) {
		log_debug("%s: unknown or unsupported vrid %u, interface %s",
		    __func__, ntohs(eigrp_hdr->vrid), iface->name);
		return (-1);
	}

	if (eigrp_hdr->opcode == EIGRP_OPC_HELLO &&
	    eigrp_hdr->ack_num != 0) {
		switch (af) {
		case AF_INET:
			if (IN_MULTICAST(addr->v4.s_addr)) {
				log_debug("%s: multicast ack (ipv4), "
				    "interface %s", __func__, iface->name);
				return (-1);
			}
			break;
		case AF_INET6:
			if (IN6_IS_ADDR_MULTICAST(&addr->v6)) {
				log_debug("%s: multicast ack (ipv6), "
				    "interface %s", __func__, iface->name);
				return (-1);
			}
			break;
		default:
			fatalx("eigrp_hdr_sanity_check: unknown af");
		}
	}

	return (0);
}

static struct iface *
find_iface(unsigned int ifindex, int af, union eigrpd_addr *src)
{
	struct iface	*iface;
	struct if_addr	*if_addr;
	in_addr_t	 mask;

	iface = if_lookup(econf, ifindex);
	if (iface == NULL)
		return (NULL);

	switch (af) {
	case AF_INET:
		/*
		 * From CCNP ROUTE 642-902 OCG:
		 * "EIGRP's rules about neighbor IP addresses being in the same
		 * subnet are less exact than OSPF. OSPF requires matching
		 * subnet numbers and masks. EIGRP just asks the question of
		 * whether the neighbor's IP address is in the range of
		 * addresses for the subnet as known to the local router."
		 */
		TAILQ_FOREACH(if_addr, &iface->addr_list, entry) {
			if (if_addr->af == AF_INET) {
				mask = prefixlen2mask(if_addr->prefixlen);

				if ((if_addr->addr.v4.s_addr & mask) ==
				    (src->v4.s_addr & mask))
					return (iface);
			}
		}
		break;
	case AF_INET6:
		/*
		 * draft-savage-eigrp-04 - Section 10.1:
		 * "EIGRP IPv6 will check that a received HELLO contains a valid
		 * IPv6 link-local source address."
		 */
		if (IN6_IS_ADDR_LINKLOCAL(&src->v6))
			return (iface);
		break;
	default:
		fatalx("find_iface: unknown af");
	}

	return (NULL);
}
@


1.17
log
@Merge the recv_packet_v[46] functions into one.

This reduces some code duplication and makes it easier to see the
difference between the IPv4 and IPv6 raw sockets API.

tweak + ok claudio@@, ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.16 2016/09/02 16:34:20 renato Exp $ */
d35 8
a42 3
extern struct eigrpd_conf	*econf;

int		 eigrp_hdr_sanity_check(int, union eigrpd_addr *,
d44 1
a44 1
struct iface	*find_iface(unsigned int, int, union eigrpd_addr *);
d608 1
a608 1
int
d655 1
a655 1
struct iface *
@


1.16
log
@Simplify handling of multicast addresses.

During the initialization of the eigrpe process, use inet_pton() to
store the EIGRP multicast addresses in two global variables:
* global.mcast_addr_v4 (in_addr);
* global.mcast_addr_v6 (in6_addr).

This way we don't need to create temporary in_addr/in6_addr variables
everytime we need to use these multicast addresses for something.

"I like this" claudio@@ ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.15 2016/09/02 16:29:55 renato Exp $ */
a36 1
int		 ip_hdr_sanity_check(const struct ip *, uint16_t);
d307 1
a307 1
recv_packet(int af, union eigrpd_addr *src, union eigrpd_addr *dest,
d379 1
a379 1
				fatal("recv_packet");
d461 1
d463 1
a463 1
recv_packet_v4(int fd, short event, void *bula)
d467 1
a467 1
		char	buf[CMSG_SPACE(sizeof(struct sockaddr_dl))];
d470 1
a472 2
	struct eigrp_hdr	*eigrp_hdr;
	struct iface		*iface;
d477 2
a478 1
	int			 l;
d480 2
a481 1
	union eigrpd_addr	 src, dest;
d490 2
d503 9
d514 1
a514 1
		if (cmsg->cmsg_level == IPPROTO_IP &&
d520 1
a520 95
	}

	len = (uint16_t)r;

	/* IP header sanity checks */
	if (len < sizeof(ip_hdr)) {
		log_debug("%s: bad packet size", __func__);
		return;
	}
	memcpy(&ip_hdr, buf, sizeof(ip_hdr));
	if ((l = ip_hdr_sanity_check(&ip_hdr, len)) == -1)
		return;
	buf += l;
	len -= l;

	src.v4 = ip_hdr.ip_src;
	dest.v4 = ip_hdr.ip_dst;

	/* find a matching interface */
	if ((iface = find_iface(ifindex, AF_INET, &src)) == NULL)
		return;

	/*
	 * Packet needs to be sent to AllEIGRPRouters_v4 or to one
	 * of the interface addresses.
	 */
	if (ip_hdr.ip_dst.s_addr != global.mcast_addr_v4.s_addr) {
		struct if_addr	*if_addr;
		int		 found = 0;

		TAILQ_FOREACH(if_addr, &iface->addr_list, entry)
			if (if_addr->af == AF_INET &&
			    ip_hdr.ip_dst.s_addr == if_addr->addr.v4.s_addr) {
				found = 1;
				break;
			}
		if (found == 0) {
			log_debug("%s: packet sent to wrong address %s, "
			    "interface %s", __func__, inet_ntoa(ip_hdr.ip_dst),
			    iface->name);
			return;
		}
	}

	if (len < sizeof(*eigrp_hdr)) {
		log_debug("%s: bad packet size", __func__);
		return;
	}
	eigrp_hdr = (struct eigrp_hdr *)buf;

	recv_packet(AF_INET, &src, &dest, iface, eigrp_hdr, buf, len);
}

void
recv_packet_v6(int fd, short event, void *bula)
{
	union {
		struct	cmsghdr hdr;
		char	buf[CMSG_SPACE(sizeof(struct in6_pktinfo))];
	} cmsgbuf;
	struct msghdr		 msg;
	struct iovec		 iov;
	struct sockaddr_in6	 sin6;
	struct eigrp_hdr	*eigrp_hdr;
	struct iface		*iface;
	char			*buf;
	struct cmsghdr		*cmsg;
	ssize_t			 r;
	uint16_t		 len;
	unsigned int		 ifindex = 0;
	union eigrpd_addr	 src, dest;

	if (event != EV_READ)
		return;

	/* setup buffer */
	memset(&msg, 0, sizeof(msg));
	iov.iov_base = buf = pkt_ptr;
	iov.iov_len = READ_BUF_SIZE;
	msg.msg_name = &sin6;
	msg.msg_namelen = sizeof(sin6);
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((r = recvmsg(fd, &msg, 0)) == -1) {
		if (errno != EAGAIN && errno != EINTR)
			log_debug("%s: read error: %s", __func__,
			    strerror(errno));
		return;
	}
	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (cmsg->cmsg_level == IPPROTO_IPV6 &&
a528 1
	src.v6 = sin6.sin6_addr;
d530 2
a531 4
	/* validate source address */
	if (bad_addr_v6(&src.v6)) {
		log_debug("%s: invalid source address: %s", __func__,
		    log_addr(AF_INET, &src));
d533 16
d551 41
a591 13
	/* find a matching interface */
	if ((iface = find_iface(ifindex, AF_INET6, &src)) == NULL)
		return;

	/*
	 * Packet needs to be sent to AllEIGRPRouters_v6 or to the
	 * link local address of the interface.
	 */
	if (!IN6_ARE_ADDR_EQUAL(&dest.v6, &global.mcast_addr_v6) &&
	    !IN6_ARE_ADDR_EQUAL(&dest.v6, &iface->linklocal)) {
		log_debug("%s: packet sent to wrong address %s, interface %s",
		    __func__, log_in6addr(&dest.v6), iface->name);
		return;
a593 1
	len = (uint16_t)r;
d600 1
a600 24
	recv_packet(AF_INET6, &src, &dest, iface, eigrp_hdr, buf, len);
}

int
ip_hdr_sanity_check(const struct ip *ip_hdr, uint16_t len)
{
	if (ntohs(ip_hdr->ip_len) != len) {
		log_debug("%s: invalid IP packet length %u", __func__,
		    ntohs(ip_hdr->ip_len));
		return (-1);
	}

	/* validate source address */
	if (bad_addr_v4(ip_hdr->ip_src)) {
		log_debug("%s: invalid source address: %s", __func__,
		    inet_ntoa(ip_hdr->ip_src));
		return (-1);
	}

	if (ip_hdr->ip_p != IPPROTO_EIGRP)
		/* this is enforced by the socket itself */
		fatalx("ip_hdr_sanity_check: invalid IP proto");

	return (ip_hdr->ip_hl << 2);
@


1.15
log
@Remove superfluous includes and follow style(9).

ok claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.14 2016/04/15 13:21:45 renato Exp $ */
d76 1
a76 1
		dst.sin_addr.s_addr = AllEIGRPRouters_v4;
a123 1
	struct in6_addr		 maddr = AllEIGRPRouters_v6;
d133 1
a133 1
		sa6.sin6_addr = maddr;
d534 1
a534 1
	if (ip_hdr.ip_dst.s_addr != AllEIGRPRouters_v4) {
a578 1
	struct in6_addr		 maddr = AllEIGRPRouters_v6;
d628 1
a628 1
	if (!IN6_ARE_ADDR_EQUAL(&dest.v6, &maddr) &&
@


1.14
log
@Move several other variables out of eigrpd_conf.

Now eigrpd_conf contains only variables that can be modified via a
config reload. The other variables were moved to a new struct called
eigrpd_global, which is now a central point for storing global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.13 2016/04/15 13:10:56 renato Exp $ */
d20 5
a24 2
#include <stdlib.h>
#include <stdio.h>
a25 1
#include <net/if_dl.h>
d27 2
d32 1
a32 1
#include "eigrp.h"
a33 1
#include "eigrpe.h"
@


1.13
log
@Minor fixes and code cleanup.

* whitespace cleanup;
* copy in_addr structs directly;
* add more malloc return value checks;
* fix some log messages;
* turn ifacecnt into a static variable;
* use eigrp_addrcmp() on if_deladdr() to avoid code duplication;
* s/route_print_origin/log_route_origin/
* more smaller issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.12 2016/02/21 18:56:49 renato Exp $ */
d108 1
a108 1
	if (sendmsg(econf->eigrp_socket_v4, &msg, 0) == -1) {
d141 1
a141 1
	if (sendto(econf->eigrp_socket_v6, buf->buf, buf->wpos, 0,
@


1.12
log
@Copy structs by assignment instead of memcpy.

Copying by straight assignment is shorter, easier to read and has a
higher level of abstraction. We'll only avoid it when copying from an
unaligned source (e.g., network buffers).
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.11 2016/02/21 18:53:54 renato Exp $ */
d36 1
a36 1
    struct eigrp_hdr *, uint16_t, const struct iface *);
d71 1
a71 1
		dst.sin_addr.s_addr = nbr->addr.v4.s_addr;
d521 2
a522 2
	src.v4.s_addr = ip_hdr.ip_src.s_addr;
	dest.v4.s_addr = ip_hdr.ip_dst.s_addr;
@


1.11
log
@Introduce the bad_addr() family of functions.

These functions improve code reusability as there's no more need to
check for all possible "bad" addresses in several different places.

Besides that, this patch introduce additional checks in the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.10 2016/02/21 18:40:56 renato Exp $ */
d131 1
a131 1
		memcpy(&sa6.sin6_addr, &maddr, sizeof(sa6.sin6_addr));
d379 1
a379 1
			memcpy(&re->rinfo, &ri, sizeof(re->rinfo));
@


1.10
log
@Several minor tweaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.9 2016/02/21 18:39:08 renato Exp $ */
d518 3
a523 3
	buf += l;
	len -= l;

d612 7
a646 2
	in_addr_t	 ipv4;

d653 3
a655 5
	ipv4 = ntohl(ip_hdr->ip_src.s_addr);
	if (((ipv4 >> IN_CLASSA_NSHIFT) == 0)
	    || ((ipv4 >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET)
	    || IN_MULTICAST(ipv4) || IN_BADCLASS(ipv4)) {
		log_debug("%s: invalid IP source address %s", __func__,
@


1.9
log
@Add scope id only for unicast IPv6 packets.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.8 2016/01/15 12:43:02 renato Exp $ */
d716 1
a716 1
	uint32_t	 mask;
@


1.8
log
@Several fixes in the Conditionally Received (CR) mode.

* If we fail to accept a packet when in the CR mode, do not ack it;
* Add missing ntohl() when storing the next multicast sequence tlv;
* The CR flag in the neighbor should be cleared out after use.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.7 2016/01/15 12:29:29 renato Exp $ */
d127 1
a127 1
	if (nbr)
d129 2
a130 1
	else
a131 1
	addscope(&sa6, iface->ifindex);
@


1.7
log
@Split TLV constants into subcomponents to simplify the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.6 2016/01/15 12:25:43 renato Exp $ */
a250 14
	/* ack processing */
	if (ack != 0)
		rtp_process_ack(nbr, ack);
	if (seq != 0) {
		/* check for sequence wraparound */
		if (nbr->recv_seq >= seq &&
		   !(nbr->recv_seq == UINT32_MAX && seq == 1)) {
			log_debug("%s: duplicate packet", __func__);
			rtp_send_ack(nbr);
			return (-1);
		}
		nbr->recv_seq = seq;
	}

d277 1
a277 1
			nbr->next_mcast_seq = tm->seq;
d283 1
d286 14
@


1.6
log
@Avoid the use of inet_pton() whenever possible.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.5 2015/12/13 18:55:53 renato Exp $ */
a314 1
	enum route_type		 route_type = 0;
d329 1
d344 2
a345 1
		switch (ntohs(tlv.type)) {
d367 2
a368 3
			if (af != AF_INET &&
			    (ntohs(tlv.type) == TLV_TYPE_IPV4_INTERNAL  ||
			    ntohs(tlv.type) == TLV_TYPE_IPV4_EXTERNAL))
d370 2
a371 3
			if (af != AF_INET6 &&
			    (ntohs(tlv.type) == TLV_TYPE_IPV6_INTERNAL  ||
			    ntohs(tlv.type) == TLV_TYPE_IPV6_EXTERNAL))
d374 1
a374 13
			switch (ntohs(tlv.type)) {
			case TLV_TYPE_IPV4_INTERNAL:
			case TLV_TYPE_IPV6_INTERNAL:
				route_type = EIGRP_ROUTE_INTERNAL;
				break;
			case TLV_TYPE_IPV4_EXTERNAL:
			case TLV_TYPE_IPV6_EXTERNAL:
				route_type = EIGRP_ROUTE_EXTERNAL;
				break;
			}

			if (tlv_decode_route(af, route_type, &tlv, buf,
			    &ri) < 0)
@


1.5
log
@Introduce new command to show traffic statistics.

Can be useful as a troubleshooting tool.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.4 2015/10/10 05:03:39 renato Exp $ */
d121 1
d130 1
a130 1
		inet_pton(AF_INET6, AllEIGRPRouters_v6, &sa6.sin6_addr);
a579 1
	struct in6_addr		 maddr;
d589 1
a631 2
	inet_pton(AF_INET6, AllEIGRPRouters_v6, &maddr);

@


1.4
log
@Fix detection of interface up/down events.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.3 2015/10/04 23:08:57 renato Exp $ */
d193 2
a194 1
		send_packet_v4(iface, nbr, buf);
d197 2
a198 1
		send_packet_v6(iface, nbr, buf);
d204 26
d433 1
a433 1
		if (ntohl(eigrp_hdr->ack_num) == 0)
d435 3
d441 1
d445 1
d449 1
d453 1
d457 1
@


1.3
log
@Ignore IPv4 TLVs in IPv6 instances and vice-versa.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.2 2015/10/04 23:00:10 renato Exp $ */
d710 7
a716 4
			mask = prefixlen2mask(if_addr->prefixlen);
			if ((if_addr->addr.v4.s_addr & mask) ==
			    (src->v4.s_addr & mask))
				return (iface);
@


1.2
log
@Fix warnings and add safeguards to protect against corrupted data.
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.1 2015/10/02 04:26:47 renato Exp $ */
a285 1
	int			 route_af = 0;
d321 1
a321 1
			if (tlv_decode_seq(&tlv, buf, &seq_addr_list) < 0)
d336 10
d348 1
a348 1
				route_af = AF_INET;
a351 7
				route_af = AF_INET;
				route_type = EIGRP_ROUTE_EXTERNAL;
				break;
			case TLV_TYPE_IPV6_INTERNAL:
				route_af = AF_INET6;
				route_type = EIGRP_ROUTE_INTERNAL;
				break;
a352 1
				route_af = AF_INET6;
d357 1
a357 1
			if (tlv_decode_route(route_af, route_type, &tlv, buf,
@


1.1
log
@Welcome eigrpd

The eigrpd daemon will support the Enhanced Interior Gateway Routing Protocol.

Built using the imsg/three process framework and heavily based on ospfd(8), ospf6d(8) and ldpd(8).

The current status of eigrpd(8) is as follows:
* Almost full compliance with the specification: DUAL FSM, RTP, CR mode, SIA, etc
* Support for both IPv4 and IPv6
* Support for multiple instances (different ASes/AFs) within the same process
* Support for rdomains (one process per rdomain)
* RIB/FIB synchronization
* Basic redistribution support

Not implemented features (yet):
* Configuration reload support (partially implemented)
* Route summarization
* Advanced route redistribution/filtering
* Carp integration
* Authentication (draft is missing information)
* Stub (not released by Cisco)

Not yet connected to the builds.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d199 1
a199 1
		break;
d281 3
a283 3
	struct tlv_parameter	*tp;
	struct tlv_sw_version	*tv;
	struct tlv_mcast_seq	*tm;
d286 2
a287 2
	int			 route_af;
	enum route_type		 route_type;
d680 1
a680 1
			break;
d725 1
a725 1
		break;
@

