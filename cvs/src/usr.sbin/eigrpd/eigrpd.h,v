head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.6
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10;
locks; strict;
comment	@ * @;


1.23
date	2017.02.22.14.24.50;	author renato;	state Exp;
branches;
next	1.22;
commitid	x9CmxuqJPBEKTEJN;

1.22
date	2016.09.02.17.59.58;	author benno;	state Exp;
branches;
next	1.21;
commitid	q45EjvXYS6j1V7Qb;

1.21
date	2016.09.02.16.46.29;	author renato;	state Exp;
branches;
next	1.20;
commitid	K6uLqMvlsHB7ikcI;

1.20
date	2016.09.02.16.44.33;	author renato;	state Exp;
branches;
next	1.19;
commitid	o7fEENaKxNIOcUKV;

1.19
date	2016.09.02.16.36.33;	author renato;	state Exp;
branches;
next	1.18;
commitid	RP73Rgb2x0oQ1Vfz;

1.18
date	2016.09.02.16.34.20;	author renato;	state Exp;
branches;
next	1.17;
commitid	OEx84t3rZg0W9VAV;

1.17
date	2016.09.02.16.29.55;	author renato;	state Exp;
branches;
next	1.16;
commitid	w1am8mhLiSfZo4x6;

1.16
date	2016.08.08.21.38.42;	author renato;	state Exp;
branches;
next	1.15;
commitid	fgqtijswl1VlpNiP;

1.15
date	2016.06.05.03.36.41;	author renato;	state Exp;
branches;
next	1.14;
commitid	zEMo2iI4upK0IUZs;

1.14
date	2016.04.15.13.34.08;	author renato;	state Exp;
branches;
next	1.13;
commitid	uztiTpyTVAWMXZo3;

1.13
date	2016.04.15.13.21.45;	author renato;	state Exp;
branches;
next	1.12;
commitid	zOVrWYmdyccBjHwb;

1.12
date	2016.04.15.13.18.38;	author renato;	state Exp;
branches;
next	1.11;
commitid	0UlzEoUmDtZvwtk7;

1.11
date	2016.04.15.13.10.56;	author renato;	state Exp;
branches;
next	1.10;
commitid	uxYgTnCpWxKsx7Ds;

1.10
date	2016.02.21.18.53.54;	author renato;	state Exp;
branches;
next	1.9;
commitid	wQY3qMWTuqWqk9Cy;

1.9
date	2016.02.21.18.40.56;	author renato;	state Exp;
branches;
next	1.8;
commitid	kZCMT2snnUUUOEjb;

1.8
date	2016.01.15.12.41.09;	author renato;	state Exp;
branches;
next	1.7;
commitid	mZmD6DNRylxiI3gq;

1.7
date	2016.01.15.12.36.41;	author renato;	state Exp;
branches;
next	1.6;
commitid	VxpaEFsR30Xigk4x;

1.6
date	2015.12.13.18.55.53;	author renato;	state Exp;
branches;
next	1.5;
commitid	OoBnb9jAV4TnaVRr;

1.5
date	2015.10.21.03.52.12;	author renato;	state Exp;
branches;
next	1.4;
commitid	67lIWG5WR4Do3HhB;

1.4
date	2015.10.21.03.48.09;	author renato;	state Exp;
branches;
next	1.3;
commitid	AfOWCk8vQ1tJuhIQ;

1.3
date	2015.10.04.22.54.38;	author renato;	state Exp;
branches;
next	1.2;
commitid	UF6urvMjq1VzeguX;

1.2
date	2015.10.03.18.57.11;	author renato;	state Exp;
branches;
next	1.1;
commitid	0rggjTKo2BkzYtPe;

1.1
date	2015.10.02.04.26.47;	author renato;	state Exp;
branches;
next	;
commitid	dGX9Xs9GfneSNaca;


desc
@@


1.23
log
@No need to use SIOCGIFRDOMAIN anymore.
@
text
@/*	$OpenBSD: eigrpd.h,v 1.22 2016/09/02 17:59:58 benno Exp $ */

/*
 * Copyright (c) 2015 Renato Westphal <renato@@openbsd.org>
 * Copyright (c) 2004 Esben Norby <norby@@openbsd.org>
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _EIGRPD_H_
#define _EIGRPD_H_

#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>

#include <event.h>
#include <imsg.h>

#include "eigrp.h"

#define CONF_FILE		"/etc/eigrpd.conf"
#define	EIGRPD_SOCKET		"/var/run/eigrpd.sock"
#define EIGRPD_USER		"_eigrpd"

#define EIGRPD_OPT_VERBOSE	0x00000001
#define EIGRPD_OPT_VERBOSE2	0x00000002
#define EIGRPD_OPT_NOACTION	0x00000004

#define NBR_IDSELF		1
#define NBR_CNTSTART		(NBR_IDSELF + 1)

#define	READ_BUF_SIZE		65535
#define	PKG_DEF_SIZE		512	/* compromise */
#define	RT_BUF_SIZE		16384
#define	MAX_RTSOCK_BUF		128 * 1024

#define	F_EIGRPD_INSERTED	0x0001
#define	F_KERNEL		0x0002
#define	F_CONNECTED		0x0004
#define	F_STATIC		0x0008
#define	F_DYNAMIC		0x0010
#define F_DOWN                  0x0020
#define	F_REJECT		0x0040
#define	F_BLACKHOLE		0x0080
#define	F_REDISTRIBUTED		0x0100
#define	F_CTL_EXTERNAL		0x0200	/* only used by eigrpctl */
#define	F_CTL_ACTIVE		0x0400
#define	F_CTL_ALLLINKS		0x0800

static const char * const log_procnames[] = {
	"parent",
	"eigrpe",
	"rde"
};

struct imsgev {
	struct imsgbuf		 ibuf;
	void			(*handler)(int, short, void *);
	struct event		 ev;
	short			 events;
};

enum imsg_type {
	IMSG_CTL_RELOAD,
	IMSG_CTL_SHOW_INTERFACE,
	IMSG_CTL_SHOW_NBR,
	IMSG_CTL_SHOW_TOPOLOGY,
	IMSG_CTL_SHOW_STATS,
	IMSG_CTL_CLEAR_NBR,
	IMSG_CTL_FIB_COUPLE,
	IMSG_CTL_FIB_DECOUPLE,
	IMSG_CTL_IFACE,
	IMSG_CTL_KROUTE,
	IMSG_CTL_IFINFO,
	IMSG_CTL_END,
	IMSG_CTL_LOG_VERBOSE,
	IMSG_KROUTE_CHANGE,
	IMSG_KROUTE_DELETE,
	IMSG_NONE,
	IMSG_IFINFO,
	IMSG_IFDOWN,
	IMSG_NEWADDR,
	IMSG_DELADDR,
	IMSG_NETWORK_ADD,
	IMSG_NETWORK_DEL,
	IMSG_NEIGHBOR_UP,
	IMSG_NEIGHBOR_DOWN,
	IMSG_RECV_UPDATE_INIT,
	IMSG_RECV_UPDATE,
	IMSG_RECV_QUERY,
	IMSG_RECV_REPLY,
	IMSG_RECV_SIAQUERY,
	IMSG_RECV_SIAREPLY,
	IMSG_SEND_UPDATE,
	IMSG_SEND_QUERY,
	IMSG_SEND_REPLY,
	IMSG_SEND_MUPDATE,
	IMSG_SEND_MQUERY,
	IMSG_SEND_UPDATE_END,
	IMSG_SEND_REPLY_END,
	IMSG_SEND_SIAQUERY_END,
	IMSG_SEND_SIAREPLY_END,
	IMSG_SEND_MUPDATE_END,
	IMSG_SEND_MQUERY_END,
	IMSG_SOCKET_IPC,
	IMSG_RECONF_CONF,
	IMSG_RECONF_IFACE,
	IMSG_RECONF_INSTANCE,
	IMSG_RECONF_EIGRP_IFACE,
	IMSG_RECONF_END
};

/* forward declarations */
struct eigrp_iface;
RB_HEAD(iface_id_head, eigrp_iface);
struct nbr;
RB_HEAD(nbr_addr_head, nbr);
RB_HEAD(nbr_pid_head, nbr);
struct rde_nbr;
RB_HEAD(rde_nbr_head, rde_nbr);
struct rt_node;
RB_HEAD(rt_tree, rt_node);

union eigrpd_addr {
	struct in_addr	v4;
	struct in6_addr	v6;
};

#define IN6_IS_SCOPE_EMBED(a)   \
	((IN6_IS_ADDR_LINKLOCAL(a)) ||  \
	 (IN6_IS_ADDR_MC_LINKLOCAL(a)) || \
	 (IN6_IS_ADDR_MC_INTFACELOCAL(a)))

/* interface types */
enum iface_type {
	IF_TYPE_POINTOPOINT,
	IF_TYPE_BROADCAST
};

struct if_addr {
	TAILQ_ENTRY(if_addr)	 entry;
	int			 af;
	union eigrpd_addr	 addr;
	uint8_t			 prefixlen;
	union eigrpd_addr	 dstbrd;
};
TAILQ_HEAD(if_addr_head, if_addr);

struct iface {
	TAILQ_ENTRY(iface)	 entry;
	TAILQ_HEAD(, eigrp_iface) ei_list;
	unsigned int		 ifindex;
	unsigned int		 rdomain;
	char			 name[IF_NAMESIZE];
	struct if_addr_head	 addr_list;
	struct in6_addr		 linklocal;
	int			 mtu;
	enum iface_type		 type;
	uint8_t			 if_type;
	uint64_t		 baudrate;
	uint16_t		 flags;
	uint8_t			 linkstate;
	uint8_t			 group_count_v4;
	uint8_t			 group_count_v6;
};

enum route_type {
	EIGRP_ROUTE_INTERNAL,
	EIGRP_ROUTE_EXTERNAL
};

/* routing information advertised by update/query/reply messages */
struct rinfo {
	int			 af;
	enum route_type		 type;
	union eigrpd_addr	 prefix;
	uint8_t			 prefixlen;
	union eigrpd_addr	 nexthop;
	struct classic_metric	 metric;
	struct classic_emetric	 emetric;
};

struct rinfo_entry {
	TAILQ_ENTRY(rinfo_entry) entry;
	struct rinfo		 rinfo;
};
TAILQ_HEAD(rinfo_head, rinfo_entry);

/* interface states */
#define	IF_STA_DOWN		0x01
#define	IF_STA_ACTIVE		0x02

struct summary_addr {
	TAILQ_ENTRY(summary_addr) entry;
	union eigrpd_addr	 prefix;
	uint8_t			 prefixlen;
};

struct eigrp_iface {
	RB_ENTRY(eigrp_iface)	 id_tree;
	TAILQ_ENTRY(eigrp_iface) e_entry;
	TAILQ_ENTRY(eigrp_iface) i_entry;
	struct eigrp		*eigrp;
	struct iface		*iface;
	int			 state;
	uint32_t		 ifaceid;
	struct event		 hello_timer;
	uint32_t		 delay;
	uint32_t		 bandwidth;
	uint16_t		 hello_holdtime;
	uint16_t		 hello_interval;
	uint8_t			 splithorizon;
	uint8_t			 passive;
	time_t			 uptime;
	TAILQ_HEAD(, nbr)	 nbr_list;
	struct nbr		*self;
	struct rinfo_head	 update_list;	/* multicast updates */
	struct rinfo_head	 query_list;	/* multicast queries */
	TAILQ_HEAD(, summary_addr) summary_list;
};
RB_PROTOTYPE(iface_id_head, eigrp_iface, id_tree, iface_id_compare)

#define INADDRSZ	4
#define IN6ADDRSZ	16

struct seq_addr_entry {
	TAILQ_ENTRY(seq_addr_entry) entry;
	int			 af;
	union eigrpd_addr	 addr;
};
TAILQ_HEAD(seq_addr_head, seq_addr_entry);

#define	REDIST_STATIC		0x01
#define	REDIST_RIP		0x02
#define	REDIST_OSPF		0x04
#define	REDIST_CONNECTED	0x08
#define	REDIST_DEFAULT		0x10
#define	REDIST_ADDR		0x20
#define	REDIST_NO		0x40

struct redist_metric {
	uint32_t		 bandwidth;
	uint32_t		 delay;
	uint8_t			 reliability;
	uint8_t			 load;
	uint16_t		 mtu;
};

struct redistribute {
	SIMPLEQ_ENTRY(redistribute) entry;
	uint8_t			 type;
	int			 af;
	union eigrpd_addr	 addr;
	uint8_t			 prefixlen;
	struct redist_metric	*metric;
	struct {
		uint32_t	 as;
		uint32_t	 metric;
		uint32_t	 tag;
	} emetric;
};
SIMPLEQ_HEAD(redist_list, redistribute);

struct eigrp_stats {
	uint32_t		 hellos_sent;
	uint32_t		 hellos_recv;
	uint32_t		 updates_sent;
	uint32_t		 updates_recv;
	uint32_t		 queries_sent;
	uint32_t		 queries_recv;
	uint32_t		 replies_sent;
	uint32_t		 replies_recv;
	uint32_t		 acks_sent;
	uint32_t		 acks_recv;
	uint32_t		 squeries_sent;
	uint32_t		 squeries_recv;
	uint32_t		 sreplies_sent;
	uint32_t		 sreplies_recv;
};

/* eigrp instance */
struct eigrp {
	TAILQ_ENTRY(eigrp)	 entry;
	int			 af;
	uint16_t		 as;
	uint8_t			 kvalues[6];
	uint16_t		 active_timeout;
	uint8_t			 maximum_hops;
	uint8_t			 maximum_paths;
	uint8_t			 variance;
	struct redist_metric	*dflt_metric;
	struct redist_list	 redist_list;
	TAILQ_HEAD(, eigrp_iface) ei_list;
	struct nbr_addr_head	 nbrs;
	struct rde_nbr		*rnbr_redist;
	struct rde_nbr		*rnbr_summary;
	struct rt_tree		 topology;
	uint32_t		 seq_num;
	struct eigrp_stats	 stats;
};

/* eigrp_conf */
enum eigrpd_process {
	PROC_MAIN,
	PROC_EIGRP_ENGINE,
	PROC_RDE_ENGINE
} eigrpd_process;

struct eigrpd_conf {
	struct in_addr		 rtr_id;
	unsigned int		 rdomain;
	uint8_t			 fib_priority_internal;
	uint8_t			 fib_priority_external;
	uint8_t			 fib_priority_summary;
	TAILQ_HEAD(, iface)	 iface_list;
	TAILQ_HEAD(, eigrp)	 instances;
	int			 flags;
#define	EIGRPD_FLAG_NO_FIB_UPDATE 0x0001
};

struct eigrpd_global {
	int			 cmd_opts;
	time_t			 uptime;
	int			 eigrp_socket_v4;
	int			 eigrp_socket_v6;
	struct in_addr		 mcast_addr_v4;
	struct in6_addr		 mcast_addr_v6;
	char			*csock;
};

extern struct eigrpd_global global;

/* kroute */
struct kroute {
	int			 af;
	union eigrpd_addr	 prefix;
	uint8_t			 prefixlen;
	union eigrpd_addr	 nexthop;
	unsigned short		 ifindex;
	uint8_t			 priority;
	uint16_t		 flags;
};

struct kaddr {
	unsigned short		 ifindex;
	int			 af;
	union eigrpd_addr	 addr;
	uint8_t			 prefixlen;
	union eigrpd_addr	 dstbrd;
};

struct kif {
	char			 ifname[IF_NAMESIZE];
	unsigned short		 ifindex;
	int			 flags;
	uint8_t			 link_state;
	int			 mtu;
	unsigned int		 rdomain;
	uint8_t			 if_type;
	uint64_t		 baudrate;
	uint8_t			 nh_reachable;	/* for nexthop verification */
};

/* control data structures */
struct ctl_iface {
	int			 af;
	uint16_t		 as;
	char			 name[IF_NAMESIZE];
	unsigned int		 ifindex;
	union eigrpd_addr	 addr;
	uint8_t			 prefixlen;
	uint16_t		 flags;
	uint8_t			 linkstate;
	int			 mtu;
	enum iface_type		 type;
	uint8_t			 if_type;
	uint64_t		 baudrate;
	uint32_t		 delay;
	uint32_t		 bandwidth;
	uint16_t		 hello_holdtime;
	uint16_t		 hello_interval;
	uint8_t			 splithorizon;
	uint8_t			 passive;
	time_t			 uptime;
	int			 nbr_cnt;
};

struct ctl_nbr {
	int			 af;
	uint16_t		 as;
	char			 ifname[IF_NAMESIZE];
	union eigrpd_addr	 addr;
	uint16_t		 hello_holdtime;
	time_t			 uptime;
};

struct ctl_rt {
	int			 af;
	uint16_t		 as;
	union eigrpd_addr	 prefix;
	uint8_t			 prefixlen;
	enum route_type		 type;
	union eigrpd_addr	 nexthop;
	char			 ifname[IF_NAMESIZE];
	uint32_t		 distance;
	uint32_t		 rdistance;
	uint32_t		 fdistance;
	int			 state;
	uint8_t			 flags;
	struct {
		uint32_t	 delay;
		uint32_t	 bandwidth;
		uint32_t	 mtu;
		uint8_t		 hop_count;
		uint8_t		 reliability;
		uint8_t		 load;
	} metric;
	struct classic_emetric	 emetric;
};
#define	F_CTL_RT_FIRST		0x01
#define	F_CTL_RT_SUCCESSOR	0x02
#define	F_CTL_RT_FSUCCESSOR	0x04

struct ctl_show_topology_req {
	int			 af;
	union eigrpd_addr	 prefix;
	uint8_t			 prefixlen;
	uint16_t		 flags;
};

struct ctl_stats {
	int			 af;
	uint16_t		 as;
	struct eigrp_stats	 stats;
};

#define min(x,y) ((x) <= (y) ? (x) : (y))
#define max(x,y) ((x) > (y) ? (x) : (y))

extern struct eigrpd_conf	*eigrpd_conf;
extern struct iface_id_head	 ifaces_by_id;

/* parse.y */
struct eigrpd_conf	*parse_config(char *);
int			 cmdline_symset(char *);

/* in_cksum.c */
uint16_t	 in_cksum(void *, size_t);

/* kroute.c */
int		 kif_init(void);
int		 kr_init(int, unsigned int);
void		 kif_redistribute(void);
int		 kr_change(struct kroute *);
int		 kr_delete(struct kroute *);
void		 kr_shutdown(void);
void		 kr_fib_couple(void);
void		 kr_fib_decouple(void);
void		 kr_show_route(struct imsg *);
void		 kr_ifinfo(char *, pid_t);
struct kif	*kif_findname(char *);
void		 kif_clear(void);

/* util.c */
uint8_t		 mask2prefixlen(in_addr_t);
uint8_t		 mask2prefixlen6(struct sockaddr_in6 *);
in_addr_t	 prefixlen2mask(uint8_t);
struct in6_addr	*prefixlen2mask6(uint8_t);
void		 eigrp_applymask(int, union eigrpd_addr *,
		    const union eigrpd_addr *, int);
int		 eigrp_addrcmp(int, const union eigrpd_addr *,
		    const union eigrpd_addr *);
int		 eigrp_addrisset(int, const union eigrpd_addr *);
int		 eigrp_prefixcmp(int, const union eigrpd_addr *,
		    const union eigrpd_addr *, uint8_t);
int		 bad_addr_v4(struct in_addr);
int		 bad_addr_v6(struct in6_addr *);
int		 bad_addr(int, union eigrpd_addr *);
void		 embedscope(struct sockaddr_in6 *);
void		 recoverscope(struct sockaddr_in6 *);
void		 addscope(struct sockaddr_in6 *, uint32_t);
void		 clearscope(struct in6_addr *);
void		 sa2addr(struct sockaddr *, int *, union eigrpd_addr *);

/* eigrpd.c */
int		 main_imsg_compose_eigrpe(int, pid_t, void *, uint16_t);
int		 main_imsg_compose_rde(int, pid_t, void *, uint16_t);
void		 imsg_event_add(struct imsgev *);
int		 imsg_compose_event(struct imsgev *, uint16_t, uint32_t,
		    pid_t, int, void *, uint16_t);
struct eigrp	*eigrp_find(struct eigrpd_conf *, int, uint16_t);
void		 merge_config(struct eigrpd_conf *, struct eigrpd_conf *);
struct eigrpd_conf *config_new_empty(void);
void		 config_clear(struct eigrpd_conf *);

/* printconf.c */
void		 print_config(struct eigrpd_conf *);

/* logmsg.c */
const char	*log_in6addr(const struct in6_addr *);
const char	*log_in6addr_scope(const struct in6_addr *, unsigned int);
const char	*log_sockaddr(void *);
const char	*log_addr(int, union eigrpd_addr *);
const char	*log_prefix(struct rt_node *);
const char	*log_route_origin(int, struct rde_nbr *);
const char	*opcode_name(uint8_t);
const char	*af_name(int);
const char	*if_type_name(enum iface_type);
const char	*dual_state_name(int);
const char	*ext_proto_name(int);

#endif	/* _EIGRPD_H_ */
@


1.22
log
@work on making log.c similar in all daemons:

move daemon-local functions into new logmsg.c, and reduce
the (mostly whitespace) differences so that log.c's can be diffed easily.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.21 2016/09/02 16:46:29 renato Exp $ */
d167 1
d372 1
@


1.21
log
@Minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.20 2016/09/02 16:44:33 renato Exp $ */
d64 6
d510 13
@


1.20
log
@Make functions and variables static whenever possible.

style(9) says:
"Function prototypes for private functions (i.e., functions not used
elsewhere) go at the top of the first source module. In userland,
functions local to one source module should be declared 'static'".

The benefits of doing so include:
* clean up of the eigrpd global namespace;
* improved readability;
* more hints to the compiler/linker to generate more efficient code.

Additional changes:
* Declare all extern variables in header files;
* Clean up the indentation of all function prototypes and global
  variables.

ok claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.19 2016/09/02 16:36:33 renato Exp $ */
a67 1
	void			*data;
@


1.19
log
@Merge the recv_packet_v[46] functions into one.

This reduces some code duplication and makes it easier to see the
difference between the IPv4 and IPv6 raw sockets API.

tweak + ok claudio@@, ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.18 2016/09/02 16:34:20 renato Exp $ */
d122 11
d229 1
a240 6
struct nbr;
RB_HEAD(nbr_addr_head, nbr);
RB_HEAD(nbr_pid_head, nbr);
struct rt_node;
RB_HEAD(rt_tree, rt_node);

d447 3
d459 1
a460 1
int		 kr_init(int, unsigned int);
a462 1
void		 kif_clear(void);
a465 2
void		 kr_fib_reload(void);
void		 kr_dispatch_msg(int, short, void *);
d469 1
a469 1
void		 kr_reload(void);
a494 3
void		 merge_config(struct eigrpd_conf *, struct eigrpd_conf *);
struct eigrpd_conf *config_new_empty(void);
void		 config_clear(struct eigrpd_conf *);
a497 1
uint32_t	 eigrp_router_id(struct eigrpd_conf *);
d499 3
@


1.18
log
@Simplify handling of multicast addresses.

During the initialization of the eigrpe process, use inet_pton() to
store the EIGRP multicast addresses in two global variables:
* global.mcast_addr_v4 (in_addr);
* global.mcast_addr_v6 (in6_addr).

This way we don't need to create temporary in_addr/in6_addr variables
everytime we need to use these multicast addresses for something.

"I like this" claudio@@ ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.17 2016/09/02 16:29:55 renato Exp $ */
d439 1
d484 1
@


1.17
log
@Remove superfluous includes and follow style(9).

ok claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.16 2016/08/08 21:38:42 renato Exp $ */
d328 2
@


1.16
log
@Simplify shutdown process

On shutdown, there's no need to use kill(2) to kill the child
processes. Just closing the IPC sockets will make the children receive
an EOF, break out from the event loop and then exit.

This "pipe teardown" removes a PID reuse race condition, makes the code
simpler and allow us to remove "proc" from pledge.

OK and tweaks from claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.15 2016/06/05 03:36:41 renato Exp $ */
d25 1
a26 3
#include <sys/time.h>
#include <sys/tree.h>
#include <net/route.h>
d29 1
d31 1
a32 1
#include <imsg.h>
@


1.15
log
@Improve security by calling exec after fork.

For each child process (rde and eigrpe), re-exec eigrpd with a special
"per-role" getopt flag. This way we have seperate ASLR/cookies per
process.

Based on a similar patch for bgpd, from claudio@@

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.14 2016/04/15 13:34:08 renato Exp $ */
d484 2
a485 2
void		 main_imsg_compose_eigrpe(int, pid_t, void *, uint16_t);
void		 main_imsg_compose_rde(int, pid_t, void *, uint16_t);
@


1.14
log
@Check for subnet overlap between the configured summary-addresses.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.13 2016/04/15 13:21:45 renato Exp $ */
d115 1
d306 1
a306 1
enum {
d487 1
@


1.13
log
@Move several other variables out of eigrpd_conf.

Now eigrpd_conf contains only variables that can be modified via a
config reload. The other variables were moved to a new struct called
eigrpd_global, which is now a central point for storing global variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.12 2016/04/15 13:18:38 renato Exp $ */
d435 2
@


1.12
log
@Move the command line options out of struct eigrpd_config
into an own flag field since these can't be modified via a
config reload.

Pulled from bgpd. Original author: claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.11 2016/04/15 13:10:56 renato Exp $ */
d313 6
d321 1
d323 2
a327 6
	unsigned int		 rdomain;
	uint8_t			 fib_priority_internal;
	uint8_t			 fib_priority_external;
	uint8_t			 fib_priority_summary;
	TAILQ_HEAD(, iface)	 iface_list;
	TAILQ_HEAD(, eigrp)	 instances;
d331 1
a331 1
extern int cmd_opts;
@


1.11
log
@Minor fixes and code cleanup.

* whitespace cleanup;
* copy in_addr structs directly;
* add more malloc return value checks;
* fix some log messages;
* turn ifacecnt into a static variable;
* use eigrp_addrcmp() on if_deladdr() to avoid code duplication;
* s/route_print_origin/log_route_origin/
* more smaller issues.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.10 2016/02/21 18:53:54 renato Exp $ */
d40 4
a312 6

	uint32_t		 opts;
#define EIGRPD_OPT_VERBOSE	0x00000001
#define EIGRPD_OPT_VERBOSE2	0x00000002
#define EIGRPD_OPT_NOACTION	0x00000004

d328 2
d434 1
a434 1
struct eigrpd_conf	*parse_config(char *, int);
@


1.10
log
@Introduce the bad_addr() family of functions.

These functions improve code reusability as there's no more need to
check for all possible "bad" addresses in several different places.

Besides that, this patch introduce additional checks in the code.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.9 2016/02/21 18:40:56 renato Exp $ */
d148 1
a148 1
	struct if_addr_head      addr_list;
d463 1
a463 1
    const union eigrpd_addr *, int);
d465 1
a465 1
    const union eigrpd_addr *);
d468 1
a468 1
    const union eigrpd_addr *, uint8_t);
d484 1
a484 1
    pid_t, int, void *, uint16_t);
d489 1
a489 1
void	print_config(struct eigrpd_conf *);
@


1.9
log
@Several minor tweaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.8 2016/01/15 12:41:09 renato Exp $ */
d469 3
@


1.8
log
@Minor tweaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.7 2016/01/15 12:36:41 renato Exp $ */
d123 5
d131 1
a131 1
	IF_TYPE_BROADCAST,
@


1.7
log
@Add support for manually clearing neighbors.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.6 2015/12/13 18:55:53 renato Exp $ */
d459 3
a461 2
int		 eigrp_addrcmp(int, union eigrpd_addr *, union eigrpd_addr *);
int		 eigrp_addrisset(int, union eigrpd_addr *);
@


1.6
log
@Introduce new command to show traffic statistics.

Can be useful as a troubleshooting tool.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.5 2015/10/21 03:52:12 renato Exp $ */
d75 1
@


1.5
log
@Add support for route summarization.

Working great but need more testing, especially with ipv6. For now
we don't validate if one configured summary is inside another or the
presence of duplicates. Will address these issues in a future commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.4 2015/10/21 03:48:09 renato Exp $ */
d74 1
d256 17
d291 1
d419 6
@


1.4
log
@Minor fixes and code cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.3 2015/10/04 22:54:38 renato Exp $ */
d179 6
d205 1
d299 1
d435 2
@


1.3
log
@Add option to configure or disable the DUAL active timeout.
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.2 2015/10/03 18:57:11 renato Exp $ */
d160 7
a166 7
	int				 af;
	enum route_type			 type;
	union eigrpd_addr		 prefix;
	uint8_t				 prefixlen;
	union eigrpd_addr		 nexthop;
	struct classic_metric		 metric;
	struct classic_emetric		 emetric;
d170 2
a171 2
	TAILQ_ENTRY(rinfo_entry)	 entry;
	struct rinfo			 rinfo;
d205 3
a207 3
	TAILQ_ENTRY(seq_addr_entry)	 entry;
	int				 af;
	union eigrpd_addr		 addr;
d226 5
a230 5
	uint32_t		bandwidth;
	uint32_t		delay;
	uint8_t			reliability;
	uint8_t			load;
	uint16_t		mtu;
d234 6
a239 6
	SIMPLEQ_ENTRY(redistribute)	 entry;
	uint8_t				 type;
	int				 af;
	union eigrpd_addr		 addr;
	uint8_t				 prefixlen;
	struct redist_metric		*metric;
d241 3
a243 3
		uint32_t		 as;
		uint32_t		 metric;
		uint32_t		 tag;
@


1.2
log
@Enable eigrpd(8) and eigrpctl(8) in the builds

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: eigrpd.h,v 1.1 2015/10/02 04:26:47 renato Exp $ */
d254 1
@


1.1
log
@Welcome eigrpd

The eigrpd daemon will support the Enhanced Interior Gateway Routing Protocol.

Built using the imsg/three process framework and heavily based on ospfd(8), ospf6d(8) and ldpd(8).

The current status of eigrpd(8) is as follows:
* Almost full compliance with the specification: DUAL FSM, RTP, CR mode, SIA, etc
* Support for both IPv4 and IPv6
* Support for multiple instances (different ASes/AFs) within the same process
* Support for rdomains (one process per rdomain)
* RIB/FIB synchronization
* Basic redistribution support

Not implemented features (yet):
* Configuration reload support (partially implemented)
* Route summarization
* Advanced route redistribution/filtering
* Carp integration
* Authentication (draft is missing information)
* Stub (not released by Cisco)

Not yet connected to the builds.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a46 2

#define RTP_EIGRP		28	/* XXX move to sys/net/route.h */
@

