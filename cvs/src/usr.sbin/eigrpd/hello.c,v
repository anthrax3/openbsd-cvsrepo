head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.16.29.55;	author renato;	state Exp;
branches;
next	1.4;
commitid	w1am8mhLiSfZo4x6;

1.4
date	2016.01.15.12.36.41;	author renato;	state Exp;
branches;
next	1.3;
commitid	VxpaEFsR30Xigk4x;

1.3
date	2016.01.15.12.32.34;	author renato;	state Exp;
branches;
next	1.2;
commitid	NKjBajp5Z0fkMb21;

1.2
date	2015.10.05.01.59.33;	author renato;	state Exp;
branches;
next	1.1;
commitid	gALnAEcCWDSQBrng;

1.1
date	2015.10.02.04.26.47;	author renato;	state Exp;
branches;
next	;
commitid	dGX9Xs9GfneSNaca;


desc
@@


1.5
log
@Remove superfluous includes and follow style(9).

ok claudio@@ benno@@
@
text
@/*	$OpenBSD: hello.c,v 1.4 2016/01/15 12:36:41 renato Exp $ */

/*
 * Copyright (c) 2015 Renato Westphal <renato@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <netinet/in.h>
#include <netinet/ip.h>

#include <arpa/inet.h>
#include <string.h>

#include "eigrpd.h"
#include "eigrpe.h"
#include "log.h"

/* hello packet handling */

void
send_hello(struct eigrp_iface *ei, struct seq_addr_head *seq_addr_list,
    uint32_t mcast_seq)
{
	struct eigrp		*eigrp = ei->eigrp;
	struct ibuf		*buf;
	uint8_t			 flags = 0;

	if ((buf = ibuf_dynamic(PKG_DEF_SIZE,
	    IP_MAXPACKET - sizeof(struct ip))) == NULL)
		fatal("send_hello");

	/* EIGRP header */
	if (gen_eigrp_hdr(buf, EIGRP_OPC_HELLO, flags, 0, eigrp->as))
		goto fail;

	if (gen_parameter_tlv(buf, ei, 0))
		goto fail;

	if (gen_sw_version_tlv(buf))
		goto fail;

	if (seq_addr_list && !TAILQ_EMPTY(seq_addr_list) &&
	    gen_sequence_tlv(buf, seq_addr_list))
		goto fail;

	if (mcast_seq && gen_mcast_seq_tlv(buf, mcast_seq))
		goto fail;

	/* send unreliably */
	send_packet(ei, NULL, 0, buf);
	ibuf_free(buf);
	return;
fail:
	log_warnx("%s: failed to send message", __func__);
	ibuf_free(buf);
}

void
send_peerterm(struct nbr *nbr)
{
	struct eigrp		*eigrp = nbr->ei->eigrp;
	struct ibuf		*buf;
	uint8_t			 flags = 0;

	if ((buf = ibuf_dynamic(PKG_DEF_SIZE,
	    IP_MAXPACKET - sizeof(struct ip))) == NULL)
		fatal("send_hello");

	/* EIGRP header */
	if (gen_eigrp_hdr(buf, EIGRP_OPC_HELLO, flags, 0, eigrp->as))
		goto fail;

	if (gen_parameter_tlv(buf, nbr->ei, 1))
		goto fail;

	/* send unreliably */
	send_packet(nbr->ei, nbr, 0, buf);
	ibuf_free(buf);
	return;
fail:
	log_warnx("%s: failed to send message", __func__);
	ibuf_free(buf);
}


void
recv_hello(struct eigrp_iface *ei, union eigrpd_addr *src, struct nbr *nbr,
    struct tlv_parameter *tp)
{
	/*
	 * Some old Cisco routers seems to use the "parameters tlv" with all
	 * K-values set to 255 (except k6) to inform that the neighbor has been
	 * reset. The "peer termination" tlv described in the draft for the same
	 * purpose is probably something introduced recently. Let's check for
	 * this case to maintain backward compatibility.
	 */
	if (tp->kvalues[0] == 255 && tp->kvalues[1] == 255 &&
	    tp->kvalues[2] == 255 && tp->kvalues[3] == 255 &&
	    tp->kvalues[4] == 255 && tp->kvalues[5] == 0) {
		if (nbr) {
			log_debug("%s: peer temination", __func__);
			nbr_del(nbr);
		}
		return;
	}

	if (nbr == NULL) {
		if (memcmp(ei->eigrp->kvalues, tp->kvalues, 6) != 0) {
			log_debug("%s: k-values don't match (nbr %s)",
			    __func__, log_addr(ei->eigrp->af, src));
			return;
		}

		nbr = nbr_new(ei, src, ntohs(tp->holdtime), 0);

		/* send an expedited hello */
		send_hello(ei, NULL, 0);

		send_update(nbr->ei, nbr, EIGRP_HDR_FLAG_INIT, NULL);
	}
}
@


1.4
log
@Add support for manually clearing neighbors.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.3 2016/01/15 12:32:34 renato Exp $ */
d19 5
a24 1
#include <arpa/inet.h>
d27 1
a27 1
#include "eigrp.h"
a28 1
#include "eigrpe.h"
@


1.3
log
@Do not set the EoT flag in the last startup update.

Unfortunately we don't have enough information to support the NSF feature,
the EIGRP draft is missing a lot of information in this regard.

The EoT flag is used as part of EIGRP NSF to announce the end of the
startup process with a neighbor. The problem is that, when we set this
flag, the Cisco neighbors will assume that we support NSF, which is
not true.  When this happens, these routers expect us to do things that
we don't know, and weird things can happen. So let's play safe and just
ignore this flag for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.2 2015/10/05 01:59:33 renato Exp $ */
d31 1
a31 1
    uint32_t mcast_seq, int peerterm)
d45 1
a45 1
	if (gen_parameter_tlv(buf, ei, peerterm))
d68 28
d126 1
a126 1
		send_hello(ei, NULL, 0, 0);
@


1.2
log
@When the SIA state is declared for a given destination, reset the
adjacency with the unresponsive neighbor(s).
@
text
@d1 1
a1 1
/*	$OpenBSD: hello.c,v 1.1 2015/10/02 04:26:47 renato Exp $ */
d100 1
a100 1
		send_update(nbr->ei, nbr, EIGRP_HDR_FLAG_INIT, 0, NULL);
@


1.1
log
@Welcome eigrpd

The eigrpd daemon will support the Enhanced Interior Gateway Routing Protocol.

Built using the imsg/three process framework and heavily based on ospfd(8), ospf6d(8) and ldpd(8).

The current status of eigrpd(8) is as follows:
* Almost full compliance with the specification: DUAL FSM, RTP, CR mode, SIA, etc
* Support for both IPv4 and IPv6
* Support for multiple instances (different ASes/AFs) within the same process
* Support for rdomains (one process per rdomain)
* RIB/FIB synchronization
* Basic redistribution support

Not implemented features (yet):
* Configuration reload support (partially implemented)
* Route summarization
* Advanced route redistribution/filtering
* Carp integration
* Authentication (draft is missing information)
* Stub (not released by Cisco)

Not yet connected to the builds.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d31 1
a31 1
    uint32_t mcast_seq)
d45 1
a45 1
	if (gen_parameter_tlv(buf, ei))
d98 1
a98 1
		send_hello(ei, NULL, 0);
@

