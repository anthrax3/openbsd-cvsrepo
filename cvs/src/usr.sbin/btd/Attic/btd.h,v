head	1.7;
access;
symbols
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2012.04.01.15.15.35;	author deraadt;	state dead;
branches;
next	1.6;

1.6
date	2008.11.27.00.51.17;	author uwe;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.26.21.48.30;	author uwe;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.26.15.32.56;	author uwe;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.26.06.51.43;	author uwe;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.25.17.13.53;	author uwe;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.24.23.34.42;	author uwe;	state Exp;
branches;
next	;


desc
@@


1.7
log
@move to the Attic
@
text
@/*	$OpenBSD: btd.h,v 1.6 2008/11/27 00:51:17 uwe Exp $	*/

/*
 * Copyright (c) 2008 Uwe Stuehler <uwe@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <dev/bluetooth/btdev.h>
#include <netbt/bluetooth.h>
#include <netbt/hci.h>

#include <db.h>
#include <event.h>
#include <pwd.h>
#include <stdarg.h>

#define DEFAULT_INTERFACE_NAME "OpenBSD"

#define BTD_DB		"/var/db/btd.db"
#define BTD_SOCKET	"/var/run/btd.sock"
#define BTD_USER	"_btd"

/* XXX there is no need for more than one bthub device! */
#define BTHUB_PATH	"/dev/bthub0"

#define	READ_BUF_SIZE		8192

struct btd;

struct btd_db {
	DB *dbh;
};

struct bt_interface {
	TAILQ_ENTRY(bt_interface) entry;
	struct btd *env;
	struct hci_physif *physif;
	bdaddr_t addr;
	char name[HCI_UNIT_NAME_SIZE];
	int disabled;
	int flags;
#define BTIF_EXPLICIT		0x0001 /* listed in config */
	int changes;
#define BTIF_DELETED		0x0001
#define BTIF_NAME_CHANGED	0x0002
};

struct bt_devinfo {
	/* XXX don't tie it to a kernel structure */
	struct btdev_attach_args baa;
};

struct bt_device {
	TAILQ_ENTRY(bt_device) entry;
	struct btd *env;
	bdaddr_t addr;
	uint16_t type;
	uint8_t pin[HCI_PIN_SIZE];
	uint8_t pin_size;
	int flags;
	struct bt_devinfo info;	/* filled in from database or SDP */
};

#define BTDF_ATTACH		0x0001	/* try attaching a driver */
#define BTDF_ATTACH_DONE	0x0002	/* driver is attached */
#define BTDF_SDP_STARTED	0x0004	/* SDP query is running */
#define BTDF_SDP_DONE		0x0008	/* SDP query is done */
#define BTDF_DEVINFO_VALID	0x0010	/* got device information */
#define BTDF_DELETED		0x0020	/* device deleted in config */

struct btd {
	int debug;
	struct btd_db db;
	struct hci_state *hci;
	struct sdp_state *sdp;
	TAILQ_HEAD(interfaces, bt_interface) interfaces;
	TAILQ_HEAD(devices, bt_device) devices;
};

/* ipc messages */

enum imsg_type {
	IMSG_NONE,
	IMSG_CONFIG_BEGIN,
	IMSG_CONFIG_INTERFACE,
	IMSG_CONFIG_DEVICE,
	IMSG_CONFIG_COMMIT,
	IMSG_CONFIG_ROLLBACK,
	IMSG_OPEN_HCI,
	IMSG_SET_LINK_POLICY,
	IMSG_SET_INTERFACE_FLAGS,
	IMSG_ATTACH,
	IMSG_DETACH
};

/* prototypes */

/* atomic.c */
int atomic_read(int, void *, size_t);
int atomic_write(int, const void *, size_t);

/* bt.c */
extern int priv_fd;
pid_t bt_main(int[2], struct btd *, struct passwd *);
void bt_priv_msg(enum imsg_type);
void bt_priv_send(const void *, size_t);
void bt_priv_recv(void *, size_t);
void bt_devices_changed(void);
int bt_set_interface_flags(const struct btreq *);

/* bt_subr.c */
char const *bt_ntoa(bdaddr_t const *, char[18]);
int bt_aton(char const *, bdaddr_t *);

/* conf.c */
struct btd *conf_new(void);
void conf_delete(struct btd *);

struct bt_interface *conf_add_interface(struct btd *, const bdaddr_t *);
struct bt_interface *conf_find_interface(const struct btd *, const bdaddr_t *);
void conf_delete_interface(struct bt_interface *);

struct bt_device *conf_add_device(struct btd *, const bdaddr_t *);
struct bt_device *conf_find_device(const struct btd *, const bdaddr_t *);
void conf_delete_device(struct bt_device *);

void conf_lookup_pin(const struct btd *, const bdaddr_t *,
    uint8_t[HCI_PIN_SIZE], uint8_t *);

void conf_dump(const struct btd *);

/* control.c */
void control_init(struct btd *);
void control_cleanup(void);

/* db.c */
void db_open(const char *, struct btd_db *);
int db_put_link_key(struct btd_db *, const bdaddr_t *, const uint8_t *);
int db_get_link_key(struct btd_db *, const bdaddr_t *, uint8_t *);
int db_put_devinfo(struct btd_db *, const bdaddr_t *,
    const struct bt_devinfo *);
int db_get_devinfo(struct btd_db *, const bdaddr_t *, struct bt_devinfo *);
void db_dump(struct btd_db *);

/* devinfo.c */
bdaddr_t *devinfo_laddr(struct bt_devinfo *);
bdaddr_t *devinfo_raddr(struct bt_devinfo *);
int devinfo_load(struct bt_devinfo *, void *, size_t);
void devinfo_unload(struct bt_devinfo *);
int devinfo_store(const struct bt_devinfo *, void **, size_t *);
int devinfo_load_attach_args(struct btdev_attach_args *, void *, size_t);
void devinfo_unload_attach_args(struct btdev_attach_args *);
void devinfo_dump(const struct bt_devinfo *);

/* fdpass.c */
void send_fd(int, int);
int receive_fd(int);

/* hci.c */
void hci_init(struct btd *);
int hci_reinit(struct btd *, const struct btd *);

/* log.c */
extern int debug;
void log_init(int);
void vlog(int, const char *, va_list);
void log_warn(const char *, ...);
void log_warnx(const char *, ...);
void log_info(const char *, ...);
void log_debug(const char *, ...);
void log_packet(const bdaddr_t *, const bdaddr_t *, const char *, ...);
void fatal(const char *);
void fatalx(const char *);

/* sdp.c */
void sdp_init(struct btd *);
int sdp_get_devinfo(struct bt_interface *, struct bt_device *);

/* util.c */
time_t getmonotime(void);
@


1.6
log
@Ugly workaround to bring up interfaces which were down when we found them
@
text
@d1 1
a1 1
/*	$OpenBSD: btd.h,v 1.5 2008/11/26 21:48:30 uwe Exp $	*/
@


1.5
log
@SDP works, but it needs to be redone (and non-blocking)

With this in bt.conf, the HID driver should work:

 # Enable all interfaces.
 interface * "OpenBSD BT"
 # Attach a keyboard and/or mouse, or a mobile phone emulating such things.
 attach 00:02:76:08:1c:37 type hid pin "0000"

Then start btd and run btctl -f bt.conf.
@
text
@d1 1
a1 1
/*	$OpenBSD: btd.h,v 1.4 2008/11/26 15:32:56 uwe Exp $	*/
d105 1
d123 1
@


1.4
log
@Device attach and detach (does not work because SDP is not implemented yet)
@
text
@d1 1
a1 1
/*	$OpenBSD: btd.h,v 1.3 2008/11/26 06:51:43 uwe Exp $	*/
d158 2
d189 1
a189 1
int sdp_query(struct bt_interface *, struct bt_device *);
@


1.3
log
@Implement config reloading (still only work in progress)
@
text
@d1 1
a1 1
/*	$OpenBSD: btd.h,v 1.2 2008/11/25 17:13:53 uwe Exp $	*/
d75 1
a75 1
	struct bt_devinfo info;
d78 6
a83 2
#define BTDF_VISIBLE		0x0001	/* device is discoverable */
#define BTDF_ATTACH		0x0002	/* attempt to attach a driver */
d89 1
d121 1
d170 1
a170 1
int hci_init(struct btd *);
d186 2
a187 1
int sdp_query(struct btdev_attach_args *, bdaddr_t *, bdaddr_t *, const char *);
@


1.2
log
@Get rid of dependencies on ports libraries (among other things)
@
text
@d1 1
a1 1
/*	$OpenBSD: btd.h,v 1.1 2008/11/24 23:34:42 uwe Exp $	*/
d51 1
a51 1
	const char *xname;
d55 5
a59 8
	struct event ev;
	int fd;
};

struct btd_hci {
	struct bt_interface *inquiry_interface;
	int inquiry_running;
	time_t last_inquiry;	/* start time */
d73 1
a73 2
	uint8_t pin_len;
	time_t last_seen;	/* last response to an inquiry */
d84 1
a84 1
	struct btd_hci hci;
d98 2
d106 4
d111 1
d113 3
d159 4
d165 1
a165 2
time_t hci_ping(struct btd *);
int hci_dispatch(int, struct btd *);
@


1.1
log
@Bluetooth daemon and contrl utility, one for all, work in progress
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
d44 4
a49 1
	struct event ev;
d53 1
a53 1
	const char *name;
d55 1
a58 4
struct btd_db {
	DB *dbh;
};

d72 1
d75 2
a76 1
	uint8_t *pin;		/* HCI_PIN_SIZE when not NULL */
d111 4
d116 15
a130 9
struct bt_device *conf_add_device(struct btd *,
    const bdaddr_t *);
struct bt_device *conf_find_device(const struct btd *,
    const bdaddr_t *);
struct bt_interface *conf_add_interface(struct btd *,
    const bdaddr_t *);
struct bt_interface *conf_find_interface(const struct btd *,
    const bdaddr_t *);
const uint8_t *conf_lookup_pin(const struct btd *, const bdaddr_t *);
@

