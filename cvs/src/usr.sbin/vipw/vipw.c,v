head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.2
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.8
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.16.0.12
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.8
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.6
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.4
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.2
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2017.07.12.23.10.28;	author jca;	state Exp;
branches;
next	1.20;
commitid	SR6s2jCJyAZnrFFM;

1.20
date	2017.06.29.08.45.20;	author tb;	state Exp;
branches;
next	1.19;
commitid	ON7rHqe5fKWkexvW;

1.19
date	2016.11.07.23.04.55;	author mestre;	state Exp;
branches;
next	1.18;
commitid	LoPjNaLQBMw4xRu6;

1.18
date	2015.10.16.22.54.15;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	MqDlp9DB6iLRdNmQ;

1.17
date	2014.05.07.21.20.06;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2011.08.19.20.53.36;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.57;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.17.16.09.29;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.36.55;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.24.21.14.27;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.24.19.16.43;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.30.19.09.05;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.28.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.19.18.30.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.16.18.29.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.26.01.29.42;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.05.29.18.51.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.44.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.01.14.13.24;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.11.35.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.31;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Useless include

from Matthew Martin
@
text
@/*	$OpenBSD: vipw.c,v 1.20 2017/06/29 08:45:20 tb Exp $	 */

/*
 * Copyright (c) 1987, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/time.h>
#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <util.h>

void		copyfile(int, int, struct stat *);
__dead void	usage(void);

int
main(int argc, char *argv[])
{
	int pfd, tfd;
	struct stat begin, end;
	int ch;

	while ((ch = getopt(argc, argv, "")) != -1) {
		switch (ch) {
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (argc != 0)
		usage();

	if (pledge("stdio rpath wpath cpath fattr proc exec", NULL) == -1)
		err(1, "pledge");

	pw_init();
	tfd = pw_lock(0);
	if (tfd < 0)
		errx(1, "the passwd file is busy or you cannot lock.");
	pfd = open(_PATH_MASTERPASSWD, O_RDONLY, 0);
	if (pfd < 0)
		pw_error(_PATH_MASTERPASSWD, 1, 1);
	copyfile(pfd, tfd, &begin);
	(void)close(tfd);

	for (;;) {
		pw_edit(0, NULL);
		if (stat(_PATH_MASTERPASSWD_LOCK, &end))
			pw_error(_PATH_MASTERPASSWD_LOCK, 1, 1);
		if (timespeccmp(&begin.st_mtimespec, &end.st_mtimespec, ==) &&
		    begin.st_size == end.st_size) {
			warnx("no changes made");
			pw_error((char *)NULL, 0, 0);
		}
		if (pw_mkdb(NULL, 0) == 0)
			break;
		pw_prompt();
	}

	return 0;
}

void
copyfile(int from, int to, struct stat *sb)
{
	int nr, nw, off;
	char buf[8*1024];
	struct timespec ts[2];

	if (fstat(from, sb) == -1)
		pw_error(_PATH_MASTERPASSWD, 1, 1);
	while ((nr = read(from, buf, sizeof(buf))) > 0)
		for (off = 0; nr > 0; nr -= nw, off += nw)
			if ((nw = write(to, buf + off, nr)) < 0)
				pw_error(_PATH_MASTERPASSWD_LOCK, 1, 1);
	if (nr < 0)
		pw_error(_PATH_MASTERPASSWD, 1, 1);

	ts[0] = sb->st_atim;
	ts[1] = sb->st_mtim;
	(void)futimens(to, ts);
}

__dead void
usage(void)
{
	extern char *__progname;

	(void)fprintf(stderr, "usage: %s\n", __progname);
	exit(1);
}
@


1.20
log
@Move <fcntl.h> to its alphabetic spot and add __dead attribute to usage()

ok mestre
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.19 2016/11/07 23:04:55 mestre Exp $	 */
a39 1
#include <string.h>
@


1.19
log
@- Remove -? since parameters don't make sense for this command (but still keep
default case to have usage() explaining that)
- Replace exit(3) with return to enable SSP
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.18 2015/10/16 22:54:15 deraadt Exp $	 */
d36 1
a41 1
#include <fcntl.h>
d44 2
a45 2
void	copyfile(int, int, struct stat *);
void	usage(void);
d117 1
a117 1
void
@


1.18
log
@pledge "stdio rpath wpath cpath fattr proc exec"
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.17 2014/05/07 21:20:06 schwarze Exp $	 */
a55 1
		case '?':
d92 2
a93 1
	exit(0);
@


1.17
log
@Repair the termination condition of a write(2) loop.

Since _PATH_MASTERPASSWD_LOCK is on a local file system in any sane setup
and written to in blocking mode, i don't see how write(2) could return
before having written everything, so this maybe wasn't an actual bug,
but it should be repaired anyway, if only for clarity and extra safety.

From Ben Cornett <ben at lantern dot is>;
ok millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.16 2011/08/19 20:53:36 millert Exp $	 */
d66 3
@


1.16
log
@Use futimens() instead of futimes() to avoid converting to/from
struct timeval.  OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.15 2009/10/27 23:59:57 deraadt Exp $	 */
d103 1
a103 1
		for (off = 0; off < nr; nr -= nw, off += nw)
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.14 2007/11/17 16:09:29 millert Exp $	 */
d81 1
a81 1
		if (!timespeccmp(&begin.st_mtimespec, &end.st_mtimespec, -) &&
d98 1
a98 1
	struct timeval tv[2];
d109 3
a111 6
	TIMESPEC_TO_TIMEVAL(&tv[0], &sb->st_atimespec);
	TIMESPEC_TO_TIMEVAL(&tv[1], &sb->st_mtimespec);
	(void)futimes(to, tv);

	/* Make tv_nsec the same precision as tv_usec so it compares OK. */
	TIMEVAL_TO_TIMESPEC(&tv[1], &sb->st_mtimespec);
@


1.14
log
@Deal with timespec vs. timeval precision issues.  Fixes a problem
where the "no changes" case was not properly detected due to timespec
supporting nanosec resolution but timeval only supporting microsec
resolution.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.13 2003/06/02 23:36:55 millert Exp $	 */
a30 10

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1987, 1993, 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
static char sccsid[] = "@@(#)vipw.c	8.3 (Berkeley) 4/2/94";
#endif /* not lint */
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.12 2003/01/24 21:14:27 millert Exp $	 */
d122 3
@


1.12
log
@Instead of stashing the timestamp on the pw temp file before each
edit, just stash it once in copyfile().  This fixes the check for
whether or not changes have been made (based on the timestamp) for
cases like when the _shadow group is missing but is fixed by the
admin during the next edit.
@
text
@d1 1
a1 1
/*	$OpenBSD: vipw.c,v 1.11 2003/01/24 19:16:43 deraadt Exp $	 */
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD$	 */
d58 1
a58 1
void	copyfile(int, int);
d88 1
a88 1
	copyfile(pfd, tfd);
a91 2
		if (stat(_PATH_MASTERPASSWD_LOCK, &begin))
			pw_error(_PATH_MASTERPASSWD_LOCK, 1, 1);
d108 1
a108 1
copyfile(int from, int to)
a111 1
	struct stat sb;
d114 1
a114 1
	if (fstat(from, &sb) == -1)
d123 2
a124 2
	TIMESPEC_TO_TIMEVAL(&tv[0], &sb.st_atimespec);
	TIMESPEC_TO_TIMEVAL(&tv[1], &sb.st_mtimespec);
@


1.10
log
@minor KNF
@
text
@d1 1
a1 1
/*	$NetBSD: vipw.c,v 1.4 1996/05/15 23:23:50 jtc Exp $	*/
d62 1
a62 3
main(argc, argv)
	int argc;
	char *argv[];
d110 1
a110 2
copyfile(from, to)
	int from, to;
d128 1
a128 1
	(void) futimes(to, tv);
d132 1
a132 1
usage()
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d119 1
a119 1
	
@


1.8
log
@Better file change detection:
o when copying to temp file set utimes on temp file equal to original
o use st_mtimespec instead of st_mtime for better granularity
@
text
@d58 2
a59 2
void	copyfile __P((int, int));
void	usage __P((void));
@


1.7
log
@extra arg to pw_mkdb
@
text
@d46 1
a46 1
#include <sys/types.h>
d99 1
a99 1
		if (begin.st_mtime == end.st_mtime &&
d117 2
d120 2
d128 4
d137 1
d139 1
a139 1
	(void)fprintf(stderr, "usage: vipw\n");
@


1.6
log
@Update for pw_mkdb(3) interface change.  All but vipw and userdel can
specify a username (and thus avoid rebuilding the while database).
@
text
@d104 1
a104 1
		if (pw_mkdb(NULL) == 0)
@


1.5
log
@Check size as well as mtime when deciding whether or not the file
was changed during edit.  Crontab patch from <andrew@@untraceable.net>.
It may be better to simply do a real compare inline.
@
text
@d104 1
a104 1
		if (pw_mkdb() == 0)
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d99 2
a100 1
		if (begin.st_mtime == end.st_mtime) {
@


1.3
log
@better error message
@
text
@d70 1
a70 1
	while ((ch = getopt(argc, argv, "")) != EOF) {
@


1.2
log
@libutil
@
text
@d86 1
a86 1
		errx(1, "the passwd file is busy.");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: vipw.c,v 1.3 1995/01/20 19:19:57 mycroft Exp $	*/
d55 2
a56 4

#include "pw_util.h"

char *tempname;
d84 6
a89 2
	pfd = pw_lock();
	tfd = pw_tmp();
d94 5
a98 5
		if (stat(tempname, &begin))
			pw_error(tempname, 1, 1);
		pw_edit(0);
		if (stat(tempname, &end))
			pw_error(tempname, 1, 1);
d103 1
a103 1
		if (pw_mkdb())
d120 1
a120 1
				pw_error(tempname, 1, 1);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
