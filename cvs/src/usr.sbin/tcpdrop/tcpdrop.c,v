head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.14
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.12
	OPENBSD_5_0:1.8.0.10
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.8
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.17
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	Uu5nFG3wCl0LACBb;

1.16
date	2015.01.13.03.43.18;	author lteo;	state Exp;
branches;
next	1.15;
commitid	88d8fyJyXnLrsTzn;

1.15
date	2015.01.01.03.27.56;	author lteo;	state Exp;
branches;
next	1.14;
commitid	1tpp3wuDi5Q2mWAp;

1.14
date	2014.06.29.00.58.45;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	JPNyzoRAXfnuJx1K;

1.13
date	2014.01.10.04.02.15;	author lteo;	state Exp;
branches;
next	1.12;

1.12
date	2013.10.24.02.55.50;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2013.07.09.19.35.52;	author gsoares;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.09.17.29.19;	author gsoares;	state Exp;
branches;
next	1.9;

1.9
date	2012.12.18.21.28.45;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.06.13.19.06.16;	author andreas;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.28.17.04.03;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.25.17.20.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.03.01.46.27;	author stevesk;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.22.23.55.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.09.03.22.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.27.17.52.21;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.26.19.51.20;	author markus;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/* $OpenBSD: tcpdrop.c,v 1.16 2015/01/13 03:43:18 lteo Exp $ */

/*
 * Copyright (c) 2004 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/socket.h>
#include <sys/sysctl.h>
#include <sys/queue.h>
#include <sys/timeout.h>

#include <netinet/in.h>
#include <netinet/tcp.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>

#include <err.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <netdb.h>

__dead void	 usage(void);

__dead void
usage(void)
{
	extern char	*__progname;

	fprintf(stderr,
	    "usage: %s local-addr local-port remote-addr remote-port\n",
	    __progname);
	fprintf(stderr,
	    "       %s local-addr:local-port remote-addr:remote-port\n",
	    __progname);
	exit(1);
}

/*
 * Drop a tcp connection.
 */
int
main(int argc, char **argv)
{
	int mib[] = { CTL_NET, PF_INET, IPPROTO_TCP, TCPCTL_DROP };
	struct addrinfo hints, *ail, *aif, *laddr, *faddr;
	char fhbuf[NI_MAXHOST], fsbuf[NI_MAXSERV];
	char lhbuf[NI_MAXHOST], lsbuf[NI_MAXSERV];
	char *laddr1, *addr1, *port1, *faddr2, *addr2, *port2;
	struct tcp_ident_mapping tir;
	int gaierr, rval = 0;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if (argc == 3) {
		laddr1 = addr1 = strdup(argv[1]);
		if (!addr1)
			err(1, "strdup");
		port1 = strrchr(addr1, ':');
		if (port1)
			*port1++ = '\0';
		else
			usage();

		faddr2 = addr2 = strdup(argv[2]);
		if (!addr2)
			err(1, "strdup");
		port2 = strrchr(addr2, ':');
		if (port2)
			*port2++ = '\0';
		else
			usage();
	} else if (argc == 5) {
		laddr1 = addr1 = argv[1];
		port1 = argv[2];
		faddr2 = addr2 = argv[3];
		port2 = argv[4];
	} else
		usage();

	if (addr1[0] == '[' && addr1[strlen(addr1) - 1] == ']') {
		laddr1 = strdup(addr1);
		if (!laddr1)
			err(1, "strdup");
		laddr1[strlen(laddr1) - 1] = '\0';
		laddr1++;
	}
	if (addr2[0] == '[' && addr2[strlen(addr2) - 1] == ']') {
		faddr2 = strdup(addr2);
		if (!faddr2)
			err(1, "strdup");
		faddr2[strlen(faddr2) - 1] = '\0';
		faddr2++;
	}

	if ((gaierr = getaddrinfo(laddr1, port1, &hints, &laddr)) != 0)
		errx(1, "%s port %s: %s", addr1, port1,
		    gai_strerror(gaierr));

	if ((gaierr = getaddrinfo(faddr2, port2, &hints, &faddr)) != 0)
		errx(1, "%s port %s: %s", addr2, port2,
		    gai_strerror(gaierr));

	rval = 1;
	for (ail = laddr; ail; ail = ail->ai_next) {
		for (aif = faddr; aif; aif = aif->ai_next) {
			if (ail->ai_family != aif->ai_family)
				continue;
			rval = 0;
			memset(&tir, 0, sizeof(tir));
			memcpy(&tir.faddr, aif->ai_addr, aif->ai_addrlen);
			memcpy(&tir.laddr, ail->ai_addr, ail->ai_addrlen);

			if ((gaierr = getnameinfo(aif->ai_addr, aif->ai_addrlen,
			    fhbuf, sizeof(fhbuf), fsbuf, sizeof(fsbuf),
			    NI_NUMERICHOST | NI_NUMERICSERV)) != 0)
				errx(1, "getnameinfo: %s", gai_strerror(gaierr));
			if ((gaierr = getnameinfo(ail->ai_addr, ail->ai_addrlen,
			    lhbuf, sizeof(lhbuf), lsbuf, sizeof(lsbuf),
			    NI_NUMERICHOST | NI_NUMERICSERV)) != 0)
				errx(1, "getnameinfo: %s", gai_strerror(gaierr));

			if (sysctl(mib, sizeof (mib) / sizeof (int), NULL,
			    NULL, &tir, sizeof(tir)) == -1) {
				rval = 1;
				warn("%s %s %s %s", lhbuf, lsbuf, fhbuf, fsbuf);
			} else {
				if (aif->ai_family == PF_INET6)
					printf("[%s]:%s [%s]:%s dropped\n",
					    lhbuf, lsbuf, fhbuf, fsbuf);
				else
					printf("%s:%s %s:%s dropped\n",
					    lhbuf, lsbuf, fhbuf, fsbuf);
			}
		}
	}
	freeaddrinfo(laddr);
	freeaddrinfo(faddr);
	exit(rval);
}
@


1.16
log
@Give tcpdrop a proper usage() like other programs in the tree.

ok bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.15 2015/01/01 03:27:56 lteo Exp $ */
a18 1
#include <sys/param.h>
@


1.15
log
@Remove an unnecessary freeaddrinfo() call, since errx() would free all
the memory including the one allocated by the earlier getaddrinfo()
(pointed out by claudio@@).

feedback from claudio@@
ok bluhm@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.14 2014/06/29 00:58:45 deraadt Exp $ */
d36 15
a50 1
extern char *__progname;
d78 1
a78 1
			goto fail;
d87 1
a87 1
			goto fail;
d93 2
a94 10
	} else {
fail:
		fprintf(stderr,
		    "usage: %s local-addr local-port remote-addr remote-port\n",
		    __progname);
		fprintf(stderr,
		    "       %s local-addr:local-port remote-addr:remote-port\n",
		    __progname);
		exit(1);
	}
@


1.14
log
@If you want <sys/queue.h>, you need to include it.  Don't assume that
<sys/sysctl.h> will pull in the universe (I am working on breaking that
assumption in a gentle fashion)
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.13 2014/01/10 04:02:15 lteo Exp $ */
d109 1
a109 2
	if ((gaierr = getaddrinfo(faddr2, port2, &hints, &faddr)) != 0) {
		freeaddrinfo(laddr);
a111 1
	}
@


1.13
log
@Check the return values of the strdup() calls.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.12 2013/10/24 02:55:50 deraadt Exp $ */
d22 1
@


1.12
log
@no need for netinet/ip_var.h (and friends)
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.11 2013/07/09 19:35:52 gsoares Exp $ */
d57 2
d66 2
d91 2
d98 2
@


1.11
log
@switch the rval to 1 before loop through the linked list \
and finally change back to 0 afterwards. so teach tcpdrop to exit 1 if \
ail->ai_family != aif_family.

OK markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.10 2013/07/09 17:29:19 gsoares Exp $ */
a25 1
#include <netinet/ip_var.h>
@


1.10
log
@rename laddr2 to faddr2 for more consistency. OK markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.9 2012/12/18 21:28:45 millert Exp $ */
d107 1
d112 1
@


1.9
log
@We no longer use struct eproc for kinfo_proc in sysctl.h so there
is no direct need for sys/proc.h or sys/resource.h.  Some consumers
of kinfo_proc need these for the proc flags and rlimit defines like
RLIM_INF so add the appropriate includes to them.
OK deraadt@@ sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.8 2009/06/13 19:06:16 andreas Exp $ */
d48 1
a48 1
	char *laddr1, *addr1, *port1, *laddr2, *addr2, *port2;
d64 1
a64 1
		laddr2 = addr2 = strdup(argv[2]);
d73 1
a73 1
		laddr2 = addr2 = argv[3];
d92 3
a94 3
		laddr2 = strdup(addr2);
		laddr2[strlen(laddr2) - 1] = '\0';
		laddr2++;
d101 1
a101 1
	if ((gaierr = getaddrinfo(laddr2, port2, &hints, &faddr)) != 0) {
@


1.8
log
@tcpdrop broke with the addition of routing domains.  Repair.
ok claudio@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.7 2007/03/28 17:04:03 deraadt Exp $ */
d22 1
@


1.7
log
@flesh out the addresses to make it clear what they are; requested by jmc
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.6 2007/03/25 17:20:27 deraadt Exp $ */
d110 1
@


1.6
log
@support a 2 address format (addr:port addr:port) like fstat outputs.
also enhance ipv6 support by unpacking the [addr]:port format.
ok beck, itojun, various others
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.5 2006/01/03 01:46:27 stevesk Exp $ */
d76 2
a77 1
		fprintf(stderr, "usage: %s laddr lport faddr fport\n",
d79 2
a80 1
		fprintf(stderr, "       %s laddr:lport faddr:fport\n",
@


1.5
log
@check getnameinfo() return for 0 and use errx() vs. err(); old ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.4 2004/05/22 23:55:22 deraadt Exp $ */
d47 1
d51 25
a75 1
	if (argc != 5) {
d78 2
d83 10
a92 3
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
d94 2
a95 2
	if ((gaierr = getaddrinfo(argv[1], argv[2], &hints, &laddr)) != 0)
		errx(1, "%s port %s: %s", argv[1], argv[2],
d98 1
a98 1
	if ((gaierr = getaddrinfo(argv[3], argv[4], &hints, &faddr)) != 0) {
d100 1
a100 1
		errx(1, "%s port %s: %s", argv[3], argv[4],
d112 1
a112 2
			    fhbuf, sizeof(fhbuf),
			    fsbuf, sizeof(fsbuf),
d116 1
a116 2
			    lhbuf, sizeof(lhbuf),
			    lsbuf, sizeof(lsbuf),
d124 8
a131 4
			} else
				printf("%s %s %s %s: dropped\n",
				    lhbuf, lsbuf, fhbuf, fsbuf);

@


1.4
log
@missing header
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.3 2004/05/09 03:22:39 deraadt Exp $ */
d77 1
a77 1
			if (getnameinfo(aif->ai_addr, aif->ai_addrlen,
d80 3
a82 3
			    NI_NUMERICHOST | NI_NUMERICSERV) == -1)
				err(1, "getnameinfo");
			if (getnameinfo(ail->ai_addr, ail->ai_addrlen,
d85 2
a86 2
			    NI_NUMERICHOST | NI_NUMERICSERV) == -1)
				err(1, "getnameinfo");
@


1.3
log
@pretty
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.2 2004/04/27 17:52:21 otto Exp $ */
d32 1
@


1.2
log
@Set oldp en oldlenp to NULL; provide feedback; set exit status.
ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: tcpdrop.c,v 1.1 2004/04/26 19:51:20 markus Exp $ */
d42 1
a43 3
	struct tcp_ident_mapping tir;
	int mib[] = { CTL_NET, PF_INET, IPPROTO_TCP, TCPCTL_DROP };
	int gaierr;
d46 2
a47 1
	int rval = 0;
a98 1

@


1.1
log
@drop tcp connections using sysctl(2)
@
text
@d1 1
a1 1
/* $OpenBSD: $ */
d29 1
a32 1
#include <err.h>
d43 1
a43 1
	struct tcp_ident_mapping tir, dummy;
d46 3
a48 1
	size_t i = 1;
d76 20
a95 4
			i = sizeof (tir);
			if (sysctl(mib, sizeof (mib) / sizeof (int), &dummy,
			    &i, &tir, i) == -1)
				warn(NULL);
d101 1
a101 1
	exit(0);
@

