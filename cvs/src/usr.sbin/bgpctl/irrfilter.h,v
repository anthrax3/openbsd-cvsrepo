head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.30
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7;
locks; strict;
comment	@ * @;


1.9
date	2009.09.08.16.11.36;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.08.15.40.25;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.06.16.45.34;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.05.16.43.24;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.05.11.07.47;	author henning;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.04.20.31.22;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.04.20.05.11;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.04.18.13.13;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.03.11.45.30;	author henning;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Add -4 and -6 flags to irrfilter mode, allowing you to only fetch (you
guessed it) v4 or v6 from the IRR.  Reduces size of the filter file (and
thus router resource use) when you only speak IPv4 but you want to
filter peers who announce lots of v6 space.  ok claudio@@
@
text
@/*	$OpenBSD: irrfilter.h,v 1.8 2009/09/08 15:40:25 claudio Exp $ */

/*
 * Copyright (c) 2007 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/tree.h>
#include <netinet/in.h>

#define	F_IMPORTONLY	0x01	/* skip export: items */
#define	F_IPV4		0x02	/* use IPv4 items */
#define	F_IPV6		0x04	/* use IPv6 items */

int	irrflags;
int	irrverbose;

enum pdir {
	PDIR_NONE,
	IMPORT,
	EXPORT
};

struct policy_item {
	TAILQ_ENTRY(policy_item)	 entry;
	char				*peer_addr;
	char				*action;
	char				*filter;
	enum pdir			 dir;
	u_int32_t			 peer_as;
};

TAILQ_HEAD(policy_head, policy_item);

struct router {
	TAILQ_ENTRY(router)		 entry;
	char				*address;
	struct policy_head		 policy_h;
};

TAILQ_HEAD(router_head, router)	router_head;

/* keep qtype and qtype_objs in whois.c in sync! */
enum qtype {
	QTYPE_NONE,
	QTYPE_OWNAS,
	QTYPE_ASSET,
	QTYPE_ROUTE,
	QTYPE_ROUTE6
};

struct as_set {
	RB_ENTRY(as_set)	  entry;
	char			 *name;
	char			**members;		/* direct members */
	char			**as_set;		/* members as-set */
	char			**as;			/* members aut-num */
	u_int			  n_members;
	u_int			  n_as_set;
	u_int			  n_as;
};

struct irr_prefix {
	union {
		struct in_addr	in;
		struct in6_addr	in6;
	} addr;
	sa_family_t	af;
	u_int8_t	len;
	u_int8_t	maxlen;
};

struct prefix_set {
	RB_ENTRY(prefix_set)	  entry;
	char			 *as;
	struct irr_prefix	**prefix;
	u_int			  prefixcnt;
};

/* eat trailing and leading whitespace */
#define ISWS(x)	(x == ' ' || x == '\t')
#define	EATWS(s)					\
	do {						\
		char	*ps;				\
		while (ISWS(*s))			\
			s++;				\
		ps = s + strlen(s) - 1;			\
		while (ps && ps >= s && ISWS(*ps))	\
			*ps-- = '\0';			\
	} while (0);

__dead void		 irr_main(u_int32_t, int, char *);
int			 whois(const char *, enum qtype);
int			 parse_response(FILE *, enum qtype);
int			 write_filters(char *);
struct as_set		*asset_expand(char *);
int			 asset_addmember(char *);
struct prefix_set	*prefixset_get(char *);
int			 prefixset_addmember(char *);
@


1.8
log
@Update irrfilter to support IPv6 and 4-byte AS numbers. IPv6 support based
on work by Tonnerre Lombard I just cleaned it up. OK henning, sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.7 2007/03/06 16:45:34 henning Exp $ */
d24 2
@


1.7
log
@prepare, but leave disabled, verbose operation so that you can see what is
going on (helps when the damn thing runs for hours). will be enabled with
a -v somewhen in the future
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.6 2007/03/05 16:43:24 henning Exp $ */
d40 1
a40 1
	u_int16_t			 peer_as;
d58 2
a59 1
	QTYPE_ROUTE
d76 1
@


1.6
log
@gremlins keep putting tiny KNF violations in my code in the hope I don't
spot 'em
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.5 2007/03/05 11:07:47 henning Exp $ */
d26 1
@


1.5
log
@store a maxlen with each prefix. if that is set, this prefix covers
multiple route objects (i. e. is the result of maksing out longer prefixes
or aggregation we'll do later).
if maxlen is > prefixlen, generate rules accordingly (prefixlen <= maxlen)
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.4 2007/03/04 20:31:22 henning Exp $ */
d51 1
a51 1
	
@


1.4
log
@rename struct prefix -> irr_prefix
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.3 2007/03/04 20:05:11 henning Exp $ */
d77 1
@


1.3
log
@store prefixes in binary format. we'll need that for aggregation.
discussed with pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.2 2007/03/04 18:13:13 henning Exp $ */
d71 1
a71 1
struct prefix {
d82 1
a82 1
	struct prefix		**prefix;
@


1.2
log
@store peer AS numerically
@
text
@d1 1
a1 1
/*	$OpenBSD: irrfilter.h,v 1.1 2007/03/03 11:45:30 henning Exp $ */
d21 1
d71 8
d82 1
a82 1
	char			**prefix;
@


1.1
log
@add irrfilter mode.
generates bgpd filter rules from the Internet Routing Registry aka IRR aka
the aut-num, as-set and route objects in the RIPE, ARIN, APNIC ... databases
accessed via whois, using the Routing Policy Specificaion Language RPSL.
implement the whois query interface, an RPSL parser (of course only the
parts we need), recursive as-set resolver, prefixes per AS lookup,
and an ouput module to make up the rules.
work in progress, not ready for general consumption yet.
import agreed by theo & claudio
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a33 2
	enum pdir			 dir;
	char				*peer_as;
d37 2
@

