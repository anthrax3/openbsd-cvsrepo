head	1.15;
access;
symbols
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2002.12.31.16.35.42;	author miod;	state dead;
branches;
next	1.14;

1.14
date	2002.07.12.21.14.07;	author jason;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.26.09.25.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.09.14.58.21;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.01.23.43.48;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.01.23.27.24;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.17.00.02.34;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.02.16.32.20;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.10.16.14.14.42;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	98.06.03.17.00.09;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.06.03.08.04.01;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.11.08.16.59;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.56.14;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*	$OpenBSD: screenblank.c,v 1.14 2002/07/12 21:14:07 jason Exp $	*/
/*	$NetBSD: screenblank.c,v 1.2 1996/02/28 01:18:34 thorpej Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Screensaver daemon for the Sun 3 and SPARC.
 */

#include <sys/types.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/queue.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <math.h>
#include <paths.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <syslog.h>

#include <machine/fbio.h>

#include "pathnames.h"

struct	dev_stat {
	LIST_ENTRY(dev_stat) ds_link;	/* linked list */
	char	*ds_path;		/* path to device */
	int	ds_isfb;		/* boolean; framebuffer? */
	time_t	ds_atime;		/* time device last accessed */
	time_t	ds_mtime;		/* time device last modified */
};
LIST_HEAD(ds_list, dev_stat) ds_list;

extern	char *__progname;

void add_dev(char *, int);
void change_state(int, int);
void cvt_arg(char *, struct timeval *);
void logpid(void);
void sighandler(int);
void usage(void);
void cleanup(int);

int
main(argc, argv)
	int argc;
	char **argv;
{
	struct dev_stat *dsp;
	struct timeval timo_on, timo_off, *tvp;
	struct sigaction sa;
	struct stat st;
	int ch, change, fflag = 0, kflag = 0, mflag = 0, state;

	LIST_INIT(&ds_list);

	/*
	 * Set the default timeouts: 10 minutes on, .25 seconds off.
	 */
	timo_on.tv_sec = 600;
	timo_on.tv_usec = 0;
	timo_off.tv_sec = 0;
	timo_off.tv_usec = 250000;

	while ((ch = getopt(argc, argv, "d:e:f:km")) != -1) {
		switch (ch) {
		case 'd':
			cvt_arg(optarg, &timo_on);
			break;

		case 'e':
			cvt_arg(optarg, &timo_off);
			break;

		case 'f':
			fflag = 1;
			add_dev(optarg, 1);
			break;

		case 'k':
			if (mflag || kflag)
				usage();
			kflag = 1;
			break;

		case 'm':
			if (kflag || mflag)
				usage();
			mflag = 1;
			break;

		default:
			usage();
		}
	}
	argc -= optind;
	if (argc)
		usage();

	/*
	 * Add the keyboard, mouse, and default framebuffer devices
	 * as necessary.  We _always_ check the console device.
	 */
	add_dev(_PATH_CONSOLE, 0);
	if (!kflag)
		add_dev(_PATH_KEYBOARD, 0);
	if (!mflag)
		add_dev(_PATH_MOUSE, 0);
	if (!fflag)
		add_dev(_PATH_FB, 1);

	/* Ensure that the framebuffer is on. */
	state = FBVIDEO_ON;
	change_state(state, 0);
	tvp = &timo_on;

	/*
	 * Make sure the framebuffer gets turned back on when we're
	 * killed.
	 */
	memset(&sa, 0, sizeof sa);
	sa.sa_handler = sighandler;
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_NOCLDSTOP;
	if (sigaction(SIGINT, &sa, NULL) || sigaction(SIGTERM, &sa, NULL) ||
	    sigaction(SIGHUP, &sa, NULL))
		err(1, "sigaction");

	/* Detach. */
	openlog(__progname, LOG_PID, LOG_DAEMON);
	if (daemon(0, 0))
		err(1, "daemon");
	logpid();

	/* Start the state machine. */
	for (;;) {
		change = 0;
		for (dsp = ds_list.lh_first; dsp != NULL;
		    dsp = dsp->ds_link.le_next) {
			/* Don't check framebuffers. */
			if (dsp->ds_isfb)
				continue;
			if (stat(dsp->ds_path, &st) < 0) {
				syslog(LOG_ERR, "stat(%s): %m",
				    dsp->ds_path);
				cleanup(0);
				exit(1);
			}
			if (st.st_atime > dsp->ds_atime) {
				change = 1;
				dsp->ds_atime = st.st_atime;
			}
			if (st.st_mtime > dsp->ds_mtime) {
				change = 1;
				dsp->ds_mtime = st.st_mtime;
			}
		}

		switch (state) {
		case FBVIDEO_ON:
			if (!change) {
				state = FBVIDEO_OFF;
				change_state(state, 0);
				tvp = &timo_off;
			}
			break;

		case FBVIDEO_OFF:
			if (change) {
				state = FBVIDEO_ON;
				change_state(state, 0);
				tvp = &timo_on;
			}
			break;
		}

		if (select(0, NULL, NULL, NULL, tvp) < 0) {
			syslog(LOG_ERR, "select: %m");
			cleanup(0);
			exit(1);
		}
	}
	/* NOTREACHED */
}

void
add_dev(path, isfb)
	char *path;
	int isfb;
{
	struct dev_stat *dsp1, *dsp2;

	/* Create the entry... */
	dsp1 = malloc(sizeof(struct dev_stat));
	if (dsp1 == NULL)
		errx(1, "can't allocate memory for %s", path);
	bzero(dsp1, sizeof(struct dev_stat));
	dsp1->ds_path = path;
	dsp1->ds_isfb = isfb;

	/* ...and put it in the list. */
	if (ds_list.lh_first == NULL) {
		LIST_INSERT_HEAD(&ds_list, dsp1, ds_link);
	} else {
		for (dsp2 = ds_list.lh_first; dsp2->ds_link.le_next != NULL;
		    dsp2 = dsp2->ds_link.le_next)
			/* Nothing. */ ;
		LIST_INSERT_AFTER(dsp2, dsp1, ds_link);
	}
}

/* ARGSUSED */
void
sighandler(sig)
	int sig;
{

	cleanup(1);
	_exit(0);
}

void
cleanup(sig)
	int sig;
{

	/* Kill the pid file and re-enable the framebuffer before exit. */
	unlink(_PATH_SCREENBLANKPID);
	change_state(FBVIDEO_ON, sig);
}

void
change_state(state, sig)
	int state;
	int sig;
{
	struct dev_stat *dsp;
	int fd;

	for (dsp = ds_list.lh_first; dsp != NULL; dsp = dsp->ds_link.le_next) {
		/* Don't change the state of non-framebuffers! */
		if (dsp->ds_isfb == 0)
			continue;
		if ((fd = open(dsp->ds_path, O_RDWR, 0)) < 0) {
			if (errno == ENXIO) {
				if (sig)
					_exit(1);
				else {
					syslog(LOG_WARNING, "open(%s): %m",
					    dsp->ds_path);
					exit(1);
				}
			}
			if (!sig)
				syslog(LOG_WARNING, "open: %s", dsp->ds_path);
			continue;
		}
		if (ioctl(fd, FBIOSVIDEO, &state) < 0) {
			if (!sig)
				syslog(LOG_WARNING, "ioctl: %s", dsp->ds_path);
		}
		(void)close(fd);
	}
}

void
cvt_arg(arg, tvp)
	char *arg;
	struct timeval *tvp;
{
	char *cp;
	double seconds = 0.0, exponent = -1.0;
	int period = 0;

	for (cp = arg; *cp != '\0'; ++cp) {
		if (*cp == '.') {
			if (period)
				errx(1, "invalid argument: %s", arg);
			period = 1;
			continue;
		}

		if (!isdigit(*cp))
			errx(1, "invalid argument: %s", arg);

		if (period) {
			seconds = seconds + ((*cp - '0') * pow(10.0, exponent));
			exponent -= 1.0;
		} else
			seconds = (seconds * 10.0) + (*cp - '0');
	}

	tvp->tv_sec = (long)seconds;
	tvp->tv_usec = (long)((seconds - tvp->tv_sec) * 1000000);
}

void
logpid()
{
	FILE *fp;

	if ((fp = fopen(_PATH_SCREENBLANKPID, "w")) != NULL) {
		fprintf(fp, "%ld\n", (long)getpid());
		(void)fclose(fp);
	}
}

void
usage()
{

	fprintf(stderr, "usage: %s [-k | -m] [-d timeout] [-e timeout] %s\n",
	    __progname, "[-f framebuffer]");
	exit(1);
}
@


1.14
log
@Complain about ENXIO devices on another syslog level (LOG_WARNING which doesn't
go to the console).
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.13 2002/05/26 09:25:22 deraadt Exp $	*/
@


1.13
log
@pid_t cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.12 2002/02/16 21:28:09 millert Exp $	*/
d291 1
a291 1
					syslog(LOG_ERR, "open(%s): %m",
@


1.12
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.11 2001/12/09 14:58:21 miod Exp $	*/
d345 1
a345 1
		fprintf(fp, "%u\n", getpid());
@


1.11
log
@Do not use stdio functions after a successfull call to daemon(), use
syslog() instead.
Also, be sure to unlink the pid file and to restore screen when exiting
from outside a signal handler.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.10 2001/12/01 23:43:48 miod Exp $	*/
d78 7
a84 7
void add_dev __P((char *, int));
void change_state __P((int, int));
void cvt_arg __P((char *, struct timeval *));
void logpid __P((void));
void sighandler __P((int));
void usage __P((void));
void cleanup __P((int));
@


1.10
log
@Revert previous, as pidfile() uses atexit(), which is no use if we call
_exit() in signal handlers.
Noticed by Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.9 2001/12/01 23:27:24 miod Exp $	*/
d61 1
d78 7
a84 6
static	void add_dev __P((char *, int));
static	void change_state __P((int, int));
static	void cvt_arg __P((char *, struct timeval *));
static	void logpid __P((void));
static	void sighandler __P((int));
static	void usage __P((void));
d172 1
d185 6
a190 2
			if (stat(dsp->ds_path, &st) < 0)
				err(1, "stat: %s", dsp->ds_path);
d219 5
a223 2
		if (select(0, NULL, NULL, NULL, tvp) < 0)
			err(1, "select");
d228 1
a228 1
static void
d255 1
a255 1
static void
d260 9
d270 2
a271 3
	(void)unlink(_PATH_SCREENBLANKPID);
	change_state(FBVIDEO_ON, 1);
	_exit(0);
d274 1
a274 1
static void
d290 3
a292 1
				else
d294 1
d296 2
a297 1
			warn("open: %s", dsp->ds_path);
d300 4
a303 2
		if (ioctl(fd, FBIOSVIDEO, &state) < 0)
			warn("ioctl: %s", dsp->ds_path);
d308 1
a308 1
static void
d339 1
a339 1
static void
d350 1
a350 1
static void
@


1.9
log
@Use pidfile() instead of doing the equivalent thing by hand, and sometimes
forgetting to unlink the pid file at exit.
ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.8 2001/11/17 00:02:34 deraadt Exp $	*/
d80 1
d172 1
a172 1
	pidfile(NULL);
d250 2
a251 1
	/* Re-enable the framebuffer before exit. */
d313 11
@


1.8
log
@race safety in terminal signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.7 2001/11/02 16:32:20 deraadt Exp $	*/
a79 1
static	void logpid __P((void));
d171 1
a171 1
	logpid();
d249 1
a249 2
	/* Kill the pid file and re-enable the framebuffer before exit. */
	(void)unlink(_PATH_SCREENBLANKPID);
a310 11
}

static void
logpid()
{
	FILE *fp;

	if ((fp = fopen(_PATH_SCREENBLANKPID, "w")) != NULL) {
		fprintf(fp, "%u\n", getpid());
		(void)fclose(fp);
	}
@


1.7
log
@use _exit() in signal handler; mark other issues
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.6 1998/10/16 14:14:42 jason Exp $	*/
d78 1
a78 1
static	void change_state __P((int));
d154 1
a154 1
	change_state(state);
d198 1
a198 1
				change_state(state);
d206 1
a206 1
				change_state(state);
d252 1
a252 1
	change_state(FBVIDEO_ON);	/* XXX signal race */
d257 1
a257 1
change_state(state)
d259 1
d269 6
a274 2
			if (errno == ENXIO)
				exit(1);
@


1.6
log
@Die quietly if the open fails with ENXIO
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.5 1998/06/03 17:00:09 deraadt Exp $	*/
d252 2
a253 2
	change_state(FBVIDEO_ON);
	exit(0);
@


1.5
log
@zero sigaction before use
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.4 1998/06/03 08:04:01 deraadt Exp $	*/
d268 2
@


1.4
log
@use sigemptyset()
@
text
@d1 1
a1 1
/*	$OpenBSD: screenblank.c,v 1.3 1997/06/11 08:16:59 deraadt Exp $	*/
d161 1
@


1.3
log
@sighandler, not 1003.1b
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d162 1
a162 1
	sa.sa_mask = 0;
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d81 1
a81 1
static	void sighandler __P((int, int, struct sigcontext *));
d245 2
a246 3
sighandler(sig, code, context)
	int sig, code;
	struct sigcontext *context;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: screenblank.c,v 1.1 1995/07/12 04:57:51 thorpej Exp $	*/
d4 2
a5 2
/*
 * Copyright (c) 1995 Jason R. Thorpe.
d8 3
d21 5
a25 4
 *	This product includes software developed for the NetBSD Project
 *	by Jason R. Thorpe.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d27 11
a37 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
