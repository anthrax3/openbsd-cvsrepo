head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.24
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.20
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.18
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.14
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2017.01.20.03.47.31;	author krw;	state Exp;
branches;
next	1.16;
commitid	Kgwga63pCsvReUuw;

1.16
date	2016.08.27.01.50.07;	author guenther;	state Exp;
branches;
next	1.15;
commitid	ikVlcUgcgDzn9GW3;

1.15
date	2016.05.29.02.19.02;	author guenther;	state Exp;
branches;
next	1.14;
commitid	pgcZb8G1dK0hLp5M;

1.14
date	2015.08.20.22.39.29;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	z3HrihslRYb4HqW9;

1.13
date	2015.01.16.06.40.19;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Uu5nFG3wCl0LACBb;

1.12
date	2013.08.22.04.43.41;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.03.03.20.39;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.01.00.39.22;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.36.54;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.13.23.14.07;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.29.18.39.00;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.17.00.33.04;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.08.01.21.21.07;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.16.14.23.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@In "%.*s" the * takes (int). gcc whines if you try to use the result
of pointer subtraction without a cast. So cast those expressions
to (int).

Switch one local variable to the same type as the parameter it is
compared to.

ok deraadt@@ guenther@@ beck@@
@
text
@/*	$OpenBSD: utils.c,v 1.16 2016/08/27 01:50:07 guenther Exp $	*/
/*	$NetBSD: utils.c,v 1.5.2.1 1995/11/14 08:45:46 thorpej Exp $	*/

/*
 * Copyright (c) 1988, 1992 The University of Utah and the Center
 *	for Software Science (CSS).
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Center for Software Science of the University of Utah Computer
 * Science Department.  CSS requests users of this software to return
 * to css-dist@@cs.utah.edu any improvements that they make and grant
 * CSS redistribution rights.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)utils.c	8.1 (Berkeley) 6/4/93
 *
 * From: Utah Hdr: utils.c 3.1 92/07/06
 * Author: Jeff Forys, University of Utah CSS
 */

#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>
#include "defs.h"

/*
**  DispPkt -- Display the contents of an RMPCONN packet.
**
**	Parameters:
**		rconn - packet to be displayed.
**		direct - direction packet is going (DIR_*).
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		None.
*/
void
DispPkt(RMPCONN *rconn, int direct)
{
	static const char BootFmt[] =
	    "\t\tRetCode:%u SeqNo:%x SessID:%x Vers:%u";
	static const char ReadFmt[] =
	    "\t\tRetCode:%u Offset:%x SessID:%x\n";
	struct tm *tmp;
	struct rmp_packet *rmp;
	int i;
	u_int32_t t;
	time_t tim;

	/* display direction packet is going using '>>>' or '<<<' */
	fputs((direct==DIR_RCVD)?"<<< ":(direct==DIR_SENT)?">>> ":"", DbgFp);

	/* display packet timestamp */
	
	tim = rconn->tstamp.tv_sec;
	tmp = localtime(&tim);
	fprintf(DbgFp, "%02d:%02d:%02d.%06ld   ", tmp->tm_hour, tmp->tm_min,
	    tmp->tm_sec, rconn->tstamp.tv_usec);

	/* display src or dst addr and information about network interface */
	fprintf(DbgFp, "Addr: %s   Intf: %s\n", EnetStr(rconn), IntfName);

	rmp = &rconn->rmp;

	/* display IEEE 802.2 Logical Link Control header */
	(void) fprintf(DbgFp, "\t802.2 LLC: DSAP:%x SSAP:%x CTRL:%x\n",
	    rmp->hp_llc.dsap, rmp->hp_llc.ssap, ntohs(rmp->hp_llc.cntrl));

	/* display HP extensions to 802.2 Logical Link Control header */
	(void) fprintf(DbgFp, "\tHP Ext:    DXSAP:%x SXSAP:%x\n",
	    ntohs(rmp->hp_llc.dxsap), ntohs(rmp->hp_llc.sxsap));

	/*
	 *  Display information about RMP packet using type field to
	 *  determine what kind of packet this is.
	 */
	switch (rmp->r_type) {
	case RMP_BOOT_REQ:		/* boot request */
		(void) fprintf(DbgFp, "\tBoot Request:");
		GETWORD(rmp->r_brq.rmp_seqno, t);
		if (ntohs(rmp->r_brq.rmp_session) == RMP_PROBESID) {
			if (WORDZE(rmp->r_brq.rmp_seqno))
				fputs(" (Send Server ID)", DbgFp);
			else
				fprintf(DbgFp," (Send Filename #%u)",t);
		}
		(void) fputc('\n', DbgFp);
		(void) fprintf(DbgFp, BootFmt, rmp->r_brq.rmp_retcode,
		    t, ntohs(rmp->r_brq.rmp_session),
		    ntohs(rmp->r_brq.rmp_version));
		(void) fprintf(DbgFp, "\n\t\tMachine Type: ");
		for (i = 0; i < RMP_MACHLEN; i++)
			(void) fputc(rmp->r_brq.rmp_machtype[i], DbgFp);
		DspFlnm(rmp->r_brq.rmp_flnmsize, &rmp->r_brq.rmp_flnm);
		break;
	case RMP_BOOT_REPL:		/* boot reply */
		fprintf(DbgFp, "\tBoot Reply:\n");
		GETWORD(rmp->r_brpl.rmp_seqno, t);
		(void) fprintf(DbgFp, BootFmt, rmp->r_brpl.rmp_retcode,
		    t, ntohs(rmp->r_brpl.rmp_session),
		    ntohs(rmp->r_brpl.rmp_version));
		DspFlnm(rmp->r_brpl.rmp_flnmsize,&rmp->r_brpl.rmp_flnm);
		break;
	case RMP_READ_REQ:		/* read request */
		(void) fprintf(DbgFp, "\tRead Request:\n");
		GETWORD(rmp->r_rrq.rmp_offset, t);
		(void) fprintf(DbgFp, ReadFmt, rmp->r_rrq.rmp_retcode,
		    t, ntohs(rmp->r_rrq.rmp_session));
		(void) fprintf(DbgFp, "\t\tNoOfBytes: %u\n",
		    ntohs(rmp->r_rrq.rmp_size));
		break;
	case RMP_READ_REPL:		/* read reply */
		(void) fprintf(DbgFp, "\tRead Reply:\n");
		GETWORD(rmp->r_rrpl.rmp_offset, t);
		(void) fprintf(DbgFp, ReadFmt, rmp->r_rrpl.rmp_retcode,
		    t, ntohs(rmp->r_rrpl.rmp_session));
		(void) fprintf(DbgFp, "\t\tNoOfBytesSent: %ld\n",
		    (long)(rconn->rmplen - RMPREADSIZE(0)));
		break;
	case RMP_BOOT_DONE:		/* boot complete */
		(void) fprintf(DbgFp, "\tBoot Complete:\n");
		(void) fprintf(DbgFp, "\t\tRetCode:%u SessID:%x\n",
		    rmp->r_done.rmp_retcode,
		    ntohs(rmp->r_done.rmp_session));
		break;
	default:			/* ??? */
		(void) fprintf(DbgFp, "\tUnknown Type:(%d)\n",
		    rmp->r_type);
		break;
	}
	(void) fputc('\n', DbgFp);
	(void) fflush(DbgFp);
}


/*
**  GetEtherAddr -- convert an RMP (Ethernet) address into a string.
**
**	An RMP BOOT packet has been received.  Look at the type field
**	and process Boot Requests, Read Requests, and Boot Complete
**	packets.  Any other type will be dropped with a warning msg.
**
**	Parameters:
**		addr - array of RMP_ADDRLEN bytes.
**
**	Returns:
**		Pointer to static string representation of `addr'.
**
**	Side Effects:
**		None.
**
**	Warnings:
**		- The return value points to a static buffer; it must
**		  be copied if it's to be saved.
*/
char *
GetEtherAddr(u_int8_t *addr)
{
	static char Hex[] = "0123456789abcdef";
	static char etherstr[RMP_ADDRLEN*3];
	int i;
	char *cp;

	/*
	 *  For each byte in `addr', convert it to "<hexchar><hexchar>:".
	 *  The last byte does not get a trailing `:' appended.
	 */
	i = 0;
	cp = etherstr;
	for(;;) {
		*cp++ = Hex[*addr >> 4 & 0xf];
		*cp++ = Hex[*addr++ & 0xf];
		if (++i == RMP_ADDRLEN)
			break;
		*cp++ = ':';
	}
	*cp = '\0';

	return(etherstr);
}


/*
**  DispFlnm -- Print a string of bytes to DbgFp (often, a file name).
**
**	Parameters:
**		size - number of bytes to print.
**		flnm - address of first byte.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- Characters are sent to `DbgFp'.
*/
void
DspFlnm(u_int size, char *flnm)
{
	u_int i;

	(void) fprintf(DbgFp, "\n\t\tFile Name (%u): <", size);
	for (i = 0; i < size; i++)
		(void) fputc(*flnm++, DbgFp);
	(void) fputs(">\n", DbgFp);
}


/*
**  NewClient -- allocate memory for a new CLIENT.
**
**	Parameters:
**		addr - RMP (Ethernet) address of new client.
**
**	Returns:
**		Ptr to new CLIENT or NULL if we ran out of memory.
**
**	Side Effects:
**		- Memory will be malloc'd for the new CLIENT.
**		- If malloc() fails, a log message will be generated.
*/
CLIENT *
NewClient(u_int8_t *addr)
{
	CLIENT *ctmp;

	if ((ctmp = malloc(sizeof(CLIENT))) == NULL) {
		syslog(LOG_ERR, "NewClient: out of memory (%s)",
		    GetEtherAddr(addr));
		return(NULL);
	}

	bzero(ctmp, sizeof(CLIENT));
	bcopy(addr, &ctmp->addr[0], RMP_ADDRLEN);
	return(ctmp);
}

/*
**  FreeClient -- free linked list of Clients.
**
**	Parameters:
**		None.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- All malloc'd memory associated with the linked list of
**		  CLIENTS will be free'd; `Clients' will be set to NULL.
**
**	Warnings:
**		- This routine must be called with SIGHUP blocked.
*/
void
FreeClients(void)
{
	CLIENT *ctmp;

	while (Clients != NULL) {
		ctmp = Clients;
		Clients = Clients->next;
		FreeClient(ctmp);
	}
}

/*
**  NewStr -- allocate memory for a character array.
**
**	Parameters:
**		str - null terminated character array.
**
**	Returns:
**		Ptr to new character array or NULL if we ran out of memory.
**
**	Side Effects:
**		- Memory will be malloc'd for the new character array.
**		- If malloc() fails, a log message will be generated.
*/
char *
NewStr(char *str)
{
	char *stmp;

	stmp = strdup(str);
	if (stmp == NULL) {
		syslog(LOG_ERR, "NewStr: out of memory (%s)", str);
		return(NULL);
	}
	return(stmp);
}

/*
**  To save time, NewConn and FreeConn maintain a cache of one RMPCONN
**  in `LastFree' (defined below).
*/

static RMPCONN *LastFree = NULL;

/*
**  NewConn -- allocate memory for a new RMPCONN connection.
**
**	Parameters:
**		rconn - initialization template for new connection.
**
**	Returns:
**		Ptr to new RMPCONN or NULL if we ran out of memory.
**
**	Side Effects:
**		- Memory may be malloc'd for the new RMPCONN (if not cached).
**		- If malloc() fails, a log message will be generated.
*/
RMPCONN *
NewConn(RMPCONN *rconn)
{
	RMPCONN *rtmp;

	if (LastFree == NULL) {		/* nothing cached; make a new one */
		if ((rtmp = malloc(sizeof(RMPCONN))) == NULL) {
			syslog(LOG_ERR, "NewConn: out of memory (%s)",
			    EnetStr(rconn));
			return(NULL);
		}
	} else {			/* use the cached RMPCONN */
		rtmp = LastFree;
		LastFree = NULL;
	}

	/*
	 *  Copy template into `rtmp', init file descriptor to `-1' and
	 *  set ptr to next elem NULL.
	 */
	bcopy((char *)rconn, (char *)rtmp, sizeof(RMPCONN));
	rtmp->bootfd = -1;
	rtmp->next = NULL;

	return(rtmp);
}

/*
**  FreeConn -- Free memory associated with an RMPCONN connection.
**
**	Parameters:
**		rtmp - ptr to RMPCONN to be free'd.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- Memory associated with `rtmp' may be free'd (or cached).
**		- File desc associated with `rtmp->bootfd' will be closed.
*/
void
FreeConn(RMPCONN *rtmp)
{
	/*
	 *  If the file descriptor is in use, close the file.
	 */
	if (rtmp->bootfd >= 0) {
		(void) close(rtmp->bootfd);
		rtmp->bootfd = -1;
	}

	if (LastFree == NULL)		/* cache for next time */
		rtmp = LastFree;
	else				/* already one cached; free this one */
		free((char *)rtmp);
}

/*
**  FreeConns -- free linked list of RMPCONN connections.
**
**	Parameters:
**		None.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- All malloc'd memory associated with the linked list of
**		  connections will be free'd; `RmpConns' will be set to NULL.
**		- If LastFree is != NULL, it too will be free'd & NULL'd.
**
**	Warnings:
**		- This routine must be called with SIGHUP blocked.
*/
void
FreeConns(void)
{
	RMPCONN *rtmp;

	while (RmpConns != NULL) {
		rtmp = RmpConns;
		RmpConns = RmpConns->next;
		FreeConn(rtmp);
	}

	if (LastFree != NULL) {
		free((char *)LastFree);
		LastFree = NULL;
	}
}

/*
**  AddConn -- Add a connection to the linked list of connections.
**
**	Parameters:
**		rconn - connection to be added.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- RmpConn will point to new connection.
**
**	Warnings:
**		- This routine must be called with SIGHUP blocked.
*/
void
AddConn(RMPCONN *rconn)
{
	if (RmpConns != NULL)
		rconn->next = RmpConns;
	RmpConns = rconn;
}

/*
**  FindConn -- Find a connection in the linked list of connections.
**
**	We use the RMP (Ethernet) address as the basis for determining
**	if this is the same connection.  According to the Remote Maint
**	Protocol, we can only have one connection with any machine.
**
**	Parameters:
**		rconn - connection to be found.
**
**	Returns:
**		Matching connection from linked list or NULL if not found.
**
**	Side Effects:
**		None.
**
**	Warnings:
**		- This routine must be called with SIGHUP blocked.
*/
RMPCONN *
FindConn(RMPCONN *rconn)
{
	RMPCONN *rtmp;

	for (rtmp = RmpConns; rtmp != NULL; rtmp = rtmp->next)
		if (bcmp((char *)&rconn->rmp.hp_hdr.saddr[0],
		    (char *)&rtmp->rmp.hp_hdr.saddr[0], RMP_ADDRLEN) == 0)
			break;

	return(rtmp);
}

/*
**  RemoveConn -- Remove a connection from the linked list of connections.
**
**	Parameters:
**		rconn - connection to be removed.
**
**	Returns:
**		Nothing.
**
**	Side Effects:
**		- If found, an RMPCONN will cease to exist and it will
**		  be removed from the linked list.
**
**	Warnings:
**		- This routine must be called with SIGHUP blocked.
*/
void
RemoveConn(RMPCONN *rconn)
{
	RMPCONN *thisrconn, *lastrconn;

	if (RmpConns == rconn) {		/* easy case */
		RmpConns = RmpConns->next;
		FreeConn(rconn);
	} else {				/* must traverse linked list */
		lastrconn = RmpConns;			/* set back ptr */
		thisrconn = lastrconn->next;		/* set current ptr */
		while (thisrconn != NULL) {
			if (rconn == thisrconn) {		/* found it */
				lastrconn->next = thisrconn->next;
				FreeConn(thisrconn);
				break;
			}
			lastrconn = thisrconn;
			thisrconn = thisrconn->next;
		}
	}
}
@


1.16
log
@Pull in <sys/time.h> for struct timespec, timeval, or clockrate

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.15 2016/05/29 02:19:02 guenther Exp $	*/
d230 1
a230 1
	int i;
@


1.15
log
@Delete blocking/unblocking of signals, as the handlers now just set flags
that are tested by the main loop.

ok jca@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.14 2015/08/20 22:39:29 deraadt Exp $	*/
d46 1
@


1.14
log
@stdlib.h is in scope; do not cast malloc/calloc/realloc*
ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.13 2015/01/16 06:40:19 deraadt Exp $	*/
a45 2
#include <fcntl.h>
#include <signal.h>
d76 1
a76 1
	int i, omask;
a79 11
	/*
	 *  Since we will be working with RmpConns as well as DbgFp, we
	 *  must block signals that can affect either.
	 */
	omask = sigblock(sigmask(SIGHUP)|sigmask(SIGUSR1)|sigmask(SIGUSR2));

	if (DbgFp == NULL) {			/* sanity */
		(void) sigsetmask(omask);
		return;
	}

a162 2

	(void) sigsetmask(omask);		/* reset old signal mask */
@


1.13
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.12 2013/08/22 04:43:41 guenther Exp $	*/
d271 1
a271 1
	if ((ctmp = (CLIENT *) malloc(sizeof(CLIENT))) == NULL) {
d362 1
a362 1
		if ((rtmp = (RMPCONN *) malloc(sizeof(RMPCONN))) == NULL) {
@


1.12
log
@Correct format string mismatches turned up by -Wformat=2

suggestions and ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.11 2013/04/03 03:20:39 deraadt Exp $	*/
a44 2

#include <sys/param.h>
@


1.11
log
@do not assume time_t and timeval.tv_sec are the same type
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.10 2009/10/27 23:59:54 deraadt Exp $	*/
d74 4
a77 2
	static char BootFmt[] = "\t\tRetCode:%u SeqNo:%lx SessID:%x Vers:%u";
	static char ReadFmt[] = "\t\tRetCode:%u Offset:%lx SessID:%x\n";
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.9 2004/05/01 00:39:22 deraadt Exp $	*/
d80 1
d97 3
a99 1
	tmp = localtime((time_t *)&rconn->tstamp.tv_sec);
@


1.9
log
@priv revoking; tested by millert
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.8 2003/06/02 23:36:54 millert Exp $	*/
a44 5

#ifndef lint
/*static char sccsid[] = "@@(#)utils.c	8.1 (Berkeley) 6/4/93";*/
static char rcsid[] = "$OpenBSD: utils.c,v 1.8 2003/06/02 23:36:54 millert Exp $";
#endif /* not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.7 2002/12/13 23:14:07 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: utils.c,v 1.7 2002/12/13 23:14:07 deraadt Exp $";
a80 1

@


1.7
log
@ansi & knf
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.6 2002/05/29 18:39:00 deraadt Exp $	*/
d24 1
a24 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d48 1
a48 1
static char rcsid[] = "$OpenBSD: utils.c,v 1.6 2002/05/29 18:39:00 deraadt Exp $";
@


1.6
log
@more strlcat and strlcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.5 2002/03/14 16:44:25 mpech Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: utils.c,v 1.5 2002/03/14 16:44:25 mpech Exp $";
d81 1
a81 3
DispPkt(rconn, direct)
	RMPCONN *rconn;
	int direct;
d108 1
a108 1
	        tmp->tm_sec, rconn->tstamp.tv_usec);
d117 1
a117 1
               rmp->hp_llc.dsap, rmp->hp_llc.ssap, ntohs(rmp->hp_llc.cntrl));
d121 1
a121 1
	               ntohs(rmp->hp_llc.dxsap), ntohs(rmp->hp_llc.sxsap));
d127 53
a179 52
	switch(rmp->r_type) {
		case RMP_BOOT_REQ:		/* boot request */
			(void) fprintf(DbgFp, "\tBoot Request:");
			GETWORD(rmp->r_brq.rmp_seqno, t);
			if (ntohs(rmp->r_brq.rmp_session) == RMP_PROBESID) {
				if (WORDZE(rmp->r_brq.rmp_seqno))
					fputs(" (Send Server ID)", DbgFp);
				else
					fprintf(DbgFp," (Send Filename #%u)",t);
			}
			(void) fputc('\n', DbgFp);
			(void) fprintf(DbgFp, BootFmt, rmp->r_brq.rmp_retcode,
			        t, ntohs(rmp->r_brq.rmp_session),
			        ntohs(rmp->r_brq.rmp_version));
			(void) fprintf(DbgFp, "\n\t\tMachine Type: ");
			for (i = 0; i < RMP_MACHLEN; i++)
				(void) fputc(rmp->r_brq.rmp_machtype[i], DbgFp);
			DspFlnm(rmp->r_brq.rmp_flnmsize, &rmp->r_brq.rmp_flnm);
			break;
		case RMP_BOOT_REPL:		/* boot reply */
			fprintf(DbgFp, "\tBoot Reply:\n");
			GETWORD(rmp->r_brpl.rmp_seqno, t);
			(void) fprintf(DbgFp, BootFmt, rmp->r_brpl.rmp_retcode,
			        t, ntohs(rmp->r_brpl.rmp_session),
			        ntohs(rmp->r_brpl.rmp_version));
			DspFlnm(rmp->r_brpl.rmp_flnmsize,&rmp->r_brpl.rmp_flnm);
			break;
		case RMP_READ_REQ:		/* read request */
			(void) fprintf(DbgFp, "\tRead Request:\n");
			GETWORD(rmp->r_rrq.rmp_offset, t);
			(void) fprintf(DbgFp, ReadFmt, rmp->r_rrq.rmp_retcode,
			        t, ntohs(rmp->r_rrq.rmp_session));
			(void) fprintf(DbgFp, "\t\tNoOfBytes: %u\n",
			        ntohs(rmp->r_rrq.rmp_size));
			break;
		case RMP_READ_REPL:		/* read reply */
			(void) fprintf(DbgFp, "\tRead Reply:\n");
			GETWORD(rmp->r_rrpl.rmp_offset, t);
			(void) fprintf(DbgFp, ReadFmt, rmp->r_rrpl.rmp_retcode,
			        t, ntohs(rmp->r_rrpl.rmp_session));
			(void) fprintf(DbgFp, "\t\tNoOfBytesSent: %ld\n",
			        (long)(rconn->rmplen - RMPREADSIZE(0)));
			break;
		case RMP_BOOT_DONE:		/* boot complete */
			(void) fprintf(DbgFp, "\tBoot Complete:\n");
			(void) fprintf(DbgFp, "\t\tRetCode:%u SessID:%x\n",
			        rmp->r_done.rmp_retcode,
			        ntohs(rmp->r_done.rmp_session));
			break;
		default:			/* ??? */
			(void) fprintf(DbgFp, "\tUnknown Type:(%d)\n",
				rmp->r_type);
d209 1
a209 2
GetEtherAddr(addr)
	u_int8_t *addr;
d249 1
a249 3
DspFlnm(size, flnm)
	u_int size;
	char *flnm;
d274 1
a274 2
NewClient(addr)
	u_int8_t *addr;
d280 1
a280 1
		       GetEtherAddr(addr));
d306 1
a306 1
FreeClients()
d331 1
a331 2
NewStr(str)
	char *str;
d364 1
a364 2
NewConn(rconn)
	RMPCONN *rconn;
d371 1
a371 1
			       EnetStr(rconn));
d404 1
a404 2
FreeConn(rtmp)
	RMPCONN *rtmp;
d438 1
a438 1
FreeConns()
d470 1
a470 2
AddConn(rconn)
	RMPCONN *rconn;
d497 1
a497 2
FindConn(rconn)
	RMPCONN *rconn;
d503 1
a503 1
		         (char *)&rtmp->rmp.hp_hdr.saddr[0], RMP_ADDRLEN) == 0)
d526 1
a526 2
RemoveConn(rconn)
	RMPCONN *rconn;
@


1.5
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: utils.c,v 1.4 2001/01/17 00:33:04 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: utils.c,v 1.4 2001/01/17 00:33:04 pjanzen Exp $";
d341 2
a342 1
	if ((stmp = (char *)malloc((unsigned) (strlen(str)+1))) == NULL) {
a345 2

	(void) strcpy(stmp, str);
@


1.4
log
@OpenBSD-ify.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD$";
d89 1
a89 1
	register struct rmp_packet *rmp;
d215 2
a216 2
	register int i;
	register char *cp;
d252 2
a253 2
	register u_int size;
	register char *flnm;
d255 1
a255 1
	register int i;
d313 1
a313 1
	register CLIENT *ctmp;
d413 1
a413 1
	register RMPCONN *rtmp;
d449 1
a449 1
	register RMPCONN *rtmp;
d480 1
a480 1
	register RMPCONN *rconn;
d508 1
a508 1
	register RMPCONN *rconn;
d510 1
a510 1
	register RMPCONN *rtmp;
d538 1
a538 1
	register RMPCONN *rconn;
d540 1
a540 1
	register RMPCONN *thisrconn, *lastrconn;
@


1.3
log
@64 bit botch; thorpej
@
text
@d1 1
d52 1
a52 1
static char rcsid[] = "$NetBSD: utils.c,v 1.5.2.1 1995/11/14 08:45:46 thorpej Exp $";
@


1.2
log
@repair byte order botches; from scottr@@plexus.com via netbsd
@
text
@d168 2
a169 2
			(void) fprintf(DbgFp, "\t\tNoOfBytesSent: %d\n",
			        rconn->rmplen - RMPREADSIZE(0));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: utils.c,v 1.5 1995/10/06 05:12:22 thorpej Exp $	*/
d51 1
a51 1
static char rcsid[] = "$NetBSD: utils.c,v 1.5 1995/10/06 05:12:22 thorpej Exp $";
d169 1
a169 1
			        ntohs(rconn->rmplen) - ntohs(RMPREADSIZE(0)));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
