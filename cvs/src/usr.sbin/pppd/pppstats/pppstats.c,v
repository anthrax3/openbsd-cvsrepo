head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.14
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.12
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.18
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.16
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.14
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	822YD61EeG0Xl9Na;

1.11
date	2015.01.16.06.40.19;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Uu5nFG3wCl0LACBb;

1.10
date	2009.10.27.23.59.53;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.18.21.20.08;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.18.17.29.05;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.28.07;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.09.08.45.31;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.05.08.04.52.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.09.01.22.17.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.41.32;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.56.05;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@clean up flags++ instances around getopt()
ok florian
@
text
@/*	$OpenBSD: pppstats.c,v 1.11 2015/01/16 06:40:19 deraadt Exp $	*/

/*
 * print PPP statistics:
 * 	pppstats [-a|-d] [-v|-r|-z] [-c count] [-w wait] [interface]
 *
 *   -a Show absolute values rather than deltas
 *   -d Show data rate (KB/s) rather than bytes
 *   -v Show more stats for VJ TCP header compression
 *   -r Show compression ratio
 *   -z Show compression statistics instead of default display
 *
 * History:
 *      perkins@@cps.msu.edu: Added compression statistics and alternate
 *                display. 11/94
 *      Brad Parker (brad@@cayman.com) 6/92
 *
 * from the original "slstats" by Van Jacobson:
 *
 * Contributed by Van Jacobson (van@@ee.lbl.gov), Dec 31, 1989.
 *
 * Copyright (c) 1989, 1990, 1991, 1992 Regents of the University of
 * California. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <net/ppp_defs.h>
#include <net/if.h>
#include <net/if_ppp.h>
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#include <err.h>
#include <unistd.h>

int	vflag, rflag, zflag;	/* select type of display */
int	aflag;			/* print absolute values, not deltas */
int	dflag;			/* print data rates, not bytes */
int	interval, count;
int	infinite;
int	unit;
int	s;			/* socket file descriptor */
int	signalled;		/* set if alarm goes off "early" */
char	interface[IFNAMSIZ];

void usage(void);
void catchalarm(int);
void get_ppp_stats(struct ppp_stats *);
void get_ppp_cstats(struct ppp_comp_stats *);
void intpr(void);
int main(int, char *argv[]);

void
usage()
{
	extern char *__progname;

	fprintf(stderr,
	    "usage: %s [-adrvz] [-c count] [-w wait] [interface]\n",
	    __progname);
	exit(1);
}

/*
 * Called if an interval expires before intpr has completed a loop.
 * Sets a flag to not wait for the alarm.
 */
void
catchalarm(arg)
	int arg;
{
	signalled = 1;
}

void
get_ppp_stats(curp)
	struct ppp_stats *curp;
{
	struct ifpppstatsreq req;

	memset(&req, 0, sizeof(req));
	(void)strlcpy(req.ifr_name, interface, sizeof(req.ifr_name));

	if (ioctl(s, SIOCGPPPSTATS, &req) < 0) {
		if (errno == ENOTTY)
			errx(1, "kernel support missing");
		else
			err(1, "couldn't get PPP statistics");
	}
	*curp = req.stats;
}

void
get_ppp_cstats(csp)
	struct ppp_comp_stats *csp;
{
	struct ifpppcstatsreq creq;

	memset(&creq, 0, sizeof(creq));
	(void)strlcpy(creq.ifr_name, interface, sizeof(creq.ifr_name));

	if (ioctl(s, SIOCGPPPCSTATS, &creq) < 0) {
		if (errno == ENOTTY) {
			warnx("no kernel compression support");
			if (zflag)
				exit(1);
			rflag = 0;
		} else
			err(1, "couldn't get PPP compression stats");
	}
	*csp = creq.stats;
}

#define MAX0(a)		((int)(a) > 0? (a): 0)
#define V(offset)	MAX0(cur.offset - old.offset)
#define W(offset)	MAX0(ccs.offset - ocs.offset)

#define RATIO(c, i, u)	((c) == 0? 1.0: (u) / ((double)(c) + (i)))
#define CRATE(x)	RATIO(W(x.comp_bytes), W(x.inc_bytes), W(x.unc_bytes))

#define KBPS(n)		((n) / (interval * 1000.0))

/*
 * Print a running summary of interface statistics.
 * Repeat display every interval seconds, showing statistics
 * collected over that interval.  Assumes that interval is non-zero.
 * First line printed is cumulative.
 */
void
intpr()
{
	register int line = 0;
	sigset_t oldmask, mask;
	char *bunit;
	int ratef = 0;
	struct ppp_stats cur, old;
	struct ppp_comp_stats ccs, ocs;

	memset(&old, 0, sizeof(old));
	memset(&ocs, 0, sizeof(ocs));

	for (;;) {
		get_ppp_stats(&cur);
		if (zflag || rflag)
			get_ppp_cstats(&ccs);

		(void)signal(SIGALRM, catchalarm);
		signalled = 0;
		(void)alarm(interval);

		if ((line % 20) == 0) {
			if (zflag) {
				printf("IN:  COMPRESSED  INCOMPRESSIBLE   COMP | ");
				printf("OUT: COMPRESSED  INCOMPRESSIBLE   COMP\n");
				bunit = dflag? "KB/S": "BYTE";
				printf("    %s   PACK     %s   PACK  RATIO | ",
				    bunit, bunit); 
				printf("    %s   PACK     %s   PACK  RATIO",
				    bunit, bunit);    
			} else {
				printf("%8.8s %6.6s %6.6s",
					"IN", "PACK", "VJCOMP");

				if (!rflag)
					printf(" %6.6s %6.6s", "VJUNC", "VJERR");
				if (vflag)
					printf(" %6.6s %6.6s", "VJTOSS", "NON-VJ");
				if (rflag)
					printf(" %6.6s %6.6s", "RATIO", "UBYTE");
				printf("  | %8.8s %6.6s %6.6s",
					"OUT", "PACK", "VJCOMP");

				if (!rflag)
					printf(" %6.6s %6.6s", "VJUNC", "NON-VJ");
				if (vflag)
					printf(" %6.6s %6.6s", "VJSRCH", "VJMISS");
				if (rflag)
					printf(" %6.6s %6.6s", "RATIO", "UBYTE");
			}
			putchar('\n');
		}

		if (zflag) {
			if (ratef) {
				printf("%8.3f %6u %8.3f %6u %6.2f",
				    KBPS(W(d.comp_bytes)), W(d.comp_packets),
				    KBPS(W(d.inc_bytes)), W(d.inc_packets),
				    ccs.d.ratio * 256.0);

				printf(" | %8.3f %6u %8.3f %6u %6.2f",
				    KBPS(W(c.comp_bytes)), W(c.comp_packets),
				    KBPS(W(c.inc_bytes)), W(c.inc_packets),
				    ccs.c.ratio * 256.0);
			} else {
				printf("%8u %6u %8u %6u %6.2f",
				   W(d.comp_bytes), W(d.comp_packets),
				   W(d.inc_bytes), W(d.inc_packets),
				   ccs.d.ratio * 256.0);

				printf(" | %8u %6u %8u %6u %6.2f",
				   W(c.comp_bytes), W(c.comp_packets),
				   W(c.inc_bytes), W(c.inc_packets),
				   ccs.c.ratio * 256.0);
			}
		} else {
			if (ratef)
				printf("%8.3f", KBPS(V(p.ppp_ibytes)));
			else
				printf("%8u", V(p.ppp_ibytes));
			printf(" %6u %6u", V(p.ppp_ipackets),
			    V(vj.vjs_compressedin));
			if (!rflag)
				printf(" %6u %6u", V(vj.vjs_uncompressedin),
				   V(vj.vjs_errorin));
			if (vflag)
				printf(" %6u %6u", V(vj.vjs_tossed),
				   V(p.ppp_ipackets) -
				   V(vj.vjs_compressedin) -
				   V(vj.vjs_uncompressedin) -
				   V(vj.vjs_errorin));
			if (rflag) {
				printf(" %6.2f ", CRATE(d));
				if (ratef)
					printf("%6.2f", KBPS(W(d.unc_bytes)));
				else
					printf("%6u", W(d.unc_bytes));
			}
			if (ratef)
				printf("  | %8.3f", KBPS(V(p.ppp_obytes)));
			else
				printf("  | %8u", V(p.ppp_obytes));

			printf(" %6u %6u", V(p.ppp_opackets),
			    V(vj.vjs_compressed));
			if (!rflag)
				printf(" %6u %6u",
				   V(vj.vjs_packets) - V(vj.vjs_compressed),
				   V(p.ppp_opackets) - V(vj.vjs_packets));
			if (vflag)
				printf(" %6u %6u", V(vj.vjs_searches),
				   V(vj.vjs_misses));
			if (rflag) {
				printf(" %6.2f ", CRATE(c));
				if (ratef)
					printf("%6.2f", KBPS(W(c.unc_bytes)));
				else
					printf("%6u", W(c.unc_bytes));
			}
		}

		putchar('\n');
		fflush(stdout);
		line++;

		count--;
		if (!infinite && !count)
			break;

		sigemptyset(&mask);
		sigaddset(&mask, SIGALRM);
		sigprocmask(SIG_BLOCK, &mask, &oldmask);
		if (signalled == 0) {
			sigemptyset(&mask);
			sigsuspend(&mask);
		}
		sigprocmask(SIG_SETMASK, &oldmask, NULL);
		signalled = 0;
		(void)alarm(interval);
		if (!aflag) {
			old = cur;
			ocs = ccs;
			ratef = dflag;
		}
	}
}

int
main(argc, argv)
	int argc;
	char *argv[];
{
	int c;
	struct ifreq ifr;

	(void)strlcpy(interface, "ppp0", sizeof(interface));

	while ((c = getopt(argc, argv, "advrzc:w:")) != -1) {
		switch (c) {
		case 'a':
			aflag = 1;
			break;
		case 'd':
			dflag = 1;
			break;
		case 'v':
			vflag = 1;
			break;
		case 'r':
			rflag = 1;
			break;
		case 'z':
			zflag = 1;
			break;
		case 'c':
			count = atoi(optarg);
			if (count <= 0)
				usage();
			break;
		case 'w':
			interval = atoi(optarg);
			if (interval <= 0)
				usage();
			break;
		default:
			usage();
		}
	}
	argc -= optind;
	argv += optind;

	if (!interval && count)
		interval = 5;
	if (interval && !count)
		infinite = 1;
	if (!interval && !count)
		count = 1;
	if (aflag)
		dflag = 0;

	if (argc > 1)
		usage();
	if (argc > 0)
		(void)strlcpy(interface, argv[0], sizeof(interface));

	if (sscanf(interface, "ppp%d", &unit) != 1 || unit < 0)
		errx(1, "invalid interface '%s' specified", interface);

	s = socket(AF_INET, SOCK_DGRAM, 0);
	if (s < 0)
		err(1, "couldn't create IP socket");
	(void)strlcpy(ifr.ifr_name, interface, sizeof(ifr.ifr_name));
	if (ioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0)
		errx(1, "nonexistent interface '%s' specified", interface);

	intpr();
	exit(0);
}
@


1.11
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.10 2009/10/27 23:59:53 deraadt Exp $	*/
d321 1
a321 1
			++aflag;
d324 1
a324 1
			++dflag;
d327 1
a327 1
			++vflag;
d330 1
a330 1
			++rflag;
d333 1
a333 1
			++zflag;
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.9 2007/02/18 21:20:08 jmc Exp $	*/
d50 6
a65 7
#include <sys/param.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <net/ppp_defs.h>
#include <net/if.h>
#include <net/if_ppp.h>
@


1.9
log
@tidy up synopsis and usage; from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.8 2002/06/18 17:29:05 deraadt Exp $	*/
a48 8

#ifndef lint
#if 0
static char rcsid[] = "Id: pppstats.c,v 1.22 1998/03/31 23:48:03 paulus Exp $";
#else
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.8 2002/06/18 17:29:05 deraadt Exp $";
#endif
#endif
@


1.8
log
@update copyright notice.  mckusick says that Van signed the standard
Berkeley copyright assignment form, therefore the new license should
be on these files. I just copied in the notice that Kirk mailed me.
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.7 2002/02/16 21:28:07 millert Exp $	*/
d54 1
a54 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.7 2002/02/16 21:28:07 millert Exp $";
d99 1
a99 1
	    "Usage: %s [-adrvz] [-c count] [-w wait] [interface]\n",
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.6 2001/08/09 08:45:31 deraadt Exp $	*/
d18 1
a18 1
 * from the original "slstats" by Van Jacobson
d20 1
a20 2
 * Copyright (c) 1989 Regents of the University of California.
 * All rights reserved.
d22 26
a47 11
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
d54 1
a54 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.6 2001/08/09 08:45:31 deraadt Exp $";
@


1.6
log
@sync, simplify, etc.  slstats -i is now called -w, like pppstats
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.6 2001/08/09 03:39:27 deraadt Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.6 2001/08/09 03:39:27 deraadt Exp $";
d72 6
a77 6
void usage __P((void));
void catchalarm __P((int));
void get_ppp_stats __P((struct ppp_stats *));
void get_ppp_cstats __P((struct ppp_comp_stats *));
void intpr __P((void));
int main __P((int, char *argv[]));
@


1.5
log
@pppd 2.3.5
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.4 1997/09/01 22:17:17 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.4 1997/09/01 22:17:17 millert Exp $";
d72 5
a76 6
static void usage __P((void));
static void catchalarm __P((int));
static void get_ppp_stats __P((struct ppp_stats *));
static void get_ppp_cstats __P((struct ppp_comp_stats *));
static void intpr __P((void));

d79 1
a79 1
static void
d85 1
a85 1
	    "Usage: %s [-a|-d] [-v|-r|-z] [-c count] [-w wait] [interface]\n",
d94 1
a94 1
static void
a97 1

d101 1
a101 1
static void
d108 1
a108 2
	(void)strncpy(req.ifr_name, interface, sizeof(req.ifr_name) - 1);
	req.ifr_name[sizeof(req.ifr_name) - 1] = '\0';
d119 1
a119 1
static void
d126 1
a126 2
	(void)strncpy(creq.ifr_name, interface, sizeof(creq.ifr_name) - 1);
	creq.ifr_name[sizeof(creq.ifr_name) - 1] = '\0';
d155 1
a155 1
static void
d311 1
a311 1
	(void)strcpy(interface, "ppp0");
d358 4
a361 5
	if (argc > 0) {
		(void)strncpy(interface, argv[0], sizeof(interface) - 1);
		interface[sizeof(interface) - 1] = '\0';
	}
	if (sscanf(interface, "ppp%d", &unit) != 1)
d367 1
a367 1
	(void)strcpy(ifr.ifr_name, interface);
@


1.4
log
@Update based on ppp 3.2.1.  Also fix some obvious err/errx usage and
broken strncpy() usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.3 1996/04/21 23:41:32 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "Id: pppstats.c,v 1.19 1997/04/30 06:00:27 paulus Exp";
d40 1
a40 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.3 1996/04/21 23:41:32 deraadt Exp $";
@


1.3
log
@sync to netbsd 960418
@
text
@d1 1
a1 1
/*	$OpenBSD: pppstats.c,v 1.2 1996/03/25 15:56:05 niklas Exp $	*/
d5 1
a5 1
 * 	pppstats [-v] [-r] [-z] [-c count] [-w wait] [interface]
d7 4
a10 2
 *   -v Verbose mode for default display
 *   -r Show compression ratio in default display
d13 5
a33 3
 *
 *	Van Jacobson (van@@helios.ee.lbl.gov), Dec 31, 1989:
 *	- Initial distribution.
d37 5
a41 1
static char rcsid[] = "$OpenBSD: pppstats.c,v 1.2 1996/03/25 15:56:05 niklas Exp $";
d64 1
a69 1
char	*progname;
d72 9
a80 1
void
d83 5
a87 2
	fprintf(stderr, "Usage: %s [-v|-r|-z] [-a] [-c count] [-w wait] [interface]\n",
		progname);
d95 1
a95 1
void
d97 1
a97 1
    int arg;
d99 1
d103 1
a103 1
void
d105 1
a105 1
    struct ppp_stats *curp;
d109 9
a117 4
	strncpy(req.ifr_name, interface, sizeof(req.ifr_name));
	if (ioctl(s, SIOCGPPPSTATS, &req) == 0) {
		*curp = req.stats;
		return;
d119 1
a119 5
	fprintf(stderr, "%s: ", progname);
	if (errno == ENOTTY)
		errx(1, "kernel support missing");
	else
		err(1, "couldn't get PPP statistics");
d122 1
a122 1
void
d124 1
a124 1
    struct ppp_comp_stats *csp;
d128 12
a139 4
	strncpy(creq.ifr_name, interface, sizeof(creq.ifr_name));
	if (ioctl(s, SIOCGPPPCSTATS, &creq) == 0) {
		*csp = creq.stats;
		return;
d141 1
a141 7
	if (errno == ENOTTY) {
		if (zflag)
			errx(1, "no kernel compression support\n");
		warnx("no kernel compression support\n");
		rflag = 0;
	} else
		err(1, "couldn't get PPP compression stats");
d151 2
d159 1
a159 1
void
d163 3
a165 1
	sigset_t oldmask;
d172 1
a172 1
	while (1) {
d180 1
a180 1
    
d185 5
a189 2
				printf("    BYTE   PACK     BYTE   PACK  RATIO | ");
				printf("    BYTE   PACK     BYTE   PACK  RATIO");
d214 21
a234 14
			printf("%8u %6u %8u %6u %6.2f",
			       W(d.comp_bytes),
			       W(d.comp_packets),
			       W(d.inc_bytes),
			       W(d.inc_packets),
			       ccs.d.ratio * 256.0);

			printf(" | %8u %6u %8u %6u %6.2f",
			       W(c.comp_bytes),
			       W(c.comp_packets),
			       W(c.inc_bytes),
			       W(c.inc_packets),
			       ccs.c.ratio * 256.0);
	
d236 6
a241 5

			printf("%8u %6u %6u",
			       V(p.ppp_ibytes),
			       V(p.ppp_ipackets),
			       V(vj.vjs_compressedin));
d243 2
a244 3
				printf(" %6u %6u",
				       V(vj.vjs_uncompressedin),
				       V(vj.vjs_errorin));
d246 19
a264 14
				printf(" %6u %6u",
				       V(vj.vjs_tossed),
				       V(p.ppp_ipackets) -
				       V(vj.vjs_compressedin) -
				       V(vj.vjs_uncompressedin) -
				       V(vj.vjs_errorin));
			if (rflag)
				printf(" %6.2f %6u",
				       CRATE(d),
				       W(d.unc_bytes));
			printf("  | %8u %6u %6u",
			       V(p.ppp_obytes),
			       V(p.ppp_opackets),
			       V(vj.vjs_compressed));
d267 2
a268 2
				       V(vj.vjs_packets) - V(vj.vjs_compressed),
				       V(p.ppp_opackets) - V(vj.vjs_packets));
d270 9
a278 9
				printf(" %6u %6u",
				       V(vj.vjs_searches),
				       V(vj.vjs_misses));

			if (rflag)
				printf(" %6.2f %6u",
				       CRATE(c),
				       W(c.unc_bytes));
	    
d289 8
a296 4
		oldmask = sigblock(sigmask(SIGALRM));
		if (signalled == 0)
			sigpause(0);
		sigsetmask(oldmask);
d302 1
d315 1
a315 5
	strcpy(interface, "ppp0");
	if ((progname = strrchr(argv[0], '/')) == NULL)
		progname = argv[0];
	else
		++progname;
d317 1
a317 1
	while ((c = getopt(argc, argv, "avrzc:w:")) != -1) {
d322 3
d357 2
d362 6
a367 2
	if (argc > 0)
		strncpy(interface, argv[0], sizeof(interface));
a368 2
	if (sscanf(interface, "ppp%d", &unit) != 1)
		errx(1, "invalid interface '%s' specified\n", interface);
d372 1
a372 1
	strcpy(ifr.ifr_name, interface);
d374 1
a374 1
		errx(1, "nonexistent interface '%s' specified\n", interface);
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
a33 1
static char rcsid[] = "$OpenBSD$";
d121 3
a123 3

#define V(offset)	(cur.offset - old.offset)
#define W(offset)	(ccs.offset - ocs.offset)
@


1.1
log
@Initial revision
@
text
@d1 2
d33 1
a33 1
static char rcsid[] = "$Id: pppstats.c,v 1.11 1995/08/17 11:44:53 paulus Exp $";
d44 2
d55 1
d67 1
a67 1
	fprintf(stderr, "Usage: %s [-v|-r|-z] [-c count] [-w wait] [interface]\n",
d101 1
d125 2
a126 3
#define CRATE(x)	((x).unc_bytes == 0? 0.0: \
			 1.0 - ((double)((x).comp_bytes + (x).inc_bytes) \
				/ (x).unc_bytes))
d138 1
a138 1
	sigset_t oldmask, mask;
d161 5
a165 2
				printf("%8.8s %6.6s %6.6s %6.6s %6.6s",
					"IN", "PACK", "VJCOMP", "VJUNC", "VJERR");
d170 5
a174 2
				printf("  | %8.8s %6.6s %6.6s %6.6s %6.6s",
					"OUT", "PACK", "VJCOMP", "VJUNC", "NON-VJ");
d177 1
a177 1
				if(rflag)
d182 1
a182 1
	
d189 1
a189 2
			       ccs.d.ratio == 0? 0.0:
			        1 - 1.0 / ccs.d.ratio * 256.0);
d196 1
a196 2
			       ccs.c.ratio == 0? 0.0:
			        1 - 1.0 / ccs.c.ratio * 256.0);
d200 1
a200 1
			printf("%8u %6u %6u %6u %6u",
d203 5
a207 3
			       V(vj.vjs_compressedin),
			       V(vj.vjs_uncompressedin),
			       V(vj.vjs_errorin));
d217 1
a217 1
				       CRATE(ccs.d),
d219 1
a219 1
			printf("  | %8u %6u %6u %6u %6u",
d222 5
a226 3
			       V(vj.vjs_compressed),
			       V(vj.vjs_packets) - V(vj.vjs_compressed),
			       V(p.ppp_opackets) - V(vj.vjs_packets));
d234 1
a234 1
				       CRATE(ccs.c),
d253 4
a256 2
		old = cur;
		ocs = ccs;
d274 1
a274 1
	while ((c = getopt(argc, argv, "vrzc:w:")) != -1) {
d276 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
