head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.8
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.4
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.2
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.32.0.6
	OPENBSD_5_8_BASE:1.32
	OPENBSD_5_7:1.32.0.2
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.30.0.6
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.30.0.4
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.24.0.14
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.12
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.10
	OPENBSD_5_0:1.24.0.8
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.8
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.4
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.2
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.22.0.18
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.22.0.16
	OPENBSD_4_2_BASE:1.22
	OPENBSD_4_1:1.22.0.14
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.12
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.10
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.8
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.6
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	OPENBSD_3_3:1.19.0.4
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.19.0.2
	OPENBSD_3_2_BASE:1.19
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.16
	OPENBSD_2_8:1.11.0.14
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.12
	OPENBSD_2_7_BASE:1.11
	OPENBSD_2_6:1.11.0.10
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.11.0.8
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.6
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.4
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2015.12.23.19.13.52;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	JQRKC3jNZRkBJyWI;

1.34
date	2015.10.31.18.24.01;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	rYdsRHf0WCQylXp4;

1.33
date	2015.10.29.03.16.15;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	NJoKdjyB5ceShsRQ;

1.32
date	2015.02.09.23.00.14;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	822YD61EeG0Xl9Na;

1.31
date	2015.01.16.06.40.20;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	Uu5nFG3wCl0LACBb;

1.30
date	2013.11.12.22.27.13;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2013.08.16.19.47.43;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2013.04.20.20.39.14;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2013.04.20.00.13.01;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2013.04.19.19.14.46;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2013.04.19.16.38.47;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.09.19.41.56;	author sobrado;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.18.20.10.53;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.16.21.25.41;	author jakob;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.26.19.47.10;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2002.09.08.12.33.42;	author jakob;	state Exp;
branches;
next	1.18;

1.18
date	2002.08.10.21.37.28;	author jakob;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.27.20.11.34;	author jakob;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.27.09.29.50;	author jakob;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.16.11.00.53;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.16.10.46.34;	author jakob;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.15.19.39.09;	author stevesk;	state Exp;
branches;
next	1.11;

1.11
date	97.07.25.20.12.18;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.04.27.13.11.38;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.04.04.08.59.41;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.02.06.15.00.27;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	97.01.21.19.29.08;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	97.01.21.17.44.05;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.12.10.15.07.08;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.23.41.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.25.15.56.10;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.22.00.17.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.04;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.04;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.35
log
@expand message between processes to 2048 bytes.  Andre Smagin found
a case where it can reach 637 bytes of output, so use almost 4x
(he suggested 1024)
@
text
@/*	$OpenBSD: rdate.c,v 1.34 2015/10/31 18:24:01 deraadt Exp $	*/
/*	$NetBSD: rdate.c,v 1.4 1996/03/16 12:37:45 pk Exp $	*/

/*
 * Copyright (c) 1994 Christos Zoulas
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * rdate.c: Set the date from the specified host
 *
 *	Time is returned as the number of seconds since
 *	midnight January 1st 1900.
 */

#include <sys/socket.h>
#include <sys/time.h>
#include <sys/wait.h>

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <err.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

/* there are systems without libutil; for portability */
#ifndef NO_UTIL
#include <util.h>
#else
#define logwtmp(a,b,c)
#endif

void rfc868time_client(const char *, int, struct timeval *, struct timeval *, int);
void ntp_client(const char *, int, struct timeval *, struct timeval *, int);

extern char    *__progname;
__dead void	usage(void);

struct {
	char message[2048];
	struct timeval new;
	struct timeval adjust;
} pdata;

__dead void
usage(void)
{
	(void) fprintf(stderr, "usage: %s [-46acnopsv] host\n", __progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	int             pr = 0, silent = 0, ntp = 1, verbose = 0;
	int		slidetime = 0, corrleaps = 0;
	char           *hname;
	extern int      optind;
	int             c, p[2], pid;
	int		family = PF_UNSPEC;

	while ((c = getopt(argc, argv, "46psanocv")) != -1) {
		switch (c) {
		case '4':
			family = PF_INET;
			break;

		case '6':
			family = PF_INET6;
			break;

		case 'p':
			pr = 1;
			break;

		case 's':
			silent = 1;
			break;

		case 'a':
			slidetime = 1;
			break;

		case 'n':
			ntp = 1;
			break;

		case 'o':
			ntp = 0;
			break;

		case 'c':
			corrleaps = 1;
			break;

		case 'v':
			verbose = 1;
			break;

		default:
			usage();
		}
	}
	if (argc - 1 != optind)
		usage();
	hname = argv[optind];

	/*
	 * Privilege separation increases safety, with a slight reduction
	 * in precision because the time values have to return over a pipe.
	 */
	if (pipe(p) == -1)
		err(1, "pipe");
	switch ((pid = fork())) {
	case -1:
		err(1, "fork");
		break;
	case 0:
		if (pledge("stdio inet dns", NULL) == -1)
			err(1, "pledge");

		close(p[0]);	/* read side of pipe */
		dup2(p[1], STDIN_FILENO);
		if (p[1] != STDIN_FILENO)
			close(p[1]);
		dup2(STDIN_FILENO, STDOUT_FILENO);
		dup2(STDOUT_FILENO, STDERR_FILENO);
		setvbuf(stdout, NULL, _IOFBF, 0);
		setvbuf(stderr, NULL, _IOFBF, 0);

		if (ntp)
			ntp_client(hname, family, &pdata.new,
			    &pdata.adjust, corrleaps);
		else
			rfc868time_client(hname, family, &pdata.new,
			    &pdata.adjust, corrleaps);

		if (write(STDOUT_FILENO, &pdata, sizeof pdata) != sizeof pdata)
			exit(1);
		exit(0);
	}

	if (pledge("stdio rpath wpath settime", NULL) == -1)
		err(1, "pledge");

	close(p[1]);	/* write side of pipe */
	if (read(p[0], &pdata, sizeof pdata) < 1)
		err(1, "child did not collect time");
	if (waitpid(pid, NULL, 0) == -1)
		err(1, "waitpid");

	/*
	 * A viable timestamp from the child contains no message.
	 */
	if (pdata.message[0]) {
		pdata.message[sizeof(pdata.message)- 1] = '\0';
		write(STDERR_FILENO, pdata.message, strlen(pdata.message));
		exit(1);
	}

	if (!pr) {
		if (!slidetime) {
			logwtmp("|", "date", "");
			if (settimeofday(&pdata.new, NULL) == -1)
				err(1, "Could not set time of day");
			logwtmp("{", "date", "");
		} else {
			if (adjtime(&pdata.adjust, NULL) == -1)
				err(1, "Could not adjust time of day");
		}
	}

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");

	if (!silent) {
		struct tm      *ltm;
		char		buf[80];
		time_t		tim = pdata.new.tv_sec;
		double		adjsec;

		ltm = localtime(&tim);
		(void) strftime(buf, sizeof buf, "%a %b %e %H:%M:%S %Z %Y\n", ltm);
		(void) fputs(buf, stdout);

		adjsec  = pdata.adjust.tv_sec + pdata.adjust.tv_usec / 1.0e6;

		if (slidetime || verbose) {
			if (ntp)
				(void) fprintf(stdout,
				   "%s: adjust local clock by %.6f seconds\n",
				   __progname, adjsec);
			else
				(void) fprintf(stdout,
				   "%s: adjust local clock by %lld seconds\n",
				   __progname, (long long)pdata.adjust.tv_sec);
		}
	}

	return 0;
}
@


1.34
log
@repair error message; spotted by Marcus Merighi
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.33 2015/10/29 03:16:15 deraadt Exp $	*/
d67 1
a67 1
	char message[256];
@


1.33
log
@rdate is a classic "run as root, talk to internet for a while doing
crazy packet parsing, then do something requiring privilege at the
end" program.  Simplistic pledge would be "stdio rpath wpath inet dns
settime", which is not very useful.  Imagine if it was exploited?  It
could still change your time backwards or write to your passwd file -
game over.  However the pledge "categorization" is educational, and
quickly leads to a priv-sep solution of sorts.

Create a pipe and fork.  child pledges "stdio inet dns", and talks the
time protocols, then writes error message + timeinfo to the pipe.
parent pledges "stdio rpath wpath settime" and reads error
message/timeinfo from pipe.  If error message, spit it out.  Otherwise
handle the time, then pledge "stdio rpath", and finally report how the
time was adjusted.

A bit more complicated.  Now observe that the pledges help test if
it is right...

(Now that privsep processing is in place, the child could be modified
to chroot + change to a different uid... problem is: which uid..)
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.32 2015/02/09 23:00:14 deraadt Exp $	*/
d147 1
a147 1
			err(1, "fork");
@


1.32
log
@clean up flags++ instances around getopt()
ok florian
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.31 2015/01/16 06:40:20 deraadt Exp $	*/
d43 1
d66 6
d86 1
a86 1
	int             c;
a88 2
	struct timeval new, adjust;

d135 52
a186 4
	if (ntp)
		ntp_client(hname, family, &new, &adjust, corrleaps);
	else
		rfc868time_client(hname, family, &new, &adjust, corrleaps);
d191 1
a191 1
			if (settimeofday(&new, NULL) == -1)
d195 1
a195 1
			if (adjtime(&adjust, NULL) == -1)
d200 3
d206 1
a206 1
		time_t		tim = new.tv_sec;
d213 1
a213 1
		adjsec  = adjust.tv_sec + adjust.tv_usec / 1.0e6;
d223 1
a223 1
				   __progname, (long long)adjust.tv_sec);
@


1.31
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.30 2013/11/12 22:27:13 deraadt Exp $	*/
d95 1
a95 1
			pr++;
d99 1
a99 1
			silent++;
d103 1
a103 1
			slidetime++;
d107 1
a107 1
			ntp++;
d119 1
a119 1
			verbose++;
@


1.30
log
@ensure there are prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.29 2013/08/16 19:47:43 guenther Exp $	*/
a40 1
#include <sys/param.h>
@


1.29
log
@Use %lld and cast to (long long) when printing time_t values

otto@@ millert@@ lteo@@ mikeb@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.28 2013/04/20 20:39:14 millert Exp $	*/
d60 2
a61 2
void rfc868time_client (const char *, int, struct timeval *, struct timeval *, int);
void ntp_client (const char *, int, struct timeval *, struct timeval *, int);
d64 1
@


1.28
log
@Remove extra info from usage message; that's what the manual is for.
OK jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.27 2013/04/20 00:13:01 millert Exp $	*/
d166 2
a167 2
				   "%s: adjust local clock by %ld seconds\n",
				   __progname, adjust.tv_sec);
@


1.27
log
@Add -o option to getopt string and usage.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.26 2013/04/19 19:14:46 millert Exp $	*/
d46 1
d65 1
a65 1
void
d69 1
a69 9
	(void) fprintf(stderr,
	    "  -4: use IPv4 only\n"
	    "  -6: use IPv6 only\n"
	    "  -a: use adjtime instead of instant change\n"
	    "  -c: correct leap second count\n"
	    "  -o: use RFC868 time protocol instead of SNTP\n"
	    "  -p: just print, don't set\n"
	    "  -s: just set, don't print\n"
	    "  -v: verbose output\n");
d84 1
a84 1
	while ((c = getopt(argc, argv, "46psanocv")) != -1)
a123 1
			return 1;
d125 2
a126 2

	if (argc - 1 != optind) {
a127 2
		return 1;
	}
@


1.26
log
@Make -n the default and add -o flag for the old RFC 868 time protocol
(which uses a 32-bit value for its wire protocol).  OK deraadt@@ ian@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.25 2013/04/19 16:38:47 deraadt Exp $	*/
d67 1
a67 1
	(void) fprintf(stderr, "usage: %s [-46acnpsv] host\n", __progname);
d73 1
a73 1
	    "  -n: use SNTP instead of RFC868 time protocol\n"
d91 1
a91 1
	while ((c = getopt(argc, argv, "46psancv")) != -1)
@


1.25
log
@comment incorrect; rdate has -n support now too
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.24 2009/10/27 23:59:54 deraadt Exp $	*/
d82 1
a82 1
	int             pr = 0, silent = 0, ntp = 0, verbose = 0;
d115 4
@


1.24
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.23 2008/07/09 19:41:56 sobrado Exp $	*/
a36 1
 *	Uses the rfc868 time protocol at socket 37.
@


1.23
log
@documentation tweaks.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.22 2004/02/18 20:10:53 jmc Exp $	*/
a40 7
#ifndef lint
#if 0
from: static char rcsid[] = "$NetBSD: rdate.c,v 1.3 1996/02/22 06:59:18 thorpej Exp $";
#else
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.22 2004/02/18 20:10:53 jmc Exp $";
#endif
#endif				/* lint */
@


1.22
log
@sort options and SYNOPSIS;
sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.21 2004/02/16 21:25:41 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.21 2004/02/16 21:25:41 jakob Exp $";
d75 10
a84 9
	(void) fprintf(stderr, "Usage: %s [-46acnpsv] host\n", __progname);
	(void) fprintf(stderr, "  -4: use IPv4 only\n");
	(void) fprintf(stderr, "  -6: use IPv6 only\n");
	(void) fprintf(stderr, "  -a: use adjtime instead of instant change\n");
	(void) fprintf(stderr, "  -c: correct leap second count\n");
	(void) fprintf(stderr, "  -n: use SNTP instead of RFC868 time protocol\n");
	(void) fprintf(stderr, "  -p: just print, don't set\n");
	(void) fprintf(stderr, "  -s: just set, don't print\n");
	(void) fprintf(stderr, "  -v: verbose output\n");
@


1.21
log
@add IPv4/IPv6 transport selection. ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.20 2003/06/26 19:47:10 deraadt Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.20 2003/06/26 19:47:10 deraadt Exp $";
d75 5
a79 1
	(void) fprintf(stderr, "Usage: %s [-ncpsa] host\n", __progname);
a80 1
	(void) fprintf(stderr, "  -c: correct leap second count\n");
a82 1
	(void) fprintf(stderr, "  -a: use adjtime instead of instant change\n");
a83 2
	(void) fprintf(stderr, "  -4: use IPv4 only\n");
	(void) fprintf(stderr, "  -6: use IPv6 only\n");
@


1.20
log
@strict proto cleanups
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.19 2002/09/08 12:33:42 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.19 2002/09/08 12:33:42 jakob Exp $";
d50 1
d67 2
a68 2
void rfc868time_client (const char *, struct timeval *, struct timeval *, int);
void ntp_client (const char *, struct timeval *, struct timeval *, int);
d82 2
d94 1
d98 1
a98 1
	while ((c = getopt(argc, argv, "psancv")) != -1)
d100 8
d144 1
a144 1
		ntp_client(hname, &new, &adjust, corrleaps);
d146 1
a146 1
		rfc868time_client(hname, &new, &adjust, corrleaps);
@


1.19
log
@add leap second support for rfc868, from thorsten glaser
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.18 2002/08/10 21:37:28 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.18 2002/08/10 21:37:28 jakob Exp $";
d72 1
a72 1
usage()
@


1.18
log
@style; from thorsten
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.17 2002/07/27 20:11:34 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.17 2002/07/27 20:11:34 jakob Exp $";
d66 2
a67 2
void rfc868time_client (const char *, struct timeval *, struct timeval *);
void ntp_client (const char *, struct timeval *, struct timeval *);
a69 1
extern int	corrleaps;
d74 1
a74 1
	(void) fprintf(stderr, "Usage: %s [-npsa] host\n", __progname);
d76 1
a76 1
	(void) fprintf(stderr, "  -N: use SNTP and correct leap seconds\n");
d87 1
a87 1
	int		slidetime = 0;
d94 1
a94 1
	while ((c = getopt(argc, argv, "psanNv")) != -1)
a109 1
			corrleaps = 0;
d112 1
a112 2
		case 'N':
			ntp++;
d132 1
a132 1
		ntp_client(hname, &new, &adjust);
d134 1
a134 1
		rfc868time_client(hname, &new, &adjust);
@


1.17
log
@move leap seconds correction to -N option for now
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.16 2002/07/27 09:29:50 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.16 2002/07/27 09:29:50 jakob Exp $";
a48 1
#include <sys/types.h>
d50 2
a55 1
#include <sys/time.h>
d57 4
d62 3
a64 1
#include <time.h>
@


1.16
log
@add verbose output option
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.15 2002/05/16 11:00:53 deraadt Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.15 2002/05/16 11:00:53 deraadt Exp $";
d64 1
d71 1
d89 1
a89 1
	while ((c = getopt(argc, argv, "psanv")) != -1)
d105 6
@


1.15
log
@bit more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.14 2002/05/16 10:46:34 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.14 2002/05/16 10:46:34 jakob Exp $";
d73 1
d79 1
a79 1
	int             pr = 0, silent = 0, ntp = 0;
d87 1
a87 1
	while ((c = getopt(argc, argv, "psan")) != -1)
d105 4
d149 1
a149 1
		if (slidetime) {
@


1.14
log
@add support for SNTP & split out RFC868 time support. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.1 2002/05/15 08:26:30 jakob Exp $	*/
d36 2
a37 2
 * 
 * 	Uses the rfc868 time protocol at socket 37.
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rdate.c,v 1.1 2002/05/15 08:26:30 jakob Exp $";
a62 1

a141 1

d146 1
a146 1
				(void) fprintf(stdout, 
d150 1
a150 1
				(void) fprintf(stdout, 
@


1.13
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.12 2001/08/15 19:39:09 stevesk Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.12 2001/08/15 19:39:09 stevesk Exp $";
a55 3
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
d60 3
a62 2
/* seconds from midnight Jan 1900 - 1970 */
#define DIFFERENCE 2208988800UL
d66 1
a66 1
static void
d69 2
a70 1
	(void) fprintf(stderr, "Usage: %s [-psa] host\n", __progname);
d77 1
a77 3
main(argc, argv)
	int             argc;
	char           *argv[];
d79 1
a79 1
	int             pr = 0, silent = 0, s;
a80 2
	int		adjustment;
	time_t          tim;
a81 4
	struct hostent *hp;
	struct protoent *pp, ppp;
	struct servent *sp, ssp;
	struct sockaddr_in sa;
d85 3
a87 1
	while ((c = getopt(argc, argv, "psa")) != -1)
d101 4
d116 4
a119 38
	if ((hp = gethostbyname(hname)) == NULL) {
		warnx("%s: %s", hname, hstrerror(h_errno));
		return 1;
	}

	if ((sp = getservbyname("time", "tcp")) == NULL) {
		sp = &ssp;
		sp->s_port = 37;
		sp->s_proto = "tcp";
	}
	if ((pp = getprotobyname(sp->s_proto)) == NULL) {
		pp = &ppp;
		pp->p_proto = 6;
	}
	if ((s = socket(AF_INET, SOCK_STREAM, pp->p_proto)) == -1)
		err(1, "Could not create socket");

	bzero(&sa, sizeof sa);
	sa.sin_family = AF_INET;
	sa.sin_port = sp->s_port;

	(void) memcpy(&(sa.sin_addr.s_addr), hp->h_addr, hp->h_length);

	if (connect(s, (struct sockaddr *) & sa, sizeof(sa)) == -1)
		err(1, "Could not connect socket");

	if (read(s, &tim, sizeof(time_t)) != sizeof(time_t))
		err(1, "Could not read data");

	(void) close(s);
	tim = ntohl(tim) - DIFFERENCE;

	if (slidetime) {
		struct timeval tv_current;
		if (gettimeofday(&tv_current, NULL) == -1)
			err(1, "Could not get local time of day");
		adjustment = tim - tv_current.tv_sec;
	}
a121 1
		struct timeval  tv;
d124 1
a124 3
			tv.tv_sec = tim;
			tv.tv_usec = 0;
			if (settimeofday(&tv, NULL) == -1)
d128 1
a128 3
			tv.tv_sec = adjustment;
			tv.tv_usec = 0;
			if (adjtime(&tv, NULL) == -1)
d136 2
d143 13
a155 4
		if (slidetime)
			(void) fprintf(stdout, 
			   "%s: adjust local clock by %d seconds\n",
			   __progname, adjustment);
d157 1
@


1.12
log
@fix -pa to display properly initialized adjustment; ok beck@@ pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.11 1997/07/25 20:12:18 mickey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.11 1997/07/25 20:12:18 mickey Exp $";
a63 1
#ifdef __STDC__
a64 3
#else
#define DIFFERENCE 2208988800
#endif
@


1.11
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.10 1997/04/27 13:11:38 downsj Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.10 1997/04/27 13:11:38 downsj Exp $";
d155 7
d172 1
a172 4
			struct timeval tv_current;
			if (gettimeofday(&tv_current, NULL) == -1)
				err(1, "Could not get local time of day");
			adjustment = tv.tv_sec = tim - tv_current.tv_sec;
d184 1
a184 1
		(void) strftime(buf, 80, "%a %b %e %H:%M:%S %Z %Y\n", ltm);
@


1.10
log
@More includes for library prototypes.
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.9 1997/04/04 08:59:41 deraadt Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.9 1997/04/04 08:59:41 deraadt Exp $";
d64 1
a64 1
#if __STDC__
@


1.9
log
@wtmp repairs; netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.8 1997/02/06 15:00:27 kstailey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.8 1997/02/06 15:00:27 kstailey Exp $";
d53 1
d59 1
@


1.8
log
@corrected to look even more like date(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.7 1997/01/21 19:29:08 kstailey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.7 1997/01/21 19:29:08 kstailey Exp $";
d58 1
d154 17
a170 15
	    struct timeval  tv;
	    if (!slidetime) {
		    tv.tv_sec = tim;
		    tv.tv_usec = 0;
		    if (settimeofday(&tv, NULL) == -1)
			    err(1, "Could not set time of day");
	    } else {
		    struct timeval tv_current;
		    if (gettimeofday(&tv_current, NULL) == -1)
			    err(1, "Could not get local time of day");
		    adjustment = tv.tv_sec = tim - tv_current.tv_sec;
		    tv.tv_usec = 0;
		    if (adjtime(&tv, NULL) == -1)
			    err(1, "Could not adjust time of day");
	    }
d182 3
a184 3
		    (void) fprintf(stdout, 
				   "%s: adjust local clock by %d seconds\n",
				   __progname, adjustment);
@


1.7
log
@make lint happier
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.6 1997/01/21 17:44:05 kstailey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.6 1997/01/21 17:44:05 kstailey Exp $";
d175 1
a175 1
		(void) strftime(buf, 80, "%a %b %d %H:%M:%S %Z %Y\n", ltm);
@


1.6
log
@make output look like that of date(1)
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.5 1996/12/10 15:07:08 deraadt Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.5 1996/12/10 15:07:08 deraadt Exp $";
d141 1
a141 1
	memcpy(&(sa.sin_addr.s_addr), hp->h_addr, hp->h_length);
d175 1
a175 1
		strftime(buf, 80, "%a %b %d %H:%M:%S %Z %Y\n", ltm);
@


1.5
log
@warnx
@
text
@d1 1
a1 1
/*	$OpenBSD: rdate.c,v 1.3 1996/03/25 15:56:10 niklas Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rdate.c,v 1.3 1996/03/25 15:56:10 niklas Exp $";
d58 1
d171 7
a177 1
		(void) fputs(ctime(&tim), stdout);
@


1.4
log
@sync to netbsd 960418
@
text
@d120 1
a120 2
		(void) fprintf(stderr, "%s: ", __progname);
		herror(hname);
@


1.3
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: rdate.c,v 1.3 1996/02/22 06:59:18 thorpej Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
d175 1
a175 1
				   adjustment);
@


1.2
log
@From NetBSD:
fix pr/1226 from David Gluss: allow rdate to use adjtime(2)
@
text
@d1 3
a31 2
 *
 *	$Id: rdate.c,v 1.1.1.1 1995/10/18 08:48:04 deraadt Exp $
d42 5
a46 1
static char rcsid[] = "$Id: rdate.c,v 1.1.1.1 1995/10/18 08:48:04 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
 *	$Id: rdate.c,v 1.1 1994/06/02 22:55:07 deraadt Exp $
d41 1
a41 1
static char rcsid[] = "$Id: rdate.c,v 1.1 1994/06/02 22:55:07 deraadt Exp $";
d61 11
d78 2
a85 1
	extern char    *__progname;
d89 1
a89 1
	while ((c = getopt(argc, argv, "ps")) != -1)
d99 4
d104 2
a105 1
			goto usage;
d109 2
a110 3
usage:
		(void) fprintf(stderr, "Usage: %s [-ps] host\n", __progname);
		return (1);
d115 1
a115 1
		fprintf(stderr, "%s: ", __progname);
d117 1
a117 1
		exit(1);
d148 15
a162 5
		struct timeval  tv;
		tv.tv_sec = tim;
		tv.tv_usec = 0;
		if (settimeofday(&tv, NULL) == -1)
			err(1, "Could not set time of day");
d164 2
a165 1
	if (!silent)
d167 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
