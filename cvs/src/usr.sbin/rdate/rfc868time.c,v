head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.10
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5;
locks; strict;
comment	@ * @;


1.10
date	2015.01.16.06.40.20;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	Uu5nFG3wCl0LACBb;

1.9
date	2013.11.12.22.27.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.20.17.55.46;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.27.23.59.54;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.16.21.25.41;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.08.12.33.42;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.10.21.37.28;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.16.21.05.24;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.16.11.00.53;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.16.10.46.34;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$OpenBSD: rfc868time.c,v 1.9 2013/11/12 22:27:13 deraadt Exp $	*/
/*	$NetBSD: rdate.c,v 1.4 1996/03/16 12:37:45 pk Exp $	*/

/*
 * Copyright (c) 1994 Christos Zoulas
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * rdate.c: Set the date from the specified host
 *
 *	Uses the rfc868 time protocol at socket 37 (tcp).
 *	Time is returned as the number of seconds since
 *	midnight January 1st 1900.
 */

#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>

#include <stdio.h>
#include <ctype.h>
#include <err.h>
#include <string.h>
#include <netdb.h>
#include <unistd.h>
#include <time.h>

/* Obviously it is not just for SNTP clients... */
#include "ntpleaps.h"

/* seconds from midnight Jan 1900 - 1970 */
#define DIFFERENCE 2208988800UL

void
rfc868time_client(const char *hostname, int family, struct timeval *new,
    struct timeval *adjust, int leapflag);


void
rfc868time_client(const char *hostname, int family, struct timeval *new,
    struct timeval *adjust, int leapflag)
{
	struct addrinfo hints, *res0, *res;
	struct timeval old;
	u_int32_t tim;	/* RFC 868 states clearly this is an uint32 */
	int s;
	int error;
	u_int64_t td;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = family;
	hints.ai_socktype = SOCK_STREAM;
	error = getaddrinfo(hostname, "time", &hints, &res0);
	if (error) {
		errx(1, "%s: %s", hostname, gai_strerror(error));
		/*NOTREACHED*/
	}

	s = -1;
	for (res = res0; res; res = res->ai_next) {
		s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
		if (s < 0)
			continue;

		if (connect(s, res->ai_addr, res->ai_addrlen) < 0) {
			close(s);
			s = -1;
			continue;
		}

		break;
	}
	if (s < 0)
		err(1, "Could not connect socket");
	freeaddrinfo(res0);

	if (read(s, &tim, sizeof(tim)) != sizeof(tim))
		err(1, "Could not read data");

	(void) close(s);
	tim = ntohl(tim) - DIFFERENCE;

	if (gettimeofday(&old, NULL) == -1)
		err(1, "Could not get local time of day");

	td = SEC_TO_TAI64(old.tv_sec);
	if (leapflag)
		ntpleaps_sub(&td);

	adjust->tv_sec = tim - TAI64_TO_SEC(td);
	adjust->tv_usec = 0;

	new->tv_sec = old.tv_sec + adjust->tv_sec;
	new->tv_usec = 0;
}
@


1.9
log
@ensure there are prototypes
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.8 2013/04/20 17:55:46 deraadt Exp $	*/
a41 1
#include <sys/param.h>
@


1.8
log
@remove irrelevant comment
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.7 2009/10/27 23:59:54 deraadt Exp $	*/
d61 4
d67 1
a67 1
rfc868time_client (const char *hostname, int family, struct timeval *new,
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.6 2004/02/16 21:25:41 jakob Exp $	*/
a75 2
	/* XXX what about rfc868 UDP
	 * probably not due to the Y2038 issue  -mirabile */
@


1.6
log
@add IPv4/IPv6 transport selection. ok millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.5 2002/09/08 12:33:42 jakob Exp $	*/
a40 8

#ifndef lint
#if 0
from: static char rcsid[] = "$NetBSD: rdate.c,v 1.3 1996/02/22 06:59:18 thorpej Exp $";
#else
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.5 2002/09/08 12:33:42 jakob Exp $";
#endif
#endif				/* lint */
@


1.5
log
@add leap second support for rfc868, from thorsten glaser
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.4 2002/08/10 21:37:28 jakob Exp $	*/
d46 1
a46 1
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.4 2002/08/10 21:37:28 jakob Exp $";
d71 1
a71 1
rfc868time_client (const char *hostname, struct timeval *new,
d82 1
a82 1
	hints.ai_family = PF_UNSPEC;
@


1.4
log
@style; from thorsten
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.3 2002/05/16 21:05:24 jakob Exp $	*/
d37 1
a37 1
 *	Uses the rfc868 time protocol at socket 37.
d41 1
d46 1
a46 1
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.3 2002/05/16 21:05:24 jakob Exp $";
d63 3
d71 2
a72 2
rfc868time_client (const char *hostname,
	     struct timeval *new, struct timeval *adjust)
d76 1
a76 1
	time_t tim;
d79 1
d84 2
d110 1
a110 1
	if (read(s, &tim, sizeof(time_t)) != sizeof(time_t))
d119 5
a123 1
	adjust->tv_sec = tim - old.tv_sec;
d126 1
a126 1
	new->tv_sec = tim;
@


1.3
log
@IPv6 support; itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.2 2002/05/16 11:00:53 deraadt Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.2 2002/05/16 11:00:53 deraadt Exp $";
a48 1
#include <sys/types.h>
d50 4
a57 2
#include <sys/time.h>
#include <sys/socket.h>
a58 1
#include <netinet/in.h>
a59 1
#include <util.h>
@


1.2
log
@bit more KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.1 2002/05/16 10:46:34 jakob Exp $	*/
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.1 2002/05/16 10:46:34 jakob Exp $";
d71 1
a71 4
	struct protoent *pp, ppp;
	struct servent *sp, ssp;
	struct sockaddr_in sin;
	struct hostent *hp;
d75 1
d77 7
a83 11
	if ((hp = gethostbyname(hostname)) == NULL)
		errx(1, "%s: %s", hostname, hstrerror(h_errno));

	if ((sp = getservbyname("time", "tcp")) == NULL) {
		sp = &ssp;
		sp->s_port = 37;
		sp->s_proto = "tcp";
	}
	if ((pp = getprotobyname(sp->s_proto)) == NULL) {
		pp = &ppp;
		pp->p_proto = 6;
a84 2
	if ((s = socket(AF_INET, SOCK_STREAM, pp->p_proto)) == -1)
		err(1, "Could not create socket");
d86 11
a96 3
	bzero(&sin, sizeof sin);
	sin.sin_family = AF_INET;
	sin.sin_port = sp->s_port;
d98 3
a100 3
	(void) memcpy(&(sin.sin_addr.s_addr), hp->h_addr, hp->h_length);

	if (connect(s, (struct sockaddr *) &sin, sizeof(sin)) == -1)
d102 1
@


1.1
log
@add support for SNTP & split out RFC868 time support. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rfc868time.c,v 1.3 2002/05/16 10:34:01 jakob Exp $	*/
d36 2
a37 2
 * 
 * 	Uses the rfc868 time protocol at socket 37.
d45 1
a45 1
static const char rcsid[] = "$OpenBSD: rfc868time.c,v 1.3 2002/05/16 10:34:01 jakob Exp $";
d71 1
a71 1
	struct hostent *hp;
a72 1
	struct protoent *pp, ppp;
d74 1
a74 2

	int s;
d77 1
@

