head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.6
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.19
date	2016.12.02.14.39.46;	author rzalamena;	state Exp;
branches;
next	1.18;
commitid	AN66AOZvr15Na6D1;

1.18
date	2016.11.22.22.05.20;	author rzalamena;	state Exp;
branches;
next	1.17;
commitid	t2EBiSTjw2AlT0I3;

1.17
date	2016.11.22.17.21.56;	author rzalamena;	state Exp;
branches;
next	1.16;
commitid	xzEfzrsva4b1hxML;

1.16
date	2016.11.21.18.19.51;	author rzalamena;	state Exp;
branches;
next	1.15;
commitid	hYDrm1UyySJ5OVmv;

1.15
date	2016.11.18.20.20.19;	author reyk;	state Exp;
branches;
next	1.14;
commitid	npvylFamnPEfUHT4;

1.14
date	2016.11.17.16.24.00;	author rzalamena;	state Exp;
branches;
next	1.13;
commitid	H4LgvqdFtRDB6P0B;

1.13
date	2016.11.11.22.07.40;	author reyk;	state Exp;
branches;
next	1.12;
commitid	F2V65sN0Dga2Ank6;

1.12
date	2016.10.05.15.42.28;	author reyk;	state Exp;
branches;
next	1.11;
commitid	Nr0Ym6BtwmYNbBer;

1.11
date	2016.09.30.12.48.27;	author reyk;	state Exp;
branches;
next	1.10;
commitid	xHMNHfWpPneWqH4E;

1.10
date	2016.09.30.11.57.57;	author reyk;	state Exp;
branches;
next	1.9;
commitid	Bk6N1Zmhuj3ewIdN;

1.9
date	2016.09.29.18.25.54;	author reyk;	state Exp;
branches;
next	1.8;
commitid	NV4vuVCpPottgEyF;

1.8
date	2016.09.27.22.27.38;	author reyk;	state Exp;
branches;
next	1.7;
commitid	aS0O4iLbcjM4W2Z6;

1.7
date	2016.09.27.19.40.43;	author reyk;	state Exp;
branches;
next	1.6;
commitid	FQ6PSxNkWkLhFFxX;

1.6
date	2016.07.21.08.40.14;	author reyk;	state Exp;
branches;
next	1.5;
commitid	7E1KQxzRMPQU8a8V;

1.5
date	2016.07.21.08.39.23;	author reyk;	state Exp;
branches;
next	1.4;
commitid	0hqYlr7r5dsUiBK1;

1.4
date	2016.07.21.07.58.44;	author reyk;	state Exp;
branches;
next	1.3;
commitid	hvjhEQsdPbzSKWjJ;

1.3
date	2016.07.20.14.15.08;	author reyk;	state Exp;
branches;
next	1.2;
commitid	r8lT9ieuUAvheQ28;

1.2
date	2016.07.19.18.11.08;	author reyk;	state Exp;
branches;
next	1.1;
commitid	6hIGkfWtS6dnpc9W;

1.1
date	2016.07.19.16.54.26;	author reyk;	state Exp;
branches;
next	;
commitid	NvD0Bp0qm4zs28YJ;


desc
@@


1.19
log
@Implement the connection state machine for OpenFlow 1.0 and 1.3 to detect
invalid state transitions and invalid protocol version switching after the
hello messages exchange.

ok reyk@@
@
text
@/*	$OpenBSD: ofp10.c,v 1.18 2016/11/22 22:05:20 rzalamena Exp $	*/

/*
 * Copyright (c) 2013-2016 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_arp.h>
#include <net/ofp.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <imsg.h>
#include <event.h>

#include "ofp10.h"
#include "switchd.h"
#include "ofp_map.h"


int	 ofp10_packet_match(struct packet *, struct ofp10_match *, unsigned int);

int	 ofp10_features_reply(struct switchd *, struct switch_connection *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_validate_features_reply(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_echo_request(struct switchd *, struct switch_connection *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_validate_error(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_error(struct switchd *, struct switch_connection *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_validate_packet_in(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_packet_in(struct switchd *, struct switch_connection *,
	    struct ofp_header *, struct ibuf *);
int	 ofp10_validate_packet_out(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
	    struct ofp_header *, struct ibuf *);

struct ofp_callback ofp10_callbacks[] = {
	{ OFP10_T_HELLO,		ofp10_hello, ofp_validate_hello },
	{ OFP10_T_ERROR,		NULL, ofp10_validate_error },
	{ OFP10_T_ECHO_REQUEST,		ofp10_echo_request, NULL },
	{ OFP10_T_ECHO_REPLY,		NULL, NULL },
	{ OFP10_T_EXPERIMENTER,		NULL, NULL },
	{ OFP10_T_FEATURES_REQUEST,	NULL, NULL },
	{ OFP10_T_FEATURES_REPLY,	ofp10_features_reply,
					ofp10_validate_features_reply },
	{ OFP10_T_GET_CONFIG_REQUEST,	NULL, NULL },
	{ OFP10_T_GET_CONFIG_REPLY,	NULL, NULL },
	{ OFP10_T_SET_CONFIG,		NULL, NULL },
	{ OFP10_T_PACKET_IN,		ofp10_packet_in, ofp10_validate_packet_in },
	{ OFP10_T_FLOW_REMOVED,		NULL, NULL },
	{ OFP10_T_PORT_STATUS,		NULL, NULL },
	{ OFP10_T_PACKET_OUT,		NULL, ofp10_validate_packet_out },
	{ OFP10_T_FLOW_MOD,		NULL, NULL },
	{ OFP10_T_PORT_MOD,		NULL, NULL },
	{ OFP10_T_STATS_REQUEST,	NULL, NULL },
	{ OFP10_T_STATS_REPLY,		NULL, NULL },
	{ OFP10_T_BARRIER_REQUEST,	NULL, NULL },
	{ OFP10_T_BARRIER_REPLY,	NULL, NULL },
	{ OFP10_T_QUEUE_GET_CONFIG_REQUEST, NULL, NULL },
	{ OFP10_T_QUEUE_GET_CONFIG_REPLY, NULL, NULL }
};

int
ofp10_validate(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	uint8_t	type;

	if (ofp_validate_header(sc, src, dst, oh, OFP_V_1_0) != 0) {
		log_debug("\tinvalid header");
		return (-1);
	}
	if (ibuf == NULL) {
		/* The response packet buffer is optional */
		return (0);
	}
	type = oh->oh_type;
	if (ofp10_callbacks[type].validate != NULL &&
	    ofp10_callbacks[type].validate(sc, src, dst, oh, ibuf) != 0) {
		log_debug("\tinvalid packet");
		return (-1);
	}
	return (0);
}

int
ofp10_validate_packet_in(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	struct ofp10_packet_in	*pin;
	uint8_t			*p;
	size_t			 len, plen;
	off_t			 off;

	off = 0;
	if ((pin = ibuf_seek(ibuf, off, sizeof(*pin))) == NULL)
		return (-1);
	log_debug("\tbuffer %d port %s "
	    "length %u reason %u",
	    ntohl(pin->pin_buffer_id),
	    print_map(ntohs(pin->pin_port), ofp10_port_map),
	    ntohs(pin->pin_total_len),
	    pin->pin_reason);
	off += sizeof(*pin);

	len = ntohs(pin->pin_total_len);
	plen = ibuf_length(ibuf) - off;

	if (plen < len) {
		log_debug("\ttruncated packet %zu < %zu", plen, len);

		/* Buffered packets can be truncated */
		if (pin->pin_buffer_id != OFP_PKTOUT_NO_BUFFER)
			len = plen;
		else
			return (-1);
	}
	if ((p = ibuf_seek(ibuf, off, len)) == NULL)
		return (-1);
	if (sc->sc_tap != -1)
		(void)write(sc->sc_tap, p, len);

	return (0);
}

int
ofp10_validate_packet_out(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	struct ofp10_packet_out		*pout;
	size_t				 len;
	off_t				 off;
	struct ofp_action_header	*ah;
	struct ofp10_action_output	*ao;

	off = 0;
	if ((pout = ibuf_seek(ibuf, off, sizeof(*pout))) == NULL) {
		log_debug("%s: seek failed: length %zd",
		    __func__, ibuf_length(ibuf));
		return (-1);
	}
	log_debug("\tbuffer %d port %s "
	    "actions length %u",
	    ntohl(pout->pout_buffer_id),
	    print_map(ntohs(pout->pout_port), ofp10_port_map),
	    ntohs(pout->pout_actions_len));
	len = ntohs(pout->pout_actions_len);

	off += sizeof(*pout);
	while ((ah = ibuf_seek(ibuf, off, len)) != NULL &&
	    ntohs(ah->ah_len) >= (uint16_t)sizeof(*ah)) {
		switch (ntohs(ah->ah_type)) {
		case OFP10_ACTION_OUTPUT:
			ao = (struct ofp10_action_output *)ah;
			log_debug("\t\taction type %s length %d "
			    "port %s max length %d",
			    print_map(ntohs(ao->ao_type), ofp10_action_map),
			    ntohs(ao->ao_len),
			    print_map(ntohs(ao->ao_port), ofp10_port_map),
			    ntohs(ao->ao_max_len));
			break;
		default:
			log_debug("\t\taction type %s length %d",
			    print_map(ntohs(ah->ah_type), ofp10_action_map),
			    ntohs(ah->ah_len));
			break;
		}
		if (pout->pout_buffer_id == (uint32_t)-1)
			break;
		off += ntohs(ah->ah_len);
	}

	return (0);
}

int
ofp10_validate_error(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	struct ofp_error		*err;
	off_t				 off;
	const char			*code;

	off = 0;
	if ((err = ibuf_seek(ibuf, off, sizeof(*err))) == NULL) {
		log_debug("%s: seek failed: length %zd",
		    __func__, ibuf_length(ibuf));
		return (-1);
	}

	switch (ntohs(err->err_type)) {
	case OFP10_ERRTYPE_FLOW_MOD_FAILED:
		code = print_map(ntohs(err->err_code), ofp10_errflowmod_map);
		break;
	default:
		code = NULL;
		break;
	}

	log_debug("\terror type %s code %u%s%s",
	    print_map(ntohs(err->err_type), ofp10_errtype_map),
	    ntohs(err->err_code),
	    code == NULL ? "" : ": ",
	    code == NULL ? "" : code);

	return (0);
}

int
ofp10_input(struct switchd *sc, struct switch_connection *con,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	if (ofp10_validate(sc, &con->con_peer, &con->con_local, oh, ibuf) != 0)
		return (-1);

	if (ofp10_callbacks[oh->oh_type].cb == NULL) {
		log_debug("message not supported: %s",
		    print_map(oh->oh_type, ofp10_t_map));
		return (-1);
	}
	if (ofp10_callbacks[oh->oh_type].cb(sc, con, oh, ibuf) != 0)
		return (-1);

	return (0);
}

int
ofp10_hello(struct switchd *sc, struct switch_connection *con,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	if (switch_add(con) == NULL) {
		log_debug("%s: failed to add switch", __func__);
		return (-1);
	}

	if (ofp_recv_hello(sc, con, oh, ibuf) == -1)
		return (-1);

	return (ofp_nextstate(sc, con, OFP_STATE_FEATURE_WAIT));
}

int
ofp10_features_reply(struct switchd *sc, struct switch_connection *con,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	return (ofp_nextstate(sc, con, OFP_STATE_ESTABLISHED));
}

int
ofp10_validate_features_reply(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	struct ofp_switch_features	*swf;
	struct ofp10_phy_port		*swp;
	off_t				 poff;
	int				 portslen;
	char				*mac;

	if ((swf = ibuf_seek(ibuf, 0, sizeof(*swf))) == NULL)
		return (-1);

	log_debug("\tdatapath_id %#016llx nbuffers %u ntables %d "
	    "capabilities %#08x actions %#08x",
	    be64toh(swf->swf_datapath_id), ntohl(swf->swf_nbuffers),
	    swf->swf_ntables, ntohl(swf->swf_capabilities),
	    ntohl(swf->swf_actions));

	poff = sizeof(*swf);
	portslen = ntohs(oh->oh_length) - sizeof(*swf);
	if (portslen <= 0)
		return (0);

	while (portslen > 0) {
		if ((swp = ibuf_seek(ibuf, poff, sizeof(*swp))) == NULL)
			return (-1);

		mac = ether_ntoa((void *)swp->swp_macaddr);
		log_debug("no %s macaddr %s name %s config %#08x state %#08x "
		    "cur %#08x advertised %#08x supported %#08x peer %#08x",
		    print_map(ntohs(swp->swp_number), ofp10_port_map), mac,
		    swp->swp_name, swp->swp_config, swp->swp_state,
		    swp->swp_cur, swp->swp_advertised, swp->swp_supported,
		    swp->swp_peer);

		portslen -= sizeof(*swp);
		poff += sizeof(*swp);
	}

	return (0);
}

int
ofp10_echo_request(struct switchd *sc, struct switch_connection *con,
    struct ofp_header *oh, struct ibuf *ibuf)
{
	/* Echo reply */
	oh->oh_type = OFP10_T_ECHO_REPLY;
	if (ofp10_validate(sc, &con->con_local, &con->con_peer, oh, NULL) != 0)
		return (-1);
	ofp_output(con, oh, NULL);

	return (0);
}

int
ofp10_packet_match(struct packet *pkt, struct ofp10_match *m, uint32_t flags)
{
	struct ether_header	*eh = pkt->pkt_eh;

	bzero(m, sizeof(*m));
	m->m_wildcards = htonl(~flags);

	if ((flags & (OFP10_WILDCARD_DL_SRC|OFP10_WILDCARD_DL_DST)) &&
	    (eh == NULL))
		return (-1);

	if (flags & OFP10_WILDCARD_DL_SRC)
		memcpy(m->m_dl_src, eh->ether_shost, ETHER_ADDR_LEN);
	if (flags & OFP10_WILDCARD_DL_DST)
		memcpy(m->m_dl_dst, eh->ether_dhost, ETHER_ADDR_LEN);

	return (0);
}

int
ofp10_packet_in(struct switchd *sc, struct switch_connection *con,
    struct ofp_header *ih, struct ibuf *ibuf)
{
	struct ofp10_packet_in		*pin;
	struct ofp10_packet_out		*pout;
	struct ofp10_action_output	*ao;
	struct ofp10_flow_mod		*fm;
	struct ofp_header		*oh;
	struct packet			 pkt;
	struct ibuf			*obuf = NULL;
	int				 ret = -1;
	size_t				 len;
	uint32_t			 srcport, dstport;
	int				 addflow = 0;
	int				 addpacket = 0;

	if ((pin = ibuf_getdata(ibuf, sizeof(*pin))) == NULL)
		return (-1);

	bzero(&pkt, sizeof(pkt));
	len = ntohs(pin->pin_total_len);
	srcport = ntohs(pin->pin_port);

	if (packet_input(sc, con->con_switch,
	    srcport, &dstport, ibuf, len, &pkt) == -1 ||
	    (dstport > OFP10_PORT_MAX &&
	    dstport != OFP10_PORT_LOCAL &&
	    dstport != OFP10_PORT_CONTROLLER)) {
		/* fallback to flooding */
		dstport = OFP10_PORT_FLOOD;
	} else if (srcport == dstport) {
		/*
		 * silently drop looping packet
		 * (don't use OFP10_PORT_INPUT here)
		 */
		dstport = OFP10_PORT_ANY;
	} else {
		addflow = 1;
	}

	if ((obuf = ibuf_static()) == NULL)
		goto done;

 again:
	if (addflow) {
		if ((fm = ibuf_advance(obuf, sizeof(*fm))) == NULL)
			goto done;

		ofp10_packet_match(&pkt, &fm->fm_match, OFP10_WILDCARD_DL_DST);

		oh = &fm->fm_oh;
		fm->fm_cookie = 0; /* XXX should we set a cookie? */
		fm->fm_command = htons(OFP_FLOWCMD_ADD);
		fm->fm_idle_timeout = htons(sc->sc_cache_timeout);
		fm->fm_hard_timeout = 0; /* permanent */
		fm->fm_priority = 0;
		fm->fm_buffer_id = pin->pin_buffer_id;
		fm->fm_flags = htons(OFP_FLOWFLAG_SEND_FLOW_REMOVED);
		if (pin->pin_buffer_id == htonl(OFP_PKTOUT_NO_BUFFER))
			addpacket = 1;
	} else {
		if ((pout = ibuf_advance(obuf, sizeof(*pout))) == NULL)
			goto done;

		oh = &pout->pout_oh;
		pout->pout_buffer_id = pin->pin_buffer_id;
		pout->pout_port = pin->pin_port;
		pout->pout_actions_len = htons(sizeof(*ao));

		if (pin->pin_buffer_id == htonl(OFP_PKTOUT_NO_BUFFER))
			addpacket = 1;
	}

	if ((ao = ibuf_advance(obuf, sizeof(*ao))) == NULL)
		goto done;
	ao->ao_type = htons(OFP_ACTION_OUTPUT);
	ao->ao_len =  htons(sizeof(*ao));
	ao->ao_port = htons((uint16_t)dstport);
	ao->ao_max_len = 0;

	/* Add optional packet payload to packet-out. */
	if (addflow == 0 && addpacket &&
	    imsg_add(obuf, pkt.pkt_buf, pkt.pkt_len) == -1)
		goto done;

	/* Set output header */
	memcpy(oh, ih, sizeof(*oh));
	oh->oh_length = htons(ibuf_length(obuf));
	oh->oh_type = addflow ? OFP10_T_FLOW_MOD : OFP10_T_PACKET_OUT;
	oh->oh_xid = htonl(con->con_xidnxt++);

	if (ofp10_validate(sc, &con->con_local, &con->con_peer, oh, obuf) != 0)
		goto done;

	ofp_output(con, NULL, obuf);

	if (addflow && addpacket) {
		/* loop to output the packet again */
		addflow = 0;
		if ((obuf = ibuf_static()) == NULL)
			goto done;
		goto again;
	}

	ret = 0;
 done:
	ibuf_release(obuf);
	return (ret);
}
@


1.18
log
@Add "features request" support and reply validation.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.17 2016/11/22 17:21:56 rzalamena Exp $	*/
d265 1
a265 2
	if (oh->oh_version == OFP_V_1_0 &&
	    switch_add(con) == NULL) {
d273 1
a273 7
	oh->oh_type = OFP10_T_FEATURES_REQUEST;
	oh->oh_length = htons(sizeof(*oh));
	oh->oh_xid = htonl(con->con_xidnxt++);
	if (ofp10_validate(sc, &con->con_local, &con->con_peer, oh, NULL) != 0)
		return (-1);

	return (ofp_output(con, oh, NULL));
d280 1
a280 2
	/* Nothing yet. */
	return (0);
@


1.17
log
@Implement support for version negotiation using hello messages. This
also prevents connections from switching the version in the middle of
the operation.

tweak from and ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.16 2016/11/21 18:19:51 rzalamena Exp $	*/
d46 5
d74 2
a75 1
	{ OFP10_T_FEATURES_REPLY,	NULL, NULL },
d274 58
a331 11
#if 0
	(void)write(fd, &oh, sizeof(oh));
	ofd_debug(sc, &sname, &con->con_ss, &oh, buf, len);
	oh.oh_xid = htonl(1);
	oh.oh_type = OFP10_T_FEATURES_REQUEST;
	(void)write(fd, &oh, sizeof(oh));
	ofd_debug(sc, &sname, &con->con_ss, &oh, buf, len);
	oh.oh_xid = htonl(2);
	oh.oh_type = OFP10_T_GET_CONFIG_REQUEST;
	(void)write(fd, &oh, sizeof(oh));
#endif
@


1.16
log
@Fix jumbo regress test for ofp10.c and use htonl() with OFP_PKTOUT_NO_BUFFER
for consistency.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.15 2016/11/18 20:20:19 reyk Exp $	*/
d63 1
a63 1
	{ OFP10_T_HELLO,		ofp10_hello, NULL },
d265 1
a265 5
	/* Echo back the received Hello packet */
	oh->oh_version = OFP_V_1_0;
	oh->oh_length = htons(sizeof(*oh));
	oh->oh_xid = htonl(con->con_xidnxt++);
	if (ofp10_validate(sc, &con->con_local, &con->con_peer, oh, NULL) != 0)
a266 1
	ofp_output(con, oh, NULL);
@


1.15
log
@The special LOCAL and CONTROLLER ports are valid source ports that
should be learned by the cache.	 Fixes "addlocal" ports on switch(4).

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.14 2016/11/17 16:24:00 rzalamena Exp $	*/
d379 1
a379 1
		if (pin->pin_buffer_id == (uint32_t)-1)
d390 1
a390 1
		if (pin->pin_buffer_id == (uint32_t)-1)
d401 2
a402 2
	/* Add optional packet payload */
	if (addpacket &&
@


1.14
log
@Fix some styles issues: break big lines and remove some useless spaces.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.13 2016/11/11 22:07:40 reyk Exp $	*/
d346 3
a348 1
	    dstport > OFP10_PORT_MAX) {
d357 2
a359 3

	if (dstport <= OFP10_PORT_MAX)
		addflow = 1;
@


1.13
log
@Move ofp_validate_header() into ofp_common.c.  No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.12 2016/10/05 15:42:28 reyk Exp $	*/
d308 2
a309 1
	if ((flags & (OFP10_WILDCARD_DL_SRC|OFP10_WILDCARD_DL_DST)) && (eh == NULL))
@


1.12
log
@Move ofp_validate_header() to ofp10.c until we have a better place
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.11 2016/09/30 12:48:27 reyk Exp $	*/
a85 34

int
ofp_validate_header(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh, uint8_t version)
{
	struct constmap	*tmap;

	/* For debug, don't verify the header if the version is unset */
	if (version != OFP_V_0 &&
	    (oh->oh_version != version ||
	    oh->oh_type >= OFP_T_TYPE_MAX))
		return (-1);

	switch (version) {
	case OFP_V_1_0:
	case OFP_V_1_1:
		tmap = ofp10_t_map;
		break;
	case OFP_V_1_3:
	default:
		tmap = ofp_t_map;
		break;
	}

	log_debug("%s > %s: version %s type %s length %u xid %u",
	    print_host(src, NULL, 0),
	    print_host(dst, NULL, 0),
	    print_map(oh->oh_version, ofp_v_map),
	    print_map(oh->oh_type, tmap),
	    ntohs(oh->oh_length), ntohl(oh->oh_xid));

	return (0);
}
@


1.11
log
@Remove local copy of ofp.h and use net/ofp.h instead
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.10 2016/09/30 11:57:57 reyk Exp $	*/
d86 34
@


1.10
log
@Implement socket server code that properly handles async I/O, partial
messages, multiple messages per buffer and important things like
connection limits and file descriptor accounting.  It works with TCP
connections as well as switch(4).  The ofrelay.c part replaces
networking that was in ofp.c and will soon handle all socket
connections of switchd.  It is called "ofrelay" because it will be
used as client, server, and forwarder.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.9 2016/09/29 18:25:54 reyk Exp $	*/
d25 2
a38 1
#include "ofp.h"
@


1.9
log
@Rename ofp_send to ofp_output
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.8 2016/09/27 22:27:38 reyk Exp $	*/
a260 1
		ofp_close(con);
@


1.8
log
@Fix previous: don't attempt to write a NULL packet to the tap device.
Also print a debug message if the packet has been truncated by the switch.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.7 2016/09/27 19:40:43 reyk Exp $	*/
d271 1
a271 1
	ofp_send(con, oh, NULL);
d295 1
a295 1
	ofp_send(con, oh, NULL);
d413 1
a413 1
	ofp_send(con, NULL, obuf);
@


1.7
log
@OpenFlow PACKET_IN can send truncated packets; this only makes sense
if the switch buffers packets, otherwise we might end up forwarding
truncated packets to the network with the PACKET_OUT response.  So,
for now, only close the connection if the packet is not buffered by
the switch but truncated.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.6 2016/07/21 08:40:14 reyk Exp $	*/
d117 1
a117 1
	size_t			 len;
d129 2
d132 6
a137 3
	off += sizeof(*pin);
	if ((p = ibuf_seek(ibuf, off, len)) == NULL) {
		/* Buffer packets can be truncated */
d139 1
a139 1
			len = ibuf_length(ibuf) - off;
d143 2
@


1.6
log
@long to uint32_t port
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.5 2016/07/21 08:39:23 reyk Exp $	*/
d131 7
a137 2
	if ((p = ibuf_seek(ibuf, off, len)) == NULL)
		return (-1);
@


1.5
log
@With uint32_t ports, we cannot sneak the port into an int anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.4 2016/07/21 07:58:44 reyk Exp $	*/
d320 1
a320 1
	long				 srcport, dstport;
@


1.4
log
@Turn ofp*_debug functions into ofp*_validate functions to follow a
similar approach like iked: first validate the packet, then parse it,
and execute actions.  debug logging is a side effect of validation.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.3 2016/07/20 14:15:08 reyk Exp $	*/
d331 2
a332 2
	if ((dstport = packet_input(sc, con->con_switch,
	    srcport, ibuf, len, &pkt)) == -1 ||
@


1.3
log
@Update OpenFlow 1.3 stub based on the 1.0 code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.2 2016/07/19 18:11:08 reyk Exp $	*/
d42 3
d47 2
a48 1
int	 ofp10_packet_in(struct switchd *, struct switch_connection *,
d52 1
a52 7

int	 ofp10_packet_match(struct packet *, struct ofp10_match *, unsigned int);

void	 ofp10_debug_header(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
	    struct ofp_header *);
int	 ofp10_debug_packet_in(struct switchd *,
d55 1
a55 2
int	 ofp10_debug_packet_out(struct switchd *,
	    struct sockaddr_storage *, struct sockaddr_storage *,
d57 1
a57 1
int	 ofp10_debug_error(struct switchd *,
d63 1
a63 1
	{ OFP10_T_ERROR,		NULL, ofp10_debug_error },
d72 1
a72 1
	{ OFP10_T_PACKET_IN,		ofp10_packet_in, ofp10_debug_packet_in },
d75 1
a75 1
	{ OFP10_T_PACKET_OUT,		NULL, ofp10_debug_packet_out },
d86 2
a87 15
void
ofp10_debug_header(struct switchd *sc,
    struct sockaddr_storage *src, struct sockaddr_storage *dst,
    struct ofp_header *oh)
{
	log_debug("%s > %s: version %s type %s length %u xid %u",
	    print_host(src, NULL, 0),
	    print_host(dst, NULL, 0),
	    print_map(oh->oh_version, ofp_v_map),
	    print_map(oh->oh_type, ofp10_t_map),
	    ntohs(oh->oh_length), ntohl(oh->oh_xid));
}

void
ofp10_debug(struct switchd *sc,
d91 1
a91 1
	ofp10_debug_header(sc, src, dst, oh);
d93 15
a107 11
	if (ibuf == NULL ||
	    oh->oh_version != OFP_V_1_0 ||
	    oh->oh_type >= OFP_T_TYPE_MAX ||
	    ofp10_callbacks[oh->oh_type].debug == NULL)
		return;
	if (ofp10_callbacks[oh->oh_type].debug(sc, src, dst, oh, ibuf) != 0)
		goto fail;

	return;
 fail:
	log_debug("\tinvalid packet");
d111 1
a111 1
ofp10_debug_packet_in(struct switchd *sc,
d135 1
d140 1
a140 1
ofp10_debug_packet_out(struct switchd *sc,
d191 1
a191 1
ofp10_debug_error(struct switchd *sc,
d228 1
a228 5
	ofp10_debug(sc, &con->con_peer, &con->con_local, oh, ibuf);

	if (oh->oh_version != OFP_V_1_0 ||
	    oh->oh_type >= OFP_T_TYPE_MAX) {
		log_debug("unsupported packet");
a229 1
	}
d257 2
a259 1
	ofp10_debug(sc, &con->con_local, &con->con_peer, oh, NULL);
d281 2
a282 1
	ofp10_debug(sc, &con->con_local, &con->con_peer, oh, NULL);
d398 2
a399 1
	ofp10_debug(sc, &con->con_local, &con->con_peer, oh, obuf);
@


1.2
log
@Correctly use ssize_t instead of size_t for read/write return values.
Pointed out by David Hill and clang.
@
text
@d1 1
a1 1
/*	$OpenBSD: ofp10.c,v 1.1 2016/07/19 16:54:26 reyk Exp $	*/
d51 3
@


1.1
log
@Import switchd(8), a basic WIP OpenFlow implementation for OpenBSD.

switchd consists of two parts:
1. switchd(8) and switchctl(8), an OpenFlow controller or "vswitch".
2. switch(4), an OpenFlow-aware kernel "bridge".

This the 1st part, the driver will be imported later.  The code will
remain disabled for a while, but it helps development to have it in
the tree.  switchd currently supports partial OpenFlow 1.0, but the
goal is to use OpenFlow 1.3.5 instead (switch(4) already does 1.3.5).

For more background information see:
http://www.openbsd.org/papers/bsdcan2016-switchd.pdf
https://youtu.be/Cuo0qT-lqig

With help from yasuoka@@ goda@@
Import discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d173 1
a173 1
	    ntohs(ah->ah_len) >= sizeof(*ah)) {
@

