head	1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2016.07.19.16.54.26;	author reyk;	state Exp;
branches;
next	;
commitid	NvD0Bp0qm4zs28YJ;


desc
@@


1.1
log
@Import switchd(8), a basic WIP OpenFlow implementation for OpenBSD.

switchd consists of two parts:
1. switchd(8) and switchctl(8), an OpenFlow controller or "vswitch".
2. switch(4), an OpenFlow-aware kernel "bridge".

This the 1st part, the driver will be imported later.  The code will
remain disabled for a while, but it helps development to have it in
the tree.  switchd currently supports partial OpenFlow 1.0, but the
goal is to use OpenFlow 1.3.5 instead (switch(4) already does 1.3.5).

For more background information see:
http://www.openbsd.org/papers/bsdcan2016-switchd.pdf
https://youtu.be/Cuo0qT-lqig

With help from yasuoka@@ goda@@
Import discussed with deraadt@@
@
text
@/*	$OpenBSD: timer.c,v 1.12 2015/01/16 06:39:58 deraadt Exp $	*/

/*
 * Copyright (c) 2010-2016 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <ctype.h>
#include <event.h>

#include "switchd.h"

void	 timer_callback(int, short, void *);

void
timer_set(struct switchd *sc, struct timer *tmr,
    void (*cb)(struct switchd *, void *), void *arg)
{
	tmr->tmr_sc = sc;
	tmr->tmr_cb = cb;
	tmr->tmr_cbarg = arg;
	evtimer_set(&tmr->tmr_ev, timer_callback, tmr);
}

void
timer_add(struct switchd *sc, struct timer *tmr, int timeout)
{
	struct timeval		 tv = { timeout };

	if (evtimer_initialized(&tmr->tmr_ev) &&
	    evtimer_pending(&tmr->tmr_ev, NULL))
		evtimer_del(&tmr->tmr_ev);

	evtimer_add(&tmr->tmr_ev, &tv);
}

void
timer_del(struct switchd *sc, struct timer *tmr)
{
	if (tmr->tmr_sc == sc && tmr->tmr_cb &&
	    evtimer_initialized(&tmr->tmr_ev))
		evtimer_del(&tmr->tmr_ev);
}

void
timer_callback(int fd, short event, void *arg)
{
	struct timer	*tmr = arg;

	if (tmr->tmr_cb)
		tmr->tmr_cb(tmr->tmr_sc, tmr->tmr_cbarg);
}
@
