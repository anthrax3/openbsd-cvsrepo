head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2017.08.06.17.31.19;	author rob;	state Exp;
branches;
next	1.4;
commitid	CGBFSokZv8WBoEXs;

1.4
date	2016.09.26.08.55.43;	author rzalamena;	state Exp;
branches;
next	1.3;
commitid	0Eblte1OMpIhrLGC;

1.3
date	2016.07.21.08.39.23;	author reyk;	state Exp;
branches;
next	1.2;
commitid	0hqYlr7r5dsUiBK1;

1.2
date	2016.07.20.20.07.02;	author reyk;	state Exp;
branches;
next	1.1;
commitid	rKaJJTIoQxMi4AE2;

1.1
date	2016.07.19.16.54.26;	author reyk;	state Exp;
branches;
next	;
commitid	NvD0Bp0qm4zs28YJ;


desc
@@


1.5
log
@packet.c and parse.y no longer require err.h. ok jca@@ florian@@
@
text
@/*	$OpenBSD: packet.c,v 1.4 2016/09/26 08:55:43 rzalamena Exp $	*/

/*
 * Copyright (c) 2013-2016 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <net/if.h>
#include <net/if_arp.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/tcp.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <pwd.h>
#include <event.h>

#include "switchd.h"

const uint8_t etherbroadcastaddr[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
const uint8_t etherzeroaddr[] = { 0, 0, 0, 0, 0, 0 };

int	 packet_ether_unicast(uint8_t *);

int
packet_ether_unicast(uint8_t *ea)
{
	if (memcmp(ea, etherbroadcastaddr, ETHER_ADDR_LEN) == 0 ||
	    memcmp(ea, etherzeroaddr, ETHER_ADDR_LEN) == 0 ||
	    ETHER_IS_MULTICAST(ea))
		return (-1);
	return (0);
}

int
packet_input(struct switchd *sc, struct switch_control *sw, uint32_t srcport,
    uint32_t *dstport, struct ibuf *ibuf, size_t len, struct packet *pkt)
{
	struct ether_header	*eh;
	struct macaddr		*src, *dst;

	if (sw == NULL)
		return (-1);
	if (len < sizeof(*eh))
		return (-1);

	pkt->pkt_len = ibuf_dataleft(ibuf);
	if ((eh = ibuf_getdata(ibuf, sizeof(*eh))) == NULL) {
		log_debug("short packet");
		return (-1);
	}
	len -= sizeof(*eh);

	if ((packet_ether_unicast(eh->ether_shost) == -1) ||
	    (src = switch_learn(sc, sw, eh->ether_shost, srcport)) == NULL)
		return (-1);

	if (packet_ether_unicast(eh->ether_dhost) == -1)
		dst = NULL;
	else
		dst = switch_cached(sw, eh->ether_dhost);

	log_debug("%s: %s -> %s, port %u -> %u", __func__,
	    print_ether(eh->ether_shost),
	    print_ether(eh->ether_dhost),
	    src->mac_port,
	    dst == NULL ? OFP_PORT_ANY : dst->mac_port);

	if (dstport)
		*dstport = dst == NULL ? OFP_PORT_ANY : dst->mac_port;

	pkt->pkt_eh = eh;
	pkt->pkt_buf = (uint8_t *)eh;

	return (0);
}
@


1.4
log
@Set pkt_buf variable on incoming packet_in messages.

small style correction and ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.3 2016/07/21 08:39:23 reyk Exp $	*/
a31 1
#include <err.h>
@


1.3
log
@With uint32_t ports, we cannot sneak the port into an int anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.2 2016/07/20 20:07:02 reyk Exp $	*/
d66 1
a66 1
	if ((pkt->pkt_eh = eh = ibuf_getdata(ibuf, sizeof(*eh))) == NULL) {
d89 3
@


1.2
log
@Handle ports as uint32_t instead of in_port_t: OpenFlow 1.0 used 16bit
ports, but later versions switched to 32bit ports (for the case that a
virtual switch has more than 65535 switch ports, of course).
@
text
@d1 1
a1 1
/*	$OpenBSD: packet.c,v 1.1 2016/07/19 16:54:26 reyk Exp $	*/
d53 3
a55 3
uint32_t
packet_input(struct switchd *sc, struct switch_control *sw, uint32_t port,
    struct ibuf *ibuf, size_t len, struct packet *pkt)
d73 1
a73 1
	    (src = switch_learn(sc, sw, eh->ether_shost, port)) == NULL)
d87 4
a90 1
	return (dst == NULL ? OFP_PORT_ANY : dst->mac_port);
@


1.1
log
@Import switchd(8), a basic WIP OpenFlow implementation for OpenBSD.

switchd consists of two parts:
1. switchd(8) and switchctl(8), an OpenFlow controller or "vswitch".
2. switch(4), an OpenFlow-aware kernel "bridge".

This the 1st part, the driver will be imported later.  The code will
remain disabled for a while, but it helps development to have it in
the tree.  switchd currently supports partial OpenFlow 1.0, but the
goal is to use OpenFlow 1.3.5 instead (switch(4) already does 1.3.5).

For more background information see:
http://www.openbsd.org/papers/bsdcan2016-switchd.pdf
https://youtu.be/Cuo0qT-lqig

With help from yasuoka@@ goda@@
Import discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 2
a54 2
long
packet_input(struct switchd *sc, struct switch_control *sw, long port,
d81 1
a81 1
	log_debug("%s: %s -> %s, port %ld -> %ld", __func__,
d85 1
a85 1
	    dst == NULL ? -1 : dst->mac_port);
d87 1
a87 1
	return (dst == NULL ? -1 : dst->mac_port);
@

