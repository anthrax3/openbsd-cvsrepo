head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.15
date	2017.01.09.14.49.22;	author reyk;	state Exp;
branches;
next	1.14;
commitid	eA8b246voAapPTkX;

1.14
date	2016.10.12.19.07.42;	author reyk;	state Exp;
branches;
next	1.13;
commitid	3O0CWeyo2kl0zVpd;

1.13
date	2016.09.30.12.32.31;	author reyk;	state Exp;
branches;
next	1.12;
commitid	6eToJOmsTHI5FaWk;

1.12
date	2016.09.30.11.57.57;	author reyk;	state Exp;
branches;
next	1.11;
commitid	Bk6N1Zmhuj3ewIdN;

1.11
date	2016.09.25.23.05.29;	author jsg;	state Exp;
branches;
next	1.10;
commitid	UHqYHFIpXjzW1G3T;

1.10
date	2016.09.20.16.45.09;	author rzalamena;	state Exp;
branches;
next	1.9;
commitid	NPLXDmVw0fCkKF4a;

1.9
date	2016.09.15.15.52.22;	author rzalamena;	state Exp;
branches;
next	1.8;
commitid	VxwYCAe910cobuMf;

1.8
date	2016.09.14.13.46.51;	author rzalamena;	state Exp;
branches;
next	1.7;
commitid	JePtimnIRHuPUx14;

1.7
date	2016.08.08.16.52.15;	author rzalamena;	state Exp;
branches;
next	1.6;
commitid	vVy9ZX1KMiunyyTa;

1.6
date	2016.07.22.09.31.33;	author reyk;	state Exp;
branches;
next	1.5;
commitid	9IPRFxN8aUcZ0JcQ;

1.5
date	2016.07.20.21.01.06;	author reyk;	state Exp;
branches;
next	1.4;
commitid	Rumwj01zEH37kIh7;

1.4
date	2016.07.20.11.43.31;	author jsg;	state Exp;
branches;
next	1.3;
commitid	1Ek9ZJK98C6XLZ0H;

1.3
date	2016.07.19.17.34.13;	author reyk;	state Exp;
branches;
next	1.2;
commitid	HwHK2TrlW8wTOWU8;

1.2
date	2016.07.19.17.31.22;	author reyk;	state Exp;
branches;
next	1.1;
commitid	Dny8XXpomcML4q7J;

1.1
date	2016.07.19.16.54.26;	author reyk;	state Exp;
branches;
next	;
commitid	NvD0Bp0qm4zs28YJ;


desc
@@


1.15
log
@Stop accessing verbose and debug variables from log.c directly.

This replaces log_verbose() and "extern int verbose" with the two functions
log_setverbose() and log_getverbose().

Pointed out by benno@@
OK krw@@ eric@@ gilles@@ (OK gilles@@ for the snmpd bits as well)
@
text
@/*	$OpenBSD: switchd.c,v 1.14 2016/10/12 19:07:42 reyk Exp $	*/

/*
 * Copyright (c) 2013-2016 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <sys/un.h>
#include <sys/queue.h>

#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/tcp.h>

#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <syslog.h>
#include <fcntl.h>
#include <errno.h>
#include <pwd.h>
#include <event.h>

#include "switchd.h"

void	 parent_shutdown(struct switchd *);
void	 parent_sig_handler(int, short, void *);
int	 parent_dispatch_ofp(int, struct privsep_proc *, struct imsg *);
int	 parent_dispatch_control(int, struct privsep_proc *, struct imsg *);
int	 parent_configure(struct switchd *);
int	 parent_reload(struct switchd *);
void	 parent_connect(struct privsep *, struct switch_client *);
void	 parent_connected(int, short, void *);
void	 parent_disconnect(struct privsep *, struct switch_client *);

__dead void	usage(void);

static struct privsep_proc procs[] = {
	{ "ofp",	PROC_OFP,	NULL, ofp },
	{ "control",	PROC_CONTROL,	parent_dispatch_control, control },
	{ "ofcconn",	PROC_OFCCONN,	NULL, ofcconn }
};

__dead void
usage(void)
{
	extern const char	*__progname;
	fprintf(stderr, "usage: %s [-dnv] [-c cachesize]  [-D macro=value] "
	    "[-f file] [-t timeout]\n",
	    __progname);
	exit(1);
}

int
main(int argc, char *argv[])
{
	struct switchd		*sc = NULL;
	struct privsep		*ps = NULL;
	struct switch_server	*srv;
	const char		*errstr = NULL;
	int			 c;
	int			 debug = 0, verbose = 0;
	uint32_t		 opts = 0;
	unsigned int		 cache = SWITCHD_CACHE_MAX;
	unsigned int		 timeout = SWITCHD_CACHE_TIMEOUT;
	const char		*conffile = SWITCHD_CONFIG;
	const char		*errp, *title = NULL;
	enum privsep_procid	 proc_id = PROC_PARENT;
	int			 argc0 = argc, proc_instance = 0;

	log_init(1, LOG_DAEMON);

	while ((c = getopt(argc, argv, "c:dD:f:hI:nP:t:v")) != -1) {
		switch (c) {
		case 'c':
			cache = strtonum(optarg, 1, UINT32_MAX, &errstr);
			if (errstr != NULL) {
				log_warn("max cache size: %s", errstr);
				usage();
			}
			break;
		case 'd':
			debug++;
			break;
		case 'D':
			if (cmdline_symset(optarg) < 0)
				log_warnx("could not parse macro definition %s",
				    optarg);
			break;
		case 'f':
			conffile = optarg;
			break;
		case 'I':
			proc_instance = strtonum(optarg, 0,
			    PROC_MAX_INSTANCES, &errp);
			if (errp)
				fatalx("invalid process instance");
			break;
		case 'n':
			opts |= SWITCHD_OPT_NOACTION;
			break;
		case 'P':
			title = optarg;
			proc_id = proc_getid(procs, nitems(procs), title);
			if (proc_id == PROC_MAX)
				fatalx("invalid process name");
			break;
		case 't':
			timeout = strtonum(optarg, 0, UINT32_MAX, &errstr);
			if (errstr != NULL) {
				log_warn("cache timeout: %s", errstr);
				usage();
			}
			break;
		case 'v':
			verbose++;
			opts |= SWITCHD_OPT_VERBOSE;
			break;
		default:
			usage();
		}
	}

	if ((sc = calloc(1, sizeof(*sc))) == NULL)
		fatal("calloc");

	if (strlcpy(sc->sc_conffile, conffile, PATH_MAX) >= PATH_MAX)
		fatal("config file exceeds PATH_MAX");

	sc->sc_cache_max = cache;
	sc->sc_cache_timeout = timeout;
	sc->sc_opts = opts;

	srv = &sc->sc_server;
	srv->srv_sc = sc;

	ps = &sc->sc_ps;
	ps->ps_env = sc;
	TAILQ_INIT(&ps->ps_rcsocks);
	TAILQ_INIT(&sc->sc_clients);

	if (parse_config(sc->sc_conffile, sc) == -1) {
		proc_kill(&sc->sc_ps);
		exit(1);
	}

	if (opts & SWITCHD_OPT_NOACTION) {
		fprintf(stderr, "configuration OK\n");
		proc_kill(&sc->sc_ps);
		exit(0);
	}

	/* check for root privileges */
	if (geteuid())
		fatalx("need root privileges");

	if ((ps->ps_pw =  getpwnam(SWITCHD_USER)) == NULL)
		fatalx("unknown user " SWITCHD_USER);

	log_init(debug, LOG_DAEMON);
	log_setverbose(verbose);

	/* Configure the control socket */
	ps->ps_csock.cs_name = SWITCHD_SOCKET;
	ps->ps_instance = proc_instance;
	if (title)
		ps->ps_title[proc_id] = title;

	/* Only the parent returns. */
	proc_init(ps, procs, nitems(procs), argc0, argv, proc_id);

	if (!debug && daemon(0, 0) == -1)
		fatal("failed to daemonize");

	log_procinit("parent");

	/*
	 * pledge in the parent process:
	 * stdio - for malloc and basic I/O including events.
	 * rpath - for reload to open and read the configuration files.
	 * wpath - for accessing the /dev/switch device.
	 * inet - for opening OpenFlow and device sockets.
	 * dns - for resolving host in the configuration files.
	 * sendfd - send sockets to child processes on reload.
	 */
	if (pledge("stdio rpath wpath inet dns sendfd", NULL) == -1)
		fatal("pledge");

	event_init();

	signal_set(&ps->ps_evsigint, SIGINT, parent_sig_handler, ps);
	signal_set(&ps->ps_evsigterm, SIGTERM, parent_sig_handler, ps);
	signal_set(&ps->ps_evsighup, SIGHUP, parent_sig_handler, ps);
	signal_set(&ps->ps_evsigpipe, SIGPIPE, parent_sig_handler, ps);
	signal_set(&ps->ps_evsigusr1, SIGUSR1, parent_sig_handler, ps);

	signal_add(&ps->ps_evsigint, NULL);
	signal_add(&ps->ps_evsigterm, NULL);
	signal_add(&ps->ps_evsighup, NULL);
	signal_add(&ps->ps_evsigpipe, NULL);
	signal_add(&ps->ps_evsigusr1, NULL);

	proc_connect(ps);

	if (parent_configure(sc) == -1)
		fatalx("configuration failed");

	event_dispatch();

	log_debug("%d parent exiting", getpid());

	return (0);
}

int
switchd_socket(struct sockaddr *sock, int reuseport)
{
	int s = -1, val;
	struct linger lng;

	if ((s = socket(sock->sa_family, SOCK_STREAM | SOCK_NONBLOCK,
	    IPPROTO_TCP)) == -1)
		goto bad;

	/*
	 * Socket options
	 */
	bzero(&lng, sizeof(lng));
	if (setsockopt(s, SOL_SOCKET, SO_LINGER, &lng, sizeof(lng)) == -1)
		goto bad;
	if (reuseport) {
		val = 1;
		if (setsockopt(s, SOL_SOCKET, SO_REUSEPORT, &val,
		    sizeof(int)) == -1)
			goto bad;
	}

	/*
	 * TCP options
	 */
	val = 1;
	if (setsockopt(s, IPPROTO_TCP, TCP_NODELAY,
	    &val, sizeof(val)) == -1)
		goto bad;

	return (s);

 bad:
	if (s != -1)
		close(s);
	return (-1);
}

int
switchd_listen(struct sockaddr *sock)
{
	int s;

	if ((s = switchd_socket(sock, 1)) == -1)
		return (-1);

	if (bind(s, sock, sock->sa_len) == -1)
		goto bad;
	if (listen(s, 10) == -1)
		goto bad;

	return (s);

 bad:
	close(s);
	return (-1);
}

int
switchd_tap(void)
{
	char	 path[PATH_MAX];
	int	 i, fd;

	for (i = 0; i < SWITCHD_MAX_TAP; i++) {
		snprintf(path, PATH_MAX, "/dev/tap%d", i);
		fd = open(path, O_RDWR | O_NONBLOCK);
		if (fd != -1)
			return (fd);
	}

	return (-1);
}

struct switch_connection *
switchd_connbyid(struct switchd *sc, unsigned int id, unsigned int instance)
{
	struct switch_connection	*con;

	TAILQ_FOREACH(con, &sc->sc_conns, con_entry) {
		if (con->con_id == id && con->con_instance == instance)
			return (con);
	}

	return (NULL);
}

struct switch_connection *
switchd_connbyaddr(struct switchd *sc, struct sockaddr *sa)
{
	struct switch_connection	*con;

	TAILQ_FOREACH(con, &sc->sc_conns, con_entry) {
		if (sockaddr_cmp((struct sockaddr *)
		    &con->con_peer, sa, -1) == 0)
			return (con);
	}

	return (NULL);
}

void
parent_sig_handler(int sig, short event, void *arg)
{
	struct privsep	*ps = arg;

	switch (sig) {
	case SIGHUP:
		log_info("%s: reload requested with SIGHUP", __func__);

		/*
		 * This is safe because libevent uses async signal handlers
		 * that run in the event loop and not in signal context.
		 */
		parent_reload(ps->ps_env);
		break;
	case SIGPIPE:
		log_info("%s: ignoring SIGPIPE", __func__);
		break;
	case SIGUSR1:
		log_info("%s: ignoring SIGUSR1", __func__);
		break;
	case SIGTERM:
	case SIGINT:
		parent_shutdown(ps->ps_env);
		break;
	default:
		fatalx("unexpected signal");
	}
}

int
parent_configure(struct switchd *sc)
{
	struct switch_client	*swc, *swcn;
	int			 fd;

	if ((fd = switchd_tap()) == -1)
		fatal("%s: tap", __func__);
	proc_compose_imsg(&sc->sc_ps, PROC_OFP, -1,
	    IMSG_TAPFD, -1, fd, NULL, 0);

	TAILQ_FOREACH_SAFE(swc, &sc->sc_clients, swc_next, swcn) {
		parent_connect(&sc->sc_ps, swc);
	}

	return (0);
}

int
parent_reload(struct switchd *sc)
{
	struct switchd			 newconf;
	struct switch_client		*swc, *oswc, *swcn;

	memset(&newconf, 0, sizeof(newconf));
	TAILQ_INIT(&newconf.sc_clients);
	TAILQ_INIT(&newconf.sc_conns);

	if (parse_config(sc->sc_conffile, &newconf) != -1) {
		TAILQ_FOREACH_SAFE(swc, &sc->sc_clients, swc_next, swcn) {
			TAILQ_FOREACH(oswc, &newconf.sc_clients, swc_next) {
				if (sockaddr_cmp((struct sockaddr *)
				    &oswc->swc_addr.swa_addr,
				    (struct sockaddr *)
				    &swc->swc_addr.swa_addr, -1) == 0) {
					TAILQ_REMOVE(&newconf.sc_clients,
					    oswc, swc_next);
					break;
				}
			}
			if (oswc == NULL) {
				/* Removed */
				parent_disconnect(&sc->sc_ps, swc);
			} else {
				/* Keep the existing one */
				TAILQ_REMOVE(&newconf.sc_clients,
				    oswc, swc_next);
				free(oswc);
			}
		}
		TAILQ_FOREACH_SAFE(swc, &newconf.sc_clients, swc_next, swcn) {
			TAILQ_REMOVE(&newconf.sc_clients, swc, swc_next);
			TAILQ_INSERT_TAIL(&sc->sc_clients, swc, swc_next);

			parent_connect(&sc->sc_ps, swc);
		}
	}

	return (0);
}

int
parent_dispatch_control(int fd, struct privsep_proc *p, struct imsg *imsg)
{
	struct switch_client	*swc, *oswc;
	struct privsep		*ps = p->p_ps;
	struct switchd		*sc = ps->ps_env;

	switch (imsg->hdr.type) {
	case IMSG_CTL_CONNECT:
	case IMSG_CTL_DISCONNECT:
		IMSG_SIZE_CHECK(imsg, swc);

		/* Need to allocate it in case it is reused */
		if ((swc = calloc(1, sizeof(*swc))) == NULL) {
			log_warnx("%s: calloc", __func__);
			return (0);
		}
		memcpy(swc, imsg->data, sizeof(*swc));
		memset(&swc->swc_ev, 0, sizeof(swc->swc_ev));

		if (imsg->hdr.type == IMSG_CTL_CONNECT) {
			TAILQ_INSERT_TAIL(&sc->sc_clients, swc, swc_next);
			parent_connect(p->p_ps, swc);
		} else {
			TAILQ_FOREACH(oswc, &sc->sc_clients, swc_next) {
				if (sockaddr_cmp((struct sockaddr *)
				    &oswc->swc_addr.swa_addr,
				    (struct sockaddr *)
				    &swc->swc_addr.swa_addr, -1) == 0) {
					parent_disconnect(ps, oswc);
					break;
				}
			}
			if (oswc == NULL)
				log_warnx("client %s is not connected",
				    print_host(&swc->swc_addr.swa_addr,
				    NULL, 0));
			free(swc);
		}
		return (0);
	default:
		break;
	}

	return (-1);
}

void
parent_shutdown(struct switchd *sc)
{
	proc_kill(&sc->sc_ps);

	free(sc);

	log_warnx("parent terminating");
	exit(0);
}

void
parent_connect(struct privsep *ps, struct switch_client *swc)
{
	struct switchd		*sc = ps->ps_env;
	struct sockaddr_storage	*ss;
	struct sockaddr_un	*un;
	struct sockaddr_in	*sin4;
	struct sockaddr_in6	*sin6;
	int			 fd = -1;
	struct timeval		 tv;

	ss = &swc->swc_addr.swa_addr;

	if (ss->ss_len == 0) {
		log_warnx("%s: invalid address", __func__);
		goto fail;
	}
	swc->swc_arg = ps;
	memset(&swc->swc_ev, 0, sizeof(swc->swc_ev));

	switch (ss->ss_family) {
	case AF_LOCAL:
		un = (struct sockaddr_un *)ss;

		/* restrict the opening path to /dev/switch* */
		if (strncmp(un->sun_path, "/dev/switch",
		    strlen("/dev/switch")) != 0) {
			log_warnx("%s: device path is wrong: %s", __func__,
			    un->sun_path);
			goto fail;
		}

		if ((fd = open(un->sun_path, O_RDWR | O_NONBLOCK)) == -1) {
			log_warn("%s: failed to open %s",
			    __func__, un->sun_path);
			goto fail;
		}
		break;
	case AF_INET:
	case AF_INET6:
		if (ss->ss_family == AF_INET) {
			sin4 = (struct sockaddr_in *)ss;
			if (sin4->sin_port == 0)
				sin4->sin_port = htons(SWITCHD_CTLR_PORT);
		} else if (ss->ss_family == AF_INET6) {
			sin6 = (struct sockaddr_in6 *)ss;
			if (sin6->sin6_port == 0)
				sin6->sin6_port = htons(SWITCHD_CTLR_PORT);
		}

		if ((fd = switchd_socket((struct sockaddr *)ss, 0)) == -1) {
			log_debug("%s: failed to get socket for %s", __func__,
			    print_host(ss, NULL, 0));
			goto fail;
		}

 retry:
		if (connect(fd, (struct sockaddr *)ss, ss->ss_len) == -1) {
			if (errno == EINTR)
				goto retry;
			if (errno == EINPROGRESS) {
				tv.tv_sec = SWITCHD_CONNECT_TIMEOUT;
				tv.tv_usec = 0;
				event_set(&swc->swc_ev, fd, EV_WRITE|EV_TIMEOUT,
				    parent_connected, swc);
				event_add(&swc->swc_ev, &tv);
				return;
			}

			log_warn("%s: failed to connect to %s, fd %d", __func__,
			    print_host(ss, NULL, 0), fd);
			goto fail;
		}

		break;
	}

	parent_connected(fd, 0, swc);
	return;

 fail:
	TAILQ_REMOVE(&sc->sc_clients, swc, swc_next);
	free(swc);
}

void
parent_connected(int fd, short event, void *arg)
{
	struct switch_client	*swc = arg;
	struct privsep		*ps = swc->swc_arg;
	struct switchd		*sc = ps->ps_env;

	if (event & EV_TIMEOUT) {
		log_debug("%s: failed to connect to %s", __func__,
		    print_host(&swc->swc_addr.swa_addr, NULL, 0));
		TAILQ_REMOVE(&sc->sc_clients, swc, swc_next);
		free(swc);
		return;
	}

	switch (swc->swc_target.swa_type) {
	case SWITCH_CONN_LOCAL:
		proc_compose_imsg(ps, PROC_OFP, -1, IMSG_CTL_CONNECT,
		    -1, fd, swc, sizeof(*swc));
		break;
	case SWITCH_CONN_TLS:
	case SWITCH_CONN_TCP:
		proc_compose_imsg(ps, PROC_OFCCONN, -1, IMSG_CTL_CONNECT,
		    -1, fd, swc, sizeof(*swc));
		break;
	default:
		fatalx("not implemented");
	}
}

void
parent_disconnect(struct privsep *ps, struct switch_client *swc)
{
	struct switchd		*sc = ps->ps_env;
	enum privsep_procid	 target;

	TAILQ_REMOVE(&sc->sc_clients, swc, swc_next);

	target = swc->swc_target.swa_type == SWITCH_CONN_LOCAL ?
	    PROC_OFP : PROC_OFCCONN;
	proc_compose(ps, target, IMSG_CTL_DISCONNECT, swc, sizeof(*swc));

	free(swc);
}
@


1.14
log
@Start reworking the "device" support in switchd: Once connected, a
device is just an fd that is connected to a switch, either via TCP or
via /dev/switch.  Change the switchctl from "device add" to "connect"
etc.  This change is an intermediate step towards other changes,
including the configuration grammar, so a few things will be left
undocumented for now.

switchctl(8) examples,
switchctl connect /dev/switch0
switchctl connect /dev/switch0 forward-to 10.1.1.1
switchctl connect 127.0.0.1
switchctl connect 127.0.0.1 forward-to 10.1.1.1
switchctl disconnect /dev/switch0

Discussed with rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.13 2016/09/30 12:32:31 reyk Exp $	*/
d178 1
a178 1
	log_verbose(verbose);
@


1.13
log
@Open next available tap(4) device instead of just tap0
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.12 2016/09/30 11:57:57 reyk Exp $	*/
d22 1
d49 3
a51 2
void	 parent_device_connect(struct privsep *, struct switch_device *);
int	 switch_device_cmp(struct switch_device *, struct switch_device *);
d157 1
a157 1
	TAILQ_INIT(&sc->sc_devs);
d367 1
a367 1
	struct switch_device	*c;
d375 2
a376 2
	TAILQ_FOREACH(c, &sc->sc_devs, sdv_next) {
		parent_device_connect(&sc->sc_ps, c);
d386 1
a386 2
	struct switch_device		*sdv, *osdv, *sdvn;
	enum privsep_procid		 procid;
d389 1
a389 1
	TAILQ_INIT(&newconf.sc_devs);
d393 8
a400 5
		TAILQ_FOREACH_SAFE(sdv, &sc->sc_devs, sdv_next, sdvn) {
			TAILQ_FOREACH(osdv, &newconf.sc_devs, sdv_next) {
				if (switch_device_cmp(osdv, sdv) == 0) {
					TAILQ_REMOVE(&newconf.sc_devs,
					    osdv, sdv_next);
d404 1
a404 1
			if (osdv == NULL) {
d406 1
a406 7
				TAILQ_REMOVE(&sc->sc_devs, sdv, sdv_next);
				procid = (sdv->sdv_swc.swc_type ==
				    SWITCH_CONN_LOCAL)
				    ? PROC_OFP : PROC_OFCCONN;
				proc_compose_imsg(&sc->sc_ps, procid, -1,
				    IMSG_CTL_DEVICE_DISCONNECT,
				    -1, -1, sdv, sizeof(*sdv));
d409 3
a411 2
				TAILQ_REMOVE(&newconf.sc_devs, osdv, sdv_next);
				free(osdv);
d414 5
a418 6
		TAILQ_FOREACH(sdv, &newconf.sc_devs, sdv_next) {
			procid =
			    (sdv->sdv_swc.swc_type == SWITCH_CONN_LOCAL)
			    ? PROC_OFP : PROC_OFCCONN;
			TAILQ_INSERT_TAIL(&sc->sc_devs, sdv, sdv_next);
			parent_device_connect(&sc->sc_ps, sdv);
d428 4
d433 7
a439 6
	case IMSG_CTL_DEVICE_CONNECT:
	case IMSG_CTL_DEVICE_DISCONNECT:
		if (IMSG_DATA_SIZE(imsg) <
		    sizeof(struct switch_device)) {
			log_warnx("%s: IMSG_CTL_DEVICE_CONNECT: "
			    "message size is wrong", __func__);
d442 21
a462 11
		if (imsg->hdr.type == IMSG_CTL_DEVICE_CONNECT)
			parent_device_connect(p->p_ps, imsg->data);
		else {
			/*
			 * Since we don't know which the device was attached
			 * to, we send the message to the both.
			 */
			proc_compose(p->p_ps, PROC_OFP,
			    imsg->hdr.type, imsg->data, IMSG_DATA_SIZE(imsg));
			proc_compose(p->p_ps, PROC_OFCCONN,
			    imsg->hdr.type, imsg->data, IMSG_DATA_SIZE(imsg));
d484 1
a484 1
parent_device_connect(struct privsep *ps, struct switch_device *sdv)
d486 65
a550 1
	int	 fd;
d552 6
a557 5
	/* restrict the opening path to /dev/switch* */
	if (strncmp(sdv->sdv_device, "/dev/switch", 11) != 0) {
		log_warnx("%s: device path is wrong: %s", __func__,
		    sdv->sdv_device);
		goto on_error;
d560 21
a580 3
	if ((fd = open(sdv->sdv_device, O_RDWR | O_NONBLOCK)) == -1) {
		log_warn("%s: open(%s) failed", __func__, sdv->sdv_device);
		goto on_error;
d583 1
a583 1
	switch (sdv->sdv_swc.swc_type) {
d585 2
a586 2
		proc_compose_imsg(ps, PROC_OFP, -1, IMSG_CTL_DEVICE_CONNECT,
		    -1, fd, sdv, sizeof(*sdv));
d590 2
a591 2
		proc_compose_imsg(ps, PROC_OFCCONN, -1, IMSG_CTL_DEVICE_CONNECT,
		    -1, fd, sdv, sizeof(struct switch_device));
a595 2
on_error:
	return;
d598 2
a599 3
int
switch_device_cmp(struct switch_device *a,
    struct switch_device *b)
d601 8
a608 8
	struct switch_controller	*ca = &a->sdv_swc;
	struct switch_controller	*cb = &b->sdv_swc;
	int				 c;

	if ((c = strcmp(a->sdv_device, b->sdv_device)) != 0)
		return (c);
	if ((c = cb->swc_type - ca->swc_type) != 0)
		return (c);
d610 1
a610 2
	return (sockaddr_cmp((struct sockaddr *)&ca->swc_addr,
	    (struct sockaddr *)&cb->swc_addr, -1));
@


1.12
log
@Implement socket server code that properly handles async I/O, partial
messages, multiple messages per buffer and important things like
connection limits and file descriptor accounting.  It works with TCP
connections as well as switch(4).  The ofrelay.c part replaces
networking that was in ofp.c and will soon handle all socket
connections of switchd.  It is called "ofrelay" because it will be
used as client, server, and forwarder.

OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.11 2016/09/25 23:05:29 jsg Exp $	*/
d292 11
a302 4
	int	 fd;
	if ((fd = open("/dev/tap0", O_WRONLY)) == -1)
		return (-1);
	return (fd);
a303 1

@


1.11
log
@Correct the flag listing for switchd(8) and add a files section for the
configuration file.  Sync usage() with the result.

With feedback from and ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.10 2016/09/20 16:45:09 rzalamena Exp $	*/
d54 3
a56 3
	{ "ofp",	PROC_OFP, NULL, ofp },
	{ "control",	PROC_CONTROL, parent_dispatch_control, control },
	{ "ofcconn",	PROC_OFCCONN, NULL, ofcconn }
d155 1
a155 1
	TAILQ_INIT(&sc->sc_conns);
d299 27
d360 6
d367 1
a367 1
	TAILQ_FOREACH(c, &sc->sc_conns, sdv_next) {
d382 1
d386 2
a387 2
		TAILQ_FOREACH_SAFE(sdv, &sc->sc_conns, sdv_next, sdvn) {
			TAILQ_FOREACH(osdv, &newconf.sc_conns, sdv_next) {
d389 1
a389 1
					TAILQ_REMOVE(&newconf.sc_conns,
d396 1
a396 1
				TAILQ_REMOVE(&sc->sc_conns, sdv, sdv_next);
d405 1
a405 1
				TAILQ_REMOVE(&newconf.sc_conns, osdv, sdv_next);
d409 1
a409 1
		TAILQ_FOREACH(sdv, &newconf.sc_conns, sdv_next) {
d413 1
a413 1
			TAILQ_INSERT_TAIL(&sc->sc_conns, sdv, sdv_next);
@


1.10
log
@Unbreak logging for children process in switchd(8). log_init/verbose()
must be called before proc_init() otherwise child process won't have this
configured.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.9 2016/09/15 15:52:22 rzalamena Exp $	*/
d63 2
a64 2
	fprintf(stderr, "usage: %s [-dnv] [-D macro=value] [-f file] "
	    "[-c mac-cache-size] [-t cache-timeout]\n",
@


1.9
log
@Teach switchd(8) how to shutdown using close() instead of kill().

This commit mostly removes the parent SIGCHLD handler, the rest of the
code is already in proc.c.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.8 2016/09/14 13:46:51 rzalamena Exp $	*/
d175 3
a185 3

	log_init(debug, LOG_DAEMON);
	log_verbose(verbose);
@


1.8
log
@Teach switchd(8) how to fork+exec.

Note: this daemon has the -Wcast-qual compilation flag which trigger a
warning that wasn't enable in httpd(8) or relayd(8). This will be fixed
in a next diff and then synchronized with other daemons.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.7 2016/08/08 16:52:15 rzalamena Exp $	*/
a22 1
#include <sys/wait.h>
d201 1
a201 1
	if (pledge("stdio rpath wpath inet dns proc sendfd", NULL) == -1)
a207 1
	signal_set(&ps->ps_evsigchld, SIGCHLD, parent_sig_handler, ps);
a213 1
	signal_add(&ps->ps_evsigchld, NULL);
a302 3
	int		 die = 0, status, fail, id;
	pid_t		 pid;
	char		*cause;
d322 1
a322 37
		die = 1;
		/* FALLTHROUGH */
	case SIGCHLD:
		do {
			pid = waitpid(-1, &status, WNOHANG);
			if (pid <= 0)
				continue;

			fail = 0;
			if (WIFSIGNALED(status)) {
				fail = 1;
				asprintf(&cause, "terminated; signal %d",
				    WTERMSIG(status));
			} else if (WIFEXITED(status)) {
				if (WEXITSTATUS(status) != 0) {
					fail = 1;
					asprintf(&cause, "exited abnormally");
				} else
					asprintf(&cause, "exited okay");
			} else
				fatalx("unexpected cause of SIGCHLD");

			die = 1;

			for (id = 0; id < PROC_MAX; id++)
				if (pid == ps->ps_pid[id]) {
					if (fail)
						log_warnx("lost child: %s %s",
						    ps->ps_title[id], cause);
					break;
				}

			free(cause);
		} while (pid > 0 || (pid == -1 && errno == EINTR));

		if (die)
			parent_shutdown(ps->ps_env);
@


1.7
log
@Create socket with SOCK_NONBLOCK instead of using fcntl() without the
proper flag handling.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.6 2016/07/22 09:31:33 reyk Exp $	*/
d83 3
d89 1
a89 1
	while ((c = getopt(argc, argv, "c:dD:f:hnt:v")) != -1) {
d109 6
d118 6
d178 6
a190 2
	ps->ps_ninstances = 1;
	proc_init(ps, procs, nitems(procs));
d221 1
a221 1
	proc_listen(ps, procs, nitems(procs));
@


1.6
log
@"wpath" is needed in the parent pledge when using the /dev/switch0 device.
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.5 2016/07/20 21:01:06 reyk Exp $	*/
d220 2
a221 1
	if ((s = socket(sock->sa_family, SOCK_STREAM, IPPROTO_TCP)) == -1)
a235 2
	if (fcntl(s, F_SETFL, O_NONBLOCK) == -1)
		goto bad;
@


1.5
log
@pledge(2) all the switchd processes.
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.4 2016/07/20 11:43:31 jsg Exp $	*/
d178 1
d183 1
a183 1
	if (pledge("stdio rpath inet dns proc sendfd", NULL) == -1)
@


1.4
log
@Add a -n flag to check the configuration and exit.  Matches what almost
all the other daemons do.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.3 2016/07/19 17:34:13 reyk Exp $	*/
d57 1
a57 1
	{ "ofcconn",	PROC_OFCCONN, NULL, ofcconn_proc_init }
d172 1
d174 10
a183 1
	setproctitle("parent");
@


1.3
log
@L2 tun is tap now
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.2 2016/07/19 17:31:22 reyk Exp $	*/
d64 1
a64 1
	fprintf(stderr, "usage: %s [-dv] [-D macro=value] [-f file] "
d79 1
d86 1
a86 1
	while ((c = getopt(argc, argv, "c:dD:f:ht:v")) != -1) {
d106 3
d118 1
d133 1
d146 6
@


1.2
log
@Don't use .p_shutdown in the proc struct
@
text
@d1 1
a1 1
/*	$OpenBSD: switchd.c,v 1.1 2016/07/19 16:54:26 reyk Exp $	*/
d255 1
a255 1
	if ((fd = open("/dev/tun0", O_WRONLY)) == -1)
@


1.1
log
@Import switchd(8), a basic WIP OpenFlow implementation for OpenBSD.

switchd consists of two parts:
1. switchd(8) and switchctl(8), an OpenFlow controller or "vswitch".
2. switch(4), an OpenFlow-aware kernel "bridge".

This the 1st part, the driver will be imported later.  The code will
remain disabled for a while, but it helps development to have it in
the tree.  switchd currently supports partial OpenFlow 1.0, but the
goal is to use OpenFlow 1.3.5 instead (switch(4) already does 1.3.5).

For more background information see:
http://www.openbsd.org/papers/bsdcan2016-switchd.pdf
https://youtu.be/Cuo0qT-lqig

With help from yasuoka@@ goda@@
Import discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 2
	{ "ofcconn",	PROC_OFCCONN, NULL, ofcconn_proc_init,
	    .p_shutdown = ofcconn_proc_shutdown }
@

