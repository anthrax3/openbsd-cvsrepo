head	1.23;
access;
symbols
	OPENBSD_6_1:1.23.0.8
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.22.0.6
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.10
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.8
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.20
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.18
	OPENBSD_5_0:1.20.0.16
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.14
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.12
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.8
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.10
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.6
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.4
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.2
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.19.0.6
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.4
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.15.0.6
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	OPENBSD_2_6:1.12.0.6
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.4
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2015.11.19.19.48.27;	author tedu;	state Exp;
branches;
next	1.22;
commitid	yZnAp5ubIOGqXkTj;

1.22
date	2015.01.16.06.40.16;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	Uu5nFG3wCl0LACBb;

1.21
date	2012.09.17.17.36.13;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2007.11.25.08.26.59;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.27.18.09.52;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.10.07.54.44;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.04.18.30.05;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.16.21.28.01;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.23.06.02.59;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.04.14.23.43;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	98.06.27.01.45.47;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.06.12.12.17.08;	author d;	state Exp;
branches;
next	1.10;

1.10
date	98.05.18.12.25.12;	author art;	state Exp;
branches;
next	1.9;

1.9
date	97.11.13.08.21.55;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.07.06.03.54.06;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.01.18.02.24.18;	author briggs;	state Exp;
branches;
next	1.6;

1.6
date	96.10.23.22.37.59;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.07.07.22.02.21;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	96.06.29.17.06.54;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.40.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.55.12;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@lexer fixes to work with new flex. from Serguey Parkhomovsky
@
text
@%{
/*	$OpenBSD: scan.l,v 1.22 2015/01/16 06:40:16 deraadt Exp $	*/
/*	$NetBSD: scan.l,v 1.13 1997/02/02 21:12:37 thorpej Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratories.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)scan.l	8.1 (Berkeley) 6/6/93
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "config.h"
#include "y.tab.h"

int	yyline;
const char *yyfile;
const char *lastfile;

/*
 * Data for returning to previous files from include files.
 */
struct incl {
	struct	incl *in_prev;	/* previous includes in effect, if any */
	YY_BUFFER_STATE in_buf;	/* previous lex state */
	const char *in_fname;	/* previous file name */
	int	in_lineno;	/* previous line number */
	int	in_ateof;	/* token to insert at EOF */
};
static struct incl *incl;
static int endinclude(void);

%}

%option noyywrap

PATH	[A-Za-z_0-9]*[./][-A-Za-z_0-9./\$\{\}]*
WORD	[A-Za-z_][-A-Za-z_0-9]*

%%
		/* Local variables for yylex() */
		int tok;

and		return AND;
at		return AT;
attach		return ATTACH;
build		return BUILD;
compile-with	return COMPILE_WITH;
config		return CONFIG;
define		return DEFINE;
defopt		return DEFOPT;
device		return DEVICE;
disable		return DISABLE;
enable		return ENABLE;
dumps		return DUMPS;
file		return XFILE;
flags		return FLAGS;
include		return INCLUDE;
machine		return XMACHINE;
major		return MAJOR;
makeoptions	return MAKEOPTIONS;
makeoption	return MAKEOPTIONS;
maxpartitions	return MAXPARTITIONS;
maxusers	return MAXUSERS;
minor		return MINOR;
needs-count	return NEEDS_COUNT;
needs-flag	return NEEDS_FLAG;
object		return XOBJECT;
on		return ON;
options		return OPTIONS;
option		return OPTIONS;
pseudo-device	return PSEUDO_DEVICE;
root		return ROOT;
source		return SOURCE;
swap		return SWAP;
with		return WITH;
rmoption	return RMOPTIONS;
rmoptions	return RMOPTIONS;

{PATH}		{
		yylval.str = intern(yytext);
		return PATHNAME;
	}
{WORD}		{
		yylval.str = intern(yytext);
		return WORD;
	}

\"\"		{
		yylval.str = intern("");
		return EMPTY;
	}
\"([^"\n]|\\\")+ {
		tok = input();  /* eat closing quote */
		yylval.str = intern(yytext + 1);
		if (tok != '"') {
			error("closing quote missing");
			unput(tok);
		}
		return WORD;
	}
0[0-7]*	{
		yylval.val = strtol(yytext, NULL, 8);
		return NUMBER;
	}
0[xX][0-9a-fA-F]+ {
		yylval.val = strtoul(yytext + 2, NULL, 16);
		return NUMBER;
	}
[1-9][0-9]* {
		yylval.val = strtol(yytext, NULL, 10);
		return NUMBER;
	}
\n[ \t] {
		/*
		 * Note: newline followed by whitespace is always a
		 * continuation of the previous line, so do NOT
		 * return a token in this case.
		 */
		yyline++;
	}
\n	{
		yyline++;
		return '\n';
	}
#.*	{ /* ignored (comment) */; }
[ \t]+	{ /* ignored (white space) */; }
.	{ return yytext[0]; }
<<EOF>> {
		if (incl == NULL)
			return YY_NULL;
		tok = endinclude();
		if (tok)
			return tok;
		/* otherwise continue scanning */
	}

%%

/*
 * Open the "main" file (conffile).
 */
int
firstfile(fname)
	const char *fname;
{

	if ((yyin = fopen(fname, "r")) == NULL)
		return (-1);
	yyfile = conffile = fname;
	yyline = 1;
	return (0);
}

/*
 * Open the named file for inclusion at the current point.  Returns 0 on
 * success (file opened and previous state pushed), nonzero on failure
 * (fopen failed, complaint made).  The `ateof' parameter controls the
 * token to be inserted at the end of the include file (i.e. ENDFILE).
 * If ateof == 0 then nothing is inserted.
 */
int
include(fname, ateof)
	const char *fname;
	int ateof;
{
	FILE *fp;
	struct incl *in;
	char *s;
	static int havedirs;

	if (havedirs == 0) {
		havedirs = 1;
		setupdirs();
	}

	/* Kludge until files.* files are fixed. */
	if (strncmp(fname, "../../../", 9) == 0)
		fname += 9;

	s = (*fname == '/') ? strdup(fname) : sourcepath(fname);
	if ((fp = fopen(s, "r")) == NULL) {
		error("cannot open %s for reading: %s\n", s, strerror(errno));
		free(s);
		return (-1);
	}
	in = emalloc(sizeof *in);
	in->in_prev = incl;
	in->in_buf = YY_CURRENT_BUFFER;
	in->in_fname = yyfile;
	in->in_lineno = yyline;
	in->in_ateof = ateof;
	incl = in;
	yy_switch_to_buffer(yy_create_buffer(fp, YY_BUF_SIZE));
	yyfile = intern(s);
	yyline = 1;
	free(s);
	return (0);
}

/*
 * Terminate the most recent inclusion.
 */
static int
endinclude()
{
	struct incl *in;
	int ateof;

	if ((in = incl) == NULL)
		panic("endinclude");
	incl = in->in_prev;
	lastfile = yyfile;
	yy_delete_buffer(YY_CURRENT_BUFFER);
	(void)fclose(yyin);
	yy_switch_to_buffer(in->in_buf);
	yyfile = in->in_fname;
	yyline = in->in_lineno;
	ateof  = in->in_ateof;
	free(in);

	return (ateof);
}

/*
 * Return the current line number.  If yacc has looked ahead and caused
 * us to consume a newline, we have to subtract one.  yychar is yacc's
 * token lookahead, so we can tell.
 */
int
currentline()
{
	extern int yychar;

	return (yyline - (yychar == '\n'));
}
@


1.22
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.21 2012/09/17 17:36:13 espie Exp $	*/
d70 1
a70 1
#define	yywrap() 1
d72 1
a72 1
%}
@


1.21
log
@tedu lint tendrils through config internals.
also mark some known targets as .PHONY

okay miod@@
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.20 2007/11/25 08:26:59 deraadt Exp $	*/
a44 1
#include <sys/param.h>
@


1.20
log
@Extend the "file" directive to accept multiple pathnames seperated by '|'.
If more than one path is provided, access() them to choose which one should
be used, while parsing for ${name} expansions... currently limited to
MACHINE_ARCH
ok miod
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.19 2006/04/27 18:09:52 espie Exp $	*/
a86 1
lint-with	return LINT_WITH;
@


1.19
log
@lint(1) support in config:
- LINTS variables to hold the list of *.ln files.
- OBJS derives from it, since it can contain more files.
- add set of explicit rules for each .ln file.
- add a lint-with keyword that duplicates compile-with functionality
to special-case linting instead of compilation.

Full linting is dependent on LINT_* macros in the arch dependent template
files.

As is, doesn't break normal build. Just creates larger Makefiles.

Review/ok miod@@, cloder@@, deraadt@@
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.18 2006/03/10 07:54:44 otto Exp $	*/
d75 1
a75 1
PATH	[A-Za-z_0-9]*[./][-A-Za-z_0-9./]*
@


1.18
log
@Avoid printing the whole file in the error message on missing trailing "
Found by by mpech@@; ok mpech@@ ray@@ miod@@
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.17 2004/01/04 18:30:05 deraadt Exp $	*/
d87 1
@


1.17
log
@knf and lint
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.16 2003/06/02 23:36:52 millert Exp $	*/
d133 1
d135 1
a135 1
			error("closing quote missing\n");
a137 1
		yylval.str = intern(yytext + 1);
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.15 2002/02/16 21:28:01 millert Exp $	*/
d115 2
a116 2
rmoption        return RMOPTIONS;
rmoptions       return RMOPTIONS;
@


1.15
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.14 2001/01/23 06:02:59 angelos Exp $	*/
d26 1
a26 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Allow entries like "foo at bar enable", which override previous
entries like "foo bar bar disable"; useful for kernel config lamers
like myself who don't like to use 'config -e' or 'bsd -c' to manually
enable USB. Tested with uhci/ohci on i386.
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.13 2000/01/04 14:23:43 angelos Exp $	*/
d73 1
a73 1
static int endinclude __P((void));
@


1.13
log
@Add rmoption/rmoptions; useful for people who want a slightly
modified version of GENERIC.
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.12 1998/06/27 01:45:47 deraadt Exp $	*/
d96 1
@


1.12
log
@No way, not yet. You did not even test, did you, david
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.10 1998/05/18 12:25:12 art Exp $	*/
d118 2
@


1.11
log
@warn when ../../../ appears in include directive, since includes are relative to srcdir and kludge code is still active.
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
a210 7
	/* XXX Kludge until files.* files are fixed. */
	if (strncmp(fname, "../../../", 9) == 0) {
		error("leading ../../../ should be removed from include \"%s\"", fname);
		errors--;
		fname += 9;
	}

d215 4
@


1.10
log
@understand makeoption as makeoptions
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.9 1997/11/13 08:21:55 deraadt Exp $	*/
d211 7
a221 4

	/* Kludge until files.* files are fixed. */
	if (strncmp(fname, "../../../", 9) == 0)
		fname += 9;
@


1.9
log
@from mycroft;
Allow options and makeoptions to take an empty string as a value.
Add `object' and `library' keywords to pull in precompiled .o and .a files.
Syntax is like the `file' keyword; e.g.:
object  arch/i386/i386/mumble.o         [mumble] [needs-flag]
Largely from Michael Richardson in PR 3833, with some changes by me.
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.8 1997/07/06 03:54:06 downsj Exp $	*/
d103 1
@


1.8
log
@Add defopt support, from NetBSD; thorpej (I think, I don't have the commit
message).
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.7 1997/01/18 02:24:18 briggs Exp $	*/
d108 1
d127 4
@


1.7
log
@Sync. with current NetBSD--keeping local changes.
@
text
@d2 2
a3 2
/*	$OpenBSD: scan.l,v 1.6 1996/10/23 22:37:59 niklas Exp $	*/
/*	$NetBSD: scan.l,v 1.11 1996/11/13 18:42:18 gwr Exp $	*/
d93 1
@


1.6
log
@Merge of NetBSD 961020.  Includes flexible build/source dir specs
@
text
@d2 2
a3 2
/*	$OpenBSD: scan.l,v 1.5 1996/07/07 22:02:21 maja Exp $	*/
/*	$NetBSD: scan.l,v 1.7 1996/08/31 21:15:13 mycroft Exp $	*/
a61 2
int	include __P((const char *, int));

d70 1
a70 1
	int	in_preveof;	/* previous eoftoken */
d73 1
a73 2
static int eoftoken;		/* current EOF token */
static void endinclude __P((void));
d79 1
a79 1
PATH	[-/A-Za-z0-9_.]*[./][-/A-Za-z0-9_.]*
d83 2
d86 38
a123 36
		/* plain keywords */
and		{ return AND; }
at		{ return AT; }
attach		{ return ATTACH; }
build		{ return BUILD; }
compile-with	{ return COMPILE_WITH; }
config		{ return CONFIG; }
define		{ return DEFINE; }
device		{ return DEVICE; }
disable		{ return DISABLE; }
dumps		{ return DUMPS; }
flags		{ return FLAGS; }
file		{ return XFILE; }
include		{ return INCLUDE; }
machine		{ return XMACHINE; }
major		{ return MAJOR; }
makeoptions	{ return MAKEOPTIONS; }
maxusers	{ return MAXUSERS; }
maxpartitions	{ return MAXPARTITIONS; }
minor		{ return MINOR; }
on		{ return ON; }
options		{ return OPTIONS; }
option		{ return OPTIONS; }
"pseudo-device"	{ return PSEUDO_DEVICE; }
root		{ return ROOT; }
source		{ return SOURCE; }
swap		{ return SWAP; }
with		{ return WITH; }

		/* keywords with values */
needs-count	{ yylval.val = FI_NEEDSCOUNT; return FFLAG; }
needs-flag	{ yylval.val = FI_NEEDSFLAG; return FFLAG; }

		/* all the rest */
{PATH}		{ yylval.str = intern(yytext); return PATHNAME; }
{WORD}		{ yylval.str = intern(yytext); return WORD; }
d125 6
a130 1
\"([^"]|\\\")*/\" {
a131 1
		(void)input();	/* eat closing quote */
d146 6
a151 1
\n/[ \t] {
d159 1
a159 1
[ \t]*	{ /* ignored (white space) */; }
d162 6
a167 7
		int tok;

		tok = eoftoken;
		eoftoken = YY_NULL;
		if (incl != NULL)
			endinclude();
		return (tok);
a183 1
	eoftoken = YY_NULL;
d191 2
a192 2
 * token to be returned at the end of the include file (typically '\n'
 * or ENDFILE).
d199 2
a200 2
	register FILE *fp;
	register struct incl *in;
d202 6
d224 1
a224 1
	in->in_preveof = eoftoken;
a228 1
	eoftoken = ateof;
d236 1
a236 1
static void
d239 2
a240 1
	register struct incl *in;
d251 1
a251 1
	eoftoken = in->in_preveof;
d253 2
@


1.5
log
@Add support for allowing disabled devices in a config file. e.g.
ep0 at isa? disable port ? irq ?
disable must be placed before any attribute for the device. /moj
@
text
@d2 2
a3 2
/*	$OpenBSD: scan.l,v 1.4 1996/06/29 17:06:54 deraadt Exp $	*/
/*	$NetBSD: scan.l,v 1.4 1996/03/17 06:29:35 cgd Exp $	*/
d91 1
d112 1
a113 1
vector		{ return VECTOR; }
a116 2
config-dependent { yylval.val = FI_CONFIGDEP; return FFLAG; }
device-driver	{ yylval.val = FI_DRIVER; return FFLAG; }
d193 1
d195 8
a202 3
	if ((fp = fopen(fname, "r")) == NULL) {
		error("cannot open %s for reading: %s\n",
		    fname, strerror(errno));
d213 1
a213 1
	yyfile = intern(fname);
d216 1
@


1.4
log
@make "option" an alias for "options"
@
text
@d2 1
a2 1
/*	$OpenBSD: scan.l,v 1.2 1996/03/25 15:55:12 niklas Exp $	*/
d95 1
@


1.3
log
@sync to netbsd 960418
@
text
@d107 1
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d2 2
a3 2
/*	$OpenBSD$	*/
/*	$NetBSD: scan.l,v 1.2 1996/03/03 17:28:34 thorpej Exp $	*/
d5 1
a5 1
/* 
d90 1
d111 1
@


1.1
log
@Initial revision
@
text
@d2 3
a46 1
 *	$Id: scan.l,v 1.1 1995/04/28 06:55:21 cgd Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
