head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.16
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.12
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.8
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.10
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.8
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.6
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.4
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.18.0.8
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.6
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.4
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2013.11.23.17.38.15;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.02.22.20.49;	author edd;	state Exp;
branches;
next	1.18;

1.18
date	2009.12.10.22.07.19;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.03.21.42.16;	author beck;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.22.11.18.53;	author maja;	state Exp;
branches;
next	1.14;

1.14
date	2007.03.20.04.00.32;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.08.20.59.28;	author mcbride;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.04.18.30.05;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.04.00.47.01;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.21.19.03;	author maja;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.01.20.16.15;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.23.13.30.24;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.23.01.19;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.10.11.23;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.04.20.42.12;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.31.22.41.32;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.27.21.10.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.08.23.23.37;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.10.04.20.00.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.20
log
@unsigned char casts for ctype
ok jca
@
text
@/*	$OpenBSD: cmd.c,v 1.19 2011/10/02 22:20:49 edd Exp $ */

/*
 * Copyright (c) 1999-2001 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/device.h>
#include <sys/time.h>

#include <ctype.h>
#include <limits.h>
#include <nlist.h>
#include <stdio.h>
#include <string.h>

#include "misc.h"
#define	CMD_NOEXTERN
#include "cmd.h"
#include "ukc.h"
#include "exec.h"

extern int ukc_mod_kernel;
static void int_variable_adjust(const cmd_t *, int, const char *);

/* Our command table */
cmd_table_t cmd_table[] = {
	{"help",   Xhelp,	"",		"Command help list"},
	{"add",	   Xadd,	"dev",		"Add a device"},
	{"base",   Xbase,	"8|10|16",	"Base on large numbers"},
	{"change", Xchange,	"devno|dev",	"Change device"},
	{"disable",Xdisable,	"attr val|devno|dev",	"Disable device"},
	{"enable", Xenable,	"attr val|devno|dev",	"Enable device"},
	{"find",   Xfind,	"devno|dev",	"Find device"},
	{"list",   Xlist,	"",		"List configuration"},
	{"lines",  Xlines,	"count",	"# of lines per page"},
	{"show",   Xshow,	"[attr [val]]",	"Show attribute"},
	{"exit",   Xexit,	"",		"Exit, without saving changes"},
	{"quit",   Xquit,	"",		"Quit, saving current changes"},
	{"timezone", Xtimezone,	"[mins [dst]]",	"Show/change timezone"},
	{"bufcachepercent", Xbufcachepct, "[number]",
	 "Show/change BUFCACHEPERCENT"},
	{"nkmempg", Xnkmempg,	"[number]",	"Show/change NKMEMPAGES"},
	{NULL,     NULL,	NULL,		NULL}
};

int
Xhelp(cmd_t *cmd)
{
	cmd_table_t *cmd_table = cmd->table;
	int i;

	/* Hmm, print out cmd_table here... */
	for (i = 0; cmd_table[i].cmd != NULL; i++)
		printf("\t%-16s%-20s%s\n", cmd_table[i].cmd,
		    cmd_table[i].opt, cmd_table[i].help);
	return (CMD_CONT);
}

int
Xadd(cmd_t *cmd)
{
	short unit, state;
	int a;

	if (strlen(cmd->args) == 0)
		printf("Dev expected\n");
	else if (device(cmd->args, &a, &unit, &state) == 0)
		add(cmd->args, a, unit, state);
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xbase(cmd_t *cmd)
{
	int a;

	if (strlen(cmd->args) == 0)
		printf("8|10|16 expected\n");
	else if (number(&cmd->args[0], &a) == 0) {
		if (a == 8 || a == 10 || a == 16) {
			base = a;
		} else {
			printf("8|10|16 expected\n");
		}
	} else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xchange(cmd_t *cmd)
{
	short unit, state;
	int a;

	if (strlen(cmd->args) == 0)
		printf("DevNo or Dev expected\n");
	else if (number(cmd->args, &a) == 0)
		change(a);
	else if (device(cmd->args, &a, &unit, &state) == 0)
		common_dev(cmd->args, a, unit, state, UC_CHANGE);
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xdisable(cmd_t *cmd)
{
	short unit, state;
	int a;

	if (strlen(cmd->args) == 0)
		printf("Attr, DevNo or Dev expected\n");
	else if (attr(cmd->args, &a) == 0)
		common_attr(cmd->args, a, UC_DISABLE);
	else if (number(cmd->args, &a) == 0)
		disable(a);
	else if (device(cmd->args, &a, &unit, &state) == 0)
		common_dev(cmd->args, a, unit, state, UC_DISABLE);
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xenable(cmd_t *cmd)
{
	short unit, state;
	int a;

	if (strlen(cmd->args) == 0)
		printf("Attr, DevNo or Dev expected\n");
	else if (attr(cmd->args, &a) == 0)
		common_attr(cmd->args, a, UC_ENABLE);
	else if (number(cmd->args, &a) == 0)
		enable(a);
	else if (device(cmd->args, &a, &unit, &state) == 0)
		common_dev(cmd->args, a, unit, state, UC_ENABLE);
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xfind(cmd_t *cmd)
{
	short unit, state;
	int a;

	if (strlen(cmd->args) == 0)
		printf("DevNo or Dev expected\n");
	else if (number(cmd->args, &a) == 0)
		pdev(a);
	else if (device(cmd->args, &a, &unit, &state) == 0)
		common_dev(cmd->args, a, unit, state, UC_FIND);
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xlines(cmd_t *cmd)
{
	int a;

	if (strlen(cmd->args) == 0)
		printf("Argument expected\n");
	else if (number(cmd->args, &a) == 0)
		lines = a;
	else
		printf("Unknown argument\n");
	return (CMD_CONT);
}

int
Xlist(cmd_t *cmd)
{
	struct cfdata *cd;
	int	i = 0;

	cnt = 0;
	cd = get_cfdata(0);

	while (cd->cf_attach != 0) {
		if (more())
			break;
		pdev(i++);
		cd++;
	}

	if (nopdev == 0) {
		while (i <= (totdev+maxpseudo)) {
			if (more())
				break;
			pdev(i++);
		}
	}
	cnt = -1;
	return (CMD_CONT);
}

int
Xshow(cmd_t *cmd)
{
	if (strlen(cmd->args) == 0)
		show();
	else
		show_attr(&cmd->args[0]);
	return (CMD_CONT);
}

int
Xquit(cmd_t *cmd)
{
	/* Nothing to do here */
	return (CMD_SAVE);
}

int
Xexit(cmd_t *cmd)
{
	/* Nothing to do here */
	return (CMD_EXIT);
}

int
Xtimezone(cmd_t *cmd)
{
	struct timezone *tz;
	int	num;
	char	*c;

	ukc_mod_kernel = 1;
	tz = (struct timezone *)adjust((caddr_t)(nl[TZ_TZ].n_value));

	if (strlen(cmd->args) == 0) {
		printf("timezone = %d, dst = %d\n",
		    tz->tz_minuteswest, tz->tz_dsttime);
	} else {
		if (number(cmd->args, &num) == 0) {
			tz->tz_minuteswest = num;
			c = cmd->args;
			while ((*c != '\0') && !isspace((unsigned char)*c))
				c++;
			while (isspace((unsigned char)*c))
				c++;
			if (strlen(c) != 0 && number(c, &num) == 0)
				tz->tz_dsttime = num;
			printf("timezone = %d, dst = %d\n",
			    tz->tz_minuteswest, tz->tz_dsttime);
		} else
			printf("Unknown argument\n");
	}
	return (CMD_CONT);
}

void
int_variable_adjust(const cmd_t *cmd, int idx, const char *name)
{
	int *v, num;

	if (nl[idx].n_type != 0) {
		ukc_mod_kernel = 1;

		v = (int *)adjust((caddr_t)(nl[idx].n_value));

		if (strlen(cmd->args) == 0) {
			printf("%s = %d\n", name, *v);
		} else {
			if (number(cmd->args, &num) == 0) {
				*v = num;
				printf("%s = %d\n", name, *v);
			} else
				printf("Unknown argument\n");
		}
	} else
		printf("This kernel does not support modification of %s.\n",
		    name);
}

int
Xbufcachepct(cmd_t *cmd)
{
	int_variable_adjust(cmd, I_BUFCACHEPCT, "bufcachepercent");
	return (CMD_CONT);
}

int
Xnkmempg(cmd_t *cmd)
{
	int_variable_adjust(cmd, I_NKMEMPG, "nkmempages");
	return (CMD_CONT);
}
@


1.19
log
@Fix some minor things in config(8):
 * As haesbaert suggests, correctly order include files.
 * Found some old style function defs. Updated.
 * Found a prototype inside a function. Moved.

OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.18 2009/12/10 22:07:19 kettenis Exp $ */
d267 1
a267 1
			while ((*c != '\0') && !isspace(*c))
d269 1
a269 1
			while (isspace(*c))
@


1.18
log
@Now that the old SysV SHM size limits global variables are gone, remove
support for setting them from config(8).
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.17 2009/10/27 23:59:51 deraadt Exp $ */
d30 1
a31 1
#include <stdio.h>
d34 1
d36 1
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.16 2009/06/03 21:42:16 beck Exp $ */
a61 2
	{"shmseg", Xshmseg,	"[number]",	"Show/change SHMSEG"},
	{"shmmaxpgs", Xshmmaxpgs,"[number]",	"Show/change SHMMAXPGS"},
a313 14
	return (CMD_CONT);
}

int
Xshmseg(cmd_t *cmd)
{
	int_variable_adjust(cmd, I_SHMSEG, "shmseg");
	return (CMD_CONT);
}

int
Xshmmaxpgs(cmd_t *cmd)
{
	int_variable_adjust(cmd, I_SHMMAXPGS, "shmmaxpgs");
@


1.16
log
@change "cachepct" to "bufcachepercent" so it is the same
as the variable and the similar sysctl
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.15 2008/11/22 11:18:53 maja Exp $ */
a25 4

#ifndef LINT
static char rcsid[] = "$OpenBSD: cmd.c,v 1.15 2008/11/22 11:18:53 maja Exp $";
#endif
@


1.15
log
@Make enable selected by attribute work.
Reported by John Lloyd  j at bitminer dot ca. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.14 2007/03/20 04:00:32 tedu Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.14 2007/03/20 04:00:32 tedu Exp $";
d63 2
a64 1
	{"cachepct", Xbufcachepct, "[number]",	"Show/change BUFCACHEPERCENT"},
d79 1
a79 1
		printf("\t%-12s%-20s%s\n", cmd_table[i].cmd,
@


1.14
log
@remove some bogus *p tests from charles longeau
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.13 2004/06/08 20:59:28 mcbride Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.13 2004/06/08 20:59:28 mcbride Exp $";
d161 1
a161 1
		common_attr(cmd->args, a, UC_DISABLE);
@


1.13
log
@Remove 'nmbuclust' setting of NMBCLUSTERS. They don't exist anymore.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.12 2004/01/04 18:30:05 deraadt Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.12 2004/01/04 18:30:05 deraadt Exp $";
d272 1
a272 1
			while ((*c != '\0') && isspace(*c))
@


1.12
log
@knf and lint
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.11 2004/01/04 00:47:01 deraadt Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.11 2004/01/04 00:47:01 deraadt Exp $";
a62 1
	{"nmbclust", Xnmbclusters, "[number]",	"Show/change NMBCLUSTERS"},
a305 7
}

int
Xnmbclusters(cmd_t *cmd)
{
	int_variable_adjust(cmd, I_NMBCLUSTERS, "nmbclusters");
	return (CMD_CONT);
@


1.11
log
@Wall and spacing, I am hunting bugs
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.10 2003/06/02 21:19:03 maja Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.10 2003/06/02 21:19:03 maja Exp $";
d80 1
a80 1
		       cmd_table[i].opt, cmd_table[i].help);
@


1.10
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.9 2002/06/01 20:16:15 deraadt Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.9 2002/06/01 20:16:15 deraadt Exp $";
d305 1
a305 1
		printf("This kernel does not support modification of %s.\n", 
@


1.9
log
@missing return; jason@@ackley.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.8 2002/03/23 13:30:24 espie Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.8 2002/03/23 13:30:24 espie Exp $";
@


1.8
log
@small cleanups:
ansi prototypes,
help formating,
common code to handle integer parameters.

Let SystemV shm parameters be settable.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.7 2002/02/17 23:01:19 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.7 2002/02/17 23:01:19 maja Exp $";
d346 1
@


1.7
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the userland part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.6 2001/12/05 10:11:23 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.6 2001/12/05 10:11:23 deraadt Exp $";
d51 1
d55 4
a58 4
	{"help",   Xhelp,	"\t\t",		"Command help list"},
	{"add",	   Xadd,	"dev\t\t",	"Add a device"},
	{"base",   Xbase,	"8|10|16\t\t",	"Base on large numbers"},
	{"change", Xchange,	"devno|dev\t",	"Change device"},
d61 12
a72 10
	{"find",   Xfind,	"devno|dev\t",	"Find device"},
	{"list",   Xlist,	"\t\t",		"List configuration"},
	{"lines",  Xlines,	"count\t\t",	"# of lines per page"},
	{"show",   Xshow,	"[attr [val]]\t",	"Show attribute"},
	{"exit",   Xexit,	"\t\t",		"Exit, without saving changes"},
	{"quit",   Xquit,	"\t\t",		"Quit, saving current changes"},
	{"timezone", Xtimezone,	"[mins [dst]]\t",	"Show/change timezone"},
	{"nmbclust", Xnmbclusters, "[number]\t",	"Show/change NMBCLUSTERS"},
	{"cachepct", Xbufcachepct, "[number]\t",	"Show/change BUFCACHEPERCENT"},
	{"nkmempg", Xnkmempg,	"[number]\t",	"Show/change NKMEMPAGES"},
d77 1
a77 2
Xhelp(cmd)
	cmd_t *cmd;
d84 1
a84 1
		printf("\t%s\t%s\t%s\n", cmd_table[i].cmd,
d90 1
a90 2
Xadd(cmd)
	cmd_t *cmd;
d105 1
a105 2
Xbase(cmd)
	cmd_t *cmd;
d123 1
a123 2
Xchange(cmd)
	cmd_t *cmd;
d140 1
a140 2
Xdisable(cmd)
	cmd_t *cmd;
d159 1
a159 2
Xenable(cmd)
	cmd_t *cmd;
d178 1
a178 2
Xfind(cmd)
	cmd_t *cmd;
d195 1
a195 2
Xlines(cmd)
	cmd_t *cmd;
d209 1
a209 2
Xlist(cmd)
	cmd_t *cmd;
d236 1
a236 2
Xshow(cmd)
	cmd_t *cmd;
d246 1
a246 2
Xquit(cmd)
	cmd_t *cmd;
d253 1
a253 2
Xexit(cmd)
	cmd_t *cmd;
d260 1
a260 2
Xtimezone(cmd)
	cmd_t *cmd;
d289 3
a291 3
int
Xnmbclusters(cmd)
	cmd_t *cmd;
d293 1
a293 1
	int *pnmbclusters,num;
d295 1
a295 1
	if (nl[I_NMBCLUSTERS].n_type != 0) {
d298 1
a298 2
		pnmbclusters = (int *)adjust((caddr_t)(nl[I_NMBCLUSTERS].
	                n_value));
d301 1
a301 1
			printf("nmbclusters = %d\n", *pnmbclusters);
d304 2
a305 2
				*pnmbclusters = num;
				printf("nmbclusters = %d\n", *pnmbclusters);
d310 3
a312 2
		printf("\
This kernel does not support modification of NMBCLUSTERS.\n");
d314 4
d322 1
a322 2
Xbufcachepct(cmd)
	cmd_t *cmd;
d324 3
a326 1
	int *pbufcachepct,num;
d328 6
a333 18
	if (nl[I_BUFCACHEPCT].n_type != 0) {
		ukc_mod_kernel = 1;

		pbufcachepct = (int *)adjust((caddr_t)(nl[I_BUFCACHEPCT].
		                n_value));

		if (strlen(cmd->args) == 0) {
			printf("bufcachepercent = %d\n", *pbufcachepct);
		} else {
			if (number(cmd->args, &num) == 0) {
				*pbufcachepct = num;
				printf("bufcachepercent = %d\n", *pbufcachepct);
			} else
				printf("Unknown argument\n");
		}
	} else
		printf("\
This kernel does not support modification of BUFCACHEPERCENT.\n");
d335 4
d343 1
a343 2
Xnkmempg(cmd)
	cmd_t *cmd;
d345 1
a345 22
	int *pnkmempg,num;

	if (nl[I_NKMEMPG].n_type != 0) {
		ukc_mod_kernel = 1;

		pnkmempg = (int *)adjust((caddr_t)(nl[I_NKMEMPG].
			    n_value));

		if (strlen(cmd->args) == 0) {
			printf("nkmempages = %d\n", *pnkmempg);
		} else {
			if (number(cmd->args, &num) == 0) {
				*pnkmempg = num;
				printf("nkmempages = %d\n", *pnkmempg);
			} else
				printf("Unknown argument\n");
		}
	} else
		printf("\
This kernel does not support modification of NKMEMPAGES.\n");

	return (CMD_CONT);
@


1.6
log
@more free KNF from maja, though this was hard to do
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.5 2001/02/04 20:42:12 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.5 2001/02/04 20:42:12 maja Exp $";
d67 3
d297 83
@


1.5
log
@Add support for pseudo devices. This is done by adding more information
in ioconf.c. The only thing that can be done with pseudo devices is
changing the number of created units. -moj ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.4 2001/01/31 22:41:32 maja Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.4 2001/01/31 22:41:32 maja Exp $";
d88 1
a89 1
	short unit, state;
a115 1

d123 1
a124 1
	short unit, state;
a133 1
	
d141 1
a142 1
	short unit, state;
a153 1

d161 1
a162 1
	short unit, state;
a173 1

d181 1
a182 1
	short unit, state;
a191 1

d214 1
a215 1
	struct cfdata *cd;
a217 1

d220 1
a220 1
	while(cd->cf_attach != 0) {
d223 1
a223 1
		pdev(i++);	  
d228 1
a228 1
		while(i <= (totdev+maxpseudo)) {
a233 1

a234 1

a245 1

a273 1

d277 1
a277 1
		printf("timezone = %d, dst = %d\n", 
d282 1
a282 1
			c = cmd->args; 
d289 1
a289 1
			printf("timezone = %d, dst = %d\n", 
d291 1
a291 1
		} else 
a293 1

@


1.4
log
@Dont write kernel if nothing has changed. ok @@deraadt. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.3 2000/02/27 21:10:01 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.3 2000/02/27 21:10:01 deraadt Exp $";
d231 8
@


1.3
log
@-Wall on alpha
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.2 2000/01/08 23:23:37 d Exp $ */
d4 1
a4 1
 * Copyright (c) 1999 Mats O Jansson.  All rights reserved.
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.2 2000/01/08 23:23:37 d Exp $";
d50 2
d273 2
@


1.2
log
@Allow UKC to change tz with 'timezone' command.
@
text
@d1 1
a1 1
/*	$OpenBSD: cmd.c,v 1.1 1999/10/04 20:00:50 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: cmd.c,v 1.1 1999/10/04 20:00:50 deraadt Exp $";
d36 3
d43 1
a43 2
#include <sys/device.h>
#include <sys/time.h>
d48 1
d268 1
d271 2
a272 2
	struct timezone *tz = 
	    (struct timezone *)adjust((caddr_t)nl[TZ_TZ].n_value);
@


1.1
log
@config -e support; ukc from maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD$";
d36 1
d41 1
d61 1
d259 31
@

