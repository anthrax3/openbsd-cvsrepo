head	1.12;
access;
symbols
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.07.05.21.33.36;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2011.10.02.22.20.49;	author edd;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.19.20.07.58;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.26.17.00.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.28.04.55.07;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.21.19.03;	author maja;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.12.21.04.04;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.06.51.42;	author mpech;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.05.10.11.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.30.16.06.34;	author aaron;	state Exp;
branches;
next	1.1;

1.1
date	99.10.04.20.00.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@More a.out files leave the party.
@
text
@/*	$OpenBSD: exec_aout.c,v 1.11 2011/10/02 22:20:49 edd Exp $ */

/*
 * Copyright (c) 1999 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/exec.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <nlist.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "config.h"
#include "ukc.h"

caddr_t		aout_p, aout_r;
unsigned long	aout_psz = 0, aout_rsz = 0;
struct exec	aout_ex;
unsigned long	aout_adjvalue = 0;
unsigned long	aout_datashift = 0;

void
aout_computeadj(void)
{
	aout_adjvalue = (unsigned long)aout_p +
	    N_TXTOFF(aout_ex) - nl[P_KERNEL_TEXT].n_value;

	/*
	 * On m68k a.out ZMAGIC kernel, kernel_text begins _after_ the a.out
	 * header, so compensate for it.
	 */
	if (nl[P_KERNEL_TEXT].n_value & (__LDPGSZ - 1))
		aout_adjvalue += sizeof(aout_ex);

	/*
	 * On NMAGIC kernel, we need an extra relocation for the data area
	 */
	aout_datashift = (N_DATADDR(aout_ex) - N_TXTADDR(aout_ex)) -
	    aout_ex.a_text;
}

/* ``kernel'' vaddr -> in-memory address */
caddr_t
aout_adjust(caddr_t x)
{

	if (aout_adjvalue == 0)
		aout_computeadj();

	if (aout_datashift != 0 &&
	    (unsigned long)x >= N_DATADDR(aout_ex) - N_TXTADDR(aout_ex))
		x -= aout_datashift;

	return (x + aout_adjvalue);
}

/* in-memory address -> ``kernel'' vaddr */
caddr_t
aout_readjust(caddr_t x)
{
	caddr_t y;

#if 0	/* unnecessary, aout_adjust() is always invoked first */
	if (aout_adjvalue == 0)
		aout_computeadj();
#endif

	y = x - aout_adjvalue;
	if (aout_datashift != 0 &&
	    (unsigned long)y >= N_TXTADDR(aout_ex) + aout_ex.a_text)
		y += aout_datashift;

	return (y);
}

int
aout_check(char *file)
{
	int fd, ret = 1;

	if ((fd = open(file, O_RDONLY | O_EXLOCK, 0)) < 0)
		return (0);
	if (read(fd, (char *)&aout_ex, sizeof(aout_ex)) != sizeof(aout_ex))
		ret = 0;
	if (ret) {
		if (N_BADMAG(aout_ex))
			ret = 0;
	}

	close(fd);
	return (ret);
}

void
aout_loadkernel(char *file)
{
	int fd;
	off_t cur, end;

	if ((fd = open(file, O_RDONLY | O_EXLOCK, 0)) < 0)
		err(1, "%s", file);

	if (read(fd, (char *)&aout_ex, sizeof(aout_ex)) != sizeof(aout_ex))
		errx(1, "can't read a.out header");

	if (N_BADMAG(aout_ex))
		errx(1, "bad a.out magic");

	lseek(fd, (off_t)0, SEEK_SET);

	aout_psz = (int)(aout_ex.a_text + N_TXTOFF(aout_ex) +
	    aout_ex.a_data);

	aout_p = emalloc(aout_psz);

	if (read(fd, aout_p, aout_psz) != aout_psz)
		errx(1, "can't read a.out text and data");

	cur = lseek(fd, (off_t)0, SEEK_CUR);
	end = lseek(fd, (off_t)0, SEEK_END);
	(void)lseek(fd, cur, SEEK_SET);

	aout_rsz = (int)(end - cur);

	aout_r = emalloc(aout_rsz);

	if (read(fd, aout_r, aout_rsz) != aout_rsz)
		errx(1, "can't read rest of file %s", file);

	close(fd);
}

void
aout_savekernel(char *outfile)
{
	int fd;

	if ((fd = open(outfile, O_WRONLY | O_CREAT | O_TRUNC, 0755)) < 0)
		err(1, "%s", outfile);

	if (write(fd, aout_p, aout_psz) != aout_psz)
		errx(1, "can't write a.out text and data");

	if (write(fd, aout_r, aout_rsz) != aout_rsz)
		errx(1, "can't write rest of file %s", outfile);

	close(fd);
}
@


1.11
log
@Fix some minor things in config(8):
 * As haesbaert suggests, correctly order include files.
 * Found some old style function defs. Updated.
 * Found a prototype inside a function. Moved.

OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.10 2009/10/27 23:59:51 deraadt Exp $ */
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.9 2009/01/19 20:07:58 miod Exp $ */
d27 3
d34 1
a35 1
#include <stdio.h>
a36 2
#include <sys/exec.h>
#include <sys/types.h>
d84 1
a84 2
aout_readjust(x)
	caddr_t x;
d102 1
a102 2
aout_check(file)
	char *file;
@


1.9
log
@Do not forget to adjust offsets for the beginning of the data area for non
OMAGIC binaries. Found the hard way by jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.8 2003/09/26 17:00:27 deraadt Exp $ */
a25 4

#ifndef LINT
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.8 2003/09/26 17:00:27 deraadt Exp $";
#endif
@


1.8
log
@use emalloc
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.7 2003/06/28 04:55:07 deraadt Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.7 2003/06/28 04:55:07 deraadt Exp $";
d79 1
a79 1
	    (unsigned long)x >= N_DATADDR(aout_ex))
@


1.7
log
@ansi & prototype cleanup.  tested in mkr on most arch's.  ok dhartmei
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.6 2003/06/02 21:19:03 maja Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.6 2003/06/02 21:19:03 maja Exp $";
d41 1
d144 1
a144 1
	aout_p = malloc(aout_psz);
d155 1
a155 1
	aout_r = malloc(aout_rsz);
@


1.6
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.5 2003/03/12 21:04:04 miod Exp $ */
d28 1
a28 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.5 2003/03/12 21:04:04 miod Exp $";
d50 1
a50 1
aout_computeadj()
d71 1
a71 2
aout_adjust(x)
	caddr_t x;
d124 1
a124 2
aout_loadkernel(file)
	char *file;
d163 1
a163 2
aout_savekernel(outfile)
	char *outfile;
@


1.5
log
@Make config -e work correctly on the various m68k platforms, by handling
all the various a.out MAGIC correctly, and handling the mvme68k case
where kernel_text starts after the a.out header.

No functional change, no regression on other a.out arches (i386 and vax).

ok deraadt@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.4 2002/03/14 06:51:42 mpech Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d28 1
a28 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.4 2002/03/14 06:51:42 mpech Exp $";
@


1.4
log
@Remove \n from err/errx/warn/warnx().

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.3 2001/12/05 10:11:23 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.3 2001/12/05 10:11:23 deraadt Exp $";
d49 1
a49 1
int		aout_psz = 0, aout_rsz = 0;
d51 2
d54 21
a78 1
	unsigned long y;
d80 8
a87 3
	y = (unsigned long)x - nl[P_KERNEL_TEXT].n_value + (unsigned long)aout_p +
	    N_TXTOFF(aout_ex);
	return((caddr_t)y);
d90 1
d95 11
a105 1
	unsigned long y;
d107 1
a107 3
	y = (unsigned long)x - (unsigned long)aout_p + nl[P_KERNEL_TEXT].n_value -
	    N_TXTOFF(aout_ex);
	return((caddr_t)y);
d145 1
a145 1
	(void)lseek(fd, (off_t)0, SEEK_SET);
d147 2
a148 1
	aout_psz = (int)(aout_ex.a_text+aout_ex.a_data);
@


1.3
log
@more free KNF from maja, though this was hard to do
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.2 2000/09/30 16:06:34 aaron Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.2 2000/09/30 16:06:34 aaron Exp $";
d107 1
a107 1
		errx(1, "bad a.out magic\n");
@


1.2
log
@Some format string problems that were missed during initial audit; deraadt@@ and
millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.1 1999/10/04 20:00:51 deraadt Exp $ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD: exec_aout.c,v 1.1 1999/10/04 20:00:51 deraadt Exp $";
d48 1
a48 1
caddr_t		aout_p,aout_r;
d52 1
a52 1
caddr_t 
d98 1
a98 1
	off_t cur,end;
d102 1
a102 1
	  
d105 1
a105 1
	
d108 1
a108 1
	
d112 1
a112 1
	
d114 1
a114 1
	
d128 1
a128 1
	
@


1.1
log
@config -e support; ukc from maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d33 1
a33 1
static char rcsid[] = "$OpenBSD$";
d101 1
a101 1
		err(1, file, errno);
d139 1
a139 1
		err(1, outfile, errno);
@

