head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.8
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.09.25.03.17.02;	author guenther;	state dead;
branches;
next	1.10;
commitid	4nW24uRiNzUemWPe;

1.10
date	2013.10.13.20.17.51;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2011.10.02.22.20.49;	author edd;	state Exp;
branches;
next	1.8;

1.8
date	2011.10.02.10.10.30;	author edd;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.27.23.59.51;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.16.14.45.46;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.21.19.03;	author maja;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.06.21.10.20;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.05.10.11.23;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	99.10.04.20.00.51;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@exec.c provided indirection for multiple exec formats.  ELF-only now, so...
@
text
@/*	$OpenBSD: exec.c,v 1.10 2013/10/13 20:17:51 deraadt Exp $ */

/*
 * Copyright (c) 1999 Mats O Jansson.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/stat.h>

#include <err.h>
#include <fcntl.h>
#include <stdio.h>

int	elf_check(char *);
void	elf_loadkernel(char *);
void	elf_savekernel(char *);
caddr_t	elf_adjust(caddr_t);
caddr_t	elf_readjust(caddr_t);

caddr_t
adjust(caddr_t x)
{
	return(elf_adjust(x));
}

caddr_t
readjust(caddr_t x)
{
	return(elf_readjust(x));
}

void
loadkernel(char *file)
{
	elf_loadkernel(file);
}

void
savekernel(char *outfile)
{
	elf_savekernel(outfile);
}
@


1.10
log
@remote bits for a.out and ecoff
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.9 2011/10/02 22:20:49 edd Exp $ */
@


1.9
log
@Fix some minor things in config(8):
 * As haesbaert suggests, correctly order include files.
 * Found some old style function defs. Updated.
 * Found a prototype inside a function. Moved.

OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.8 2011/10/02 10:10:30 edd Exp $ */
a33 17
#ifdef AOUT_SUPPORT
int	aout_check(char *);
void	aout_loadkernel(char *);
void	aout_savekernel(char *);
caddr_t	aout_adjust(caddr_t);
caddr_t	aout_readjust(caddr_t);
#endif

#ifdef ECOFF_SUPPORT
int	ecoff_check(char *);
void	ecoff_loadkernel(char *);
void	ecoff_savekernel(char *);
caddr_t	ecoff_adjust(caddr_t);
caddr_t	ecoff_readjust(caddr_t);
#endif

#ifdef ELF_SUPPORT
a38 7
#endif

#define DO_AOUT	0
#define DO_ECOFF 1
#define	DO_ELF 2

int current_exec = -1;
d43 1
a43 19
	switch (current_exec) {
#ifdef AOUT_SUPPORT
	case DO_AOUT:
		return(aout_adjust(x));
		break;
#endif
#ifdef ECOFF_SUPPORT
	case DO_ECOFF:
		return(ecoff_adjust(x));
		break;
#endif
#ifdef ELF_SUPPORT
	case DO_ELF:
		return(elf_adjust(x));
		break;
#endif
	default:
		errx(1, "no supported exec type");
	}
d49 1
a49 19
	switch (current_exec) {
#ifdef AOUT_SUPPORT
	case DO_AOUT:
		return(aout_readjust(x));
		break;
#endif
#ifdef ECOFF_SUPPORT
	case DO_ECOFF:
		return(ecoff_readjust(x));
		break;
#endif
#ifdef ELF_SUPPORT
	case DO_ELF:
		return(elf_readjust(x));
		break;
#endif
	default:
		errx(1, "no supported exec type");
	}
d55 1
a55 44
	struct stat			st;

	if (stat(file, &st) == -1)
		err(1, "cannot stat '%s'", file);

	current_exec = -1;

#ifdef AOUT_SUPPORT
	if (aout_check(file)) {
		current_exec = DO_AOUT;
	}
#endif

#ifdef ECOFF_SUPPORT
	if (ecoff_check(file)) {
		current_exec = DO_ECOFF;
	}
#endif

#ifdef ELF_SUPPORT
	if (elf_check(file)) {
		current_exec = DO_ELF;
	}
#endif

	switch (current_exec) {
#ifdef AOUT_SUPPORT
	case DO_AOUT:
		aout_loadkernel(file);
		break;
#endif
#ifdef ECOFF_SUPPORT
	case DO_ECOFF:
		ecoff_loadkernel(file);
		break;
#endif
#ifdef ELF_SUPPORT
	case DO_ELF:
		elf_loadkernel(file);
		break;
#endif
	default:
		errx(1, "no supported exec type");
	}
d61 1
a61 19
	switch (current_exec) {
#ifdef AOUT_SUPPORT
	case DO_AOUT:
		aout_savekernel(outfile);
		break;
#endif
#ifdef ECOFF_SUPPORT
	case DO_ECOFF:
		ecoff_savekernel(outfile);
		break;
#endif
#ifdef ELF_SUPPORT
	case DO_ELF:
		elf_savekernel(outfile);
		break;
#endif
	default:
		errx(1, "no supported exec type");
	}
@


1.8
log
@When using `config -e`:
 * Don't print a NULL pointer if binary loaded is not a kernel.
 * Don't segfault of binary loaded is not a kernel.
 * Report non-existent kernel via a preliminary stat().
 * Make a warning look like the rest.

OK haesbaert@@, nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.7 2009/10/27 23:59:51 deraadt Exp $ */
a26 1
#include <err.h>
d29 2
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.6 2003/08/16 14:45:46 henning Exp $ */
d29 2
d114 5
@


1.6
log
@no return() after errx(); andrushock
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.5 2003/06/02 21:19:03 maja Exp $ */
a29 4

#ifndef LINT
static char rcsid[] = "$OpenBSD: exec.c,v 1.5 2003/06/02 21:19:03 maja Exp $";
#endif
@


1.5
log
@remove clause 3 and 4. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.4 2002/09/06 21:10:20 henning Exp $ */
d32 1
a32 1
static char rcsid[] = "$OpenBSD: exec.c,v 1.4 2002/09/06 21:10:20 henning Exp $";
a85 1
		return(x);
a109 1
		return(x);
@


1.4
log
@ansi
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.3 2002/02/16 21:28:01 millert Exp $ */
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Mats O Jansson.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
d32 1
a32 1
static char rcsid[] = "$OpenBSD: exec.c,v 1.3 2002/02/16 21:28:01 millert Exp $";
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.2 2001/12/05 10:11:23 deraadt Exp $ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: exec.c,v 1.2 2001/12/05 10:11:23 deraadt Exp $";
d71 1
a71 2
adjust(x)
	caddr_t x;
d91 1
d96 1
a96 2
readjust(x)
	caddr_t x;
d116 1
d121 1
a121 2
loadkernel(file)
	char *file;
d165 1
a165 2
savekernel(outfile)
	char *outfile;
@


1.2
log
@more free KNF from maja, though this was hard to do
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.1 1999/10/04 20:00:51 deraadt Exp $ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD: exec.c,v 1.1 1999/10/04 20:00:51 deraadt Exp $";
d41 5
a45 5
int	aout_check __P((char *));
void	aout_loadkernel __P((char *));
void	aout_savekernel __P((char *));
caddr_t	aout_adjust __P((caddr_t));
caddr_t	aout_readjust __P((caddr_t));
d49 5
a53 5
int	ecoff_check __P((char *));
void	ecoff_loadkernel __P((char *));
void	ecoff_savekernel __P((char *));
caddr_t	ecoff_adjust __P((caddr_t));
caddr_t	ecoff_readjust __P((caddr_t));
d57 5
a61 5
int	elf_check __P((char *));
void	elf_loadkernel __P((char *));
void	elf_savekernel __P((char *));
caddr_t	elf_adjust __P((caddr_t));
caddr_t	elf_readjust __P((caddr_t));
@


1.1
log
@config -e support; ukc from maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d37 1
a37 1
static char rcsid[] = "$OpenBSD$";
d70 1
a70 1
caddr_t 
@

