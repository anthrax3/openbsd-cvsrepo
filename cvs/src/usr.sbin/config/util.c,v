head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.12
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.8
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.6
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.4
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.2
	OPENBSD_5_0:1.12.0.34
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.32
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.30
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.26
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.28
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.24
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.22
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.20
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.6.0.18
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.10.16.09.35.40;	author tb;	state Exp;
branches;
next	1.17;
commitid	yfpiX98eJQunxUQe;

1.17
date	2016.09.07.18.36.52;	author akfaew;	state Exp;
branches;
next	1.16;
commitid	zGhDLc6UZBKqoIwa;

1.16
date	2016.09.07.18.29.52;	author akfaew;	state Exp;
branches;
next	1.15;
commitid	iNxoLbhzCnTwXSGE;

1.15
date	2014.05.29.16.38.23;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2014.05.18.09.29.54;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2011.10.02.22.20.50;	author edd;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.28.04.55.07;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.14.02.59.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.16.44.24;	author mpech;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.28.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.07.25.20.12.10;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.10.23.22.38.02;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.01.18.02.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.40.28;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.55.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Add printf format attributes to the custom error functions.

ok natano
@
text
@/*	$OpenBSD: util.c,v 1.17 2016/09/07 18:36:52 akfaew Exp $	*/
/*	$NetBSD: util.c,v 1.5 1996/08/31 20:58:29 mycroft Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratories.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)util.c	8.1 (Berkeley) 6/6/93
 */

#include <sys/types.h>

#include <ctype.h>
#include <err.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "config.h"

static void vxerror(const char *, int, const char *, va_list)
		__attribute__((__format__ (printf, 3, 0)));

/*
 * Malloc, with abort on error.
 */
void *
emalloc(size_t size)
{
	void *p;

	if ((p = calloc(1, size)) == NULL)
		err(1, NULL);
	return p;
}

/*
 * Reallocarray, with abort on error.
 */
void *
ereallocarray(void *p, size_t sz1, size_t sz2)
{

	if ((p = reallocarray(p, sz1, sz2)) == NULL)
		err(1, NULL);
	return p;
}

/*
 * Calloc, with abort on error.
 */
void *
ecalloc(size_t sz1, size_t sz2)
{
	void *p;

	if ((p = calloc(sz1, sz2)) == NULL)
		err(1, NULL);
	return p;
}

/*
 * Prepend the source path to a file name.
 */
char *
sourcepath(const char *file)
{
	char *cp;

	if (asprintf(&cp, "%s/%s", srcdir, file) == -1)
		err(1, NULL);

	return cp;
}

static struct nvlist *nvhead;

struct nvlist *
newnv(const char *name, const char *str, void *ptr, int i, struct nvlist *next)
{
	struct nvlist *nv;

	if ((nv = nvhead) == NULL)
		nv = emalloc(sizeof(*nv));
	else
		nvhead = nv->nv_next;
	nv->nv_next = next;
	nv->nv_name = (char *)name;
	if (ptr == NULL)
		nv->nv_str = str;
	else {
		if (str != NULL)
			panic("newnv");
		nv->nv_ptr = ptr;
	}
	nv->nv_int = i;
	return nv;
}

/*
 * Free an nvlist structure (just one).
 */
void
nvfree(struct nvlist *nv)
{

	nv->nv_next = nvhead;
	nvhead = nv;
}

/*
 * Free an nvlist (the whole list).
 */
void
nvfreel(struct nvlist *nv)
{
	struct nvlist *next;

	for (; nv != NULL; nv = next) {
		next = nv->nv_next;
		nv->nv_next = nvhead;
		nvhead = nv;
	}
}

/*
 * External (config file) error.  Complain, using current file
 * and line number.
 */
void
error(const char *fmt, ...)
{
	va_list ap;
	extern const char *yyfile;

	va_start(ap, fmt);
	vxerror(yyfile, currentline(), fmt, ap);
	va_end(ap);
}

/*
 * Delayed config file error (i.e., something was wrong but we could not
 * find out about it until later).
 */
void
xerror(const char *file, int line, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vxerror(file, line, fmt, ap);
	va_end(ap);
}

/*
 * Internal form of error() and xerror().
 */
static void
vxerror(const char *file, int line, const char *fmt, va_list ap)
{

	(void)fprintf(stderr, "%s:%d: ", file, line);
	(void)vfprintf(stderr, fmt, ap);
	(void)putc('\n', stderr);
	errors++;
}

/*
 * Internal error, abort.
 */
__dead void
panic(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	(void)fprintf(stderr, "config: panic: ");
	(void)vfprintf(stderr, fmt, ap);
	(void)putc('\n', stderr);
	va_end(ap);
	exit(2);
}
@


1.17
log
@strlen + emalloc + snprintf = asprintf

Written with and ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.16 2016/09/07 18:29:52 akfaew Exp $	*/
d55 2
a56 1
static void vxerror(const char *, int, const char *, va_list);
@


1.16
log
@Get rid of the static nomem() function and replace it with err(1, NULL);

Written with and ok tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.15 2014/05/29 16:38:23 tedu Exp $	*/
a101 1
	int len = strlen(srcdir) + 1 + strlen(file) + 1;
d103 3
a105 2
	cp = emalloc(len);
	(void)snprintf(cp, len, "%s/%s", srcdir, file);
@


1.15
log
@use calloc, from Benjamin Baier
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.14 2014/05/18 09:29:54 espie Exp $	*/
d47 1
a54 1
static void nomem(void);
d66 2
a67 2
		nomem();
	return (p);
d78 2
a79 2
		nomem();
	return (p);
d91 2
a92 10
		nomem();
	return (p);
}

static void
nomem(void)
{

	(void)fprintf(stderr, "config: out of memory\n");
	exit(1);
d106 1
a106 1
	return (cp);
d130 1
a130 1
	return (nv);
@


1.14
log
@use reallocarray and friends. okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.13 2011/10/02 22:20:50 edd Exp $	*/
d65 1
a65 1
	if ((p = malloc(size)) == NULL)
a66 1
	memset(p, 0, size);
@


1.13
log
@Fix some minor things in config(8):
 * As haesbaert suggests, correctly order include files.
 * Found some old style function defs. Updated.
 * Found a prototype inside a function. Moved.

OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.12 2003/06/28 04:55:07 deraadt Exp $	*/
d72 1
a72 1
 * Realloc, with abort on error.
d75 1
a75 1
erealloc(void *p, size_t size)
d78 14
a91 1
	if ((p = realloc(p, size)) == NULL)
@


1.12
log
@ansi & prototype cleanup.  tested in mkr on most arch's.  ok dhartmei
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.11 2003/06/02 23:36:52 millert Exp $	*/
d45 1
d47 1
d51 1
a51 1
#include <stdarg.h>
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.10 2002/07/14 02:59:41 deraadt Exp $	*/
d59 1
a59 2
emalloc(size)
	size_t size;
d73 1
a73 3
erealloc(p, size)
	void *p;
	size_t size;
d82 1
a82 1
nomem()
d93 1
a93 2
sourcepath(file)
	const char *file;
d106 1
a106 5
newnv(name, str, ptr, i, next)
	const char *name, *str;
	void *ptr;
	int i;
	struct nvlist *next;
d115 1
a115 1
	nv->nv_name = name;
d131 1
a131 2
nvfree(nv)
	struct nvlist *nv;
d142 1
a142 2
nvfreel(nv)
	struct nvlist *nv;
d186 1
a186 5
vxerror(file, line, fmt, ap)
	const char *file;
	int line;
	const char *fmt;
	va_list ap;
@


1.10
log
@kill sprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.9 2002/03/14 16:44:24 mpech Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.8 2002/02/19 19:39:40 millert Exp $	*/
d104 1
d106 2
a107 2
	cp = emalloc(strlen(srcdir) + 1 + strlen(file) + 1);
	(void)sprintf(cp, "%s/%s", srcdir, file);
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.7 2002/02/16 21:28:01 millert Exp $	*/
d103 1
a103 1
	register char *cp;
d119 1
a119 1
	register struct nvlist *nv;
d143 1
a143 1
	register struct nvlist *nv;
d155 1
a155 1
	register struct nvlist *nv;
d157 1
a157 1
	register struct nvlist *next;
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.6 1997/07/25 20:12:10 mickey Exp $	*/
d48 1
a52 1
#ifdef __STDC__
a53 4
#else
#include <varargs.h>
#endif
#include <sys/types.h>
a170 1
#ifdef __STDC__
a171 5
#else
error(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
a175 1
#ifdef __STDC__
a176 3
#else
	va_start(ap);
#endif
a185 1
#ifdef __STDC__
a186 7
#else
xerror(file, line, fmt, va_alist)
	const char *file;
	int line;
	const char *fmt;
	va_dcl
#endif
a189 1
#ifdef __STDC__
a190 3
#else
	va_start(ap);
#endif
a215 1
#ifdef __STDC__
a216 5
#else
panic(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
a219 1
#ifdef __STDC__
a220 3
#else
	va_start(ap);
#endif
@


1.6
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.5 1996/10/23 22:38:02 niklas Exp $	*/
d60 2
a61 2
static void nomem __P((void));
static void vxerror __P((const char *, int, const char *, va_list));
@


1.5
log
@Merge of NetBSD 961020.  Includes flexible build/source dir specs
@
text
@d1 1
a1 1
/*	$OpenBSD: util.c,v 1.4 1996/09/01 18:02:02 deraadt Exp $	*/
d52 1
a52 1
#if __STDC__
d175 1
a175 1
#if __STDC__
d186 1
a186 1
#if __STDC__
d200 1
a200 1
#if __STDC__
d212 1
a212 1
#if __STDC__
d242 1
a242 1
#if __STDC__
d252 1
a252 1
#if __STDC__
@


1.4
log
@zap emalloc mem
@
text
@d1 2
a2 2
/*	$OpenBSD: util.c,v 1.2 1996/03/25 15:55:16 niklas Exp $	*/
/*	$NetBSD: util.c,v 1.4 1996/03/17 11:50:16 cgd Exp $	*/
d101 1
a101 1
 * Prepend the compilation directory to a file name.
d104 1
a104 1
path(file)
a107 1
#define	CDIR "../compile/"
d109 2
a110 8
	if (file == NULL) {
		cp = emalloc(sizeof(CDIR) + strlen(confdirbase));
		(void)sprintf(cp, "%s%s", CDIR, confdirbase);
	} else {
		cp = emalloc(sizeof(CDIR) + strlen(confdirbase) + 1 +
		    strlen(file));
		(void)sprintf(cp, "%s%s/%s", CDIR, confdirbase, file);
	}
@


1.3
log
@sync to netbsd 960418
@
text
@d74 1
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: util.c,v 1.2 1996/03/03 17:28:41 thorpej Exp $	*/
d4 1
a4 1
/* 
d63 1
a63 1
/* 
d77 1
a77 1
/* 
d123 1
a123 1
newnv(name, str, ptr, i)
d127 1
d135 1
a135 1
	nv->nv_next = NULL;
@


1.1
log
@Initial revision
@
text
@d1 3
a45 1
 *	$Id: util.c,v 1.1 1995/04/28 06:55:28 cgd Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
