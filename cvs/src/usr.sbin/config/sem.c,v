head	1.36;
access;
symbols
	OPENBSD_6_1:1.36.0.6
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.36.0.4
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.36.0.2
	OPENBSD_5_9_BASE:1.36
	OPENBSD_5_8:1.35.0.6
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.2
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.8
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.6
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.32.0.4
	OPENBSD_5_2_BASE:1.32
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.2
	OPENBSD_5_0:1.31.0.14
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.31.0.12
	OPENBSD_4_9_BASE:1.31
	OPENBSD_4_8:1.31.0.10
	OPENBSD_4_8_BASE:1.31
	OPENBSD_4_7:1.31.0.6
	OPENBSD_4_7_BASE:1.31
	OPENBSD_4_6:1.31.0.8
	OPENBSD_4_6_BASE:1.31
	OPENBSD_4_5:1.31.0.4
	OPENBSD_4_5_BASE:1.31
	OPENBSD_4_4:1.31.0.2
	OPENBSD_4_4_BASE:1.31
	OPENBSD_4_3:1.30.0.18
	OPENBSD_4_3_BASE:1.30
	OPENBSD_4_2:1.30.0.16
	OPENBSD_4_2_BASE:1.30
	OPENBSD_4_1:1.30.0.14
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.30.0.12
	OPENBSD_4_0_BASE:1.30
	OPENBSD_3_9:1.30.0.10
	OPENBSD_3_9_BASE:1.30
	OPENBSD_3_8:1.30.0.8
	OPENBSD_3_8_BASE:1.30
	OPENBSD_3_7:1.30.0.6
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.30.0.4
	OPENBSD_3_6_BASE:1.30
	OPENBSD_3_5:1.30.0.2
	OPENBSD_3_5_BASE:1.30
	OPENBSD_3_4:1.29.0.2
	OPENBSD_3_4_BASE:1.29
	OPENBSD_3_3:1.27.0.4
	OPENBSD_3_3_BASE:1.27
	OPENBSD_3_2:1.27.0.2
	OPENBSD_3_2_BASE:1.27
	OPENBSD_3_1:1.25.0.2
	OPENBSD_3_1_BASE:1.25
	OPENBSD_3_0:1.21.0.4
	OPENBSD_3_0_BASE:1.21
	OPENBSD_2_9_BASE:1.21
	OPENBSD_2_9:1.21.0.2
	OPENBSD_2_8:1.17.0.2
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.12.0.4
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	OPENBSD_2_2:1.11.0.2
	OPENBSD_2_2_BASE:1.11
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	NIKLAS:1.7.0.2
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2015.12.14.05.59.56;	author mmcc;	state Exp;
branches;
next	1.35;
commitid	yTE8Zi4kiT3MRao6;

1.35
date	2015.01.16.06.40.16;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	Uu5nFG3wCl0LACBb;

1.34
date	2014.05.18.09.29.54;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2013.11.23.17.38.15;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2011.10.02.22.20.50;	author edd;	state Exp;
branches;
next	1.31;

1.31
date	2008.03.24.21.35.03;	author maja;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.04.18.30.05;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2003.06.28.04.55.07;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2003.06.02.23.36.52;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.11.05.58.27;	author nordin;	state Exp;
branches;
next	1.26;

1.26
date	2002.05.29.09.45.39;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2002.03.14.16.44.24;	author mpech;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.17.19.42.35;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.16.21.28.01;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2001.12.05.10.11.23;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2001.01.24.20.13.00;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.23.17.43.21;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.23.06.02.59;	author angelos;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.15.01.47.14;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.28.21.51.38;	author angelos;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2000.01.03.19.27.23;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.03.19.20.30;	author angelos;	state Exp;
branches;
next	1.14;

1.14
date	99.04.18.17.15.09;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	99.01.19.01.11.24;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.11.13.08.21.56;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.08.07.10.36.59;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.08.07.10.22.27;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.01.18.02.24.19;	author briggs;	state Exp;
branches;
next	1.8;

1.8
date	96.12.12.00.24.44;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.12.11.22.36.15;	author niklas;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	96.10.23.22.38.00;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.08.29.03.33.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.07.07.22.02.21;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.23.40.25;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.25.15.55.13;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.34;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	97.01.18.13.19.24;	author niklas;	state Exp;
branches;
next	;

1.17.2.1
date	2000.11.21.04.23.22;	author jason;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Remove unused macro that's just a clone of abs(3). ok tb@@
@
text
@/*	$OpenBSD: sem.c,v 1.35 2015/01/16 06:40:16 deraadt Exp $	*/
/*	$NetBSD: sem.c,v 1.10 1996/11/11 23:40:11 gwr Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratories.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)sem.c	8.1 (Berkeley) 6/6/93
 */

#include <sys/param.h>	/* NODEV */

#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "config.h"
#include "sem.h"

/*
 * config semantics.
 */

#define	NAMESIZE	100	/* local name buffers */

const char *s_generic;
const char *s_nfs;

static struct hashtab *attrtab;		/* for attribute lookup */
static struct hashtab *cfhashtab;	/* for config lookup */
static struct hashtab *devitab;		/* etc */

static struct attr errattr;
static struct devbase errdev;
static struct deva errdeva;
static struct devbase **nextbase;
static struct deva **nextdeva;
static struct config **nextcf;
static struct devi **nextdevi;
static struct devi **nextpseudo;

static int has_errobj(struct nvlist *, void *);
static struct nvlist *addtoattr(struct nvlist *, struct devbase *);
static int exclude(struct nvlist *, const char *, const char *);
static int resolve(struct nvlist **, const char *, const char *,
    struct nvlist *, int);
static int lresolve(struct nvlist **, const char *, const char *,
    struct nvlist *, int);
static struct devi *newdevi(const char *, int, struct devbase *d);
static struct devi *getdevi(const char *);
static const char *concat(const char *, int);
static char *extend(char *, const char *);
static int split(const char *, size_t, char *, size_t, int *);
static void selectbase(struct devbase *, struct deva *);
static int onlist(struct nvlist *, void *);
static const char **fixloc(const char *, struct attr *, struct nvlist *);

void
initsem(void)
{

	attrtab = ht_new();
	errattr.a_name = "<internal>";

	allbases = NULL;
	nextbase = &allbases;

	alldevas = NULL;
	nextdeva = &alldevas;

	cfhashtab = ht_new();
	allcf = NULL;
	nextcf = &allcf;

	devitab = ht_new();
	alldevi = NULL;
	nextdevi = &alldevi;
	errdev.d_name = "<internal>";

	allpseudo = NULL;
	nextpseudo = &allpseudo;

	s_generic = intern("generic");
	s_nfs = intern("nfs");
}

/* Name of include file just ended (set in scan.l) */
extern const char *lastfile;

void
enddefs(void)
{
	struct devbase *dev;

	for (dev = allbases; dev != NULL; dev = dev->d_next) {
		if (!dev->d_isdef) {
			(void)fprintf(stderr,
			    "%s: device `%s' used but not defined\n",
			    lastfile, dev->d_name);
			errors++;
			continue;
		}
	}
	if (errors) {
		(void)fprintf(stderr, "*** Stop.\n");
		exit(1);
	}
}

void
setdefmaxusers(int min, int def, int max)
{

	if (min < 1 || min > def || def > max)
		error("maxusers must have 1 <= min <= default <= max");
	else {
		minmaxusers = min;
		defmaxusers = def;
		maxmaxusers = max;
	}
}

void
setmaxusers(int n)
{

	if (maxusers != 0) {
		warnx("warning: duplicate maxusers parameter, will use latest definition (%d)", n);
	}
	maxusers = n;
	if (n < minmaxusers) {
		warnx("warning: minimum of %d maxusers assumed", minmaxusers);
		maxusers = minmaxusers;
	} else if (n > maxmaxusers) {
		warnx("warning: maxusers (%d) > %d", n, maxmaxusers);
	}
}

/*
 * Define an attribute, optionally with an interface (a locator list).
 * Since an empty locator list is logically different from "no interface",
 * all locator lists include a dummy head node, which we discard here.
 */
int
defattr(const char *name, struct nvlist *locs)
{
	struct attr *a;
	struct nvlist *nv;
	int len;

	a = emalloc(sizeof *a);
	if (ht_insert(attrtab, name, a)) {
		free(a);
		error("attribute `%s' already defined", name);
		nvfreel(locs);
		return (1);
	}
	a->a_name = name;
	if (locs != NULL) {
		a->a_iattr = 1;
		a->a_locs = locs->nv_next;
		nvfree(locs);
	} else {
		a->a_iattr = 0;
		a->a_locs = NULL;
	}
	len = 0;
	for (nv = a->a_locs; nv != NULL; nv = nv->nv_next)
		len++;
	a->a_loclen = len;
	a->a_devs = NULL;
	a->a_refs = NULL;
	return (0);
}

/*
 * Return true if the given `error object' is embedded in the given
 * pointer list.
 */
static int
has_errobj(struct nvlist *nv, void *obj)
{

	for (; nv != NULL; nv = nv->nv_next)
		if (nv->nv_ptr == obj)
			return (1);
	return (0);
}

/*
 * Add a device base to a list in an attribute (actually, to any list).
 * Note that this does not check for duplicates, and does reverse the
 * list order, but no one cares anyway.
 */
static struct nvlist *
addtoattr(struct nvlist *l, struct devbase *dev)
{
	struct nvlist *n;

	n = newnv(NULL, NULL, dev, 0, l);
	return (n);
}

/*
 * Define a device.  This may (or may not) also define an interface
 * attribute and/or refer to existing attributes.
 */
void
defdev(struct devbase *dev, int ispseudo, struct nvlist *loclist,
    struct nvlist *attrs)
{
	struct nvlist *nv;
	struct attr *a;

	if (dev == &errdev)
		goto bad;
	if (dev->d_isdef) {
		error("redefinition of `%s'", dev->d_name);
		goto bad;
	}
	dev->d_isdef = 1;
	if (has_errobj(attrs, &errattr))
		goto bad;

	/*
	 * Handle implicit attribute definition from locator list.  Do
	 * this before scanning the `at' list so that we can have, e.g.:
	 *	device foo at other, foo { slot = -1 }
	 * (where you can plug in a foo-bus extender to a foo-bus).
	 */
	if (loclist != NULL) {
		nv = loclist;
		loclist = NULL;	/* defattr disposes of them for us */
		if (defattr(dev->d_name, nv))
			goto bad;
		attrs = newnv(dev->d_name, NULL, getattr(dev->d_name), 0,
		    attrs);
	}

	/* Committed!  Set up fields. */
	dev->d_ispseudo = ispseudo;
	dev->d_attrs = attrs;

	/*
	 * For each interface attribute this device refers to, add this
	 * device to its reference list.  This makes, e.g., finding all
	 * "scsi"s easier.
	 */
	for (nv = attrs; nv != NULL; nv = nv->nv_next) {
		a = nv->nv_ptr;
		if (a->a_iattr)
			a->a_refs = addtoattr(a->a_refs, dev);
	}
	return;
bad:
	nvfreel(loclist);
	nvfreel(attrs);
}

/*
 * Look up a devbase.  Also makes sure it is a reasonable name,
 * i.e., does not end in a digit or contain special characters.
 */
struct devbase *
getdevbase(char *name)
{
	u_char *p;
	struct devbase *dev;

	p = (u_char *)name;
	if (!isalpha(*p))
		goto badname;
	while (*++p) {
		if (!isalnum(*p) && *p != '_')
			goto badname;
	}
	if (isdigit(*--p)) {
badname:
		error("bad device base name `%s'", name);
		return (&errdev);
	}
	dev = ht_lookup(devbasetab, name);
	if (dev == NULL) {
		dev = emalloc(sizeof *dev);
		dev->d_name = name;
		dev->d_next = NULL;
		dev->d_isdef = 0;
		dev->d_major = NODEV;
		dev->d_attrs = NULL;
		dev->d_ihead = NULL;
		dev->d_ipp = &dev->d_ihead;
		dev->d_ahead = NULL;
		dev->d_app = &dev->d_ahead;
		dev->d_umax = 0;
		*nextbase = dev;
		nextbase = &dev->d_next;
		if (ht_insert(devbasetab, name, dev))
			panic("getdevbase(%s)", name);
	}
	return (dev);
}

/*
 * Define some of a device's allowable parent attachments.
 * There may be a list of (plain) attributes.
 */
void
defdevattach(struct deva *deva, struct devbase *dev, struct nvlist *atlist,
    struct nvlist *attrs)
{
	struct nvlist *nv;
	struct attr *a;
	struct deva *da;

	if (dev == &errdev)
		goto bad;
	if (deva == NULL)
		deva = getdevattach(dev->d_name);
	if (deva == &errdeva)
		goto bad;
	if (!dev->d_isdef) {
		error("attaching undefined device `%s'", dev->d_name);
		goto bad;
	}
	if (deva->d_isdef) {
		error("redefinition of `%s'", deva->d_name);
		goto bad;
	}
	if (dev->d_ispseudo) {
		error("pseudo-devices can't attach");
		goto bad;
	}

	deva->d_isdef = 1;
	if (has_errobj(attrs, &errattr))
		goto bad;
	for (nv = attrs; nv != NULL; nv = nv->nv_next) {
		a = nv->nv_ptr;
		if (a == &errattr)
			continue;		/* already complained */
		if (a->a_iattr)
			error("`%s' is not a plain attribute", a->a_name);
	}

	/* Committed!  Set up fields. */
	deva->d_attrs = attrs;
	deva->d_atlist = atlist;
	deva->d_devbase = dev;

	/*
	 * Turn the `at' list into interface attributes (map each
	 * nv_name to an attribute, or to NULL for root), and add
	 * this device to those attributes, so that children can
	 * be listed at this particular device if they are supported
	 * by that attribute.
	 */
	for (nv = atlist; nv != NULL; nv = nv->nv_next) {
		if (nv->nv_name == NULL)
			nv->nv_ptr = a = NULL;	/* at root */
		else
			nv->nv_ptr = a = getattr(nv->nv_name);
		if (a == &errattr)
			continue;		/* already complained */

		/*
		 * Make sure that an attachment spec doesn't
		 * already say how to attach to this attribute.
		 */
		for (da = dev->d_ahead; da != NULL; da = da->d_bsame)
			if (onlist(da->d_atlist, a))
				error("attach at `%s' already done by `%s'",
				    a ? a->a_name : "root", da->d_name);

		if (a == NULL)
			continue;		/* at root; don't add */
		if (!a->a_iattr)
			error("%s cannot be at plain attribute `%s'",
			    dev->d_name, a->a_name);
		else
			a->a_devs = addtoattr(a->a_devs, dev);
	}

	/* attach to parent */
	*dev->d_app = deva;
	dev->d_app = &deva->d_bsame;
	return;
bad:
	nvfreel(atlist);
	nvfreel(attrs);
}

/*
 * Look up a device attachment.  Also makes sure it is a reasonable
 * name, i.e., does not contain digits or special characters.
 */
struct deva *
getdevattach(const char *name)
{
	u_char *p;
	struct deva *deva;

	p = (u_char *)name;
	if (!isalpha(*p))
		goto badname;
	while (*++p) {
		if (!isalnum(*p) && *p != '_')
			goto badname;
	}
	if (isdigit((unsigned char)*--p)) {
badname:
		error("bad device attachment name `%s'", name);
		return (&errdeva);
	}
	deva = ht_lookup(devatab, name);
	if (deva == NULL) {
		deva = emalloc(sizeof *deva);
		deva->d_name = name;
		deva->d_next = NULL;
		deva->d_bsame = NULL;
		deva->d_isdef = 0;
		deva->d_devbase = NULL;
		deva->d_atlist = NULL;
		deva->d_attrs = NULL;
		deva->d_ihead = NULL;
		deva->d_ipp = &deva->d_ihead;
		*nextdeva = deva;
		nextdeva = &deva->d_next;
		if (ht_insert(devatab, name, deva))
			panic("getdeva(%s)", name);
	}
	return (deva);
}

/*
 * Look up an attribute.
 */
struct attr *
getattr(const char *name)
{
	struct attr *a;

	if ((a = ht_lookup(attrtab, name)) == NULL) {
		error("undefined attribute `%s'", name);
		a = &errattr;
	}
	return (a);
}

/*
 * Set the major device number for a device, so that it can be used
 * as a root/swap/dumps "on" device in a configuration.
 */
void
setmajor(struct devbase *d, int n)
{

	if (d != &errdev && d->d_major != NODEV)
		error("device `%s' is already major %d",
		    d->d_name, d->d_major);
	else
		d->d_major = n;
}

static int
exclude(struct nvlist *nv, const char *name, const char *what)
{

	if (nv != NULL) {
		error("%s: swap generic must not specify %s", name, what);
		return (1);
	}
	return (0);
}

/*
 * Map things like "ra0b" => makedev(major("ra"), 0*maxpartitions + 'b'-'a').
 * Handle the case where the device number is given but there is no
 * corresponding name, and map NULL to the default.
 */
static int
resolve(struct nvlist **nvp, const char *name, const char *what,
    struct nvlist *dflt, int part)
{
	struct nvlist *nv;
	struct devbase *dev;
	const char *cp;
	int maj, min, l;
	int unit;
	char buf[NAMESIZE];

	part -= 'a';
	if ((part >= maxpartitions) || (part < 0))
		panic("resolve");
	if ((nv = *nvp) == NULL) {
		dev_t	d = NODEV;
		/*
		 * Apply default.  Easiest to do this by number.
		 * Make sure to retain NODEVness, if this is dflt's disposition.
		 */
		if (dflt->nv_int != NODEV) {
			maj = major(dflt->nv_int);
			min = (minor(dflt->nv_int) / maxpartitions) + part;
			d = makedev(maj, min);
		}
		*nvp = nv = newnv(NULL, NULL, NULL, d, NULL);
	}
	if (nv->nv_int != NODEV) {
		/*
		 * By the numbers.  Find the appropriate major number
		 * to make a name.
		 */
		maj = major(nv->nv_int);
		min = minor(nv->nv_int);
		for (dev = allbases; dev != NULL; dev = dev->d_next)
			if (dev->d_major == maj)
				break;
		if (dev == NULL)
			(void)snprintf(buf, sizeof buf, "<%d/%d>",
			    maj, min);
		else
			(void)snprintf(buf, sizeof buf, "%s%d%c",
			    dev->d_name, min / maxpartitions,
			    (min % maxpartitions) + 'a');
		nv->nv_str = intern(buf);
		return (0);
	}

	if (nv->nv_str == NULL || nv->nv_str == s_nfs)
		/*
		 * NFS spec. Leave as NODEV.
		 */
		return (0);

	/*
	 * The normal case: things like "ra2b".  Check for partition
	 * suffix, remove it if there, and split into name ("ra") and
	 * unit (2).
	 */
	l = strlen(nv->nv_str);
	cp = &nv->nv_str[l];
	if (l > 1 && *--cp >= 'a' && *cp <= 'a'+maxpartitions &&
	    isdigit((unsigned char)cp[-1])) {
		l--;
		part = *cp - 'a';
	}
	cp = nv->nv_str;
	if (split(cp, l, buf, sizeof buf, &unit)) {
		error("%s: invalid %s device name `%s'", name, what, cp);
		return (1);
	}
	dev = ht_lookup(devbasetab, intern(buf));
	if (dev == NULL || dev->d_major == NODEV) {
		error("%s: can't make %s device from `%s'",
		    name, what, nv->nv_str);
		return (1);
	}
	nv->nv_name = dev->d_name;
	nv->nv_int = makedev(dev->d_major, unit * maxpartitions + part);
	return (0);
}

static int
lresolve(struct nvlist **nvp, const char *name, const char *what,
    struct nvlist *dflt, int part)
{
	int err;

	while ((err = resolve(nvp, name, what, dflt, part)) == 0 &&
	    (*nvp)->nv_next != NULL)
		nvp = &(*nvp)->nv_next;
	return (err);
}

/*
 * Add a completed configuration to the list.
 */
void
addconf(struct config *cf0)
{
	struct config *cf;
	struct nvlist *nv;
	const char *name;

	name = cf0->cf_name;
	cf = emalloc(sizeof *cf);
	if (ht_insert(cfhashtab, name, cf)) {
		error("configuration `%s' already defined", name);
		free(cf);
		goto bad;
	}
	*cf = *cf0;

	/*
	 * Look for "swap generic".
	 */
	for (nv = cf->cf_swap; nv != NULL; nv = nv->nv_next)
	    if (nv->nv_str == s_generic)
		break;
	if (nv != NULL) {
		/*
		 * Make sure no root or dump device specified, and no
		 * other swap devices.  Note single | here (check all).
		 */
		nv = cf->cf_swap;
		if (exclude(cf->cf_root, name, "root device") |
		    exclude(nv->nv_next, name, "additional swap devices") |
		    exclude(cf->cf_dump, name, "dump device"))
			goto bad;
	} else {
		nv = cf->cf_root;
		if (nv == NULL) {
			error("%s: no root device specified", name);
			goto bad;
		}
		if (resolve(&cf->cf_root, name, "root", nv, 'a') |
		    lresolve(&cf->cf_swap, name, "swap", nv, 'b') |
		    resolve(&cf->cf_dump, name, "dumps", nv, 'b'))
			goto bad;
	}
	*nextcf = cf;
	nextcf = &cf->cf_next;
	return;
bad:
	nvfreel(cf0->cf_root);
	nvfreel(cf0->cf_swap);
	nvfreel(cf0->cf_dump);
}

void
setconf(struct nvlist **npp, const char *what, struct nvlist *v)
{

	if (*npp != NULL) {
		error("duplicate %s specification", what);
		nvfreel(v);
	} else
		*npp = v;
}

static struct devi *
newdevi(const char *name, int unit, struct devbase *d)
{
	struct devi *i;

	i = emalloc(sizeof *i);
	i->i_name = name;
	i->i_unit = unit;
	i->i_base = d;
	i->i_next = NULL;
	i->i_bsame = NULL;
	i->i_asame = NULL;
	i->i_alias = NULL;
	i->i_at = NULL;
	i->i_atattr = NULL;
	i->i_atdev = NULL;
	i->i_atdeva = NULL;
	i->i_locs = NULL;
	i->i_cfflags = 0;
	i->i_cfindex = -1;
	i->i_lineno = currentline();
	if (unit >= d->d_umax)
		d->d_umax = unit + 1;
	return (i);
}

/*
 * Enable an already declared but disabled device.
 */
void
enabledev(const char *name, const char *at)
{
	struct devbase *ib, *ab;
	char atbuf[NAMESIZE];
	struct attr *attr;
	struct nvlist *nv;
	struct devi *i;
	const char *cp;
	int atunit;

	i = ht_lookup(devitab, name);
	if (i == NULL) {
		error("invalid device `%s'", name);
		return;
	}
	ib = i->i_base;

	if (split(at, strlen(at), atbuf, sizeof atbuf, &atunit)) {
		error("invalid attachment name `%s'", at);
		return;
	}
	cp = intern(atbuf);
	ab = ht_lookup(devbasetab, cp);
	if (ab == NULL) {
		error("invalid attachment device `%s'", cp);
		return;
	}
	for (nv = ab->d_attrs; nv != NULL; nv = nv->nv_next) {
		attr = nv->nv_ptr;
		if (onlist(attr->a_devs, ib))
			goto foundattachment;
	}
	error("%s's cannot attach to %s's", ib->d_name, atbuf);
	return;

foundattachment:
	while (i && i->i_atdev != ab)
		i = i->i_alias;
	if (i == NULL) {
		error("%s at %s not found", name, at);
		return;
	} else
		i->i_disable = 0; /* Enable */
}

/*
 * Add the named device as attaching to the named attribute (or perhaps
 * another device instead) plus unit number.
 */
void
adddev(const char *name, const char *at, struct nvlist *loclist, int flags,
    int disable)
{
	struct devi *i;	/* the new instance */
	struct attr *attr;	/* attribute that allows attach */
	struct devbase *ib;	/* i->i_base */
	struct devbase *ab;	/* not NULL => at another dev */
	struct nvlist *nv;
	struct deva *iba;	/* devbase attachment used */
	const char *cp;
	int atunit;
	char atbuf[NAMESIZE];
	int hit;

	ab = NULL;
	iba = NULL;
	if (at == NULL) {
		/* "at root" */
		if ((i = getdevi(name)) == NULL)
			goto bad;
		/*
		 * Must warn about i_unit > 0 later, after taking care of
		 * the STAR cases (we could do non-star's here but why
		 * bother?).  Make sure this device can be at root.
		 */
		ib = i->i_base;
		hit = 0;
		for (iba = ib->d_ahead; iba != NULL; iba = iba->d_bsame)
			if (onlist(iba->d_atlist, NULL)) {
				hit = 1;
				break;
			}
		if (!hit) {
			error("%s's cannot attach to the root", ib->d_name);
			goto bad;
		}
		attr = &errattr;	/* a convenient "empty" attr */
	} else {
		if (split(at, strlen(at), atbuf, sizeof atbuf, &atunit)) {
			error("invalid attachment name `%s'", at);
			/* (void)getdevi(name); -- ??? */
			goto bad;
		}
		if ((i = getdevi(name)) == NULL)
			goto bad;
		ib = i->i_base;
		cp = intern(atbuf);

		/*
		 * Devices can attach to two types of things: Attributes,
		 * and other devices (which have the appropriate attributes
		 * to allow attachment).
		 *
		 * (1) If we're attached to an attribute, then we don't need
		 *     look at the parent base device to see what attributes
		 *     it has, and make sure that we can attach to them.
		 *
		 * (2) If we're attached to a real device (i.e. named in
		 *     the config file), we want to remember that so that
		 *     at cross-check time, if the device we're attached to
		 *     is missing but other devices which also provide the
		 *     attribute are present, we don't get a false "OK."
		 *
		 * (3) If the thing we're attached to is an attribute
		 *     but is actually named in the config file, we still
		 *     have to remember its devbase.
		 */

		/* Figure out parent's devbase, to satisfy case (3). */
		ab = ht_lookup(devbasetab, cp);

		/* Find out if it's an attribute. */
		attr = ht_lookup(attrtab, cp);

		/* Make sure we're _really_ attached to the attr.  Case (1). */
		if (attr != NULL && onlist(attr->a_devs, ib))
			goto findattachment;

		/*
		 * Else a real device, and not just an attribute.  Case (2).
		 *
		 * Have to work a bit harder to see whether we have
		 * something like "tg0 at esp0" (where esp is merely
		 * not an attribute) or "tg0 at nonesuch0" (where
		 * nonesuch is not even a device).
		 */
		if (ab == NULL) {
			error("%s at %s: `%s' unknown",
			    name, at, atbuf);
			goto bad;
		}

		/*
		 * See if the named parent carries an attribute
		 * that allows it to supervise device ib.
		 */
		for (nv = ab->d_attrs; nv != NULL; nv = nv->nv_next) {
			attr = nv->nv_ptr;
			if (onlist(attr->a_devs, ib))
				goto findattachment;
		}
		error("%s's cannot attach to %s's", ib->d_name, atbuf);
		goto bad;

findattachment:
		/* find out which attachment it uses */
		hit = 0;
		for (iba = ib->d_ahead; iba != NULL; iba = iba->d_bsame)
			if (onlist(iba->d_atlist, attr)) {
				hit = 1;
				break;
			}
		if (!hit)
			panic("adddev: can't figure out attachment");
	}
	if ((i->i_locs = fixloc(name, attr, loclist)) == NULL)
		goto bad;
	i->i_at = at;
	i->i_atattr = attr;
	i->i_atdev = ab;
	i->i_atdeva = iba;
	i->i_atunit = atunit;
	i->i_cfflags = flags;
	i->i_disable = disable;

	*iba->d_ipp = i;
	iba->d_ipp = &i->i_asame;

	selectbase(ib, iba);
	/* all done, fall into ... */
bad:
	nvfreel(loclist);
	return;
}

void
addpseudo(const char *name, int number, int disable)
{
	struct devbase *d;
	struct devi *i;

	d = ht_lookup(devbasetab, name);
	if (d == NULL) {
		error("undefined pseudo-device %s", name);
		return;
	}
	if (!d->d_ispseudo) {
		error("%s is a real device, not a pseudo-device", name);
		return;
	}
	if (ht_lookup(devitab, name) != NULL) {
		warnx("warning: duplicate definition of `%s', will use latest definition", name);
		d->d_umax = number;
		return;
	}
	i = newdevi(name, number - 1, d);	/* foo 16 => "foo0..foo15" */
	if (ht_insert(devitab, name, i))
		panic("addpseudo(%s)", name);
	i->i_disable = disable;
	selectbase(d, NULL);
	*nextpseudo = i;
	nextpseudo = &i->i_next;
	npseudo++;
}

/*
 * Define a new instance of a specific device.
 */
static struct devi *
getdevi(const char *name)
{
	struct devi *i, *firsti;
	struct devbase *d;
	int unit;
	char base[NAMESIZE];

	if (split(name, strlen(name), base, sizeof base, &unit)) {
		error("invalid device name `%s'", name);
		return (NULL);
	}
	d = ht_lookup(devbasetab, intern(base));
	if (d == NULL) {
		error("%s: unknown device `%s'", name, base);
		return (NULL);
	}
	if (d->d_ispseudo) {
		error("%s: %s is a pseudo-device", name, base);
		return (NULL);
	}
	firsti = ht_lookup(devitab, name);
	i = newdevi(name, unit, d);
	if (firsti == NULL) {
		if (ht_insert(devitab, name, i))
			panic("getdevi(%s)", name);
		*d->d_ipp = i;
		d->d_ipp = &i->i_bsame;
	} else {
		while (firsti->i_alias)
			firsti = firsti->i_alias;
		firsti->i_alias = i;
	}
	*nextdevi = i;
	nextdevi = &i->i_next;
	ndevi++;
	return (i);
}

static const char *
concat(const char *name, int c)
{
	size_t len;
	char buf[NAMESIZE];

	len = strlen(name);
	if (len + 2 > sizeof(buf)) {
		error("device name `%s%c' too long", name, c);
		len = sizeof(buf) - 2;
	}
	bcopy(name, buf, len);
	buf[len] = c;
	buf[len + 1] = 0;
	return (intern(buf));
}

const char *
starref(const char *name)
{

	return (concat(name, '*'));
}

const char *
wildref(const char *name)
{

	return (concat(name, '?'));
}

/*
 * Split a name like "foo0" into base name (foo) and unit number (0).
 * Return 0 on success.  To make this useful for names like "foo0a",
 * the length of the "foo0" part is one of the arguments.
 */
static int
split(const char *name, size_t nlen, char *base, size_t bsize, int *aunit)
{
	const char *cp;
	int c;
	size_t l;

	l = nlen;
	if (l < 2 || l >= bsize || isdigit((unsigned char)*name))
		return (1);
	c = (u_char)name[--l];
	if (!isdigit((unsigned char)c)) {
		if (c == '*')
			*aunit = STAR;
		else if (c == '?')
			*aunit = WILD;
		else
			return (1);
	} else {
		cp = &name[l];
		while (isdigit((unsigned char)cp[-1]))
			l--, cp--;
		*aunit = atoi(cp);
	}
	bcopy(name, base, l);
	base[l] = 0;
	return (0);
}

/*
 * We have an instance of the base foo, so select it and all its
 * attributes for "optional foo".
 */
static void
selectbase(struct devbase *d, struct deva *da)
{
	struct attr *a;
	struct nvlist *nv;

	(void)ht_insert(selecttab, d->d_name, (char *)d->d_name);
	for (nv = d->d_attrs; nv != NULL; nv = nv->nv_next) {
		a = nv->nv_ptr;
		(void)ht_insert(selecttab, a->a_name, (char *)a->a_name);
	}
	if (da != NULL) {
		(void)ht_insert(selecttab, da->d_name, (char *)da->d_name);
		for (nv = da->d_attrs; nv != NULL; nv = nv->nv_next) {
			a = nv->nv_ptr;
			(void)ht_insert(selecttab, a->a_name,
			    (char *)a->a_name);
		}
	}
}

/*
 * Is the given pointer on the given list of pointers?
 */
static int
onlist(struct nvlist *nv, void *ptr)
{
	for (; nv != NULL; nv = nv->nv_next)
		if (nv->nv_ptr == ptr)
			return (1);
	return (0);
}

static char *
extend(char *p, const char *name)
{
	int l;

	l = strlen(name);
	bcopy(name, p, l);
	p += l;
	*p++ = ',';
	*p++ = ' ';
	return (p);
}

/*
 * Check that we got all required locators, and default any that are
 * given as "?" and have defaults.  Return 0 on success.
 */
static const char **
fixloc(const char *name, struct attr *attr, struct nvlist *got)
{
	struct nvlist *m, *n;
	int ord;
	const char **lp;
	int nmissing, nextra, nnodefault;
	char *mp, *ep, *ndp;
	char missing[1000], extra[1000], nodefault[1000];
	static const char *nullvec[1];

	/*
	 * Look for all required locators, and number the given ones
	 * according to the required order.  While we are numbering,
	 * set default values for defaulted locators.
	 */
	if (attr->a_loclen == 0)	/* e.g., "at root" */
		lp = nullvec;
	else
		lp = ereallocarray(NULL, attr->a_loclen + 1, 
		    sizeof(const char *));
	for (n = got; n != NULL; n = n->nv_next)
		n->nv_int = -1;
	nmissing = 0;
	mp = missing;
	/* yes, this is O(mn), but m and n should be small */
	for (ord = 0, m = attr->a_locs; m != NULL; m = m->nv_next, ord++) {
		for (n = got; n != NULL; n = n->nv_next) {
			if (n->nv_name == m->nv_name) {
				n->nv_int = ord;
				break;
			}
		}
		if (n == NULL && m->nv_int == 0) {
			nmissing++;
			mp = extend(mp, m->nv_name);
		}
		lp[ord] = m->nv_str;
	}
	if (ord != attr->a_loclen)
		panic("fixloc");
	lp[ord] = NULL;
	nextra = 0;
	ep = extra;
	nnodefault = 0;
	ndp = nodefault;
	for (n = got; n != NULL; n = n->nv_next) {
		if (n->nv_int >= 0) {
			if (n->nv_str != NULL)
				lp[n->nv_int] = n->nv_str;
			else if (lp[n->nv_int] == NULL) {
				nnodefault++;
				ndp = extend(ndp, n->nv_name);
			}
		} else {
			nextra++;
			ep = extend(ep, n->nv_name);
		}
	}
	if (nextra) {
		ep[-2] = 0;	/* kill ", " */
		error("%s: extraneous locator%s: %s",
		    name, nextra > 1 ? "s" : "", extra);
	}
	if (nmissing) {
		mp[-2] = 0;
		error("%s: must specify %s", name, missing);
	}
	if (nnodefault) {
		ndp[-2] = 0;
		error("%s: cannot wildcard %s", name, nodefault);
	}
	if (nmissing || nnodefault) {
		free(lp);
		lp = NULL;
	}
	return (lp);
}
@


1.35
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.34 2014/05/18 09:29:54 espie Exp $	*/
a497 2

#define ABS(x) ((x) < 0 ? -(x) : (x))
@


1.34
log
@use reallocarray and friends. okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.33 2013/11/23 17:38:15 deraadt Exp $	*/
d44 1
a44 1
#include <sys/param.h>
@


1.33
log
@unsigned char casts for ctype
ok jca
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.32 2011/10/02 22:20:50 edd Exp $	*/
d1102 2
a1103 1
		lp = emalloc((attr->a_loclen + 1) * sizeof(const char *));
@


1.32
log
@Fix some minor things in config(8):
 * As haesbaert suggests, correctly order include files.
 * Found some old style function defs. Updated.
 * Found a prototype inside a function. Moved.

OK nicm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.31 2008/03/24 21:35:03 maja Exp $	*/
d444 1
a444 1
	if (isdigit(*--p)) {
d579 1
a579 1
	    isdigit(cp[-1])) {
d1008 1
a1008 1
	if (l < 2 || l >= bsize || isdigit(*name))
d1011 1
a1011 1
	if (!isdigit(c)) {
d1020 1
a1020 1
		while (isdigit(cp[-1]))
@


1.31
log
@Make it possible to disable/enable pseudo devices in UKC, config file and
at config -e. -moj  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.30 2004/01/04 18:30:05 deraadt Exp $	*/
d45 1
d47 1
d51 1
a51 1
#include <err.h>
@


1.30
log
@knf and lint
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.29 2003/06/28 04:55:07 deraadt Exp $	*/
d891 1
a891 1
addpseudo(const char *name, int number)
d913 1
@


1.29
log
@ansi & prototype cleanup.  tested in mkr on most arch's.  ok dhartmei
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.28 2003/06/02 23:36:52 millert Exp $	*/
a60 1
static const char *s_qmark;
a117 1
	s_qmark = intern("?");
d405 1
a405 1
				     a ? a->a_name : "root", da->d_name);
@


1.28
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.27 2002/06/11 05:58:27 nordin Exp $	*/
d93 1
a93 1
initsem()
d126 1
a126 1
enddefs()
d146 1
a146 2
setdefmaxusers(min, def, max)
	int min, def, max;
d159 1
a159 2
setmaxusers(n)
	int n;
d180 1
a180 3
defattr(name, locs)
	const char *name;
	struct nvlist *locs;
d216 1
a216 3
has_errobj(nv, obj)
	struct nvlist *nv;
	void *obj;
d231 1
a231 3
addtoattr(l, dev)
	struct nvlist *l;
	struct devbase *dev;
d244 2
a245 4
defdev(dev, ispseudo, loclist, attrs)
	struct devbase *dev;
	int ispseudo;
	struct nvlist *loclist, *attrs;
d300 1
a300 2
getdevbase(name)
	const char *name;
d343 2
a344 4
defdevattach(deva, dev, atlist, attrs)
	struct deva *deva;
	struct devbase *dev;
	struct nvlist *atlist, *attrs;
d432 1
a432 2
getdevattach(name)
	const char *name;
d473 1
a473 2
getattr(name)
	const char *name;
d489 1
a489 3
setmajor(d, n)
	struct devbase *d;
	int n;
d502 1
a502 3
exclude(nv, name, what)
	struct nvlist *nv;
	const char *name, *what;
d518 2
a519 5
resolve(nvp, name, what, dflt, part)
	struct nvlist **nvp;
	const char *name, *what;
	struct nvlist *dflt;
	int part;
d600 2
a601 5
lresolve(nvp, name, what, dflt, part)
	struct nvlist **nvp;
	const char *name, *what;
	struct nvlist *dflt;
	int part;
d615 1
a615 2
addconf(cf0)
	struct config *cf0;
d667 1
a667 4
setconf(npp, what, v)
	struct nvlist **npp;
	const char *what;
	struct nvlist *v;
d678 1
a678 4
newdevi(name, unit, d)
	const char *name;
	int unit;
	struct devbase *d;
d707 1
a707 2
enabledev(name, at)
	const char *name, *at;
d757 2
a758 4
adddev(name, at, loclist, flags, disable)
	const char *name, *at;
	struct nvlist *loclist;
	int flags, disable;
d893 1
a893 3
addpseudo(name, number)
	const char *name;
	int number;
d925 1
a925 2
getdevi(name)
	const char *name;
d964 1
a964 3
concat(name, c)
	const char *name;
	int c;
d981 1
a981 2
starref(name)
	const char *name;
d988 1
a988 2
wildref(name)
	const char *name;
d1000 1
a1000 6
split(name, nlen, base, bsize, aunit)
	const char *name;
	size_t nlen;
	char *base;
	size_t bsize;
	int *aunit;
d1033 1
a1033 3
selectbase(d, da)
	struct devbase *d;
	struct deva *da;
d1057 1
a1057 3
onlist(nv, ptr)
	struct nvlist *nv;
	void *ptr;
d1066 1
a1066 3
extend(p, name)
	char *p;
	const char *name;
d1083 1
a1083 4
fixloc(name, attr, got)
	const char *name;
	struct attr *attr;
	struct nvlist *got;
@


1.27
log
@Remove \n from warnx(3). ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.26 2002/05/29 09:45:39 deraadt Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.26
log
@more snprintf
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.25 2002/03/14 16:44:24 mpech Exp $	*/
d173 1
a173 1
		warnx("warning: minimum of %d maxusers assumed\n", minmaxusers);
@


1.25
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.24 2002/02/17 19:42:35 millert Exp $	*/
d581 2
a582 1
			(void)sprintf(buf, "<%d/%d>", maj, min);
d584 3
a586 2
			(void)sprintf(buf, "%s%d%c", dev->d_name,
			    min / maxpartitions, (min % maxpartitions) + 'a');
@


1.24
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.23 2002/02/16 21:28:01 millert Exp $	*/
d132 1
a132 1
	register struct devbase *dev;
d190 3
a192 3
	register struct attr *a;
	register struct nvlist *nv;
	register int len;
d225 2
a226 2
	register struct nvlist *nv;
	register void *obj;
d242 2
a243 2
	register struct nvlist *l;
	register struct devbase *dev;
d245 1
a245 1
	register struct nvlist *n;
d257 1
a257 1
	register struct devbase *dev;
d261 2
a262 2
	register struct nvlist *nv;
	register struct attr *a;
d317 2
a318 2
	register u_char *p;
	register struct devbase *dev;
d359 1
a359 1
	register struct deva *deva;
d363 3
a365 3
	register struct nvlist *nv;
	register struct attr *a;
	register struct deva *da;
d452 2
a453 2
	register u_char *p;
	register struct deva *deva;
d542 1
a542 1
	register struct nvlist **nvp;
d545 1
a545 1
	register int part;
d547 4
a550 4
	register struct nvlist *nv;
	register struct devbase *dev;
	register const char *cp;
	register int maj, min, l;
d625 1
a625 1
	register struct nvlist **nvp;
d643 1
a643 1
	register struct config *cf0;
d645 2
a646 2
	register struct config *cf;
	register struct nvlist *nv;
d696 1
a696 1
	register struct nvlist **npp;
d714 1
a714 1
	register struct devi *i;
d797 6
a802 6
	register struct devi *i;	/* the new instance */
	register struct attr *attr;	/* attribute that allows attach */
	register struct devbase *ib;	/* i->i_base */
	register struct devbase *ab;	/* not NULL => at another dev */
	register struct nvlist *nv;
	register struct deva *iba;	/* devbase attachment used */
d934 2
a935 2
	register struct devbase *d;
	register struct devi *i;
d967 2
a968 2
	register struct devi *i, *firsti;
	register struct devbase *d;
d1045 1
a1045 1
	register const char *name;
d1051 2
a1052 2
	register const char *cp;
	register int c;
d1083 2
a1084 2
	register struct devbase *d;
	register struct deva *da;
d1086 2
a1087 2
	register struct attr *a;
	register struct nvlist *nv;
d1109 2
a1110 2
	register struct nvlist *nv;
	register void *ptr;
d1120 1
a1120 1
	register char *p;
d1123 1
a1123 1
	register int l;
d1140 2
a1141 2
	register struct attr *attr;
	register struct nvlist *got;
d1143 3
a1145 3
	register struct nvlist *m, *n;
	register int ord;
	register const char **lp;
@


1.23
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.22 2001/12/05 10:11:23 deraadt Exp $	*/
d83 4
a86 4
static int resolve __P((struct nvlist **, const char *, const char *,
			struct nvlist *, int));
static int lresolve __P((struct nvlist **, const char *, const char *,
			struct nvlist *, int));
@


1.22
log
@more free KNF from maja, though this was hard to do
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.21 2001/01/24 20:13:00 art Exp $	*/
d80 3
a82 3
static int has_errobj __P((struct nvlist *, void *));
static struct nvlist *addtoattr __P((struct nvlist *, struct devbase *));
static int exclude __P((struct nvlist *, const char *, const char *));
d87 8
a94 8
static struct devi *newdevi __P((const char *, int, struct devbase *d));
static struct devi *getdevi __P((const char *));
static const char *concat __P((const char *, int));
static char *extend __P((char *, const char *));
static int split __P((const char *, size_t, char *, size_t, int *));
static void selectbase __P((struct devbase *, struct deva *));
static int onlist __P((struct nvlist *, void *));
static const char **fixloc __P((const char *, struct attr *, struct nvlist *));
@


1.21
log
@Include err.h for warnx.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.20 2001/01/23 17:43:21 deraadt Exp $	*/
d849 1
a849 1
		 *     it has, and make sure that we can attach to them.    
@


1.20
log
@KNF stuff which angelos is too much of a baby to get right
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.19 2001/01/23 06:02:59 angelos Exp $	*/
d53 1
@


1.19
log
@Allow entries like "foo at bar enable", which override previous
entries like "foo bar bar disable"; useful for kernel config lamers
like myself who don't like to use 'config -e' or 'bsd -c' to manually
enable USB. Tested with uhci/ohci on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.18 2000/11/15 01:47:14 angelos Exp $	*/
d737 1
a737 1
 * Enable an already declared by disabled device.
d741 1
a741 1
        const char *name, *at;
d744 1
a744 1
        char atbuf[NAMESIZE];
d753 1
a753 1
	        error("invalid device `%s'", name);
d759 1
a759 1
	        error("invalid attachment name `%s'", at);
d765 1
a765 1
	        error("invalid attachment device `%s'", cp);
d769 3
a771 3
	        attr = nv->nv_ptr;
	        if (onlist(attr->a_devs, ib))
		  goto foundattachment;
d777 2
a778 2
	while (i && (i->i_atdev != ab))
	  i = i->i_alias;
d780 1
a780 1
	        error("%s at %s not found", name, at);
d782 2
a783 3
	}
	else
	  i->i_disable = 0; /* Enable */
@


1.18
log
@Fix bug introduced with overriding of pseudo-devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.17 2000/10/28 21:51:38 angelos Exp $	*/
d734 51
@


1.17
log
@Close PR 1419, use modified patch (original from peter.galbavy@@knowledge.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.16 2000/01/03 19:27:23 angelos Exp $	*/
d897 2
a898 2
		ht_remove(devitab, name);
		d->d_umax = 0;
@


1.17.2.1
log
@Pull in patch from current:
Fix (angelos):
Fix bug introduced with overriding of pseudo-devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.18 2000/11/15 01:47:14 angelos Exp $	*/
d897 2
a898 2
		d->d_umax = number;
		return;
@


1.16
log
@Use warnx() instead of the error() kludge
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.15 2000/01/03 19:20:30 angelos Exp $	*/
d896 3
a898 2
		error("`%s' already defined", name);
		return;
@


1.15
log
@Allow for duplicate maxusers definitions (so one can include a GENERIC
and use a different value). config will print a warning that there has
been a duplicate entry, and will use the second definition. More
generally, config will end up using the last maxusers definition in
the config file.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.14 1999/04/18 17:15:09 espie Exp $	*/
d168 1
a168 2
		error("warning: duplicate maxusers parameter, will use latest definition (%d)", n);
		errors--;	/* take it away */
d172 1
a172 2
		error("warning: minimum of %d maxusers assumed\n", minmaxusers);
		errors--;	/* take it away */
d175 1
a175 2
		error("warning: maxusers (%d) > %d", n, maxmaxusers);
		errors--;
@


1.14
log
@Make -W -Wall happier.
Classical modern C type-checking, signed vs. unsigned.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.13 1999/01/19 01:11:24 niklas Exp $	*/
d168 2
a169 2
		error("duplicate maxusers parameter");
		return;
@


1.13
log
@Retry sane probe ordering, i.e. ordered like the attachments
found in the various config files.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.12 1997/11/13 08:21:56 deraadt Exp $	*/
d556 2
a557 1
	if ((u_int)(part -= 'a') >= maxpartitions)
d959 1
a959 1
	register int len;
d1003 2
a1004 1
	register int c, l;
@


1.12
log
@from mycroft;
Allow options and makeoptions to take an empty string as a value.
Add `object' and `library' keywords to pull in precompiled .o and .a files.
Syntax is like the `file' keyword; e.g.:
object  arch/i386/i386/mumble.o         [mumble] [needs-flag]
Largely from Michael Richardson in PR 3833, with some changes by me.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.11 1997/08/07 10:36:59 deraadt Exp $	*/
d731 1
@


1.11
log
@jason is tired.  this is not needed. our locator table stuff uses less
memory too.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.9 1997/01/18 02:24:19 briggs Exp $	*/
d89 1
@


1.10
log
@cf_locnames support, from NetBSD (jtk, according to the RCSids).
@
text
@d2 1
a2 1
/*	$NetBSD: sem.c,v 1.14 1997/03/14 20:43:05 leo Exp $	*/
d66 1
@


1.9
log
@Sync. with current NetBSD--keeping local changes.
@
text
@d1 2
a2 2
/*	$OpenBSD: sem.c,v 1.8 1996/12/12 00:24:44 niklas Exp $	*/
/*	$NetBSD: sem.c,v 1.10 1996/11/11 23:40:11 gwr Exp $	*/
a65 1
static struct hashtab *attrtab;		/* for attribute lookup */
@


1.8
log
@Revert sane attach ordering for the time being
@
text
@d1 2
a2 2
/*	$OpenBSD: sem.c,v 1.6 1996/10/23 22:38:00 niklas Exp $	*/
/*	$NetBSD: sem.c,v 1.9 1996/08/31 21:15:15 mycroft Exp $	*/
d124 3
d128 1
a128 2
enddefs(fname)
	const char *fname;
d136 1
a136 1
			    fname, dev->d_name);
@


1.7
log
@Remove dups from cfdata via marking algorithm
@
text
@a727 1
	i->i_cfindex = -1;
@


1.7.2.1
log
@Sync with the trunk
@
text
@d1 2
a2 2
/*	$OpenBSD: sem.c,v 1.9 1997/01/18 02:24:19 briggs Exp $	*/
/*	$NetBSD: sem.c,v 1.10 1996/11/11 23:40:11 gwr Exp $	*/
a123 3
/* Name of include file just ended (set in scan.l) */
extern const char *lastfile;

d125 2
a126 1
enddefs()
d134 1
a134 1
			    lastfile, dev->d_name);
@


1.6
log
@Merge of NetBSD 961020.  Includes flexible build/source dir specs
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.5 1996/08/29 03:33:06 deraadt Exp $	*/
d728 1
@


1.5
log
@fix some warnings and errors
@
text
@d1 2
a2 2
/*	$OpenBSD: sem.c,v 1.4 1996/07/07 22:02:21 maja Exp $	*/
/*	$NetBSD: sem.c,v 1.8 1996/03/17 21:12:03 cgd Exp $	*/
d354 1
a354 1
 * There may be a list of vectors and a list of (plain) attributes.
d357 1
a357 1
defdevattach(deva, dev, atlist, vectors, attrs)
d360 1
a360 1
	struct nvlist *atlist, *vectors, *attrs;
a398 1
	deva->d_vectors = vectors;
a439 1
	nvfreel(vectors);
a474 1
		deva->d_vectors = NULL;
a857 5
	if (i->i_unit == STAR && iba->d_vectors != NULL) {
		error("%s's cannot be *'d as they have preset vectors",
		    ib->d_name);
		goto bad;
	}
@


1.4
log
@Add support for allowing disabled devices in a config file. e.g.
ep0 at isa? disable port ? irq ?
disable must be placed before any attribute for the device. /moj
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.3 1996/04/21 23:40:25 deraadt Exp $	*/
a858 1
ok:
@


1.3
log
@sync to netbsd 960418
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.c,v 1.2 1996/03/25 15:55:13 niklas Exp $	*/
d742 1
a742 1
adddev(name, at, loclist, flags)
d745 1
a745 1
	int flags;
d873 1
@


1.2
log
@From NetBSD: merge of 960317
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: sem.c,v 1.2 1996/03/03 17:28:37 thorpej Exp $	*/
d4 1
a4 1
/* 
d72 1
d74 1
d90 1
a90 1
static void selectbase __P((struct devbase *));
d104 3
d246 1
a246 2
	n = newnv(NULL, NULL, dev, 0);
	n->nv_next = l;
d251 2
a252 3
 * Device a device, giving its allowable parent attachments, if any.
 * This may (or may not) also define an interface attribute and/or refer
 * to existing attributes.  There may be a list of vectors.
d255 1
a255 1
defdev(dev, ispseudo, atlist, vectors, loclist, attrs)
d258 1
a258 1
	struct nvlist *atlist, *vectors, *loclist, *attrs;
d284 2
a285 3
		nv = newnv(dev->d_name, NULL, getattr(dev->d_name), 0);
		nv->nv_next = attrs;
		attrs = nv;
a289 2
	dev->d_atlist = atlist;
	dev->d_vectors = vectors;
a292 22
	 * Turn the `at' list into interface attributes (map each
	 * nv_name to an attribute, or to NULL for root), and add
	 * this device to those attributes, so that children can
	 * be listed at this particular device if they are supported
	 * by that attribute.
	 */
	for (nv = atlist; nv != NULL; nv = nv->nv_next) {
		if (nv->nv_name == NULL) {
			nv->nv_ptr = NULL;	/* at root */
			continue;
		}
		nv->nv_ptr = a = getattr(nv->nv_name);
		if (a == &errattr)
			continue;		/* already complained */
		if (!a->a_iattr)
			error("%s cannot be at plain attribute `%s'",
			    dev->d_name, a->a_name);
		else
			a->a_devs = addtoattr(a->a_devs, dev);
	}

	/*
a303 2
	nvfreel(atlist);
	nvfreel(vectors);
a337 2
		dev->d_atlist = NULL;
		dev->d_vectors = NULL;
d341 2
d353 137
d537 1
a537 1
/* 
d569 1
a569 1
		*nvp = nv = newnv(NULL, NULL, NULL, d);
d723 1
d728 1
d752 1
d756 1
d759 1
d770 7
a776 1
		if (!onlist(ib->d_atlist, NULL)) {
d791 43
a833 22
		if ((attr = ht_lookup(attrtab, cp)) == NULL) {
			/*
			 * Have to work a bit harder to see whether we have
			 * something like "tg0 at esp0" (where esp is merely
			 * not an attribute) or "tg0 at nonesuch0" (where
			 * nonesuch is not even a device).
			 */
			if ((ab = ht_lookup(devbasetab, cp)) == NULL) {
				error("%s at %s: `%s' unknown",
				    name, at, atbuf);
				goto bad;
			}
			/*
			 * See if the named parent carries an attribute
			 * that allows it to supervise device ib.
			 */
			for (nv = ab->d_attrs; nv != NULL; nv = nv->nv_next) {
				attr = nv->nv_ptr;
				if (onlist(attr->a_devs, ib))
					goto ok;
			}
			attr = &errattr;/* now onlist below will fail */
d835 9
a843 3
		if (!onlist(attr->a_devs, ib)) {
			error("%s's cannot attach to %s's", ib->d_name, atbuf);
			goto bad;
d845 13
d862 1
a862 1
	if (i->i_unit == STAR && ib->d_vectors != NULL) {
d870 1
d873 5
a877 1
	selectbase(ib);
d908 1
a908 1
	selectbase(d);
d1035 1
a1035 1
selectbase(d)
d1037 1
d1046 8
@


1.1
log
@Initial revision
@
text
@d1 3
a45 1
 *	$Id: sem.c,v 1.1 1995/04/28 06:55:23 cgd Exp $
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
