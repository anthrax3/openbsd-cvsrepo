head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.14
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.16
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.12
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.8
	OPENBSD_5_9_BASE:1.7
	NSD_4_1_6:1.1.1.6
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	NSD_4_1_3:1.1.1.6
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	NSD_4_1_1:1.1.1.6
	NSD_4_1_0:1.1.1.6
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	NSD_4_0_3:1.1.1.6
	NSD_4_0_2:1.1.1.6
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	NSD_4_0_1:1.1.1.6
	NSD_4_0_0:1.1.1.5
	NSD_3_2_16:1.1.1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	NSD_3_2_15:1.1.1.3
	NSD_3_2_14:1.1.1.2
	NSD_3_2_13:1.1.1.2
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	NSD_3_2_11:1.1.1.2
	NSD_3_2_10:1.1.1.2
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	NSD_3_2_9:1.1.1.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	NSD_3_2_8:1.1.1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	NSD_3_2_6:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	NSD_3_2_5:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	NSD_3_2_4:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.02.04.03.07.25;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.26.12.53.58;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2013.09.03.09.26.58;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2013.02.18.10.18.39;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.21.18.29.56;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.27.12.29.14;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.15.19.24.54;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.01.15.19.24.54;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.05.21.18.17.11;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.02.18.10.17.43;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.09.03.09.21.37;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.11.26.12.50.13;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.02.04.01.54.02;	author brad;	state Exp;
branches;
next	;


desc
@@


1.7
log
@merge conflicts
@
text
@/*
 * zonec.h -- zone compiler.
 *
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
 *
 * See LICENSE for the license.
 *
 */

#ifndef _ZONEC_H_
#define _ZONEC_H_

#include "namedb.h"

#define	MAXTOKENSLEN	512		/* Maximum number of tokens per entry */
#define	B64BUFSIZE	65535		/* Buffer size for b64 conversion */
#define	ROOT		(const uint8_t *)"\001"

#define NSEC_WINDOW_COUNT     256
#define NSEC_WINDOW_BITS_COUNT 256
#define NSEC_WINDOW_BITS_SIZE  (NSEC_WINDOW_BITS_COUNT / 8)

#define IPSECKEY_NOGATEWAY      0       /* RFC 4025 */
#define IPSECKEY_IP4            1
#define IPSECKEY_IP6            2
#define IPSECKEY_DNAME          3

#define LINEBUFSZ 1024

struct lex_data {
    size_t   len;		/* holds the label length */
    char    *str;		/* holds the data */
};

#define DEFAULT_TTL 3600

/* administration struct */
typedef struct zparser zparser_type;
struct zparser {
	region_type *region;	/* Allocate for parser lifetime data.  */
	region_type *rr_region;	/* Allocate RR lifetime data.  */
	namedb_type *db;

	const char *filename;
	uint32_t default_ttl;
	uint16_t default_class;
	zone_type *current_zone;
	domain_type *origin;
	domain_type *prev_dname;
	domain_type *default_apex;

	int error_occurred;
	unsigned int errors;
	unsigned int line;

	rr_type current_rr;
	rdata_atom_type *temporary_rdatas;
};

extern zparser_type *parser;

/* used in zonec.lex */
extern FILE *yyin;

/*
 * Used to mark bad domains and domain names.  Do not dereference
 * these pointers!
 */
extern const dname_type *error_dname;
extern domain_type *error_domain;

int yyparse(void);
int yylex(void);
int yylex_destroy(void);
/*int yyerror(const char *s);*/
void yyrestart(FILE *);

void zc_warning(const char *fmt, ...) ATTR_FORMAT(printf, 1, 2);
void zc_warning_prev_line(const char *fmt, ...) ATTR_FORMAT(printf, 1, 2);
void zc_error(const char *fmt, ...) ATTR_FORMAT(printf, 1, 2);
void zc_error_prev_line(const char *fmt, ...) ATTR_FORMAT(printf, 1, 2);

void parser_push_stringbuf(char* str);
void parser_pop_stringbuf(void);

int process_rr(void);
uint16_t *zparser_conv_hex(region_type *region, const char *hex, size_t len);
uint16_t *zparser_conv_hex_length(region_type *region, const char *hex, size_t len);
uint16_t *zparser_conv_time(region_type *region, const char *time);
uint16_t *zparser_conv_services(region_type *region, const char *protostr, char *servicestr);
uint16_t *zparser_conv_serial(region_type *region, const char *periodstr);
uint16_t *zparser_conv_period(region_type *region, const char *periodstr);
uint16_t *zparser_conv_short(region_type *region, const char *text);
uint16_t *zparser_conv_long(region_type *region, const char *text);
uint16_t *zparser_conv_byte(region_type *region, const char *text);
uint16_t *zparser_conv_a(region_type *region, const char *text);
uint16_t *zparser_conv_aaaa(region_type *region, const char *text);
uint16_t *zparser_conv_ilnp64(region_type *region, const char *text);
uint16_t *zparser_conv_eui(region_type *region, const char *text, size_t len);
uint16_t *zparser_conv_text(region_type *region, const char *text, size_t len);
uint16_t *zparser_conv_long_text(region_type *region, const char *text, size_t len);
uint16_t *zparser_conv_tag(region_type *region, const char *text, size_t len);
uint16_t *zparser_conv_dns_name(region_type *region, const uint8_t* name, size_t len);
uint16_t *zparser_conv_b32(region_type *region, const char *b32);
uint16_t *zparser_conv_b64(region_type *region, const char *b64);
uint16_t *zparser_conv_rrtype(region_type *region, const char *rr);
uint16_t *zparser_conv_nxt(region_type *region, uint8_t nxtbits[]);
uint16_t *zparser_conv_nsec(region_type *region, uint8_t nsecbits[NSEC_WINDOW_COUNT][NSEC_WINDOW_BITS_SIZE]);
uint16_t *zparser_conv_loc(region_type *region, char *str);
uint16_t *zparser_conv_algorithm(region_type *region, const char *algstr);
uint16_t *zparser_conv_certificate_type(region_type *region,
					const char *typestr);
uint16_t *zparser_conv_apl_rdata(region_type *region, char *str);

void parse_unknown_rdata(uint16_t type, uint16_t *wireformat);

uint32_t zparser_ttl2int(const char *ttlstr, int* error);
void zadd_rdata_wireformat(uint16_t *data);
void zadd_rdata_txt_wireformat(uint16_t *data, int first);
void zadd_rdata_txt_clean_wireformat();
void zadd_rdata_domain(domain_type *domain);

void set_bitnsec(uint8_t  bits[NSEC_WINDOW_COUNT][NSEC_WINDOW_BITS_SIZE],
		 uint16_t index);
uint16_t *alloc_rdata_init(region_type *region, const void *data, size_t size);

/* zparser.y */
zparser_type *zparser_create(region_type *region, region_type *rr_region,
			     namedb_type *db);
void zparser_init(const char *filename, uint32_t ttl, uint16_t klass,
		  const dname_type *origin);

/* parser start and stop to parse a zone */
void zonec_setup_parser(namedb_type* db);
void zonec_desetup_parser(void);
/* parse a zone into memory. name is origin. zonefile is file to read.
 * returns number of errors; failure may have read a partial zone */
unsigned int zonec_read(const char *name, const char *zonefile, zone_type* zone);
/* parse a string into the region. and with given domaintable. global parser
 * is restored afterwards. zone needs apex set. returns last domain name
 * parsed and the number rrs parse. return number of errors, 0 is success.
 * The string must end with a newline after the RR. */
int zonec_parse_string(region_type* region, domain_table_type* domains,
	zone_type* zone, char* str, domain_type** parsed, int* num_rrs);

#endif /* _ZONEC_H_ */
@


1.6
log
@merge conflicts
@
text
@a98 1
#ifdef DRAFT_RRTYPES
a99 1
#endif
d101 2
@


1.5
log
@merge NSD 3.2.16
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
d74 1
d83 3
d132 13
@


1.4
log
@resolve conflicts
@
text
@d95 3
@


1.3
log
@resolve conflicts and regen configure using autoconf-2.65
@
text
@d94 1
@


1.2
log
@upgrade to NSD 3.2.7; ok sthen@@, tested by multiple people
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
@


1.1
log
@Initial revision
@
text
@d111 2
@


1.1.1.1
log
@NSD v3.2.4
@
text
@@


1.1.1.2
log
@NSD v3.2.8
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
a110 2
void zadd_rdata_txt_wireformat(uint16_t *data, int first);
void zadd_rdata_txt_clean_wireformat();
@


1.1.1.3
log
@Update to NSD 3.2.15, ok brad@@ phessler@@ deraadt@@ also tested by okan@@
@
text
@a93 1
uint16_t *zparser_conv_ilnp64(region_type *region, const char *text);
@


1.1.1.4
log
@update to NSD 3.2.16, ok deraadt@@ brad@@
@
text
@a94 3
#ifdef DRAFT_RRTYPES
uint16_t *zparser_conv_eui(region_type *region, const char *text, size_t len);
#endif
@


1.1.1.5
log
@import NSD 4.0.0, tests from Dorian BÃ¼ttner, Patrik Lundin, requested by brad@@
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
a73 1
int yylex_destroy(void);
a81 3
void parser_push_stringbuf(char* str);
void parser_pop_stringbuf(void);

a127 13

/* parser start and stop to parse a zone */
void zonec_setup_parser(namedb_type* db);
void zonec_desetup_parser(void);
/* parse a zone into memory. name is origin. zonefile is file to read.
 * returns number of errors; failure may have read a partial zone */
unsigned int zonec_read(const char *name, const char *zonefile, zone_type* zone);
/* parse a string into the region. and with given domaintable. global parser
 * is restored afterwards. zone needs apex set. returns last domain name
 * parsed and the number rrs parse. return number of errors, 0 is success.
 * The string must end with a newline after the RR. */
int zonec_parse_string(region_type* region, domain_table_type* domains,
	zone_type* zone, char* str, domain_type** parsed, int* num_rrs);
@


1.1.1.6
log
@update to NSD 4.0.1, ok sthen@@
@
text
@d99 1
d101 1
a102 2
uint16_t *zparser_conv_long_text(region_type *region, const char *text, size_t len);
uint16_t *zparser_conv_tag(region_type *region, const char *text, size_t len);
@


