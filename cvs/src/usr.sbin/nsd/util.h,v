head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	NSD_4_1_6:1.1.1.7
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	NSD_4_1_3:1.1.1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	NSD_4_1_1:1.1.1.6
	NSD_4_1_0:1.1.1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	NSD_4_0_3:1.1.1.5
	NSD_4_0_2:1.1.1.5
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	NSD_4_0_1:1.1.1.5
	NSD_4_0_0:1.1.1.5
	NSD_3_2_16:1.1.1.4
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	NSD_3_2_15:1.1.1.4
	NSD_3_2_14:1.1.1.4
	NSD_3_2_13:1.1.1.4
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	NSD_3_2_11:1.1.1.4
	NSD_3_2_10:1.1.1.3
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	NSD_3_2_9:1.1.1.3
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	NSD_3_2_8:1.1.1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	NSD_3_2_6:1.1.1.2
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	NSD_3_2_5:1.1.1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	NSD_3_2_4:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.08.31.07.31.20;	author florian;	state Exp;
branches;
next	1.10;
commitid	1gMwFuybgH2l617m;

1.10
date	2016.06.24.08.34.03;	author florian;	state Exp;
branches;
next	1.9;
commitid	Z9jVKJJMPmC3zw2t;

1.9
date	2015.12.09.00.36.26;	author sthen;	state Exp;
branches;
next	1.8;
commitid	oFaRJS86oPhcC6P7;

1.8
date	2015.07.17.17.36.33;	author sthen;	state Exp;
branches;
next	1.7;
commitid	2WtkENMkCz3GhSbE;

1.7
date	2014.09.16.17.01.38;	author brad;	state Exp;
branches;
next	1.6;
commitid	5uD1zN2z8VskC3BN;

1.6
date	2013.11.26.12.53.58;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.09.21.56.41;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.21.18.29.56;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.15.21.14.56;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.27.10.37.02;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.15.19.24.49;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.01.15.19.24.49;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.04.15.20.57.14;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.05.21.18.17.24;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.07.09.21.55.08;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.11.26.12.50.21;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.09.16.16.54.04;	author brad;	state Exp;
branches;
next	1.1.1.7;
commitid	BWSdZeElrpYSRdME;

1.1.1.7
date	2015.07.17.17.36.01;	author sthen;	state Exp;
branches;
next	;
commitid	Jeq5uGP63ff7nS9K;


desc
@@


1.11
log
@update to 4.1.11
"Working fine here." millert@@
OK dlg, sthen
@
text
@/*
 * util.h -- set of various support routines.
 *
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
 *
 * See LICENSE for the license.
 *
 */

#ifndef _UTIL_H_
#define _UTIL_H_

#include <sys/time.h>
#include <stdarg.h>
#include <stdio.h>
#include <time.h>
struct rr;
struct buffer;
struct region;

#ifdef HAVE_SYSLOG_H
#  include <syslog.h>
#else
#  define LOG_ERR 3
#  define LOG_WARNING 4
#  define LOG_NOTICE 5
#  define LOG_INFO 6
#endif

#define ALIGN_UP(n, alignment)  \
	(((n) + (alignment) - 1) & (~((alignment) - 1)))
#define PADDING(n, alignment)   \
	(ALIGN_UP((n), (alignment)) - (n))

/*
 * Initialize the logging system.  All messages are logged to stderr
 * until log_open and log_set_log_function are called.
 */
void log_init(const char *ident);

/*
 * Open the system log.  If FILENAME is not NULL, a log file is opened
 * as well.
 */
void log_open(int option, int facility, const char *filename);

/*
 * Reopen the logfile.
 */
void log_reopen(const char *filename, uint8_t verbose);

/*
 * Finalize the logging system.
 */
void log_finalize(void);

/*
 * Type of function to use for the actual logging.
 */
typedef void log_function_type(int priority, const char *message);

/*
 * The function used to log to the log file.
 */
log_function_type log_file;

/*
 * The function used to log to syslog.  The messages are also logged
 * using log_file.
 */
log_function_type log_syslog;

/*
 * Set the logging function to use (log_file or log_syslog).
 */
void log_set_log_function(log_function_type *log_function);

/*
 * Log a message using the current log function.
 */
void log_msg(int priority, const char *format, ...)
	ATTR_FORMAT(printf, 2, 3);

/*
 * Log a message using the current log function.
 */
void log_vmsg(int priority, const char *format, va_list args);

/*
 * Verbose output switch
 */
extern int verbosity;
#define VERBOSITY(level, args)					\
	do {							\
		if ((level) <= verbosity) {			\
			log_msg args ;				\
		}						\
	} while (0)

/*
 * Set the INDEXth bit of BITS to 1.
 */
void set_bit(uint8_t bits[], size_t index);

/*
 * Set the INDEXth bit of BITS to 0.
 */
void clear_bit(uint8_t bits[], size_t index);

/*
 * Return the value of the INDEXth bit of BITS.
 */
int get_bit(uint8_t bits[], size_t index);

/* A general purpose lookup table */
typedef struct lookup_table lookup_table_type;
struct lookup_table {
	int id;
	const char *name;
};

/*
 * Looks up the table entry by name, returns NULL if not found.
 */
lookup_table_type *lookup_by_name(lookup_table_type table[], const char *name);

/*
 * Looks up the table entry by id, returns NULL if not found.
 */
lookup_table_type *lookup_by_id(lookup_table_type table[], int id);

/*
 * (Re-)allocate SIZE bytes of memory.  Report an error if the memory
 * could not be allocated and exit the program.  These functions never
 * return NULL.
 */
void *xalloc(size_t size);
void *xmallocarray(size_t num, size_t size);
void *xalloc_zero(size_t size);
void *xalloc_array_zero(size_t num, size_t size);
void *xrealloc(void *ptr, size_t size);

/*
 * Mmap allocator routines.
 *
 */
#ifdef USE_MMAP_ALLOC
void *mmap_alloc(size_t size);
void mmap_free(void *ptr);
#endif /* USE_MMAP_ALLOC */

/*
 * Write SIZE bytes of DATA to FILE.  Report an error on failure.
 *
 * Returns 0 on failure, 1 on success.
 */
int write_data(FILE *file, const void *data, size_t size);

/*
 * like write_data, but keeps track of crc
 */
int write_data_crc(FILE *file, const void *data, size_t size, uint32_t* crc);

/*
 * Write the complete buffer to the socket, irrespective of short
 * writes or interrupts. This function blocks to write the data.
 * Returns 0 on error, 1 on success.
 */
int write_socket(int s, const void *data, size_t size);

/*
 * Copy data allowing for unaligned accesses in network byte order
 * (big endian).
 */
static inline void
write_uint16(void *dst, uint16_t data)
{
#ifdef ALLOW_UNALIGNED_ACCESSES
	* (uint16_t *) dst = htons(data);
#else
	uint8_t *p = (uint8_t *) dst;
	p[0] = (uint8_t) ((data >> 8) & 0xff);
	p[1] = (uint8_t) (data & 0xff);
#endif
}

static inline void
write_uint32(void *dst, uint32_t data)
{
#ifdef ALLOW_UNALIGNED_ACCESSES
	* (uint32_t *) dst = htonl(data);
#else
	uint8_t *p = (uint8_t *) dst;
	p[0] = (uint8_t) ((data >> 24) & 0xff);
	p[1] = (uint8_t) ((data >> 16) & 0xff);
	p[2] = (uint8_t) ((data >> 8) & 0xff);
	p[3] = (uint8_t) (data & 0xff);
#endif
}

static inline void
write_uint64(void *dst, uint64_t data)
{
	uint8_t *p = (uint8_t *) dst;
	p[0] = (uint8_t) ((data >> 56) & 0xff);
	p[1] = (uint8_t) ((data >> 48) & 0xff);
	p[2] = (uint8_t) ((data >> 40) & 0xff);
	p[3] = (uint8_t) ((data >> 32) & 0xff);
	p[4] = (uint8_t) ((data >> 24) & 0xff);
	p[5] = (uint8_t) ((data >> 16) & 0xff);
	p[6] = (uint8_t) ((data >> 8) & 0xff);
	p[7] = (uint8_t) (data & 0xff);
}

/*
 * Copy data allowing for unaligned accesses in network byte order
 * (big endian).
 */
static inline uint16_t
read_uint16(const void *src)
{
#ifdef ALLOW_UNALIGNED_ACCESSES
	return ntohs(* (uint16_t *) src);
#else
	uint8_t *p = (uint8_t *) src;
	return (p[0] << 8) | p[1];
#endif
}

static inline uint32_t
read_uint32(const void *src)
{
#ifdef ALLOW_UNALIGNED_ACCESSES
	return ntohl(* (uint32_t *) src);
#else
	uint8_t *p = (uint8_t *) src;
	return (p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3];
#endif
}

static inline uint64_t
read_uint64(const void *src)
{
	uint8_t *p = (uint8_t *) src;
	return
	    ((uint64_t)p[0] << 56) |
	    ((uint64_t)p[1] << 48) |
	    ((uint64_t)p[2] << 40) |
	    ((uint64_t)p[3] << 32) |
	    ((uint64_t)p[4] << 24) |
	    ((uint64_t)p[5] << 16) |
	    ((uint64_t)p[6] <<  8) |
	    (uint64_t)p[7];
}

/*
 * Print debugging information using log_msg,
 * set the logfile as /dev/stdout or /dev/stderr if you like.
 * nsd -F 0xFFFF enables all debug facilities.
 */
#define DEBUG_PARSER           0x0001U
#define DEBUG_ZONEC            0x0002U
#define DEBUG_QUERY            0x0004U
#define DEBUG_DBACCESS         0x0008U
#define DEBUG_NAME_COMPRESSION 0x0010U
#define DEBUG_XFRD             0x0020U
#define DEBUG_IPC              0x0040U

extern unsigned nsd_debug_facilities;
extern int nsd_debug_level;
#ifdef NDEBUG
#define DEBUG(facility, level, args)  /* empty */
#else
#define DEBUG(facility, level, args)				\
	do {							\
		if ((facility) & nsd_debug_facilities &&	\
		    (level) <= nsd_debug_level) {		\
			log_msg args ;				\
		}						\
	} while (0)
#endif

/* set to true to log time prettyprinted, or false to print epoch */
extern int log_time_asc;

/*
 * Timespec functions.
 */
int timespec_compare(const struct timespec *left, const struct timespec *right);
void timespec_add(struct timespec *left, const struct timespec *right);
void timespec_subtract(struct timespec *left, const struct timespec *right);

static inline void
timeval_to_timespec(struct timespec *left,
		    const struct timeval *right)
{
	left->tv_sec = right->tv_sec;
	left->tv_nsec = 1000 * right->tv_usec;
}

/* get the time */
void get_time(struct timespec* t);

/*
 * Converts a string representation of a period of time into
 * a long integer of seconds or serial value.
 *
 * Set the endptr to the first illegal character.
 *
 * Interface is similar as strtol(3)
 *
 * Returns:
 *	LONG_MIN if underflow occurs
 *	LONG_MAX if overflow occurs.
 *	otherwise number of seconds
 *
 * XXX These functions do not check the range.
 *
 */
uint32_t strtoserial(const char *nptr, const char **endptr);
uint32_t strtottl(const char *nptr, const char **endptr);

/*
 * Convert binary data to a string of hexadecimal characters.
 */
ssize_t hex_ntop(uint8_t const *src, size_t srclength, char *target,
		 size_t targsize);
ssize_t hex_pton(const char* src, uint8_t* target, size_t targsize);

/*
 * convert base32 data from and to string. Returns length.
 * -1 on error. Use (byte count*8)%5==0.
 */
int b32_pton(char const *src, uint8_t *target, size_t targsize);
int b32_ntop(uint8_t const *src, size_t srclength, char *target,
	size_t targsize);

/*
 * Strip trailing and leading whitespace from str.
 */
void strip_string(char *str);

/*
 * Convert a single (hexadecimal) digit to its integer value.
 */
int hexdigit_to_int(char ch);

/*
 * Convert TM to seconds since epoch (midnight, January 1st, 1970).
 * Like timegm(3), which is not always available.
 */
time_t mktime_from_utc(const struct tm *tm);

/*
 * Add bytes to given crc. Returns new CRC sum.
 * Start crc val with 0xffffffff on first call. XOR crc with
 * 0xffffffff at the end again to get final POSIX 1003.2 checksum.
 */
uint32_t compute_crc(uint32_t crc, uint8_t* data, size_t len);

/*
 * Compares two 32-bit serial numbers as defined in RFC1982.  Returns
 * <0 if a < b, 0 if a == b, and >0 if a > b.  The result is undefined
 * if a != b but neither is greater or smaller (see RFC1982 section
 * 3.2.).
 */
int compare_serial(uint32_t a, uint32_t b);

/*
 * Generate a random query ID.
 */
uint16_t qid_generate(void);
/* value between 0 .. (max-1) inclusive */
int random_generate(int max);

/*
 * call region_destroy on (region*)data, useful for region_add_cleanup().
 */
void cleanup_region(void *data);

/*
 * Region used to store owner and origin of previous RR (used
 * for pretty printing of zone data).
 * Keep the same between calls to print_rr.
 */
struct state_pretty_rr {
	struct region *previous_owner_region;
	const struct dname *previous_owner;
	const struct dname *previous_owner_origin;
};
struct state_pretty_rr* create_pretty_rr(struct region* region);
/* print rr to file, returns 0 on failure(nothing is written) */
int print_rr(FILE *out, struct state_pretty_rr* state, struct rr *record,
	struct region* tmp_region, struct buffer* tmp_buffer); 

/*
 * Convert a numeric rcode value to a human readable string
 */
const char* rcode2str(int rc);

void addr2str(
#ifdef INET6
	struct sockaddr_storage *addr
#else
	struct sockaddr_in *addr
#endif
	, char* str, size_t len);

#endif /* _UTIL_H_ */
@


1.10
log
@Update to 4.1.10
Testing by millert@@, sthen@@ and me.
came up with the same diff & OK sthen@@
@
text
@d201 14
d239 15
@


1.9
log
@comment typo fixes, from nsd 4.1.7rc1
@
text
@d272 2
@


1.8
log
@merge conflicts
@
text
@d313 1
a313 1
 * Convert a single (hexidecimal) digit to its integer value.
@


1.7
log
@merge conflicts
@
text
@d138 1
d140 1
@


1.6
log
@merge conflicts
@
text
@d18 2
d252 2
d360 2
a361 1
int print_rr(FILE *out, struct state_pretty_rr* state, struct rr *record);
@


1.5
log
@resolve conflicts
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
a12 1
#include "config.h"
a32 20
/* Counter for statistics */
typedef unsigned long stc_t;

/**
 * Statistics.
 *
 */
struct nsdst {
	time_t  boot;
	int     period;         /* Produce statistics dump every st_period seconds */
	stc_t   qtype[257];     /* Counters per qtype */
	stc_t   qclass[4];      /* Class IN or Class CH or other */
	stc_t   qudp, qudp6;    /* Number of queries udp and udp6 */
	stc_t   ctcp, ctcp6;    /* Number of tcp and tcp6 connections */
	stc_t   rcode[17], opcode[6]; /* Rcodes & opcodes */
	/* Dropped, truncated, queries for nonconfigured zone, tx errors */
	stc_t   dropped, truncated, wrongzone, txerr, rxerr;
	stc_t   edns, ednserr, raxfr, nona;
};

d336 2
d363 1
a363 13
/*
 * Stack of pointers.
 * Stack is fixed size on start. More elems fall off stack.
 */
struct stack {
	void** data;
	size_t num, capacity;
};
typedef struct stack stack_type;
stack_type* stack_create(struct region* region, size_t size);
void stack_push(stack_type* stack, void* elem);
void* stack_pop(stack_type* stack);
int addr2ip(
d365 1
a365 1
	struct sockaddr_storage addr
d367 1
a367 1
	struct sockaddr_in addr
d369 1
a369 1
, char address[], socklen_t size);
@


1.4
log
@resolve conflicts and regen configure using autoconf-2.65
@
text
@d13 1
a13 1
#include <config.h>
d33 20
@


1.3
log
@resolve conflicts from import of v3.2.5
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
@


1.2
log
@merge QID generation patch from NSD trunk
@
text
@d141 9
d334 5
a380 5

/*
 * Generate a random query ID
 */
uint16_t qid_generate(void);
@


1.1
log
@Initial revision
@
text
@d368 5
@


1.1.1.1
log
@NSD v3.2.4
@
text
@@


1.1.1.2
log
@NSD v3.2.5
@
text
@a140 9
 * Mmap allocator routines.
 *
 */
#ifdef USE_MMAP_ALLOC
void *mmap_alloc(size_t size);
void mmap_free(void *ptr);
#endif /* USE_MMAP_ALLOC */

/*
a322 5

/*
 * Generate a random query ID.
 */
uint16_t qid_generate(void);
@


1.1.1.3
log
@NSD v3.2.8
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
@


1.1.1.4
log
@NSD v3.2.11, ok phessler@@
@
text
@d13 1
a13 1
#include "config.h"
a32 20

/* Counter for statistics */
typedef unsigned long stc_t;

/**
 * Statistics.
 *
 */
struct nsdst {
	time_t  boot;
	int     period;         /* Produce statistics dump every st_period seconds */
	stc_t   qtype[257];     /* Counters per qtype */
	stc_t   qclass[4];      /* Class IN or Class CH or other */
	stc_t   qudp, qudp6;    /* Number of queries udp and udp6 */
	stc_t   ctcp, ctcp6;    /* Number of tcp and tcp6 connections */
	stc_t   rcode[17], opcode[6]; /* Rcodes & opcodes */
	/* Dropped, truncated, queries for nonconfigured zone, tx errors */
	stc_t   dropped, truncated, wrongzone, txerr, rxerr;
	stc_t   edns, ednserr, raxfr, nona;
};
@


1.1.1.5
log
@import NSD 4.0.0, tests from Dorian Büttner, Patrik Lundin, requested by brad@@
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
d13 1
d34 20
a356 2
/* value between 0 .. (max-1) inclusive */
int random_generate(int max);
d382 13
a394 1
void addr2str(
d396 1
a396 1
	struct sockaddr_storage *addr
d398 1
a398 1
	struct sockaddr_in *addr
d400 1
a400 1
	, char* str, size_t len);
@


1.1.1.6
log
@update to NSD 4.1.0, ok sthen@@
@
text
@a17 2
struct buffer;
struct region;
a249 2
/* set to true to log time prettyprinted, or false to print epoch */
extern int log_time_asc;
d356 1
a356 2
int print_rr(FILE *out, struct state_pretty_rr* state, struct rr *record,
	struct region* tmp_region, struct buffer* tmp_buffer); 
@


1.1.1.7
log
@update to NSD 4.1.3, ok florian@@, also tested by brad
@
text
@a137 1
void *xmallocarray(size_t num, size_t size);
a138 1
void *xalloc_array_zero(size_t num, size_t size);
@


