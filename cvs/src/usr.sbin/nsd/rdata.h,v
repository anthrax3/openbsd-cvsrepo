head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.14
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.16
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.8
	OPENBSD_5_9_BASE:1.1.1.3
	NSD_4_1_6:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.10
	OPENBSD_5_8_BASE:1.1.1.3
	NSD_4_1_3:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	NSD_4_1_1:1.1.1.3
	NSD_4_1_0:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.6
	OPENBSD_5_6_BASE:1.1.1.3
	NSD_4_0_3:1.1.1.3
	NSD_4_0_2:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.4
	OPENBSD_5_5_BASE:1.1.1.3
	NSD_4_0_1:1.1.1.3
	NSD_4_0_0:1.1.1.3
	NSD_3_2_16:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.10
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.8
	OPENBSD_5_3_BASE:1.1.1.2
	NSD_3_2_15:1.1.1.2
	NSD_3_2_14:1.1.1.2
	NSD_3_2_13:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.6
	OPENBSD_5_2_BASE:1.1.1.2
	NSD_3_2_11:1.1.1.2
	NSD_3_2_10:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.4
	NSD_3_2_9:1.1.1.2
	OPENBSD_5_0:1.1.1.2.0.2
	OPENBSD_5_0_BASE:1.1.1.2
	NSD_3_2_8:1.1.1.2
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	NSD_3_2_6:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	NSD_3_2_5:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	NSD_3_2_4:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2010.01.15.19.24.53;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.01.15.19.24.53;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2011.05.21.18.17.21;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.11.26.12.50.15;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * rdata.h -- RDATA conversion functions.
 *
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
 *
 * See LICENSE for the license.
 *
 */

#ifndef _RDATA_H_
#define _RDATA_H_

#include "dns.h"
#include "namedb.h"

/* High bit of the APL length field is the negation bit.  */
#define APL_NEGATION_MASK      0x80U
#define APL_LENGTH_MASK	       (~APL_NEGATION_MASK)

extern lookup_table_type dns_certificate_types[];
extern lookup_table_type dns_algorithms[];

int rdata_atom_to_string(buffer_type *output, rdata_zoneformat_type type,
			 rdata_atom_type rdata, rr_type *rr);

/*
 * Split the wireformat RDATA into an array of rdata atoms. Domain
 * names are inserted into the OWNERS table. The number of rdata atoms
 * is returned and the array itself is allocated in REGION and stored
 * in RDATAS.
 *
 * Returns -1 on failure.
 */
ssize_t rdata_wireformat_to_rdata_atoms(region_type *region,
					domain_table_type *owners,
					uint16_t rrtype,
					uint16_t rdata_size,
					buffer_type *packet,
					rdata_atom_type **rdatas);

/*
 * Calculate the maximum size of the rdata assuming domain names are
 * not compressed.
 */
size_t rdata_maximum_wireformat_size(rrtype_descriptor_type *descriptor,
				     size_t rdata_count,
				     rdata_atom_type *rdatas);

int rdata_atoms_to_unknown_string(buffer_type *out,
				  rrtype_descriptor_type *descriptor,
				  size_t rdata_count,
				  rdata_atom_type *rdatas);

/* print rdata to a text string (as for a zone file) returns 0
  on a failure (bufpos is reset to original position).
  returns 1 on success, bufpos is moved. */
int print_rdata(buffer_type *output, rrtype_descriptor_type *descriptor,
            rr_type *record);

#endif /* _DNS_H_ */
@


1.1.1.1
log
@NSD v3.2.4
@
text
@@


1.1.1.2
log
@NSD v3.2.8
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
@


1.1.1.3
log
@import NSD 4.0.0, tests from Dorian BÃ¼ttner, Patrik Lundin, requested by brad@@
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
@


