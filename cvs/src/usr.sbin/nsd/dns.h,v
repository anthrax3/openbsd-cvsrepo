head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	NSD_4_1_6:1.1.1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	NSD_4_1_3:1.1.1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	NSD_4_1_1:1.1.1.11
	NSD_4_1_0:1.1.1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	NSD_4_0_3:1.1.1.10
	NSD_4_0_2:1.1.1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	NSD_4_0_1:1.1.1.10
	NSD_4_0_0:1.1.1.9
	NSD_3_2_16:1.1.1.8
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	NSD_3_2_15:1.1.1.7
	NSD_3_2_14:1.1.1.6
	NSD_3_2_13:1.1.1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	NSD_3_2_11:1.1.1.5
	NSD_3_2_10:1.1.1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	NSD_3_2_9:1.1.1.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	NSD_3_2_8:1.1.1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	NSD_3_2_6:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	NSD_3_2_5:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	NSD_3_2_4:1.1.1.1
	NLNETLABS:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.10.24.09.44.43;	author florian;	state Exp;
branches;
next	1.13;
commitid	g3wASIhTcujU0LFi;

1.13
date	2016.06.24.08.34.03;	author florian;	state Exp;
branches;
next	1.12;
commitid	Z9jVKJJMPmC3zw2t;

1.12
date	2015.11.05.21.21.59;	author sthen;	state Exp;
branches;
next	1.11;
commitid	EVDZ1z8bzmTorwSZ;

1.11
date	2014.12.18.23.26.13;	author brad;	state Exp;
branches;
next	1.10;
commitid	rBaz3dZHAQwIDT3j;

1.10
date	2014.02.04.03.07.25;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.26.12.53.58;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.03.09.26.51;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2013.02.18.10.18.39;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.23.20.30.26;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2012.07.09.21.56.41;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.29.11.23.24;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.21.18.29.56;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.27.12.29.14;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.15.19.24.54;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.01.15.19.24.54;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.08.22.09.21.40;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2011.05.21.18.17.11;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2012.01.29.11.15.31;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2012.07.09.21.55.07;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2012.11.23.20.29.15;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.02.18.10.17.43;	author sthen;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.09.03.09.21.36;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.11.26.12.50.20;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.02.04.01.54.07;	author brad;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2015.02.03.10.24.32;	author brad;	state Exp;
branches;
next	1.1.1.12;
commitid	yn8l9RVkmdMVYIfl;

1.1.1.12
date	2015.11.05.21.21.05;	author sthen;	state Exp;
branches;
next	;
commitid	RXfGmPAh2IZTjnIf;


desc
@@


1.14
log
@Update to 4.1.13
Testing millert, brad and myself.
OK millert@@
@
text
@/*
 * dns.h -- DNS definitions.
 *
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
 *
 * See LICENSE for the license.
 *
 */

#ifndef _DNS_H_
#define _DNS_H_

enum rr_section {
	QUESTION_SECTION,
	ANSWER_SECTION,
	AUTHORITY_SECTION,
	/*
	 * Use a split authority section to ensure that optional
	 * NS RRsets in the response can be omitted.
	 */
	OPTIONAL_AUTHORITY_SECTION,
	ADDITIONAL_SECTION,
	/*
	 * Use a split additional section to ensure A records appear
	 * before any AAAA records (this is recommended practice to
	 * avoid truncating the additional section for IPv4 clients
	 * that do not specify EDNS0), and AAAA records before other
	 * types of additional records (such as X25 and ISDN).
	 * Encode_answer sets the ARCOUNT field of the response packet
	 * correctly.
	 */
	ADDITIONAL_A_SECTION = ADDITIONAL_SECTION,
	ADDITIONAL_AAAA_SECTION,
	ADDITIONAL_OTHER_SECTION,

	RR_SECTION_COUNT
};
typedef enum rr_section rr_section_type;

/* Possible OPCODE values */
#define OPCODE_QUERY		0 	/* a standard query (QUERY) */
#define OPCODE_IQUERY		1 	/* an inverse query (IQUERY) */
#define OPCODE_STATUS		2 	/* a server status request (STATUS) */
#define OPCODE_NOTIFY		4 	/* NOTIFY */
#define OPCODE_UPDATE		5 	/* Dynamic update */

/* Possible RCODE values */
#define RCODE_OK		0 	/* No error condition */
#define RCODE_FORMAT		1 	/* Format error */
#define RCODE_SERVFAIL		2 	/* Server failure */
#define RCODE_NXDOMAIN		3 	/* Name Error */
#define RCODE_IMPL		4 	/* Not implemented */
#define RCODE_REFUSE		5 	/* Refused */
#define RCODE_YXDOMAIN		6	/* name should not exist */
#define RCODE_YXRRSET		7	/* rrset should not exist */
#define RCODE_NXRRSET		8	/* rrset does not exist */
#define RCODE_NOTAUTH		9	/* server not authoritative */
#define RCODE_NOTZONE		10	/* name not inside zone */

/* Standardized NSD return code.  Partially maps to DNS RCODE values.  */
enum nsd_rc
{
	/* Discard the client request.  */
	NSD_RC_DISCARD  = -1,
	/* OK, continue normal processing.  */
	NSD_RC_OK       = RCODE_OK,
	/* Return the appropriate error code to the client.  */
	NSD_RC_FORMAT   = RCODE_FORMAT,
	NSD_RC_SERVFAIL = RCODE_SERVFAIL,
	NSD_RC_NXDOMAIN = RCODE_NXDOMAIN,
	NSD_RC_IMPL     = RCODE_IMPL,
	NSD_RC_REFUSE   = RCODE_REFUSE,
	NSD_RC_NOTAUTH  = RCODE_NOTAUTH
};
typedef enum nsd_rc nsd_rc_type;

/* RFC1035 */
#define CLASS_IN	1	/* Class IN */
#define CLASS_CS	2	/* Class CS */
#define CLASS_CH	3	/* Class CHAOS */
#define CLASS_HS	4	/* Class HS */
#define CLASS_NONE	254	/* Class NONE rfc2136 */
#define CLASS_ANY	255	/* Class ANY */

#define TYPE_A		1	/* a host address */
#define TYPE_NS		2	/* an authoritative name server */
#define TYPE_MD		3	/* a mail destination (Obsolete - use MX) */
#define TYPE_MF		4	/* a mail forwarder (Obsolete - use MX) */
#define TYPE_CNAME	5	/* the canonical name for an alias */
#define TYPE_SOA	6	/* marks the start of a zone of authority */
#define TYPE_MB		7	/* a mailbox domain name (EXPERIMENTAL) */
#define TYPE_MG		8	/* a mail group member (EXPERIMENTAL) */
#define TYPE_MR		9	/* a mail rename domain name (EXPERIMENTAL) */
#define TYPE_NULL	10	/* a null RR (EXPERIMENTAL) */
#define TYPE_WKS	11	/* a well known service description */
#define TYPE_PTR	12	/* a domain name pointer */
#define TYPE_HINFO	13	/* host information */
#define TYPE_MINFO	14	/* mailbox or mail list information */
#define TYPE_MX		15	/* mail exchange */
#define TYPE_TXT	16	/* text strings */
#define TYPE_RP		17	/* RFC1183 */
#define TYPE_AFSDB	18	/* RFC1183 */
#define TYPE_X25	19	/* RFC1183 */
#define TYPE_ISDN	20	/* RFC1183 */
#define TYPE_RT		21	/* RFC1183 */
#define TYPE_NSAP	22	/* RFC1706 */

#define TYPE_SIG	24	/* 2535typecode */
#define TYPE_KEY	25	/* 2535typecode */
#define TYPE_PX		26	/* RFC2163 */

#define TYPE_AAAA	28	/* ipv6 address */
#define TYPE_LOC	29	/* LOC record  RFC1876 */
#define TYPE_NXT	30	/* 2535typecode */

#define TYPE_SRV	33	/* SRV record RFC2782 */

#define TYPE_NAPTR	35	/* RFC2915 */
#define TYPE_KX		36	/* RFC2230 Key Exchange Delegation Record */
#define TYPE_CERT	37	/* RFC2538 */

#define TYPE_A6		38	/* RFC2874 */

#define TYPE_DNAME	39	/* RFC2672 */

#define TYPE_OPT	41	/* Pseudo OPT record... */
#define TYPE_APL	42	/* RFC3123 */
#define TYPE_DS		43	/* RFC 4033, 4034, and 4035 */
#define TYPE_SSHFP	44	/* SSH Key Fingerprint */
#define TYPE_IPSECKEY	45	/* public key for ipsec use. RFC 4025 */

#define TYPE_RRSIG	46	/* RFC 4033, 4034, and 4035 */
#define TYPE_NSEC	47	/* RFC 4033, 4034, and 4035 */
#define TYPE_DNSKEY	48	/* RFC 4033, 4034, and 4035 */
#define TYPE_DHCID	49	/* RFC4701 DHCP information */
#define TYPE_NSEC3	50	/* NSEC3, secure denial, prevents zonewalking */
#define TYPE_NSEC3PARAM 51	/* NSEC3PARAM at zone apex nsec3 parameters */
#define TYPE_TLSA	52	/* RFC 6698 */
#define TYPE_CDS	59	/* RFC 7344 */
#define TYPE_CDNSKEY	60	/* RFC 7344 */
#define TYPE_OPENPGPKEY 61	/* RFC 7929 */
#define TYPE_CSYNC	62	/* RFC 7477 */

#define TYPE_SPF        99      /* RFC 4408 */

#define TYPE_NID        104     /* RFC 6742 */
#define TYPE_L32        105     /* RFC 6742 */
#define TYPE_L64        106     /* RFC 6742 */
#define TYPE_LP         107     /* RFC 6742 */
#define TYPE_EUI48      108     /* RFC 7043 */
#define TYPE_EUI64      109     /* RFC 7043 */

#define TYPE_TSIG	250
#define TYPE_IXFR	251
#define TYPE_AXFR	252
#define TYPE_MAILB	253	/* A request for mailbox-related records (MB, MG or MR) */
#define TYPE_MAILA	254	/* A request for mail agent RRs (Obsolete - see MX) */
#define TYPE_ANY	255	/* any type (wildcard) */
#define TYPE_URI	256	/* RFC 7553 */
#define TYPE_CAA	257	/* RFC 6844 */

#define TYPE_DLV	32769	/* RFC 4431 */
#define PSEUDO_TYPE_DLV	RRTYPE_DESCRIPTORS_LENGTH

#define MAXLABELLEN	63
#define MAXDOMAINLEN	255

#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT. */
#define MAX_RDLENGTH	65535

/* Maximum size of a single RR.  */
#define MAX_RR_SIZE \
	(MAXDOMAINLEN + sizeof(uint32_t) + 4*sizeof(uint16_t) + MAX_RDLENGTH)

#define IP4ADDRLEN	(32/8)
#define IP6ADDRLEN	(128/8)
#define EUI48ADDRLEN	(48/8)
#define EUI64ADDRLEN	(64/8)

#define NSEC3_HASH_LEN 20

/*
 * The different types of RDATA wireformat data.
 */
enum rdata_wireformat
{
	RDATA_WF_COMPRESSED_DNAME,   /* Possibly compressed domain name.  */
	RDATA_WF_UNCOMPRESSED_DNAME, /* Uncompressed domain name.  */
	RDATA_WF_LITERAL_DNAME,      /* Literal (not downcased) dname.  */
	RDATA_WF_BYTE,               /* 8-bit integer.  */
	RDATA_WF_SHORT,              /* 16-bit integer.  */
	RDATA_WF_LONG,               /* 32-bit integer.  */
	RDATA_WF_TEXT,               /* Text string.  */
	RDATA_WF_TEXTS,              /* Text string sequence.  */
	RDATA_WF_A,                  /* 32-bit IPv4 address.  */
	RDATA_WF_AAAA,               /* 128-bit IPv6 address.  */
	RDATA_WF_BINARY,             /* Binary data (unknown length).  */
	RDATA_WF_BINARYWITHLENGTH,   /* Binary data preceded by 1 byte length */
	RDATA_WF_APL,                /* APL data.  */
	RDATA_WF_IPSECGATEWAY,       /* IPSECKEY gateway ip4, ip6 or dname. */
	RDATA_WF_ILNP64,             /* 64-bit uncompressed IPv6 address.  */
	RDATA_WF_EUI48,	             /* 48-bit address.  */
	RDATA_WF_EUI64,              /* 64-bit address.  */
	RDATA_WF_LONG_TEXT           /* Long (>255) text string. */
};
typedef enum rdata_wireformat rdata_wireformat_type;

/*
 * The different types of RDATA that can appear in the zone file.
 */
enum rdata_zoneformat
{
	RDATA_ZF_DNAME,		/* Domain name.  */
	RDATA_ZF_LITERAL_DNAME,	/* DNS name (not lowercased domain name).  */
	RDATA_ZF_TEXT,		/* Text string.  */
	RDATA_ZF_TEXTS,		/* Text string sequence.  */
	RDATA_ZF_BYTE,		/* 8-bit integer.  */
	RDATA_ZF_SHORT,		/* 16-bit integer.  */
	RDATA_ZF_LONG,		/* 32-bit integer.  */
	RDATA_ZF_A,		/* 32-bit IPv4 address.  */
	RDATA_ZF_AAAA,		/* 128-bit IPv6 address.  */
	RDATA_ZF_RRTYPE,	/* RR type.  */
	RDATA_ZF_ALGORITHM,	/* Cryptographic algorithm.  */
	RDATA_ZF_CERTIFICATE_TYPE,
	RDATA_ZF_PERIOD,	/* Time period.  */
	RDATA_ZF_TIME,
	RDATA_ZF_BASE64,	/* Base-64 binary data.  */
	RDATA_ZF_BASE32,	/* Base-32 binary data.  */
	RDATA_ZF_HEX,		/* Hexadecimal binary data.  */
	RDATA_ZF_HEX_LEN,	/* Hexadecimal binary data. Skip initial length byte. */
	RDATA_ZF_NSAP,		/* NSAP.  */
	RDATA_ZF_APL,		/* APL.  */
	RDATA_ZF_IPSECGATEWAY,	/* IPSECKEY gateway ip4, ip6 or dname. */
	RDATA_ZF_SERVICES,	/* Protocol and port number bitmap.  */
	RDATA_ZF_NXT,		/* NXT type bitmap.  */
	RDATA_ZF_NSEC,		/* NSEC type bitmap.  */
	RDATA_ZF_LOC,		/* Location data.  */
	RDATA_ZF_ILNP64,	/* 64-bit uncompressed IPv6 address.  */
	RDATA_ZF_EUI48,		/* EUI48 address.  */
	RDATA_ZF_EUI64,		/* EUI64 address.  */
	RDATA_ZF_LONG_TEXT,	/* Long (>255) text string. */
	RDATA_ZF_TAG,		/* Text string without quotes. */
	RDATA_ZF_UNKNOWN	/* Unknown data.  */
};
typedef enum rdata_zoneformat rdata_zoneformat_type;

struct rrtype_descriptor
{
	uint16_t    type;	/* RR type */
	const char *name;	/* Textual name.  */
	int         token;	/* Parser token.  */
	uint32_t    minimum;	/* Minimum number of RDATAs.  */
	uint32_t    maximum;	/* Maximum number of RDATAs.  */
	uint8_t     wireformat[MAXRDATALEN]; /* rdata_wireformat_type */
	uint8_t     zoneformat[MAXRDATALEN]; /* rdata_zoneformat_type  */
};
typedef struct rrtype_descriptor rrtype_descriptor_type;

/*
 * Indexed by type.  The special type "0" can be used to get a
 * descriptor for unknown types (with one binary rdata).
 *
 * CAA + 1
 */
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_CAA + 1)
rrtype_descriptor_type *rrtype_descriptor_by_name(const char *name);
rrtype_descriptor_type *rrtype_descriptor_by_type(uint16_t type);

const char *rrtype_to_string(uint16_t rrtype);

/*
 * Lookup the type in the ztypes lookup table.  If not found, check if
 * the type uses the "TYPExxx" notation for unknown types.
 *
 * Return 0 if no type matches.
 */
uint16_t rrtype_from_string(const char *name);

const char *rrclass_to_string(uint16_t rrclass);
uint16_t rrclass_from_string(const char *name);

#ifdef __cplusplus
inline rr_section_type
operator++(rr_section_type &lhs)
{
	lhs = (rr_section_type) ((int) lhs + 1);
	return lhs;
}
#endif /* __cplusplus */

#endif /* _DNS_H_ */
@


1.13
log
@Update to 4.1.10
Testing by millert@@, sthen@@ and me.
came up with the same diff & OK sthen@@
@
text
@d141 1
@


1.12
log
@merge
@
text
@d141 1
@


1.11
log
@Merge in some commits from upstream..

- Fix that failure to add tcp to tcp base does not leak the socket.
- Fixes for wildcard addition and deletion, speedup for some cases.
- Fix that queries for noname CH TXT are REFUSED instead of nodata.
- Fix #616: retry xfer for zones with no content after command.
- Fix that expired zones stay expired after a server restart.
- RFC 7344: CDS and CDNSKEY (read in).

ok sthen@@
@
text
@d157 1
a157 1

@


1.10
log
@merge conflicts
@
text
@d139 2
@


1.9
log
@merge conflicts
@
text
@d146 2
a147 5

#ifdef DRAFT_RRTYPES
#define TYPE_EUI48      108     /* draft-jabley-dnsext-eui48-eui64-rrtypes */
#define TYPE_EUI64      109     /* draft-jabley-dnsext-eui48-eui64-rrtypes */
#endif
d156 2
a172 1
#ifdef DRAFT_RRTYPES
a174 1
#endif
a196 1
#ifdef DRAFT_RRTYPES
d199 2
a200 4
	RDATA_WF_EUI64               /* 64-bit address.  */
#else
	RDATA_WF_ILNP64              /* 64-bit uncompressed IPv6 address.  */
#endif
a234 1
#ifdef DRAFT_RRTYPES
d237 2
a238 1
#endif
d259 1
a259 1
 * EUI64 + 1
d261 1
a261 5
#ifdef DRAFT_RRTYPES
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_EUI64 + 1)
#else
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_LP + 1)
#endif
@


1.8
log
@merge NSD 3.2.16
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
d178 2
@


1.7
log
@resolve conflicts
@
text
@d147 5
d174 4
d187 8
a194 8
	RDATA_WF_BYTE,		     /* 8-bit integer.  */
	RDATA_WF_SHORT,		     /* 16-bit integer.  */
	RDATA_WF_LONG,		     /* 32-bit integer.  */
	RDATA_WF_TEXT,		     /* Text string.  */
	RDATA_WF_TEXTS,		     /* Text string sequence.  */
	RDATA_WF_A,		     /* 32-bit IPv4 address.  */
	RDATA_WF_AAAA,		     /* 128-bit IPv6 address.  */
	RDATA_WF_BINARY, 	     /* Binary data (unknown length).  */
d196 9
a204 3
	RDATA_WF_APL,		     /* APL data.  */
	RDATA_WF_IPSECGATEWAY,	     /* IPSECKEY gateway ip4, ip6 or dname. */
	RDATA_WF_ILNP64	     /* 64-bit uncompressed IPv6 address.  */
d239 4
d263 1
a263 1
 * lp + 1
d265 3
d269 1
@


1.6
log
@resolve conflicts
@
text
@d142 5
d160 1
a160 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT.  */
d188 2
a189 1
	RDATA_WF_IPSECGATEWAY	     /* IPSECKEY gateway ip4, ip6 or dname. */
d223 1
d244 1
a244 1
 * spf + 1
d246 1
a246 1
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_SPF + 1)
@


1.5
log
@resolve conflicts
@
text
@d138 1
a138 1
#define TYPE_TLSA	52	/* draft-ietf-dane-protocol */
@


1.4
log
@resolve conflicts
@
text
@d138 1
@


1.3
log
@resolve conflicts and regen configure using autoconf-2.65
@
text
@d17 5
d154 1
a154 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT. */
@


1.2
log
@upgrade to NSD 3.2.7; ok sthen@@, tested by multiple people
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
@


1.1
log
@Initial revision
@
text
@d149 1
a149 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT.  */
d171 1
d189 1
d220 2
a221 2
	uint8_t     minimum;	/* Minimum number of RDATAs.  */
	uint8_t     maximum;	/* Maximum number of RDATAs.  */
@


1.1.1.1
log
@NSD v3.2.4
@
text
@@


1.1.1.2
log
@NSD v3.2.6
@
text
@d149 1
a149 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT. */
d218 2
a219 2
	uint32_t    minimum;	/* Minimum number of RDATAs.  */
	uint32_t    maximum;	/* Maximum number of RDATAs.  */
@


1.1.1.3
log
@NSD v3.2.8
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
a170 1
	RDATA_WF_TEXTS,		     /* Text string sequence.  */
a187 1
	RDATA_ZF_TEXTS,		/* Text string sequence.  */
@


1.1.1.4
log
@NSD v3.2.9
@
text
@a16 5
	/*
	 * Use a split authority section to ensure that optional
	 * NS RRsets in the response can be omitted.
	 */
	OPTIONAL_AUTHORITY_SECTION,
d149 1
a149 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT.  */
@


1.1.1.5
log
@NSD v3.2.11, ok phessler@@
@
text
@a137 1
#define TYPE_TLSA	52	/* draft-ietf-dane-protocol */
@


1.1.1.6
log
@update to NSD 3.2.14, requested by/ok brad@@
@
text
@d138 1
a138 1
#define TYPE_TLSA	52	/* RFC 6698 */
@


1.1.1.7
log
@Update to NSD 3.2.15, ok brad@@ phessler@@ deraadt@@ also tested by okan@@
@
text
@a141 5
#define TYPE_NID        104     /* RFC 6742 */
#define TYPE_L32        105     /* RFC 6742 */
#define TYPE_L64        106     /* RFC 6742 */
#define TYPE_LP         107     /* RFC 6742 */

d155 1
a155 1
#define MAXRDATALEN	64      /* This is more than enough, think multiple TXT. */
d183 1
a183 2
	RDATA_WF_IPSECGATEWAY,	     /* IPSECKEY gateway ip4, ip6 or dname. */
	RDATA_WF_ILNP64	     /* 64-bit uncompressed IPv6 address.  */
a216 1
	RDATA_ZF_ILNP64,	/* 64-bit uncompressed IPv6 address.  */
d237 1
a237 1
 * lp + 1
d239 1
a239 1
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_LP + 1)
@


1.1.1.8
log
@update to NSD 3.2.16, ok deraadt@@ brad@@
@
text
@a146 5
#ifdef DRAFT_RRTYPES
#define TYPE_EUI48      108     /* draft-jabley-dnsext-eui48-eui64-rrtypes */
#define TYPE_EUI64      109     /* draft-jabley-dnsext-eui48-eui64-rrtypes */
#endif

a168 4
#ifdef DRAFT_RRTYPES
#define EUI48ADDRLEN	(48/8)
#define EUI64ADDRLEN	(64/8)
#endif
d178 8
a185 8
	RDATA_WF_BYTE,               /* 8-bit integer.  */
	RDATA_WF_SHORT,              /* 16-bit integer.  */
	RDATA_WF_LONG,               /* 32-bit integer.  */
	RDATA_WF_TEXT,               /* Text string.  */
	RDATA_WF_TEXTS,              /* Text string sequence.  */
	RDATA_WF_A,                  /* 32-bit IPv4 address.  */
	RDATA_WF_AAAA,               /* 128-bit IPv6 address.  */
	RDATA_WF_BINARY,             /* Binary data (unknown length).  */
d187 3
a189 9
	RDATA_WF_APL,                /* APL data.  */
	RDATA_WF_IPSECGATEWAY,       /* IPSECKEY gateway ip4, ip6 or dname. */
#ifdef DRAFT_RRTYPES
	RDATA_WF_ILNP64,             /* 64-bit uncompressed IPv6 address.  */
	RDATA_WF_EUI48,	             /* 48-bit address.  */
	RDATA_WF_EUI64               /* 64-bit address.  */
#else
	RDATA_WF_ILNP64              /* 64-bit uncompressed IPv6 address.  */
#endif
a223 4
#ifdef DRAFT_RRTYPES
	RDATA_ZF_EUI48,		/* EUI48 address.  */
	RDATA_ZF_EUI64,		/* EUI64 address.  */
#endif
d244 1
a244 1
 * EUI64 + 1
a245 3
#ifdef DRAFT_RRTYPES
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_EUI64 + 1)
#else
a246 1
#endif
@


1.1.1.9
log
@import NSD 4.0.0, tests from Dorian Büttner, Patrik Lundin, requested by brad@@
@
text
@d4 1
a4 1
 * Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
a177 2

#define NSEC3_HASH_LEN 20
@


1.1.1.10
log
@update to NSD 4.0.1, ok sthen@@
@
text
@d146 5
a150 2
#define TYPE_EUI48      108     /* RFC 7043 */
#define TYPE_EUI64      109     /* RFC 7043 */
a158 2
#define TYPE_CAA	257	/* RFC 6844 */

d174 1
d177 1
d200 1
d203 4
a206 2
	RDATA_WF_EUI64,              /* 64-bit address.  */
	RDATA_WF_LONG_TEXT           /* Long (>255) text string. */
d241 1
d244 1
a244 2
	RDATA_ZF_LONG_TEXT,	/* Long (>255) text string. */
	RDATA_ZF_TAG,		/* Text string without quotes. */
d265 1
a265 1
 * CAA + 1
d267 5
a271 1
#define RRTYPE_DESCRIPTORS_LENGTH  (TYPE_CAA + 1)
@


1.1.1.11
log
@update to NSD 4.1.1, ok sthen@@
@
text
@a138 2
#define TYPE_CDS	59	/* RFC 7344 */
#define TYPE_CDNSKEY	60	/* RFC 7344 */
@


1.1.1.12
log
@update to NSD 4.1.6, ok millert@@ florian@@
@
text
@d157 1
a157 1
#define TYPE_URI	256	/* RFC 7553 */
@


