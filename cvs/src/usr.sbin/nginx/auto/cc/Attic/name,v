head	1.7;
access;
symbols
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	NGINX_1_0_14:1.1.1.2
	NGINX:1.1.1
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	nginx_1_0_6:1.1.1.1
	nginx:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.08.26.19.35.32;	author robert;	state dead;
branches;
next	1.6;
commitid	sO1mMs3aGJWmnMM1;

1.6
date	2014.06.12.15.27.08;	author robert;	state Exp;
branches;
next	1.5;
commitid	diSa3BSte1X8Lp04;

1.5
date	2012.08.21.11.31.52;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2012.03.06.15.57.14;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.18.11.20.21;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.12.11.09.00;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.22.23.32.15;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.09.22.23.32.15;	author robert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2012.03.15.16.48.20;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove nginx from the base system in favor of OpenBSD's own httpd(8)
@
text
@
# Copyright (C) Igor Sysoev
# Copyright (C) Nginx, Inc.


if [ "$NGX_PLATFORM" != win32 ]; then

    ngx_feature="C compiler"
    ngx_feature_name=
    ngx_feature_run=yes
    ngx_feature_incs=
    ngx_feature_path=
    ngx_feature_libs=
    ngx_feature_test=
    . auto/feature

    if [ $ngx_found = no ]; then
        echo
        echo $0: error: C compiler $CC is not found
        echo
        exit 1
    fi

fi


if [ "$CC" = cl ]; then
    if `$NGX_WINE $CC -v 2>&1 \
        | grep '^Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16' \
        >/dev/null 2>&1`; then

        NGX_CC_NAME=msvc10
        echo " + using Microsoft Visual C++ 10 compiler"

    elif `$NGX_WINE $CC -v 2>&1 \
        | grep '^Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14' \
        >/dev/null 2>&1`; then

        NGX_CC_NAME=msvc8
        echo " + using Microsoft Visual C++ 8 compiler"

    elif `$NGX_WINE $CC -v 2>&1 \
        | grep '^Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 13' \
        >/dev/null 2>&1`; then

        NGX_CC_NAME=msvc7
        echo " + using Microsoft Visual C++ 7 compiler"

    else
        NGX_CC_NAME=msvc
        echo " + using Microsoft Visual C++ compiler"
    fi

elif [ "$CC" = wcl386 ]; then
    NGX_CC_NAME=owc
    echo " + using Open Watcom C compiler"

elif [ "$CC" = bcc32 ]; then
    NGX_CC_NAME=bcc
    echo " + using Borland C++ compiler"

elif `$CC -V 2>&1 | grep '^Intel(R) C' >/dev/null 2>&1`; then
    NGX_CC_NAME=icc
    echo " + using Intel C++ compiler"

elif `$CC -v 2>&1 | grep 'gcc version' >/dev/null 2>&1`; then
    NGX_CC_NAME=gcc
    echo " + using GNU C compiler"

elif `$CC -v 2>&1 | grep '\(clang\|LLVM\) version' >/dev/null 2>&1`; then
    NGX_CC_NAME=clang
    echo " + using Clang C compiler"

elif `$CC -V 2>&1 | grep 'Sun C' >/dev/null 2>&1`; then
    NGX_CC_NAME=sunc
    echo " + using Sun C compiler"

elif `$CC -V 2>&1 | grep '^Compaq C' >/dev/null 2>&1`; then
    NGX_CC_NAME=ccc
    echo " + using Compaq C compiler"

elif `$CC -V 2>&1 | grep '^aCC: ' >/dev/null 2>&1`; then
    NGX_CC_NAME=acc
    echo " + using HP aC++ compiler"

else
    NGX_CC_NAME=unknown

fi
@


1.6
log
@update to 1.6.0 with official syslog support backported from the 1.7 branch

tested by several, ok sthen@@
@
text
@@


1.5
log
@update to nginx-1.2.3
@
text
@d70 1
a70 1
elif `$CC -v 2>&1 | grep 'clang version' >/dev/null 2>&1`; then
@


1.4
log
@update to 1.0.13
@
text
@d35 1
a35 1
    else if `$NGX_WINE $CC -v 2>&1 \
d42 1
a42 1
    else if `$NGX_WINE $CC -v 2>&1 \
a52 2
    fi
    fi
d54 1
a54 2
else
if [ "$CC" = wcl386 ]; then
d58 1
a58 2
else
if [ "$CC" = bcc32 ]; then
d62 1
a62 2
else
if `$CC -V 2>&1 | grep '^Intel(R) C' >/dev/null 2>&1`; then
d66 1
a66 2
else
if `$CC -v 2>&1 | grep 'gcc version' >/dev/null 2>&1`; then
d70 5
a74 2
else
if `$CC -V 2>&1 | grep 'Sun C' >/dev/null 2>&1`; then
d78 1
a78 2
else
if `$CC -V 2>&1 | grep '^Compaq C' >/dev/null 2>&1`; then
d82 1
a82 2
else
if `$CC -V 2>&1 | grep '^aCC: ' >/dev/null 2>&1`; then
d89 1
a89 8
fi # acc
fi # ccc
fi # sunc
fi # icc
fi # gcc
fi # bcc
fi # owc
fi # msvc
@


1.3
log
@update to 1.0.12
@
text
@d67 5
a74 5

else
if `$CC -V 2>&1 | grep '^Intel(R) C' >/dev/null 2>&1`; then
    NGX_CC_NAME=icc
    echo " + using Intel C++ compiler"
@


1.2
log
@update to 1.0.9
@
text
@d3 1
@


1.1
log
@Initial revision
@
text
@d28 7
d51 1
@


1.1.1.1
log
@import of nginx 1.0.6 with a bundled libpcre needed for pcre to work
properly.
this is not yet linked to the build but we would like to work on it
in tree to provide an apache replacement for base
@
text
@@


1.1.1.2
log
@update to nginx 1.0.14

SECURITY fix: contents of previously freed memory might be sent
to a client if backend returned specially crafted response.

ok robert@@
@
text
@a2 1
# Copyright (C) Nginx, Inc.
a27 7
        | grep '^Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16' \
        >/dev/null 2>&1`; then

        NGX_CC_NAME=msvc10
        echo " + using Microsoft Visual C++ 10 compiler"

    else if `$NGX_WINE $CC -v 2>&1 \
a45 1
    fi
d58 5
a65 5

else
if `$CC -v 2>&1 | grep 'gcc version' >/dev/null 2>&1`; then
    NGX_CC_NAME=gcc
    echo " + using GNU C compiler"
@

