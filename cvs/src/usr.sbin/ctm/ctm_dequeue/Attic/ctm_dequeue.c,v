head	1.5;
access;
symbols
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	GRAICHEN_961030:1.1.1.1
	GRAICHEN:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	99.12.02.04.00.52;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	99.07.13.23.02.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.06.23.22.40.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.06.24.02.52.42;	author dgregor;	state Exp;
branches;
next	1.1;

1.1
date	96.10.30.17.32.58;	author graichen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.30.17.32.58;	author graichen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bye bye ctm (soon in ports tree)
@
text
@/*
 * Copyright (c) 1996, Gary J. Palmer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer,
 *    verbatim and that no modifications are made prior to this
 *    point in the file.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Id: ctm_dequeue.c,v 1.4 1999/07/13 23:02:05 deraadt Exp $
 */

/*
 * ctm_dequeue:  Dequeue queued delta pieces and mail them.
 *
 * The pieces have already been packaged up as mail messages by ctm_smail,
 * and will be simply passed to sendmail in alphabetical order.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fts.h>
#include <limits.h>
#include <errno.h>
#include <paths.h>
#include "error.h"
#include "options.h"

#define DEFAULT_NUM	1	/* Default number of pieces mailed per run. */

int fts_sort(const FTSENT **, const FTSENT **);
int run_sendmail(int ifd);

int
main(int argc, char **argv)
{
    char *log_file = NULL;
    char *queue_dir = NULL;
    char *list[2];
    int num_to_send = DEFAULT_NUM, chunk;
    int fd;
    FTS *fts;
    FTSENT *ftsent;
    int piece, npieces;
    char filename[PATH_MAX];

    err_prog_name(argv[0]);

    OPTIONS("[-l log] [-n num] queuedir")
	NUMBER('n', num_to_send)
	STRING('l', log_file)
    ENDOPTS

    if (argc != 2)
	usage();

    if (log_file)
	err_set_log(log_file);

    queue_dir = argv[1];
    list[0] = queue_dir;
    list[1] = NULL;

    fts = fts_open(list, FTS_PHYSICAL|FTS_COMFOLLOW, fts_sort);
    if (fts == NULL)
    {
	err("fts failed on `%s'", queue_dir);
	exit(1);
    }

    ftsent = fts_read(fts);
    if (ftsent == NULL || ftsent->fts_info != FTS_D)
    {
	err("not a directory: %s", queue_dir);
	exit(1);
    }

    ftsent = fts_children(fts, 0);
    if (ftsent == NULL && errno)
    {
	err("*ftschildren failed");
	exit(1);
    }

    for (chunk = 1; ftsent != NULL; ftsent = ftsent->fts_link)
    {
	/*
	 * Skip non-files and ctm_smail tmp files (ones starting with `.')
	 */
	if (ftsent->fts_info != FTS_F || ftsent->fts_name[0] == '.')
	    continue;

	sprintf(filename, "%s/%s", queue_dir, ftsent->fts_name);
	fd = open(filename, O_RDONLY);
	if (fd < 0)
	{
	    err("*open: %s", filename);
	    exit(1);
	}

	if (run_sendmail(fd))
	    exit(1);

	close(fd);
	
	if (unlink(filename) < 0)
	{
	    err("*unlink: %s", filename);
	    exit(1);
	}
	
	/*
	 * Deduce the delta, piece number, and number of pieces from
	 * the name of the file in the queue.  Ideally, we should be
	 * able to get the mail alias name too.
	 *
	 * NOTE: This depends intimately on the queue name used in ctm_smail.
	 */
	npieces = atoi(&ftsent->fts_name[ftsent->fts_namelen-3]);
	piece = atoi(&ftsent->fts_name[ftsent->fts_namelen-7]);
	err("%.*s %d/%d sent", ftsent->fts_namelen-8, ftsent->fts_name,
		piece, npieces);

	if (chunk++ == num_to_send)
	    break;
    }

    fts_close(fts);

    return(0);
}

int
fts_sort(const FTSENT ** a, const FTSENT ** b)
{
    if ((*a)->fts_info != FTS_F)
	return(0);
    if ((*a)->fts_info != FTS_F)
	return(0);

    return (strcmp((*a)->fts_name, (*b)->fts_name));
}

/*
 * Run sendmail with the given file descriptor as standard input.
 * Sendmail will decode the destination from the message contents.
 * Returns 0 on success, 1 on failure.
 */
int
run_sendmail(int ifd)
{
    pid_t child, pid;
    int status;

    switch (child = fork())
    {
    case -1:
	err("*fork");
	return(1);

    case 0:	/* Child */
	dup2(ifd, 0);
	execl(_PATH_SENDMAIL, _PATH_SENDMAIL, "-odq", "-t", NULL);
	err("*exec: %s", _PATH_SENDMAIL);
	_exit(1);

    default:	/* Parent */
	while ((pid = wait(&status)) != child)
	{
	    if (pid == -1 && errno != EINTR)
	    {
		err("*wait");
		return(1);
	    }
	}
	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
	{
	    err("sendmail failed");
	    return(1);
	}
    }

    return(0);
}
@


1.4
log
@Merge with FreeBSD 3.2, while keeping OpenBSD mktemp/mkstemp fixes.
Some minor man page enhancements.
Brings better man pages, new features, more error checking, and improved
performance; some FreeBSD examples for creating ctm deltas
merged by hgweigand@@wiesbaden.netsurf.de
@
text
@d29 1
a29 1
 *	$Id: ctm_dequeue.c,v 1.3 1998/06/23 22:40:33 millert Exp $
@


1.3
log
@Fix snprintf return value usage.
@
text
@d29 1
a29 1
 *	$Id: ctm_dequeue.c,v 1.2 1997/06/24 02:52:42 dgregor Exp $
d32 5
a36 3
/* 
 * Change this if you want to alter how many files it sends out by
 * default
a38 2
#define DEFAULT_NUM 2

d46 1
d48 1
a48 1
#include <sys/mman.h>
d54 2
d57 1
a57 2
FILE *open_sendmail(void);
int close_sendmail(FILE *fp);
d65 2
a66 2
    char *buffer, *filename;
    int num_to_send = DEFAULT_NUM, piece, fp, len;
d69 2
a70 1
    FILE *sfp;
d77 1
a77 1
    ENDOPTS;
d82 3
d89 1
a89 1
    fts = fts_open(list, FTS_PHYSICAL, fts_sort);
d96 2
a97 4
    (void) fts_read(fts);

    ftsent = fts_children(fts, 0);
    if (ftsent == NULL)
d99 1
a99 1
	err("ftschildren failed");
d103 2
a104 4
    /* assumption :-( */
    len = strlen(queue_dir) + 40;
    filename = malloc(len);
    if (filename == NULL)
d106 1
a106 1
	err("malloc failed");
d110 1
a110 1
    for (piece = 0; piece < num_to_send ; piece++)
d112 9
a120 10
	/* Skip non-files and files we should ignore (ones starting with `.') */

#define ISFILE ((ftsent->fts_info & FTS_F) == FTS_F)
#define IGNORE (ftsent->fts_name[0] == '.')
#define HASNEXT (ftsent->fts_link != NULL)

	while(((!ISFILE) || (IGNORE)) && (HASNEXT))
	    ftsent = ftsent->fts_link;

	if ((!ISFILE) || (IGNORE))
d122 1
a122 15
	    err("No more chunks to mail");
	    exit(0);
	}

#undef ISFILE
#undef IGNORE
#undef HASNEXT

	if (snprintf(filename, len, "%s/%s", queue_dir, ftsent->fts_name) >= len)
	    err("snprintf(filename) longer than buffer");

	fp = open(filename, O_RDONLY, 0);
	if (fp <  0)
	{
	    err("open(`%s') failed, errno = %d", filename, errno);
d126 1
a126 4
	buffer = mmap(0, ftsent->fts_statp->st_size, PROT_READ, MAP_PRIVATE, fp, 0);
	if (((long) buffer) <= 0)
	{
	    err("mmap failed, errno = %d", errno);
a127 1
	}
d129 1
a129 3
	sfp = open_sendmail();	    
	if (sfp == NULL)
	    exit(1);
a130 13
	if (fwrite(buffer, ftsent->fts_statp->st_size, 1, sfp) < 1)
	{
	    err("fwrite failed: errno = %d", errno);
	    close_sendmail(sfp);
	    exit(1);
	}

	if (!close_sendmail(sfp))
	    exit(1);

	munmap(buffer, ftsent->fts_statp->st_size);
	close(fp);

d133 1
a133 1
	    err("unlink of `%s' failed", filename);
d137 11
a147 1
	err("sent file `%s'", ftsent->fts_name);
d149 1
a149 3
	if (ftsent->fts_link != NULL)
	    ftsent = ftsent->fts_link;
	else
d153 2
a154 1
    err("exiting normally");
d161 4
a164 1
	int a_info, b_info;
d166 1
a166 24
	a_info = (*a)->fts_info;
	if (a_info == FTS_ERR)
		return (0);
	b_info = (*b)->fts_info;
	if (b_info == FTS_ERR)
		return (0);

	return (strcmp((*a)->fts_name, (*b)->fts_name));
}

/*
 * Start a pipe to sendmail.  Sendmail will decode the destination
 * from the message contents.
 */
FILE *
open_sendmail()
{
    FILE *fp;
    char buf[100];
    
    sprintf(buf, "%s -t", _PATH_SENDMAIL);
    if ((fp = popen(buf, "w")) == NULL)
	err("cannot start sendmail");
    return fp;
a168 1

d170 3
a172 2
 * Close a pipe to sendmail.  Sendmail will then do its bit.
 * Return 1 on success, 0 on failure.
d175 1
a175 1
close_sendmail(FILE *fp)
d177 1
d179 2
a180 3
    
    fflush(fp);
    if (ferror(fp))
d182 24
a205 2
	err("error writing to sendmail");
	return 0;
d207 2
a208 5
    
    if ((status = pclose(fp)) != 0)
	err("sendmail failed with status %d", status);
    
    return (status == 0);
@


1.2
log
@changed char * cast from int to long
@
text
@d29 1
a29 1
 *	$Id: ctm_dequeue.c,v 1.1.1.1 1996/10/30 17:32:58 graichen Exp $
d129 1
a129 1
	if (snprintf(filename, len, "%s/%s", queue_dir, ftsent->fts_name) > len)
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
 *	$Id: ctm_dequeue.c,v 1.2 1996/07/12 13:12:46 gpalmer Exp $
d140 1
a140 1
	if (((int) buffer) <= 0)
@


1.1.1.1
log
@import ctm (current through mail)
for more see http://www.openbsd.org/ctm.html - it's basicaly the FreeBSD
version adapted to OpenBSD - i'll bring in the latest FreeBSD changes in the
next days
@
text
@@
