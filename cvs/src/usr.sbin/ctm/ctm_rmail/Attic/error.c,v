head	1.3;
access;
symbols
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.1.1.0.10
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.8
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	GRAICHEN_961030:1.1.1.1
	GRAICHEN:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	99.12.02.04.00.53;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	99.07.13.23.02.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.10.30.17.32.59;	author graichen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.30.17.32.59;	author graichen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bye bye ctm (soon in ports tree)
@
text
@/* $OpenBSD: error.c,v 1.2 1999/07/13 23:02:06 deraadt Exp $ */
/*
 * Routines for logging error messages or other informative messages.
 *
 * Log messages can easily contain the program name, a time stamp, system
 * error messages, and arbitrary printf-style strings, and can be directed
 * to stderr or a log file.
 *
 * Author: Stephen McKay
 *
 * NOTICE: This is free software.  I hope you get some use from this program.
 * In return you should think about all the nice people who give away software.
 * Maybe you should write some free software too.
 */

#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <time.h>
#include <errno.h>
#include "error.h"

static FILE *error_fp = NULL;
static char *prog = NULL;


/*
 * Log errors to the given file.
 */
void
err_set_log(char *log_file)
    {
    FILE *fp;

    if ((fp = fopen(log_file, "a")) == NULL)
	err("cannot log to '%s'", log_file);
    else
	error_fp = fp;
    }


/*
 * Set the error prefix if not logging to a file.
 */
void
err_prog_name(char *name)
    {
    if ((prog = strrchr(name, '/')) == NULL)
	prog = name;
    else
	prog++;
    }


/*
 * Log an error.
 *
 * A leading '*' in the message format means we want the system errno
 * decoded and appended.
 */
void
err(char *fmt, ...)
    {
    va_list ap;
    time_t now;
    struct tm *tm;
    FILE *fp;
    int x = errno;
    int want_errno;

    if ((fp = error_fp) == NULL)
	{
	fp = stderr;
	if (prog != NULL)
	    fprintf(fp, "%s: ", prog);
	}
    else
	{
	time(&now);
	tm = localtime(&now);
	fprintf(fp, "%04d-%02d-%02d %02d:%02d ", tm->tm_year+1900,
	    tm->tm_mon+1, tm->tm_mday, tm->tm_hour, tm->tm_min);
	}

    want_errno = 0;
    if (*fmt == '*')
	want_errno++, fmt++;

    va_start(ap, fmt);
    vfprintf(fp, fmt, ap);
    va_end(ap);

    if (want_errno)
	fprintf(fp, ": %s", strerror(x));

    fprintf(fp, "\n");
    fflush(fp);
    }
@


1.2
log
@Merge with FreeBSD 3.2, while keeping OpenBSD mktemp/mkstemp fixes.
Some minor man page enhancements.
Brings better man pages, new features, more error checking, and improved
performance; some FreeBSD examples for creating ctm deltas
merged by hgweigand@@wiesbaden.netsurf.de
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@import ctm (current through mail)
for more see http://www.openbsd.org/ctm.html - it's basicaly the FreeBSD
version adapted to OpenBSD - i'll bring in the latest FreeBSD changes in the
next days
@
text
@@
