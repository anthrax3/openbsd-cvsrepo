head	1.5;
access;
symbols
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.1.1.0.8
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.6
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.4
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	GRAICHEN_961030:1.1.1.1
	GRAICHEN:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	99.12.02.04.00.48;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	99.07.13.23.02.05;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.11.23.04.35.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.11.22.22.50.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.10.30.17.32.58;	author graichen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.10.30.17.32.58;	author graichen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bye bye ctm (soon in ports tree)
@
text
@/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <phk@@login.dknet.dk> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 * ----------------------------------------------------------------------------
 *
 * $Id: ctm.c,v 1.4 1999/07/13 23:02:05 deraadt Exp $
 *
 * This is the client program of 'CTM'.  It will apply a CTM-patch to a
 * collection of files.
 *
 * Options we'd like to see:
 *
 * -a 			Attempt best effort.
 * -d <int>		Debug TBD.
 * -m <mail-addr>	Email me instead.
 * -r <name>		Reconstruct file.
 * -R <file>		Read list of files to reconstruct.
 *
 * Options we have:
 * -b <dir>		Base-dir
 * -B <file>		Backup to tar-file.
 * -t 			Tar command (default as in TARCMD).
 * -c			Check it out, don't do anything.
 * -F      		Force
 * -q 			Tell us less.
 * -T <tmpdir>.		Temporary files.
 * -u			Set all file modification times to the timestamp
 * -v 			Tell us more.
 * -V <level>		Tell us more level = number of -v
 * -k			Keep files and directories that would have been removed.
 * -l			List actions.
 *
 * Options we don't actually use:
 * -p			Less paranoid.
 * -P			Paranoid.
 */

#define EXTERN /* */
#include "ctm.h"

#define CTM_STATUS ".ctm_status"

extern int Proc(char *, unsigned applied);

int
main(int argc, char **argv)
{
    int stat=0, err=0;
    int c;
    unsigned applied = 0;
    FILE *statfile;
    struct CTM_Filter *nfilter = NULL;	/* new filter */
    u_char * basedir;

    basedir = NULL;
    Verbose = 1;
    Paranoid = 1;
    SetTime = 0;
    KeepIt = 0;
    ListIt = 0;
    BackupFile = NULL;
    TarCmd = TARCMD;
    LastFilter = FilterList = NULL;
    setbuf(stderr,0);
    setbuf(stdout,0);

    while((c=getopt(argc,argv,"ab:B:cd:e:Fklm:pPqr:R:t:T:uV:vx:")) != -1) {
	switch (c) {
	    case 'b': basedir = optarg;	break; /* Base Directory */
	    case 'B': BackupFile = optarg;	break;
	    case 'c': CheckIt++;	break; /* Only check it */
	    case 'F': Force = 1;	break; 
	    case 'k': KeepIt++;		break; /* Don't do removes */
	    case 'l': ListIt++;		break; /* Only list actions and files */
	    case 'p': Paranoid--;	break; /* Less Paranoid */
	    case 'P': Paranoid++;	break; /* More Paranoid */
	    case 'q': Verbose--;	break; /* Quiet */
	    case 't': TarCmd = optarg;	break; /* archiver command */
	    case 'T': TmpDir = optarg;	break; /* set temporary directory */
	    case 'u': SetTime++;	break; /* Set timestamp on files */
	    case 'v': Verbose++;	break; /* Verbose */
	    case 'V': sscanf(optarg,"%d", &c); /* Verbose */
		      Verbose += c;
		      break;
	    case 'e':				/* filter expressions */
	    case 'x':
		if (NULL == (nfilter =  Malloc(sizeof(struct CTM_Filter)))) {
			warnx("out of memory for expressions: \"%s\"", optarg);
			stat++;
			break;
		}

		(void) memset(nfilter, 0, sizeof(struct CTM_Filter));

		if (0 != (err = 
			regcomp(&nfilter->CompiledRegex, optarg, REG_NOSUB))) {

			char errmsg[128];

			regerror(err, &nfilter->CompiledRegex, errmsg, 
				sizeof(errmsg));
			warnx("regular expression: \"%s\"", errmsg);
			stat++;
			break;
		}

		/* note whether the filter enables or disables on match */
		nfilter->Action = 
			(('e' == c) ? CTM_FILTER_ENABLE : CTM_FILTER_DISABLE);

		/* link in the expression into the list */
	        nfilter->Next = NULL;
		if (NULL == FilterList) {
		  LastFilter = FilterList = nfilter; /* init head and tail */
		} else {    /* place at tail */
		  LastFilter->Next = nfilter;
		  LastFilter = nfilter;	
		}
		break;
	    case ':':
		warnx("option '%c' requires an argument",optopt);
		stat++;
		break;
	    case '?':
		warnx("option '%c' not supported",optopt);
		stat++;
		break;
	    default:
		warnx("option '%c' not yet implemented",optopt);
		break;
	}
    }

    if(stat) {
	warnx("%d errors during option processing",stat);
	return Exit_Pilot;
    }
    stat = Exit_Done;
    argc -= optind;
    argv += optind;

    if (basedir == NULL) {
	Buffer = (u_char *)Malloc(BUFSIZ + strlen(SUBSUFF) +1);
	CatPtr = Buffer;
	*Buffer  = '\0';
    } else {
	Buffer = (u_char *)Malloc(strlen(basedir)+ BUFSIZ + strlen(SUBSUFF) +1);
	strcpy(Buffer, basedir);
	CatPtr = Buffer + strlen(basedir);
	if (CatPtr[-1] != '/') {
		strcat(Buffer, "/");
		CatPtr++;
	}
    }
    strcat(Buffer, CTM_STATUS);

    if(ListIt) 
	applied = 0;
    else
	if((statfile = fopen(Buffer, "r")) == NULL) {
	    if (Verbose > 0)
	    	warnx("warning: %s not found", Buffer);
	} else {
	    fscanf(statfile, "%*s %u", &applied);
	    fclose(statfile);
	}

    if(!argc)
	stat |= Proc("-", applied);

    while(argc-- && stat == Exit_Done) {
	stat |= Proc(*argv++, applied);
	stat &= ~(Exit_Version | Exit_NoMatch);
    }

    if(stat == Exit_Done)
	stat = Exit_OK;

    if(Verbose > 0)
	warnx("exit(%d)",stat);

    if (FilterList)
	for (nfilter = FilterList; nfilter; ) {
	    struct CTM_Filter *tmp = nfilter->Next;
	    Free(nfilter);
	    nfilter = tmp;
	}
    return stat;
}

int
Proc(char *filename, unsigned applied)
{
    FILE *f;
    int i;
    char *p = strrchr(filename,'.');

    if(!strcmp(filename,"-")) {
	p = 0;
	f = stdin;
    } else if(p && (!strcmp(p,".gz") || !strcmp(p,".Z"))) {
	p = alloca(20 + strlen(filename));
	strcpy(p,"gunzip < ");
	strcat(p,filename);
	f = popen(p,"r");
	if(!f) { warn("%s", p); return Exit_Garbage; }
    } else {
	p = 0;
	f = fopen(filename,"r");
    }
    if(!f) {
	warn("%s", filename);
	return Exit_Garbage;
    }

    if(Verbose > 1)
	fprintf(stderr,"Working on <%s>\n",filename);

    Delete(FileName);
    FileName = String(filename);

    /* If we cannot seek, we're doomed, so copy to a tmp-file in that case */
    if(!p &&  -1 == fseek(f,0,SEEK_END)) {
	char *fn;
	FILE *f2;
	int fd, i;

	if (asprintf(&fn, "%s/CTMclient.XXXXXXXX", TmpDir) == -1) {
	    warnx("Cannot allocate memory\n");
	    fclose(f);
	    return Exit_Broke;
	}
	if ((fd = mkstemp(fn)) == -1 || (f2 = fdopen(fd, "w+")) == NULL) {
	    warn("%s", fn);
	    free(fn);
	    if (fd != -1)
		close(fd);
	    fclose(f);
	    return Exit_Broke;
	}
	unlink(fn);
	if (Verbose > 0)
	    fprintf(stderr,"Writing tmp-file \"%s\"\n",fn);
	free(fn);
	while(EOF != (i=getc(f)))
	    if(EOF == putc(i,f2)) {
		fclose(f2);
		return Exit_Broke;
	    }
	fclose(f);
	f = f2;
    }

    if(!p)
	rewind(f);

    if((i=Pass1(f, applied)))
	goto exit_and_close;

    if(ListIt) {
	i = Exit_Done;
	goto exit_and_close;
    }

    if(!p) {
        rewind(f);
    } else {
	pclose(f);
	f = popen(p,"r");
	if(!f) { warn("%s", p); return Exit_Broke; }
    }

    i=Pass2(f);

    if(!p) {
        rewind(f);
    } else {
	pclose(f);
	f = popen(p,"r");
	if(!f) { warn("%s", p); return Exit_Broke; }
    }

    if(i) {
	if((!Force) || (i & ~Exit_Forcible))
	    goto exit_and_close;
    }

    if(CheckIt) {
	if (Verbose > 0) 
	    fprintf(stderr,"All checks out ok.\n");
	i = Exit_Done;
	goto exit_and_close;
    }
   
    /* backup files if requested */
    if(BackupFile) {

	i = PassB(f);

	if(!p) {
	    rewind(f);
	} else {
	    pclose(f);
	    f = popen(p,"r");
	    if(!f) { warn("%s", p); return Exit_Broke; }
	}
    }

    i=Pass3(f);

exit_and_close:
    if(!p)
        fclose(f);
    else
	pclose(f);

    if(i)
	return i;

    if (Verbose > 0)
	fprintf(stderr,"All done ok\n");

    return Exit_Done;
}
@


1.4
log
@Merge with FreeBSD 3.2, while keeping OpenBSD mktemp/mkstemp fixes.
Some minor man page enhancements.
Brings better man pages, new features, more error checking, and improved
performance; some FreeBSD examples for creating ctm deltas
merged by hgweigand@@wiesbaden.netsurf.de
@
text
@d9 1
a9 1
 * $Id: ctm.c,v 1.3 1998/11/23 04:35:25 millert Exp $
@


1.3
log
@Even better; get rid of tempnam completely in favor of mkstemp)
@
text
@d9 1
a9 1
 * $Id: ctm.c,v 1.2 1998/11/22 22:50:51 deraadt Exp $
a16 1
 * -B <file>		Backup to tar-file.
d24 2
a27 2
 * -p			Less paranoid.
 * -P			Paranoid.
d33 2
d36 3
d51 1
a51 1
    int stat=0;
a52 2
    extern int optopt,optind;
    extern char * optarg;
d55 1
d62 5
d70 1
a70 1
    while((c=getopt(argc,argv,"ab:B:cd:Fm:pPqr:R:T:uV:v")) != -1) {
d73 1
d75 3
d81 3
a84 3
	    case 'T': TmpDir = optarg;	break;
	    case 'F': Force = 1;	break;
	    case 'u': SetTime++;	break; /* Set timestamp on files */
d88 35
d124 1
a124 1
		fprintf(stderr,"Option '%c' requires an argument.\n",optopt);
d128 1
a128 1
		fprintf(stderr,"Option '%c' not supported.\n",optopt);
d132 1
a132 1
		fprintf(stderr,"Option '%c' not yet implemented.\n",optopt);
d138 1
a138 1
	fprintf(stderr,"%d errors during option processing\n",stat);
d160 10
a169 6
    if((statfile = fopen(Buffer, "r")) == NULL)
	fprintf(stderr, "Warning: %s not found.\n", Buffer);
    else {
	fscanf(statfile, "%*s %u", &applied);
	fclose(statfile);
    }
d176 1
a176 1
	stat &= ~Exit_Version;
d182 9
a190 2
    if(Verbose)
	fprintf(stderr,"Exit(%d)\n",stat);
d209 1
a209 1
	if(!f) { perror(p); return Exit_Garbage; }
d215 1
a215 1
	perror(filename);
d229 1
a229 1
	int fd;
d232 1
a232 1
	    fprintf(stderr, "Cannot allocate memory\n");
d237 1
a237 1
	    perror(fn);
d245 2
a246 1
	fprintf(stderr,"Writing tmp-file \"%s\"\n",fn);
d263 5
d273 1
a273 1
	if(!f) { perror(p); return Exit_Broke; }
d283 1
a283 1
	if(!f) { perror(p); return Exit_Broke; }
d292 2
a293 1
        fprintf(stderr,"All checks out ok.\n");
d297 14
d323 3
a325 1
    fprintf(stderr,"All done ok\n");
@


1.2
log
@race-less tempnam() use
@
text
@d9 1
a9 1
 * $Id: ctm.c,v 1.1.1.1 1996/10/30 17:32:58 graichen Exp $
d170 2
a171 2
	FILE *f2 = NULL;
	int fd, i;
d173 4
a176 13
	while (1) {
		fn = tempnam(TmpDir,"CTMclient");
		if (fn == NULL)
			break;
		fd = open(fn, O_CREAT|O_EXCL|O_RDWR);
		if (fd == -1 && errno == EEXIST) {
			free(fn);
			continue;
		}
		if (fd == -1)
			break;
		f2 = fopen(fn,"w+");
		break;
d178 1
a178 2

	if(!f2) {
d180 3
d188 1
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
 * $Id: ctm.c,v 1.13 1996/04/29 21:02:28 phk Exp $
d169 18
a186 3
	char *fn = tempnam(TmpDir,"CTMclient");
	FILE *f2 = fopen(fn,"w+");
	int i;
@


1.1.1.1
log
@import ctm (current through mail)
for more see http://www.openbsd.org/ctm.html - it's basicaly the FreeBSD
version adapted to OpenBSD - i'll bring in the latest FreeBSD changes in the
next days
@
text
@@
