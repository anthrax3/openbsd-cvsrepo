head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.11;
commitid	d53S4Fpx9gPB2Hox;

1.11
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	QYSA2DhKNoKjBuQG;

1.10
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.9;
commitid	8yg0jKPVoY1hQFt1;

1.9
date	2017.01.21.08.49.30;	author florian;	state Exp;
branches;
next	1.8;
commitid	O2ijVXJOtDFoZw49;

1.8
date	2017.01.21.08.41.42;	author benno;	state Exp;
branches;
next	1.7;
commitid	gRa5yf7qfj3cY6Ul;

1.7
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	nxoiZiJPhAAVKQhE;

1.6
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	Kh60oAaRyMBwMrcR;

1.5
date	2016.09.13.16.00.26;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	8szp6q6UenXJEVZB;

1.4
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.3;
commitid	BIKpBY4sC6SiXDhj;

1.3
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	P9IiJlKSbxnKzQyC;

1.2
date	2016.08.31.22.49.09;	author benno;	state Exp;
branches;
next	1.1;
commitid	8gtjfePqHopzpxSq;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.12
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: chngproc.c,v 1.11 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "extern.h"

int
chngproc(int netsock, const char *root)
{
	char		 *tok = NULL, *th = NULL, *fmt = NULL, **fs = NULL;
	size_t		  i, fsz = 0;
	int		  rc = 0, fd = -1, cc;
	long		  lval;
	enum chngop	  op;
	void		 *pp;

	if (chroot(root) == -1) {
		warn("chroot");
		goto out;
	}
	if (chdir("/") == -1) {
		warn("chdir");
		goto out;
	}
	if (pledge("stdio cpath wpath", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	/*
	 * Loop while we wait to get a thumbprint and token.
	 * We'll get this for each SAN request.
	 */

	for (;;) {
		op = CHNG__MAX;
		if ((lval = readop(netsock, COMM_CHNG_OP)) == 0)
			op = CHNG_STOP;
		else if (lval == CHNG_SYN)
			op = lval;

		if (op == CHNG__MAX) {
			warnx("unknown operation from netproc");
			goto out;
		} else if (op == CHNG_STOP)
			break;

		assert(op == CHNG_SYN);

		/*
		 * Read the thumbprint and token.
		 * The token is the filename, so store that in a vector
		 * of tokens that we'll later clean up.
		 */

		if ((th = readstr(netsock, COMM_THUMB)) == NULL)
			goto out;
		else if ((tok = readstr(netsock, COMM_TOK)) == NULL)
			goto out;

		/* Vector appending... */

		pp = reallocarray(fs, (fsz + 1), sizeof(char *));
		if (pp == NULL) {
			warn("realloc");
			goto out;
		}
		fs = pp;
		fs[fsz] = tok;
		tok = NULL;
		fsz++;

		if (asprintf(&fmt, "%s.%s", fs[fsz - 1], th) == -1) {
			warn("asprintf");
			goto out;
		}

		/*
		 * Create and write to our challenge file.
		 * Note: we use file descriptors instead of FILE
		 * because we want to minimise our pledges.
		 */
		fd = open(fs[fsz - 1], O_WRONLY|O_EXCL|O_CREAT, 0444);
		if (fd == -1) {
			warn("%s", fs[fsz - 1]);
			goto out;
		} if (write(fd, fmt, strlen(fmt)) == -1) {
			warn("%s", fs[fsz - 1]);
			goto out;
		} else if (close(fd) == -1) {
			warn("%s", fs[fsz - 1]);
			goto out;
		}
		fd = -1;

		free(th);
		free(fmt);
		th = fmt = NULL;

		dodbg("%s/%s: created", root, fs[fsz - 1]);

		/*
		 * Write our acknowledgement.
		 * Ignore reader failure.
		 */

		cc = writeop(netsock, COMM_CHNG_ACK, CHNG_ACK);
		if (cc == 0)
			break;
		if (cc < 0)
			goto out;
	}

	rc = 1;
out:
	close(netsock);
	if (fd != -1)
		close(fd);
	for (i = 0; i < fsz; i++) {
		if (unlink(fs[i]) == -1 && errno != ENOENT)
			warn("%s", fs[i]);
		free(fs[i]);
	}
	free(fs);
	free(fmt);
	free(th);
	free(tok);
	return rc;
}
@


1.11
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.10 2017/01/24 12:05:14 jsing Exp $ */
d150 1
a150 1
	return(rc);
@


1.10
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.9 2017/01/21 08:49:30 florian Exp $ */
d64 1
a64 1
		if (CHNG__MAX == op) {
d67 1
a67 1
		} else if (CHNG_STOP == op)
d70 1
a70 1
		assert(CHNG_SYN == op);
@


1.9
log
@kill remote with fire, we need to handle this differently
OK benno
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.8 2017/01/21 08:41:42 benno Exp $ */
d59 1
a59 1
		if (0 == (lval = readop(netsock, COMM_CHNG_OP)))
d61 1
a61 1
		else if (CHNG_SYN == lval)
d78 1
a78 1
		if (NULL == (th = readstr(netsock, COMM_THUMB)))
d80 1
a80 1
		else if (NULL == (tok = readstr(netsock, COMM_TOK)))
d86 1
a86 1
		if (NULL == pp) {
d95 1
a95 1
		if (-1 == asprintf(&fmt, "%s.%s", fs[fsz - 1], th)) {
d106 1
a106 1
		if (-1 == fd) {
d109 1
a109 1
		} if (-1 == write(fd, fmt, strlen(fmt))) {
d112 1
a112 1
		} else if (-1 == close(fd)) {
d130 1
a130 1
		if (0 == cc)
d139 1
a139 1
	if (-1 != fd)
d142 1
a142 1
		if (-1 == unlink(fs[i]) && ENOENT != errno)
@


1.8
log
@acme-client use configuration file [1 of 5]

start using the configuration file and delete command line arguments:

-a agreement    -> agreement url ...
-c certdir      -> domain certificate "path"
-f accountkey   -> account key "path"
-k domainkey    -> domain key "path"
-s authority    -> sign with "name"

new argument:
-f configfile

the changes needed to use the new configuration are local to main.c for now.
While the configuration could be passed directly to netproc(), keyproc() etc,
the diff is smaller this way.

This also removes the multidir (-m) mode for now - specify different paths in
each domain {} block instead.

ok florian
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.7 2016/09/13 17:13:37 deraadt Exp $ */
a37 1
	int		  remote = 0; /* XXX maybe remove */
d101 3
a103 4
		 * I use this for testing when letskencrypt is being run
		 * on machines apart from where I'm hosting the
		 * challenge directory.
		 * DON'T DEPEND ON THIS FEATURE.
d105 10
a114 25
		if (remote) {
			puts("RUN THIS IN THE CHALLENGE DIRECTORY");
			puts("YOU HAVE 20 SECONDS...");
			printf("doas sh -c \"echo %s > %s\"\n",
			    fmt, fs[fsz - 1]);
			sleep(20);
			puts("TIME'S UP.");
		} else {
			/*
			 * Create and write to our challenge file.
			 * Note: we use file descriptors instead of FILE
			 * because we want to minimise our pledges.
			 */
			fd = open(fs[fsz - 1], O_WRONLY|O_EXCL|O_CREAT, 0444);
			if (-1 == fd) {
				warn("%s", fs[fsz - 1]);
				goto out;
			} if (-1 == write(fd, fmt, strlen(fmt))) {
				warn("%s", fs[fsz - 1]);
				goto out;
			} else if (-1 == close(fd)) {
				warn("%s", fs[fsz - 1]);
				goto out;
			}
			fd = -1;
d116 1
@


1.7
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.6 2016/09/13 16:49:28 deraadt Exp $ */
d30 1
a30 1
chngproc(int netsock, const char *root, int remote)
d38 1
@


1.6
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.5 2016/09/13 16:00:26 deraadt Exp $ */
d110 1
a110 1
				fmt, fs[fsz - 1]);
d119 1
a119 2
			fd = open(fs[fsz - 1],
				O_WRONLY|O_EXCL|O_CREAT, 0444);
@


1.5
log
@use reallocarray()
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.4 2016/09/01 00:35:21 florian Exp $ */
d32 3
a34 1
	int		  rc;
a36 3
	char		 *tok, *th, *fmt;
	char		**fs;
	size_t		  i, fsz;
a37 7
	int		  fd, cc;

	rc = 0;
	th = tok = fmt = NULL;
	fd = -1;
	fs = NULL;
	fsz = 0;
@


1.4
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.3 2016/09/01 00:21:36 deraadt Exp $ */
d93 1
a93 1
		pp = realloc(fs, (fsz + 1) * sizeof(char *));
@


1.3
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.2 2016/08/31 22:49:09 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d50 2
a51 3
	/* File-system and sandbox jailing. */

	if ( ! sandbox_before())
d53 3
a55 1
	else if ( ! dropfs(root))
d57 3
a59 1
	else if ( ! sandbox_after())
d61 1
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: chngproc.c,v 1.30 2016/06/01 20:54:18 kristaps Exp $ */
d59 1
a59 1
	/* 
d66 1
a66 1
		if (0 == (lval = readop(netsock, COMM_CHNG_OP))) 
d79 1
a79 1
		/* 
d116 1
a116 1
			printf("doas sh -c \"echo %s > %s\"\n", 
d120 2
a121 2
		} else { 
			/* 
d126 1
a126 1
			fd = open(fs[fsz - 1], 
d147 2
a148 2
		/* 
		 * Write our acknowledgement. 
@

