head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.8;
commitid	d53S4Fpx9gPB2Hox;

1.8
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	QYSA2DhKNoKjBuQG;

1.7
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.6;
commitid	8yg0jKPVoY1hQFt1;

1.6
date	2017.01.24.07.59.54;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	XKM0X5d5Xq51lWq2;

1.5
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	nxoiZiJPhAAVKQhE;

1.4
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	Kh60oAaRyMBwMrcR;

1.3
date	2016.09.01.00.35.22;	author florian;	state Exp;
branches;
next	1.2;
commitid	BIKpBY4sC6SiXDhj;

1.2
date	2016.08.31.23.49.16;	author benno;	state Exp;
branches;
next	1.1;
commitid	lINBM3sshOzqgS64;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.9
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: util.c,v 1.8 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/wait.h>

#include <assert.h>
#include <err.h>
#include <errno.h>
#include <limits.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <unistd.h>

#include "extern.h"

static	volatile sig_atomic_t sig;

static	const char *const comps[COMP__MAX] = {
	"netproc", /* COMP_NET */
	"keyproc", /* COMP_KEY */
	"certproc", /* COMP_CERT */
	"acctproc", /* COMP_ACCOUNT */
	"challengeproc", /* COMP_CHALLENGE */
	"fileproc", /* COMP_FILE */
	"dnsproc", /* COMP_DNS */
	"revokeproc", /* COMP_REVOKE */
};

static	const char *const comms[COMM__MAX] = {
	"req", /* COMM_REQ */
	"thumbprint", /* COMM_THUMB */
	"cert", /* COMM_CERT */
	"payload", /* COMM_PAY */
	"nonce", /* COMM_NONCE */
	"token", /* COMM_TOK */
	"challenge-op", /* COMM_CHNG_OP */
	"challenge-ack", /* COMM_CHNG_ACK */
	"account", /* COMM_ACCT */
	"acctpro-status", /* COMM_ACCT_STAT */
	"csr", /* COMM_CSR */
	"csr-op", /* COMM_CSR_OP */
	"issuer", /* COMM_ISSUER */
	"chain", /* COMM_CHAIN */
	"chain-op", /* COMM_CHAIN_OP */
	"dns", /* COMM_DNS */
	"dnsq", /* COMM_DNSQ */
	"dns-address", /* COMM_DNSA */
	"dns-family", /* COMM_DNSF */
	"dns-length", /* COMM_DNSLEN */
	"keyproc-status", /* COMM_KEY_STAT */
	"revoke-op", /* COMM_REVOKE_OP */
	"revoke-check", /* COMM_REVOKE_CHECK */
	"revoke-response", /* COMM_REVOKE_RESP */
};

static void
sigpipe(int code)
{

	(void)code;
	sig = 1;
}

/*
 * This will read a long-sized operation.
 * Operations are usually enums, so this should be alright.
 * We return 0 on EOF and LONG_MAX on failure.
 */
long
readop(int fd, enum comm comm)
{
	ssize_t		 ssz;
	long		 op;

	ssz = read(fd, &op, sizeof(long));
	if (ssz < 0) {
		warn("read: %s", comms[comm]);
		return LONG_MAX;
	} else if (ssz && ssz != sizeof(long)) {
		warnx("short read: %s", comms[comm]);
		return LONG_MAX;
	} else if (ssz == 0)
		return 0;

	return op;
}

char *
readstr(int fd, enum comm comm)
{
	size_t	 sz;

	return readbuf(fd, comm, &sz);
}

/*
 * Read a buffer from the sender.
 * This consists of two parts: the lenght of the buffer, and the buffer
 * itself.
 * We allow the buffer to be binary, but NUL-terminate it anyway.
 */
char *
readbuf(int fd, enum comm comm, size_t *sz)
{
	ssize_t		 ssz;
	size_t		 rsz, lsz;
	char		*p = NULL;

	if ((ssz = read(fd, sz, sizeof(size_t))) < 0) {
		warn("read: %s length", comms[comm]);
		return NULL;
	} else if ((size_t)ssz != sizeof(size_t)) {
		warnx("short read: %s length", comms[comm]);
		return NULL;
	} else if (*sz > SIZE_MAX - 1) {
		warnx("integer overflow");
		return NULL;
	} else if ((p = calloc(1, *sz + 1)) == NULL) {
		warn("malloc");
		return NULL;
	}

	/* Catch this over several reads. */

	rsz = 0;
	lsz = *sz;
	while (lsz) {
		if ((ssz = read(fd, p + rsz, lsz)) < 0) {
			warn("read: %s", comms[comm]);
			break;
		} else if (ssz > 0) {
			assert((size_t)ssz <= lsz);
			rsz += (size_t)ssz;
			lsz -= (size_t)ssz;
		}
	}

	if (lsz) {
		warnx("couldn't read buffer: %s", comms[comm]);
		free(p);
		return NULL;
	}

	return p;
}

/*
 * Wring a long-value to a communication pipe.
 * Returns 0 if the reader has terminated, -1 on error, 1 on success.
 */
int
writeop(int fd, enum comm comm, long op)
{
	void	(*sigfp)(int);
	ssize_t	 ssz;
	int	 er;

	sigfp = signal(SIGPIPE, sigpipe);

	if ((ssz = write(fd, &op, sizeof(long))) < 0) {
		if ((er = errno) != EPIPE)
			warn("write: %s", comms[comm]);
		signal(SIGPIPE, sigfp);
		return er == EPIPE ? 0 : -1;
	}

	signal(SIGPIPE, sigfp);

	if ((size_t)ssz != sizeof(long)) {
		warnx("short write: %s", comms[comm]);
		return -1;
	}

	return 1;
}

/*
 * Fully write the given buffer.
 * Returns 0 if the reader has terminated, -1 on error, 1 on success.
 */
int
writebuf(int fd, enum comm comm, const void *v, size_t sz)
{
	ssize_t	 ssz;
	int	 er, rc = -1;
	void	(*sigfp)(int);

	/*
	 * First, try to write the length.
	 * If the other end of the pipe has closed, we allow the short
	 * write to propogate as a return value of zero.
	 * To detect this, catch SIGPIPE.
	 */

	sigfp = signal(SIGPIPE, sigpipe);

	if ((ssz = write(fd, &sz, sizeof(size_t))) < 0) {
		if ((er = errno) != EPIPE)
			warn("write: %s length", comms[comm]);
		signal(SIGPIPE, sigfp);
		return er == EPIPE ? 0 : -1;
	}

	/* Now write errors cause us to bail. */

	if ((size_t)ssz != sizeof(size_t))
		warnx("short write: %s length", comms[comm]);
	else if ((ssz = write(fd, v, sz)) < 0)
		warn("write: %s", comms[comm]);
	else if (sz != (size_t)ssz)
		warnx("short write: %s", comms[comm]);
	else
		rc = 1;

	signal(SIGPIPE, sigfp);
	return rc;
}

int
writestr(int fd, enum comm comm, const char *v)
{

	return writebuf(fd, comm, v, strlen(v));
}

/*
 * Make sure that the given process exits properly, i.e., properly
 * exiting with EXIT_SUCCESS.
 * Returns non-zero on success and zero on failure.
 */
int
checkexit(pid_t pid, enum comp comp)
{
	int		 c, cc;
	const char	*cp;

	if (waitpid(pid, &c, 0) == -1) {
		warn("waitpid");
		return 0;
	} else if (!WIFEXITED(c) && WIFSIGNALED(c)) {
		cp = strsignal(WTERMSIG(c));
		warnx("signal: %s(%u): %s", comps[comp], pid, cp);
		return 0;
	} else if (!WIFEXITED(c)) {
		warnx("did not exit: %s(%u)", comps[comp], pid);
		return 0;
	} else if (WEXITSTATUS(c) != EXIT_SUCCESS) {
		cc = WEXITSTATUS(c);
		dodbg("bad exit: %s(%u): %d", comps[comp], pid, cc);
		return 0;
	}

	return 1;
}

/*
 * Make sure that the given process exits properly, i.e., properly
 * exiting with EXIT_SUCCESS *or* 2.
 * Returns non-zero on success and zero on failure and sets the "rc"
 * value to be the exit status.
 */
int
checkexit_ext(int *rc, pid_t pid, enum comp comp)
{
	int		 c;
	const char	*cp;

	*rc = EXIT_FAILURE;

	if (waitpid(pid, &c, 0) == -1) {
		warn("waitpid");
		return 0;
	}

	if (!WIFEXITED(c) && WIFSIGNALED(c)) {
		cp = strsignal(WTERMSIG(c));
		warnx("signal: %s(%u): %s", comps[comp], pid, cp);
		return 0;
	} else if (!WIFEXITED(c)) {
		warnx("did not exit: %s(%u)", comps[comp], pid);
		return 0;
	}

	/* Now check extended status. */

	if ((*rc = WEXITSTATUS(c)) != EXIT_SUCCESS && *rc != 2) {
		dodbg("bad exit: %s(%u): %d", comps[comp], pid, *rc);
		return 0;
	}
	return 1;
}
@


1.8
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.7 2017/01/24 12:05:14 jsing Exp $ */
d96 1
a96 1
		return (LONG_MAX);
d99 1
a99 1
		return (LONG_MAX);
d101 1
a101 1
		return (0);
d103 1
a103 1
	return (op);
d111 1
a111 1
	return (readbuf(fd, comm, &sz));
d129 1
a129 1
		return (NULL);
d132 1
a132 1
		return (NULL);
d135 1
a135 1
		return (NULL);
d138 1
a138 1
		return (NULL);
d159 1
a159 1
		return (NULL);
d162 1
a162 1
	return (p);
d182 1
a182 1
		return (er == EPIPE ? 0 : -1);
d189 1
a189 1
		return (-1);
d192 1
a192 1
	return (1);
d219 1
a219 1
		return (er == EPIPE ? 0 : -1);
d234 1
a234 1
	return (rc);
d241 1
a241 1
	return (writebuf(fd, comm, v, strlen(v)));
d257 1
a257 1
		return (0);
d261 1
a261 1
		return (0);
d264 1
a264 1
		return (0);
d268 1
a268 1
		return (0);
d271 1
a271 1
	return (1);
d290 1
a290 1
		return (0);
d296 1
a296 1
		return (0);
d299 1
a299 1
		return (0);
d306 1
a306 1
		return (0);
d308 1
a308 1
	return (1);
@


1.7
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.6 2017/01/24 07:59:54 deraadt Exp $ */
d228 1
a228 1
	else if ((size_t)ssz != sz)
@


1.6
log
@string terminator is called a NUL
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.5 2016/09/13 17:13:37 deraadt Exp $ */
d100 1
a100 1
	} else if (0 == ssz)
d136 1
a136 1
	} else if (NULL == (p = calloc(1, *sz + 1))) {
d179 1
a179 1
		if (EPIPE != (er = errno))
d182 1
a182 1
		return (EPIPE == er ? 0 : -1);
d216 1
a216 1
		if (EPIPE != (er = errno))
d219 1
a219 1
		return (EPIPE == er ? 0 : -1);
d255 1
a255 1
	if (-1 == waitpid(pid, &c, 0)) {
d265 1
a265 1
	} else if (EXIT_SUCCESS != WEXITSTATUS(c)) {
d288 1
a288 1
	if (-1 == waitpid(pid, &c, 0)) {
d304 1
a304 1
	if (EXIT_SUCCESS != (*rc = WEXITSTATUS(c)) && 2 != *rc) {
@


1.5
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.4 2016/09/13 16:49:28 deraadt Exp $ */
d118 1
a118 1
 * We allow the buffer to be binary, but nil-terminate it anyway.
@


1.4
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.3 2016/09/01 00:35:22 florian Exp $ */
d258 1
a258 1
	} else if ( ! WIFEXITED(c) && WIFSIGNALED(c)) {
d262 1
a262 1
	} else if ( ! WIFEXITED(c)) {
d293 1
a293 1
	if ( ! WIFEXITED(c) && WIFSIGNALED(c)) {
d297 1
a297 1
	} else if ( ! WIFEXITED(c)) {
@


1.3
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.2 2016/08/31 23:49:16 benno Exp $ */
d125 1
a125 3
	char		*p;

	p = NULL;
d203 1
a203 1
	int	 er, rc;
a204 2

	rc = -1;
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: util.c,v 1.38 2016/07/13 04:02:57 kristaps Exp $ */
d93 1
a93 1
	ssize_t	 	 ssz;
d99 1
a99 1
		return(LONG_MAX);
d102 1
a102 1
		return(LONG_MAX);
d104 1
a104 1
		return(0);
d106 1
a106 1
	return(op);
d114 1
a114 1
	return(readbuf(fd, comm, &sz));
d134 1
a134 1
		return(NULL);
d137 1
a137 1
		return(NULL);
d140 1
a140 1
		return(NULL);
d143 1
a143 1
		return(NULL);
d164 1
a164 1
		return(NULL);
d167 1
a167 1
	return(p);
d187 1
a187 1
		return(EPIPE == er ? 0 : -1);
d194 2
a195 2
		return(-1);
	} 
d197 1
a197 1
	return(1);
d226 1
a226 1
		return(EPIPE == er ? 0 : -1);
d231 1
a231 1
	if ((size_t)ssz != sizeof(size_t)) 
d241 1
a241 1
	return(rc);
d248 1
a248 1
	return(writebuf(fd, comm, v, strlen(v)));
d264 1
a264 1
		return(0);
d268 1
a268 1
		return(0);
d271 1
a271 1
		return(0);
d275 1
a275 1
		return(0);
d278 1
a278 1
	return(1);
d297 1
a297 1
		return(0);
d303 1
a303 1
		return(0);
d306 3
a308 3
		return(0);
	} 
	
d313 1
a313 1
		return(0);
d315 1
a315 1
	return(1);
a316 1

@

