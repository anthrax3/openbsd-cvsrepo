head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2017.01.21.08.54.26;	author florian;	state Exp;
branches;
next	1.7;
commitid	Uiu2I50X4ppn4tZ4;

1.7
date	2017.01.21.08.52.30;	author florian;	state Exp;
branches;
next	1.6;
commitid	q7qJsshzLEmCz5cx;

1.6
date	2017.01.21.08.41.42;	author benno;	state Exp;
branches;
next	1.5;
commitid	gRa5yf7qfj3cY6Ul;

1.5
date	2016.09.01.12.17.00;	author florian;	state Exp;
branches;
next	1.4;
commitid	gosvRyqlI28bFwVD;

1.4
date	2016.09.01.00.25.57;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	4t8m2TPovKjszh8A;

1.3
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	P9IiJlKSbxnKzQyC;

1.2
date	2016.08.31.22.49.09;	author benno;	state Exp;
branches;
next	1.1;
commitid	8gtjfePqHopzpxSq;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.8
log
@Split certificate file from config file into certdir and certfile.
This way we can still chroot to certdir but the the certificate file
is not fixed to "cert.pem".

Writing of chain.pem and fullchain.pem is currently broken with this.

OK benno
@
text
@/*	$Id: extern.h,v 1.7 2017/01/21 08:52:30 florian Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
#ifndef EXTERN_H
#define EXTERN_H

#include "parse.h"

#define MAX_SERVERS_DNS 8

#ifndef nitems
#define nitems(_a) (sizeof((_a)) / sizeof((_a)[0]))
#endif

/*
 * Requests to and from acctproc.
 */
enum	acctop {
	ACCT_STOP = 0,
	ACCT_READY,
	ACCT_SIGN,
	ACCT_THUMBPRINT,
	ACCT__MAX
};

/*
 * Requests to and from chngproc.
 */
enum	chngop {
	CHNG_STOP = 0,
	CHNG_SYN,
	CHNG_ACK,
	CHNG__MAX
};

/*
 * Requests to keyproc.
 */
enum	keyop {
	KEY_STOP = 0,
	KEY_READY,
	KEY__MAX
};

/*
 * Requests to certproc.
 */
enum	certop {
	CERT_STOP = 0,
	CERT_REVOKE,
	CERT_UPDATE,
	CERT__MAX
};

/*
 * Requests to fileproc.
 */
enum	fileop {
	FILE_STOP = 0,
	FILE_REMOVE,
	FILE_CREATE,
	FILE__MAX
};

/*
 * Requests to dnsproc.
 */
enum	dnsop {
	DNS_STOP = 0,
	DNS_LOOKUP,
	DNS__MAX
};

enum	revokeop {
	REVOKE_STOP = 0,
	REVOKE_CHECK,
	REVOKE_EXP,
	REVOKE_OK,
	REVOKE__MAX
};

/*
 * Our components.
 * Each one of these is in a separated, isolated process.
 */
enum	comp {
	COMP_NET, /* network-facing (to ACME) */
	COMP_KEY, /* handles domain keys */
	COMP_CERT, /* handles domain certificates */
	COMP_ACCOUNT, /* handles account key */
	COMP_CHALLENGE, /* handles challenges */
	COMP_FILE, /* handles writing certs */
	COMP_DNS, /* handles DNS lookups */
	COMP_REVOKE, /* checks X509 expiration */
	COMP__MAX
};

/*
 * Inter-process communication labels.
 * This is purely for looking at debugging.
 */
enum	comm {
	COMM_REQ,
	COMM_THUMB,
	COMM_CERT,
	COMM_PAY,
	COMM_NONCE,
	COMM_TOK,
	COMM_CHNG_OP,
	COMM_CHNG_ACK,
	COMM_ACCT,
	COMM_ACCT_STAT,
	COMM_CSR,
	COMM_CSR_OP,
	COMM_ISSUER,
	COMM_CHAIN,
	COMM_CHAIN_OP,
	COMM_DNS,
	COMM_DNSQ,
	COMM_DNSA,
	COMM_DNSF,
	COMM_DNSLEN,
	COMM_KEY_STAT,
	COMM_REVOKE_OP,
	COMM_REVOKE_CHECK,
	COMM_REVOKE_RESP,
	COMM__MAX
};

/*
 * This contains the URI and token of an ACME-issued challenge.
 * A challenge consists of a token, which we must present on the
 * (presumably!) local machine to an ACME connection; and a URI, to
 * which we must connect to verify the token.
 */
struct	chng {
	char		*uri; /* uri on ACME server */
	char		*token; /* token we must offer */
	size_t		 retry; /* how many times have we tried */
	int		 status; /* challenge accepted? */
};

/*
 * This consists of the services offered by the CA.
 * They must all be filled in.
 */
struct	capaths {
	char		*newauthz; /* new authorisation */
	char		*newcert;  /* sign certificate */
	char		*newreg; /* new acme account */
	char		*revokecert; /* revoke certificate */
};

struct	jsmnn;

__BEGIN_DECLS

/*
 * Start with our components.
 * These are all isolated and talk to each other using sockets.
 */
int		 acctproc(int, const char *, int);
int		 certproc(int, int);
int		 chngproc(int, const char *);
int		 dnsproc(int);
int		 revokeproc(int, const char *, const char *,
			int, int, const char *const *, size_t);
int		 fileproc(int, const char *, const char *, const char *,
			const char *);
int		 keyproc(int, const char *,
			const char **, size_t, int);
int		 netproc(int, int, int, int, int, int, int, int,
			struct authority_c *, const char *const *,
			size_t, const char *);

/*
 * Debugging functions.
 * These just route to warnx according to the verbosity.
 */
void		 dodbg(const char *, ...)
			__attribute__((format(printf, 1, 2)));
void		 doddbg(const char *, ...)
			__attribute__((format(printf, 1, 2)));

/*
 * Read and write things from the wire.
 * The readers behave differently with respect to EOF.
 */
long		 readop(int, enum comm);
char		*readbuf(int, enum comm, size_t *);
char		*readstr(int, enum comm);
int		 writebuf(int, enum comm, const void *, size_t);
int		 writestr(int, enum comm, const char *);
int		 writeop(int, enum comm, long);

int		 checkexit(pid_t, enum comp);
int		 checkexit_ext(int *, pid_t, enum comp);

/*
 * Base64 and URL encoding.
 * Returns a buffer or NULL on allocation error.
 */
size_t		 base64buf(char *, const char *, size_t);
size_t		 base64len(size_t);
char		*base64buf_url(const char *, size_t);

/*
 * JSON parsing routines.
 * Keep this all in on place, though it's only used by one file.
 */
struct jsmnn	*json_parse(const char *, size_t);
void		 json_free(struct jsmnn *);
int		 json_parse_response(struct jsmnn *);
void		 json_free_challenge(struct chng *);
int		 json_parse_challenge(struct jsmnn *, struct chng *);
void		 json_free_capaths(struct capaths *);
int		 json_parse_capaths(struct jsmnn *, struct capaths *);

char		*json_fmt_challenge(const char *, const char *);
char		*json_fmt_newauthz(const char *);
char		*json_fmt_newcert(const char *);
char		*json_fmt_newreg(const char *);
char		*json_fmt_protected_rsa(const char *,
			const char *, const char *);
char		*json_fmt_revokecert(const char *);
char		*json_fmt_header_rsa(const char *, const char *);
char		*json_fmt_thumb_rsa(const char *, const char *);
char		*json_fmt_signed(const char *,
			const char *, const char *, const char *);

/*
 * Should we print debugging messages?
 */
int		 verbose;

/*
 * What component is the process within (COMP__MAX for none)?
 */
enum comp	 proccomp;

__END_DECLS

#endif /* ! EXTERN_H */
@


1.7
log
@Remove backup option. This is not acme-client's business; also it gets
in the way.
OK benno
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.6 2017/01/21 08:41:42 benno Exp $ */
a23 7
#define	CERT_PEM "cert.pem"
#define	CERT_BAK "cert.pem~"
#define	CHAIN_PEM "chain.pem"
#define	CHAIN_BAK "chain.pem~"
#define	FCHAIN_PEM "fullchain.pem"
#define	FCHAIN_BAK "fullchain.pem~"

d179 1
a179 1
int		 revokeproc(int, const char *,
d181 2
a182 1
int		 fileproc(int, const char *);
@


1.6
log
@acme-client use configuration file [1 of 5]

start using the configuration file and delete command line arguments:

-a agreement    -> agreement url ...
-c certdir      -> domain certificate "path"
-f accountkey   -> account key "path"
-k domainkey    -> domain key "path"
-s authority    -> sign with "name"

new argument:
-f configfile

the changes needed to use the new configuration are local to main.c for now.
While the configuration could be passed directly to netproc(), keyproc() etc,
the diff is smaller this way.

This also removes the multidir (-m) mode for now - specify different paths in
each domain {} block instead.

ok florian
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.5 2016/09/01 12:17:00 florian Exp $ */
d188 1
a188 1
int		 fileproc(int, int, const char *);
@


1.5
log
@Implement table driven selection to which ACME authorities we can
talk.
Suggest by and OK deraadt, OK benno.

(Later on deraadt and benno discussed if this should be handled with a
config file. This seems to be good enough for now. We can do a config
file later.)
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.4 2016/09/01 00:25:57 deraadt Exp $ */
d20 2
a149 8
struct authority {
	char	*name;
	char	*agreement;
	char	*caurl;
};

extern struct authority authorities[];

d184 1
a184 1
int		 chngproc(int, const char *, int);
d191 3
a193 2
int		 netproc(int, int, int, int, int, int, int, int, int,
			const char *const *, size_t, const char *);
@


1.4
log
@PATH_VAR_EMPTY is not used
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.3 2016/09/01 00:21:36 deraadt Exp $ */
d29 3
d147 8
@


1.3
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.2 2016/08/31 22:49:09 benno Exp $ */
a18 4

#ifndef PATH_VAR_EMPTY
#define	PATH_VAR_EMPTY "/var/empty"
#endif
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.1 2016/08/31 22:01:42 florian Exp $ */
a246 7

int		 dropprivs(void);
int		 dropfs(const char *);
int		 checkprivs(void);

int		 sandbox_after(void);
int		 sandbox_before(void);
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: extern.h,v 1.50 2016/08/06 17:37:21 kristaps Exp $ */
d155 1
a155 1
struct 	chng {
d185 1
a185 1
int		 revokeproc(int, const char *, 
d245 1
a245 1
char		*json_fmt_signed(const char *, 
@

