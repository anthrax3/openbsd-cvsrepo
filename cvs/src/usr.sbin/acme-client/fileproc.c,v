head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14;
locks; strict;
comment	@ * @;


1.14
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.13;
commitid	d53S4Fpx9gPB2Hox;

1.13
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	QYSA2DhKNoKjBuQG;

1.12
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.11;
commitid	8yg0jKPVoY1hQFt1;

1.11
date	2017.01.24.07.59.54;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	XKM0X5d5Xq51lWq2;

1.10
date	2017.01.21.12.54.10;	author florian;	state Exp;
branches;
next	1.9;
commitid	mkwEBMFRIM4VxyvV;

1.9
date	2017.01.21.08.54.26;	author florian;	state Exp;
branches;
next	1.8;
commitid	Uiu2I50X4ppn4tZ4;

1.8
date	2017.01.21.08.53.10;	author florian;	state Exp;
branches;
next	1.7;
commitid	NBOgIyMpjU7ettNg;

1.7
date	2017.01.21.08.52.30;	author florian;	state Exp;
branches;
next	1.6;
commitid	q7qJsshzLEmCz5cx;

1.6
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	nxoiZiJPhAAVKQhE;

1.5
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	Kh60oAaRyMBwMrcR;

1.4
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.3;
commitid	BIKpBY4sC6SiXDhj;

1.3
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	P9IiJlKSbxnKzQyC;

1.2
date	2016.08.31.23.00.17;	author benno;	state Exp;
branches;
next	1.1;
commitid	QqSlzyzgKfrGB6fd;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.14
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: fileproc.c,v 1.13 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "extern.h"

static int
serialise(const char *tmp, const char *real,
    const char *v, size_t vsz, const char *v2, size_t v2sz)
{
	int	 fd;

	/*
	 * Write into backup location, overwriting.
	 * Then atomically (?) do the rename.
	 */

	fd = open(tmp, O_WRONLY|O_CREAT|O_TRUNC, 0444);
	if (fd == -1) {
		warn("%s", tmp);
		return 0;
	} else if ((ssize_t)vsz != write(fd, v, vsz)) {
		warnx("%s", tmp);
		close(fd);
		return 0;
	} else if (v2 != NULL && write(fd, v2, v2sz) != (ssize_t)v2sz) {
		warnx("%s", tmp);
		close(fd);
		return 0;
	} else if (close(fd) == -1) {
		warn("%s", tmp);
		return 0;
	} else if (rename(tmp, real) == -1) {
		warn("%s", real);
		return 0;
	}

	return 1;
}

int
fileproc(int certsock, const char *certdir, const char *certfile, const char
    *chainfile, const char *fullchainfile)
{
	char		*csr = NULL, *ch = NULL;
	char		*certfile_bak = NULL, *chainfile_bak = NULL;
	char		*fullchainfile_bak = NULL;
	size_t		 chsz, csz;
	int		 rc = 0;
	long		 lval;
	enum fileop	 op;

	/* File-system and sandbox jailing. */

	if (chroot(certdir) == -1) {
		warn("chroot");
		goto out;
	}
	if (chdir("/") == -1) {
		warn("chdir");
		goto out;
	}

	/*
	 * rpath and cpath for rename, wpath and cpath for
	 * writing to the temporary.
	 */
	if (pledge("stdio cpath wpath rpath", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	/* Read our operation. */

	op = FILE__MAX;
	if ((lval = readop(certsock, COMM_CHAIN_OP)) == 0)
		op = FILE_STOP;
	else if (lval == FILE_CREATE || lval == FILE_REMOVE)
		op = lval;

	if (FILE_STOP == op) {
		rc = 1;
		goto out;
	} else if (FILE__MAX == op) {
		warnx("unknown operation from certproc");
		goto out;
	}

	/*
	 * If revoking certificates, just unlink the files.
	 * We return the special error code of 2 to indicate that the
	 * certificates were removed.
	 */

	if (FILE_REMOVE == op) {
		if (certfile) {
			if (unlink(certfile) == -1 && errno != ENOENT) {
				warn("%s/%s", certdir, certfile);
				goto out;
			} else
				dodbg("%s/%s: unlinked", certdir, certfile);
		}

		if (chainfile) {
			if (unlink(chainfile) == -1 && errno != ENOENT) {
				warn("%s/%s", certdir, chainfile);
				goto out;
			} else
				dodbg("%s/%s: unlinked", certdir, chainfile);
		}

		if (fullchainfile) {
			if (unlink(fullchainfile) == -1 && errno != ENOENT) {
				warn("%s/%s", certdir, fullchainfile);
				goto out;
			} else
				dodbg("%s/%s: unlinked", certdir,
				    fullchainfile);
		}

		rc = 2;
		goto out;
	}

	/*
	 * Start by downloading the chain PEM as a buffer.
	 * This is not NUL-terminated, but we're just going to guess
	 * that it's well-formed and not actually touch the data.
	 * Once downloaded, dump it into CHAIN_BAK.
	 */

	if (certfile)
		if (asprintf(&certfile_bak, "%s~", certfile) == -1) {
			warn("asprintf");
			goto out;
		}

	if (chainfile)
		if (asprintf(&chainfile_bak, "%s~", chainfile) == -1) {
			warn("asprintf");
			goto out;
		}

	if (fullchainfile)
		if (asprintf(&fullchainfile_bak, "%s~", fullchainfile) == -1) {
			warn("asprintf");
			goto out;
		}

	if ((ch = readbuf(certsock, COMM_CHAIN, &chsz)) == NULL)
		goto out;

	if (chainfile) {
		if (!serialise(chainfile_bak, chainfile, ch, chsz, NULL, 0))
			goto out;

		dodbg("%s/%s: created", certdir, chainfile);
	}

	/*
	 * Next, wait until we receive the DER encoded (signed)
	 * certificate from the network process.
	 * This comes as a stream of bytes: we don't know how many, so
	 * just keep downloading.
	 */

	if ((csr = readbuf(certsock, COMM_CSR, &csz)) == NULL)
		goto out;

	if (certfile) {
		if (!serialise(certfile_bak, certfile, csr, csz, NULL, 0))
			goto out;

		dodbg("%s/%s: created", certdir, certfile);
	}

	/*
	 * Finally, create the full-chain file.
	 * This is just the concatenation of the certificate and chain.
	 * We return the special error code 2 to indicate that the
	 * on-file certificates were changed.
	 */
	if (fullchainfile) {
		if (!serialise(fullchainfile_bak, fullchainfile, csr, csz, ch,
		    chsz))
			goto out;

		dodbg("%s/%s: created", certdir, fullchainfile);
	}

	rc = 2;
out:
	close(certsock);
	free(csr);
	free(ch);
	free(certfile_bak);
	free(chainfile_bak);
	free(fullchainfile_bak);
	return rc;
}
@


1.13
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.12 2017/01/24 12:05:14 jsing Exp $ */
d43 1
a43 1
		return (0);
d47 1
a47 1
		return (0);
d51 1
a51 1
		return (0);
d54 1
a54 1
		return (0);
d57 1
a57 1
		return (0);
d60 1
a60 1
	return (1);
d221 1
a221 1
	return (rc);
@


1.12
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.11 2017/01/24 07:59:54 deraadt Exp $ */
d48 1
a48 1
	} else if (v2 != NULL && (ssize_t)v2sz != write(fd, v2, v2sz)) {
@


1.11
log
@string terminator is called a NUL
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.10 2017/01/21 12:54:10 florian Exp $ */
d41 1
a41 1
	if (-1 == fd) {
d48 1
a48 1
	} else if (NULL != v2 && (ssize_t)v2sz != write(fd, v2, v2sz)) {
d52 1
a52 1
	} else if (-1 == close(fd)) {
d55 1
a55 1
	} else if (-1 == rename(tmp, real)) {
d98 1
a98 1
	if (0 == (lval = readop(certsock, COMM_CHAIN_OP)))
d100 1
a100 1
	else if (FILE_CREATE == lval || FILE_REMOVE == lval)
d119 1
a119 1
			if (-1 == unlink(certfile) && ENOENT != errno) {
d127 1
a127 1
			if (-1 == unlink(chainfile) && ENOENT != errno) {
d135 1
a135 1
			if (-1 == unlink(fullchainfile) && ENOENT != errno) {
d172 1
a172 1
	if (NULL == (ch = readbuf(certsock, COMM_CHAIN, &chsz)))
d189 1
a189 1
	if (NULL == (csr = readbuf(certsock, COMM_CSR, &csz)))
@


1.10
log
@it is ok to only specify a full chain certificate
OK benno
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.9 2017/01/21 08:54:26 florian Exp $ */
d149 1
a149 1
	 * This is not nil-terminated, but we're just going to guess
@


1.9
log
@Split certificate file from config file into certdir and certfile.
This way we can still chroot to certdir but the the certificate file
is not fixed to "cert.pem".

Writing of chain.pem and fullchain.pem is currently broken with this.

OK benno
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.8 2017/01/21 08:53:10 florian Exp $ */
d154 5
a158 4
	if (asprintf(&certfile_bak, "%s~", certfile) == -1) {
		warn("asprintf");
		goto out;
	}
a190 2
	if (!serialise(certfile_bak, certfile, csr, csz, NULL, 0))
		goto out;
d192 6
a197 1
	dodbg("%s/%s: created", certdir, certfile);
@


1.8
log
@remove unused vars; OK benno
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.7 2017/01/21 08:52:30 florian Exp $ */
d64 2
a65 1
fileproc(int certsock, const char *certdir)
d68 2
d118 24
a141 17
		if (-1 == unlink(CERT_PEM) && ENOENT != errno) {
			warn("%s/%s", certdir, CERT_PEM);
			goto out;
		} else
			dodbg("%s/%s: unlinked", certdir, CERT_PEM);

		if (-1 == unlink(CHAIN_PEM) && ENOENT != errno) {
			warn("%s/%s", certdir, CHAIN_PEM);
			goto out;
		} else
			dodbg("%s/%s: unlinked", certdir, CHAIN_PEM);

		if (-1 == unlink(FCHAIN_PEM) && ENOENT != errno) {
			warn("%s/%s", certdir, FCHAIN_PEM);
			goto out;
		} else
			dodbg("%s/%s: unlinked", certdir, FCHAIN_PEM);
d154 17
a172 2
	if (!serialise(CHAIN_BAK, CHAIN_PEM, ch, chsz, NULL, 0))
		goto out;
d174 6
a179 1
	dodbg("%s/%s: created", certdir, CHAIN_PEM);
d190 1
a190 1
	if (!serialise(CERT_BAK, CERT_PEM, csr, csz, NULL, 0))
d193 1
a193 1
	dodbg("%s/%s: created", certdir, CERT_PEM);
d201 4
d206 2
a207 4
	if (!serialise(FCHAIN_BAK, FCHAIN_PEM, csr, csz, ch, chsz))
		goto out;

	dodbg("%s/%s: created", certdir, FCHAIN_PEM);
d214 3
@


1.7
log
@Remove backup option. This is not acme-client's business; also it gets
in the way.
OK benno
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.6 2016/09/13 17:13:37 deraadt Exp $ */
a24 1
#include <time.h>
a66 1
	char		 file[PATH_MAX];
a70 1
	time_t		 t;
@


1.6
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.5 2016/09/13 16:49:28 deraadt Exp $ */
d65 1
a65 1
fileproc(int certsock, int backup, const char *certdir)
a108 36
	}

	/*
	 * If we're backing up, then copy all files (found) by linking
	 * them to the file followed by the epoch in seconds.
	 * If we're going to remove, the unlink(2) will cause the
	 * original to go away.
	 * If we're going to update, the rename(2) will replace the
	 * certificate, leaving the backup as the only one.
	 */

	if (backup) {
		t = time(NULL);
		snprintf(file, sizeof(file),
			"cert-%llu.pem", (unsigned long long)t);
		if (-1 == link(CERT_PEM, file) && ENOENT != errno) {
			warnx("%s/%s", certdir, CERT_PEM);
			goto out;
		} else
			dodbg("%s/%s: linked to %s", certdir, CERT_PEM, file);

		snprintf(file, sizeof(file),
			"chain-%llu.pem", (unsigned long long)t);
		if (-1 == link(CHAIN_PEM, file) && ENOENT != errno) {
			warnx("%s/%s", certdir, CHAIN_PEM);
			goto out;
		} else
			dodbg("%s/%s: linked to %s", certdir, CHAIN_PEM, file);

		snprintf(file, sizeof(file),
			"fullchain-%llu.pem", (unsigned long long)t);
		if (-1 == link(FCHAIN_PEM, file) && ENOENT != errno) {
			warnx("%s/%s", certdir, FCHAIN_PEM);
			goto out;
		} else
			dodbg("%s/%s: linked to %s", certdir, FCHAIN_PEM, file);
@


1.5
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.4 2016/09/01 00:35:21 florian Exp $ */
d128 1
a128 2
			dodbg("%s/%s: linked to %s",
				certdir, CERT_PEM, file);
d136 1
a136 2
			dodbg("%s/%s: linked to %s",
				certdir, CHAIN_PEM, file);
d144 1
a144 2
			dodbg("%s/%s: linked to %s",
				certdir, FCHAIN_PEM, file);
d185 1
a185 1
	if ( ! serialise(CHAIN_BAK, CHAIN_PEM, ch, chsz, NULL, 0))
d199 1
a199 1
	if ( ! serialise(CERT_BAK, CERT_PEM, csr, csz, NULL, 0))
d211 1
a211 1
	if ( ! serialise(FCHAIN_BAK, FCHAIN_PEM, csr, csz, ch, chsz))
@


1.4
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.3 2016/09/01 00:21:36 deraadt Exp $ */
d32 1
a32 2
	const char *v, size_t vsz,
	const char *v2, size_t v2sz)
d67 2
a68 1
	char		*csr, *ch;
d70 1
a70 1
	int		 rc;
a73 4
	char		 file[PATH_MAX];

	csr = ch = NULL;
	rc = 0;
@


1.3
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.2 2016/08/31 23:00:17 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d84 2
a85 1
	if ( ! sandbox_before())
d87 3
a89 1
	else if ( ! dropfs(certdir))
d91 8
a98 1
	else if ( ! sandbox_after())
d100 1
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: fileproc.c,v 1.18 2016/07/28 13:32:29 kristaps Exp $ */
d34 1
a34 1
serialise(const char *tmp, const char *real, 
d38 1
a38 1
	int 	 fd;
d40 1
a40 1
	/* 
d48 1
a48 1
		return(0);
d52 1
a52 1
		return(0);
d56 1
a56 1
		return(0);
d59 1
a59 1
		return(0);
d62 1
a62 1
		return(0);
d65 1
a65 1
	return(1);
d94 1
a94 1
	if (0 == (lval = readop(certsock, COMM_CHAIN_OP))) 
d105 2
a106 2
	} 
	
d124 1
a124 1
			dodbg("%s/%s: linked to %s", 
d133 1
a133 1
			dodbg("%s/%s: linked to %s", 
d142 1
a142 1
			dodbg("%s/%s: linked to %s", 
d146 2
a147 2
	/* 
	 * If revoking certificates, just unlink the files. 
d220 1
a220 1
	return(rc);
@

