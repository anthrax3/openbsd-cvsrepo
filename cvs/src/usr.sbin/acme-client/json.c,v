head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9;
locks; strict;
comment	@ * @;


1.9
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.8;
commitid	d53S4Fpx9gPB2Hox;

1.8
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	QYSA2DhKNoKjBuQG;

1.7
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.6;
commitid	8yg0jKPVoY1hQFt1;

1.6
date	2016.09.13.20.09.54;	author tedu;	state Exp;
branches;
next	1.5;
commitid	cYWJG7EMfpWNRNn4;

1.5
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	nxoiZiJPhAAVKQhE;

1.4
date	2016.09.13.16.04.51;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	24EhsuVM5m11dYAL;

1.3
date	2016.09.01.00.35.22;	author florian;	state Exp;
branches;
next	1.2;
commitid	BIKpBY4sC6SiXDhj;

1.2
date	2016.08.31.23.19.50;	author benno;	state Exp;
branches;
next	1.1;
commitid	lmLT4R4VPNShD3PY;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.9
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: json.c,v 1.8 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <err.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "jsmn.h"
#include "extern.h"

struct	jsmnp;

/*
 * A node in the JSMN parse tree.
 * Each of this corresponds to an object in the original JSMN token
 * list, although the contents have been extracted properly.
 */
struct	jsmnn {
	struct parse	*p; /* parser object */
	union {
		char *str; /* JSMN_PRIMITIVE, JSMN_STRING */
		struct jsmnp *obj; /* JSMN_OBJECT */
		struct jsmnn **array; /* JSMN_ARRAY */
	} d;
	size_t		 fields; /* entries in "d" */
	jsmntype_t	 type; /* type of node */
};

/*
 * Objects consist of node pairs: the left-hand side (before the colon)
 * and the right-hand side---the data.
 */
struct	jsmnp {
	struct jsmnn	*lhs; /* left of colon */
	struct jsmnn	*rhs; /* right of colon */
};

/*
 * Object for converting the JSMN token array into a tree.
 */
struct	parse {
	struct jsmnn	*nodes; /* all nodes */
	size_t		 cur; /* current number */
	size_t		 max; /* nodes in "nodes" */
};

/*
 * Recursive part for convertin a JSMN token array into a tree.
 * See "example/jsondump.c" for its construction (it's the same except
 * for how it handles allocation errors).
 */
static ssize_t
build(struct parse *parse, struct jsmnn **np,
    jsmntok_t *t, const char *js, size_t sz)
{
	size_t		 i, j;
	struct jsmnn	*n;
	ssize_t		 tmp;

	if (sz == 0)
		return 0;

	assert(parse->cur < parse->max);
	n = *np = &parse->nodes[parse->cur++];
	n->p = parse;
	n->type = t->type;

	switch (t->type) {
	case JSMN_STRING:
		/* FALLTHROUGH */
	case JSMN_PRIMITIVE:
		n->fields = 1;
		n->d.str = strndup
			(js + t->start,
			 t->end - t->start);
		if (n->d.str == NULL)
			break;
		return 1;
	case JSMN_OBJECT:
		n->fields = t->size;
		n->d.obj = calloc(n->fields,
			sizeof(struct jsmnp));
		if (n->d.obj == NULL)
			break;
		for (i = j = 0; i < (size_t)t->size; i++) {
			tmp = build(parse,
				&n->d.obj[i].lhs,
				t + 1 + j, js, sz - j);
			if (tmp < 0)
				break;
			j += tmp;
			tmp = build(parse,
				&n->d.obj[i].rhs,
				t + 1 + j, js, sz - j);
			if (tmp < 0)
				break;
			j += tmp;
		}
		if (i < (size_t)t->size)
			break;
		return j + 1;
	case JSMN_ARRAY:
		n->fields = t->size;
		n->d.array = calloc(n->fields,
			sizeof(struct jsmnn *));
		if (n->d.array == NULL)
			break;
		for (i = j = 0; i < (size_t)t->size; i++) {
			tmp = build(parse,
				&n->d.array[i],
				t + 1 + j, js, sz - j);
			if (tmp < 0)
				break;
			j += tmp;
		}
		if (i < (size_t)t->size)
			break;
		return j + 1;
	default:
		break;
	}

	return -1;
}

/*
 * Fully free up a parse sequence.
 * This handles all nodes sequentially, not recursively.
 */
static void
jsmnparse_free(struct parse *p)
{
	size_t	 i;

	if (p == NULL)
		return;
	for (i = 0; i < p->max; i++) {
		struct jsmnn	*n = &p->nodes[i];
		switch (n->type) {
		case JSMN_ARRAY:
			free(n->d.array);
			break;
		case JSMN_OBJECT:
			free(n->d.obj);
			break;
		case JSMN_PRIMITIVE:
			free(n->d.str);
			break;
		case JSMN_STRING:
			free(n->d.str);
			break;
		case JSMN_UNDEFINED:
			break;
		}
	}
	free(p->nodes);
	free(p);
}

/*
 * Allocate a tree representation of "t".
 * This returns NULL on allocation failure or when sz is zero, in which
 * case all resources allocated along the way are freed already.
 */
static struct jsmnn *
jsmntree_alloc(jsmntok_t *t, const char *js, size_t sz)
{
	struct jsmnn	*first;
	struct parse	*p;

	if (sz == 0)
		return NULL;

	p = calloc(1, sizeof(struct parse));
	if (p == NULL)
		return NULL;

	p->max = sz;
	p->nodes = calloc(p->max, sizeof(struct jsmnn));
	if (p->nodes == NULL) {
		free(p);
		return NULL;
	}

	if (build(p, &first, t, js, sz) < 0) {
		jsmnparse_free(p);
		first = NULL;
	}

	return first;
}

/*
 * Call through to free parse contents.
 */
void
json_free(struct jsmnn *first)
{

	if (first != NULL)
		jsmnparse_free(first->p);
}

/*
 * Just check that the array object is in fact an object.
 */
static struct jsmnn *
json_getarrayobj(struct jsmnn *n)
{

	return n->type != JSMN_OBJECT ? NULL : n;
}

/*
 * Extract an array from the returned JSON object, making sure that it's
 * the correct type.
 * Returns NULL on failure.
 */
static struct jsmnn *
json_getarray(struct jsmnn *n, const char *name)
{
	size_t		 i;

	if (n->type != JSMN_OBJECT)
		return NULL;
	for (i = 0; i < n->fields; i++) {
		if (n->d.obj[i].lhs->type != JSMN_STRING &&
		    n->d.obj[i].lhs->type != JSMN_PRIMITIVE)
			continue;
		else if (strcmp(name, n->d.obj[i].lhs->d.str))
			continue;
		break;
	}
	if (i == n->fields)
		return NULL;
	if (n->d.obj[i].rhs->type != JSMN_ARRAY)
		return NULL;
	return n->d.obj[i].rhs;
}

/*
 * Extract a single string from the returned JSON object, making sure
 * that it's the correct type.
 * Returns NULL on failure.
 */
static char *
json_getstr(struct jsmnn *n, const char *name)
{
	size_t		 i;
	char		*cp;

	if (n->type != JSMN_OBJECT)
		return NULL;
	for (i = 0; i < n->fields; i++) {
		if (n->d.obj[i].lhs->type != JSMN_STRING &&
		    n->d.obj[i].lhs->type != JSMN_PRIMITIVE)
			continue;
		else if (strcmp(name, n->d.obj[i].lhs->d.str))
			continue;
		break;
	}
	if (i == n->fields)
		return NULL;
	if (n->d.obj[i].rhs->type != JSMN_STRING &&
	    n->d.obj[i].rhs->type != JSMN_PRIMITIVE)
		return NULL;

	cp = strdup(n->d.obj[i].rhs->d.str);
	if (cp == NULL)
		warn("strdup");
	return cp;
}

/*
 * Completely free the challenge response body.
 */
void
json_free_challenge(struct chng *p)
{

	free(p->uri);
	free(p->token);
	p->uri = p->token = NULL;
}

/*
 * Parse the response from the ACME server when we're waiting to see
 * whether the challenge has been ok.
 */
int
json_parse_response(struct jsmnn *n)
{
	char		*resp;
	int		 rc;

	if (n == NULL)
		return -1;
	if ((resp = json_getstr(n, "status")) == NULL)
		return -1;

	if (strcmp(resp, "valid") == 0)
		rc = 1;
	else if (strcmp(resp, "pending") == 0)
		rc = 0;
	else
		rc = -1;

	free(resp);
	return rc;
}

/*
 * Parse the response from a new-authz, which consists of challenge
 * information, into a structure.
 * We only care about the HTTP-01 response.
 */
int
json_parse_challenge(struct jsmnn *n, struct chng *p)
{
	struct jsmnn	*array, *obj;
	size_t		 i;
	int		 rc;
	char		*type;

	if (n == NULL)
		return 0;

	array = json_getarray(n, "challenges");
	if (array == NULL)
		return 0;

	for (i = 0; i < array->fields; i++) {
		obj = json_getarrayobj(array->d.array[i]);
		if (obj == NULL)
			continue;
		type = json_getstr(obj, "type");
		if (type == NULL)
			continue;
		rc = strcmp(type, "http-01");
		free(type);
		if (rc)
			continue;
		p->uri = json_getstr(obj, "uri");
		p->token = json_getstr(obj, "token");
		return p->uri != NULL && p->token != NULL;
	}

	return 0;
}

/*
 * Extract the CA paths from the JSON response object.
 * Return zero on failure, non-zero on success.
 */
int
json_parse_capaths(struct jsmnn *n, struct capaths *p)
{

	if (n == NULL)
		return 0;

	p->newauthz = json_getstr(n, "new-authz");
	p->newcert = json_getstr(n, "new-cert");
	p->newreg = json_getstr(n, "new-reg");
	p->revokecert = json_getstr(n, "revoke-cert");

	return p->newauthz != NULL && p->newcert != NULL &&
	    p->newreg != NULL && p->revokecert != NULL;
}

/*
 * Free up all of our CA-noted paths (which may all be NULL).
 */
void
json_free_capaths(struct capaths *p)
{

	free(p->newauthz);
	free(p->newcert);
	free(p->newreg);
	free(p->revokecert);
	memset(p, 0, sizeof(struct capaths));
}

/*
 * Parse an HTTP response body from a buffer of size "sz".
 * Returns an opaque pointer on success, otherwise NULL on error.
 */
struct jsmnn *
json_parse(const char *buf, size_t sz)
{
	struct jsmnn	*n;
	jsmn_parser	 p;
	jsmntok_t	*tok;
	int		 r;
	size_t		 tokcount;

	jsmn_init(&p);
	tokcount = 128;

	/* Do this until we don't need any more tokens. */
again:
	tok = calloc(tokcount, sizeof(jsmntok_t));
	if (tok == NULL) {
		warn("calloc");
		return NULL;
	}

	/* Actually try to parse the JSON into the tokens. */

	r = jsmn_parse(&p, buf, sz, tok, tokcount);
	if (r < 0 && r == JSMN_ERROR_NOMEM) {
		tokcount *= 2;
		free(tok);
		goto again;
	} else if (r < 0) {
		warnx("jsmn_parse: %d", r);
		free(tok);
		return NULL;
	}

	/* Now parse the tokens into a tree. */

	n = jsmntree_alloc(tok, buf, r);
	free(tok);
	return n;
}

/*
 * Format the "new-reg" resource request.
 */
char *
json_fmt_newreg(const char *license)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"resource\": \"new-reg\", "
	    "\"agreement\": \"%s\""
	    "}",
	    license);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Format the "new-authz" resource request.
 */
char *
json_fmt_newauthz(const char *domain)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"resource\": \"new-authz\", "
	    "\"identifier\": "
	    "{\"type\": \"dns\", \"value\": \"%s\"}"
	    "}",
	    domain);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Format the "challenge" resource request.
 */
char *
json_fmt_challenge(const char *token, const char *thumb)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"resource\": \"challenge\", "
	    "\"keyAuthorization\": \"%s.%s\""
	    "}",
	    token, thumb);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Format the "new-cert" resource request.
 */
char *
json_fmt_revokecert(const char *cert)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"resource\": \"revoke-cert\", "
	    "\"certificate\": \"%s\""
	    "}",
	    cert);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Format the "new-cert" resource request.
 */
char *
json_fmt_newcert(const char *cert)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"resource\": \"new-cert\", "
	    "\"csr\": \"%s\""
	    "}",
	    cert);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Header component of json_fmt_signed().
 */
char *
json_fmt_header_rsa(const char *exp, const char *mod)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"alg\": \"RS256\", "
	    "\"jwk\": "
	    "{\"e\": \"%s\", \"kty\": \"RSA\", \"n\": \"%s\"}"
	    "}",
	    exp, mod);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Protected component of json_fmt_signed().
 */
char *
json_fmt_protected_rsa(const char *exp, const char *mod, const char *nce)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"alg\": \"RS256\", "
	    "\"jwk\": "
	    "{\"e\": \"%s\", \"kty\": \"RSA\", \"n\": \"%s\"}, "
	    "\"nonce\": \"%s\""
	    "}",
	    exp, mod, nce);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Signed message contents for the CA server.
 */
char *
json_fmt_signed(const char *header, const char *protected,
    const char *payload, const char *digest)
{
	int	 c;
	char	*p;

	c = asprintf(&p, "{"
	    "\"header\": %s, "
	    "\"protected\": \"%s\", "
	    "\"payload\": \"%s\", "
	    "\"signature\": \"%s\""
	    "}",
	    header, protected, payload, digest);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}

/*
 * Produce thumbprint input.
 * This isn't technically a JSON string--it's the input we'll use for
 * hashing and digesting.
 * However, it's in the form of a JSON string, so do it here.
 */
char *
json_fmt_thumb_rsa(const char *exp, const char *mod)
{
	int	 c;
	char	*p;

	/*NOTE: WHITESPACE IS IMPORTANT. */

	c = asprintf(&p, "{\"e\":\"%s\",\"kty\":\"RSA\",\"n\":\"%s\"}",
	    exp, mod);
	if (c == -1) {
		warn("asprintf");
		p = NULL;
	}
	return p;
}
@


1.8
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.7 2017/01/24 12:05:14 jsing Exp $ */
d79 1
a79 1
		return (0);
d96 1
a96 1
		return (1);
d119 1
a119 1
		return (j + 1);
d136 1
a136 1
		return (j + 1);
d141 1
a141 1
	return (-1);
d190 1
a190 1
		return (NULL);
d194 1
a194 1
		return (NULL);
d200 1
a200 1
		return (NULL);
d208 1
a208 1
	return (first);
d229 1
a229 1
	return (n->type != JSMN_OBJECT ? NULL : n);
d243 1
a243 1
		return (NULL);
d253 1
a253 1
		return (NULL);
d255 2
a256 2
		return (NULL);
	return (n->d.obj[i].rhs);
d271 1
a271 1
		return (NULL);
d281 1
a281 1
		return (NULL);
d284 1
a284 1
		return (NULL);
d289 1
a289 1
	return (cp);
d315 1
a315 1
		return (-1);
d317 1
a317 1
		return (-1);
d327 1
a327 1
	return (rc);
d344 1
a344 1
		return (0);
d348 1
a348 1
		return (0);
d363 1
a363 1
		return (p->uri != NULL && p->token != NULL);
d366 1
a366 1
	return (0);
d378 1
a378 1
		return (0);
d385 2
a386 2
	return (p->newauthz != NULL && p->newcert != NULL &&
	    p->newreg != NULL && p->revokecert != NULL);
d424 1
a424 1
		return (NULL);
d437 1
a437 1
		return (NULL);
d444 1
a444 1
	return (n);
d465 1
a465 1
	return (p);
d487 1
a487 1
	return (p);
d508 1
a508 1
	return (p);
d529 1
a529 1
	return (p);
d550 1
a550 1
	return (p);
d572 1
a572 1
	return (p);
d595 1
a595 1
	return (p);
d619 1
a619 1
	return (p);
d642 1
a642 1
	return (p);
@


1.7
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.6 2016/09/13 20:09:54 tedu Exp $ */
d386 1
a386 1
		p->newreg != NULL && p->revokecert != NULL);
@


1.6
log
@convert some ifs to switches. ok millert tb
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.5 2016/09/13 17:13:37 deraadt Exp $ */
d78 1
a78 1
	if (0 == sz)
d94 1
a94 1
		if (NULL == n->d.str)
d101 1
a101 1
		if (NULL == n->d.obj)
d124 1
a124 1
		if (NULL == n->d.array)
d153 1
a153 1
	if (NULL == p)
d189 1
a189 1
	if (0 == sz)
d193 1
a193 1
	if (NULL == p)
d198 1
a198 1
	if (NULL == p->nodes) {
d218 1
a218 1
	if (NULL != first)
d229 1
a229 1
	return (JSMN_OBJECT != n->type ? NULL : n);
d242 1
a242 1
	if (JSMN_OBJECT != n->type)
d245 2
a246 2
		if (JSMN_STRING != n->d.obj[i].lhs->type &&
		    JSMN_PRIMITIVE != n->d.obj[i].lhs->type)
d254 1
a254 1
	if (JSMN_ARRAY != n->d.obj[i].rhs->type)
d270 1
a270 1
	if (JSMN_OBJECT != n->type)
d273 2
a274 2
		if (JSMN_STRING != n->d.obj[i].lhs->type &&
		    JSMN_PRIMITIVE != n->d.obj[i].lhs->type)
d282 2
a283 2
	if (JSMN_STRING != n->d.obj[i].rhs->type &&
	    JSMN_PRIMITIVE != n->d.obj[i].rhs->type)
d287 1
a287 1
	if (NULL == cp)
d314 1
a314 1
	if (NULL == n)
d316 1
a316 1
	if (NULL == (resp = json_getstr(n, "status")))
d319 1
a319 1
	if (0 == strcmp(resp, "valid"))
d321 1
a321 1
	else if (0 == strcmp(resp, "pending"))
d343 1
a343 1
	if (NULL == n)
d347 1
a347 1
	if (NULL == array)
d352 1
a352 1
		if (NULL == obj)
d355 1
a355 1
		if (NULL == type)
d363 1
a363 1
		return (NULL != p->uri && NULL != p->token);
d377 1
a377 1
	if (NULL == n)
d385 2
a386 2
	return (NULL != p->newauthz && NULL != p->newcert &&
	    NULL != p->newreg && NULL != p->revokecert);
d422 1
a422 1
	if (NULL == tok) {
d430 1
a430 1
	if (r < 0 && JSMN_ERROR_NOMEM == r) {
d461 1
a461 1
	if (-1 == c) {
d483 1
a483 1
	if (-1 == c) {
d504 1
a504 1
	if (-1 == c) {
d525 1
a525 1
	if (-1 == c) {
d546 1
a546 1
	if (-1 == c) {
d568 1
a568 1
	if (-1 == c) {
d591 1
a591 1
	if (-1 == c) {
d615 1
a615 1
	if (-1 == c) {
d638 1
a638 1
	if (-1 == c) {
@


1.5
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.4 2016/09/13 16:04:51 deraadt Exp $ */
d155 19
a173 9
	for (i = 0; i < p->max; i++)
		if (JSMN_ARRAY == p->nodes[i].type)
			free(p->nodes[i].d.array);
		else if (JSMN_OBJECT == p->nodes[i].type)
			free(p->nodes[i].d.obj);
		else if (JSMN_PRIMITIVE == p->nodes[i].type)
			free(p->nodes[i].d.str);
		else if (JSMN_STRING == p->nodes[i].type)
			free(p->nodes[i].d.str);
@


1.4
log
@Inconsistant use of case (value): idiom drives me nuts, I have no idea
what purpose it was intended to serve.
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.3 2016/09/01 00:35:22 florian Exp $ */
d72 1
a72 1
	jsmntok_t *t, const char *js, size_t sz)
d353 1
a353 2
		return (NULL != p->uri &&
		       NULL != p->token);
d375 2
a376 4
	return (NULL != p->newauthz &&
	       NULL != p->newcert &&
	       NULL != p->newreg &&
	       NULL != p->revokecert);
d447 4
a450 3
		"\"resource\": \"new-reg\", "
		"\"agreement\": \"%s\""
		"}", license);
d468 5
a472 4
		"\"resource\": \"new-authz\", "
		"\"identifier\": "
		"{\"type\": \"dns\", \"value\": \"%s\"}"
		"}", domain);
d490 4
a493 3
		"\"resource\": \"challenge\", "
		"\"keyAuthorization\": \"%s.%s\""
		"}", token, thumb);
d511 4
a514 3
		"\"resource\": \"revoke-cert\", "
		"\"certificate\": \"%s\""
		"}", cert);
d532 4
a535 3
		"\"resource\": \"new-cert\", "
		"\"csr\": \"%s\""
		"}", cert);
d553 5
a557 4
		"\"alg\": \"RS256\", "
		"\"jwk\": "
		"{\"e\": \"%s\", \"kty\": \"RSA\", \"n\": \"%s\"}"
		"}", exp, mod);
d575 6
a580 5
		"\"alg\": \"RS256\", "
		"\"jwk\": "
		"{\"e\": \"%s\", \"kty\": \"RSA\", \"n\": \"%s\"}, "
		"\"nonce\": \"%s\""
		"}", exp, mod, nce);
d593 1
a593 1
	const char *payload, const char *digest)
d599 6
a604 5
		"\"header\": %s, "
		"\"protected\": \"%s\", "
		"\"payload\": \"%s\", "
		"\"signature\": \"%s\""
		"}", header, protected, payload, digest);
d626 2
a627 3
	c = asprintf(&p,
		"{\"e\":\"%s\",\"kty\":\"RSA\",\"n\":\"%s\"}",
		exp, mod);
@


1.3
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.2 2016/08/31 23:19:50 benno Exp $ */
d87 1
a87 1
	case (JSMN_STRING):
d89 1
a89 1
	case (JSMN_PRIMITIVE):
d97 1
a97 1
	case (JSMN_OBJECT):
d120 1
a120 1
	case (JSMN_ARRAY):
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: json.c,v 1.17 2016/06/25 09:22:49 kristaps Exp $ */
d39 1
a39 1
struct 	jsmnn {
d74 1
a74 1
build(struct parse *parse, struct jsmnn **np, 
d77 1
a77 1
	size_t	 	 i, j;
d82 1
a82 1
		return(0);
d95 1
a95 1
			(js + t->start, 
d97 1
a97 1
		if (NULL == n->d.str) 
d99 1
a99 1
		return(1);
d102 1
a102 1
		n->d.obj = calloc(n->fields, 
d107 2
a108 2
			tmp = build(parse, 
				&n->d.obj[i].lhs, 
d113 2
a114 2
			tmp = build(parse, 
				&n->d.obj[i].rhs, 
d122 1
a122 1
		return(j + 1);
d125 1
a125 1
		n->d.array = calloc(n->fields, 
d130 2
a131 2
			tmp = build(parse, 
				&n->d.array[i], 
d139 1
a139 1
		return(j + 1);
d144 1
a144 1
	return(-1);
d183 1
a183 1
		return(NULL);
d187 1
a187 1
		return(NULL);
d193 1
a193 1
		return(NULL);
d201 1
a201 1
	return(first);
d233 1
a233 1
	size_t	 	 i;
d236 1
a236 1
		return(NULL);
d246 1
a246 1
		return(NULL);
d248 2
a249 2
		return(NULL);
	return(n->d.obj[i].rhs);
d260 1
a260 1
	size_t	 	 i;
d264 1
a264 1
		return(NULL);
d274 1
a274 1
		return(NULL);
d277 1
a277 1
		return(NULL);
d282 1
a282 1
	return(cp);
d308 1
a308 1
		return(-1);
d310 1
a310 1
		return(-1);
d312 1
a312 1
	if (0 == strcmp(resp, "valid")) 
d320 1
a320 1
	return(rc);
d337 1
a337 1
		return(0);
d341 1
a341 1
		return(0);
d356 1
a356 1
		return(NULL != p->uri &&
d360 1
a360 1
	return(0);
d372 1
a372 1
		return(0);
d379 1
a379 1
	return(NULL != p->newauthz &&
d411 1
a411 1
	
d420 1
a420 1
		return(NULL);
d433 1
a433 1
		return(NULL);
d440 1
a440 1
	return(n);
d459 2
a460 2
	} 
	return(p);
d480 2
a481 2
	} 
	return(p);
d501 1
a501 1
	return(p);
d521 1
a521 1
	return(p);
d541 1
a541 1
	return(p);
d562 1
a562 1
	return(p);
d584 1
a584 1
	return(p);
d591 1
a591 1
json_fmt_signed(const char *header, const char *protected, 
d606 2
a607 2
	} 
	return(p);
d624 1
a624 1
	c = asprintf(&p, 
d631 1
a631 1
	return(p);
@

