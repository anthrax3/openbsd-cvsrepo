head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.8;
commitid	d53S4Fpx9gPB2Hox;

1.8
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	QYSA2DhKNoKjBuQG;

1.7
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.6;
commitid	8yg0jKPVoY1hQFt1;

1.6
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	nxoiZiJPhAAVKQhE;

1.5
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	Kh60oAaRyMBwMrcR;

1.4
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.3;
commitid	BIKpBY4sC6SiXDhj;

1.3
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	P9IiJlKSbxnKzQyC;

1.2
date	2016.08.31.22.49.09;	author benno;	state Exp;
branches;
next	1.1;
commitid	8gtjfePqHopzpxSq;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.9
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: dnsproc.c,v 1.8 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/socket.h>
#include <arpa/inet.h>

#include <err.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "extern.h"

struct	addr {
	int	 family; /* 4 for PF_INET, 6 for PF_INET6 */
	char	 ip[INET6_ADDRSTRLEN];
};

/*
 * This is a modified version of host_dns in config.c of OpenBSD's ntpd.
 */
/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
static ssize_t
host_dns(const char *s, struct addr *vec)
{
	struct addrinfo		 hints, *res0, *res;
	int			 error;
	ssize_t			 vecsz;
	struct sockaddr		*sa;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM; /* DUMMY */
	/* ntpd MUST NOT use AI_ADDRCONFIG here */

	error = getaddrinfo(s, NULL, &hints, &res0);

	if (error == EAI_AGAIN ||
		/* FIXME */
#ifndef __FreeBSD__
	    error == EAI_NODATA ||
#endif
	    error == EAI_NONAME)
		return 0;

	if (error) {
		warnx("%s: parse error: %s",
		    s, gai_strerror(error));
		return -1;
	}

	for (vecsz = 0, res = res0;
	    res != NULL && vecsz < MAX_SERVERS_DNS;
	    res = res->ai_next) {
		if (res->ai_family != AF_INET &&
		    res->ai_family != AF_INET6)
			continue;

		sa = res->ai_addr;

		if (res->ai_family == AF_INET) {
			vec[vecsz].family = 4;
			inet_ntop(AF_INET,
			    &(((struct sockaddr_in *)sa)->sin_addr),
				vec[vecsz].ip, INET6_ADDRSTRLEN);
		} else {
			vec[vecsz].family = 6;
			inet_ntop(AF_INET6,
			    &(((struct sockaddr_in6 *)sa)->sin6_addr),
			    vec[vecsz].ip, INET6_ADDRSTRLEN);
		}

		dodbg("%s: DNS: %s", s, vec[vecsz].ip);
		vecsz++;
		break;
	}

	freeaddrinfo(res0);
	return vecsz;
}

int
dnsproc(int nfd)
{
	char		*look = NULL, *last = NULL;
	struct addr	 v[MAX_SERVERS_DNS];
	int		 rc = 0, cc;
	long		 lval;
	ssize_t		 vsz = 0;
	size_t		 i;
	enum dnsop	 op;

	if (pledge("stdio dns", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	/*
	 * This is simple: just loop on a request operation, and each
	 * time we write back zero or more entries.
	 * Also do a simple trick and cache the last lookup.
	 */

	for (;;) {
		op = DNS__MAX;
		if ((lval = readop(nfd, COMM_DNS)) == 0)
			op = DNS_STOP;
		else if (lval == DNS_LOOKUP)
			op = lval;

		if (op == DNS__MAX) {
			warnx("unknown operation from netproc");
			goto out;
		} else if (op == DNS_STOP)
			break;

		if ((look = readstr(nfd, COMM_DNSQ)) == NULL)
			goto out;

		/*
		 * Check if we're asked to repeat the lookup.
		 * If not, request it from host_dns().
		 */

		if (last == NULL || strcmp(look, last)) {
			if ((vsz = host_dns(look, v)) < 0)
				goto out;

			free(last);
			last = look;
			look = NULL;
		} else {
			doddbg("%s: cached", look);
			free(look);
			look = NULL;
		}

		if ((cc = writeop(nfd, COMM_DNSLEN, vsz)) == 0)
			break;
		else if (cc < 0)
			goto out;
		for (i = 0; i < (size_t)vsz; i++) {
			if (writeop(nfd, COMM_DNSF, v[i].family) <= 0)
				goto out;
			if (writestr(nfd, COMM_DNSA, v[i].ip) <= 0)
				goto out;
		}
	}

	rc = 1;
out:
	close(nfd);
	free(look);
	free(last);
	return rc;
}
@


1.8
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.7 2017/01/24 12:05:14 jsing Exp $ */
d74 1
a74 1
		return(0);
d79 1
a79 1
		return(-1);
d109 1
a109 1
	return(vecsz);
d185 1
a185 1
	return(rc);
@


1.7
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.6 2016/09/13 17:13:37 deraadt Exp $ */
d78 1
a78 1
			s, gai_strerror(error));
d141 1
a141 1
		if (DNS__MAX == op) {
d144 1
a144 1
		} else if (DNS_STOP == op)
@


1.6
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.5 2016/09/13 16:49:28 deraadt Exp $ */
d83 1
a83 1
	    NULL != res && vecsz < MAX_SERVERS_DNS;
d91 1
a91 1
		if (AF_INET == res->ai_family) {
d136 1
a136 1
		if (0 == (lval = readop(nfd, COMM_DNS)))
d138 1
a138 1
		else if (DNS_LOOKUP == lval)
d147 1
a147 1
		if (NULL == (look = readstr(nfd, COMM_DNSQ)))
d155 1
a155 1
		if (NULL == last || strcmp(look, last)) {
d168 1
a168 1
		if (0 == (cc = writeop(nfd, COMM_DNSLEN, vsz)))
@


1.5
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.4 2016/09/01 00:35:21 florian Exp $ */
d83 2
a84 2
	     NULL != res && vecsz < MAX_SERVERS_DNS;
	     res = res->ai_next) {
d94 1
a94 1
				&(((struct sockaddr_in *)sa)->sin_addr),
d99 2
a100 2
				&(((struct sockaddr_in6 *)sa)->sin6_addr),
				vec[vecsz].ip, INET6_ADDRSTRLEN);
@


1.4
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.3 2016/09/01 00:21:36 deraadt Exp $ */
d115 1
a115 2
	int		 rc, cc;
	char		*look, *last;
d117 1
d119 1
a120 1
	ssize_t		 vsz;
a121 4

	rc = 0;
	look = last = NULL;
	vsz = 0;
@


1.3
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.2 2016/08/31 22:49:09 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d130 2
a131 16
	/*
	 * Why don't we chroot() here?
	 * On OpenBSD, the pledge(2) takes care of our constraining the
	 * environment to DNS resolution only, so the chroot(2) is
	 * unnecessary.
	 * On Mac OS X, we can't chroot(2): we'd need to have an mdns
	 * responder thing in each jail.
	 * On Linux, forget it.  getaddrinfo(2) pulls on all sorts of
	 * mystery meat.
	 */

	if ( ! sandbox_before())
		goto out;
	else if ( ! dropprivs())
		goto out;
	else if ( ! sandbox_after())
d133 1
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: dnsproc.c,v 1.16 2016/06/25 08:59:57 kristaps Exp $ */
d71 1
a71 1
	if (error == EAI_AGAIN || 
d74 1
a74 1
	    error == EAI_NODATA || 
d80 1
a80 1
		warnx("%s: parse error: %s", 
d85 2
a86 2
	for (vecsz = 0, res = res0; 
	     NULL != res && vecsz < MAX_SERVERS_DNS; 
d96 2
a97 2
			inet_ntop(AF_INET, 
				&(((struct sockaddr_in *)sa)->sin_addr), 
d101 2
a102 2
			inet_ntop(AF_INET6, 
				&(((struct sockaddr_in6 *)sa)->sin6_addr), 
d145 1
a145 1
	else if ( ! sandbox_after()) 
d170 1
a170 1
		/* 
d192 1
a192 1
		for (i = 0; i < (size_t)vsz; i++) { 
@

