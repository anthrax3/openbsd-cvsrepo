head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22;
locks; strict;
comment	@.\" @;


1.22
date	2017.03.22.11.14.14;	author benno;	state Exp;
branches;
next	1.21;
commitid	6bhHv5bBPLUOb9mj;

1.21
date	2017.03.20.15.45.14;	author ajacoutot;	state Exp;
branches;
next	1.20;
commitid	SHB4xy6DbImEdyKU;

1.20
date	2017.01.28.17.53.17;	author jmc;	state Exp;
branches;
next	1.19;
commitid	KYSOSg4hWQ2EDScK;

1.19
date	2017.01.21.15.53.15;	author jmc;	state Exp;
branches;
next	1.18;
commitid	uFz3ZWg6ET7ZanFc;

1.18
date	2017.01.21.09.05.31;	author benno;	state Exp;
branches;
next	1.17;
commitid	KCk9tTMboT3WPYOD;

1.17
date	2017.01.21.08.57.05;	author benno;	state Exp;
branches;
next	1.16;
commitid	p0Bm70rNaKZ6ScZw;

1.16
date	2017.01.21.08.52.30;	author florian;	state Exp;
branches;
next	1.15;
commitid	q7qJsshzLEmCz5cx;

1.15
date	2017.01.21.08.47.21;	author benno;	state Exp;
branches;
next	1.14;
commitid	MbkMl6gkRxhbIoJK;

1.14
date	2017.01.21.08.44.35;	author benno;	state Exp;
branches;
next	1.13;
commitid	Y1oxAc4HVi4RfSjT;

1.13
date	2017.01.21.08.43.09;	author benno;	state Exp;
branches;
next	1.12;
commitid	finywD0D93nLo0tu;

1.12
date	2017.01.21.08.41.42;	author benno;	state Exp;
branches;
next	1.11;
commitid	gRa5yf7qfj3cY6Ul;

1.11
date	2016.09.15.20.44.24;	author jmc;	state Exp;
branches;
next	1.10;
commitid	FF4L6pwa2iCjnewR;

1.10
date	2016.09.14.14.29.35;	author tj;	state Exp;
branches;
next	1.9;
commitid	Nx5Sjrrq7Ym5Hiix;

1.9
date	2016.09.13.03.10.05;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	0I9UpcMUJfIxnmbf;

1.8
date	2016.09.06.06.21.45;	author jmc;	state Exp;
branches;
next	1.7;
commitid	hT8xQ7c1FxL507Ts;

1.7
date	2016.09.01.13.42.45;	author jmc;	state Exp;
branches;
next	1.6;
commitid	8Sso7DUnubcnslbX;

1.6
date	2016.09.01.12.17.00;	author florian;	state Exp;
branches;
next	1.5;
commitid	gosvRyqlI28bFwVD;

1.5
date	2016.09.01.10.15.28;	author jmc;	state Exp;
branches;
next	1.4;
commitid	DeVOuJGvogE4WCHT;

1.4
date	2016.09.01.08.45.58;	author jmc;	state Exp;
branches;
next	1.3;
commitid	j47XYNDVDcGMQbG8;

1.3
date	2016.08.31.23.44.58;	author florian;	state Exp;
branches;
next	1.2;
commitid	zRVxbsfXZmy5Y8Mg;

1.2
date	2016.08.31.22.08.20;	author florian;	state Exp;
branches;
next	1.1;
commitid	iV72DXkT2nprY78S;

1.1
date	2016.08.31.22.05.57;	author florian;	state Exp;
branches;
next	;
commitid	Y3n6fUmWMfaAx7aa;


desc
@@


1.22
log
@Improve manpage and config file to show the more common use case.
from Nick Holland (nick AT holland-consulting DOT net)
ok jmc@@ florian@@
@
text
@.\"	$OpenBSD: acme-client.1,v 1.21 2017/03/20 15:45:14 ajacoutot Exp $
.\"
.\" Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: March 20 2017 $
.Dt ACME-CLIENT 1
.Os
.Sh NAME
.Nm acme-client
.Nd ACME client
.Sh SYNOPSIS
.Nm acme-client
.Op Fl ADFnrv
.Op Fl f Ar configfile
.Ar domain
.Sh DESCRIPTION
The
.Nm
utility is an
Automatic Certificate Management Environment (ACME) client.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
Create a new RSA account key if one does not already exist.
.It Fl D
Create a new RSA domain key if one does not already exist.
.It Fl F
Force updating the certificate signature even if it's too soon.
.It Fl f Ar configfile
Specify an alternative configuration file.
.It Fl n
No operation: check and print configuration.
.It Fl r
Revoke the X509 certificate found in the certificates.
.It Fl v
Verbose operation.
Specify twice to also trace communication and data transfers.
.It Ar domain
The domain name.
.El
.Pp
.Nm
looks in its configuration for a
.Ar domain
section corresponding to the domain given as command line argument.
It then uses that configuration to retrieve a TLS certificate.
If the certificate already exists and is less than 30 days from expiry,
.Nm
will attempt to refresh the signature.
Before a certificate can be requested, an account key needs to be
created using the
.Fl A
argument.
The first time a certificate is requested, the RSA key needs to be created with
.Fl D .
.Pp
Challenges are used to verify that the submitter has access to the
registered domains.
.Nm
only implements the
.Dq http-01
challenge type, where a file is created within a directory accessible
by a locally-run web server.
The default challenge directory
.Pa /var/www/acme
can be served by
.Xr httpd 8
with this location block,
which will properly map response challenges:
.Bd -literal -offset indent
location "/.well-known/acme-challenge/*" {
	root "/acme"
	root strip 2
}
.Ed
.Sh FILES
.Bl -tag -width "/etc/acme-client.conf" -compact
.It Pa /etc/acme-client.conf
Default configuration.
.It Pa /var/www/acme
Default challengedir.
.El
.Sh EXIT STATUS
.Nm
returns 1 on failure, 2 if the certificates didn't change (up to date),
or 0 if certificates were changed (revoked or updated).
.Sh EXAMPLES
To initialize a new account and Domain key:
.Pp
.Dl # acme-client -vAD example.com
.Pp
To create and submit a new key for a single domain, assuming that the
web server has already been configured to map the challenge directory
as above:
.Pp
.Dl # acme-client -vD example.com
.Pp
A daily
.Xr cron 8
job can renew the certificates:
.Pp
.Dl acme-client example.com && rcctl reload httpd
.Sh SEE ALSO
.Xr openssl 1 ,
.Xr acme-client.conf 5 ,
.Xr httpd.conf 5
.Sh STANDARDS
.Rs
.%U https://tools.ietf.org/html/draft-ietf-acme-acme-03
.%T Automatic Certificate Management Environment (ACME)
.Re
.Sh AUTHORS
The
.Nm
utility was written by
.An Kristaps Dzonsons Aq Mt kristaps@@bsd.lv .
.Sh BUGS
The challenge and certificate processes currently retain their (root)
privileges.
.Pp
For the time being,
.Nm
only supports RSA as an account key format.
@


1.21
log
@Simplify cron(8) job example.

input from jmc@@
ok tb@@ deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.20 2017/01/28 17:53:17 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 28 2017 $
d101 4
d109 1
a109 1
.Dl # acme-client -vD www.example.com
d115 1
a115 1
.Dl acme-client www.example.com && rcctl reload httpd
@


1.20
log
@- -N got changed to -D
- there is no Challenges section

reported by michael reed
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.19 2017/01/21 15:53:15 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: January 21 2017 $
d110 2
a111 10
.Bd -literal -offset indent
#! /bin/sh

acme-client www.example.com

if [ $? -eq 0 ]
then
	/etc/rc.d/httpd reload
fi
.Ed
@


1.19
log
@tweak previous;
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.18 2017/01/21 09:05:31 benno Exp $
d103 1
a103 3
as in the
.Sx Challenges
section:
d105 1
a105 1
.Dl # acme-client -vN www.example.com
@


1.18
log
@Improve Documentation

ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.17 2017/01/21 08:57:05 benno Exp $
d25 1
a25 1
.Op Fl FADrvn
d36 4
d44 2
a45 4
.It Fl D
Create a new RSA domain key if one does not already exist.
.It Fl A
Create a new RSA account key if one does not already exist.
a50 2
.It Fl n
No operation, check and print configuration.
@


1.17
log
@see also acme-client.conf(5) suggested by millert and Raf Czlonka
ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.16 2017/01/21 08:52:30 florian Exp $
a54 10
Public certificates are by default placed in
.Pa /etc/ssl/acme
as
.Pa cert.pem Pq the domain certificate ,
.Pa chain.pem ,
and
.Pa fullchain.pem ,
respectively.
.Pa cert.pem
is checked for its expiration: if more than 30 days from expiry,
d56 13
a68 1
does not attempt to refresh the signature.
d70 2
a71 2
Challenges are used to verify that the submitter has access to
the registered domains.
d75 2
a76 2
challenge type, where a file is created within a directory accessible by
a locally-run web server.
d90 3
a92 7
.Bl -tag -width "/etc/ssl/acme/private/privkey.pem" -compact
.It Pa /etc/acme/privkey.pem
Default accountkey.
.It Pa /etc/ssl/acme
Default certdir.
.It Pa /etc/ssl/acme/private/privkey.pem
Default domainkey.
d107 1
a107 1
.Dl # acme-client -vNn www.foo.com
d115 1
a115 1
acme-client www.foo.com
@


1.16
log
@Remove backup option. This is not acme-client's business; also it gets
in the way.
OK benno
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.15 2017/01/21 08:47:21 benno Exp $
d126 1
@


1.15
log
@acme-client use configuration file [5 of 5]
implement new -n option to check and print configuration

ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.14 2017/01/21 08:44:35 benno Exp $
d25 1
a25 1
.Op Fl bFADrvn
a35 15
.It Fl b
Back up all certificates in the certificate directory.
This only happens if a remove or replace operation is possible.
The backups are named
.Pa cert-NNNNN.pem ,
.Pa chain-NNNNN.pem ,
and
.Pa fullchain-NNNNN.pem ,
where
.Li NNNNN
is the current
.Ux
Epoch.
Any given backup uses the same Epoch time for all three certificates.
If there are no certificates in place, this option does nothing.
@


1.14
log
@acme-client use configuration file [3 of 5]

change command line options:

    n -> A   new Account key
    N -> D   new Domain key

With this acme-client has these main usage patterns:

* create new Account Key and Domain Key and get a certificate:

  acme-client -A -D www.example.com

* renew certificate:

  acme-client www.example.com

* revoke certificate:

  acme-client -r www.example.com

ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.13 2017/01/21 08:43:09 benno Exp $
d25 1
a25 1
.Op Fl bFNnrv
d64 2
@


1.13
log
@acme-client use configuration file [2 of 5]

- add challengedir option to config file
- remove -C option from command line

ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.12 2017/01/21 08:41:42 benno Exp $
d55 1
a55 1
.It Fl N
d57 1
a57 1
.It Fl n
@


1.12
log
@acme-client use configuration file [1 of 5]

start using the configuration file and delete command line arguments:

-a agreement    -> agreement url ...
-c certdir      -> domain certificate "path"
-f accountkey   -> account key "path"
-k domainkey    -> domain key "path"
-s authority    -> sign with "name"

new argument:
-f configfile

the changes needed to use the new configuration are local to main.c for now.
While the configuration could be passed directly to netproc(), keyproc() etc,
the diff is smaller this way.

This also removes the multidir (-m) mode for now - specify different paths in
each domain {} block instead.

ok florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.11 2016/09/15 20:44:24 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 15 2016 $
a25 1
.Op Fl C Ar challengedir
a50 2
.It Fl C Ar challengedir
The directory to register challenges.
@


1.11
log
@more fat trimming;
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.10 2016/09/14 14:29:35 tj Exp $
d17 1
a17 1
.Dd $Mdocdate: September 14 2016 $
d25 1
a25 2
.Op Fl bFmNnrv
.Op Fl a Ar agreement
d27 1
a27 4
.Op Fl c Ar certdir
.Op Fl f Ar accountkey
.Op Fl k Ar domainkey
.Op Fl s Ar authority
a28 1
.Op Ar altnames
a36 2
.It Fl a Ar agreement
Use an alternative user agreement URL.
a53 2
.It Fl c Ar certdir
The directory to store public certificates.
d56 2
a57 18
.It Fl f Ar accountkey
The account private key.
This was either made with a previous client or with
.Fl n .
.It Fl k Ar domainkey
The private key for the domain.
This may also be created with
.Fl N .
.It Fl m
Append
.Ar domain
to all default paths except the challenge path
.Pq i.e. those that are overridden by Fl c , k , f .
Thus,
.Ar foo.com
as the initial domain would make the default domain private key into
.Pa /etc/ssl/acme/private/foo.com/privkey.pem .
This is useful in setups with multiple domain sets.
a63 15
.It Fl s Ar authority
ACME
.Ar authority
to talk to.
Currently the following authorities are available:
.Pp
.Bl -tag -width "letsencrypt-staging" -compact
.It Cm letsencrypt
Let's Encrypt authority
.It Cm letsencrypt-staging
Let's Encrypt staging authority
.El
.Pp
The default is
.Cm letsencrypt .
a68 13
The only difference between this and
.Ar altnames
is that it's put into the certificate's
.Li CN
field and it uses the
.Qq main
domain when specifying
.Fl m .
.It Ar altnames
Alternative names
.Pq Dq SAN
for the domain name.
The number of SAN entries is limited to 100 or so.
d125 1
a125 1
.Dl # acme-client -vNn foo.com www.foo.com smtp.foo.com
d133 1
a133 1
acme-client foo.com www.foo.com smtp.foo.com
@


1.10
log
@move default file and directory locations to a new FILES section
and trim some extraneous text.

ok florian jmc deraadt
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.9 2016/09/13 03:10:05 deraadt Exp $
d17 1
a17 1
.Dd $Mdocdate: September 13 2016 $
d123 14
a136 1
.Ss Challenges
d148 2
a149 1
with this location block:
a155 22
.Pp
This way, the files placed in
.Pa /var/www/acme
will be properly mapped by the web server during response challenges
with the authority server.
.Ss Certificates
Public certificates (domain certificate, chain, and the full-chain) are
placed by default in
.Pa /etc/ssl/acme
as
.Pa cert.pem ,
.Pa chain.pem ,
and
.Pa fullchain.pem ,
respectively.
.Pp
The
.Pa cert.pem
file, if found, is checked for its expiration: if more than 30 days from
expiry,
.Nm
will not attempt to refresh the signature.
@


1.9
log
@chroot is not the reason this is run as root
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.8 2016/09/06 06:21:45 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 6 2016 $
a38 28
It submits an X509 certificate for
.Ar domain
and its alternate DNS names
.Ar altnames
to an ACME authority server for automated signing,
and it can also revoke previously submitted signatures.
It must be run as root.
.Pp
By default, it uses
.Pa /var/www/acme
for responding to challenges
.Pq Fl C ,
.Pa /etc/ssl/acme
for the public certificate directory
.Pq Fl c ,
.Pa /etc/ssl/acme/private/privkey.pem
for the domain private key
.Pq Fl k ,
and
.Pa /etc/acme/privkey.pem
for the account private key
.Pq Fl f .
All of these must exist unless
.Fl n
and/or
.Fl N
are being used,
which generates an account and domain private keys, respectively.
d43 1
a43 2
Use an alternative agreement URL.
The default uses the current one, but it may be out of date.
a60 3
See
.Sx Challenges
for details.
a62 3
See
.Sx Certificates
for details.
d84 1
a84 1
Create a new 4096-bit RSA domain key if one does not already exist.
d86 1
a86 1
Create a new 4096-bit RSA account key if one does not already exist.
a122 52
.Pp
The process by which
.Nm
obtains signed certificates is roughly as follows.
.Bl -enum
.It
Access the CA (unauthenticated) and request its list of resources.
.It
Optionally create and register a new RSA account key.
.It
Read and process the RSA account key.
This is used to authenticate each subsequent communication to the CA.
.It
For each domain name:
.Pp
.Bl -enum -compact
.It
submit a challenge for authentication to the CA
.It
create a challenge response file
.It
wait until the CA has verified the challenge
.El
.It
Read and extract the domain key.
.It
Create an X509 request from the doman key for the domain and its
alternative names.
.It
Submit a request for signature to the CA.
.It
Download the signed X509 certificate.
.It
Extract the CA issuer from the X509 certificate.
.It
Download the certificate chain from the issuer.
.El
.Pp
The revocation sequence is similar:
.Bl -enum
.It
Request a list of resources, and manage the RSA account key as in the case for
signing.
.It
Read and extract the X509 certificate (if found).
.It
Create an X509 revocation request.
.It
Submit a request for revocation to the CA.
.It
Remove the certificate, the chain, and the full-chain.
.El
d127 1
a127 1
implements only the
d130 1
a130 1
a locally-run web server configured for the requested domain.
a156 1
These are all created as the root user with mode 444.
d164 11
@


1.8
log
@some indent; from michael reed
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.7 2016/09/01 13:42:45 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: September 1 2016 $
d45 1
a45 3
It must be run as root
(see
.Xr chroot 2 ) .
@


1.7
log
@tidy up the list;
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.6 2016/09/01 12:17:00 florian Exp $
d225 5
a229 5
.Bd -literal
	location "/.well-known/acme-challenge/*" {
		root "/acme"
		root strip 2
	}
d264 2
a265 3
.Bd -literal
# acme-client -vNn foo.com www.foo.com smtp.foo.com
.Ed
d270 1
a270 1
.Bd -literal
@


1.6
log
@Implement table driven selection to which ACME authorities we can
talk.
Suggest by and OK deraadt, OK benno.

(Later on deraadt and benno discussed if this should be handled with a
config file. This seems to be good enough for now. We can do a config
file later.)
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.5 2016/09/01 10:15:28 jmc Exp $
d131 2
a132 1
.Bl -tag
d138 1
@


1.5
log
@make the page more neutral, as suggested by deraadt;
add STANDARDS, as suggested by florian;

help/ok deraadt florian
@
text
@d1 1
a1 1
.\"	$OpenBSD: acme-client.1,v 1.4 2016/09/01 08:45:58 jmc Exp $
d25 1
a25 1
.Op Fl bFmNnrsv
d31 1
d126 13
a138 2
.It Fl s
Use a staging server instead of the real thing.
@


1.4
log
@various cleanup;
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d17 1
a17 1
.Dd $Mdocdate: August 31 2016 $
d22 1
a22 1
.Nd secure Let's Encrypt client
d32 1
a32 1
.Op Ar altname ...
d36 3
a38 1
utility submits an X509 certificate for
d41 3
a43 5
.Ar altname
to a
.Qq Let's Encrypt
server for automated signing.
It can also revoke previously submitted signatures.
d103 1
a103 3
This was either made with a previous
.Dq Let's Encrypt
client or with
d126 1
a126 3
Use the
.Dq Let's Encrypt
staging server instead of the real thing.
d133 1
a133 1
.Ar altname
d140 1
a140 1
.It Ar altname
d144 1
a144 3
The number of SAN entries is limited by
.Qq Let's Encrypt
to 100 or so.
a149 3
In this, the
.Dq CA
is the ACME server for Let's Encrypt.
d199 1
a199 1
Let's Encrypt uses challenges to verify that the submitter has access to
d220 2
a221 2
will be properly mapped by the web server when the Let's Encrypt
responds to a challenge.
d270 5
@


1.3
log
@Bring in license for man page Kristaps just added upstream in
commit 33c4b38b1db65097e4301e982c9cffcb8c3e648d.
@
text
@d1 1
a1 1
.\"	$Id$
d18 1
a18 1
.Dt acme-client 1
d25 1
a25 1
.Op Fl bFmnNrsv
d32 1
a32 1
.Op Ar altnames...
d39 1
a39 1
.Ar altnames
d41 1
a41 1
.Dq Let's Encrypt
d43 4
a46 4
It can also revoke previously-submitted signatures.
It must be run as root.
(Why?
.Xr chroot 2 . )
d62 1
a62 1
All of these must exist unless you use
d65 5
a69 3
.Fl N ,
which will generate the account and domain private keys, respectively.
Its arguments are as follows:
d71 3
d75 3
a77 6
Back up all
.Sx Certificates
in the certificate directory.
This will only back up if something will be done to them (remove or
replace).
The backups are called
d84 15
a98 4
is the current UNIX epoch.
Any given backup effort will use the same epoch time for all three
certificates.
If there are no certificates in place, this does nothing.
d101 10
d115 1
a115 1
.Pq i.e., those that are overriden by Fl c , k , f .
d121 2
a124 2
.It Fl N
Create a new 4096-bit RSA domain key if one does not already exist.
d126 1
a126 2
Revoke the X509 certificate found in
.Sx Certificates .
a133 23
.It Fl a Ar agreement
Use an alternative agreement URL.
The default uses the current one, but it may be out of date.
.It Fl C Ar challengedir
Where to register challenges.
See
.Sx Challenges
for details.
.It Fl c Ar certdir
Where to put public certificates.
See
.Sx Certificates
for details.
.It Fl f Ar accountkey
The account private key.
This was either made with a previous
.Dq Let's Encrypt
client or with
.Fl n .
.It Fl k Ar domainkey
The private key for the domain.
This may also be created with
.Fl N .
d136 2
a137 2
The only difference between this and the
.Ar altnames
d140 2
a141 2
field and is use the
.Dq main
d144 1
a144 1
.It Ar altnames
d149 1
a149 1
.Dq Let's Encrypt
d161 1
a161 1
Access the CA (unauthenticated) and requests its list of resources.
d168 3
a170 2
For each domain name,
.Bl -enum
d172 1
a172 1
submit a challenge for authentication to the CA,
d174 1
a174 1
create a challenge response file,
d176 1
a176 1
wait until the CA has verified the challenge.
d196 1
a196 1
Request list of resources, manage RSA account key as in the case for
d246 1
a246 1
expiring,
@


1.2
log
@Some man page clean up:
- make it more httpd centric
- remove mkdir instructions, we create the directories by default
- no 2nd person wording
- remove commented out lines
- add author
@
text
@d1 16
@


1.1
log
@oops, use correct filename
@
text
@d2 1
a2 1
.Dt LETSKENCRYPT 1
d5 1
a5 1
.Nm letskencrypt
a6 3
.\" .Sh LIBRARY
.\" For sections 2, 3, and 9 only.
.\" Not used in OpenBSD.
d8 1
a8 1
.Nm letskencrypt
d33 1
a33 1
.Pa /var/www/letsencrypt
d36 1
a36 1
.Pa /etc/ssl/letsencrypt
d39 1
a39 1
.Pa /etc/ssl/letsencrypt/private/privkey.pem
d43 1
a43 1
.Pa /etc/letsencrypt/privkey.pem
d80 1
a80 1
.Pa /etc/ssl/letsencrypt/private/foo.com/privkey.pem .
d199 5
a203 6
For example, for the domain
.Dq foo.com
and alternate
.Dq www.foo.com
and the default challenge directory, an Apache configuration snippet
might be as follows:
d205 4
a208 12
<VirtualHost *:80>
  [...]
  ServerName foo.com
  ServerAlias www.foo.com
  Alias /.well-known/acme-challenge /var/www/letsencrypt
  <Directory /var/www/letsencrypt>
    Options None
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>
</VirtualHost>
d212 1
a212 1
.Pa /var/www/letsencrypt
d218 1
a218 1
.Pa /etc/ssl/letsencrypt
a226 11
An nginx configuration using these might be as follows:
.Bd -literal
server {
  listen 443;
  server_name foo.com www.foo.com;
  [...]
  ssl_certificate /etc/ssl/letsencrypt/fullchain.pem;
  ssl_certificate_key /etc/ssl/letsencrypt/private/privkey.pem;
}
.Ed
.Pp
a232 9
.\" .Sh CONTEXT
.\" For section 9 functions only.
.\" .Sh IMPLEMENTATION NOTES
.\" Not used in OpenBSD.
.\" .Sh RETURN VALUES
.\" For sections 2, 3, and 9 function return values only.
.\" .Sh ENVIRONMENT
.\" For sections 1, 6, 7, and 8 only.
.\" .Sh FILES
a236 1
.\" For sections 1, 6, and 8 only.
d244 1
a244 5
# mkdir /var/www/letsencrypt
# mkdir /etc/ssl/letsencrypt
# mkdir /etc/ssl/letsencrypt/private /etc/letsencrypt
# chmod 0700 /etc/ssl/letsencrypt/private /etc/letsencrypt
# letskencrypt -vNn foo.com www.foo.com smtp.foo.com
d247 1
a247 6
After generating the necessary directories, the above will create all
keys and submit them to the server.
You'll then probably want to restart your web server to pick up the new
certificates.
.Pp
You can then keep your certificates fresh with a daily
d249 1
a249 1
invocation running the following:
d253 1
a253 1
letskencrypt foo.com www.foo.com smtp.foo.com
a259 7
.Pp
You'll need to replace the httpd-reload statement with the correct
script to have your web server reload its certificates.
.\" .Sh DIAGNOSTICS
.\" For sections 1, 4, 6, 7, 8, and 9 printf/stderr messages only.
.\" .Sh ERRORS
.\" For sections 2, 3, 4, and 9 errno settings only.
d261 7
a267 5
.Xr openssl 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
a274 2
.\" .Sh SECURITY CONSIDERATIONS
.\" Not used in OpenBSD.
@

