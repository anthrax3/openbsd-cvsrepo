head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12;
locks; strict;
comment	@ * @;


1.12
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.11;
commitid	d53S4Fpx9gPB2Hox;

1.11
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	QYSA2DhKNoKjBuQG;

1.10
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.9;
commitid	8yg0jKPVoY1hQFt1;

1.9
date	2017.01.21.08.54.26;	author florian;	state Exp;
branches;
next	1.8;
commitid	Uiu2I50X4ppn4tZ4;

1.8
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	nxoiZiJPhAAVKQhE;

1.7
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	Kh60oAaRyMBwMrcR;

1.6
date	2016.09.01.00.35.22;	author florian;	state Exp;
branches;
next	1.5;
commitid	BIKpBY4sC6SiXDhj;

1.5
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	P9IiJlKSbxnKzQyC;

1.4
date	2016.08.31.23.41.23;	author benno;	state Exp;
branches;
next	1.3;
commitid	8N24HWc1cknZYLat;

1.3
date	2016.08.31.22.57.36;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	eGljFCfJCPC54si7;

1.2
date	2016.08.31.22.43.02;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	gq7eIcFjwUioyAzX;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.12
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: revokeproc.c,v 1.11 2017/01/24 12:53:52 deraadt Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <assert.h>
#include <ctype.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/err.h>

#include "extern.h"

#define	RENEW_ALLOW (30 * 24 * 60 * 60)

/*
 * Convert the X509's expiration time (which is in ASN1_TIME format)
 * into a time_t value.
 * There are lots of suggestions on the Internet on how to do this and
 * they're really, really unsafe.
 * Adapt those poor solutions to a safe one.
 */
static time_t
X509expires(X509 *x)
{
	ASN1_TIME	*atim;
	struct tm	 t;
	unsigned char	*str;
	size_t		 i = 0;

	atim = X509_get_notAfter(x);
	str = atim->data;
	memset(&t, 0, sizeof(t));

	/* Account for 2 and 4-digit time. */

	if (atim->type == V_ASN1_UTCTIME) {
		if (atim->length <= 2) {
			warnx("invalid ASN1_TIME");
			return (time_t)-1;
		}
		t.tm_year = (str[0] - '0') * 10 + (str[1] - '0');
		if (t.tm_year < 70)
			t.tm_year += 100;
		i = 2;
	} else if (atim->type == V_ASN1_GENERALIZEDTIME) {
		if (atim->length <= 4) {
			warnx("invalid ASN1_TIME");
			return (time_t)-1;
		}
		t.tm_year = (str[0] - '0') * 1000 + (str[1] - '0') * 100 +
		    (str[2] - '0') * 10 + (str[3] - '0');
		t.tm_year -= 1900;
		i = 4;
	}

	/* Now the post-year parts. */

	if (atim->length <= (int)i + 10) {
		warnx("invalid ASN1_TIME");
		return (time_t)-1;
	}

	t.tm_mon = ((str[i + 0] - '0') * 10 + (str[i + 1] - '0')) - 1;
	t.tm_mday = (str[i + 2] - '0') * 10 + (str[i + 3] - '0');
	t.tm_hour = (str[i + 4] - '0') * 10 + (str[i + 5] - '0');
	t.tm_min  = (str[i + 6] - '0') * 10 + (str[i + 7] - '0');
	t.tm_sec  = (str[i + 8] - '0') * 10 + (str[i + 9] - '0');

	return mktime(&t);
}

int
revokeproc(int fd, const char *certdir, const char *certfile, int force,
    int revocate, const char *const *alts, size_t altsz)
{
	char		*path = NULL, *der = NULL, *dercp, *der64 = NULL;
	char		*san = NULL, *str, *tok;
	int		 rc = 0, cc, i, extsz, ssz, len;
	size_t		*found = NULL;
	BIO		*bio = NULL;
	FILE		*f = NULL;
	X509		*x = NULL;
	long		 lval;
	enum revokeop	 op, rop;
	time_t		 t;
	X509_EXTENSION	*ex;
	ASN1_OBJECT	*obj;
	size_t		 j;

	/*
	 * First try to open the certificate before we drop privileges
	 * and jail ourselves.
	 * We allow "f" to be NULL IFF the cert doesn't exist yet.
	 */

	if (asprintf(&path, "%s/%s", certdir, certfile) == -1) {
		warn("asprintf");
		goto out;
	} else if ((f = fopen(path, "r")) == NULL && errno != ENOENT) {
		warn("%s", path);
		goto out;
	}

	/* File-system and sandbox jailing. */

	ERR_load_crypto_strings();

	if (pledge("stdio", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	/*
	 * If we couldn't open the certificate, it doesn't exist so we
	 * haven't submitted it yet, so obviously we can mark that it
	 * has expired and we should renew it.
	 * If we're revoking, however, then that's an error!
	 * Ignore if the reader isn't reading in either case.
	 */

	if (f == NULL && revocate) {
		warnx("%s/%s: no certificate found", certdir, certfile);
		(void)writeop(fd, COMM_REVOKE_RESP, REVOKE_OK);
		goto out;
	} else if (f == NULL && !revocate) {
		if (writeop(fd, COMM_REVOKE_RESP, REVOKE_EXP) >= 0)
			rc = 1;
		goto out;
	}

	if ((x = PEM_read_X509(f, NULL, NULL, NULL)) == NULL) {
		warnx("PEM_read_X509");
		goto out;
	}

	/* Read out the expiration date. */

	if ((t = X509expires(x)) == (time_t)-1) {
		warnx("X509expires");
		goto out;
	}

	/*
	 * Next, the long process to make sure that the SAN entries
	 * listed with the certificate fully cover those passed on the
	 * comamnd line.
	 */

	extsz = x->cert_info->extensions != NULL ?
		sk_X509_EXTENSION_num(x->cert_info->extensions) : 0;

	/* Scan til we find the SAN NID. */

	for (i = 0; i < extsz; i++) {
		ex = sk_X509_EXTENSION_value(x->cert_info->extensions, i);
		assert(ex != NULL);
		obj = X509_EXTENSION_get_object(ex);
		assert(obj != NULL);
		if (NID_subject_alt_name != OBJ_obj2nid(obj))
			continue;

		if (san != NULL) {
			warnx("%s/%s: two SAN entries", certdir, certfile);
			goto out;
		}

		bio = BIO_new(BIO_s_mem());
		if (bio == NULL) {
			warnx("BIO_new");
			goto out;
		} else if (!X509V3_EXT_print(bio, ex, 0, 0)) {
			warnx("X509V3_EXT_print");
			goto out;
		} else if ((san = calloc(1, bio->num_write + 1)) == NULL) {
			warn("calloc");
			goto out;
		}
		ssz = BIO_read(bio, san, bio->num_write);
		if (ssz < 0 || (unsigned)ssz != bio->num_write) {
			warnx("BIO_read");
			goto out;
		}
	}

	if (san == NULL) {
		warnx("%s/%s: does not have a SAN entry", certdir, certfile);
		goto out;
	}

	/* An array of buckets: the number of entries found. */

	if ((found = calloc(altsz, sizeof(size_t))) == NULL) {
		warn("calloc");
		goto out;
	}

	/*
	 * Parse the SAN line.
	 * Make sure that all of the domains are represented only once.
	 */

	str = san;
	while ((tok = strsep(&str, ",")) != NULL) {
		if (*tok == '\0')
			continue;
		while (isspace((int)*tok))
			tok++;
		if (strncmp(tok, "DNS:", 4))
			continue;
		tok += 4;
		for (j = 0; j < altsz; j++)
			if (strcmp(tok, alts[j]) == 0)
				break;
		if (j == altsz) {
			warnx("%s/%s: unknown SAN entry: %s",
			    certdir, certfile, tok);
			goto out;
		}
		if (found[j]++) {
			warnx("%s/%s: duplicate SAN entry: %s",
			    certdir, certfile, tok);
			goto out;
		}
	}

	for (j = 0; j < altsz; j++) {
		if (found[j])
			continue;
		warnx("%s/%s: domain not listed: %s",
		    certdir, certfile, alts[j]);
		goto out;
	}

	/*
	 * If we're going to revoke, write the certificate to the
	 * netproc in DER and base64-encoded format.
	 * Then exit: we have nothing left to do.
	 */

	if (revocate) {
		dodbg("%s/%s: revocation", certdir, certfile);

		/*
		 * First, tell netproc we're online.
		 * If they're down, then just exit without warning.
		 */

		cc = writeop(fd, COMM_REVOKE_RESP, REVOKE_EXP);
		if (cc == 0)
			rc = 1;
		if (cc <= 0)
			goto out;

		if ((len = i2d_X509(x, NULL)) < 0) {
			warnx("i2d_X509");
			goto out;
		} else if ((der = dercp = malloc(len)) == NULL) {
			warn("malloc");
			goto out;
		} else if (len != i2d_X509(x, (u_char **)&dercp)) {
			warnx("i2d_X509");
			goto out;
		} else if ((der64 = base64buf_url(der, len)) == NULL) {
			warnx("base64buf_url");
			goto out;
		} else if (writestr(fd, COMM_CSR, der64) >= 0)
			rc = 1;

		goto out;
	}

	rop = time(NULL) >= (t - RENEW_ALLOW) ? REVOKE_EXP : REVOKE_OK;

	if (rop == REVOKE_EXP)
		dodbg("%s/%s: certificate renewable: %lld days left",
		    certdir, certfile,
		    (long long)(t - time(NULL)) / 24 / 60 / 60);
	else
		dodbg("%s/%s: certificate valid: %lld days left",
		    certdir, certfile,
		    (long long)(t - time(NULL)) / 24 / 60 / 60);

	if (rop == REVOKE_OK && force) {
		warnx("%s/%s: forcing renewal", certdir, certfile);
		rop = REVOKE_EXP;
	}

	/*
	 * We can re-submit it given RENEW_ALLOW time before.
	 * If netproc is down, just exit.
	 */

	if ((cc = writeop(fd, COMM_REVOKE_RESP, rop)) == 0)
		rc = 1;
	if (cc <= 0)
		goto out;

	op = REVOKE__MAX;
	if ((lval = readop(fd, COMM_REVOKE_OP)) == 0)
		op = REVOKE_STOP;
	else if (lval == REVOKE_CHECK)
		op = lval;

	if (op == REVOKE__MAX) {
		warnx("unknown operation from netproc");
		goto out;
	} else if (op == REVOKE_STOP) {
		rc = 1;
		goto out;
	}

	rc = 1;
out:
	close(fd);
	if (f != NULL)
		fclose(f);
	if (x != NULL)
		X509_free(x);
	if (bio != NULL)
		BIO_free(bio);
	free(san);
	free(path);
	free(der);
	free(found);
	free(der64);
	ERR_print_errors_fp(stderr);
	ERR_free_strings();
	return rc;
}
@


1.11
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.10 2017/01/24 12:05:14 jsing Exp $ */
d60 1
a60 1
			return ((time_t)-1);
d69 1
a69 1
			return ((time_t)-1);
d81 1
a81 1
		return ((time_t)-1);
d90 1
a90 1
	return (mktime(&t));
d349 1
a349 1
	return (rc);
@


1.10
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.9 2017/01/21 08:54:26 florian Exp $ */
d146 1
a146 1
	} else if (f == NULL && ! revocate) {
d295 1
a295 1
	if (REVOKE_EXP == rop)
d304 1
a304 1
	if (REVOKE_OK == rop && force) {
d325 1
a325 1
	if (REVOKE__MAX == op) {
d328 1
a328 1
	} else if (REVOKE_STOP == op) {
@


1.9
log
@Split certificate file from config file into certdir and certfile.
This way we can still chroot to certdir but the the certificate file
is not fixed to "cert.pem".

Writing of chain.pem and fullchain.pem is currently broken with this.

OK benno
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.8 2016/09/13 17:13:37 deraadt Exp $ */
d117 1
a117 1
	if (-1 == asprintf(&path, "%s/%s", certdir, certfile)) {
d120 1
a120 1
	} else if (NULL == (f = fopen(path, "r")) && ENOENT != errno) {
d142 1
a142 1
	if (NULL == f && revocate) {
d146 1
a146 1
	} else if (NULL == f && ! revocate) {
d152 1
a152 1
	if (NULL == (x = PEM_read_X509(f, NULL, NULL, NULL))) {
d159 1
a159 1
	if ((time_t)-1 == (t = X509expires(x))) {
d170 1
a170 1
	extsz = NULL != x->cert_info->extensions ?
d177 1
a177 1
		assert(NULL != ex);
d179 1
a179 1
		assert(NULL != obj);
d183 1
a183 1
		if (NULL != san) {
d189 1
a189 1
		if (NULL == bio) {
d195 1
a195 1
		} else if (NULL == (san = calloc(1, bio->num_write + 1))) {
d206 1
a206 1
	if (NULL == san) {
d213 1
a213 1
	if (NULL == (found = calloc(altsz, sizeof(size_t)))) {
d224 2
a225 2
	while (NULL != (tok = strsep(&str, ","))) {
		if ('\0' == *tok)
d233 1
a233 1
			if (0 == strcmp(tok, alts[j]))
d270 1
a270 1
		if (0 == cc)
d278 1
a278 1
		} else if (NULL == (der = dercp = malloc(len))) {
d284 1
a284 1
		} else if (NULL == (der64 = base64buf_url(der, len))) {
d314 1
a314 1
	if (0 == (cc = writeop(fd, COMM_REVOKE_RESP, rop)))
d320 1
a320 1
	if (0 == (lval = readop(fd, COMM_REVOKE_OP)))
d322 1
a322 1
	else if (REVOKE_CHECK == lval)
d336 1
a336 1
	if (NULL != f)
d338 1
a338 1
	if (NULL != x)
d340 1
a340 1
	if (NULL != bio)
@


1.8
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.7 2016/09/13 16:49:28 deraadt Exp $ */
d94 2
a95 2
revokeproc(int fd, const char *certdir, int force, int revocate,
    const char *const *alts, size_t altsz)
d117 1
a117 1
	if (-1 == asprintf(&path, "%s/%s", certdir, CERT_PEM)) {
d143 1
a143 1
		warnx("%s/%s: no certificate found", certdir, CERT_PEM);
d184 1
a184 1
			warnx("%s/%s: two SAN entries", certdir, CERT_PEM);
d207 1
a207 1
		warnx("%s/%s: does not have a SAN entry", certdir, CERT_PEM);
d237 1
a237 1
			    certdir, CERT_PEM, tok);
d242 1
a242 1
			    certdir, CERT_PEM, tok);
d251 1
a251 1
		    certdir, CERT_PEM, alts[j]);
d262 1
a262 1
		dodbg("%s/%s: revocation", certdir, CERT_PEM);
d297 1
a297 1
		    certdir, CERT_PEM,
d301 1
a301 1
		    certdir, CERT_PEM,
d305 1
a305 1
		warnx("%s/%s: forcing renewal", certdir, CERT_PEM);
@


1.7
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.6 2016/09/01 00:35:22 florian Exp $ */
d62 1
a62 3
		t.tm_year =
			(str[0] - '0') * 10 +
			(str[1] - '0');
d71 2
a72 5
		t.tm_year =
			(str[0] - '0') * 1000 +
			(str[1] - '0') * 100 +
			(str[2] - '0') * 10 +
			(str[3] - '0');
d95 1
a95 1
	const char *const *alts, size_t altsz)
d143 1
a143 2
		warnx("%s/%s: no certificate found",
			certdir, CERT_PEM);
d176 1
a176 2
		ex = sk_X509_EXTENSION_value
			(x->cert_info->extensions, i);
d184 1
a184 2
			warnx("%s/%s: two SAN entries",
				certdir, CERT_PEM);
d192 1
a192 1
		} else if ( ! X509V3_EXT_print(bio, ex, 0, 0)) {
d237 1
a237 1
				certdir, CERT_PEM, tok);
d242 1
a242 1
				certdir, CERT_PEM, tok);
d251 1
a251 1
			certdir, CERT_PEM, alts[j]);
d297 2
a298 2
			certdir, CERT_PEM,
			(long long)(t - time(NULL)) / 24 / 60 / 60);
d301 2
a302 2
			certdir, CERT_PEM,
			(long long)(t - time(NULL)) / 24 / 60 / 60);
@


1.6
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.5 2016/09/01 00:21:36 deraadt Exp $ */
d102 7
a108 1
	int		 rc, cc, i, extsz, ssz;
a109 4
	FILE		*f;
	size_t		*found;
	char		*path, *der, *dercp, *der64, *san, *str, *tok;
	X509		*x;
a111 1
	int		 len;
a113 1
	BIO		*bio;
a114 9

	found = NULL;
	bio = NULL;
	der = der64 = NULL;
	rc = 0;
	f = NULL;
	path = NULL;
	san = NULL;
	x = NULL;
@


1.5
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.4 2016/08/31 23:41:23 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.4
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.3 2016/08/31 22:57:36 deraadt Exp $ */
a143 3
	if ( ! sandbox_before())
		goto out;

d146 2
a147 5
	if ( ! dropfs(PATH_VAR_EMPTY))
		goto out;
	else if ( ! dropprivs())
		goto out;
	else if ( ! sandbox_after())
d149 1
@


1.3
log
@revoke -> revocate, to avoid alias
ok florian
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.2 2016/08/31 22:43:02 deraadt Exp $ */
d52 1
a52 1
	size_t 	 	 i = 0;
d63 1
a63 1
			return((time_t)-1);
d65 2
a66 2
		t.tm_year = 
			(str[0] - '0') * 10 + 
d74 1
a74 1
			return((time_t)-1);
d76 4
a79 4
		t.tm_year = 
			(str[0] - '0') * 1000 + 
			(str[1] - '0') * 100 + 
			(str[2] - '0') * 10 + 
d89 1
a89 1
		return((time_t)-1);
d97 2
a98 2
	
	return(mktime(&t));
d163 1
a163 1
	
d173 1
a173 1
	} 
d178 1
a178 1
	} 
d181 1
a181 1
	
d193 1
a193 1
	extsz = NULL != x->cert_info->extensions ? 
d208 1
a208 1
			warnx("%s/%s: two SAN entries", 
d223 1
a223 1
		} 
d234 2
a235 2
	} 
	
d243 1
a243 1
	/* 
d285 1
a285 1
	
d289 2
a290 2
		/* 
		 * First, tell netproc we're online. 
d312 1
a312 1
		} else if (writestr(fd, COMM_CSR, der64) >= 0) 
d322 1
a322 1
			certdir, CERT_PEM, 
d326 1
a326 1
			certdir, CERT_PEM, 
d334 1
a334 1
	/* 
d339 1
a339 1
	if (0 == (cc = writeop(fd, COMM_REVOKE_RESP, rop))) 
d374 1
a374 1
	return(rc);
@


1.2
log
@ASN1_TIME *atim avoids shadowing time
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d102 1
a102 1
revokeproc(int fd, const char *certdir, int force, int revoke,
d164 1
a164 1
	if (NULL == f && revoke) {
d169 1
a169 1
	} else if (NULL == f && ! revoke) {
d286 1
a286 1
	if (revoke) {
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: revokeproc.c,v 1.16 2016/06/01 20:54:18 kristaps Exp $ */
d49 1
a49 1
	ASN1_TIME	*time;
d54 2
a55 2
	time = X509_get_notAfter(x);
	str = time->data;
d60 2
a61 2
	if (time->type == V_ASN1_UTCTIME) {
		if (time->length <= 2) {
d71 2
a72 2
	} else if (time->type == V_ASN1_GENERALIZEDTIME) {
		if (time->length <= 4) {
d87 1
a87 1
	if (time->length <= (int)i + 10) {
@

