head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.8;
commitid	d53S4Fpx9gPB2Hox;

1.8
date	2017.01.24.13.13.41;	author tb;	state Exp;
branches;
next	1.7;
commitid	YD6leTWhTiVgjW9m;

1.7
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.6;
commitid	8yg0jKPVoY1hQFt1;

1.6
date	2016.09.13.20.09.54;	author tedu;	state Exp;
branches;
next	1.5;
commitid	cYWJG7EMfpWNRNn4;

1.5
date	2016.09.01.13.49.32;	author tb;	state Exp;
branches;
next	1.4;
commitid	ubQFjosMKP4mKIib;

1.4
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.3;
commitid	BIKpBY4sC6SiXDhj;

1.3
date	2016.08.31.23.53.58;	author benno;	state Exp;
branches;
next	1.2;
commitid	vUhho0qTleehfqGt;

1.2
date	2016.08.31.22.42.19;	author benno;	state Exp;
branches;
next	1.1;
commitid	5XAWaZmjDiZhpE9X;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.9
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: base64.c,v 1.8 2017/01/24 13:13:41 tb Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <netinet/in.h>
#include <resolv.h>

#include <stdlib.h>

#include "extern.h"

/*
 * Compute the maximum buffer required for a base64 encoded string of
 * length "len".
 */
size_t
base64len(size_t len)
{

	return (len + 2) / 3 * 4 + 1;
}

/*
 * Pass a stream of bytes to be base64 encoded, then converted into
 * base64url format.
 * Returns NULL on allocation failure (not logged).
 */
char *
base64buf_url(const char *data, size_t len)
{
	size_t	 i, sz;
	char	*buf;

	sz = base64len(len);
	if ((buf = malloc(sz)) == NULL)
		return NULL;

	b64_ntop(data, len, buf, sz);

	for (i = 0; i < sz; i++)
		switch (buf[i]) {
		case '+':
			buf[i] = '-';
			break;
		case '/':
			buf[i] = '_';
			break;
		case '=':
			buf[i] = '\0';
			break;
		}

	return buf;
}
@


1.8
log
@nuke extra brackets. discussed with jsing
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.7 2017/01/24 12:05:14 jsing Exp $ */
d49 1
a49 1
		return (NULL);
@


1.7
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.6 2016/09/13 20:09:54 tedu Exp $ */
d33 1
a33 1
	return (((len + 2) / 3 * 4) + 1);
d66 1
a66 1
	return (buf);
@


1.6
log
@convert some ifs to switches. ok millert tb
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.5 2016/09/01 13:49:32 tb Exp $ */
d48 1
a48 1
	if (NULL == (buf = malloc(sz)))
@


1.5
log
@Use b64_ntop instead of adding yet another base implementation of base64
encoding to base.  Tweaked version of a diff by florian.

ok florian
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.4 2016/09/01 00:35:21 florian Exp $ */
d54 2
a55 1
		if ('+' == buf[i])
d57 2
a58 1
		else if ('/' == buf[i])
d60 2
a61 1
		else if ('=' == buf[i])
d63 2
@


1.4
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.3 2016/08/31 23:53:58 benno Exp $ */
d18 2
a20 4
#include <sys/types.h>

#include <assert.h>
#include <stdarg.h>
a24 5
static const char b64[] =
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	"abcdefghijklmnopqrstuvwxyz"
	"0123456789+/";

a36 59
 * Base64 computation.
 * This is heavily "assert"-d because Coverity complains.
 */
size_t
base64buf(char *enc, const char *str, size_t len)
{
	size_t	 i, val;
	char	*p;

	p = enc;

	for (i = 0; i < len - 2; i += 3) {
		val = (str[i] >> 2) & 0x3F;
		assert(val < sizeof(b64));
		*p++ = b64[val];

		val = ((str[i] & 0x3) << 4) |
			((int)(str[i + 1] & 0xF0) >> 4);
		assert(val < sizeof(b64));
		*p++ = b64[val];

		val = ((str[i + 1] & 0xF) << 2) |
			((int)(str[i + 2] & 0xC0) >> 6);
		assert(val < sizeof(b64));
		*p++ = b64[val];

		val = str[i + 2] & 0x3F;
		assert(val < sizeof(b64));
		*p++ = b64[val];
	}

	if (i < len) {
		val = (str[i] >> 2) & 0x3F;
		assert(val < sizeof(b64));
		*p++ = b64[val];

		if (i == (len - 1)) {
			val = ((str[i] & 0x3) << 4);
			assert(val < sizeof(b64));
			*p++ = b64[val];
			*p++ = '=';
		} else {
			val = ((str[i] & 0x3) << 4) |
				((int)(str[i + 1] & 0xF0) >> 4);
			assert(val < sizeof(b64));
			*p++ = b64[val];

			val = ((str[i + 1] & 0xF) << 2);
			assert(val < sizeof(b64));
			*p++ = b64[val];
		}
		*p++ = '=';
	}

	*p++ = '\0';
	return (p - enc);
}

/*
d51 1
a51 1
	base64buf(buf, data, len);
@


1.3
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.2 2016/08/31 22:42:19 benno Exp $ */
a17 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.2
log
@whitespace cleanup
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d43 1
a43 1
	return(((len + 2) / 3 * 4) + 1);
d102 1
a102 1
	return(p - enc);
d118 1
a118 1
		return(NULL);
d130 1
a130 1
	return(buf);
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: base64.c,v 1.6 2016/05/18 09:31:21 kristaps Exp $ */
d17 1
d30 1
a30 1
static const char b64[] = 
d39 1
a39 1
size_t 
d50 1
a50 1
size_t 
d53 2
a54 2
	size_t 	i, val;
	char 	*p;
d63 1
a63 1
		val = ((str[i] & 0x3) << 4) | 
d68 1
a68 1
		val = ((str[i + 1] & 0xF) << 2) | 
@

