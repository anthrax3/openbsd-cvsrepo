head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@ * @;


1.11
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.10;
commitid	d53S4Fpx9gPB2Hox;

1.10
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.9;
commitid	8yg0jKPVoY1hQFt1;

1.9
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	nxoiZiJPhAAVKQhE;

1.8
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	Kh60oAaRyMBwMrcR;

1.7
date	2016.09.13.16.04.51;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	24EhsuVM5m11dYAL;

1.6
date	2016.09.13.16.01.37;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	GnjSXU1CfTTXviB4;

1.5
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.4;
commitid	BIKpBY4sC6SiXDhj;

1.4
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	P9IiJlKSbxnKzQyC;

1.3
date	2016.08.31.23.52.30;	author benno;	state Exp;
branches;
next	1.2;
commitid	Pfmiku3hi7M4Or96;

1.2
date	2016.08.31.22.42.19;	author benno;	state Exp;
branches;
next	1.1;
commitid	5XAWaZmjDiZhpE9X;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.11
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: acctproc.c,v 1.10 2017/01/24 12:05:14 jsing Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/stat.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <openssl/pem.h>
#include <openssl/rsa.h>
#include <openssl/rand.h>
#include <openssl/err.h>

#include "extern.h"
#include "rsa.h"

/*
 * Converts a BIGNUM to the form used in JWK.
 * This is essentially a base64-encoded big-endian binary string
 * representation of the number.
 */
static char *
bn2string(const BIGNUM *bn)
{
	int	 len;
	char	*buf, *bbuf;

	/* Extract big-endian representation of BIGNUM. */

	len = BN_num_bytes(bn);
	if ((buf = malloc(len)) == NULL) {
		warn("malloc");
		return NULL;
	} else if (len != BN_bn2bin(bn, (unsigned char *)buf)) {
		warnx("BN_bn2bin");
		free(buf);
		return NULL;
	}

	/* Convert to base64url. */

	if ((bbuf = base64buf_url(buf, len)) == NULL) {
		warnx("base64buf_url");
		free(buf);
		return NULL;
	}

	free(buf);
	return bbuf;
}

/*
 * Extract the relevant RSA components from the key and create the JSON
 * thumbprint from them.
 */
static char *
op_thumb_rsa(EVP_PKEY *pkey)
{
	char	*exp = NULL, *mod = NULL, *json = NULL;
	RSA	*r;

	if ((r = EVP_PKEY_get1_RSA(pkey)) == NULL)
		warnx("EVP_PKEY_get1_RSA");
	else if ((mod = bn2string(r->n)) == NULL)
		warnx("bn2string");
	else if ((exp = bn2string(r->e)) == NULL)
		warnx("bn2string");
	else if ((json = json_fmt_thumb_rsa(exp, mod)) == NULL)
		warnx("json_fmt_thumb_rsa");

	free(exp);
	free(mod);
	return json;
}

/*
 * The thumbprint operation is used for the challenge sequence.
 */
static int
op_thumbprint(int fd, EVP_PKEY *pkey)
{
	char		*thumb = NULL, *dig64 = NULL;
	EVP_MD_CTX	*ctx = NULL;
	unsigned char	*dig = NULL;
	unsigned int	 digsz;
	int		 rc = 0;

	/* Construct the thumbprint input itself. */

	switch (EVP_PKEY_type(pkey->type)) {
	case EVP_PKEY_RSA:
		if ((thumb = op_thumb_rsa(pkey)) != NULL)
			break;
		goto out;
	default:
		warnx("EVP_PKEY_type: unknown key type");
		goto out;
	}

	/*
	 * Compute the SHA256 digest of the thumbprint then
	 * base64-encode the digest itself.
	 * If the reader is closed when we write, ignore it (we'll pick
	 * it up in the read loop).
	 */

	if ((dig = malloc(EVP_MAX_MD_SIZE)) == NULL) {
		warn("malloc");
		goto out;
	} else if ((ctx = EVP_MD_CTX_create()) == NULL) {
		warnx("EVP_MD_CTX_create");
		goto out;
	} else if (!EVP_DigestInit_ex(ctx, EVP_sha256(), NULL)) {
		warnx("EVP_SignInit_ex");
		goto out;
	} else if (!EVP_DigestUpdate(ctx, thumb, strlen(thumb))) {
		warnx("EVP_SignUpdate");
		goto out;
	} else if (!EVP_DigestFinal_ex(ctx, dig, &digsz)) {
		warnx("EVP_SignFinal");
		goto out;
	} else if ((dig64 = base64buf_url((char *)dig, digsz)) == NULL) {
		warnx("base64buf_url");
		goto out;
	} else if (writestr(fd, COMM_THUMB, dig64) < 0)
		goto out;

	rc = 1;
out:
	if (ctx != NULL)
		EVP_MD_CTX_destroy(ctx);

	free(thumb);
	free(dig);
	free(dig64);
	return rc;
}

static int
op_sign_rsa(char **head, char **prot, EVP_PKEY *pkey, const char *nonce)
{
	char	*exp = NULL, *mod = NULL;
	int	rc = 0;
	RSA	*r;

	*head = NULL;
	*prot = NULL;

	/*
	 * First, extract relevant portions of our private key.
	 * Then construct the public header.
	 * Finally, format the header combined with the nonce.
	 */

	if ((r = EVP_PKEY_get1_RSA(pkey)) == NULL)
		warnx("EVP_PKEY_get1_RSA");
	else if ((mod = bn2string(r->n)) == NULL)
		warnx("bn2string");
	else if ((exp = bn2string(r->e)) == NULL)
		warnx("bn2string");
	else if ((*head = json_fmt_header_rsa(exp, mod)) == NULL)
		warnx("json_fmt_header_rsa");
	else if ((*prot = json_fmt_protected_rsa(exp, mod, nonce)) == NULL)
		warnx("json_fmt_protected_rsa");
	else
		rc = 1;

	free(exp);
	free(mod);
	return rc;
}

/*
 * Operation to sign a message with the account key.
 * This requires the sender ("fd") to provide the payload and a nonce.
 */
static int
op_sign(int fd, EVP_PKEY *pkey)
{
	char		*nonce = NULL, *pay = NULL, *pay64 = NULL;
	char		*prot = NULL, *prot64 = NULL, *head = NULL;
	char		*sign = NULL, *dig64 = NULL, *fin = NULL;
	unsigned char	*dig = NULL;
	EVP_MD_CTX	*ctx = NULL;
	int		 cc, rc = 0;
	unsigned int	 digsz;

	/* Read our payload and nonce from the requestor. */

	if ((pay = readstr(fd, COMM_PAY)) == NULL)
		goto out;
	else if ((nonce = readstr(fd, COMM_NONCE)) == NULL)
		goto out;

	/* Base64-encode the payload. */

	if ((pay64 = base64buf_url(pay, strlen(pay))) == NULL) {
		warnx("base64buf_url");
		goto out;
	}

	switch (EVP_PKEY_type(pkey->type)) {
	case EVP_PKEY_RSA:
		if (!op_sign_rsa(&head, &prot, pkey, nonce))
			goto out;
		break;
	default:
		warnx("EVP_PKEY_type");
		goto out;
	}

	/* The header combined with the nonce, base64. */

	if ((prot64 = base64buf_url(prot, strlen(prot))) == NULL) {
		warnx("base64buf_url");
		goto out;
	}

	/* Now the signature material. */

	cc = asprintf(&sign, "%s.%s", prot64, pay64);
	if (cc == -1) {
		warn("asprintf");
		sign = NULL;
		goto out;
	}

	if ((dig = malloc(EVP_PKEY_size(pkey))) == NULL) {
		warn("malloc");
		goto out;
	}

	/*
	 * Here we go: using our RSA key as merged into the envelope,
	 * sign a SHA256 digest of our message.
	 */

	if ((ctx = EVP_MD_CTX_create()) == NULL) {
		warnx("EVP_MD_CTX_create");
		goto out;
	} else if (!EVP_SignInit_ex(ctx, EVP_sha256(), NULL)) {
		warnx("EVP_SignInit_ex");
		goto out;
	} else if (!EVP_SignUpdate(ctx, sign, strlen(sign))) {
		warnx("EVP_SignUpdate");
		goto out;
	} else if (!EVP_SignFinal(ctx, dig, &digsz, pkey)) {
		warnx("EVP_SignFinal");
		goto out;
	} else if ((dig64 = base64buf_url((char *)dig, digsz)) == NULL) {
		warnx("base64buf_url");
		goto out;
	}

	/*
	 * Write back in the correct JSON format.
	 * If the reader is closed, just ignore it (we'll pick it up
	 * when we next enter the read loop).
	 */

	if ((fin = json_fmt_signed(head, prot64, pay64, dig64)) == NULL) {
		warnx("json_fmt_signed");
		goto out;
	} else if (writestr(fd, COMM_REQ, fin) < 0)
		goto out;

	rc = 1;
out:
	if (ctx != NULL)
		EVP_MD_CTX_destroy(ctx);

	free(pay);
	free(sign);
	free(pay64);
	free(nonce);
	free(head);
	free(prot);
	free(prot64);
	free(dig);
	free(dig64);
	free(fin);
	return rc;
}

int
acctproc(int netsock, const char *acctkey, int newacct)
{
	FILE		*f = NULL;
	EVP_PKEY	*pkey = NULL;
	long		 lval;
	enum acctop	 op;
	int		 rc = 0, cc;
	mode_t		 prev;

	/*
	 * First, open our private key file read-only or write-only if
	 * we're creating from scratch.
	 * Set our umask to be maximally restrictive.
	 */

	prev = umask((S_IWUSR | S_IXUSR) | S_IRWXG | S_IRWXO);
	f = fopen(acctkey, newacct ? "wx" : "r");
	umask(prev);

	if (f == NULL) {
		warn("%s", acctkey);
		goto out;
	}

	/* File-system, user, and sandbox jailing. */

	ERR_load_crypto_strings();

	if (pledge("stdio", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	if (newacct) {
		if ((pkey = rsa_key_create(f, acctkey)) == NULL)
			goto out;
		dodbg("%s: generated RSA account key", acctkey);
	} else {
		if ((pkey = rsa_key_load(f, acctkey)) == NULL)
			goto out;
		doddbg("%s: loaded RSA account key", acctkey);
	}

	fclose(f);
	f = NULL;

	/* Notify the netproc that we've started up. */

	if ((cc = writeop(netsock, COMM_ACCT_STAT, ACCT_READY)) == 0)
		rc = 1;
	if (cc <= 0)
		goto out;

	/*
	 * Now we wait for requests from the network-facing process.
	 * It might ask us for our thumbprint, for example, or for us to
	 * sign a message.
	 */

	for (;;) {
		op = ACCT__MAX;
		if ((lval = readop(netsock, COMM_ACCT)) == 0)
			op = ACCT_STOP;
		else if (lval == ACCT_SIGN || lval == ACCT_THUMBPRINT)
			op = lval;

		if (ACCT__MAX == op) {
			warnx("unknown operation from netproc");
			goto out;
		} else if (ACCT_STOP == op)
			break;

		switch (op) {
		case ACCT_SIGN:
			if (op_sign(netsock, pkey))
				break;
			warnx("op_sign");
			goto out;
		case ACCT_THUMBPRINT:
			if (op_thumbprint(netsock, pkey))
				break;
			warnx("op_thumbprint");
			goto out;
		default:
			abort();
		}
	}

	rc = 1;
out:
	close(netsock);
	if (f != NULL)
		fclose(f);
	if (pkey != NULL)
		EVP_PKEY_free(pkey);
	ERR_print_errors_fp(stderr);
	ERR_free_strings();
	return rc;
}
@


1.10
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.9 2016/09/13 17:13:37 deraadt Exp $ */
d50 1
a50 1
		return (NULL);
d54 1
a54 1
		return (NULL);
d62 1
a62 1
		return (NULL);
d66 1
a66 1
	return (bbuf);
d90 1
a90 1
	return (json);
d153 1
a153 1
	return (rc);
d187 1
a187 1
	return (rc);
d299 1
a299 1
	return (rc);
d400 1
a400 1
	return (rc);
@


1.9
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.8 2016/09/13 16:49:28 deraadt Exp $ */
d48 1
a48 1
	if (NULL == (buf = malloc(len))) {
d59 1
a59 1
	if (NULL == (bbuf = base64buf_url(buf, len))) {
d79 1
a79 1
	if (NULL == (r = EVP_PKEY_get1_RSA(pkey)))
d81 1
a81 1
	else if (NULL == (mod = bn2string(r->n)))
d83 1
a83 1
	else if (NULL == (exp = bn2string(r->e)))
d85 1
a85 1
	else if (NULL == (json = json_fmt_thumb_rsa(exp, mod)))
d109 1
a109 1
		if (NULL != (thumb = op_thumb_rsa(pkey)))
d124 1
a124 1
	if (NULL == (dig = malloc(EVP_MAX_MD_SIZE))) {
d127 1
a127 1
	} else if (NULL == (ctx = EVP_MD_CTX_create())) {
d139 1
a139 1
	} else if (NULL == (dig64 = base64buf_url((char *)dig, digsz))) {
d147 1
a147 1
	if (NULL != ctx)
d172 1
a172 1
	if (NULL == (r = EVP_PKEY_get1_RSA(pkey)))
d174 1
a174 1
	else if (NULL == (mod = bn2string(r->n)))
d176 1
a176 1
	else if (NULL == (exp = bn2string(r->e)))
d178 1
a178 1
	else if (NULL == (*head = json_fmt_header_rsa(exp, mod)))
d180 1
a180 1
	else if (NULL == (*prot = json_fmt_protected_rsa(exp, mod, nonce)))
d207 1
a207 1
	if (NULL == (pay = readstr(fd, COMM_PAY)))
d209 1
a209 1
	else if (NULL == (nonce = readstr(fd, COMM_NONCE)))
d214 1
a214 1
	if (NULL == (pay64 = base64buf_url(pay, strlen(pay)))) {
d231 1
a231 1
	if (NULL == (prot64 = base64buf_url(prot, strlen(prot)))) {
d239 1
a239 1
	if (-1 == cc) {
d245 1
a245 1
	if (NULL == (dig = malloc(EVP_PKEY_size(pkey)))) {
d255 1
a255 1
	if (NULL == (ctx = EVP_MD_CTX_create())) {
d267 1
a267 1
	} else if (NULL == (dig64 = base64buf_url((char *)dig, digsz))) {
d278 1
a278 1
	if (NULL == (fin = json_fmt_signed(head, prot64, pay64, dig64))) {
d286 1
a286 1
	if (NULL != ctx)
d322 1
a322 1
	if (NULL == f) {
d337 1
a337 1
		if (NULL == (pkey = rsa_key_create(f, acctkey)))
d341 1
a341 1
		if (NULL == (pkey = rsa_key_load(f, acctkey)))
d351 1
a351 1
	if (0 == (cc = writeop(netsock, COMM_ACCT_STAT, ACCT_READY)))
d364 1
a364 1
		if (0 == (lval = readop(netsock, COMM_ACCT)))
d366 1
a366 1
		else if (ACCT_SIGN == lval || ACCT_THUMBPRINT == lval)
d394 1
a394 1
	if (NULL != f)
d396 1
a396 1
	if (NULL != pkey)
@


1.8
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.7 2016/09/13 16:04:51 deraadt Exp $ */
d130 1
a130 1
	} else if ( ! EVP_DigestInit_ex(ctx, EVP_sha256(), NULL)) {
d133 1
a133 1
	} else if ( ! EVP_DigestUpdate(ctx, thumb, strlen(thumb))) {
d136 1
a136 1
	} else if ( ! EVP_DigestFinal_ex(ctx, dig, &digsz)) {
d221 1
a221 1
		if ( ! op_sign_rsa(&head, &prot, pkey, nonce))
d258 1
a258 1
	} else if ( ! EVP_SignInit_ex(ctx, EVP_sha256(), NULL)) {
d261 1
a261 1
	} else if ( ! EVP_SignUpdate(ctx, sign, strlen(sign))) {
d264 1
a264 1
	} else if ( ! EVP_SignFinal(ctx, dig, &digsz, pkey)) {
@


1.7
log
@Inconsistant use of case (value): idiom drives me nuts, I have no idea
what purpose it was intended to serve.
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.6 2016/09/13 16:01:37 deraadt Exp $ */
d76 1
a76 1
	char	*exp, *mod, *json;
a78 2
	exp = mod = json = NULL;

d99 3
a101 2
	char		*thumb, *dig64;
	int		 rc;
d103 1
a103 8
	unsigned char	*dig;

	EVP_MD_CTX	*ctx;

	rc = 0;
	thumb = dig64 = NULL;
	dig = NULL;
	ctx = NULL;
d159 2
a161 2
	char	*exp, *mod;
	int	rc;
d163 2
a164 2
	*head = *prot = exp = mod = NULL;
	rc = 0;
d197 6
a202 4
	char		*nonce, *pay,
			*pay64, *prot, *prot64, *head,
			*sign, *dig64, *fin;
	int		 cc, rc;
a203 8
	unsigned char	*dig;
	EVP_MD_CTX	*ctx;

	rc = 0;
	pay = nonce = head = fin =
		sign = prot = prot64 = pay64 = dig64 = NULL;
	dig = NULL;
	ctx = NULL;
d305 2
a306 2
	FILE		*f;
	EVP_PKEY	*pkey;
d309 1
a309 1
	int		 rc, cc;
a310 4

	f = NULL;
	pkey = NULL;
	rc = 0;
@


1.6
log
@RAND_status() and RAND_seed() are not needed, this is 2016.
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.5 2016/09/01 00:35:21 florian Exp $ */
d394 1
a394 1
		case (ACCT_SIGN):
d399 1
a399 1
		case (ACCT_THUMBPRINT):
@


1.5
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.4 2016/09/01 00:21:36 deraadt Exp $ */
a322 1
	unsigned char	 rbuf[64];
a351 11
	}

	/*
	 * Seed our PRNG with data from arc4random().
	 * Do this until we're told it's ok and use increments of 64
	 * bytes (arbitrarily).
	 */

	while (0 == RAND_status()) {
		arc4random_buf(rbuf, sizeof(rbuf));
		RAND_seed(rbuf, sizeof(rbuf));
@


1.4
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.3 2016/08/31 23:52:30 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.3
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.2 2016/08/31 22:42:19 benno Exp $ */
a350 3
	if ( ! sandbox_before())
		goto out;

d353 2
a354 5
	if ( ! dropfs(PATH_VAR_EMPTY))
		goto out;
	else if ( ! dropprivs())
		goto out;
	else if ( ! sandbox_after())
d356 1
@


1.2
log
@whitespace cleanup
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d53 1
a53 1
		return(NULL);
d57 1
a57 1
		return(NULL);
d65 1
a65 1
		return(NULL);
d69 1
a69 1
	return(bbuf);
d95 1
a95 1
	return(json);
d164 1
a164 1
	return(rc);
d198 1
a198 1
	return(rc);
d316 1
a316 1
	return(rc);
d363 1
a363 1
	/* 
d438 1
a438 1
	return(rc);
a439 1

@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: acctproc.c,v 1.45 2016/07/16 10:59:34 kristaps Exp $ */
d177 3
a179 3
	/* 
	 * First, extract relevant portions of our private key. 
	 * Then construct the public header. 
d209 1
a209 1
			*pay64, *prot, *prot64, *head, 
d226 1
a226 1
	else if (NULL == (nonce = readstr(fd, COMM_NONCE))) 
d289 2
a290 2
	/* 
	 * Write back in the correct JSON format. 
d334 1
a334 1
	/* 
@

