head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.9;
commitid	d53S4Fpx9gPB2Hox;

1.9
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.8;
commitid	8yg0jKPVoY1hQFt1;

1.8
date	2017.01.24.07.59.54;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	XKM0X5d5Xq51lWq2;

1.7
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	nxoiZiJPhAAVKQhE;

1.6
date	2016.09.13.16.49.28;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	Kh60oAaRyMBwMrcR;

1.5
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.4;
commitid	BIKpBY4sC6SiXDhj;

1.4
date	2016.09.01.00.21.36;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	P9IiJlKSbxnKzQyC;

1.3
date	2016.08.31.23.53.58;	author benno;	state Exp;
branches;
next	1.2;
commitid	vUhho0qTleehfqGt;

1.2
date	2016.08.31.22.42.19;	author benno;	state Exp;
branches;
next	1.1;
commitid	5XAWaZmjDiZhpE9X;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.10
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@/*	$Id: certproc.c,v 1.9 2017/01/24 12:05:14 jsing Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/err.h>

#include "extern.h"

#define MARKER "-----BEGIN CERTIFICATE-----"

/*
 * Convert an X509 certificate to a buffer of "sz".
 * We don't guarantee that it's NUL-terminated.
 * Returns NULL on failure.
 */
static char *
x509buf(X509 *x, size_t *sz)
{
	BIO	*bio;
	char	*p;
	int	 ssz;

	/* Convert X509 to PEM in BIO. */

	if ((bio = BIO_new(BIO_s_mem())) == NULL) {
		warnx("BIO_new");
		return NULL;
	} else if (!PEM_write_bio_X509(bio, x)) {
		warnx("PEM_write_bio_X509");
		BIO_free(bio);
		return NULL;
	}

	/*
	 * Now convert bio to string.
	 * Make into NUL-terminated, just in case.
	 */

	if ((p = calloc(1, bio->num_write + 1)) == NULL) {
		warn("calloc");
		BIO_free(bio);
		return NULL;
	}

	ssz = BIO_read(bio, p, bio->num_write);
	if (ssz < 0 || (unsigned)ssz != bio->num_write) {
		warnx("BIO_read");
		BIO_free(bio);
		return NULL;
	}

	*sz = ssz;
	BIO_free(bio);
	return p;
}

int
certproc(int netsock, int filesock)
{
	char		*csr = NULL, *chain = NULL, *url = NULL;
	unsigned char	*csrcp, *chaincp;
	size_t		 csrsz, chainsz;
	int		 i, rc = 0, idx = -1, cc;
	enum certop	 op;
	long		 lval;
	X509		*x = NULL, *chainx = NULL;
	X509_EXTENSION	*ext = NULL;
	X509V3_EXT_METHOD *method = NULL;
	void		*entries;
	STACK_OF(CONF_VALUE) *val;
	CONF_VALUE	*nval;

	/* File-system and sandbox jailing. */

	ERR_load_crypto_strings();

	if (pledge("stdio", NULL) == -1) {
		warn("pledge");
		goto out;
	}

	/* Read what the netproc wants us to do. */

	op = CERT__MAX;
	if ((lval = readop(netsock, COMM_CSR_OP)) == 0)
		op = CERT_STOP;
	else if (lval == CERT_REVOKE || lval == CERT_UPDATE)
		op = lval;

	if (CERT_STOP == op) {
		rc = 1;
		goto out;
	} else if (CERT__MAX == op) {
		warnx("unknown operation from netproc");
		goto out;
	}

	/*
	 * Pass revocation right through to fileproc.
	 * If the reader is terminated, ignore it.
	 */

	if (CERT_REVOKE == op) {
		if (writeop(filesock, COMM_CHAIN_OP, FILE_REMOVE) >= 0)
			rc = 1;
		goto out;
	}

	/*
	 * Wait until we receive the DER encoded (signed) certificate
	 * from the network process.
	 * Then convert the DER encoding into an X509 certificate.
	 */

	if ((csr = readbuf(netsock, COMM_CSR, &csrsz)) == NULL)
		goto out;

	csrcp = (u_char *)csr;
	x = d2i_X509(NULL, (const u_char **)&csrcp, csrsz);
	if (x == NULL) {
		warnx("d2i_X509");
		goto out;
	}

	/*
	 * Extract the CA Issuers from its NID.
	 * TODO: I have no idea what I'm doing.
	 */

	idx = X509_get_ext_by_NID(x, NID_info_access, idx);
	if (idx >= 0 && (ext = X509_get_ext(x, idx)) != NULL)
		method = (X509V3_EXT_METHOD *)X509V3_EXT_get(ext);

	entries = X509_get_ext_d2i(x, NID_info_access, 0, 0);
	if (method != NULL && entries != NULL) {
		val = method->i2v(method, entries, 0);
		for (i = 0; i < sk_CONF_VALUE_num(val); i++) {
			nval = sk_CONF_VALUE_value(val, i);
			if (strcmp(nval->name, "CA Issuers - URI"))
				continue;
			url = strdup(nval->value);
			if (url == NULL) {
				warn("strdup");
				goto out;
			}
			break;
		}
	}

	if (url == NULL) {
		warnx("no CA issuer registered with certificate");
		goto out;
	}

	/* Write the CA issuer to the netsock. */

	if (writestr(netsock, COMM_ISSUER, url) <= 0)
		goto out;

	/* Read the full-chain back from the netsock. */

	if ((chain = readbuf(netsock, COMM_CHAIN, &chainsz)) == NULL)
		goto out;

	/*
	 * Then check if the chain is PEM-encoded by looking to see if
	 * it begins with the PEM marker.
	 * If so, ship it as-is; otherwise, convert to a PEM encoded
	 * buffer and ship that.
	 * FIXME: if PEM, re-parse it.
	 */

	if (chainsz <= strlen(MARKER) ||
	    strncmp(chain, MARKER, strlen(MARKER))) {
		chaincp = (u_char *)chain;
		chainx = d2i_X509(NULL, (const u_char **)&chaincp, chainsz);
		if (chainx == NULL) {
			warnx("d2i_X509");
			goto out;
		}
		free(chain);
		if ((chain = x509buf(chainx, &chainsz)) == NULL)
			goto out;
	}

	/* Allow reader termination to just push us out. */

	if ((cc = writeop(filesock, COMM_CHAIN_OP, FILE_CREATE)) == 0)
		rc = 1;
	if (cc <= 0)
		goto out;
	if ((cc = writebuf(filesock, COMM_CHAIN, chain, chainsz)) == 0)
		rc = 1;
	if (cc <= 0)
		goto out;

	/*
	 * Next, convert the X509 to a buffer and send that.
	 * Reader failure doesn't change anything.
	 */

	free(chain);
	if ((chain = x509buf(x, &chainsz)) == NULL)
		goto out;
	if (writebuf(filesock, COMM_CSR, chain, chainsz) < 0)
		goto out;

	rc = 1;
out:
	close(netsock);
	close(filesock);
	if (x != NULL)
		X509_free(x);
	if (chainx != NULL)
		X509_free(chainx);
	free(csr);
	free(url);
	free(chain);
	ERR_print_errors_fp(stderr);
	ERR_free_strings();
	return rc;
}
@


1.9
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.8 2017/01/24 07:59:54 deraadt Exp $ */
d49 1
a49 1
		return (NULL);
d53 1
a53 1
		return (NULL);
d64 1
a64 1
		return (NULL);
d71 1
a71 1
		return (NULL);
d76 1
a76 1
	return (p);
d243 1
a243 1
	return (rc);
@


1.8
log
@string terminator is called a NUL
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.7 2016/09/13 17:13:37 deraadt Exp $ */
d47 1
a47 1
	if (NULL == (bio = BIO_new(BIO_s_mem()))) {
d61 1
a61 1
	if (NULL == (p = calloc(1, bio->num_write + 1))) {
d107 1
a107 1
	if (0 == (lval = readop(netsock, COMM_CSR_OP)))
d109 1
a109 1
	else if (CERT_REVOKE == lval || CERT_UPDATE == lval)
d137 1
a137 1
	if (NULL == (csr = readbuf(netsock, COMM_CSR, &csrsz)))
d142 1
a142 1
	if (NULL == x) {
d153 1
a153 1
	if (idx >= 0 && NULL != (ext = X509_get_ext(x, idx)))
d157 1
a157 1
	if (NULL != method && NULL != entries) {
d164 1
a164 1
			if (NULL == url) {
d172 1
a172 1
	if (NULL == url) {
d184 1
a184 1
	if (NULL == (chain = readbuf(netsock, COMM_CHAIN, &chainsz)))
d199 1
a199 1
		if (NULL == chainx) {
d204 1
a204 1
		if (NULL == (chain = x509buf(chainx, &chainsz)))
d210 1
a210 1
	if (0 == (cc = writeop(filesock, COMM_CHAIN_OP, FILE_CREATE)))
d214 1
a214 1
	if (0 == (cc = writebuf(filesock, COMM_CHAIN, chain, chainsz)))
d225 1
a225 1
	if (NULL == (chain = x509buf(x, &chainsz)))
d234 1
a234 1
	if (NULL != x)
d236 1
a236 1
	if (NULL != chainx)
@


1.7
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.6 2016/09/13 16:49:28 deraadt Exp $ */
d35 1
a35 1
 * We don't guarantee that it's nil-terminated.
d58 1
a58 1
	 * Make into nil-terminated, just in case.
@


1.6
log
@hoist local variable initialization directly into the definitions,
rather than doing it right afterwards.
ok florian
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.5 2016/09/01 00:35:21 florian Exp $ */
d50 1
a50 1
	} else if ( ! PEM_write_bio_X509(bio, x)) {
d198 1
a198 2
		chainx = d2i_X509(NULL,
			(const u_char **)&chaincp, chainsz);
@


1.5
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.4 2016/09/01 00:21:36 deraadt Exp $ */
d82 1
a82 1
	char		*csr, *chain, *url;
d85 1
a85 1
	int		 i, rc, idx, cc;
d88 3
a90 3
	X509		*x, *chainx;
	X509_EXTENSION	*ext;
	X509V3_EXT_METHOD *method;
a93 7

	ext = NULL;
	idx = -1;
	method = NULL;
	chain = csr = url = NULL;
	rc = 0;
	x = chainx = NULL;
@


1.4
log
@Collapse krazy abstractions for other sandbox models, using chroot and
pledge directly as needed.
ok florian
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.3 2016/08/31 23:53:58 benno Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.3
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.2 2016/08/31 22:42:19 benno Exp $ */
a106 3
	if ( ! sandbox_before())
		goto out;

d109 2
a110 5
	if ( ! dropfs(PATH_VAR_EMPTY))
		goto out;
	else if ( ! dropprivs())
		goto out;
	else if ( ! sandbox_after())
d112 1
@


1.2
log
@whitespace cleanup
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d52 1
a52 1
		return(NULL);
d56 1
a56 1
		return(NULL);
d67 1
a67 1
		return(NULL);
d74 1
a74 1
		return(NULL);
d79 1
a79 1
	return(p);
d259 1
a259 1
	return(rc);
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: certproc.c,v 1.29 2016/06/01 20:54:18 kristaps Exp $ */
d59 2
a60 2
	/* 
	 * Now convert bio to string. 
d68 1
a68 1
	} 
d135 2
a136 2
	/* 
	 * Pass revocation right through to fileproc. 
d213 1
a213 1
		chainx = d2i_X509(NULL, 
d222 1
a222 1
	} 
d235 2
a236 2
	/* 
	 * Next, convert the X509 to a buffer and send that. 
a260 1

@

