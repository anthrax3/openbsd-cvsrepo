head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20;
locks; strict;
comment	@ * @;


1.20
date	2017.03.26.18.41.02;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	cDA5L4uJ4e4JHAVo;

1.19
date	2017.02.03.08.08.15;	author guenther;	state Exp;
branches;
next	1.18;
commitid	P29bgNaYzdoOG6Ga;

1.18
date	2017.01.24.13.32.55;	author jsing;	state Exp;
branches;
next	1.17;
commitid	d53S4Fpx9gPB2Hox;

1.17
date	2017.01.24.12.53.52;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	QYSA2DhKNoKjBuQG;

1.16
date	2017.01.24.12.05.14;	author jsing;	state Exp;
branches;
next	1.15;
commitid	8yg0jKPVoY1hQFt1;

1.15
date	2017.01.24.07.59.54;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	XKM0X5d5Xq51lWq2;

1.14
date	2016.11.02.09.33.46;	author jsing;	state Exp;
branches;
next	1.13;
commitid	3oz2FL9LcDZkfqg6;

1.13
date	2016.10.04.15.49.42;	author jsing;	state Exp;
branches;
next	1.12;
commitid	xPKHkEMFcVwCgYRo;

1.12
date	2016.10.04.15.39.58;	author jsing;	state Exp;
branches;
next	1.11;
commitid	YV0jo0At3RvDqL5M;

1.11
date	2016.09.24.15.24.48;	author jsing;	state Exp;
branches;
next	1.10;
commitid	OJAh2Z7C6Vr4PN76;

1.10
date	2016.09.24.15.19.33;	author jsing;	state Exp;
branches;
next	1.9;
commitid	rfduDW8BcivoDrF5;

1.9
date	2016.09.24.15.18.10;	author jsing;	state Exp;
branches;
next	1.8;
commitid	uThkEyxSrMm2iOdM;

1.8
date	2016.09.13.17.13.37;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	nxoiZiJPhAAVKQhE;

1.7
date	2016.09.01.00.35.21;	author florian;	state Exp;
branches;
next	1.6;
commitid	BIKpBY4sC6SiXDhj;

1.6
date	2016.09.01.00.28.59;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	KG8xJlXDgyCR6Eix;

1.5
date	2016.08.31.23.46.33;	author florian;	state Exp;
branches;
next	1.4;
commitid	mqeAhBxNzYf9Zi5K;

1.4
date	2016.08.31.23.08.49;	author benno;	state Exp;
branches;
next	1.3;
commitid	U6VNL492McrLIuWd;

1.3
date	2016.08.31.23.00.17;	author benno;	state Exp;
branches;
next	1.2;
commitid	QqSlzyzgKfrGB6fd;

1.2
date	2016.08.31.22.42.29;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	kv7s4ZHn38KN4dpJ;

1.1
date	2016.08.31.22.01.42;	author florian;	state Exp;
branches;
next	;
commitid	1Bh2CBIwvUy50FSg;


desc
@@


1.20
log
@recallocarray() for data buffer from the net.
ok beck
@
text
@/*	$Id: http.c,v 1.19 2017/02/03 08:08:15 guenther Exp $ */
/*
 * Copyright (c) 2016 Kristaps Dzonsons <kristaps@@bsd.lv>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <arpa/inet.h>
#include <netinet/in.h>

#include <ctype.h>
#include <err.h>
#include <limits.h>
#include <netdb.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <tls.h>
#include <unistd.h>

#include "http.h"
#include "extern.h"

#define DEFAULT_CA_FILE "/etc/ssl/cert.pem"

/*
 * A buffer for transferring HTTP/S data.
 */
struct	httpxfer {
	char		*hbuf;    /* header transfer buffer */
	size_t		 hbufsz;  /* header buffer size */
	int		 headok;  /* header has been parsed */
	char		*bbuf;    /* body transfer buffer */
	size_t		 bbufsz;  /* body buffer size */
	int		 bodyok;  /* body has been parsed */
	char		*headbuf; /* lookaside buffer for headers */
	struct httphead	*head;    /* parsed headers */
	size_t		 headsz;  /* number of headers */
};

/*
 * An HTTP/S connection object.
 */
struct	http {
	int		   fd;     /* connected socket */
	short		   port;   /* port number */
	struct source	   src;    /* endpoint (raw) host */
	char		  *path;   /* path to request */
	char		  *host;   /* name of endpoint host */
	struct tls	  *ctx;    /* if TLS */
	writefp		   writer; /* write function */
	readfp		   reader; /* read function */
};

struct tls_config *tlscfg;

static ssize_t
dosysread(char *buf, size_t sz, const struct http *http)
{
	ssize_t	 rc;

	rc = read(http->fd, buf, sz);
	if (rc < 0)
		warn("%s: read", http->src.ip);
	return rc;
}

static ssize_t
dosyswrite(const void *buf, size_t sz, const struct http *http)
{
	ssize_t	 rc;

	rc = write(http->fd, buf, sz);
	if (rc < 0)
		warn("%s: write", http->src.ip);
	return rc;
}

static ssize_t
dotlsread(char *buf, size_t sz, const struct http *http)
{
	ssize_t	 rc;

	do {
		rc = tls_read(http->ctx, buf, sz);
	} while (rc == TLS_WANT_POLLIN || rc == TLS_WANT_POLLOUT);

	if (rc < 0)
		warnx("%s: tls_read: %s", http->src.ip,
		    tls_error(http->ctx));
	return rc;
}

static ssize_t
dotlswrite(const void *buf, size_t sz, const struct http *http)
{
	ssize_t	 rc;

	do {
		rc = tls_write(http->ctx, buf, sz);
	} while (rc == TLS_WANT_POLLIN || rc == TLS_WANT_POLLOUT);

	if (rc < 0)
		warnx("%s: tls_write: %s", http->src.ip,
		    tls_error(http->ctx));
	return rc;
}

int
http_init()
{
	if (tlscfg != NULL)
		return 0;

	if (tls_init() == -1) {
		warn("tls_init");
		goto err;
	}

	tlscfg = tls_config_new();
	if (tlscfg == NULL) {
		warn("tls_config_new");
		goto err;
	}

	if (tls_config_set_ca_file(tlscfg, DEFAULT_CA_FILE) == -1) {
		warn("tls_config_set_ca_file: %s", tls_config_error(tlscfg));
		goto err;
	}

	return 0;

 err:
	tls_config_free(tlscfg);
	tlscfg = NULL;

	return -1;
}

static ssize_t
http_read(char *buf, size_t sz, const struct http *http)
{
	ssize_t	 ssz, xfer;

	xfer = 0;
	do {
		if ((ssz = http->reader(buf, sz, http)) < 0)
			return -1;
		if (ssz == 0)
			break;
		xfer += ssz;
		sz -= ssz;
		buf += ssz;
	} while (ssz > 0 && sz > 0);

	return xfer;
}

static int
http_write(const char *buf, size_t sz, const struct http *http)
{
	ssize_t	 ssz, xfer;

	xfer = sz;
	while (sz > 0) {
		if ((ssz = http->writer(buf, sz, http)) < 0)
			return -1;
		sz -= ssz;
		buf += (size_t)ssz;
	}
	return xfer;
}

void
http_disconnect(struct http *http)
{
	int rc;

	if (http->ctx != NULL) {
		/* TLS connection. */
		do {
			rc = tls_close(http->ctx);
		} while (rc == TLS_WANT_POLLIN || rc == TLS_WANT_POLLOUT);

		if (rc < 0)
			warnx("%s: tls_close: %s", http->src.ip,
			    tls_error(http->ctx));

		tls_free(http->ctx);
	}
	if (http->fd != -1) {
		if (close(http->fd) == -1)
			warn("%s: close", http->src.ip);
	}

	http->fd = -1;
	http->ctx = NULL;
}

void
http_free(struct http *http)
{

	if (http == NULL)
		return;
	http_disconnect(http);
	free(http->host);
	free(http->path);
	free(http->src.ip);
	free(http);
}

struct http *
http_alloc(const struct source *addrs, size_t addrsz,
    const char *host, short port, const char *path)
{
	struct sockaddr_storage ss;
	int		 family, fd, c;
	socklen_t	 len;
	size_t		 cur, i = 0;
	struct http	*http;

	/* Do this while we still have addresses to connect. */
again:
	if (i == addrsz)
		return NULL;
	cur = i++;

	/* Convert to PF_INET or PF_INET6 address from string. */

	memset(&ss, 0, sizeof(struct sockaddr_storage));

	if (addrs[cur].family == 4) {
		family = PF_INET;
		((struct sockaddr_in *)&ss)->sin_family = AF_INET;
		((struct sockaddr_in *)&ss)->sin_port = htons(port);
		c = inet_pton(AF_INET, addrs[cur].ip,
		    &((struct sockaddr_in *)&ss)->sin_addr);
		len = sizeof(struct sockaddr_in);
	} else if (addrs[cur].family == 6) {
		family = PF_INET6;
		((struct sockaddr_in6 *)&ss)->sin6_family = AF_INET6;
		((struct sockaddr_in6 *)&ss)->sin6_port = htons(port);
		c = inet_pton(AF_INET6, addrs[cur].ip,
		    &((struct sockaddr_in6 *)&ss)->sin6_addr);
		len = sizeof(struct sockaddr_in6);
	} else {
		warnx("%s: unknown family", addrs[cur].ip);
		goto again;
	}

	if (c < 0) {
		warn("%s: inet_ntop", addrs[cur].ip);
		goto again;
	} else if (c == 0) {
		warnx("%s: inet_ntop", addrs[cur].ip);
		goto again;
	}

	/* Create socket and connect. */

	fd = socket(family, SOCK_STREAM, 0);
	if (fd == -1) {
		warn("%s: socket", addrs[cur].ip);
		goto again;
	} else if (connect(fd, (struct sockaddr *)&ss, len) == -1) {
		warn("%s: connect", addrs[cur].ip);
		close(fd);
		goto again;
	}

	/* Allocate the communicator. */

	http = calloc(1, sizeof(struct http));
	if (http == NULL) {
		warn("calloc");
		close(fd);
		return NULL;
	}
	http->fd = fd;
	http->port = port;
	http->src.family = addrs[cur].family;
	http->src.ip = strdup(addrs[cur].ip);
	http->host = strdup(host);
	http->path = strdup(path);
	if (http->src.ip == NULL || http->host == NULL || http->path == NULL) {
		warn("strdup");
		goto err;
	}

	/* If necessary, do our TLS setup. */

	if (port != 443) {
		http->writer = dosyswrite;
		http->reader = dosysread;
		return http;
	}

	http->writer = dotlswrite;
	http->reader = dotlsread;

	if ((http->ctx = tls_client()) == NULL) {
		warn("tls_client");
		goto err;
	} else if (tls_configure(http->ctx, tlscfg) == -1) {
		warnx("%s: tls_configure: %s",
			http->src.ip, tls_error(http->ctx));
		goto err;
	}

	if (tls_connect_socket(http->ctx, http->fd, http->host) != 0) {
		warnx("%s: tls_connect_socket: %s, %s", http->src.ip,
		    http->host, tls_error(http->ctx));
		goto err;
	}

	return http;
err:
	http_free(http);
	return NULL;
}

struct httpxfer *
http_open(const struct http *http, const void *p, size_t psz)
{
	char		*req;
	int		 c;
	struct httpxfer	*trans;

	if (p == NULL) {
		c = asprintf(&req,
		    "GET %s HTTP/1.0\r\n"
		    "Host: %s\r\n"
		    "\r\n",
		    http->path, http->host);
	} else {
		c = asprintf(&req,
		    "POST %s HTTP/1.0\r\n"
		    "Host: %s\r\n"
		    "Content-Length: %zu\r\n"
		    "\r\n",
		    http->path, http->host, psz);
	}
	if (c == -1) {
		warn("asprintf");
		return NULL;
	} else if (!http_write(req, c, http)) {
		free(req);
		return NULL;
	} else if (p != NULL && !http_write(p, psz, http)) {
		free(req);
		return NULL;
	}

	free(req);

	trans = calloc(1, sizeof(struct httpxfer));
	if (trans == NULL)
		warn("calloc");
	return trans;
}

void
http_close(struct httpxfer *x)
{

	if (x == NULL)
		return;
	free(x->hbuf);
	free(x->bbuf);
	free(x->headbuf);
	free(x->head);
	free(x);
}

/*
 * Read the HTTP body from the wire.
 * If invoked multiple times, this will return the same pointer with the
 * same data (or NULL, if the original invocation returned NULL).
 * Returns NULL if read or allocation errors occur.
 * You must not free the returned pointer.
 */
char *
http_body_read(const struct http *http, struct httpxfer *trans, size_t *sz)
{
	char		 buf[BUFSIZ];
	ssize_t		 ssz;
	void		*pp;
	size_t		 szp;

	if (sz == NULL)
		sz = &szp;

	/* Have we already parsed this? */

	if (trans->bodyok > 0) {
		*sz = trans->bbufsz;
		return trans->bbuf;
	} else if (trans->bodyok < 0)
		return NULL;

	*sz = 0;
	trans->bodyok = -1;

	do {
		/* If less than sizeof(buf), at EOF. */
		if ((ssz = http_read(buf, sizeof(buf), http)) < 0)
			return NULL;
		else if (ssz == 0)
			break;
		pp = recallocarray(trans->bbuf,
		    trans->bbufsz, trans->bbufsz + ssz, 1);
		if (pp == NULL) {
			warn("recallocarray");
			return NULL;
		}
		trans->bbuf = pp;
		memcpy(trans->bbuf + trans->bbufsz, buf, ssz);
		trans->bbufsz += ssz;
	} while (ssz == sizeof(buf));

	trans->bodyok = 1;
	*sz = trans->bbufsz;
	return trans->bbuf;
}

struct httphead *
http_head_get(const char *v, struct httphead *h, size_t hsz)
{
	size_t	 i;

	for (i = 0; i < hsz; i++) {
		if (strcmp(h[i].key, v))
			continue;
		return &h[i];
	}
	return NULL;
}

/*
 * Look through the headers and determine our HTTP code.
 * This will return -1 on failure, otherwise the code.
 */
int
http_head_status(const struct http *http, struct httphead *h, size_t sz)
{
	int		 rc;
	unsigned int	 code;
	struct httphead *st;

	if ((st = http_head_get("Status", h, sz)) == NULL) {
		warnx("%s: no status header", http->src.ip);
		return -1;
	}

	rc = sscanf(st->val, "%*s %u %*s", &code);
	if (rc < 0) {
		warn("sscanf");
		return -1;
	} else if (rc != 1) {
		warnx("%s: cannot convert status header", http->src.ip);
		return -1;
	}
	return code;
}

/*
 * Parse headers from the transfer.
 * Malformed headers are skipped.
 * A special "Status" header is added for the HTTP status line.
 * This can only happen once http_head_read has been called with
 * success.
 * This can be invoked multiple times: it will only parse the headers
 * once and after that it will just return the cache.
 * You must not free the returned pointer.
 * If the original header parse failed, or if memory allocation fails
 * internally, this returns NULL.
 */
struct httphead *
http_head_parse(const struct http *http, struct httpxfer *trans, size_t *sz)
{
	size_t		 hsz, szp;
	struct httphead	*h;
	char		*cp, *ep, *ccp, *buf;

	if (sz == NULL)
		sz = &szp;

	/*
	 * If we've already parsed the headers, return the
	 * previously-parsed buffer now.
	 * If we have errors on the stream, return NULL now.
	 */

	if (trans->head != NULL) {
		*sz = trans->headsz;
		return trans->head;
	} else if (trans->headok <= 0)
		return NULL;

	if ((buf = strdup(trans->hbuf)) == NULL) {
		warn("strdup");
		return NULL;
	}
	hsz = 0;
	cp = buf;

	do {
		if ((cp = strstr(cp, "\r\n")) != NULL)
			cp += 2;
		hsz++;
	} while (cp != NULL);

	/*
	 * Allocate headers, then step through the data buffer, parsing
	 * out headers as we have them.
	 * We know at this point that the buffer is NUL-terminated in
	 * the usual way.
	 */

	h = calloc(hsz, sizeof(struct httphead));
	if (h == NULL) {
		warn("calloc");
		free(buf);
		return NULL;
	}

	*sz = hsz;
	hsz = 0;
	cp = buf;

	do {
		if ((ep = strstr(cp, "\r\n")) != NULL) {
			*ep = '\0';
			ep += 2;
		}
		if (hsz == 0) {
			h[hsz].key = "Status";
			h[hsz++].val = cp;
			continue;
		}

		/* Skip bad headers. */
		if ((ccp = strchr(cp, ':')) == NULL) {
			warnx("%s: header without separator", http->src.ip);
			continue;
		}

		*ccp++ = '\0';
		while (isspace((int)*ccp))
			ccp++;
		h[hsz].key = cp;
		h[hsz++].val = ccp;
	} while ((cp = ep) != NULL);

	trans->headbuf = buf;
	trans->head = h;
	trans->headsz = hsz;
	return h;
}

/*
 * Read the HTTP headers from the wire.
 * If invoked multiple times, this will return the same pointer with the
 * same data (or NULL, if the original invocation returned NULL).
 * Returns NULL if read or allocation errors occur.
 * You must not free the returned pointer.
 */
char *
http_head_read(const struct http *http, struct httpxfer *trans, size_t *sz)
{
	char		 buf[BUFSIZ];
	ssize_t		 ssz;
	char		*ep;
	void		*pp;
	size_t		 szp;

	if (sz == NULL)
		sz = &szp;

	/* Have we already parsed this? */

	if (trans->headok > 0) {
		*sz = trans->hbufsz;
		return trans->hbuf;
	} else if (trans->headok < 0)
		return NULL;

	*sz = 0;
	ep = NULL;
	trans->headok = -1;

	/*
	 * Begin by reading by BUFSIZ blocks until we reach the header
	 * termination marker (two CRLFs).
	 * We might read into our body, but that's ok: we'll copy out
	 * the body parts into our body buffer afterward.
	 */

	do {
		/* If less than sizeof(buf), at EOF. */
		if ((ssz = http_read(buf, sizeof(buf), http)) < 0)
			return NULL;
		else if (ssz == 0)
			break;
		pp = recallocarray(trans->hbuf,
		    trans->hbufsz, trans->hbufsz + ssz, 1);
		if (pp == NULL) {
			warn("recallocarray");
			return NULL;
		}
		trans->hbuf = pp;
		memcpy(trans->hbuf + trans->hbufsz, buf, ssz);
		trans->hbufsz += ssz;
		/* Search for end of headers marker. */
		ep = memmem(trans->hbuf, trans->hbufsz, "\r\n\r\n", 4);
	} while (ep == NULL && ssz == sizeof(buf));

	if (ep == NULL) {
		warnx("%s: partial transfer", http->src.ip);
		return NULL;
	}
	*ep = '\0';

	/*
	 * The header data is invalid if it has any binary characters in
	 * it: check that now.
	 * This is important because we want to guarantee that all
	 * header keys and pairs are properly NUL-terminated.
	 */

	if (strlen(trans->hbuf) != (uintptr_t)(ep - trans->hbuf)) {
		warnx("%s: binary data in header", http->src.ip);
		return NULL;
	}

	/*
	 * Copy remaining buffer into body buffer.
	 */

	ep += 4;
	trans->bbufsz = (trans->hbuf + trans->hbufsz) - ep;
	trans->bbuf = malloc(trans->bbufsz);
	if (trans->bbuf == NULL) {
		warn("malloc");
		return NULL;
	}
	memcpy(trans->bbuf, ep, trans->bbufsz);

	trans->headok = 1;
	*sz = trans->hbufsz;
	return trans->hbuf;
}

void
http_get_free(struct httpget *g)
{

	if (g == NULL)
		return;
	http_close(g->xfer);
	http_free(g->http);
	free(g);
}

struct httpget *
http_get(const struct source *addrs, size_t addrsz, const char *domain,
    short port, const char *path, const void *post, size_t postsz)
{
	struct http	*h;
	struct httpxfer	*x;
	struct httpget	*g;
	struct httphead	*head;
	size_t		 headsz, bodsz, headrsz;
	int		 code;
	char		*bod, *headr;

	h = http_alloc(addrs, addrsz, domain, port, path);
	if (h == NULL)
		return NULL;

	if ((x = http_open(h, post, postsz)) == NULL) {
		http_free(h);
		return NULL;
	} else if ((headr = http_head_read(h, x, &headrsz)) == NULL) {
		http_close(x);
		http_free(h);
		return NULL;
	} else if ((bod = http_body_read(h, x, &bodsz)) == NULL) {
		http_close(x);
		http_free(h);
		return NULL;
	}

	http_disconnect(h);

	if ((head = http_head_parse(h, x, &headsz)) == NULL) {
		http_close(x);
		http_free(h);
		return NULL;
	} else if ((code = http_head_status(h, head, headsz)) < 0) {
		http_close(x);
		http_free(h);
		return NULL;
	}

	if ((g = calloc(1, sizeof(struct httpget))) == NULL) {
		warn("calloc");
		http_close(x);
		http_free(h);
		return NULL;
	}

	g->headpart = headr;
	g->headpartsz = headrsz;
	g->bodypart = bod;
	g->bodypartsz = bodsz;
	g->head = head;
	g->headsz = headsz;
	g->code = code;
	g->xfer = x;
	g->http = h;
	return g;
}

#if 0
int
main(void)
{
	struct httpget	*g;
	struct httphead	*httph;
	size_t		 i, httphsz;
	struct source	 addrs[2];
	size_t		 addrsz;

#if 0
	addrs[0].ip = "127.0.0.1";
	addrs[0].family = 4;
	addrsz = 1;
#else
	addrs[0].ip = "2a00:1450:400a:806::2004";
	addrs[0].family = 6;
	addrs[1].ip = "193.135.3.123";
	addrs[1].family = 4;
	addrsz = 2;
#endif

	if (http_init() == -1)
		errx(EXIT_FAILURE, "http_init");

#if 0
	g = http_get(addrs, addrsz, "localhost", 80, "/index.html");
#else
	g = http_get(addrs, addrsz, "www.google.ch", 80, "/index.html",
	    NULL, 0);
#endif

	if (g == NULL)
		errx(EXIT_FAILURE, "http_get");

	httph = http_head_parse(g->http, g->xfer, &httphsz);
	warnx("code: %d", g->code);

	for (i = 0; i < httphsz; i++)
		warnx("head: [%s]=[%s]", httph[i].key, httph[i].val);

	http_get_free(g);
	return (EXIT_SUCCESS);
}
#endif
@


1.19
log
@Don't use <sys/param.h> from userland without cause.  Sort <sys/*>
before other includes per style(9) while we're here.

ok florian@@ bcook@@ jsing@@ beck@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.18 2017/01/24 13:32:55 jsing Exp $ */
d425 2
a426 1
		pp = realloc(trans->bbuf, trans->bbufsz + ssz);
d428 1
a428 1
			warn("realloc");
d620 2
a621 1
		pp = realloc(trans->hbuf, trans->hbufsz + ssz);
d623 1
a623 1
			warn("realloc");
@


1.18
log
@Make returns consistent and remove parentheses per style(9).

Transformed with coccinelle.

Requested by and ok tb@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.17 2017/01/24 12:53:52 deraadt Exp $ */
d18 1
d20 1
a20 1
#include <sys/param.h>
d22 1
@


1.17
log
@
Complete jsing's coccinelle cleanup... by hand
ok jsing
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.16 2017/01/24 12:05:14 jsing Exp $ */
d77 1
a77 1
	return (rc);
d88 1
a88 1
	return (rc);
d103 1
a103 1
	return (rc);
d118 1
a118 1
	return (rc);
d125 1
a125 1
		return (0);
d143 1
a143 1
	return (0);
d149 1
a149 1
	return (-1);
d160 1
a160 1
			return (-1);
d168 1
a168 1
	return (xfer);
d179 1
a179 1
			return (-1);
d183 1
a183 1
	return (xfer);
d238 1
a238 1
		return (NULL);
d290 1
a290 1
		return (NULL);
d308 1
a308 1
		return (http);
d329 1
a329 1
	return (http);
d332 1
a332 1
	return (NULL);
d358 1
a358 1
		return (NULL);
d361 1
a361 1
		return (NULL);
d364 1
a364 1
		return (NULL);
d372 1
a372 1
	return (trans);
d410 1
a410 1
		return (trans->bbuf);
d412 1
a412 1
		return (NULL);
d420 1
a420 1
			return (NULL);
d426 1
a426 1
			return (NULL);
d435 1
a435 1
	return (trans->bbuf);
d446 1
a446 1
		return (&h[i]);
d448 1
a448 1
	return (NULL);
d464 1
a464 1
		return (-1);
d470 1
a470 1
		return (-1);
d473 1
a473 1
		return (-1);
d475 1
a475 1
	return (code);
d508 1
a508 1
		return (trans->head);
d510 1
a510 1
		return (NULL);
d514 1
a514 1
		return (NULL);
d536 1
a536 1
		return (NULL);
d570 1
a570 1
	return (h);
d596 1
a596 1
		return (trans->hbuf);
d598 1
a598 1
		return (NULL);
d614 1
a614 1
			return (NULL);
d620 1
a620 1
			return (NULL);
d631 1
a631 1
		return (NULL);
d644 1
a644 1
		return (NULL);
d656 1
a656 1
		return (NULL);
d662 1
a662 1
	return (trans->hbuf);
d690 1
a690 1
		return (NULL);
d694 1
a694 1
		return (NULL);
d698 1
a698 1
		return (NULL);
d702 1
a702 1
		return (NULL);
d710 1
a710 1
		return (NULL);
d714 1
a714 1
		return (NULL);
d721 1
a721 1
		return (NULL);
d733 1
a733 1
	return (g);
@


1.16
log
@Replace comparisons between a constant or enum and an expression, with
a comparison between the expression and the constant or enum. This
significantly improves readability.

Transformed with coccinelle.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.15 2017/01/24 07:59:54 deraadt Exp $ */
d362 1
a362 1
	} else if (p != NULL && ! http_write(p, psz, http)) {
d768 1
a768 1
	if (NULL == g)
@


1.15
log
@string terminator is called a NUL
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.14 2016/11/02 09:33:46 jsing Exp $ */
d98 1
a98 1
	} while (TLS_WANT_POLLIN == rc || TLS_WANT_POLLOUT == rc);
d113 1
a113 1
	} while (TLS_WANT_POLLIN == rc || TLS_WANT_POLLOUT == rc);
d124 1
a124 1
	if (NULL != tlscfg)
d127 1
a127 1
	if (-1 == tls_init()) {
d133 1
a133 1
	if (NULL == tlscfg) {
d138 1
a138 1
	if (-1 == tls_config_set_ca_file(tlscfg, DEFAULT_CA_FILE)) {
d161 1
a161 1
		if (0 == ssz)
d191 1
a191 1
	if (NULL != http->ctx) {
d195 1
a195 1
		} while (TLS_WANT_POLLIN == rc || TLS_WANT_POLLOUT == rc);
d203 2
a204 2
	if (-1 != http->fd) {
		if (-1 == close(http->fd))
d216 1
a216 1
	if (NULL == http)
d245 1
a245 1
	if (4 == addrs[cur].family) {
d252 1
a252 1
	} else if (6 == addrs[cur].family) {
d267 1
a267 1
	} else if (0 == c) {
d275 1
a275 1
	if (-1 == fd) {
d278 1
a278 1
	} else if (-1 == connect(fd, (struct sockaddr *)&ss, len)) {
d287 1
a287 1
	if (NULL == http) {
d298 1
a298 1
	if (NULL == http->src.ip || NULL == http->host || NULL == http->path) {
d305 1
a305 1
	if (443 != port) {
d314 1
a314 1
	if (NULL == (http->ctx = tls_client())) {
d317 1
a317 1
	} else if (-1 == tls_configure(http->ctx, tlscfg)) {
d323 1
a323 1
	if (0 != tls_connect_socket(http->ctx, http->fd, http->host)) {
d342 1
a342 1
	if (NULL == p) {
d356 1
a356 1
	if (-1 == c) {
d362 1
a362 1
	} else if (NULL != p && ! http_write(p, psz, http)) {
d370 1
a370 1
	if (NULL == trans)
d379 1
a379 1
	if (NULL == x)
d403 1
a403 1
	if (NULL == sz)
d421 1
a421 1
		else if (0 == ssz)
d424 1
a424 1
		if (NULL == pp) {
d431 1
a431 1
	} while (sizeof(buf) == ssz);
d462 1
a462 1
	if (NULL == (st = http_head_get("Status", h, sz))) {
d471 1
a471 1
	} else if (1 != rc) {
d497 1
a497 1
	if (NULL == sz)
d506 1
a506 1
	if (NULL != trans->head) {
d512 1
a512 1
	if (NULL == (buf = strdup(trans->hbuf))) {
d520 1
a520 1
		if (NULL != (cp = strstr(cp, "\r\n")))
d523 1
a523 1
	} while (NULL != cp);
d533 1
a533 1
	if (NULL == h) {
d544 1
a544 1
		if (NULL != (ep = strstr(cp, "\r\n"))) {
d548 1
a548 1
		if (0 == hsz) {
d555 1
a555 1
		if (NULL == (ccp = strchr(cp, ':'))) {
d565 1
a565 1
	} while (NULL != (cp = ep));
d589 1
a589 1
	if (NULL == sz)
d615 1
a615 1
		else if (0 == ssz)
d618 1
a618 1
		if (NULL == pp) {
d627 1
a627 1
	} while (NULL == ep && sizeof(buf) == ssz);
d629 1
a629 1
	if (NULL == ep) {
d654 1
a654 1
	if (NULL == trans->bbuf) {
d669 1
a669 1
	if (NULL == g)
d689 1
a689 1
	if (NULL == h)
d692 1
a692 1
	if (NULL == (x = http_open(h, post, postsz))) {
d695 1
a695 1
	} else if (NULL == (headr = http_head_read(h, x, &headrsz))) {
d699 1
a699 1
	} else if (NULL == (bod = http_body_read(h, x, &bodsz))) {
d707 1
a707 1
	if (NULL == (head = http_head_parse(h, x, &headsz))) {
d717 1
a717 1
	if (NULL == (g = calloc(1, sizeof(struct httpget)))) {
@


1.14
log
@Use secure defaults for TLS - instead of accepting TLSv1.0 and any cipher
suite, use the libtls defaults and require TLSv1.2 with an AEAD+PFS cipher
suite - given who we're talking to one would hope that they meet these
requirements...

ok benno@@ deraadt@@ florian@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.13 2016/10/04 15:49:42 jsing Exp $ */
d528 1
a528 1
	 * We know at this point that the buffer is nil-terminated in
d639 1
a639 1
	 * header keys and pairs are properly nil-terminated.
@


1.13
log
@Avoid a potential MITM - calling tls_config_insecure_noverify() is a bad
idea, so stop doing that. Instead, use a single tls_config, set it up and
configure the CA file to use while we still have rpath, then drop rpath.
This also avoids creating a new tls_config for each and every HTTPS
connection, which is unnecessary.

ok benno@@ florian@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.12 2016/10/04 15:39:58 jsing Exp $ */
a137 2
	tls_config_set_protocols(tlscfg, TLS_PROTOCOLS_ALL);

a139 4
		goto err;
	}
	if (-1 == tls_config_set_ciphers(tlscfg, "compat")) {
		warn("tls_config_set_ciphers: %s", tls_config_error(tlscfg));
@


1.12
log
@tls_close() can return TLS_WANT_POLLIN/TLS_WANT_POLLOUT - handle this
case correctly.

ok florian@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.11 2016/09/24 15:24:48 jsing Exp $ */
d36 2
a61 1
	struct tls_config *cfg;    /* if TLS */
d67 2
d121 37
a224 1
	tls_config_free(http->cfg);
d320 1
a320 20
	if (-1 == tls_init()) {
		warn("tls_init");
		goto err;
	}

	http->cfg = tls_config_new();
	if (NULL == http->cfg) {
		warn("tls_config_new");
		goto err;
	}

	tls_config_set_protocols(http->cfg, TLS_PROTOCOLS_ALL);

	/* FIXME: is this necessary? */
	tls_config_insecure_noverifycert(http->cfg);

	if (-1 == tls_config_set_ciphers(http->cfg, "compat")) {
		warn("tls_config_set_ciphers");
		goto err;
	} else if (NULL == (http->ctx = tls_client())) {
d323 1
a323 1
	} else if (-1 == tls_configure(http->ctx, http->cfg)) {
d763 3
@


1.11
log
@The file descriptor needs to be closed in both the TLS and non-TLS case,
so make it a common/shared code path.
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.10 2016/09/24 15:19:33 jsing Exp $ */
d155 1
d159 5
a163 1
		if (-1 == tls_close(http->ctx))
d166 1
@


1.10
log
@Both tls_free() and tls_config_free() are safe to call with NULL.
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.9 2016/09/24 15:18:10 jsing Exp $ */
d162 2
a163 4
		if (-1 == close(http->fd))
			warn("%s: close", http->src.ip);
	} else if (-1 != http->fd) {
		/* Non-TLS connection. */
@


1.9
log
@Remove more backwards compat for unsupported OpenBSD releases.
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.8 2016/09/13 17:13:37 deraadt Exp $ */
d161 1
a161 2
		if (NULL != http->ctx)
			tls_free(http->ctx);
d181 1
a181 2
	if (NULL != http->cfg)
		tls_config_free(http->cfg);
@


1.8
log
@A small amount more KNF to make this easier on our eyes.  Not going further
than this.
ok florian
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.7 2016/09/01 00:35:21 florian Exp $ */
a151 6
/*
 * Between 5.8 and 5.9, libtls changed its semantics.
 * In the old way, tls_close() will close the underlying file
 * descriptors.
 * In the new way, it won't.
 */
a162 1
#if ! defined(TLS_READ_AGAIN) && ! defined(TLS_WRITE_AGAIN)
a164 1
#endif
@


1.7
log
@we don't have config.h
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.6 2016/09/01 00:28:59 deraadt Exp $ */
d98 2
a99 3
		warnx("%s: tls_read: %s",
			http->src.ip,
			tls_error(http->ctx));
d113 2
a114 3
		warnx("%s: tls_write: %s",
			http->src.ip,
			tls_error(http->ctx));
d165 2
a166 3
			warnx("%s: tls_close: %s",
				http->src.ip,
				tls_error(http->ctx));
d200 1
a200 1
	const char *host, short port, const char *path)
d223 1
a223 1
			&((struct sockaddr_in *)&ss)->sin_addr);
d230 1
a230 1
			&((struct sockaddr_in6 *)&ss)->sin6_addr);
d271 1
a271 3
	if (NULL == http->src.ip ||
	    NULL == http->host ||
	    NULL == http->path) {
d315 3
a317 5
	if (0 != tls_connect_socket
	     (http->ctx, http->fd, http->host)) {
		warnx("%s: tls_connect_socket: %s, %s",
			http->src.ip, http->host,
			tls_error(http->ctx));
d336 4
a339 4
			"GET %s HTTP/1.0\r\n"
			"Host: %s\r\n"
			"\r\n",
			http->path, http->host);
d342 5
a346 5
			"POST %s HTTP/1.0\r\n"
			"Host: %s\r\n"
			"Content-Length: %zu\r\n"
			"\r\n",
			http->path, http->host, psz);
d351 1
a351 1
	} else if ( ! http_write(req, c, http)) {
d388 1
a388 2
http_body_read(const struct http *http,
	struct httpxfer *trans, size_t *sz)
d448 1
a448 2
http_head_status(const struct http *http,
	struct httphead *h, size_t sz)
d464 1
a464 2
		warnx("%s: cannot convert status header",
			http->src.ip);
d483 1
a483 2
http_head_parse(const struct http *http,
	struct httpxfer *trans, size_t *sz)
d548 1
a548 2
			warnx("%s: header without separator",
				http->src.ip);
d573 1
a573 2
http_head_read(const struct http *http,
	struct httpxfer *trans, size_t *sz)
d669 2
a670 3
http_get(const struct source *addrs, size_t addrsz,
	const char *domain, short port, const char *path,
	const void *post, size_t postsz)
d754 1
a754 1
		     NULL, 0);
@


1.6
log
@do { } while is easier to eyeball
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.5 2016/08/31 23:46:33 florian Exp $ */
a16 3
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif
@


1.5
log
@We are past 5.8. Also gets rid of asserts as a bonus.
OK benno@@, deraadt@@
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.4 2016/08/31 23:08:49 benno Exp $ */
d96 1
a96 1
	do
d98 1
a98 2
	while (TLS_WANT_POLLIN == rc ||
	       TLS_WANT_POLLOUT == rc);
d112 1
a112 1
	do
d114 1
a114 2
	while (TLS_WANT_POLLIN == rc ||
	       TLS_WANT_POLLOUT == rc);
@


1.4
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.3 2016/08/31 23:00:17 benno Exp $ */
a24 1
#include <assert.h>
a90 62
#if defined(TLS_READ_AGAIN) && defined(TLS_WRITE_AGAIN)
/*
 * Old-style libtls calls.
 * These changed between 5.8 and 5.9.
 */
static ssize_t
dotlsread(char *buf, size_t sz, const struct http *http)
{
	size_t	out, tot = 0;
	int	rc;

	for (;;) {
		out = 0;
		rc = tls_read(http->ctx, buf, sz, &out);
		if (out > 0) {
			buf += out;
			assert(sz >= out);
			sz -= out;
			tot += out;
		}
		if (TLS_READ_AGAIN == rc)
			continue;
		else if (0 == out || 0 == sz || 0 == rc)
			break;
		warnx("%s: tls_read: %s",
			http->src.ip, tls_error(http->ctx));
		return (-1);
	}

	return (tot);
}

static ssize_t
dotlswrite(const void *buf, size_t sz, const struct http *http)
{
	size_t	 out, tot = 0;
	int	 rc;

	for (;;) {
		out = 0;
		rc = tls_write(http->ctx, buf, sz, &out);
		if (out > 0) {
			buf += out;
			assert(sz >= out);
			sz -= out;
			tot += out;
		}
		if (TLS_WRITE_AGAIN == rc)
			continue;
		else if (0 == out || 0 == rc || 0 == rc)
			break;
		warnx("%s: tls_write: %s",
			http->src.ip, tls_error(http->ctx));
		return (-1);
	}

	return (tot);
}
#else
/*
 * New-style libtls calls.
 */
a123 1
#endif
@


1.3
log
@whitespace
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.2 2016/08/31 22:42:29 deraadt Exp $ */
d44 6
a49 6
	char		*hbuf; /* header transfer buffer */
	size_t		 hbufsz; /* header buffer size */
	int		 headok; /* header has been parsed */
	char		*bbuf; /* body transfer buffer */
	size_t		 bbufsz; /* body buffer size */
	int		 bodyok; /* body has been parsed */
d51 2
a52 2
	struct httphead	*head; /* parsed headers */
	size_t		 headsz; /* number of headers */
d59 7
a65 7
	int	 	   fd; /* connected socket */
	short	 	   port; /* port number */
	struct source	   src; /* endpoint (raw) host */
	char		  *path; /* path to request */
	char		  *host; /* name of endpoint host */
	struct tls_config *cfg; /* if TLS */
	struct tls	  *ctx; /* if TLS */
d378 1
a378 1
	        warn("tls_config_set_ciphers");
d615 1
a615 1
	do { 
d654 1
a654 1
http_head_read(const struct http *http, 
d778 1
a778 1
	} 
d781 1
a781 1
	
d836 2
a837 1
	g = http_get(addrs, addrsz, "www.google.ch", 80, "/index.html", NULL, 0);
d840 1
a840 1
	if (NULL == g) 
d846 1
a846 1
	for (i = 0; i < httphsz; i++) 
@


1.2
log
@avoid arith on void *, by using char *
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.1 2016/08/31 22:01:42 florian Exp $ */
d78 1
a78 1
	return(rc);
d89 1
a89 1
	return(rc);
d116 1
a116 1
		warnx("%s: tls_read: %s", 
d118 2
a119 2
		return(-1);
	} 
d121 1
a121 1
	return(tot);
d139 1
a139 1
		if (TLS_WRITE_AGAIN == rc) 
d143 1
a143 1
		warnx("%s: tls_write: %s", 
d145 2
a146 2
		return(-1);
	} 
d148 1
a148 1
	return(tot);
d165 2
a166 2
		warnx("%s: tls_read: %s", 
			http->src.ip, 
d168 1
a168 1
	return(rc);
d182 2
a183 2
		warnx("%s: tls_write: %s", 
			http->src.ip, 
d185 1
a185 1
	return(rc);
d197 1
a197 1
			return(-1);
d205 1
a205 1
	return(xfer);
d216 1
a216 1
			return(-1);
d220 1
a220 1
	return(xfer);
d237 1
a237 1
				http->src.ip, 
d271 1
a271 1
http_alloc(const struct source *addrs, size_t addrsz, 
d283 1
a283 1
		return(NULL);
d294 1
a294 1
		c = inet_pton(AF_INET, addrs[cur].ip, 
d301 1
a301 1
		c = inet_pton(AF_INET6, addrs[cur].ip, 
d335 1
a335 1
		return(NULL);
d355 1
a355 1
		return(http);
d391 2
a392 2
		warnx("%s: tls_connect_socket: %s, %s", 
			http->src.ip, http->host, 
d397 1
a397 1
	return(http);
d400 1
a400 1
	return(NULL);
d411 1
a411 1
		c = asprintf(&req, 
d417 1
a417 1
		c = asprintf(&req, 
d426 1
a426 1
		return(NULL);
d429 1
a429 1
		return(NULL);
d432 1
a432 1
		return(NULL);
d438 1
a438 1
	if (NULL == trans) 
d440 1
a440 1
	return(trans);
d464 1
a464 1
http_body_read(const struct http *http, 
d479 1
a479 1
		return(trans->bbuf);
d481 1
a481 1
		return(NULL);
d489 1
a489 1
			return(NULL);
d495 1
a495 1
			return(NULL);
d504 1
a504 1
	return(trans->bbuf);
d515 1
a515 1
		return(&h[i]);
d517 1
a517 1
	return(NULL);
d534 1
a534 1
		return(-1);
d540 1
a540 1
		return(-1);
d544 1
a544 1
		return(-1);
d546 1
a546 1
	return(code);
d580 1
a580 1
		return(trans->head);
d582 1
a582 1
		return(NULL);
d586 1
a586 1
		return(NULL);
d591 1
a591 1
	do { 
d608 1
a608 1
		return(NULL);
d643 1
a643 1
	return(h);
d670 1
a670 1
		return(trans->hbuf);
d672 1
a672 1
		return(NULL);
d688 1
a688 1
			return(NULL);
d694 1
a694 1
			return(NULL);
d705 1
a705 1
		return(NULL);
d718 1
a718 1
		return(NULL);
d730 1
a730 1
		return(NULL);
d736 1
a736 1
	return(trans->hbuf);
d765 1
a765 1
		return(NULL);
d769 1
a769 1
		return(NULL);
d773 1
a773 1
		return(NULL);
d777 1
a777 1
		return(NULL);
d785 1
a785 1
		return(NULL);
d789 1
a789 1
		return(NULL);
d796 1
a796 1
		return(NULL);
d808 1
a808 1
	return(g);
d849 1
a849 1
	return(EXIT_SUCCESS);
@


1.1
log
@Import Kristaps' letskencrypt and call it acme-client in tree.
OK to get it in deraadt@@ (and probably beck@@)

At least deraadt@@, beck@@ and otto@@ are fine with the name and the
disagreements stopped.
@
text
@d1 1
a1 1
/*	$Id: http.c,v 1.13 2016/07/02 09:24:17 kristaps Exp $ */
d209 1
a209 1
http_write(const void *buf, size_t sz, const struct http *http)
d218 1
a218 1
		buf += ssz;
@

