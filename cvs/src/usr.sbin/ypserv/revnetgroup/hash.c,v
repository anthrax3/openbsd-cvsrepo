head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.28
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.24
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.20
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2009.10.27.23.59.58;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.03.05.01.23;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.18.23.17.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.15.06.10.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.19.02.38.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.1;

1.1
date	97.04.15.22.06.11;	author maja;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/* $OpenBSD: hash.c,v 1.6 2006/04/03 05:01:23 deraadt Exp $ */
/*
 * Copyright (c) 1995
 *	Bill Paul <wpaul@@ctr.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$FreeBSD: hash.c,v 1.4 1997/02/22 14:22:01 peter Exp $
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include "hash.h"

/*
 * This hash function is stolen directly from the
 * Berkeley DB package. It already exists inside libc, but
 * it's declared static which prevents us from calling it
 * from here.
 */
/*
 * OZ's original sdbm hash
 */
static u_int32_t
hash(const void *keyarg, size_t len)
{
	const u_char *key;
	size_t loop;
	u_int32_t h;

#define HASHC   h = *key++ + 65599 * h

	h = 0;
	key = keyarg;
	if (len > 0) {
		loop = (len + 8 - 1) >> 3;

		switch (len & (8 - 1)) {
		case 0:
			do {
				HASHC;
				/* FALLTHROUGH */
		case 7:
				HASHC;
				/* FALLTHROUGH */
		case 6:
				HASHC;
				/* FALLTHROUGH */
		case 5:
				HASHC;
				/* FALLTHROUGH */
		case 4:
				HASHC;
				/* FALLTHROUGH */
		case 3:
				HASHC;
				/* FALLTHROUGH */
		case 2:
				HASHC;
				/* FALLTHROUGH */
		case 1:
				HASHC;
			} while (--loop);
		}
	}
	return (h);
}

/*
 * Generate a hash value for a given key (character string).
 * We mask off all but the lower 8 bits since our table array
 * can only hold 256 elements.
 */
static u_int32_t
hashkey(char *key)
{

	if (key == NULL)
		return (-1);
	return(hash(key, strlen(key)) & HASH_MASK);
}

/* Find an entry in the hash table (may be hanging off a linked list). */
char *
lookup(struct group_entry *table[], char *key)
{
	struct group_entry *cur;

	cur = table[hashkey(key)];

	while (cur) {
		if (!strcmp(cur->key, key))
			return(cur->data);
		cur = cur->next;
	}

	return(NULL);
}

/*
 * Store an entry in the main netgroup hash table. Here's how this
 * works: the table can only be so big when we initialize it (TABLESIZE)
 * but the number of netgroups in the /etc/netgroup file could easily be
 * much larger than the table. Since our hash values are adjusted to
 * never be greater than TABLESIZE too, this means it won't be long before
 * we find ourselves with two keys that hash to the same value.
 *
 * One way to deal with this is to malloc(2) a second table and start
 * doing indirection, but this is a pain in the butt and it's not worth
 * going to all that trouble for a dinky little program like this. Instead,
 * we turn each table entry into a linked list and simply link keys
 * with the same hash value together at the same index location within
 * the table.
 *
 * That's a lot of comment for such a small piece of code, isn't it.
 */
void
ngstore(struct group_entry *table[], char *key, char *data)
{
	struct group_entry *new;
	u_int32_t i;

	i = hashkey(key);

	new = malloc(sizeof(struct group_entry));
	new->key = strdup(key);
	new->data = strdup(data);
	new->next = table[i];
	table[i] = new;
}

/*
 * Store a group member entry and/or update its grouplist. This is
 * a bit more complicated than the previous function since we have to
 * maintain not only the hash table of group members, each group member
 * structure also has a linked list of groups hung off it. If handed
 * a member name that we haven't encountered before, we have to do
 * two things: add that member to the table (possibly hanging them
 * off the end of a linked list, as above), and add a group name to
 * the member's grouplist list. If we're handed a name that already has
 * an entry in the table, then we just have to do one thing, which is
 * to update its grouplist.
 */
void
mstore(struct member_entry *table[], char *key, char *data, char *domain)
{
	struct member_entry *cur, *new;
	struct grouplist *tmp,*p;
	u_int32_t i;

	i = hashkey(key);
	cur = table[i];

	tmp = malloc(sizeof(struct grouplist));
	tmp->groupname = strdup(data);
	tmp->next = NULL;

	/* Check if all we have to do is insert a new groupname. */
	while (cur) {
		if (!strcmp(cur->key, key) && !strcmp(cur->domain, domain)) {
			p = cur->groups;
			while (p) {
				if (!strcmp(p->groupname, data)) {
					free(tmp->groupname);
					free(tmp);
					return;
				}
				p = p->next;
			}
			tmp->next = cur->groups;
			cur->groups = tmp;
			return;
		}
		cur = cur->next;
	}

	/* Didn't find a match -- add the whole mess to the table. */
	new = malloc(sizeof(struct member_entry));
	new->key = strdup(key);
	new->domain = strdup(domain);
	new->groups = tmp;
	new->next = table[i];
	table[i] = new;
}
@


1.6
log
@spreading the lint love (very minimal things..)
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.5 2006/03/18 23:17:36 deraadt Exp $ */
a40 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: hash.c,v 1.5 2006/03/18 23:17:36 deraadt Exp $";
#endif
@


1.5
log
@do not leak on re-insert; ok pvalchev
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.4 2003/07/15 06:10:46 deraadt Exp $ */
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: hash.c,v 1.4 2003/07/15 06:10:46 deraadt Exp $";
d111 1
a111 1
	return(hash((void *)key, strlen(key)) & HASH_MASK);
d149 1
a149 1
store(struct group_entry *table[], char *key, char *data)
d156 1
a156 1
	new = (struct group_entry *)malloc(sizeof(struct group_entry));
d185 1
a185 1
	tmp = (struct grouplist *)malloc(sizeof(struct grouplist));
d209 1
a209 1
	new = (struct member_entry *)malloc(sizeof(struct member_entry));
@


1.4
log
@protos and repairs
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.3 2002/07/19 02:38:40 deraadt Exp $ */
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: hash.c,v 1.3 2002/07/19 02:38:40 deraadt Exp $";
d191 1
a191 1
		if (!strcmp(cur->key, key) && !strcmp(cur->domain,domain)) {
d194 3
a196 1
				if (!strcmp(p->groupname,data))
d198 1
@


1.3
log
@4344 lines of KNF diff
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.2 2002/03/14 16:44:25 mpech Exp $ */
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: hash.c,v 1.2 2002/03/14 16:44:25 mpech Exp $";
d55 1
a55 1
u_int32_t
d105 1
a105 1
u_int32_t
@


1.2
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: hash.c,v 1.1 1997/04/15 22:06:11 maja Exp $ */
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: hash.c,v 1.1 1997/04/15 22:06:11 maja Exp $";
d56 1
a56 3
hash(keyarg, len)
	const void *keyarg;
	size_t len;
d105 2
a106 2
u_int32_t hashkey(key)
	char *key;
d115 2
a116 3
char *lookup(table, key)
	struct group_entry *table[];
	char *key;
d148 2
a149 3
void store (table, key, data)
	struct group_entry *table[];
	char *key, *data;
a160 2

	return;
d175 2
a176 3
void mstore (table, key, data, domain)
	struct member_entry *table[];
	char *key, *data, *domain;
d192 2
a193 2
		  	p = cur->groups;
			while(p) {
a211 2

	return;
@


1.1
log
@Add revnetgroup from FreeBSD, written by Bill Paul <wpaul@@ctr.columbia.edu>.
Hacked a bit to generate output ala Sun (handle different domains). -moj
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d43 1
a43 1
static const char rcsid[] = "$OpenBSD$";
d58 1
a58 1
	register size_t len;
d60 3
a62 3
	register const u_char *key;
	register size_t loop;
	register u_int32_t h;
@

