head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.14
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.16
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2013.12.05.14.20.53;	author jca;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.06.11.36.26;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.58;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.20.11.01.31;	author sobrado;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.22.07.36.01;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.03.05.01.23;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.15.06.10.46;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.19.20.59.40;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.19.02.38.40;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.30.16.00.27;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.04.15.22.06.15;	author maja;	state Exp;
branches
	1.1.14.1;
next	;

1.1.14.1
date	2000.10.06.21.24.22;	author jason;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Provide a prototype for ngstore() and include <unistd.h> for getopt().
ok millert@@
@
text
@/* $OpenBSD: revnetgroup.c,v 1.10 2011/04/06 11:36:26 miod Exp $ */
/*
 * Copyright (c) 1995
 *	Bill Paul <wpaul@@ctr.columbia.edu>.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bill Paul.
 * 4. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * reverse netgroup map generator program
 *
 * Written by Bill Paul <wpaul@@ctr.columbia.edu>
 * Center for Telecommunications Research
 * Columbia University, New York City
 *
 *	$FreeBSD: revnetgroup.c,v 1.7 1997/03/28 15:48:15 imp Exp $
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <util.h>
#include <errno.h>
#include <err.h>
#include "hash.h"

/* Default location of netgroup file. */
char *netgroup = "/etc/netgroup";

/* Stored hash table version of 'forward' netgroup database. */
struct group_entry *gtable[TABLESIZE];

/*
 * Stored hash table of 'reverse' netgroup member database
 * which we will construct.
 */
struct member_entry *mtable[TABLESIZE];

static void
usage(void)
{
	fprintf (stderr,"usage: revnetgroup -h | -u [-f netgroup_file]\n");
	exit(1);
}

int
main(int argc, char *argv[])
{
	FILE *fp;
	char *readbuf;
	struct group_entry *gcur;
	struct member_entry *mcur;
	char *host, *user, *domain;
	extern char *optarg;
	int ch;
	char *key = NULL, *data = NULL;
	int hosts = -1, i;

	if (argc < 2)
		usage();

	while ((ch = getopt(argc, argv, "uhf:")) != -1) {
		switch (ch) {
		case 'u':
			if (hosts != -1) {
				warnx("please use only one of -h or -u");
				usage();
			}
			hosts = 0;
			break;
		case 'h':
			if (hosts != -1) {
				warnx("please use only one of -u or -h");
				usage();
			}
			hosts = 1;
			break;
		case 'f':
			netgroup = optarg;
			break;
		default:
			usage();
			break;
		}
	}

	if (hosts == -1)
		usage();

	if (strcmp(netgroup, "-")) {
		if ((fp = fopen(netgroup, "r")) == NULL) {
			err(1, "%s", netgroup);
		}
	} else {
		fp = stdin;
	}

	/* Stuff all the netgroup names and members into a hash table. */
	while ((readbuf = fparseln(fp, NULL, NULL, NULL, 0)) != NULL) {
		data = strpbrk(readbuf, " \t");
		if (data == NULL) {
			free(readbuf);
			continue;
		}
		*data = '\0';
		++data;
		key = readbuf;
		ngstore(gtable, key, data);
		free(readbuf);
	}

	fclose(fp);

	/*
	 * Find all members of each netgroup and keep track of which
	 * group they belong to.
	 */
	for (i = 0; i < TABLESIZE; i++) {
		gcur = gtable[i];
		while (gcur) {
			__setnetgrent(gcur->key);
			while (__getnetgrent(&host, &user, &domain) != 0) {
				if (hosts) {
					if (!(host && !strcmp(host,"-"))) {
						mstore(mtable,
						    host ? host : "*",
						    gcur->key,
						    domain ? domain : "*");
					}
				} else {
					if (!(user && !strcmp(user,"-"))) {
						mstore(mtable,
						    user ? user : "*",
						    gcur->key,
						    domain ? domain : "*");
					}
				}
			}
			gcur = gcur->next;
		}
	}

	/* Release resources used by the netgroup parser code. */
	__endnetgrent();

	/* Spew out the results. */
	for (i = 0; i < TABLESIZE; i++) {
		mcur = mtable[i];
		while (mcur) {
			struct grouplist *tmp;
			printf ("%s.%s\t", mcur->key, mcur->domain);
			tmp = mcur->groups;
			while (tmp) {
				printf ("%s", tmp->groupname);
				tmp = tmp->next;
				if (tmp)
					printf(",");
			}
			mcur = mcur->next;
			printf ("\n");
		}
	}

	/* Let the OS free all our resources. */
	exit(0);
}
@


1.10
log
@Avoid using NULL in non-pointer contexts: use 0 for integer values and '\0'
for chars.
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.9 2009/10/27 23:59:58 deraadt Exp $ */
d45 1
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.8 2009/10/20 11:01:31 sobrado Exp $ */
d145 1
a145 1
			while (__getnetgrent(&host, &user, &domain) != NULL) {
@


1.8
log
@the flags -h and -u are mutually exclusive; we do not need enclosing
-f in brackets in the list of options; while here, sort the options
in the manual page.

jmc@@ greatly improved the diff fixing a few additional bits on the
manual page.

ok jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.7 2006/11/22 07:36:01 ray Exp $ */
a48 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.7 2006/11/22 07:36:01 ray Exp $";
#endif
@


1.7
log
@Outsource fgets line reading, newline continuation, and comment
handling to fparseln.  Fixes out of bounds array access for strings
of length 0 or 1.

OK moritz@@.
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.6 2006/04/03 05:01:23 deraadt Exp $ */
d51 1
a51 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.6 2006/04/03 05:01:23 deraadt Exp $";
d69 1
a69 1
	fprintf (stderr,"usage: revnetgroup -u|-h [-f netgroup file]\n");
d93 1
a93 1
				warnx("please use only one of -u or -h");
@


1.6
log
@spreading the lint love (very minimal things..)
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.5 2003/07/15 06:10:46 deraadt Exp $ */
d45 1
d51 1
a51 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.5 2003/07/15 06:10:46 deraadt Exp $";
d77 1
a77 1
	char readbuf[LINSIZ];
d126 4
a129 2
	while (fgets(readbuf, LINSIZ, fp)) {
		if (readbuf[0] == '#')
a130 4
		/* handle backslash line continuations */
		while (readbuf[strlen(readbuf) - 2] == '\\') {
			fgets((char *)&readbuf[strlen(readbuf) - 2],
			    sizeof(readbuf) - strlen(readbuf), fp);
d132 3
a134 5
		data = NULL;
		if ((data = (char *)(strpbrk(readbuf, " \t") + 1)) < (char *)2)
			continue;
		key = (char *)&readbuf;
		*(data - 1) = '\0';
d136 1
@


1.5
log
@protos and repairs
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.4 2002/07/19 20:59:40 deraadt Exp $ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.4 2002/07/19 20:59:40 deraadt Exp $";
d138 1
a138 1
		store(gtable, key, data);
@


1.4
log
@bunch more careful tweaks
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.3 2002/07/19 02:38:40 deraadt Exp $ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.3 2002/07/19 02:38:40 deraadt Exp $";
d65 1
a65 1
void
@


1.3
log
@4344 lines of KNF diff
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.2 2000/06/30 16:00:27 millert Exp $ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.2 2000/06/30 16:00:27 millert Exp $";
d66 1
a66 1
usage(char *prog)
d68 1
a68 1
	fprintf (stderr,"usage: %s -u|-h [-f netgroup file]\n",prog);
d86 1
a86 1
		usage(argv[0]);
d93 1
a93 1
				usage(argv[0]);
d100 1
a100 1
				usage(argv[0]);
d108 1
a108 1
			usage(argv[0]);
d114 1
a114 1
		usage(argv[0]);
@


1.2
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.1 1997/04/15 22:06:15 maja Exp $ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.1 1997/04/15 22:06:15 maja Exp $";
d65 2
a66 2
void usage(prog)
char *prog;
a71 2
extern char *optarg;

d73 1
a73 3
main(argc, argv)
	int argc;
	char *argv[];
d80 1
d89 1
a89 1
		switch(ch) {
d129 1
a129 1
		while(readbuf[strlen(readbuf) - 2] == '\\') {
d131 1
a131 1
					sizeof(readbuf) - strlen(readbuf), fp);
d149 1
a149 1
		while(gcur) {
d151 1
a151 1
			while(__getnetgrent(&host, &user, &domain) != NULL) {
d155 3
a157 3
						       host ? host : "*",
						       gcur->key,
						       domain ? domain : "*");
d162 3
a164 3
						       user ? user : "*",
						       gcur->key,
						       domain ? domain : "*");
d178 1
a178 1
		while(mcur) {
d182 1
a182 1
			while(tmp) {
@


1.1
log
@Add revnetgroup from FreeBSD, written by Bill Paul <wpaul@@ctr.columbia.edu>.
Hacked a bit to generate output ala Sun (handle different domains). -moj
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD$";
d121 1
a121 1
			err(1,netgroup);
@


1.1.14.1
log
@Pull in patch from current:
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/* $OpenBSD: revnetgroup.c,v 1.2 2000/06/30 16:00:27 millert Exp $ */
d50 1
a50 1
static const char rcsid[] = "$OpenBSD: revnetgroup.c,v 1.2 2000/06/30 16:00:27 millert Exp $";
d121 1
a121 1
			err(1, "%s", netgroup);
@


