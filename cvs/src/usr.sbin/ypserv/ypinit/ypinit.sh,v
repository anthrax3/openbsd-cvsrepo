head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.32
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.30
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.26
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.28
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.20
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.24
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.22
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.18
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.16
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.14
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.12
	OPENBSD_5_0:1.13.0.10
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.8
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.12
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.10
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.11.0.8
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@# @;


1.13
date	2009.04.04.12.49.10;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.13.13.16.13;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.30.20.07.24;	author hugh;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.19.02.38.40;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.23.13.58.59;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.18.18.50.45;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.01.18.20.48.48;	author maja;	state Exp;
branches;
next	1.6;

1.6
date	97.10.09.23.41.57;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.04.24.18.30.44;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.04.20.10.00.27;	author maja;	state Exp;
branches;
next	1.3;

1.3
date	96.03.02.03.01.40;	author dm;	state Exp;
branches;
next	1.2;

1.2
date	95.11.08.00.01.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.11.01.16.56.29;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Do not run make in /var/yp at the end of ypinit -m.
That way, you can edit the new domain Makefile before using it,
in particular to change variables like DIR and UNSECURE.

from ajacoutot@@ with message tweaks and documentation updates by myself
"I like this" otto@@
@
text
@#!/bin/sh
#	$Id: ypinit.sh,v 1.12 2005/05/13 13:16:13 jmc Exp $
#
# ypinit.sh - setup an master or slave server.
#
DOMAINNAME=/bin/domainname
HOSTNAME=/bin/hostname
YPWHICH=/usr/bin/ypwhich
YPXFR=/usr/sbin/ypxfr
YP_DIR=/var/yp
MAKEDBM=/usr/sbin/makedbm
ERROR_EXISTS="NO"
umask 077

#set -xv

ERROR=USAGE				# assume usage error

if [ $# -eq 1 ]
then
	if [ $1 = "-m" ]		# ypinit -m
	then
		DOMAIN=`${DOMAINNAME}`
		SERVERTYPE=MASTER
		ERROR=
	fi

	if [ $1 = "-u" ]		# ypinit -u
	then
		DOMAIN=`${DOMAINNAME}`
		SERVERTYPE=UPDATE
		ERROR=
	fi
fi

if [ $# -eq 2 ]
then
	if [ $1 = "-m" ]		# ypinit -m domainname
	then
		DOMAIN=${2}
		SERVERTYPE=MASTER
		ERROR=
	fi

	if [ $1 = "-s" ]		# ypinit -s master_server
	then
		DOMAIN=`${DOMAINNAME}`
		SERVERTYPE=SLAVE
		MASTER=${2}
		ERROR=
	fi

	if [ $1 = "-u" ]		# ypinit -u domainname
	then
		DOMAIN=${2}
		SERVERTYPE=UPDATE
		ERROR=
	fi
fi

if [ $# -eq 3 ]
then
	if [ $1 = "-s" ]		# ypinit -s master_server domainname
	then
		DOMAIN=${3}
		SERVERTYPE=SLAVE
		MASTER=${2}
		ERROR=
	fi
fi

if [ "${ERROR}" = "USAGE" ]; then
	cat << \__usage 1>&2
usage: ypinit -m [domainname]
       ypinit -s master_server [domainname]
       ypinit -u [domainname]

The `-m' flag builds a master YP server, and the `-s' flag builds
a slave YP server.  When building a slave YP server, `master_server'
must be an existing, reachable YP server.
The `-u' is for updating the ypservers map on a master server.
__usage

	exit 1
fi

# Check if domainname is set, don't accept an empty domainname
if [ -z "${DOMAIN}" ]; then
	cat << \__no_domain 1>&2
The local host's YP domain name has not been set.  Please set it with
the domainname(1) command or pass the domain as an argument to ypinit(8).
__no_domain

	exit 1
fi

# Check if hostname is set, don't accept an empty hostname
HOST=`${HOSTNAME}`
if [ -z "${HOST}" ]; then
	cat << \__no_hostname 1>&2
The local host's hostname has not been set.  Please set it with the
hostname(1) command.
__no_hostname

	exit 1
fi

# Check if we have contact with master.
if [ "${SERVERTYPE}" = "SLAVE" ];
then
	COUNT=`${YPWHICH} -d ${DOMAIN} -h ${MASTER} -m 2>/dev/null | grep -i ${MASTER} | wc -l | tr -d " "`
	if [ "$COUNT" = "0" ]
	then
		echo "Can't enumerate maps from ${MASTER}. Please check that it is running." 1>&2
		exit 1
	fi
fi

# Check if user is root
ID=`id -u`
if [ "${ID}" != "0" ]; then
	echo "You have to be the superuser to run this.  Please login as root." 1>&2
	exit 1
fi

# Check if the YP directory exists.

if [ ! -d ${YP_DIR} -o -f ${YP_DIR} ]
then
	echo "The directory ${YP_DIR} doesn't exist.  Restore it from the distribution." 1>&2
	exit 1

fi

echo -n "Server Type: ${SERVERTYPE} Domain: ${DOMAIN}"
if [ "${SERVERTYPE}" = "SLAVE" ]; then
	echo -n " Master: ${MASTER}"
fi
echo ""

if [ "${SERVERTYPE}" != "UPDATE" ];
then
	cat << \__notice1

Creating an YP server will require that you answer a few questions.
Questions will all be asked at the beginning of the procedure.

__notice1

	echo -n "Do you want this procedure to quit on non-fatal errors? [y/n: n]  "
	read DOEXIT

	case ${DOEXIT} in
	y*|Y*)
		ERROR_EXIT="YES"
		;;

	*)	ERROR_EXIT="NO"
		echo ""
		echo "Ok, please remember to go back and redo manually whatever fails."
		echo "If you don't, something might not work. "
		;;
	esac

	if [ -d "${YP_DIR}/${DOMAIN}" ]; then
		echo ""
		echo -n "Can we destroy the existing ${YP_DIR}/${DOMAIN} and its contents? [y/n: n]  "
		read KILL

		ERROR=
		case ${KILL} in
		y*|Y*)
			ERROR="DELETE"
			;;

		*)	ERROR=
			;;
		esac

		if [ "${ERROR}" = "DELETE" ]; then
			if ! rm -rf ${YP_DIR}/${DOMAIN}; then
				echo "Can't clean up old directory ${YP_DIR}/${DOMAIN}." 1>&2
				exit 1
			fi
		else
			echo "OK, please clean it up by hand and start again.  Bye"
			exit 0
		fi
	fi

	if ! mkdir "${YP_DIR}/${DOMAIN}"; then
		echo "Can't make new directory ${YP_DIR}/${DOMAIN}." 1>&2
		exit 1
	fi
fi

if [ "${SERVERTYPE}" = "MASTER" ];
then

	if [ ! -f ${YP_DIR}/Makefile ]
	then
		if [ ! -f ${YP_DIR}/Makefile.main ]
		then
			echo "Can't find ${YP_DIR}/Makefile.main. " 1>&2
			exit 1
		fi
		cp ${YP_DIR}/Makefile.main ${YP_DIR}/Makefile
	fi

	SUBDIR=`grep "^SUBDIR=" ${YP_DIR}/Makefile`

	if [ -z "${SUBDIR}" ]
	then
		echo "Can't find line starting with 'SUBDIR=' in ${YP_DIR}/Makefile. " 1>&2
		exit 1
	fi

	NEWSUBDIR="SUBDIR="
	for DIR in `echo ${SUBDIR} | cut -c8-255`; do
		if [ ${DIR} != ${DOMAIN} ]; then
			NEWSUBDIR="${NEWSUBDIR} ${DIR}"
		fi
	done
	NEWSUBDIR="${NEWSUBDIR} ${DOMAIN}"

	if [ -f ${YP_DIR}/Makefile.tmp ]; then
		rm ${YP_DIR}/Makefile.tmp
	fi

	mv ${YP_DIR}/Makefile ${YP_DIR}/Makefile.tmp
	sed -e "s/^${SUBDIR}/${NEWSUBDIR}/" ${YP_DIR}/Makefile.tmp > \
	    ${YP_DIR}/Makefile
	rm ${YP_DIR}/Makefile.tmp

	if [ ! -f ${YP_DIR}/Makefile.yp ]; then
		echo "Can't find ${YP_DIR}/Makefile.yp. " 1>&2
		exit 1
	fi

	cp ${YP_DIR}/Makefile.yp ${YP_DIR}/${DOMAIN}/Makefile

fi

if [ "${SERVERTYPE}" = "SLAVE" ];
then

	echo "There will be no further questions. The remainder of the procedure"
	echo "should take a few minutes, to copy the databases from ${MASTER}."

	for MAP in `${YPWHICH} -d ${DOMAIN} -h ${MASTER} -m | cut -d\  -f1`
	do
		echo "Transferring ${MAP}..."
		if ! ${YPXFR} -h ${MASTER} -c -d ${DOMAIN} ${MAP}; then
			echo "Can't transfer map ${MAP}." 1>&2
			ERROR_EXISTS="YES"
			if [ "${ERROR_EXIT}" = "YES" ]; then
				exit 1
			fi
		fi
	done

	echo ""
	if [ "${ERROR_EXISTS}" = "YES"  ]; then
		echo "${HOST} has been set up as a YP slave server with errors. " 1>&2
		echo "Please remember to fix any problems that occurred." 1>&2
	else
		echo "${HOST} has been set up as a YP slave server without any errors. "
	fi

	echo "Don't forget to update map ypservers on ${MASTER}."
	exit 0
fi

LIST_OK="NO"

while [ "${LIST_OK}" = "NO" ];
do
	if [ "${SERVERTYPE}" = "MASTER" ];
	then
		HOST_LIST="${HOST}"
		echo ""
		echo "At this point, we have to construct a list of this domain's YP servers."
		echo "${HOST} is already known as master server."
		echo "Please continue to add any slave servers, one per line. When you are"
		echo "done with the list, type a <control D>."
		echo "	master server   :  ${HOST}"
	fi

	if [ "${SERVERTYPE}" = "UPDATE" ];
	then
		HOST_LIST="${HOST}"
		NEW_LIST=""
		MASTER_NAME=""
		SHORT_HOST=`echo ${HOST} | cut -d. -f1`
		if [ -f ${YP_DIR}/${DOMAIN}/ypservers.db ];
		then
			for srv in `${MAKEDBM} -u ${YP_DIR}/${DOMAIN}/ypservers | grep -v "^YP" | tr "\t" " " | cut -d\  -f1`;
			do
				short_srv=`echo ${srv} | cut -d. -f1`
				if [ "${SHORT_HOST}" != "${short_srv}" ]
				then
					if [ "${NEW_LIST}" = "" ];
					then
						NEW_LIST="${srv}"
					else
						NEW_LIST="${NEW_LIST} ${srv}"
					fi
				fi
			done;
			MASTER_NAME=`${MAKEDBM} -u ${YP_DIR}/${DOMAIN}/ypservers | grep "^YP_MASTER_NAME" | tr "\t" " " | cut -d\  -f2`
		fi
		echo ""
		echo "Update the list of hosts running YP servers in domain ${DOMAIN}."
		echo "Master for this domain is ${MASTER_NAME}."
		echo ""
		echo "First verify old servers, type \\\\ to remove a server."
		echo "Then add new servers, one per line. When done type a <control D>."
		echo ""
		echo "	master server   :  ${HOST}"
		if [ "${NEW_LIST}" != "" ]; then
			for node in $NEW_LIST; do
				echo -n "	verify host     : [${node}] "
				read verify
				if [ "${verify}" != "\\" ]; then
					HOST_LIST="${HOST_LIST} ${node}"
				fi
			done;
		fi
	fi

	echo -n "	next host to add:  "

	while read h
	do
		echo -n "	next host to add:  "
		HOST_LIST="${HOST_LIST} ${h}"
	done

	echo ""
	echo "The current list of NIS servers looks like this:"
	echo ""

	for h in `echo ${HOST_LIST}`;
	do
		echo ${h}
	done

	echo ""
	echo -n "Is this correct?  [y/n: y]  "
	read hlist_ok

	case $hlist_ok in
	n*)	echo "Let's try the whole thing again...";;
	N*)	echo "Let's try the whole thing again...";;
	*)	LIST_OK="YES";;
	esac

done

echo "Building ${YP_DIR}/${DOMAIN}/ypservers..."
for host in ${HOST_LIST};
do
	echo "${host} ${host}"
done | ${MAKEDBM} - ${YP_DIR}/${DOMAIN}/ypservers

if [ $? -ne 0 ]; then
	echo "" 1>&2
	echo "Couldn't build yp data base ${YP_DIR}/${DOMAIN}/ypservers." 1>&2
	ERROR_EXISTS="YES"
	if [ "${ERROR_EXIT}" = "YES" ]; then
		exit 1
	fi
fi

if [ "${SERVERTYPE}" = "MASTER" ]; then
	echo "${HOST} has been set up as a YP master server."
	echo "Edit ${YP_DIR}/${DOMAIN}/Makefile to suit your needs."
	echo "After that, run \`make' in ${YP_DIR}."
fi
@


1.12
log
@some Xr's from jason ackley;
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.11 2002/08/30 20:07:24 hugh Exp $
d264 2
a265 2
		echo "${HOST} has been setup as an YP slave server with errors. " 1>&2
		echo "Please remember fix any problem that occurred." 1>&2
d267 1
a267 1
		echo "${HOST} has been setup as an YP slave server without any errors. "
d376 3
a378 22
	CUR_PWD=`pwd`
	cd ${YP_DIR}/${DOMAIN}
	echo "Running ${YP_DIR}/${DOMAIN}/Makefile..."
	if ! make NOPUSH=1; then
		echo "" 1>&2
		echo "Error running Makefile." 1>&2
		ERROR_EXISTS="YES"
		if [ "${ERROR_EXIT}" = "YES" ]; then
			exit 1
		fi
	fi

	cd ${CUR_PWD}

	echo ""
	if [ "${ERROR_EXISTS}" = "YES" ]; then
		echo "${HOST} has been setup as an YP master server with errors. " 1>&2
		echo "Please remember fix any problem that occurred." 1>&2
	else
		echo "${HOST} has been setup as an YP master server without any errors. "
	fi

@


1.11
log
@domains -> domain's
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.10 2002/07/19 02:38:40 deraadt Exp $
d91 1
a91 1
the domainname(8) command or pass the domain as an argument to ypinit(8).
d102 1
a102 1
hostname(8) command.
@


1.10
log
@4344 lines of KNF diff
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.9 2002/03/23 13:58:59 deraadt Exp $
d282 1
a282 1
		echo "At this point, we have to construct a list of this domains YP servers."
@


1.9
log
@\\ not \.  needs doubling.  wngdn@@src.uchicago.edu, pr 2475
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.8 2000/08/18 18:50:45 deraadt Exp $
d166 1
a166 1
		echo ""	
a188 1
	
d211 1
a211 1
	
d226 1
a226 1
	if [ -f ${YP_DIR}/Makefile.tmp ]; then 
a277 1
	
d316 2
a317 2
		echo "First verify old servers, type \\\\ to remove a server." 
		echo "Then add new servers, one per line. When done type a <control D>." 
d370 1
a370 1
	if [ "${ERROR_EXIT}" = "YES" ]; then 
a375 1
	
d383 1
a383 1
		if [ "${ERROR_EXIT}" = "YES" ]; then 
@


1.8
log
@spelling
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.7 1998/01/18 20:48:48 maja Exp $
d318 1
a318 1
		echo "First verify old servers, type \\ to remove a server." 
@


1.7
log
@Make sure ypinit asks the master server for known maps.
Bug reported by both theo and chuck cranor. -moj
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.6 1997/10/09 23:41:57 deraadt Exp $
d253 1
a253 1
		echo "Transfering ${MAP}..."
@


1.6
log
@umask 077
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.5 1997/04/24 18:30:44 deraadt Exp $
d111 1
a111 1
	COUNT=`${YPWHICH} -d ${DOMAIN} -m 2>/dev/null | grep -i ${MASTER} | wc -l | tr -d " "`
d251 1
a251 1
	for MAP in `${YPWHICH} -d ${DOMAIN} -m | cut -d\  -f1`
d401 1
a401 1
fi@


1.5
log
@extra " in -s initialization
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.4 1997/04/20 10:00:27 maja Exp $
d13 1
@


1.4
log
@Added man page, support for amd.home and ypservers.
Integrated some code from ypinit in NetBSD (thorpej@@netbsd.org).
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.3 1996/03/02 03:01:40 dm Exp $
d110 1
a110 1
	COUNT=`${YPWHICH} -d ${DOMAIN} -m 2>/dev/null | grep -i "${MASTER} | wc -l | tr -d " "`
@


1.3
log
@Added in stuff from 960121.  Fixed several bugs in ypxfr.
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.5 1996/01/21 20:22:53 moj Exp $
d11 2
d26 7
d43 1
d51 7
d71 12
a82 9
if [ "${ERROR}" = "USAGE" ]
then
	echo "usage: ypinit -m [domainname]" 1>&2
	echo "       ypinit -s master_server [domainname]" 1>&2
	echo "" 1>&2
	echo "\
where -m is used to build a master YP server data base, and -s is used for" 1>&2
	echo "\
a slave data base.  master_server must be an existing reachable YP server." 1>&2
d87 5
a92 3
if [ -z "${DOMAIN}" ]
then
	echo "The local host's domain name hasn't been set. Please set it." 1>&2
d97 6
d104 2
a105 1
HOST=`${HOSTNAME}`
d107 2
a108 1
if [ -z "${HOST}" ]
d110 12
a121 1
	echo "The local host's name hasn't been set. Please set it." 1>&2
d129 1
a129 2
	echo "The directory ${YP_DIR} doesn't exist. Restore it from the distribution." 1>&2
	echo "(Or move ${YP_DIR}.no to ${YP_DIR} if YP has not been activated before." 1>&2
d134 9
a142 1
#echo "Server Type: ${SERVERTYPE} Domain: ${DOMAIN} Master: ${MASTER}"
d144 2
a145 3
echo "Installing the YP data base will require that you answer a few questions."
echo "Questions will all be asked at the beginning of the procedure."
echo ""
d147 1
a147 4
if [ -d ${YP_DIR}/${DOMAIN} ]; then
	
	echo -n "Can we destroy the existing ${YP_DIR}/${DOMAIN} and its contents? [y/n: n]  "
	read KILL
d149 13
a161 5
	ERROR=
	case ${KILL} in
	y*)	ERROR=DELETE;;
	Y*)	ERROR=DELETE;;
	*)	ERROR=;;
d164 4
a167 5
	if [ -z "${ERROR}" ]
	then
		echo "OK, please clean it up by hand and start again.  Bye"
		exit 0
	fi
d169 18
a186 8
	if [ "${ERROR}" = "DELETE" ]
	then
		rm -r -f ${YP_DIR}/${DOMAIN}
		
		if [ $?  -ne 0 ]
		then
			echo "Can't clean up old directory ${YP_DIR}/${DOMAIN}.  Fatal error." 1>&2
			exit 1
d188 1
d191 4
a194 8
fi

mkdir ${YP_DIR}/${DOMAIN}

if [ $?  -ne 0 ]
then
	echo "Can't make new directory ${YP_DIR}/${DOMAIN}.  Fatal error." 1>&2
	exit 1
d204 1
a204 1
			echo "Can't find ${YP_DIR}/Makefile.main. " 1>&2
d214 1
a214 1
		echo "Can't find line starting with 'SUBDIR=' in ${YP_DIR}/Makefile. " 1>&2
d219 2
a220 4
	for DIR in `echo ${SUBDIR} | cut -c8-255`
	do
		if [ ${DIR} != ${DOMAIN} ]
		then
d226 1
a226 2
	if [ -f ${YP_DIR}/Makefile.tmp ]
	then 
d231 2
a232 1
	sed -e "s/^${SUBDIR}/${NEWSUBDIR}/" ${YP_DIR}/Makefile.tmp > ${YP_DIR}/Makefile
d235 2
a236 3
	if [ ! -f ${YP_DIR}/Makefile.yp ]
	then
		echo "Can't find ${YP_DIR}/Makefile.yp. " 1>&2
d247 2
a248 1
	echo ""
d253 36
a288 1
		${YPXFR} -h ${MASTER} -c -d ${DOMAIN} ${MAP}
d290 7
a296 1
		if [ $?  -ne 0 ]
d298 31
a328 2
			echo "Can't transfer map ${MAP}." 1>&2
			exit 1
d330 17
d350 24
a373 2
	echo "Don't forget to update map ypservers on ${MASTER}."
	exit 0
d375 26
@


1.2
log
@use /var/yp.no
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.1 1995/11/01 16:56:29 deraadt Exp $
d47 2
a48 2
		DOMAIN=`${3}`
		SERVERTYPE=MASTER
a65 9
# Just allow master server for now!

#if [ "${SERVERTYPE}" != "MASTER" ];
#then
#	echo "Sorry, only master server is implemented. Support for slave server" 1>&2
#	echo "needs support for map transfer which isn't implemented yet." 1>&2
#	exit 1
#fi

d191 3
a193 1
	
d196 1
d205 4
@


1.1
log
@+ full set of ypserv tools that compile
@
text
@d2 1
a2 1
#	$Id: ypinit.sh,v 1.2 1995/01/29 21:55:25 moj Exp root $
d98 1
@
