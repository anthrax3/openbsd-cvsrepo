head	1.8;
access;
symbols
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.20
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.18
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.16
	OPENBSD_2_8:1.5.0.14
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.12
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2003.02.13.06.07.41;	author maja;	state dead;
branches;
next	1.7;

1.7
date	2002.09.06.19.13.52;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.19.02.38.40;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.20.12.31;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	97.05.01.22.14.47;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.03.30.20.51.19;	author maja;	state Exp;
branches;
next	1.2;

1.2
date	96.01.20.00.40.53;	author chuck;	state Exp;
branches;
next	1.1;

1.1
date	95.11.01.16.56.33;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@This files are not used anymore since librpcsvc is fixed. -moj
@
text
@/* $OpenBSD: yp.h,v 1.7 2002/09/06 19:13:52 deraadt Exp $ */

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _YP_H_RPCGEN
#define _YP_H_RPCGEN

#include <rpc/rpc.h>

#define YPMAXRECORD 1024
#define YPMAXDOMAIN 64
#define YPMAXMAP 64
#define YPMAXPEER 64

enum ypstat {
	YP_TRUE = 1,
	YP_NOMORE = 2,
	YP_FALSE = 0,
	YP_NOMAP = -1,
	YP_NODOM = -2,
	YP_NOKEY = -3,
	YP_BADOP = -4,
	YP_BADDB = -5,
	YP_YPERR = -6,
	YP_BADARGS = -7,
	YP_VERS = -8
};
typedef enum ypstat ypstat;
#ifdef __cplusplus
extern "C" bool_t xdr_ypstat(XDR *, ypstat *);
#elif defined(__STDC__)
extern  bool_t xdr_ypstat(XDR *, ypstat *);
#else /* Old Style C */
bool_t xdr_ypstat();
#endif /* Old Style C */


enum ypxfrstat {
	YPXFR_SUCC = 1,
	YPXFR_AGE = 2,
	YPXFR_NOMAP = -1,
	YPXFR_NODOM = -2,
	YPXFR_RSRC = -3,
	YPXFR_RPC = -4,
	YPXFR_MADDR = -5,
	YPXFR_YPERR = -6,
	YPXFR_BADARGS = -7,
	YPXFR_DBM = -8,
	YPXFR_FILE = -9,
	YPXFR_SKEW = -10,
	YPXFR_CLEAR = -11,
	YPXFR_FORCE = -12,
	YPXFR_XFRERR = -13,
	YPXFR_REFUSED = -14
};
typedef enum ypxfrstat ypxfrstat;
#ifdef __cplusplus
extern "C" bool_t xdr_ypxfrstat(XDR *, ypxfrstat *);
#elif defined(__STDC__)
extern  bool_t xdr_ypxfrstat(XDR *, ypxfrstat *);
#else /* Old Style C */
bool_t xdr_ypxfrstat();
#endif /* Old Style C */


typedef char *domainname;
#ifdef __cplusplus
extern "C" bool_t xdr_domainname(XDR *, domainname *);
#elif defined(__STDC__)
extern  bool_t xdr_domainname(XDR *, domainname *);
#else /* Old Style C */
bool_t xdr_domainname();
#endif /* Old Style C */


typedef char *mapname;
#ifdef __cplusplus
extern "C" bool_t xdr_mapname(XDR *, mapname *);
#elif defined(__STDC__)
extern  bool_t xdr_mapname(XDR *, mapname *);
#else /* Old Style C */
bool_t xdr_mapname();
#endif /* Old Style C */


typedef char *peername;
#ifdef __cplusplus
extern "C" bool_t xdr_peername(XDR *, peername *);
#elif defined(__STDC__)
extern  bool_t xdr_peername(XDR *, peername *);
#else /* Old Style C */
bool_t xdr_peername();
#endif /* Old Style C */


typedef struct {
	u_int keydat_len;
	char *keydat_val;
} keydat;
#ifdef __cplusplus
extern "C" bool_t xdr_keydat(XDR *, keydat *);
#elif defined(__STDC__)
extern  bool_t xdr_keydat(XDR *, keydat *);
#else /* Old Style C */
bool_t xdr_keydat();
#endif /* Old Style C */


typedef struct {
	u_int valdat_len;
	char *valdat_val;
} valdat;
#ifdef __cplusplus
extern "C" bool_t xdr_valdat(XDR *, valdat *);
#elif defined(__STDC__)
extern  bool_t xdr_valdat(XDR *, valdat *);
#else /* Old Style C */
bool_t xdr_valdat();
#endif /* Old Style C */


struct ypmap_parms {
	domainname domain;
	mapname map;
	u_int32_t ordernum;
	peername peer;
};
typedef struct ypmap_parms ypmap_parms;
#ifdef __cplusplus
extern "C" bool_t xdr_ypmap_parms(XDR *, ypmap_parms *);
#elif defined(__STDC__)
extern  bool_t xdr_ypmap_parms(XDR *, ypmap_parms *);
#else /* Old Style C */
bool_t xdr_ypmap_parms();
#endif /* Old Style C */


struct ypreq_key {
	domainname domain;
	mapname map;
	keydat key;
};
typedef struct ypreq_key ypreq_key;
#ifdef __cplusplus
extern "C" bool_t xdr_ypreq_key(XDR *, ypreq_key *);
#elif defined(__STDC__)
extern  bool_t xdr_ypreq_key(XDR *, ypreq_key *);
#else /* Old Style C */
bool_t xdr_ypreq_key();
#endif /* Old Style C */


struct ypreq_nokey {
	domainname domain;
	mapname map;
};
typedef struct ypreq_nokey ypreq_nokey;
#ifdef __cplusplus
extern "C" bool_t xdr_ypreq_nokey(XDR *, ypreq_nokey *);
#elif defined(__STDC__)
extern  bool_t xdr_ypreq_nokey(XDR *, ypreq_nokey *);
#else /* Old Style C */
bool_t xdr_ypreq_nokey();
#endif /* Old Style C */


struct ypreq_xfr {
	ypmap_parms map_parms;
	u_int transid;
	u_int prog;
	u_int port;
};
typedef struct ypreq_xfr ypreq_xfr;
#ifdef __cplusplus
extern "C" bool_t xdr_ypreq_xfr(XDR *, ypreq_xfr *);
#elif defined(__STDC__)
extern  bool_t xdr_ypreq_xfr(XDR *, ypreq_xfr *);
#else /* Old Style C */
bool_t xdr_ypreq_xfr();
#endif /* Old Style C */


struct ypresp_val {
	ypstat stat;
	valdat val;
};
typedef struct ypresp_val ypresp_val;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_val(XDR *, ypresp_val *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_val(XDR *, ypresp_val *);
#else /* Old Style C */
bool_t xdr_ypresp_val();
#endif /* Old Style C */


struct ypresp_key_val {
	ypstat stat;
	keydat key;
	valdat val;
};
typedef struct ypresp_key_val ypresp_key_val;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_key_val(XDR *, ypresp_key_val *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_key_val(XDR *, ypresp_key_val *);
#else /* Old Style C */
bool_t xdr_ypresp_key_val();
#endif /* Old Style C */


struct ypresp_master {
	ypstat stat;
	peername peer;
};
typedef struct ypresp_master ypresp_master;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_master(XDR *, ypresp_master *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_master(XDR *, ypresp_master *);
#else /* Old Style C */
bool_t xdr_ypresp_master();
#endif /* Old Style C */


struct ypresp_order {
	ypstat stat;
	u_int32_t ordernum;
};
typedef struct ypresp_order ypresp_order;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_order(XDR *, ypresp_order *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_order(XDR *, ypresp_order *);
#else /* Old Style C */
bool_t xdr_ypresp_order();
#endif /* Old Style C */


struct ypresp_all {
	bool_t more;
	union {
		ypresp_key_val val;
	} ypresp_all_u;
};
typedef struct ypresp_all ypresp_all;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_all(XDR *, ypresp_all *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_all(XDR *, ypresp_all *);
#else /* Old Style C */
bool_t xdr_ypresp_all();
#endif /* Old Style C */


struct ypresp_xfr {
	u_int transid;
	ypxfrstat xfrstat;
};
typedef struct ypresp_xfr ypresp_xfr;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_xfr(XDR *, ypresp_xfr *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_xfr(XDR *, ypresp_xfr *);
#else /* Old Style C */
bool_t xdr_ypresp_xfr();
#endif /* Old Style C */


struct ypmaplist {
	mapname map;
	struct ypmaplist *next;
};
typedef struct ypmaplist ypmaplist;
#ifdef __cplusplus
extern "C" bool_t xdr_ypmaplist(XDR *, ypmaplist *);
#elif defined(__STDC__)
extern  bool_t xdr_ypmaplist(XDR *, ypmaplist *);
#else /* Old Style C */
bool_t xdr_ypmaplist();
#endif /* Old Style C */


struct ypresp_maplist {
	ypstat stat;
	ypmaplist *maps;
};
typedef struct ypresp_maplist ypresp_maplist;
#ifdef __cplusplus
extern "C" bool_t xdr_ypresp_maplist(XDR *, ypresp_maplist *);
#elif defined(__STDC__)
extern  bool_t xdr_ypresp_maplist(XDR *, ypresp_maplist *);
#else /* Old Style C */
bool_t xdr_ypresp_maplist();
#endif /* Old Style C */


enum yppush_status {
	YPPUSH_SUCC = 1,
	YPPUSH_AGE = 2,
	YPPUSH_NOMAP = -1,
	YPPUSH_NODOM = -2,
	YPPUSH_RSRC = -3,
	YPPUSH_RPC = -4,
	YPPUSH_MADDR = -5,
	YPPUSH_YPERR = -6,
	YPPUSH_BADARGS = -7,
	YPPUSH_DBM = -8,
	YPPUSH_FILE = -9,
	YPPUSH_SKEW = -10,
	YPPUSH_CLEAR = -11,
	YPPUSH_FORCE = -12,
	YPPUSH_XFRERR = -13,
	YPPUSH_REFUSED = -14
};
typedef enum yppush_status yppush_status;
#ifdef __cplusplus
extern "C" bool_t xdr_yppush_status(XDR *, yppush_status *);
#elif defined(__STDC__)
extern  bool_t xdr_yppush_status(XDR *, yppush_status *);
#else /* Old Style C */
bool_t xdr_yppush_status();
#endif /* Old Style C */


struct yppushresp_xfr {
	u_int transid;
	yppush_status status;
};
typedef struct yppushresp_xfr yppushresp_xfr;
#ifdef __cplusplus
extern "C" bool_t xdr_yppushresp_xfr(XDR *, yppushresp_xfr *);
#elif defined(__STDC__)
extern  bool_t xdr_yppushresp_xfr(XDR *, yppushresp_xfr *);
#else /* Old Style C */
bool_t xdr_yppushresp_xfr();
#endif /* Old Style C */


enum ypbind_resptype {
	YPBIND_SUCC_VAL = 1,
	YPBIND_FAIL_VAL = 2
};
typedef enum ypbind_resptype ypbind_resptype;
#ifdef __cplusplus
extern "C" bool_t xdr_ypbind_resptype(XDR *, ypbind_resptype *);
#elif defined(__STDC__)
extern  bool_t xdr_ypbind_resptype(XDR *, ypbind_resptype *);
#else /* Old Style C */
bool_t xdr_ypbind_resptype();
#endif /* Old Style C */


struct ypbind_binding {
	char ypbind_binding_addr[4];
	char ypbind_binding_port[2];
};
typedef struct ypbind_binding ypbind_binding;
#ifdef __cplusplus
extern "C" bool_t xdr_ypbind_binding(XDR *, ypbind_binding *);
#elif defined(__STDC__)
extern  bool_t xdr_ypbind_binding(XDR *, ypbind_binding *);
#else /* Old Style C */
bool_t xdr_ypbind_binding();
#endif /* Old Style C */


struct ypbind_resp {
	ypbind_resptype ypbind_status;
	union {
		u_int ypbind_error;
		ypbind_binding ypbind_bindinfo;
	} ypbind_resp_u;
};
typedef struct ypbind_resp ypbind_resp;
#ifdef __cplusplus
extern "C" bool_t xdr_ypbind_resp(XDR *, ypbind_resp *);
#elif defined(__STDC__)
extern  bool_t xdr_ypbind_resp(XDR *, ypbind_resp *);
#else /* Old Style C */
bool_t xdr_ypbind_resp();
#endif /* Old Style C */

#define YPBIND_ERR_ERR 1
#define YPBIND_ERR_NOSERV 2
#define YPBIND_ERR_RESC 3

struct ypbind_setdom {
	domainname ypsetdom_domain;
	ypbind_binding ypsetdom_binding;
	u_int ypsetdom_vers;
};
typedef struct ypbind_setdom ypbind_setdom;
#ifdef __cplusplus
extern "C" bool_t xdr_ypbind_setdom(XDR *, ypbind_setdom *);
#elif defined(__STDC__)
extern  bool_t xdr_ypbind_setdom(XDR *, ypbind_setdom *);
#else /* Old Style C */
bool_t xdr_ypbind_setdom();
#endif /* Old Style C */


#define YPPROG ((u_long)100004)
#define YPVERS ((u_long)2)

#ifdef __cplusplus
#define YPPROC_NULL ((u_long)0)
extern "C" void * ypproc_null_2(void *, CLIENT *);
extern "C" void * ypproc_null_2_svc(void *, struct svc_req *);
#define YPPROC_DOMAIN ((u_long)1)
extern "C" bool_t * ypproc_domain_2(domainname *, CLIENT *);
extern "C" bool_t * ypproc_domain_2_svc(domainname *, struct svc_req *);
#define YPPROC_DOMAIN_NONACK ((u_long)2)
extern "C" bool_t * ypproc_domain_nonack_2(domainname *, CLIENT *);
extern "C" bool_t * ypproc_domain_nonack_2_svc(domainname *, struct svc_req *);
#define YPPROC_MATCH ((u_long)3)
extern "C" ypresp_val * ypproc_match_2(ypreq_key *, CLIENT *);
extern "C" ypresp_val * ypproc_match_2_svc(ypreq_key *, struct svc_req *);
#define YPPROC_FIRST ((u_long)4)
extern "C" ypresp_key_val * ypproc_first_2(ypreq_nokey *, CLIENT *);
extern "C" ypresp_key_val * ypproc_first_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_NEXT ((u_long)5)
extern "C" ypresp_key_val * ypproc_next_2(ypreq_key *, CLIENT *);
extern "C" ypresp_key_val * ypproc_next_2_svc(ypreq_key *, struct svc_req *);
#define YPPROC_XFR ((u_long)6)
extern "C" ypresp_xfr * ypproc_xfr_2(ypreq_xfr *, CLIENT *);
extern "C" ypresp_xfr * ypproc_xfr_2_svc(ypreq_xfr *, struct svc_req *);
#define YPPROC_CLEAR ((u_long)7)
extern "C" void * ypproc_clear_2(void *, CLIENT *);
extern "C" void * ypproc_clear_2_svc(void *, struct svc_req *);
#define YPPROC_ALL ((u_long)8)
extern "C" ypresp_all * ypproc_all_2(ypreq_nokey *, CLIENT *);
extern "C" ypresp_all * ypproc_all_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_MASTER ((u_long)9)
extern "C" ypresp_master * ypproc_master_2(ypreq_nokey *, CLIENT *);
extern "C" ypresp_master * ypproc_master_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_ORDER ((u_long)10)
extern "C" ypresp_order * ypproc_order_2(ypreq_nokey *, CLIENT *);
extern "C" ypresp_order * ypproc_order_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_MAPLIST ((u_long)11)
extern "C" ypresp_maplist * ypproc_maplist_2(domainname *, CLIENT *);
extern "C" ypresp_maplist * ypproc_maplist_2_svc(domainname *, struct svc_req *);

#elif defined(__STDC__)
#define YPPROC_NULL ((u_long)0)
extern  void * ypproc_null_2(void *, CLIENT *);
extern  void * ypproc_null_2_svc(void *, struct svc_req *);
#define YPPROC_DOMAIN ((u_long)1)
extern  bool_t * ypproc_domain_2(domainname *, CLIENT *);
extern  bool_t * ypproc_domain_2_svc(domainname *, struct svc_req *);
#define YPPROC_DOMAIN_NONACK ((u_long)2)
extern  bool_t * ypproc_domain_nonack_2(domainname *, CLIENT *);
extern  bool_t * ypproc_domain_nonack_2_svc(domainname *, struct svc_req *);
#define YPPROC_MATCH ((u_long)3)
extern  ypresp_val * ypproc_match_2(ypreq_key *, CLIENT *);
extern  ypresp_val * ypproc_match_2_svc(ypreq_key *, struct svc_req *);
#define YPPROC_FIRST ((u_long)4)
extern  ypresp_key_val * ypproc_first_2(ypreq_nokey *, CLIENT *);
extern  ypresp_key_val * ypproc_first_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_NEXT ((u_long)5)
extern  ypresp_key_val * ypproc_next_2(ypreq_key *, CLIENT *);
extern  ypresp_key_val * ypproc_next_2_svc(ypreq_key *, struct svc_req *);
#define YPPROC_XFR ((u_long)6)
extern  ypresp_xfr * ypproc_xfr_2(ypreq_xfr *, CLIENT *);
extern  ypresp_xfr * ypproc_xfr_2_svc(ypreq_xfr *, struct svc_req *);
#define YPPROC_CLEAR ((u_long)7)
extern  void * ypproc_clear_2(void *, CLIENT *);
extern  void * ypproc_clear_2_svc(void *, struct svc_req *);
#define YPPROC_ALL ((u_long)8)
extern  ypresp_all * ypproc_all_2(ypreq_nokey *, CLIENT *);
extern  ypresp_all * ypproc_all_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_MASTER ((u_long)9)
extern  ypresp_master * ypproc_master_2(ypreq_nokey *, CLIENT *);
extern  ypresp_master * ypproc_master_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_ORDER ((u_long)10)
extern  ypresp_order * ypproc_order_2(ypreq_nokey *, CLIENT *);
extern  ypresp_order * ypproc_order_2_svc(ypreq_nokey *, struct svc_req *);
#define YPPROC_MAPLIST ((u_long)11)
extern  ypresp_maplist * ypproc_maplist_2(domainname *, CLIENT *);
extern  ypresp_maplist * ypproc_maplist_2_svc(domainname *, struct svc_req *);

#else /* Old Style C */
#define YPPROC_NULL ((u_long)0)
extern  void * ypproc_null_2();
extern  void * ypproc_null_2_svc();
#define YPPROC_DOMAIN ((u_long)1)
extern  bool_t * ypproc_domain_2();
extern  bool_t * ypproc_domain_2_svc();
#define YPPROC_DOMAIN_NONACK ((u_long)2)
extern  bool_t * ypproc_domain_nonack_2();
extern  bool_t * ypproc_domain_nonack_2_svc();
#define YPPROC_MATCH ((u_long)3)
extern  ypresp_val * ypproc_match_2();
extern  ypresp_val * ypproc_match_2_svc();
#define YPPROC_FIRST ((u_long)4)
extern  ypresp_key_val * ypproc_first_2();
extern  ypresp_key_val * ypproc_first_2_svc();
#define YPPROC_NEXT ((u_long)5)
extern  ypresp_key_val * ypproc_next_2();
extern  ypresp_key_val * ypproc_next_2_svc();
#define YPPROC_XFR ((u_long)6)
extern  ypresp_xfr * ypproc_xfr_2();
extern  ypresp_xfr * ypproc_xfr_2_svc();
#define YPPROC_CLEAR ((u_long)7)
extern  void * ypproc_clear_2();
extern  void * ypproc_clear_2_svc();
#define YPPROC_ALL ((u_long)8)
extern  ypresp_all * ypproc_all_2();
extern  ypresp_all * ypproc_all_2_svc();
#define YPPROC_MASTER ((u_long)9)
extern  ypresp_master * ypproc_master_2();
extern  ypresp_master * ypproc_master_2_svc();
#define YPPROC_ORDER ((u_long)10)
extern  ypresp_order * ypproc_order_2();
extern  ypresp_order * ypproc_order_2_svc();
#define YPPROC_MAPLIST ((u_long)11)
extern  ypresp_maplist * ypproc_maplist_2();
extern  ypresp_maplist * ypproc_maplist_2_svc();
#endif /* Old Style C */

#define YPPUSH_XFRRESPPROG ((u_long)0x40000000)
#define YPPUSH_XFRRESPVERS ((u_long)1)

#ifdef __cplusplus
#define YPPUSHPROC_NULL ((u_long)0)
extern "C" void * yppushproc_null_1(void *, CLIENT *);
extern "C" void * yppushproc_null_1_svc(void *, struct svc_req *);
#define YPPUSHPROC_XFRRESP ((u_long)1)
extern "C" yppushresp_xfr * yppushproc_xfrresp_1(void *, CLIENT *);
extern "C" yppushresp_xfr * yppushproc_xfrresp_1_svc(void *, struct svc_req *);

#elif defined(__STDC__)
#define YPPUSHPROC_NULL ((u_long)0)
extern  void * yppushproc_null_1(void *, CLIENT *);
extern  void * yppushproc_null_1_svc(void *, struct svc_req *);
#define YPPUSHPROC_XFRRESP ((u_long)1)
extern  yppushresp_xfr * yppushproc_xfrresp_1(void *, CLIENT *);
extern  yppushresp_xfr * yppushproc_xfrresp_1_svc(void *, struct svc_req *);

#else /* Old Style C */
#define YPPUSHPROC_NULL ((u_long)0)
extern  void * yppushproc_null_1();
extern  void * yppushproc_null_1_svc();
#define YPPUSHPROC_XFRRESP ((u_long)1)
extern  yppushresp_xfr * yppushproc_xfrresp_1();
extern  yppushresp_xfr * yppushproc_xfrresp_1_svc();
#endif /* Old Style C */

#define YPBINDPROG ((u_long)100007)
#define YPBINDVERS ((u_long)2)

#ifdef __cplusplus
#define YPBINDPROC_NULL ((u_long)0)
extern "C" void * ypbindproc_null_2(void *, CLIENT *);
extern "C" void * ypbindproc_null_2_svc(void *, struct svc_req *);
#define YPBINDPROC_DOMAIN ((u_long)1)
extern "C" ypbind_resp * ypbindproc_domain_2(domainname *, CLIENT *);
extern "C" ypbind_resp * ypbindproc_domain_2_svc(domainname *, struct svc_req *);
#define YPBINDPROC_SETDOM ((u_long)2)
extern "C" void * ypbindproc_setdom_2(ypbind_setdom *, CLIENT *);
extern "C" void * ypbindproc_setdom_2_svc(ypbind_setdom *, struct svc_req *);

#elif defined(__STDC__)
#define YPBINDPROC_NULL ((u_long)0)
extern  void * ypbindproc_null_2(void *, CLIENT *);
extern  void * ypbindproc_null_2_svc(void *, struct svc_req *);
#define YPBINDPROC_DOMAIN ((u_long)1)
extern  ypbind_resp * ypbindproc_domain_2(domainname *, CLIENT *);
extern  ypbind_resp * ypbindproc_domain_2_svc(domainname *, struct svc_req *);
#define YPBINDPROC_SETDOM ((u_long)2)
extern  void * ypbindproc_setdom_2(ypbind_setdom *, CLIENT *);
extern  void * ypbindproc_setdom_2_svc(ypbind_setdom *, struct svc_req *);

#else /* Old Style C */
#define YPBINDPROC_NULL ((u_long)0)
extern  void * ypbindproc_null_2();
extern  void * ypbindproc_null_2_svc();
#define YPBINDPROC_DOMAIN ((u_long)1)
extern  ypbind_resp * ypbindproc_domain_2();
extern  ypbind_resp * ypbindproc_domain_2_svc();
#define YPBINDPROC_SETDOM ((u_long)2)
extern  void * ypbindproc_setdom_2();
extern  void * ypbindproc_setdom_2_svc();
#endif /* Old Style C */

#endif /* !_YP_H_RPCGEN */
@


1.7
log
@no , at end of enum; maja ok
this file should not exist.  the code should be using <rpcsvc/yp.h> ones
the differences are removed.
@
text
@d1 1
a1 1
/* $OpenBSD: yp.h,v 1.6 2002/07/19 02:38:40 deraadt Exp $ */
@


1.6
log
@4344 lines of KNF diff
@
text
@d1 1
a1 1
/* $OpenBSD: yp.h,v 1.5 1997/07/25 20:12:31 mickey Exp $ */
d29 1
a29 1
	YP_VERS = -8,
d57 1
a57 1
	YPXFR_REFUSED = -14,
d317 1
a317 1
	YPPUSH_REFUSED = -14,
d345 1
a345 1
	YPBIND_FAIL_VAL = 2,
@


1.5
log
@#if __STDC__ --> #ifdef __STDC__
@
text
@d1 1
a1 1
/* $OpenBSD: yp.h,v 1.4 1997/05/01 22:14:47 niklas Exp $ */
d32 2
a33 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypstat(XDR *, ypstat*);
d35 2
a36 2
extern  bool_t xdr_ypstat(XDR *, ypstat*);
#else /* Old Style C */ 
d38 1
a38 1
#endif /* Old Style C */ 
d60 2
a61 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypxfrstat(XDR *, ypxfrstat*);
d63 2
a64 2
extern  bool_t xdr_ypxfrstat(XDR *, ypxfrstat*);
#else /* Old Style C */ 
d66 1
a66 1
#endif /* Old Style C */ 
d70 2
a71 2
#ifdef __cplusplus 
extern "C" bool_t xdr_domainname(XDR *, domainname*);
d73 2
a74 2
extern  bool_t xdr_domainname(XDR *, domainname*);
#else /* Old Style C */ 
d76 1
a76 1
#endif /* Old Style C */ 
d80 2
a81 2
#ifdef __cplusplus 
extern "C" bool_t xdr_mapname(XDR *, mapname*);
d83 2
a84 2
extern  bool_t xdr_mapname(XDR *, mapname*);
#else /* Old Style C */ 
d86 1
a86 1
#endif /* Old Style C */ 
d90 2
a91 2
#ifdef __cplusplus 
extern "C" bool_t xdr_peername(XDR *, peername*);
d93 2
a94 2
extern  bool_t xdr_peername(XDR *, peername*);
#else /* Old Style C */ 
d96 1
a96 1
#endif /* Old Style C */ 
d103 2
a104 2
#ifdef __cplusplus 
extern "C" bool_t xdr_keydat(XDR *, keydat*);
d106 2
a107 2
extern  bool_t xdr_keydat(XDR *, keydat*);
#else /* Old Style C */ 
d109 1
a109 1
#endif /* Old Style C */ 
d116 2
a117 2
#ifdef __cplusplus 
extern "C" bool_t xdr_valdat(XDR *, valdat*);
d119 2
a120 2
extern  bool_t xdr_valdat(XDR *, valdat*);
#else /* Old Style C */ 
d122 1
a122 1
#endif /* Old Style C */ 
d132 2
a133 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypmap_parms(XDR *, ypmap_parms*);
d135 2
a136 2
extern  bool_t xdr_ypmap_parms(XDR *, ypmap_parms*);
#else /* Old Style C */ 
d138 1
a138 1
#endif /* Old Style C */ 
d147 2
a148 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypreq_key(XDR *, ypreq_key*);
d150 2
a151 2
extern  bool_t xdr_ypreq_key(XDR *, ypreq_key*);
#else /* Old Style C */ 
d153 1
a153 1
#endif /* Old Style C */ 
d161 2
a162 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypreq_nokey(XDR *, ypreq_nokey*);
d164 2
a165 2
extern  bool_t xdr_ypreq_nokey(XDR *, ypreq_nokey*);
#else /* Old Style C */ 
d167 1
a167 1
#endif /* Old Style C */ 
d177 2
a178 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypreq_xfr(XDR *, ypreq_xfr*);
d180 2
a181 2
extern  bool_t xdr_ypreq_xfr(XDR *, ypreq_xfr*);
#else /* Old Style C */ 
d183 1
a183 1
#endif /* Old Style C */ 
d191 2
a192 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_val(XDR *, ypresp_val*);
d194 2
a195 2
extern  bool_t xdr_ypresp_val(XDR *, ypresp_val*);
#else /* Old Style C */ 
d197 1
a197 1
#endif /* Old Style C */ 
d206 2
a207 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_key_val(XDR *, ypresp_key_val*);
d209 2
a210 2
extern  bool_t xdr_ypresp_key_val(XDR *, ypresp_key_val*);
#else /* Old Style C */ 
d212 1
a212 1
#endif /* Old Style C */ 
d220 2
a221 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_master(XDR *, ypresp_master*);
d223 2
a224 2
extern  bool_t xdr_ypresp_master(XDR *, ypresp_master*);
#else /* Old Style C */ 
d226 1
a226 1
#endif /* Old Style C */ 
d234 2
a235 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_order(XDR *, ypresp_order*);
d237 2
a238 2
extern  bool_t xdr_ypresp_order(XDR *, ypresp_order*);
#else /* Old Style C */ 
d240 1
a240 1
#endif /* Old Style C */ 
d250 2
a251 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_all(XDR *, ypresp_all*);
d253 2
a254 2
extern  bool_t xdr_ypresp_all(XDR *, ypresp_all*);
#else /* Old Style C */ 
d256 1
a256 1
#endif /* Old Style C */ 
d264 2
a265 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_xfr(XDR *, ypresp_xfr*);
d267 2
a268 2
extern  bool_t xdr_ypresp_xfr(XDR *, ypresp_xfr*);
#else /* Old Style C */ 
d270 1
a270 1
#endif /* Old Style C */ 
d278 2
a279 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypmaplist(XDR *, ypmaplist*);
d281 2
a282 2
extern  bool_t xdr_ypmaplist(XDR *, ypmaplist*);
#else /* Old Style C */ 
d284 1
a284 1
#endif /* Old Style C */ 
d292 2
a293 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypresp_maplist(XDR *, ypresp_maplist*);
d295 2
a296 2
extern  bool_t xdr_ypresp_maplist(XDR *, ypresp_maplist*);
#else /* Old Style C */ 
d298 1
a298 1
#endif /* Old Style C */ 
d320 2
a321 2
#ifdef __cplusplus 
extern "C" bool_t xdr_yppush_status(XDR *, yppush_status*);
d323 2
a324 2
extern  bool_t xdr_yppush_status(XDR *, yppush_status*);
#else /* Old Style C */ 
d326 1
a326 1
#endif /* Old Style C */ 
d334 2
a335 2
#ifdef __cplusplus 
extern "C" bool_t xdr_yppushresp_xfr(XDR *, yppushresp_xfr*);
d337 2
a338 2
extern  bool_t xdr_yppushresp_xfr(XDR *, yppushresp_xfr*);
#else /* Old Style C */ 
d340 1
a340 1
#endif /* Old Style C */ 
d348 2
a349 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypbind_resptype(XDR *, ypbind_resptype*);
d351 2
a352 2
extern  bool_t xdr_ypbind_resptype(XDR *, ypbind_resptype*);
#else /* Old Style C */ 
d354 1
a354 1
#endif /* Old Style C */ 
d362 2
a363 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypbind_binding(XDR *, ypbind_binding*);
d365 2
a366 2
extern  bool_t xdr_ypbind_binding(XDR *, ypbind_binding*);
#else /* Old Style C */ 
d368 1
a368 1
#endif /* Old Style C */ 
d379 2
a380 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypbind_resp(XDR *, ypbind_resp*);
d382 2
a383 2
extern  bool_t xdr_ypbind_resp(XDR *, ypbind_resp*);
#else /* Old Style C */ 
d385 1
a385 1
#endif /* Old Style C */ 
d397 2
a398 2
#ifdef __cplusplus 
extern "C" bool_t xdr_ypbind_setdom(XDR *, ypbind_setdom*);
d400 2
a401 2
extern  bool_t xdr_ypbind_setdom(XDR *, ypbind_setdom*);
#else /* Old Style C */ 
d403 1
a403 1
#endif /* Old Style C */ 
d485 1
a485 1
#else /* Old Style C */ 
d522 1
a522 1
#endif /* Old Style C */ 
d543 1
a543 1
#else /* Old Style C */ 
d550 1
a550 1
#endif /* Old Style C */ 
d577 1
a577 1
#else /* Old Style C */ 
d587 1
a587 1
#endif /* Old Style C */ 
@


1.4
log
@Umm, fix signedness error in my last commit, be explicit
about the fact that ordernumbers are 32 bit
@
text
@d1 1
a1 1
/* $OpenBSD: yp.h,v 1.3 1997/03/30 20:51:19 maja Exp $ */
d34 1
a34 1
#elif __STDC__ 
d62 1
a62 1
#elif __STDC__ 
d72 1
a72 1
#elif __STDC__ 
d82 1
a82 1
#elif __STDC__ 
d92 1
a92 1
#elif __STDC__ 
d105 1
a105 1
#elif __STDC__ 
d118 1
a118 1
#elif __STDC__ 
d134 1
a134 1
#elif __STDC__ 
d149 1
a149 1
#elif __STDC__ 
d163 1
a163 1
#elif __STDC__ 
d179 1
a179 1
#elif __STDC__ 
d193 1
a193 1
#elif __STDC__ 
d208 1
a208 1
#elif __STDC__ 
d222 1
a222 1
#elif __STDC__ 
d236 1
a236 1
#elif __STDC__ 
d252 1
a252 1
#elif __STDC__ 
d266 1
a266 1
#elif __STDC__ 
d280 1
a280 1
#elif __STDC__ 
d294 1
a294 1
#elif __STDC__ 
d322 1
a322 1
#elif __STDC__ 
d336 1
a336 1
#elif __STDC__ 
d350 1
a350 1
#elif __STDC__ 
d364 1
a364 1
#elif __STDC__ 
d381 1
a381 1
#elif __STDC__ 
d399 1
a399 1
#elif __STDC__ 
d447 1
a447 1
#elif __STDC__
d535 1
a535 1
#elif __STDC__
d566 1
a566 1
#elif __STDC__
@


1.3
log
@Added support for YP V1. Partly from FreeBSD. -moj
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d128 1
a128 1
	u_int ordernum;
d231 1
a231 1
	u_int ordernum;
@


1.2
log
@new yp.h, as generated by rpcgen.
@
text
@d1 2
@


1.1
log
@+ full set of ypserv tools that compile
@
text
@d2 2
a3 28
 * Copyright (c) 1995 Mats O Jansson <moj@@stacken.kth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$Id: yp.h,v 1.0 1995/10/23 22:40:42 moj Exp $
d6 2
a7 2
#ifndef _YPSERV_H_RPCGEN
#define _YPSERV_H_RPCGEN
d299 105
d410 1
a410 1
extern "C" void * ypproc_null_2_svc(void *, struct svc_req *, SVCXPRT *);
d413 1
a413 1
extern "C" bool_t * ypproc_domain_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d416 1
a416 1
extern "C" bool_t * ypproc_domain_nonack_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d419 1
a419 1
extern "C" ypresp_val * ypproc_match_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d421 2
a422 2
extern "C" ypresp_key_val * ypproc_first_2(ypreq_key *, CLIENT *);
extern "C" ypresp_key_val * ypproc_first_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d425 1
a425 1
extern "C" ypresp_key_val * ypproc_next_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d428 1
a428 1
extern "C" ypresp_xfr * ypproc_xfr_2_svc(ypreq_xfr *, struct svc_req *, SVCXPRT *);
d431 1
a431 1
extern "C" void * ypproc_clear_2_svc(void *, struct svc_req *, SVCXPRT *);
d434 1
a434 1
extern "C" ypresp_all * ypproc_all_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d437 1
a437 1
extern "C" ypresp_master * ypproc_master_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d440 1
a440 1
extern "C" ypresp_order * ypproc_order_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d443 1
a443 1
extern "C" ypresp_maplist * ypproc_maplist_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d448 1
a448 1
extern  void * ypproc_null_2_svc(void *, struct svc_req *, SVCXPRT *);
d451 1
a451 1
extern  bool_t * ypproc_domain_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d454 1
a454 1
extern  bool_t * ypproc_domain_nonack_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d457 1
a457 1
extern  ypresp_val * ypproc_match_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d459 2
a460 2
extern  ypresp_key_val * ypproc_first_2(ypreq_key *, CLIENT *);
extern  ypresp_key_val * ypproc_first_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d463 1
a463 1
extern  ypresp_key_val * ypproc_next_2_svc(ypreq_key *, struct svc_req *, SVCXPRT *);
d466 1
a466 1
extern  ypresp_xfr * ypproc_xfr_2_svc(ypreq_xfr *, struct svc_req *, SVCXPRT *);
d469 1
a469 1
extern  void * ypproc_clear_2_svc(void *, struct svc_req *, SVCXPRT *);
d472 1
a472 1
extern  ypresp_all * ypproc_all_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d475 1
a475 1
extern  ypresp_master * ypproc_master_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d478 1
a478 1
extern  ypresp_order * ypproc_order_2_svc(ypreq_nokey *, struct svc_req *, SVCXPRT *);
d481 1
a481 1
extern  ypresp_maplist * ypproc_maplist_2_svc(domainname *, struct svc_req *, SVCXPRT *);
d522 66
a587 1
#endif /* !_YPSERV_H_RPCGEN */
@
