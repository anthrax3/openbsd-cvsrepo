head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.16
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2016.08.28.00.51.48;	author guenther;	state Exp;
branches;
next	1.6;
commitid	vbjS12PlOyrWahfU;

1.6
date	2012.12.08.20.38.10;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.04.17.37.10;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.27.20.53.15;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.27.20.03.24;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.27.18.34.03;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.26.18.26.13;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Pull in <time.h> for tzset()
@
text
@/*	$OpenBSD: ldomd.c,v 1.6 2012/12/08 20:38:10 kettenis Exp $	*/

/*
 * Copyright (c) 2012 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/ioctl.h>
#include <assert.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <syslog.h>
#include <time.h>
#include <unistd.h>

#include "ds.h"
#include "hvctl.h"
#include "mdesc.h"
#include "util.h"
#include "ldomd.h"

TAILQ_HEAD(guest_head, guest) guests;

void add_guest(struct md_node *);
void map_domain_services(struct md *);

void frag_init(void);
void add_frag_mblock(struct md_node *);
void add_frag(uint64_t);
void delete_frag(uint64_t);
uint64_t alloc_frag(void);

void hv_update_md(struct guest *guest);
void hv_open(void);
void hv_close(void);
void hv_read(uint64_t, void *, size_t);
void hv_write(uint64_t, void *, size_t);

int hvctl_seq = 1;
int hvctl_fd;

void *hvmd_buf;
size_t hvmd_len;
struct md *hvmd;
uint64_t hv_mdpa;

__dead void	usage(void);
void	logit(int, const char *, ...);
void	vlog(int, const char *, va_list);

void
log_init(int n_debug)
{
	extern char *__progname;

	debug = n_debug;

	if (!debug)
		openlog(__progname, LOG_PID | LOG_NDELAY, LOG_DAEMON);

	tzset();
}

void
fatal(const char *emsg)
{
	if (errno)
		logit(LOG_CRIT, "fatal: %s: %s\n", emsg, strerror(errno));
	else
		logit(LOG_CRIT, "fatal: %s\n", emsg);

	exit(EXIT_FAILURE);
}

void
logit(int pri, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vlog(pri, fmt, ap);
	va_end(ap);
}

void
vlog(int pri, const char *fmt, va_list ap)
{
	char *nfmt;

	if (debug) {
		/* best effort in out of mem situations */
		if (asprintf(&nfmt, "%s\n", fmt) == -1) {
			vfprintf(stderr, fmt, ap);
			fprintf(stderr, "\n");
		} else {
			vfprintf(stderr, nfmt, ap);
			free(nfmt);
		}
		fflush(stderr);
	} else
		vsyslog(pri, fmt, ap);
}

int
main(int argc, char **argv)
{
	struct hvctl_msg msg;
	ssize_t nbytes;
	struct md_header hdr;
	struct md_node *node;
	struct md_prop *prop;
	struct guest *guest;
	int debug = 0;
	int ch;
	int i;

	log_init(1);

	while ((ch = getopt(argc, argv, "d")) != -1) {
		switch (ch) {
		case 'd':
			debug = 1;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}

	argc -= optind;
	argv += optind;
	if (argc > 0)
		usage();

	if (!debug)
		if (daemon(0, 0))
			fatal("daemon");

	log_init(debug);

	hv_open();

	/*
	 * Request config.
	 */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_GET_HVCONFIG;
	msg.hdr.seq = hvctl_seq++;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");

	hv_mdpa = msg.msg.hvcnf.hvmdp;
	hv_read(hv_mdpa, &hdr, sizeof(hdr));
	hvmd_len = sizeof(hdr) + hdr.node_blk_sz + hdr.name_blk_sz +
	    hdr.data_blk_sz;
	hvmd_buf = xmalloc(hvmd_len);
	hv_read(hv_mdpa, hvmd_buf, hvmd_len);

	hvmd = md_ingest(hvmd_buf, hvmd_len);
	node = md_find_node(hvmd, "guests");
	TAILQ_INIT(&guests);
	TAILQ_FOREACH(prop, &node->prop_list, link) {
		if (prop->tag == MD_PROP_ARC &&
		    strcmp(prop->name->str, "fwd") == 0)
			add_guest(prop->d.arc.node);
	}

	frag_init();

	TAILQ_FOREACH(guest, &guests, link) {
		struct ds_conn *dc;
		char path[64];

		if (strcmp(guest->name, "primary") == 0)
			continue;

		snprintf(path, sizeof(path), "/dev/ldom-%s", guest->name);
		dc = ds_conn_open(path, guest);
		ds_conn_register_service(dc, &var_config_service);
	}

	hv_close();

	/*
	 * Open all virtual disk server port device files.  As long as
	 * we keep these device files open, the corresponding virtual
	 * disks will be available to the guest domains.  For now we
	 * just keep them open until we exit, so there is not reason
	 * to keep track of the file descriptors.
	 */
	for (i = 0; i < 256; i++) {
		char path[64];

		snprintf(path, sizeof(path), "/dev/vdsp%d", i);
		if (open(path, O_RDWR, 0) == -1)
			break;
	}

	ds_conn_serve();

	exit(EXIT_SUCCESS);
}

void
usage(void)
{
	extern char *__progname;

	fprintf(stderr, "usage: %s [-d]\n", __progname);
	exit(EXIT_FAILURE);
}

void
add_guest(struct md_node *node)
{
	struct guest *guest;
	struct md_header hdr;
	void *buf;
	size_t len;

	guest = xmalloc(sizeof(*guest));

	if (!md_get_prop_str(hvmd, node, "name", &guest->name))
		goto free;
	if (!md_get_prop_val(hvmd, node, "gid", &guest->gid))
		goto free;
	if (!md_get_prop_val(hvmd, node, "mdpa", &guest->mdpa))
		goto free;

	hv_read(guest->mdpa, &hdr, sizeof(hdr));
	len = sizeof(hdr) + hdr.node_blk_sz + hdr.name_blk_sz +
	    hdr.data_blk_sz;
	buf = xmalloc(len);
	hv_read(guest->mdpa, buf, len);

	guest->node = node;
	guest->md = md_ingest(buf, len);
	if (strcmp(guest->name, "primary") == 0)
		map_domain_services(guest->md);

	TAILQ_INSERT_TAIL(&guests, guest, link);
	return;

free:
	free(guest);
}

void
map_domain_services(struct md *md)
{
	struct md_node *node;
	const char *name;
	char source[64];
	char target[64];
	int unit = 0;

	TAILQ_FOREACH(node, &md->node_list, link) {
		if (strcmp(node->name->str, "virtual-device-port") != 0)
			continue;

		if (!md_get_prop_str(md, node, "vldc-svc-name", &name))
			continue;

		if (strncmp(name, "ldom-", 5) != 0 ||
		    strcmp(name, "ldom-primary") == 0)
			continue;

		snprintf(source, sizeof(source), "/dev/ldom%d", unit++);
		snprintf(target, sizeof(target), "/dev/%s", name);
		unlink(target);
		symlink(source, target);
	}
}

struct frag {
	TAILQ_ENTRY(frag) link;
	uint64_t base;
};

TAILQ_HEAD(frag_head, frag) free_frags;

uint64_t fragsize;

void
frag_init(void)
{
	struct md_node *node;
	struct md_prop *prop;

	node = md_find_node(hvmd, "frag_space");
	md_get_prop_val(hvmd, node, "fragsize", &fragsize);
	TAILQ_INIT(&free_frags);
	TAILQ_FOREACH(prop, &node->prop_list, link) {
		if (prop->tag == MD_PROP_ARC &&
		    strcmp(prop->name->str, "fwd") == 0)
			add_frag_mblock(prop->d.arc.node);
	}
}

void
add_frag_mblock(struct md_node *node)
{
	uint64_t base, size;
	struct guest *guest;

	md_get_prop_val(hvmd, node, "base", &base);
	md_get_prop_val(hvmd, node, "size", &size);
	while (size > fragsize) {
		add_frag(base);
		size -= fragsize;
		base += fragsize;
	}

	delete_frag(hv_mdpa);
	TAILQ_FOREACH(guest, &guests, link)
		delete_frag(guest->mdpa);
}

void
add_frag(uint64_t base)
{
	struct frag *frag;

	frag = xmalloc(sizeof(*frag));
	frag->base = base;
	TAILQ_INSERT_TAIL(&free_frags, frag, link);
}

void
delete_frag(uint64_t base)
{
	struct frag *frag;
	struct frag *tmp;

	TAILQ_FOREACH_SAFE(frag, &free_frags, link, tmp) {
		if (frag->base == base) {
			TAILQ_REMOVE(&free_frags, frag, link);
			free(frag);
		}
	}
}

uint64_t
alloc_frag(void)
{
	struct frag *frag;
	uint64_t base;

	frag = TAILQ_FIRST(&free_frags);
	if (frag == NULL)
		return -1;

	TAILQ_REMOVE(&free_frags, frag, link);
	base = frag->base;
	free(frag);

	return base;
}

void
hv_update_md(struct guest *guest)
{
	struct hvctl_msg msg;
	size_t nbytes;
	void *buf;
	size_t size;
	uint64_t mdpa;

	hv_open();

	mdpa = alloc_frag();
	size = md_exhume(guest->md, &buf);
	hv_write(mdpa, buf, size);
	add_frag(guest->mdpa);
	guest->mdpa = mdpa;
	free(buf);

	md_set_prop_val(hvmd, guest->node, "mdpa", guest->mdpa);

	mdpa = alloc_frag();
	size = md_exhume(hvmd, &buf);
	hv_write(mdpa, buf, size);
	add_frag(hv_mdpa);
	hv_mdpa = mdpa;
	free(buf);

	/* Update config.  */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_RECONFIGURE;
	msg.hdr.seq = hvctl_seq++;
	msg.msg.reconfig.guestid = -1;
	msg.msg.reconfig.hvmdp = hv_mdpa;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");

	hv_close();

	if (msg.hdr.status != HVCTL_ST_OK)
		logit(LOG_CRIT, "reconfigure failed: %d", msg.hdr.status);
}

void
hv_open(void)
{
	struct hvctl_msg msg;
	ssize_t nbytes;
	uint64_t code;

	hvctl_fd = open("/dev/hvctl", O_RDWR, 0);
	if (hvctl_fd == -1)
		fatal("cannot open /dev/hvctl");

	/*
	 * Say "Hello".
	 */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_HELLO;
	msg.hdr.seq = hvctl_seq++;
	msg.msg.hello.major = 1;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");

	code = msg.msg.clnge.code ^ 0xbadbeef20;

	/*
	 * Respond to challenge.
	 */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_RESPONSE;
	msg.hdr.seq = hvctl_seq++;
	msg.msg.clnge.code = code ^ 0x12cafe42a;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");
}

void
hv_close(void)
{
	close(hvctl_fd);
	hvctl_fd = -1;
}

void
hv_read(uint64_t addr, void *buf, size_t len)
{
	struct hv_io hi;

	hi.hi_cookie = addr;
	hi.hi_addr = buf;
	hi.hi_len = len;

	if (ioctl(hvctl_fd, HVIOCREAD, &hi) == -1)
		fatal("ioctl");
}

void
hv_write(uint64_t addr, void *buf, size_t len)
{
	struct hv_io hi;

	hi.hi_cookie = addr;
	hi.hi_addr = buf;
	hi.hi_len = len;

	if (ioctl(hvctl_fd, HVIOCWRITE, &hi) == -1)
		fatal("ioctl");
}
@


1.6
log
@Make ldomd(8) to control the availability of virtual disks to guest domains.
This is done by opening the corresponding /dev/vdspN device file.  The virtual
disk will remain available until that device is closed, which happens
automatically when ldomd(8) exits.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomd.c,v 1.5 2012/11/04 17:37:10 kettenis Exp $	*/
d30 1
@


1.5
log
@Split out hvctl protocol definitions in a seperate header file.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomd.c,v 1.4 2012/10/27 20:53:15 kettenis Exp $	*/
d131 1
d205 15
@


1.4
log
@Close hvctl channel after initial setup and reopen it whenever we need to
reconfigure.  Makes it possible to use ldomctl(8) when ldomd(8) is running.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomd.c,v 1.3 2012/10/27 20:03:24 kettenis Exp $	*/
d33 1
a36 110

struct hv_io {
	uint64_t	hi_cookie;
	void		*hi_addr;
	size_t		hi_len;
};

#define HVIOCREAD	_IOW('h', 0, struct hv_io)
#define HVIOCWRITE	_IOW('h', 1, struct hv_io)

#define SIS_NORMAL		0x1
#define SIS_TRANSITION		0x2
#define SOFT_STATE_SIZE		32

#define GUEST_STATE_STOPPED		0x0
#define GUEST_STATE_RESETTING		0x1
#define GUEST_STATE_NORMAL		0x2
#define GUEST_STATE_SUSPENDED		0x3
#define GUEST_STATE_EXITING		0x4
#define GUEST_STATE_UNCONFIGURED	0xff

#define HVCTL_RES_STATUS_DATA_SIZE	40

struct hvctl_header {
	uint16_t	op;
	uint16_t	seq;
	uint16_t	chksum;
	uint16_t	status;
};

struct hvctl_hello {
	uint16_t	major;
	uint16_t	minor;
};

struct hvctl_challenge {
	uint64_t	code;
};

struct hvctl_hvconfig {
	uint64_t	hv_membase;
	uint64_t	hv_memsize;
	uint64_t	hvmdp;
	uint64_t	del_reconf_hvmdp;
	uint32_t	del_reconf_gid;
};

struct hvctl_reconfig {
	uint64_t	hvmdp;
	uint32_t	guestid;
};

struct hvctl_guest_op {
	uint32_t	guestid;
	uint32_t	code;
};

struct hvctl_res_status {
	uint32_t	res;
	uint32_t	resid;
	uint32_t	infoid;
	uint32_t	code;
	uint8_t         data[HVCTL_RES_STATUS_DATA_SIZE];
};

struct hvctl_rs_guest_state {
	uint64_t	state;
};

struct hvctl_rs_guest_softstate {
	uint8_t		soft_state;
	char		soft_state_str[SOFT_STATE_SIZE];
};

struct hvctl_rs_guest_util {
	uint64_t	lifespan;
	uint64_t	wallclock_delta;
	uint64_t	active_delta;
	uint64_t	stopped_cycles;
	uint64_t	yielded_cycles;
};

struct hvctl_msg {
	struct hvctl_header	hdr;
	union {
		struct hvctl_hello	hello;
		struct hvctl_challenge	clnge;
		struct hvctl_hvconfig	hvcnf;
		struct hvctl_reconfig	reconfig;
		struct hvctl_guest_op	guestop;
		struct hvctl_res_status	resstat;
	} msg;
};

#define HVCTL_OP_HELLO		0
#define HVCTL_OP_CHALLENGE	1
#define HVCTL_OP_RESPONSE	2
#define HVCTL_OP_GET_HVCONFIG	3
#define HVCTL_OP_RECONFIGURE	4
#define HVCTL_OP_GUEST_START	5
#define HVCTL_OP_GUEST_STOP	6
#define HVCTL_OP_GET_RES_STAT	11

#define HVCTL_ST_OK		0

#define HVCTL_RES_GUEST		0

#define HVCTL_INFO_GUEST_STATE		0
#define HVCTL_INFO_GUEST_SOFT_STATE	1
#define HVCTL_INFO_GUEST_UTILISATION	3
@


1.3
log
@Turn this into a proper deamon, and add a man page.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomd.c,v 1.2 2012/10/27 18:34:03 kettenis Exp $	*/
d159 2
a233 1
	uint64_t code;
d265 1
a265 37
	hvctl_fd = open("/dev/hvctl", O_RDWR, 0);
	if (hvctl_fd == -1)
		fatal("cannot open /dev/hvctl");

	/*
	 * Say "Hello".
	 */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_HELLO;
	msg.hdr.seq = hvctl_seq++;
	msg.msg.hello.major = 1;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");

	code = msg.msg.clnge.code ^ 0xbadbeef20;

	/*
	 * Respond to challenge.
	 */
	bzero(&msg, sizeof(msg));
	msg.hdr.op = HVCTL_OP_RESPONSE;
	msg.hdr.seq = hvctl_seq++;
	msg.msg.clnge.code = code ^ 0x12cafe42a;
	nbytes = write(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("write");

	bzero(&msg, sizeof(msg));
	nbytes = read(hvctl_fd, &msg, sizeof(msg));
	if (nbytes != sizeof(msg))
		fatal("read");
d312 2
d484 2
d517 2
d521 53
@


1.2
log
@Give ldomd(8) its own copy of the domain services support code and modify it
to handle multiple channels.  Use it to provide the var-config domain service
to all the currently configured guest domains.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomd.c,v 1.1 2012/10/26 18:26:13 kettenis Exp $	*/
d23 1
d25 1
d29 1
d130 3
d139 2
d159 1
d170 57
a230 1
	struct hv_io hi;
d237 26
d266 1
a266 1
		err(1, "open");
d272 1
d277 1
a277 1
		err(1, "write");
d282 1
a282 1
		err(1, "read");
d290 1
a290 1
	msg.hdr.op = 2;
d295 1
a295 1
		err(1, "write");
d300 1
a300 1
		err(1, "read");
d310 1
a310 1
		err(1, "write");
d315 1
a315 1
		err(1, "read");
d318 1
a318 8

	hi.hi_cookie = hv_mdpa;
	hi.hi_addr = &hdr;
	hi.hi_len = sizeof(hdr);

	if (ioctl(hvctl_fd, HVIOCREAD, &hi) == -1)
		err(1, "ioctl");

d322 1
a322 7

	hi.hi_cookie = hv_mdpa;
	hi.hi_addr = hvmd_buf;
	hi.hi_len = hvmd_len;

	if (ioctl(hvctl_fd, HVIOCREAD, &hi) == -1)
		err(1, "ioctl");
d357 1
a357 2
	fprintf(stderr, "usage: %s start|stop domain\n", __progname);
	fprintf(stderr, "       %s status [domain]\n", __progname);
a364 1
	struct hv_io hi;
d378 1
a378 7
	hi.hi_cookie = guest->mdpa;
	hi.hi_addr = &hdr;
	hi.hi_len = sizeof(hdr);

	if (ioctl(hvctl_fd, HVIOCREAD, &hi) == -1)
		err(1, "ioctl");

d382 1
a382 7

	hi.hi_cookie = guest->mdpa;
	hi.hi_addr = buf;
	hi.hi_len = len;

	if (ioctl(hvctl_fd, HVIOCREAD, &hi) == -1)
		err(1, "ioctl");
d541 1
a541 1
		err(1, "write");
d546 17
a562 2
		err(1, "read");
	printf("status %d\n", msg.hdr.status);
d575 1
a575 1
		err(1, "ioctl");
@


1.1
log
@Work-in-progress code for ldomd(8), a daemon running in a sun4v control domain
that provides some essential services to guest domains.
@
text
@d1 1
a1 1
/*	$OpenBSD: ldomctl.c,v 1.8 2012/10/21 12:56:45 kettenis Exp $	*/
d32 1
a138 11
struct guest {
	const char *name;
	uint64_t gid;
	uint64_t mdpa;

	struct md_node *node;
	struct md *md;

	TAILQ_ENTRY(guest) link;
};

d142 1
d171 1
a171 2
	struct ldc_conn lc;
	int fd;
d256 10
a265 23
	fd = open("/dev/ldom0", O_RDWR, 0);
	if (fd == -1)
		err(1, "open");

	memset(&lc, 0, sizeof(lc));
	lc.lc_fd = fd;
	lc.lc_rx_data = ds_rx_msg;

	while (1) {
		struct ldc_pkt lp;

		bzero(&lp, sizeof(lp));
		nbytes = read(fd, &lp, sizeof(lp));
		if (nbytes != sizeof(lp))
			err(1, "read");

#if 0
	{
		uint64_t *msg = (uint64_t *)&lp;
		int i;

		for (i = 0; i < 8; i++)
			printf("%02x: %016llx\n", i, msg[i]);
a266 1
#endif
d268 1
a268 16
		switch (lp.type) {
		case LDC_CTRL:
			ldc_rx_ctrl(&lc, &lp);
			break;
		case LDC_DATA:
			ldc_rx_data(&lc, &lp);
			break;
		default:
			DPRINTF(("%0x02/%0x02/%0x02\n", lp.type, lp.stype,
			    lp.ctrl));
			ldc_reset(&lc);
			break;
		}
	}

	close(fd);
a282 2
struct guest *svendsen;

d292 1
a292 1
	guest = xmalloc (sizeof(*guest));
d321 2
a322 2
	if (strcmp(guest->name, "svendsen") == 0)
		svendsen = guest;
d325 2
d331 26
a442 57
#if 0

#define VAR_CONFIG_SUCCESS		0x00
#define VAR_CONFIG_NO_SPACE		0x01
#define VAR_CONFIG_INVALID_VAR		0x02
#define VAR_CONFIG_INVALID_VAL		0x03
#define VAR_CONFIG_VAR_NOT_PRESENT	0x04

uint32_t
set_variable(struct md *md, const char *name, const char *value)
{
	struct md_node *node;
	struct md_prop *prop;
	md = svendsen->md;	/* XXX */

	node = md_find_node(md, "variables");
	if (node == NULL) {
		struct md_node *root = md_find_node(md, "root");

		assert(root);
		node = md_add_node(md, "variables");
		md_link_node(md, root, node);
	}

	prop = md_add_prop_str(md, node, name, value);
	if (prop == NULL)
		return VAR_CONFIG_NO_SPACE;

	md_write(md, "tmp.md");
	hv_update_md(NULL);
	return VAR_CONFIG_SUCCESS;
}

uint32_t
delete_variable(struct md *md, const char *name)
{
	struct md_node *node;
	struct md_prop *prop;
	md = svendsen->md;	/* XXX */

	node = md_find_node(md, "variables");
	if (node == NULL)
		return VAR_CONFIG_VAR_NOT_PRESENT;

	prop = md_find_prop(md, node, name);
	if (prop == NULL)
		return VAR_CONFIG_VAR_NOT_PRESENT;

	md_delete_prop(md, node, prop);

	md_write(md, "tmp.md");
	hv_update_md(NULL);
	return VAR_CONFIG_SUCCESS;
}

#endif

d450 1
a450 1
	guest = svendsen; 	/* XXX */
d452 1
a452 1
	guest->mdpa = alloc_frag();
d454 3
a456 1
	hv_write(guest->mdpa, buf, size);
d461 1
a461 1
	hv_mdpa = alloc_frag();
d463 3
a465 1
	hv_write(hv_mdpa, buf, size);
@

