head	1.15;
access;
symbols
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.8
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.4
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	kame_19991209:1.1.1.1
	KAME:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.12.22.09.13.35;	author florian;	state dead;
branches;
next	1.14;
commitid	QHLwHNotIjbdLNCu;

1.14
date	2013.08.15.13.57.30;	author bluhm;	state Exp;
branches;
next	1.13;

1.13
date	2009.11.11.17.23.16;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.24.16.11.05;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.03.18.19.32.19;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.05.15.29.28;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.26.20.23.20;	author itojun;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.10.19.57.35;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.31.21.24.28;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.31.09.53.26;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.22.09.09.32;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.28.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.13.18.24.00;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	99.12.09.15.10.49;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.09.14.56.01;	author itojun;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.12.09.14.56.01;	author itojun;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Out out you evil network daemon.
OK deraadt@@ some time ago
@
text
@/*	$OpenBSD: probe.c,v 1.14 2013/08/15 13:57:30 bluhm Exp $	*/
/*	$KAME: probe.c,v 1.16 2002/06/10 20:00:36 itojun Exp $	*/

/*
 * Copyright (C) 1998 WIDE Project.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/sysctl.h>
#include <sys/uio.h>
#include <sys/queue.h>

#include <net/if.h>
#include <net/if_dl.h>

#include <netinet/in.h>
#include <netinet6/in6_var.h>
#include <netinet/icmp6.h>
#include <netinet6/nd6.h>

#include <arpa/inet.h>

#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <syslog.h>
#include <stdlib.h>

#include "rtsold.h"

static struct msghdr sndmhdr;
static struct iovec sndiov[2];
static int probesock;
static void sendprobe(struct in6_addr *, struct ifinfo *);

int
probe_init(void)
{
	int scmsglen = CMSG_SPACE(sizeof(struct in6_pktinfo)) +
	    CMSG_SPACE(sizeof(int));
	static u_char *sndcmsgbuf = NULL;

	if (sndcmsgbuf == NULL &&
	    (sndcmsgbuf = (u_char *)malloc(scmsglen)) == NULL) {
		warnmsg(LOG_ERR, __func__, "malloc failed");
		return(-1);
	}

	if ((probesock = socket(AF_INET6, SOCK_RAW, IPPROTO_NONE)) < 0) {
		warnmsg(LOG_ERR, __func__, "socket: %s", strerror(errno));
		return(-1);
	}

	/* make the socket send-only */
	if (shutdown(probesock, 0)) {
		warnmsg(LOG_ERR, __func__, "shutdown: %s", strerror(errno));
		return(-1);
	}

	/* initialize msghdr for sending packets */
	sndmhdr.msg_namelen = sizeof(struct sockaddr_in6);
	sndmhdr.msg_iov = sndiov;
	sndmhdr.msg_iovlen = 1;
	sndmhdr.msg_control = (caddr_t)sndcmsgbuf;
	sndmhdr.msg_controllen = scmsglen;
	return(0);
}

/*
 * Probe if each router in the default router list is still alive.
 */
void
defrouter_probe(struct ifinfo *ifinfo)
{
	u_char ntopbuf[INET6_ADDRSTRLEN];
	int mib[] = { CTL_NET, PF_INET6, IPPROTO_ICMPV6, ICMPV6CTL_ND6_DRLIST };
	char *buf;
	struct in6_defrouter *p, *ep;
	size_t l;
	int ifindex = ifinfo->sdl->sdl_index;

	if (!ifindex)
		return;

	if (sysctl(mib, sizeof(mib) / sizeof(mib[0]), NULL, &l, NULL, 0) < 0) {
		warnmsg(LOG_ERR, __func__, "sysctl(ICMPV6CTL_ND6_DRLIST): %s",
		    strerror(errno));
		return;
	}
	if (l == 0)
		return;
	buf = malloc(l);
	if (buf == NULL) {
		warnmsg(LOG_ERR, __func__, "malloc: %s", strerror(errno));
		return;
	}
	if (sysctl(mib, sizeof(mib) / sizeof(mib[0]), buf, &l, NULL, 0) < 0) {
		warnmsg(LOG_ERR, __func__, "sysctl(ICMPV6CTL_ND6_DRLIST): %s",
		    strerror(errno));
		free(buf);
		return;
	}

	ep = (struct in6_defrouter *)(buf + l);
	for (p = (struct in6_defrouter *)buf; p < ep; p++) {
		if (p->if_index == ifindex) {
			/* sanity check */
			if (!IN6_IS_ADDR_LINKLOCAL(&p->rtaddr.sin6_addr)) {
				warnmsg(LOG_ERR, __func__,
				    "default router list contains a "
				    "non-link-local address(%s)",
				    inet_ntop(AF_INET6,
				    &p->rtaddr.sin6_addr,
				    ntopbuf, INET6_ADDRSTRLEN));
				continue; /* ignore the address */
			}
			sendprobe(&p->rtaddr.sin6_addr, ifinfo);
		}
	}
	free(buf);
}

static void
sendprobe(struct in6_addr *addr, struct ifinfo *ifinfo)
{
	u_char ntopbuf[INET6_ADDRSTRLEN], ifnamebuf[IFNAMSIZ];
	struct sockaddr_in6 sa6_probe;
	struct in6_pktinfo *pi;
	struct cmsghdr *cm;
	u_int32_t ifindex = ifinfo->sdl->sdl_index;
	int hoplimit = 1;

	memset(&sa6_probe, 0, sizeof(sa6_probe));
	sa6_probe.sin6_family = AF_INET6;
	sa6_probe.sin6_len = sizeof(sa6_probe);
	sa6_probe.sin6_addr = *addr;
	sa6_probe.sin6_scope_id = ifinfo->linkid;

	sndmhdr.msg_name = (caddr_t)&sa6_probe;
	sndmhdr.msg_iov[0].iov_base = NULL;
	sndmhdr.msg_iov[0].iov_len = 0;

	cm = CMSG_FIRSTHDR(&sndmhdr);
	/* specify the outgoing interface */
	cm->cmsg_level = IPPROTO_IPV6;
	cm->cmsg_type = IPV6_PKTINFO;
	cm->cmsg_len = CMSG_LEN(sizeof(struct in6_pktinfo));
	pi = (struct in6_pktinfo *)CMSG_DATA(cm);
	memset(&pi->ipi6_addr, 0, sizeof(pi->ipi6_addr));	/*XXX*/
	pi->ipi6_ifindex = ifindex;

	/* specify the hop limit of the packet for safety */
	cm = CMSG_NXTHDR(&sndmhdr, cm);
	cm->cmsg_level = IPPROTO_IPV6;
	cm->cmsg_type = IPV6_HOPLIMIT;
	cm->cmsg_len = CMSG_LEN(sizeof(int));
	memcpy(CMSG_DATA(cm), &hoplimit, sizeof(int));

	warnmsg(LOG_DEBUG, __func__, "probe a router %s on %s",
	    inet_ntop(AF_INET6, addr, ntopbuf, INET6_ADDRSTRLEN),
	    if_indextoname(ifindex, ifnamebuf));

	if (sendmsg(probesock, &sndmhdr, 0))
		warnmsg(LOG_ERR, __func__, "sendmsg on %s: %s",
		    if_indextoname(ifindex, ifnamebuf), strerror(errno));
}
@


1.14
log
@Replace the obsolete ioctl(SIOCGDRLST_IN6) interface with
sysctl(net.inet6.icmp6.nd6_drlist) in rtsold.  Code taken from ndp.
OK henning@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.13 2009/11/11 17:23:16 deraadt Exp $	*/
@


1.13
log
@correctly order the range check and use the right limits, pointed out by parfait
ok claudio millert
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.12 2008/03/24 16:11:05 deraadt Exp $	*/
d37 1
d104 4
a107 2
	struct in6_drlist dr;
	int s, i;
d110 13
a122 2
	if ((s = socket(AF_INET6, SOCK_DGRAM, 0)) < 0) {
		warnmsg(LOG_ERR, __func__, "socket: %s", strerror(errno));
d125 2
a126 4
	memset(&dr, 0, sizeof(dr));
	strlcpy(dr.ifname, "lo0", sizeof dr.ifname); /* dummy interface */
	if (ioctl(s, SIOCGDRLST_IN6, (caddr_t)&dr) < 0) {
		warnmsg(LOG_ERR, __func__, "ioctl(SIOCGDRLST_IN6): %s",
d128 2
a129 1
		goto closeandend;
d132 3
a134 2
	for (i = 0; i < DRLSTSIZ && dr.defrouter[i].if_index; i++) {
		if (ifindex && dr.defrouter[i].if_index == ifindex) {
d136 1
a136 1
			if (!IN6_IS_ADDR_LINKLOCAL(&dr.defrouter[i].rtaddr)) {
d141 1
a141 1
				    &dr.defrouter[i].rtaddr,
d145 1
a145 1
			sendprobe(&dr.defrouter[i].rtaddr, ifinfo);
d148 1
a148 3

closeandend:
	close(s);
@


1.12
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.11 2008/03/18 19:32:19 deraadt Exp $	*/
d119 1
a119 1
	for (i = 0; dr.defrouter[i].if_index && i < PRLSTSIZ; i++) {
@


1.11
log
@correct CMSG_SPACE and CMSG_LEN handling as done in other places.  These
are the complicated cases where multiple messages are sent.  discussed
with kettenis, hshoexer, and rtsol tested by jmc - thanks
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.10 2003/10/05 15:29:28 deraadt Exp $	*/
a66 2
	    CMSG_LEN(sizeof(int));
	int scmsgspace = CMSG_SPACE(sizeof(struct in6_pktinfo)) +
d71 1
a71 1
	    (sndcmsgbuf = (u_char *)malloc(scmsgspace)) == NULL) {
@


1.10
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.9 2002/10/26 20:23:20 itojun Exp $	*/
d67 2
d73 1
a73 1
	    (sndcmsgbuf = (u_char *)malloc(scmsglen)) == NULL) {
@


1.9
log
@use poll(2).  sync w/kame
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.8 2002/06/10 19:57:35 espie Exp $	*/
d64 1
a64 1
probe_init()
@


1.8
log
@Kill __FUNCTION__.
ok itojun@@
@
text
@d1 2
a2 2
/*	$OpenBSD: probe.c,v 1.7 2002/05/31 21:24:28 itojun Exp $	*/
/*	$KAME: probe.c,v 1.14 2002/05/31 10:10:03 itojun Exp $	*/
d112 1
a112 1
	strcpy(dr.ifname, "lo0"); /* dummy interface */
@


1.7
log
@sync w/ latest kame.  link id handling.
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.6 2002/05/31 09:53:26 deraadt Exp $	*/
d72 1
a72 1
		warnmsg(LOG_ERR, __FUNCTION__, "malloc failed");
d77 1
a77 1
		warnmsg(LOG_ERR, __FUNCTION__, "socket: %s", strerror(errno));
d83 1
a83 1
		warnmsg(LOG_ERR, __FUNCTION__, "shutdown: %s", strerror(errno));
d108 1
a108 1
		warnmsg(LOG_ERR, __FUNCTION__, "socket: %s", strerror(errno));
d114 1
a114 1
		warnmsg(LOG_ERR, __FUNCTION__, "ioctl(SIOCGDRLST_IN6): %s",
d123 1
a123 1
				warnmsg(LOG_ERR, __FUNCTION__,
d175 1
a175 1
	warnmsg(LOG_DEBUG, __FUNCTION__, "probe a router %s on %s",
d180 1
a180 1
		warnmsg(LOG_ERR, __FUNCTION__, "sendmsg on %s: %s",
@


1.6
log
@KNF; itojun ok
@
text
@d1 2
a2 2
/*	$OpenBSD: probe.c,v 1.5 2002/05/22 09:09:32 deraadt Exp $	*/
/*	$KAME: probe.c,v 1.10 2000/08/13 06:14:59 itojun Exp $	*/
d41 1
a41 3
#if defined(__FreeBSD__) && __FreeBSD__ >= 3
#include <net/if_var.h>
#endif /* __FreeBSD__ >= 3 */
d61 1
a61 1
static void sendprobe(struct in6_addr *addr, int ifindex);
d100 1
a100 1
defrouter_probe(int ifindex)
d105 1
d111 2
a112 2
	bzero(&dr, sizeof(dr));
	strlcpy(dr.ifname, "lo0", sizeof dr.ifname); /* dummy interface */
d125 1
a125 1
				    "non-linklocal address(%s)",
d131 1
a131 2
			sendprobe(&dr.defrouter[i].rtaddr,
			    dr.defrouter[i].if_index);
d140 1
a140 1
sendprobe(struct in6_addr *addr, int ifindex)
d146 1
d149 1
a149 1
	bzero(&sa6_probe, sizeof(sa6_probe));
d153 1
@


1.5
log
@more strcpy/sprintf death; mpech ok
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.4 2002/02/16 21:28:09 millert Exp $	*/
a64 1

d69 1
a69 1
		CMSG_SPACE(sizeof(int));
d71 1
a71 1
	
a94 1

d99 1
a99 1
 * Probe if each router in the default router list is still alive. 
d104 1
a106 1
	u_char ntopbuf[INET6_ADDRSTRLEN];
d116 1
a116 1
		       strerror(errno));
d120 1
a120 1
	for(i = 0; dr.defrouter[i].if_index && i < PRLSTSIZ; i++) {
d125 5
a129 5
					"default router list contains a "
					"non-linklocal address(%s)",
				       inet_ntop(AF_INET6,
						 &dr.defrouter[i].rtaddr,
						 ntopbuf, INET6_ADDRSTRLEN));
d133 1
a133 1
				  dr.defrouter[i].if_index);
d137 1
a137 1
  closeandend:
a138 1
	return;
d144 1
d148 1
a148 1
	u_char ntopbuf[INET6_ADDRSTRLEN], ifnamebuf[IFNAMSIZ];;
d169 5
a173 9
	{
		int hoplimit = 1;

		cm = CMSG_NXTHDR(&sndmhdr, cm);
		cm->cmsg_level = IPPROTO_IPV6;
		cm->cmsg_type = IPV6_HOPLIMIT;
		cm->cmsg_len = CMSG_LEN(sizeof(int));
		memcpy(CMSG_DATA(cm), &hoplimit, sizeof(int));
	}
d176 2
a177 2
	       inet_ntop(AF_INET6, addr, ntopbuf, INET6_ADDRSTRLEN),
	       if_indextoname(ifindex, ifnamebuf));
d181 1
a181 3
			if_indextoname(ifindex, ifnamebuf), strerror(errno));

	return;
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.3 2000/08/13 18:24:00 itojun Exp $	*/
d115 1
a115 1
	strcpy(dr.ifname, "lo0"); /* dummy interface */
@


1.3
log
@add "rtsol -a" (automatically lookup outgoign interface).
warn if net.inet6.ip6.forwarding == 1.
improve manpage.
use $KAME$ for KAME tags.

sync with kame.
@
text
@d1 1
a1 1
/*	$OpenBSD: probe.c,v 1.2 1999/12/09 15:10:49 itojun Exp $	*/
d63 1
a63 1
static void sendprobe __P((struct in6_addr *addr, int ifindex));
@


1.2
log
@rtsold(8); router solicitation daemon.
rtsol(8); router solicitation program, for use in bootstrap process
(statically linked)

rcsid police.  add missing prototypes.
(sync with KAME)
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d38 1
d56 1
d65 1
d69 9
a77 2
	static u_char sndcmsgbuf[CMSG_SPACE(sizeof(struct in6_pktinfo)) + 
				CMSG_SPACE(sizeof(int))];
d95 1
a95 1
	sndmhdr.msg_controllen = sizeof(sndcmsgbuf);
@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@initial import from KAME tree
@
text
@@
