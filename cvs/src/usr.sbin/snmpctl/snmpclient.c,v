head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.4
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.12
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8;
locks; strict;
comment	@ * @;


1.14
date	2017.08.10.16.03.10;	author rob;	state Exp;
branches;
next	1.13;
commitid	MrqMTf01D21nONaF;

1.13
date	2015.01.16.06.40.21;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	Uu5nFG3wCl0LACBb;

1.12
date	2014.11.18.20.54.29;	author krw;	state Exp;
branches;
next	1.11;
commitid	yCis8OrOsfixbKpI;

1.11
date	2014.05.08.14.48.31;	author mikeb;	state Exp;
branches;
next	1.10;

1.10
date	2014.04.30.07.01.34;	author blambert;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.16.08.52.28;	author blambert;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.07.11.40.09;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.01.20.55.25;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.01.17.32.20;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.01.17.20.39;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.01.15.06.01;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.01.13.46.04;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.01.13.14.18;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.01.12.41.49;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Pledge snmpctl. Ok jca@@, tb@@
@
text
@/*	$OpenBSD: snmpclient.c,v 1.13 2015/01/16 06:40:21 deraadt Exp $	*/

/*
 * Copyright (c) 2013 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/tree.h>

#include <net/if.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <netdb.h>
#include <errno.h>
#include <event.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <poll.h>
#include <err.h>
#include <pwd.h>
#include <vis.h>

#include "snmpd.h"
#include "mib.h"
#include "ber.h"
#include "parser.h"

struct snmpc {
	size_t			 sc_root_len;
	struct ber_oid		 sc_root_oid;
	struct ber_oid		 sc_last_oid;
	struct ber_oid		 sc_oid;
	struct sockaddr_storage	 sc_addr;
	socklen_t		 sc_addr_len;
	u_int32_t		 sc_msgid;
	int			 sc_fd;
	int			 sc_retry;
	int			 sc_retry_max;
	const char		*sc_community;
	int			 sc_version;
	int			 sc_nresp;
};

#define	SNMPC_RETRY_MAX		3
#define SNMPC_COMMUNITY		"public"
#define SNMPC_OID_DEFAULT	"system"
#define SNMPC_OID_ALL		"1.0"
#define SNMPC_MAXREPETITIONS	10

#define	SNMPC_DATEANDTIME_LEN		11
#define	SNMPC_DATEANDTIME_SHORT_LEN	8

void	 snmpc_run(struct snmpc *, enum actions, const char *);
void	 snmpc_request(struct snmpc *, u_long);
int	 snmpc_response(struct snmpc *);
int	 snmpc_sendreq(struct snmpc *, u_long);
int	 snmpc_recvresp(int, int, u_int32_t, struct ber_element **);

struct display_hint *
	 snmpc_display_hint_lookup(struct ber_oid *);
void	 snmpc_display_hint(struct ber_oid *, char **);
char	*snmpc_physaddress(char *);
char	*snmpc_dateandtime(char *);

struct display_hint {
	struct ber_oid		 oid;
	char			*(*print)(char *);
} display_hints[] = {
	{ { { MIB_ifPhysAddress } },		snmpc_physaddress },
	{ { { MIB_ipNetToMediaPhysAddress } },	snmpc_physaddress },
	{ { { MIB_hrSystemDate } },		snmpc_dateandtime }
};

void
snmpclient(struct parse_result *res)
{
	struct snmpc		 sc;
	struct addrinfo		 hints, *ai, *ai0;
	int			 s;
	int			 error;
	u_int			 i;
	struct passwd		*pw;
	struct parse_val	*oid;

	for (i = 0; i < sizeof(display_hints) / sizeof(display_hints[0]); i++)
		smi_oidlen(&display_hints[i].oid);

	bzero(&sc, sizeof(sc));

	/* Get client configuration */
	if (res->community == NULL)
		res->community = strdup(SNMPC_COMMUNITY);
	if (res->version == -1 || res->version > SNMP_V2)
		res->version = SNMP_V2;
	if (res->community == NULL)
		err(1, "strdup");

	/* Checks */
	if ((res->action == BULKWALK) && (res->version < SNMP_V2))
		errx(1, "invalid version for bulkwalk");

	/* Resolve target host name */
	bzero(&hints, sizeof(hints));
	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;
	error = getaddrinfo(res->host, "snmp", &hints, &ai0);
	if (error)
		errx(1, "%s", gai_strerror(error));
	s = -1;
	for (ai = ai0; ai; ai = ai->ai_next) {
		if ((s = socket(ai->ai_family, ai->ai_socktype,
                    ai->ai_protocol)) == -1) {
			continue;
		}
		/* use first available address */
 		break;
	}
	if (s == -1)
		errx(1, "invalid host");

	bcopy(ai->ai_addr, &sc.sc_addr, ai->ai_addrlen);
	sc.sc_addr_len = ai->ai_addrlen;
	freeaddrinfo(ai0);

	/*
	 * Drop privileges to mitigate the risk when running as root.
	 */
	if (geteuid() == 0) {
		if ((pw = getpwnam(SNMPD_USER)) == NULL)
			err(1, "snmpctl: getpwnam");
#ifndef DEBUG
		if (chroot(pw->pw_dir) == -1)
			err(1, "snmpctl: chroot");
		if (chdir("/") == -1)
			err(1, "snmpctl: chdir(\"/\")");
		if (setgroups(1, &pw->pw_gid) ||
		    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
		    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
			err(1, "snmpctl: cannot drop privileges");
#endif
	}

	if (pledge("stdio dns", NULL) == -1)
		fatal("pledge");

	sc.sc_fd = s;
	sc.sc_community = res->community;
	sc.sc_version = res->version;
	sc.sc_retry_max = SNMPC_RETRY_MAX;

	if (TAILQ_EMPTY(&res->oids)) {
			snmpc_run(&sc, res->action, SNMPC_OID_DEFAULT);
	} else {
		TAILQ_FOREACH(oid, &res->oids, val_entry) {
			snmpc_run(&sc, res->action, oid->val);
		}
	}

	close(sc.sc_fd);
}

void
snmpc_run(struct snmpc *sc, enum actions action, const char *oid)
{
	if (strcmp("all", oid) == 0)
		oid = SNMPC_OID_ALL;

	/*
	 * Set up the root OID and get the prefix length to shorten the
	 * printed OID strings of the children.
	 */
	if (smi_string2oid(oid, &sc->sc_oid) == -1)
		errx(1, "oid");

	bcopy(&sc->sc_oid, &sc->sc_root_oid, sizeof(sc->sc_root_oid));
	bcopy(&sc->sc_oid, &sc->sc_last_oid, sizeof(sc->sc_last_oid));
	if (sc->sc_oid.bo_n > 2)
		sc->sc_root_len = sc->sc_oid.bo_n - 1;

	sc->sc_nresp = 0;

	if (action == GET)
		snmpc_request(sc, SNMP_C_GETREQ);
	else if (action == BULKWALK)
		snmpc_request(sc, SNMP_C_GETBULKREQ);
	else
		snmpc_request(sc, SNMP_C_GETNEXTREQ);
}

void
snmpc_request(struct snmpc *sc, u_long type)
{
	struct pollfd		 pfd[1];
	int			 nfds, ret;

	/* Send SNMP request */
	if (snmpc_sendreq(sc, type) == -1)
		err(1, "request failed");

	/* Wait for response */
	pfd[0].fd = sc->sc_fd;
	pfd[0].events = POLLIN;
	nfds = poll(pfd, 1, 3 * 1000);
	if (nfds == -1 || (pfd[0].revents & (POLLERR|POLLHUP|POLLNVAL)))
		errx(1, "poll error");
	if (nfds == 0) {
		if (sc->sc_retry++ < sc->sc_retry_max) {
			warnx("time out, retry %d/%d",
			    sc->sc_retry, sc->sc_retry_max);
			snmpc_request(sc, type);
			return;
		}
		errx(1, "time out");
	}
	sc->sc_retry = 0;

	if ((ret = snmpc_response(sc)) != 0) { 
		if (ret == -1)
			err(1, "response");
		return;
	}	

	if (type == SNMP_C_GETREQ)
		return;

	snmpc_request(sc, type);
}

int
snmpc_response(struct snmpc *sc)
{
	char			 buf[BUFSIZ];
	struct ber_element	*resp = NULL, *s, *e;
	char			*value = NULL, *p;
	int			 ret = 0;

	/* Receive response */
	if (snmpc_recvresp(sc->sc_fd, sc->sc_version,
	    sc->sc_msgid, &resp) == -1)
		return (-1);

	if (ber_scanf_elements(resp, "{SS{SSSS{e}}", &s) != 0)
		goto fail;

	for (; s != NULL; s = s->be_next) {
		if (ber_scanf_elements(s, "{oe}", &sc->sc_oid, &e) != 0)
			goto fail;

		/* Break if the returned OID is not a child of the root. */
		if (sc->sc_nresp &&
		    (ber_oid_cmp(&sc->sc_root_oid, &sc->sc_oid) != 2 ||
		    e->be_class == BER_CLASS_CONTEXT ||
		    e->be_type == BER_TYPE_NULL)) {
			ret = 1; 
			break;
		}		

		if ((value = smi_print_element(e)) != NULL) {
			smi_oid2string(&sc->sc_oid, buf, sizeof(buf),
			    sc->sc_root_len);
			snmpc_display_hint(&sc->sc_oid, &value);
			p = buf;
			if (*p != '\0')
				printf("%s=%s\n", p, value);
			else
				printf("%s\n", value);
			free(value);
		}
		bcopy(&sc->sc_oid, &sc->sc_last_oid, sizeof(sc->sc_last_oid));
	}

	sc->sc_nresp++;

	ber_free_elements(resp);
	return (ret);

 fail:
	if (resp != NULL)
		ber_free_elements(resp);
	errno = EINVAL;
	return (-1);
}

void
snmpc_display_hint(struct ber_oid *oid, char **val)
{
	struct display_hint	*h;
	char			*newval;

	if (*val == NULL || strlen(*val) == 0)
		return;

	if ((h = snmpc_display_hint_lookup(oid)) == NULL)
		return;
	/* best-effort translation */
	if ((newval = h->print(*val)) == NULL)
		return;

	free(*val);
	*val = newval;
}

char *
snmpc_physaddress(char *v)
{
	char			 buf[ETHER_ADDR_LEN + 2];
	char			*str;
	ssize_t			 n;

	n = strnunvis(buf, v, ETHER_ADDR_LEN + 2);
	if (n == -1 || n != ETHER_ADDR_LEN + 2)
		return (NULL);
	if (asprintf(&str, "\"%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx\"",
	    buf[1], buf[2], buf[3], buf[4], buf[5], buf[6]) == -1)
		return (NULL);
	return (str);
}

char *
snmpc_dateandtime(char *v)
{
	char			 buf[SNMPC_DATEANDTIME_LEN + 2];
	u_int16_t		 year;
	char			*str;
	ssize_t			 n;

	if ((n = strnunvis(buf, v, SNMPC_DATEANDTIME_LEN + 2)) == -1)
		return (NULL);

	bcopy(&buf[1], &year, sizeof(year));
	year = ntohs(year);

	switch (n) {
	case SNMPC_DATEANDTIME_SHORT_LEN + 2:
		if (asprintf(&str,
		    "\"%hu-%.02hhu-%.02hhu %.02hhu:%.02hhu:%.02hhu\"",
		    year, buf[3], buf[4], buf[5], buf[6], buf[7]) == -1)
			return (NULL);
		break;
	case SNMPC_DATEANDTIME_LEN + 2:
		if (asprintf(&str,
		    "\"%hu-%.02hhu-%.02hhu %.02hhu:%.02hhu:%.02hhu"
		    "%c%.02hhu%.02hhu\"",
		    year, buf[3], buf[4], buf[5], buf[6],
		    buf[7], buf[9], buf[10], buf[11]) == -1)
			return (NULL);
		break;
	default:
		return (NULL);
	}

	return (str);
}

struct display_hint *
snmpc_display_hint_lookup(struct ber_oid *oid)
{
	u_int			 i, j, found;

	for (i = 0; i < sizeof(display_hints) / sizeof(display_hints[0]); i++) {
		if (oid->bo_n < display_hints[i].oid.bo_n)
			continue;
		found = 1;
		for (j = 0; j < display_hints[i].oid.bo_n; j++) {
			if (oid->bo_id[j] != display_hints[i].oid.bo_id[j]) {
				found = 0;
				break;
			}
		}

		if (found)
			return (&display_hints[i]);
	}
	return (NULL);
}

int
snmpc_sendreq(struct snmpc *sc, u_long type)
{
	struct ber_element	*root, *b;
	struct ber		 ber;
	ssize_t			 len;
	u_int8_t		*ptr;
	int			 erroridx = 0;

	if (type == SNMP_C_GETBULKREQ)
		erroridx = SNMPC_MAXREPETITIONS;

	/* SNMP header */
	sc->sc_msgid = arc4random();
	if ((root = ber_add_sequence(NULL)) == NULL)
		return (-1);
	if ((b = ber_printf_elements(root, "ds{tddd{{O0}}",
	    sc->sc_version, sc->sc_community, BER_CLASS_CONTEXT, type,
	    sc->sc_msgid, 0, erroridx, &sc->sc_oid)) == NULL) {
		errno = EINVAL;
		goto fail;
	}

#ifdef DEBUG
	fprintf(stderr, "REQUEST(%lu):\n", type);
	smi_debug_elements(root);
#endif

	bzero(&ber, sizeof(ber));
	ber.fd = -1;

	len = ber_write_elements(&ber, root);
	if (ber_get_writebuf(&ber, (void *)&ptr) < 1)
		goto berfail;

	if (sendto(sc->sc_fd, ptr, len, 0,
	    (struct sockaddr *)&sc->sc_addr, sc->sc_addr_len) == -1)
		goto berfail;

	ber_free_elements(root);
	ber_free(&ber);
	return (0);

berfail:
	ber_free(&ber);
fail:
	ber_free_elements(root);
	return (-1);
}

int
snmpc_recvresp(int s, int msgver, u_int32_t msgid,
    struct ber_element **respptr)
{
	char			 buf[READ_BUF_SIZE];
	ssize_t			 rlen;
	struct ber		 ber;
	struct ber_element	*resp = NULL;
	char			*comn;
	long long		 ver, id;

	if ((rlen = recv(s, buf, sizeof(buf), MSG_WAITALL)) == -1)
		return (-1);

	bzero(&ber, sizeof(ber));
	ber.fd = -1;
	ber_set_application(&ber, smi_application);
	ber_set_readbuf(&ber, buf, rlen);

#ifdef DEBUG
	fprintf(stderr, "RESPONSE (%ld bytes):\n", rlen);
#endif

	resp = ber_read_elements(&ber, NULL);
	if (resp == NULL)
		goto fail;

#ifdef DEBUG
	smi_debug_elements(resp);
#endif

	if (ber_scanf_elements(resp, "{is{i", &ver, &comn, &id) != 0)
		goto fail;
	if (!(msgver == (int)ver && msgid == (u_int32_t)id))
		goto fail;

	*respptr = resp;
	return (0);

 fail:
	if (resp != NULL)
		ber_free_elements(resp);
	errno = EINVAL;
	return (-1);
}
@


1.13
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.12 2014/11/18 20:54:29 krw Exp $	*/
d162 3
@


1.12
log
@Nuke more obvious #include duplications.

ok deraadt@@ millert@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.11 2014/05/08 14:48:31 mikeb Exp $	*/
a19 1
#include <sys/param.h>
@


1.11
log
@Pretty print MIB_ipNetToMediaPhysAddress'es;  ok blambert
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.10 2014/04/30 07:01:34 blambert Exp $	*/
a37 1
#include <unistd.h>
@


1.10
log
@replace vis-ified output with human-readable strings
for a few OIDs, with a framework in place to add more
as the mood strikes

ok reyk@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.9 2014/04/16 08:52:28 blambert Exp $	*/
d91 3
a93 2
	{ { { MIB_ifPhysAddress } },	snmpc_physaddress },
	{ { { MIB_hrSystemDate } },	snmpc_dateandtime }
@


1.9
log
@close memory leaks in snmp client code

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.8 2013/10/07 11:40:09 reyk Exp $	*/
d43 1
d72 3
d81 14
d102 1
d106 3
d279 1
d300 93
@


1.8
log
@Allow to specify the "oid" option multiple times, eg.
snmpctl walk 127.0.0.1 oid system oid ifName
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.7 2013/10/01 20:55:25 reyk Exp $	*/
d293 3
a295 2
	if ((root = ber_add_sequence(NULL)) == NULL ||
	    (b = ber_printf_elements(root, "ds{tddd{{O0}}",
d299 1
a299 1
		return (-1);
d312 1
a312 1
		return (-1);
d316 1
a316 1
		return (-1);
d318 2
d321 6
@


1.7
log
@Remove incorret check for bulk walks.
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.6 2013/10/01 17:32:20 reyk Exp $	*/
d67 2
a68 1
#define SNMPC_OID		"system"
d71 1
d85 1
a89 4
	if (res->oid == NULL)
		res->oid = strdup(SNMPC_OID);
	else if (strcmp("all", res->oid) == 0)
		res->oid = strdup("1.0");
d94 1
a94 1
	if (res->oid == NULL || res->community == NULL)
a123 17
	sc.sc_fd = s;
	sc.sc_retry_max = SNMPC_RETRY_MAX;
	sc.sc_community = res->community;
	sc.sc_version = res->version;

	/*
	 * Set up the root OID and get the prefix length to shorten the
	 * printed OID strings of the children.
	 */
	if (smi_string2oid(res->oid, &sc.sc_oid) == -1)
		errx(1, "oid");

	bcopy(&sc.sc_oid, &sc.sc_root_oid, sizeof(sc.sc_root_oid));
	bcopy(&sc.sc_oid, &sc.sc_last_oid, sizeof(sc.sc_last_oid));
	if (sc.sc_oid.bo_n > 2)
		sc.sc_root_len = sc.sc_oid.bo_n - 1;

d142 12
a153 6
	if (res->action == GET)
		snmpc_request(&sc, SNMP_C_GETREQ);
	else if (res->action == BULKWALK)
		snmpc_request(&sc, SNMP_C_GETBULKREQ);
	else
		snmpc_request(&sc, SNMP_C_GETNEXTREQ);
d156 28
@


1.6
log
@Accept "oid all" for the complete SNMP tree (as an alias to "oid 1.0").
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.5 2013/10/01 17:20:39 reyk Exp $	*/
d215 1
a215 1
	int			 c, ret = 0;
d225 1
a225 1
	for (c = 0; s != NULL; s = s->be_next, c++) {
a228 3
		if (c && ber_oid_cmp(&sc->sc_oid, &sc->sc_last_oid) == 0)
			continue;

d232 1
@


1.5
log
@Initial support for the "bulkwalk" command.
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.4 2013/10/01 15:06:01 reyk Exp $	*/
d89 2
@


1.4
log
@Drop privileges when running as root to mitigate the risk.
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.3 2013/10/01 13:46:04 reyk Exp $	*/
a23 1
#include <sys/un.h>
d32 1
d68 1
d96 4
d160 2
d201 1
a201 1
	if (type != SNMP_C_GETNEXTREQ)
d211 1
a211 1
	struct ber_element	*resp = NULL, *e;
d213 1
d220 1
a220 2
	if (ber_scanf_elements(resp, "{SS{SSSS{{oe}}}",
	    &sc->sc_oid, &e) != 0)
d223 6
a228 7
	/* Return if the returned OID is not a child of the requested root */
	if (sc->sc_nresp++ &&
	    (ber_oid_cmp(&sc->sc_root_oid, &sc->sc_oid) != 2 ||
	    e->be_type == BER_TYPE_NULL)) {
		ber_free_elements(resp);
		return (1); /* ignore response */
	}
d230 19
a248 8
	if ((value = smi_print_element(e)) != NULL) {
		smi_oid2string(&sc->sc_oid, buf, sizeof(buf), sc->sc_root_len);
		p = buf;
		if (*p != '\0')
			printf("%s=%s\n", p, value);
		else
			printf("%s\n", value);
		free(value);
a249 1
	ber_free_elements(resp);
d251 1
a251 1
	bcopy(&sc->sc_oid, &sc->sc_last_oid, sizeof(sc->sc_last_oid));
d253 2
a254 1
	return (0);
d270 4
d280 1
a280 1
	    sc->sc_msgid, 0, 0, &sc->sc_oid)) == NULL) {
@


1.3
log
@Reorganize the code a bit to adjust it for an async I/O model.
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.2 2013/10/01 13:14:18 reyk Exp $	*/
d42 1
d81 1
d134 18
@


1.2
log
@better error handling
@
text
@d1 1
a1 1
/*	$OpenBSD: snmpclient.c,v 1.1 2013/10/01 12:41:49 reyk Exp $	*/
d68 4
a71 4
int	 snmpc_req(int, int, const char *, struct ber_oid *,
	    struct sockaddr *, socklen_t, u_int32_t *, u_long);
void	 snmpc_getreq(struct snmpc *, u_long);
int	 snmpc_getresp(int, int, u_int32_t, struct ber_element **);
d134 1
a134 1
		snmpc_getreq(&sc, SNMP_C_GETREQ);
d136 1
a136 1
		snmpc_getreq(&sc, SNMP_C_GETNEXTREQ);
d142 1
a142 1
snmpc_getreq(struct snmpc *sc, u_long cmd)
a143 3
	struct ber_element	*resp = NULL, *e;
	char			*value = NULL, *p;
	char			 buf[BUFSIZ];
d145 1
a145 1
	int			 nfds;
d148 1
a148 3
	if (snmpc_req(sc->sc_fd, sc->sc_version, sc->sc_community, &sc->sc_oid,
	    (struct sockaddr *)&sc->sc_addr, sc->sc_addr_len,
	    &sc->sc_msgid, cmd) == -1)
d161 1
a161 1
			snmpc_getreq(sc, cmd);
d168 19
d188 1
a188 1
	if (snmpc_getresp(sc->sc_fd, sc->sc_version,
d190 1
a190 1
		err(1, "invalid response");
d194 1
a194 1
		errx(1, "invalid response header");
d201 1
a201 1
		return;
d217 1
a217 2
	if (cmd != SNMP_C_GETNEXTREQ)
		return;
d219 5
a223 1
	snmpc_getreq(sc, cmd);
d227 1
a227 2
snmpc_req(int s, int version, const char *community, struct ber_oid *oid,
    struct sockaddr *addr, socklen_t addrlen, u_int32_t *msgid, u_long type)
d235 1
a235 1
	*msgid = arc4random();
d238 2
a239 2
	    version, community, BER_CLASS_CONTEXT, type,
	    *msgid, 0, 0, oid)) == NULL) {
d256 2
a257 1
	if (sendto(s, ptr, len, 0, addr, addrlen) == -1)
d264 1
a264 1
snmpc_getresp(int s, int msgver, u_int32_t msgid,
@


1.1
log
@Add initial SNMP client utility to snmpctl(8).
For example, snmpctl snmp walk 127.0.0.1

commit it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 1
	char			 sc_root[BUFSIZ];
d68 1
a68 1
void	 snmpc_req(int, int, const char *, struct ber_oid *,
d71 1
a71 2
struct ber_element
	*snmpc_getresp(int, int, u_int32_t);
d81 3
d93 1
a111 1
	bzero(&sc, sizeof(sc));
d114 2
d121 4
d128 2
a129 5
	/*
	 * Get the size of the requested root OID to shorten the output
	 * of its children.
	 */
	smi_oid2string(&sc.sc_oid, sc.sc_root, sizeof(sc.sc_root), 0);
a132 3
	bcopy(&sc.sc_oid, &sc.sc_root_oid, sizeof(sc.sc_root_oid));
	bcopy(&sc.sc_oid, &sc.sc_last_oid, sizeof(sc.sc_last_oid));

d138 1
a138 2
	close(s);
	freeaddrinfo(ai0);
d150 2
a151 1
	snmpc_req(sc->sc_fd, sc->sc_version, sc->sc_community, &sc->sc_oid,
d153 2
a154 1
	    &sc->sc_msgid, cmd);
d156 1
a156 1
	/* Wait for input */
d173 4
a176 3
	if ((resp = snmpc_getresp(sc->sc_fd, sc->sc_version,
	    sc->sc_msgid)) == NULL)
		errx(1, "invalid response");
d180 1
a180 1
		err(1, "response");
d182 1
d185 2
a186 1
	    e->be_type == BER_TYPE_NULL))
d188 1
d209 1
a209 1
void
d223 4
a226 2
	    *msgid, 0, 0, oid)) == NULL)
		err(1, "invalid elements");
d238 1
a238 1
		err(1, "sendto");
d241 3
a243 1
		err(1, "sendto");
d246 3
a248 2
struct ber_element *
snmpc_getresp(int s, int msgver, u_int32_t msgid)
d253 1
a253 1
	struct ber_element	*resp;
d258 1
a258 1
		err(1, "recv");
d271 1
a271 1
		err(1, "ber_read_elements");
d278 9
a286 2
		err(1, "response");
	if (!(msgver == (int)ver && msgid == (u_int32_t)id)) {
d288 2
a289 4
		return (NULL);
	}

	return (resp);
@

