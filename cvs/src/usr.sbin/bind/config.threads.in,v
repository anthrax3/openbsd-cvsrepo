head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.42
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.40
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.36
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.38
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.30
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.34
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.32
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.28
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.26
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.24
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.22
	OPENBSD_5_0:1.1.1.2.0.20
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.18
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.16
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.12
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.14
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.10
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.8
	OPENBSD_4_4_BASE:1.1.1.2
	BIND_9_4_2_P1:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.6
	OPENBSD_4_3_BASE:1.1.1.2
	BIND_9_4_2:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.4
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.2
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	BIND_9_3_2:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.04.05.16.41.33;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.05.16.41.33;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.01.10.18.17.55;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#
# Begin pthreads checking.
#
# First, decide whether to use multithreading or not.
#
# Enable multithreading by default on systems where it is known
# to work well, and where debugging of multithreaded programs
# is supported.
#

AC_MSG_CHECKING(whether to build with thread support)

case $host in
*-dec-osf*)
	use_threads=true ;;
[*-solaris2.[0-6]])
	# Thread signals are broken on Solaris 2.6; they are sometimes
	# delivered to the wrong thread.
	use_threads=false ;;
*-solaris*)
	use_threads=true ;;
*-ibm-aix*)
	use_threads=true ;;
*-hp-hpux10*)
	use_threads=false ;;
*-hp-hpux11*)
	use_threads=true ;;
*-sgi-irix*)
	use_threads=true ;;
*-sco-sysv*uw*|*-*-sysv*UnixWare*)
        # UnixWare
	use_threads=false ;;
*-*-sysv*OpenUNIX*)
        # UnixWare
	use_threads=true ;;
*-netbsd*)
	if test -r /usr/lib/libpthread.so ; then
	    use_threads=true
	else
	    # Socket I/O optimizations introduced in 9.2 expose a
	    # bug in unproven-pthreads; see PR #12650
	    use_threads=false
	fi
	;;
*-openbsd*)
	# OpenBSD users have reported that named dumps core on
	# startup when built with threads.
	use_threads=false ;;
*-freebsd*)
	use_threads=false ;;
*-bsdi[234]*)
	# Thread signals do not work reliably on some versions of BSD/OS.
	use_threads=false ;;
*-bsdi5*)
	use_threads=true ;;
*-linux*)
   	# Threads are disabled on Linux by default because most
	# Linux kernels produce unusable core dumps from multithreaded
	# programs, and because of limitations in setuid().
	use_threads=false ;;	
*)
	use_threads=false ;;
esac

AC_ARG_ENABLE(threads,
	[  --enable-threads	enable multithreading])
case "$enable_threads" in
	yes)
		use_threads=true
		;;
	no)
		use_threads=false
		;;
	'')
		# Use system-dependent default
		;;
	*)
	    	AC_MSG_ERROR([--enable-threads takes yes or no])
		;;
esac

if $use_threads
then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)	
fi

if $use_threads
then
	#
	# Search for / configure pthreads in a system-dependent fashion.
	#
	case "$host" in
	  *-netbsd*)
		# NetBSD has multiple pthreads implementations.	 The
		# recommended one to use is "unproven-pthreads".  The
		# older "mit-pthreads" may also work on some NetBSD
		# versions.  The PTL2 thread library does not
		# currently work with bind9, but can be chosen with
		# the --with-ptl2 option for those who wish to
		# experiment with it.
		CC="gcc"
		AC_MSG_CHECKING(which NetBSD thread library to use)

		AC_ARG_WITH(ptl2,
[  --with-ptl2		on NetBSD, use the ptl2 thread library (experimental)],
		    use_ptl2="$withval", use_ptl2="no")

		: ${LOCALBASE:=/usr/pkg}

		if test "X$use_ptl2" = "Xyes"
		then
			AC_MSG_RESULT(PTL2)
			AC_MSG_WARN(
[linking with PTL2 is highly experimental and not expected to work])
			CC=ptlgcc
		else
			if test -r /usr/lib/libpthread.so
			then
				AC_MSG_RESULT(native)
				LIBS="-lpthread $LIBS"
			else
				if test ! -d $LOCALBASE/pthreads
				then
					AC_MSG_RESULT(none)
					AC_MSG_ERROR("could not find thread libraries")
				fi

				if $use_threads
				then
					AC_MSG_RESULT(mit-pthreads/unproven-pthreads)
					pkg="$LOCALBASE/pthreads"
					lib1="-L$pkg/lib -Wl,-R$pkg/lib"
					lib2="-lpthread -lm -lgcc -lpthread"
					LIBS="$lib1 $lib2 $LIBS"
					CPPFLAGS="$CPPFLAGS -I$pkg/include"
					STD_CINCLUDES="$STD_CINCLUDES -I$pkg/include"
				fi
			fi
		fi
		;;
		*)
			AC_CHECK_LIB(pthread, pthread_create,,
				AC_CHECK_LIB(pthread, __pthread_create,,
				AC_CHECK_LIB(pthread, __pthread_create_system,,
				AC_CHECK_LIB(c_r, pthread_create,,
				AC_CHECK_LIB(c, pthread_create,,
				AC_MSG_ERROR("could not find thread libraries"))))))
		;;
	esac
fi
@


1.1.1.1
log
@ISC BIND release 9.3.2
@
text
@@


1.1.1.2
log
@ISC BIND release 9.3.3
@
text
@a142 25
		*-freebsd*)
			# We don't want to set -lpthread as that break
			# the ability to choose threads library at final
			# link time and is not valid for all architectures.
			
			PTHREAD=
			if test "X$GCC" = "Xyes"; then
				saved_cc="$CC"
				CC="$CC -pthread"
				AC_MSG_CHECKING(for gcc -pthread support);
				AC_TRY_LINK([#include <pthread.h>],
					    [printf("%x\n", pthread_create);],
					    PTHREAD="yes"
					    AC_MSG_RESULT(yes),
					    AC_MSG_RESULT(no))
				CC="$saved_cc"
			fi
			if test "X$PTHREAD" != "Xyes"; then
				AC_CHECK_LIB(pthread, pthread_create,,
				AC_CHECK_LIB(thr, thread_create,,
				AC_CHECK_LIB(c_r, pthread_create,,
				AC_CHECK_LIB(c, pthread_create,,
				AC_MSG_ERROR("could not find thread libraries")))))
			fi
			;;
@

