head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.08.25.07.08.33;	author brad;	state dead;
branches;
next	1.5;
commitid	zKogyOACFMOV70QE;

1.5
date	2007.12.09.13.39.43;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.33;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.04;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.14.14.05;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.06.17;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.06.17;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.33.15;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.42.22;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.21;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Start removing unused documentation and the server and related binaries source
code.
@
text
@<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
<!--
 - Copyright (C) 2004-2007  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000-2003  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and/or distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: nsupdate.docbook,v 1.18.18.10 2007/08/28 07:20:01 tbox Exp $ -->
<refentry>
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>
  <refmeta>
    <refentrytitle>nsupdate</refentrytitle>
    <manvolnum>8</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>nsupdate</refname>
    <refpurpose>Dynamic DNS update utility</refpurpose>
  </refnamediv>

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <year>2006</year>
      <year>2007</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>nsupdate</command>
      <arg><option>-d</option></arg>
      <group>
        <arg><option>-y <replaceable class="parameter"><optional>hmac:</optional>keyname:secret</replaceable></option></arg>
        <arg><option>-k <replaceable class="parameter">keyfile</replaceable></option></arg>
      </group>
      <arg><option>-t <replaceable class="parameter">timeout</replaceable></option></arg>
      <arg><option>-u <replaceable class="parameter">udptimeout</replaceable></option></arg>
      <arg><option>-r <replaceable class="parameter">udpretries</replaceable></option></arg>
      <arg><option>-v</option></arg>
      <arg>filename</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>
    <para><command>nsupdate</command>
      is used to submit Dynamic DNS Update requests as defined in RFC2136
      to a name server.
      This allows resource records to be added or removed from a zone
      without manually editing the zone file.
      A single update request can contain requests to add or remove more than
      one
      resource record.
    </para>
    <para>
      Zones that are under dynamic control via
      <command>nsupdate</command>
      or a DHCP server should not be edited by hand.
      Manual edits could
      conflict with dynamic updates and cause data to be lost.
    </para>
    <para>
      The resource records that are dynamically added or removed with
      <command>nsupdate</command>
      have to be in the same zone.
      Requests are sent to the zone's master server.
      This is identified by the MNAME field of the zone's SOA record.
    </para>
    <para>
      The
      <option>-d</option>
      option makes
      <command>nsupdate</command>
      operate in debug mode.
      This provides tracing information about the update requests that are
      made and the replies received from the name server.
    </para>
    <para>
      Transaction signatures can be used to authenticate the Dynamic DNS
      updates.
      These use the TSIG resource record type described in RFC2845 or the
      SIG(0) record described in RFC3535 and RFC2931.
      TSIG relies on a shared secret that should only be known to
      <command>nsupdate</command> and the name server.
      Currently, the only supported encryption algorithm for TSIG is
      HMAC-MD5, which is defined in RFC 2104.
      Once other algorithms are defined for TSIG, applications will need to
      ensure they select the appropriate algorithm as well as the key when
      authenticating each other.
      For instance, suitable
      <type>key</type>
      and
      <type>server</type>
      statements would be added to
      <filename>/etc/named.conf</filename>
      so that the name server can associate the appropriate secret key
      and algorithm with the IP address of the
      client application that will be using TSIG authentication.
      SIG(0) uses public key cryptography.  To use a SIG(0) key, the public
      key must be stored in a KEY record in a zone served by the name server.
      <command>nsupdate</command>
      does not read
      <filename>/etc/named.conf</filename>.
    </para>
    <para><command>nsupdate</command>
      uses the <option>-y</option> or <option>-k</option> option
      to provide the shared secret needed to generate a TSIG record
      for authenticating Dynamic DNS update requests, default type
      HMAC-MD5.  These options are mutually exclusive.  With the
      <option>-k</option> option, <command>nsupdate</command> reads
      the shared secret from the file <parameter>keyfile</parameter>,
      whose name is of the form
      <filename>K{name}.+157.+{random}.private</filename>.  For
      historical reasons, the file
      <filename>K{name}.+157.+{random}.key</filename> must also be
      present.  When the <option>-y</option> option is used, a
      signature is generated from
      <optional><parameter>hmac:</parameter></optional><parameter>keyname:secret.</parameter>
      <parameter>keyname</parameter> is the name of the key, and
      <parameter>secret</parameter> is the base64 encoded shared
      secret.  Use of the <option>-y</option> option is discouraged
      because the shared secret is supplied as a command line
      argument in clear text.  This may be visible in the output
      from
      <citerefentry>
	<refentrytitle>ps</refentrytitle><manvolnum>1</manvolnum>
      </citerefentry> or in a history file maintained by the user's
      shell.
    </para>
    <para>
      The <option>-k</option> may also be used to specify a SIG(0) key used
      to authenticate Dynamic DNS update requests.  In this case, the key
      specified is not an HMAC-MD5 key.
    </para>
    <para>
      By default
      <command>nsupdate</command>
      uses UDP to send update requests to the name server unless they are too
      large to fit in a UDP request in which case TCP will be used.
      The
      <option>-v</option>
      option makes
      <command>nsupdate</command>
      use a TCP connection.
      This may be preferable when a batch of update requests is made.
    </para>
    <para>
      The <option>-t</option> option sets the maximum time an update request
      can
      take before it is aborted.  The default is 300 seconds.  Zero can be
      used
      to disable the timeout.
    </para>
    <para>
      The <option>-u</option> option sets the UDP retry interval.  The default
      is
      3 seconds.  If zero, the interval will be computed from the timeout
      interval
      and number of UDP retries.
    </para>
    <para>
      The <option>-r</option> option sets the number of UDP retries. The
      default is
      3.  If zero, only one update request will be made.
    </para>
  </refsect1>

  <refsect1>
    <title>INPUT FORMAT</title>
    <para><command>nsupdate</command>
      reads input from
      <parameter>filename</parameter>
      or standard input.
      Each command is supplied on exactly one line of input.
      Some commands are for administrative purposes.
      The others are either update instructions or prerequisite checks on the
      contents of the zone.
      These checks set conditions that some name or set of
      resource records (RRset) either exists or is absent from the zone.
      These conditions must be met if the entire update request is to succeed.
      Updates will be rejected if the tests for the prerequisite conditions
      fail.
    </para>
    <para>
      Every update request consists of zero or more prerequisites
      and zero or more updates.
      This allows a suitably authenticated update request to proceed if some
      specified resource records are present or missing from the zone.
      A blank input line (or the <command>send</command> command)
      causes the
      accumulated commands to be sent as one Dynamic DNS update request to the
      name server.
    </para>
    <para>
      The command formats and their meaning are as follows:
      <variablelist>

        <varlistentry>
          <term>
              <command>server</command>
              <arg choice="req">servername</arg>
              <arg choice="opt">port</arg>
            </term>
          <listitem>
            <para>
              Sends all dynamic update requests to the name server
              <parameter>servername</parameter>.
              When no server statement is provided,
              <command>nsupdate</command>
              will send updates to the master server of the correct zone.
              The MNAME field of that zone's SOA record will identify the
              master
              server for that zone.
              <parameter>port</parameter>
              is the port number on
              <parameter>servername</parameter>
              where the dynamic update requests get sent.
              If no port number is specified, the default DNS port number of
              53 is
              used.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>local</command>
              <arg choice="req">address</arg>
              <arg choice="opt">port</arg>
            </term>
          <listitem>
            <para>
              Sends all dynamic update requests using the local
              <parameter>address</parameter>.

              When no local statement is provided,
              <command>nsupdate</command>
              will send updates using an address and port chosen by the
              system.
              <parameter>port</parameter>
              can additionally be used to make requests come from a specific
              port.
              If no port number is specified, the system will assign one.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>zone</command>
              <arg choice="req">zonename</arg>
            </term>
          <listitem>
            <para>
              Specifies that all updates are to be made to the zone
              <parameter>zonename</parameter>.
              If no
              <parameter>zone</parameter>
              statement is provided,
              <command>nsupdate</command>
              will attempt determine the correct zone to update based on the
              rest of the input.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>class</command>
              <arg choice="req">classname</arg>
            </term>
          <listitem>
            <para>
              Specify the default class.
              If no <parameter>class</parameter> is specified, the
              default class is
              <parameter>IN</parameter>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>key</command>
              <arg choice="req">name</arg>
              <arg choice="req">secret</arg>
            </term>
          <listitem>
            <para>
              Specifies that all updates are to be TSIG-signed using the
              <parameter>keyname</parameter> <parameter>keysecret</parameter> pair.
              The <command>key</command> command
              overrides any key specified on the command line via
              <option>-y</option> or <option>-k</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq nxdomain</command>
              <arg choice="req">domain-name</arg>
            </term>
          <listitem>
            <para>
              Requires that no resource record of any type exists with name
              <parameter>domain-name</parameter>.
            </para>
          </listitem>
        </varlistentry>


        <varlistentry>
          <term>
              <command>prereq yxdomain</command>
              <arg choice="req">domain-name</arg>
            </term>
          <listitem>
            <para>
              Requires that
              <parameter>domain-name</parameter>
              exists (has as at least one resource record, of any type).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq nxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
            </term>
          <listitem>
            <para>
              Requires that no resource record exists of the specified
              <parameter>type</parameter>,
              <parameter>class</parameter>
              and
              <parameter>domain-name</parameter>.
              If
              <parameter>class</parameter>
              is omitted, IN (internet) is assumed.
            </para>
          </listitem>
        </varlistentry>


        <varlistentry>
          <term>
              <command>prereq yxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
            </term>
          <listitem>
            <para>
              This requires that a resource record of the specified
              <parameter>type</parameter>,
              <parameter>class</parameter>
              and
              <parameter>domain-name</parameter>
              must exist.
              If
              <parameter>class</parameter>
              is omitted, IN (internet) is assumed.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq yxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
              <arg choice="req" rep="repeat">data</arg>
            </term>
          <listitem>
            <para>
              The
              <parameter>data</parameter>
              from each set of prerequisites of this form
              sharing a common
              <parameter>type</parameter>,
              <parameter>class</parameter>,
              and
              <parameter>domain-name</parameter>
              are combined to form a set of RRs.  This set of RRs must
              exactly match the set of RRs existing in the zone at the
              given
              <parameter>type</parameter>,
              <parameter>class</parameter>,
              and
              <parameter>domain-name</parameter>.
              The
              <parameter>data</parameter>
              are written in the standard text representation of the resource
              record's
              RDATA.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>update delete</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">ttl</arg>
              <arg choice="opt">class</arg>
              <arg choice="opt">type <arg choice="opt" rep="repeat">data</arg></arg>
            </term>
          <listitem>
            <para>
              Deletes any resource records named
              <parameter>domain-name</parameter>.
              If
              <parameter>type</parameter>
              and
              <parameter>data</parameter>
              is provided, only matching resource records will be removed.
              The internet class is assumed if
              <parameter>class</parameter>
              is not supplied.  The
              <parameter>ttl</parameter>
              is ignored, and is only allowed for compatibility.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>update add</command>
              <arg choice="req">domain-name</arg>
              <arg choice="req">ttl</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
              <arg choice="req" rep="repeat">data</arg>
            </term>
          <listitem>
            <para>
              Adds a new resource record with the specified
              <parameter>ttl</parameter>,
              <parameter>class</parameter>
              and
              <parameter>data</parameter>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>show</command>
            </term>
          <listitem>
            <para>
              Displays the current message, containing all of the
              prerequisites and
              updates specified since the last send.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>send</command>
            </term>
          <listitem>
            <para>
              Sends the current message.  This is equivalent to entering a
              blank line.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>answer</command>
            </term>
          <listitem>
            <para>
              Displays the answer.
            </para>
          </listitem>
        </varlistentry>

      </variablelist>
    </para>

    <para>
      Lines beginning with a semicolon are comments and are ignored.
    </para>

  </refsect1>

  <refsect1>
    <title>EXAMPLES</title>
    <para>
      The examples below show how
      <command>nsupdate</command>
      could be used to insert and delete resource records from the
      <type>example.com</type>
      zone.
      Notice that the input in each example contains a trailing blank line so
      that
      a group of commands are sent as one dynamic update request to the
      master name server for
      <type>example.com</type>.

      <programlisting>
# nsupdate
&gt; update delete oldhost.example.com A
&gt; update add newhost.example.com 86400 A 172.16.1.1
&gt; send
</programlisting>
    </para>
    <para>
      Any A records for
      <type>oldhost.example.com</type>
      are deleted.
      And an A record for
      <type>newhost.example.com</type>
      with IP address 172.16.1.1 is added.
      The newly-added record has a 1 day TTL (86400 seconds).
      <programlisting>
# nsupdate
&gt; prereq nxdomain nickname.example.com
&gt; update add nickname.example.com 86400 CNAME somehost.example.com
&gt; send
</programlisting>
    </para>
    <para>
      The prerequisite condition gets the name server to check that there
      are no resource records of any type for
      <type>nickname.example.com</type>.

      If there are, the update request fails.
      If this name does not exist, a CNAME for it is added.
      This ensures that when the CNAME is added, it cannot conflict with the
      long-standing rule in RFC1034 that a name must not exist as any other
      record type if it exists as a CNAME.
      (The rule has been updated for DNSSEC in RFC2535 to allow CNAMEs to have
      RRSIG, DNSKEY and NSEC records.)
    </para>
  </refsect1>

  <refsect1>
    <title>FILES</title>

    <variablelist>
      <varlistentry>
        <term><constant>/etc/resolv.conf</constant></term>
        <listitem>
          <para>
            used to identify default name server
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>K{name}.+157.+{random}.key</constant></term>
        <listitem>
          <para>
            base-64 encoding of HMAC-MD5 key created by
            <citerefentry>
              <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
            </citerefentry>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>K{name}.+157.+{random}.private</constant></term>
        <listitem>
          <para>
            base-64 encoding of HMAC-MD5 key created by
            <citerefentry>
              <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
            </citerefentry>.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>RFC2136</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC3007</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2104</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2845</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC1034</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2535</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2931</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>named</refentrytitle><manvolnum>8</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
      </citerefentry>.
    </para>

  </refsect1>
  <refsect1>
    <title>BUGS</title>
    <para>
      The TSIG key is redundantly stored in two separate files.
      This is a consequence of nsupdate using the DST library
      for its cryptographic operations, and may change in future
      releases.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


1.5
log
@resolve conflicts
@
text
@@


1.4
log
@resolve conflicts
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and distribute this software for any
d21 1
a21 2
<!-- $ISC: nsupdate.docbook,v 1.8.2.3.2.10 2005/05/12 21:36:03 sra Exp $ -->

d23 12
a34 8
<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>
<refmeta>
<refentrytitle>nsupdate</refentrytitle>
<manvolnum>8</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>
d40 2
d53 481
a533 495
<refnamediv>
<refname>nsupdate</refname>
<refpurpose>Dynamic DNS update utility</refpurpose>
</refnamediv>
<refsynopsisdiv>
<cmdsynopsis>
<command>nsupdate</command>
<arg><option>-d</option></arg>
<group>
  <arg><option>-y <replaceable class="parameter">keyname:secret</replaceable></option></arg>
  <arg><option>-k <replaceable class="parameter">keyfile</replaceable></option></arg>
</group>
<arg><option>-t <replaceable class="parameter">timeout</replaceable></option></arg>
<arg><option>-u <replaceable class="parameter">udptimeout</replaceable></option></arg>
<arg><option>-r <replaceable class="parameter">udpretries</replaceable></option></arg>
<arg><option>-v</option></arg>
<arg>filename</arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>
<para>
<command>nsupdate</command>
is used to submit Dynamic DNS Update requests as defined in RFC2136
to a name server.
This allows resource records to be added or removed from a zone
without manually editing the zone file.
A single update request can contain requests to add or remove more than one
resource record.
</para>
<para>
Zones that are under dynamic control via
<command>nsupdate</command>
or a DHCP server should not be edited by hand.
Manual edits could
conflict with dynamic updates and cause data to be lost.
</para>
<para>
The resource records that are dynamically added or removed with
<command>nsupdate</command>
have to be in the same zone.
Requests are sent to the zone's master server.
This is identified by the MNAME field of the zone's SOA record.
</para>
<para>
The
<option>-d</option>
option makes
<command>nsupdate</command>
operate in debug mode.
This provides tracing information about the update requests that are
made and the replies received from the name server.
</para>
<para>
Transaction signatures can be used to authenticate the Dynamic DNS
updates.
These use the TSIG resource record type described in RFC2845 or the
SIG(0) record described in RFC3535 and RFC2931.
TSIG relies on a shared secret that should only be known to
<command>nsupdate</command> and the name server.
Currently, the only supported encryption algorithm for TSIG is
HMAC-MD5, which is defined in RFC 2104.
Once other algorithms are defined for TSIG, applications will need to
ensure they select the appropriate algorithm as well as the key when
authenticating each other.
For instance suitable
<type>key</type>
and
<type>server</type>
statements would be added to
<filename>/etc/named.conf</filename>
so that the name server can associate the appropriate secret key
and algorithm with the IP address of the
client application that will be using TSIG authentication.
SIG(0) uses public key cryptography.  To use a SIG(0) key, the public
key must be stored in a KEY record in a zone served by the name server.
<command>nsupdate</command>
does not read
<filename>/etc/named.conf</filename>.
</para>
<para>
<command>nsupdate</command>
uses the
<option>-y</option>
or
<option>-k</option>
option (with an HMAC-MD5 key) to provide the shared secret needed to generate
a TSIG record for authenticating Dynamic DNS update requests.
These options are mutually exclusive.
With the
<option>-k</option>
option,
<command>nsupdate</command>
reads the shared secret from the file
<parameter>keyfile</parameter>,
whose name is of the form 
<filename>K{name}.+157.+{random}.private</filename>.
For historical
reasons, the file 
<filename>K{name}.+157.+{random}.key</filename>
must also be present.  When the
<option>-y</option>
option is used, a signature is generated from
<parameter>keyname:secret.</parameter>
<parameter>keyname</parameter>
is the name of the key,
and
<parameter>secret</parameter>
is the base64 encoded shared secret.
Use of the
<option>-y</option>
option is discouraged because the shared secret is supplied as a command
line argument in clear text.
This may be visible in the output from
<citerefentry>
<refentrytitle>ps</refentrytitle><manvolnum>1
</manvolnum>
</citerefentry>
or in a history file maintained by the user's shell.
</para>
<para>
The <option>-k</option> may also be used to specify a SIG(0) key used
to authenticate Dynamic DNS update requests.  In this case, the key
specified is not an HMAC-MD5 key.
</para>
<para>
By default
<command>nsupdate</command>
uses UDP to send update requests to the name server unless they are too
large to fit in a UDP request in which case TCP will be used.
The
<option>-v</option>
option makes
<command>nsupdate</command>
use a TCP connection.
This may be preferable when a batch of update requests is made.
</para>
<para>The <option>-t</option> option sets the maximum time a update request can
take before it is aborted.  The default is 300 seconds.  Zero can be used
to disable the timeout.
</para>
<para>The <option>-u</option> option sets the UDP retry interval.  The default is
3 seconds.  If zero the interval will be computed from the timeout interval
and number of UDP retries.
</para>
<para>The <option>-r</option> option sets the number of UDP retries. The default is
3.  If zero only one update request will be made.
</para>
</refsect1>

<refsect1>
<title>INPUT FORMAT</title>
<para>
<command>nsupdate</command>
reads input from
<parameter>filename</parameter>
or standard input.
Each command is supplied on exactly one line of input.
Some commands are for administrative purposes.
The others are either update instructions or prerequisite checks on the
contents of the zone.
These checks set conditions that some name or set of
resource records (RRset) either exists or is absent from the zone.
These conditions must be met if the entire update request is to succeed.
Updates will be rejected if the tests for the prerequisite conditions fail.
</para>
<para>
Every update request consists of zero or more prerequisites
and zero or more updates.
This allows a suitably authenticated update request to proceed if some
specified resource records are present or missing from the zone.
A blank input line (or the <command>send</command> command) causes the
accumulated commands to be sent as one Dynamic DNS update request to the
name server.
</para>
<para>
The command formats and their meaning are as follows:
<variablelist>
<varlistentry><term>
<cmdsynopsis>
<command>server</command>
<arg choice="req">servername</arg>
<arg choice="opt">port</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Sends all dynamic update requests to the name server
<parameter>servername</parameter>.
When no server statement is provided,
<command>nsupdate</command>
will send updates to the master server of the correct zone.
The MNAME field of that zone's SOA record will identify the master
server for that zone.
<parameter>port</parameter>
is the port number on
<parameter>servername</parameter>
where the dynamic update requests get sent.
If no port number is specified, the default DNS port number of 53 is
used.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>local</command>
<arg choice="req">address</arg>
<arg choice="opt">port</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Sends all dynamic update requests using the local
<parameter>address</parameter>.

When no local statement is provided,
<command>nsupdate</command>
will send updates using an address and port chosen by the system.
<parameter>port</parameter>
can additionally be used to make requests come from a specific port.
If no port number is specified, the system will assign one.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>zone</command>
<arg choice="req">zonename</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Specifies that all updates are to be made to the zone
<parameter>zonename</parameter>.
If no
<parameter>zone</parameter>
statement is provided,
<command>nsupdate</command>
will attempt determine the correct zone to update based on the rest of the input.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>class</command>
<arg choice="req">classname</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Specify the default class.
If no <parameter>class</parameter> is specified the default class is
<parameter>IN</parameter>.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>key</command>
<arg choice="req">name</arg>
<arg choice="req">secret</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Specifies that all updates are to be TSIG signed using the
<parameter>keyname</parameter> <parameter>keysecret</parameter> pair.
The <command>key</command> command
overrides any key specified on the command line via
<option>-y</option> or <option>-k</option>.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>prereq nxdomain</command>
<arg choice="req">domain-name</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Requires that no resource record of any type exists with name
<parameter>domain-name</parameter>.
</para>
</listitem>
</varlistentry>


<varlistentry><term>
<cmdsynopsis>
<command>prereq yxdomain</command>
<arg choice="req">domain-name</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Requires that
<parameter>domain-name</parameter>
exists (has as at least one resource record, of any type).
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>prereq nxrrset</command>
<arg choice="req">domain-name</arg>
<arg choice="opt">class</arg>
<arg choice="req">type</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Requires that no resource record exists of the specified
<parameter>type</parameter>,
<parameter>class</parameter>
and
<parameter>domain-name</parameter>.
If
<parameter>class</parameter>
is omitted, IN (internet) is assumed.
</para>
</listitem>
</varlistentry>


<varlistentry><term>
<cmdsynopsis>
<command>prereq yxrrset</command>
<arg choice="req">domain-name</arg>
<arg choice="opt">class</arg>
<arg choice="req">type</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
This requires that a resource record of the specified
<parameter>type</parameter>,
<parameter>class</parameter>
and
<parameter>domain-name</parameter>
must exist.
If
<parameter>class</parameter>
is omitted, IN (internet) is assumed.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>prereq yxrrset</command>
<arg choice="req">domain-name</arg>
<arg choice="opt">class</arg>
<arg choice="req">type</arg>
<arg choice="req" rep="repeat">data</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
The
<parameter>data</parameter>
from each set of prerequisites of this form
sharing a common
<parameter>type</parameter>,
<parameter>class</parameter>,
and 
<parameter>domain-name</parameter>
are combined to form a set of RRs.  This set of RRs must
exactly match the set of RRs existing in the zone at the
given 
<parameter>type</parameter>,
<parameter>class</parameter>,
and 
<parameter>domain-name</parameter>.
The
<parameter>data</parameter>
are written in the standard text representation of the resource record's
RDATA.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>update delete</command>
<arg choice="req">domain-name</arg>
<arg choice="opt">ttl</arg>
<arg choice="opt">class</arg>
<arg choice="opt">type <arg choice="opt" rep="repeat">data</arg></arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Deletes any resource records named
<parameter>domain-name</parameter>.
If
<parameter>type</parameter>
and
<parameter>data</parameter>
is provided, only matching resource records will be removed.
The internet class is assumed if
<parameter>class</parameter>
is not supplied.  The
<parameter>ttl</parameter>
is ignored, and is only allowed for compatibility.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>update add</command>
<arg choice="req">domain-name</arg>
<arg choice="req">ttl</arg>
<arg choice="opt">class</arg>
<arg choice="req">type</arg>
<arg choice="req" rep="repeat">data</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Adds a new resource record with the specified
<parameter>ttl</parameter>,
<parameter>class</parameter>
and
<parameter>data</parameter>.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>show</command>
</cmdsynopsis>
</term>
<listitem>
<para>
Displays the current message, containing all of the prerequisites and
updates specified since the last send.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>send</command>
</cmdsynopsis>
</term>
<listitem>
<para>
Sends the current message.  This is equivalent to entering a blank line.
</para>
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>answer</command>
</cmdsynopsis>
</term>
<listitem>
<para>
Displays the answer.
</para>
</listitem>
</varlistentry>

</variablelist>
</para>

<para>
Lines beginning with a semicolon are comments and are ignored.
</para>

</refsect1>

<refsect1>
<title>EXAMPLES</title>
<para>
The examples below show how
<command>nsupdate</command>
could be used to insert and delete resource records from the
<type>example.com</type>
zone.
Notice that the input in each example contains a trailing blank line so that
a group of commands are sent as one dynamic update request to the
master name server for
<type>example.com</type>.
d535 1
a535 1
<programlisting>
d537 3
a539 3
> update delete oldhost.example.com A
> update add newhost.example.com 86400 A 172.16.1.1
> send
d541 10
a550 10
</para>
<para>
Any A records for
<type>oldhost.example.com</type>
are deleted.
and an A record for
<type>newhost.example.com</type>
it IP address 172.16.1.1 is added.
The newly-added record has a 1 day TTL (86400 seconds)
<programlisting>
d552 3
a554 3
> prereq nxdomain nickname.example.com
> update add nickname.example.com 86400 CNAME somehost.example.com
> send
d556 102
a657 94
</para>
<para>
The prerequisite condition gets the name server to check that there
are no resource records of any type for
<type>nickname.example.com</type>.

If there are, the update request fails.
If this name does not exist, a CNAME for it is added.
This ensures that when the CNAME is added, it cannot conflict with the
long-standing rule in RFC1034 that a name must not exist as any other
record type if it exists as a CNAME.
(The rule has been updated for DNSSEC in RFC2535 to allow CNAMEs to have
RRSIG, DNSKEY and NSEC records.)
</para>
</refsect1>

<refsect1>
<title>FILES</title>

<variablelist>
<varlistentry><term><constant>/etc/resolv.conf</constant></term>
<listitem>
<para>
used to identify default name server
</para>
</listitem>
</varlistentry>

<varlistentry><term><constant>K{name}.+157.+{random}.key</constant></term>
<listitem>
<para>
base-64 encoding of HMAC-MD5 key created by
<citerefentry>
<refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
</citerefentry>.
</para>
</listitem>
</varlistentry>

<varlistentry><term><constant>K{name}.+157.+{random}.private</constant></term>
<listitem>
<para>
base-64 encoding of HMAC-MD5 key created by
<citerefentry>
<refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
</citerefentry>.
</para>
</listitem>
</varlistentry>
</variablelist>
</refsect1>

<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>RFC2136</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC3007</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC2104</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC2845</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC1034</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC2535</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>RFC2931</refentrytitle>
</citerefentry>,
<citerefentry>
<refentrytitle>named</refentrytitle><manvolnum>8</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
</citerefentry>.
</para>
</refsect1>
<refsect1>
<title>BUGS</title>
<para>
The TSIG key is redundantly stored in two separate files.
This is a consequence of nsupdate using the DST library
for its cryptographic operations, and may change in future
releases.
</para>
</refsect1>
</refentry>
@


1.3
log
@resolve conflicts
@
text
@d1 3
a3 1
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
d5 2
a6 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001-2003  Internet Software Consortium.
d21 1
a21 1
<!-- $ISC: nsupdate.docbook,v 1.8.2.3.2.8 2004/03/08 04:04:23 marka Exp $ -->
d32 16
d250 2
d271 3
d508 1
d520 1
d523 1
d591 1
d602 1
d613 1
d647 1
a647 1

@


1.2
log
@update to BIND v9.2.3. ok todd@@
@
text
@d3 2
a4 1
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d10 7
a16 8
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: nsupdate.docbook,v 1.8.2.3 2003/07/22 04:03:36 marka Exp $ -->
d42 3
d87 4
a90 4
These use the TSIG resource record type described in RFC2845.
The signatures rely on a shared secret that should only be known to
<command>nsupdate</command>
and the name server.
d105 2
d117 2
a118 2
option to provide the shared secret needed to generate a TSIG record
for authenticating Dynamic DNS update requests.
d152 5
d159 2
a160 1
uses UDP to send update requests to the name server.
d168 11
d268 17
d301 2
d315 2
d331 2
d352 3
d377 2
d411 2
d438 2
d459 2
d472 2
d485 12
d500 1
a500 1
Lines beginning with a semicolon are comments, and are ignored.
d522 1
a522 1
>
d537 1
a537 1
>
d551 1
a551 1
SIG, KEY and NXT records.)
d608 3
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 - Copyright (C) 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: nsupdate.docbook,v 1.8.2.1 2001/11/27 18:57:40 gson Exp $ -->
d225 1
a225 1
will send updates using an address and port choosen by the system.
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d3 1
a3 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001-2003  Internet Software Consortium.
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: nsupdate.docbook,v 1.8.2.3.2.8 2004/03/08 04:04:23 marka Exp $ -->
a41 3
<arg><option>-t <replaceable class="parameter">timeout</replaceable></option></arg>
<arg><option>-u <replaceable class="parameter">udptimeout</replaceable></option></arg>
<arg><option>-r <replaceable class="parameter">udpretries</replaceable></option></arg>
d84 4
a87 4
These use the TSIG resource record type described in RFC2845 or the
SIG(0) record described in RFC3535 and RFC2931.
TSIG relies on a shared secret that should only be known to
<command>nsupdate</command> and the name server.
a101 2
SIG(0) uses public key cryptography.  To use a SIG(0) key, the public
key must be stored in a KEY record in a zone served by the name server.
d112 2
a113 2
option (with an HMAC-MD5 key) to provide the shared secret needed to generate
a TSIG record for authenticating Dynamic DNS update requests.
a146 5
The <option>-k</option> may also be used to specify a SIG(0) key used
to authenticate Dynamic DNS update requests.  In this case, the key
specified is not an HMAC-MD5 key.
</para>
<para>
d149 1
a149 2
uses UDP to send update requests to the name server unless they are too
large to fit in a UDP request in which case TCP will be used.
a156 11
<para>The <option>-t</option> option sets the maximum time a update request can
take before it is aborted.  The default is 300 seconds.  Zero can be used
to disable the timeout.
</para>
<para>The <option>-u</option> option sets the UDP retry interval.  The default is
3 seconds.  If zero the interval will be computed from the timeout interval
and number of UDP retries.
</para>
<para>The <option>-r</option> option sets the number of UDP retries. The default is
3.  If zero only one update request will be made.
</para>
d225 1
a225 1
will send updates using an address and port chosen by the system.
a245 17
</listitem>
</varlistentry>

<varlistentry><term>
<cmdsynopsis>
<command>class</command>
<arg choice="req">classname</arg>
</cmdsynopsis>
</term>
<listitem>
<para>
Specify the default class.
If no <parameter>class</parameter> is specified the default class is
<parameter>IN</parameter>.
</para>
</listitem>
</varlistentry>
a261 2
</listitem>
</varlistentry>
a273 2
</listitem>
</varlistentry>
a287 2
</listitem>
</varlistentry>
a306 3
</para>
</listitem>
</varlistentry>
a328 2
</listitem>
</varlistentry>
a360 2
</listitem>
</varlistentry>
a385 2
</listitem>
</varlistentry>
a404 2
</listitem>
</varlistentry>
a415 2
</listitem>
</varlistentry>
a426 12

<varlistentry><term>
<cmdsynopsis>
<command>answer</command>
</cmdsynopsis>
</term>
<listitem>
<para>
Displays the answer.
</para>
</listitem>

d430 1
a430 1
Lines beginning with a semicolon are comments and are ignored.
d452 1
a452 1
> send
d467 1
a467 1
> send
d481 1
a481 1
RRSIG, DNSKEY and NSEC records.)
a537 3
</citerefentry>,
<citerefentry>
<refentrytitle>RFC2931</refentrytitle>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000-2003  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: nsupdate.docbook,v 1.8.2.3.2.10 2005/05/12 21:36:03 sra Exp $ -->
a29 16

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>

a231 2
</listitem>
</varlistentry>
a250 3
</para>
</listitem>
</varlistentry>
a484 1
</varlistentry>
a495 1
</varlistentry>
a497 1
</para>
a564 1
</varlistentry>
a574 1
</varlistentry>
a584 1
</varlistentry>
d618 1
a618 1
</para>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004-2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: nsupdate.docbook,v 1.18.18.10 2007/08/28 07:20:01 tbox Exp $ -->
d24 8
a31 12
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>
  <refmeta>
    <refentrytitle>nsupdate</refentrytitle>
    <manvolnum>8</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>nsupdate</refname>
    <refpurpose>Dynamic DNS update utility</refpurpose>
  </refnamediv>
a36 2
      <year>2006</year>
      <year>2007</year>
d48 495
a542 481
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>nsupdate</command>
      <arg><option>-d</option></arg>
      <group>
        <arg><option>-y <replaceable class="parameter"><optional>hmac:</optional>keyname:secret</replaceable></option></arg>
        <arg><option>-k <replaceable class="parameter">keyfile</replaceable></option></arg>
      </group>
      <arg><option>-t <replaceable class="parameter">timeout</replaceable></option></arg>
      <arg><option>-u <replaceable class="parameter">udptimeout</replaceable></option></arg>
      <arg><option>-r <replaceable class="parameter">udpretries</replaceable></option></arg>
      <arg><option>-v</option></arg>
      <arg>filename</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>
    <para><command>nsupdate</command>
      is used to submit Dynamic DNS Update requests as defined in RFC2136
      to a name server.
      This allows resource records to be added or removed from a zone
      without manually editing the zone file.
      A single update request can contain requests to add or remove more than
      one
      resource record.
    </para>
    <para>
      Zones that are under dynamic control via
      <command>nsupdate</command>
      or a DHCP server should not be edited by hand.
      Manual edits could
      conflict with dynamic updates and cause data to be lost.
    </para>
    <para>
      The resource records that are dynamically added or removed with
      <command>nsupdate</command>
      have to be in the same zone.
      Requests are sent to the zone's master server.
      This is identified by the MNAME field of the zone's SOA record.
    </para>
    <para>
      The
      <option>-d</option>
      option makes
      <command>nsupdate</command>
      operate in debug mode.
      This provides tracing information about the update requests that are
      made and the replies received from the name server.
    </para>
    <para>
      Transaction signatures can be used to authenticate the Dynamic DNS
      updates.
      These use the TSIG resource record type described in RFC2845 or the
      SIG(0) record described in RFC3535 and RFC2931.
      TSIG relies on a shared secret that should only be known to
      <command>nsupdate</command> and the name server.
      Currently, the only supported encryption algorithm for TSIG is
      HMAC-MD5, which is defined in RFC 2104.
      Once other algorithms are defined for TSIG, applications will need to
      ensure they select the appropriate algorithm as well as the key when
      authenticating each other.
      For instance, suitable
      <type>key</type>
      and
      <type>server</type>
      statements would be added to
      <filename>/etc/named.conf</filename>
      so that the name server can associate the appropriate secret key
      and algorithm with the IP address of the
      client application that will be using TSIG authentication.
      SIG(0) uses public key cryptography.  To use a SIG(0) key, the public
      key must be stored in a KEY record in a zone served by the name server.
      <command>nsupdate</command>
      does not read
      <filename>/etc/named.conf</filename>.
    </para>
    <para><command>nsupdate</command>
      uses the <option>-y</option> or <option>-k</option> option
      to provide the shared secret needed to generate a TSIG record
      for authenticating Dynamic DNS update requests, default type
      HMAC-MD5.  These options are mutually exclusive.  With the
      <option>-k</option> option, <command>nsupdate</command> reads
      the shared secret from the file <parameter>keyfile</parameter>,
      whose name is of the form
      <filename>K{name}.+157.+{random}.private</filename>.  For
      historical reasons, the file
      <filename>K{name}.+157.+{random}.key</filename> must also be
      present.  When the <option>-y</option> option is used, a
      signature is generated from
      <optional><parameter>hmac:</parameter></optional><parameter>keyname:secret.</parameter>
      <parameter>keyname</parameter> is the name of the key, and
      <parameter>secret</parameter> is the base64 encoded shared
      secret.  Use of the <option>-y</option> option is discouraged
      because the shared secret is supplied as a command line
      argument in clear text.  This may be visible in the output
      from
      <citerefentry>
	<refentrytitle>ps</refentrytitle><manvolnum>1</manvolnum>
      </citerefentry> or in a history file maintained by the user's
      shell.
    </para>
    <para>
      The <option>-k</option> may also be used to specify a SIG(0) key used
      to authenticate Dynamic DNS update requests.  In this case, the key
      specified is not an HMAC-MD5 key.
    </para>
    <para>
      By default
      <command>nsupdate</command>
      uses UDP to send update requests to the name server unless they are too
      large to fit in a UDP request in which case TCP will be used.
      The
      <option>-v</option>
      option makes
      <command>nsupdate</command>
      use a TCP connection.
      This may be preferable when a batch of update requests is made.
    </para>
    <para>
      The <option>-t</option> option sets the maximum time an update request
      can
      take before it is aborted.  The default is 300 seconds.  Zero can be
      used
      to disable the timeout.
    </para>
    <para>
      The <option>-u</option> option sets the UDP retry interval.  The default
      is
      3 seconds.  If zero, the interval will be computed from the timeout
      interval
      and number of UDP retries.
    </para>
    <para>
      The <option>-r</option> option sets the number of UDP retries. The
      default is
      3.  If zero, only one update request will be made.
    </para>
  </refsect1>

  <refsect1>
    <title>INPUT FORMAT</title>
    <para><command>nsupdate</command>
      reads input from
      <parameter>filename</parameter>
      or standard input.
      Each command is supplied on exactly one line of input.
      Some commands are for administrative purposes.
      The others are either update instructions or prerequisite checks on the
      contents of the zone.
      These checks set conditions that some name or set of
      resource records (RRset) either exists or is absent from the zone.
      These conditions must be met if the entire update request is to succeed.
      Updates will be rejected if the tests for the prerequisite conditions
      fail.
    </para>
    <para>
      Every update request consists of zero or more prerequisites
      and zero or more updates.
      This allows a suitably authenticated update request to proceed if some
      specified resource records are present or missing from the zone.
      A blank input line (or the <command>send</command> command)
      causes the
      accumulated commands to be sent as one Dynamic DNS update request to the
      name server.
    </para>
    <para>
      The command formats and their meaning are as follows:
      <variablelist>

        <varlistentry>
          <term>
              <command>server</command>
              <arg choice="req">servername</arg>
              <arg choice="opt">port</arg>
            </term>
          <listitem>
            <para>
              Sends all dynamic update requests to the name server
              <parameter>servername</parameter>.
              When no server statement is provided,
              <command>nsupdate</command>
              will send updates to the master server of the correct zone.
              The MNAME field of that zone's SOA record will identify the
              master
              server for that zone.
              <parameter>port</parameter>
              is the port number on
              <parameter>servername</parameter>
              where the dynamic update requests get sent.
              If no port number is specified, the default DNS port number of
              53 is
              used.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>local</command>
              <arg choice="req">address</arg>
              <arg choice="opt">port</arg>
            </term>
          <listitem>
            <para>
              Sends all dynamic update requests using the local
              <parameter>address</parameter>.

              When no local statement is provided,
              <command>nsupdate</command>
              will send updates using an address and port chosen by the
              system.
              <parameter>port</parameter>
              can additionally be used to make requests come from a specific
              port.
              If no port number is specified, the system will assign one.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>zone</command>
              <arg choice="req">zonename</arg>
            </term>
          <listitem>
            <para>
              Specifies that all updates are to be made to the zone
              <parameter>zonename</parameter>.
              If no
              <parameter>zone</parameter>
              statement is provided,
              <command>nsupdate</command>
              will attempt determine the correct zone to update based on the
              rest of the input.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>class</command>
              <arg choice="req">classname</arg>
            </term>
          <listitem>
            <para>
              Specify the default class.
              If no <parameter>class</parameter> is specified, the
              default class is
              <parameter>IN</parameter>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>key</command>
              <arg choice="req">name</arg>
              <arg choice="req">secret</arg>
            </term>
          <listitem>
            <para>
              Specifies that all updates are to be TSIG-signed using the
              <parameter>keyname</parameter> <parameter>keysecret</parameter> pair.
              The <command>key</command> command
              overrides any key specified on the command line via
              <option>-y</option> or <option>-k</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq nxdomain</command>
              <arg choice="req">domain-name</arg>
            </term>
          <listitem>
            <para>
              Requires that no resource record of any type exists with name
              <parameter>domain-name</parameter>.
            </para>
          </listitem>
        </varlistentry>


        <varlistentry>
          <term>
              <command>prereq yxdomain</command>
              <arg choice="req">domain-name</arg>
            </term>
          <listitem>
            <para>
              Requires that
              <parameter>domain-name</parameter>
              exists (has as at least one resource record, of any type).
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq nxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
            </term>
          <listitem>
            <para>
              Requires that no resource record exists of the specified
              <parameter>type</parameter>,
              <parameter>class</parameter>
              and
              <parameter>domain-name</parameter>.
              If
              <parameter>class</parameter>
              is omitted, IN (internet) is assumed.
            </para>
          </listitem>
        </varlistentry>


        <varlistentry>
          <term>
              <command>prereq yxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
            </term>
          <listitem>
            <para>
              This requires that a resource record of the specified
              <parameter>type</parameter>,
              <parameter>class</parameter>
              and
              <parameter>domain-name</parameter>
              must exist.
              If
              <parameter>class</parameter>
              is omitted, IN (internet) is assumed.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>prereq yxrrset</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
              <arg choice="req" rep="repeat">data</arg>
            </term>
          <listitem>
            <para>
              The
              <parameter>data</parameter>
              from each set of prerequisites of this form
              sharing a common
              <parameter>type</parameter>,
              <parameter>class</parameter>,
              and
              <parameter>domain-name</parameter>
              are combined to form a set of RRs.  This set of RRs must
              exactly match the set of RRs existing in the zone at the
              given
              <parameter>type</parameter>,
              <parameter>class</parameter>,
              and
              <parameter>domain-name</parameter>.
              The
              <parameter>data</parameter>
              are written in the standard text representation of the resource
              record's
              RDATA.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>update delete</command>
              <arg choice="req">domain-name</arg>
              <arg choice="opt">ttl</arg>
              <arg choice="opt">class</arg>
              <arg choice="opt">type <arg choice="opt" rep="repeat">data</arg></arg>
            </term>
          <listitem>
            <para>
              Deletes any resource records named
              <parameter>domain-name</parameter>.
              If
              <parameter>type</parameter>
              and
              <parameter>data</parameter>
              is provided, only matching resource records will be removed.
              The internet class is assumed if
              <parameter>class</parameter>
              is not supplied.  The
              <parameter>ttl</parameter>
              is ignored, and is only allowed for compatibility.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>update add</command>
              <arg choice="req">domain-name</arg>
              <arg choice="req">ttl</arg>
              <arg choice="opt">class</arg>
              <arg choice="req">type</arg>
              <arg choice="req" rep="repeat">data</arg>
            </term>
          <listitem>
            <para>
              Adds a new resource record with the specified
              <parameter>ttl</parameter>,
              <parameter>class</parameter>
              and
              <parameter>data</parameter>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>show</command>
            </term>
          <listitem>
            <para>
              Displays the current message, containing all of the
              prerequisites and
              updates specified since the last send.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>send</command>
            </term>
          <listitem>
            <para>
              Sends the current message.  This is equivalent to entering a
              blank line.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
              <command>answer</command>
            </term>
          <listitem>
            <para>
              Displays the answer.
            </para>
          </listitem>
        </varlistentry>

      </variablelist>
    </para>

    <para>
      Lines beginning with a semicolon are comments and are ignored.
    </para>

  </refsect1>

  <refsect1>
    <title>EXAMPLES</title>
    <para>
      The examples below show how
      <command>nsupdate</command>
      could be used to insert and delete resource records from the
      <type>example.com</type>
      zone.
      Notice that the input in each example contains a trailing blank line so
      that
      a group of commands are sent as one dynamic update request to the
      master name server for
      <type>example.com</type>.
d544 1
a544 1
      <programlisting>
d546 3
a548 3
&gt; update delete oldhost.example.com A
&gt; update add newhost.example.com 86400 A 172.16.1.1
&gt; send
d550 10
a559 10
    </para>
    <para>
      Any A records for
      <type>oldhost.example.com</type>
      are deleted.
      And an A record for
      <type>newhost.example.com</type>
      with IP address 172.16.1.1 is added.
      The newly-added record has a 1 day TTL (86400 seconds).
      <programlisting>
d561 3
a563 3
&gt; prereq nxdomain nickname.example.com
&gt; update add nickname.example.com 86400 CNAME somehost.example.com
&gt; send
d565 94
a658 102
    </para>
    <para>
      The prerequisite condition gets the name server to check that there
      are no resource records of any type for
      <type>nickname.example.com</type>.

      If there are, the update request fails.
      If this name does not exist, a CNAME for it is added.
      This ensures that when the CNAME is added, it cannot conflict with the
      long-standing rule in RFC1034 that a name must not exist as any other
      record type if it exists as a CNAME.
      (The rule has been updated for DNSSEC in RFC2535 to allow CNAMEs to have
      RRSIG, DNSKEY and NSEC records.)
    </para>
  </refsect1>

  <refsect1>
    <title>FILES</title>

    <variablelist>
      <varlistentry>
        <term><constant>/etc/resolv.conf</constant></term>
        <listitem>
          <para>
            used to identify default name server
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>K{name}.+157.+{random}.key</constant></term>
        <listitem>
          <para>
            base-64 encoding of HMAC-MD5 key created by
            <citerefentry>
              <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
            </citerefentry>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>K{name}.+157.+{random}.private</constant></term>
        <listitem>
          <para>
            base-64 encoding of HMAC-MD5 key created by
            <citerefentry>
              <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
            </citerefentry>.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>RFC2136</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC3007</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2104</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2845</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC1034</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2535</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>RFC2931</refentrytitle>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>named</refentrytitle><manvolnum>8</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>dnssec-keygen</refentrytitle><manvolnum>8</manvolnum>
      </citerefentry>.
    </para>

  </refsect1>
  <refsect1>
    <title>BUGS</title>
    <para>
      The TSIG key is redundantly stored in two separate files.
      This is a consequence of nsupdate using the DST library
      for its cryptographic operations, and may change in future
      releases.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


