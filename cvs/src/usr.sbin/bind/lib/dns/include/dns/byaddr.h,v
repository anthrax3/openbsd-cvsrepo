head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.36
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.32
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.34
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.26
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.30
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.28
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.24
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.22
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.20
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.06;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.14.14.06;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.16;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.16;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.09;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.47;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.4
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 2000-2003  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: byaddr.h,v 1.16.18.2 2005/04/29 00:16:09 marka Exp $ */

#ifndef DNS_BYADDR_H
#define DNS_BYADDR_H 1

/*****
 ***** Module Info
 *****/

/*! \file
 * \brief
 * The byaddr module provides reverse lookup services for IPv4 and IPv6
 * addresses.
 *
 * MP:
 *\li	The module ensures appropriate synchronization of data structures it
 *	creates and manipulates.
 *
 * Reliability:
 *\li	No anticipated impact.
 *
 * Resources:
 *\li	TBS
 *
 * Security:
 *\li	No anticipated impact.
 *
 * Standards:
 *\li	RFCs:	1034, 1035, 2181, TBS
 *\li	Drafts:	TBS
 */

#include <isc/lang.h>
#include <isc/event.h>

#include <dns/types.h>

ISC_LANG_BEGINDECLS

/*%
 * A 'dns_byaddrevent_t' is returned when a byaddr completes.
 * The sender field will be set to the byaddr that completed.  If 'result'
 * is ISC_R_SUCCESS, then 'names' will contain a list of names associated
 * with the address.  The recipient of the event must not change the list
 * and must not refer to any of the name data after the event is freed.
 */
typedef struct dns_byaddrevent {
	ISC_EVENT_COMMON(struct dns_byaddrevent);
	isc_result_t			result;
	dns_namelist_t			names;
} dns_byaddrevent_t;

/*
 * This option is deprecated since we now only consider nibbles.
#define DNS_BYADDROPT_IPV6NIBBLE	0x0001
 */
/*% Note DNS_BYADDROPT_IPV6NIBBLE is now deprecated. */
#define DNS_BYADDROPT_IPV6INT		0x0002

isc_result_t
dns_byaddr_create(isc_mem_t *mctx, isc_netaddr_t *address, dns_view_t *view,
		  unsigned int options, isc_task_t *task,
		  isc_taskaction_t action, void *arg, dns_byaddr_t **byaddrp);
/*%<
 * Find the domain name of 'address'.
 *
 * Notes:
 *
 *\li	There is a reverse lookup format for IPv6 addresses, 'nibble'
 *
 *\li	The 'nibble' format for that address is
 *
 * \code
 *   1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa.
 * \endcode
 *
 *\li	#DNS_BYADDROPT_IPV6INT can be used to get nibble lookups under ip6.int.
 *
 * Requires:
 *
 *\li	'mctx' is a valid mctx.
 *
 *\li	'address' is a valid IPv4 or IPv6 address.
 *
 *\li	'view' is a valid view which has a resolver.
 *
 *\li	'task' is a valid task.
 *
 *\li	byaddrp != NULL && *byaddrp == NULL
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 *
 *\li	Any resolver-related error (e.g. #ISC_R_SHUTTINGDOWN) may also be
 *	returned.
 */

void
dns_byaddr_cancel(dns_byaddr_t *byaddr);
/*%<
 * Cancel 'byaddr'.
 *
 * Notes:
 *
 *\li	If 'byaddr' has not completed, post its #BYADDRDONE event with a
 *	result code of #ISC_R_CANCELED.
 *
 * Requires:
 *
 *\li	'byaddr' is a valid byaddr.
 */

void
dns_byaddr_destroy(dns_byaddr_t **byaddrp);
/*%<
 * Destroy 'byaddr'.
 *
 * Requires:
 *
 *\li	'*byaddrp' is a valid byaddr.
 *
 *\li	The caller has received the BYADDRDONE event (either because the
 *	byaddr completed or because dns_byaddr_cancel() was called).
 *
 * Ensures:
 *
 *\li	*byaddrp == NULL.
 */

isc_result_t
dns_byaddr_createptrname(isc_netaddr_t *address, isc_boolean_t nibble,
			 dns_name_t *name);

isc_result_t
dns_byaddr_createptrname2(isc_netaddr_t *address, unsigned int options,
			  dns_name_t *name);
/*%<
 * Creates a name that would be used in a PTR query for this address.  The
 * nibble flag indicates that the 'nibble' format is to be used if an IPv6
 * address is provided, instead of the 'bitstring' format.  Since we dropped
 * the support of the bitstring labels, it is expected that the flag is always
 * set.  'options' are the same as for dns_byaddr_create().
 *
 * Requires:
 * 
 * \li	'address' is a valid address.
 * \li	'name' is a valid name with a dedicated buffer.
 */

ISC_LANG_ENDDECLS

#endif /* DNS_BYADDR_H */
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: byaddr.h,v 1.12.2.1.2.4 2004/03/08 09:04:34 marka Exp $ */
d27 2
a28 3
/*
 * DNS ByAddr
 *
d33 1
a33 1
 *	The module ensures appropriate synchronization of data structures it
d37 1
a37 1
 *	No anticipated impact.
d40 1
a40 1
 *	<TBS>
d43 1
a43 1
 *	No anticipated impact.
d46 2
a47 2
 *	RFCs:	1034, 1035, 2181, <TBS>
 *	Drafts:	<TBS>
d57 1
a57 1
/*
d74 1
d81 1
a81 1
/*
d86 1
a86 1
 *	There is a reverse lookup format for IPv6 addresses, 'nibble'
d88 1
a88 1
 *	The 'nibble' format for that address is
d90 1
d92 1
d94 1
a94 1
 *	DNS_BYADDROPT_IPV6INT can be used to get nibble lookups under ip6.int.
d98 1
a98 1
 *	'mctx' is a valid mctx.
d100 1
a100 1
 *	'address' is a valid IPv4 or IPv6 address.
d102 1
a102 1
 *	'view' is a valid view which has a resolver.
d104 1
a104 1
 *	'task' is a valid task.
d106 1
a106 1
 *	byaddrp != NULL && *byaddrp == NULL
d110 2
a111 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
d113 1
a113 1
 *	Any resolver-related error (e.g. ISC_R_SHUTTINGDOWN) may also be
d119 1
a119 1
/*
d124 2
a125 2
 *	If 'byaddr' has not completed, post its BYADDRDONE event with a
 *	result code of ISC_R_CANCELED.
d129 1
a129 1
 *	'byaddr' is a valid byaddr.
d134 1
a134 1
/*
d139 1
a139 1
 *	'*byaddrp' is a valid byaddr.
d141 1
a141 1
 *	The caller has received the BYADDRDONE event (either because the
d146 1
a146 1
 *	*byaddrp == NULL.
d156 1
a156 1
/*
d165 2
a166 2
 * 	'address' is a valid address.
 * 	'name' is a valid name with a dedicated buffer.
@


1.2
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 2
a3 1
 * Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: byaddr.h,v 1.12.2.2 2003/10/09 07:32:39 marka Exp $ */
d71 2
d74 2
a75 1
#define DNS_BYADDROPT_IPV6INT		0x0002	/* Use IP6.INT nibble lookups */
d157 3
a159 2
 * address is provided, instead of the 'bitstring' format.  'options' are
 * the same as for dns_byaddr_create().
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (C) 2000, 2001  Internet Software Consortium.
d18 1
a18 1
/* $ISC: byaddr.h,v 1.12 2001/01/09 21:52:18 bwelling Exp $ */
d72 1
d83 1
a83 4
 *	There are two reverse lookup formats for IPv6 addresses, 'bitstring'
 *	and 'nibble'.  The newer 'bitstring' format for the address fe80::1 is
 *
 *		\[xfe800000000000000000000000000001].ip6.int.
d87 1
a87 1
 *   1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.int.
d89 1
a89 2
 *	The 'bitstring' format will be used unless the DNS_BYADDROPT_IPV6NIBBLE
 *	option has been set.
d147 4
d154 2
a155 1
 * address is provided, instead of the 'bitstring' format.
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 2000-2003  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: byaddr.h,v 1.12.2.1.2.4 2004/03/08 09:04:34 marka Exp $ */
a70 2
/*
 * This option is deprecated since we now only consider nibbles.
a71 2
 */
#define DNS_BYADDROPT_IPV6INT		0x0002
d82 4
a85 1
 *	There is a reverse lookup format for IPv6 addresses, 'nibble'
d89 1
a89 1
 *   1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa.
d91 2
a92 1
 *	DNS_BYADDROPT_IPV6INT can be used to get nibble lookups under ip6.int.
a149 4

isc_result_t
dns_byaddr_createptrname2(isc_netaddr_t *address, unsigned int options,
			  dns_name_t *name);
d153 1
a153 3
 * address is provided, instead of the 'bitstring' format.  Since we dropped
 * the support of the bitstring labels, it is expected that the flag is always
 * set.  'options' are the same as for dns_byaddr_create().
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: byaddr.h,v 1.16.18.2 2005/04/29 00:16:09 marka Exp $ */
d27 3
a29 2
/*! \file
 * \brief
d34 1
a34 1
 *\li	The module ensures appropriate synchronization of data structures it
d38 1
a38 1
 *\li	No anticipated impact.
d41 1
a41 1
 *\li	TBS
d44 1
a44 1
 *\li	No anticipated impact.
d47 2
a48 2
 *\li	RFCs:	1034, 1035, 2181, TBS
 *\li	Drafts:	TBS
d58 1
a58 1
/*%
a74 1
/*% Note DNS_BYADDROPT_IPV6NIBBLE is now deprecated. */
d81 1
a81 1
/*%<
d86 1
a86 1
 *\li	There is a reverse lookup format for IPv6 addresses, 'nibble'
d88 1
a88 1
 *\li	The 'nibble' format for that address is
a89 1
 * \code
a90 1
 * \endcode
d92 1
a92 1
 *\li	#DNS_BYADDROPT_IPV6INT can be used to get nibble lookups under ip6.int.
d96 1
a96 1
 *\li	'mctx' is a valid mctx.
d98 1
a98 1
 *\li	'address' is a valid IPv4 or IPv6 address.
d100 1
a100 1
 *\li	'view' is a valid view which has a resolver.
d102 1
a102 1
 *\li	'task' is a valid task.
d104 1
a104 1
 *\li	byaddrp != NULL && *byaddrp == NULL
d108 2
a109 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d111 1
a111 1
 *\li	Any resolver-related error (e.g. #ISC_R_SHUTTINGDOWN) may also be
d117 1
a117 1
/*%<
d122 2
a123 2
 *\li	If 'byaddr' has not completed, post its #BYADDRDONE event with a
 *	result code of #ISC_R_CANCELED.
d127 1
a127 1
 *\li	'byaddr' is a valid byaddr.
d132 1
a132 1
/*%<
d137 1
a137 1
 *\li	'*byaddrp' is a valid byaddr.
d139 1
a139 1
 *\li	The caller has received the BYADDRDONE event (either because the
d144 1
a144 1
 *\li	*byaddrp == NULL.
d154 1
a154 1
/*%<
d163 2
a164 2
 * \li	'address' is a valid address.
 * \li	'name' is a valid name with a dedicated buffer.
@


