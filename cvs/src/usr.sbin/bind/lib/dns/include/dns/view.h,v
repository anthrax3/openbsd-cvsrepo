head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.40
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.36
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.32
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.34
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.26
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.06;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.14.14.07;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.22.19.49.28;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.22;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.22;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.17;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.48;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.5
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004-2006  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: view.h,v 1.91.18.9 2006/03/09 23:38:21 marka Exp $ */

#ifndef DNS_VIEW_H
#define DNS_VIEW_H 1

/*****
 ***** Module Info
 *****/

/*! \file
 * \brief
 * DNS View
 *
 * A "view" is a DNS namespace, together with an optional resolver and a
 * forwarding policy.  A "DNS namespace" is a (possibly empty) set of
 * authoritative zones together with an optional cache and optional
 * "hints" information.
 *
 * Views start out "unfrozen".  In this state, core attributes like
 * the cache, set of zones, and forwarding policy may be set.  While
 * "unfrozen", the caller (e.g. nameserver configuration loading
 * code), must ensure exclusive access to the view.  When the view is
 * "frozen", the core attributes become immutable, and the view module
 * will ensure synchronization.  Freezing allows the view's core attributes
 * to be accessed without locking.
 *
 * MP:
 *\li	Before the view is frozen, the caller must ensure synchronization.
 *
 *\li	After the view is frozen, the module guarantees appropriate
 *	synchronization of any data structures it creates and manipulates.
 *
 * Reliability:
 *\li	No anticipated impact.
 *
 * Resources:
 *\li	TBS
 *
 * Security:
 *\li	No anticipated impact.
 *
 * Standards:
 *\li	None.
 */

#include <stdio.h>

#include <isc/lang.h>
#include <isc/magic.h>
#include <isc/event.h>
#include <isc/mutex.h>
#include <isc/net.h>
#include <isc/refcount.h>
#include <isc/rwlock.h>
#include <isc/stdtime.h>

#include <dns/acl.h>
#include <dns/fixedname.h>
#include <dns/types.h>

ISC_LANG_BEGINDECLS

struct dns_view {
	/* Unlocked. */
	unsigned int			magic;
	isc_mem_t *			mctx;
	dns_rdataclass_t		rdclass;
	char *				name;
	dns_zt_t *			zonetable;
	dns_dlzdb_t *			dlzdatabase;
	dns_resolver_t *		resolver;
	dns_adb_t *			adb;
	dns_requestmgr_t *		requestmgr;
	dns_acache_t *			acache;
	dns_cache_t *			cache;
	dns_db_t *			cachedb;
	dns_db_t *			hints;
	dns_keytable_t *		secroots;
	dns_keytable_t *		trustedkeys;
	isc_mutex_t			lock;
	isc_boolean_t			frozen;
	isc_task_t *			task;
	isc_event_t			resevent;
	isc_event_t			adbevent;
	isc_event_t			reqevent;
	/* Configurable data. */
	dns_tsig_keyring_t *		statickeys;
	dns_tsig_keyring_t *		dynamickeys;
	dns_peerlist_t *		peers;
	dns_order_t *			order;
	dns_fwdtable_t *		fwdtable;
	isc_boolean_t			recursion;
	isc_boolean_t			auth_nxdomain;
	isc_boolean_t			additionalfromcache;
	isc_boolean_t			additionalfromauth;
	isc_boolean_t			minimalresponses;
	isc_boolean_t			enablednssec;
	isc_boolean_t			enablevalidation;
	isc_boolean_t			acceptexpired;
	dns_transfer_format_t		transfer_format;
	dns_acl_t *			queryacl;
	dns_acl_t *			recursionacl;
	dns_acl_t *			sortlist;
	isc_boolean_t			requestixfr;
	isc_boolean_t			provideixfr;
	dns_ttl_t			maxcachettl;
	dns_ttl_t			maxncachettl;
	in_port_t			dstport;
	dns_aclenv_t			aclenv;
	dns_rdatatype_t			preferred_glue;
	isc_boolean_t			flush;
	dns_namelist_t *		delonly;
	isc_boolean_t			rootdelonly;
	dns_namelist_t *		rootexclude;
	isc_boolean_t			checknames;
	dns_name_t *			dlv;
	dns_fixedname_t			dlv_fixed;
	isc_uint16_t			maxudp;

	/*
	 * Configurable data for server use only,
	 * locked by server configuration lock.
	 */
	dns_acl_t *			matchclients;
	dns_acl_t *			matchdestinations;
	isc_boolean_t			matchrecursiveonly;

	/* Locked by themselves. */
	isc_refcount_t			references;

	/* Locked by lock. */
	unsigned int			weakrefs;
	unsigned int			attributes;
	/* Under owner's locking control. */
	ISC_LINK(struct dns_view)	link;
};

#define DNS_VIEW_MAGIC			ISC_MAGIC('V','i','e','w')
#define DNS_VIEW_VALID(view)		ISC_MAGIC_VALID(view, DNS_VIEW_MAGIC)

#define DNS_VIEWATTR_RESSHUTDOWN	0x01
#define DNS_VIEWATTR_ADBSHUTDOWN	0x02
#define DNS_VIEWATTR_REQSHUTDOWN	0x04

isc_result_t
dns_view_create(isc_mem_t *mctx, dns_rdataclass_t rdclass,
		const char *name, dns_view_t **viewp);
/*%<
 * Create a view.
 *
 * Notes:
 *
 *\li	The newly created view has no cache, no resolver, and an empty
 *	zone table.  The view is not frozen.
 *
 * Requires:
 *
 *\li	'mctx' is a valid memory context.
 *
 *\li	'rdclass' is a valid class.
 *
 *\li	'name' is a valid C string.
 *
 *\li	viewp != NULL && *viewp == NULL
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 *
 *\li	Other errors are possible.
 */

void
dns_view_attach(dns_view_t *source, dns_view_t **targetp);
/*%<
 * Attach '*targetp' to 'source'.
 *
 * Requires:
 *
 *\li	'source' is a valid, frozen view.
 *
 *\li	'targetp' points to a NULL dns_view_t *.
 *
 * Ensures:
 *
 *\li	*targetp is attached to source.
 *
 *\li	While *targetp is attached, the view will not shut down.
 */

void
dns_view_detach(dns_view_t **viewp);
/*%<
 * Detach '*viewp' from its view.
 *
 * Requires:
 *
 *\li	'viewp' points to a valid dns_view_t *
 *
 * Ensures:
 *
 *\li	*viewp is NULL.
 */

void
dns_view_flushanddetach(dns_view_t **viewp);
/*%<
 * Detach '*viewp' from its view.  If this was the last reference
 * uncommited changed in zones will be flushed to disk.
 *
 * Requires:
 *
 *\li	'viewp' points to a valid dns_view_t *
 *
 * Ensures:
 *
 *\li	*viewp is NULL.
 */

void
dns_view_weakattach(dns_view_t *source, dns_view_t **targetp);
/*%<
 * Weakly attach '*targetp' to 'source'.
 *
 * Requires:
 *
 *\li	'source' is a valid, frozen view.
 *
 *\li	'targetp' points to a NULL dns_view_t *.
 *
 * Ensures:
 *
 *\li	*targetp is attached to source.
 *
 * \li	While *targetp is attached, the view will not be freed.
 */

void
dns_view_weakdetach(dns_view_t **targetp);
/*%<
 * Detach '*viewp' from its view.
 *
 * Requires:
 *
 *\li	'viewp' points to a valid dns_view_t *.
 *
 * Ensures:
 *
 *\li	*viewp is NULL.
 */

isc_result_t
dns_view_createresolver(dns_view_t *view,
			isc_taskmgr_t *taskmgr, unsigned int ntasks,
			isc_socketmgr_t *socketmgr,
			isc_timermgr_t *timermgr,
			unsigned int options,
			dns_dispatchmgr_t *dispatchmgr,
			dns_dispatch_t *dispatchv4,
			dns_dispatch_t *dispatchv6);
/*%<
 * Create a resolver and address database for the view.
 *
 * Requires:
 *
 *\li	'view' is a valid, unfrozen view.
 *
 *\li	'view' does not have a resolver already.
 *
 *\li	The requirements of dns_resolver_create() apply to 'taskmgr',
 *	'ntasks', 'socketmgr', 'timermgr', 'options', 'dispatchv4', and
 *	'dispatchv6'.
 *
 * Returns:
 *
 *\li   	#ISC_R_SUCCESS
 *
 *\li	Any error that dns_resolver_create() can return.
 */

void
dns_view_setcache(dns_view_t *view, dns_cache_t *cache);
/*%<
 * Set the view's cache database.
 *
 * Requires:
 *
 *\li	'view' is a valid, unfrozen view.
 *
 *\li	'cache' is a valid cache.
 *
 * Ensures:
 *
 * \li    	The cache of 'view' is 'cached.
 *
 *\li	If this is not the first call to dns_view_setcache() for this
 *	view, then previously set cache is detached.
 */

void
dns_view_sethints(dns_view_t *view, dns_db_t *hints);
/*%<
 * Set the view's hints database.
 *
 * Requires:
 *
 *\li	'view' is a valid, unfrozen view, whose hints database has not been
 *	set.
 *
 *\li	'hints' is a valid zone database.
 *
 * Ensures:
 *
 * \li    	The hints database of 'view' is 'hints'.
 */

void
dns_view_setkeyring(dns_view_t *view, dns_tsig_keyring_t *ring);
/*%<
 * Set the view's static TSIG keys
 *
 * Requires:
 *
 *   \li   'view' is a valid, unfrozen view, whose static TSIG keyring has not
 *	been set.
 *
 *\li      'ring' is a valid TSIG keyring
 *
 * Ensures:
 *
 *\li      The static TSIG keyring of 'view' is 'ring'.
 */

void
dns_view_setdstport(dns_view_t *view, in_port_t dstport);
/*%<
 * Set the view's destination port.  This is the port to
 * which outgoing queries are sent.  The default is 53,
 * the standard DNS port.
 *
 * Requires:
 *
 *\li      'view' is a valid view.
 *
 *\li      'dstport' is a valid TCP/UDP port number.
 *
 * Ensures:
 *\li	External name servers will be assumed to be listning
 *	on 'dstport'.  For servers whose address has already
 *	obtained obtained at the time of the call, the view may
 *	continue to use the previously set port until the address
 *	times out from the view's address database.
 */


isc_result_t
dns_view_addzone(dns_view_t *view, dns_zone_t *zone);
/*%<
 * Add zone 'zone' to 'view'.
 *
 * Requires:
 *
 *\li	'view' is a valid, unfrozen view.
 *
 *\li	'zone' is a valid zone.
 */

void
dns_view_freeze(dns_view_t *view);
/*%<
 * Freeze view.
 *
 * Requires:
 *
 *\li	'view' is a valid, unfrozen view.
 *
 * Ensures:
 *
 *\li	'view' is frozen.
 */

isc_result_t
dns_view_find(dns_view_t *view, dns_name_t *name, dns_rdatatype_t type,
	      isc_stdtime_t now, unsigned int options, isc_boolean_t use_hints,
	      dns_db_t **dbp, dns_dbnode_t **nodep, dns_name_t *foundname,
	      dns_rdataset_t *rdataset, dns_rdataset_t *sigrdataset);
/*%<
 * Find an rdataset whose owner name is 'name', and whose type is
 * 'type'.
 *
 * Notes:
 *
 *\li	See the description of dns_db_find() for information about 'options'.
 *	If the caller sets #DNS_DBFIND_GLUEOK, it must ensure that 'name'
 *	and 'type' are appropriate for glue retrieval.
 *
 *\li	If 'now' is zero, then the current time will be used.
 *
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
 *	it will be searched last.  If the answer is found in the hints
 *	database, the result code will be DNS_R_HINT.  If the name is found
 *	in the hints database but not the type, the result code will be
 *	#DNS_R_HINTNXRRSET.
 *
 *\li	'foundname' must meet the requirements of dns_db_find().
 *
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
 *	covers 'type', then 'sigrdataset' will be bound to it.
 *
 * Requires:
 *
 *\li	'view' is a valid, frozen view.
 *
 *\li	'name' is valid name.
 *
 *\li	'type' is a valid dns_rdatatype_t, and is not a meta query type
 *	except dns_rdatatype_any.
 *
 *\li	dbp == NULL || *dbp == NULL
 *
 *\li	nodep == NULL || *nodep == NULL.  If nodep != NULL, dbp != NULL.
 *
 *\li	'foundname' is a valid name with a dedicated buffer or NULL.
 *
 *\li	'rdataset' is a valid, disassociated rdataset.
 *
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
 *
 * Ensures:
 *
 *\li	In successful cases, 'rdataset', and possibly 'sigrdataset', are
 *	bound to the found data.
 *
 *\li	If dbp != NULL, it points to the database containing the data.
 *
 *\li	If nodep != NULL, it points to the database node containing the data.
 *
 *\li	If foundname != NULL, it contains the full name of the found data.
 *
 * Returns:
 *
 *\li	Any result that dns_db_find() can return, with the exception of
 *	#DNS_R_DELEGATION.
 */

isc_result_t
dns_view_simplefind(dns_view_t *view, dns_name_t *name, dns_rdatatype_t type,
		    isc_stdtime_t now, unsigned int options,
		    isc_boolean_t use_hints,
		    dns_rdataset_t *rdataset, dns_rdataset_t *sigrdataset);
/*%<
 * Find an rdataset whose owner name is 'name', and whose type is
 * 'type'.
 *
 * Notes:
 *
 *\li	This routine is appropriate for simple, exact-match queries of the
 *	view.  'name' must be a canonical name; there is no DNAME or CNAME
 *	processing.
 *
 *\li	See the description of dns_db_find() for information about 'options'.
 *	If the caller sets DNS_DBFIND_GLUEOK, it must ensure that 'name'
 *	and 'type' are appropriate for glue retrieval.
 *
 *\li	If 'now' is zero, then the current time will be used.
 *
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
 *	it will be searched last.  If the answer is found in the hints
 *	database, the result code will be DNS_R_HINT.  If the name is found
 *	in the hints database but not the type, the result code will be
 *	DNS_R_HINTNXRRSET.
 *
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
 *	covers 'type', then 'sigrdataset' will be bound to it.
 *
 * Requires:
 *
 *\li	'view' is a valid, frozen view.
 *
 *\li	'name' is valid name.
 *
 *\li	'type' is a valid dns_rdatatype_t, and is not a meta query type
 *	(e.g. dns_rdatatype_any), or dns_rdatatype_rrsig.
 *
 *\li	'rdataset' is a valid, disassociated rdataset.
 *
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
 *
 * Ensures:
 *
 *\li	In successful cases, 'rdataset', and possibly 'sigrdataset', are
 *	bound to the found data.
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS			Success; result is desired type.
 *\li	DNS_R_GLUE			Success; result is glue.
 *\li	DNS_R_HINT			Success; result is a hint.
 *\li	DNS_R_NCACHENXDOMAIN		Success; result is a ncache entry.
 *\li	DNS_R_NCACHENXRRSET		Success; result is a ncache entry.
 *\li	DNS_R_NXDOMAIN			The name does not exist.
 *\li	DNS_R_NXRRSET			The rrset does not exist.
 *\li	#ISC_R_NOTFOUND			No matching data found,
 *					or an error occurred.
 */

/*% See dns_view_findzonecut2() */
isc_result_t
dns_view_findzonecut(dns_view_t *view, dns_name_t *name, dns_name_t *fname,
		     isc_stdtime_t now, unsigned int options,
		     isc_boolean_t use_hints,
		     dns_rdataset_t *rdataset, dns_rdataset_t *sigrdataset);

isc_result_t
dns_view_findzonecut2(dns_view_t *view, dns_name_t *name, dns_name_t *fname,
		      isc_stdtime_t now, unsigned int options,
		      isc_boolean_t use_hints, isc_boolean_t use_cache,
		      dns_rdataset_t *rdataset, dns_rdataset_t *sigrdataset);
/*%<
 * Find the best known zonecut containing 'name'.
 *
 * This uses local authority, cache, and optionally hints data.
 * No external queries are performed.
 *
 * Notes:
 *
 *\li	If 'now' is zero, then the current time will be used.
 *
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
 *	it will be searched last.
 *
 *\li	If 'use_cache' is ISC_TRUE, and the view has a cache, then it will be
 *	searched.
 *
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
 *	covers 'type', then 'sigrdataset' will be bound to it.
 *
 *\li	If the DNS_DBFIND_NOEXACT option is set, then the zonecut returned
 *	(if any) will be the deepest known ancestor of 'name'.
 *
 * Requires:
 *
 *\li	'view' is a valid, frozen view.
 *
 *\li	'name' is valid name.
 *
 *\li	'rdataset' is a valid, disassociated rdataset.
 *
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS				Success.
 *
 *\li	Many other results are possible.
 */

isc_result_t
dns_viewlist_find(dns_viewlist_t *list, const char *name,
		  dns_rdataclass_t rdclass, dns_view_t **viewp);
/*%<
 * Search for a view with name 'name' and class 'rdclass' in 'list'.
 * If found, '*viewp' is (strongly) attached to it.
 *
 * Requires:
 *
 *\li	'viewp' points to a NULL dns_view_t *.
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS		A matching view was found.
 *\li	#ISC_R_NOTFOUND		No matching view was found.
 */

isc_result_t
dns_view_findzone(dns_view_t *view, dns_name_t *name, dns_zone_t **zonep);
/*%<
 * Search for the zone 'name' in the zone table of 'view'.
 * If found, 'zonep' is (strongly) attached to it.  There
 * are no partial matches.
 *
 * Requires:
 *
 *\li	'zonep' points to a NULL dns_zone_t *.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS		A matching zone was found.
 *\li	#ISC_R_NOTFOUND		No matching zone was found.
 *\li	others			An error occurred.
 */

isc_result_t
dns_view_load(dns_view_t *view, isc_boolean_t stop);

isc_result_t
dns_view_loadnew(dns_view_t *view, isc_boolean_t stop);
/*%<
 * Load zones attached to this view.  dns_view_load() loads
 * all zones whose master file has changed since the last
 * load; dns_view_loadnew() loads only zones that have never 
 * been loaded.
 *
 * If 'stop' is ISC_TRUE, stop on the first error and return it.
 * If 'stop' is ISC_FALSE, ignore errors.
 *
 * Requires:
 *
 *\li	'view' is valid.
 */

isc_result_t
dns_view_gettsig(dns_view_t *view, dns_name_t *keyname,
		 dns_tsigkey_t **keyp);
/*%<
 * Find the TSIG key configured in 'view' with name 'keyname',
 * if any.
 *
 * Reqires:
 *\li	keyp points to a NULL dns_tsigkey_t *.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *\li	#ISC_R_NOTFOUND	No key was found.
 *\li	others		An error occurred.
 */

isc_result_t
dns_view_getpeertsig(dns_view_t *view, isc_netaddr_t *peeraddr,
		     dns_tsigkey_t **keyp);
/*%<
 * Find the TSIG key configured in 'view' for the server whose
 * address is 'peeraddr', if any.
 *
 * Reqires:
 *	keyp points to a NULL dns_tsigkey_t *.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *\li	#ISC_R_NOTFOUND	No key was found.
 *\li	others		An error occurred.
 */

isc_result_t
dns_view_checksig(dns_view_t *view, isc_buffer_t *source, dns_message_t *msg);
/*%<
 * Verifies the signature of a message.
 *
 * Requires:
 *
 *\li	'view' is a valid view.
 *\li	'source' is a valid buffer containing the message
 *\li	'msg' is a valid message
 *
 * Returns:
 *\li	see dns_tsig_verify()
 */

void
dns_view_dialup(dns_view_t *view);
/*%<
 * Perform dialup-time maintenance on the zones of 'view'.
 */

isc_result_t
dns_view_dumpdbtostream(dns_view_t *view, FILE *fp);
/*%<
 * Dump the current state of the view 'view' to the stream 'fp'
 * for purposes of analysis or debugging.
 *
 * Currently the dumped state includes the view's cache; in the future
 * it may also include other state such as the address database.
 * It will not not include authoritative data since it is voluminous and
 * easily obtainable by other means.
 *
 * Requires:
 * 	
 *\li	'view' is valid.
 *
 *\li	'fp' refers to a file open for writing.
 *
 * Returns:
 * \li	ISC_R_SUCCESS	The cache was successfully dumped.
 * \li	others		An error occurred (see dns_master_dump)
 */

isc_result_t
dns_view_flushcache(dns_view_t *view);
/*%<
 * Flush the view's cache (and ADB).
 *
 * Requires:
 * 	'view' is valid.
 *
 * 	No other tasks are executing.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 */

isc_result_t
dns_view_flushname(dns_view_t *view, dns_name_t *);
/*%<
 * Flush the given name from the view's cache (and ADB).
 *
 * Requires:
 *\li	'view' is valid.
 *\li	'name' is valid.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *	other returns are failures.
 */

isc_result_t
dns_view_adddelegationonly(dns_view_t *view, dns_name_t *name);
/*%<
 * Add the given name to the delegation only table.
 * 
 *
 * Requires:
 *\li	'view' is valid.
 *\li	'name' is valid.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 */

isc_result_t
dns_view_excludedelegationonly(dns_view_t *view, dns_name_t *name);
/*%<
 * Add the given name to be excluded from the root-delegation-only.
 * 
 *
 * Requires:
 *\li	'view' is valid.
 *\li	'name' is valid.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 */

isc_boolean_t
dns_view_isdelegationonly(dns_view_t *view, dns_name_t *name);
/*%<
 * Check if 'name' is in the delegation only table or if
 * rootdelonly is set that name is not being excluded.
 *
 * Requires:
 *\li	'view' is valid.
 *\li	'name' is valid.
 *
 * Returns:
 *\li	#ISC_TRUE if the name is is the table.
 *\li	#ISC_FALSE othewise.
 */

void
dns_view_setrootdelonly(dns_view_t *view, isc_boolean_t value);
/*%<
 * Set the root delegation only flag.
 *
 * Requires:
 *\li	'view' is valid.
 */

isc_boolean_t
dns_view_getrootdelonly(dns_view_t *view);
/*%<
 * Get the root delegation only flag.
 *
 * Requires:
 *\li	'view' is valid.
 */

isc_result_t
dns_view_freezezones(dns_view_t *view, isc_boolean_t freeze);
/*%<
 * Freeze/thaw updates to master zones.
 *
 * Requires:
 * \li	'view' is valid.
 */
#endif /* DNS_VIEW_H */
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: view.h,v 1.73.2.4.2.12 2004/03/10 02:55:58 marka Exp $ */
d27 2
a28 1
/*
d45 1
a45 1
 *	Before the view is frozen, the caller must ensure synchronization.
d47 1
a47 1
 *	After the view is frozen, the module guarantees appropriate
d51 1
a51 1
 *	No anticipated impact.
d54 1
a54 1
 *	<TBS>
d57 1
a57 1
 *	No anticipated impact.
d60 1
a60 1
 *	None.
d87 1
d91 1
d115 2
d135 1
d165 1
a165 1
/*
d170 1
a170 1
 *	The newly created view has no cache, no resolver, and an empty
d175 1
a175 1
 *	'mctx' is a valid memory context.
d177 1
a177 1
 *	'rdclass' is a valid class.
d179 1
a179 1
 *	'name' is a valid C string.
d181 1
a181 1
 *	viewp != NULL && *viewp == NULL
d185 2
a186 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
d188 1
a188 1
 *	Other errors are possible.
d193 1
a193 1
/*
d198 1
a198 1
 *	'source' is a valid, frozen view.
d200 1
a200 1
 *	'targetp' points to a NULL dns_view_t *.
d204 1
a204 1
 *	*targetp is attached to source.
d206 1
a206 1
 *	While *targetp is attached, the view will not shut down.
d211 1
a211 1
/*
d216 1
a216 1
 *	'viewp' points to a valid dns_view_t *
d220 1
a220 1
 *	*viewp is NULL.
d225 1
a225 1
/*
d231 1
a231 1
 *	'viewp' points to a valid dns_view_t *
d235 1
a235 1
 *	*viewp is NULL.
d240 1
a240 1
/*
d245 1
a245 1
 *	'source' is a valid, frozen view.
d247 1
a247 1
 *	'targetp' points to a NULL dns_view_t *.
d251 1
a251 1
 *	*targetp is attached to source.
d253 1
a253 1
 * 	While *targetp is attached, the view will not be freed.
d258 1
a258 1
/*
d263 1
a263 1
 *	'viewp' points to a valid dns_view_t *.
d267 1
a267 1
 *	*viewp is NULL.
d279 1
a279 1
/*
d284 1
a284 1
 *	'view' is a valid, unfrozen view.
d286 1
a286 1
 *	'view' does not have a resolver already.
d288 1
a288 1
 *	The requirements of dns_resolver_create() apply to 'taskmgr',
d294 1
a294 1
 *     	ISC_R_SUCCESS
d296 1
a296 1
 *	Any error that dns_resolver_create() can return.
d301 1
a301 1
/*
d306 1
a306 1
 *	'view' is a valid, unfrozen view.
d308 1
a308 1
 *	'cache' is a valid cache.
d312 1
a312 1
 *     	The cache of 'view' is 'cached.
d314 1
a314 1
 *	If this is not the first call to dns_view_setcache() for this
d320 1
a320 1
/*
d325 1
a325 1
 *	'view' is a valid, unfrozen view, whose hints database has not been
d328 1
a328 1
 *	'hints' is a valid zone database.
d332 1
a332 1
 *     	The hints database of 'view' is 'hints'.
d337 1
a337 1
/*
d342 1
a342 1
 *      'view' is a valid, unfrozen view, whose static TSIG keyring has not
d345 1
a345 1
 *      'ring' is a valid TSIG keyring
d349 1
a349 1
 *      The static TSIG keyring of 'view' is 'ring'.
d354 1
a354 1
/*
d361 1
a361 1
 *      'view' is a valid view.
d363 1
a363 1
 *      'dstport' is a valid TCP/UDP port number.
d366 1
a366 1
 *	External name servers will be assumed to be listning
d376 1
a376 1
/*
d381 1
a381 1
 *	'view' is a valid, unfrozen view.
d383 1
a383 1
 *	'zone' is a valid zone.
d388 1
a388 1
/*
d393 1
a393 1
 *	'view' is a valid, unfrozen view.
d397 1
a397 1
 *	'view' is frozen.
d405 1
a405 1
/*
d411 2
a412 2
 *	See the description of dns_db_find() for information about 'options'.
 *	If the caller sets DNS_DBFIND_GLUEOK, it must ensure that 'name'
d415 1
a415 1
 *	If 'now' is zero, then the current time will be used.
d417 1
a417 1
 *	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d421 1
a421 1
 *	DNS_R_HINTNXRRSET.
d423 1
a423 1
 *	'foundname' must meet the requirements of dns_db_find().
d425 1
a425 1
 *	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d430 1
a430 1
 *	'view' is a valid, frozen view.
d432 1
a432 1
 *	'name' is valid name.
d434 1
a434 1
 *	'type' is a valid dns_rdatatype_t, and is not a meta query type
d437 1
a437 1
 *	dbp == NULL || *dbp == NULL
d439 1
a439 1
 *	nodep == NULL || *nodep == NULL.  If nodep != NULL, dbp != NULL.
d441 1
a441 1
 *	'foundname' is a valid name with a dedicated buffer or NULL.
d443 1
a443 1
 *	'rdataset' is a valid, disassociated rdataset.
d445 1
a445 1
 *	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d449 1
a449 1
 *	In successful cases, 'rdataset', and possibly 'sigrdataset', are
d452 1
a452 1
 *	If dbp != NULL, it points to the database containing the data.
d454 1
a454 1
 *	If nodep != NULL, it points to the database node containing the data.
d456 1
a456 1
 *	If foundname != NULL, it contains the full name of the found data.
d460 2
a461 2
 *	Any result that dns_db_find() can return, with the exception of
 *	DNS_R_DELEGATION.
d469 1
a469 1
/*
d475 1
a475 1
 *	This routine is appropriate for simple, exact-match queries of the
d479 1
a479 1
 *	See the description of dns_db_find() for information about 'options'.
d483 1
a483 1
 *	If 'now' is zero, then the current time will be used.
d485 1
a485 1
 *	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d491 1
a491 1
 *	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d496 1
a496 1
 *	'view' is a valid, frozen view.
d498 1
a498 1
 *	'name' is valid name.
d500 1
a500 1
 *	'type' is a valid dns_rdatatype_t, and is not a meta query type
d503 1
a503 1
 *	'rdataset' is a valid, disassociated rdataset.
d505 1
a505 1
 *	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d509 1
a509 1
 *	In successful cases, 'rdataset', and possibly 'sigrdataset', are
d514 8
a521 8
 *	ISC_R_SUCCESS			Success; result is desired type.
 *	DNS_R_GLUE			Success; result is glue.
 *	DNS_R_HINT			Success; result is a hint.
 *	DNS_R_NCACHENXDOMAIN		Success; result is a ncache entry.
 *	DNS_R_NCACHENXRRSET		Success; result is a ncache entry.
 *	DNS_R_NXDOMAIN			The name does not exist.
 *	DNS_R_NXRRSET			The rrset does not exist.
 *	ISC_R_NOTFOUND			No matching data found,
d525 1
d537 1
a537 1
/*
d545 1
a545 1
 *	If 'now' is zero, then the current time will be used.
d547 1
a547 1
 *	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d550 1
a550 1
 *	If 'use_cache' is ISC_TRUE, and the view has a cache, then it will be
d553 1
a553 1
 *	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d556 1
a556 1
 *	If the DNS_DBFIND_NOEXACT option is set, then the zonecut returned
d561 1
a561 1
 *	'view' is a valid, frozen view.
d563 1
a563 1
 *	'name' is valid name.
d565 1
a565 1
 *	'rdataset' is a valid, disassociated rdataset.
d567 1
a567 1
 *	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d571 1
a571 1
 *	ISC_R_SUCCESS				Success.
d573 1
a573 1
 *	Many other results are possible.
d579 1
a579 1
/*
d585 1
a585 1
 *	'viewp' points to a NULL dns_view_t *.
d589 2
a590 2
 *	ISC_R_SUCCESS		A matching view was found.
 *	ISC_R_NOTFOUND		No matching view was found.
d595 1
a595 1
/*
d602 1
a602 1
 *	'zonep' points to a NULL dns_zone_t *.
d605 3
a607 3
 *	ISC_R_SUCCESS		A matching zone was found.
 *	ISC_R_NOTFOUND		No matching zone was found.
 *	others			An error occurred.
d615 1
a615 1
/*
d626 1
a626 1
 *	'view' is valid.
d632 1
a632 1
/*
d637 1
a637 1
 *	keyp points to a NULL dns_tsigkey_t *.
d640 3
a642 3
 *	ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *	ISC_R_NOTFOUND	No key was found.
 *	others		An error occurred.
d648 1
a648 1
/*
d656 3
a658 3
 *	ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *	ISC_R_NOTFOUND	No key was found.
 *	others		An error occurred.
d663 1
a663 1
/*
d668 3
a670 3
 *	'view' is a valid view.
 *	'source' is a valid buffer containing the message
 *	'msg' is a valid message
d673 1
a673 1
 *	see dns_tsig_verify()
d678 1
a678 1
/*
d684 1
a684 1
/*
d695 1
a695 1
 *	'view' is valid.
d697 1
a697 1
 *	'fp' refers to a file open for writing.
d700 2
a701 2
 * 	ISC_R_SUCCESS	The cache was successfully dumped.
 * 	others		An error occurred (see dns_master_dump)
d706 1
a706 1
/*
d715 2
a716 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
d721 1
a721 1
/*
d725 2
a726 2
 *	'view' is valid.
 *	'name' is valid.
d729 1
a729 1
 *	ISC_R_SUCCESS
d735 1
a735 1
/*
d740 2
a741 2
 *	'view' is valid.
 *	'name' is valid.
d744 2
a745 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
d750 1
a750 1
/*
d755 2
a756 2
 *	'view' is valid.
 *	'name' is valid.
d759 2
a760 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
d765 1
a765 1
/*
d770 2
a771 2
 *	'view' is valid.
 *	'name' is valid.
d774 2
a775 2
 *	ISC_TRUE if the name is is the table.
 *	ISC_FALSE othewise.
d780 1
a780 1
/*
d784 1
a784 1
 *	'view' is valid.
d789 1
a789 1
/*
d793 1
a793 1
 *	'view' is valid.
d796 8
@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 1
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: view.h,v 1.73.2.7 2003/09/19 14:10:31 marka Exp $ */
d74 1
d104 1
d111 1
a114 1
	dns_acl_t *			v6synthesisacl;
d122 1
d127 3
d495 1
a495 1
 *	(e.g. dns_rdatatype_any), or dns_rdatatype_sig.
d710 14
@


1.2
log
@sync with 9.2.2-P3; new zone type "delegation-only"
discussed with deraadt@@, millert@@ and todd@@
@
text
@d2 1
a2 1
 * Copyright (C) 1999-2002  Internet Software Consortium.
d18 1
a18 1
/* $ISC: view.h,v 1.73.2.2 2002/08/05 06:57:13 marka Exp $ */
d122 2
d518 6
d537 3
d710 16
d739 2
a740 1
 * Check if 'name' is in the delegation only table.
d751 8
d760 8
a767 1
ISC_LANG_ENDDECLS
@


1.1
log
@Initial revision
@
text
@d121 1
d694 29
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: view.h,v 1.73.2.4.2.12 2004/03/10 02:55:58 marka Exp $ */
a73 1
#include <dns/fixedname.h>
a102 1
	dns_order_t *			order;
a108 1
	isc_boolean_t			enablednssec;
d112 1
a119 1
	dns_rdatatype_t			preferred_glue;
a120 6
	dns_namelist_t *		delonly;
	isc_boolean_t			rootdelonly;
	dns_namelist_t *		rootexclude;
	isc_boolean_t			checknames;
	dns_name_t *			dlv;
	dns_fixedname_t			dlv_fixed;
d486 1
a486 1
 *	(e.g. dns_rdatatype_any), or dns_rdatatype_rrsig.
a514 6

isc_result_t
dns_view_findzonecut2(dns_view_t *view, dns_name_t *name, dns_name_t *fname,
		      isc_stdtime_t now, unsigned int options,
		      isc_boolean_t use_hints, isc_boolean_t use_cache,
		      dns_rdataset_t *rdataset, dns_rdataset_t *sigrdataset);
a527 3
 *	If 'use_cache' is ISC_TRUE, and the view has a cache, then it will be
 *	searched.
 *
d694 1
a694 76
isc_result_t
dns_view_flushname(dns_view_t *view, dns_name_t *);
/*
 * Flush the given name from the view's cache (and ADB).
 *
 * Requires:
 *	'view' is valid.
 *	'name' is valid.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	other returns are failures.
 */

isc_result_t
dns_view_adddelegationonly(dns_view_t *view, dns_name_t *name);
/*
 * Add the given name to the delegation only table.
 * 
 *
 * Requires:
 *	'view' is valid.
 *	'name' is valid.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 */

isc_result_t
dns_view_excludedelegationonly(dns_view_t *view, dns_name_t *name);
/*
 * Add the given name to be excluded from the root-delegation-only.
 * 
 *
 * Requires:
 *	'view' is valid.
 *	'name' is valid.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 */

isc_boolean_t
dns_view_isdelegationonly(dns_view_t *view, dns_name_t *name);
/*
 * Check if 'name' is in the delegation only table or if
 * rootdelonly is set that name is not being excluded.
 *
 * Requires:
 *	'view' is valid.
 *	'name' is valid.
 *
 * Returns:
 *	ISC_TRUE if the name is is the table.
 *	ISC_FALSE othewise.
 */

void
dns_view_setrootdelonly(dns_view_t *view, isc_boolean_t value);
/*
 * Set the root delegation only flag.
 *
 * Requires:
 *	'view' is valid.
 */

isc_boolean_t
dns_view_getrootdelonly(dns_view_t *view);
/*
 * Get the root delegation only flag.
 *
 * Requires:
 *	'view' is valid.
 */
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004-2006  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: view.h,v 1.91.18.9 2006/03/09 23:38:21 marka Exp $ */
d27 1
a27 2
/*! \file
 * \brief
d44 1
a44 1
 *\li	Before the view is frozen, the caller must ensure synchronization.
d46 1
a46 1
 *\li	After the view is frozen, the module guarantees appropriate
d50 1
a50 1
 *\li	No anticipated impact.
d53 1
a53 1
 *\li	TBS
d56 1
a56 1
 *\li	No anticipated impact.
d59 1
a59 1
 *\li	None.
a85 1
	dns_dlzdb_t *			dlzdatabase;
a88 1
	dns_acache_t *			acache;
a111 2
	isc_boolean_t			enablevalidation;
	isc_boolean_t			acceptexpired;
a129 1
	isc_uint16_t			maxudp;
d159 1
a159 1
/*%<
d164 1
a164 1
 *\li	The newly created view has no cache, no resolver, and an empty
d169 1
a169 1
 *\li	'mctx' is a valid memory context.
d171 1
a171 1
 *\li	'rdclass' is a valid class.
d173 1
a173 1
 *\li	'name' is a valid C string.
d175 1
a175 1
 *\li	viewp != NULL && *viewp == NULL
d179 2
a180 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d182 1
a182 1
 *\li	Other errors are possible.
d187 1
a187 1
/*%<
d192 1
a192 1
 *\li	'source' is a valid, frozen view.
d194 1
a194 1
 *\li	'targetp' points to a NULL dns_view_t *.
d198 1
a198 1
 *\li	*targetp is attached to source.
d200 1
a200 1
 *\li	While *targetp is attached, the view will not shut down.
d205 1
a205 1
/*%<
d210 1
a210 1
 *\li	'viewp' points to a valid dns_view_t *
d214 1
a214 1
 *\li	*viewp is NULL.
d219 1
a219 1
/*%<
d225 1
a225 1
 *\li	'viewp' points to a valid dns_view_t *
d229 1
a229 1
 *\li	*viewp is NULL.
d234 1
a234 1
/*%<
d239 1
a239 1
 *\li	'source' is a valid, frozen view.
d241 1
a241 1
 *\li	'targetp' points to a NULL dns_view_t *.
d245 1
a245 1
 *\li	*targetp is attached to source.
d247 1
a247 1
 * \li	While *targetp is attached, the view will not be freed.
d252 1
a252 1
/*%<
d257 1
a257 1
 *\li	'viewp' points to a valid dns_view_t *.
d261 1
a261 1
 *\li	*viewp is NULL.
d273 1
a273 1
/*%<
d278 1
a278 1
 *\li	'view' is a valid, unfrozen view.
d280 1
a280 1
 *\li	'view' does not have a resolver already.
d282 1
a282 1
 *\li	The requirements of dns_resolver_create() apply to 'taskmgr',
d288 1
a288 1
 *\li   	#ISC_R_SUCCESS
d290 1
a290 1
 *\li	Any error that dns_resolver_create() can return.
d295 1
a295 1
/*%<
d300 1
a300 1
 *\li	'view' is a valid, unfrozen view.
d302 1
a302 1
 *\li	'cache' is a valid cache.
d306 1
a306 1
 * \li    	The cache of 'view' is 'cached.
d308 1
a308 1
 *\li	If this is not the first call to dns_view_setcache() for this
d314 1
a314 1
/*%<
d319 1
a319 1
 *\li	'view' is a valid, unfrozen view, whose hints database has not been
d322 1
a322 1
 *\li	'hints' is a valid zone database.
d326 1
a326 1
 * \li    	The hints database of 'view' is 'hints'.
d331 1
a331 1
/*%<
d336 1
a336 1
 *   \li   'view' is a valid, unfrozen view, whose static TSIG keyring has not
d339 1
a339 1
 *\li      'ring' is a valid TSIG keyring
d343 1
a343 1
 *\li      The static TSIG keyring of 'view' is 'ring'.
d348 1
a348 1
/*%<
d355 1
a355 1
 *\li      'view' is a valid view.
d357 1
a357 1
 *\li      'dstport' is a valid TCP/UDP port number.
d360 1
a360 1
 *\li	External name servers will be assumed to be listning
d370 1
a370 1
/*%<
d375 1
a375 1
 *\li	'view' is a valid, unfrozen view.
d377 1
a377 1
 *\li	'zone' is a valid zone.
d382 1
a382 1
/*%<
d387 1
a387 1
 *\li	'view' is a valid, unfrozen view.
d391 1
a391 1
 *\li	'view' is frozen.
d399 1
a399 1
/*%<
d405 2
a406 2
 *\li	See the description of dns_db_find() for information about 'options'.
 *	If the caller sets #DNS_DBFIND_GLUEOK, it must ensure that 'name'
d409 1
a409 1
 *\li	If 'now' is zero, then the current time will be used.
d411 1
a411 1
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d415 1
a415 1
 *	#DNS_R_HINTNXRRSET.
d417 1
a417 1
 *\li	'foundname' must meet the requirements of dns_db_find().
d419 1
a419 1
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d424 1
a424 1
 *\li	'view' is a valid, frozen view.
d426 1
a426 1
 *\li	'name' is valid name.
d428 1
a428 1
 *\li	'type' is a valid dns_rdatatype_t, and is not a meta query type
d431 1
a431 1
 *\li	dbp == NULL || *dbp == NULL
d433 1
a433 1
 *\li	nodep == NULL || *nodep == NULL.  If nodep != NULL, dbp != NULL.
d435 1
a435 1
 *\li	'foundname' is a valid name with a dedicated buffer or NULL.
d437 1
a437 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d439 1
a439 1
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d443 1
a443 1
 *\li	In successful cases, 'rdataset', and possibly 'sigrdataset', are
d446 1
a446 1
 *\li	If dbp != NULL, it points to the database containing the data.
d448 1
a448 1
 *\li	If nodep != NULL, it points to the database node containing the data.
d450 1
a450 1
 *\li	If foundname != NULL, it contains the full name of the found data.
d454 2
a455 2
 *\li	Any result that dns_db_find() can return, with the exception of
 *	#DNS_R_DELEGATION.
d463 1
a463 1
/*%<
d469 1
a469 1
 *\li	This routine is appropriate for simple, exact-match queries of the
d473 1
a473 1
 *\li	See the description of dns_db_find() for information about 'options'.
d477 1
a477 1
 *\li	If 'now' is zero, then the current time will be used.
d479 1
a479 1
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d485 1
a485 1
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d490 1
a490 1
 *\li	'view' is a valid, frozen view.
d492 1
a492 1
 *\li	'name' is valid name.
d494 1
a494 1
 *\li	'type' is a valid dns_rdatatype_t, and is not a meta query type
d497 1
a497 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d499 1
a499 1
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d503 1
a503 1
 *\li	In successful cases, 'rdataset', and possibly 'sigrdataset', are
d508 8
a515 8
 *\li	#ISC_R_SUCCESS			Success; result is desired type.
 *\li	DNS_R_GLUE			Success; result is glue.
 *\li	DNS_R_HINT			Success; result is a hint.
 *\li	DNS_R_NCACHENXDOMAIN		Success; result is a ncache entry.
 *\li	DNS_R_NCACHENXRRSET		Success; result is a ncache entry.
 *\li	DNS_R_NXDOMAIN			The name does not exist.
 *\li	DNS_R_NXRRSET			The rrset does not exist.
 *\li	#ISC_R_NOTFOUND			No matching data found,
a518 1
/*% See dns_view_findzonecut2() */
d530 1
a530 1
/*%<
d538 1
a538 1
 *\li	If 'now' is zero, then the current time will be used.
d540 1
a540 1
 *\li	If 'use_hints' is ISC_TRUE, and the view has a hints database, then
d543 1
a543 1
 *\li	If 'use_cache' is ISC_TRUE, and the view has a cache, then it will be
d546 1
a546 1
 *\li	If 'sigrdataset' is not NULL, and there is a SIG rdataset which
d549 1
a549 1
 *\li	If the DNS_DBFIND_NOEXACT option is set, then the zonecut returned
d554 1
a554 1
 *\li	'view' is a valid, frozen view.
d556 1
a556 1
 *\li	'name' is valid name.
d558 1
a558 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d560 1
a560 1
 *\li	'sigrdataset' is NULL, or is a valid, disassociated rdataset.
d564 1
a564 1
 *\li	#ISC_R_SUCCESS				Success.
d566 1
a566 1
 *\li	Many other results are possible.
d572 1
a572 1
/*%<
d578 1
a578 1
 *\li	'viewp' points to a NULL dns_view_t *.
d582 2
a583 2
 *\li	#ISC_R_SUCCESS		A matching view was found.
 *\li	#ISC_R_NOTFOUND		No matching view was found.
d588 1
a588 1
/*%<
d595 1
a595 1
 *\li	'zonep' points to a NULL dns_zone_t *.
d598 3
a600 3
 *\li	#ISC_R_SUCCESS		A matching zone was found.
 *\li	#ISC_R_NOTFOUND		No matching zone was found.
 *\li	others			An error occurred.
d608 1
a608 1
/*%<
d619 1
a619 1
 *\li	'view' is valid.
d625 1
a625 1
/*%<
d630 1
a630 1
 *\li	keyp points to a NULL dns_tsigkey_t *.
d633 3
a635 3
 *\li	#ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *\li	#ISC_R_NOTFOUND	No key was found.
 *\li	others		An error occurred.
d641 1
a641 1
/*%<
d649 3
a651 3
 *\li	#ISC_R_SUCCESS	A key was found and '*keyp' now points to it.
 *\li	#ISC_R_NOTFOUND	No key was found.
 *\li	others		An error occurred.
d656 1
a656 1
/*%<
d661 3
a663 3
 *\li	'view' is a valid view.
 *\li	'source' is a valid buffer containing the message
 *\li	'msg' is a valid message
d666 1
a666 1
 *\li	see dns_tsig_verify()
d671 1
a671 1
/*%<
d677 1
a677 1
/*%<
d688 1
a688 1
 *\li	'view' is valid.
d690 1
a690 1
 *\li	'fp' refers to a file open for writing.
d693 2
a694 2
 * \li	ISC_R_SUCCESS	The cache was successfully dumped.
 * \li	others		An error occurred (see dns_master_dump)
d699 1
a699 1
/*%<
d708 2
a709 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d714 1
a714 1
/*%<
d718 2
a719 2
 *\li	'view' is valid.
 *\li	'name' is valid.
d722 1
a722 1
 *\li	#ISC_R_SUCCESS
d728 1
a728 1
/*%<
d733 2
a734 2
 *\li	'view' is valid.
 *\li	'name' is valid.
d737 2
a738 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d743 1
a743 1
/*%<
d748 2
a749 2
 *\li	'view' is valid.
 *\li	'name' is valid.
d752 2
a753 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d758 1
a758 1
/*%<
d763 2
a764 2
 *\li	'view' is valid.
 *\li	'name' is valid.
d767 2
a768 2
 *\li	#ISC_TRUE if the name is is the table.
 *\li	#ISC_FALSE othewise.
d773 1
a773 1
/*%<
d777 1
a777 1
 *\li	'view' is valid.
d782 1
a782 1
/*%<
d786 1
a786 1
 *\li	'view' is valid.
a788 8
isc_result_t
dns_view_freezezones(dns_view_t *view, isc_boolean_t freeze);
/*%<
 * Freeze/thaw updates to master zones.
 *
 * Requires:
 * \li	'view' is valid.
 */
@


