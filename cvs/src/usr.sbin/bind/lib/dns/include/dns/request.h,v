head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.3.0.36
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.32
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.34
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.26
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.30
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.28
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.24
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.22
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.20
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.18
	OPENBSD_5_0:1.1.1.3.0.16
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.14
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.12
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.8
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.10
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	OPENBSD_4_3_BASE:1.1.1.3
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.21;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.21;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.15;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.48;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 2000, 2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: request.h,v 1.17 2001/01/09 21:53:21 bwelling Exp $ */

#ifndef DNS_REQUEST_H
#define DNS_REQUEST_H 1

/*****
 ***** Module Info
 *****/

/*
 * DNS Request
 *
 * The request module provides simple request/response services useful for
 * sending SOA queries, DNS Notify messages, and dynamic update requests.
 *
 * MP:
 *	The module ensures appropriate synchronization of data structures it
 *	creates and manipulates.
 *
 * Resources:
 *	<TBS>
 *
 * Security:
 *	No anticipated impact.
 */

#include <isc/lang.h>
#include <isc/event.h>

#include <dns/types.h>

#define DNS_REQUESTOPT_TCP 0x00000001U

typedef struct dns_requestevent {
        ISC_EVENT_COMMON(struct dns_requestevent);
	isc_result_t result;
	dns_request_t *request;
} dns_requestevent_t;

ISC_LANG_BEGINDECLS

isc_result_t
dns_requestmgr_create(isc_mem_t *mctx, isc_timermgr_t *timermgr,
		      isc_socketmgr_t *socketmgr, isc_taskmgr_t *taskmgr,
		      dns_dispatchmgr_t *dispatchmgr,
		      dns_dispatch_t *dispatchv4, dns_dispatch_t *dispatchv6,
		      dns_requestmgr_t **requestmgrp);
/*
 * Create a request manager.
 *
 * Requires:
 *
 *	'mctx' is a valid memory context.
 *
 *	'timermgr' is a valid timer manager.
 *
 *	'socketmgr' is a valid socket manager.
 *
 *	'taskmgr' is a valid task manager.
 *
 *	'dispatchv4' is a valid dispatcher with an IPv4 UDP socket, or is NULL.
 *
 *	'dispatchv6' is a valid dispatcher with an IPv6 UDP socket, or is NULL.
 *
 *	requestmgrp != NULL && *requestmgrp == NULL
 *
 * Ensures:
 *
 *	On success, *requestmgrp is a valid request manager.
 *
 * Returns:
 *
 *	ISC_R_SUCCESS
 *
 *	Any other result indicates failure.
 */

void
dns_requestmgr_whenshutdown(dns_requestmgr_t *requestmgr, isc_task_t *task,
			    isc_event_t **eventp);
/*
 * Send '*eventp' to 'task' when 'requestmgr' has completed shutdown.
 *
 * Notes:
 *
 *	It is not safe to detach the last reference to 'requestmgr' until
 *	shutdown is complete.
 *
 * Requires:
 *
 *	'requestmgr' is a valid request manager.
 *
 *	'task' is a valid task.
 *
 *	*eventp is a valid event.
 *
 * Ensures:
 *
 *	*eventp == NULL.
 */

void
dns_requestmgr_shutdown(dns_requestmgr_t *requestmgr);
/*
 * Start the shutdown process for 'requestmgr'.
 *
 * Notes:
 *
 *	This call has no effect if the request manager is already shutting
 *	down.
 *
 * Requires:
 *
 *	'requestmgr' is a valid requestmgr.
 */

void
dns_requestmgr_attach(dns_requestmgr_t *source, dns_requestmgr_t **targetp);
/*
 *	Attach to the request manager.  dns_requestmgr_shutdown() must not
 *	have been called on 'source' prior to calling dns_requestmgr_attach().
 *
 * Requires:
 *
 *	'source' is a valid requestmgr.
 *
 *	'targetp' to be non NULL and '*targetp' to be NULL.
 */

void
dns_requestmgr_detach(dns_requestmgr_t **requestmgrp);
/*
 *
 *	Detach from the given requestmgr.  If this is the final detach
 *	requestmgr will be destroyed.  dns_requestmgr_shutdown() must
 *	be called before the final detach.
 *
 * Requires:
 *
 *	'*requestmgrp' is a valid requestmgr.
 *
 * Ensures:
 *	'*requestmgrp' is NULL.
 */

isc_result_t
dns_request_create(dns_requestmgr_t *requestmgr, dns_message_t *message,
		   isc_sockaddr_t *address, unsigned int options,
		   dns_tsigkey_t *key,
		   unsigned int timeout, isc_task_t *task,
		   isc_taskaction_t action, void *arg,
		   dns_request_t **requestp);
/*
 * Create and send a request.
 *
 * Notes:
 *
 *	'message' will be rendered and sent to 'address'.  If the
 *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
 *	will timeout after 'timeout' seconds.
 *
 *	When the request completes, successfully, due to a timeout, or
 *	because it was canceled, a completion event will be sent to 'task'.
 *
 * Requires:
 *
 *	'message' is a valid DNS message.
 *
 *	'address' is a valid sockaddr.
 *
 *	'timeout' > 0
 *
 *	'task' is a valid task.
 *
 *	requestp != NULL && *requestp == NULL
 */

isc_result_t
dns_request_createvia(dns_requestmgr_t *requestmgr, dns_message_t *message,
		      isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		      unsigned int options, dns_tsigkey_t *key,
		      unsigned int timeout, isc_task_t *task,
		      isc_taskaction_t action, void *arg,
		      dns_request_t **requestp);
/*
 * Create and send a request.
 *
 * Notes:
 *
 *	'message' will be rendered and sent to 'address'.  If the
 *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
 *	will timeout after 'timeout' seconds.
 *
 *	When the request completes, successfully, due to a timeout, or
 *	because it was canceled, a completion event will be sent to 'task'.
 *
 * Requires:
 *
 *	'message' is a valid DNS message.
 *
 *	'dstaddr' is a valid sockaddr.
 *
 *	'srcaddr' is a valid sockaddr or NULL.
 *
 *	'srcaddr' and 'dstaddr' are the same protocol family.
 *
 *	'timeout' > 0
 *
 *	'task' is a valid task.
 *
 *	requestp != NULL && *requestp == NULL
 */

isc_result_t
dns_request_createraw(dns_requestmgr_t *requestmgr, isc_buffer_t *msgbuf,
		      isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		      unsigned int options, unsigned int timeout,
		      isc_task_t *task, isc_taskaction_t action, void *arg,
		      dns_request_t **requestp);
/*
 * Create and send a request.
 *
 * Notes:
 *
 *	'msgbuf' will be sent to 'destaddr' after setting the id.  If the
 *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
 *	will timeout after 'timeout' seconds.
 *
 *	When the request completes, successfully, due to a timeout, or
 *	because it was canceled, a completion event will be sent to 'task'.
 *
 * Requires:
 *
 *	'msgbuf' is a valid DNS message in compressed wire format.
 *
 *	'destaddr' is a valid sockaddr.
 *
 *	'srcaddr' is a valid sockaddr or NULL.
 *
 *	'srcaddr' and 'dstaddr' are the same protocol family.
 *
 *	'timeout' > 0
 *
 *	'task' is a valid task.
 *
 *	requestp != NULL && *requestp == NULL
 */

isc_result_t
dns_request_cancel(dns_request_t *request);
/*
 * Cancel 'request'.
 *
 * Requires:
 *
 *	'request' is a valid request.
 *
 * Ensures:
 *
 *	If the completion event for 'request' has not yet been sent, it
 *	will be sent, and the result code will be ISC_R_CANCELED.
 */

isc_result_t
dns_request_getresponse(dns_request_t *request, dns_message_t *message,
			unsigned int options);
/*
 * Get the response to 'request' by filling in 'message'.
 *
 * 'options' is passed to dns_message_parse().  See dns_message_parse()
 * for more details.
 *
 * Requires:
 *
 *	'request' is a valid request for which the caller has received the
 *	completion event.
 *
 *	The result code of the completion event was ISC_R_SUCCESS.
 *
 * Returns:
 *
 *	ISC_R_SUCCESS
 *
 *	Any result that dns_message_parse() can return.
 */

isc_boolean_t
dns_request_usedtcp(dns_request_t *request);
/*
 * Return whether this query used TCP or not.  Setting DNS_REQUESTOPT_TCP
 * in the call to dns_request_create() will cause the function to return
 * ISC_TRUE, othewise the result is based on the query message size.
 *
 * Requires:
 *	'request' is a valid request.
 *
 * Returns:
 *	ISC_TRUE	if TCP was used.
 *	ISC_FALSE	if UDP was used.
 */

void
dns_request_destroy(dns_request_t **requestp);
/*
 * Destroy 'request'.
 *
 * Requires:
 *
 *	'request' is a valid request for which the caller has received the
 *	completion event.
 *
 * Ensures:
 *
 *	*requestp == NULL
 */

ISC_LANG_ENDDECLS

#endif /* DNS_REQUEST_H */
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 2000-2002  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: request.h,v 1.17.12.5 2004/03/08 09:04:39 marka Exp $ */
a201 17

isc_result_t
dns_request_createvia2(dns_requestmgr_t *requestmgr, dns_message_t *message,
		       isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		       unsigned int options, dns_tsigkey_t *key,
		       unsigned int timeout, unsigned int udptimeout,
		       isc_task_t *task, isc_taskaction_t action, void *arg,
		       dns_request_t **requestp);

isc_result_t
dns_request_createvia3(dns_requestmgr_t *requestmgr, dns_message_t *message,
		       isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		       unsigned int options, dns_tsigkey_t *key,
		       unsigned int timeout, unsigned int udptimeout,
		       unsigned int udpretries, isc_task_t *task,
		       isc_taskaction_t action, void *arg,
		       dns_request_t **requestp);
d209 1
a209 2
 *	will timeout after 'timeout' seconds.  UDP requests will be resent
 *	at 'udptimeout' intervals if non-zero or 'udpretries' is non-zero.
a236 16

isc_result_t
dns_request_createraw2(dns_requestmgr_t *requestmgr, isc_buffer_t *msgbuf,
		       isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		       unsigned int options, unsigned int timeout,
		       unsigned int udptimeout, isc_task_t *task,
		       isc_taskaction_t action, void *arg,
		       dns_request_t **requestp);

isc_result_t
dns_request_createraw3(dns_requestmgr_t *requestmgr, isc_buffer_t *msgbuf,
		       isc_sockaddr_t *srcaddr, isc_sockaddr_t *destaddr,
		       unsigned int options, unsigned int timeout,
		       unsigned int udptimeout, unsigned int udpretries,
		       isc_task_t *task, isc_taskaction_t action, void *arg,
		       dns_request_t **requestp);
d244 2
a245 3
 *	will timeout after 'timeout' seconds.   UDP requests will be resent
 *	at 'udptimeout' intervals if non-zero or if 'udpretries' is not zero.
 *	
d266 1
a266 1
void
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: request.h,v 1.21.18.2 2005/04/29 00:16:20 marka Exp $ */
d27 2
a28 1
/*! \file
a29 1
 * \brief
d34 1
a34 1
 *\li	The module ensures appropriate synchronization of data structures it
d38 1
a38 1
 *\li	TBS
d41 1
a41 1
 *\li	No anticipated impact.
d65 1
a65 1
/*%<
d70 1
a70 1
 *\li	'mctx' is a valid memory context.
d72 1
a72 1
 *\li	'timermgr' is a valid timer manager.
d74 1
a74 1
 *\li	'socketmgr' is a valid socket manager.
d76 1
a76 1
 *\li	'taskmgr' is a valid task manager.
d78 1
a78 1
 *\li	'dispatchv4' is a valid dispatcher with an IPv4 UDP socket, or is NULL.
d80 1
a80 1
 *\li	'dispatchv6' is a valid dispatcher with an IPv6 UDP socket, or is NULL.
d82 1
a82 1
 *\li	requestmgrp != NULL && *requestmgrp == NULL
d86 1
a86 1
 *\li	On success, *requestmgrp is a valid request manager.
d90 1
a90 1
 *\li	ISC_R_SUCCESS
d92 1
a92 1
 *\li	Any other result indicates failure.
d98 1
a98 1
/*%<
d103 1
a103 1
 *\li	It is not safe to detach the last reference to 'requestmgr' until
d108 1
a108 1
 *\li	'requestmgr' is a valid request manager.
d110 1
a110 1
 *\li	'task' is a valid task.
d112 1
a112 1
 *\li	*eventp is a valid event.
d116 1
a116 1
 *\li	*eventp == NULL.
d121 1
a121 1
/*%<
d126 1
a126 1
 *\li	This call has no effect if the request manager is already shutting
d131 1
a131 1
 *\li	'requestmgr' is a valid requestmgr.
d136 1
a136 1
/*%<
d142 1
a142 1
 *\li	'source' is a valid requestmgr.
d144 1
a144 1
 *\li	'targetp' to be non NULL and '*targetp' to be NULL.
d149 2
a150 1
/*%<
d157 1
a157 1
 *\li	'*requestmgrp' is a valid requestmgr.
d160 1
a160 1
 *\li	'*requestmgrp' is NULL.
d170 1
a170 1
/*%<
d175 2
a176 2
 *\li	'message' will be rendered and sent to 'address'.  If the
 *	#DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
d179 1
a179 1
 *\li	When the request completes, successfully, due to a timeout, or
d184 1
a184 1
 *\li	'message' is a valid DNS message.
d186 1
a186 1
 *\li	'address' is a valid sockaddr.
d188 1
a188 1
 *\li	'timeout' > 0
d190 1
a190 1
 *\li	'task' is a valid task.
d192 1
a192 1
 *\li	requestp != NULL && *requestp == NULL
a194 1
/*% See dns_request_createvia3() */
a202 1
/*% See dns_request_createvia3() */
d219 1
a219 1
/*%< 
d224 2
a225 2
 *\li	'message' will be rendered and sent to 'address'.  If the
 *	#DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
d229 1
a229 1
 *\li	When the request completes, successfully, due to a timeout, or
d234 1
a234 1
 *\li	'message' is a valid DNS message.
d236 1
a236 1
 *\li	'dstaddr' is a valid sockaddr.
d238 1
a238 1
 *\li	'srcaddr' is a valid sockaddr or NULL.
d240 1
a240 1
 *\li	'srcaddr' and 'dstaddr' are the same protocol family.
d242 1
a242 1
 *\li	'timeout' > 0
d244 1
a244 1
 *\li	'task' is a valid task.
d246 1
a246 1
 *\li	requestp != NULL && *requestp == NULL
a248 1
/*% See dns_request_createraw3() */
a255 1
/*% See dns_request_createraw3() */
d271 2
a272 2
/*!< 
 * \brief Create and send a request.
d276 2
a277 2
 *\li	'msgbuf' will be sent to 'destaddr' after setting the id.  If the
 *	#DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request
d281 1
a281 1
 *\li	When the request completes, successfully, due to a timeout, or
d286 1
a286 1
 *\li	'msgbuf' is a valid DNS message in compressed wire format.
d288 1
a288 1
 *\li	'destaddr' is a valid sockaddr.
d290 1
a290 1
 *\li	'srcaddr' is a valid sockaddr or NULL.
d292 1
a292 1
 *\li	'srcaddr' and 'dstaddr' are the same protocol family.
d294 1
a294 1
 *\li	'timeout' > 0
d296 1
a296 1
 *\li	'task' is a valid task.
d298 1
a298 1
 *\li	requestp != NULL && *requestp == NULL
d303 1
a303 1
/*%<
d308 1
a308 1
 *\li	'request' is a valid request.
d312 1
a312 1
 *\li	If the completion event for 'request' has not yet been sent, it
d319 1
a319 1
/*%<
d327 1
a327 1
 *\li	'request' is a valid request for which the caller has received the
d330 1
a330 1
 *\li	The result code of the completion event was #ISC_R_SUCCESS.
d334 1
a334 1
 *\li	ISC_R_SUCCESS
d336 1
a336 1
 *\li	Any result that dns_message_parse() can return.
d341 2
a342 2
/*%<
 * Return whether this query used TCP or not.  Setting #DNS_REQUESTOPT_TCP
d344 1
a344 1
 * #ISC_TRUE, othewise the result is based on the query message size.
d347 1
a347 1
 *\li	'request' is a valid request.
d350 2
a351 2
 *\li	ISC_TRUE	if TCP was used.
 *\li	ISC_FALSE	if UDP was used.
d356 1
a356 1
/*%<
d361 1
a361 1
 *\li	'request' is a valid request for which the caller has received the
d366 1
a366 1
 *\li	*requestp == NULL
@


