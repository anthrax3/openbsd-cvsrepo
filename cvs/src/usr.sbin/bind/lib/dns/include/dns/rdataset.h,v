head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.38
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.06;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.14.14.07;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.20;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.20;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.14;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.43.58;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.19.54;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.34.44;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004-2006  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: rdataset.h,v 1.51.18.7 2006/03/03 00:56:53 marka Exp $ */

#ifndef DNS_RDATASET_H
#define DNS_RDATASET_H 1

/*****
 ***** Module Info
 *****/

/*! \file
 * \brief
 * A DNS rdataset is a handle that can be associated with a collection of
 * rdata all having a common owner name, class, and type.
 *
 * The dns_rdataset_t type is like a "virtual class".  To actually use
 * rdatasets, an implementation of the method suite (e.g. "slabbed rdata") is
 * required.
 *
 * XXX &lt;more&gt; XXX
 *
 * MP:
 *\li	Clients of this module must impose any required synchronization.
 *
 * Reliability:
 *\li	No anticipated impact.
 *
 * Resources:
 *\li	TBS
 *
 * Security:
 *\li	No anticipated impact.
 *
 * Standards:
 *\li	None.
 */

#include <isc/lang.h>
#include <isc/magic.h>
#include <isc/stdtime.h>

#include <dns/types.h>

ISC_LANG_BEGINDECLS

typedef enum {
	dns_rdatasetadditional_fromauth,
	dns_rdatasetadditional_fromcache,
	dns_rdatasetadditional_fromglue
} dns_rdatasetadditional_t;

typedef struct dns_rdatasetmethods {
	void			(*disassociate)(dns_rdataset_t *rdataset);
	isc_result_t		(*first)(dns_rdataset_t *rdataset);
	isc_result_t		(*next)(dns_rdataset_t *rdataset);
	void			(*current)(dns_rdataset_t *rdataset,
					   dns_rdata_t *rdata);
	void			(*clone)(dns_rdataset_t *source,
					 dns_rdataset_t *target);
	unsigned int		(*count)(dns_rdataset_t *rdataset);
	isc_result_t		(*addnoqname)(dns_rdataset_t *rdataset,
					      dns_name_t *name);
	isc_result_t		(*getnoqname)(dns_rdataset_t *rdataset,
					      dns_name_t *name,
					      dns_rdataset_t *nsec,
					      dns_rdataset_t *nsecsig);
	isc_result_t		(*getadditional)(dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype,
						 dns_acache_t *acache,
						 dns_zone_t **zonep,
						 dns_db_t **dbp,
						 dns_dbversion_t **versionp,
						 dns_dbnode_t **nodep,
						 dns_name_t *fname,
						 dns_message_t *msg,
						 isc_stdtime_t now);
	isc_result_t		(*setadditional)(dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype,
						 dns_acache_t *acache,
						 dns_zone_t *zone,
						 dns_db_t *db,
						 dns_dbversion_t *version,
						 dns_dbnode_t *node,
						 dns_name_t *fname);
	isc_result_t		(*putadditional)(dns_acache_t *acache,
						 dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype);
} dns_rdatasetmethods_t;

#define DNS_RDATASET_MAGIC	       ISC_MAGIC('D','N','S','R')
#define DNS_RDATASET_VALID(set)	       ISC_MAGIC_VALID(set, DNS_RDATASET_MAGIC)

/*%
 * Direct use of this structure by clients is strongly discouraged, except
 * for the 'link' field which may be used however the client wishes.  The
 * 'private', 'current', and 'index' fields MUST NOT be changed by clients.
 * rdataset implementations may change any of the fields.
 */
struct dns_rdataset {
	unsigned int			magic;		/* XXX ? */
	dns_rdatasetmethods_t *		methods;
	ISC_LINK(dns_rdataset_t)	link;
	/*
	 * XXX do we need these, or should they be retrieved by methods?
	 * Leaning towards the latter, since they are not frequently required
	 * once you have the rdataset.
	 */
	dns_rdataclass_t		rdclass;
	dns_rdatatype_t			type;
	dns_ttl_t			ttl;
	dns_trust_t			trust;
	dns_rdatatype_t			covers;
	/*
	 * attributes
	 */
	unsigned int			attributes;
	/*%
	 * the counter provides the starting point in the "cyclic" order.
	 * The value ISC_UINT32_MAX has a special meaning of "picking up a
	 * random value." in order to take care of databases that do not
	 * increment the counter.
	 */
	isc_uint32_t			count;
	/*@@{*/
	/*%
	 * These are for use by the rdataset implementation, and MUST NOT
	 * be changed by clients.
	 */
	void *				private1;
	void *				private2;
	void *				private3;
	unsigned int			privateuint4;
	void *				private5;
	void *				private6;
	/*@@}*/
};

/*!
 * \def DNS_RDATASETATTR_RENDERED
 *	Used by message.c to indicate that the rdataset was rendered.
 *
 * \def DNS_RDATASETATTR_TTLADJUSTED
 *	Used by message.c to indicate that the rdataset's rdata had differing
 *	TTL values, and the rdataset->ttl holds the smallest.
 *
 * \def DNS_RDATASETATTR_LOADORDER
 *	Output the RRset in load order.
 */

#define DNS_RDATASETATTR_QUESTION	0x00000001
#define DNS_RDATASETATTR_RENDERED	0x00000002	/*%< Used by message.c */
#define DNS_RDATASETATTR_ANSWERED	0x00000004	/*%< Used by server. */
#define DNS_RDATASETATTR_CACHE		0x00000008	/*%< Used by resolver. */
#define DNS_RDATASETATTR_ANSWER		0x00000010	/*%< Used by resolver. */
#define DNS_RDATASETATTR_ANSWERSIG	0x00000020	/*%< Used by resolver. */
#define DNS_RDATASETATTR_EXTERNAL	0x00000040	/*%< Used by resolver. */
#define DNS_RDATASETATTR_NCACHE		0x00000080	/*%< Used by resolver. */
#define DNS_RDATASETATTR_CHAINING	0x00000100	/*%< Used by resolver. */
#define DNS_RDATASETATTR_TTLADJUSTED	0x00000200	/*%< Used by message.c */
#define DNS_RDATASETATTR_FIXEDORDER	0x00000400
#define DNS_RDATASETATTR_RANDOMIZE	0x00000800
#define DNS_RDATASETATTR_CHASE		0x00001000	/*%< Used by resolver. */
#define DNS_RDATASETATTR_NXDOMAIN	0x00002000
#define DNS_RDATASETATTR_NOQNAME	0x00004000
#define DNS_RDATASETATTR_CHECKNAMES	0x00008000	/*%< Used by resolver. */
#define DNS_RDATASETATTR_REQUIREDGLUE	0x00010000
#define DNS_RDATASETATTR_LOADORDER	0x00020000

/*%
 * _OMITDNSSEC:
 * 	Omit DNSSEC records when rendering ncache records.
 */
#define DNS_RDATASETTOWIRE_OMITDNSSEC	0x0001

void
dns_rdataset_init(dns_rdataset_t *rdataset);
/*%<
 * Make 'rdataset' a valid, disassociated rdataset.
 *
 * Requires:
 *\li	'rdataset' is not NULL.
 *
 * Ensures:
 *\li	'rdataset' is a valid, disassociated rdataset.
 */

void
dns_rdataset_invalidate(dns_rdataset_t *rdataset);
/*%<
 * Invalidate 'rdataset'.
 *
 * Requires:
 *\li	'rdataset' is a valid, disassociated rdataset.
 *
 * Ensures:
 *\li	If assertion checking is enabled, future attempts to use 'rdataset'
 *	without initializing it will cause an assertion failure.
 */

void
dns_rdataset_disassociate(dns_rdataset_t *rdataset);
/*%<
 * Disassociate 'rdataset' from its rdata, allowing it to be reused.
 *
 * Notes:
 *\li	The client must ensure it has no references to rdata in the rdataset
 *	before disassociating.
 *
 * Requires:
 *\li	'rdataset' is a valid, associated rdataset.
 *
 * Ensures:
 *\li	'rdataset' is a valid, disassociated rdataset.
 */

isc_boolean_t
dns_rdataset_isassociated(dns_rdataset_t *rdataset);
/*%<
 * Is 'rdataset' associated?
 *
 * Requires:
 *\li	'rdataset' is a valid rdataset.
 *
 * Returns:
 *\li	#ISC_TRUE			'rdataset' is associated.
 *\li	#ISC_FALSE			'rdataset' is not associated.
 */

void
dns_rdataset_makequestion(dns_rdataset_t *rdataset, dns_rdataclass_t rdclass,
			  dns_rdatatype_t type);
/*%<
 * Make 'rdataset' a valid, associated, question rdataset, with a
 * question class of 'rdclass' and type 'type'.
 *
 * Notes:
 *\li	Question rdatasets have a class and type, but no rdata.
 *
 * Requires:
 *\li	'rdataset' is a valid, disassociated rdataset.
 *
 * Ensures:
 *\li	'rdataset' is a valid, associated, question rdataset.
 */

void
dns_rdataset_clone(dns_rdataset_t *source, dns_rdataset_t *target);
/*%<
 * Make 'target' refer to the same rdataset as 'source'.
 *
 * Requires:
 *\li	'source' is a valid, associated rdataset.
 *
 *\li	'target' is a valid, dissociated rdataset.
 *
 * Ensures:
 *\li	'target' references the same rdataset as 'source'.
 */

unsigned int
dns_rdataset_count(dns_rdataset_t *rdataset);
/*%<
 * Return the number of records in 'rdataset'.
 *
 * Requires:
 *\li	'rdataset' is a valid, associated rdataset.
 *
 * Returns:
 *\li	The number of records in 'rdataset'.
 */

isc_result_t
dns_rdataset_first(dns_rdataset_t *rdataset);
/*%<
 * Move the rdata cursor to the first rdata in the rdataset (if any).
 *
 * Requires:
 *\li	'rdataset' is a valid, associated rdataset.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMORE			There are no rdata in the set.
 */

isc_result_t
dns_rdataset_next(dns_rdataset_t *rdataset);
/*%<
 * Move the rdata cursor to the next rdata in the rdataset (if any).
 *
 * Requires:
 *\li	'rdataset' is a valid, associated rdataset.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMORE			There are no more rdata in the set.
 */

void
dns_rdataset_current(dns_rdataset_t *rdataset, dns_rdata_t *rdata);
/*%<
 * Make 'rdata' refer to the current rdata.
 *
 * Notes:
 *
 *\li	The data returned in 'rdata' is valid for the life of the
 *	rdataset; in particular, subsequent changes in the cursor position
 *	do not invalidate 'rdata'.
 *
 * Requires:
 *\li	'rdataset' is a valid, associated rdataset.
 *
 *\li	The rdata cursor of 'rdataset' is at a valid location (i.e. the
 *	result of last call to a cursor movement command was ISC_R_SUCCESS).
 *
 * Ensures:
 *\li	'rdata' refers to the rdata at the rdata cursor location of
 *\li	'rdataset'.
 */

isc_result_t
dns_rdataset_totext(dns_rdataset_t *rdataset,
		    dns_name_t *owner_name,
		    isc_boolean_t omit_final_dot,
		    isc_boolean_t question,
		    isc_buffer_t *target);
/*%<
 * Convert 'rdataset' to text format, storing the result in 'target'.
 *
 * Notes:
 *\li	The rdata cursor position will be changed.
 *
 *\li	The 'question' flag should normally be #ISC_FALSE.  If it is 
 *	#ISC_TRUE, the TTL and rdata fields are not printed.  This is 
 *	for use when printing an rdata representing a question section.
 *
 *\li	This interface is deprecated; use dns_master_rdatasettottext()
 * 	and/or dns_master_questiontotext() instead.
 *
 * Requires:
 *\li	'rdataset' is a valid rdataset.
 *
 *\li	'rdataset' is not empty.
 */

isc_result_t
dns_rdataset_towire(dns_rdataset_t *rdataset,
		    dns_name_t *owner_name,
		    dns_compress_t *cctx,
		    isc_buffer_t *target,
		    unsigned int options,
		    unsigned int *countp);
/*%<
 * Convert 'rdataset' to wire format, compressing names as specified
 * in 'cctx', and storing the result in 'target'.
 *
 * Notes:
 *\li	The rdata cursor position will be changed.
 *
 *\li	The number of RRs added to target will be added to *countp.
 *
 * Requires:
 *\li	'rdataset' is a valid rdataset.
 *
 *\li	'rdataset' is not empty.
 *
 *\li	'countp' is a valid pointer.
 *
 * Ensures:
 *\li	On a return of ISC_R_SUCCESS, 'target' contains a wire format
 *	for the data contained in 'rdataset'.  Any error return leaves
 *	the buffer unchanged.
 *
 *\li	*countp has been incremented by the number of RRs added to
 *	target.
 *
 * Returns:
 *\li	#ISC_R_SUCCESS		- all ok
 *\li	#ISC_R_NOSPACE		- 'target' doesn't have enough room
 *
 *\li	Any error returned by dns_rdata_towire(), dns_rdataset_next(),
 *	dns_name_towire().
 */

isc_result_t
dns_rdataset_towiresorted(dns_rdataset_t *rdataset,
			  const dns_name_t *owner_name,
			  dns_compress_t *cctx,
			  isc_buffer_t *target,
			  dns_rdatasetorderfunc_t order,
			  const void *order_arg,
			  unsigned int options,
			  unsigned int *countp);
/*%<
 * Like dns_rdataset_towire(), but sorting the rdatasets according to
 * the integer value returned by 'order' when called witih the rdataset
 * and 'order_arg' as arguments.
 *
 * Requires:
 *\li	All the requirements of dns_rdataset_towire(), and
 *	that order_arg is NULL if and only if order is NULL.
 */

isc_result_t
dns_rdataset_towirepartial(dns_rdataset_t *rdataset,
			   const dns_name_t *owner_name,
			   dns_compress_t *cctx,
			   isc_buffer_t *target,
			   dns_rdatasetorderfunc_t order,
			   const void *order_arg,
			   unsigned int options,
			   unsigned int *countp,
			   void **state);
/*%<
 * Like dns_rdataset_towiresorted() except that a partial rdataset
 * may be written.
 *
 * Requires:
 *\li	All the requirements of dns_rdataset_towiresorted().
 *	If 'state' is non NULL then the current position in the
 *	rdataset will be remembered if the rdataset in not
 *	completely written and should be passed on on subsequent
 *	calls (NOT CURRENTLY IMPLEMENTED).
 *
 * Returns:
 *\li	#ISC_R_SUCCESS if all of the records were written.
 *\li	#ISC_R_NOSPACE if unable to fit in all of the records. *countp
 *		      will be updated to reflect the number of records
 *		      written.
 */

isc_result_t
dns_rdataset_additionaldata(dns_rdataset_t *rdataset,
			    dns_additionaldatafunc_t add, void *arg);
/*%<
 * For each rdata in rdataset, call 'add' for each name and type in the
 * rdata which is subject to additional section processing.
 *
 * Requires:
 *
 *\li	'rdataset' is a valid, non-question rdataset.
 *
 *\li	'add' is a valid dns_additionaldatafunc_t
 *
 * Ensures:
 *
 *\li	If successful, dns_rdata_additionaldata() will have been called for
 *	each rdata in 'rdataset'.
 *
 *\li	If a call to dns_rdata_additionaldata() is not successful, the
 *	result returned will be the result of dns_rdataset_additionaldata().
 *
 * Returns:
 *
 *\li	#ISC_R_SUCCESS
 *
 *\li	Any error that dns_rdata_additionaldata() can return.
 */

isc_result_t
dns_rdataset_getnoqname(dns_rdataset_t *rdataset, dns_name_t *name,
			dns_rdataset_t *nsec, dns_rdataset_t *nsecsig);
/*%<
 * Return the noqname proof for this record.
 *
 * Requires:
 *\li	'rdataset' to be valid and #DNS_RDATASETATTR_NOQNAME to be set.
 *\li	'name' to be valid.
 *\li	'nsec' and 'nsecsig' to be valid and not associated.
 */

isc_result_t
dns_rdataset_addnoqname(dns_rdataset_t *rdataset, dns_name_t *name);
/*%<
 * Associate a noqname proof with this record.
 * Sets #DNS_RDATASETATTR_NOQNAME if successful.
 * Adjusts the 'rdataset->ttl' to minimum of the 'rdataset->ttl' and
 * the 'nsec' and 'rrsig(nsec)' ttl.
 *
 * Requires:
 *\li	'rdataset' to be valid and #DNS_RDATASETATTR_NOQNAME to be set.
 *\li	'name' to be valid and have NSEC and RRSIG(NSEC) rdatasets.
 */

isc_result_t
dns_rdataset_getadditional(dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype,
			   dns_acache_t *acache,
			   dns_zone_t **zonep,
			   dns_db_t **dbp,
			   dns_dbversion_t **versionp,
			   dns_dbnode_t **nodep,
			   dns_name_t *fname,
			   dns_message_t *msg,
			   isc_stdtime_t now);
/*%<
 * Get cached additional information from the DB node for a particular
 * 'rdataset.'  'type' is one of dns_rdatasetadditional_fromauth,
 * dns_rdatasetadditional_fromcache, and dns_rdatasetadditional_fromglue,
 * which specifies the origin of the information.  'qtype' is intended to
 * be used for specifying a particular rdata type in the cached information.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 * 	ISC_R_FAILURE.
 * \li	For the other pointers, see dns_acache_getentry().
 *
 * Ensures:
 * \li	See dns_acache_getentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOTFOUND	- the corresponding DB node has not cached additional
 *			  information for 'rdataset.'
 * \li	Any error that dns_acache_getentry() can return.
 */

isc_result_t
dns_rdataset_setadditional(dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype,
			   dns_acache_t *acache,
			   dns_zone_t *zone,
			   dns_db_t *db,
			   dns_dbversion_t *version,
			   dns_dbnode_t *node,
			   dns_name_t *fname);
/*%<
 * Set cached additional information to the DB node for a particular
 * 'rdataset.'  See dns_rdataset_getadditional for the semantics of 'type'
 * and 'qtype'.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 *	ISC_R_FAILURE.
 * \li	For the other pointers, see dns_acache_setentry().
 *
 * Ensures:
 * \li	See dns_acache_setentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOMEMORY
 * \li	Any error that dns_acache_setentry() can return.
 */

isc_result_t
dns_rdataset_putadditional(dns_acache_t *acache,
			   dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype);
/*%<
 * Discard cached additional information stored in the DB node for a particular
 * 'rdataset.'  See dns_rdataset_getadditional for the semantics of 'type'
 * and 'qtype'.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 *	ISC_R_FAILURE.
 *
 * Ensures:
 * \li	See dns_acache_cancelentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOTFOUND	- the corresponding DB node has not cached additional
 *			  information for 'rdataset.'
 */

ISC_LANG_ENDDECLS

#endif /* DNS_RDATASET_H */
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.10 2006/03/02 00:37:20 marka Exp $ */
d27 2
a28 3
/*
 * DNS Rdataset
 *
d36 1
a36 1
 * XXX <more> XXX
d39 1
a39 1
 *	Clients of this module must impose any required synchronization.
d42 1
a42 1
 *	No anticipated impact.
d45 1
a45 1
 *	<TBS>
d48 1
a48 1
 *	No anticipated impact.
d51 1
a51 1
 *	None.
d56 1
d62 6
d83 24
d112 1
a112 1
/*
d136 1
a136 1
	/*
d143 2
a144 1
	/*
d154 1
d157 2
a158 2
/*
 * _RENDERED:
d161 1
a161 1
 * _TTLADJUSTED:
d164 3
d168 1
d170 9
a178 9
#define DNS_RDATASETATTR_RENDERED	0x00000002	/* Used by message.c */
#define DNS_RDATASETATTR_ANSWERED	0x00000004	/* Used by server. */
#define DNS_RDATASETATTR_CACHE		0x00000008	/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWER		0x00000010	/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWERSIG	0x00000020	/* Used by resolver. */
#define DNS_RDATASETATTR_EXTERNAL	0x00000040	/* Used by resolver. */
#define DNS_RDATASETATTR_NCACHE		0x00000080	/* Used by resolver. */
#define DNS_RDATASETATTR_CHAINING	0x00000100	/* Used by resolver. */
#define DNS_RDATASETATTR_TTLADJUSTED	0x00000200	/* Used by message.c */
d181 1
a181 1
#define DNS_RDATASETATTR_CHASE		0x00001000	/* Used by resolver. */
d184 1
a184 1
#define DNS_RDATASETATTR_CHECKNAMES	0x00008000	/* Used by resolver. */
d186 1
d188 1
a188 1
/*
d196 1
a196 1
/*
d200 1
a200 1
 *	'rdataset' is not NULL.
d203 1
a203 1
 *	'rdataset' is a valid, disassociated rdataset.
d208 1
a208 1
/*
d212 1
a212 1
 *	'rdataset' is a valid, disassociated rdataset.
d215 1
a215 1
 *	If assertion checking is enabled, future attempts to use 'rdataset'
d221 1
a221 1
/*
d225 1
a225 1
 *	The client must ensure it has no references to rdata in the rdataset
d229 1
a229 1
 *	'rdataset' is a valid, associated rdataset.
d232 1
a232 1
 *	'rdataset' is a valid, disassociated rdataset.
d237 1
a237 1
/*
d241 1
a241 1
 *	'rdataset' is a valid rdataset.
d244 2
a245 2
 *	ISC_TRUE			'rdataset' is associated.
 *	ISC_FALSE			'rdataset' is not associated.
d251 1
a251 1
/*
d256 1
a256 1
 *	Question rdatasets have a class and type, but no rdata.
d259 1
a259 1
 *	'rdataset' is a valid, disassociated rdataset.
d262 1
a262 1
 *	'rdataset' is a valid, associated, question rdataset.
d267 1
a267 1
/*
d271 1
a271 1
 *	'source' is a valid, associated rdataset.
d273 1
a273 1
 *	'target' is a valid, dissociated rdataset.
d276 1
a276 1
 *	'target' references the same rdataset as 'source'.
d281 1
a281 1
/*
d285 1
a285 1
 *	'rdataset' is a valid, associated rdataset.
d288 1
a288 1
 *	The number of records in 'rdataset'.
d293 1
a293 1
/*
d297 1
a297 1
 *	'rdataset' is a valid, associated rdataset.
d300 2
a301 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMORE			There are no rdata in the set.
d306 1
a306 1
/*
d310 1
a310 1
 *	'rdataset' is a valid, associated rdataset.
d313 2
a314 2
 *	ISC_R_SUCCESS
 *	ISC_R_NOMORE			There are no more rdata in the set.
d319 1
a319 1
/*
d324 1
a324 1
 *	The data returned in 'rdata' is valid for the life of the
d329 1
a329 1
 *	'rdataset' is a valid, associated rdataset.
d331 1
a331 1
 *	The rdata cursor of 'rdataset' is at a valid location (i.e. the
d335 2
a336 2
 *	'rdata' refers to the rdata at the rdata cursor location of
 *	'rdataset'.
d345 1
a345 1
/*
d349 1
a349 1
 *	The rdata cursor position will be changed.
d351 2
a352 2
 *	The 'question' flag should normally be ISC_FALSE.  If it is 
 *	ISC_TRUE, the TTL and rdata fields are not printed.  This is 
d355 1
a355 1
 *	This interface is deprecated; use dns_master_rdatasettottext()
d359 1
a359 1
 *	'rdataset' is a valid rdataset.
d361 1
a361 1
 *	'rdataset' is not empty.
d371 1
a371 1
/*
d376 1
a376 1
 *	The rdata cursor position will be changed.
d378 1
a378 1
 *	The number of RRs added to target will be added to *countp.
d381 1
a381 1
 *	'rdataset' is a valid rdataset.
d383 1
a383 1
 *	'rdataset' is not empty.
d385 1
a385 1
 *	'countp' is a valid pointer.
d388 1
a388 1
 *	On a return of ISC_R_SUCCESS, 'target' contains a wire format
d392 1
a392 1
 *	*countp has been incremented by the number of RRs added to
d396 2
a397 2
 *	ISC_R_SUCCESS		- all ok
 *	ISC_R_NOSPACE		- 'target' doesn't have enough room
d399 1
a399 1
 *	Any error returned by dns_rdata_towire(), dns_rdataset_next(),
d412 1
a412 1
/*
d418 1
a418 1
 *	All the requirements of dns_rdataset_towire(), and
d432 1
a432 1
/*
d437 1
a437 1
 *	All the requirements of dns_rdataset_towiresorted().
d444 2
a445 2
 *	ISC_R_SUCCESS if all of the records were written.
 *	ISC_R_NOSPACE if unable to fit in all of the records. *countp
a449 1

d453 1
a453 1
/*
d459 1
a459 1
 *	'rdataset' is a valid, non-question rdataset.
d461 1
a461 1
 *	'add' is a valid dns_additionaldatafunc_t
d465 1
a465 1
 *	If successful, dns_rdata_additionaldata() will have been called for
d468 1
a468 1
 *	If a call to dns_rdata_additionaldata() is not successful, the
d473 1
a473 1
 *	ISC_R_SUCCESS
d475 1
a475 1
 *	Any error that dns_rdata_additionaldata() can return.
d481 1
a481 1
/*
d485 3
a487 3
 *	'rdataset' to be valid and DNS_RDATASETATTR_NOQNAME to be set.
 *	'name' to be valid.
 *	'nsec' and 'nsecsig' to be valid and not associated.
d492 1
a492 1
/*
d494 1
a494 1
 * Sets DNS_RDATASETATTR_NOQNAME if successful.
d499 94
a592 2
 *	'rdataset' to be valid and DNS_RDATASETATTR_NOQNAME to be set.
 *	'name' to be valid and have NSEC and RRSIG(NSEC) rdatasets.
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.8 2005/03/17 03:58:31 marka Exp $ */
d368 1
a368 1
			  dns_name_t *owner_name,
d372 1
a372 1
			  void *order_arg,
d387 1
a387 1
			   dns_name_t *owner_name,
d391 1
a391 1
			   void *order_arg,
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.6 2004/03/08 02:08:01 marka Exp $ */
d133 17
a149 16
#define DNS_RDATASETATTR_QUESTION	0x0001
#define DNS_RDATASETATTR_RENDERED	0x0002		/* Used by message.c */
#define DNS_RDATASETATTR_ANSWERED	0x0004		/* Used by server. */
#define DNS_RDATASETATTR_CACHE		0x0008		/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWER		0x0010		/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWERSIG	0x0020		/* Used by resolver. */
#define DNS_RDATASETATTR_EXTERNAL	0x0040		/* Used by resolver. */
#define DNS_RDATASETATTR_NCACHE		0x0080		/* Used by resolver. */
#define DNS_RDATASETATTR_CHAINING	0x0100		/* Used by resolver. */
#define DNS_RDATASETATTR_TTLADJUSTED	0x0200		/* Used by message.c */
#define DNS_RDATASETATTR_FIXEDORDER	0x0400
#define DNS_RDATASETATTR_RANDOMIZE	0x0800
#define DNS_RDATASETATTR_CHASE		0x1000		/* Used by resolver. */
#define DNS_RDATASETATTR_NXDOMAIN	0x2000
#define DNS_RDATASETATTR_NOQNAME	0x4000
#define DNS_RDATASETATTR_CHECKNAMES	0x8000		/* Used by resolver. */
@


1.2
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 1
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5 2003/07/22 04:03:45 marka Exp $ */
d71 6
d107 7
d122 1
d147 8
d331 1
d372 1
d391 1
d439 25
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * Copyright (C) 1999-2002  Internet Software Consortium.
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.2 2002/04/23 02:28:52 marka Exp $ */
d107 1
a107 1
	void *				private4;
d132 1
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.6 2004/03/08 02:08:01 marka Exp $ */
a70 6
	isc_result_t		(*addnoqname)(dns_rdataset_t *rdataset,
					      dns_name_t *name);
	isc_result_t		(*getnoqname)(dns_rdataset_t *rdataset,
					      dns_name_t *name,
					      dns_rdataset_t *nsec,
					      dns_rdataset_t *nsecsig);
a100 7
	 * the counter provides the starting point in the "cyclic" order.
	 * The value ISC_UINT32_MAX has a special meaning of "picking up a
	 * random value." in order to take care of databases that do not
	 * increment the counter.
	 */
	isc_uint32_t			count;
	/*
d107 1
a107 1
	unsigned int			privateuint4;
a108 1
	void *				private6;
a131 9
#define DNS_RDATASETATTR_NXDOMAIN	0x2000
#define DNS_RDATASETATTR_NOQNAME	0x4000
#define DNS_RDATASETATTR_CHECKNAMES	0x8000		/* Used by resolver. */

/*
 * _OMITDNSSEC:
 * 	Omit DNSSEC records when rendering ncache records.
 */
#define DNS_RDATASETTOWIRE_OMITDNSSEC	0x0001
a307 1
		    unsigned int options,
a347 1
			  unsigned int options,
a365 1
			   unsigned int options,
a412 25
 */

isc_result_t
dns_rdataset_getnoqname(dns_rdataset_t *rdataset, dns_name_t *name,
			dns_rdataset_t *nsec, dns_rdataset_t *nsecsig);
/*
 * Return the noqname proof for this record.
 *
 * Requires:
 *	'rdataset' to be valid and DNS_RDATASETATTR_NOQNAME to be set.
 *	'name' to be valid.
 *	'nsec' and 'nsecsig' to be valid and not associated.
 */

isc_result_t
dns_rdataset_addnoqname(dns_rdataset_t *rdataset, dns_name_t *name);
/*
 * Associate a noqname proof with this record.
 * Sets DNS_RDATASETATTR_NOQNAME if successful.
 * Adjusts the 'rdataset->ttl' to minimum of the 'rdataset->ttl' and
 * the 'nsec' and 'rrsig(nsec)' ttl.
 *
 * Requires:
 *	'rdataset' to be valid and DNS_RDATASETATTR_NOQNAME to be set.
 *	'name' to be valid and have NSEC and RRSIG(NSEC) rdatasets.
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.8 2005/03/17 03:58:31 marka Exp $ */
d133 16
a148 17
#define DNS_RDATASETATTR_QUESTION	0x00000001
#define DNS_RDATASETATTR_RENDERED	0x00000002	/* Used by message.c */
#define DNS_RDATASETATTR_ANSWERED	0x00000004	/* Used by server. */
#define DNS_RDATASETATTR_CACHE		0x00000008	/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWER		0x00000010	/* Used by resolver. */
#define DNS_RDATASETATTR_ANSWERSIG	0x00000020	/* Used by resolver. */
#define DNS_RDATASETATTR_EXTERNAL	0x00000040	/* Used by resolver. */
#define DNS_RDATASETATTR_NCACHE		0x00000080	/* Used by resolver. */
#define DNS_RDATASETATTR_CHAINING	0x00000100	/* Used by resolver. */
#define DNS_RDATASETATTR_TTLADJUSTED	0x00000200	/* Used by message.c */
#define DNS_RDATASETATTR_FIXEDORDER	0x00000400
#define DNS_RDATASETATTR_RANDOMIZE	0x00000800
#define DNS_RDATASETATTR_CHASE		0x00001000	/* Used by resolver. */
#define DNS_RDATASETATTR_NXDOMAIN	0x00002000
#define DNS_RDATASETATTR_NOQNAME	0x00004000
#define DNS_RDATASETATTR_CHECKNAMES	0x00008000	/* Used by resolver. */
#define DNS_RDATASETATTR_REQUIREDGLUE	0x00010000
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d2 1
a2 1
 * Copyright (C) 2004-2006  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: rdataset.h,v 1.41.2.5.2.10 2006/03/02 00:37:20 marka Exp $ */
d368 1
a368 1
			  const dns_name_t *owner_name,
d372 1
a372 1
			  const void *order_arg,
d387 1
a387 1
			   const dns_name_t *owner_name,
d391 1
a391 1
			   const void *order_arg,
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d18 1
a18 1
/* $ISC: rdataset.h,v 1.51.18.7 2006/03/03 00:56:53 marka Exp $ */
d27 3
a29 2
/*! \file
 * \brief
d37 1
a37 1
 * XXX &lt;more&gt; XXX
d40 1
a40 1
 *\li	Clients of this module must impose any required synchronization.
d43 1
a43 1
 *\li	No anticipated impact.
d46 1
a46 1
 *\li	TBS
d49 1
a49 1
 *\li	No anticipated impact.
d52 1
a52 1
 *\li	None.
a56 1
#include <isc/stdtime.h>
a61 6
typedef enum {
	dns_rdatasetadditional_fromauth,
	dns_rdatasetadditional_fromcache,
	dns_rdatasetadditional_fromglue
} dns_rdatasetadditional_t;

a76 24
	isc_result_t		(*getadditional)(dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype,
						 dns_acache_t *acache,
						 dns_zone_t **zonep,
						 dns_db_t **dbp,
						 dns_dbversion_t **versionp,
						 dns_dbnode_t **nodep,
						 dns_name_t *fname,
						 dns_message_t *msg,
						 isc_stdtime_t now);
	isc_result_t		(*setadditional)(dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype,
						 dns_acache_t *acache,
						 dns_zone_t *zone,
						 dns_db_t *db,
						 dns_dbversion_t *version,
						 dns_dbnode_t *node,
						 dns_name_t *fname);
	isc_result_t		(*putadditional)(dns_acache_t *acache,
						 dns_rdataset_t *rdataset,
						 dns_rdatasetadditional_t type,
						 dns_rdatatype_t qtype);
d82 1
a82 1
/*%
d106 1
a106 1
	/*%
d113 1
a113 2
	/*@@{*/
	/*%
a122 1
	/*@@}*/
d125 2
a126 2
/*!
 * \def DNS_RDATASETATTR_RENDERED
d129 1
a129 1
 * \def DNS_RDATASETATTR_TTLADJUSTED
a131 3
 *
 * \def DNS_RDATASETATTR_LOADORDER
 *	Output the RRset in load order.
a132 1

d134 9
a142 9
#define DNS_RDATASETATTR_RENDERED	0x00000002	/*%< Used by message.c */
#define DNS_RDATASETATTR_ANSWERED	0x00000004	/*%< Used by server. */
#define DNS_RDATASETATTR_CACHE		0x00000008	/*%< Used by resolver. */
#define DNS_RDATASETATTR_ANSWER		0x00000010	/*%< Used by resolver. */
#define DNS_RDATASETATTR_ANSWERSIG	0x00000020	/*%< Used by resolver. */
#define DNS_RDATASETATTR_EXTERNAL	0x00000040	/*%< Used by resolver. */
#define DNS_RDATASETATTR_NCACHE		0x00000080	/*%< Used by resolver. */
#define DNS_RDATASETATTR_CHAINING	0x00000100	/*%< Used by resolver. */
#define DNS_RDATASETATTR_TTLADJUSTED	0x00000200	/*%< Used by message.c */
d145 1
a145 1
#define DNS_RDATASETATTR_CHASE		0x00001000	/*%< Used by resolver. */
d148 1
a148 1
#define DNS_RDATASETATTR_CHECKNAMES	0x00008000	/*%< Used by resolver. */
a149 1
#define DNS_RDATASETATTR_LOADORDER	0x00020000
d151 1
a151 1
/*%
d159 1
a159 1
/*%<
d163 1
a163 1
 *\li	'rdataset' is not NULL.
d166 1
a166 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d171 1
a171 1
/*%<
d175 1
a175 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d178 1
a178 1
 *\li	If assertion checking is enabled, future attempts to use 'rdataset'
d184 1
a184 1
/*%<
d188 1
a188 1
 *\li	The client must ensure it has no references to rdata in the rdataset
d192 1
a192 1
 *\li	'rdataset' is a valid, associated rdataset.
d195 1
a195 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d200 1
a200 1
/*%<
d204 1
a204 1
 *\li	'rdataset' is a valid rdataset.
d207 2
a208 2
 *\li	#ISC_TRUE			'rdataset' is associated.
 *\li	#ISC_FALSE			'rdataset' is not associated.
d214 1
a214 1
/*%<
d219 1
a219 1
 *\li	Question rdatasets have a class and type, but no rdata.
d222 1
a222 1
 *\li	'rdataset' is a valid, disassociated rdataset.
d225 1
a225 1
 *\li	'rdataset' is a valid, associated, question rdataset.
d230 1
a230 1
/*%<
d234 1
a234 1
 *\li	'source' is a valid, associated rdataset.
d236 1
a236 1
 *\li	'target' is a valid, dissociated rdataset.
d239 1
a239 1
 *\li	'target' references the same rdataset as 'source'.
d244 1
a244 1
/*%<
d248 1
a248 1
 *\li	'rdataset' is a valid, associated rdataset.
d251 1
a251 1
 *\li	The number of records in 'rdataset'.
d256 1
a256 1
/*%<
d260 1
a260 1
 *\li	'rdataset' is a valid, associated rdataset.
d263 2
a264 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMORE			There are no rdata in the set.
d269 1
a269 1
/*%<
d273 1
a273 1
 *\li	'rdataset' is a valid, associated rdataset.
d276 2
a277 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMORE			There are no more rdata in the set.
d282 1
a282 1
/*%<
d287 1
a287 1
 *\li	The data returned in 'rdata' is valid for the life of the
d292 1
a292 1
 *\li	'rdataset' is a valid, associated rdataset.
d294 1
a294 1
 *\li	The rdata cursor of 'rdataset' is at a valid location (i.e. the
d298 2
a299 2
 *\li	'rdata' refers to the rdata at the rdata cursor location of
 *\li	'rdataset'.
d308 1
a308 1
/*%<
d312 1
a312 1
 *\li	The rdata cursor position will be changed.
d314 2
a315 2
 *\li	The 'question' flag should normally be #ISC_FALSE.  If it is 
 *	#ISC_TRUE, the TTL and rdata fields are not printed.  This is 
d318 1
a318 1
 *\li	This interface is deprecated; use dns_master_rdatasettottext()
d322 1
a322 1
 *\li	'rdataset' is a valid rdataset.
d324 1
a324 1
 *\li	'rdataset' is not empty.
d334 1
a334 1
/*%<
d339 1
a339 1
 *\li	The rdata cursor position will be changed.
d341 1
a341 1
 *\li	The number of RRs added to target will be added to *countp.
d344 1
a344 1
 *\li	'rdataset' is a valid rdataset.
d346 1
a346 1
 *\li	'rdataset' is not empty.
d348 1
a348 1
 *\li	'countp' is a valid pointer.
d351 1
a351 1
 *\li	On a return of ISC_R_SUCCESS, 'target' contains a wire format
d355 1
a355 1
 *\li	*countp has been incremented by the number of RRs added to
d359 2
a360 2
 *\li	#ISC_R_SUCCESS		- all ok
 *\li	#ISC_R_NOSPACE		- 'target' doesn't have enough room
d362 1
a362 1
 *\li	Any error returned by dns_rdata_towire(), dns_rdataset_next(),
d375 1
a375 1
/*%<
d381 1
a381 1
 *\li	All the requirements of dns_rdataset_towire(), and
d395 1
a395 1
/*%<
d400 1
a400 1
 *\li	All the requirements of dns_rdataset_towiresorted().
d407 2
a408 2
 *\li	#ISC_R_SUCCESS if all of the records were written.
 *\li	#ISC_R_NOSPACE if unable to fit in all of the records. *countp
d413 1
d417 1
a417 1
/*%<
d423 1
a423 1
 *\li	'rdataset' is a valid, non-question rdataset.
d425 1
a425 1
 *\li	'add' is a valid dns_additionaldatafunc_t
d429 1
a429 1
 *\li	If successful, dns_rdata_additionaldata() will have been called for
d432 1
a432 1
 *\li	If a call to dns_rdata_additionaldata() is not successful, the
d437 1
a437 1
 *\li	#ISC_R_SUCCESS
d439 1
a439 1
 *\li	Any error that dns_rdata_additionaldata() can return.
d445 1
a445 1
/*%<
d449 3
a451 3
 *\li	'rdataset' to be valid and #DNS_RDATASETATTR_NOQNAME to be set.
 *\li	'name' to be valid.
 *\li	'nsec' and 'nsecsig' to be valid and not associated.
d456 1
a456 1
/*%<
d458 1
a458 1
 * Sets #DNS_RDATASETATTR_NOQNAME if successful.
d463 2
a464 94
 *\li	'rdataset' to be valid and #DNS_RDATASETATTR_NOQNAME to be set.
 *\li	'name' to be valid and have NSEC and RRSIG(NSEC) rdatasets.
 */

isc_result_t
dns_rdataset_getadditional(dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype,
			   dns_acache_t *acache,
			   dns_zone_t **zonep,
			   dns_db_t **dbp,
			   dns_dbversion_t **versionp,
			   dns_dbnode_t **nodep,
			   dns_name_t *fname,
			   dns_message_t *msg,
			   isc_stdtime_t now);
/*%<
 * Get cached additional information from the DB node for a particular
 * 'rdataset.'  'type' is one of dns_rdatasetadditional_fromauth,
 * dns_rdatasetadditional_fromcache, and dns_rdatasetadditional_fromglue,
 * which specifies the origin of the information.  'qtype' is intended to
 * be used for specifying a particular rdata type in the cached information.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 * 	ISC_R_FAILURE.
 * \li	For the other pointers, see dns_acache_getentry().
 *
 * Ensures:
 * \li	See dns_acache_getentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOTFOUND	- the corresponding DB node has not cached additional
 *			  information for 'rdataset.'
 * \li	Any error that dns_acache_getentry() can return.
 */

isc_result_t
dns_rdataset_setadditional(dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype,
			   dns_acache_t *acache,
			   dns_zone_t *zone,
			   dns_db_t *db,
			   dns_dbversion_t *version,
			   dns_dbnode_t *node,
			   dns_name_t *fname);
/*%<
 * Set cached additional information to the DB node for a particular
 * 'rdataset.'  See dns_rdataset_getadditional for the semantics of 'type'
 * and 'qtype'.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 *	ISC_R_FAILURE.
 * \li	For the other pointers, see dns_acache_setentry().
 *
 * Ensures:
 * \li	See dns_acache_setentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOMEMORY
 * \li	Any error that dns_acache_setentry() can return.
 */

isc_result_t
dns_rdataset_putadditional(dns_acache_t *acache,
			   dns_rdataset_t *rdataset,
			   dns_rdatasetadditional_t type,
			   dns_rdatatype_t qtype);
/*%<
 * Discard cached additional information stored in the DB node for a particular
 * 'rdataset.'  See dns_rdataset_getadditional for the semantics of 'type'
 * and 'qtype'.
 *
 * Requires:
 * \li	'rdataset' is a valid rdataset.
 * \li	'acache' can be NULL, in which case this function will simply return
 *	ISC_R_FAILURE.
 *
 * Ensures:
 * \li	See dns_acache_cancelentry().
 *
 * Returns:
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_FAILURE	- additional information caching is not supported.
 * \li	#ISC_R_NOTFOUND	- the corresponding DB node has not cached additional
 *			  information for 'rdataset.'
@


