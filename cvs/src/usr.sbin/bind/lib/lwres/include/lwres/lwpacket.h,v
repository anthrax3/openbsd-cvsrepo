head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.38
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.40
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.36
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.32
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.34
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.26
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.30
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.28
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.24
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.22
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.20
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.18
	OPENBSD_5_0:1.1.1.3.0.16
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.14
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.12
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.8
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.10
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	OPENBSD_4_3_BASE:1.1.1.3
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.49;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.49;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.02;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.01;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 1999-2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: lwpacket.h,v 1.17 2001/01/09 21:59:46 bwelling Exp $ */

#ifndef LWRES_LWPACKET_H
#define LWRES_LWPACKET_H 1

#include <lwres/lang.h>
#include <lwres/lwbuffer.h>
#include <lwres/result.h>

typedef struct lwres_lwpacket lwres_lwpacket_t;

struct lwres_lwpacket {
	lwres_uint32_t		length;
	lwres_uint16_t		version;
	lwres_uint16_t		pktflags;
	lwres_uint32_t		serial;
	lwres_uint32_t		opcode;
	lwres_uint32_t		result;
	lwres_uint32_t		recvlength;
	lwres_uint16_t		authtype;
	lwres_uint16_t		authlength;
};

#define LWRES_LWPACKET_LENGTH		(4 * 5 + 2 * 4)

#define LWRES_LWPACKETFLAG_RESPONSE	0x0001U	/* if set, pkt is a response */


#define LWRES_LWPACKETVERSION_0		0

/*
 * "length" is the overall packet length, including the entire packet header.
 *
 * "version" specifies the header format.  Currently, there is only one
 * format, LWRES_LWPACKETVERSION_0.
 *
 * "flags" specifies library-defined flags for this packet.  None of these
 * are definable by the caller, but library-defined values can be set by
 * the caller.  For example, one bit in this field indicates if the packet
 * is a request or a response.
 *
 * "serial" is set by the requestor and is returned in all replies.  If two
 * packets from the same source have the same serial number and are from
 * the same source, they are assumed to be duplicates and the latter ones
 * may be dropped.  (The library does not do this by default on replies, but
 * does so on requests.)
 *
 * "opcode" is application defined.  Opcodes between 0x04000000 and 0xffffffff
 * are application defined.  Opcodes between 0x00000000 and 0x03ffffff are
 * reserved for library use.
 *
 * "result" is application defined, and valid only on replies.
 * Results between 0x04000000 and 0xffffffff are application defined.
 * Results between 0x00000000 and 0x03ffffff are reserved for library use.
 * (This is the same reserved range defined in <isc/resultclass.h>, so it
 * would be trivial to map ISC_R_* result codes into packet result codes
 * when appropriate.)
 *
 * "recvlength" is set to the maximum buffer size that the receiver can
 * handle on requests, and the size of the buffer needed to satisfy a request
 * when the buffer is too large for replies.
 *
 * "authtype" is the packet level auth type used.
 * Authtypes between 0x1000 and 0xffff are application defined.  Authtypes
 * between 0x0000 and 0x0fff are reserved for library use.  This is currently
 * unused and MUST be set to zero.
 *
 * "authlen" is the length of the authentication data.  See the specific
 * authtypes for more information on what is contained in this field.  This
 * is currently unused, and MUST be set to zero.
 *
 * The remainder of the packet consists of two regions, one described by
 * "authlen" and one of "length - authlen - sizeof(lwres_lwpacket_t)".
 *
 * That is:
 *
 *	pkt header
 *	authlen bytes of auth information
 *	data bytes
 */

/*
 * Currently defined opcodes:
 *
 *	NOOP.  Success is always returned, with the packet contents echoed.
 *
 *	GETADDRSBYNAME.  Return all known addresses for a given name.
 *		This may return NIS or /etc/hosts info as well as DNS
 *		information.  Flags will be provided to indicate ip4/ip6
 *		addresses are desired.
 *
 *	GETNAMEBYADDR.	Return the hostname for the given address.  Once
 *		again, it will return data from multiple sources.
 */

LWRES_LANG_BEGINDECLS

/* XXXMLG document */
lwres_result_t
lwres_lwpacket_renderheader(lwres_buffer_t *b, lwres_lwpacket_t *pkt);

lwres_result_t
lwres_lwpacket_parseheader(lwres_buffer_t *b, lwres_lwpacket_t *pkt);

LWRES_LANG_ENDDECLS

#endif /* LWRES_LWPACKET_H */
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: lwpacket.h,v 1.17.206.1 2004/03/06 08:15:35 marka Exp $ */
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: lwpacket.h,v 1.18.18.2 2005/04/29 00:17:22 marka Exp $ */
a26 1
/*% lwres_lwpacket_t */
a28 1
/*% lwres_lwpacket structure */
a29 6
	/*! The overall packet length, including the 
	 *  entire packet header.
	 *  This field is filled in by the
	 *  \link lwres_gabn.c lwres_gabn_*()\endlink 
	 *  and \link lwres_gnba.c lwres_gnba_*()\endlink calls.
	 */
a30 6
	/*! Specifies the header format.  Currently, 
	 *  there is only one format, #LWRES_LWPACKETVERSION_0.
	 *  This field is filled in by the
	 *  \link lwres_gabn.c lwres_gabn_*()\endlink 
	 *  and \link lwres_gnba.c lwres_gnba_*()\endlink calls.
         */
a31 12
 	/*! Specifies library-defined flags for this packet, such as
	 *  whether the packet is a request or a reply.  None of 
	 *  these are definable by the caller, but library-defined values 
	 *  can be set by the caller.  For example, one bit in this field 
	 *  indicates if the packet is a request or a response.
	 *  This field is filled in by
	 *  the application wits the exception of the
	 *  #LWRES_LWPACKETFLAG_RESPONSE bit, which is set by the library
	 *  in the
	 *  \link lwres_gabn.c lwres_gabn_*()\endlink 
	 *  and \link lwres_gnba.c lwres_gnba_*()\endlink calls.
         */
a32 7
 	/*! Set by the requestor and is returned in all replies.  
	 *  If two packets from the same source have the same serial 
	 *  number and are from the same source, they are assumed to 
	 *  be duplicates and the latter ones may be dropped.  
	 *  (The library does not do this by default on replies, but
 	 * does so on requests.)
         */
a33 8
 	/*! Opcodes between 0x04000000 and 0xffffffff
 	 *  are application defined.  Opcodes between 
	 *  0x00000000 and 0x03ffffff are
 	 * reserved for library use.
	 *  This field is filled in by the
	 *  \link lwres_gabn.c lwres_gabn_*()\endlink 
	 *  and \link lwres_gnba.c lwres_gnba_*()\endlink calls.
	 */
a34 13
 	/*! Only valid for results.  
	 *  Results between 0x04000000 and 0xffffffff are application 
	 *  defined.
 	 * Results between 0x00000000 and 0x03ffffff are reserved for 
	 * library use.
 	 * (This is the same reserved range defined in <isc/resultclass.h>, 
	 * so it
 	 * would be trivial to map ISC_R_* result codes into packet result 
	 * codes when appropriate.)
	 *  This field is filled in by the
	 *  \link lwres_gabn.c lwres_gabn_*()\endlink 
	 *  and \link lwres_gnba.c lwres_gnba_*()\endlink calls.
	 */
a35 6
 	/*! Set to the maximum buffer size that the receiver can
 	 *  handle on requests, and the size of the buffer needed to 
	 *  satisfy a request
 	 *  when the buffer is too large for replies.
	 *  This field is supplied by the application.
	 */
a36 7
 	/*! The packet level auth type used.
 	 *  Authtypes between 0x1000 and 0xffff are application defined.  
	 *  Authtypes
 	 *  between 0x0000 and 0x0fff are reserved for library use.  
	 *  This is currently
 	 *  unused and MUST be set to zero.
	 */
a37 6
 	/*! The length of the authentication data.  
	 *  See the specific
 	 * authtypes for more information on what is contained 
	 * in this field.  This is currently unused, and 
	 * MUST be set to zero.
	 */
d41 1
a41 1
#define LWRES_LWPACKET_LENGTH		(4 * 5 + 2 * 4) /*%< Overall length. */
d43 1
a43 1
#define LWRES_LWPACKETFLAG_RESPONSE	0x0001U	/*%< If set, pkt is a response. */
d46 1
a46 1
#define LWRES_LWPACKETVERSION_0		0	/*%< Header format. */
d48 2
a49 1
/*! \file lwpacket.h
d51 37
a93 1
 * \code
d97 3
a99 2
 * \endcode
 *
d102 1
a102 1
 *\li	#LWRES_OPCODE_NOOP.  Success is always returned, with the packet contents echoed.
d104 1
a104 1
 *\li	#LWRES_OPCODE_GETADDRSBYNAME.  Return all known addresses for a given name.
d109 1
a109 1
 *\li	#LWRES_OPCODE_GETNAMEBYADDR.	Return the hostname for the given address.  Once
@


