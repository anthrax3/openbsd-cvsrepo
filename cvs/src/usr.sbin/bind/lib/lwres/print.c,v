head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.42
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.40
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.36
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.32
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.34
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.26
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	BIND_9_3_0:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.22.16.52.40;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.29.20.55.27;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.28.16.36.01;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.28.16.36.01;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.03.22.16.38.38;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.29;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.53;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.5
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2001, 2003  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: print.c,v 1.2.2.7 2005/10/14 01:28:30 marka Exp $ */

#include <config.h>

#include <ctype.h>
#include <stdio.h>		/* for sprintf */
#include <string.h>

#define	LWRES__PRINT_SOURCE	/* Used to get the lwres_print_* prototypes. */

#include <lwres/stdlib.h>

#include "assert_p.h"
#include "print_p.h"

#define LWRES_PRINT_QUADFORMAT LWRES_PLATFORM_QUADFORMAT

int
lwres__print_sprintf(char *str, const char *format, ...) {
	va_list ap;

	va_start(ap, format);
	vsprintf(str, format, ap);
	va_end(ap);
	return (strlen(str));
}

/*
 * Return length of string that would have been written if not truncated.
 */

int
lwres__print_snprintf(char *str, size_t size, const char *format, ...) {
	va_list ap;
	int ret;

	va_start(ap, format);
	ret = vsnprintf(str, size, format, ap);
	va_end(ap);
	return (ret);

}

/*
 * Return length of string that would have been written if not truncated.
 */

int
lwres__print_vsnprintf(char *str, size_t size, const char *format, va_list ap) {
	int h;
	int l;
	int q;
	int alt;
	int zero;
	int left;
	int plus;
	int space;
	long long tmpi;
	unsigned long long tmpui;
	unsigned long width;
	unsigned long precision;
	unsigned int length;
	char buf[1024];
	char c;
	void *v;
	char *save = str;
	const char *cp;
	const char *head;
	int count = 0;
	int pad;
	int zeropad;
	int dot;
	double dbl;
#ifdef HAVE_LONG_DOUBLE
	long double ldbl;
#endif
	char fmt[32];

	INSIST(str != NULL);
	INSIST(format != NULL);

	while (*format != '\0') {
		if (*format != '%') {
			if (size > 1U) {
				*str++ = *format;
				size--;
			}
			count++;
			format++;
			continue;
		}
		format++;

		/*
		 * Reset flags.
		 */
		dot = space = plus = left = zero = alt = h = l = q = 0;
		width = precision = 0;
		head = "";
		length = pad = zeropad = 0;

		do {
			if (*format == '#') {
				alt = 1;
				format++;
			} else if (*format == '-') {
				left = 1;
				zero = 0;
				format++;
			} else if (*format == ' ') {
				if (!plus)
					space = 1;
				format++;
			} else if (*format == '+') {
				plus = 1;
				space = 0;
				format++;
			} else if (*format == '0') {
				if (!left)
					zero = 1;
				format++;
			} else
				break;
		} while (1);

		/*
		 * Width.
		 */
		if (*format == '*') {
			width = va_arg(ap, int);
			format++;
		} else if (isdigit((unsigned char)*format)) {
			char *e;
			width = strtoul(format, &e, 10);
			format = e;
		}

		/*
		 * Precision.
		 */
		if (*format == '.') {
			format++;
			dot = 1;
			if (*format == '*') {
				precision = va_arg(ap, int);
				format++;
			} else if (isdigit((unsigned char)*format)) {
				char *e;
				precision = strtoul(format, &e, 10);
				format = e;
			}
		}

		switch (*format) {
		case '\0':
			continue;
		case '%':
			if (size > 1U) {
				*str++ = *format;
				size--;
			}
			count++;
			break;
		case 'q':
			q = 1;
			format++;
			goto doint;
		case 'h':
			h = 1;
			format++;
			goto doint;
		case 'l':
			l = 1;
			format++;
			if (*format == 'l') {
				q = 1;
				format++;
			}
			goto doint;
		case 'n':
		case 'i':
		case 'd':
		case 'o':
		case 'u':
		case 'x':
		case 'X':
		doint:
			if (precision != 0U)
				zero = 0;
			switch (*format) {
			case 'n':
				if (h) {
					short int *p;
					p = va_arg(ap, short *);
					REQUIRE(p != NULL);
					*p = str - save;
				} else if (l) {
					long int *p;
					p = va_arg(ap, long *);
					REQUIRE(p != NULL);
					*p = str - save;
				} else {
					int *p;
					p = va_arg(ap, int *);
					REQUIRE(p != NULL);
					*p = str - save;
				}
				break;
			case 'i':
			case 'd':
				if (q)
					tmpi = va_arg(ap, long long int);
				else if (l)
					tmpi = va_arg(ap, long int);
				else
					tmpi = va_arg(ap, int);
				if (tmpi < 0) {
					head = "-";
					tmpui = -tmpi;
				} else {
					if (plus)
						head = "+";
					else if (space)
						head = " ";
					else
						head = "";
					tmpui = tmpi;
				}
				snprintf(buf, sizeof(buf),
					"%" LWRES_PRINT_QUADFORMAT "u",
					tmpui);
				goto printint;
			case 'o':
				if (q)
					tmpui = va_arg(ap,
						       unsigned long long int);
				else if (l)
					tmpui = va_arg(ap, long int);
				else
					tmpui = va_arg(ap, int);
				snprintf(buf, sizeof(buf),
					alt ? "%#" LWRES_PRINT_QUADFORMAT "o"
					    : "%" LWRES_PRINT_QUADFORMAT "o",
					tmpui);
				goto printint;
			case 'u':
				if (q)
					tmpui = va_arg(ap,
						       unsigned long long int);
				else if (l)
					tmpui = va_arg(ap, unsigned long int);
				else
					tmpui = va_arg(ap, unsigned int);
				snprintf(buf, sizeof(buf),
					"%" LWRES_PRINT_QUADFORMAT "u",
					tmpui);
				goto printint;
			case 'x':
				if (q)
					tmpui = va_arg(ap,
						       unsigned long long int);
				else if (l)
					tmpui = va_arg(ap, unsigned long int);
				else
					tmpui = va_arg(ap, unsigned int);
				if (alt) {
					head = "0x";
					if (precision > 2U)
						precision -= 2;
				}
				snprintf(buf, sizeof(buf),
					"%" LWRES_PRINT_QUADFORMAT "x",
					tmpui);
				goto printint;
			case 'X':
				if (q)
					tmpui = va_arg(ap,
						       unsigned long long int);
				else if (l)
					tmpui = va_arg(ap, unsigned long int);
				else
					tmpui = va_arg(ap, unsigned int);
				if (alt) {
					head = "0X";
					if (precision > 2U)
						precision -= 2;
				}
				snprintf(buf, sizeof(buf),
					"%" LWRES_PRINT_QUADFORMAT "X",
					tmpui);
				goto printint;
			printint:
				if (precision != 0U || width != 0U) {
					length = strlen(buf);
					if (length < precision)
						zeropad = precision - length;
					else if (length < width && zero)
						zeropad = width - length;
					if (width != 0U) {
						pad = width - length -
						      zeropad - strlen(head);
						if (pad < 0)
							pad = 0;
					}
				}
				count += strlen(head) + strlen(buf) + pad +
					 zeropad;
				if (!left) {
					while (pad > 0 && size > 1U) {
						*str++ = ' ';
						size--;
						pad--;
					}
				}
				cp = head;
				while (*cp != '\0' && size > 1U) {
					*str++ = *cp++;
					size--;
				}
				while (zeropad > 0 && size > 1U) {
					*str++ = '0';
					size--;
					zeropad--;
				}
				cp = buf;
				while (*cp != '\0' && size > 1U) {
					*str++ = *cp++;
					size--;
				}
				while (pad > 0 && size > 1U) {
					*str++ = ' ';
					size--;
					pad--;
				}
				break;
			default:
				break;
			}
			break;
		case 's':
			cp = va_arg(ap, char *);
			REQUIRE(cp != NULL);

			if (precision != 0U) {
				/*
				 * cp need not be NULL terminated.
				 */
				const char *tp;
				unsigned long n;

				n = precision;
				tp = cp;
				while (n != 0U && *tp != '\0')
					n--, tp++;
				length = precision - n;
			} else {
				length = strlen(cp);
			}
			if (width != 0U) {
				pad = width - length;
				if (pad < 0)
					pad = 0;
			}
			count += pad + length;
			if (!left)
				while (pad > 0 && size > 1U) {
					*str++ = ' ';
					size--;
					pad--;
				}
			if (precision != 0U)
				while (precision > 0U && *cp != '\0' &&
				       size > 1U) {
					*str++ = *cp++;
					size--;
					precision--;
				}
			else
				while (*cp != '\0' && size > 1U) {
					*str++ = *cp++;
					size--;
				}
			while (pad > 0 && size > 1U) {
				*str++ = ' ';
				size--;
				pad--;
			}
			break;
		case 'c':
			c = va_arg(ap, int);
			if (width > 0U) {
				count += width;
				width--;
				if (left) {
					*str++ = c;
					size--;
				}
				while (width-- > 0U && size > 1U) {
					*str++ = ' ';
					size--;
				}
				if (!left && size > 1U) {
					*str++ = c;
					size--;
				}
			} else {
				count++;
				if (size > 1U) {
					*str++ = c;
					size--;
				}
			}
			break;
		case 'p':
			v = va_arg(ap, void *);
			snprintf(buf, sizeof(buf), "%p", v);
			length = strlen(buf);
			if (precision > length)
				zeropad = precision - length;
			if (width > 0U) {
				pad = width - length - zeropad;
				if (pad < 0)
					pad = 0;
			}
			count += length + pad + zeropad;
			if (!left)
				while (pad > 0 && size > 1U) {
					*str++ = ' ';
					size--;
					pad--;
				}
			cp = buf;
			if (zeropad > 0 && buf[0] == '0' &&
			    (buf[1] == 'x' || buf[1] == 'X')) {
				if (size > 1U) {
					*str++ = *cp++;
					size--;
				}
				if (size > 1U) {
					*str++ = *cp++;
					size--;
				}
				while (zeropad > 0 && size > 1U) {
					*str++ = '0';
					size--;
					zeropad--;
				}
			}
			while (*cp != '\0' && size > 1U) {
				*str++ = *cp++;
				size--;
			}
			while (pad > 0 && size > 1U) {
				*str++ = ' ';
				size--;
				pad--;
			}
			break;
		case 'D':	/*deprecated*/
			INSIST("use %ld instead of %D" == NULL);
		case 'O':	/*deprecated*/
			INSIST("use %lo instead of %O" == NULL);
		case 'U':	/*deprecated*/
			INSIST("use %lu instead of %U" == NULL);

		case 'L':
#ifdef HAVE_LONG_DOUBLE
			l = 1;
#else
			INSIST("long doubles are not supported" == NULL);
#endif
			/*FALLTHROUGH*/
		case 'e':
		case 'E':
		case 'f':
		case 'g':
		case 'G':
			if (!dot)
				precision = 6;
			/*
			 * IEEE floating point.
			 * MIN 2.2250738585072014E-308
			 * MAX 1.7976931348623157E+308
			 * VAX floating point has a smaller range than IEEE.
			 *
			 * precisions > 324 don't make much sense.
			 * if we cap the precision at 512 we will not
			 * overflow buf.
			 */
			if (precision > 512U)
				precision = 512;
			snprintf(fmt, sizeof(fmt),
				"%%%s%s.%lu%s%c", alt ? "#" : "",
				plus ? "+" : space ? " " : "",
				precision, l ? "L" : "", *format);
			switch (*format) {
			case 'e':
			case 'E':
			case 'f':
			case 'g':
			case 'G':
#ifdef HAVE_LONG_DOUBLE
				if (l) {
					ldbl = va_arg(ap, long double);
					snprintf(buf, sizeof(buf), fmt, ldbl);
				} else
#endif
				{
					dbl = va_arg(ap, double);
					snprintf(buf, sizeof(buf), fmt, dbl);
				}
				length = strlen(buf);
				if (width > 0U) {
					pad = width - length;
					if (pad < 0)
						pad = 0;
				}
				count += length + pad;
				if (!left)
					while (pad > 0 && size > 1U) {
						*str++ = ' ';
						size--;
						pad--;
					}
				cp = buf;
				while (*cp != ' ' && size > 1U) {
					*str++ = *cp++;
					size--;
				}
				while (pad > 0 && size > 1U) {
					*str++ = ' ';
					size--;
					pad--;
				}
				break;
			default:
				continue;
			}
			break;
		default:
			continue;
		}
		format++;
	}
	if (size > 0U)
		*str = '\0';
	return (count);
}
@


1.4
log
@resolve conflicts
@
text
@d18 1
a18 1
/* $ISC: print.c,v 1.2.4.7 2005/10/14 01:38:51 marka Exp $ */
@


1.3
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: print.c,v 1.2.4.3 2004/09/16 07:01:13 marka Exp $ */
d28 1
a28 1
#include <stdlib.h>
d33 2
a74 1
	int neg;
d114 1
a114 1
		dot = neg = space = plus = left = zero = alt = h = l = q = 0;
d246 2
a247 1
				snprintf(buf, sizeof(buf), "%llu",
d259 3
a261 1
 					alt ? "%#llo" : "%llo", tmpui);
d271 3
a273 1
				snprintf(buf, sizeof(buf), "%llu", tmpui);
d288 3
a290 1
				snprintf(buf, sizeof(buf), "%llx", tmpui);
d305 3
a307 1
				snprintf(buf, sizeof(buf), "%llX", tmpui);
@


1.2
log
@fix remaining sprintf
@
text
@d18 1
a18 1
/* $ISC: print.c,v 1.2.4.1 2004/08/28 06:25:25 marka Exp $ */
d24 1
d100 1
a100 1
			if (size > 1) {
d174 1
a174 1
			if (size > 1) {
d204 1
a204 1
			if (precision != 0)
d279 1
a279 1
					if (precision > 2)
d294 1
a294 1
					if (precision > 2)
d300 1
a300 1
				if (precision != 0 || width != 0) {
d306 1
a306 1
					if (width != 0) {
d316 1
a316 1
					while (pad > 0 && size > 1) {
d323 1
a323 1
				while (*cp != '\0' && size > 1) {
d327 1
a327 1
				while (zeropad > 0 && size > 1) {
d333 1
a333 1
				while (*cp != '\0' && size > 1) {
d337 1
a337 1
				while (pad > 0 && size > 1) {
d351 1
a351 1
			if (precision != 0) {
d360 1
a360 1
				while (n != 0 && *tp != '\0')
d366 1
a366 1
			if (width != 0) {
d373 1
a373 1
				while (pad > 0 && size > 1) {
d378 3
a380 3
			if (precision != 0)
				while (precision > 0 && *cp != '\0' &&
				       size > 1) {
d386 1
a386 1
				while (*cp != '\0' && size > 1) {
d390 1
a390 1
			while (pad > 0 && size > 1) {
d398 1
a398 1
			if (width > 0) {
d405 1
a405 1
				while (width-- > 0 && size > 1) {
d409 1
a409 1
				if (!left && size > 1) {
d415 1
a415 1
				if (size > 1) {
d427 1
a427 1
			if (width > 0) {
d434 1
a434 1
				while (pad > 0 && size > 1) {
d442 1
a442 1
				if (size > 1) {
d446 1
a446 1
				if (size > 1) {
d450 1
a450 1
				while (zeropad > 0 && size > 1) {
d456 1
a456 1
			while (*cp != '\0' && size > 1) {
d460 1
a460 1
			while (pad > 0 && size > 1) {
d497 1
a497 1
			if (precision > 512)
d520 1
a520 1
				if (width > 0) {
d527 1
a527 1
					while (pad > 0 && size > 1) {
d533 1
a533 1
				while (*cp != ' ' && size > 1) {
d537 1
a537 1
				while (pad > 0 && size > 1) {
d552 1
a552 1
	if (size > 0)
@


1.1
log
@Initial revision
@
text
@d244 1
a244 1
				sprintf(buf, "%llu",
d255 2
a256 2
				sprintf(buf,
					alt ? "%#llo" : "%llo", tmpui);
d266 1
a266 1
				sprintf(buf, "%llu", tmpui);
d281 1
a281 1
				sprintf(buf, "%llx", tmpui);
d296 1
a296 1
				sprintf(buf, "%llX", tmpui);
d422 1
a422 1
			sprintf(buf, "%p", v);
d498 2
a499 1
			sprintf(fmt, "%%%s%s.%lu%s%c", alt ? "#" : "",
d511 1
a511 1
					sprintf(buf, fmt, ldbl);
d516 1
a516 1
					sprintf(buf, fmt, dbl);
@


1.1.1.1
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@@


1.1.1.2
log
@ISC BIND release 9.3.1. ok deraadt@@
@
text
@d18 1
a18 1
/* $ISC: print.c,v 1.2.4.3 2004/09/16 07:01:13 marka Exp $ */
a23 1
#include <string.h>
d99 1
a99 1
			if (size > 1U) {
d173 1
a173 1
			if (size > 1U) {
d203 1
a203 1
			if (precision != 0U)
d278 1
a278 1
					if (precision > 2U)
d293 1
a293 1
					if (precision > 2U)
d299 1
a299 1
				if (precision != 0U || width != 0U) {
d305 1
a305 1
					if (width != 0U) {
d315 1
a315 1
					while (pad > 0 && size > 1U) {
d322 1
a322 1
				while (*cp != '\0' && size > 1U) {
d326 1
a326 1
				while (zeropad > 0 && size > 1U) {
d332 1
a332 1
				while (*cp != '\0' && size > 1U) {
d336 1
a336 1
				while (pad > 0 && size > 1U) {
d350 1
a350 1
			if (precision != 0U) {
d359 1
a359 1
				while (n != 0U && *tp != '\0')
d365 1
a365 1
			if (width != 0U) {
d372 1
a372 1
				while (pad > 0 && size > 1U) {
d377 3
a379 3
			if (precision != 0U)
				while (precision > 0U && *cp != '\0' &&
				       size > 1U) {
d385 1
a385 1
				while (*cp != '\0' && size > 1U) {
d389 1
a389 1
			while (pad > 0 && size > 1U) {
d397 1
a397 1
			if (width > 0U) {
d404 1
a404 1
				while (width-- > 0U && size > 1U) {
d408 1
a408 1
				if (!left && size > 1U) {
d414 1
a414 1
				if (size > 1U) {
d426 1
a426 1
			if (width > 0U) {
d433 1
a433 1
				while (pad > 0 && size > 1U) {
d441 1
a441 1
				if (size > 1U) {
d445 1
a445 1
				if (size > 1U) {
d449 1
a449 1
				while (zeropad > 0 && size > 1U) {
d455 1
a455 1
			while (*cp != '\0' && size > 1U) {
d459 1
a459 1
			while (pad > 0 && size > 1U) {
d496 1
a496 1
			if (precision > 512U)
d518 1
a518 1
				if (width > 0U) {
d525 1
a525 1
					while (pad > 0 && size > 1U) {
d531 1
a531 1
				while (*cp != ' ' && size > 1U) {
d535 1
a535 1
				while (pad > 0 && size > 1U) {
d550 1
a550 1
	if (size > 0U)
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: print.c,v 1.2.4.7 2005/10/14 01:38:51 marka Exp $ */
d28 1
a28 1
#include <lwres/stdlib.h>
a32 2
#define LWRES_PRINT_QUADFORMAT LWRES_PLATFORM_QUADFORMAT

d73 1
d113 1
a113 1
		dot = space = plus = left = zero = alt = h = l = q = 0;
d245 1
a245 1
				sprintf(buf, "%" LWRES_PRINT_QUADFORMAT "u",
d257 1
a257 3
					alt ? "%#" LWRES_PRINT_QUADFORMAT "o"
					    : "%" LWRES_PRINT_QUADFORMAT "o",
					tmpui);
d267 1
a267 2
				sprintf(buf, "%" LWRES_PRINT_QUADFORMAT "u",
					tmpui);
d282 1
a282 2
				sprintf(buf, "%" LWRES_PRINT_QUADFORMAT "x",
					tmpui);
d297 1
a297 2
				sprintf(buf, "%" LWRES_PRINT_QUADFORMAT "X",
					tmpui);
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d18 1
a18 1
/* $ISC: print.c,v 1.2.2.7 2005/10/14 01:28:30 marka Exp $ */
@


