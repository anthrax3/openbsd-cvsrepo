head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.36;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.53;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.53;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.09;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.35;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.29;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.57;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_resutil.html,v 1.9.18.16 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_resutil</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_string_parse, lwres_addr_parse, lwres_getaddrsbyname, lwres_getnamebyaddr &#8212; lightweight resolver utility functions</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_string_parse</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>char ** </td>
<td>
<var class="pdparam">c</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint16_t * </td>
<td>
<var class="pdparam">len</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_addr_parse</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_addr_t * </td>
<td>
<var class="pdparam">addr</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_getaddrsbyname</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">addrtypes</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_getnamebyaddr</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">addrtype</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint16_t  </td>
<td>
<var class="pdparam">addrlen</var>, </td>
</tr>
<tr>
<td> </td>
<td>const unsigned char * </td>
<td>
<var class="pdparam">addr</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbaresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543466"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_string_parse()</code>
      retrieves a DNS-encoded string starting the current pointer of
      lightweight resolver buffer <em class="parameter"><code>b</code></em>: i.e.
      <code class="constant">b-&gt;current</code>.  When the function returns,
      the address of the first byte of the encoded string is returned
      via <em class="parameter"><code>*c</code></em> and the length of that string is
      given by <em class="parameter"><code>*len</code></em>.  The buffer's current
      pointer is advanced to point at the character following the
      string length, the encoded string, and the trailing
      <span class="type">NULL</span> character.
    </p>
<p><code class="function">lwres_addr_parse()</code>
      extracts an address from the buffer <em class="parameter"><code>b</code></em>.
      The buffer's current pointer <code class="constant">b-&gt;current</code>
      is presumed to point at an encoded address: the address preceded
      by a 32-bit protocol family identifier and a 16-bit length
      field.  The encoded address is copied to
      <code class="constant">addr-&gt;address</code> and
      <code class="constant">addr-&gt;length</code> indicates the size in bytes
      of the address that was copied.
      <code class="constant">b-&gt;current</code> is advanced to point at the
      next byte of available data in the buffer following the encoded
      address.
    </p>
<p><code class="function">lwres_getaddrsbyname()</code>
      and <code class="function">lwres_getnamebyaddr()</code> use the
      <span class="type">lwres_gnbaresponse_t</span> structure defined below:
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint32_t          flags;
        lwres_uint16_t          naliases;
        lwres_uint16_t          naddrs;
        char                   *realname;
        char                  **aliases;
        lwres_uint16_t          realnamelen;
        lwres_uint16_t         *aliaslen;
        lwres_addrlist_t        addrs;
        void                   *base;
        size_t                  baselen;
} lwres_gabnresponse_t;
</pre>
<p>
      The contents of this structure are not manipulated directly but
      they are controlled through the
      <span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>
      functions.
    </p>
<p>
      The lightweight resolver uses
      <code class="function">lwres_getaddrsbyname()</code> to perform
      foward lookups.
      Hostname <em class="parameter"><code>name</code></em> is looked up using the
      resolver
      context <em class="parameter"><code>ctx</code></em> for memory allocation.
      <em class="parameter"><code>addrtypes</code></em> is a bitmask indicating
      which type of
      addresses are to be looked up.  Current values for this bitmask are
      <span class="type">LWRES_ADDRTYPE_V4</span> for IPv4 addresses and
      <span class="type">LWRES_ADDRTYPE_V6</span> for IPv6 addresses.  Results of the
      lookup are returned in <em class="parameter"><code>*structp</code></em>.
    </p>
<p><code class="function">lwres_getnamebyaddr()</code>
      performs reverse lookups.  Resolver context
      <em class="parameter"><code>ctx</code></em> is used for memory allocation.  The
      address type is indicated by <em class="parameter"><code>addrtype</code></em>:
      <span class="type">LWRES_ADDRTYPE_V4</span> or
      <span class="type">LWRES_ADDRTYPE_V6</span>.  The address to be looked up is
      given by <em class="parameter"><code>addr</code></em> and its length is
      <em class="parameter"><code>addrlen</code></em> bytes.  The result of the
      function call is made available through
      <em class="parameter"><code>*structp</code></em>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543605"></a><h2>RETURN VALUES</h2>
<p>
      Successful calls to
      <code class="function">lwres_string_parse()</code>
      and
      <code class="function">lwres_addr_parse()</code>
      return
      <span class="errorcode">LWRES_R_SUCCESS.</span>
      Both functions return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if the buffer is corrupt or
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer has less space than expected for the components of the
      encoded string or address.
    </p>
<p><code class="function">lwres_getaddrsbyname()</code>
      returns <span class="errorcode">LWRES_R_SUCCESS</span> on success and it
      returns <span class="errorcode">LWRES_R_NOTFOUND</span> if the hostname
      <em class="parameter"><code>name</code></em> could not be found.
    </p>
<p><span class="errorcode">LWRES_R_SUCCESS</span>
      is returned by a successful call to
      <code class="function">lwres_getnamebyaddr()</code>.
    </p>
<p>
      Both
      <code class="function">lwres_getaddrsbyname()</code>
      and
      <code class="function">lwres_getnamebyaddr()</code>
      return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      when memory allocation requests fail and
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffers used for sending queries and receiving replies are too
      small.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543676"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_buffer</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 2
<td> </td>
<td>, </td>
d45 3
a47 2
<td> </td>
<td>, </td>
d51 1
a51 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d53 1
a53 1
<code>)</code>;</td>
d61 3
a63 2
<td> </td>
<td>, </td>
d67 1
a67 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d69 1
a69 1
<code>)</code>;</td>
d77 3
a79 2
<td> </td>
<td>, </td>
d83 3
a85 2
<td> </td>
<td>, </td>
d89 3
a91 2
<td> </td>
<td>, </td>
d95 1
a95 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d97 1
a97 1
<code>)</code>;</td>
d105 3
a107 2
<td> </td>
<td>, </td>
d111 3
a113 2
<td> </td>
<td>, </td>
d117 3
a119 2
<td> </td>
<td>, </td>
d123 3
a125 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d129 1
a129 1
<td> </td>
d131 1
a131 1
<code>)</code>;</td>
d137 29
a165 32
<a name="id2549485"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_string_parse()</code> retrieves a DNS-encoded
string starting the current pointer of lightweight resolver buffer
<em class="parameter"><code>b</code></em>: i.e.  <code class="constant">b-&gt;current</code>.
When the function returns, the address of the first byte of the
encoded string is returned via <em class="parameter"><code>*c</code></em> and the
length of that string is given by <em class="parameter"><code>*len</code></em>.  The
buffer's current pointer is advanced to point at the character
following the string length, the encoded string, and the trailing
<span class="type">NULL</span> character.
</p>
<p>
<code class="function">lwres_addr_parse()</code> extracts an address from the
buffer <em class="parameter"><code>b</code></em>.  The buffer's current pointer
<code class="constant">b-&gt;current</code> is presumed to point at an encoded
address: the address preceded by a 32-bit protocol family identifier
and a 16-bit length field.  The encoded address is copied to
<code class="constant">addr-&gt;address</code> and
<code class="constant">addr-&gt;length</code> indicates the size in bytes of
the address that was copied.  <code class="constant">b-&gt;current</code> is
advanced to point at the next byte of available data in the buffer
following the encoded address.
</p>
<p>
<code class="function">lwres_getaddrsbyname()</code>
and
<code class="function">lwres_getnamebyaddr()</code>
use the
<span class="type">lwres_gnbaresponse_t</span>
structure defined below:
</p>
d181 30
a210 27
The contents of this structure are not manipulated directly but
they are controlled through the
<span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3
)</span>
functions.
</p>
<p>
The lightweight resolver uses
<code class="function">lwres_getaddrsbyname()</code> to perform foward lookups.
Hostname <em class="parameter"><code>name</code></em> is looked up using the resolver
context <em class="parameter"><code>ctx</code></em> for memory allocation.
<em class="parameter"><code>addrtypes</code></em> is a bitmask indicating which type of
addresses are to be looked up.  Current values for this bitmask are
<span class="type">LWRES_ADDRTYPE_V4</span> for IPv4 addresses and
<span class="type">LWRES_ADDRTYPE_V6</span> for IPv6 addresses.  Results of the
lookup are returned in <em class="parameter"><code>*structp</code></em>.
</p>
<p>
<code class="function">lwres_getnamebyaddr()</code> performs reverse lookups.
Resolver context <em class="parameter"><code>ctx</code></em> is used for memory
allocation.  The address type is indicated by
<em class="parameter"><code>addrtype</code></em>: <span class="type">LWRES_ADDRTYPE_V4</span> or
<span class="type">LWRES_ADDRTYPE_V6</span>.  The address to be looked up is given
by <em class="parameter"><code>addr</code></em> and its length is
<em class="parameter"><code>addrlen</code></em> bytes.  The result of the function call
is made available through <em class="parameter"><code>*structp</code></em>.
</p>
d213 1
a213 15
<a name="id2549693"></a><h2>RETURN VALUES</h2>
<p>
Successful calls to
<code class="function">lwres_string_parse()</code>
and
<code class="function">lwres_addr_parse()</code>
return
<span class="errorcode">LWRES_R_SUCCESS.</span>
Both functions return
<span class="errorcode">LWRES_R_FAILURE</span>
if the buffer is corrupt or
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
if the buffer has less space than expected for the components of the
encoded string or address.
</p>
d215 34
a248 26
<code class="function">lwres_getaddrsbyname()</code>
returns
<span class="errorcode">LWRES_R_SUCCESS</span>
on success and it returns
<span class="errorcode">LWRES_R_NOTFOUND</span>
if the hostname
<em class="parameter"><code>name</code></em>
could not be found.
</p>
<p>
<span class="errorcode">LWRES_R_SUCCESS</span>
is returned by a successful call to
<code class="function">lwres_getnamebyaddr()</code>.
</p>
<p>
Both
<code class="function">lwres_getaddrsbyname()</code>
and
<code class="function">lwres_getnamebyaddr()</code>
return
<span class="errorcode">LWRES_R_NOMEMORY</span>
when memory allocation requests fail and
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
if the buffers used for sending queries and receiving replies are too
small.
</p>
d251 2
a252 3
<a name="id2549763"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_buffer</span>(3)</span>,
d254 2
a255 2
<span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.9 2005/10/13 02:33:58 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d50 5
d70 5
d100 5
d135 5
d147 1
a147 1
<a name="id2525921"></a><h2>DESCRIPTION</h2>
d223 1
a223 1
<a name="id2526060"></a><h2>RETURN VALUES</h2>
d267 1
a267 1
<a name="id2526130"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 113
a129 96

<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_resutil</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_resutil</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_string_parse, lwres_addr_parse, lwres_getaddrsbyname, lwres_getnamebyaddr&nbsp;--&nbsp;lightweight resolver utility functions</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN14"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN15"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwres.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_string_parse</CODE
>(lwres_buffer_t *b, char **c, lwres_uint16_t *len);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_addr_parse</CODE
>(lwres_buffer_t *b, lwres_addr_t *addr);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_getaddrsbyname</CODE
>(lwres_context_t *ctx, const char *name, lwres_uint32_t addrtypes, lwres_gabnresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_getnamebyaddr</CODE
>(lwres_context_t *ctx, lwres_uint32_t addrtype, lwres_uint16_t addrlen, const unsigned char *addr, lwres_gnbaresponse_t **structp);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN43"
></A
><H2
>DESCRIPTION</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_string_parse()</CODE
> retrieves a DNS-encoded
d131 1
a131 7
<VAR
CLASS="PARAMETER"
>b</VAR
>: i.e.  <CODE
CLASS="CONSTANT"
>b-&gt;current</CODE
>.
d133 2
a134 8
encoded string is returned via <VAR
CLASS="PARAMETER"
>*c</VAR
> and the
length of that string is given by <VAR
CLASS="PARAMETER"
>*len</VAR
>.  The
d137 6
a142 17
<SPAN
CLASS="TYPE"
>NULL</SPAN
> character.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_addr_parse()</CODE
> extracts an address from the
buffer <VAR
CLASS="PARAMETER"
>b</VAR
>.  The buffer's current pointer
<CODE
CLASS="CONSTANT"
>b-&gt;current</CODE
> is presumed to point at an encoded
d145 3
a147 12
<CODE
CLASS="CONSTANT"
>addr-&gt;address</CODE
> and
<CODE
CLASS="CONSTANT"
>addr-&gt;length</CODE
> indicates the size in bytes of
the address that was copied.  <CODE
CLASS="CONSTANT"
>b-&gt;current</CODE
> is
d149 4
a152 6
following the encoded address.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_getaddrsbyname()</CODE
>
d154 1
a154 4
<CODE
CLASS="FUNCTION"
>lwres_getnamebyaddr()</CODE
>
d156 1
a156 4
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
d158 3
a160 3
<PRE
CLASS="PROGRAMLISTING"
>typedef struct {
d171 3
a173 2
} lwres_gabnresponse_t;</PRE
>
d176 10
a185 26
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_gabn</SPAN
>(3)</SPAN
>
functions.</P
><P
>The lightweight resolver uses
<CODE
CLASS="FUNCTION"
>lwres_getaddrsbyname()</CODE
> to perform foward lookups.
Hostname <VAR
CLASS="PARAMETER"
>name</VAR
> is looked up using the resolver
context <VAR
CLASS="PARAMETER"
>ctx</VAR
> for memory allocation.
<VAR
CLASS="PARAMETER"
>addrtypes</VAR
> is a bitmask indicating which type of
d187 7
a193 21
<SPAN
CLASS="TYPE"
>LWRES_ADDRTYPE_V4</SPAN
> for IPv4 addresses and
<SPAN
CLASS="TYPE"
>LWRES_ADDRTYPE_V6</SPAN
> for IPv6 addresses.  Results of the
lookup are returned in <VAR
CLASS="PARAMETER"
>*structp</VAR
>.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_getnamebyaddr()</CODE
> performs reverse lookups.
Resolver context <VAR
CLASS="PARAMETER"
>ctx</VAR
> is used for memory
d195 12
a206 37
<VAR
CLASS="PARAMETER"
>addrtype</VAR
>: <SPAN
CLASS="TYPE"
>LWRES_ADDRTYPE_V4</SPAN
> or
<SPAN
CLASS="TYPE"
>LWRES_ADDRTYPE_V6</SPAN
>.  The address to be looked up is given
by <VAR
CLASS="PARAMETER"
>addr</VAR
> and its length is
<VAR
CLASS="PARAMETER"
>addrlen</VAR
> bytes.  The result of the function call
is made available through <VAR
CLASS="PARAMETER"
>*structp</VAR
>.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN84"
></A
><H2
>RETURN VALUES</H2
><P
>Successful calls to
<CODE
CLASS="FUNCTION"
>lwres_string_parse()</CODE
>
d208 1
a208 4
<CODE
CLASS="FUNCTION"
>lwres_addr_parse()</CODE
>
d210 1
a210 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS.</SPAN
>
d212 1
a212 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_FAILURE</SPAN
>
d214 1
a214 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d216 4
a219 6
encoded string or address.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_getaddrsbyname()</CODE
>
d221 1
a221 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d223 1
a223 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOTFOUND</SPAN
>
d225 5
a229 10
<VAR
CLASS="PARAMETER"
>name</VAR
>
could not be found.</P
><P
><SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d231 5
a235 10
<CODE
CLASS="FUNCTION"
>lwres_getnamebyaddr()</CODE
>.</P
><P
>Both
<CODE
CLASS="FUNCTION"
>lwres_getaddrsbyname()</CODE
>
d237 1
a237 4
<CODE
CLASS="FUNCTION"
>lwres_getnamebyaddr()</CODE
>
d239 1
a239 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOMEMORY</SPAN
>
d241 1
a241 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d243 7
a249 17
small.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN105"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_buffer</SPAN
>(3)</SPAN
>,
d251 5
a255 11
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_gabn</SPAN
>(3)</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_resutil</A
></H1
d57 2
a61 2
><P
></P
d109 1
a109 1
><TT
d111 1
a111 1
>lwres_string_parse()</TT
d114 1
a114 1
<TT
d116 2
a117 4
><I
>b</I
></TT
>: i.e.  <TT
d119 1
a119 1
>b-&gt;current</TT
d122 1
a122 1
encoded string is returned via <TT
d124 1
a124 3
><I
>*c</I
></TT
d126 1
a126 1
length of that string is given by <TT
d128 1
a128 3
><I
>*len</I
></TT
d137 1
a137 1
><TT
d139 1
a139 1
>lwres_addr_parse()</TT
d141 1
a141 1
buffer <TT
d143 1
a143 3
><I
>b</I
></TT
d145 1
a145 1
<TT
d147 1
a147 1
>b-&gt;current</TT
d151 1
a151 1
<TT
d153 1
a153 1
>addr-&gt;address</TT
d155 1
a155 1
<TT
d157 1
a157 1
>addr-&gt;length</TT
d159 1
a159 1
the address that was copied.  <TT
d161 1
a161 1
>b-&gt;current</TT
d166 1
a166 1
><TT
d168 1
a168 1
>lwres_getaddrsbyname()</TT
d171 1
a171 1
<TT
d173 1
a173 1
>lwres_getnamebyaddr()</TT
d208 1
a208 1
<TT
d210 1
a210 1
>lwres_getaddrsbyname()</TT
d212 1
a212 1
Hostname <TT
d214 1
a214 3
><I
>name</I
></TT
d216 1
a216 1
context <TT
d218 1
a218 3
><I
>ctx</I
></TT
d220 1
a220 1
<TT
d222 1
a222 3
><I
>addrtypes</I
></TT
d233 1
a233 1
lookup are returned in <TT
d235 1
a235 3
><I
>*structp</I
></TT
d238 1
a238 1
><TT
d240 1
a240 1
>lwres_getnamebyaddr()</TT
d242 1
a242 1
Resolver context <TT
d244 1
a244 3
><I
>ctx</I
></TT
d247 1
a247 1
<TT
d249 1
a249 3
><I
>addrtype</I
></TT
d258 1
a258 1
by <TT
d260 1
a260 3
><I
>addr</I
></TT
d262 1
a262 1
<TT
d264 1
a264 3
><I
>addrlen</I
></TT
d266 1
a266 1
is made available through <TT
d268 1
a268 3
><I
>*structp</I
></TT
d280 1
a280 1
<TT
d282 1
a282 1
>lwres_string_parse()</TT
d285 1
a285 1
<TT
d287 1
a287 1
>lwres_addr_parse()</TT
d307 1
a307 1
><TT
d309 1
a309 1
>lwres_getaddrsbyname()</TT
d322 1
a322 1
<TT
d324 1
a324 3
><I
>name</I
></TT
d333 1
a333 1
<TT
d335 1
a335 1
>lwres_getnamebyaddr()</TT
d339 1
a339 1
<TT
d341 1
a341 1
>lwres_getaddrsbyname()</TT
d344 1
a344 1
<TT
d346 1
a346 1
>lwres_getnamebyaddr()</TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d412 1
a412 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_resutil</H1
a53 2
><P
></P
d57 2
d106 1
a106 1
><CODE
d108 1
a108 1
>lwres_string_parse()</CODE
d111 1
a111 1
<VAR
d113 4
a116 2
>b</VAR
>: i.e.  <CODE
d118 1
a118 1
>b-&gt;current</CODE
d121 1
a121 1
encoded string is returned via <VAR
d123 3
a125 1
>*c</VAR
d127 1
a127 1
length of that string is given by <VAR
d129 3
a131 1
>*len</VAR
d140 1
a140 1
><CODE
d142 1
a142 1
>lwres_addr_parse()</CODE
d144 1
a144 1
buffer <VAR
d146 3
a148 1
>b</VAR
d150 1
a150 1
<CODE
d152 1
a152 1
>b-&gt;current</CODE
d156 1
a156 1
<CODE
d158 1
a158 1
>addr-&gt;address</CODE
d160 1
a160 1
<CODE
d162 1
a162 1
>addr-&gt;length</CODE
d164 1
a164 1
the address that was copied.  <CODE
d166 1
a166 1
>b-&gt;current</CODE
d171 1
a171 1
><CODE
d173 1
a173 1
>lwres_getaddrsbyname()</CODE
d176 1
a176 1
<CODE
d178 1
a178 1
>lwres_getnamebyaddr()</CODE
d213 1
a213 1
<CODE
d215 1
a215 1
>lwres_getaddrsbyname()</CODE
d217 1
a217 1
Hostname <VAR
d219 3
a221 1
>name</VAR
d223 1
a223 1
context <VAR
d225 3
a227 1
>ctx</VAR
d229 1
a229 1
<VAR
d231 3
a233 1
>addrtypes</VAR
d244 1
a244 1
lookup are returned in <VAR
d246 3
a248 1
>*structp</VAR
d251 1
a251 1
><CODE
d253 1
a253 1
>lwres_getnamebyaddr()</CODE
d255 1
a255 1
Resolver context <VAR
d257 3
a259 1
>ctx</VAR
d262 1
a262 1
<VAR
d264 3
a266 1
>addrtype</VAR
d275 1
a275 1
by <VAR
d277 3
a279 1
>addr</VAR
d281 1
a281 1
<VAR
d283 3
a285 1
>addrlen</VAR
d287 1
a287 1
is made available through <VAR
d289 3
a291 1
>*structp</VAR
d303 1
a303 1
<CODE
d305 1
a305 1
>lwres_string_parse()</CODE
d308 1
a308 1
<CODE
d310 1
a310 1
>lwres_addr_parse()</CODE
d330 1
a330 1
><CODE
d332 1
a332 1
>lwres_getaddrsbyname()</CODE
d345 1
a345 1
<VAR
d347 3
a349 1
>name</VAR
d358 1
a358 1
<CODE
d360 1
a360 1
>lwres_getnamebyaddr()</CODE
d364 1
a364 1
<CODE
d366 1
a366 1
>lwres_getaddrsbyname()</CODE
d369 1
a369 1
<CODE
d371 1
a371 1
>lwres_getnamebyaddr()</CODE
d412 1
a412 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 96
a112 113
<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.9 2005/10/13 02:33:58 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_resutil</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_string_parse, lwres_addr_parse, lwres_getaddrsbyname, lwres_getnamebyaddr &#8212; lightweight resolver utility functions</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_string_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_addr_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_getaddrsbyname</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_getnamebyaddr</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525921"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_string_parse()</code> retrieves a DNS-encoded
d114 7
a120 1
<em class="parameter"><code>b</code></em>: i.e.  <code class="constant">b-&gt;current</code>.
d122 8
a129 2
encoded string is returned via <em class="parameter"><code>*c</code></em> and the
length of that string is given by <em class="parameter"><code>*len</code></em>.  The
d132 17
a148 6
<span class="type">NULL</span> character.
</p>
<p>
<code class="function">lwres_addr_parse()</code> extracts an address from the
buffer <em class="parameter"><code>b</code></em>.  The buffer's current pointer
<code class="constant">b-&gt;current</code> is presumed to point at an encoded
d151 12
a162 3
<code class="constant">addr-&gt;address</code> and
<code class="constant">addr-&gt;length</code> indicates the size in bytes of
the address that was copied.  <code class="constant">b-&gt;current</code> is
d164 6
a169 4
following the encoded address.
</p>
<p>
<code class="function">lwres_getaddrsbyname()</code>
d171 4
a174 1
<code class="function">lwres_getnamebyaddr()</code>
d176 4
a179 1
<span class="type">lwres_gnbaresponse_t</span>
d181 3
a183 3
</p>
<pre class="programlisting">
typedef struct {
d194 2
a195 3
} lwres_gabnresponse_t;
</pre>
<p>
d198 26
a223 10
<span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3
)</span>
functions.
</p>
<p>
The lightweight resolver uses
<code class="function">lwres_getaddrsbyname()</code> to perform foward lookups.
Hostname <em class="parameter"><code>name</code></em> is looked up using the resolver
context <em class="parameter"><code>ctx</code></em> for memory allocation.
<em class="parameter"><code>addrtypes</code></em> is a bitmask indicating which type of
d225 21
a245 7
<span class="type">LWRES_ADDRTYPE_V4</span> for IPv4 addresses and
<span class="type">LWRES_ADDRTYPE_V6</span> for IPv6 addresses.  Results of the
lookup are returned in <em class="parameter"><code>*structp</code></em>.
</p>
<p>
<code class="function">lwres_getnamebyaddr()</code> performs reverse lookups.
Resolver context <em class="parameter"><code>ctx</code></em> is used for memory
d247 37
a283 12
<em class="parameter"><code>addrtype</code></em>: <span class="type">LWRES_ADDRTYPE_V4</span> or
<span class="type">LWRES_ADDRTYPE_V6</span>.  The address to be looked up is given
by <em class="parameter"><code>addr</code></em> and its length is
<em class="parameter"><code>addrlen</code></em> bytes.  The result of the function call
is made available through <em class="parameter"><code>*structp</code></em>.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526060"></a><h2>RETURN VALUES</h2>
<p>
Successful calls to
<code class="function">lwres_string_parse()</code>
d285 4
a288 1
<code class="function">lwres_addr_parse()</code>
d290 4
a293 1
<span class="errorcode">LWRES_R_SUCCESS.</span>
d295 4
a298 1
<span class="errorcode">LWRES_R_FAILURE</span>
d300 4
a303 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d305 6
a310 4
encoded string or address.
</p>
<p>
<code class="function">lwres_getaddrsbyname()</code>
d312 4
a315 1
<span class="errorcode">LWRES_R_SUCCESS</span>
d317 4
a320 1
<span class="errorcode">LWRES_R_NOTFOUND</span>
d322 10
a331 5
<em class="parameter"><code>name</code></em>
could not be found.
</p>
<p>
<span class="errorcode">LWRES_R_SUCCESS</span>
d333 10
a342 5
<code class="function">lwres_getnamebyaddr()</code>.
</p>
<p>
Both
<code class="function">lwres_getaddrsbyname()</code>
d344 4
a347 1
<code class="function">lwres_getnamebyaddr()</code>
d349 4
a352 1
<span class="errorcode">LWRES_R_NOMEMORY</span>
d354 4
a357 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d359 17
a375 7
small.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526130"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_buffer</span>(3)</span>,
d377 11
a387 5
<span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_resutil.html,v 1.8.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a49 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a64 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a89 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a119 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d127 1
a127 1
<a name="id2549485"></a><h2>DESCRIPTION</h2>
d203 1
a203 1
<a name="id2549693"></a><h2>RETURN VALUES</h2>
d247 1
a247 1
<a name="id2549763"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_resutil.html,v 1.9.18.16 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d49 2
a50 3
<td>char ** </td>
<td>
<var class="pdparam">c</var>, </td>
d54 1
a54 1
<td>lwres_uint16_t * </td>
d56 1
a56 1
<var class="pdparam">len</var><code>)</code>;</td>
d64 7
a70 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d74 1
a74 1
<td>lwres_addr_t * </td>
d76 1
a76 1
<var class="pdparam">addr</var><code>)</code>;</td>
d84 7
a90 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d94 2
a95 3
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
d99 2
a100 3
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">addrtypes</var>, </td>
d104 1
a104 1
<td>lwres_gabnresponse_t ** </td>
d106 1
a106 1
<var class="pdparam">structp</var><code>)</code>;</td>
d114 7
a120 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d124 2
a125 3
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">addrtype</var>, </td>
d129 2
a130 3
<td>lwres_uint16_t  </td>
<td>
<var class="pdparam">addrlen</var>, </td>
d134 2
a135 3
<td>const unsigned char * </td>
<td>
<var class="pdparam">addr</var>, </td>
d139 1
a139 1
<td>lwres_gnbaresponse_t ** </td>
d141 1
a141 1
<var class="pdparam">structp</var><code>)</code>;</td>
d147 32
a178 29
<a name="id2543466"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_string_parse()</code>
      retrieves a DNS-encoded string starting the current pointer of
      lightweight resolver buffer <em class="parameter"><code>b</code></em>: i.e.
      <code class="constant">b-&gt;current</code>.  When the function returns,
      the address of the first byte of the encoded string is returned
      via <em class="parameter"><code>*c</code></em> and the length of that string is
      given by <em class="parameter"><code>*len</code></em>.  The buffer's current
      pointer is advanced to point at the character following the
      string length, the encoded string, and the trailing
      <span class="type">NULL</span> character.
    </p>
<p><code class="function">lwres_addr_parse()</code>
      extracts an address from the buffer <em class="parameter"><code>b</code></em>.
      The buffer's current pointer <code class="constant">b-&gt;current</code>
      is presumed to point at an encoded address: the address preceded
      by a 32-bit protocol family identifier and a 16-bit length
      field.  The encoded address is copied to
      <code class="constant">addr-&gt;address</code> and
      <code class="constant">addr-&gt;length</code> indicates the size in bytes
      of the address that was copied.
      <code class="constant">b-&gt;current</code> is advanced to point at the
      next byte of available data in the buffer following the encoded
      address.
    </p>
<p><code class="function">lwres_getaddrsbyname()</code>
      and <code class="function">lwres_getnamebyaddr()</code> use the
      <span class="type">lwres_gnbaresponse_t</span> structure defined below:
    </p>
d194 27
a220 30
      The contents of this structure are not manipulated directly but
      they are controlled through the
      <span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>
      functions.
    </p>
<p>
      The lightweight resolver uses
      <code class="function">lwres_getaddrsbyname()</code> to perform
      foward lookups.
      Hostname <em class="parameter"><code>name</code></em> is looked up using the
      resolver
      context <em class="parameter"><code>ctx</code></em> for memory allocation.
      <em class="parameter"><code>addrtypes</code></em> is a bitmask indicating
      which type of
      addresses are to be looked up.  Current values for this bitmask are
      <span class="type">LWRES_ADDRTYPE_V4</span> for IPv4 addresses and
      <span class="type">LWRES_ADDRTYPE_V6</span> for IPv6 addresses.  Results of the
      lookup are returned in <em class="parameter"><code>*structp</code></em>.
    </p>
<p><code class="function">lwres_getnamebyaddr()</code>
      performs reverse lookups.  Resolver context
      <em class="parameter"><code>ctx</code></em> is used for memory allocation.  The
      address type is indicated by <em class="parameter"><code>addrtype</code></em>:
      <span class="type">LWRES_ADDRTYPE_V4</span> or
      <span class="type">LWRES_ADDRTYPE_V6</span>.  The address to be looked up is
      given by <em class="parameter"><code>addr</code></em> and its length is
      <em class="parameter"><code>addrlen</code></em> bytes.  The result of the
      function call is made available through
      <em class="parameter"><code>*structp</code></em>.
    </p>
d223 15
a237 1
<a name="id2543605"></a><h2>RETURN VALUES</h2>
d239 26
a264 34
      Successful calls to
      <code class="function">lwres_string_parse()</code>
      and
      <code class="function">lwres_addr_parse()</code>
      return
      <span class="errorcode">LWRES_R_SUCCESS.</span>
      Both functions return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if the buffer is corrupt or
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer has less space than expected for the components of the
      encoded string or address.
    </p>
<p><code class="function">lwres_getaddrsbyname()</code>
      returns <span class="errorcode">LWRES_R_SUCCESS</span> on success and it
      returns <span class="errorcode">LWRES_R_NOTFOUND</span> if the hostname
      <em class="parameter"><code>name</code></em> could not be found.
    </p>
<p><span class="errorcode">LWRES_R_SUCCESS</span>
      is returned by a successful call to
      <code class="function">lwres_getnamebyaddr()</code>.
    </p>
<p>
      Both
      <code class="function">lwres_getaddrsbyname()</code>
      and
      <code class="function">lwres_getnamebyaddr()</code>
      return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      when memory allocation requests fail and
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffers used for sending queries and receiving replies are too
      small.
    </p>
d267 3
a269 2
<a name="id2543676"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_buffer</span>(3)</span>,
d271 2
a272 2
      <span class="citerefentry"><span class="refentrytitle">lwres_gabn</span>(3)</span>.
    </p>
@


