head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.4.0.38
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.07;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.34;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.55;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--
 - Copyright (C) 2001  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_gnba.docbook,v 1.4 2001/04/24 18:11:16 gson Exp $ -->

<refentry>

<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
<refentrytitle>lwres_gnba</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lwres_gnbarequest_render</refname>
<refname>lwres_gnbaresponse_render</refname>
<refname>lwres_gnbarequest_parse</refname>
<refname>lwres_gnbaresponse_parse</refname>
<refname>lwres_gnbaresponse_free</refname>
<refname>lwres_gnbarequest_free</refname>
<refpurpose>lightweight resolver getnamebyaddress message handling</refpurpose>
</refnamediv>

<refsynopsisdiv>

<funcsynopsis>
<funcsynopsisinfo>
#include &lt;lwres/lwres.h&gt;
</funcsynopsisinfo>

<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_gnbarequest_render</function>
</funcdef>
<paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
<paramdef>lwres_gnbarequest_t *<parameter>req</parameter></paramdef>
<paramdef>lwres_lwpacket_t *<parameter>pkt</parameter></paramdef>
<paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
</funcprototype>

<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_gnbaresponse_render</function>
</funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_gnbaresponse_t *req</paramdef>
<paramdef>lwres_lwpacket_t *pkt</paramdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_gnbarequest_parse</function></funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_lwpacket_t *pkt</paramdef>
<paramdef>lwres_gnbarequest_t **structp</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_gnbaresponse_parse</function></funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_lwpacket_t *pkt</paramdef>
<paramdef>lwres_gnbaresponse_t **structp</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_gnbaresponse_free</function>
</funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_gnbaresponse_t **structp</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_gnbarequest_free</function></funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_gnbarequest_t **structp</paramdef>
</funcprototype>
</funcsynopsis>

</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>
<para>
These are low-level routines for creating and parsing
lightweight resolver address-to-name lookup request and 
response messages.
</para>
<para>
There are four main functions for the getnamebyaddr opcode.
One render function converts a getnamebyaddr request structure &mdash;
<type>lwres_gnbarequest_t</type> &mdash;
to the lightweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a getnamebyaddr request structure.
Another render function converts the getnamebyaddr response structure &mdash;
<type>lwres_gnbaresponse_t</type>
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a getnamebyaddr response structure.
</para>
<para>
These structures are defined in
<filename>lwres/lwres.h</filename>.
They are shown below.
<programlisting>
#define LWRES_OPCODE_GETNAMEBYADDR      0x00010002U

typedef struct {
        lwres_uint32_t  flags;
        lwres_addr_t    addr;
} lwres_gnbarequest_t;

typedef struct {
        lwres_uint32_t  flags;
        lwres_uint16_t  naliases;
        char           *realname;
        char          **aliases;
        lwres_uint16_t  realnamelen;
        lwres_uint16_t *aliaslen;
        void           *base;
        size_t          baselen;
} lwres_gnbaresponse_t;
</programlisting>
</para>
<para>
<function>lwres_gnbarequest_render()</function>
uses resolver context
<varname>ctx</varname>
to convert getnamebyaddr request structure
<varname>req</varname>
to canonical format.
The packet header structure
<varname>pkt</varname>
is initialised and transferred to
buffer
<varname>b</varname>.
The contents of
<varname>*req</varname>
are then appended to the buffer in canonical format.
<function>lwres_gnbaresponse_render()</function>
performs the same task, except it converts a getnamebyaddr response structure
<type>lwres_gnbaresponse_t</type>
to the lightweight resolver's canonical format.
</para>
<para>
<function>lwres_gnbarequest_parse()</function>
uses context
<varname>ctx</varname>
to convert the contents of packet
<varname>pkt</varname>
to a
<type>lwres_gnbarequest_t</type>
structure.
Buffer
<varname>b</varname>
provides space to be used for storing this structure.
When the function succeeds, the resulting
<type>lwres_gnbarequest_t</type>
is made available through
<varname>*structp</varname>.
<function>lwres_gnbaresponse_parse()</function>
offers the same semantics as
<function>lwres_gnbarequest_parse()</function>
except it yields a
<type>lwres_gnbaresponse_t</type>
structure.
</para>
<para>
<function>lwres_gnbaresponse_free()</function>
and
<function>lwres_gnbarequest_free()</function>
release the memory in resolver context
<varname>ctx</varname>
that was allocated to the
<type>lwres_gnbaresponse_t</type>
or
<type>lwres_gnbarequest_t</type>
structures referenced via
<varname>structp</varname>.
Any memory associated with ancillary buffers and strings for those
structures is also discarded.
</para>
</refsect1>
<refsect1>
<title>RETURN VALUES</title>
<para>
The getnamebyaddr opcode functions
<function>lwres_gnbarequest_render()</function>,
<function>lwres_gnbaresponse_render()</function>
<function>lwres_gnbarequest_parse()</function>
and
<function>lwres_gnbaresponse_parse()</function>
all return
<errorcode>LWRES_R_SUCCESS</errorcode>
on success.
They return
<errorcode>LWRES_R_NOMEMORY</errorcode>
if memory allocation fails.
<errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
is returned if the available space in the buffer
<varname>b</varname>
is too small to accommodate the packet header or the
<type>lwres_gnbarequest_t</type>
and
<type>lwres_gnbaresponse_t</type>
structures.
<function>lwres_gnbarequest_parse()</function>
and
<function>lwres_gnbaresponse_parse()</function>
will return
<errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
if the buffer is not empty after decoding the received packet.
These functions will return
<errorcode>LWRES_R_FAILURE</errorcode>
if
<structfield>pktflags</structfield>
in the packet header structure
<type>lwres_lwpacket_t</type>
indicate that the packet is not a response to an earlier query.
</para>
</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>lwres_packet</refentrytitle>
<manvolnum>3</manvolnum>
</citerefentry>.
</para>
</refsect1>
</refentry>
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a2 1
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_gnba.docbook,v 1.4.206.1 2004/03/06 08:15:40 marka Exp $ -->
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_gnba.docbook,v 1.4.206.3 2005/05/12 21:36:15 sra Exp $ -->
a31 13

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_gnba.docbook,v 1.5.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d25 9
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_gnba</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d48 9
a56 9
  <refnamediv>
    <refname>lwres_gnbarequest_render</refname>
    <refname>lwres_gnbaresponse_render</refname>
    <refname>lwres_gnbarequest_parse</refname>
    <refname>lwres_gnbaresponse_parse</refname>
    <refname>lwres_gnbaresponse_free</refname>
    <refname>lwres_gnbarequest_free</refname>
    <refpurpose>lightweight resolver getnamebyaddress message handling</refpurpose>
  </refnamediv>
d58 1
a58 1
  <refsynopsisdiv>
d60 1
a60 1
    <funcsynopsis>
d66 1
a66 1
        <funcdef>
d70 5
a74 5
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_gnbarequest_t *<parameter>req</parameter></paramdef>
        <paramdef>lwres_lwpacket_t *<parameter>pkt</parameter></paramdef>
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d77 1
a77 1
        <funcdef>
d81 5
a85 5
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_gnbaresponse_t *<parameter>req</parameter></paramdef>
        <paramdef>lwres_lwpacket_t *<parameter>pkt</parameter></paramdef>
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d87 1
a87 1
        <funcdef>
d90 5
a94 5
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_lwpacket_t *<parameter>pkt</parameter></paramdef>
        <paramdef>lwres_gnbarequest_t **<parameter>structp</parameter></paramdef>
        </funcprototype>
d96 1
a96 1
        <funcdef>
d99 5
a103 5
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_lwpacket_t *<parameter>pkt</parameter></paramdef>
        <paramdef>lwres_gnbaresponse_t **<parameter>structp</parameter></paramdef>
        </funcprototype>
d106 1
a106 1
        <funcdef>
d110 3
a112 3
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_gnbaresponse_t **<parameter>structp</parameter></paramdef>
        </funcprototype>
d114 1
a114 1
        <funcdef>
d117 3
a119 3
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_gnbarequest_t **<parameter>structp</parameter></paramdef>
      </funcprototype>
d122 1
a122 1
  </refsynopsisdiv>
d124 25
a148 27
  <refsect1>
    <title>DESCRIPTION</title>
    <para>
      These are low-level routines for creating and parsing
      lightweight resolver address-to-name lookup request and
      response messages.
    </para>
    <para>
      There are four main functions for the getnamebyaddr opcode.
      One render function converts a getnamebyaddr request structure &mdash;
      <type>lwres_gnbarequest_t</type> &mdash;
      to the lightweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a getnamebyaddr request structure.
      Another render function converts the getnamebyaddr response structure
      &mdash;
      <type>lwres_gnbaresponse_t</type>
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a getnamebyaddr response structure.
    </para>
    <para>
      These structures are defined in
      <filename>lwres/lwres.h</filename>.
      They are shown below.
    </para>
    <para><programlisting>
d150 1
a150 3
</programlisting>
    </para>
    <para><programlisting>
d155 1
a155 3
</programlisting>
    </para>
    <para><programlisting>
d167 108
a274 89
    </para>

    <para><function>lwres_gnbarequest_render()</function>
      uses resolver context <varname>ctx</varname> to convert
      getnamebyaddr request structure <varname>req</varname> to
      canonical format.  The packet header structure
      <varname>pkt</varname> is initialised and transferred to buffer
      <varname>b</varname>.  The contents of <varname>*req</varname>
      are then appended to the buffer in canonical format.
      <function>lwres_gnbaresponse_render()</function> performs the
      same task, except it converts a getnamebyaddr response structure
      <type>lwres_gnbaresponse_t</type> to the lightweight resolver's
      canonical format.
    </para>

    <para><function>lwres_gnbarequest_parse()</function>
      uses context <varname>ctx</varname> to convert the contents of
      packet <varname>pkt</varname> to a
      <type>lwres_gnbarequest_t</type> structure.  Buffer
      <varname>b</varname> provides space to be used for storing this
      structure.  When the function succeeds, the resulting
      <type>lwres_gnbarequest_t</type> is made available through
      <varname>*structp</varname>.
      <function>lwres_gnbaresponse_parse()</function> offers the same
      semantics as <function>lwres_gnbarequest_parse()</function>
      except it yields a <type>lwres_gnbaresponse_t</type> structure.
    </para>

    <para><function>lwres_gnbaresponse_free()</function>
      and <function>lwres_gnbarequest_free()</function> release the
      memory in resolver context <varname>ctx</varname> that was
      allocated to the <type>lwres_gnbaresponse_t</type> or
      <type>lwres_gnbarequest_t</type> structures referenced via
      <varname>structp</varname>.  Any memory associated with
      ancillary buffers and strings for those structures is also
      discarded.
    </para>
  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>
    <para>
      The getnamebyaddr opcode functions
      <function>lwres_gnbarequest_render()</function>,
      <function>lwres_gnbaresponse_render()</function>
      <function>lwres_gnbarequest_parse()</function>
      and
      <function>lwres_gnbaresponse_parse()</function>
      all return
      <errorcode>LWRES_R_SUCCESS</errorcode>
      on success.
      They return
      <errorcode>LWRES_R_NOMEMORY</errorcode>
      if memory allocation fails.
      <errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
      is returned if the available space in the buffer
      <varname>b</varname>
      is too small to accommodate the packet header or the
      <type>lwres_gnbarequest_t</type>
      and
      <type>lwres_gnbaresponse_t</type>
      structures.
      <function>lwres_gnbarequest_parse()</function>
      and
      <function>lwres_gnbaresponse_parse()</function>
      will return
      <errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <errorcode>LWRES_R_FAILURE</errorcode>
      if
      <structfield>pktflags</structfield>
      in the packet header structure
      <type>lwres_lwpacket_t</type>
      indicate that the packet is not a response to an earlier query.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>lwres_packet</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


