head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.07;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.33;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.27;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.34.00;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_getipnode.html,v 1.9.18.16 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_getipnode</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_getipnodebyname, lwres_getipnodebyaddr, lwres_freehostent &#8212; lightweight resolver nodename / address translation API</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_getipnodebyname</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">af</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">flags</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">error_num</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_getipnodebyaddr</b>(</code></td>
<td>const void * </td>
<td>
<var class="pdparam">src</var>, </td>
</tr>
<tr>
<td> </td>
<td>size_t  </td>
<td>
<var class="pdparam">len</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">af</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">error_num</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_freehostent</b>(</code></td>
<td>struct hostent * </td>
<td>
<var class="pdparam">he</var><code>)</code>;</td>
</tr></table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543431"></a><h2>DESCRIPTION</h2>
<p>
      These functions perform thread safe, protocol independent
      nodename-to-address and address-to-nodename
      translation as defined in RFC2553.
    </p>
<p>
      They use a
      <span class="type">struct hostent</span>
      which is defined in
      <code class="filename">namedb.h</code>:
    </p>
<pre class="programlisting">
struct  hostent {
        char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
};
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</pre>
<p>
    </p>
<p>
      The members of this structure are:
      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">h_name</code></span></dt>
<dd><p>
              The official (canonical) name of the host.
            </p></dd>
<dt><span class="term"><code class="constant">h_aliases</code></span></dt>
<dd><p>
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </p></dd>
<dt><span class="term"><code class="constant">h_addrtype</code></span></dt>
<dd><p>
              The type of address being returned - usually
              <span class="type">PF_INET</span>
              or
              <span class="type">PF_INET6</span>.

            </p></dd>
<dt><span class="term"><code class="constant">h_length</code></span></dt>
<dd><p>
              The length of the address in bytes.
            </p></dd>
<dt><span class="term"><code class="constant">h_addr_list</code></span></dt>
<dd><p>
              A
              <span class="type">NULL</span>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </p></dd>
</dl></div>
<p>
    </p>
<p><code class="function">lwres_getipnodebyname()</code>
      looks up addresses of protocol family <em class="parameter"><code>af</code></em>
      for the hostname <em class="parameter"><code>name</code></em>.  The
      <em class="parameter"><code>flags</code></em> parameter contains ORed flag bits
      to specify the types of addresses that are searched for, and the
      types of addresses that are returned.  The flag bits are:

      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">AI_V4MAPPED</code></span></dt>
<dd><p>
              This is used with an
              <em class="parameter"><code>af</code></em>
              of AF_INET6, and causes IPv4 addresses to be returned as
              IPv4-mapped
              IPv6 addresses.
            </p></dd>
<dt><span class="term"><code class="constant">AI_ALL</code></span></dt>
<dd><p>
              This is used with an
              <em class="parameter"><code>af</code></em>
              of AF_INET6, and causes all known addresses (IPv6 and IPv4) to
              be returned.
              If AI_V4MAPPED is also set, the IPv4 addresses are return as
              mapped
              IPv6 addresses.
            </p></dd>
<dt><span class="term"><code class="constant">AI_ADDRCONFIG</code></span></dt>
<dd><p>
              Only return an IPv6 or IPv4 address if here is an active network
              interface of that type.  This is not currently implemented
              in the BIND 9 lightweight resolver, and the flag is ignored.
            </p></dd>
<dt><span class="term"><code class="constant">AI_DEFAULT</code></span></dt>
<dd><p>
              This default sets the
              <code class="constant">AI_V4MAPPED</code>
              and
              <code class="constant">AI_ADDRCONFIG</code>
              flag bits.
            </p></dd>
</dl></div>
<p>
    </p>
<p><code class="function">lwres_getipnodebyaddr()</code>
      performs a reverse lookup of address <em class="parameter"><code>src</code></em>
      which is <em class="parameter"><code>len</code></em> bytes long.
      <em class="parameter"><code>af</code></em> denotes the protocol family, typically
      <span class="type">PF_INET</span> or <span class="type">PF_INET6</span>.
    </p>
<p><code class="function">lwres_freehostent()</code>
      releases all the memory associated with the <span class="type">struct
      hostent</span> pointer <em class="parameter"><code>he</code></em>.  Any memory
      allocated for the <code class="constant">h_name</code>,
      <code class="constant">h_addr_list</code> and
      <code class="constant">h_aliases</code> is freed, as is the memory for
      the <span class="type">hostent</span> structure itself.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543689"></a><h2>RETURN VALUES</h2>
<p>
      If an error occurs,
      <code class="function">lwres_getipnodebyname()</code>
      and
      <code class="function">lwres_getipnodebyaddr()</code>
      set
      <em class="parameter"><code>*error_num</code></em>
      to an appropriate error code and the function returns a
      <span class="type">NULL</span>
      pointer.
      The error codes and their meanings are defined in
      <code class="filename">&lt;lwres/netdb.h&gt;</code>:
      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">HOST_NOT_FOUND</code></span></dt>
<dd><p>
              No such host is known.
            </p></dd>
<dt><span class="term"><code class="constant">NO_ADDRESS</code></span></dt>
<dd><p>
              The server recognised the request and the name but no address is
              available.  Another type of request to the name server for the
              domain might return an answer.
            </p></dd>
<dt><span class="term"><code class="constant">TRY_AGAIN</code></span></dt>
<dd><p>
              A temporary and possibly transient error occurred, such as a
              failure of a server to respond.  The request may succeed if
              retried.
            </p></dd>
<dt><span class="term"><code class="constant">NO_RECOVERY</code></span></dt>
<dd><p>
              An unexpected failure occurred, and retrying the request
              is pointless.
            </p></dd>
</dl></div>
<p>
    </p>
<p><span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
      translates these error codes to suitable error messages.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543786"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">RFC2553</span></span>,

      <span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_gethostent</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_getnameinfo</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 2
<td> </td>
<td>, </td>
d45 3
a47 2
<td> </td>
<td>, </td>
d51 3
a53 2
<td> </td>
<td>, </td>
d57 1
a57 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d59 1
a59 1
<code>)</code>;</td>
d67 3
a69 2
<td> </td>
<td>, </td>
d73 3
a75 2
<td> </td>
<td>, </td>
d79 3
a81 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d85 1
a85 1
<td> </td>
d87 1
a87 1
<code>)</code>;</td>
d90 1
a90 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
d94 1
a94 7
<td> </td>
<td>
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
d96 2
a97 3
<code>)</code>;</td>
</tr>
</table>
d101 1
a101 1
<a name="id2549461"></a><h2>DESCRIPTION</h2>
d103 10
a112 10
These functions perform thread safe, protocol independent
nodename-to-address and address-to-nodename 
translation as defined in RFC2553.
</p>
<p>
They use a
<span class="type">struct hostent</span>
which is defined in
<code class="filename">namedb.h</code>:
</p>
d124 1
a124 1
</p>
d126 2
a127 2
The members of this structure are:
</p>
d131 2
a132 2
The official (canonical) name of the host.
</p></dd>
d135 3
a137 2
A NULL-terminated array of alternate names (nicknames) for the host.
</p></dd>
d140 4
a143 4
The type of address being returned - usually
<span class="type">PF_INET</span>
or
<span class="type">PF_INET6</span>.
d145 1
a145 1
</p></dd>
d148 2
a149 2
The length of the address in bytes.
</p></dd>
d152 5
a156 5
A
<span class="type">NULL</span>
terminated array of network addresses for the host.
Host addresses are returned in network byte order.
</p></dd>
d159 7
a165 8
</p>
<p>
<code class="function">lwres_getipnodebyname()</code>
looks up addresses of protocol family
<em class="parameter"><code>af</code></em>

for the hostname
<em class="parameter"><code>name</code></em>.
d167 1
a167 7
The
<em class="parameter"><code>flags</code></em>
parameter contains ORed flag bits to 
specify the types of addresses that are searched
for, and the types of addresses that are returned. 
The flag bits are:
</p>
d171 6
a176 5
This is used with an
<em class="parameter"><code>af</code></em>
of AF_INET6, and causes IPv4 addresses to be returned as IPv4-mapped
IPv6 addresses.
</p></dd>
d179 8
a186 6
This is used with an
<em class="parameter"><code>af</code></em>
of AF_INET6, and causes all known addresses (IPv6 and IPv4) to be returned.
If AI_V4MAPPED is also set, the IPv4 addresses are return as mapped
IPv6 addresses.
</p></dd>
d189 4
a192 4
Only return an IPv6 or IPv4 address if here is an active network
interface of that type.  This is not currently implemented
in the BIND 9 lightweight resolver, and the flag is ignored.
</p></dd>
d195 6
a200 6
This default sets the
<code class="constant">AI_V4MAPPED</code>
and
<code class="constant">AI_ADDRCONFIG</code>
flag bits.
</p></dd>
d203 15
a217 34
</p>
<p>
<code class="function">lwres_getipnodebyaddr()</code>
performs a reverse lookup
of address
<em class="parameter"><code>src</code></em>
which is
<em class="parameter"><code>len</code></em>
bytes long.
<em class="parameter"><code>af</code></em>
denotes the protocol family, typically
<span class="type">PF_INET</span>
or
<span class="type">PF_INET6</span>.

</p>
<p>
<code class="function">lwres_freehostent()</code>
releases all the memory associated with
the
<span class="type">struct hostent</span>
pointer
<em class="parameter"><code>he</code></em>.

Any memory allocated for the
<code class="constant">h_name</code>,

<code class="constant">h_addr_list</code>
and
<code class="constant">h_aliases</code>
is freed, as is the memory for the
<span class="type">hostent</span>
structure itself.
</p>
d220 1
a220 1
<a name="id2549832"></a><h2>RETURN VALUES</h2>
d222 12
a233 12
If an error occurs,
<code class="function">lwres_getipnodebyname()</code>
and
<code class="function">lwres_getipnodebyaddr()</code>
set
<em class="parameter"><code>*error_num</code></em>
to an appropriate error code and the function returns a
<span class="type">NULL</span>
pointer.
The error codes and their meanings are defined in
<code class="filename">&lt;lwres/netdb.h&gt;</code>:
</p>
d237 2
a238 2
No such host is known.
</p></dd>
d241 4
a244 4
The server recognised the request and the name but no address is
available.  Another type of request to the name server for the
domain might return an answer.
</p></dd>
d247 4
a250 4
A temporary and possibly transient error occurred, such as a
failure of a server to respond.  The request may succeed if
retried.
</p></dd>
d253 3
a255 3
An unexpected failure occurred, and retrying the request
is pointless.
</p></dd>
d258 4
a261 6
</p>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
translates these error codes to suitable error messages.
</p>
d264 2
a265 3
<a name="id2549923"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">RFC2553</span></span>,
d267 1
a267 1
<span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,
d269 1
a269 1
<span class="citerefentry"><span class="refentrytitle">lwres_gethostent</span>(3)</span>,
d271 1
a271 1
<span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,
d273 1
a273 1
<span class="citerefentry"><span class="refentrytitle">lwres_getnameinfo</span>(3)</span>,
d275 2
a276 2
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.9 2005/10/13 02:33:56 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d55 5
d85 5
d94 2
a95 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
d102 8
a109 1
</tr></table>
d113 1
a113 1
<a name="id2525896"></a><h2>DESCRIPTION</h2>
d254 1
a254 1
<a name="id2526131"></a><h2>RETURN VALUES</h2>
d300 1
a300 1
<a name="id2526290"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 81
a97 85

<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_getipnode</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_getipnode</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_getipnodebyname, lwres_getipnodebyaddr, lwres_freehostent&nbsp;--&nbsp;lightweight resolver nodename / address translation API</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN13"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN14"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/netdb.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_getipnodebyname</CODE
>(const char *name, int af, int flags, int *error_num);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_getipnodebyaddr</CODE
>(const void *src, size_t len, int af, int *error_num);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_freehostent</CODE
>(struct hostent *he);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN34"
></A
><H2
>DESCRIPTION</H2
><P
>These functions perform thread safe, protocol independent
d99 5
a103 7
translation as defined in RFC2553.</P
><P
>They use a
<SPAN
CLASS="TYPE"
>struct hostent</SPAN
>
d105 4
a108 7
<TT
CLASS="FILENAME"
>namedb.h</TT
>:
<PRE
CLASS="PROGRAMLISTING"
>struct  hostent {
d115 20
a134 39
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */</PRE
></P
><P
>The members of this structure are:
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>h_name</CODE
></DT
><DD
><P
>The official (canonical) name of the host.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_aliases</CODE
></DT
><DD
><P
>A NULL-terminated array of alternate names (nicknames) for the host.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_addrtype</CODE
></DT
><DD
><P
>The type of address being returned - usually
<SPAN
CLASS="TYPE"
>PF_INET</SPAN
>
d136 11
a146 26
<SPAN
CLASS="TYPE"
>PF_INET6</SPAN
>.&#13;</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_length</CODE
></DT
><DD
><P
>The length of the address in bytes.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_addr_list</CODE
></DT
><DD
><P
>A
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
d148 7
a154 10
Host addresses are returned in network byte order.</P
></DD
></DL
></DIV
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_getipnodebyname()</CODE
>
d156 1
a156 4
<VAR
CLASS="PARAMETER"
>af</VAR
>
d159 1
a159 4
<VAR
CLASS="PARAMETER"
>name</VAR
>.
d162 1
a162 4
<VAR
CLASS="PARAMETER"
>flags</VAR
>
d167 6
a172 17
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>AI_V4MAPPED</CODE
></DT
><DD
><P
>This is used with an
<VAR
CLASS="PARAMETER"
>af</VAR
>
d174 6
a179 14
IPv6 addresses.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>AI_ALL</CODE
></DT
><DD
><P
>This is used with an
<VAR
CLASS="PARAMETER"
>af</VAR
>
d182 5
a186 10
IPv6 addresses.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>AI_ADDRCONFIG</CODE
></DT
><DD
><P
>Only return an IPv6 or IPv4 address if here is an active network
d188 6
a193 14
in the BIND 9 lightweight resolver, and the flag is ignored.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>AI_DEFAULT</CODE
></DT
><DD
><P
>This default sets the
<CODE
CLASS="CONSTANT"
>AI_V4MAPPED</CODE
>
d195 8
a202 14
<CODE
CLASS="CONSTANT"
>AI_ADDRCONFIG</CODE
>
flag bits.</P
></DD
></DL
></DIV
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_getipnodebyaddr()</CODE
>
d205 1
a205 4
<VAR
CLASS="PARAMETER"
>src</VAR
>
d207 1
a207 4
<VAR
CLASS="PARAMETER"
>len</VAR
>
d209 1
a209 4
<VAR
CLASS="PARAMETER"
>af</VAR
>
d211 1
a211 4
<SPAN
CLASS="TYPE"
>PF_INET</SPAN
>
d213 5
a217 9
<SPAN
CLASS="TYPE"
>PF_INET6</SPAN
>.&#13;</P
><P
><CODE
CLASS="FUNCTION"
>lwres_freehostent()</CODE
>
d220 1
a220 4
<SPAN
CLASS="TYPE"
>struct hostent</SPAN
>
d222 1
a222 4
<VAR
CLASS="PARAMETER"
>he</VAR
>.
d225 3
a227 9
<CODE
CLASS="CONSTANT"
>h_name</CODE
>,

<CODE
CLASS="CONSTANT"
>h_addr_list</CODE
>
d229 1
a229 4
<CODE
CLASS="CONSTANT"
>h_aliases</CODE
>
d231 9
a239 19
<SPAN
CLASS="TYPE"
>hostent</SPAN
>
structure itself.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN116"
></A
><H2
>RETURN VALUES</H2
><P
>If an error occurs,
<CODE
CLASS="FUNCTION"
>lwres_getipnodebyname()</CODE
>
d241 1
a241 4
<CODE
CLASS="FUNCTION"
>lwres_getipnodebyaddr()</CODE
>
d243 1
a243 4
<VAR
CLASS="PARAMETER"
>*error_num</VAR
>
d245 1
a245 4
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
d248 10
a257 26
<TT
CLASS="FILENAME"
>&lt;lwres/netdb.h&gt;</TT
>:
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>HOST_NOT_FOUND</CODE
></DT
><DD
><P
>No such host is known.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>NO_ADDRESS</CODE
></DT
><DD
><P
>The server recognised the request and the name but no address is
d259 5
a263 10
domain might return an answer.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>TRY_AGAIN</CODE
></DT
><DD
><P
>A temporary and possibly transient error occurred, such as a
d265 34
a298 84
retried.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>NO_RECOVERY</CODE
></DT
><DD
><P
>An unexpected failure occurred, and retrying the request
is pointless.</P
></DD
></DL
></DIV
></P
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_hstrerror</SPAN
>(3)</SPAN
>
translates these error codes to suitable error messages.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN149"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>RFC2553</SPAN
></SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_gethostent</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_getaddrinfo</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_getnameinfo</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_hstrerror</SPAN
>(3)</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_getipnode</A
></H1
d57 2
a61 2
><P
></P
d134 1
a134 1
><TT
d136 1
a136 1
>h_name</TT
d143 1
a143 1
><TT
d145 1
a145 1
>h_aliases</TT
d152 1
a152 1
><TT
d154 1
a154 1
>h_addrtype</TT
d170 1
a170 1
><TT
d172 1
a172 1
>h_length</TT
d179 1
a179 1
><TT
d181 1
a181 1
>h_addr_list</TT
d197 1
a197 1
><TT
d199 1
a199 1
>lwres_getipnodebyname()</TT
d202 1
a202 1
<TT
d204 1
a204 3
><I
>af</I
></TT
d208 1
a208 1
<TT
d210 1
a210 3
><I
>name</I
></TT
d214 1
a214 1
<TT
d216 1
a216 3
><I
>flags</I
></TT
d228 1
a228 1
><TT
d230 1
a230 1
>AI_V4MAPPED</TT
d235 1
a235 1
<TT
d237 1
a237 3
><I
>af</I
></TT
d243 1
a243 1
><TT
d245 1
a245 1
>AI_ALL</TT
d250 1
a250 1
<TT
d252 1
a252 3
><I
>af</I
></TT
d259 1
a259 1
><TT
d261 1
a261 1
>AI_ADDRCONFIG</TT
d270 1
a270 1
><TT
d272 1
a272 1
>AI_DEFAULT</TT
d277 1
a277 1
<TT
d279 1
a279 1
>AI_V4MAPPED</TT
d282 1
a282 1
<TT
d284 1
a284 1
>AI_ADDRCONFIG</TT
d292 1
a292 1
><TT
d294 1
a294 1
>lwres_getipnodebyaddr()</TT
d298 1
a298 1
<TT
d300 1
a300 3
><I
>src</I
></TT
d303 1
a303 1
<TT
d305 1
a305 3
><I
>len</I
></TT
d308 1
a308 1
<TT
d310 1
a310 3
><I
>af</I
></TT
d323 1
a323 1
><TT
d325 1
a325 1
>lwres_freehostent()</TT
d334 1
a334 1
<TT
d336 1
a336 3
><I
>he</I
></TT
d340 1
a340 1
<TT
d342 1
a342 1
>h_name</TT
d345 1
a345 1
<TT
d347 1
a347 1
>h_addr_list</TT
d350 1
a350 1
<TT
d352 1
a352 1
>h_aliases</TT
d370 1
a370 1
<TT
d372 1
a372 1
>lwres_getipnodebyname()</TT
d375 1
a375 1
<TT
d377 1
a377 1
>lwres_getipnodebyaddr()</TT
d380 1
a380 1
<TT
d382 1
a382 3
><I
>*error_num</I
></TT
d401 1
a401 1
><TT
d403 1
a403 1
>HOST_NOT_FOUND</TT
d410 1
a410 1
><TT
d412 1
a412 1
>NO_ADDRESS</TT
d421 1
a421 1
><TT
d423 1
a423 1
>TRY_AGAIN</TT
d432 1
a432 1
><TT
d434 1
a434 1
>NO_RECOVERY</TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d401 1
a401 1
to an approriate error code and the function returns a
d529 1
a529 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_getipnode</H1
a53 2
><P
></P
d57 2
d131 1
a131 1
><CODE
d133 1
a133 1
>h_name</CODE
d140 1
a140 1
><CODE
d142 1
a142 1
>h_aliases</CODE
d149 1
a149 1
><CODE
d151 1
a151 1
>h_addrtype</CODE
d167 1
a167 1
><CODE
d169 1
a169 1
>h_length</CODE
d176 1
a176 1
><CODE
d178 1
a178 1
>h_addr_list</CODE
d194 1
a194 1
><CODE
d196 1
a196 1
>lwres_getipnodebyname()</CODE
d199 1
a199 1
<VAR
d201 3
a203 1
>af</VAR
d207 1
a207 1
<VAR
d209 3
a211 1
>name</VAR
d215 1
a215 1
<VAR
d217 3
a219 1
>flags</VAR
d231 1
a231 1
><CODE
d233 1
a233 1
>AI_V4MAPPED</CODE
d238 1
a238 1
<VAR
d240 3
a242 1
>af</VAR
d248 1
a248 1
><CODE
d250 1
a250 1
>AI_ALL</CODE
d255 1
a255 1
<VAR
d257 3
a259 1
>af</VAR
d266 1
a266 1
><CODE
d268 1
a268 1
>AI_ADDRCONFIG</CODE
d277 1
a277 1
><CODE
d279 1
a279 1
>AI_DEFAULT</CODE
d284 1
a284 1
<CODE
d286 1
a286 1
>AI_V4MAPPED</CODE
d289 1
a289 1
<CODE
d291 1
a291 1
>AI_ADDRCONFIG</CODE
d299 1
a299 1
><CODE
d301 1
a301 1
>lwres_getipnodebyaddr()</CODE
d305 1
a305 1
<VAR
d307 3
a309 1
>src</VAR
d312 1
a312 1
<VAR
d314 3
a316 1
>len</VAR
d319 1
a319 1
<VAR
d321 3
a323 1
>af</VAR
d336 1
a336 1
><CODE
d338 1
a338 1
>lwres_freehostent()</CODE
d347 1
a347 1
<VAR
d349 3
a351 1
>he</VAR
d355 1
a355 1
<CODE
d357 1
a357 1
>h_name</CODE
d360 1
a360 1
<CODE
d362 1
a362 1
>h_addr_list</CODE
d365 1
a365 1
<CODE
d367 1
a367 1
>h_aliases</CODE
d385 1
a385 1
<CODE
d387 1
a387 1
>lwres_getipnodebyname()</CODE
d390 1
a390 1
<CODE
d392 1
a392 1
>lwres_getipnodebyaddr()</CODE
d395 1
a395 1
<VAR
d397 3
a399 1
>*error_num</VAR
d401 1
a401 1
to an appropriate error code and the function returns a
d418 1
a418 1
><CODE
d420 1
a420 1
>HOST_NOT_FOUND</CODE
d427 1
a427 1
><CODE
d429 1
a429 1
>NO_ADDRESS</CODE
d438 1
a438 1
><CODE
d440 1
a440 1
>TRY_AGAIN</CODE
d449 1
a449 1
><CODE
d451 1
a451 1
>NO_RECOVERY</CODE
d529 1
a529 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 85
a101 81
<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.9 2005/10/13 02:33:56 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_getipnode</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_getipnodebyname, lwres_getipnodebyaddr, lwres_freehostent &#8212; lightweight resolver nodename / address translation API</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_getipnodebyname</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_getipnodebyaddr</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_freehostent</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525896"></a><h2>DESCRIPTION</h2>
<p>
These functions perform thread safe, protocol independent
d103 7
a109 5
translation as defined in RFC2553.
</p>
<p>
They use a
<span class="type">struct hostent</span>
d111 7
a117 4
<code class="filename">namedb.h</code>:
</p>
<pre class="programlisting">
struct  hostent {
d124 39
a162 20
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</pre>
<p>
</p>
<p>
The members of this structure are:
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">h_name</code></span></dt>
<dd><p>
The official (canonical) name of the host.
</p></dd>
<dt><span class="term"><code class="constant">h_aliases</code></span></dt>
<dd><p>
A NULL-terminated array of alternate names (nicknames) for the host.
</p></dd>
<dt><span class="term"><code class="constant">h_addrtype</code></span></dt>
<dd><p>
The type of address being returned - usually
<span class="type">PF_INET</span>
d164 26
a189 11
<span class="type">PF_INET6</span>.

</p></dd>
<dt><span class="term"><code class="constant">h_length</code></span></dt>
<dd><p>
The length of the address in bytes.
</p></dd>
<dt><span class="term"><code class="constant">h_addr_list</code></span></dt>
<dd><p>
A
<span class="type">NULL</span>
d191 10
a200 7
Host addresses are returned in network byte order.
</p></dd>
</dl></div>
<p>
</p>
<p>
<code class="function">lwres_getipnodebyname()</code>
d202 4
a205 1
<em class="parameter"><code>af</code></em>
d208 4
a211 1
<em class="parameter"><code>name</code></em>.
d214 4
a217 1
<em class="parameter"><code>flags</code></em>
d222 17
a238 6
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">AI_V4MAPPED</code></span></dt>
<dd><p>
This is used with an
<em class="parameter"><code>af</code></em>
d240 14
a253 6
IPv6 addresses.
</p></dd>
<dt><span class="term"><code class="constant">AI_ALL</code></span></dt>
<dd><p>
This is used with an
<em class="parameter"><code>af</code></em>
d256 10
a265 5
IPv6 addresses.
</p></dd>
<dt><span class="term"><code class="constant">AI_ADDRCONFIG</code></span></dt>
<dd><p>
Only return an IPv6 or IPv4 address if here is an active network
d267 14
a280 6
in the BIND 9 lightweight resolver, and the flag is ignored.
</p></dd>
<dt><span class="term"><code class="constant">AI_DEFAULT</code></span></dt>
<dd><p>
This default sets the
<code class="constant">AI_V4MAPPED</code>
d282 14
a295 8
<code class="constant">AI_ADDRCONFIG</code>
flag bits.
</p></dd>
</dl></div>
<p>
</p>
<p>
<code class="function">lwres_getipnodebyaddr()</code>
d298 4
a301 1
<em class="parameter"><code>src</code></em>
d303 4
a306 1
<em class="parameter"><code>len</code></em>
d308 4
a311 1
<em class="parameter"><code>af</code></em>
d313 4
a316 1
<span class="type">PF_INET</span>
d318 9
a326 5
<span class="type">PF_INET6</span>.

</p>
<p>
<code class="function">lwres_freehostent()</code>
d329 4
a332 1
<span class="type">struct hostent</span>
d334 4
a337 1
<em class="parameter"><code>he</code></em>.
d340 9
a348 3
<code class="constant">h_name</code>,

<code class="constant">h_addr_list</code>
d350 4
a353 1
<code class="constant">h_aliases</code>
d355 19
a373 9
<span class="type">hostent</span>
structure itself.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526131"></a><h2>RETURN VALUES</h2>
<p>
If an error occurs,
<code class="function">lwres_getipnodebyname()</code>
d375 4
a378 1
<code class="function">lwres_getipnodebyaddr()</code>
d380 4
a383 1
<em class="parameter"><code>*error_num</code></em>
d385 4
a388 1
<span class="type">NULL</span>
d391 26
a416 10
<code class="filename">&lt;lwres/netdb.h&gt;</code>:
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">HOST_NOT_FOUND</code></span></dt>
<dd><p>
No such host is known.
</p></dd>
<dt><span class="term"><code class="constant">NO_ADDRESS</code></span></dt>
<dd><p>
The server recognised the request and the name but no address is
d418 10
a427 5
domain might return an answer.
</p></dd>
<dt><span class="term"><code class="constant">TRY_AGAIN</code></span></dt>
<dd><p>
A temporary and possibly transient error occurred, such as a
d429 84
a512 34
retried.
</p></dd>
<dt><span class="term"><code class="constant">NO_RECOVERY</code></span></dt>
<dd><p>
An unexpected failure occurred, and retrying the request
is pointless.
</p></dd>
</dl></div>
<p>
</p>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
translates these error codes to suitable error messages.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526290"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">RFC2553</span></span>,

<span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_gethostent</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_getnameinfo</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_getipnode.html,v 1.7.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a54 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a79 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d84 1
a84 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
d91 1
a91 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d95 1
a95 1
<a name="id2549461"></a><h2>DESCRIPTION</h2>
d236 1
a236 1
<a name="id2549832"></a><h2>RETURN VALUES</h2>
d282 1
a282 1
<a name="id2549923"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_getipnode.html,v 1.9.18.16 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
d49 2
a50 3
<td>int  </td>
<td>
<var class="pdparam">af</var>, </td>
d54 2
a55 3
<td>int  </td>
<td>
<var class="pdparam">flags</var>, </td>
d59 1
a59 1
<td>int * </td>
d61 1
a61 1
<var class="pdparam">error_num</var><code>)</code>;</td>
d69 7
a75 3
<td>const void * </td>
<td>
<var class="pdparam">src</var>, </td>
d79 2
a80 3
<td>size_t  </td>
<td>
<var class="pdparam">len</var>, </td>
d84 2
a85 3
<td>int  </td>
<td>
<var class="pdparam">af</var>, </td>
d89 1
a89 1
<td>int * </td>
d91 1
a91 1
<var class="pdparam">error_num</var><code>)</code>;</td>
d94 2
a95 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
d99 7
a105 1
<td>struct hostent * </td>
d107 3
a109 2
<var class="pdparam">he</var><code>)</code>;</td>
</tr></table>
d113 1
a113 1
<a name="id2543431"></a><h2>DESCRIPTION</h2>
d115 10
a124 10
      These functions perform thread safe, protocol independent
      nodename-to-address and address-to-nodename
      translation as defined in RFC2553.
    </p>
<p>
      They use a
      <span class="type">struct hostent</span>
      which is defined in
      <code class="filename">namedb.h</code>:
    </p>
d136 1
a136 1
    </p>
d138 2
a139 2
      The members of this structure are:
      </p>
d143 2
a144 2
              The official (canonical) name of the host.
            </p></dd>
d147 2
a148 3
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </p></dd>
d151 4
a154 4
              The type of address being returned - usually
              <span class="type">PF_INET</span>
              or
              <span class="type">PF_INET6</span>.
d156 1
a156 1
            </p></dd>
d159 2
a160 2
              The length of the address in bytes.
            </p></dd>
d163 5
a167 5
              A
              <span class="type">NULL</span>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </p></dd>
d170 8
a177 7
    </p>
<p><code class="function">lwres_getipnodebyname()</code>
      looks up addresses of protocol family <em class="parameter"><code>af</code></em>
      for the hostname <em class="parameter"><code>name</code></em>.  The
      <em class="parameter"><code>flags</code></em> parameter contains ORed flag bits
      to specify the types of addresses that are searched for, and the
      types of addresses that are returned.  The flag bits are:
d179 7
a185 1
      </p>
d189 5
a193 6
              This is used with an
              <em class="parameter"><code>af</code></em>
              of AF_INET6, and causes IPv4 addresses to be returned as
              IPv4-mapped
              IPv6 addresses.
            </p></dd>
d196 6
a201 8
              This is used with an
              <em class="parameter"><code>af</code></em>
              of AF_INET6, and causes all known addresses (IPv6 and IPv4) to
              be returned.
              If AI_V4MAPPED is also set, the IPv4 addresses are return as
              mapped
              IPv6 addresses.
            </p></dd>
d204 4
a207 4
              Only return an IPv6 or IPv4 address if here is an active network
              interface of that type.  This is not currently implemented
              in the BIND 9 lightweight resolver, and the flag is ignored.
            </p></dd>
d210 6
a215 6
              This default sets the
              <code class="constant">AI_V4MAPPED</code>
              and
              <code class="constant">AI_ADDRCONFIG</code>
              flag bits.
            </p></dd>
d218 34
a251 15
    </p>
<p><code class="function">lwres_getipnodebyaddr()</code>
      performs a reverse lookup of address <em class="parameter"><code>src</code></em>
      which is <em class="parameter"><code>len</code></em> bytes long.
      <em class="parameter"><code>af</code></em> denotes the protocol family, typically
      <span class="type">PF_INET</span> or <span class="type">PF_INET6</span>.
    </p>
<p><code class="function">lwres_freehostent()</code>
      releases all the memory associated with the <span class="type">struct
      hostent</span> pointer <em class="parameter"><code>he</code></em>.  Any memory
      allocated for the <code class="constant">h_name</code>,
      <code class="constant">h_addr_list</code> and
      <code class="constant">h_aliases</code> is freed, as is the memory for
      the <span class="type">hostent</span> structure itself.
    </p>
d254 1
a254 1
<a name="id2543689"></a><h2>RETURN VALUES</h2>
d256 12
a267 12
      If an error occurs,
      <code class="function">lwres_getipnodebyname()</code>
      and
      <code class="function">lwres_getipnodebyaddr()</code>
      set
      <em class="parameter"><code>*error_num</code></em>
      to an appropriate error code and the function returns a
      <span class="type">NULL</span>
      pointer.
      The error codes and their meanings are defined in
      <code class="filename">&lt;lwres/netdb.h&gt;</code>:
      </p>
d271 2
a272 2
              No such host is known.
            </p></dd>
d275 4
a278 4
              The server recognised the request and the name but no address is
              available.  Another type of request to the name server for the
              domain might return an answer.
            </p></dd>
d281 4
a284 4
              A temporary and possibly transient error occurred, such as a
              failure of a server to respond.  The request may succeed if
              retried.
            </p></dd>
d287 3
a289 3
              An unexpected failure occurred, and retrying the request
              is pointless.
            </p></dd>
d292 6
a297 4
    </p>
<p><span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
      translates these error codes to suitable error messages.
    </p>
d300 3
a302 2
<a name="id2543786"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">RFC2553</span></span>,
d304 1
a304 1
      <span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,
d306 1
a306 1
      <span class="citerefentry"><span class="refentrytitle">lwres_gethostent</span>(3)</span>,
d308 1
a308 1
      <span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,
d310 1
a310 1
      <span class="citerefentry"><span class="refentrytitle">lwres_getnameinfo</span>(3)</span>,
d312 2
a313 2
      <span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>.
    </p>
@


