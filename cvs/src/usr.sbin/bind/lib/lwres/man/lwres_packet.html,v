head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.38
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.36;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.09;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.35;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.28;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.57;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_packet.html,v 1.9.18.17 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_packet</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_lwpacket_renderheader, lwres_lwpacket_parseheader &#8212; lightweight resolver packet handling functions</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwpacket.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_lwpacket_renderheader</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_lwpacket_parseheader</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543389"></a><h2>DESCRIPTION</h2>
<p>
      These functions rely on a
      <span class="type">struct lwres_lwpacket</span>
      which is defined in
      <code class="filename">lwres/lwpacket.h</code>.
    </p>
<pre class="programlisting">
typedef struct lwres_lwpacket lwres_lwpacket_t;
      </pre>
<p>
    </p>
<pre class="programlisting">
struct lwres_lwpacket {
        lwres_uint32_t          length;
        lwres_uint16_t          version;
        lwres_uint16_t          pktflags;
        lwres_uint32_t          serial;
        lwres_uint32_t          opcode;
        lwres_uint32_t          result;
        lwres_uint32_t          recvlength;
        lwres_uint16_t          authtype;
        lwres_uint16_t          authlength;
};
</pre>
<p>
    </p>
<p>
      The elements of this structure are:
      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">length</code></span></dt>
<dd><p>
              the overall packet length, including the entire packet header.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
<dt><span class="term"><code class="constant">version</code></span></dt>
<dd><p>
              the header format. There is currently only one format,
              <span class="type">LWRES_LWPACKETVERSION_0</span>.

              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
<dt><span class="term"><code class="constant">pktflags</code></span></dt>
<dd><p>
              library-defined flags for this packet: for instance whether the
              packet
              is a request or a reply. Flag values can be set, but not defined
              by
              the caller.
              This field is filled in by the application wit the exception of
              the
              LWRES_LWPACKETFLAG_RESPONSE bit, which is set by the library in
              the
              lwres_gabn_*() and lwres_gnba_*() calls.
            </p></dd>
<dt><span class="term"><code class="constant">serial</code></span></dt>
<dd><p>
              is set by the requestor and is returned in all replies. If two
              or more
              packets from the same source have the same serial number and are
              from
              the same source, they are assumed to be duplicates and the
              latter ones
              may be dropped.
              This field must be set by the application.
            </p></dd>
<dt><span class="term"><code class="constant">opcode</code></span></dt>
<dd><p>
              indicates the operation.
              Opcodes between 0x00000000 and 0x03ffffff are
              reserved for use by the lightweight resolver library. Opcodes
              between
              0x04000000 and 0xffffffff are application defined.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
<dt><span class="term"><code class="constant">result</code></span></dt>
<dd><p>
              is only valid for replies.
              Results between 0x04000000 and 0xffffffff are application
              defined.
              Results between 0x00000000 and 0x03ffffff are reserved for
              library use.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
<dt><span class="term"><code class="constant">recvlength</code></span></dt>
<dd><p>
              is the maximum buffer size that the receiver can handle on
              requests
              and the size of the buffer needed to satisfy a request when the
              buffer
              is too large for replies.
              This field is supplied by the application.
            </p></dd>
<dt><span class="term"><code class="constant">authtype</code></span></dt>
<dd><p>
              defines the packet level authentication that is used.
              Authorisation types between 0x1000 and 0xffff are application
              defined
              and types between 0x0000 and 0x0fff are reserved for library
              use.
              Currently these are not used and must be zero.
            </p></dd>
<dt><span class="term"><code class="constant">authlen</code></span></dt>
<dd><p>
              gives the length of the authentication data.
              Since packet authentication is currently not used, this must be
              zero.
            </p></dd>
</dl></div>
<p>
    </p>
<p>
      The following opcodes are currently defined:
      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">NOOP</code></span></dt>
<dd><p>
              Success is always returned and the packet contents are echoed.
              The lwres_noop_*() functions should be used for this type.
            </p></dd>
<dt><span class="term"><code class="constant">GETADDRSBYNAME</code></span></dt>
<dd><p>
              returns all known addresses for a given name.
              The lwres_gabn_*() functions should be used for this type.
            </p></dd>
<dt><span class="term"><code class="constant">GETNAMEBYADDR</code></span></dt>
<dd><p>
              return the hostname for the given address.
              The lwres_gnba_*() functions should be used for this type.
            </p></dd>
</dl></div>
<p>
    </p>
<p><code class="function">lwres_lwpacket_renderheader()</code>
      transfers the contents of lightweight resolver packet structure
      <span class="type">lwres_lwpacket_t</span> <em class="parameter"><code>*pkt</code></em> in
      network byte order to the lightweight resolver buffer,
      <em class="parameter"><code>*b</code></em>.
    </p>
<p><code class="function">lwres_lwpacket_parseheader()</code>
      performs the converse operation.  It transfers data in network
      byte order from buffer <em class="parameter"><code>*b</code></em> to resolver
      packet <em class="parameter"><code>*pkt</code></em>.  The contents of the buffer
      <em class="parameter"><code>b</code></em> should correspond to a
      <span class="type">lwres_lwpacket_t</span>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543706"></a><h2>RETURN VALUES</h2>
<p>
      Successful calls to
      <code class="function">lwres_lwpacket_renderheader()</code> and
      <code class="function">lwres_lwpacket_parseheader()</code> return
      <span class="errorcode">LWRES_R_SUCCESS</span>.  If there is insufficient
      space to copy data between the buffer <em class="parameter"><code>*b</code></em> and
      lightweight resolver packet <em class="parameter"><code>*pkt</code></em> both
      functions
      return <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d45 1
a45 1
<td> </td>
d47 1
a47 1
<code>)</code>;</td>
d55 3
a57 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d61 1
a61 1
<td> </td>
d63 1
a63 1
<code>)</code>;</td>
d69 1
a69 1
<a name="id2549430"></a><h2>DESCRIPTION</h2>
d71 5
a75 6
These functions rely on a
<span class="type">struct lwres_lwpacket</span>
which is defined in
<code class="filename">lwres/lwpacket.h</code>.

</p>
d78 4
a81 1

d95 1
a95 1
</p>
d97 2
a98 2
The elements of this structure are:
</p>
d102 4
a105 4
the overall packet length, including the entire packet header.
This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
calls.
</p></dd>
d108 2
a109 2
the header format. There is currently only one format,
<span class="type">LWRES_LWPACKETVERSION_0</span>.
d111 3
a113 3
This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
calls.
</p></dd>
d116 11
a126 7
library-defined flags for this packet: for instance whether the packet
is a request or a reply. Flag values can be set, but not defined by
the caller.
This field is filled in by the application wit the exception of the
LWRES_LWPACKETFLAG_RESPONSE bit, which is set by the library in the
lwres_gabn_*() and lwres_gnba_*() calls.
</p></dd>
d129 9
a137 6
is set by the requestor and is returned in all replies. If two or more
packets from the same source have the same serial number and are from
the same source, they are assumed to be duplicates and the latter ones
may be dropped.
This field must be set by the application.
</p></dd>
d140 8
a147 7
indicates the operation.
Opcodes between 0x00000000 and 0x03ffffff are
reserved for use by the lightweight resolver library. Opcodes between
0x04000000 and 0xffffffff are application defined.
This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
calls.
</p></dd>
d150 8
a157 6
is only valid for replies.
Results between 0x04000000 and 0xffffffff are application defined.
Results between 0x00000000 and 0x03ffffff are reserved for library use.
This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
calls.
</p></dd>
d160 7
a166 5
is the maximum buffer size that the receiver can handle on requests
and the size of the buffer needed to satisfy a request when the buffer
is too large for replies.
This field is supplied by the application.
</p></dd>
d169 7
a175 5
defines the packet level authentication that is used.
Authorisation types between 0x1000 and 0xffff are application defined
and types between 0x0000 and 0x0fff are reserved for library use.
Currently these are not used and must be zero.
</p></dd>
d178 4
a181 3
gives the length of the authentication data.
Since packet authentication is currently not used, this must be zero.
</p></dd>
d184 1
a184 1
</p>
d186 2
a187 2
The following opcodes are currently defined:
</p>
d191 3
a193 3
Success is always returned and the packet contents are echoed.
The lwres_noop_*() functions should be used for this type.
</p></dd>
d196 3
a198 3
returns all known addresses for a given name.
The lwres_gabn_*() functions should be used for this type.
</p></dd>
d201 3
a203 3
return the hostname for the given address.
The lwres_gnba_*() functions should be used for this type.
</p></dd>
d206 14
a219 16
</p>
<p>
<code class="function">lwres_lwpacket_renderheader()</code> transfers the
contents of lightweight resolver packet structure
<span class="type">lwres_lwpacket_t</span> <em class="parameter"><code>*pkt</code></em> in network
byte order to the lightweight resolver buffer,
<em class="parameter"><code>*b</code></em>.
</p>
<p>
<code class="function">lwres_lwpacket_parseheader()</code> performs the
converse operation.  It transfers data in network byte order from
buffer <em class="parameter"><code>*b</code></em> to resolver packet
<em class="parameter"><code>*pkt</code></em>.  The contents of the buffer
<em class="parameter"><code>b</code></em> should correspond to a
<span class="type">lwres_lwpacket_t</span>.
</p>
d222 11
a232 9
<a name="id2549769"></a><h2>RETURN VALUES</h2>
<p> Successful calls to
<code class="function">lwres_lwpacket_renderheader()</code> and
<code class="function">lwres_lwpacket_parseheader()</code> return
<span class="errorcode">LWRES_R_SUCCESS</span>.  If there is insufficient
space to copy data between the buffer <em class="parameter"><code>*b</code></em> and
lightweight resolver packet <em class="parameter"><code>*pkt</code></em> both functions
return <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d45 5
d65 5
d77 1
a77 1
<a name="id2525865"></a><h2>DESCRIPTION</h2>
d215 1
a215 1
<a name="id2526068"></a><h2>RETURN VALUES</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 54
a70 81

<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_packet</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_packet</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_lwpacket_renderheader, lwres_lwpacket_parseheader&nbsp;--&nbsp;lightweight resolver packet handling functions</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN12"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN13"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwpacket.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_lwpacket_renderheader</CODE
>(lwres_buffer_t *b, lwres_lwpacket_t *pkt);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_lwpacket_parseheader</CODE
>(lwres_buffer_t *b, lwres_lwpacket_t *pkt);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN25"
></A
><H2
>DESCRIPTION</H2
><P
>These functions rely on a
<SPAN
CLASS="TYPE"
>struct lwres_lwpacket</SPAN
>
d72 1
a72 4
<TT
CLASS="FILENAME"
>lwres/lwpacket.h</TT
>.
d74 3
a76 3
<PRE
CLASS="PROGRAMLISTING"
>typedef struct lwres_lwpacket lwres_lwpacket_t;
d88 11
a98 17
};</PRE
></P
><P
>The elements of this structure are:
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>length</CODE
></DT
><DD
><P
>the overall packet length, including the entire packet header.
d100 6
a105 14
calls.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>version</CODE
></DT
><DD
><P
>the header format. There is currently only one format,
<SPAN
CLASS="TYPE"
>LWRES_LWPACKETVERSION_0</SPAN
>.
d108 5
a112 10
calls.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>pktflags</CODE
></DT
><DD
><P
>library-defined flags for this packet: for instance whether the packet
d117 5
a121 10
lwres_gabn_*() and lwres_gnba_*() calls.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>serial</CODE
></DT
><DD
><P
>is set by the requestor and is returned in all replies. If two or more
d125 5
a129 10
This field must be set by the application.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>opcode</CODE
></DT
><DD
><P
>indicates the operation.
d134 5
a138 10
calls.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>result</CODE
></DT
><DD
><P
>is only valid for replies.
d142 5
a146 10
calls.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>recvlength</CODE
></DT
><DD
><P
>is the maximum buffer size that the receiver can handle on requests
d149 5
a153 10
This field is supplied by the application.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>authtype</CODE
></DT
><DD
><P
>defines the packet level authentication that is used.
d156 34
a189 60
Currently these are not used and must be zero.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>authlen</CODE
></DT
><DD
><P
>gives the length of the authentication data.
Since packet authentication is currently not used, this must be zero.</P
></DD
></DL
></DIV
></P
><P
>The following opcodes are currently defined:
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>NOOP</CODE
></DT
><DD
><P
>Success is always returned and the packet contents are echoed.
The lwres_noop_*() functions should be used for this type.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>GETADDRSBYNAME</CODE
></DT
><DD
><P
>returns all known addresses for a given name.
The lwres_gabn_*() functions should be used for this type.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>GETNAMEBYADDR</CODE
></DT
><DD
><P
>return the hostname for the given address.
The lwres_gnba_*() functions should be used for this type.</P
></DD
></DL
></DIV
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_lwpacket_renderheader()</CODE
> transfers the
d191 1
a191 7
<SPAN
CLASS="TYPE"
>lwres_lwpacket_t</SPAN
> <VAR
CLASS="PARAMETER"
>*pkt</VAR
> in network
d193 4
a196 9
<VAR
CLASS="PARAMETER"
>*b</VAR
>.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_lwpacket_parseheader()</CODE
> performs the
d198 19
a216 54
buffer <VAR
CLASS="PARAMETER"
>*b</VAR
> to resolver packet
<VAR
CLASS="PARAMETER"
>*pkt</VAR
>.  The contents of the buffer
<VAR
CLASS="PARAMETER"
>b</VAR
> should correspond to a
<SPAN
CLASS="TYPE"
>lwres_lwpacket_t</SPAN
>.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN107"
></A
><H2
>RETURN VALUES</H2
><P
> Successful calls to
<CODE
CLASS="FUNCTION"
>lwres_lwpacket_renderheader()</CODE
> and
<CODE
CLASS="FUNCTION"
>lwres_lwpacket_parseheader()</CODE
> return
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>.  If there is insufficient
space to copy data between the buffer <VAR
CLASS="PARAMETER"
>*b</VAR
> and
lightweight resolver packet <VAR
CLASS="PARAMETER"
>*pkt</VAR
> both functions
return <SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_packet</A
></H1
d57 2
a61 2
><P
></P
d128 1
a128 1
><TT
d130 1
a130 1
>length</TT
d139 1
a139 1
><TT
d141 1
a141 1
>version</TT
d155 1
a155 1
><TT
d157 1
a157 1
>pktflags</TT
d169 1
a169 1
><TT
d171 1
a171 1
>serial</TT
d182 1
a182 1
><TT
d184 1
a184 1
>opcode</TT
d196 1
a196 1
><TT
d198 1
a198 1
>result</TT
d209 1
a209 1
><TT
d211 1
a211 1
>recvlength</TT
d221 1
a221 1
><TT
d223 1
a223 1
>authtype</TT
d233 1
a233 1
><TT
d235 1
a235 1
>authlen</TT
d253 1
a253 1
><TT
d255 1
a255 1
>NOOP</TT
d263 1
a263 1
><TT
d265 1
a265 1
>GETADDRSBYNAME</TT
d273 1
a273 1
><TT
d275 1
a275 1
>GETNAMEBYADDR</TT
d286 1
a286 1
><TT
d288 1
a288 1
>lwres_lwpacket_renderheader()</TT
d294 1
a294 1
> <TT
d296 1
a296 3
><I
>*pkt</I
></TT
d299 1
a299 1
<TT
d301 1
a301 3
><I
>*b</I
></TT
d304 1
a304 1
><TT
d306 1
a306 1
>lwres_lwpacket_parseheader()</TT
d309 1
a309 1
buffer <TT
d311 1
a311 3
><I
>*b</I
></TT
d313 1
a313 1
<TT
d315 1
a315 3
><I
>*pkt</I
></TT
d317 1
a317 1
<TT
d319 1
a319 3
><I
>b</I
></TT
d335 1
a335 1
<TT
d337 1
a337 1
>lwres_lwpacket_renderheader()</TT
d339 1
a339 1
<TT
d341 1
a341 1
>lwres_lwpacket_parseheader()</TT
d347 1
a347 1
space to copy data between the buffer <TT
d349 1
a349 3
><I
>*b</I
></TT
d351 1
a351 1
lightweight resolver packet <TT
d353 1
a353 3
><I
>*pkt</I
></TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d373 1
a373 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_packet</H1
a53 2
><P
></P
d57 2
d125 1
a125 1
><CODE
d127 1
a127 1
>length</CODE
d136 1
a136 1
><CODE
d138 1
a138 1
>version</CODE
d152 1
a152 1
><CODE
d154 1
a154 1
>pktflags</CODE
d166 1
a166 1
><CODE
d168 1
a168 1
>serial</CODE
d179 1
a179 1
><CODE
d181 1
a181 1
>opcode</CODE
d193 1
a193 1
><CODE
d195 1
a195 1
>result</CODE
d206 1
a206 1
><CODE
d208 1
a208 1
>recvlength</CODE
d218 1
a218 1
><CODE
d220 1
a220 1
>authtype</CODE
d230 1
a230 1
><CODE
d232 1
a232 1
>authlen</CODE
d250 1
a250 1
><CODE
d252 1
a252 1
>NOOP</CODE
d260 1
a260 1
><CODE
d262 1
a262 1
>GETADDRSBYNAME</CODE
d270 1
a270 1
><CODE
d272 1
a272 1
>GETNAMEBYADDR</CODE
d283 1
a283 1
><CODE
d285 1
a285 1
>lwres_lwpacket_renderheader()</CODE
d291 1
a291 1
> <VAR
d293 3
a295 1
>*pkt</VAR
d298 1
a298 1
<VAR
d300 3
a302 1
>*b</VAR
d305 1
a305 1
><CODE
d307 1
a307 1
>lwres_lwpacket_parseheader()</CODE
d310 1
a310 1
buffer <VAR
d312 3
a314 1
>*b</VAR
d316 1
a316 1
<VAR
d318 3
a320 1
>*pkt</VAR
d322 1
a322 1
<VAR
d324 3
a326 1
>b</VAR
d342 1
a342 1
<CODE
d344 1
a344 1
>lwres_lwpacket_renderheader()</CODE
d346 1
a346 1
<CODE
d348 1
a348 1
>lwres_lwpacket_parseheader()</CODE
d354 1
a354 1
space to copy data between the buffer <VAR
d356 3
a358 1
>*b</VAR
d360 1
a360 1
lightweight resolver packet <VAR
d362 3
a364 1
>*pkt</VAR
d373 1
a373 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 81
a97 54
<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_packet</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_lwpacket_renderheader, lwres_lwpacket_parseheader &#8212; lightweight resolver packet handling functions</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwpacket.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_lwpacket_renderheader</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_lwpacket_parseheader</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525865"></a><h2>DESCRIPTION</h2>
<p>
These functions rely on a
<span class="type">struct lwres_lwpacket</span>
d99 4
a102 1
<code class="filename">lwres/lwpacket.h</code>.
d104 3
a106 3
</p>
<pre class="programlisting">
typedef struct lwres_lwpacket lwres_lwpacket_t;
d118 17
a134 11
};
</pre>
<p>
</p>
<p>
The elements of this structure are:
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">length</code></span></dt>
<dd><p>
the overall packet length, including the entire packet header.
d136 14
a149 6
calls.
</p></dd>
<dt><span class="term"><code class="constant">version</code></span></dt>
<dd><p>
the header format. There is currently only one format,
<span class="type">LWRES_LWPACKETVERSION_0</span>.
d152 10
a161 5
calls.
</p></dd>
<dt><span class="term"><code class="constant">pktflags</code></span></dt>
<dd><p>
library-defined flags for this packet: for instance whether the packet
d166 10
a175 5
lwres_gabn_*() and lwres_gnba_*() calls.
</p></dd>
<dt><span class="term"><code class="constant">serial</code></span></dt>
<dd><p>
is set by the requestor and is returned in all replies. If two or more
d179 10
a188 5
This field must be set by the application.
</p></dd>
<dt><span class="term"><code class="constant">opcode</code></span></dt>
<dd><p>
indicates the operation.
d193 10
a202 5
calls.
</p></dd>
<dt><span class="term"><code class="constant">result</code></span></dt>
<dd><p>
is only valid for replies.
d206 10
a215 5
calls.
</p></dd>
<dt><span class="term"><code class="constant">recvlength</code></span></dt>
<dd><p>
is the maximum buffer size that the receiver can handle on requests
d218 10
a227 5
This field is supplied by the application.
</p></dd>
<dt><span class="term"><code class="constant">authtype</code></span></dt>
<dd><p>
defines the packet level authentication that is used.
d230 60
a289 34
Currently these are not used and must be zero.
</p></dd>
<dt><span class="term"><code class="constant">authlen</code></span></dt>
<dd><p>
gives the length of the authentication data.
Since packet authentication is currently not used, this must be zero.
</p></dd>
</dl></div>
<p>
</p>
<p>
The following opcodes are currently defined:
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">NOOP</code></span></dt>
<dd><p>
Success is always returned and the packet contents are echoed.
The lwres_noop_*() functions should be used for this type.
</p></dd>
<dt><span class="term"><code class="constant">GETADDRSBYNAME</code></span></dt>
<dd><p>
returns all known addresses for a given name.
The lwres_gabn_*() functions should be used for this type.
</p></dd>
<dt><span class="term"><code class="constant">GETNAMEBYADDR</code></span></dt>
<dd><p>
return the hostname for the given address.
The lwres_gnba_*() functions should be used for this type.
</p></dd>
</dl></div>
<p>
</p>
<p>
<code class="function">lwres_lwpacket_renderheader()</code> transfers the
d291 7
a297 1
<span class="type">lwres_lwpacket_t</span> <em class="parameter"><code>*pkt</code></em> in network
d299 9
a307 4
<em class="parameter"><code>*b</code></em>.
</p>
<p>
<code class="function">lwres_lwpacket_parseheader()</code> performs the
d309 54
a362 19
buffer <em class="parameter"><code>*b</code></em> to resolver packet
<em class="parameter"><code>*pkt</code></em>.  The contents of the buffer
<em class="parameter"><code>b</code></em> should correspond to a
<span class="type">lwres_lwpacket_t</span>.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526068"></a><h2>RETURN VALUES</h2>
<p> Successful calls to
<code class="function">lwres_lwpacket_renderheader()</code> and
<code class="function">lwres_lwpacket_parseheader()</code> return
<span class="errorcode">LWRES_R_SUCCESS</span>.  If there is insufficient
space to copy data between the buffer <em class="parameter"><code>*b</code></em> and
lightweight resolver packet <em class="parameter"><code>*pkt</code></em> both functions
return <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_packet.html,v 1.8.2.1.4.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a44 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a59 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d67 1
a67 1
<a name="id2549430"></a><h2>DESCRIPTION</h2>
d205 1
a205 1
<a name="id2549769"></a><h2>RETURN VALUES</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_packet.html,v 1.9.18.17 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d49 1
a49 1
<td>lwres_lwpacket_t * </td>
d51 1
a51 1
<var class="pdparam">pkt</var><code>)</code>;</td>
d59 7
a65 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d69 1
a69 1
<td>lwres_lwpacket_t * </td>
d71 1
a71 1
<var class="pdparam">pkt</var><code>)</code>;</td>
d77 1
a77 1
<a name="id2543389"></a><h2>DESCRIPTION</h2>
d79 6
a84 5
      These functions rely on a
      <span class="type">struct lwres_lwpacket</span>
      which is defined in
      <code class="filename">lwres/lwpacket.h</code>.
    </p>
d87 1
a87 4
      </pre>
<p>
    </p>
<pre class="programlisting">
d101 1
a101 1
    </p>
d103 2
a104 2
      The elements of this structure are:
      </p>
d108 4
a111 4
              the overall packet length, including the entire packet header.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
d114 2
a115 2
              the header format. There is currently only one format,
              <span class="type">LWRES_LWPACKETVERSION_0</span>.
d117 3
a119 3
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
d122 7
a128 11
              library-defined flags for this packet: for instance whether the
              packet
              is a request or a reply. Flag values can be set, but not defined
              by
              the caller.
              This field is filled in by the application wit the exception of
              the
              LWRES_LWPACKETFLAG_RESPONSE bit, which is set by the library in
              the
              lwres_gabn_*() and lwres_gnba_*() calls.
            </p></dd>
d131 6
a136 9
              is set by the requestor and is returned in all replies. If two
              or more
              packets from the same source have the same serial number and are
              from
              the same source, they are assumed to be duplicates and the
              latter ones
              may be dropped.
              This field must be set by the application.
            </p></dd>
d139 7
a145 8
              indicates the operation.
              Opcodes between 0x00000000 and 0x03ffffff are
              reserved for use by the lightweight resolver library. Opcodes
              between
              0x04000000 and 0xffffffff are application defined.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
d148 6
a153 8
              is only valid for replies.
              Results between 0x04000000 and 0xffffffff are application
              defined.
              Results between 0x00000000 and 0x03ffffff are reserved for
              library use.
              This field is filled in by the lwres_gabn_*() and lwres_gnba_*()
              calls.
            </p></dd>
d156 5
a160 7
              is the maximum buffer size that the receiver can handle on
              requests
              and the size of the buffer needed to satisfy a request when the
              buffer
              is too large for replies.
              This field is supplied by the application.
            </p></dd>
d163 5
a167 7
              defines the packet level authentication that is used.
              Authorisation types between 0x1000 and 0xffff are application
              defined
              and types between 0x0000 and 0x0fff are reserved for library
              use.
              Currently these are not used and must be zero.
            </p></dd>
d170 3
a172 4
              gives the length of the authentication data.
              Since packet authentication is currently not used, this must be
              zero.
            </p></dd>
d175 1
a175 1
    </p>
d177 2
a178 2
      The following opcodes are currently defined:
      </p>
d182 3
a184 3
              Success is always returned and the packet contents are echoed.
              The lwres_noop_*() functions should be used for this type.
            </p></dd>
d187 3
a189 3
              returns all known addresses for a given name.
              The lwres_gabn_*() functions should be used for this type.
            </p></dd>
d192 3
a194 3
              return the hostname for the given address.
              The lwres_gnba_*() functions should be used for this type.
            </p></dd>
d197 16
a212 14
    </p>
<p><code class="function">lwres_lwpacket_renderheader()</code>
      transfers the contents of lightweight resolver packet structure
      <span class="type">lwres_lwpacket_t</span> <em class="parameter"><code>*pkt</code></em> in
      network byte order to the lightweight resolver buffer,
      <em class="parameter"><code>*b</code></em>.
    </p>
<p><code class="function">lwres_lwpacket_parseheader()</code>
      performs the converse operation.  It transfers data in network
      byte order from buffer <em class="parameter"><code>*b</code></em> to resolver
      packet <em class="parameter"><code>*pkt</code></em>.  The contents of the buffer
      <em class="parameter"><code>b</code></em> should correspond to a
      <span class="type">lwres_lwpacket_t</span>.
    </p>
d215 9
a223 11
<a name="id2543706"></a><h2>RETURN VALUES</h2>
<p>
      Successful calls to
      <code class="function">lwres_lwpacket_renderheader()</code> and
      <code class="function">lwres_lwpacket_parseheader()</code> return
      <span class="errorcode">LWRES_R_SUCCESS</span>.  If there is insufficient
      space to copy data between the buffer <em class="parameter"><code>*b</code></em> and
      lightweight resolver packet <em class="parameter"><code>*pkt</code></em> both
      functions
      return <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>.
    </p>
@


