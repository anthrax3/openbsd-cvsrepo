head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.5
	OPENBSD_6_1:1.1.1.5.0.40
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.36
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.32
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.34
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.26
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.30
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.28
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.24
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.22
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.20
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.18
	OPENBSD_5_0:1.1.1.5.0.16
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.14
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.12
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.8
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.10
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.6
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.4
	OPENBSD_4_4_BASE:1.1.1.5
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.2
	OPENBSD_4_3_BASE:1.1.1.5
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.1.1.4.0.4
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.2
	OPENBSD_4_1_BASE:1.1.1.4
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.05;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.32;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.25;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"
.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.TH "LWRES_GETADDRINFO" "3" "Jun 30, 2000" "BIND9" ""
.SH NAME
lwres_getaddrinfo, lwres_freeaddrinfo \- socket address structure to host and service name
.SH SYNOPSIS
\fB#include <lwres/netdb.h>
.sp
.na
int
lwres_getaddrinfo(const char *hostname, const char *servname, const struct addrinfo *hints, struct addrinfo **res);
.ad
.sp
.na
void
lwres_freeaddrinfo(struct addrinfo *ai);
.ad
\fR
.PP
If the operating system does not provide a
\fBstruct addrinfo\fR,
the following structure is used:
.sp
.nf
struct  addrinfo {
        int             ai_flags;       /* AI_PASSIVE, AI_CANONNAME */
        int             ai_family;      /* PF_xxx */
        int             ai_socktype;    /* SOCK_xxx */
        int             ai_protocol;    /* 0 or IPPROTO_xxx for IPv4 and IPv6 */
        size_t          ai_addrlen;     /* length of ai_addr */
        char            *ai_canonname;  /* canonical name for hostname */
        struct sockaddr *ai_addr;       /* binary address */
        struct addrinfo *ai_next;       /* next structure in linked list */
};
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBlwres_getaddrinfo()\fR
is used to get a list of IP addresses and port numbers for host
\fIhostname\fR
and service
\fIservname\fR.
The function is the lightweight resolver's implementation of
\fBgetaddrinfo()\fR
as defined in RFC2133.
\fIhostname\fR
and
\fIservname\fR
are pointers to null-terminated
strings or
\fBNULL\fR.
\fIhostname\fR
is either a host name or a numeric host address string: a dotted decimal
IPv4 address or an IPv6 address.
\fIservname\fR
is either a decimal port number or a service name as listed in
\fI/etc/services\fR.
.PP
\fIhints\fR
is an optional pointer to a
\fBstruct addrinfo\fR.
This structure can be used to provide hints concerning the type of socket
that the caller supports or wishes to use.
The caller can supply the following structure elements in
\fI*hints\fR:
.TP
\fBai_family\fR
The protocol family that should be used.
When
ai_family
is set to
\fBPF_UNSPEC\fR,
it means the caller will accept any protocol family supported by the
operating system.
.TP
\fBai_socktype\fR
denotes the type of socket \(em
\fBSOCK_STREAM\fR,
\fBSOCK_DGRAM\fR
or
\fBSOCK_RAW\fR
\(em that is wanted.
When
ai_socktype
is zero the caller will accept any socket type.
.TP
\fBai_protocol\fR
indicates which transport protocol is wanted: IPPROTO_UDP or 
IPPROTO_TCP.
If
ai_protocol
is zero the caller will accept any protocol.
.TP
\fBai_flags\fR
Flag bits.
If the
\fBAI_CANONNAME\fR
bit is set, a successful call to
\fBlwres_getaddrinfo()\fR
will return a a null-terminated string containing the canonical name
of the specified hostname in
ai_canonname
of the first
\fBaddrinfo\fR
structure returned.
Setting the
\fBAI_PASSIVE\fR
bit indicates that the returned socket address structure is intended
for used in a call to
\fBbind\fR(2).
In this case, if the hostname argument is a
\fBNULL\fR
pointer, then the IP address portion of the socket
address structure will be set to
\fBINADDR_ANY\fR
for an IPv4 address or
\fBIN6ADDR_ANY_INIT\fR
for an IPv6 address.

When
ai_flags
does not set the
\fBAI_PASSIVE\fR
bit, the returned socket address structure will be ready
for use in a call to
\fBconnect\fR(2)
for a connection-oriented protocol or
\fBconnect\fR(2),
\fBsendto\fR(2),
or
\fBsendmsg\fR(2)
if a connectionless protocol was chosen.
The IP address portion of the socket address structure will be
set to the loopback address if
\fIhostname\fR
is a
\fBNULL\fR
pointer and
\fBAI_PASSIVE\fR
is not set in
ai_flags.

If
ai_flags
is set to
\fBAI_NUMERICHOST\fR
it indicates that
\fIhostname\fR
should be treated as a numeric string defining an IPv4 or IPv6 address
and no name resolution should be attempted.
.PP
All other elements of the \fBstruct addrinfo\fR passed
via \fIhints\fR must be zero.
.PP
A \fIhints\fR of \fBNULL\fR is treated as if
the caller provided a \fBstruct addrinfo\fR initialized to zero
with ai_familyset to
PF_UNSPEC.
.PP
After a successful call to
\fBlwres_getaddrinfo()\fR,
\fI*res\fR
is a pointer to a linked list of one or more
\fBaddrinfo\fR
structures.
Each
\fBstruct addrinfo\fR
in this list cn be processed by following
the
ai_next
pointer, until a
\fBNULL\fR
pointer is encountered.
The three members
ai_family,
ai_socktype,
and
ai_protocol
in each
returned
\fBaddrinfo\fR
structure contain the corresponding arguments for a call to
\fBsocket\fR(2).
For each
\fBaddrinfo\fR
structure in the list, the
ai_addr
member points to a filled-in socket address structure of length
ai_addrlen.
.PP
All of the information returned by
\fBlwres_getaddrinfo()\fR
is dynamically allocated: the addrinfo structures, and the socket
address structures and canonical host name strings pointed to by the
addrinfostructures.
Memory allocated for the dynamically allocated structures created by
a successful call to
\fBlwres_getaddrinfo()\fR
is released by
\fBlwres_freeaddrinfo()\fR.
\fIai\fR
is a pointer to a
\fBstruct addrinfo\fR
created by a call to
\fBlwres_getaddrinfo()\fR.
.SH "RETURN VALUES"
.PP
\fBlwres_getaddrinfo()\fR
returns zero on success or one of the error codes listed in
\fBgai_strerror\fR(3)
if an error occurs.
If both
\fIhostname\fR
and
\fIservname\fR
are
\fBNULL\fR
\fBlwres_getaddrinfo()\fR
returns
EAI_NONAME.
.SH "SEE ALSO"
.PP
\fBlwres\fR(3),
\fBlwres_getaddrinfo\fR(3),
\fBlwres_freeaddrinfo\fR(3),
\fBlwres_gai_strerror\fR(3),
\fBRFC2133\fR,
\fBgetservbyname\fR(3),
\fBbind\fR(2),
\fBconnect\fR(2),
\fBsendto\fR(2),
\fBsendmsg\fR(2),
\fBsocket\fR(2).
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d1 1
a1 1
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 9
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $ISC: lwres_getaddrinfo.3,v 1.16.2.1.8.2 2004/03/06 07:41:43 marka Exp $
d115 1
a115 1
will return a null-terminated string containing the canonical name
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 3
a3 3
.\" Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
.\" 
d7 1
a7 1
.\" 
d10 1
a10 1
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d16 1
a16 1
.\" $ISC: lwres_getaddrinfo.3,v 1.16.2.1.8.6 2005/10/13 02:33:53 marka Exp $
d18 2
a19 12
.hy 0
.ad l
.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "LWRES_GETADDRINFO" "3" "Jun 30, 2000" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
d21 13
a33 8
.SH "SYNOPSIS"
.nf
#include <lwres/netdb.h>
.fi
.HP 22
\fBint\ \fBlwres_getaddrinfo\fR\fR\fB(\fR\fBconst\ char\ *hostname\fR\fB, \fR\fBconst\ char\ *servname\fR\fB, \fR\fBconst\ struct\ addrinfo\ *hints\fR\fB, \fR\fBstruct\ addrinfo\ **res\fR\fB);\fR
.HP 24
\fBvoid\ \fBlwres_freeaddrinfo\fR\fR\fB(\fR\fBstruct\ addrinfo\ *ai\fR\fB);\fR
d36 2
a37 1
\fBstruct addrinfo\fR, the following structure is used:
d50 1
a51 1
.sp
d58 2
a59 1
\fIservname\fR. The function is the lightweight resolver's implementation of
d65 2
a66 1
are pointers to null\-terminated strings or
d69 2
a70 1
is either a host name or a numeric host address string: a dotted decimal IPv4 address or an IPv6 address.
d77 4
a80 1
\fBstruct addrinfo\fR. This structure can be used to provide hints concerning the type of socket that the caller supports or wishes to use. The caller can supply the following structure elements in
d84 3
a86 2
The protocol family that should be used. When
\fBai_family\fR
d88 3
a90 1
\fBPF_UNSPEC\fR, it means the caller will accept any protocol family supported by the operating system.
d98 3
a100 2
\(em that is wanted. When
\fBai_socktype\fR
d104 4
a107 2
indicates which transport protocol is wanted: IPPROTO_UDP or IPPROTO_TCP. If
\fBai_protocol\fR
d111 2
a112 1
Flag bits. If the
d116 3
a118 2
will return a null\-terminated string containing the canonical name of the specified hostname in
\fBai_canonname\fR
d121 2
a122 1
structure returned. Setting the
d124 4
a127 2
bit indicates that the returned socket address structure is intended for used in a call to
\fBbind\fR(2). In this case, if the hostname argument is a
d129 2
a130 1
pointer, then the IP address portion of the socket address structure will be set to
d135 1
a135 1
.sp
d137 1
a137 1
\fBai_flags\fR
d140 4
a143 3
bit, the returned socket address structure will be ready for use in a call to
\fBconnect\fR(2 )
for a connection\-oriented protocol or
d145 6
a150 3
\fBsendto\fR(2), or
\fBsendmsg\fR(2 )
if a connectionless protocol was chosen. The IP address portion of the socket address structure will be set to the loopback address if
d157 2
a158 2
\fBai_flags\fR.
.sp
d160 1
a160 1
\fBai_flags\fR
d165 2
a166 1
should be treated as a numeric string defining an IPv4 or IPv6 address and no name resolution should be attempted.
d168 2
a169 5
All other elements of the
\fBstruct addrinfo\fR
passed via
\fIhints\fR
must be zero.
d171 4
a174 9
A
\fIhints\fR
of
\fBNULL\fR
is treated as if the caller provided a
\fBstruct addrinfo\fR
initialized to zero with
\fBai_family\fRset to
\fBPF_UNSPEC\fR.
d181 2
a182 1
structures. Each
d184 3
a186 2
in this list cn be processed by following the
\fBai_next\fR
d189 8
a196 5
pointer is encountered. The three members
\fBai_family\fR,
\fBai_socktype\fR, and
\fBai_protocol\fR
in each returned
d199 2
a200 1
\fBsocket\fR(2). For each
d203 3
a205 3
\fBai_addr\fR
member points to a filled\-in socket address structure of length
\fBai_addrlen\fR.
d209 5
a213 2
is dynamically allocated: the addrinfo structures, and the socket address structures and canonical host name strings pointed to by the
\fBaddrinfo\fRstructures. Memory allocated for the dynamically allocated structures created by a successful call to
d226 3
a228 2
\fBgai_strerror\fR(3 )
if an error occurs. If both
d233 2
a234 1
\fBNULL\fR\fBlwres_getaddrinfo()\fR
d236 1
a236 1
\fBEAI_NONAME\fR.
d243 1
a243 1
\fBRFC2133\fR(),
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d16 1
a16 1
.\" $ISC: lwres_getaddrinfo.3,v 1.16.2.1.8.7 2006/06/29 13:02:31 marka Exp $
d20 4
a23 7
.\"     Title: lwres_getaddrinfo
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
.\"      Date: Jun 30, 2000
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
d36 1
a36 1
.BI "int lwres_getaddrinfo(const\ char\ *hostname, const\ char\ *servname, const\ struct\ addrinfo\ *hints, struct\ addrinfo\ **res);"
d38 1
a38 1
.BI "void lwres_freeaddrinfo(struct\ addrinfo\ *ai);"
a42 1
.RS 3n
a54 1
.RE
d80 1
a80 1
.TP 3n
d86 1
a86 1
.TP 3n
d96 1
a96 1
.TP 3n
d101 1
a101 1
.TP 3n
d212 1
a212 2
\fBNULL\fR
\fBlwres_getaddrinfo()\fR
a227 2
.SH "COPYRIGHT"
Copyright \(co 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d1 1
a1 1
.\" Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d16 1
a16 1
.\" $ISC: lwres_getaddrinfo.3,v 1.20.18.11 2007/01/30 00:23:45 marka Exp $
d22 1
a22 1
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
d39 1
a39 1
.BI "int lwres_getaddrinfo(const\ char\ *" "hostname" ", const\ char\ *" "servname" ", const\ struct\ addrinfo\ *" "hints" ", struct\ addrinfo\ **" "res" ");"
d41 1
a41 1
.BI "void lwres_freeaddrinfo(struct\ addrinfo\ *" "ai" ");"
d45 2
a46 2
.PP
.RS 4
d85 1
a85 1
.PP
a86 1
.RS 4
d91 1
a91 2
.RE
.PP
a92 1
.RS 4
d101 1
a101 2
.RE
.PP
a102 1
.RS 4
d106 1
a106 2
.RE
.PP
a107 1
.RS 4
d132 1
a132 1
\fBconnect\fR(2)
d136 1
a136 1
\fBsendmsg\fR(2)
a152 1
.RE
d211 1
a211 1
\fBgai_strerror\fR(3)
d235 1
a235 4
Copyright \(co 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2000, 2001, 2003 Internet Software Consortium.
.br
@


