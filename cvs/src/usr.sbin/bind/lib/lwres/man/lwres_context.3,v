head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.38
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@.\" @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.14.14.08;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.04;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.31;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.25;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@.\" Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
.\" 
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\" 
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $ISC: lwres_context.3,v 1.17.18.11 2007/01/30 00:23:45 marka Exp $
.\"
.hy 0
.ad l
.\"     Title: lwres_context
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
.\"      Date: Jun 30, 2000
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
.TH "LWRES_CONTEXT" "3" "Jun 30, 2000" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
lwres_context_create, lwres_context_destroy, lwres_context_nextserial, lwres_context_initserial, lwres_context_freemem, lwres_context_allocmem, lwres_context_sendrecv \- lightweight resolver context management
.SH "SYNOPSIS"
.nf
#include <lwres/lwres.h>
.fi
.HP 36
.BI "lwres_result_t lwres_context_create(lwres_context_t\ **" "contextp" ", void\ *" "arg" ", lwres_malloc_t\ " "malloc_function" ", lwres_free_t\ " "free_function" ");"
.HP 37
.BI "lwres_result_t lwres_context_destroy(lwres_context_t\ **" "contextp" ");"
.HP 30
.BI "void lwres_context_initserial(lwres_context_t\ *" "ctx" ", lwres_uint32_t\ " "serial" ");"
.HP 40
.BI "lwres_uint32_t lwres_context_nextserial(lwres_context_t\ *" "ctx" ");"
.HP 27
.BI "void lwres_context_freemem(lwres_context_t\ *" "ctx" ", void\ *" "mem" ", size_t\ " "len" ");"
.HP 28
.BI "void lwres_context_allocmem(lwres_context_t\ *" "ctx" ", size_t\ " "len" ");"
.HP 30
.BI "void * lwres_context_sendrecv(lwres_context_t\ *" "ctx" ", void\ *" "sendbase" ", int\ " "sendlen" ", void\ *" "recvbase" ", int\ " "recvlen" ", int\ *" "recvd_len" ");"
.SH "DESCRIPTION"
.PP
\fBlwres_context_create()\fR
creates a
\fBlwres_context_t\fR
structure for use in lightweight resolver operations. It holds a socket and other data needed for communicating with a resolver daemon. The new
\fBlwres_context_t\fR
is returned through
\fIcontextp\fR, a pointer to a
\fBlwres_context_t\fR
pointer. This
\fBlwres_context_t\fR
pointer must initially be NULL, and is modified to point to the newly created
\fBlwres_context_t\fR.
.PP
When the lightweight resolver needs to perform dynamic memory allocation, it will call
\fImalloc_function\fR
to allocate memory and
\fIfree_function\fR
to free it. If
\fImalloc_function\fR
and
\fIfree_function\fR
are NULL, memory is allocated using
\fBmalloc\fR(3). and
\fBfree\fR(3). It is not permitted to have a NULL
\fImalloc_function\fR
and a non\-NULL
\fIfree_function\fR
or vice versa.
\fIarg\fR
is passed as the first parameter to the memory allocation functions. If
\fImalloc_function\fR
and
\fIfree_function\fR
are NULL,
\fIarg\fR
is unused and should be passed as NULL.
.PP
Once memory for the structure has been allocated, it is initialized using
\fBlwres_conf_init\fR(3)
and returned via
\fI*contextp\fR.
.PP
\fBlwres_context_destroy()\fR
destroys a
\fBlwres_context_t\fR, closing its socket.
\fIcontextp\fR
is a pointer to a pointer to the context that is to be destroyed. The pointer will be set to NULL when the context has been destroyed.
.PP
The context holds a serial number that is used to identify resolver request packets and associate responses with the corresponding requests. This serial number is controlled using
\fBlwres_context_initserial()\fR
and
\fBlwres_context_nextserial()\fR.
\fBlwres_context_initserial()\fR
sets the serial number for context
\fI*ctx\fR
to
\fIserial\fR.
\fBlwres_context_nextserial()\fR
increments the serial number and returns the previous value.
.PP
Memory for a lightweight resolver context is allocated and freed using
\fBlwres_context_allocmem()\fR
and
\fBlwres_context_freemem()\fR. These use whatever allocations were defined when the context was created with
\fBlwres_context_create()\fR.
\fBlwres_context_allocmem()\fR
allocates
\fIlen\fR
bytes of memory and if successful returns a pointer to the allocated storage.
\fBlwres_context_freemem()\fR
frees
\fIlen\fR
bytes of space starting at location
\fImem\fR.
.PP
\fBlwres_context_sendrecv()\fR
performs I/O for the context
\fIctx\fR. Data are read and written from the context's socket. It writes data from
\fIsendbase\fR
\(em typically a lightweight resolver query packet \(em and waits for a reply which is copied to the receive buffer at
\fIrecvbase\fR. The number of bytes that were written to this receive buffer is returned in
\fI*recvd_len\fR.
.SH "RETURN VALUES"
.PP
\fBlwres_context_create()\fR
returns
\fBLWRES_R_NOMEMORY\fR
if memory for the
\fBstruct lwres_context\fR
could not be allocated,
\fBLWRES_R_SUCCESS\fR
otherwise.
.PP
Successful calls to the memory allocator
\fBlwres_context_allocmem()\fR
return a pointer to the start of the allocated space. It returns NULL if memory could not be allocated.
.PP
\fBLWRES_R_SUCCESS\fR
is returned when
\fBlwres_context_sendrecv()\fR
completes successfully.
\fBLWRES_R_IOERROR\fR
is returned if an I/O error occurs and
\fBLWRES_R_TIMEOUT\fR
is returned if
\fBlwres_context_sendrecv()\fR
times out waiting for a response.
.SH "SEE ALSO"
.PP
\fBlwres_conf_init\fR(3),
\fBmalloc\fR(3),
\fBfree\fR(3).
.SH "COPYRIGHT"
Copyright \(co 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2000, 2001, 2003 Internet Software Consortium.
.br
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d1 1
a1 1
.\" Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.13.2.2.2.7 2006/06/29 13:02:31 marka Exp $
d22 1
a22 1
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
d39 1
a39 1
.BI "lwres_result_t lwres_context_create(lwres_context_t\ **contextp, void\ *arg, lwres_malloc_t\ malloc_function, lwres_free_t\ free_function);"
d41 1
a41 1
.BI "lwres_result_t lwres_context_destroy(lwres_context_t\ **contextp);"
d43 1
a43 1
.BI "void lwres_context_initserial(lwres_context_t\ *ctx, lwres_uint32_t\ serial);"
d45 1
a45 1
.BI "lwres_uint32_t lwres_context_nextserial(lwres_context_t\ *ctx);"
d47 1
a47 1
.BI "void lwres_context_freemem(lwres_context_t\ *ctx, void\ *mem, size_t\ len);"
d49 1
a49 1
.BI "void lwres_context_allocmem(lwres_context_t\ *ctx, size_t\ len);"
d51 1
a51 1
.BI "void * lwres_context_sendrecv(lwres_context_t\ *ctx, void\ *sendbase, int\ sendlen, void\ *recvbase, int\ recvlen, int\ *recvd_len);"
d75 2
a76 1
are NULL, memory is allocated using .Xr malloc 3 and
d165 1
a165 1
\fBfree\fR(3 ).
d167 4
a170 1
Copyright \(co 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
@


1.4
log
@resolve conflicts
@
text
@d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.13.2.2.2.6 2005/10/13 02:33:52 marka Exp $
d20 7
a26 4
.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
d39 1
a39 1
\fBlwres_result_t\ \fBlwres_context_create\fR\fR\fB(\fR\fBlwres_context_t\ **contextp\fR\fB, \fR\fBvoid\ *arg\fR\fB, \fR\fBlwres_malloc_t\ malloc_function\fR\fB, \fR\fBlwres_free_t\ free_function\fR\fB);\fR
d41 1
a41 1
\fBlwres_result_t\ \fBlwres_context_destroy\fR\fR\fB(\fR\fBlwres_context_t\ **contextp\fR\fB);\fR
d43 1
a43 1
\fBvoid\ \fBlwres_context_initserial\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_uint32_t\ serial\fR\fB);\fR
d45 1
a45 1
\fBlwres_uint32_t\ \fBlwres_context_nextserial\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB);\fR
d47 1
a47 1
\fBvoid\ \fBlwres_context_freemem\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBvoid\ *mem\fR\fB, \fR\fBsize_t\ len\fR\fB);\fR
d49 1
a49 1
\fBvoid\ \fBlwres_context_allocmem\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBsize_t\ len\fR\fB);\fR
d51 1
a51 1
\fBvoid\ *\ \fBlwres_context_sendrecv\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBvoid\ *sendbase\fR\fB, \fR\fBint\ sendlen\fR\fB, \fR\fBvoid\ *recvbase\fR\fB, \fR\fBint\ recvlen\fR\fB, \fR\fBint\ *recvd_len\fR\fB);\fR
d165 2
@


1.3
log
@resolve conflicts
@
text
@d1 3
a3 3
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
d7 1
a7 1
.\"
d10 1
a10 1
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.13.2.2.2.2 2004/03/08 09:05:12 marka Exp $
d18 12
a29 2
.TH "LWRES_CONTEXT" "3" "Jun 30, 2000" "BIND9" ""
.SH NAME
d31 18
a48 38
.SH SYNOPSIS
\fB#include <lwres/lwres.h>
.sp
.na
lwres_result_t
lwres_context_create(lwres_context_t **contextp, void *arg, lwres_malloc_t malloc_function, lwres_free_t free_function);
.ad
.sp
.na
lwres_result_t
lwres_context_destroy(lwres_context_t **contextp);
.ad
.sp
.na
void
lwres_context_initserial(lwres_context_t *ctx, lwres_uint32_t serial);
.ad
.sp
.na
lwres_uint32_t
lwres_context_nextserial(lwres_context_t *ctx);
.ad
.sp
.na
void
lwres_context_freemem(lwres_context_t *ctx, void *mem, size_t len);
.ad
.sp
.na
void
lwres_context_allocmem(lwres_context_t *ctx, size_t len);
.ad
.sp
.na
void *
lwres_context_sendrecv(lwres_context_t *ctx, void *sendbase, int sendlen, void *recvbase, int recvlen, int *recvd_len);
.ad
\fR
d54 1
a54 4
structure for use in lightweight resolver operations.
It holds a socket and other data needed for communicating
with a resolver daemon.
The new
d57 1
a57 2
\fIcontextp\fR,
a pointer to a
d59 1
a59 1
pointer. This 
d61 1
a61 2
pointer must initially be NULL, and is modified 
to point to the newly created
d64 1
a64 2
When the lightweight resolver needs to perform dynamic memory
allocation, it will call
d68 1
a68 1
to free it. If 
d72 2
a73 5
are NULL, memory is allocated using
\&.Xr malloc 3
and
\fBfree\fR(3).
It is not permitted to have a NULL
d75 1
a75 1
and a non-NULL
d79 1
a79 3
is passed as the first parameter to the memory
allocation functions. 
If
d87 1
a87 2
Once memory for the structure has been allocated,
it is initialized using
d93 2
a94 3
destroys a 
\fBlwres_context_t\fR,
closing its socket.
d96 1
a96 2
is a pointer to a pointer to the context that is to be destroyed.
The pointer will be set to NULL when the context has been destroyed.
d98 1
a98 3
The context holds a serial number that is used to identify resolver
request packets and associate responses with the corresponding requests.
This serial number is controlled using
d113 1
a113 3
\fBlwres_context_freemem()\fR.
These use whatever allocations were defined when the context was
created with
d118 1
a118 2
bytes of memory and if successful returns a pointer to the allocated
storage.
d127 1
a127 3
\fIctx\fR.
Data are read and written from the context's socket.
It writes data from
d129 2
a130 5
\(em typically a lightweight resolver query packet \(em
and waits for a reply which is copied to the receive buffer at
\fIrecvbase\fR.
The number of bytes that were written to this receive buffer is
returned in
d136 1
a136 1
LWRES_R_NOMEMORY
d139 2
a140 2
could not be allocated, 
LWRES_R_SUCCESS
d145 1
a145 2
return a pointer to the start of the allocated space.
It returns NULL if memory could not be allocated.
d147 1
a147 1
LWRES_R_SUCCESS
d151 1
a151 1
LWRES_R_IOERROR
d153 1
a153 1
LWRES_R_TIMEOUT
d161 1
a161 1
\fBfree\fR(3).
@


1.2
log
@update to BIND v9.2.3. ok todd@@
@
text
@d1 1
a1 1
.\"
d8 9
a16 8
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.1
log
@Initial revision
@
text
@d68 1
a68 1
is returned throught
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d1 1
a1 1
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 9
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $ISC: lwres_context.3,v 1.13.2.2.2.2 2004/03/08 09:05:12 marka Exp $
d68 1
a68 1
is returned through
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 3
a3 3
.\" Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
.\" 
d7 1
a7 1
.\" 
d10 1
a10 1
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.13.2.2.2.6 2005/10/13 02:33:52 marka Exp $
d18 2
a19 12
.hy 0
.ad l
.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "LWRES_CONTEXT" "3" "Jun 30, 2000" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
d21 38
a58 18
.SH "SYNOPSIS"
.nf
#include <lwres/lwres.h>
.fi
.HP 36
\fBlwres_result_t\ \fBlwres_context_create\fR\fR\fB(\fR\fBlwres_context_t\ **contextp\fR\fB, \fR\fBvoid\ *arg\fR\fB, \fR\fBlwres_malloc_t\ malloc_function\fR\fB, \fR\fBlwres_free_t\ free_function\fR\fB);\fR
.HP 37
\fBlwres_result_t\ \fBlwres_context_destroy\fR\fR\fB(\fR\fBlwres_context_t\ **contextp\fR\fB);\fR
.HP 30
\fBvoid\ \fBlwres_context_initserial\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_uint32_t\ serial\fR\fB);\fR
.HP 40
\fBlwres_uint32_t\ \fBlwres_context_nextserial\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB);\fR
.HP 27
\fBvoid\ \fBlwres_context_freemem\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBvoid\ *mem\fR\fB, \fR\fBsize_t\ len\fR\fB);\fR
.HP 28
\fBvoid\ \fBlwres_context_allocmem\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBsize_t\ len\fR\fB);\fR
.HP 30
\fBvoid\ *\ \fBlwres_context_sendrecv\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBvoid\ *sendbase\fR\fB, \fR\fBint\ sendlen\fR\fB, \fR\fBvoid\ *recvbase\fR\fB, \fR\fBint\ recvlen\fR\fB, \fR\fBint\ *recvd_len\fR\fB);\fR
d64 4
a67 1
structure for use in lightweight resolver operations. It holds a socket and other data needed for communicating with a resolver daemon. The new
d70 2
a71 1
\fIcontextp\fR, a pointer to a
d73 1
a73 1
pointer. This
d75 2
a76 1
pointer must initially be NULL, and is modified to point to the newly created
d79 2
a80 1
When the lightweight resolver needs to perform dynamic memory allocation, it will call
d84 1
a84 1
to free it. If
d88 5
a92 2
are NULL, memory is allocated using .Xr malloc 3 and
\fBfree\fR(3). It is not permitted to have a NULL
d94 1
a94 1
and a non\-NULL
d98 3
a100 1
is passed as the first parameter to the memory allocation functions. If
d108 2
a109 1
Once memory for the structure has been allocated, it is initialized using
d115 3
a117 2
destroys a
\fBlwres_context_t\fR, closing its socket.
d119 2
a120 1
is a pointer to a pointer to the context that is to be destroyed. The pointer will be set to NULL when the context has been destroyed.
d122 3
a124 1
The context holds a serial number that is used to identify resolver request packets and associate responses with the corresponding requests. This serial number is controlled using
d139 3
a141 1
\fBlwres_context_freemem()\fR. These use whatever allocations were defined when the context was created with
d146 2
a147 1
bytes of memory and if successful returns a pointer to the allocated storage.
d156 3
a158 1
\fIctx\fR. Data are read and written from the context's socket. It writes data from
d160 5
a164 2
\(em typically a lightweight resolver query packet \(em and waits for a reply which is copied to the receive buffer at
\fIrecvbase\fR. The number of bytes that were written to this receive buffer is returned in
d170 1
a170 1
\fBLWRES_R_NOMEMORY\fR
d173 2
a174 2
could not be allocated,
\fBLWRES_R_SUCCESS\fR
d179 2
a180 1
return a pointer to the start of the allocated space. It returns NULL if memory could not be allocated.
d182 1
a182 1
\fBLWRES_R_SUCCESS\fR
d186 1
a186 1
\fBLWRES_R_IOERROR\fR
d188 1
a188 1
\fBLWRES_R_TIMEOUT\fR
d196 1
a196 1
\fBfree\fR(3 ).
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.13.2.2.2.7 2006/06/29 13:02:31 marka Exp $
d20 4
a23 7
.\"     Title: lwres_context
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
.\"      Date: Jun 30, 2000
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
d36 1
a36 1
.BI "lwres_result_t lwres_context_create(lwres_context_t\ **contextp, void\ *arg, lwres_malloc_t\ malloc_function, lwres_free_t\ free_function);"
d38 1
a38 1
.BI "lwres_result_t lwres_context_destroy(lwres_context_t\ **contextp);"
d40 1
a40 1
.BI "void lwres_context_initserial(lwres_context_t\ *ctx, lwres_uint32_t\ serial);"
d42 1
a42 1
.BI "lwres_uint32_t lwres_context_nextserial(lwres_context_t\ *ctx);"
d44 1
a44 1
.BI "void lwres_context_freemem(lwres_context_t\ *ctx, void\ *mem, size_t\ len);"
d46 1
a46 1
.BI "void lwres_context_allocmem(lwres_context_t\ *ctx, size_t\ len);"
d48 1
a48 1
.BI "void * lwres_context_sendrecv(lwres_context_t\ *ctx, void\ *sendbase, int\ sendlen, void\ *recvbase, int\ recvlen, int\ *recvd_len);"
a161 2
.SH "COPYRIGHT"
Copyright \(co 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d1 1
a1 1
.\" Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d16 1
a16 1
.\" $ISC: lwres_context.3,v 1.17.18.11 2007/01/30 00:23:45 marka Exp $
d22 1
a22 1
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
d39 1
a39 1
.BI "lwres_result_t lwres_context_create(lwres_context_t\ **" "contextp" ", void\ *" "arg" ", lwres_malloc_t\ " "malloc_function" ", lwres_free_t\ " "free_function" ");"
d41 1
a41 1
.BI "lwres_result_t lwres_context_destroy(lwres_context_t\ **" "contextp" ");"
d43 1
a43 1
.BI "void lwres_context_initserial(lwres_context_t\ *" "ctx" ", lwres_uint32_t\ " "serial" ");"
d45 1
a45 1
.BI "lwres_uint32_t lwres_context_nextserial(lwres_context_t\ *" "ctx" ");"
d47 1
a47 1
.BI "void lwres_context_freemem(lwres_context_t\ *" "ctx" ", void\ *" "mem" ", size_t\ " "len" ");"
d49 1
a49 1
.BI "void lwres_context_allocmem(lwres_context_t\ *" "ctx" ", size_t\ " "len" ");"
d51 1
a51 1
.BI "void * lwres_context_sendrecv(lwres_context_t\ *" "ctx" ", void\ *" "sendbase" ", int\ " "sendlen" ", void\ *" "recvbase" ", int\ " "recvlen" ", int\ *" "recvd_len" ");"
d75 1
a75 2
are NULL, memory is allocated using
\fBmalloc\fR(3). and
d164 1
a164 1
\fBfree\fR(3).
d166 1
a166 4
Copyright \(co 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2000, 2001, 2003 Internet Software Consortium.
.br
@


