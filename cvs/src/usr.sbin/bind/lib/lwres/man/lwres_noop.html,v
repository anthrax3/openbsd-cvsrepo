head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.38
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.36;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.08;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.34;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.28;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.59;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_noop.html,v 1.8.18.17 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_noop</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_nooprequest_render, lwres_noopresponse_render, lwres_nooprequest_parse, lwres_noopresponse_parse, lwres_noopresponse_free, lwres_nooprequest_free &#8212; lightweight resolver no-op message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_nooprequest_render</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_nooprequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_noopresponse_render</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_noopresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_nooprequest_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_nooprequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_noopresponse_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_noopresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_noopresponse_free</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_noopresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_nooprequest_free</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_nooprequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543522"></a><h2>DESCRIPTION</h2>
<p>
      These are low-level routines for creating and parsing
      lightweight resolver no-op request and response messages.
    </p>
<p>
      The no-op message is analogous to a <span><strong class="command">ping</strong></span>
      packet:
      a packet is sent to the resolver daemon and is simply echoed back.
      The opcode is intended to allow a client to determine if the server is
      operational or not.
    </p>
<p>
      There are four main functions for the no-op opcode.
      One render function converts a no-op request structure &#8212;
      <span class="type">lwres_nooprequest_t</span> &#8212;
      to the lighweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a no-op request structure.
      Another render function converts the no-op response structure &#8212;
      <span class="type">lwres_noopresponse_t</span>
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a no-op response structure.
    </p>
<p>
      These structures are defined in
      <code class="filename">lwres/lwres.h</code>.

      They are shown below.
    </p>
<pre class="programlisting">
#define LWRES_OPCODE_NOOP       0x00000000U
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint16_t  datalength;
        unsigned char   *data;
} lwres_nooprequest_t;
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint16_t  datalength;
        unsigned char   *data;
} lwres_noopresponse_t;
</pre>
<p>
    </p>
<p>
      Although the structures have different types, they are identical.
      This is because the no-op opcode simply echos whatever data was sent:
      the response is therefore identical to the request.
    </p>
<p><code class="function">lwres_nooprequest_render()</code>
      uses resolver context <em class="parameter"><code>ctx</code></em> to convert
      no-op request structure <em class="parameter"><code>req</code></em> to canonical
      format.  The packet header structure <em class="parameter"><code>pkt</code></em>
      is initialised and transferred to buffer
      <em class="parameter"><code>b</code></em>.  The contents of
      <em class="parameter"><code>*req</code></em> are then appended to the buffer in
      canonical format.
      <code class="function">lwres_noopresponse_render()</code> performs the
      same task, except it converts a no-op response structure
      <span class="type">lwres_noopresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_nooprequest_parse()</code>
      uses context <em class="parameter"><code>ctx</code></em> to convert the contents
      of packet <em class="parameter"><code>pkt</code></em> to a
      <span class="type">lwres_nooprequest_t</span> structure.  Buffer
      <em class="parameter"><code>b</code></em> provides space to be used for storing
      this structure.  When the function succeeds, the resulting
      <span class="type">lwres_nooprequest_t</span> is made available through
      <em class="parameter"><code>*structp</code></em>.
      <code class="function">lwres_noopresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_nooprequest_parse()</code>
      except it yields a <span class="type">lwres_noopresponse_t</span> structure.
    </p>
<p><code class="function">lwres_noopresponse_free()</code>
      and <code class="function">lwres_nooprequest_free()</code> release the
      memory in resolver context <em class="parameter"><code>ctx</code></em> that was
      allocated to the <span class="type">lwres_noopresponse_t</span> or
      <span class="type">lwres_nooprequest_t</span> structures referenced via
      <em class="parameter"><code>structp</code></em>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543672"></a><h2>RETURN VALUES</h2>
<p>
      The no-op opcode functions
      <code class="function">lwres_nooprequest_render()</code>,

      <code class="function">lwres_noopresponse_render()</code>
      <code class="function">lwres_nooprequest_parse()</code>
      and
      <code class="function">lwres_noopresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <em class="parameter"><code>b</code></em>
      is too small to accommodate the packet header or the
      <span class="type">lwres_nooprequest_t</span>
      and
      <span class="type">lwres_noopresponse_t</span>
      structures.
      <code class="function">lwres_nooprequest_parse()</code>
      and
      <code class="function">lwres_noopresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <code class="constant">pktflags</code>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543738"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d40 3
a42 2
<td> </td>
<td>, </td>
d46 3
a48 2
<td> </td>
<td>, </td>
d52 3
a54 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d58 1
a58 1
<td> </td>
d60 1
a60 1
<code>)</code>;</td>
d68 3
a70 2
<td> </td>
<td>, </td>
d74 3
a76 2
<td> </td>
<td>, </td>
d80 3
a82 2
<td> </td>
<td>, </td>
d86 1
a86 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d88 1
a88 1
<code>)</code>;</td>
d96 3
a98 2
<td> </td>
<td>, </td>
d102 3
a104 2
<td> </td>
<td>, </td>
d108 3
a110 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d114 1
a114 1
<td> </td>
d116 1
a116 1
<code>)</code>;</td>
d124 3
a126 2
<td> </td>
<td>, </td>
d130 3
a132 2
<td> </td>
<td>, </td>
d136 3
a138 2
<td> </td>
<td>, </td>
d142 1
a142 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d144 1
a144 1
<code>)</code>;</td>
d152 3
a154 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d158 1
a158 1
<td> </td>
d160 1
a160 1
<code>)</code>;</td>
d168 3
a170 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d174 1
a174 1
<td> </td>
d176 1
a176 1
<code>)</code>;</td>
d182 1
a182 1
<a name="id2549528"></a><h2>DESCRIPTION</h2>
d184 3
a186 3
These are low-level routines for creating and parsing
lightweight resolver no-op request and response messages.
</p>
d188 6
a193 5
The no-op message is analogous to a <span><strong class="command">ping</strong></span> packet: 
a packet is sent to the resolver daemon and is simply echoed back.
The opcode is intended to allow a client to determine if the server is
operational or not.
</p>
d195 12
a206 12
There are four main functions for the no-op opcode.
One render function converts a no-op request structure &#8212;
<span class="type">lwres_nooprequest_t</span> &#8212;
to the lighweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a no-op request structure.
Another render function converts the no-op response structure &#8212;
<span class="type">lwres_noopresponse_t</span>
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a no-op response structure.
</p>
d208 2
a209 2
These structures are defined in
<code class="filename">lwres/lwres.h</code>.
d211 2
a212 2
They are shown below.
</p>
d215 4
a218 1

d223 4
a226 1

d233 1
a233 16
Although the structures have different types, they are identical.
This is because the no-op opcode simply echos whatever data was sent:
the response is therefore identical to the request.
</p>
<p>
<code class="function">lwres_nooprequest_render()</code> uses resolver
context <em class="parameter"><code>ctx</code></em> to convert no-op request structure
<em class="parameter"><code>req</code></em> to canonical format.  The packet header
structure <em class="parameter"><code>pkt</code></em> is initialised and transferred to
buffer <em class="parameter"><code>b</code></em>.  The contents of
<em class="parameter"><code>*req</code></em> are then appended to the buffer in
canonical format.  <code class="function">lwres_noopresponse_render()</code>
performs the same task, except it converts a no-op response structure
<span class="type">lwres_noopresponse_t</span> to the lightweight resolver's
canonical format.
</p>
d235 36
a270 18
<code class="function">lwres_nooprequest_parse()</code> uses context
<em class="parameter"><code>ctx</code></em> to convert the contents of packet
<em class="parameter"><code>pkt</code></em> to a <span class="type">lwres_nooprequest_t</span>
structure.  Buffer <em class="parameter"><code>b</code></em> provides space to be used
for storing this structure.  When the function succeeds, the resulting
<span class="type">lwres_nooprequest_t</span> is made available through
<em class="parameter"><code>*structp</code></em>.
<code class="function">lwres_noopresponse_parse()</code> offers the same
semantics as <code class="function">lwres_nooprequest_parse()</code> except it
yields a <span class="type">lwres_noopresponse_t</span> structure.
</p>
<p>
<code class="function">lwres_noopresponse_free()</code> and
<code class="function">lwres_nooprequest_free()</code> release the memory in
resolver context <em class="parameter"><code>ctx</code></em> that was allocated to the
<span class="type">lwres_noopresponse_t</span> or <span class="type">lwres_nooprequest_t</span>
structures referenced via <em class="parameter"><code>structp</code></em>.
</p>
d273 1
a273 1
<a name="id2549797"></a><h2>RETURN VALUES</h2>
d275 2
a276 2
The no-op opcode functions
<code class="function">lwres_nooprequest_render()</code>,
d278 32
a309 32
<code class="function">lwres_noopresponse_render()</code>
<code class="function">lwres_nooprequest_parse()</code>
and
<code class="function">lwres_noopresponse_parse()</code>
all return
<span class="errorcode">LWRES_R_SUCCESS</span>
on success.
They return
<span class="errorcode">LWRES_R_NOMEMORY</span>
if memory allocation fails.
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
is returned if the available space in the buffer
<em class="parameter"><code>b</code></em>
is too small to accommodate the packet header or the
<span class="type">lwres_nooprequest_t</span>
and
<span class="type">lwres_noopresponse_t</span>
structures.
<code class="function">lwres_nooprequest_parse()</code>
and
<code class="function">lwres_noopresponse_parse()</code>
will return
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
if the buffer is not empty after decoding the received packet.
These functions will return
<span class="errorcode">LWRES_R_FAILURE</span>
if
<code class="constant">pktflags</code>
in the packet header structure
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
d312 3
a314 5
<a name="id2549861"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3
)</span>
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d56 5
d86 5
d116 5
d146 5
d166 5
d186 5
d198 1
a198 1
<a name="id2525963"></a><h2>DESCRIPTION</h2>
d279 1
a279 1
<a name="id2526096"></a><h2>RETURN VALUES</h2>
d318 1
a318 1
<a name="id2526160"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 158
a174 115

<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_noop</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_noop</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_nooprequest_render, lwres_noopresponse_render, lwres_nooprequest_parse, lwres_noopresponse_parse, lwres_noopresponse_free, lwres_nooprequest_free&nbsp;--&nbsp;lightweight resolver no-op message handling</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN16"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN17"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwres.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_nooprequest_render</CODE
>(lwres_context_t *ctx, lwres_nooprequest_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_noopresponse_render</CODE
>(lwres_context_t *ctx, lwres_noopresponse_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_nooprequest_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_nooprequest_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_noopresponse_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_noopresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_noopresponse_free</CODE
>(lwres_context_t *ctx, lwres_noopresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_nooprequest_free</CODE
>(lwres_context_t *ctx, lwres_nooprequest_t **structp);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN57"
></A
><H2
>DESCRIPTION</H2
><P
>These are low-level routines for creating and parsing
lightweight resolver no-op request and response messages.</P
><P
>The no-op message is analogous to a <B
CLASS="COMMAND"
>ping</B
> packet: 
d177 6
a182 8
operational or not.</P
><P
>There are four main functions for the no-op opcode.
One render function converts a no-op request structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_nooprequest_t</SPAN
> &mdash;
d186 2
a187 5
Another render function converts the no-op response structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_noopresponse_t</SPAN
>
d190 5
a194 7
canonical format to a no-op response structure.</P
><P
>These structures are defined in
<TT
CLASS="FILENAME"
>lwres/lwres.h</TT
>.
d197 3
a199 3
<PRE
CLASS="PROGRAMLISTING"
>#define LWRES_OPCODE_NOOP       0x00000000U
d209 3
a211 2
} lwres_noopresponse_t;</PRE
>
d214 10
a223 30
the response is therefore identical to the request.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_nooprequest_render()</CODE
> uses resolver
context <VAR
CLASS="PARAMETER"
>ctx</VAR
> to convert no-op request structure
<VAR
CLASS="PARAMETER"
>req</VAR
> to canonical format.  The packet header
structure <VAR
CLASS="PARAMETER"
>pkt</VAR
> is initialised and transferred to
buffer <VAR
CLASS="PARAMETER"
>b</VAR
>.  The contents of
<VAR
CLASS="PARAMETER"
>*req</VAR
> are then appended to the buffer in
canonical format.  <CODE
CLASS="FUNCTION"
>lwres_noopresponse_render()</CODE
>
d225 8
a232 25
<SPAN
CLASS="TYPE"
>lwres_noopresponse_t</SPAN
> to the lightweight resolver's
canonical format.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_nooprequest_parse()</CODE
> uses context
<VAR
CLASS="PARAMETER"
>ctx</VAR
> to convert the contents of packet
<VAR
CLASS="PARAMETER"
>pkt</VAR
> to a <SPAN
CLASS="TYPE"
>lwres_nooprequest_t</SPAN
>
structure.  Buffer <VAR
CLASS="PARAMETER"
>b</VAR
> provides space to be used
d234 19
a252 58
<SPAN
CLASS="TYPE"
>lwres_nooprequest_t</SPAN
> is made available through
<VAR
CLASS="PARAMETER"
>*structp</VAR
>.
<CODE
CLASS="FUNCTION"
>lwres_noopresponse_parse()</CODE
> offers the same
semantics as <CODE
CLASS="FUNCTION"
>lwres_nooprequest_parse()</CODE
> except it
yields a <SPAN
CLASS="TYPE"
>lwres_noopresponse_t</SPAN
> structure.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_noopresponse_free()</CODE
> and
<CODE
CLASS="FUNCTION"
>lwres_nooprequest_free()</CODE
> release the memory in
resolver context <VAR
CLASS="PARAMETER"
>ctx</VAR
> that was allocated to the
<SPAN
CLASS="TYPE"
>lwres_noopresponse_t</SPAN
> or <SPAN
CLASS="TYPE"
>lwres_nooprequest_t</SPAN
>
structures referenced via <VAR
CLASS="PARAMETER"
>structp</VAR
>.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN95"
></A
><H2
>RETURN VALUES</H2
><P
>The no-op opcode functions
<CODE
CLASS="FUNCTION"
>lwres_nooprequest_render()</CODE
>,
d254 2
a255 8
<CODE
CLASS="FUNCTION"
>lwres_noopresponse_render()</CODE
>
<CODE
CLASS="FUNCTION"
>lwres_nooprequest_parse()</CODE
>
d257 1
a257 4
<CODE
CLASS="FUNCTION"
>lwres_noopresponse_parse()</CODE
>
d259 1
a259 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d262 1
a262 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOMEMORY</SPAN
>
d264 1
a264 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d266 1
a266 4
<VAR
CLASS="PARAMETER"
>b</VAR
>
d268 1
a268 4
<SPAN
CLASS="TYPE"
>lwres_nooprequest_t</SPAN
>
d270 1
a270 4
<SPAN
CLASS="TYPE"
>lwres_noopresponse_t</SPAN
>
d272 1
a272 4
<CODE
CLASS="FUNCTION"
>lwres_nooprequest_parse()</CODE
>
d274 1
a274 4
<CODE
CLASS="FUNCTION"
>lwres_noopresponse_parse()</CODE
>
d276 1
a276 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d279 1
a279 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_FAILURE</SPAN
>
d281 1
a281 4
<CODE
CLASS="CONSTANT"
>pktflags</CODE
>
d283 13
a295 25
<SPAN
CLASS="TYPE"
>lwres_lwpacket_t</SPAN
>
indicate that the packet is not a response to an earlier query.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN114"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_packet</SPAN
>(3)</SPAN
></P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_noop</A
></H1
d57 2
a61 2
><P
></P
d179 1
a179 1
><TT
d181 1
a181 1
>lwres_nooprequest_render()</TT
d183 1
a183 1
context <TT
d185 1
a185 3
><I
>ctx</I
></TT
d187 1
a187 1
<TT
d189 1
a189 3
><I
>req</I
></TT
d191 1
a191 1
structure <TT
d193 1
a193 3
><I
>pkt</I
></TT
d195 1
a195 1
buffer <TT
d197 1
a197 3
><I
>b</I
></TT
d199 1
a199 1
<TT
d201 1
a201 3
><I
>*req</I
></TT
d203 1
a203 1
canonical format.  <TT
d205 1
a205 1
>lwres_noopresponse_render()</TT
d214 1
a214 1
><TT
d216 1
a216 1
>lwres_nooprequest_parse()</TT
d218 1
a218 1
<TT
d220 1
a220 3
><I
>ctx</I
></TT
d222 1
a222 1
<TT
d224 1
a224 3
><I
>pkt</I
></TT
d229 1
a229 1
structure.  Buffer <TT
d231 1
a231 3
><I
>b</I
></TT
d238 1
a238 1
<TT
d240 1
a240 3
><I
>*structp</I
></TT
d242 1
a242 1
<TT
d244 1
a244 1
>lwres_noopresponse_parse()</TT
d246 1
a246 1
semantics as <TT
d248 1
a248 1
>lwres_nooprequest_parse()</TT
d255 1
a255 1
><TT
d257 1
a257 1
>lwres_noopresponse_free()</TT
d259 1
a259 1
<TT
d261 1
a261 1
>lwres_nooprequest_free()</TT
d263 1
a263 1
resolver context <TT
d265 1
a265 3
><I
>ctx</I
></TT
d274 1
a274 1
structures referenced via <TT
d276 1
a276 3
><I
>structp</I
></TT
d288 1
a288 1
<TT
d290 1
a290 1
>lwres_nooprequest_render()</TT
d293 1
a293 1
<TT
d295 1
a295 1
>lwres_noopresponse_render()</TT
d297 1
a297 1
<TT
d299 1
a299 1
>lwres_nooprequest_parse()</TT
d302 1
a302 1
<TT
d304 1
a304 1
>lwres_noopresponse_parse()</TT
d323 1
a323 1
<TT
d325 1
a325 3
><I
>b</I
></TT
d338 1
a338 1
<TT
d340 1
a340 1
>lwres_nooprequest_parse()</TT
d343 1
a343 1
<TT
d345 1
a345 1
>lwres_noopresponse_parse()</TT
d359 1
a359 1
<TT
d361 1
a361 1
>pktflags</TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d409 1
a409 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.2 2004/08/22 23:39:05 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_noop</H1
a53 2
><P
></P
d57 2
d176 1
a176 1
><CODE
d178 1
a178 1
>lwres_nooprequest_render()</CODE
d180 1
a180 1
context <VAR
d182 3
a184 1
>ctx</VAR
d186 1
a186 1
<VAR
d188 3
a190 1
>req</VAR
d192 1
a192 1
structure <VAR
d194 3
a196 1
>pkt</VAR
d198 1
a198 1
buffer <VAR
d200 3
a202 1
>b</VAR
d204 1
a204 1
<VAR
d206 3
a208 1
>*req</VAR
d210 1
a210 1
canonical format.  <CODE
d212 1
a212 1
>lwres_noopresponse_render()</CODE
d221 1
a221 1
><CODE
d223 1
a223 1
>lwres_nooprequest_parse()</CODE
d225 1
a225 1
<VAR
d227 3
a229 1
>ctx</VAR
d231 1
a231 1
<VAR
d233 3
a235 1
>pkt</VAR
d240 1
a240 1
structure.  Buffer <VAR
d242 3
a244 1
>b</VAR
d251 1
a251 1
<VAR
d253 3
a255 1
>*structp</VAR
d257 1
a257 1
<CODE
d259 1
a259 1
>lwres_noopresponse_parse()</CODE
d261 1
a261 1
semantics as <CODE
d263 1
a263 1
>lwres_nooprequest_parse()</CODE
d270 1
a270 1
><CODE
d272 1
a272 1
>lwres_noopresponse_free()</CODE
d274 1
a274 1
<CODE
d276 1
a276 1
>lwres_nooprequest_free()</CODE
d278 1
a278 1
resolver context <VAR
d280 3
a282 1
>ctx</VAR
d291 1
a291 1
structures referenced via <VAR
d293 3
a295 1
>structp</VAR
d307 1
a307 1
<CODE
d309 1
a309 1
>lwres_nooprequest_render()</CODE
d312 1
a312 1
<CODE
d314 1
a314 1
>lwres_noopresponse_render()</CODE
d316 1
a316 1
<CODE
d318 1
a318 1
>lwres_nooprequest_parse()</CODE
d321 1
a321 1
<CODE
d323 1
a323 1
>lwres_noopresponse_parse()</CODE
d342 1
a342 1
<VAR
d344 3
a346 1
>b</VAR
d359 1
a359 1
<CODE
d361 1
a361 1
>lwres_nooprequest_parse()</CODE
d364 1
a364 1
<CODE
d366 1
a366 1
>lwres_noopresponse_parse()</CODE
d380 1
a380 1
<CODE
d382 1
a382 1
>pktflags</CODE
d409 1
a409 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 115
a131 158
<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_noop</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_nooprequest_render, lwres_noopresponse_render, lwres_nooprequest_parse, lwres_noopresponse_parse, lwres_noopresponse_free, lwres_nooprequest_free &#8212; lightweight resolver no-op message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_nooprequest_render</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_noopresponse_render</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_nooprequest_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_noopresponse_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_noopresponse_free</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_nooprequest_free</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525963"></a><h2>DESCRIPTION</h2>
<p>
These are low-level routines for creating and parsing
lightweight resolver no-op request and response messages.
</p>
<p>
The no-op message is analogous to a <span><strong class="command">ping</strong></span> packet: 
d134 8
a141 6
operational or not.
</p>
<p>
There are four main functions for the no-op opcode.
One render function converts a no-op request structure &#8212;
<span class="type">lwres_nooprequest_t</span> &#8212;
d145 5
a149 2
Another render function converts the no-op response structure &#8212;
<span class="type">lwres_noopresponse_t</span>
d152 7
a158 5
canonical format to a no-op response structure.
</p>
<p>
These structures are defined in
<code class="filename">lwres/lwres.h</code>.
d161 3
a163 3
</p>
<pre class="programlisting">
#define LWRES_OPCODE_NOOP       0x00000000U
d173 2
a174 3
} lwres_noopresponse_t;
</pre>
<p>
d177 30
a206 10
the response is therefore identical to the request.
</p>
<p>
<code class="function">lwres_nooprequest_render()</code> uses resolver
context <em class="parameter"><code>ctx</code></em> to convert no-op request structure
<em class="parameter"><code>req</code></em> to canonical format.  The packet header
structure <em class="parameter"><code>pkt</code></em> is initialised and transferred to
buffer <em class="parameter"><code>b</code></em>.  The contents of
<em class="parameter"><code>*req</code></em> are then appended to the buffer in
canonical format.  <code class="function">lwres_noopresponse_render()</code>
d208 25
a232 8
<span class="type">lwres_noopresponse_t</span> to the lightweight resolver's
canonical format.
</p>
<p>
<code class="function">lwres_nooprequest_parse()</code> uses context
<em class="parameter"><code>ctx</code></em> to convert the contents of packet
<em class="parameter"><code>pkt</code></em> to a <span class="type">lwres_nooprequest_t</span>
structure.  Buffer <em class="parameter"><code>b</code></em> provides space to be used
d234 58
a291 19
<span class="type">lwres_nooprequest_t</span> is made available through
<em class="parameter"><code>*structp</code></em>.
<code class="function">lwres_noopresponse_parse()</code> offers the same
semantics as <code class="function">lwres_nooprequest_parse()</code> except it
yields a <span class="type">lwres_noopresponse_t</span> structure.
</p>
<p>
<code class="function">lwres_noopresponse_free()</code> and
<code class="function">lwres_nooprequest_free()</code> release the memory in
resolver context <em class="parameter"><code>ctx</code></em> that was allocated to the
<span class="type">lwres_noopresponse_t</span> or <span class="type">lwres_nooprequest_t</span>
structures referenced via <em class="parameter"><code>structp</code></em>.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526096"></a><h2>RETURN VALUES</h2>
<p>
The no-op opcode functions
<code class="function">lwres_nooprequest_render()</code>,
d293 8
a300 2
<code class="function">lwres_noopresponse_render()</code>
<code class="function">lwres_nooprequest_parse()</code>
d302 4
a305 1
<code class="function">lwres_noopresponse_parse()</code>
d307 4
a310 1
<span class="errorcode">LWRES_R_SUCCESS</span>
d313 4
a316 1
<span class="errorcode">LWRES_R_NOMEMORY</span>
d318 4
a321 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d323 4
a326 1
<em class="parameter"><code>b</code></em>
d328 4
a331 1
<span class="type">lwres_nooprequest_t</span>
d333 4
a336 1
<span class="type">lwres_noopresponse_t</span>
d338 4
a341 1
<code class="function">lwres_nooprequest_parse()</code>
d343 4
a346 1
<code class="function">lwres_noopresponse_parse()</code>
d348 4
a351 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d354 4
a357 1
<span class="errorcode">LWRES_R_FAILURE</span>
d359 4
a362 1
<code class="constant">pktflags</code>
d364 25
a388 13
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526160"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3
)</span>
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_noop.html,v 1.7.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a55 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a80 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a105 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a130 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a145 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a160 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d168 1
a168 1
<a name="id2549528"></a><h2>DESCRIPTION</h2>
d249 1
a249 1
<a name="id2549797"></a><h2>RETURN VALUES</h2>
d288 1
a288 1
<a name="id2549861"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_noop.html,v 1.8.18.17 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d40 7
a46 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d50 2
a51 3
<td>lwres_nooprequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
d55 2
a56 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d60 1
a60 1
<td>lwres_buffer_t * </td>
d62 1
a62 1
<var class="pdparam">b</var><code>)</code>;</td>
d70 7
a76 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d80 2
a81 3
<td>lwres_noopresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
d85 2
a86 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d90 1
a90 1
<td>lwres_buffer_t * </td>
d92 1
a92 1
<var class="pdparam">b</var><code>)</code>;</td>
d100 7
a106 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d110 2
a111 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d115 2
a116 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d120 1
a120 1
<td>lwres_nooprequest_t ** </td>
d122 1
a122 1
<var class="pdparam">structp</var><code>)</code>;</td>
d130 7
a136 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d140 2
a141 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d145 2
a146 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d150 1
a150 1
<td>lwres_noopresponse_t ** </td>
d152 1
a152 1
<var class="pdparam">structp</var><code>)</code>;</td>
d160 7
a166 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d170 1
a170 1
<td>lwres_noopresponse_t ** </td>
d172 1
a172 1
<var class="pdparam">structp</var><code>)</code>;</td>
d180 7
a186 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d190 1
a190 1
<td>lwres_nooprequest_t ** </td>
d192 1
a192 1
<var class="pdparam">structp</var><code>)</code>;</td>
d198 1
a198 1
<a name="id2543522"></a><h2>DESCRIPTION</h2>
d200 3
a202 3
      These are low-level routines for creating and parsing
      lightweight resolver no-op request and response messages.
    </p>
d204 5
a208 6
      The no-op message is analogous to a <span><strong class="command">ping</strong></span>
      packet:
      a packet is sent to the resolver daemon and is simply echoed back.
      The opcode is intended to allow a client to determine if the server is
      operational or not.
    </p>
d210 12
a221 12
      There are four main functions for the no-op opcode.
      One render function converts a no-op request structure &#8212;
      <span class="type">lwres_nooprequest_t</span> &#8212;
      to the lighweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a no-op request structure.
      Another render function converts the no-op response structure &#8212;
      <span class="type">lwres_noopresponse_t</span>
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a no-op response structure.
    </p>
d223 2
a224 2
      These structures are defined in
      <code class="filename">lwres/lwres.h</code>.
d226 2
a227 2
      They are shown below.
    </p>
d230 1
a230 4
</pre>
<p>
    </p>
<pre class="programlisting">
d235 1
a235 4
</pre>
<p>
    </p>
<pre class="programlisting">
d242 16
a257 1
    </p>
d259 18
a276 36
      Although the structures have different types, they are identical.
      This is because the no-op opcode simply echos whatever data was sent:
      the response is therefore identical to the request.
    </p>
<p><code class="function">lwres_nooprequest_render()</code>
      uses resolver context <em class="parameter"><code>ctx</code></em> to convert
      no-op request structure <em class="parameter"><code>req</code></em> to canonical
      format.  The packet header structure <em class="parameter"><code>pkt</code></em>
      is initialised and transferred to buffer
      <em class="parameter"><code>b</code></em>.  The contents of
      <em class="parameter"><code>*req</code></em> are then appended to the buffer in
      canonical format.
      <code class="function">lwres_noopresponse_render()</code> performs the
      same task, except it converts a no-op response structure
      <span class="type">lwres_noopresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_nooprequest_parse()</code>
      uses context <em class="parameter"><code>ctx</code></em> to convert the contents
      of packet <em class="parameter"><code>pkt</code></em> to a
      <span class="type">lwres_nooprequest_t</span> structure.  Buffer
      <em class="parameter"><code>b</code></em> provides space to be used for storing
      this structure.  When the function succeeds, the resulting
      <span class="type">lwres_nooprequest_t</span> is made available through
      <em class="parameter"><code>*structp</code></em>.
      <code class="function">lwres_noopresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_nooprequest_parse()</code>
      except it yields a <span class="type">lwres_noopresponse_t</span> structure.
    </p>
<p><code class="function">lwres_noopresponse_free()</code>
      and <code class="function">lwres_nooprequest_free()</code> release the
      memory in resolver context <em class="parameter"><code>ctx</code></em> that was
      allocated to the <span class="type">lwres_noopresponse_t</span> or
      <span class="type">lwres_nooprequest_t</span> structures referenced via
      <em class="parameter"><code>structp</code></em>.
    </p>
d279 1
a279 1
<a name="id2543672"></a><h2>RETURN VALUES</h2>
d281 2
a282 2
      The no-op opcode functions
      <code class="function">lwres_nooprequest_render()</code>,
d284 32
a315 32
      <code class="function">lwres_noopresponse_render()</code>
      <code class="function">lwres_nooprequest_parse()</code>
      and
      <code class="function">lwres_noopresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <em class="parameter"><code>b</code></em>
      is too small to accommodate the packet header or the
      <span class="type">lwres_nooprequest_t</span>
      and
      <span class="type">lwres_noopresponse_t</span>
      structures.
      <code class="function">lwres_nooprequest_parse()</code>
      and
      <code class="function">lwres_noopresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <code class="constant">pktflags</code>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
d318 5
a322 3
<a name="id2543738"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>
    </p>
@


