head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.40
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.09;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.35;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.58;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--
 - Copyright (C) 2001  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_resutil.docbook,v 1.5 2001/06/18 22:56:34 gson Exp $ -->

<refentry>

<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
  <refentrytitle>lwres_resutil</refentrytitle>
  <manvolnum>3</manvolnum>
  <refmiscinfo>BIND9</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lwres_string_parse</refname>
<refname>lwres_addr_parse</refname>
<refname>lwres_getaddrsbyname</refname>
<refname>lwres_getnamebyaddr</refname>
<refpurpose>lightweight resolver utility functions</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>#include &lt;lwres/lwres.h&gt;</funcsynopsisinfo>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_string_parse</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>char **c</paramdef>
<paramdef>lwres_uint16_t *len</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_addr_parse</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_addr_t *addr</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_getaddrsbyname</function></funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>const char *name</paramdef>
<paramdef>lwres_uint32_t addrtypes</paramdef>
<paramdef>lwres_gabnresponse_t **structp</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
lwres_result_t
<function>lwres_getnamebyaddr</function></funcdef>
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_uint32_t addrtype</paramdef>
<paramdef>lwres_uint16_t addrlen</paramdef>
<paramdef>const unsigned char *addr</paramdef>
<paramdef>lwres_gnbaresponse_t **structp</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>

<para>
<function>lwres_string_parse()</function> retrieves a DNS-encoded
string starting the current pointer of lightweight resolver buffer
<parameter>b</parameter>: i.e.  <constant>b-&gt;current</constant>.
When the function returns, the address of the first byte of the
encoded string is returned via <parameter>*c</parameter> and the
length of that string is given by <parameter>*len</parameter>.  The
buffer's current pointer is advanced to point at the character
following the string length, the encoded string, and the trailing
<type>NULL</type> character.
</para>

<para>
<function>lwres_addr_parse()</function> extracts an address from the
buffer <parameter>b</parameter>.  The buffer's current pointer
<constant>b-&gt;current</constant> is presumed to point at an encoded
address: the address preceded by a 32-bit protocol family identifier
and a 16-bit length field.  The encoded address is copied to
<constant>addr-&gt;address</constant> and
<constant>addr-&gt;length</constant> indicates the size in bytes of
the address that was copied.  <constant>b-&gt;current</constant> is
advanced to point at the next byte of available data in the buffer
following the encoded address.
</para>

<para>
<function>lwres_getaddrsbyname()</function>
and
<function>lwres_getnamebyaddr()</function>
use the
<type>lwres_gnbaresponse_t</type>
structure defined below:
<programlisting>
typedef struct {
        lwres_uint32_t          flags;
        lwres_uint16_t          naliases;
        lwres_uint16_t          naddrs;
        char                   *realname;
        char                  **aliases;
        lwres_uint16_t          realnamelen;
        lwres_uint16_t         *aliaslen;
        lwres_addrlist_t        addrs;
        void                   *base;
        size_t                  baselen;
} lwres_gabnresponse_t;
</programlisting>
The contents of this structure are not manipulated directly but
they are controlled through the
<citerefentry>
<refentrytitle>lwres_gabn</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
functions.
</para>

<para>
The lightweight resolver uses
<function>lwres_getaddrsbyname()</function> to perform foward lookups.
Hostname <parameter>name</parameter> is looked up using the resolver
context <parameter>ctx</parameter> for memory allocation.
<parameter>addrtypes</parameter> is a bitmask indicating which type of
addresses are to be looked up.  Current values for this bitmask are
<type>LWRES_ADDRTYPE_V4</type> for IPv4 addresses and
<type>LWRES_ADDRTYPE_V6</type> for IPv6 addresses.  Results of the
lookup are returned in <parameter>*structp</parameter>.
</para>

<para>
<function>lwres_getnamebyaddr()</function> performs reverse lookups.
Resolver context <parameter>ctx</parameter> is used for memory
allocation.  The address type is indicated by
<parameter>addrtype</parameter>: <type>LWRES_ADDRTYPE_V4</type> or
<type>LWRES_ADDRTYPE_V6</type>.  The address to be looked up is given
by <parameter>addr</parameter> and its length is
<parameter>addrlen</parameter> bytes.  The result of the function call
is made available through <parameter>*structp</parameter>.
</para>
</refsect1>

<refsect1>
<title>RETURN VALUES</title>
<para>
Successful calls to
<function>lwres_string_parse()</function>
and
<function>lwres_addr_parse()</function>
return
<errorcode>LWRES_R_SUCCESS.</errorcode>
Both functions return
<errorcode>LWRES_R_FAILURE</errorcode>
if the buffer is corrupt or
<errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
if the buffer has less space than expected for the components of the
encoded string or address.
</para>
<para>
<function>lwres_getaddrsbyname()</function>
returns
<errorcode>LWRES_R_SUCCESS</errorcode>
on success and it returns
<errorcode>LWRES_R_NOTFOUND</errorcode>
if the hostname
<parameter>name</parameter>
could not be found.
</para>
<para>
<errorcode>LWRES_R_SUCCESS</errorcode>
is returned by a successful call to
<function>lwres_getnamebyaddr()</function>.
</para>

<para>
Both
<function>lwres_getaddrsbyname()</function>
and
<function>lwres_getnamebyaddr()</function>
return
<errorcode>LWRES_R_NOMEMORY</errorcode>
when memory allocation requests fail and
<errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
if the buffers used for sending queries and receiving replies are too
small.
</para>

</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>lwres_buffer</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_gabn</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>.
</para>

</refsect1>
</refentry>
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a2 1
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_resutil.docbook,v 1.5.206.1 2004/03/06 08:15:42 marka Exp $ -->
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_resutil.docbook,v 1.5.206.3 2005/05/12 21:36:16 sra Exp $ -->
a31 13

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_resutil.docbook,v 1.6.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d25 9
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_resutil</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d48 9
a56 9
  <refnamediv>
    <refname>lwres_string_parse</refname>
    <refname>lwres_addr_parse</refname>
    <refname>lwres_getaddrsbyname</refname>
    <refname>lwres_getnamebyaddr</refname>
    <refpurpose>lightweight resolver utility functions</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
d59 1
a59 1
        <funcdef>
d62 4
a65 4
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>char **<parameter>c</parameter></paramdef>
        <paramdef>lwres_uint16_t *<parameter>len</parameter></paramdef>
        </funcprototype>
d67 1
a67 1
        <funcdef>
d70 3
a72 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_addr_t *<parameter>addr</parameter></paramdef>
        </funcprototype>
d74 1
a74 1
        <funcdef>
d77 5
a81 5
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>const char *<parameter>name</parameter></paramdef>
        <paramdef>lwres_uint32_t <parameter>addrtypes</parameter></paramdef>
        <paramdef>lwres_gabnresponse_t **<parameter>structp</parameter></paramdef>
        </funcprototype>
d83 1
a83 1
        <funcdef>
d86 6
a91 6
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_uint32_t <parameter>addrtype</parameter></paramdef>
        <paramdef>lwres_uint16_t <parameter>addrlen</parameter></paramdef>
        <paramdef>const unsigned char *<parameter>addr</parameter></paramdef>
        <paramdef>lwres_gnbaresponse_t **<parameter>structp</parameter></paramdef>
      </funcprototype>
d93 1
a93 4
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>
d95 2
a96 30
    <para><function>lwres_string_parse()</function>
      retrieves a DNS-encoded string starting the current pointer of
      lightweight resolver buffer <parameter>b</parameter>: i.e.
      <constant>b-&gt;current</constant>.  When the function returns,
      the address of the first byte of the encoded string is returned
      via <parameter>*c</parameter> and the length of that string is
      given by <parameter>*len</parameter>.  The buffer's current
      pointer is advanced to point at the character following the
      string length, the encoded string, and the trailing
      <type>NULL</type> character.
    </para>

    <para><function>lwres_addr_parse()</function>
      extracts an address from the buffer <parameter>b</parameter>.
      The buffer's current pointer <constant>b-&gt;current</constant>
      is presumed to point at an encoded address: the address preceded
      by a 32-bit protocol family identifier and a 16-bit length
      field.  The encoded address is copied to
      <constant>addr-&gt;address</constant> and
      <constant>addr-&gt;length</constant> indicates the size in bytes
      of the address that was copied.
      <constant>b-&gt;current</constant> is advanced to point at the
      next byte of available data in the buffer following the encoded
      address.
    </para>

    <para><function>lwres_getaddrsbyname()</function>
      and <function>lwres_getnamebyaddr()</function> use the
      <type>lwres_gnbaresponse_t</type> structure defined below:
    </para>
d98 33
a130 1
<para><programlisting>
d143 91
a233 1
</programlisting></para>
d235 2
a236 95
    <para>
      The contents of this structure are not manipulated directly but
      they are controlled through the
      <citerefentry>
        <refentrytitle>lwres_gabn</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      functions.
    </para>

    <para>
      The lightweight resolver uses
      <function>lwres_getaddrsbyname()</function> to perform
      foward lookups.
      Hostname <parameter>name</parameter> is looked up using the
      resolver
      context <parameter>ctx</parameter> for memory allocation.
      <parameter>addrtypes</parameter> is a bitmask indicating
      which type of
      addresses are to be looked up.  Current values for this bitmask are
      <type>LWRES_ADDRTYPE_V4</type> for IPv4 addresses and
      <type>LWRES_ADDRTYPE_V6</type> for IPv6 addresses.  Results of the
      lookup are returned in <parameter>*structp</parameter>.
    </para>

    <para><function>lwres_getnamebyaddr()</function>
      performs reverse lookups.  Resolver context
      <parameter>ctx</parameter> is used for memory allocation.  The
      address type is indicated by <parameter>addrtype</parameter>:
      <type>LWRES_ADDRTYPE_V4</type> or
      <type>LWRES_ADDRTYPE_V6</type>.  The address to be looked up is
      given by <parameter>addr</parameter> and its length is
      <parameter>addrlen</parameter> bytes.  The result of the
      function call is made available through
      <parameter>*structp</parameter>.
    </para>
  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>
    <para>
      Successful calls to
      <function>lwres_string_parse()</function>
      and
      <function>lwres_addr_parse()</function>
      return
      <errorcode>LWRES_R_SUCCESS.</errorcode>
      Both functions return
      <errorcode>LWRES_R_FAILURE</errorcode>
      if the buffer is corrupt or
      <errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
      if the buffer has less space than expected for the components of the
      encoded string or address.
    </para>

    <para><function>lwres_getaddrsbyname()</function>
      returns <errorcode>LWRES_R_SUCCESS</errorcode> on success and it
      returns <errorcode>LWRES_R_NOTFOUND</errorcode> if the hostname
      <parameter>name</parameter> could not be found.
    </para>
    <para><errorcode>LWRES_R_SUCCESS</errorcode>
      is returned by a successful call to
      <function>lwres_getnamebyaddr()</function>.
    </para>

    <para>
      Both
      <function>lwres_getaddrsbyname()</function>
      and
      <function>lwres_getnamebyaddr()</function>
      return
      <errorcode>LWRES_R_NOMEMORY</errorcode>
      when memory allocation requests fail and
      <errorcode>LWRES_R_UNEXPECTEDEND</errorcode>
      if the buffers used for sending queries and receiving replies are too
      small.
    </para>

  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>lwres_buffer</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_gabn</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>

  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


