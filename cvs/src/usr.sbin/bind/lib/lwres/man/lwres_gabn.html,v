head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.04;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.32;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.25;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.57;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_gabn.html,v 1.7.18.17 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gabn</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gabnrequest_render, lwres_gabnresponse_render, lwres_gabnrequest_parse, lwres_gabnresponse_parse, lwres_gabnresponse_free, lwres_gabnrequest_free &#8212; lightweight resolver getaddrbyname message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnrequest_render</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnrequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnresponse_render</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnrequest_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnrequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnresponse_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gabnresponse_free</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gabnrequest_free</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gabnrequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543522"></a><h2>DESCRIPTION</h2>
<p>
      These are low-level routines for creating and parsing
      lightweight resolver name-to-address lookup request and
      response messages.
    </p>
<p>
      There are four main functions for the getaddrbyname opcode.
      One render function converts a getaddrbyname request structure &#8212;
      <span class="type">lwres_gabnrequest_t</span> &#8212;
      to the lighweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a getaddrbyname request structure.
      Another render function converts the getaddrbyname response structure
      &#8212; <span class="type">lwres_gabnresponse_t</span> &#8212;
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a getaddrbyname response structure.
    </p>
<p>
      These structures are defined in
      <code class="filename">&lt;lwres/lwres.h&gt;</code>.
      They are shown below.
    </p>
<pre class="programlisting">
#define LWRES_OPCODE_GETADDRSBYNAME     0x00010001U
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct lwres_addr lwres_addr_t;
typedef LWRES_LIST(lwres_addr_t) lwres_addrlist_t;
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint32_t  flags;
        lwres_uint32_t  addrtypes;
        lwres_uint16_t  namelen;
        char           *name;
} lwres_gabnrequest_t;
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint32_t          flags;
        lwres_uint16_t          naliases;
        lwres_uint16_t          naddrs;
        char                   *realname;
        char                  **aliases;
        lwres_uint16_t          realnamelen;
        lwres_uint16_t         *aliaslen;
        lwres_addrlist_t        addrs;
        void                   *base;
        size_t                  baselen;
} lwres_gabnresponse_t;
</pre>
<p>
    </p>
<p><code class="function">lwres_gabnrequest_render()</code>
      uses resolver context <em class="parameter"><code>ctx</code></em> to convert
      getaddrbyname request structure <em class="parameter"><code>req</code></em> to
      canonical format.  The packet header structure
      <em class="parameter"><code>pkt</code></em> is initialised and transferred to
      buffer <em class="parameter"><code>b</code></em>.

      The contents of <em class="parameter"><code>*req</code></em> are then appended to
      the buffer in canonical format.
      <code class="function">lwres_gabnresponse_render()</code> performs the
      same task, except it converts a getaddrbyname response structure
      <span class="type">lwres_gabnresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_gabnrequest_parse()</code>
      uses context <em class="parameter"><code>ctx</code></em> to convert the contents
      of packet <em class="parameter"><code>pkt</code></em> to a
      <span class="type">lwres_gabnrequest_t</span> structure.  Buffer
      <em class="parameter"><code>b</code></em> provides space to be used for storing
      this structure.  When the function succeeds, the resulting
      <span class="type">lwres_gabnrequest_t</span> is made available through
      <em class="parameter"><code>*structp</code></em>.

      <code class="function">lwres_gabnresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_gabnrequest_parse()</code>
      except it yields a <span class="type">lwres_gabnresponse_t</span> structure.
    </p>
<p><code class="function">lwres_gabnresponse_free()</code>
      and <code class="function">lwres_gabnrequest_free()</code> release the
      memory in resolver context <em class="parameter"><code>ctx</code></em> that was
      allocated to the <span class="type">lwres_gabnresponse_t</span> or
      <span class="type">lwres_gabnrequest_t</span> structures referenced via
      <em class="parameter"><code>structp</code></em>.

      Any memory associated with ancillary buffers and strings for
      those structures is also discarded.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543667"></a><h2>RETURN VALUES</h2>
<p>
      The getaddrbyname opcode functions
      <code class="function">lwres_gabnrequest_render()</code>,
      <code class="function">lwres_gabnresponse_render()</code>
      <code class="function">lwres_gabnrequest_parse()</code>
      and
      <code class="function">lwres_gabnresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <em class="parameter"><code>b</code></em>
      is too small to accommodate the packet header or the
      <span class="type">lwres_gabnrequest_t</span>
      and
      <span class="type">lwres_gabnresponse_t</span>
      structures.
      <code class="function">lwres_gabnrequest_parse()</code>
      and
      <code class="function">lwres_gabnresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <em class="structfield"><code>pktflags</code></em>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543733"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 2
<td> </td>
<td>, </td>
d45 3
a47 2
<td> </td>
<td>, </td>
d51 3
a53 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d57 1
a57 1
<td> </td>
d59 1
a59 1
<code>)</code>;</td>
d67 3
a69 2
<td> </td>
<td>, </td>
d73 3
a75 2
<td> </td>
<td>, </td>
d79 3
a81 2
<td> </td>
<td>, </td>
d85 1
a85 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d87 1
a87 1
<code>)</code>;</td>
d95 3
a97 2
<td> </td>
<td>, </td>
d101 3
a103 2
<td> </td>
<td>, </td>
d107 3
a109 2
<td> </td>
<td>, </td>
d113 1
a113 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d115 1
a115 1
<code>)</code>;</td>
d123 3
a125 2
<td> </td>
<td>, </td>
d129 3
a131 2
<td> </td>
<td>, </td>
d135 3
a137 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d141 1
a141 1
<td> </td>
d143 1
a143 1
<code>)</code>;</td>
d151 3
a153 2
<td> </td>
<td>, </td>
d157 1
a157 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d159 1
a159 1
<code>)</code>;</td>
d167 3
a169 2
<td> </td>
<td>, </td>
d173 1
a173 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d175 1
a175 1
<code>)</code>;</td>
d181 1
a181 1
<a name="id2549528"></a><h2>DESCRIPTION</h2>
d183 4
a186 4
These are low-level routines for creating and parsing
lightweight resolver name-to-address lookup request and 
response messages.
</p>
d188 12
a199 12
There are four main functions for the getaddrbyname opcode.
One render function converts a getaddrbyname request structure &#8212;
<span class="type">lwres_gabnrequest_t</span> &#8212;
to the lighweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a getaddrbyname request structure.
Another render function converts the getaddrbyname response structure &#8212;
<span class="type">lwres_gabnresponse_t</span> &#8212;
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a getaddrbyname response structure.
</p>
d201 4
a204 4
These structures are defined in
<code class="filename">&lt;lwres/lwres.h&gt;</code>.
They are shown below.
</p>
d207 4
a210 1

d213 4
a216 1

d223 4
a226 1

d241 7
a247 13
</p>
<p>
<code class="function">lwres_gabnrequest_render()</code>
uses resolver context
<em class="parameter"><code>ctx</code></em>
to convert getaddrbyname request structure
<em class="parameter"><code>req</code></em>
to canonical format.
The packet header structure
<em class="parameter"><code>pkt</code></em>
is initialised and transferred to
buffer
<em class="parameter"><code>b</code></em>.
d249 15
a263 24
The contents of
<em class="parameter"><code>*req</code></em>
are then appended to the buffer in canonical format.
<code class="function">lwres_gabnresponse_render()</code>
performs the same task, except it converts a getaddrbyname response structure
<span class="type">lwres_gabnresponse_t</span>
to the lightweight resolver's canonical format.
</p>
<p>
<code class="function">lwres_gabnrequest_parse()</code>
uses context
<em class="parameter"><code>ctx</code></em>
to convert the contents of packet
<em class="parameter"><code>pkt</code></em>
to a
<span class="type">lwres_gabnrequest_t</span>
structure.
Buffer
<em class="parameter"><code>b</code></em>
provides space to be used for storing this structure.
When the function succeeds, the resulting
<span class="type">lwres_gabnrequest_t</span>
is made available through
<em class="parameter"><code>*structp</code></em>.
d265 10
a274 19
<code class="function">lwres_gabnresponse_parse()</code>
offers the same semantics as
<code class="function">lwres_gabnrequest_parse()</code>
except it yields a
<span class="type">lwres_gabnresponse_t</span>
structure.
</p>
<p>
<code class="function">lwres_gabnresponse_free()</code>
and
<code class="function">lwres_gabnrequest_free()</code>
release the memory in resolver context
<em class="parameter"><code>ctx</code></em>
that was allocated to the
<span class="type">lwres_gabnresponse_t</span>
or
<span class="type">lwres_gabnrequest_t</span>
structures referenced via
<em class="parameter"><code>structp</code></em>.
d276 3
a278 3
Any memory associated with ancillary buffers and strings for those
structures is also discarded.
</p>
d281 1
a281 1
<a name="id2549720"></a><h2>RETURN VALUES</h2>
d283 34
a316 34
The getaddrbyname opcode functions
<code class="function">lwres_gabnrequest_render()</code>, 
<code class="function">lwres_gabnresponse_render()</code>
<code class="function">lwres_gabnrequest_parse()</code>
and
<code class="function">lwres_gabnresponse_parse()</code>
all return
<span class="errorcode">LWRES_R_SUCCESS</span>
on success.
They return
<span class="errorcode">LWRES_R_NOMEMORY</span>
if memory allocation fails.
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
is returned if the available space in the buffer
<em class="parameter"><code>b</code></em>
is too small to accommodate the packet header or the
<span class="type">lwres_gabnrequest_t</span>
and
<span class="type">lwres_gabnresponse_t</span>
structures.
<code class="function">lwres_gabnrequest_parse()</code>
and
<code class="function">lwres_gabnresponse_parse()</code>
will return
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
if the buffer is not empty after decoding the received packet.
These functions will return
<span class="errorcode">LWRES_R_FAILURE</span>
if
<em class="structfield"><code>pktflags</code></em>
in the packet header structure
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
d319 3
a321 5
<a name="id2549853"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3
)</span>
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.9 2005/10/13 02:33:55 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d55 5
d85 5
d115 5
d145 5
d165 5
d185 5
d197 1
a197 1
<a name="id2525963"></a><h2>DESCRIPTION</h2>
d312 1
a312 1
<a name="id2526155"></a><h2>RETURN VALUES</h2>
d350 1
a350 1
<a name="id2526220"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 153
a169 109

<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.2 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_gabn</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_gabn</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_gabnrequest_render, lwres_gabnresponse_render, lwres_gabnrequest_parse, lwres_gabnresponse_parse, lwres_gabnresponse_free, lwres_gabnrequest_free&nbsp;--&nbsp;lightweight resolver getaddrbyname message handling</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN16"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN17"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwres.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gabnrequest_render</CODE
>(lwres_context_t *ctx, lwres_gabnrequest_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gabnresponse_render</CODE
>(lwres_context_t *ctx, lwres_gabnresponse_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gabnrequest_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_gabnrequest_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gabnresponse_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_gabnresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_gabnresponse_free</CODE
>(lwres_context_t *ctx, lwres_gabnresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_gabnrequest_free</CODE
>(lwres_context_t *ctx, lwres_gabnrequest_t **structp);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN57"
></A
><H2
>DESCRIPTION</H2
><P
>These are low-level routines for creating and parsing
d171 6
a176 8
response messages.</P
><P
>There are four main functions for the getaddrbyname opcode.
One render function converts a getaddrbyname request structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_gabnrequest_t</SPAN
> &mdash;
d180 2
a181 5
Another render function converts the getaddrbyname response structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_gabnresponse_t</SPAN
> &mdash;
d184 5
a188 7
canonical format to a getaddrbyname response structure.</P
><P
>These structures are defined in
<TT
CLASS="FILENAME"
>&lt;lwres/lwres.h&gt;</TT
>.
d190 3
a192 3
<PRE
CLASS="PROGRAMLISTING"
>#define LWRES_OPCODE_GETADDRSBYNAME     0x00010001U
d215 6
a220 7
} lwres_gabnresponse_t;</PRE
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_gabnrequest_render()</CODE
>
d222 1
a222 4
<VAR
CLASS="PARAMETER"
>ctx</VAR
>
d224 1
a224 4
<VAR
CLASS="PARAMETER"
>req</VAR
>
d227 1
a227 4
<VAR
CLASS="PARAMETER"
>pkt</VAR
>
d230 1
a230 4
<VAR
CLASS="PARAMETER"
>b</VAR
>.
d233 1
a233 4
<VAR
CLASS="PARAMETER"
>*req</VAR
>
d235 1
a235 4
<CODE
CLASS="FUNCTION"
>lwres_gabnresponse_render()</CODE
>
d237 5
a241 10
<SPAN
CLASS="TYPE"
>lwres_gabnresponse_t</SPAN
>
to the lightweight resolver's canonical format.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gabnrequest_parse()</CODE
>
d243 1
a243 4
<VAR
CLASS="PARAMETER"
>ctx</VAR
>
d245 1
a245 4
<VAR
CLASS="PARAMETER"
>pkt</VAR
>
d247 1
a247 4
<SPAN
CLASS="TYPE"
>lwres_gabnrequest_t</SPAN
>
d250 1
a250 4
<VAR
CLASS="PARAMETER"
>b</VAR
>
d253 1
a253 4
<SPAN
CLASS="TYPE"
>lwres_gabnrequest_t</SPAN
>
d255 1
a255 4
<VAR
CLASS="PARAMETER"
>*structp</VAR
>.
d257 1
a257 4
<CODE
CLASS="FUNCTION"
>lwres_gabnresponse_parse()</CODE
>
d259 1
a259 4
<CODE
CLASS="FUNCTION"
>lwres_gabnrequest_parse()</CODE
>
d261 5
a265 10
<SPAN
CLASS="TYPE"
>lwres_gabnresponse_t</SPAN
>
structure.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gabnresponse_free()</CODE
>
d267 1
a267 4
<CODE
CLASS="FUNCTION"
>lwres_gabnrequest_free()</CODE
>
d269 1
a269 4
<VAR
CLASS="PARAMETER"
>ctx</VAR
>
d271 1
a271 4
<SPAN
CLASS="TYPE"
>lwres_gabnresponse_t</SPAN
>
d273 1
a273 4
<SPAN
CLASS="TYPE"
>lwres_gabnrequest_t</SPAN
>
d275 1
a275 4
<VAR
CLASS="PARAMETER"
>structp</VAR
>.
d278 10
a287 23
structures is also discarded.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN93"
></A
><H2
>RETURN VALUES</H2
><P
>The getaddrbyname opcode functions
<CODE
CLASS="FUNCTION"
>lwres_gabnrequest_render()</CODE
>, 
<CODE
CLASS="FUNCTION"
>lwres_gabnresponse_render()</CODE
>
<CODE
CLASS="FUNCTION"
>lwres_gabnrequest_parse()</CODE
>
d289 1
a289 4
<CODE
CLASS="FUNCTION"
>lwres_gabnresponse_parse()</CODE
>
d291 1
a291 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d294 1
a294 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOMEMORY</SPAN
>
d296 1
a296 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d298 1
a298 4
<VAR
CLASS="PARAMETER"
>b</VAR
>
d300 1
a300 4
<SPAN
CLASS="TYPE"
>lwres_gabnrequest_t</SPAN
>
d302 1
a302 4
<SPAN
CLASS="TYPE"
>lwres_gabnresponse_t</SPAN
>
d304 1
a304 4
<CODE
CLASS="FUNCTION"
>lwres_gabnrequest_parse()</CODE
>
d306 1
a306 4
<CODE
CLASS="FUNCTION"
>lwres_gabnresponse_parse()</CODE
>
d308 1
a308 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d311 1
a311 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_FAILURE</SPAN
>
d313 1
a313 4
<CODE
CLASS="STRUCTFIELD"
>pktflags</CODE
>
d315 13
a327 25
<SPAN
CLASS="TYPE"
>lwres_lwpacket_t</SPAN
>
indicate that the packet is not a response to an earlier query.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN112"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_packet</SPAN
>(3)</SPAN
></P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_gabn</A
></H1
d57 2
a61 2
><P
></P
d181 1
a181 1
><TT
d183 1
a183 1
>lwres_gabnrequest_render()</TT
d186 1
a186 1
<TT
d188 1
a188 3
><I
>ctx</I
></TT
d191 1
a191 1
<TT
d193 1
a193 3
><I
>req</I
></TT
d197 1
a197 1
<TT
d199 1
a199 3
><I
>pkt</I
></TT
d203 1
a203 1
<TT
d205 1
a205 3
><I
>b</I
></TT
d209 1
a209 1
<TT
d211 1
a211 3
><I
>*req</I
></TT
d214 1
a214 1
<TT
d216 1
a216 1
>lwres_gabnresponse_render()</TT
d225 1
a225 1
><TT
d227 1
a227 1
>lwres_gabnrequest_parse()</TT
d230 1
a230 1
<TT
d232 1
a232 3
><I
>ctx</I
></TT
d235 1
a235 1
<TT
d237 1
a237 3
><I
>pkt</I
></TT
d246 1
a246 1
<TT
d248 1
a248 3
><I
>b</I
></TT
d257 1
a257 1
<TT
d259 1
a259 3
><I
>*structp</I
></TT
d262 1
a262 1
<TT
d264 1
a264 1
>lwres_gabnresponse_parse()</TT
d267 1
a267 1
<TT
d269 1
a269 1
>lwres_gabnrequest_parse()</TT
d278 1
a278 1
><TT
d280 1
a280 1
>lwres_gabnresponse_free()</TT
d283 1
a283 1
<TT
d285 1
a285 1
>lwres_gabnrequest_free()</TT
d288 1
a288 1
<TT
d290 1
a290 3
><I
>ctx</I
></TT
d303 1
a303 1
<TT
d305 1
a305 3
><I
>structp</I
></TT
d320 1
a320 1
<TT
d322 1
a322 1
>lwres_gabnrequest_render()</TT
d324 1
a324 1
<TT
d326 1
a326 1
>lwres_gabnresponse_render()</TT
d328 1
a328 1
<TT
d330 1
a330 1
>lwres_gabnrequest_parse()</TT
d333 1
a333 1
<TT
d335 1
a335 1
>lwres_gabnresponse_parse()</TT
d354 1
a354 1
<TT
d356 1
a356 3
><I
>b</I
></TT
d369 1
a369 1
<TT
d371 1
a371 1
>lwres_gabnrequest_parse()</TT
d374 1
a374 1
<TT
d376 1
a376 1
>lwres_gabnresponse_parse()</TT
d390 1
a390 1
<TT
d392 1
a392 3
><I
>pktflags</I
></TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d442 1
a442 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.2 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_gabn</H1
a53 2
><P
></P
d57 2
d178 1
a178 1
><CODE
d180 1
a180 1
>lwres_gabnrequest_render()</CODE
d183 1
a183 1
<VAR
d185 3
a187 1
>ctx</VAR
d190 1
a190 1
<VAR
d192 3
a194 1
>req</VAR
d198 1
a198 1
<VAR
d200 3
a202 1
>pkt</VAR
d206 1
a206 1
<VAR
d208 3
a210 1
>b</VAR
d214 1
a214 1
<VAR
d216 3
a218 1
>*req</VAR
d221 1
a221 1
<CODE
d223 1
a223 1
>lwres_gabnresponse_render()</CODE
d232 1
a232 1
><CODE
d234 1
a234 1
>lwres_gabnrequest_parse()</CODE
d237 1
a237 1
<VAR
d239 3
a241 1
>ctx</VAR
d244 1
a244 1
<VAR
d246 3
a248 1
>pkt</VAR
d257 1
a257 1
<VAR
d259 3
a261 1
>b</VAR
d270 1
a270 1
<VAR
d272 3
a274 1
>*structp</VAR
d277 1
a277 1
<CODE
d279 1
a279 1
>lwres_gabnresponse_parse()</CODE
d282 1
a282 1
<CODE
d284 1
a284 1
>lwres_gabnrequest_parse()</CODE
d293 1
a293 1
><CODE
d295 1
a295 1
>lwres_gabnresponse_free()</CODE
d298 1
a298 1
<CODE
d300 1
a300 1
>lwres_gabnrequest_free()</CODE
d303 1
a303 1
<VAR
d305 3
a307 1
>ctx</VAR
d320 1
a320 1
<VAR
d322 3
a324 1
>structp</VAR
d339 1
a339 1
<CODE
d341 1
a341 1
>lwres_gabnrequest_render()</CODE
d343 1
a343 1
<CODE
d345 1
a345 1
>lwres_gabnresponse_render()</CODE
d347 1
a347 1
<CODE
d349 1
a349 1
>lwres_gabnrequest_parse()</CODE
d352 1
a352 1
<CODE
d354 1
a354 1
>lwres_gabnresponse_parse()</CODE
d373 1
a373 1
<VAR
d375 3
a377 1
>b</VAR
d390 1
a390 1
<CODE
d392 1
a392 1
>lwres_gabnrequest_parse()</CODE
d395 1
a395 1
<CODE
d397 1
a397 1
>lwres_gabnresponse_parse()</CODE
d411 1
a411 1
<CODE
d413 3
a415 1
>pktflags</CODE
d442 1
a442 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 109
a125 153
<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.9 2005/10/13 02:33:55 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gabn</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gabnrequest_render, lwres_gabnresponse_render, lwres_gabnrequest_parse, lwres_gabnresponse_parse, lwres_gabnresponse_free, lwres_gabnrequest_free &#8212; lightweight resolver getaddrbyname message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnrequest_render</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnresponse_render</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnrequest_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gabnresponse_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gabnresponse_free</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gabnrequest_free</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525963"></a><h2>DESCRIPTION</h2>
<p>
These are low-level routines for creating and parsing
d127 8
a134 6
response messages.
</p>
<p>
There are four main functions for the getaddrbyname opcode.
One render function converts a getaddrbyname request structure &#8212;
<span class="type">lwres_gabnrequest_t</span> &#8212;
d138 5
a142 2
Another render function converts the getaddrbyname response structure &#8212;
<span class="type">lwres_gabnresponse_t</span> &#8212;
d145 7
a151 5
canonical format to a getaddrbyname response structure.
</p>
<p>
These structures are defined in
<code class="filename">&lt;lwres/lwres.h&gt;</code>.
d153 3
a155 3
</p>
<pre class="programlisting">
#define LWRES_OPCODE_GETADDRSBYNAME     0x00010001U
d178 7
a184 6
} lwres_gabnresponse_t;
</pre>
<p>
</p>
<p>
<code class="function">lwres_gabnrequest_render()</code>
d186 4
a189 1
<em class="parameter"><code>ctx</code></em>
d191 4
a194 1
<em class="parameter"><code>req</code></em>
d197 4
a200 1
<em class="parameter"><code>pkt</code></em>
d203 4
a206 1
<em class="parameter"><code>b</code></em>.
d209 4
a212 1
<em class="parameter"><code>*req</code></em>
d214 4
a217 1
<code class="function">lwres_gabnresponse_render()</code>
d219 10
a228 5
<span class="type">lwres_gabnresponse_t</span>
to the lightweight resolver's canonical format.
</p>
<p>
<code class="function">lwres_gabnrequest_parse()</code>
d230 4
a233 1
<em class="parameter"><code>ctx</code></em>
d235 4
a238 1
<em class="parameter"><code>pkt</code></em>
d240 4
a243 1
<span class="type">lwres_gabnrequest_t</span>
d246 4
a249 1
<em class="parameter"><code>b</code></em>
d252 4
a255 1
<span class="type">lwres_gabnrequest_t</span>
d257 4
a260 1
<em class="parameter"><code>*structp</code></em>.
d262 4
a265 1
<code class="function">lwres_gabnresponse_parse()</code>
d267 4
a270 1
<code class="function">lwres_gabnrequest_parse()</code>
d272 10
a281 5
<span class="type">lwres_gabnresponse_t</span>
structure.
</p>
<p>
<code class="function">lwres_gabnresponse_free()</code>
d283 4
a286 1
<code class="function">lwres_gabnrequest_free()</code>
d288 4
a291 1
<em class="parameter"><code>ctx</code></em>
d293 4
a296 1
<span class="type">lwres_gabnresponse_t</span>
d298 4
a301 1
<span class="type">lwres_gabnrequest_t</span>
d303 4
a306 1
<em class="parameter"><code>structp</code></em>.
d309 23
a331 10
structures is also discarded.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526155"></a><h2>RETURN VALUES</h2>
<p>
The getaddrbyname opcode functions
<code class="function">lwres_gabnrequest_render()</code>, 
<code class="function">lwres_gabnresponse_render()</code>
<code class="function">lwres_gabnrequest_parse()</code>
d333 4
a336 1
<code class="function">lwres_gabnresponse_parse()</code>
d338 4
a341 1
<span class="errorcode">LWRES_R_SUCCESS</span>
d344 4
a347 1
<span class="errorcode">LWRES_R_NOMEMORY</span>
d349 4
a352 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d354 4
a357 1
<em class="parameter"><code>b</code></em>
d359 4
a362 1
<span class="type">lwres_gabnrequest_t</span>
d364 4
a367 1
<span class="type">lwres_gabnresponse_t</span>
d369 4
a372 1
<code class="function">lwres_gabnrequest_parse()</code>
d374 4
a377 1
<code class="function">lwres_gabnresponse_parse()</code>
d379 4
a382 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d385 4
a388 1
<span class="errorcode">LWRES_R_FAILURE</span>
d390 4
a393 1
<em class="structfield"><code>pktflags</code></em>
d395 25
a419 13
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526220"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3
)</span>
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gabn.html,v 1.6.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a54 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a79 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a104 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a129 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a144 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a159 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d167 1
a167 1
<a name="id2549528"></a><h2>DESCRIPTION</h2>
d282 1
a282 1
<a name="id2549720"></a><h2>RETURN VALUES</h2>
d320 1
a320 1
<a name="id2549853"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gabn.html,v 1.7.18.17 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d49 2
a50 3
<td>lwres_gabnrequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
d54 2
a55 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d59 1
a59 1
<td>lwres_buffer_t * </td>
d61 1
a61 1
<var class="pdparam">b</var><code>)</code>;</td>
d69 7
a75 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d79 2
a80 3
<td>lwres_gabnresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
d84 2
a85 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d89 1
a89 1
<td>lwres_buffer_t * </td>
d91 1
a91 1
<var class="pdparam">b</var><code>)</code>;</td>
d99 7
a105 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d109 2
a110 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d114 2
a115 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d119 1
a119 1
<td>lwres_gabnrequest_t ** </td>
d121 1
a121 1
<var class="pdparam">structp</var><code>)</code>;</td>
d129 7
a135 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d139 2
a140 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d144 2
a145 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d149 1
a149 1
<td>lwres_gabnresponse_t ** </td>
d151 1
a151 1
<var class="pdparam">structp</var><code>)</code>;</td>
d159 7
a165 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d169 1
a169 1
<td>lwres_gabnresponse_t ** </td>
d171 1
a171 1
<var class="pdparam">structp</var><code>)</code>;</td>
d179 7
a185 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d189 1
a189 1
<td>lwres_gabnrequest_t ** </td>
d191 1
a191 1
<var class="pdparam">structp</var><code>)</code>;</td>
d197 1
a197 1
<a name="id2543522"></a><h2>DESCRIPTION</h2>
d199 4
a202 4
      These are low-level routines for creating and parsing
      lightweight resolver name-to-address lookup request and
      response messages.
    </p>
d204 12
a215 12
      There are four main functions for the getaddrbyname opcode.
      One render function converts a getaddrbyname request structure &#8212;
      <span class="type">lwres_gabnrequest_t</span> &#8212;
      to the lighweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a getaddrbyname request structure.
      Another render function converts the getaddrbyname response structure
      &#8212; <span class="type">lwres_gabnresponse_t</span> &#8212;
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a getaddrbyname response structure.
    </p>
d217 4
a220 4
      These structures are defined in
      <code class="filename">&lt;lwres/lwres.h&gt;</code>.
      They are shown below.
    </p>
d223 1
a223 4
</pre>
<p>
    </p>
<pre class="programlisting">
d226 1
a226 4
</pre>
<p>
    </p>
<pre class="programlisting">
d233 1
a233 4
</pre>
<p>
    </p>
<pre class="programlisting">
d248 13
a260 7
    </p>
<p><code class="function">lwres_gabnrequest_render()</code>
      uses resolver context <em class="parameter"><code>ctx</code></em> to convert
      getaddrbyname request structure <em class="parameter"><code>req</code></em> to
      canonical format.  The packet header structure
      <em class="parameter"><code>pkt</code></em> is initialised and transferred to
      buffer <em class="parameter"><code>b</code></em>.
d262 24
a285 15
      The contents of <em class="parameter"><code>*req</code></em> are then appended to
      the buffer in canonical format.
      <code class="function">lwres_gabnresponse_render()</code> performs the
      same task, except it converts a getaddrbyname response structure
      <span class="type">lwres_gabnresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_gabnrequest_parse()</code>
      uses context <em class="parameter"><code>ctx</code></em> to convert the contents
      of packet <em class="parameter"><code>pkt</code></em> to a
      <span class="type">lwres_gabnrequest_t</span> structure.  Buffer
      <em class="parameter"><code>b</code></em> provides space to be used for storing
      this structure.  When the function succeeds, the resulting
      <span class="type">lwres_gabnrequest_t</span> is made available through
      <em class="parameter"><code>*structp</code></em>.
d287 19
a305 10
      <code class="function">lwres_gabnresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_gabnrequest_parse()</code>
      except it yields a <span class="type">lwres_gabnresponse_t</span> structure.
    </p>
<p><code class="function">lwres_gabnresponse_free()</code>
      and <code class="function">lwres_gabnrequest_free()</code> release the
      memory in resolver context <em class="parameter"><code>ctx</code></em> that was
      allocated to the <span class="type">lwres_gabnresponse_t</span> or
      <span class="type">lwres_gabnrequest_t</span> structures referenced via
      <em class="parameter"><code>structp</code></em>.
d307 3
a309 3
      Any memory associated with ancillary buffers and strings for
      those structures is also discarded.
    </p>
d312 1
a312 1
<a name="id2543667"></a><h2>RETURN VALUES</h2>
d314 34
a347 34
      The getaddrbyname opcode functions
      <code class="function">lwres_gabnrequest_render()</code>,
      <code class="function">lwres_gabnresponse_render()</code>
      <code class="function">lwres_gabnrequest_parse()</code>
      and
      <code class="function">lwres_gabnresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <em class="parameter"><code>b</code></em>
      is too small to accommodate the packet header or the
      <span class="type">lwres_gabnrequest_t</span>
      and
      <span class="type">lwres_gabnresponse_t</span>
      structures.
      <code class="function">lwres_gabnrequest_parse()</code>
      and
      <code class="function">lwres_gabnresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <em class="structfield"><code>pktflags</code></em>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
d350 5
a354 3
<a name="id2543733"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>
    </p>
@


