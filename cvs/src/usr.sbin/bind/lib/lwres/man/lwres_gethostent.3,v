head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.5.0.36
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.32
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.34
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.26
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.30
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.28
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.24
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.22
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.20
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.18
	OPENBSD_5_0:1.1.1.5.0.16
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.14
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.12
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.8
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.10
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.6
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.4
	OPENBSD_4_4_BASE:1.1.1.5
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.2
	OPENBSD_4_3_BASE:1.1.1.5
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.1.1.4.0.4
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.2
	OPENBSD_4_1_BASE:1.1.1.4
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.05;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.32;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.26;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.57;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"
.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.TH "LWRES_GETHOSTENT" "3" "Jun 30, 2000" "BIND9" ""
.SH NAME
lwres_gethostbyname, lwres_gethostbyname2, lwres_gethostbyaddr, lwres_gethostent, lwres_sethostent, lwres_endhostent, lwres_gethostbyname_r, lwres_gethostbyaddr_r, lwres_gethostent_r, lwres_sethostent_r, lwres_endhostent_r \- lightweight resolver get network host entry
.SH SYNOPSIS
\fB#include <lwres/netdb.h>
.sp
.na
struct hostent *
lwres_gethostbyname(const char *name);
.ad
.sp
.na
struct hostent *
lwres_gethostbyname2(const char *name, int af);
.ad
.sp
.na
struct hostent *
lwres_gethostbyaddr(const char *addr, int len, int type);
.ad
.sp
.na
struct hostent *
lwres_gethostent(void);
.ad
.sp
.na
void
lwres_sethostent(int stayopen);
.ad
.sp
.na
void
lwres_endhostent(void);
.ad
.sp
.na
struct hostent *
lwres_gethostbyname_r(const char *name, struct hostent *resbuf, char *buf, int buflen, int *error);
.ad
.sp
.na
struct hostent *
lwres_gethostbyaddr_r(const char *addr, int len, int type, struct hostent *resbuf, char *buf, int buflen, int *error);
.ad
.sp
.na
struct hostent *
lwres_gethostent_r(struct hostent *resbuf, char *buf, int buflen, int *error);
.ad
.sp
.na
void
lwres_sethostent_r(int stayopen);
.ad
.sp
.na
void
lwres_endhostent_r(void);
.ad
\fR
.SH "DESCRIPTION"
.PP
These functions provide hostname-to-address and
address-to-hostname lookups by means of the lightweight resolver.
They are similar to the standard
\fBgethostent\fR(3)
functions provided by most operating systems.
They use a
\fBstruct hostent\fR
which is usually defined in
\fI<namedb.h>\fR.
.sp
.nf
struct  hostent {
        char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
};
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
.sp
.fi
.PP
The members of this structure are:
.TP
\fBh_name\fR
The official (canonical) name of the host.
.TP
\fBh_aliases\fR
A NULL-terminated array of alternate names (nicknames) for the host.
.TP
\fBh_addrtype\fR
The type of address being returned \(em
\fBPF_INET\fR
or
\fBPF_INET6\fR.
.TP
\fBh_length\fR
The length of the address in bytes.
.TP
\fBh_addr_list\fR
A \fBNULL\fR
terminated array of network addresses for the host.
Host addresses are returned in network byte order.
.PP
For backward compatibility with very old software,
h_addr
is the first address in
h_addr_list.
.PP
\fBlwres_gethostent()\fR,
\fBlwres_sethostent()\fR,
\fBlwres_endhostent()\fR,
\fBlwres_gethostent_r()\fR,
\fBlwres_sethostent_r()\fR
and
\fBlwres_endhostent_r()\fR
provide iteration over the known host entries on systems that
provide such functionality through facilities like
\fI/etc/hosts\fR
or NIS. The lightweight resolver does not currently implement
these functions; it only provides them as stub functions that always
return failure.
.PP
\fBlwres_gethostbyname()\fR and
\fBlwres_gethostbyname2()\fR look up the hostname
\fIname\fR.
\fBlwres_gethostbyname()\fR always looks for an IPv4
address while \fBlwres_gethostbyname2()\fR looks for an
address of protocol family \fIaf\fR: either
\fBPF_INET\fR or \fBPF_INET6\fR \(em IPv4 or IPV6
addresses respectively. Successful calls of the functions return a
\fBstruct hostent\fRfor the name that was looked up.
\fBNULL\fR is returned if the lookups by
\fBlwres_gethostbyname()\fR or
\fBlwres_gethostbyname2()\fR fail.
.PP
Reverse lookups of addresses are performed by
\fBlwres_gethostbyaddr()\fR.
\fIaddr\fR is an address of length
\fIlen\fR bytes and protocol family
\fItype\fR \(em \fBPF_INET\fR or
\fBPF_INET6\fR.
\fBlwres_gethostbyname_r()\fR is a thread-safe function
for forward lookups. If an error occurs, an error code is returned in
\fI*error\fR.
\fIresbuf\fR is a pointer to a \fBstruct
hostent\fR which is initialised by a successful call to
\fBlwres_gethostbyname_r()\fR .
\fIbuf\fR is a buffer of length
\fIlen\fR bytes which is used to store the
h_name, h_aliases, and
h_addr_list elements of the \fBstruct
hostent\fR returned in \fIresbuf\fR.
Successful calls to \fBlwres_gethostbyname_r()\fR
return \fIresbuf\fR,
which is a pointer to the \fBstruct hostent\fR it created.
.PP
\fBlwres_gethostbyaddr_r()\fR is a thread-safe function
that performs a reverse lookup of address \fIaddr\fR
which is \fIlen\fR bytes long and is of protocol
family \fItype\fR \(em \fBPF_INET\fR or
\fBPF_INET6\fR. If an error occurs, the error code is returned
in \fI*error\fR. The other function parameters are
identical to those in \fBlwres_gethostbyname_r()\fR.
\fIresbuf\fR is a pointer to a \fBstruct
hostent\fR which is initialised by a successful call to
\fBlwres_gethostbyaddr_r()\fR.
\fIbuf\fR is a buffer of length
\fIlen\fR bytes which is used to store the
h_name, h_aliases, and
h_addr_list elements of the \fBstruct
hostent\fR returned in \fIresbuf\fR. Successful
calls to \fBlwres_gethostbyaddr_r()\fR return
\fIresbuf\fR, which is a pointer to the
\fBstruct hostent()\fR it created.
.SH "RETURN VALUES"
.PP
The functions
\fBlwres_gethostbyname()\fR,
\fBlwres_gethostbyname2()\fR,
\fBlwres_gethostbyaddr()\fR,
and
\fBlwres_gethostent()\fR
return NULL to indicate an error. In this case the global variable
\fBlwres_h_errno\fR
will contain one of the following error codes defined in
\fI<lwres/netdb.h>\fR:
.TP
\fBHOST_NOT_FOUND\fR
The host or address was not found.
.TP
\fBTRY_AGAIN\fR
A recoverable error occurred, e.g., a timeout.
Retrying the lookup may succeed.
.TP
\fBNO_RECOVERY\fR
A non-recoverable error occurred.
.TP
\fBNO_DATA\fR
The name exists, but has no address information
associated with it (or vice versa in the case
of a reverse lookup). The code NO_ADDRESS
is accepted as a synonym for NO_DATA for backwards
compatibility.
.PP
\fBlwres_hstrerror\fR(3)
translates these error codes to suitable error messages.
.PP
\fBlwres_gethostent()\fR
and
\fBlwres_gethostent_r()\fR
always return
\fBNULL\fR.
.PP
Successful calls to \fBlwres_gethostbyname_r()\fR and
\fBlwres_gethostbyaddr_r()\fR return
\fIresbuf\fR, a pointer to the \fBstruct
hostent\fR that was initialised by these functions. They return
\fBNULL\fR if the lookups fail or if \fIbuf\fR
was too small to hold the list of addresses and names referenced by
the h_name, h_aliases, and
h_addr_list elements of the \fBstruct
hostent\fR. If \fIbuf\fR was too small, both
\fBlwres_gethostbyname_r()\fR and
\fBlwres_gethostbyaddr_r()\fR set the global variable
\fBerrno\fR to ERANGE.
.SH "SEE ALSO"
.PP
\fBgethostent\fR(3),
\fBlwres_getipnode\fR(3),
\fBlwres_hstrerror\fR(3)
.SH "BUGS"
.PP
\fBlwres_gethostbyname()\fR,
\fBlwres_gethostbyname2()\fR,
\fBlwres_gethostbyaddr()\fR
and
\fBlwres_endhostent()\fR
are not thread safe; they return pointers to static data and 
provide error codes through a global variable.
Thread-safe versions for name and address lookup are provided by
\fBlwres_gethostbyname_r()\fR,
and
\fBlwres_gethostbyaddr_r()\fR
respectively.
.PP
The resolver daemon does not currently support any non-DNS
name services such as 
\fI/etc/hosts\fR
or
\fBNIS\fR,
consequently the above functions don't, either.
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d1 2
a2 2
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2001  Internet Software Consortium.
d8 8
a15 9
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $ISC: lwres_gethostent.3,v 1.16.2.1.8.1 2004/03/06 07:41:43 marka Exp $
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 3
a3 3
.\" Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2001 Internet Software Consortium.
.\" 
d7 1
a7 1
.\" 
d10 1
a10 1
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d16 1
a16 1
.\" $ISC: lwres_gethostent.3,v 1.16.2.1.8.5 2005/10/13 02:33:53 marka Exp $
d18 2
a19 12
.hy 0
.ad l
.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "LWRES_GETHOSTENT" "3" "Jun 30, 2000" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
d21 58
a78 26
.SH "SYNOPSIS"
.nf
#include <lwres/netdb.h>
.fi
.HP 37
\fBstruct\ hostent\ *\ \fBlwres_gethostbyname\fR\fR\fB(\fR\fBconst\ char\ *name\fR\fB);\fR
.HP 38
\fBstruct\ hostent\ *\ \fBlwres_gethostbyname2\fR\fR\fB(\fR\fBconst\ char\ *name\fR\fB, \fR\fBint\ af\fR\fB);\fR
.HP 37
\fBstruct\ hostent\ *\ \fBlwres_gethostbyaddr\fR\fR\fB(\fR\fBconst\ char\ *addr\fR\fB, \fR\fBint\ len\fR\fB, \fR\fBint\ type\fR\fB);\fR
.HP 34
\fBstruct\ hostent\ *\ \fBlwres_gethostent\fR\fR\fB(\fR\fBvoid\fR\fB);\fR
.HP 22
\fBvoid\ \fBlwres_sethostent\fR\fR\fB(\fR\fBint\ stayopen\fR\fB);\fR
.HP 22
\fBvoid\ \fBlwres_endhostent\fR\fR\fB(\fR\fBvoid\fR\fB);\fR
.HP 39
\fBstruct\ hostent\ *\ \fBlwres_gethostbyname_r\fR\fR\fB(\fR\fBconst\ char\ *name\fR\fB, \fR\fBstruct\ hostent\ *resbuf\fR\fB, \fR\fBchar\ *buf\fR\fB, \fR\fBint\ buflen\fR\fB, \fR\fBint\ *error\fR\fB);\fR
.HP 39
\fBstruct\ hostent\ *\ \fBlwres_gethostbyaddr_r\fR\fR\fB(\fR\fBconst\ char\ *addr\fR\fB, \fR\fBint\ len\fR\fB, \fR\fBint\ type\fR\fB, \fR\fBstruct\ hostent\ *resbuf\fR\fB, \fR\fBchar\ *buf\fR\fB, \fR\fBint\ buflen\fR\fB, \fR\fBint\ *error\fR\fB);\fR
.HP 36
\fBstruct\ hostent\ *\ \fBlwres_gethostent_r\fR\fR\fB(\fR\fBstruct\ hostent\ *resbuf\fR\fB, \fR\fBchar\ *buf\fR\fB, \fR\fBint\ buflen\fR\fB, \fR\fBint\ *error\fR\fB);\fR
.HP 24
\fBvoid\ \fBlwres_sethostent_r\fR\fR\fB(\fR\fBint\ stayopen\fR\fB);\fR
.HP 24
\fBvoid\ \fBlwres_endhostent_r\fR\fR\fB(\fR\fBvoid\fR\fB);\fR
d81 6
a86 3
These functions provide hostname\-to\-address and address\-to\-hostname lookups by means of the lightweight resolver. They are similar to the standard
\fBgethostent\fR(3 )
functions provided by most operating systems. They use a
d100 1
a101 1
.sp
d109 1
a109 1
A NULL\-terminated array of alternate names (nicknames) for the host.
d121 3
a123 3
A
\fBNULL\fR
terminated array of network addresses for the host. Host addresses are returned in network byte order.
d126 1
a126 1
\fBh_addr\fR
d128 1
a128 1
\fBh_addr_list.\fR
d137 2
a138 1
provide iteration over the known host entries on systems that provide such functionality through facilities like
d140 3
a142 1
or NIS. The lightweight resolver does not currently implement these functions; it only provides them as stub functions that always return failure.
d144 2
a145 4
\fBlwres_gethostbyname()\fR
and
\fBlwres_gethostbyname2()\fR
look up the hostname
d147 5
a151 9
\fBlwres_gethostbyname()\fR
always looks for an IPv4 address while
\fBlwres_gethostbyname2()\fR
looks for an address of protocol family
\fIaf\fR: either
\fBPF_INET\fR
or
\fBPF_INET6\fR
\(em IPv4 or IPV6 addresses respectively. Successful calls of the functions return a
d153 3
a155 6
\fBNULL\fR
is returned if the lookups by
\fBlwres_gethostbyname()\fR
or
\fBlwres_gethostbyname2()\fR
fail.
d159 3
a161 8
\fIaddr\fR
is an address of length
\fIlen\fR
bytes and protocol family
\fItype\fR
\(em
\fBPF_INET\fR
or
d163 2
a164 2
\fBlwres_gethostbyname_r()\fR
is a thread\-safe function for forward lookups. If an error occurs, an error code is returned in
d166 21
a186 40
\fIresbuf\fR
is a pointer to a
\fBstruct hostent\fR
which is initialised by a successful call to
\fBlwres_gethostbyname_r()\fR
.
\fIbuf\fR
is a buffer of length
\fIlen\fR
bytes which is used to store the
\fBh_name\fR,
\fBh_aliases\fR, and
\fBh_addr_list\fR
elements of the
\fBstruct hostent\fR
returned in
\fIresbuf\fR. Successful calls to
\fBlwres_gethostbyname_r()\fR
return
\fIresbuf\fR, which is a pointer to the
\fBstruct hostent\fR
it created.
.PP
\fBlwres_gethostbyaddr_r()\fR
is a thread\-safe function that performs a reverse lookup of address
\fIaddr\fR
which is
\fIlen\fR
bytes long and is of protocol family
\fItype\fR
\(em
\fBPF_INET\fR
or
\fBPF_INET6\fR. If an error occurs, the error code is returned in
\fI*error\fR. The other function parameters are identical to those in
\fBlwres_gethostbyname_r()\fR.
\fIresbuf\fR
is a pointer to a
\fBstruct hostent\fR
which is initialised by a successful call to
d188 6
a193 13
\fIbuf\fR
is a buffer of length
\fIlen\fR
bytes which is used to store the
\fBh_name\fR,
\fBh_aliases\fR, and
\fBh_addr_list\fR
elements of the
\fBstruct hostent\fR
returned in
\fIresbuf\fR. Successful calls to
\fBlwres_gethostbyaddr_r()\fR
return
d195 1
a195 2
\fBstruct hostent()\fR
it created.
d201 2
a202 1
\fBlwres_gethostbyaddr()\fR, and
d213 2
a214 1
A recoverable error occurred, e.g., a timeout. Retrying the lookup may succeed.
d217 1
a217 1
A non\-recoverable error occurred.
d220 5
a224 1
The name exists, but has no address information associated with it (or vice versa in the case of a reverse lookup). The code NO_ADDRESS is accepted as a synonym for NO_DATA for backwards compatibility.
d226 1
a226 1
\fBlwres_hstrerror\fR(3 )
d235 12
a246 26
Successful calls to
\fBlwres_gethostbyname_r()\fR
and
\fBlwres_gethostbyaddr_r()\fR
return
\fIresbuf\fR, a pointer to the
\fBstruct hostent\fR
that was initialised by these functions. They return
\fBNULL\fR
if the lookups fail or if
\fIbuf\fR
was too small to hold the list of addresses and names referenced by the
\fBh_name\fR,
\fBh_aliases\fR, and
\fBh_addr_list\fR
elements of the
\fBstruct hostent\fR. If
\fIbuf\fR
was too small, both
\fBlwres_gethostbyname_r()\fR
and
\fBlwres_gethostbyaddr_r()\fR
set the global variable
\fBerrno\fR
to
\fBERANGE\fR.
d251 1
a251 1
\fBlwres_hstrerror\fR(3 )
d259 5
a263 2
are not thread safe; they return pointers to static data and provide error codes through a global variable. Thread\-safe versions for name and address lookup are provided by
\fBlwres_gethostbyname_r()\fR, and
d267 2
a268 1
The resolver daemon does not currently support any non\-DNS name services such as
d271 2
a272 1
\fBNIS\fR, consequently the above functions don't, either.
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d16 1
a16 1
.\" $ISC: lwres_gethostent.3,v 1.16.2.1.8.6 2006/06/29 13:02:31 marka Exp $
d20 4
a23 7
.\"     Title: lwres_gethostent
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
.\"      Date: Jun 30, 2000
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
d36 1
a36 1
.BI "struct hostent * lwres_gethostbyname(const\ char\ *name);"
d38 1
a38 1
.BI "struct hostent * lwres_gethostbyname2(const\ char\ *name, int\ af);"
d40 1
a40 1
.BI "struct hostent * lwres_gethostbyaddr(const\ char\ *addr, int\ len, int\ type);"
d42 1
a42 1
.BI "struct hostent * lwres_gethostent(void);"
d44 1
a44 1
.BI "void lwres_sethostent(int\ stayopen);"
d46 1
a46 1
.BI "void lwres_endhostent(void);"
d48 1
a48 1
.BI "struct hostent * lwres_gethostbyname_r(const\ char\ *name, struct\ hostent\ *resbuf, char\ *buf, int\ buflen, int\ *error);"
d50 1
a50 1
.BI "struct hostent * lwres_gethostbyaddr_r(const\ char\ *addr, int\ len, int\ type, struct\ hostent\ *resbuf, char\ *buf, int\ buflen, int\ *error);"
d52 1
a52 1
.BI "struct hostent * lwres_gethostent_r(struct\ hostent\ *resbuf, char\ *buf, int\ buflen, int\ *error);"
d54 1
a54 1
.BI "void lwres_sethostent_r(int\ stayopen);"
d56 1
a56 1
.BI "void lwres_endhostent_r(void);"
a65 1
.RS 3n
a75 1
.RE
d79 1
a79 1
.TP 3n
d82 1
a82 1
.TP 3n
d85 1
a85 1
.TP 3n
d91 1
a91 1
.TP 3n
d94 1
a94 1
.TP 3n
d220 1
a220 1
.TP 3n
d223 1
a223 1
.TP 3n
d226 1
a226 1
.TP 3n
d229 1
a229 1
.TP 3n
a288 2
.SH "COPYRIGHT"
Copyright \(co 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d1 1
a1 1
.\" Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d16 1
a16 1
.\" $ISC: lwres_gethostent.3,v 1.19.18.10 2007/01/30 00:23:45 marka Exp $
d22 1
a22 1
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
d39 1
a39 1
.BI "struct hostent * lwres_gethostbyname(const\ char\ *" "name" ");"
d41 1
a41 1
.BI "struct hostent * lwres_gethostbyname2(const\ char\ *" "name" ", int\ " "af" ");"
d43 1
a43 1
.BI "struct hostent * lwres_gethostbyaddr(const\ char\ *" "addr" ", int\ " "len" ", int\ " "type" ");"
d47 1
a47 1
.BI "void lwres_sethostent(int\ " "stayopen" ");"
d51 1
a51 1
.BI "struct hostent * lwres_gethostbyname_r(const\ char\ *" "name" ", struct\ hostent\ *" "resbuf" ", char\ *" "buf" ", int\ " "buflen" ", int\ *" "error" ");"
d53 1
a53 1
.BI "struct hostent * lwres_gethostbyaddr_r(const\ char\ *" "addr" ", int\ " "len" ", int\ " "type" ", struct\ hostent\ *" "resbuf" ", char\ *" "buf" ", int\ " "buflen" ", int\ *" "error" ");"
d55 1
a55 1
.BI "struct hostent * lwres_gethostent_r(struct\ hostent\ *" "resbuf" ", char\ *" "buf" ", int\ " "buflen" ", int\ *" "error" ");"
d57 1
a57 1
.BI "void lwres_sethostent_r(int\ " "stayopen" ");"
d63 1
a63 1
\fBgethostent\fR(3)
d68 2
a69 2
.PP
.RS 4
d84 1
a84 1
.PP
a85 1
.RS 4
d87 1
a87 2
.RE
.PP
a88 1
.RS 4
d90 1
a90 2
.RE
.PP
a91 1
.RS 4
d96 1
a96 2
.RE
.PP
a97 1
.RS 4
d99 1
a99 2
.RE
.PP
a100 1
.RS 4
a103 1
.RE
d161 2
a162 1
\fBlwres_gethostbyname_r()\fR.
d225 1
a225 1
.PP
a226 1
.RS 4
d228 1
a228 2
.RE
.PP
a229 1
.RS 4
d231 1
a231 2
.RE
.PP
a232 1
.RS 4
d234 1
a234 2
.RE
.PP
a235 1
.RS 4
a236 1
.RE
d238 1
a238 1
\fBlwres_hstrerror\fR(3)
d277 1
a277 1
\fBlwres_hstrerror\fR(3)
d295 1
a295 4
Copyright \(co 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2001 Internet Software Consortium.
.br
@


