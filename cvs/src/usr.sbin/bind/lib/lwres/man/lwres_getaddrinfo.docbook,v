head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.42
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.40
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.05;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.32;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--
 - Copyright (C) 2001  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_getaddrinfo.docbook,v 1.5 2001/06/18 22:06:53 gson Exp $ -->

<refentry>

<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
<refentrytitle>lwres_getaddrinfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lwres_getaddrinfo</refname>
<refname>lwres_freeaddrinfo</refname>
<refpurpose>socket address structure to host and service name</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>#include &lt;lwres/netdb.h&gt;</funcsynopsisinfo>
<funcprototype>
<funcdef>
int
<function>lwres_getaddrinfo</function></funcdef>
<paramdef>const char *hostname</paramdef>
<paramdef>const char *servname</paramdef>
<paramdef>const struct addrinfo *hints</paramdef>
<paramdef>struct addrinfo **res</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_freeaddrinfo</function></funcdef>
<paramdef>struct addrinfo *ai</paramdef>
</funcprototype>
</funcsynopsis>

<para>
If the operating system does not provide a
<type>struct addrinfo</type>,
the following structure is used:

<programlisting>
struct  addrinfo {
        int             ai_flags;       /* AI_PASSIVE, AI_CANONNAME */
        int             ai_family;      /* PF_xxx */
        int             ai_socktype;    /* SOCK_xxx */
        int             ai_protocol;    /* 0 or IPPROTO_xxx for IPv4 and IPv6 */
        size_t          ai_addrlen;     /* length of ai_addr */
        char            *ai_canonname;  /* canonical name for hostname */
        struct sockaddr *ai_addr;       /* binary address */
        struct addrinfo *ai_next;       /* next structure in linked list */
};
</programlisting>
</para>

</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>
<para>
<function>lwres_getaddrinfo()</function>
is used to get a list of IP addresses and port numbers for host
<parameter>hostname</parameter>
and service
<parameter>servname</parameter>.

The function is the lightweight resolver's implementation of
<function>getaddrinfo()</function>
as defined in RFC2133.
<parameter>hostname</parameter>
and
<parameter>servname</parameter>
are pointers to null-terminated
strings or
<type>NULL</type>.

<parameter>hostname</parameter>
is either a host name or a numeric host address string: a dotted decimal
IPv4 address or an IPv6 address.
<parameter>servname</parameter>
is either a decimal port number or a service name as listed in
<filename>/etc/services</filename>.
</para>

<para>
<parameter>hints</parameter>
is an optional pointer to a
<type>struct addrinfo</type>.
This structure can be used to provide hints concerning the type of socket
that the caller supports or wishes to use.
The caller can supply the following structure elements in
<parameter>*hints</parameter>:

<variablelist>
<varlistentry><term><constant>ai_family</constant></term>
<listitem>
<para>The protocol family that should be used.
When
<constant>ai_family</constant>
is set to
<type>PF_UNSPEC</type>,
it means the caller will accept any protocol family supported by the
operating system.
</para></listitem></varlistentry>
<varlistentry><term><constant>ai_socktype</constant></term>
<listitem>
<para>
denotes the type of socket &mdash;
<type>SOCK_STREAM</type>,
<type>SOCK_DGRAM</type>
or
<type>SOCK_RAW</type>
&mdash; that is wanted.
When
<constant>ai_socktype</constant>
is zero the caller will accept any socket type.
</para>
</listitem>
</varlistentry>
<varlistentry><term><constant>ai_protocol</constant></term>
<listitem>
<para>
indicates which transport protocol is wanted: IPPROTO_UDP or 
IPPROTO_TCP.
If
<constant>ai_protocol</constant>
is zero the caller will accept any protocol.
</para>
</listitem>
</varlistentry>
<varlistentry><term><constant>ai_flags</constant></term>
<listitem>
<para>
Flag bits.
If the
<type>AI_CANONNAME</type>
bit is set, a successful call to
<function>lwres_getaddrinfo()</function>
will return a a null-terminated string containing the canonical name
of the specified hostname in
<constant>ai_canonname</constant>
of the first
<type>addrinfo</type>
structure returned.
Setting the
<type>AI_PASSIVE</type>
bit indicates that the returned socket address structure is intended
for used in a call to
<citerefentry>
<refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>.

In this case, if the hostname argument is a
<type>NULL</type>
pointer, then the IP address portion of the socket
address structure will be set to
<type>INADDR_ANY</type>
for an IPv4 address or
<type>IN6ADDR_ANY_INIT</type>
for an IPv6 address.
</para>
<para>
When
<constant>ai_flags</constant>
does not set the
<type>AI_PASSIVE</type>
bit, the returned socket address structure will be ready
for use in a call to
<citerefentry>
<refentrytitle>connect</refentrytitle><manvolnum>2
</manvolnum>
</citerefentry>
for a connection-oriented protocol or
<citerefentry>
<refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>sendto</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

or
<citerefentry>
<refentrytitle>sendmsg</refentrytitle><manvolnum>2
</manvolnum>
</citerefentry>
if a connectionless protocol was chosen.
The IP address portion of the socket address structure will be
set to the loopback address if
<parameter>hostname</parameter>
is a
<type>NULL</type>
pointer and
<type>AI_PASSIVE</type>
is not set in
<constant>ai_flags</constant>.
</para>
<para>
If
<constant>ai_flags</constant>
is set to
<type>AI_NUMERICHOST</type>
it indicates that
<parameter>hostname</parameter>
should be treated as a numeric string defining an IPv4 or IPv6 address
and no name resolution should be attempted.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>

<para>
All other elements of the <type>struct addrinfo</type> passed
via <parameter>hints</parameter> must be zero.
</para>

<para>
A <parameter>hints</parameter> of <type>NULL</type> is treated as if
the caller provided a <type>struct addrinfo</type> initialized to zero
with <constant>ai_family</constant>set to
<constant>PF_UNSPEC</constant>.
</para>

<para>
After a successful call to
<function>lwres_getaddrinfo()</function>,
<parameter>*res</parameter>
is a pointer to a linked list of one or more
<type>addrinfo</type>
structures.
Each
<type>struct addrinfo</type>
in this list cn be processed by following
the
<constant>ai_next</constant>
pointer, until a
<type>NULL</type>
pointer is encountered.
The three members
<constant>ai_family</constant>,
<constant>ai_socktype</constant>,
and
<constant>ai_protocol</constant>
in each
returned
<type>addrinfo</type>
structure contain the corresponding arguments for a call to
<citerefentry>
<refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>.
For each
<type>addrinfo</type>
structure in the list, the
<constant>ai_addr</constant>
member points to a filled-in socket address structure of length
<constant>ai_addrlen</constant>.
</para>

<para>
All of the information returned by
<function>lwres_getaddrinfo()</function>
is dynamically allocated: the addrinfo structures, and the socket
address structures and canonical host name strings pointed to by the
<constant>addrinfo</constant>structures.
Memory allocated for the dynamically allocated structures created by
a successful call to
<function>lwres_getaddrinfo()</function>
is released by
<function>lwres_freeaddrinfo()</function>.
<parameter>ai</parameter>
is a pointer to a
<type>struct addrinfo</type>
created by a call to
<function>lwres_getaddrinfo()</function>.
</para>

</refsect1>

<refsect1>
<title>RETURN VALUES</title>
<para>
<function>lwres_getaddrinfo()</function>
returns zero on success or one of the error codes listed in
<citerefentry>
<refentrytitle>gai_strerror</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
if an error occurs.
If both
<parameter>hostname</parameter>
and
<parameter>servname</parameter>
are
<type>NULL</type>
<function>lwres_getaddrinfo()</function>
returns
<errorcode>EAI_NONAME</errorcode>.

</para>
</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>lwres</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_getaddrinfo</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_freeaddrinfo</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_gai_strerror</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>RFC2133</refentrytitle>
</citerefentry>,

<citerefentry>
<refentrytitle>getservbyname</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>sendto</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>sendmsg</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum>
</citerefentry>.
</para>

</refsect1>
</refentry>
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d3 1
a3 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_getaddrinfo.docbook,v 1.5.206.2 2004/03/06 08:15:39 marka Exp $ -->
d160 1
a160 1
will return a null-terminated string containing the canonical name
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_getaddrinfo.docbook,v 1.5.206.4 2005/05/12 21:36:14 sra Exp $ -->
a31 14

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_getaddrinfo.docbook,v 1.7.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d25 9
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_getaddrinfo</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d49 7
a55 7
  <refnamediv>
    <refname>lwres_getaddrinfo</refname>
    <refname>lwres_freeaddrinfo</refname>
    <refpurpose>socket address structure to host and service name</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
d58 1
a58 1
        <funcdef>
d61 5
a65 5
        <paramdef>const char *<parameter>hostname</parameter></paramdef>
        <paramdef>const char *<parameter>servname</parameter></paramdef>
        <paramdef>const struct addrinfo *<parameter>hints</parameter></paramdef>
        <paramdef>struct addrinfo **<parameter>res</parameter></paramdef>
        </funcprototype>
d67 1
a67 1
        <funcdef>
d70 2
a71 2
        <paramdef>struct addrinfo *<parameter>ai</parameter></paramdef>
      </funcprototype>
d74 6
a79 6
    <para>
      If the operating system does not provide a
      <type>struct addrinfo</type>,
      the following structure is used:
    </para>
    <para><programlisting>
d91 1
a91 1
    </para>
d93 1
a93 1
  </refsynopsisdiv>
d95 291
a385 2
  <refsect1>
    <title>DESCRIPTION</title>
d387 2
a388 290
    <para><function>lwres_getaddrinfo()</function>
      is used to get a list of IP addresses and port numbers for host
      <parameter>hostname</parameter> and service
      <parameter>servname</parameter>.

      The function is the lightweight resolver's implementation of
      <function>getaddrinfo()</function> as defined in RFC2133.
      <parameter>hostname</parameter> and
      <parameter>servname</parameter> are pointers to null-terminated
      strings or <type>NULL</type>.

      <parameter>hostname</parameter> is either a host name or a
      numeric host address string: a dotted decimal IPv4 address or an
      IPv6 address.  <parameter>servname</parameter> is either a
      decimal port number or a service name as listed in
      <filename>/etc/services</filename>.
    </para>

    <para><parameter>hints</parameter>
      is an optional pointer to a
      <type>struct addrinfo</type>.
      This structure can be used to provide hints concerning the type of
      socket
      that the caller supports or wishes to use.
      The caller can supply the following structure elements in
      <parameter>*hints</parameter>:

      <variablelist>
        <varlistentry>
          <term><constant>ai_family</constant></term>
          <listitem>
            <para>
              The protocol family that should be used.
              When
              <constant>ai_family</constant>
              is set to
              <type>PF_UNSPEC</type>,
              it means the caller will accept any protocol family supported by
              the
              operating system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>ai_socktype</constant></term>
          <listitem>
            <para>
              denotes the type of socket &mdash;
              <type>SOCK_STREAM</type>,
              <type>SOCK_DGRAM</type>
              or
              <type>SOCK_RAW</type>
              &mdash; that is wanted.
              When
              <constant>ai_socktype</constant>
              is zero the caller will accept any socket type.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>ai_protocol</constant></term>
          <listitem>
            <para>
              indicates which transport protocol is wanted: IPPROTO_UDP or
              IPPROTO_TCP.
              If
              <constant>ai_protocol</constant>
              is zero the caller will accept any protocol.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>ai_flags</constant></term>
          <listitem>
            <para>
              Flag bits.
              If the
              <type>AI_CANONNAME</type>
              bit is set, a successful call to
              <function>lwres_getaddrinfo()</function>
              will return a null-terminated string containing the canonical
              name
              of the specified hostname in
              <constant>ai_canonname</constant>
              of the first
              <type>addrinfo</type>
              structure returned.
              Setting the
              <type>AI_PASSIVE</type>
              bit indicates that the returned socket address structure is
              intended
              for used in a call to
              <citerefentry>
                <refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum>
              </citerefentry>.

              In this case, if the hostname argument is a
              <type>NULL</type>
              pointer, then the IP address portion of the socket
              address structure will be set to
              <type>INADDR_ANY</type>
              for an IPv4 address or
              <type>IN6ADDR_ANY_INIT</type>
              for an IPv6 address.
            </para>
            <para>
              When
              <constant>ai_flags</constant>
              does not set the
              <type>AI_PASSIVE</type>
              bit, the returned socket address structure will be ready
              for use in a call to
              <citerefentry>
                <refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum>
              </citerefentry>
              for a connection-oriented protocol or
              <citerefentry>
                <refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum>
              </citerefentry>,

              <citerefentry>
                <refentrytitle>sendto</refentrytitle><manvolnum>2</manvolnum>
              </citerefentry>,

              or
              <citerefentry>
                <refentrytitle>sendmsg</refentrytitle><manvolnum>2</manvolnum>
              </citerefentry>
              if a connectionless protocol was chosen.
              The IP address portion of the socket address structure will be
              set to the loopback address if
              <parameter>hostname</parameter>
              is a
              <type>NULL</type>
              pointer and
              <type>AI_PASSIVE</type>
              is not set in
              <constant>ai_flags</constant>.
            </para>
            <para>
              If
              <constant>ai_flags</constant>
              is set to
              <type>AI_NUMERICHOST</type>
              it indicates that
              <parameter>hostname</parameter>
              should be treated as a numeric string defining an IPv4 or IPv6
              address
              and no name resolution should be attempted.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
      All other elements of the <type>struct addrinfo</type> passed
      via <parameter>hints</parameter> must be zero.
    </para>

    <para>
      A <parameter>hints</parameter> of <type>NULL</type> is
      treated as if
      the caller provided a <type>struct addrinfo</type> initialized to zero
      with <constant>ai_family</constant>set to
      <constant>PF_UNSPEC</constant>.
    </para>

    <para>
      After a successful call to
      <function>lwres_getaddrinfo()</function>,
      <parameter>*res</parameter>
      is a pointer to a linked list of one or more
      <type>addrinfo</type>
      structures.
      Each
      <type>struct addrinfo</type>
      in this list cn be processed by following
      the
      <constant>ai_next</constant>
      pointer, until a
      <type>NULL</type>
      pointer is encountered.
      The three members
      <constant>ai_family</constant>,
      <constant>ai_socktype</constant>,
      and
      <constant>ai_protocol</constant>
      in each
      returned
      <type>addrinfo</type>
      structure contain the corresponding arguments for a call to
      <citerefentry>
        <refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>.
      For each
      <type>addrinfo</type>
      structure in the list, the
      <constant>ai_addr</constant>
      member points to a filled-in socket address structure of length
      <constant>ai_addrlen</constant>.
    </para>

    <para>
      All of the information returned by
      <function>lwres_getaddrinfo()</function>
      is dynamically allocated: the addrinfo structures, and the socket
      address structures and canonical host name strings pointed to by the
      <constant>addrinfo</constant>structures.
      Memory allocated for the dynamically allocated structures created by
      a successful call to
      <function>lwres_getaddrinfo()</function>
      is released by
      <function>lwres_freeaddrinfo()</function>.
      <parameter>ai</parameter>
      is a pointer to a
      <type>struct addrinfo</type>
      created by a call to
      <function>lwres_getaddrinfo()</function>.
    </para>

  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>

    <para><function>lwres_getaddrinfo()</function>
      returns zero on success or one of the error codes listed in
      <citerefentry>
        <refentrytitle>gai_strerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      if an error occurs.  If both <parameter>hostname</parameter> and
      <parameter>servname</parameter> are <type>NULL</type>
      <function>lwres_getaddrinfo()</function> returns
      <errorcode>EAI_NONAME</errorcode>.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>lwres</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getaddrinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_freeaddrinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_gai_strerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>RFC2133</refentrytitle>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>getservbyname</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>bind</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>connect</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>sendto</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>sendmsg</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>socket</refentrytitle><manvolnum>2</manvolnum>
      </citerefentry>.
    </para>

  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


