head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.5.0.40
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.36
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.32
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.34
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.26
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.30
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.28
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.24
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.22
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.20
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.18
	OPENBSD_5_0:1.1.1.5.0.16
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.14
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.12
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.8
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.10
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.6
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.4
	OPENBSD_4_4_BASE:1.1.1.5
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.2
	OPENBSD_4_3_BASE:1.1.1.5
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.1.1.4.0.4
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.2
	OPENBSD_4_1_BASE:1.1.1.4
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@.\" @;


1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.08;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.34;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.28;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.58;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@.\"
.\" Copyright (C) 2000, 2001  Internet Software Consortium.
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
.\" DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
.\" INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
.\" FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
.\" NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
.\" WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.TH "LWRES_NOOP" "3" "Jun 30, 2000" "BIND9" ""
.SH NAME
lwres_nooprequest_render, lwres_noopresponse_render, lwres_nooprequest_parse, lwres_noopresponse_parse, lwres_noopresponse_free, lwres_nooprequest_free \- lightweight resolver no-op message handling
.SH SYNOPSIS
\fB#include <lwres/lwres.h>
.sp
.na
lwres_result_t
lwres_nooprequest_render(lwres_context_t *ctx, lwres_nooprequest_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);
.ad
.sp
.na
lwres_result_t
lwres_noopresponse_render(lwres_context_t *ctx, lwres_noopresponse_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);
.ad
.sp
.na
lwres_result_t
lwres_nooprequest_parse(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_nooprequest_t **structp);
.ad
.sp
.na
lwres_result_t
lwres_noopresponse_parse(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_noopresponse_t **structp);
.ad
.sp
.na
void
lwres_noopresponse_free(lwres_context_t *ctx, lwres_noopresponse_t **structp);
.ad
.sp
.na
void
lwres_nooprequest_free(lwres_context_t *ctx, lwres_nooprequest_t **structp);
.ad
\fR
.SH "DESCRIPTION"
.PP
These are low-level routines for creating and parsing
lightweight resolver no-op request and response messages.
.PP
The no-op message is analogous to a \fBping\fR packet: 
a packet is sent to the resolver daemon and is simply echoed back.
The opcode is intended to allow a client to determine if the server is
operational or not.
.PP
There are four main functions for the no-op opcode.
One render function converts a no-op request structure \(em
\fBlwres_nooprequest_t\fR \(em
to the lighweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a no-op request structure.
Another render function converts the no-op response structure \(em
\fBlwres_noopresponse_t\fR
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a no-op response structure.
.PP
These structures are defined in
\fIlwres/lwres.h\fR.
They are shown below.
.sp
.nf
#define LWRES_OPCODE_NOOP       0x00000000U

typedef struct {
        lwres_uint16_t  datalength;
        unsigned char   *data;
} lwres_nooprequest_t;

typedef struct {
        lwres_uint16_t  datalength;
        unsigned char   *data;
} lwres_noopresponse_t;
.sp
.fi
Although the structures have different types, they are identical.
This is because the no-op opcode simply echos whatever data was sent:
the response is therefore identical to the request.
.PP
\fBlwres_nooprequest_render()\fR uses resolver
context \fIctx\fR to convert no-op request structure
\fIreq\fR to canonical format. The packet header
structure \fIpkt\fR is initialised and transferred to
buffer \fIb\fR. The contents of
\fI*req\fR are then appended to the buffer in
canonical format. \fBlwres_noopresponse_render()\fR
performs the same task, except it converts a no-op response structure
\fBlwres_noopresponse_t\fR to the lightweight resolver's
canonical format.
.PP
\fBlwres_nooprequest_parse()\fR uses context
\fIctx\fR to convert the contents of packet
\fIpkt\fR to a \fBlwres_nooprequest_t\fR
structure. Buffer \fIb\fR provides space to be used
for storing this structure. When the function succeeds, the resulting
\fBlwres_nooprequest_t\fR is made available through
\fI*structp\fR.
\fBlwres_noopresponse_parse()\fR offers the same
semantics as \fBlwres_nooprequest_parse()\fR except it
yields a \fBlwres_noopresponse_t\fR structure.
.PP
\fBlwres_noopresponse_free()\fR and
\fBlwres_nooprequest_free()\fR release the memory in
resolver context \fIctx\fR that was allocated to the
\fBlwres_noopresponse_t\fR or \fBlwres_nooprequest_t\fR
structures referenced via \fIstructp\fR.
.SH "RETURN VALUES"
.PP
The no-op opcode functions
\fBlwres_nooprequest_render()\fR,
\fBlwres_noopresponse_render()\fR
\fBlwres_nooprequest_parse()\fR
and
\fBlwres_noopresponse_parse()\fR
all return
LWRES_R_SUCCESS
on success.
They return
LWRES_R_NOMEMORY
if memory allocation fails.
LWRES_R_UNEXPECTEDEND
is returned if the available space in the buffer
\fIb\fR
is too small to accommodate the packet header or the
\fBlwres_nooprequest_t\fR
and
\fBlwres_noopresponse_t\fR
structures.
\fBlwres_nooprequest_parse()\fR
and
\fBlwres_noopresponse_parse()\fR
will return
LWRES_R_UNEXPECTEDEND
if the buffer is not empty after decoding the received packet.
These functions will return
LWRES_R_FAILURE
if
pktflags
in the packet header structure
\fBlwres_lwpacket_t\fR
indicate that the packet is not a response to an earlier query.
.SH "SEE ALSO"
.PP
\fBlwres_packet\fR(3)
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d1 1
a1 1
.\" Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 9
.\" THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
.\" REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
.\" AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
.\" INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
.\" LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
.\" OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
.\" PERFORMANCE OF THIS SOFTWARE.
.\"
.\" $ISC: lwres_noop.3,v 1.14.2.1.8.1 2004/03/06 07:41:44 marka Exp $
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 3
a3 3
.\" Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
.\" Copyright (C) 2000, 2001 Internet Software Consortium.
.\" 
d7 1
a7 1
.\" 
d10 1
a10 1
.\" AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d16 1
a16 1
.\" $ISC: lwres_noop.3,v 1.14.2.1.8.5 2005/10/13 02:33:54 marka Exp $
d18 36
a53 29
.hy 0
.ad l
.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "LWRES_NOOP" "3" "Jun 30, 2000" "BIND9" "BIND9"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
lwres_nooprequest_render, lwres_noopresponse_render, lwres_nooprequest_parse, lwres_noopresponse_parse, lwres_noopresponse_free, lwres_nooprequest_free \- lightweight resolver no\-op message handling
.SH "SYNOPSIS"
.nf
#include <lwres/lwres.h>
.fi
.HP 40
\fBlwres_result_t\ \fBlwres_nooprequest_render\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_nooprequest_t\ *req\fR\fB, \fR\fBlwres_lwpacket_t\ *pkt\fR\fB, \fR\fBlwres_buffer_t\ *b\fR\fB);\fR
.HP 41
\fBlwres_result_t\ \fBlwres_noopresponse_render\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_noopresponse_t\ *req\fR\fB, \fR\fBlwres_lwpacket_t\ *pkt\fR\fB, \fR\fBlwres_buffer_t\ *b\fR\fB);\fR
.HP 39
\fBlwres_result_t\ \fBlwres_nooprequest_parse\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_buffer_t\ *b\fR\fB, \fR\fBlwres_lwpacket_t\ *pkt\fR\fB, \fR\fBlwres_nooprequest_t\ **structp\fR\fB);\fR
.HP 40
\fBlwres_result_t\ \fBlwres_noopresponse_parse\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_buffer_t\ *b\fR\fB, \fR\fBlwres_lwpacket_t\ *pkt\fR\fB, \fR\fBlwres_noopresponse_t\ **structp\fR\fB);\fR
.HP 29
\fBvoid\ \fBlwres_noopresponse_free\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_noopresponse_t\ **structp\fR\fB);\fR
.HP 28
\fBvoid\ \fBlwres_nooprequest_free\fR\fR\fB(\fR\fBlwres_context_t\ *ctx\fR\fB, \fR\fBlwres_nooprequest_t\ **structp\fR\fB);\fR
d56 2
a57 1
These are low\-level routines for creating and parsing lightweight resolver no\-op request and response messages.
d59 12
a70 7
The no\-op message is analogous to a
\fBping\fR
packet: a packet is sent to the resolver daemon and is simply echoed back. The opcode is intended to allow a client to determine if the server is operational or not.
.PP
There are four main functions for the no\-op opcode. One render function converts a no\-op request structure \(em
\fBlwres_nooprequest_t\fR
\(em to the lighweight resolver's canonical format. It is complemented by a parse function that converts a packet in this canonical format to a no\-op request structure. Another render function converts the no\-op response structure \(em
d72 3
a74 1
to the canonical format. This is complemented by a parse function which converts a packet in canonical format to a no\-op response structure.
d77 2
a78 1
\fIlwres/lwres.h\fR. They are shown below.
d82 1
d87 1
d92 1
d94 21
a114 31
.sp
Although the structures have different types, they are identical. This is because the no\-op opcode simply echos whatever data was sent: the response is therefore identical to the request.
.PP
\fBlwres_nooprequest_render()\fR
uses resolver context
\fIctx\fR
to convert no\-op request structure
\fIreq\fR
to canonical format. The packet header structure
\fIpkt\fR
is initialised and transferred to buffer
\fIb\fR. The contents of
\fI*req\fR
are then appended to the buffer in canonical format.
\fBlwres_noopresponse_render()\fR
performs the same task, except it converts a no\-op response structure
\fBlwres_noopresponse_t\fR
to the lightweight resolver's canonical format.
.PP
\fBlwres_nooprequest_parse()\fR
uses context
\fIctx\fR
to convert the contents of packet
\fIpkt\fR
to a
\fBlwres_nooprequest_t\fR
structure. Buffer
\fIb\fR
provides space to be used for storing this structure. When the function succeeds, the resulting
\fBlwres_nooprequest_t\fR
is made available through
d116 9
a124 18
\fBlwres_noopresponse_parse()\fR
offers the same semantics as
\fBlwres_nooprequest_parse()\fR
except it yields a
\fBlwres_noopresponse_t\fR
structure.
.PP
\fBlwres_noopresponse_free()\fR
and
\fBlwres_nooprequest_free()\fR
release the memory in resolver context
\fIctx\fR
that was allocated to the
\fBlwres_noopresponse_t\fR
or
\fBlwres_nooprequest_t\fR
structures referenced via
\fIstructp\fR.
d127 1
a127 1
The no\-op opcode functions
d129 2
a130 1
\fBlwres_noopresponse_render()\fR\fBlwres_nooprequest_parse()\fR
d134 4
a137 3
\fBLWRES_R_SUCCESS\fR
on success. They return
\fBLWRES_R_NOMEMORY\fR
d139 1
a139 1
\fBLWRES_R_UNEXPECTEDEND\fR
d151 4
a154 3
\fBLWRES_R_UNEXPECTEDEND\fR
if the buffer is not empty after decoding the received packet. These functions will return
\fBLWRES_R_FAILURE\fR
d156 1
a156 1
\fBpktflags\fR
d162 1
a162 1
\fBlwres_packet\fR(3 )
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d16 1
a16 1
.\" $ISC: lwres_noop.3,v 1.14.2.1.8.6 2006/06/29 13:02:31 marka Exp $
d20 4
a23 7
.\"     Title: lwres_noop
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.70.1 <http://docbook.sf.net/>
.\"      Date: Jun 30, 2000
.\"    Manual: BIND9
.\"    Source: BIND9
.\"
d36 1
a36 1
.BI "lwres_result_t lwres_nooprequest_render(lwres_context_t\ *ctx, lwres_nooprequest_t\ *req, lwres_lwpacket_t\ *pkt, lwres_buffer_t\ *b);"
d38 1
a38 1
.BI "lwres_result_t lwres_noopresponse_render(lwres_context_t\ *ctx, lwres_noopresponse_t\ *req, lwres_lwpacket_t\ *pkt, lwres_buffer_t\ *b);"
d40 1
a40 1
.BI "lwres_result_t lwres_nooprequest_parse(lwres_context_t\ *ctx, lwres_buffer_t\ *b, lwres_lwpacket_t\ *pkt, lwres_nooprequest_t\ **structp);"
d42 1
a42 1
.BI "lwres_result_t lwres_noopresponse_parse(lwres_context_t\ *ctx, lwres_buffer_t\ *b, lwres_lwpacket_t\ *pkt, lwres_noopresponse_t\ **structp);"
d44 1
a44 1
.BI "void lwres_noopresponse_free(lwres_context_t\ *ctx, lwres_noopresponse_t\ **structp);"
d46 1
a46 1
.BI "void lwres_nooprequest_free(lwres_context_t\ *ctx, lwres_nooprequest_t\ **structp);"
a63 1
.RS 3n
a74 1
.RE
d129 1
a129 2
\fBlwres_noopresponse_render()\fR
\fBlwres_nooprequest_parse()\fR
a159 2
.SH "COPYRIGHT"
Copyright \(co 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d1 1
a1 1
.\" Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d16 1
a16 1
.\" $ISC: lwres_noop.3,v 1.17.18.11 2007/01/30 00:23:45 marka Exp $
d22 1
a22 1
.\" Generator: DocBook XSL Stylesheets v1.71.1 <http://docbook.sf.net/>
d39 1
a39 1
.BI "lwres_result_t lwres_nooprequest_render(lwres_context_t\ *" "ctx" ", lwres_nooprequest_t\ *" "req" ", lwres_lwpacket_t\ *" "pkt" ", lwres_buffer_t\ *" "b" ");"
d41 1
a41 1
.BI "lwres_result_t lwres_noopresponse_render(lwres_context_t\ *" "ctx" ", lwres_noopresponse_t\ *" "req" ", lwres_lwpacket_t\ *" "pkt" ", lwres_buffer_t\ *" "b" ");"
d43 1
a43 1
.BI "lwres_result_t lwres_nooprequest_parse(lwres_context_t\ *" "ctx" ", lwres_buffer_t\ *" "b" ", lwres_lwpacket_t\ *" "pkt" ", lwres_nooprequest_t\ **" "structp" ");"
d45 1
a45 1
.BI "lwres_result_t lwres_noopresponse_parse(lwres_context_t\ *" "ctx" ", lwres_buffer_t\ *" "b" ", lwres_lwpacket_t\ *" "pkt" ", lwres_noopresponse_t\ **" "structp" ");"
d47 1
a47 1
.BI "void lwres_noopresponse_free(lwres_context_t\ *" "ctx" ", lwres_noopresponse_t\ **" "structp" ");"
d49 1
a49 1
.BI "void lwres_nooprequest_free(lwres_context_t\ *" "ctx" ", lwres_nooprequest_t\ **" "structp" ");"
d66 2
a67 2
.PP
.RS 4
a69 6
.fi
.RE
.sp
.PP
.RS 4
.nf
a73 6
.fi
.RE
.sp
.PP
.RS 4
.nf
a80 1
.PP
d165 1
a165 1
\fBlwres_packet\fR(3)
d167 1
a167 4
Copyright \(co 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
.br
Copyright \(co 2000, 2001 Internet Software Consortium.
.br
@


