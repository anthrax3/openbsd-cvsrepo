head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.38
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.36
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.32
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.34
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.26
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.30
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.28
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.24
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.22
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.14.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.04;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.31;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.25;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.7
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_context.html,v 1.7.18.16 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_context</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_context_create, lwres_context_destroy, lwres_context_nextserial, lwres_context_initserial, lwres_context_freemem, lwres_context_allocmem, lwres_context_sendrecv &#8212; lightweight resolver context management</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_context_create</b>(</code></td>
<td>lwres_context_t ** </td>
<td>
<var class="pdparam">contextp</var>, </td>
</tr>
<tr>
<td> </td>
<td>void * </td>
<td>
<var class="pdparam">arg</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_malloc_t  </td>
<td>
<var class="pdparam">malloc_function</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_free_t  </td>
<td>
<var class="pdparam">free_function</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_context_destroy</b>(</code></td>
<td>lwres_context_t ** </td>
<td>
<var class="pdparam">contextp</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_initserial</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">serial</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint32_t
<b class="fsfunc">lwres_context_nextserial</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_freemem</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>void * </td>
<td>
<var class="pdparam">mem</var>, </td>
</tr>
<tr>
<td> </td>
<td>size_t  </td>
<td>
<var class="pdparam">len</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_allocmem</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>size_t  </td>
<td>
<var class="pdparam">len</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void *
<b class="fsfunc">lwres_context_sendrecv</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>void * </td>
<td>
<var class="pdparam">sendbase</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">sendlen</var>, </td>
</tr>
<tr>
<td> </td>
<td>void * </td>
<td>
<var class="pdparam">recvbase</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">recvlen</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">recvd_len</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543531"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_context_create()</code>
      creates a <span class="type">lwres_context_t</span> structure for use in
      lightweight resolver operations.  It holds a socket and other
      data needed for communicating with a resolver daemon.  The new
      <span class="type">lwres_context_t</span> is returned through
      <em class="parameter"><code>contextp</code></em>, a pointer to a
      <span class="type">lwres_context_t</span> pointer.  This
      <span class="type">lwres_context_t</span> pointer must initially be NULL, and
      is modified to point to the newly created
      <span class="type">lwres_context_t</span>.
    </p>
<p>
      When the lightweight resolver needs to perform dynamic memory
      allocation, it will call
      <em class="parameter"><code>malloc_function</code></em>
      to allocate memory and
      <em class="parameter"><code>free_function</code></em>
      to free it.  If
      <em class="parameter"><code>malloc_function</code></em>
      and
      <em class="parameter"><code>free_function</code></em>
      are NULL, memory is allocated using
      <span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>.
      and
      <span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.

      It is not permitted to have a NULL
      <em class="parameter"><code>malloc_function</code></em> and a non-NULL
      <em class="parameter"><code>free_function</code></em> or vice versa.
      <em class="parameter"><code>arg</code></em> is passed as the first parameter to
      the memory allocation functions.  If
      <em class="parameter"><code>malloc_function</code></em> and
      <em class="parameter"><code>free_function</code></em> are NULL,
      <em class="parameter"><code>arg</code></em> is unused and should be passed as
      NULL.
    </p>
<p>
      Once memory for the structure has been allocated,
      it is initialized using
      <span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>
      and returned via <em class="parameter"><code>*contextp</code></em>.
    </p>
<p><code class="function">lwres_context_destroy()</code>
      destroys a <span class="type">lwres_context_t</span>, closing its socket.
      <em class="parameter"><code>contextp</code></em> is a pointer to a pointer to the
      context that is to be destroyed.  The pointer will be set to
      NULL when the context has been destroyed.
    </p>
<p>
      The context holds a serial number that is used to identify
      resolver request packets and associate responses with the
      corresponding requests.  This serial number is controlled using
      <code class="function">lwres_context_initserial()</code> and
      <code class="function">lwres_context_nextserial()</code>.
      <code class="function">lwres_context_initserial()</code> sets the serial
      number for context <em class="parameter"><code>*ctx</code></em> to
      <em class="parameter"><code>serial</code></em>.
      <code class="function">lwres_context_nextserial()</code> increments the
      serial number and returns the previous value.
    </p>
<p>
      Memory for a lightweight resolver context is allocated and freed
      using <code class="function">lwres_context_allocmem()</code> and
      <code class="function">lwres_context_freemem()</code>.  These use
      whatever allocations were defined when the context was created
      with <code class="function">lwres_context_create()</code>.
      <code class="function">lwres_context_allocmem()</code> allocates
      <em class="parameter"><code>len</code></em> bytes of memory and if successful
      returns a pointer to the allocated storage.
      <code class="function">lwres_context_freemem()</code> frees
      <em class="parameter"><code>len</code></em> bytes of space starting at location
      <em class="parameter"><code>mem</code></em>.
    </p>
<p><code class="function">lwres_context_sendrecv()</code>
      performs I/O for the context <em class="parameter"><code>ctx</code></em>.  Data
      are read and written from the context's socket.  It writes data
      from <em class="parameter"><code>sendbase</code></em> &#8212; typically a
      lightweight resolver query packet &#8212; and waits for a reply
      which is copied to the receive buffer at
      <em class="parameter"><code>recvbase</code></em>.  The number of bytes that were
      written to this receive buffer is returned in
      <em class="parameter"><code>*recvd_len</code></em>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543719"></a><h2>RETURN VALUES</h2>
<p><code class="function">lwres_context_create()</code>
      returns <span class="errorcode">LWRES_R_NOMEMORY</span> if memory for
      the <span class="type">struct lwres_context</span> could not be allocated,
      <span class="errorcode">LWRES_R_SUCCESS</span> otherwise.
    </p>
<p>
      Successful calls to the memory allocator
      <code class="function">lwres_context_allocmem()</code>
      return a pointer to the start of the allocated space.
      It returns NULL if memory could not be allocated.
    </p>
<p><span class="errorcode">LWRES_R_SUCCESS</span>
      is returned when
      <code class="function">lwres_context_sendrecv()</code>
      completes successfully.
      <span class="errorcode">LWRES_R_IOERROR</span>
      is returned if an I/O error occurs and
      <span class="errorcode">LWRES_R_TIMEOUT</span>
      is returned if
      <code class="function">lwres_context_sendrecv()</code>
      times out waiting for a response.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543769"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.
    </p>
</div>
</div></body>
</html>
@


1.6
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_context.html,v 1.5.2.2.2.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 2
<td> </td>
<td>, </td>
d45 3
a47 2
<td> </td>
<td>, </td>
d51 3
a53 2
<td> </td>
<td>, </td>
d57 1
a57 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d59 1
a59 1
<code>)</code>;</td>
d62 1
a62 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d66 1
a66 7
<td> </td>
<td>
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
d68 2
a69 3
<code>)</code>;</td>
</tr>
</table>
d75 3
a77 2
<td> </td>
<td>, </td>
d81 1
a81 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d83 1
a83 1
<code>)</code>;</td>
d86 1
a86 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d90 1
a90 7
<td> </td>
<td>
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
d92 2
a93 3
<code>)</code>;</td>
</tr>
</table>
d99 3
a101 2
<td> </td>
<td>, </td>
d105 3
a107 2
<td> </td>
<td>, </td>
d111 1
a111 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d113 1
a113 1
<code>)</code>;</td>
d121 3
a123 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d127 1
a127 1
<td> </td>
d129 1
a129 1
<code>)</code>;</td>
d137 3
a139 2
<td> </td>
<td>, </td>
d143 3
a145 2
<td> </td>
<td>, </td>
d149 3
a151 2
<td> </td>
<td>, </td>
d155 3
a157 2
<td> </td>
<td>, </td>
d161 3
a163 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d167 1
a167 1
<td> </td>
d169 1
a169 1
<code>)</code>;</td>
d175 84
a258 128
<a name="id2549540"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_context_create()</code>
creates a
<span class="type">lwres_context_t</span>
structure for use in lightweight resolver operations.
It holds a socket and other data needed for communicating
with a resolver daemon.
The new
<span class="type">lwres_context_t</span>
is returned through
<em class="parameter"><code>contextp</code></em>,

a pointer to a
<span class="type">lwres_context_t</span>
pointer.  This 
<span class="type">lwres_context_t</span>
pointer must initially be NULL, and is modified 
to point to the newly created
<span class="type">lwres_context_t</span>.

</p>
<p>
When the lightweight resolver needs to perform dynamic memory
allocation, it will call
<em class="parameter"><code>malloc_function</code></em>
to allocate memory and
<em class="parameter"><code>free_function</code></em>

to free it.  If 
<em class="parameter"><code>malloc_function</code></em>
and
<em class="parameter"><code>free_function</code></em>

are NULL, memory is allocated using
.Xr malloc 3
and
<span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.

It is not permitted to have a NULL
<em class="parameter"><code>malloc_function</code></em>
and a non-NULL
<em class="parameter"><code>free_function</code></em>
or vice versa.
<em class="parameter"><code>arg</code></em>
is passed as the first parameter to the memory
allocation functions.  
If
<em class="parameter"><code>malloc_function</code></em>
and
<em class="parameter"><code>free_function</code></em>
are NULL,
<em class="parameter"><code>arg</code></em>

is unused and should be passed as NULL.
</p>
<p>
Once memory for the structure has been allocated,
it is initialized using
<span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>

and returned via
<em class="parameter"><code>*contextp</code></em>.

</p>
<p>
<code class="function">lwres_context_destroy()</code>
destroys a 
<span class="type">lwres_context_t</span>,

closing its socket.
<em class="parameter"><code>contextp</code></em>
is a pointer to a pointer to the context that is to be destroyed.
The pointer will be set to NULL when the context has been destroyed.
</p>
<p>
The context holds a serial number that is used to identify resolver
request packets and associate responses with the corresponding requests.
This serial number is controlled using
<code class="function">lwres_context_initserial()</code>
and
<code class="function">lwres_context_nextserial()</code>.
<code class="function">lwres_context_initserial()</code>
sets the serial number for context
<em class="parameter"><code>*ctx</code></em>
to
<em class="parameter"><code>serial</code></em>.

<code class="function">lwres_context_nextserial()</code>
increments the serial number and returns the previous value.
</p>
<p>
Memory for a lightweight resolver context is allocated and freed using
<code class="function">lwres_context_allocmem()</code>
and
<code class="function">lwres_context_freemem()</code>.
These use whatever allocations were defined when the context was
created with
<code class="function">lwres_context_create()</code>.
<code class="function">lwres_context_allocmem()</code>
allocates
<em class="parameter"><code>len</code></em>
bytes of memory and if successful returns a pointer to the allocated
storage.
<code class="function">lwres_context_freemem()</code>
frees
<em class="parameter"><code>len</code></em>
bytes of space starting at location
<em class="parameter"><code>mem</code></em>.

</p>
<p>
<code class="function">lwres_context_sendrecv()</code>
performs I/O for the context
<em class="parameter"><code>ctx</code></em>.

Data are read and written from the context's socket.
It writes data from
<em class="parameter"><code>sendbase</code></em>
&#8212; typically a lightweight resolver query packet &#8212;
and waits for a reply which is copied to the receive buffer at
<em class="parameter"><code>recvbase</code></em>.

The number of bytes that were written to this receive buffer is
returned in
<em class="parameter"><code>*recvd_len</code></em>.

</p>
d261 23
a283 29
<a name="id2549789"></a><h2>RETURN VALUES</h2>
<p>
<code class="function">lwres_context_create()</code>
returns
<span class="errorcode">LWRES_R_NOMEMORY</span>
if memory for the
<span class="type">struct lwres_context</span>
could not be allocated, 
<span class="errorcode">LWRES_R_SUCCESS</span>
otherwise.
</p>
<p>
Successful calls to the memory allocator
<code class="function">lwres_context_allocmem()</code>
return a pointer to the start of the allocated space.
It returns NULL if memory could not be allocated.
</p>
<p>
<span class="errorcode">LWRES_R_SUCCESS</span>
is returned when
<code class="function">lwres_context_sendrecv()</code>
completes successfully.
<span class="errorcode">LWRES_R_IOERROR</span>
is returned if an I/O error occurs and
<span class="errorcode">LWRES_R_TIMEOUT</span>
is returned if
<code class="function">lwres_context_sendrecv()</code>
times out waiting for a response.
</p>
d286 2
a287 3
<a name="id2549841"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>,
d289 1
a289 1
<span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>,
d291 2
a292 3
<span class="citerefentry"><span class="refentrytitle">free</span>(3
)</span>.
</p>
@


1.5
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_context.html,v 1.5.2.2.2.10 2005/10/13 02:33:55 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d55 5
d64 2
a65 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d72 8
a79 1
</tr></table>
d91 5
d100 2
a101 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d108 8
a115 1
</tr></table>
d132 5
d152 5
d192 5
d204 1
a204 1
<a name="id2525975"></a><h2>DESCRIPTION</h2>
d334 1
a334 1
<a name="id2526156"></a><h2>RETURN VALUES</h2>
d365 1
a365 1
<a name="id2526208"></a><h2>SEE ALSO</h2>
@


1.4
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 149
a165 120

<!-- $ISC: lwres_context.html,v 1.5.2.2.2.3 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_context</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_context</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_context_create, lwres_context_destroy, lwres_context_nextserial, lwres_context_initserial, lwres_context_freemem, lwres_context_allocmem, lwres_context_sendrecv&nbsp;--&nbsp;lightweight resolver context management</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN17"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN18"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwres.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_context_create</CODE
>(lwres_context_t **contextp, void *arg, lwres_malloc_t malloc_function, lwres_free_t free_function);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_context_destroy</CODE
>(lwres_context_t **contextp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_context_initserial</CODE
>(lwres_context_t *ctx, lwres_uint32_t serial);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_uint32_t
lwres_context_nextserial</CODE
>(lwres_context_t *ctx);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_context_freemem</CODE
>(lwres_context_t *ctx, void *mem, size_t len);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_context_allocmem</CODE
>(lwres_context_t *ctx, size_t len);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void *
lwres_context_sendrecv</CODE
>(lwres_context_t *ctx, void *sendbase, int sendlen, void *recvbase, int recvlen, int *recvd_len);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN60"
></A
><H2
>DESCRIPTION</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_context_create()</CODE
>
d167 1
a167 4
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>
d172 1
a172 4
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>
d174 1
a174 4
<VAR
CLASS="PARAMETER"
>contextp</VAR
>,
d177 1
a177 4
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>
d179 1
a179 4
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>
d182 5
a186 6
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>.&#13;</P
><P
>When the lightweight resolver needs to perform dynamic memory
d188 1
a188 4
<VAR
CLASS="PARAMETER"
>malloc_function</VAR
>
d190 1
a190 4
<VAR
CLASS="PARAMETER"
>free_function</VAR
>
d193 1
a193 4
<VAR
CLASS="PARAMETER"
>malloc_function</VAR
>
d195 1
a195 4
<VAR
CLASS="PARAMETER"
>free_function</VAR
>
d200 1
a200 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>free</SPAN
>(3)</SPAN
>.
d203 1
a203 4
<VAR
CLASS="PARAMETER"
>malloc_function</VAR
>
d205 1
a205 4
<VAR
CLASS="PARAMETER"
>free_function</VAR
>
d207 1
a207 4
<VAR
CLASS="PARAMETER"
>arg</VAR
>
d211 1
a211 4
<VAR
CLASS="PARAMETER"
>malloc_function</VAR
>
d213 1
a213 4
<VAR
CLASS="PARAMETER"
>free_function</VAR
>
d215 6
a220 8
<VAR
CLASS="PARAMETER"
>arg</VAR
>

is unused and should be passed as NULL.</P
><P
>Once memory for the structure has been allocated,
d222 1
a222 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_conf_init</SPAN
>(3)</SPAN
>
d225 5
a229 9
<VAR
CLASS="PARAMETER"
>*contextp</VAR
>.&#13;</P
><P
><CODE
CLASS="FUNCTION"
>lwres_context_destroy()</CODE
>
d231 1
a231 4
<SPAN
CLASS="TYPE"
>lwres_context_t</SPAN
>,
d234 1
a234 4
<VAR
CLASS="PARAMETER"
>contextp</VAR
>
d236 4
a239 3
The pointer will be set to NULL when the context has been destroyed.</P
><P
>The context holds a serial number that is used to identify resolver
d242 1
a242 4
<CODE
CLASS="FUNCTION"
>lwres_context_initserial()</CODE
>
d244 2
a245 8
<CODE
CLASS="FUNCTION"
>lwres_context_nextserial()</CODE
>.
<CODE
CLASS="FUNCTION"
>lwres_context_initserial()</CODE
>
d247 1
a247 4
<VAR
CLASS="PARAMETER"
>*ctx</VAR
>
d249 8
a256 16
<VAR
CLASS="PARAMETER"
>serial</VAR
>.

<CODE
CLASS="FUNCTION"
>lwres_context_nextserial()</CODE
>
increments the serial number and returns the previous value.</P
><P
>Memory for a lightweight resolver context is allocated and freed using
<CODE
CLASS="FUNCTION"
>lwres_context_allocmem()</CODE
>
d258 1
a258 4
<CODE
CLASS="FUNCTION"
>lwres_context_freemem()</CODE
>.
d261 2
a262 8
<CODE
CLASS="FUNCTION"
>lwres_context_create()</CODE
>.
<CODE
CLASS="FUNCTION"
>lwres_context_allocmem()</CODE
>
d264 1
a264 4
<VAR
CLASS="PARAMETER"
>len</VAR
>
d267 1
a267 4
<CODE
CLASS="FUNCTION"
>lwres_context_freemem()</CODE
>
d269 1
a269 4
<VAR
CLASS="PARAMETER"
>len</VAR
>
d271 5
a275 9
<VAR
CLASS="PARAMETER"
>mem</VAR
>.&#13;</P
><P
><CODE
CLASS="FUNCTION"
>lwres_context_sendrecv()</CODE
>
d277 1
a277 4
<VAR
CLASS="PARAMETER"
>ctx</VAR
>.
d281 2
a282 5
<VAR
CLASS="PARAMETER"
>sendbase</VAR
>
&mdash; typically a lightweight resolver query packet &mdash;
d284 1
a284 4
<VAR
CLASS="PARAMETER"
>recvbase</VAR
>.
d288 8
a295 17
<VAR
CLASS="PARAMETER"
>*recvd_len</VAR
>.&#13;</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN115"
></A
><H2
>RETURN VALUES</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_context_create()</CODE
>
d297 1
a297 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOMEMORY</SPAN
>
d299 1
a299 4
<SPAN
CLASS="TYPE"
>struct lwres_context</SPAN
>
d301 6
a306 11
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
otherwise.</P
><P
>Successful calls to the memory allocator
<CODE
CLASS="FUNCTION"
>lwres_context_allocmem()</CODE
>
d308 4
a311 6
It returns NULL if memory could not be allocated.</P
><P
><SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d313 1
a313 4
<CODE
CLASS="FUNCTION"
>lwres_context_sendrecv()</CODE
>
d315 1
a315 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_IOERROR</SPAN
>
d317 1
a317 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_TIMEOUT</SPAN
>
d319 17
a335 41
<CODE
CLASS="FUNCTION"
>lwres_context_sendrecv()</CODE
>
times out waiting for a response.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN130"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_conf_init</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>malloc</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>free</SPAN
>(3)</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_context</A
></H1
d57 2
a61 2
><P
></P
d133 1
a133 1
><TT
d135 1
a135 1
>lwres_context_create()</TT
d151 1
a151 1
<TT
d153 1
a153 3
><I
>contextp</I
></TT
d175 1
a175 1
<TT
d177 1
a177 3
><I
>malloc_function</I
></TT
d180 1
a180 1
<TT
d182 1
a182 3
><I
>free_function</I
></TT
d186 1
a186 1
<TT
d188 1
a188 3
><I
>malloc_function</I
></TT
d191 1
a191 1
<TT
d193 1
a193 3
><I
>free_function</I
></TT
d208 1
a208 1
<TT
d210 1
a210 3
><I
>malloc_function</I
></TT
d213 1
a213 1
<TT
d215 1
a215 3
><I
>free_function</I
></TT
d218 1
a218 1
<TT
d220 1
a220 3
><I
>arg</I
></TT
d225 1
a225 1
<TT
d227 1
a227 3
><I
>malloc_function</I
></TT
d230 1
a230 1
<TT
d232 1
a232 3
><I
>free_function</I
></TT
d235 1
a235 1
<TT
d237 1
a237 3
><I
>arg</I
></TT
d253 1
a253 1
<TT
d255 1
a255 3
><I
>*contextp</I
></TT
d258 1
a258 1
><TT
d260 1
a260 1
>lwres_context_destroy()</TT
d269 1
a269 1
<TT
d271 1
a271 3
><I
>contextp</I
></TT
d279 1
a279 1
<TT
d281 1
a281 1
>lwres_context_initserial()</TT
d284 1
a284 1
<TT
d286 1
a286 1
>lwres_context_nextserial()</TT
d288 1
a288 1
<TT
d290 1
a290 1
>lwres_context_initserial()</TT
d293 1
a293 1
<TT
d295 1
a295 3
><I
>*ctx</I
></TT
d298 1
a298 1
<TT
d300 1
a300 3
><I
>serial</I
></TT
d303 1
a303 1
<TT
d305 1
a305 1
>lwres_context_nextserial()</TT
d310 1
a310 1
<TT
d312 1
a312 1
>lwres_context_allocmem()</TT
d315 1
a315 1
<TT
d317 1
a317 1
>lwres_context_freemem()</TT
d321 1
a321 1
<TT
d323 1
a323 1
>lwres_context_create()</TT
d325 1
a325 1
<TT
d327 1
a327 1
>lwres_context_allocmem()</TT
d330 1
a330 1
<TT
d332 1
a332 3
><I
>len</I
></TT
d336 1
a336 1
<TT
d338 1
a338 1
>lwres_context_freemem()</TT
d341 1
a341 1
<TT
d343 1
a343 3
><I
>len</I
></TT
d346 1
a346 1
<TT
d348 1
a348 3
><I
>mem</I
></TT
d351 1
a351 1
><TT
d353 1
a353 1
>lwres_context_sendrecv()</TT
d356 1
a356 1
<TT
d358 1
a358 3
><I
>ctx</I
></TT
d363 1
a363 1
<TT
d365 1
a365 3
><I
>sendbase</I
></TT
d369 1
a369 1
<TT
d371 1
a371 3
><I
>recvbase</I
></TT
d376 1
a376 1
<TT
d378 1
a378 3
><I
>*recvd_len</I
></TT
d389 1
a389 1
><TT
d391 1
a391 1
>lwres_context_create()</TT
d411 1
a411 1
<TT
d413 1
a413 1
>lwres_context_allocmem()</TT
d423 1
a423 1
<TT
d425 1
a425 1
>lwres_context_sendrecv()</TT
d438 1
a438 1
<TT
d440 1
a440 1
>lwres_context_sendrecv()</TT
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d147 1
a147 1
is returned throught
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d519 1
a519 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_context.html,v 1.5.2.2.2.3 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_context</H1
a53 2
><P
></P
d57 2
d130 1
a130 1
><CODE
d132 1
a132 1
>lwres_context_create()</CODE
d147 2
a148 2
is returned through
<VAR
d150 3
a152 1
>contextp</VAR
d174 1
a174 1
<VAR
d176 3
a178 1
>malloc_function</VAR
d181 1
a181 1
<VAR
d183 3
a185 1
>free_function</VAR
d189 1
a189 1
<VAR
d191 3
a193 1
>malloc_function</VAR
d196 1
a196 1
<VAR
d198 3
a200 1
>free_function</VAR
d215 1
a215 1
<VAR
d217 3
a219 1
>malloc_function</VAR
d222 1
a222 1
<VAR
d224 3
a226 1
>free_function</VAR
d229 1
a229 1
<VAR
d231 3
a233 1
>arg</VAR
d238 1
a238 1
<VAR
d240 3
a242 1
>malloc_function</VAR
d245 1
a245 1
<VAR
d247 3
a249 1
>free_function</VAR
d252 1
a252 1
<VAR
d254 3
a256 1
>arg</VAR
d272 1
a272 1
<VAR
d274 3
a276 1
>*contextp</VAR
d279 1
a279 1
><CODE
d281 1
a281 1
>lwres_context_destroy()</CODE
d290 1
a290 1
<VAR
d292 3
a294 1
>contextp</VAR
d302 1
a302 1
<CODE
d304 1
a304 1
>lwres_context_initserial()</CODE
d307 1
a307 1
<CODE
d309 1
a309 1
>lwres_context_nextserial()</CODE
d311 1
a311 1
<CODE
d313 1
a313 1
>lwres_context_initserial()</CODE
d316 1
a316 1
<VAR
d318 3
a320 1
>*ctx</VAR
d323 1
a323 1
<VAR
d325 3
a327 1
>serial</VAR
d330 1
a330 1
<CODE
d332 1
a332 1
>lwres_context_nextserial()</CODE
d337 1
a337 1
<CODE
d339 1
a339 1
>lwres_context_allocmem()</CODE
d342 1
a342 1
<CODE
d344 1
a344 1
>lwres_context_freemem()</CODE
d348 1
a348 1
<CODE
d350 1
a350 1
>lwres_context_create()</CODE
d352 1
a352 1
<CODE
d354 1
a354 1
>lwres_context_allocmem()</CODE
d357 1
a357 1
<VAR
d359 3
a361 1
>len</VAR
d365 1
a365 1
<CODE
d367 1
a367 1
>lwres_context_freemem()</CODE
d370 1
a370 1
<VAR
d372 3
a374 1
>len</VAR
d377 1
a377 1
<VAR
d379 3
a381 1
>mem</VAR
d384 1
a384 1
><CODE
d386 1
a386 1
>lwres_context_sendrecv()</CODE
d389 1
a389 1
<VAR
d391 3
a393 1
>ctx</VAR
d398 1
a398 1
<VAR
d400 3
a402 1
>sendbase</VAR
d406 1
a406 1
<VAR
d408 3
a410 1
>recvbase</VAR
d415 1
a415 1
<VAR
d417 3
a419 1
>*recvd_len</VAR
d430 1
a430 1
><CODE
d432 1
a432 1
>lwres_context_create()</CODE
d452 1
a452 1
<CODE
d454 1
a454 1
>lwres_context_allocmem()</CODE
d464 1
a464 1
<CODE
d466 1
a466 1
>lwres_context_sendrecv()</CODE
d479 1
a479 1
<CODE
d481 1
a481 1
>lwres_context_sendrecv()</CODE
d519 1
a519 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 120
a136 149
<!-- $ISC: lwres_context.html,v 1.5.2.2.2.10 2005/10/13 02:33:55 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_context</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_context_create, lwres_context_destroy, lwres_context_nextserial, lwres_context_initserial, lwres_context_freemem, lwres_context_allocmem, lwres_context_sendrecv &#8212; lightweight resolver context management</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/lwres.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_context_create</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_context_destroy</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_initserial</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint32_t
<b class="fsfunc">lwres_context_nextserial</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_freemem</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_context_allocmem</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void *
<b class="fsfunc">lwres_context_sendrecv</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525975"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_context_create()</code>
d138 4
a141 1
<span class="type">lwres_context_t</span>
d146 4
a149 1
<span class="type">lwres_context_t</span>
d151 4
a154 1
<em class="parameter"><code>contextp</code></em>,
d157 4
a160 1
<span class="type">lwres_context_t</span>
d162 4
a165 1
<span class="type">lwres_context_t</span>
d168 6
a173 5
<span class="type">lwres_context_t</span>.

</p>
<p>
When the lightweight resolver needs to perform dynamic memory
d175 4
a178 1
<em class="parameter"><code>malloc_function</code></em>
d180 4
a183 1
<em class="parameter"><code>free_function</code></em>
d186 4
a189 1
<em class="parameter"><code>malloc_function</code></em>
d191 4
a194 1
<em class="parameter"><code>free_function</code></em>
d199 7
a205 1
<span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.
d208 4
a211 1
<em class="parameter"><code>malloc_function</code></em>
d213 4
a216 1
<em class="parameter"><code>free_function</code></em>
d218 4
a221 1
<em class="parameter"><code>arg</code></em>
d225 4
a228 1
<em class="parameter"><code>malloc_function</code></em>
d230 4
a233 1
<em class="parameter"><code>free_function</code></em>
d235 8
a242 6
<em class="parameter"><code>arg</code></em>

is unused and should be passed as NULL.
</p>
<p>
Once memory for the structure has been allocated,
d244 7
a250 1
<span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>
d253 9
a261 5
<em class="parameter"><code>*contextp</code></em>.

</p>
<p>
<code class="function">lwres_context_destroy()</code>
d263 4
a266 1
<span class="type">lwres_context_t</span>,
d269 4
a272 1
<em class="parameter"><code>contextp</code></em>
d274 3
a276 4
The pointer will be set to NULL when the context has been destroyed.
</p>
<p>
The context holds a serial number that is used to identify resolver
d279 4
a282 1
<code class="function">lwres_context_initserial()</code>
d284 8
a291 2
<code class="function">lwres_context_nextserial()</code>.
<code class="function">lwres_context_initserial()</code>
d293 4
a296 1
<em class="parameter"><code>*ctx</code></em>
d298 16
a313 8
<em class="parameter"><code>serial</code></em>.

<code class="function">lwres_context_nextserial()</code>
increments the serial number and returns the previous value.
</p>
<p>
Memory for a lightweight resolver context is allocated and freed using
<code class="function">lwres_context_allocmem()</code>
d315 4
a318 1
<code class="function">lwres_context_freemem()</code>.
d321 8
a328 2
<code class="function">lwres_context_create()</code>.
<code class="function">lwres_context_allocmem()</code>
d330 4
a333 1
<em class="parameter"><code>len</code></em>
d336 4
a339 1
<code class="function">lwres_context_freemem()</code>
d341 4
a344 1
<em class="parameter"><code>len</code></em>
d346 9
a354 5
<em class="parameter"><code>mem</code></em>.

</p>
<p>
<code class="function">lwres_context_sendrecv()</code>
d356 4
a359 1
<em class="parameter"><code>ctx</code></em>.
d363 5
a367 2
<em class="parameter"><code>sendbase</code></em>
&#8212; typically a lightweight resolver query packet &#8212;
d369 4
a372 1
<em class="parameter"><code>recvbase</code></em>.
d376 17
a392 8
<em class="parameter"><code>*recvd_len</code></em>.

</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526156"></a><h2>RETURN VALUES</h2>
<p>
<code class="function">lwres_context_create()</code>
d394 4
a397 1
<span class="errorcode">LWRES_R_NOMEMORY</span>
d399 4
a402 1
<span class="type">struct lwres_context</span>
d404 11
a414 6
<span class="errorcode">LWRES_R_SUCCESS</span>
otherwise.
</p>
<p>
Successful calls to the memory allocator
<code class="function">lwres_context_allocmem()</code>
d416 6
a421 4
It returns NULL if memory could not be allocated.
</p>
<p>
<span class="errorcode">LWRES_R_SUCCESS</span>
d423 4
a426 1
<code class="function">lwres_context_sendrecv()</code>
d428 4
a431 1
<span class="errorcode">LWRES_R_IOERROR</span>
d433 4
a436 1
<span class="errorcode">LWRES_R_TIMEOUT</span>
d438 41
a478 17
<code class="function">lwres_context_sendrecv()</code>
times out waiting for a response.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526208"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">free</span>(3
)</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_context.html,v 1.5.2.2.2.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a54 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d59 1
a59 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d66 1
a66 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a77 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d82 1
a82 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d89 1
a89 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a105 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a120 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a155 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d163 1
a163 1
<a name="id2549540"></a><h2>DESCRIPTION</h2>
d293 1
a293 1
<a name="id2549789"></a><h2>RETURN VALUES</h2>
d324 1
a324 1
<a name="id2549841"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_context.html,v 1.7.18.16 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>lwres_context_t ** </td>
<td>
<var class="pdparam">contextp</var>, </td>
d49 2
a50 3
<td>void * </td>
<td>
<var class="pdparam">arg</var>, </td>
d54 2
a55 3
<td>lwres_malloc_t  </td>
<td>
<var class="pdparam">malloc_function</var>, </td>
d59 1
a59 1
<td>lwres_free_t  </td>
d61 1
a61 1
<var class="pdparam">free_function</var><code>)</code>;</td>
d64 2
a65 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d69 7
a75 1
<td>lwres_context_t ** </td>
d77 3
a79 2
<var class="pdparam">contextp</var><code>)</code>;</td>
</tr></table>
d85 7
a91 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d95 1
a95 1
<td>lwres_uint32_t  </td>
d97 1
a97 1
<var class="pdparam">serial</var><code>)</code>;</td>
d100 2
a101 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d105 7
a111 1
<td>lwres_context_t * </td>
d113 3
a115 2
<var class="pdparam">ctx</var><code>)</code>;</td>
</tr></table>
d121 7
a127 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d131 2
a132 3
<td>void * </td>
<td>
<var class="pdparam">mem</var>, </td>
d136 1
a136 1
<td>size_t  </td>
d138 1
a138 1
<var class="pdparam">len</var><code>)</code>;</td>
d146 7
a152 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d156 1
a156 1
<td>size_t  </td>
d158 1
a158 1
<var class="pdparam">len</var><code>)</code>;</td>
d166 7
a172 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d176 2
a177 3
<td>void * </td>
<td>
<var class="pdparam">sendbase</var>, </td>
d181 2
a182 3
<td>int  </td>
<td>
<var class="pdparam">sendlen</var>, </td>
d186 2
a187 3
<td>void * </td>
<td>
<var class="pdparam">recvbase</var>, </td>
d191 2
a192 3
<td>int  </td>
<td>
<var class="pdparam">recvlen</var>, </td>
d196 1
a196 1
<td>int * </td>
d198 1
a198 1
<var class="pdparam">recvd_len</var><code>)</code>;</td>
d204 128
a331 84
<a name="id2543531"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_context_create()</code>
      creates a <span class="type">lwres_context_t</span> structure for use in
      lightweight resolver operations.  It holds a socket and other
      data needed for communicating with a resolver daemon.  The new
      <span class="type">lwres_context_t</span> is returned through
      <em class="parameter"><code>contextp</code></em>, a pointer to a
      <span class="type">lwres_context_t</span> pointer.  This
      <span class="type">lwres_context_t</span> pointer must initially be NULL, and
      is modified to point to the newly created
      <span class="type">lwres_context_t</span>.
    </p>
<p>
      When the lightweight resolver needs to perform dynamic memory
      allocation, it will call
      <em class="parameter"><code>malloc_function</code></em>
      to allocate memory and
      <em class="parameter"><code>free_function</code></em>
      to free it.  If
      <em class="parameter"><code>malloc_function</code></em>
      and
      <em class="parameter"><code>free_function</code></em>
      are NULL, memory is allocated using
      <span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>.
      and
      <span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.

      It is not permitted to have a NULL
      <em class="parameter"><code>malloc_function</code></em> and a non-NULL
      <em class="parameter"><code>free_function</code></em> or vice versa.
      <em class="parameter"><code>arg</code></em> is passed as the first parameter to
      the memory allocation functions.  If
      <em class="parameter"><code>malloc_function</code></em> and
      <em class="parameter"><code>free_function</code></em> are NULL,
      <em class="parameter"><code>arg</code></em> is unused and should be passed as
      NULL.
    </p>
<p>
      Once memory for the structure has been allocated,
      it is initialized using
      <span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>
      and returned via <em class="parameter"><code>*contextp</code></em>.
    </p>
<p><code class="function">lwres_context_destroy()</code>
      destroys a <span class="type">lwres_context_t</span>, closing its socket.
      <em class="parameter"><code>contextp</code></em> is a pointer to a pointer to the
      context that is to be destroyed.  The pointer will be set to
      NULL when the context has been destroyed.
    </p>
<p>
      The context holds a serial number that is used to identify
      resolver request packets and associate responses with the
      corresponding requests.  This serial number is controlled using
      <code class="function">lwres_context_initserial()</code> and
      <code class="function">lwres_context_nextserial()</code>.
      <code class="function">lwres_context_initserial()</code> sets the serial
      number for context <em class="parameter"><code>*ctx</code></em> to
      <em class="parameter"><code>serial</code></em>.
      <code class="function">lwres_context_nextserial()</code> increments the
      serial number and returns the previous value.
    </p>
<p>
      Memory for a lightweight resolver context is allocated and freed
      using <code class="function">lwres_context_allocmem()</code> and
      <code class="function">lwres_context_freemem()</code>.  These use
      whatever allocations were defined when the context was created
      with <code class="function">lwres_context_create()</code>.
      <code class="function">lwres_context_allocmem()</code> allocates
      <em class="parameter"><code>len</code></em> bytes of memory and if successful
      returns a pointer to the allocated storage.
      <code class="function">lwres_context_freemem()</code> frees
      <em class="parameter"><code>len</code></em> bytes of space starting at location
      <em class="parameter"><code>mem</code></em>.
    </p>
<p><code class="function">lwres_context_sendrecv()</code>
      performs I/O for the context <em class="parameter"><code>ctx</code></em>.  Data
      are read and written from the context's socket.  It writes data
      from <em class="parameter"><code>sendbase</code></em> &#8212; typically a
      lightweight resolver query packet &#8212; and waits for a reply
      which is copied to the receive buffer at
      <em class="parameter"><code>recvbase</code></em>.  The number of bytes that were
      written to this receive buffer is returned in
      <em class="parameter"><code>*recvd_len</code></em>.
    </p>
d334 29
a362 23
<a name="id2543719"></a><h2>RETURN VALUES</h2>
<p><code class="function">lwres_context_create()</code>
      returns <span class="errorcode">LWRES_R_NOMEMORY</span> if memory for
      the <span class="type">struct lwres_context</span> could not be allocated,
      <span class="errorcode">LWRES_R_SUCCESS</span> otherwise.
    </p>
<p>
      Successful calls to the memory allocator
      <code class="function">lwres_context_allocmem()</code>
      return a pointer to the start of the allocated space.
      It returns NULL if memory could not be allocated.
    </p>
<p><span class="errorcode">LWRES_R_SUCCESS</span>
      is returned when
      <code class="function">lwres_context_sendrecv()</code>
      completes successfully.
      <span class="errorcode">LWRES_R_IOERROR</span>
      is returned if an I/O error occurs and
      <span class="errorcode">LWRES_R_TIMEOUT</span>
      is returned if
      <code class="function">lwres_context_sendrecv()</code>
      times out waiting for a response.
    </p>
d365 3
a367 2
<a name="id2543769"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_conf_init</span>(3)</span>,
d369 1
a369 1
      <span class="citerefentry"><span class="refentrytitle">malloc</span>(3)</span>,
d371 3
a373 2
      <span class="citerefentry"><span class="refentrytitle">free</span>(3)</span>.
    </p>
@


