head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.05;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.32;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.26;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_getaddrinfo.html,v 1.10.18.17 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_getaddrinfo</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_getaddrinfo, lwres_freeaddrinfo &#8212; socket address structure to host and service name</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
int
<b class="fsfunc">lwres_getaddrinfo</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">hostname</var>, </td>
</tr>
<tr>
<td> </td>
<td>const char * </td>
<td>
<var class="pdparam">servname</var>, </td>
</tr>
<tr>
<td> </td>
<td>const struct addrinfo * </td>
<td>
<var class="pdparam">hints</var>, </td>
</tr>
<tr>
<td> </td>
<td>struct addrinfo ** </td>
<td>
<var class="pdparam">res</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_freeaddrinfo</b>(</code></td>
<td>struct addrinfo * </td>
<td>
<var class="pdparam">ai</var><code>)</code>;</td>
</tr></table>
</div>
<p>
      If the operating system does not provide a
      <span class="type">struct addrinfo</span>,
      the following structure is used:
    </p>
<pre class="programlisting">
struct  addrinfo {
        int             ai_flags;       /* AI_PASSIVE, AI_CANONNAME */
        int             ai_family;      /* PF_xxx */
        int             ai_socktype;    /* SOCK_xxx */
        int             ai_protocol;    /* 0 or IPPROTO_xxx for IPv4 and IPv6 */
        size_t          ai_addrlen;     /* length of ai_addr */
        char            *ai_canonname;  /* canonical name for hostname */
        struct sockaddr *ai_addr;       /* binary address */
        struct addrinfo *ai_next;       /* next structure in linked list */
};
</pre>
<p>
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543412"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_getaddrinfo()</code>
      is used to get a list of IP addresses and port numbers for host
      <em class="parameter"><code>hostname</code></em> and service
      <em class="parameter"><code>servname</code></em>.

      The function is the lightweight resolver's implementation of
      <code class="function">getaddrinfo()</code> as defined in RFC2133.
      <em class="parameter"><code>hostname</code></em> and
      <em class="parameter"><code>servname</code></em> are pointers to null-terminated
      strings or <span class="type">NULL</span>.

      <em class="parameter"><code>hostname</code></em> is either a host name or a
      numeric host address string: a dotted decimal IPv4 address or an
      IPv6 address.  <em class="parameter"><code>servname</code></em> is either a
      decimal port number or a service name as listed in
      <code class="filename">/etc/services</code>.
    </p>
<p><em class="parameter"><code>hints</code></em>
      is an optional pointer to a
      <span class="type">struct addrinfo</span>.
      This structure can be used to provide hints concerning the type of
      socket
      that the caller supports or wishes to use.
      The caller can supply the following structure elements in
      <em class="parameter"><code>*hints</code></em>:

      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">ai_family</code></span></dt>
<dd><p>
              The protocol family that should be used.
              When
              <code class="constant">ai_family</code>
              is set to
              <span class="type">PF_UNSPEC</span>,
              it means the caller will accept any protocol family supported by
              the
              operating system.
            </p></dd>
<dt><span class="term"><code class="constant">ai_socktype</code></span></dt>
<dd><p>
              denotes the type of socket &#8212;
              <span class="type">SOCK_STREAM</span>,
              <span class="type">SOCK_DGRAM</span>
              or
              <span class="type">SOCK_RAW</span>
              &#8212; that is wanted.
              When
              <code class="constant">ai_socktype</code>
              is zero the caller will accept any socket type.
            </p></dd>
<dt><span class="term"><code class="constant">ai_protocol</code></span></dt>
<dd><p>
              indicates which transport protocol is wanted: IPPROTO_UDP or
              IPPROTO_TCP.
              If
              <code class="constant">ai_protocol</code>
              is zero the caller will accept any protocol.
            </p></dd>
<dt><span class="term"><code class="constant">ai_flags</code></span></dt>
<dd>
<p>
              Flag bits.
              If the
              <span class="type">AI_CANONNAME</span>
              bit is set, a successful call to
              <code class="function">lwres_getaddrinfo()</code>
              will return a null-terminated string containing the canonical
              name
              of the specified hostname in
              <code class="constant">ai_canonname</code>
              of the first
              <span class="type">addrinfo</span>
              structure returned.
              Setting the
              <span class="type">AI_PASSIVE</span>
              bit indicates that the returned socket address structure is
              intended
              for used in a call to
              <span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>.

              In this case, if the hostname argument is a
              <span class="type">NULL</span>
              pointer, then the IP address portion of the socket
              address structure will be set to
              <span class="type">INADDR_ANY</span>
              for an IPv4 address or
              <span class="type">IN6ADDR_ANY_INIT</span>
              for an IPv6 address.
            </p>
<p>
              When
              <code class="constant">ai_flags</code>
              does not set the
              <span class="type">AI_PASSIVE</span>
              bit, the returned socket address structure will be ready
              for use in a call to
              <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>
              for a connection-oriented protocol or
              <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

              <span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,

              or
              <span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>
              if a connectionless protocol was chosen.
              The IP address portion of the socket address structure will be
              set to the loopback address if
              <em class="parameter"><code>hostname</code></em>
              is a
              <span class="type">NULL</span>
              pointer and
              <span class="type">AI_PASSIVE</span>
              is not set in
              <code class="constant">ai_flags</code>.
            </p>
<p>
              If
              <code class="constant">ai_flags</code>
              is set to
              <span class="type">AI_NUMERICHOST</span>
              it indicates that
              <em class="parameter"><code>hostname</code></em>
              should be treated as a numeric string defining an IPv4 or IPv6
              address
              and no name resolution should be attempted.
            </p>
</dd>
</dl></div>
<p>
    </p>
<p>
      All other elements of the <span class="type">struct addrinfo</span> passed
      via <em class="parameter"><code>hints</code></em> must be zero.
    </p>
<p>
      A <em class="parameter"><code>hints</code></em> of <span class="type">NULL</span> is
      treated as if
      the caller provided a <span class="type">struct addrinfo</span> initialized to zero
      with <code class="constant">ai_family</code>set to
      <code class="constant">PF_UNSPEC</code>.
    </p>
<p>
      After a successful call to
      <code class="function">lwres_getaddrinfo()</code>,
      <em class="parameter"><code>*res</code></em>
      is a pointer to a linked list of one or more
      <span class="type">addrinfo</span>
      structures.
      Each
      <span class="type">struct addrinfo</span>
      in this list cn be processed by following
      the
      <code class="constant">ai_next</code>
      pointer, until a
      <span class="type">NULL</span>
      pointer is encountered.
      The three members
      <code class="constant">ai_family</code>,
      <code class="constant">ai_socktype</code>,
      and
      <code class="constant">ai_protocol</code>
      in each
      returned
      <span class="type">addrinfo</span>
      structure contain the corresponding arguments for a call to
      <span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
      For each
      <span class="type">addrinfo</span>
      structure in the list, the
      <code class="constant">ai_addr</code>
      member points to a filled-in socket address structure of length
      <code class="constant">ai_addrlen</code>.
    </p>
<p>
      All of the information returned by
      <code class="function">lwres_getaddrinfo()</code>
      is dynamically allocated: the addrinfo structures, and the socket
      address structures and canonical host name strings pointed to by the
      <code class="constant">addrinfo</code>structures.
      Memory allocated for the dynamically allocated structures created by
      a successful call to
      <code class="function">lwres_getaddrinfo()</code>
      is released by
      <code class="function">lwres_freeaddrinfo()</code>.
      <em class="parameter"><code>ai</code></em>
      is a pointer to a
      <span class="type">struct addrinfo</span>
      created by a call to
      <code class="function">lwres_getaddrinfo()</code>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543789"></a><h2>RETURN VALUES</h2>
<p><code class="function">lwres_getaddrinfo()</code>
      returns zero on success or one of the error codes listed in
      <span class="citerefentry"><span class="refentrytitle">gai_strerror</span>(3)</span>
      if an error occurs.  If both <em class="parameter"><code>hostname</code></em> and
      <em class="parameter"><code>servname</code></em> are <span class="type">NULL</span>
      <code class="function">lwres_getaddrinfo()</code> returns
      <span class="errorcode">EAI_NONAME</span>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543827"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_freeaddrinfo</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_gai_strerror</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">RFC2133</span></span>,

      <span class="citerefentry"><span class="refentrytitle">getservbyname</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>,

      <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

      <span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,

      <span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>,

      <span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d39 3
a41 2
<td> </td>
<td>, </td>
d45 3
a47 2
<td> </td>
<td>, </td>
d51 3
a53 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d57 1
a57 1
<td> </td>
d59 1
a59 1
<code>)</code>;</td>
d62 1
a62 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
d66 1
a66 7
<td> </td>
<td>
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
d68 2
a69 3
<code>)</code>;</td>
</tr>
</table>
d72 4
a75 5
If the operating system does not provide a
<span class="type">struct addrinfo</span>,
the following structure is used:

</p>
d89 1
a89 1
</p>
d92 26
a117 33
<a name="id2549448"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_getaddrinfo()</code>
is used to get a list of IP addresses and port numbers for host
<em class="parameter"><code>hostname</code></em>
and service
<em class="parameter"><code>servname</code></em>.

The function is the lightweight resolver's implementation of
<code class="function">getaddrinfo()</code>
as defined in RFC2133.
<em class="parameter"><code>hostname</code></em>
and
<em class="parameter"><code>servname</code></em>
are pointers to null-terminated
strings or
<span class="type">NULL</span>.

<em class="parameter"><code>hostname</code></em>
is either a host name or a numeric host address string: a dotted decimal
IPv4 address or an IPv6 address.
<em class="parameter"><code>servname</code></em>
is either a decimal port number or a service name as listed in
<code class="filename">/etc/services</code>.
</p>
<p>
<em class="parameter"><code>hints</code></em>
is an optional pointer to a
<span class="type">struct addrinfo</span>.
This structure can be used to provide hints concerning the type of socket
that the caller supports or wishes to use.
The caller can supply the following structure elements in
<em class="parameter"><code>*hints</code></em>:
d119 1
a119 1
</p>
d122 10
a131 8
<dd><p>The protocol family that should be used.
When
<code class="constant">ai_family</code>
is set to
<span class="type">PF_UNSPEC</span>,
it means the caller will accept any protocol family supported by the
operating system.
</p></dd>
d134 10
a143 10
denotes the type of socket &#8212;
<span class="type">SOCK_STREAM</span>,
<span class="type">SOCK_DGRAM</span>
or
<span class="type">SOCK_RAW</span>
&#8212; that is wanted.
When
<code class="constant">ai_socktype</code>
is zero the caller will accept any socket type.
</p></dd>
d146 6
a151 6
indicates which transport protocol is wanted: IPPROTO_UDP or 
IPPROTO_TCP.
If
<code class="constant">ai_protocol</code>
is zero the caller will accept any protocol.
</p></dd>
d155 65
a219 64
Flag bits.
If the
<span class="type">AI_CANONNAME</span>
bit is set, a successful call to
<code class="function">lwres_getaddrinfo()</code>
will return a null-terminated string containing the canonical name
of the specified hostname in
<code class="constant">ai_canonname</code>
of the first
<span class="type">addrinfo</span>
structure returned.
Setting the
<span class="type">AI_PASSIVE</span>
bit indicates that the returned socket address structure is intended
for used in a call to
<span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>.

In this case, if the hostname argument is a
<span class="type">NULL</span>
pointer, then the IP address portion of the socket
address structure will be set to
<span class="type">INADDR_ANY</span>
for an IPv4 address or
<span class="type">IN6ADDR_ANY_INIT</span>
for an IPv6 address.
</p>
<p>
When
<code class="constant">ai_flags</code>
does not set the
<span class="type">AI_PASSIVE</span>
bit, the returned socket address structure will be ready
for use in a call to
<span class="citerefentry"><span class="refentrytitle">connect</span>(2
)</span>
for a connection-oriented protocol or
<span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,

or
<span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2
)</span>
if a connectionless protocol was chosen.
The IP address portion of the socket address structure will be
set to the loopback address if
<em class="parameter"><code>hostname</code></em>
is a
<span class="type">NULL</span>
pointer and
<span class="type">AI_PASSIVE</span>
is not set in
<code class="constant">ai_flags</code>.
</p>
<p>
If
<code class="constant">ai_flags</code>
is set to
<span class="type">AI_NUMERICHOST</span>
it indicates that
<em class="parameter"><code>hostname</code></em>
should be treated as a numeric string defining an IPv4 or IPv6 address
and no name resolution should be attempted.
</p>
d223 1
a223 11
</p>
<p>
All other elements of the <span class="type">struct addrinfo</span> passed
via <em class="parameter"><code>hints</code></em> must be zero.
</p>
<p>
A <em class="parameter"><code>hints</code></em> of <span class="type">NULL</span> is treated as if
the caller provided a <span class="type">struct addrinfo</span> initialized to zero
with <code class="constant">ai_family</code>set to
<code class="constant">PF_UNSPEC</code>.
</p>
d225 59
a283 48
After a successful call to
<code class="function">lwres_getaddrinfo()</code>,
<em class="parameter"><code>*res</code></em>
is a pointer to a linked list of one or more
<span class="type">addrinfo</span>
structures.
Each
<span class="type">struct addrinfo</span>
in this list cn be processed by following
the
<code class="constant">ai_next</code>
pointer, until a
<span class="type">NULL</span>
pointer is encountered.
The three members
<code class="constant">ai_family</code>,
<code class="constant">ai_socktype</code>,
and
<code class="constant">ai_protocol</code>
in each
returned
<span class="type">addrinfo</span>
structure contain the corresponding arguments for a call to
<span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
For each
<span class="type">addrinfo</span>
structure in the list, the
<code class="constant">ai_addr</code>
member points to a filled-in socket address structure of length
<code class="constant">ai_addrlen</code>.
</p>
<p>
All of the information returned by
<code class="function">lwres_getaddrinfo()</code>
is dynamically allocated: the addrinfo structures, and the socket
address structures and canonical host name strings pointed to by the
<code class="constant">addrinfo</code>structures.
Memory allocated for the dynamically allocated structures created by
a successful call to
<code class="function">lwres_getaddrinfo()</code>
is released by
<code class="function">lwres_freeaddrinfo()</code>.
<em class="parameter"><code>ai</code></em>
is a pointer to a
<span class="type">struct addrinfo</span>
created by a call to
<code class="function">lwres_getaddrinfo()</code>.
</p>
d286 9
a294 18
<a name="id2549874"></a><h2>RETURN VALUES</h2>
<p>
<code class="function">lwres_getaddrinfo()</code>
returns zero on success or one of the error codes listed in
<span class="citerefentry"><span class="refentrytitle">gai_strerror</span>(3
)</span>
if an error occurs.
If both
<em class="parameter"><code>hostname</code></em>
and
<em class="parameter"><code>servname</code></em>
are
<span class="type">NULL</span>
<code class="function">lwres_getaddrinfo()</code>
returns
<span class="errorcode">EAI_NONAME</span>.

</p>
d297 2
a298 3
<a name="id2549912"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,
d300 1
a300 1
<span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,
d302 1
a302 1
<span class="citerefentry"><span class="refentrytitle">lwres_freeaddrinfo</span>(3)</span>,
d304 1
a304 1
<span class="citerefentry"><span class="refentrytitle">lwres_gai_strerror</span>(3)</span>,
d306 1
a306 1
<span class="citerefentry"><span class="refentrytitle">RFC2133</span></span>,
d308 1
a308 1
<span class="citerefentry"><span class="refentrytitle">getservbyname</span>(3)</span>,
d310 1
a310 1
<span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>,
d312 1
a312 1
<span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,
d314 1
a314 1
<span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,
d316 1
a316 1
<span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>,
d318 2
a319 2
<span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.10 2005/10/13 02:33:56 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d55 5
d64 2
a65 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
d72 8
a79 1
</tr></table>
d103 1
a103 1
<a name="id2525883"></a><h2>DESCRIPTION</h2>
d300 1
a300 1
<a name="id2526309"></a><h2>RETURN VALUES</h2>
d320 1
a320 1
<a name="id2526347"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 54
a70 73

<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.3 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_getaddrinfo</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_getaddrinfo</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_getaddrinfo, lwres_freeaddrinfo&nbsp;--&nbsp;socket address structure to host and service name</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN12"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN13"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/netdb.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>int
lwres_getaddrinfo</CODE
>(const char *hostname, const char *servname, const struct addrinfo *hints, struct addrinfo **res);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_freeaddrinfo</CODE
>(struct addrinfo *ai);</CODE
></P
><P
></P
></DIV
><P
>If the operating system does not provide a
<SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
>,
d73 3
a75 3
<PRE
CLASS="PROGRAMLISTING"
>struct  addrinfo {
d84 9
a92 15
};</PRE
></P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN29"
></A
><H2
>DESCRIPTION</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d94 1
a94 4
<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d96 1
a96 4
<VAR
CLASS="PARAMETER"
>servname</VAR
>.
d99 1
a99 4
<CODE
CLASS="FUNCTION"
>getaddrinfo()</CODE
>
d101 1
a101 4
<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d103 1
a103 4
<VAR
CLASS="PARAMETER"
>servname</VAR
>
d106 3
a108 9
<SPAN
CLASS="TYPE"
>NULL</SPAN
>.

<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d111 1
a111 4
<VAR
CLASS="PARAMETER"
>servname</VAR
>
d113 4
a116 9
<TT
CLASS="FILENAME"
>/etc/services</TT
>.</P
><P
><VAR
CLASS="PARAMETER"
>hints</VAR
>
d118 1
a118 4
<SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
>.
d122 6
a127 18
<VAR
CLASS="PARAMETER"
>*hints</VAR
>:

<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>ai_family</CODE
></DT
><DD
><P
>The protocol family that should be used.
d129 1
a129 4
<CODE
CLASS="CONSTANT"
>ai_family</CODE
>
d131 1
a131 4
<SPAN
CLASS="TYPE"
>PF_UNSPEC</SPAN
>,
d133 7
a139 18
operating system.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>ai_socktype</CODE
></DT
><DD
><P
>denotes the type of socket &mdash;
<SPAN
CLASS="TYPE"
>SOCK_STREAM</SPAN
>,
<SPAN
CLASS="TYPE"
>SOCK_DGRAM</SPAN
>
d141 2
a142 5
<SPAN
CLASS="TYPE"
>SOCK_RAW</SPAN
>
&mdash; that is wanted.
d144 6
a149 14
<CODE
CLASS="CONSTANT"
>ai_socktype</CODE
>
is zero the caller will accept any socket type.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>ai_protocol</CODE
></DT
><DD
><P
>indicates which transport protocol is wanted: IPPROTO_UDP or 
d152 7
a158 14
<CODE
CLASS="CONSTANT"
>ai_protocol</CODE
>
is zero the caller will accept any protocol.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>ai_flags</CODE
></DT
><DD
><P
>Flag bits.
d160 1
a160 4
<SPAN
CLASS="TYPE"
>AI_CANONNAME</SPAN
>
d162 1
a162 4
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d165 1
a165 4
<CODE
CLASS="CONSTANT"
>ai_canonname</CODE
>
d167 1
a167 4
<SPAN
CLASS="TYPE"
>addrinfo</SPAN
>
d170 1
a170 4
<SPAN
CLASS="TYPE"
>AI_PASSIVE</SPAN
>
d173 1
a173 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>bind</SPAN
>(2)</SPAN
>.
d176 1
a176 4
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
d179 1
a179 4
<SPAN
CLASS="TYPE"
>INADDR_ANY</SPAN
>
d181 6
a186 11
<SPAN
CLASS="TYPE"
>IN6ADDR_ANY_INIT</SPAN
>
for an IPv6 address.</P
><P
>When
<CODE
CLASS="CONSTANT"
>ai_flags</CODE
>
d188 1
a188 4
<SPAN
CLASS="TYPE"
>AI_PASSIVE</SPAN
>
d191 2
a192 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>connect</SPAN
>(2)</SPAN
>
d194 3
a196 15
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>connect</SPAN
>(2)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>sendto</SPAN
>(2)</SPAN
>,
d199 2
a200 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>sendmsg</SPAN
>(2)</SPAN
>
d204 1
a204 4
<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d206 1
a206 4
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
d208 1
a208 4
<SPAN
CLASS="TYPE"
>AI_PASSIVE</SPAN
>
d210 5
a214 10
<CODE
CLASS="CONSTANT"
>ai_flags</CODE
>.</P
><P
>If
<CODE
CLASS="CONSTANT"
>ai_flags</CODE
>
d216 1
a216 4
<SPAN
CLASS="TYPE"
>AI_NUMERICHOST</SPAN
>
d218 1
a218 4
<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d220 20
a239 44
and no name resolution should be attempted.</P
></DD
></DL
></DIV
></P
><P
>All other elements of the <SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
> passed
via <VAR
CLASS="PARAMETER"
>hints</VAR
> must be zero.</P
><P
>A <VAR
CLASS="PARAMETER"
>hints</VAR
> of <SPAN
CLASS="TYPE"
>NULL</SPAN
> is treated as if
the caller provided a <SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
> initialized to zero
with <CODE
CLASS="CONSTANT"
>ai_family</CODE
>set to
<CODE
CLASS="CONSTANT"
>PF_UNSPEC</CODE
>.</P
><P
>After a successful call to
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>,
<VAR
CLASS="PARAMETER"
>*res</VAR
>
d241 1
a241 4
<SPAN
CLASS="TYPE"
>addrinfo</SPAN
>
d244 1
a244 4
<SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
>
d247 1
a247 4
<CODE
CLASS="CONSTANT"
>ai_next</CODE
>
d249 1
a249 4
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
d252 2
a253 8
<CODE
CLASS="CONSTANT"
>ai_family</CODE
>,
<CODE
CLASS="CONSTANT"
>ai_socktype</CODE
>,
d255 1
a255 4
<CODE
CLASS="CONSTANT"
>ai_protocol</CODE
>
d258 1
a258 4
<SPAN
CLASS="TYPE"
>addrinfo</SPAN
>
d260 1
a260 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>socket</SPAN
>(2)</SPAN
>.
d262 1
a262 4
<SPAN
CLASS="TYPE"
>addrinfo</SPAN
>
d264 1
a264 4
<CODE
CLASS="CONSTANT"
>ai_addr</CODE
>
d266 5
a270 10
<CODE
CLASS="CONSTANT"
>ai_addrlen</CODE
>.</P
><P
>All of the information returned by
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d273 1
a273 4
<CODE
CLASS="CONSTANT"
>addrinfo</CODE
>structures.
d276 1
a276 4
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d278 2
a279 8
<CODE
CLASS="FUNCTION"
>lwres_freeaddrinfo()</CODE
>.
<VAR
CLASS="PARAMETER"
>ai</VAR
>
d281 1
a281 4
<SPAN
CLASS="TYPE"
>struct addrinfo</SPAN
>
d283 7
a289 17
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN142"
></A
><H2
>RETURN VALUES</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d291 2
a292 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>gai_strerror</SPAN
>(3)</SPAN
>
d295 1
a295 4
<VAR
CLASS="PARAMETER"
>hostname</VAR
>
d297 1
a297 4
<VAR
CLASS="PARAMETER"
>servname</VAR
>
d299 2
a300 8
<SPAN
CLASS="TYPE"
>NULL</SPAN
>
<CODE
CLASS="FUNCTION"
>lwres_getaddrinfo()</CODE
>
d302 32
a333 104
<SPAN
CLASS="ERRORCODE"
>EAI_NONAME</SPAN
>.&#13;</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN154"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_getaddrinfo</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_freeaddrinfo</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_gai_strerror</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>RFC2133</SPAN
></SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>getservbyname</SPAN
>(3)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>bind</SPAN
>(2)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>connect</SPAN
>(2)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>sendto</SPAN
>(2)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>sendmsg</SPAN
>(2)</SPAN
>,

<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>socket</SPAN
>(2)</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_getaddrinfo</A
></H1
d57 2
a61 2
><P
></P
d114 1
a114 1
><TT
d116 1
a116 1
>lwres_getaddrinfo()</TT
d119 1
a119 1
<TT
d121 1
a121 3
><I
>hostname</I
></TT
d124 1
a124 1
<TT
d126 1
a126 3
><I
>servname</I
></TT
d130 1
a130 1
<TT
d132 1
a132 1
>getaddrinfo()</TT
d135 1
a135 1
<TT
d137 1
a137 3
><I
>hostname</I
></TT
d140 1
a140 1
<TT
d142 1
a142 3
><I
>servname</I
></TT
d151 1
a151 1
<TT
d153 1
a153 3
><I
>hostname</I
></TT
d157 1
a157 1
<TT
d159 1
a159 3
><I
>servname</I
></TT
d167 1
a167 1
><TT
d169 1
a169 3
><I
>hints</I
></TT
d179 1
a179 1
<TT
d181 1
a181 3
><I
>*hints</I
></TT
d190 1
a190 1
><TT
d192 1
a192 1
>ai_family</TT
d198 1
a198 1
<TT
d200 1
a200 1
>ai_family</TT
d211 1
a211 1
><TT
d213 1
a213 1
>ai_socktype</TT
d233 1
a233 1
<TT
d235 1
a235 1
>ai_socktype</TT
d240 1
a240 1
><TT
d242 1
a242 1
>ai_protocol</TT
d249 1
a249 1
<TT
d251 1
a251 1
>ai_protocol</TT
d256 1
a256 1
><TT
d258 1
a258 1
>ai_flags</TT
d269 1
a269 1
<TT
d271 1
a271 1
>lwres_getaddrinfo()</TT
d273 1
a273 1
will return a a null-terminated string containing the canonical name
d275 1
a275 1
<TT
d277 1
a277 1
>ai_canonname</TT
d319 1
a319 1
<TT
d321 1
a321 1
>ai_flags</TT
d365 1
a365 1
<TT
d367 1
a367 3
><I
>hostname</I
></TT
d380 1
a380 1
<TT
d382 1
a382 1
>ai_flags</TT
d386 1
a386 1
<TT
d388 1
a388 1
>ai_flags</TT
d396 1
a396 1
<TT
d398 1
a398 3
><I
>hostname</I
></TT
d411 1
a411 1
via <TT
d413 1
a413 3
><I
>hints</I
></TT
d416 1
a416 1
>A <TT
d418 1
a418 3
><I
>hints</I
></TT
d427 1
a427 1
with <TT
d429 1
a429 1
>ai_family</TT
d431 1
a431 1
<TT
d433 1
a433 1
>PF_UNSPEC</TT
d437 1
a437 1
<TT
d439 1
a439 1
>lwres_getaddrinfo()</TT
d441 1
a441 1
<TT
d443 1
a443 3
><I
>*res</I
></TT
d458 1
a458 1
<TT
d460 1
a460 1
>ai_next</TT
d469 1
a469 1
<TT
d471 1
a471 1
>ai_family</TT
d473 1
a473 1
<TT
d475 1
a475 1
>ai_socktype</TT
d478 1
a478 1
<TT
d480 1
a480 1
>ai_protocol</TT
d502 1
a502 1
<TT
d504 1
a504 1
>ai_addr</TT
d507 1
a507 1
<TT
d509 1
a509 1
>ai_addrlen</TT
d513 1
a513 1
<TT
d515 1
a515 1
>lwres_getaddrinfo()</TT
d519 1
a519 1
<TT
d521 1
a521 1
>addrinfo</TT
d525 1
a525 1
<TT
d527 1
a527 1
>lwres_getaddrinfo()</TT
d530 1
a530 1
<TT
d532 1
a532 1
>lwres_freeaddrinfo()</TT
d534 1
a534 1
<TT
d536 1
a536 3
><I
>ai</I
></TT
d544 1
a544 1
<TT
d546 1
a546 1
>lwres_getaddrinfo()</TT
d557 1
a557 1
><TT
d559 1
a559 1
>lwres_getaddrinfo()</TT
d571 1
a571 1
<TT
d573 1
a573 3
><I
>hostname</I
></TT
d576 1
a576 1
<TT
d578 1
a578 3
><I
>servname</I
></TT
d585 1
a585 1
<TT
d587 1
a587 1
>lwres_getaddrinfo()</TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d722 1
a722 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.3 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_getaddrinfo</H1
a53 2
><P
></P
d57 2
d111 1
a111 1
><CODE
d113 1
a113 1
>lwres_getaddrinfo()</CODE
d116 1
a116 1
<VAR
d118 3
a120 1
>hostname</VAR
d123 1
a123 1
<VAR
d125 3
a127 1
>servname</VAR
d131 1
a131 1
<CODE
d133 1
a133 1
>getaddrinfo()</CODE
d136 1
a136 1
<VAR
d138 3
a140 1
>hostname</VAR
d143 1
a143 1
<VAR
d145 3
a147 1
>servname</VAR
d156 1
a156 1
<VAR
d158 3
a160 1
>hostname</VAR
d164 1
a164 1
<VAR
d166 3
a168 1
>servname</VAR
d176 1
a176 1
><VAR
d178 3
a180 1
>hints</VAR
d190 1
a190 1
<VAR
d192 3
a194 1
>*hints</VAR
d203 1
a203 1
><CODE
d205 1
a205 1
>ai_family</CODE
d211 1
a211 1
<CODE
d213 1
a213 1
>ai_family</CODE
d224 1
a224 1
><CODE
d226 1
a226 1
>ai_socktype</CODE
d246 1
a246 1
<CODE
d248 1
a248 1
>ai_socktype</CODE
d253 1
a253 1
><CODE
d255 1
a255 1
>ai_protocol</CODE
d262 1
a262 1
<CODE
d264 1
a264 1
>ai_protocol</CODE
d269 1
a269 1
><CODE
d271 1
a271 1
>ai_flags</CODE
d282 1
a282 1
<CODE
d284 1
a284 1
>lwres_getaddrinfo()</CODE
d286 1
a286 1
will return a null-terminated string containing the canonical name
d288 1
a288 1
<CODE
d290 1
a290 1
>ai_canonname</CODE
d332 1
a332 1
<CODE
d334 1
a334 1
>ai_flags</CODE
d378 1
a378 1
<VAR
d380 3
a382 1
>hostname</VAR
d395 1
a395 1
<CODE
d397 1
a397 1
>ai_flags</CODE
d401 1
a401 1
<CODE
d403 1
a403 1
>ai_flags</CODE
d411 1
a411 1
<VAR
d413 3
a415 1
>hostname</VAR
d428 1
a428 1
via <VAR
d430 3
a432 1
>hints</VAR
d435 1
a435 1
>A <VAR
d437 3
a439 1
>hints</VAR
d448 1
a448 1
with <CODE
d450 1
a450 1
>ai_family</CODE
d452 1
a452 1
<CODE
d454 1
a454 1
>PF_UNSPEC</CODE
d458 1
a458 1
<CODE
d460 1
a460 1
>lwres_getaddrinfo()</CODE
d462 1
a462 1
<VAR
d464 3
a466 1
>*res</VAR
d481 1
a481 1
<CODE
d483 1
a483 1
>ai_next</CODE
d492 1
a492 1
<CODE
d494 1
a494 1
>ai_family</CODE
d496 1
a496 1
<CODE
d498 1
a498 1
>ai_socktype</CODE
d501 1
a501 1
<CODE
d503 1
a503 1
>ai_protocol</CODE
d525 1
a525 1
<CODE
d527 1
a527 1
>ai_addr</CODE
d530 1
a530 1
<CODE
d532 1
a532 1
>ai_addrlen</CODE
d536 1
a536 1
<CODE
d538 1
a538 1
>lwres_getaddrinfo()</CODE
d542 1
a542 1
<CODE
d544 1
a544 1
>addrinfo</CODE
d548 1
a548 1
<CODE
d550 1
a550 1
>lwres_getaddrinfo()</CODE
d553 1
a553 1
<CODE
d555 1
a555 1
>lwres_freeaddrinfo()</CODE
d557 1
a557 1
<VAR
d559 3
a561 1
>ai</VAR
d569 1
a569 1
<CODE
d571 1
a571 1
>lwres_getaddrinfo()</CODE
d582 1
a582 1
><CODE
d584 1
a584 1
>lwres_getaddrinfo()</CODE
d596 1
a596 1
<VAR
d598 3
a600 1
>hostname</VAR
d603 1
a603 1
<VAR
d605 3
a607 1
>servname</VAR
d614 1
a614 1
<CODE
d616 1
a616 1
>lwres_getaddrinfo()</CODE
d722 1
a722 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 73
a89 54
<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.10 2005/10/13 02:33:56 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_getaddrinfo</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_getaddrinfo, lwres_freeaddrinfo &#8212; socket address structure to host and service name</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
int
<b class="fsfunc">lwres_getaddrinfo</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_freeaddrinfo</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
</div>
<p>
If the operating system does not provide a
<span class="type">struct addrinfo</span>,
d92 3
a94 3
</p>
<pre class="programlisting">
struct  addrinfo {
d103 15
a117 9
};
</pre>
<p>
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2525883"></a><h2>DESCRIPTION</h2>
<p>
<code class="function">lwres_getaddrinfo()</code>
d119 4
a122 1
<em class="parameter"><code>hostname</code></em>
d124 4
a127 1
<em class="parameter"><code>servname</code></em>.
d130 4
a133 1
<code class="function">getaddrinfo()</code>
d135 4
a138 1
<em class="parameter"><code>hostname</code></em>
d140 4
a143 1
<em class="parameter"><code>servname</code></em>
d146 9
a154 3
<span class="type">NULL</span>.

<em class="parameter"><code>hostname</code></em>
d157 4
a160 1
<em class="parameter"><code>servname</code></em>
d162 9
a170 4
<code class="filename">/etc/services</code>.
</p>
<p>
<em class="parameter"><code>hints</code></em>
d172 4
a175 1
<span class="type">struct addrinfo</span>.
d179 18
a196 6
<em class="parameter"><code>*hints</code></em>:

</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">ai_family</code></span></dt>
<dd><p>The protocol family that should be used.
d198 4
a201 1
<code class="constant">ai_family</code>
d203 4
a206 1
<span class="type">PF_UNSPEC</span>,
d208 18
a225 7
operating system.
</p></dd>
<dt><span class="term"><code class="constant">ai_socktype</code></span></dt>
<dd><p>
denotes the type of socket &#8212;
<span class="type">SOCK_STREAM</span>,
<span class="type">SOCK_DGRAM</span>
d227 5
a231 2
<span class="type">SOCK_RAW</span>
&#8212; that is wanted.
d233 14
a246 6
<code class="constant">ai_socktype</code>
is zero the caller will accept any socket type.
</p></dd>
<dt><span class="term"><code class="constant">ai_protocol</code></span></dt>
<dd><p>
indicates which transport protocol is wanted: IPPROTO_UDP or 
d249 14
a262 7
<code class="constant">ai_protocol</code>
is zero the caller will accept any protocol.
</p></dd>
<dt><span class="term"><code class="constant">ai_flags</code></span></dt>
<dd>
<p>
Flag bits.
d264 4
a267 1
<span class="type">AI_CANONNAME</span>
d269 4
a272 1
<code class="function">lwres_getaddrinfo()</code>
d275 4
a278 1
<code class="constant">ai_canonname</code>
d280 4
a283 1
<span class="type">addrinfo</span>
d286 4
a289 1
<span class="type">AI_PASSIVE</span>
d292 7
a298 1
<span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>.
d301 4
a304 1
<span class="type">NULL</span>
d307 4
a310 1
<span class="type">INADDR_ANY</span>
d312 11
a322 6
<span class="type">IN6ADDR_ANY_INIT</span>
for an IPv6 address.
</p>
<p>
When
<code class="constant">ai_flags</code>
d324 4
a327 1
<span class="type">AI_PASSIVE</span>
d330 7
a336 2
<span class="citerefentry"><span class="refentrytitle">connect</span>(2
)</span>
d338 15
a352 3
<span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,
d355 7
a361 2
<span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2
)</span>
d365 4
a368 1
<em class="parameter"><code>hostname</code></em>
d370 4
a373 1
<span class="type">NULL</span>
d375 4
a378 1
<span class="type">AI_PASSIVE</span>
d380 10
a389 5
<code class="constant">ai_flags</code>.
</p>
<p>
If
<code class="constant">ai_flags</code>
d391 4
a394 1
<span class="type">AI_NUMERICHOST</span>
d396 4
a399 1
<em class="parameter"><code>hostname</code></em>
d401 44
a444 20
and no name resolution should be attempted.
</p>
</dd>
</dl></div>
<p>
</p>
<p>
All other elements of the <span class="type">struct addrinfo</span> passed
via <em class="parameter"><code>hints</code></em> must be zero.
</p>
<p>
A <em class="parameter"><code>hints</code></em> of <span class="type">NULL</span> is treated as if
the caller provided a <span class="type">struct addrinfo</span> initialized to zero
with <code class="constant">ai_family</code>set to
<code class="constant">PF_UNSPEC</code>.
</p>
<p>
After a successful call to
<code class="function">lwres_getaddrinfo()</code>,
<em class="parameter"><code>*res</code></em>
d446 4
a449 1
<span class="type">addrinfo</span>
d452 4
a455 1
<span class="type">struct addrinfo</span>
d458 4
a461 1
<code class="constant">ai_next</code>
d463 4
a466 1
<span class="type">NULL</span>
d469 8
a476 2
<code class="constant">ai_family</code>,
<code class="constant">ai_socktype</code>,
d478 4
a481 1
<code class="constant">ai_protocol</code>
d484 4
a487 1
<span class="type">addrinfo</span>
d489 7
a495 1
<span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
d497 4
a500 1
<span class="type">addrinfo</span>
d502 4
a505 1
<code class="constant">ai_addr</code>
d507 10
a516 5
<code class="constant">ai_addrlen</code>.
</p>
<p>
All of the information returned by
<code class="function">lwres_getaddrinfo()</code>
d519 4
a522 1
<code class="constant">addrinfo</code>structures.
d525 4
a528 1
<code class="function">lwres_getaddrinfo()</code>
d530 8
a537 2
<code class="function">lwres_freeaddrinfo()</code>.
<em class="parameter"><code>ai</code></em>
d539 4
a542 1
<span class="type">struct addrinfo</span>
d544 17
a560 7
<code class="function">lwres_getaddrinfo()</code>.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526309"></a><h2>RETURN VALUES</h2>
<p>
<code class="function">lwres_getaddrinfo()</code>
d562 7
a568 2
<span class="citerefentry"><span class="refentrytitle">gai_strerror</span>(3
)</span>
d571 4
a574 1
<em class="parameter"><code>hostname</code></em>
d576 4
a579 1
<em class="parameter"><code>servname</code></em>
d581 8
a588 2
<span class="type">NULL</span>
<code class="function">lwres_getaddrinfo()</code>
d590 104
a693 32
<span class="errorcode">EAI_NONAME</span>.

</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526347"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_freeaddrinfo</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">lwres_gai_strerror</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">RFC2133</span></span>,

<span class="citerefentry"><span class="refentrytitle">getservbyname</span>(3)</span>,

<span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>,

<span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_getaddrinfo.html,v 1.8.2.1.4.12 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a54 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d59 1
a59 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
d66 1
a66 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d90 1
a90 1
<a name="id2549448"></a><h2>DESCRIPTION</h2>
d287 1
a287 1
<a name="id2549874"></a><h2>RETURN VALUES</h2>
d307 1
a307 1
<a name="id2549912"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_getaddrinfo.html,v 1.10.18.17 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d39 7
a45 3
<td>const char * </td>
<td>
<var class="pdparam">hostname</var>, </td>
d49 2
a50 3
<td>const char * </td>
<td>
<var class="pdparam">servname</var>, </td>
d54 2
a55 3
<td>const struct addrinfo * </td>
<td>
<var class="pdparam">hints</var>, </td>
d59 1
a59 1
<td>struct addrinfo ** </td>
d61 1
a61 1
<var class="pdparam">res</var><code>)</code>;</td>
d64 2
a65 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
d69 7
a75 1
<td>struct addrinfo * </td>
d77 3
a79 2
<var class="pdparam">ai</var><code>)</code>;</td>
</tr></table>
d82 5
a86 4
      If the operating system does not provide a
      <span class="type">struct addrinfo</span>,
      the following structure is used:
    </p>
d100 1
a100 1
    </p>
d103 33
a135 26
<a name="id2543412"></a><h2>DESCRIPTION</h2>
<p><code class="function">lwres_getaddrinfo()</code>
      is used to get a list of IP addresses and port numbers for host
      <em class="parameter"><code>hostname</code></em> and service
      <em class="parameter"><code>servname</code></em>.

      The function is the lightweight resolver's implementation of
      <code class="function">getaddrinfo()</code> as defined in RFC2133.
      <em class="parameter"><code>hostname</code></em> and
      <em class="parameter"><code>servname</code></em> are pointers to null-terminated
      strings or <span class="type">NULL</span>.

      <em class="parameter"><code>hostname</code></em> is either a host name or a
      numeric host address string: a dotted decimal IPv4 address or an
      IPv6 address.  <em class="parameter"><code>servname</code></em> is either a
      decimal port number or a service name as listed in
      <code class="filename">/etc/services</code>.
    </p>
<p><em class="parameter"><code>hints</code></em>
      is an optional pointer to a
      <span class="type">struct addrinfo</span>.
      This structure can be used to provide hints concerning the type of
      socket
      that the caller supports or wishes to use.
      The caller can supply the following structure elements in
      <em class="parameter"><code>*hints</code></em>:
d137 1
a137 1
      </p>
d140 8
a147 10
<dd><p>
              The protocol family that should be used.
              When
              <code class="constant">ai_family</code>
              is set to
              <span class="type">PF_UNSPEC</span>,
              it means the caller will accept any protocol family supported by
              the
              operating system.
            </p></dd>
d150 10
a159 10
              denotes the type of socket &#8212;
              <span class="type">SOCK_STREAM</span>,
              <span class="type">SOCK_DGRAM</span>
              or
              <span class="type">SOCK_RAW</span>
              &#8212; that is wanted.
              When
              <code class="constant">ai_socktype</code>
              is zero the caller will accept any socket type.
            </p></dd>
d162 6
a167 6
              indicates which transport protocol is wanted: IPPROTO_UDP or
              IPPROTO_TCP.
              If
              <code class="constant">ai_protocol</code>
              is zero the caller will accept any protocol.
            </p></dd>
d171 64
a234 65
              Flag bits.
              If the
              <span class="type">AI_CANONNAME</span>
              bit is set, a successful call to
              <code class="function">lwres_getaddrinfo()</code>
              will return a null-terminated string containing the canonical
              name
              of the specified hostname in
              <code class="constant">ai_canonname</code>
              of the first
              <span class="type">addrinfo</span>
              structure returned.
              Setting the
              <span class="type">AI_PASSIVE</span>
              bit indicates that the returned socket address structure is
              intended
              for used in a call to
              <span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>.

              In this case, if the hostname argument is a
              <span class="type">NULL</span>
              pointer, then the IP address portion of the socket
              address structure will be set to
              <span class="type">INADDR_ANY</span>
              for an IPv4 address or
              <span class="type">IN6ADDR_ANY_INIT</span>
              for an IPv6 address.
            </p>
<p>
              When
              <code class="constant">ai_flags</code>
              does not set the
              <span class="type">AI_PASSIVE</span>
              bit, the returned socket address structure will be ready
              for use in a call to
              <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>
              for a connection-oriented protocol or
              <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,

              <span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,

              or
              <span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>
              if a connectionless protocol was chosen.
              The IP address portion of the socket address structure will be
              set to the loopback address if
              <em class="parameter"><code>hostname</code></em>
              is a
              <span class="type">NULL</span>
              pointer and
              <span class="type">AI_PASSIVE</span>
              is not set in
              <code class="constant">ai_flags</code>.
            </p>
<p>
              If
              <code class="constant">ai_flags</code>
              is set to
              <span class="type">AI_NUMERICHOST</span>
              it indicates that
              <em class="parameter"><code>hostname</code></em>
              should be treated as a numeric string defining an IPv4 or IPv6
              address
              and no name resolution should be attempted.
            </p>
d238 11
a248 1
    </p>
d250 48
a297 59
      All other elements of the <span class="type">struct addrinfo</span> passed
      via <em class="parameter"><code>hints</code></em> must be zero.
    </p>
<p>
      A <em class="parameter"><code>hints</code></em> of <span class="type">NULL</span> is
      treated as if
      the caller provided a <span class="type">struct addrinfo</span> initialized to zero
      with <code class="constant">ai_family</code>set to
      <code class="constant">PF_UNSPEC</code>.
    </p>
<p>
      After a successful call to
      <code class="function">lwres_getaddrinfo()</code>,
      <em class="parameter"><code>*res</code></em>
      is a pointer to a linked list of one or more
      <span class="type">addrinfo</span>
      structures.
      Each
      <span class="type">struct addrinfo</span>
      in this list cn be processed by following
      the
      <code class="constant">ai_next</code>
      pointer, until a
      <span class="type">NULL</span>
      pointer is encountered.
      The three members
      <code class="constant">ai_family</code>,
      <code class="constant">ai_socktype</code>,
      and
      <code class="constant">ai_protocol</code>
      in each
      returned
      <span class="type">addrinfo</span>
      structure contain the corresponding arguments for a call to
      <span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
      For each
      <span class="type">addrinfo</span>
      structure in the list, the
      <code class="constant">ai_addr</code>
      member points to a filled-in socket address structure of length
      <code class="constant">ai_addrlen</code>.
    </p>
<p>
      All of the information returned by
      <code class="function">lwres_getaddrinfo()</code>
      is dynamically allocated: the addrinfo structures, and the socket
      address structures and canonical host name strings pointed to by the
      <code class="constant">addrinfo</code>structures.
      Memory allocated for the dynamically allocated structures created by
      a successful call to
      <code class="function">lwres_getaddrinfo()</code>
      is released by
      <code class="function">lwres_freeaddrinfo()</code>.
      <em class="parameter"><code>ai</code></em>
      is a pointer to a
      <span class="type">struct addrinfo</span>
      created by a call to
      <code class="function">lwres_getaddrinfo()</code>.
    </p>
d300 18
a317 9
<a name="id2543789"></a><h2>RETURN VALUES</h2>
<p><code class="function">lwres_getaddrinfo()</code>
      returns zero on success or one of the error codes listed in
      <span class="citerefentry"><span class="refentrytitle">gai_strerror</span>(3)</span>
      if an error occurs.  If both <em class="parameter"><code>hostname</code></em> and
      <em class="parameter"><code>servname</code></em> are <span class="type">NULL</span>
      <code class="function">lwres_getaddrinfo()</code> returns
      <span class="errorcode">EAI_NONAME</span>.
    </p>
d320 3
a322 2
<a name="id2543827"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres</span>(3)</span>,
d324 1
a324 1
      <span class="citerefentry"><span class="refentrytitle">lwres_getaddrinfo</span>(3)</span>,
d326 1
a326 1
      <span class="citerefentry"><span class="refentrytitle">lwres_freeaddrinfo</span>(3)</span>,
d328 1
a328 1
      <span class="citerefentry"><span class="refentrytitle">lwres_gai_strerror</span>(3)</span>,
d330 1
a330 1
      <span class="citerefentry"><span class="refentrytitle">RFC2133</span></span>,
d332 1
a332 1
      <span class="citerefentry"><span class="refentrytitle">getservbyname</span>(3)</span>,
d334 1
a334 1
      <span class="citerefentry"><span class="refentrytitle">bind</span>(2)</span>,
d336 1
a336 1
      <span class="citerefentry"><span class="refentrytitle">connect</span>(2)</span>,
d338 1
a338 1
      <span class="citerefentry"><span class="refentrytitle">sendto</span>(2)</span>,
d340 1
a340 1
      <span class="citerefentry"><span class="refentrytitle">sendmsg</span>(2)</span>,
d342 2
a343 2
      <span class="citerefentry"><span class="refentrytitle">socket</span>(2)</span>.
    </p>
@


