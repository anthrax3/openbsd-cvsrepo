head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.38
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.52;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.07;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.34;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.27;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.58;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_gnba.html,v 1.7.18.17 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gnba</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gnbarequest_render, lwres_gnbaresponse_render, lwres_gnbarequest_parse, lwres_gnbaresponse_parse, lwres_gnbaresponse_free, lwres_gnbarequest_free &#8212; lightweight resolver getnamebyaddress message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwres.h&gt;
</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbarequest_render</b>
(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbarequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbaresponse_render</b>
(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbaresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbarequest_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbarequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbaresponse_parse</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbaresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gnbaresponse_free</b>
(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbaresponse_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gnbarequest_free</b>(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbarequest_t ** </td>
<td>
<var class="pdparam">structp</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543525"></a><h2>DESCRIPTION</h2>
<p>
      These are low-level routines for creating and parsing
      lightweight resolver address-to-name lookup request and
      response messages.
    </p>
<p>
      There are four main functions for the getnamebyaddr opcode.
      One render function converts a getnamebyaddr request structure &#8212;
      <span class="type">lwres_gnbarequest_t</span> &#8212;
      to the lightweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a getnamebyaddr request structure.
      Another render function converts the getnamebyaddr response structure
      &#8212;
      <span class="type">lwres_gnbaresponse_t</span>
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a getnamebyaddr response structure.
    </p>
<p>
      These structures are defined in
      <code class="filename">lwres/lwres.h</code>.
      They are shown below.
    </p>
<pre class="programlisting">
#define LWRES_OPCODE_GETNAMEBYADDR      0x00010002U
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint32_t  flags;
        lwres_addr_t    addr;
} lwres_gnbarequest_t;
</pre>
<p>
    </p>
<pre class="programlisting">
typedef struct {
        lwres_uint32_t  flags;
        lwres_uint16_t  naliases;
        char           *realname;
        char          **aliases;
        lwres_uint16_t  realnamelen;
        lwres_uint16_t *aliaslen;
        void           *base;
        size_t          baselen;
} lwres_gnbaresponse_t;
</pre>
<p>
    </p>
<p><code class="function">lwres_gnbarequest_render()</code>
      uses resolver context <code class="varname">ctx</code> to convert
      getnamebyaddr request structure <code class="varname">req</code> to
      canonical format.  The packet header structure
      <code class="varname">pkt</code> is initialised and transferred to buffer
      <code class="varname">b</code>.  The contents of <code class="varname">*req</code>
      are then appended to the buffer in canonical format.
      <code class="function">lwres_gnbaresponse_render()</code> performs the
      same task, except it converts a getnamebyaddr response structure
      <span class="type">lwres_gnbaresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_gnbarequest_parse()</code>
      uses context <code class="varname">ctx</code> to convert the contents of
      packet <code class="varname">pkt</code> to a
      <span class="type">lwres_gnbarequest_t</span> structure.  Buffer
      <code class="varname">b</code> provides space to be used for storing this
      structure.  When the function succeeds, the resulting
      <span class="type">lwres_gnbarequest_t</span> is made available through
      <code class="varname">*structp</code>.
      <code class="function">lwres_gnbaresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_gnbarequest_parse()</code>
      except it yields a <span class="type">lwres_gnbaresponse_t</span> structure.
    </p>
<p><code class="function">lwres_gnbaresponse_free()</code>
      and <code class="function">lwres_gnbarequest_free()</code> release the
      memory in resolver context <code class="varname">ctx</code> that was
      allocated to the <span class="type">lwres_gnbaresponse_t</span> or
      <span class="type">lwres_gnbarequest_t</span> structures referenced via
      <code class="varname">structp</code>.  Any memory associated with
      ancillary buffers and strings for those structures is also
      discarded.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543665"></a><h2>RETURN VALUES</h2>
<p>
      The getnamebyaddr opcode functions
      <code class="function">lwres_gnbarequest_render()</code>,
      <code class="function">lwres_gnbaresponse_render()</code>
      <code class="function">lwres_gnbarequest_parse()</code>
      and
      <code class="function">lwres_gnbaresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <code class="varname">b</code>
      is too small to accommodate the packet header or the
      <span class="type">lwres_gnbarequest_t</span>
      and
      <span class="type">lwres_gnbaresponse_t</span>
      structures.
      <code class="function">lwres_gnbarequest_parse()</code>
      and
      <code class="function">lwres_gnbaresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <em class="structfield"><code>pktflags</code></em>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543731"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d42 1
a42 7
<td> </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d48 1
a48 1
<td> </td>
d54 1
a54 1
<td> </td>
d60 1
a60 1
<td> </td>
d71 3
a73 2
<td> </td>
<td>, </td>
d77 3
a79 2
<td> </td>
<td>, </td>
d83 3
a85 2
<td> </td>
<td>, </td>
d89 1
a89 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d91 1
a91 1
<code>)</code>;</td>
d99 3
a101 2
<td> </td>
<td>, </td>
d105 3
a107 2
<td> </td>
<td>, </td>
d111 3
a113 2
<td> </td>
<td>, </td>
d117 1
a117 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d119 1
a119 1
<code>)</code>;</td>
d127 3
a129 2
<td> </td>
<td>, </td>
d133 3
a135 2
<td> </td>
<td>, </td>
d139 3
a141 2
<td> </td>
<td>, </td>
d145 1
a145 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d147 1
a147 1
<code>)</code>;</td>
d156 3
a158 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d162 1
a162 1
<td> </td>
d164 1
a164 1
<code>)</code>;</td>
d172 3
a174 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d178 1
a178 1
<td> </td>
d180 1
a180 1
<code>)</code>;</td>
d186 1
a186 1
<a name="id2549540"></a><h2>DESCRIPTION</h2>
d188 4
a191 4
These are low-level routines for creating and parsing
lightweight resolver address-to-name lookup request and 
response messages.
</p>
d193 13
a205 12
There are four main functions for the getnamebyaddr opcode.
One render function converts a getnamebyaddr request structure &#8212;
<span class="type">lwres_gnbarequest_t</span> &#8212;
to the lightweight resolver's canonical format.
It is complemented by a parse function that converts a packet in this
canonical format to a getnamebyaddr request structure.
Another render function converts the getnamebyaddr response structure &#8212;
<span class="type">lwres_gnbaresponse_t</span>
to the canonical format.
This is complemented by a parse function which converts a packet in
canonical format to a getnamebyaddr response structure.
</p>
d207 4
a210 4
These structures are defined in
<code class="filename">lwres/lwres.h</code>.
They are shown below.
</p>
d213 4
a216 1

d221 4
a224 1

d237 34
a270 59
</p>
<p>
<code class="function">lwres_gnbarequest_render()</code>
uses resolver context
<code class="varname">ctx</code>
to convert getnamebyaddr request structure
<code class="varname">req</code>
to canonical format.
The packet header structure
<code class="varname">pkt</code>
is initialised and transferred to
buffer
<code class="varname">b</code>.
The contents of
<code class="varname">*req</code>
are then appended to the buffer in canonical format.
<code class="function">lwres_gnbaresponse_render()</code>
performs the same task, except it converts a getnamebyaddr response structure
<span class="type">lwres_gnbaresponse_t</span>
to the lightweight resolver's canonical format.
</p>
<p>
<code class="function">lwres_gnbarequest_parse()</code>
uses context
<code class="varname">ctx</code>
to convert the contents of packet
<code class="varname">pkt</code>
to a
<span class="type">lwres_gnbarequest_t</span>
structure.
Buffer
<code class="varname">b</code>
provides space to be used for storing this structure.
When the function succeeds, the resulting
<span class="type">lwres_gnbarequest_t</span>
is made available through
<code class="varname">*structp</code>.
<code class="function">lwres_gnbaresponse_parse()</code>
offers the same semantics as
<code class="function">lwres_gnbarequest_parse()</code>
except it yields a
<span class="type">lwres_gnbaresponse_t</span>
structure.
</p>
<p>
<code class="function">lwres_gnbaresponse_free()</code>
and
<code class="function">lwres_gnbarequest_free()</code>
release the memory in resolver context
<code class="varname">ctx</code>
that was allocated to the
<span class="type">lwres_gnbaresponse_t</span>
or
<span class="type">lwres_gnbarequest_t</span>
structures referenced via
<code class="varname">structp</code>.
Any memory associated with ancillary buffers and strings for those
structures is also discarded.
</p>
d273 1
a273 1
<a name="id2549733"></a><h2>RETURN VALUES</h2>
d275 34
a308 34
The getnamebyaddr opcode functions
<code class="function">lwres_gnbarequest_render()</code>,
<code class="function">lwres_gnbaresponse_render()</code>
<code class="function">lwres_gnbarequest_parse()</code>
and
<code class="function">lwres_gnbaresponse_parse()</code>
all return
<span class="errorcode">LWRES_R_SUCCESS</span>
on success.
They return
<span class="errorcode">LWRES_R_NOMEMORY</span>
if memory allocation fails.
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
is returned if the available space in the buffer
<code class="varname">b</code>
is too small to accommodate the packet header or the
<span class="type">lwres_gnbarequest_t</span>
and
<span class="type">lwres_gnbaresponse_t</span>
structures.
<code class="function">lwres_gnbarequest_parse()</code>
and
<code class="function">lwres_gnbaresponse_parse()</code>
will return
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
if the buffer is not empty after decoding the received packet.
These functions will return
<span class="errorcode">LWRES_R_FAILURE</span>
if
<em class="structfield"><code>pktflags</code></em>
in the packet header structure
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
d311 3
a313 4
<a name="id2549866"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d42 1
a42 1
<td>lwres_context_t * </td>
d48 7
a54 1
<td>lwres_gnbarequest_t * </td>
d60 1
a60 1
<td>lwres_lwpacket_t * </td>
d66 1
a66 1
<td>lwres_buffer_t * </td>
d93 5
d123 5
d153 5
d174 5
d194 5
d206 1
a206 1
<a name="id2525975"></a><h2>DESCRIPTION</h2>
d311 1
a311 1
<a name="id2526100"></a><h2>RETURN VALUES</h2>
d349 1
a349 1
<a name="id2526165"></a><h2>SEE ALSO</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 161
a177 109

<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_gnba</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_gnba</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_gnbarequest_render, lwres_gnbaresponse_render, lwres_gnbarequest_parse, lwres_gnbaresponse_parse, lwres_gnbaresponse_free, lwres_gnbarequest_free&nbsp;--&nbsp;lightweight resolver getnamebyaddress message handling</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN16"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN17"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwres.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gnbarequest_render</CODE
>(lwres_context_t *ctx, lwres_gnbarequest_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gnbaresponse_render</CODE
>(lwres_context_t *ctx, lwres_gnbaresponse_t *req, lwres_lwpacket_t *pkt, lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gnbarequest_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_gnbarequest_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_result_t
lwres_gnbaresponse_parse</CODE
>(lwres_context_t *ctx, lwres_buffer_t *b, lwres_lwpacket_t *pkt, lwres_gnbaresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_gnbaresponse_free</CODE
>(lwres_context_t *ctx, lwres_gnbaresponse_t **structp);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_gnbarequest_free</CODE
>(lwres_context_t *ctx, lwres_gnbarequest_t **structp);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN61"
></A
><H2
>DESCRIPTION</H2
><P
>These are low-level routines for creating and parsing
d179 6
a184 8
response messages.</P
><P
>There are four main functions for the getnamebyaddr opcode.
One render function converts a getnamebyaddr request structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_gnbarequest_t</SPAN
> &mdash;
d188 2
a189 5
Another render function converts the getnamebyaddr response structure &mdash;
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
d192 5
a196 7
canonical format to a getnamebyaddr response structure.</P
><P
>These structures are defined in
<TT
CLASS="FILENAME"
>lwres/lwres.h</TT
>.
d198 3
a200 3
<PRE
CLASS="PROGRAMLISTING"
>#define LWRES_OPCODE_GETNAMEBYADDR      0x00010002U
d216 6
a221 7
} lwres_gnbaresponse_t;</PRE
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_gnbarequest_render()</CODE
>
d223 1
a223 4
<VAR
CLASS="VARNAME"
>ctx</VAR
>
d225 1
a225 4
<VAR
CLASS="VARNAME"
>req</VAR
>
d228 1
a228 4
<VAR
CLASS="VARNAME"
>pkt</VAR
>
d231 1
a231 4
<VAR
CLASS="VARNAME"
>b</VAR
>.
d233 1
a233 4
<VAR
CLASS="VARNAME"
>*req</VAR
>
d235 1
a235 4
<CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_render()</CODE
>
d237 5
a241 10
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
to the lightweight resolver's canonical format.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gnbarequest_parse()</CODE
>
d243 1
a243 4
<VAR
CLASS="VARNAME"
>ctx</VAR
>
d245 1
a245 4
<VAR
CLASS="VARNAME"
>pkt</VAR
>
d247 1
a247 4
<SPAN
CLASS="TYPE"
>lwres_gnbarequest_t</SPAN
>
d250 1
a250 4
<VAR
CLASS="VARNAME"
>b</VAR
>
d253 1
a253 4
<SPAN
CLASS="TYPE"
>lwres_gnbarequest_t</SPAN
>
d255 2
a256 8
<VAR
CLASS="VARNAME"
>*structp</VAR
>.
<CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_parse()</CODE
>
d258 1
a258 4
<CODE
CLASS="FUNCTION"
>lwres_gnbarequest_parse()</CODE
>
d260 5
a264 10
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
structure.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_free()</CODE
>
d266 1
a266 4
<CODE
CLASS="FUNCTION"
>lwres_gnbarequest_free()</CODE
>
d268 1
a268 4
<VAR
CLASS="VARNAME"
>ctx</VAR
>
d270 1
a270 4
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
d272 1
a272 4
<SPAN
CLASS="TYPE"
>lwres_gnbarequest_t</SPAN
>
d274 1
a274 4
<VAR
CLASS="VARNAME"
>structp</VAR
>.
d276 10
a285 23
structures is also discarded.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN97"
></A
><H2
>RETURN VALUES</H2
><P
>The getnamebyaddr opcode functions
<CODE
CLASS="FUNCTION"
>lwres_gnbarequest_render()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_render()</CODE
>
<CODE
CLASS="FUNCTION"
>lwres_gnbarequest_parse()</CODE
>
d287 1
a287 4
<CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_parse()</CODE
>
d289 1
a289 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_SUCCESS</SPAN
>
d292 1
a292 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_NOMEMORY</SPAN
>
d294 1
a294 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d296 1
a296 4
<VAR
CLASS="VARNAME"
>b</VAR
>
d298 1
a298 4
<SPAN
CLASS="TYPE"
>lwres_gnbarequest_t</SPAN
>
d300 1
a300 4
<SPAN
CLASS="TYPE"
>lwres_gnbaresponse_t</SPAN
>
d302 1
a302 4
<CODE
CLASS="FUNCTION"
>lwres_gnbarequest_parse()</CODE
>
d304 1
a304 4
<CODE
CLASS="FUNCTION"
>lwres_gnbaresponse_parse()</CODE
>
d306 1
a306 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_UNEXPECTEDEND</SPAN
>
d309 1
a309 4
<SPAN
CLASS="ERRORCODE"
>LWRES_R_FAILURE</SPAN
>
d311 1
a311 4
<CODE
CLASS="STRUCTFIELD"
>pktflags</CODE
>
d313 12
a324 25
<SPAN
CLASS="TYPE"
>lwres_lwpacket_t</SPAN
>
indicate that the packet is not a response to an earlier query.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN116"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_packet</SPAN
>(3)</SPAN
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_gnba</A
></H1
d57 2
a61 2
><P
></P
d174 1
a174 1
><TT
d176 1
a176 1
>lwres_gnbarequest_render()</TT
d179 1
a179 1
<TT
d181 1
a181 1
>ctx</TT
d184 1
a184 1
<TT
d186 1
a186 1
>req</TT
d190 1
a190 1
<TT
d192 1
a192 1
>pkt</TT
d196 1
a196 1
<TT
d198 1
a198 1
>b</TT
d201 1
a201 1
<TT
d203 1
a203 1
>*req</TT
d206 1
a206 1
<TT
d208 1
a208 1
>lwres_gnbaresponse_render()</TT
d217 1
a217 1
><TT
d219 1
a219 1
>lwres_gnbarequest_parse()</TT
d222 1
a222 1
<TT
d224 1
a224 1
>ctx</TT
d227 1
a227 1
<TT
d229 1
a229 1
>pkt</TT
d238 1
a238 1
<TT
d240 1
a240 1
>b</TT
d249 1
a249 1
<TT
d251 1
a251 1
>*structp</TT
d253 1
a253 1
<TT
d255 1
a255 1
>lwres_gnbaresponse_parse()</TT
d258 1
a258 1
<TT
d260 1
a260 1
>lwres_gnbarequest_parse()</TT
d269 1
a269 1
><TT
d271 1
a271 1
>lwres_gnbaresponse_free()</TT
d274 1
a274 1
<TT
d276 1
a276 1
>lwres_gnbarequest_free()</TT
d279 1
a279 1
<TT
d281 1
a281 1
>ctx</TT
d294 1
a294 1
<TT
d296 1
a296 1
>structp</TT
d310 1
a310 1
<TT
d312 1
a312 1
>lwres_gnbarequest_render()</TT
d314 1
a314 1
<TT
d316 1
a316 1
>lwres_gnbaresponse_render()</TT
d318 1
a318 1
<TT
d320 1
a320 1
>lwres_gnbarequest_parse()</TT
d323 1
a323 1
<TT
d325 1
a325 1
>lwres_gnbaresponse_parse()</TT
d344 1
a344 1
<TT
d346 1
a346 1
>b</TT
d359 1
a359 1
<TT
d361 1
a361 1
>lwres_gnbarequest_parse()</TT
d364 1
a364 1
<TT
d366 1
a366 1
>lwres_gnbaresponse_parse()</TT
d380 1
a380 1
<TT
d382 1
a382 3
><I
>pktflags</I
></TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d408 1
a408 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_gnba</H1
a53 2
><P
></P
d57 2
d171 1
a171 1
><CODE
d173 1
a173 1
>lwres_gnbarequest_render()</CODE
d176 1
a176 1
<VAR
d178 1
a178 1
>ctx</VAR
d181 1
a181 1
<VAR
d183 1
a183 1
>req</VAR
d187 1
a187 1
<VAR
d189 1
a189 1
>pkt</VAR
d193 1
a193 1
<VAR
d195 1
a195 1
>b</VAR
d198 1
a198 1
<VAR
d200 1
a200 1
>*req</VAR
d203 1
a203 1
<CODE
d205 1
a205 1
>lwres_gnbaresponse_render()</CODE
d214 1
a214 1
><CODE
d216 1
a216 1
>lwres_gnbarequest_parse()</CODE
d219 1
a219 1
<VAR
d221 1
a221 1
>ctx</VAR
d224 1
a224 1
<VAR
d226 1
a226 1
>pkt</VAR
d235 1
a235 1
<VAR
d237 1
a237 1
>b</VAR
d246 1
a246 1
<VAR
d248 1
a248 1
>*structp</VAR
d250 1
a250 1
<CODE
d252 1
a252 1
>lwres_gnbaresponse_parse()</CODE
d255 1
a255 1
<CODE
d257 1
a257 1
>lwres_gnbarequest_parse()</CODE
d266 1
a266 1
><CODE
d268 1
a268 1
>lwres_gnbaresponse_free()</CODE
d271 1
a271 1
<CODE
d273 1
a273 1
>lwres_gnbarequest_free()</CODE
d276 1
a276 1
<VAR
d278 1
a278 1
>ctx</VAR
d291 1
a291 1
<VAR
d293 1
a293 1
>structp</VAR
d307 1
a307 1
<CODE
d309 1
a309 1
>lwres_gnbarequest_render()</CODE
d311 1
a311 1
<CODE
d313 1
a313 1
>lwres_gnbaresponse_render()</CODE
d315 1
a315 1
<CODE
d317 1
a317 1
>lwres_gnbarequest_parse()</CODE
d320 1
a320 1
<CODE
d322 1
a322 1
>lwres_gnbaresponse_parse()</CODE
d341 1
a341 1
<VAR
d343 1
a343 1
>b</VAR
d356 1
a356 1
<CODE
d358 1
a358 1
>lwres_gnbarequest_parse()</CODE
d361 1
a361 1
<CODE
d363 1
a363 1
>lwres_gnbaresponse_parse()</CODE
d377 1
a377 1
<CODE
d379 3
a381 1
>pktflags</CODE
d408 1
a408 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 109
a125 161
<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.9 2005/10/13 02:33:57 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gnba</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gnbarequest_render, lwres_gnbaresponse_render, lwres_gnbarequest_parse, lwres_gnbaresponse_parse, lwres_gnbaresponse_free, lwres_gnbarequest_free &#8212; lightweight resolver getnamebyaddress message handling</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwres.h&gt;
</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbarequest_render</b>
(</code></td>
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_gnbarequest_t * </td>
<td>
<var class="pdparam">req</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbaresponse_render</b>
(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbarequest_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
lwres_result_t
<b class="fsfunc">lwres_gnbaresponse_parse</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gnbaresponse_free</b>
(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_gnbarequest_free</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2525975"></a><h2>DESCRIPTION</h2>
<p>
These are low-level routines for creating and parsing
d127 8
a134 6
response messages.
</p>
<p>
There are four main functions for the getnamebyaddr opcode.
One render function converts a getnamebyaddr request structure &#8212;
<span class="type">lwres_gnbarequest_t</span> &#8212;
d138 5
a142 2
Another render function converts the getnamebyaddr response structure &#8212;
<span class="type">lwres_gnbaresponse_t</span>
d145 7
a151 5
canonical format to a getnamebyaddr response structure.
</p>
<p>
These structures are defined in
<code class="filename">lwres/lwres.h</code>.
d153 3
a155 3
</p>
<pre class="programlisting">
#define LWRES_OPCODE_GETNAMEBYADDR      0x00010002U
d171 7
a177 6
} lwres_gnbaresponse_t;
</pre>
<p>
</p>
<p>
<code class="function">lwres_gnbarequest_render()</code>
d179 4
a182 1
<code class="varname">ctx</code>
d184 4
a187 1
<code class="varname">req</code>
d190 4
a193 1
<code class="varname">pkt</code>
d196 4
a199 1
<code class="varname">b</code>.
d201 4
a204 1
<code class="varname">*req</code>
d206 4
a209 1
<code class="function">lwres_gnbaresponse_render()</code>
d211 10
a220 5
<span class="type">lwres_gnbaresponse_t</span>
to the lightweight resolver's canonical format.
</p>
<p>
<code class="function">lwres_gnbarequest_parse()</code>
d222 4
a225 1
<code class="varname">ctx</code>
d227 4
a230 1
<code class="varname">pkt</code>
d232 4
a235 1
<span class="type">lwres_gnbarequest_t</span>
d238 4
a241 1
<code class="varname">b</code>
d244 4
a247 1
<span class="type">lwres_gnbarequest_t</span>
d249 8
a256 2
<code class="varname">*structp</code>.
<code class="function">lwres_gnbaresponse_parse()</code>
d258 4
a261 1
<code class="function">lwres_gnbarequest_parse()</code>
d263 10
a272 5
<span class="type">lwres_gnbaresponse_t</span>
structure.
</p>
<p>
<code class="function">lwres_gnbaresponse_free()</code>
d274 4
a277 1
<code class="function">lwres_gnbarequest_free()</code>
d279 4
a282 1
<code class="varname">ctx</code>
d284 4
a287 1
<span class="type">lwres_gnbaresponse_t</span>
d289 4
a292 1
<span class="type">lwres_gnbarequest_t</span>
d294 4
a297 1
<code class="varname">structp</code>.
d299 23
a321 10
structures is also discarded.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526100"></a><h2>RETURN VALUES</h2>
<p>
The getnamebyaddr opcode functions
<code class="function">lwres_gnbarequest_render()</code>,
<code class="function">lwres_gnbaresponse_render()</code>
<code class="function">lwres_gnbarequest_parse()</code>
d323 4
a326 1
<code class="function">lwres_gnbaresponse_parse()</code>
d328 4
a331 1
<span class="errorcode">LWRES_R_SUCCESS</span>
d334 4
a337 1
<span class="errorcode">LWRES_R_NOMEMORY</span>
d339 4
a342 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d344 4
a347 1
<code class="varname">b</code>
d349 4
a352 1
<span class="type">lwres_gnbarequest_t</span>
d354 4
a357 1
<span class="type">lwres_gnbaresponse_t</span>
d359 4
a362 1
<code class="function">lwres_gnbarequest_parse()</code>
d364 4
a367 1
<code class="function">lwres_gnbaresponse_parse()</code>
d369 4
a372 1
<span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
d375 4
a378 1
<span class="errorcode">LWRES_R_FAILURE</span>
d380 4
a383 1
<em class="structfield"><code>pktflags</code></em>
d385 25
a409 12
<span class="type">lwres_lwpacket_t</span>
indicate that the packet is not a response to an earlier query.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526165"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gnba.html,v 1.6.2.1.4.11 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d42 1
a42 1
<td> </td>
d48 1
a48 7
<td> </td>
<td>
<var class="pdparam">ctx</var>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d54 1
a54 1
<td> </td>
d60 1
a60 1
<td> </td>
a86 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a111 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a136 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a152 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a167 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d175 1
a175 1
<a name="id2549540"></a><h2>DESCRIPTION</h2>
d280 1
a280 1
<a name="id2549733"></a><h2>RETURN VALUES</h2>
d318 1
a318 1
<a name="id2549866"></a><h2>SEE ALSO</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gnba.html,v 1.7.18.17 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d42 7
a48 1
<td>lwres_context_t * </td>
d54 1
a54 1
<td>lwres_gnbarequest_t * </td>
d60 1
a60 1
<td>lwres_lwpacket_t * </td>
d66 1
a66 1
<td>lwres_buffer_t * </td>
d77 7
a83 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d87 2
a88 3
<td>lwres_gnbaresponse_t * </td>
<td>
<var class="pdparam">req</var>, </td>
d92 2
a93 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d97 1
a97 1
<td>lwres_buffer_t * </td>
d99 1
a99 1
<var class="pdparam">b</var><code>)</code>;</td>
d107 7
a113 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d117 2
a118 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d122 2
a123 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d127 1
a127 1
<td>lwres_gnbarequest_t ** </td>
d129 1
a129 1
<var class="pdparam">structp</var><code>)</code>;</td>
d137 7
a143 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d147 2
a148 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d152 2
a153 3
<td>lwres_lwpacket_t * </td>
<td>
<var class="pdparam">pkt</var>, </td>
d157 1
a157 1
<td>lwres_gnbaresponse_t ** </td>
d159 1
a159 1
<var class="pdparam">structp</var><code>)</code>;</td>
d168 7
a174 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d178 1
a178 1
<td>lwres_gnbaresponse_t ** </td>
d180 1
a180 1
<var class="pdparam">structp</var><code>)</code>;</td>
d188 7
a194 3
<td>lwres_context_t * </td>
<td>
<var class="pdparam">ctx</var>, </td>
d198 1
a198 1
<td>lwres_gnbarequest_t ** </td>
d200 1
a200 1
<var class="pdparam">structp</var><code>)</code>;</td>
d206 1
a206 1
<a name="id2543525"></a><h2>DESCRIPTION</h2>
d208 4
a211 4
      These are low-level routines for creating and parsing
      lightweight resolver address-to-name lookup request and
      response messages.
    </p>
d213 12
a224 13
      There are four main functions for the getnamebyaddr opcode.
      One render function converts a getnamebyaddr request structure &#8212;
      <span class="type">lwres_gnbarequest_t</span> &#8212;
      to the lightweight resolver's canonical format.
      It is complemented by a parse function that converts a packet in this
      canonical format to a getnamebyaddr request structure.
      Another render function converts the getnamebyaddr response structure
      &#8212;
      <span class="type">lwres_gnbaresponse_t</span>
      to the canonical format.
      This is complemented by a parse function which converts a packet in
      canonical format to a getnamebyaddr response structure.
    </p>
d226 4
a229 4
      These structures are defined in
      <code class="filename">lwres/lwres.h</code>.
      They are shown below.
    </p>
d232 1
a232 4
</pre>
<p>
    </p>
<pre class="programlisting">
d237 1
a237 4
</pre>
<p>
    </p>
<pre class="programlisting">
d250 59
a308 34
    </p>
<p><code class="function">lwres_gnbarequest_render()</code>
      uses resolver context <code class="varname">ctx</code> to convert
      getnamebyaddr request structure <code class="varname">req</code> to
      canonical format.  The packet header structure
      <code class="varname">pkt</code> is initialised and transferred to buffer
      <code class="varname">b</code>.  The contents of <code class="varname">*req</code>
      are then appended to the buffer in canonical format.
      <code class="function">lwres_gnbaresponse_render()</code> performs the
      same task, except it converts a getnamebyaddr response structure
      <span class="type">lwres_gnbaresponse_t</span> to the lightweight resolver's
      canonical format.
    </p>
<p><code class="function">lwres_gnbarequest_parse()</code>
      uses context <code class="varname">ctx</code> to convert the contents of
      packet <code class="varname">pkt</code> to a
      <span class="type">lwres_gnbarequest_t</span> structure.  Buffer
      <code class="varname">b</code> provides space to be used for storing this
      structure.  When the function succeeds, the resulting
      <span class="type">lwres_gnbarequest_t</span> is made available through
      <code class="varname">*structp</code>.
      <code class="function">lwres_gnbaresponse_parse()</code> offers the same
      semantics as <code class="function">lwres_gnbarequest_parse()</code>
      except it yields a <span class="type">lwres_gnbaresponse_t</span> structure.
    </p>
<p><code class="function">lwres_gnbaresponse_free()</code>
      and <code class="function">lwres_gnbarequest_free()</code> release the
      memory in resolver context <code class="varname">ctx</code> that was
      allocated to the <span class="type">lwres_gnbaresponse_t</span> or
      <span class="type">lwres_gnbarequest_t</span> structures referenced via
      <code class="varname">structp</code>.  Any memory associated with
      ancillary buffers and strings for those structures is also
      discarded.
    </p>
d311 1
a311 1
<a name="id2543665"></a><h2>RETURN VALUES</h2>
d313 34
a346 34
      The getnamebyaddr opcode functions
      <code class="function">lwres_gnbarequest_render()</code>,
      <code class="function">lwres_gnbaresponse_render()</code>
      <code class="function">lwres_gnbarequest_parse()</code>
      and
      <code class="function">lwres_gnbaresponse_parse()</code>
      all return
      <span class="errorcode">LWRES_R_SUCCESS</span>
      on success.
      They return
      <span class="errorcode">LWRES_R_NOMEMORY</span>
      if memory allocation fails.
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      is returned if the available space in the buffer
      <code class="varname">b</code>
      is too small to accommodate the packet header or the
      <span class="type">lwres_gnbarequest_t</span>
      and
      <span class="type">lwres_gnbaresponse_t</span>
      structures.
      <code class="function">lwres_gnbarequest_parse()</code>
      and
      <code class="function">lwres_gnbaresponse_parse()</code>
      will return
      <span class="errorcode">LWRES_R_UNEXPECTEDEND</span>
      if the buffer is not empty after decoding the received packet.
      These functions will return
      <span class="errorcode">LWRES_R_FAILURE</span>
      if
      <em class="structfield"><code>pktflags</code></em>
      in the packet header structure
      <span class="type">lwres_lwpacket_t</span>
      indicate that the packet is not a response to an earlier query.
    </p>
d349 4
a352 3
<a name="id2543731"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">lwres_packet</span>(3)</span>.
    </p>
@


