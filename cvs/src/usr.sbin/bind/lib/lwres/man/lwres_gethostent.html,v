head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.42
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.06;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.33;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.26;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.34.00;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_gethostent.html,v 1.9.18.15 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gethostent</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gethostbyname, lwres_gethostbyname2, lwres_gethostbyaddr, lwres_gethostent, lwres_sethostent, lwres_endhostent, lwres_gethostbyname_r, lwres_gethostbyaddr_r, lwres_gethostent_r, lwres_sethostent_r, lwres_endhostent_r &#8212; lightweight resolver get network host entry</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">name</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname2</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">af</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyaddr</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">addr</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">len</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">type</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostent</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_sethostent</b>(</code></td>
<td>int  </td>
<td>
<var class="pdparam">stayopen</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_endhostent</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname_r</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
</tr>
<tr>
<td> </td>
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
</tr>
<tr>
<td> </td>
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">error</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent  *
<b class="fsfunc">lwres_gethostbyaddr_r</b>(</code></td>
<td>const char * </td>
<td>
<var class="pdparam">addr</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">len</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">type</var>, </td>
</tr>
<tr>
<td> </td>
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
</tr>
<tr>
<td> </td>
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">error</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent  *
<b class="fsfunc">lwres_gethostent_r</b>(</code></td>
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
</tr>
<tr>
<td> </td>
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
</tr>
<tr>
<td> </td>
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
</tr>
<tr>
<td> </td>
<td>int * </td>
<td>
<var class="pdparam">error</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_sethostent_r</b>(</code></td>
<td>int  </td>
<td>
<var class="pdparam">stayopen</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_endhostent_r</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543608"></a><h2>DESCRIPTION</h2>
<p>
      These functions provide hostname-to-address and
      address-to-hostname lookups by means of the lightweight resolver.
      They are similar to the standard
      <span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>
      functions provided by most operating systems.
      They use a
      <span class="type">struct hostent</span>
      which is usually defined in
      <code class="filename">&lt;namedb.h&gt;</code>.
    </p>
<pre class="programlisting">
struct  hostent {
        char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
};
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</pre>
<p>
    </p>
<p>
      The members of this structure are:
      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">h_name</code></span></dt>
<dd><p>
              The official (canonical) name of the host.
            </p></dd>
<dt><span class="term"><code class="constant">h_aliases</code></span></dt>
<dd><p>
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </p></dd>
<dt><span class="term"><code class="constant">h_addrtype</code></span></dt>
<dd><p>
              The type of address being returned &#8212;
              <span class="type">PF_INET</span>
              or
              <span class="type">PF_INET6</span>.
            </p></dd>
<dt><span class="term"><code class="constant">h_length</code></span></dt>
<dd><p>
              The length of the address in bytes.
            </p></dd>
<dt><span class="term"><code class="constant">h_addr_list</code></span></dt>
<dd><p>
              A <span class="type">NULL</span>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </p></dd>
</dl></div>
<p>
    </p>
<p>
      For backward compatibility with very old software,
      <code class="constant">h_addr</code>
      is the first address in
      <code class="constant">h_addr_list.</code>
    </p>
<p><code class="function">lwres_gethostent()</code>,
      <code class="function">lwres_sethostent()</code>,
      <code class="function">lwres_endhostent()</code>,
      <code class="function">lwres_gethostent_r()</code>,
      <code class="function">lwres_sethostent_r()</code>
      and
      <code class="function">lwres_endhostent_r()</code>
      provide iteration over the known host entries on systems that
      provide such functionality through facilities like
      <code class="filename">/etc/hosts</code>
      or NIS.  The lightweight resolver does not currently implement
      these functions; it only provides them as stub functions that always
      return failure.
    </p>
<p><code class="function">lwres_gethostbyname()</code>
      and <code class="function">lwres_gethostbyname2()</code> look up the
      hostname <em class="parameter"><code>name</code></em>.
      <code class="function">lwres_gethostbyname()</code> always looks for an
      IPv4 address while <code class="function">lwres_gethostbyname2()</code>
      looks for an address of protocol family
      <em class="parameter"><code>af</code></em>: either <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span> &#8212; IPv4 or IPV6 addresses
      respectively.  Successful calls of the functions return a
      <span class="type">struct hostent</span>for the name that was looked up.
      <span class="type">NULL</span> is returned if the lookups by
      <code class="function">lwres_gethostbyname()</code> or
      <code class="function">lwres_gethostbyname2()</code> fail.
    </p>
<p>
      Reverse lookups of addresses are performed by
      <code class="function">lwres_gethostbyaddr()</code>.
      <em class="parameter"><code>addr</code></em> is an address of length
      <em class="parameter"><code>len</code></em> bytes and protocol family
      <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span>.
      <code class="function">lwres_gethostbyname_r()</code> is a
      thread-safe function
      for forward lookups.  If an error occurs, an error code is returned in
      <em class="parameter"><code>*error</code></em>.
      <em class="parameter"><code>resbuf</code></em> is a pointer to a
      <span class="type">struct hostent</span> which is initialised by a successful call to
      <code class="function">lwres_gethostbyname_r()</code>.
      <em class="parameter"><code>buf</code></em> is a buffer of length
      <em class="parameter"><code>len</code></em> bytes which is used to store the
      <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
      Successful calls to <code class="function">lwres_gethostbyname_r()</code>
      return <em class="parameter"><code>resbuf</code></em>,
      which is a pointer to the <span class="type">struct hostent</span> it created.
    </p>
<p><code class="function">lwres_gethostbyaddr_r()</code>
      is a thread-safe function
      that performs a reverse lookup of address <em class="parameter"><code>addr</code></em>
      which is <em class="parameter"><code>len</code></em> bytes long and is of
      protocol
      family <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span>.  If an error occurs, the error code is returned
      in <em class="parameter"><code>*error</code></em>.  The other function
      parameters are
      identical to those in <code class="function">lwres_gethostbyname_r()</code>.
      <em class="parameter"><code>resbuf</code></em> is a pointer to a
      <span class="type">struct hostent</span> which is initialised by a successful call to
      <code class="function">lwres_gethostbyaddr_r()</code>.
      <em class="parameter"><code>buf</code></em> is a buffer of length
      <em class="parameter"><code>len</code></em> bytes which is used to store the
      <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
      Successful calls to <code class="function">lwres_gethostbyaddr_r()</code> return
      <em class="parameter"><code>resbuf</code></em>, which is a pointer to the
      <code class="function">struct hostent()</code> it created.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2543959"></a><h2>RETURN VALUES</h2>
<p>
      The functions
      <code class="function">lwres_gethostbyname()</code>,
      <code class="function">lwres_gethostbyname2()</code>,
      <code class="function">lwres_gethostbyaddr()</code>,
      and
      <code class="function">lwres_gethostent()</code>
      return NULL to indicate an error.  In this case the global variable
      <span class="type">lwres_h_errno</span>
      will contain one of the following error codes defined in
      <code class="filename">&lt;lwres/netdb.h&gt;</code>:

      </p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">HOST_NOT_FOUND</code></span></dt>
<dd><p>
              The host or address was not found.
            </p></dd>
<dt><span class="term"><code class="constant">TRY_AGAIN</code></span></dt>
<dd><p>
              A recoverable error occurred, e.g., a timeout.
              Retrying the lookup may succeed.
            </p></dd>
<dt><span class="term"><code class="constant">NO_RECOVERY</code></span></dt>
<dd><p>
              A non-recoverable error occurred.
            </p></dd>
<dt><span class="term"><code class="constant">NO_DATA</code></span></dt>
<dd><p>
              The name exists, but has no address information
              associated with it (or vice versa in the case
              of a reverse lookup).  The code NO_ADDRESS
              is accepted as a synonym for NO_DATA for backwards
              compatibility.
            </p></dd>
</dl></div>
<p>
    </p>
<p><span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
      translates these error codes to suitable error messages.
    </p>
<p><code class="function">lwres_gethostent()</code>
      and <code class="function">lwres_gethostent_r()</code>
      always return <span class="type">NULL</span>.
    </p>
<p>
      Successful calls to <code class="function">lwres_gethostbyname_r()</code> and
      <code class="function">lwres_gethostbyaddr_r()</code> return
      <em class="parameter"><code>resbuf</code></em>, a pointer to the
      <span class="type">struct hostent</span> that was initialised by these functions.  They return
      <span class="type">NULL</span> if the lookups fail or if <em class="parameter"><code>buf</code></em>
      was too small to hold the list of addresses and names referenced by
      the <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span>.
      If <em class="parameter"><code>buf</code></em> was too small, both
      <code class="function">lwres_gethostbyname_r()</code> and
      <code class="function">lwres_gethostbyaddr_r()</code> set the global
      variable
      <span class="type">errno</span> to <span class="errorcode">ERANGE</span>.
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2544193"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_getipnode</span>(3)</span>,

      <span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
    </p>
</div>
<div class="refsect1" lang="en">
<a name="id2544227"></a><h2>BUGS</h2>
<p><code class="function">lwres_gethostbyname()</code>,
      <code class="function">lwres_gethostbyname2()</code>,
      <code class="function">lwres_gethostbyaddr()</code>
      and
      <code class="function">lwres_endhostent()</code>
      are not thread safe; they return pointers to static data and
      provide error codes through a global variable.
      Thread-safe versions for name and address lookup are provided by
      <code class="function">lwres_gethostbyname_r()</code>,
      and
      <code class="function">lwres_gethostbyaddr_r()</code>
      respectively.
    </p>
<p>
      The resolver daemon does not currently support any non-DNS
      name services such as
      <code class="filename">/etc/hosts</code>
      or
      <span class="type">NIS</span>,
      consequently the above functions don't, either.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.10 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d34 1
a34 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d38 1
a38 1
<td> </td>
d40 2
a41 9
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d47 3
a49 2
<td> </td>
<td>, </td>
d53 1
a53 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d55 1
a55 1
<code>)</code>;</td>
d63 3
a65 2
<td> </td>
<td>, </td>
d69 3
a71 2
<td> </td>
<td>, </td>
d75 3
a77 2
<td> </td>
<td>, </td>
d79 5
a83 2
<tr>
<td> </td>
d87 3
a89 6
</tr>
</table>
<p><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostent</b>(</code>void<code>)</code>;</p>
<p><code class="funcdef">
d91 7
a97 2
<b class="fsfunc">lwres_sethostent</b>(</code>int stayopen<code>)</code>;</p>
<p><code class="funcdef">
d99 5
a103 1
<b class="fsfunc">lwres_endhostent</b>(</code>void<code>)</code>;</p>
d109 3
a111 2
<td> </td>
<td>, </td>
d115 3
a117 2
<td> </td>
<td>, </td>
d121 3
a123 2
<td> </td>
<td>, </td>
d127 3
a129 2
<td> </td>
<td>, </td>
d133 1
a133 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d135 1
a135 1
<code>)</code>;</td>
d143 3
a145 2
<td> </td>
<td>, </td>
d149 3
a151 2
<td> </td>
<td>, </td>
d155 3
a157 2
<td> </td>
<td>, </td>
d161 3
a163 2
<td> </td>
<td>, </td>
d167 3
a169 2
<td> </td>
<td>, </td>
d173 3
a175 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d179 1
a179 1
<td> </td>
d181 1
a181 1
<code>)</code>;</td>
d189 3
a191 2
<td> </td>
<td>, </td>
d195 3
a197 2
<td> </td>
<td>, </td>
d201 3
a203 2
<td> </td>
<td>, </td>
d207 1
a207 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d209 1
a209 1
<code>)</code>;</td>
d212 2
a213 1
<p><code class="funcdef">
d215 7
a221 2
<b class="fsfunc">lwres_sethostent_r</b>(</code>int stayopen<code>)</code>;</p>
<p><code class="funcdef">
d223 5
a227 1
<b class="fsfunc">lwres_endhostent_r</b>(</code>void<code>)</code>;</p>
d231 1
a231 1
<a name="id2549606"></a><h2>DESCRIPTION</h2>
d233 10
a242 12
These functions provide hostname-to-address and
address-to-hostname lookups by means of the lightweight resolver.
They are similar to the standard
<span class="citerefentry"><span class="refentrytitle">gethostent</span>(3
)</span>
functions provided by most operating systems.
They use a
<span class="type">struct hostent</span>
which is usually defined in
<code class="filename">&lt;namedb.h&gt;</code>.

</p>
d254 1
a254 1
</p>
d256 2
a257 2
The members of this structure are:
</p>
d261 2
a262 2
The official (canonical) name of the host.
</p></dd>
d265 3
a267 2
A NULL-terminated array of alternate names (nicknames) for the host.
</p></dd>
d270 5
a274 5
The type of address being returned &#8212;
<span class="type">PF_INET</span>
or
<span class="type">PF_INET6</span>.
</p></dd>
d277 2
a278 2
The length of the address in bytes.
</p></dd>
d281 4
a284 4
A <span class="type">NULL</span>
terminated array of network addresses for the host.
Host addresses are returned in network byte order.
</p></dd>
d287 1
a287 58
</p>
<p>
For backward compatibility with very old software,
<code class="constant">h_addr</code>
is the first address in
<code class="constant">h_addr_list.</code>
</p>
<p>
<code class="function">lwres_gethostent()</code>,
<code class="function">lwres_sethostent()</code>,
<code class="function">lwres_endhostent()</code>,
<code class="function">lwres_gethostent_r()</code>,
<code class="function">lwres_sethostent_r()</code>
and
<code class="function">lwres_endhostent_r()</code>
provide iteration over the known host entries on systems that
provide such functionality through facilities like
<code class="filename">/etc/hosts</code>
or NIS.  The lightweight resolver does not currently implement
these functions; it only provides them as stub functions that always
return failure.
</p>
<p>
<code class="function">lwres_gethostbyname()</code> and
<code class="function">lwres_gethostbyname2()</code> look up the hostname
<em class="parameter"><code>name</code></em>.
<code class="function">lwres_gethostbyname()</code> always looks for an IPv4
address while <code class="function">lwres_gethostbyname2()</code> looks for an
address of protocol family <em class="parameter"><code>af</code></em>: either
<span class="type">PF_INET</span> or <span class="type">PF_INET6</span> &#8212; IPv4 or IPV6
addresses respectively.  Successful calls of the functions return a
<span class="type">struct hostent</span>for the name that was looked up.
<span class="type">NULL</span> is returned if the lookups by
<code class="function">lwres_gethostbyname()</code> or
<code class="function">lwres_gethostbyname2()</code> fail.
</p>
<p>
Reverse lookups of addresses are performed by
<code class="function">lwres_gethostbyaddr()</code>.
<em class="parameter"><code>addr</code></em> is an address of length
<em class="parameter"><code>len</code></em> bytes and protocol family
<em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
<span class="type">PF_INET6</span>.
<code class="function">lwres_gethostbyname_r()</code> is a thread-safe function
for forward lookups.  If an error occurs, an error code is returned in
<em class="parameter"><code>*error</code></em>.
<em class="parameter"><code>resbuf</code></em> is a pointer to a <span class="type">struct
hostent</span> which is initialised by a successful call to
<code class="function">lwres_gethostbyname_r()</code> .
<em class="parameter"><code>buf</code></em> is a buffer of length
<em class="parameter"><code>len</code></em> bytes which is used to store the
<code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
Successful calls to <code class="function">lwres_gethostbyname_r()</code>
return <em class="parameter"><code>resbuf</code></em>,
which is a pointer to the <span class="type">struct hostent</span> it created.
</p>
d289 78
a366 19
<code class="function">lwres_gethostbyaddr_r()</code> is a thread-safe function
that performs a reverse lookup of address <em class="parameter"><code>addr</code></em>
which is <em class="parameter"><code>len</code></em> bytes long and is of protocol
family <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
<span class="type">PF_INET6</span>.  If an error occurs, the error code is returned
in <em class="parameter"><code>*error</code></em>.  The other function parameters are
identical to those in <code class="function">lwres_gethostbyname_r()</code>.
<em class="parameter"><code>resbuf</code></em> is a pointer to a <span class="type">struct
hostent</span> which is initialised by a successful call to
<code class="function">lwres_gethostbyaddr_r()</code>.
<em class="parameter"><code>buf</code></em> is a buffer of length
<em class="parameter"><code>len</code></em> bytes which is used to store the
<code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.  Successful
calls to <code class="function">lwres_gethostbyaddr_r()</code> return
<em class="parameter"><code>resbuf</code></em>, which is a pointer to the
<code class="function">struct hostent()</code> it created.
</p>
d369 1
a369 1
<a name="id2550013"></a><h2>RETURN VALUES</h2>
d371 10
a380 10
The functions
<code class="function">lwres_gethostbyname()</code>,
<code class="function">lwres_gethostbyname2()</code>,
<code class="function">lwres_gethostbyaddr()</code>,
and
<code class="function">lwres_gethostent()</code>
return NULL to indicate an error.  In this case the global variable
<span class="type">lwres_h_errno</span>
will contain one of the following error codes defined in
<code class="filename">&lt;lwres/netdb.h&gt;</code>:
d382 1
a382 1
</p>
d386 2
a387 2
The host or address was not found.
</p></dd>
d390 3
a392 3
A recoverable error occurred, e.g., a timeout.
Retrying the lookup may succeed.
</p></dd>
d395 2
a396 2
A non-recoverable error occurred.
</p></dd>
d399 6
a404 6
The name exists, but has no address information
associated with it (or vice versa in the case
of a reverse lookup).  The code NO_ADDRESS
is accepted as a synonym for NO_DATA for backwards
compatibility.
</p></dd>
d407 24
a430 27
</p>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
translates these error codes to suitable error messages.
</p>
<p>
<code class="function">lwres_gethostent()</code>
and
<code class="function">lwres_gethostent_r()</code>
always return
<span class="type">NULL</span>.
</p>
<p>
Successful calls to <code class="function">lwres_gethostbyname_r()</code> and
<code class="function">lwres_gethostbyaddr_r()</code> return
<em class="parameter"><code>resbuf</code></em>, a pointer to the <span class="type">struct
hostent</span> that was initialised by these functions.  They return
<span class="type">NULL</span> if the lookups fail or if <em class="parameter"><code>buf</code></em>
was too small to hold the list of addresses and names referenced by
the <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span>.  If <em class="parameter"><code>buf</code></em> was too small, both
<code class="function">lwres_gethostbyname_r()</code> and
<code class="function">lwres_gethostbyaddr_r()</code> set the global variable
<span class="type">errno</span> to <span class="errorcode">ERANGE</span>.
</p>
d433 2
a434 3
<a name="id2550173"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>,
d436 1
a436 1
<span class="citerefentry"><span class="refentrytitle">lwres_getipnode</span>(3)</span>,
d438 2
a439 3
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
</p>
d442 22
a463 23
<a name="id2550209"></a><h2>BUGS</h2>
<p>
<code class="function">lwres_gethostbyname()</code>,
<code class="function">lwres_gethostbyname2()</code>,
<code class="function">lwres_gethostbyaddr()</code>
and
<code class="function">lwres_endhostent()</code>
are not thread safe; they return pointers to static data and 
provide error codes through a global variable.
Thread-safe versions for name and address lookup are provided by
<code class="function">lwres_gethostbyname_r()</code>,
and
<code class="function">lwres_gethostbyaddr_r()</code>
respectively.
</p>
<p>
The resolver daemon does not currently support any non-DNS
name services such as 
<code class="filename">/etc/hosts</code>
or
<span class="type">NIS</span>,
consequently the above functions don't, either.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.8 2005/10/13 02:33:56 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d34 2
a35 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d42 8
a49 1
</tr></table>
d61 5
d86 5
d130 5
d175 5
d205 5
d223 1
a223 1
<a name="id2526041"></a><h2>DESCRIPTION</h2>
d360 1
a360 1
<a name="id2526380"></a><h2>RETURN VALUES</h2>
d427 1
a427 1
<a name="id2526540"></a><h2>SEE ALSO</h2>
d438 1
a438 1
<a name="id2526644"></a><h2>BUGS</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 176
a192 149

<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_gethostent</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_gethostent</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_gethostbyname, lwres_gethostbyname2, lwres_gethostbyaddr, lwres_gethostent, lwres_sethostent, lwres_endhostent, lwres_gethostbyname_r, lwres_gethostbyaddr_r, lwres_gethostent_r, lwres_sethostent_r, lwres_endhostent_r&nbsp;--&nbsp;lightweight resolver get network host entry</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN21"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN22"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/netdb.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_gethostbyname</CODE
>(const char *name);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_gethostbyname2</CODE
>(const char *name, int af);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_gethostbyaddr</CODE
>(const char *addr, int len, int type);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_gethostent</CODE
>(void);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_sethostent</CODE
>(int stayopen);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_endhostent</CODE
>(void);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent *
lwres_gethostbyname_r</CODE
>(const char *name, struct hostent *resbuf, char *buf, int buflen, int *error);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent  *
lwres_gethostbyaddr_r</CODE
>(const char *addr, int len, int type, struct hostent *resbuf, char *buf, int buflen, int *error);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>struct hostent  *
lwres_gethostent_r</CODE
>(struct hostent *resbuf, char *buf, int buflen, int *error);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_sethostent_r</CODE
>(int stayopen);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_endhostent_r</CODE
>(void);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN84"
></A
><H2
>DESCRIPTION</H2
><P
>These functions provide hostname-to-address and
d195 2
a196 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>gethostent</SPAN
>(3)</SPAN
>
d199 1
a199 4
<SPAN
CLASS="TYPE"
>struct hostent</SPAN
>
d201 1
a201 4
<TT
CLASS="FILENAME"
>&lt;namedb.h&gt;</TT
>.
d203 3
a205 3
<PRE
CLASS="PROGRAMLISTING"
>struct  hostent {
d212 20
a231 39
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */</PRE
></P
><P
>The members of this structure are:
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>h_name</CODE
></DT
><DD
><P
>The official (canonical) name of the host.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_aliases</CODE
></DT
><DD
><P
>A NULL-terminated array of alternate names (nicknames) for the host.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_addrtype</CODE
></DT
><DD
><P
>The type of address being returned &mdash;
<SPAN
CLASS="TYPE"
>PF_INET</SPAN
>
d233 9
a241 25
<SPAN
CLASS="TYPE"
>PF_INET6</SPAN
>.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_length</CODE
></DT
><DD
><P
>The length of the address in bytes.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>h_addr_list</CODE
></DT
><DD
><P
>A <SPAN
CLASS="TYPE"
>NULL</SPAN
>
d243 8
a250 11
Host addresses are returned in network byte order.</P
></DD
></DL
></DIV
></P
><P
>For backward compatibility with very old software,
<CODE
CLASS="CONSTANT"
>h_addr</CODE
>
d252 8
a259 25
<CODE
CLASS="CONSTANT"
>h_addr_list.</CODE
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_gethostent()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_sethostent()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_endhostent()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gethostent_r()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_sethostent_r()</CODE
>
d261 1
a261 4
<CODE
CLASS="FUNCTION"
>lwres_endhostent_r()</CODE
>
d264 1
a264 4
<TT
CLASS="FILENAME"
>/etc/hosts</TT
>
d267 10
a276 33
return failure.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gethostbyname()</CODE
> and
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname2()</CODE
> look up the hostname
<VAR
CLASS="PARAMETER"
>name</VAR
>.
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname()</CODE
> always looks for an IPv4
address while <CODE
CLASS="FUNCTION"
>lwres_gethostbyname2()</CODE
> looks for an
address of protocol family <VAR
CLASS="PARAMETER"
>af</VAR
>: either
<SPAN
CLASS="TYPE"
>PF_INET</SPAN
> or <SPAN
CLASS="TYPE"
>PF_INET6</SPAN
> &mdash; IPv4 or IPV6
d278 13
a290 45
<SPAN
CLASS="TYPE"
>struct hostent</SPAN
>for the name that was looked up.
<SPAN
CLASS="TYPE"
>NULL</SPAN
> is returned if the lookups by
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname()</CODE
> or
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname2()</CODE
> fail.</P
><P
>Reverse lookups of addresses are performed by
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr()</CODE
>.
<VAR
CLASS="PARAMETER"
>addr</VAR
> is an address of length
<VAR
CLASS="PARAMETER"
>len</VAR
> bytes and protocol family
<VAR
CLASS="PARAMETER"
>type</VAR
> &mdash; <SPAN
CLASS="TYPE"
>PF_INET</SPAN
> or
<SPAN
CLASS="TYPE"
>PF_INET6</SPAN
>.
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
> is a thread-safe function
d292 41
a332 158
<VAR
CLASS="PARAMETER"
>*error</VAR
>.
<VAR
CLASS="PARAMETER"
>resbuf</VAR
> is a pointer to a <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
> which is initialised by a successful call to
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
> .
<VAR
CLASS="PARAMETER"
>buf</VAR
> is a buffer of length
<VAR
CLASS="PARAMETER"
>len</VAR
> bytes which is used to store the
<CODE
CLASS="CONSTANT"
>h_name</CODE
>, <CODE
CLASS="CONSTANT"
>h_aliases</CODE
>, and
<CODE
CLASS="CONSTANT"
>h_addr_list</CODE
> elements of the <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
> returned in <VAR
CLASS="PARAMETER"
>resbuf</VAR
>.
Successful calls to <CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
>
return <VAR
CLASS="PARAMETER"
>resbuf</VAR
>,
which is a pointer to the <SPAN
CLASS="TYPE"
>struct hostent</SPAN
> it created.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
> is a thread-safe function
that performs a reverse lookup of address <VAR
CLASS="PARAMETER"
>addr</VAR
>
which is <VAR
CLASS="PARAMETER"
>len</VAR
> bytes long and is of protocol
family <VAR
CLASS="PARAMETER"
>type</VAR
> &mdash; <SPAN
CLASS="TYPE"
>PF_INET</SPAN
> or
<SPAN
CLASS="TYPE"
>PF_INET6</SPAN
>.  If an error occurs, the error code is returned
in <VAR
CLASS="PARAMETER"
>*error</VAR
>.  The other function parameters are
identical to those in <CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
>.
<VAR
CLASS="PARAMETER"
>resbuf</VAR
> is a pointer to a <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
> which is initialised by a successful call to
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
>.
<VAR
CLASS="PARAMETER"
>buf</VAR
> is a buffer of length
<VAR
CLASS="PARAMETER"
>len</VAR
> bytes which is used to store the
<CODE
CLASS="CONSTANT"
>h_name</CODE
>, <CODE
CLASS="CONSTANT"
>h_aliases</CODE
>, and
<CODE
CLASS="CONSTANT"
>h_addr_list</CODE
> elements of the <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
> returned in <VAR
CLASS="PARAMETER"
>resbuf</VAR
>.  Successful
calls to <CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
> return
<VAR
CLASS="PARAMETER"
>resbuf</VAR
>, which is a pointer to the
<CODE
CLASS="FUNCTION"
>struct hostent()</CODE
> it created.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN191"
></A
><H2
>RETURN VALUES</H2
><P
>The functions
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname2()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr()</CODE
>,
d334 1
a334 4
<CODE
CLASS="FUNCTION"
>lwres_gethostent()</CODE
>
d336 1
a336 4
<SPAN
CLASS="TYPE"
>lwres_h_errno</SPAN
>
d338 1
a338 4
<TT
CLASS="FILENAME"
>&lt;lwres/netdb.h&gt;</TT
>:
d340 18
a357 41
<P
></P
><DIV
CLASS="VARIABLELIST"
><DL
><DT
><CODE
CLASS="CONSTANT"
>HOST_NOT_FOUND</CODE
></DT
><DD
><P
>The host or address was not found.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>TRY_AGAIN</CODE
></DT
><DD
><P
>A recoverable error occurred, e.g., a timeout.
Retrying the lookup may succeed.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>NO_RECOVERY</CODE
></DT
><DD
><P
>A non-recoverable error occurred.</P
></DD
><DT
><CODE
CLASS="CONSTANT"
>NO_DATA</CODE
></DT
><DD
><P
>The name exists, but has no address information
d361 12
a372 19
compatibility.</P
></DD
></DL
></DIV
></P
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_hstrerror</SPAN
>(3)</SPAN
>
translates these error codes to suitable error messages.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_gethostent()</CODE
>
d374 1
a374 4
<CODE
CLASS="FUNCTION"
>lwres_gethostent_r()</CODE
>
d376 8
a383 28
<SPAN
CLASS="TYPE"
>NULL</SPAN
>.</P
><P
>Successful calls to <CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
> and
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
> return
<VAR
CLASS="PARAMETER"
>resbuf</VAR
>, a pointer to the <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
> that was initialised by these functions.  They return
<SPAN
CLASS="TYPE"
>NULL</SPAN
> if the lookups fail or if <VAR
CLASS="PARAMETER"
>buf</VAR
>
d385 12
a396 49
the <CODE
CLASS="CONSTANT"
>h_name</CODE
>, <CODE
CLASS="CONSTANT"
>h_aliases</CODE
>, and
<CODE
CLASS="CONSTANT"
>h_addr_list</CODE
> elements of the <SPAN
CLASS="TYPE"
>struct
hostent</SPAN
>.  If <VAR
CLASS="PARAMETER"
>buf</VAR
> was too small, both
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
> and
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
> set the global variable
<SPAN
CLASS="TYPE"
>errno</SPAN
> to <SPAN
CLASS="ERRORCODE"
>ERANGE</SPAN
>.</P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN245"
></A
><H2
>SEE ALSO</H2
><P
><SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>gethostent</SPAN
>(3)</SPAN
>,
d398 1
a398 7
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_getipnode</SPAN
>(3)</SPAN
>,
d400 10
a409 28
<SPAN
CLASS="CITEREFENTRY"
><SPAN
CLASS="REFENTRYTITLE"
>lwres_hstrerror</SPAN
>(3)</SPAN
></P
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN257"
></A
><H2
>BUGS</H2
><P
><CODE
CLASS="FUNCTION"
>lwres_gethostbyname()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname2()</CODE
>,
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr()</CODE
>
d411 1
a411 4
<CODE
CLASS="FUNCTION"
>lwres_endhostent()</CODE
>
d415 1
a415 4
<CODE
CLASS="FUNCTION"
>lwres_gethostbyname_r()</CODE
>,
d417 5
a421 7
<CODE
CLASS="FUNCTION"
>lwres_gethostbyaddr_r()</CODE
>
respectively.</P
><P
>The resolver daemon does not currently support any non-DNS
d423 1
a423 4
<TT
CLASS="FILENAME"
>/etc/hosts</TT
>
d425 6
a430 9
<SPAN
CLASS="TYPE"
>NIS</SPAN
>,
consequently the above functions don't, either.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_gethostent</A
></H1
d57 2
a61 2
><P
></P
d206 1
a206 1
><TT
d208 1
a208 1
>h_name</TT
d215 1
a215 1
><TT
d217 1
a217 1
>h_aliases</TT
d224 1
a224 1
><TT
d226 1
a226 1
>h_addrtype</TT
d242 1
a242 1
><TT
d244 1
a244 1
>h_length</TT
d251 1
a251 1
><TT
d253 1
a253 1
>h_addr_list</TT
d269 1
a269 1
<TT
d271 1
a271 1
>h_addr</TT
d274 1
a274 1
<TT
d276 1
a276 1
>h_addr_list.</TT
d279 1
a279 1
><TT
d281 1
a281 1
>lwres_gethostent()</TT
d283 1
a283 1
<TT
d285 1
a285 1
>lwres_sethostent()</TT
d287 1
a287 1
<TT
d289 1
a289 1
>lwres_endhostent()</TT
d291 1
a291 1
<TT
d293 1
a293 1
>lwres_gethostent_r()</TT
d295 1
a295 1
<TT
d297 1
a297 1
>lwres_sethostent_r()</TT
d300 1
a300 1
<TT
d302 1
a302 1
>lwres_endhostent_r()</TT
d314 1
a314 1
><TT
d316 1
a316 1
>lwres_gethostbyname()</TT
d318 1
a318 1
<TT
d320 1
a320 1
>lwres_gethostbyname2()</TT
d322 1
a322 1
<TT
d324 1
a324 3
><I
>name</I
></TT
d326 1
a326 1
<TT
d328 1
a328 1
>lwres_gethostbyname()</TT
d330 1
a330 1
address while <TT
d332 1
a332 1
>lwres_gethostbyname2()</TT
d334 1
a334 1
address of protocol family <TT
d336 1
a336 3
><I
>af</I
></TT
d354 1
a354 1
<TT
d356 1
a356 1
>lwres_gethostbyname()</TT
d358 1
a358 1
<TT
d360 1
a360 1
>lwres_gethostbyname2()</TT
d364 1
a364 1
<TT
d366 1
a366 1
>lwres_gethostbyaddr()</TT
d368 1
a368 1
<TT
d370 1
a370 3
><I
>addr</I
></TT
d372 1
a372 1
<TT
d374 1
a374 3
><I
>len</I
></TT
d376 1
a376 1
<TT
d378 1
a378 3
><I
>type</I
></TT
d387 1
a387 1
<TT
d389 1
a389 1
>lwres_gethostbyname_r()</TT
d392 1
a392 1
<TT
d394 1
a394 3
><I
>*error</I
></TT
d396 1
a396 1
<TT
d398 1
a398 3
><I
>resbuf</I
></TT
d404 1
a404 1
<TT
d406 1
a406 1
>lwres_gethostbyname_r()</TT
d408 1
a408 1
<TT
d410 1
a410 3
><I
>buf</I
></TT
d412 1
a412 1
<TT
d414 1
a414 3
><I
>len</I
></TT
d416 1
a416 1
<TT
d418 2
a419 2
>h_name</TT
>, <TT
d421 1
a421 1
>h_aliases</TT
d423 1
a423 1
<TT
d425 1
a425 1
>h_addr_list</TT
d430 1
a430 1
> returned in <TT
d432 1
a432 3
><I
>resbuf</I
></TT
d434 1
a434 1
Successful calls to <TT
d436 1
a436 1
>lwres_gethostbyname_r()</TT
d438 1
a438 1
return <TT
d440 1
a440 3
><I
>resbuf</I
></TT
d447 1
a447 1
><TT
d449 1
a449 1
>lwres_gethostbyaddr_r()</TT
d451 1
a451 1
that performs a reverse lookup of address <TT
d453 1
a453 3
><I
>addr</I
></TT
d455 1
a455 1
which is <TT
d457 1
a457 3
><I
>len</I
></TT
d459 1
a459 1
family <TT
d461 1
a461 3
><I
>type</I
></TT
d470 1
a470 1
in <TT
d472 1
a472 3
><I
>*error</I
></TT
d474 1
a474 1
identical to those in <TT
d476 1
a476 1
>lwres_gethostbyname_r()</TT
d478 1
a478 1
<TT
d480 1
a480 3
><I
>resbuf</I
></TT
d486 1
a486 1
<TT
d488 1
a488 1
>lwres_gethostbyaddr_r()</TT
d490 1
a490 1
<TT
d492 1
a492 3
><I
>buf</I
></TT
d494 1
a494 1
<TT
d496 1
a496 3
><I
>len</I
></TT
d498 1
a498 1
<TT
d500 2
a501 2
>h_name</TT
>, <TT
d503 1
a503 1
>h_aliases</TT
d505 1
a505 1
<TT
d507 1
a507 1
>h_addr_list</TT
d512 1
a512 1
> returned in <TT
d514 1
a514 3
><I
>resbuf</I
></TT
d516 1
a516 1
calls to <TT
d518 1
a518 1
>lwres_gethostbyaddr_r()</TT
d520 1
a520 1
<TT
d522 1
a522 3
><I
>resbuf</I
></TT
d524 1
a524 1
<TT
d526 1
a526 1
>struct hostent()</TT
d538 1
a538 1
<TT
d540 1
a540 1
>lwres_gethostbyname()</TT
d542 1
a542 1
<TT
d544 1
a544 1
>lwres_gethostbyname2()</TT
d546 1
a546 1
<TT
d548 1
a548 1
>lwres_gethostbyaddr()</TT
d551 1
a551 1
<TT
d553 1
a553 1
>lwres_gethostent()</TT
d572 1
a572 1
><TT
d574 1
a574 1
>HOST_NOT_FOUND</TT
d581 1
a581 1
><TT
d583 1
a583 1
>TRY_AGAIN</TT
d591 1
a591 1
><TT
d593 1
a593 1
>NO_RECOVERY</TT
d600 1
a600 1
><TT
d602 1
a602 1
>NO_DATA</TT
d625 1
a625 1
><TT
d627 1
a627 1
>lwres_gethostent()</TT
d630 1
a630 1
<TT
d632 1
a632 1
>lwres_gethostent_r()</TT
d640 1
a640 1
>Successful calls to <TT
d642 1
a642 1
>lwres_gethostbyname_r()</TT
d644 1
a644 1
<TT
d646 1
a646 1
>lwres_gethostbyaddr_r()</TT
d648 1
a648 1
<TT
d650 1
a650 3
><I
>resbuf</I
></TT
d659 1
a659 1
> if the lookups fail or if <TT
d661 1
a661 3
><I
>buf</I
></TT
d664 1
a664 1
the <TT
d666 2
a667 2
>h_name</TT
>, <TT
d669 1
a669 1
>h_aliases</TT
d671 1
a671 1
<TT
d673 1
a673 1
>h_addr_list</TT
d678 1
a678 1
>.  If <TT
d680 1
a680 3
><I
>buf</I
></TT
d682 1
a682 1
<TT
d684 1
a684 1
>lwres_gethostbyname_r()</TT
d686 1
a686 1
<TT
d688 1
a688 1
>lwres_gethostbyaddr_r()</TT
d738 1
a738 1
><TT
d740 1
a740 1
>lwres_gethostbyname()</TT
d742 1
a742 1
<TT
d744 1
a744 1
>lwres_gethostbyname2()</TT
d746 1
a746 1
<TT
d748 1
a748 1
>lwres_gethostbyaddr()</TT
d751 1
a751 1
<TT
d753 1
a753 1
>lwres_endhostent()</TT
d758 1
a758 1
<TT
d760 1
a760 1
>lwres_gethostbyname_r()</TT
d763 1
a763 1
<TT
d765 1
a765 1
>lwres_gethostbyaddr_r()</TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d827 1
a827 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.2 2004/08/22 23:39:04 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_gethostent</H1
a53 2
><P
></P
d57 2
d203 1
a203 1
><CODE
d205 1
a205 1
>h_name</CODE
d212 1
a212 1
><CODE
d214 1
a214 1
>h_aliases</CODE
d221 1
a221 1
><CODE
d223 1
a223 1
>h_addrtype</CODE
d239 1
a239 1
><CODE
d241 1
a241 1
>h_length</CODE
d248 1
a248 1
><CODE
d250 1
a250 1
>h_addr_list</CODE
d266 1
a266 1
<CODE
d268 1
a268 1
>h_addr</CODE
d271 1
a271 1
<CODE
d273 1
a273 1
>h_addr_list.</CODE
d276 1
a276 1
><CODE
d278 1
a278 1
>lwres_gethostent()</CODE
d280 1
a280 1
<CODE
d282 1
a282 1
>lwres_sethostent()</CODE
d284 1
a284 1
<CODE
d286 1
a286 1
>lwres_endhostent()</CODE
d288 1
a288 1
<CODE
d290 1
a290 1
>lwres_gethostent_r()</CODE
d292 1
a292 1
<CODE
d294 1
a294 1
>lwres_sethostent_r()</CODE
d297 1
a297 1
<CODE
d299 1
a299 1
>lwres_endhostent_r()</CODE
d311 1
a311 1
><CODE
d313 1
a313 1
>lwres_gethostbyname()</CODE
d315 1
a315 1
<CODE
d317 1
a317 1
>lwres_gethostbyname2()</CODE
d319 1
a319 1
<VAR
d321 3
a323 1
>name</VAR
d325 1
a325 1
<CODE
d327 1
a327 1
>lwres_gethostbyname()</CODE
d329 1
a329 1
address while <CODE
d331 1
a331 1
>lwres_gethostbyname2()</CODE
d333 1
a333 1
address of protocol family <VAR
d335 3
a337 1
>af</VAR
d355 1
a355 1
<CODE
d357 1
a357 1
>lwres_gethostbyname()</CODE
d359 1
a359 1
<CODE
d361 1
a361 1
>lwres_gethostbyname2()</CODE
d365 1
a365 1
<CODE
d367 1
a367 1
>lwres_gethostbyaddr()</CODE
d369 1
a369 1
<VAR
d371 3
a373 1
>addr</VAR
d375 1
a375 1
<VAR
d377 3
a379 1
>len</VAR
d381 1
a381 1
<VAR
d383 3
a385 1
>type</VAR
d394 1
a394 1
<CODE
d396 1
a396 1
>lwres_gethostbyname_r()</CODE
d399 1
a399 1
<VAR
d401 3
a403 1
>*error</VAR
d405 1
a405 1
<VAR
d407 3
a409 1
>resbuf</VAR
d415 1
a415 1
<CODE
d417 1
a417 1
>lwres_gethostbyname_r()</CODE
d419 1
a419 1
<VAR
d421 3
a423 1
>buf</VAR
d425 1
a425 1
<VAR
d427 3
a429 1
>len</VAR
d431 1
a431 1
<CODE
d433 2
a434 2
>h_name</CODE
>, <CODE
d436 1
a436 1
>h_aliases</CODE
d438 1
a438 1
<CODE
d440 1
a440 1
>h_addr_list</CODE
d445 1
a445 1
> returned in <VAR
d447 3
a449 1
>resbuf</VAR
d451 1
a451 1
Successful calls to <CODE
d453 1
a453 1
>lwres_gethostbyname_r()</CODE
d455 1
a455 1
return <VAR
d457 3
a459 1
>resbuf</VAR
d466 1
a466 1
><CODE
d468 1
a468 1
>lwres_gethostbyaddr_r()</CODE
d470 1
a470 1
that performs a reverse lookup of address <VAR
d472 3
a474 1
>addr</VAR
d476 1
a476 1
which is <VAR
d478 3
a480 1
>len</VAR
d482 1
a482 1
family <VAR
d484 3
a486 1
>type</VAR
d495 1
a495 1
in <VAR
d497 3
a499 1
>*error</VAR
d501 1
a501 1
identical to those in <CODE
d503 1
a503 1
>lwres_gethostbyname_r()</CODE
d505 1
a505 1
<VAR
d507 3
a509 1
>resbuf</VAR
d515 1
a515 1
<CODE
d517 1
a517 1
>lwres_gethostbyaddr_r()</CODE
d519 1
a519 1
<VAR
d521 3
a523 1
>buf</VAR
d525 1
a525 1
<VAR
d527 3
a529 1
>len</VAR
d531 1
a531 1
<CODE
d533 2
a534 2
>h_name</CODE
>, <CODE
d536 1
a536 1
>h_aliases</CODE
d538 1
a538 1
<CODE
d540 1
a540 1
>h_addr_list</CODE
d545 1
a545 1
> returned in <VAR
d547 3
a549 1
>resbuf</VAR
d551 1
a551 1
calls to <CODE
d553 1
a553 1
>lwres_gethostbyaddr_r()</CODE
d555 1
a555 1
<VAR
d557 3
a559 1
>resbuf</VAR
d561 1
a561 1
<CODE
d563 1
a563 1
>struct hostent()</CODE
d575 1
a575 1
<CODE
d577 1
a577 1
>lwres_gethostbyname()</CODE
d579 1
a579 1
<CODE
d581 1
a581 1
>lwres_gethostbyname2()</CODE
d583 1
a583 1
<CODE
d585 1
a585 1
>lwres_gethostbyaddr()</CODE
d588 1
a588 1
<CODE
d590 1
a590 1
>lwres_gethostent()</CODE
d609 1
a609 1
><CODE
d611 1
a611 1
>HOST_NOT_FOUND</CODE
d618 1
a618 1
><CODE
d620 1
a620 1
>TRY_AGAIN</CODE
d628 1
a628 1
><CODE
d630 1
a630 1
>NO_RECOVERY</CODE
d637 1
a637 1
><CODE
d639 1
a639 1
>NO_DATA</CODE
d662 1
a662 1
><CODE
d664 1
a664 1
>lwres_gethostent()</CODE
d667 1
a667 1
<CODE
d669 1
a669 1
>lwres_gethostent_r()</CODE
d677 1
a677 1
>Successful calls to <CODE
d679 1
a679 1
>lwres_gethostbyname_r()</CODE
d681 1
a681 1
<CODE
d683 1
a683 1
>lwres_gethostbyaddr_r()</CODE
d685 1
a685 1
<VAR
d687 3
a689 1
>resbuf</VAR
d698 1
a698 1
> if the lookups fail or if <VAR
d700 3
a702 1
>buf</VAR
d705 1
a705 1
the <CODE
d707 2
a708 2
>h_name</CODE
>, <CODE
d710 1
a710 1
>h_aliases</CODE
d712 1
a712 1
<CODE
d714 1
a714 1
>h_addr_list</CODE
d719 1
a719 1
>.  If <VAR
d721 3
a723 1
>buf</VAR
d725 1
a725 1
<CODE
d727 1
a727 1
>lwres_gethostbyname_r()</CODE
d729 1
a729 1
<CODE
d731 1
a731 1
>lwres_gethostbyaddr_r()</CODE
d781 1
a781 1
><CODE
d783 1
a783 1
>lwres_gethostbyname()</CODE
d785 1
a785 1
<CODE
d787 1
a787 1
>lwres_gethostbyname2()</CODE
d789 1
a789 1
<CODE
d791 1
a791 1
>lwres_gethostbyaddr()</CODE
d794 1
a794 1
<CODE
d796 1
a796 1
>lwres_endhostent()</CODE
d801 1
a801 1
<CODE
d803 1
a803 1
>lwres_gethostbyname_r()</CODE
d806 1
a806 1
<CODE
d808 1
a808 1
>lwres_gethostbyaddr_r()</CODE
d827 1
a827 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 149
a165 176
<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.8 2005/10/13 02:33:56 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_gethostent</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_gethostbyname, lwres_gethostbyname2, lwres_gethostbyaddr, lwres_gethostent, lwres_sethostent, lwres_endhostent, lwres_gethostbyname_r, lwres_gethostbyaddr_r, lwres_gethostent_r, lwres_sethostent_r, lwres_endhostent_r &#8212; lightweight resolver get network host entry</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">#include &lt;lwres/netdb.h&gt;</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname2</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyaddr</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<p><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostent</b>(</code>void<code>)</code>;</p>
<p><code class="funcdef">
void
<b class="fsfunc">lwres_sethostent</b>(</code>int stayopen<code>)</code>;</p>
<p><code class="funcdef">
void
<b class="fsfunc">lwres_endhostent</b>(</code>void<code>)</code>;</p>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent *
<b class="fsfunc">lwres_gethostbyname_r</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent  *
<b class="fsfunc">lwres_gethostbyaddr_r</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
struct hostent  *
<b class="fsfunc">lwres_gethostent_r</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<p><code class="funcdef">
void
<b class="fsfunc">lwres_sethostent_r</b>(</code>int stayopen<code>)</code>;</p>
<p><code class="funcdef">
void
<b class="fsfunc">lwres_endhostent_r</b>(</code>void<code>)</code>;</p>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2526041"></a><h2>DESCRIPTION</h2>
<p>
These functions provide hostname-to-address and
d168 7
a174 2
<span class="citerefentry"><span class="refentrytitle">gethostent</span>(3
)</span>
d177 4
a180 1
<span class="type">struct hostent</span>
d182 4
a185 1
<code class="filename">&lt;namedb.h&gt;</code>.
d187 3
a189 3
</p>
<pre class="programlisting">
struct  hostent {
d196 39
a234 20
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</pre>
<p>
</p>
<p>
The members of this structure are:
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">h_name</code></span></dt>
<dd><p>
The official (canonical) name of the host.
</p></dd>
<dt><span class="term"><code class="constant">h_aliases</code></span></dt>
<dd><p>
A NULL-terminated array of alternate names (nicknames) for the host.
</p></dd>
<dt><span class="term"><code class="constant">h_addrtype</code></span></dt>
<dd><p>
The type of address being returned &#8212;
<span class="type">PF_INET</span>
d236 25
a260 9
<span class="type">PF_INET6</span>.
</p></dd>
<dt><span class="term"><code class="constant">h_length</code></span></dt>
<dd><p>
The length of the address in bytes.
</p></dd>
<dt><span class="term"><code class="constant">h_addr_list</code></span></dt>
<dd><p>
A <span class="type">NULL</span>
d262 11
a272 8
Host addresses are returned in network byte order.
</p></dd>
</dl></div>
<p>
</p>
<p>
For backward compatibility with very old software,
<code class="constant">h_addr</code>
d274 25
a298 8
<code class="constant">h_addr_list.</code>
</p>
<p>
<code class="function">lwres_gethostent()</code>,
<code class="function">lwres_sethostent()</code>,
<code class="function">lwres_endhostent()</code>,
<code class="function">lwres_gethostent_r()</code>,
<code class="function">lwres_sethostent_r()</code>
d300 4
a303 1
<code class="function">lwres_endhostent_r()</code>
d306 4
a309 1
<code class="filename">/etc/hosts</code>
d312 33
a344 10
return failure.
</p>
<p>
<code class="function">lwres_gethostbyname()</code> and
<code class="function">lwres_gethostbyname2()</code> look up the hostname
<em class="parameter"><code>name</code></em>.
<code class="function">lwres_gethostbyname()</code> always looks for an IPv4
address while <code class="function">lwres_gethostbyname2()</code> looks for an
address of protocol family <em class="parameter"><code>af</code></em>: either
<span class="type">PF_INET</span> or <span class="type">PF_INET6</span> &#8212; IPv4 or IPV6
d346 45
a390 13
<span class="type">struct hostent</span>for the name that was looked up.
<span class="type">NULL</span> is returned if the lookups by
<code class="function">lwres_gethostbyname()</code> or
<code class="function">lwres_gethostbyname2()</code> fail.
</p>
<p>
Reverse lookups of addresses are performed by
<code class="function">lwres_gethostbyaddr()</code>.
<em class="parameter"><code>addr</code></em> is an address of length
<em class="parameter"><code>len</code></em> bytes and protocol family
<em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
<span class="type">PF_INET6</span>.
<code class="function">lwres_gethostbyname_r()</code> is a thread-safe function
d392 158
a549 41
<em class="parameter"><code>*error</code></em>.
<em class="parameter"><code>resbuf</code></em> is a pointer to a <span class="type">struct
hostent</span> which is initialised by a successful call to
<code class="function">lwres_gethostbyname_r()</code> .
<em class="parameter"><code>buf</code></em> is a buffer of length
<em class="parameter"><code>len</code></em> bytes which is used to store the
<code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
Successful calls to <code class="function">lwres_gethostbyname_r()</code>
return <em class="parameter"><code>resbuf</code></em>,
which is a pointer to the <span class="type">struct hostent</span> it created.
</p>
<p>
<code class="function">lwres_gethostbyaddr_r()</code> is a thread-safe function
that performs a reverse lookup of address <em class="parameter"><code>addr</code></em>
which is <em class="parameter"><code>len</code></em> bytes long and is of protocol
family <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
<span class="type">PF_INET6</span>.  If an error occurs, the error code is returned
in <em class="parameter"><code>*error</code></em>.  The other function parameters are
identical to those in <code class="function">lwres_gethostbyname_r()</code>.
<em class="parameter"><code>resbuf</code></em> is a pointer to a <span class="type">struct
hostent</span> which is initialised by a successful call to
<code class="function">lwres_gethostbyaddr_r()</code>.
<em class="parameter"><code>buf</code></em> is a buffer of length
<em class="parameter"><code>len</code></em> bytes which is used to store the
<code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.  Successful
calls to <code class="function">lwres_gethostbyaddr_r()</code> return
<em class="parameter"><code>resbuf</code></em>, which is a pointer to the
<code class="function">struct hostent()</code> it created.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526380"></a><h2>RETURN VALUES</h2>
<p>
The functions
<code class="function">lwres_gethostbyname()</code>,
<code class="function">lwres_gethostbyname2()</code>,
<code class="function">lwres_gethostbyaddr()</code>,
d551 4
a554 1
<code class="function">lwres_gethostent()</code>
d556 4
a559 1
<span class="type">lwres_h_errno</span>
d561 4
a564 1
<code class="filename">&lt;lwres/netdb.h&gt;</code>:
d566 41
a606 18
</p>
<div class="variablelist"><dl>
<dt><span class="term"><code class="constant">HOST_NOT_FOUND</code></span></dt>
<dd><p>
The host or address was not found.
</p></dd>
<dt><span class="term"><code class="constant">TRY_AGAIN</code></span></dt>
<dd><p>
A recoverable error occurred, e.g., a timeout.
Retrying the lookup may succeed.
</p></dd>
<dt><span class="term"><code class="constant">NO_RECOVERY</code></span></dt>
<dd><p>
A non-recoverable error occurred.
</p></dd>
<dt><span class="term"><code class="constant">NO_DATA</code></span></dt>
<dd><p>
The name exists, but has no address information
d610 19
a628 12
compatibility.
</p></dd>
</dl></div>
<p>
</p>
<p>
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
translates these error codes to suitable error messages.
</p>
<p>
<code class="function">lwres_gethostent()</code>
d630 4
a633 1
<code class="function">lwres_gethostent_r()</code>
d635 28
a662 8
<span class="type">NULL</span>.
</p>
<p>
Successful calls to <code class="function">lwres_gethostbyname_r()</code> and
<code class="function">lwres_gethostbyaddr_r()</code> return
<em class="parameter"><code>resbuf</code></em>, a pointer to the <span class="type">struct
hostent</span> that was initialised by these functions.  They return
<span class="type">NULL</span> if the lookups fail or if <em class="parameter"><code>buf</code></em>
d664 49
a712 12
the <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
<code class="constant">h_addr_list</code> elements of the <span class="type">struct
hostent</span>.  If <em class="parameter"><code>buf</code></em> was too small, both
<code class="function">lwres_gethostbyname_r()</code> and
<code class="function">lwres_gethostbyaddr_r()</code> set the global variable
<span class="type">errno</span> to <span class="errorcode">ERANGE</span>.
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526540"></a><h2>SEE ALSO</h2>
<p>
<span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>,
d714 7
a720 1
<span class="citerefentry"><span class="refentrytitle">lwres_getipnode</span>(3)</span>,
d722 28
a749 10
<span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3
)</span>
</p>
</div>
<div class="refsect1" lang="en">
<a name="id2526644"></a><h2>BUGS</h2>
<p>
<code class="function">lwres_gethostbyname()</code>,
<code class="function">lwres_gethostbyname2()</code>,
<code class="function">lwres_gethostbyaddr()</code>
d751 4
a754 1
<code class="function">lwres_endhostent()</code>
d758 4
a761 1
<code class="function">lwres_gethostbyname_r()</code>,
d763 7
a769 5
<code class="function">lwres_gethostbyaddr_r()</code>
respectively.
</p>
<p>
The resolver daemon does not currently support any non-DNS
d771 4
a774 1
<code class="filename">/etc/hosts</code>
d776 9
a784 6
<span class="type">NIS</span>,
consequently the above functions don't, either.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_gethostent.html,v 1.8.2.1.4.10 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d34 1
a34 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d41 1
a41 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a52 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a72 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a111 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a151 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a176 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d190 1
a190 1
<a name="id2549606"></a><h2>DESCRIPTION</h2>
d327 1
a327 1
<a name="id2550013"></a><h2>RETURN VALUES</h2>
d394 1
a394 1
<a name="id2550173"></a><h2>SEE ALSO</h2>
d405 1
a405 1
<a name="id2550209"></a><h2>BUGS</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_gethostent.html,v 1.9.18.15 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d34 2
a35 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d39 1
a39 1
<td>const char * </td>
d41 9
a49 2
<var class="pdparam">name</var><code>)</code>;</td>
</tr></table>
d55 7
a61 3
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
d65 1
a65 1
<td>int  </td>
d67 1
a67 1
<var class="pdparam">af</var><code>)</code>;</td>
d75 7
a81 3
<td>const char * </td>
<td>
<var class="pdparam">addr</var>, </td>
d85 2
a86 3
<td>int  </td>
<td>
<var class="pdparam">len</var>, </td>
d90 1
a90 1
<td>int  </td>
d92 1
a92 1
<var class="pdparam">type</var><code>)</code>;</td>
d95 1
a95 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
d97 2
a98 7
<b class="fsfunc">lwres_gethostent</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
d100 2
a101 7
<b class="fsfunc">lwres_sethostent</b>(</code></td>
<td>int  </td>
<td>
<var class="pdparam">stayopen</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
d103 1
a103 5
<b class="fsfunc">lwres_endhostent</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
d109 7
a115 3
<td>const char * </td>
<td>
<var class="pdparam">name</var>, </td>
d119 2
a120 3
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
d124 2
a125 3
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
d129 2
a130 3
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
d134 1
a134 1
<td>int * </td>
d136 1
a136 1
<var class="pdparam">error</var><code>)</code>;</td>
d144 7
a150 3
<td>const char * </td>
<td>
<var class="pdparam">addr</var>, </td>
d154 2
a155 3
<td>int  </td>
<td>
<var class="pdparam">len</var>, </td>
d159 2
a160 3
<td>int  </td>
<td>
<var class="pdparam">type</var>, </td>
d164 2
a165 3
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
d169 2
a170 3
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
d174 2
a175 3
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
d179 1
a179 1
<td>int * </td>
d181 1
a181 1
<var class="pdparam">error</var><code>)</code>;</td>
d189 7
a195 3
<td>struct hostent * </td>
<td>
<var class="pdparam">resbuf</var>, </td>
d199 2
a200 3
<td>char * </td>
<td>
<var class="pdparam">buf</var>, </td>
d204 2
a205 3
<td>int  </td>
<td>
<var class="pdparam">buflen</var>, </td>
d209 1
a209 1
<td>int * </td>
d211 1
a211 1
<var class="pdparam">error</var><code>)</code>;</td>
d214 1
a214 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
d216 2
a217 7
<b class="fsfunc">lwres_sethostent_r</b>(</code></td>
<td>int  </td>
<td>
<var class="pdparam">stayopen</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0"><tr>
<td><code class="funcdef">
d219 1
a219 5
<b class="fsfunc">lwres_endhostent_r</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
d223 1
a223 1
<a name="id2543608"></a><h2>DESCRIPTION</h2>
d225 12
a236 10
      These functions provide hostname-to-address and
      address-to-hostname lookups by means of the lightweight resolver.
      They are similar to the standard
      <span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>
      functions provided by most operating systems.
      They use a
      <span class="type">struct hostent</span>
      which is usually defined in
      <code class="filename">&lt;namedb.h&gt;</code>.
    </p>
d248 1
a248 1
    </p>
d250 2
a251 2
      The members of this structure are:
      </p>
d255 2
a256 2
              The official (canonical) name of the host.
            </p></dd>
d259 2
a260 3
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </p></dd>
d263 5
a267 5
              The type of address being returned &#8212;
              <span class="type">PF_INET</span>
              or
              <span class="type">PF_INET6</span>.
            </p></dd>
d270 2
a271 2
              The length of the address in bytes.
            </p></dd>
d274 4
a277 4
              A <span class="type">NULL</span>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </p></dd>
d280 58
a337 1
    </p>
d339 19
a357 78
      For backward compatibility with very old software,
      <code class="constant">h_addr</code>
      is the first address in
      <code class="constant">h_addr_list.</code>
    </p>
<p><code class="function">lwres_gethostent()</code>,
      <code class="function">lwres_sethostent()</code>,
      <code class="function">lwres_endhostent()</code>,
      <code class="function">lwres_gethostent_r()</code>,
      <code class="function">lwres_sethostent_r()</code>
      and
      <code class="function">lwres_endhostent_r()</code>
      provide iteration over the known host entries on systems that
      provide such functionality through facilities like
      <code class="filename">/etc/hosts</code>
      or NIS.  The lightweight resolver does not currently implement
      these functions; it only provides them as stub functions that always
      return failure.
    </p>
<p><code class="function">lwres_gethostbyname()</code>
      and <code class="function">lwres_gethostbyname2()</code> look up the
      hostname <em class="parameter"><code>name</code></em>.
      <code class="function">lwres_gethostbyname()</code> always looks for an
      IPv4 address while <code class="function">lwres_gethostbyname2()</code>
      looks for an address of protocol family
      <em class="parameter"><code>af</code></em>: either <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span> &#8212; IPv4 or IPV6 addresses
      respectively.  Successful calls of the functions return a
      <span class="type">struct hostent</span>for the name that was looked up.
      <span class="type">NULL</span> is returned if the lookups by
      <code class="function">lwres_gethostbyname()</code> or
      <code class="function">lwres_gethostbyname2()</code> fail.
    </p>
<p>
      Reverse lookups of addresses are performed by
      <code class="function">lwres_gethostbyaddr()</code>.
      <em class="parameter"><code>addr</code></em> is an address of length
      <em class="parameter"><code>len</code></em> bytes and protocol family
      <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span>.
      <code class="function">lwres_gethostbyname_r()</code> is a
      thread-safe function
      for forward lookups.  If an error occurs, an error code is returned in
      <em class="parameter"><code>*error</code></em>.
      <em class="parameter"><code>resbuf</code></em> is a pointer to a
      <span class="type">struct hostent</span> which is initialised by a successful call to
      <code class="function">lwres_gethostbyname_r()</code>.
      <em class="parameter"><code>buf</code></em> is a buffer of length
      <em class="parameter"><code>len</code></em> bytes which is used to store the
      <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
      Successful calls to <code class="function">lwres_gethostbyname_r()</code>
      return <em class="parameter"><code>resbuf</code></em>,
      which is a pointer to the <span class="type">struct hostent</span> it created.
    </p>
<p><code class="function">lwres_gethostbyaddr_r()</code>
      is a thread-safe function
      that performs a reverse lookup of address <em class="parameter"><code>addr</code></em>
      which is <em class="parameter"><code>len</code></em> bytes long and is of
      protocol
      family <em class="parameter"><code>type</code></em> &#8212; <span class="type">PF_INET</span> or
      <span class="type">PF_INET6</span>.  If an error occurs, the error code is returned
      in <em class="parameter"><code>*error</code></em>.  The other function
      parameters are
      identical to those in <code class="function">lwres_gethostbyname_r()</code>.
      <em class="parameter"><code>resbuf</code></em> is a pointer to a
      <span class="type">struct hostent</span> which is initialised by a successful call to
      <code class="function">lwres_gethostbyaddr_r()</code>.
      <em class="parameter"><code>buf</code></em> is a buffer of length
      <em class="parameter"><code>len</code></em> bytes which is used to store the
      <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span> returned in <em class="parameter"><code>resbuf</code></em>.
      Successful calls to <code class="function">lwres_gethostbyaddr_r()</code> return
      <em class="parameter"><code>resbuf</code></em>, which is a pointer to the
      <code class="function">struct hostent()</code> it created.
    </p>
d360 1
a360 1
<a name="id2543959"></a><h2>RETURN VALUES</h2>
d362 10
a371 10
      The functions
      <code class="function">lwres_gethostbyname()</code>,
      <code class="function">lwres_gethostbyname2()</code>,
      <code class="function">lwres_gethostbyaddr()</code>,
      and
      <code class="function">lwres_gethostent()</code>
      return NULL to indicate an error.  In this case the global variable
      <span class="type">lwres_h_errno</span>
      will contain one of the following error codes defined in
      <code class="filename">&lt;lwres/netdb.h&gt;</code>:
d373 1
a373 1
      </p>
d377 2
a378 2
              The host or address was not found.
            </p></dd>
d381 3
a383 3
              A recoverable error occurred, e.g., a timeout.
              Retrying the lookup may succeed.
            </p></dd>
d386 2
a387 2
              A non-recoverable error occurred.
            </p></dd>
d390 6
a395 6
              The name exists, but has no address information
              associated with it (or vice versa in the case
              of a reverse lookup).  The code NO_ADDRESS
              is accepted as a synonym for NO_DATA for backwards
              compatibility.
            </p></dd>
d398 27
a424 24
    </p>
<p><span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
      translates these error codes to suitable error messages.
    </p>
<p><code class="function">lwres_gethostent()</code>
      and <code class="function">lwres_gethostent_r()</code>
      always return <span class="type">NULL</span>.
    </p>
<p>
      Successful calls to <code class="function">lwres_gethostbyname_r()</code> and
      <code class="function">lwres_gethostbyaddr_r()</code> return
      <em class="parameter"><code>resbuf</code></em>, a pointer to the
      <span class="type">struct hostent</span> that was initialised by these functions.  They return
      <span class="type">NULL</span> if the lookups fail or if <em class="parameter"><code>buf</code></em>
      was too small to hold the list of addresses and names referenced by
      the <code class="constant">h_name</code>, <code class="constant">h_aliases</code>, and
      <code class="constant">h_addr_list</code> elements of the
      <span class="type">struct hostent</span>.
      If <em class="parameter"><code>buf</code></em> was too small, both
      <code class="function">lwres_gethostbyname_r()</code> and
      <code class="function">lwres_gethostbyaddr_r()</code> set the global
      variable
      <span class="type">errno</span> to <span class="errorcode">ERANGE</span>.
    </p>
d427 3
a429 2
<a name="id2544193"></a><h2>SEE ALSO</h2>
<p><span class="citerefentry"><span class="refentrytitle">gethostent</span>(3)</span>,
d431 1
a431 1
      <span class="citerefentry"><span class="refentrytitle">lwres_getipnode</span>(3)</span>,
d433 3
a435 2
      <span class="citerefentry"><span class="refentrytitle">lwres_hstrerror</span>(3)</span>
    </p>
d438 23
a460 22
<a name="id2544227"></a><h2>BUGS</h2>
<p><code class="function">lwres_gethostbyname()</code>,
      <code class="function">lwres_gethostbyname2()</code>,
      <code class="function">lwres_gethostbyaddr()</code>
      and
      <code class="function">lwres_endhostent()</code>
      are not thread safe; they return pointers to static data and
      provide error codes through a global variable.
      Thread-safe versions for name and address lookup are provided by
      <code class="function">lwres_gethostbyname_r()</code>,
      and
      <code class="function">lwres_gethostbyaddr_r()</code>
      respectively.
    </p>
<p>
      The resolver daemon does not currently support any non-DNS
      name services such as
      <code class="filename">/etc/hosts</code>
      or
      <span class="type">NIS</span>,
      consequently the above functions don't, either.
    </p>
@


