head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.06;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.33;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.56;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--
 - Copyright (C) 2001  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_gethostent.docbook,v 1.5 2001/06/18 22:06:54 gson Exp $ -->

<refentry>

<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
<refentrytitle>lwres_gethostent</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lwres_gethostbyname</refname>
<refname>lwres_gethostbyname2</refname>
<refname>lwres_gethostbyaddr</refname>
<refname>lwres_gethostent</refname>
<refname>lwres_sethostent</refname>
<refname>lwres_endhostent</refname>
<refname>lwres_gethostbyname_r</refname>
<refname>lwres_gethostbyaddr_r</refname>
<refname>lwres_gethostent_r</refname>
<refname>lwres_sethostent_r</refname>
<refname>lwres_endhostent_r</refname>
<refpurpose>lightweight resolver get network host entry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
<funcsynopsisinfo>#include &lt;lwres/netdb.h&gt;</funcsynopsisinfo>
<funcprototype>
<funcdef>
struct hostent *
<function>lwres_gethostbyname</function></funcdef>
<paramdef>const char *name</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent *
<function>lwres_gethostbyname2</function></funcdef>
<paramdef>const char *name</paramdef>
<paramdef>int af</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent *
<function>lwres_gethostbyaddr</function></funcdef>
<paramdef>const char *addr</paramdef>
<paramdef>int len</paramdef>
<paramdef>int type</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent *
<function>lwres_gethostent</function></funcdef>
<paramdef>void</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_sethostent</function></funcdef>
<paramdef>int stayopen</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_endhostent</function></funcdef>
<paramdef>void</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent *
<function>lwres_gethostbyname_r</function></funcdef>
<paramdef>const char *name</paramdef>
<paramdef>struct hostent *resbuf</paramdef>
<paramdef>char *buf</paramdef>
<paramdef>int buflen</paramdef>
<paramdef>int *error</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent  *
<function>lwres_gethostbyaddr_r</function></funcdef>
<paramdef>const char *addr</paramdef>
<paramdef>int len</paramdef>
<paramdef>int type</paramdef>
<paramdef>struct hostent *resbuf</paramdef>
<paramdef>char *buf</paramdef>
<paramdef>int buflen</paramdef>
<paramdef>int *error</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
struct hostent  *
<function>lwres_gethostent_r</function></funcdef>
<paramdef>struct hostent *resbuf</paramdef>
<paramdef>char *buf</paramdef>
<paramdef>int buflen</paramdef>
<paramdef>int *error</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_sethostent_r</function></funcdef>
<paramdef>int stayopen</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_endhostent_r</function></funcdef>
<paramdef>void</paramdef>
</funcprototype>
</funcsynopsis>
</refsynopsisdiv>

<refsect1>
<title>DESCRIPTION</title>
<para>
These functions provide hostname-to-address and
address-to-hostname lookups by means of the lightweight resolver.
They are similar to the standard
<citerefentry>
<refentrytitle>gethostent</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
functions provided by most operating systems.
They use a
<type>struct hostent</type>
which is usually defined in
<filename>&lt;namedb.h&gt;</filename>.

<programlisting>
struct  hostent {
        char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
};
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</programlisting>
</para>
<para>
The members of this structure are:
<variablelist>
<varlistentry><term><constant>h_name</constant></term>
<listitem>
<para>
The official (canonical) name of the host.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_aliases</constant></term>
<listitem>
<para>
A NULL-terminated array of alternate names (nicknames) for the host.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_addrtype</constant></term>
<listitem>
<para>
The type of address being returned &mdash;
<type>PF_INET</type>
or
<type>PF_INET6</type>.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_length</constant></term>
<listitem>
<para>
The length of the address in bytes.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_addr_list</constant></term>
<listitem>
<para>
A <type>NULL</type>
terminated array of network addresses for the host.
Host addresses are returned in network byte order.
</para>
</listitem></varlistentry>
</variablelist>
</para>
<para>
For backward compatibility with very old software,
<constant>h_addr</constant>
is the first address in
<constant>h_addr_list.</constant>
</para>
<para>
<function>lwres_gethostent()</function>,
<function>lwres_sethostent()</function>,
<function>lwres_endhostent()</function>,
<function>lwres_gethostent_r()</function>,
<function>lwres_sethostent_r()</function>
and
<function>lwres_endhostent_r()</function>
provide iteration over the known host entries on systems that
provide such functionality through facilities like
<filename>/etc/hosts</filename>
or NIS.  The lightweight resolver does not currently implement
these functions; it only provides them as stub functions that always
return failure.
</para>

<para>
<function>lwres_gethostbyname()</function> and
<function>lwres_gethostbyname2()</function> look up the hostname
<parameter>name</parameter>.
<function>lwres_gethostbyname()</function> always looks for an IPv4
address while <function>lwres_gethostbyname2()</function> looks for an
address of protocol family <parameter>af</parameter>: either
<type>PF_INET</type> or <type>PF_INET6</type> &mdash; IPv4 or IPV6
addresses respectively.  Successful calls of the functions return a
<type>struct hostent</type>for the name that was looked up.
<type>NULL</type> is returned if the lookups by
<function>lwres_gethostbyname()</function> or
<function>lwres_gethostbyname2()</function> fail.
</para>

<para>
Reverse lookups of addresses are performed by
<function>lwres_gethostbyaddr()</function>.
<parameter>addr</parameter> is an address of length
<parameter>len</parameter> bytes and protocol family
<parameter>type</parameter> &mdash; <type>PF_INET</type> or
<type>PF_INET6</type>.
<function>lwres_gethostbyname_r()</function> is a thread-safe function
for forward lookups.  If an error occurs, an error code is returned in
<parameter>*error</parameter>.
<parameter>resbuf</parameter> is a pointer to a <type>struct
hostent</type> which is initialised by a successful call to
<function>lwres_gethostbyname_r()</function> .
<parameter>buf</parameter> is a buffer of length
<parameter>len</parameter> bytes which is used to store the
<constant>h_name</constant>, <constant>h_aliases</constant>, and
<constant>h_addr_list</constant> elements of the <type>struct
hostent</type> returned in <parameter>resbuf</parameter>.
Successful calls to <function>lwres_gethostbyname_r()</function>
return <parameter>resbuf</parameter>,
which is a pointer to the <type>struct hostent</type> it created.
</para>

<para>
<function>lwres_gethostbyaddr_r()</function> is a thread-safe function
that performs a reverse lookup of address <parameter>addr</parameter>
which is <parameter>len</parameter> bytes long and is of protocol
family <parameter>type</parameter> &mdash; <type>PF_INET</type> or
<type>PF_INET6</type>.  If an error occurs, the error code is returned
in <parameter>*error</parameter>.  The other function parameters are
identical to those in <function>lwres_gethostbyname_r()</function>.
<parameter>resbuf</parameter> is a pointer to a <type>struct
hostent</type> which is initialised by a successful call to
<function>lwres_gethostbyaddr_r()</function>.
<parameter>buf</parameter> is a buffer of length
<parameter>len</parameter> bytes which is used to store the
<constant>h_name</constant>, <constant>h_aliases</constant>, and
<constant>h_addr_list</constant> elements of the <type>struct
hostent</type> returned in <parameter>resbuf</parameter>.  Successful
calls to <function>lwres_gethostbyaddr_r()</function> return
<parameter>resbuf</parameter>, which is a pointer to the
<function>struct hostent()</function> it created.
</para>

</refsect1>

<refsect1>
<title>RETURN VALUES</title>
<para>
The functions
<function>lwres_gethostbyname()</function>,
<function>lwres_gethostbyname2()</function>,
<function>lwres_gethostbyaddr()</function>,
and
<function>lwres_gethostent()</function>
return NULL to indicate an error.  In this case the global variable
<type>lwres_h_errno</type>
will contain one of the following error codes defined in
<filename>&lt;lwres/netdb.h&gt;</filename>:

<variablelist>
<varlistentry><term><constant>HOST_NOT_FOUND</constant></term>
<listitem>
<para>
The host or address was not found.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>TRY_AGAIN</constant></term>
<listitem>
<para>
A recoverable error occurred, e.g., a timeout.
Retrying the lookup may succeed.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>NO_RECOVERY</constant></term>
<listitem>
<para>
A non-recoverable error occurred.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>NO_DATA</constant></term>
<listitem>
<para>
The name exists, but has no address information
associated with it (or vice versa in the case
of a reverse lookup).  The code NO_ADDRESS
is accepted as a synonym for NO_DATA for backwards
compatibility.
</para>
</listitem></varlistentry>
</variablelist>
</para>

<para>
<citerefentry>
<refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
translates these error codes to suitable error messages.
</para>

<para>
<function>lwres_gethostent()</function>
and
<function>lwres_gethostent_r()</function>
always return
<type>NULL</type>.
</para>

<para>
Successful calls to <function>lwres_gethostbyname_r()</function> and
<function>lwres_gethostbyaddr_r()</function> return
<parameter>resbuf</parameter>, a pointer to the <type>struct
hostent</type> that was initialised by these functions.  They return
<type>NULL</type> if the lookups fail or if <parameter>buf</parameter>
was too small to hold the list of addresses and names referenced by
the <constant>h_name</constant>, <constant>h_aliases</constant>, and
<constant>h_addr_list</constant> elements of the <type>struct
hostent</type>.  If <parameter>buf</parameter> was too small, both
<function>lwres_gethostbyname_r()</function> and
<function>lwres_gethostbyaddr_r()</function> set the global variable
<type>errno</type> to <errorcode>ERANGE</errorcode>.
</para>

</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>gethostent</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_getipnode</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
</para>
</refsect1>

<refsect1>
<title>BUGS</title>
<para>
<function>lwres_gethostbyname()</function>,
<function>lwres_gethostbyname2()</function>,
<function>lwres_gethostbyaddr()</function>
and
<function>lwres_endhostent()</function>
are not thread safe; they return pointers to static data and 
provide error codes through a global variable.
Thread-safe versions for name and address lookup are provided by
<function>lwres_gethostbyname_r()</function>,
and
<function>lwres_gethostbyaddr_r()</function>
respectively.
</para>
<para>
The resolver daemon does not currently support any non-DNS
name services such as 
<filename>/etc/hosts</filename>
or
<type>NIS</type>,
consequently the above functions don't, either.
</para>
</refsect1>
</refentry>
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a2 1
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_gethostent.docbook,v 1.5.206.1 2004/03/06 08:15:39 marka Exp $ -->
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 1
a3 1
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d19 1
a19 1
<!-- $ISC: lwres_gethostent.docbook,v 1.5.206.3 2005/05/13 01:22:36 marka Exp $ -->
a31 12

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2001</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_gethostent.docbook,v 1.6.18.5 2007/08/28 07:20:06 tbox Exp $ -->
d25 9
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_gethostent</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d47 16
a62 16
  <refnamediv>
    <refname>lwres_gethostbyname</refname>
    <refname>lwres_gethostbyname2</refname>
    <refname>lwres_gethostbyaddr</refname>
    <refname>lwres_gethostent</refname>
    <refname>lwres_sethostent</refname>
    <refname>lwres_endhostent</refname>
    <refname>lwres_gethostbyname_r</refname>
    <refname>lwres_gethostbyaddr_r</refname>
    <refname>lwres_gethostent_r</refname>
    <refname>lwres_sethostent_r</refname>
    <refname>lwres_endhostent_r</refname>
    <refpurpose>lightweight resolver get network host entry</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
d65 1
a65 1
        <funcdef>
d68 2
a69 2
        <paramdef>const char *<parameter>name</parameter></paramdef>
        </funcprototype>
d71 1
a71 1
        <funcdef>
d74 3
a76 3
        <paramdef>const char *<parameter>name</parameter></paramdef>
        <paramdef>int <parameter>af</parameter></paramdef>
        </funcprototype>
d78 1
a78 1
        <funcdef>
d81 4
a84 4
        <paramdef>const char *<parameter>addr</parameter></paramdef>
        <paramdef>int <parameter>len</parameter></paramdef>
        <paramdef>int <parameter>type</parameter></paramdef>
        </funcprototype>
d86 1
a86 1
        <funcdef>
d89 2
a90 2
        <paramdef>void</paramdef>
        </funcprototype>
d92 1
a92 1
        <funcdef>
d95 2
a96 2
        <paramdef>int <parameter>stayopen</parameter></paramdef>
        </funcprototype>
d98 1
a98 1
        <funcdef>
d101 2
a102 2
        <paramdef>void</paramdef>
        </funcprototype>
d104 1
a104 1
        <funcdef>
d107 6
a112 6
        <paramdef>const char *<parameter>name</parameter></paramdef>
        <paramdef>struct hostent *<parameter>resbuf</parameter></paramdef>
        <paramdef>char *<parameter>buf</parameter></paramdef>
        <paramdef>int <parameter>buflen</parameter></paramdef>
        <paramdef>int *<parameter>error</parameter></paramdef>
        </funcprototype>
d114 1
a114 1
        <funcdef>
d117 8
a124 8
        <paramdef>const char *<parameter>addr</parameter></paramdef>
        <paramdef>int <parameter>len</parameter></paramdef>
        <paramdef>int <parameter>type</parameter></paramdef>
        <paramdef>struct hostent *<parameter>resbuf</parameter></paramdef>
        <paramdef>char *<parameter>buf</parameter></paramdef>
        <paramdef>int <parameter>buflen</parameter></paramdef>
        <paramdef>int *<parameter>error</parameter></paramdef>
        </funcprototype>
d126 1
a126 1
        <funcdef>
d129 5
a133 5
        <paramdef>struct hostent *<parameter>resbuf</parameter></paramdef>
        <paramdef>char *<parameter>buf</parameter></paramdef>
        <paramdef>int <parameter>buflen</parameter></paramdef>
        <paramdef>int *<parameter>error</parameter></paramdef>
        </funcprototype>
d135 1
a135 1
        <funcdef>
d138 2
a139 2
        <paramdef>int <parameter>stayopen</parameter></paramdef>
        </funcprototype>
d141 1
a141 1
        <funcdef>
d144 2
a145 2
        <paramdef>void</paramdef>
      </funcprototype>
d147 17
a163 1
  </refsynopsisdiv>
d165 1
a165 16
  <refsect1>
    <title>DESCRIPTION</title>
    <para>
      These functions provide hostname-to-address and
      address-to-hostname lookups by means of the lightweight resolver.
      They are similar to the standard
      <citerefentry>
        <refentrytitle>gethostent</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      functions provided by most operating systems.
      They use a
      <type>struct hostent</type>
      which is usually defined in
      <filename>&lt;namedb.h&gt;</filename>.
    </para>
    <para><programlisting>
d175 247
a421 266
    </para>
    <para>
      The members of this structure are:
      <variablelist>
        <varlistentry>
          <term><constant>h_name</constant></term>
          <listitem>
            <para>
              The official (canonical) name of the host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_aliases</constant></term>
          <listitem>
            <para>
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addrtype</constant></term>
          <listitem>
            <para>
              The type of address being returned &mdash;
              <type>PF_INET</type>
              or
              <type>PF_INET6</type>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_length</constant></term>
          <listitem>
            <para>
              The length of the address in bytes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addr_list</constant></term>
          <listitem>
            <para>
              A <type>NULL</type>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      For backward compatibility with very old software,
      <constant>h_addr</constant>
      is the first address in
      <constant>h_addr_list.</constant>
    </para>
    <para><function>lwres_gethostent()</function>,
      <function>lwres_sethostent()</function>,
      <function>lwres_endhostent()</function>,
      <function>lwres_gethostent_r()</function>,
      <function>lwres_sethostent_r()</function>
      and
      <function>lwres_endhostent_r()</function>
      provide iteration over the known host entries on systems that
      provide such functionality through facilities like
      <filename>/etc/hosts</filename>
      or NIS.  The lightweight resolver does not currently implement
      these functions; it only provides them as stub functions that always
      return failure.
    </para>

    <para><function>lwres_gethostbyname()</function>
      and <function>lwres_gethostbyname2()</function> look up the
      hostname <parameter>name</parameter>.
      <function>lwres_gethostbyname()</function> always looks for an
      IPv4 address while <function>lwres_gethostbyname2()</function>
      looks for an address of protocol family
      <parameter>af</parameter>: either <type>PF_INET</type> or
      <type>PF_INET6</type> &mdash; IPv4 or IPV6 addresses
      respectively.  Successful calls of the functions return a
      <type>struct hostent</type>for the name that was looked up.
      <type>NULL</type> is returned if the lookups by
      <function>lwres_gethostbyname()</function> or
      <function>lwres_gethostbyname2()</function> fail.
    </para>

    <para>
      Reverse lookups of addresses are performed by
      <function>lwres_gethostbyaddr()</function>.
      <parameter>addr</parameter> is an address of length
      <parameter>len</parameter> bytes and protocol family
      <parameter>type</parameter> &mdash; <type>PF_INET</type> or
      <type>PF_INET6</type>.
      <function>lwres_gethostbyname_r()</function> is a
      thread-safe function
      for forward lookups.  If an error occurs, an error code is returned in
      <parameter>*error</parameter>.
      <parameter>resbuf</parameter> is a pointer to a
      <type>struct hostent</type> which is initialised by a successful call to
      <function>lwres_gethostbyname_r()</function>.
      <parameter>buf</parameter> is a buffer of length
      <parameter>len</parameter> bytes which is used to store the
      <constant>h_name</constant>, <constant>h_aliases</constant>, and
      <constant>h_addr_list</constant> elements of the
      <type>struct hostent</type> returned in <parameter>resbuf</parameter>.
      Successful calls to <function>lwres_gethostbyname_r()</function>
      return <parameter>resbuf</parameter>,
      which is a pointer to the <type>struct hostent</type> it created.
    </para>

    <para><function>lwres_gethostbyaddr_r()</function>
      is a thread-safe function
      that performs a reverse lookup of address <parameter>addr</parameter>
      which is <parameter>len</parameter> bytes long and is of
      protocol
      family <parameter>type</parameter> &mdash; <type>PF_INET</type> or
      <type>PF_INET6</type>.  If an error occurs, the error code is returned
      in <parameter>*error</parameter>.  The other function
      parameters are
      identical to those in <function>lwres_gethostbyname_r()</function>.
      <parameter>resbuf</parameter> is a pointer to a
      <type>struct hostent</type> which is initialised by a successful call to
      <function>lwres_gethostbyaddr_r()</function>.
      <parameter>buf</parameter> is a buffer of length
      <parameter>len</parameter> bytes which is used to store the
      <constant>h_name</constant>, <constant>h_aliases</constant>, and
      <constant>h_addr_list</constant> elements of the
      <type>struct hostent</type> returned in <parameter>resbuf</parameter>.
      Successful calls to <function>lwres_gethostbyaddr_r()</function> return
      <parameter>resbuf</parameter>, which is a pointer to the
      <function>struct hostent()</function> it created.
    </para>

  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>
    <para>
      The functions
      <function>lwres_gethostbyname()</function>,
      <function>lwres_gethostbyname2()</function>,
      <function>lwres_gethostbyaddr()</function>,
      and
      <function>lwres_gethostent()</function>
      return NULL to indicate an error.  In this case the global variable
      <type>lwres_h_errno</type>
      will contain one of the following error codes defined in
      <filename>&lt;lwres/netdb.h&gt;</filename>:

      <variablelist>
        <varlistentry>
          <term><constant>HOST_NOT_FOUND</constant></term>
          <listitem>
            <para>
              The host or address was not found.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>TRY_AGAIN</constant></term>
          <listitem>
            <para>
              A recoverable error occurred, e.g., a timeout.
              Retrying the lookup may succeed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_RECOVERY</constant></term>
          <listitem>
            <para>
              A non-recoverable error occurred.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_DATA</constant></term>
          <listitem>
            <para>
              The name exists, but has no address information
              associated with it (or vice versa in the case
              of a reverse lookup).  The code NO_ADDRESS
              is accepted as a synonym for NO_DATA for backwards
              compatibility.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para><citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      translates these error codes to suitable error messages.
    </para>

    <para><function>lwres_gethostent()</function>
      and <function>lwres_gethostent_r()</function>
      always return <type>NULL</type>.
    </para>

    <para>
      Successful calls to <function>lwres_gethostbyname_r()</function> and
      <function>lwres_gethostbyaddr_r()</function> return
      <parameter>resbuf</parameter>, a pointer to the
      <type>struct hostent</type> that was initialised by these functions.  They return
      <type>NULL</type> if the lookups fail or if <parameter>buf</parameter>
      was too small to hold the list of addresses and names referenced by
      the <constant>h_name</constant>, <constant>h_aliases</constant>, and
      <constant>h_addr_list</constant> elements of the
      <type>struct hostent</type>.
      If <parameter>buf</parameter> was too small, both
      <function>lwres_gethostbyname_r()</function> and
      <function>lwres_gethostbyaddr_r()</function> set the global
      variable
      <type>errno</type> to <errorcode>ERANGE</errorcode>.
    </para>

  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>gethostent</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getipnode</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
    </para>
  </refsect1>

  <refsect1>
    <title>BUGS</title>
    <para><function>lwres_gethostbyname()</function>,
      <function>lwres_gethostbyname2()</function>,
      <function>lwres_gethostbyaddr()</function>
      and
      <function>lwres_endhostent()</function>
      are not thread safe; they return pointers to static data and
      provide error codes through a global variable.
      Thread-safe versions for name and address lookup are provided by
      <function>lwres_gethostbyname_r()</function>,
      and
      <function>lwres_gethostbyaddr_r()</function>
      respectively.
    </para>
    <para>
      The resolver daemon does not currently support any non-DNS
      name services such as
      <filename>/etc/hosts</filename>
      or
      <type>NIS</type>,
      consequently the above functions don't, either.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


