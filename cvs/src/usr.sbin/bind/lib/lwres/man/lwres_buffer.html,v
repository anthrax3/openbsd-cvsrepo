head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.5
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.4
	BIND_9_3_3:1.1.1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.03;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.31;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.01.10.18.20.24;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.09.12.33.59;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!--
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: lwres_buffer.html,v 1.5.18.16 2007/01/30 00:23:45 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_buffer</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2476275"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_buffer_init, lwres_buffer_invalidate, lwres_buffer_add, lwres_buffer_subtract, lwres_buffer_clear, lwres_buffer_first, lwres_buffer_forward, lwres_buffer_back, lwres_buffer_getuint8, lwres_buffer_putuint8, lwres_buffer_getuint16, lwres_buffer_putuint16, lwres_buffer_getuint32, lwres_buffer_putuint32, lwres_buffer_putmem, lwres_buffer_getmem &#8212; lightweight resolver buffer management</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwbuffer.h&gt;
</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_init</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>void * </td>
<td>
<var class="pdparam">base</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">length</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_invalidate</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_add</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">n</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_subtract</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">n</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_clear</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_first</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_forward</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">n</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_back</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">n</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint8_t
<b class="fsfunc">lwres_buffer_getuint8</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint8</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint8_t  </td>
<td>
<var class="pdparam">val</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint16_t
<b class="fsfunc">lwres_buffer_getuint16</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint16</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint16_t  </td>
<td>
<var class="pdparam">val</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint32_t
<b class="fsfunc">lwres_buffer_getuint32</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint32</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>lwres_uint32_t  </td>
<td>
<var class="pdparam">val</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putmem</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>const unsigned char * </td>
<td>
<var class="pdparam">base</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">length</var><code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_getmem</b>(</code></td>
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned char * </td>
<td>
<var class="pdparam">base</var>, </td>
</tr>
<tr>
<td> </td>
<td>unsigned int  </td>
<td>
<var class="pdparam">length</var><code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2543892"></a><h2>DESCRIPTION</h2>
<p>
      These functions provide bounds checked access to a region of memory
      where data is being read or written.
      They are based on, and similar to, the
      <code class="literal">isc_buffer_</code>
      functions in the ISC library.
    </p>
<p>
      A buffer is a region of memory, together with a set of related
      subregions.
      The <span class="emphasis"><em>used region</em></span> and the
      <span class="emphasis"><em>available</em></span> region are disjoint, and
      their union is the buffer's region.
      The used region extends from the beginning of the buffer region to the
      last used byte.
      The available region extends from one byte greater than the last used
      byte to the end of the  buffer's region.
      The size of the used region can be changed using various
      buffer commands.
      Initially, the used region is empty.
    </p>
<p>
      The used region is further subdivided into two disjoint regions: the
      <span class="emphasis"><em>consumed region</em></span> and the <span class="emphasis"><em>remaining region</em></span>.
      The union of these two regions is the used region.
      The consumed region extends from the beginning of the used region to
      the byte before the <span class="emphasis"><em>current</em></span> offset (if any).
      The <span class="emphasis"><em>remaining</em></span> region the current pointer to the end
      of the used
      region.
      The size of the consumed region can be changed using various
      buffer commands.
      Initially, the consumed region is empty.
    </p>
<p>
      The <span class="emphasis"><em>active region</em></span> is an (optional) subregion of the
      remaining
      region.
      It extends from the current offset to an offset in the
      remaining region.
      Initially, the active region is empty.
      If the current offset advances beyond the chosen offset,
      the active region will also be empty.
    </p>
<pre class="programlisting">
   /------------entire length---------------\\
   /----- used region -----\\/-- available --\\
   +----------------------------------------+
   | consumed  | remaining |                |
   +----------------------------------------+
   a           b     c     d                e
      </pre>
<p>
    </p>
<pre class="programlisting">
  a == base of buffer.
  b == current pointer.  Can be anywhere between a and d.
  c == active pointer.  Meaningful between b and d.
  d == used pointer.
  e == length of buffer.
      </pre>
<p>
    </p>
<pre class="programlisting">
  a-e == entire length of buffer.
  a-d == used region.
  a-b == consumed region.
  b-d == remaining region.
  b-c == optional active region.
</pre>
<p>
    </p>
<p><code class="function">lwres_buffer_init()</code>
      initializes the
      <span class="type">lwres_buffer_t</span>
      <em class="parameter"><code>*b</code></em>
      and assocates it with the memory region of size
      <em class="parameter"><code>length</code></em>
      bytes starting at location
      <em class="parameter"><code>base.</code></em>
    </p>
<p><code class="function">lwres_buffer_invalidate()</code>
      marks the buffer <em class="parameter"><code>*b</code></em>
      as invalid.  Invalidating a buffer after use is not required,
      but makes it possible to catch its possible accidental use.
    </p>
<p>
      The functions
      <code class="function">lwres_buffer_add()</code>
      and
      <code class="function">lwres_buffer_subtract()</code>
      respectively increase and decrease the used space in
      buffer
      <em class="parameter"><code>*b</code></em>
      by
      <em class="parameter"><code>n</code></em>
      bytes.
      <code class="function">lwres_buffer_add()</code>
      checks for buffer overflow and
      <code class="function">lwres_buffer_subtract()</code>
      checks for underflow.
      These functions do not allocate or deallocate memory.
      They just change the value of
      <em class="structfield"><code>used</code></em>.
    </p>
<p>
      A buffer is re-initialised by
      <code class="function">lwres_buffer_clear()</code>.
      The function sets
      <em class="structfield"><code>used</code></em>,
      <em class="structfield"><code>current</code></em>
      and
      <em class="structfield"><code>active</code></em>
      to zero.
    </p>
<p><code class="function">lwres_buffer_first</code>
      makes the consumed region of buffer
      <em class="parameter"><code>*p</code></em>
      empty by setting
      <em class="structfield"><code>current</code></em>
      to zero (the start of the buffer).
    </p>
<p><code class="function">lwres_buffer_forward()</code>
      increases the consumed region of buffer
      <em class="parameter"><code>*b</code></em>
      by
      <em class="parameter"><code>n</code></em>
      bytes, checking for overflow.
      Similarly,
      <code class="function">lwres_buffer_back()</code>
      decreases buffer
      <em class="parameter"><code>b</code></em>'s
      consumed region by
      <em class="parameter"><code>n</code></em>
      bytes and checks for underflow.
    </p>
<p><code class="function">lwres_buffer_getuint8()</code>
      reads an unsigned 8-bit integer from
      <em class="parameter"><code>*b</code></em>
      and returns it.
      <code class="function">lwres_buffer_putuint8()</code>
      writes the unsigned 8-bit integer
      <em class="parameter"><code>val</code></em>
      to buffer
      <em class="parameter"><code>*b</code></em>.
    </p>
<p><code class="function">lwres_buffer_getuint16()</code>
      and
      <code class="function">lwres_buffer_getuint32()</code>
      are identical to
      <code class="function">lwres_buffer_putuint8()</code>
      except that they respectively read an unsigned 16-bit or 32-bit integer
      in network byte order from
      <em class="parameter"><code>b</code></em>.
      Similarly,
      <code class="function">lwres_buffer_putuint16()</code>
      and
      <code class="function">lwres_buffer_putuint32()</code>
      writes the unsigned 16-bit or 32-bit integer
      <em class="parameter"><code>val</code></em>
      to buffer
      <em class="parameter"><code>b</code></em>,
      in network byte order.
    </p>
<p>
      Arbitrary amounts of data are read or written from a lightweight
      resolver buffer with
      <code class="function">lwres_buffer_getmem()</code>
      and
      <code class="function">lwres_buffer_putmem()</code>
      respectively.
      <code class="function">lwres_buffer_putmem()</code>
      copies
      <em class="parameter"><code>length</code></em>
      bytes of memory at
      <em class="parameter"><code>base</code></em>
      to
      <em class="parameter"><code>b</code></em>.
      Conversely,
      <code class="function">lwres_buffer_getmem()</code>
      copies
      <em class="parameter"><code>length</code></em>
      bytes of memory from
      <em class="parameter"><code>b</code></em>
      to
      <em class="parameter"><code>base</code></em>.
    </p>
</div>
</div></body>
</html>
@


1.5
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.10 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
d41 3
a43 2
<td> </td>
<td>, </td>
d47 3
a49 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d53 1
a53 1
<td> </td>
d55 1
a55 1
<code>)</code>;</td>
d58 1
a58 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d62 1
a62 7
<td> </td>
<td>
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
d64 2
a65 3
<code>)</code>;</td>
</tr>
</table>
d71 3
a73 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d77 1
a77 1
<td> </td>
d79 1
a79 1
<code>)</code>;</td>
d87 3
a89 2
<td> </td>
<td>, </td>
d93 1
a93 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d95 1
a95 1
<code>)</code>;</td>
d98 1
a98 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d102 1
a102 1
<td> </td>
d104 3
a106 11
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d110 1
a110 1
<td> </td>
d112 2
a113 9
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d119 3
a121 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d125 1
a125 1
<td> </td>
d127 1
a127 1
<code>)</code>;</td>
d135 3
a137 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d141 1
a141 1
<td> </td>
d143 1
a143 1
<code>)</code>;</td>
d146 1
a146 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d150 1
a150 1
<td> </td>
d152 2
a153 9
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d159 3
a161 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d165 1
a165 1
<td> </td>
d167 1
a167 1
<code>)</code>;</td>
d170 1
a170 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d174 1
a174 1
<td> </td>
d176 2
a177 9
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d183 3
a185 2
<td> </td>
<td>, </td>
d189 1
a189 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d191 1
a191 1
<code>)</code>;</td>
d194 1
a194 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d198 1
a198 1
<td> </td>
d200 2
a201 9
<code>)</code>;</td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
d207 3
a209 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d213 1
a213 1
<td> </td>
d215 1
a215 1
<code>)</code>;</td>
d223 3
a225 2
<td> </td>
<td>, </td>
d229 3
a231 2
<td> </td>
<td>, </td>
d235 1
a235 6
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d237 1
a237 1
<code>)</code>;</td>
d245 3
a247 2
<td> </td>
<td>, </td>
d251 3
a253 7
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
d257 1
a257 1
<td> </td>
d259 1
a259 1
<code>)</code>;</td>
d265 1
a265 34
<a name="id2549674"></a><h2>DESCRIPTION</h2>
<p>
These functions provide bounds checked access to a region of memory
where data is being read or written.
They are based on, and similar to, the
<code class="literal">isc_buffer_</code>
functions in the ISC library.
</p>
<p>
A buffer is a region of memory, together with a set of related
subregions.
The <span class="emphasis"><em>used region</em></span> and the
<span class="emphasis"><em>available</em></span> region are disjoint, and
their union is the buffer's region.
The used region extends from the beginning of the buffer region to the
last used byte.
The available region extends from one byte greater than the last used
byte to the end of the  buffer's region.
The size of the used region can be changed using various
buffer commands.
Initially, the used region is empty.
</p>
<p>
The used region is further subdivided into two disjoint regions: the
<span class="emphasis"><em>consumed region</em></span> and the <span class="emphasis"><em>remaining region</em></span>.
The union of these two regions is the used region.
The consumed region extends from the beginning of the used region to
the byte before the <span class="emphasis"><em>current</em></span> offset (if any).
The <span class="emphasis"><em>remaining</em></span> region the current pointer to the end of the used
region.
The size of the consumed region can be changed using various
buffer commands.
Initially, the consumed region is empty.
</p>
d267 43
a309 10
The <span class="emphasis"><em>active region</em></span> is an (optional) subregion of the remaining
region.
It extends from the current offset to an offset in the
remaining region.
Initially, the active region is empty.
If the current offset advances beyond the chosen offset,
the active region will also be empty.
</p>
<p>
</p>
a310 1
 
d317 4
a320 1
 
d326 4
a329 1
 
d337 116
a452 123
</p>
<p>
<code class="function">lwres_buffer_init()</code>
initializes the
<span class="type">lwres_buffer_t</span>
<em class="parameter"><code>*b</code></em>
and assocates it with the memory region of size
<em class="parameter"><code>length</code></em>
bytes starting at location
<em class="parameter"><code>base.</code></em>
</p>
<p>
<code class="function">lwres_buffer_invalidate()</code>
marks the buffer
<em class="parameter"><code>*b</code></em>
as invalid.  Invalidating a buffer after use is not required,
but makes it possible to catch its possible accidental use.
</p>
<p>
The functions
<code class="function">lwres_buffer_add()</code>
and
<code class="function">lwres_buffer_subtract()</code>
respectively increase and decrease the used space in
buffer
<em class="parameter"><code>*b</code></em>
by
<em class="parameter"><code>n</code></em>
bytes.
<code class="function">lwres_buffer_add()</code>
checks for buffer overflow and
<code class="function">lwres_buffer_subtract()</code>
checks for underflow.
These functions do not allocate or deallocate memory.
They just change the value of
<em class="structfield"><code>used</code></em>.
</p>
<p>
A buffer is re-initialised by
<code class="function">lwres_buffer_clear()</code>.
The function sets
<em class="structfield"><code>used</code></em> ,
<em class="structfield"><code>current</code></em>
and
<em class="structfield"><code>active</code></em>
to zero.
</p>
<p>
<code class="function">lwres_buffer_first</code>
makes the consumed region of buffer
<em class="parameter"><code>*p</code></em>
empty by setting
<em class="structfield"><code>current</code></em>
to zero (the start of the buffer).
</p>
<p>
<code class="function">lwres_buffer_forward()</code>
increases the consumed region of buffer
<em class="parameter"><code>*b</code></em>
by
<em class="parameter"><code>n</code></em>
bytes, checking for overflow.
Similarly,
<code class="function">lwres_buffer_back()</code>
decreases buffer
<em class="parameter"><code>b</code></em>'s
consumed region by
<em class="parameter"><code>n</code></em>
bytes and checks for underflow.
</p>
<p>
<code class="function">lwres_buffer_getuint8()</code>
reads an unsigned 8-bit integer from
<em class="parameter"><code>*b</code></em>
and returns it.
<code class="function">lwres_buffer_putuint8()</code>
writes the unsigned 8-bit integer
<em class="parameter"><code>val</code></em>
to buffer
<em class="parameter"><code>*b</code></em>.
</p>
<p>
<code class="function">lwres_buffer_getuint16()</code>
and
<code class="function">lwres_buffer_getuint32()</code>
are identical to
<code class="function">lwres_buffer_putuint8()</code>
except that they respectively read an unsigned 16-bit or 32-bit integer 
in network byte order from
<em class="parameter"><code>b</code></em>.
Similarly,
<code class="function">lwres_buffer_putuint16()</code>
and
<code class="function">lwres_buffer_putuint32()</code>
writes the unsigned 16-bit or 32-bit integer
<em class="parameter"><code>val</code></em>
to buffer
<em class="parameter"><code>b</code></em>,
in network byte order.
</p>
<p>
Arbitrary amounts of data are read or written from a lightweight
resolver buffer with
<code class="function">lwres_buffer_getmem()</code>
and
<code class="function">lwres_buffer_putmem()</code>
respectively.
<code class="function">lwres_buffer_putmem()</code>
copies
<em class="parameter"><code>length</code></em>
bytes of memory at
<em class="parameter"><code>base</code></em>
to
<em class="parameter"><code>b</code></em>.
Conversely,
<code class="function">lwres_buffer_getmem()</code>
copies
<em class="parameter"><code>length</code></em>
bytes of memory from
<em class="parameter"><code>b</code></em>
to
<em class="parameter"><code>base</code></em>.
</p>
@


1.4
log
@resolve conflicts
@
text
@d17 1
a17 1
<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.8 2005/10/13 02:33:55 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d25 1
a25 1
<a name="id2463721"></a><div class="titlepage"></div>
d52 5
d61 2
a62 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d69 8
a76 1
</tr></table>
d88 5
d108 5
d117 2
a118 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d125 10
a134 2
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d141 8
a148 1
</tr></table>
d160 5
d180 5
d189 2
a190 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d197 8
a204 1
</tr></table>
d216 5
d225 2
a226 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d233 8
a240 1
</tr></table>
d252 5
d261 2
a262 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d269 8
a276 1
</tr></table>
d288 5
d313 5
d338 5
d350 1
a350 1
<a name="id2526109"></a><h2>DESCRIPTION</h2>
@


1.3
log
@resolve conflicts
@
text
@d2 3
a4 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d8 1
a8 1
 -
d11 1
a11 1
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 238
a254 189

<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.2 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>lwres_buffer</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
><BODY
CLASS="REFENTRY"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><H1
><A
NAME="AEN1"
></A
>lwres_buffer</H1
><DIV
CLASS="REFNAMEDIV"
><A
NAME="AEN8"
></A
><H2
>Name</H2
>lwres_buffer_init, lwres_buffer_invalidate, lwres_buffer_add, lwres_buffer_subtract, lwres_buffer_clear, lwres_buffer_first, lwres_buffer_forward, lwres_buffer_back, lwres_buffer_getuint8, lwres_buffer_putuint8, lwres_buffer_getuint16, lwres_buffer_putuint16, lwres_buffer_getuint32, lwres_buffer_putuint32, lwres_buffer_putmem, lwres_buffer_getmem&nbsp;--&nbsp;lightweight resolver buffer management</DIV
><DIV
CLASS="REFSYNOPSISDIV"
><A
NAME="AEN26"
></A
><H2
>Synopsis</H2
><DIV
CLASS="FUNCSYNOPSIS"
><P
></P
><A
NAME="AEN27"
></A
><PRE
CLASS="FUNCSYNOPSISINFO"
>#include &lt;lwres/lwbuffer.h&gt;</PRE
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_init</CODE
>(lwres_buffer_t *b, void *base, unsigned int length);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_invalidate</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_add</CODE
>(lwres_buffer_t *b, unsigned int n);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_subtract</CODE
>(lwres_buffer_t *b, unsigned int n);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_clear</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_first</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_forward</CODE
>(lwres_buffer_t *b, unsigned int n);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_back</CODE
>(lwres_buffer_t *b, unsigned int n);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_uint8_t
lwres_buffer_getuint8</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_putuint8</CODE
>(lwres_buffer_t *b, lwres_uint8_t val);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_uint16_t
lwres_buffer_getuint16</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_putuint16</CODE
>(lwres_buffer_t *b, lwres_uint16_t val);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>lwres_uint32_t
lwres_buffer_getuint32</CODE
>(lwres_buffer_t *b);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_putuint32</CODE
>(lwres_buffer_t *b, lwres_uint32_t val);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_putmem</CODE
>(lwres_buffer_t *b, const unsigned char *base, unsigned int length);</CODE
></P
><P
><CODE
><CODE
CLASS="FUNCDEF"
>void
lwres_buffer_getmem</CODE
>(lwres_buffer_t *b, unsigned char *base, unsigned int length);</CODE
></P
><P
></P
></DIV
></DIV
><DIV
CLASS="REFSECT1"
><A
NAME="AEN106"
></A
><H2
>DESCRIPTION</H2
><P
>These functions provide bounds checked access to a region of memory
d257 5
a261 7
<VAR
CLASS="LITERAL"
>isc_buffer_</VAR
>
functions in the ISC library.</P
><P
>A buffer is a region of memory, together with a set of related
d263 2
a264 14
The <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>used region</I
></SPAN
> and the
<SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>available</I
></SPAN
> region are disjoint, and
d272 5
a276 16
Initially, the used region is empty.</P
><P
>The used region is further subdivided into two disjoint regions: the
<SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>consumed region</I
></SPAN
> and the <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>remaining region</I
></SPAN
>.
d279 2
a280 14
the byte before the <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>current</I
></SPAN
> offset (if any).
The <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>remaining</I
></SPAN
> region the current pointer to the end of the used
d284 4
a287 9
Initially, the consumed region is empty.</P
><P
>The <SPAN
CLASS="emphasis"
><I
CLASS="EMPHASIS"
>active region</I
></SPAN
> is an (optional) subregion of the remaining
d293 6
a298 5
the active region will also be empty.</P
><P
><PRE
CLASS="PROGRAMLISTING"
> 
d316 6
a321 7
  b-c == optional active region.</PRE
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_init()</CODE
>
d323 2
a324 8
<SPAN
CLASS="TYPE"
>lwres_buffer_t</SPAN
>
<VAR
CLASS="PARAMETER"
>*b</VAR
>
d326 1
a326 4
<VAR
CLASS="PARAMETER"
>length</VAR
>
d328 4
a331 9
<VAR
CLASS="PARAMETER"
>base.</VAR
></P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_invalidate()</CODE
>
d333 1
a333 4
<VAR
CLASS="PARAMETER"
>*b</VAR
>
d335 5
a339 7
but makes it possible to catch its possible accidental use.</P
><P
>The functions
<CODE
CLASS="FUNCTION"
>lwres_buffer_add()</CODE
>
d341 1
a341 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_subtract()</CODE
>
d344 1
a344 4
<VAR
CLASS="PARAMETER"
>*b</VAR
>
d346 1
a346 4
<VAR
CLASS="PARAMETER"
>n</VAR
>
d348 1
a348 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_add()</CODE
>
d350 1
a350 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_subtract()</CODE
>
d354 5
a358 10
<CODE
CLASS="STRUCTFIELD"
>used</CODE
>.</P
><P
>A buffer is re-initialised by
<CODE
CLASS="FUNCTION"
>lwres_buffer_clear()</CODE
>.
d360 2
a361 8
<CODE
CLASS="STRUCTFIELD"
>used</CODE
> ,
<CODE
CLASS="STRUCTFIELD"
>current</CODE
>
d363 5
a367 10
<CODE
CLASS="STRUCTFIELD"
>active</CODE
>
to zero.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_first</CODE
>
d369 1
a369 4
<VAR
CLASS="PARAMETER"
>*p</VAR
>
d371 5
a375 10
<CODE
CLASS="STRUCTFIELD"
>current</CODE
>
to zero (the start of the buffer).</P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_forward()</CODE
>
d377 1
a377 4
<VAR
CLASS="PARAMETER"
>*b</VAR
>
d379 1
a379 4
<VAR
CLASS="PARAMETER"
>n</VAR
>
d382 1
a382 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_back()</CODE
>
d384 1
a384 4
<VAR
CLASS="PARAMETER"
>b</VAR
>'s
d386 5
a390 10
<VAR
CLASS="PARAMETER"
>n</VAR
>
bytes and checks for underflow.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_getuint8()</CODE
>
d392 1
a392 4
<VAR
CLASS="PARAMETER"
>*b</VAR
>
d394 1
a394 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putuint8()</CODE
>
d396 1
a396 4
<VAR
CLASS="PARAMETER"
>val</VAR
>
d398 4
a401 9
<VAR
CLASS="PARAMETER"
>*b</VAR
>.</P
><P
><CODE
CLASS="FUNCTION"
>lwres_buffer_getuint16()</CODE
>
d403 1
a403 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_getuint32()</CODE
>
d405 1
a405 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putuint8()</CODE
>
d408 1
a408 4
<VAR
CLASS="PARAMETER"
>b</VAR
>.
d410 1
a410 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putuint16()</CODE
>
d412 1
a412 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putuint32()</CODE
>
d414 1
a414 4
<VAR
CLASS="PARAMETER"
>val</VAR
>
d416 5
a420 7
<VAR
CLASS="PARAMETER"
>b</VAR
>,
in network byte order.</P
><P
>Arbitrary amounts of data are read or written from a lightweight
d422 1
a422 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_getmem()</CODE
>
d424 1
a424 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putmem()</CODE
>
d426 1
a426 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_putmem()</CODE
>
d428 1
a428 4
<VAR
CLASS="PARAMETER"
>length</VAR
>
d430 1
a430 4
<VAR
CLASS="PARAMETER"
>base</VAR
>
d432 1
a432 4
<VAR
CLASS="PARAMETER"
>b</VAR
>.
d434 1
a434 4
<CODE
CLASS="FUNCTION"
>lwres_buffer_getmem()</CODE
>
d436 1
a436 4
<VAR
CLASS="PARAMETER"
>length</VAR
>
d438 1
a438 4
<VAR
CLASS="PARAMETER"
>b</VAR
>
d440 5
a444 8
<VAR
CLASS="PARAMETER"
>base</VAR
>.</P
></DIV
></BODY
></HTML
>
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d2 3
a4 2
 - Copyright (C) 2000, 2001  Internet Software Consortium.
 - 
d8 8
a15 9
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d17 4
d27 1
a27 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"></HEAD
d38 2
a39 2
>lwres_buffer</A
></H1
d57 2
a61 2
><P
></P
d208 1
a208 1
<TT
d210 1
a210 1
>isc_buffer_</TT
d311 1
a311 1
><TT
d313 1
a313 1
>lwres_buffer_init()</TT
d320 1
a320 1
<TT
d322 1
a322 3
><I
>*b</I
></TT
d325 1
a325 1
<TT
d327 1
a327 3
><I
>length</I
></TT
d330 1
a330 1
<TT
d332 1
a332 3
><I
>base.</I
></TT
d335 1
a335 1
><TT
d337 1
a337 1
>lwres_buffer_invalidate()</TT
d340 1
a340 1
<TT
d342 1
a342 3
><I
>*b</I
></TT
d348 1
a348 1
<TT
d350 1
a350 1
>lwres_buffer_add()</TT
d353 1
a353 1
<TT
d355 1
a355 1
>lwres_buffer_subtract()</TT
d359 1
a359 1
<TT
d361 1
a361 3
><I
>*b</I
></TT
d364 1
a364 1
<TT
d366 1
a366 3
><I
>n</I
></TT
d369 1
a369 1
<TT
d371 1
a371 1
>lwres_buffer_add()</TT
d374 1
a374 1
<TT
d376 1
a376 1
>lwres_buffer_subtract()</TT
d381 1
a381 1
<TT
d383 1
a383 3
><I
>used</I
></TT
d387 1
a387 1
<TT
d389 1
a389 1
>lwres_buffer_clear()</TT
d392 1
a392 1
<TT
d394 1
a394 3
><I
>used</I
></TT
d396 1
a396 1
<TT
d398 1
a398 3
><I
>current</I
></TT
d401 1
a401 1
<TT
d403 1
a403 3
><I
>active</I
></TT
d407 1
a407 1
><TT
d409 1
a409 1
>lwres_buffer_first</TT
d412 1
a412 1
<TT
d414 1
a414 3
><I
>*p</I
></TT
d417 1
a417 1
<TT
d419 1
a419 3
><I
>current</I
></TT
d423 1
a423 1
><TT
d425 1
a425 1
>lwres_buffer_forward()</TT
d428 1
a428 1
<TT
d430 1
a430 3
><I
>*b</I
></TT
d433 1
a433 1
<TT
d435 1
a435 3
><I
>n</I
></TT
d439 1
a439 1
<TT
d441 1
a441 1
>lwres_buffer_back()</TT
d444 1
a444 1
<TT
d446 1
a446 3
><I
>b</I
></TT
d449 1
a449 1
<TT
d451 1
a451 3
><I
>n</I
></TT
d455 1
a455 1
><TT
d457 1
a457 1
>lwres_buffer_getuint8()</TT
d460 1
a460 1
<TT
d462 1
a462 3
><I
>*b</I
></TT
d465 1
a465 1
<TT
d467 1
a467 1
>lwres_buffer_putuint8()</TT
d470 1
a470 1
<TT
d472 1
a472 3
><I
>val</I
></TT
d475 1
a475 1
<TT
d477 1
a477 3
><I
>*b</I
></TT
d480 1
a480 1
><TT
d482 1
a482 1
>lwres_buffer_getuint16()</TT
d485 1
a485 1
<TT
d487 1
a487 1
>lwres_buffer_getuint32()</TT
d490 1
a490 1
<TT
d492 1
a492 1
>lwres_buffer_putuint8()</TT
d496 1
a496 1
<TT
d498 1
a498 3
><I
>b</I
></TT
d501 1
a501 1
<TT
d503 1
a503 1
>lwres_buffer_putuint16()</TT
d506 1
a506 1
<TT
d508 1
a508 1
>lwres_buffer_putuint32()</TT
d511 1
a511 1
<TT
d513 1
a513 3
><I
>val</I
></TT
d516 1
a516 1
<TT
d518 1
a518 3
><I
>b</I
></TT
d524 1
a524 1
<TT
d526 1
a526 1
>lwres_buffer_getmem()</TT
d529 1
a529 1
<TT
d531 1
a531 1
>lwres_buffer_putmem()</TT
d534 1
a534 1
<TT
d536 1
a536 1
>lwres_buffer_putmem()</TT
d539 1
a539 1
<TT
d541 1
a541 3
><I
>length</I
></TT
d544 1
a544 1
<TT
d546 1
a546 3
><I
>base</I
></TT
d549 1
a549 1
<TT
d551 1
a551 3
><I
>b</I
></TT
d554 1
a554 1
<TT
d556 1
a556 1
>lwres_buffer_getmem()</TT
d559 1
a559 1
<TT
d561 1
a561 3
><I
>length</I
></TT
d564 1
a564 1
<TT
d566 1
a566 3
><I
>b</I
></TT
d569 1
a569 1
<TT
d571 1
a571 3
><I
>base</I
></TT
@


1.1
log
@Initial revision
@
text
@d23 1
a23 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.61
d213 3
a215 1
The <I
d218 1
d220 3
a222 1
<I
d225 1
d237 3
a239 1
<I
d242 4
a245 1
> and the <I
d248 1
d252 3
a254 1
the byte before the <I
d257 1
d259 3
a261 1
The <I
d264 1
d271 3
a273 1
>The <I
d276 1
d629 1
a629 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 2
a3 3
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001  Internet Software Consortium.
 -
d7 9
a15 8
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
a16 4

<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.2 2004/08/22 23:39:03 marka Exp $ -->

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d23 2
a24 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"></HEAD
d35 2
a36 2
></A
>lwres_buffer</H1
a53 2
><P
></P
d57 2
d205 1
a205 1
<VAR
d207 1
a207 1
>isc_buffer_</VAR
d213 1
a213 3
The <SPAN
CLASS="emphasis"
><I
a215 1
></SPAN
d217 1
a217 3
<SPAN
CLASS="emphasis"
><I
a219 1
></SPAN
d231 1
a231 3
<SPAN
CLASS="emphasis"
><I
d234 1
a234 4
></SPAN
> and the <SPAN
CLASS="emphasis"
><I
a236 1
></SPAN
d240 1
a240 3
the byte before the <SPAN
CLASS="emphasis"
><I
a242 1
></SPAN
d244 1
a244 3
The <SPAN
CLASS="emphasis"
><I
a246 1
></SPAN
d253 1
a253 3
>The <SPAN
CLASS="emphasis"
><I
a255 1
></SPAN
d287 1
a287 1
><CODE
d289 1
a289 1
>lwres_buffer_init()</CODE
d296 1
a296 1
<VAR
d298 3
a300 1
>*b</VAR
d303 1
a303 1
<VAR
d305 3
a307 1
>length</VAR
d310 1
a310 1
<VAR
d312 3
a314 1
>base.</VAR
d317 1
a317 1
><CODE
d319 1
a319 1
>lwres_buffer_invalidate()</CODE
d322 1
a322 1
<VAR
d324 3
a326 1
>*b</VAR
d332 1
a332 1
<CODE
d334 1
a334 1
>lwres_buffer_add()</CODE
d337 1
a337 1
<CODE
d339 1
a339 1
>lwres_buffer_subtract()</CODE
d343 1
a343 1
<VAR
d345 3
a347 1
>*b</VAR
d350 1
a350 1
<VAR
d352 3
a354 1
>n</VAR
d357 1
a357 1
<CODE
d359 1
a359 1
>lwres_buffer_add()</CODE
d362 1
a362 1
<CODE
d364 1
a364 1
>lwres_buffer_subtract()</CODE
d369 1
a369 1
<CODE
d371 3
a373 1
>used</CODE
d377 1
a377 1
<CODE
d379 1
a379 1
>lwres_buffer_clear()</CODE
d382 1
a382 1
<CODE
d384 3
a386 1
>used</CODE
d388 1
a388 1
<CODE
d390 3
a392 1
>current</CODE
d395 1
a395 1
<CODE
d397 3
a399 1
>active</CODE
d403 1
a403 1
><CODE
d405 1
a405 1
>lwres_buffer_first</CODE
d408 1
a408 1
<VAR
d410 3
a412 1
>*p</VAR
d415 1
a415 1
<CODE
d417 3
a419 1
>current</CODE
d423 1
a423 1
><CODE
d425 1
a425 1
>lwres_buffer_forward()</CODE
d428 1
a428 1
<VAR
d430 3
a432 1
>*b</VAR
d435 1
a435 1
<VAR
d437 3
a439 1
>n</VAR
d443 1
a443 1
<CODE
d445 1
a445 1
>lwres_buffer_back()</CODE
d448 1
a448 1
<VAR
d450 3
a452 1
>b</VAR
d455 1
a455 1
<VAR
d457 3
a459 1
>n</VAR
d463 1
a463 1
><CODE
d465 1
a465 1
>lwres_buffer_getuint8()</CODE
d468 1
a468 1
<VAR
d470 3
a472 1
>*b</VAR
d475 1
a475 1
<CODE
d477 1
a477 1
>lwres_buffer_putuint8()</CODE
d480 1
a480 1
<VAR
d482 3
a484 1
>val</VAR
d487 1
a487 1
<VAR
d489 3
a491 1
>*b</VAR
d494 1
a494 1
><CODE
d496 1
a496 1
>lwres_buffer_getuint16()</CODE
d499 1
a499 1
<CODE
d501 1
a501 1
>lwres_buffer_getuint32()</CODE
d504 1
a504 1
<CODE
d506 1
a506 1
>lwres_buffer_putuint8()</CODE
d510 1
a510 1
<VAR
d512 3
a514 1
>b</VAR
d517 1
a517 1
<CODE
d519 1
a519 1
>lwres_buffer_putuint16()</CODE
d522 1
a522 1
<CODE
d524 1
a524 1
>lwres_buffer_putuint32()</CODE
d527 1
a527 1
<VAR
d529 3
a531 1
>val</VAR
d534 1
a534 1
<VAR
d536 3
a538 1
>b</VAR
d544 1
a544 1
<CODE
d546 1
a546 1
>lwres_buffer_getmem()</CODE
d549 1
a549 1
<CODE
d551 1
a551 1
>lwres_buffer_putmem()</CODE
d554 1
a554 1
<CODE
d556 1
a556 1
>lwres_buffer_putmem()</CODE
d559 1
a559 1
<VAR
d561 3
a563 1
>length</VAR
d566 1
a566 1
<VAR
d568 3
a570 1
>base</VAR
d573 1
a573 1
<VAR
d575 3
a577 1
>b</VAR
d580 1
a580 1
<CODE
d582 1
a582 1
>lwres_buffer_getmem()</CODE
d585 1
a585 1
<VAR
d587 3
a589 1
>length</VAR
d592 1
a592 1
<VAR
d594 3
a596 1
>b</VAR
d599 1
a599 1
<VAR
d601 3
a603 1
>base</VAR
d608 1
a608 1
>
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 3
a4 3
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001 Internet Software Consortium.
 - 
d8 1
a8 1
 - 
d11 1
a11 1
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
d17 189
a205 238
<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.8 2005/10/13 02:33:55 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>lwres_buffer</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="refentry" lang="en">
<a name="id2463721"></a><div class="titlepage"></div>
<div class="refnamediv">
<h2>Name</h2>
<p>lwres_buffer_init, lwres_buffer_invalidate, lwres_buffer_add, lwres_buffer_subtract, lwres_buffer_clear, lwres_buffer_first, lwres_buffer_forward, lwres_buffer_back, lwres_buffer_getuint8, lwres_buffer_putuint8, lwres_buffer_getuint16, lwres_buffer_putuint16, lwres_buffer_getuint32, lwres_buffer_putuint32, lwres_buffer_putmem, lwres_buffer_getmem &#8212; lightweight resolver buffer management</p>
</div>
<div class="refsynopsisdiv">
<h2>Synopsis</h2>
<div class="funcsynopsis">
<pre class="funcsynopsisinfo">
#include &lt;lwres/lwbuffer.h&gt;
</pre>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_init</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_invalidate</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_add</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_subtract</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_clear</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_first</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_forward</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_back</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint8_t
<b class="fsfunc">lwres_buffer_getuint8</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint8</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint16_t
<b class="fsfunc">lwres_buffer_getuint16</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint16</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
<td><code class="funcdef">
lwres_uint32_t
<b class="fsfunc">lwres_buffer_getuint32</b>(</code></td>
<td> </td>
<td>
<code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putuint32</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_putmem</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0">
<tr>
<td><code class="funcdef">
void
<b class="fsfunc">lwres_buffer_getmem</b>(</code></td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
</div>
</div>
<div class="refsect1" lang="en">
<a name="id2526109"></a><h2>DESCRIPTION</h2>
<p>
These functions provide bounds checked access to a region of memory
d208 7
a214 5
<code class="literal">isc_buffer_</code>
functions in the ISC library.
</p>
<p>
A buffer is a region of memory, together with a set of related
d216 14
a229 2
The <span class="emphasis"><em>used region</em></span> and the
<span class="emphasis"><em>available</em></span> region are disjoint, and
d237 16
a252 5
Initially, the used region is empty.
</p>
<p>
The used region is further subdivided into two disjoint regions: the
<span class="emphasis"><em>consumed region</em></span> and the <span class="emphasis"><em>remaining region</em></span>.
d255 14
a268 2
the byte before the <span class="emphasis"><em>current</em></span> offset (if any).
The <span class="emphasis"><em>remaining</em></span> region the current pointer to the end of the used
d272 9
a280 4
Initially, the consumed region is empty.
</p>
<p>
The <span class="emphasis"><em>active region</em></span> is an (optional) subregion of the remaining
d286 5
a290 6
the active region will also be empty.
</p>
<p>
</p>
<pre class="programlisting">
 
d308 7
a314 6
  b-c == optional active region.
</pre>
<p>
</p>
<p>
<code class="function">lwres_buffer_init()</code>
d316 8
a323 2
<span class="type">lwres_buffer_t</span>
<em class="parameter"><code>*b</code></em>
d325 4
a328 1
<em class="parameter"><code>length</code></em>
d330 9
a338 4
<em class="parameter"><code>base.</code></em>
</p>
<p>
<code class="function">lwres_buffer_invalidate()</code>
d340 4
a343 1
<em class="parameter"><code>*b</code></em>
d345 7
a351 5
but makes it possible to catch its possible accidental use.
</p>
<p>
The functions
<code class="function">lwres_buffer_add()</code>
d353 4
a356 1
<code class="function">lwres_buffer_subtract()</code>
d359 4
a362 1
<em class="parameter"><code>*b</code></em>
d364 4
a367 1
<em class="parameter"><code>n</code></em>
d369 4
a372 1
<code class="function">lwres_buffer_add()</code>
d374 4
a377 1
<code class="function">lwres_buffer_subtract()</code>
d381 10
a390 5
<em class="structfield"><code>used</code></em>.
</p>
<p>
A buffer is re-initialised by
<code class="function">lwres_buffer_clear()</code>.
d392 8
a399 2
<em class="structfield"><code>used</code></em> ,
<em class="structfield"><code>current</code></em>
d401 10
a410 5
<em class="structfield"><code>active</code></em>
to zero.
</p>
<p>
<code class="function">lwres_buffer_first</code>
d412 4
a415 1
<em class="parameter"><code>*p</code></em>
d417 10
a426 5
<em class="structfield"><code>current</code></em>
to zero (the start of the buffer).
</p>
<p>
<code class="function">lwres_buffer_forward()</code>
d428 4
a431 1
<em class="parameter"><code>*b</code></em>
d433 4
a436 1
<em class="parameter"><code>n</code></em>
d439 4
a442 1
<code class="function">lwres_buffer_back()</code>
d444 4
a447 1
<em class="parameter"><code>b</code></em>'s
d449 10
a458 5
<em class="parameter"><code>n</code></em>
bytes and checks for underflow.
</p>
<p>
<code class="function">lwres_buffer_getuint8()</code>
d460 4
a463 1
<em class="parameter"><code>*b</code></em>
d465 4
a468 1
<code class="function">lwres_buffer_putuint8()</code>
d470 4
a473 1
<em class="parameter"><code>val</code></em>
d475 9
a483 4
<em class="parameter"><code>*b</code></em>.
</p>
<p>
<code class="function">lwres_buffer_getuint16()</code>
d485 4
a488 1
<code class="function">lwres_buffer_getuint32()</code>
d490 4
a493 1
<code class="function">lwres_buffer_putuint8()</code>
d496 4
a499 1
<em class="parameter"><code>b</code></em>.
d501 4
a504 1
<code class="function">lwres_buffer_putuint16()</code>
d506 4
a509 1
<code class="function">lwres_buffer_putuint32()</code>
d511 4
a514 1
<em class="parameter"><code>val</code></em>
d516 7
a522 5
<em class="parameter"><code>b</code></em>,
in network byte order.
</p>
<p>
Arbitrary amounts of data are read or written from a lightweight
d524 4
a527 1
<code class="function">lwres_buffer_getmem()</code>
d529 4
a532 1
<code class="function">lwres_buffer_putmem()</code>
d534 4
a537 1
<code class="function">lwres_buffer_putmem()</code>
d539 4
a542 1
<em class="parameter"><code>length</code></em>
d544 4
a547 1
<em class="parameter"><code>base</code></em>
d549 4
a552 1
<em class="parameter"><code>b</code></em>.
d554 4
a557 1
<code class="function">lwres_buffer_getmem()</code>
d559 4
a562 1
<em class="parameter"><code>length</code></em>
d564 4
a567 1
<em class="parameter"><code>b</code></em>
d569 8
a576 5
<em class="parameter"><code>base</code></em>.
</p>
</div>
</div></body>
</html>
@


1.1.1.4
log
@ISC BIND release 9.3.3
@
text
@d17 1
a17 1
<!-- $ISC: lwres_buffer.html,v 1.4.2.1.4.10 2006/06/29 13:02:31 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d25 1
a25 1
<a name="id2482688"></a><div class="titlepage"></div>
a51 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d56 1
a56 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d63 1
a63 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a74 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a89 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d94 1
a94 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d101 2
a102 10
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d109 1
a109 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a120 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a135 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d140 1
a140 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d147 1
a147 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a158 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d163 1
a163 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d170 1
a170 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a181 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d186 1
a186 2
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em">
<tr>
d193 1
a193 8
</tr>
<tr>
<td> </td>
<td> </td>
<td>
<code>)</code>;</td>
</tr>
</table>
a204 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a224 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
a244 5
<td>, </td>
</tr>
<tr>
<td> </td>
<td> </td>
d252 1
a252 1
<a name="id2549674"></a><h2>DESCRIPTION</h2>
@


1.1.1.5
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005, 2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: lwres_buffer.html,v 1.5.18.16 2007/01/30 00:23:45 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d25 1
a25 1
<a name="id2476275"></a><div class="titlepage"></div>
d41 7
a47 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d51 2
a52 3
<td>void * </td>
<td>
<var class="pdparam">base</var>, </td>
d56 1
a56 1
<td>unsigned int  </td>
d58 1
a58 1
<var class="pdparam">length</var><code>)</code>;</td>
d61 2
a62 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d66 7
a72 1
<td>lwres_buffer_t * </td>
d74 3
a76 2
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
d82 7
a88 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d92 1
a92 1
<td>unsigned int  </td>
d94 1
a94 1
<var class="pdparam">n</var><code>)</code>;</td>
d102 7
a108 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d112 1
a112 1
<td>unsigned int  </td>
d114 1
a114 1
<var class="pdparam">n</var><code>)</code>;</td>
d117 2
a118 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d122 1
a122 1
<td>lwres_buffer_t * </td>
d124 11
a134 3
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d138 1
a138 1
<td>lwres_buffer_t * </td>
d140 9
a148 2
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
d154 7
a160 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d164 1
a164 1
<td>unsigned int  </td>
d166 1
a166 1
<var class="pdparam">n</var><code>)</code>;</td>
d174 7
a180 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d184 1
a184 1
<td>unsigned int  </td>
d186 1
a186 1
<var class="pdparam">n</var><code>)</code>;</td>
d189 2
a190 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d194 1
a194 1
<td>lwres_buffer_t * </td>
d196 9
a204 2
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
d210 7
a216 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d220 1
a220 1
<td>lwres_uint8_t  </td>
d222 1
a222 1
<var class="pdparam">val</var><code>)</code>;</td>
d225 2
a226 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d230 1
a230 1
<td>lwres_buffer_t * </td>
d232 9
a240 2
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
d246 7
a252 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d256 1
a256 1
<td>lwres_uint16_t  </td>
d258 1
a258 1
<var class="pdparam">val</var><code>)</code>;</td>
d261 2
a262 1
<table border="0" summary="Function synopsis" cellspacing="0" cellpadding="0" style="padding-bottom: 1em"><tr>
d266 1
a266 1
<td>lwres_buffer_t * </td>
d268 9
a276 2
<var class="pdparam">b</var><code>)</code>;</td>
</tr></table>
d282 7
a288 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d292 1
a292 1
<td>lwres_uint32_t  </td>
d294 1
a294 1
<var class="pdparam">val</var><code>)</code>;</td>
d302 7
a308 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d312 2
a313 3
<td>const unsigned char * </td>
<td>
<var class="pdparam">base</var>, </td>
d317 1
a317 1
<td>unsigned int  </td>
d319 1
a319 1
<var class="pdparam">length</var><code>)</code>;</td>
d327 7
a333 3
<td>lwres_buffer_t * </td>
<td>
<var class="pdparam">b</var>, </td>
d337 2
a338 3
<td>unsigned char * </td>
<td>
<var class="pdparam">base</var>, </td>
d342 1
a342 1
<td>unsigned int  </td>
d344 1
a344 1
<var class="pdparam">length</var><code>)</code>;</td>
d350 34
a383 1
<a name="id2543892"></a><h2>DESCRIPTION</h2>
d385 10
a394 43
      These functions provide bounds checked access to a region of memory
      where data is being read or written.
      They are based on, and similar to, the
      <code class="literal">isc_buffer_</code>
      functions in the ISC library.
    </p>
<p>
      A buffer is a region of memory, together with a set of related
      subregions.
      The <span class="emphasis"><em>used region</em></span> and the
      <span class="emphasis"><em>available</em></span> region are disjoint, and
      their union is the buffer's region.
      The used region extends from the beginning of the buffer region to the
      last used byte.
      The available region extends from one byte greater than the last used
      byte to the end of the  buffer's region.
      The size of the used region can be changed using various
      buffer commands.
      Initially, the used region is empty.
    </p>
<p>
      The used region is further subdivided into two disjoint regions: the
      <span class="emphasis"><em>consumed region</em></span> and the <span class="emphasis"><em>remaining region</em></span>.
      The union of these two regions is the used region.
      The consumed region extends from the beginning of the used region to
      the byte before the <span class="emphasis"><em>current</em></span> offset (if any).
      The <span class="emphasis"><em>remaining</em></span> region the current pointer to the end
      of the used
      region.
      The size of the consumed region can be changed using various
      buffer commands.
      Initially, the consumed region is empty.
    </p>
<p>
      The <span class="emphasis"><em>active region</em></span> is an (optional) subregion of the
      remaining
      region.
      It extends from the current offset to an offset in the
      remaining region.
      Initially, the active region is empty.
      If the current offset advances beyond the chosen offset,
      the active region will also be empty.
    </p>
d396 1
d403 1
a403 4
      </pre>
<p>
    </p>
<pre class="programlisting">
d409 1
a409 4
      </pre>
<p>
    </p>
<pre class="programlisting">
d417 123
a539 116
    </p>
<p><code class="function">lwres_buffer_init()</code>
      initializes the
      <span class="type">lwres_buffer_t</span>
      <em class="parameter"><code>*b</code></em>
      and assocates it with the memory region of size
      <em class="parameter"><code>length</code></em>
      bytes starting at location
      <em class="parameter"><code>base.</code></em>
    </p>
<p><code class="function">lwres_buffer_invalidate()</code>
      marks the buffer <em class="parameter"><code>*b</code></em>
      as invalid.  Invalidating a buffer after use is not required,
      but makes it possible to catch its possible accidental use.
    </p>
<p>
      The functions
      <code class="function">lwres_buffer_add()</code>
      and
      <code class="function">lwres_buffer_subtract()</code>
      respectively increase and decrease the used space in
      buffer
      <em class="parameter"><code>*b</code></em>
      by
      <em class="parameter"><code>n</code></em>
      bytes.
      <code class="function">lwres_buffer_add()</code>
      checks for buffer overflow and
      <code class="function">lwres_buffer_subtract()</code>
      checks for underflow.
      These functions do not allocate or deallocate memory.
      They just change the value of
      <em class="structfield"><code>used</code></em>.
    </p>
<p>
      A buffer is re-initialised by
      <code class="function">lwres_buffer_clear()</code>.
      The function sets
      <em class="structfield"><code>used</code></em>,
      <em class="structfield"><code>current</code></em>
      and
      <em class="structfield"><code>active</code></em>
      to zero.
    </p>
<p><code class="function">lwres_buffer_first</code>
      makes the consumed region of buffer
      <em class="parameter"><code>*p</code></em>
      empty by setting
      <em class="structfield"><code>current</code></em>
      to zero (the start of the buffer).
    </p>
<p><code class="function">lwres_buffer_forward()</code>
      increases the consumed region of buffer
      <em class="parameter"><code>*b</code></em>
      by
      <em class="parameter"><code>n</code></em>
      bytes, checking for overflow.
      Similarly,
      <code class="function">lwres_buffer_back()</code>
      decreases buffer
      <em class="parameter"><code>b</code></em>'s
      consumed region by
      <em class="parameter"><code>n</code></em>
      bytes and checks for underflow.
    </p>
<p><code class="function">lwres_buffer_getuint8()</code>
      reads an unsigned 8-bit integer from
      <em class="parameter"><code>*b</code></em>
      and returns it.
      <code class="function">lwres_buffer_putuint8()</code>
      writes the unsigned 8-bit integer
      <em class="parameter"><code>val</code></em>
      to buffer
      <em class="parameter"><code>*b</code></em>.
    </p>
<p><code class="function">lwres_buffer_getuint16()</code>
      and
      <code class="function">lwres_buffer_getuint32()</code>
      are identical to
      <code class="function">lwres_buffer_putuint8()</code>
      except that they respectively read an unsigned 16-bit or 32-bit integer
      in network byte order from
      <em class="parameter"><code>b</code></em>.
      Similarly,
      <code class="function">lwres_buffer_putuint16()</code>
      and
      <code class="function">lwres_buffer_putuint32()</code>
      writes the unsigned 16-bit or 32-bit integer
      <em class="parameter"><code>val</code></em>
      to buffer
      <em class="parameter"><code>b</code></em>,
      in network byte order.
    </p>
<p>
      Arbitrary amounts of data are read or written from a lightweight
      resolver buffer with
      <code class="function">lwres_buffer_getmem()</code>
      and
      <code class="function">lwres_buffer_putmem()</code>
      respectively.
      <code class="function">lwres_buffer_putmem()</code>
      copies
      <em class="parameter"><code>length</code></em>
      bytes of memory at
      <em class="parameter"><code>base</code></em>
      to
      <em class="parameter"><code>b</code></em>.
      Conversely,
      <code class="function">lwres_buffer_getmem()</code>
      copies
      <em class="parameter"><code>length</code></em>
      bytes of memory from
      <em class="parameter"><code>b</code></em>
      to
      <em class="parameter"><code>base</code></em>.
    </p>
@


