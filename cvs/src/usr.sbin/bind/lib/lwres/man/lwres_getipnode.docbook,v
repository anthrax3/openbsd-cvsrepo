head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2007.12.09.13.39.45;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.14.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.33;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.51;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.06;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.33;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.59;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
<!--
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and/or distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_getipnode.docbook,v 1.6.18.6 2007/08/28 07:20:06 tbox Exp $ -->
<refentry>

  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_getipnode</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <year>2007</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>

  <refnamediv>
    <refname>lwres_getipnodebyname</refname>
    <refname>lwres_getipnodebyaddr</refname>
    <refname>lwres_freehostent</refname>
    <refpurpose>lightweight resolver nodename / address translation API</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
<funcsynopsisinfo>#include &lt;lwres/netdb.h&gt;</funcsynopsisinfo>
<funcprototype>
        <funcdef>
struct hostent *
<function>lwres_getipnodebyname</function></funcdef>
        <paramdef>const char *<parameter>name</parameter></paramdef>
        <paramdef>int <parameter>af</parameter></paramdef>
        <paramdef>int <parameter>flags</parameter></paramdef>
        <paramdef>int *<parameter>error_num</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
struct hostent *
<function>lwres_getipnodebyaddr</function></funcdef>
        <paramdef>const void *<parameter>src</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        <paramdef>int <parameter>af</parameter></paramdef>
        <paramdef>int *<parameter>error_num</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
void
<function>lwres_freehostent</function></funcdef>
        <paramdef>struct hostent *<parameter>he</parameter></paramdef>
      </funcprototype>
</funcsynopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>DESCRIPTION</title>

    <para>
      These functions perform thread safe, protocol independent
      nodename-to-address and address-to-nodename
      translation as defined in RFC2553.
    </para>

    <para>
      They use a
      <type>struct hostent</type>
      which is defined in
      <filename>namedb.h</filename>:
    </para>
    <para><programlisting>
struct  hostent {
        char    *h_name;        /* official name of host */
        char    **h_aliases;    /* alias list */
        int     h_addrtype;     /* host address type */
        int     h_length;       /* length of address */
        char    **h_addr_list;  /* list of addresses from name server */
};
#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
</programlisting>
    </para>

    <para>
      The members of this structure are:
      <variablelist>
        <varlistentry>
          <term><constant>h_name</constant></term>
          <listitem>
            <para>
              The official (canonical) name of the host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_aliases</constant></term>
          <listitem>
            <para>
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addrtype</constant></term>
          <listitem>
            <para>
              The type of address being returned - usually
              <type>PF_INET</type>
              or
              <type>PF_INET6</type>.

            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_length</constant></term>
          <listitem>
            <para>
              The length of the address in bytes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addr_list</constant></term>
          <listitem>
            <para>
              A
              <type>NULL</type>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para><function>lwres_getipnodebyname()</function>
      looks up addresses of protocol family <parameter>af</parameter>
      for the hostname <parameter>name</parameter>.  The
      <parameter>flags</parameter> parameter contains ORed flag bits
      to specify the types of addresses that are searched for, and the
      types of addresses that are returned.  The flag bits are:

      <variablelist>
        <varlistentry>
          <term><constant>AI_V4MAPPED</constant></term>
          <listitem>
            <para>
              This is used with an
              <parameter>af</parameter>
              of AF_INET6, and causes IPv4 addresses to be returned as
              IPv4-mapped
              IPv6 addresses.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_ALL</constant></term>
          <listitem>
            <para>
              This is used with an
              <parameter>af</parameter>
              of AF_INET6, and causes all known addresses (IPv6 and IPv4) to
              be returned.
              If AI_V4MAPPED is also set, the IPv4 addresses are return as
              mapped
              IPv6 addresses.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_ADDRCONFIG</constant></term>
          <listitem>
            <para>
              Only return an IPv6 or IPv4 address if here is an active network
              interface of that type.  This is not currently implemented
              in the BIND 9 lightweight resolver, and the flag is ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_DEFAULT</constant></term>
          <listitem>
            <para>
              This default sets the
              <constant>AI_V4MAPPED</constant>
              and
              <constant>AI_ADDRCONFIG</constant>
              flag bits.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para><function>lwres_getipnodebyaddr()</function>
      performs a reverse lookup of address <parameter>src</parameter>
      which is <parameter>len</parameter> bytes long.
      <parameter>af</parameter> denotes the protocol family, typically
      <type>PF_INET</type> or <type>PF_INET6</type>.
    </para>
    <para><function>lwres_freehostent()</function>
      releases all the memory associated with the <type>struct
      hostent</type> pointer <parameter>he</parameter>.  Any memory
      allocated for the <constant>h_name</constant>,
      <constant>h_addr_list</constant> and
      <constant>h_aliases</constant> is freed, as is the memory for
      the <type>hostent</type> structure itself.
    </para>
  </refsect1>
  <refsect1>
    <title>RETURN VALUES</title>
    <para>
      If an error occurs,
      <function>lwres_getipnodebyname()</function>
      and
      <function>lwres_getipnodebyaddr()</function>
      set
      <parameter>*error_num</parameter>
      to an appropriate error code and the function returns a
      <type>NULL</type>
      pointer.
      The error codes and their meanings are defined in
      <filename>&lt;lwres/netdb.h&gt;</filename>:
      <variablelist>
        <varlistentry>
          <term><constant>HOST_NOT_FOUND</constant></term>
          <listitem>
            <para>
              No such host is known.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_ADDRESS</constant></term>
          <listitem>
            <para>
              The server recognised the request and the name but no address is
              available.  Another type of request to the name server for the
              domain might return an answer.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>TRY_AGAIN</constant></term>
          <listitem>
            <para>
              A temporary and possibly transient error occurred, such as a
              failure of a server to respond.  The request may succeed if
              retried.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_RECOVERY</constant></term>
          <listitem>
            <para>
              An unexpected failure occurred, and retrying the request
              is pointless.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para><citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      translates these error codes to suitable error messages.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>RFC2553</refentrytitle>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_gethostent</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getaddrinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getnameinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


1.5
log
@resolve conflicts
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and distribute this software for any
d21 1
a21 2
<!-- $ISC: lwres_getipnode.docbook,v 1.4.2.2.4.3 2005/05/12 21:36:14 sra Exp $ -->

d24 9
a32 9
<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
<refentrytitle>lwres_getipnode</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>
d38 1
d49 8
a56 8
<refnamediv>
<refname>lwres_getipnodebyname</refname>
<refname>lwres_getipnodebyaddr</refname>
<refname>lwres_freehostent</refname>
<refpurpose>lightweight resolver nodename / address translation API</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
d59 1
a59 1
<funcdef>
d62 5
a66 5
<paramdef>const char *name</paramdef>
<paramdef>int af</paramdef>
<paramdef>int flags</paramdef>
<paramdef>int *error_num</paramdef>
</funcprototype>
d68 1
a68 1
<funcdef>
d71 5
a75 5
<paramdef>const void *src</paramdef>
<paramdef>size_t len</paramdef>
<paramdef>int af</paramdef>
<paramdef>int *error_num</paramdef>
</funcprototype>
d77 1
a77 1
<funcdef>
d80 2
a81 2
<paramdef>struct hostent *he</paramdef>
</funcprototype>
d83 1
a83 1
</refsynopsisdiv>
d85 2
a86 2
<refsect1>
<title>DESCRIPTION</title>
d88 13
a100 12
<para>
These functions perform thread safe, protocol independent
nodename-to-address and address-to-nodename 
translation as defined in RFC2553.
</para>

<para>
They use a
<type>struct hostent</type>
which is defined in
<filename>namedb.h</filename>:
<programlisting>
d110 1
a110 1
</para>
d112 220
a331 213
<para>
The members of this structure are:
<variablelist>
<varlistentry><term><constant>h_name</constant></term>
<listitem>
<para>
The official (canonical) name of the host.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_aliases</constant></term>
<listitem>
<para>
A NULL-terminated array of alternate names (nicknames) for the host.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_addrtype</constant></term>
<listitem>
<para>
The type of address being returned - usually
<type>PF_INET</type>
or
<type>PF_INET6</type>.

</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_length</constant></term>
<listitem>
<para>
The length of the address in bytes.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>h_addr_list</constant></term>
<listitem>
<para>
A
<type>NULL</type>
terminated array of network addresses for the host.
Host addresses are returned in network byte order.
</para>
</listitem></varlistentry>
</variablelist>
</para>
<para>
<function>lwres_getipnodebyname()</function>
looks up addresses of protocol family
<parameter>af</parameter>

for the hostname
<parameter>name</parameter>.

The
<parameter>flags</parameter>
parameter contains ORed flag bits to 
specify the types of addresses that are searched
for, and the types of addresses that are returned. 
The flag bits are:
<variablelist>
<varlistentry><term><constant>AI_V4MAPPED</constant></term>
<listitem>
<para>
This is used with an
<parameter>af</parameter>
of AF_INET6, and causes IPv4 addresses to be returned as IPv4-mapped
IPv6 addresses.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>AI_ALL</constant></term>
<listitem>
<para>
This is used with an
<parameter>af</parameter>
of AF_INET6, and causes all known addresses (IPv6 and IPv4) to be returned.
If AI_V4MAPPED is also set, the IPv4 addresses are return as mapped
IPv6 addresses.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>AI_ADDRCONFIG</constant></term>
<listitem>
<para>
Only return an IPv6 or IPv4 address if here is an active network
interface of that type.  This is not currently implemented
in the BIND 9 lightweight resolver, and the flag is ignored.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>AI_DEFAULT</constant></term>
<listitem>
<para>
This default sets the
<constant>AI_V4MAPPED</constant>
and
<constant>AI_ADDRCONFIG</constant>
flag bits.
</para>
</listitem></varlistentry>
</variablelist>
</para>
<para>
<function>lwres_getipnodebyaddr()</function>
performs a reverse lookup
of address
<parameter>src</parameter>
which is
<parameter>len</parameter>
bytes long.
<parameter>af</parameter>
denotes the protocol family, typically
<type>PF_INET</type>
or
<type>PF_INET6</type>.

</para>
<para>
<function>lwres_freehostent()</function>
releases all the memory associated with
the
<type>struct hostent</type>
pointer
<parameter>he</parameter>.

Any memory allocated for the
<constant>h_name</constant>,

<constant>h_addr_list</constant>
and
<constant>h_aliases</constant>
is freed, as is the memory for the
<type>hostent</type>
structure itself.
</para>
</refsect1>
<refsect1>
<title>RETURN VALUES</title>
<para>
If an error occurs,
<function>lwres_getipnodebyname()</function>
and
<function>lwres_getipnodebyaddr()</function>
set
<parameter>*error_num</parameter>
to an appropriate error code and the function returns a
<type>NULL</type>
pointer.
The error codes and their meanings are defined in
<filename>&lt;lwres/netdb.h&gt;</filename>:
<variablelist>
<varlistentry><term><constant>HOST_NOT_FOUND</constant></term>
<listitem>
<para>
No such host is known.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>NO_ADDRESS</constant></term>
<listitem>
<para>
The server recognised the request and the name but no address is
available.  Another type of request to the name server for the
domain might return an answer.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>TRY_AGAIN</constant></term>
<listitem>
<para>
A temporary and possibly transient error occurred, such as a
failure of a server to respond.  The request may succeed if
retried.
</para>
</listitem></varlistentry>
<varlistentry><term><constant>NO_RECOVERY</constant></term>
<listitem>
<para>
An unexpected failure occurred, and retrying the request
is pointless.
</para>
</listitem></varlistentry>
</variablelist>
</para>
<para>
<citerefentry>
<refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>
translates these error codes to suitable error messages.
</para>
</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>RFC2553</refentrytitle>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_gethostent</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_getaddrinfo</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_getnameinfo</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>.
</para>
</refsect1>
</refentry>
@


1.4
log
@resolve conflicts
@
text
@d1 3
a3 1
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
d5 2
a6 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d21 1
a21 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4.2.2.4.1 2004/03/06 08:15:39 marka Exp $ -->
d34 14
@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d3 1
d10 7
a16 8
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4.2.2 2003/03/06 04:38:26 marka Exp $ -->
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d19 1
a19 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4.118.2 2003/02/17 07:05:11 marka Exp $ -->
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 - Copyright (C) 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4 2001/06/18 22:06:55 gson Exp $ -->
d234 1
a234 1
to an approriate error code and the function returns a
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d3 1
a3 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4.2.2.4.1 2004/03/06 08:15:39 marka Exp $ -->
d234 1
a234 1
to an appropriate error code and the function returns a
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_getipnode.docbook,v 1.4.2.2.4.3 2005/05/12 21:36:14 sra Exp $ -->
a31 14

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_getipnode.docbook,v 1.6.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d25 9
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_getipnode</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d49 8
a56 8
  <refnamediv>
    <refname>lwres_getipnodebyname</refname>
    <refname>lwres_getipnodebyaddr</refname>
    <refname>lwres_freehostent</refname>
    <refpurpose>lightweight resolver nodename / address translation API</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
d59 1
a59 1
        <funcdef>
d62 5
a66 5
        <paramdef>const char *<parameter>name</parameter></paramdef>
        <paramdef>int <parameter>af</parameter></paramdef>
        <paramdef>int <parameter>flags</parameter></paramdef>
        <paramdef>int *<parameter>error_num</parameter></paramdef>
        </funcprototype>
d68 1
a68 1
        <funcdef>
d71 5
a75 5
        <paramdef>const void *<parameter>src</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        <paramdef>int <parameter>af</parameter></paramdef>
        <paramdef>int *<parameter>error_num</parameter></paramdef>
        </funcprototype>
d77 1
a77 1
        <funcdef>
d80 2
a81 2
        <paramdef>struct hostent *<parameter>he</parameter></paramdef>
      </funcprototype>
d83 1
a83 1
  </refsynopsisdiv>
d85 2
a86 2
  <refsect1>
    <title>DESCRIPTION</title>
d88 12
a99 13
    <para>
      These functions perform thread safe, protocol independent
      nodename-to-address and address-to-nodename
      translation as defined in RFC2553.
    </para>

    <para>
      They use a
      <type>struct hostent</type>
      which is defined in
      <filename>namedb.h</filename>:
    </para>
    <para><programlisting>
d109 1
a109 1
    </para>
d111 213
a323 220
    <para>
      The members of this structure are:
      <variablelist>
        <varlistentry>
          <term><constant>h_name</constant></term>
          <listitem>
            <para>
              The official (canonical) name of the host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_aliases</constant></term>
          <listitem>
            <para>
              A NULL-terminated array of alternate names (nicknames) for the
              host.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addrtype</constant></term>
          <listitem>
            <para>
              The type of address being returned - usually
              <type>PF_INET</type>
              or
              <type>PF_INET6</type>.

            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_length</constant></term>
          <listitem>
            <para>
              The length of the address in bytes.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>h_addr_list</constant></term>
          <listitem>
            <para>
              A
              <type>NULL</type>
              terminated array of network addresses for the host.
              Host addresses are returned in network byte order.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para><function>lwres_getipnodebyname()</function>
      looks up addresses of protocol family <parameter>af</parameter>
      for the hostname <parameter>name</parameter>.  The
      <parameter>flags</parameter> parameter contains ORed flag bits
      to specify the types of addresses that are searched for, and the
      types of addresses that are returned.  The flag bits are:

      <variablelist>
        <varlistentry>
          <term><constant>AI_V4MAPPED</constant></term>
          <listitem>
            <para>
              This is used with an
              <parameter>af</parameter>
              of AF_INET6, and causes IPv4 addresses to be returned as
              IPv4-mapped
              IPv6 addresses.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_ALL</constant></term>
          <listitem>
            <para>
              This is used with an
              <parameter>af</parameter>
              of AF_INET6, and causes all known addresses (IPv6 and IPv4) to
              be returned.
              If AI_V4MAPPED is also set, the IPv4 addresses are return as
              mapped
              IPv6 addresses.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_ADDRCONFIG</constant></term>
          <listitem>
            <para>
              Only return an IPv6 or IPv4 address if here is an active network
              interface of that type.  This is not currently implemented
              in the BIND 9 lightweight resolver, and the flag is ignored.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>AI_DEFAULT</constant></term>
          <listitem>
            <para>
              This default sets the
              <constant>AI_V4MAPPED</constant>
              and
              <constant>AI_ADDRCONFIG</constant>
              flag bits.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para><function>lwres_getipnodebyaddr()</function>
      performs a reverse lookup of address <parameter>src</parameter>
      which is <parameter>len</parameter> bytes long.
      <parameter>af</parameter> denotes the protocol family, typically
      <type>PF_INET</type> or <type>PF_INET6</type>.
    </para>
    <para><function>lwres_freehostent()</function>
      releases all the memory associated with the <type>struct
      hostent</type> pointer <parameter>he</parameter>.  Any memory
      allocated for the <constant>h_name</constant>,
      <constant>h_addr_list</constant> and
      <constant>h_aliases</constant> is freed, as is the memory for
      the <type>hostent</type> structure itself.
    </para>
  </refsect1>
  <refsect1>
    <title>RETURN VALUES</title>
    <para>
      If an error occurs,
      <function>lwres_getipnodebyname()</function>
      and
      <function>lwres_getipnodebyaddr()</function>
      set
      <parameter>*error_num</parameter>
      to an appropriate error code and the function returns a
      <type>NULL</type>
      pointer.
      The error codes and their meanings are defined in
      <filename>&lt;lwres/netdb.h&gt;</filename>:
      <variablelist>
        <varlistentry>
          <term><constant>HOST_NOT_FOUND</constant></term>
          <listitem>
            <para>
              No such host is known.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_ADDRESS</constant></term>
          <listitem>
            <para>
              The server recognised the request and the name but no address is
              available.  Another type of request to the name server for the
              domain might return an answer.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>TRY_AGAIN</constant></term>
          <listitem>
            <para>
              A temporary and possibly transient error occurred, such as a
              failure of a server to respond.  The request may succeed if
              retried.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><constant>NO_RECOVERY</constant></term>
          <listitem>
            <para>
              An unexpected failure occurred, and retrying the request
              is pointless.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para><citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      translates these error codes to suitable error messages.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>RFC2553</refentrytitle>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_gethostent</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getaddrinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_getnameinfo</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>lwres_hstrerror</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


