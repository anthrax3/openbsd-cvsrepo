head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.4.0.38
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2003.01.20.21.07.49;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.49;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.03;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.30;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.58;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<!--
 - Copyright (C) 2001  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_buffer.docbook,v 1.3 2001/04/10 21:51:18 bwelling Exp $ -->

<refentry>
<refentryinfo>
<date>Jun 30, 2000</date>
</refentryinfo>

<refmeta>
<refentrytitle>lwres_buffer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>

<refnamediv>
<refname>lwres_buffer_init</refname>
<refname>lwres_buffer_invalidate</refname>
<refname>lwres_buffer_add</refname>
<refname>lwres_buffer_subtract</refname>
<refname>lwres_buffer_clear</refname>
<refname>lwres_buffer_first</refname>
<refname>lwres_buffer_forward</refname>
<refname>lwres_buffer_back</refname>
<refname>lwres_buffer_getuint8</refname>
<refname>lwres_buffer_putuint8</refname>
<refname>lwres_buffer_getuint16</refname>
<refname>lwres_buffer_putuint16</refname>
<refname>lwres_buffer_getuint32</refname>
<refname>lwres_buffer_putuint32</refname>
<refname>lwres_buffer_putmem</refname>
<refname>lwres_buffer_getmem</refname>
<refpurpose>lightweight resolver buffer management</refpurpose>
</refnamediv>

<refsynopsisdiv>

<funcsynopsis>
<funcsynopsisinfo>
#include &lt;lwres/lwbuffer.h&gt;
</funcsynopsisinfo>

<funcprototype>

<funcdef>
void
<function>lwres_buffer_init</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>void *base</paramdef>
<paramdef>unsigned int length</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_invalidate</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>
<funcprototype>
<funcdef>
void
<function>lwres_buffer_add</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>unsigned int n</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_subtract</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>unsigned int n</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_clear</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_first</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_forward</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>unsigned int n</paramdef>
</funcprototype>
<funcprototype>

<funcdef>
void
<function>lwres_buffer_back</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>unsigned int n</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
lwres_uint8_t
<function>lwres_buffer_getuint8</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_putuint8</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_uint8_t val</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
lwres_uint16_t
<function>lwres_buffer_getuint16</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_putuint16</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_uint16_t val</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
lwres_uint32_t
<function>lwres_buffer_getuint32</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_putuint32</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>lwres_uint32_t val</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_putmem</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>const unsigned char *base</paramdef>
<paramdef>unsigned int length</paramdef>
</funcprototype>

<funcprototype>
<funcdef>
void
<function>lwres_buffer_getmem</function></funcdef>
<paramdef>lwres_buffer_t *b</paramdef>
<paramdef>unsigned char *base</paramdef>
<paramdef>unsigned int length</paramdef>
</funcprototype>

</funcsynopsis>
</refsynopsisdiv>

<refsect1>

<title>DESCRIPTION</title>
<para>
These functions provide bounds checked access to a region of memory
where data is being read or written.
They are based on, and similar to, the
<literal>isc_buffer_</literal>
functions in the ISC library.
</para>
<para>
A buffer is a region of memory, together with a set of related
subregions.
The <emphasis>used region</emphasis> and the
<emphasis>available</emphasis> region are disjoint, and
their union is the buffer's region.
The used region extends from the beginning of the buffer region to the
last used byte.
The available region extends from one byte greater than the last used
byte to the end of the  buffer's region.
The size of the used region can be changed using various
buffer commands.
Initially, the used region is empty.
</para>
<para>
The used region is further subdivided into two disjoint regions: the
<emphasis>consumed region</emphasis> and the <emphasis>remaining region</emphasis>.
The union of these two regions is the used region.
The consumed region extends from the beginning of the used region to
the byte before the <emphasis>current</emphasis> offset (if any).
The <emphasis>remaining</emphasis> region the current pointer to the end of the used
region.
The size of the consumed region can be changed using various
buffer commands.
Initially, the consumed region is empty.
</para>
<para>
The <emphasis>active region</emphasis> is an (optional) subregion of the remaining
region.
It extends from the current offset to an offset in the
remaining region.
Initially, the active region is empty.
If the current offset advances beyond the chosen offset,
the active region will also be empty.
</para>
<para>
<programlisting>
 
   /------------entire length---------------\\
   /----- used region -----\\/-- available --\\
   +----------------------------------------+
   | consumed  | remaining |                |
   +----------------------------------------+
   a           b     c     d                e
 
  a == base of buffer.
  b == current pointer.  Can be anywhere between a and d.
  c == active pointer.  Meaningful between b and d.
  d == used pointer.
  e == length of buffer.
 
  a-e == entire length of buffer.
  a-d == used region.
  a-b == consumed region.
  b-d == remaining region.
  b-c == optional active region.
</programlisting>
</para>
<para>
<function>lwres_buffer_init()</function>
initializes the
<type>lwres_buffer_t</type>
<parameter>*b</parameter>
and assocates it with the memory region of size
<parameter>length</parameter>
bytes starting at location
<parameter>base.</parameter>
</para>
<para>
<function>lwres_buffer_invalidate()</function>
marks the buffer
<parameter>*b</parameter>
as invalid.  Invalidating a buffer after use is not required,
but makes it possible to catch its possible accidental use.
</para>
<para>
The functions
<function>lwres_buffer_add()</function>
and
<function>lwres_buffer_subtract()</function>
respectively increase and decrease the used space in
buffer
<parameter>*b</parameter>
by
<parameter>n</parameter>
bytes.
<function>lwres_buffer_add()</function>
checks for buffer overflow and
<function>lwres_buffer_subtract()</function>
checks for underflow.
These functions do not allocate or deallocate memory.
They just change the value of
<structfield>used</structfield>.
</para>
<para>
A buffer is re-initialised by
<function>lwres_buffer_clear()</function>.
The function sets
<structfield>used</structfield> ,
<structfield>current</structfield>
and
<structfield>active</structfield>
to zero.
</para>
<para>
<function>lwres_buffer_first</function>
makes the consumed region of buffer
<parameter>*p</parameter>
empty by setting
<structfield>current</structfield>
to zero (the start of the buffer).
</para>
<para>
<function>lwres_buffer_forward()</function>
increases the consumed region of buffer
<parameter>*b</parameter>
by
<parameter>n</parameter>
bytes, checking for overflow.
Similarly,
<function>lwres_buffer_back()</function>
decreases buffer
<parameter>b</parameter>'s
consumed region by
<parameter>n</parameter>
bytes and checks for underflow.
</para>
<para>
<function>lwres_buffer_getuint8()</function>
reads an unsigned 8-bit integer from
<parameter>*b</parameter>
and returns it.
<function>lwres_buffer_putuint8()</function>
writes the unsigned 8-bit integer
<parameter>val</parameter>
to buffer
<parameter>*b</parameter>.
</para>
<para>
<function>lwres_buffer_getuint16()</function>
and
<function>lwres_buffer_getuint32()</function>
are identical to
<function>lwres_buffer_putuint8()</function>
except that they respectively read an unsigned 16-bit or 32-bit integer 
in network byte order from
<parameter>b</parameter>.
Similarly,
<function>lwres_buffer_putuint16()</function>
and
<function>lwres_buffer_putuint32()</function>
writes the unsigned 16-bit or 32-bit integer
<parameter>val</parameter>
to buffer
<parameter>b</parameter>,
in network byte order.
</para>
<para>
Arbitrary amounts of data are read or written from a lightweight
resolver buffer with
<function>lwres_buffer_getmem()</function>
and
<function>lwres_buffer_putmem()</function>
respectively.
<function>lwres_buffer_putmem()</function>
copies
<parameter>length</parameter>
bytes of memory at
<parameter>base</parameter>
to
<parameter>b</parameter>.
Conversely,
<function>lwres_buffer_getmem()</function>
copies
<parameter>length</parameter>
bytes of memory from
<parameter>b</parameter>
to
<parameter>base</parameter>.
</para>
</refsect1>
</refentry>
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a2 1
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_buffer.docbook,v 1.3.206.1 2004/03/06 08:15:37 marka Exp $ -->
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_buffer.docbook,v 1.3.206.3 2005/05/12 21:36:11 sra Exp $ -->
a30 13

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_buffer.docbook,v 1.4.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d24 9
a32 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_buffer</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a37 1
      <year>2007</year>
d47 19
a65 19
  <refnamediv>
    <refname>lwres_buffer_init</refname>
    <refname>lwres_buffer_invalidate</refname>
    <refname>lwres_buffer_add</refname>
    <refname>lwres_buffer_subtract</refname>
    <refname>lwres_buffer_clear</refname>
    <refname>lwres_buffer_first</refname>
    <refname>lwres_buffer_forward</refname>
    <refname>lwres_buffer_back</refname>
    <refname>lwres_buffer_getuint8</refname>
    <refname>lwres_buffer_putuint8</refname>
    <refname>lwres_buffer_getuint16</refname>
    <refname>lwres_buffer_putuint16</refname>
    <refname>lwres_buffer_getuint32</refname>
    <refname>lwres_buffer_putuint32</refname>
    <refname>lwres_buffer_putmem</refname>
    <refname>lwres_buffer_getmem</refname>
    <refpurpose>lightweight resolver buffer management</refpurpose>
  </refnamediv>
d67 1
a67 1
  <refsynopsisdiv>
d69 1
a69 1
    <funcsynopsis>
d76 1
a76 1
        <funcdef>
d79 4
a82 4
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>void *<parameter>base</parameter></paramdef>
        <paramdef>unsigned int <parameter>length</parameter></paramdef>
        </funcprototype>
d85 1
a85 1
        <funcdef>
d88 2
a89 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d91 1
a91 1
        <funcdef>
d94 3
a96 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>unsigned int <parameter>n</parameter></paramdef>
        </funcprototype>
d99 1
a99 1
        <funcdef>
d102 3
a104 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>unsigned int <parameter>n</parameter></paramdef>
        </funcprototype>
d107 1
a107 1
        <funcdef>
d110 2
a111 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d114 1
a114 1
        <funcdef>
d117 2
a118 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d121 1
a121 1
        <funcdef>
d124 3
a126 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>unsigned int <parameter>n</parameter></paramdef>
        </funcprototype>
d129 1
a129 1
        <funcdef>
d132 3
a134 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>unsigned int <parameter>n</parameter></paramdef>
        </funcprototype>
d137 1
a137 1
        <funcdef>
d140 2
a141 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d144 1
a144 1
        <funcdef>
d147 3
a149 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_uint8_t <parameter>val</parameter></paramdef>
        </funcprototype>
d152 1
a152 1
        <funcdef>
d155 2
a156 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d159 1
a159 1
        <funcdef>
d162 3
a164 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_uint16_t <parameter>val</parameter></paramdef>
        </funcprototype>
d167 1
a167 1
        <funcdef>
d170 2
a171 2
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        </funcprototype>
d174 1
a174 1
        <funcdef>
d177 3
a179 3
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>lwres_uint32_t <parameter>val</parameter></paramdef>
        </funcprototype>
d182 1
a182 1
        <funcdef>
d185 4
a188 4
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>const unsigned char *<parameter>base</parameter></paramdef>
        <paramdef>unsigned int <parameter>length</parameter></paramdef>
        </funcprototype>
d191 1
a191 1
        <funcdef>
d194 4
a197 4
        <paramdef>lwres_buffer_t *<parameter>b</parameter></paramdef>
        <paramdef>unsigned char *<parameter>base</parameter></paramdef>
        <paramdef>unsigned int <parameter>length</parameter></paramdef>
      </funcprototype>
d200 1
a200 1
  </refsynopsisdiv>
d202 1
a202 1
  <refsect1>
d204 46
a249 46
    <title>DESCRIPTION</title>
    <para>
      These functions provide bounds checked access to a region of memory
      where data is being read or written.
      They are based on, and similar to, the
      <literal>isc_buffer_</literal>
      functions in the ISC library.
    </para>
    <para>
      A buffer is a region of memory, together with a set of related
      subregions.
      The <emphasis>used region</emphasis> and the
      <emphasis>available</emphasis> region are disjoint, and
      their union is the buffer's region.
      The used region extends from the beginning of the buffer region to the
      last used byte.
      The available region extends from one byte greater than the last used
      byte to the end of the  buffer's region.
      The size of the used region can be changed using various
      buffer commands.
      Initially, the used region is empty.
    </para>
    <para>
      The used region is further subdivided into two disjoint regions: the
      <emphasis>consumed region</emphasis> and the <emphasis>remaining region</emphasis>.
      The union of these two regions is the used region.
      The consumed region extends from the beginning of the used region to
      the byte before the <emphasis>current</emphasis> offset (if any).
      The <emphasis>remaining</emphasis> region the current pointer to the end
      of the used
      region.
      The size of the consumed region can be changed using various
      buffer commands.
      Initially, the consumed region is empty.
    </para>
    <para>
      The <emphasis>active region</emphasis> is an (optional) subregion of the
      remaining
      region.
      It extends from the current offset to an offset in the
      remaining region.
      Initially, the active region is empty.
      If the current offset advances beyond the chosen offset,
      the active region will also be empty.
    </para>
    <para><programlisting>
d256 1
a256 3
      </programlisting>
    </para>
    <para><programlisting>
d262 1
a262 3
      </programlisting>
    </para>
    <para><programlisting>
d269 125
a393 122
    </para>
    <para><function>lwres_buffer_init()</function>
      initializes the
      <type>lwres_buffer_t</type>
      <parameter>*b</parameter>
      and assocates it with the memory region of size
      <parameter>length</parameter>
      bytes starting at location
      <parameter>base.</parameter>
    </para>
    <para><function>lwres_buffer_invalidate()</function>
      marks the buffer <parameter>*b</parameter>
      as invalid.  Invalidating a buffer after use is not required,
      but makes it possible to catch its possible accidental use.
    </para>
    <para>
      The functions
      <function>lwres_buffer_add()</function>
      and
      <function>lwres_buffer_subtract()</function>
      respectively increase and decrease the used space in
      buffer
      <parameter>*b</parameter>
      by
      <parameter>n</parameter>
      bytes.
      <function>lwres_buffer_add()</function>
      checks for buffer overflow and
      <function>lwres_buffer_subtract()</function>
      checks for underflow.
      These functions do not allocate or deallocate memory.
      They just change the value of
      <structfield>used</structfield>.
    </para>
    <para>
      A buffer is re-initialised by
      <function>lwres_buffer_clear()</function>.
      The function sets
      <structfield>used</structfield>,
      <structfield>current</structfield>
      and
      <structfield>active</structfield>
      to zero.
    </para>
    <para><function>lwres_buffer_first</function>
      makes the consumed region of buffer
      <parameter>*p</parameter>
      empty by setting
      <structfield>current</structfield>
      to zero (the start of the buffer).
    </para>
    <para><function>lwres_buffer_forward()</function>
      increases the consumed region of buffer
      <parameter>*b</parameter>
      by
      <parameter>n</parameter>
      bytes, checking for overflow.
      Similarly,
      <function>lwres_buffer_back()</function>
      decreases buffer
      <parameter>b</parameter>'s
      consumed region by
      <parameter>n</parameter>
      bytes and checks for underflow.
    </para>
    <para><function>lwres_buffer_getuint8()</function>
      reads an unsigned 8-bit integer from
      <parameter>*b</parameter>
      and returns it.
      <function>lwres_buffer_putuint8()</function>
      writes the unsigned 8-bit integer
      <parameter>val</parameter>
      to buffer
      <parameter>*b</parameter>.
    </para>
    <para><function>lwres_buffer_getuint16()</function>
      and
      <function>lwres_buffer_getuint32()</function>
      are identical to
      <function>lwres_buffer_putuint8()</function>
      except that they respectively read an unsigned 16-bit or 32-bit integer
      in network byte order from
      <parameter>b</parameter>.
      Similarly,
      <function>lwres_buffer_putuint16()</function>
      and
      <function>lwres_buffer_putuint32()</function>
      writes the unsigned 16-bit or 32-bit integer
      <parameter>val</parameter>
      to buffer
      <parameter>b</parameter>,
      in network byte order.
    </para>
    <para>
      Arbitrary amounts of data are read or written from a lightweight
      resolver buffer with
      <function>lwres_buffer_getmem()</function>
      and
      <function>lwres_buffer_putmem()</function>
      respectively.
      <function>lwres_buffer_putmem()</function>
      copies
      <parameter>length</parameter>
      bytes of memory at
      <parameter>base</parameter>
      to
      <parameter>b</parameter>.
      Conversely,
      <function>lwres_buffer_getmem()</function>
      copies
      <parameter>length</parameter>
      bytes of memory from
      <parameter>b</parameter>
      to
      <parameter>base</parameter>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


