head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.36
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.32
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.34
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.26
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.28.17.14.08;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.18.14.14.08;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.36.04;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.31;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.33.57;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.5
log
@resolve conflicts
@
text
@<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
<!--
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
 -
 - Permission to use, copy, modify, and/or distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 -
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->

<!-- $ISC: lwres_context.docbook,v 1.5.18.6 2007/08/28 07:20:06 tbox Exp $ -->
<refentry>

  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_context</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <year>2007</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>

  <refnamediv>
    <refname>lwres_context_create</refname>
    <refname>lwres_context_destroy</refname>
    <refname>lwres_context_nextserial</refname>
    <refname>lwres_context_initserial</refname>
    <refname>lwres_context_freemem</refname>
    <refname>lwres_context_allocmem</refname>
    <refname>lwres_context_sendrecv</refname>
    <refpurpose>lightweight resolver context management</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
<funcsynopsisinfo>#include &lt;lwres/lwres.h&gt;</funcsynopsisinfo>
<funcprototype>
        <funcdef>
lwres_result_t
<function>lwres_context_create</function></funcdef>
        <paramdef>lwres_context_t **<parameter>contextp</parameter></paramdef>
        <paramdef>void *<parameter>arg</parameter></paramdef>
        <paramdef>lwres_malloc_t <parameter>malloc_function</parameter></paramdef>
        <paramdef>lwres_free_t <parameter>free_function</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
lwres_result_t
<function>lwres_context_destroy</function></funcdef>
        <paramdef>lwres_context_t **<parameter>contextp</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
void
<function>lwres_context_initserial</function></funcdef>
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_uint32_t <parameter>serial</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
lwres_uint32_t
<function>lwres_context_nextserial</function></funcdef>
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
void
<function>lwres_context_freemem</function></funcdef>
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>void *<parameter>mem</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
void
<function>lwres_context_allocmem</function></funcdef>
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        </funcprototype>
<funcprototype>
        <funcdef>
void *
<function>lwres_context_sendrecv</function></funcdef>
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>void *<parameter>sendbase</parameter></paramdef>
        <paramdef>int <parameter>sendlen</parameter></paramdef>
        <paramdef>void *<parameter>recvbase</parameter></paramdef>
        <paramdef>int <parameter>recvlen</parameter></paramdef>
        <paramdef>int *<parameter>recvd_len</parameter></paramdef>
      </funcprototype>
</funcsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para><function>lwres_context_create()</function>
      creates a <type>lwres_context_t</type> structure for use in
      lightweight resolver operations.  It holds a socket and other
      data needed for communicating with a resolver daemon.  The new
      <type>lwres_context_t</type> is returned through
      <parameter>contextp</parameter>, a pointer to a
      <type>lwres_context_t</type> pointer.  This
      <type>lwres_context_t</type> pointer must initially be NULL, and
      is modified to point to the newly created
      <type>lwres_context_t</type>.
    </para>
    <para>
      When the lightweight resolver needs to perform dynamic memory
      allocation, it will call
      <parameter>malloc_function</parameter>
      to allocate memory and
      <parameter>free_function</parameter>
      to free it.  If
      <parameter>malloc_function</parameter>
      and
      <parameter>free_function</parameter>
      are NULL, memory is allocated using
      <citerefentry>
        <refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
      and
      <citerefentry>
        <refentrytitle>free</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.

      It is not permitted to have a NULL
      <parameter>malloc_function</parameter> and a non-NULL
      <parameter>free_function</parameter> or vice versa.
      <parameter>arg</parameter> is passed as the first parameter to
      the memory allocation functions.  If
      <parameter>malloc_function</parameter> and
      <parameter>free_function</parameter> are NULL,
      <parameter>arg</parameter> is unused and should be passed as
      NULL.
    </para>

    <para>
      Once memory for the structure has been allocated,
      it is initialized using
      <citerefentry>
        <refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      and returned via <parameter>*contextp</parameter>.
    </para>

    <para><function>lwres_context_destroy()</function>
      destroys a <type>lwres_context_t</type>, closing its socket.
      <parameter>contextp</parameter> is a pointer to a pointer to the
      context that is to be destroyed.  The pointer will be set to
      NULL when the context has been destroyed.
    </para>

    <para>
      The context holds a serial number that is used to identify
      resolver request packets and associate responses with the
      corresponding requests.  This serial number is controlled using
      <function>lwres_context_initserial()</function> and
      <function>lwres_context_nextserial()</function>.
      <function>lwres_context_initserial()</function> sets the serial
      number for context <parameter>*ctx</parameter> to
      <parameter>serial</parameter>.
      <function>lwres_context_nextserial()</function> increments the
      serial number and returns the previous value.
    </para>

    <para>
      Memory for a lightweight resolver context is allocated and freed
      using <function>lwres_context_allocmem()</function> and
      <function>lwres_context_freemem()</function>.  These use
      whatever allocations were defined when the context was created
      with <function>lwres_context_create()</function>.
      <function>lwres_context_allocmem()</function> allocates
      <parameter>len</parameter> bytes of memory and if successful
      returns a pointer to the allocated storage.
      <function>lwres_context_freemem()</function> frees
      <parameter>len</parameter> bytes of space starting at location
      <parameter>mem</parameter>.
    </para>

    <para><function>lwres_context_sendrecv()</function>
      performs I/O for the context <parameter>ctx</parameter>.  Data
      are read and written from the context's socket.  It writes data
      from <parameter>sendbase</parameter> &mdash; typically a
      lightweight resolver query packet &mdash; and waits for a reply
      which is copied to the receive buffer at
      <parameter>recvbase</parameter>.  The number of bytes that were
      written to this receive buffer is returned in
      <parameter>*recvd_len</parameter>.
    </para>
  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>

    <para><function>lwres_context_create()</function>
      returns <errorcode>LWRES_R_NOMEMORY</errorcode> if memory for
      the <type>struct lwres_context</type> could not be allocated,
      <errorcode>LWRES_R_SUCCESS</errorcode> otherwise.
    </para>
    <para>
      Successful calls to the memory allocator
      <function>lwres_context_allocmem()</function>
      return a pointer to the start of the allocated space.
      It returns NULL if memory could not be allocated.
    </para>
    <para><errorcode>LWRES_R_SUCCESS</errorcode>
      is returned when
      <function>lwres_context_sendrecv()</function>
      completes successfully.
      <errorcode>LWRES_R_IOERROR</errorcode>
      is returned if an I/O error occurs and
      <errorcode>LWRES_R_TIMEOUT</errorcode>
      is returned if
      <function>lwres_context_sendrecv()</function>
      times out waiting for a response.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>free</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


1.4
log
@resolve conflicts
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and distribute this software for any
d21 1
a21 2
<!-- $ISC: lwres_context.docbook,v 1.3.2.2.2.3 2005/05/12 21:36:12 sra Exp $ -->

a22 2
<refentryinfo>

d24 9
a32 7
<date>Jun 30, 2000</date>
</refentryinfo>
<refmeta>
<refentrytitle>lwres_context</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BIND9</refmiscinfo>
</refmeta>
d38 1
d49 12
a60 12
<refnamediv>
<refname>lwres_context_create</refname>
<refname>lwres_context_destroy</refname>
<refname>lwres_context_nextserial</refname>
<refname>lwres_context_initserial</refname>
<refname>lwres_context_freemem</refname>
<refname>lwres_context_allocmem</refname>
<refname>lwres_context_sendrecv</refname>
<refpurpose>lightweight resolver context management</refpurpose>
</refnamediv>
<refsynopsisdiv>
<funcsynopsis>
d63 1
a63 1
<funcdef>
d66 5
a70 5
<paramdef>lwres_context_t **contextp</paramdef>
<paramdef>void *arg</paramdef>
<paramdef>lwres_malloc_t malloc_function</paramdef>
<paramdef>lwres_free_t free_function</paramdef>
</funcprototype>
d72 1
a72 1
<funcdef>
d75 2
a76 2
<paramdef>lwres_context_t **contextp</paramdef>
</funcprototype>
d78 1
a78 1
<funcdef>
d81 3
a83 3
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>lwres_uint32_t serial</paramdef>
</funcprototype>
d85 1
a85 1
<funcdef>
d88 2
a89 2
<paramdef>lwres_context_t *ctx</paramdef>
</funcprototype>
d91 1
a91 1
<funcdef>
d94 4
a97 4
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>void *mem</paramdef>
<paramdef>size_t len</paramdef>
</funcprototype>
d99 1
a99 1
<funcdef>
d102 3
a104 3
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>size_t len</paramdef>
</funcprototype>
d106 1
a106 1
<funcdef>
d109 7
a115 7
<paramdef>lwres_context_t *ctx</paramdef>
<paramdef>void *sendbase</paramdef>
<paramdef>int sendlen</paramdef>
<paramdef>void *recvbase</paramdef>
<paramdef>int recvlen</paramdef>
<paramdef>int *recvd_len</paramdef>
</funcprototype>
d117 146
a262 184
</refsynopsisdiv>
<refsect1>
<title>DESCRIPTION</title>
<para>
<function>lwres_context_create()</function>
creates a
<type>lwres_context_t</type>
structure for use in lightweight resolver operations.
It holds a socket and other data needed for communicating
with a resolver daemon.
The new
<type>lwres_context_t</type>
is returned through
<parameter>contextp</parameter>,

a pointer to a
<type>lwres_context_t</type>
pointer.  This 
<type>lwres_context_t</type>
pointer must initially be NULL, and is modified 
to point to the newly created
<type>lwres_context_t</type>.

</para>
<para>
When the lightweight resolver needs to perform dynamic memory
allocation, it will call
<parameter>malloc_function</parameter>
to allocate memory and
<parameter>free_function</parameter>

to free it.  If 
<parameter>malloc_function</parameter>
and
<parameter>free_function</parameter>

are NULL, memory is allocated using
.Xr malloc 3
and
<citerefentry>
<refentrytitle>free</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>.

It is not permitted to have a NULL
<parameter>malloc_function</parameter>
and a non-NULL
<parameter>free_function</parameter>
or vice versa.
<parameter>arg</parameter>
is passed as the first parameter to the memory
allocation functions.  
If
<parameter>malloc_function</parameter>
and
<parameter>free_function</parameter>
are NULL,
<parameter>arg</parameter>

is unused and should be passed as NULL.
</para>
<para>
Once memory for the structure has been allocated,
it is initialized using
<citerefentry>
<refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>

and returned via
<parameter>*contextp</parameter>.

</para>
<para>
<function>lwres_context_destroy()</function>
destroys a 
<type>lwres_context_t</type>,

closing its socket.
<parameter>contextp</parameter>
is a pointer to a pointer to the context that is to be destroyed.
The pointer will be set to NULL when the context has been destroyed.
</para>
<para>
The context holds a serial number that is used to identify resolver
request packets and associate responses with the corresponding requests.
This serial number is controlled using
<function>lwres_context_initserial()</function>
and
<function>lwres_context_nextserial()</function>.
<function>lwres_context_initserial()</function>
sets the serial number for context
<parameter>*ctx</parameter>
to
<parameter>serial</parameter>.

<function>lwres_context_nextserial()</function>
increments the serial number and returns the previous value.
</para>
<para>
Memory for a lightweight resolver context is allocated and freed using
<function>lwres_context_allocmem()</function>
and
<function>lwres_context_freemem()</function>.
These use whatever allocations were defined when the context was
created with
<function>lwres_context_create()</function>.
<function>lwres_context_allocmem()</function>
allocates
<parameter>len</parameter>
bytes of memory and if successful returns a pointer to the allocated
storage.
<function>lwres_context_freemem()</function>
frees
<parameter>len</parameter>
bytes of space starting at location
<parameter>mem</parameter>.

</para>
<para>
<function>lwres_context_sendrecv()</function>
performs I/O for the context
<parameter>ctx</parameter>.

Data are read and written from the context's socket.
It writes data from
<parameter>sendbase</parameter>
&mdash; typically a lightweight resolver query packet &mdash;
and waits for a reply which is copied to the receive buffer at
<parameter>recvbase</parameter>.

The number of bytes that were written to this receive buffer is
returned in
<parameter>*recvd_len</parameter>.

</para>
</refsect1>
<refsect1>
<title>RETURN VALUES</title>
<para>
<function>lwres_context_create()</function>
returns
<errorcode>LWRES_R_NOMEMORY</errorcode>
if memory for the
<type>struct lwres_context</type>
could not be allocated, 
<errorcode>LWRES_R_SUCCESS</errorcode>
otherwise.
</para>
<para>
Successful calls to the memory allocator
<function>lwres_context_allocmem()</function>
return a pointer to the start of the allocated space.
It returns NULL if memory could not be allocated.
</para>
<para>
<errorcode>LWRES_R_SUCCESS</errorcode>
is returned when
<function>lwres_context_sendrecv()</function>
completes successfully.
<errorcode>LWRES_R_IOERROR</errorcode>
is returned if an I/O error occurs and
<errorcode>LWRES_R_TIMEOUT</errorcode>
is returned if
<function>lwres_context_sendrecv()</function>
times out waiting for a response.
</para>
</refsect1>
<refsect1>
<title>SEE ALSO</title>
<para>
<citerefentry>
<refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum>
</citerefentry>,

<citerefentry>
<refentrytitle>free</refentrytitle><manvolnum>3
</manvolnum>
</citerefentry>.
</para>
</refsect1>
</refentry>
@


1.3
log
@resolve conflicts
@
text
@d1 3
a3 1
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
d5 2
a6 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d21 1
a21 1
<!-- $ISC: lwres_context.docbook,v 1.3.2.2.2.1 2004/03/06 08:15:38 marka Exp $ -->
d34 15
@


1.2
log
@update to BIND v9.2.3. ok todd@@
@
text
@d3 1
d10 7
a16 8
 - THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 - DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 - IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 - INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 - FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 - NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 - WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_context.docbook,v 1.3.2.2 2003/07/22 04:03:54 marka Exp $ -->
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 - Copyright (C) 2001  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_context.docbook,v 1.3 2001/06/18 22:56:16 gson Exp $ -->
d112 1
a112 1
is returned throught
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d3 1
a3 2
 - Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2001, 2003  Internet Software Consortium.
d9 8
a16 7
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
d19 1
a19 1
<!-- $ISC: lwres_context.docbook,v 1.3.2.2.2.1 2004/03/06 08:15:38 marka Exp $ -->
d112 1
a112 1
is returned through
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d1 1
a1 3
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.0//EN"
               "http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd"
	       [<!ENTITY mdash "&#8212;">]>
d3 2
a4 2
 - Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000, 2001, 2003  Internet Software Consortium.
d19 1
a19 1
<!-- $ISC: lwres_context.docbook,v 1.3.2.2.2.3 2005/05/12 21:36:12 sra Exp $ -->
a31 15

  <docinfo>
    <copyright>
      <year>2004</year>
      <year>2005</year>
      <holder>Internet Systems Consortium, Inc. ("ISC")</holder>
    </copyright>
    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2003</year>
      <holder>Internet Software Consortium.</holder>
    </copyright>
  </docinfo>

@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d1 2
a2 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
d5 1
a5 1
 - Copyright (C) 2004, 2005, 2007  Internet Systems Consortium, Inc. ("ISC")
d8 1
a8 1
 - Permission to use, copy, modify, and/or distribute this software for any
d21 2
a22 1
<!-- $ISC: lwres_context.docbook,v 1.5.18.6 2007/08/28 07:20:06 tbox Exp $ -->
d24 2
d27 7
a33 9
  <refentryinfo>
    <date>Jun 30, 2000</date>
  </refentryinfo>

  <refmeta>
    <refentrytitle>lwres_context</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>BIND9</refmiscinfo>
  </refmeta>
a38 1
      <year>2007</year>
d49 12
a60 12
  <refnamediv>
    <refname>lwres_context_create</refname>
    <refname>lwres_context_destroy</refname>
    <refname>lwres_context_nextserial</refname>
    <refname>lwres_context_initserial</refname>
    <refname>lwres_context_freemem</refname>
    <refname>lwres_context_allocmem</refname>
    <refname>lwres_context_sendrecv</refname>
    <refpurpose>lightweight resolver context management</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <funcsynopsis>
d63 1
a63 1
        <funcdef>
d66 5
a70 5
        <paramdef>lwres_context_t **<parameter>contextp</parameter></paramdef>
        <paramdef>void *<parameter>arg</parameter></paramdef>
        <paramdef>lwres_malloc_t <parameter>malloc_function</parameter></paramdef>
        <paramdef>lwres_free_t <parameter>free_function</parameter></paramdef>
        </funcprototype>
d72 1
a72 1
        <funcdef>
d75 2
a76 2
        <paramdef>lwres_context_t **<parameter>contextp</parameter></paramdef>
        </funcprototype>
d78 1
a78 1
        <funcdef>
d81 3
a83 3
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>lwres_uint32_t <parameter>serial</parameter></paramdef>
        </funcprototype>
d85 1
a85 1
        <funcdef>
d88 2
a89 2
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        </funcprototype>
d91 1
a91 1
        <funcdef>
d94 4
a97 4
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>void *<parameter>mem</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        </funcprototype>
d99 1
a99 1
        <funcdef>
d102 3
a104 3
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>size_t <parameter>len</parameter></paramdef>
        </funcprototype>
d106 1
a106 1
        <funcdef>
d109 7
a115 7
        <paramdef>lwres_context_t *<parameter>ctx</parameter></paramdef>
        <paramdef>void *<parameter>sendbase</parameter></paramdef>
        <paramdef>int <parameter>sendlen</parameter></paramdef>
        <paramdef>void *<parameter>recvbase</parameter></paramdef>
        <paramdef>int <parameter>recvlen</parameter></paramdef>
        <paramdef>int *<parameter>recvd_len</parameter></paramdef>
      </funcprototype>
d117 184
a300 146
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para><function>lwres_context_create()</function>
      creates a <type>lwres_context_t</type> structure for use in
      lightweight resolver operations.  It holds a socket and other
      data needed for communicating with a resolver daemon.  The new
      <type>lwres_context_t</type> is returned through
      <parameter>contextp</parameter>, a pointer to a
      <type>lwres_context_t</type> pointer.  This
      <type>lwres_context_t</type> pointer must initially be NULL, and
      is modified to point to the newly created
      <type>lwres_context_t</type>.
    </para>
    <para>
      When the lightweight resolver needs to perform dynamic memory
      allocation, it will call
      <parameter>malloc_function</parameter>
      to allocate memory and
      <parameter>free_function</parameter>
      to free it.  If
      <parameter>malloc_function</parameter>
      and
      <parameter>free_function</parameter>
      are NULL, memory is allocated using
      <citerefentry>
        <refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
      and
      <citerefentry>
        <refentrytitle>free</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.

      It is not permitted to have a NULL
      <parameter>malloc_function</parameter> and a non-NULL
      <parameter>free_function</parameter> or vice versa.
      <parameter>arg</parameter> is passed as the first parameter to
      the memory allocation functions.  If
      <parameter>malloc_function</parameter> and
      <parameter>free_function</parameter> are NULL,
      <parameter>arg</parameter> is unused and should be passed as
      NULL.
    </para>

    <para>
      Once memory for the structure has been allocated,
      it is initialized using
      <citerefentry>
        <refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>
      and returned via <parameter>*contextp</parameter>.
    </para>

    <para><function>lwres_context_destroy()</function>
      destroys a <type>lwres_context_t</type>, closing its socket.
      <parameter>contextp</parameter> is a pointer to a pointer to the
      context that is to be destroyed.  The pointer will be set to
      NULL when the context has been destroyed.
    </para>

    <para>
      The context holds a serial number that is used to identify
      resolver request packets and associate responses with the
      corresponding requests.  This serial number is controlled using
      <function>lwres_context_initserial()</function> and
      <function>lwres_context_nextserial()</function>.
      <function>lwres_context_initserial()</function> sets the serial
      number for context <parameter>*ctx</parameter> to
      <parameter>serial</parameter>.
      <function>lwres_context_nextserial()</function> increments the
      serial number and returns the previous value.
    </para>

    <para>
      Memory for a lightweight resolver context is allocated and freed
      using <function>lwres_context_allocmem()</function> and
      <function>lwres_context_freemem()</function>.  These use
      whatever allocations were defined when the context was created
      with <function>lwres_context_create()</function>.
      <function>lwres_context_allocmem()</function> allocates
      <parameter>len</parameter> bytes of memory and if successful
      returns a pointer to the allocated storage.
      <function>lwres_context_freemem()</function> frees
      <parameter>len</parameter> bytes of space starting at location
      <parameter>mem</parameter>.
    </para>

    <para><function>lwres_context_sendrecv()</function>
      performs I/O for the context <parameter>ctx</parameter>.  Data
      are read and written from the context's socket.  It writes data
      from <parameter>sendbase</parameter> &mdash; typically a
      lightweight resolver query packet &mdash; and waits for a reply
      which is copied to the receive buffer at
      <parameter>recvbase</parameter>.  The number of bytes that were
      written to this receive buffer is returned in
      <parameter>*recvd_len</parameter>.
    </para>
  </refsect1>

  <refsect1>
    <title>RETURN VALUES</title>

    <para><function>lwres_context_create()</function>
      returns <errorcode>LWRES_R_NOMEMORY</errorcode> if memory for
      the <type>struct lwres_context</type> could not be allocated,
      <errorcode>LWRES_R_SUCCESS</errorcode> otherwise.
    </para>
    <para>
      Successful calls to the memory allocator
      <function>lwres_context_allocmem()</function>
      return a pointer to the start of the allocated space.
      It returns NULL if memory could not be allocated.
    </para>
    <para><errorcode>LWRES_R_SUCCESS</errorcode>
      is returned when
      <function>lwres_context_sendrecv()</function>
      completes successfully.
      <errorcode>LWRES_R_IOERROR</errorcode>
      is returned if an I/O error occurs and
      <errorcode>LWRES_R_TIMEOUT</errorcode>
      is returned if
      <function>lwres_context_sendrecv()</function>
      times out waiting for a response.
    </para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>
    <para><citerefentry>
        <refentrytitle>lwres_conf_init</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>malloc</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>,

      <citerefentry>
        <refentrytitle>free</refentrytitle><manvolnum>3</manvolnum>
      </citerefentry>.
    </para>
  </refsect1>
</refentry><!--
 - Local variables:
 - mode: sgml
 - End:
-->
@


