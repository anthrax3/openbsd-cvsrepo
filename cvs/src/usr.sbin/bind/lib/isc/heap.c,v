head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.4.0.38
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.36
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.32
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.34
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.26
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.30
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.28
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.24
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.22
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.20
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.18
	OPENBSD_5_0:1.1.1.4.0.16
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.14
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.12
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.8
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.10
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.6
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	OPENBSD_4_3_BASE:1.1.1.4
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.1.1.3.0.4
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.2
	OPENBSD_4_1_BASE:1.1.1.3
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.32;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.32;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.33;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.01.10.18.20.04;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.34.01;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 1997-2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: heap.c,v 1.28 2001/06/04 19:33:21 tale Exp $ */

/*
 * Heap implementation of priority queues adapted from the following:
 *
 *	_Introduction to Algorithms_, Cormen, Leiserson, and Rivest,
 *	MIT Press / McGraw Hill, 1990, ISBN 0-262-03141-8, chapter 7.
 *
 *	_Algorithms_, Second Edition, Sedgewick, Addison-Wesley, 1988,
 *	ISBN 0-201-06673-4, chapter 11.
 */

#include <config.h>

#include <isc/heap.h>
#include <isc/magic.h>
#include <isc/mem.h>
#include <isc/string.h>		/* Required for memcpy. */
#include <isc/util.h>

/*
 * Note: to make heap_parent and heap_left easy to compute, the first
 * element of the heap array is not used; i.e. heap subscripts are 1-based,
 * not 0-based.
 */
#define heap_parent(i)			((i) >> 1)
#define heap_left(i)			((i) << 1)

#define SIZE_INCREMENT			1024

#define HEAP_MAGIC			ISC_MAGIC('H', 'E', 'A', 'P')
#define VALID_HEAP(h)			ISC_MAGIC_VALID(h, HEAP_MAGIC)

/*
 * When the heap is in a consistent state, the following invariant
 * holds true: for every element i > 1, heap_parent(i) has a priority
 * higher than or equal to that of i.
 */
#define HEAPCONDITION(i) ((i) == 1 || \
			  ! heap->compare(heap->array[(i)], \
					  heap->array[heap_parent(i)]))

struct isc_heap {
	unsigned int			magic;
	isc_mem_t *			mctx;
	unsigned int			size;
	unsigned int			size_increment;
	unsigned int			last;
	void				**array;
	isc_heapcompare_t		compare;
	isc_heapindex_t			index;
};

isc_result_t
isc_heap_create(isc_mem_t *mctx, isc_heapcompare_t compare,
		isc_heapindex_t index, unsigned int size_increment,
		isc_heap_t **heapp)
{
	isc_heap_t *heap;

	REQUIRE(heapp != NULL && *heapp == NULL);
	REQUIRE(compare != NULL);

	heap = isc_mem_get(mctx, sizeof *heap);
	if (heap == NULL)
		return (ISC_R_NOMEMORY);
	heap->magic = HEAP_MAGIC;
	heap->mctx = mctx;
	heap->size = 0;
	if (size_increment == 0)
		heap->size_increment = SIZE_INCREMENT;
	else
		heap->size_increment = size_increment;
	heap->last = 0;
	heap->array = NULL;
	heap->compare = compare;
	heap->index = index;

	*heapp = heap;

	return (ISC_R_SUCCESS);
}

void
isc_heap_destroy(isc_heap_t **heapp) {
	isc_heap_t *heap;

	REQUIRE(heapp != NULL);
	heap = *heapp;
	REQUIRE(VALID_HEAP(heap));

	if (heap->array != NULL)
		isc_mem_put(heap->mctx, heap->array,
			    heap->size * sizeof (void *));
	heap->magic = 0;
	isc_mem_put(heap->mctx, heap, sizeof *heap);

	*heapp = NULL;
}

static isc_boolean_t
resize(isc_heap_t *heap) {
	void **new_array;
	size_t new_size;

	REQUIRE(VALID_HEAP(heap));

	new_size = heap->size + heap->size_increment;
	new_array = isc_mem_get(heap->mctx, new_size * sizeof (void *));
	if (new_array == NULL)
		return (ISC_FALSE);
	if (heap->array != NULL) {
		memcpy(new_array, heap->array, heap->size * sizeof (void *));
		isc_mem_put(heap->mctx, heap->array,
			    heap->size * sizeof (void *));
	}
	heap->size = new_size;
	heap->array = new_array;

	return (ISC_TRUE);
}

static void
float_up(isc_heap_t *heap, unsigned int i, void *elt) {
	unsigned int p;

	for (p = heap_parent(i);
	     i > 1 && heap->compare(elt, heap->array[p]);
	     i = p, p = heap_parent(i)) {
		heap->array[i] = heap->array[p];
		if (heap->index != NULL)
			(heap->index)(heap->array[i], i);
	}
	heap->array[i] = elt;
	if (heap->index != NULL)
		(heap->index)(heap->array[i], i);

	INSIST(HEAPCONDITION(i));
}

static void
sink_down(isc_heap_t *heap, unsigned int i, void *elt) {
	unsigned int j, size, half_size;
	size = heap->last;
	half_size = size / 2;
	while (i <= half_size) {
		/* Find the smallest of the (at most) two children. */
		j = heap_left(i);
		if (j < size && heap->compare(heap->array[j+1],
					      heap->array[j]))
			j++;
		if (heap->compare(elt, heap->array[j]))
			break;
		heap->array[i] = heap->array[j];
		if (heap->index != NULL)
			(heap->index)(heap->array[i], i);
		i = j;
	}
	heap->array[i] = elt;
	if (heap->index != NULL)
		(heap->index)(heap->array[i], i);

	INSIST(HEAPCONDITION(i));
}

isc_result_t
isc_heap_insert(isc_heap_t *heap, void *elt) {
	unsigned int i;

	REQUIRE(VALID_HEAP(heap));

	i = ++heap->last;
	if (heap->last >= heap->size && !resize(heap))
		return (ISC_R_NOMEMORY);

	float_up(heap, i, elt);

	return (ISC_R_SUCCESS);
}

void
isc_heap_delete(isc_heap_t *heap, unsigned int i) {
	void *elt;
	isc_boolean_t less;

	REQUIRE(VALID_HEAP(heap));
	REQUIRE(i >= 1 && i <= heap->last);

	if (i == heap->last) {
		heap->last--;
	} else {
		elt = heap->array[heap->last--];
		less = heap->compare(elt, heap->array[i]);
		heap->array[i] = elt;
		if (less)
			float_up(heap, i, heap->array[i]);
		else
			sink_down(heap, i, heap->array[i]);
	}
}

void
isc_heap_increased(isc_heap_t *heap, unsigned int i) {
	REQUIRE(VALID_HEAP(heap));
	REQUIRE(i >= 1 && i <= heap->last);

	float_up(heap, i, heap->array[i]);
}

void
isc_heap_decreased(isc_heap_t *heap, unsigned int i) {
	REQUIRE(VALID_HEAP(heap));
	REQUIRE(i >= 1 && i <= heap->last);

	sink_down(heap, i, heap->array[i]);
}

void *
isc_heap_element(isc_heap_t *heap, unsigned int i) {
	REQUIRE(VALID_HEAP(heap));
	REQUIRE(i >= 1 && i <= heap->last);

	return (heap->array[i]);
}

void
isc_heap_foreach(isc_heap_t *heap, isc_heapaction_t action, void *uap) {
	unsigned int i;

	REQUIRE(VALID_HEAP(heap));
	REQUIRE(action != NULL);

	for (i = 1; i <= heap->last; i++)
		(action)(heap->array[i], uap);
}
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: heap.c,v 1.28.12.3 2004/03/08 09:04:48 marka Exp $ */
d81 1
a81 1
	heap = isc_mem_get(mctx, sizeof(*heap));
d111 1
a111 1
			    heap->size * sizeof(void *));
d113 1
a113 1
	isc_mem_put(heap->mctx, heap, sizeof(*heap));
d126 1
a126 1
	new_array = isc_mem_get(heap->mctx, new_size * sizeof(void *));
d130 1
a130 1
		memcpy(new_array, heap->array, heap->size * sizeof(void *));
d132 1
a132 1
			    heap->size * sizeof(void *));
@


1.1.1.3
log
@ISC BIND release 9.3.3
@
text
@d2 1
a2 1
 * Copyright (C) 2004-2006  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: heap.c,v 1.28.12.4 2006/04/17 18:27:20 explorer Exp $ */
d20 1
a20 1
/*! \file
d23 1
a23 1
 *	\li "Introduction to Algorithms," Cormen, Leiserson, and Rivest,
d26 1
a26 1
 *	\li "Algorithms," Second Edition, Sedgewick, Addison-Wesley, 1988,
d38 1
a38 2
/*@@{*/
/*%
d41 1
a41 2
 * not 0-based.  The parent is index/2, and the left-child is index*2.
 * The right child is index*2+1.
a44 1
/*@@}*/
d51 1
a51 1
/*%
a59 1
/*% ISC heap structure. */
d144 2
a145 2
	for (p = heap_parent(i) ;
	     i > 1 && heap->compare(elt, heap->array[p]) ;
d199 1
a199 1
isc_heap_delete(isc_heap_t *heap, unsigned int index) {
d204 1
a204 1
	REQUIRE(index >= 1 && index <= heap->last);
d206 1
a206 1
	if (index == heap->last) {
d210 2
a211 2
		less = heap->compare(elt, heap->array[index]);
		heap->array[index] = elt;
d213 1
a213 1
			float_up(heap, index, heap->array[index]);
d215 1
a215 1
			sink_down(heap, index, heap->array[index]);
d220 1
a220 1
isc_heap_increased(isc_heap_t *heap, unsigned int index) {
d222 1
a222 1
	REQUIRE(index >= 1 && index <= heap->last);
d224 1
a224 1
	float_up(heap, index, heap->array[index]);
d228 1
a228 1
isc_heap_decreased(isc_heap_t *heap, unsigned int index) {
d230 1
a230 1
	REQUIRE(index >= 1 && index <= heap->last);
d232 1
a232 1
	sink_down(heap, index, heap->array[index]);
d236 1
a236 1
isc_heap_element(isc_heap_t *heap, unsigned int index) {
d238 1
a238 1
	REQUIRE(index >= 1 && index <= heap->last);
d240 1
a240 1
	return (heap->array[index]);
d250 1
a250 1
	for (i = 1 ; i <= heap->last ; i++)
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d18 1
a18 1
/* $ISC: heap.c,v 1.30.18.3 2006/04/17 18:27:33 explorer Exp $ */
@


