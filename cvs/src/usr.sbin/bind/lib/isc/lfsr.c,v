head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.40
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.36
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.32
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.34
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.26
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.30
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.28
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.24
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.22
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.20
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.18
	OPENBSD_5_0:1.6.0.16
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.14
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.12
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.8
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.10
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	BIND_9_4_2_P1:1.1.1.4
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.4
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	BIND_9_3_4:1.1.1.3
	BIND_9_3_3:1.1.1.3
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	BIND_9_3_2:1.1.1.3
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.05.17.36.35;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.07;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.14.14.07;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.20.21.27.16;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.33;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.33;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.33;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.04.05.16.44.09;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.12.09.12.34.07;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.6
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2002  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: lfsr.c,v 1.14.18.4 2005/10/14 01:28:29 marka Exp $ */

/*! \file */

#include <config.h>

#include <stddef.h>
#include <stdlib.h>

#include <isc/assertions.h>
#include <isc/lfsr.h>
#include <isc/util.h>

#define VALID_LFSR(x)	(x != NULL)

void
isc_lfsr_init(isc_lfsr_t *lfsr, isc_uint32_t state, unsigned int bits,
	      isc_uint32_t tap, unsigned int count,
	      isc_lfsrreseed_t reseed, void *arg)
{
	REQUIRE(VALID_LFSR(lfsr));
	REQUIRE(8 <= bits && bits <= 32);
	REQUIRE(tap != 0);

	lfsr->state = state;
	lfsr->bits = bits;
	lfsr->tap = tap;
	lfsr->count = count;
	lfsr->reseed = reseed;
	lfsr->arg = arg;

	if (count == 0 && reseed != NULL)
		reseed(lfsr, arg);
	if (lfsr->state == 0)
		lfsr->state = 0xffffffffU >> (32 - lfsr->bits);
}

/*!
 * Return the next state of the lfsr.
 */
static inline isc_uint32_t
lfsr_generate(isc_lfsr_t *lfsr)
{

	/*
	 * If the previous state is zero, we must fill it with something
	 * here, or we will begin to generate an extremely predictable output.
	 *
	 * First, give the reseed function a crack at it.  If the state is
	 * still 0, set it to all ones.
	 */
	if (lfsr->state == 0) {
		if (lfsr->reseed != NULL)
			lfsr->reseed(lfsr, lfsr->arg);
		if (lfsr->state == 0)
			lfsr->state = 0xffffffffU >> (32 - lfsr->bits);
	}

	if (lfsr->state & 0x01) {
		lfsr->state = (lfsr->state >> 1) ^ lfsr->tap;
		return (1);
	} else {
		lfsr->state >>= 1;
		return (0);
	}
}

void
isc_lfsr_generate(isc_lfsr_t *lfsr, void *data, unsigned int count)
{
	unsigned char *p;
	unsigned int bit;
	unsigned int byte;

	REQUIRE(VALID_LFSR(lfsr));
	REQUIRE(data != NULL);
	REQUIRE(count > 0);

	p = data;
	byte = count;

	while (byte--) {
		*p = 0;
		for (bit = 0; bit < 7; bit++) {
			*p |= lfsr_generate(lfsr);
			*p <<= 1;
		}
		*p |= lfsr_generate(lfsr);
		p++;
	}

	if (lfsr->count != 0 && lfsr->reseed != NULL) {
		if (lfsr->count <= count * 8)
			lfsr->reseed(lfsr, lfsr->arg);
		else
			lfsr->count -= (count * 8);
	}
}

static inline isc_uint32_t
lfsr_skipgenerate(isc_lfsr_t *lfsr, unsigned int skip)
{
	while (skip--)
		(void)lfsr_generate(lfsr);

	(void)lfsr_generate(lfsr);

	return (lfsr->state);
}

/*
 * Skip "skip" states in "lfsr".
 */
void
isc_lfsr_skip(isc_lfsr_t *lfsr, unsigned int skip)
{
	REQUIRE(VALID_LFSR(lfsr));

	while (skip--)
		(void)lfsr_generate(lfsr);
}

/*
 * Skip states in lfsr1 and lfsr2 using the other's current state.
 * Return the final state of lfsr1 ^ lfsr2.
 */
isc_uint32_t
isc_lfsr_generate32(isc_lfsr_t *lfsr1, isc_lfsr_t *lfsr2)
{
	isc_uint32_t state1, state2;
	isc_uint32_t skip1, skip2;

	REQUIRE(VALID_LFSR(lfsr1));
	REQUIRE(VALID_LFSR(lfsr2));

	skip1 = lfsr1->state & 0x01;
	skip2 = lfsr2->state & 0x01;

	/* cross-skip. */
	state1 = lfsr_skipgenerate(lfsr1, skip2);
	state2 = lfsr_skipgenerate(lfsr2, skip1);

	return (state1 ^ state2);
}
@


1.5
log
@resolve conflicts
@
text
@d18 3
a20 1
/* $ISC: lfsr.c,v 1.11.2.2.2.6 2005/10/14 01:38:50 marka Exp $ */
d55 1
a55 1
/*
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: lfsr.c,v 1.11.2.2.2.3 2004/03/08 09:04:49 marka Exp $ */
d22 1
a58 3
	unsigned int highbit;

	highbit = 1 << (lfsr->bits - 1);
@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 2
a3 1
 * Copyright (C) 1999-2001, 2003  Internet Software Consortium.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: lfsr.c,v 1.11.2.2 2003/07/22 04:03:47 marka Exp $ */
d101 1
a101 1
		for (bit = 0 ; bit < 7 ; bit++) {
@


1.2
log
@fix broken lfsr implementation
@
text
@d2 1
a2 1
 * Copyright (C) 1999-2001  Internet Software Consortium.
d18 1
a18 1
/* $ISC: lfsr.c,v 1.11 2001/01/09 21:56:11 bwelling Exp $ */
@


1.1
log
@Initial revision
@
text
@d77 1
a77 1
		lfsr->state = ((lfsr->state ^ lfsr->tap) >> 1) | highbit;
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2002  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: lfsr.c,v 1.11.2.2.2.3 2004/03/08 09:04:49 marka Exp $ */
d77 1
a77 1
		lfsr->state = (lfsr->state >> 1) ^ lfsr->tap;
d101 1
a101 1
		for (bit = 0; bit < 7; bit++) {
@


1.1.1.3
log
@ISC BIND release 9.3.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: lfsr.c,v 1.11.2.2.2.6 2005/10/14 01:38:50 marka Exp $ */
a21 1
#include <stddef.h>
d58 3
@


1.1.1.4
log
@ISC BIND release 9.4.2
@
text
@d18 1
a18 3
/* $ISC: lfsr.c,v 1.14.18.4 2005/10/14 01:28:29 marka Exp $ */

/*! \file */
d53 1
a53 1
/*!
@


