head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.42
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.40
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.36
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.32
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.34
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.26
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.30
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.28
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.24
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.22
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.20
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.18
	OPENBSD_5_0:1.1.1.3.0.16
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.14
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.12
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.8
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.10
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	OPENBSD_4_3_BASE:1.1.1.3
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.35;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.35;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.38;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.14;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 1999-2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: bitstring.h,v 1.7 2001/01/09 21:56:44 bwelling Exp $ */

#ifndef ISC_BITSTRING_H
#define ISC_BITSTRING_H 1

/*****
 ***** Module Info
 *****/

/*
 * Bitstring
 *
 * A bitstring is a packed array of bits, stored in a contiguous
 * sequence of octets.  The "most significant bit" (msb) of a bitstring
 * is the high bit of the first octet.  The "least significant bit" of a
 * bitstring is the low bit of the last octet.
 *
 * Two bit numbering schemes are supported, "msb0" and "lsb0".
 *
 * In the "msb0" scheme, bit number 0 designates the most significant bit,
 * and any padding bits required to make the bitstring a multiple of 8 bits
 * long are added to the least significant end of the last octet.
 *
 * In the "lsb0" scheme, bit number 0 designates the least significant bit,
 * and any padding bits required to make the bitstring a multiple of 8 bits
 * long are added to the most significant end of the first octet.
 *
 * E.g., consider the bitstring "11010001111".  This bitstring is 11 bits
 * long and will take two octets.  Let "p" denote a pad bit.  In the msb0
 * encoding, it would be
 *
 *             Octet 0           Octet 1
 *                         |
 *         1 1 0 1 0 0 0 1 | 1 1 1 p p p p p
 *         ^               |               ^
 *         |                               |
 *         bit 0                           bit 15
 *
 * In the lsb0 encoding, it would be
 *
 *             Octet 0           Octet 1
 *                         |
 *         p p p p p 1 1 0 | 1 0 0 0 1 1 1 1 
 *         ^               |               ^
 *         |                               |
 *         bit 15                          bit 0
 */

/***
 *** Imports
 ***/

#include <isc/lang.h>
#include <isc/types.h>

ISC_LANG_BEGINDECLS

/***
 *** Types
 ***/

struct isc_bitstring {
	unsigned int		magic;
	unsigned char *		data;
	unsigned int		length;
	unsigned int		size;
	isc_boolean_t		lsb0;
};

/***
 *** Functions
 ***/

void
isc_bitstring_init(isc_bitstring_t *bitstring, unsigned char *data,
		   unsigned int length, unsigned int size, isc_boolean_t lsb0);
/*
 * Make 'bitstring' refer to the bitstring of 'size' bits starting
 * at 'data'.  'length' bits of the bitstring are valid.  If 'lsb0'
 * is set then, bit 0 refers to the least significant bit of the
 * bitstring.  Otherwise bit 0 is the most significant bit.
 *
 * Requires:
 *
 *	'bitstring' points to a isc_bitstring_t.
 *
 *	'data' points to an array of unsigned char large enough to hold
 *	'size' bits.
 *
 *	'length' <= 'size'.
 *
 * Ensures:
 *
 *	'bitstring' is a valid bitstring.
 */

void
isc_bitstring_invalidate(isc_bitstring_t *bitstring);
/*
 * Invalidate 'bitstring'.
 *
 * Requires:
 *
 *	'bitstring' is a valid bitstring.
 *
 * Ensures:
 *
 *	'bitstring' is not a valid bitstring.
 */

void
isc_bitstring_copy(isc_bitstring_t *source, unsigned int sbitpos,
		   isc_bitstring_t *target, unsigned int tbitpos,
		   unsigned int n);
/*
 * Starting at bit 'sbitpos', copy 'n' bits from 'source' to
 * the 'n' bits of 'target' starting at 'tbitpos'.
 *
 * Requires:
 *
 *	'source' and target are valid bitstrings with the same lsb0 setting.
 *
 *	'sbitpos' + 'n' is less than or equal to the length of 'source'.
 *
 *	'tbitpos' + 'n' is less than or equal to the size of 'target'.
 *
 * Ensures:
 *
 *	The specified bits have been copied, and the length of 'target'
 *	adjusted (if required).
 */

ISC_LANG_ENDDECLS

#endif /* ISC_BITSTRING_H */
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: bitstring.h,v 1.7.206.1 2004/03/06 08:14:38 marka Exp $ */
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: bitstring.h,v 1.8.18.2 2005/04/29 00:16:53 marka Exp $ */
d27 2
a28 3
/*! \file bitstring.h
 *
 * \brief Bitstring manipulation functions.
a48 1
 * \verbatim
a54 1
 * \endverbatim
a57 1
 * \verbatim
a63 1
 * \endverbatim
d94 2
a95 2
/*!<
 * \brief Make 'bitstring' refer to the bitstring of 'size' bits starting
d102 1
a102 1
 *\li	'bitstring' points to a isc_bitstring_t.
d104 1
a104 1
 *\li	'data' points to an array of unsigned char large enough to hold
d107 1
a107 1
 *\li	'length' <= 'size'.
d111 1
a111 1
 *\li	'bitstring' is a valid bitstring.
d116 2
a117 2
/*!<
 * \brief Invalidate 'bitstring'.
d121 1
a121 1
 *\li	'bitstring' is a valid bitstring.
d125 1
a125 1
 *\li	'bitstring' is not a valid bitstring.
d132 2
a133 2
/*!<
 * \brief Starting at bit 'sbitpos', copy 'n' bits from 'source' to
d138 1
a138 1
 *\li	'source' and target are valid bitstrings with the same lsb0 setting.
d140 1
a140 1
 *\li	'sbitpos' + 'n' is less than or equal to the length of 'source'.
d142 1
a142 1
 *\li	'tbitpos' + 'n' is less than or equal to the size of 'target'.
d146 1
a146 1
 *\li	The specified bits have been copied, and the length of 'target'
@


