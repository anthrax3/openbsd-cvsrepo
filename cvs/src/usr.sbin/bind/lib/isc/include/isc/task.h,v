head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.3.0.36
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.32
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.34
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.26
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.30
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.28
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.24
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.22
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.20
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.18
	OPENBSD_5_0:1.1.1.3.0.16
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.14
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.12
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.8
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.10
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	OPENBSD_4_3_BASE:1.1.1.3
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.38;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.38;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.45;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.12;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 1998-2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: task.h,v 1.49 2001/02/13 04:11:44 gson Exp $ */

#ifndef ISC_TASK_H
#define ISC_TASK_H 1

/*****
 ***** Module Info
 *****/

/*
 * Task System
 *
 * The task system provides a lightweight execution context, which is
 * basically an event queue.  When a task's event queue is non-empty, the
 * task is runnable.  A small work crew of threads, typically one per CPU,
 * execute runnable tasks by dispatching the events on the tasks' event
 * queues.  Context switching between tasks is fast.
 *
 * MP:
 *	The module ensures appropriate synchronization of data structures it
 *	creates and manipulates.
 *
 *	The caller must ensure that isc_taskmgr_destroy() is called only
 *	once for a given manager.
 *
 * Reliability:
 *	No anticipated impact.
 *
 * Resources:
 *	<TBS>
 *
 * Security:
 *	No anticipated impact.
 *
 * Standards:
 *	None.
 */


/***
 *** Imports.
 ***/

#include <isc/lang.h>
#include <isc/types.h>
#include <isc/eventclass.h>

#define ISC_TASKEVENT_FIRSTEVENT	(ISC_EVENTCLASS_TASK + 0)
#define ISC_TASKEVENT_SHUTDOWN		(ISC_EVENTCLASS_TASK + 1)
#define ISC_TASKEVENT_LASTEVENT		(ISC_EVENTCLASS_TASK + 65535)

/*****
 ***** Tasks.
 *****/

ISC_LANG_BEGINDECLS

isc_result_t
isc_task_create(isc_taskmgr_t *manager, unsigned int quantum,
		isc_task_t **taskp);
/*
 * Create a task.
 *
 * Notes:
 *
 *	If 'quantum' is non-zero, then only that many events can be dispatched
 *	before the task must yield to other tasks waiting to execute.  If
 *	quantum is zero, then the default quantum of the task manager will
 *	be used.
 *
 *	The 'quantum' option may be removed from isc_task_create() in the
 *	future.  If this happens, isc_task_getquantum() and
 *	isc_task_setquantum() will be provided.
 *
 * Requires:
 *
 *	'manager' is a valid task manager.
 *
 *	taskp != NULL && *taskp == NULL
 *
 * Ensures:
 *
 *	On success, '*taskp' is bound to the new task.
 *
 * Returns:
 *
 *     	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 *	ISC_R_UNEXPECTED
 *	ISC_R_SHUTTINGDOWN
 */

void
isc_task_attach(isc_task_t *source, isc_task_t **targetp);
/*
 * Attach *targetp to source.
 *
 * Requires:
 *
 *	'source' is a valid task.
 *
 *	'targetp' points to a NULL isc_task_t *.
 *
 * Ensures:
 *
 *	*targetp is attached to source.
 */

void
isc_task_detach(isc_task_t **taskp);
/*
 * Detach *taskp from its task.
 *
 * Requires:
 *
 *	'*taskp' is a valid task.
 *
 * Ensures:
 *
 *	*taskp is NULL.
 *
 *	If '*taskp' is the last reference to the task, the task is idle (has
 *	an empty event queue), and has not been shutdown, the task will be
 *	shutdown.
 *
 *	If '*taskp' is the last reference to the task and
 *	the task has been shutdown,
 *
 *		All resources used by the task will be freed.
 */

void
isc_task_send(isc_task_t *task, isc_event_t **eventp);
/*
 * Send '*event' to 'task'.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *	eventp != NULL && *eventp != NULL.
 *
 * Ensures:
 *
 *	*eventp == NULL.
 */

void
isc_task_sendanddetach(isc_task_t **taskp, isc_event_t **eventp);
/*
 * Send '*event' to '*taskp' and then detach '*taskp' from its
 * task.
 *
 * Requires:
 *
 *	'*taskp' is a valid task.
 *	eventp != NULL && *eventp != NULL.
 *
 * Ensures:
 *
 *	*eventp == NULL.
 *
 *	*taskp == NULL.
 *
 *	If '*taskp' is the last reference to the task, the task is
 *	idle (has an empty event queue), and has not been shutdown,
 *	the task will be shutdown.
 *
 *	If '*taskp' is the last reference to the task and
 *	the task has been shutdown,
 *
 *		All resources used by the task will be freed.
 */

/*
 * Purging and Unsending
 *
 * Events which have been queued for a task but not delivered may be removed
 * from the task's event queue by purging or unsending.
 *
 * With both types, the caller specifies a matching pattern that selects
 * events based upon their sender, type, and tag.
 *
 * Purging calls isc_event_free() on the matching events.
 *
 * Unsending returns a list of events that matched the pattern.
 * The caller is then responsible for them.
 *
 * Consumers of events should purge, not unsend.
 *
 * Producers of events often want to remove events when the caller indicates
 * it is no longer interested in the object, e.g. by cancelling a timer.
 * Sometimes this can be done by purging, but for some event types, the
 * calls to isc_event_free() cause deadlock because the event free routine
 * wants to acquire a lock the caller is already holding.  Unsending instead
 * of purging solves this problem.  As a general rule, producers should only
 * unsend events which they have sent.
 */

unsigned int
isc_task_purgerange(isc_task_t *task, void *sender, isc_eventtype_t first,
		    isc_eventtype_t last, void *tag);
/*
 * Purge events from a task's event queue.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 *	last >= first
 *
 * Ensures:
 *
 *	Events in the event queue of 'task' whose sender is 'sender', whose
 *	type is >= first and <= last, and whose tag is 'tag' will be purged,
 *	unless they are marked as unpurgable.
 *
 *	A sender of NULL will match any sender.  A NULL tag matches any
 *	tag.
 *
 * Returns:
 *
 *	The number of events purged.
 */

unsigned int
isc_task_purge(isc_task_t *task, void *sender, isc_eventtype_t type,
	       void *tag);
/*
 * Purge events from a task's event queue.
 *
 * Notes:
 *
 *	This function is equivalent to
 *
 *		isc_task_purgerange(task, sender, type, type, tag);
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 * Ensures:
 *
 *	Events in the event queue of 'task' whose sender is 'sender', whose
 *	type is 'type', and whose tag is 'tag' will be purged, unless they
 *	are marked as unpurgable.
 *
 *	A sender of NULL will match any sender.  A NULL tag matches any
 *	tag.
 *
 * Returns:
 *
 *	The number of events purged.
 */

isc_boolean_t
isc_task_purgeevent(isc_task_t *task, isc_event_t *event);
/*
 * Purge 'event' from a task's event queue.
 *
 * XXXRTH:  WARNING:  This method may be removed before beta.
 *
 * Notes:
 *
 *	If 'event' is on the task's event queue, it will be purged,
 * 	unless it is marked as unpurgeable.  'event' does not have to be
 *	on the task's event queue; in fact, it can even be an invalid
 *	pointer.  Purging only occurs if the event is actually on the task's
 *	event queue.
 *
 * 	Purging never changes the state of the task.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 * Ensures:
 *
 *	'event' is not in the event queue for 'task'.
 *
 * Returns:
 *
 *	ISC_TRUE			The event was purged.
 *	ISC_FALSE			The event was not in the event queue,
 *					or was marked unpurgeable.
 */

unsigned int
isc_task_unsendrange(isc_task_t *task, void *sender, isc_eventtype_t first,
		     isc_eventtype_t last, void *tag, isc_eventlist_t *events);
/*
 * Remove events from a task's event queue.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 *	last >= first.
 *
 *	*events is a valid list.
 *
 * Ensures:
 *
 *	Events in the event queue of 'task' whose sender is 'sender', whose
 *	type is >= first and <= last, and whose tag is 'tag' will be dequeued
 *	and appended to *events.
 *
 *	A sender of NULL will match any sender.  A NULL tag matches any
 *	tag.
 *
 * Returns:
 *
 *	The number of events unsent.
 */

unsigned int
isc_task_unsend(isc_task_t *task, void *sender, isc_eventtype_t type,
		void *tag, isc_eventlist_t *events);
/*
 * Remove events from a task's event queue.
 *
 * Notes:
 *
 *	This function is equivalent to
 *
 *		isc_task_unsendrange(task, sender, type, type, tag, events);
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 *	*events is a valid list.
 *
 * Ensures:
 *
 *	Events in the event queue of 'task' whose sender is 'sender', whose
 *	type is 'type', and whose tag is 'tag' will be dequeued and appended
 *	to *events.
 *
 * Returns:
 *
 *	The number of events unsent.
 */

isc_result_t
isc_task_onshutdown(isc_task_t *task, isc_taskaction_t action,
		    const void *arg);
/*
 * Send a shutdown event with action 'action' and argument 'arg' when
 * 'task' is shutdown.
 *
 * Notes:
 *
 *	Shutdown events are posted in LIFO order.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 *	'action' is a valid task action.
 *
 * Ensures:
 *
 *	When the task is shutdown, shutdown events requested with
 *	isc_task_onshutdown() will be appended to the task's event queue.
 *

 * Returns:
 *
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 *	ISC_R_TASKSHUTTINGDOWN			Task is shutting down.
 */

void
isc_task_shutdown(isc_task_t *task);
/*
 * Shutdown 'task'.
 *
 * Notes:
 *
 *	Shutting down a task causes any shutdown events requested with
 *	isc_task_onshutdown() to be posted (in LIFO order).  The task
 *	moves into a "shutting down" mode which prevents further calls
 *	to isc_task_onshutdown().
 *
 *	Trying to shutdown a task that has already been shutdown has no
 *	effect.
 *
 * Requires:
 *
 *	'task' is a valid task.
 *
 * Ensures:
 *
 *	Any shutdown events requested with isc_task_onshutdown() have been
 *	posted (in LIFO order).
 */

void
isc_task_destroy(isc_task_t **taskp);
/*
 * Destroy '*taskp'.
 *
 * Notes:
 *
 *	This call is equivalent to:
 *
 *		isc_task_shutdown(*taskp);
 *		isc_task_detach(taskp);
 *
 * Requires:
 *
 *	'*taskp' is a valid task.
 *
 * Ensures:
 *
 *	Any shutdown events requested with isc_task_onshutdown() have been
 *	posted (in LIFO order).
 *
 *	*taskp == NULL
 *
 *	If '*taskp' is the last reference to the task,
 *
 *		All resources used by the task will be freed.
 */

void
isc_task_setname(isc_task_t *task, const char *name, void *tag);
/*
 * Name 'task'.
 *
 * Notes:
 *
 *	Only the first 15 characters of 'name' will be copied.
 *
 *	Naming a task is currently only useful for debugging purposes.
 *
 * Requires:
 *
 *	'task' is a valid task.
 */

const char *
isc_task_getname(isc_task_t *task);
/*
 * Get the name of 'task', as previously set using isc_task_setname().
 *
 * Notes:
 *	This function is for debugging purposes only.
 *
 * Requires:
 *	'task' is a valid task.
 *
 * Returns:
 *	A non-NULL pointer to a null-terminated string.
 * 	If the task has not been named, the string is
 * 	empty.
 *
 */

void *
isc_task_gettag(isc_task_t *task);
/*
 * Get the tag value for  'task', as previously set using isc_task_settag().
 *
 * Notes:
 *	This function is for debugging purposes only.
 *
 * Requires:
 *	'task' is a valid task.
 */

isc_result_t
isc_task_beginexclusive(isc_task_t *task);
/*
 * Request exclusive access for 'task', which must be the calling
 * task.  Waits for any other concurrently executing tasks to finish their
 * current event, and prevents any new events from executing in any of the
 * tasks sharing a task manager with 'task'.
 *
 * The exclusive access must be relinquished by calling 
 * isc_task_endexclusive() before returning from the current event handler.
 *
 * Requires:
 *	'task' is the calling task.
 *
 * Returns:
 *	ISC_R_SUCCESS		The current task now has exclusive access.
 *	ISC_R_LOCKBUSY		Another task has already requested exclusive
 *				access.
 */

void
isc_task_endexclusive(isc_task_t *task);
/*
 * Relinquish the exclusive access obtained by isc_task_beginexclusive(), 
 * allowing other tasks to execute.
 *
 * Requires:
 *	'task' is the calling task, and has obtained
 *		exclusive access by calling isc_task_spl().
 */


/*****
 ***** Task Manager.
 *****/

isc_result_t
isc_taskmgr_create(isc_mem_t *mctx, unsigned int workers,
		   unsigned int default_quantum, isc_taskmgr_t **managerp);
/*
 * Create a new task manager.
 *
 * Notes:
 *
 *	'workers' in the number of worker threads to create.  In general,
 *	the value should be close to the number of processors in the system.
 *	The 'workers' value is advisory only.  An attempt will be made to
 *	create 'workers' threads, but if at least one thread creation
 *	succeeds, isc_taskmgr_create() may return ISC_R_SUCCESS.
 *
 *	If 'default_quantum' is non-zero, then it will be used as the default
 *	quantum value when tasks are created.  If zero, then an implementation
 *	defined default quantum will be used.
 *
 * Requires:
 *
 *      'mctx' is a valid memory context.
 *
 *	workers > 0
 *
 *	managerp != NULL && *managerp == NULL
 *
 * Ensures:
 *
 *	On success, '*managerp' will be attached to the newly created task
 *	manager.
 *
 * Returns:
 *
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 *	ISC_R_NOTHREADS			No threads could be created.
 *	ISC_R_UNEXPECTED		An unexpected error occurred.
 */

void
isc_taskmgr_destroy(isc_taskmgr_t **managerp);
/*
 * Destroy '*managerp'.
 *
 * Notes:
 *
 *	Calling isc_taskmgr_destroy() will shutdown all tasks managed by
 *	*managerp that haven't already been shutdown.  The call will block
 *	until all tasks have entered the done state.
 *
 *	isc_taskmgr_destroy() must not be called by a task event action,
 *	because it would block forever waiting for the event action to
 *	complete.  An event action that wants to cause task manager shutdown
 *	should request some non-event action thread of execution to do the
 *	shutdown, e.g. by signalling a condition variable or using
 *	isc_app_shutdown().
 *
 *	Task manager references are not reference counted, so the caller
 *	must ensure that no attempt will be made to use the manager after
 *	isc_taskmgr_destroy() returns.
 *
 * Requires:
 *
 *	'*managerp' is a valid task manager.
 *
 *	isc_taskmgr_destroy() has not be called previously on '*managerp'.
 *
 * Ensures:
 *
 *	All resources used by the task manager, and any tasks it managed,
 *	have been freed.
 */

ISC_LANG_ENDDECLS

#endif /* ISC_TASK_H */
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1998-2001, 2003  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: task.h,v 1.49.206.3 2004/03/09 05:21:09 marka Exp $ */
a60 1
#include <isc/eventclass.h>
a61 1
#include <isc/stdtime.h>
d63 1
a520 13
void
isc_task_getcurrenttime(isc_task_t *task, isc_stdtime_t *t);
/*
 * Provide the most recent timestamp on the task.  The timestamp is considered
 * as the "current time" in the second-order granularity.
 *
 * Requires:
 *	'task' is a valid task.
 *	't' is a valid non NULL pointer.
 *
 * Ensures:
 *	'*t' has the "current time".
 */
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: task.h,v 1.51.18.2 2005/04/29 00:17:03 marka Exp $ */
d27 5
a31 5
/*! \file
 * \brief The task system provides a lightweight execution context, which is
 * basically an event queue.  

 * When a task's event queue is non-empty, the
d36 1
a36 1
 * \li MP:
d39 1
d43 1
a43 1
 * \li Reliability:
d46 2
a47 2
 * \li Resources:
 *	TBS
d49 1
a49 1
 * \li Security:
d52 1
a52 1
 * \li Standards:
a53 23
 *
 * \section purge Purging and Unsending
 *
 * Events which have been queued for a task but not delivered may be removed
 * from the task's event queue by purging or unsending.
 *
 * With both types, the caller specifies a matching pattern that selects
 * events based upon their sender, type, and tag.
 *
 * Purging calls isc_event_free() on the matching events.
 *
 * Unsending returns a list of events that matched the pattern.
 * The caller is then responsible for them.
 *
 * Consumers of events should purge, not unsend.
 *
 * Producers of events often want to remove events when the caller indicates
 * it is no longer interested in the object, e.g. by cancelling a timer.
 * Sometimes this can be done by purging, but for some event types, the
 * calls to isc_event_free() cause deadlock because the event free routine
 * wants to acquire a lock the caller is already holding.  Unsending instead
 * of purging solves this problem.  As a general rule, producers should only
 * unsend events which they have sent.
d79 1
a79 1
/*%<
d84 1
a84 1
 *\li	If 'quantum' is non-zero, then only that many events can be dispatched
d89 1
a89 1
 *\li	The 'quantum' option may be removed from isc_task_create() in the
d95 1
a95 1
 *\li	'manager' is a valid task manager.
d97 1
a97 1
 *\li	taskp != NULL && *taskp == NULL
d101 1
a101 1
 *\li	On success, '*taskp' is bound to the new task.
d105 4
a108 4
 *\li   #ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 *\li	#ISC_R_UNEXPECTED
 *\li	#ISC_R_SHUTTINGDOWN
d113 1
a113 1
/*%<
d118 1
a118 1
 *\li	'source' is a valid task.
d120 1
a120 1
 *\li	'targetp' points to a NULL isc_task_t *.
d124 1
a124 1
 *\li	*targetp is attached to source.
d129 1
a129 1
/*%<
d134 1
a134 1
 *\li	'*taskp' is a valid task.
d138 1
a138 1
 *\li	*taskp is NULL.
d140 1
a140 1
 *\li	If '*taskp' is the last reference to the task, the task is idle (has
d144 1
a144 1
 *\li	If '*taskp' is the last reference to the task and
d146 2
a147 1
 *		all resources used by the task will be freed.
d152 1
a152 1
/*%<
d157 2
a158 2
 *\li	'task' is a valid task.
 *\li	eventp != NULL && *eventp != NULL.
d162 1
a162 1
 *\li	*eventp == NULL.
d167 1
a167 1
/*%<
d173 2
a174 2
 *\li	'*taskp' is a valid task.
 *\li	eventp != NULL && *eventp != NULL.
d178 1
a178 1
 *\li	*eventp == NULL.
d180 1
a180 1
 *\li	*taskp == NULL.
d182 1
a182 1
 *\li	If '*taskp' is the last reference to the task, the task is
d186 1
a186 1
 *\li	If '*taskp' is the last reference to the task and
d188 2
a189 1
 *		all resources used by the task will be freed.
d192 24
d220 1
a220 1
/*%<
d225 1
a225 1
 *\li	'task' is a valid task.
d227 1
a227 1
 *\li	last >= first
d231 1
a231 1
 *\li	Events in the event queue of 'task' whose sender is 'sender', whose
d235 1
a235 1
 *\li	A sender of NULL will match any sender.  A NULL tag matches any
d240 1
a240 1
 *\li	The number of events purged.
d246 1
a246 1
/*%<
d251 1
a251 1
 *\li	This function is equivalent to
a252 1
 *\code
a253 1
 *\endcode
d257 1
a257 1
 *\li	'task' is a valid task.
d261 1
a261 1
 *\li	Events in the event queue of 'task' whose sender is 'sender', whose
d265 1
a265 1
 *\li	A sender of NULL will match any sender.  A NULL tag matches any
d270 1
a270 1
 *\li	The number of events purged.
d275 1
a275 1
/*%<
d282 1
a282 1
 *\li	If 'event' is on the task's event queue, it will be purged,
d288 1
a288 1
 * \li	Purging never changes the state of the task.
d292 1
a292 1
 *\li	'task' is a valid task.
d296 1
a296 1
 *\li	'event' is not in the event queue for 'task'.
d300 2
a301 2
 *\li	#ISC_TRUE			The event was purged.
 *\li	#ISC_FALSE			The event was not in the event queue,
d308 1
a308 1
/*%<
d313 1
a313 1
 *\li	'task' is a valid task.
d315 1
a315 1
 *\li	last >= first.
d317 1
a317 1
 *\li	*events is a valid list.
d321 1
a321 1
 *\li	Events in the event queue of 'task' whose sender is 'sender', whose
d325 1
a325 1
 *\li	A sender of NULL will match any sender.  A NULL tag matches any
d330 1
a330 1
 *\li	The number of events unsent.
d336 1
a336 1
/*%<
d341 1
a341 1
 *\li	This function is equivalent to
a342 1
 *\code
a343 1
 *\endcode
d347 1
a347 1
 *\li	'task' is a valid task.
d349 1
a349 1
 *\li	*events is a valid list.
d353 1
a353 1
 *\li	Events in the event queue of 'task' whose sender is 'sender', whose
d359 1
a359 1
 *\li	The number of events unsent.
d365 1
a365 1
/*%<
d371 1
a371 1
 *\li	Shutdown events are posted in LIFO order.
d375 1
a375 1
 *\li	'task' is a valid task.
d377 1
a377 1
 *\li	'action' is a valid task action.
d381 1
a381 1
 *\li	When the task is shutdown, shutdown events requested with
d387 3
a389 3
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 *\li	#ISC_R_TASKSHUTTINGDOWN			Task is shutting down.
d394 1
a394 1
/*%<
d399 1
a399 1
 *\li	Shutting down a task causes any shutdown events requested with
d404 1
a404 1
 *\li	Trying to shutdown a task that has already been shutdown has no
d409 1
a409 1
 *\li	'task' is a valid task.
d413 1
a413 1
 *\li	Any shutdown events requested with isc_task_onshutdown() have been
d419 1
a419 1
/*%<
d424 1
a424 1
 *\li	This call is equivalent to:
a425 1
 *\code
a427 1
 *\endcode
d435 1
a435 1
 *\li	Any shutdown events requested with isc_task_onshutdown() have been
d438 3
a440 1
 *\li	*taskp == NULL
d442 1
a442 2
 *\li	If '*taskp' is the last reference to the task,
 *		all resources used by the task will be freed.
d447 1
a447 1
/*%<
d452 1
a452 1
 *\li	Only the first 15 characters of 'name' will be copied.
d454 1
a454 1
 *\li	Naming a task is currently only useful for debugging purposes.
d458 1
a458 1
 *\li	'task' is a valid task.
d463 1
a463 1
/*%<
d467 1
a467 1
 *\li	This function is for debugging purposes only.
d470 1
a470 1
 *\li	'task' is a valid task.
d473 1
a473 1
 *\li	A non-NULL pointer to a null-terminated string.
d481 1
a481 1
/*%<
d485 1
a485 1
 *\li	This function is for debugging purposes only.
d488 1
a488 1
 *\li	'task' is a valid task.
d493 1
a493 1
/*%<
d503 1
a503 1
 *\li	'task' is the calling task.
d506 2
a507 2
 *\li	#ISC_R_SUCCESS		The current task now has exclusive access.
 *\li	#ISC_R_LOCKBUSY		Another task has already requested exclusive
d513 1
a513 1
/*%<
d518 1
a518 1
 *\li	'task' is the calling task, and has obtained
d524 1
a524 1
/*%<
d529 2
a530 2
 *\li	'task' is a valid task.
 *\li	't' is a valid non NULL pointer.
d533 1
a533 1
 *\li	'*t' has the "current time".
d543 1
a543 1
/*%<
d548 1
a548 1
 *\li	'workers' in the number of worker threads to create.  In general,
d554 1
a554 1
 *\li	If 'default_quantum' is non-zero, then it will be used as the default
d560 1
a560 1
 *\li      'mctx' is a valid memory context.
d562 1
a562 1
 *\li	workers > 0
d564 1
a564 1
 *\li	managerp != NULL && *managerp == NULL
d568 1
a568 1
 *\li	On success, '*managerp' will be attached to the newly created task
d573 4
a576 4
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
 *\li	#ISC_R_NOTHREADS			No threads could be created.
 *\li	#ISC_R_UNEXPECTED		An unexpected error occurred.
d581 1
a581 1
/*%<
d586 1
a586 1
 *\li	Calling isc_taskmgr_destroy() will shutdown all tasks managed by
d590 1
a590 1
 *\li	isc_taskmgr_destroy() must not be called by a task event action,
d597 1
a597 1
 *\li	Task manager references are not reference counted, so the caller
d603 1
a603 1
 *\li	'*managerp' is a valid task manager.
d605 1
a605 1
 *\li	isc_taskmgr_destroy() has not be called previously on '*managerp'.
d609 1
a609 1
 *\li	All resources used by the task manager, and any tasks it managed,
@


