head	1.3;
access;
symbols
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2008.02.29.12.21.12;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2004.09.28.17.14.07;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.24.41;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.3
log
@replacement algorithm.  initialize a 64K-short buffer using Durstenfeld
shuffle. Upon allocation, swap-permute the new value to a random slot in
the 0..32K-1 th entry of the buffer as we move forward, ensuring randomness
but also satisfying the non-repeating property we need.  Inspired by Dillon's
implementation for ip id.
We believe this is easier to read though, initializes with less bias and wins
speed tests.
Thanks a lot to mcbride and djm for doing a bunch of statistical and speed
analysis, and comments from nordin
ok jakob djm mcbride
@
text
@/*
 * Portions Copyright (C) 2002  Internet Software Consortium.
 * Portions Copyright (C) 1997  Niels Provos.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $OpenBSD: lcg.h,v 1.2 2004/09/28 17:14:07 jakob Exp $ */

/*
 * Theo de Raadt <deraadt@@openbsd.org> came up with the idea of using
 * such a mathematical system to generate more random (yet non-repeating)
 * ids to solve the resolver/named problem.  But Niels designed the
 * actual system based on the constraints.
 */

/*
 * seed = random 15bit
 * n = prime, g0 = generator to n,
 * j = random so that gcd(j,n-1) == 1
 * g = g0^j mod n will be a generator again.
 *
 * X[0] = random seed.
 * X[n] = a*X[n-1]+b mod m is a Linear Congruential Generator
 * with a = 7^(even random) mod m, 
 *      b = random with gcd(b,m) == 1
 *      m = 31104 and a maximal period of m-1.
 *
 * The transaction id is determined by:
 * id[n] = seed xor (g^X[n] mod n)
 *
 * Effectivly the id is restricted to the lower 15 bits, thus
 * yielding two different cycles by toggling the msb on and off.
 * This avoids reuse issues caused by reseeding.
 *
 * The 16 bit space is very small and brute force attempts are
 * entirly feasible, we skip a random number of transaction ids
 * so that an attacker will not get sequential ids.
 */


#ifndef ISC_LCG_H
#define ISC_LCG_H 1

#include <isc/lang.h>
#include <isc/types.h>

typedef struct isc_lcg isc_lcg_t;

struct isc_lcg {
	isc_uint16_t ru_x;
	isc_uint16_t ru_seed, ru_seed2;
	isc_uint16_t ru_a, ru_b;
	isc_uint16_t ru_g;
	isc_uint16_t ru_counter;
	isc_uint16_t ru_msb;
	isc_uint32_t ru_reseed;
	isc_uint32_t random;
};

ISC_LANG_BEGINDECLS

void
isc_lcg_init(isc_lcg_t *lcg);
/*
 * Initialize a Linear Congruential Generator
 *
 * Requires:
 *
 *	lcg != NULL
 */

isc_uint16_t
isc_lcg_generate16(isc_lcg_t *lcg);
/*
 * Get a random number from a Linear Congruential Generator
 *
 * Requires:
 *
 *	lcg be valid.
 *
 *	data != NULL.
 */

ISC_LANG_ENDDECLS

#endif /* ISC_LCG_H */
@


1.2
log
@resolve conflicts
@
text
@d19 1
a19 1
/* $OpenBSD: lcg.h,v 1.6 2002/12/20 00:23:15 jakob Exp $ */
@


1.1
log
@add Linear Congruential Generator implementation
@
text
@@

