head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.38
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.36
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.32
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.34
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.26
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.30
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.28
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.24
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.22
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.20
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.03.02.22.39.12;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.37;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.37;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.42;	author jakob;	state Exp;
branches
	1.1.1.2.12.1;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.13;	author jakob;	state Exp;
branches;
next	;

1.1.1.2.12.1
date	2008.07.23.17.59.55;	author brad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@introduce a isc_random_uniform() function to return a uniformly distributed
number 0 < x <= upper_bound and use it to correct the last tiny bias in the
shuffle initialisation

feedback & ok deraadt@@
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2001  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: random.h,v 1.12.18.2 2005/04/29 00:17:01 marka Exp $ */

#ifndef ISC_RANDOM_H
#define ISC_RANDOM_H 1

#include <isc/lang.h>
#include <isc/types.h>

/*! \file
 * \brief Implements a random state pool which will let the caller return a
 * series of possibly non-reproducable random values.  
 *
 * Note that the
 * strength of these numbers is not all that high, and should not be
 * used in cryptography functions.  It is useful for jittering values
 * a bit here and there, such as timeouts, etc.
 */

ISC_LANG_BEGINDECLS

void
isc_random_seed(isc_uint32_t seed);
/*%<
 * Set the initial seed of the random state.
 */

void
isc_random_get(isc_uint32_t *val);
/*%<
 * Get a random value.
 *
 * Requires:
 *	val != NULL.
 */

isc_uint32_t
isc_random_jitter(isc_uint32_t max, isc_uint32_t jitter);
/*%<
 * Get a random value between (max - jitter) and (max).
 * This is useful for jittering timer values.
 */

isc_uint32_t
isc_random_uniform(isc_uint32_t upper_bound);
/*%<
 * Get a uniformly distributed random value < upper_bound.
 * Avoid bias when upper_bound is not a power of two.
 */

ISC_LANG_ENDDECLS

#endif /* ISC_RANDOM_H */
@


1.1
log
@Initial revision
@
text
@d2 1
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: random.h,v 1.11 2001/01/09 21:57:23 bwelling Exp $ */
d26 5
a30 3
/*
 * Implements a random state pool which will let the caller return a
 * series of possibly non-reproducable random values.  Note that the
d40 1
a40 1
/*
d46 1
a46 1
/*
d55 1
a55 1
/*
d58 7
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: random.h,v 1.11.206.1 2004/03/06 08:14:46 marka Exp $ */
@


1.1.1.2.12.1
log
@Vendor patch to add port randomization to deal with the DNS cache
poisoning attack.

Dynamically allocate fd_sets so we are not limited to FD_SETSIZE
connections.

Replacement Knuth shuffle algorithm for DNS id generation.

From djm@@
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d26 3
a28 5
/*! \file
 * \brief Implements a random state pool which will let the caller return a
 * series of possibly non-reproducable random values.  
 *
 * Note that the
d38 1
a38 1
/*%<
d44 1
a44 1
/*%<
d53 1
a53 1
/*%<
a55 7
 */

isc_uint32_t
isc_random_uniform(isc_uint32_t upper_bound);
/*%<
 * Get a uniformly distributed random value < upper_bound.
 * Avoid bias when upper_bound is not a power of two.
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: random.h,v 1.12.18.2 2005/04/29 00:17:01 marka Exp $ */
d26 3
a28 5
/*! \file
 * \brief Implements a random state pool which will let the caller return a
 * series of possibly non-reproducable random values.  
 *
 * Note that the
d38 1
a38 1
/*%<
d44 1
a44 1
/*%<
d53 1
a53 1
/*%<
@


