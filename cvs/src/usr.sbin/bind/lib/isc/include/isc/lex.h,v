head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.42
	OPENBSD_6_2_BASE:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.40
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.36
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.32
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.34
	OPENBSD_5_8_BASE:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.26
	OPENBSD_5_7_BASE:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.30
	OPENBSD_5_6_BASE:1.1.1.3
	OPENBSD_5_5:1.1.1.3.0.28
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.24
	OPENBSD_5_4_BASE:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.22
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.20
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.18
	OPENBSD_5_0:1.1.1.3.0.16
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.14
	OPENBSD_4_9_BASE:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.12
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.8
	OPENBSD_4_7_BASE:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.10
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	OPENBSD_4_3_BASE:1.1.1.3
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2003.01.20.21.07.36;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.36;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.40;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.14;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 1998-2002  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: lex.h,v 1.26.2.2 2002/02/08 03:57:40 marka Exp $ */

#ifndef ISC_LEX_H
#define ISC_LEX_H 1

/*****
 ***** Module Info
 *****/

/*
 * Lex
 *
 * The "lex" module provides a lightweight tokenizer.  It can operate
 * on files or buffers, and can handle "include".  It is designed for
 * parsing of DNS master files and the BIND configuration file, but
 * should be general enough to tokenize other things, e.g. HTTP.
 *
 * MP:
 *	No synchronization is provided.  Clients must ensure exclusive
 *	access.
 *
 * Reliability:
 *	No anticipated impact.
 *
 * Resources:
 *	<TBS>
 *
 * Security:
 *	No anticipated impact.
 *
 * Standards:
 * 	None.
 */

/***
 *** Imports
 ***/

#include <stdio.h>

#include <isc/lang.h>
#include <isc/region.h>
#include <isc/types.h>

ISC_LANG_BEGINDECLS

/***
 *** Options
 ***/

/*
 * Various options for isc_lex_gettoken().
 */

#define ISC_LEXOPT_EOL			0x01	/* Want end-of-line token. */
#define ISC_LEXOPT_EOF			0x02	/* Want end-of-file token. */
#define ISC_LEXOPT_INITIALWS		0x04	/* Want initial whitespace. */
#define ISC_LEXOPT_NUMBER		0x08	/* Recognize numbers. */
#define ISC_LEXOPT_QSTRING		0x10	/* Recognize qstrings. */

/*
 * The ISC_LEXOPT_DNSMULTILINE option handles the processing of '(' and ')' in
 * the DNS master file format.  If this option is set, then the
 * ISC_LEXOPT_INITIALWS and ISC_LEXOPT_EOL options will be ignored when
 * the paren count is > 0.  To use this option, '(' and ')' must be special
 * characters.
 */
#define ISC_LEXOPT_DNSMULTILINE		0x20	/* Handle '(' and ')'. */
#define ISC_LEXOPT_NOMORE		0x40	/* Want "no more" token. */

#define ISC_LEXOPT_CNUMBER		0x80    /* Regognise octal and hex */
#define ISC_LEXOPT_ESCAPE		0x100	/* Recognize escapes. */
#define ISC_LEXOPT_QSTRINGMULTILINE	0x200	/* Allow multiline "" strings */

/*
 * Various commenting styles, which may be changed at any time with
 * isc_lex_setcomments().
 */

#define ISC_LEXCOMMENT_C		0x01
#define ISC_LEXCOMMENT_CPLUSPLUS	0x02
#define ISC_LEXCOMMENT_SHELL		0x04
#define ISC_LEXCOMMENT_DNSMASTERFILE	0x08

/***
 *** Types
 ***/

/* Lex */

typedef char isc_lexspecials_t[256];

/* Tokens */

typedef enum {
	isc_tokentype_unknown = 0,
	isc_tokentype_string = 1,
	isc_tokentype_number = 2,
	isc_tokentype_qstring = 3,
	isc_tokentype_eol = 4,
	isc_tokentype_eof = 5,
	isc_tokentype_initialws = 6,
	isc_tokentype_special = 7,
	isc_tokentype_nomore = 8
} isc_tokentype_t;

typedef union {
	char				as_char;
	unsigned long			as_ulong;
	isc_region_t			as_region;
	isc_textregion_t		as_textregion;
	void *				as_pointer;
} isc_tokenvalue_t;

typedef struct isc_token {
	isc_tokentype_t			type;
	isc_tokenvalue_t		value;
} isc_token_t;

/***
 *** Functions
 ***/

isc_result_t
isc_lex_create(isc_mem_t *mctx, size_t max_token, isc_lex_t **lexp);
/*
 * Create a lexer.
 *
 * 'max_token' is a hint of the number of bytes in the largest token.
 *
 * Requires:
 *	'*lexp' is a valid lexer.
 *
 *	max_token > 0.
 *
 * Ensures:
 *	On success, *lexp is attached to the newly created lexer.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY
 */

void
isc_lex_destroy(isc_lex_t **lexp);
/*
 * Destroy the lexer.
 *
 * Requires:
 *	'*lexp' is a valid lexer.
 *
 * Ensures:
 *	*lexp == NULL
 */

unsigned int
isc_lex_getcomments(isc_lex_t *lex);
/*
 * Return the current lexer commenting styles.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 * Returns:
 *	The commenting sytles which are currently allowed.
 */

void
isc_lex_setcomments(isc_lex_t *lex, unsigned int comments);
/*
 * Set allowed lexer commenting styles.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'comments' has meaningful values.
 */

void
isc_lex_getspecials(isc_lex_t *lex, isc_lexspecials_t specials);
/*
 * Put the current list of specials into 'specials'.
 *
 * Requires:
 *	'lex' is a valid lexer.
 */

void
isc_lex_setspecials(isc_lex_t *lex, isc_lexspecials_t specials);
/*
 * The characters in 'specials' are returned as tokens.  Along with
 * whitespace, they delimit strings and numbers.
 *
 * Note:
 *	Comment processing takes precedence over special character
 *	recognition.
 *
 * Requires:
 *	'lex' is a valid lexer.
 */

isc_result_t
isc_lex_openfile(isc_lex_t *lex, const char *filename);
/*
 * Open 'filename' and make it the current input source for 'lex'.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	filename is a valid C string.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY			Out of memory
 *	ISC_R_NOTFOUND			File not found
 *	ISC_R_NOPERM			No permission to open file
 *	ISC_R_FAILURE			Couldn't open file, not sure why
 *	ISC_R_UNEXPECTED
 */

isc_result_t
isc_lex_openstream(isc_lex_t *lex, FILE *stream);
/*
 * Make 'stream' the current input source for 'lex'.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'stream' is a valid C stream.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY			Out of memory
 */

isc_result_t
isc_lex_openbuffer(isc_lex_t *lex, isc_buffer_t *buffer);
/*
 * Make 'buffer' the current input source for 'lex'.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'buffer' is a valid buffer.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMEMORY			Out of memory
 */

isc_result_t
isc_lex_close(isc_lex_t *lex);
/*
 * Close the most recently opened object (i.e. file or buffer).
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_NOMORE			No more input sources
 */

isc_result_t
isc_lex_gettoken(isc_lex_t *lex, unsigned int options, isc_token_t *tokenp);
/*
 * Get the next token.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'lex' has an input source.
 *
 *	'options' contains valid options.
 *
 *	'*tokenp' is a valid pointer.
 *
 * Returns:
 *	ISC_R_SUCCESS
 *	ISC_R_UNEXPECTEDEND
 *	ISC_R_NOMEMORY
 *
 *	These two results are returned only if their corresponding lexer
 *	options are not set.
 *
 *	ISC_R_EOF			End of input source
 *	ISC_R_NOMORE			No more input sources
 */

isc_result_t
isc_lex_getmastertoken(isc_lex_t *lex, isc_token_t *token,
		       isc_tokentype_t expect, isc_boolean_t eol);
/*
 * Get the next token from a DNS master file type stream.  This is a
 * convenience function that sets appropriate options and handles quoted
 * strings and end of line correctly for master files.  It also ungets
 * unexpected tokens.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'token' is a valid pointer
 *
 * Returns:
 *
 * 	any return code from isc_lex_gettoken.
 */

void
isc_lex_ungettoken(isc_lex_t *lex, isc_token_t *tokenp);
/*
 * Unget the current token.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'lex' has an input source.
 *
 *	'tokenp' points to a valid token.
 *
 *	There is no ungotten token already.
 */

void
isc_lex_getlasttokentext(isc_lex_t *lex, isc_token_t *tokenp, isc_region_t *r);
/*
 * Returns a region containing the text of the last token returned.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 *	'lex' has an input source.
 *
 *	'tokenp' points to a valid token.
 *
 *	A token has been gotten and not ungotten.
 */

char *
isc_lex_getsourcename(isc_lex_t *lex);
/*
 * Return the input source name.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 * Returns:
 * 	source name or NULL if no current source.
 *	result valid while current input source exists.
 */


unsigned long
isc_lex_getsourceline(isc_lex_t *lex);
/*
 * Return the input source line number.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 * Returns:
 * 	Current line number or 0 if no current source.
 */

isc_boolean_t
isc_lex_isfile(isc_lex_t *lex);
/*
 * Return whether the current input source is a file.
 *
 * Requires:
 *	'lex' is a valid lexer.
 *
 * Returns:
 * 	ISC_TRUE if the current input is a file,
 *	ISC_FALSE otherwise.
 */


ISC_LANG_ENDDECLS

#endif /* ISC_LEX_H */
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: lex.h,v 1.26.2.2.8.3 2004/03/08 09:04:51 marka Exp $ */
a376 15
 */

isc_result_t
isc_lex_setsourcename(isc_lex_t *lex, const char *name);
/*
 * Assigns a new name to the input source.
 *
 * Requires:
 *
 * 	'lex' is a valid lexer.
 *
 * Returns:
 * 	ISC_R_SUCCESS
 * 	ISC_R_NOMEMORY
 * 	ISC_R_NOTFOUND - there are no sources.
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: lex.h,v 1.30.18.3 2005/06/04 00:39:05 marka Exp $ */
d27 4
a30 2
/*! \file isc/lex.h
 * \brief The "lex" module provides a lightweight tokenizer.  It can operate
d35 1
a35 1
 * \li MP:
d39 1
a39 1
 * \li Reliability:
d42 2
a43 2
 * \li Resources:
 *	TBS
d45 1
a45 1
 * \li Security:
d48 1
a48 1
 * \li Standards:
d68 1
a68 2
/*@@{*/
/*!
d72 5
a76 6
#define ISC_LEXOPT_EOL			0x01	/*%< Want end-of-line token. */
#define ISC_LEXOPT_EOF			0x02	/*%< Want end-of-file token. */
#define ISC_LEXOPT_INITIALWS		0x04	/*%< Want initial whitespace. */
#define ISC_LEXOPT_NUMBER		0x08	/*%< Recognize numbers. */
#define ISC_LEXOPT_QSTRING		0x10	/*%< Recognize qstrings. */
/*@@}*/
d78 1
a78 2
/*@@{*/
/*!
d85 6
a90 2
#define ISC_LEXOPT_DNSMULTILINE		0x20	/*%< Handle '(' and ')'. */
#define ISC_LEXOPT_NOMORE		0x40	/*%< Want "no more" token. */
d92 1
a92 7
#define ISC_LEXOPT_CNUMBER		0x80    /*%< Regognize octal and hex. */
#define ISC_LEXOPT_ESCAPE		0x100	/*%< Recognize escapes. */
#define ISC_LEXOPT_QSTRINGMULTILINE	0x200	/*%< Allow multiline "" strings */
#define ISC_LEXOPT_OCTAL		0x400	/*%< Expect a octal number. */
/*@@}*/
/*@@{*/
/*!
a100 1
/*@@}*/
d106 1
a106 1
/*! Lex */
d143 1
a143 1
/*%<
d149 1
a149 1
 *\li	'*lexp' is a valid lexer.
d151 1
a151 1
 *\li	max_token > 0.
d154 1
a154 1
 *\li	On success, *lexp is attached to the newly created lexer.
d157 2
a158 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY
d163 1
a163 1
/*%<
d167 1
a167 1
 *\li	'*lexp' is a valid lexer.
d170 1
a170 1
 *\li	*lexp == NULL
d175 1
a175 1
/*%<
d179 1
a179 1
 *\li	'lex' is a valid lexer.
d182 1
a182 1
 *\li	The commenting sytles which are currently allowed.
d187 1
a187 1
/*%<
d191 1
a191 1
 *\li	'lex' is a valid lexer.
d193 1
a193 1
 *\li	'comments' has meaningful values.
d198 1
a198 1
/*%<
d202 1
a202 1
 *\li	'lex' is a valid lexer.
d207 1
a207 1
/*!<
d212 1
a212 1
 *\li	Comment processing takes precedence over special character
d216 1
a216 1
 *\li	'lex' is a valid lexer.
d221 1
a221 1
/*%<
d225 1
a225 1
 *\li	'lex' is a valid lexer.
d227 1
a227 1
 *\li	filename is a valid C string.
d230 6
a235 6
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY			Out of memory
 *\li	#ISC_R_NOTFOUND			File not found
 *\li	#ISC_R_NOPERM			No permission to open file
 *\li	#ISC_R_FAILURE			Couldn't open file, not sure why
 *\li	#ISC_R_UNEXPECTED
d240 1
a240 1
/*%<
d244 1
a244 1
 *\li	'lex' is a valid lexer.
d246 1
a246 1
 *\li	'stream' is a valid C stream.
d249 2
a250 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY			Out of memory
d255 1
a255 1
/*%<
d259 1
a259 1
 *\li	'lex' is a valid lexer.
d261 1
a261 1
 *\li	'buffer' is a valid buffer.
d264 2
a265 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMEMORY			Out of memory
d270 1
a270 1
/*%<
d274 2
a275 2
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_NOMORE			No more input sources
d280 1
a280 1
/*%<
d284 1
a284 1
 *\li	'lex' is a valid lexer.
d286 1
a286 1
 *\li	'lex' has an input source.
d288 1
a288 1
 *\li	'options' contains valid options.
d290 1
a290 1
 *\li	'*tokenp' is a valid pointer.
d293 3
a295 3
 *\li	#ISC_R_SUCCESS
 *\li	#ISC_R_UNEXPECTEDEND
 *\li	#ISC_R_NOMEMORY
d300 2
a301 2
 *\li	#ISC_R_EOF			End of input source
 *\li	#ISC_R_NOMORE			No more input sources
d307 1
a307 1
/*%<
d314 1
a314 18
 *\li	'lex' is a valid lexer.
 *
 *\li	'token' is a valid pointer
 *
 * Returns:
 *
 * \li	any return code from isc_lex_gettoken().
 */

isc_result_t
isc_lex_getoctaltoken(isc_lex_t *lex, isc_token_t *token, isc_boolean_t eol);
/*%<
 * Get the next token from a DNS master file type stream.  This is a
 * convenience function that sets appropriate options and handles end
 * of line correctly for master files.  It also ungets unexpected tokens.
 *
 * Requires:
 *\li	'lex' is a valid lexer.
d316 1
a316 1
 *\li	'token' is a valid pointer
d320 1
a320 1
 * \li	any return code from isc_lex_gettoken().
d325 1
a325 1
/*%<
d329 1
a329 1
 *\li	'lex' is a valid lexer.
d331 1
a331 1
 *\li	'lex' has an input source.
d333 1
a333 1
 *\li	'tokenp' points to a valid token.
d335 1
a335 1
 *\li	There is no ungotten token already.
d340 1
a340 1
/*%<
d344 1
a344 1
 *\li	'lex' is a valid lexer.
d346 1
a346 1
 *\li	'lex' has an input source.
d348 1
a348 1
 *\li	'tokenp' points to a valid token.
d350 1
a350 1
 *\li	A token has been gotten and not ungotten.
d355 1
a355 1
/*%<
d359 1
a359 1
 *\li	'lex' is a valid lexer.
d362 2
a363 2
 * \li	source name or NULL if no current source.
 *\li	result valid while current input source exists.
d369 1
a369 1
/*%<
d373 1
a373 1
 *\li	'lex' is a valid lexer.
d376 1
a376 1
 *\li 	Current line number or 0 if no current source.
d381 1
a381 1
/*%<
d386 1
a386 1
 * \li	'lex' is a valid lexer.
d389 3
a391 3
 * \li	#ISC_R_SUCCESS
 * \li	#ISC_R_NOMEMORY
 * \li	#ISC_R_NOTFOUND - there are no sources.
d396 1
a396 1
/*%<
d400 1
a400 1
 *\li	'lex' is a valid lexer.
d403 2
a404 2
 * \li	#ISC_TRUE if the current input is a file,
 *\li	#ISC_FALSE otherwise.
@


