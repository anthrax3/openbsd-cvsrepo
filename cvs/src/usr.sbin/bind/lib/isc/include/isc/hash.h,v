head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.42
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.40
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.26
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	BIND_9_4_2_P1:1.1.1.2
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	BIND_9_4_2:1.1.1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	BIND_9_3_4:1.1.1.1
	BIND_9_3_3:1.1.1.1
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	BIND_9_3_2:1.1.1.1
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	BIND_9_3_1:1.1.1.1
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	BIND_9_3_0:1.1.1.1
	ISC:1.1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.28.17.14.07;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.18.14.14.07;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.28.16.35.40;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.09.12.34.13;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.3
log
@resolve conflicts
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 2003  Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: hash.h,v 1.4.18.2 2005/04/29 00:16:55 marka Exp $ */

#ifndef ISC_HASH_H
#define ISC_HASH_H 1

/*****
 ***** Module Info
 *****/

/*! \file
 *
 * \brief The hash API
 *	provides an unpredictable hash value for variable length data.
 *	A hash object contains a random vector (which is hidden from clients
 *	of this API) to make the actual hash value unpredictable.
 *
 *	The algorithm used in the API guarantees the probability of hash
 *	collision; in the current implementation, as long as the values stored
 *	in the random vector are unpredictable, the probability of hash
 *	collision between arbitrary two different values is at most 1/2^16.
 *
 *	Altough the API is generic about the hash keys, it mainly expects
 *	DNS names (and sometimes IPv4/v6 addresses) as inputs.  It has an
 *	upper limit of the input length, and may run slow to calculate the
 *	hash values for large inputs.
 *
 *	This API is designed to be general so that it can provide multiple
 *	different hash contexts that have different random vectors.  However,
 *	it should be typical to have a single context for an entire system.
 *	To support such cases, the API also provides a single-context mode.
 *
 * \li MP:
 *	The hash object is almost read-only.  Once the internal random vector
 *	is initialized, no write operation will occur, and there will be no
 *	need to lock the object to calculate actual hash values.
 *
 * \li Reliability:
 *	In some cases this module uses low-level data copy to initialize the
 *	random vector.  Errors in this part are likely to crash the server or
 *	corrupt memory.
 *
 * \li Resources:
 *	A buffer, used as a random vector for calculating hash values.
 *
 * \li Security:
 *	This module intends to provide unpredictable hash values in
 *	adversarial environments in order to avoid denial of service attacks
 *	to hash buckets.
 *	Its unpredictability relies on the quality of entropy to build the
 *	random vector.
 *
 * \li Standards:
 *	None.
 */

/***
 *** Imports
 ***/

#include <isc/types.h>

/***
 *** Functions
 ***/
ISC_LANG_BEGINDECLS

isc_result_t
isc_hash_ctxcreate(isc_mem_t *mctx, isc_entropy_t *entropy, unsigned int limit,
		   isc_hash_t **hctx);
isc_result_t
isc_hash_create(isc_mem_t *mctx, isc_entropy_t *entropy, size_t limit);
/*!<
 * \brief Create a new hash object.
 *
 * isc_hash_ctxcreate() creates a different object.
 *
 * isc_hash_create() creates a module-internal object to support the
 * single-context mode.  It should be called only once.
 *
 * 'entropy' must be NULL or a valid entropy object.  If 'entropy' is NULL,
 * pseudo random values will be used to build the random vector, which may
 * weaken security.
 *
 * 'limit' specifies the maximum number of hash keys.  If it is too large,
 * these functions may fail.
 */

void
isc_hash_ctxattach(isc_hash_t *hctx, isc_hash_t **hctxp);
/*!<
 * \brief Attach to a hash object.
 *
 * This function is only necessary for the multiple-context mode.
 */

void
isc_hash_ctxdetach(isc_hash_t **hctxp);
/*!<
 * \brief Detach from a hash object.
 *
 * This function  is for the multiple-context mode, and takes a valid
 * hash object as an argument.
 */

void
isc_hash_destroy(void);
/*!<
 * \brief This function is for the single-context mode, and is expected to be used
 * as a counterpart of isc_hash_create().
 *
 * A valid module-internal hash object must have been created, and this
 * function should be called only once.
 */

/*@@{*/
void
isc_hash_ctxinit(isc_hash_t *hctx);
void
isc_hash_init(void);
/*!<
 * \brief Initialize a hash object.  
 *
 * It fills in the random vector with a proper
 * source of entropy, which is typically from the entropy object specified
 * at the creation.  Thus, it is desirable to call these functions after
 * initializing the entropy object with some good entropy sources.
 *
 * These functions should be called before the first hash calculation.
 *
 * isc_hash_ctxinit() is for the multiple-context mode, and takes a valid hash
 * object as an argument.
 *
 * isc_hash_init() is for the single-context mode.  A valid module-internal
 * hash object must have been created, and this function should be called only
 * once.
 */
/*@@}*/

/*@@{*/
unsigned int
isc_hash_ctxcalc(isc_hash_t *hctx, const unsigned char *key,
		 unsigned int keylen, isc_boolean_t case_sensitive);
unsigned int
isc_hash_calc(const unsigned char *key, unsigned int keylen,
	      isc_boolean_t case_sensitive);
/*!<
 * \brief Calculate a hash value.
 *
 * isc_hash_ctxinit() is for the multiple-context mode, and takes a valid hash
 * object as an argument.
 *
 * isc_hash_init() is for the single-context mode.  A valid module-internal
 * hash object must have been created.
 *
 * 'key' is the hash key, which is a variable length buffer.
 *
 * 'keylen' specifies the key length, which must not be larger than the limit
 * specified for the corresponding hash object.
 *
 * 'case_sensitive' specifies whether the hash key should be treated as
 * case_sensitive values.  It should typically be ISC_FALSE if the hash key
 * is a DNS name.
 */
/*@@}*/

ISC_LANG_ENDDECLS

#endif /* ISC_HASH_H */
@


1.2
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: hash.h,v 1.2.2.1.2.2 2004/03/06 08:14:41 marka Exp $ */
d27 1
a27 2
/*
 * Hash
d29 2
a30 3
 * The hash API
 *
 *	Provides an unpredictable hash value for variable length data.
d49 1
a49 1
 * MP:
d54 1
a54 1
 * Reliability:
d59 1
a59 1
 * Resources:
d62 1
a62 1
 * Security:
d69 1
a69 1
 * Standards:
d89 2
a90 2
/*
 * Create a new hash object.
d93 1
d107 3
a109 2
/*
 * Attach to a hash object.
d115 2
a116 2
/*
 * Detach from a hash object.
d124 2
a125 2
/*
 * This function is for the single-context mode, and is expected to be used
d127 1
d132 1
d137 4
a140 2
/*
 * Initialize a hash object.  It fills in the random vector with a proper
d149 1
d154 1
d156 1
d163 2
a164 2
/*
 * Calculate a hash value.
d168 1
d173 1
d181 1
@


1.1
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 1
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: hash.h,v 1.2.2.1 2003/07/25 07:30:43 marka Exp $ */
d43 2
a44 2
 *	upper limit of the input length, and may run slow to calculaate the
 *	has values for large inputs.
@


1.1.1.1
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a1 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: hash.h,v 1.2.2.1.2.2 2004/03/06 08:14:41 marka Exp $ */
d43 2
a44 2
 *	upper limit of the input length, and may run slow to calculate the
 *	hash values for large inputs.
@


1.1.1.2
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 1
/* $ISC: hash.h,v 1.4.18.2 2005/04/29 00:16:55 marka Exp $ */
d27 2
a28 1
/*! \file
d30 3
a32 2
 * \brief The hash API
 *	provides an unpredictable hash value for variable length data.
d51 1
a51 1
 * \li MP:
d56 1
a56 1
 * \li Reliability:
d61 1
a61 1
 * \li Resources:
d64 1
a64 1
 * \li Security:
d71 1
a71 1
 * \li Standards:
d91 2
a92 2
/*!<
 * \brief Create a new hash object.
a94 1
 *
d108 2
a109 3
/*!<
 * \brief Attach to a hash object.
 *
d115 2
a116 2
/*!<
 * \brief Detach from a hash object.
d124 2
a125 2
/*!<
 * \brief This function is for the single-context mode, and is expected to be used
a126 1
 *
a130 1
/*@@{*/
d135 2
a136 4
/*!<
 * \brief Initialize a hash object.  
 *
 * It fills in the random vector with a proper
a144 1
 *
a148 1
/*@@}*/
a149 1
/*@@{*/
d156 2
a157 2
/*!<
 * \brief Calculate a hash value.
a160 1
 *
a164 1
 *
a171 1
/*@@}*/
@


