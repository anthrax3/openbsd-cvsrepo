head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.16
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.22
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.20
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.18
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.16
	OPENBSD_5_0:1.8.0.14
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.12
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.10
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.6
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.8
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	BIND_9_4_2_P1:1.1.1.3
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	BIND_9_4_2:1.1.1.3
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	BIND_9_3_4:1.1.1.2
	BIND_9_3_3:1.1.1.2
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	BIND_9_3_2:1.1.1.2
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	BIND_9_3_1:1.1.1.2
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2013.09.02.21.59.37;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.09.23.05.42;	author djm;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.04.00.50.23;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.02.22.39.12;	author djm;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2007.12.09.13.39.44;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.07;	author jakob;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	2003.11.18.14.14.07;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.20.21.30.07;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.07.34;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.07.34;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.35.36;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.09.12.34.03;	author jakob;	state Exp;
branches;
next	;

1.4.12.1
date	2008.07.23.17.59.55;	author brad;	state Exp;
branches;
next	;

1.6.2.1
date	2008.07.23.17.39.39;	author brad;	state Exp;
branches;
next	;


desc
@@


1.9
log
@There is no need to call arc4random_addrandom() and feed it some
stupid seed that bind has decided on..
@
text
@/*
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
 * Copyright (C) 2008 Damien Miller
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/* $ISC: random.c,v 1.21.18.2 2005/04/29 00:16:48 marka Exp $ */

/*! \file */

#include <config.h>

#include <stdlib.h>
#include <time.h>		/* Required for time(). */
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include <isc/mutex.h>
#include <isc/once.h>
#include <isc/random.h>
#include <isc/string.h>
#include <isc/util.h>

static isc_once_t once = ISC_ONCE_INIT;

static void
initialize_rand(void)
{
#ifndef HAVE_ARC4RANDOM
	unsigned int pid = getpid();
	
	/*
	 * The low bits of pid generally change faster.
	 * Xor them with the high bits of time which change slowly.
	 */
	pid = ((pid << 16) & 0xffff0000) | ((pid >> 16) & 0xffff);

	srand(time(NULL) ^ pid);
#endif
}

static void
initialize(void)
{
	RUNTIME_CHECK(isc_once_do(&once, initialize_rand) == ISC_R_SUCCESS);
}

void
isc_random_seed(isc_uint32_t seed)
{
	initialize();

#ifndef HAVE_ARC4RANDOM
	srand(seed);
#endif
}

void
isc_random_get(isc_uint32_t *val)
{
	REQUIRE(val != NULL);

	initialize();

#ifndef HAVE_ARC4RANDOM
	/*
	 * rand()'s lower bits are not random.
	 * rand()'s upper bit is zero.
	 */
	*val = ((rand() >> 4) & 0xffff) | ((rand() << 12) & 0xffff0000);
#else
	*val = arc4random();
#endif
}

isc_uint32_t
isc_random_uniform(isc_uint32_t upper_bound)
{
	isc_uint32_t r, min;

	/*
	 * Uniformity is achieved by generating new random numbers until
	 * the one returned is outside the range [0, 2**32 % upper_bound).
	 * This guarantees the selected random number will be inside
	 * [2**32 % upper_bound, 2**32) which maps back to [0, upper_bound)
	 * after reduction modulo upper_bound.
	 */

	if (upper_bound < 2)
		return 0;

#if (ULONG_MAX > 0xffffffffUL)
	min = 0x100000000UL % upper_bound;
#else
	/* Calculate (2**32 % upper_bound) avoiding 64-bit math */
	if (upper_bound > 0x80000000)
		min = 1 + ~upper_bound;		/* 2**32 - upper_bound */
	else {
		/* (2**32 - x) % x == 2**32 % x when x <= 2**31 */
		min = ((0xffffffff - upper_bound) + 1) % upper_bound;
	}
#endif

	/*
	 * This could theoretically loop forever doing this, but each retry
	 * has p > 0.5 (worst case, usually far better) of selecting a
	 * number inside the range we need, so it should rarely need to
	 * re-roll.
	 */
	for (;;) {
		isc_random_get(&r);
		if (r >= min)
			break;
	}

	return r % upper_bound;
}

isc_uint32_t
isc_random_jitter(isc_uint32_t max, isc_uint32_t jitter) {
	REQUIRE(jitter < max);
	if (jitter == 0)
		return (max);
	else
		return max - isc_random_uniform(jitter);
}

@


1.8
log
@simplify math for arc4random_uniform() suggested by
Jinmei_Tatuya AT isc.org via jakob@@

empirically verified for entire domain of upper_bound
@
text
@a70 2
#else
	arc4random_addrandom((u_char *) &seed, sizeof(isc_uint32_t));
@


1.7
log
@fix math screwup that reintroduced a bias for upper_bounds in range
(2^30,2^31). Nothing in the tree yet requests random numbers bounded
by this range.

report jakob!deraadt; ok deraadt@@
@
text
@d117 2
a118 2
		/* (2**32 - (x * 2)) % x == 2**32 % x when x <= 2**31 */
		min = ((0xffffffff - (upper_bound * 2)) + 1) % upper_bound;
@


1.6
log
@introduce a isc_random_uniform() function to return a uniformly distributed
number 0 < x <= upper_bound and use it to correct the last tiny bias in the
shuffle initialisation

feedback & ok deraadt@@
@
text
@d118 1
a118 1
		min = ((0xffffffff - (upper_bound << 2)) + 1) % upper_bound;
@


1.6.2.1
log
@Vendor patch to add port randomization to deal with the DNS cache
poisoning attack.

Dynamically allocate fd_sets so we are not limited to FD_SETSIZE
connections.

From djm@@
@
text
@d117 2
a118 2
		/* (2**32 - x) % x == 2**32 % x when x <= 2**31 */
		min = ((0xffffffff - upper_bound) + 1) % upper_bound;
@


1.5
log
@resolve conflicts
@
text
@d4 1
d95 43
d143 1
a143 5
#ifndef HAVE_ARC4RANDOM
		return (max - rand() % jitter);
#else
		return (max - arc4random() % jitter);
#endif
d145 1
@


1.4
log
@resolve conflicts
@
text
@d2 1
a2 1
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
d18 3
a20 1
/* $ISC: random.c,v 1.15.74.5 2004/03/08 09:04:49 marka Exp $ */
@


1.4.12.1
log
@Vendor patch to add port randomization to deal with the DNS cache
poisoning attack.

Dynamically allocate fd_sets so we are not limited to FD_SETSIZE
connections.

Replacement Knuth shuffle algorithm for DNS id generation.

From djm@@
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
a3 1
 * Copyright (C) 2008 Damien Miller
a19 2
/*! \file */

a91 43
isc_random_uniform(isc_uint32_t upper_bound)
{
	isc_uint32_t r, min;

	/*
	 * Uniformity is achieved by generating new random numbers until
	 * the one returned is outside the range [0, 2**32 % upper_bound).
	 * This guarantees the selected random number will be inside
	 * [2**32 % upper_bound, 2**32) which maps back to [0, upper_bound)
	 * after reduction modulo upper_bound.
	 */

	if (upper_bound < 2)
		return 0;

#if (ULONG_MAX > 0xffffffffUL)
	min = 0x100000000UL % upper_bound;
#else
	/* Calculate (2**32 % upper_bound) avoiding 64-bit math */
	if (upper_bound > 0x80000000)
		min = 1 + ~upper_bound;		/* 2**32 - upper_bound */
	else {
		/* (2**32 - x) % x == 2**32 % x when x <= 2**31 */
		min = ((0xffffffff - upper_bound) + 1) % upper_bound;
	}
#endif

	/*
	 * This could theoretically loop forever doing this, but each retry
	 * has p > 0.5 (worst case, usually far better) of selecting a
	 * number inside the range we need, so it should rarely need to
	 * re-roll.
	 */
	for (;;) {
		isc_random_get(&r);
		if (r >= min)
			break;
	}

	return r % upper_bound;
}

isc_uint32_t
d97 5
a101 1
		return max - isc_random_uniform(jitter);
a102 1

@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d2 2
a3 1
 * Copyright (C) 1999-2001, 2003  Internet Software Consortium.
d9 7
a15 8
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: random.c,v 1.15.2.4 2003/10/09 07:32:49 marka Exp $ */
d44 1
a44 1

d85 1
a85 1
	*val = ((rand() >> 4) & 0xffff) | ((rand() << 12) & 0xffff0000) ;
@


1.2
log
@use arc4random() instead of rand() if availible
@
text
@d2 1
a2 1
 * Copyright (C) 1999-2001  Internet Software Consortium.
d18 1
a18 1
/* $ISC: random.c,v 1.15 2001/01/09 21:56:22 bwelling Exp $ */
d24 6
d43 9
a51 1
	srand(time(NULL));
d81 5
a85 1
	*val = rand();
@


1.1
log
@Initial revision
@
text
@d36 1
d38 1
d52 1
d54 3
d66 1
d68 3
d79 1
d81 3
@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@d2 1
a2 2
 * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")
 * Copyright (C) 1999-2003  Internet Software Consortium.
d8 8
a15 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d18 1
a18 1
/* $ISC: random.c,v 1.15.74.5 2004/03/08 09:04:49 marka Exp $ */
a23 6
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
d36 1
a36 11
#ifndef HAVE_ARC4RANDOM
	unsigned int pid = getpid();
	
	/*
	 * The low bits of pid generally change faster.
	 * Xor them with the high bits of time which change slowly.
	 */
	pid = ((pid << 16) & 0xffff0000) | ((pid >> 16) & 0xffff);

	srand(time(NULL) ^ pid);
#endif
a49 1
#ifndef HAVE_ARC4RANDOM
a50 3
#else
	arc4random_addrandom((u_char *) &seed, sizeof(isc_uint32_t));
#endif
d60 1
a60 9
#ifndef HAVE_ARC4RANDOM
	/*
	 * rand()'s lower bits are not random.
	 * rand()'s upper bit is zero.
	 */
	*val = ((rand() >> 4) & 0xffff) | ((rand() << 12) & 0xffff0000);
#else
	*val = arc4random();
#endif
a68 1
#ifndef HAVE_ARC4RANDOM
a69 3
#else
		return (max - arc4random() % jitter);
#endif
@


1.1.1.3
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 * Copyright (C) 2004, 2005  Internet Systems Consortium, Inc. ("ISC")
d18 1
a18 3
/* $ISC: random.c,v 1.21.18.2 2005/04/29 00:16:48 marka Exp $ */

/*! \file */
@


