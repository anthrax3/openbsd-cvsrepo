head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.36
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.32
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.34
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.26
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.30
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.28
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.24
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.22
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.20
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.18
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2008.07.09.17.07.32;	author reyk;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2008.03.15.04.57.50;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.02.22.39.12;	author djm;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2008.02.29.12.21.12;	author deraadt;	state Exp;
branches;
next	;

1.2.2.1
date	2008.07.23.17.39.39;	author brad;	state Exp;
branches;
next	;

1.4.2.1
date	2008.07.23.17.59.55;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove an unused variable that is a leftover from the old alg.

ok deraadt@@
@
text
@/*
 * Portions Copyright (C) 2008 Theo de Raadt
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
 * DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/* $OpenBSD: shuffle.c,v 1.3 2008/03/15 04:57:50 djm Exp $ */

#include <config.h>

#include <stdlib.h>

#include <isc/shuffle.h>
#include <isc/random.h>
#include <isc/time.h>
#include <isc/util.h>

#define VALID_SHUFFLE(x)	(x != NULL)

void
isc_shuffle_init(isc_shuffle_t *shuffle)
{
	int i, i2;

	REQUIRE(VALID_SHUFFLE(shuffle));

	shuffle->isindex = 0;
	/* Initialize using a Knuth shuffle */
	for (i = 0; i < 65536; ++i) {
		i2 = isc_random_uniform(i + 1);
		shuffle->id_shuffle[i] = shuffle->id_shuffle[i2];
		shuffle->id_shuffle[i2] = i;
	}
}

isc_uint16_t
isc_shuffle_generate16(isc_shuffle_t *shuffle)
{
	isc_uint32_t si;
	isc_uint16_t r;
	int i, i2;

	REQUIRE(VALID_SHUFFLE(shuffle));

	do {
		isc_random_get(&si);
		i = shuffle->isindex & 0xFFFF;
		i2 = (shuffle->isindex - (si & 0x7FFF)) & 0xFFFF;
		r = shuffle->id_shuffle[i];
		shuffle->id_shuffle[i] = shuffle->id_shuffle[i2];
		shuffle->id_shuffle[i2] = r;
		shuffle->isindex++;
	} while (r == 0);

	return (r);
}
@


1.4.2.1
log
@Vendor patch to add port randomization to deal with the DNS cache
poisoning attack.

Dynamically allocate fd_sets so we are not limited to FD_SETSIZE
connections.

Replacement Knuth shuffle algorithm for DNS id generation.

From djm@@
@
text
@d18 1
a18 1
/* $OpenBSD: shuffle.c,v 1.4 2008/07/09 17:07:32 reyk Exp $ */
@


1.3
log
@Because the shuffle code initialisation is a specific case of shuffling
a set of incrementing integers (and not an arbitrary set of values) it
is possible to populate the array as we shuffle it in a single forward
pass. Clever optimisation from didickman AT gmail.com;
ok deraadt@@ mcbride@@

(same change as netinet/ip_id.c)
@
text
@d18 1
a18 1
/* $OpenBSD: shuffle.c,v 1.2 2008/03/02 22:39:12 djm Exp $ */
a33 1
	isc_uint16_t r;
@


1.2
log
@introduce a isc_random_uniform() function to return a uniformly distributed
number 0 < x <= upper_bound and use it to correct the last tiny bias in the
shuffle initialisation

feedback & ok deraadt@@
@
text
@d18 1
a18 1
/* $OpenBSD: shuffle.c,v 1.1 2008/02/29 12:21:12 deraadt Exp $ */
d40 2
a41 5
	for (i = 0; i < 65536; ++i)
		shuffle->id_shuffle[i] = i;

	/* Initialize using a Durstenfeld shuffle */
	for (i = 65536; --i; ) {
a42 1
		r = shuffle->id_shuffle[i];
d44 1
a44 1
		shuffle->id_shuffle[i2] = r;
@


1.2.2.1
log
@Vendor patch to add port randomization to deal with the DNS cache
poisoning attack.

Dynamically allocate fd_sets so we are not limited to FD_SETSIZE
connections.

From djm@@
@
text
@d18 1
a18 1
/* $OpenBSD: shuffle.c,v 1.2 2008/03/02 22:39:12 djm Exp $ */
d34 1
d40 5
a44 2
	/* Initialize using a Knuth shuffle */
	for (i = 0; i < 65536; ++i) {
d46 1
d48 1
a48 1
		shuffle->id_shuffle[i2] = i;
@


1.1
log
@replacement algorithm.  initialize a 64K-short buffer using Durstenfeld
shuffle. Upon allocation, swap-permute the new value to a random slot in
the 0..32K-1 th entry of the buffer as we move forward, ensuring randomness
but also satisfying the non-repeating property we need.  Inspired by Dillon's
implementation for ip id.
We believe this is easier to read though, initializes with less bias and wins
speed tests.
Thanks a lot to mcbride and djm for doing a bunch of statistical and speed
analysis, and comments from nordin
ok jakob djm mcbride
@
text
@d18 1
a18 1
/* $OpenBSD: shuffle.c,v 1.2 2004/09/28 17:14:07 jakob Exp $ */
a33 1
	isc_uint32_t si;
d45 1
a45 3
		isc_random_get(&si);
		/* disregard the modulo bias because it is small */
		i2 = (si % (i + 1)) & 0xffff;
@

