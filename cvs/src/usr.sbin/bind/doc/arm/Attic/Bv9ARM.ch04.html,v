head	1.9;
access;
symbols
	OPENBSD_5_6:1.8.0.30
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.28
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.24
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.22
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.20
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.18
	OPENBSD_5_0:1.8.0.16
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	BIND_9_4_2_P1:1.1.1.6
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	BIND_9_4_2:1.1.1.6
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	BIND_9_3_4:1.1.1.5
	BIND_9_3_3:1.1.1.5
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	BIND_9_3_2:1.1.1.4
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	BIND_9_3_1:1.1.1.3
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	BIND_9_3_0:1.1.1.2
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	BIND_9_2_2_RC1:1.1.1.1
	ISC:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.08.25.07.08.34;	author brad;	state dead;
branches;
next	1.8;
commitid	zKogyOACFMOV70QE;

1.8
date	2007.12.09.13.39.43;	author jakob;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.10.19.07.59;	author jakob;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.05.17.36.34;	author jakob;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.22.16.52.39;	author jakob;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.28.17.14.05;	author jakob;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.14.14.06;	author jakob;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.05.09.18.32;	author jakob;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.20.21.06.50;	author jakob;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.20.21.06.50;	author jakob;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.09.28.16.34.27;	author jakob;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.03.22.16.37.24;	author jakob;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.05.16.43.10;	author jakob;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.01.10.18.19.17;	author jakob;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2007.12.09.12.33.31;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Start removing unused documentation and the server and related binaries source
code.
@
text
@<!--
 - Copyright (C) 2004-2007 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000-2003 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: Bv9ARM.ch04.html,v 1.40.18.41 2007/10/31 01:35:57 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Chapter 4. Advanced DNS Features</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
<link rel="start" href="Bv9ARM.html" title="BIND 9 Administrator Reference Manual">
<link rel="up" href="Bv9ARM.html" title="BIND 9 Administrator Reference Manual">
<link rel="prev" href="Bv9ARM.ch03.html" title="Chapter 3. Name Server Configuration">
<link rel="next" href="Bv9ARM.ch05.html" title="Chapter 5. The BIND 9 Lightweight Resolver">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<div class="navheader">
<table width="100%" summary="Navigation header">
<tr><th colspan="3" align="center">Chapter 4. Advanced DNS Features</th></tr>
<tr>
<td width="20%" align="left">
<a accesskey="p" href="Bv9ARM.ch03.html">Prev</a> </td>
<th width="60%" align="center"> </th>
<td width="20%" align="right"> <a accesskey="n" href="Bv9ARM.ch05.html">Next</a>
</td>
</tr>
</table>
<hr>
</div>
<div class="chapter" lang="en">
<div class="titlepage"><div><div><h2 class="title">
<a name="Bv9ARM.ch04"></a>Chapter 4. Advanced DNS Features</h2></div></div></div>
<div class="toc">
<p><b>Table of Contents</b></p>
<dl>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#notify">Notify</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#dynamic_update">Dynamic Update</a></span></dt>
<dd><dl><dt><span class="sect2"><a href="Bv9ARM.ch04.html#journal">The journal file</a></span></dt></dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#incremental_zone_transfers">Incremental Zone Transfers (IXFR)</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2570642">Split DNS</a></span></dt>
<dd><dl><dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2570660">Example split DNS setup</a></span></dt></dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#tsig">TSIG</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571095">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571169">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571179">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571219">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571413">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571458">Errors</a></span></dt>
</dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2571472">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2571521">SIG(0)</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#DNSSEC">DNSSEC</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571725">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571795">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571874">Configuring Servers</a></span></dt>
</dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2572153">IPv6 Support in <acronym class="acronym">BIND</acronym> 9</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2572215">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2572236">Address to Name Lookups Using Nibble Format</a></span></dt>
</dl></dd>
</dl>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="notify"></a>Notify</h2></div></div></div>
<p>
        <acronym class="acronym">DNS</acronym> NOTIFY is a mechanism that allows master
        servers to notify their slave servers of changes to a zone's data. In
        response to a <span><strong class="command">NOTIFY</strong></span> from a master server, the
        slave will check to see that its version of the zone is the
        current version and, if not, initiate a zone transfer.
      </p>
<p>
        For more information about <acronym class="acronym">DNS</acronym>
        <span><strong class="command">NOTIFY</strong></span>, see the description of the
        <span><strong class="command">notify</strong></span> option in <a href="Bv9ARM.ch06.html#boolean_options" title="Boolean Options">the section called &#8220;Boolean Options&#8221;</a> and
        the description of the zone option <span><strong class="command">also-notify</strong></span> in
        <a href="Bv9ARM.ch06.html#zone_transfers" title="Zone Transfers">the section called &#8220;Zone Transfers&#8221;</a>.  The <span><strong class="command">NOTIFY</strong></span>
        protocol is specified in RFC 1996.
      </p>
<div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Note</h3>
        As a slave zone can also be a master to other slaves, named,
        by default, sends <span><strong class="command">NOTIFY</strong></span> messages for every zone
        it loads.  Specifying <span><strong class="command">notify master-only;</strong></span> will
        cause named to only send <span><strong class="command">NOTIFY</strong></span> for master
        zones that it loads.
      </div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="dynamic_update"></a>Dynamic Update</h2></div></div></div>
<p>
        Dynamic Update is a method for adding, replacing or deleting
        records in a master server by sending it a special form of DNS
        messages.  The format and meaning of these messages is specified
        in RFC 2136.
      </p>
<p>
        Dynamic update is enabled by
        including an <span><strong class="command">allow-update</strong></span> or
        <span><strong class="command">update-policy</strong></span> clause in the
        <span><strong class="command">zone</strong></span> statement.
      </p>
<p>
        Updating of secure zones (zones using DNSSEC) follows
        RFC 3007: RRSIG and NSEC records affected by updates are automatically
            regenerated by the server using an online zone key.
        Update authorization is based
        on transaction signatures and an explicit server policy.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="journal"></a>The journal file</h3></div></div></div>
<p>
          All changes made to a zone using dynamic update are stored
          in the zone's journal file.  This file is automatically created
          by the server when the first dynamic update takes place.
          The name of the journal file is formed by appending the extension
          <code class="filename">.jnl</code> to the name of the
          corresponding zone
          file unless specifically overridden.  The journal file is in a
          binary format and should not be edited manually.
        </p>
<p>
          The server will also occasionally write ("dump")
          the complete contents of the updated zone to its zone file.
          This is not done immediately after
          each dynamic update, because that would be too slow when a large
          zone is updated frequently.  Instead, the dump is delayed by
          up to 15 minutes, allowing additional updates to take place.
        </p>
<p>
          When a server is restarted after a shutdown or crash, it will replay
              the journal file to incorporate into the zone any updates that
          took
          place after the last zone dump.
        </p>
<p>
          Changes that result from incoming incremental zone transfers are
          also
          journalled in a similar way.
        </p>
<p>
          The zone files of dynamic zones cannot normally be edited by
          hand because they are not guaranteed to contain the most recent
          dynamic changes &#8212; those are only in the journal file.
          The only way to ensure that the zone file of a dynamic zone
          is up to date is to run <span><strong class="command">rndc stop</strong></span>.
        </p>
<p>
          If you have to make changes to a dynamic zone
          manually, the following procedure will work: Disable dynamic updates
              to the zone using
          <span><strong class="command">rndc freeze <em class="replaceable"><code>zone</code></em></strong></span>.
          This will also remove the zone's <code class="filename">.jnl</code> file
          and update the master file.  Edit the zone file.  Run
          <span><strong class="command">rndc thaw <em class="replaceable"><code>zone</code></em></strong></span>
          to reload the changed zone and re-enable dynamic updates.
        </p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="incremental_zone_transfers"></a>Incremental Zone Transfers (IXFR)</h2></div></div></div>
<p>
        The incremental zone transfer (IXFR) protocol is a way for
        slave servers to transfer only changed data, instead of having to
        transfer the entire zone. The IXFR protocol is specified in RFC
        1995. See <a href="Bv9ARM.ch09.html#proposed_standards">Proposed Standards</a>.
      </p>
<p>
        When acting as a master, <acronym class="acronym">BIND</acronym> 9
        supports IXFR for those zones
        where the necessary change history information is available. These
        include master zones maintained by dynamic update and slave zones
        whose data was obtained by IXFR.  For manually maintained master
        zones, and for slave zones obtained by performing a full zone
        transfer (AXFR), IXFR is supported only if the option
        <span><strong class="command">ixfr-from-differences</strong></span> is set
        to <strong class="userinput"><code>yes</code></strong>.
      </p>
<p>
        When acting as a slave, <acronym class="acronym">BIND</acronym> 9 will
        attempt to use IXFR unless
        it is explicitly disabled. For more information about disabling
        IXFR, see the description of the <span><strong class="command">request-ixfr</strong></span> clause
        of the <span><strong class="command">server</strong></span> statement.
      </p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2570642"></a>Split DNS</h2></div></div></div>
<p>
        Setting up different views, or visibility, of the DNS space to
        internal and external resolvers is usually referred to as a
        <span class="emphasis"><em>Split DNS</em></span> setup. There are several
        reasons an organization would want to set up its DNS this way.
      </p>
<p>
        One common reason for setting up a DNS system this way is
        to hide "internal" DNS information from "external" clients on the
        Internet. There is some debate as to whether or not this is actually
        useful.
        Internal DNS information leaks out in many ways (via email headers,
        for example) and most savvy "attackers" can find the information
        they need using other means.
        However, since listing addresses of internal servers that
        external clients cannot possibly reach can result in
        connection delays and other annoyances, an organization may
        choose to use a Split DNS to present a consistent view of itself
        to the outside world.
      </p>
<p>
        Another common reason for setting up a Split DNS system is
        to allow internal networks that are behind filters or in RFC 1918
        space (reserved IP space, as documented in RFC 1918) to resolve DNS
        on the Internet. Split DNS can also be used to allow mail from outside
        back in to the internal network.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2570660"></a>Example split DNS setup</h3></div></div></div>
<p>
        Let's say a company named <span class="emphasis"><em>Example, Inc.</em></span>
        (<code class="literal">example.com</code>)
        has several corporate sites that have an internal network with
        reserved
        Internet Protocol (IP) space and an external demilitarized zone (DMZ),
        or "outside" section of a network, that is available to the public.
      </p>
<p>
        <span class="emphasis"><em>Example, Inc.</em></span> wants its internal clients
        to be able to resolve external hostnames and to exchange mail with
        people on the outside. The company also wants its internal resolvers
        to have access to certain internal-only zones that are not available
        at all outside of the internal network.
      </p>
<p>
        In order to accomplish this, the company will set up two sets
        of name servers. One set will be on the inside network (in the
        reserved
        IP space) and the other set will be on bastion hosts, which are
        "proxy"
        hosts that can talk to both sides of its network, in the DMZ.
      </p>
<p>
        The internal servers will be configured to forward all queries,
        except queries for <code class="filename">site1.internal</code>, <code class="filename">site2.internal</code>, <code class="filename">site1.example.com</code>,
        and <code class="filename">site2.example.com</code>, to the servers
        in the
        DMZ. These internal servers will have complete sets of information
        for <code class="filename">site1.example.com</code>, <code class="filename">site2.example.com</code>,<span class="emphasis"><em></em></span> <code class="filename">site1.internal</code>,
        and <code class="filename">site2.internal</code>.
      </p>
<p>
        To protect the <code class="filename">site1.internal</code> and <code class="filename">site2.internal</code> domains,
        the internal name servers must be configured to disallow all queries
        to these domains from any external hosts, including the bastion
        hosts.
      </p>
<p>
        The external servers, which are on the bastion hosts, will
        be configured to serve the "public" version of the <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones.
        This could include things such as the host records for public servers
        (<code class="filename">www.example.com</code> and <code class="filename">ftp.example.com</code>),
        and mail exchange (MX)  records (<code class="filename">a.mx.example.com</code> and <code class="filename">b.mx.example.com</code>).
      </p>
<p>
        In addition, the public <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones
        should have special MX records that contain wildcard (`*') records
        pointing to the bastion hosts. This is needed because external mail
        servers do not have any other way of looking up how to deliver mail
        to those internal hosts. With the wildcard records, the mail will
        be delivered to the bastion host, which can then forward it on to
        internal hosts.
      </p>
<p>
        Here's an example of a wildcard MX record:
      </p>
<pre class="programlisting">*   IN MX 10 external1.example.com.</pre>
<p>
        Now that they accept mail on behalf of anything in the internal
        network, the bastion hosts will need to know how to deliver mail
        to internal hosts. In order for this to work properly, the resolvers
        on
        the bastion hosts will need to be configured to point to the internal
        name servers for DNS resolution.
      </p>
<p>
        Queries for internal hostnames will be answered by the internal
        servers, and queries for external hostnames will be forwarded back
        out to the DNS servers on the bastion hosts.
      </p>
<p>
        In order for all this to work properly, internal clients will
        need to be configured to query <span class="emphasis"><em>only</em></span> the internal
        name servers for DNS queries. This could also be enforced via
        selective
        filtering on the network.
      </p>
<p>
        If everything has been set properly, <span class="emphasis"><em>Example, Inc.</em></span>'s
        internal clients will now be able to:
      </p>
<div class="itemizedlist"><ul type="disc">
<li>
            Look up any hostnames in the <code class="literal">site1</code>
            and
            <code class="literal">site2.example.com</code> zones.
          </li>
<li>
            Look up any hostnames in the <code class="literal">site1.internal</code> and
            <code class="literal">site2.internal</code> domains.
          </li>
<li>Look up any hostnames on the Internet.</li>
<li>Exchange mail with both internal and external people.</li>
</ul></div>
<p>
        Hosts on the Internet will be able to:
      </p>
<div class="itemizedlist"><ul type="disc">
<li>
            Look up any hostnames in the <code class="literal">site1</code>
            and
            <code class="literal">site2.example.com</code> zones.
          </li>
<li>
            Exchange mail with anyone in the <code class="literal">site1</code> and
            <code class="literal">site2.example.com</code> zones.
          </li>
</ul></div>
<p>
        Here is an example configuration for the setup we just
        described above. Note that this is only configuration information;
        for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a>.
      </p>
<p>
        Internal DNS server config:
      </p>
<pre class="programlisting">

acl internals { 172.16.72.0/24; 192.168.1.0/24; };

acl externals { <code class="varname">bastion-ips-go-here</code>; };

options {
    ...
    ...
    forward only;
    forwarders {                                // forward to external servers
        <code class="varname">bastion-ips-go-here</code>;
    };
    allow-transfer { none; };                   // sample allow-transfer (no one)
    allow-query { internals; externals; };      // restrict query access
    allow-recursion { internals; };             // restrict recursion
    ...
    ...
};

zone "site1.example.com" {                      // sample master zone
  type master;
  file "m/site1.example.com";
  forwarders { };                               // do normal iterative
                                                // resolution (do not forward)
  allow-query { internals; externals; };
  allow-transfer { internals; };
};

zone "site2.example.com" {                      // sample slave zone
  type slave;
  file "s/site2.example.com";
  masters { 172.16.72.3; };
  forwarders { };
  allow-query { internals; externals; };
  allow-transfer { internals; };
};

zone "site1.internal" {
  type master;
  file "m/site1.internal";
  forwarders { };
  allow-query { internals; };
  allow-transfer { internals; }
};

zone "site2.internal" {
  type slave;
  file "s/site2.internal";
  masters { 172.16.72.3; };
  forwarders { };
  allow-query { internals };
  allow-transfer { internals; }
};
</pre>
<p>
        External (bastion host) DNS server config:
      </p>
<pre class="programlisting">
acl internals { 172.16.72.0/24; 192.168.1.0/24; };

acl externals { bastion-ips-go-here; };

options {
  ...
  ...
  allow-transfer { none; };                     // sample allow-transfer (no one)
  allow-query { any; };                         // default query access
  allow-query-cache { internals; externals; };  // restrict cache access
  allow-recursion { internals; externals; };    // restrict recursion
  ...
  ...
};

zone "site1.example.com" {                      // sample slave zone
  type master;
  file "m/site1.foo.com";
  allow-transfer { internals; externals; };
};

zone "site2.example.com" {
  type slave;
  file "s/site2.foo.com";
  masters { another_bastion_host_maybe; };
  allow-transfer { internals; externals; }
};
</pre>
<p>
        In the <code class="filename">resolv.conf</code> (or equivalent) on
        the bastion host(s):
      </p>
<pre class="programlisting">
search ...
nameserver 172.16.72.2
nameserver 172.16.72.3
nameserver 172.16.72.4
</pre>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="tsig"></a>TSIG</h2></div></div></div>
<p>
        This is a short guide to setting up Transaction SIGnatures
        (TSIG) based transaction security in <acronym class="acronym">BIND</acronym>. It describes changes
        to the configuration file as well as what changes are required for
        different features, including the process of creating transaction
        keys and using transaction signatures with <acronym class="acronym">BIND</acronym>.
      </p>
<p>
        <acronym class="acronym">BIND</acronym> primarily supports TSIG for server
        to server communication.
        This includes zone transfer, notify, and recursive query messages.
        Resolvers based on newer versions of <acronym class="acronym">BIND</acronym> 8 have limited support
        for TSIG.
      </p>
<p>
        TSIG can also be useful for dynamic update. A primary
        server for a dynamic zone should control access to the dynamic
        update service, but IP-based access control is insufficient.
        The cryptographic access control provided by TSIG
        is far superior. The <span><strong class="command">nsupdate</strong></span>
        program supports TSIG via the <code class="option">-k</code> and
        <code class="option">-y</code> command line options or inline by use
        of the <span><strong class="command">key</strong></span>.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571095"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
<p>
          A shared secret is generated to be shared between <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host2</em></span>.
          An arbitrary key name is chosen: "host1-host2.". The key name must
          be the same on both hosts.
        </p>
<div class="sect3" lang="en">
<div class="titlepage"><div><div><h4 class="title">
<a name="id2571112"></a>Automatic Generation</h4></div></div></div>
<p>
            The following command will generate a 128-bit (16 byte) HMAC-MD5
            key as described above. Longer keys are better, but shorter keys
            are easier to read. Note that the maximum key length is 512 bits;
            keys longer than that will be digested with MD5 to produce a
            128-bit key.
          </p>
<p>
            <strong class="userinput"><code>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</code></strong>
          </p>
<p>
            The key is in the file <code class="filename">Khost1-host2.+157+00000.private</code>.
            Nothing directly uses this file, but the base-64 encoded string
            following "<code class="literal">Key:</code>"
            can be extracted from the file and used as a shared secret:
          </p>
<pre class="programlisting">Key: La/E5CjG9O+os1jq0a2jdA==</pre>
<p>
            The string "<code class="literal">La/E5CjG9O+os1jq0a2jdA==</code>" can
            be used as the shared secret.
          </p>
</div>
<div class="sect3" lang="en">
<div class="titlepage"><div><div><h4 class="title">
<a name="id2571150"></a>Manual Generation</h4></div></div></div>
<p>
            The shared secret is simply a random sequence of bits, encoded
            in base-64. Most ASCII strings are valid base-64 strings (assuming
            the length is a multiple of 4 and only valid characters are used),
            so the shared secret can be manually generated.
          </p>
<p>
            Also, a known string can be run through <span><strong class="command">mmencode</strong></span> or
            a similar program to generate base-64 encoded data.
          </p>
</div>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571169"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
<p>
          This is beyond the scope of DNS. A secure transport mechanism
          should be used. This could be secure FTP, ssh, telephone, etc.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571179"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
<p>
          Imagine <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host 2</em></span>
          are
          both servers. The following is added to each server's <code class="filename">named.conf</code> file:
        </p>
<pre class="programlisting">
key host1-host2. {
  algorithm hmac-md5;
  secret "La/E5CjG9O+os1jq0a2jdA==";
};
</pre>
<p>
          The algorithm, hmac-md5, is the only one supported by <acronym class="acronym">BIND</acronym>.
          The secret is the one generated above. Since this is a secret, it
          is recommended that either <code class="filename">named.conf</code> be non-world
          readable, or the key directive be added to a non-world readable
          file that is included by
          <code class="filename">named.conf</code>.
        </p>
<p>
          At this point, the key is recognized. This means that if the
          server receives a message signed by this key, it can verify the
          signature. If the signature is successfully verified, the
          response is signed by the same key.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571219"></a>Instructing the Server to Use the Key</h3></div></div></div>
<p>
          Since keys are shared between two hosts only, the server must
          be told when keys are to be used. The following is added to the <code class="filename">named.conf</code> file
          for <span class="emphasis"><em>host1</em></span>, if the IP address of <span class="emphasis"><em>host2</em></span> is
          10.1.2.3:
        </p>
<pre class="programlisting">
server 10.1.2.3 {
  keys { host1-host2. ;};
};
</pre>
<p>
          Multiple keys may be present, but only the first is used.
          This directive does not contain any secrets, so it may be in a
          world-readable
          file.
        </p>
<p>
          If <span class="emphasis"><em>host1</em></span> sends a message that is a request
          to that address, the message will be signed with the specified key. <span class="emphasis"><em>host1</em></span> will
          expect any responses to signed messages to be signed with the same
          key.
        </p>
<p>
          A similar statement must be present in <span class="emphasis"><em>host2</em></span>'s
          configuration file (with <span class="emphasis"><em>host1</em></span>'s address) for <span class="emphasis"><em>host2</em></span> to
          sign request messages to <span class="emphasis"><em>host1</em></span>.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571413"></a>TSIG Key Based Access Control</h3></div></div></div>
<p>
          <acronym class="acronym">BIND</acronym> allows IP addresses and ranges
          to be specified in ACL
          definitions and
          <span><strong class="command">allow-{ query | transfer | update }</strong></span>
          directives.
          This has been extended to allow TSIG keys also. The above key would
          be denoted <span><strong class="command">key host1-host2.</strong></span>
        </p>
<p>
          An example of an allow-update directive would be:
        </p>
<pre class="programlisting">
allow-update { key host1-host2. ;};
</pre>
<p>
          This allows dynamic updates to succeed only if the request
          was signed by a key named
          "<span><strong class="command">host1-host2.</strong></span>".
        </p>
<p>
          You may want to read about the more
          powerful <span><strong class="command">update-policy</strong></span> statement in <a href="Bv9ARM.ch06.html#dynamic_update_policies" title="Dynamic Update Policies">the section called &#8220;Dynamic Update Policies&#8221;</a>.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571458"></a>Errors</h3></div></div></div>
<p>
          The processing of TSIG signed messages can result in
          several errors. If a signed message is sent to a non-TSIG aware
          server, a FORMERR (format error) will be returned, since the server will not
          understand the record. This is a result of misconfiguration,
          since the server must be explicitly configured to send a TSIG
          signed message to a specific server.
        </p>
<p>
          If a TSIG aware server receives a message signed by an
          unknown key, the response will be unsigned with the TSIG
          extended error code set to BADKEY. If a TSIG aware server
          receives a message with a signature that does not validate, the
          response will be unsigned with the TSIG extended error code set
          to BADSIG. If a TSIG aware server receives a message with a time
          outside of the allowed range, the response will be signed with
          the TSIG extended error code set to BADTIME, and the time values
          will be adjusted so that the response can be successfully
          verified. In any of these cases, the message's rcode (response code) is set to
          NOTAUTH (not authenticated).
        </p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2571472"></a>TKEY</h2></div></div></div>
<p><span><strong class="command">TKEY</strong></span>
        is a mechanism for automatically generating a shared secret
        between two hosts.  There are several "modes" of
        <span><strong class="command">TKEY</strong></span> that specify how the key is generated
        or assigned.  <acronym class="acronym">BIND</acronym> 9 implements only one of
        these modes, the Diffie-Hellman key exchange.  Both hosts are
        required to have a Diffie-Hellman KEY record (although this
        record is not required to be present in a zone).  The
        <span><strong class="command">TKEY</strong></span> process must use signed messages,
        signed either by TSIG or SIG(0).  The result of
        <span><strong class="command">TKEY</strong></span> is a shared secret that can be used to
        sign messages with TSIG.  <span><strong class="command">TKEY</strong></span> can also be
        used to delete shared secrets that it had previously
        generated.
      </p>
<p>
        The <span><strong class="command">TKEY</strong></span> process is initiated by a
        client
        or server by sending a signed <span><strong class="command">TKEY</strong></span>
        query
        (including any appropriate KEYs) to a TKEY-aware server.  The
        server response, if it indicates success, will contain a
        <span><strong class="command">TKEY</strong></span> record and any appropriate keys.
        After
        this exchange, both participants have enough information to
        determine the shared secret; the exact process depends on the
        <span><strong class="command">TKEY</strong></span> mode.  When using the
        Diffie-Hellman
        <span><strong class="command">TKEY</strong></span> mode, Diffie-Hellman keys are
        exchanged,
        and the shared secret is derived by both participants.
      </p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2571521"></a>SIG(0)</h2></div></div></div>
<p>
        <acronym class="acronym">BIND</acronym> 9 partially supports DNSSEC SIG(0)
            transaction signatures as specified in RFC 2535 and RFC2931.
        SIG(0)
        uses public/private keys to authenticate messages.  Access control
        is performed in the same manner as TSIG keys; privileges can be
        granted or denied based on the key name.
      </p>
<p>
        When a SIG(0) signed message is received, it will only be
        verified if the key is known and trusted by the server; the server
        will not attempt to locate and/or validate the key.
      </p>
<p>
        SIG(0) signing of multiple-message TCP streams is not
        supported.
      </p>
<p>
        The only tool shipped with <acronym class="acronym">BIND</acronym> 9 that
        generates SIG(0) signed messages is <span><strong class="command">nsupdate</strong></span>.
      </p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="DNSSEC"></a>DNSSEC</h2></div></div></div>
<p>
        Cryptographic authentication of DNS information is possible
        through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>) extensions,
        defined in RFC 4033, RFC 4034, and RFC 4035.
        This section describes the creation and use of DNSSEC signed zones.
      </p>
<p>
        In order to set up a DNSSEC secure zone, there are a series
        of steps which must be followed.  <acronym class="acronym">BIND</acronym>
        9 ships
        with several tools
        that are used in this process, which are explained in more detail
        below.  In all cases, the <code class="option">-h</code> option prints a
        full list of parameters.  Note that the DNSSEC tools require the
        keyset files to be in the working directory or the
        directory specified by the <code class="option">-d</code> option, and
        that the tools shipped with BIND 9.2.x and earlier are not compatible
        with the current ones.
      </p>
<p>
        There must also be communication with the administrators of
        the parent and/or child zone to transmit keys.  A zone's security
        status must be indicated by the parent zone for a DNSSEC capable
        resolver to trust its data.  This is done through the presence
        or absence of a <code class="literal">DS</code> record at the
        delegation
        point.
      </p>
<p>
        For other servers to trust data in this zone, they must
        either be statically configured with this zone's zone key or the
        zone key of another zone above this one in the DNS tree.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571725"></a>Generating Keys</h3></div></div></div>
<p>
          The <span><strong class="command">dnssec-keygen</strong></span> program is used to
          generate keys.
        </p>
<p>
          A secure zone must contain one or more zone keys.  The
          zone keys will sign all other records in the zone, as well as
          the zone keys of any secure delegated zones.  Zone keys must
          have the same name as the zone, a name type of
          <span><strong class="command">ZONE</strong></span>, and must be usable for
          authentication.
          It is recommended that zone keys use a cryptographic algorithm
          designated as "mandatory to implement" by the IETF; currently
          the only one is RSASHA1.
        </p>
<p>
          The following command will generate a 768-bit RSASHA1 key for
          the <code class="filename">child.example</code> zone:
        </p>
<p>
          <strong class="userinput"><code>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</code></strong>
        </p>
<p>
          Two output files will be produced:
          <code class="filename">Kchild.example.+005+12345.key</code> and
          <code class="filename">Kchild.example.+005+12345.private</code>
          (where
          12345 is an example of a key tag).  The key filenames contain
          the key name (<code class="filename">child.example.</code>),
          algorithm (3
          is DSA, 1 is RSAMD5, 5 is RSASHA1, etc.), and the key tag (12345 in
          this case).
          The private key (in the <code class="filename">.private</code>
          file) is
          used to generate signatures, and the public key (in the
          <code class="filename">.key</code> file) is used for signature
          verification.
        </p>
<p>
          To generate another key with the same properties (but with
          a different key tag), repeat the above command.
        </p>
<p>
          The public keys should be inserted into the zone file by
          including the <code class="filename">.key</code> files using
          <span><strong class="command">$INCLUDE</strong></span> statements.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571795"></a>Signing the Zone</h3></div></div></div>
<p>
          The <span><strong class="command">dnssec-signzone</strong></span> program is used
          to
          sign a zone.
        </p>
<p>
          Any <code class="filename">keyset</code> files corresponding
          to secure subzones should be present.  The zone signer will
          generate <code class="literal">NSEC</code> and <code class="literal">RRSIG</code>
          records for the zone, as well as <code class="literal">DS</code>
          for
          the child zones if <code class="literal">'-d'</code> is specified.
                If <code class="literal">'-d'</code> is not specified, then
          DS RRsets for
          the secure child zones need to be added manually.
        </p>
<p>
          The following command signs the zone, assuming it is in a
          file called <code class="filename">zone.child.example</code>.  By
                default, all zone keys which have an available private key are
                used to generate signatures.
        </p>
<p>
          <strong class="userinput"><code>dnssec-signzone -o child.example zone.child.example</code></strong>
        </p>
<p>
          One output file is produced:
          <code class="filename">zone.child.example.signed</code>.  This
          file
          should be referenced by <code class="filename">named.conf</code>
          as the
          input file for the zone.
        </p>
<p><span><strong class="command">dnssec-signzone</strong></span>
          will also produce a keyset and dsset files and optionally a
          dlvset file.  These are used to provide the parent zone
          administrators with the <code class="literal">DNSKEYs</code> (or their
          corresponding <code class="literal">DS</code> records) that are the
          secure entry point to the zone.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571874"></a>Configuring Servers</h3></div></div></div>
<p>
          To enable <span><strong class="command">named</strong></span> to respond appropriately
          to DNS requests from DNSSEC aware clients,
          <span><strong class="command">dnssec-enable</strong></span> must be set to yes.
        </p>
<p>
          To enable <span><strong class="command">named</strong></span> to validate answers from
          other servers both <span><strong class="command">dnssec-enable</strong></span> and
          <span><strong class="command">dnssec-validation</strong></span> must be set and some
          <span><strong class="command">trusted-keys</strong></span> must be configured
          into <code class="filename">named.conf</code>.
        </p>
<p>
          <span><strong class="command">trusted-keys</strong></span> are copies of DNSKEY RRs
          for zones that are used to form the first link in the
          cryptographic chain of trust.  All keys listed in
          <span><strong class="command">trusted-keys</strong></span> (and corresponding zones)
          are deemed to exist and only the listed keys will be used
          to validated the DNSKEY RRset that they are from.
        </p>
<p>
          <span><strong class="command">trusted-keys</strong></span> are described in more detail
          later in this document.
        </p>
<p>
          Unlike <acronym class="acronym">BIND</acronym> 8, <acronym class="acronym">BIND</acronym>
          9 does not verify signatures on load, so zone keys for
          authoritative zones do not need to be specified in the
          configuration file.
        </p>
<p>
          After DNSSEC gets established, a typical DNSSEC configuration
          will look something like the following.  It has a one or
          more public keys for the root.  This allows answers from
          outside the organization to be validated.  It will also
          have several keys for parts of the namespace the organization
          controls.  These are here to ensure that named is immune
          to compromises in the DNSSEC components of the security
          of parent zones.
        </p>
<pre class="programlisting">
trusted-keys {

        /* Root Key */
"." 257 3 3 "BNY4wrWM1nCfJ+CXd0rVXyYmobt7sEEfK3clRbGaTwSJxrGkxJWoZu6I7PzJu/
             E9gx4UC1zGAHlXKdE4zYIpRhaBKnvcC2U9mZhkdUpd1Vso/HAdjNe8LmMlnzY3
             zy2Xy4klWOADTPzSv9eamj8V18PHGjBLaVtYvk/ln5ZApjYghf+6fElrmLkdaz
             MQ2OCnACR817DF4BBa7UR/beDHyp5iWTXWSi6XmoJLbG9Scqc7l70KDqlvXR3M
             /lUUVRbkeg1IPJSidmK3ZyCllh4XSKbje/45SKucHgnwU5jefMtq66gKodQj+M
             iA21AfUVe7u99WzTLzY3qlxDhxYQQ20FQ97S+LKUTpQcq27R7AT3/V5hRQxScI
             Nqwcz4jYqZD2fQdgxbcDTClU0CRBdiieyLMNzXG3";

/* Key for our organization's forward zone */
example.com. 257 3 5 "AwEAAaxPMcR2x0HbQV4WeZB6oEDX+r0QM65KbhTjrW1ZaARmPhEZZe
                      3Y9ifgEuq7vZ/zGZUdEGNWy+JZzus0lUptwgjGwhUS1558Hb4JKUbb
                      OTcM8pwXlj0EiX3oDFVmjHO444gLkBO UKUf/mC7HvfwYH/Be22GnC
                      lrinKJp1Og4ywzO9WglMk7jbfW33gUKvirTHr25GL7STQUzBb5Usxt
                      8lgnyTUHs1t3JwCY5hKZ6CqFxmAVZP20igTixin/1LcrgX/KMEGd/b
                      iuvF4qJCyduieHukuY3H4XMAcR+xia2 nIUPvm/oyWR8BW/hWdzOvn
                      SCThlHf3xiYleDbt/o1OTQ09A0=";

/* Key for our reverse zone. */
2.0.192.IN-ADDRPA.NET. 257 3 5 "AQOnS4xn/IgOUpBPJ3bogzwcxOdNax071L18QqZnQQQA
                                VVr+iLhGTnNGp3HoWQLUIzKrJVZ3zggy3WwNT6kZo6c0
                                tszYqbtvchmgQC8CzKojM/W16i6MG/ea fGU3siaOdS0
                                yOI6BgPsw+YZdzlYMaIJGf4M4dyoKIhzdZyQ2bYQrjyQ
                                4LB0lC7aOnsMyYKHHYeRv PxjIQXmdqgOJGq+vsevG06
                                zW+1xgYJh9rCIfnm1GX/KMgxLPG2vXTD/RnLX+D3T3UL
                                7HJYHJhAZD5L59VvjSPsZJHeDCUyWYrvPZesZDIRvhDD
                                52SKvbheeTJUm6EhkzytNN2SN96QRk8j/iI8ib";
};

options {
        ...
        dnssec-enable yes;
        dnssec-validation yes;
};
</pre>
<div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Note</h3>
          None of the keys listed in this example are valid.  In particular,
          the root key is not valid.
        </div>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2572153"></a>IPv6 Support in <acronym class="acronym">BIND</acronym> 9</h2></div></div></div>
<p>
        <acronym class="acronym">BIND</acronym> 9 fully supports all currently
        defined forms of IPv6
        name to address and address to name lookups.  It will also use
        IPv6 addresses to make queries when running on an IPv6 capable
        system.
      </p>
<p>
        For forward lookups, <acronym class="acronym">BIND</acronym> 9 supports
        only AAAA records.  RFC 3363 deprecated the use of A6 records,
        and client-side support for A6 records was accordingly removed
        from <acronym class="acronym">BIND</acronym> 9.
        However, authoritative <acronym class="acronym">BIND</acronym> 9 name servers still
        load zone files containing A6 records correctly, answer queries
        for A6 records, and accept zone transfer for a zone containing A6
        records.
      </p>
<p>
        For IPv6 reverse lookups, <acronym class="acronym">BIND</acronym> 9 supports
        the traditional "nibble" format used in the
        <span class="emphasis"><em>ip6.arpa</em></span> domain, as well as the older, deprecated
        <span class="emphasis"><em>ip6.int</em></span> domain.
        Older versions of <acronym class="acronym">BIND</acronym> 9 
        supported the "binary label" (also known as "bitstring") format,
        but support of binary labels has been completely removed per
        RFC 3363.
        Many applications in <acronym class="acronym">BIND</acronym> 9 do not understand
        the binary label format at all any more, and will return an
        error if given.
        In particular, an authoritative <acronym class="acronym">BIND</acronym> 9
        name server will not load a zone file containing binary labels.
      </p>
<p>
        For an overview of the format and structure of IPv6 addresses,
        see <a href="Bv9ARM.ch09.html#ipv6addresses" title="IPv6 addresses (AAAA)">the section called &#8220;IPv6 addresses (AAAA)&#8221;</a>.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2572215"></a>Address Lookups Using AAAA Records</h3></div></div></div>
<p>
          The IPv6 AAAA record is a parallel to the IPv4 A record,
          and, unlike the deprecated A6 record, specifies the entire
          IPv6 address in a single record.  For example,
        </p>
<pre class="programlisting">
$ORIGIN example.com.
host            3600    IN      AAAA    2001:db8::1
</pre>
<p>
          Use of IPv4-in-IPv6 mapped addresses is not recommended.
          If a host has an IPv4 address, use an A record, not
          a AAAA, with <code class="literal">::ffff:192.168.42.1</code> as
          the address.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2572236"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
<p>
          When looking up an address in nibble format, the address
          components are simply reversed, just as in IPv4, and
          <code class="literal">ip6.arpa.</code> is appended to the
          resulting name.
          For example, the following would provide reverse name lookup for
          a host with address
          <code class="literal">2001:db8::1</code>.
        </p>
<pre class="programlisting">
$ORIGIN 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.
1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0   14400 IN      PTR     host.example.com.
</pre>
</div>
</div>
</div>
<div class="navfooter">
<hr>
<table width="100%" summary="Navigation footer">
<tr>
<td width="40%" align="left">
<a accesskey="p" href="Bv9ARM.ch03.html">Prev</a> </td>
<td width="20%" align="center"> </td>
<td width="40%" align="right"> <a accesskey="n" href="Bv9ARM.ch05.html">Next</a>
</td>
</tr>
<tr>
<td width="40%" align="left" valign="top">Chapter 3. Name Server Configuration </td>
<td width="20%" align="center"><a accesskey="h" href="Bv9ARM.html">Home</a></td>
<td width="40%" align="right" valign="top"> Chapter 5. The <acronym class="acronym">BIND</acronym> 9 Lightweight Resolver</td>
</tr>
</table>
</div>
</body>
</html>
@


1.8
log
@resolve conflicts
@
text
@@


1.7
log
@resolve conflicts and regen configure script
@
text
@d2 1
a2 1
 - Copyright (C) 2004-2006 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: Bv9ARM.ch04.html,v 1.30.2.6.2.24 2006/11/15 04:33:41 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d52 2
a53 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573147">Split DNS</a></span></dt>
d56 6
a61 6
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573709">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573776">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573784">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573824">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573876">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573920">Errors</a></span></dt>
d63 2
a64 2
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573933">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573982">SIG(0)</a></span></dt>
d67 3
a69 3
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574049">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574116">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574259">Configuring Servers</a></span></dt>
d71 1
a71 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2574396">IPv6 Support in <acronym class="acronym">BIND</acronym> 9</a></span></dt>
d73 2
a74 2
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574455">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574475">Address to Name Lookups Using Nibble Format</a></span></dt>
d81 23
a103 13
<p><acronym class="acronym">DNS</acronym> NOTIFY is a mechanism that allows master
servers to notify their slave servers of changes to a zone's data. In
response to a <span><strong class="command">NOTIFY</strong></span> from a master server, the
slave will check to see that its version of the zone is the
current version and, if not, initiate a zone transfer.</p>
<p><acronym class="acronym">DNS</acronym>
For more information about
<span><strong class="command">NOTIFY</strong></span>, see the description of the
<span><strong class="command">notify</strong></span> option in <a href="Bv9ARM.ch06.html#boolean_options" title="Boolean Options">the section called &#8220;Boolean Options&#8221;</a> and
the description of the zone option <span><strong class="command">also-notify</strong></span> in
<a href="Bv9ARM.ch06.html#zone_transfers" title="Zone Transfers">the section called &#8220;Zone Transfers&#8221;</a>.  The <span><strong class="command">NOTIFY</strong></span>
protocol is specified in RFC 1996.
</p>
d108 19
a126 13
<p>Dynamic Update is a method for adding, replacing or deleting
    records in a master server by sending it a special form of DNS
    messages.  The format and meaning of these messages is specified
    in RFC 2136.</p>
<p>Dynamic update is enabled on a zone-by-zone basis, by
    including an <span><strong class="command">allow-update</strong></span> or
    <span><strong class="command">update-policy</strong></span> clause in the
    <span><strong class="command">zone</strong></span> statement.</p>
<p>Updating of secure zones (zones using DNSSEC) follows
    RFC 3007: RRSIG and NSEC records affected by updates are automatically
    regenerated by the server using an online zone key.
    Update authorization is based
    on transaction signatures and an explicit server policy.</p>
d130 46
a175 31
<p>All changes made to a zone using dynamic update are stored in the
    zone's journal file.  This file is automatically created by the
    server when the first dynamic update takes place.  The name of
    the journal file is formed by appending the
    extension <code class="filename">.jnl</code> to the
    name of the corresponding zone file.  The journal file is in a
    binary format and should not be edited manually.</p>
<p>The server will also occasionally write ("dump")
    the complete contents of the updated zone to its zone file.
    This is not done immediately after
    each dynamic update, because that would be too slow when a large
    zone is updated frequently.  Instead, the dump is delayed by
    up to 15 minutes, allowing additional updates to take place.</p>
<p>When a server is restarted after a shutdown or crash, it will replay
    the journal file to incorporate into the zone any updates that took
    place after the last zone dump.</p>
<p>Changes that result from incoming incremental zone transfers are also
    journalled in a similar way.</p>
<p>The zone files of dynamic zones cannot normally be edited by
    hand because they are not guaranteed to contain the most recent
    dynamic changes &#8212; those are only in the journal file.
    The only way to ensure that the zone file of a dynamic zone
    is up to date is to run <span><strong class="command">rndc stop</strong></span>.</p>
<p>If you have to make changes to a dynamic zone
    manually, the following procedure will work: Disable dynamic updates
    to the zone using
    <span><strong class="command">rndc freeze <em class="replaceable"><code>zone</code></em></strong></span>.
    This will also remove the zone's <code class="filename">.jnl</code> file
    and update the master file.  Edit the zone file.  Run
    <span><strong class="command">rndc thaw <em class="replaceable"><code>zone</code></em></strong></span>
    to reload the changed zone and re-enable dynamic updates.</p>
d181 24
a204 19
<p>The incremental zone transfer (IXFR) protocol is a way for
slave servers to transfer only changed data, instead of having to
transfer the entire zone. The IXFR protocol is specified in RFC
1995. See <a href="Bv9ARM.ch09.html#proposed_standards">Proposed Standards</a>.</p>
<p>When acting as a master, <acronym class="acronym">BIND</acronym> 9
supports IXFR for those zones
where the necessary change history information is available. These
include master zones maintained by dynamic update and slave zones
whose data was obtained by IXFR.  For manually maintained master
zones, and for slave zones obtained by performing a full zone 
transfer (AXFR), IXFR is supported only if the option
<span><strong class="command">ixfr-from-differences</strong></span> is set
to <strong class="userinput"><code>yes</code></strong>.
</p>
<p>When acting as a slave, <acronym class="acronym">BIND</acronym> 9 will 
attempt to use IXFR unless
it is explicitly disabled. For more information about disabling
IXFR, see the description of the <span><strong class="command">request-ixfr</strong></span> clause
of the <span><strong class="command">server</strong></span> statement.</p>
d208 88
a295 54
<a name="id2573147"></a>Split DNS</h2></div></div></div>
<p>Setting up different views, or visibility, of the DNS space to
internal and external resolvers is usually referred to as a <span class="emphasis"><em>Split
DNS</em></span> setup. There are several reasons an organization
would want to set up its DNS this way.</p>
<p>One common reason for setting up a DNS system this way is
to hide "internal" DNS information from "external" clients on the
Internet. There is some debate as to whether or not this is actually useful.
Internal DNS information leaks out in many ways (via email headers,
for example) and most savvy "attackers" can find the information
they need using other means.</p>
<p>Another common reason for setting up a Split DNS system is
to allow internal networks that are behind filters or in RFC 1918
space (reserved IP space, as documented in RFC 1918) to resolve DNS
on the Internet. Split DNS can also be used to allow mail from outside
back in to the internal network.</p>
<p>Here is an example of a split DNS setup:</p>
<p>Let's say a company named <span class="emphasis"><em>Example, Inc.</em></span>
(<code class="literal">example.com</code>)
has several corporate sites that have an internal network with reserved
Internet Protocol (IP) space and an external demilitarized zone (DMZ),
or "outside" section of a network, that is available to the public.</p>
<p><span class="emphasis"><em>Example, Inc.</em></span> wants its internal clients
to be able to resolve external hostnames and to exchange mail with
people on the outside. The company also wants its internal resolvers
to have access to certain internal-only zones that are not available
at all outside of the internal network.</p>
<p>In order to accomplish this, the company will set up two sets
of name servers. One set will be on the inside network (in the reserved
IP space) and the other set will be on bastion hosts, which are "proxy"
hosts that can talk to both sides of its network, in the DMZ.</p>
<p>The internal servers will be configured to forward all queries,
except queries for <code class="filename">site1.internal</code>, <code class="filename">site2.internal</code>, <code class="filename">site1.example.com</code>,
and <code class="filename">site2.example.com</code>, to the servers in the
DMZ. These internal servers will have complete sets of information
for <code class="filename">site1.example.com</code>, <code class="filename">site2.example.com</code>,<span class="emphasis"><em> </em></span><code class="filename">site1.internal</code>,
and <code class="filename">site2.internal</code>.</p>
<p>To protect the <code class="filename">site1.internal</code> and <code class="filename">site2.internal</code> domains,
the internal name servers must be configured to disallow all queries
to these domains from any external hosts, including the bastion
hosts.</p>
<p>The external servers, which are on the bastion hosts, will
be configured to serve the "public" version of the <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones.
This could include things such as the host records for public servers
(<code class="filename">www.example.com</code> and <code class="filename">ftp.example.com</code>),
and mail exchange (MX)  records (<code class="filename">a.mx.example.com</code> and <code class="filename">b.mx.example.com</code>).</p>
<p>In addition, the public <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones
should have special MX records that contain wildcard (`*') records
pointing to the bastion hosts. This is needed because external mail
servers do not have any other way of looking up how to deliver mail
to those internal hosts. With the wildcard records, the mail will
be delivered to the bastion host, which can then forward it on to
internal hosts.</p>
<p>Here's an example of a wildcard MX record:</p>
d297 24
a320 14
<p>Now that they accept mail on behalf of anything in the internal
network, the bastion hosts will need to know how to deliver mail
to internal hosts. In order for this to work properly, the resolvers on
the bastion hosts will need to be configured to point to the internal
name servers for DNS resolution.</p>
<p>Queries for internal hostnames will be answered by the internal
servers, and queries for external hostnames will be forwarded back
out to the DNS servers on the bastion hosts.</p>
<p>In order for all this to work properly, internal clients will
need to be configured to query <span class="emphasis"><em>only</em></span> the internal
name servers for DNS queries. This could also be enforced via selective
filtering on the network.</p>
<p>If everything has been set properly, <span class="emphasis"><em>Example, Inc.</em></span>'s
internal clients will now be able to:</p>
d322 9
a330 4
<li>Look up any hostnames in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
<li>Look up any hostnames in the <code class="literal">site1.internal</code> and 
<code class="literal">site2.internal</code> domains.</li>
d332 1
a332 1
<li>Exchange mail with both internal AND external people.</li>
d334 3
a336 1
<p>Hosts on the Internet will be able to:</p>
d338 9
a346 4
<li>Look up any hostnames in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
<li>Exchange mail with anyone in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
d348 8
a355 4
<p>Here is an example configuration for the setup we just
    described above. Note that this is only configuration information;
    for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a>.</p>
<p>Internal DNS server config:</p>
d367 1
a367 1
        <code class="varname">bastion-ips-go-here</code>; 
d411 3
a413 1
<p>External (bastion host) DNS server config:</p>
d423 2
a424 1
  allow-query { internals; externals; };        // restrict query access
a432 1
  allow-query { any; };
a439 1
  allow-query { any; };
d443 4
a446 2
<p>In the <code class="filename">resolv.conf</code> (or equivalent) on
the bastion host(s):</p>
d454 1
d458 32
a489 22
<p>This is a short guide to setting up Transaction SIGnatures
(TSIG) based transaction security in <acronym class="acronym">BIND</acronym>. It describes changes
to the configuration file as well as what changes are required for
different features, including the process of creating transaction
keys and using transaction signatures with <acronym class="acronym">BIND</acronym>.</p>
<p><acronym class="acronym">BIND</acronym> primarily supports TSIG for server to server communication.
This includes zone transfer, notify, and recursive query messages.
Resolvers based on newer versions of <acronym class="acronym">BIND</acronym> 8 have limited support
for TSIG.</p>
<p>TSIG might be most useful for dynamic update. A primary
    server for a dynamic zone should use access control to control
    updates, but IP-based access control is insufficient.
    The cryptographic access control provided by TSIG
    is far superior. The <span><strong class="command">nsupdate</strong></span>
    program supports TSIG via the <code class="option">-k</code> and
    <code class="option">-y</code> command line options.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2573709"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
<p>A shared secret is generated to be shared between <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host2</em></span>.
An arbitrary key name is chosen: "host1-host2.". The key name must
be the same on both hosts.</p>
d492 17
a508 11
<a name="id2573725"></a>Automatic Generation</h4></div></div></div>
<p>The following command will generate a 128-bit (16 byte) HMAC-MD5
key as described above. Longer keys are better, but shorter keys
are easier to read. Note that the maximum key length is 512 bits;
keys longer than that will be digested with MD5 to produce a
128-bit key.</p>
<p><strong class="userinput"><code>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</code></strong></p>
<p>The key is in the file <code class="filename">Khost1-host2.+157+00000.private</code>.
Nothing directly uses this file, but the base-64 encoded string
following "<code class="literal">Key:</code>"
can be extracted from the file and used as a shared secret:</p>
d510 4
a513 2
<p>The string "<code class="literal">La/E5CjG9O+os1jq0a2jdA==</code>" can
be used as the shared secret.</p>
d517 11
a527 7
<a name="id2573760"></a>Manual Generation</h4></div></div></div>
<p>The shared secret is simply a random sequence of bits, encoded
in base-64. Most ASCII strings are valid base-64 strings (assuming
the length is a multiple of 4 and only valid characters are used),
so the shared secret can be manually generated.</p>
<p>Also, a known string can be run through <span><strong class="command">mmencode</strong></span> or
a similar program to generate base-64 encoded data.</p>
d532 5
a536 3
<a name="id2573776"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
<p>This is beyond the scope of DNS. A secure transport mechanism
should be used. This could be secure FTP, ssh, telephone, etc.</p>
d540 6
a545 3
<a name="id2573784"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
<p>Imagine <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host 2</em></span> are
both servers. The following is added to each server's <code class="filename">named.conf</code> file:</p>
d552 14
a565 9
<p>The algorithm, hmac-md5, is the only one supported by <acronym class="acronym">BIND</acronym>.
The secret is the one generated above. Since this is a secret, it
is recommended that either <code class="filename">named.conf</code> be non-world
readable, or the key directive be added to a non-world readable
file that is included by <code class="filename">named.conf</code>.</p>
<p>At this point, the key is recognized. This means that if the
server receives a message signed by this key, it can verify the
signature. If the signature is successfully verified, the
response is signed by the same key.</p>
d569 7
a575 5
<a name="id2573824"></a>Instructing the Server to Use the Key</h3></div></div></div>
<p>Since keys are shared between two hosts only, the server must
be told when keys are to be used. The following is added to the <code class="filename">named.conf</code> file
for <span class="emphasis"><em>host1</em></span>, if the IP address of <span class="emphasis"><em>host2</em></span> is
10.1.2.3:</p>
d581 17
a597 10
<p>Multiple keys may be present, but only the first is used.
This directive does not contain any secrets, so it may be in a world-readable
file.</p>
<p>If <span class="emphasis"><em>host1</em></span> sends a message that is a request
to that address, the message will be signed with the specified key. <span class="emphasis"><em>host1</em></span> will
expect any responses to signed messages to be signed with the same
key.</p>
<p>A similar statement must be present in <span class="emphasis"><em>host2</em></span>'s
configuration file (with <span class="emphasis"><em>host1</em></span>'s address) for <span class="emphasis"><em>host2</em></span> to
sign request messages to <span class="emphasis"><em>host1</em></span>.</p>
d601 13
a613 7
<a name="id2573876"></a>TSIG Key Based Access Control</h3></div></div></div>
<p><acronym class="acronym">BIND</acronym> allows IP addresses and ranges to be specified in ACL
definitions and
<span><strong class="command">allow-{ query | transfer | update }</strong></span> directives.
This has been extended to allow TSIG keys also. The above key would
be denoted <span><strong class="command">key host1-host2.</strong></span></p>
<p>An example of an allow-update directive would be:</p>
d617 9
a625 5
<p>This allows dynamic updates to succeed only if the request
      was signed by a key named
      "<span><strong class="command">host1-host2.</strong></span>".</p>
<p>You may want to read about the more
      powerful <span><strong class="command">update-policy</strong></span> statement in <a href="Bv9ARM.ch06.html#dynamic_update_policies" title="Dynamic Update Policies">the section called &#8220;Dynamic Update Policies&#8221;</a>.</p>
d629 22
a650 19
<a name="id2573920"></a>Errors</h3></div></div></div>
<p>The processing of TSIG signed messages can result in
      several errors. If a signed message is sent to a non-TSIG
      aware server, a FORMERR (format error) will be returned, since
      the server will not understand the record. This is a result
      of misconfiguration, since the server must be explicitly
      configured to send a TSIG signed message to a specific
      server.</p>
<p>If a TSIG aware server receives a message signed by an
      unknown key, the response will be unsigned with the TSIG
      extended error code set to BADKEY. If a TSIG aware server
      receives a message with a signature that does not validate, the
      response will be unsigned with the TSIG extended error code set
      to BADSIG. If a TSIG aware server receives a message with a time
      outside of the allowed range, the response will be signed with
      the TSIG extended error code set to BADTIME, and the time values
      will be adjusted so that the response can be successfully
      verified. In any of these cases, the message's rcode is set to
      NOTAUTH (not authenticated).</p>
d655 33
a687 24
<a name="id2573933"></a>TKEY</h2></div></div></div>
<p><span><strong class="command">TKEY</strong></span> is a mechanism for automatically
    generating a shared secret between two hosts.  There are several
    "modes" of <span><strong class="command">TKEY</strong></span> that specify how the key is
    generated or assigned.  <acronym class="acronym">BIND</acronym> 9
    implements only one of these modes,
    the Diffie-Hellman key exchange.  Both hosts are required to have
    a Diffie-Hellman KEY record (although this record is not required
    to be present in a zone).  The <span><strong class="command">TKEY</strong></span> process
    must use signed messages, signed either by TSIG or SIG(0).  The
    result of <span><strong class="command">TKEY</strong></span> is a shared secret that can be
    used to sign messages with TSIG.  <span><strong class="command">TKEY</strong></span> can also
    be used to delete shared secrets that it had previously
    generated.</p>
<p>The <span><strong class="command">TKEY</strong></span> process is initiated by a client
    or server by sending a signed <span><strong class="command">TKEY</strong></span> query
    (including any appropriate KEYs) to a TKEY-aware server.  The
    server response, if it indicates success, will contain a
    <span><strong class="command">TKEY</strong></span> record and any appropriate keys.  After
    this exchange, both participants have enough information to
    determine the shared secret; the exact process depends on the
    <span><strong class="command">TKEY</strong></span> mode.  When using the Diffie-Hellman
    <span><strong class="command">TKEY</strong></span> mode, Diffie-Hellman keys are exchanged,
    and the shared secret is derived by both participants.</p>
d691 22
a712 13
<a name="id2573982"></a>SIG(0)</h2></div></div></div>
<p><acronym class="acronym">BIND</acronym> 9 partially supports DNSSEC SIG(0)
    transaction signatures as specified in RFC 2535 and RFC2931.  SIG(0)
    uses public/private keys to authenticate messages.  Access control
    is performed in the same manner as TSIG keys; privileges can be
    granted or denied based on the key name.</p>
<p>When a SIG(0) signed message is received, it will only be
    verified if the key is known and trusted by the server; the server
    will not attempt to locate and / or validate the key.</p>
<p>SIG(0) signing of multiple-message TCP streams is not
    supported.</p>
<p>The only tool shipped with <acronym class="acronym">BIND</acronym> 9 that
    generates SIG(0) signed messages is <span><strong class="command">nsupdate</strong></span>.</p>
a716 92
<p>Cryptographic authentication of DNS information is possible
    through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>)
    extensions, defined in RFC 4033, RFC4034 and RFC4035.  This
    section describes the creation and use of DNSSEC signed
    zones.</p>
<p>In order to set up a DNSSEC secure zone, there are a series
    of steps which must be followed.  <acronym class="acronym">BIND</acronym> 9 ships
    with several tools
    that are used in this process, which are explained in more detail
    below.  In all cases, the <code class="option">-h</code> option prints a
    full list of parameters.  Note that the DNSSEC tools require the
    keyset files to be in the working directory or the
    directory specified by the <code class="option">-h</code> option, and
    that the tools shipped with BIND 9.2.x and earlier are not compatible
    with the current ones.</p>
<p>There must also be communication with the administrators of
    the parent and/or child zone to transmit keys.  A zone's security
    status must be indicated by the parent zone for a DNSSEC capable 
    resolver to trust its data.  This is done through the presence
    or absence of a <code class="literal">DS</code> record at the delegation
    point.</p>
<p>For other servers to trust data in this zone, they must
    either be statically configured with this zone's zone key or the
    zone key of another zone above this one in the DNS tree.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2574049"></a>Generating Keys</h3></div></div></div>
<p>The <span><strong class="command">dnssec-keygen</strong></span> program is used to
      generate keys.</p>
<p>A secure zone must contain one or more zone keys.  The
      zone keys will sign all other records in the zone, as well as
      the zone keys of any secure delegated zones.  Zone keys must
      have the same name as the zone, a name type of
      <span><strong class="command">ZONE</strong></span>, and must be usable for authentication.
      It is recommended that zone keys use a cryptographic algorithm
      designated as "mandatory to implement" by the IETF; currently
      the only one is RSASHA1.</p>
<p>The following command will generate a 768-bit RSASHA1 key for
      the <code class="filename">child.example</code> zone:</p>
<p><strong class="userinput"><code>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</code></strong></p>
<p>Two output files will be produced:
      <code class="filename">Kchild.example.+005+12345.key</code> and
      <code class="filename">Kchild.example.+005+12345.private</code> (where
      12345 is an example of a key tag).  The key file names contain
      the key name (<code class="filename">child.example.</code>), algorithm (3
      is DSA, 1 is RSAMD5, 5 is RSASHA1, etc.), and the key tag (12345 in this case).
      The private key (in the <code class="filename">.private</code> file) is
      used to generate signatures, and the public key (in the
      <code class="filename">.key</code> file) is used for signature
      verification.</p>
<p>To generate another key with the same properties (but with
      a different key tag), repeat the above command.</p>
<p>The public keys should be inserted into the zone file by
      including the <code class="filename">.key</code> files using
      <span><strong class="command">$INCLUDE</strong></span> statements.
      </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2574116"></a>Signing the Zone</h3></div></div></div>
<p>The <span><strong class="command">dnssec-signzone</strong></span> program is used to
      sign a zone.</p>
<p>Any <code class="filename">keyset</code> files corresponding
      to secure subzones should be present.  The zone signer will
      generate <code class="literal">NSEC</code> and <code class="literal">RRSIG</code>
      records for the zone, as well as <code class="literal">DS</code> for
      the child zones if <code class="literal">'-d'</code> is specified.
      If <code class="literal">'-d'</code> is not specified, then DS RRsets for
      the secure child zones need to be added manually.</p>
<p>The following command signs the zone, assuming it is in a
      file called <code class="filename">zone.child.example</code>.  By
      default, all zone keys which have an available private key are
      used to generate signatures.</p>
<p><strong class="userinput"><code>dnssec-signzone -o child.example zone.child.example</code></strong></p>
<p>One output file is produced:
      <code class="filename">zone.child.example.signed</code>.  This file
      should be referenced by <code class="filename">named.conf</code> as the
      input file for the zone.</p>
<p><span><strong class="command">dnssec-signzone</strong></span> will also produce a
      keyset and dsset files and optionally a dlvset file.  These
      are used to provide the parent zone administators with the
      <code class="literal">DNSKEYs</code> (or their corresponding <code class="literal">DS</code>
      records) that are the secure entry point to the zone.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2574259"></a>Configuring Servers</h3></div></div></div>
<p>
	  To enable <span><strong class="command">named</strong></span> to respond appropriately
	  to DNS requests from DNSSEC aware clients,
	  <span><strong class="command">dnssec-enable</strong></span> must be set to yes.
          </p>
d718 160
a877 5
	  To enable <span><strong class="command">named</strong></span> to validate answers from
	  other servers <span><strong class="command">dnssec-enable</strong></span> and
	  some <span><strong class="command">trusted-keys</strong></span> must be configured
	  into <code class="filename">named.conf</code>.
          </p>
d879 9
a887 27
	  <span><strong class="command">trusted-keys</strong></span> are copies of DNSKEY RRs
	  for zones that are used to form the first link in the
	  cryptographic chain of trust.  All keys listed in
	  <span><strong class="command">trusted-keys</strong></span> (and corresponding zones)
	  are deemed to exist and only the listed keys will be used
	  to validated the DNSKEY RRset that they are from.
	</p>
<p>
	  <span><strong class="command">trusted-keys</strong></span> are described in more detail
	  later in this document.
	</p>
<p>
	  Unlike <acronym class="acronym">BIND</acronym> 8, <acronym class="acronym">BIND</acronym>
	  9 does not verify signatures on load, so zone keys for
	  authoritative zones do not need to be specified in the
	  configuration file.
	</p>
<p>
	  After DNSSEC gets established, a typical DNSSEC configuration
	  will look something like the following.  It has a one or
	  more public keys for the root.  This allows answers from
	  outside the organization to be validated.  It will also
	  have several keys for parts of the namespace the organization
	  controls.  These are here to ensure that named is immune
	  to compromises in the DNSSEC components of the security
	  of parent zones.
	</p>
d891 1
a891 1
	/* Root Key */
d893 6
a898 6
	     E9gx4UC1zGAHlXKdE4zYIpRhaBKnvcC2U9mZhkdUpd1Vso/HAdjNe8LmMlnzY3
	     zy2Xy4klWOADTPzSv9eamj8V18PHGjBLaVtYvk/ln5ZApjYghf+6fElrmLkdaz
	     MQ2OCnACR817DF4BBa7UR/beDHyp5iWTXWSi6XmoJLbG9Scqc7l70KDqlvXR3M
	     /lUUVRbkeg1IPJSidmK3ZyCllh4XSKbje/45SKucHgnwU5jefMtq66gKodQj+M
	     iA21AfUVe7u99WzTLzY3qlxDhxYQQ20FQ97S+LKUTpQcq27R7AT3/V5hRQxScI
	     Nqwcz4jYqZD2fQdgxbcDTClU0CRBdiieyLMNzXG3";
d903 5
a907 5
	              OTcM8pwXlj0EiX3oDFVmjHO444gLkBO UKUf/mC7HvfwYH/Be22GnC
		      lrinKJp1Og4ywzO9WglMk7jbfW33gUKvirTHr25GL7STQUzBb5Usxt
		      8lgnyTUHs1t3JwCY5hKZ6CqFxmAVZP20igTixin/1LcrgX/KMEGd/b
		      iuvF4qJCyduieHukuY3H4XMAcR+xia2 nIUPvm/oyWR8BW/hWdzOvn
		      SCThlHf3xiYleDbt/o1OTQ09A0=";
d912 6
a917 6
				tszYqbtvchmgQC8CzKojM/W16i6MG/ea fGU3siaOdS0
				yOI6BgPsw+YZdzlYMaIJGf4M4dyoKIhzdZyQ2bYQrjyQ
				4LB0lC7aOnsMyYKHHYeRv PxjIQXmdqgOJGq+vsevG06
			        zW+1xgYJh9rCIfnm1GX/KMgxLPG2vXTD/RnLX+D3T3UL
				7HJYHJhAZD5L59VvjSPsZJHeDCUyWYrvPZesZDIRvhDD
				52SKvbheeTJUm6EhkzytNN2SN96QRk8j/iI8ib";
d921 3
a923 2
	...
	dnssec-enable yes;
d928 3
a930 3
	  None of the keys listed in this example are valid.  In particular,
	  the root key is not valid.
	</div>
d935 45
a979 33
<a name="id2574396"></a>IPv6 Support in <acronym class="acronym">BIND</acronym> 9</h2></div></div></div>
<p><acronym class="acronym">BIND</acronym> 9 fully supports all currently defined forms of IPv6
    name to address and address to name lookups.  It will also use
    IPv6 addresses to make queries when running on an IPv6 capable
    system.</p>
<p>For forward lookups, <acronym class="acronym">BIND</acronym> 9 supports only AAAA
    records.  The use of A6 records is deprecated by RFC 3363, and the
    support for forward lookups in <acronym class="acronym">BIND</acronym> 9 is
    removed accordingly.
    However, authoritative <acronym class="acronym">BIND</acronym> 9 name servers still
    load zone files containing A6 records correctly, answer queries
    for A6 records, and accept zone transfer for a zone containing A6
    records.</p>
<p>For IPv6 reverse lookups, <acronym class="acronym">BIND</acronym> 9 supports
    the traditional "nibble" format used in the
    <span class="emphasis"><em>ip6.arpa</em></span> domain, as well as the older, deprecated
    <span class="emphasis"><em>ip6.int</em></span> domain.
    <acronym class="acronym">BIND</acronym> 9 formerly
    supported the "binary label" (also known as "bitstring") format.
    The support of binary labels, however, is now completely removed
    according to the changes in RFC 3363.
    Any applications in <acronym class="acronym">BIND</acronym> 9 do not understand
    the format any more, and will return an error if given.
    In particular, an authoritative <acronym class="acronym">BIND</acronym> 9 name
    server rejects to load a zone file containing binary labels.</p>
<p>For an overview of the format and structure of IPv6 addresses,
    see <a href="Bv9ARM.ch09.html#ipv6addresses" title="IPv6 addresses (AAAA)">the section called &#8220;IPv6 addresses (AAAA)&#8221;</a>.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2574455"></a>Address Lookups Using AAAA Records</h3></div></div></div>
<p>The AAAA record is a parallel to the IPv4 A record.  It
      specifies the entire address in a single record.  For
      example,</p>
d984 6
a989 4
<p>It is recommended that IPv4-in-IPv6 mapped addresses not
        be used.  If a host has an IPv4 address, use an A record, not
        a AAAA, with <code class="literal">::ffff:192.168.42.1</code> as the
        address.</p>
d993 10
a1002 7
<a name="id2574475"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
<p>When looking up an address in nibble format, the address
      components are simply reversed, just as in IPv4, and
      <code class="literal">ip6.arpa.</code> is appended to the resulting name.
      For example, the following would provide reverse name lookup for
      a host with address
      <code class="literal">2001:db8::1</code>.</p>
@


1.6
log
@resolve conflicts
@
text
@d2 1
a2 1
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: Bv9ARM.ch04.html,v 1.30.2.6.2.14 2005/10/13 02:33:59 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
d52 1
a52 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2549203">Split DNS</a></span></dt>
d55 6
a60 6
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549627">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549830">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549838">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549878">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549998">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550042">Errors</a></span></dt>
d62 2
a63 2
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550056">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550173">SIG(0)</a></span></dt>
d66 3
a68 3
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550308">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550375">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550450">Configuring Servers</a></span></dt>
d70 1
a70 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550473">IPv6 Support in <span class="acronym">BIND</span> 9</a></span></dt>
d72 2
a73 2
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550600">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550620">Address to Name Lookups Using Nibble Format</a></span></dt>
d80 1
a80 1
<p><span class="acronym">DNS</span> NOTIFY is a mechanism that allows master
d85 1
a85 1
<p><span class="acronym">DNS</span>
d133 1
a133 1
    dynamic changes - those are only in the journal file.
d142 1
a142 1
    <span><strong class="command">rndc unfreeze <em class="replaceable"><code>zone</code></em></strong></span>
d153 1
a153 1
<p>When acting as a master, <span class="acronym">BIND</span> 9
d163 1
a163 1
<p>When acting as a slave, <span class="acronym">BIND</span> 9 will 
d171 1
a171 1
<a name="id2549203"></a>Split DNS</h2></div></div></div>
d246 1
a246 1
<li>Exchange mail with internal AND external people.</li>
d257 1
a257 1
    for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a></p>
d358 1
a358 1
(TSIG) based transaction security in <span class="acronym">BIND</span>. It describes changes
d361 2
a362 2
keys and using transaction signatures with <span class="acronym">BIND</span>.</p>
<p><span class="acronym">BIND</span> primarily supports TSIG for server to server communication.
d364 1
a364 1
Resolvers based on newer versions of <span class="acronym">BIND</span> 8 have limited support
d375 1
a375 1
<a name="id2549627"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
d381 2
a382 2
<a name="id2549643"></a>Automatic Generation</h4></div></div></div>
<p>The following command will generate a 128 bit (16 byte) HMAC-MD5
d385 2
a386 2
keys longer than that will be digested with MD5 to produce a 128
bit key.</p>
d398 1
a398 1
<a name="id2549677"></a>Manual Generation</h4></div></div></div>
d409 1
a409 1
<a name="id2549830"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
d415 1
a415 1
<a name="id2549838"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
d424 1
a424 1
<p>The algorithm, hmac-md5, is the only one supported by <span class="acronym">BIND</span>.
d436 1
a436 1
<a name="id2549878"></a>Instructing the Server to Use the Key</h3></div></div></div>
d459 2
a460 2
<a name="id2549998"></a>TSIG Key Based Access Control</h3></div></div></div>
<p><span class="acronym">BIND</span> allows IP addresses and ranges to be specified in ACL
d477 1
a477 1
<a name="id2550042"></a>Errors</h3></div></div></div>
d479 6
a484 5
      several errors. If a signed message is sent to a non-TSIG aware
      server, a FORMERR will be returned, since the server will not
      understand the record. This is a result of misconfiguration,
      since the server must be explicitly configured to send a TSIG
      signed message to a specific server.</p>
d495 1
a495 1
      NOTAUTH.</p>
d500 1
a500 1
<a name="id2550056"></a>TKEY</h2></div></div></div>
d504 1
a504 1
    generated or assigned.  <span class="acronym">BIND</span> 9
d527 2
a528 2
<a name="id2550173"></a>SIG(0)</h2></div></div></div>
<p><span class="acronym">BIND</span> 9 partially supports DNSSEC SIG(0)
d535 1
a535 1
    will not attempt to locate and/or validate the key.</p>
d538 1
a538 1
<p>The only tool shipped with <span class="acronym">BIND</span> 9 that
d545 4
a548 3
    through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>) extensions,
    defined in RFC &lt;TBA&gt;. This section describes the creation and use
    of DNSSEC signed zones.</p>
d550 1
a550 1
    of steps which must be followed.  <span class="acronym">BIND</span> 9 ships
d562 1
a562 1
    resolver to trust its data.  This is done through the presense
d570 1
a570 1
<a name="id2550308"></a>Generating Keys</h3></div></div></div>
d581 1
a581 1
<p>The following command will generate a 768 bit RSASHA1 key for
d603 1
a603 1
<a name="id2550375"></a>Signing the Zone</h3></div></div></div>
d611 1
a611 1
      If <code class="literal">'-d'</code> is not specified then DS RRsets for
d630 82
a711 8
<a name="id2550450"></a>Configuring Servers</h3></div></div></div>
<p>Unlike <span class="acronym">BIND</span> 8, 
<span class="acronym">BIND</span> 9 does not verify signatures on load,
so zone keys for authoritative zones do not need to be specified
in the configuration file.</p>
<p>The public key for any security root must be present in
the configuration file's <span><strong class="command">trusted-keys</strong></span>
statement, as described later in this document. </p>
d716 2
a717 2
<a name="id2550473"></a>IPv6 Support in <span class="acronym">BIND</span> 9</h2></div></div></div>
<p><span class="acronym">BIND</span> 9 fully supports all currently defined forms of IPv6
d721 1
a721 1
<p>For forward lookups, <span class="acronym">BIND</span> 9 supports only AAAA
d723 1
a723 1
    support for forward lookups in <span class="acronym">BIND</span> 9 is
d725 1
a725 1
    However, authoritative <span class="acronym">BIND</span> 9 name servers still
d729 1
a729 1
<p>For IPv6 reverse lookups, <span class="acronym">BIND</span> 9 supports
d733 1
a733 1
    <span class="acronym">BIND</span> 9 formerly
d737 1
a737 1
    Any applications in <span class="acronym">BIND</span> 9 do not understand
d739 1
a739 1
    In particular, an authoritative <span class="acronym">BIND</span> 9 name
d745 1
a745 1
<a name="id2550600"></a>Address Lookups Using AAAA Records</h3></div></div></div>
d760 1
a760 1
<a name="id2550620"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
d787 1
a787 1
<td width="40%" align="right" valign="top"> Chapter 5. The <span class="acronym">BIND</span> 9 Lightweight Resolver</td>
@


1.5
log
@resolve conflicts
@
text
@d1 80
a80 144
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML
><HEAD
><TITLE
>Advanced DNS Features</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"><LINK
REL="HOME"
TITLE="BIND 9 Administrator Reference Manual"
HREF="Bv9ARM.html"><LINK
REL="PREVIOUS"
TITLE="Name Server Configuration"
HREF="Bv9ARM.ch03.html"><LINK
REL="NEXT"
TITLE="The BIND 9 Lightweight Resolver"
HREF="Bv9ARM.ch05.html"></HEAD
><BODY
CLASS="chapter"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>BIND 9 Administrator Reference Manual</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="Bv9ARM.ch03.html"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="Bv9ARM.ch05.html"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="chapter"
><H1
><A
NAME="ch04"
></A
>Chapter 4. Advanced DNS Features</H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
>4.1. <A
HREF="Bv9ARM.ch04.html#notify"
>Notify</A
></DT
><DT
>4.2. <A
HREF="Bv9ARM.ch04.html#dynamic_update"
>Dynamic Update</A
></DT
><DT
>4.3. <A
HREF="Bv9ARM.ch04.html#incremental_zone_transfers"
>Incremental Zone Transfers (IXFR)</A
></DT
><DT
>4.4. <A
HREF="Bv9ARM.ch04.html#AEN767"
>Split DNS</A
></DT
><DT
>4.5. <A
HREF="Bv9ARM.ch04.html#tsig"
>TSIG</A
></DT
><DT
>4.6. <A
HREF="Bv9ARM.ch04.html#AEN927"
>TKEY</A
></DT
><DT
>4.7. <A
HREF="Bv9ARM.ch04.html#AEN942"
>SIG(0)</A
></DT
><DT
>4.8. <A
HREF="Bv9ARM.ch04.html#DNSSEC"
>DNSSEC</A
></DT
><DT
>4.9. <A
HREF="Bv9ARM.ch04.html#AEN1011"
>IPv6 Support in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9</A
></DT
></DL
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="notify"
>4.1. Notify</A
></H1
><P
><ACRONYM
CLASS="acronym"
>DNS</ACRONYM
> NOTIFY is a mechanism that allows master
d82 1
a82 4
response to a <B
CLASS="command"
>NOTIFY</B
> from a master server, the
d84 2
a85 6
current version and, if not, initiate a zone transfer.</P
><P
><ACRONYM
CLASS="acronym"
>DNS</ACRONYM
>
d87 4
a90 22
<B
CLASS="command"
>NOTIFY</B
>, see the description of the
<B
CLASS="command"
>notify</B
> option in <A
HREF="Bv9ARM.ch06.html#boolean_options"
>Section 6.2.16.1</A
> and
the description of the zone option <B
CLASS="command"
>also-notify</B
> in
<A
HREF="Bv9ARM.ch06.html#zone_transfers"
>Section 6.2.16.7</A
>.  The <B
CLASS="command"
>NOTIFY</B
>
d92 6
a97 12
</P
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="dynamic_update"
>4.2. Dynamic Update</A
></H1
><P
>Dynamic Update is a method for adding, replacing or deleting
d100 6
a105 17
    in RFC 2136.</P
><P
>Dynamic update is enabled on a zone-by-zone basis, by
    including an <B
CLASS="command"
>allow-update</B
> or
    <B
CLASS="command"
>update-policy</B
> clause in the
    <B
CLASS="command"
>zone</B
> statement.</P
><P
>Updating of secure zones (zones using DNSSEC) follows
d109 5
a113 11
    on transaction signatures and an explicit server policy.</P
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="journal"
>4.2.1. The journal file</A
></H2
><P
>All changes made to a zone using dynamic update are stored in the
d115 1
a115 1
    server when when the first dynamic update takes place.  The name of
d117 1
a117 4
    extension <TT
CLASS="filename"
>.jnl</TT
> to the
d119 2
a120 3
    binary format and should not be edited manually.</P
><P
>The server will also occasionally write ("dump")
d125 2
a126 3
    up to 15 minutes, allowing additional updates to take place.</P
><P
>When a server is restarted after a shutdown or crash, it will replay
d128 4
a131 6
    place after the last zone dump.</P
><P
>Changes that result from incoming incremental zone transfers are also
    journalled in a similar way.</P
><P
>The zone files of dynamic zones cannot normally be edited by
d135 2
a136 6
    is up to date is to run <B
CLASS="command"
>rndc stop</B
>.</P
><P
>If you have to make changes to a dynamic zone
d139 2
a140 11
    <B
CLASS="command"
>rndc freeze <VAR
CLASS="replaceable"
>zone</VAR
></B
>.
    This will also remove the zone's <TT
CLASS="filename"
>.jnl</TT
> file
d142 8
a149 20
    <B
CLASS="command"
>rndc unfreeze <VAR
CLASS="replaceable"
>zone</VAR
></B
>
    to reload the changed zone and re-enable dynamic updates.</P
></DIV
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="incremental_zone_transfers"
>4.3. Incremental Zone Transfers (IXFR)</A
></H1
><P
>The incremental zone transfer (IXFR) protocol is a way for
d152 2
a153 9
1995. See <A
HREF="Bv9ARM.ch09.html#proposed_standards"
>Proposed Standards</A
>.</P
><P
>When acting as a master, <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9
d160 4
a163 14
<B
CLASS="command"
>ixfr-from-differences</B
> is set
to <KBD
CLASS="userinput"
>yes</KBD
>.
</P
><P
>When acting as a slave, <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 will 
d166 11
a176 30
IXFR, see the description of the <B
CLASS="command"
>request-ixfr</B
> clause
of the <B
CLASS="command"
>server</B
> statement.</P
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="AEN767"
>4.4. Split DNS</A
></H1
><P
>Setting up different views, or visibility, of the DNS space to
internal and external resolvers is usually referred to as a <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Split
DNS</I
></SPAN
> setup. There are several reasons an organization
would want to set up its DNS this way.</P
><P
>One common reason for setting up a DNS system this way is
d181 2
a182 3
they need using other means.</P
><P
>Another common reason for setting up a Split DNS system is
d186 4
a189 15
back in to the internal network.</P
><P
>Here is an example of a split DNS setup:</P
><P
>Let's say a company named <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Example, Inc.</I
></SPAN
>
(<VAR
CLASS="literal"
>example.com</VAR
>)
d192 2
a193 9
or "outside" section of a network, that is available to the public.</P
><P
><SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Example, Inc.</I
></SPAN
> wants its internal clients
d197 2
a198 3
at all outside of the internal network.</P
><P
>In order to accomplish this, the company will set up two sets
d201 4
a204 17
hosts that can talk to both sides of its network, in the DMZ.</P
><P
>The internal servers will be configured to forward all queries,
except queries for <TT
CLASS="filename"
>site1.internal</TT
>, <TT
CLASS="filename"
>site2.internal</TT
>, <TT
CLASS="filename"
>site1.example.com</TT
>,
and <TT
CLASS="filename"
>site2.example.com</TT
>, to the servers in the
d206 3
a208 28
for <TT
CLASS="filename"
>site1.example.com</TT
>, <TT
CLASS="filename"
>site2.example.com</TT
>,<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
> </I
></SPAN
><TT
CLASS="filename"
>site1.internal</TT
>,
and <TT
CLASS="filename"
>site2.internal</TT
>.</P
><P
>To protect the <TT
CLASS="filename"
>site1.internal</TT
> and <TT
CLASS="filename"
>site2.internal</TT
> domains,
d211 3
a213 10
hosts.</P
><P
>The external servers, which are on the bastion hosts, will
be configured to serve the "public" version of the <TT
CLASS="filename"
>site1</TT
> and <TT
CLASS="filename"
>site2.example.com</TT
> zones.
d215 3
a217 22
(<TT
CLASS="filename"
>www.example.com</TT
> and <TT
CLASS="filename"
>ftp.example.com</TT
>),
and mail exchange (MX)  records (<TT
CLASS="filename"
>a.mx.example.com</TT
> and <TT
CLASS="filename"
>b.mx.example.com</TT
>).</P
><P
>In addition, the public <TT
CLASS="filename"
>site1</TT
> and <TT
CLASS="filename"
>site2.example.com</TT
> zones
d223 4
a226 11
internal hosts.</P
><P
>Here's an example of a wildcard MX record:</P
><PRE
CLASS="programlisting"
><VAR
CLASS="literal"
>*   IN MX 10 external1.example.com.</VAR
></PRE
><P
>Now that they accept mail on behalf of anything in the internal
d230 2
a231 3
name servers for DNS resolution.</P
><P
>Queries for internal hostnames will be answered by the internal
d233 3
a235 10
out to the DNS servers on the bastion hosts.</P
><P
>In order for all this to work properly, internal clients will
need to be configured to query <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>only</I
></SPAN
> the internal
d237 19
a255 74
filtering on the network.</P
><P
>If everything has been set properly, <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>Example, Inc.</I
></SPAN
>'s
internal clients will now be able to:</P
><P
></P
><UL
><LI
><P
>Look up any hostnames in the <VAR
CLASS="literal"
>site1</VAR
> and 
<VAR
CLASS="literal"
>site2.example.com</VAR
> zones.</P
></LI
><LI
><P
>Look up any hostnames in the <VAR
CLASS="literal"
>site1.internal</VAR
> and 
<VAR
CLASS="literal"
>site2.internal</VAR
> domains.</P
></LI
><LI
><P
>Look up any hostnames on the Internet.</P
></LI
><LI
><P
>Exchange mail with internal AND external people.</P
></LI
></UL
><P
>Hosts on the Internet will be able to:</P
><P
></P
><UL
><LI
><P
>Look up any hostnames in the <VAR
CLASS="literal"
>site1</VAR
> and 
<VAR
CLASS="literal"
>site2.example.com</VAR
> zones.</P
></LI
><LI
><P
>Exchange mail with anyone in the <VAR
CLASS="literal"
>site1</VAR
> and 
<VAR
CLASS="literal"
>site2.example.com</VAR
> zones.</P
></LI
></UL
><P
>Here is an example configuration for the setup we just
d257 4
a260 9
    for information on how to configure your zone files, see <A
HREF="Bv9ARM.ch03.html#sample_configuration"
>Section 3.1</A
></P
><P
>Internal DNS server config:</P
><PRE
CLASS="programlisting"
>&#13;
d263 1
a263 4
acl externals { <VAR
CLASS="varname"
>bastion-ips-go-here</VAR
>; };
d270 1
a270 4
        <VAR
CLASS="varname"
>bastion-ips-go-here</VAR
>; 
d313 4
a316 6
</PRE
><P
>External (bastion host) DNS server config:</P
><PRE
CLASS="programlisting"
>&#13;acl internals { 172.16.72.0/24; 192.168.1.0/24; };
d344 5
a348 10
</PRE
><P
>In the <TT
CLASS="filename"
>resolv.conf</TT
> (or equivalent) on
the bastion host(s):</P
><PRE
CLASS="programlisting"
>&#13;search ...
d352 7
a358 16
</PRE
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="tsig"
>4.5. TSIG</A
></H1
><P
>This is a short guide to setting up Transaction SIGnatures
(TSIG) based transaction security in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
>. It describes changes
d361 2
a362 9
keys and using transaction signatures with <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
>.</P
><P
><ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> primarily supports TSIG for server to server communication.
d364 3
a366 7
Resolvers based on newer versions of <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 8 have limited support
for TSIG.</P
><P
>TSIG might be most useful for dynamic update. A primary
d370 7
a376 34
    is far superior. The <B
CLASS="command"
>nsupdate</B
>
    program supports TSIG via the <VAR
CLASS="option"
>-k</VAR
> and
    <VAR
CLASS="option"
>-y</VAR
> command line options.</P
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN858"
>4.5.1. Generate Shared Keys for Each Pair of Hosts</A
></H2
><P
>A shared secret is generated to be shared between <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
> and <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host2</I
></SPAN
>.
d378 5
a382 11
be the same on both hosts.</P
><DIV
CLASS="sect3"
><H3
CLASS="sect3"
><A
NAME="AEN863"
>4.5.1.1. Automatic Generation</A
></H3
><P
>The following command will generate a 128 bit (16 byte) HMAC-MD5
d386 3
a388 11
bit key.</P
><P
><KBD
CLASS="userinput"
>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</KBD
></P
><P
>The key is in the file <TT
CLASS="filename"
>Khost1-host2.+157+00000.private</TT
>.
d390 10
a399 25
following "<VAR
CLASS="literal"
>Key:</VAR
>"
can be extracted from the file and used as a shared secret:</P
><PRE
CLASS="programlisting"
>Key: La/E5CjG9O+os1jq0a2jdA==</PRE
><P
>The string "<VAR
CLASS="literal"
>La/E5CjG9O+os1jq0a2jdA==</VAR
>" can
be used as the shared secret.</P
></DIV
><DIV
CLASS="sect3"
><H3
CLASS="sect3"
><A
NAME="AEN874"
>4.5.1.2. Manual Generation</A
></H3
><P
>The shared secret is simply a random sequence of bits, encoded
d402 18
a419 50
so the shared secret can be manually generated.</P
><P
>Also, a known string can be run through <B
CLASS="command"
>mmencode</B
> or
a similar program to generate base-64 encoded data.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN879"
>4.5.2. Copying the Shared Secret to Both Machines</A
></H2
><P
>This is beyond the scope of DNS. A secure transport mechanism
should be used. This could be secure FTP, ssh, telephone, etc.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN882"
>4.5.3. Informing the Servers of the Key's Existence</A
></H2
><P
>Imagine <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
> and <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host 2</I
></SPAN
> are
both servers. The following is added to each server's <TT
CLASS="filename"
>named.conf</TT
> file:</P
><PRE
CLASS="programlisting"
>&#13;key host1-host2. {
d423 2
a424 6
</PRE
><P
>The algorithm, hmac-md5, is the only one supported by <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
>.
d426 1
a426 4
is recommended that either <TT
CLASS="filename"
>named.conf</TT
> be non-world
d428 2
a429 6
file that is included by <TT
CLASS="filename"
>named.conf</TT
>.</P
><P
>At this point, the key is recognized. This means that if the
d432 11
a442 33
response is signed by the same key.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN894"
>4.5.4. Instructing the Server to Use the Key</A
></H2
><P
>Since keys are shared between two hosts only, the server must
be told when keys are to be used. The following is added to the <TT
CLASS="filename"
>named.conf</TT
> file
for <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
>, if the IP address of <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host2</I
></SPAN
> is
10.1.2.3:</P
><PRE
CLASS="programlisting"
>&#13;server 10.1.2.3 {
d445 2
a446 3
</PRE
><P
>Multiple keys may be present, but only the first is used.
d448 3
a450 16
file.</P
><P
>If <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
> sends a message that is a request
to that address, the message will be signed with the specified key. <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
> will
d452 9
a460 43
key.</P
><P
>A similar statement must be present in <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host2</I
></SPAN
>'s
configuration file (with <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
>'s address) for <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host2</I
></SPAN
> to
sign request messages to <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>host1</I
></SPAN
>.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN910"
>4.5.5. TSIG Key Based Access Control</A
></H2
><P
><ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> allows IP addresses and ranges to be specified in ACL
d462 1
a462 4
<B
CLASS="command"
>allow-{ query | transfer | update }</B
> directives.
d464 6
a469 12
be denoted <B
CLASS="command"
>key host1-host2.</B
></P
><P
>An example of an allow-update directive would be:</P
><PRE
CLASS="programlisting"
>&#13;allow-update { key host1-host2. ;};
</PRE
><P
>This allows dynamic updates to succeed only if the request
d471 8
a478 24
      "<B
CLASS="command"
>host1-host2.</B
>".</P
><P
>You may want to read about the more
      powerful <B
CLASS="command"
>update-policy</B
> statement in <A
HREF="Bv9ARM.ch06.html#dynamic_update_policies"
>Section 6.2.24.4</A
>.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN923"
>4.5.6. Errors</A
></H2
><P
>The processing of TSIG signed messages can result in
d483 2
a484 3
      signed message to a specific server.</P
><P
>If a TSIG aware server receives a message signed by an
d494 7
a500 16
      NOTAUTH.</P
></DIV
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="AEN927"
>4.6. TKEY</A
></H1
><P
><B
CLASS="command"
>TKEY</B
> is a mechanism for automatically
d502 2
a503 8
    "modes" of <B
CLASS="command"
>TKEY</B
> that specify how the key is
    generated or assigned.  <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9
d507 1
a507 4
    to be present in a zone).  The <B
CLASS="command"
>TKEY</B
> process
d509 2
a510 8
    result of <B
CLASS="command"
>TKEY</B
> is a shared secret that can be
    used to sign messages with TSIG.  <B
CLASS="command"
>TKEY</B
> can also
d512 3
a514 10
    generated.</P
><P
>The <B
CLASS="command"
>TKEY</B
> process is initiated by a client
    or server by sending a signed <B
CLASS="command"
>TKEY</B
> query
d517 1
a517 4
    <B
CLASS="command"
>TKEY</B
> record and any appropriate keys.  After
d520 8
a527 23
    <B
CLASS="command"
>TKEY</B
> mode.  When using the Diffie-Hellman
    <B
CLASS="command"
>TKEY</B
> mode, Diffie-Hellman keys are exchanged,
    and the shared secret is derived by both participants.</P
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="AEN942"
>4.7. SIG(0)</A
></H1
><P
><ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 partially supports DNSSEC SIG(0)
d531 2
a532 3
    granted or denied based on the key name.</P
><P
>When a SIG(0) signed message is received, it will only be
d534 15
a548 39
    will not attempt to locate and/or validate the key.</P
><P
>SIG(0) signing of multiple-message TCP streams is not
    supported.</P
><P
>The only tool shipped with <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 that
    generates SIG(0) signed messages is <B
CLASS="command"
>nsupdate</B
>.</P
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="DNSSEC"
>4.8. DNSSEC</A
></H1
><P
>Cryptographic authentication of DNS information is possible
    through the DNS Security (<SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>DNSSEC-bis</I
></SPAN
>) extensions,
    defined in RFC &#60;TBA&#62;. This section describes the creation and use
    of DNSSEC signed zones.</P
><P
>In order to set up a DNSSEC secure zone, there are a series
    of steps which must be followed.  <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 ships
d551 1
a551 4
    below.  In all cases, the <VAR
CLASS="option"
>-h</VAR
> option prints a
d554 1
a554 4
    directory specified by the <VAR
CLASS="option"
>-h</VAR
> option, and
d556 2
a557 3
    with the current ones.</P
><P
>There must also be communication with the administrators of
d561 3
a563 7
    or absence of a <VAR
CLASS="literal"
>DS</VAR
> record at the delegation
    point.</P
><P
>For other servers to trust data in this zone, they must
d565 7
a571 17
    zone key of another zone above this one in the DNS tree.</P
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN962"
>4.8.1. Generating Keys</A
></H2
><P
>The <B
CLASS="command"
>dnssec-keygen</B
> program is used to
      generate keys.</P
><P
>A secure zone must contain one or more zone keys.  The
d575 1
a575 4
      <B
CLASS="command"
>ZONE</B
>, and must be usable for authentication.
d578 7
a584 22
      the only one is RSASHA1.</P
><P
>The following command will generate a 768 bit RSASHA1 key for
      the <TT
CLASS="filename"
>child.example</TT
> zone:</P
><P
><KBD
CLASS="userinput"
>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</KBD
></P
><P
>Two output files will be produced:
      <TT
CLASS="filename"
>Kchild.example.+005+12345.key</TT
> and
      <TT
CLASS="filename"
>Kchild.example.+005+12345.private</TT
> (where
d586 1
a586 4
      the key name (<TT
CLASS="filename"
>child.example.</TT
>), algorithm (3
d588 1
a588 4
      The private key (in the <TT
CLASS="filename"
>.private</TT
> file) is
d590 15
a604 39
      <TT
CLASS="filename"
>.key</TT
> file) is used for signature
      verification.</P
><P
>To generate another key with the same properties (but with
      a different key tag), repeat the above command.</P
><P
>The public keys should be inserted into the zone file by
      including the <TT
CLASS="filename"
>.key</TT
> files using
      <B
CLASS="command"
>$INCLUDE</B
> statements.
      </P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN982"
>4.8.2. Signing the Zone</A
></H2
><P
>The <B
CLASS="command"
>dnssec-signzone</B
> program is used to
      sign a zone.</P
><P
>Any <TT
CLASS="filename"
>keyset</TT
> files corresponding
d606 7
a612 26
      generate <VAR
CLASS="literal"
>NSEC</VAR
> and <VAR
CLASS="literal"
>RRSIG</VAR
>
      records for the zone, as well as <VAR
CLASS="literal"
>DS</VAR
> for
      the child zones if <VAR
CLASS="literal"
>'-d'</VAR
> is specified.
      If <VAR
CLASS="literal"
>'-d'</VAR
> is not specified then DS RRsets for
      the secure child zones need to be added manually.</P
><P
>The following command signs the zone, assuming it is in a
      file called <TT
CLASS="filename"
>zone.child.example</TT
>.  By
d614 7
a620 22
      used to generate signatures.</P
><P
><KBD
CLASS="userinput"
>dnssec-signzone -o child.example zone.child.example</KBD
></P
><P
>One output file is produced:
      <TT
CLASS="filename"
>zone.child.example.signed</TT
>.  This file
      should be referenced by <TT
CLASS="filename"
>named.conf</TT
> as the
      input file for the zone.</P
><P
><B
CLASS="command"
>dnssec-signzone</B
> will also produce a
d623 8
a630 26
      <VAR
CLASS="literal"
>DNSKEYs</VAR
> (or their corresponding <VAR
CLASS="literal"
>DS</VAR
>
      records) that are the secure entry point to the zone.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1004"
>4.8.3. Configuring Servers</A
></H2
><P
>Unlike <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 8, 
<ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 does not verify signatures on load,
d632 10
a641 26
in the configuration file.</P
><P
>The public key for any security root must be present in
the configuration file's <B
CLASS="command"
>trusted-keys</B
>
statement, as described later in this document. </P
></DIV
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
NAME="AEN1011"
>4.9. IPv6 Support in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9</A
></H1
><P
><ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 fully supports all currently defined forms of IPv6
d644 2
a645 6
    system.</P
><P
>For forward lookups, <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 supports only AAAA
d647 1
a647 4
    support for forward lookups in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 is
d649 1
a649 4
    However, authoritative <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 name servers still
d652 2
a653 6
    records.</P
><P
>For IPv6 reverse lookups, <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 supports
d655 3
a657 18
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.arpa</I
></SPAN
> domain, as well as the older, deprecated
    <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.int</I
></SPAN
> domain.
    <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 formerly
d661 1
a661 4
    Any applications in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 do not understand
d663 8
a670 21
    In particular, an authoritative <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 name
    server rejects to load a zone file containing binary labels.</P
><P
>For an overview of the format and structure of IPv6 addresses,
    see <A
HREF="Bv9ARM.ch09.html#ipv6addresses"
>Section A.2.1</A
>.</P
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1029"
>4.9.1. Address Lookups Using AAAA Records</A
></H2
><P
>The AAAA record is a parallel to the IPv4 A record.  It
d672 3
a674 4
      example,</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example.com.
d676 2
a677 3
</PRE
><P
>It is recommended that IPv4-in-IPv6 mapped addresses not
d679 7
a685 16
        a AAAA, with <VAR
CLASS="literal"
>::ffff:192.168.42.1</VAR
> as the
        address.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1035"
>4.9.2. Address to Name Lookups Using Nibble Format</A
></H2
><P
>When looking up an address in nibble format, the address
d687 1
a687 4
      <VAR
CLASS="literal"
>ip6.arpa.</VAR
> is appended to the resulting name.
d690 3
a692 7
      <VAR
CLASS="literal"
>2001:db8::1</VAR
>.</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.
d694 23
a716 68
</PRE
></DIV
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="Bv9ARM.ch03.html"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="Bv9ARM.html"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="Bv9ARM.ch05.html"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Name Server Configuration</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>The <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 Lightweight Resolver</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>@


1.4
log
@resolve conflicts
@
text
@d99 1
a99 1
HREF="Bv9ARM.ch04.html#AEN757"
d109 1
a109 1
HREF="Bv9ARM.ch04.html#AEN917"
d114 1
a114 1
HREF="Bv9ARM.ch04.html#AEN932"
d124 1
a124 1
HREF="Bv9ARM.ch04.html#AEN1001"
d341 1
a341 1
NAME="AEN757"
d759 1
a759 1
NAME="AEN848"
d783 1
a783 1
NAME="AEN853"
d823 1
a823 1
NAME="AEN864"
d844 1
a844 1
NAME="AEN869"
d856 1
a856 1
NAME="AEN872"
d910 1
a910 1
NAME="AEN884"
d994 1
a994 1
NAME="AEN900"
d1040 1
a1040 1
NAME="AEN913"
d1069 1
a1069 1
NAME="AEN917"
d1136 1
a1136 1
NAME="AEN932"
d1223 1
a1223 1
NAME="AEN952"
d1301 1
a1301 1
NAME="AEN972"
d1381 1
a1381 1
NAME="AEN994"
d1409 1
a1409 1
NAME="AEN1001"
d1489 1
a1489 1
NAME="AEN1019"
d1515 1
a1515 1
NAME="AEN1025"
@


1.3
log
@update to BIND v9.2.3. ok todd@@
@
text
@d1 1
d5 1
a5 1
>Advanced Concepts</TITLE
d8 1
a8 2
CONTENT="Modular DocBook HTML Stylesheet Version 1.73
"><LINK
d13 1
a13 1
TITLE="Nameserver Configuration"
d73 2
a74 2
>Chapter 4. Advanced Concepts</A
></H1
d84 5
d93 1
a93 1
>4.2. <A
d98 2
a99 2
>4.3. <A
HREF="Bv9ARM.ch04.html#AEN727"
d103 1
a103 1
>4.4. <A
d108 2
a109 2
>4.5. <A
HREF="Bv9ARM.ch04.html#AEN887"
d113 2
a114 2
>4.6. <A
HREF="Bv9ARM.ch04.html#AEN902"
d118 1
a118 1
>4.7. <A
d123 3
a125 3
>4.8. <A
HREF="Bv9ARM.ch04.html#AEN987"
>IPv6 Support in <SPAN
d127 1
a127 1
>BIND</SPAN
d137 51
d189 1
a189 1
>4.1. Dynamic Update</A
d192 3
a194 3
>Dynamic update is the term used for the ability under
    certain specified conditions to add, modify or delete records or
    RRsets in the master zone files. Dynamic update is fully described
d212 1
a212 1
    RFC 3007: SIG and NXT records affected by updates are automatically
d222 1
a222 1
>4.1.1. The journal file</A
d240 2
a241 2
    zone is updated frequently.  Instead, the dump is delayed by 15
    minutes, allowing additional updates to take place.</P
d260 3
a262 2
    manually, the following procedure will work: Shut down
    the server using <B
d264 6
a269 25
>rndc stop</B
> (sending a signal
    or using <B
CLASS="command"
>rndc halt</B
> is <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>not</I
></SPAN
>
    sufficient). Wait for the server to exit,
    then <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>remove</I
></SPAN
> the zone's 
    <TT
CLASS="filename"
>.jnl</TT
> file, edit the zone file,
    and restart the server.  Removing the <TT
d272 8
d281 1
a281 3
    file is necessary because the manual edits will not be
    present in the journal, rendering it inconsistent with the
    contents of the zone file.</P
d290 1
a290 1
>4.2. Incremental Zone Transfers (IXFR)</A
d294 3
a296 3
    slave servers to transfer only changed data, instead of having to
    transfer the entire zone. The IXFR protocol is documented in RFC
    1995. See <A
d301 1
a301 1
>When acting as a master, <SPAN
d303 3
a305 2
>BIND</SPAN
> 9 supports IXFR for those zones
d308 12
a319 3
whose data was obtained by IXFR, but not manually maintained master
zones nor slave zones obtained by performing a full zone transfer
(AXFR).</P
d321 1
a321 1
>When acting as a slave, <SPAN
d323 3
a325 2
>BIND</SPAN
> 9 will attempt to use IXFR unless
d341 2
a342 2
NAME="AEN727"
>4.3. Split DNS</A
d345 1
a345 1
>Setting up different views, or visibility, of DNS space to
d377 5
a381 1
> (example.com)
d399 1
a399 1
of nameservers. One set will be on the inside network (in the reserved
d447 1
a447 1
the internal nameservers must be configured to disallow all queries
d492 1
a492 1
><TT
d494 1
a494 1
>*   IN MX 10 external1.example.com.</TT
d501 1
a501 1
nameservers for DNS resolution.</P
d515 1
a515 1
nameservers for DNS queries. This could also be enforced via selective
d531 1
a531 1
>Look up any hostnames in the <TT
d533 1
a533 1
>site1</TT
d535 1
a535 1
<TT
d537 1
a537 1
>site2.example.com</TT
d542 1
a542 1
>Look up any hostnames in the <TT
d544 1
a544 1
>site1.internal</TT
d546 1
a546 1
<TT
d548 1
a548 1
>site2.internal</TT
d567 1
a567 1
>Look up any hostnames in the <TT
d569 1
a569 1
>site1</TT
d571 1
a571 1
<TT
d573 1
a573 1
>site2.example.com</TT
d578 1
a578 1
>Exchange mail with anyone in the <TT
d580 1
a580 1
>site1</TT
d582 1
a582 1
<TT
d584 1
a584 1
>site2.example.com</TT
d602 1
a602 1
acl externals { <TT
d604 1
a604 1
>bastion-ips-go-here</TT
d612 1
a612 1
        <TT
d614 1
a614 1
>bastion-ips-go-here</TT
d633 1
a633 1
zone "site2.example.com" {
d712 1
a712 1
>4.4. TSIG</A
d716 1
a716 1
(TSIG) based transaction security in <SPAN
d718 1
a718 1
>BIND</SPAN
d722 1
a722 1
keys and using transaction signatures with <SPAN
d724 1
a724 1
>BIND</SPAN
d727 1
a727 1
><SPAN
d729 1
a729 1
>BIND</SPAN
d732 1
a732 1
Resolvers based on newer versions of <SPAN
d734 1
a734 1
>BIND</SPAN
d740 3
a742 5
    updates, but IP-based access control is insufficient. Key-based
    access control is far superior, see <A
HREF="Bv9ARM.ch09.html#proposed_standards"
>Proposed Standards</A
>. The <B
d746 1
a746 1
    program supports TSIG via the <TT
d748 1
a748 1
>-k</TT
d750 1
a750 1
    <TT
d752 1
a752 1
>-y</TT
d759 2
a760 2
NAME="AEN818"
>4.4.1. Generate Shared Keys for Each Pair of Hosts</A
d783 2
a784 2
NAME="AEN823"
>4.4.1.1. Automatic Generation</A
d793 1
a793 1
><TT
d795 1
a795 3
><B
>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</B
></TT
d803 1
a803 1
following "<TT
d805 1
a805 1
>Key:</TT
d812 1
a812 1
>The string "<TT
d814 1
a814 1
>La/E5CjG9O+os1jq0a2jdA==</TT
d823 2
a824 2
NAME="AEN834"
>4.4.1.2. Manual Generation</A
d844 2
a845 2
NAME="AEN839"
>4.4.2. Copying the Shared Secret to Both Machines</A
d856 2
a857 2
NAME="AEN842"
>4.4.3. Informing the Servers of the Key's Existence</A
d885 1
a885 1
>The algorithm, hmac-md5, is the only one supported by <SPAN
d887 1
a887 1
>BIND</SPAN
d902 2
a903 2
signature. If the signature succeeds, the response is signed by
the same key.</P
d910 2
a911 2
NAME="AEN854"
>4.4.4. Instructing the Server to Use the Key</A
d994 2
a995 2
NAME="AEN870"
>4.4.5. TSIG Key Based Access Control</A
d998 1
a998 1
><SPAN
d1000 1
a1000 1
>BIND</SPAN
d1032 1
a1032 1
>Section 6.2.22.4</A
d1040 2
a1041 2
NAME="AEN883"
>4.4.6. Errors</A
d1069 2
a1070 2
NAME="AEN887"
>4.5. TKEY</A
d1082 1
a1082 1
    generated or assigned.  <SPAN
d1084 3
a1086 2
>BIND</SPAN
> implements only one of these modes,
d1136 2
a1137 2
NAME="AEN902"
>4.6. SIG(0)</A
d1140 1
a1140 1
><SPAN
d1142 6
a1147 6
>BIND</SPAN
> 9 partially supports DNSSEC SIG(0) transaction
    signatures as specified in RFC 2535.  SIG(0) uses public/private
    keys to authenticate messages.  Access control is performed in the
    same manner as TSIG keys; privileges can be granted or denied
    based on the key name.</P
d1156 1
a1156 1
><SPAN
d1158 6
a1163 3
>BIND</SPAN
> 9 does not ship with any tools that generate SIG(0)
    signed messages.</P
d1171 1
a1171 1
>4.7. DNSSEC</A
d1179 1
a1179 1
>DNSSEC</I
d1182 1
a1182 1
    defined in RFC 2535. This section describes the creation and use
d1186 1
a1186 1
    of steps which must be followed.  <SPAN
d1188 1
a1188 1
>BIND</SPAN
d1192 1
a1192 1
    below.  In all cases, the "<TT
d1194 2
a1195 2
>-h</TT
>" option prints a
d1197 6
a1202 2
    keyset and signedkey files to be in the working directory, and
    that the tools shipped with BIND 9.0.x are not fully compatible
d1206 8
a1213 3
    the parent and/or child zone to transmit keys and signatures.  A
    zone's security status must be indicated by the parent zone for a
    DNSSEC capable resolver to trust its data.</P
d1223 2
a1224 2
NAME="AEN919"
>4.7.1. Generating Keys</A
d1243 1
a1243 2
      these are RSASHA1 (which is not yet supported in BIND 9.2)
      and DSA.</P
d1245 1
a1245 1
>The following command will generate a 768 bit DSA key for
d1251 1
a1251 1
><TT
d1253 1
a1253 3
><B
>dnssec-keygen -a DSA -b 768 -n ZONE child.example.</B
></TT
d1259 1
a1259 1
>Kchild.example.+003+12345.key</TT
d1263 1
a1263 1
>Kchild.example.+003+12345.private</TT
d1270 1
a1270 1
      is DSA, 1 is RSA, etc.), and the key tag (12345 in this case).
d1285 2
a1286 6
>The public keys should be inserted into the zone file with
      <B
CLASS="command"
>$INCLUDE</B
> statements, including the
      <TT
d1289 1
a1289 27
> files.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN939"
>4.7.2. Creating a Keyset</A
></H2
><P
>The <B
CLASS="command"
>dnssec-makekeyset</B
> program is used
      to create a key set from one or more keys.</P
><P
>Once the zone keys have been generated, a key set must be
      built for transmission to the administrator of the parent zone,
      so that the parent zone can sign the keys with its own zone key
      and correctly indicate the security status of this zone.  When
      building a key set, the list of keys to be included and the TTL
      of the set must be specified, and the desired signature validity
      period of the parent's signature may also be specified.</P
><P
>The list of keys to be inserted into the key set may also
      included non-zone keys present at the top of the zone.
d1292 3
a1294 25
>dnssec-makekeyset</B
> may also be used at other
      names in the zone.</P
><P
>The following command generates a key set containing the
      above key and another key similarly generated, with a TTL of
      3600 and a signature validity period of 10 days starting from
      now.</P
><P
><TT
CLASS="userinput"
><B
>dnssec-makekeyset -t 3600 -e +864000 Kchild.example.+003+12345 Kchild.example.+003+23456</B
></TT
></P
><P
>One output file is produced:
      <TT
CLASS="filename"
>keyset-child.example.</TT
>.  This file should be
      transmitted to the parent to be signed.  It includes the keys,
      as well as signatures over the key set generated by the zone
      keys themselves, which are used to prove ownership of the
      private keys and encode the desired validity period.</P
d1301 2
a1302 52
NAME="AEN951"
>4.7.3. Signing the Child's Keyset</A
></H2
><P
>The <B
CLASS="command"
>dnssec-signkey</B
> program is used to
      sign one child's keyset.</P
><P
>If the <TT
CLASS="filename"
>child.example</TT
> zone has any
      delegations which are secure, for example,
      <TT
CLASS="filename"
>grand.child.example</TT
>, the
      <TT
CLASS="filename"
>child.example</TT
> administrator should receive
      keyset files for each secure subzone.  These keys must be signed
      by this zone's zone keys.</P
><P
>The following command signs the child's key set with the
      zone keys:</P
><P
><TT
CLASS="userinput"
><B
>dnssec-signkey keyset-grand.child.example. Kchild.example.+003+12345 Kchild.example.+003+23456</B
></TT
></P
><P
>One output file is produced:
      <TT
CLASS="filename"
>signedkey-grand.child.example.</TT
>.  This file
      should be both transmitted back to the child and retained.  It
      includes all keys (the child's keys) from the keyset file and
      signatures generated by this zone's zone keys.</P
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN964"
>4.7.4. Signing the Zone</A
d1313 15
a1327 9
>signedkey</TT
> files corresponding to
      secure subzones should be present, as well as a
      <TT
CLASS="filename"
>signedkey</TT
> file for this zone generated by
      the parent (if there is one). The zone signer will generate
      <TT
d1329 3
a1331 2
>NXT</TT
> and <TT
d1333 3
a1335 5
>SIG</TT
> records for
      the zone, as well as incorporate the zone key signature from the
      parent and indicate the security status at all delegation
      points.</P
d1345 1
a1345 1
><TT
d1347 1
a1347 3
><B
>dnssec-signzone -o child.example zone.child.example</B
></TT
d1360 15
d1381 2
a1382 2
NAME="AEN980"
>4.7.5. Configuring Servers</A
d1385 1
a1385 1
>Unlike in <SPAN
d1387 1
a1387 1
>BIND</SPAN
d1389 1
a1389 1
data is not verified on load in <SPAN
d1391 2
a1392 2
>BIND</SPAN
> 9,
d1409 2
a1410 2
NAME="AEN987"
>4.8. IPv6 Support in <SPAN
d1412 1
a1412 1
>BIND</SPAN
d1416 1
a1416 1
><SPAN
d1418 23
a1440 5
>BIND</SPAN
> 9 fully supports all currently
    defined forms of IPv6 name to address and address to name
    lookups.  It will also use IPv6 addresses to make queries when
    running on an IPv6 capable system.</P
d1442 1
a1442 1
>For forward lookups, <SPAN
d1444 1
a1444 1
>BIND</SPAN
d1446 23
a1468 16
    both A6 and AAAA records.  The use of A6 records has been moved
    to experimental (RFC 3363) and should be treated as deprecated.</P
><P
>The use of "bitstring" labels for IPv6 has been moved to
    experimental (RFC 3363) reverting to a nibble format.  The
    suffix for the IPv6 reverse lookups has also changed from
    <TT
CLASS="literal"
>IP6.INT</TT
> to <TT
CLASS="literal"
>IP6.ARPA</TT
> (RFC
    3152).</P
><P
><SPAN
d1470 4
a1473 8
>BIND</SPAN
> 9 now defaults to nibble
    <TT
CLASS="literal"
>IP6.ARPA</TT
> format lookups.</P
><P
><SPAN
d1475 3
a1477 7
>BIND</SPAN
> 9 includes a new lightweight resolver library and
    resolver daemon which new applications may choose to use to avoid
    the complexities of A6 chain following and bitstring labels, see <A
HREF="Bv9ARM.ch05.html"
>Chapter 5</A
>.</P
d1482 1
a1482 1
>Section A.3.1</A
d1489 2
a1490 2
NAME="AEN1005"
>4.8.1. Address Lookups Using AAAA Records</A
d1499 1
a1499 1
host            3600    IN      AAAA    3ffe:8050:201:1860:42::1
d1501 8
d1515 2
a1516 2
NAME="AEN1009"
>4.8.2. Address to Name Lookups Using Nibble Format</A
d1521 1
a1521 1
      <TT
d1523 1
a1523 1
>IP6.ARPA.</TT
d1527 1
a1527 1
      <TT
d1529 1
a1529 1
>3ffe:8050:201:1860:42::1</TT
d1533 2
a1534 2
>&#13;$ORIGIN 0.6.8.1.1.0.2.0.0.5.0.8.e.f.f.3.IP6.ARPA.
1.0.0.0.0.0.0.0.0.0.0.0.2.4.0.0   14400 IN      PTR     host.example.com.
d1583 1
a1583 1
>Nameserver Configuration</TD
d1593 1
a1593 1
>The <SPAN
d1595 1
a1595 1
>BIND</SPAN
@


1.2
log
@update to BIND 9.2.2-release. ok millert@@
@
text
@d1438 4
a1441 4
> 9 fully supports all currently defined forms of IPv6
    name to address and address to name lookups.  It will also use
    IPv6 addresses to make queries when running on an IPv6 capable
    system.</P
d1446 15
a1460 7
> 9 supports both A6 and AAAA
    records.  The use of AAAA records is deprecated, but it is still
    useful for hosts to have both AAAA and A6 records to maintain
    backward compatibility with installations where AAAA records are
    still used.  In fact, the stub resolvers currently shipped with
    most operating system support only AAAA lookups, because following
    A6 chains is much harder than doing A or AAAA lookups.</P
d1462 1
a1462 1
>For IPv6 reverse lookups, <SPAN
d1465 5
a1469 16
> 9 supports the new
    "bitstring" format used in the <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.arpa</I
></SPAN
>
    domain, as well as the older, deprecated "nibble" format used in
    the <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.int</I
></SPAN
> domain.</P
d1491 1
a1491 1
NAME="AEN1003"
a1502 4
><P
>While their use is deprecated, they are useful to support
      older IPv6 applications.  They should not be added where they
      are not absolutely necessary.</P
d1509 2
a1510 2
NAME="AEN1008"
>4.8.2. Address Lookups Using A6 Records</A
a1512 100
>The A6 record is more flexible than the AAAA record, and
      is therefore more complicated.  The A6 record can be used to
      form a chain of A6 records, each specifying part of the IPv6
      address. It can also be used to specify the entire record as
      well.  For example, this record supplies the same data as the
      AAAA record in the previous example:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example.com.
host            3600    IN      A6      0 3ffe:8050:201:1860:42::1
</PRE
><DIV
CLASS="sect3"
><H3
CLASS="sect3"
><A
NAME="AEN1012"
>4.8.2.1. A6 Chains</A
></H3
><P
>A6 records are designed to allow network
        renumbering. This works when an A6 record only specifies the
        part of the address space the domain owner controls.  For
        example, a host may be at a company named "company."  It has
        two ISPs which provide IPv6 address space for it.  These two
        ISPs fully specify the IPv6 prefix they supply.</P
><P
>In the company's address space:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example.com.
host            3600    IN      A6      64 0:0:0:0:42::1 company.example1.net.
host            3600    IN      A6      64 0:0:0:0:42::1 company.example2.net.
</PRE
><P
>ISP1 will use:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example1.net.
company         3600    IN      A6      0 3ffe:8050:201:1860::
</PRE
><P
>ISP2 will use:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example2.net.
company         3600    IN      A6      0 1234:5678:90ab:fffa::
</PRE
><P
>When <TT
CLASS="literal"
>host.example.com</TT
> is looked up,
        the resolver (in the resolver daemon or caching name server)
        will find two partial A6 records, and will use the additional
        name to find the remainder of the data.</P
></DIV
><DIV
CLASS="sect3"
><H3
CLASS="sect3"
><A
NAME="AEN1023"
>4.8.2.2. A6 Records for DNS Servers</A
></H3
><P
>When an A6 record specifies the address of a name
        server, it should use the full address rather than specifying
        a partial address.  For example:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example.com.
@@               14400           IN      NS              ns0
                14400           IN      NS              ns1
ns0             14400           IN      A6              0 3ffe:8050:201:1860:42::1
ns1             14400           IN      A               192.168.42.1
</PRE
><P
>It is recommended that IPv4-in-IPv6 mapped addresses not
        be used.  If a host has an IPv4 address, use an A record, not
        an A6, with <TT
CLASS="literal"
>::ffff:192.168.42.1</TT
> as the
        address.</P
></DIV
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1029"
>4.8.3. Address to Name Lookups Using Nibble Format</A
></H2
><P
>While the use of nibble format to look up names is
      deprecated, it is supported for backwards compatibility with
      existing IPv6 applications.</P
><P
d1517 1
a1517 1
>ip6.int.</TT
d1527 1
a1527 1
>&#13;$ORIGIN 0.6.8.1.1.0.2.0.0.5.0.8.e.f.f.3.ip6.int.
a1530 110
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1036"
>4.8.4. Address to Name Lookups Using Bitstring Format</A
></H2
><P
>Bitstring labels can start and end on any bit boundary,
      rather than on a multiple of 4 bits as in the nibble
      format. They also use <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.arpa</I
></SPAN
> rather than
      <SPAN
CLASS="emphasis"
><I
CLASS="emphasis"
>ip6.int</I
></SPAN
>.</P
><P
>To replicate the previous example using bitstrings:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN \[x3ffe805002011860/64].ip6.arpa.
\[x0042000000000001/64]         14400   IN      PTR     host.example.com.
</PRE
></DIV
><DIV
CLASS="sect2"
><H2
CLASS="sect2"
><A
NAME="AEN1043"
>4.8.5. Using DNAME for Delegation of IPv6 Reverse Addresses</A
></H2
><P
>In IPV6, the same host may have many addresses from many
      network providers.  Since the trailing portion of the address
      usually remains constant, <B
CLASS="command"
>DNAME</B
> can help
      reduce the number of zone files used for reverse mapping that
      need to be maintained.</P
><P
>For example, consider a host which has two providers
      (<TT
CLASS="literal"
>example.net</TT
> and
      <TT
CLASS="literal"
>example2.net</TT
>) and
      therefore two IPv6 addresses.  Since the host chooses its own 64
      bit host address portion, the provider address is the only part
      that changes:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN example.com.
host                    IN      A6      64      ::1234:5678:1212:5675 cust1.example.net.
                        IN      A6      64      ::1234:5678:1212:5675 subnet5.example2.net.
$ORIGIN example.net.
cust1                   IN      A6      48      0:0:0:dddd:: ipv6net.example.net.
ipv6net                 IN      A6      0       aa:bb:cccc::
$ORIGIN example2.net.
subnet5                 IN      A6      48      0:0:0:1:: ipv6net2.example2.net.
ipv6net2                IN      A6      0       6666:5555:4::
</PRE
><P
>This sets up forward lookups.  To handle the reverse lookups,
the provider <TT
CLASS="literal"
>example.net</TT
>
would have:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN \[x00aa00bbcccc/48].ip6.arpa.
\[xdddd/16]             IN      DNAME           ipv6-rev.example.com.
</PRE
><P
>and <TT
CLASS="literal"
>example2.net</TT
> would have:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN \[x666655550004/48].ip6.arpa.
\[x0001/16]             IN      DNAME           ipv6-rev.example.com.
</PRE
><P
><TT
CLASS="literal"
>example.com</TT
>
      needs only one zone file to handle both of these reverse
      mappings:</P
><PRE
CLASS="programlisting"
>&#13;$ORIGIN ipv6-rev.example.com.
\[x1234567812125675/64] IN      PTR             host.example.com. 
</PRE
></DIV
d1596 1
a1596 1
>
@


1.1
log
@Initial revision
@
text
@d1617 1
a1617 1
      deprecated, it is supported for backwards compatiblity with
d1813 1
a1813 1
>@


1.1.1.1
log
@ISC BIND version 9.2.2rc1
@
text
@@


1.1.1.2
log
@ISC BIND version 9.3.0. ok deraadt@@
@
text
@a0 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d4 1
a4 1
>Advanced DNS Features</TITLE
d7 2
a8 1
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"><LINK
d13 1
a13 1
TITLE="Name Server Configuration"
d73 2
a74 2
></A
>Chapter 4. Advanced DNS Features</H1
a83 5
HREF="Bv9ARM.ch04.html#notify"
>Notify</A
></DT
><DT
>4.2. <A
d88 1
a88 1
>4.3. <A
d93 2
a94 2
>4.4. <A
HREF="Bv9ARM.ch04.html#AEN757"
d98 1
a98 1
>4.5. <A
d103 2
a104 2
>4.6. <A
HREF="Bv9ARM.ch04.html#AEN917"
d108 2
a109 2
>4.7. <A
HREF="Bv9ARM.ch04.html#AEN932"
d113 1
a113 1
>4.8. <A
d118 3
a120 3
>4.9. <A
HREF="Bv9ARM.ch04.html#AEN1001"
>IPv6 Support in <ACRONYM
d122 1
a122 1
>BIND</ACRONYM
a131 51
NAME="notify"
>4.1. Notify</A
></H1
><P
><ACRONYM
CLASS="acronym"
>DNS</ACRONYM
> NOTIFY is a mechanism that allows master
servers to notify their slave servers of changes to a zone's data. In
response to a <B
CLASS="command"
>NOTIFY</B
> from a master server, the
slave will check to see that its version of the zone is the
current version and, if not, initiate a zone transfer.</P
><P
><ACRONYM
CLASS="acronym"
>DNS</ACRONYM
>
For more information about
<B
CLASS="command"
>NOTIFY</B
>, see the description of the
<B
CLASS="command"
>notify</B
> option in <A
HREF="Bv9ARM.ch06.html#boolean_options"
>Section 6.2.16.1</A
> and
the description of the zone option <B
CLASS="command"
>also-notify</B
> in
<A
HREF="Bv9ARM.ch06.html#zone_transfers"
>Section 6.2.16.7</A
>.  The <B
CLASS="command"
>NOTIFY</B
>
protocol is specified in RFC 1996.
</P
></DIV
><DIV
CLASS="sect1"
><H1
CLASS="sect1"
><A
d133 1
a133 1
>4.2. Dynamic Update</A
d136 3
a138 3
>Dynamic Update is a method for adding, replacing or deleting
    records in a master server by sending it a special form of DNS
    messages.  The format and meaning of these messages is specified
d156 1
a156 1
    RFC 3007: RRSIG and NSEC records affected by updates are automatically
d166 1
a166 1
>4.2.1. The journal file</A
d184 2
a185 2
    zone is updated frequently.  Instead, the dump is delayed by
    up to 15 minutes, allowing additional updates to take place.</P
d204 6
a209 3
    manually, the following procedure will work: Disable dynamic updates
    to the zone using
    <B
d211 21
a231 6
>rndc freeze <VAR
CLASS="replaceable"
>zone</VAR
></B
>.
    This will also remove the zone's <TT
a233 8
> file
    and update the master file.  Edit the zone file.  Run
    <B
CLASS="command"
>rndc unfreeze <VAR
CLASS="replaceable"
>zone</VAR
></B
d235 3
a237 1
    to reload the changed zone and re-enable dynamic updates.</P
d246 1
a246 1
>4.3. Incremental Zone Transfers (IXFR)</A
d250 3
a252 3
slave servers to transfer only changed data, instead of having to
transfer the entire zone. The IXFR protocol is specified in RFC
1995. See <A
d257 1
a257 1
>When acting as a master, <ACRONYM
d259 2
a260 3
>BIND</ACRONYM
> 9
supports IXFR for those zones
d263 3
a265 12
whose data was obtained by IXFR.  For manually maintained master
zones, and for slave zones obtained by performing a full zone 
transfer (AXFR), IXFR is supported only if the option
<B
CLASS="command"
>ixfr-from-differences</B
> is set
to <KBD
CLASS="userinput"
>yes</KBD
>.
</P
d267 1
a267 1
>When acting as a slave, <ACRONYM
d269 2
a270 3
>BIND</ACRONYM
> 9 will 
attempt to use IXFR unless
d286 2
a287 2
NAME="AEN757"
>4.4. Split DNS</A
d290 1
a290 1
>Setting up different views, or visibility, of the DNS space to
d322 1
a322 5
>
(<VAR
CLASS="literal"
>example.com</VAR
>)
d340 1
a340 1
of name servers. One set will be on the inside network (in the reserved
d388 1
a388 1
the internal name servers must be configured to disallow all queries
d433 1
a433 1
><VAR
d435 1
a435 1
>*   IN MX 10 external1.example.com.</VAR
d442 1
a442 1
name servers for DNS resolution.</P
d456 1
a456 1
name servers for DNS queries. This could also be enforced via selective
d472 1
a472 1
>Look up any hostnames in the <VAR
d474 1
a474 1
>site1</VAR
d476 1
a476 1
<VAR
d478 1
a478 1
>site2.example.com</VAR
d483 1
a483 1
>Look up any hostnames in the <VAR
d485 1
a485 1
>site1.internal</VAR
d487 1
a487 1
<VAR
d489 1
a489 1
>site2.internal</VAR
d508 1
a508 1
>Look up any hostnames in the <VAR
d510 1
a510 1
>site1</VAR
d512 1
a512 1
<VAR
d514 1
a514 1
>site2.example.com</VAR
d519 1
a519 1
>Exchange mail with anyone in the <VAR
d521 1
a521 1
>site1</VAR
d523 1
a523 1
<VAR
d525 1
a525 1
>site2.example.com</VAR
d543 1
a543 1
acl externals { <VAR
d545 1
a545 1
>bastion-ips-go-here</VAR
d553 1
a553 1
        <VAR
d555 1
a555 1
>bastion-ips-go-here</VAR
d574 1
a574 1
zone "site2.example.com" {                      // sample slave zone
d653 1
a653 1
>4.5. TSIG</A
d657 1
a657 1
(TSIG) based transaction security in <ACRONYM
d659 1
a659 1
>BIND</ACRONYM
d663 1
a663 1
keys and using transaction signatures with <ACRONYM
d665 1
a665 1
>BIND</ACRONYM
d668 1
a668 1
><ACRONYM
d670 1
a670 1
>BIND</ACRONYM
d673 1
a673 1
Resolvers based on newer versions of <ACRONYM
d675 1
a675 1
>BIND</ACRONYM
d681 5
a685 3
    updates, but IP-based access control is insufficient.
    The cryptographic access control provided by TSIG
    is far superior. The <B
d689 1
a689 1
    program supports TSIG via the <VAR
d691 1
a691 1
>-k</VAR
d693 1
a693 1
    <VAR
d695 1
a695 1
>-y</VAR
d702 2
a703 2
NAME="AEN848"
>4.5.1. Generate Shared Keys for Each Pair of Hosts</A
d726 2
a727 2
NAME="AEN853"
>4.5.1.1. Automatic Generation</A
d736 1
a736 1
><KBD
d738 3
a740 1
>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</KBD
d748 1
a748 1
following "<VAR
d750 1
a750 1
>Key:</VAR
d757 1
a757 1
>The string "<VAR
d759 1
a759 1
>La/E5CjG9O+os1jq0a2jdA==</VAR
d768 2
a769 2
NAME="AEN864"
>4.5.1.2. Manual Generation</A
d789 2
a790 2
NAME="AEN869"
>4.5.2. Copying the Shared Secret to Both Machines</A
d801 2
a802 2
NAME="AEN872"
>4.5.3. Informing the Servers of the Key's Existence</A
d830 1
a830 1
>The algorithm, hmac-md5, is the only one supported by <ACRONYM
d832 1
a832 1
>BIND</ACRONYM
d847 2
a848 2
signature. If the signature is successfully verified, the
response is signed by the same key.</P
d855 2
a856 2
NAME="AEN884"
>4.5.4. Instructing the Server to Use the Key</A
d939 2
a940 2
NAME="AEN900"
>4.5.5. TSIG Key Based Access Control</A
d943 1
a943 1
><ACRONYM
d945 1
a945 1
>BIND</ACRONYM
d977 1
a977 1
>Section 6.2.24.4</A
d985 2
a986 2
NAME="AEN913"
>4.5.6. Errors</A
d1014 2
a1015 2
NAME="AEN917"
>4.6. TKEY</A
d1027 1
a1027 1
    generated or assigned.  <ACRONYM
d1029 2
a1030 3
>BIND</ACRONYM
> 9
    implements only one of these modes,
d1080 2
a1081 2
NAME="AEN932"
>4.7. SIG(0)</A
d1084 1
a1084 1
><ACRONYM
d1086 6
a1091 6
>BIND</ACRONYM
> 9 partially supports DNSSEC SIG(0)
    transaction signatures as specified in RFC 2535 and RFC2931.  SIG(0)
    uses public/private keys to authenticate messages.  Access control
    is performed in the same manner as TSIG keys; privileges can be
    granted or denied based on the key name.</P
d1100 1
a1100 1
>The only tool shipped with <ACRONYM
d1102 3
a1104 6
>BIND</ACRONYM
> 9 that
    generates SIG(0) signed messages is <B
CLASS="command"
>nsupdate</B
>.</P
d1112 1
a1112 1
>4.8. DNSSEC</A
d1120 1
a1120 1
>DNSSEC-bis</I
d1123 1
a1123 1
    defined in RFC &#60;TBA&#62;. This section describes the creation and use
d1127 1
a1127 1
    of steps which must be followed.  <ACRONYM
d1129 1
a1129 1
>BIND</ACRONYM
d1133 1
a1133 1
    below.  In all cases, the <VAR
d1135 2
a1136 2
>-h</VAR
> option prints a
d1138 2
a1139 6
    keyset files to be in the working directory or the
    directory specified by the <VAR
CLASS="option"
>-h</VAR
> option, and
    that the tools shipped with BIND 9.2.x and earlier are not compatible
d1143 3
a1145 8
    the parent and/or child zone to transmit keys.  A zone's security
    status must be indicated by the parent zone for a DNSSEC capable 
    resolver to trust its data.  This is done through the presense
    or absence of a <VAR
CLASS="literal"
>DS</VAR
> record at the delegation
    point.</P
d1155 2
a1156 2
NAME="AEN952"
>4.8.1. Generating Keys</A
d1175 2
a1176 1
      the only one is RSASHA1.</P
d1178 1
a1178 1
>The following command will generate a 768 bit RSASHA1 key for
d1184 1
a1184 1
><KBD
d1186 3
a1188 1
>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</KBD
d1194 1
a1194 1
>Kchild.example.+005+12345.key</TT
d1198 1
a1198 1
>Kchild.example.+005+12345.private</TT
d1205 1
a1205 1
      is DSA, 1 is RSAMD5, 5 is RSASHA1, etc.), and the key tag (12345 in this case).
d1220 6
a1225 2
>The public keys should be inserted into the zone file by
      including the <TT
d1228 27
a1254 1
> files using
d1257 75
a1331 3
>$INCLUDE</B
> statements.
      </P
d1338 2
a1339 2
NAME="AEN972"
>4.8.2. Signing the Zone</A
d1350 9
a1358 4
>keyset</TT
> files corresponding
      to secure subzones should be present.  The zone signer will
      generate <VAR
d1360 2
a1361 2
>NSEC</VAR
> and <VAR
d1363 5
a1367 15
>RRSIG</VAR
>
      records for the zone, as well as <VAR
CLASS="literal"
>DS</VAR
> for
      the child zones if <VAR
CLASS="literal"
>'-d'</VAR
> is specified.
      If <VAR
CLASS="literal"
>'-d'</VAR
> is not specified then DS RRsets for
      the secure child zones need to be added manually.</P
d1377 1
a1377 1
><KBD
d1379 3
a1381 1
>dnssec-signzone -o child.example zone.child.example</KBD
a1393 15
><P
><B
CLASS="command"
>dnssec-signzone</B
> will also produce a
      keyset and dsset files and optionally a dlvset file.  These
      are used to provide the parent zone administators with the
      <VAR
CLASS="literal"
>DNSKEYs</VAR
> (or their corresponding <VAR
CLASS="literal"
>DS</VAR
>
      records) that are the secure entry point to the zone.</P
d1400 2
a1401 2
NAME="AEN994"
>4.8.3. Configuring Servers</A
d1404 1
a1404 1
>Unlike <ACRONYM
d1406 1
a1406 1
>BIND</ACRONYM
d1408 1
a1408 1
<ACRONYM
d1410 2
a1411 2
>BIND</ACRONYM
> 9 does not verify signatures on load,
d1428 2
a1429 2
NAME="AEN1001"
>4.9. IPv6 Support in <ACRONYM
d1431 1
a1431 1
>BIND</ACRONYM
d1435 1
a1435 1
><ACRONYM
d1437 1
a1437 1
>BIND</ACRONYM
d1443 1
a1443 1
>For forward lookups, <ACRONYM
d1445 14
a1458 22
>BIND</ACRONYM
> 9 supports only AAAA
    records.  The use of A6 records is deprecated by RFC 3363, and the
    support for forward lookups in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 is
    removed accordingly.
    However, authoritative <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 name servers still
    load zone files containing A6 records correctly, answer queries
    for A6 records, and accept zone transfer for a zone containing A6
    records.</P
><P
>For IPv6 reverse lookups, <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 supports
    the traditional "nibble" format used in the
    <SPAN
d1464 3
a1466 2
> domain, as well as the older, deprecated
    <SPAN
d1472 3
a1474 2
> domain.
    <ACRONYM
d1476 7
a1482 15
>BIND</ACRONYM
> 9 formerly
    supported the "binary label" (also known as "bitstring") format.
    The support of binary labels, however, is now completely removed
    according to the changes in RFC 3363.
    Any applications in <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 do not understand
    the format any more, and will return an error if given.
    In particular, an authoritative <ACRONYM
CLASS="acronym"
>BIND</ACRONYM
> 9 name
    server rejects to load a zone file containing binary labels.</P
d1487 1
a1487 1
>Section A.2.1</A
d1494 2
a1495 2
NAME="AEN1019"
>4.9.1. Address Lookups Using AAAA Records</A
d1504 92
a1595 1
host            3600    IN      AAAA    2001:db8::1
d1600 1
a1600 1
        a AAAA, with <VAR
d1602 1
a1602 1
>::ffff:192.168.42.1</VAR
d1606 1
d1612 2
a1613 2
NAME="AEN1025"
>4.9.2. Address to Name Lookups Using Nibble Format</A
d1616 4
d1622 1
a1622 1
      <VAR
d1624 1
a1624 1
>ip6.arpa.</VAR
d1628 1
a1628 1
      <VAR
d1630 32
a1661 1
>2001:db8::1</VAR
d1663 79
d1744 2
a1745 2
>&#13;$ORIGIN 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.
1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0   14400 IN      PTR     host.example.com.
d1794 1
a1794 1
>Name Server Configuration</TD
d1804 1
a1804 1
>The <ACRONYM
d1806 1
a1806 1
>BIND</ACRONYM
@


1.1.1.3
log
@ISC BIND release 9.3.1. ok deraadt@@
@
text
@d99 1
a99 1
HREF="Bv9ARM.ch04.html#AEN767"
d109 1
a109 1
HREF="Bv9ARM.ch04.html#AEN927"
d114 1
a114 1
HREF="Bv9ARM.ch04.html#AEN942"
d124 1
a124 1
HREF="Bv9ARM.ch04.html#AEN1011"
d341 1
a341 1
NAME="AEN767"
d759 1
a759 1
NAME="AEN858"
d783 1
a783 1
NAME="AEN863"
d823 1
a823 1
NAME="AEN874"
d844 1
a844 1
NAME="AEN879"
d856 1
a856 1
NAME="AEN882"
d910 1
a910 1
NAME="AEN894"
d994 1
a994 1
NAME="AEN910"
d1040 1
a1040 1
NAME="AEN923"
d1069 1
a1069 1
NAME="AEN927"
d1136 1
a1136 1
NAME="AEN942"
d1223 1
a1223 1
NAME="AEN962"
d1301 1
a1301 1
NAME="AEN982"
d1381 1
a1381 1
NAME="AEN1004"
d1409 1
a1409 1
NAME="AEN1011"
d1489 1
a1489 1
NAME="AEN1029"
d1515 1
a1515 1
NAME="AEN1035"
@


1.1.1.4
log
@ISC BIND release 9.3.2
@
text
@d1 144
a144 80
<!--
 - Copyright (C) 2004, 2005 Internet Systems Consortium, Inc. ("ISC")
 - Copyright (C) 2000-2003 Internet Software Consortium.
 - 
 - Permission to use, copy, modify, and distribute this software for any
 - purpose with or without fee is hereby granted, provided that the above
 - copyright notice and this permission notice appear in all copies.
 - 
 - THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
 - REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 - AND FITNESS. IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
 - INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 - LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 - OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 - PERFORMANCE OF THIS SOFTWARE.
-->
<!-- $ISC: Bv9ARM.ch04.html,v 1.30.2.6.2.14 2005/10/13 02:33:59 marka Exp $ -->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Chapter 4. Advanced DNS Features</title>
<meta name="generator" content="DocBook XSL Stylesheets V1.69.1">
<link rel="start" href="Bv9ARM.html" title="BIND 9 Administrator Reference Manual">
<link rel="up" href="Bv9ARM.html" title="BIND 9 Administrator Reference Manual">
<link rel="prev" href="Bv9ARM.ch03.html" title="Chapter 3. Name Server Configuration">
<link rel="next" href="Bv9ARM.ch05.html" title="Chapter 5. The BIND 9 Lightweight Resolver">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
<div class="navheader">
<table width="100%" summary="Navigation header">
<tr><th colspan="3" align="center">Chapter 4. Advanced DNS Features</th></tr>
<tr>
<td width="20%" align="left">
<a accesskey="p" href="Bv9ARM.ch03.html">Prev</a> </td>
<th width="60%" align="center"> </th>
<td width="20%" align="right"> <a accesskey="n" href="Bv9ARM.ch05.html">Next</a>
</td>
</tr>
</table>
<hr>
</div>
<div class="chapter" lang="en">
<div class="titlepage"><div><div><h2 class="title">
<a name="Bv9ARM.ch04"></a>Chapter 4. Advanced DNS Features</h2></div></div></div>
<div class="toc">
<p><b>Table of Contents</b></p>
<dl>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#notify">Notify</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#dynamic_update">Dynamic Update</a></span></dt>
<dd><dl><dt><span class="sect2"><a href="Bv9ARM.ch04.html#journal">The journal file</a></span></dt></dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#incremental_zone_transfers">Incremental Zone Transfers (IXFR)</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2549203">Split DNS</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#tsig">TSIG</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549627">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549830">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549838">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549878">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2549998">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550042">Errors</a></span></dt>
</dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550056">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550173">SIG(0)</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#DNSSEC">DNSSEC</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550308">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550375">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550450">Configuring Servers</a></span></dt>
</dl></dd>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2550473">IPv6 Support in <span class="acronym">BIND</span> 9</a></span></dt>
<dd><dl>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550600">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2550620">Address to Name Lookups Using Nibble Format</a></span></dt>
</dl></dd>
</dl>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="notify"></a>Notify</h2></div></div></div>
<p><span class="acronym">DNS</span> NOTIFY is a mechanism that allows master
d146 4
a149 1
response to a <span><strong class="command">NOTIFY</strong></span> from a master server, the
d151 6
a156 2
current version and, if not, initiate a zone transfer.</p>
<p><span class="acronym">DNS</span>
d158 22
a179 4
<span><strong class="command">NOTIFY</strong></span>, see the description of the
<span><strong class="command">notify</strong></span> option in <a href="Bv9ARM.ch06.html#boolean_options" title="Boolean Options">the section called &#8220;Boolean Options&#8221;</a> and
the description of the zone option <span><strong class="command">also-notify</strong></span> in
<a href="Bv9ARM.ch06.html#zone_transfers" title="Zone Transfers">the section called &#8220;Zone Transfers&#8221;</a>.  The <span><strong class="command">NOTIFY</strong></span>
d181 12
a192 6
</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="dynamic_update"></a>Dynamic Update</h2></div></div></div>
<p>Dynamic Update is a method for adding, replacing or deleting
d195 17
a211 6
    in RFC 2136.</p>
<p>Dynamic update is enabled on a zone-by-zone basis, by
    including an <span><strong class="command">allow-update</strong></span> or
    <span><strong class="command">update-policy</strong></span> clause in the
    <span><strong class="command">zone</strong></span> statement.</p>
<p>Updating of secure zones (zones using DNSSEC) follows
d215 11
a225 5
    on transaction signatures and an explicit server policy.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="journal"></a>The journal file</h3></div></div></div>
<p>All changes made to a zone using dynamic update are stored in the
d227 1
a227 1
    server when the first dynamic update takes place.  The name of
d229 4
a232 1
    extension <code class="filename">.jnl</code> to the
d234 3
a236 2
    binary format and should not be edited manually.</p>
<p>The server will also occasionally write ("dump")
d241 3
a243 2
    up to 15 minutes, allowing additional updates to take place.</p>
<p>When a server is restarted after a shutdown or crash, it will replay
d245 6
a250 4
    place after the last zone dump.</p>
<p>Changes that result from incoming incremental zone transfers are also
    journalled in a similar way.</p>
<p>The zone files of dynamic zones cannot normally be edited by
d254 6
a259 2
    is up to date is to run <span><strong class="command">rndc stop</strong></span>.</p>
<p>If you have to make changes to a dynamic zone
d262 11
a272 2
    <span><strong class="command">rndc freeze <em class="replaceable"><code>zone</code></em></strong></span>.
    This will also remove the zone's <code class="filename">.jnl</code> file
d274 20
a293 8
    <span><strong class="command">rndc unfreeze <em class="replaceable"><code>zone</code></em></strong></span>
    to reload the changed zone and re-enable dynamic updates.</p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="incremental_zone_transfers"></a>Incremental Zone Transfers (IXFR)</h2></div></div></div>
<p>The incremental zone transfer (IXFR) protocol is a way for
d296 9
a304 2
1995. See <a href="Bv9ARM.ch09.html#proposed_standards">Proposed Standards</a>.</p>
<p>When acting as a master, <span class="acronym">BIND</span> 9
d311 14
a324 4
<span><strong class="command">ixfr-from-differences</strong></span> is set
to <strong class="userinput"><code>yes</code></strong>.
</p>
<p>When acting as a slave, <span class="acronym">BIND</span> 9 will 
d327 30
a356 11
IXFR, see the description of the <span><strong class="command">request-ixfr</strong></span> clause
of the <span><strong class="command">server</strong></span> statement.</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2549203"></a>Split DNS</h2></div></div></div>
<p>Setting up different views, or visibility, of the DNS space to
internal and external resolvers is usually referred to as a <span class="emphasis"><em>Split
DNS</em></span> setup. There are several reasons an organization
would want to set up its DNS this way.</p>
<p>One common reason for setting up a DNS system this way is
d361 3
a363 2
they need using other means.</p>
<p>Another common reason for setting up a Split DNS system is
d367 15
a381 4
back in to the internal network.</p>
<p>Here is an example of a split DNS setup:</p>
<p>Let's say a company named <span class="emphasis"><em>Example, Inc.</em></span>
(<code class="literal">example.com</code>)
d384 9
a392 2
or "outside" section of a network, that is available to the public.</p>
<p><span class="emphasis"><em>Example, Inc.</em></span> wants its internal clients
d396 3
a398 2
at all outside of the internal network.</p>
<p>In order to accomplish this, the company will set up two sets
d401 17
a417 4
hosts that can talk to both sides of its network, in the DMZ.</p>
<p>The internal servers will be configured to forward all queries,
except queries for <code class="filename">site1.internal</code>, <code class="filename">site2.internal</code>, <code class="filename">site1.example.com</code>,
and <code class="filename">site2.example.com</code>, to the servers in the
d419 28
a446 3
for <code class="filename">site1.example.com</code>, <code class="filename">site2.example.com</code>,<span class="emphasis"><em> </em></span><code class="filename">site1.internal</code>,
and <code class="filename">site2.internal</code>.</p>
<p>To protect the <code class="filename">site1.internal</code> and <code class="filename">site2.internal</code> domains,
d449 10
a458 3
hosts.</p>
<p>The external servers, which are on the bastion hosts, will
be configured to serve the "public" version of the <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones.
d460 22
a481 3
(<code class="filename">www.example.com</code> and <code class="filename">ftp.example.com</code>),
and mail exchange (MX)  records (<code class="filename">a.mx.example.com</code> and <code class="filename">b.mx.example.com</code>).</p>
<p>In addition, the public <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones
d487 11
a497 4
internal hosts.</p>
<p>Here's an example of a wildcard MX record:</p>
<pre class="programlisting">*   IN MX 10 external1.example.com.</pre>
<p>Now that they accept mail on behalf of anything in the internal
d501 3
a503 2
name servers for DNS resolution.</p>
<p>Queries for internal hostnames will be answered by the internal
d505 10
a514 3
out to the DNS servers on the bastion hosts.</p>
<p>In order for all this to work properly, internal clients will
need to be configured to query <span class="emphasis"><em>only</em></span> the internal
d516 74
a589 19
filtering on the network.</p>
<p>If everything has been set properly, <span class="emphasis"><em>Example, Inc.</em></span>'s
internal clients will now be able to:</p>
<div class="itemizedlist"><ul type="disc">
<li>Look up any hostnames in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
<li>Look up any hostnames in the <code class="literal">site1.internal</code> and 
<code class="literal">site2.internal</code> domains.</li>
<li>Look up any hostnames on the Internet.</li>
<li>Exchange mail with internal AND external people.</li>
</ul></div>
<p>Hosts on the Internet will be able to:</p>
<div class="itemizedlist"><ul type="disc">
<li>Look up any hostnames in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
<li>Exchange mail with anyone in the <code class="literal">site1</code> and 
<code class="literal">site2.example.com</code> zones.</li>
</ul></div>
<p>Here is an example configuration for the setup we just
d591 9
a599 4
    for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a></p>
<p>Internal DNS server config:</p>
<pre class="programlisting">

d602 4
a605 1
acl externals { <code class="varname">bastion-ips-go-here</code>; };
d612 4
a615 1
        <code class="varname">bastion-ips-go-here</code>; 
d658 6
a663 4
</pre>
<p>External (bastion host) DNS server config:</p>
<pre class="programlisting">
acl internals { 172.16.72.0/24; 192.168.1.0/24; };
d691 10
a700 5
</pre>
<p>In the <code class="filename">resolv.conf</code> (or equivalent) on
the bastion host(s):</p>
<pre class="programlisting">
search ...
d704 16
a719 7
</pre>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="tsig"></a>TSIG</h2></div></div></div>
<p>This is a short guide to setting up Transaction SIGnatures
(TSIG) based transaction security in <span class="acronym">BIND</span>. It describes changes
d722 9
a730 2
keys and using transaction signatures with <span class="acronym">BIND</span>.</p>
<p><span class="acronym">BIND</span> primarily supports TSIG for server to server communication.
d732 7
a738 3
Resolvers based on newer versions of <span class="acronym">BIND</span> 8 have limited support
for TSIG.</p>
<p>TSIG might be most useful for dynamic update. A primary
d742 34
a775 7
    is far superior. The <span><strong class="command">nsupdate</strong></span>
    program supports TSIG via the <code class="option">-k</code> and
    <code class="option">-y</code> command line options.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2549627"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
<p>A shared secret is generated to be shared between <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host2</em></span>.
d777 11
a787 5
be the same on both hosts.</p>
<div class="sect3" lang="en">
<div class="titlepage"><div><div><h4 class="title">
<a name="id2549643"></a>Automatic Generation</h4></div></div></div>
<p>The following command will generate a 128 bit (16 byte) HMAC-MD5
d791 11
a801 3
bit key.</p>
<p><strong class="userinput"><code>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</code></strong></p>
<p>The key is in the file <code class="filename">Khost1-host2.+157+00000.private</code>.
d803 25
a827 10
following "<code class="literal">Key:</code>"
can be extracted from the file and used as a shared secret:</p>
<pre class="programlisting">Key: La/E5CjG9O+os1jq0a2jdA==</pre>
<p>The string "<code class="literal">La/E5CjG9O+os1jq0a2jdA==</code>" can
be used as the shared secret.</p>
</div>
<div class="sect3" lang="en">
<div class="titlepage"><div><div><h4 class="title">
<a name="id2549677"></a>Manual Generation</h4></div></div></div>
<p>The shared secret is simply a random sequence of bits, encoded
d830 50
a879 18
so the shared secret can be manually generated.</p>
<p>Also, a known string can be run through <span><strong class="command">mmencode</strong></span> or
a similar program to generate base-64 encoded data.</p>
</div>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2549830"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
<p>This is beyond the scope of DNS. A secure transport mechanism
should be used. This could be secure FTP, ssh, telephone, etc.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2549838"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
<p>Imagine <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host 2</em></span> are
both servers. The following is added to each server's <code class="filename">named.conf</code> file:</p>
<pre class="programlisting">
key host1-host2. {
d883 6
a888 2
</pre>
<p>The algorithm, hmac-md5, is the only one supported by <span class="acronym">BIND</span>.
d890 4
a893 1
is recommended that either <code class="filename">named.conf</code> be non-world
d895 6
a900 2
file that is included by <code class="filename">named.conf</code>.</p>
<p>At this point, the key is recognized. This means that if the
d903 33
a935 11
response is signed by the same key.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2549878"></a>Instructing the Server to Use the Key</h3></div></div></div>
<p>Since keys are shared between two hosts only, the server must
be told when keys are to be used. The following is added to the <code class="filename">named.conf</code> file
for <span class="emphasis"><em>host1</em></span>, if the IP address of <span class="emphasis"><em>host2</em></span> is
10.1.2.3:</p>
<pre class="programlisting">
server 10.1.2.3 {
d938 3
a940 2
</pre>
<p>Multiple keys may be present, but only the first is used.
d942 16
a957 3
file.</p>
<p>If <span class="emphasis"><em>host1</em></span> sends a message that is a request
to that address, the message will be signed with the specified key. <span class="emphasis"><em>host1</em></span> will
d959 43
a1001 9
key.</p>
<p>A similar statement must be present in <span class="emphasis"><em>host2</em></span>'s
configuration file (with <span class="emphasis"><em>host1</em></span>'s address) for <span class="emphasis"><em>host2</em></span> to
sign request messages to <span class="emphasis"><em>host1</em></span>.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2549998"></a>TSIG Key Based Access Control</h3></div></div></div>
<p><span class="acronym">BIND</span> allows IP addresses and ranges to be specified in ACL
d1003 4
a1006 1
<span><strong class="command">allow-{ query | transfer | update }</strong></span> directives.
d1008 12
a1019 6
be denoted <span><strong class="command">key host1-host2.</strong></span></p>
<p>An example of an allow-update directive would be:</p>
<pre class="programlisting">
allow-update { key host1-host2. ;};
</pre>
<p>This allows dynamic updates to succeed only if the request
d1021 24
a1044 8
      "<span><strong class="command">host1-host2.</strong></span>".</p>
<p>You may want to read about the more
      powerful <span><strong class="command">update-policy</strong></span> statement in <a href="Bv9ARM.ch06.html#dynamic_update_policies" title="Dynamic Update Policies">the section called &#8220;Dynamic Update Policies&#8221;</a>.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550042"></a>Errors</h3></div></div></div>
<p>The processing of TSIG signed messages can result in
d1049 3
a1051 2
      signed message to a specific server.</p>
<p>If a TSIG aware server receives a message signed by an
d1061 16
a1076 7
      NOTAUTH.</p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2550056"></a>TKEY</h2></div></div></div>
<p><span><strong class="command">TKEY</strong></span> is a mechanism for automatically
d1078 8
a1085 2
    "modes" of <span><strong class="command">TKEY</strong></span> that specify how the key is
    generated or assigned.  <span class="acronym">BIND</span> 9
d1089 4
a1092 1
    to be present in a zone).  The <span><strong class="command">TKEY</strong></span> process
d1094 8
a1101 2
    result of <span><strong class="command">TKEY</strong></span> is a shared secret that can be
    used to sign messages with TSIG.  <span><strong class="command">TKEY</strong></span> can also
d1103 10
a1112 3
    generated.</p>
<p>The <span><strong class="command">TKEY</strong></span> process is initiated by a client
    or server by sending a signed <span><strong class="command">TKEY</strong></span> query
d1115 4
a1118 1
    <span><strong class="command">TKEY</strong></span> record and any appropriate keys.  After
d1121 23
a1143 8
    <span><strong class="command">TKEY</strong></span> mode.  When using the Diffie-Hellman
    <span><strong class="command">TKEY</strong></span> mode, Diffie-Hellman keys are exchanged,
    and the shared secret is derived by both participants.</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2550173"></a>SIG(0)</h2></div></div></div>
<p><span class="acronym">BIND</span> 9 partially supports DNSSEC SIG(0)
d1147 3
a1149 2
    granted or denied based on the key name.</p>
<p>When a SIG(0) signed message is received, it will only be
d1151 39
a1189 15
    will not attempt to locate and/or validate the key.</p>
<p>SIG(0) signing of multiple-message TCP streams is not
    supported.</p>
<p>The only tool shipped with <span class="acronym">BIND</span> 9 that
    generates SIG(0) signed messages is <span><strong class="command">nsupdate</strong></span>.</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="DNSSEC"></a>DNSSEC</h2></div></div></div>
<p>Cryptographic authentication of DNS information is possible
    through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>) extensions,
    defined in RFC &lt;TBA&gt;. This section describes the creation and use
    of DNSSEC signed zones.</p>
<p>In order to set up a DNSSEC secure zone, there are a series
    of steps which must be followed.  <span class="acronym">BIND</span> 9 ships
d1192 4
a1195 1
    below.  In all cases, the <code class="option">-h</code> option prints a
d1198 4
a1201 1
    directory specified by the <code class="option">-h</code> option, and
d1203 3
a1205 2
    with the current ones.</p>
<p>There must also be communication with the administrators of
d1209 7
a1215 3
    or absence of a <code class="literal">DS</code> record at the delegation
    point.</p>
<p>For other servers to trust data in this zone, they must
d1217 17
a1233 7
    zone key of another zone above this one in the DNS tree.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550308"></a>Generating Keys</h3></div></div></div>
<p>The <span><strong class="command">dnssec-keygen</strong></span> program is used to
      generate keys.</p>
<p>A secure zone must contain one or more zone keys.  The
d1237 4
a1240 1
      <span><strong class="command">ZONE</strong></span>, and must be usable for authentication.
d1243 22
a1264 7
      the only one is RSASHA1.</p>
<p>The following command will generate a 768 bit RSASHA1 key for
      the <code class="filename">child.example</code> zone:</p>
<p><strong class="userinput"><code>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</code></strong></p>
<p>Two output files will be produced:
      <code class="filename">Kchild.example.+005+12345.key</code> and
      <code class="filename">Kchild.example.+005+12345.private</code> (where
d1266 4
a1269 1
      the key name (<code class="filename">child.example.</code>), algorithm (3
d1271 4
a1274 1
      The private key (in the <code class="filename">.private</code> file) is
d1276 39
a1314 15
      <code class="filename">.key</code> file) is used for signature
      verification.</p>
<p>To generate another key with the same properties (but with
      a different key tag), repeat the above command.</p>
<p>The public keys should be inserted into the zone file by
      including the <code class="filename">.key</code> files using
      <span><strong class="command">$INCLUDE</strong></span> statements.
      </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550375"></a>Signing the Zone</h3></div></div></div>
<p>The <span><strong class="command">dnssec-signzone</strong></span> program is used to
      sign a zone.</p>
<p>Any <code class="filename">keyset</code> files corresponding
d1316 26
a1341 7
      generate <code class="literal">NSEC</code> and <code class="literal">RRSIG</code>
      records for the zone, as well as <code class="literal">DS</code> for
      the child zones if <code class="literal">'-d'</code> is specified.
      If <code class="literal">'-d'</code> is not specified then DS RRsets for
      the secure child zones need to be added manually.</p>
<p>The following command signs the zone, assuming it is in a
      file called <code class="filename">zone.child.example</code>.  By
d1343 22
a1364 7
      used to generate signatures.</p>
<p><strong class="userinput"><code>dnssec-signzone -o child.example zone.child.example</code></strong></p>
<p>One output file is produced:
      <code class="filename">zone.child.example.signed</code>.  This file
      should be referenced by <code class="filename">named.conf</code> as the
      input file for the zone.</p>
<p><span><strong class="command">dnssec-signzone</strong></span> will also produce a
d1367 26
a1392 8
      <code class="literal">DNSKEYs</code> (or their corresponding <code class="literal">DS</code>
      records) that are the secure entry point to the zone.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550450"></a>Configuring Servers</h3></div></div></div>
<p>Unlike <span class="acronym">BIND</span> 8, 
<span class="acronym">BIND</span> 9 does not verify signatures on load,
d1394 26
a1419 10
in the configuration file.</p>
<p>The public key for any security root must be present in
the configuration file's <span><strong class="command">trusted-keys</strong></span>
statement, as described later in this document. </p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="id2550473"></a>IPv6 Support in <span class="acronym">BIND</span> 9</h2></div></div></div>
<p><span class="acronym">BIND</span> 9 fully supports all currently defined forms of IPv6
d1422 6
a1427 2
    system.</p>
<p>For forward lookups, <span class="acronym">BIND</span> 9 supports only AAAA
d1429 4
a1432 1
    support for forward lookups in <span class="acronym">BIND</span> 9 is
d1434 4
a1437 1
    However, authoritative <span class="acronym">BIND</span> 9 name servers still
d1440 6
a1445 2
    records.</p>
<p>For IPv6 reverse lookups, <span class="acronym">BIND</span> 9 supports
d1447 18
a1464 3
    <span class="emphasis"><em>ip6.arpa</em></span> domain, as well as the older, deprecated
    <span class="emphasis"><em>ip6.int</em></span> domain.
    <span class="acronym">BIND</span> 9 formerly
d1468 4
a1471 1
    Any applications in <span class="acronym">BIND</span> 9 do not understand
d1473 21
a1493 8
    In particular, an authoritative <span class="acronym">BIND</span> 9 name
    server rejects to load a zone file containing binary labels.</p>
<p>For an overview of the format and structure of IPv6 addresses,
    see <a href="Bv9ARM.ch09.html#ipv6addresses" title="IPv6 addresses (AAAA)">the section called &#8220;IPv6 addresses (AAAA)&#8221;</a>.</p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550600"></a>Address Lookups Using AAAA Records</h3></div></div></div>
<p>The AAAA record is a parallel to the IPv4 A record.  It
d1495 4
a1498 3
      example,</p>
<pre class="programlisting">
$ORIGIN example.com.
d1500 3
a1502 2
</pre>
<p>It is recommended that IPv4-in-IPv6 mapped addresses not
d1504 16
a1519 7
        a AAAA, with <code class="literal">::ffff:192.168.42.1</code> as the
        address.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2550620"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
<p>When looking up an address in nibble format, the address
d1521 4
a1524 1
      <code class="literal">ip6.arpa.</code> is appended to the resulting name.
d1527 7
a1533 3
      <code class="literal">2001:db8::1</code>.</p>
<pre class="programlisting">
$ORIGIN 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.
d1535 68
a1602 23
</pre>
</div>
</div>
</div>
<div class="navfooter">
<hr>
<table width="100%" summary="Navigation footer">
<tr>
<td width="40%" align="left">
<a accesskey="p" href="Bv9ARM.ch03.html">Prev</a> </td>
<td width="20%" align="center"> </td>
<td width="40%" align="right"> <a accesskey="n" href="Bv9ARM.ch05.html">Next</a>
</td>
</tr>
<tr>
<td width="40%" align="left" valign="top">Chapter 3. Name Server Configuration </td>
<td width="20%" align="center"><a accesskey="h" href="Bv9ARM.html">Home</a></td>
<td width="40%" align="right" valign="top"> Chapter 5. The <span class="acronym">BIND</span> 9 Lightweight Resolver</td>
</tr>
</table>
</div>
</body>
</html>
@


1.1.1.5
log
@ISC BIND release 9.3.3
@
text
@d2 1
a2 1
 - Copyright (C) 2004-2006 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: Bv9ARM.ch04.html,v 1.30.2.6.2.24 2006/11/15 04:33:41 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.70.1">
d52 1
a52 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573147">Split DNS</a></span></dt>
d55 6
a60 6
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573709">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573776">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573784">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573824">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573876">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2573920">Errors</a></span></dt>
d62 2
a63 2
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573933">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2573982">SIG(0)</a></span></dt>
d66 3
a68 3
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574049">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574116">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574259">Configuring Servers</a></span></dt>
d70 1
a70 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2574396">IPv6 Support in <acronym class="acronym">BIND</acronym> 9</a></span></dt>
d72 2
a73 2
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574455">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2574475">Address to Name Lookups Using Nibble Format</a></span></dt>
d80 1
a80 1
<p><acronym class="acronym">DNS</acronym> NOTIFY is a mechanism that allows master
d85 1
a85 1
<p><acronym class="acronym">DNS</acronym>
d133 1
a133 1
    dynamic changes &#8212; those are only in the journal file.
d142 1
a142 1
    <span><strong class="command">rndc thaw <em class="replaceable"><code>zone</code></em></strong></span>
d153 1
a153 1
<p>When acting as a master, <acronym class="acronym">BIND</acronym> 9
d163 1
a163 1
<p>When acting as a slave, <acronym class="acronym">BIND</acronym> 9 will 
d171 1
a171 1
<a name="id2573147"></a>Split DNS</h2></div></div></div>
d246 1
a246 1
<li>Exchange mail with both internal AND external people.</li>
d257 1
a257 1
    for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a>.</p>
d358 1
a358 1
(TSIG) based transaction security in <acronym class="acronym">BIND</acronym>. It describes changes
d361 2
a362 2
keys and using transaction signatures with <acronym class="acronym">BIND</acronym>.</p>
<p><acronym class="acronym">BIND</acronym> primarily supports TSIG for server to server communication.
d364 1
a364 1
Resolvers based on newer versions of <acronym class="acronym">BIND</acronym> 8 have limited support
d375 1
a375 1
<a name="id2573709"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
d381 2
a382 2
<a name="id2573725"></a>Automatic Generation</h4></div></div></div>
<p>The following command will generate a 128-bit (16 byte) HMAC-MD5
d385 2
a386 2
keys longer than that will be digested with MD5 to produce a
128-bit key.</p>
d398 1
a398 1
<a name="id2573760"></a>Manual Generation</h4></div></div></div>
d409 1
a409 1
<a name="id2573776"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
d415 1
a415 1
<a name="id2573784"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
d424 1
a424 1
<p>The algorithm, hmac-md5, is the only one supported by <acronym class="acronym">BIND</acronym>.
d436 1
a436 1
<a name="id2573824"></a>Instructing the Server to Use the Key</h3></div></div></div>
d459 2
a460 2
<a name="id2573876"></a>TSIG Key Based Access Control</h3></div></div></div>
<p><acronym class="acronym">BIND</acronym> allows IP addresses and ranges to be specified in ACL
d477 1
a477 1
<a name="id2573920"></a>Errors</h3></div></div></div>
d479 5
a483 6
      several errors. If a signed message is sent to a non-TSIG
      aware server, a FORMERR (format error) will be returned, since
      the server will not understand the record. This is a result
      of misconfiguration, since the server must be explicitly
      configured to send a TSIG signed message to a specific
      server.</p>
d494 1
a494 1
      NOTAUTH (not authenticated).</p>
d499 1
a499 1
<a name="id2573933"></a>TKEY</h2></div></div></div>
d503 1
a503 1
    generated or assigned.  <acronym class="acronym">BIND</acronym> 9
d526 2
a527 2
<a name="id2573982"></a>SIG(0)</h2></div></div></div>
<p><acronym class="acronym">BIND</acronym> 9 partially supports DNSSEC SIG(0)
d534 1
a534 1
    will not attempt to locate and / or validate the key.</p>
d537 1
a537 1
<p>The only tool shipped with <acronym class="acronym">BIND</acronym> 9 that
d544 3
a546 4
    through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>)
    extensions, defined in RFC 4033, RFC4034 and RFC4035.  This
    section describes the creation and use of DNSSEC signed
    zones.</p>
d548 1
a548 1
    of steps which must be followed.  <acronym class="acronym">BIND</acronym> 9 ships
d560 1
a560 1
    resolver to trust its data.  This is done through the presence
d568 1
a568 1
<a name="id2574049"></a>Generating Keys</h3></div></div></div>
d579 1
a579 1
<p>The following command will generate a 768-bit RSASHA1 key for
d601 1
a601 1
<a name="id2574116"></a>Signing the Zone</h3></div></div></div>
d609 1
a609 1
      If <code class="literal">'-d'</code> is not specified, then DS RRsets for
d628 8
a635 82
<a name="id2574259"></a>Configuring Servers</h3></div></div></div>
<p>
	  To enable <span><strong class="command">named</strong></span> to respond appropriately
	  to DNS requests from DNSSEC aware clients,
	  <span><strong class="command">dnssec-enable</strong></span> must be set to yes.
          </p>
<p>
	  To enable <span><strong class="command">named</strong></span> to validate answers from
	  other servers <span><strong class="command">dnssec-enable</strong></span> and
	  some <span><strong class="command">trusted-keys</strong></span> must be configured
	  into <code class="filename">named.conf</code>.
          </p>
<p>
	  <span><strong class="command">trusted-keys</strong></span> are copies of DNSKEY RRs
	  for zones that are used to form the first link in the
	  cryptographic chain of trust.  All keys listed in
	  <span><strong class="command">trusted-keys</strong></span> (and corresponding zones)
	  are deemed to exist and only the listed keys will be used
	  to validated the DNSKEY RRset that they are from.
	</p>
<p>
	  <span><strong class="command">trusted-keys</strong></span> are described in more detail
	  later in this document.
	</p>
<p>
	  Unlike <acronym class="acronym">BIND</acronym> 8, <acronym class="acronym">BIND</acronym>
	  9 does not verify signatures on load, so zone keys for
	  authoritative zones do not need to be specified in the
	  configuration file.
	</p>
<p>
	  After DNSSEC gets established, a typical DNSSEC configuration
	  will look something like the following.  It has a one or
	  more public keys for the root.  This allows answers from
	  outside the organization to be validated.  It will also
	  have several keys for parts of the namespace the organization
	  controls.  These are here to ensure that named is immune
	  to compromises in the DNSSEC components of the security
	  of parent zones.
	</p>
<pre class="programlisting">
trusted-keys {

	/* Root Key */
"." 257 3 3 "BNY4wrWM1nCfJ+CXd0rVXyYmobt7sEEfK3clRbGaTwSJxrGkxJWoZu6I7PzJu/
	     E9gx4UC1zGAHlXKdE4zYIpRhaBKnvcC2U9mZhkdUpd1Vso/HAdjNe8LmMlnzY3
	     zy2Xy4klWOADTPzSv9eamj8V18PHGjBLaVtYvk/ln5ZApjYghf+6fElrmLkdaz
	     MQ2OCnACR817DF4BBa7UR/beDHyp5iWTXWSi6XmoJLbG9Scqc7l70KDqlvXR3M
	     /lUUVRbkeg1IPJSidmK3ZyCllh4XSKbje/45SKucHgnwU5jefMtq66gKodQj+M
	     iA21AfUVe7u99WzTLzY3qlxDhxYQQ20FQ97S+LKUTpQcq27R7AT3/V5hRQxScI
	     Nqwcz4jYqZD2fQdgxbcDTClU0CRBdiieyLMNzXG3";

/* Key for our organization's forward zone */
example.com. 257 3 5 "AwEAAaxPMcR2x0HbQV4WeZB6oEDX+r0QM65KbhTjrW1ZaARmPhEZZe
                      3Y9ifgEuq7vZ/zGZUdEGNWy+JZzus0lUptwgjGwhUS1558Hb4JKUbb
	              OTcM8pwXlj0EiX3oDFVmjHO444gLkBO UKUf/mC7HvfwYH/Be22GnC
		      lrinKJp1Og4ywzO9WglMk7jbfW33gUKvirTHr25GL7STQUzBb5Usxt
		      8lgnyTUHs1t3JwCY5hKZ6CqFxmAVZP20igTixin/1LcrgX/KMEGd/b
		      iuvF4qJCyduieHukuY3H4XMAcR+xia2 nIUPvm/oyWR8BW/hWdzOvn
		      SCThlHf3xiYleDbt/o1OTQ09A0=";

/* Key for our reverse zone. */
2.0.192.IN-ADDRPA.NET. 257 3 5 "AQOnS4xn/IgOUpBPJ3bogzwcxOdNax071L18QqZnQQQA
                                VVr+iLhGTnNGp3HoWQLUIzKrJVZ3zggy3WwNT6kZo6c0
				tszYqbtvchmgQC8CzKojM/W16i6MG/ea fGU3siaOdS0
				yOI6BgPsw+YZdzlYMaIJGf4M4dyoKIhzdZyQ2bYQrjyQ
				4LB0lC7aOnsMyYKHHYeRv PxjIQXmdqgOJGq+vsevG06
			        zW+1xgYJh9rCIfnm1GX/KMgxLPG2vXTD/RnLX+D3T3UL
				7HJYHJhAZD5L59VvjSPsZJHeDCUyWYrvPZesZDIRvhDD
				52SKvbheeTJUm6EhkzytNN2SN96QRk8j/iI8ib";
};

options {
	...
	dnssec-enable yes;
};
</pre>
<div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Note</h3>
	  None of the keys listed in this example are valid.  In particular,
	  the root key is not valid.
	</div>
d640 2
a641 2
<a name="id2574396"></a>IPv6 Support in <acronym class="acronym">BIND</acronym> 9</h2></div></div></div>
<p><acronym class="acronym">BIND</acronym> 9 fully supports all currently defined forms of IPv6
d645 1
a645 1
<p>For forward lookups, <acronym class="acronym">BIND</acronym> 9 supports only AAAA
d647 1
a647 1
    support for forward lookups in <acronym class="acronym">BIND</acronym> 9 is
d649 1
a649 1
    However, authoritative <acronym class="acronym">BIND</acronym> 9 name servers still
d653 1
a653 1
<p>For IPv6 reverse lookups, <acronym class="acronym">BIND</acronym> 9 supports
d657 1
a657 1
    <acronym class="acronym">BIND</acronym> 9 formerly
d661 1
a661 1
    Any applications in <acronym class="acronym">BIND</acronym> 9 do not understand
d663 1
a663 1
    In particular, an authoritative <acronym class="acronym">BIND</acronym> 9 name
d669 1
a669 1
<a name="id2574455"></a>Address Lookups Using AAAA Records</h3></div></div></div>
d684 1
a684 1
<a name="id2574475"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
d711 1
a711 1
<td width="40%" align="right" valign="top"> Chapter 5. The <acronym class="acronym">BIND</acronym> 9 Lightweight Resolver</td>
@


1.1.1.6
log
@ISC BIND release 9.4.2
@
text
@d2 1
a2 1
 - Copyright (C) 2004-2007 Internet Systems Consortium, Inc. ("ISC")
d17 1
a17 1
<!-- $ISC: Bv9ARM.ch04.html,v 1.40.18.41 2007/10/31 01:35:57 marka Exp $ -->
d22 1
a22 1
<meta name="generator" content="DocBook XSL Stylesheets V1.71.1">
d52 1
a52 2
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2570642">Split DNS</a></span></dt>
<dd><dl><dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2570660">Example split DNS setup</a></span></dt></dl></dd>
d55 6
a60 6
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571095">Generate Shared Keys for Each Pair of Hosts</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571169">Copying the Shared Secret to Both Machines</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571179">Informing the Servers of the Key's Existence</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571219">Instructing the Server to Use the Key</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571413">TSIG Key Based Access Control</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571458">Errors</a></span></dt>
d62 2
a63 2
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2571472">TKEY</a></span></dt>
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2571521">SIG(0)</a></span></dt>
d66 3
a68 3
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571725">Generating Keys</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571795">Signing the Zone</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2571874">Configuring Servers</a></span></dt>
d70 1
a70 1
<dt><span class="sect1"><a href="Bv9ARM.ch04.html#id2572153">IPv6 Support in <acronym class="acronym">BIND</acronym> 9</a></span></dt>
d72 2
a73 2
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2572215">Address Lookups Using AAAA Records</a></span></dt>
<dt><span class="sect2"><a href="Bv9ARM.ch04.html#id2572236">Address to Name Lookups Using Nibble Format</a></span></dt>
d80 13
a92 23
<p>
        <acronym class="acronym">DNS</acronym> NOTIFY is a mechanism that allows master
        servers to notify their slave servers of changes to a zone's data. In
        response to a <span><strong class="command">NOTIFY</strong></span> from a master server, the
        slave will check to see that its version of the zone is the
        current version and, if not, initiate a zone transfer.
      </p>
<p>
        For more information about <acronym class="acronym">DNS</acronym>
        <span><strong class="command">NOTIFY</strong></span>, see the description of the
        <span><strong class="command">notify</strong></span> option in <a href="Bv9ARM.ch06.html#boolean_options" title="Boolean Options">the section called &#8220;Boolean Options&#8221;</a> and
        the description of the zone option <span><strong class="command">also-notify</strong></span> in
        <a href="Bv9ARM.ch06.html#zone_transfers" title="Zone Transfers">the section called &#8220;Zone Transfers&#8221;</a>.  The <span><strong class="command">NOTIFY</strong></span>
        protocol is specified in RFC 1996.
      </p>
<div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
<h3 class="title">Note</h3>
        As a slave zone can also be a master to other slaves, named,
        by default, sends <span><strong class="command">NOTIFY</strong></span> messages for every zone
        it loads.  Specifying <span><strong class="command">notify master-only;</strong></span> will
        cause named to only send <span><strong class="command">NOTIFY</strong></span> for master
        zones that it loads.
      </div>
d97 13
a109 19
<p>
        Dynamic Update is a method for adding, replacing or deleting
        records in a master server by sending it a special form of DNS
        messages.  The format and meaning of these messages is specified
        in RFC 2136.
      </p>
<p>
        Dynamic update is enabled by
        including an <span><strong class="command">allow-update</strong></span> or
        <span><strong class="command">update-policy</strong></span> clause in the
        <span><strong class="command">zone</strong></span> statement.
      </p>
<p>
        Updating of secure zones (zones using DNSSEC) follows
        RFC 3007: RRSIG and NSEC records affected by updates are automatically
            regenerated by the server using an online zone key.
        Update authorization is based
        on transaction signatures and an explicit server policy.
      </p>
d113 31
a143 46
<p>
          All changes made to a zone using dynamic update are stored
          in the zone's journal file.  This file is automatically created
          by the server when the first dynamic update takes place.
          The name of the journal file is formed by appending the extension
          <code class="filename">.jnl</code> to the name of the
          corresponding zone
          file unless specifically overridden.  The journal file is in a
          binary format and should not be edited manually.
        </p>
<p>
          The server will also occasionally write ("dump")
          the complete contents of the updated zone to its zone file.
          This is not done immediately after
          each dynamic update, because that would be too slow when a large
          zone is updated frequently.  Instead, the dump is delayed by
          up to 15 minutes, allowing additional updates to take place.
        </p>
<p>
          When a server is restarted after a shutdown or crash, it will replay
              the journal file to incorporate into the zone any updates that
          took
          place after the last zone dump.
        </p>
<p>
          Changes that result from incoming incremental zone transfers are
          also
          journalled in a similar way.
        </p>
<p>
          The zone files of dynamic zones cannot normally be edited by
          hand because they are not guaranteed to contain the most recent
          dynamic changes &#8212; those are only in the journal file.
          The only way to ensure that the zone file of a dynamic zone
          is up to date is to run <span><strong class="command">rndc stop</strong></span>.
        </p>
<p>
          If you have to make changes to a dynamic zone
          manually, the following procedure will work: Disable dynamic updates
              to the zone using
          <span><strong class="command">rndc freeze <em class="replaceable"><code>zone</code></em></strong></span>.
          This will also remove the zone's <code class="filename">.jnl</code> file
          and update the master file.  Edit the zone file.  Run
          <span><strong class="command">rndc thaw <em class="replaceable"><code>zone</code></em></strong></span>
          to reload the changed zone and re-enable dynamic updates.
        </p>
d149 19
a167 24
<p>
        The incremental zone transfer (IXFR) protocol is a way for
        slave servers to transfer only changed data, instead of having to
        transfer the entire zone. The IXFR protocol is specified in RFC
        1995. See <a href="Bv9ARM.ch09.html#proposed_standards">Proposed Standards</a>.
      </p>
<p>
        When acting as a master, <acronym class="acronym">BIND</acronym> 9
        supports IXFR for those zones
        where the necessary change history information is available. These
        include master zones maintained by dynamic update and slave zones
        whose data was obtained by IXFR.  For manually maintained master
        zones, and for slave zones obtained by performing a full zone
        transfer (AXFR), IXFR is supported only if the option
        <span><strong class="command">ixfr-from-differences</strong></span> is set
        to <strong class="userinput"><code>yes</code></strong>.
      </p>
<p>
        When acting as a slave, <acronym class="acronym">BIND</acronym> 9 will
        attempt to use IXFR unless
        it is explicitly disabled. For more information about disabling
        IXFR, see the description of the <span><strong class="command">request-ixfr</strong></span> clause
        of the <span><strong class="command">server</strong></span> statement.
      </p>
d171 54
a224 88
<a name="id2570642"></a>Split DNS</h2></div></div></div>
<p>
        Setting up different views, or visibility, of the DNS space to
        internal and external resolvers is usually referred to as a
        <span class="emphasis"><em>Split DNS</em></span> setup. There are several
        reasons an organization would want to set up its DNS this way.
      </p>
<p>
        One common reason for setting up a DNS system this way is
        to hide "internal" DNS information from "external" clients on the
        Internet. There is some debate as to whether or not this is actually
        useful.
        Internal DNS information leaks out in many ways (via email headers,
        for example) and most savvy "attackers" can find the information
        they need using other means.
        However, since listing addresses of internal servers that
        external clients cannot possibly reach can result in
        connection delays and other annoyances, an organization may
        choose to use a Split DNS to present a consistent view of itself
        to the outside world.
      </p>
<p>
        Another common reason for setting up a Split DNS system is
        to allow internal networks that are behind filters or in RFC 1918
        space (reserved IP space, as documented in RFC 1918) to resolve DNS
        on the Internet. Split DNS can also be used to allow mail from outside
        back in to the internal network.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2570660"></a>Example split DNS setup</h3></div></div></div>
<p>
        Let's say a company named <span class="emphasis"><em>Example, Inc.</em></span>
        (<code class="literal">example.com</code>)
        has several corporate sites that have an internal network with
        reserved
        Internet Protocol (IP) space and an external demilitarized zone (DMZ),
        or "outside" section of a network, that is available to the public.
      </p>
<p>
        <span class="emphasis"><em>Example, Inc.</em></span> wants its internal clients
        to be able to resolve external hostnames and to exchange mail with
        people on the outside. The company also wants its internal resolvers
        to have access to certain internal-only zones that are not available
        at all outside of the internal network.
      </p>
<p>
        In order to accomplish this, the company will set up two sets
        of name servers. One set will be on the inside network (in the
        reserved
        IP space) and the other set will be on bastion hosts, which are
        "proxy"
        hosts that can talk to both sides of its network, in the DMZ.
      </p>
<p>
        The internal servers will be configured to forward all queries,
        except queries for <code class="filename">site1.internal</code>, <code class="filename">site2.internal</code>, <code class="filename">site1.example.com</code>,
        and <code class="filename">site2.example.com</code>, to the servers
        in the
        DMZ. These internal servers will have complete sets of information
        for <code class="filename">site1.example.com</code>, <code class="filename">site2.example.com</code>,<span class="emphasis"><em></em></span> <code class="filename">site1.internal</code>,
        and <code class="filename">site2.internal</code>.
      </p>
<p>
        To protect the <code class="filename">site1.internal</code> and <code class="filename">site2.internal</code> domains,
        the internal name servers must be configured to disallow all queries
        to these domains from any external hosts, including the bastion
        hosts.
      </p>
<p>
        The external servers, which are on the bastion hosts, will
        be configured to serve the "public" version of the <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones.
        This could include things such as the host records for public servers
        (<code class="filename">www.example.com</code> and <code class="filename">ftp.example.com</code>),
        and mail exchange (MX)  records (<code class="filename">a.mx.example.com</code> and <code class="filename">b.mx.example.com</code>).
      </p>
<p>
        In addition, the public <code class="filename">site1</code> and <code class="filename">site2.example.com</code> zones
        should have special MX records that contain wildcard (`*') records
        pointing to the bastion hosts. This is needed because external mail
        servers do not have any other way of looking up how to deliver mail
        to those internal hosts. With the wildcard records, the mail will
        be delivered to the bastion host, which can then forward it on to
        internal hosts.
      </p>
<p>
        Here's an example of a wildcard MX record:
      </p>
d226 14
a239 24
<p>
        Now that they accept mail on behalf of anything in the internal
        network, the bastion hosts will need to know how to deliver mail
        to internal hosts. In order for this to work properly, the resolvers
        on
        the bastion hosts will need to be configured to point to the internal
        name servers for DNS resolution.
      </p>
<p>
        Queries for internal hostnames will be answered by the internal
        servers, and queries for external hostnames will be forwarded back
        out to the DNS servers on the bastion hosts.
      </p>
<p>
        In order for all this to work properly, internal clients will
        need to be configured to query <span class="emphasis"><em>only</em></span> the internal
        name servers for DNS queries. This could also be enforced via
        selective
        filtering on the network.
      </p>
<p>
        If everything has been set properly, <span class="emphasis"><em>Example, Inc.</em></span>'s
        internal clients will now be able to:
      </p>
d241 4
a244 9
<li>
            Look up any hostnames in the <code class="literal">site1</code>
            and
            <code class="literal">site2.example.com</code> zones.
          </li>
<li>
            Look up any hostnames in the <code class="literal">site1.internal</code> and
            <code class="literal">site2.internal</code> domains.
          </li>
d246 1
a246 1
<li>Exchange mail with both internal and external people.</li>
d248 1
a248 3
<p>
        Hosts on the Internet will be able to:
      </p>
d250 4
a253 9
<li>
            Look up any hostnames in the <code class="literal">site1</code>
            and
            <code class="literal">site2.example.com</code> zones.
          </li>
<li>
            Exchange mail with anyone in the <code class="literal">site1</code> and
            <code class="literal">site2.example.com</code> zones.
          </li>
d255 4
a258 8
<p>
        Here is an example configuration for the setup we just
        described above. Note that this is only configuration information;
        for information on how to configure your zone files, see <a href="Bv9ARM.ch03.html#sample_configuration" title="Sample Configurations">the section called &#8220;Sample Configurations&#8221;</a>.
      </p>
<p>
        Internal DNS server config:
      </p>
d270 1
a270 1
        <code class="varname">bastion-ips-go-here</code>;
d314 1
a314 3
<p>
        External (bastion host) DNS server config:
      </p>
d324 1
a324 2
  allow-query { any; };                         // default query access
  allow-query-cache { internals; externals; };  // restrict cache access
d333 1
d341 1
d345 2
a346 4
<p>
        In the <code class="filename">resolv.conf</code> (or equivalent) on
        the bastion host(s):
      </p>
a353 1
</div>
d357 22
a378 32
<p>
        This is a short guide to setting up Transaction SIGnatures
        (TSIG) based transaction security in <acronym class="acronym">BIND</acronym>. It describes changes
        to the configuration file as well as what changes are required for
        different features, including the process of creating transaction
        keys and using transaction signatures with <acronym class="acronym">BIND</acronym>.
      </p>
<p>
        <acronym class="acronym">BIND</acronym> primarily supports TSIG for server
        to server communication.
        This includes zone transfer, notify, and recursive query messages.
        Resolvers based on newer versions of <acronym class="acronym">BIND</acronym> 8 have limited support
        for TSIG.
      </p>
<p>
        TSIG can also be useful for dynamic update. A primary
        server for a dynamic zone should control access to the dynamic
        update service, but IP-based access control is insufficient.
        The cryptographic access control provided by TSIG
        is far superior. The <span><strong class="command">nsupdate</strong></span>
        program supports TSIG via the <code class="option">-k</code> and
        <code class="option">-y</code> command line options or inline by use
        of the <span><strong class="command">key</strong></span>.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571095"></a>Generate Shared Keys for Each Pair of Hosts</h3></div></div></div>
<p>
          A shared secret is generated to be shared between <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host2</em></span>.
          An arbitrary key name is chosen: "host1-host2.". The key name must
          be the same on both hosts.
        </p>
d381 11
a391 17
<a name="id2571112"></a>Automatic Generation</h4></div></div></div>
<p>
            The following command will generate a 128-bit (16 byte) HMAC-MD5
            key as described above. Longer keys are better, but shorter keys
            are easier to read. Note that the maximum key length is 512 bits;
            keys longer than that will be digested with MD5 to produce a
            128-bit key.
          </p>
<p>
            <strong class="userinput"><code>dnssec-keygen -a hmac-md5 -b 128 -n HOST host1-host2.</code></strong>
          </p>
<p>
            The key is in the file <code class="filename">Khost1-host2.+157+00000.private</code>.
            Nothing directly uses this file, but the base-64 encoded string
            following "<code class="literal">Key:</code>"
            can be extracted from the file and used as a shared secret:
          </p>
d393 2
a394 4
<p>
            The string "<code class="literal">La/E5CjG9O+os1jq0a2jdA==</code>" can
            be used as the shared secret.
          </p>
d398 7
a404 11
<a name="id2571150"></a>Manual Generation</h4></div></div></div>
<p>
            The shared secret is simply a random sequence of bits, encoded
            in base-64. Most ASCII strings are valid base-64 strings (assuming
            the length is a multiple of 4 and only valid characters are used),
            so the shared secret can be manually generated.
          </p>
<p>
            Also, a known string can be run through <span><strong class="command">mmencode</strong></span> or
            a similar program to generate base-64 encoded data.
          </p>
d409 3
a411 5
<a name="id2571169"></a>Copying the Shared Secret to Both Machines</h3></div></div></div>
<p>
          This is beyond the scope of DNS. A secure transport mechanism
          should be used. This could be secure FTP, ssh, telephone, etc.
        </p>
d415 3
a417 6
<a name="id2571179"></a>Informing the Servers of the Key's Existence</h3></div></div></div>
<p>
          Imagine <span class="emphasis"><em>host1</em></span> and <span class="emphasis"><em>host 2</em></span>
          are
          both servers. The following is added to each server's <code class="filename">named.conf</code> file:
        </p>
d424 9
a432 14
<p>
          The algorithm, hmac-md5, is the only one supported by <acronym class="acronym">BIND</acronym>.
          The secret is the one generated above. Since this is a secret, it
          is recommended that either <code class="filename">named.conf</code> be non-world
          readable, or the key directive be added to a non-world readable
          file that is included by
          <code class="filename">named.conf</code>.
        </p>
<p>
          At this point, the key is recognized. This means that if the
          server receives a message signed by this key, it can verify the
          signature. If the signature is successfully verified, the
          response is signed by the same key.
        </p>
d436 5
a440 7
<a name="id2571219"></a>Instructing the Server to Use the Key</h3></div></div></div>
<p>
          Since keys are shared between two hosts only, the server must
          be told when keys are to be used. The following is added to the <code class="filename">named.conf</code> file
          for <span class="emphasis"><em>host1</em></span>, if the IP address of <span class="emphasis"><em>host2</em></span> is
          10.1.2.3:
        </p>
d446 10
a455 17
<p>
          Multiple keys may be present, but only the first is used.
          This directive does not contain any secrets, so it may be in a
          world-readable
          file.
        </p>
<p>
          If <span class="emphasis"><em>host1</em></span> sends a message that is a request
          to that address, the message will be signed with the specified key. <span class="emphasis"><em>host1</em></span> will
          expect any responses to signed messages to be signed with the same
          key.
        </p>
<p>
          A similar statement must be present in <span class="emphasis"><em>host2</em></span>'s
          configuration file (with <span class="emphasis"><em>host1</em></span>'s address) for <span class="emphasis"><em>host2</em></span> to
          sign request messages to <span class="emphasis"><em>host1</em></span>.
        </p>
d459 7
a465 13
<a name="id2571413"></a>TSIG Key Based Access Control</h3></div></div></div>
<p>
          <acronym class="acronym">BIND</acronym> allows IP addresses and ranges
          to be specified in ACL
          definitions and
          <span><strong class="command">allow-{ query | transfer | update }</strong></span>
          directives.
          This has been extended to allow TSIG keys also. The above key would
          be denoted <span><strong class="command">key host1-host2.</strong></span>
        </p>
<p>
          An example of an allow-update directive would be:
        </p>
d469 5
a473 9
<p>
          This allows dynamic updates to succeed only if the request
          was signed by a key named
          "<span><strong class="command">host1-host2.</strong></span>".
        </p>
<p>
          You may want to read about the more
          powerful <span><strong class="command">update-policy</strong></span> statement in <a href="Bv9ARM.ch06.html#dynamic_update_policies" title="Dynamic Update Policies">the section called &#8220;Dynamic Update Policies&#8221;</a>.
        </p>
d477 19
a495 22
<a name="id2571458"></a>Errors</h3></div></div></div>
<p>
          The processing of TSIG signed messages can result in
          several errors. If a signed message is sent to a non-TSIG aware
          server, a FORMERR (format error) will be returned, since the server will not
          understand the record. This is a result of misconfiguration,
          since the server must be explicitly configured to send a TSIG
          signed message to a specific server.
        </p>
<p>
          If a TSIG aware server receives a message signed by an
          unknown key, the response will be unsigned with the TSIG
          extended error code set to BADKEY. If a TSIG aware server
          receives a message with a signature that does not validate, the
          response will be unsigned with the TSIG extended error code set
          to BADSIG. If a TSIG aware server receives a message with a time
          outside of the allowed range, the response will be signed with
          the TSIG extended error code set to BADTIME, and the time values
          will be adjusted so that the response can be successfully
          verified. In any of these cases, the message's rcode (response code) is set to
          NOTAUTH (not authenticated).
        </p>
d500 24
a523 33
<a name="id2571472"></a>TKEY</h2></div></div></div>
<p><span><strong class="command">TKEY</strong></span>
        is a mechanism for automatically generating a shared secret
        between two hosts.  There are several "modes" of
        <span><strong class="command">TKEY</strong></span> that specify how the key is generated
        or assigned.  <acronym class="acronym">BIND</acronym> 9 implements only one of
        these modes, the Diffie-Hellman key exchange.  Both hosts are
        required to have a Diffie-Hellman KEY record (although this
        record is not required to be present in a zone).  The
        <span><strong class="command">TKEY</strong></span> process must use signed messages,
        signed either by TSIG or SIG(0).  The result of
        <span><strong class="command">TKEY</strong></span> is a shared secret that can be used to
        sign messages with TSIG.  <span><strong class="command">TKEY</strong></span> can also be
        used to delete shared secrets that it had previously
        generated.
      </p>
<p>
        The <span><strong class="command">TKEY</strong></span> process is initiated by a
        client
        or server by sending a signed <span><strong class="command">TKEY</strong></span>
        query
        (including any appropriate KEYs) to a TKEY-aware server.  The
        server response, if it indicates success, will contain a
        <span><strong class="command">TKEY</strong></span> record and any appropriate keys.
        After
        this exchange, both participants have enough information to
        determine the shared secret; the exact process depends on the
        <span><strong class="command">TKEY</strong></span> mode.  When using the
        Diffie-Hellman
        <span><strong class="command">TKEY</strong></span> mode, Diffie-Hellman keys are
        exchanged,
        and the shared secret is derived by both participants.
      </p>
d527 13
a539 22
<a name="id2571521"></a>SIG(0)</h2></div></div></div>
<p>
        <acronym class="acronym">BIND</acronym> 9 partially supports DNSSEC SIG(0)
            transaction signatures as specified in RFC 2535 and RFC2931.
        SIG(0)
        uses public/private keys to authenticate messages.  Access control
        is performed in the same manner as TSIG keys; privileges can be
        granted or denied based on the key name.
      </p>
<p>
        When a SIG(0) signed message is received, it will only be
        verified if the key is known and trusted by the server; the server
        will not attempt to locate and/or validate the key.
      </p>
<p>
        SIG(0) signing of multiple-message TCP streams is not
        supported.
      </p>
<p>
        The only tool shipped with <acronym class="acronym">BIND</acronym> 9 that
        generates SIG(0) signed messages is <span><strong class="command">nsupdate</strong></span>.
      </p>
d544 92
d637 5
a641 27
        Cryptographic authentication of DNS information is possible
        through the DNS Security (<span class="emphasis"><em>DNSSEC-bis</em></span>) extensions,
        defined in RFC 4033, RFC 4034, and RFC 4035.
        This section describes the creation and use of DNSSEC signed zones.
      </p>
<p>
        In order to set up a DNSSEC secure zone, there are a series
        of steps which must be followed.  <acronym class="acronym">BIND</acronym>
        9 ships
        with several tools
        that are used in this process, which are explained in more detail
        below.  In all cases, the <code class="option">-h</code> option prints a
        full list of parameters.  Note that the DNSSEC tools require the
        keyset files to be in the working directory or the
        directory specified by the <code class="option">-d</code> option, and
        that the tools shipped with BIND 9.2.x and earlier are not compatible
        with the current ones.
      </p>
<p>
        There must also be communication with the administrators of
        the parent and/or child zone to transmit keys.  A zone's security
        status must be indicated by the parent zone for a DNSSEC capable
        resolver to trust its data.  This is done through the presence
        or absence of a <code class="literal">DS</code> record at the
        delegation
        point.
      </p>
d643 27
a669 142
        For other servers to trust data in this zone, they must
        either be statically configured with this zone's zone key or the
        zone key of another zone above this one in the DNS tree.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571725"></a>Generating Keys</h3></div></div></div>
<p>
          The <span><strong class="command">dnssec-keygen</strong></span> program is used to
          generate keys.
        </p>
<p>
          A secure zone must contain one or more zone keys.  The
          zone keys will sign all other records in the zone, as well as
          the zone keys of any secure delegated zones.  Zone keys must
          have the same name as the zone, a name type of
          <span><strong class="command">ZONE</strong></span>, and must be usable for
          authentication.
          It is recommended that zone keys use a cryptographic algorithm
          designated as "mandatory to implement" by the IETF; currently
          the only one is RSASHA1.
        </p>
<p>
          The following command will generate a 768-bit RSASHA1 key for
          the <code class="filename">child.example</code> zone:
        </p>
<p>
          <strong class="userinput"><code>dnssec-keygen -a RSASHA1 -b 768 -n ZONE child.example.</code></strong>
        </p>
<p>
          Two output files will be produced:
          <code class="filename">Kchild.example.+005+12345.key</code> and
          <code class="filename">Kchild.example.+005+12345.private</code>
          (where
          12345 is an example of a key tag).  The key filenames contain
          the key name (<code class="filename">child.example.</code>),
          algorithm (3
          is DSA, 1 is RSAMD5, 5 is RSASHA1, etc.), and the key tag (12345 in
          this case).
          The private key (in the <code class="filename">.private</code>
          file) is
          used to generate signatures, and the public key (in the
          <code class="filename">.key</code> file) is used for signature
          verification.
        </p>
<p>
          To generate another key with the same properties (but with
          a different key tag), repeat the above command.
        </p>
<p>
          The public keys should be inserted into the zone file by
          including the <code class="filename">.key</code> files using
          <span><strong class="command">$INCLUDE</strong></span> statements.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571795"></a>Signing the Zone</h3></div></div></div>
<p>
          The <span><strong class="command">dnssec-signzone</strong></span> program is used
          to
          sign a zone.
        </p>
<p>
          Any <code class="filename">keyset</code> files corresponding
          to secure subzones should be present.  The zone signer will
          generate <code class="literal">NSEC</code> and <code class="literal">RRSIG</code>
          records for the zone, as well as <code class="literal">DS</code>
          for
          the child zones if <code class="literal">'-d'</code> is specified.
                If <code class="literal">'-d'</code> is not specified, then
          DS RRsets for
          the secure child zones need to be added manually.
        </p>
<p>
          The following command signs the zone, assuming it is in a
          file called <code class="filename">zone.child.example</code>.  By
                default, all zone keys which have an available private key are
                used to generate signatures.
        </p>
<p>
          <strong class="userinput"><code>dnssec-signzone -o child.example zone.child.example</code></strong>
        </p>
<p>
          One output file is produced:
          <code class="filename">zone.child.example.signed</code>.  This
          file
          should be referenced by <code class="filename">named.conf</code>
          as the
          input file for the zone.
        </p>
<p><span><strong class="command">dnssec-signzone</strong></span>
          will also produce a keyset and dsset files and optionally a
          dlvset file.  These are used to provide the parent zone
          administrators with the <code class="literal">DNSKEYs</code> (or their
          corresponding <code class="literal">DS</code> records) that are the
          secure entry point to the zone.
        </p>
</div>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2571874"></a>Configuring Servers</h3></div></div></div>
<p>
          To enable <span><strong class="command">named</strong></span> to respond appropriately
          to DNS requests from DNSSEC aware clients,
          <span><strong class="command">dnssec-enable</strong></span> must be set to yes.
        </p>
<p>
          To enable <span><strong class="command">named</strong></span> to validate answers from
          other servers both <span><strong class="command">dnssec-enable</strong></span> and
          <span><strong class="command">dnssec-validation</strong></span> must be set and some
          <span><strong class="command">trusted-keys</strong></span> must be configured
          into <code class="filename">named.conf</code>.
        </p>
<p>
          <span><strong class="command">trusted-keys</strong></span> are copies of DNSKEY RRs
          for zones that are used to form the first link in the
          cryptographic chain of trust.  All keys listed in
          <span><strong class="command">trusted-keys</strong></span> (and corresponding zones)
          are deemed to exist and only the listed keys will be used
          to validated the DNSKEY RRset that they are from.
        </p>
<p>
          <span><strong class="command">trusted-keys</strong></span> are described in more detail
          later in this document.
        </p>
<p>
          Unlike <acronym class="acronym">BIND</acronym> 8, <acronym class="acronym">BIND</acronym>
          9 does not verify signatures on load, so zone keys for
          authoritative zones do not need to be specified in the
          configuration file.
        </p>
<p>
          After DNSSEC gets established, a typical DNSSEC configuration
          will look something like the following.  It has a one or
          more public keys for the root.  This allows answers from
          outside the organization to be validated.  It will also
          have several keys for parts of the namespace the organization
          controls.  These are here to ensure that named is immune
          to compromises in the DNSSEC components of the security
          of parent zones.
        </p>
d673 1
a673 1
        /* Root Key */
d675 6
a680 6
             E9gx4UC1zGAHlXKdE4zYIpRhaBKnvcC2U9mZhkdUpd1Vso/HAdjNe8LmMlnzY3
             zy2Xy4klWOADTPzSv9eamj8V18PHGjBLaVtYvk/ln5ZApjYghf+6fElrmLkdaz
             MQ2OCnACR817DF4BBa7UR/beDHyp5iWTXWSi6XmoJLbG9Scqc7l70KDqlvXR3M
             /lUUVRbkeg1IPJSidmK3ZyCllh4XSKbje/45SKucHgnwU5jefMtq66gKodQj+M
             iA21AfUVe7u99WzTLzY3qlxDhxYQQ20FQ97S+LKUTpQcq27R7AT3/V5hRQxScI
             Nqwcz4jYqZD2fQdgxbcDTClU0CRBdiieyLMNzXG3";
d685 5
a689 5
                      OTcM8pwXlj0EiX3oDFVmjHO444gLkBO UKUf/mC7HvfwYH/Be22GnC
                      lrinKJp1Og4ywzO9WglMk7jbfW33gUKvirTHr25GL7STQUzBb5Usxt
                      8lgnyTUHs1t3JwCY5hKZ6CqFxmAVZP20igTixin/1LcrgX/KMEGd/b
                      iuvF4qJCyduieHukuY3H4XMAcR+xia2 nIUPvm/oyWR8BW/hWdzOvn
                      SCThlHf3xiYleDbt/o1OTQ09A0=";
d694 6
a699 6
                                tszYqbtvchmgQC8CzKojM/W16i6MG/ea fGU3siaOdS0
                                yOI6BgPsw+YZdzlYMaIJGf4M4dyoKIhzdZyQ2bYQrjyQ
                                4LB0lC7aOnsMyYKHHYeRv PxjIQXmdqgOJGq+vsevG06
                                zW+1xgYJh9rCIfnm1GX/KMgxLPG2vXTD/RnLX+D3T3UL
                                7HJYHJhAZD5L59VvjSPsZJHeDCUyWYrvPZesZDIRvhDD
                                52SKvbheeTJUm6EhkzytNN2SN96QRk8j/iI8ib";
d703 2
a704 3
        ...
        dnssec-enable yes;
        dnssec-validation yes;
d709 3
a711 3
          None of the keys listed in this example are valid.  In particular,
          the root key is not valid.
        </div>
d716 33
a748 45
<a name="id2572153"></a>IPv6 Support in <acronym class="acronym">BIND</acronym> 9</h2></div></div></div>
<p>
        <acronym class="acronym">BIND</acronym> 9 fully supports all currently
        defined forms of IPv6
        name to address and address to name lookups.  It will also use
        IPv6 addresses to make queries when running on an IPv6 capable
        system.
      </p>
<p>
        For forward lookups, <acronym class="acronym">BIND</acronym> 9 supports
        only AAAA records.  RFC 3363 deprecated the use of A6 records,
        and client-side support for A6 records was accordingly removed
        from <acronym class="acronym">BIND</acronym> 9.
        However, authoritative <acronym class="acronym">BIND</acronym> 9 name servers still
        load zone files containing A6 records correctly, answer queries
        for A6 records, and accept zone transfer for a zone containing A6
        records.
      </p>
<p>
        For IPv6 reverse lookups, <acronym class="acronym">BIND</acronym> 9 supports
        the traditional "nibble" format used in the
        <span class="emphasis"><em>ip6.arpa</em></span> domain, as well as the older, deprecated
        <span class="emphasis"><em>ip6.int</em></span> domain.
        Older versions of <acronym class="acronym">BIND</acronym> 9 
        supported the "binary label" (also known as "bitstring") format,
        but support of binary labels has been completely removed per
        RFC 3363.
        Many applications in <acronym class="acronym">BIND</acronym> 9 do not understand
        the binary label format at all any more, and will return an
        error if given.
        In particular, an authoritative <acronym class="acronym">BIND</acronym> 9
        name server will not load a zone file containing binary labels.
      </p>
<p>
        For an overview of the format and structure of IPv6 addresses,
        see <a href="Bv9ARM.ch09.html#ipv6addresses" title="IPv6 addresses (AAAA)">the section called &#8220;IPv6 addresses (AAAA)&#8221;</a>.
      </p>
<div class="sect2" lang="en">
<div class="titlepage"><div><div><h3 class="title">
<a name="id2572215"></a>Address Lookups Using AAAA Records</h3></div></div></div>
<p>
          The IPv6 AAAA record is a parallel to the IPv4 A record,
          and, unlike the deprecated A6 record, specifies the entire
          IPv6 address in a single record.  For example,
        </p>
d753 4
a756 6
<p>
          Use of IPv4-in-IPv6 mapped addresses is not recommended.
          If a host has an IPv4 address, use an A record, not
          a AAAA, with <code class="literal">::ffff:192.168.42.1</code> as
          the address.
        </p>
d760 7
a766 10
<a name="id2572236"></a>Address to Name Lookups Using Nibble Format</h3></div></div></div>
<p>
          When looking up an address in nibble format, the address
          components are simply reversed, just as in IPv4, and
          <code class="literal">ip6.arpa.</code> is appended to the
          resulting name.
          For example, the following would provide reverse name lookup for
          a host with address
          <code class="literal">2001:db8::1</code>.
        </p>
@


