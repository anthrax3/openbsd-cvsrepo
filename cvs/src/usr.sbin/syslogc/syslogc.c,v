head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.6
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.8
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.16
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.14
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.10
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.8
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.14.0.10
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.8
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.8
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.6
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.4
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.2
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.18
date	2015.10.13.16.30.55;	author deraadt;	state Exp;
branches;
next	1.17;
commitid	ky1MXviqPkwBxFNl;

1.17
date	2014.11.26.18.34.52;	author millert;	state Exp;
branches;
next	1.16;
commitid	9QOFSShUOtA0kQLF;

1.16
date	2011.07.12.11.28.31;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.04.20.23.09;	author mpf;	state Exp;
branches;
next	1.14;

1.14
date	2008.09.10.22.17.33;	author sobrado;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.10.13.54.39;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.03.13.25.21;	author mpf;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.28.08.49.28;	author stevesk;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.19.23.34.52;	author djm;	state Exp;
branches;
next	1.9;

1.9
date	2005.04.03.03.42.47;	author djm;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.14.22.33.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.15.20.46.00;	author mpf;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.25.19.11.38;	author djm;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.13.01.10.05;	author djm;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.15.01.07.21;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.12.21.18.39;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.05.02.21.06;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.04.08.30.21;	author djm;	state Exp;
branches;
next	;


desc
@@


1.18
log
@After the socket is open, the remainder is just io operations.
Use pledge "stdio".
@
text
@/* $OpenBSD: syslogc.c,v 1.17 2014/11/26 18:34:52 millert Exp $ */

/*
 * Copyright (c) 2004 Damien Miller
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

#include <err.h>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define DEFAULT_CTLSOCK		"/var/run/syslogd.sock"

#define MAX_MEMBUF_NAME	64	/* Max length of membuf log name */

/*
 * Client protocol NB. all numeric fields in network byte order
 */
#define CTL_VERSION		2

/* Request */
struct ctl_cmd {
	u_int32_t	version;
#define CMD_READ	1	/* Read out log */
#define CMD_READ_CLEAR	2	/* Read and clear log */
#define CMD_CLEAR	3	/* Clear log */
#define CMD_LIST	4	/* List available logs */
#define CMD_FLAGS	5	/* Query flags only */
#define CMD_READ_CONT	6	/* Read out log continuously */
	u_int32_t	cmd;
	u_int32_t	lines;
	char		logname[MAX_MEMBUF_NAME];
};

/* Reply */
struct ctl_reply_hdr {
	u_int32_t	version;
#define CTL_HDR_FLAG_OVERFLOW	0x01
	u_int32_t	flags;
	/* Reply text follows, up to MAX_MEMBUF long */
};

static void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,
	    "usage: %s [-Ccfo] [-n lines] [-s reporting_socket] logname\n"
	    "       %s -q\n", __progname, __progname);
	exit(1);
}

int
main(int argc, char **argv)
{
	const char *ctlsock_path;
	char buf[8192];
	struct sockaddr_un ctl;
	int ctlsock, ch, oflag, rval;
	FILE *ctlf;
	extern char *optarg;
	extern int optind;
	struct ctl_cmd cc;
	struct ctl_reply_hdr rr;
	const char *errstr;

	memset(&cc, '\0', sizeof(cc));

	ctlsock_path = DEFAULT_CTLSOCK;
	rval = oflag = 0;
	while ((ch = getopt(argc, argv, "Ccfhon:qs:")) != -1) {
		switch (ch) {
		case 'C':
			cc.cmd = CMD_CLEAR;
			break;
		case 'c':
			cc.cmd = CMD_READ_CLEAR;
			break;
		case 'h':
			usage();
			break;
		case 'f':
			cc.cmd = CMD_READ_CONT;
			break;
		case 'n':
			cc.lines = strtonum(optarg, 1, UINT32_MAX, &errstr);
			if (errstr)
				errx(1, "number of lines is %s: %s",
				    errstr, optarg);
			break;
		case 'o':
			cc.cmd = CMD_FLAGS;
			oflag = 1;
			break;
		case 'q':
			cc.cmd = CMD_LIST;
			break;
		case 's':
			ctlsock_path = optarg;
			break;
		default:
			usage();
			break;
		}
	}

	if (cc.cmd == 0)
		cc.cmd = CMD_READ;

	if ((cc.cmd != CMD_LIST && optind != argc - 1) ||
	    (cc.cmd == CMD_LIST && optind != argc))
		usage();

	if (cc.cmd != CMD_LIST) {
		if (strlcpy(cc.logname, argv[optind], sizeof(cc.logname)) >=
		    sizeof(cc.logname))
			errx(1, "Specified log name is too long");
	}

	memset(&ctl, '\0', sizeof(ctl));
	strlcpy(ctl.sun_path, ctlsock_path, sizeof(ctl.sun_path));
	ctl.sun_family = AF_UNIX;

	if ((ctlsock = socket(PF_UNIX, SOCK_STREAM, 0)) == -1)
		err(1, "socket");
	if (connect(ctlsock, (struct sockaddr *)&ctl, sizeof(ctl)) == -1)
		err(1, "connect: %s", ctl.sun_path);
	if ((ctlf = fdopen(ctlsock, "r+")) == NULL)
		err(1, "fdopen");

	if (pledge("stdio", NULL) == -1)
		err(1, "stdio");

	cc.version = htonl(CTL_VERSION);
	cc.cmd = htonl(cc.cmd);
	/* Send command */
	if (fwrite(&cc, sizeof(cc), 1, ctlf) != 1)
		err(1, "fwrite");

	fflush(ctlf);
	setvbuf(ctlf, NULL, _IOLBF, 0);
	setvbuf(stdout, NULL, _IOLBF, 0);

	/* Fetch header */
	if (fread(&rr, sizeof(rr), 1, ctlf) != 1)
		err(1, "fread header");

	if (ntohl(rr.version) != CTL_VERSION)
		errx(1, "unsupported syslogd version");

	/* Write out reply */
	while ((fgets(buf, sizeof(buf), ctlf)) != NULL) {
		if (!strcmp(buf, "<ENOBUFS>\n"))
			fprintf(stderr, "syslogc [%s]: Lines were dropped!\n",
			    cc.logname);
		else
			fputs(buf, stdout);
	}

	if (oflag && (ntohl(rr.flags) & CTL_HDR_FLAG_OVERFLOW)) {
		printf("%s has overflowed\n", cc.logname);
		rval = 1;
	}

	fclose(ctlf);
	close(ctlsock);

	exit(rval);
}
@


1.17
log
@Prefer setvbuf() to setlinebuf() for portability; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.16 2011/07/12 11:28:31 sthen Exp $ */
d149 3
@


1.16
log
@Allow syslogc -n XX to display less than the whole file, and -n XX -f to
display more/less than the default of 10.  ok mpf@@ jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.15 2011/07/04 20:23:09 mpf Exp $ */
d157 2
a158 2
	setlinebuf(ctlf);
	setlinebuf(stdout);
@


1.15
log
@Make stdout line buffered.
 # syslogc -f foobuf | grep bar
is now usable.
OK mikeb, djm, markus
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.14 2008/09/10 22:17:33 sobrado Exp $ */
d25 1
d37 1
a37 1
#define CTL_VERSION		1
d49 1
d66 2
a67 1
	fprintf(stderr, "usage: %s [-Ccfo] [-s reporting_socket] logname\n"
d84 1
d90 1
a90 1
	while ((ch = getopt(argc, argv, "Ccfhoqs:")) != -1) {
d103 6
@


1.14
log
@sync synopsis and usage; documentation tweaks.

ok jmc@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.13 2007/01/10 13:54:39 jmc Exp $ */
d148 1
@


1.13
log
@sync usage() somewhat;
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.12 2007/01/03 13:25:21 mpf Exp $ */
d64 2
a65 2
	fprintf(stderr, "usage: %s [-Ccfoq] [-s reporting_socket] logname\n",
	    __progname);
@


1.12
log
@Support for continuous reading of syslog memory buffers.
Works like ``tail -f'' on a log file.
OK markus@@, djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.11 2005/09/28 08:49:28 stevesk Exp $ */
d64 2
a65 1
	fprintf(stderr, "Usage: %s [-Ccfhoq] [-s ctlsock] logname\n", __progname);
@


1.11
log
@err()->errx() and KNF; ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.10 2005/09/19 23:34:52 djm Exp $ */
d36 1
a36 1
#define CTL_VERSION		0
d46 1
d64 1
a64 1
	fprintf(stderr, "Usage: %s [-Ccoq] [-s ctlsock] logname\n", __progname);
d85 1
a85 1
	while ((ch = getopt(argc, argv, "Cchoqs:")) != -1) {
d96 3
d156 7
a162 2
	while ((fgets(buf, sizeof(buf), ctlf)) != NULL)
		fputs(buf, stdout);
@


1.10
log
@zap unused header and #defines, mostly from stevesk@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.9 2005/04/03 03:42:47 djm Exp $ */
d149 1
a149 1
		err(1, "unsupported syslogd version");
d152 1
a152 1
	while((fgets(buf, sizeof(buf), ctlf)) != NULL)
@


1.9
log
@kill redundant warning - getopt does it for us; from andrushock AT korovino.net
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.8 2004/09/14 22:33:38 deraadt Exp $ */
a23 1
#include <errno.h>
a56 4

/* Protocol parameters - must match syslogd */
#define CTL_VERSION		0
#define CTL_HDR_LEN		8
@


1.8
log
@remove unused variables
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.7 2004/07/15 20:46:00 mpf Exp $ */
a110 1
			fprintf(stderr, "Invalid commandline option.\n");
d135 1
a135 1
	if (connect(ctlsock, (struct sockaddr*)&ctl, sizeof(ctl)) == -1)
@


1.7
log
@add -o to usage()  ok markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.6 2004/06/25 19:11:38 djm Exp $ */
a77 1
	socklen_t ctllen;
a83 1
	u_int32_t header[2];
@


1.6
log
@support new syslogd control protocol and add new -o option to detect memory
buffer overflow; idea & ok markus@@

NB if you are using memory buffered logging make sure you update both syslogd
and syslogc _and_ restart syslogd because the protocol has changed
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.5 2004/04/13 01:10:05 djm Exp $ */
d68 1
a68 1
	fprintf(stderr, "Usage: %s [-Ccq] [-s ctlsock] logname\n", __progname);
@


1.5
log
@Sort getopt list and tidy error checks. From andrushock@@korovino.net;
ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.4 2004/03/15 01:07:21 djm Exp $ */
d34 6
d41 1
d46 3
a48 2
	int	cmd;
	char	logname[MAX_MEMBUF_NAME];
d51 12
d79 1
a79 1
	int ctlsock, ch;
d84 2
d90 2
a91 1
	while ((ch = getopt(argc, argv, "Cchqs:")) != -1) {
d102 4
d142 3
d152 7
d163 5
d171 1
a171 1
	exit(0);
@


1.4
log
@zero struct sockaddr_un before use, from andrushock AT korovino.net; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.3 2004/01/12 21:18:39 djm Exp $ */
d32 2
a33 1
#define MAX_MEMBUF_NAME	64		/* Max length of membuf log name */
d70 6
a81 6
		case 'c':
			cc.cmd = CMD_READ_CLEAR;
			break;
		case 'C':
			cc.cmd = CMD_CLEAR;
			break;
d100 1
a100 1
		if (strlcpy(cc.logname, argv[optind], sizeof(cc.logname)) >
d109 1
a109 1
	if ((ctlsock = socket(PF_UNIX, SOCK_STREAM, 0)) < 0)
d112 1
a112 1
		err(1, "%s", ctl.sun_path);
d116 1
a116 1
	if (fwrite(&cc, sizeof(cc), 1, ctlf) <= 0)
@


1.3
log
@remove redundant string termination; report from nimadeus@@pandora.be
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.2 2004/01/05 02:21:06 deraadt Exp $ */
d104 1
@


1.2
log
@excessively detailed error messages are not unix
@
text
@d1 1
a1 1
/* $OpenBSD: syslogc.c,v 1.1 2004/01/04 08:30:21 djm Exp $ */
a104 1
	ctl.sun_path[sizeof(ctl.sun_path) - 1] = '\0';
@


1.1
log
@syslogc - client to read memory buffered logs from syslogd;
manpage nits jmc@@, fixes jose@@; ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d109 1
a109 1
		err(1, "ctl socket() error");
d111 1
a111 1
		err(1, "ctl connect(\"%s\") error", ctl.sun_path);
@

