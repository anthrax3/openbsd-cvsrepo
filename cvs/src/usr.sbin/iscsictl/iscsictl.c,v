head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2016.08.16.18.41.57;	author tedu;	state Exp;
branches;
next	1.10;
commitid	eyeRGwF24702KeRh;

1.10
date	2015.11.11.02.55.12;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	6PpNUf6lqVWpkpoX;

1.9
date	2015.01.16.06.40.17;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	Uu5nFG3wCl0LACBb;

1.8
date	2014.04.21.20.20.37;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.21.18.01.08;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.21.17.44.47;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.20.22.22.18;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.02.18.02.45;	author gsoares;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.27.19.20.01;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.25.16.23.01;	author sobrado;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.09.45.17;	author claudio;	state Exp;
branches;
next	;


desc
@@


1.11
log
@stop including sys/param.h for nitems. define locally as needed.
ok natano reyk
@
text
@/*	$OpenBSD: iscsictl.c,v 1.10 2015/11/11 02:55:12 deraadt Exp $ */

/*
 * Copyright (c) 2010 Claudio Jeker <claudio@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <sys/un.h>

#include <event.h>
#include <err.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <util.h>

#include "iscsid.h"
#include "iscsictl.h"

__dead void	 usage(void);
void		 run(void);
void		 run_command(struct pdu *);
struct pdu	*ctl_getpdu(char *, size_t);
int		 ctl_sendpdu(int, struct pdu *);
void		 show_config(struct ctrlmsghdr *, struct pdu *);
void		 show_vscsi_stats(struct ctrlmsghdr *, struct pdu *);

char		cbuf[CONTROL_READ_SIZE];

struct control {
	struct pduq	channel;
	int		fd;
} control;

__dead void
usage(void)
{
	extern char *__progname;

	fprintf(stderr,"usage: %s [-s socket] command [argument ...]\n",
	    __progname);
	exit(1);
}

int
main (int argc, char* argv[])
{
	struct sockaddr_un sun;
	struct session_config sc;
	struct parse_result *res;
	char *confname = ISCSID_CONFIG;
	char *sockname = ISCSID_CONTROL;
	struct session_ctlcfg *s;
	struct iscsi_config *cf;
	int ch, val = 0;

	/* check flags */
	while ((ch = getopt(argc, argv, "f:s:")) != -1) {
		switch (ch) {
		case 'f':
			confname = optarg;
			break;
		case 's':
			sockname = optarg;
			break;
		default:
			usage();
			/* NOTREACHED */
		}
	}
	argc -= optind;
	argv += optind;

	/* parse options */
	if ((res = parse(argc, argv)) == NULL)
		exit(1);

	/* connect to iscsid control socket */
	TAILQ_INIT(&control.channel);
	if ((control.fd = socket(AF_UNIX, SOCK_SEQPACKET, 0)) == -1)
		err(1, "socket");

	bzero(&sun, sizeof(sun));
	sun.sun_family = AF_UNIX;
	strlcpy(sun.sun_path, sockname, sizeof(sun.sun_path));

	if (connect(control.fd, (struct sockaddr *)&sun, sizeof(sun)) == -1)
		err(1, "connect: %s", sockname);

	if (pledge("stdio rpath dns", NULL) == -1)
		err(1, "pledge");

	switch (res->action) {
	case NONE:
	case LOG_VERBOSE:
		val = 1;
		/* FALLTHROUGH */
	case LOG_BRIEF:
		if (control_compose(NULL, CTRL_LOG_VERBOSE,
		    &val, sizeof(int)) == -1)
			err(1, "control_compose");
		break;
	case SHOW_SUM:
		if (control_compose(NULL, CTRL_SHOW_SUM, NULL, 0) == -1)
			err(1, "control_compose");
		break;
	case SHOW_SESS:
		usage();
		/* NOTREACHED */
	case SHOW_VSCSI_STATS:
		if (control_compose(NULL, CTRL_VSCSI_STATS, NULL, 0) == -1)
			err(1, "control_compose");
		break;
	case RELOAD:
		if ((cf = parse_config(confname)) == NULL)
			errx(1, "errors while loading configuration file.");
		if (cf->initiator.isid_base != 0) {
			if (control_compose(NULL, CTRL_INITIATOR_CONFIG,
			    &cf->initiator, sizeof(cf->initiator)) == -1)
				err(1, "control_compose");
		}
		SIMPLEQ_FOREACH(s, &cf->sessions, entry) {
			struct ctrldata cdv[3];
			bzero(cdv, sizeof(cdv));

			cdv[0].buf = &s->session;
			cdv[0].len = sizeof(s->session);

			if (s->session.TargetName) {
				cdv[1].buf = s->session.TargetName;
				cdv[1].len =
				    strlen(s->session.TargetName) + 1;
			}
			if (s->session.InitiatorName) {
				cdv[2].buf = s->session.InitiatorName;
				cdv[2].len =
				    strlen(s->session.InitiatorName) + 1;
			}

			if (control_build(NULL, CTRL_SESSION_CONFIG,
			    nitems(cdv), cdv) == -1)
				err(1, "control_build");
		}
		break;
	case DISCOVERY:
		printf("discover %s\n", log_sockaddr(&res->addr));

		bzero(&sc, sizeof(sc));
		snprintf(sc.SessionName, sizeof(sc.SessionName),
		    "discovery.%d", (int)getpid());
		bcopy(&res->addr, &sc.connection.TargetAddr, res->addr.ss_len);
		sc.SessionType = SESSION_TYPE_DISCOVERY;

		if (control_compose(NULL, CTRL_SESSION_CONFIG,
		    &sc, sizeof(sc)) == -1)
			err(1, "control_compose");
	}

	run();

	close(control.fd);

	return (0);
}

void
control_queue(void *ch, struct pdu *pdu)
{
	TAILQ_INSERT_TAIL(&control.channel, pdu, entry);
}

void
run(void)
{
	struct pdu *pdu;

	while ((pdu = TAILQ_FIRST(&control.channel)) != NULL) {
		TAILQ_REMOVE(&control.channel, pdu, entry);
		run_command(pdu);
	}
}

void
run_command(struct pdu *pdu)
{
	struct ctrlmsghdr *cmh;
	int done = 0;
	ssize_t n;

	if (ctl_sendpdu(control.fd, pdu) == -1)
		err(1, "send");
	while (!done) {
		if ((n = recv(control.fd, cbuf, sizeof(cbuf), 0)) == -1 &&
		    !(errno == EAGAIN || errno == EINTR))
			err(1, "recv");

		if (n == 0)
			errx(1, "connection to iscsid closed");

		pdu = ctl_getpdu(cbuf, n);
		cmh = pdu_getbuf(pdu, NULL, 0);
		if (cmh == NULL)
			break;
		switch (cmh->type) {
		case CTRL_SUCCESS:
			printf("command successful\n");
			done = 1;
			break;
		case CTRL_FAILURE:
			printf("command failed\n");
			done = 1;
			break;
		case CTRL_INPROGRESS:
			printf("command in progress...\n");
			break;
		case CTRL_INITIATOR_CONFIG:
		case CTRL_SESSION_CONFIG:
			show_config(cmh, pdu);
			break;
		case CTRL_VSCSI_STATS:
			show_vscsi_stats(cmh, pdu);
			done = 1;
			break;
		}
	}
}

struct pdu *
ctl_getpdu(char *buf, size_t len)
{
	struct pdu *p;
	struct ctrlmsghdr *cmh;
	void *data;
	size_t n;
	int i;

	if (len < sizeof(*cmh))
		return NULL;

	if (!(p = pdu_new()))
		return NULL;

	n = sizeof(*cmh);
	cmh = pdu_alloc(n);
	bcopy(buf, cmh, n);
	buf += n;
	len -= n;

	if (pdu_addbuf(p, cmh, n, 0)) {
		free(cmh);
fail:
		pdu_free(p);
		return NULL;
	}

	for (i = 0; i < 3; i++) {
		n = cmh->len[i];
		if (n == 0)
			continue;
		if (PDU_LEN(n) > len)
			goto fail;
		if (!(data = pdu_alloc(n)))
			goto fail;
		bcopy(buf, data, n);
		if (pdu_addbuf(p, data, n, i + 1)) {
			free(data);
			goto fail;
		}
		buf += PDU_LEN(n);
		len -= PDU_LEN(n);
	}

	return p;
}

int
ctl_sendpdu(int fd, struct pdu *pdu)
{
	struct iovec iov[PDU_MAXIOV];
	struct msghdr msg;
	unsigned int niov = 0;

	for (niov = 0; niov < PDU_MAXIOV; niov++) {
		iov[niov].iov_base = pdu->iov[niov].iov_base;
		iov[niov].iov_len = pdu->iov[niov].iov_len;
	}
	bzero(&msg, sizeof(msg));
	msg.msg_iov = iov;
	msg.msg_iovlen = niov;
	if (sendmsg(fd, &msg, 0) == -1)
		return -1;
	return 0;
}

void
show_config(struct ctrlmsghdr *cmh, struct pdu *pdu)
{
	struct initiator_config	*ic;
	struct session_config	*sc;
	char *name;

	switch (cmh->type) {
	case CTRL_INITIATOR_CONFIG:
		if (cmh->len[0] != sizeof(*ic))
			errx(1, "bad size of response");
		ic = pdu_getbuf(pdu, NULL, 1);
		if (ic == NULL)
			return;

		printf("Initiator: ISID base %x qalifier %hx\n",
		    ic->isid_base, ic->isid_qual);
		break;
	case CTRL_SESSION_CONFIG:
		if (cmh->len[0] != sizeof(*sc))
			errx(1, "bad size of response");
		sc = pdu_getbuf(pdu, NULL, 1);
		if (sc == NULL)
			return;

		printf("\nSession '%s':%s\n", sc->SessionName,
		    sc->disabled ? " disabled" : "");
		printf("    SessionType: %s\tMaxConnections: %hd\n",
		    sc->SessionType == SESSION_TYPE_DISCOVERY ? "discovery" :
		    "normal", sc->MaxConnections);
		if ((name = pdu_getbuf(pdu, NULL, 2)))
			printf("    TargetName: %s\n", name);
		printf("    TargetAddr: %s\n",
		    log_sockaddr(&sc->connection.TargetAddr));
		if ((name = pdu_getbuf(pdu, NULL, 3)))
			printf("    InitiatorName: %s\n", name);
		printf("    InitiatorAddr: %s\n",
		    log_sockaddr(&sc->connection.LocalAddr));
		break;
	}
}

void
show_vscsi_stats(struct ctrlmsghdr *cmh, struct pdu *pdu)
{
	struct vscsi_stats *vs;
	char buf[FMT_SCALED_STRSIZE];

	if (cmh->len[0] != sizeof(struct vscsi_stats))
		errx(1, "bad size of response");
	vs = pdu_getbuf(pdu, NULL, 1);
	if (vs == NULL)
		return;

	printf("VSCSI ioctl statistics:\n");
	printf("%u probe calls and %u detach calls\n",
	    vs->cnt_probe, vs->cnt_detach);
	printf("%llu I2T calls (%llu read, %llu writes)\n",
	    vs->cnt_i2t,
	    vs->cnt_i2t_dir[1], 
	    vs->cnt_i2t_dir[2]);

	if (fmt_scaled(vs->bytes_rd, buf) != 0)
		(void)strlcpy(buf, "NaN", sizeof(buf));
	printf("%llu data reads (%s bytes read)\n", vs->cnt_read, buf);
	if (fmt_scaled(vs->bytes_wr, buf) != 0)
		(void)strlcpy(buf, "NaN", sizeof(buf));
	printf("%llu data writes (%s bytes written)\n", vs->cnt_write, buf);

	printf("%llu T2I calls (%llu done, %llu sense errors, %llu errors)\n",
	    vs->cnt_t2i,
	    vs->cnt_t2i_status[0], 
	    vs->cnt_t2i_status[1], 
	    vs->cnt_t2i_status[2]);
}
@


1.10
log
@claudio twice told me pledge "stdio rpath dns" is probably enough.
He'll test it next time he builds...
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.9 2015/01/16 06:40:17 deraadt Exp $ */
a18 1
#include <sys/param.h>	/* nitems */
@


1.9
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.8 2014/04/21 20:20:37 claudio Exp $ */
d106 3
@


1.8
log
@Print bytes read and written in human readable form, like:
2849359 I2T calls (5 read, 2849352 writes)
5 data reads (2.3K bytes read)
2849352 data writes (43.5G bytes written)
2849358 T2I calls (2849358 done, 0 sense errors, 0 errors)
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.7 2014/04/21 18:01:08 claudio Exp $ */
d19 1
a19 2
#include <sys/types.h>
#include <sys/param.h>
@


1.7
log
@Print the target and initiator name in show command.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.6 2014/04/21 17:44:47 claudio Exp $ */
d33 1
d356 1
d372 6
a377 4
	printf("%llu data reads (%llu bytes read)\n",
	    vs->cnt_read, vs->bytes_rd);
	printf("%llu data writes (%llu bytes written)\n",
	    vs->cnt_write, vs->bytes_wr);
@


1.6
log
@Cope with the iscsid changes. Makes the msg handling a lot easier.
This also introduces some stuff that is work in progress.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.5 2014/04/20 22:22:18 claudio Exp $ */
a137 1

d314 1
d339 6
a344 1
//		printf("    InitiatorName: %s\n", sc->InitiatorName);
a346 3
//		printf("    TargetName: %s\n", sc->TargetName);
		printf("    TargetAddr: %s\n",
		    log_sockaddr(&sc->connection.TargetAddr));
@


1.5
log
@Add iscsictl bits to show the vscsi stats.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.4 2012/05/02 18:02:45 gsoares Exp $ */
d20 1
d38 2
a39 1
void		 run_command(int, struct pdu *);
d42 1
d47 5
d66 1
a69 4
	struct pdu *pdu;
	struct ctrlmsghdr *cmh;
	struct session_config *sc;
	struct initiator_config *ic;
d72 1
a72 3
	char *tname, *iname;
	int ch, csock;
	int *vp, val = 0;
d96 2
a97 1
	if ((csock = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
d104 1
a104 1
	if (connect(csock, (struct sockaddr *)&sun, sizeof(sun)) == -1)
d113 3
a115 12
		if ((pdu = pdu_new()) == NULL)
			err(1, "pdu_new");
		if ((cmh = pdu_alloc(sizeof(*cmh))) == NULL)
			err(1, "pdu_alloc");
		bzero(cmh, sizeof(*cmh));
		cmh->type = CTRL_LOG_VERBOSE;
		cmh->len[0] = sizeof(int);
		if ((vp = pdu_dup(&val, sizeof(int))) == NULL)
			err(1, "pdu_dup");
		pdu_addbuf(pdu, cmh, sizeof(*cmh), 0);
		pdu_addbuf(pdu, vp, sizeof(int), 1);
		run_command(csock, pdu);
a116 1
	case SHOW:
d118 4
d125 2
a126 8
		if ((pdu = pdu_new()) == NULL)
			err(1, "pdu_new");
		if ((cmh = pdu_alloc(sizeof(*cmh))) == NULL)
			err(1, "pdu_alloc");
		bzero(cmh, sizeof(*cmh));
		cmh->type = CTRL_VSCSI_STATS;
		pdu_addbuf(pdu, cmh, sizeof(*cmh), 0);
		run_command(csock, pdu);
d132 3
a134 13
			if ((pdu = pdu_new()) == NULL)
				err(1, "pdu_new");
			if ((cmh = pdu_alloc(sizeof(*cmh))) == NULL)
				err(1, "pdu_alloc");
			bzero(cmh, sizeof(*cmh));
			cmh->type = CTRL_INITIATOR_CONFIG;
			cmh->len[0] = sizeof(*ic);
			if ((ic = pdu_dup(&cf->initiator,
			    sizeof(cf->initiator))) == NULL)
				err(1, "pdu_dup");
			pdu_addbuf(pdu, cmh, sizeof(*cmh), 0);
			pdu_addbuf(pdu, ic, sizeof(*ic), 1);
			run_command(csock, pdu);
d137 7
a143 10
			if ((pdu = pdu_new()) == NULL)
				err(1, "pdu_new");
			if ((cmh = pdu_alloc(sizeof(*cmh))) == NULL)
				err(1, "pdu_alloc");
			bzero(cmh, sizeof(*cmh));
			cmh->type = CTRL_SESSION_CONFIG;
			cmh->len[0] = sizeof(*sc);
			if ((sc = pdu_dup(&s->session, sizeof(s->session))) ==
			    NULL)
				err(1, "pdu_dup");
d145 4
a148 7
				if ((tname = pdu_dup(s->session.TargetName,
				    strlen(s->session.TargetName) + 1)) ==
				    NULL)
					err(1, "pdu_dup");
				cmh->len[1] = strlen(s->session.TargetName) + 1;
			} else
				tname = NULL;
d150 8
a157 16
				if ((iname = pdu_dup(s->session.InitiatorName,
				    strlen(s->session.InitiatorName) + 1)) ==
				    NULL)
					err(1, "pdu_dup");
				cmh->len[2] = strlen(s->session.InitiatorName)
				    + 1;
			} else
				iname = NULL;
			pdu_addbuf(pdu, cmh, sizeof(*cmh), 0);
			pdu_addbuf(pdu, sc, sizeof(*sc), 1);
			if (tname)
				pdu_addbuf(pdu, tname, strlen(tname) + 1, 2);
			if (iname)
				pdu_addbuf(pdu, iname, strlen(iname) + 1, 3);

			run_command(csock, pdu);
d162 3
a164 9
		if ((pdu = pdu_new()) == NULL)
			err(1, "pdu_new");
		if ((cmh = pdu_alloc(sizeof(*cmh))) == NULL)
			err(1, "pdu_alloc");
		if ((sc = pdu_alloc(sizeof(*sc))) == NULL)
			err(1, "pdu_alloc");
		bzero(cmh, sizeof(*cmh));
		bzero(sc, sizeof(*sc));
		snprintf(sc->SessionName, sizeof(sc->SessionName),
d166 2
a167 6
		bcopy(&res->addr, &sc->connection.TargetAddr, res->addr.ss_len);
		sc->SessionType = SESSION_TYPE_DISCOVERY;
		cmh->type = CTRL_SESSION_CONFIG;
		cmh->len[0] = sizeof(*sc);
		pdu_addbuf(pdu, cmh, sizeof(*cmh), 0);
		pdu_addbuf(pdu, sc, sizeof(*sc), 1);
d169 3
a171 1
		run_command(csock, pdu);
d174 3
a176 1
	close(csock);
d182 18
a199 1
run_command(int csock, struct pdu *pdu)
d205 1
a205 1
	if (ctl_sendpdu(csock, pdu) == -1)
d208 1
a208 1
		if ((n = recv(csock, cbuf, sizeof(cbuf), 0)) == -1 &&
d231 4
d311 39
d357 2
a358 2
		if (vs == NULL)
			return;
@


1.4
log
@s/ospfd/iscsid/ in comment

sure claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.3 2011/04/27 19:20:01 claudio Exp $ */
d40 1
d126 10
d238 2
a239 2
			if (cmh == NULL)
				break;
d252 4
d325 31
@


1.3
log
@Implement "log verbose|brief" and allow the configuratuin of the
initiatior config which is just the ISID in case someone needs
to fix them to a specific value.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.2 2010/09/25 16:23:01 sobrado Exp $ */
d91 1
a91 1
	/* connect to ospfd control socket */
@


1.2
log
@spacing, no binary changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: iscsictl.c,v 1.1 2010/09/24 09:45:17 claudio Exp $ */
d63 1
d68 1
d105 2
d108 13
d128 15
a201 1
printf("sent pdu to daemon\n");
d237 3
@


1.1
log
@Import iscsictl -- the control tool for iscsid.
Currently only discovery and reload work.
OK dlg@@, matthew@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d47 1
a47 1
	
d67 1
a67 1
	
@

