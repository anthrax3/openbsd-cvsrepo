head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.52
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.48
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.50
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.42
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.46
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.44
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.40
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.38
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.24
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2003.11.26.01.17.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.03.15.14.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.03.14.58.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.01.45.25;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replace log() with logit() since ISO C reserves log() for the math
library and gcc 3.x will complain.  Replacement name taken from NetBSD.
espie@@ OK.
@
text
@/*	$NetBSD: kern.c,v 1.4 1995/12/10 10:07:03 mycroft Exp $	*/

/*
 * The mrouted program is covered by the license in the accompanying file
 * named "LICENSE".  Use of the mrouted program represents acceptance of
 * the terms and conditions listed in that file.
 *
 * The mrouted program is COPYRIGHT 1989 by The Board of Trustees of
 * Leland Stanford Junior University.
 */


#include "defs.h"


void k_set_rcvbuf(int bufsize)
{
    if (setsockopt(igmp_socket, SOL_SOCKET, SO_RCVBUF,
		   (char *)&bufsize, sizeof(bufsize)) < 0)
	logit(LOG_ERR, errno, "setsockopt SO_RCVBUF %u", bufsize);
}


void k_hdr_include(int bool)
{
#ifdef IP_HDRINCL
    if (setsockopt(igmp_socket, IPPROTO_IP, IP_HDRINCL,
		   (char *)&bool, sizeof(bool)) < 0)
	logit(LOG_ERR, errno, "setsockopt IP_HDRINCL %u", bool);
#endif
}


void k_set_ttl(int t)
{
    u_char ttl;

    ttl = t;
    if (setsockopt(igmp_socket, IPPROTO_IP, IP_MULTICAST_TTL,
		   (char *)&ttl, sizeof(ttl)) < 0)
	logit(LOG_ERR, errno, "setsockopt IP_MULTICAST_TTL %u", ttl);
}


void k_set_loop(int l)
{
    u_char loop;

    loop = l;
    if (setsockopt(igmp_socket, IPPROTO_IP, IP_MULTICAST_LOOP,
		   (char *)&loop, sizeof(loop)) < 0)
	logit(LOG_ERR, errno, "setsockopt IP_MULTICAST_LOOP %u", loop);
}


void k_set_if(u_int32_t ifa)
{
    struct in_addr adr;

    adr.s_addr = ifa;
    if (setsockopt(igmp_socket, IPPROTO_IP, IP_MULTICAST_IF,
		   (char *)&adr, sizeof(adr)) < 0)
	logit(LOG_ERR, errno, "setsockopt IP_MULTICAST_IF %s",
			    inet_fmt(ifa, s1));
}


void k_join(u_int32_t grp, u_int32_t ifa)
{
    struct ip_mreq mreq;

    mreq.imr_multiaddr.s_addr = grp;
    mreq.imr_interface.s_addr = ifa;

    if (setsockopt(igmp_socket, IPPROTO_IP, IP_ADD_MEMBERSHIP,
		   (char *)&mreq, sizeof(mreq)) < 0)
	logit(LOG_WARNING, errno, "can't join group %s on interface %s",
				inet_fmt(grp, s1), inet_fmt(ifa, s2));
}


void k_leave(u_int32_t grp, u_int32_t ifa)
{
    struct ip_mreq mreq;

    mreq.imr_multiaddr.s_addr = grp;
    mreq.imr_interface.s_addr = ifa;

    if (setsockopt(igmp_socket, IPPROTO_IP, IP_DROP_MEMBERSHIP,
		   (char *)&mreq, sizeof(mreq)) < 0)
	logit(LOG_WARNING, errno, "can't leave group %s on interface %s",
				inet_fmt(grp, s1), inet_fmt(ifa, s2));
}


void k_init_dvmrp(void)
{
#ifdef OLD_KERNEL
    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_INIT,
		   (char *)NULL, 0) < 0)
#else
    int v=1;

    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_INIT,
		   (char *)&v, sizeof(int)) < 0)
#endif
	logit(LOG_ERR, errno, "can't enable Multicast routing in kernel");
}


void k_stop_dvmrp(void)
{
    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DONE,
		   (char *)NULL, 0) < 0)
	logit(LOG_WARNING, errno, "can't disable Multicast routing in kernel");
}


void k_add_vif(vifi_t vifi, struct uvif *v)
{
    struct vifctl vc;

    vc.vifc_vifi            = vifi;
    vc.vifc_flags           = v->uv_flags & VIFF_KERNEL_FLAGS;
    vc.vifc_threshold       = v->uv_threshold;
    vc.vifc_rate_limit	    = v->uv_rate_limit;
    vc.vifc_lcl_addr.s_addr = v->uv_lcl_addr;
    vc.vifc_rmt_addr.s_addr = v->uv_rmt_addr;

    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_ADD_VIF,
		   (char *)&vc, sizeof(vc)) < 0)
	logit(LOG_ERR, errno, "setsockopt MRT_ADD_VIF");
}


void k_del_vif(vifi_t vifi)
{
    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_DEL_VIF,
		   (char *)&vifi, sizeof(vifi)) < 0)
	logit(LOG_ERR, errno, "setsockopt MRT_DEL_VIF");
}


/*
 * Adds a (source, mcastgrp) entry to the kernel
 */
void k_add_rg(u_int32_t origin, struct gtable *g)
{
    struct mfcctl mc;
    vifi_t i;

#ifdef DEBUG_MFC
    md_logit(MD_ADD, origin, g->gt_mcastgrp);
#endif
    /* copy table values so that setsockopt can process it */
    mc.mfcc_origin.s_addr = origin;
#ifdef OLD_KERNEL
    mc.mfcc_originmask.s_addr = 0xffffffff;
#endif
    mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;
    mc.mfcc_parent = g->gt_route ? g->gt_route->rt_parent : NO_VIF;
    for (i = 0; i < numvifs; i++)
	mc.mfcc_ttls[i] = g->gt_ttls[i];

    /* write to kernel space */
    if (setsockopt(igmp_socket, IPPROTO_IP, MRT_ADD_MFC,
		   (char *)&mc, sizeof(mc)) < 0) {
#ifdef DEBUG_MFC
	md_logit(MD_ADD_FAIL, origin, g->gt_mcastgrp);
#endif
	logit(LOG_WARNING, errno, "setsockopt MRT_ADD_MFC");
    }
}


/*
 * Deletes a (source, mcastgrp) entry from the kernel
 */
int k_del_rg(u_int32_t origin, struct gtable *g)
{
    struct mfcctl mc;
    int retval;

#ifdef DEBUG_MFC
    md_logit(MD_DEL, origin, g->gt_mcastgrp);
#endif
    /* copy table values so that setsockopt can process it */
    mc.mfcc_origin.s_addr = origin;
#ifdef OLD_KERNEL
    mc.mfcc_originmask.s_addr = 0xffffffff;
#endif
    mc.mfcc_mcastgrp.s_addr = g->gt_mcastgrp;

    /* write to kernel space */
    if ((retval = setsockopt(igmp_socket, IPPROTO_IP, MRT_DEL_MFC,
		   (char *)&mc, sizeof(mc))) < 0) {
#ifdef DEBUG_MFC
	md_logit(MD_DEL_FAIL, origin, g->gt_mcastgrp);
#endif
	logit(LOG_WARNING, errno, "setsockopt MRT_DEL_MFC");
    }

    return retval;
}

/*
 * Get the kernel's idea of what version of mrouted needs to run with it.
 */
int k_get_version(void)
{
#ifdef OLD_KERNEL
    return -1;
#else
    int vers;
    int len = sizeof(vers);

    if (getsockopt(igmp_socket, IPPROTO_IP, MRT_VERSION,
			(char *)&vers, &len) < 0)
	logit(LOG_ERR, errno,
		"getsockopt MRT_VERSION: perhaps your kernel is too old");

    return vers;
#endif
}
@


1.4
log
@spaces
@
text
@d20 1
a20 1
	log(LOG_ERR, errno, "setsockopt SO_RCVBUF %u", bufsize);
d29 1
a29 1
	log(LOG_ERR, errno, "setsockopt IP_HDRINCL %u", bool);
d41 1
a41 1
	log(LOG_ERR, errno, "setsockopt IP_MULTICAST_TTL %u", ttl);
d52 1
a52 1
	log(LOG_ERR, errno, "setsockopt IP_MULTICAST_LOOP %u", loop);
d63 1
a63 1
	log(LOG_ERR, errno, "setsockopt IP_MULTICAST_IF %s",
d77 1
a77 1
	log(LOG_WARNING, errno, "can't join group %s on interface %s",
d91 1
a91 1
	log(LOG_WARNING, errno, "can't leave group %s on interface %s",
d107 1
a107 1
	log(LOG_ERR, errno, "can't enable Multicast routing in kernel");
d115 1
a115 1
	log(LOG_WARNING, errno, "can't disable Multicast routing in kernel");
d132 1
a132 1
	log(LOG_ERR, errno, "setsockopt MRT_ADD_VIF");
d140 1
a140 1
	log(LOG_ERR, errno, "setsockopt MRT_DEL_VIF");
d153 1
a153 1
    md_log(MD_ADD, origin, g->gt_mcastgrp);
d169 1
a169 1
	md_log(MD_ADD_FAIL, origin, g->gt_mcastgrp);
d171 1
a171 1
	log(LOG_WARNING, errno, "setsockopt MRT_ADD_MFC");
d185 1
a185 1
    md_log(MD_DEL, origin, g->gt_mcastgrp);
d198 1
a198 1
	md_log(MD_DEL_FAIL, origin, g->gt_mcastgrp);
d200 1
a200 1
	log(LOG_WARNING, errno, "setsockopt MRT_DEL_MFC");
d219 1
a219 1
	log(LOG_ERR, errno,
@


1.3
log
@ansi, from cloder
@
text
@d64 1
a64 1
	    		    inet_fmt(ifa, s1));
d204 1
a204 1
}	
@


1.2
log
@from netbsd; update to mrouted 3.8
@
text
@d16 1
a16 2
void k_set_rcvbuf(bufsize)
    int bufsize;
d24 1
a24 2
void k_hdr_include(bool)
    int bool;
d34 1
a34 2
void k_set_ttl(t)
    int t;
d45 1
a45 2
void k_set_loop(l)
    int l;
d56 1
a56 2
void k_set_if(ifa)
    u_int32_t ifa;
d68 1
a68 3
void k_join(grp, ifa)
    u_int32_t grp;
    u_int32_t ifa;
d82 1
a82 3
void k_leave(grp, ifa)
    u_int32_t grp;
    u_int32_t ifa;
d96 1
a96 1
void k_init_dvmrp()
d111 1
a111 1
void k_stop_dvmrp()
d119 1
a119 3
void k_add_vif(vifi, v)
    vifi_t vifi;
    struct uvif *v;
d136 1
a136 2
void k_del_vif(vifi)
    vifi_t vifi;
d147 1
a147 3
void k_add_rg(origin, g)
    u_int32_t origin;
    struct gtable *g;
d179 1
a179 3
int k_del_rg(origin, g)
    u_int32_t origin;
    struct gtable *g;
d209 1
a209 1
int k_get_version()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: kern.c,v 1.3 1995/10/09 03:51:43 thorpej Exp $	*/
d160 1
a160 1
    u_long origin;
d164 1
a164 1
    int i;
d166 3
d181 4
a184 1
		   (char *)&mc, sizeof(mc)) < 0)
d186 1
d194 1
a194 1
    u_long origin;
d198 1
a198 1
    int retval, i;
d200 3
d212 4
a215 1
		   (char *)&mc, sizeof(mc))) < 0)
d217 1
d227 3
d239 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
