head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.16
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.12
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.40
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.38
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.36
	OPENBSD_5_0:1.5.0.34
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.32
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.30
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.04.21.06.42.43;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.02.20.43.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.03.14.58.23;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.01.03.45.53;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.01.45.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.46;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.46;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@deregister. no binary change.
@
text
@/*	$NetBSD: inet.c,v 1.4 1995/12/10 10:07:03 mycroft Exp $	*/

/*
 * The mrouted program is covered by the license in the accompanying file
 * named "LICENSE".  Use of the mrouted program represents acceptance of
 * the terms and conditions listed in that file.
 *
 * The mrouted program is COPYRIGHT 1989 by The Board of Trustees of
 * Leland Stanford Junior University.
 */


#include "defs.h"


/*
 * Exported variables.
 */
#define SNAMLEN		19
char s1[SNAMLEN];	/* buffers to hold the string representations  */
char s2[SNAMLEN];	/* of IP addresses, to be passed to inet_fmt() */
char s3[SNAMLEN];	/* or inet_fmts().                             */
char s4[SNAMLEN];


/*
 * Verify that a given IP address is credible as a host address.
 * (Without a mask, cannot detect addresses of the form {subnet,0} or
 * {subnet,-1}.)
 */
int
inet_valid_host(u_int32_t naddr)
{
    u_int32_t addr;

    addr = ntohl(naddr);

    return (!(IN_MULTICAST(addr) ||
	      IN_BADCLASS (addr) ||
	      (addr & 0xff000000) == 0));
}

/*
 * Verify that a given netmask is plausible;
 * make sure that it is a series of 1's followed by
 * a series of 0's with no discontiguous 1's.
 */
int
inet_valid_mask(u_int32_t mask)
{
    if (~(((mask & -mask) - 1) | mask) != 0) {
	/* Mask is not contiguous */
	return (FALSE);
    }

    return (TRUE);
}

/*
 * Verify that a given subnet number and mask pair are credible.
 *
 * With CIDR, almost any subnet and mask are credible.  mrouted still
 * can't handle aggregated class A's, so we still check that, but
 * otherwise the only requirements are that the subnet address is
 * within the [ABC] range and that the host bits of the subnet
 * are all 0.
 */
int
inet_valid_subnet(u_int32_t nsubnet, u_int32_t nmask)
{
    u_int32_t subnet, mask;

    subnet = ntohl(nsubnet);
    mask   = ntohl(nmask);

    if ((subnet & mask) != subnet) return (FALSE);

    if (subnet == 0)
	return (mask == 0);

    if (IN_CLASSA(subnet)) {
	if (mask < 0xff000000 ||
	    (subnet & 0xff000000) == 0x7f000000 ||
	    (subnet & 0xff000000) == 0x00000000) return (FALSE);
    }
    else if (IN_CLASSD(subnet) || IN_BADCLASS(subnet)) {
	/* Above Class C address space */
	return (FALSE);
    }
    if (subnet & ~mask) {
	/* Host bits are set in the subnet */
	return (FALSE);
    }
    if (!inet_valid_mask(mask)) {
	/* Netmask is not contiguous */
	return (FALSE);
    }

    return (TRUE);
}


/*
 * Convert an IP address in u_long (network) format into a printable string.
 */
char *
inet_fmt(u_int32_t addr, char *s)
{
    u_char *a;

    a = (u_char *)&addr;
    snprintf(s, SNAMLEN, "%u.%u.%u.%u", a[0], a[1], a[2], a[3]);
    return (s);
}


/*
 * Convert an IP subnet number in u_long (network) format into a printable
 * string including the netmask as a number of bits.
 */
char *
inet_fmts(u_int32_t addr, u_int32_t mask, char *s)
{
    u_char *a, *m;
    int bits;

    if ((addr == 0) && (mask == 0)) {
	snprintf(s, SNAMLEN, "default");
	return (s);
    }
    a = (u_char *)&addr;
    m = (u_char *)&mask;
    bits = 33 - ffs(ntohl(mask));

    if      (m[3] != 0)
	snprintf(s, SNAMLEN, "%u.%u.%u.%u/%d", a[0], a[1], a[2], a[3], bits);
    else if (m[2] != 0)
	snprintf(s, SNAMLEN, "%u.%u.%u/%d",    a[0], a[1], a[2], bits);
    else if (m[1] != 0)
	snprintf(s, SNAMLEN, "%u.%u/%d",       a[0], a[1], bits);
    else
	snprintf(s, SNAMLEN, "%u/%d",          a[0], bits);

    return (s);
}

/*
 * Convert the printable string representation of an IP address into the
 * u_long (network) format.  Return 0xffffffff on error.  (To detect the
 * legal address with that value, you must explicitly compare the string
 * with "255.255.255.255".)
 */
u_int32_t
inet_parse(char *s)
{
    u_int32_t a = 0;
    u_int a0, a1, a2, a3;
    char c;

    if (sscanf(s, "%u.%u.%u.%u%c", &a0, &a1, &a2, &a3, &c) != 4 ||
	a0 > 255 || a1 > 255 || a2 > 255 || a3 > 255)
	return (0xffffffff);

    ((u_char *)&a)[0] = a0;
    ((u_char *)&a)[1] = a1;
    ((u_char *)&a)[2] = a2;
    ((u_char *)&a)[3] = a3;

    return (a);
}


/*
 * inet_cksum extracted from:
 *			P I N G . C
 *
 * Author -
 *	Mike Muuss
 *	U. S. Army Ballistic Research Laboratory
 *	December, 1983
 * Modified at Uc Berkeley
 *
 * (ping.c) Status -
 *	Public Domain.  Distribution Unlimited.
 *
 *			I N _ C K S U M
 *
 * Checksum routine for Internet Protocol family headers (C Version)
 *
 */
int
inet_cksum(u_int16_t *addr, u_int len)
{
	int nleft = (int)len;
	u_int16_t *w = addr;
	u_int16_t answer = 0;
	int32_t sum = 0;

	/*
	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
	 *  we add sequential 16 bit words to it, and at the end, fold
	 *  back all the carry bits from the top 16 bits into the lower
	 *  16 bits.
	 */
	while (nleft > 1)  {
		sum += *w++;
		nleft -= 2;
	}

	/* mop up an odd byte, if necessary */
	if (nleft == 1) {
		*(u_char *) (&answer) = *(u_char *)w ;
		sum += answer;
	}

	/*
	 * add back carry outs from top 16 bits to low 16 bits
	 */
	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
	sum += (sum >> 16);			/* add carry */
	answer = ~sum;				/* truncate to 16 bits */
	return (answer);
}
@


1.5
log
@sprintf killing; millert ok
@
text
@d34 1
a34 1
    register u_int32_t addr;
d71 1
a71 1
    register u_int32_t subnet, mask;
d109 1
a109 1
    register u_char *a;
d124 1
a124 1
    register u_char *a, *m;
d194 2
a195 2
	register int nleft = (int)len;
	register u_int16_t *w = addr;
d197 1
a197 1
	register int32_t sum = 0;
@


1.4
log
@ansi, from cloder
@
text
@d19 5
a23 4
char s1[19];		/* buffers to hold the string representations  */
char s2[19];		/* of IP addresses, to be passed to inet_fmt() */
char s3[19];		/* or inet_fmts().                             */
char s4[19];
d112 1
a112 1
    sprintf(s, "%u.%u.%u.%u", a[0], a[1], a[2], a[3]);
d128 1
a128 1
	sprintf(s, "default");
d135 8
a142 5
    if      (m[3] != 0) sprintf(s, "%u.%u.%u.%u/%d", a[0], a[1], a[2], a[3],
						bits);
    else if (m[2] != 0) sprintf(s, "%u.%u.%u/%d",    a[0], a[1], a[2], bits);
    else if (m[1] != 0) sprintf(s, "%u.%u/%d",       a[0], a[1], bits);
    else                sprintf(s, "%u/%d",          a[0], bits);
@


1.3
log
@u_short cleansing
@
text
@d31 1
a31 2
inet_valid_host(naddr)
    u_int32_t naddr;
d48 1
a48 2
inet_valid_mask(mask)
    u_int32_t mask;
d68 1
a68 2
inet_valid_subnet(nsubnet, nmask)
    u_int32_t nsubnet, nmask;
d106 1
a106 3
inet_fmt(addr, s)
    u_int32_t addr;
    char *s;
d121 1
a121 3
inet_fmts(addr, mask, s)
    u_int32_t addr, mask;
    char *s;
d150 1
a150 2
inet_parse(s)
    char *s;
d188 1
a188 3
inet_cksum(addr, len)
	u_int16_t *addr;
	u_int len;
@


1.2
log
@from netbsd; update to mrouted 3.8
@
text
@d197 1
a197 1
	u_short *addr;
d201 3
a203 3
	register u_short *w = addr;
	u_short answer = 0;
	register int sum = 0;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: inet.c,v 1.3 1995/10/09 03:51:42 thorpej Exp $	*/
d30 2
a31 1
int inet_valid_host(naddr)
d43 16
d69 2
a70 1
int inet_valid_subnet(nsubnet, nmask)
d80 2
a81 2
    if (subnet == 0 && mask == 0)
	return (TRUE);
d85 2
a86 1
	   (subnet & 0xff000000) == 0x7f000000) return (FALSE);
d92 1
a92 1
    else if (subnet & ~mask) {
d96 4
d108 2
a109 1
char *inet_fmt(addr, s)
d125 2
a126 1
char *inet_fmts(addr, mask, s)
d156 2
a157 1
u_int32_t inet_parse(s)
d195 2
a196 1
int inet_cksum(addr, len)
d211 1
a211 1
	while( nleft > 1 )  {
d217 1
a217 1
	if( nleft == 1 ) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
