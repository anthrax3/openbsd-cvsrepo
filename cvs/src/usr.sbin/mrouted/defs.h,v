head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.14
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.12
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.8
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.30
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.28
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.26
	OPENBSD_5_0:1.11.0.24
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.22
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.20
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.16
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.18
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.14
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.12
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.10
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.01.16.06.40.18;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	Uu5nFG3wCl0LACBb;

1.15
date	2014.11.26.18.34.52;	author millert;	state Exp;
branches;
next	1.14;
commitid	9QOFSShUOtA0kQLF;

1.14
date	2014.10.25.03.23.49;	author lteo;	state Exp;
branches;
next	1.13;
commitid	2uw1UTO4k6erpWzK;

1.13
date	2014.07.11.14.39.28;	author florian;	state Exp;
branches;
next	1.12;
commitid	H7WAgQSEMdYUrzyG;

1.12
date	2013.04.21.00.24.42;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.09.14.14.06;	author martin;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.15.14.30.56;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.26.01.17.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.26.19.47.09;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.03.15.14.27;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.01.03.45.53;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.19.19.39.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.17.19.42.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.28.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.01.45.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@/*	$NetBSD: defs.h,v 1.6 1995/12/10 10:06:59 mycroft Exp $	*/

/*
 * The mrouted program is covered by the license in the accompanying file
 * named "LICENSE".  Use of the mrouted program represents acceptance of
 * the terms and conditions listed in that file.
 *
 * The mrouted program is COPYRIGHT 1989 by The Board of Trustees of
 * Leland Stanford Junior University.
 */


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype.h>
#include <errno.h>
#include <syslog.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#ifdef SYSV
#include <sys/sockio.h>
#endif
#include <sys/time.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/igmp.h>
#include <netinet/ip_mroute.h>
#ifdef RSRR
#include <sys/un.h>
#endif /* RSRR */

typedef void (*cfunc_t)(void *);
typedef void (*ihfunc_t)(int);

#include "dvmrp.h"
#include "vif.h"
#include "route.h"
#include "prune.h"
#include "pathnames.h"
#ifdef RSRR
#include "rsrr.h"
#include "rsrr_var.h"
#endif /* RSRR */

/*
 * Miscellaneous constants and macros.
 */
#define FALSE		0
#define TRUE		1

#define EQUAL(s1, s2)	(strcmp((s1), (s2)) == 0)

#define TIMER_INTERVAL	ROUTE_MAX_REPORT_DELAY

#define VENDOR_CODE	1   /* Get a new vendor code if you make significant
			     * changes to mrouted. */

#define PROTOCOL_VERSION 3  /* increment when packet format/content changes */

#define MROUTED_VERSION  8  /* increment on local changes or bug fixes, */
			    /* reset to 0 whenever PROTOCOL_VERSION increments */

#define MROUTED_LEVEL  ((MROUTED_VERSION << 8) | PROTOCOL_VERSION | \
			((NF_PRUNE | NF_GENID | NF_MTRACE) << 16) | \
			(VENDOR_CODE << 24))
			    /* for IGMP 'group' field of DVMRP messages */

#define LEAF_FLAGS	(( vifs_with_neighbors == 1 ) ? 0x010000 : 0)
			    /* more for IGMP 'group' field of DVMRP messages */
#define	DEL_RTE_GROUP		0
#define	DEL_ALL_ROUTES		1
			    /* for Deleting kernel table entries */

#define JAN_1970	2208988800UL	/* 1970 - 1900 in seconds */

#ifdef RSRR
#define BIT_ZERO(X)      ((X) = 0)
#define BIT_SET(X,n)     ((X) |= 1 << (n))
#define BIT_CLR(X,n)     ((X) &= ~(1 << (n)))
#define BIT_TST(X,n)     ((X) & 1 << (n))
#endif /* RSRR */

#ifdef SYSV
#define bcopy(a, b, c)	memcpy(b, a, c)
#define bzero(s, n)	memset((s), 0, (n))
#define signal(s,f)	sigset(s,f)
#endif

/*
 * External declarations for global variables and functions.
 */
#define RECV_BUF_SIZE 8192
extern char		*recv_buf;
extern char		*send_buf;
extern int		igmp_socket;
#ifdef RSRR
extern int              rsrr_socket;
#endif /* RSRR */
extern u_int32_t	allhosts_group;
extern u_int32_t	allrtrs_group;
extern u_int32_t	dvmrp_group;
extern u_int32_t	dvmrp_genid;

#define DEFAULT_DEBUG  2	/* default if "-d" given without value */

extern int		debug;
extern u_char		pruning;

extern int		routes_changed;
extern int		delay_change_reports;
extern unsigned		nroutes;

extern struct uvif	uvifs[MAXVIFS];
extern vifi_t		numvifs;
extern int		vifs_down;
extern int		udp_socket;
extern int		vifs_with_neighbors;

extern char		s1[];
extern char		s2[];
extern char		s3[];
extern char		s4[];

#ifdef OLD_KERNEL
#define	MRT_INIT	DVMRP_INIT
#define	MRT_DONE	DVMRP_DONE
#define	MRT_ADD_VIF	DVMRP_ADD_VIF
#define	MRT_DEL_VIF	DVMRP_DEL_VIF
#define	MRT_ADD_MFC	DVMRP_ADD_MFC
#define	MRT_DEL_MFC	DVMRP_DEL_MFC

#define	IGMP_PIM	0x14
#endif

/* main.c */
extern void		logit(int, int, char *, ...);
extern int		register_input_handler(int fd, ihfunc_t func);

/* igmp.c */
extern void		init_igmp(void);
extern void		accept_igmp(int recvlen);
extern void		send_igmp(u_int32_t src, u_int32_t dst, int type,
			    int code, u_int32_t group, int datalen);

/* callout.c */
extern void		callout_init(void);
extern void		age_callout_queue(void);
extern int		timer_setTimer(int delay, cfunc_t action, char *data);
extern void		timer_clearTimer(int timer_id);

/* route.c */
extern void		init_routes(void);
extern void		start_route_updates(void);
extern void		update_route(u_int32_t origin, u_int32_t mask,
			    u_int metric, u_int32_t src, vifi_t vifi);
extern void		age_routes(void);
extern void		expire_all_routes(void);
extern void		free_all_routes(void);
extern void		accept_probe(u_int32_t src, u_int32_t dst, char *p,
			    int datalen, u_int32_t level);
extern void		accept_report(u_int32_t src, u_int32_t dst, char *p,
			    int datalen, u_int32_t level);
extern struct rtentry *	determine_route(u_int32_t src);
extern void		report(int which_routes, vifi_t vifi, u_int32_t dst);
extern void		report_to_all_neighbors(int which_routes);
extern int		report_next_chunk(void);
extern void		add_vif_to_routes(vifi_t vifi);
extern void		delete_vif_from_routes(vifi_t vifi);
extern void		delete_neighbor_from_routes(u_int32_t addr,
			    vifi_t vifi);
extern void		dump_routes(FILE *fp);
extern void		start_route_updates(void);

/* vif.c */
extern void		init_vifs(void);
extern void		check_vif_state(void);
extern vifi_t		find_vif(u_int32_t src, u_int32_t dst);
extern void		age_vifs(void);
extern void		dump_vifs(FILE *fp);
extern void		stop_all_vifs(void);
extern struct listaddr *neighbor_info(vifi_t vifi, u_int32_t addr);
extern void		accept_group_report(u_int32_t src, u_int32_t dst,
			    u_int32_t group, int r_type);
extern void		query_groups(void);
extern void		probe_for_neighbors(void);
extern int		update_neighbor(vifi_t vifi, u_int32_t addr,
			    int msgtype, char *p, int datalen, u_int32_t level);
extern void		accept_neighbor_request(u_int32_t src, u_int32_t dst);
extern void		accept_neighbor_request2(u_int32_t src, u_int32_t dst);
extern void		accept_neighbors(u_int32_t src, u_int32_t dst,
			    u_char *p, int datalen, u_int32_t level);
extern void		accept_neighbors2(u_int32_t src, u_int32_t dst,
			    u_char *p, int datalen, u_int32_t level);
extern void		accept_leave_message(u_int32_t src, u_int32_t dst,
			    u_int32_t group);
extern void		accept_membership_query(u_int32_t src, u_int32_t dst,
			    u_int32_t group, int tmo);
extern void		init_installvifs(void);

/* config.c */
extern void		config_vifs_from_kernel(void);

/* cfparse.y */
extern void		config_vifs_from_file(void);

/* inet.c */
extern int		inet_valid_host(u_int32_t naddr);
extern int		inet_valid_subnet(u_int32_t nsubnet, u_int32_t nmask);
extern char *		inet_fmt(u_int32_t addr, char *s);
extern char *		inet_fmts(u_int32_t addr, u_int32_t mask, char *s);
extern u_int32_t	inet_parse(char *s);
extern int		inet_cksum(u_int16_t *addr, u_int len);
extern int		inet_valid_host(u_int32_t naddr);
extern int		inet_valid_mask(u_int32_t mask);

/* prune.c */
extern unsigned		kroutes;
extern void		add_table_entry(u_int32_t origin, u_int32_t mcastgrp);
extern void		del_table_entry(struct rtentry *r,
			    u_int32_t mcastgrp, u_int del_flag);
extern void		update_table_entry(struct rtentry *r);
extern void		init_ktable(void);
extern void		accept_prune(u_int32_t src, u_int32_t dst, char *p,
			    int datalen);
extern void		steal_sources(struct rtentry *rt);
extern void		reset_neighbor_state(vifi_t vifi, u_int32_t addr);
extern int		grplst_mem(vifi_t vifi, u_int32_t mcastgrp);
extern int		scoped_addr(vifi_t vifi, u_int32_t addr);
extern void		free_all_prunes(void);
extern void		age_table_entry(void);
extern void		dump_cache(FILE *fp2);
extern void		update_lclgrp(vifi_t vifi, u_int32_t mcastgrp);
extern void		delete_lclgrp(vifi_t vifi, u_int32_t mcastgrp);
extern void		chkgrp_graft(vifi_t vifi, u_int32_t mcastgrp);
extern void		accept_graft(u_int32_t src, u_int32_t dst, char *p,
			    int datalen);
extern void		accept_g_ack(u_int32_t src, u_int32_t dst, char *p,
			    int datalen);
/* u_int is promoted u_char */
extern void		accept_mtrace(u_int32_t src, u_int32_t dst,
			    u_int32_t group, char *data, u_int no, int datalen);
extern void		accept_info_request(u_int32_t src, u_int32_t dst,
			    u_char *p, int datalen);
extern void		accept_info_reply(u_int32_t src, u_int32_t dst,
			    u_char *p, int datalen);

/* kern.c */
extern void		k_set_rcvbuf(int bufsize);
extern void		k_hdr_include(int bool);
extern void		k_set_ttl(int t);
extern void		k_set_loop(int l);
extern void		k_set_if(u_int32_t ifa);
extern void		k_join(u_int32_t grp, u_int32_t ifa);
extern void		k_leave(u_int32_t grp, u_int32_t ifa);
extern void		k_init_dvmrp(void);
extern void		k_stop_dvmrp(void);
extern void		k_add_vif(vifi_t vifi, struct uvif *v);
extern void		k_del_vif(vifi_t vifi);
extern void		k_add_rg(u_int32_t origin, struct gtable *g);
extern int		k_del_rg(u_int32_t origin, struct gtable *g);
extern int		k_get_version(void);

#ifdef RSRR
/* prune.c */
extern struct gtable	*kernel_table;
extern struct gtable	*gtp;
extern int		find_src_grp(u_int32_t src, u_int32_t mask,
			    u_int32_t grp);

/* rsrr.c */
extern void		rsrr_init(void);
extern void		rsrr_read(int f);
extern void		rsrr_clean(void);
extern void		rsrr_cache_send(struct gtable *gt, int notify);
extern void		rsrr_cache_clean(struct gtable *gt);
#endif /* RSRR */
@


1.15
log
@Prefer setvbuf() to setlinebuf() for portability; ok deraadt@@
@
text
@a20 1
#include <sys/param.h>
a127 6

#if !(defined(BSD) && (BSD >= 199103))
extern int		errno;
extern int		sys_nerr;
extern char *		sys_errlist[];
#endif
@


1.14
log
@Remove unnecessary netinet/in_systm.h include.

ok millert@@
@
text
@a91 1
#define setlinebuf(s)	setvbuf(s, NULL, _IOLBF, 0)
@


1.13
log
@missing prototypes
OK tedu@@ but don't ask him questions about mrouted, ever
@
text
@a30 1
#include <netinet/in_systm.h>
@


1.12
log
@convert select to poll, since the select code had descriptor limits
ok tedu
@
text
@d212 1
d227 2
@


1.11
log
@whever -> whenever in comments

ok jmc@@
@
text
@d40 1
a40 1
typedef void (*ihfunc_t)(int, fd_set *);
d283 1
a283 1
extern void		rsrr_read(int f, fd_set *rfd);
@


1.10
log
@remove SNMP code from mrouted(8) because it is broken and it is
higly unlike that anyone will use this.

ok otto@@ millert@@ henning@@
@
text
@d68 1
a68 1
			    /* reset to 0 whever PROTOCOL_VERSION increments */
@


1.9
log
@Replace log() with logit() since ISO C reserves log() for the math
library and gcc 3.x will complain.  Replacement name taken from NetBSD.
espie@@ OK.
@
text
@a273 7
#ifdef SNMP
/* prune.c */
extern struct rtentry * snmp_find_route();
extern struct gtable *	find_grp();
extern struct stable *	find_grp_src();
#endif

@


1.8
log
@strict proto cleanups
@
text
@d150 1
a150 1
extern void		log(int, int, char *, ...);
@


1.7
log
@spaces
@
text
@d253 4
@


1.6
log
@u_short cleansing
@
text
@d92 1
a92 1
#define bzero(s, n) 	memset((s), 0, (n))
d230 1
a230 1
extern void 		del_table_entry(struct rtentry *r,
d234 1
a234 1
extern void 		accept_prune(u_int32_t src, u_int32_t dst, char *p,
d241 1
a241 1
extern void 		age_table_entry(void);
d243 1
a243 1
extern void 		update_lclgrp(vifi_t vifi, u_int32_t mcastgrp);
d248 1
a248 1
extern void 		accept_g_ack(u_int32_t src, u_int32_t dst, char *p,
@


1.5
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d225 1
a225 1
extern int		inet_cksum(u_short *addr, u_int len);
@


1.4
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@a80 2
/* obnoxious gcc gives an extraneous warning about this constant... */
#if defined(__STDC__) || defined(__GNUC__)
a81 4
#else
#define JAN_1970	2208988800L	/* 1970 - 1900 in seconds */
#define const		/**/
#endif
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@a38 8
#ifndef __P
#ifdef __STDC__
#define __P(x)	x
#else
#define __P(x)	()
#endif
#endif

d162 2
a163 3
extern void		send_igmp __P((u_int32_t src, u_int32_t dst, int type,
						int code, u_int32_t group,
						int datalen));
d168 1
a168 2
extern int		timer_setTimer __P((int delay, cfunc_t action,
						char *data));
d174 2
a175 3
extern void		update_route __P((u_int32_t origin, u_int32_t mask,
						u_int metric, u_int32_t src,
						vifi_t vifi));
d179 4
a182 6
extern void		accept_probe __P((u_int32_t src, u_int32_t dst,
						char *p, int datalen,
						u_int32_t level));
extern void		accept_report __P((u_int32_t src, u_int32_t dst,
						char *p, int datalen,
						u_int32_t level));
d184 1
a184 2
extern void		report __P((int which_routes, vifi_t vifi,
						u_int32_t dst));
d189 2
a190 2
extern void		delete_neighbor_from_routes __P((u_int32_t addr,
							vifi_t vifi));
d202 2
a203 2
extern void		accept_group_report __P((u_int32_t src, u_int32_t dst,
					u_int32_t group, int r_type));
d206 2
a207 3
extern int		update_neighbor __P((vifi_t vifi, u_int32_t addr,
					int msgtype, char *p, int datalen,
					u_int32_t level));
d209 9
a217 10
extern void		accept_neighbor_request2 __P((u_int32_t src,
					u_int32_t dst));
extern void		accept_neighbors __P((u_int32_t src, u_int32_t dst,
					u_char *p, int datalen, u_int32_t level));
extern void		accept_neighbors2 __P((u_int32_t src, u_int32_t dst,
					u_char *p, int datalen, u_int32_t level));
extern void		accept_leave_message __P((u_int32_t src, u_int32_t dst,
					u_int32_t group));
extern void		accept_membership_query __P((u_int32_t src, u_int32_t dst,
					u_int32_t group, int tmo));
d236 2
a237 2
extern void 		del_table_entry __P((struct rtentry *r,
					u_int32_t mcastgrp, u_int del_flag));
d240 2
a241 2
extern void 		accept_prune __P((u_int32_t src, u_int32_t dst, char *p,
					int datalen));
d252 4
a255 4
extern void		accept_graft __P((u_int32_t src, u_int32_t dst, char *p,
					int datalen));
extern void 		accept_g_ack __P((u_int32_t src, u_int32_t dst, char *p,
					int datalen));
d257 2
a258 3
extern void		accept_mtrace __P((u_int32_t src, u_int32_t dst,
					u_int32_t group, char *data, u_int no,
					int datalen));
d287 2
a288 2
extern int		find_src_grp __P((u_int32_t src, u_int32_t mask,
					u_int32_t grp));
@


1.2
log
@from netbsd; update to mrouted 3.8
@
text
@d47 2
a48 2
typedef void (*cfunc_t) __P((void *));
typedef void (*ihfunc_t) __P((int, fd_set *));
d164 2
a165 2
extern void		log __P((int, int, char *, ...));
extern int		register_input_handler __P((int fd, ihfunc_t func));
d168 2
a169 2
extern void		init_igmp __P((void));
extern void		accept_igmp __P((int recvlen));
d175 2
a176 2
extern void		callout_init __P((void));
extern void		age_callout_queue __P((void));
d179 1
a179 1
extern void		timer_clearTimer __P((int timer_id));
d182 2
a183 2
extern void		init_routes __P((void));
extern void		start_route_updates __P((void));
d187 3
a189 3
extern void		age_routes __P((void));
extern void		expire_all_routes __P((void));
extern void		free_all_routes __P((void));
d196 1
a196 1
extern struct rtentry *	determine_route __P((u_int32_t src));
d199 4
a202 4
extern void		report_to_all_neighbors __P((int which_routes));
extern int		report_next_chunk __P((void));
extern void		add_vif_to_routes __P((vifi_t vifi));
extern void		delete_vif_from_routes __P((vifi_t vifi));
d205 2
a206 2
extern void		dump_routes __P((FILE *fp));
extern void		start_route_updates __P((void));
d209 7
a215 7
extern void		init_vifs __P((void));
extern void		check_vif_state __P((void));
extern vifi_t		find_vif __P((u_int32_t src, u_int32_t dst));
extern void		age_vifs __P((void));
extern void		dump_vifs __P((FILE *fp));
extern void		stop_all_vifs __P((void));
extern struct listaddr *neighbor_info __P((vifi_t vifi, u_int32_t addr));
d218 2
a219 2
extern void		query_groups __P((void));
extern void		probe_for_neighbors __P((void));
d223 1
a223 1
extern void		accept_neighbor_request __P((u_int32_t src, u_int32_t dst));
d236 1
a236 1
extern void		config_vifs_from_kernel __P((void));
d239 1
a239 1
extern void		config_vifs_from_file __P((void));
d242 6
a247 6
extern int		inet_valid_host __P((u_int32_t naddr));
extern int		inet_valid_subnet __P((u_int32_t nsubnet, u_int32_t nmask));
extern char *		inet_fmt __P((u_int32_t addr, char *s));
extern char *		inet_fmts __P((u_int32_t addr, u_int32_t mask, char *s));
extern u_int32_t	inet_parse __P((char *s));
extern int		inet_cksum __P((u_short *addr, u_int len));
d251 1
a251 1
extern void		add_table_entry __P((u_int32_t origin, u_int32_t mcastgrp));
d254 2
a255 2
extern void		update_table_entry __P((struct rtentry *r));
extern void		init_ktable __P((void));
d258 10
a267 10
extern void		steal_sources __P((struct rtentry *rt));
extern void		reset_neighbor_state __P((vifi_t vifi, u_int32_t addr));
extern int		grplst_mem __P((vifi_t vifi, u_int32_t mcastgrp));
extern int		scoped_addr __P((vifi_t vifi, u_int32_t addr));
extern void		free_all_prunes __P((void));
extern void 		age_table_entry __P((void));
extern void		dump_cache __P((FILE *fp2));
extern void 		update_lclgrp __P((vifi_t vifi, u_int32_t mcastgrp));
extern void		delete_lclgrp __P((vifi_t vifi, u_int32_t mcastgrp));
extern void		chkgrp_graft __P((vifi_t vifi, u_int32_t mcastgrp));
d278 14
a291 14
extern void		k_set_rcvbuf __P((int bufsize));
extern void		k_hdr_include __P((int bool));
extern void		k_set_ttl __P((int t));
extern void		k_set_loop __P((int l));
extern void		k_set_if __P((u_int32_t ifa));
extern void		k_join __P((u_int32_t grp, u_int32_t ifa));
extern void		k_leave __P((u_int32_t grp, u_int32_t ifa));
extern void		k_init_dvmrp __P((void));
extern void		k_stop_dvmrp __P((void));
extern void		k_add_vif __P((vifi_t vifi, struct uvif *v));
extern void		k_del_vif __P((vifi_t vifi));
extern void		k_add_rg __P((u_int32_t origin, struct gtable *g));
extern int		k_del_rg __P((u_int32_t origin, struct gtable *g));
extern int		k_get_version __P((void));
d295 3
a297 3
extern struct rtentry * snmp_find_route __P(());
extern struct gtable *	find_grp __P(());
extern struct stable *	find_grp_src __P(());
d308 5
a312 5
extern void		rsrr_init __P((void));
extern void		rsrr_read __P((int f, fd_set *rfd));
extern void		rsrr_clean __P((void));
extern void		rsrr_cache_send __P((struct gtable *gt, int notify));
extern void		rsrr_cache_clean __P((struct gtable *gt));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: defs.h,v 1.5 1995/10/09 03:51:38 thorpej Exp $	*/
d13 8
d25 3
a34 5
#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <syslog.h>
#include <signal.h>
d39 11
d57 1
d70 3
d75 1
a75 1
#define MROUTED_VERSION  5  /* increment on local changes or bug fixes, */
d78 3
a80 2
#define MROUTED_LEVEL ( (MROUTED_VERSION << 8) | PROTOCOL_VERSION | \
			((NF_PRUNE | NF_GENID | NF_MTRACE) << 16))
d94 1
d104 7
d114 1
a114 1
#define RECV_BUF_SIZE MAX_IP_PACKET_LEN
d146 5
a150 1
extern void		log();
d152 7
a158 56
extern void		init_igmp();
extern void		accept_igmp();
extern void		send_igmp();

extern void		init_routes();
extern void		start_route_updates();
extern void		update_route();
extern void		age_routes();
extern void		expire_all_routes();
extern void		free_all_routes();

extern void		accept_probe();
extern void		accept_report();
extern void		report();
extern void		report_to_all_neighbors();
extern int		report_next_chunk();
extern void		add_vif_to_routes();
extern void		delete_vif_from_routes();
extern void		delete_neighbor_from_routes();
extern void		dump_routes();

extern void		init_vifs();
extern void		check_vif_state();
extern vifi_t		find_vif();
extern void		age_vifs();
extern void		dump_vifs();
extern void		stop_all_vifs();
extern struct listaddr *neighbor_info();

extern void		accept_group_report();
extern void		query_groups();
extern void		probe_for_neighbors();
extern int		update_neighbor();
extern void		accept_neighbor_request();
extern void		accept_neighbor_request2();
extern void		accept_neighbors();
extern void		accept_neighbors2();

extern void		config_vifs_from_kernel();
extern void		config_vifs_from_file();

extern int		inet_valid_host();
extern int		inet_valid_subnet();
extern char *		inet_fmt();
extern char *		inet_fmts();
extern u_int32_t	inet_parse();
extern int		inet_cksum();

extern struct rtentry *	determine_route();

extern void		init_ktable();
extern void		add_table_entry();
extern void 		del_table_entry();
extern void		update_table_entry();
extern void 		update_lclgrp();
extern void		delete_lclgrp();
d160 90
d251 41
a291 6
extern void 		accept_prune();
extern int		no_entry_exists();
extern int 		rtr_cnt();
extern void		free_all_prunes();
extern void 		age_table_entry();
extern void		dump_cache();
d294 4
a297 3
extern struct rtentry * snmp_find_route();
extern struct gtable *	find_grp();
extern struct stable *	find_grp_src();
a299 6
extern void		chkgrp_graft();
extern void		accept_graft();
extern void 		accept_g_ack();
extern void		accept_mtrace();
extern void		accept_leave_message();
extern void		accept_membership_query();
d301 1
d304 2
a305 4
extern int		find_src_grp();
extern int		grplst_mem();
extern int		scoped_addr();
#endif /* RSRR */
d307 6
a312 27
extern void		k_set_rcvbuf();
extern void		k_hdr_include();
extern void		k_set_ttl();
extern void		k_set_loop();
extern void		k_set_if();
extern void		k_join();
extern void		k_leave();
extern void		k_init_dvmrp();
extern void		k_stop_dvmrp();
extern void		k_add_vif();
extern void		k_del_vif();
extern void		k_add_rg();
extern int		k_del_rg();
extern int		k_get_version();

extern char *		malloc();
extern char *		fgets();
extern FILE *		fopen();

#if !defined(htonl) && !defined(__osf__)
extern u_long		htonl();
extern u_long		ntohl();
#endif

#ifdef RSRR
extern void		rsrr_init();
extern void		rsrr_read();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
