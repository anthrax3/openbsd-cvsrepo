head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.12
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.8
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.14
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.12
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2017.01.23.03.12.25;	author jsg;	state Exp;
branches;
next	1.7;
commitid	KbHOIsRF5sPU4f2g;

1.7
date	2013.10.27.03.06.25;	author aalm;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.20.02.06.39;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.10.14.48.27;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.29.22.15.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.25.09.44.49;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.03.42.12;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.03.19.13.24;	author grange;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Build gpioctl(8) and hotplugd(8) on arm64.

ok patrick@@
@
text
@# $OpenBSD: Makefile,v 1.7 2013/10/27 03:06:25 aalm Exp $

.if ${MACHINE} == "amd64" || ${MACHINE} == "arm64" || \
    ${MACHINE} == "armv7" || ${MACHINE} == "i386" || \
    ${MACHINE} == "macppc"

PROG=	gpioctl
SRCS=	gpioctl.c

CFLAGS+=-Wall
CFLAGS+=-Wstrict-prototypes -Wmissing-prototypes
CFLAGS+=-Wmissing-declarations
CFLAGS+=-Wshadow -Wpointer-arith -Wcast-qual

.else

NOPROG=	yes

.endif

MAN=	gpioctl.8
MANSUBDIR=i386 macppc amd64 armv7

.include <bsd.prog.mk>
@


1.7
log
@enable gpioctl(8) for armv7, and add associated devices on armv7/sunxi.

ok jasper@@, patrick@@, rapha@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2010/07/20 02:06:39 deraadt Exp $
d3 3
a5 2
.if	(${MACHINE} == "i386" || ${MACHINE} == "macppc" || \
	 ${MACHINE} == "amd64" || ${MACHINE} == "armv7")
@


1.6
log
@do not use gcc -W options which you do not understand
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2009/08/10 14:48:27 jsg Exp $
d3 2
a4 1
.if ${MACHINE} == "i386" || ${MACHINE} == "macppc" || ${MACHINE} == "amd64"
d21 1
a21 1
MANSUBDIR=i386 macppc amd64
@


1.5
log
@build on amd64 also
ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2006/11/29 22:15:33 deraadt Exp $
d10 1
a10 1
CFLAGS+=-Wmissing-declarations -Wredundant-decls
@


1.4
log
@for macppc too; from ghz@@darkdata.org
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2006/07/25 09:44:49 henning Exp $
d3 1
a3 1
.if ${MACHINE} == "i386" || ${MACHINE} == "macppc"
d20 1
a20 1
MANSUBDIR=i386 macppc
@


1.3
log
@amazing how far a typo of mine (CFLAGS vs CLFAGS) from early 2004 spread
(and how long it went unnoticed)
From: Alexey Dobriyan <adobriyan@@gmail.com>
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2005/11/16 03:42:12 deraadt Exp $
d20 1
a20 1
MANSUBDIR=i386
@


1.2
log
@gpioctl can work on macppc too
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1 2004/06/03 19:13:24 grange Exp $
d10 1
a10 1
CLFAGS+=-Wmissing-declarations -Wredundant-decls
@


1.1
log
@gpioctl -- program to control GPIO devices.
The gpioctl program allows to manipulate GPIO devices pins

Quick start for the Soekris net4801 users:
# gpioctl -c 20 out pp
# gpioctl 20 1
This will turn on the red error led.
If you want to use JP5 I/O pins, just use the /dev/gpio1 device.

Quick start for the PC Engines WRAP.1C users:
# gpioctl 40
This will read the state of the button (0 means pressed).

# gpioctl -c 2 pp out
This will turn the first led on, to turn off write 1 to the pin,
it's reversed. For the second and the third leds use pins 3 and 18.

ok deraadt@@
@
text
@d1 1
a1 1
# $OpenBSD$
d3 1
a3 1
.if ${MACHINE} == "i386"
@

