head	1.24;
access;
symbols
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.4
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.10
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.6
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.4
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.6
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.4
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.2
	OPENBSD_5_0:1.19.0.12
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.10
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.8
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.4
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@.\" @;


1.24
date	2015.09.11.21.19.34;	author schwarze;	state Exp;
branches;
next	1.23;
commitid	MY11b8ZDVIgTw2Ta;

1.23
date	2013.11.20.22.34.13;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2013.07.16.11.13.33;	author schwarze;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.04.07.19.13;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.03.20.24.51;	author matthieu;	state Exp;
branches;
next	1.19;

1.19
date	2008.12.05.15.45.53;	author stevesk;	state Exp;
branches;
next	1.18;

1.18
date	2008.12.03.20.40.56;	author stevesk;	state Exp;
branches;
next	1.17;

1.17
date	2008.12.03.16.26.43;	author stevesk;	state Exp;
branches;
next	1.16;

1.16
date	2008.11.29.09.19.25;	author mbalmer;	state Exp;
branches;
next	1.15;

1.15
date	2008.11.26.14.56.10;	author mbalmer;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.24.15.27.52;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.24.14.11.58;	author mbalmer;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.17.16.55.05;	author mbalmer;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.17.10.19.20;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.17.09.05.23;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.31.19.20.23;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.16.16.40.28;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.16.12.44.49;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.27.10.28.56;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2004.12.02.05.11.40;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.03.15.08.10;	author aaron;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.21.09.24.17;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.04.14.00.00;	author jmc;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.03.19.13.24;	author grange;	state Exp;
branches;
next	;


desc
@@


1.24
log
@add some missing .Cm macros and drop some redundant .Bk while here
@
text
@.\"	$OpenBSD: gpioctl.8,v 1.23 2013/11/20 22:34:13 jmc Exp $
.\"
.\" Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: November 20 2013 $
.Dt GPIOCTL 8
.Os
.Sh NAME
.Nm gpioctl
.Nd control GPIO devices
.Sh SYNOPSIS
.Nm gpioctl
.Op Fl q
.Ar device
.Ar pin
.Op Cm 0 | 1 | 2 | on | off | toggle
.Nm gpioctl
.Op Fl q
.Ar device
.Ar pin
.Cm set
.Op Ar flags
.Op Ar name
.Nm gpioctl
.Op Fl q
.Ar device
.Ar pin
.Cm unset
.Nm gpioctl
.Op Fl q
.Ar device
.Cm attach
.Ar device
.Ar offset
.Ar mask
.Op Ar flag
.Nm gpioctl
.Op Fl q
.Ar device
.Cm detach
.Ar device
.Sh DESCRIPTION
The
.Nm
program allows manipulation of GPIO
(General Purpose Input/Output) device pins.
Such devices can be either part of the chipset or embedded CPU,
or a separate chip.
The usual way of using GPIO
is to connect some simple devices such as LEDs and 1-wire thermal sensors
to its pins.
.Pp
Each GPIO device has an associated device file in the
.Pa /dev
directory.
.Ar device
can be specified with or without the
.Pa /dev
prefix.
For example,
.Pa /dev/gpio0
or
.Pa gpio0 .
.Pp
GPIO pins can be either
.Dq read
or
.Dq written
with the values of logical 0 or 1.
If only a
.Ar pin
number is specified on the command line, the pin state will be read
from the GPIO controller and displayed.
To write to a pin, a value must be specified after the
.Ar pin
number.
Values can be either
.Cm 0
or
.Cm 1 .
A value of
.Cm 2
has a special meaning: it
.Dq toggles
the pin, i.e. changes its state to the opposite.
Instead of the numerical values, the word
.Cm on ,
.Cm off ,
or
.Cm toggle
can be used.
.Pp
Only pins that have been configured at securelevel 0, typically during system
startup, are accessible once the securelevel has been raised.
Pins can be given symbolic names for easier use.
Besides using individual pins, device drivers that use GPIO pins can be
attached to a
.Xr gpio 4
device using the
.Nm
command.
.Pp
The following configuration
.Ar flags
are supported by the GPIO framework.
Note that not all the flags can be supported by the particular GPIO controller.
.Pp
.Bl -tag -width Ds -offset indent -compact
.It in
input direction
.It out
output direction
.It inout
bi-directional
.It od
open-drain output
.It pp
push-pull output
.It tri
tri-state (output disabled)
.It pu
internal pull-up enabled
.It pd
internal pull-down enabled
.It iin
invert input
.It iout
invert output
.El
.Pp
When attaching an I2C device,
if the
.Ar flag
argument is set to 0x01,
the order of the SDA and SCL signals is reversed
(see
.Xr gpioiic 4 ) .
.Pp
When executed with only the
.Xr gpio 4
device name as argument,
.Nm
reads information about the
.Tn GPIO
device and displays it.
At securelevel 0 the number of physically available pins is displayed,
at higher securelevels the number of configured
.Pq Cm set
pins is displayed.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl q
Operate quietly i.e. nothing is printed to stdout.
.El
.Sh FILES
.Bl -tag -width "/dev/gpiou" -compact
.It /dev/gpio Ns Ar u
GPIO device unit
.Ar u
file.
.El
.Sh EXAMPLES
Configure pin 20 to have push-pull output:
.Pp
.Dl # gpioctl gpio0 20 set out pp
.Pp
Write logical 1 to pin 20:
.Pp
.Dl # gpioctl gpio0 20 1
.Pp
Attach a
.Xr onewire 4
bus on a
.Xr gpioow 4
device on pin 4:
.Pp
.Dl # gpioctl gpio0 attach gpioow 4 0x01
.Pp
Detach the gpioow0 device:
.Pp
.Dl # gpioctl gpio0 detach gpioow0
.Pp
Configure pin 5 as output and name it error_led:
.Pp
.Dl # gpioctl gpio0 5 set out error_led
.Pp
Toggle the error_led:
.Pp
.Dl # gpioctl gpio0 error_led 2
.Sh SEE ALSO
.Xr gpio 4
.Sh HISTORY
The
.Nm
command first appeared in
.Ox 3.6 .
.Sh AUTHORS
.An -nosplit
The
.Nm
program was written by
.An Alexander Yurchenko Aq Mt grange@@openbsd.org .
Device attachment was added by
.An Marc Balmer Aq Mt mbalmer@@openbsd.org .
@


1.23
log
@+.An -nosplit
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.22 2013/07/16 11:13:33 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: July 16 2013 $
d28 1
a28 1
.Op Ar 0 | 1 | 2 | on | off | toggle
d33 1
a33 1
set
d40 1
a40 1
unset
d44 1
a44 1
attach
d52 1
a52 1
detach
d89 7
a95 2
Values can be either 0 or 1.
A value of 2 has a special meaning: it
d99 2
a100 2
.Ar on ,
.Ar off ,
d102 1
a102 1
.Ar toggle
d159 3
a161 1
at higher securelevels the number of configured (set) pins is displayed.
@


1.22
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.21 2011/10/04 07:19:13 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: October 4 2011 $
d204 1
@


1.21
log
@- sync usage() and SYNOPSIS
- document "flag", for I2C devices
- "pin" is not optional

ok matthieu
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.20 2011/10/03 20:24:51 matthieu Exp $
d17 1
a17 1
.Dd $Mdocdate: October 3 2011 $
d207 1
a207 1
.An Alexander Yurchenko Aq grange@@openbsd.org .
d209 1
a209 1
.An Marc Balmer Aq mbalmer@@openbsd.org .
@


1.20
log
@Add a 'flag' locator to gpioiic(4), and define a first flag
value to swap the SDA and SCL pins assigment during attach.
Mostly from work with mbalmer@@NetBSD.
ok miod@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.19 2008/12/05 15:45:53 stevesk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 5 2008 $
d27 2
a28 5
attach
.Ar device
.Ar offset
.Ar mask
.Op Ar flag
d32 4
a35 2
detach
.Ar device
d40 1
a40 1
.Op Ar 0 | 1 | 2
d44 5
a48 2
.Ar pin
.Op Ar on | off | toggle
d52 1
a52 6
.Ar pin
set
.Op Ar flags
.Op Ar name
.Nm gpioctl
.Op Fl q
a53 2
.Ar pin
unset
d112 2
a113 1
are supported by the GPIO framework:
d138 7
a144 1
Note that not all the flags can be supported by the particular GPIO controller.
@


1.19
log
@need set argument now in this example; ok mbalmer@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.18 2008/12/03 20:40:56 stevesk Exp $
d17 1
a17 1
.Dd $Mdocdate: December 3 2008 $
d31 1
@


1.18
log
@clarify GPIO device specification. with input from jmc; ok mbalmer@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.17 2008/12/03 16:26:43 stevesk Exp $
d168 1
a168 1
.Dl # gpioctl gpio0 20 out pp
@


1.17
log
@there is no longer a default GPIO device; ok mbalmer@@ jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.16 2008/11/29 09:19:25 mbalmer Exp $
d17 1
a17 1
.Dd $Mdocdate: November 29 2008 $
d72 8
@


1.16
log
@Allow the words "on", "off", or "toggle" to be used instead of the
numerical values when writing to a pin; fix an error message.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.15 2008/11/26 14:56:10 mbalmer Exp $
d17 1
a17 1
.Dd $Mdocdate: November 26 2008 $
a71 6
By default
.Nm
uses
.Pa /dev/gpio0 ,
which corresponds to the first found
GPIO device in the system.
@


1.15
log
@Use the new gpio(4) semantics and change the command line syntax to a
more readable and straightforward format.  Note that there is no longer
a default GPIO device, but it has to be sepcified on the command line
always (and as Theo mentioned, newfs also does not default to /dev/sd0a...)

You must do a 'make includesi' in /usr/src before building this command or
before your next system build.

ok uwe@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.14 2008/11/24 15:27:52 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate: November 24 2008 $
d45 5
d95 6
@


1.14
log
@- tweak previous
- kill .Tn
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.13 2008/11/24 14:11:58 mbalmer Exp $
d26 14
a39 2
.Op Fl d Ar device
.Op Ar pin
d43 1
a43 2
.Op Fl d Ar device
.Fl c
d45 1
d47 1
d49 4
a52 5
.Fl A Ar device
.Fl o Ar offset
.Fl m Ar mask
.Nm gpioctl
.Fl D Ar device
d91 10
d130 3
a132 1
When executed without any arguments,
d135 4
a138 1
GPIO device and displays it.
a141 45
.It Fl A Ar device
Attach
.Ar device
at this gpiobus.
An
.Fl o Ar offset
(a pin number) and
.Fl m Ar mask
(a binary mask)
must also be specified.
.It Fl c Ar pin
Configure
.Ar pin
with any of the various flags,
as documented above.
The list of supported flags is always displayed when executing
.Nm
with this option.
To change pin flags,
a new flags set separated by spaces must be specified
after the pin number.
.It Fl D Ar device
Detach
.Ar device
from this gpiobus.
Only devices that have been attached using the
.Fl a
option can be detached.
.It Fl d Ar device
If more than one GPIO device is present,
an alternative
.Ar device
file can be specified with the
.Fl d
option in order to access a particular GPIO device.
.It Fl m Ar mask
Specify a binary mask,
.Ar mask ,
for the device being attached
.Pq Fl A .
.It Fl o Ar offset
Specify a pin number,
.Ar offset ,
for the device being attached
.Pq Fl A .
d155 1
a155 1
.Dl # gpioctl -c 20 out pp
d159 1
a159 1
.Dl # gpioctl 20 1
d167 1
a167 1
.Dl # gpioctl -A gpioow -o 4 -m 0x01
d171 9
a179 1
.Dl # gpioctl -D gpioow0
@


1.13
log
@Add and document -A and -D options to attach or detach devices at
runtime to a gpio bus.

ok uwe, drahn
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.12 2007/11/17 16:55:05 mbalmer Exp $
d17 1
a17 1
.Dd $Mdocdate: November 17 2007 $
d36 1
a36 1
.Op Fl A Ar device
d40 1
a40 1
.Op Fl D Ar device
d44 1
a44 2
program allows manipulation of
.Tn GPIO
d46 1
a46 2
Such devices can be either part of the chipset or embedded
.Tn CPU ,
d48 5
a52 8
The usual way of using
.Tn GPIO
is to connect some simple devices such as LEDs, 1-wire thermal sensors,
etc., to its pins.
.Pp
Each
.Tn GPIO
device has an associated device file in the
d60 1
a60 2
.Tn GPIO
device in the system.
d62 1
a62 2
.Tn GPIO
pins can be either
d70 1
a70 3
from the
.Tn GPIO
controller and displayed.
d81 1
a81 3
are supported by the
.Tn GPIO
framework:
d106 1
a106 3
Note that not all the flags can be supported by the particular
.Tn GPIO
controller.
d111 1
a111 2
.Tn GPIO
device and displays it.
d115 10
a135 19
.It Fl d Ar device
If more than one
.Tn GPIO
device is present, an alternative
.Ar device
file can be specified with the
.Fl d
option in order to access a particular
.Tn GPIO
device.
.It Fl A Ar device
attach
.Ar device
at this gpiobus.
You must also specify
.Fl o Ar offset
(a pin number) and
.Fl m Ar mask
(a binary mask).
d137 1
a137 1
detach
d143 17
d179 5
a183 1
Attach a onewire(4) bus on a gpioow(4) device on pin 4:
a203 1

@


1.12
log
@GPIO pins can be programmed to invert input or output on some devices.
Introduce new flags, GPIO_PIN_INVIN and GPIO_PIN_INVOUT, for this.

ok grange
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.11 2007/11/17 10:19:20 jmc Exp $
d35 6
d150 16
d184 8
d204 3
@


1.11
log
@GPIO improvements:

- make "man -k gpio" work
- gpioctl(8) should not try to list all gpio devices (it's why we have man -k)
- gpio devices should have "GPIO" in their .Nd, and cross-reference gpio(4)
and gpioctl(8)

second set of fixes for gpio(4) itself coming from mbalmer...
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.10 2007/11/17 09:05:23 mbalmer Exp $
d105 4
@


1.10
log
@pull-down (GPIO_PIN_PULLDOWN) is a valid flags for some GPIO devices,
e.g. the AMD Geode C5536 GPIO.

ok grange
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.9 2007/05/31 19:20:23 jmc Exp $
d17 1
a17 1
.Dd $Mdocdate$
d159 1
a159 4
.Xr elansc 4 ,
.Xr gpio 4 ,
.Xr gscpcib 4 ,
.Xr nsclpcsio 4
@


1.9
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.8 2005/11/16 16:40:28 deraadt Exp $
d103 2
@


1.8
log
@no need for -h, any illegal option is fine
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.7 2005/11/16 12:44:49 jmc Exp $
d17 1
a17 1
.Dd May 3, 2004
@


1.7
log
@move this page to a standard options list;

requested by deraadt@@
ok grange@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.6 2005/09/27 10:28:56 jmc Exp $
d25 1
a25 1
.Op Fl hq
d30 1
a30 1
.Op Fl hq
a137 2
.It Fl h
Display a usage summary.
@


1.6
log
@tweaks from wiz@@netbsd
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.5 2004/12/02 05:11:40 grange Exp $
a60 13
If more than one
.Tn GPIO
device is present, an alternative device file can be specified with the
.Fl d
option in order to access a particular
.Tn GPIO
device.
.Pp
When executed without any arguments,
.Nm
reads information about the
.Tn GPIO
device and displays it.
d82 3
a84 4
Each pin can be configured with different flags with the
.Fl c
option.
The following configuration flags are supported by the
d88 1
a88 1
.Bl -tag -width XXXXXXX -offset indent -compact
d108 2
a109 1
The list of supported flags is always displayed when executing
d111 8
a118 4
with the
.Fl c
option.
If only a
d120 3
a122 10
number is specified on the command line, the current pin flags will be
displayed.
To change pin flags, a new flags set separated by spaces must be
specified after the
.Ar pin
number.
.Pp
The
.Fl q
option causes
d124 19
a142 4
to operate quietly i.e. nothing is printed to stdout.
The
.Fl h
option displays a usage summary.
@


1.5
log
@Document -q and -h options, noticed by Matt Peterson <matt@@eff.org>.
With a help from jmc@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.4 2004/11/03 15:08:10 aaron Exp $
d65 1
a65 2
option
in order to access a particular
d143 1
a143 1
option displays usage summary.
@


1.4
log
@Fix typo (termal -> thermal).  From bob at cemetery dot homeunix dot org.
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.3 2004/09/21 09:24:17 grange Exp $
d136 9
@


1.3
log
@.Xr elansc(4) here too
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.2 2004/06/04 14:00:00 jmc Exp $
d46 1
a46 1
is to connect some simple devices such as LEDs, 1-wire termal sensors,
@


1.2
log
@various tweaks;
ok grange@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: gpioctl.8,v 1.1 2004/06/03 19:13:24 grange Exp $
d152 1
@


1.1
log
@gpioctl -- program to control GPIO devices.
The gpioctl program allows to manipulate GPIO devices pins

Quick start for the Soekris net4801 users:
# gpioctl -c 20 out pp
# gpioctl 20 1
This will turn on the red error led.
If you want to use JP5 I/O pins, just use the /dev/gpio1 device.

Quick start for the PC Engines WRAP.1C users:
# gpioctl 40
This will read the state of the button (0 means pressed).

# gpioctl -c 2 pp out
This will turn the first led on, to turn off write 1 to the pin,
it's reversed. For the second and the third leds use pins 3 and 18.

ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d28 1
a28 1
.Op Ar 0 | Ar 1 | Ar 2
d38 1
a38 1
program allows to manipulate
d40 1
a40 1
(General Purpose Input/Output) devices pins.
d43 1
a43 1
or the separate chip.
d46 2
a47 2
is to connect some simple devices such as leds, 1-wire termal sensors,
etc to its pins.
d51 1
a51 1
device has associated device file in the
d56 2
a57 2
uses file
.Pa /dev/gpio0
d63 1
a63 1
devices present alternative device file can be specified with the
d66 1
a66 1
in order to access particular
d70 1
a70 1
When executed without any arguments
d72 1
a72 1
program reads information about the
d77 6
a82 3
pins can be either ``read'' or ``written'' with the values of
logical 0 or 1.
If only
d84 1
a84 1
number is specified in the command line pin state will be read
d87 2
a88 2
controller and dispalyed.
To write to a pin a value must be specified after the
d92 3
a94 2
Value of 2 has a special meaning to ``toggle'' the pin, i.e. change its
state to the opposite.
d96 1
a96 1
Each pin can be configured with the different flags with the
d103 1
a103 1
.Bl -tag -width XXXXX -compact
d125 1
a125 1
program with the
d128 1
a128 1
If only
d130 3
a132 3
number is specified in the command line current pin flags will be
dispalyed.
To change pin flags new flags set separated with the spaces must be
d144 1
a144 1
.Li # gpioctl -c 20 out pp
d146 1
a146 1
Configures pin 20 to have push-pull output.
d148 1
a148 1
.Li # gpioctl 20 1
d150 1
a150 1
Writes logical 1 to the pin 20.
@

