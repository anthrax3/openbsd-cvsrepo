head	1.100;
access;
symbols
	OPENBSD_5_6:1.99.0.4
	OPENBSD_5_6_BASE:1.99
	OPENBSD_5_5:1.92.0.6
	OPENBSD_5_5_BASE:1.92
	OPENBSD_5_4:1.92.0.2
	OPENBSD_5_4_BASE:1.92
	OPENBSD_5_3:1.91.0.2
	OPENBSD_5_3_BASE:1.91
	OPENBSD_5_2:1.89.0.2
	OPENBSD_5_2_BASE:1.89
	OPENBSD_5_1_BASE:1.87
	OPENBSD_5_1:1.87.0.2
	OPENBSD_5_0:1.85.0.4
	OPENBSD_5_0_BASE:1.85
	OPENBSD_4_9:1.85.0.2
	OPENBSD_4_9_BASE:1.85
	OPENBSD_4_8:1.67.0.4
	OPENBSD_4_8_BASE:1.67
	OPENBSD_4_7:1.67.0.2
	OPENBSD_4_7_BASE:1.67
	OPENBSD_4_6:1.65.0.4
	OPENBSD_4_6_BASE:1.65
	OPENBSD_4_5:1.62.0.2
	OPENBSD_4_5_BASE:1.62
	OPENBSD_4_4:1.61.0.2
	OPENBSD_4_4_BASE:1.61
	OPENBSD_4_3:1.60.0.2
	OPENBSD_4_3_BASE:1.60
	OPENBSD_4_2:1.59.0.2
	OPENBSD_4_2_BASE:1.59
	OPENBSD_4_1:1.57.0.2
	OPENBSD_4_1_BASE:1.57
	OPENBSD_4_0:1.56.0.2
	OPENBSD_4_0_BASE:1.56
	OPENBSD_3_9:1.52.0.2
	OPENBSD_3_9_BASE:1.52
	OPENBSD_3_8:1.51.0.2
	OPENBSD_3_8_BASE:1.51
	OPENBSD_3_7:1.50.0.2
	OPENBSD_3_7_BASE:1.50
	OPENBSD_3_6:1.47.0.2
	OPENBSD_3_6_BASE:1.47
	OPENBSD_3_5:1.37.0.2
	OPENBSD_3_5_BASE:1.37
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5;
locks; strict;
comment	@.\" @;


1.100
date	2014.08.26.17.47.25;	author jsing;	state dead;
branches;
next	1.99;
commitid	7A7DObXgY4Fni8xJ;

1.99
date	2014.07.22.06.47.13;	author guenther;	state Exp;
branches;
next	1.98;
commitid	uuNt9upGaVBfaRcD;

1.98
date	2014.07.22.06.28.10;	author guenther;	state Exp;
branches;
next	1.97;
commitid	CS4ZG1MxuDX9tHKb;

1.97
date	2014.06.25.06.57.42;	author jmc;	state Exp;
branches;
next	1.96;
commitid	Ofe8melW4UESM5uk;

1.96
date	2014.06.02.17.06.28;	author jsing;	state Exp;
branches;
next	1.95;
commitid	2LtxA4OXsDCfLF3i;

1.95
date	2014.06.02.16.56.49;	author jsing;	state Exp;
branches;
next	1.94;
commitid	8sAVKwHLKPDyW195;

1.94
date	2014.05.18.08.23.27;	author sthen;	state Exp;
branches;
next	1.93;

1.93
date	2014.03.13.10.12.11;	author florian;	state Exp;
branches;
next	1.92;

1.92
date	2013.07.16.11.13.33;	author schwarze;	state Exp;
branches;
next	1.91;

1.91
date	2012.09.26.16.19.44;	author jmc;	state Exp;
branches;
next	1.90;

1.90
date	2012.08.15.19.25.41;	author jmc;	state Exp;
branches;
next	1.89;

1.89
date	2012.07.13.05.48.26;	author jmc;	state Exp;
branches;
next	1.88;

1.88
date	2012.07.12.21.33.12;	author jmc;	state Exp;
branches;
next	1.87;

1.87
date	2011.09.29.17.57.09;	author jmc;	state Exp;
branches;
next	1.86;

1.86
date	2011.09.07.09.30.16;	author jmc;	state Exp;
branches;
next	1.85;

1.85
date	2011.01.20.13.32.19;	author lum;	state Exp;
branches;
next	1.84;

1.84
date	2010.12.12.21.24.24;	author jmc;	state Exp;
branches;
next	1.83;

1.83
date	2010.10.17.13.30.37;	author jmc;	state Exp;
branches;
next	1.82;

1.82
date	2010.10.15.21.05.06;	author jmc;	state Exp;
branches;
next	1.81;

1.81
date	2010.10.15.21.00.05;	author jmc;	state Exp;
branches;
next	1.80;

1.80
date	2010.10.15.18.17.10;	author jmc;	state Exp;
branches;
next	1.79;

1.79
date	2010.10.14.20.41.28;	author jmc;	state Exp;
branches;
next	1.78;

1.78
date	2010.10.14.07.16.31;	author jmc;	state Exp;
branches;
next	1.77;

1.77
date	2010.10.13.19.16.37;	author jmc;	state Exp;
branches;
next	1.76;

1.76
date	2010.10.13.15.38.56;	author jmc;	state Exp;
branches;
next	1.75;

1.75
date	2010.10.12.18.36.03;	author jmc;	state Exp;
branches;
next	1.74;

1.74
date	2010.10.09.18.22.46;	author jmc;	state Exp;
branches;
next	1.73;

1.73
date	2010.10.09.10.03.44;	author jmc;	state Exp;
branches;
next	1.72;

1.72
date	2010.10.08.19.18.41;	author jmc;	state Exp;
branches;
next	1.71;

1.71
date	2010.10.08.17.57.19;	author jmc;	state Exp;
branches;
next	1.70;

1.70
date	2010.10.08.05.41.48;	author jmc;	state Exp;
branches;
next	1.69;

1.69
date	2010.10.08.05.38.24;	author jmc;	state Exp;
branches;
next	1.68;

1.68
date	2010.10.06.13.21.02;	author jmc;	state Exp;
branches;
next	1.67;

1.67
date	2010.02.18.13.39.21;	author schwarze;	state Exp;
branches;
next	1.66;

1.66
date	2009.08.16.09.41.08;	author sobrado;	state Exp;
branches;
next	1.65;

1.65
date	2009.06.25.14.33.50;	author jmc;	state Exp;
branches;
next	1.64;

1.64
date	2009.04.19.07.39.37;	author jmc;	state Exp;
branches;
next	1.63;

1.63
date	2009.04.06.18.57.07;	author jmc;	state Exp;
branches;
next	1.62;

1.62
date	2008.11.03.14.49.23;	author jmc;	state Exp;
branches;
next	1.61;

1.61
date	2008.05.30.19.06.50;	author jmc;	state Exp;
branches;
next	1.60;

1.60
date	2007.12.01.11.05.25;	author jmc;	state Exp;
branches;
next	1.59;

1.59
date	2007.05.31.19.20.26;	author jmc;	state Exp;
branches;
next	1.58;

1.58
date	2007.04.21.20.50.09;	author jmc;	state Exp;
branches;
next	1.57;

1.57
date	2007.02.07.22.19.37;	author jmc;	state Exp;
branches;
next	1.56;

1.56
date	2006.06.27.14.23.52;	author jmc;	state Exp;
branches;
next	1.55;

1.55
date	2006.06.01.10.21.23;	author jmc;	state Exp;
branches;
next	1.54;

1.54
date	2006.05.17.08.55.03;	author jmc;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.14.08.56.25;	author matthieu;	state Exp;
branches;
next	1.52;

1.52
date	2005.11.27.13.12.00;	author jmc;	state Exp;
branches;
next	1.51;

1.51
date	2005.04.29.09.31.05;	author jmc;	state Exp;
branches;
next	1.50;

1.50
date	2004.12.03.01.41.17;	author jmc;	state Exp;
branches;
next	1.49;

1.49
date	2004.09.28.21.16.12;	author jmc;	state Exp;
branches;
next	1.48;

1.48
date	2004.09.23.20.35.40;	author jmc;	state Exp;
branches;
next	1.47;

1.47
date	2004.08.26.21.29.18;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2004.07.23.10.35.44;	author jmc;	state Exp;
branches;
next	1.45;

1.45
date	2004.07.02.16.08.09;	author jmc;	state Exp;
branches;
next	1.44;

1.44
date	2004.07.02.14.56.39;	author jmc;	state Exp;
branches;
next	1.43;

1.43
date	2004.05.27.09.08.41;	author jmc;	state Exp;
branches;
next	1.42;

1.42
date	2004.04.19.12.25.41;	author jmc;	state Exp;
branches;
next	1.41;

1.41
date	2004.04.12.22.14.30;	author jmc;	state Exp;
branches;
next	1.40;

1.40
date	2004.04.08.12.08.27;	author jmc;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.06.13.47.34;	author jmc;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.01.10.34.13;	author djm;	state Exp;
branches;
next	1.37;

1.37
date	2004.02.25.13.43.19;	author jmc;	state Exp;
branches;
next	1.36;

1.36
date	2004.02.18.21.06.40;	author jmc;	state Exp;
branches;
next	1.35;

1.35
date	2004.02.06.13.28.15;	author jmc;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.01.15.45.28;	author jmc;	state Exp;
branches;
next	1.33;

1.33
date	2004.01.28.20.09.23;	author jmc;	state Exp;
branches;
next	1.32;

1.32
date	2004.01.28.19.25.19;	author jmc;	state Exp;
branches;
next	1.31;

1.31
date	2004.01.25.20.27.37;	author jmc;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.23.21.43.09;	author jmc;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.23.14.31.11;	author jmc;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.29.13.44.43;	author jmc;	state Exp;
branches;
next	1.27;

1.27
date	2003.12.21.15.00.41;	author jmc;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.19.14.52.15;	author jmc;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.13.20.10.38;	author jmc;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.26.21.17.17;	author jmc;	state Exp;
branches;
next	1.23;

1.23
date	2003.11.21.15.12.31;	author jmc;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.30.19.12.38;	author jmc;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.30.13.11.40;	author jmc;	state Exp;
branches;
next	1.20;

1.20
date	2003.10.26.15.16.13;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.24.09.41.52;	author jmc;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.22.16.05.06;	author jmc;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.08.08.37.50;	author jmc;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.04.22.38.58;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.02.18.56.35;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2003.08.31.14.03.22;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.30.17.37.44;	author jmc;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.30.17.30.54;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.08.10.13.33;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.16.09.05.58;	author jmc;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.12.12.59.51;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.10.52.57;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.30.12.11.44;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.25.12.43.10;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.22.08.02.03;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.18.12.58.22;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.11.04.22.40;	author david;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.09.06.03.11;	author david;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.05.20.59.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.100
log
@Move openssl(1) from /usr/sbin/openssl to /usr/bin/openssl, since it is not
a system/superuser binary. At the same time, move the source code from its
current lib/libssl/src/apps location to a more appropriate home under
usr.bin/openssl.

ok deraadt@@ miod@@
@
text
@.\" $OpenBSD: openssl.1,v 1.99 2014/07/22 06:47:13 guenther Exp $
.\" ====================================================================
.\" Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\" ====================================================================
.\"
.\" This product includes cryptographic software written by Eric Young
.\" (eay@@cryptsoft.com).  This product includes software written by Tim
.\" Hudson (tjh@@cryptsoft.com).
.\"
.\"
.\" Copyright (C) 1995-1998 Eric Young (eay@@cryptsoft.com)
.\" All rights reserved.
.\"
.\" This package is an SSL implementation written
.\" by Eric Young (eay@@cryptsoft.com).
.\" The implementation was written so as to conform with Netscapes SSL.
.\"
.\" This library is free for commercial and non-commercial use as long as
.\" the following conditions are aheared to.  The following conditions
.\" apply to all code found in this distribution, be it the RC4, RSA,
.\" lhash, DES, etc., code; not just the SSL code.  The SSL documentation
.\" included with this distribution is covered by the same copyright terms
.\" except that the holder is Tim Hudson (tjh@@cryptsoft.com).
.\"
.\" Copyright remains Eric Young's, and as such any Copyright notices in
.\" the code are not to be removed.
.\" If this package is used in a product, Eric Young should be given attribution
.\" as the author of the parts of the library used.
.\" This can be in the form of a textual message at program startup or
.\" in documentation (online or textual) provided with the package.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"    "This product includes cryptographic software written by
.\"     Eric Young (eay@@cryptsoft.com)"
.\"    The word 'cryptographic' can be left out if the rouines from the library
.\"    being used are not cryptographic related :-).
.\" 4. If you include any Windows specific code (or a derivative thereof) from
.\"    the apps directory (application code) you must include an
.\"    acknowledgement:
.\"    "This product includes software written by Tim Hudson
.\"     (tjh@@cryptsoft.com)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" The licence and distribution terms for any publically available version or
.\" derivative of this code cannot be changed.  i.e. this code cannot simply be
.\" copied and put under another distribution licence
.\" [including the GNU Public Licence.]
.\"
.\" OPENSSL
.\"
.Dd $Mdocdate: July 22 2014 $
.Dt OPENSSL 1
.Os
.Sh NAME
.Nm openssl
.Nd OpenSSL command line tool
.Sh SYNOPSIS
.Nm
.Cm command
.Op Ar command_opts
.Op Ar command_args
.Pp
.Nm
.Cm list-standard-commands \*(Ba
.Cm list-message-digest-commands \*(Ba
.Cm list-cipher-commands \*(Ba
.Cm list-cipher-algorithms \*(Ba
.Cm list-message-digest-algorithms \*(Ba
.Cm list-public-key-algorithms
.Pp
.Nm
.Cm no- Ns Ar XXX
.Op Ar arbitrary options
.Sh DESCRIPTION
.Nm OpenSSL
is a cryptography toolkit implementing the Secure Sockets Layer
.Pq SSL v3
and Transport Layer Security
.Pq TLS v1
network protocols and related cryptography standards required by them.
.Pp
The
.Nm
program is a command line tool for using the various
cryptography functions of
.Nm OpenSSL Ns Li 's
.Em crypto
library from the shell.
It can be used for
.Pp
.Bl -bullet -offset indent -compact
.It
Creation and management of private keys, public keys, and parameters
.It
Public key cryptographic operations
.It
Creation of X.509 certificates, CSRs and CRLs
.It
Calculation of Message Digests
.It
Encryption and Decryption with Ciphers
.It
SSL/TLS Client and Server Tests
.It
Handling of S/MIME signed or encrypted mail
.It
Time stamp requests, generation, and verification
.El
.Sh COMMAND SUMMARY
The
.Nm
program provides a rich variety of commands
.Pf ( Cm command
in the
.Sx SYNOPSIS
above),
each of which often has a wealth of options and arguments
.Pf ( Ar command_opts
and
.Ar command_args
in the
.Sx SYNOPSIS ) .
.Pp
The pseudo-commands
.Cm list-standard-commands , list-message-digest-commands ,
and
.Cm list-cipher-commands
output a list
.Pq one entry per line
of the names of all standard commands, message digest commands,
or cipher commands, respectively, that are available in the present
.Nm
utility.
.Pp
The pseudo-commands
.Cm list-cipher-algorithms
and
.Cm list-message-digest-algorithms
list all cipher and message digest names,
one entry per line.
Aliases are listed as:
.Pp
.D1 from =\*(Gt to
.Pp
The pseudo-command
.Cm list-public-key-algorithms
lists all supported public key algorithms.
.Pp
The pseudo-command
.Cm no- Ns Ar XXX
tests whether a command of the
specified name is available.
If no command named
.Ar XXX
exists,
it returns 0
.Pq success
and prints
.Cm no- Ns Ar XXX ;
otherwise it returns 1 and prints
.Ar XXX .
In both cases, the output goes to
.Em stdout
and nothing is printed to
.Em stderr .
Additional command line arguments are always ignored.
Since for each cipher there is a command of the same name,
this provides an easy way for shell scripts to test for the
availability of ciphers in the
.Nm
program.
.Pp
.Sy Note :
.Cm no- Ns Ar XXX
is not able to detect pseudo-commands such as
.Cm quit ,
.Cm list- Ns Ar ... Ns Cm -commands ,
or
.Cm no- Ns Ar XXX
itself.
.Sh STANDARD COMMANDS
.Bl -tag -width "asn1parse"
.It Cm asn1parse
Parse an ASN.1 sequence.
.It Cm ca
Certificate Authority
.Pq CA
management.
.It Cm ciphers
Cipher suite description determination.
.It Cm crl
Certificate Revocation List
.Pq CRL
management.
.It Cm crl2pkcs7
CRL to PKCS#7 conversion.
.It Cm dgst
Message digest calculation.
.It Cm dh
Diffie-Hellman parameter management.
Obsoleted by
.Cm dhparam .
.It Cm dhparam
Generation and management of Diffie-Hellman parameters.
Superseded by
.Cm genpkey
and
.Cm pkeyparam .
.It Cm dsa
DSA data management.
.It Cm dsaparam
DSA parameter generation and management.
Superseded by
.Cm genpkey
and
.Cm pkeyparam .
.It Cm ec
Elliptic curve (EC) key processing.
.It Cm ecparam
EC parameter manipulation and generation.
.It Cm enc
Encoding with ciphers.
.It Cm engine
Engine (loadable module) information and manipulation.
.It Cm errstr
Error number to error string conversion.
.It Cm gendh
Generation of Diffie-Hellman parameters.
Obsoleted by
.Cm dhparam .
.It Cm gendsa
Generation of DSA private key from parameters.
Superseded by
.Cm genpkey
and
.Cm pkey .
.It Cm genpkey
Generation of private keys or parameters.
.It Cm genrsa
Generation of RSA private key.
Superseded by
.Cm genpkey .
.It Cm nseq
Create or examine a Netscape certificate sequence.
.It Cm ocsp
Online Certificate Status Protocol utility.
.It Cm passwd
Generation of hashed passwords.
.It Cm pkcs7
PKCS#7 data management.
.It Cm pkcs8
PKCS#8 data management.
.It Cm pkcs12
PKCS#12 data management.
.It Cm pkey
Public and private key management.
.It Cm pkeyparam
Public key algorithm parameter management.
.It Cm pkeyutl
Public key algorithm cryptographic operation utility.
.It Cm prime
Generate prime numbers or test numbers for primality.
.It Cm rand
Generate pseudo-random bytes.
.It Cm req
PKCS#10 X.509 Certificate Signing Request
.Pq CSR
management.
.It Cm rsa
RSA key management.
.It Cm rsautl
RSA utility for signing, verification, encryption, and decryption.
Superseded by
.Cm pkeyutl .
.It Cm s_client
This implements a generic SSL/TLS client which can establish a transparent
connection to a remote server speaking SSL/TLS.
It's intended for testing purposes only and provides only rudimentary
interface functionality but internally uses mostly all functionality of the
.Nm OpenSSL
.Em ssl
library.
.It Cm s_server
This implements a generic SSL/TLS server which accepts connections from remote
clients speaking SSL/TLS.
It's intended for testing purposes only and provides only rudimentary
interface functionality but internally uses mostly all functionality of the
.Nm OpenSSL
.Em ssl
library.
It provides both an own command line oriented protocol for testing
SSL functions and a simple HTTP response
facility to emulate an SSL/TLS-aware webserver.
.It Cm s_time
SSL connection timer.
.It Cm sess_id
SSL session data management.
.It Cm smime
S/MIME mail processing.
.It Cm speed
Algorithm speed measurement.
.It Cm spkac
SPKAC printing and generating utility.
.It Cm ts
Time stamping authority tool (client/server).
.It Cm verify
X.509 certificate verification.
.It Cm version
.Nm OpenSSL
version information.
.It Cm x509
X.509 certificate data management.
.El
.Sh MESSAGE DIGEST COMMANDS
.Bl -tag -width "asn1parse"
.It Cm md2
MD2 digest.
.It Cm md4
MD4 digest.
.It Cm md5
MD5 digest.
.It Cm ripemd160
RIPEMD-160 digest.
.It Cm sha
SHA digest.
.It Cm sha1
SHA-1 digest.
.El
.Sh ENCODING AND CIPHER COMMANDS
.Bl -tag -width Ds -compact
.It Cm aes-128-cbc | aes-128-ecb | aes-192-cbc | aes-192-ecb
.It Cm aes-256-cbc | aes-256-ecb
AES cipher.
.Pp
.It Cm base64
Base64 encoding.
.Pp
.It Xo
.Cm bf | bf-cbc | bf-cfb |
.Cm bf-ecb | bf-ofb
.Xc
Blowfish cipher.
.Pp
.It Cm cast | cast-cbc
CAST cipher.
.Pp
.It Cm cast5-cbc | cast5-cfb | cast5-ecb | cast5-ofb
CAST5 cipher.
.Pp
.It Xo
.Cm des | des-cbc | des-cfb | des-ecb |
.Cm des-ede | des-ede-cbc
.Xc
.It Cm des-ede-cfb | des-ede-ofb | des-ofb
DES cipher.
.Pp
.It Xo
.Cm des3 | desx | des-ede3 |
.Cm des-ede3-cbc | des-ede3-cfb | des-ede3-ofb
.Xc
Triple DES cipher.
.Pp
.It Xo
.Cm rc2 | rc2-40-cbc | rc2-64-cbc | rc2-cbc |
.Cm rc2-cfb | rc2-ecb | rc2-ofb
.Xc
RC2 cipher.
.Pp
.It Cm rc4 | rc4-40
RC4 cipher.
.El
.Sh PASS PHRASE ARGUMENTS
Several commands accept password arguments, typically using
.Fl passin
and
.Fl passout
for input and output passwords, respectively.
These allow the password to be obtained from a variety of sources.
Both of these options take a single argument whose format is described below.
If no password argument is given and a password is required,
then the user is prompted to enter one:
this will typically be read from the current terminal with echoing turned off.
.Bl -tag -width "fd:number"
.It Ar pass : Ns Ar password
The actual password is
.Ar password .
Since the password is visible to utilities
(like
.Xr ps 1
under
.Ux )
this form should only be used where security is not important.
.It Ar env : Ns Ar var
Obtain the password from the environment variable
.Ar var .
Since the environment of other processes is visible on certain platforms
(e.g.\&
.Xr ps 1
under certain
.Ux
OSes) this option should be used with caution.
.It Ar file : Ns Ar path
The first line of
.Ar path
is the password.
If the same
.Ar path
argument is supplied to
.Fl passin
and
.Fl passout ,
then the first line will be used for the input password and the next line
for the output password.
.Ar path
need not refer to a regular file:
it could, for example, refer to a device or named pipe.
.It Ar fd : Ns Ar number
Read the password from the file descriptor
.Ar number .
This can be used to send the data via a pipe for example.
.It Ar stdin
Read the password from standard input.
.El
.\"
.\" ASN1PARSE
.\"
.Sh ASN1PARSE
.nr nS 1
.Nm "openssl asn1parse"
.Bk -words
.Op Fl i
.Op Fl dlimit Ar number
.Op Fl dump
.Op Fl genconf Ar file
.Op Fl genstr Ar str
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM | TXT
.Op Fl length Ar number
.Op Fl noout
.Op Fl offset Ar number
.Op Fl oid Ar file
.Op Fl out Ar file
.Op Fl strparse Ar offset
.Ek
.nr nS 0
.Pp
The
.Nm asn1parse
command is a diagnostic utility that can parse ASN.1 structures.
It can also be used to extract data from ASN.1 formatted data.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl dlimit Ar number
Dump the first
.Ar number
bytes of unknown data in hex form.
.It Fl dump
Dump unknown data in hex form.
.It Fl genconf Ar file , Fl genstr Ar str
Generate encoded data based on string
.Ar str ,
file
.Ar file ,
or both using
.Xr ASN1_generate_nconf 3
format.
If only
.Ar file
is present then the string is obtained from the default section
using the name
.Dq asn1 .
The encoded data is passed through the ASN1 parser and printed out as
though it came from a file;
the contents can thus be examined and written to a file using the
.Fl out
option.
.It Fl i
Indents the output according to the
.Qq depth
of the structures.
.It Fl in Ar file
The input file; default is standard input.
.It Fl inform Ar DER | PEM | TXT
The input format.
.Ar DER
.Pq Distinguished Encoding Rules
is binary format and
.Ar PEM
.Pq Privacy Enhanced Mail ,
the default, is base64-encoded.
.Ar TXT
is plain text.
.It Fl length Ar number
Number of bytes to parse; default is until end of file.
.It Fl noout
Don't output the parsed version of the input file.
.It Fl offset Ar number
Starting offset to begin parsing; default is start of file.
.It Fl oid Ar file
A file containing additional object identifiers
.Pq OIDs .
The format of this file is described in the
.Sx ASN1PARSE NOTES
section below.
.It Fl out Ar file
Output file to place the DER-encoded data into.
If this option is not present, no encoded data will be output.
This is most useful when combined with the
.Fl strparse
option.
.It Fl strparse Ar offset
Parse the content octets of the ASN.1 object starting at
.Ar offset .
This option can be used multiple times to
.Qq drill down
into a nested structure.
.El
.Sh ASN1PARSE OUTPUT
The output will typically contain lines like this:
.Bd -literal -offset 2n
0:d=0  hl=4 l= 681 cons: SEQUENCE

\&.....

229:d=3  hl=3 l= 141 prim: BIT STRING
373:d=2  hl=3 l= 162 cons: cont [ 3 ]
376:d=3  hl=3 l= 159 cons: SEQUENCE
379:d=4  hl=2 l=  29 cons: SEQUENCE
381:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Subject Key Identifier
386:d=5  hl=2 l=  22 prim: OCTET STRING
410:d=4  hl=2 l= 112 cons: SEQUENCE
412:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Authority Key Identifier
417:d=5  hl=2 l= 105 prim: OCTET STRING
524:d=4  hl=2 l=  12 cons: SEQUENCE

\&.....
.Ed
.Pp
This example is part of a self-signed certificate.
Each line starts with the offset in decimal.
.Cm d=XX
specifies the current depth.
The depth is increased within the scope of any SET or SEQUENCE.
.Cm hl=XX
gives the header length
.Pq tag and length octets
of the current type.
.Cm l=XX
gives the length of the content octets.
.Pp
The
.Fl i
option can be used to make the output more readable.
.Pp
Some knowledge of the ASN.1 structure is needed to interpret the output.
.Pp
In this example, the BIT STRING at offset 229 is the certificate public key.
The content octets of this will contain the public key information.
This can be examined using the option
.Fl strparse Cm 229
to yield:
.Bd -literal
    0:d=0  hl=3 l= 137 cons: SEQUENCE
    3:d=1  hl=3 l= 129 prim: INTEGER           :E5D21E1F5C8D208EA7A2166C7FA
F9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A
9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58
BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9
  135:d=1  hl=2 l=   3 prim: INTEGER           :010001
.Ed
.Sh ASN1PARSE NOTES
If an OID
.Pq object identifier
is not part of
.Nm OpenSSL Ns Li 's
internal table it will be represented in
numerical form
.Pq for example 1.2.3.4 .
The file passed to the
.Fl oid
option allows additional OIDs to be included.
Each line consists of three columns:
the first column is the OID in numerical format and should be followed by
whitespace.
The second column is the
.Qq short name
which is a single word followed by whitespace.
The final column is the rest of the line and is the
.Qq long name .
.Nm asn1parse
displays the long name.
Example:
.Pp
.Dl \&"1.2.3.4	shortname	A long name\&"
.Sh ASN1 EXAMPLES
Parse a file:
.Pp
.Dl $ openssl asn1parse -in file.pem
.Pp
Parse a DER file:
.Pp
.Dl $ openssl asn1parse -inform DER -in file.der
.Sh ASN1PARSE BUGS
There should be options to change the format of output lines.
The output of some ASN.1 types is not well handled
.Pq if at all .
.\"
.\" CA
.\"
.Sh CA
.nr nS 1
.Nm "openssl ca"
.Bk -words
.Op Fl batch
.Op Fl cert Ar file
.Op Fl config Ar file
.Op Fl crl_CA_compromise Ar time
.Op Fl crl_compromise Ar time
.Op Fl crl_hold Ar instruction
.Op Fl crl_reason Ar reason
.Op Fl crldays Ar days
.Op Fl crlexts Ar section
.Op Fl crlhours Ar hours
.Op Fl days Ar arg
.Op Fl enddate Ar date
.Op Fl engine Ar id
.Op Fl extensions Ar section
.Op Fl extfile Ar section
.Op Fl gencrl
.Op Fl in Ar file
.Op Fl infiles
.Op Fl key Ar keyfile
.Op Fl keyfile Ar arg
.Op Fl keyform Ar ENGINE | PEM
.Op Fl md Ar arg
.Op Fl msie_hack
.Op Fl name Ar section
.Op Fl noemailDN
.Op Fl notext
.Op Fl out Ar file
.Op Fl outdir Ar dir
.Op Fl passin Ar arg
.Op Fl policy Ar arg
.Op Fl preserveDN
.Op Fl revoke Ar file
.Op Fl spkac Ar file
.Op Fl ss_cert Ar file
.Op Fl startdate Ar date
.Op Fl status Ar serial
.Op Fl subj Ar arg
.Op Fl updatedb
.Op Fl verbose
.Ek
.nr nS 0
.Pp
The
.Nm ca
command is a minimal CA application.
It can be used to sign certificate requests in a variety of forms
and generate CRLs.
It also maintains a text database of issued certificates and their status.
.Pp
The options descriptions will be divided into each purpose.
.Sh CA OPTIONS
.Bl -tag -width "XXXX"
.It Fl batch
This sets the batch mode.
In this mode no questions will be asked
and all certificates will be certified automatically.
.It Fl cert Ar file
The CA certificate file.
.It Fl config Ar file
Specifies the configuration file to use.
.It Fl days Ar arg
The number of days to certify the certificate for.
.It Fl enddate Ar date
This allows the expiry date to be explicitly set.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN1 UTCTime structure .
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ca
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl extensions Ar section
The section of the configuration file containing certificate extensions
to be added when a certificate is issued (defaults to
.Em x509_extensions
unless the
.Fl extfile
option is used).
If no extension section is present, a V1 certificate is created.
If the extension section is present
.Pq even if it is empty ,
then a V3 certificate is created.
.It Fl extfile Ar file
An additional configuration
.Ar file
to read certificate extensions from
(using the default section unless the
.Fl extensions
option is also used).
.It Fl in Ar file
An input
.Ar file
containing a single certificate request to be signed by the CA.
.It Fl infiles
If present, this should be the last option; all subsequent arguments
are assumed to be the names of files containing certificate requests.
.It Fl key Ar keyfile
The password used to encrypt the private key.
Since on some systems the command line arguments are visible
(e.g.\&
.Ux
with the
.Xr ps 1
utility) this option should be used with caution.
.It Fl keyfile Ar file
The private key to sign requests with.
.It Fl keyform Ar ENGINE | PEM
Private key file format.
.It Fl md Ar alg
The message digest to use.
Possible values include
.Ar md5
and
.Ar sha1 .
This option also applies to CRLs.
.It Fl msie_hack
This is a legacy option to make
.Nm ca
work with very old versions of the IE certificate enrollment control
.Qq certenr3 .
It used UniversalStrings for almost everything.
Since the old control has various security bugs,
its use is strongly discouraged.
The newer control
.Qq Xenroll
does not need this option.
.It Fl name Ar section
Specifies the configuration file
.Ar section
to use (overrides
.Cm default_ca
in the
.Cm ca
section).
.It Fl noemailDN
The DN of a certificate can contain the EMAIL field if present in the
request DN, however it is good policy just having the e-mail set into
the
.Em altName
extension of the certificate.
When this option is set, the EMAIL field is removed from the certificate's
subject and set only in the, eventually present, extensions.
The
.Ar email_in_dn
keyword can be used in the configuration file to enable this behaviour.
.It Fl notext
Don't output the text form of a certificate to the output file.
.It Fl out Ar file
The output file to output certificates to.
The default is standard output.
The certificate details will also be printed out to this file.
.It Fl outdir Ar directory
The
.Ar directory
to output certificates to.
The certificate will be written to a file consisting of the
serial number in hex with
.Qq .pem
appended.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl policy Ar arg
This option defines the CA
.Qq policy
to use.
This is a section in the configuration file which decides which fields
should be mandatory or match the CA certificate.
Check out the
.Sx CA POLICY FORMAT
section for more information.
.It Fl preserveDN
Normally, the DN order of a certificate is the same as the order of the
fields in the relevant policy section.
When this option is set, the order is the same as the request.
This is largely for compatibility with the older IE enrollment control
which would only accept certificates if their DNs matched the order of the
request.
This is not needed for Xenroll.
.It Fl spkac Ar file
A file containing a single Netscape signed public key and challenge,
and additional field values to be signed by the CA.
See the
.Sx SPKAC FORMAT
section for information on the required format.
.It Fl ss_cert Ar file
A single self-signed certificate to be signed by the CA.
.It Fl startdate Ar date
This allows the start date to be explicitly set.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN1 UTCTime structure .
.It Fl status Ar serial
Show status of certificate with serial number
.Ar serial .
.It Fl updatedb
Update database for expired certificates.
.It Fl verbose
This prints extra details about the operations being performed.
.El
.Sh CRL OPTIONS
.Bl -tag -width "XXXX"
.It Fl crl_CA_compromise Ar time
This is the same as
.Fl crl_compromise ,
except the revocation reason is set to CACompromise.
.It Fl crl_compromise Ar time
This sets the revocation reason to keyCompromise and the compromise time to
.Ar time .
.Ar time
should be in GeneralizedTime format, i.e. YYYYMMDDHHMMSSZ.
.It Fl crl_hold Ar instruction
This sets the CRL revocation reason code to certificateHold and the hold
instruction to
.Ar instruction
which must be an OID.
Although any OID can be used, only holdInstructionNone
(the use of which is discouraged by RFC 2459), holdInstructionCallIssuer or
holdInstructionReject will normally be used.
.It Fl crl_reason Ar reason
Revocation reason, where
.Ar reason
is one of:
unspecified, keyCompromise, CACompromise, affiliationChanged, superseded,
cessationOfOperation, certificateHold or removeFromCRL.
The matching of
.Ar reason
is case insensitive.
Setting any revocation reason will make the CRL v2.
In practice, removeFromCRL is not particularly useful because it is only used
in delta CRLs which are not currently implemented.
.It Fl crldays Ar num
The number of days before the next CRL is due.
This is the days from now to place in the CRL
.Em nextUpdate
field.
.It Fl crlexts Ar section
The
.Ar section
of the configuration file containing CRL extensions to include.
If no CRL extension section is present then a V1 CRL is created;
if the CRL extension section is present
.Pq even if it is empty
then a V2 CRL is created.
The CRL extensions specified are CRL extensions and
.Em not
CRL entry extensions.
It should be noted that some software
.Pq for example Netscape
can't handle V2 CRLs.
.It Fl crlhours Ar num
The number of hours before the next CRL is due.
.It Fl gencrl
This option generates a CRL based on information in the index file.
.It Fl revoke Ar file
A
.Ar file
containing a certificate to revoke.
.It Fl subj Ar arg
Supersedes the subject name given in the request.
The
.Ar arg
must be formatted as
.Ar /type0=value0/type1=value1/type2=... ;
characters may be escaped by
.Sq \e
.Pq backslash ,
no spaces are skipped.
.El
.Sh CA CONFIGURATION FILE OPTIONS
The section of the configuration file containing options for
.Nm ca
is found as follows:
If the
.Fl name
command line option is used, then it names the section to be used.
Otherwise the section to be used must be named in the
.Em default_ca
option of the
.Em ca
section of the configuration file (or in the default section of the
configuration file).
Besides
.Em default_ca ,
the following options are read directly from the
.Em ca
section:
.Pp
.Bl -tag -width Ds -offset indent -compact
.It preserve
.It msie_hack
.El
.Pp
This is probably a bug and may change in future releases.
.Pp
Many of the configuration file options are identical to command line
options.
Where the option is present in the configuration file and the command line,
the command line value is used.
Where an option is described as mandatory, then it must be present in
the configuration file or the command line equivalent
.Pq if any
used.
.Bl -tag -width "XXXX"
.It Ar certificate
The same as
.Fl cert .
It gives the file containing the CA certificate.
Mandatory.
.It Ar copy_extensions
Determines how extensions in certificate requests should be handled.
If set to
.Ar none
or this option is not present, then extensions are
ignored and not copied to the certificate.
If set to
.Ar copy ,
then any extensions present in the request that are not already present
are copied to the certificate.
If set to
.Ar copyall ,
then all extensions in the request are copied to the certificate:
if the extension is already present in the certificate it is deleted first.
See the
.Sx CA WARNINGS
section before using this option.
.Pp
The main use of this option is to allow a certificate request to supply
values for certain extensions such as
.Em subjectAltName .
.It Ar crl_extensions
The same as
.Fl crlexts .
.It Ar crlnumber
A text file containing the next CRL number to use in hex.
The CRL number will be inserted in the CRLs only if this file exists.
If this file is present, it must contain a valid CRL number.
.It Ar database
The text database file to use.
Mandatory.
This file must be present, though initially it will be empty.
.It Ar default_crl_hours , default_crl_days
The same as the
.Fl crlhours
and
.Fl crldays
options.
These will only be used if neither command line option is present.
At least one of these must be present to generate a CRL.
.It Ar default_days
The same as the
.Fl days
option.
The number of days to certify a certificate for.
.It Ar default_enddate
The same as the
.Fl enddate
option.
Either this option or
.Ar default_days
.Pq or the command line equivalents
must be present.
.It Ar default_md
The same as the
.Fl md
option.
The message digest to use.
Mandatory.
.It Ar default_startdate
The same as the
.Fl startdate
option.
The start date to certify a certificate for.
If not set, the current time is used.
.It Ar email_in_dn
The same as
.Fl noemailDN .
If the EMAIL field is to be removed from the DN of the certificate,
simply set this to
.Qq no .
If not present, the default is to allow for the EMAIL field in the
certificate's DN.
.It Ar msie_hack
The same as
.Fl msie_hack .
.It Ar name_opt , cert_opt
These options allow the format used to display the certificate details
when asking the user to confirm signing.
All the options supported by the
.Nm x509
utilities'
.Fl nameopt
and
.Fl certopt
switches can be used here, except that
.Ar no_signame
and
.Ar no_sigdump
are permanently set and cannot be disabled
(this is because the certificate signature cannot be displayed because
the certificate has not been signed at this point).
.Pp
For convenience, the value
.Em ca_default
is accepted by both to produce a reasonable output.
.Pp
If neither option is present, the format used in earlier versions of
.Nm OpenSSL
is used.
Use of the old format is
.Em strongly
discouraged because it only displays fields mentioned in the
.Ar policy
section,
mishandles multicharacter string types and does not display extensions.
.It Ar new_certs_dir
The same as the
.Fl outdir
command line option.
It specifies the directory where new certificates will be placed.
Mandatory.
.It Ar oid_file
This specifies a file containing additional object identifiers.
Each line of the file should consist of the numerical form of the
object identifier followed by whitespace, then the short name followed
by whitespace and finally the long name.
.It Ar oid_section
This specifies a section in the configuration file containing extra
object identifiers.
Each line should consist of the short name of the object identifier
followed by
.Sq =
and the numerical form.
The short and long names are the same when this option is used.
.It Ar policy
The same as
.Fl policy .
Mandatory.
See the
.Sx CA POLICY FORMAT
section for more information.
.It Ar preserve
The same as
.Fl preserveDN .
.It Ar private_key
Same as the
.Fl keyfile
option.
The file containing the CA private key.
Mandatory.
.It Ar serial
A text file containing the next serial number to use in hex.
Mandatory.
This file must be present and contain a valid serial number.
.It Ar unique_subject
If the value
.Ar yes
is given, the valid certificate entries in the
database must have unique subjects.
If the value
.Ar no
is given,
several valid certificate entries may have the exact same subject.
The default value is
.Ar yes .
.It Ar x509_extensions
The same as
.Fl extensions .
.El
.Sh CA POLICY FORMAT
The policy section consists of a set of variables corresponding to
certificate DN fields.
If the value is
.Qq match ,
then the field value must match the same field in the CA certificate.
If the value is
.Qq supplied ,
then it must be present.
If the value is
.Qq optional ,
then it may be present.
Any fields not mentioned in the policy section
are silently deleted, unless the
.Fl preserveDN
option is set,
but this can be regarded more of a quirk than intended behaviour.
.Sh SPKAC FORMAT
The input to the
.Fl spkac
command line option is a Netscape signed public key and challenge.
This will usually come from the
.Em KEYGEN
tag in an HTML form to create a new private key.
It is, however, possible to create SPKACs using the
.Nm spkac
utility.
.Pp
The file should contain the variable SPKAC set to the value of
the SPKAC and also the required DN components as name value pairs.
If it's necessary to include the same component twice,
then it can be preceded by a number and a
.Sq \&. .
.Sh CA EXAMPLES
.Sy Note :
these examples assume that the
.Nm ca
directory structure is already set up and the relevant files already exist.
This usually involves creating a CA certificate and private key with
.Cm req ,
a serial number file and an empty index file and placing them in
the relevant directories.
.Pp
To use the sample configuration file below, the directories
.Pa demoCA ,
.Pa demoCA/private
and
.Pa demoCA/newcerts
would be created.
The CA certificate would be copied to
.Pa demoCA/cacert.pem
and its private key to
.Pa demoCA/private/cakey.pem .
A file
.Pa demoCA/serial
would be created containing, for example,
.Qq 01
and the empty index file
.Pa demoCA/index.txt .
.Pp
Sign a certificate request:
.Pp
.Dl $ openssl ca -in req.pem -out newcert.pem
.Pp
Sign a certificate request, using CA extensions:
.Pp
.Dl $ openssl ca -in req.pem -extensions v3_ca -out newcert.pem
.Pp
Generate a CRL:
.Pp
.Dl $ openssl ca -gencrl -out crl.pem
.Pp
Sign several requests:
.Pp
.Dl $ openssl ca -infiles req1.pem req2.pem req3.pem
.Pp
Certify a Netscape SPKAC:
.Pp
.Dl $ openssl ca -spkac spkac.txt
.Pp
A sample SPKAC file
.Pq the SPKAC line has been truncated for clarity :
.Bd -literal -offset indent
SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK
CN=Steve Test
emailAddress=steve@@openssl.org
0.OU=OpenSSL Group
1.OU=Another Group
.Ed
.Pp
A sample configuration file with the relevant sections for
.Nm ca :
.Bd -literal
\& [ ca ]
\& default_ca      = CA_default            # The default ca section

\& [ CA_default ]

\& dir            = ./demoCA              # top dir
\& database       = $dir/index.txt        # index file
\& new_certs_dir  = $dir/newcerts         # new certs dir

\& certificate    = $dir/cacert.pem       # The CA cert
\& serial         = $dir/serial           # serial no file
\& private_key    = $dir/private/cakey.pem# CA private key

\& default_days   = 365                   # how long to certify for
\& default_crl_days= 30                   # how long before next CRL
\& default_md     = md5                   # md to use

\& policy         = policy_any            # default policy
\& email_in_dn    = no                    # Don't add the email into cert DN

\& name_opt        = ca_default           # Subject name display option
\& cert_opt        = ca_default           # Certificate display option
\& copy_extensions = none                 #Don't copy extensions from request

\& [ policy_any ]
\& countryName            = supplied
\& stateOrProvinceName    = optional
\& organizationName       = optional
\& organizationalUnitName = optional
\& commonName             = supplied
\& emailAddress           = optional
.Ed
.Sh CA FILES
.Sy Note :
the location of all files can change either by compile time options,
configuration file entries, environment variables, or command line options.
The values below reflect the default values.
.Bd -literal -offset indent
/etc/ssl/openssl.cnf           - master configuration file
\&./demoCA                       - main CA directory
\&./demoCA/cacert.pem            - CA certificate
\&./demoCA/private/cakey.pem     - CA private key
\&./demoCA/serial                - CA serial number file
\&./demoCA/serial.old            - CA serial number backup file
\&./demoCA/index.txt             - CA text database file
\&./demoCA/index.txt.old         - CA text database backup file
\&./demoCA/certs                 - certificate output file
\&./demoCA/.rnd                  - CA random seed information
.Ed
.Sh CA ENVIRONMENT VARIABLES
.Ev OPENSSL_CONF
reflects the location of the master configuration file;
it can be overridden by the
.Fl config
command line option.
.Sh CA RESTRICTIONS
The text database index file is a critical part of the process,
and if corrupted it can be difficult to fix.
It is theoretically possible to rebuild the index file from all the
issued certificates and a current CRL; however there is no option to do this.
.Pp
V2 CRL features like delta CRLs are not currently supported.
.Pp
Although several requests can be input and handled at once, it is only
possible to include one SPKAC or self-signed certificate.
.Sh CA BUGS
The use of an in-memory text database can cause problems when large
numbers of certificates are present because, as the name implies,
the database has to be kept in memory.
.Pp
It is not possible to certify two certificates with the same DN; this
is a side effect of how the text database is indexed and it cannot easily
be fixed without introducing other problems.
Some S/MIME clients can use two certificates with the same DN for separate
signing and encryption keys.
.Pp
The
.Nm ca
command really needs rewriting or the required functionality
exposed at either a command or interface level so a more friendly utility
.Pq perl script or GUI
can handle things properly.
The scripts
.Nm CA.sh
and
.Nm CA.pl
help a little but not very much.
.Pp
Any fields in a request that are not present in a policy are silently
deleted.
This does not happen if the
.Fl preserveDN
option is used.
To enforce the absence of the EMAIL field within the DN, as suggested
by RFCs, regardless of the contents of the request's subject the
.Fl noemailDN
option can be used.
The behaviour should be more friendly and configurable.
.Pp
Cancelling some commands by refusing to certify a certificate can
create an empty file.
.Sh CA WARNINGS
The
.Nm ca
command is quirky and at times downright unfriendly.
.Pp
The
.Nm ca
utility was originally meant as an example of how to do things in a CA.
It was not supposed to be used as a full blown CA itself:
nevertheless some people are using it for this purpose.
.Pp
The
.Nm ca
command is effectively a single user command: no locking is done on the
various files, and attempts to run more than one
.Nm ca
command on the same database can have unpredictable results.
.Pp
The
.Ar copy_extensions
option should be used with caution.
If care is not taken, it can be a security risk.
For example, if a certificate request contains a
.Em basicConstraints
extension with CA:TRUE and the
.Ar copy_extensions
value is set to
.Ar copyall
and the user does not spot
this when the certificate is displayed, then this will hand the requestor
a valid CA certificate.
.Pp
This situation can be avoided by setting
.Ar copy_extensions
to
.Ar copy
and including
.Em basicConstraints
with CA:FALSE in the configuration file.
Then if the request contains a
.Em basicConstraints
extension, it will be ignored.
.Pp
It is advisable to also include values for other extensions such
as
.Ar keyUsage
to prevent a request supplying its own values.
.Pp
Additional restrictions can be placed on the CA certificate itself.
For example if the CA certificate has:
.Pp
.D1 basicConstraints = CA:TRUE, pathlen:0
.Pp
then even if a certificate is issued with CA:TRUE it will not be valid.
.\"
.\" CIPHERS
.\"
.Sh CIPHERS
.Nm openssl ciphers
.Op Fl hVv
.Op Fl ssl3 | tls1
.Op Ar cipherlist
.Pp
The
.Nm ciphers
command converts
.Nm OpenSSL
cipher lists into ordered SSL cipher preference lists.
It can be used as a test tool to determine the appropriate cipherlist.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl h , \&?
Print a brief usage message.
.It Fl ssl3
Only include SSL v3 ciphers.
.It Fl tls1
Only include TLS v1 ciphers.
.It Fl V
Like
.Fl v ,
but include cipher suite codes in output (hex format).
.It Fl v
Verbose option.
List ciphers with a complete description of protocol version
.Pq SSLv3, which includes TLS ,
key exchange, authentication, encryption and mac algorithms used along with
any key size restrictions and whether the algorithm is classed as an
.Em export
cipher.
Note that without the
.Fl v
option, ciphers may seem to appear twice in a cipher list;
this is when similar ciphers are available for SSL v3/TLS v1.
.It Ar cipherlist
A cipher list to convert to a cipher preference list.
If it is not included, the default cipher list will be used.
The format is described below.
.El
.Sh CIPHERS LIST FORMAT
The cipher list consists of one or more
.Em cipher strings
separated by colons.
Commas or spaces are also acceptable separators, but colons are normally used.
.Pp
The actual
.Em cipher string
can take several different forms:
.Pp
It can consist of a single cipher suite such as
.Em RC4-SHA .
.Pp
It can represent a list of cipher suites containing a certain algorithm,
or cipher suites of a certain type.
For example
.Em SHA1
represents all cipher suites using the digest algorithm SHA1, and
.Em SSLv3
represents all SSL v3 algorithms.
.Pp
Lists of cipher suites can be combined in a single
.Em cipher string
using the
.Sq +
character.
This is used as a logical
.Em and
operation.
For example,
.Em SHA1+DES
represents all cipher suites containing the SHA1 and the DES algorithms.
.Pp
Each cipher string can be optionally preceded by the characters
.Sq \&! ,
.Sq - ,
or
.Sq + .
.Pp
If
.Sq !\&
is used, then the ciphers are permanently deleted from the list.
The ciphers deleted can never reappear in the list even if they are
explicitly stated.
.Pp
If
.Sq -
is used, then the ciphers are deleted from the list, but some or
all of the ciphers can be added again by later options.
.Pp
If
.Sq +
is used, then the ciphers are moved to the end of the list.
This option doesn't add any new ciphers, it just moves matching existing ones.
.Pp
If none of these characters is present, the string is just interpreted
as a list of ciphers to be appended to the current preference list.
If the list includes any ciphers already present, they will be ignored;
that is, they will not be moved to the end of the list.
.Pp
Additionally, the cipher string
.Em @@STRENGTH
can be used at any point to sort the current cipher list in order of
encryption algorithm key length.
.Sh CIPHERS STRINGS
The following is a list of all permitted cipher strings and their meanings.
.Bl -tag -width "XXXX"
.It Ar DEFAULT
The default cipher list.
This is determined at compile time and is currently
.Ar ALL:!aNULL:!eNULL:!SSLv2 .
This must be the first
.Ar cipher string
specified.
.It Ar COMPLEMENTOFDEFAULT
The ciphers included in
.Ar ALL ,
but not enabled by default.
Currently this is
.Ar ADH .
Note that this rule does not cover
.Ar eNULL ,
which is not included by
.Ar ALL
(use
.Ar COMPLEMENTOFALL
if necessary).
.It Ar ALL
All cipher suites except the
.Ar eNULL
ciphers which must be explicitly enabled.
.It Ar COMPLEMENTOFALL
The cipher suites not enabled by
.Ar ALL ,
currently being
.Ar eNULL .
.It Ar HIGH
.Qq High
encryption cipher suites.
This currently means those with key lengths larger than 128 bits.
.It Ar MEDIUM
.Qq Medium
encryption cipher suites, currently those using 128-bit encryption.
.It Ar LOW
.Qq Low
encryption cipher suites, currently those using 64- or 56-bit encryption
algorithms, but excluding export cipher suites.
.It Ar EXP , EXPORT
Export encryption algorithms.
Including 40- and 56-bit algorithms.
.It Ar EXPORT40
40-bit export encryption algorithms.
.It Ar eNULL , NULL
The
.Qq NULL
ciphers; that is, those offering no encryption.
Because these offer no encryption at all and are a security risk,
they are disabled unless explicitly included.
.It Ar aNULL
The cipher suites offering no authentication.
This is currently the anonymous DH algorithms.
These cipher suites are vulnerable to a
.Qq man in the middle
attack, so their use is normally discouraged.
.It Ar kRSA , RSA
Cipher suites using RSA key exchange.
.It Ar kEDH
Cipher suites using ephemeral DH key agreement.
.It Ar aRSA
Cipher suites using RSA authentication, i.e. the certificates carry RSA keys.
.It Ar aDSS , DSS
Cipher suites using DSS authentication, i.e. the certificates carry DSS keys.
.It Ar TLSv1 , SSLv3
TLS v1.0 or SSL v3.0 cipher suites, respectively.
.It Ar DH
Cipher suites using DH, including anonymous DH.
.It Ar ADH
Anonymous DH cipher suites.
.It Ar AES
Cipher suites using AES.
.It Ar 3DES
Cipher suites using triple DES.
.It Ar DES
Cipher suites using DES
.Pq not triple DES .
.It Ar RC4
Cipher suites using RC4.
.It Ar RC2
Cipher suites using RC2.
.It Ar MD5
Cipher suites using MD5.
.It Ar SHA1 , SHA
Cipher suites using SHA1.
.El
.Sh CIPHERS SUITE NAMES
The following lists give the SSL or TLS cipher suites names from the
relevant specification and their
.Nm OpenSSL
equivalents.
It should be noted that several cipher suite names do not include the
authentication used, e.g. DES-CBC3-SHA.
In these cases, RSA authentication is used.
.Ss SSL v3.0 cipher suites
.Bd -unfilled -offset indent
SSL_RSA_WITH_NULL_MD5                   NULL-MD5
SSL_RSA_WITH_NULL_SHA                   NULL-SHA
SSL_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
SSL_RSA_WITH_RC4_128_MD5                RC4-MD5
SSL_RSA_WITH_RC4_128_SHA                RC4-SHA
SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
SSL_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
SSL_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
SSL_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
SSL_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA

SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
SSL_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
SSL_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
SSL_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
SSL_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA

SSL_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
SSL_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
SSL_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
SSL_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA

SSL_FORTEZZA_KEA_WITH_NULL_SHA          Not implemented.
SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA  Not implemented.
SSL_FORTEZZA_KEA_WITH_RC4_128_SHA       Not implemented.
.Ed
.Ss TLS v1.0 cipher suites
.Bd -unfilled -offset indent
TLS_RSA_WITH_NULL_MD5                   NULL-MD5
TLS_RSA_WITH_NULL_SHA                   NULL-SHA
TLS_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
TLS_RSA_WITH_RC4_128_MD5                RC4-MD5
TLS_RSA_WITH_RC4_128_SHA                RC4-SHA
TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
TLS_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
TLS_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
TLS_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
TLS_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA

TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
TLS_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
TLS_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
TLS_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
TLS_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA

TLS_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
TLS_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
TLS_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
TLS_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
.Ed
.Ss AES ciphersuites from RFC 3268, extending TLS v1.0
.Bd -unfilled -offset indent
TLS_RSA_WITH_AES_128_CBC_SHA            AES128-SHA
TLS_RSA_WITH_AES_256_CBC_SHA            AES256-SHA

TLS_DH_DSS_WITH_AES_128_CBC_SHA         Not implemented.
TLS_DH_DSS_WITH_AES_256_CBC_SHA         Not implemented.
TLS_DH_RSA_WITH_AES_128_CBC_SHA         Not implemented.
TLS_DH_RSA_WITH_AES_256_CBC_SHA         Not implemented.

TLS_DHE_DSS_WITH_AES_128_CBC_SHA        DHE-DSS-AES128-SHA
TLS_DHE_DSS_WITH_AES_256_CBC_SHA        DHE-DSS-AES256-SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA        DHE-RSA-AES128-SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA        DHE-RSA-AES256-SHA

TLS_DH_anon_WITH_AES_128_CBC_SHA        ADH-AES128-SHA
TLS_DH_anon_WITH_AES_256_CBC_SHA        ADH-AES256-SHA
.Ed
.Ss GOST ciphersuites from draft-chudov-cryptopro-cptls, extending TLS v1.0
.Sy Note :
These ciphers require an engine which includes GOST cryptographic
algorithms, such as the
.Dq ccgost
engine, included in the OpenSSL distribution.
.Bd -unfilled -offset indent
TLS_GOSTR341094_WITH_28147_CNT_IMIT	GOST94-GOST89-GOST89
TLS_GOSTR341001_WITH_28147_CNT_IMIT	GOST2001-GOST89-GOST89
TLS_GOSTR341094_WITH_NULL_GOSTR3411	GOST94-NULL-GOST94
TLS_GOSTR341001_WITH_NULL_GOSTR3411	GOST2001-NULL-GOST94
.Ed
.Ss Additional Export 1024 and other cipher suites
.Sy Note :
These ciphers can also be used in SSL v3.
.Bd -unfilled -offset indent
TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA     EXP1024-DES-CBC-SHA
TLS_RSA_EXPORT1024_WITH_RC4_56_SHA      EXP1024-RC4-SHA
TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA EXP1024-DHE-DSS-DES-CBC-SHA
TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA  EXP1024-DHE-DSS-RC4-SHA
TLS_DHE_DSS_WITH_RC4_128_SHA            DHE-DSS-RC4-SHA
.Ed
.Sh CIPHERS NOTES
The non-ephemeral DH modes are currently unimplemented in
.Nm OpenSSL
because there is no support for DH certificates.
.Pp
Some compiled versions of
.Nm OpenSSL
may not include all the ciphers
listed here because some ciphers were excluded at compile time.
.Sh CIPHERS EXAMPLES
Verbose listing of all
.Nm OpenSSL
ciphers including NULL ciphers:
.Pp
.Dl $ openssl ciphers -v 'ALL:eNULL'
.Pp
Include all ciphers except NULL and anonymous DH then sort by
strength:
.Pp
.Dl $ openssl ciphers -v 'ALL:!ADH:@@STRENGTH'
.Pp
Include only 3DES ciphers and then place RSA ciphers last:
.Pp
.Dl $ openssl ciphers -v '3DES:+RSA'
.Pp
Include all RC4 ciphers but leave out those without authentication:
.Pp
.Dl $ openssl ciphers -v 'RC4:!COMPLEMENTOFDEFAULT'
.Pp
Include all ciphers with RSA authentication but leave out ciphers without
encryption:
.Pp
.Dl $ openssl ciphers -v 'RSA:!COMPLEMENTOFALL'
.Sh CIPHERS HISTORY
The
.Ar COMPLEMENTOFALL
and
.Ar COMPLEMENTOFDEFAULT
selection options were added in
.Nm OpenSSL
0.9.7.
.Pp
The
.Fl V
option of the
.Nm ciphers
command was added in
.Nm OpenSSL
1.0.0.
.\"
.\" CRL
.\"
.Sh CRL
.nr nS 1
.Nm "openssl crl"
.Bk -words
.Op Fl CAfile Ar file
.Op Fl CApath Ar dir
.Op Fl fingerprint
.Op Fl hash
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl issuer
.Op Fl lastupdate
.Op Fl nextupdate
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm crl
command processes CRL files in DER or PEM format.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl CAfile Ar file
Verify the signature on a CRL by looking up the issuing certificate in
.Ar file .
.It Fl CApath Ar directory
Verify the signature on a CRL by looking up the issuing certificate in
.Ar dir .
This directory must be a standard certificate directory,
i.e. a hash of each subject name (using
.Cm x509 Fl hash )
should be linked to each certificate.
.It Fl fingerprint
Print the CRL fingerprint.
.It Fl hash
Output a hash of the issuer name.
This can be used to look up CRLs in a directory by issuer name.
.It Fl in Ar file
This specifies the input file to read from, or standard input if this
option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
.Ar DER
format is a DER-encoded CRL structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
.It Fl issuer
Output the issuer name.
.It Fl lastupdate
Output the
.Ar lastUpdate
field.
.It Fl nextupdate
Output the
.Ar nextUpdate
field.
.It Fl noout
Don't output the encoded version of the CRL.
.It Fl out Ar file
Specifies the output file to write to, or standard output by
default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
Print out the CRL in text form.
.El
.Sh CRL NOTES
The PEM CRL format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN X509 CRL-----
-----END X509 CRL-----
.Ed
.Sh CRL EXAMPLES
Convert a CRL file from PEM to DER:
.Pp
.Dl $ openssl crl -in crl.pem -outform DER -out crl.der
.Pp
Output the text form of a DER-encoded certificate:
.Pp
.Dl $ openssl crl -in crl.der -inform DER -text -noout
.Sh CRL BUGS
Ideally, it should be possible to create a CRL using appropriate options
and files too.
.\"
.\" CRL2PKCS7
.\"
.Sh CRL2PKCS7
.nr nS 1
.Nm "openssl crl2pkcs7"
.Bk -words
.Op Fl certfile Ar file
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl nocrl
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Ek
.nr nS 0
.Pp
The
.Nm crl2pkcs7
command takes an optional CRL and one or more
certificates and converts them into a PKCS#7 degenerate
.Qq certificates only
structure.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl certfile Ar file
Specifies a
.Ar file
containing one or more certificates in PEM format.
All certificates in the file will be added to the PKCS#7 structure.
This option can be used more than once to read certificates from multiple
files.
.It Fl in Ar file
This specifies the input
.Ar file
to read a CRL from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the CRL input format.
.Ar DER
format is a DER-encoded CRL structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
.It Fl nocrl
Normally, a CRL is included in the output file.
With this option, no CRL is
included in the output file and a CRL is not read from the input file.
.It Fl out Ar file
Specifies the output
.Ar file
to write the PKCS#7 structure to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the PKCS#7 structure output format.
.Ar DER
format is a DER-encoded PKCS#7 structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
.El
.Sh CRL2PKCS7 EXAMPLES
Create a PKCS#7 structure from a certificate and CRL:
.Pp
.Dl $ openssl crl2pkcs7 -in crl.pem -certfile cert.pem -out p7.pem
.Pp
Create a PKCS#7 structure in DER format with no CRL from several
different certificates:
.Bd -literal -offset indent
$ openssl crl2pkcs7 -nocrl -certfile newcert.pem \e
	-certfile demoCA/cacert.pem -outform DER -out p7.der
.Ed
.Sh CRL2PKCS7 NOTES
The output file is a PKCS#7 signed data structure containing no signers and
just certificates and an optional CRL.
.Pp
This utility can be used to send certificates and CAs to Netscape as part of
the certificate enrollment process.
This involves sending the DER-encoded output
as MIME type
.Em application/x-x509-user-cert .
.Pp
The PEM-encoded form with the header and footer lines removed can be used to
install user certificates and CAs in MSIE using the Xenroll control.
.\"
.\" DGST
.\"
.Sh DGST
.nr nS 1
.Nm "openssl dgst"
.Bk -words
.Oo
.Fl dss1 | md2 | md4 | md5 |
.Fl ripemd160 | sha | sha1
.Oc
.Op Fl binary
.Op Fl cd
.Op Fl engine Ar id
.Op Fl hex
.Op Fl hmac Ar key
.Op Fl keyform Ar ENGINE | PEM
.Op Fl mac Ar algorithm
.Op Fl macopt Ar nm : Ns Ar v
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl prverify Ar file
.Op Fl sign Ar file
.Op Fl signature Ar file
.Op Fl sigopt Ar nm : Ns Ar v
.Op Fl verify Ar file
.Op Ar
.Ek
.nr nS 0
.Pp
.Nm openssl
.Cm md2 | md4 | md5 |
.Cm ripemd160 | sha | sha1
.Op Fl c
.Op Fl d
.Op Ar
.Pp
The digest functions output the message digest of a supplied
.Ar file
or
.Ar files
in hexadecimal form.
They can also be used for digital signing and verification.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl binary
Output the digest or signature in binary form.
.It Fl c
Print out the digest in two-digit groups separated by colons; only relevant if
.Em hex
format output is used.
.It Fl d
Print out BIO debugging information.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dgst
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
This engine is not used as a source for digest algorithms
unless it is also specified in the configuration file.
.It Fl hex
Digest is to be output as a hex dump.
This is the default case for a
.Qq normal
digest as opposed to a digital signature.
.It Fl hmac Ar key
Create a hashed MAC using
.Ar key .
.It Fl keyform Ar ENGINE | PEM
Specifies the key format to sign the digest with.
.It Fl mac Ar algorithm
Create a keyed Message Authentication Code (MAC).
The most popular MAC algorithm is HMAC (hash-based MAC),
but there are other MAC algorithms which are not based on hash.
MAC keys and other options should be set via the
.Fl macopt
parameter.
.It Fl macopt Ar nm : Ns Ar v
Passes options to the MAC algorithm, specified by
.Fl mac .
The following options are supported by HMAC:
.Bl -tag -width Ds
.It Ar key : Ns Ar string
Specifies the MAC key as an alphanumeric string
(use if the key contain printable characters only).
String length must conform to any restrictions of the MAC algorithm.
.It Ar hexkey : Ns Ar string
Specifies the MAC key in hexadecimal form (two hex digits per byte).
Key length must conform to any restrictions of the MAC algorithm.
.El
.It Fl out Ar file
The file to output to, or standard output by default.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl prverify Ar file
Verify the signature using the private key in
.Ar file .
The output is either
.Qq Verification OK
or
.Qq Verification Failure .
.It Fl sign Ar file
Digitally sign the digest using the private key in
.Ar file .
.It Fl signature Ar file
The actual signature to verify.
.It Fl sigopt Ar nm : Ns Ar v
Pass options to the signature algorithm during sign or verify operations.
The names and values of these options are algorithm-specific.
.It Fl verify Ar file
Verify the signature using the public key in
.Ar file .
The output is either
.Qq Verification OK
or
.Qq Verification Failure .
.It Ar
File or files to digest.
If no files are specified then standard input is used.
.El
.Sh DGST NOTES
The digest of choice for all new applications is SHA1.
Other digests are, however, still widely used.
.Pp
If you wish to sign or verify data using the DSA algorithm, the dss1
digest must be used.
.Pp
A source of random numbers is required for certain signing algorithms, in
particular DSA.
.Pp
The signing and verify options should only be used if a single file is
being signed or verified.
.\"
.\" DH
.\"
.Sh DH
Diffie-Hellman Parameter Management.
The
.Nm dh
command has been replaced by
.Nm dhparam .
See
.Sx DHPARAM
below.
.\"
.\" DHPARAM
.\"
.Sh DHPARAM
.nr nS 1
.Nm "openssl dhparam"
.Bk -words
.Op Fl 2 | 5
.Op Fl C
.Op Fl check
.Op Fl dsaparam
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl text
.Op Ar numbits
.Ek
.nr nS 0
.Pp
The
.Nm dhparam
command is used to manipulate DH parameter files.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 2 , 5
The generator to use, either 2 or 5.
2 is the default.
If present, the input file is ignored and parameters are generated instead.
.It Fl C
This option converts the parameters into C code.
The parameters can then be loaded by calling the
.Cm get_dh Ns Ar numbits Ns Li ()
function.
.It Fl check
Check the DH parameters.
.It Fl dsaparam
If this option is used, DSA rather than DH parameters are read or created;
they are converted to DH format.
Otherwise,
.Qq strong
primes
.Pq such that (p-1)/2 is also prime
will be used for DH parameter generation.
.Pp
DH parameter generation with the
.Fl dsaparam
option is much faster,
and the recommended exponent length is shorter,
which makes DH key exchange more efficient.
Beware that with such DSA-style DH parameters,
a fresh DH key should be created for each use to
avoid small-subgroup attacks that may be possible otherwise.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dhparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read parameters from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
The argument
.Ar DER
uses an ASN1 DER-encoded form compatible with the PKCS#3 DHparameter
structure.
The
.Ar PEM
form is the default format:
it consists of the DER format base64-encoded with
additional header and footer lines.
.It Fl noout
This option inhibits the output of the encoded version of the parameters.
.It Ar numbits
This argument specifies that a parameter set should be generated of size
.Ar numbits .
It must be the last option.
If not present, a value of 512 is used.
If this value is present, the input file is ignored and
parameters are generated instead.
.It Fl out Ar file
This specifies the output
.Ar file
to write parameters to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
This option prints out the DH parameters in human readable form.
.El
.Sh DHPARAM WARNINGS
The program
.Nm dhparam
combines the functionality of the programs
.Nm dh
and
.Nm gendh
in previous versions of
.Nm OpenSSL
and
.Nm SSLeay .
The
.Nm dh
and
.Nm gendh
programs are retained for now, but may have different purposes in future
versions of
.Nm OpenSSL .
.Sh DHPARAM NOTES
PEM format DH parameters use the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DH PARAMETERS-----
-----END DH PARAMETERS-----
.Ed
.Pp
.Nm OpenSSL
currently only supports the older PKCS#3 DH,
not the newer X9.42 DH.
.Pp
This program manipulates DH parameters not keys.
.Sh DHPARAM BUGS
There should be a way to generate and manipulate DH keys.
.Sh DHPARAM HISTORY
The
.Nm dhparam
command was added in
.Nm OpenSSL
0.9.5.
The
.Fl dsaparam
option was added in
.Nm OpenSSL
0.9.6.
.\"
.\" DSA
.\"
.Sh DSA
.nr nS 1
.Nm "openssl dsa"
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl modulus
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm dsa
command processes DSA keys.
They can be converted between various forms and their components printed out.
.Pp
.Sy Note :
This command uses the traditional
.Nm SSLeay
compatible format for private key encryption:
newer applications should use the more secure PKCS#8 format using the
.Nm pkcs8
command.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES, or the triple DES
ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options is specified, the key is written in plain text.
This means that using the
.Nm dsa
utility to read in an encrypted key with no encryption option can be used to
remove the pass phrase from a key,
or by setting the encryption options it can be use to add or change
the pass phrase.
These options can only be used with PEM format output files.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read a key from, or standard input if this option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument with a private key uses an ASN1 DER-encoded form of an ASN.1
SEQUENCE consisting of the values of version
.Pq currently zero ,
P, Q, G,
and the public and private key components, respectively, as ASN.1 INTEGERs.
When used with a public key it uses a
.Em SubjectPublicKeyInfo
structure: it is an error if the key is not DSA.
.Pp
The
.Ar PEM
form is the default format:
it consists of the DER format base64-encoded with additional header and footer
lines.
In the case of a private key, PKCS#8 format is also accepted.
.It Fl modulus
This option prints out the value of the public key component of the key.
.It Fl noout
This option prevents output of the encoded version of the key.
.It Fl out Ar file
This specifies the output
.Ar file
to write a key to, or standard output if not specified.
If any encryption options are set then a pass phrase will be
prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubin
By default, a private key is read from the input file.
With this option a public key is read instead.
.It Fl pubout
By default, a private key is output.
With this option a public key will be output instead.
This option is automatically set if the input is a public key.
.It Fl text
Prints out the public/private key components and parameters.
.El
.Sh DSA NOTES
The PEM private key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PRIVATE KEY-----
-----END DSA PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Sh DSA EXAMPLES
To remove the pass phrase on a DSA private key:
.Pp
.Dl $ openssl dsa -in key.pem -out keyout.pem
.Pp
To encrypt a private key using triple DES:
.Pp
.Dl $ openssl dsa -in key.pem -des3 -out keyout.pem
.Pp
To convert a private key from PEM to DER format:
.Pp
.Dl $ openssl dsa -in key.pem -outform DER -out keyout.der
.Pp
To print out the components of a private key to standard output:
.Pp
.Dl $ openssl dsa -in key.pem -text -noout
.Pp
To just output the public part of a private key:
.Pp
.Dl $ openssl dsa -in key.pem -pubout -out pubkey.pem
.\"
.\" DSAPARAM
.\"
.Sh DSAPARAM
.nr nS 1
.Nm "openssl dsaparam"
.Bk -words
.Op Fl C
.Op Fl engine Ar id
.Op Fl genkey
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl text
.Op Ar numbits
.Ek
.nr nS 0
.Pp
The
.Nm dsaparam
command is used to manipulate or generate DSA parameter files.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl C
This option converts the parameters into C code.
The parameters can then be loaded by calling the
.Cm get_dsa Ns Ar XXX Ns Li ()
function.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm dsaparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl genkey
This option will generate a DSA either using the specified or generated
parameters.
.It Fl in Ar file
This specifies the input
.Ar file
to read parameters from, or standard input if this option is not specified.
If the
.Ar numbits
parameter is included, then this option will be ignored.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded form compatible with RFC 2459
.Pq PKIX
DSS-Parms that is a SEQUENCE consisting of p, q and g, respectively.
The
.Ar PEM
form is the default format:
it consists of the DER format base64-encoded with additional header
and footer lines.
.It Fl noout
This option inhibits the output of the encoded version of the parameters.
.It Ar numbits
This option specifies that a parameter set should be generated of size
.Ar numbits .
If this option is included, the input file
.Pq if any
is ignored.
.It Fl out Ar file
This specifies the output
.Ar file
to write parameters to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
This option prints out the DSA parameters in human readable form.
.El
.Sh DSAPARAM NOTES
PEM format DSA parameters use the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN DSA PARAMETERS-----
-----END DSA PARAMETERS-----
.Ed
.Pp
DSA parameter generation is a slow process and as a result the same set of
DSA parameters is often used to generate several distinct keys.
.\"
.\" EC
.\"
.Sh EC
.nr nS 1
.Nm "openssl ec"
.Bk -words
.Op Fl conv_form Ar arg
.Op Fl des
.Op Fl des3
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl param_enc Ar arg
.Op Fl param_out
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm ec
command processes EC keys.
They can be converted between various
forms and their components printed out.
Note:
.Nm OpenSSL
uses the private key format specified in
.Dq SEC 1: Elliptic Curve Cryptography
.Pq Lk http://www.secg.org/ .
To convert an
.Nm OpenSSL
EC private key into the PKCS#8 private key format use the
.Nm pkcs8
command.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl conv_form Ar arg
This specifies how the points on the elliptic curve are converted
into octet strings.
Possible values are:
.Cm compressed
(the default value),
.Cm uncompressed ,
and
.Cm hybrid .
For more information regarding
the point conversion forms please read the X9.62 standard.
Note:
Due to patent issues the
.Cm compressed
option is disabled by default for binary curves
and can be enabled by defining the preprocessor macro
.Ar OPENSSL_EC_BIN_PT_COMP
at compile time.
.It Fl des | des3
These options encrypt the private key with the DES, triple DES, or
any other cipher supported by
.Nm OpenSSL
before outputting it.
A pass phrase is prompted for.
If none of these options is specified the key is written in plain text.
This means that using the
.Nm ec
utility to read in an encrypted key with no
encryption option can be used to remove the pass phrase from a key,
or by setting the encryption options
it can be use to add or change the pass phrase.
These options can only be used with PEM format output files.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ec
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input filename to read a key from,
or standard input if this option is not specified.
If the key is encrypted a pass phrase will be prompted for.
.It Fl inform Ar DER | PEM
This specifies the input format.
DER with a private key uses
an ASN.1 DER-encoded SEC1 private key.
When used with a public key it
uses the SubjectPublicKeyInfo structure as specified in RFC 3280.
PEM is the default format:
it consists of the DER format base64
encoded with additional header and footer lines.
In the case of a private key
PKCS#8 format is also accepted.
.It Fl noout
Prevents output of the encoded version of the key.
.It Fl out Ar file
Specifies the output filename to write a key to,
or standard output if none is specified.
If any encryption options are set then a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format.
The options have the same meaning as the
.Fl inform
option.
.It Fl param_enc Ar arg
This specifies how the elliptic curve parameters are encoded.
Possible value are:
.Cm named_curve ,
i.e. the EC parameters are specified by an OID; or
.Cm explicit ,
where the EC parameters are explicitly given
(see RFC 3279 for the definition of the EC parameter structures).
The default value is
.Cm named_curve .
Note: the
.Cm implicitlyCA
alternative,
as specified in RFC 3279,
is currently not implemented in
.Nm OpenSSL .
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubin
By default a private key is read from the input file;
with this option a public key is read instead.
.It Fl pubout
By default a private key is output;
with this option a public key is output instead.
This option is automatically set if the input is a public key.
.It Fl text
Prints out the public/private key components and parameters.
.El
.Sh EC NOTES
The PEM private key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PRIVATE KEY-----
-----END EC PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -literal -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Sh EC EXAMPLES
To encrypt a private key using triple DES:
.Bd -literal -offset indent
$ openssl ec -in key.pem -des3 -out keyout.pem
.Ed
.Pp
To convert a private key from PEM to DER format:
.Bd -literal -offset indent
$ openssl ec -in key.pem -outform DER -out keyout.der
.Ed
.Pp
To print out the components of a private key to standard output:
.Bd -literal -offset indent
$ openssl ec -in key.pem -text -noout
.Ed
.Pp
To just output the public part of a private key:
.Bd -literal -offset indent
$ openssl ec -in key.pem -pubout -out pubkey.pem
.Ed
.Pp
To change the parameter encoding to
.Cm explicit :
.Bd -literal -offset indent
$ openssl ec -in key.pem -param_enc explicit -out keyout.pem
.Ed
.Pp
To change the point conversion form to
.Cm compressed :
.Bd -literal -offset indent
$ openssl ec -in key.pem -conv_form compressed -out keyout.pem
.Ed
.Sh EC HISTORY
The
.Nm ec
command was first introduced in
.Nm OpenSSL
0.9.8.
.Sh EC AUTHORS
.An Nils Larsch .
.\"
.\" ECPARAM
.\"
.Sh ECPARAM
.nr nS 1
.Nm "openssl ecparam"
.Bk -words
.Op Fl C
.Op Fl check
.Op Fl conv_form Ar arg
.Op Fl engine Ar id
.Op Fl genkey
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl list_curves
.Op Fl name Ar arg
.Op Fl no_seed
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl param_enc Ar arg
.Op Fl text
.Ek
.nr nS 0
.Pp
This command is used to manipulate or generate EC parameter files.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl C
Convert the EC parameters into C code.
The parameters can then be loaded by calling the
.Fn get_ec_group_XXX
function.
.It Fl check
Validate the elliptic curve parameters.
.It Fl conv_form Ar arg
Specify how the points on the elliptic curve are converted
into octet strings.
Possible values are:
.Cm compressed
(the default value),
.Cm uncompressed ,
and
.Cm hybrid .
For more information regarding
the point conversion forms please read the X9.62 standard.
Note:
Due to patent issues the
.Cm compressed
option is disabled by default for binary curves
and can be enabled by defining the preprocessor macro
.Ar OPENSSL_EC_BIN_PT_COMP
at compile time.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ecparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl genkey
Generate an EC private key using the specified parameters.
.It Fl in Ar file
Specify the input filename to read parameters from or standard input if
this option is not specified.
.It Fl inform Ar DER | PEM
Specify the input format.
DER uses an ASN.1 DER-encoded
form compatible with RFC 3279 EcpkParameters.
PEM is the default format:
it consists of the DER format base64 encoded with additional
header and footer lines.
.It Fl list_curves
Print out a list of all
currently implemented EC parameter names and exit.
.It Fl name Ar arg
Use the EC parameters with the specified 'short' name.
Use
.Fl list_curves
to get a list of all currently implemented EC parameters.
.It Fl no_seed
Inhibit that the 'seed' for the parameter generation
is included in the ECParameters structure (see RFC 3279).
.It Fl noout
Inhibit the output of the encoded version of the parameters.
.It Fl out Ar file
Specify the output filename parameters are written to.
Standard output is used if this option is not present.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
Specify the output format;
the parameters have the same meaning as the
.Fl inform
option.
.It Fl param_enc Ar arg
This specifies how the elliptic curve parameters are encoded.
Possible value are:
.Cm named_curve ,
i.e. the EC parameters are specified by an OID, or
.Cm explicit ,
where the EC parameters are explicitly given
(see RFC 3279 for the definition of the EC parameter structures).
The default value is
.Cm named_curve .
Note: the
.Cm implicitlyCA
alternative, as specified in RFC 3279,
is currently not implemented in
.Nm OpenSSL .
.It Fl text
Print out the EC parameters in human readable form.
.El
.Sh ECPARAM NOTES
PEM format EC parameters use the header and footer lines:
.Bd -literal -offset indent
-----BEGIN EC PARAMETERS-----
-----END EC PARAMETERS-----
.Ed
.Pp
.Nm OpenSSL
is currently not able to generate new groups and therefore
.Nm ecparam
can only create EC parameters from known (named) curves.
.Sh ECPARAM EXAMPLES
To create EC parameters with the group 'prime192v1':
.Bd -literal -offset indent
$ openssl ecparam -out ec_param.pem -name prime192v1
.Ed
.Pp
To create EC parameters with explicit parameters:
.Bd -literal -offset indent
$ openssl ecparam -out ec_param.pem -name prime192v1 \e
	-param_enc explicit
.Ed
.Pp
To validate given EC parameters:
.Bd -literal -offset indent
$ openssl ecparam -in ec_param.pem -check
.Ed
.Pp
To create EC parameters and a private key:
.Bd -literal -offset indent
$ openssl ecparam -out ec_key.pem -name prime192v1 -genkey
.Ed
.Pp
To change the point encoding to 'compressed':
.Bd -literal -offset indent
$ openssl ecparam -in ec_in.pem -out ec_out.pem \e
	-conv_form compressed
.Ed
.Pp
To print out the EC parameters to standard output:
.Bd -literal -offset indent
$ openssl ecparam -in ec_param.pem -noout -text
.Ed
.Sh ECPARAM HISTORY
The
.Nm ecparam
command was first introduced in
.Nm OpenSSL
0.9.8.
.Sh ECPARAM AUTHORS
.An Nils Larsch .
.\"
.\" ENC
.\"
.Sh ENC
.nr nS 1
.Nm "openssl enc"
.Bk -words
.Fl ciphername
.Op Fl AadePp
.Op Fl base64
.Op Fl bufsize Ar number
.Op Fl debug
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl iv Ar IV
.Op Fl K Ar key
.Op Fl k Ar password
.Op Fl kfile Ar file
.Op Fl md Ar digest
.Op Fl none
.Op Fl nopad
.Op Fl nosalt
.Op Fl out Ar file
.Op Fl pass Ar arg
.Op Fl S Ar salt
.Op Fl salt
.Ek
.nr nS 0
.Pp
The symmetric cipher commands allow data to be encrypted or decrypted
using various block and stream ciphers using keys based on passwords
or explicitly provided.
Base64 encoding or decoding can also be performed either by itself
or in addition to the encryption or decryption.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A
If the
.Fl a
option is set, then base64 process the data on one line.
.It Fl a , base64
Base64 process the data.
This means that if encryption is taking place, the data is base64-encoded
after encryption.
If decryption is set, the input data is base64 decoded before
being decrypted.
.It Fl bufsize Ar number
Set the buffer size for I/O.
.It Fl d
Decrypt the input data.
.It Fl debug
Debug the BIOs used for I/O.
.It Fl e
Encrypt the input data: this is the default.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm enc
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
The input
.Ar file ;
standard input by default.
.It Fl iv Ar IV
The actual
.Ar IV
.Pq initialisation vector
to use:
this must be represented as a string comprised only of hex digits.
When only the
.Ar key
is specified using the
.Fl K
option, the
.Ar IV
must explicitly be defined.
When a password is being specified using one of the other options,
the
.Ar IV
is generated from this password.
.It Fl K Ar key
The actual
.Ar key
to use:
this must be represented as a string comprised only of hex digits.
If only the key is specified, the
.Ar IV
must be additionally specified using the
.Fl iv
option.
When both a
.Ar key
and a
.Ar password
are specified, the
.Ar key
given with the
.Fl K
option will be used and the
.Ar IV
generated from the password will be taken.
It probably does not make much sense to specify both
.Ar key
and
.Ar password .
.It Fl k Ar password
The
.Ar password
to derive the key from.
This is for compatibility with previous versions of
.Nm OpenSSL .
Superseded by the
.Fl pass
option.
.It Fl kfile Ar file
Read the password to derive the key from the first line of
.Ar file .
This is for compatibility with previous versions of
.Nm OpenSSL .
Superseded by the
.Fl pass
option.
.It Fl md Ar digest
Use
.Ar digest
to create a key from a pass phrase.
.Ar digest
may be one of
.Dq md2 ,
.Dq md5 ,
.Dq sha ,
or
.Dq sha1 .
.It Fl none
Use NULL cipher (no encryption or decryption of input).
.It Fl nopad
Disable standard block padding.
.It Fl nosalt
Don't use a
.Ar salt
in the key derivation routines.
This option should
.Em NEVER
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
.It Fl out Ar file
The output
.Ar file ,
standard output by default.
.It Fl P
Print out the
.Ar salt ,
.Ar key ,
and
.Ar IV
used, then immediately exit;
don't do any encryption or decryption.
.It Fl p
Print out the
.Ar salt ,
.Ar key ,
and
.Ar IV
used.
.It Fl pass Ar arg
The password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl S Ar salt
The actual
.Ar salt
to use:
this must be represented as a string comprised only of hex digits.
.It Fl salt
Use a
.Ar salt
in the key derivation routines.
This is the default.
.El
.Sh ENC NOTES
The program can be called either as
.Nm openssl ciphername
or
.Nm openssl enc -ciphername .
But the first form doesn't work with engine-provided ciphers,
because this form is processed before the
configuration file is read and any engines loaded.
.Pp
Engines which provide entirely new encryption algorithms
should be configured in the configuration file.
Engines, specified on the command line using the
.Fl engine
option,
can only be used for hardware-assisted implementations of ciphers,
supported by
.Nm OpenSSL
core, or by other engines specified in the configuration file.
.Pp
When
.Nm enc
lists supported ciphers,
ciphers provided by engines specified in the configuration files
are listed too.
.Pp
A password will be prompted for to derive the
.Ar key
and
.Ar IV
if necessary.
.Pp
The
.Fl nosalt
option should
.Em NEVER
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
.Pp
With the
.Fl nosalt
option it is possible to perform efficient dictionary
attacks on the password and to attack stream cipher encrypted data.
The reason for this is that without the salt
the same password always generates the same encryption key.
When the salt
is being used the first eight bytes of the encrypted data are reserved
for the salt:
it is generated at random when encrypting a file and read from the
encrypted file when it is decrypted.
.Pp
Some of the ciphers do not have large keys and others have security
implications if not used correctly.
A beginner is advised to just use a strong block cipher in CBC mode
such as bf or des3.
.Pp
All the block ciphers normally use PKCS#5 padding also known as standard block
padding:
this allows a rudimentary integrity or password check to be performed.
However, since the chance of random data passing the test is
better than 1 in 256, it isn't a very good test.
.Pp
If padding is disabled, the input data must be a multiple of the cipher
block length.
.Pp
All RC2 ciphers have the same key and effective key length.
.Pp
Blowfish and RC5 algorithms use a 128-bit key.
.Sh ENC SUPPORTED CIPHERS
.Bd -unfilled -offset indent
aes-[128|192|256]-cbc	128/192/256 bit AES in CBC mode
aes-[128|192|256]	Alias for aes-[128|192|256]-cbc
aes-[128|192|256]-cfb	128/192/256 bit AES in 128 bit CFB mode
aes-[128|192|256]-cfb1	128/192/256 bit AES in 1 bit CFB mode
aes-[128|192|256]-cfb8	128/192/256 bit AES in 8 bit CFB mode
aes-[128|192|256]-ecb	128/192/256 bit AES in ECB mode
aes-[128|192|256]-ofb	128/192/256 bit AES in OFB mode

base64			Base 64

bf			Alias for bf-cbc
bf-cbc			Blowfish in CBC mode
bf-cfb			Blowfish in CFB mode
bf-ecb			Blowfish in ECB mode
bf-ofb			Blowfish in OFB mode

cast			Alias for cast-cbc
cast-cbc		CAST in CBC mode
cast5-cbc		CAST5 in CBC mode
cast5-cfb		CAST5 in CFB mode
cast5-ecb		CAST5 in ECB mode
cast5-ofb		CAST5 in OFB mode

des			Alias for des-cbc
des-cbc			DES in CBC mode
des-cfb			DES in CBC mode
des-ecb			DES in ECB mode
des-ofb			DES in OFB mode

des-ede			Two key triple DES EDE in ECB mode
des-ede-cbc		Two key triple DES EDE in CBC mode
des-ede-cfb		Two key triple DES EDE in CFB mode
des-ede-ofb		Two key triple DES EDE in OFB mode

des3			Alias for des-ede3-cbc
des-ede3		Three key triple DES EDE in ECB mode
des-ede3-cbc		Three key triple DES EDE in CBC mode
des-ede3-cfb		Three key triple DES EDE CFB mode
des-ede3-ofb		Three key triple DES EDE in OFB mode

desx			DESX algorithm

rc2			Alias for rc2-cbc
rc2-cbc			128-bit RC2 in CBC mode
rc2-cfb			128-bit RC2 in CFB mode
rc2-ecb			128-bit RC2 in ECB mode
rc2-ofb			128-bit RC2 in OFB mode
rc2-64-cbc		64-bit RC2 in CBC mode
rc2-40-cbc		40-bit RC2 in CBC mode

rc4			128-bit RC4
rc4-40			40-bit RC4
.Ed
.Sh ENC EXAMPLES
Just base64 encode a binary file:
.Pp
.Dl $ openssl base64 -in file.bin -out file.b64
.Pp
Decode the same file:
.Pp
.Dl $ openssl base64 -d -in file.b64 -out file.bin
.Pp
Encrypt a file using triple DES in CBC mode using a prompted password:
.Pp
.Dl $ openssl des3 -salt -in file.txt -out file.des3
.Pp
Decrypt a file using a supplied password:
.Pp
.Dl "$ openssl des3 -d -in file.des3 -out file.txt -k mypassword"
.Pp
Encrypt a file then base64 encode it
(so it can be sent via mail for example)
using Blowfish in CBC mode:
.Pp
.Dl $ openssl bf -a -salt -in file.txt -out file.bf
.Pp
Base64 decode a file then decrypt it:
.Pp
.Dl "$ openssl bf -d -a -in file.bf -out file.txt"
.Sh ENC BUGS
The
.Fl A
option when used with large files doesn't work properly.
.Pp
There should be an option to allow an iteration count to be included.
.Pp
The
.Nm enc
program only supports a fixed number of algorithms with certain parameters.
Therefore it is not possible to use RC2 with a 76-bit key
or RC4 with an 84-bit key with this program.
.\"
.\" ENGINE
.\"
.Sh ENGINE
.Nm openssl engine
.Op Fl ctv
.Op Fl post Ar cmd
.Op Fl pre Ar cmd
.Op Ar engine ...
.Pp
The
.Nm engine
command provides loadable module information and manipulation
of various engines.
Any options are applied to all engines supplied on the command line,
or all supported engines if none are specified.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl c
For each engine, also list the capabilities.
.It Fl post Ar cmd
Run command
.Ar cmd
against the engine after loading it
(only used if
.Fl t
is also provided).
.It Fl pre Ar cmd
Run command
.Ar cmd
against the engine before any attempts
to load it
(only used if
.Fl t
is also provided).
.It Fl t
For each engine, check that they are really available.
.Fl tt
will display an error trace for unavailable engines.
.It Fl v
Verbose mode.
For each engine, list its 'control commands'.
.Fl vv
will additionally display each command's description.
.Fl vvv
will also add the input flags for each command.
.Fl vvvv
will also show internal input flags.
.El
.\"
.\" ERRSTR
.\"
.Sh ERRSTR
.Nm openssl errstr
.Op Fl stats
.Ar errno ...
.Pp
The
.Nm errstr
command performs error number to error string conversion,
generating a human-readable string representing the error code
.Ar errno .
The string is obtained through the
.Xr ERR_error_string_n 3
function and has the following format:
.Pp
.Dl error:[error code]:[library name]:[function name]:[reason string]
.Pp
.Bq error code
is an 8-digit hexadecimal number.
The remaining fields
.Bq library name ,
.Bq function name ,
and
.Bq reason string
are all ASCII text.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl stats
Print debugging statistics about various aspects of the hash table.
.El
.Sh ERRSTR EXAMPLES
The following error code:
.Pp
.Dl 27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:
.Pp
\&...can be displayed with:
.Pp
.Dl $ openssl errstr 2006D080
.Pp
\&...to produce the error message:
.Pp
.Dl error:2006D080:BIO routines:BIO_new_file:no such file
.\"
.\" GENDH
.\"
.Sh GENDH
Generation of Diffie-Hellman Parameters.
Replaced by
.Nm dhparam .
See
.Sx DHPARAM
above.
.\"
.\" GENDSA
.\"
.Sh GENDSA
.nr nS 1
.Nm "openssl gendsa"
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl engine Ar id
.Op Fl out Ar file
.Op Ar paramfile
.Ek
.nr nS 0
.Pp
The
.Nm gendsa
command generates a DSA private key from a DSA parameter file
(which will typically be generated by the
.Nm openssl dsaparam
command).
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options are specified, no encryption is used.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm gendsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl out Ar file
The output
.Ar file .
If this argument is not specified, standard output is used.
.It Ar paramfile
This option specifies the DSA parameter file to use.
The parameters in this file determine the size of the private key.
DSA parameters can be generated and examined using the
.Nm openssl dsaparam
command.
.El
.Sh GENDSA NOTES
DSA key generation is little more than random number generation so it is
much quicker than RSA key generation, for example.
.\"
.\" GENPKEY
.\"
.Sh GENPKEY
.nr nS 1
.Nm "openssl genpkey"
.Bk -words
.Op Fl algorithm Ar alg
.Op Ar cipher
.Op Fl engine Ar id
.Op Fl genparam
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl paramfile Ar file
.Op Fl pass Ar arg
.Op Fl pkeyopt Ar opt : Ns Ar value
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm genpkey
command generates private keys.
The use of this
program is encouraged over the algorithm specific utilities
because additional algorithm options
and engine-provided algorithms can be used.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl algorithm Ar alg
The public key algorithm to use,
such as RSA, DSA, or DH.
If used this option must precede any
.Fl pkeyopt
options.
The options
.Fl paramfile
and
.Fl algorithm
are mutually exclusive.
.It Ar cipher
Encrypt the private key with the supplied cipher.
Any algorithm name accepted by
.Fn EVP_get_cipherbyname
is acceptable, such as
.Cm des3 .
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm genpkey
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl genparam
Generate a set of parameters instead of a private key.
If used this option must precede any
.Fl algorithm ,
.Fl paramfile ,
or
.Fl pkeyopt
options.
.It Fl out Ar file
The output filename.
If this argument is not specified then standard output is used.
.It Fl outform Ar DER | PEM
This specifies the output format, DER or PEM.
.It Fl paramfile Ar file
Some public key algorithms generate a private key based on a set of parameters.
They can be supplied using this option.
If this option is used the public key
algorithm used is determined by the parameters.
If used this option must precede any
.Fl pkeyopt
options.
The options
.Fl paramfile
and
.Fl algorithm
are mutually exclusive.
.It Fl pass Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pkeyopt Ar opt : Ns Ar value
Set the public key algorithm option
.Ar opt
to
.Ar value .
The precise set of options supported
depends on the public key algorithm used and its implementation.
See
.Sx GENPKEY KEY GENERATION OPTIONS
below for more details.
.It Fl text
Print an (unencrypted) text representation of private and public keys and
parameters along with the DER or PEM structure.
.El
.Sh GENPKEY KEY GENERATION OPTIONS
The options supported by each algorithm
and indeed each implementation of an algorithm can vary.
The options for the
.Nm OpenSSL
implementations are detailed below.
.Bl -tag -width Ds -offset indent
.It rsa_keygen_bits : Ns Ar numbits
(RSA)
The number of bits in the generated key.
If not specified 2048 is used.
.It rsa_keygen_pubexp : Ns Ar value
(RSA)
The RSA public exponent value.
This can be a large decimal or hexadecimal value if preceded by 0x.
The default value is 65537.
.It dsa_paramgen_bits : Ns Ar numbits
(DSA)
The number of bits in the generated parameters.
If not specified 1024 is used.
.It dh_paramgen_prime_len : Ns Ar numbits
(DH)
The number of bits in the prime parameter
.Ar p .
.It dh_paramgen_generator : Ns Ar value
(DH)
The value to use for the generator
.Ar g .
.It ec_paramgen_curve : Ns Ar curve
(EC)
The EC curve to use.
.El
.Sh GENPKEY EXAMPLES
Generate an RSA private key using default parameters:
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem
.Ed
.Pp
Encrypt and output a private key using 128-bit AES and the passphrase "hello":
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem \e
	-aes-128-cbc -pass pass:hello
.Ed
.Pp
Generate a 2048-bit RSA key using 3 as the public exponent:
.Bd -literal -offset indent
$ openssl genpkey -algorithm RSA -out key.pem \e
	-pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:3
.Ed
.Pp
Generate 1024-bit DSA parameters:
.Bd -literal -offset indent
$ openssl genpkey -genparam -algorithm DSA \e
	-out dsap.pem -pkeyopt dsa_paramgen_bits:1024
.Ed
.Pp
Generate a DSA key from parameters:
.Bd -literal -offset indent
$ openssl genpkey -paramfile dsap.pem -out dsakey.pem
.Ed
.Pp
Generate 1024-bit DH parameters:
.Bd -literal -offset indent
$ openssl genpkey -genparam -algorithm DH \e
	-out dhp.pem -pkeyopt dh_paramgen_prime_len:1024
.Ed
.Pp
Generate a DH key from parameters:
.Bd -literal -offset indent
$ openssl genpkey -paramfile dhp.pem -out dhkey.pem
.Ed
.\"
.\" GENRSA
.\"
.Sh GENRSA
.nr nS 1
.Nm "openssl genrsa"
.Bk -words
.Op Fl 3 | f4
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl engine Ar id
.Op Fl out Ar file
.Op Fl passout Ar arg
.Op Ar numbits
.Ek
.nr nS 0
.Pp
The
.Nm genrsa
command generates an RSA private key.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 3 | f4
The public exponent to use, either 3 or 65537.
The default is 65537.
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
If none of these options are specified, no encryption is used.
If encryption is used, a pass phrase is prompted for,
if it is not supplied via the
.Fl passout
option.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm genrsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl out Ar file
The output
.Ar file .
If this argument is not specified, standard output is used.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Ar numbits
The size of the private key to generate in bits.
This must be the last option specified.
The default is 2048.
.El
.Sh GENRSA NOTES
RSA private key generation essentially involves the generation of two prime
numbers.
When generating a private key, various symbols will be output to
indicate the progress of the generation.
A
.Sq \&.
represents each number which has passed an initial sieve test;
.Sq +
means a number has passed a single round of the Miller-Rabin primality test.
A newline means that the number has passed all the prime tests
.Pq the actual number depends on the key size .
.Pp
Because key generation is a random process,
the time taken to generate a key may vary somewhat.
.Sh GENRSA BUGS
A quirk of the prime generation algorithm is that it cannot generate small
primes.
Therefore the number of bits should not be less that 64.
For typical private keys this will not matter because for security reasons
they will be much larger
.Pq typically 2048 bits .
.\"
.\" NSEQ
.\"
.Sh NSEQ
.Nm openssl nseq
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl toseq
.Pp
The
.Nm nseq
command takes a file containing a Netscape certificate
sequence and prints out the certificates contained in it or takes a
file of certificates and converts it into a Netscape certificate
sequence.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl in Ar file
This specifies the input
.Ar file
to read, or standard input if this option is not specified.
.It Fl out Ar file
Specifies the output
.Ar file ,
or standard output by default.
.It Fl toseq
Normally, a Netscape certificate sequence will be input and the output
is the certificates contained in it.
With the
.Fl toseq
option the situation is reversed:
a Netscape certificate sequence is created from a file of certificates.
.El
.Sh NSEQ EXAMPLES
Output the certificates in a Netscape certificate sequence:
.Bd -literal -offset indent
$ openssl nseq -in nseq.pem -out certs.pem
.Ed
.Pp
Create a Netscape certificate sequence:
.Bd -literal -offset indent
$ openssl nseq -in certs.pem -toseq -out nseq.pem
.Ed
.Sh NSEQ NOTES
The PEM-encoded form uses the same headers and footers as a certificate:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
A Netscape certificate sequence is a Netscape specific form that can be sent
to browsers as an alternative to the standard PKCS#7 format when several
certificates are sent to the browser:
for example during certificate enrollment.
It is used by the Netscape certificate server, for example.
.Sh NSEQ BUGS
This program needs a few more options,
like allowing DER or PEM input and output files
and allowing multiple certificate files to be used.
.\"
.\" OCSP
.\"
.Sh OCSP
.nr nS 1
.Nm "openssl ocsp"
.Bk -words
.Op Fl CA Ar file
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl dgst Ar alg
.Oo
.Fl host
.Ar hostname : Ns Ar port
.Oc
.Op Fl index Ar indexfile
.Op Fl issuer Ar file
.Op Fl ndays Ar days
.Op Fl nmin Ar minutes
.Op Fl no_cert_checks
.Op Fl no_cert_verify
.Op Fl no_certs
.Op Fl no_chain
.Op Fl no_intern
.Op Fl no_nonce
.Op Fl no_signature_verify
.Op Fl nonce
.Op Fl noverify
.Op Fl nrequest Ar number
.Op Fl out Ar file
.Op Fl path Ar path
.Op Fl port Ar portnum
.Op Fl req_text
.Op Fl reqin Ar file
.Op Fl reqout Ar file
.Op Fl resp_key_id
.Op Fl resp_no_certs
.Op Fl resp_text
.Op Fl respin Ar file
.Op Fl respout Ar file
.Op Fl rkey Ar file
.Op Fl rother Ar file
.Op Fl rsigner Ar file
.Op Fl serial Ar number
.Op Fl sign_other Ar file
.Op Fl signer Ar file
.Op Fl signkey Ar file
.Op Fl status_age Ar age
.Op Fl text
.Op Fl trust_other
.Op Fl url Ar responder_url
.Op Fl VAfile Ar file
.Op Fl validity_period Ar nsec
.Op Fl verify_other Ar file
.Ek
.nr nS 0
.Pp
The Online Certificate Status Protocol
.Pq OCSP
enables applications to determine the
.Pq revocation
state of an identified certificate
.Pq RFC 2560 .
.Pp
The
.Nm ocsp
command performs many common OCSP tasks.
It can be used to print out requests and responses,
create requests and send queries to an OCSP responder,
and behave like a mini OCSP server itself.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl CAfile Ar file , Fl CApath Ar directory
.Ar file
or
.Ar path
containing trusted CA certificates.
These are used to verify the signature on the OCSP response.
.It Fl cert Ar file
Add the certificate
.Ar file
to the request.
The issuer certificate is taken from the previous
.Fl issuer
option, or an error occurs if no issuer certificate is specified.
.It Fl dgst Ar alg
Sets the digest algorithm to use for certificate identification
in the OCSP request.
By default SHA-1 is used.
.It Xo
.Fl host Ar hostname : Ns Ar port ,
.Fl path Ar path
.Xc
If the
.Fl host
option is present, then the OCSP request is sent to the host
.Ar hostname
on port
.Ar port .
.Fl path
specifies the HTTP path name to use, or
.Sq /
by default.
.It Fl issuer Ar file
This specifies the current issuer certificate.
This option can be used multiple times.
The certificate specified in
.Ar file
must be in PEM format.
This option
.Em must
come before any
.Fl cert
options.
.It Fl no_cert_checks
Don't perform any additional checks on the OCSP response signer's certificate.
That is, do not make any checks to see if the signer's certificate is
authorised to provide the necessary status information:
as a result this option should only be used for testing purposes.
.It Fl no_cert_verify
Don't verify the OCSP response signer's certificate at all.
Since this option allows the OCSP response to be signed by any certificate,
it should only be used for testing purposes.
.It Fl no_certs
Don't include any certificates in signed request.
.It Fl no_chain
Do not use certificates in the response as additional untrusted CA
certificates.
.It Fl no_intern
Ignore certificates contained in the OCSP response
when searching for the signer's certificate.
With this option, the signer's certificate must be specified with either the
.Fl verify_other
or
.Fl VAfile
options.
.It Fl no_signature_verify
Don't check the signature on the OCSP response.
Since this option tolerates invalid signatures on OCSP responses,
it will normally only be used for testing purposes.
.It Fl nonce , no_nonce
Add an OCSP
.Em nonce
extension to a request or disable an OCSP
.Em nonce
addition.
Normally, if an OCSP request is input using the
.Fl respin
option no
.Em nonce
is added:
using the
.Fl nonce
option will force addition of a
.Em nonce .
If an OCSP request is being created (using the
.Fl cert
and
.Fl serial
options)
a
.Em nonce
is automatically added; specifying
.Fl no_nonce
overrides this.
.It Fl noverify
Don't attempt to verify the OCSP response signature or the
.Em nonce
values.
This option will normally only be used for debugging
since it disables all verification of the responder's certificate.
.It Fl out Ar file
Specify output
.Ar file ;
default is standard output.
.It Fl req_text , resp_text , text
Print out the text form of the OCSP request, response, or both, respectively.
.It Fl reqin Ar file , Fl respin Ar file
Read an OCSP request or response file from
.Ar file .
These options are ignored
if an OCSP request or response creation is implied by other options
(for example with the
.Fl serial , cert ,
and
.Fl host
options).
.It Fl reqout Ar file , Fl respout Ar file
Write out the DER-encoded certificate request or response to
.Ar file .
.It Fl serial Ar num
Same as the
.Fl cert
option except the certificate with serial number
.Ar num
is added to the request.
The serial number is interpreted as a decimal integer unless preceded by
.Sq 0x .
Negative integers can also be specified by preceding the value with a
.Sq -
sign.
.It Fl sign_other Ar file
Additional certificates to include in the signed request.
.It Fl signer Ar file , Fl signkey Ar file
Sign the OCSP request using the certificate specified in the
.Fl signer
option and the private key specified by the
.Fl signkey
option.
If the
.Fl signkey
option is not present, then the private key is read from the same file
as the certificate.
If neither option is specified, the OCSP request is not signed.
.It Fl trust_other
The certificates specified by the
.Fl verify_other
option should be explicitly trusted and no additional checks will be
performed on them.
This is useful when the complete responder certificate chain is not available
or trusting a root CA is not appropriate.
.It Fl url Ar responder_url
Specify the responder URL.
Both HTTP and HTTPS
.Pq SSL/TLS
URLs can be specified.
.It Fl VAfile Ar file
.Ar file
containing explicitly trusted responder certificates.
Equivalent to the
.Fl verify_other
and
.Fl trust_other
options.
.It Fl validity_period Ar nsec , Fl status_age Ar age
These options specify the range of times, in seconds, which will be tolerated
in an OCSP response.
Each certificate status response includes a
.Em notBefore
time and an optional
.Em notAfter
time.
The current time should fall between these two values,
but the interval between the two times may be only a few seconds.
In practice the OCSP responder and clients' clocks may not be precisely
synchronised and so such a check may fail.
To avoid this the
.Fl validity_period
option can be used to specify an acceptable error range in seconds,
the default value is 5 minutes.
.Pp
If the
.Em notAfter
time is omitted from a response, then this means that new status
information is immediately available.
In this case the age of the
.Em notBefore
field is checked to see it is not older than
.Ar age
seconds old.
By default, this additional check is not performed.
.It Fl verify_other Ar file
.Ar file
containing additional certificates to search when attempting to locate
the OCSP response signing certificate.
Some responders omit the actual signer's certificate from the response;
this option can be used to supply the necessary certificate in such cases.
.El
.Sh OCSP SERVER OPTIONS
.Bl -tag -width "XXXX"
.It Fl CA Ar file
CA certificate corresponding to the revocation information in
.Ar indexfile .
.It Fl index Ar indexfile
.Ar indexfile
is a text index file in
.Nm ca
format containing certificate revocation information.
.Pp
If the
.Fl index
option is specified, the
.Nm ocsp
utility is in
.Em responder
mode, otherwise it is in
.Em client
mode.
The request(s) the responder processes can be either specified on
the command line (using the
.Fl issuer
and
.Fl serial
options), supplied in a file (using the
.Fl respin
option) or via external OCSP clients (if
.Ar port
or
.Ar url
is specified).
.Pp
If the
.Fl index
option is present, then the
.Fl CA
and
.Fl rsigner
options must also be present.
.It Fl nmin Ar minutes , Fl ndays Ar days
Number of
.Ar minutes
or
.Ar days
when fresh revocation information is available: used in the
.Ar nextUpdate
field.
If neither option is present, the
.Em nextUpdate
field is omitted, meaning fresh revocation information is immediately available.
.It Fl nrequest Ar number
The OCSP server will exit after receiving
.Ar number
requests, default unlimited.
.It Fl port Ar portnum
Port to listen for OCSP requests on.
The port may also be specified using the
.Fl url
option.
.It Fl resp_key_id
Identify the signer certificate using the key ID;
default is to use the subject name.
.It Fl resp_no_certs
Don't include any certificates in the OCSP response.
.It Fl rkey Ar file
The private key to sign OCSP responses with;
if not present, the file specified in the
.Fl rsigner
option is used.
.It Fl rother Ar file
Additional certificates to include in the OCSP response.
.It Fl rsigner Ar file
The certificate to sign OCSP responses with.
.El
.Sh OCSP RESPONSE VERIFICATION
OCSP Response follows the rules specified in RFC 2560.
.Pp
Initially the OCSP responder certificate is located and the signature on
the OCSP request checked using the responder certificate's public key.
.Pp
Then a normal certificate verify is performed on the OCSP responder certificate
building up a certificate chain in the process.
The locations of the trusted certificates used to build the chain can be
specified by the
.Fl CAfile
and
.Fl CApath
options or they will be looked for in the standard
.Nm OpenSSL
certificates
directory.
.Pp
If the initial verify fails, the OCSP verify process halts with an
error.
.Pp
Otherwise the issuing CA certificate in the request is compared to the OCSP
responder certificate: if there is a match then the OCSP verify succeeds.
.Pp
Otherwise the OCSP responder certificate's CA is checked against the issuing
CA certificate in the request.
If there is a match and the OCSPSigning extended key usage is present
in the OCSP responder certificate, then the OCSP verify succeeds.
.Pp
Otherwise the root CA of the OCSP responder's CA is checked to see if it
is trusted for OCSP signing.
If it is, the OCSP verify succeeds.
.Pp
If none of these checks is successful, the OCSP verify fails.
.Pp
What this effectively means is that if the OCSP responder certificate is
authorised directly by the CA it is issuing revocation information about
.Pq and it is correctly configured ,
then verification will succeed.
.Pp
If the OCSP responder is a
.Em global responder
which can give details about multiple CAs and has its own separate
certificate chain, then its root CA can be trusted for OCSP signing.
For example:
.Bd -literal -offset indent
$ openssl x509 -in ocspCA.pem -addtrust OCSPSigning \e
	-out trustedCA.pem
.Ed
.Pp
Alternatively, the responder certificate itself can be explicitly trusted
with the
.Fl VAfile
option.
.Sh OCSP NOTES
As noted, most of the verify options are for testing or debugging purposes.
Normally, only the
.Fl CApath , CAfile
and
.Pq if the responder is a `global VA'
.Fl VAfile
options need to be used.
.Pp
The OCSP server is only useful for test and demonstration purposes:
it is not really usable as a full OCSP responder.
It contains only a very simple HTTP request handling and can only handle
the POST form of OCSP queries.
It also handles requests serially, meaning it cannot respond to
new requests until it has processed the current one.
The text index file format of revocation is also inefficient for large
quantities of revocation data.
.Pp
It is possible to run the
.Nm ocsp
application in
.Em responder
mode via a CGI script using the
.Fl respin
and
.Fl respout
options.
.Sh OCSP EXAMPLES
Create an OCSP request and write it to a file:
.Bd -literal -offset indent
$ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \e
	-reqout req.der
.Ed
.Pp
Send a query to an OCSP responder with URL
.Pa http://ocsp.myhost.com/ ,
save the response to a file and print it out in text form:
.Bd -literal -offset indent
$ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \e
	-url http://ocsp.myhost.com/ -resp_text -respout resp.der
.Ed
.Pp
Read in an OCSP response and print out in text form:
.Pp
.Dl $ openssl ocsp -respin resp.der -text
.Pp
OCSP server on port 8888 using a standard
.Nm ca
configuration, and a separate responder certificate.
All requests and responses are printed to a file:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \e
	rcert.pem -CA demoCA/cacert.pem -text -out log.txt
.Ed
.Pp
As above, but exit after processing one request:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \e
	rcert.pem -CA demoCA/cacert.pem -nrequest 1
.Ed
.Pp
Query status information using internally generated request:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
	demoCA/cacert.pem -issuer demoCA/cacert.pem -serial 1
.Ed
.Pp
Query status information using request read from a file and write
the response to a second file:
.Bd -literal -offset indent
$ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
	demoCA/cacert.pem -reqin req.der -respout resp.der
.Ed
.\"
.\" PASSWD
.\"
.Sh PASSWD
.nr nS 1
.Nm "openssl passwd"
.Op Fl 1 | apr1 | crypt
.Op Fl in Ar file
.Op Fl noverify
.Op Fl quiet
.Op Fl reverse
.Op Fl salt Ar string
.Op Fl stdin
.Op Fl table
.Op Ar password
.nr nS 0
.Pp
The
.Nm passwd
command computes the hash of a password typed at run-time
or the hash of each password in a list.
The password list is taken from the named
.Ar file
for option
.Fl in ,
from stdin for option
.Fl stdin ,
or from the command line, or from the terminal otherwise.
The
.Ux
standard algorithm
.Em crypt
and the MD5-based
.Bx
password algorithm
.Em 1
and its Apache variant
.Em apr1
are available.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 1
Use the MD5 based
.Bx
password algorithm
.Em 1 .
.It Fl apr1
Use the
.Em apr1
algorithm
.Pq Apache variant of the
.Bx
algorithm.
.It Fl crypt
Use the
.Em crypt
algorithm
.Pq default .
.It Fl in Ar file
Read passwords from
.Ar file .
.It Fl noverify
Don't verify when reading a password from the terminal.
.It Fl quiet
Don't output warnings when passwords given on the command line are truncated.
.It Fl reverse
Switch table columns.
This only makes sense in conjunction with the
.Fl table
option.
.It Fl salt Ar string
Use the specified
.Ar salt .
When reading a password from the terminal, this implies
.Fl noverify .
.It Fl stdin
Read passwords from
.Em stdin .
.It Fl table
In the output list, prepend the cleartext password and a TAB character
to each password hash.
.El
.Sh PASSWD EXAMPLES
.Dl $ openssl passwd -crypt -salt xx password
prints
.Qq xxj31ZMTZzkVA .
.Pp
.Dl $ openssl passwd -1 -salt xxxxxxxx password
prints
.Qq $1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a. .
.Pp
.Dl $ openssl passwd -apr1 -salt xxxxxxxx password
prints
.Qq $apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0 .
.\"
.\" PKCS7
.\"
.Sh PKCS7
.nr nS 1
.Nm "openssl pkcs7"
.Bk -words
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl print_certs
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm pkcs7
command processes PKCS#7 files in DER or PEM format.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs7
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read from, or standard input if this option is not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
.Ar DER
format is a DER-encoded PKCS#7 v1.5 structure.
.Ar PEM
.Pq the default
is a base64-encoded version of the DER form with header and footer lines.
.It Fl noout
Don't output the encoded version of the PKCS#7 structure
(or certificates if
.Fl print_certs
is set).
.It Fl out Ar file
Specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl print_certs
Prints out any certificates or CRLs contained in the file.
They are preceded by their subject and issuer names in a one-line format.
.It Fl text
Prints out certificate details in full rather than just subject and
issuer names.
.El
.Sh PKCS7 EXAMPLES
Convert a PKCS#7 file from PEM to DER:
.Pp
.Dl $ openssl pkcs7 -in file.pem -outform DER -out file.der
.Pp
Output all certificates in a file:
.Pp
.Dl $ openssl pkcs7 -in file.pem -print_certs -out certs.pem
.Sh PKCS7 NOTES
The PEM PKCS#7 format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PKCS7-----
-----END PKCS7-----
.Ed
.Pp
For compatibility with some CAs it will also accept:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Sh PKCS7 RESTRICTIONS
There is no option to print out all the fields of a PKCS#7 file.
.Pp
The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC 2315.
They cannot currently parse, for example, the new CMS as described in RFC 2630.
.\"
.\" PKCS8
.\"
.Sh PKCS8
.nr nS 1
.Nm "openssl pkcs8"
.Bk -words
.Op Fl embed
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl nocrypt
.Op Fl noiter
.Op Fl nooct
.Op Fl nsdb
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl topk8
.Op Fl v1 Ar alg
.Op Fl v2 Ar alg
.Ek
.nr nS 0
.Pp
The
.Nm pkcs8
command processes private keys in PKCS#8 format.
It can handle both unencrypted PKCS#8 PrivateKeyInfo format
and EncryptedPrivateKeyInfo format with a variety of PKCS#5
.Pq v1.5 and v2.0
and PKCS#12 algorithms.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl embed
This option generates DSA keys in a broken format.
The DSA parameters are embedded inside the
.Em PrivateKey
structure.
In this form the OCTET STRING contains an ASN1 SEQUENCE consisting of
two structures:
a SEQUENCE containing the parameters and an ASN1 INTEGER containing
the private key.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs8
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read a key from, or standard input if this option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Ar DER | PEM
This specifies the input format.
If a PKCS#8 format key is expected on input,
then either a
DER- or PEM-encoded version of a PKCS#8 key will be expected.
Otherwise the DER or PEM format of the traditional format private key is used.
.It Fl nocrypt
PKCS#8 keys generated or input are normally PKCS#8
.Em EncryptedPrivateKeyInfo
structures using an appropriate password-based encryption algorithm.
With this option, an unencrypted
.Em PrivateKeyInfo
structure is expected or output.
This option does not encrypt private keys at all and should only be used
when absolutely necessary.
Certain software such as some versions of Java code signing software use
unencrypted private keys.
.It Fl noiter
Use an iteration count of 1.
See the
.Sx PKCS12
section below for a detailed explanation of this option.
.It Fl nooct
This option generates RSA private keys in a broken format that some software
uses.
Specifically the private key should be enclosed in an OCTET STRING,
but some software just includes the structure itself without the
surrounding OCTET STRING.
.It Fl nsdb
This option generates DSA keys in a broken format compatible with Netscape
private key databases.
The
.Em PrivateKey
contains a SEQUENCE consisting of the public and private keys, respectively.
.It Fl out Ar file
This specifies the output
.Ar file
to write a key to, or standard output by default.
If any encryption options are set, a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl topk8
Normally, a PKCS#8 private key is expected on input and a traditional format
private key will be written.
With the
.Fl topk8
option the situation is reversed:
it reads a traditional format private key and writes a PKCS#8 format key.
.It Fl v1 Ar alg
This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to use.
A complete list of possible algorithms is included below.
.It Fl v2 Ar alg
This option enables the use of PKCS#5 v2.0 algorithms.
Normally, PKCS#8 private keys are encrypted with the password-based
encryption algorithm called
.Em pbeWithMD5AndDES-CBC ;
this uses 56-bit DES encryption but it was the strongest encryption
algorithm supported in PKCS#5 v1.5.
Using the
.Fl v2
option PKCS#5 v2.0 algorithms are used which can use any
encryption algorithm such as 168-bit triple DES or 128-bit RC2, however
not many implementations support PKCS#5 v2.0 yet.
If using private keys with
.Nm OpenSSL
then this doesn't matter.
.Pp
The
.Ar alg
argument is the encryption algorithm to use; valid values include
.Ar des , des3 ,
and
.Ar rc2 .
It is recommended that
.Ar des3
is used.
.El
.Sh PKCS8 NOTES
The encrypted form of a PEM-encoded PKCS#8 file uses the following
headers and footers:
.Bd -unfilled -offset indent
-----BEGIN ENCRYPTED PRIVATE KEY-----
-----END ENCRYPTED PRIVATE KEY-----
.Ed
.Pp
The unencrypted form uses:
.Bd -unfilled -offset indent
-----BEGIN PRIVATE KEY-----
-----END PRIVATE KEY-----
.Ed
.Pp
Private keys encrypted using PKCS#5 v2.0 algorithms and high iteration
counts are more secure than those encrypted using the traditional
.Nm SSLeay
compatible formats.
So if additional security is considered important, the keys should be converted.
.Pp
The default encryption is only 56 bits because this is the encryption
that most current implementations of PKCS#8 support.
.Pp
Some software may use PKCS#12 password-based encryption algorithms
with PKCS#8 format private keys: these are handled automatically
but there is no option to produce them.
.Pp
It is possible to write out
DER-encoded encrypted private keys in PKCS#8 format because the encryption
details are included at an ASN1
level whereas the traditional format includes them at a PEM level.
.Sh PKCS#5 V1.5 AND PKCS#12 ALGORITHMS
Various algorithms can be used with the
.Fl v1
command line option, including PKCS#5 v1.5 and PKCS#12.
These are described in more detail below.
.Pp
.Bl -tag -width "XXXX" -compact
.It Ar PBE-MD2-DES | PBE-MD5-DES
These algorithms were included in the original PKCS#5 v1.5 specification.
They only offer 56 bits of protection since they both use DES.
.Pp
.It Ar PBE-SHA1-RC2-64 | PBE-MD2-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
These algorithms are not mentioned in the original PKCS#5 v1.5 specification
but they use the same key derivation algorithm and are supported by some
software.
They are mentioned in PKCS#5 v2.0.
They use either 64-bit RC2 or 56-bit DES.
.Pp
.It Ar PBE-SHA1-RC4-128 | PBE-SHA1-RC4-40 | PBE-SHA1-3DES | PBE-SHA1-2DES
.It Ar PBE-SHA1-RC2-128 | PBE-SHA1-RC2-40
These algorithms use the PKCS#12 password-based encryption algorithm and
allow strong encryption algorithms like triple DES or 128-bit RC2 to be used.
.El
.Sh PKCS8 EXAMPLES
Convert a private key from traditional to PKCS#5 v2.0 format using triple DES:
.Pp
.Dl "$ openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem"
.Pp
Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm
.Pq DES :
.Pp
.Dl $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem
.Pp
Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm
.Pq 3DES :
.Bd -literal -offset indent
$ openssl pkcs8 -in key.pem -topk8 -out enckey.pem \e
	-v1 PBE-SHA1-3DES
.Ed
.Pp
Read a DER-unencrypted PKCS#8 format private key:
.Pp
.Dl "$ openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem"
.Pp
Convert a private key from any PKCS#8 format to traditional format:
.Pp
.Dl $ openssl pkcs8 -in pk8.pem -out key.pem
.Sh PKCS8 STANDARDS
Test vectors from this PKCS#5 v2.0 implementation were posted to the
pkcs-tng mailing list using triple DES, DES and RC2 with high iteration counts;
several people confirmed that they could decrypt the private
keys produced and therefore it can be assumed that the PKCS#5 v2.0
implementation is reasonably accurate at least as far as these
algorithms are concerned.
.Pp
The format of PKCS#8 DSA
.Pq and other
private keys is not well documented:
it is hidden away in PKCS#11 v2.01, section 11.9;
.Nm OpenSSL Ns Li 's
default DSA PKCS#8 private key format complies with this standard.
.Sh PKCS8 BUGS
There should be an option that prints out the encryption algorithm
in use and other details such as the iteration count.
.Pp
PKCS#8 using triple DES and PKCS#5 v2.0 should be the default private
key format; for
.Nm OpenSSL
compatibility, several of the utilities use the old format at present.
.\"
.\" PKCS12
.\"
.Sh PKCS12
.nr nS 1
.Nm "openssl pkcs12"
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl cacerts
.Op Fl CAfile Ar file
.Op Fl caname Ar name
.Op Fl CApath Ar directory
.Op Fl certfile Ar file
.Op Fl certpbe Ar alg
.Op Fl chain
.Op Fl clcerts
.Op Fl CSP Ar name
.Op Fl descert
.Op Fl engine Ar id
.Op Fl export
.Op Fl in Ar file
.Op Fl info
.Op Fl inkey Ar file
.Op Fl keyex
.Op Fl keypbe Ar alg
.Op Fl keysig
.Op Fl macalg Ar alg
.Op Fl maciter
.Op Fl name Ar name
.Op Fl nocerts
.Op Fl nodes
.Op Fl noiter
.Op Fl nokeys
.Op Fl nomac
.Op Fl nomaciter
.Op Fl nomacver
.Op Fl noout
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl twopass
.Ek
.nr nS 0
.Pp
The
.Nm pkcs12
command allows PKCS#12 files
.Pq sometimes referred to as PFX files
to be created and parsed.
PKCS#12 files are used by several programs including Netscape, MSIE
and MS Outlook.
.Pp
There are a lot of options; the meaning of some depends on whether a
PKCS#12 file is being created or parsed.
By default, a PKCS#12 file is parsed;
a PKCS#12 file can be created by using the
.Fl export
option
.Pq see below .
.Sh PKCS12 PARSING OPTIONS
.Bl -tag -width "XXXX"
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
Use AES, DES, or triple DES, respectively,
to encrypt private keys before outputting.
The default is triple DES.
.It Fl cacerts
Only output CA certificates
.Pq not client certificates .
.It Fl clcerts
Only output client certificates
.Pq not CA certificates .
.It Fl in Ar file
This specifies the
.Ar file
of the PKCS#12 file to be parsed.
Standard input is used by default.
.It Fl info
Output additional information about the PKCS#12 file structure,
algorithms used, and iteration counts.
.It Fl nocerts
No certificates at all will be output.
.It Fl nodes
Don't encrypt the private keys at all.
.It Fl nokeys
No private keys will be output.
.It Fl nomacver
Don't attempt to verify the integrity MAC before reading the file.
.It Fl noout
This option inhibits output of the keys and certificates to the output file
version of the PKCS#12 file.
.It Fl out Ar file
The
.Ar file
to write certificates and private keys to, standard output by default.
They are all written in PEM format.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl twopass
Prompt for separate integrity and encryption passwords: most software
always assumes these are the same so this option will render such
PKCS#12 files unreadable.
.El
.Sh PKCS12 FILE CREATION OPTIONS
.Bl -tag -width "XXXX"
.It Fl CAfile Ar file
CA storage as a file.
.It Fl CApath Ar directory
CA storage as a directory.
This directory must be a standard certificate directory:
that is, a hash of each subject name (using
.Cm x509 -hash )
should be linked to each certificate.
.It Fl caname Ar name
This specifies the
.Qq friendly name
for other certificates.
This option may be used multiple times to specify names for all certificates
in the order they appear.
Netscape ignores friendly names on other certificates,
whereas MSIE displays them.
.It Fl certfile Ar file
A file to read additional certificates from.
.It Fl certpbe Ar alg , Fl keypbe Ar alg
These options allow the algorithm used to encrypt the private key and
certificates to be selected.
Any PKCS#5 v1.5 or PKCS#12 PBE algorithm name can be used (see the
.Sx PKCS12 NOTES
section for more information).
If a cipher name
(as output by the
.Cm list-cipher-algorithms
command) is specified then it
is used with PKCS#5 v2.0.
For interoperability reasons it is advisable to only use PKCS#12 algorithms.
.It Fl chain
If this option is present, an attempt is made to include the entire
certificate chain of the user certificate.
The standard CA store is used for this search.
If the search fails, it is considered a fatal error.
.It Fl CSP Ar name
Write
.Ar name
as a Microsoft CSP name.
.It Fl descert
Encrypt the certificate using triple DES; this may render the PKCS#12
file unreadable by some
.Qq export grade
software.
By default, the private key is encrypted using triple DES and the
certificate using 40-bit RC2.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkcs12
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl export
This option specifies that a PKCS#12 file will be created rather than
parsed.
.It Fl in Ar file
The
.Ar file
to read certificates and private keys from, standard input by default.
They must all be in PEM format.
The order doesn't matter but one private key and its corresponding
certificate should be present.
If additional certificates are present, they will also be included
in the PKCS#12 file.
.It Fl inkey Ar file
File to read private key from.
If not present, a private key must be present in the input file.
.It Fl keyex | keysig
Specifies that the private key is to be used for key exchange or just signing.
This option is only interpreted by MSIE and similar MS software.
Normally,
.Qq export grade
software will only allow 512-bit RSA keys to be
used for encryption purposes, but arbitrary length keys for signing.
The
.Fl keysig
option marks the key for signing only.
Signing only keys can be used for S/MIME signing, authenticode
.Pq ActiveX control signing
and SSL client authentication;
however, due to a bug only MSIE 5.0 and later support
the use of signing only keys for SSL client authentication.
.It Fl macalg Ar alg
Specify the MAC digest algorithm.
If not included then SHA1 is used.
.It Fl maciter
This option is included for compatibility with previous versions; it used
to be needed to use MAC iterations counts but they are now used by default.
.It Fl name Ar name
This specifies the
.Qq friendly name
for the certificate and private key.
This name is typically displayed in list boxes by software importing the file.
.It Fl nomac
Don't attempt to provide the MAC integrity.
.It Fl nomaciter , noiter
These options affect the iteration counts on the MAC and key algorithms.
Unless you wish to produce files compatible with MSIE 4.0, you should leave
these options alone.
.Pp
To discourage attacks by using large dictionaries of common passwords,
the algorithm that derives keys from passwords can have an iteration count
applied to it: this causes a certain part of the algorithm to be repeated
and slows it down.
The MAC is used to check the file integrity but since it will normally
have the same password as the keys and certificates it could also be attacked.
By default, both MAC and encryption iteration counts are set to 2048;
using these options the MAC and encryption iteration counts can be set to 1.
Since this reduces the file security you should not use these options
unless you really have to.
Most software supports both MAC and key iteration counts.
MSIE 4.0 doesn't support MAC iteration counts, so it needs the
.Fl nomaciter
option.
.It Fl out Ar file
This specifies
.Ar file
to write the PKCS#12 file to.
Standard output is used by default.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.El
.Sh PKCS12 NOTES
Although there are a large number of options,
most of them are very rarely used.
For PKCS#12 file parsing, only
.Fl in
and
.Fl out
need to be used for PKCS#12 file creation.
.Fl export
and
.Fl name
are also used.
.Pp
If none of the
.Fl clcerts , cacerts ,
or
.Fl nocerts
options are present, then all certificates will be output in the order
they appear in the input PKCS#12 files.
There is no guarantee that the first certificate present is
the one corresponding to the private key.
Certain software which requires a private key and certificate and assumes
the first certificate in the file is the one corresponding to the private key:
this may not always be the case.
Using the
.Fl clcerts
option will solve this problem by only outputting the certificate
corresponding to the private key.
If the CA certificates are required, they can be output to a separate
file using the
.Fl nokeys
and
.Fl cacerts
options to just output CA certificates.
.Pp
The
.Fl keypbe
and
.Fl certpbe
algorithms allow the precise encryption algorithms for private keys
and certificates to be specified.
Normally, the defaults are fine but occasionally software can't handle
triple DES encrypted private keys;
then the option
.Fl keypbe Ar PBE-SHA1-RC2-40
can be used to reduce the private key encryption to 40-bit RC2.
A complete description of all algorithms is contained in the
.Sx PKCS8
section above.
.Sh PKCS12 EXAMPLES
Parse a PKCS#12 file and output it to a file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -out file.pem
.Pp
Output only client certificates to a file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -clcerts -out file.pem
.Pp
Don't encrypt the private key:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -out file.pem -nodes
.Pp
Print some info about a PKCS#12 file:
.Pp
.Dl $ openssl pkcs12 -in file.p12 -info -noout
.Pp
Create a PKCS#12 file:
.Bd -literal -offset indent
$ openssl pkcs12 -export -in file.pem -out file.p12 \e
	-name "My Certificate"
.Ed
.Pp
Include some extra certificates:
.Bd -literal -offset indent
$ openssl pkcs12 -export -in file.pem -out file.p12 \e
	-name "My Certificate" -certfile othercerts.pem
.Ed
.Sh PKCS12 BUGS
Some would argue that the PKCS#12 standard is one big bug :\-)
.Pp
Versions of
.Nm OpenSSL
before 0.9.6a had a bug in the PKCS#12 key generation routines.
Under rare circumstances this could produce a PKCS#12 file encrypted
with an invalid key.
As a result some PKCS#12 files which triggered this bug
from other implementations
.Pq MSIE or Netscape
could not be decrypted by
.Nm OpenSSL
and similarly
.Nm OpenSSL
could produce PKCS#12 files which could not be decrypted by other
implementations.
The chances of producing such a file are relatively small: less than 1 in 256.
.Pp
A side effect of fixing this bug is that any old invalidly encrypted PKCS#12
files can no longer be parsed by the fixed version.
Under such circumstances the
.Nm pkcs12
utility will report that the MAC is OK but fail with a decryption
error when extracting private keys.
.Pp
This problem can be resolved by extracting the private keys and certificates
from the PKCS#12 file using an older version of
.Nm OpenSSL
and recreating
the PKCS#12 file from the keys and certificates using a newer version of
.Nm OpenSSL .
For example:
.Bd -literal -offset indent
$ old-openssl -in bad.p12 -out keycerts.pem
$ openssl -in keycerts.pem -export -name "My PKCS#12 file" \e
	-out fixed.p12
.Ed
.\"
.\" PKEY
.\"
.Sh PKEY
.nr nS 1
.Nm "openssl pkey"
.Bk -words
.Op Ar cipher
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Op Fl text_pub
.Ek
.nr nS 0
.Pp
The
.Nm pkey
command processes public or private keys.
They can be converted between various forms
and their components printed out.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Ar cipher
These options encrypt the private key with the supplied cipher.
Any algorithm name accepted by
.Fn EVP_get_cipherbyname
is acceptable, such as
.Cm des3 .
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkey
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input filename to read a key from,
or standard input if this option is not specified.
If the key is encrypted a pass phrase will be prompted for.
.It Fl inform Ar DER | PEM
This specifies the input format, DER or PEM.
.It Fl noout
Do not output the encoded version of the key.
.It Fl out Ar file
This specifies the output filename to write a key to,
or standard output if this option is not specified.
If any encryption options are set then a pass phrase
will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | PEM
This specifies the output format;
the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubin
By default a private key is read from the input file:
with this option a public key is read instead.
.It Fl pubout
By default a private key is output:
with this option a public key will be output instead.
This option is automatically set if
the input is a public key.
.It Fl text
Print out the various public or private key components in
plain text in addition to the encoded version.
.It Fl text_pub
Print out only public key components
even if a private key is being processed.
.El
.Sh PKEY EXAMPLES
To remove the pass phrase on an RSA private key:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -out keyout.pem
.Ed
.Pp
To encrypt a private key using triple DES:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -des3 -out keyout.pem
.Ed
.Pp
To convert a private key from PEM to DER format:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -outform DER -out keyout.der
.Ed
.Pp
To print the components of a private key to standard output:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -text -noout
.Ed
.Pp
To print the public components of a private key to standard output:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -text_pub -noout
.Ed
.Pp
To just output the public part of a private key:
.Bd -literal -offset indent
$ openssl pkey -in key.pem -pubout -out pubkey.pem
.Ed
.\"
.\" PKEYPARAM
.\"
.Sh PKEYPARAM
.Cm openssl pkeyparam
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl noout
.Op Fl out Ar file
.Op Fl text
.Pp
The
.Nm pkey
command processes public or private keys.
They can be converted between various forms and their components printed out.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkeyparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input filename to read parameters from,
or standard input if this option is not specified.
.It Fl noout
Do not output the encoded version of the parameters.
.It Fl out Ar file
This specifies the output filename to write parameters to,
or standard output if this option is not specified.
.It Fl text
Prints out the parameters in plain text in addition to the encoded version.
.El
.Sh PKEYPARAM EXAMPLES
Print out text version of parameters:
.Bd -literal -offset indent
$ openssl pkeyparam -in param.pem -text
.Ed
.Sh PKEYPARAM NOTES
There are no
.Fl inform
or
.Fl outform
options for this command because only PEM format is supported
because the key type is determined by the PEM headers.
.\"
.\" PKEYUTL
.\"
.Sh PKEYUTL
.nr nS 1
.Nm "openssl pkeyutl"
.Bk -words
.Op Fl asn1parse
.Op Fl certin
.Op Fl decrypt
.Op Fl derive
.Op Fl encrypt
.Op Fl engine Ar id
.Op Fl hexdump
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keyform Ar DER | ENGINE | PEM
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl peerform Ar DER | ENGINE | PEM
.Op Fl peerkey Ar file
.Op Fl pkeyopt Ar opt : Ns Ar value
.Op Fl pubin
.Op Fl rev
.Op Fl sigfile Ar file
.Op Fl sign
.Op Fl verify
.Op Fl verifyrecover
.Ek
.nr nS 0
.Pp
The
.Nm pkeyutl
command can be used to perform public key operations using
any supported algorithm.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1parse
ASN1parse the output data.
This is useful when combined with the
.Fl verifyrecover
option when an ASN1 structure is signed.
.It Fl certin
The input is a certificate containing a public key.
.It Fl decrypt
Decrypt the input data using a private key.
.It Fl derive
Derive a shared secret using the peer key.
.It Fl encrypt
Encrypt the input data using a public key.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm pkeyutl
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl hexdump
Hex dump the output data.
.It Fl in Ar file
Specify the input filename to read data from,
or standard input if this option is not specified.
.It Fl inkey Ar file
The input key file.
By default it should be a private key.
.It Fl keyform Ar DER | ENGINE | PEM
The key format DER, ENGINE, or PEM.
.It Fl out Ar file
Specify the output filename to write to,
or standard output by default.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl peerform Ar DER | ENGINE | PEM
The peer key format DER, ENGINE, or PEM.
.It Fl peerkey Ar file
The peer key file, used by key derivation (agreement) operations.
.It Fl pkeyopt Ar opt : Ns Ar value
Public key options.
.It Fl pubin
The input file is a public key.
.It Fl rev
Reverse the order of the input buffer.
This is useful for some libraries (such as CryptoAPI)
which represent the buffer in little endian format.
.It Fl sigfile Ar file
Signature file (verify operation only).
.It Fl sign
Sign the input data and output the signed result.
This requires a private key.
.It Fl verify
Verify the input data against the signature file and indicate if the
verification succeeded or failed.
.It Fl verifyrecover
Verify the input data and output the recovered data.
.El
.Sh PKEYUTL NOTES
The operations and options supported vary according to the key algorithm
and its implementation.
The
.Nm OpenSSL
operations and options are indicated below.
.Pp
Unless otherwise mentioned all algorithms support the
.Ar digest : Ns Ar alg
option which specifies the digest in use
for sign, verify, and verifyrecover operations.
The value
.Ar alg
should represent a digest name as used in the
.Fn EVP_get_digestbyname
function, for example
.Cm sha1 .
.Ss RSA algorithm
The RSA algorithm supports the
encrypt, decrypt, sign, verify, and verifyrecover operations in general.
Some padding modes only support some of these
operations however.
.Bl -tag -width Ds
.It rsa_padding_mode : Ns Ar mode
This sets the RSA padding mode.
Acceptable values for
.Ar mode
are
.Cm pkcs1
for PKCS#1 padding;
.Cm sslv3
for SSLv3 padding;
.Cm none
for no padding;
.Cm oaep
for OAEP mode;
.Cm x931
for X9.31 mode;
and
.Cm pss
for PSS.
.Pp
In PKCS#1 padding if the message digest is not set then the supplied data is
signed or verified directly instead of using a DigestInfo structure.
If a digest is set then a DigestInfo
structure is used and its length
must correspond to the digest type.
.Pp
For oeap mode only encryption and decryption is supported.
.Pp
For x931 if the digest type is set it is used to format the block data;
otherwise the first byte is used to specify the X9.31 digest ID.
Sign, verify, and verifyrecover can be performed in this mode.
.Pp
For pss mode only sign and verify are supported and the digest type must be
specified.
.It rsa_pss_saltlen : Ns Ar len
For pss
mode only this option specifies the salt length.
Two special values are supported:
-1 sets the salt length to the digest length.
When signing -2 sets the salt length to the maximum permissible value.
When verifying -2 causes the salt length to be automatically determined
based on the PSS block structure.
.El
.Ss DSA algorithm
The DSA algorithm supports the sign and verify operations.
Currently there are no additional options other than
.Ar digest .
Only the SHA1 digest can be used and this digest is assumed by default.
.Ss DH algorithm
The DH algorithm supports the derive operation
and no additional options.
.Ss EC algorithm
The EC algorithm supports the sign, verify, and derive operations.
The sign and verify operations use ECDSA and derive uses ECDH.
Currently there are no additional options other than
.Ar digest .
Only the SHA1 digest can be used and this digest is assumed by default.
.Sh PKEYUTL EXAMPLES
Sign some data using a private key:
.Bd -literal -offset indent
$ openssl pkeyutl -sign -in file -inkey key.pem -out sig
.Ed
.Pp
Recover the signed data (e.g. if an RSA key is used):
.Bd -literal -offset indent
$ openssl pkeyutl -verifyrecover -in sig -inkey key.pem
.Ed
.Pp
Verify the signature (e.g. a DSA key):
.Bd -literal -offset indent
$ openssl pkeyutl -verify -in file -sigfile sig \e
	-inkey key.pem
.Ed
.Pp
Sign data using a message digest value (this is currently only valid for RSA):
.Bd -literal -offset indent
$ openssl pkeyutl -sign -in file -inkey key.pem \e
	-out sig -pkeyopt digest:sha256
.Ed
.Pp
Derive a shared secret value:
.Bd -literal -offset indent
$ openssl pkeyutl -derive -inkey key.pem \e
	-peerkey pubkey.pem -out secret
.Ed
.\"
.\" PRIME
.\"
.Sh PRIME
.Cm openssl prime
.Op Fl bits Ar n
.Op Fl checks Ar n
.Op Fl generate
.Op Fl hex
.Op Fl safe
.Ar p
.Pp
The
.Nm prime
command is used to generate prime numbers,
or to check numbers for primality.
Results are probabilistic:
they have an exceedingly high likelihood of being correct,
but are not guaranteed.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl bits Ar n
Specify the number of bits in the generated prime number.
Must be used in conjunction with
.Fl generate .
.It Fl checks Ar n
Perform a Miller-Rabin probabilistic primality test with
.Ar n
iterations.
The default is 20.
.It Fl generate
Generate a pseudo-random prime number.
Must be used in conjunction with
.Fl bits .
.It Fl hex
Output in hex format.
.It Fl safe
Generate only
.Qq safe
prime numbers
(i.e. a prime p so that (p-1)/2 is also prime).
.It Ar p
Test if number
.Ar p
is prime.
.El
.\"
.\" RAND
.\"
.Sh RAND
.nr nS 1
.Nm "openssl rand"
.Op Fl base64
.Op Fl engine Ar id
.Op Fl hex
.Op Fl out Ar file
.Ar num
.nr nS 0
.Pp
The
.Nm rand
command outputs
.Ar num
pseudo-random bytes.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl base64
Perform
.Em base64
encoding on the output.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rand
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl hex
Specify hexadecimal output.
.It Fl out Ar file
Write to
.Ar file
instead of standard output.
.El
.\"
.\" REQ
.\"
.Sh REQ
.nr nS 1
.Nm "openssl req"
.Bk -words
.Op Fl asn1-kludge
.Op Fl batch
.Op Fl config Ar file
.Op Fl days Ar n
.Op Fl engine Ar id
.Op Fl extensions Ar section
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl key Ar keyfile
.Op Fl keyform Ar DER | PEM
.Op Fl keyout Ar file
.Op Fl md4 | md5 | sha1
.Op Fl modulus
.Op Fl nameopt Ar option
.Op Fl new
.Op Fl newhdr
.Op Fl newkey Ar arg
.Op Fl no-asn1-kludge
.Op Fl nodes
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubkey
.Op Fl reqexts Ar section
.Op Fl reqopt Ar option
.Op Fl set_serial Ar n
.Op Fl subj Ar arg
.Op Fl subject
.Op Fl text
.Op Fl utf8
.Op Fl verbose
.Op Fl verify
.Op Fl x509
.Ek
.nr nS 0
.Pp
The
.Nm req
command primarily creates and processes certificate requests
in PKCS#10 format.
It can additionally create self-signed certificates,
for use as root CAs, for example.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1-kludge
By default, the
.Nm req
command outputs certificate requests containing
no attributes in the correct PKCS#10 format.
However certain CAs will only
accept requests containing no attributes in an invalid form: this
option produces this invalid format.
.Pp
More precisely, the
.Em Attributes
in a PKCS#10 certificate request are defined as a SET OF Attribute.
They are
.Em not
optional, so if no attributes are present then they should be encoded as an
empty SET OF.
The invalid form does not include the empty
SET OF, whereas the correct form does.
.Pp
It should be noted that very few CAs still require the use of this option.
.It Fl batch
Non-interactive mode.
.It Fl config Ar file
This allows an alternative configuration file to be specified;
this overrides the compile time filename or any specified in
the
.Ev OPENSSL_CONF
environment variable.
.It Fl days Ar n
When the
.Fl x509
option is being used, this specifies the number of
days to certify the certificate for.
The default is 30 days.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm req
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl extensions Ar section , Fl reqexts Ar section
These options specify alternative sections to include certificate
extensions (if the
.Fl x509
option is present) or certificate request extensions.
This allows several different sections to
be used in the same configuration file to specify requests for
a variety of purposes.
.It Fl in Ar file
This specifies the input
.Ar file
to read a request from, or standard input
if this option is not specified.
A request is only read if the creation options
.Fl new
and
.Fl newkey
are not specified.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded form compatible with the PKCS#10.
The
.Ar PEM
form is the default format:
it consists of the DER format base64-encoded with additional header and
footer lines.
.It Fl key Ar keyfile
This specifies the file to read the private key from.
It also accepts PKCS#8 format private keys for PEM format files.
.It Fl keyform Ar DER | PEM
The format of the private key file specified in the
.Fl key
argument.
.Ar PEM
is the default.
.It Fl keyout Ar file
This gives the
.Ar file
to write the newly created private key to.
If this option is not specified, the filename present in the
configuration file is used.
.It Fl md4 | md5 | sha1
This specifies the message digest to sign the request with.
This overrides the digest algorithm specified in the configuration file.
.Pp
Some public key algorithms may override this choice.
For instance, DSA signatures always use SHA1.
.It Fl modulus
This option prints out the value of the modulus of the public key
contained in the request.
.It Fl nameopt Ar option , Fl reqopt Ar option
These options determine how the subject or issuer names are displayed.
The
.Ar option
argument can be a single option or multiple options separated by commas.
Alternatively, these options may be used more than once to set multiple options.
See the
.Sx X509
section below for details.
.It Fl new
This option generates a new certificate request.
It will prompt the user for the relevant field values.
The actual fields prompted for and their maximum and minimum sizes
are specified in the configuration file and any requested extensions.
.Pp
If the
.Fl key
option is not used, it will generate a new RSA private
key using information specified in the configuration file.
.It Fl newhdr
Adds the word NEW to the PEM file header and footer lines
on the outputed request.
Some software
.Pq Netscape certificate server
and some CAs need this.
.It Fl newkey Ar arg
This option creates a new certificate request and a new private key.
The argument takes one of several forms.
.Ar rsa : Ns Ar nbits ,
where
.Ar nbits
is the number of bits, generates an RSA key
.Ar nbits
in size.
If
.Ar nbits
is omitted, i.e.\&
.Cm -newkey rsa
specified,
the default key size, specified in the configuration file, is used.
.Pp
All other algorithms support the
.Ar alg : Ns Ar file
form,
where file may be an algorithm parameter file,
created by the
.Cm genpkey -genparam
command or an X.509 certificate for a key with approriate algorithm.
.Pp
.Ar param : Ns Ar file
generates a key using the parameter file or certificate
.Ar file ;
the algorithm is determined by the parameters.
.Ar algname : Ns Ar file
use algorithm
.Ar algname
and parameter file
.Ar file :
the two algorithms must match or an error occurs.
.Ar algname
just uses algorithm
.Ar algname ,
and parameters, if necessary,
should be specified via the
.Fl pkeyopt
option.
.Pp
.Ar dsa : Ns Ar file
generates a DSA key using the parameters in the file
.Ar file .
.It Fl no-asn1-kludge
Reverses the effect of
.Fl asn1-kludge .
.It Fl nodes
If this option is specified and a private key is created, it
will not be encrypted.
.It Fl noout
This option prevents output of the encoded version of the request.
.It Fl out Ar file
This specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubkey
Outputs the public key.
.It Fl reqopt Ar option
Customise the output format used with
.Fl text .
The
.Ar option
argument can be a single option or multiple options separated by commas.
.Pp
See the discussion of the
.Fl certopt
option in the
.Nm x509
command.
.It Fl set_serial Ar n
Serial number to use when outputting a self-signed certificate.
This may be specified as a decimal value or a hex value if preceded by
.Sq 0x .
It is possible to use negative serial numbers but this is not recommended.
.It Fl subj Ar arg
Replaces subject field of input request with specified data and outputs
modified request.
The arg must be formatted as
.Em /type0=value0/type1=value1/type2=... ;
characters may be escaped by
.Sq \e
.Pq backslash ;
no spaces are skipped.
.It Fl subject
Prints out the request subject (or certificate subject if
.Fl x509
is specified.
.It Fl text
Prints out the certificate request in text form.
.It Fl utf8
This option causes field values to be interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
.It Fl verbose
Print extra details about the operations being performed.
.It Fl verify
Verifies the signature on the request.
.It Fl x509
This option outputs a self-signed certificate instead of a certificate
request.
This is typically used to generate a test certificate or
a self-signed root CA.
The extensions added to the certificate
.Pq if any
are specified in the configuration file.
Unless specified using the
.Fl set_serial
option, 0 will be used for the serial number.
.El
.Sh REQ CONFIGURATION FILE FORMAT
The configuration options are specified in the
.Em req
section of the configuration file.
As with all configuration files, if no value is specified in the specific
section (i.e.\&
.Em req )
then the initial unnamed or
.Em default
section is searched too.
.Pp
The options available are described in detail below.
.Bl -tag -width "XXXX"
.It Ar attributes
This specifies the section containing any request attributes: its format
is the same as
.Ar distinguished_name .
Typically these may contain the
.Em challengePassword
or
.Em unstructuredName
types.
They are currently ignored by
.Nm OpenSSL Ns Li 's
request signing utilities, but some CAs might want them.
.It Ar default_bits
This specifies the default key size in bits.
If not specified, 512 is used.
It is used if the
.Fl new
option is used.
It can be overridden by using the
.Fl newkey
option.
.It Ar default_keyfile
This is the default file to write a private key to.
If not specified, the key is written to standard output.
This can be overridden by the
.Fl keyout
option.
.It Ar default_md
This option specifies the digest algorithm to use.
Possible values include
.Ar md5
and
.Ar sha1 .
If not present, MD5 is used.
This option can be overridden on the command line.
.It Ar distinguished_name
This specifies the section containing the distinguished name fields to
prompt for when generating a certificate or certificate request.
The format is described in the next section.
.It Ar encrypt_key
If this is set to
.Em no
and a private key is generated, it is
.Em not
encrypted.
This is equivalent to the
.Fl nodes
command line option.
For compatibility,
.Ar encrypt_rsa_key
is an equivalent option.
.It Ar input_password | output_password
The passwords for the input private key file
.Pq if present
and the output private key file
.Pq if one will be created .
The command line options
.Fl passin
and
.Fl passout
override the configuration file values.
.It Ar oid_file
This specifies a file containing additional OBJECT IDENTIFIERS.
Each line of the file should consist of the numerical form of the
object identifier, followed by whitespace, then the short name followed
by whitespace and finally the long name.
.It Ar oid_section
This specifies a section in the configuration file containing extra
object identifiers.
Each line should consist of the short name of the
object identifier followed by
.Sq =
and the numerical form.
The short and long names are the same when this option is used.
.It Ar prompt
If set to the value
.Em no ,
this disables prompting of certificate fields
and just takes values from the config file directly.
It also changes the expected format of the
.Em distinguished_name
and
.Em attributes
sections.
.It Ar req_extensions
This specifies the configuration file section containing a list of
extensions to add to the certificate request.
It can be overridden by the
.Fl reqexts
command line switch.
.It Ar string_mask
This option limits the string types for encoding certain
fields.
The following values may be used, limiting strings to the indicated types:
.Bl -tag -width "MASK:number"
.It Ar utf8only
.Em UTF8String.
This is the default, as recommended by PKIX in RFC 2459.
.It Ar default
.Em PrintableString , IA5String , T61String , BMPString , UTF8String .
.It Ar pkix
.Em PrintableString , IA5String , BMPString , UTF8String .
This was inspired by the PKIX recommendation in RFC 2459 for certificates
generated before 2004, but differs by also permitting
.Em IA5String .
.It Ar nombstr
.Em PrintableString , IA5String , T61String , UniversalString .
This was a workaround for some ancient software that had problems
with the variable-sized
.Em BMPString
and
.Em UTF8String
types.
.It Cm MASK : Ns Ar number
This is an explicit bitmask of permitted types, where
.Ar number
is a C-style hex, decimal, or octal number that's a bit-wise OR of
.Dv B_ASN1_*
values from
.In openssl/asn1.h .
.El
.It Ar utf8
If set to the value
.Em yes ,
then field values are interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
.It Ar x509_extensions
This specifies the configuration file section containing a list of
extensions to add to a certificate generated when the
.Fl x509
switch is used.
It can be overridden by the
.Fl extensions
command line switch.
.El
.Sh REQ DISTINGUISHED NAME AND ATTRIBUTE SECTION FORMAT
There are two separate formats for the distinguished name and attribute
sections.
If the
.Fl prompt
option is set to
.Em no ,
then these sections just consist of field names and values: for example,
.Bd -unfilled -offset indent
CN=My Name
OU=My Organization
emailAddress=someone@@somewhere.org
.Ed
.Pp
This allows external programs
.Pq e.g. GUI based
to generate a template file with all the field names and values
and just pass it to
.Nm req .
An example of this kind of configuration file is contained in the
.Sx REQ EXAMPLES
section.
.Pp
Alternatively if the
.Fl prompt
option is absent or not set to
.Em no ,
then the file contains field prompting information.
It consists of lines of the form:
.Bd -unfilled -offset indent
fieldName="prompt"
fieldName_default="default field value"
fieldName_min= 2
fieldName_max= 4
.Ed
.Pp
.Qq fieldName
is the field name being used, for example
.Em commonName
.Pq or CN .
The
.Qq prompt
string is used to ask the user to enter the relevant details.
If the user enters nothing, the default value is used;
if no default value is present, the field is omitted.
A field can still be omitted if a default value is present,
if the user just enters the
.Sq \&.
character.
.Pp
The number of characters entered must be between the
.Em fieldName_min
and
.Em fieldName_max
limits:
there may be additional restrictions based on the field being used
(for example
.Em countryName
can only ever be two characters long and must fit in a
.Em PrintableString ) .
.Pp
Some fields (such as
.Em organizationName )
can be used more than once in a DN.
This presents a problem because configuration files will
not recognize the same name occurring twice.
To avoid this problem, if the
.Em fieldName
contains some characters followed by a full stop, they will be ignored.
So, for example, a second
.Em organizationName
can be input by calling it
.Qq 1.organizationName .
.Pp
The actual permitted field names are any object identifier short or
long names.
These are compiled into
.Nm OpenSSL
and include the usual values such as
.Em commonName , countryName , localityName , organizationName ,
.Em organizationUnitName , stateOrProvinceName .
Additionally,
.Em emailAddress
is included as well as
.Em name , surname , givenName initials
and
.Em dnQualifier .
.Pp
Additional object identifiers can be defined with the
.Ar oid_file
or
.Ar oid_section
options in the configuration file.
Any additional fields will be treated as though they were a
.Em DirectoryString .
.Sh REQ EXAMPLES
Examine and verify a certificate request:
.Pp
.Dl $ openssl req -in req.pem -text -verify -noout
.Pp
Create a private key and then generate a certificate request from it:
.Bd -literal -offset indent
$ openssl genrsa -out key.pem 2048
$ openssl req -new -key key.pem -out req.pem
.Ed
.Pp
The same but just using req:
.Pp
.Dl $ openssl req -newkey rsa:2048 -keyout key.pem -out req.pem
.Pp
Generate a self-signed root certificate:
.Pp
.Dl "$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem"
.Pp
Example of a file pointed to by the
.Ar oid_file
option:
.Bd -unfilled -offset indent
1.2.3.4        shortName       A longer Name
1.2.3.6        otherName       Other longer Name
.Ed
.Pp
Example of a section pointed to by
.Ar oid_section
making use of variable expansion:
.Bd -unfilled -offset indent
testoid1=1.2.3.5
testoid2=${testoid1}.6
.Ed
.Pp
Sample configuration file prompting for field values:
.Bd -literal
\& [ req ]
\& default_bits           = 1024
\& default_keyfile        = privkey.pem
\& distinguished_name     = req_distinguished_name
\& attributes             = req_attributes
\& x509_extensions        = v3_ca

\& dirstring_type = nobmp

\& [ req_distinguished_name ]
\& countryName                    = Country Name (2 letter code)
\& countryName_default            = AU
\& countryName_min                = 2
\& countryName_max                = 2

\& localityName                   = Locality Name (eg, city)

\& organizationalUnitName         = Organizational Unit Name (eg, section)

\& commonName                     = Common Name (eg, YOUR name)
\& commonName_max                 = 64

\& emailAddress                   = Email Address
\& emailAddress_max               = 40

\& [ req_attributes ]
\& challengePassword              = A challenge password
\& challengePassword_min          = 4
\& challengePassword_max          = 20

\& [ v3_ca ]

\& subjectKeyIdentifier=hash
\& authorityKeyIdentifier=keyid:always,issuer:always
\& basicConstraints = CA:true
.Ed
.Pp
Sample configuration containing all field values:
.Bd -literal

\& [ req ]
\& default_bits           = 1024
\& default_keyfile        = keyfile.pem
\& distinguished_name     = req_distinguished_name
\& attributes             = req_attributes
\& prompt                 = no
\& output_password        = mypass

\& [ req_distinguished_name ]
\& C                      = GB
\& ST                     = Test State or Province
\& L                      = Test Locality
\& O                      = Organization Name
\& OU                     = Organizational Unit Name
\& CN                     = Common Name
\& emailAddress           = test@@email.address

\& [ req_attributes ]
\& challengePassword              = A challenge password
.Ed
.Sh REQ NOTES
The header and footer lines in the PEM format are normally:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE REQUEST-----
-----END CERTIFICATE REQUEST-----
.Ed
.Pp
Some software
.Pq some versions of Netscape certificate server
instead needs:
.Bd -unfilled -offset indent
-----BEGIN NEW CERTIFICATE REQUEST-----
-----END NEW CERTIFICATE REQUEST-----
.Ed
.Pp
which is produced with the
.Fl newhdr
option but is otherwise compatible.
Either form is accepted transparently on input.
.Pp
The certificate requests generated by Xenroll with MSIE have extensions added.
It includes the
.Em keyUsage
extension which determines the type of key
.Pq signature only or general purpose
and any additional OIDs entered by the script in an
.Em extendedKeyUsage
extension.
.Sh REQ DIAGNOSTICS
The following messages are frequently asked about:
.Bd -unfilled -offset indent
Using configuration from /some/path/openssl.cnf
Unable to load config info
.Ed
.Pp
This is followed some time later by...
.Bd -unfilled -offset indent
unable to find 'distinguished_name' in config
problems making Certificate Request
.Ed
.Pp
The first error message is the clue: it can't find the configuration
file!
Certain operations
.Pq like examining a certificate request
don't need a configuration file so its use isn't enforced.
Generation of certificates or requests, however, do need a configuration file.
This could be regarded as a bug.
.Pp
Another puzzling message is this:
.Bd -unfilled -offset indent
Attributes:
    a0:00
.Ed
.Pp
This is displayed when no attributes are present and the request includes
the correct empty SET OF structure
.Pq the DER encoding of which is 0xa0 0x00 .
If you just see:
.Pp
.D1 Attributes:
.Pp
then the SET OF is missing and the encoding is technically invalid
.Pq but it is tolerated .
See the description of the command line option
.Fl asn1-kludge
for more information.
.Sh REQ ENVIRONMENT VARIABLES
The variable
.Ev OPENSSL_CONF ,
if defined, allows an alternative configuration
file location to be specified; it will be overridden by the
.Fl config
command line switch if it is present.
For compatibility reasons the
.Ev SSLEAY_CONF
environment variable serves the same purpose but its use is discouraged.
.Sh REQ BUGS
.Nm OpenSSL Ns Li 's
handling of T61Strings
.Pq aka TeletexStrings
is broken: it effectively treats them as ISO 8859-1
.Pq Latin 1 ;
Netscape and MSIE have similar behaviour.
This can cause problems if you need characters that aren't available in
.Em PrintableStrings
and you don't want to or can't use
.Em BMPStrings .
.Pp
As a consequence of the T61String handling, the only correct way to represent
accented characters in
.Nm OpenSSL
is to use a
.Em BMPString :
unfortunately Netscape currently chokes on these.
If you have to use accented characters with Netscape
and MSIE then you currently need to use the invalid T61String form.
.Pp
The current prompting is not very friendly.
It doesn't allow you to confirm what you've just entered.
Other things, like extensions in certificate requests, are
statically defined in the configuration file.
Some of these, like an email address in
.Em subjectAltName ,
should be input by the user.
.\"
.\" RSA
.\"
.Sh RSA
.nr nS 1
.Nm "openssl rsa"
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Oc
.Op Fl check
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | NET | PEM
.Op Fl modulus
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | NET | PEM
.Op Fl passin Ar arg
.Op Fl passout Ar arg
.Op Fl pubin
.Op Fl pubout
.Op Fl sgckey
.Op Fl text
.nr nS 0
.Ek
.Pp
The
.Nm rsa
command processes RSA keys.
They can be converted between various forms and their components printed out.
.Pp
.Sy Note :
this command uses the traditional
.Nm SSLeay
compatible format for private key encryption:
newer applications should use the more secure PKCS#8 format using the
.Nm pkcs8
utility.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Xo
.Fl aes128 | aes192 | aes256 |
.Fl des | des3
.Xc
These options encrypt the private key with the AES, DES,
or the triple DES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options are specified, the key is written in plain text.
This means that using the
.Nm rsa
utility to read in an encrypted key with no encryption option can be used
to remove the pass phrase from a key, or by setting the encryption options
it can be used to add or change the pass phrase.
These options can only be used with PEM format output files.
.It Fl check
This option checks the consistency of an RSA private key.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read a key from, or standard input if this
option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl inform Ar DER | NET | PEM
This specifies the input format.
The
.Ar DER
argument
uses an ASN1 DER-encoded form compatible with the PKCS#1
RSAPrivateKey or SubjectPublicKeyInfo format.
The
.Ar PEM
form is the default format: it consists of the DER format base64-encoded with
additional header and footer lines.
On input PKCS#8 format private keys are also accepted.
The
.Ar NET
form is a format described in the
.Sx RSA NOTES
section.
.It Fl noout
This option prevents output of the encoded version of the key.
.It Fl modulus
This option prints out the value of the modulus of the key.
.It Fl out Ar file
This specifies the output
.Ar file
to write a key to, or standard output if this option is not specified.
If any encryption options are set, a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl outform Ar DER | NET | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubin
By default, a private key is read from the input file; with this
option a public key is read instead.
.It Fl pubout
By default, a private key is output;
with this option a public key will be output instead.
This option is automatically set if the input is a public key.
.It Fl sgckey
Use the modified
.Em NET
algorithm used with some versions of Microsoft IIS and SGC keys.
.It Fl text
Prints out the various public or private key components in
plain text, in addition to the encoded version.
.El
.Sh RSA NOTES
The PEM private key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----
.Ed
.Pp
The PEM public key format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN PUBLIC KEY-----
-----END PUBLIC KEY-----
.Ed
.Pp
The
.Em NET
form is a format compatible with older Netscape servers
and Microsoft IIS .key files; this uses unsalted RC4 for its encryption.
It is not very secure and so should only be used when necessary.
.Pp
Some newer version of IIS have additional data in the exported .key files.
To use these with the
.Nm rsa
utility, view the file with a binary editor
and look for the string
.Qq private-key ,
then trace back to the byte sequence 0x30, 0x82
.Pq this is an ASN1 SEQUENCE .
Copy all the data from this point onwards to another file and use that as
the input to the
.Nm rsa
utility with the
.Fl inform Ar NET
option.
If there is an error after entering the password, try the
.Fl sgckey
option.
.Sh RSA EXAMPLES
To remove the pass phrase on an RSA private key:
.Pp
.Dl $ openssl rsa -in key.pem -out keyout.pem
.Pp
To encrypt a private key using triple DES:
.Pp
.Dl $ openssl rsa -in key.pem -des3 -out keyout.pem
.Pp
To convert a private key from PEM to DER format:
.Pp
.Dl $ openssl rsa -in key.pem -outform DER -out keyout.der
.Pp
To print out the components of a private key to standard output:
.Pp
.Dl $ openssl rsa -in key.pem -text -noout
.Pp
To just output the public part of a private key:
.Pp
.Dl $ openssl rsa -in key.pem -pubout -out pubkey.pem
.Sh RSA BUGS
The command line password arguments don't currently work with
.Em NET
format.
.Pp
There should be an option that automatically handles .key files,
without having to manually edit them.
.\"
.\" RSAUTL
.\"
.Sh RSAUTL
.nr nS 1
.Nm "openssl rsautl"
.Bk -words
.Op Fl asn1parse
.Op Fl certin
.Op Fl decrypt
.Op Fl encrypt
.Op Fl engine Ar id
.Op Fl hexdump
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keyform Ar DER | PEM
.Op Fl oaep | pkcs | raw | ssl
.Op Fl out Ar file
.Op Fl pubin
.Op Fl sign
.Op Fl verify
.Ek
.nr nS 0
.Pp
The
.Nm rsautl
command can be used to sign, verify, encrypt and decrypt
data using the RSA algorithm.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl asn1parse
Asn1parse the output data; this is useful when combined with the
.Fl verify
option.
.It Fl certin
The input is a certificate containing an RSA public key.
.It Fl decrypt
Decrypt the input data using an RSA private key.
.It Fl encrypt
Encrypt the input data using an RSA public key.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm rsautl
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl hexdump
Hex dump the output data.
.It Fl in Ar file
This specifies the input
.Ar file
to read data from, or standard input
if this option is not specified.
.It Fl inkey Ar file
The input key file, by default it should be an RSA private key.
.It Fl keyform Ar DER | PEM
Private ket format.
Default is
.Ar PEM .
.It Fl oaep | pkcs | raw | ssl
The padding to use:
PKCS#1 OAEP, PKCS#1 v1.5
.Pq the default ,
or no padding, respectively.
For signatures, only
.Fl pkcs
and
.Fl raw
can be used.
.It Fl out Ar file
Specifies the output
.Ar file
to write to, or standard output by
default.
.It Fl pubin
The input file is an RSA public key.
.It Fl sign
Sign the input data and output the signed result.
This requires an RSA private key.
.It Fl verify
Verify the input data and output the recovered data.
.El
.Sh RSAUTL NOTES
.Nm rsautl ,
because it uses the RSA algorithm directly, can only be
used to sign or verify small pieces of data.
.Sh RSAUTL EXAMPLES
Sign some data using a private key:
.Pp
.Dl "$ openssl rsautl -sign -in file -inkey key.pem -out sig"
.Pp
Recover the signed data:
.Pp
.Dl $ openssl rsautl -verify -in sig -inkey key.pem
.Pp
Examine the raw signed data:
.Pp
.Li "\ \&$ openssl rsautl -verify -in file -inkey key.pem -raw -hexdump"
.Bd -unfilled
\& 0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
\& 0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world
.Ed
.Pp
The PKCS#1 block formatting is evident from this.
If this was done using encrypt and decrypt, the block would have been of type 2
.Pq the second byte
and random padding data visible instead of the 0xff bytes.
.Pp
It is possible to analyse the signature of certificates using this
utility in conjunction with
.Nm asn1parse .
Consider the self-signed example in
.Pa certs/pca-cert.pem :
running
.Nm asn1parse
as follows yields:
.Pp
.Li "\ \&$ openssl asn1parse -in pca-cert.pem"
.Bd -unfilled
\&    0:d=0  hl=4 l= 742 cons: SEQUENCE
\&    4:d=1  hl=4 l= 591 cons:  SEQUENCE
\&    8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
\&   10:d=3  hl=2 l=   1 prim:    INTEGER           :02
\&   13:d=2  hl=2 l=   1 prim:   INTEGER           :00
\&   16:d=2  hl=2 l=  13 cons:   SEQUENCE
\&   18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption
\&   29:d=3  hl=2 l=   0 prim:    NULL
\&   31:d=2  hl=2 l=  92 cons:   SEQUENCE
\&   33:d=3  hl=2 l=  11 cons:    SET
\&   35:d=4  hl=2 l=   9 cons:     SEQUENCE
\&   37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName
\&   42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU
\&  ....
\&  599:d=1  hl=2 l=  13 cons:  SEQUENCE
\&  601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption
\&  612:d=2  hl=2 l=   0 prim:   NULL
\&  614:d=1  hl=3 l= 129 prim:  BIT STRING
.Ed
.Pp
The final BIT STRING contains the actual signature.
It can be extracted with:
.Pp
.Dl "$ openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614"
.Pp
The certificate public key can be extracted with:
.Pp
.Dl $ openssl x509 -in test/testx509.pem -pubkey -noout \*(Gtpubkey.pem
.Pp
The signature can be analysed with:
.Pp
.Li "\ \&$ openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin"
.Bd -unfilled
\&    0:d=0  hl=2 l=  32 cons: SEQUENCE
\&    2:d=1  hl=2 l=  12 cons:  SEQUENCE
\&    4:d=2  hl=2 l=   8 prim:   OBJECT            :md5
\&   14:d=2  hl=2 l=   0 prim:   NULL
\&   16:d=1  hl=2 l=  16 prim:  OCTET STRING
\&   0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5  .F...Js.7...H%..
.Ed
.Pp
This is the parsed version of an ASN1
.Em DigestInfo
structure.
It can be seen that the digest used was MD5.
The actual part of the certificate that was signed can be extracted with:
.Pp
.Dl "$ openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4"
.Pp
and its digest computed with:
.Pp
.Dl $ openssl md5 -c tbs
.D1 MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5
.Pp
which it can be seen agrees with the recovered value above.
.\"
.\" S_CLIENT
.\"
.Sh S_CLIENT
.nr nS 1
.Nm "openssl s_client"
.Bk -words
.Op Fl 4 | 6
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl check_ss_sig
.Op Fl cipher Ar cipherlist
.Oo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Oc
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl crlf
.Op Fl debug
.Op Fl engine Ar id
.Op Fl extended_crl
.Op Fl ign_eof
.Op Fl ignore_critical
.Op Fl issuer_checks
.Op Fl key Ar keyfile
.Op Fl msg
.Op Fl nbio
.Op Fl nbio_test
.Op Fl no_ssl3
.Op Fl no_ticket
.Op Fl no_tls1
.Op Fl pause
.Op Fl policy_check
.Op Fl prexit
.Op Fl psk Ar key
.Op Fl psk_identity Ar identity
.Op Fl quiet
.Op Fl reconnect
.Op Fl showcerts
.Op Fl ssl3
.Op Fl starttls Ar protocol
.Op Fl state
.Op Fl tls1
.Op Fl tlsextdebug
.Op Fl verify Ar depth
.Op Fl x509_strict
.Ek
.nr nS 0
.Pp
The
.Nm s_client
command implements a generic SSL/TLS client which connects
to a remote host using SSL/TLS.
It is a
.Em very
useful diagnostic tool for SSL servers.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl 4
Specify that
.Nm s_client
should attempt connections using IPv4 only.
.It Fl 6
Specify that
.Nm s_client
should attempt connections using IPv6 only.
.It Fl bugs
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
.It Fl CAfile Ar file
A
.Ar file
containing trusted certificates to use during server authentication
and to use when attempting to build the client certificate chain.
.It Fl CApath Ar directory
The
.Ar directory
to use for server certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the client certificate chain.
.It Fl cert Ar file
The certificate to use, if one is requested by the server.
The default is not to use a certificate.
.It Xo
.Fl check_ss_sig ,
.Fl crl_check ,
.Fl crl_check_all ,
.Fl extended_crl ,
.Fl ignore_critical ,
.Fl issuer_checks ,
.Fl policy_check ,
.Fl x509_strict
.Xc
Set various certificate chain validation options.
See the
.Nm VERIFY
command for details.
.It Fl cipher Ar cipherlist
This allows the cipher list sent by the client to be modified.
Although the server determines which cipher suite is used, it should take
the first supported cipher in the list sent by the client.
See the
.Sx CIPHERS
section above for more information.
.It Xo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Xc
This specifies the
.Ar host
and optional
.Ar port
to connect to.
If not specified, an attempt is made to connect to the local host
on port 4433.
Alternatively, the host and port pair may be separated using a forward-slash
character.
This form is useful for numeric IPv6 addresses.
.It Fl crlf
This option translates a line feed from the terminal into CR+LF as required
by some servers.
.It Fl debug
Print extensive debugging information including a hex dump of all traffic.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm s_client
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl ign_eof
Inhibit shutting down the connection when end of file is reached in the
input.
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio
Turns on non-blocking I/O.
.It Fl nbio_test
Tests non-blocking I/O.
.It Xo
.Fl no_ssl3 | no_tls1 |
.Fl ssl3 | tls1
.Xc
These options disable the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method which should be compatible
with all servers and permit them to use SSL v3 or TLS as appropriate.
.Pp
Unfortunately there are a lot of ancient and broken servers in use which
cannot handle this technique and will fail to connect.
Some servers only work if TLS is turned off with the
.Fl no_tls
option.
.It Fl no_ticket
Disable RFC 4507 session ticket support.
.It Fl pause
Pauses 1 second between each read and write call.
.It Fl prexit
Print session information when the program exits.
This will always attempt
to print out information even if the connection fails.
Normally, information will only be printed out once if the connection succeeds.
This option is useful because the cipher in use may be renegotiated
or the connection may fail because a client certificate is required or is
requested only after an attempt is made to access a certain URL.
.Sy Note :
the output produced by this option is not always accurate because a
connection might never have been established.
.It Fl psk Ar key
Use the PSK key
.Ar key
when using a PSK cipher suite.
The key is given as a hexadecimal number without the leading 0x,
for example -psk 1a2b3c4d.
.It Fl psk_identity Ar identity
Use the PSK identity
.Ar identity
when using a PSK cipher suite.
.It Fl quiet
Inhibit printing of session and certificate information.
This implicitly turns on
.Fl ign_eof
as well.
.It Fl reconnect
Reconnects to the same server 5 times using the same session ID; this can
be used as a test that session caching is working.
.It Fl showcerts
Display the whole server certificate chain: normally only the server
certificate itself is displayed.
.It Fl starttls Ar protocol
Send the protocol-specific message(s) to switch to TLS for communication.
.Ar protocol
is a keyword for the intended protocol.
Currently, the supported keywords are
.Qq ftp ,
.Qq imap ,
.Qq smtp ,
.Qq pop3 ,
and
.Qq xmpp .
.It Fl state
Prints out the SSL session states.
.It Fl tlsextdebug
Print out a hex dump of any TLS extensions received from the server.
.It Fl verify Ar depth
The verify
.Ar depth
to use.
This specifies the maximum length of the
server certificate chain and turns on server certificate verification.
Currently the verify operation continues after errors so all the problems
with a certificate chain can be seen.
As a side effect the connection will never fail due to a server
certificate verify failure.
.El
.Sh S_CLIENT CONNECTED COMMANDS
If a connection is established with an SSL server, any data received
from the server is displayed and any key presses will be sent to the
server.
When used interactively (which means neither
.Fl quiet
nor
.Fl ign_eof
have been given), the session will be renegotiated if the line begins with an
.Em R ;
if the line begins with a
.Em Q
or if end of file is reached, the connection will be closed down.
.Sh S_CLIENT NOTES
.Nm s_client
can be used to debug SSL servers.
To connect to an SSL HTTP server the command:
.Pp
.Dl $ openssl s_client -connect servername:443
.Pp
would typically be used
.Pq HTTPS uses port 443 .
If the connection succeeds, an HTTP command can be given such as
.Qq GET
to retrieve a web page.
.Pp
If the handshake fails, there are several possible causes; if it is
nothing obvious like no client certificate, then the
.Fl bugs , ssl3 , tls1 , no_ssl3 ,
and
.Fl no_tls1
options can be tried in case it is a buggy server.
In particular these options should be tried
.Em before
submitting a bug report to an
.Nm OpenSSL
mailing list.
.Pp
A frequent problem when attempting to get client certificates working
is that a web client complains it has no certificates or gives an empty
list to choose from.
This is normally because the server is not sending the client's certificate
authority in its
.Qq acceptable CA list
when it requests a certificate.
By using
.Nm s_client
the CA list can be viewed and checked.
However some servers only request client authentication
after a specific URL is requested.
To obtain the list in this case it is necessary to use the
.Fl prexit
option and send an HTTP request for an appropriate page.
.Pp
If a certificate is specified on the command line using the
.Fl cert
option, it will not be used unless the server specifically requests
a client certificate.
Therefore merely including a client certificate
on the command line is no guarantee that the certificate works.
.Pp
If there are problems verifying a server certificate, the
.Fl showcerts
option can be used to show the whole chain.
.Pp
Compression methods are only supported for
.Fl tls1 .
.Sh S_CLIENT BUGS
Because this program has a lot of options and also because some of
the techniques used are rather old, the C source of
.Nm s_client
is rather hard to read and not a model of how things should be done.
A typical SSL client program would be much simpler.
.Pp
The
.Fl verify
option should really exit if the server verification fails.
.Pp
The
.Fl prexit
option is a bit of a hack.
We should really report information whenever a session is renegotiated.
.\"
.\" S_SERVER
.\"
.Sh S_SERVER
.nr nS 1
.Nm "openssl s_server"
.Bk -words
.Op Fl accept Ar port
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Op Fl context Ar id
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl crlf
.Op Fl dcert Ar file
.Op Fl debug
.Op Fl dhparam Ar file
.Op Fl dkey Ar file
.Op Fl engine Ar id
.Op Fl hack
.Op Fl HTTP
.Op Fl id_prefix Ar arg
.Op Fl key Ar keyfile
.Op Fl msg
.Op Fl nbio
.Op Fl nbio_test
.Op Fl no_dhe
.Op Fl no_ssl3
.Op Fl no_tls1
.Op Fl no_tmp_rsa
.Op Fl nocert
.Op Fl psk Ar key
.Op Fl psk_hint Ar hint
.Op Fl quiet
.Op Fl serverpref
.Op Fl ssl3
.Op Fl state
.Op Fl tls1
.Op Fl Verify Ar depth
.Op Fl verify Ar depth
.Op Fl WWW
.Op Fl www
.Ek
.nr nS 0
.Pp
The
.Nm s_server
command implements a generic SSL/TLS server which listens
for connections on a given port using SSL/TLS.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl accept Ar port
The TCP
.Ar port
to listen on for connections.
If not specified, 4433 is used.
.It Fl bugs
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
.It Fl CAfile Ar file
A file containing trusted certificates to use during client authentication
and to use when attempting to build the server certificate chain.
The list is also used in the list of acceptable client CAs passed to the
client when a certificate is requested.
.It Fl CApath Ar directory
The
.Ar directory
to use for client certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the server certificate chain.
.It Fl cert Ar file
The certificate to use; most server's cipher suites require the use of a
certificate and some require a certificate with a certain public key type:
for example the DSS cipher suites require a certificate containing a DSS
.Pq DSA
key.
If not specified, the file
.Pa server.pem
will be used.
.It Fl cipher Ar cipherlist
This allows the cipher list used by the server to be modified.
When the client sends a list of supported ciphers, the first client cipher
also included in the server list is used.
Because the client specifies the preference order, the order of the server
cipherlist is irrelevant.
See the
.Sx CIPHERS
section for more information.
.It Fl context Ar id
Sets the SSL context ID.
It can be given any string value.
If this option is not present, a default value will be used.
.It Fl crl_check , crl_check_all
Check the peer certificate has not been revoked by its CA.
The CRLs are appended to the certificate file.
With the
.Fl crl_check_all
option, all CRLs of all CAs in the chain are checked.
.It Fl crlf
This option translates a line feed from the terminal into CR+LF.
.It Fl dcert Ar file , Fl dkey Ar file
Specify an additional certificate and private key; these behave in the
same manner as the
.Fl cert
and
.Fl key
options except there is no default if they are not specified
.Pq no additional certificate or key is used .
As noted above some cipher suites require a certificate containing a key of
a certain type.
Some cipher suites need a certificate carrying an RSA key
and some a DSS
.Pq DSA
key.
By using RSA and DSS certificates and keys,
a server can support clients which only support RSA or DSS cipher suites
by using an appropriate certificate.
.It Fl debug
Print extensive debugging information including a hex dump of all traffic.
.It Fl dhparam Ar file
The DH parameter file to use.
The ephemeral DH cipher suites generate keys
using a set of DH parameters.
If not specified, an attempt is made to
load the parameters from the server certificate file.
If this fails, a static set of parameters hard coded into the
.Nm s_server
program will be used.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm s_server
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl hack
This option enables a further workaround for some early Netscape
SSL code
.Pq \&? .
.It Fl HTTP
Emulates a simple web server.
Pages will be resolved relative to the current directory;
for example if the URL
.Pa https://myhost/page.html
is requested, the file
.Pa ./page.html
will be loaded.
The files loaded are assumed to contain a complete and correct HTTP
response (lines that are part of the HTTP response line and headers
must end with CRLF).
.It Fl id_prefix Ar arg
Generate SSL/TLS session IDs prefixed by
.Ar arg .
This is mostly useful for testing any SSL/TLS code
.Pq e.g. proxies
that wish to deal with multiple servers, when each of which might be
generating a unique range of session IDs
.Pq e.g. with a certain prefix .
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio
Turns on non-blocking I/O.
.It Fl nbio_test
Tests non-blocking I/O.
.It Fl no_dhe
If this option is set, no DH parameters will be loaded, effectively
disabling the ephemeral DH cipher suites.
.It Xo
.Fl no_ssl3 | no_tls1 |
.Fl ssl3 | tls1
.Xc
These options disable the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method which should be compatible
with all servers and permit them to use SSL v3 or TLS as appropriate.
.It Fl no_tmp_rsa
Certain export cipher suites sometimes use a temporary RSA key; this option
disables temporary RSA key generation.
.It Fl nocert
If this option is set, no certificate is used.
This restricts the cipher suites available to the anonymous ones
.Pq currently just anonymous DH .
.It Fl psk Ar key
Use the PSK key
.Ar key
when using a PSK cipher suite.
The key is given as a hexadecimal number without the leading 0x,
for example -psk 1a2b3c4d.
.It Fl psk_hint Ar hint
Use the PSK identity hint
.Ar hint
when using a PSK cipher suite.
.It Fl quiet
Inhibit printing of session and certificate information.
.It Fl serverpref
Use server's cipher preferences.
.It Fl state
Prints out the SSL session states.
.It Fl WWW
Emulates a simple web server.
Pages will be resolved relative to the current directory;
for example if the URL
.Pa https://myhost/page.html
is requested, the file
.Pa ./page.html
will be loaded.
.It Fl www
Sends a status message back to the client when it connects.
This includes lots of information about the ciphers used and various
session parameters.
The output is in HTML format so this option will normally be used with a
web browser.
.It Fl Verify Ar depth , Fl verify Ar depth
The verify
.Ar depth
to use.
This specifies the maximum length of the client certificate chain
and makes the server request a certificate from the client.
With the
.Fl Verify
option, the client must supply a certificate or an error occurs.
With the
.Fl verify
option, a certificate is requested but the client does not have to send one.
.El
.Sh S_SERVER CONNECTED COMMANDS
If a connection request is established with an SSL client and neither the
.Fl www
nor the
.Fl WWW
option has been used, then normally any data received
from the client is displayed and any key presses will be sent to the client.
.Pp
Certain single letter commands are also recognized which perform special
operations: these are listed below.
.Bl -tag -width "XXXX"
.It Ar P
Send some plain text down the underlying TCP connection: this should
cause the client to disconnect due to a protocol violation.
.It Ar Q
End the current SSL connection and exit.
.It Ar q
End the current SSL connection, but still accept new connections.
.It Ar R
Renegotiate the SSL session and request a client certificate.
.It Ar r
Renegotiate the SSL session.
.It Ar S
Print out some session cache status information.
.El
.Sh S_SERVER NOTES
.Nm s_server
can be used to debug SSL clients.
To accept connections from a web browser the command:
.Pp
.Dl $ openssl s_server -accept 443 -www
.Pp
can be used, for example.
.Pp
Most web browsers
.Pq in particular Netscape and MSIE
only support RSA cipher suites, so they cannot connect to servers
which don't use a certificate carrying an RSA key or a version of
.Nm OpenSSL
with RSA disabled.
.Pp
Although specifying an empty list of CAs when requesting a client certificate
is strictly speaking a protocol violation, some SSL
clients interpret this to mean any CA is acceptable.
This is useful for debugging purposes.
.Pp
The session parameters can printed out using the
.Nm sess_id
program.
.Sh S_SERVER BUGS
Because this program has a lot of options and also because some of
the techniques used are rather old, the C source of
.Nm s_server
is rather hard to read and not a model of how things should be done.
A typical SSL server program would be much simpler.
.Pp
The output of common ciphers is wrong: it just gives the list of ciphers that
.Nm OpenSSL
recognizes and the client supports.
.Pp
There should be a way for the
.Nm s_server
program to print out details of any
unknown cipher suites a client says it supports.
.\"
.\" S_TIME
.\"
.Sh S_TIME
.nr nS 1
.Nm "openssl s_time"
.Bk -words
.Op Fl bugs
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Op Fl connect Ar host : Ns Ar port
.Op Fl key Ar keyfile
.Op Fl nbio
.Op Fl new
.Op Fl reuse
.Op Fl ssl3
.Op Fl time Ar seconds
.Op Fl verify Ar depth
.Op Fl www Ar page
.Ek
.nr nS 0
.Pp
The
.Nm s_client
command implements a generic SSL/TLS client which connects to a
remote host using SSL/TLS.
It can request a page from the server and includes
the time to transfer the payload data in its timing measurements.
It measures the number of connections within a given timeframe,
the amount of data transferred
.Pq if any ,
and calculates the average time spent for one connection.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl bugs
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
.It Fl CAfile Ar file
A file containing trusted certificates to use during server authentication
and to use when attempting to build the client certificate chain.
.It Fl CApath Ar directory
The directory to use for server certificate verification.
This directory must be in
.Qq hash format ;
see
.Nm verify
for more information.
These are also used when building the client certificate chain.
.It Fl cert Ar file
The certificate to use, if one is requested by the server.
The default is not to use a certificate.
The file is in PEM format.
.It Fl cipher Ar cipherlist
This allows the cipher list sent by the client to be modified.
Although the server determines which cipher suite is used,
it should take the first supported cipher in the list sent by the client.
See the
.Nm ciphers
command for more information.
.It Fl connect Ar host : Ns Ar port
This specifies the host and optional port to connect to.
.It Fl key Ar keyfile
The private key to use.
If not specified, the certificate file will be used.
The file is in PEM format.
.It Fl nbio
Turns on non-blocking I/O.
.It Fl new
Performs the timing test using a new session ID for each connection.
If neither
.Fl new
nor
.Fl reuse
are specified,
they are both on by default and executed in sequence.
.It Fl reuse
Performs the timing test using the same session ID;
this can be used as a test that session caching is working.
If neither
.Fl new
nor
.Fl reuse
are specified,
they are both on by default and executed in sequence.
.It Fl ssl3
This option disables the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method
which should be compatible with all servers and permit them to use
SSL v3 or TLS as appropriate.
The timing program is not as rich in options to turn protocols on and off as
the
.Nm s_client
program and may not connect to all servers.
.Pp
Unfortunately there are a lot of ancient and broken servers in use which
cannot handle this technique and will fail to connect.
Some servers only work if TLS is turned off with the
.Fl ssl3
option.
.It Fl time Ar seconds
Specifies how long
.Pq in seconds
.Nm s_time
should establish connections and
optionally transfer payload data from a server.
The default is 30 seconds.
Server and client performance and the link speed
determine how many connections
.Nm s_time
can establish.
.It Fl verify Ar depth
The verify depth to use.
This specifies the maximum length of the server certificate chain
and turns on server certificate verification.
Currently the verify operation continues after errors, so all the problems
with a certificate chain can be seen.
As a side effect,
the connection will never fail due to a server certificate verify failure.
.It Fl www Ar page
This specifies the page to GET from the server.
A value of
.Sq /
gets the index.htm[l] page.
If this parameter is not specified,
.Nm s_time
will only perform the handshake to establish SSL connections
but not transfer any payload data.
.El
.Sh S_TIME NOTES
.Nm s_client
can be used to measure the performance of an SSL connection.
To connect to an SSL HTTP server and get the default page the command
.Bd -literal -offset indent
$ openssl s_time -connect servername:443 -www / -CApath yourdir \e
	-CAfile yourfile.pem -cipher commoncipher [-ssl3]
.Ed
.Pp
would typically be used
.Pq HTTPS uses port 443 .
.Dq commoncipher
is a cipher to which both client and server can agree;
see the
.Nm ciphers
command for details.
.Pp
If the handshake fails, there are several possible causes:
if it is nothing obvious like no client certificate, the
.Fl bugs
and
.Fl ssl3
options can be tried in case it is a buggy server.
In particular you should play with these options
.Em before
submitting a bug report to an OpenSSL mailing list.
.Pp
A frequent problem when attempting to get client certificates working
is that a web client complains it has no certificates or gives an empty
list to choose from.
This is normally because the server is not sending
the clients certificate authority in its
.Qq acceptable CA list
when it requests a certificate.
By using
.Nm s_client ,
the CA list can be viewed and checked.
However some servers only request client authentication
after a specific URL is requested.
To obtain the list in this case, it is necessary to use the
.Fl prexit
option of
.Nm s_client
and send an HTTP request for an appropriate page.
.Pp
If a certificate is specified on the command line using the
.Fl cert
option,
it will not be used unless the server specifically requests
a client certificate.
Therefore merely including a client certificate
on the command line is no guarantee that the certificate works.
.Sh S_TIME BUGS
Because this program does not have all the options of the
.Nm s_client
program to turn protocols on and off,
you may not be able to measure the performance
of all protocols with all servers.
.Pp
The
.Fl verify
option should really exit if the server verification fails.
.\"
.\" SESS_ID
.\"
.Sh SESS_ID
.nr nS 1
.Nm "openssl sess_id"
.Bk -words
.Op Fl cert
.Op Fl context Ar ID
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
.Op Fl noout
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM
.Op Fl text
.Ek
.nr nS 0
.Pp
The
.Nm sess_id
program processes the encoded version of the SSL session structure and
optionally prints out SSL session details
.Pq for example the SSL session master key
in human readable format.
Since this is a diagnostic tool that needs some knowledge of the SSL
protocol to use properly, most users will not need to use it.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl cert
If a certificate is present in the session,
it will be output using this option;
if the
.Fl text
option is also present, then it will be printed out in text form.
.It Fl context Ar ID
This option can set the session ID so the output session information uses the
supplied
.Ar ID .
The
.Ar ID
can be any string of characters.
This option won't normally be used.
.It Fl in Ar file
This specifies the input
.Ar file
to read session information from, or standard input by default.
.It Fl inform Ar DER | PEM
This specifies the input format.
The
.Ar DER
argument uses an ASN1 DER-encoded
format containing session details.
The precise format can vary from one version to the next.
The
.Ar PEM
form is the default format: it consists of the DER
format base64-encoded with additional header and footer lines.
.It Fl noout
This option prevents output of the encoded version of the session.
.It Fl out Ar file
This specifies the output
.Ar file
to write session information to, or standard
output if this option is not specified.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl text
Prints out the various public or private key components in
plain text in addition to the encoded version.
.El
.Sh SESS_ID OUTPUT
Typical output:
.Bd -literal
SSL-Session:
    Protocol  : TLSv1
    Cipher    : 0016
    Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
    Session-ID-ctx: 01000000
    Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
    Key-Arg   : None
    Start Time: 948459261
    Timeout   : 300 (sec)
    Verify return code 0 (ok)
.Ed
.Pp
These are described below in more detail.
.Pp
.Bl -tag -width "Verify return code " -compact
.It Ar Protocol
This is the protocol in use: TLSv1 or SSLv3.
.It Ar Cipher
The cipher used is the actual raw SSL or TLS cipher code;
see the SSL or TLS specifications for more information.
.It Ar Session-ID
The SSL session ID in hex format.
.It Ar Session-ID-ctx
The session ID context in hex format.
.It Ar Master-Key
This is the SSL session master key.
.It Ar Key-Arg
The key argument; this is only used in SSL v2.
.It Ar Start Time
This is the session start time, represented as an integer in standard
.Ux
format.
.It Ar Timeout
The timeout in seconds.
.It Ar Verify return code
This is the return code when an SSL client certificate is verified.
.El
.Sh SESS_ID NOTES
The PEM-encoded session format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN SSL SESSION PARAMETERS-----
-----END SSL SESSION PARAMETERS-----
.Ed
.Pp
Since the SSL session output contains the master key, it is possible to read
the contents of an encrypted session using this information.
Therefore appropriate security precautions
should be taken if the information is being output by a
.Qq real
application.
This is, however, strongly discouraged and should only be used for
debugging purposes.
.Sh SESS_ID BUGS
The cipher and start time should be printed out in human readable form.
.\"
.\" SMIME
.\"
.Sh SMIME
.nr nS 1
.Nm "openssl smime"
.Bk -words
.Oo
.Fl aes128 | aes192 | aes256 | des |
.Fl des3 | rc2-40 | rc2-64 | rc2-128
.Oc
.Op Fl binary
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl certfile Ar file
.Op Fl check_ss_sig
.Op Fl content Ar file
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl decrypt
.Op Fl encrypt
.Op Fl engine Ar id
.Op Fl extended_crl
.Op Fl from Ar addr
.Op Fl ignore_critical
.Op Fl in Ar file
.Op Fl indef
.Op Fl inform Ar DER | PEM | SMIME
.Op Fl inkey Ar file
.Op Fl issuer_checks
.Op Fl keyform Ar ENGINE | PEM
.Op Fl md Ar digest
.Op Fl noattr
.Op Fl nocerts
.Op Fl nochain
.Op Fl nodetach
.Op Fl noindef
.Op Fl nointern
.Op Fl nosigs
.Op Fl noverify
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM | SMIME
.Op Fl passin Ar arg
.Op Fl pk7out
.Op Fl policy_check
.Op Fl recip Ar file
.Op Fl resign
.Op Fl sign
.Op Fl signer Ar file
.Op Fl stream
.Op Fl subject Ar s
.Op Fl text
.Op Fl to Ar addr
.Op Fl verify
.Op Fl x509_strict
.Op Ar cert.pem ...
.Ek
.nr nS 0
.Pp
The
.Nm smime
command handles
.Em S/MIME
mail.
It can encrypt, decrypt, sign, and verify
.Em S/MIME
messages.
.Pp
There are six operation options that set the type of operation to be performed.
The meaning of the other options varies according to the operation type.
.Pp
The six operation options are as follows:
.Bl -tag -width "XXXX"
.It Fl decrypt
Decrypt mail using the supplied certificate and private key.
Expects an encrypted mail message in
.Em MIME
format for the input file.
The decrypted mail is written to the output file.
.It Fl encrypt
Encrypt mail for the given recipient certificates.
Input file is the message to be encrypted.
The output file is the encrypted mail in
.Em MIME
format.
.It Fl pk7out
Takes an input message and writes out a PEM-encoded PKCS#7 structure.
.It Fl resign
Resign a message: take an existing message and one or more new signers.
.It Fl sign
Sign mail using the supplied certificate and private key.
Input file is the message to be signed.
The signed message in
.Em MIME
format is written to the output file.
.It Fl verify
Verify signed mail.
Expects a signed mail message on input and outputs the signed data.
Both clear text and opaque signing is supported.
.El
.Pp
The reamaining options are as follows:
.Bl -tag -width "XXXX"
.It Xo
.Fl aes128 | aes192 | aes256 | des |
.Fl des3 | rc2-40 | rc2-64 | rc2-128
.Xc
The encryption algorithm to use.
128-, 192-, or 256-bit AES,
DES
.Pq 56 bits ,
triple DES
.Pq 168 bits ,
or 40-, 64-, or 128-bit RC2, respectively;
if not specified, 40-bit RC2 is
used.
Only used with
.Fl encrypt .
.It Fl binary
Normally, the input message is converted to
.Qq canonical
format which is effectively using CR and LF as end of line \-
as required by the
.Em S/MIME
specification.
When this option is present no translation occurs.
This is useful when handling binary data which may not be in
.Em MIME
format.
.It Fl CAfile Ar file
A
.Ar file
containing trusted CA certificates; only used with
.Fl verify .
.It Fl CApath Ar directory
A
.Ar directory
containing trusted CA certificates; only used with
.Fl verify .
This directory must be a standard certificate directory:
that is, a hash of each subject name (using
.Nm x509 -hash )
should be linked to each certificate.
.It Ar cert.pem ...
One or more certificates of message recipients: used when encrypting
a message.
.It Fl certfile Ar file
Allows additional certificates to be specified.
When signing, these will be included with the message.
When verifying, these will be searched for the signers' certificates.
The certificates should be in PEM format.
.It Xo
.Fl check_ss_sig ,
.Fl crl_check ,
.Fl crl_check_all ,
.Fl extended_crl ,
.Fl ignore_critical ,
.Fl issuer_checks ,
.Fl policy_check ,
.Fl x509_strict
.Xc
Set various certificate chain validation options.
See the
.Nm VERIFY
command for details.
.It Fl content Ar file
This specifies a file containing the detached content.
This is only useful with the
.Fl verify
command.
This is only usable if the PKCS#7 structure is using the detached
signature form where the content is not included.
This option will override any content if the input format is
.Em S/MIME
and it uses the multipart/signed
.Em MIME
content type.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm smime
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Xo
.Fl from Ar addr ,
.Fl subject Ar s ,
.Fl to Ar addr
.Xc
The relevant mail headers.
These are included outside the signed
portion of a message so they may be included manually.
When signing, many
.Em S/MIME
mail clients check that the signer's certificate email
address matches the From: address.
.It Fl in Ar file
The input message to be encrypted or signed or the
.Em MIME
message to
be decrypted or verified.
.It Fl indef
Enable streaming I/O for encoding operations.
This permits single pass processing of data without
the need to hold the entire contents in memory,
potentially supporting very large files.
Streaming is automatically set for S/MIME signing with detached
data if the output format is SMIME;
it is currently off by default for all other operations.
.It Fl inform Ar DER | PEM | SMIME
This specifies the input format for the PKCS#7 structure.
The default is
.Em SMIME ,
which reads an
.Em S/MIME
format message.
.Ar PEM
and
.Ar DER
format change this to expect PEM and DER format PKCS#7 structures
instead.
This currently only affects the input format of the PKCS#7
structure; if no PKCS#7 structure is being input (for example with
.Fl encrypt
or
.Fl sign ) ,
this option has no effect.
.It Fl inkey Ar file
The private key to use when signing or decrypting.
This must match the corresponding certificate.
If this option is not specified, the private key must be included
in the certificate file specified with
the
.Fl recip
or
.Fl signer
file.
When signing,
this option can be used multiple times to specify successive keys.
.It Fl keyform Ar ENGINE | PEM
Input private key format.
.It Fl md Ar digest
The digest algorithm to use when signing or resigning.
If not present then the default digest algorithm for the signing key is used
(usually SHA1).
.It Fl noattr
Normally, when a message is signed a set of attributes are included which
include the signing time and supported symmetric algorithms.
With this option they are not included.
.It Fl nocerts
When signing a message, the signer's certificate is normally included;
with this option it is excluded.
This will reduce the size of the signed message but the verifier must
have a copy of the signer's certificate available locally (passed using the
.Fl certfile
option, for example).
.It Fl nochain
Do not do chain verification of signers' certificates: that is,
don't use the certificates in the signed message as untrusted CAs.
.It Fl nodetach
When signing a message use opaque signing: this form is more resistant
to translation by mail relays but it cannot be read by mail agents that
do not support
.Em S/MIME .
Without this option cleartext signing with the
.Em MIME
type multipart/signed is used.
.It Fl noindef
Disable streaming I/O where it would produce an encoding of indefinite length.
This option currently has no effect.
In future streaming will be enabled by default on all relevant operations
and this option will disable it.
.It Fl nointern
When verifying a message, normally certificates
.Pq if any
included in the message are searched for the signing certificate.
With this option, only the certificates specified in the
.Fl certfile
option are used.
The supplied certificates can still be used as untrusted CAs however.
.It Fl nosigs
Don't try to verify the signatures on the message.
.It Fl noverify
Do not verify the signer's certificate of a signed message.
.It Fl out Ar file
The message text that has been decrypted or verified, or the output
.Em MIME
format message that has been signed or verified.
.It Fl outform Ar DER | PEM | SMIME
This specifies the output format for the PKCS#7 structure.
The default is
.Em SMIME ,
which writes an
.Em S/MIME
format message.
.Ar PEM
and
.Ar DER
format change this to write PEM and DER format PKCS#7 structures
instead.
This currently only affects the output format of the PKCS#7
structure; if no PKCS#7 structure is being output (for example with
.Fl verify
or
.Fl decrypt )
this option has no effect.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl recip Ar file
The recipients certificate when decrypting a message.
This certificate
must match one of the recipients of the message or an error occurs.
.It Fl signer Ar file
A signing certificate when signing or resigning a message;
this option can be used multiple times if more than one signer is required.
If a message is being verified, the signer's certificates will be
written to this file if the verification was successful.
.It Fl stream
The same as
.Fl indef .
.It Fl text
This option adds plain text
.Pq text/plain
.Em MIME
headers to the supplied message if encrypting or signing.
If decrypting or verifying, it strips off text headers:
if the decrypted or verified message is not of
.Em MIME
type text/plain then an error occurs.
.El
.Sh SMIME NOTES
The
.Em MIME
message must be sent without any blank lines between the
headers and the output.
Some mail programs will automatically add a blank line.
Piping the mail directly to sendmail is one way to
achieve the correct format.
.Pp
The supplied message to be signed or encrypted must include the
necessary
.Em MIME
headers or many
.Em S/MIME
clients won't display it properly
.Pq if at all .
You can use the
.Fl text
option to automatically add plain text headers.
.Pp
A
.Qq signed and encrypted
message is one where a signed message is then encrypted.
This can be produced by encrypting an already signed message:
see the
.Sx SMIME EXAMPLES
section.
.Pp
This version of the program only allows one signer per message, but it
will verify multiple signers on received messages.
Some
.Em S/MIME
clients choke if a message contains multiple signers.
It is possible to sign messages
.Qq in parallel
by signing an already signed message.
.Pp
The options
.Fl encrypt
and
.Fl decrypt
reflect common usage in
.Em S/MIME
clients.
Strictly speaking these process PKCS#7 enveloped data: PKCS#7
encrypted data is used for other purposes.
.Pp
The
.Fl resign
option uses an existing message digest when adding a new signer.
This means that attributes must be present in at least one existing
signer using the same message digest or this operation will fail.
.Pp
The
.Fl stream
and
.Fl indef
options enable experimental streaming I/O support.
As a result the encoding is BER using indefinite length constructed encoding
and no longer DER.
Streaming is supported for the
.Fl encrypt
and
.Fl sign
operations if the content is not detached.
.Pp
Streaming is always used for the
.Fl sign
operation with detached data
but since the content is no longer part of the PKCS#7 structure
the encoding remains DER.
.Sh SMIME EXIT CODES
.Bl -tag -width "XXXX"
.It Ar 0
The operation was completely successful.
.It Ar 1
An error occurred parsing the command options.
.It Ar 2
One of the input files could not be read.
.It Ar 3
An error occurred creating the PKCS#7 file or when reading the
.Em MIME
message.
.It Ar 4
An error occurred decrypting or verifying the message.
.It Ar 5
The message was verified correctly, but an error occurred writing out
the signer's certificates.
.El
.Sh SMIME EXAMPLES
Create a cleartext signed message:
.Bd -literal -offset indent
$ openssl smime -sign -in message.txt -text -out mail.msg \e
	-signer mycert.pem
.Ed
.Pp
Create an opaque signed message:
.Bd -literal -offset indent
$ openssl smime -sign -in message.txt -text -out mail.msg \e
	-nodetach -signer mycert.pem
.Ed
.Pp
Create a signed message, include some additional certificates and
read the private key from another file:
.Bd -literal -offset indent
$ openssl smime -sign -in in.txt -text -out mail.msg \e
	-signer mycert.pem -inkey mykey.pem -certfile mycerts.pem
.Ed
.Pp
Create a signed message with two signers:
.Bd -literal -offset indent
openssl smime -sign -in message.txt -text -out mail.msg \e
	-signer mycert.pem -signer othercert.pem
.Ed
.Pp
Send a signed message under
.Ux
directly to
.Xr sendmail 8 ,
including headers:
.Bd -literal -offset indent
$ openssl smime -sign -in in.txt -text -signer mycert.pem \e
	-from steve@@openssl.org -to someone@@somewhere \e
	-subject "Signed message" | sendmail someone@@somewhere
.Ed
.Pp
Verify a message and extract the signer's certificate if successful:
.Bd -literal -offset indent
$ openssl smime -verify -in mail.msg -signer user.pem \e
	-out signedtext.txt
.Ed
.Pp
Send encrypted mail using triple DES:
.Bd -literal -offset indent
$ openssl smime -encrypt -in in.txt -from steve@@openssl.org \e
	-to someone@@somewhere -subject "Encrypted message" \e
	-des3 -out mail.msg user.pem
.Ed
.Pp
Sign and encrypt mail:
.Bd -literal -offset indent
$ openssl smime -sign -in ml.txt -signer my.pem -text | \e
	openssl smime -encrypt -out mail.msg \e
	-from steve@@openssl.org -to someone@@somewhere \e
	-subject "Signed and Encrypted message" -des3 user.pem
.Ed
.Pp
.Sy Note :
The encryption command does not include the
.Fl text
option because the message being encrypted already has
.Em MIME
headers.
.Pp
Decrypt mail:
.Bd -literal -offset indent
$ openssl smime -decrypt -in mail.msg -recip mycert.pem \e
	-inkey key.pem"
.Ed
.Pp
The output from Netscape form signing is a PKCS#7 structure with the
detached signature format.
You can use this program to verify the signature by line wrapping the
base64-encoded structure and surrounding it with:
.Bd -unfilled -offset indent
-----BEGIN PKCS7-----
-----END PKCS7-----
.Ed
.Pp
and using the command:
.Bd -literal -offset indent
$ openssl smime -verify -inform PEM -in signature.pem \e
	-content content.txt
.Ed
.Pp
Alternatively, you can base64 decode the signature and use:
.Bd -literal -offset indent
$ openssl smime -verify -inform DER -in signature.der \e
	-content content.txt
.Ed
.Pp
Create an encrypted message using 128-bit AES:
.Bd -literal -offset indent
openssl smime -encrypt -in plain.txt -aes128 \e
	-out mail.msg cert.pem
.Ed
.Pp
Add a signer to an existing message:
.Bd -literal -offset indent
openssl smime -resign -in mail.msg -signer newsign.pem \e
	-out mail2.msg
.Ed
.Sh SMIME BUGS
The
.Em MIME
parser isn't very clever: it seems to handle most messages that I've thrown
at it, but it may choke on others.
.Pp
The code currently will only write out the signer's certificate to a file:
if the signer has a separate encryption certificate this must be manually
extracted.
There should be some heuristic that determines the correct encryption
certificate.
.Pp
Ideally, a database should be maintained of a certificate for each email
address.
.Pp
The code doesn't currently take note of the permitted symmetric encryption
algorithms as supplied in the
.Em SMIMECapabilities
signed attribute.
This means the user has to manually include the correct encryption algorithm.
It should store the list of permitted ciphers in a database and only use those.
.Pp
No revocation checking is done on the signer's certificate.
.Pp
The current code can only handle
.Em S/MIME
v2 messages; the more complex
.Em S/MIME
v3 structures may cause parsing errors.
.Sh SMIME HISTORY
The use of multiple
.Fl signer
options and the
.Fl resign
command were first added in
.Nm OpenSSL
1.0.0.
.\"
.\" SPEED
.\"
.Sh SPEED
.nr nS 1
.Nm "openssl speed"
.Bk -words
.Op Cm aes
.Op Cm aes-128-cbc
.Op Cm aes-192-cbc
.Op Cm aes-256-cbc
.Op Cm blowfish
.Op Cm bf-cbc
.Op Cm cast
.Op Cm cast-cbc
.Op Cm des
.Op Cm des-cbc
.Op Cm des-ede3
.Op Cm dsa
.Op Cm dsa512
.Op Cm dsa1024
.Op Cm dsa2048
.Op Cm hmac
.Op Cm md2
.Op Cm md4
.Op Cm md5
.Op Cm rc2
.Op Cm rc2-cbc
.Op Cm rc4
.Op Cm rmd160
.Op Cm rsa
.Op Cm rsa512
.Op Cm rsa1024
.Op Cm rsa2048
.Op Cm rsa4096
.Op Cm sha1
.Op Fl decrypt
.Op Fl elapsed
.Op Fl engine Ar id
.Op Fl evp Ar e
.Op Fl mr
.Op Fl multi Ar number
.Ek
.nr nS 0
.Pp
The
.Nm speed
command is used to test the performance of cryptographic algorithms.
.Bl -tag -width "XXXX"
.It Bq Cm zero or more test algorithms
If any options are given,
.Nm speed
tests those algorithms, otherwise all of the above are tested.
.It Fl decrypt
Time decryption instead of encryption
.Pq only EVP .
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm speed
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl elapsed
Measure time in real time instead of CPU user time.
.It Fl evp Ar e
Use EVP
.Ar e .
.It Fl mr
Produce machine readable output.
.It Fl multi Ar number
Run
.Ar number
benchmarks in parallel.
.El
.\"
.\" TS
.\"
.Sh TS
.nr nS 1
.Nm "openssl ts"
.Bk -words
.Fl query
.Op Fl md4 | md5 | ripemd160 | sha | sha1
.Op Fl cert
.Op Fl config Ar configfile
.Op Fl data Ar file_to_hash
.Op Fl digest Ar digest_bytes
.Op Fl in Ar request.tsq
.Op Fl no_nonce
.Op Fl out Ar request.tsq
.Op Fl policy Ar object_id
.Op Fl text
.Ek
.nr nS 0
.Pp
.nr nS 1
.Nm "openssl ts"
.Bk -words
.Fl reply
.Op Fl chain Ar certs_file.pem
.Op Fl config Ar configfile
.Op Fl engine Ar id
.Op Fl in Ar response.tsr
.Op Fl inkey Ar private.pem
.Op Fl out Ar response.tsr
.Op Fl passin Ar arg
.Op Fl policy Ar object_id
.Op Fl queryfile Ar request.tsq
.Op Fl section Ar tsa_section
.Op Fl signer Ar tsa_cert.pem
.Op Fl text
.Op Fl token_in
.Op Fl token_out
.Ek
.nr nS 0
.Pp
.nr nS 1
.Nm "openssl ts"
.Bk -words
.Fl verify
.Op Fl CAfile Ar trusted_certs.pem
.Op Fl CApath Ar trusted_cert_path
.Op Fl data Ar file_to_hash
.Op Fl digest Ar digest_bytes
.Op Fl in Ar response.tsr
.Op Fl queryfile Ar request.tsq
.Op Fl token_in
.Op Fl untrusted Ar cert_file.pem
.Ek
.nr nS 0
.Pp
The
.Nm ts
command is a basic Time Stamping Authority (TSA) client and server
application as specified in RFC 3161 (Time-Stamp Protocol, TSP).
A TSA can be part of a PKI deployment and its role is to provide long
term proof of the existence of a certain datum before a particular time.
Here is a brief description of the protocol:
.Bl -enum
.It
The TSA client computes a one-way hash value for a data file and sends
the hash to the TSA.
.It
The TSA attaches the current date and time to the received hash value,
signs them and sends the time stamp token back to the client.
By creating this token the TSA certifies the existence of the original
data file at the time of response generation.
.It
The TSA client receives the time stamp token and verifies the
signature on it.
It also checks if the token contains the same hash
value that it had sent to the TSA.
.El
.Pp
There is one DER-encoded protocol data unit defined for transporting a time
stamp request to the TSA and one for sending the time stamp response
back to the client.
The
.Nm ts
command has three main functions:
creating a time stamp request based on a data file;
creating a time stamp response based on a request;
and verifying if a response corresponds
to a particular request or a data file.
.Pp
There is no support for sending the requests/responses automatically
over HTTP or TCP yet as suggested in RFC 3161.
Users must send the requests either by FTP or email.
.Pp
The
.Fl query
switch can be used for creating and printing a time stamp
request with the following options:
.Bl -tag -width Ds
.It Fl cert
The TSA is expected to include its signing certificate in the
response.
.It Fl config Ar configfile
The configuration file to use.
This option overrides the
.Ev OPENSSL_CONF
environment variable.
Only the OID section of the config file is used with the
.Fl query
command.
.It Fl data Ar file_to_hash
The data file for which the time stamp request needs to be created.
stdin is the default if neither the
.Fl data
nor the
.Fl digest
option is specified.
.It Fl digest Ar digest_bytes
It is possible to specify the message imprint explicitly without the data
file.
The imprint must be specified in a hexadecimal format,
two characters per byte,
the bytes optionally separated by colons (e.g. 1A:F6:01:... or 1AF601...).
The number of bytes must match the message digest algorithm in use.
.It Fl in Ar request.tsq
This option specifies a previously created time stamp request in DER
format that will be printed into the output file.
Useful when you need to examine the content of a request in human-readable
format.
.It Fl md4|md5|ripemd160|sha|sha1
The message digest to apply to the data file.
It supports all the message digest algorithms that are supported by the
.Nm dgst
command.
The default is SHA-1.
.It Fl no_nonce
No nonce is specified in the request if this option is given.
Otherwise a 64-bit long pseudo-random none is
included in the request.
It is recommended to use nonce to protect against replay-attacks.
.It Fl out Ar request.tsq
Name of the output file to which the request will be written.
The default is stdout.
.It Fl policy Ar object_id
The policy that the client expects the TSA to use for creating the
time stamp token.
Either the dotted OID notation or OID names defined
in the config file can be used.
If no policy is requested the TSA will
use its own default policy.
.It Fl text
If this option is specified the output is in human-readable text format
instead of DER.
.El
.Pp
A time stamp response (TimeStampResp) consists of a response status
and the time stamp token itself (ContentInfo),
if the token generation was successful.
The
.Fl reply
command is for creating a time stamp
response or time stamp token based on a request and printing the
response/token in human-readable format.
If
.Fl token_out
is not specified the output is always a time stamp response (TimeStampResp),
otherwise it is a time stamp token (ContentInfo).
.Bl -tag -width Ds
.It Fl chain Ar certs_file.pem
The collection of certificates, in PEM format,
that will be included in the response
in addition to the signer certificate if the
.Fl cert
option was used for the request.
This file is supposed to contain the certificate chain
for the signer certificate from its issuer upwards.
The
.Fl reply
command does not build a certificate chain automatically.
.It Fl config Ar configfile
The configuration file to use.
This option overrides the
.Ev OPENSSL_CONF
environment variable.
See
.Sx TS CONFIGURATION FILE OPTIONS
for configurable variables.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm ts
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar response.tsr
Specifies a previously created time stamp response or time stamp token, if
.Fl token_in
is also specified,
in DER format that will be written to the output file.
This option does not require a request;
it is useful, for example,
when you need to examine the content of a response or token
or you want to extract the time stamp token from a response.
If the input is a token and the output is a time stamp response a default
.Dq granted
status info is added to the token.
.It Fl inkey Ar private.pem
The signer private key of the TSA in PEM format.
Overrides the
.Cm signer_key
config file option.
.It Fl out Ar response.tsr
The response is written to this file.
The format and content of the file depends on other options (see
.Fl text
and
.Fl token_out ) .
The default is stdout.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl policy Ar object_id
The default policy to use for the response unless the client
explicitly requires a particular TSA policy.
The OID can be specified either in dotted notation or with its name.
Overrides the
.Cm default_policy
config file option.
.It Fl queryfile Ar request.tsq
The name of the file containing a DER-encoded time stamp request.
.It Fl section Ar tsa_section
The name of the config file section containing the settings for the
response generation.
If not specified the default TSA section is used; see
.Sx TS CONFIGURATION FILE OPTIONS
for details.
.It Fl signer Ar tsa_cert.pem
The signer certificate of the TSA in PEM format.
The TSA signing certificate must have exactly one extended key usage
assigned to it: timeStamping.
The extended key usage must also be critical,
otherwise the certificate is going to be refused.
Overrides the
.Cm signer_cert
variable of the config file.
.It Fl text
If this option is specified the output is human-readable text format
instead of DER.
.It Fl token_in
This flag can be used together with the
.Fl in
option and indicates that the input is a DER-encoded time stamp token
(ContentInfo) instead of a time stamp response (TimeStampResp).
.It Fl token_out
The output is a time stamp token (ContentInfo) instead of time stamp
response (TimeStampResp).
.El
.Pp
The
.Fl verify
command is for verifying if a time stamp response or time stamp token
is valid and matches a particular time stamp request or data file.
The
.Fl verify
command does not use the configuration file.
.Bl -tag -width Ds
.It Fl CAfile Ar trusted_certs.pem
The name of the file containing a set of trusted self-signed CA
certificates in PEM format.
See the similar option of
.Nm verify
for additional details.
Either this option or
.Fl CApath
must be specified.
.It Fl CApath Ar trusted_cert_path
The name of the directory containing the trused CA certificates of the
client.
See the similar option of
.Nm verify
for additional details.
Either this option or
.Fl CAfile
must be specified.
.It Fl data Ar file_to_hash
The response or token must be verified against
.Ar file_to_hash .
The file is hashed with the message digest algorithm specified in the token.
The
.Fl digest
and
.Fl queryfile
options must not be specified with this one.
.It Fl digest Ar digest_bytes
The response or token must be verified against the message digest specified
with this option.
The number of bytes must match the message digest algorithm
specified in the token.
The
.Fl data
and
.Fl queryfile
options must not be specified with this one.
.It Fl in Ar response.tsr
The time stamp response that needs to be verified, in DER format.
This option in mandatory.
.It Fl queryfile Ar request.tsq
The original time stamp request, in DER format.
The
.Fl data
and
.Fl digest
options must not be specified with this one.
.It Fl token_in
This flag can be used together with the
.Fl in
option and indicates that the input is a DER-encoded time stamp token
(ContentInfo) instead of a time stamp response (TimeStampResp).
.It Fl untrusted Ar cert_file.pem
Set of additional untrusted certificates in PEM format which may be
needed when building the certificate chain for the TSA's signing
certificate.
This file must contain the TSA signing certificate and
all intermediate CA certificates unless the response includes them.
.El
.Sh TS CONFIGURATION FILE OPTIONS
The
.Fl query
and
.Fl reply
options make use of a configuration file defined by the
.Ev OPENSSL_CONF
environment variable.
The
.Fl query
option uses only the symbolic OID names section
and it can work without it.
However, the
.Fl reply
option needs the config file for its operation.
.Pp
When there is a command line switch equivalent of a variable the
switch always overrides the settings in the config file.
.Bl -tag -width Ds
.It Cm tsa Ar section , Cm default_tsa
This is the main section and it specifies the name of another section
that contains all the options for the
.Fl reply
option.
This default section can be overridden with the
.Fl section
command line switch.
.It Cm oid_file
See
.Nm ca
for a description.
.It Cm oid_section
See
.Nm ca
for a description.
.It Cm serial
The name of the file containing the hexadecimal serial number of the
last time stamp response created.
This number is incremented by 1 for each response.
If the file does not exist at the time of response
generation a new file is created with serial number 1.
This parameter is mandatory.
.It Cm crypto_device
Specifies the
.Nm OpenSSL
engine that will be set as the default for
all available algorithms.
.It Cm signer_cert
TSA signing certificate, in PEM format.
The same as the
.Fl signer
command line option.
.It Cm certs
A file containing a set of PEM-encoded certificates that need to be
included in the response.
The same as the
.Fl chain
command line option.
.It Cm signer_key
The private key of the TSA, in PEM format.
The same as the
.Fl inkey
command line option.
.It Cm default_policy
The default policy to use when the request does not mandate any policy.
The same as the
.Fl policy
command line option.
.It Cm other_policies
Comma separated list of policies that are also acceptable by the TSA
and used only if the request explicitly specifies one of them.
.It Cm digests
The list of message digest algorithms that the TSA accepts.
At least one algorithm must be specified.
This parameter is mandatory.
.It Cm accuracy
The accuracy of the time source of the TSA in seconds, milliseconds
and microseconds.
For example, secs:1, millisecs:500, microsecs:100.
If any of the components is missing,
zero is assumed for that field.
.It Cm clock_precision_digits
Specifies the maximum number of digits, which represent the fraction of
seconds, that need to be included in the time field.
The trailing zeroes must be removed from the time,
so there might actually be fewer digits,
or no fraction of seconds at all.
The maximum value is 6;
the default is 0.
.It Cm ordering
If this option is yes,
the responses generated by this TSA can always be ordered,
even if the time difference between two responses is less
than the sum of their accuracies.
The default is no.
.It Cm tsa_name
Set this option to yes if the subject name of the TSA must be included in
the TSA name field of the response.
The default is no.
.It Cm ess_cert_id_chain
The SignedData objects created by the TSA always contain the
certificate identifier of the signing certificate in a signed
attribute (see RFC 2634, Enhanced Security Services).
If this option is set to yes and either the
.Cm certs
variable or the
.Fl chain
option is specified then the certificate identifiers of the chain will also
be included in the SigningCertificate signed attribute.
If this variable is set to no,
only the signing certificate identifier is included.
The default is no.
.El
.Sh TS ENVIRONMENT VARIABLES
.Ev OPENSSL_CONF
contains the path of the configuration file and can be
overridden by the
.Fl config
command line option.
.Sh TS EXAMPLES
All the examples below presume that
.Ev OPENSSL_CONF
is set to a proper configuration file,
e.g. the example configuration file
.Pa openssl/apps/openssl.cnf
will do.
.Pp
To create a time stamp request for design1.txt with SHA-1
without nonce and policy and no certificate is required in the response:
.Bd -literal -offset indent
$ openssl ts -query -data design1.txt -no_nonce \e
	-out design1.tsq
.Ed
.Pp
To create a similar time stamp request but specifying the message imprint
explicitly:
.Bd -literal -offset indent
$ openssl ts -query \e
	-digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \e
	-no_nonce -out design1.tsq
.Ed
.Pp
To print the content of the previous request in human readable format:
.Bd -literal -offset indent
$ openssl ts -query -in design1.tsq -text
.Ed
.Pp
To create a time stamp request which includes the MD5 digest
of design2.txt, requests the signer certificate and nonce,
specifies a policy ID
(assuming the tsa_policy1 name is defined in the
OID section of the config file):
.Bd -literal -offset indent
$ openssl ts -query -data design2.txt -md5 \e
	-policy tsa_policy1 -cert -out design2.tsq
.Ed
.Pp
Before generating a response,
a signing certificate must be created for the TSA that contains the
.Cm timeStamping
critical extended key usage extension
without any other key usage extensions.
You can add the
.Dq extendedKeyUsage = critical,timeStamping
line to the user certificate section
of the config file to generate a proper certificate.
See the
.Nm req ,
.Nm ca ,
and
.Nm x509
commands for instructions.
The examples below assume that cacert.pem contains the certificate of the CA,
tsacert.pem is the signing certificate issued by cacert.pem and
tsakey.pem is the private key of the TSA.
.Pp
To create a time stamp response for a request:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq -inkey tsakey.pem \e
	-signer tsacert.pem -out design1.tsr
.Ed
.Pp
If you want to use the settings in the config file you could just write:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq -out design1.tsr
.Ed
.Pp
To print a time stamp reply to stdout in human readable format:
.Bd -literal -offset indent
$ openssl ts -reply -in design1.tsr -text
.Ed
.Pp
To create a time stamp token instead of time stamp response:
.Bd -literal -offset indent
$ openssl ts -reply -queryfile design1.tsq \e
	-out design1_token.der -token_out
.Ed
.Pp
To print a time stamp token to stdout in human readable format:
.Bd -literal -offset indent
$ openssl ts -reply -in design1_token.der -token_in \e
	-text -token_out
.Ed
.Pp
To extract the time stamp token from a response:
.Bd -literal -offset indent
$ openssl ts -reply -in design1.tsr -out design1_token.der \e
	-token_out
.Ed
.Pp
To add
.Dq granted
status info to a time stamp token thereby creating a valid response:
.Bd -literal -offset indent
$ openssl ts -reply -in design1_token.der \e
	-token_in -out design1.tsr
.Ed
.Pp
To verify a time stamp reply against a request:
.Bd -literal -offset indent
$ openssl ts -verify -queryfile design1.tsq -in design1.tsr \e
	-CAfile cacert.pem -untrusted tsacert.pem
.Ed
.Pp
To verify a time stamp reply that includes the certificate chain:
.Bd -literal -offset indent
$ openssl ts -verify -queryfile design2.tsq -in design2.tsr \e
	-CAfile cacert.pem
.Ed
.Pp
To verify a time stamp token against the original data file:
.Bd -literal -offset indent
$ openssl ts -verify -data design2.txt -in design2.tsr \e
	-CAfile cacert.pem
.Ed
.Pp
To verify a time stamp token against a message imprint:
.Bd -literal -offset indent
$ openssl ts -verify \e
	-digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \e
	-in design2.tsr -CAfile cacert.pem
.Ed
.Sh TS BUGS
No support for time stamps over SMTP, though it is quite easy
to implement an automatic email-based TSA with
.Xr procmail
and
.Xr perl 1 .
Pure TCP/IP is not supported.
.Pp
The file containing the last serial number of the TSA is not
locked when being read or written.
This is a problem if more than one instance of
.Nm OpenSSL
is trying to create a time stamp
response at the same time.
.Pp
Look for the FIXME word in the source files.
.Pp
The source code should really be reviewed by somebody else, too.
.Pp
More testing is needed.
.Sh TS AUTHORS
.An Zoltan Glozik Aq Mt zglozik@@opentsa.org ,
OpenTSA project
.Pq Lk http://www.opentsa.org .
.\"
.\" SPKAC
.\"
.Sh SPKAC
.nr nS 1
.Nm "openssl spkac"
.Bk -words
.Op Fl challenge Ar string
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl key Ar keyfile
.Op Fl noout
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl pubkey
.Op Fl spkac Ar spkacname
.Op Fl spksect Ar section
.Op Fl verify
.Ek
.nr nS 0
.Pp
The
.Nm spkac
command processes Netscape signed public key and challenge
.Pq SPKAC
files.
It can print out their contents, verify the signature,
and produce its own SPKACs from a supplied private key.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl challenge Ar string
Specifies the challenge string if an SPKAC is being created.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm spkac
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read from, or standard input if this option is not specified.
Ignored if the
.Fl key
option is used.
.It Fl key Ar keyfile
Create an SPKAC file using the private key in
.Ar keyfile .
The
.Fl in , noout , spksect ,
and
.Fl verify
options are ignored if present.
.It Fl noout
Don't output the text version of the SPKAC
.Pq not used if an SPKAC is being created .
.It Fl out Ar file
Specifies the output
.Ar file
to write to, or standard output by default.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl pubkey
Output the public key of an SPKAC
.Pq not used if an SPKAC is being created .
.It Fl spkac Ar spkacname
Allows an alternative name for the variable containing the SPKAC.
The default is "SPKAC".
This option affects both generated and input SPKAC files.
.It Fl spksect Ar section
Allows an alternative name for the
.Ar section
containing the SPKAC.
The default is the default section.
.It Fl verify
Verifies the digital signature on the supplied SPKAC.
.El
.Sh SPKAC EXAMPLES
Print out the contents of an SPKAC:
.Pp
.Dl $ openssl spkac -in spkac.cnf
.Pp
Verify the signature of an SPKAC:
.Pp
.Dl $ openssl spkac -in spkac.cnf -noout -verify
.Pp
Create an SPKAC using the challenge string
.Qq hello :
.Pp
.Dl $ openssl spkac -key key.pem -challenge hello -out spkac.cnf
.Pp
Example of an SPKAC,
.Pq long lines split up for clarity :
.Bd -unfilled -offset indent
SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA1cCoq2Wa3Ixs47uI7F\e
PVwHVIPDx5yso105Y6zpozam135a8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03u\e
PFoQIDAQABFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJh1bEIYuc\e
2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnDdq+NQ3F+X4deMx9AaEglZtULwV\e
4=
.Ed
.Sh SPKAC NOTES
A created SPKAC with suitable DN components appended can be fed into
the
.Nm ca
utility.
.Pp
SPKACs are typically generated by Netscape when a form is submitted
containing the
.Em KEYGEN
tag as part of the certificate enrollment process.
.Pp
The challenge string permits a primitive form of proof of possession
of private key.
By checking the SPKAC signature and a random challenge
string, some guarantee is given that the user knows the private key
corresponding to the public key being certified.
This is important in some applications.
Without this it is possible for a previous SPKAC
to be used in a
.Qq replay attack .
.\"
.\" VERIFY
.\"
.Sh VERIFY
.nr nS 1
.Nm "openssl verify"
.Bk -words
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl check_ss_sig
.Op Fl crl_check
.Op Fl crl_check_all
.Op Fl engine Ar id
.Op Fl explicit_policy
.Op Fl extended_crl
.Op Fl help
.Op Fl ignore_critical
.Op Fl inhibit_any
.Op Fl inhibit_map
.Op Fl issuer_checks
.Op Fl policy_check
.Op Fl purpose Ar purpose
.Op Fl untrusted Ar file
.Op Fl verbose
.Op Fl x509_strict
.Op Fl
.Op Ar certificates
.Ek
.nr nS 0
.Pp
The
.Nm verify
command verifies certificate chains.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl check_ss_sig
Verify the signature on the self-signed root CA.
This is disabled by default
because it doesn't add any security.
.It Fl CAfile Ar file
A
.Ar file
of trusted certificates.
The
.Ar file
should contain multiple certificates in PEM format, concatenated together.
.It Fl CApath Ar directory
A
.Ar directory
of trusted certificates.
The certificates should have names of the form
.Em hash.0 ,
or have symbolic links to them of this form
("hash" is the hashed certificate subject name: see the
.Fl hash
option of the
.Nm x509
utility).
The
.Nm c_rehash
script distributed with OpenSSL
will automatically create symbolic links to a directory of certificates.
.It Fl crl_check
Checks end entity certificate validity by attempting to look up a valid CRL.
If a valid CRL cannot be found an error occurs.
.It Fl crl_check_all
Checks the validity of all certificates in the chain by attempting
to look up valid CRLs.
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm verify
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl explicit_policy
Set policy variable require-explicit-policy (see RFC 3280 et al).
.It Fl extended_crl
Enable extended CRL features such as indirect CRLs and alternate CRL
signing keys.
.It Fl help
Prints out a usage message.
.It Fl ignore_critical
Normally if an unhandled critical extension is present which is not
supported by
.Nm OpenSSL ,
the certificate is rejected (as required by RFC 3280 et al).
If this option is set, critical extensions are ignored.
.It Fl inhibit_any
Set policy variable inhibit-any-policy (see RFC 3280 et al).
.It Fl inhibit_map
Set policy variable inhibit-policy-mapping (see RFC 3280 et al).
.It Fl issuer_checks
Print out diagnostics relating to searches for the issuer certificate
of the current certificate.
This shows why each candidate issuer certificate was rejected.
However the presence of rejection messages
does not itself imply that anything is wrong: during the normal
verify process several rejections may take place.
.It Fl policy_check
Enables certificate policy processing.
.It Fl purpose Ar purpose
The intended use for the certificate.
Without this option no chain verification will be done.
Currently accepted uses are
.Ar sslclient , sslserver ,
.Ar nssslserver , smimesign ,
.Ar smimeencrypt , crlsign ,
.Ar any ,
and
.Ar ocsphelper .
See the
.Sx VERIFY OPERATION
section for more information.
.It Fl untrusted Ar file
A
.Ar file
of untrusted certificates.
The
.Ar file
should contain multiple certificates.
.It Fl verbose
Print extra information about the operations being performed.
.It Fl x509_strict
Disable workarounds for broken certificates which have to be disabled
for strict X.509 compliance.
.It Fl
Marks the last option.
All arguments following this are assumed to be certificate files.
This is useful if the first certificate filename begins with a
.Sq - .
.It Ar certificates
One or more
.Ar certificates
to verify.
If no certificate files are included, an attempt is made to read
a certificate from standard input.
They should all be in PEM format.
.El
.Sh VERIFY OPERATION
The
.Nm verify
program uses the same functions as the internal SSL and S/MIME verification,
therefore this description applies to these verify operations too.
.Pp
There is one crucial difference between the verify operations performed
by the
.Nm verify
program: wherever possible an attempt is made to continue
after an error, whereas normally the verify operation would halt on the
first error.
This allows all the problems with a certificate chain to be determined.
.Pp
The verify operation consists of a number of separate steps:
.Pp
Firstly a certificate chain is built up starting from the supplied certificate
and ending in the root CA.
It is an error if the whole chain cannot be built up.
The chain is built up by looking up the issuer's certificate of the current
certificate.
If a certificate is found which is its own issuer, it is assumed
to be the root CA.
.Pp
The process of
.Qq looking up the issuer's certificate
itself involves a number of steps.
In versions of
.Nm OpenSSL
before 0.9.5a the first certificate whose subject name matched the issuer
of the current certificate was assumed to be the issuer's certificate.
In
.Nm OpenSSL
0.9.6 and later all certificates whose subject name matches the issuer name
of the current certificate are subject to further tests.
The relevant authority key identifier components of the current certificate
.Pq if present
must match the subject key identifier
.Pq if present
and issuer and serial number of the candidate issuer; in addition the
.Em keyUsage
extension of the candidate issuer
.Pq if present
must permit certificate signing.
.Pp
The lookup first looks in the list of untrusted certificates and if no match
is found the remaining lookups are from the trusted certificates.
The root CA is always looked up in the trusted certificate list: if the
certificate to verify is a root certificate, then an exact match must be
found in the trusted list.
.Pp
The second operation is to check every untrusted certificate's extensions for
consistency with the supplied purpose.
If the
.Fl purpose
option is not included, then no checks are done.
The supplied or
.Qq leaf
certificate must have extensions compatible with the supplied purpose
and all other certificates must also be valid CA certificates.
The precise extensions required are described in more detail in
the
.Sx X.509 CERTIFICATE EXTENSIONS
section below.
.Pp
The third operation is to check the trust settings on the root CA.
The root CA should be trusted for the supplied purpose.
For compatibility with previous versions of
.Nm SSLeay
and
.Nm OpenSSL ,
a certificate with no trust settings is considered to be valid for
all purposes.
.Pp
The final operation is to check the validity of the certificate chain.
The validity period is checked against the current system time and the
.Em notBefore
and
.Em notAfter
dates in the certificate.
The certificate signatures are also checked at this point.
.Pp
If all operations complete successfully, the certificate is considered
valid.
If any operation fails then the certificate is not valid.
.Sh VERIFY DIAGNOSTICS
When a verify operation fails, the output messages can be somewhat cryptic.
The general form of the error message is:
.Bd -unfilled
\& server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
\& error 24 at 1 depth lookup:invalid CA certificate
.Ed
.Pp
The first line contains the name of the certificate being verified, followed by
the subject name of the certificate.
The second line contains the error number and the depth.
The depth is the number of the certificate being verified when a
problem was detected starting with zero for the certificate being verified
itself, then 1 for the CA that signed the certificate and so on.
Finally a text version of the error number is presented.
.Pp
An exhaustive list of the error codes and messages is shown below; this also
includes the name of the error code as defined in the header file
.Aq Pa openssl/x509_vfy.h .
Some of the error codes are defined but never returned: these are described
as
.Qq unused .
.Bl -tag -width "XXXX"
.It Ar "0 X509_V_OK: ok"
The operation was successful.
.It Ar 2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
The issuer certificate could not be found: this occurs if the issuer certificate
of an untrusted certificate cannot be found.
.It Ar 3 X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
The CRL of a certificate could not be found.
.It Ar 4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt certificate's signature
The certificate signature could not be decrypted.
This means that the actual signature value could not be determined rather
than it not matching the expected value.
This is only meaningful for RSA keys.
.It Ar 5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's signature
The CRL signature could not be decrypted: this means that the actual
signature value could not be determined rather than it not matching the
expected value.
Unused.
.It Ar 6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer public key
The public key in the certificate
.Em SubjectPublicKeyInfo
could not be read.
.It Ar 7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
The signature of the certificate is invalid.
.It Ar 8 X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
The signature of the certificate is invalid.
.It Ar 9 X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
The certificate is not yet valid: the
.Em notBefore
date is after the current time.
.It Ar 10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
The certificate has expired; that is, the
.Em notAfter
date is before the current time.
.It Ar 11 X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
The CRL is not yet valid.
.It Ar 12 X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
The CRL has expired.
.It Ar 13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in certificate's notBefore field
The certificate
.Em notBefore
field contains an invalid time.
.It Ar 14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in certificate's notAfter field
The certificate
.Em notAfter
field contains an invalid time.
.It Ar 15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's lastUpdate field
The CRL
.Em lastUpdate
field contains an invalid time.
.It Ar 16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's nextUpdate field
The CRL
.Em nextUpdate
field contains an invalid time.
.It Ar 17 X509_V_ERR_OUT_OF_MEM: out of memory
An error occurred trying to allocate memory.
This should never happen.
.It Ar 18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
The passed certificate is self-signed and the same certificate cannot be
found in the list of trusted certificates.
.It Ar 19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in certificate chain
The certificate chain could be built up using the untrusted certificates but
the root could not be found locally.
.It Ar 20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local issuer certificate
The issuer certificate of a locally looked up certificate could not be found.
This normally means the list of trusted certificates is not complete.
.It Ar 21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first certificate
No signatures could be verified because the chain contains only one
certificate and it is not self-signed.
.It Ar 22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
The certificate chain length is greater than the supplied maximum depth.
Unused.
.It Ar 23 X509_V_ERR_CERT_REVOKED: certificate revoked
The certificate has been revoked.
.It Ar 24 X509_V_ERR_INVALID_CA: invalid CA certificate
A CA certificate is invalid.
Either it is not a CA or its extensions are not consistent
with the supplied purpose.
.It Ar 25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
The
.Em basicConstraints
pathlength parameter has been exceeded.
.It Ar 26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
The supplied certificate cannot be used for the specified purpose.
.It Ar 27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
The root CA is not marked as trusted for the specified purpose.
.It Ar 28 X509_V_ERR_CERT_REJECTED: certificate rejected
The root CA is marked to reject the specified purpose.
.It Ar 29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
The current candidate issuer certificate was rejected because its subject name
did not match the issuer name of the current certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It Ar 30 X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier mismatch
The current candidate issuer certificate was rejected because its subject key
identifier was present and did not match the authority key identifier current
certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It Ar 31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial number mismatch
The current candidate issuer certificate was rejected because its issuer name
and serial number were present and did not match the authority key identifier
of the current certificate.
Only displayed when the
.Fl issuer_checks
option is set.
.It Ar 32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate signing
The current candidate issuer certificate was rejected because its
.Em keyUsage
extension does not permit certificate signing.
.It Ar 50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure
An application specific error.
Unused.
.El
.Sh VERIFY BUGS
Although the issuer checks are a considerable improvement over the old
technique, they still suffer from limitations in the underlying
X509_LOOKUP API.
One consequence of this is that trusted certificates with matching subject
name must either appear in a file (as specified by the
.Fl CAfile
option) or a directory (as specified by
.Fl CApath ) .
If they occur in both, only the certificates in the file will
be recognised.
.Pp
Previous versions of
.Nm OpenSSL
assumed certificates with matching subject name were identical and
mishandled them.
.\"
.\" VERSION
.\"
.Sh VERSION
.Nm openssl version
.Op Fl abdfopv
.Pp
The
.Nm version
command is used to print out version information about
.Nm OpenSSL .
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl a
All information: this is the same as setting all the other flags.
.It Fl b
The date the current version of
.Nm OpenSSL
was built.
.It Fl d
.Ev OPENSSLDIR
setting.
.It Fl f
Compilation flags.
.It Fl o
Option information: various options set when the library was built.
.It Fl p
Platform setting.
.It Fl v
The current
.Nm OpenSSL
version.
.El
.Sh VERSION NOTES
The output of
.Nm openssl version -a
would typically be used when sending in a bug report.
.Sh VERSION HISTORY
The
.Fl d
option was added in
.Nm OpenSSL
0.9.7.
.\"
.\" X509
.\"
.Sh X509
.nr nS 1
.Nm "openssl x509"
.Bk -words
.Op Fl C
.Op Fl addreject Ar arg
.Op Fl addtrust Ar arg
.Op Fl alias
.Op Fl CA Ar file
.Op Fl CAcreateserial
.Op Fl CAform Ar DER | PEM
.Op Fl CAkey Ar file
.Op Fl CAkeyform Ar DER | PEM
.Op Fl CAserial Ar file
.Op Fl certopt Ar option
.Op Fl checkend Ar arg
.Op Fl clrext
.Op Fl clrreject
.Op Fl clrtrust
.Op Fl dates
.Op Fl days Ar arg
.Op Fl email
.Op Fl enddate
.Op Fl engine Ar id
.Op Fl extensions Ar section
.Op Fl extfile Ar file
.Op Fl fingerprint
.Op Fl hash
.Op Fl in Ar file
.Op Fl inform Ar DER | NET | PEM
.Op Fl issuer
.Op Fl issuer_hash
.Op Fl issuer_hash_old
.Op Fl keyform Ar DER | PEM
.Op Fl md2 | md5 | sha1
.Op Fl modulus
.Op Fl nameopt Ar option
.Op Fl noout
.Op Fl ocsp_uri
.Op Fl ocspid
.Op Fl out Ar file
.Op Fl outform Ar DER | NET | PEM
.Op Fl passin Ar arg
.Op Fl pubkey
.Op Fl purpose
.Op Fl req
.Op Fl serial
.Op Fl set_serial Ar n
.Op Fl setalias Ar arg
.Op Fl signkey Ar file
.Op Fl startdate
.Op Fl subject
.Op Fl subject_hash
.Op Fl subject_hash_old
.Op Fl text
.Op Fl trustout
.Op Fl x509toreq
.Ek
.nr nS 0
.Pp
The
.Nm x509
command is a multi-purpose certificate utility.
It can be used to display certificate information, convert certificates to
various forms, sign certificate requests like a
.Qq mini CA ,
or edit certificate trust settings.
.Pp
Since there are a large number of options, they are split up into
various sections.
.Sh X509 INPUT, OUTPUT, AND GENERAL PURPOSE OPTIONS
.Bl -tag -width "XXXX"
.It Fl engine Ar id
Specifying an engine (by its unique
.Ar id
string) will cause
.Nm x509
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl in Ar file
This specifies the input
.Ar file
to read a certificate from, or standard input if this option is not specified.
.It Fl inform Ar DER | NET | PEM
This specifies the input format.
Normally, the command will expect an X.509 certificate,
but this can change if other options such as
.Fl req
are present.
The
.Ar DER
format is the DER encoding of the certificate and
.Ar PEM
is the base64 encoding of the DER encoding with header and footer lines added.
The
.Ar NET
option is an obscure Netscape server format that is now
obsolete.
.It Fl md2 | md5 | sha1
The digest to use.
This affects any signing or display option that uses a message digest,
such as the
.Fl fingerprint , signkey ,
and
.Fl CA
options.
If not specified, MD5 is used.
If the key being used to sign with is a DSA key,
this option has no effect: SHA1 is always used with DSA keys.
.It Fl out Ar file
This specifies the output
.Ar file
to write to, or standard output by default.
.It Fl outform Ar DER | NET | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl passin Ar arg
The key password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.El
.Sh X509 DISPLAY OPTIONS
.Sy Note :
The
.Fl alias
and
.Fl purpose
options are also display options but are described in the
.Sx X509 TRUST SETTINGS
section.
.Bl -tag -width "XXXX"
.It Fl C
This outputs the certificate in the form of a C source file.
.It Fl certopt Ar option
Customise the output format used with
.Fl text .
The
.Ar option
argument can be a single option or multiple options separated by commas.
The
.Fl certopt
switch may also be used more than once to set multiple options.
See the
.Sx X509 TEXT OPTIONS
section for more information.
.It Fl dates
Prints out the start and expiry dates of a certificate.
.It Fl email
Outputs the email address(es), if any.
.It Fl enddate
Prints out the expiry date of the certificate; that is, the
.Em notAfter
date.
.It Fl fingerprint
Prints out the digest of the DER-encoded version of the whole certificate
(see
.Sx DIGEST OPTIONS ) .
.It Fl hash
A synonym for
.Fl subject_hash ,
for backwards compatibility.
.It Fl issuer
Outputs the issuer name.
.It Fl issuer_hash
Outputs the
.Qq hash
of the certificate issuer name.
.It Fl issuer_hash_old
Outputs the
.Qq hash
of the certificate issuer name using the older algorithm
as used by
.Nm OpenSSL
versions before 1.0.0.
.It Fl modulus
This option prints out the value of the modulus of the public key
contained in the certificate.
.It Fl nameopt Ar option
Option which determines how the subject or issuer names are displayed.
The
.Ar option
argument can be a single option or multiple options separated by commas.
Alternatively, the
.Fl nameopt
switch may be used more than once to set multiple options.
See the
.Sx X509 NAME OPTIONS
section for more information.
.It Fl noout
This option prevents output of the encoded version of the request.
.It Fl ocsp_uri
Outputs the OCSP responder addresses, if any.
.It Fl ocspid
Print OCSP hash values for the subject name and public key.
.It Fl pubkey
Output the public key.
.It Fl serial
Outputs the certificate serial number.
.It Fl startdate
Prints out the start date of the certificate; that is, the
.Em notBefore
date.
.It Fl subject
Outputs the subject name.
.It Fl subject_hash
Outputs the
.Qq hash
of the certificate subject name.
This is used in
.Nm OpenSSL
to form an index to allow certificates in a directory to be looked up
by subject name.
.It Fl subject_hash_old
Outputs the
.Qq hash
of the certificate subject name using the older algorithm
as used by
.Nm OpenSSL
versions before 1.0.0.
.It Fl text
Prints out the certificate in text form.
Full details are output including the public key, signature algorithms,
issuer and subject names, serial number, any extensions present,
and any trust settings.
.El
.Sh X509 TRUST SETTINGS
Please note these options are currently experimental and may well change.
.Pp
A
.Em trusted certificate
is an ordinary certificate which has several
additional pieces of information attached to it such as the permitted
and prohibited uses of the certificate and an
.Qq alias .
.Pp
Normally, when a certificate is being verified at least one certificate
must be
.Qq trusted .
By default, a trusted certificate must be stored
locally and must be a root CA: any certificate chain ending in this CA
is then usable for any purpose.
.Pp
Trust settings currently are only used with a root CA.
They allow a finer control over the purposes the root CA can be used for.
For example, a CA may be trusted for an SSL client but not for
SSL server use.
.Pp
See the description of the
.Nm verify
utility for more information on the meaning of trust settings.
.Pp
Future versions of
.Nm OpenSSL
will recognize trust settings on any certificate: not just root CAs.
.Bl -tag -width "XXXX"
.It Fl addreject Ar arg
Adds a prohibited use.
It accepts the same values as the
.Fl addtrust
option.
.It Fl addtrust Ar arg
Adds a trusted certificate use.
Any object name can be used here, but currently only
.Ar clientAuth
.Pq SSL client use ,
.Ar serverAuth
.Pq SSL server use ,
and
.Ar emailProtection
.Pq S/MIME email
are used.
Other
.Nm OpenSSL
applications may define additional uses.
.It Fl alias
Outputs the certificate alias, if any.
.It Fl clrreject
Clears all the prohibited or rejected uses of the certificate.
.It Fl clrtrust
Clears all the permitted or trusted uses of the certificate.
.It Fl purpose
This option performs tests on the certificate extensions and outputs
the results.
For a more complete description, see the
.Sx X.509 CERTIFICATE EXTENSIONS
section.
.It Fl setalias Ar arg
Sets the alias of the certificate.
This will allow the certificate to be referred to using a nickname,
for example
.Qq Steve's Certificate .
.It Fl trustout
This causes
.Nm x509
to output a
.Em trusted certificate .
An ordinary or trusted certificate can be input, but by default an ordinary
certificate is output and any trust settings are discarded.
With the
.Fl trustout
option a trusted certificate is output.
A trusted certificate is automatically output if any trust settings
are modified.
.El
.Sh X509 SIGNING OPTIONS
The
.Nm x509
utility can be used to sign certificates and requests: it
can thus behave like a
.Qq mini CA .
.Bl -tag -width "XXXX"
.It Fl CA Ar file
Specifies the CA certificate to be used for signing.
When this option is present,
.Nm x509
behaves like a
.Qq mini CA .
The input file is signed by the CA using this option;
that is, its issuer name is set to the subject name of the CA and it is
digitally signed using the CA's private key.
.Pp
This option is normally combined with the
.Fl req
option.
Without the
.Fl req
option, the input is a certificate which must be self-signed.
.It Fl CAcreateserial
With this option the CA serial number file is created if it does not exist:
it will contain the serial number
.Sq 02
and the certificate being signed will have
.Sq 1
as its serial number.
Normally, if the
.Fl CA
option is specified and the serial number file does not exist, it is an error.
.It Fl CAform Ar DER | PEM
The format of the CA certificate file.
The default is
.Ar PEM .
.It Fl CAkey Ar file
Sets the CA private key to sign a certificate with.
If this option is not specified, it is assumed that the CA private key
is present in the CA certificate file.
.It Fl CAkeyform Ar DER | PEM
The format of the CA private key.
The default is
.Ar PEM .
.It Fl CAserial Ar file
Sets the CA serial number file to use.
.Pp
When the
.Fl CA
option is used to sign a certificate,
it uses a serial number specified in a file.
This file consists of one line containing an even number of hex digits
with the serial number to use.
After each use the serial number is incremented and written out
to the file again.
.Pp
The default filename consists of the CA certificate file base name with
.Pa .srl
appended.
For example, if the CA certificate file is called
.Pa mycacert.pem ,
it expects to find a serial number file called
.Pa mycacert.srl .
.It Fl checkend Ar arg
Check whether the certificate expires in the next
.Ar arg
seconds.
If so, exit with return value 1;
otherwise exit with return value 0.
.It Fl clrext
Delete any extensions from a certificate.
This option is used when a certificate is being created from another
certificate (for example with the
.Fl signkey
or the
.Fl CA
options).
Normally, all extensions are retained.
.It Fl days Ar arg
Specifies the number of days to make a certificate valid for.
The default is 30 days.
.It Fl extensions Ar section
The section to add certificate extensions from.
If this option is not specified, the extensions should either be
contained in the unnamed
.Pq default
section or the default section should contain a variable called
.Qq extensions
which contains the section to use.
.It Fl extfile Ar file
File containing certificate extensions to use.
If not specified, no extensions are added to the certificate.
.It Fl keyform Ar DER | PEM
Specifies the format
.Pq DER or PEM
of the private key file used in the
.Fl signkey
option.
.It Fl req
By default, a certificate is expected on input.
With this option a certificate request is expected instead.
.It Fl set_serial Ar n
Specifies the serial number to use.
This option can be used with either the
.Fl signkey
or
.Fl CA
options.
If used in conjunction with the
.Fl CA
option, the serial number file (as specified by the
.Fl CAserial
or
.Fl CAcreateserial
options) is not used.
.Pp
The serial number can be decimal or hex (if preceded by
.Sq 0x ) .
Negative serial numbers can also be specified but their use is not recommended.
.It Fl signkey Ar file
This option causes the input file to be self-signed using the supplied
private key.
.Pp
If the input file is a certificate, it sets the issuer name to the
subject name
.Pq i.e. makes it self-signed ,
changes the public key to the supplied value,
and changes the start and end dates.
The start date is set to the current time and the end date is set to
a value determined by the
.Fl days
option.
Any certificate extensions are retained unless the
.Fl clrext
option is supplied.
.Pp
If the input is a certificate request, a self-signed certificate
is created using the supplied private key using the subject name in
the request.
.It Fl x509toreq
Converts a certificate into a certificate request.
The
.Fl signkey
option is used to pass the required private key.
.El
.Sh X509 NAME OPTIONS
The
.Fl nameopt
command line switch determines how the subject and issuer
names are displayed.
If no
.Fl nameopt
switch is present, the default
.Qq oneline
format is used which is compatible with previous versions of
.Nm OpenSSL .
Each option is described in detail below; all options can be preceded by a
.Sq -
to turn the option off.
Only
.Ar compat ,
.Ar RFC2253 ,
.Ar oneline ,
and
.Ar multiline
will normally be used.
.Bl -tag -width "XXXX"
.It Ar align
Align field values for a more readable output.
Only usable with
.Ar sep_multiline .
.It Ar compat
Use the old format.
This is equivalent to specifying no name options at all.
.It Ar dn_rev
Reverse the fields of the DN.
This is required by RFC 2253.
As a side effect, this also reverses the order of multiple AVAs but this is
permissible.
.It Ar dump_all
Dump all fields.
This option, when used with
.Ar dump_der ,
allows the DER encoding of the structure to be unambiguously determined.
.It Ar dump_der
When this option is set, any fields that need to be hexdumped will
be dumped using the DER encoding of the field.
Otherwise just the content octets will be displayed.
Both options use the RFC 2253 #XXXX... format.
.It Ar dump_nostr
Dump non-character string types
.Pq for example OCTET STRING ;
if this option is not set, non-character string types will be displayed
as though each content octet represents a single character.
.It Ar dump_unknown
Dump any field whose OID is not recognised by
.Nm OpenSSL .
.It Ar esc_2253
Escape the
.Qq special
characters required by RFC 2253 in a field that is
.Dq \& ,+"\*(Lt\*(Gt; .
Additionally,
.Sq #
is escaped at the beginning of a string
and a space character at the beginning or end of a string.
.It Ar esc_ctrl
Escape control characters.
That is, those with ASCII values less than 0x20
.Pq space
and the delete
.Pq 0x7f
character.
They are escaped using the RFC 2253 \eXX notation (where XX are two hex
digits representing the character value).
.It Ar esc_msb
Escape characters with the MSB set; that is, with ASCII values larger than
127.
.It Ar multiline
A multiline format.
It is equivalent to
.Ar esc_ctrl , esc_msb , sep_multiline ,
.Ar space_eq , lname ,
and
.Ar align .
.It Ar no_type
This option does not attempt to interpret multibyte characters in any
way.
That is, their content octets are merely dumped as though one octet
represents each character.
This is useful for diagnostic purposes but will result in rather odd
looking output.
.It Ar nofname , sname , lname , oid
These options alter how the field name is displayed.
.Ar nofname
does not display the field at all.
.Ar sname
uses the
.Qq short name
form (CN for
.Ar commonName ,
for example).
.Ar lname
uses the long form.
.Ar oid
represents the OID in numerical form and is useful for diagnostic purpose.
.It Ar oneline
A oneline format which is more readable than
.Ar RFC2253 .
It is equivalent to specifying the
.Ar esc_2253 , esc_ctrl , esc_msb , utf8 ,
.Ar dump_nostr , dump_der , use_quote , sep_comma_plus_spc ,
.Ar space_eq ,
and
.Ar sname
options.
.It Ar RFC2253
Displays names compatible with RFC 2253; equivalent to
.Ar esc_2253 , esc_ctrl ,
.Ar esc_msb , utf8 , dump_nostr , dump_unknown ,
.Ar dump_der , sep_comma_plus , dn_rev ,
and
.Ar sname .
.It Ar sep_comma_plus , sep_comma_plus_space , sep_semi_plus_space , sep_multiline
These options determine the field separators.
The first character is between RDNs and the second between multiple AVAs
(multiple AVAs are very rare and their use is discouraged).
The options ending in
.Qq space
additionally place a space after the separator to make it more readable.
The
.Ar sep_multiline
uses a linefeed character for the RDN separator and a spaced
.Sq +
for the AVA separator.
It also indents the fields by four characters.
.It Ar show_type
Show the type of the ASN1 character string.
The type precedes the field contents.
For example
.Qq BMPSTRING: Hello World .
.It Ar space_eq
Places spaces round the
.Sq =
character which follows the field name.
.It Ar use_quote
Escapes some characters by surrounding the whole string with
.Sq \&"
characters.
Without the option, all escaping is done with the
.Sq \e
character.
.It Ar utf8
Convert all strings to UTF8 format first.
This is required by RFC 2253.
If you are lucky enough to have a UTF8 compatible terminal,
the use of this option (and
.Em not
setting
.Ar esc_msb )
may result in the correct display of multibyte
.Pq international
characters.
If this option is not present, multibyte characters larger than 0xff
will be represented using the format \eUXXXX for 16 bits and \eWXXXXXXXX
for 32 bits.
Also, if this option is off, any UTF8Strings will be converted to their
character form first.
.El
.Sh X509 TEXT OPTIONS
As well as customising the name output format, it is also possible to
customise the actual fields printed using the
.Fl certopt
options when the
.Fl text
option is present.
The default behaviour is to print all fields.
.Bl -tag -width "XXXX"
.It Ar ca_default
The value used by the
.Nm ca
utility; equivalent to
.Ar no_issuer , no_pubkey , no_header ,
.Ar no_version , no_sigdump ,
and
.Ar no_signame .
.It Ar compatible
Use the old format.
This is equivalent to specifying no output options at all.
.It Ar ext_default
Retain default extension behaviour: attempt to print out unsupported
certificate extensions.
.It Ar ext_dump
Hex dump unsupported extensions.
.It Ar ext_error
Print an error message for unsupported certificate extensions.
.It Ar ext_parse
ASN1 parse unsupported extensions.
.It Ar no_aux
Don't print out certificate trust information.
.It Ar no_extensions
Don't print out any X509V3 extensions.
.It Ar no_header
Don't print header information: that is, the lines saying
.Qq Certificate
and
.Qq Data .
.It Ar no_issuer
Don't print out the issuer name.
.It Ar no_pubkey
Don't print out the public key.
.It Ar no_serial
Don't print out the serial number.
.It Ar no_sigdump
Don't give a hexadecimal dump of the certificate signature.
.It Ar no_signame
Don't print out the signature algorithm used.
.It Ar no_subject
Don't print out the subject name.
.It Ar no_validity
Don't print the validity; that is, the
.Em notBefore
and
.Em notAfter
fields.
.It Ar no_version
Don't print out the version number.
.El
.Sh X509 EXAMPLES
Display the contents of a certificate:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -text
.Pp
Display the certificate serial number:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -serial
.Pp
Display the certificate subject name:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -subject
.Pp
Display the certificate subject name in RFC 2253 form:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -subject -nameopt RFC2253
.Pp
Display the certificate subject name in oneline form on a terminal
supporting UTF8:
.Bd -literal -offset indent
$ openssl x509 -in cert.pem -noout -subject \e
	-nameopt oneline,-esc_msb
.Ed
.Pp
Display the certificate MD5 fingerprint:
.Pp
.Dl $ openssl x509 -in cert.pem -noout -fingerprint
.Pp
Display the certificate SHA1 fingerprint:
.Pp
.Dl $ openssl x509 -sha1 -in cert.pem -noout -fingerprint
.Pp
Convert a certificate from PEM to DER format:
.Pp
.Dl "$ openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER"
.Pp
Convert a certificate to a certificate request:
.Bd -literal -offset indent
$ openssl x509 -x509toreq -in cert.pem -out req.pem \e
	-signkey key.pem
.Ed
.Pp
Convert a certificate request into a self-signed certificate using
extensions for a CA:
.Bd -literal -offset indent
$ openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions \e
	v3_ca -signkey key.pem -out cacert.pem
.Ed
.Pp
Sign a certificate request using the CA certificate above and add user
certificate extensions:
.Bd -literal -offset indent
$ openssl x509 -req -in req.pem -extfile openssl.cnf -extensions \e
	v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial
.Ed
.Pp
Set a certificate to be trusted for SSL
client use and set its alias to
.Qq Steve's Class 1 CA :
.Bd -literal -offset indent
$ openssl x509 -in cert.pem -addtrust clientAuth \e
	-setalias "Steve's Class 1 CA" -out trust.pem
.Ed
.Sh X509 NOTES
The PEM format uses the header and footer lines:
.Bd -unfilled -offset indent
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
.Ed
.Pp
It will also handle files containing:
.Bd -unfilled -offset indent
-----BEGIN X509 CERTIFICATE-----
-----END X509 CERTIFICATE-----
.Ed
.Pp
Trusted certificates have the lines:
.Bd -unfilled -offset indent
-----BEGIN TRUSTED CERTIFICATE-----
-----END TRUSTED CERTIFICATE-----
.Ed
.Pp
The conversion to UTF8 format used with the name options assumes that
T61Strings use the ISO 8859-1 character set.
This is wrong, but Netscape and MSIE do this, as do many certificates.
So although this is incorrect
it is more likely to display the majority of certificates correctly.
.Pp
The
.Fl fingerprint
option takes the digest of the DER-encoded certificate.
This is commonly called a
.Qq fingerprint .
Because of the nature of message digests, the fingerprint of a certificate
is unique to that certificate and two certificates with the same fingerprint
can be considered to be the same.
.Pp
The Netscape fingerprint uses MD5, whereas MSIE uses SHA1.
.Pp
The
.Fl email
option searches the subject name and the subject alternative
name extension.
Only unique email addresses will be printed out: it will
not print the same address more than once.
.Sh X.509 CERTIFICATE EXTENSIONS
The
.Fl purpose
option checks the certificate extensions and determines
what the certificate can be used for.
The actual checks done are rather
complex and include various hacks and workarounds to handle broken
certificates and software.
.Pp
The same code is used when verifying untrusted certificates in chains,
so this section is useful if a chain is rejected by the verify code.
.Pp
The
.Em basicConstraints
extension CA flag is used to determine whether the
certificate can be used as a CA.
If the CA flag is true, it is a CA;
if the CA flag is false, it is not a CA.
.Em All
CAs should have the CA flag set to true.
.Pp
If the
.Em basicConstraints
extension is absent, then the certificate is
considered to be a
.Qq possible CA ;
other extensions are checked according to the intended use of the certificate.
A warning is given in this case because the certificate should really not
be regarded as a CA: however,
it is allowed to be a CA to work around some broken software.
.Pp
If the certificate is a V1 certificate
.Pq and thus has no extensions
and it is self-signed, it is also assumed to be a CA but a warning is again
given: this is to work around the problem of Verisign roots which are V1
self-signed certificates.
.Pp
If the
.Em keyUsage
extension is present, then additional restraints are
made on the uses of the certificate.
A CA certificate
.Em must
have the
.Em keyCertSign
bit set if the
.Em keyUsage
extension is present.
.Pp
The extended key usage extension places additional restrictions on the
certificate uses.
If this extension is present
.Pq whether critical or not ,
the key can only be used for the purposes specified.
.Pp
A complete description of each test is given below.
The comments about
.Em basicConstraints
and
.Em keyUsage
and V1 certificates above apply to
.Em all
CA certificates.
.Bl -tag -width "XXXX"
.It Ar SSL Client
The extended key usage extension must be absent or include the
.Qq web client authentication
OID.
.Ar keyUsage
must be absent or it must have the
.Em digitalSignature
bit set.
Netscape certificate type must be absent or it must have the SSL
client bit set.
.It Ar SSL Client CA
The extended key usage extension must be absent or include the
.Qq web client authentication
OID.
Netscape certificate type must be absent or it must have the SSL CA
bit set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar SSL Server
The extended key usage extension must be absent or include the
.Qq web server authentication
and/or one of the SGC OIDs.
.Em keyUsage
must be absent or it must have the
.Em digitalSignature
set, the
.Em keyEncipherment
set, or both bits set.
Netscape certificate type must be absent or have the SSL server bit set.
.It Ar SSL Server CA
The extended key usage extension must be absent or include the
.Qq web server authentication
and/or one of the SGC OIDs.
Netscape certificate type must be absent or the SSL CA
bit must be set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar Netscape SSL Server
For Netscape SSL clients to connect to an SSL server; it must have the
.Em keyEncipherment
bit set if the
.Em keyUsage
extension is present.
This isn't always valid because some cipher suites use the key for
digital signing.
Otherwise it is the same as a normal SSL server.
.It Ar Common S/MIME Client Tests
The extended key usage extension must be absent or include the
.Qq email protection
OID.
Netscape certificate type must be absent or should have the
.Em S/MIME
bit set.
If the
.Em S/MIME
bit is not set in Netscape certificate type, then the SSL
client bit is tolerated as an alternative but a warning is shown:
this is because some Verisign certificates don't set the
.Em S/MIME
bit.
.It Ar S/MIME Signing
In addition to the common
.Em S/MIME
client tests, the
.Em digitalSignature
bit must be set if the
.Em keyUsage
extension is present.
.It Ar S/MIME Encryption
In addition to the common
.Em S/MIME
tests, the
.Em keyEncipherment
bit must be set if the
.Em keyUsage
extension is present.
.It Ar S/MIME CA
The extended key usage extension must be absent or include the
.Qq email protection
OID.
Netscape certificate type must be absent or must have the
.Em S/MIME CA
bit set: this is used as a work around if the
.Em basicConstraints
extension is absent.
.It Ar CRL Signing
The
.Em keyUsage
extension must be absent or it must have the
.Em CRL
signing bit set.
.It Ar CRL Signing CA
The normal CA tests apply.
Except in this case the
.Em basicConstraints
extension must be present.
.El
.Sh X509 BUGS
Extensions in certificates are not transferred to certificate requests and
vice versa.
.Pp
It is possible to produce invalid certificates or requests by specifying the
wrong private key or using inconsistent options in some cases: these should
be checked.
.Pp
There should be options to explicitly set such things as start and end dates,
rather than an offset from the current time.
.Pp
The code to implement the verify behaviour described in the
.Sx X509 TRUST SETTINGS
is currently being developed.
It thus describes the intended behaviour rather than the current behaviour.
It is hoped that it will represent reality in
.Nm OpenSSL
0.9.5 and later.
.Sh X509 HISTORY
Before
.Nm OpenSSL
0.9.8,
the default digest for RSA keys was MD5.
.Pp
The hash algorithm used in the
.Fl subject_hash
and
.Fl issuer_hash
options before
.Nm OpenSSL
1.0.0 was based on the deprecated MD5 algorithm and the encoding
of the distinguished name.
In
.Nm OpenSSL
1.0.0 and later it is based on a canonical version of the DN using SHA1.
This means that any directories using the old form
must have their links rebuilt using
.Ar c_rehash
or similar.
.\"
.\" FILES
.\"
.Sh FILES
.Bl -tag -width "/etc/ssl/openssl.cnf" -compact
.It /etc/ssl/
Default config directory for
.Nm openssl .
.It /etc/ssl/lib/
Unused.
.It /etc/ssl/private/
Default private key directory.
.It /etc/ssl/openssl.cnf
Default configuration file for
.Nm openssl .
.It /etc/ssl/x509v3.cnf
Default configuration file for
.Nm x509
certificates.
.El
.\"
.\" SEE ALSO
.\"
.Sh SEE ALSO
.Xr nginx 8 ,
.Xr sendmail 8 ,
.Xr ssl 8 ,
.Xr starttls 8
.Sh STANDARDS
.Rs
.%D February 1995
.%Q Netscape Communications Corp.
.%T The SSL Protocol
.Re
.Pp
.Rs
.%D November 1996
.%Q Netscape Communications Corp.
.%T The SSL 3.0 Protocol
.Re
.Pp
.Rs
.%A T. Dierks
.%A C. Allen
.%D January 1999
.%R RFC 2246
.%T The TLS Protocol Version 1.0
.Re
.Pp
.Rs
.%A M. Wahl
.%A S. Killie
.%A T. Howes
.%D December 1997
.%R RFC 2253
.%T Lightweight Directory Access Protocol (v3): UTF-8 String Representation of Distinguished Names
.Re
.Pp
.Rs
.%A B. Kaliski
.%D March 1998
.%R RFC 2315
.%T PKCS #7: Cryptographic Message Syntax Version 1.5
.Re
.Pp
.Rs
.%A R. Housley
.%A W. Ford
.%A W. Polk
.%A D. Solo
.%D January 1999
.%R RFC 2459
.%T Internet X.509 Public Key Infrastructure Certificate and CRL Profile
.Re
.Pp
.Rs
.%A M. Myers
.%A R. Ankney
.%A A. Malpani
.%A S. Galperin
.%A C. Adams
.%D June 1999
.%R RFC 2560
.%T X.509 Internet Public Key Infrastructure Online Certificate Status Protocol \(en OCSP
.Re
.Pp
.Rs
.%A R. Housley
.%D June 1999
.%R RFC 2630
.%T Cryptographic Message Syntax
.Re
.Pp
.Rs
.%A P. Chown
.%D June 2002
.%R RFC 3268
.%T Advanced Encryption Standard (AES) Ciphersuites for Transport Layer Security(TLS)
.Re
.\"
.\" OPENSSL HISTORY
.\"
.Sh HISTORY
The
.Xr openssl 1
document appeared in
.Nm OpenSSL
0.9.2.
The
.Cm list- Ns XXX Ns Cm -commands
pseudo-commands were added in
.Nm OpenSSL
0.9.3;
the
.Cm no- Ns XXX
pseudo-commands were added in
.Nm OpenSSL
0.9.5a;
the
.Cm list- Ns XXX Ns Cm -algorithms
pseudo-commands were added in
.Nm OpenSSL
1.0.0.
@


1.99
log
@Use Cm instead of Li for 'MASK:'
(Overlooked among jmc@@'s other suggestions)
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.98 2014/07/22 06:28:10 guenther Exp $
@


1.98
log
@Rewrite the description of the string_mask config file option to match
reality, and reformatting to be readable.

formatting and wording suggestions miod@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.97 2014/06/25 06:57:42 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: June 25 2014 $
d5876 1
a5876 1
.It Li MASK : Ns Ar number
@


1.97
log
@Alexander Schrijver posted a diff to remove references to the c_rehash script,
which we don;t have in base. after some discussion with jca, i've not removed
these references, but tried to make it clearer it's distributed with openssl
and not included in base;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.96 2014/06/02 17:06:28 jsing Exp $
d115 1
a115 1
.Dd $Mdocdate: June 2 2014 $
d5854 1
a5854 1
This option masks out the use of certain string types in certain
d5856 17
a5872 29
Most users will not need to change this option.
.Pp
It can be set to several values:
.Ar default ,
which is also the default option, uses
.Em PrintableStrings , T61Strings
and
.Em BMPStrings ;
if the
.Ar pkix
value is used, then only
.Em PrintableStrings
and
.Em BMPStrings
will be used.
This follows the PKIX recommendation in RFC 2459.
If the
.Fl utf8only
option is used, then only
.Em UTF8Strings
will be used: this is the PKIX recommendation in RFC 2459 after 2003.
Finally, the
.Ar nombstr
option just uses
.Em PrintableStrings
and
.Em T61Strings :
certain software has problems with
.Em BMPStrings
d5874 10
a5883 2
.Em UTF8Strings :
in particular Netscape.
@


1.96
log
@Remove references to RANDFILE.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.95 2014/06/02 16:56:49 jsing Exp $
d8938 1
a8938 3
Under
.Ux ,
the
d8940 2
a8941 1
script will automatically create symbolic links to a directory of certificates.
@


1.95
log
@Remove details regarding -rand from the openssl man page.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.94 2014/05/18 08:23:27 sthen Exp $
d115 1
a115 1
.Dd $Mdocdate: May 18 2014 $
a972 1
.It RANDFILE
d977 1
a977 2
With the exception of RANDFILE, this is probably a bug and may
change in future releases.
a1133 4
.It Ar RANDFILE
A file used to read and write random number seed information,
or an EGD socket (see
.Xr RAND_egd 3 ) .
a1257 1
\& RANDFILE       = $dir/private/.rand    # random number file
a5846 5
.It Ar RANDFILE
This specifies a file in which random number seed information is
placed and read from, or an EGD socket (see
.Xr RAND_egd 3 ) .
It is used for private key generation.
a6074 1
\& RANDFILE               = $ENV::HOME/.rnd
a8516 4
See
.Nm ca
for a description.
.It Cm RANDFILE
@


1.94
log
@sync openssl(1) with changes already made in src/lib/libssl/doc, reminded by
jmc: move from 1024 to 2048 bit key defaults; see genrsa.c 1.26 et al.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.93 2014/03/13 10:12:11 florian Exp $
d115 1
a115 1
.Dd $Mdocdate: March 13 2014 $
a1968 1
.Op Fl rand Ar
a2056 6
.It Fl rand Ar
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a2116 1
.Op Fl rand Ar
a2199 6
.It Fl rand Ar
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified, separated by a
.Sq \&: .
a2421 1
.Op Fl rand Ar
a2487 6
.It Fl rand Ar
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified, separated by a
.Sq \&: .
a2725 1
.Op Fl rand Ar file ...
a2817 12
.It Fl rand Ar file ...
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Sq \&;
for MS-Windows,
.Sq \&,
for OpenVMS, and
.Sq \&:
for all others.
a3341 1
.Op Fl rand Ar
a3374 6
.It Fl rand Ar
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a3572 1
.Op Fl rand Ar
a3615 7
.It Fl rand Ar
A file or files
containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a4653 1
.Op Fl rand Ar
a4867 7
.It Fl rand Ar
A file or files
containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a5423 1
.Op Fl rand Ar
d5431 1
a5431 17
pseudo-random bytes after seeding
the random number generator once.
As in other
.Nm openssl
command line tools, PRNG seeding uses the file
.Pa $HOME/.rnd
or
.Pa .rnd
in addition to the files given in the
.Fl rand
option.
A new
.Pa $HOME/.rnd
or
.Pa .rnd
file will be written back if enough
seeding was obtained from these sources.
a5452 6
.It Fl rand Ar
Use specified file or files, or EGD socket (see
.Xr RAND_egd 3 )
for seeding the random number generator.
Multiple files can be specified separated by a
.Sq \&: .
a5485 1
.Op Fl rand Ar
a5703 6
.It Fl rand Ar
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a6634 1
.Op Fl rand Ar
a6788 6
.It Fl rand Ar
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a6939 1
.Op Fl rand Ar
a7107 6
.It Fl rand Ar
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a7570 1
.Op Fl rand Ar
a7839 7
.It Fl rand Ar
A file or files
containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a8183 1
.Op Fl rand Ar file : Ns Ar file
a8317 10
.It Fl rand Ar file : Ns Ar file
The files containing random data for seeding the random number generator.
Multiple files can be specified.
The separator is
.Sq \&;
for MS-Windows;
.Sq \&,
for VMS; and
.Sq \&:
for all other platforms.
@


1.93
log
@Unhook httpd(8) from build; man page bits
tweaks jmc@@
OK krw@@, gilles@@, lteo@@, tedu@@, todd@@, benno@@, sthen@@
"The time is right." and much help getting the show on the
road deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.92 2013/07/16 11:13:33 schwarze Exp $
d115 1
a115 1
.Dd $Mdocdate: July 16 2013 $
d3538 1
a3538 1
If not specified 1024 is used.
d3668 1
a3668 1
The default is 512.
d3691 1
a3691 1
.Pq typically 1024 bits .
@


1.92
log
@use .Mt for email addresses; from Jan Stary <hans at stare dot cz>; ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.91 2012/09/26 16:19:44 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 26 2012 $
a8869 4
HTTP server support is provided in the form of
a separate
.Xr httpd 8
module.
a8877 3
This is not an issue when using the
.Xr httpd 8
server module, which does proper locking.
d10451 1
a10451 1
.Xr httpd 8 ,
@


1.91
log
@last stage of rfc changes, using consistent Rs/Re blocks, and moving the
references into a STANDARDS section;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.90 2012/08/15 19:25:41 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: August 15 2012 $
d8892 1
a8892 1
.An Zoltan Glozik Aq zglozik@@opentsa.org ,
@


1.90
log
@use Lk for links;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.89 2012/07/13 05:48:26 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 13 2012 $
d10462 1
d10464 2
a10466 2
.%Q Netscape Communications Corp.
.%D February 9 1995
d10468 1
d10470 2
a10472 2
.%Q Netscape Communications Corp.
.%D November 18 1996
d10474 1
d10476 3
a10480 1
.%D January 1999
d10482 1
d10484 4
d10489 1
a10489 2
.%T "LDAPv3 Distinguished Names"
.%D December 1997
d10491 1
d10493 2
d10496 1
a10496 2
.%T "PKCS #7: Cryptographic Message Syntax"
.%D March 1998
d10498 1
d10500 5
d10506 1
a10506 2
.%T "X.509 Certificate and CRL Profile"
.%D January 1999
d10508 1
d10510 6
d10517 1
a10517 2
.%T "Online Certificate Status Protocol \- OCSP"
.%D June 1999
d10519 1
d10521 2
d10524 1
a10524 2
.%T "Cryptographic Message Syntax"
.%D June 1999
d10526 1
d10528 2
d10531 1
a10531 2
.%T "Advanced Encryption Standard (AES) Ciphersuites for Transport Layer Security(TLS)"
.%D June 2002
@


1.89
log
@put back the Key-Arg field - sess_id still prints it;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.88 2012/07/12 21:33:12 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: July 12 2012 $
d2556 1
a2556 1
.Pq Pa http://www.secg.org/ .
d8894 1
a8894 1
.Pq Pa http://www.opentsa.org .
@


1.88
log
@remove (hopefully) all traces of sslv2; ok sthen
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.87 2011/09/29 17:57:09 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 29 2011 $
d7579 1
d7599 2
@


1.87
log
@ssl.8: Certifying Authority -> Certificate Authority
isakmpd.8: rsa:1024 -> rsa:2048 (ok markus)
all: X509 -> X.509

from Lawrence Teo
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.86 2011/09/07 09:30:16 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: September 7 2011 $
d141 1
a141 1
.Pq SSL v2/v3
d1414 1
a1414 1
.Op Fl ssl2 | ssl3 | tls1
a1427 2
.It Fl ssl2
Only include SSL v2 ciphers.
d1439 1
a1439 1
.Pq SSLv2 or SSLv3; the latter includes TLS ,
d1447 1
a1447 2
this is when similar ciphers are available for
SSL v2 and for SSL v3/TLS v1.
d1585 2
a1586 2
.It Ar TLSv1 , SSLv3 , SSLv2
TLS v1.0, SSL v3.0 or SSL v2.0 cipher suites, respectively.
a1722 10
.Ss SSL v2.0 cipher suites
.Bd -unfilled -offset indent
SSL_CK_RC4_128_WITH_MD5                 RC4-MD5
SSL_CK_RC4_128_EXPORT40_WITH_MD5        EXP-RC4-MD5
SSL_CK_RC2_128_CBC_WITH_MD5             RC2-MD5
SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5    EXP-RC2-MD5
SSL_CK_IDEA_128_CBC_WITH_MD5            IDEA-CBC-MD5
SSL_CK_DES_64_CBC_WITH_MD5              DES-CBC-MD5
SSL_CK_DES_192_EDE3_CBC_WITH_MD5        DES-CBC3-MD5
.Ed
d5347 2
a5348 2
.Cm sslv23
for SSLv23 padding;
d6565 1
a6565 2
no padding,
or special padding used in SSL v2 backwards compatible handshakes, respectively.
a6712 1
.Op Fl no_ssl2
a6723 1
.Op Fl serverpref
a6724 1
.Op Fl ssl2
d6835 2
a6836 2
.Fl no_ssl2 | no_ssl3 | no_tls1 |
.Fl ssl2 | ssl3 | tls1
d6840 1
a6840 1
with all servers and permit them to use SSL v3, SSL v2, or TLS as appropriate.
a6845 2
option, others will only support SSL v2 and may need the
.Fl ssl2
a6885 3
.It Fl serverpref
Use server's cipher preferences
.Pq SSLv2 only .
d6943 1
a6943 2
.Fl bugs , ssl2 , ssl3 , tls1 ,
.Fl no_ssl2 , no_ssl3 ,
a7026 1
.Op Fl no_ssl2
a7035 1
.Op Fl ssl2
d7178 2
a7179 2
.Fl no_ssl2 | no_ssl3 | no_tls1 |
.Fl ssl2 | ssl3 | tls1
d7183 1
a7183 1
with all servers and permit them to use SSL v3, SSL v2, or TLS as appropriate.
a7320 1
.Op Fl ssl2
d7391 2
a7392 2
.It Fl ssl2 | ssl3
These options disable the use of certain SSL or TLS protocols.
d7395 1
a7395 1
SSL v3, SSL v2, or TLS as appropriate.
a7404 3
option;
others will only support SSL v2 and may need the
.Fl ssl2
d7454 1
a7454 1
.Fl bugs , ssl2 ,
a7578 1
    Key-Arg   : None
d7588 1
a7588 1
This is the protocol in use: TLSv1, SSLv3, or SSLv2.
a7597 2
.It Ar Key-Arg
The key argument; this is only used in SSL v2.
@


1.86
log
@- update key size and alg recommendations; from Lawrence Teo
- whilst here, knock out useless Pp in openssl.1

ok djm markus
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.85 2011/01/20 13:32:19 lum Exp $
d115 1
a115 1
.Dd $Mdocdate: January 20 2011 $
d9256 1
a9256 1
.Sx X509 CERTIFICATE EXTENSIONS
d9566 1
a9566 1
Normally, the command will expect an X509 certificate,
d9769 1
a9769 1
.Sx X509 CERTIFICATE EXTENSIONS
d10263 1
a10263 1
.Sh X509 CERTIFICATE EXTENSIONS
@


1.85
log
@a a -> a
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.84 2010/12/12 21:24:24 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: December 12 2010 $
d6118 1
a6118 1
$ openssl genrsa -out key.pem 1024
d6124 1
a6124 1
.Dl $ openssl req -newkey rsa:1024 -keyout key.pem -out req.pem
d6128 1
a6128 1
.Dl "$ openssl req -x509 -newkey rsa:1024 -keyout key.pem -out req.pem"
a8893 1
.Pp
@


1.84
log
@overriden -> overridden;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.83 2010/10/17 13:30:37 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 17 2010 $
d4820 1
a4820 1
If a a cipher name
@


1.83
log
@various tweaks for consistency;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.82 2010/10/15 21:05:06 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 15 2010 $
d8671 1
a8671 1
This default section can be overriden with the
d8767 1
a8767 1
overriden by the
@


1.82
log
@use standard list width;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.81 2010/10/15 21:00:05 jmc Exp $
a1991 1
.Xo
a1993 1
.Xc
d2038 1
a2038 3
but there are other MAC algorithms which are not based on hash,
for instance the gost-mac algorithm,
supported by the ccgost engine.
d2045 1
a2045 1
The following options are supported by both by HMAC and gost-mac:
d2050 1
a2050 2
String length must conform to any restrictions of the MAC algorithm,
for example exactly 32 chars for gost-mac.
d2053 1
a2053 2
Key length must conform to any restrictions of the MAC algorithm,
for example exactly 32 chars for gost-mac.
d2379 1
a2379 1
The input file password source.
d2545 2
a2546 2
.Op Fl in Ar filename
.Op Fl inform Ar PEM|DER
d2548 2
a2549 2
.Op Fl out Ar filename
.Op Fl outform Ar PEM|DER
d2617 2
a2618 3
The engine will then be set as the default
for all available algorithms.
.It Fl in Ar filename
d2635 1
a2635 1
.It Fl out Ar filename
d2664 1
a2664 1
The input file password source.
d2751 1
a2751 1
.Op Fl in Ar filename
d2757 1
a2757 1
.Op Fl out Ar filename
d2801 1
a2801 2
The engine will then be set as the default
for all available algorithms.
d2804 1
a2804 1
.It Fl in Ar filename
d2809 1
a2809 1
DER uses an ASN.1 DER encoded
d2827 1
a2827 1
.It Fl out Ar filename
a3117 1
(such as the ccgost engine which provides the gost89 algorithm)
d3450 1
a3450 1
.Op Fl out Ar filename
d3493 1
a3493 2
The engine will then be set as the default
for all available algorithms.
d3502 1
a3502 1
.It Fl out Ar filename
d3523 1
a3523 1
.Ar arg
d4524 1
a4524 1
The input file password source.
d4776 1
a4776 3
The PKCS#12 file
.Pq i.e. input file
password source.
d4783 1
a4783 1
Pass phrase source to encrypt any outputed private keys with.
d4918 1
a4918 1
Pass phrase source to decrypt any input private keys with.
d4925 1
a4925 3
The PKCS#12 file
.Pq i.e. output file
password source.
d5098 1
a5098 2
The engine will then be set as the default
for all available algorithms.
d5121 1
a5121 1
The input file password source.
d5123 1
a5123 1
.Ar arg
d5204 1
a5204 2
The engine will then be set as the default
for all available algorithms.
d5244 1
a5244 1
.Op Fl keyform Ar DER | PEM
d5247 1
a5247 1
.Op Fl peerform Ar DER | PEM
d5286 1
a5286 2
The engine will then be set as the default
for all available algorithms.
d5295 2
a5296 2
.It Fl keyform Ar DER | PEM
The key format DER, PEM, or ENGINE.
d5301 1
a5301 1
The input key password source.
d5303 1
a5303 1
.Ar arg
d5307 2
a5308 2
.It Fl peerform Ar DER | PEM
The peer key format DER, PEM, or ENGINE.
d5692 1
a5692 3
For instance, DSA signatures always use SHA1;
GOST R 34.10 signatures always use GOST R 34.11-94
.Pq Fl md_gost94 .
d5763 1
a5763 1
.Ar dsa : Ns Ar filename
d5765 1
a5765 10
.Ar filename .
.Ar ec : Ns Ar filename
generates an EC key (usable both with ECDSA or ECDH algorithms);
.Ar gost2001 : Ns Ar filename
generates a GOST R 34.10-2001 key
(requires the ccgost engine configured in the configuration file).
If just
.Cm gost2001
is specified a parameter set should be specified by
.Cm -pkeyopt paramset:X .
d5783 1
a5783 1
The input file password source.
d6421 1
a6421 1
The input file password source.
d7663 1
a7663 1
.Oo Xo
a7665 1
.Xc
d7841 1
a7841 2
The engine will then be set as the default
for all available algorithms.
d7965 1
a7965 1
The private key password source.
d8292 1
a8292 2
The engine will then be set as the default
for all available algorithms.
d8337 1
a8337 1
.Op Fl passin Ar password_src
d8386 1
a8386 1
There is one DER encoded protocol data unit defined for transporting a time
d8511 1
a8511 2
The engine will then be set as the default
for all available algorithms.
d8536 5
a8540 3
.It Fl passin Ar password_src
Specifies the password source for the private key of the TSA.
See the
d8573 1
a8573 1
option and indicates that the input is a DER encoded time stamp token
d8989 1
a8989 1
The input file password source.
@


1.81
log
@nicer formatting for the various synopses;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.80 2010/10/15 18:17:10 jmc Exp $
d517 1
a517 1
.Bl -tag -width "-noout"
d1425 1
a1425 1
.Bl -tag -width "XXXXXX"
d1813 1
a1813 1
.Bl -tag -width "XXXX"
d1902 1
a1902 1
.Bl -tag -width "XXXX"
d2008 1
a2008 1
.Bl -tag -width "-binary"
d2154 1
a2154 1
.Bl -tag -width "XXXX"
d2319 1
a2319 1
.Bl -tag -width "XXXX"
d2466 1
a2466 1
.Bl -tag -width "XXXX"
d2963 1
a2963 1
.Bl -tag -width "XXXX"
d3359 1
a3359 1
.Bl -tag -width "-stats"
d3411 1
a3411 1
.Bl -tag -width "XXXX"
d3647 1
a3647 1
.Bl -tag -width "XXXX"
d3732 1
a3732 1
.Bl -tag -width "-toseq"
d3848 1
a3848 1
.Bl -tag -width "XXXX"
d4288 1
a4288 1
.Bl -tag -width "XXXX"
d4365 1
a4365 1
.Bl -tag -width "XXXX"
d4464 1
a4464 1
.Bl -tag -width "XXXX"
d5475 1
a5475 1
.Bl -tag -width ds
d5538 1
a5538 1
.Bl -tag -width "XXXX"
d5618 1
a5618 1
.Bl -tag -width "XXXX"
d6384 1
a6384 1
.Bl -tag -width "XXXX"
d6570 1
a6570 1
.Bl -tag -width "XXXX"
d6789 1
a6789 1
.Bl -tag -width "XXXX"
d7105 1
a7105 1
.Bl -tag -width "XXXX"
d7582 1
a7582 1
.Bl -tag -width "XXXX"
d8985 1
a8985 1
.Bl -tag -width "XXXX"
d9118 1
a9118 1
.Bl -tag -width "XXXX"
d9477 1
a9477 1
.Bl -tag -width "XXXX"
@


1.80
log
@document "openssl ts";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.79 2010/10/14 20:41:28 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 14 2010 $
d207 1
a207 1
.D1 from => to
d492 2
a493 1
.Nm openssl asn1parse
a494 1
.Op Fl dump
a495 1
.Op Fl noout
d497 1
d503 1
d509 1
d675 2
a676 1
.Nm openssl ca
a678 8
.Op Fl gencrl
.Op Fl infiles
.Op Fl msie_hack
.Op Fl noemailDN
.Op Fl notext
.Op Fl preserveDN
.Op Fl updatedb
.Op Fl verbose
d693 1
d695 1
d700 1
d702 2
d708 1
d715 2
d718 1
d1789 2
a1790 1
.Nm openssl crl
d1792 2
d1796 2
a1801 5
.Op Fl text
.Op Fl CAfile Ar file
.Op Fl CApath Ar dir
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
d1804 1
d1806 1
d1882 2
a1883 1
.Nm openssl crl2pkcs7
a1884 1
.Op Fl nocrl
d1888 1
d1892 1
d1964 2
a1965 1
.Nm openssl dgst
d1973 1
a1975 1
.Op Fl engine Ar id
d1989 1
d2130 2
a2131 1
.Nm openssl dhparam
a2136 2
.Op Fl noout
.Op Fl text
d2140 1
d2144 1
d2147 1
d2283 2
a2284 1
.Nm openssl dsa
a2289 5
.Op Fl modulus
.Op Fl noout
.Op Fl pubin
.Op Fl pubout
.Op Fl text
d2293 2
d2299 3
d2303 1
d2444 2
a2445 1
.Nm openssl dsaparam
d2448 1
a2449 3
.Op Fl noout
.Op Fl text
.Op Fl engine Ar id
d2452 1
d2456 1
d2459 1
d2544 2
a2545 1
.Nm openssl ec
d2547 1
a2549 6
.Op Fl noout
.Op Fl param_out
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Op Fl conv_form Ar arg
d2553 1
d2557 1
d2560 3
d2564 1
d2584 1
a2584 1
.It Fl conv_form
d2750 2
a2751 1
.Nm openssl ecparam
a2754 5
.Op Fl genkey
.Op Fl list_curves
.Op Fl no_seed
.Op Fl noout
.Op Fl text
d2757 1
d2760 1
d2762 2
d2768 1
d2770 1
d2931 2
a2932 1
.Nm openssl enc
d2937 1
a2938 5
.Op Fl none
.Op Fl nopad
.Op Fl nosalt
.Op Fl salt
.Op Fl bufsize Ar number
d2946 3
d2952 1
d2954 1
d3389 2
a3390 1
.Nm openssl gendsa
d3401 1
d3432 6
a3443 6
.It Fl rand Ar
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
d3452 2
a3453 1
.Nm openssl genpkey
d3455 1
d3457 1
a3458 4
.Op Fl pass Ar arg
.Op Fl text
.Op Fl algorithm Ar alg
.Op Fl engine Ar id
d3462 1
d3464 1
d3466 1
d3626 2
a3627 1
.Nm openssl genrsa
d3629 1
a3634 1
.Op Fl 3 | f4
d3640 1
d3648 3
a3669 7
.It Fl 3 | f4
The public exponent to use, either 3 or 65537.
The default is 65537.
.It Ar numbits
The size of the private key to generate in bits.
This must be the last option specified.
The default is 512.
d3688 4
a3719 1
.Op Fl toseq
d3722 1
d3779 2
a3780 1
.Nm openssl ocsp
a3781 15
.Op Fl no_cert_checks
.Op Fl no_cert_verify
.Op Fl no_certs
.Op Fl no_chain
.Op Fl no_intern
.Op Fl no_nonce
.Op Fl no_signature_verify
.Op Fl nonce
.Op Fl noverify
.Op Fl req_text
.Op Fl resp_key_id
.Op Fl resp_no_certs
.Op Fl resp_text
.Op Fl text
.Op Fl trust_other
d3795 9
d3808 1
d3811 3
d3824 2
d3831 1
d4251 2
a4252 1
.Nm openssl passwd
d4254 1
d4258 1
a4260 2
.Op Fl in Ar file
.Op Fl salt Ar string
d4262 1
d4346 2
a4347 1
.Nm openssl pkcs7
a4348 3
.Op Fl noout
.Op Fl print_certs
.Op Fl text
d4352 1
d4355 2
d4358 1
d4434 2
a4435 1
.Nm openssl pkcs8
d4438 3
a4444 4
.Op Fl topk8
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM
d4449 1
d4453 1
d4687 1
d4695 5
d4702 1
d4704 1
d4706 1
d4708 1
d4710 1
d4712 1
d4714 1
a4722 13
.Op Fl twopass
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl caname Ar name
.Op Fl certfile Ar file
.Op Fl certpbe Ar alg
.Op Fl CSP Ar name
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keypbe Ar alg
.Op Fl macalg Ar alg
.Op Fl name Ar name
d4727 1
d4729 1
d5072 2
a5073 1
.Cm openssl pkey
a5075 5
.Op Fl noout
.Op Fl pubin
.Op Fl pubout
.Op Fl text
.Op Fl text_pub
d5079 1
d5084 4
d5089 1
a5198 2
.Op Fl noout
.Op Fl text
d5201 1
d5203 1
d5248 2
a5249 1
.Cm openssl pkeyutl
d5256 1
a5257 6
.Op Fl pubin
.Op Fl rev
.Op Fl sign
.Op Fl verify
.Op Fl verifyrecover
.Op Fl engine Ar id
d5266 2
d5269 3
d5273 1
d5459 2
a5463 2
.Op Fl bits Ar n
.Op Fl checks Ar n
d5505 2
a5506 1
.Cm openssl rand
d5508 1
a5509 1
.Op Fl engine Ar id
d5513 1
d5568 2
a5569 1
.Nm openssl req
a5572 14
.Op Fl md4 | md5 | sha1
.Op Fl modulus
.Op Fl new
.Op Fl newhdr
.Op Fl no-asn1-kludge
.Op Fl nodes
.Op Fl noout
.Op Fl pubkey
.Op Fl subject
.Op Fl text
.Op Fl utf8
.Op Fl verbose
.Op Fl verify
.Op Fl x509
d5582 2
d5585 2
d5588 3
d5595 1
d5601 6
d5608 1
d6346 2
a6347 1
.Cm openssl rsa
a6353 6
.Op Fl modulus
.Op Fl noout
.Op Fl pubin
.Op Fl pubout
.Op Fl sgckey
.Op Fl text
d6357 2
d6363 5
d6544 2
a6545 1
.Nm openssl rsautl
d6551 1
d6553 3
d6557 1
a6560 5
.Op Fl engine Ar id
.Op Fl in Ar file
.Op Fl inkey Ar file
.Op Fl keyform Ar DER | PEM
.Op Fl out Ar file
d6562 1
d6728 2
a6729 1
.Nm openssl s_client
d6733 3
d6737 5
d6746 1
d6751 1
d6762 2
d6765 1
d6771 1
d6775 1
a6776 15
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Oo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Oc
.Op Fl engine Ar id
.Op Fl key Ar keyfile
.Op Fl psk Ar key
.Op Fl psk_identity Ar identity
.Op Fl rand Ar
.Op Fl starttls Ar protocol
.Op Fl verify Ar depth
d6778 1
d7052 2
a7053 1
.Nm openssl s_server
d7055 1
d7057 5
d7065 1
d7067 3
d7072 2
d7083 2
d7086 1
d7092 2
a7095 17
.Op Fl accept Ar port
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl cert Ar file
.Op Fl cipher Ar cipherlist
.Op Fl context Ar id
.Op Fl dcert Ar file
.Op Fl dhparam Ar file
.Op Fl dkey Ar file
.Op Fl engine Ar id
.Op Fl id_prefix Ar arg
.Op Fl key Ar keyfile
.Op Fl rand Ar
.Op Fl psk Ar key
.Op Fl psk_hint Ar hint
.Op Fl Verify Ar depth
.Op Fl verify Ar depth
d7097 1
d7361 2
a7362 1
.Nm openssl s_time
a7364 5
.Op Fl nbio
.Op Fl new
.Op Fl reuse
.Op Fl ssl2
.Op Fl ssl3
d7371 5
d7380 1
d7558 2
a7559 1
.Nm openssl sess_id
a7561 2
.Op Fl noout
.Op Fl text
d7565 1
d7568 1
d7570 1
d7688 2
a7689 1
.Nm openssl smime
d7697 3
d7701 1
d7706 1
d7708 1
d7710 1
d7712 2
d7715 2
d7725 3
d7730 2
d7734 1
d7736 1
d7738 1
a7740 19
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl certfile Ar file
.Op Fl content Ar file
.Op Fl engine Ar id
.Op Fl from Ar addr
.Op Fl in Ar file
.Op Fl inform Ar DER | PEM | SMIME
.Op Fl inkey Ar file
.Op Fl keyform Ar ENGINE | PEM
.Op Fl md Ar digest
.Op Fl out Ar file
.Op Fl outform Ar DER | PEM | SMIME
.Op Fl passin Ar arg
.Op Fl rand Ar
.Op Fl recip Ar file
.Op Fl signer Ar file
.Op Fl subject Ar s
.Op Fl to Ar addr
d7743 1
d8263 2
a8264 1
.Nm openssl speed
a8296 1
.Op Fl mr
d8299 1
d8302 1
a8345 2
.Op Fl no_nonce
.Op Fl text
d8350 1
d8354 1
a8361 3
.Op Fl text
.Op Fl token_in
.Op Fl token_out
d8373 3
a8382 1
.Op Fl token_in
d8389 1
d8959 2
a8960 1
.Nm openssl spkac
a8961 3
.Op Fl noout
.Op Fl pubkey
.Op Fl verify
d8966 1
d8969 1
d8972 1
d8974 1
d9087 2
a9088 1
.Nm openssl verify
d9090 2
d9095 1
d9104 2
a9107 5
.Op Fl CAfile Ar file
.Op Fl CApath Ar directory
.Op Fl engine Ar id
.Op Fl purpose Ar purpose
.Op Fl untrusted Ar file
d9111 1
d9512 2
a9513 1
.Nm openssl x509
d9515 3
d9519 1
a9519 1
.Op Fl C
d9521 6
d9531 1
d9534 3
d9539 2
d9544 1
d9547 1
d9549 1
d9551 3
a9553 1
.Op Fl ocsp_uri
d9558 3
a9567 23
.Op Fl addreject Ar arg
.Op Fl addtrust Ar arg
.Op Fl CA Ar file
.Op Fl CAform Ar DER | PEM
.Op Fl CAkey Ar file
.Op Fl CAkeyform Ar DER | PEM
.Op Fl CAserial Ar file
.Op Fl certopt Ar option
.Op Fl checkend Ar arg
.Op Fl days Ar arg
.Op Fl engine Ar id
.Op Fl extensions Ar section
.Op Fl extfile Ar file
.Op Fl in Ar file
.Op Fl inform Ar DER | NET | PEM
.Op Fl keyform Ar DER | PEM
.Op Fl nameopt Ar option
.Op Fl out Ar file
.Op Fl outform Ar DER | NET | PEM
.Op Fl passin Ar arg
.Op Fl set_serial Ar n
.Op Fl setalias Ar arg
.Op Fl signkey Ar file
d9569 1
d9706 2
a9709 2
.It Fl ocsp_uri
Outputs the OCSP responder addresses, if any.
@


1.79
log
@probabalistic -> probabilistic; from naddy
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.78 2010/10/14 07:16:31 jmc Exp $
d368 2
d5198 6
a5203 2
There are no B<-inform> or B<-outform> options for this command because only
PEM format is supported because the key type is determined by the PEM headers.
d8274 619
@


1.78
log
@for openssl prime, note that results are probabalistic; from djm
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.77 2010/10/13 19:16:37 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 13 2010 $
d5422 1
a5422 1
Results are probabalistic:
@


1.77
log
@document "openssl prime";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.76 2010/10/13 15:38:56 jmc Exp $
d5422 3
@


1.76
log
@document "openssl pkeyparam";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.75 2010/10/12 18:36:03 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 12 2010 $
d325 2
d5406 44
@


1.75
log
@document "openssl pkeyutl";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.74 2010/10/09 18:22:46 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 9 2010 $
d321 2
d5039 1
a5039 1
.Op Fl in Ar filename
d5041 1
a5041 1
.Op Fl out Ar filename
d5070 1
a5070 1
.It Fl in Ar filename
d5078 1
a5078 1
.It Fl out Ar filename
d5150 46
@


1.74
log
@document "openssl pkey";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.73 2010/10/09 10:03:44 jmc Exp $
d321 2
d5147 208
@


1.73
log
@document "openssl genpkey";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.72 2010/10/08 19:18:41 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 8 2010 $
d319 2
d5021 124
@


1.72
log
@document "openssl engine";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.71 2010/10/08 17:57:19 jmc Exp $
d301 2
d3414 172
@


1.71
log
@document "openssl ecparam";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.70 2010/10/08 05:41:48 jmc Exp $
d3246 50
@


1.70
log
@supply the correct value of ciphers DEFAULT; from djm
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.69 2010/10/08 05:38:24 jmc Exp $
d283 2
d2715 179
@


1.69
log
@document "openssl ec";
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.68 2010/10/06 13:21:02 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: October 6 2010 $
d1507 2
a1508 2
This is determined at compile time and is normally
.Ar ALL:!ADH:+RC4:@@STRENGTH .
@


1.68
log
@catch up to openssl-1.0.0a; there's some new commands, as yet undocumented,
but i'll get to those shortly...
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.67 2010/02/18 13:39:21 schwarze Exp $
d115 1
a115 1
.Dd $Mdocdate: February 18 2010 $
d281 2
d2511 204
d2841 1
a2841 1
to create a key from a passphrase.
@


1.67
log
@Our groff does not handle all cases of nested displays properly, so
resolve the contradiction in the manual whether it's allowed or not
in favour of "not allowed" for now, shelving my diff to support
nested displays in mandoc(1) for later consideration.
Found by and unbreaking the build with mandoc(1).
Feedback and OK jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.66 2009/08/16 09:41:08 sobrado Exp $
d115 1
a115 1
.Dd $Mdocdate: August 16 2009 $
d128 6
a133 4
.Oo Cm list-standard-commands No |\ \&
.Cm list-message-digest-commands |
.Cm list-cipher-commands
.Oc
d157 3
a159 1
Creation of RSA, DH and DSA key parameters
d170 2
d199 14
d252 1
a252 1
Management.
d254 1
a254 1
Cipher Suite Description Determination.
d258 1
a258 1
Management.
d260 1
a260 1
CRL to PKCS#7 Conversion.
d262 1
a262 1
Message Digest Calculation.
d264 1
a264 1
Diffie-Hellman Parameter Management.
d268 5
a272 1
Generation and Management of Diffie-Hellman Parameters.
d274 1
a274 1
DSA Data Management.
d276 5
a280 1
DSA Parameter Generation.
d282 3
a284 1
Encoding with Ciphers.
d286 1
a286 1
Error Number to Error String Conversion.
d288 1
a288 1
Generation of Diffie-Hellman Parameters.
d292 5
a296 1
Generation of DSA Parameters.
d298 3
a300 1
Generation of RSA Parameters.
d308 1
a308 1
PKCS#7 Data Management.
d310 1
a310 1
PKCS#8 Data Management.
d312 1
a312 1
PKCS#12 Data Management.
d316 1
a316 1
X.509 Certificate Signing Request
d318 1
a318 1
Management.
d320 1
a320 1
RSA Data Management.
d323 2
d345 1
a345 1
SSL Connection Timer.
d347 1
a347 1
SSL Session Data Management.
d351 1
a351 1
Algorithm Speed Measurement.
d355 1
a355 1
X.509 Certificate Verification.
d358 1
a358 1
Version Information.
d360 1
a360 1
X.509 Certificate Data Management.
d365 1
a365 1
MD2 Digest.
d367 1
a367 1
MD4 Digest.
d369 1
a369 1
MD5 Digest.
d371 1
a371 1
RIPEMD-160 Digest.
d373 1
a373 1
SHA Digest.
d375 1
a375 1
SHA-1 Digest.
d381 1
a381 1
AES Cipher.
d384 1
a384 1
Base64 Encoding.
d390 1
a390 1
Blowfish Cipher.
d393 1
a393 1
CAST Cipher.
d396 1
a396 1
CAST5 Cipher.
d403 1
a403 1
DES Cipher.
d409 1
a409 1
Triple DES Cipher.
d415 1
a415 1
RC2 Cipher.
d418 1
a418 1
RC4 Cipher.
d482 2
d506 18
d725 1
a725 1
Specifying an engine (by it's unique
d1393 1
a1393 1
.Op Fl h
a1394 1
.Op Fl v
d1414 4
a1547 2
.It Ar EXPORT56
56-bit export encryption algorithms.
a1563 4
.It Ar kDHr , kDHd
Cipher suites using DH key agreement and DH certificates signed by
CAs with RSA and DSS keys respectively.
Not implemented.
a1567 8
.It Ar aDH
Cipher suites effectively using DH authentication, i.e. the certificates carry
DH keys.
Not implemented.
.It Ar kFZA , aFZA , eFZA , FZA
Cipher suites using FORTEZZA key exchange, authentication, encryption
or all FORTEZZA algorithms.
Not implemented.
d1684 12
d1754 11
a1764 1
selection options were added in version 0.9.7.
d1947 1
a1947 2
.Op Fl c
.Op Fl d
d1952 2
d1960 1
d1992 1
a1992 1
Specifying an engine (by it's unique
d1999 2
d2010 25
a2034 1
Key file format.
d2062 3
d2156 1
a2156 1
Specifying an engine (by it's unique
d2306 1
a2306 1
Specifying an engine (by it's unique
d2441 1
a2441 1
Specifying an engine (by it's unique
d2516 1
d2518 1
a2518 1
.Op Fl engine Ar id
d2523 1
d2529 1
d2547 1
a2547 1
.It Fl a
d2562 1
a2562 1
Specifying an engine (by it's unique
d2632 13
d2700 20
d2768 49
a2816 42
aes-128-cbc        128-bit AES in CBC mode
aes-128-ecb        128-bit AES in ECB mode

aes-192-cbc        192-bit AES in CBC mode
aes-192-ecb        192-bit AES in ECB mode

aes-256-cbc        256-bit AES in CBC mode
aes-256-ecb        256-bit AES in ECB mode

base64             Base 64

bf                 Alias for bf-cbc
bf-cbc             Blowfish in CBC mode
bf-cfb             Blowfish in CFB mode
bf-ecb             Blowfish in ECB mode
bf-ofb             Blowfish in OFB mode

cast               Alias for cast-cbc
cast-cbc           CAST in CBC mode
cast5-cbc          CAST5 in CBC mode
cast5-cfb          CAST5 in CFB mode
cast5-ecb          CAST5 in ECB mode
cast5-ofb          CAST5 in OFB mode

des                Alias for des-cbc
des-cbc            DES in CBC mode
des-cfb            DES in CBC mode
des-ecb            DES in ECB mode
des-ofb            DES in OFB mode

des-ede            Two key triple DES EDE in ECB mode
des-ede-cbc        Two key triple DES EDE in CBC mode
des-ede-cfb        Two key triple DES EDE in CFB mode
des-ede-ofb        Two key triple DES EDE in OFB mode

des3               Alias for des-ede3-cbc
des-ede3           Three key triple DES EDE in ECB mode
des-ede3-cbc       Three key triple DES EDE in CBC mode
des-ede3-cfb       Three key triple DES EDE CFB mode
des-ede3-ofb       Three key triple DES EDE in OFB mode

desx               Alias for desx-cbc
d2818 2
a2819 10
rc2                Alias for rc2-cbc
rc2-cbc            128-bit RC2 in CBC mode
rc2-cfb            128-bit RC2 in CFB mode
rc2-ecb            128-bit RC2 in ECB mode
rc2-ofb            128-bit RC2 in OFB mode
rc2-64-cbc         64-bit RC2 in CBC mode
rc2-40-cbc         40-bit RC2 in CBC mode

rc4                128-bit RC4
rc4-40             40-bit RC4
d2948 1
a2948 1
Specifying an engine (by it's unique
d3011 1
a3011 1
Specifying an engine (by it's unique
d3151 1
d3211 4
d3712 1
a3712 1
Specifying an engine (by it's unique
d3818 1
a3818 1
Specifying an engine (by it's unique
d4049 1
d4059 1
d4064 1
d4150 1
a4150 2
File of CAs
.Pq PEM format .
d4152 5
a4156 2
Directory of CAs
.Pq PEM format .
d4170 1
a4170 3
Although any PKCS#5 v1.5 or PKCS#12 algorithms can be selected,
it is advisable to only use PKCS#12 algorithms.
See the list in the
d4172 7
a4178 1
section for more information.
d4184 4
d4196 1
a4196 1
Specifying an engine (by it's unique
d4233 3
d4244 2
d4450 1
a4450 1
Specifying an engine (by it's unique
d4478 1
a4478 1
.Op Fl md2 | md4 | md5 | sha1
d4482 1
d4502 1
a4502 10
.Oo Xo
.Fl newkey
.Ar dsa : Ns Ar file
.Xc
.Oc
.Oo Xo
.Fl newkey
.Ar rsa : Ns Ar bits
.Xc
.Oc
d4558 1
a4558 1
Specifying an engine (by it's unique
d4608 1
a4608 1
.It Fl md2 | md4 | md5 | sha1
d4611 5
a4615 1
This option is ignored for DSA requests: they always use SHA1.
d4646 1
a4646 1
The argument takes one of two forms:
d4653 34
a4686 1
.Ar dsa : Ns Ar file
d4688 13
a4700 1
.Ar file .
d4736 12
d4754 2
a4755 2
Sets subject name for new request or supersedes the subject name
when processing a request.
d4760 1
a4760 1
.Pq backslash ,
d4763 3
a4765 1
Output the request's subject.
d5304 1
a5304 1
Specifying an engine (by it's unique
d5482 1
a5482 1
Specifying an engine (by it's unique
d5632 3
d5637 1
d5639 2
d5646 1
d5649 1
d5659 2
d5671 2
d5717 14
d5758 1
a5758 1
Specifying an engine (by it's unique
d5792 2
d5807 10
d5850 2
d5989 2
d6084 1
a6084 1
Specifying an engine (by it's unique
d6140 10
d6588 1
d6593 4
d6601 1
d6606 2
d6609 1
d6612 1
d6623 1
d6644 1
a6644 1
There are five operation options that set the type of operation to be performed.
d6647 1
a6647 1
The five operation options are as follows:
d6663 2
d6727 14
a6752 4
.It Fl crl_check
Check revocation status of signer's certificate using CRLs.
.It Fl crl_check_all
Check revocation status of signer's certificate chain using CRLs.
d6754 1
a6754 1
Specifying an engine (by it's unique
d6779 8
d6815 2
d6819 4
d6845 5
d6903 2
a6904 1
The signer's certificate when signing a message.
d6907 3
d6966 25
d7029 6
d7100 12
d7141 8
d7204 1
a7204 1
Specifying an engine (by it's unique
d7256 1
a7256 1
Specifying an engine (by it's unique
d7356 1
d7358 3
d7362 3
d7366 1
d7368 1
d7384 11
d7412 40
a7451 14
.It Fl CAfile Ar file
A
.Ar file
of trusted certificates.
The
.Ar file
should contain multiple certificates in PEM format, concatenated together.
.It Fl untrusted Ar file
A
.Ar file
of untrusted certificates.
The
.Ar file
should contain multiple certificates.
d7465 7
a7471 2
.It Fl help
Prints out a usage message.
d7474 3
a7476 17
.It Fl issuer_checks
Print out diagnostics relating to searches for the issuer certificate
of the current certificate.
This shows why each candidate issuer certificate was rejected.
However the presence of rejection messages
does not itself imply that anything is wrong: during the normal
verify process several rejections may take place.
.It Fl crl_check
Check revocation status of signer's certificate using CRLs.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm verify
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
a7604 1
Unused.
a7622 1
Unused.
a7632 1
Unused.
a7634 1
Unused.
a7646 1
Unused.
a7650 1
Unused.
a7670 1
Unused.
d7792 1
d7797 1
d7805 1
d7847 1
a7847 1
Specifying an engine (by it's unique
d7946 7
d7971 2
d7991 7
d8736 21
a8784 1
.Pp
d8840 1
a8840 1
.Cm list- Ns Ar XXX Ns Cm -commands
d8845 6
a8850 1
.Cm no- Ns Ar XXX
d8853 1
a8853 1
0.9.5a.
@


1.66
log
@replace ".Ar file ..." with ".Ar" whenever possible.

ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.65 2009/06/25 14:33:50 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: June 25 2009 $
d2967 2
a2968 2
.Bd -literal
.Dl $ openssl nseq -in nseq.pem -out certs.pem
d2972 2
a2973 2
.Bd -literal
.Dl $ openssl nseq -in certs.pem -toseq -out nseq.pem
@


1.65
log
@typo;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.64 2009/04/19 07:39:37 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: April 19 2009 $
d1887 1
a1887 1
.Op Fl rand Ar file ...
d1891 1
a1891 1
.Op Ar file ...
d1901 1
a1901 1
.Op Ar file ...
d1954 1
a1954 1
.It Fl rand Ar file ...
d1972 1
a1972 1
.It Ar file ...
d2017 1
a2017 1
.Op Fl rand Ar file ...
d2099 1
a2099 1
.It Fl rand Ar file ...
d2325 1
a2325 1
.Op Fl rand Ar file ...
d2390 1
a2390 1
.It Fl rand Ar file ...
d2791 1
a2791 1
.Op Fl rand Ar file ...
d2830 1
a2830 1
.It Fl rand Ar file ...
d2854 1
a2854 1
.Op Fl rand Ar file ...
d2901 1
a2901 1
.It Fl rand Ar file ...
d3926 1
a3926 1
.Op Fl rand Ar file ...
d4128 1
a4128 1
.It Fl rand Ar file ...
d4260 1
a4260 1
.Op Fl rand Ar file ...
d4305 1
a4305 1
.It Fl rand Ar file ...
d4357 1
a4357 1
.Op Fl rand Ar file ...
d4531 1
a4531 1
.It Fl rand Ar file ...
d5448 1
a5448 1
.Op Fl rand Ar file ...
d5571 1
a5571 1
.It Fl rand Ar file ...
d5735 1
a5735 1
.Op Fl rand Ar file ...
d5887 1
a5887 1
.It Fl rand Ar file ...
d6351 1
a6351 1
.Op Fl rand Ar file ...
d6584 1
a6584 1
.It Fl rand Ar file ...
@


1.64
log
@update protocols for s_client;s -starttls; from brad
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.63 2009/04/06 18:57:07 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: April 6 2009 $
d5081 1
a5081 1
If none of these options is specified the key is written in plain text.
@


1.63
log
@sync with 0.9.8k;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.62 2008/11/03 14:49:23 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: November 3 2008 $
d5590 5
a5594 2
Currently, the only supported keywords are
.Qq smtp
d5596 1
a5596 1
.Qq pop3 .
@


1.62
log
@sync to openssl-0.9.8i;

i still haven't folded in x509v3_config.pod, since i'm not entirely
sure what to do with it.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.61 2008/05/30 19:06:50 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: May 30 2008 $
d7396 1
d7407 1
d7539 6
d7547 1
a7547 7
of the certificate subject name.
This is used in
.Nm OpenSSL
to form an index to allow certificates in a directory to be looked up
by subject name.
.It Fl issuer
Outputs the issuer name.
d7576 8
@


1.61
log
@-salt is default for "openssl enc"; from djm
tweaked with some help from Matthew Dempsky and djm

ok djm
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.60 2007/12/01 11:05:25 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: December 1 2007 $
d1881 1
d1933 3
d3095 5
d3118 1
a3118 1
.Fl verify_certs
d3202 1
a3202 1
.Fl verify_certs
d3216 1
a3216 1
.Fl verify_certs
d5697 2
d5789 6
a8335 13
.Xr blowfish 3 ,
.Xr crypto 3 ,
.Xr des_crypt 3 ,
.Xr dsa 3 ,
.Xr ERR_error_string_n 3 ,
.Xr HMAC 3 ,
.Xr md4 3 ,
.Xr md5 3 ,
.Xr RAND_egd 3 ,
.Xr rsa 3 ,
.Xr sha1 3 ,
.Xr ssl 3 ,
.Xr des_modes 7 ,
@


1.60
log
@relevant updates/fixes up to openssl-0.9.8g;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.59 2007/05/31 19:20:26 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate: May 31 2007 $
d2531 3
a2533 1
This is the default for compatibility with previous versions of
d2535 3
a2537 2
and
.Nm SSLeay .
d2573 1
a2573 10
This option should
.Em ALWAYS
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
This option is only present on
.Nm OpenSSL
versions 0.9.5 or above.
d2588 1
a2588 1
.Fl salt
d2590 2
a2591 3
.Em ALWAYS
be used if the key is being derived from a password unless compatibility
with previous versions of
d2593 1
a2593 1
and
d2595 1
a2595 1
is necessary.
d2597 2
a2598 2
Without the
.Fl salt
d2601 1
a2601 2
The reason for this is that without the
.Ar salt
d2603 1
a2603 2
When the
.Ar salt
d2605 1
a2605 2
for the
.Ar salt :
@


1.59
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.58 2007/04/21 20:50:09 jmc Exp $
d115 1
a115 1
.Dd $Mdocdate$
d583 8
d941 4
d1066 11
d1236 1
a1236 2
V2 CRL features like delta CRL support and CRL numbers are not currently
supported.
d1445 1
a1445 1
.Ar ALL:!ADH:RC4+RSA:+SSLv2:@@STRENGTH .
d1624 4
a1627 4
TLS_DH_DSS_WITH_AES_128_CBC_SHA         DH-DSS-AES128-SHA
TLS_DH_DSS_WITH_AES_256_CBC_SHA         DH-DSS-AES256-SHA
TLS_DH_RSA_WITH_AES_128_CBC_SHA         DH-RSA-AES128-SHA
TLS_DH_RSA_WITH_AES_256_CBC_SHA         DH-RSA-AES256-SHA
a2638 2
aes128             Alias for aes-128-cbc
aes-128-cfb        128-bit AES in CFB mode
a2639 1
aes-128-ofb        128-bit AES in OFB mode
a2641 2
aes192             Alias for aes-192-cbc
aes-192-cfb        192-bit AES in CFB mode
a2642 1
aes-192-ofb        192-bit AES in OFB mode
a2644 2
aes256             Alias for aes-256-cbc
aes-256-cfb        256-bit AES in CFB mode
a2645 1
aes-256-ofb        256-bit AES in OFB mode
d2649 1
a2650 2
bf                 Alias for bf-cbc
blowfish           Alias for bf-cbc
d2655 1
a2656 1
cast               Alias for cast-cbc
d2662 1
a2663 1
des                Alias for des-cbc
d2668 1
a2669 1
des-ede            Two key triple DES EDE in ECB mode
d2673 2
a2675 2
des-ede3           Three key triple DES EDE in ECB mode
des3               Alias for des-ede3-cbc
a2678 1
desx-cbc           DESX algorithm
d2681 1
a2682 1
rc2                Alias for rc2-cbc
d5673 3
d7875 1
a7875 1
.Ar spc_eq , lname ,
d7905 1
a7905 1
.Ar spc_eq ,
d7934 1
a7934 1
.It Ar spc_eq
d8042 1
a8042 1
	-nameopt oneline,esc_msb
@


1.58
log
@-These option are ignored
+These options are ignored
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.57 2007/02/07 22:19:37 jmc Exp $
d115 1
a115 1
.Dd February 28, 2003
@


1.57
log
@consistency tweak;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.56 2006/06/27 14:23:52 jmc Exp $
d3156 1
a3156 1
These option are ignored
@


1.56
log
@sync with openssl-0.9.7j docs;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.55 2006/06/01 10:21:23 jmc Exp $
d341 1
a341 1
.It Cm aes-128-cbc | aes-128-ecb | aes-192-cbc | aes-192-ecb |
@


1.55
log
@start sentence with a capital letter;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.54 2006/05/17 08:55:03 jmc Exp $
d981 1
a981 1
.It Ar nameopt , certopt
d1172 2
a1173 2
\& nameopt        = ca_default            # Subject name display option
\& certopt        = ca_default            # Certificate display option
d2657 1
a2657 1
des-ede            Alias for des-ede
d2662 1
a2662 1
des-ede3           Alias for des-ede3-cbc
d2672 3
a2674 3
rc2-cfb            128-bit RC2 in CBC mode
rc2-ecb            128-bit RC2 in CBC mode
rc2-ofb            128-bit RC2 in CBC mode
@


1.54
log
@move an option to the right place;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.53 2006/05/14 08:56:25 matthieu Exp $
d1913 1
a1913 1
file to output to, or standard output by default.
@


1.53
log
@Add a -hex option to 'rand' to output hexadecimal output.
ok djm@@ miod@@, man page help from jmc@@.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.52 2005/11/27 13:12:00 jmc Exp $
d4247 1
a4248 1
.Op Fl hex
@


1.52
log
@ISOXXX/ISO-XXX -> ISO XXX
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.51 2005/04/29 09:31:05 jmc Exp $
d4248 1
d4289 2
@


1.51
log
@fixes/updates from openssl-0.9.7g;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.50 2004/12/03 01:41:17 jmc Exp $
d4996 1
a4996 1
is broken: it effectively treats them as ISO-8859-1
d8087 1
a8087 1
T61Strings use the ISO8859-1 character set.
@


1.50
log
@various fixes for openssl x509;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.49 2004/09/28 21:16:12 jmc Exp $
d584 1
a584 1
There should be options to change the format of input lines.
d1862 1
d1914 7
d2752 12
@


1.49
log
@wrong macros; from number six;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.48 2004/09/23 20:35:40 jmc Exp $
d7340 10
a7349 9
.Op Fl inform Ar DER | NET | PEM
.Op Fl outform Ar DER | NET | PEM
.Op Fl keyform Ar DER | PEM
.Op Fl CAform Ar DER | PEM
.Op Fl CAkeyform Ar DER | PEM
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl passin Ar arg
.Op Fl serial
a7350 1
.Op Fl subject
d7352 1
a7352 6
.Op Fl nameopt Ar option
.Op Fl email
.Op Fl startdate
.Op Fl enddate
.Op Fl purpose
.Op Fl dates
a7353 3
.Op Fl pubkey
.Op Fl fingerprint
.Op Fl alias
d7356 7
d7364 2
a7365 2
.Op Fl clrtrust
.Op Fl clrreject
a7366 8
.Op Fl addreject Ar arg
.Op Fl setalias Ar arg
.Op Fl days Ar arg
.Op Fl checkend Ar arg
.Op Fl set_serial Ar n
.Op Fl signkey Ar file
.Op Fl x509toreq
.Op Fl req
d7368 1
d7370 1
a7370 1
.Op Fl CAcreateserial
d7372 5
a7376 4
.Op Fl text
.Op Fl C
.Op Fl md2 | md5 | sha1
.Op Fl clrext
d7378 10
a7387 2
.Op Fl extensions Ar section
.Op Fl engine Ar id
d7402 12
d7429 15
a7447 8
.It Fl in Ar file
This specifies the input
.Ar file
to read a certificate from, or standard input if this option is not specified.
.It Fl out Ar file
This specifies the output
.Ar file
to write to, or standard output by default.
a7454 19
.It Fl md2 | md5 | sha1
The digest to use.
This affects any signing or display option that uses a message digest,
such as the
.Fl fingerprint , signkey ,
and
.Fl CA
options.
If not specified, MD5 is used.
If the key being used to sign with is a DSA key,
this option has no effect: SHA1 is always used with DSA keys.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm x509
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d7466 2
a7467 5
.It Fl text
Prints out the certificate in text form.
Full details are output including the public key, signature algorithms,
issuer and subject names, serial number, any extensions present and any
trust settings.
d7480 12
a7491 11
.It Fl noout
This option prevents output of the encoded version of the request.
.It Fl ocspid
Print OCSP hash values for the subject name and public key.
.It Fl modulus
This option prints out the value of the modulus of the public key
contained in the certificate.
.It Fl pubkey
Output the public key.
.It Fl serial
Outputs the certificate serial number.
a7499 2
.It Fl subject
Outputs the subject name.
d7502 3
d7516 8
a7523 2
.It Fl email
Outputs the email address(es) if any.
d7528 7
a7534 12
.It Fl enddate
Prints out the expiry date of the certificate; that is, the
.Em notAfter
date.
.It Fl dates
Prints out the start and expiry dates of a certificate.
.It Fl fingerprint
Prints out the digest of the DER-encoded version of the whole certificate
(see
.Sx DIGEST OPTIONS ) .
.It Fl C
This outputs the certificate in the form of a C source file.
d7566 5
a7570 23
.It Fl trustout
This causes
.Nm x509
to output a
.Em trusted certificate .
An ordinary or trusted certificate can be input, but by default an ordinary
certificate is output and any trust settings are discarded.
With the
.Fl trustout
option a trusted certificate is output.
A trusted certificate is automatically output if any trust settings
are modified.
.It Fl setalias Ar arg
Sets the alias of the certificate.
This will allow the certificate to be referred to using a nickname,
for example
.Qq Steve's Certificate .
.It Fl alias
Outputs the certificate alias, if any.
.It Fl clrtrust
Clears all the permitted or trusted uses of the certificate.
.It Fl clrreject
Clears all the prohibited or rejected uses of the certificate.
d7585 6
a7590 5
.It Fl addreject Ar arg
Adds a prohibited use.
It accepts the same values as the
.Fl addtrust
option.
d7597 17
d7622 9
a7630 3
.It Fl signkey Ar file
This option causes the input file to be self-signed using the supplied
private key.
d7632 39
a7670 12
If the input file is a certificate, it sets the issuer name to the
subject name
.Pq i.e. makes it self-signed ,
changes the public key to the supplied value
and changes the start and end dates.
The start date is set to the current time and the end date is set to
a value determined by the
.Fl days
option.
Any certificate extensions are retained unless the
.Fl clrext
option is supplied.
d7672 13
a7684 3
If the input is a certificate request, a self-signed certificate
is created using the supplied private key using the subject name in
the request.
d7694 14
a7713 14
.It Fl days Ar arg
Specifies the number of days to make a certificate valid for.
The default is 30 days.
.It Fl checkend Ar arg
Check whether the certificate expires in the next
.Ar arg
seconds.
If so, exit with return value 1;
otherwise exit with return value 0.
.It Fl x509toreq
Converts a certificate into a certificate request.
The
.Fl signkey
option is used to pass the required private key.
d7735 3
a7737 9
.It Fl CA Ar file
Specifies the CA certificate to be used for signing.
When this option is present,
.Nm x509
behaves like a
.Qq mini CA .
The input file is signed by the CA using this option;
that is, its issuer name is set to the subject name of the CA and it is
digitally signed using the CA's private key.
d7739 8
a7746 2
This option is normally combined with the
.Fl req
d7748 3
a7750 9
Without the
.Fl req
option, the input is a certificate which must be self-signed.
.It Fl CAkey Ar file
Sets the CA private key to sign a certificate with.
If this option is not specified, it is assumed that the CA private key
is present in the CA certificate file.
.It Fl CAserial Ar file
Sets the CA serial number file to use.
d7752 8
a7759 37
When the
.Fl CA
option is used to sign a certificate it uses a serial
number specified in a file.
This file consist of one line containing an even number of hex digits
with the serial number to use.
After each use the serial number is incremented and written out
to the file again.
.Pp
The default filename consists of the CA certificate file base name with
.Pa .srl
appended.
For example, if the CA certificate file is called
.Pa mycacert.pem ,
it expects to find a serial number file called
.Pa mycacert.srl .
.It Fl CAcreateserial
With this option the CA serial number file is created if it does not exist:
it will contain the serial number
.Sq 02
and the certificate being signed will have
.Sq 1
as its serial number.
Normally, if the
.Fl CA
option is specified and the serial number file does not exist, it is an error.
.It Fl extfile Ar file
File containing certificate extensions to use.
If not specified, no extensions are added to the certificate.
.It Fl extensions Ar section
The section to add certificate extensions from.
If this option is not specified, the extensions should either be
contained in the unnamed
.Pq default
section or the default section should contain a variable called
.Qq extensions
which contains the section to use.
d7775 7
a7781 1
Only the first four will normally be used.
d7783 4
d7790 23
a7812 21
.It Ar RFC2253
Displays names compatible with RFC 2253; equivalent to
.Ar esc_2253 , esc_ctrl ,
.Ar esc_msb , utf8 , dump_nostr , dump_unknown ,
.Ar dump_der , sep_comma_plus , dn_rev and sname .
.It Ar oneline
A oneline format which is more readable than RFC2253.
It is equivalent to specifying the
.Ar esc_2253 , esc_ctrl , esc_msb , utf8 ,
.Ar dump_nostr , dump_der , use_quote , sep_comma_plus_spc ,
.Ar spc_eq
and
.Ar sname
options.
.It Ar multiline
A multiline format.
It is equivalent to
.Ar esc_ctrl , esc_msb , sep_multiline ,
.Ar spc_eq , lname
and
.Ar align .
d7834 7
a7840 23
.It Ar use_quote
Escapes some characters by surrounding the whole string with
.Sq \&"
characters.
Without the option, all escaping is done with the
.Sq \e
character.
.It Ar utf8
Convert all strings to UTF8 format first.
This is required by RFC 2253.
If you are lucky enough to have a UTF8 compatible terminal,
the use of this option (and
.Em not
setting
.Ar esc_msb )
may result in the correct display of multibyte
.Pq international
characters.
If this option is not present, multibyte characters larger than 0xff
will be represented using the format \eUXXXX for 16 bits and \eWXXXXXXXX
for 32 bits.
Also, if this option is off, any UTF8Strings will be converted to their
character form first.
a7847 41
.It Ar show_type
Show the type of the ASN1 character string.
The type precedes the field contents.
For example
.Qq BMPSTRING: Hello World .
.It Ar dump_der
When this option is set, any fields that need to be hexdumped will
be dumped using the DER encoding of the field.
Otherwise just the content octets will be displayed.
Both options use the RFC 2253 #XXXX... format.
.It Ar dump_nostr
Dump non-character string types
.Pq for example OCTET STRING ;
if this option is not set, non-character string types will be displayed
as though each content octet represents a single character.
.It Ar dump_all
Dump all fields.
This option, when used with
.Ar dump_der ,
allows the DER encoding of the structure to be unambiguously determined.
.It Ar dump_unknown
Dump any field whose OID is not recognised by
.Nm OpenSSL .
.It Ar sep_comma_plus , sep_comma_plus_space , sep_semi_plus_space , sep_multiline
These options determine the field separators.
The first character is between RDNs and the second between multiple AVAs
(multiple AVAs are very rare and their use is discouraged).
The options ending in
.Qq space
additionally place a space after the separator to make it more readable.
The
.Ar sep_multiline
uses a linefeed character for the RDN separator and a spaced
.Sq +
for the AVA separator.
It also indents the fields by four characters.
.It Ar dn_rev
Reverse the fields of the DN.
This is required by RFC 2253.
As a side effect, this also reverses the order of multiple AVAs but this is
permissible.
d7862 35
a7896 4
.It Ar align
Align field values for a more readable output.
Only usable with
.Ar sep_multiline .
d7901 23
d7934 8
d7945 13
d7963 4
a7966 2
.It Ar no_version
Don't print out the version number.
d7969 2
d7973 2
d7981 2
a7982 29
.It Ar no_subject
Don't print out the subject name.
.It Ar no_issuer
Don't print out the issuer name.
.It Ar no_pubkey
Don't print out the public key.
.It Ar no_sigdump
Don't give a hexadecimal dump of the certificate signature.
.It Ar no_aux
Don't print out certificate trust information.
.It Ar no_extensions
Don't print out any X509V3 extensions.
.It Ar ext_default
Retain default extension behaviour: attempt to print out unsupported
certificate extensions.
.It Ar ext_error
Print an error message for unsupported certificate extensions.
.It Ar ext_parse
ASN1 parse unsupported extensions.
.It Ar ext_dump
Hex dump unsupported extensions.
.It Ar ca_default
The value used by the
.Nm ca
utility, equivalent to
.Ar no_issuer , no_pubkey , no_header ,
.Ar no_version , no_sigdump
and
.Ar no_signame .
a7984 5
.Sy Note :
In these examples the
.Sq \e
means the example should be all on one line.
.Pp
d8005 1
a8005 1
	-nameopt oneline,-escmsb
@


1.48
log
@typo from number six;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.47 2004/08/26 21:29:18 jmc Exp $
d1687 2
a1688 2
.Op Cm CAfile Ar file
.Op Cm CApath Ar dir
@


1.47
log
@updates for openssl verify;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.46 2004/07/23 10:35:44 jmc Exp $
d6272 1
a6272 1
.Fl des3 | rc2-40 | rc2-64 | rcs-128
@


1.46
log
@tweaks for openssl spkac;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.45 2004/07/02 16:08:09 jmc Exp $
d6946 2
a6947 4
.Op Fl CApath Ar directory
.Op Fl CAfile Ar file
.Op Fl purpose Ar purpose
.Op Fl untrusted Ar file
d6951 2
a6952 1
.Op Fl crl_check
d6954 2
d6958 1
d6966 1
a6966 1
.It Fl CApath directory
d7003 2
d7006 1
a7006 1
.Ar smimeencrypt .
d7058 1
a7058 1
The verify operation consists of a number of separate steps.
d7063 1
a7063 1
The chain is built up by looking up the issuers certificate of the current
d7069 1
a7069 1
.Qq looking up the issuers certificate
d7074 1
a7074 1
of the current certificate was assumed to be the issuers certificate.
d7147 1
a7147 1
.Aq Pa x509_vfy.h .
d7288 1
a7288 1
assume certificates with matching subject name are identical and
@


1.45
log
@add `cast' and `cast-cbc' to the list of supported args to speed;
also add `dsa', which is shorthand for all the dsa tests;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.44 2004/07/02 14:56:39 jmc Exp $
d6820 6
d6827 1
a6828 1
.Op Fl key Ar keyfile
a6829 2
.Op Fl challenge Ar string
.Op Fl pubkey
d6832 1
a6832 3
.Op Fl noout
.Op Fl verify
.Op Fl engine Ar id
d6839 2
a6840 2
It can print out their contents, verify the signature and
produce its own SPKACs from a supplied private key.
d6844 10
a6860 4
.It Fl out Ar file
Specifies the output
.Ar file
to write to, or standard output by default.
d6865 1
a6865 1
.Fl in , noout , spksect
d6869 8
a6876 1
.It Fl passin Ar password
d6883 3
a6885 2
.It Fl challenge Ar string
Specifies the challenge string if an SPKAC is being created.
a6894 6
.It Fl noout
Don't output the text version of the SPKAC
.Pq not used if an SPKAC is being created .
.It Fl pubkey
Output the public key of an SPKAC
.Pq not used if an SPKAC is being created .
a6896 8
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm spkac
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
@


1.44
log
@reorder for openssl speed;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.43 2004/05/27 09:08:41 jmc Exp $
d6752 2
d6757 1
@


1.43
log
@some updates for openssl smime;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.42 2004/04/19 12:25:41 jmc Exp $
d6772 1
d6774 2
a6776 2
.Op Fl decrypt
.Op Fl mr
a6777 1
.Op Fl engine Ar id
a6787 5
.It Fl elapsed
Measure time in real time instead of CPU user time.
.It Fl evp Ar e
Use EVP
.Ar e .
a6790 6
.It Fl mr
Produce machine readable output.
.It Fl multi Ar number
Run
.Ar number
benchmarks in parallel.
d6800 11
@


1.42
log
@options sort and update for sess_id;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.41 2004/04/12 22:14:30 jmc Exp $
d588 1
a588 1
.\" ca
d619 1
a619 1
.Op Fl keyform Ar PEM | ENGINE
d701 1
a701 1
.It Fl keyform Ar PEM | ENGINE
d1675 1
a1675 1
.\" crl
d1860 1
a1860 1
.Op Fl keyform Ar PEM | ENGINE
d1909 1
a1909 1
.It Fl keyform Ar PEM | ENGINE
a6269 5
.Op Fl encrypt
.Op Fl decrypt
.Op Fl sign
.Op Fl verify
.Op Fl pk7out
d6271 2
a6272 2
.Fl des | des3 | rc2-40 | rc2-64 |
.Fl rc2-128 | aes128 | aes192 | aes256
d6275 9
d6285 1
d6287 2
a6288 20
.Op Fl nochain
.Op Fl nosigs
.Op Fl nocerts
.Op Fl noattr
.Op Fl binary
.Op Fl nodetach
.Op Fl in Ar file
.Op Fl certfile Ar file
.Op Fl signer Ar file
.Op Fl recip Ar file
.Op Fl inform Ar SMIME | DER | PEM
.Op Fl passin Ar arg
.Op Fl inkey Ar file
.Op Fl keyform Ar PEM | ENGINE
.Op Fl out Ar file
.Op Fl outform Ar SMIME | DER | PEM
.Op Fl content Ar file
.Op Fl to Ar addr
.Op Fl from Ar addr
.Op Fl subject Ar s
d6290 1
d6293 2
a6294 2
.Op Fl crl_check
.Op Fl crl_check_all
d6296 8
d6305 4
d6317 1
a6317 1
It can encrypt, decrypt, sign and verify
d6324 1
a6324 1
The options are as follows:
d6326 6
d6338 2
a6339 6
.It Fl decrypt
Decrypt mail using the supplied certificate and private key.
Expects an encrypted mail message in
.Em MIME
format for the input file.
The decrypted mail is written to the output file.
d6350 89
a6438 2
.It Fl pk7out
Takes an input message and writes out a PEM-encoded PKCS#7 structure.
d6444 1
a6444 1
.It Fl inform Ar SMIME | DER | PEM
d6447 1
a6447 1
.Em SMIME
d6462 46
d6512 1
a6512 1
.It Fl outform Ar SMIME | DER | PEM
d6515 1
a6515 1
.Em SMIME
a6529 118
.It Fl content Ar file
This specifies a file containing the detached content.
This is only useful with the
.Fl verify
command.
This is only usable if the PKCS#7 structure is using the detached
signature form where the content is not included.
This option will override any content if the input format is
.Em S/MIME
and it uses the multipart/signed
.Em MIME
content type.
.It Fl text
This option adds plain text
.Pq text/plain
.Em MIME
headers to the supplied message if encrypting or signing.
If decrypting or verifying it strips off text headers:
if the decrypted or verified message is not of
.Em MIME
type text/plain then an error occurs.
.It Fl CAfile Ar file
A
.Ar file
containing trusted CA certificates; only used with
.Fl verify .
.It Fl CApath Ar directory
A
.Ar directory
containing trusted CA certificates; only used with
.Fl verify .
This directory must be a standard certificate directory;
that is, a hash of each subject name (using
.Nm x509 -hash )
should be linked to each certificate.
.It Xo
.Fl des | des3 | rc2-40 | rc2-64 |
.Fl rc2-128 | aes128 | aes192 | aes256
.Xc
The encryption algorithm to use.
DES
.Pq 56 bits ,
triple DES
.Pq 168 bits ,
40-, 64-, or 128-bit RC2, or 128-, 192-, or 256-bit AES, respectively;
if not specified, 40-bit RC2 is
used.
Only used with
.Fl encrypt .
.It Fl nointern
When verifying a message, normally certificates
.Pq if any
included in the message are searched for the signing certificate.
With this option, only the certificates specified in the
.Fl certfile
option are used.
The supplied certificates can still be used as untrusted CAs however.
.It Fl noverify
Do not verify the signer's certificate of a signed message.
.It Fl nochain
Do not do chain verification of signers' certificates: that is,
don't use the certificates in the signed message as untrusted CAs.
.It Fl nosigs
Don't try to verify the signatures on the message.
.It Fl nocerts
When signing a message, the signer's certificate is normally included;
with this option it is excluded.
This will reduce the size of the signed message but the verifier must
have a copy of the signer's certificate available locally (passed using the
.Fl certfile
option, for example).
.It Fl noattr
Normally, when a message is signed a set of attributes are included which
include the signing time and supported symmetric algorithms.
With this option they are not included.
.It Fl binary
Normally, the input message is converted to
.Qq canonical
format which is effectively using CR and LF as end of line: as required by the
.Em S/MIME
specification.
When this option is present no translation occurs.
This is useful when handling binary data which may not be in
.Em MIME
format.
.It Fl nodetach
When signing a message use opaque signing: this form is more resistant
to translation by mail relays but it cannot be read by mail agents that
do not support
.Em S/MIME .
Without this option cleartext signing with the
.Em MIME
type multipart/signed is used.
.It Fl certfile Ar file
Allows additional certificates to be specified.
When signing these will be included with the message.
When verifying these will be searched for the signers' certificates.
The certificates should be in PEM format.
.It Fl signer Ar file
The signer's certificate when signing a message.
If a message is being verified, the signer's certificates will be
written to this file if the verification was successful.
.It Fl recip Ar file
The recipients certificate when decrypting a message.
This certificate
must match one of the recipients of the message or an error occurs.
.It Fl inkey Ar file
The private key to use when signing or decrypting.
This must match the corresponding certificate.
If this option is not specified, the private key must be included
in the certificate file specified with
the
.Fl recip
or
.Fl signer
file.
.It Fl keyform Ar PEM | ENGINE
Input private key format.
a6536 13
.It Fl crl_check
Check revocation status of signer's certificate using CRLs.
.It Fl crl_check_all
Check revocation status of signer's certificate chain using CRLs.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm smime
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default
for all available algorithms.
d6544 17
a6560 11
.It Ar cert.pem ...
One or more certificates of message recipients: used when encrypting
a message.
.It Fl to , from , subject
The relevant mail headers.
These are included outside the signed
portion of a message so they may be included manually.
When signing, many
.Em S/MIME
mail clients check the signer's certificate email
address matches that specified in the From: address.
d6667 1
a6667 1
	-des3 user.pem -out mail.msg
d7331 2
a7332 2
.Op Fl inform Ar DER | PEM | NET
.Op Fl outform Ar DER | PEM | NET
d7392 1
a7392 1
.It Fl inform Ar DER | PEM | NET
d7407 1
a7407 1
.It Fl outform Ar DER | PEM | NET
@


1.41
log
@sync w/ 0.9.7d import (one typo);
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.40 2004/04/08 12:08:27 jmc Exp $
d113 1
a113 1
.\" ssl(1)
a6141 5
.Op Fl inform Ar DER | PEM
.Op Fl outform Ar DER | PEM
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl text
d6144 1
d6146 4
d6163 18
d6192 2
a6193 8
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar file
This specifies the input
.Ar file
to read session information from, or standard input by default.
d6199 4
a6205 16
.It Fl cert
If a certificate is present in the session,
it will be output using this option;
if the
.Fl text
option is also present, then it will be printed out in text form.
.It Fl noout
This option prevents output of the encoded version of the session.
.It Fl context Ar ID
This option can set the session ID so the output session information uses the
supplied
.Ar ID .
The
.Ar ID
can be any string of characters.
This option won't normally be used.
d6209 11
a6219 11
.Bd -unfilled
\& SSL-Session:
\&     Protocol  : TLSv1
\&     Cipher    : 0016
\&     Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
\&     Session-ID-ctx: 01000000
\&     Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
\&     Key-Arg   : None
\&     Start Time: 948459261
\&     Timeout   : 300 (sec)
\&     Verify return code 0 (ok)
d6223 2
a6224 1
.Bl -tag -width "XXXX"
d6226 1
a6226 1
This is the protocol in use: TLSv1, SSLv3 or SSLv2.
@


1.40
log
@document s_time (from s_time.pod);
consistency fixes;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.39 2004/04/06 13:47:34 jmc Exp $
d5627 1
a5627 1
command and send an HTTP request for an appropriate page.
@


1.39
log
@sort SYNOPSIS and options, and various other fixes,
for s_client and s_server;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.38 2004/04/01 10:34:13 djm Exp $
d496 1
a496 1
If this option is not present, then no encoded data will be output.
d617 1
a617 1
.Op Fl key Ar arg
d673 1
a673 1
If no extension section is present, then a V1 certificate is created.
d691 1
a691 1
.It Fl key Ar password
d1275 1
a1275 1
If care is not taken, then it can be a security risk.
d1350 1
a1350 1
If it is not included, then the default cipher list will be used.
d1408 1
a1408 1
If none of these characters is present, then the string is just interpreted
d1704 1
a1704 1
.It Fl CApath Ar dir
d1946 1
a1946 1
If you wish to sign or verify data using the DSA algorithm, then the dss1
d1996 1
a1996 1
If present, then the input file is ignored and parameters are generated instead.
d2050 2
a2051 2
If not present, then a value of 512 is used.
If this value is present, then the input file is ignored and
d2341 1
a2341 1
If this option is included, then the input file
d2414 1
a2414 1
If decryption is set, then the input data is base64 decoded before
d2600 1
a2600 1
If padding is disabled, then the input data must be a multiple of the cipher
d2989 1
a2989 1
.Op Fl CApath Ar path
d3037 1
a3037 1
.It Fl CAfile Ar file , Fl CApath Ar path
d3169 1
a3169 1
If neither option is specified, then the OCSP request is not signed.
d3272 1
a3272 1
If neither option is present, then the
d3317 1
a3317 1
If the initial verify fails, then the OCSP verify process halts with an
d3332 1
a3332 1
If none of these checks is successful, then the OCSP verify fails.
d3698 1
a3698 1
If any encryption options are set, then a pass phrase will be prompted for.
d4001 1
a4001 1
If this option is present, then an attempt is made to include the entire
d4034 1
a4034 1
If not present, then a private key must be present in the input file.
d4134 1
a4134 1
If the CA certificates are required, then they can be output to a separate
d4423 1
a4423 1
If this option is not specified, then the filename present in the
d4570 1
a4570 1
If not specified, then 512 is used.
d4589 1
a4589 1
If not present, then MD5 is used.
d4745 2
a4746 2
If the user enters nothing, then the default value is used;
if no default value is present, then the field is omitted.
d5096 1
a5096 1
If any encryption options are set, then a pass phrase will be prompted for.
d5350 1
a5350 1
.Dl $ openssl x509 -in test/testx509.pem -pubkey -noout >pubkey.pem
d5475 1
a5475 1
If not specified, then an attempt is made to connect to the local host
d5498 1
a5498 1
If not specified, then the certificate file will be used.
d5575 1
a5575 1
If a connection is established with an SSL server, then any data received
d5596 1
a5596 1
If the connection succeeds, then an HTTP command can be given such as
d5600 1
a5600 1
If the handshake fails, then there are several possible causes; if it is
d5636 1
a5636 1
If there are problems verifying a server certificate, then the
d5735 1
a5735 1
If not specified, then the file
d5776 1
a5776 1
If not specified, then an attempt is made to
d5778 1
a5778 1
If this fails, then a static set of parameters hard coded into the
d5814 1
a5814 1
If not specified, then the certificate file will be used.
d5822 1
a5822 1
If this option is set, then no DH parameters will be loaded, effectively
d5835 1
a5835 1
If this option is set, then no certificate is used.
d5945 19
d5965 105
d6071 65
a6135 1
utility is currently undocumented.
d6420 1
a6420 1
.It Fl CApath Ar dir
d6494 1
a6494 1
If a message is being verified, then the signer's certificates will be
d6503 1
a6503 1
If this option is not specified, then the private key must be included
d6546 1
a6546 1
If signing, then many
d6773 1
a6773 1
.It Cm [zero or more test algorithms]
d7020 1
a7020 1
If no certificate files are included, then an attempt is made to read
d7106 1
a7106 1
If all operations complete successfully, then the certificate is considered
d7263 1
a7263 1
If they occur in both, then only the certificates in the file will
d7423 2
a7424 2
If not specified, then MD5 is used.
If the key being used to sign with is a DSA key, then
d7618 1
a7618 1
If the input is a certificate request, then a self-signed certificate
d7689 1
a7689 1
If this option is not specified, then it is assumed that the CA private key
d7722 1
a7722 1
If not specified, then no extensions are added to the certificate.
d7725 1
a7725 1
If this option is not specified, then the extensions should either be
d7776 1
a7776 1
.Dq \& ,+"<>; .
d7803 2
a7804 2
If you are lucky enough to have a UTF8 compatible terminal, then the use
of this option (and
d7811 1
a7811 1
If this option is not present, then multibyte characters larger than 0xff
d7836 1
a7836 1
if this option is not set, then non-character string types will be displayed
d8072 2
a8073 2
If the CA flag is true, then it is a CA;
if the CA flag is false, then it is not a CA.
@


1.38
log
@document ipv6ification changes to s_client, polished by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.37 2004/02/25 13:43:19 jmc Exp $
d4306 1
a4306 1
.Op Fl key Ar file
d4410 1
a4410 1
.It Fl key Ar file
d5384 3
a5386 13
.Oo
.Fl connect Ar host : Ns Ar port |
.Ar host Ns / Ns Ar port
.Oc
.Op Fl verify Ar depth
.Op Fl cert Ar file
.Op Fl key Ar file
.Op Fl CApath Ar directory
.Op Fl CAfile Ar file
.Op Fl reconnect
.Op Fl pause
.Op Fl showcerts
.Op Fl prexit
d5388 1
d5390 1
d5392 5
a5396 4
.Op Fl state
.Op Fl nbio
.Op Fl crlf
.Op Fl ign_eof
d5398 3
d5403 1
d5405 3
a5407 5
.Op Fl no_ssl2
.Op Fl no_ssl3
.Op Fl no_tls1
.Op Fl bugs
.Op Fl serverpref
d5409 4
a5412 1
.Op Fl starttls Ar protocol
d5414 1
d5416 2
a5417 1
.Op Fl 4 | 6
d5430 36
d5480 16
a5495 3
.It Fl cert Ar certname
The certificate to use, if one is requested by the server.
The default is not to use a certificate.
d5499 21
a5519 28
.It Fl verify Ar depth
The verify
.Ar depth
to use.
This specifies the maximum length of the
server certificate chain and turns on server certificate verification.
Currently the verify operation continues after errors so all the problems
with a certificate chain can be seen.
As a side effect the connection will never fail due to a server
certificate verify failure.
.It Fl CApath Ar directory
The
.Ar directory
to use for server certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the client certificate chain.
.It Fl CAfile Ar file
A
.Ar file
containing trusted certificates to use during server authentication
and to use when attempting to build the client certificate chain.
.It Fl reconnect
Reconnects to the same server 5 times using the same session ID; this can
be used as a test that session caching is working.
a5521 3
.It Fl showcerts
Display the whole server certificate chain: normally only the server
certificate itself is displayed.
a5532 16
.It Fl state
Prints out the SSL session states.
.It Fl debug
Print extensive debugging information including a hex dump of all traffic.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio_test
Tests non-blocking I/O.
.It Fl nbio
Turns on non-blocking I/O.
.It Fl crlf
This option translates a line feed from the terminal into CR+LF as required
by some servers.
.It Fl ign_eof
Inhibit shutting down the connection when end of file is reached in the
input.
d5538 9
a5546 18
.It Xo
.Fl ssl2 | ssl3 | tls1 |
.Fl no_ssl2 | no_ssl3 | no_tls1
.Xc
These options disable the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method which should be compatible
with all servers and permit them to use SSL v3, SSL v2 or TLS as appropriate.
.Pp
Unfortunately there are a lot of ancient and broken servers in use which
cannot handle this technique and will fail to connect.
Some servers only work if TLS is turned off with the
.Fl no_tls
option, others will only support SSL v2 and may need the
.Fl ssl2
option.
.It Fl bugs
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
d5550 3
a5552 7
.It Fl cipher Ar cipherlist
This allows the cipher list sent by the client to be modified.
Although the server determines which cipher suite is used, it should take
the first supported cipher in the list sent by the client.
See the
.Sx CIPHERS
section above for more information.
d5561 12
a5572 22
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm s_client
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl rand Ar file ...
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
.It Fl 4
Specify that
.Nm s_client
should attempt connections using IPv4 only.
.It Fl 6
Specify that
.Nm s_client
should attempt connections using IPv6 only.
d5603 1
a5603 1
.Fl no_ssl2 , no_ssl3
d5660 1
a5660 11
.Op Fl accept Ar port
.Op Fl context Ar id
.Op Fl verify Ar depth
.Op Fl Verify Ar depth
.Op Fl cert Ar file
.Op Fl key Ar keyfile
.Op Fl dcert Ar file
.Op Fl dkey Ar keyfile
.Op Fl dhparam Ar file
.Op Fl nbio
.Op Fl nbio_test
d5663 2
d5666 7
a5672 3
.Op Fl state
.Op Fl CApath Ar directory
.Op Fl CAfile Ar file
d5674 1
a5674 1
.Op Fl cipher Ar cipherlist
a5675 2
.Op Fl quiet
.Op Fl no_tmp_rsa
d5678 1
d5680 1
a5680 6
.Op Fl no_ssl2
.Op Fl no_ssl3
.Op Fl no_tls1
.Op Fl no_dhe
.Op Fl bugs
.Op Fl hack
d5682 9
a5690 2
.Op Fl WWW
.Op Fl HTTP
d5693 1
d5695 2
d5711 19
a5729 5
.It Fl context Ar id
Sets the SSL context id.
It can be given any string value.
If this option is not present, a default value will be used.
.It Fl cert Ar certname
d5738 16
a5753 4
.It Fl key Ar keyfile
The private key to use.
If not specified, then the certificate file will be used.
.It Fl dcert Ar file , Fl dkey Ar keyname
d5760 1
a5760 1
.Pq no additional certificate and key is used .
d5767 1
a5767 1
By using RSA and DSS certificates and keys
d5770 2
a5771 4
.It Fl nocert
If this option is set, then no certificate is used.
This restricts the cipher suites available to the anonymous ones
.Pq currently just anonymous DH .
d5778 1
a5778 1
If this fails then a static set of parameters hard coded into the
d5781 8
a5788 57
.It Fl no_dhe
If this option is set, then no DH parameters will be loaded, effectively
disabling the ephemeral DH cipher suites.
.It Fl no_tmp_rsa
Certain export cipher suites sometimes use a temporary RSA key; this option
disables temporary RSA key generation.
.It Fl verify Ar depth , Fl Verify Ar depth
The verify
.Ar depth
to use.
This specifies the maximum length of the client certificate chain
and makes the server request a certificate from the client.
With the
.Fl verify
option, a certificate is requested but the client does not have to send one.
With the
.Fl Verify
option, the client must supply a certificate or an error occurs.
.It Fl CApath Ar directory
The
.Ar directory
to use for client certificate verification.
This directory must be in
.Qq hash format ;
see
.Fl verify
for more information.
These are also used when building the server certificate chain.
.It Fl CAfile Ar file
A file containing trusted certificates to use during client authentication
and to use when attempting to build the server certificate chain.
The list is also used in the list of acceptable client CAs passed to the
client when a certificate is requested.
.It Fl state
Prints out the SSL session states.
.It Fl debug
Print extensive debugging information including a hex dump of all traffic.
.It Fl msg
Show all protocol messages with hex dump.
.It Fl nbio_test
Tests non-blocking I/O.
.It Fl nbio
Turns on non-blocking I/O.
.It Fl crlf
This option translates a line feed from the terminal into CR+LF.
.It Fl quiet
Inhibit printing of session and certificate information.
.It Xo
.Fl ssl2 | ssl3 | tls1 |
.Fl no_ssl2 | no_ssl3 | no_tls1
.Xc
These options disable the use of certain SSL or TLS protocols.
By default, the initial handshake uses a method which should be compatible
with all servers and permit them to use SSL v3, SSL v2 or TLS as appropriate.
.It Fl bugs
There are several known bugs in SSL and TLS implementations.
Adding this option enables various workarounds.
d5793 1
a5793 18
.It Fl cipher Ar cipherlist
This allows the cipher list used by the server to be modified.
When the client sends a list of supported ciphers, the first client cipher
also included in the server list is used.
Because the client specifies the preference order, the order of the server
cipherlist is irrelevant.
See the
.Sx CIPHERS
section for more information.
.It Fl serverpref
Use server's cipher preferences.
.It Fl www
Sends a status message back to the client when it connects.
This includes lots of information about the ciphers used and various
session parameters.
The output is in HTML format so this option will normally be used with a
web browser.
.It Fl WWW
a5800 8
.It Fl HTTP
Emulates a simple web server.
Pages will be resolved relative to the current directory;
for example if the URL
.Pa https://myhost/page.html
is requested the file
.Pa ./page.html
will be loaded.
a5803 8
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm s_server
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d5812 28
d5846 30
d5888 5
d5895 2
a5896 2
.It Ar Q
End the current SSL connection and exit.
a5898 5
.It Ar R
Renegotiate the SSL session and request a client certificate.
.It Ar P
Send some plain text down the underlying TCP connection: this should
cause the client to disconnect due to a protocol violation.
d5909 1
a5909 1
can be used for example.
@


1.37
log
@sort options and some tweaks for openssl rsa/rsautl;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.36 2004/02/18 21:06:40 jmc Exp $
d5385 2
a5386 1
.Fl connect Ar host : Ns Ar port
d5417 1
d5431 2
a5432 1
.Fl connect Ar host : Ns Ar port
d5441 3
d5565 8
@


1.36
log
@clean up openssl req;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.35 2004/02/06 13:28:15 jmc Exp $
a5005 7
.Op Fl inform Ar DER | NET | PEM
.Op Fl outform Ar DER | NET | PEM
.Op Fl in Ar file
.Op Fl passin Ar arg
.Op Fl out Ar file
.Op Fl passout Ar arg
.Op Fl sgckey
d5007 2
a5008 2
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
d5010 2
a5011 1
.Op Fl text
a5012 2
.Op Fl modulus
.Op Fl check
d5015 2
d5018 6
d5041 30
d5088 12
a5103 6
.It Fl in Ar file
This specifies the input
.Ar file
to read a key from, or standard input if this
option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
d5111 1
a5111 9
.It Fl out Ar file
This specifies the output
.Ar file
to write a key to, or standard output if this option is not specified.
If any encryption options are set then, a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl passout Ar password
d5118 7
a5128 14
.It Xo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Xc
These options encrypt the private key with the DES, triple DES, or the
AES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options is specified the key is written in plain text.
This means that using the
.Nm rsa
utility to read in an encrypted key with no encryption option can be used
to remove the pass phrase from a key, or by setting the encryption options
it can be used to add or change the pass phrase.
These options can only be used with PEM format output files.
a5131 21
.It Fl noout
This option prevents output of the encoded version of the key.
.It Fl modulus
This option prints out the value of the modulus of the key.
.It Fl check
This option checks the consistency of an RSA private key.
.It Fl pubin
By default, a private key is read from the input file: with this
option a public key is read instead.
.It Fl pubout
By default, a private key is output:
with this option a public key will be output instead.
This option is automatically set if the input is a public key.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm rsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d5202 6
a5207 4
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl inkey Ar file
.Op Fl keyform Ar DER | PEM
a5208 1
.Op Fl certin
a5210 5
.Op Fl encrypt
.Op Fl decrypt
.Op Fl pkcs | oaep | ssl | raw
.Op Fl hexdump
.Op Fl asn1parse
d5212 4
d5225 20
a5249 5
.It Fl out Ar file
Specifies the output
.Ar file
to write to, or standard output by
default.
d5256 16
a5273 2
.It Fl certin
The input is a certificate containing an RSA public key.
a5278 28
.It Fl encrypt
Encrypt the input data using an RSA public key.
.It Fl decrypt
Decrypt the input data using an RSA private key.
.It Fl pkcs | oaep | ssl | raw
The padding to use: PKCS#1 v1.5
.Pq the default ,
PKCS#1 OAEP, special padding used in SSL v2 backwards compatible handshakes,
or no padding, respectively.
For signatures, only
.Fl pkcs
and
.Fl raw
can be used.
.It Fl hexdump
Hex dump the output data.
.It Fl asn1parse
Asn1parse the output data; this is useful when combined with the
.Fl verify
option.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm rsautl
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d5350 1
a5350 1
.Dl $ openssl x509 -in test/testx509.pem -pubout -noout >pubkey.pem
d5367 1
a5367 1
It can be seen that the digest used was md5.
@


1.35
log
@`numbits' arg to openssl dsaparam does not have to be the last argument
specified;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.34 2004/02/01 15:45:28 jmc Exp $
d4285 10
a4294 6
.Op Fl inform Ar DER | PEM
.Op Fl outform Ar DER | PEM
.Op Fl in Ar file
.Op Fl passin Ar arg
.Op Fl out Ar file
.Op Fl passout Ar arg
d4296 2
a4297 2
.Op Fl pubkey
.Op Fl noout
d4299 11
a4309 3
.Op Fl modulus
.Op Fl new
.Op Fl rand Ar file ...
d4312 1
a4312 1
.Ar rsa : Ns Ar bits
d4317 1
a4317 1
.Ar dsa : Ns Ar file
d4320 8
a4327 7
.Op Fl nodes
.Op Fl subject
.Op Fl key Ar file
.Op Fl keyform Ar DER | PEM
.Op Fl keyout Ar file
.Op Fl md5 | sha1 | md2 | md4
.Op Fl config Ar file
a4328 12
.Op Fl x509
.Op Fl days Ar n
.Op Fl set_serial Ar n
.Op Fl asn1-kludge
.Op Fl newhdr
.Op Fl extensions Ar section
.Op Fl reqexts Ar section
.Op Fl utf8
.Op Fl nameopt
.Op Fl batch
.Op Fl verbose
.Op Fl engine Ar id
d4340 60
d4410 11
a4420 6
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar file
This specifies the input
d4422 7
a4428 31
to read a request from, or standard input
if this option is not specified.
A request is only read if the creation options
.Fl new
and
.Fl newkey
are not specified.
.It Fl passin Ar arg
The input file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl out Ar file
This specifies the output
.Ar file
to write to, or standard output by default.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl text
Prints out the certificate request in text form.
.It Fl pubkey
Outputs the public key.
.It Fl noout
This option prevents output of the encoded version of the request.
d4432 9
a4440 2
.It Fl verify
Verifies the signature on the request.
d4451 6
a4456 6
.It Fl rand Ar file ...
A file or files containing random data used to seed the random number generator,
or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
a4468 15
.It Fl key Ar file
This specifies the file to read the private key from.
It also accepts PKCS#8 format private keys for PEM format files.
.It Fl keyform Ar DER | PEM
The format of the private key file specified in the
.Fl key
argument.
.Ar PEM
is the default.
.It Fl keyout Ar file
This gives the
.Ar file
to write the newly created private key to.
If this option is not specified, then the filename present in the
configuration file is used.
d4472 37
a4508 12
.It Fl subject
Output the request's subject.
.It Fl md5 | sha1 | md2 | md4
This specifies the message digest to sign the request with.
This overrides the digest algorithm specified in the configuration file.
This option is ignored for DSA requests: they always use SHA1.
.It Fl config Ar file
This allows an alternative configuration file to be specified;
this overrides the compile time filename or any specified in
the
.Ev OPENSSL_CONF
environment variable.
d4518 13
a4541 73
.It Fl days Ar n
When the
.Fl x509
option is being used, this specifies the number of
days to certify the certificate for.
The default is 30 days.
.It Fl set_serial Ar n
Serial number to use when outputting a self-signed certificate.
This may be specified as a decimal value or a hex value if preceded by
.Sq 0x .
It is possible to use negative serial numbers but this is not recommended.
.It Fl extensions Ar section , Fl reqexts Ar section
These options specify alternative sections to include certificate
extensions (if the
.Fl x509
option is present) or certificate request extensions.
This allows several different sections to
be used in the same configuration file to specify requests for
a variety of purposes.
.It Fl utf8
This option causes field values to be interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
.It Fl nameopt Ar option
Option which determines how the subject or issuer names are displayed.
The
.Ar option
argument can be a single option or multiple options separated by commas.
Alternatively, the
.Fl nameopt
switch may be used more than once to set multiple options.
See the
.Sx X509
section below for details.
.It Fl asn1-kludge
By default, the
.Nm req
command outputs certificate requests containing
no attributes in the correct PKCS#10 format.
However certain CAs will only
accept requests containing no attributes in an invalid form: this
option produces this invalid format.
.Pp
More precisely, the
.Em Attributes
in a PKCS#10 certificate request are defined as a SET OF Attribute.
They are
.Em not
optional, so if no attributes are present then they should be encoded as an
empty SET OF.
The invalid form does not include the empty
SET OF, whereas the correct form does.
.Pp
It should be noted that very few CAs still require the use of this option.
.It Fl newhdr
Adds the word NEW to the PEM file header and footer lines
on the outputed request.
Some software
.Pq Netscape certificate server
and some CAs need this.
.It Fl batch
Non-interactive mode.
.It Fl verbose
Print extra details about the operations being performed.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm req
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d4556 12
a4567 10
.It Ar input_password | output_password
The passwords for the input private key file
.Pq if present
and the output private key file
.Pq if one will be created .
The command line options
.Fl passin
and
.Fl passout
override the configuration file values.
d4583 34
d4630 10
d4645 6
a4650 20
.It Ar encrypt_key
If this is set to
.Em no
and a private key is generated, it is
.Em not
encrypted.
This is equivalent to the
.Fl nodes
command line option.
For compatibility,
.Ar encrypt_rsa_key
is an equivalent option.
.It Ar default_md
This option specifies the digest algorithm to use.
Possible values include
.Ar md5
and
.Ar sha1 .
If not present, then MD5 is used.
This option can be overridden on the command line.
d4686 7
a4692 6
.It Ar req_extensions
This specifies the configuration file section containing a list of
extensions to add to the certificate request.
It can be overridden by the
.Fl reqexts
command line switch.
a4700 33
.It Ar prompt
If set to the value
.Em no ,
this disables prompting of certificate fields
and just takes values from the config file directly.
It also changes the expected format of the
.Em distinguished_name
and
.Em attributes
sections.
.It Ar utf8
If set to the value
.Em yes ,
then field values are interpreted as UTF8 strings;
by default they are interpreted as ASCII.
This means that the field values, whether prompted from a terminal or
obtained from a configuration file, must be valid UTF8 strings.
.It Ar attributes
This specifies the section containing any request attributes: its format
is the same as
.Ar distinguished_name .
Typically these may contain the
.Em challengePassword
or
.Em unstructuredName
types.
They are currently ignored by
.Nm OpenSSL Ns Li 's
request signing utilities, but some CAs might want them.
.It Ar distinguished_name
This specifies the section containing the distinguished name fields to
prompt for when generating a certificate or certificate request.
The format is described in the next section.
d4798 1
a4798 1
Examine and verify certificate request:
@


1.34
log
@sort openssl rand options;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.33 2004/01/28 20:09:23 jmc Exp $
a2340 1
It must be the last option.
@


1.33
log
@add some missing options/args to pkcs{7,8,12} that i missed earlier;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.32 2004/01/28 19:25:19 jmc Exp $
d4227 2
a4230 2
.Op Fl base64
.Op Fl engine Ar id
a4256 10
.It Fl out Ar file
Write to
.Ar file
instead of standard output.
.It Fl rand Ar file ...
Use specified file or files, or EGD socket (see
.Xr RAND_egd 3 )
for seeding the random number generator.
Multiple files can be specified separated by a
.Sq \&: .
d4269 10
@


1.32
log
@update and sort openssl pkcs{7,8,12};
plus some consistency fixes;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.31 2004/01/25 20:27:37 jmc Exp $
d3678 5
a3867 1
.Op Fl certpbe
a3873 1
.Op Fl keypbe
d3880 1
d3888 1
d3892 1
a3896 1
.Op Fl password Ar arg
d3954 1
a3954 1
.It Fl pass Ar arg , Fl passin Ar arg
d3983 1
a3983 1
.It Fl caname Ar friendlyname
d3993 8
a4050 8
.It Fl keypbe Ar alg , Fl certpbe Ar alg
These options allow the algorithm used to encrypt the private key and
certificates to be selected.
Although any PKCS#5 v1.5 or PKCS#12 algorithms can be selected,
it is advisable to only use PKCS#12 algorithms.
See the list in the
.Sx PKCS12 NOTES
section for more information.
d4054 1
a4054 1
.It Fl name Ar friendlyname
d4083 2
a4084 4
.It Fl pass Ar arg , Fl passout Ar arg
The PKCS#12 file
.Pq i.e. output file
password source.
d4090 4
a4093 2
.It Fl passin Ar password
Pass phrase source to decrypt any input private keys with.
@


1.31
log
@sort options and update openssl passwd;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.30 2004/01/23 21:43:09 jmc Exp $
d479 1
a479 1
the default, is base64 encoded.
d495 1
a495 3
Output file to place the
.Em DER
encoded data into.
d1697 1
a1697 5
command processes CRL files in
.Ar DER
or
.Ar PEM
format.
d1722 1
a1722 1
format is a DER encoded CRL structure.
d1725 1
a1725 1
is a base64 encoded version of the DER form with header and footer lines.
d1755 1
a1755 4
Convert a CRL file from
.Ar PEM
to
.Ar DER :
d1759 1
a1759 3
Output the text form of a
.Ar DER
encoded certificate:
d1791 1
a1791 3
containing one or more certificates in
.Ar PEM
format.
d1798 1
a1798 1
to read a CRL from or standard input if this option is not specified.
d1802 1
a1802 1
format is a DER encoded CRL structure.
d1805 1
a1805 1
is a base64 encoded version of the DER form with header and footer lines.
d1813 1
a1813 1
to write the PKCS#7 structure to or standard output by default.
d1817 1
a1817 1
format is a DER encoded PKCS#7 structure.
d1820 1
a1820 1
is a base64 encoded version of the DER form with header and footer lines.
d1827 1
a1827 3
Create a PKCS#7 structure in
.Ar DER
format with no CRL from several
d1839 1
a1839 1
This involves sending the DER encoded output
d1843 1
a1843 3
The
.Ar PEM
encoded form with the header and footer lines removed can be used to
d2032 1
a2032 1
to read parameters from or standard input if this option is not specified.
d2037 1
a2037 1
uses an ASN1 DER encoded form compatible with the PKCS#3 DHparameter
d2042 1
a2042 1
it consists of the DER format base64 encoded with
d2093 1
a2093 2
.Ar PEM
format DH parameters use the header and footer lines:
d2170 1
a2170 3
These options can only be used with
.Ar PEM
format output files.
d2182 1
a2182 1
to read a key from or standard input if this option is not specified.
d2188 1
a2188 1
argument with a private key uses an ASN1 DER encoded form of an ASN.1
d2200 2
a2201 2
it consists of the DER format base64
encoded with additional header and footer lines.
d2245 1
a2245 3
The
.Ar PEM
private key format uses the header and footer lines:
d2251 1
a2251 3
The
.Ar PEM
public key format uses the header and footer lines:
d2328 1
a2328 1
argument uses an ASN1 DER encoded form compatible with RFC 2459
d2334 1
a2334 1
it consists of the DER format base64 encoded with additional header
d2367 1
a2367 2
.Ar PEM
format DSA parameters use the header and footer lines:
d2413 1
a2413 1
This means that if encryption is taking place, the data is base64 encoded
d2928 1
a2928 1
to read or standard input if this option is not specified.
d2931 1
a2931 1
.Ar file
d2952 1
a2952 3
The
.Em PEM
encoded form uses the same headers and footers as a certificate:
d2964 3
a2966 6
This program needs a few more options:
like allowing
.Em DER
or
.Em PEM
input and output files and allowing multiple certificate files to be used.
d3070 1
a3070 3
must be in
.Ar PEM
format.
d3145 1
a3145 3
Write out the
.Ar DER
encoded certificate request or response to
d3526 1
a3526 4
.Op Fl inform Ar DER | PEM
.Op Fl outform Ar DER | PEM
.Op Fl in Ar file
.Op Fl out Ar file
a3528 1
.Op Fl noout
d3530 4
d3538 1
a3538 5
command processes PKCS#7 files in
.Em DER
or
.Em PEM
format.
d3542 12
d3557 1
a3557 1
format is a DER encoded PKCS#7 v1.5 structure.
d3560 10
a3569 1
is a base64 encoded version of the DER form with header and footer lines.
a3573 8
.It Fl in Ar file
This specifies the input
.Ar file
to read from or standard input if this option is not specified.
.It Fl out Ar file
Specifies the output
.Ar file
to write to or standard output by default.
d3576 1
a3576 1
They are preceded by their subject and issuer names in one line format.
a3579 13
.It Fl noout
Don't output the encoded version of the PKCS#7 structure
(or certificates if
.Fl print_certs
is set).
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm pkcs7
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d3582 1
a3582 4
Convert a PKCS#7 file from
.Em PEM
to
.Em DER :
d3590 1
a3590 3
The
.Em PEM
PKCS#7 format uses the header and footer lines:
d3612 5
d3618 2
d3621 1
a3622 1
.Op Fl in Ar file
a3623 1
.Op Fl out Ar file
d3625 1
a3625 5
.Op Fl noiter
.Op Fl nocrypt
.Op Fl nooct
.Op Fl embed
.Op Fl nsdb
a3626 2
.Op Fl v1 Ar alg
.Op Fl engine Ar id
d3639 22
a3660 7
.It Fl topk8
Normally, a PKCS#8 private key is expected on input and a traditional format
private key will be written.
With the
.Fl topk8
option the situation is reversed:
it reads a traditional format private key and writes a PKCS#8 format key.
d3665 2
a3666 40
.Em DER
or
.Em PEM
encoded version of a PKCS#8 key will be expected.
Otherwise the
.Em DER
or
.Em PEM
format of the traditional format private key is used.
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar file
This specifies the input
.Ar file
to read a key from or standard input if this option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
.It Fl passin Ar arg
The input file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl out Ar file
This specifies the output
.Ar file
to write a key to or standard output by default.
If any encryption options are set then a pass phrase will be prompted for.
The output filename should
.Em not
be the same as the input filename.
.It Fl passout Ar arg
The output file password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
d3670 2
a3671 2
structures using an appropriate password based encryption algorithm.
With this option an unencrypted
d3676 1
a3676 1
Certain software such as some versions of Java code signing software used
a3683 9
.It Fl embed
This option generates DSA keys in a broken format.
The DSA parameters are embedded inside the
.Em PrivateKey
structure.
In this form the OCTET STRING contains an ASN1 SEQUENCE consisting of
two structures:
a SEQUENCE containing the parameters and an ASN1 INTEGER containing
the private key.
d3690 36
d3728 1
a3728 1
Normally, PKCS#8 private keys are encrypted with the password based
d3744 2
a3745 2
argument is the encryption algorithm to use, valid values include
.Ar des , des3
a3750 11
.It Fl v1 Ar alg
This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to use.
A complete list of possible algorithms is included below.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm pkcs8
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d3753 1
a3753 3
The encrypted form of a
.Em PEM
encoded PKCS#8 file uses the following
d3767 1
a3767 1
counts are more secure that those encrypted using the traditional
d3770 1
a3770 1
So if additional security is considered, important the keys should be converted.
d3773 1
a3773 1
that most current implementations of PKCS#8 will support.
d3775 1
a3775 1
Some software may use PKCS#12 password based encryption algorithms
d3780 1
a3780 2
.Em DER
encoded encrypted private keys in PKCS#8 format because the encryption
d3782 1
a3782 3
level whereas the traditional format includes them at a
.Em PEM
level.
d3803 1
a3803 1
These algorithms use the PKCS#12 password based encryption algorithm and
d3823 1
a3823 1
Read a DER unencrypted PKCS#8 format private key:
d3841 1
a3841 1
it is hidden away in PKCS#11 v2.01, section 11.9.;
d3858 6
a3863 1
.Op Fl export
a3864 11
.Op Fl inkey Ar file
.Op Fl certfile Ar file
.Op Fl CApath Ar directory
.Op Fl CAfile Ar file
.Op Fl name Ar name
.Op Fl caname Ar name
.Op Fl in Ar file
.Op Fl out Ar file
.Op Fl noout
.Op Fl nomacver
.Op Fl nocerts
d3866 2
a3867 2
.Op Fl cacerts
.Op Fl nokeys
d3869 5
a3873 4
.Oo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Oc
d3876 3
a3878 1
.Op Fl maciter
d3880 9
a3888 6
.Op Fl descert
.Op Fl certpbe
.Op Fl keypbe
.Op Fl keyex
.Op Fl keysig
.Op Fl password Ar arg
d3891 1
a3892 1
.Op Fl engine Ar id
d3912 13
d3930 14
d3948 1
a3948 3
They are all written in
.Em PEM
format.
a3964 27
.It Fl noout
This option inhibits output of the keys and certificates to the output file
version of the PKCS#12 file.
.It Fl clcerts
Only output client certificates
.Pq not CA certificates .
.It Fl cacerts
Only output CA certificates
.Pq not client certificates .
.It Fl nocerts
No certificates at all will be output.
.It Fl nokeys
No private keys will be output.
.It Fl info
Output additional information about the PKCS#12 file structure,
algorithms used and iteration counts.
.It Xo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Xc
Use DES, triple DES, or AES, respectively,
to encrypt private keys before outputting.
The default is triple DES.
.It Fl nodes
Don't encrypt the private keys at all.
.It Fl nomacver
Don't attempt to verify the integrity MAC before reading the file.
d3972 3
a3974 29
.It Fl export
This option specifies that a PKCS#12 file will be created rather than
parsed.
.It Fl out Ar file
This specifies
.Ar file
to write the PKCS#12 file to.
Standard output is used by default.
.It Fl in Ar file
The
.Ar file
to read certificates and private keys from, standard input by default.
They must all be in
.Em PEM
format.
The order doesn't matter but one private key and its corresponding
certificate should be present.
If additional certificates are present, they will also be included
in the PKCS#12 file.
.It Fl inkey Ar file
File to read private key from.
If not present then a private key must be present in the input file.
.It Fl name Ar friendlyname
This specifies the
.Qq friendly name
for the certificate and private key.
This name is typically displayed in list boxes by software importing the file.
.It Fl certfile Ar file
A file to read additional certificates from.
a3977 3
.It Fl CAfile Ar file
File of CAs
.Pq PEM format .
d3986 2
a3987 16
.It Fl pass Ar arg , Fl passout Ar arg
The PKCS#12 file
.Pq i.e. output file
password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl passin Ar password
Pass phrase source to decrypt any input private keys with.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
d4000 23
a4022 8
.It Fl keypbe Ar alg , Fl certpbe Ar alg
These options allow the algorithm used to encrypt the private key and
certificates to be selected.
Although any PKCS#5 v1.5 or PKCS#12 algorithms can be selected,
it is advisable to only use PKCS#12 algorithms.
See the list in the
.Sx PKCS12 NOTES
section for more information.
d4038 16
d4073 21
a4093 3
.It Fl maciter
This option is included for compatibility with previous versions; it used
to be needed to use MAC iterations counts but they are now used by default.
a4100 8
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm pkcs12
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d4339 1
a4339 2
argument uses an ASN1 DER encoded
form compatible with the PKCS#10.
d4343 1
a4343 1
it consists of the DER format base64 encoded with additional header and
d4418 1
a4418 3
It also accepts PKCS#8 format private keys for
.Em PEM
format files.
d4522 2
a4523 3
Adds the word NEW to the
.Em PEM
file header and footer lines on the outputed request.
d4893 1
a4893 3
The header and footer lines in the
.Ar PEM
format are normally:
d5043 1
a5043 1
uses an ASN1 DER encoded form compatible with the PKCS#1
d5047 2
a5048 2
form is the default format: it consists of the DER format base64
encoded with additional header and footer lines.
d5062 1
a5062 1
to read a key from or standard input if this
d5104 1
a5104 3
These options can only be used with
.Ar PEM
format output files.
d5131 1
a5131 3
The
.Em PEM
private key format uses the header and footer lines:
d5137 1
a5137 3
The
.Em PEM
public key format uses the header and footer lines:
d5175 1
a5175 5
To convert a private key from
.Em PEM
to
.Em DER
format:
d5225 1
a5225 1
to read data from or standard input
d5230 1
a5230 1
to write to or standard output by
d5961 1
a5961 1
argument uses an ASN1 DER encoded
d5967 1
a5967 1
format base64 encoded with additional header and footer lines.
d6041 1
a6041 3
The
.Em PEM
encoded session format uses the header and footer lines:
d6142 1
a6142 3
Takes an input message and writes out a
.Em PEM
encoded PKCS#7 structure.
d6155 1
a6155 1
.Em PEM
d6157 1
a6157 1
.Em DER
d6177 1
a6177 1
.Em PEM
d6179 1
a6179 1
.Em DER
d6285 1
a6285 3
The certificates should be in
.Em PEM
format.
d6477 1
a6477 1
base64 encoded structure and surrounding it with:
d6625 1
a6625 1
to read from or standard input if this option is not specified.
d6632 1
a6632 1
to write to or standard output by default.
d6765 1
a6765 3
should contain multiple certificates in
.Em PEM
format concatenated together.
d6816 1
a6816 3
They should all be in
.Em PEM
format.
d7197 1
a7197 1
to read a certificate from or standard input if this option is not specified.
d7201 1
a7201 1
to write to or standard output by default.
d7303 1
a7303 1
Prints out the digest of the DER encoded version of the whole certificate
d7777 1
a7777 5
Convert a certificate from
.Em PEM
to
.Em DER
format:
d7809 1
a7809 3
The
.Em PEM
format uses the header and footer lines:
d7835 1
a7835 1
option takes the digest of the DER encoded certificate.
@


1.30
log
@sort options and clean up openssl ocsp;
plus a stab at making this page more consistent;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.29 2004/01/23 14:31:11 jmc Exp $
d3466 1
a3466 6
.Op Fl crypt
.Op Fl 1
.Op Fl apr1
.Op Fl salt Ar string
.Op Fl in Ar file
.Op Fl stdin
d3469 2
d3472 2
a3473 1
.Op Fl reverse
a3500 5
.It Fl crypt
Use the
.Em crypt
algorithm
.Pq default .
d3513 17
a3534 3
.It Fl in Ar file
Read passwords from
.Ar file .
a3537 4
.It Fl noverify
Don't verify when reading a password from the terminal.
.It Fl quiet
Don't output warnings when passwords given on the command line are truncated.
a3540 2
.It Fl reverse
Switch table columns.
@


1.29
log
@sort options and tidy openssl nseq;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.28 2003/12/29 13:44:43 jmc Exp $
d412 1
a412 1
.It Ar file : Ns Ar pathname
d414 1
a414 1
.Ar pathname
d417 1
a417 1
.Ar pathname
d424 1
a424 1
.Ar pathname
d444 1
a444 1
.Op Fl in Ar filename
d448 2
a449 2
.Op Fl oid Ar filename
.Op Fl out Ar filename
d470 1
a470 1
.It Fl in Ar filename
d488 1
a488 1
.It Fl oid Ar filename
d494 1
a494 1
.It Fl out Ar filename
d605 1
a605 1
.Op Fl config Ar filename
d652 1
a652 1
.It Fl config Ar filename
d686 1
a686 1
.It Fl in Ar filename
d688 1
a688 1
.Ar filename
d701 1
a701 1
.It Fl keyfile Ar filename
d744 1
a744 1
.It Fl out Ar filename
d752 1
a752 1
The certificate will be written to a filename consisting of the
d780 1
a780 1
.It Fl spkac Ar filename
d786 1
a786 1
.It Fl ss_cert Ar filename
d854 1
a854 1
.It Fl revoke Ar filename
d856 1
a856 1
.Ar filename
d1691 1
a1691 1
.Op Fl in Ar filename
d1693 1
a1693 1
.Op Fl out Ar filename
d1722 2
a1723 2
.It Fl in Ar filename
This specifies the input filename to read from, or standard input if this
d1744 2
a1745 2
.It Fl out Ar filename
Specifies the output filename to write to, or standard output by
d1783 2
a1784 2
.Op Fl certfile Ar filename
.Op Fl in Ar filename
d1786 1
a1786 1
.Op Fl out Ar filename
d1799 1
a1799 1
.It Fl certfile Ar filename
d1801 1
a1801 1
.Ar filename
d1808 1
a1808 1
.It Fl in Ar filename
d1810 1
a1810 1
.Ar filename
d1823 1
a1823 1
.It Fl out Ar filename
d1825 1
a1825 1
.Ar filename
d1878 2
a1879 2
.Op Fl out Ar filename
.Op Fl prverify Ar filename
d1881 3
a1883 3
.Op Fl sign Ar filename
.Op Fl signature Ar filename
.Op Fl verify Ar filename
d1928 3
a1930 3
.It Fl out Ar filename
Filename to output to, or standard output by default.
.It Fl prverify Ar filename
d1932 1
a1932 1
.Ar filename .
d1943 1
a1943 1
.It Fl sign Ar filename
d1945 2
a1946 2
.Ar filename .
.It Fl signature Ar filename
d1948 1
a1948 1
.It Fl verify Ar filename
d1950 1
a1950 1
.Ar filename .
d1996 1
a1996 1
.Op Fl in Ar filename
d1998 1
a1998 1
.Op Fl out Ar filename
d2046 1
a2046 1
.It Fl in Ar filename
d2048 1
a2048 1
.Ar filename
d2070 1
a2070 1
.It Fl out Ar filename
d2072 1
a2072 1
.Ar filename
d2151 1
a2151 1
.Op Fl in Ar filename
d2153 1
a2153 1
.Op Fl out Ar filename
d2199 1
a2199 1
.It Fl in Ar filename
d2201 1
a2201 1
.Ar filename
d2227 1
a2227 1
.It Fl out Ar filename
d2229 1
a2229 1
.Ar filename
d2311 1
a2311 1
.Op Fl in Ar filename
d2313 1
a2313 1
.Op Fl out Ar filename
d2341 1
a2341 1
.It Fl in Ar filename
d2343 1
a2343 1
.Ar filename
d2369 1
a2369 1
.It Fl out Ar filename
d2371 1
a2371 1
.Ar filename
d2414 1
a2414 1
.Op Fl in Ar filename
d2418 2
a2419 2
.Op Fl kfile Ar filename
.Op Fl out Ar filename
d2458 1
a2458 1
.It Fl in Ar filename
d2460 1
a2460 1
.Ar filename ;
d2513 1
a2513 1
.It Fl kfile Ar filename
d2515 1
a2515 1
.Ar filename .
d2531 1
a2531 1
.It Fl out Ar filename
d2533 1
a2533 1
.Ar filename ,
d2791 1
a2791 1
.Op Fl out Ar filename
d2821 1
a2821 1
.It Fl out Ar filename
d2823 1
a2823 1
.Ar filename .
d2853 1
a2853 1
.Op Fl out Ar filename
d2891 1
a2891 1
.It Fl out Ar filename
d2893 1
a2893 1
.Ar filename .
d2938 2
a2939 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d2950 1
a2950 1
.It Fl in Ar filename
d2952 1
a2952 1
.Ar filename
d2954 1
a2954 1
.It Fl out Ar filename
d2956 1
a2956 1
.Ar filename
d3003 2
a3004 7
.Op Fl out Ar file
.Op Fl issuer Ar file
.Op Fl cert Ar file
.Op Fl serial Ar n
.Op Fl signer Ar file
.Op Fl signkey Ar file
.Op Fl sign_other Ar file
d3006 6
d3013 2
d3017 5
a3021 7
.Op Fl reqout Ar file
.Op Fl respout Ar file
.Op Fl reqin Ar file
.Op Fl respin Ar file
.Op Fl nonce
.Op Fl no_nonce
.Op Fl url Ar URL
d3026 21
a3046 3
.Op Fl path
.Op Fl CApath Ar dir
.Op Fl CAfile Ar file
d3048 1
a3048 3
.Op Fl validity_period Ar n
.Op Fl status_age Ar n
.Op Fl noverify
a3049 17
.Op Fl trust_other
.Op Fl no_intern
.Op Fl no_signature_verify
.Op Fl no_cert_verify
.Op Fl no_chain
.Op Fl no_cert_checks
.Op Fl port Ar num
.Op Fl index Ar file
.Op Fl CA Ar file
.Op Fl rsigner Ar file
.Op Fl rkey Ar file
.Op Fl rother Ar file
.Op Fl resp_no_certs
.Op Fl nmin Ar n
.Op Fl ndays Ar n
.Op Fl resp_key_id
.Op Fl nrequest Ar n
d3068 28
a3095 5
.It Fl out Ar filename
Specify output
.Ar filename ,
default is standard output.
.It Fl issuer Ar filename
d3099 1
a3099 1
.Ar filename
d3103 26
a3128 31
.It Fl cert Ar filename
Add the certificate
.Ar filename
to the request.
The issuer certificate is taken from the previous
.Fl issuer
option, or an error occurs if no issuer certificate is specified.
.It Fl serial Ar num
Same as the
.Fl cert
option except the certificate with serial number
.Ar num
is added to the request.
The serial number is interpreted as a decimal integer unless preceded by
.Sq 0x .
Negative integers can also be specified by preceding the value with a
.Sq -
sign.
.It Fl signer Ar filename , Fl signkey Ar filename
Sign the OCSP request using the certificate specified in the
.Fl signer
option and the private key specified by the
.Fl signkey
option.
If the
.Fl signkey
option is not present, then the private key is read from the same file
as the certificate.
If neither option is specified, then the OCSP request is not signed.
.It Fl sign_other Ar filename
Additional certificates to include in the signed request.
d3154 10
a3165 3
.It Fl reqout Ar file , Fl respout Ar file
Write out the DER encoded certificate request or response to
.Ar file .
d3172 1
a3172 1
.Fl serial , cert
d3176 24
a3199 9
.It Fl url Ar responder_url
Specify the responder URL.
Both HTTP and HTTPS
.Pq SSL/TLS
URLs can be specified.
.It Xo
.Fl host Ar hostname : Ns Ar port ,
.Fl path Ar pathname
.Xc
d3201 4
a3204 21
.Fl host
option is present, then the OCSP request is sent to the host
.Ar hostname
on port
.Ar port .
.Fl path
specifies the HTTP path name to use, or
.Sq /
by default.
.It Fl CAfile Ar file , Fl CApath Ar pathname
.Ar file
or
.Ar pathname
containing trusted CA certificates.
These are used to verify the signature on the OCSP response.
.It Fl verify_other Ar file
.Ar file
containing additional certificates to search when attempting to locate
the OCSP response signing certificate.
Some responders omit the actual signer's certificate from the response:
this option can be used to supply the necessary certificate in such cases.
d3212 5
a3224 30
.It Fl noverify
Don't attempt to verify the OCSP response signature or the
.Em nonce
values.
This option will normally only be used for debugging
since it disables all verification of the responders certificate.
.It Fl no_intern
Ignore certificates contained in the OCSP response
when searching for the signer's certificate.
With this option the signer's certificate must be specified with either the
.Fl verify_certs
or
.Fl VAfile
options.
.It Fl no_signature_verify
Don't check the signature on the OCSP response.
Since this option tolerates invalid signatures on OCSP responses,
it will normally only be used for testing purposes.
.It Fl no_cert_verify
Don't verify the OCSP response signer's certificate at all.
Since this option allows the OCSP response to be signed by any certificate,
it should only be used for testing purposes.
.It Fl no_chain
Do not use certificates in the response as additional untrusted CA
certificates.
.It Fl no_cert_checks
Don't perform any additional checks on the OCSP response signer's certificate.
That is, do not make any checks to see if the signer's certificate is
authorised to provide the necessary status information:
as a result this option should only be used for testing purposes.
d3252 6
d3261 3
a3298 26
.It Fl CA Ar file
CA certificate corresponding to the revocation information in
.Ar indexfile .
.It Fl rsigner Ar file
The certificate to sign OCSP responses with.
.It Fl rother Ar file
Additional certificates to include in the OCSP response.
.It Fl resp_no_certs
Don't include any certificates in the OCSP response.
.It Fl resp_key_id
Identify the signer certificate using the key ID,
default is to use the subject name.
.It Fl rkey Ar file
The private key to sign OCSP responses with;
if not present, the file specified in the
.Fl rsigner
option is used.
.It Fl port Ar portnum
Port to listen for OCSP requests on.
The port may also be specified using the
.Fl url
option.
.It Fl nrequest Ar number
The OCSP server will exit after receiving
.Ar number
requests, default unlimited.
d3310 23
d3430 1
a3430 1
Read in an OCSP response and print out text form:
d3455 2
a3456 2
Query status information using request read from a file, write response to a
second file:
d3561 2
a3562 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d3590 1
a3590 1
.It Fl in Ar filename
d3592 1
a3592 1
.Ar filename
d3594 1
a3594 1
.It Fl out Ar filename
d3596 1
a3596 1
.Ar filename
d3657 1
a3657 1
.Op Fl in Ar filename
d3659 1
a3659 1
.Op Fl out Ar filename
d3705 1
a3705 1
.It Fl in Ar filename
d3707 1
a3707 1
.Ar filename
d3717 1
a3717 1
.It Fl out Ar filename
d3719 1
a3719 1
.Ar filename
d3914 2
a3915 2
.Op Fl inkey Ar filename
.Op Fl certfile Ar filename
d3917 1
a3917 1
.Op Fl CAfile Ar filename
d3920 2
a3921 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d3966 1
a3966 1
.It Fl in Ar filename
d3968 1
a3968 1
.Ar filename
d3971 1
a3971 1
.It Fl out Ar filename
d3973 1
a3973 1
.Ar filename
d4031 1
a4031 1
.It Fl out Ar filename
d4033 1
a4033 1
.Ar filename
d4036 1
a4036 1
.It Fl in Ar filename
d4038 1
a4038 1
.Ar filename
d4047 1
a4047 1
.It Fl inkey Ar filename
d4055 2
a4056 2
.It Fl certfile Ar filename
A filename to read additional certificates from.
d4060 1
a4060 1
.It Fl CAfile Ar filename
d4341 1
a4341 1
.Op Fl in Ar filename
d4343 1
a4343 1
.Op Fl out Ar filename
d4364 1
a4364 1
.Op Fl key Ar filename
d4366 1
a4366 1
.Op Fl keyout Ar filename
d4368 1
a4368 1
.Op Fl config Ar filename
d4408 1
a4408 1
.It Fl in Ar filename
d4410 1
a4410 1
.Ar filename
d4425 1
a4425 1
.It Fl out Ar filename
d4427 1
a4427 1
.Ar filename
d4472 1
a4472 1
.Ar dsa : Ns Ar filename
d4474 2
a4475 2
.Ar filename .
.It Fl key Ar filename
d4486 1
a4486 1
.It Fl keyout Ar filename
d4488 1
a4488 1
.Ar filename
d4501 1
a4501 1
.It Fl config Ar filename
d4635 1
a4635 1
This is the default filename to write a private key to.
d4654 1
a4654 1
This specifies a filename in which random number seed information is
d5069 1
a5069 1
.Op Fl in Ar filename
d5071 1
a5071 1
.Op Fl out Ar filename
d5123 1
a5123 1
.It Fl in Ar filename
d5125 1
a5125 1
.Ar filename
d5136 1
a5136 1
.It Fl out Ar filename
d5138 1
a5138 1
.Ar filename
d5296 1
a5296 1
.It Fl in Ar filename
d5298 1
a5298 1
.Ar filename
d5301 1
a5301 1
.It Fl out Ar filename
d5303 1
a5303 1
.Ar filename
d5458 2
a5459 2
.Op Fl cert Ar filename
.Op Fl key Ar filename
d5461 1
a5461 1
.Op Fl CAfile Ar filename
d5720 1
a5720 1
.Op Fl cert Ar filename
d5722 1
a5722 1
.Op Fl dcert Ar filename
d5724 1
a5724 1
.Op Fl dhparam Ar filename
d5732 1
a5732 1
.Op Fl CAfile Ar filename
d5777 1
a5777 1
If not specified, then the filename
d5783 1
a5783 1
.It Fl dcert Ar filename , Fl dkey Ar keyname
d5804 1
a5804 1
.It Fl dhparam Ar filename
d6012 2
a6013 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d6046 1
a6046 1
.It Fl in Ar filename
d6048 1
a6048 1
.Ar filename
d6050 1
a6050 1
.It Fl out Ar filename
d6052 1
a6052 1
.Ar filename
d6221 1
a6221 1
.It Fl in Ar filename
d6244 1
a6244 1
.It Fl out Ar filename
d6266 1
a6266 1
.It Fl content Ar filename
d6680 2
a6681 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d6702 1
a6702 1
.It Fl in Ar filename
d6704 1
a6704 1
.Ar filename
d6709 1
a6709 1
.It Fl out Ar filename
d6711 1
a6711 1
.Ar filename
d6896 1
a6896 1
If no certificate filenames are included, then an attempt is made to read
d7203 2
a7204 2
.Op Fl in Ar filename
.Op Fl out Ar filename
d7231 1
a7231 1
.Op Fl signkey Ar filename
d7234 2
a7235 2
.Op Fl CA Ar filename
.Op Fl CAkey Ar filename
d7237 1
a7237 1
.Op Fl CAserial Ar filename
d7242 1
a7242 1
.Op Fl extfile Ar filename
d7278 1
a7278 1
.It Fl in Ar filename
d7280 1
a7280 1
.Ar filename
d7282 1
a7282 1
.It Fl out Ar filename
d7284 1
a7284 1
.Ar filename
d7479 1
a7479 1
.It Fl signkey Ar filename
d7549 1
a7549 1
.It Fl CA Ar filename
d7565 1
a7565 1
.It Fl CAkey Ar filename
d7569 1
a7569 1
.It Fl CAserial Ar filename
d7598 1
a7598 1
.It Fl extfile Ar filename
@


1.28
log
@updates for openssl gen{d,r}sa:

- sort options
- document "-out filename" for gendsa
- typos and grammar
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.27 2003/12/21 15:00:41 jmc Exp $
d2768 1
a2768 1
Print debugging statistics about various aspects of the hash table. 
d2937 1
a2939 1
.Op Fl toseq
d2949 1
a2949 1
.Bl -tag -width "XXXX"
d2989 1
a2989 1
It is used by Netscape certificate server for example.
@


1.27
log
@document (lightly) openssl errstr;
feedback from markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.26 2003/12/19 14:52:15 jmc Exp $
d2786 5
a2792 5
.Op Fl engine Ar id
.Oo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Oc
d2806 2
a2807 2
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
d2809 2
a2810 2
These options encrypt the private key with the DES, triple DES,
or the AES ciphers, respectively, before outputting it.
d2812 1
a2812 7
If none of these options is specified, no encryption is used.
.It Fl rand Ar file ...
A file or files containing random data used to seed the random number
generator, or an EGD socket (see
.Xr RAND_egd 3 ) .
Multiple files can be specified separated by a
.Sq \&: .
d2821 4
d2831 6
d2840 1
a2840 1
much quicker that RSA key generation for example.
d2848 2
a2849 2
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
d2851 2
a2854 1
.Op Fl f4 | 3
a2855 1
.Op Fl engine Ar id
d2865 26
d2894 1
a2894 1
If this argument is not specified then standard output is used.
a2901 14
.It Xo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Xc
These options encrypt the private key with the DES, triple DES, or the
AES ciphers, respectively, before outputting it.
If none of these options is specified, no encryption is used.
If encryption is used a pass phrase is prompted for,
if it is not supplied via the
.Fl passout
option.
.It Fl F4 | 3
The public exponent to use, either 65537 or 3.
The default is 65537.
a2908 12
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm genrsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Ar numbits
The size of the private key to generate in bits.
This must be the last option specified.
The default is 512.
d2923 2
a2924 2
Because key generation is a random process the time taken to generate a key
may vary somewhat.
@


1.26
log
@update for openssl enc:

- sort options
- -p and -P also show salt
- expand IV
- remove -salt from the examples which decrypt
- remove an example which doesn't work, and is not really helpful

help from markus@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.25 2003/12/13 20:10:38 jmc Exp $
d2741 4
d2747 23
a2769 1
utility is currently undocumented.
d8139 1
@


1.25
log
@sort options and typos for openssl {dsa,dsaparam};
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.24 2003/11/26 21:17:17 jmc Exp $
d2407 7
d2415 4
a2420 8
.Op Fl salt
.Op Fl nosalt
.Op Fl e
.Op Fl d
.Op Fl a
.Op Fl A
.Op Fl k Ar password
.Op Fl kfile Ar filename
a2421 8
.Op Fl K Ar key
.Op Fl iv Ar IV
.Op Fl p
.Op Fl P
.Op Fl bufsize Ar number
.Op Fl nopad
.Op Fl debug
.Op Fl engine Ar id
d2432 4
a2435 41
.It Fl in Ar filename
The input
.Ar filename ,
standard input by default.
.It Fl out Ar filename
The output
.Ar filename ,
standard output by default.
.It Fl pass Ar arg
The password source.
For more information about the format of
.Ar arg ,
see the
.Sx PASS PHRASE ARGUMENTS
section above.
.It Fl salt
Use a
.Ar salt
in the key derivation routines.
This option should
.Em ALWAYS
be used unless compatibility with previous versions of
.Nm OpenSSL
or
.Nm SSLeay
is required.
This option is only present on
.Nm OpenSSL
versions 0.9.5 or above.
.It Fl nosalt
Don't use a
.Ar salt
in the key derivation routines.
This is the default for compatibility with previous versions of
.Nm OpenSSL
and
.Nm SSLeay .
.It Fl e
Encrypt the input data: this is the default.
.It Fl d
Decrypt the input data.
d2442 21
a2462 22
.It Fl A
If the
.Fl a
option is set, then base64 process the data on one line.
.It Fl k Ar password
The
.Ar password
to derive the key from.
This is for compatibility with previous versions of
.Nm OpenSSL .
Superseded by the
.Fl pass
option.
.It Fl kfile Ar filename
Read the password to derive the key from the first line of
.Ar filename .
This is for compatibility with previous versions of
.Nm OpenSSL .
Superseded by the
.Fl pass
option.
.It Fl S Ar salt
d2464 2
a2465 1
.Ar salt
d2468 11
d2486 1
a2486 1
must additionally specified using the
d2504 36
a2539 2
.It Fl iv Ar IV
The actual
d2541 2
a2542 13
to use:
this must be represented as a string comprised only of hex digits.
When only the
.Ar key
is specified using the
.Fl K
option, the
.Ar IV
must explicitly be defined.
When a password is being specified using one of the other options,
the
.Ar IV
is generated from this password.
a2543 4
Print out the key and
.Ar IV
used.
.It Fl P
d2545 2
a2546 1
.Ar key
d2549 27
a2575 16
used then immediately exit:
don't do any encryption or decryption.
.It Fl bufsize Ar number
Set the buffer size for I/O.
.It Fl nopad
Disable standard block padding.
.It Fl debug
Debug the BIOs used for I/O.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm enc
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d2671 1
a2672 1
des-ecb            DES in ECB mode
d2714 1
a2714 1
.Dl "$ openssl des3 -d -salt -in file.des3 -out file.txt -k mypassword"
d2724 1
a2724 5
.Dl "$ openssl bf -d -salt -a -in file.bf -out file.txt"
.Pp
Decrypt some data using a supplied 40-bit RC4 key:
.Pp
.Dl $ openssl rc4-40 -in file.rc4 -out file.txt -K 0102030405
@


1.24
log
@small update for openssl dsa and sort options;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.23 2003/11/21 15:12:31 jmc Exp $
d2142 2
a2143 2
.Fl des | des3 | aes128 | aes192 |
.Fl aes256
d2147 2
a2156 2
.Op Fl pubin
.Op Fl pubout
d2175 2
a2176 2
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
d2178 2
a2179 2
These options encrypt the private key with the DES, triple DES, or the
AES ciphers, respectively, before outputting it.
d2212 1
a2212 1
the public and private key components, respectively, as ASN.1 INTEGERs.
d2220 1
a2220 1
It consists of the DER format base64
d2306 6
d2313 1
a2314 5
.Op Fl in Ar filename
.Op Fl out Ar filename
.Op Fl noout
.Op Fl text
.Op Fl C
a2315 2
.Op Fl genkey
.Op Fl engine Ar id
d2325 23
d2360 9
a2368 11
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar filename
This specifies the input
.Ar filename
to read parameters from, or standard input if this option is not specified.
If the
.Ar numbits
parameter is included, then this option will be ignored.
d2377 4
a2380 12
.It Fl noout
This option inhibits the output of the encoded version of the parameters.
.It Fl text
This option prints out the DSA parameters in human readable form.
.It Fl C
This option converts the parameters into C code.
The parameters can then be loaded by calling the
.Cm get_dsa Ns Ar XXX Ns Li ()
function.
.It Fl genkey
This option will generate a DSA either using the specified or generated
parameters.
d2387 2
a2388 15
.It Ar numbits
This option specifies that a parameter set should be generated of size
.Ar numbits .
It must be the last option.
If this option is included, then the input file
.Pq if any
is ignored.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm dsaparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
@


1.23
log
@small update for openssl dhparam: sort options and document -check;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.22 2003/10/30 19:12:38 jmc Exp $
d2141 9
d2151 1
a2152 1
.Op Fl in Ar filename
a2153 1
.Op Fl out Ar filename
a2156 8
.Oo
.Fl des | des3 | aes128 | aes192 |
.Fl aes256
.Oc
.Op Fl text
.Op Fl noout
.Op Fl modulus
.Op Fl engine Ar id
d2174 30
d2211 1
a2211 1
p, q, g,
d2223 13
a2239 5
.It Fl in Ar filename
This specifies the input
.Ar filename
to read a key from or standard input if this option is not specified.
If the key is encrypted, a pass phrase will be prompted for.
a2246 9
.It Fl out Ar filename
This specifies the output
.Ar filename
to write a key to, or standard output if not specified.
If any encryption options are set then a pass phrase will be
prompted for.
The output filename should
.Em not
be the same as the input filename.
a2253 23
.It Xo
.Fl des | des3 | aes128 |
.Fl aes192 | aes256
.Xc
These options encrypt the private key with the DES, triple DES, or the
AES ciphers, respectively, before outputting it.
A pass phrase is prompted for.
If none of these options is specified, the key is written in plain text.
This means that using the
.Nm dsa
utility to read in an encrypted key with no encryption option can be used to
remove the pass phrase from a key,
or by setting the encryption options it can be use to add or change
the pass phrase.
These options can only be used with
.Ar PEM
format output files.
.It Fl text
Prints out the public/private key components and parameters.
.It Fl noout
This option prevents output of the encoded version of the key.
.It Fl modulus
This option prints out the value of the public key component of the key.
d2261 2
a2262 8
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm dsa
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
@


1.22
log
@double word, from Tom Cosgrove;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.21 2003/10/30 13:11:40 jmc Exp $
d1989 3
a1991 4
.Op Fl inform Ar DER | PEM
.Op Fl outform Ar DER | PEM
.Op Fl in Ar filename
.Op Fl out Ar filename
d1995 5
a1999 2
.Op Fl C
.Op Fl 2 | 5
a2000 1
.Op Fl engine Ar id
d2010 40
d2061 9
a2069 8
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar filename
This specifies the input
.Ar filename
to read parameters from or standard input if this option is not specified.
d2078 4
a2081 21
.It Fl dsaparam
If this option is used, DSA rather than DH parameters are read or created;
they are converted to DH format.
Otherwise,
.Qq strong
primes
.Pq such that (p-1)/2 is also prime
will be used for DH parameter generation.
.Pp
DH parameter generation with the
.Fl dsaparam
option is much faster,
and the recommended exponent length is shorter,
which makes DH key exchange more efficient.
Beware that with such DSA-style DH parameters,
a fresh DH key should be created for each use to
avoid small-subgroup attacks that may be possible otherwise.
.It Fl 2 , 5
The generator to use, either 2 or 5.
2 is the default.
If present, then the input file is ignored and parameters are generated instead.
a2087 9
.It Ar numbits
This argument specifies that a parameter set should be generated of size
.Ar numbits .
It must be the last option.
If not present, then a value of 512 is used.
If this value is present, then the input file is ignored and
parameters are generated instead.
.It Fl noout
This option inhibits the output of the encoded version of the parameters.
a2089 13
.It Fl C
This option converts the parameters into C code.
The parameters can then be loaded by calling the
.Cm get_dh Ns Ar numbits Ns Li ()
function.
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm dhparam
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
@


1.21
log
@small update for DGST;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.20 2003/10/26 15:16:13 jmc Exp $
d5838 1
a5838 1
This option enables a further workaround for some some early Netscape
@


1.20
log
@update for crl and crl2pkcs7;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.19 2003/10/24 09:41:52 jmc Exp $
d332 2
a333 2
.It Cm rmd160
RMD-160 Digest.
d440 1
a441 1
.Op Fl dump
d1315 1
a1315 1
.Op Fl hv
d1317 1
d1869 2
a1870 2
.Fl md5 | md4 | md2 | sha1 |
.Fl sha | ripemd160 | dss1
d1872 1
d1876 2
a1877 1
.Op Fl binary
a1878 2
.Op Fl sign Ar filename
.Op Fl verify Ar filename
d1881 1
d1883 1
a1883 2
.Op Fl engine Ar id
.Op Fl keyform Ar PEM | ENGINE
d1889 2
a1890 2
.Cm md5 | md4 | md2 | sha1 |
.Cm sha | ripemd160
d1904 3
a1906 1
.Bl -tag -width "XXXX"
d1913 8
d1926 2
a1927 2
.It Fl binary
Output the digest or signature in binary form.
d1930 2
a1931 5
.It Fl sign Ar filename
Digitally sign the digest using the private key in
.Ar filename .
.It Fl verify Ar filename
Verify the signature using the public key in
a1936 3
.It Fl prverify Ar filename
Verify the signature using the private key in
.Ar filename .
d1943 3
d1948 7
a1954 10
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm dgst
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
.It Fl keyform Ar PEM | ENGINE
Key file format.
@


1.19
log
@small update for CIPHERS;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.18 2003/10/22 16:05:06 jmc Exp $
d1671 1
a1671 1
.Ar COMPLENTOFALL
d1681 1
a1681 6
.Op Fl inform Ar DER | PEM
.Op Fl outform Ar DER | PEM
.Op Fl text
.Op Fl in Ar filename
.Op Fl out Ar filename
.Op Fl noout
a1682 1
.Op Fl fingerprint
d1686 2
d1690 4
d1706 18
a1730 19
.It Fl outform Ar DER | PEM
This specifies the output format; the options have the same meaning as the
.Fl inform
option.
.It Fl in Ar filename
This specifies the input filename to read from or standard input if this
option is not specified.
.It Fl out Ar filename
Specifies the output filename to write to, or standard output by
default.
.It Fl text
Print out the CRL in text form.
.It Fl noout
Don't output the encoded version of the CRL.
.It Fl hash
Output a hash of the issuer name.
This can be used to look up CRLs in a directory by issuer name.
.It Fl fingerprint
Print the CRL fingerprint.
d1741 11
a1751 10
.It Fl CAfile Ar file
Verify the signature on a CRL by looking up the issuing certificate in
.Ar file .
.It Fl CApath Ar dir
Verify the signature on a CRL by looking up the issuing certificate in
.Ar dir .
This directory must be a standard certificate directory,
i.e. a hash of each subject name (using
.Cm x509 Fl hash )
should be linked to each certificate.
d1771 1
a1771 1
.Dl $ openssl crl -in crl.der -text -noout
d1780 4
d1785 1
d1787 1
a1787 4
.Op Fl in Ar filename
.Op Fl out Ar filename
.Op Fl certfile Ar filename
.Op Fl nocrl
d1798 13
d1818 8
a1832 21
.It Fl in Ar filename
This specifies the input
.Ar filename
to read a CRL from or standard input if this option is not specified.
.It Fl out Ar filename
Specifies the output
.Ar filename
to write the PKCS#7 structure to or standard output by default.
.It Fl certfile Ar filename
Specifies a
.Ar filename
containing one or more certificates in
.Ar PEM
format.
All certificates in the file will be added to the PKCS#7 structure.
This option can be used more than once to read certificates from multiple
files.
.It Fl nocrl
Normally, a CRL is included in the output file.
With this option, no CRL is
included in the output file and a CRL is not read from the input file.
@


1.18
log
@- slight update and sort options for CA section
- remove some unnecessary .Ns's
- typos
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.17 2003/10/08 08:37:50 jmc Exp $
d1315 1
a1315 1
.Op Fl v
d1320 1
a1320 1
.Nm cipherlist
d1327 9
a1335 1
.Bl -tag -width "XXXX"
a1348 8
.It Fl ssl2
Only include SSL v2 ciphers.
.It Fl ssl3
Only include SSL v3 ciphers.
.It Fl tls1
Only include TLS v1 ciphers.
.It Fl h , \&?
Print a brief usage message.
d1442 1
a1442 1
All ciphers suites except the
d1465 1
a1465 1
40-bit export encryption algorithms
d1471 1
a1471 1
ciphers; that is those offering no encryption.
@


1.17
log
@cleanup of PASS PHRASE ARGUMENTS and ASN1PARSE;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.16 2003/10/04 22:38:58 jmc Exp $
d595 8
d604 1
d606 3
a608 3
.Op Fl name Ar section
.Op Fl gencrl
.Op Fl revoke Ar file
a609 4
.Op Fl crl_hold Ar instruction
.Op Fl crl_compromise Ar time
.Op Fl crl_CA_compromise Ar time
.Op Fl subj Ar arg
d611 1
d613 1
a613 2
.Op Fl crlexts Ar section
.Op Fl startdate Ar date
d615 5
a619 3
.Op Fl days Ar arg
.Op Fl md Ar arg
.Op Fl policy Ar arg
d622 2
a623 4
.Op Fl key Ar arg
.Op Fl passin Ar arg
.Op Fl cert Ar file
.Op Fl in Ar file
a624 1
.Op Fl notext
d626 3
a628 1
.Op Fl infiles
d631 1
a631 6
.Op Fl preserveDN
.Op Fl noemailDN
.Op Fl batch
.Op Fl msie_hack
.Op Fl extensions Ar section
.Op Fl extfile Ar section
d633 1
a633 2
.Op Fl updatedb
.Op Fl engine Ar id
d646 6
d654 69
d731 13
a743 15
.It Fl in Ar filename
An input
.Ar filename
containing a single certificate request to be signed by the CA.
.It Fl ss_cert Ar filename
A single self-signed certificate to be signed by the CA.
.It Fl spkac Ar filename
A file containing a single Netscape signed public key and challenge,
and additional field values to be signed by the CA.
See the
.Sx SPKAC FORMAT
section for information on the required format.
.It Fl infiles
If present, this should be the last option; all subsequent arguments
are assumed to be the names of files containing certificate requests.
a755 14
.It Fl cert
The CA certificate file.
.It Fl keyfile Ar filename
The private key to sign requests with.
.It Fl keyform Ar PEM | ENGINE
Private key file format.
.It Fl key Ar password
The password used to encrypt the private key.
Since on some systems the command line arguments are visible
(e.g.\&
.Ux
with the
.Xr ps 1
utility) this option should be used with caution.
a762 21
.It Fl verbose
This prints extra details about the operations being performed.
.It Fl notext
Don't output the text form of a certificate to the output file.
.It Fl startdate Ar date
This allows the start date to be explicitly set.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN1 UTCTime structure .
.It Fl enddate Ar date
This allows the expiry date to be explicitly set.
The format of the date is YYMMDDHHMMSSZ
.Pq the same as an ASN1 UTCTime structure .
.It Fl days Ar arg
The number of days to certify the certificate for.
.It Fl md Ar alg
The message digest to use.
Possible values include
.Ar md5
and
.Ar sha1 .
This option also applies to CRLs.
a771 11
.It Fl msie_hack
This is a legacy option to make
.Nm ca
work with very old versions of the IE certificate enrollment control
.Qq certenr3 .
It used UniversalStrings for almost everything.
Since the old control has various security bugs,
its use is strongly discouraged.
The newer control
.Qq Xenroll
does not need this option.
d780 12
a791 33
.It Fl noemailDN
The DN of a certificate can contain the EMAIL field if present in the
request DN, however it is good policy just having the e-mail set into
the
.Em altName
extension of the certificate.
When this option is set, the EMAIL field is removed from the certificate's
subject and set only in the, eventually present, extensions.
The
.Ar email_in_dn
keyword can be used in the configuration file to enable this behaviour.
.It Fl batch
This sets the batch mode.
In this mode no questions will be asked
and all certificates will be certified automatically.
.It Fl extensions Ar section
The section of the configuration file containing certificate extensions
to be added when a certificate is issued (defaults to
.Em x509_extensions
unless the
.Fl extfile
option is used).
If no extension section is present, then a V1 certificate is created.
If the extension section is present
.Pq even if it is empty ,
then a V3 certificate is created.
.It Fl extfile Ar file
An additional configuration
.Ar file
to read certificate extensions from
(using the default section unless the
.Fl extensions
option is also used).
d797 2
a798 8
.It Fl engine Ar id
Specifying an engine (by it's unique
.Ar id
string) will cause
.Nm ca
to attempt to obtain a functional reference to the specified engine,
thus initialising it if needed.
The engine will then be set as the default for all available algorithms.
d802 17
a818 13
.It Fl gencrl
This option generates a CRL based on information in the index file.
.It Fl crldays Ar num
The number of days before the next CRL is due.
This is the days from now to place in the CRL
.Em nextUpdate
field.
.It Fl crlhours Ar num
The number of hours before the next CRL is due.
.It Fl revoke Ar filename
A
.Ar filename
containing a certificate to revoke.
d831 5
a835 27
.It Fl crl_hold Ar instruction
This sets the CRL revocation reason code to certificateHold and the hold
instruction to
.Ar instruction
which must be an OID.
Although any OID can be used, only holdInstructionNone
(the use of which is discouraged by RFC 2459), holdInstructionCallIssuer or
holdInstructionReject will normally be used.
.It Fl crl_compromise Ar time
This sets the revocation reason to keyCompromise and the compromise time to
.Ar time .
.Ar time
should be in GeneralizedTime format, i.e. YYYYMMDDHHMMSSZ.
.It Fl crl_CA_compromise Ar time
This is the same as
.Fl crl_compromise ,
except the revocation reason is set to CACompromise.
.It Fl subj Ar arg
Supersedes the subject name given in the request.
The
.Ar arg
must be formatted as
.Ar /type0=value0/type1=value1/type2=... ;
characters may be escaped by
.Sq \e
.Pq backslash ,
no spaces are skipped.
d850 18
a905 19
.It Ar oid_file
This specifies a file containing additional OBJECT IDENTIFIERS.
Each line of the file should consist of the numerical form of the
object identifier followed by whitespace, then the short name followed
by whitespace and finally the long name.
.It Ar oid_section
This specifies a section in the configuration file containing extra
object identifiers.
Each line should consist of the short name of the object identifier
followed by
.Sq =
and the numerical form.
The short and long names are the same when this option is used.
.It Ar new_certs_dir
The same as the
.Fl outdir
command line option.
It specifies the directory where new certificates will be placed.
Mandatory.
d911 26
a936 5
.It Ar private_key
Same as the
.Fl keyfile
option.
The file containing the CA private key.
d938 9
a946 4
.It Ar RANDFILE
A file used to read and write random number seed information,
or an EGD socket (see
.Xr RAND_egd 3 ) .
a951 6
.It Ar default_startdate
The same as the
.Fl startdate
option.
The start date to certify a certificate for.
If not set, the current time is used.
a959 8
.It Ar default_crl_hours default_crl_days
The same as the
.Fl crlhours
and the
.Fl crldays
options.
These will only be used if neither command line option is present.
At least one of these must be present to generate a CRL.
d966 6
a971 17
.It Ar database
The text database file to use.
Mandatory.
This file must be present, though initially it will be empty.
.It Ar serial
A text file containing the next serial number to use in hex.
Mandatory.
This file must be present and contain a valid serial number.
.It Ar x509_extensions
The same as
.Fl extensions .
.It Ar crl_extensions
the same as
.Fl crlexts .
.It Ar preserve
The same as
.Fl preserveDN .
a982 7
.It Ar policy
The same as
.Fl policy .
Mandatory.
See the
.Sx CA POLICY FORMAT
section for more information.
d1013 23
a1035 14
.It Ar copy_extensions
Determines how extensions in certificate requests should be handled.
If set to
.Ar none
or this option is not present, then extensions are
ignored and not copied to the certificate.
If set to
.Ar copy ,
then any extensions present in the request that are not already present
are copied to the certificate.
If set to
.Ar copyall ,
then all extensions in the request are copied to the certificate:
if the extension is already present in the certificate it is deleted first.
d1037 22
a1058 6
.Sx CA WARNINGS
section before using this option.
.Pp
The main use of this option is to allow a certificate request to supply
values for certain extensions such as
.Em subjectAltName .
d1192 1
a1192 1
/usr/local/ssl/lib/openssl.cnf - master configuration file
d1729 1
a1729 1
This can be used to lookup CRLs in a directory by issuer name.
d2987 1
a2987 1
.Ar hostname Ns : Ns Ar port
d3121 1
a3121 1
.Fl host Ar hostname Ns : Ns Ar port ,
d4314 1
a4314 1
.Ar rsa Ns : Ns Ar bits
d4319 1
a4319 1
.Ar dsa Ns : Ns Ar file
d4426 1
a4426 1
.Ar rsa Ns : Ns Ar nbits ,
d4432 1
a4432 1
.Ar dsa Ns : Ns Ar filename
d5415 1
a5415 1
.Fl connect Ar host Ns : Ns Ar port
d5459 1
a5459 1
.Fl connect Ar host Ns : Ns Ar port
d6620 1
a6620 1
Produce machine readable ouput.
d7308 1
a7308 1
Ouput the public key.
@


1.16
log
@remove my wacky spacing; some typos from 0.97c;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.15 2003/09/02 18:56:35 jmc Exp $
d390 3
a392 3
If no password argument is given and a password is required then the user is
prompted to enter one: this will typically be read from the current
terminal with echoing turned off.
d394 1
a394 1
.It Ar pass Ns : Ns Ar password
d403 1
a403 1
.It Ar env Ns : Ns Ar var
d412 1
a412 1
.It Ar file Ns : Ns Ar pathname
d427 1
a427 1
.It Ar fd Ns : Ns Ar number
d438 1
a438 1
.Nm "openssl asn1parse"
a439 6
.Op Fl inform Ar DER | PEM | TXT
.Op Fl in Ar filename
.Op Fl out Ar filename
.Op Fl noout
.Op Fl offset Ar number
.Op Fl length Ar number
d442 1
d444 4
d449 1
d459 13
a471 1
.Bl -tag -width "XXXX"
d475 1
d478 2
a479 2
.Pq the default
is base64 encoded.
d482 2
a483 10
.It Fl in Ar filename
The input file; default is standard input.
.It Fl out Ar filename
Output file to place the
.Em DER
encoded data into.
If this option is not present then no data will be output.
This is most useful when combined with the
.Fl strparse
option.
a487 12
.It Fl length Ar number
Number of bytes to parse; default is until end of file.
.It Fl i
Indents the output according to the
.Qq depth
of the structures.
.It Fl dump
Dump unknown data in hex form.
.It Fl dlimit Ar number
Dump the first
.Ar number
bytes of unknown data in hex form.
d489 1
a489 1
A file containing additional OBJECT IDENTIFIERs
d494 8
d503 1
a503 1
Parse the contents octets of the ASN.1 object starting at
d511 2
a512 2
.Bd -literal
  0:d=0  hl=4 l= 681 cons: SEQUENCE
d516 10
a525 10
  229:d=3  hl=3 l= 141 prim: BIT STRING
  373:d=2  hl=3 l= 162 cons: cont [ 3 ]
  376:d=3  hl=3 l= 159 cons: SEQUENCE
  379:d=4  hl=2 l=  29 cons: SEQUENCE
  381:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Subject Key Identifier
  386:d=5  hl=2 l=  22 prim: OCTET STRING
  410:d=4  hl=2 l= 112 cons: SEQUENCE
  412:d=5  hl=2 l=   3 prim: OBJECT        :X509v3 Authority Key Identifier
  417:d=5  hl=2 l= 105 prim: OCTET STRING
  524:d=4  hl=2 l=  12 cons: SEQUENCE
d540 1
a540 1
gives the length of the contents octets.
d548 2
a549 2
In this example the BIT STRING at offset 229 is the certificate public key.
The contents octets of this will contain the public key information.
d554 6
a559 3
\&    0:d=0  hl=3 l= 137 cons: SEQUENCE
\&    3:d=1  hl=3 l= 129 prim: INTEGER           :E5D21E1F5C8D208EA7A2166C7FAF9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9E1158A56E4A6F47E5897
\&  135:d=1  hl=2 l=   3 prim: INTEGER           :010001
d562 3
a564 1
If an OID is not part of
d572 1
a572 1
Each line consists of three columns;
d584 1
a584 1
.Dl \&"1.2.3.4	shortName	A long name\&"
@


1.15
log
@escape punctuation; (and a nit in openssl.1)
ok deraadt@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.14 2003/08/31 14:03:22 jmc Exp $
a127 1
.Bk -words
d130 1
a130 1
.Cm \	\&\ \&\ \&\ \&\ \&list-cipher-commands
a131 1
.Ek
d971 1
a971 1
.It Ar serialfile
d1020 1
a1020 1
.Em default_ca
d1168 2
a1169 2
\& nameopt        = default_ca            # Subject name display option
\& certopt        = default_ca            # Certificate display option
d5565 4
a5568 2
Currently, the only supported keyword is
.Qq smtp .
@


1.14
log
@add FILES and SEE ALSO sections;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.13 2003/08/30 17:37:44 jmc Exp $
d373 1
a373 1
Triple-DES Cipher.
@


1.13
log
@spacing;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.12 2003/08/30 17:30:54 jmc Exp $
d8073 86
@


1.12
log
@- sync SYNOPSIS(es) and ciphers/digests available with reality
- remove non-OBSD details
- indent examples
- general macro/punctuation cleanup
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.10 2003/07/16 09:05:58 jmc Exp $
d129 1
a129 1
.Oo Cm list-standard-commands Li |\ \&
d173 1
a173 1
.Po Cm command\ \&
d176 1
a176 2
above
.Pc ,
d178 1
a178 1
.Po Ar command_opts\ \&
d182 1
a182 2
.Sx SYNOPSIS
.Pc .
@


1.11
log
@refer to RFCs consistently (RFC XXXX);
@
text
@d131 1
a131 1
.Cm \  \  \  \  list-cipher-commands
d141 4
a144 2
(SSL v2/v3) and Transport Layer Security (TLS v1) network protocols and
related cryptography standards required by them.
d155 1
a155 1
.Bl -bullet -compact
d190 4
a193 3
output a list (one entry per line) of the names
of all standard commands, message digest commands, or cipher commands,
respectively, that are available in the present
d204 3
a206 1
it returns 0 (success) and prints
d234 3
a236 1
Certificate Authority (CA) Management.
d240 3
a242 1
Certificate Revocation List (CRL) Management.
d270 1
a270 1
Create or examine a netscape certificate sequence.
d284 3
a286 1
X.509 Certificate Signing Request (CSR) Management.
d332 2
a335 2
.It Cm mdc2
MDC2 Digest.
d344 5
a348 1
.Bl -tag -width "asn1parse"
d351 5
a355 1
.It Cm bf bf-cbc bf-cfb bf-ecb bf-ofb
d357 2
a358 1
.It Cm cast cast-cbc
d360 2
a361 1
.It Cm cast5-cbc cast5-cfb cast5-ecb cast5-ofb
d363 6
a368 2
.It Cm des des-cbc des-cfb des-ecb des-ede des-ede-cbc
.It Cm des-ede-cfb des-ede-ofb des-ofb
d370 5
a374 1
.It Cm des3 desx des-ede3 des-ede3-cbc des-ede3-cfb des-ede3-ofb
d376 5
a380 3
.It Cm idea idea-cbc idea-cfb idea-ecb idea-ofb
IDEA Cipher.
.It Cm rc2 rc2-cbc rc2-cfb rc2-ecb rc2-ofb
d382 2
a383 1
.It Cm rc4
a384 2
.It Cm rc5 rc5-cbc rc5-cfb rc5-ecb rc5-ofb
RC5 Cipher.
d398 1
a398 1
.It Ar pass:password
d404 4
a407 2
under Unix) this form should only be used where security is not important.
.It Ar env:var
d411 1
a411 1
(e.g.
d413 4
a416 2
under certain Unix OSes) this option should be used with caution.
.It Ar file:pathname
d425 1
a425 1
.Fl passout
d431 1
a431 1
.It Ar fd:number
d443 2
a444 1
.Op Fl inform Ar PEM|DER
d451 2
d455 1
d464 1
a464 1
.It Fl inform Ar DER|PEM
d469 4
a472 1
(the default) is base64 encoded.
d490 9
a498 1
Indents the output according to the "depth" of the structures.
d500 2
a501 1
A file containing additional OBJECT IDENTIFIERs (OIDs).
d508 3
a510 1
This option can be used multiple times to "drill down" into a nested structure.
d523 1
a523 1
  381:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
d526 1
a526 1
  412:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier
d539 3
a541 1
gives the header length (tag and length octets) of the current type.
d565 2
a566 1
numerical form (for example 1.2.3.4).
d570 1
a570 1
Each line consists of three columns,
d573 5
a577 3
The second column is the "short name" which is a single word followed
by whitespace.
The final column is the rest of the line and is the "long name".
d582 1
a582 1
"1.2.3.4	shortName	A long name"
d585 2
a586 1
The output of some ASN.1 types is not well handled (if at all).
d612 1
d629 2
d678 3
a680 1
serial number in hex with ".pem" appended.
d685 2
d690 3
a692 1
(e.g. Unix with the
d698 1
a698 1
.Ar arg
d709 1
a709 1
(the same as an ASN1 UTCTime structure).
d713 1
a713 1
(the same as an ASN1 UTCTime structure).
d719 1
a719 1
.Ar md5 , sha1
d721 1
a721 1
.Ar mdc2 .
d724 3
a726 1
This option defines the CA "policy" to use.
d736 1
a736 1
"certenr3".
d740 3
a742 1
The newer control "Xenroll" does not need this option.
d744 1
a744 1
Normally the DN order of a certificate is the same as the order of the
d757 1
a757 1
When this option is set the EMAIL field is removed from the certificate's
d774 2
a775 1
If the extension section is present (even if it is empty),
d784 5
d793 1
a793 1
.Nm req
d823 1
a823 1
In practive removeFromCRL is not particularly useful because it is only used
d848 4
a851 1
characters may be escaped by \e (backslash), no spaces are skipped.
d857 2
a858 1
if the CRL extension section is present (even if it is empty)
d863 2
a864 1
It should be noted that some software (for example Netscape)
d886 5
a890 3
  RANDFILE
  preserve
  msie_hack
d900 3
a902 1
the configuration file or the command line equivalent (if any) used.
d914 1
a914 1
.Cm =
d955 2
a956 1
(or the command line equivalents) must be present.
d992 3
a994 2
simply set this to 'no'.
If not present the default is to allow for the EMAIL field in the
d1023 1
a1023 1
For convenience the values
d1025 1
a1025 1
are accepted by both to produce a reasonable output.
d1027 1
a1027 1
If neither option is present the format used in earlier versions of
d1043 1
a1043 1
.Ar copy
d1047 1
a1047 1
.Ar copyall
d1061 9
a1069 4
If the value is "match" then the field value
must match the same field in the CA certificate.
If the value is "supplied" then it must be present.
If the value is "optional" then it may be present.
d1088 3
a1090 2
If it's necessary to include the same component twice then it can be
preceded by a number and a '.'.
d1113 3
a1115 1
would be created containing, for example, "01" and the empty index file
d1120 1
a1120 1
\& $ openssl ca -in req.pem -out newcert.pem
d1124 1
a1124 1
\& $ openssl ca -in req.pem -extensions v3_ca -out newcert.pem
d1128 1
a1128 1
\& $ openssl ca -gencrl -out crl.pem
d1132 1
a1132 1
\& $ openssl ca -infiles req1.pem req2.pem req3.pem
d1136 1
a1136 1
\& $ openssl ca -spkac spkac.txt
d1138 8
a1145 7
A sample SPKAC file (the SPKAC line has been truncated for clarity):
.Bd -literal
\& SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK2A5
\& CN=Steve Test
\& emailAddress=steve@@openssl.org
\& 0.OU=OpenSSL Group
\& 1.OU=Another Group
d1153 1
a1153 1
.Pp
d1155 1
a1155 1
.Pp
d1159 1
a1159 1
.Pp
d1164 1
a1164 1
.Pp
d1168 1
a1168 1
.Pp
d1171 1
a1171 1
.Pp
d1174 2
a1175 2
\& copy_extensions = none                 # Don't copy extensions from request
.Pp
d1187 1
a1187 1
configuration file entries, environment variables or command line options.
d1189 1
a1189 1
.Bd -literal
d1202 1
a1202 1
.Em OPENSSL_CONF
d1233 2
a1234 1
(perl script or GUI) can handle things properly.
d1275 1
a1275 1
If care is not taken then it can be a security risk.
d1305 1
a1305 1
\& basicConstraints = CA:TRUE, pathlen:0
d1314 2
a1315 4
.Op Fl ssl2
.Op Fl ssl3
.Op Fl tls1
.Op Cm cipherlist
d1329 3
a1331 3
(SSLv2 or SSLv3; the latter includes TLS), key exchange,
authentication, encryption and mac algorithms used along with any key size
restrictions and whether the algorithm is classed as an
d1339 2
a1342 2
.It Fl ssl2
Only include SSL v2 ciphers.
d1345 1
a1345 1
.It Fl h , ?
d1347 1
a1347 1
.It Fl cipherlist
d1376 1
a1376 1
.Cm +
d1386 2
a1387 1
.Cm ! , -
d1389 1
a1389 1
.Cm + .
d1392 1
a1392 1
.Cm !
d1398 1
a1398 1
.Cm -
d1403 1
a1403 1
.Cm +
d1409 1
a1409 1
If the list includes any ciphers already present they will be ignored;
d1412 1
a1412 1
Additionally the cipher string
d1449 2
a1450 1
"High" encryption cipher suites.
d1453 2
a1454 1
"Medium" encryption cipher suites, currently those using 128 bit encryption.
d1456 2
a1457 1
"Low" encryption cipher suites, currently those using 64 or 56 bit encryption
d1461 1
a1461 1
Including 40 and 56 bits algorithms.
d1463 1
a1463 1
40 bit export encryption algorithms
d1465 1
a1465 1
56 bit export encryption algorithms.
d1467 4
a1470 2
The "NULL" ciphers; that is those offering no encryption.
Because these offer no encryption at all and are a security risk
d1475 3
a1477 2
These cipher suites are vulnerable to a "man in the middle"
attack and so their use is normally discouraged.
d1495 1
a1495 1
Ciphers suites using FORTEZZA key exchange, authentication, encryption
d1509 2
a1510 1
Cipher suites using DES (not triple DES).
a1514 2
.It Ar IDEA
Cipher suites using IDEA.
d1528 72
a1599 80
.Pp
.Sy "SSL v3.0 cipher suites"
.Bd -literal
 SSL_RSA_WITH_NULL_MD5                   NULL-MD5
 SSL_RSA_WITH_NULL_SHA                   NULL-SHA
 SSL_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
 SSL_RSA_WITH_RC4_128_MD5                RC4-MD5
 SSL_RSA_WITH_RC4_128_SHA                RC4-SHA
 SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
 SSL_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
 SSL_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
 SSL_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
 SSL_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA
.Ed
.Bd -literal
 SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
 SSL_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
 SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
 SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
 SSL_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
 SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
 SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
 SSL_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
 SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
 SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
 SSL_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
 SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA
.Ed
.Bd -literal
 SSL_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
 SSL_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
 SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
 SSL_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
 SSL_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
.Ed
.Bd -literal
 SSL_FORTEZZA_KEA_WITH_NULL_SHA          Not implemented.
 SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA  Not implemented.
 SSL_FORTEZZA_KEA_WITH_RC4_128_SHA       Not implemented.
.Ed
.Pp
.Sy "TLS v1.0 cipher suites"
.Bd -literal
 TLS_RSA_WITH_NULL_MD5                   NULL-MD5
 TLS_RSA_WITH_NULL_SHA                   NULL-SHA
 TLS_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
 TLS_RSA_WITH_RC4_128_MD5                RC4-MD5
 TLS_RSA_WITH_RC4_128_SHA                RC4-SHA
 TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
 TLS_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
 TLS_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
 TLS_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
 TLS_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA
.Ed
.Bd -literal
 TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
 TLS_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
 TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
 TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
 TLS_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
 TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
 TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
 TLS_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
 TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
 TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
 TLS_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
 TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA
.Ed
.Bd -literal
 TLS_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
 TLS_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
 TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
 TLS_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
 TLS_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
.Ed
.Pp
.Sy "AES ciphersuites from RFC 3268, extending TLS v1.0"
.Bd -literal
 TLS_RSA_WITH_AES_128_CBC_SHA            AES128-SHA
 TLS_RSA_WITH_AES_256_CBC_SHA            AES256-SHA
d1601 4
a1604 4
 TLS_DH_DSS_WITH_AES_128_CBC_SHA         DH-DSS-AES128-SHA
 TLS_DH_DSS_WITH_AES_256_CBC_SHA         DH-DSS-AES256-SHA
 TLS_DH_RSA_WITH_AES_128_CBC_SHA         DH-RSA-AES128-SHA
 TLS_DH_RSA_WITH_AES_256_CBC_SHA         DH-RSA-AES256-SHA
d1606 4
a1609 4
 TLS_DHE_DSS_WITH_AES_128_CBC_SHA        DHE-DSS-AES128-SHA
 TLS_DHE_DSS_WITH_AES_256_CBC_SHA        DHE-DSS-AES256-SHA
 TLS_DHE_RSA_WITH_AES_128_CBC_SHA        DHE-RSA-AES128-SHA
 TLS_DHE_RSA_WITH_AES_256_CBC_SHA        DHE-RSA-AES256-SHA
d1611 2
a1612 2
 TLS_DH_anon_WITH_AES_128_CBC_SHA        ADH-AES128-SHA
 TLS_DH_anon_WITH_AES_256_CBC_SHA        ADH-AES256-SHA
d1614 1
a1614 3
.Pp
.Sy "Additional Export 1024 and other cipher suites"
.Pp
d1617 16
a1632 17
.Bd -literal
 TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA     EXP1024-DES-CBC-SHA
 TLS_RSA_EXPORT1024_WITH_RC4_56_SHA      EXP1024-RC4-SHA
 TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA EXP1024-DHE-DSS-DES-CBC-SHA
 TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA  EXP1024-DHE-DSS-RC4-SHA
 TLS_DHE_DSS_WITH_RC4_128_SHA            DHE-DSS-RC4-SHA
.Ed
.Pp
.Sy "SSL v2.0 cipher suites"
.Bd -literal
 SSL_CK_RC4_128_WITH_MD5                 RC4-MD5
 SSL_CK_RC4_128_EXPORT40_WITH_MD5        EXP-RC4-MD5
 SSL_CK_RC2_128_CBC_WITH_MD5             RC2-MD5
 SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5    EXP-RC2-MD5
 SSL_CK_IDEA_128_CBC_WITH_MD5            IDEA-CBC-MD5
 SSL_CK_DES_64_CBC_WITH_MD5              DES-CBC-MD5
 SSL_CK_DES_192_EDE3_CBC_WITH_MD5        DES-CBC3-MD5
d1648 1
a1648 1
\& $ openssl ciphers -v 'ALL:eNULL'
d1653 1
a1653 1
\& $ openssl ciphers -v 'ALL:!ADH:@@STRENGTH'
d1657 1
a1657 1
\& $ openssl ciphers -v '3DES:+RSA'
d1661 1
a1661 1
\& $ openssl ciphers -v 'RC4:!COMPLEMENTOFDEFAULT'
d1666 1
a1666 1
\& $ openssl ciphers -v 'RSA:!COMPLEMENTOFALL'
d1678 3
a1680 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d1686 1
d1692 1
d1704 1
a1704 1
.It Fl inform Ar DER|PEM
d1707 1
a1707 1
format is DER encoded CRL structure.
d1709 3
a1711 3
(the default) is a base64 encoded version of the DER form with header
and footer lines.
.It Fl outform Ar DER|PEM
d1728 2
d1753 3
a1755 3
.Bd -literal
\& -----BEGIN X509 CRL-----
\& -----END X509 CRL-----
d1763 1
a1763 1
\& $ openssl crl -in crl.pem -outform DER -out crl.der
d1769 1
a1769 1
\& $ openssl crl -in crl.der -text -noout
d1771 1
a1771 1
Ideally it should be possible to create a CRL using appropriate options
d1778 2
a1779 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d1789 2
a1790 1
"certificates only" structure.
d1794 1
a1794 1
.It Fl inform Ar DER|PEM
d1797 1
a1797 1
format is DER encoded CRL structure.
d1799 3
a1801 3
(the default) is a base64 encoded version of the DER form with header
and footer lines.
.It Fl outform Ar DER|PEM
d1804 1
a1804 1
format is DER encoded PKCS#7 structure.
d1806 2
a1807 2
(the default) is a base64 encoded version of the DER form with header
and footer lines.
d1823 1
a1823 1
This option can be used more than once to read certificates form multiple
d1826 1
a1826 1
Normally a CRL is included in the output file.
d1833 1
a1833 1
\& $ openssl crl2pkcs7 -in crl.pem -certfile cert.pem -out p7.pem
d1835 1
a1835 1
Creates a PKCS#7 structure in
d1839 3
a1841 3
.Bd -literal
\& $ openssl crl2pkcs7 -nocrl -certfile newcert.pem
\&         -certfile demoCA/cacert.pem -outform DER -out p7.der
d1862 5
a1866 1
.Op Cm -md5|-md4|-md2|-sha1|-sha|-mdc2|-ripemd160|-dss1
d1877 2
d1880 1
d1882 5
a1886 1
.Cm md5|md4|md2|sha1|sha|mdc2|ripemd160
d1901 1
a1901 1
Print out the digest in two digit groups separated by colons, only relevant if
d1908 2
a1909 1
This is the default case for a "normal"
d1921 4
a1924 1
The output is either "Verification OK" or "Verification Failure".
d1929 1
a1929 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number
d1932 2
a1933 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d1936 10
d1954 1
a1954 1
If you wish to sign or verify data using the DSA algorithm then the dss1
d1966 2
a1967 1
Diffie-Hellman Parameter Management. The
d1980 2
a1981 2
.Op Fl inform Ar DER|PEM
.Op Fl outform Ar DER|PEM
d1988 1
a1988 2
.Op Fl 2
.Op Fl 5
d2000 1
a2000 1
.It Fl inform Ar DER|PEM
d2011 2
a2012 2
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d2030 4
a2033 1
Otherwise, "strong" primes (such that (p-1)/2 is also prime)
d2047 1
a2047 1
If present then the input file is ignored and parameters are generated instead.
d2049 1
a2049 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number generator,
d2052 2
a2053 8
Multiple files can be specified, separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d2059 1
a2059 1
If this value is present then the input file is ignored and
d2074 1
a2074 1
.Nm req
d2100 3
a2102 3
.Bd -literal
\& -----BEGIN DH PARAMETERS-----
\& -----END DH PARAMETERS-----
d2129 2
a2130 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d2135 6
a2140 3
.Op Fl des
.Op Fl des3
.Op Fl idea
a2143 2
.Op Fl pubin
.Op Fl pubout
d2162 1
a2162 1
.It Fl inform Ar DER|PEM
d2167 4
a2170 2
SEQUENCE consisting of the values of version (currently zero), p, q, g,
the public and private key components respectively as ASN.1 INTEGERs.
d2173 1
a2173 2
structure:
It is an error if the key is not DSA.
d2181 2
a2182 2
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d2189 1
a2189 1
If the key is encrypted a pass phrase will be prompted for.
d2193 1
a2193 1
.Ar arg
d2209 1
a2209 1
.Ar arg
d2213 4
a2216 1
.It Cm -des|-des3|-idea
d2218 1
a2218 1
IDEA ciphers, respectively, before outputting it.
d2231 1
a2231 1
Prints out the public, private key components and parameters.
d2237 1
a2237 1
By default a private key is read from the input file.
d2240 1
a2240 1
By default a private key is output.
d2247 1
a2247 1
.Nm req
d2256 3
a2258 3
.Bd -literal
\& -----BEGIN DSA PRIVATE KEY-----
\& -----END DSA PRIVATE KEY-----
d2264 3
a2266 3
.Bd -literal
\& -----BEGIN PUBLIC KEY-----
\& -----END PUBLIC KEY-----
d2271 1
a2271 1
\& $ openssl dsa -in key.pem -out keyout.pem
d2275 1
a2275 1
\& $ openssl dsa -in key.pem -des3 -out keyout.pem
d2279 1
a2279 1
\& $ openssl dsa -in key.pem -outform DER -out keyout.der
d2283 1
a2283 1
\& $ openssl dsa -in key.pem -text -noout
d2287 1
a2287 1
\& $ openssl dsa -in key.pem -pubout -out pubkey.pem
d2294 2
a2295 2
.Op Fl inform Ar DER|PEM
.Op Fl outform Ar DER|PEM
d2309 1
a2309 1
command is used to manipulate or generate \s-1DSA\s0 parameter files.
d2313 1
a2313 1
.It Fl inform Ar DER|PEM
d2317 2
a2318 1
argument uses an ASN1 DER encoded form compatible with RFC 2459 (PKIX)
d2325 1
a2325 1
.It Fl outform Ar DER|PEM
d2335 1
a2335 1
parameter is included then this option will be ignored.
d2357 1
a2357 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number
d2360 2
a2361 8
Multiple files can be specified, separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d2366 3
a2368 1
If this option is included, then the input file (if any) is ignored.
d2373 1
a2373 1
.Nm req
d2381 3
a2383 3
.Bd -literal
\& -----BEGIN DSA PARAMETERS-----
\& -----END DSA PARAMETERS-----
d2393 1
d2398 2
d2406 1
d2414 2
d2419 3
a2421 2
or explicitly provided. Base64 encoding or decoding can also be performed
either by itself or in addition to the encryption or decryption.
d2436 1
a2436 1
.Ar arg
d2556 8
d2614 1
a2614 1
If padding is disabled then the input data must be a multiple of the cipher
d2619 1
a2619 1
Blowfish and RC5 algorithms use a 128 bit key.
d2621 65
a2685 68
.Bd -literal
\& base64             Base 64
.Ed
.Bd -literal
\& bf-cbc             Blowfish in CBC mode
\& bf                 Alias for bf-cbc
\& bf-cfb             Blowfish in CFB mode
\& bf-ecb             Blowfish in ECB mode
\& bf-ofb             Blowfish in OFB mode
.Ed
.Bd -literal
\& cast-cbc           CAST in CBC mode
\& cast               Alias for cast-cbc
\& cast5-cbc          CAST5 in CBC mode
\& cast5-cfb          CAST5 in CFB mode
\& cast5-ecb          CAST5 in ECB mode
\& cast5-ofb          CAST5 in OFB mode
.Ed
.Bd -literal
\& des-cbc            DES in CBC mode
\& des                Alias for des-cbc
\& des-cfb            DES in CBC mode
\& des-ofb            DES in OFB mode
\& des-ecb            DES in ECB mode
.Ed
.Bd -literal
\& des-ede-cbc        Two key triple DES EDE in CBC mode
\& des-ede            Alias for des-ede
\& des-ede-cfb        Two key triple DES EDE in CFB mode
\& des-ede-ofb        Two key triple DES EDE in OFB mode
.Ed
.Bd -literal
\& des-ede3-cbc       Three key triple DES EDE in CBC mode
\& des-ede3           Alias for des-ede3-cbc
\& des3               Alias for des-ede3-cbc
\& des-ede3-cfb       Three key triple DES EDE CFB mode
\& des-ede3-ofb       Three key triple DES EDE in OFB mode
.Ed
.Bd -literal
\& desx               DESX algorithm.
.Ed
.Bd -literal
\& idea-cbc           IDEA algorithm in CBC mode
\& idea               same as idea-cbc
\& idea-cfb           IDEA in CFB mode
\& idea-ecb           IDEA in ECB mode
\& idea-ofb           IDEA in OFB mode
.Ed
.Bd -literal
\& rc2-cbc            128 bit RC2 in CBC mode
\& rc2                Alias for rc2-cbc
\& rc2-cfb            128 bit RC2 in CBC mode
\& rc2-ecb            128 bit RC2 in CBC mode
\& rc2-ofb            128 bit RC2 in CBC mode
\& rc2-64-cbc         64 bit RC2 in CBC mode
\& rc2-40-cbc         40 bit RC2 in CBC mode
.Ed
.Bd -literal
\& rc4                128 bit RC4
\& rc4-64             64 bit RC4
\& rc4-40             40 bit RC4
.Ed
.Bd -literal
\& rc5-cbc            RC5 cipher in CBC mode
\& rc5                Alias for rc5-cbc
\& rc5-cfb            RC5 cipher in CBC mode
\& rc5-ecb            RC5 cipher in CBC mode
\& rc5-ofb            RC5 cipher in CBC mode
d2690 1
a2690 1
\& $ openssl base64 -in file.bin -out file.b64
d2694 1
a2694 1
\& $ openssl base64 -d -in file.b64 -out file.bin
d2698 1
a2698 1
\& $ openssl des3 -salt -in file.txt -out file.des3
d2702 1
a2702 1
\& $ openssl des3 -d -salt -in file.des3 -out file.txt -k mypassword
d2704 2
a2705 1
Encrypt a file then base64 encode it (so it can be sent via mail for example)
d2708 1
a2708 1
\& $ openssl bf -a -salt -in file.txt -out file.bf
d2712 1
a2712 1
\& $ openssl bf -d -salt -a -in file.bf -out file.txt
d2714 1
a2714 1
Decrypt some data using a supplied 40 bit RC4 key:
d2716 1
a2716 1
\& $ openssl rc4-40 -in file.rc4 -out file.txt -K 0102030405
d2735 1
a2735 1
utility is undocumented.
d2740 2
a2741 1
Generation of Diffie-Hellman Parameters. Replaced by
d2751 1
a2752 3
.Op Fl des
.Op Fl des3
.Op Fl idea
d2755 4
d2760 1
d2765 1
a2765 1
(which will be typically generated by the
d2771 4
a2774 1
.It Cm -des|-des3|-idea
d2776 1
a2776 1
or the IDEA ciphers, respectively, before outputting it.
d2780 1
a2780 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number
d2783 2
a2784 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d2789 1
a2789 1
.Nm req
d2808 5
d2815 1
a2815 5
.Op Fl des
.Op Fl des3
.Op Fl idea
.Op Fl f4
.Op Fl 3
d2819 1
d2834 1
a2834 1
.Ar arg
d2838 4
a2841 1
.It Cm -des|-des3|-idea
d2843 1
a2843 1
IDEA ciphers, respectively, before outputting it.
d2849 1
a2849 1
.It Cm -F4|-3
d2853 1
a2853 4
A
.Ar file
or
.Ar file Ns Li s
d2857 2
a2858 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d2863 1
a2863 1
.Nm req
d2878 3
a2880 3
.Em \&.
represents each number which has passed an initial sieve test,
.Em \&+
d2883 1
a2883 1
(the actual number depends on the key size).
d2892 2
a2893 1
they will be much larger (typically 1024 bits).
d2921 1
a2921 1
Normally a Netscape certificate sequence will be input and the output
d2931 1
a2931 1
\& $ openssl nseq -in nseq.pem -out certs.pem
d2936 1
a2936 1
\& $ openssl nseq -in certs.pem -toseq -out nseq.pem
d2942 3
a2944 3
.Bd -literal
\& -----BEGIN CERTIFICATE-----
\& -----END CERTIFICATE-----
d2983 4
a2986 1
.Op Fl host Ar host:n
d3014 6
a3019 2
The Online Certificate Status Protocol (OCSP) enables applications to
determine the (revocation) state of an identified certificate (RFC 2560).
d3025 2
a3026 2
create requests and send queries to an OCSP responder and behave like
a mini OCSP server itself.
d3056 4
a3059 2
.Em 0x .
Negative integers can also be specified by preceding the value by a `-' sign.
d3068 1
a3068 1
option is not present then the private key is read from the same file
d3070 1
a3070 1
If neither option is specified then the OCSP request is not signed.
d3099 1
a3099 1
Print out the text form of the OCSP request, response or both, respectively.
d3115 7
a3121 2
Both HTTP and HTTPS (SSL/TLS) URLs can be specified.
.It Fl host Ar hostname:port , Fl path Ar pathname
d3129 3
a3131 1
specifies the HTTP path name to use, or "/" by default.
d3178 1
a3178 1
Don't verify the OCSP response signers certificate at all.
d3185 3
a3187 3
Don't perform any additional checks on the OCSP response signers certificate.
That is, do not make any checks to see if the signers certificate is authorised
to provide the necessary status information:
d3208 1
a3208 1
time is omitted from a response then this means that new status
d3215 1
a3215 1
By default this additional check is not performed.
d3268 1
a3268 1
if not present the file specified in the
d3288 1
a3288 1
If neither option is present then the
d3290 1
a3290 1
field is omitted meaning fresh revocation information is immediately available.
d3310 1
a3310 1
If the initial verify fails then the OCSP verify process halts with an
d3321 1
a3321 1
Otherwise the root CA of the OCSP responders CA is checked to see if it
d3325 1
a3325 1
If none of these checks is successful then the OCSP verify fails.
d3329 2
a3330 1
(and it is correctly configured) then verification will succeed.
d3337 3
a3339 2
.Bd -literal
\& $ openssl x509 -in ocspCA.pem -addtrust OCSPSigning -out trustedCA.pem
d3342 1
a3342 1
Alternatively the responder certificate itself can be explicitly trusted
d3348 1
a3348 1
Normally only the
d3350 2
a3351 1
and (if the responder is a 'global VA')
d3375 3
a3377 3
.Bd -literal
\& $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem -reqout \e
	req.der
d3383 3
a3385 3
.Bd -literal
\& $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \e
\&       -url http://ocsp.myhost.com/ -resp_text -respout resp.der
d3389 2
a3390 3
.Bd -literal
\& $ openssl ocsp -respin resp.der -text
.Ed
d3396 3
a3398 3
.Bd -literal
\& $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner rcert.pem \e
	-CA demoCA/cacert.pem -text -out log.txt
d3402 3
a3404 3
.Bd -literal
\& $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner rcert.pem \e
	-CA demoCA/cacert.pem -nrequest 1
d3408 2
a3409 2
.Bd -literal
\& $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
d3415 2
a3416 2
.Bd -literal
\& $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \e
d3433 1
d3447 3
a3449 1
The Unix standard algorithm
d3451 3
a3453 1
and the MD5-based BSD password algorithm
d3464 2
a3465 1
algorithm (default).
d3467 3
a3469 1
Use the MD5 based BSD password algorithm
d3474 4
a3477 1
algorithm (Apache variant of the BSD algorithm).
d3492 1
a3492 1
Don't output warnings when passwords given at the command line are truncated.
d3496 2
d3500 1
a3500 2
.Bl -tag -width "XXXX"
.It $ openssl passwd -crypt -salt xx password
d3502 3
a3504 2
.Em xxj31ZMTZzkVA .
.It $ openssl passwd -1 -salt xxxxxxxx password
d3506 3
a3508 2
.Em $1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a. .
.It $ openssl passwd -apr1 -salt xxxxxxxx password
d3510 1
a3510 2
.Em $apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0 .
.El
d3517 2
a3518 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d3537 1
a3537 1
.It Fl inform Ar DER|PEM
d3540 1
a3540 1
format is DER encoded PKCS#7 v1.5 structure.
d3542 4
a3545 4
(the default) is a base64 encoded version of the DER form with header
and footer lines.
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d3571 1
a3571 1
.Nm req
d3582 1
a3582 1
\& $ openssl pkcs7 -in file.pem -outform DER -out file.der
d3586 1
a3586 1
\& $ openssl pkcs7 -in file.pem -print_certs -out certs.pem
d3591 3
a3593 3
.Bd -literal
\& -----BEGIN PKCS7-----
\& -----END PKCS7-----
d3597 3
a3599 3
.Bd -literal
\& -----BEGIN CERTIFICATE-----
\& -----END CERTIFICATE-----
d3613 2
a3614 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d3634 2
a3635 1
(v1.5 and v2.0) and PKCS#12 algorithms.
d3640 1
a3640 1
Normally a PKCS#8 private key is expected on input and a traditional format
d3646 1
a3646 1
.It Fl inform Ar DER|PEM
d3659 2
a3660 2
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d3667 1
a3667 1
If the key is encrypted a pass phrase will be prompted for.
d3671 1
a3671 1
.Ar arg
d3686 1
a3686 1
.Ar arg
d3724 1
a3724 1
Normally PKCS#8 private keys are encrypted with the password based
d3727 1
a3727 1
this uses 56 bit DES encryption but it was the strongest encryption
d3732 1
a3732 1
encryption algorithm such as 168 bit triple DES or 128 bit RC2, however
d3754 1
a3754 1
.Nm req
d3764 3
a3766 3
.Bd -literal
\& -----BEGIN ENCRYPTED PRIVATE KEY-----
\& -----END ENCRYPTED PRIVATE KEY-----
d3770 3
a3772 3
.Bd -literal
\& -----BEGIN PRIVATE KEY-----
\& -----END PRIVATE KEY-----
d3800 3
a3802 2
.Bl -tag -width "XXXX"
.It Ar PBE-MD2-DES PBE-MD5-DES
d3805 2
a3806 1
.It Ar PBE-SHA1-RC2-64 PBE-MD2-RC2-64 PBE-MD5-RC2-64 PBE-SHA1-DES
d3811 4
a3814 2
They use either 64 bit RC2 or 56 bit DES.
.It Ar PBE-SHA1-RC4-128 PBE-SHA1-RC4-40 PBE-SHA1-3DES PBE-SHA1-2DES PBE-SHA1-RC2-128 PBE-SHA1-RC2-40
d3816 1
a3816 1
allow strong encryption algorithms like triple DES or 128 bit RC2 to be used.
d3819 1
a3819 1
Convert a private from traditional to PKCS#5 v2.0 format using triple DES:
d3821 1
a3821 1
\& $ openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem
d3823 2
a3824 1
Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm (DES):
d3826 1
a3826 1
\& $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem
d3828 6
a3833 3
Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm (3DES):
.Pp
\& $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem -v1 PBE-SHA1-3DES
d3837 1
a3837 1
\& $ openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem
d3841 1
a3841 1
\& $ openssl pkcs8 -in pk8.pem -out key.pem
d3844 2
a3845 2
pkcs-tng mailing list using triple DES, DES and RC2 with high iteration
counts, several people confirmed that they could decrypt the private
d3850 3
a3852 1
The format of PKCS#8 DSA (and other) private keys is not well documented:
d3869 1
d3874 2
d3887 4
a3890 3
.Op Fl des
.Op Fl des3
.Op Fl idea
d3904 2
d3909 2
a3910 1
command allows PKCS#12 files (sometimes referred to as PFX files)
d3917 1
a3917 1
By default a PKCS#12 file is parsed;
d3920 2
a3921 1
option (see below).
d3937 3
a3939 1
The PKCS#12 file (i.e. input file) password source.
d3941 1
a3941 1
.Ar arg
d3948 1
a3948 1
.Ar arg
d3956 2
a3957 1
Only output client certificates (not CA certificates).
d3959 2
a3960 1
Only output CA certificates (not client certificates).
d3968 7
a3974 6
.It Fl des
Use DES to encrypt private keys before outputting.
.It Fl des3
Use triple DES to encrypt private keys before outputting, this is the default.
.It Fl idea
Use IDEA to encrypt private keys before outputting.
d4009 3
a4011 1
This specifies the "friendly name" for the certificate and private key.
d4015 6
d4022 3
a4024 1
This specifies the "friendly name" for other certificates.
d4030 3
a4032 1
The PKCS#12 file (i.e. output file) password source.
d4034 1
a4034 1
.Ar arg
d4041 1
a4041 1
.Ar arg
d4046 1
a4046 1
If this option is present then an attempt is made to include the entire
d4049 1
a4049 1
If the search fails it is considered a fatal error.
d4052 5
a4056 3
file unreadable by some "export grade" software.
By default the private key is encrypted using triple DES and the
certificate using 40 bit RC2.
d4061 1
a4061 1
it is advisable only to use PKCS#12 algorithms.
d4068 3
a4070 1
Normally "export grade" software will only allow 512 bit RSA keys to be
d4075 3
a4077 2
Signing only keys can be used for S/MIME signing,
authenticode (ActiveX control signing) and SSL client authentication;
d4082 1
a4082 1
Unless you wish to produce files compatible with MSIE 4.0 you should leave
d4085 4
a4088 4
To discourage attacks by using large dictionaries of common passwords the
algorithm that derives keys from passwords can have an iteration count applied
to it: this causes a certain part of the algorithm to be repeated and slows it
down.
d4091 1
a4091 1
By default both MAC and encryption iteration counts are set to 2048;
d4100 1
a4100 1
This option is included for compatibility with previous versions, it used
d4103 1
a4103 4
A
.Ar file
or
.Ar file Ns Li s
d4107 10
a4116 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d4121 1
a4121 1
For PKCS#12 file parsing only
d4132 1
a4132 1
.Fl clcerts , cacerts
d4135 1
a4135 1
options are present then all certificates will be output in the order
d4146 1
a4146 1
If the CA certificates are required then they can be output to a separate
d4159 1
a4159 1
Normally the defaults are fine but occasionally software can't handle
d4163 1
a4163 1
can be used to reduce the private key encryption to 40 bit RC2.
d4170 1
a4170 1
\& $ openssl pkcs12 -in file.p12 -out file.pem
d4174 1
a4174 1
\& $ openssl pkcs12 -in file.p12 -clcerts -out file.pem
d4178 1
a4178 1
\& $ openssl pkcs12 -in file.p12 -out file.pem -nodes
d4182 1
a4182 1
\& $ openssl pkcs12 -in file.p12 -info -noout
d4185 2
a4186 2
.Bd -literal
\& $ openssl pkcs12 -export -in file.pem -out file.p12 \e
d4191 2
a4192 2
.Bd -literal
\& $ openssl pkcs12 -export -in file.pem -out file.p12 \e
d4204 3
a4206 2
from other implementations (MSIE or Netscape) could not be decrypted
by
d4228 4
a4231 3
.Bd -literal
\& $ old-openssl -in bad.p12 -out keycerts.pem
\& $ openssl -in keycerts.pem -export -name "My PKCS#12 file" -out fixed.p12
d4239 1
a4239 1
.Op Fl rand Ar file
d4241 1
d4273 1
a4273 5
Use specified
.Ar file
or
.Ar file Ns Li s
or EGD socket (see
d4276 2
a4277 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d4282 8
d4297 2
a4298 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d4310 10
a4319 2
.Op Fl newkey Ar rsa:bits
.Op Fl newkey Ar dsa:file
d4321 1
d4323 1
a4323 1
.Op Fl keyform Ar PEM|DER
d4325 1
a4325 1
.Op Fl Op Cm md5|sha1|md2|mdc2
d4351 1
a4351 1
.It Fl inform Ar DER|PEM
d4362 2
a4363 2
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d4379 1
a4379 1
.Ar arg
d4390 1
a4390 1
.Ar arg
d4413 1
a4413 1
option is not used it will generate a new RSA private
d4416 1
a4416 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number generator,
d4419 2
a4420 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d4424 1
a4424 1
.Ar rsa:nbits ,
d4430 1
a4430 1
.Ar dsa:filename
d4438 1
a4438 1
.It Fl keyform Ar PEM|DER
d4442 1
a4442 1
.AR PEM
d4451 1
a4451 1
If this option is specified then if a private key is created it
d4453 3
a4455 1
.It Fl md5|sha1|md2|mdc2
d4463 1
a4463 1
.Em OPENSSL_CONF
d4469 5
a4473 2
.Em /type0=value0/type1=value1/type2=... ,
characters may be escaped by \e (backslash), no spaces are skipped.
d4480 2
a4481 1
(if any) are specified in the configuration file.
d4488 1
a4488 1
option is being used this specifies the number of
d4494 1
a4494 1
.Em 0x .
d4505 2
a4506 2
This option causes field values to be interpreted as UTF8 strings, by
default they are interpreted as ASCII.
d4521 1
a4521 1
By default the
d4529 1
a4529 1
More precisely the
d4544 3
a4546 1
Some software (Netscape certificate server) and some CAs need this.
d4565 1
a4565 1
section (i.e.
d4573 5
a4577 3
.It Ar input_password output_password
The passwords for the input private key file (if present) and
the output private key file (if one will be created).
d4608 1
a4608 1
.Cm =
d4619 1
a4619 1
then if a private key is generated it is
d4631 1
a4631 1
.Ar md5 , sha1
d4633 2
a4634 2
.Ar mdc2 .
If not present then MD5 is used.
d4649 1
a4649 1
value is used then only
d4657 1
a4657 1
option is used then only
d4725 1
a4725 1
.Em no
d4727 4
a4730 4
.Bd -literal
\& CN=My Name
\& OU=My Organization
\& emailAddress=someone@@somewhere.org
d4733 4
a4736 2
This allows external programs (e.g. GUI based) to generate a template file
with all the field names and values and just pass it to
d4748 5
a4752 5
.Bd -literal
\& fieldName="prompt"
\& fieldName_default="default field value"
\& fieldName_min= 2
\& fieldName_max= 4
d4755 2
a4756 1
"fieldName" is the field name being used, for example
d4758 4
a4761 2
(or CN).
The "prompt" string is used to ask the user to enter the relevant details.
d4763 1
a4763 1
if no default value is present then the field is omitted.
d4765 3
a4767 1
if the user just enters the '.' character.
d4785 1
a4785 1
To avoid this problem if the
d4787 1
a4787 1
contains some characters followed by a full stop they will be ignored.
d4790 2
a4791 1
can be input by calling it "1.organizationName".
d4800 1
a4800 1
Additionally
d4817 1
a4817 1
\& $ openssl req -in req.pem -text -verify -noout
d4820 3
a4822 3
.Bd -literal
\& $ openssl genrsa -out key.pem 1024
\& $ openssl req -new -key key.pem -out req.pem
d4827 1
a4827 1
\& $ openssl req -newkey rsa:1024 -keyout key.pem -out req.pem
d4831 1
a4831 1
\& $ openssl req -x509 -newkey rsa:1024 -keyout key.pem -out req.pem
d4836 3
a4838 3
.Bd -literal
\& 1.2.3.4        shortName       A longer Name
\& 1.2.3.6        otherName       Other longer Name
d4844 3
a4846 3
.Bd -literal
\& testoid1=1.2.3.5
\& testoid2=${testoid1}.6
d4857 1
a4857 1
.Pp
d4859 1
a4859 1
.Pp
d4865 1
a4865 1
.Pp
d4867 1
a4867 1
.Pp
d4869 1
a4869 1
.Pp
d4872 1
a4872 1
.Pp
d4875 1
a4875 1
.Pp
d4880 1
a4880 1
.Pp
d4882 1
a4882 1
.Pp
d4891 1
a4891 1
.Pp
d4899 1
a4899 1
.Pp
d4908 1
a4908 1
.Pp
d4916 3
a4918 3
.Bd -literal
\& -----BEGIN CERTIFICATE REQUEST-----
\& -----END CERTIFICATE REQUEST-----
d4921 6
a4926 4
Some software (some versions of Netscape certificate server) instead needs:
.Bd -literal
\& -----BEGIN NEW CERTIFICATE REQUEST-----
\& -----END NEW CERTIFICATE REQUEST-----
d4937 3
a4939 3
extension which determines the type of
key (signature only or general purpose) and any additional OIDs entered
by the script in an
d4944 3
a4946 3
.Bd -literal
\&        Using configuration from /some/path/openssl.cnf
\&        Unable to load config info
d4950 3
a4952 3
.Bd -literal
\&        unable to find 'distinguished_name' in config
\&        problems making Certificate Request
d4957 3
a4959 2
Certain operations (like examining a certificate request) don't
need a configuration file so its use isn't enforced.
d4964 3
a4966 3
.Bd -literal
\&        Attributes:
\&            a0:00
d4970 2
a4971 1
the correct empty SET OF structure (the DER encoding of which is 0xa0 0x00).
d4974 1
a4974 1
\&        Attributes:
d4976 2
a4977 2
then the SET OF is missing and the encoding is technically invalid (but
it is tolerated).
d4983 1
a4983 1
.Em OPENSSL_CONF ,
d4989 1
a4989 1
.Em SSLEAY_CONF
d4993 4
a4996 2
handling of T61Strings (aka TeletexStrings) is broken: it effectively
treats them as ISO-8859-1 (Latin 1);
d5003 1
a5003 1
As a consequence of the T61String handling the only correct way to represent
d5014 1
a5014 1
Other things like extensions in certificate requests are
d5017 1
a5017 1
.Em subjectAltName
d5025 2
a5026 2
.Op Fl inform Ar PEM|NET|DER
.Op Fl outform Ar PEM|NET|DER
d5032 4
a5035 3
.Op Fl des
.Op Fl des3
.Op Fl idea
d5060 1
a5060 1
.It Fl inform Ar DER|NET|PEM
d5077 2
a5078 2
.It Fl outform Ar DER|NET|PEM
This specifies the output format, the options have the same meaning as the
d5090 1
a5090 1
.Ar arg
d5098 1
a5098 1
If any encryption options are set then a pass phrase will be prompted for.
d5105 1
a5105 1
.Ar arg
d5113 4
a5116 1
.It Cm -des|-des3|-idea
d5118 1
a5118 1
IDEA ciphers, respectively, before outputting it.
d5139 1
a5139 1
By default a private key is read from the input file: with this
d5142 1
a5142 1
By default a private key is output:
d5149 1
a5149 1
.Nm req
d5158 3
a5160 3
.Bd -literal
\& -----BEGIN RSA PRIVATE KEY-----
\& -----END RSA PRIVATE KEY-----
d5166 3
a5168 3
.Bd -literal
\& -----BEGIN PUBLIC KEY-----
\& -----END PUBLIC KEY-----
d5181 4
a5184 2
and look for the string "private-key", then trace back to the byte
sequence 0x30, 0x82 (this is an ASN1 SEQUENCE).
d5197 1
a5197 1
\& $ openssl rsa -in key.pem -out keyout.pem
d5201 1
a5201 1
\& $ openssl rsa -in key.pem -des3 -out keyout.pem
d5209 1
a5209 1
\& $ openssl rsa -in key.pem -outform DER -out keyout.der
d5213 1
a5213 1
\& $ openssl rsa -in key.pem -text -noout
d5217 1
a5217 1
\& $ openssl rsa -in key.pem -pubout -out pubkey.pem
d5230 1
d5234 1
d5241 1
a5241 3
.Op Fl pkcs
.Op Fl ssl
.Op Fl raw
d5244 2
d5266 4
d5283 4
a5286 3
.It Fl pkcs , oaep , ssl , raw
The padding to use: PKCS#1 v1.5 (the default), PKCS#1 OAEP,
special padding used in SSL v2 backwards compatible handshakes,
d5296 1
a5296 1
Asn1parse the output data, this is useful when combined with the
d5299 8
d5315 1
a5315 1
\& $ openssl rsautl -sign -in file -inkey key.pem -out sig
d5319 1
a5319 1
\& $ openssl rsautl -verify -in sig -inkey key.pem
d5323 2
a5324 2
\& $ openssl rsautl -verify -in file -inkey key.pem -raw -hexdump
.Bd -literal
d5335 3
a5337 2
The PKCS#1 block formatting is evident from this. If this was done using
encrypt and decrypt the block would have been of type 2 (the second byte)
d5345 1
a5345 1
Running
d5349 2
a5350 2
\& $ openssl asn1parse -in pca-cert.pem
.Bd -literal
d5374 1
a5374 1
\& $ openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614
d5378 1
a5378 1
\& $ openssl x509 -in test/testx509.pem -pubout -noout >pubkey.pem
d5382 2
a5383 2
\& $ openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin
.Bd -literal
d5389 1
a5389 1
\&      0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5   .F...Js.7...H%..
d5398 1
a5398 1
\& $ openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4
d5401 3
a5403 4
.Bd -literal
\& $ openssl md5 -c tbs
\&   MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5
.Ed
d5412 3
a5414 1
.Op Fl connect Ar host:port>
d5423 1
d5439 1
a5441 1
.Op Fl starttls Ar protocol
d5456 3
a5458 1
.It Fl connect Ar host:port
d5464 1
a5464 1
If not specified then an attempt is made to connect to the local host
d5471 1
a5471 1
If not specified then the certificate file will be used.
d5486 3
a5488 1
This directory must be in "hash format", see
d5509 1
a5509 1
Normally information will only be printed out once if the connection succeeds.
d5537 4
a5540 2
.It Fl ssl2 , ssl3 , tls1 , no_ssl2 ,
.It Fl no_ssl3 , no_tls1
d5542 1
a5542 1
By default the initial handshake uses a method which should be compatible
d5555 3
d5560 1
a5560 1
Although the server determines which cipher suite is used it should take
d5569 2
a5570 1
Currently, the only supported keyword is "smtp".
d5580 1
a5580 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number generator,
d5583 2
a5584 9
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for
all others.
d5587 1
a5587 1
If a connection is established with an SSL server then any data received
d5595 2
a5596 2
.Em R ,
and if the line begins with a
d5604 1
a5604 1
\& $ openssl s_client -connect servername:443
d5606 5
a5610 3
would typically be used (https uses port 443).
If the connection succeeds then an HTTP command can be given such as
"GET" to retrieve a web page.
d5612 2
a5613 2
If the handshake fails then there are several possible causes; if it is
nothing obvious like no client certificate then the
d5628 4
a5631 3
This is normally because the server is not sending the clients certificate
authority in its "acceptable CA list" when it
requests a certificate.
d5643 1
a5643 1
option it will not be used unless the server specifically requests
d5648 1
a5648 1
If there are problems verifying a server certificate then the
d5691 1
d5728 1
a5728 1
The certificate to use; most servers cipher suites require the use of a
d5731 3
a5733 2
(DSA) key.
If not specified then the filename
d5738 1
a5738 1
If not specified then the certificate file will be used.
d5746 1
a5746 1
(no additional certificate and key is used).
d5750 3
a5752 1
and some a DSS (DSA) key.
d5757 1
a5757 1
If this option is set then no certificate is used.
d5759 1
a5759 1
(currently just anonymous DH).
d5783 1
a5783 1
option a certificate is requested but the client does not have to send one.
d5786 1
a5786 1
option the client must supply a certificate or an error occurs.
d5791 3
a5793 1
This directory must be in "hash format", see
d5809 1
a5809 1
Tests non blocking I/O.
d5811 1
a5811 1
Turns on non blocking I/O.
d5816 4
a5819 2
.It Fl ssl2 , ssl3 , tls1 , no_ssl2 ,
.It Fl no_ssl3 , no_tls1
d5828 2
a5829 1
SSL code (?).
d5835 1
a5835 1
cipherlist irrelevant.
d5839 2
d5877 5
a5881 3
This is mostly useful for testing any SSL/TLS code (e.g. proxies) that wish
to deal with multiple servers, when each of which might be generating a
unique range of session IDs (e.g. with a certain prefix).
d5883 1
a5883 5
A
.Ar file
or
.Ar file Ns Li s
containing random data used to seed the random number generator,
d5886 2
a5887 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d5919 1
a5919 1
\& $ openssl s_server -accept 443 -www
d5923 4
a5926 3
Most web browsers (in particular Netscape and MSIE) only support RSA cipher
suites, so they cannot connect to servers which don't use a certificate
carrying an RSA key or a version of
d5959 1
a5959 1
utility is undocumented.
d5966 2
a5967 2
.Op Fl inform Ar PEM|DER
.Op Fl outform Ar PEM|DER
d5971 1
d5978 4
a5981 4
program processes the encoded version of the SSL
session structure and optionally prints out SSL
session details (for example the SSL
session master key) in human readable format.
d5987 1
a5987 1
.It Fl inform Ar DER|PEM
d5998 2
a5999 2
.It Fl outform Ar DER|PEM
This specifies the output format, the options have the same meaning as the
d6015 2
a6016 1
If a certificate is present in the session it will be output using this option,
d6019 1
a6019 1
option is also present then it will be printed out in text form.
d6023 1
a6023 1
This option can set the session id so the output session information uses the
d6033 1
a6033 1
.Bd -literal
d6060 1
a6060 1
The key argument, this is only used in SSL v2.
d6062 3
a6064 2
This is the session start time, represented as an integer
in standard Unix format.
d6074 3
a6076 3
.Bd -literal
\& -----BEGIN SSL SESSION PARAMETERS-----
\& -----END SSL SESSION PARAMETERS-----
d6082 3
a6084 1
should be taken if the information is being output by a "real" application.
d6100 13
a6112 5
.Op Fl des
.Op Fl des3
.Op Fl rc2-40
.Op Fl rc2-64
.Op Fl rc2-128
d6117 1
a6117 1
.Op Fl inform Ar SMIME|PEM|DER
d6120 1
d6122 1
a6122 1
.Op Fl outform Ar SMIME|PEM|DER
d6128 5
d6182 1
a6182 1
.It Fl inform Ar SMIME|PEM|DER
d6195 1
a6195 1
structure, if no PKCS#7 structure is being input (for example with
d6198 1
a6198 1
.Fl sign )
d6204 1
a6204 1
.It Fl outform Ar SMIME|PEM|DER
d6235 2
a6236 1
This option adds plain text (text/plain)
d6246 1
a6246 1
containing trusted CA certificates, only used with
d6251 1
a6251 1
containing trusted CA certificates, only used with
d6257 4
a6260 1
.It Fl des des3 rc2-40 rc2-64 rc2-128
d6262 6
a6267 2
DES (56 bits), triple DES\s0 (168 bits)
or 40, 64 or 128 bit RC2, respectively; if not specified 40 bit RC2 is
d6272 4
a6275 3
When verifying a message, normally certificates (if any) included in
the message are searched for the signing certificate.
With this option only the certificates specified in the
d6282 2
a6283 2
Do not do chain verification of signers' certificates: that is don't
use the certificates in the signed message as untrusted CAs.
d6298 3
a6300 2
Normally the input message is converted to "canonical" format which is
effectively using CR and LF as end of line: as required by the
d6333 1
a6333 1
If this option is not specified then the private key must be included
d6340 2
d6345 1
a6345 1
.Ar arg
d6349 13
d6363 1
a6363 4
A
.Ar file
or
.Ar file Ns Li s
d6367 2
a6368 8
Multiple files can be specified separated by an OS-dependent character.
The separator is
.Cm \&;
for MS-Windows,
.Cm \&,
for OpenVMS, and
.Cm \&:
for all others.
d6395 2
a6396 1
clients won't display it properly (if at all).
d6401 3
a6403 2
A "signed and encrypted" message is one where a signed message is
then encrypted.
d6414 3
a6416 2
It is possible to sign messages "in parallel" by signing an already
signed message.
d6443 1
a6443 1
the signers certificates.
d6447 3
a6449 3
.Bd -literal
\& $ openssl smime -sign -in message.txt -text -out mail.msg \e
\&        -signer mycert.pem
d6453 3
a6455 3
.Bd -literal
\& $ openssl smime -sign -in message.txt -text -out mail.msg -nodetach \e
\&        -signer mycert.pem
d6460 3
a6462 3
.Bd -literal
\& $ openssl smime -sign -in in.txt -text -out mail.msg \e
\&        -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem
d6465 3
a6467 1
Send a signed message under Unix directly to
d6470 4
a6473 4
.Bd -literal
\& $ openssl smime -sign -in in.txt -text -signer mycert.pem \e
\&        -from steve@@openssl.org -to someone@@somewhere \e
\&        -subject "Signed message" | sendmail someone@@somewhere
d6477 3
a6479 3
.Bd -literal
\& $ openssl smime -verify -in mail.msg -signer user.pem \e
\&	-out signedtext.txt
d6483 4
a6486 4
.Bd -literal
\& $ openssl smime -encrypt -in in.txt -from steve@@openssl.org \e
\&        -to someone@@somewhere -subject "Encrypted message" \e
\&        -des3 user.pem -out mail.msg
d6490 5
a6494 5
.Bd -literal
\& $ openssl smime -sign -in ml.txt -signer my.pem -text \e
\&        | openssl smime -encrypt -out mail.msg \e
\&        -from steve@@openssl.org -to someone@@somewhere \e
\&        -subject "Signed and Encrypted message" -des3 user.pem
d6505 4
a6508 2
.Pp
\& $ openssl smime -decrypt -in mail.msg -recip mycert.pem -inkey key.pem
d6514 3
a6516 3
.Bd -literal
\& -----BEGIN PKCS7-----
\& -----END PKCS7-----
d6520 3
a6522 3
.Bd -literal
\& $ openssl smime -verify -inform PEM -in signature.pem
\& 	-content content.txt
d6526 3
a6528 3
.Bd -literal
\& $ openssl smime -verify -inform DER -in signature.der
\& 	-content content.txt
d6542 1
a6542 1
Ideally a database should be maintained of a certificate for each email
d6556 1
a6556 1
v2 messages, the more complex
d6564 14
a6577 1
.Op Fl engine Ar id
d6579 1
a6579 1
.Op Cm mdc2
d6581 1
a6581 4
.Op Cm hmac
.Op Cm sha1
.Op Cm rmd160
.Op Cm idea-cbc
a6582 4
.Op Cm rc5-cbc
.Op Cm bf-cbc
.Op Cm des-cbc
.Op Cm des-ede3
d6584 2
d6590 8
a6597 8
.Op Cm dsa512
.Op Cm dsa1024
.Op Cm dsa2048
.Op Cm idea
.Op Cm rc2
.Op Cm des
.Op Cm rsa
.Op Cm blowfish
d6603 18
a6629 4
.It Cm [zero or more test algorithms]
If any options are given,
.Nm speed
tests those algorithms, otherwise all of the above are tested.
d6651 2
a6652 1
(SPKAC) files.
d6680 1
a6680 1
.Ar arg
d6696 2
a6697 2
Don't output the text version of the SPKAC (not used if an
SPKAC is being created).
d6699 2
a6700 2
Output the public key of an SPKAC (not used if an SPKAC is
being created).
d6707 1
a6707 1
.Nm req
d6715 1
a6715 1
\& $ openssl spkac -in spkac.cnf
d6719 1
a6719 1
\& $ openssl spkac -in spkac.cnf -noout -verify
d6721 2
a6722 1
Create an SPKAC using the challenge string "hello":
d6724 1
a6724 1
\& $ openssl spkac -key key.pem -challenge hello -out spkac.cnf
d6726 8
a6733 7
Example of an SPKAC, (long lines split up for clarity):
.Bd -literal
\& SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA1cCoq2Wa3Ixs47uI7F\e
\& PVwHVIPDx5yso105Y6zpozam135a8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03u\e
\& PFoQIDAQABFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJh1bEIYuc\e
\& 2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnDdq+NQ3F+X4deMx9AaEglZtULwV\e
\& 4=
d6753 2
a6754 1
to be used in a "replay attack".
d6767 2
d6784 1
a6784 1
or have symbolic links to them of this form.
d6790 3
a6792 1
Under Unix the
d6833 10
d6847 1
a6847 1
.Cm \&- .
d6852 1
a6852 1
If no certificate filenames are included then an attempt is made to read
d6879 1
a6879 1
If a certificate is found which is its own issuer it is assumed
d6882 3
a6884 2
The process of 'looking up the issuers certificate' itself involves a number
of steps.
d6894 3
a6896 1
(if present) must match the subject key identifier (if present)
d6899 3
a6901 1
extension of the candidate issuer (if present) must permit certificate signing.
d6914 4
a6917 3
The supplied or "leaf" certificate must have extensions compatible with the
supplied purpose and all other certificates must also be valid
CA certificates.
d6946 2
a6947 2
.Bd -literal
\& server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024 bit)
d6951 1
a6951 1
The first line contains the name of the certificate being verified followed by
d6954 1
a6954 1
The depth is number of the certificate being verified when a
d6963 2
a6964 1
as "unused".
d7109 1
a7109 6
.Op Fl a
.Op Fl v
.Op Fl b
.Op Fl o
.Op Fl f
.Op Fl p
a7119 4
.It Fl v
The current
.Nm OpenSSL
version.
d7124 5
a7130 2
.It Fl c
Compilation flags.
d7133 4
a7136 3
.It Fl d
.Em OPENSSLDIR
setting.
d7154 5
a7158 5
.Op Fl inform Ar DER|PEM|NET
.Op Fl outform Ar DER|PEM|NET
.Op Fl keyform Ar DER|PEM
.Op Fl CAform Ar DER|PEM
.Op Fl CAkeyform Ar DER|PEM
d7161 1
d7173 1
d7177 1
d7185 1
d7196 1
a7196 1
.Op Cm -md2|-md5|-sha1|-mdc2
d7207 3
a7209 2
various forms, sign certificate requests like a "mini CA" or edit
certificate trust settings.
d7213 1
a7213 1
.Sh X509 INPUT, OUTPUT AND GENERAL PURPOSE OPTIONS
d7215 1
a7215 1
.It Fl inform Ar DER|PEM|NET
d7217 1
a7217 1
Normally the command will expect an X509 certificate,
d7230 2
a7231 3
.It Fl outform Ar DER|PEM|NET
This specifies the output format;
the options have the same meaning as the
d7242 8
a7249 1
.It Fl md2|-md5|-sha1|-mdc2
d7253 1
a7253 1
.Fl fingerprint , signkey
d7257 2
a7258 2
If not specified then MD5 is used.
If the key being used to sign with is a DSA key then
d7264 1
a7264 1
.Nm req
d7292 1
a7292 1
switch may be also be used more than once to set multiple options.
d7298 2
d7303 2
d7308 3
a7310 1
Outputs the "hash" of the certificate subject name.
d7356 2
a7357 1
and prohibited uses of the certificate and an "alias".
d7359 4
a7362 3
Normally when a certificate is being verified at least one certificate
must be "trusted".
By default a trusted certificate must be stored
d7394 2
a7395 1
for example "Steve's Certificate".
d7406 1
a7406 3
.Po Em SSL
 client use
.Pc ,
d7408 1
a7408 3
.Po Em SSL
 server use
.Pc
d7411 1
a7411 3
.Po Em S/MIME
 email
.Pc
d7424 1
a7424 1
For a more complete description see the
d7432 2
a7433 1
can thus behave like a "mini CA".
d7440 4
a7443 2
subject name (i.e. makes it self-signed), changes the public key to the
supplied value and changes the start and end dates.
d7463 2
a7464 2
Normally all extensions are retained.
.It Fl keyform Ar PEM|DER
d7466 1
a7466 4
.Po Em DER
 or
.Em PEM
.Pc
d7473 6
d7485 1
a7485 1
By default a certificate is expected on input.
d7503 1
a7503 1
.Em 0x ) .
d7507 1
a7507 1
When this option is present
d7509 2
a7510 1
behaves like a "mini CA".
d7513 1
a7513 1
digitally signed using the CAs private key.
d7523 1
a7523 1
If this option is not specified then it is assumed that the CA private key
d7540 1
a7540 1
For example if the CA certificate file is called
d7546 6
a7551 3
it will contain the serial number "02" and the certificate being signed will
have 1 as its serial number.
Normally if the
d7553 1
a7553 1
option is specified and the serial number file does not exist it is an error.
d7559 6
a7564 3
If this option is not specified then the extensions should either be
contained in the unnamed (default) section or the default section should
contain a variable called "extensions" which contains the section to use.
d7573 2
a7574 1
switch is present, the default "oneline"
d7577 2
a7578 3
Each option is described in detail below, all options can be preceded by
a
.Cm \&-
d7607 4
a7610 2
Escape the "special" characters required by RFC 2253 in a field that is
.Cm \& ,+"<>; .
d7612 1
a7612 1
.Cm \&#
d7617 6
a7622 3
That is, those with ASCII values less than
0x20 (space) and the delete (0x7f) character.
They are escaped using the RFC2253 \eXX notation (where XX are two hex
d7629 1
a7629 1
.Cm \&"
d7632 1
a7632 1
.Cm \&\e
d7637 1
a7637 1
If you are lucky enough to have a UTF8 compatible terminal then the use
d7642 3
a7644 1
may result in the correct display of multibyte (international) characters.
d7660 2
a7661 1
For example "BMPSTRING: Hello World".
d7666 1
a7666 1
Both options use the RFC2253 #XXXX... format.
d7668 3
a7670 2
Dump non-character string types (for example OCTET STRING); if this
option is not set then non-character string types will be displayed
d7684 3
a7686 2
The options ending in "space" additionally place a space after the
separator to make it more readable.
d7690 1
a7690 1
.Cm \&+
d7703 3
a7705 1
uses the "short name" form (CN for
d7718 1
a7718 1
.Cm \&=
d7734 4
a7737 2
Don't print header information: that is, the lines saying "Certificate"
and "Data".
d7782 3
a7784 2
In these examples the '\e' means the example should be all on one
line.
d7788 1
a7788 1
\& $ openssl x509 -in cert.pem -noout -text
d7792 1
a7792 1
\& $ openssl x509 -in cert.pem -noout -serial
d7796 1
a7796 1
\& $ openssl x509 -in cert.pem -noout -subject
d7798 1
a7798 1
Display the certificate subject name in RFC2253 form:
d7800 1
a7800 1
\& $ openssl x509 -in cert.pem -noout -subject -nameopt RFC2253
d7804 4
a7807 2
.Pp
\& $ openssl x509 -in cert.pem -noout -subject -nameopt oneline,-escmsb
d7811 1
a7811 1
\& $ openssl x509 -in cert.pem -noout -fingerprint
d7815 1
a7815 1
\& $ openssl x509 -sha1 -in cert.pem -noout -fingerprint
d7823 1
a7823 1
\& $ openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER
d7826 4
a7829 2
.Pp
\& $ openssl x509 -x509toreq -in cert.pem -out req.pem -signkey key.pem
d7833 3
a7835 3
.Bd -literal
\& $ openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions \e
\&        v3_ca -signkey key.pem -out cacert.pem
d7840 2
a7841 2
.Bd -literal
\& $ openssl x509 -req -in req.pem -extfile openssl.cnf -extensions \e
d7846 5
a7850 4
client use and set its alias to "Steve's Class 1 CA":
.Bd -literal
\& $ openssl x509 -in cert.pem -addtrust clientAuth \e
\&        -setalias "Steve's Class 1 CA" -out trust.pem
d7856 3
a7858 3
.Bd -literal
\& -----BEGIN CERTIFICATE-----
\& -----END CERTIFICATE-----
d7862 3
a7864 3
.Bd -literal
\& -----BEGIN X509 CERTIFICATE-----
\& -----END X509 CERTIFICATE-----
d7868 3
a7870 3
.Bd -literal
\& -----BEGIN TRUSTED CERTIFICATE-----
\& -----END TRUSTED CERTIFICATE-----
d7882 2
a7883 1
This is commonly called a "fingerprint".
d7912 2
a7913 2
If the CA flag is true then it is a CA,
if the CA flag is false then it is not a CA.
d7919 4
a7922 3
extension is absent then the certificate is
considered to be a "possible CA"; other extensions are checked according
to the intended use of the certificate.
d7927 3
a7929 2
If the certificate is a V1 certificate (and thus has no extensions) and
it is self-signed, it is also assumed to be a CA but a warning is again
d7947 2
a7948 1
If this extension is present (whether critical or not)
d7962 2
a7963 1
"web client authentication" OID.
d7972 2
a7973 1
"web client authentication" OID.
d7980 2
a7981 1
"web server authentication" and/or one of the SGC OIDs.
d7991 2
a7992 1
"web server authentication" and/or one of the SGC OIDs.
d8008 2
a8009 1
"email protection" OID.
d8015 1
a8015 1
bit is not set in netscape certificate type, then the SSL
d8038 2
a8039 1
"email protection" OID.
@


1.10
log
@kill a rake of .br's and .Pp's that worked around the spacing bug. should
help postscript output too.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.9 2003/06/12 12:59:51 jmc Exp $
d2207 1
a2207 1
argument uses an ASN1 DER encoded form compatible with RFC2459 (PKIX)
d3167 1
a3167 1
OCSP Response follows the rules specified in RFC2560.
d3463 2
a3464 2
The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC2315.
They cannot currently parse, for example, the new CMS as described in RFC2630.
d4463 1
a4463 1
This follows the PKIX recommendation in RFC2459.
d4468 1
a4468 1
will be used: this is the PKIX recommendation in RFC2459 after 2003.
d7240 1
a7240 1
Displays names compatible with RFC2253; equivalent to
d7261 1
a7261 1
Escape the "special" characters required by RFC2253 in a field that is
d7285 1
a7285 1
This is required by RFC2253.
d7339 1
a7339 1
This is required by RFC2253.
@


1.9
log
@- section reorder
- macro fixes
- kill whitespace at EOL
- new sentence, new line
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.8 2003/05/12 10:52:57 jmc Exp $
a461 1
.Pp
a501 1
.Pp
a816 1
.Pp
a1042 1
.Pp
a1052 1
.Pp
a1091 1
.Pp
a1303 1
.br
a1427 1
.Pp
a1439 1
.Pp
a1453 1
.Pp
a1460 1
.Pp
a1467 1
.Pp
a1479 1
.Pp
a1493 1
.Pp
a1524 1
.Pp
a1533 1
.Pp
a1656 1
.Pp
a1741 1
.Pp
a1994 1
.Pp
a2145 1
.Pp
a2153 1
.Pp
a2277 1
.Pp
a2505 1
.Pp
a2512 1
.Pp
a2520 1
.Pp
a2527 1
.Pp
a2533 1
.Pp
a2540 1
.Pp
a2543 1
.Pp
a2550 1
.Pp
a2559 1
.Pp
a2564 1
.Pp
a2824 1
.Pp
a2831 1
.Pp
a2899 1
.br
a3209 1
.Pp
a3245 1
.Pp
a3253 1
.Pp
a3259 1
.Pp
a3267 1
.Pp
a3273 1
.Pp
a3279 1
.Pp
a3286 1
.Pp
a3384 1
.br
a3449 1
.Pp
a3455 1
.Pp
a3621 1
.Pp
a3627 1
.Pp
a3657 1
.Pp
a3997 1
.br
a4003 1
.Pp
a4009 1
.Pp
a4045 1
.Pp
a4535 1
.Pp
a4554 1
.Pp
a4620 1
.Pp
a4632 1
.br
a4636 1
.Pp
a4644 1
.Pp
a4650 1
.Pp
a4689 1
.Pp
a4716 1
.Pp
a4722 1
.Pp
a4742 1
.Pp
a4748 1
.Pp
a4761 1
.Pp
a4948 1
.Pp
a4956 1
.Pp
a4998 1
.br
a5097 1
.Pp
a5122 1
.Pp
a5155 1
.Pp
a5173 1
.Pp
a5664 1
.Pp
a5795 1
.Pp
a5835 1
.Pp
a6173 1
.Pp
a6179 1
.Pp
a6186 1
.Pp
a6194 1
.Pp
a6201 1
.Pp
a6207 1
.Pp
a6214 1
.Pp
a6236 1
.Pp
a6242 2
.br
.Pp
a6248 1
.Pp
a6316 1
.Pp
a6425 1
.Pp
a6622 1
.Pp
a6640 1
.Pp
a7099 1
.Pp
a7467 1
.Pp
a7474 1
.Pp
a7481 1
.Pp
a7489 1
.Pp
a7495 1
.Pp
a7501 1
.Pp
a7588 1
.Pp
@


1.8
log
@sync man page with marcus's recent upgrade;
little cleanup as well.
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.7 2003/04/30 12:11:44 jmc Exp $
d7801 1
a7801 1
.Sh "HISTORY"
@


1.7
log
@a OCTET -> an OCTET;
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.6 2003/04/25 12:43:10 jmc Exp $
a137 1
.Pp
d216 1
a216 1
.Sy Note:
a407 1
.Pp
d542 4
d572 1
d605 1
a605 1
.Sx CA NOTES
d714 8
d738 29
d842 1
a842 1
.Fl cert.
d1001 1
a1001 1
.Sy Note:
a1091 17
.Sh CA WARNINGS
The
.Nm ca
command is quirky and at times downright unfriendly.
.Pp
The
.Nm ca
utility was originally meant as an example of how to do things in a CA.
It was not supposed to be used as a full blown CA itself;
nevertheless some people are using it for this purpose.
.Pp
The
.Nm ca
command is effectively a single user command: no locking is
done on the various files and attempts to run more than one
.Nm ca
command on the same database can have unpredictable results.
d1093 1
a1093 1
.Sy Note:
a1121 3
CRL entry extensions cannot currently be created; only CRL extensions
can be added.
.Pp
d1164 17
d1408 2
d1430 3
d1434 1
a1434 1
.Cm SSL v3.0 cipher suites
d1437 10
a1446 10
\& SSL_RSA_WITH_NULL_MD5                   NULL-MD5
\& SSL_RSA_WITH_NULL_SHA                   NULL-SHA
\& SSL_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
\& SSL_RSA_WITH_RC4_128_MD5                RC4-MD5
\& SSL_RSA_WITH_RC4_128_SHA                RC4-SHA
\& SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
\& SSL_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
\& SSL_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
\& SSL_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
\& SSL_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA
d1450 12
a1461 12
\& SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
\& SSL_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
\& SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
\& SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
\& SSL_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
\& SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
\& SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
\& SSL_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
\& SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
\& SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
\& SSL_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
\& SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA
d1465 5
a1469 5
\& SSL_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
\& SSL_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
\& SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
\& SSL_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
\& SSL_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
d1473 3
a1475 3
\& SSL_FORTEZZA_KEA_WITH_NULL_SHA          Not implemented.
\& SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA  Not implemented.
\& SSL_FORTEZZA_KEA_WITH_RC4_128_SHA       Not implemented.
d1478 1
a1478 1
.Cm TLS v1.0 cipher suites
d1481 10
a1490 10
\& TLS_RSA_WITH_NULL_MD5                   NULL-MD5
\& TLS_RSA_WITH_NULL_SHA                   NULL-SHA
\& TLS_RSA_EXPORT_WITH_RC4_40_MD5          EXP-RC4-MD5
\& TLS_RSA_WITH_RC4_128_MD5                RC4-MD5
\& TLS_RSA_WITH_RC4_128_SHA                RC4-SHA
\& TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5      EXP-RC2-CBC-MD5
\& TLS_RSA_WITH_IDEA_CBC_SHA               IDEA-CBC-SHA
\& TLS_RSA_EXPORT_WITH_DES40_CBC_SHA       EXP-DES-CBC-SHA
\& TLS_RSA_WITH_DES_CBC_SHA                DES-CBC-SHA
\& TLS_RSA_WITH_3DES_EDE_CBC_SHA           DES-CBC3-SHA
d1494 12
a1505 12
\& TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
\& TLS_DH_DSS_WITH_DES_CBC_SHA             Not implemented.
\& TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        Not implemented.
\& TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA    Not implemented.
\& TLS_DH_RSA_WITH_DES_CBC_SHA             Not implemented.
\& TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        Not implemented.
\& TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-DSS-DES-CBC-SHA
\& TLS_DHE_DSS_WITH_DES_CBC_SHA            EDH-DSS-CBC-SHA
\& TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       EDH-DSS-DES-CBC3-SHA
\& TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA   EXP-EDH-RSA-DES-CBC-SHA
\& TLS_DHE_RSA_WITH_DES_CBC_SHA            EDH-RSA-DES-CBC-SHA
\& TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       EDH-RSA-DES-CBC3-SHA
d1509 5
a1513 5
\& TLS_DH_anon_EXPORT_WITH_RC4_40_MD5      EXP-ADH-RC4-MD5
\& TLS_DH_anon_WITH_RC4_128_MD5            ADH-RC4-MD5
\& TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA   EXP-ADH-DES-CBC-SHA
\& TLS_DH_anon_WITH_DES_CBC_SHA            ADH-DES-CBC-SHA
\& TLS_DH_anon_WITH_3DES_EDE_CBC_SHA       ADH-DES-CBC3-SHA
d1516 18
a1533 1
.Cm Additional Export 1024 and other cipher suites
d1535 3
a1537 1
.Sy Note:
d1541 17
a1557 17
\& TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA     EXP1024-DES-CBC-SHA
\& TLS_RSA_EXPORT1024_WITH_RC4_56_SHA      EXP1024-RC4-SHA
\& TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA EXP1024-DHE-DSS-DES-CBC-SHA
\& TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA  EXP1024-DHE-DSS-RC4-SHA
\& TLS_DHE_DSS_WITH_RC4_128_SHA            DHE-DSS-RC4-SHA
.Ed
.Pp
.Cm SSL v2.0 cipher suites
.Pp
.Bd -literal
\& SSL_CK_RC4_128_WITH_MD5                 RC4-MD5
\& SSL_CK_RC4_128_EXPORT40_WITH_MD5        EXP-RC4-MD5
\& SSL_CK_RC2_128_CBC_WITH_MD5             RC2-MD5
\& SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5    EXP-RC2-MD5
\& SSL_CK_IDEA_128_CBC_WITH_MD5            IDEA-CBC-MD5
\& SSL_CK_DES_64_CBC_WITH_MD5              DES-CBC-MD5
\& SSL_CK_DES_192_EDE3_CBC_WITH_MD5        DES-CBC3-MD5
a1558 1
.Pp
d1829 1
a1829 1
.Ar filename.
d1875 1
a1875 1
.Nm dhparam.
d1896 1
d1983 8
d2057 1
d2065 1
a2065 1
.Sy Note:
d2152 8
d2204 1
d2214 1
d2216 1
d2287 8
d2657 1
a2657 1
.Nm dhparam.
d2671 1
d2704 8
d2735 1
d2782 8
d2893 4
d2906 1
a2906 1
.Op Fl url Ar responder_url
d2909 1
a2909 1
.Op Fl CApath Ar file
d2912 2
a2913 1
.Op Fl verify_certs Ar file
d2915 1
d2918 1
a2918 1
.Op Fl no_sig_verify
d2922 11
a2932 2
.Op Fl validity_period Ar nsec
.Op Fl status_age Ar nsec
a2935 3
.Sy WARNING:
this documentation is preliminary and subject to change.
.Pp
d2987 2
d3047 1
a3047 1
.It Fl verify_certs Ar file
d3082 1
a3082 1
.It Fl no_sig_verify
a3126 1
.Pp
d3359 1
a3359 1
.Fl stdin,
a3401 1
.Pp
d3408 1
a3408 1
.Em $1$xxxxxxxx$8XJIcl6ZXqBMCK0qFevqT1 .
d3426 1
d3470 8
d3531 1
d3654 8
d4201 1
d4304 1
a4304 1
.Ar filename.
d4415 8
d4655 1
a4655 1
.Em organizationUnitName , stateOrPrivinceName .
d4780 2
a4781 2
\& -----BEGIN CERTIFICATE REQUEST----
\& -----END CERTIFICATE REQUEST----
d4787 2
a4788 2
\& -----BEGIN NEW CERTIFICATE REQUEST----
\& -----END NEW CERTIFICATE REQUEST----
d4885 1
d4902 2
d5002 8
d5258 1
d5284 2
d5288 1
d5400 5
d5548 1
d5705 6
d6322 2
a6323 2
\& -----BEGIN PKCS7----
\& -----END PKCS7----
d6435 1
d6491 8
d6968 1
d7021 8
d7037 1
a7037 1
.Sx X509 TRUST OPTIONS
d7296 1
a7296 1
.It Fl CAcreateserial Ar filename
d7575 1
a7575 1
client use and change set its alias to "Steve's Class 1 CA":
d7578 2
a7579 2
\& $ openssl x509 -in cert.pem -addtrust sslclient \e
\&        -alias "Steve's Class 1 CA" -out trust.pem
d7587 2
a7588 2
\& -----BEGIN CERTIFICATE----
\& -----END CERTIFICATE----
d7594 2
a7595 2
\& -----BEGIN X509 CERTIFICATE----
\& -----END X509 CERTIFICATE----
d7601 2
a7602 2
\& -----BEGIN TRUSTED CERTIFICATE----
\& -----END TRUSTED CERTIFICATE----
@


1.6
log
@- add missing .El macros (7 of them!)
- use .Bl not .Bd for lists
- whitespace at EOL killed
- typos in macros
- .El -width shortened Ds -> XXXX
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.5 2003/03/22 08:02:03 david Exp $
d3479 1
a3479 1
Specifically the private key should be enclosed in a OCTET STRING,
@


1.5
log
@missing space between macro argument and comma
ok jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.4 2003/03/18 12:58:22 david Exp $
d10 1
a10 1
.\"    notice, this list of conditions and the following disclaimer. 
d54 1
a54 1
.\" 
d61 1
a61 1
.\" 
d68 1
a68 1
.\" 
d75 1
a75 1
.\" 
d90 1
a90 1
.\" 4. If you include any Windows specific code (or a derivative thereof) from 
d95 1
a95 1
.\" 
d107 1
a107 1
.\" 
d151 2
a152 2
library from the shell. 
It can be used for 
d158 1
a158 1
Creation of X.509 certificates, CSRs and CRLs 
d404 1
d427 1
a427 1
.Bl -tag -width Ds
d461 1
d467 1
a467 1
.Pp
d469 5
a473 5
.Pp
  229:d=3  hl=3 l= 141 prim: BIT STRING        
  373:d=2  hl=3 l= 162 cons: cont [ 3 ]        
  376:d=3  hl=3 l= 159 cons: SEQUENCE          
  379:d=4  hl=2 l=  29 cons: SEQUENCE          
d475 2
a476 2
  386:d=5  hl=2 l=  22 prim: OCTET STRING      
  410:d=4  hl=2 l= 112 cons: SEQUENCE          
d478 1
a478 1
  417:d=5  hl=2 l= 105 prim: OCTET STRING      
d480 1
a480 1
.Pp
d498 1
a498 1
Some knowledge of the ASN.1 structure is needed to interpret the output. 
d507 1
a507 1
\&    0:d=0  hl=3 l= 137 cons: SEQUENCE          
d510 1
d581 1
a581 1
.Bl -tag -width Ds
d606 1
a606 1
are assumed to be the names of files containing certificate requests. 
d713 1
a713 1
.Bl -tag -width Ds
d745 1
a745 1
can't handle V2 CRLs. 
d780 1
a780 1
.Bl -tag -width Ds
d785 1
a785 1
by whitespace and finally the long name. 
d819 1
a819 1
The number of days to certify a certificate for. 
d951 1
a951 1
tag in an HTML form to create a new private key. 
d1198 1
a1198 1
.Bl -tag -width -Ds
d1291 1
a1291 1
.Bl -tag -width Ds
d1488 1
a1489 1
.Pp
d1565 1
a1565 1
.Bl -tag -width Ds
d1574 1
a1574 1
This specifies the output format; the options have the same meaning as the 
d1653 1
a1653 1
.Bl -tag -width Ds
d1701 1
a1701 1
\& $ openssl crl2pkcs7 -nocrl -certfile newcert.pem 
d1749 1
a1749 1
.Bl -tag -width Ds
d1789 1
a1789 1
for all others. 
d1844 1
a1844 1
.Bl -tag -width Ds
d1857 1
a1857 1
This specifies the output format, the options have the same meaning as the 
d1911 1
a1911 1
If this value is present then the input file is ignored and 
d1922 1
d1938 1
a1938 1
programs are retained for now, but may have different purposes in future 
d2004 1
a2004 1
.Bl -tag -width Ds
d2024 1
a2024 1
This specifies the output format, the options have the same meaning as the 
d2056 1
a2056 1
These options encrypt the private key with the DES, triple DES, or the 
d2082 1
d2110 1
a2110 1
To convert a private key from PEM to DER format: 
d2142 1
a2142 1
.Bl -tag -width Ds
d2155 1
a2155 1
This specifies the output format; the options have the same meaning as the 
d2247 1
a2247 1
.Bl -tag -width Ds
d2592 1
a2592 1
.Bl -tag -width Ds
d2620 1
d2644 1
a2644 1
.Bl -tag -width Ds
d2657 1
a2657 1
These options encrypt the private key with the DES, triple DES, or the 
d2687 1
d2726 1
a2726 1
.Bl -tag -width Ds
d2828 1
a2828 1
.Bl -tag -width Ds
d3007 1
a3007 1
.Bl -tag -with DS
d3068 1
a3068 1
requests, default unlimited. 
d3250 1
a3250 1
.Bl -tag -width Ds
d3283 1
a3283 1
.Bl -tag -width Ds
d3293 1
d3319 1
a3319 1
.Bl -tag -width Ds
d3328 1
a3328 1
This specifies the output format, the options have the same meaning as the 
d3350 1
d3413 1
a3413 1
.Bl -tag -width Ds
d3435 1
a3435 1
This specifies the output format, the options have the same meaning as the 
d3525 1
d3570 2
a3571 3
.Bd -literal -offset indent
.It Ar \  \  PBE-MD2-DES PBE-MD5-DES
.br
d3574 1
a3574 2
.It Ar \  \  PBE-SHA1-RC2-64 PBE-MD2-RC2-64 PBE-MD5-RC2-64 PBE-SHA1-DES
.br
d3580 1
a3580 2
.It Ar \  \  PBE-SHA1-RC4-128 PBE-SHA1-RC4-40 PBE-SHA1-3DES PBE-SHA1-2DES PBE-SHA1-RC2-128 PBE-SHA1-RC2-40
.br
d3583 1
a3583 1
.Ed
d3675 1
a3675 1
.Bd -ragged -offset indent
d3730 1
a3730 1
.Ed
d3732 1
a3732 1
.Bd -ragged -offset indent
d3848 1
a3848 1
.Ed
d3999 1
a3999 1
.Bd -ragged -offset indent
d4074 1
a4074 1
.Bd -ragged -offset indent
d4087 1
a4087 1
This specifies the output format, the options have the same meaning as the 
d4233 1
a4233 1
This option causes field values to be interpreted as UTF8 strings, by 
d4277 1
a4277 1
.Ed
d4290 1
a4290 1
.Bd -ragged -offset indent
d4318 1
a4318 1
by whitespace and finally the long name. 
d4363 1
a4363 1
if the 
d4434 1
a4434 1
.Ed
d4770 1
a4770 1
.Bd -ragged -offset indent
d4789 1
a4789 1
This specifies the output format, the options have the same meaning as the 
d4825 1
a4825 1
These options encrypt the private key with the DES, triple DES, or the 
d4839 1
a4839 1
plain text, in addition to the encoded version. 
d4853 1
a4853 1
.Ed
d4907 1
a4907 1
format: 
d4952 1
a4952 1
.Bd -ragged -offset indent
d4966 1
a4966 1
The input file is an RSA public key. 
d4968 1
a4968 1
The input is a certificate containing an RSA public key. 
d5038 3
a5040 3
\&    0:d=0  hl=4 l= 742 cons: SEQUENCE          
\&    4:d=1  hl=4 l= 591 cons:  SEQUENCE          
\&    8:d=2  hl=2 l=   3 cons:   cont [ 0 ]        
d5043 1
a5043 1
\&   16:d=2  hl=2 l=  13 cons:   SEQUENCE          
d5045 4
a5048 4
\&   29:d=3  hl=2 l=   0 prim:    NULL              
\&   31:d=2  hl=2 l=  92 cons:   SEQUENCE          
\&   33:d=3  hl=2 l=  11 cons:    SET               
\&   35:d=4  hl=2 l=   9 cons:     SEQUENCE          
d5052 1
a5052 1
\&  599:d=1  hl=2 l=  13 cons:  SEQUENCE          
d5054 1
a5054 1
\&  612:d=2  hl=2 l=   0 prim:   NULL              
d5072 2
a5073 2
\&    0:d=0  hl=2 l=  32 cons: SEQUENCE          
\&    2:d=1  hl=2 l=  12 cons:  SEQUENCE          
d5075 2
a5076 2
\&   14:d=2  hl=2 l=   0 prim:   NULL              
\&   16:d=1  hl=2 l=  16 prim:  OCTET STRING      
d5138 1
a5138 1
.Bd -ragged -offset indent
d5264 1
a5264 1
.Ed
d5391 1
a5391 1
.Bd -ragged -offset indent
d5554 1
a5554 1
.Ed
d5561 1
a5561 1
from the client is displayed and any key presses will be sent to the client. 
d5566 1
a5566 1
.Bd -ragged -offset indent
d5580 1
a5580 1
.Ed
d5651 1
a5651 1
.Bd -ragged -offset indent
d5664 1
a5664 1
This specifies the output format, the options have the same meaning as the 
d5678 1
a5678 1
plain text in addition to the encoded version. 
d5694 1
a5694 1
.Ed
d5712 1
a5712 1
.Bd -ragged -offset indent
d5733 1
a5733 1
.Ed
d5799 1
a5799 1
.Bd -ragged -offset indent
d5889 1
a5889 1
.Em MIME 
d6004 1
a6004 1
a message. 
d6013 1
a6013 1
.Ed
d6058 1
a6058 1
.Bd -ragged -offset indent
d6074 1
a6074 1
.Ed
d6232 1
a6232 1
.Bd -ragged -offset indent
d6246 1
a6246 1
.Ed
d6271 1
a6271 1
.Bd -ragged -offset indent
d6317 1
a6317 1
.Ed
d6371 1
a6371 1
.Op Fl 
d6379 1
a6379 1
.Bd -ragged -offset indent
d6433 1
a6433 1
.It Fl 
d6447 1
a6447 1
.Ed
d6469 1
a6469 1
If a certificate is found which is its own issuer it is assumed 
d6514 1
a6514 1
all purposes. 
d6550 1
a6550 1
.Bd -ragged -offset indent
d6672 1
a6672 1
.Ed
d6707 1
a6707 1
.Bd -ragged -offset indent
d6727 1
a6727 1
.Ed
d6798 1
a6798 1
.Bd -ragged -offset indent
d6816 1
a6816 1
the options have the same meaning as the 
d6838 1
a6838 1
.Ed
d6848 1
a6848 1
.Bd -ragged -offset indent
d6912 1
a6912 1
.Ed
d6940 1
a6940 1
.Bd -ragged -offset indent
d6994 1
a6994 1
.Ed
d7001 1
a7001 1
.Bd -ragged -offset indent
d7004 1
a7004 1
private key. 
d7101 1
a7101 1
For example if the CA certificate file is called 
d7120 1
a7120 1
.Ed
d7136 1
a7136 1
.Bd -ragged -offset indent
d7263 1
a7263 1
.Ed
d7272 1
a7272 1
.Bd -ragged -offset indent
d7320 1
a7320 1
.Ed
d7497 1
a7497 1
.Bd -ragged -offset indent
d7576 1
a7576 1
extension is absent. 
d7588 1
@


1.4
log
@duplicate words: and and, the the
ok miod@@ jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: openssl.1,v 1.3 2003/03/11 04:22:40 david Exp $
d1333 1
a1333 1
.It Ar eNULL, NULL
d4340 1
a4340 1
.Ar md5, sha1
@


1.3
log
@$OpenBSD$
ok henning@@
@
text
@d1 1
a1 1
.\" $OpenBSD$
d1765 1
a1765 1
Verify the signature using the the public key in
@


1.2
log
@.Dd Month day, year
ok jmc@@
@
text
@d1 1
@


1.1
log
@jmc wrote a combination man page that covers all openssl(1) functionality,
based on the pod files from openssl.  This may need by-hand updating once
in a while, but at least now people can read a real man page instead of
the mess that the openssl team provides us with.
@
text
@d114 1
a114 1
.Dd February, 28 2003
@

