head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.22
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.20
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.6
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.2
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.16.0.16
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.14
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.12
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.10
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.8
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.6
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.4
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.08.16.16.41.46;	author krw;	state Exp;
branches;
next	1.20;
commitid	ScqME4mWPdd178mi;

1.20
date	2015.01.16.06.40.18;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	Uu5nFG3wCl0LACBb;

1.19
date	2009.10.27.23.59.53;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2009.01.09.19.55.27;	author stsp;	state Exp;
branches;
next	1.17;

1.17
date	2008.10.08.12.17.02;	author kili;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.21.19.36.04;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.01.18.32.20;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.09.16.22.03;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.36.54;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.19.10.43.55;	author henning;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.16.44.25;	author mpech;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.09.18.54.19;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.04.19.56.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.28.05;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.10.02.37.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.08.20.20.11.42;	author marc;	state Exp;
branches;
next	1.5;

1.5
date	97.07.18.05.49.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.12.20.18.13.44;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.10.08.26.10;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.08.01.13.42;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.49;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Nuke a bunch of whitespace nits seen while '%q' hunting.
@
text
@/*	$OpenBSD: verify.c,v 1.20 2015/01/16 06:40:18 deraadt Exp $	*/
/*	$NetBSD: verify.c,v 1.10 1995/03/07 21:26:28 cgd Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>
#include <dirent.h>
#include <fts.h>
#include <fnmatch.h>
#include <unistd.h>
#include <errno.h>
#include <stdio.h>
#include <limits.h>
#include "mtree.h"
#include "extern.h"

extern u_int32_t crc_total;
extern int ftsoptions;
extern int dflag, eflag, qflag, rflag, sflag, uflag;
extern char fullpath[PATH_MAX];

static NODE *root;
static char path[PATH_MAX];

static void	miss(NODE *, char *, size_t);
static int	vwalk(void);

int
verify(void)
{
	int rval;

	root = spec();
	rval = vwalk();
	miss(root, path, sizeof(path));
	return (rval);
}

static int
vwalk(void)
{
	FTS *t;
	FTSENT *p;
	NODE *ep, *level;
	int specdepth, rval;
	char *argv[2];

	argv[0] = ".";
	argv[1] = NULL;
	if ((t = fts_open(argv, ftsoptions, dsort)) == NULL)
		error("fts_open: %s", strerror(errno));
	level = root;
	specdepth = rval = 0;
	while ((p = fts_read(t))) {
		switch(p->fts_info) {
		case FTS_D:
			break;
		case FTS_DP:
			if (specdepth > p->fts_level) {
				for (level = level->parent; level->prev;
				      level = level->prev);
				--specdepth;
			}
			continue;
		case FTS_DNR:
		case FTS_ERR:
		case FTS_NS:
			(void)fprintf(stderr, "mtree: %s: %s\n",
			    RP(p), strerror(p->fts_errno));
			continue;
		default:
			if (dflag)
				continue;
		}

		if (specdepth != p->fts_level)
			goto extra;
		for (ep = level; ep; ep = ep->next)
			if ((ep->flags & F_MAGIC &&
			    !fnmatch(ep->name, p->fts_name, FNM_PATHNAME)) ||
			    !strcmp(ep->name, p->fts_name)) {
				ep->flags |= F_VISIT;
				if ((ep->flags & F_NOCHANGE) == 0 &&
				    compare(ep->name, ep, p))
					rval = MISMATCHEXIT;
				if (ep->flags & F_IGN)
					(void)fts_set(t, p, FTS_SKIP);
				else if (ep->child && ep->type == F_DIR &&
				    p->fts_info == FTS_D) {
					level = ep->child;
					++specdepth;
				}
				break;
			}

		if (ep)
			continue;
extra:
		if (!eflag) {
			(void)printf("extra: %s", RP(p));
			if (rflag) {
				if ((S_ISDIR(p->fts_statp->st_mode)
				    ? rmdir : unlink)(p->fts_accpath)) {
					(void)printf(", not removed: %s",
					    strerror(errno));
					rval = ERROREXIT;
				} else
					(void)printf(", removed");
			} else
				rval = MISMATCHEXIT;
			(void)putchar('\n');
		}
		(void)fts_set(t, p, FTS_SKIP);
	}
	(void)fts_close(t);
	if (sflag)
		(void)fprintf(stderr,
		    "mtree: %s checksum: %u\n", fullpath, crc_total);
	return (rval);
}

static void
miss(NODE *p, char *tail, size_t len)
{
	int create;
	char *tp;

	for (; p; p = p->next) {
		if ((p->flags & F_OPT) && !(p->flags & F_VISIT))
			continue;
		if (p->type != F_DIR && (dflag || p->flags & F_VISIT))
			continue;
		(void)strlcpy(tail, p->name, len);
		if (!(p->flags & F_VISIT)) {
			/* Don't print missing message if file exists as a
			   symbolic link and the -q flag is set. */
			struct stat statbuf;

			if (qflag && stat(path, &statbuf) == 0)
				p->flags |= F_VISIT;
			else
				(void)printf("missing: %s", path);
		}
		if (p->type != F_DIR) {
			putchar('\n');
			continue;
		}

		create = 0;
		if (!(p->flags & F_VISIT) && uflag) {
			if (!(p->flags & (F_UID | F_UNAME)))
			    (void)printf(" (not created: user not specified)");
			else if (!(p->flags & (F_GID | F_GNAME)))
			    (void)printf(" (not created: group not specified)");
			else if (!(p->flags & F_MODE))
			    (void)printf(" (not created: mode not specified)");
			else if (mkdir(path, S_IRWXU))
				(void)printf(" (not created: %s)",
				    strerror(errno));
			else {
				create = 1;
				(void)printf(" (created)");
			}
		}

		if (!(p->flags & F_VISIT))
			(void)putchar('\n');

		for (tp = tail; *tp; ++tp);
		*tp = '/';
		miss(p->child, tp + 1, len - (tp + 1 - tail));
		*tp = '\0';

		if (!create)
			continue;
		if (chown(path, p->st_uid, p->st_gid)) {
			(void)printf("%s: user/group/mode not modified: %s\n",
			    path, strerror(errno));
			continue;
		}
		if (chmod(path, p->st_mode))
			(void)printf("%s: permissions not set: %s\n",
			    path, strerror(errno));
	}
}
@


1.20
log
@Replace <sys/param.h> with <limits.h> and other less dirty headers where
possible.  Annotate <sys/param.h> lines with their current reasons.  Switch
to PATH_MAX, NGROUPS_MAX, HOST_NAME_MAX+1, LOGIN_NAME_MAX, etc.  Change
MIN() and MAX() to local definitions of MINIMUM() and MAXIMUM() where
sensible to avoid pulling in the pollution.  These are the files confirmed
through binary verification.
ok guenther, millert, doug (helped with the verification protocol)
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.19 2009/10/27 23:59:53 deraadt Exp $	*/
d88 1
a88 1
				      level = level->prev);  
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.18 2009/01/09 19:55:27 stsp Exp $	*/
a32 1
#include <sys/param.h>
d40 1
d47 1
a47 1
extern char fullpath[MAXPATHLEN];
d50 1
a50 1
static char path[MAXPATHLEN];
@


1.18
log
@Fix wrong 'extern' declaration of crc_total in mtree's verify.c.
Found by lint(1).
ok kjell@@ krw@@ grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.17 2008/10/08 12:17:02 kili Exp $	*/
a31 8

#ifndef lint
#if 0
static const char sccsid[] = "@@(#)verify.c	8.1 (Berkeley) 6/6/93";
#else
static const char rcsid[] = "$OpenBSD: verify.c,v 1.17 2008/10/08 12:17:02 kili Exp $";
#endif
#endif /* not lint */
@


1.17
log
@
Correct exit codes for extra files. PR 5072.

Reminded by millert. ok millert, deraaadt
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.16 2004/11/21 19:36:04 otto Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.16 2004/11/21 19:36:04 otto Exp $";
d52 1
a52 1
extern int32_t crc_total;
@


1.16
log
@Use the same ordering when verifying as with creating and replace
some hardcoded constants with symbolic ones. Noted by Ed Wandasiewicz
in PR 3991.

ok deraadt@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.15 2004/08/01 18:32:20 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.15 2004/08/01 18:32:20 deraadt Exp $";
d141 1
d144 2
a145 1
			}
@


1.15
log
@ansi cleanup; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.14 2004/07/09 16:22:03 deraadt Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.14 2004/07/09 16:22:03 deraadt Exp $";
d85 1
a85 1
	if ((t = fts_open(argv, ftsoptions, NULL)) == NULL)
@


1.14
log
@ansi
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.13 2003/06/02 23:36:54 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.13 2003/06/02 23:36:54 millert Exp $";
d156 1
a156 4
miss(p, tail, len)
	NODE *p;
	char *tail;
	size_t len;
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.12 2003/04/19 10:43:55 henning Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.12 2003/04/19 10:43:55 henning Exp $";
d64 1
a64 1
verify()
d75 1
a75 1
vwalk()
@


1.12
log
@string stuff, ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.11 2002/03/14 16:44:25 mpech Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.11 2002/03/14 16:44:25 mpech Exp $";
@


1.11
log
@kill more registers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.10 2002/03/09 18:54:19 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.10 2002/03/09 18:54:19 millert Exp $";
d64 1
a64 1
static void	miss(NODE *, char *);
d74 1
a74 1
	miss(root, path);
d160 1
a160 1
miss(p, tail)
d163 1
d173 1
a173 1
		(void)strcpy(tail, p->name);
d211 1
a211 1
		miss(p->child, tp + 1);
@


1.10
log
@Rename the new 'preserve' flag to 'nochange' for consistency with FreeBSD.
The old 'preserve' name is still accepted but is not documented and will
be removed in the future.
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.9 2002/03/04 19:56:39 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.9 2002/03/04 19:56:39 millert Exp $";
d81 3
a83 3
	register FTS *t;
	register FTSENT *p;
	register NODE *ep, *level;
d161 2
a162 2
	register NODE *p;
	register char *tail;
d164 2
a165 2
	register int create;
	register char *tp;
@


1.9
log
@Add a 'preserve' flag to tell mtree not to change the attributes of
a file/directory.  This is useful when you want to update children
of a directory but not the parent.
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.8 2002/02/16 21:28:05 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.8 2002/02/16 21:28:05 millert Exp $";
d122 1
a122 1
				if ((ep->flags & F_PRESERVE) == 0 &&
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.7 2001/08/10 02:37:14 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.7 2001/08/10 02:37:14 millert Exp $";
d122 2
a123 1
				if (compare(ep->name, ep, p))
@


1.7
log
@pass -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.6 1998/08/20 20:11:42 marc Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD: verify.c,v 1.6 1998/08/20 20:11:42 marc Exp $";
d64 2
a65 2
static void	miss __P((NODE *, char *));
static int	vwalk __P((void));
@


1.6
log
@add -q flag to silent messages of the type:
missing: some-file-name (not created: File exists)
which occurred of some-file-name was a path that contained a symbolic link
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.5 1997/07/18 05:49:04 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)verify.c	8.1 (Berkeley) 6/6/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD: verify.c,v 1.5 1997/07/18 05:49:04 millert Exp $";
d188 1
a188 1
		if (!(p->flags & F_VISIT) && uflag)
d202 1
@


1.5
log
@err() -> error() so we don't conflict with err(3).
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.4 1996/12/20 18:13:44 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: verify.c,v 1.4 1996/12/20 18:13:44 millert Exp $";
d58 1
a58 1
extern int dflag, eflag, rflag, sflag, uflag;
d172 10
a181 2
		if (!(p->flags & F_VISIT))
			(void)printf("missing: %s", path);
@


1.4
log
@Add back "optional" keyword that got nuked in merge of FreeBSD mods.
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.3 1996/12/10 08:26:10 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: verify.c,v 1.3 1996/12/10 08:26:10 deraadt Exp $";
d90 1
a90 1
		err("fts_open: %s", strerror(errno));
@


1.3
log
@merge freebsd mtree diffs, plus -Wall cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.2 1996/12/08 01:13:42 niklas Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: verify.c,v 1.2 1996/12/08 01:13:42 niklas Exp $";
d167 2
@


1.2
log
@64-bit clean + RCS tags
@
text
@d1 1
a1 1
/*	$OpenBSD: verify.c,v 1.10 1995/03/07 21:26:28 cgd Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: verify.c,v 1.10 1995/03/07 21:26:28 cgd Exp $";
d84 1
a84 1
	int ftsdepth, specdepth, rval;
d92 2
a93 2
	ftsdepth = specdepth = rval = 0;
	while (p = fts_read(t)) {
a95 1
			++ftsdepth; 
d98 1
a98 2
			--ftsdepth; 
			if (specdepth > ftsdepth) {
d108 1
a108 1
			    RP(p), strerror(errno));
d115 2
d118 2
a119 2
			if (ep->flags & F_MAGIC &&
			    !fnmatch(ep->name, p->fts_name, FNM_PATHNAME) ||
d136 1
d140 2
a141 1
				if (unlink(p->fts_accpath)) {
a166 2
		if (p->flags & F_OPT && !(p->flags & F_VISIT))
			continue;
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: verify.c,v 1.10 1995/03/07 21:26:28 cgd Exp $";
d56 2
a57 1
extern int crc_total, ftsoptions;
d152 1
a152 1
		    "mtree: %s checksum: %lu\n", fullpath, crc_total);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
