head	1.11;
access;
symbols
	OPENBSD_5_4:1.10.0.6
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.11
date	2013.12.15.17.37.25;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2012.07.17.11.34.47;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2009.12.16.20.42.26;	author sobrado;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.19.28.22;	author camield;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.27.14.08.43;	author camield;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.25.01.01.12;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.21.20.22.06;	author camield;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.25.15.35.09;	author camield;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.21.20.20.06;	author camield;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.21.20.04.12;	author camield;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.19.13.05.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove popa3d. Sorry, no plaintext password only daemons allowed anymore.
ok deraadt and co.
@
text
@/* $OpenBSD: params.h,v 1.10 2012/07/17 11:34:47 otto Exp $ */

/*
 * Global POP daemon parameters.
 */

#ifndef _POP_PARAMS_H
#define _POP_PARAMS_H

/*
 * Our name to use when talking to various interfaces.
 */
#define POP_SERVER			"popa3d"

/*
 * Are we going to be a standalone server or start via an inetd clone?
 */
#define POP_STANDALONE			1

#if POP_STANDALONE

/*
 * Should the command line options be supported?
 * If enabled, popa3d will default to inetd mode and will require a -D
 * to actually enable the standalone mode.
 */
#define POP_OPTIONS			1

/*
 * The address and port to listen on.
 */
#define DAEMON_ADDR			"0.0.0.0"	/* INADDR_ANY */
#define DAEMON_PORT			110

/*
 * Should libwrap be used?
 *
 * This may make things slower and also adds to code running as root,
 * so it is recommended that you use a packet filter instead. This
 * option is provided primarily as a way to meet conventions of certain
 * systems where all services obey libwrap access controls.
 */
#ifdef LIBWRAP
#define DAEMON_LIBWRAP			1
#else
#define DAEMON_LIBWRAP			0
#endif

#if DAEMON_LIBWRAP
/*
 * How do we talk to libwrap?
 */
#define DAEMON_LIBWRAP_IDENT		POP_SERVER
#endif

/*
 * Limit the number of POP sessions we can handle at a time to reduce
 * the impact of connection flood DoS attacks.
 */
#define MAX_SESSIONS			100
#define MAX_SESSIONS_PER_SOURCE		10
#define MAX_BACKLOG			5
#define MIN_DELAY			10

#endif

/*
 * Do we want to support virtual domains?
 */
#define POP_VIRTUAL			0

#if POP_VIRTUAL

/*
 * VIRTUAL_HOME_PATH is where the virtual domain root directories live.
 */
#define VIRTUAL_HOME_PATH		"/vhome"

/*
 * Subdirectories within each virtual domain root for the authentication
 * information and mailboxes, respectively. These defaults correspond to
 * full pathnames of the form "/vhome/IP/{auth,mail}/username".
 */
#define VIRTUAL_AUTH_PATH		"auth"
#define VIRTUAL_SPOOL_PATH		"mail"

/*
 * Do we want to support virtual domains only? Normally, if the connected
 * IP address doesn't correspond to a directory in VIRTUAL_HOME_PATH, the
 * authentication will be done globally.
 */
#define VIRTUAL_ONLY			0

#else

/*
 * We don't support virtual domains (!POP_VIRTUAL), so we're definitely
 * not virtual-only. Don't edit this.
 */
#define VIRTUAL_ONLY			0

#endif

/*
 * A pseudo-user to run as before authentication. The user and its UID
 * must not be used for any other purpose.
 */
#define POP_USER			POP_SERVER

/*
 * An empty directory to chroot to before authentication. The directory
 * and its parent directories must not be writable by anyone but root.
 */
#define POP_CHROOT			"/var/empty"

/*
 * Sessions will be closed if idle for longer than POP_TIMEOUT seconds.
 * RFC 1939 says that "such a timer MUST be of at least 10 minutes'
 * duration", so I've made 10 minutes the default. In practice, you
 * may want to reduce this to, say, 2 minutes.
 */
#define POP_TIMEOUT			(10 * 60)

/*
 * Do we want to support the obsolete LAST command, as defined in RFC
 * 1460? It has been removed from the protocol in 1994 by RFC 1725,
 * and isn't even mentioned in RFC 1939. Still, some software doesn't
 * work without it.
 */
#define POP_SUPPORT_LAST		1

/*
 * Introduce some sane limits on the mailbox size in order to prevent
 * a single huge mailbox from stopping the entire POP service.
 */
#define MAX_MAILBOX_MESSAGES		200000
#define MAX_MAILBOX_OPEN_BYTES		2000000000LL
#define MAX_MAILBOX_WORK_BYTES		2500000000LL

#if !VIRTUAL_ONLY

/*
 * Choose the password authentication method your system uses:
 *
 * AUTH_PASSWD		Use getpwnam(3) only, for *BSD or readable passwd;
 *
 * Note that there's no built-in password aging support.
 */
#define AUTH_PASSWD			1

#endif

#if POP_VIRTUAL || AUTH_PASSWD

/*
 * A salt used to waste some CPU time on dummy crypt(3) calls and make
 * it harder (but still far from impossible, on most systems) to check
 * for valid usernames. Adjust it for your crypt(3).
 */
/*  echo -n "dummyblowfishsalt" | encrypt -b 6 */
#define AUTH_DUMMY_SALT		"$2a$06$bycSsJMBAEDy1E6zzaL5u.vd4GlIrmCWyDgB33OD36h6mrRympUwS"

#endif

/*
 * Message to return to the client when authentication fails. You can
 * #undef this for no message.
 */
#define AUTH_FAILED_MESSAGE		"Authentication failed (bad password?)"

#if !VIRTUAL_ONLY

/*
 * Your mail spool directory. Note: only local (non-NFS) mode 775 mail
 * spools are currently supported.
 *
 * #undef this for qmail-style $HOME/Mailbox mailboxes.
 */
#define MAIL_SPOOL_PATH			"/var/mail"

#ifndef MAIL_SPOOL_PATH
/*
 * The mailbox file name relative to the user's home directory.
 */
#define HOME_MAILBOX_NAME		"Mailbox"
#endif

#endif

/*
 * Locking method your system uses for user mailboxes. It is important
 * that you set this correctly.
 *
 * *BSDs use flock(2), others typically use fcntl(2).
 */
#define LOCK_FCNTL			0
#define LOCK_FLOCK			1

/*
 * How do we talk to syslogd? These should be fine for most systems.
 */
#define SYSLOG_IDENT			POP_SERVER
#define SYSLOG_OPTIONS			LOG_PID
#define SYSLOG_FACILITY			LOG_DAEMON
#define SYSLOG_PRI_LO			LOG_INFO
#define SYSLOG_PRI_HI			LOG_NOTICE
#define SYSLOG_PRI_ERROR		LOG_CRIT

/*
 * There's probably no reason to touch anything below this comment.
 */

/*
 * According to RFC 1939: "Keywords and arguments are each separated by
 * a single SPACE character. Keywords are three or four characters long.
 * Each argument may be up to 40 characters long." We're only processing
 * up to two arguments, so it is safe to truncate after this length.
 */
#define POP_BUFFER_SIZE			0x80

/*
 * There's no reason to change this one either. Making this larger would
 * waste memory, and smaller values could make the authentication fail.
 */
#define AUTH_BUFFER_SIZE		(2 * POP_BUFFER_SIZE)

#if POP_VIRTUAL

/*
 * Buffer size for reading entire per-user authentication files.
 */
#define VIRTUAL_AUTH_SIZE		0x100

#endif

/*
 * File buffer sizes to use while parsing the mailbox and retrieving a
 * message, respectively. Can be changed.
 */
#define FILE_BUFFER_SIZE		0x10000
#define RETR_BUFFER_SIZE		0x8000

/*
 * The mailbox parsing code isn't allowed to truncate lines earlier than
 * this length. Keep this at least as large as the longest header field
 * name we need to check for, but not too large for performance reasons.
 */
#define LINE_BUFFER_SIZE		0x20

#endif
@


1.10
log
@Use correct types for (large) constants. Found a diff like this in my
tree; don't know where it was coming from. ok krw@@ mikeb@@
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.9 2009/12/16 20:42:26 sobrado Exp $ */
@


1.9
log
@enforce less restrictive limits to mailbox sizes and improve message
reported on failure conditions; increasing the maximum number of
messages is not required, as the number of messages stored on
mailboxes has not grown over the years as much as the size of their
attachments.

miod@@ has observed that the message reported was too obscure.

"this can go in" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.8 2003/05/12 19:28:22 camield Exp $ */
d137 2
a138 2
#define MAX_MAILBOX_OPEN_BYTES		2000000000
#define MAX_MAILBOX_WORK_BYTES		2500000000
@


1.8
log
@Sync to 0.6.2

- UIDL digest calculation has been improved
- minor bug fixes
- -V switch to show version
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.7 2002/03/27 14:08:43 camield Exp $ */
d137 2
a138 2
#define MAX_MAILBOX_OPEN_BYTES		200000000
#define MAX_MAILBOX_WORK_BYTES		250000000
@


1.7
log
@Mostly cosmetic update so we can call it 0.5.

ok millert@@, fgsch@@
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.6 2001/09/25 01:01:12 deraadt Exp $ */
d136 3
a138 2
#define MAX_MAILBOX_MESSAGES		100000
#define MAX_MAILBOX_BYTES		100000000
d194 1
a194 1
 * *BSD's use flock(2), others typically use fcntl(2).
@


1.6
log
@use /var/empty
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.5 2001/09/21 20:22:06 camield Exp $ */
d39 1
a39 1
 * so it is recommended that you use a packet filter instead.  This
d192 2
@


1.5
log
@update to 0.4.9.4:
- stand-alone or inetd selectable from command-line (-D = daemon mode)
- logging priorities more accurate
- chroots to empty dir
- tcp wrappers support
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.4 2001/08/25 15:35:09 camield Exp $ */
d114 1
a114 1
#define POP_CHROOT			"/usr/share/empty"
@


1.4
log
@Lower syslog priority from NOTICE to INFO to avoid
logging ending up in daemon _and_ messages.

ok millert@@, solar
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.3 2001/08/21 20:20:06 camield Exp $ */
d11 5
d23 7
d36 21
d105 8
a112 2
 * An unprivileged dummy user to run as before authentication. The user
 * and its UID must not be used for any other purpose.
d114 1
a114 1
#define POP_USER			"popa3d"
d175 2
d180 7
d199 1
a199 1
#define SYSLOG_IDENT			"popa3d"
d202 3
a204 1
#define SYSLOG_PRIORITY			LOG_INFO
@


1.3
log
@adjust dummy salt: normal users have 6 blowfish rounds
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.2 2001/08/21 20:04:12 camield Exp $ */
d154 1
a154 1
#define SYSLOG_PRIORITY			LOG_NOTICE
@


1.2
log
@use FLOCK

from Solar;  ran it by millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.1 2001/08/19 13:05:57 deraadt Exp $ */
d120 2
a121 2
/*  echo -n "dummyblowfishsalt" | encrypt -b 7 */
#define AUTH_DUMMY_SALT			"$2a$07$deZMiFIouL0vgRsEG.AJY.Jx2Z8wJj3g5qs11UQWrBj8MERIu/rXi"
@


1.1
log
@libexec is the wrong place for popa3d, since it can be started WITHOUT inetd
@
text
@d1 1
a1 1
/* $OpenBSD: params.h,v 1.6 2001/08/16 20:02:42 camield Exp $ */
d145 2
a146 2
#define LOCK_FCNTL			1
#define LOCK_FLOCK			0
@

