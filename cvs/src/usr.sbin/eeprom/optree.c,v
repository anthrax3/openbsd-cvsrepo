head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.6.0.28
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.30
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.22
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.26
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2016.05.21.19.08.29;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	Gzw2W2h7s526dJR1;

1.7
date	2016.05.21.19.06.15;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	DQvHxnGdxFdJdefs;

1.6
date	2009.01.14.21.05.53;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.23.12.05.43;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.22.20.23.19;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.12.20.54.54;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.09.14.19.28;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.04.23.28.26;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Byteswap 32-bit "cells" on little-endian platforms before printing them.
OpenFirware/FDT is defined to be big-endian.  This makes eeprom -p print
sensible numbers on little-endian platforms.

ok deraadt@@
@
text
@/*	$OpenBSD: optree.c,v 1.7 2016/05/21 19:06:15 kettenis Exp $	*/

/*
 * Copyright (c) 2007 Federico G. Schwindt <fgsch@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for
 * any purpose with or without fee is hereby granted, provided that
 * the above copyright notice and this permission notice appear in all
 * copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
 * OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/ioctl.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

#include <machine/openpromio.h>

#include "defs.h"

extern  char *path_openprom;

static void
op_print(struct opiocdesc *opio, int depth)
{
	char *p;
	int i, special;
	uint32_t cell;

	opio->op_name[opio->op_namelen] = '\0';
	printf("%*s%s: ", depth * 4, " ", opio->op_name);
	if (opio->op_buflen > 0) {
		opio->op_buf[opio->op_buflen] = '\0';
		special = 0;

		/*
		 * XXX This allows multiple NUL characters within
		 * string-valued properties, which may not be what we
		 * want.  But on macppc we have string-values
		 * properties that end with multiple NUL characters,
		 * and the serial number has them embedded within the
		 * string.
		 */
		if (opio->op_buf[0] != '\0') {
			for (i = 0; i < opio->op_buflen; i++) {
				p = &opio->op_buf[i];
				if (*p >= ' ' && *p <= '~')
					continue;
				if (*p == '\0') {
					if (i + 1 < opio->op_buflen)
						p++;
					if (*p >= ' ' && *p <= '~')
						continue;
					if (*p == '\0')
						continue;
				}

				special = 1;
				break;
			}
		} else {
			if (opio->op_buflen > 1)
				special = 1;
		}

		if (special) {
			for (i = 0; opio->op_buflen - i >= sizeof(int);
			    i += sizeof(int)) {
				if (i)
					printf(".");
				cell = *(uint32_t *)&opio->op_buf[i];
				printf("%08x", betoh32(cell));
			}
			if (i < opio->op_buflen) {
				if (i)
					printf(".");
				for (; i < opio->op_buflen; i++) {
					printf("%02x",
					    *(u_char *)&opio->op_buf[i]);
				}
			}
		} else {
			for (i = 0; i < opio->op_buflen;
			    i += strlen(&opio->op_buf[i]) + 1) {
				if (i && strlen(&opio->op_buf[i]) == 0)
					continue;
				if (i)
					printf(" + ");
				printf("'%s'", &opio->op_buf[i]);
			}
		}
	} else if(opio->op_buflen < 0)
		printf("too large");
	printf("\n");
}

void
op_nodes(int fd, int node, int depth)
{
	char op_buf[BUFSIZE * 8];
	char op_name[BUFSIZE];
	struct opiocdesc opio;

	memset(op_name, 0, sizeof(op_name));
	opio.op_nodeid = node;
	opio.op_buf = op_buf;
	opio.op_name = op_name;

	if (!node) {
		if (ioctl(fd, OPIOCGETNEXT, &opio) < 0)
			err(1, "OPIOCGETNEXT");
		node = opio.op_nodeid;
	} else
		printf("\n%*s", depth * 4, " ");

	printf("Node 0x%x\n", node);

	for (;;) {
		opio.op_buflen = sizeof(op_buf);
		opio.op_namelen = sizeof(op_name);

		/* Get the next property. */
		if (ioctl(fd, OPIOCNEXTPROP, &opio) < 0)
			err(1, "OPIOCNEXTPROP");

		op_buf[opio.op_buflen] = '\0';
		(void)strlcpy(op_name, op_buf, sizeof(op_name));
		opio.op_namelen = strlen(op_name);

		/* If it's the last, punt. */
		if (opio.op_namelen == 0)
			break;

		bzero(op_buf, sizeof(op_buf));
		opio.op_buflen = sizeof(op_buf);

		/* And its value. */
		if (ioctl(fd, OPIOCGET, &opio) < 0) {
			if (errno != ENOMEM)
				err(1, "OPIOCGET");

			opio.op_buflen = -1;	/* for op_print */
		}

		op_print(&opio, depth + 1);
	}

	/* Get next child. */
	if (ioctl(fd, OPIOCGETCHILD, &opio) < 0)
		err(1, "OPIOCGETCHILD");
	if (opio.op_nodeid)
		op_nodes(fd, opio.op_nodeid, depth + 1);

	/* Get next node/sibling. */
	opio.op_nodeid = node;
	if (ioctl(fd, OPIOCGETNEXT, &opio) < 0)
		err(1, "OPIOCGETNEXT");
	if (opio.op_nodeid)
		op_nodes(fd, opio.op_nodeid, depth);
}

void
op_tree(void)
{
	int fd;

	if ((fd = open(path_openprom, O_RDONLY, 0640)) < 0)
		err(1, "open: %s", path_openprom);
	op_nodes(fd, 0, 0);
	(void)close(fd);
}
@


1.7
log
@Zero op_name when we start enumerating properties such that we don't risk
skipping the properties of the root node when the lookup of random stack
garbage fails.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.6 2009/01/14 21:05:53 fgsch Exp $	*/
d40 1
d83 2
a84 1
				printf("%08x", *(int *)(long)&opio->op_buf[i]);
@


1.6
log
@update license.
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.5 2008/03/23 12:05:43 miod Exp $	*/
d114 1
@


1.5
log
@Do not abort walking the tree if a node's contents is too large; allows
eeprom -p to be used on more macppc models.
ok fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.4 2008/02/22 20:23:19 kettenis Exp $	*/
a4 1
 * All rights reserved.
d6 4
a9 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d11 8
a18 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@


1.4
log
@Allow multiple NUL characters within string-valued properties (but add an
XXX saying that this may not exactly be what we want).  This makes the output
on macppc look much saner.

ok fgsch@@, beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.3 2007/11/12 20:54:54 kettenis Exp $	*/
d31 1
d110 2
a111 1
	}
d155 6
a160 2
		if (ioctl(fd, OPIOCGET, &opio) < 0)
			err(1, "OPIOCGET");
@


1.3
log
@Make this compile on macppc (OpenPROM support only) and build it there.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.2 2007/09/09 14:19:28 fgsch Exp $	*/
d54 8
d65 9
a73 5
				if ((*p < ' ' || *p > '~') && (*p != '\0' ||
				    (i + 1 < opio->op_buflen &&
				    (*++p < ' ' || *p > '~')))) {
					special = 1;
					break;
d75 3
d102 2
@


1.2
log
@better printing code, fixing certain properties; reported by kettenis,
tested by him and Johan Mson Lindman.  ok kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: optree.c,v 1.1 2007/09/04 23:28:26 fgsch Exp $	*/
a28 1
#include <machine/openpromio.h>
d36 4
d99 2
a100 2
	char op_buf[BUFSIZ * 4];
	char op_name[BUFSIZ];
@


1.1
log
@add support to print the derivated tree from the OpenPROM (alas devinfo or
prtconf); ok kettenis@@.
thanks to the various people who helped me test in different sparc* machines.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 12
a62 5
		for (i = 0; i < opio->op_buflen; i++) {
			p = &opio->op_buf[i];
			if ((*p < ' ' || *p > '~') && (*p != '\0' ||
			    (i + 1 < opio->op_buflen &&
			    (*++p < ' ' || *p > '~')))) {
a63 2
				break;
			}
d74 2
a75 1
				printf(".");
@

