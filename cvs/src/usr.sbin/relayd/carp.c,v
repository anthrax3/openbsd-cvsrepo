head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2016.08.18.00.45.52;	author jsg;	state Exp;
branches;
next	1.11;
commitid	3OhWvDdLexAcqeos;

1.11
date	2015.01.22.17.42.09;	author reyk;	state Exp;
branches;
next	1.10;
commitid	puppem00jmzmdm4f;

1.10
date	2015.01.16.15.06.40;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	tOv8XK6tLyhEfayc;

1.9
date	2012.11.27.05.00.28;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.05.12.01.43;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.30.12.22.03;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.30.12.07.26;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.07.17.17.00;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.24.17.07.28;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.26.16.10.24;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.22.05.58.06;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2007.02.22.03.32.39;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.12
log
@fix fd leaks in error paths
ok reyk@@
@
text
@/*	$OpenBSD: carp.c,v 1.11 2015/01/22 17:42:09 reyk Exp $ */

/*
 * Copyright (c) 2006 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/queue.h>
#include <sys/ioctl.h>

#include <net/if.h>

#include <errno.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

#include "relayd.h"

struct carpgroup {
	TAILQ_ENTRY(carpgroup)	 entry;
	char			*group;
	int			 do_demote;
	int			 changed_by;
};

TAILQ_HEAD(carpgroups, carpgroup)	carpgroups =
    TAILQ_HEAD_INITIALIZER(carpgroups);

struct carpgroup	*carp_group_find(char *group);
int			 carp_demote_ioctl(char *, int);

struct carpgroup *
carp_group_find(char *group)
{
	struct carpgroup	*c;

	TAILQ_FOREACH(c, &carpgroups, entry)
		if (!strcmp(c->group, group))
			return (c);

	return (NULL);
}

int
carp_demote_init(char *group, int force)
{
	struct carpgroup	*c;
	int			 level;

	if ((c = carp_group_find(group)) == NULL) {
		if ((c = calloc(1, sizeof(struct carpgroup))) == NULL) {
			log_warn("%s: calloc", __func__);
			return (-1);
		}
		if ((c->group = strdup(group)) == NULL) {
			log_warn("%s: strdup", __func__);
			free(c);
			return (-1);
		}

		/* only demote if this group already is demoted */
		if ((level = carp_demote_get(group)) == -1) {
			free(c->group);
			free(c);
			return (-1);
		}
		if (level > 0 || force)
			c->do_demote = 1;

		TAILQ_INSERT_TAIL(&carpgroups, c, entry);
	}

	return (0);
}

void
carp_demote_shutdown(void)
{
	struct carpgroup	*c;

	while ((c = TAILQ_FIRST(&carpgroups)) != NULL) {
		TAILQ_REMOVE(&carpgroups, c, entry);
		if (c->do_demote && c->changed_by > 0)
			carp_demote_ioctl(c->group, -c->changed_by);

		free(c->group);
		free(c);
	}
}

int
carp_demote_get(char *group)
{
	int			s;
	struct ifgroupreq	ifgr;

	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		log_warn("%s: socket", __func__);
		return (-1);
	}

	bzero(&ifgr, sizeof(ifgr));
	if (strlcpy(ifgr.ifgr_name, group, sizeof(ifgr.ifgr_name)) >=
	    sizeof(ifgr.ifgr_name)) {
		log_warn("%s: invalid group", __func__);
		close(s);
		return (-1);
	}

	if (ioctl(s, SIOCGIFGATTR, (caddr_t)&ifgr) == -1) {
		if (errno == ENOENT)
			log_warnx("%s: group \"%s\" does not exist",
			    __func__, group);
		else
			log_warn("%s: ioctl", __func__);
		close(s);
		return (-1);
	}

	close(s);
	return ((int)ifgr.ifgr_attrib.ifg_carp_demoted);
}

int
carp_demote_set(char *group, int demote)
{
	struct carpgroup	*c;

	if ((c = carp_group_find(group)) == NULL) {
		log_warnx("%s: carp group %s not found", __func__, group);
		return (-1);
	}

	if (c->changed_by + demote < 0) {
		log_warnx("%s: changed_by + demote < 0", __func__);
		return (-1);
	}

	if (c->do_demote && carp_demote_ioctl(group, demote) == -1)
		return (-1);

	c->changed_by += demote;

	/* enable demotion when we return to 0, i. e. all sessions up */
	if (demote < 0 && c->changed_by == 0)
		c->do_demote = 1;

	return (0);
}

int
carp_demote_reset(char *group, int value)
{
	int			 level;
	int			 demote = 0;

	if (value < 0) {
		log_warnx("%s: value < 0", __func__);
		return (-1);
	}

	if ((level = carp_demote_get(group)) == -1)
		return (-1);
	if (level == value)
		return (0);

	demote -= level;
	demote += value;

	if (carp_demote_ioctl(group, demote) == -1)
		return (-1);

	return (0);
}

int
carp_demote_ioctl(char *group, int demote)
{
	int			s, res;
	struct ifgroupreq	ifgr;

	if ((s = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		log_warn("%s: socket", __func__);
		return (-1);
	}

	bzero(&ifgr, sizeof(ifgr));
	if (strlcpy(ifgr.ifgr_name, group, sizeof(ifgr.ifgr_name)) >=
	    sizeof(ifgr.ifgr_name)) {
		log_warn("%s: invalid group", __func__);
		close(s);
		return (-1);
	}
	ifgr.ifgr_attrib.ifg_carp_demoted = demote;

	if ((res = ioctl(s, SIOCSIFGATTR, (caddr_t)&ifgr)) == -1)
		log_warn("%s: unable to %s the demote state "
		    "of group '%s'", __func__,
		    (demote > 0) ? "increment" : "decrement", group);
	else
		log_info("%s the demote state of group '%s'",
		    (demote > 0) ? "incremented" : "decremented", group);

	close(s);
	return (res);
}
@


1.11
log
@Clean up the relayd headers with help of include-what-you-use and some
manual review.  Based on common practice, relayd.h now includes the
necessary headers for itself.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.10 2015/01/16 15:06:40 deraadt Exp $ */
d120 1
d205 1
@


1.10
log
@Adapt to <limits.h> universe.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.9 2012/11/27 05:00:28 guenther Exp $ */
d19 1
d21 1
a29 3
#include <event.h>

#include <openssl/ssl.h>
@


1.9
log
@Add format attributes to the proper functions and then fix the warnings
that gcc then reports when compiling with -DDEBUG=2

ok reyk@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.8 2011/05/05 12:01:43 reyk Exp $ */
a18 1
#include <sys/param.h>
@


1.8
log
@Update all logging and debug functions to use the __func__ macro
instead of static function names.  __func__ is C99 and perfectly fine
to use. It also avoids printing errors; for example if a statement
log_debug("foo:"..) was moved or copied from function foo() to bar()
and the log message was not updated...
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.7 2009/09/30 12:22:03 claudio Exp $ */
d72 1
a72 1
			log_warn("%s: strdup, __func__");
@


1.7
log
@Bring in sync with the bgpd version of carp.c. This fixes a memory leak
in an error path.
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.6 2009/09/30 12:07:26 claudio Exp $ */
d68 1
a68 1
			log_warn("carp_demote_init calloc");
d72 1
a72 1
			log_warn("carp_demote_init strdup");
d114 1
a114 1
		log_warn("carp_demote_get: socket");
d121 1
a121 1
		log_warn("carp_demote_get: invalid group");
d127 2
a128 1
			log_warnx("group \"%s\" does not exist", group);
d130 1
a130 1
			log_warn("carp_demote_get: ioctl");
d145 1
a145 1
		log_warnx("carp_group_find for %s returned NULL?!", group);
d150 1
a150 1
		log_warnx("carp_demote_set: changed_by + demote < 0");
d173 1
a173 1
		log_warnx("carp_demote_reset: value < 0");
d198 1
a198 1
		log_warn("carp_demote_get: socket");
d205 1
a205 1
		log_warn("carp_demote_ioctl: invalid group");
d211 3
a213 3
		log_warn("unable to %s the demote state "
		    "of group '%s'", (demote > 0) ? "increment" : "decrement",
		    group);
@


1.6
log
@carp_demote_ioctl() can handle more then +/-1 steps so there is no need to
loop in the shutdown case. OK henning@@
Fix an error message to include the correct function name.
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.5 2007/12/07 17:17:00 reyk Exp $ */
d78 3
a80 1
		if ((level = carp_demote_get(group)) == -1)
d82 1
@


1.5
log
@hoststated gets renamed to relayd.  easier to type, and actually says
what the daemon does - it is a relayer that pays attention to the status
of pools of hosts; not a status checkers that happens to do some relaying
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.4 2007/11/24 17:07:28 reyk Exp $ */
d72 1
a72 1
			log_warn("carp_demote_init calloc");
d96 2
a97 3
		for (; c->changed_by > 0; c->changed_by--)
			if (c->do_demote)
				carp_demote_ioctl(c->group, -1);
@


1.4
log
@sort includes, adjust to style(9)
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.3 2007/02/26 16:10:24 reyk Exp $ */
d33 1
a33 1
#include "hoststated.h"
@


1.3
log
@handle strlcpy return values, make lint happy
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.2 2007/02/22 05:58:06 reyk Exp $ */
d19 1
a19 1
#include <sys/types.h>
d22 1
a22 1
#include <sys/param.h>
@


1.2
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.1 2007/02/22 03:32:39 reyk Exp $ */
d117 5
a121 1
	strlcpy(ifgr.ifgr_name, group, sizeof(ifgr.ifgr_name));
d200 5
a204 1
	strlcpy(ifgr.ifgr_name, group, sizeof(ifgr.ifgr_name));
@


1.1
log
@Add layer 7 functionality to hoststated used for layer 7
loadbalancing, SSL acceleration, general-purpose TCP relaying, and
transparent proxying.

see hoststated.conf(5) and my upcoming article on undeadly.org for
details.

ok to commit deraadt@@ pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: carp.c,v 1.3 2006/06/19 12:06:24 henning Exp $ */
d76 1
a76 1
		
d207 1
a207 1
	close (s);
@

