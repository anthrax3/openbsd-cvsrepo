head	1.20;
access;
symbols
	OPENBSD_6_1:1.20.0.2
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.14.0.14
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6;
locks; strict;
comment	@ * @;


1.20
date	2016.09.02.14.45.51;	author reyk;	state Exp;
branches;
next	1.19;
commitid	vcV98N2DyJGMwDyQ;

1.19
date	2015.12.02.13.41.27;	author reyk;	state Exp;
branches;
next	1.18;
commitid	vBNcEM4jmO1KceIa;

1.18
date	2015.01.22.17.42.09;	author reyk;	state Exp;
branches;
next	1.17;
commitid	puppem00jmzmdm4f;

1.17
date	2015.01.16.15.06.40;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	tOv8XK6tLyhEfayc;

1.16
date	2014.06.25.11.05.15;	author reyk;	state Exp;
branches;
next	1.15;
commitid	QSckC3KrSjGNpjr5;

1.15
date	2014.04.20.16.13.36;	author reyk;	state Exp;
branches;
next	1.14;

1.14
date	2011.05.26.14.48.20;	author reyk;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.26.14.38.03;	author reyk;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.09.12.08.47;	author reyk;	state Exp;
branches;
next	1.11;

1.11
date	2011.02.28.00.09.11;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.05.23.39.51;	author pyr;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.05.00.04.01;	author pyr;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.17.09.58.40;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.05.16.37.55;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.13.11.32.59;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.07.17.17.00;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.24.17.07.28;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.13.17.50.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.12.15.16.10;	author msf;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.29.17.12.04;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Split "struct relayd" into two structs: "struct relayd" and "struct
relayd_config".  This way we can send all the relevant global
configuration to the children, not just the flags and the opts.

With input from and
OK claudio@@ benno@@
@
text
@/*	$OpenBSD: check_script.c,v 1.19 2015/12/02 13:41:27 reyk Exp $	*/

/*
 * Copyright (c) 2007 - 2014 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/wait.h>
#include <sys/time.h>

#include <errno.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <pwd.h>

#include "relayd.h"

void	 script_sig_alarm(int);

pid_t			 child = -1;

void
check_script(struct relayd *env, struct host *host)
{
	struct ctl_script	 scr;
	struct table		*table;

	if ((table = table_find(env, host->conf.tableid)) == NULL)
		fatalx("check_script: invalid table id");

	host->last_up = host->up;
	host->flags &= ~(F_CHECK_SENT|F_CHECK_DONE);

	scr.host = host->conf.id;
	if ((strlcpy(scr.name, host->conf.name,sizeof(scr.name)) >=
	    sizeof(scr.name)) ||
	    (strlcpy(scr.path, table->conf.path, sizeof(scr.path)) >=
	    sizeof(scr.path)))
		fatalx("invalid script path");
	memcpy(&scr.timeout, &table->conf.timeout, sizeof(scr.timeout));

	proc_compose(env->sc_ps, PROC_PARENT, IMSG_SCRIPT, &scr, sizeof(scr));
}

void
script_done(struct relayd *env, struct ctl_script *scr)
{
	struct host		*host;

	if ((host = host_find(env, scr->host)) == NULL)
		fatalx("hce_dispatch_parent: invalid host id");

	if (scr->retval < 0)
		host->up = HOST_UNKNOWN;
	else if (scr->retval == 0)
		host->up = HOST_DOWN;
	else
		host->up = HOST_UP;
	host->flags |= F_CHECK_DONE;

	hce_notify_done(host, host->up == HOST_UP ?
	    HCE_SCRIPT_OK : HCE_SCRIPT_FAIL);
}

void
script_sig_alarm(int sig)
{
	int save_errno = errno;

	if (child != -1)
		kill(child, SIGKILL);
	errno = save_errno;
}

int
script_exec(struct relayd *env, struct ctl_script *scr)
{
	int			 status = 0, ret = 0;
	sig_t			 save_quit, save_int, save_chld;
	struct itimerval	 it;
	struct timeval		*tv;
	const char		*file, *arg;
	struct passwd		*pw;

	if ((env->sc_conf.flags & F_SCRIPT) == 0) {
		log_warnx("%s: script disabled", __func__);
		return (-1);
	}

	DPRINTF("%s: running script %s, host %s",
	    __func__, scr->path, scr->name);

	arg = scr->name;
	file = scr->path;
	tv = &scr->timeout;

	save_quit = signal(SIGQUIT, SIG_IGN);
	save_int = signal(SIGINT, SIG_IGN);
	save_chld = signal(SIGCHLD, SIG_DFL);

	switch (child = fork()) {
	case -1:
		ret = -1;
		goto done;
	case 0:
		signal(SIGQUIT, SIG_DFL);
		signal(SIGINT, SIG_DFL);
		signal(SIGCHLD, SIG_DFL);

		if ((pw = getpwnam(RELAYD_USER)) == NULL)
			fatal("script_exec: getpwnam");
		if (chdir("/") == -1)
			fatal("script_exec: chdir(\"/\")");
		if (setgroups(1, &pw->pw_gid) ||
		    setresgid(pw->pw_gid, pw->pw_gid, pw->pw_gid) ||
		    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
			fatal("script_exec: can't drop privileges");

		/*
		 * close fds before executing an external program, to
		 * prevent access to internal fds, eg. IMSG connections
		 * of internal processes.
		 */
		closefrom(STDERR_FILENO + 1);

		execlp(file, file, arg, (char *)NULL);
		_exit(0);
		break;
	default:
		/* Kill the process after a timeout */
		signal(SIGALRM, script_sig_alarm);
		bzero(&it, sizeof(it));
		bcopy(tv, &it.it_value, sizeof(it.it_value));
		setitimer(ITIMER_REAL, &it, NULL);

		waitpid(child, &status, 0);
		break;
	}

	switch (ret) {
	case -1:
		ret = -1;
		break;
	default:
		if (WIFEXITED(status))
			ret = WEXITSTATUS(status);
		else
			ret = 0;
	}

 done:
	/* Disable the process timeout timer */
	bzero(&it, sizeof(it));
	setitimer(ITIMER_REAL, &it, NULL);
	child = -1;

	signal(SIGQUIT, save_quit);
	signal(SIGINT, save_int);
	signal(SIGCHLD, save_chld);
	signal(SIGALRM, SIG_DFL);

	return (ret);
}
@


1.19
log
@In most cases we don't need all arguments of proc_compose*_imsg(),
so add a shortcut proc_compose*() that skips all of them.  Only use the
full argument list if needed.  The functions with full argument lists can
eventually be replaced with a nicer transaction-based approach later.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.18 2015/01/22 17:42:09 reyk Exp $	*/
d98 1
a98 1
	if ((env->sc_flags & F_SCRIPT) == 0) {
@


1.18
log
@Clean up the relayd headers with help of include-what-you-use and some
manual review.  Based on common practice, relayd.h now includes the
necessary headers for itself.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.17 2015/01/16 15:06:40 deraadt Exp $	*/
d55 1
a55 2
	proc_compose_imsg(env->sc_ps, PROC_PARENT, 0, IMSG_SCRIPT,
	    -1, &scr, sizeof(scr));
@


1.17
log
@Adapt to <limits.h> universe.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.16 2014/06/25 11:05:15 reyk Exp $	*/
a18 2
#include <sys/queue.h>
#include <sys/socket.h>
d20 1
a21 4
#include <net/if.h>

#include <limits.h>
#include <event.h>
a27 3
#include <err.h>

#include <openssl/ssl.h>
@


1.16
log
@sync copyright to reality according to my last changes
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.15 2014/04/20 16:13:36 reyk Exp $	*/
a18 1
#include <sys/param.h>
@


1.15
log
@Check strlcpy of the script path names for overflow and use the size of the
destination buffer instead of the source buffer as the argument.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.14 2011/05/26 14:48:20 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2007, 2008 Reyk Floeter <reyk@@openbsd.org>
@


1.14
log
@Add additional check to prevent running scripts when not configured.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.13 2011/05/26 14:38:03 reyk Exp $	*/
d57 5
a61 2
	strlcpy(scr.name, host->conf.name, sizeof(host->conf.name));
	strlcpy(scr.path, table->conf.path, sizeof(table->conf.path));
@


1.13
log
@fix "check script" by sending all required information to the parent.
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.12 2011/05/09 12:08:47 reyk Exp $	*/
d104 5
@


1.12
log
@Reorganize the relayd code to use the proc.c privsep API/commodity
functions that are based on work for iked and smtpd.  This simplifies
the setup of privsep processes and moves some redundant and repeated
code to a single place - which is always good from a quality and
security point of view.  The relayd version of proc.c is different to
the current version in iked because it uses 1:N communications between
processes, eg. a single parent process is talking to many forked relay
children while iked only needs 1:1 communications.

ok sthen@@ pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.11 2011/02/28 00:09:11 sthen Exp $	*/
d48 4
d57 4
a102 2
	struct host		*host;
	struct table		*table;
d105 2
a106 4
	if ((host = host_find(env, scr->host)) == NULL)
		fatalx("script_exec: invalid host id");
	if ((table = table_find(env, host->conf.tableid)) == NULL)
		fatalx("script_exec: invalid table id");
d108 3
a110 3
	arg = host->conf.name;
	file = table->conf.path;
	tv = &table->conf.timeout;
@


1.11
log
@If 'check script' doesn't exit(), treat the service as 'down' rather
than 'unknown'. Fixes a problem where the script is killed due to expiry
of the interval timer.  ok pyr@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.10 2009/06/05 23:39:51 pyr Exp $	*/
d42 1
a42 2
extern struct imsgev		*iev_main;
pid_t				 child = -1;
d45 1
a45 1
check_script(struct host *host)
d53 2
a54 1
	imsg_compose_event(iev_main, IMSG_SCRIPT, 0, 0, -1, &scr, sizeof(scr));
@


1.10
log
@4 handed diff with eric:
Stop pushing event handling in the imsg framework.
Instead, provide a small glue layer on top of both imsg and libevent.
This finally clearly separates event handling and imsg construction.

Sidetrack bonus: remove the mega-ugly hack of having a dummy imsg_event_add
stub in relayctl.

This will make bgpd (and thus henning) happy. Next up are smtpd and ospfd.

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.9 2009/06/05 00:04:01 pyr Exp $	*/
d159 1
a159 1
			ret = -1;
@


1.9
log
@Make imsg completely async model agnostic by not requiring an
imsg_event_add function to be provided (which ended up being a named
callback).
Instead provide a wrapper in the daemon and call that everywhere.
Previsously discussed with the usual suspects,
ok eric@@ though not too happy about the function name
(imsg_compose_event).
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.8 2009/04/17 09:58:40 reyk Exp $	*/
d42 1
a42 1
extern struct imsgbuf		*ibuf_main;
d54 1
a54 1
	imsg_compose_event(ibuf_main, IMSG_SCRIPT, 0, 0, -1, &scr, sizeof(scr));
@


1.8
log
@close filedescriptors with closefrom(STDERR_FILENO + 1) before executing
the script to prevent access to internal processes.

From jacekm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.7 2008/12/05 16:37:55 reyk Exp $	*/
d54 1
a54 1
	imsg_compose(ibuf_main, IMSG_SCRIPT, 0, 0, -1, &scr, sizeof(scr));
@


1.7
log
@change the way relayd reports check results: instead of logging an
arbitrary string in debugging mode, it will store an error code
(HCE_*) for each host.  the error code can be translated to a string
(in log.c) for debugging but it will also be passed to relayctl via
the control socket.

from a user point of view, this will print a human-readable error
message in the "relayctl show hosts" output if a host is down because
the check failed.  the relayctl(8) manpage includes detailed
explanations of the error messages including mitigations for the
most-common problems.

ok jmc@@ (manpages)
ok phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.6 2008/02/13 11:32:59 reyk Exp $	*/
d129 7
@


1.6
log
@bump copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.5 2007/12/07 17:17:00 reyk Exp $	*/
d74 1
a74 1
	    "script: done" : "script: failed");
@


1.5
log
@hoststated gets renamed to relayd.  easier to type, and actually says
what the daemon does - it is a relayer that pays attention to the status
of pools of hosts; not a status checkers that happens to do some relaying
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.4 2007/11/24 17:07:28 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2007 Reyk Floeter <reyk@@openbsd.org>
@


1.4
log
@sort includes, adjust to style(9)
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.3 2007/10/13 17:50:05 deraadt Exp $	*/
d38 1
a38 1
#include "hoststated.h"
d58 1
a58 1
script_done(struct hoststated *env, struct ctl_script *scr)
d88 1
a88 1
script_exec(struct hoststated *env, struct ctl_script *scr)
d121 1
a121 1
		if ((pw = getpwnam(HOSTSTATED_USER)) == NULL)
@


1.3
log
@avoid errno trashing in signal handler
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.2 2007/06/12 15:16:10 msf Exp $	*/
d19 1
a19 1
#include <sys/types.h>
a21 2
#include <sys/param.h>
#include <sys/types.h>
@


1.2
log
@put the fd passing from bgpd back in to hoststated's version of imsg,
needed for layer 7 reload support.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: check_script.c,v 1.1 2007/05/29 17:12:04 reyk Exp $	*/
d82 2
d86 1
@


1.1
log
@add a new check method which allows to run external scripts/programs
for custom evaluations.

pyr agrees to put it in now but to do some improvements of the timeout
handling later.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
a56 1
	imsg_compose(ibuf_main, IMSG_SCRIPT, 0, 0, &scr, sizeof(scr));
@

