head	1.28;
access;
symbols
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8;
locks; strict;
comment	@ * @;


1.28
date	2017.08.09.21.31.16;	author claudio;	state Exp;
branches;
next	1.27;
commitid	1Ss7ga6XSiFwCLFN;

1.27
date	2017.07.28.13.58.52;	author bluhm;	state Exp;
branches;
next	1.26;
commitid	lLQ0xWUKem2peo94;

1.26
date	2017.05.28.10.39.15;	author benno;	state Exp;
branches;
next	1.25;
commitid	IW4LnWyG3CPq6c3r;

1.25
date	2017.05.27.08.33.25;	author claudio;	state Exp;
branches;
next	1.24;
commitid	mLnU8nnW1ZLoAWRU;

1.24
date	2017.04.06.12.20.48;	author gsoares;	state Exp;
branches;
next	1.23;
commitid	yGamdWD2R6zLdUcF;

1.23
date	2016.09.28.15.03.03;	author reyk;	state Exp;
branches;
next	1.22;
commitid	VIpAbX0hAeq0oB4f;

1.22
date	2016.09.03.14.09.04;	author reyk;	state Exp;
branches;
next	1.21;
commitid	0kWOwUNycE381inh;

1.21
date	2016.09.02.14.45.51;	author reyk;	state Exp;
branches;
next	1.20;
commitid	vcV98N2DyJGMwDyQ;

1.20
date	2016.09.02.14.31.47;	author reyk;	state Exp;
branches;
next	1.19;
commitid	5rsV42sOU0zqn3cJ;

1.19
date	2016.09.02.12.12.51;	author reyk;	state Exp;
branches;
next	1.18;
commitid	tCJ77FP0n8bVYrYP;

1.18
date	2016.09.02.11.51.49;	author reyk;	state Exp;
branches;
next	1.17;
commitid	Scmkna4JViHMcK3U;

1.17
date	2016.09.01.10.40.38;	author claudio;	state Exp;
branches;
next	1.16;
commitid	z4OduQ4Dp5sgfxQA;

1.16
date	2015.12.05.13.13.11;	author claudio;	state Exp;
branches;
next	1.15;
commitid	eFaXCW6lAjqOxsAo;

1.15
date	2015.12.02.13.41.27;	author reyk;	state Exp;
branches;
next	1.14;
commitid	vBNcEM4jmO1KceIa;

1.14
date	2015.10.10.00.16.23;	author benno;	state Exp;
branches;
next	1.13;
commitid	gYftseVGDYAzEu0Z;

1.13
date	2015.05.02.13.15.24;	author claudio;	state Exp;
branches;
next	1.12;
commitid	KeIVSkhMPmj3B0K2;

1.12
date	2015.01.22.17.42.09;	author reyk;	state Exp;
branches
	1.12.2.1;
next	1.11;
commitid	puppem00jmzmdm4f;

1.11
date	2015.01.16.15.06.40;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	tOv8XK6tLyhEfayc;

1.10
date	2014.12.12.10.05.09;	author reyk;	state Exp;
branches;
next	1.9;
commitid	J8g0vRzthwLCqf68;

1.9
date	2014.10.02.19.16.31;	author gilles;	state Exp;
branches;
next	1.8;
commitid	OHxevFcwLjpyPDYE;

1.8
date	2014.05.04.16.38.19;	author reyk;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.22.08.04.23;	author reyk;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.21.17.22.06;	author reyk;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.21.16.08.47;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.16.08.06;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2014.04.18.15.53.28;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.18.14.32.22;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.18.13.55.26;	author reyk;	state Exp;
branches;
next	;

1.12.2.1
date	2015.09.20.11.20.16;	author benno;	state Exp;
branches;
next	;
commitid	C9WQyjgbN7h0ioOp;


desc
@@


1.28
log
@Use X509_pubkey_digest() like libtls to hash the keys for the TLS privsep
code. This fixes interception mode (since there we rewrite the CERT which
would alter the hash of the cert but the keys still remain the same).
OK bluhm@@ and jsing@@
@
text
@/*	$OpenBSD: ca.c,v 1.27 2017/07/28 13:58:52 bluhm Exp $	*/

/*
 * Copyright (c) 2014 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/uio.h>

#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <poll.h>
#include <imsg.h>

#include <openssl/bio.h>
#include <openssl/pem.h>
#include <openssl/evp.h>
#include <openssl/rsa.h>
#include <openssl/engine.h>

#include "relayd.h"

void	 ca_init(struct privsep *, struct privsep_proc *p, void *);
void	 ca_launch(void);

int	 ca_dispatch_parent(int, struct privsep_proc *, struct imsg *);
int	 ca_dispatch_relay(int, struct privsep_proc *, struct imsg *);

int	 rsae_pub_enc(int, const u_char *, u_char *, RSA *, int);
int	 rsae_pub_dec(int,const u_char *, u_char *, RSA *, int);
int	 rsae_priv_enc(int, const u_char *, u_char *, RSA *, int);
int	 rsae_priv_dec(int, const u_char *, u_char *, RSA *, int);
int	 rsae_mod_exp(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *);
int	 rsae_bn_mod_exp(BIGNUM *, const BIGNUM *, const BIGNUM *,
	    const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
int	 rsae_init(RSA *);
int	 rsae_finish(RSA *);
int	 rsae_sign(int, const u_char *, u_int, u_char *, u_int *,
	    const RSA *);
int	 rsae_verify(int dtype, const u_char *m, u_int, const u_char *,
	    u_int, const RSA *);
int	 rsae_keygen(RSA *, int, BIGNUM *, BN_GENCB *);

static struct relayd *env = NULL;

static struct privsep_proc procs[] = {
	{ "parent",	PROC_PARENT,	ca_dispatch_parent },
	{ "relay",	PROC_RELAY,	ca_dispatch_relay },
};

void
ca(struct privsep *ps, struct privsep_proc *p)
{
	env = ps->ps_env;

	proc_run(ps, p, procs, nitems(procs), ca_init, NULL);
}

void
ca_init(struct privsep *ps, struct privsep_proc *p, void *arg)
{
	if (pledge("stdio recvfd", NULL) == -1)
		fatal("pledge");

	if (config_init(ps->ps_env) == -1)
		fatal("failed to initialize configuration");

	env->sc_id = getpid() & 0xffff;
}

void
hash_x509(X509 *cert, char *hash, size_t hashlen)
{
	static const char	hex[] = "0123456789abcdef";
	size_t			off;
	char			digest[EVP_MAX_MD_SIZE];
	int		 	dlen, i;

	if (X509_pubkey_digest(cert, EVP_sha256(), digest, &dlen) != 1)
		fatalx("%s: X509_pubkey_digest failed", __func__);

	if (hashlen < 2 * dlen + sizeof("SHA256:"))
		fatalx("%s: hash buffer to small", __func__);

	off = strlcpy(hash, "SHA256:", hashlen);

	for (i = 0; i < dlen; i++) {
		hash[off++] = hex[(digest[i] >> 4) & 0x0f];
		hash[off++] = hex[digest[i] & 0x0f];
	}
	hash[off] = 0;
}

void
ca_launch(void)
{
	char		 hash[TLS_CERT_HASH_SIZE];
	BIO		*in = NULL;
	EVP_PKEY	*pkey = NULL;
	struct relay	*rlay;
	X509		*cert = NULL;

	TAILQ_FOREACH(rlay, env->sc_relays, rl_entry) {
		if ((rlay->rl_conf.flags & (F_TLS|F_TLSCLIENT)) == 0)
			continue;

		if (rlay->rl_conf.tls_cert_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_tls_cert,
			    rlay->rl_conf.tls_cert_len)) == NULL)
				fatalx("ca_launch: cert");

			if ((cert = PEM_read_bio_X509(in, NULL,
			    NULL, NULL)) == NULL)
				fatalx("ca_launch: cert");

			hash_x509(cert, hash, sizeof(hash));

			BIO_free(in);
			X509_free(cert);
			purge_key(&rlay->rl_tls_cert,
			    rlay->rl_conf.tls_cert_len);
		}
		if (rlay->rl_conf.tls_key_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_tls_key,
			    rlay->rl_conf.tls_key_len)) == NULL)
				fatalx("%s: key", __func__);

			if ((pkey = PEM_read_bio_PrivateKey(in,
			    NULL, NULL, NULL)) == NULL)
				fatalx("%s: PEM", __func__);
			BIO_free(in);

			rlay->rl_tls_pkey = pkey;

			if (pkey_add(env, pkey, hash) == NULL)
				fatalx("tls pkey");

			purge_key(&rlay->rl_tls_key,
			    rlay->rl_conf.tls_key_len);
		}

		if (rlay->rl_conf.tls_cacert_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_tls_cacert,
			    rlay->rl_conf.tls_cacert_len)) == NULL)
				fatalx("ca_launch: cacert");

			if ((cert = PEM_read_bio_X509(in, NULL,
			    NULL, NULL)) == NULL)
				fatalx("ca_launch: cacert");

			hash_x509(cert, hash, sizeof(hash));

			BIO_free(in);
			X509_free(cert);
			purge_key(&rlay->rl_tls_cacert,
			    rlay->rl_conf.tls_cacert_len);
		}
		if (rlay->rl_conf.tls_cakey_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_tls_cakey,
			    rlay->rl_conf.tls_cakey_len)) == NULL)
				fatalx("%s: key", __func__);

			if ((pkey = PEM_read_bio_PrivateKey(in,
			    NULL, NULL, NULL)) == NULL)
				fatalx("%s: PEM", __func__);
			BIO_free(in);

			rlay->rl_tls_capkey = pkey;

			if (pkey_add(env, pkey, hash) == NULL)
				fatalx("ca pkey");

			purge_key(&rlay->rl_tls_cakey,
			    rlay->rl_conf.tls_cakey_len);
		}
	}
}

int
ca_dispatch_parent(int fd, struct privsep_proc *p, struct imsg *imsg)
{
	switch (imsg->hdr.type) {
	case IMSG_CFG_RELAY:
		config_getrelay(env, imsg);
		break;
	case IMSG_CFG_DONE:
		config_getcfg(env, imsg);
		break;
	case IMSG_CTL_START:
		ca_launch();
		break;
	case IMSG_CTL_RESET:
		config_getreset(env, imsg);
		break;
	default:
		return (-1);
	}

	return (0);
}

int
ca_dispatch_relay(int fd, struct privsep_proc *p, struct imsg *imsg)
{
	struct ctl_keyop	 cko;
	EVP_PKEY		*pkey;
	RSA			*rsa;
	u_char			*from = NULL, *to = NULL;
	struct iovec		 iov[2];
	int			 c = 0;

	switch (imsg->hdr.type) {
	case IMSG_CA_PRIVENC:
	case IMSG_CA_PRIVDEC:
		IMSG_SIZE_CHECK(imsg, (&cko));
		bcopy(imsg->data, &cko, sizeof(cko));
		if (cko.cko_proc > env->sc_conf.prefork_relay)
			fatalx("%s: invalid relay proc", __func__);
		if (IMSG_DATA_SIZE(imsg) != (sizeof(cko) + cko.cko_flen))
			fatalx("%s: invalid key operation", __func__);
		if ((pkey = pkey_find(env, cko.cko_hash)) == NULL)
			fatalx("%s: invalid relay hash '%s'",
			    __func__, cko.cko_hash);
		if ((rsa = EVP_PKEY_get1_RSA(pkey)) == NULL)
			fatalx("%s: invalid relay key", __func__);

		DPRINTF("%s:%d: key hash %s proc %d",
		    __func__, __LINE__, cko.cko_hash, cko.cko_proc);

		from = (u_char *)imsg->data + sizeof(cko);
		if ((to = calloc(1, cko.cko_tlen)) == NULL)
			fatalx("%s: calloc", __func__);

		switch (imsg->hdr.type) {
		case IMSG_CA_PRIVENC:
			cko.cko_tlen = RSA_private_encrypt(cko.cko_flen,
			    from, to, rsa, cko.cko_padding);
			break;
		case IMSG_CA_PRIVDEC:
			cko.cko_tlen = RSA_private_decrypt(cko.cko_flen,
			    from, to, rsa, cko.cko_padding);
			break;
		}

		iov[c].iov_base = &cko;
		iov[c++].iov_len = sizeof(cko);
		if (cko.cko_tlen) {
			iov[c].iov_base = to;
			iov[c++].iov_len = cko.cko_tlen;
		}

		proc_composev_imsg(env->sc_ps, PROC_RELAY, cko.cko_proc,
		    imsg->hdr.type, -1, -1, iov, c);

		free(to);
		RSA_free(rsa);
		break;
	default:
		return (-1);
	}

	return (0);
}

/*
 * RSA privsep engine (called from unprivileged processes)
 */

const RSA_METHOD *rsa_default = NULL;

static RSA_METHOD rsae_method = {
	"RSA privsep engine",
	rsae_pub_enc,
	rsae_pub_dec,
	rsae_priv_enc,
	rsae_priv_dec,
	rsae_mod_exp,
	rsae_bn_mod_exp,
	rsae_init,
	rsae_finish,
	0,
	NULL,
	rsae_sign,
	rsae_verify,
	rsae_keygen
};

static int
rsae_send_imsg(int flen, const u_char *from, u_char *to, RSA *rsa,
    int padding, u_int cmd)
{
	struct privsep	*ps = env->sc_ps;
	struct pollfd	 pfd[1];
	struct ctl_keyop cko;
	int		 ret = 0;
	char		*hash;
	struct iovec	 iov[2];
	struct imsgbuf	*ibuf;
	struct imsgev	*iev;
	struct imsg	 imsg;
	int		 n, done = 0, cnt = 0;
	u_char		*toptr;

	if ((hash = RSA_get_ex_data(rsa, 0)) == NULL)
		return (0);

	iev = proc_iev(ps, PROC_CA, ps->ps_instance);
	ibuf = &iev->ibuf;

	/*
	 * XXX this could be nicer...
	 */

	(void)strlcpy(cko.cko_hash, hash, sizeof(cko.cko_hash));
	cko.cko_proc = ps->ps_instance;
	cko.cko_flen = flen;
	cko.cko_tlen = RSA_size(rsa);
	cko.cko_padding = padding;

	iov[cnt].iov_base = &cko;
	iov[cnt++].iov_len = sizeof(cko);
	iov[cnt].iov_base = (void *)(uintptr_t)from;
	iov[cnt++].iov_len = flen;

	/*
	 * Send a synchronous imsg because we cannot defer the RSA
	 * operation in OpenSSL's engine layer.
	 */
	imsg_composev(ibuf, cmd, 0, 0, -1, iov, cnt);
	if (imsg_flush(ibuf) == -1)
		log_warn("%s: imsg_flush", __func__);

	pfd[0].fd = ibuf->fd;
	pfd[0].events = POLLIN;
	while (!done) {
		switch (poll(pfd, 1, RELAY_TLS_PRIV_TIMEOUT)) {
		case -1:
			fatal("%s: poll", __func__);
		case 0:
			log_warnx("%s: poll timeout", __func__);
			break;
		default:
			break;
		}
		if ((n = imsg_read(ibuf)) == -1 && errno != EAGAIN)
			fatalx("imsg_read");
		if (n == 0)
			fatalx("pipe closed");

		while (!done) {
			if ((n = imsg_get(ibuf, &imsg)) == -1)
				fatalx("imsg_get error");
			if (n == 0)
				break;
			if (imsg.hdr.type != cmd)
				fatalx("invalid response");

			IMSG_SIZE_CHECK(&imsg, (&cko));
			memcpy(&cko, imsg.data, sizeof(cko));
			if (IMSG_DATA_SIZE(&imsg) !=
			    (sizeof(cko) + cko.cko_tlen))
				fatalx("data size");

			ret = cko.cko_tlen;
			if (ret) {
				toptr = (u_char *)imsg.data + sizeof(cko);
				memcpy(to, toptr, ret);
			}
			done = 1;

			imsg_free(&imsg);
		}
	}
	imsg_event_add(iev);

	return (ret);
}

int
rsae_pub_enc(int flen,const u_char *from, u_char *to, RSA *rsa,int padding)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_pub_enc(flen, from, to, rsa, padding));
}

int
rsae_pub_dec(int flen,const u_char *from, u_char *to, RSA *rsa,int padding)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_pub_dec(flen, from, to, rsa, padding));
}

int
rsae_priv_enc(int flen, const u_char *from, u_char *to, RSA *rsa, int padding)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsae_send_imsg(flen, from, to, rsa, padding,
	    IMSG_CA_PRIVENC));
}

int
rsae_priv_dec(int flen, const u_char *from, u_char *to, RSA *rsa, int padding)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsae_send_imsg(flen, from, to, rsa, padding,
	    IMSG_CA_PRIVDEC));
}

int
rsae_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_mod_exp(r0, I, rsa, ctx));
}

int
rsae_bn_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->bn_mod_exp(r, a, p, m, ctx, m_ctx));
}

int
rsae_init(RSA *rsa)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	if (rsa_default->init == NULL)
		return (1);
	return (rsa_default->init(rsa));
}

int
rsae_finish(RSA *rsa)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	if (rsa_default->finish == NULL)
		return (1);
	return (rsa_default->finish(rsa));
}

int
rsae_sign(int type, const u_char *m, u_int m_length, u_char *sigret,
    u_int *siglen, const RSA *rsa)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_sign(type, m, m_length,
	    sigret, siglen, rsa));
}

int
rsae_verify(int dtype, const u_char *m, u_int m_length, const u_char *sigbuf,
    u_int siglen, const RSA *rsa)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_verify(dtype, m, m_length,
	    sigbuf, siglen, rsa));
}

int
rsae_keygen(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
{
	DPRINTF("%s:%d", __func__, __LINE__);
	return (rsa_default->rsa_keygen(rsa, bits, e, cb));
}

void
ca_engine_init(struct relayd *x_env)
{
	ENGINE		*e = NULL;
	const char	*errstr, *name;

	if (env == NULL)
		env = x_env;

	if (rsa_default != NULL)
		return;

	if ((e = ENGINE_get_default_RSA()) == NULL) {
		if ((e = ENGINE_new()) == NULL) {
			errstr = "ENGINE_new";
			goto fail;
		}
		if (!ENGINE_set_name(e, rsae_method.name)) {
			errstr = "ENGINE_set_name";
			goto fail;
		}
		if ((rsa_default = RSA_get_default_method()) == NULL) {
			errstr = "RSA_get_default_method";
			goto fail;
		}
	} else if ((rsa_default = ENGINE_get_RSA(e)) == NULL) {
		errstr = "ENGINE_get_RSA";
		goto fail;
	}

	if ((name = ENGINE_get_name(e)) == NULL)
		name = "unknown RSA engine";

	log_debug("%s: using %s", __func__, name);

	if (rsa_default->flags & RSA_FLAG_SIGN_VER)
		fatalx("unsupported RSA engine");

	if (rsa_default->rsa_mod_exp == NULL)
		rsae_method.rsa_mod_exp = NULL;
	if (rsa_default->bn_mod_exp == NULL)
		rsae_method.bn_mod_exp = NULL;
	if (rsa_default->rsa_keygen == NULL)
		rsae_method.rsa_keygen = NULL;
	rsae_method.flags = rsa_default->flags |
	    RSA_METHOD_FLAG_NO_CHECK;
	rsae_method.app_data = rsa_default->app_data;

	if (!ENGINE_set_RSA(e, &rsae_method)) {
		errstr = "ENGINE_set_RSA";
		goto fail;
	}
	if (!ENGINE_set_default_RSA(e)) {
		errstr = "ENGINE_set_default_RSA";
		goto fail;
	}

	return;

 fail:
	fatalx("%s: %s", __func__, errstr);
}
@


1.27
log
@Always calculate the hash value of the x509 cert in ssl_load_pkey().
Check whether TLS server object is available before using it.  With
these fixes the ssl inspect regress test just fails and does not
crash relayd.
OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.26 2017/05/28 10:39:15 benno Exp $	*/
d93 2
a94 2
	if (X509_digest(cert, EVP_sha256(), digest, &dlen) != 1)
		fatalx("%s: X509_digest failed", __func__);
@


1.26
log
@use __func__ in log messages. fix some whitespace while here.
From Hiltjo Posthuma hiltjo -AT codemadness -DOT- org, thanks!
ok florian, claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.25 2017/05/27 08:33:25 claudio Exp $	*/
d85 2
a86 2
static void
hash_string(char *d, size_t dlen, char *hash, size_t hashlen)
d89 6
a94 1
	size_t			off, i;
d97 1
a97 1
		fatalx("%s hash buffer to small", __func__);
d102 2
a103 2
		hash[off++] = hex[(d[i] >> 4) & 0x0f];
		hash[off++] = hex[d[i] & 0x0f];
d111 1
a111 1
	char		 d[EVP_MAX_MD_SIZE], hash[TLS_CERT_HASH_SIZE];
a115 1
	int		 dlen;
d130 1
a130 4
			if (X509_digest(cert, EVP_sha256(), d, &dlen) != 1)
				fatalx("ca_launch: cert");

			hash_string(d, dlen, hash, sizeof(hash));
d165 1
a165 4
			if (X509_digest(cert, EVP_sha256(), d, &dlen) != 1)
				fatalx("ca_launch: cacert");

			hash_string(d, dlen, hash, sizeof(hash));
d235 5
a239 3
		if ((pkey = pkey_find(env, cko.cko_hash)) == NULL ||
		    (rsa = EVP_PKEY_get1_RSA(pkey)) == NULL)
			fatalx("%s: invalid relay key or id", __func__);
@


1.25
log
@Migrate relayd to use libtls for TLS. Still does the TLS privsep via the
engine but at least we can use a sane API for new features.
Going in now so it is possible to work with this in tree.
General agreement at d2k17.
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.24 2017/04/06 12:20:48 gsoares Exp $	*/
d126 1
a126 1
		        if (X509_digest(cert, EVP_sha256(), d, &dlen) != 1)
d139 1
a139 1
				fatalx("ca_launch: key");
d143 1
a143 1
				fatalx("ca_launch: PEM");
d164 1
a164 1
		        if (X509_digest(cert, EVP_sha256(), d, &dlen) != 1)
d177 1
a177 1
				fatalx("ca_launch: key");
d181 1
a181 1
				fatalx("ca_launch: PEM");
d234 1
a234 2
			fatalx("ca_dispatch_relay: "
			    "invalid relay proc");
d236 1
a236 2
			fatalx("ca_dispatch_relay: "
			    "invalid key operation");
d239 1
a239 2
			fatalx("ca_dispatch_relay: "
			    "invalid relay key or id");
d246 1
a246 1
			fatalx("ca_dispatch_relay: calloc");
d345 1
a345 1
		log_warn("rsae_send_imsg: imsg_flush");
d352 1
a352 1
			fatal("rsae_send_imsg: poll");
d354 1
a354 1
			log_warnx("rsae_send_imsg: poll timeout");
@


1.24
log
@fix format string found by clang -Wformat-security
OK deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.23 2016/09/28 15:03:03 reyk Exp $	*/
d85 18
d106 1
d110 2
d117 19
d148 1
a148 2
			if (pkey_add(env, pkey,
			    rlay->rl_conf.tls_keyid) == NULL)
d154 19
a172 3
		if (rlay->rl_conf.tls_cert_len) {
			purge_key(&rlay->rl_tls_cert,
			    rlay->rl_conf.tls_cert_len);
d186 1
a186 2
			if (pkey_add(env, pkey,
			    rlay->rl_conf.tls_cakeyid) == NULL)
a191 4
		if (rlay->rl_conf.tls_cacert_len) {
			purge_key(&rlay->rl_tls_cacert,
			    rlay->rl_conf.tls_cacert_len);
		}
d239 1
a239 1
		if ((pkey = pkey_find(env, cko.cko_id)) == NULL ||
d244 2
a245 1
		DPRINTF("%s:%d: key id %d", __func__, __LINE__, cko.cko_id);
d313 1
a313 1
	objid_t		*id;
d321 1
a321 1
	if ((id = RSA_get_ex_data(rsa, 0)) == NULL)
d331 1
a331 1
	cko.cko_id = *id;
d544 1
a544 2
	ssl_error(__func__, errstr);
	fatalx("%s", errstr);
@


1.23
log
@Add -Wcast-qual and cast away one false positive where we use a const
u_char * variable for an iovec from within the libcrypto engine callback.

OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.22 2016/09/03 14:09:04 reyk Exp $	*/
d494 1
a494 1
	fatalx(errstr);
@


1.22
log
@Use the fork+exec privsep model in relayd; based on rzalamena@@'s work
for httpd with some (current and previous) changes for relayd.  Once
again, both daemons now share the same proc.c where most of the
privsep "magic" happens.

OK benno@@ rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.21 2016/09/02 14:45:51 reyk Exp $	*/
d288 1
a288 1
	iov[cnt].iov_base = (void *)from;
@


1.21
log
@Split "struct relayd" into two structs: "struct relayd" and "struct
relayd_config".  This way we can send all the relevant global
configuration to the children, not just the flags and the opts.

With input from and
OK claudio@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.20 2016/09/02 14:31:47 reyk Exp $	*/
d76 1
a76 1
	if (pledge("stdio", NULL) == -1)
@


1.20
log
@proc_id has been replaced by ps->ps_instance.

OK claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.19 2016/09/02 12:12:51 reyk Exp $	*/
d183 1
a183 1
		if (cko.cko_proc > env->sc_prefork_relay)
@


1.19
log
@As done in httpd, remove ps_ninstances and p_instance.

OK benno@@ rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.18 2016/09/02 11:51:49 reyk Exp $	*/
a58 1
extern int		 proc_id;
d258 1
d273 1
a273 1
	iev = proc_iev(env->sc_ps, PROC_CA, proc_id);
d281 1
a281 1
	cko.cko_proc = proc_id;
@


1.18
log
@Terminate relayd using the socket status instead of watching SIGCHLD
or killing child processes. - Based on rzalamena@@'s diff for httpd.

OK deraadt@@ rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.17 2016/09/01 10:40:38 claudio Exp $	*/
a82 1
	proc_id = p->p_instance;
@


1.17
log
@Do not busy loop in the rsa engine callback waiting for the ca. Instead use
poll(2) to wait for up to 1sec for a response. This is not the nicest way to
fix this issue but the smallest. Goal is to reduce the contention on the
kernel big lock on busy relayd systems.
reyk@@ agrees (especially about the nastyness of this)
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.16 2015/12/05 13:13:11 claudio Exp $	*/
d66 1
a66 1
pid_t
d71 1
a71 1
	return (proc_run(ps, p, procs, nitems(procs), ca_init, NULL));
@


1.16
log
@EAGAIN handling for imsg_read. OK henning@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.15 2015/12/02 13:41:27 reyk Exp $	*/
d26 1
d260 1
d297 2
a298 1
	imsg_flush(ibuf);
d300 2
d303 9
@


1.15
log
@In most cases we don't need all arguments of proc_compose*_imsg(),
so add a shortcut proc_compose*() that skips all of them.  Only use the
full argument list if needed.  The functions with full argument lists can
eventually be replaced with a nicer transaction-based approach later.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.14 2015/10/10 00:16:23 benno Exp $	*/
d298 1
a298 1
		if ((n = imsg_read(ibuf)) == -1)
@


1.14
log
@relayd's ca process pledges to only use stdio.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.13 2015/05/02 13:15:24 claudio Exp $	*/
d220 1
a220 1
		    imsg->hdr.type, -1, iov, c);
@


1.13
log
@Fix obvious problems with relayd config reload.
- fix a TAILQ corruption because of a use after free
- do not reinit the SSL engine since that fails
OK sthen, benno
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.12 2015/01/22 17:42:09 reyk Exp $	*/
d76 3
@


1.12
log
@Clean up the relayd headers with help of include-what-you-use and some
manual review.  Based on common practice, relayd.h now includes the
necessary headers for itself.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.11 2015/01/16 15:06:40 deraadt Exp $	*/
d420 1
a420 1
	ENGINE		*e;
d425 3
@


1.12.2.1
log
@maintainance diff for relayd
MFC the following changes

- Missing free(3) in error path (ssl.c,v 1.29)
- fix a memory leak. (pfe.c,v 1.80)
- allocate se_log evbuffer before loging errors with relay_close()
  (relay.c,v 1.192)
- fix a file descriptor leak in http protocol handling
  (relay.c,v 1.193 and relay_http.c,v 1.44)
- Fix obvious problems with relayd config reload
  (ca.c,v 1.13; config.c,v 1.25; parse.y,v 1.204;
  relayd.c,v 1.139; relayd.h,v 1.209)
- http protocol: you cannot append to the previous key-value before
  line three of a request (relay_http.c,v 1.45)
- fix a crash / use after free (relay.c,v 1.194; relay_http.c,v 1.46)
- fix a non safe use of TAILQ_FOREACH with TAILQ_REMOVE
  (relay_http.c,v 1.47)
- Plug a memory leak by simplifying kv_free() (relayd.c,v 1.141)
- Fix memory leak in error case (relay_http.c,v 1.48)
- track the connection state of a session and stops doing double
  opens in certain situations (relay.c,v 1.195; relay_http.c,v 1.49; relayd.h,v 1.210)
- coding style (relay.c,v 1.196; relay_http.c,v 1.50; relayd.h,v 1.212)

ok claudio@@, sthen@@ and feedback tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.12 2015/01/22 17:42:09 reyk Exp $	*/
d420 1
a420 1
	ENGINE		*e = NULL;
a424 3

	if (rsa_default != NULL)
		return;
@


1.11
log
@Adapt to <limits.h> universe.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.10 2014/12/12 10:05:09 reyk Exp $	*/
d19 1
a20 1
#include <sys/socket.h>
a22 6
#include <net/if.h>
#include <netinet/in.h>

#include <limits.h>
#include <event.h>
#include <fcntl.h>
d26 1
a26 1
#include <errno.h>
d28 1
@


1.10
log
@Change the keyword "ssl" to "tls" to reflect reality since we
effectively disabled support for the SSL protocols.  SSL remains a
common term describing SSL/TLS, there is some controvery about this
change, and the name really doesn't matter, but I feel confident about
it now.

(btw., sthen@@ pointed out some historical context:
http://tim.dierks.org/2014/05/security-standards-and-name-changes-in.html)

OK benno@@, with input from tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.9 2014/10/02 19:16:31 gilles Exp $	*/
a18 1
#include <sys/param.h>
@


1.9
log
@no need to set the same field NULL twice ;-)

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.8 2014/05/04 16:38:19 reyk Exp $	*/
d97 1
a97 1
		if ((rlay->rl_conf.flags & (F_SSL|F_SSLCLIENT)) == 0)
d100 3
a102 3
		if (rlay->rl_conf.ssl_key_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_ssl_key,
			    rlay->rl_conf.ssl_key_len)) == NULL)
d110 1
a110 1
			rlay->rl_ssl_pkey = pkey;
d113 2
a114 2
			    rlay->rl_conf.ssl_keyid) == NULL)
				fatalx("ssl pkey");
d116 2
a117 2
			purge_key(&rlay->rl_ssl_key,
			    rlay->rl_conf.ssl_key_len);
d119 3
a121 3
		if (rlay->rl_conf.ssl_cert_len) {
			purge_key(&rlay->rl_ssl_cert,
			    rlay->rl_conf.ssl_cert_len);
d123 3
a125 3
		if (rlay->rl_conf.ssl_cakey_len) {
			if ((in = BIO_new_mem_buf(rlay->rl_ssl_cakey,
			    rlay->rl_conf.ssl_cakey_len)) == NULL)
d133 1
a133 1
			rlay->rl_ssl_capkey = pkey;
d136 1
a136 1
			    rlay->rl_conf.ssl_cakeyid) == NULL)
d139 2
a140 2
			purge_key(&rlay->rl_ssl_cakey,
			    rlay->rl_conf.ssl_cakey_len);
d142 3
a144 3
		if (rlay->rl_conf.ssl_cacert_len) {
			purge_key(&rlay->rl_ssl_cacert,
			    rlay->rl_conf.ssl_cacert_len);
@


1.8
log
@Create a new default RSA engine instead of patching the existing one
if none is available.  Fixes SSL/TLS and a possible fatalx() on
machines without a default RSA engine.

Thanks to Bjorn Ketelaars for reporting and testing.

ok gilles@@ (for the relayd part)
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.7 2014/04/22 08:04:23 reyk Exp $	*/
a457 2
	if (rsa_default->rsa_mod_exp == NULL)
		rsae_method.rsa_mod_exp = NULL;
@


1.7
log
@Support the CA key for SSL inspection in the ca process.  Instead of
looking up the keys by relay id, add all keys to a list and look them
up by key id.

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.6 2014/04/21 17:22:06 reyk Exp $	*/
d423 1
a423 1
int
d426 2
a427 1
	ENGINE	*e;
d432 22
a453 3
	if ((e = ENGINE_get_default_RSA()) == NULL ||
	    (rsa_default = ENGINE_get_RSA(e)) == NULL)
		return (-1);
d470 10
a479 3
	if (!ENGINE_set_RSA(e, &rsae_method) ||
	    !ENGINE_set_default_RSA(e))
		return (-1);
d481 3
a483 1
	return (0);
@


1.6
log
@Use RSA_set_ex_data()/RSA_get_ex_data() directly instead of
the undocumented RSA_set_app_data()/RSA_get_app_data() wrappers.
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.5 2014/04/21 16:08:47 reyk Exp $	*/
d112 4
d123 23
a171 11
static EVP_PKEY *
ca_get_key(objid_t id)
{
	struct relay	*rlay;

	if ((rlay = relay_find(env, id)) == NULL)
		return (NULL);

	return (rlay->rl_ssl_pkey);
}

d193 1
a193 1
		if ((pkey = ca_get_key(cko.cko_id)) == NULL ||
d198 2
d264 1
a264 1
	u_int32_t	*id;
@


1.5
log
@The OpenSSL engine passes a "const u_char *" to the callback but
relayd's RSA privsep engine uses an iovec that expects a non-cast
"void *".  Cast it and disable the -Wcast-qual warning because I don't
want to copy the data and I didn't find a better way to implement it.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.4 2014/04/18 16:08:06 reyk Exp $	*/
d254 1
a254 1
	if ((id = RSA_get_app_data(rsa)) == NULL)
@


1.4
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.3 2014/04/18 15:53:28 reyk Exp $	*/
d272 1
a272 1
	iov[cnt].iov_base = from;
@


1.3
log
@Fix SSL client-only mode when no RSA private key is needed.

Found by andre@@ with the args-ssl-server.pl regress test.

ok andre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.2 2014/04/18 14:32:22 reyk Exp $	*/
d57 4
a60 4
int	 rsae_sign(int, const u_char *, u_int,
	    u_char *, u_int *, const RSA *);
int	 rsae_verify(int dtype, const u_char *m, u_int,
	    const u_char *, u_int, const RSA *);
d241 2
a242 2
rsae_send_imsg(int flen, const u_char *from, u_char *to,
    RSA *rsa,int padding, u_int cmd)
d307 1
a307 1
			done = 1;			
d318 1
a318 2
rsae_pub_enc(int flen,const u_char *from,
    u_char *to, RSA *rsa,int padding)
d325 1
a325 2
rsae_pub_dec(int flen,const u_char *from, u_char
    *to, RSA *rsa,int padding)
d332 1
a332 2
rsae_priv_enc(int flen, const u_char *from, u_char *to,
    RSA *rsa, int padding)
d340 1
a340 2
rsae_priv_dec(int flen, const u_char *from, u_char *to,
    RSA *rsa, int padding)
d355 2
a356 2
rsae_bn_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const
    BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
d381 2
a382 2
rsae_sign(int type, const u_char *m, u_int
    m_length, u_char *sigret, u_int *siglen, const RSA *rsa)
d385 2
a386 1
	return (rsa_default->rsa_sign(type, m, m_length, sigret, siglen, rsa));
d390 2
a391 2
rsae_verify(int dtype, const u_char *m, u_int m_length,
    const u_char *sigbuf, u_int siglen, const RSA *rsa)
d394 2
a395 1
	return (rsa_default->rsa_verify(dtype, m, m_length, sigbuf, siglen, rsa));
@


1.2
log
@The RSA_FLAG_SIGN_VER is not yet supported and the current code uses
the rsa_priv_enc() and rsa_pub_dec() callbacks for sign and verify
operations.

A tale from OpenSSL's rsa.h:

  New sign and verify functions: some libraries don't allow arbitrary
  data to be signed/verified: this allows them to be used. Note: for
  this to work the RSA_public_decrypt() and RSA_private_encrypt() should
  *NOT* be used RSA_sign(), RSA_verify() should be used instead. Note:
  for backwards compatibility this functionality is only enabled if the
  RSA_FLAG_SIGN_VER option is set in 'flags'.

In OpenSSL, RSA engines should provide the rsa_sign() and rsa_verify()
callbacks and this should be the default.  By the "default" is
disabled by default and RSA engines that provide extra sign and verify
callbacks have to set the non-default RSA_FLAG_SIGN_VER flag.  This is
not used by OpenSSL's own RSA code and was only set by two non-default
RSA engines: IBM 4758 and Windows CAPI - both of them got removed from
our library.  And btw., this comment about the new non-default default
was added in 1999.

Thanks to Piotr Sikora, who pointed out that I didn't handle the
sign/verify case.
@
text
@d1 1
a1 1
/*	$OpenBSD: ca.c,v 1.1 2014/04/18 13:55:26 reyk Exp $	*/
d100 19
a118 14
		if ((in = BIO_new_mem_buf(rlay->rl_ssl_key,
		    rlay->rl_conf.ssl_key_len)) == NULL)
			fatalx("ca_launch: key");

		if ((pkey = PEM_read_bio_PrivateKey(in,
		    NULL, NULL, NULL)) == NULL)
			fatalx("ca_launch: PEM");

		purge_key(&rlay->rl_ssl_key, rlay->rl_conf.ssl_key_len);
		purge_key(&rlay->rl_ssl_cert, rlay->rl_conf.ssl_cert_len);

		rlay->rl_ssl_pkey = pkey;

		BIO_free(in);
@


1.1
log
@Introduce privsep for private keys:

- Move RSA private keys to a new separate process instead of copying
them to the relays.  A custom RSA engine is used by the SSL/TLS code
of the relay processes to send RSA private key encryption/decryption
(also used for sign/verify) requests to the new "ca" processes instead
of operating on the private key directly.

- Each relay process gets its own related ca process.  Setting
"prefork 5" in the config file will spawn 10 processes (5 relay, 5
ca).  This diff also reduces the default number of relay processes
from 5 to 3 which should be suitable in most installations without a
very heavy load.

- Don't keep text versions of the keys in memory, parse them once and
keep the binary representation.  This might still be the case in
OpenSSL's internals but will be fixed in the library.

This diff doesn't prevent something like "heartbleed" but adds an
additional mitigation to prevent leakage of the private keys from the
processes doing SSL/TLS.

With feedback from many
ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d413 3
@

