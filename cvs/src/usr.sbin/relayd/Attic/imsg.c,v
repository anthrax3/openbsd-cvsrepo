head	1.32;
access;
symbols
	OPENBSD_4_7:1.29.0.2
	OPENBSD_4_7_BASE:1.29
	OPENBSD_4_6:1.28.0.4
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.14.0.4
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11;
locks; strict;
comment	@ * @;


1.32
date	2010.05.26.16.44.32;	author nicm;	state dead;
branches;
next	1.31;

1.31
date	2010.05.26.13.56.08;	author nicm;	state Exp;
branches;
next	1.30;

1.30
date	2010.04.07.18.09.39;	author nicm;	state Exp;
branches;
next	1.29;

1.29
date	2009.08.08.18.33.40;	author nicm;	state Exp;
branches;
next	1.28;

1.28
date	2009.06.08.08.30.06;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2009.06.07.05.56.25;	author eric;	state Exp;
branches;
next	1.26;

1.26
date	2009.06.07.00.40.46;	author eric;	state Exp;
branches;
next	1.25;

1.25
date	2009.06.06.22.11.25;	author eric;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.06.05.04.12;	author pyr;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.05.23.39.51;	author pyr;	state Exp;
branches;
next	1.22;

1.22
date	2009.06.05.00.04.01;	author pyr;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.04.23.33.49;	author pyr;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.04.22.42.15;	author eric;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.04.20.31.37;	author eric;	state Exp;
branches;
next	1.18;

1.18
date	2009.06.04.18.34.33;	author eric;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.04.17.51.38;	author eric;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.04.07.16.38;	author eric;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.03.05.35.06;	author eric;	state Exp;
branches;
next	1.14;

1.14
date	2008.03.24.16.11.05;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.15.16.25.00;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.13.01.49.53;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.02.11.10.42.50;	author reyk;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.07.17.17.00;	author reyk;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.24.17.07.28;	author reyk;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.24.12.42.32;	author pyr;	state Exp;
branches;
next	1.7;

1.7
date	2007.06.12.15.16.10;	author msf;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.19.10.11.59;	author henning;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.29.14.23.31;	author pyr;	state Exp;
branches;
next	1.4;

1.4
date	2007.01.09.00.45.32;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.08.20.46.18;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.08.13.37.26;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.16.11.45.07;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.32
log
@Move imsg into libutil and add a man page.

Minor bump for libutil.

Previous versions of this diff and man page looked at by various people.

"you should just commit" deraadt
@
text
@/*	$OpenBSD: imsg.c,v 1.31 2010/05/26 13:56:08 nicm Exp $	*/

/*
 * Copyright (c) 2003, 2004 Henning Brauer <henning@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/socket.h>
#include <sys/uio.h>

#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "imsg.h"

int	 imsg_get_fd(struct imsgbuf *);

void
imsg_init(struct imsgbuf *ibuf, int fd)
{
	msgbuf_init(&ibuf->w);
	bzero(&ibuf->r, sizeof(ibuf->r));
	ibuf->fd = fd;
	ibuf->w.fd = fd;
	ibuf->pid = getpid();
	TAILQ_INIT(&ibuf->fds);
}

ssize_t
imsg_read(struct imsgbuf *ibuf)
{
	struct msghdr		 msg;
	struct cmsghdr		*cmsg;
	union {
		struct cmsghdr hdr;
		char	buf[CMSG_SPACE(sizeof(int) * 16)];
	} cmsgbuf;
	struct iovec		 iov;
	ssize_t			 n;
	int			 fd;
	struct imsg_fd		*ifd;

	bzero(&msg, sizeof(msg));

	iov.iov_base = ibuf->r.buf + ibuf->r.wpos;
	iov.iov_len = sizeof(ibuf->r.buf) - ibuf->r.wpos;
	msg.msg_iov = &iov;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	if ((n = recvmsg(ibuf->fd, &msg, 0)) == -1) {
		if (errno != EINTR && errno != EAGAIN) {
			return (-1);
		}
		return (-2);
	}

	ibuf->r.wpos += n;

	for (cmsg = CMSG_FIRSTHDR(&msg); cmsg != NULL;
	    cmsg = CMSG_NXTHDR(&msg, cmsg)) {
		if (cmsg->cmsg_level == SOL_SOCKET &&
		    cmsg->cmsg_type == SCM_RIGHTS) {
			fd = (*(int *)CMSG_DATA(cmsg));
			if ((ifd = calloc(1, sizeof(struct imsg_fd))) == NULL) {
				close(fd);
				return (-1);
			}
			ifd->fd = fd;
			TAILQ_INSERT_TAIL(&ibuf->fds, ifd, entry);
		}
		/* we do not handle other ctl data level */
	}

	return (n);
}

ssize_t
imsg_get(struct imsgbuf *ibuf, struct imsg *imsg)
{
	size_t			 av, left, datalen;

	av = ibuf->r.wpos;

	if (IMSG_HEADER_SIZE > av)
		return (0);

	memcpy(&imsg->hdr, ibuf->r.buf, sizeof(imsg->hdr));
	if (imsg->hdr.len < IMSG_HEADER_SIZE ||
	    imsg->hdr.len > MAX_IMSGSIZE) {
		errno = ERANGE;
		return (-1);
	}
	if (imsg->hdr.len > av)
		return (0);
	datalen = imsg->hdr.len - IMSG_HEADER_SIZE;
	ibuf->r.rptr = ibuf->r.buf + IMSG_HEADER_SIZE;
	if ((imsg->data = malloc(datalen)) == NULL)
		return (-1);

	if (imsg->hdr.flags & IMSGF_HASFD)
		imsg->fd = imsg_get_fd(ibuf);
	else
		imsg->fd = -1;

	memcpy(imsg->data, ibuf->r.rptr, datalen);

	if (imsg->hdr.len < av) {
		left = av - imsg->hdr.len;
		memmove(&ibuf->r.buf, ibuf->r.buf + imsg->hdr.len, left);
		ibuf->r.wpos = left;
	} else
		ibuf->r.wpos = 0;

	return (datalen + IMSG_HEADER_SIZE);
}

int
imsg_compose(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, int fd, void *data, u_int16_t datalen)
{
	struct ibuf	*wbuf;

	if ((wbuf = imsg_create(ibuf, type, peerid, pid, datalen)) == NULL)
		return (-1);

	if (imsg_add(wbuf, data, datalen) == -1)
		return (-1);

	wbuf->fd = fd;

	imsg_close(ibuf, wbuf);

	return (1);
}

int
imsg_composev(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, int fd, const struct iovec *iov, int iovcnt)
{
	struct ibuf	*wbuf;
	int		 i, datalen = 0;

	for (i = 0; i < iovcnt; i++)
		datalen += iov[i].iov_len;

	if ((wbuf = imsg_create(ibuf, type, peerid, pid, datalen)) == NULL)
		return (-1);

	for (i = 0; i < iovcnt; i++)
		if (imsg_add(wbuf, iov[i].iov_base, iov[i].iov_len) == -1)
			return (-1);

	wbuf->fd = fd;

	imsg_close(ibuf, wbuf);

	return (1);
}

/* ARGSUSED */
struct ibuf *
imsg_create(struct imsgbuf *ibuf, u_int32_t type, u_int32_t peerid,
    pid_t pid, u_int16_t datalen)
{
	struct ibuf	*wbuf;
	struct imsg_hdr	 hdr;

	datalen += IMSG_HEADER_SIZE;
	if (datalen > MAX_IMSGSIZE) {
		errno = ERANGE;
		return (NULL);
	}

	hdr.type = type;
	hdr.flags = 0;
	hdr.peerid = peerid;
	if ((hdr.pid = pid) == 0)
		hdr.pid = ibuf->pid;
	if ((wbuf = ibuf_dynamic(datalen, MAX_IMSGSIZE)) == NULL) {
		return (NULL);
	}
	if (imsg_add(wbuf, &hdr, sizeof(hdr)) == -1)
		return (NULL);

	return (wbuf);
}

int
imsg_add(struct ibuf *msg, void *data, u_int16_t datalen)
{
	if (datalen)
		if (ibuf_add(msg, data, datalen) == -1) {
			ibuf_free(msg);
			return (-1);
		}
	return (datalen);
}

void
imsg_close(struct imsgbuf *ibuf, struct ibuf *msg)
{
	struct imsg_hdr	*hdr;

	hdr = (struct imsg_hdr *)msg->buf;

	hdr->flags &= ~IMSGF_HASFD;
	if (msg->fd != -1)
		hdr->flags |= IMSGF_HASFD;

	hdr->len = (u_int16_t)msg->wpos;

	ibuf_close(&ibuf->w, msg);
}

void
imsg_free(struct imsg *imsg)
{
	free(imsg->data);
}

int
imsg_get_fd(struct imsgbuf *ibuf)
{
	int		 fd;
	struct imsg_fd	*ifd;

	if ((ifd = TAILQ_FIRST(&ibuf->fds)) == NULL)
		return (-1);

	fd = ifd->fd;
	TAILQ_REMOVE(&ibuf->fds, ifd, entry);
	free(ifd);

	return (fd);
}

int
imsg_flush(struct imsgbuf *ibuf)
{
	while (ibuf->w.queued)
		if (msgbuf_write(&ibuf->w) < 0)
			return (-1);
	return (0);
}

void
imsg_clear(struct imsgbuf *ibuf)
{
	int	fd;

	msgbuf_clear(&ibuf->w);
	while ((fd = imsg_get_fd(ibuf)) != -1)
		close(fd);
}
@


1.31
log
@Rename some imsg bits to make namespace collisions less likely buf to
ibuf, buf_read to ibuf_read, READ_BUF_SIZE to IBUF_READ_SIZE.

ok henning gilles claudio jacekm deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.19 2010/04/07 18:09:39 nicm Exp $	*/
@


1.30
log
@Remove XXX comment and just close received fd if calloc() fails.

If this happens the imsg may no longer be usable as there may be queued
messages, but this is a) already the case with the code now, and b)
would be the case if recvmsg() fails anyway, so we can document that -1
from imsg_read() invalidates the struct imsgbuf.

discussed with and ok eric
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.1 2009/08/11 17:18:35 nicm Exp $	*/
d138 1
a138 1
	struct buf	*wbuf;
d157 1
a157 1
	struct buf	*wbuf;
d178 1
a178 1
struct buf *
d182 1
a182 1
	struct buf	*wbuf;
d196 1
a196 1
	if ((wbuf = buf_dynamic(datalen, MAX_IMSGSIZE)) == NULL) {
d206 1
a206 1
imsg_add(struct buf *msg, void *data, u_int16_t datalen)
d209 2
a210 2
		if (buf_add(msg, data, datalen) == -1) {
			buf_free(msg);
d217 1
a217 1
imsg_close(struct imsgbuf *ibuf, struct buf *msg)
d229 1
a229 1
	buf_close(&ibuf->w, msg);
@


1.29
log
@Make imsg_clear close and free any fds in the received fd queue as well as
freeing the msgbuf.

While here also remove an unnecessary while loop.

ok eric pyr
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.28 2009/06/08 08:30:06 dlg Exp $	*/
d82 1
a82 1
				/* XXX: this return can leak */
@


1.28
log
@revert this change by eric@@:

Make the imsg protocol network-safe.


it might be network safe, but half the imsg based daemons on my firewalls
dont run anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.27 2009/06/07 05:56:25 eric Exp $	*/
d266 5
a270 2
	while (ibuf->w.queued)
		msgbuf_clear(&ibuf->w);
@


1.27
log
@Change the way fds passed over a socket are retreived on the receiving side.

Currently the receiver fetches an imsg via imsg_get() and if he expects
an fd, he then calls imsg_get_fd() to fetch the next fd queued on the
imsgbuf from which the imsg came.

This changes hides the fd queueing mechanism to the API user.  When closing
an imsg with an fd, the message is flagged so that the receiving end knows
it must dequeue the fd in imsg_get() and return it with the imsg structure.
This way there is no (less) possible screw up from imsg_get_fd() not being
called directly after imsg_get() by the user. The retreived imsg is
self-contained.

ok pyr@@, "I like that" henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.26 2009/06/07 00:40:46 eric Exp $	*/
d110 1
a110 1
	if ((imsg->hdr.len = ntohs(imsg->hdr.len)) > av)
a111 4
	imsg->hdr.type = ntohl(imsg->hdr.type);
	imsg->hdr.flags = ntohs(imsg->hdr.flags);
	imsg->hdr.peerid = ntohl(imsg->hdr.peerid);
	imsg->hdr.pid = ntohl(imsg->hdr.pid);
d227 2
a228 5
	hdr->type = htonl(hdr->type);
	hdr->len = htons(msg->wpos);
	hdr->flags = htons(hdr->flags);
	hdr->peerid = htonl(hdr->peerid);
	hdr->pid = htonl(hdr->pid);
@


1.26
log
@Make the imsg protocol network-safe.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.25 2009/06/06 22:11:25 eric Exp $	*/
d31 2
d118 1
a118 1
	if ((imsg->data = malloc(datalen)) == NULL) {
d120 6
a125 1
	}
d226 5
@


1.25
log
@change the imsg header fields a bit to prepare for upcoming changes.
add a flag field, use u_int32_t for pid_t and extend type to 32 bits
for padding.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.24 2009/06/06 05:04:12 pyr Exp $	*/
d108 1
a108 1
	if (imsg->hdr.len > av)
d110 4
d219 5
a223 1
	hdr->len = (u_int16_t)msg->wpos;
@


1.24
log
@remove unnecessary and scary pid check in imsg_init.
ok eric@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.23 2009/06/05 23:39:51 pyr Exp $	*/
d128 1
a128 1
imsg_compose(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d147 1
a147 1
imsg_composev(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d172 1
a172 1
imsg_create(struct imsgbuf *ibuf, u_int16_t type, u_int32_t peerid,
d185 1
@


1.23
log
@4 handed diff with eric:
Stop pushing event handling in the imsg framework.
Instead, provide a small glue layer on top of both imsg and libevent.
This finally clearly separates event handling and imsg construction.

Sidetrack bonus: remove the mega-ugly hack of having a dummy imsg_event_add
stub in relayctl.

This will make bgpd (and thus henning) happy. Next up are smtpd and ospfd.

ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.22 2009/06/05 00:04:01 pyr Exp $	*/
d34 2
a35 6
	if (!ibuf->pid) {
		msgbuf_init(&ibuf->w);
		bzero(&ibuf->r, sizeof(ibuf->r));
		ibuf->pid = getpid();
		TAILQ_INIT(&ibuf->fds);
	}
d38 2
@


1.22
log
@Make imsg completely async model agnostic by not requiring an
imsg_event_add function to be provided (which ended up being a named
callback).
Instead provide a wrapper in the daemon and call that everywhere.
Previsously discussed with the usual suspects,
ok eric@@ though not too happy about the function name
(imsg_compose_event).
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.21 2009/06/04 23:33:49 pyr Exp $	*/
d32 1
a32 1
imsg_init(struct imsgbuf *ibuf, int fd, void (*handler)(int, short, void *))
a37 1
		ibuf->handler = handler;
@


1.21
log
@move logging functions out of imsg.h, make imsg.c more library ready
by not calling log_* or fatal and handle set errno when appropriate.

discussed with a bunch of imsg conscious guys, ok eric@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.20 2009/06/04 22:42:15 eric Exp $	*/
a218 1
	imsg_event_add(ibuf);
@


1.20
log
@change imsg_close() return type to void. It never fails nor does it
return any useful value.

"ok now" pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.19 2009/06/04 20:31:37 eric Exp $	*/
a69 1
			log_warn("imsg_read: pipe read error");
d82 4
a85 2
			if ((ifd = calloc(1, sizeof(struct imsg_fd))) == NULL)
				fatal("imsg_read calloc");
d88 2
a89 3
		} else
			log_warn("imsg_read: got unexpected ctl data level %d "
			    "type %d", cmsg->cmsg_level, cmsg->cmsg_type);
d108 1
a108 2
		log_warnx("imsg_get: imsg hdr len %u out of bounds, type=%u",
		    imsg->hdr.len, imsg->hdr.type);
a115 1
		log_warn("imsg_get");
d183 1
a183 3
		log_warnx("imsg_create: len %u > MAX_IMSGSIZE; "
		    "type %u peerid %lu", datalen + IMSG_HEADER_SIZE,
		    type, peerid);
a191 1
		log_warn("imsg_create: buf_open");
a204 1
			log_warnx("imsg_add: buf_add error");
@


1.19
log
@- move message types enum back to relayd.h
- use u_int16_t instead of enum imsg_type in imsg function prototypes

requested by reyk@@, ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.18 2009/06/04 18:34:33 eric Exp $	*/
a136 1
	int		 n;
d146 1
a146 2
	if ((n = imsg_close(ibuf, wbuf)) < 0)
		return (-1);
d148 1
a148 1
	return (n);
a155 1
	int		 n;
d170 1
a170 2
	if ((n = imsg_close(ibuf, wbuf)) < 0)
		return (-1);
d172 1
a172 1
	return (n);
d217 1
a217 1
int
a225 2

	return (1);
@


1.18
log
@revert previous commit for now since it won't play well with snmpd.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.17 2009/06/04 17:51:38 eric Exp $	*/
d133 1
a133 1
imsg_compose(struct imsgbuf *ibuf, enum imsg_type type, u_int32_t peerid,
d154 1
a154 1
imsg_composev(struct imsgbuf *ibuf, enum imsg_type type, u_int32_t peerid,
d181 1
a181 1
imsg_create(struct imsgbuf *ibuf, enum imsg_type type, u_int32_t peerid,
@


1.17
log
@make the imsg framework endian-safe so that it can also be used
for network message passing.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.16 2009/06/04 07:16:38 eric Exp $	*/
a105 3
	imsg->hdr.type = ntohs(imsg->hdr.type);
	imsg->hdr.len = ntohs(imsg->hdr.len);
	imsg->hdr.peerid = ntohl(imsg->hdr.peerid);
d227 1
a227 3
	hdr->type = htons(hdr->type);
	hdr->len = htons(msg->wpos);
	hdr->peerid = htonl(hdr->peerid);
@


1.16
log
@Make imsg.c and buffer.c more generic by introducing
imsg.h and a daemon-specific imsg_types.h

discussed with and "yes, please" pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.15 2009/06/03 05:35:06 eric Exp $	*/
d106 3
d230 3
a232 1
	hdr->len = (u_int16_t)msg->wpos;
@


1.15
log
@change buf_close return type to void.
that function is not supposed to report anything remotely useful,
or fail in any meaningful way.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.14 2008/03/24 16:11:05 deraadt Exp $	*/
d20 1
a21 1
#include <sys/queue.h>
a23 2
#include <net/if.h>

a24 1
#include <event.h>
d29 1
a29 3
#include <openssl/ssl.h>

#include "relayd.h"
@


1.14
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.13 2008/03/15 16:25:00 deraadt Exp $	*/
a228 1
	int		 n;
d233 1
a233 5
	if ((n = buf_close(&ibuf->w, msg)) < 0) {
			log_warnx("imsg_close: buf_close error");
			buf_free(msg);
			return (-1);
	}
d236 1
a236 1
	return (n);
@


1.13
log
@Repair more msg_controllen dealing with structures or arrays of
descriptors; ok hshoexer, also looked at by kettenis and henning
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.12 2008/03/13 01:49:53 deraadt Exp $	*/
d71 1
a71 1
	msg.msg_controllen = CMSG_LEN(sizeof(int) * 16);
@


1.12
log
@Correct CMSG_SPACE and CMSG_LEN usage everywhere in the tree. Due to
an extensive discussion with otto, kettenis, millert, and hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.11 2008/02/11 10:42:50 reyk Exp $	*/
d71 1
a71 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.11
log
@Marry relayd with snmpd using new "send trap" option: Request to send
a SNMP trap when the state of a host changes.  relayd(8) will try to
(re-)connect to snmpd(8) and request it to send a trap to the
registered trap receivers, see snmpd.conf(5) for more information
about the configuration.

ok pyr@@ thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.10 2007/12/07 17:17:00 reyk Exp $	*/
d55 4
a58 1
	char			 cmsgbuf[CMSG_SPACE(sizeof(int) * 16)];
d70 2
a71 2
	msg.msg_control = cmsgbuf;
	msg.msg_controllen = sizeof(cmsgbuf);
@


1.10
log
@hoststated gets renamed to relayd.  easier to type, and actually says
what the daemon does - it is a relayer that pays attention to the status
of pools of hosts; not a status checkers that happens to do some relaying
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.9 2007/11/24 17:07:28 reyk Exp $	*/
d39 7
a45 2
	msgbuf_init(&ibuf->w);
	bzero(&ibuf->r, sizeof(ibuf->r));
a47 3
	ibuf->pid = getpid();
	ibuf->handler = handler;
	TAILQ_INIT(&ibuf->fds);
d155 26
d261 16
@


1.9
log
@sort includes, adjust to style(9)
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.8 2007/07/24 12:42:32 pyr Exp $	*/
d34 1
a34 1
#include "hoststated.h"
@


1.8
log
@make imsg_create use dynamic buffers.
this does not change imsg_compose's behavior but allows the message's
buffer to grow and will avoid sending a ton of small messages when
unrolling lists between two processes.

discussed with claudio (and coming to ospfd soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.7 2007/06/12 15:16:10 msf Exp $	*/
d19 1
a19 1
#include <sys/types.h>
d23 1
a23 1
#include <sys/param.h>
d25 1
@


1.7
log
@put the fd passing from bgpd back in to hoststated's version of imsg,
needed for layer 7 reload support.

ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.6 2007/03/19 10:11:59 henning Exp $	*/
d160 2
a161 1
	if (datalen > MAX_IMSGSIZE - IMSG_HEADER_SIZE) {
a167 1
	hdr.len = (u_int16_t)(datalen + IMSG_HEADER_SIZE);
d172 1
a172 1
	if ((wbuf = buf_open(hdr.len)) == NULL) {
d197 2
a198 1
	int	n;
d200 2
@


1.6
log
@do not signal "connection closed" upstream on EINTR/EAGAIN, from bgpd et al
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.5 2007/01/29 14:23:31 pyr Exp $	*/
d50 4
d55 2
d58 10
a67 2
	if ((n = recv(ibuf->fd, ibuf->r.buf + ibuf->r.wpos,
	    sizeof(ibuf->r.buf) - ibuf->r.wpos, 0)) == -1) {
d77 14
d133 1
a133 1
    pid_t pid, void *data, u_int16_t datalen)
d144 2
d213 16
@


1.5
log
@Add SSL support to hoststated.
with help and OK reyk@@
with help and advice by claudio@@ and Srebrenko Sehic
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.4 2007/01/09 00:45:32 deraadt Exp $	*/
d58 1
a58 1
		return (0);
@


1.4
log
@adapt to rename
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.3 2007/01/08 20:46:18 reyk Exp $	*/
d30 2
@


1.3
log
@do NOT use the regexp interface. it is way to complicated, error-prone
and we don't know about all the possible security problems.

change the check send/expect code to use the fnmatch(3) interface
using shell globbing rules instead. this allows simple patterns like
"220 * ESMTP*" or "SSH-[12].??-*".

suggested by deraadt@@ and otto@@
ok Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.2 2007/01/08 13:37:26 reyk Exp $	*/
d31 1
a31 1
#include "hostated.h"
@


1.2
log
@add a generic send/expect check using regular expression (see
regex(3)).  this allows to define additional checks for other TCP
protocols.

From Pierre-Yves Ritschard (pyr at spootnik dot org)
@
text
@d1 1
a1 1
/*	$OpenBSD: imsg.c,v 1.1 2006/12/16 11:45:07 reyk Exp $	*/
a29 1
#include <regex.h>
@


1.1
log
@Import hostated, the host status daemon.  This daemon will monitor
remote hosts and dynamically alter pf(4) tables and redirection rules
for active server load balancing.  The daemon has been written by
Pierre-Yves Ritschard (pyr at spootnik.org) and was formerly known as
"slbd".

The daemon is fully functional but it still needs some work and
cleanup so we don't link it to the build yet.  Some TODOs are a
partial rewrite of the check_* routines (use libevent whenever we
can), improvement of the manpages, and general knf and cleanup.

ok deraadt@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
@

