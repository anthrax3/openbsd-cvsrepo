head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.9
date	2016.08.01.21.14.45;	author benno;	state Exp;
branches;
next	1.8;
commitid	l4KqASYHmTegHhxt;

1.8
date	2016.07.29.10.00.12;	author reyk;	state Exp;
branches;
next	1.7;
commitid	ns1VHKheNdQL2F8X;

1.7
date	2015.06.11.18.49.09;	author reyk;	state Exp;
branches;
next	1.6;
commitid	r36j1ZCD0yPK3S9O;

1.6
date	2015.05.30.09.38.11;	author claudio;	state Exp;
branches;
next	1.5;
commitid	zU7qyi2z5gDSGSSr;

1.5
date	2014.08.14.10.30.52;	author reyk;	state Exp;
branches;
next	1.4;
commitid	7AXq6S1YvbU30C7X;

1.4
date	2014.07.13.15.11.23;	author reyk;	state Exp;
branches;
next	1.3;
commitid	dAZwwKdUTxoueXDl;

1.3
date	2014.07.12.14.34.13;	author reyk;	state Exp;
branches;
next	1.2;
commitid	Rqjr3ecSVr0G8d8h;

1.2
date	2014.07.11.11.48.50;	author reyk;	state Exp;
branches;
next	1.1;
commitid	6F05OKHLwEQdKZuE;

1.1
date	2014.07.09.16.42.05;	author reyk;	state Exp;
branches;
next	;
commitid	YhQvyAop4vC3AmzJ;


desc
@@


1.9
log
@rfc 7230 3.3.3 says: response with a status code of 1xx
(Informational) or 204 (No Content) MUST not have a Content-Length.
Add a check for that.
ok reyk@@
@
text
@/*	$OpenBSD: http.h,v 1.8 2016/07/29 10:00:12 reyk Exp $	*/

/*
 * Copyright (c) 2012 - 2015 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef HTTP_H
#define HTTP_H

#define HTTP_PORT	80
#define HTTPS_PORT	443

enum httpmethod {
	HTTP_METHOD_NONE	= 0,

	/* HTTP/1.1, RFC 7231 */
	HTTP_METHOD_GET,
	HTTP_METHOD_HEAD,
	HTTP_METHOD_POST,
	HTTP_METHOD_PUT,
	HTTP_METHOD_DELETE,
	HTTP_METHOD_OPTIONS,
	HTTP_METHOD_TRACE,
	HTTP_METHOD_CONNECT,

	/* WebDAV, RFC 4918 */
	HTTP_METHOD_PROPFIND,
	HTTP_METHOD_PROPPATCH,
	HTTP_METHOD_MKCOL,
	HTTP_METHOD_COPY,
	HTTP_METHOD_MOVE,
	HTTP_METHOD_LOCK,
	HTTP_METHOD_UNLOCK,

	/* WebDAV Versioning Extension, RFC 3253 */
	HTTP_METHOD_VERSION_CONTROL,
	HTTP_METHOD_REPORT,
	HTTP_METHOD_CHECKOUT,
	HTTP_METHOD_CHECKIN,
	HTTP_METHOD_UNCHECKOUT,
	HTTP_METHOD_MKWORKSPACE,
	HTTP_METHOD_UPDATE,
	HTTP_METHOD_LABEL,
	HTTP_METHOD_MERGE,
	HTTP_METHOD_BASELINE_CONTROL,
	HTTP_METHOD_MKACTIVITY,

	/* WebDAV Ordered Collections, RFC 3648 */
	HTTP_METHOD_ORDERPATCH,

	/* WebDAV Access Control, RFC 3744 */
	HTTP_METHOD_ACL,

	/* WebDAV Redirect Reference Resources, RFC 4437 */
	HTTP_METHOD_MKREDIRECTREF,
	HTTP_METHOD_UPDATEREDIRECTREF,

	/* WebDAV Search, RFC 5323 */
	HTTP_METHOD_SEARCH,

	/* PATCH, RFC 5789 */
	HTTP_METHOD_PATCH,

	/* Server response (internal value) */
	HTTP_METHOD_RESPONSE
};

struct http_method {
	enum httpmethod		 method_id;
	const char		*method_name;
};
#define HTTP_METHODS		{			\
	{ HTTP_METHOD_GET,		"GET" },	\
	{ HTTP_METHOD_HEAD,		"HEAD" },	\
	{ HTTP_METHOD_POST,		"POST" },	\
	{ HTTP_METHOD_PUT,		"PUT" },	\
	{ HTTP_METHOD_DELETE,		"DELETE" },	\
	{ HTTP_METHOD_OPTIONS,		"OPTIONS" },	\
	{ HTTP_METHOD_TRACE,		"TRACE" },	\
	{ HTTP_METHOD_CONNECT,		"CONNECT" },	\
	{ HTTP_METHOD_PROPFIND,		"PROPFIND" },	\
	{ HTTP_METHOD_PROPPATCH,	"PROPPATCH" },	\
	{ HTTP_METHOD_MKCOL,		"MKCOL" },	\
	{ HTTP_METHOD_COPY,		"COPY" },	\
	{ HTTP_METHOD_MOVE,		"MOVE" },	\
	{ HTTP_METHOD_LOCK,		"LOCK" },	\
	{ HTTP_METHOD_UNLOCK,		"UNLOCK" },	\
	{ HTTP_METHOD_VERSION_CONTROL,	"VERSION-CONTROL" }, \
	{ HTTP_METHOD_REPORT,		"REPORT" },	\
	{ HTTP_METHOD_CHECKOUT,		"CHECKOUT" },	\
	{ HTTP_METHOD_CHECKIN,		"CHECKIN" },	\
	{ HTTP_METHOD_UNCHECKOUT,	"UNCHECKOUT" },	\
	{ HTTP_METHOD_MKWORKSPACE,	"MKWORKSPACE" }, \
	{ HTTP_METHOD_UPDATE,		"UPDATE" },	\
	{ HTTP_METHOD_LABEL,		"LABEL" },	\
	{ HTTP_METHOD_MERGE,		"MERGE" },	\
	{ HTTP_METHOD_BASELINE_CONTROL,	"BASELINE-CONTROL" }, \
	{ HTTP_METHOD_MKACTIVITY,	"MKACTIVITY" },	\
	{ HTTP_METHOD_ORDERPATCH,	"ORDERPATCH" },	\
	{ HTTP_METHOD_ACL,		"ACL" },	\
	{ HTTP_METHOD_MKREDIRECTREF,	"MKREDIRECTREF" }, \
	{ HTTP_METHOD_UPDATEREDIRECTREF, "UPDATEREDIRECTREF" }, \
	{ HTTP_METHOD_SEARCH,		"SEARCH" },	\
	{ HTTP_METHOD_PATCH,		"PATCH" },	\
	{ HTTP_METHOD_NONE,		NULL }		\
}

struct http_error {
	int			 error_code;
	const char		*error_name;
};

/*
 * HTTP status codes based on IANA assignments (2014-06-11 version):
 * https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
 * plus legacy (306) and non-standard (420).
 */
#define HTTP_ERRORS		{			\
	{ 100,	"Continue" },				\
	{ 101,	"Switching Protocols" },		\
	{ 102,	"Processing" },				\
	/* 103-199 unassigned */			\
	{ 200,	"OK" },					\
	{ 201,	"Created" },				\
	{ 202,	"Accepted" },				\
	{ 203,	"Non-Authoritative Information" },	\
	{ 204,	"No Content" },				\
	{ 205,	"Reset Content" },			\
	{ 206,	"Partial Content" },			\
	{ 207,	"Multi-Status" },			\
	{ 208,	"Already Reported" },			\
	/* 209-225 unassigned */			\
	{ 226,	"IM Used" },				\
	/* 227-299 unassigned */			\
	{ 300,	"Multiple Choices" },			\
	{ 301,	"Moved Permanently" },			\
	{ 302,	"Found" },				\
	{ 303,	"See Other" },				\
	{ 304,	"Not Modified" },			\
	{ 305,	"Use Proxy" },				\
	{ 306,	"Switch Proxy" },			\
	{ 307,	"Temporary Redirect" },			\
	{ 308,	"Permanent Redirect" },			\
	/* 309-399 unassigned */			\
	{ 400,	"Bad Request" },			\
	{ 401,	"Unauthorized" },			\
	{ 402,	"Payment Required" },			\
	{ 403,	"Forbidden" },				\
	{ 404,	"Not Found" },				\
	{ 405,	"Method Not Allowed" },			\
	{ 406,	"Not Acceptable" },			\
	{ 407,	"Proxy Authentication Required" },	\
	{ 408,	"Request Timeout" },			\
	{ 409,	"Conflict" },				\
	{ 410,	"Gone" },				\
	{ 411,	"Length Required" },			\
	{ 412,	"Precondition Failed" },		\
	{ 413,	"Payload Too Large" },			\
	{ 414,	"URI Too Long" },			\
	{ 415,	"Unsupported Media Type" },		\
	{ 416,	"Range Not Satisfiable" },		\
	{ 417,	"Expectation Failed" },			\
	{ 418,	"I'm a teapot" },			\
	/* 419-421 unassigned */			\
	{ 420,	"Enhance Your Calm" },			\
	{ 422,	"Unprocessable Entity" },		\
	{ 423,	"Locked" },				\
	{ 424,	"Failed Dependency" },			\
	/* 425 unassigned */				\
	{ 426,	"Upgrade Required" },			\
	/* 427 unassigned */				\
	{ 428,	"Precondition Required" },		\
	{ 429,	"Too Many Requests" },			\
	/* 430 unassigned */				\
	{ 431,	"Request Header Fields Too Large" },	\
	/* 432-450 unassigned */			\
	{ 451,	"Unavailable For Legal Reasons" },	\
	/* 452-499 unassigned */			\
	{ 500,	"Internal Server Error" },		\
	{ 501,	"Not Implemented" },			\
	{ 502,	"Bad Gateway" },			\
	{ 503,	"Service Unavailable" },		\
	{ 504,	"Gateway Timeout" },			\
	{ 505,	"HTTP Version Not Supported" },		\
	{ 506,	"Variant Also Negotiates" },		\
	{ 507,	"Insufficient Storage" },		\
	{ 508,	"Loop Detected" },			\
	/* 509 unassigned */				\
	{ 510,	"Not Extended" },			\
	{ 511,	"Network Authentication Required" },	\
	/* 512-599 unassigned */			\
	{ 0,	NULL }					\
}

struct http_mediatype {
	char		*media_name;
	char		*media_type;
	char		*media_subtype;
};
/*
 * Some default media types based on (2014-08-04 version):
 * https://www.iana.org/assignments/media-types/media-types.xhtml
 */
#define MEDIA_TYPES		{			\
	{ "css",	"text",		"css" },	\
	{ "html",	"text",		"html" },	\
	{ "txt",	"text",		"plain" },	\
	{ "gif",	"image",	"gif" },	\
	{ "jpeg",	"image",	"jpeg" },	\
	{ "jpg",	"image",	"jpeg" },	\
	{ "png",	"image",	"png" },	\
	{ "svg",	"image",	"svg+xml" },	\
	{ "js",		"application",	"javascript" },	\
	{ NULL }					\
}

/* Used during runtime */
struct http_descriptor {
	struct kv		 http_pathquery;
	struct kv		 http_matchquery;
#define http_path		 http_pathquery.kv_key
#define http_query		 http_pathquery.kv_value
#define http_rescode		 http_pathquery.kv_key
#define http_resmesg		 http_pathquery.kv_value
#define query_key		 http_matchquery.kv_key
#define query_val		 http_matchquery.kv_value

	char			*http_host;
	enum httpmethod		 http_method;
	int			 http_chunked;
	char			*http_version;
	unsigned int		 http_status;

	/* Rewritten path remains NULL if not used */
	char			*http_path_alias;

	/* A tree of headers and attached lists for repeated headers. */
	struct kv		*http_lastheader;
	struct kvtree		 http_headers;
};

#endif /* HTTP_H */
@


1.8
log
@Add support for common WebDAV methods;  from httpd.

Found and tested by Michael Lechtermann
OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.13 2015/06/11 18:49:09 reyk Exp $	*/
d244 1
@


1.7
log
@Use "compliant" header guards by avoiding the reserved '_' namespace.

Pointed out by Markus Elfring

OK mikeb@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.6 2015/05/30 09:38:11 claudio Exp $	*/
d4 1
a4 1
 * Copyright (c) 2012 - 2014 Reyk Floeter <reyk@@openbsd.org>
d47 26
d100 16
d175 2
a176 1
	/* 418-421 unassigned */			\
d188 3
a190 1
	/* 432-499 unassigned */			\
d224 1
d240 1
d244 3
@


1.6
log
@Remove fields from struct that are not used. OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.5 2014/08/14 10:30:52 reyk Exp $	*/
d19 2
a20 2
#ifndef _HTTP_H
#define _HTTP_H
d203 1
a203 1
#endif /* _HTTP_H */
@


1.5
log
@Sync with httpd, including the following change from doug@@:
"Sync with RFC 7230-7235 phrases and IANA registered status codes.
ok reyk@@"
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.7 2014/08/14 09:12:26 doug Exp $	*/
a193 1
	char			*http_host;
a196 3

	/* Rewritten path remains NULL if not used */
	char			*http_path_alias;
@


1.4
log
@Sync file to be identical in relayd(8) and httpd(8).
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.2 2014/07/13 14:17:37 reyk Exp $	*/
d22 3
d28 1
a28 1
	/* HTTP/1.1, RFC 2616 */
d82 6
d91 2
d96 1
a96 1
	{ 203,	"Non-Authorative Information" },	\
d100 5
d107 1
a107 1
	{ 302,	"Moved Temporarily" },			\
d110 2
d113 2
d128 2
a129 2
	{ 413,	"Request Entity Too Large" },		\
	{ 414,	"Request-URL Too Long" },		\
d131 1
a131 1
	{ 416,	"Requested Range Not Satisfiable" },	\
d133 13
d152 7
d167 4
a170 1
/* Some default media types */
d194 1
a194 1
	char			*http_version;
d197 4
d203 1
a204 1
	struct kv		*http_lastheader;
@


1.3
log
@Move HTTP error codes into http.h.

ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.2 2014/07/11 11:48:50 reyk Exp $	*/
d19 2
a20 2
#ifndef _RELAYD_HTTP_H
#define _RELAYD_HTTP_H
d122 18
d160 1
a160 1
#endif /* _RELAYD_HTTP_H */
@


1.2
log
@Simplify the code that handles the HTTP headers by using an RB tree
with associated lists instead of the complicated lookup table and
"others" list.  This might add a little malloc overhead for common
headers but also fixes some issues like the handling of repeated
headers -  for example, handling of multiple "Set-Cookie" headers.

ok bluhm@@ (regress part)
ok benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: http.h,v 1.1 2014/07/09 16:42:05 reyk Exp $	*/
d73 47
@


1.1
log
@Replace the protocol directives for HTTP with a new generic filtering
language.  The grammar is inspired by pf and allows to write versatile
last-matching filter rules in protocol sections starting with the
"pass", "block" or "match" keywords.  This work was started almost two
years ago and replaces large parts of relayd(8)'s HTTP and filtering
code.  The initial version reimplements and extends HTTP filtering,
but will be improved to support generic TCP and other protocols later.

With some testing, feedback, and help from benno@@ and andre@@.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a74 272
enum httpheader {
	HTTP_HEADER_NONE	= 0,

	/* HTTP Header Field Registration, RFC 4229 */
	HTTP_HEADER_A_IM,
	HTTP_HEADER_ACCEPT,
	HTTP_HEADER_ACCEPT_ADDITIONS,
	HTTP_HEADER_ACCEPT_CHARSET,
	HTTP_HEADER_ACCEPT_ENCODING,
	HTTP_HEADER_ACCEPT_FEATURES,
	HTTP_HEADER_ACCEPT_LANGUAGE,
	HTTP_HEADER_ACCEPT_RANGES,
	HTTP_HEADER_AGE,
	HTTP_HEADER_ALLOW,
	HTTP_HEADER_ALTERNATES,
	HTTP_HEADER_AUTHENTICATION_INFO,
	HTTP_HEADER_AUTHORIZATION,
	HTTP_HEADER_C_EXT,
	HTTP_HEADER_C_MAN,
	HTTP_HEADER_C_OPT,
	HTTP_HEADER_C_PEP,
	HTTP_HEADER_C_PEP_INFO,
	HTTP_HEADER_CACHE_CONTROL,
	HTTP_HEADER_CONNECTION,
	HTTP_HEADER_CONTENT_BASE,
	HTTP_HEADER_CONTENT_DISPOSITION,
	HTTP_HEADER_CONTENT_ENCODING,
	HTTP_HEADER_CONTENT_ID,
	HTTP_HEADER_CONTENT_LANGUAGE,
	HTTP_HEADER_CONTENT_LENGTH,
	HTTP_HEADER_CONTENT_LOCATION,
	HTTP_HEADER_CONTENT_MD5,
	HTTP_HEADER_CONTENT_RANGE,
	HTTP_HEADER_CONTENT_SCRIPT_TYPE,
	HTTP_HEADER_CONTENT_STYLE_TYPE,
	HTTP_HEADER_CONTENT_TYPE,
	HTTP_HEADER_CONTENT_VERSION,
	HTTP_HEADER_COOKIE,
	HTTP_HEADER_COOKIE2,
	HTTP_HEADER_DAV,
	HTTP_HEADER_DATE,
	HTTP_HEADER_DEFAULT_STYLE,
	HTTP_HEADER_DELTA_BASE,
	HTTP_HEADER_DEPTH,
	HTTP_HEADER_DERIVED_FROM,
	HTTP_HEADER_DESTINATION,
	HTTP_HEADER_DIFFERENTIAL_ID,
	HTTP_HEADER_DIGEST,
	HTTP_HEADER_ETAG,
	HTTP_HEADER_EXPECT,
	HTTP_HEADER_EXPIRES,
	HTTP_HEADER_EXT,
	HTTP_HEADER_FROM,
	HTTP_HEADER_GETPROFILE,
	HTTP_HEADER_HOST,
	HTTP_HEADER_IM,
	HTTP_HEADER_IF,
	HTTP_HEADER_IF_MATCH,
	HTTP_HEADER_IF_MODIFIED_SINCE,
	HTTP_HEADER_IF_NONE_MATCH,
	HTTP_HEADER_IF_RANGE,
	HTTP_HEADER_IF_UNMODIFIED_SINCE,
	HTTP_HEADER_KEEP_ALIVE,
	HTTP_HEADER_LABEL,
	HTTP_HEADER_LAST_MODIFIED,
	HTTP_HEADER_LINK,
	HTTP_HEADER_LOCATION,
	HTTP_HEADER_LOCK_TOKEN,
	HTTP_HEADER_MIME_VERSION,
	HTTP_HEADER_MAN,
	HTTP_HEADER_MAX_FORWARDS,
	HTTP_HEADER_METER,
	HTTP_HEADER_NEGOTIATE,
	HTTP_HEADER_OPT,
	HTTP_HEADER_ORDERING_TYPE,
	HTTP_HEADER_OVERWRITE,
	HTTP_HEADER_P3P,
	HTTP_HEADER_PEP,
	HTTP_HEADER_PICS_LABEL,
	HTTP_HEADER_PEP_INFO,
	HTTP_HEADER_POSITION,
	HTTP_HEADER_PRAGMA,
	HTTP_HEADER_PROFILEOBJECT,
	HTTP_HEADER_PROTOCOL,
	HTTP_HEADER_PROTOCOL_INFO,
	HTTP_HEADER_PROTOCOL_QUERY,
	HTTP_HEADER_PROTOCOL_REQUEST,
	HTTP_HEADER_PROXY_AUTHENTICATE,
	HTTP_HEADER_PROXY_AUTHENTICATION_INFO,
	HTTP_HEADER_PROXY_AUTHORIZATION,
	HTTP_HEADER_PROXY_FEATURES,
	HTTP_HEADER_PROXY_INSTRUCTION,
	HTTP_HEADER_PUBLIC,
	HTTP_HEADER_RANGE,
	HTTP_HEADER_REFERER,
	HTTP_HEADER_RETRY_AFTER,
	HTTP_HEADER_SAFE,
	HTTP_HEADER_SECURITY_SCHEME,
	HTTP_HEADER_SERVER,
	HTTP_HEADER_SET_COOKIE,
	HTTP_HEADER_SET_COOKIE2,
	HTTP_HEADER_SETPROFILE,
	HTTP_HEADER_SOAPACTION,
	HTTP_HEADER_STATUS_URI,
	HTTP_HEADER_SURROGATE_CAPABILITY,
	HTTP_HEADER_SURROGATE_CONTROL,
	HTTP_HEADER_TCN,
	HTTP_HEADER_TE,
	HTTP_HEADER_TIMEOUT,
	HTTP_HEADER_TRAILER,
	HTTP_HEADER_TRANSFER_ENCODING,
	HTTP_HEADER_URI,
	HTTP_HEADER_UPGRADE,
	HTTP_HEADER_USER_AGENT,
	HTTP_HEADER_VARIANT_VARY,
	HTTP_HEADER_VARY,
	HTTP_HEADER_VIA,
	HTTP_HEADER_WWW_AUTHENTICATE,
	HTTP_HEADER_WANT_DIGEST,
	HTTP_HEADER_WARNING,

	/* PATCH, RFC 5789 */
	HTTP_HEADER_ACCEPT_PATCH,

	/* Other extensions */
	HTTP_HEADER_X_REQUESTED_WITH,	/* AJAX */
	HTTP_HEADER_X_FORWARDED_FOR,
	HTTP_HEADER_X_FORWARDED_BY,
	HTTP_HEADER_X_POWERED_BY,
	HTTP_HEADER_X_XSS_PROTECTION,
	HTTP_HEADER_ORIGIN,		/* Anti-XSRF */
	HTTP_HEADER_DNT,		/* Do-Not-Track */

	/* Array size */
	HTTP_HEADER_MAX,
#define	HTTP_HEADER_OTHER		HTTP_HEADER_MAX
};

struct http_header {
	enum httpheader		 header_id;
	const char		*header_name;
	int			 header_isused;
};
/* Has to be sorted alphabetically */
#define HTTP_HEADERS		{					\
	{ HTTP_HEADER_ACCEPT,			"Accept" },		\
	{ HTTP_HEADER_ACCEPT_ADDITIONS,		"Accept-Additions" },	\
	{ HTTP_HEADER_ACCEPT_CHARSET,		"Accept-Charset" },	\
	{ HTTP_HEADER_ACCEPT_ENCODING,		"Accept-Encoding" },	\
	{ HTTP_HEADER_ACCEPT_FEATURES,		"Accept-Features" },	\
	{ HTTP_HEADER_ACCEPT_LANGUAGE,		"Accept-Language" },	\
	{ HTTP_HEADER_ACCEPT_PATCH,		"Accept-Patch" },	\
	{ HTTP_HEADER_ACCEPT_RANGES,		"Accept-Ranges" },	\
	{ HTTP_HEADER_AGE,			"Age" },		\
	{ HTTP_HEADER_ALLOW,			"Allow" },		\
	{ HTTP_HEADER_ALTERNATES,		"Alternates" },		\
	{ HTTP_HEADER_AUTHENTICATION_INFO,	"Authentication-Info" },\
	{ HTTP_HEADER_AUTHORIZATION,		"Authorization" },	\
	{ HTTP_HEADER_A_IM,			"A-IM" },		\
	{ HTTP_HEADER_CACHE_CONTROL,		"Cache-Control" },	\
	{ HTTP_HEADER_CONNECTION,		"Connection" },		\
	{ HTTP_HEADER_CONTENT_BASE,		"Content-Base" },	\
	{ HTTP_HEADER_CONTENT_DISPOSITION,	"Content-Disposition" },\
	{ HTTP_HEADER_CONTENT_ENCODING,		"Content-Encoding" },	\
	{ HTTP_HEADER_CONTENT_ID,		"Content-ID" },		\
	{ HTTP_HEADER_CONTENT_LANGUAGE,		"Content-Language" },	\
	{ HTTP_HEADER_CONTENT_LENGTH,		"Content-Length" },	\
	{ HTTP_HEADER_CONTENT_LOCATION,		"Content-Location" },	\
	{ HTTP_HEADER_CONTENT_MD5,		"Content-MD5" },	\
	{ HTTP_HEADER_CONTENT_RANGE,		"Content-Range" },	\
	{ HTTP_HEADER_CONTENT_SCRIPT_TYPE,	"Content-Script-Type" },\
	{ HTTP_HEADER_CONTENT_STYLE_TYPE,	"Content-Style-Type" },	\
	{ HTTP_HEADER_CONTENT_TYPE,		"Content-Type" },	\
	{ HTTP_HEADER_CONTENT_VERSION,		"Content-Version" },	\
	{ HTTP_HEADER_COOKIE,			"Cookie" },		\
	{ HTTP_HEADER_COOKIE2,			"Cookie2" },		\
	{ HTTP_HEADER_C_EXT,			"C-Ext" },		\
	{ HTTP_HEADER_C_MAN,			"C-Man" },		\
	{ HTTP_HEADER_C_OPT,			"C-Opt" },		\
	{ HTTP_HEADER_C_PEP,			"C-PEP" },		\
	{ HTTP_HEADER_C_PEP_INFO,		"C-PEP-Info" },		\
	{ HTTP_HEADER_DATE,			"Date" },		\
	{ HTTP_HEADER_DAV,			"DAV" },		\
	{ HTTP_HEADER_DEFAULT_STYLE,		"Default-Style" },	\
	{ HTTP_HEADER_DELTA_BASE,		"Delta-Base" },		\
	{ HTTP_HEADER_DEPTH,			"Depth" },		\
	{ HTTP_HEADER_DERIVED_FROM,		"Derived-From" },	\
	{ HTTP_HEADER_DESTINATION,		"Destination" },	\
	{ HTTP_HEADER_DIFFERENTIAL_ID,		"Differential-Id" },	\
	{ HTTP_HEADER_DIGEST,			"Digest" },		\
	{ HTTP_HEADER_DNT,			"DNT" },		\
	{ HTTP_HEADER_ETAG,			"ETag" },		\
	{ HTTP_HEADER_EXPECT,			"Expect" },		\
	{ HTTP_HEADER_EXPIRES,			"Expires" },		\
	{ HTTP_HEADER_EXT,			"Ext" },		\
	{ HTTP_HEADER_FROM,			"From" },		\
	{ HTTP_HEADER_GETPROFILE,		"GetProfile" },		\
	{ HTTP_HEADER_HOST,			"Host", 1 /* used */ },	\
	{ HTTP_HEADER_IF,			"If" },			\
	{ HTTP_HEADER_IF_MATCH,			"If-Match" },		\
	{ HTTP_HEADER_IF_MODIFIED_SINCE,	"If-Modified-Since" },	\
	{ HTTP_HEADER_IF_NONE_MATCH,		"If-None-Match" },	\
	{ HTTP_HEADER_IF_RANGE,			"If-Range" },		\
	{ HTTP_HEADER_IF_UNMODIFIED_SINCE,	"If-Unmodified-Since" },\
	{ HTTP_HEADER_IM,			"IM" },			\
	{ HTTP_HEADER_KEEP_ALIVE,		"Keep-Alive" },		\
	{ HTTP_HEADER_LABEL,			"Label" },		\
	{ HTTP_HEADER_LAST_MODIFIED,		"Last-Modified" },	\
	{ HTTP_HEADER_LINK,			"Link" },		\
	{ HTTP_HEADER_LOCATION,			"Location" },		\
	{ HTTP_HEADER_LOCK_TOKEN,		"Lock-Token" },		\
	{ HTTP_HEADER_MAN,			"Man" },		\
	{ HTTP_HEADER_MAX_FORWARDS,		"Max-Forwards" },	\
	{ HTTP_HEADER_METER,			"Meter" },		\
	{ HTTP_HEADER_MIME_VERSION,		"MIME-Version" },	\
	{ HTTP_HEADER_NEGOTIATE,		"Negotiate" },		\
	{ HTTP_HEADER_OPT,			"Opt" },		\
	{ HTTP_HEADER_ORDERING_TYPE,		"Ordering-Type" },	\
	{ HTTP_HEADER_ORIGIN,			"Origin" },		\
	{ HTTP_HEADER_OVERWRITE,		"Overwrite" },		\
	{ HTTP_HEADER_P3P,			"P3P" },		\
	{ HTTP_HEADER_PEP,			"PEP" },		\
	{ HTTP_HEADER_PEP_INFO,			"Pep-Info" },		\
	{ HTTP_HEADER_PICS_LABEL,		"PICS-Label" },		\
	{ HTTP_HEADER_POSITION,			"Position" },		\
	{ HTTP_HEADER_PRAGMA,			"Pragma" },		\
	{ HTTP_HEADER_PROFILEOBJECT,		"ProfileObject" },	\
	{ HTTP_HEADER_PROTOCOL,			"Protocol" },		\
	{ HTTP_HEADER_PROTOCOL_INFO,		"Protocol-Info" },	\
	{ HTTP_HEADER_PROTOCOL_QUERY,		"Protocol-Query" },	\
	{ HTTP_HEADER_PROTOCOL_REQUEST,		"Protocol-Request" },	\
	{ HTTP_HEADER_PROXY_AUTHENTICATE,	"Proxy-Authenticate" },	\
	{ HTTP_HEADER_PROXY_AUTHENTICATION_INFO,"Proxy-Authenticate-Info" },\
	{ HTTP_HEADER_PROXY_AUTHORIZATION,	"Proxy-Authorization" },\
	{ HTTP_HEADER_PROXY_FEATURES,		"Proxy-Features" },	\
	{ HTTP_HEADER_PROXY_INSTRUCTION,	"Proxy-Instruction" },	\
	{ HTTP_HEADER_PUBLIC,			"Public" },		\
	{ HTTP_HEADER_RANGE,			"Range" },		\
	{ HTTP_HEADER_REFERER,			"Referer" },		\
	{ HTTP_HEADER_RETRY_AFTER,		"Retry-After" },	\
	{ HTTP_HEADER_SAFE,			"Safe" },		\
	{ HTTP_HEADER_SECURITY_SCHEME,		"Security-Scheme" },	\
	{ HTTP_HEADER_SERVER,			"Server" },		\
	{ HTTP_HEADER_SETPROFILE,		"SetProfile" },		\
	{ HTTP_HEADER_SET_COOKIE,		"Set-Cookie" },		\
	{ HTTP_HEADER_SET_COOKIE2,		"Set-Cookie2" },	\
	{ HTTP_HEADER_SOAPACTION,		"SoapAction" },		\
	{ HTTP_HEADER_STATUS_URI,		"Status-URI" },		\
	{ HTTP_HEADER_SURROGATE_CAPABILITY,	"Surrogate-Capability" },\
	{ HTTP_HEADER_SURROGATE_CONTROL,	"Surrogate-Control" },	\
	{ HTTP_HEADER_TCN,			"TCN" },		\
	{ HTTP_HEADER_TE,			"TE" },			\
	{ HTTP_HEADER_TIMEOUT,			"Timeout" },		\
	{ HTTP_HEADER_TRAILER,			"Trailer" },		\
	{ HTTP_HEADER_TRANSFER_ENCODING,	"Transfer-Encoding" },	\
	{ HTTP_HEADER_UPGRADE,			"Upgrade" },		\
	{ HTTP_HEADER_URI,			"URI" },		\
	{ HTTP_HEADER_USER_AGENT,		"User-Agent" },		\
	{ HTTP_HEADER_VARIANT_VARY,		"Variant-Vary" },	\
	{ HTTP_HEADER_VARY,			"Vary" },		\
	{ HTTP_HEADER_VIA,			"Via" },		\
	{ HTTP_HEADER_WANT_DIGEST,		"Want-Digest" },	\
	{ HTTP_HEADER_WARNING,			"Warning" },		\
	{ HTTP_HEADER_WWW_AUTHENTICATE,		"WWW-Authenticate" },	\
	{ HTTP_HEADER_X_FORWARDED_BY,		"X-Forwarded-By" },	\
	{ HTTP_HEADER_X_FORWARDED_FOR,		"X-Forwarded-For" },	\
	{ HTTP_HEADER_X_POWERED_BY,		"X-Powered-By" },	\
	{ HTTP_HEADER_X_REQUESTED_WITH,		"X-Requested-With" },	\
	{ HTTP_HEADER_X_XSS_PROTECTION,		"X-XSS-Protection" },	\
	{ HTTP_HEADER_OTHER,			NULL }			\
}

d90 3
a92 7
	/*
	 * A linked list of headers and an array with pointers
	 * pointing to well-known headers that have been found to
	 * speed up lookups.
	 */
	struct kvlist		 http_headers;
	struct kv		*http_header[HTTP_HEADER_MAX];
@

