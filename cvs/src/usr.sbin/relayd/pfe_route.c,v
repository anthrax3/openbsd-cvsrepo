head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.09.02.14.45.51;	author reyk;	state Exp;
branches;
next	1.10;
commitid	vcV98N2DyJGMwDyQ;

1.10
date	2015.12.02.13.41.27;	author reyk;	state Exp;
branches;
next	1.9;
commitid	vBNcEM4jmO1KceIa;

1.9
date	2015.01.22.17.42.09;	author reyk;	state Exp;
branches;
next	1.8;
commitid	puppem00jmzmdm4f;

1.8
date	2015.01.16.15.06.40;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	tOv8XK6tLyhEfayc;

1.7
date	2014.12.21.00.54.49;	author guenther;	state Exp;
branches;
next	1.6;
commitid	XnjIOhurXdX5o1V9;

1.6
date	2014.06.25.11.05.15;	author reyk;	state Exp;
branches;
next	1.5;
commitid	QSckC3KrSjGNpjr5;

1.5
date	2011.05.19.08.56.49;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.09.12.08.47;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.05.12.01.44;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.05.10.20.24;	author phessler;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.13.13.51.21;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Split "struct relayd" into two structs: "struct relayd" and "struct
relayd_config".  This way we can send all the relevant global
configuration to the children, not just the flags and the opts.

With input from and
OK claudio@@ benno@@
@
text
@/*	$OpenBSD: pfe_route.c,v 1.10 2015/12/02 13:41:27 reyk Exp $	*/

/*
 * Copyright (c) 2009 - 2011 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/queue.h>
#include <sys/socket.h>

#include <netinet/in.h>
#include <net/route.h>
#include <arpa/inet.h>

#include <limits.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>

#include "relayd.h"

struct relay_rtmsg {
	struct rt_msghdr	rm_hdr;
	union {
		struct {
			struct sockaddr_in	rm_dst;
			struct sockaddr_in	rm_gateway;
			struct sockaddr_in	rm_netmask;
			struct sockaddr_rtlabel	rm_label;
		}		 u4;
		struct {
			struct sockaddr_in6	rm_dst;
			struct sockaddr_in6	rm_gateway;
			struct sockaddr_in6	rm_netmask;
			struct sockaddr_rtlabel	rm_label;
		}		 u6;
	}			 rm_u;
};

void
init_routes(struct relayd *env)
{
	u_int	 rtfilter;

	if (!(env->sc_conf.flags & F_NEEDRT))
		return;

	if ((env->sc_rtsock = socket(AF_ROUTE, SOCK_RAW, 0)) == -1)
		fatal("init_routes: failed to open routing socket");

	rtfilter = ROUTE_FILTER(0);
	if (setsockopt(env->sc_rtsock, AF_ROUTE, ROUTE_MSGFILTER,
	    &rtfilter, sizeof(rtfilter)) == -1)
		fatal("init_routes: ROUTE_MSGFILTER");
}

void
sync_routes(struct relayd *env, struct router *rt)
{
	struct netroute		*nr;
	struct host		*host;
	char			 buf[HOST_NAME_MAX+1];
	struct ctl_netroute	 crt;

	if (!(env->sc_conf.flags & F_NEEDRT))
		return;

	TAILQ_FOREACH(nr, &rt->rt_netroutes, nr_entry) {
		print_host(&nr->nr_conf.ss, buf, sizeof(buf));
		TAILQ_FOREACH(host, &rt->rt_gwtable->hosts, entry) {
			if (host->up == HOST_UNKNOWN)
				continue;

			log_debug("%s: "
			    "router %s route %s/%d gateway %s %s priority %d",
			    __func__,
			    rt->rt_conf.name, buf, nr->nr_conf.prefixlen,
			    host->conf.name,
			    HOST_ISUP(host->up) ? "up" : "down",
			    host->conf.priority);

			crt.up = host->up;
			memcpy(&crt.nr, &nr->nr_conf, sizeof(nr->nr_conf));
			memcpy(&crt.host, &host->conf, sizeof(host->conf));
			memcpy(&crt.rt, &rt->rt_conf, sizeof(rt->rt_conf));

			proc_compose(env->sc_ps, PROC_PARENT,
			    IMSG_RTMSG, &crt, sizeof(crt));
		}
	}
}

int
pfe_route(struct relayd *env, struct ctl_netroute *crt)
{
	struct relay_rtmsg		 rm;
	struct sockaddr_rtlabel		 sr;
	struct sockaddr_storage		*gw;
	struct sockaddr_in		*s4;
	struct sockaddr_in6		*s6;
	size_t				 len = 0;
	char				*gwname;
	int				 i = 0;

	gw = &crt->host.ss;
	gwname = crt->host.name;

	bzero(&rm, sizeof(rm));
	bzero(&sr, sizeof(sr));

	rm.rm_hdr.rtm_msglen = len;
	rm.rm_hdr.rtm_version = RTM_VERSION;
	rm.rm_hdr.rtm_type = HOST_ISUP(crt->up) ? RTM_ADD : RTM_DELETE;
	rm.rm_hdr.rtm_flags = RTF_STATIC | RTF_GATEWAY | RTF_MPATH;
	rm.rm_hdr.rtm_seq = env->sc_rtseq++;
	rm.rm_hdr.rtm_addrs = RTA_DST | RTA_GATEWAY;
	rm.rm_hdr.rtm_tableid = crt->rt.rtable;
	rm.rm_hdr.rtm_priority = crt->host.priority;

	if (strlen(crt->rt.label)) {
		rm.rm_hdr.rtm_addrs |= RTA_LABEL;
		sr.sr_len = sizeof(sr);
		if (snprintf(sr.sr_label, sizeof(sr.sr_label),
		    "%s", crt->rt.label) == -1)
			goto bad;
	}

	if (crt->nr.ss.ss_family == AF_INET) {
		rm.rm_hdr.rtm_msglen = len =
		    sizeof(rm.rm_hdr) + sizeof(rm.rm_u.u4);

		bcopy(&sr, &rm.rm_u.u4.rm_label, sizeof(sr));

		s4 = &rm.rm_u.u4.rm_dst;
		s4->sin_family = AF_INET;
		s4->sin_len = sizeof(rm.rm_u.u4.rm_dst);
		s4->sin_addr.s_addr =
		    ((struct sockaddr_in *)&crt->nr.ss)->sin_addr.s_addr;

		s4 = &rm.rm_u.u4.rm_gateway;
		s4->sin_family = AF_INET;
		s4->sin_len = sizeof(rm.rm_u.u4.rm_gateway);
		s4->sin_addr.s_addr =
		    ((struct sockaddr_in *)gw)->sin_addr.s_addr;

		rm.rm_hdr.rtm_addrs |= RTA_NETMASK;
		s4 = &rm.rm_u.u4.rm_netmask;
		s4->sin_family = AF_INET;
		s4->sin_len = sizeof(rm.rm_u.u4.rm_netmask);
		if (crt->nr.prefixlen)
			s4->sin_addr.s_addr =
			    htonl(0xffffffff << (32 - crt->nr.prefixlen));
		else if (crt->nr.prefixlen < 0)
			rm.rm_hdr.rtm_flags |= RTF_HOST;
	} else if (crt->nr.ss.ss_family == AF_INET6) {
		rm.rm_hdr.rtm_msglen = len =
		    sizeof(rm.rm_hdr) + sizeof(rm.rm_u.u6);

		bcopy(&sr, &rm.rm_u.u6.rm_label, sizeof(sr));

		s6 = &rm.rm_u.u6.rm_dst;
		bcopy(((struct sockaddr_in6 *)&crt->nr.ss),
		    s6, sizeof(*s6));
		s6->sin6_family = AF_INET6;
		s6->sin6_len = sizeof(*s6);

		s6 = &rm.rm_u.u6.rm_gateway;
		bcopy(((struct sockaddr_in6 *)gw), s6, sizeof(*s6));
		s6->sin6_family = AF_INET6;
		s6->sin6_len = sizeof(*s6);

		rm.rm_hdr.rtm_addrs |= RTA_NETMASK;
		s6 = &rm.rm_u.u6.rm_netmask;
		s6->sin6_family = AF_INET6;
		s6->sin6_len = sizeof(*s6);
		if (crt->nr.prefixlen) {
			for (i = 0; i < crt->nr.prefixlen / 8; i++)
				s6->sin6_addr.s6_addr[i] = 0xff;
			i = crt->nr.prefixlen % 8;
			if (i)
				s6->sin6_addr.s6_addr[crt->nr.prefixlen
				    / 8] = 0xff00 >> i;
		} else if (crt->nr.prefixlen < 0)
			rm.rm_hdr.rtm_flags |= RTF_HOST;
	} else
		fatal("pfe_route: invalid address family");

 retry:
	if (write(env->sc_rtsock, &rm, len) == -1) {
		switch (errno) {
		case EEXIST:
		case ESRCH:
			if (rm.rm_hdr.rtm_type == RTM_ADD) {
				rm.rm_hdr.rtm_type = RTM_CHANGE;
				goto retry;
			} else if (rm.rm_hdr.rtm_type == RTM_DELETE) {
				/* Ignore */
				break;
			}
			/* FALLTHROUGH */
		default:
			goto bad;
		}
	}

	log_debug("%s: gateway %s %s", __func__, gwname,
	    HOST_ISUP(crt->up) ? "added" : "deleted");

	return (0);

 bad:
	log_debug("%s: failed to %s gateway %s: %d %s", __func__,
	    HOST_ISUP(crt->up) ? "add" : "delete", gwname,
	    errno, strerror(errno));

	return (-1);
}
@


1.10
log
@In most cases we don't need all arguments of proc_compose*_imsg(),
so add a shortcut proc_compose*() that skips all of them.  Only use the
full argument list if needed.  The functions with full argument lists can
eventually be replaced with a nicer transaction-based approach later.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.9 2015/01/22 17:42:09 reyk Exp $	*/
d58 1
a58 1
	if (!(env->sc_flags & F_NEEDRT))
d78 1
a78 1
	if (!(env->sc_flags & F_NEEDRT))
@


1.9
log
@Clean up the relayd headers with help of include-what-you-use and some
manual review.  Based on common practice, relayd.h now includes the
necessary headers for itself.

OK benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.8 2015/01/16 15:06:40 deraadt Exp $	*/
d100 2
a101 2
			proc_compose_imsg(env->sc_ps, PROC_PARENT, -1,
			    IMSG_RTMSG, -1, &crt, sizeof(crt));
@


1.8
log
@Adapt to <limits.h> universe.
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.7 2014/12/21 00:54:49 guenther Exp $	*/
a22 1
#include <net/if.h>
d25 1
d27 1
a28 1
#include <stdlib.h>
a29 1
#include <event.h>
a31 2

#include <openssl/ssl.h>
@


1.7
log
@Stop pulling in <arpa/inet.h> or <arpa/nameser.h> when unnecessary.
*Do* pull it in when in_{port,addr}_h is needed and <netinet/in.h> isn't.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.6 2014/06/25 11:05:15 reyk Exp $	*/
d78 1
a78 1
	char			 buf[MAXHOSTNAMELEN];
@


1.6
log
@sync copyright to reality according to my last changes
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.5 2011/05/19 08:56:49 reyk Exp $	*/
a24 1
#include <arpa/inet.h>
@


1.5
log
@Fix reload support in relayd(8) by reimplementing large parts of the
daemon infrastructure. The previous design made it fairly hard to
reload the complex data structures, especially relays and protocols.
One of the reasons was that the privsep'd relayd processes had two
ways of getting their configuration: 1) from memory after forking from
the parent process and 2) and (partially) via imsgs after reload.  The
new implementation first forks the privsep'd children before the
parents loads the configuration and sends it via imsgs to them; so it
is only like 2) before.  It is based on an approach that I first
implemented for iked(8) and I also fixed many bugs in the code.

Thanks to many testers including dlg@@ sthen@@ phessler@@
ok pyr@@ dlg@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.4 2011/05/09 12:08:47 reyk Exp $	*/
d4 1
a4 1
 * Copyright (c) 2009 Reyk Floeter <reyk@@openbsd.org>
@


1.4
log
@Reorganize the relayd code to use the proc.c privsep API/commodity
functions that are based on work for iked and smtpd.  This simplifies
the setup of privsep processes and moves some redundant and repeated
code to a single place - which is always good from a quality and
security point of view.  The relayd version of proc.c is different to
the current version in iked because it uses 1:N communications between
processes, eg. a single parent process is talking to many forked relay
children while iked only needs 1:1 communications.

ok sthen@@ pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.3 2011/05/05 12:01:44 reyk Exp $	*/
a98 2
			crt.id = nr->nr_conf.id;
			crt.hostid = host->conf.id;
d100 3
a118 2
	struct netroute			 *nr;
	struct host			*host;
d122 2
a123 8
	if ((nr = route_find(env, crt->id)) == NULL ||
	    (host = host_find(env, crt->hostid)) == NULL) {
		log_debug("%s: invalid host or route id", __func__);
		return (-1);
	}

	gw = &host->conf.ss;
	gwname = host->conf.name;
d134 2
a135 2
	rm.rm_hdr.rtm_tableid = nr->nr_router->rt_conf.rtable;
	rm.rm_hdr.rtm_priority = host->conf.priority;
d137 1
a137 1
	if (strlen(nr->nr_router->rt_conf.label)) {
d141 1
a141 1
		    "%s", nr->nr_router->rt_conf.label) == -1)
d145 1
a145 1
	if (nr->nr_conf.ss.ss_family == AF_INET) {
d155 1
a155 1
		    ((struct sockaddr_in *)&nr->nr_conf.ss)->sin_addr.s_addr;
d167 1
a167 1
		if (nr->nr_conf.prefixlen)
d169 2
a170 2
			    htonl(0xffffffff << (32 - nr->nr_conf.prefixlen));
		else if (nr->nr_conf.prefixlen < 0)
d172 1
a172 1
	} else if (nr->nr_conf.ss.ss_family == AF_INET6) {
d179 1
a179 1
		bcopy(((struct sockaddr_in6 *)&nr->nr_conf.ss),
d193 2
a194 2
		if (nr->nr_conf.prefixlen) {
			for (i = 0; i < nr->nr_conf.prefixlen / 8; i++)
d196 1
a196 1
			i = nr->nr_conf.prefixlen % 8;
d198 1
a198 1
				s6->sin6_addr.s6_addr[nr->nr_conf.prefixlen
d200 1
a200 1
		} else if (nr->nr_conf.prefixlen < 0)
@


1.3
log
@Update all logging and debug functions to use the __func__ macro
instead of static function names.  __func__ is C99 and perfectly fine
to use. It also avoids printing errors; for example if a statement
log_debug("foo:"..) was moved or copied from function foo() to bar()
and the log message was not updated...
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.2 2011/05/05 10:20:24 phessler Exp $	*/
a38 2
extern struct imsgev	*iev_main;

d103 2
a104 2
			imsg_compose_event(iev_main, IMSG_RTMSG,
			    0, 0, -1, &crt, sizeof(crt));
@


1.2
log
@Allow a user to specify the route priority

OK reyk@@ claudio@@ sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pfe_route.c,v 1.1 2009/08/13 13:51:21 reyk Exp $	*/
d93 1
a93 1
			log_debug("sync_routes: "
d95 1
d127 1
a127 1
		log_debug("pfe_route: invalid host or route id");
d232 1
a232 1
	log_debug("pfe_route: gateway %s %s", gwname,
d238 1
a238 1
	log_debug("pfe_route: failed to %s gateway %s: %d %s",
@


1.1
log
@add new 'router' functionality to dynamically add or remove routes
based on health check results, using the existing table syntax.  this
allows to maintain multiple (uplink) gateways to implement link
balancing or WAN link failover if no routing protocol or other
keepalive method is available.  works fine with or without
net.inet.ip.multipath enabled.

ok pyr@@, jmc@@ for manpages
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d94 1
a94 1
			    "router %s route %s/%d gateway %s %s",
d97 2
a98 1
			    HOST_ISUP(host->up) ? "up" : "down");
d143 1
@

