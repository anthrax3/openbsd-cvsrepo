head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.24
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2008.06.13.21.34.24;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.13.21.32.26;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@$OpenBSD$
@
text
@/*	$OpenBSD: lockd_lock.h,v 1.2 2000/06/09 14:00:54 fvdl Exp $	*/

/* Headers and function declarations for file-locking utilities */

struct nlm4_holder *testlock(struct nlm4_lock *, int);

enum nlm_stats getlock(nlm4_lockargs *, struct svc_req *, int);
enum nlm_stats unlock(nlm4_lock *, int);
void notify(const char *, int);

/* flags for testlock, getlock & unlock */
#define LOCK_ASYNC	0x01 /* async version (getlock only) */
#define LOCK_V4 	0x02 /* v4 version */
#define LOCK_MON 	0x04 /* monitored lock (getlock only) */
#define LOCK_CANCEL 0x08 /* cancel, not unlock request (unlock only) */

/* callbacks from lock_proc.c */
void	transmit_result(int, nlm_res *, struct sockaddr_in *);
void	transmit4_result(int, nlm4_res *, struct sockaddr_in *);
CLIENT  *get_client(struct sockaddr_in *, u_long);
@


1.1
log
@from NetBSD:
Implement file locking in lockd. All the stuff is done in userland, using
fhopen() and flock(). This means that if you kill lockd, all locks will
be relased.
Shared locks are not handled efficiently, they're serialised in lockd when
they could be granted.

tested against debian etch (linux 2.6.18)
not fully functional yet in mixed NFSv2/v3 environments
further development in-tree as discussed w/ deraadt
@
text
@d1 1
a1 1
/*	$NetBSD: lockd_lock.h,v 1.2 2000/06/09 14:00:54 fvdl Exp $	*/
@

