head	1.9;
access;
symbols
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2002.12.31.16.35.42;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2002.09.06.20.16.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.06.20.03.38;	author henning;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.06.19.52.35;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.02.22.50.00;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.09.00.38.47;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.30.16.06.35;	author aaron;	state Exp;
branches;
next	1.2;

1.2
date	97.01.15.23.43.57;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.47.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.47.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@amiga and sun3 turned out to not be y2k+3 compliant here. Remove them, as
well as the few userland tools which were only used on these platforms.
@
text
@/*
 * GSP assembler main program
 *
 * Copyright (c) 1993 Paul Mackerras.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Paul Mackerras.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <setjmp.h>
#include <string.h>
#include <errno.h>
#include <err.h>
#include <unistd.h>
#include "gsp_ass.h"
#include "y.tab.h"

#define YYDEBUG_VALUE	0

extern	YYSTYPE yylval;
int	err_count;

char	line[MAXLINE];
int	lineno;

extern	int yydebug;
short	pass2;

unsigned int pc;
unsigned int highest_pc;
unsigned int line_pc;

FILE	*infile;
FILE	*current_infile;
FILE	*objfile;
FILE	*listfile;

char	in_name[PATH_MAX];

struct	input {
	FILE	*fp;
	struct input *next;
	int	lineno;
	char	name[128];
} *pending_input;

jmp_buf	synerrjmp;

void usage(void);

int
main(int argc, char *argv[])
{
	char	*hex_name, *list_name;
	int	c;

	hex_name = list_name = 0;

	/* parse options */
	while ((c = getopt(argc, argv, "o:l:")) != -1) {
		switch (c) {
		case 'o':
			if (hex_name)
				usage();
			hex_name = optarg;
			break;
		case 'l':
			if (list_name)
				usage();
			list_name = optarg;
			break;
		default:
			usage();
		}
	}

	/* get source file */
	argc -= optind;
	argv += optind;
	if (argc == 0) {
		infile = stdin;
		strcpy(in_name, "<stdin>");
	} else if (argc == 1) {
		strlcpy(in_name, *argv, sizeof(in_name));
		if ((infile = fopen(in_name, "r")) == NULL)
			err(1, "fopen");
	} else 
		usage();

	/* Pass 1 */
	pending_input = NULL;
	current_infile = infile;

	yydebug = YYDEBUG_VALUE;
	pass2 = 0;
	pc = 0;
	lineno = 0;
	while (get_line(line, MAXLINE)) {
		if( !setjmp(synerrjmp)) {
			lex_init(line);
			yyparse();
		}
	}
	if (err_count > 0)
		exit(1);

	/* Open output files */
	if (hex_name == 0)
		objfile = stdout;
	else if ((objfile = fopen(hex_name, "w")) == NULL)
		err(1, "fopen");
	if (list_name)
		if ((listfile = fopen(list_name, "w")) == NULL)
			err(1, "fopen");

	/* Pass 2 */
	pass2 = 1;
	rewind(infile);
	current_infile = infile;
	pc = 0;
	lineno = 0;
	reset_numeric_labels();
	while (get_line(line, MAXLINE)) {
		line_pc = pc;
		if (!setjmp(synerrjmp)) {
			lex_init(line);
			yyparse();
		}
		listing();
	}

	exit(err_count != 0);
}

void
setext(char *out, const char *in, const char *ext)
{
	const	char *p;

	p = strrchr(in, '.');
	if (p != NULL) {
		memcpy(out, in, p - in);
		strcpy(out + (p - in), ext);
	} else {
		strcpy(out, in);
		strcat(out, ext);
	}
}

void
push_input(char *fn)
{
	FILE *f;
	struct input *p;

	f = fopen(fn, "r");
	if (f == NULL) {
		p1err("Can't open input file %s", fn);
		return;
	}
	ALLOC(p, struct input *);
	p->fp = current_infile;
	p->lineno = lineno;
	strcpy(p->name, in_name);
	p->next = pending_input;
	current_infile = f;
	lineno = 1;
	strcpy(in_name, fn);
	pending_input = p;
}

int
get_line(char *lp, int maxlen)
{
	struct	input *p;

	while (fgets(lp, maxlen, current_infile) == NULL) {
		if ((p = pending_input) == NULL)
			return 0;
		/* pop the input stack */
		fclose(current_infile);
		current_infile = p->fp;
		strcpy(in_name, p->name);
		lineno = p->lineno;
		pending_input = p->next;
		free(p);
	}
	++lineno;
	return 1;
}

void
perr(char *fmt, ...)
{
	va_list	ap;
	char	error_string[256];

	if (!pass2)
		return;
	fprintf(stderr, "Error in line %d: ", lineno);
	va_start(ap, fmt);
	vsprintf(error_string, fmt, ap);
	va_end(ap);
	fprintf(stderr, "%s\n", error_string);
	list_error(error_string);
	++err_count;
}

void
p1err(char *fmt, ...)
{
	va_list ap;

	fprintf(stderr, "Pass 1 error in line %d: ", lineno);
	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);
	fprintf(stderr, "\n");
	++err_count;
}

void
yyerror(char *err)
{
	perr("%s", err);
	longjmp(synerrjmp, 1);
}

char *
alloc(size_t nbytes)
{
	char	*p;

	if ((p = malloc(nbytes)) == NULL) {
		fprintf(stderr, "Insufficient memory at line %d\n", lineno);
		exit(1);
	}
	return p;
}

void
usage()
{
	fprintf(stderr,
		"Usage: gspa [infile] [+o|-o hex_file] [+l|-l list_file]\n");
	exit(1);
}
@


1.8
log
@first cut at -Wall
@
text
@@


1.7
log
@bit KNF
"commit that if you like" theo
@
text
@d55 3
a57 3
unsigned	int pc;
unsigned	int highest_pc;
unsigned	int line_pc;
d75 4
a78 1
main(int argc, char **argv)
a80 2
	short	in_given, hex_given, list_given;
	int	i, v;
a81 1
	char	*p;
d161 1
d176 1
a250 2
	extern	char *lineptr;

d267 1
a267 1
int
@


1.6
log
@compile with -ansi
@
text
@d46 2
a47 2
extern YYSTYPE yylval;
int err_count;
d49 2
a50 2
char line[MAXLINE];
int lineno;
d52 2
a53 2
extern int yydebug;
short pass2;
d55 3
a57 3
unsigned pc;
unsigned highest_pc;
unsigned line_pc;
d59 4
a62 4
FILE *infile;
FILE *current_infile;
FILE *objfile;
FILE *listfile;
d64 1
a64 1
char in_name[PATH_MAX];
d66 1
a66 1
struct input {
d73 1
a73 1
jmp_buf synerrjmp;
d77 5
a81 5
	char *hex_name, *list_name;
	short in_given, hex_given, list_given;
	int i, v;
	int c;
	char *p;
d124 2
a125 2
	while( get_line(line, MAXLINE) ){
		if( !setjmp(synerrjmp) ){
d130 1
a130 1
	if( err_count > 0 )
d149 1
a149 1
	while( get_line(line, MAXLINE) ){
d151 1
a151 1
		if( !setjmp(synerrjmp) ){
d163 1
a163 1
	const char *p;
d166 1
a166 1
	if( p != NULL ){
d181 1
a181 1
	if( f == NULL ){
d199 1
a199 1
	struct input *p;
d201 2
a202 2
	while( fgets(lp, maxlen, current_infile) == NULL ){
		if( (p = pending_input) == NULL )
d219 2
a220 2
	va_list ap;
	char error_string[256];
d222 1
a222 1
	if( !pass2 )
d249 1
a249 1
	extern char *lineptr;
d258 1
a258 1
	register char *p;
d260 1
a260 1
	if( (p = malloc(nbytes)) == NULL ){
d267 1
@


1.5
log
@withough -> without
@
text
@d185 1
a185 1
	new(p);
@


1.4
log
@PATH_MAX includes NUL
@
text
@d19 1
a19 1
 *    derived from this software withough specific prior written permission
@


1.3
log
@Some format string problems that were missed during initial audit; deraadt@@ and
millert@@ ok
@
text
@d64 1
a64 1
char in_name[PATH_MAX + 1];
d110 1
a110 2
		strncpy(in_name, *argv, PATH_MAX);
		in_name[PATH_MAX] = 0;
@


1.2
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d252 1
a252 1
	perr(err);
@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
	while ((c = getopt(argc, argv, "o:l:")) != EOF) {
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
